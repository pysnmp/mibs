#
# PySNMP MIB module CAMBIUM-PMP80211-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/cambium/CAMBIUM-PMP80211-MIB.txt
# Produced by pysmi-1.1.12 at Fri Jul 19 11:33:18 2024
# On host fv-az702-886 platform Linux version 6.5.0-1023-azure by user runner
# Using Python version 3.10.14 (main, Jun 20 2024, 15:20:03) [GCC 11.4.0]
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
IpAddress, NotificationType, Counter64, TimeTicks, enterprises, Counter32, Gauge32, MibIdentifier, Integer32, ModuleIdentity, Bits, iso, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "NotificationType", "Counter64", "TimeTicks", "enterprises", "Counter32", "Gauge32", "MibIdentifier", "Integer32", "ModuleIdentity", "Bits", "iso", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity")
DisplayString, MacAddress, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "MacAddress", "TextualConvention")
pmpMibTree = ModuleIdentity((1, 3, 6, 1, 4, 1, 17713, 21))
pmpMibTree.setRevisions(('2013-04-26 12:38',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: pmpMibTree.setRevisionsDescriptions(('Initial Production Version.',))
if mibBuilder.loadTexts: pmpMibTree.setLastUpdated('201304261238Z')
if mibBuilder.loadTexts: pmpMibTree.setOrganization('Cambium Networks Inc.')
if mibBuilder.loadTexts: pmpMibTree.setContactInfo('Cambium Networks Support')
if mibBuilder.loadTexts: pmpMibTree.setDescription('This module contains MIB definitions for APs.')
cambium = MibIdentifier((1, 3, 6, 1, 4, 1, 17713))
cambiumPmp80211SystemStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 1))
cambiumGeneralStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 1, 1))
cambiumRFStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2))
cambiumGPSStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 1, 3))
cambiumLinkStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 1, 4))
cambiumAcsStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 1, 5))
cambiumMcastStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 1, 6))
cambiumDhcpStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 1, 7))
cambiumLicenseInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 1, 8))
cambiumRadiusVSAStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 1, 9))
cambiumPmp80211SystemMonitoring = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 2))
cambiumPerformanceMonitoring = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1))
cambiumRealTimeStatsMonitoring = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 2, 2))
cambiumAdvancedPerformanceMonitoring = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 2, 3))
cambiumpmp80211SystemConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 3))
cambiumSystemLog = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 3, 1))
cambiumDHCP = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 3, 2))
cambiumSSHServer = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 3, 3))
network = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4))
networkLan = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 2))
networkWan = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 3))
snmp = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 3, 5))
cambiumSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 3, 6))
systemConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 3, 6, 1))
systemNtpServer = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 3, 6, 2))
cambiumWebServer = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 3, 7))
wireless = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8))
wirelessDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 1))
wirelessInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 2))
wirelessPrefList = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 3))
wirelessMIRList = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 4))
wirelessRadius = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 5))
wirelessRadiusServerList = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 6))
wirelessRadiusCertificateList = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 7))
wirelessRadiusCertificateListRow1 = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 7, 1))
wirelessRadiusCertificateListRow2 = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 7, 2))
wirelessRadiusCertificateListRow3 = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 7, 3))
wirelessRadiusCertificateSet = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 8))
wirelessRadiusExtraCertificateSet = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 9))
l2Firewall = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 3, 9))
l3Firewall = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 3, 10))
confQoS = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 3, 11))
dmz = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 3, 12))
portForwarding = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 3, 13))
vlans = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 3, 14))
dlkm = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 3, 15))
routing = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 3, 16))
cambiumDeviceAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 3, 20))
upnpd = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 3, 21))
lldpd = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 3, 23))
mgmtVLAN = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 4))
dataVLAN = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 5))
mcastVLAN = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 15))
networkBridge = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 7))
mgmtIF = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 20))
networkAliases = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 27))
cambiumpmp80211SystemActions = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 4))
cambiumpmp80211SystemTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 0))
cambiumpmp80211Tools = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 6))
cambiumLinkTest = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 6, 1))
caminfo = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 6, 2))
cambiumToolBar = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 6, 3))
cambiumCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 6, 4))
cambiumIDM = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 6, 5))
cambiumACSCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 6, 6))
cambiumToolBarOpts = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 6, 3, 1))
cambiumToolBarStates = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 6, 3, 2))
multicast = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 10))
cambiumCurrentSWInfo = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumCurrentSWInfo.setStatus('current')
if mibBuilder.loadTexts: cambiumCurrentSWInfo.setDescription('Software information - version, etc.\n\t Device Allocation: AP, SM')
cambiumHWInfo = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ValueRangeConstraint(3, 3), ValueRangeConstraint(4, 4), ValueRangeConstraint(5, 5), ValueRangeConstraint(6, 6), ValueRangeConstraint(7, 7), ValueRangeConstraint(8, 8), ValueRangeConstraint(9, 9), ValueRangeConstraint(10, 10), ValueRangeConstraint(11, 11), ValueRangeConstraint(12, 12), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumHWInfo.setStatus('current')
if mibBuilder.loadTexts: cambiumHWInfo.setDescription('Hardware SKU:\n\t\t\t-1 - Not available\n\t\t\t0 - 5 GHz Connectorized Radio with Sync\n\t\t\t1 - 5 GHz Connectorized Radio\n\t\t\t2 - 5 GHz Integrated Radio\n\t\t\t3 - 2.4 GHz Connectorized Radio with Sync\n\t\t\t4 - 2.4 GHz Connectorized Radio\n\t\t\t5 - 2.4 GHz Integrated Radio\n\t\t\t6 - Force 200 ROW\n\t\t\t7 - Reserved\n\t\t\t8 - Force 200\n\t\t\t9 - Force 200 FCC\n\t\t\t10 - Reserved\n\t\t\t11 - Force 180 ROW\n\t\t\t12 - Force 180 FCC\n\t\tDevice Allocation: AP, SM')
cambiumDateTime = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumDateTime.setStatus('current')
if mibBuilder.loadTexts: cambiumDateTime.setDescription('Date and Time in format mm/dd/yyyy:hh:mm:ss\n\t\tDevice Allocation: AP, SM')
cambiumSystemUptime = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumSystemUptime.setStatus('current')
if mibBuilder.loadTexts: cambiumSystemUptime.setDescription('Device UpTime in format days, hours, minutes, and seconds -> dddd:hh:mm:ss\n\t\tDevice Allocation: AP, SM')
cambiumWirelessMACAddress = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(11, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumWirelessMACAddress.setStatus('current')
if mibBuilder.loadTexts: cambiumWirelessMACAddress.setDescription('The device Wireless MAC address\n\t\tDevice Allocation: AP, SM')
cambiumDFSStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumDFSStatus.setStatus('current')
if mibBuilder.loadTexts: cambiumDFSStatus.setDescription('DFS Status:\n\t\t\t1 - N/A, \n\t\t\t2 - Channel Availability Check, \n\t\t\t3 - In-Service,\n\t\t\t4 - Radar Signal Detected,\n\t\t\t5 - In-Service Monitoring at Alternative Channel,\n\t\t\t6 - System Not In Service due to DFS\n\t\tDevice Allocation: AP, SM')
cambiumEffectiveSyncSource = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ValueRangeConstraint(3, 3), ValueRangeConstraint(4, 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumEffectiveSyncSource.setStatus('current')
if mibBuilder.loadTexts: cambiumEffectiveSyncSource.setDescription('Sync Source Status:\n\t\t\t1 - GPS Sync Up, \n\t\t\t2 - GPS Sync Down, \n\t\t\t3 - CMM4 Sync,\n\t\t\t4 - CMM3 Sync\n\t\tDevice Allocation: AP')
cambiumEffectiveCountryCode = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumEffectiveCountryCode.setStatus('current')
if mibBuilder.loadTexts: cambiumEffectiveCountryCode.setDescription('Current device Country Code\n\t\tDevice Allocation: AP, SM')
cambiumEffectiveAntennaGain = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumEffectiveAntennaGain.setStatus('current')
if mibBuilder.loadTexts: cambiumEffectiveAntennaGain.setDescription('Effective Antenna Gain in dBi\n\t\tDevice Allocation: AP, SM')
cambiumEffectiveTDDRatio = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumEffectiveTDDRatio.setStatus('current')
if mibBuilder.loadTexts: cambiumEffectiveTDDRatio.setDescription('Effective DL/UL Ratio:\n\t\t\t1 - 75/25, \n\t\t\t2 - 50/50, \n\t\t\t3 - 30/70, \n\t\t\t4 - Flexible\n\t\tDevice Allocation: AP, SM')
cambiumEffectiveSSID = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumEffectiveSSID.setStatus('current')
if mibBuilder.loadTexts: cambiumEffectiveSSID.setDescription('Effective SSID\n\t\tDevice Allocation: AP')
cambiumEffectiveAuthenticationType = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ValueRangeConstraint(3, 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumEffectiveAuthenticationType.setStatus('current')
if mibBuilder.loadTexts: cambiumEffectiveAuthenticationType.setDescription('Effective Authentication Type:\n\t\t\t1 - Open,\n\t\t\t2 - WPA2,\n\t\t\t3 - EAP-TTLS')
cambiumEffectiveDeviceName = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumEffectiveDeviceName.setStatus('current')
if mibBuilder.loadTexts: cambiumEffectiveDeviceName.setDescription('Effective Device Name\n\t\tDevice Allocation: AP, SM')
cambiumUbootVersion = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumUbootVersion.setStatus('current')
if mibBuilder.loadTexts: cambiumUbootVersion.setDescription('U-boot version\n\t\tDevice Allocation: AP, SM')
cambiumLANMACAddress = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(11, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumLANMACAddress.setStatus('current')
if mibBuilder.loadTexts: cambiumLANMACAddress.setDescription('The device LAN MAC address\n\t\tDevice Allocation: AP, SM')
cambiumCurrentuImageIVersion = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumCurrentuImageIVersion.setStatus('current')
if mibBuilder.loadTexts: cambiumCurrentuImageIVersion.setDescription('Version of firmware on uimagei partition\n\t\tDevice Allocation: AP')
cambiumCurrentuImageVersion = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumCurrentuImageVersion.setStatus('current')
if mibBuilder.loadTexts: cambiumCurrentuImageVersion.setDescription('Version of firmware on uimage partition\n\t\tDevice Allocation: AP, SM')
cambiumDeviceLatitude = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumDeviceLatitude.setStatus('current')
if mibBuilder.loadTexts: cambiumDeviceLatitude.setDescription('Current location information. GPS cordinates (latitude).\n\t\t\t\tDevice Allocation: AP, SM')
cambiumDeviceLongitude = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumDeviceLongitude.setStatus('current')
if mibBuilder.loadTexts: cambiumDeviceLongitude.setDescription('Current location information.GPS cordinates (longitude).\n\t\t\t\tDevice Allocation: AP, SM')
sysRebootCounter = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysRebootCounter.setStatus('current')
if mibBuilder.loadTexts: sysRebootCounter.setDescription('Device Reboot Counter\n\t\t\t\t Device Allocation: AP, SM')
cambiumDFSStatusStr = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumDFSStatusStr.setStatus('current')
if mibBuilder.loadTexts: cambiumDFSStatusStr.setDescription('DFS Status (text)\n\t\tDevice Allocation: AP, SM')
cambiumDriverType = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumDriverType.setStatus('current')
if mibBuilder.loadTexts: cambiumDriverType.setDescription('SM current driver (TDD - 1, standard Wi-Fi - 2).\n\t\tDevice Allocation: SM')
cambiumESN = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(13, 13)).setFixedLength(13)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumESN.setStatus('current')
if mibBuilder.loadTexts: cambiumESN.setDescription("Device' serial number (ESN), based on MAC address\n\t\tDevice Allocation: AP, SM")
cambiumEPMPMSN = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 1, 31), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(13, 13)).setFixedLength(13)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumEPMPMSN.setStatus('current')
if mibBuilder.loadTexts: cambiumEPMPMSN.setDescription('CNS MSN serial number: AP, SM')
cambiumFactoryReset = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumFactoryReset.setStatus('current')
if mibBuilder.loadTexts: cambiumFactoryReset.setDescription('Factory Reset feature state.\n\t\tDefault allocation: AP, SM')
cambiumSubModeType = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ValueRangeConstraint(3, 3), ValueRangeConstraint(4, 4), ValueRangeConstraint(5, 5), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumSubModeType.setStatus('current')
if mibBuilder.loadTexts: cambiumSubModeType.setDescription('Protocol (Sub) Mode type:\n\t\t\t1 - TDD,\n\t\t\t2 - TDD PTP,\n\t\t\t3 - Standard WiFi,\n\t\t\t4 - ePTP Slave,\n\t\t\t5 - ePTP Master\n\t\t\tDevice Allocation: AP, SM')
cambiumSTAConnectedRFFrequency = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2407, 5970))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumSTAConnectedRFFrequency.setStatus('current')
if mibBuilder.loadTexts: cambiumSTAConnectedRFFrequency.setDescription('The frequency connected to AP\n\t\tDevice Allocation: SM')
cambiumSTAConnectedRFBandwidth = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumSTAConnectedRFBandwidth.setStatus('current')
if mibBuilder.loadTexts: cambiumSTAConnectedRFBandwidth.setDescription('Connected RF Bandwidth: \n\t\t\t1 for 20MHz, \n\t\t\t2 for 40 MHz\n\t\tDevice Allocation: SM')
cambiumSTADLRSSI = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumSTADLRSSI.setStatus('current')
if mibBuilder.loadTexts: cambiumSTADLRSSI.setDescription('SM RSSI in dBm\n\t\tDevice Allocation: SM')
cambiumSTADLCINR = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumSTADLCINR.setStatus('obsolete')
if mibBuilder.loadTexts: cambiumSTADLCINR.setDescription('SM CINR in dBm\n\t\tDevice Allocation: SM')
cambiumSTAConductedTXPower = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-25, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumSTAConductedTXPower.setStatus('current')
if mibBuilder.loadTexts: cambiumSTAConductedTXPower.setDescription('Current TX Power (Board Output Conducted) in dBm\n\t\tDevice Allocation: SM')
cambiumSTAUplinkMCSMode = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 7), ValueRangeConstraint(9, 15), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumSTAUplinkMCSMode.setStatus('current')
if mibBuilder.loadTexts: cambiumSTAUplinkMCSMode.setDescription('UL MCS Mode: \n\t\t\t1 for MCS1, \n\t\t\t2 for MCS2, \n\t\t\t3 for MCS3, \n\t\t\t4 for MCS4, \n\t\t\t5 for MCS5, \n\t\t\t6 for MCS6, \n\t\t\t7 for MCS7, \n\t\t\t9 for MCS9, \n\t\t\t10 for MCS10, \n\t\t\t11 for MCS11, \n\t\t\t12 for MCS12, \n\t\t\t13 for MCS13, \n\t\t\t14 for MCS14, \n\t\t\t15 for MCS15\n\t\tDevice Allocation: SM')
cambiumSTADownlinkMCSMode = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 7), ValueRangeConstraint(9, 15), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumSTADownlinkMCSMode.setStatus('current')
if mibBuilder.loadTexts: cambiumSTADownlinkMCSMode.setDescription('DL MCS Mode: \n\t\t\t1 for MCS1, \n\t\t\t2 for MCS2, \n\t\t\t3 for MCS3, \n\t\t\t4 for MCS4, \n\t\t\t5 for MCS5, \n\t\t\t6 for MCS6, \n\t\t\t7 for MCS7, \n\t\t\t9 for MCS9, \n\t\t\t10 for MCS10, \n\t\t\t11 for MCS11, \n\t\t\t12 for MCS12, \n\t\t\t13 for MCS13, \n\t\t\t14 for MCS14, \n\t\t\t15 for MCS15\n\t\tDevice Allocation: SM')
cambiumSTAConnectedAP = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumSTAConnectedAP.setStatus('current')
if mibBuilder.loadTexts: cambiumSTAConnectedAP.setDescription('Connected AP Name (SSID), If no AP is connected, Scanning should be returned\n\t\tDevice Allocation: SM')
cambiumSTAPowerControlMode = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumSTAPowerControlMode.setStatus('current')
if mibBuilder.loadTexts: cambiumSTAPowerControlMode.setDescription('Power Control Mode on SM:\n\t\t\t-1 - No Value,\n\t\t\t0 - Disable, \n\t\t\t1 - Open Loop, \n\t\t\t2 - Close Loop\n\t\tDevice Allocation: SM')
cambiumAPNumberOfConnectedSTA = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumAPNumberOfConnectedSTA.setStatus('current')
if mibBuilder.loadTexts: cambiumAPNumberOfConnectedSTA.setDescription('Number Of connected stations\n\t\tDevice Allocation: AP')
cambiumAPConnectedSTAListTable = MibTable((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 11), )
if mibBuilder.loadTexts: cambiumAPConnectedSTAListTable.setStatus('obsolete')
if mibBuilder.loadTexts: cambiumAPConnectedSTAListTable.setDescription('This table contains information relevant to the Connected Subscriber Modules:\n\t\t\tSubscriber Module MAC Address,\n\t\t\tSubscriber Module AID,\n\t\t\tSubscriber Module Channel,\n\t\t\tUL RSSI per SM,\n\t\t\tDL RSSI per SM,\n\t\t\tDL CINR per SM,\n\t\t\tUL CINR per SM,\n\t\t\tUL MCS Mode per SM,\n\t\t\tDL MCS Mode per SM,\n\t\t\tSubscriber Module IP Address\n\t\tDevice Allocation: AP')
cambiumAPConnectedSTAListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 11, 1), ).setIndexNames((0, "CAMBIUM-PMP80211-MIB", "cambiumAPNumberOfConnectedSTA"))
if mibBuilder.loadTexts: cambiumAPConnectedSTAListEntry.setStatus('obsolete')
if mibBuilder.loadTexts: cambiumAPConnectedSTAListEntry.setDescription('Wireless parameters mapping for particular station.\n\t\tDevice Allocation: AP')
connectedSTAListMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 11, 1, 1), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(11, 17), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedSTAListMAC.setStatus('obsolete')
if mibBuilder.loadTexts: connectedSTAListMAC.setDescription('Connected SM WLAN MAC Address\n\t\tDevice Allocation: AP')
connectedSTAListAID = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 11, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedSTAListAID.setStatus('obsolete')
if mibBuilder.loadTexts: connectedSTAListAID.setDescription('Association ID\n\t\tDevice Allocation: AP')
connectedSTAListChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 11, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedSTAListChannel.setStatus('obsolete')
if mibBuilder.loadTexts: connectedSTAListChannel.setDescription('Connected SM Channel\n\t\tDevice Allocation: AP')
connectedSTAListULRSSI = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 11, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedSTAListULRSSI.setStatus('obsolete')
if mibBuilder.loadTexts: connectedSTAListULRSSI.setDescription('UL RSSI per SM\n\t\tDevice Allocation: AP')
connectedSTAListDLRSSI = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 11, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedSTAListDLRSSI.setStatus('obsolete')
if mibBuilder.loadTexts: connectedSTAListDLRSSI.setDescription('DL RSSI per SM\n\t\tDevice Allocation: AP')
connectedSTAListULCINR = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 11, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedSTAListULCINR.setStatus('obsolete')
if mibBuilder.loadTexts: connectedSTAListULCINR.setDescription('UL CINR per SM\n\t\tDevice Allocation: AP')
connectedSTAListDLCINR = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 11, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedSTAListDLCINR.setStatus('obsolete')
if mibBuilder.loadTexts: connectedSTAListDLCINR.setDescription('DL CINR per SM\n\t\tDevice Allocation: AP')
connectedSTAListULMCS = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 11, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedSTAListULMCS.setStatus('obsolete')
if mibBuilder.loadTexts: connectedSTAListULMCS.setDescription('UL MCS Mode per SM:\n\t\t\t1 for MCS1, \n\t\t\t2 for MCS2, \n\t\t\t3 for MCS3, \n\t\t\t4 for MCS4, \n\t\t\t5 for MCS5, \n\t\t\t6 for MCS6, \n\t\t\t7 for MCS7, \n\t\t\t9 for MCS9, \n\t\t\t10 for MCS10, \n\t\t\t11 for MCS11, \n\t\t\t12 for MCS12, \n\t\t\t13 for MCS13, \n\t\t\t14 for MCS14, \n\t\t\t15 for MCS15\n\t\tDevice Allocation: AP')
connectedSTAListDLMCS = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 11, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedSTAListDLMCS.setStatus('obsolete')
if mibBuilder.loadTexts: connectedSTAListDLMCS.setDescription('DL MCS Mode per SM:\n\t\t\t1 for MCS1, \n\t\t\t2 for MCS2, \n\t\t\t3 for MCS3, \n\t\t\t4 for MCS4, \n\t\t\t5 for MCS5, \n\t\t\t6 for MCS6, \n\t\t\t7 for MCS7, \n\t\t\t9 for MCS9, \n\t\t\t10 for MCS10, \n\t\t\t11 for MCS11, \n\t\t\t12 for MCS12, \n\t\t\t13 for MCS13, \n\t\t\t14 for MCS14, \n\t\t\t15 for MCS15\n\t\tDevice Allocation: AP')
connectedSTAListIP = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 11, 1, 10), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedSTAListIP.setStatus('obsolete')
if mibBuilder.loadTexts: connectedSTAListIP.setDescription('Connected SM WLAN IP Address\n\t\tDevice Allocation: AP')
connectedSTAListMirSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 11, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedSTAListMirSrc.setStatus('obsolete')
if mibBuilder.loadTexts: connectedSTAListMirSrc.setDescription('Connected SM MIR source: RADIUS server or profile ID\n\t\tDevice Allocation: AP')
connectedSTAListMirULRate = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 11, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedSTAListMirULRate.setStatus('obsolete')
if mibBuilder.loadTexts: connectedSTAListMirULRate.setDescription('Connected SM MIR UL Rate\n\t\tDevice Allocation: AP')
connectedSTAListMirDLRate = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 11, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedSTAListMirDLRate.setStatus('obsolete')
if mibBuilder.loadTexts: connectedSTAListMirDLRate.setDescription('Connected SM MIR DL Rate\n\t\tDevice Allocation: AP')
cambiumSTADistanceKm = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumSTADistanceKm.setStatus('current')
if mibBuilder.loadTexts: cambiumSTADistanceKm.setDescription('The distance between AP and SM in kilometers\n\t\tDevice Allocation: SM')
cambiumSTADistanceMil = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumSTADistanceMil.setStatus('current')
if mibBuilder.loadTexts: cambiumSTADistanceMil.setDescription('The distance between AP and SM in miles\n\t\tDevice Allocation: SM')
cambiumPropagationDelay = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2000, 5000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumPropagationDelay.setStatus('current')
if mibBuilder.loadTexts: cambiumPropagationDelay.setDescription('SM use the calculated propagation delay to adjust the UL starting time\n\t\tDevice Allocation: SM')
cambiumSTAConnectedAPListTable = MibTable((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 15), )
if mibBuilder.loadTexts: cambiumSTAConnectedAPListTable.setStatus('obsolete')
if mibBuilder.loadTexts: cambiumSTAConnectedAPListTable.setDescription('This table contains information relevant to the Connected Subscriber Modules:\n\t\t\tSSID - AP Name (SSID)\n\t\t\tBSSID - AP MAC Address\n\t\t\tChannel - Operating channgel number\n\t\t\tFrequency - AP Operating frequency\n\t\t\tBandwitdth - AP Operating Bandwidth\n\t\t\tRate - AP Operating Rate\n\t\t\tCINR - AP Signal to Noise Ratio\n\t\t\tRSSI - AP Received Signal Strength Indication\n\t\t\tNoise - AP Noise level\n\t\t\tINT - Beacon Interval\n\t\t\tNE_ST - Last Network Entry State\n\t\t\tNE_AGE - Time from last Network Entry event\n\t\t\tSCAN_AGE - Time from last AP scanning\n\t\t\tRemaining_SM  - Capacity on AP from beacon\n\t\t\tCAPS - IEEE80211 capability flags\n\t\t\tMeetNEAttemptCriteria - status for eachAP after scanning\n\t\tDevice Allocation: SM')
cambiumSTAConnectedAPListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 15, 1), ).setIndexNames((0, "CAMBIUM-PMP80211-MIB", "connectedAPListSSID"))
if mibBuilder.loadTexts: cambiumSTAConnectedAPListEntry.setStatus('obsolete')
if mibBuilder.loadTexts: cambiumSTAConnectedAPListEntry.setDescription('Wireless parameters mapping for particular station.\n\t\tDevice Allocation: SM')
connectedAPListSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 15, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedAPListSSID.setStatus('obsolete')
if mibBuilder.loadTexts: connectedAPListSSID.setDescription('AP Name (SSID)\n\t\tDevice Allocation: SM')
connectedAPListBSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 15, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedAPListBSSID.setStatus('obsolete')
if mibBuilder.loadTexts: connectedAPListBSSID.setDescription('AP MAC Address\n\t\tDevice Allocation: SM')
connectedAPListChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 15, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedAPListChannel.setStatus('obsolete')
if mibBuilder.loadTexts: connectedAPListChannel.setDescription('Operating channgel number\n\t\tDevice Allocation: SM')
connectedAPListFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 15, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedAPListFrequency.setStatus('obsolete')
if mibBuilder.loadTexts: connectedAPListFrequency.setDescription('AP Operating frequency\n\t\tDevice Allocation: SM')
connectedAPListBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 15, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedAPListBandwidth.setStatus('obsolete')
if mibBuilder.loadTexts: connectedAPListBandwidth.setDescription('AP Operating Bandwidth\n\t\tDevice Allocation: SM')
connectedAPListRate = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 15, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedAPListRate.setStatus('obsolete')
if mibBuilder.loadTexts: connectedAPListRate.setDescription('AP Operating Rate\n\t\tDevice Allocation: SM')
connectedAPListCINR = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 15, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedAPListCINR.setStatus('obsolete')
if mibBuilder.loadTexts: connectedAPListCINR.setDescription('AP\t Carrier to Interference Noise Ratio\n\t\tDevice Allocation: SM')
connectedAPListRSSI = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 15, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedAPListRSSI.setStatus('obsolete')
if mibBuilder.loadTexts: connectedAPListRSSI.setDescription('AP Received Signal Strength Indication\n\t\tDevice Allocation: SM')
connectedAPListNoise = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 15, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedAPListNoise.setStatus('obsolete')
if mibBuilder.loadTexts: connectedAPListNoise.setDescription('AP Noise level\n\t\tDevice Allocation: SM')
connectedAPListINT = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 15, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedAPListINT.setStatus('obsolete')
if mibBuilder.loadTexts: connectedAPListINT.setDescription('Beacon Interval\n\t\tDevice Allocation: SM')
connectedAPListNEState = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 15, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedAPListNEState.setStatus('obsolete')
if mibBuilder.loadTexts: connectedAPListNEState.setDescription('Last Network Entry State\n\t\tDevice Allocation: SM')
connectedAPListNEAge = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 15, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedAPListNEAge.setStatus('obsolete')
if mibBuilder.loadTexts: connectedAPListNEAge.setDescription('Time from last Network Entry event\n\t\tDevice Allocation: SM')
connectedAPListScanAge = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 15, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedAPListScanAge.setStatus('obsolete')
if mibBuilder.loadTexts: connectedAPListScanAge.setDescription('Time from last AP scanning\n\t\tDevice Allocation: SM')
connectedAPListRemainingSTA = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 15, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedAPListRemainingSTA.setStatus('obsolete')
if mibBuilder.loadTexts: connectedAPListRemainingSTA.setDescription('Remaining SM on AP\n\t\tDevice Allocation: SM')
connectedAPListCAPS = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 15, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedAPListCAPS.setStatus('obsolete')
if mibBuilder.loadTexts: connectedAPListCAPS.setDescription('IEEE80211 capability flags\n\t\tDevice Allocation: SM')
connectedAPAuthMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 15, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedAPAuthMethod.setStatus('obsolete')
if mibBuilder.loadTexts: connectedAPAuthMethod.setDescription('Authentication Method\n\t\t   Device Allocation: SM')
connectedAPListMeetNEAttemptCriteria = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 15, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedAPListMeetNEAttemptCriteria.setStatus('obsolete')
if mibBuilder.loadTexts: connectedAPListMeetNEAttemptCriteria.setDescription('Status meet NE attempt criteria\n\t\t   Device Allocation: SM')
wirelessInterfaceConnectionState = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ValueRangeConstraint(3, 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessInterfaceConnectionState.setStatus('current')
if mibBuilder.loadTexts: wirelessInterfaceConnectionState.setDescription('Connection State:\n\t\t\t1 - Scanning,\n\t\t\t2 - Connecting,\n\t\t\t3 - Connected\n\t\tDevice Allocation: SM')
cambiumSTAPriority = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumSTAPriority.setStatus('current')
if mibBuilder.loadTexts: cambiumSTAPriority.setDescription('SM priority value:\n\t\t\t0 - Normal,\n\t\t\t1 - High,\n\t\t\t2 - Low\n\t\tDevice Allocation: SM')
cambiumSTADLSNR = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumSTADLSNR.setStatus('current')
if mibBuilder.loadTexts: cambiumSTADLSNR.setDescription('SM SNR in dBm\n\t\tDevice Allocation: SM')
cambiumConnectedAPMACAddress = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 19), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(11, 17), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumConnectedAPMACAddress.setStatus('current')
if mibBuilder.loadTexts: cambiumConnectedAPMACAddress.setDescription('Connected AP MAC Address\n\t\tDevice Allocation: SM')
cambiumSTAConnectedAPTable = MibTable((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 20), )
if mibBuilder.loadTexts: cambiumSTAConnectedAPTable.setStatus('current')
if mibBuilder.loadTexts: cambiumSTAConnectedAPTable.setDescription('This table contains information relevant to the Connected Subscriber Modules:\n\t\t\tSSID - AP Name (SSID)\n\t\t\tBSSID - AP MAC Address\n\t\t\tChannel - Operating channgel number\n\t\t\tFrequency - AP Operating frequency\n\t\t\tBandwitdth - AP Operating Bandwidth\n\t\t\tRate - AP Operating Rate\n\t\t\tSNR - AP Signal to Noise Ratio\n\t\t\tRSSI - AP Received Signal Strength Indication\n\t\t\tNoise - AP Noise level\n\t\t\tINT - Beacon Interval\n\t\t\tNE_ST - Last Network Entry State\n\t\t\tNE_AGE - Time from last Network Entry event\n\t\t\tSCAN_AGE - Time from last AP scanning\n\t\t\tRemaining_SM  - Capacity on AP from beacon\n\t\t\tCAPS - IEEE80211 capability flags\n\t\t\tMeetNEAttemptCriteria - status for eachAP after scanning\n\t\tDevice Allocation: SM')
cambiumSTAConnectedAPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 20, 1), ).setIndexNames((0, "CAMBIUM-PMP80211-MIB", "connectedAPListSSID"))
if mibBuilder.loadTexts: cambiumSTAConnectedAPEntry.setStatus('current')
if mibBuilder.loadTexts: cambiumSTAConnectedAPEntry.setDescription('Wireless parameters mapping for particular station.\n\t\tDevice Allocation: SM')
connectedAPSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 20, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedAPSSID.setStatus('current')
if mibBuilder.loadTexts: connectedAPSSID.setDescription('AP Name (SSID)\n\t\tDevice Allocation: SM')
connectedAPBSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 20, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedAPBSSID.setStatus('current')
if mibBuilder.loadTexts: connectedAPBSSID.setDescription('AP MAC Address\n\t\tDevice Allocation: SM')
connectedAPChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 20, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedAPChannel.setStatus('current')
if mibBuilder.loadTexts: connectedAPChannel.setDescription('Operating channgel number\n\t\tDevice Allocation: SM')
connectedAPFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 20, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedAPFrequency.setStatus('current')
if mibBuilder.loadTexts: connectedAPFrequency.setDescription('AP Operating frequency\n\t\tDevice Allocation: SM')
connectedAPBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 20, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedAPBandwidth.setStatus('current')
if mibBuilder.loadTexts: connectedAPBandwidth.setDescription('AP Operating Bandwidth\n\t\tDevice Allocation: SM')
connectedAPRate = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 20, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedAPRate.setStatus('current')
if mibBuilder.loadTexts: connectedAPRate.setDescription('AP Operating Rate\n\t\tDevice Allocation: SM')
connectedAPSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 20, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedAPSNR.setStatus('current')
if mibBuilder.loadTexts: connectedAPSNR.setDescription('AP Signal to Noise Ratio\n\t\tDevice Allocation: SM')
connectedAPRSSI = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 20, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedAPRSSI.setStatus('current')
if mibBuilder.loadTexts: connectedAPRSSI.setDescription('AP Received Signal Strength Indication\n\t\tDevice Allocation: SM')
connectedAPNoise = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 20, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedAPNoise.setStatus('current')
if mibBuilder.loadTexts: connectedAPNoise.setDescription('AP Noise level\n\t\tDevice Allocation: SM')
connectedAPINT = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 20, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedAPINT.setStatus('current')
if mibBuilder.loadTexts: connectedAPINT.setDescription('Beacon Interval\n\t\tDevice Allocation: SM')
connectedAPNEState = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 20, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedAPNEState.setStatus('current')
if mibBuilder.loadTexts: connectedAPNEState.setDescription('Last Network Entry State\n\t\tDevice Allocation: SM')
connectedAPNEAge = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 20, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedAPNEAge.setStatus('current')
if mibBuilder.loadTexts: connectedAPNEAge.setDescription('Time from last Network Entry event\n\t\tDevice Allocation: SM')
connectedAPScanAge = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 20, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedAPScanAge.setStatus('current')
if mibBuilder.loadTexts: connectedAPScanAge.setDescription('Time from last AP scanning\n\t\tDevice Allocation: SM')
connectedAPRemainingSTA = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 20, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedAPRemainingSTA.setStatus('current')
if mibBuilder.loadTexts: connectedAPRemainingSTA.setDescription('Remaining SM on AP\n\t\tDevice Allocation: SM')
connectedAPCAPS = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 20, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedAPCAPS.setStatus('current')
if mibBuilder.loadTexts: connectedAPCAPS.setDescription('IEEE80211 capability flags\n\t\tDevice Allocation: SM')
connectedAPAuthenticationMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 20, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedAPAuthenticationMethod.setStatus('current')
if mibBuilder.loadTexts: connectedAPAuthenticationMethod.setDescription('Authentication Method\n\t\t   Device Allocation: SM')
connectedAPMeetNEAttemptCriteria = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 20, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedAPMeetNEAttemptCriteria.setStatus('current')
if mibBuilder.loadTexts: connectedAPMeetNEAttemptCriteria.setDescription('Status meet NE attempt criteria\n\t\t   Device Allocation: SM')
staTxCapacity = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTxCapacity.setStatus('current')
if mibBuilder.loadTexts: staTxCapacity.setDescription('TX Capacity for SM\n\t\t\t Device Allocation: SM')
staTxQuality = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTxQuality.setStatus('current')
if mibBuilder.loadTexts: staTxQuality.setDescription('TX Quality for SM\n\t\t\t Device Allocation: SM')
acsState = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsState.setStatus('current')
if mibBuilder.loadTexts: acsState.setDescription('Indicates the state of the Automatic Channel Selection (ACS) feature:\n\t\t 0 - Disabled,\n\t\t 1 - Enabled,\n\t\t 2 - Running,\n\t\t 3 - Aborting\n\t\tDevice Allocation: AP')
cambiumEffectiveMcastGroupLimit = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 6, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumEffectiveMcastGroupLimit.setStatus('current')
if mibBuilder.loadTexts: cambiumEffectiveMcastGroupLimit.setDescription('Disaplays the Effective Multicast Group Limit number:\n\t\t 0 - 10 Groups\n\t\tDevice Allocation: SM')
cambiumSubscribedMcastGroupNum = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 6, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumSubscribedMcastGroupNum.setStatus('current')
if mibBuilder.loadTexts: cambiumSubscribedMcastGroupNum.setDescription('Disaplays the number of subscribed Multicast Groups:\n\t\t 0 - 5 Groups\n\t\tDevice Allocation: SM')
cambiumAPMcastTotalGroupCount = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 6, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumAPMcastTotalGroupCount.setStatus('current')
if mibBuilder.loadTexts: cambiumAPMcastTotalGroupCount.setDescription('Disaplays the count of subscribed Multicast Groups:\n\t\t 0 - 512 Groups\n\t\tDevice Allocation: AP')
cambiumMcastHandlingStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 6, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(3, 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumMcastHandlingStatus.setStatus('current')
if mibBuilder.loadTexts: cambiumMcastHandlingStatus.setDescription('Disaplays the status of the Multicast features:\n\t\t\t0 - Fixed MCS\n\t\t\t3 - Multicast to Unicast\n\t\tDevice Allocation: AP')
cambiumSubscribedMcastGroupTable = MibTable((1, 3, 6, 1, 4, 1, 17713, 21, 1, 6, 10), )
if mibBuilder.loadTexts: cambiumSubscribedMcastGroupTable.setStatus('current')
if mibBuilder.loadTexts: cambiumSubscribedMcastGroupTable.setDescription('This table contains Registered Multicast Group information:\n\t\t\tMulticast Group IP\n\t\tDevice Allocation: SM')
cambiumSubscribedMcastGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17713, 21, 1, 6, 10, 1), ).setIndexNames((0, "CAMBIUM-PMP80211-MIB", "cambiumSubscribedMcastGroupNum"))
if mibBuilder.loadTexts: cambiumSubscribedMcastGroupEntry.setStatus('current')
if mibBuilder.loadTexts: cambiumSubscribedMcastGroupEntry.setDescription('Multicast group information for particular subscription\n\t\t\t\tDevice Allocation: SM')
cambiumRegisteredMcastGroupIP = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 6, 10, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumRegisteredMcastGroupIP.setStatus('current')
if mibBuilder.loadTexts: cambiumRegisteredMcastGroupIP.setDescription('Registered Multicast Group IP\n\t\t\t\tDevice Allocation: SM')
dhcpServerStartIP = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 7, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerStartIP.setStatus('current')
if mibBuilder.loadTexts: dhcpServerStartIP.setDescription('Dhcp server start address\n\t\tDevice Allocation: STA')
dhcpServerEndIP = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 7, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerEndIP.setStatus('current')
if mibBuilder.loadTexts: dhcpServerEndIP.setDescription('Dhcp server end address\n\t\tDevice Allocation: STA')
dhcpServerGatewayIP = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 7, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerGatewayIP.setStatus('current')
if mibBuilder.loadTexts: dhcpServerGatewayIP.setDescription('DHCP Gateway IP Address\n\t\tDevice Allocation: STA')
dhcpServerDNSIP = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 7, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerDNSIP.setStatus('current')
if mibBuilder.loadTexts: dhcpServerDNSIP.setDescription('DHCP server DNS IP Address\n\t\tDevice Allocation: STA')
dhcpServerStaticHostTable = MibTable((1, 3, 6, 1, 4, 1, 17713, 21, 1, 7, 5), )
if mibBuilder.loadTexts: dhcpServerStaticHostTable.setStatus('current')
if mibBuilder.loadTexts: dhcpServerStaticHostTable.setDescription('Table for DHCP static MAC to IP')
cambLicenseVersion = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 8, 1), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(1, 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambLicenseVersion.setStatus('current')
if mibBuilder.loadTexts: cambLicenseVersion.setDescription('Device Operational Lincense Version\n\t\tDevice Allocation: AP, SM')
cambLicenseSMcntUnlock = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 8, 2), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(1, 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambLicenseSMcntUnlock.setStatus('current')
if mibBuilder.loadTexts: cambLicenseSMcntUnlock.setDescription('Full Capacity AP feature unlock, based on information from\n\t\t Operational Lincense\n\t\tDevice Allocation: AP, SM')
cambLicenseMACaddr = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 8, 3), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(17, 17), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambLicenseMACaddr.setStatus('current')
if mibBuilder.loadTexts: cambLicenseMACaddr.setDescription('Device Operational Lincense MAC address\n\t\tDevice Allocation: AP, SM')
cambLicenseCountry = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 8, 4), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(1, 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambLicenseCountry.setStatus('current')
if mibBuilder.loadTexts: cambLicenseCountry.setDescription('Country Code for ETSI locked device, based on information from\n\t\t Operational Lincense\n\t\tDevice Allocation: AP, SM')
cambLicenseStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 8, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambLicenseStatus.setStatus('current')
if mibBuilder.loadTexts: cambLicenseStatus.setDescription('Device Operational Lincense Status:\n\t\t 0 - Unknown\n\t\t 1 - License Valid\n\t\t 2 - Validation procedure was not provided\n\t\t 3 - Validation Fail\n\t\t 4 - License not valid for current device\n\t\tDevice Allocation: AP, SM')
dhcpServerStaticHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17713, 21, 1, 7, 5, 1), ).setIndexNames((0, "CAMBIUM-PMP80211-MIB", "dhcpStaticIndex"))
if mibBuilder.loadTexts: dhcpServerStaticHostEntry.setStatus('current')
if mibBuilder.loadTexts: dhcpServerStaticHostEntry.setDescription('DHCP Hosts Table Entry\n\t\tDevice Allocation: STA')
dhcpStaticIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 7, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpStaticIndex.setStatus('current')
if mibBuilder.loadTexts: dhcpStaticIndex.setDescription('DHCP Static Table Index')
dhcpStaticMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 7, 5, 1, 2), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(17, 17), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpStaticMAC.setStatus('current')
if mibBuilder.loadTexts: dhcpStaticMAC.setDescription('DHCP Static MAC')
dhcpStaticIP = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 7, 5, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpStaticIP.setStatus('current')
if mibBuilder.loadTexts: dhcpStaticIP.setDescription('DHCP Static IP')
dhcpServerLeaseTable = MibTable((1, 3, 6, 1, 4, 1, 17713, 21, 1, 7, 6), )
if mibBuilder.loadTexts: dhcpServerLeaseTable.setStatus('current')
if mibBuilder.loadTexts: dhcpServerLeaseTable.setDescription('DHCP Assigned IP Address Table')
networkRadiusVSAmgmtVLANVID = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4095), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkRadiusVSAmgmtVLANVID.setStatus('current')
if mibBuilder.loadTexts: networkRadiusVSAmgmtVLANVID.setDescription('VSA Management VLAN ID')
networkRadiusVSAmgmtVLANVP = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 9, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 7), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkRadiusVSAmgmtVLANVP.setStatus('current')
if mibBuilder.loadTexts: networkRadiusVSAmgmtVLANVP.setDescription('VSA Management VLAN VP')
networkRadiusVSAdataVLANVID = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 9, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4095), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkRadiusVSAdataVLANVID.setStatus('current')
if mibBuilder.loadTexts: networkRadiusVSAdataVLANVID.setDescription('VSA Data VLAN ID')
networkRadiusVSAdataVLANVP = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 9, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 7), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkRadiusVSAdataVLANVP.setStatus('current')
if mibBuilder.loadTexts: networkRadiusVSAdataVLANVP.setDescription('VSA Data VLAN VP')
networkRadiusVSAmgmtIFVID = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 9, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4095), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkRadiusVSAmgmtIFVID.setStatus('current')
if mibBuilder.loadTexts: networkRadiusVSAmgmtIFVID.setDescription('VSA Separate Management Interface VLAN ID')
networkRadiusVSAmgmtIFVP = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 9, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 7), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkRadiusVSAmgmtIFVP.setStatus('current')
if mibBuilder.loadTexts: networkRadiusVSAmgmtIFVP.setDescription('VSA Separate Management Interface VLAN VP')
networkRadiusVSAmcastVLANVID = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 9, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4095), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkRadiusVSAmcastVLANVID.setStatus('current')
if mibBuilder.loadTexts: networkRadiusVSAmcastVLANVID.setDescription('VSA Multicast VLAN ID')
networkRadiusVSAmembershipVLANTable = MibTable((1, 3, 6, 1, 4, 1, 17713, 21, 1, 9, 10), ).setIndexNames((0, "CAMBIUM-PMP80211-MIB", "networkRadiusVSAmembershipVLANIndex"))
if mibBuilder.loadTexts: networkRadiusVSAmembershipVLANTable.setStatus('current')
if mibBuilder.loadTexts: networkRadiusVSAmembershipVLANTable.setDescription('VSA Membership VLAN Table')
networkRadiusVSAmembershipVLANEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17713, 21, 1, 9, 10, 1), ).setIndexNames((0, "CAMBIUM-PMP80211-MIB", "networkRadiusVSAmembershipVLANIndex"))
if mibBuilder.loadTexts: networkRadiusVSAmembershipVLANEntry.setStatus('current')
if mibBuilder.loadTexts: networkRadiusVSAmembershipVLANEntry.setDescription('VSA Membership VLAN Table Rule Entry')
networkRadiusVSAmembershipVLANIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 9, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkRadiusVSAmembershipVLANIndex.setStatus('current')
if mibBuilder.loadTexts: networkRadiusVSAmembershipVLANIndex.setDescription('VSA Membership VLAN Table Entry Index')
networkRadiusVSAmembershipVLANVIDBegin = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 9, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4095), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkRadiusVSAmembershipVLANVIDBegin.setStatus('current')
if mibBuilder.loadTexts: networkRadiusVSAmembershipVLANVIDBegin.setDescription('VSA Membership VLAN Table Entry VLAN ID Begin')
networkRadiusVSAmembershipVLANVIDEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 9, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4095), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkRadiusVSAmembershipVLANVIDEnd.setStatus('current')
if mibBuilder.loadTexts: networkRadiusVSAmembershipVLANVIDEnd.setDescription('VSA Membership VLAN Table Entry VLAN ID End')
networkRadiusVSAmappingVLANTable = MibTable((1, 3, 6, 1, 4, 1, 17713, 21, 1, 9, 20), ).setIndexNames((0, "CAMBIUM-PMP80211-MIB", "networkRadiusVSAmappingVLANIndex"))
if mibBuilder.loadTexts: networkRadiusVSAmappingVLANTable.setStatus('current')
if mibBuilder.loadTexts: networkRadiusVSAmappingVLANTable.setDescription('VSA Mapping VLAN Table Rule Entry')
networkRadiusVSAmappingVLANEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17713, 21, 1, 9, 20, 1), ).setIndexNames((0, "CAMBIUM-PMP80211-MIB", "networkRadiusVSAmappingVLANIndex"))
if mibBuilder.loadTexts: networkRadiusVSAmappingVLANEntry.setStatus('current')
if mibBuilder.loadTexts: networkRadiusVSAmappingVLANEntry.setDescription('VSA Mapping VLAN Table Rule Entry')
networkRadiusVSAmappingVLANIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 9, 20, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkRadiusVSAmappingVLANIndex.setStatus('current')
if mibBuilder.loadTexts: networkRadiusVSAmappingVLANIndex.setDescription('VSA Mapping VLAN Table Entry Index')
networkRadiusVSAmappingVLANCVLAN = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 9, 20, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4095), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkRadiusVSAmappingVLANCVLAN.setStatus('current')
if mibBuilder.loadTexts: networkRadiusVSAmappingVLANCVLAN.setDescription('VSA Mapping VLAN Table C-VLAN ID')
networkRadiusVSAmappingVLANSVLAN = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 9, 20, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4095), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkRadiusVSAmappingVLANSVLAN.setStatus('current')
if mibBuilder.loadTexts: networkRadiusVSAmappingVLANSVLAN.setDescription('VSA Mapping VLAN Table S-VLAN ID')
dhcpServerLeaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17713, 21, 1, 7, 6, 1), ).setIndexNames((0, "CAMBIUM-PMP80211-MIB", "dhcpLeaseIndex"))
if mibBuilder.loadTexts: dhcpServerLeaseEntry.setStatus('current')
if mibBuilder.loadTexts: dhcpServerLeaseEntry.setDescription('DHCP Assigned IP Address Entry\n\t\tDevice Allocation: STA')
dhcpLeaseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 7, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpLeaseIndex.setStatus('current')
if mibBuilder.loadTexts: dhcpLeaseIndex.setDescription('DHCP lease table index')
dhcpLeaseMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 7, 6, 1, 2), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(17, 17), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpLeaseMAC.setStatus('current')
if mibBuilder.loadTexts: dhcpLeaseMAC.setDescription('DHCP Assigned MAC Address')
dhcpLeaseIP = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 7, 6, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpLeaseIP.setStatus('current')
if mibBuilder.loadTexts: dhcpLeaseIP.setDescription('DHCP Assigned IP Address')
dhcpLeaseDevName = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 7, 6, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpLeaseDevName.setStatus('current')
if mibBuilder.loadTexts: dhcpLeaseDevName.setDescription('DHCP Assigned Device Name')
cambiumAPConnectedSTATable = MibTable((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 30), )
if mibBuilder.loadTexts: cambiumAPConnectedSTATable.setStatus('current')
if mibBuilder.loadTexts: cambiumAPConnectedSTATable.setDescription('This table contains information relevant to the Connected Subscriber Modules:\n\t\t\tSubscriber Module MAC Address,\n\t\t\tSubscriber Module AID,\n\t\t\tSubscriber Module Channel,\n\t\t\tUL RSSI per SM,\n\t\t\tDL RSSI per SM,\n\t\t\tUL SNR per SM,\n\t\t\tDL SNR per SM,\n\t\t\tUL MCS Mode per SM,\n\t\t\tDL MCS Mode per SM,\n\t\t\tSubscriber Module IP Address,\n\t\t\tSM Priority,\n\t\t\tMIR,\n\t\t\tMIR UL Rate,\n\t\t\tMIR DL Rate,\n\t\tDevice Allocation: AP')
cambiumAPConnectedSTAEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 30, 1), ).setIndexNames((0, "CAMBIUM-PMP80211-MIB", "cambiumAPNumberOfConnectedSTA"))
if mibBuilder.loadTexts: cambiumAPConnectedSTAEntry.setStatus('current')
if mibBuilder.loadTexts: cambiumAPConnectedSTAEntry.setDescription('Wireless parameters mapping for particular station.\n\t\tDevice Allocation: AP')
connectedSTAMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 30, 1, 1), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(11, 17), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedSTAMAC.setStatus('current')
if mibBuilder.loadTexts: connectedSTAMAC.setDescription('Connected SM WLAN MAC Address\n\t\tDevice Allocation: AP')
connectedSTAAID = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 30, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedSTAAID.setStatus('current')
if mibBuilder.loadTexts: connectedSTAAID.setDescription('Association ID\n\t\tDevice Allocation: AP')
connectedSTAChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 30, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedSTAChannel.setStatus('current')
if mibBuilder.loadTexts: connectedSTAChannel.setDescription('Connected SM Channel\n\t\tDevice Allocation: AP')
connectedSTAULRSSI = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 30, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedSTAULRSSI.setStatus('current')
if mibBuilder.loadTexts: connectedSTAULRSSI.setDescription('UL RSSI per SM\n\t\tDevice Allocation: AP')
connectedSTADLRSSI = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 30, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedSTADLRSSI.setStatus('current')
if mibBuilder.loadTexts: connectedSTADLRSSI.setDescription('DL RSSI per SM\n\t\tDevice Allocation: AP')
connectedSTAULSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 30, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedSTAULSNR.setStatus('current')
if mibBuilder.loadTexts: connectedSTAULSNR.setDescription('UL SNR per SM\n\t\tDevice Allocation: AP')
connectedSTADLSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 30, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedSTADLSNR.setStatus('current')
if mibBuilder.loadTexts: connectedSTADLSNR.setDescription('DL SNR per SM\n\t\tDevice Allocation: AP')
connectedSTAULMCS = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 30, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedSTAULMCS.setStatus('current')
if mibBuilder.loadTexts: connectedSTAULMCS.setDescription('UL MCS Mode per SM:\n\t\t\t1 for MCS1, \n\t\t\t2 for MCS2, \n\t\t\t3 for MCS3, \n\t\t\t4 for MCS4, \n\t\t\t5 for MCS5, \n\t\t\t6 for MCS6, \n\t\t\t7 for MCS7, \n\t\t\t9 for MCS9, \n\t\t\t10 for MCS10, \n\t\t\t11 for MCS11, \n\t\t\t12 for MCS12, \n\t\t\t13 for MCS13, \n\t\t\t14 for MCS14, \n\t\t\t15 for MCS15\n\t\tDevice Allocation: AP')
connectedSTADLMCS = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 30, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedSTADLMCS.setStatus('current')
if mibBuilder.loadTexts: connectedSTADLMCS.setDescription('DL MCS Mode per SM:\n\t\t\t1 for MCS1, \n\t\t\t2 for MCS2, \n\t\t\t3 for MCS3, \n\t\t\t4 for MCS4, \n\t\t\t5 for MCS5, \n\t\t\t6 for MCS6, \n\t\t\t7 for MCS7, \n\t\t\t9 for MCS9, \n\t\t\t10 for MCS10, \n\t\t\t11 for MCS11, \n\t\t\t12 for MCS12, \n\t\t\t13 for MCS13, \n\t\t\t14 for MCS14, \n\t\t\t15 for MCS15\n\t\tDevice Allocation: AP')
connectedSTAIP = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 30, 1, 10), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedSTAIP.setStatus('current')
if mibBuilder.loadTexts: connectedSTAIP.setDescription('Connected SM WLAN IP Address\n\t\tDevice Allocation: AP')
connectedSTAPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 30, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedSTAPriority.setStatus('current')
if mibBuilder.loadTexts: connectedSTAPriority.setDescription('Connected SM Priority\n\t\tDevice Allocation: AP')
connectedSTAMirSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 30, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedSTAMirSrc.setStatus('current')
if mibBuilder.loadTexts: connectedSTAMirSrc.setDescription('Connected SM MIR source: RADIUS server or profile ID\n\t\tDevice Allocation: AP')
connectedSTAMirULRate = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 30, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedSTAMirULRate.setStatus('current')
if mibBuilder.loadTexts: connectedSTAMirULRate.setDescription('Connected SM MIR UL Rate\n\t\tDevice Allocation: AP')
connectedSTAMirDLRate = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 30, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedSTAMirDLRate.setStatus('current')
if mibBuilder.loadTexts: connectedSTAMirDLRate.setDescription('Connected SM MIR DL Rate\n\t\tDevice Allocation: AP')
connectedSTAClickTHWAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 30, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedSTAClickTHWAddr.setStatus('current')
if mibBuilder.loadTexts: connectedSTAClickTHWAddr.setDescription('Connected SM BR or NAT HW addr \n\t\tDevice Allocation: AP')
connectedSTAClickTWebPort = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 30, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedSTAClickTWebPort.setStatus('current')
if mibBuilder.loadTexts: connectedSTAClickTWebPort.setDescription('Connected SM WEB port \n\t\tDevice Allocation: AP')
connectedSTAClickTWebSec = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 30, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedSTAClickTWebSec.setStatus('current')
if mibBuilder.loadTexts: connectedSTAClickTWebSec.setDescription('Connected SM WEB security (HTTPS) \n\t\tDevice Allocation: AP')
connectedSTAClickTHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 30, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedSTAClickTHostName.setStatus('current')
if mibBuilder.loadTexts: connectedSTAClickTHostName.setDescription('Connected SM Host Name \n\t\tDevice Allocation: AP')
connectedSTAMcastTotalGroups = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 30, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedSTAMcastTotalGroups.setStatus('current')
if mibBuilder.loadTexts: connectedSTAMcastTotalGroups.setDescription('Connected SM Total multicast groups\n\t\tsubscribed count\n\t\tDevice Allocation: AP')
connectedSTAMcastGRP0 = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 30, 1, 22), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedSTAMcastGRP0.setStatus('current')
if mibBuilder.loadTexts: connectedSTAMcastGRP0.setDescription('Connected SM subscribed multicast\n\t\tgroup 0\n\t\tDevice Allocation: AP')
connectedSTAMcastGRP1 = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 30, 1, 23), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedSTAMcastGRP1.setStatus('current')
if mibBuilder.loadTexts: connectedSTAMcastGRP1.setDescription('Connected SM subscribed multicast\n\t\tgroup 1\n\t\tDevice Allocation: AP')
connectedSTAMcastGRP2 = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 30, 1, 24), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedSTAMcastGRP2.setStatus('current')
if mibBuilder.loadTexts: connectedSTAMcastGRP2.setDescription('Connected SM subscribed multicast\n\t\tgroup 2\n\t\tDevice Allocation: AP')
connectedSTAMcastGRP3 = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 30, 1, 25), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedSTAMcastGRP3.setStatus('current')
if mibBuilder.loadTexts: connectedSTAMcastGRP3.setDescription('Connected SM subscribed multicast\n\t\tgroup 3\n\t\tDevice Allocation: AP')
connectedSTAMcastGRP4 = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 30, 1, 26), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedSTAMcastGRP4.setStatus('current')
if mibBuilder.loadTexts: connectedSTAMcastGRP4.setDescription('Connected SM subscribed multicast\n\t\tgroup 4\n\t\tDevice Allocation: AP')
connectedSTASessionTime = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 30, 1, 27), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedSTASessionTime.setStatus('current')
if mibBuilder.loadTexts: connectedSTASessionTime.setDescription('Connected SM time since allocation \n\t\tDevice Allocation: AP')
connectedSTADLRateMbps = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 30, 1, 28), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedSTADLRateMbps.setStatus('current')
if mibBuilder.loadTexts: connectedSTADLRateMbps.setDescription('Connected SM DL Rate in MBits/sec\n\t\tDevice Allocation: AP')
connectedSTADistance = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 30, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedSTADistance.setStatus('current')
if mibBuilder.loadTexts: connectedSTADistance.setDescription('STA distnce to AP\n\t\tDevice Allocation: AP')
cambiumAPBridgeTable = MibTable((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 40), )
if mibBuilder.loadTexts: cambiumAPBridgeTable.setStatus('current')
if mibBuilder.loadTexts: cambiumAPBridgeTable.setDescription('This table contains information relevant to the particular AP bridge\n\t\t interfaces list:\n\t\t\tBridge Name,\n\t\t\tDevice MAC Address,\n\t\t\tDevice Port,\n\t\t\tSM MAC Address,\n\t\t\tAging Time in seconds\n\t\tDevice Allocation: AP')
cambiumAPBridgeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 40, 1), ).setIndexNames((0, "CAMBIUM-PMP80211-MIB", "camAPBrTabDevMACAddress"))
if mibBuilder.loadTexts: cambiumAPBridgeEntry.setStatus('current')
if mibBuilder.loadTexts: cambiumAPBridgeEntry.setDescription('Interface list for particular bridge.\n\t\tDevice Allocation: AP')
camAPBrTabBridgeName = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 40, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: camAPBrTabBridgeName.setStatus('current')
if mibBuilder.loadTexts: camAPBrTabBridgeName.setDescription('Bridge Name\n\t\tDevice Allocation: AP')
camAPBrTabDevMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 40, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: camAPBrTabDevMACAddress.setStatus('current')
if mibBuilder.loadTexts: camAPBrTabDevMACAddress.setDescription('Device MAC Address\n\t\tDevice Allocation: AP')
camAPBrTabDevPort = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 40, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: camAPBrTabDevPort.setStatus('current')
if mibBuilder.loadTexts: camAPBrTabDevPort.setDescription('Device Port\n\t\tDevice Allocation: AP')
camAPBrTabSTAMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 40, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: camAPBrTabSTAMACAddress.setStatus('current')
if mibBuilder.loadTexts: camAPBrTabSTAMACAddress.setDescription('SM MAC Address\n\t\tDevice Allocation: AP')
camAPBrTabAgingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 40, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: camAPBrTabAgingTime.setStatus('current')
if mibBuilder.loadTexts: camAPBrTabAgingTime.setDescription('Aging time in seconds\n\t\tDevice Allocation: AP')
cambiumSTABridgeTable = MibTable((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 50), )
if mibBuilder.loadTexts: cambiumSTABridgeTable.setStatus('current')
if mibBuilder.loadTexts: cambiumSTABridgeTable.setDescription('This table contains information relevant to the particular SM bridge\n\t\t interfaces list:\n\t\t\tBridge Name,\n\t\t\tDevice MAC Address,\n\t\t\tDevice Port,\n\t\t\tAging Time in seconds\n\t\tDevice Allocation: SM')
cambiumSTABridgeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 50, 1), ).setIndexNames((0, "CAMBIUM-PMP80211-MIB", "camSTABrTabDevMACAddress"))
if mibBuilder.loadTexts: cambiumSTABridgeEntry.setStatus('current')
if mibBuilder.loadTexts: cambiumSTABridgeEntry.setDescription('Interface list for particular bridge.\n\t\tDevice Allocation: SM')
camSTABrTabBridgeName = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 50, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: camSTABrTabBridgeName.setStatus('current')
if mibBuilder.loadTexts: camSTABrTabBridgeName.setDescription('Bridge Name\n\t\tDevice Allocation: SM')
camSTABrTabDevMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 50, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: camSTABrTabDevMACAddress.setStatus('current')
if mibBuilder.loadTexts: camSTABrTabDevMACAddress.setDescription('Device MAC Address\n\t\tDevice Allocation: SM')
camSTABrTabDevPort = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 50, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: camSTABrTabDevPort.setStatus('current')
if mibBuilder.loadTexts: camSTABrTabDevPort.setDescription('Device Port\n\t\tDevice Allocation: SM')
camSTABrTabAgingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 50, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: camSTABrTabAgingTime.setStatus('current')
if mibBuilder.loadTexts: camSTABrTabAgingTime.setDescription('Aging time in seconds\n\t\tDevice Allocation: SM')
cambiumSTAMAC = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 60), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(17, 17)).setFixedLength(17)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumSTAMAC.setStatus('current')
if mibBuilder.loadTexts: cambiumSTAMAC.setDescription("String with dropped SM's MAC address\n\t\t\t Device Allocation: AP")
cambiumSTADropReason = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 61), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumSTADropReason.setStatus('current')
if mibBuilder.loadTexts: cambiumSTADropReason.setDescription("String with SM's drop reason\n\t\t\t Device Allocation: AP")
cambiumNetworkEntryFailureSTAMAC = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 62), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(17, 17)).setFixedLength(17)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumNetworkEntryFailureSTAMAC.setStatus('current')
if mibBuilder.loadTexts: cambiumNetworkEntryFailureSTAMAC.setDescription("String with rejected SM's MAC \n\t\t\t Device Allocation: AP ")
cambiumNetworkEntryFailureReason = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 63), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumNetworkEntryFailureReason.setStatus('current')
if mibBuilder.loadTexts: cambiumNetworkEntryFailureReason.setDescription("String with SM's reject reason\n\t\t\t Device Allocation: AP ")
connectedSTATXCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 30, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedSTATXCapacity.setStatus('current')
if mibBuilder.loadTexts: connectedSTATXCapacity.setDescription('TX Capacity per SM\n\t\tDevice Allocation: AP')
connectedSTATXQuality = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 30, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedSTATXQuality.setStatus('current')
if mibBuilder.loadTexts: connectedSTATXQuality.setDescription('TX Quality per SM\n\t\tDevice Allocation: AP')
cambiumGPSCurrentSyncState = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumGPSCurrentSyncState.setStatus('current')
if mibBuilder.loadTexts: cambiumGPSCurrentSyncState.setDescription('GPS Current SYNC State:\n\t\t\t0 - The Initialization State\n\t\t\t1 - The No Synchronization State\n\t\t\t2 - The Synchronization State\n\t\t\t3 - The Hold Off State\n\t\t\t4 - The Regaining Sync State\n\t\t\t5 - The Free Run State\n\t\tDevice Allocation: AP')
cambiumGPSLatitude = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumGPSLatitude.setStatus('current')
if mibBuilder.loadTexts: cambiumGPSLatitude.setDescription('Current location information from GPS Device. GPS cordinates (latitude).\n\t\tDevice Allocation: AP, SM')
cambiumGPSLongitude = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 3, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumGPSLongitude.setStatus('current')
if mibBuilder.loadTexts: cambiumGPSLongitude.setDescription('Current location information from GPS Device. GPS cordinates (longitude).\n\t\tDevice Allocation: AP, SM')
cambiumGPSHeight = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 3, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumGPSHeight.setStatus('current')
if mibBuilder.loadTexts: cambiumGPSHeight.setDescription('Current location information from GPS Device. GPS coordinates (Height).\n\t\tDevice Allocation: AP, SM')
cambiumGPSTime = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 3, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumGPSTime.setStatus('current')
if mibBuilder.loadTexts: cambiumGPSTime.setDescription('Current Time/Date information from GPS Device. GPS (Time).\n\t\tDevice Allocation: AP, SM')
cambiumGPSNumTrackedSat = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 3, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumGPSNumTrackedSat.setStatus('current')
if mibBuilder.loadTexts: cambiumGPSNumTrackedSat.setDescription('Current Satellite information from GPS Device. GPS (Number of Satellites Tracked).\n\t\tDevice Allocation: AP, SM')
cambiumGPSNumVisibleSat = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 3, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumGPSNumVisibleSat.setStatus('current')
if mibBuilder.loadTexts: cambiumGPSNumVisibleSat.setDescription('Current Satellite information from GPS Device. GPS (Number of Satellites Visible).\n\t\tDevice Allocation: AP, SM')
cambiumGPSSatSNRTable = MibTable((1, 3, 6, 1, 4, 1, 17713, 21, 1, 3, 8), )
if mibBuilder.loadTexts: cambiumGPSSatSNRTable.setStatus('current')
if mibBuilder.loadTexts: cambiumGPSSatSNRTable.setDescription('Table of Current Satellite information from GPS Device. GPS (SNR of Satellites).\n\t\tDevice Allocation: AP, SM')
cambiumGPSSatSNREntry = MibTableRow((1, 3, 6, 1, 4, 1, 17713, 21, 1, 3, 8, 1), ).setIndexNames((0, "CAMBIUM-PMP80211-MIB", "gpsSatelliteId"))
if mibBuilder.loadTexts: cambiumGPSSatSNREntry.setStatus('current')
if mibBuilder.loadTexts: cambiumGPSSatSNREntry.setDescription('Satellite SNR values for Visible and Tracked Satellites \n\t\tDevice Allocation: AP')
gpsSatelliteId = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 3, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gpsSatelliteId.setStatus('current')
if mibBuilder.loadTexts: gpsSatelliteId.setDescription('Satellite ID for which SNR is displayed')
gpsSnrValue = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 3, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gpsSnrValue.setStatus('current')
if mibBuilder.loadTexts: gpsSnrValue.setDescription('SNR value for a satellite')
gpsSatelliteStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 3, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), )).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gpsSatelliteStatus.setStatus('current')
if mibBuilder.loadTexts: gpsSatelliteStatus.setDescription('Satellite Status whether they are visible or tracked\n\t\t\t 1 - Visible\n\t\t\t 2 - Tracked')
cambiumGPSDeviceInfo = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 3, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumGPSDeviceInfo.setStatus('current')
if mibBuilder.loadTexts: cambiumGPSDeviceInfo.setDescription('GPS Device Information\n\t\tDevice Allocation: AP, SM')
cambiumGPSFirmwareUpdateStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 3, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumGPSFirmwareUpdateStatus.setStatus('current')
if mibBuilder.loadTexts: cambiumGPSFirmwareUpdateStatus.setDescription('Software Update Status OID\n\t\t\t0 - No GPS FW Update is progress or No FW update is required,\n\t\t\t1 - GPS FW Update is in progress, Uploading SW package to device,\n\t\t\t2 - GPS FW Update is in progress, Verifying SHA2 signature,\n\t\t\t3 - GPS FW Update is in progress, Executing pre-update script,\n\t\t\t4 - GPS FW Update is in progress, Uploading Firmware to GPS device,\n\t\t\t5 - GPS FW Update is in progress, Uploading Firmware to GPS device,\n\t\t\t6 - GPS FW Update is in progress, Executing post-update script,\n\t\t\t7 - GPS FW Update is finished, waiting for reboot,\n\t\t\t8 - GPS FW Update is Required, Please upgrade to latest GPS FW,\n\t\tWhen GPS FW Update is successfully, return value is 7,\n\t\tGUI or NMS indicate that GPS FW update was successful,\n\t\tDevice can be rebooted.\n\t\tDevice Allocation: AP, SM')
cambiumLANStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumLANStatus.setStatus('current')
if mibBuilder.loadTexts: cambiumLANStatus.setDescription('Use the RFC-1213 ifTable to view the physical port status. \n\t\tThis attribute indicates the Linux driver status of the port.\n\t\tLAN Status:\n\t\t\t0 - Down,\n\t\t\t1 - Up,\n\t\t\t2 - Disabled\n\t\tDevice Allocation: AP, SM')
cambiumWLANStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumWLANStatus.setStatus('current')
if mibBuilder.loadTexts: cambiumWLANStatus.setDescription('WLAN Status:\n\t\t\t0 - Down, \n\t\t\t1 - Up\n\t\tDevice Allocation: AP, SM')
cambiumEffectiveDeviceIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 4, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumEffectiveDeviceIPAddress.setStatus('current')
if mibBuilder.loadTexts: cambiumEffectiveDeviceIPAddress.setDescription('Current Device IP address\n\t\tDevice Allocation: AP, SM')
cambiumEffectiveSTANetworkMode = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ValueRangeConstraint(3, 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumEffectiveSTANetworkMode.setStatus('current')
if mibBuilder.loadTexts: cambiumEffectiveSTANetworkMode.setDescription('Effective SM Network Mode:\n\t\t\t1 - NAT,\n\t\t\t2 - Bridge,\n\t\t\t3 - Router\n\t\tDevice Allocation: SM')
cambiumEffectiveDeviceLANNetMask = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 4, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumEffectiveDeviceLANNetMask.setStatus('current')
if mibBuilder.loadTexts: cambiumEffectiveDeviceLANNetMask.setDescription('Current Device Network Mask\n\t\tDevice Allocation: AP, SM')
cambiumEffectiveDeviceDefaultGateWay = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 4, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumEffectiveDeviceDefaultGateWay.setStatus('current')
if mibBuilder.loadTexts: cambiumEffectiveDeviceDefaultGateWay.setDescription('Effective Device Default Gateway IP Address,\n\t\tNOTE: This parameters lists only the first gateway IP\n\t\tDevice Allocation: AP, SM')
cambiumEffectiveDeviceDNSIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 4, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumEffectiveDeviceDNSIPAddress.setStatus('current')
if mibBuilder.loadTexts: cambiumEffectiveDeviceDNSIPAddress.setDescription('Current Device DNS IP Address,\n\t\tNOTE: This parameter displays only the first DNS IP\n\t\tDevice Allocation: AP, SM')
cambiumEffectiveWANIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 4, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumEffectiveWANIPAddress.setStatus('current')
if mibBuilder.loadTexts: cambiumEffectiveWANIPAddress.setDescription('Current Device WLAN IP address\n\t\tDevice Allocation: SM')
cambiumEffectiveDeviceWANNetMask = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 4, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumEffectiveDeviceWANNetMask.setStatus('current')
if mibBuilder.loadTexts: cambiumEffectiveDeviceWANNetMask.setDescription('Current Device Network Mask\n\t\tDevice Allocation: SM')
cambiumEffectiveDeviceWANPPPoEStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 4, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumEffectiveDeviceWANPPPoEStatus.setStatus('current')
if mibBuilder.loadTexts: cambiumEffectiveDeviceWANPPPoEStatus.setDescription('WAN PPPoE Status:\n\t\t\t0 - Disabled\n\t\t\t1 - Enabled-Connected\n\t\t\t2 - Enabled-Connecting\n\t\t\t3 - Enabled-Disconnected\n\t\tDevice Allocation: SM')
cambiumLANModeStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 4, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumLANModeStatus.setStatus('current')
if mibBuilder.loadTexts: cambiumLANModeStatus.setDescription('LAN Mode Status\n\t\t\t-1 - No data,\n\t\t\t 0 - Half,\n\t\t\t 1 - Full\n\t\tDevice Allocation: AP, SM')
cambiumLANSpeedStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 4, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(10, 10), ValueRangeConstraint(100, 100), ValueRangeConstraint(1000, 1000), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumLANSpeedStatus.setStatus('current')
if mibBuilder.loadTexts: cambiumLANSpeedStatus.setDescription('LAN Speed Status\n\t\t\t-1 - No data,\n\t\t\t 10 - 10 Mb/s,\n\t\t\t 100 - 100 Mb/s,\n\t\t\t 1000 - 1000 Mb/s\n\t\tDevice Allocation: AP, SM')
cambiumDHCPOption82Status = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 4, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumDHCPOption82Status.setStatus('current')
if mibBuilder.loadTexts: cambiumDHCPOption82Status.setDescription('DHCP Option82 Status:\n\t\t\t0 - Disabled\n\t\t\t1 - Enabled\n\t\tDevice Allocation: AP')
cambiumLAN2ModeStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 4, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumLAN2ModeStatus.setStatus('current')
if mibBuilder.loadTexts: cambiumLAN2ModeStatus.setDescription('2nd LAN Mode Status\n\t\t\t-1 - No data,\n\t\t\t 0 - Half,\n\t\t\t 1 - Full\n\t\tDevice Allocation: AP, SM')
cambiumLAN2SpeedStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 4, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(10, 10), ValueRangeConstraint(100, 100), ValueRangeConstraint(1000, 1000), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumLAN2SpeedStatus.setStatus('current')
if mibBuilder.loadTexts: cambiumLAN2SpeedStatus.setDescription('2nd LAN Speed Status\n\t\t\t-1 - No data,\n\t\t\t 10 - 10 Mb/s,\n\t\t\t 100 - 100 Mb/s,\n\t\t\t 1000 - 1000 Mb/s\n\t\tDevice Allocation: AP, SM')
cambiumLAN2Status = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 4, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumLAN2Status.setStatus('current')
if mibBuilder.loadTexts: cambiumLAN2Status.setDescription('Use the RFC-1213 ifTable to view the physical port status.\n\t\tThis attribute indicates the Linux driver status of the port.\n\t\t2nd LAN Status:\n\t\t\t0 - Down,\n\t\t\t1 - Up,\n\t\t\t2 - Disabled\n\t\tDevice Allocation: AP, SM')
cambiumARPTable = MibTable((1, 3, 6, 1, 4, 1, 17713, 21, 1, 4, 20), )
if mibBuilder.loadTexts: cambiumARPTable.setStatus('current')
if mibBuilder.loadTexts: cambiumARPTable.setDescription('Neibour devices IP/MAC pair\n\t\t Table')
cambiumManagementIFStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 4, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumManagementIFStatus.setStatus('current')
if mibBuilder.loadTexts: cambiumManagementIFStatus.setDescription('Separate Management Interface Status:\n\t\t\t0 - Down, \n\t\t\t1 - Up \n\t\tDevice Allocation: SM')
cambiumManagementIFIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 4, 26), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumManagementIFIPAddress.setStatus('current')
if mibBuilder.loadTexts: cambiumManagementIFIPAddress.setDescription('Current Device Separate Management IP address\n\t\tDevice Allocation: SM')
cambiumManagementIFNetMask = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 4, 27), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumManagementIFNetMask.setStatus('current')
if mibBuilder.loadTexts: cambiumManagementIFNetMask.setDescription('Current Device Separate Management Network Mask\n\t\tDevice Allocation: SM')
cambiumManagementIFGateway = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 4, 28), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumManagementIFGateway.setStatus('current')
if mibBuilder.loadTexts: cambiumManagementIFGateway.setDescription('Current Device Separate Management Gateway\n\t\tDevice Allocation: SM')
cambiumEffectiveNetworkLanMTU = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 4, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(576, 1700), )).clone(1500)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumEffectiveNetworkLanMTU.setStatus('current')
if mibBuilder.loadTexts: cambiumEffectiveNetworkLanMTU.setDescription('SM NAT LAN MTU size\n\t\t\tDevice Allocation: SM')
cambiumEffectiveNetworkBridgeMTU = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 4, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(576, 1700), )).clone(1500)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumEffectiveNetworkBridgeMTU.setStatus('current')
if mibBuilder.loadTexts: cambiumEffectiveNetworkBridgeMTU.setDescription('Device Bridge MTU size\n\t\t\tDevice Allocation: AP, SM')
cambiumStaticRoutesTable = MibTable((1, 3, 6, 1, 4, 1, 17713, 21, 1, 4, 31), )
if mibBuilder.loadTexts: cambiumStaticRoutesTable.setStatus('current')
if mibBuilder.loadTexts: cambiumStaticRoutesTable.setDescription('Static Routes Table')
cambiumIPAliasTable = MibTable((1, 3, 6, 1, 4, 1, 17713, 21, 1, 4, 32), )
if mibBuilder.loadTexts: cambiumIPAliasTable.setStatus('current')
if mibBuilder.loadTexts: cambiumIPAliasTable.setDescription('IP aliases list table.\n\t\tDevice Allocation: AP, SM')
cambiumCnsServConsStat = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 4, 33), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumCnsServConsStat.setStatus('current')
if mibBuilder.loadTexts: cambiumCnsServConsStat.setDescription('cnMaestro Connection Status:\n\t\t\tCambium provides cloud management of Cambium devices, called cnMaestro.\n\t\t\tThis describes the state of the connection to the cnMaestro')
cambiumCnsServAccountID = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 4, 34), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumCnsServAccountID.setStatus('current')
if mibBuilder.loadTexts: cambiumCnsServAccountID.setDescription('cnMaestro Account ID:\n\t\t\tDisplays cnMaestro Account ID, \n\t\t\tThis is the account ID for the customer.\n\t\t\tIt is returned from the cloud management system.')
cambiumAPCnsMGMTState = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 4, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumAPCnsMGMTState.setStatus('current')
if mibBuilder.loadTexts: cambiumAPCnsMGMTState.setDescription('AP Device management State')
cambiumIPAliasEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17713, 21, 1, 4, 32, 1), ).setIndexNames((0, "CAMBIUM-PMP80211-MIB", "cambiumIPAliasTableIndex"))
if mibBuilder.loadTexts: cambiumIPAliasEntry.setStatus('current')
if mibBuilder.loadTexts: cambiumIPAliasEntry.setDescription('IP aliases list table entry.\n\t\tDevice Allocation: AP, SM.')
cambiumIPAliasTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 4, 32, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumIPAliasTableIndex.setStatus('current')
if mibBuilder.loadTexts: cambiumIPAliasTableIndex.setDescription('IP aliases table index.')
cambiumIPAliasIP = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 4, 32, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumIPAliasIP.setStatus('current')
if mibBuilder.loadTexts: cambiumIPAliasIP.setDescription('IP alias IP address.')
cambiumIPAliasNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 4, 32, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumIPAliasNetmask.setStatus('current')
if mibBuilder.loadTexts: cambiumIPAliasNetmask.setDescription('IP alias netmask.')
cambiumARPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17713, 21, 1, 4, 20, 1), ).setIndexNames((0, "CAMBIUM-PMP80211-MIB", "cambiumARPIndex"))
if mibBuilder.loadTexts: cambiumARPEntry.setStatus('current')
if mibBuilder.loadTexts: cambiumARPEntry.setDescription('Neighbour device IP/MAC pair entry')
cambiumARPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 4, 20, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumARPIndex.setStatus('current')
if mibBuilder.loadTexts: cambiumARPIndex.setDescription('Index')
cambiumARPMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 4, 20, 1, 2), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(17, 17), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumARPMAC.setStatus('current')
if mibBuilder.loadTexts: cambiumARPMAC.setDescription('Neighbour device MAC Address')
cambiumARPIP = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 4, 20, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumARPIP.setStatus('current')
if mibBuilder.loadTexts: cambiumARPIP.setDescription('Neighbour device IP Address')
cambiumARPInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 4, 20, 1, 4), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(16, 16), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumARPInterface.setStatus('current')
if mibBuilder.loadTexts: cambiumARPInterface.setDescription('Neighbour device Interface')
cambiumStaticRoutesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17713, 21, 1, 4, 31, 1), ).setIndexNames((0, "CAMBIUM-PMP80211-MIB", "cambiumStaticRoutesIndex"))
if mibBuilder.loadTexts: cambiumStaticRoutesEntry.setStatus('current')
if mibBuilder.loadTexts: cambiumStaticRoutesEntry.setDescription('Static Routes Dest/Getway pair entry')
cambiumStaticRoutesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 4, 31, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumStaticRoutesIndex.setStatus('current')
if mibBuilder.loadTexts: cambiumStaticRoutesIndex.setDescription('Index')
cambiumStaticRoutesDestIP = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 4, 31, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumStaticRoutesDestIP.setStatus('current')
if mibBuilder.loadTexts: cambiumStaticRoutesDestIP.setDescription('Destination IP')
cambiumStaticRoutesGW = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 4, 31, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumStaticRoutesGW.setStatus('current')
if mibBuilder.loadTexts: cambiumStaticRoutesGW.setDescription('Getway IP')
cambiumStaticRoutesNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 4, 31, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumStaticRoutesNetmask.setStatus('current')
if mibBuilder.loadTexts: cambiumStaticRoutesNetmask.setDescription('Dest IP Netmask')
cambiumStaticRoutesInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 4, 31, 1, 5), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(16, 16), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumStaticRoutesInterface.setStatus('current')
if mibBuilder.loadTexts: cambiumStaticRoutesInterface.setDescription('Static Routes Interface Name')
cambiumStatsForceUpdate = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumStatsForceUpdate.setStatus('current')
if mibBuilder.loadTexts: cambiumStatsForceUpdate.setDescription('Cambium Statistics Update/Reset Action\n\t\tStatistic is updated automatically in the background each 15sec\n\t\tSNMP-GET on This OID forces update of subsequent Statistics tree\n\t\tSNMP-SET on This OID Resets all of the subsequent Statistic\n\t\tDevice Allocation: AP, SM')
cambiumEthRXBytes = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumEthRXBytes.setStatus('current')
if mibBuilder.loadTexts: cambiumEthRXBytes.setDescription('Total Ethernet RX bytes\n\t\tDevice Allocation: AP, SM')
cambiumEthRXPackets = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumEthRXPackets.setStatus('current')
if mibBuilder.loadTexts: cambiumEthRXPackets.setDescription('Total Ethernet RX packets\n\t\tDevice Allocation: AP, SM')
cambiumEthRXErrors = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumEthRXErrors.setStatus('current')
if mibBuilder.loadTexts: cambiumEthRXErrors.setDescription('Total Ethernet RX errors\n\t\tDevice Allocation: AP, SM')
cambiumEthRXDrops = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumEthRXDrops.setStatus('current')
if mibBuilder.loadTexts: cambiumEthRXDrops.setDescription('Total Ethernet RX drops\n\t\tDevice Allocation: AP, SM')
cambiumEthRXMulticast = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumEthRXMulticast.setStatus('current')
if mibBuilder.loadTexts: cambiumEthRXMulticast.setDescription('Total Ethernet RX multicast\n\t\tDevice Allocation: AP, SM')
cambiumEthRXBroadcast = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumEthRXBroadcast.setStatus('current')
if mibBuilder.loadTexts: cambiumEthRXBroadcast.setDescription('Total Ethernet RX broadcast\n\t\tDevice Allocation: AP, SM')
cambiumEthTXBytes = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumEthTXBytes.setStatus('current')
if mibBuilder.loadTexts: cambiumEthTXBytes.setDescription('Total Ethernet TX bytes\n\t\tDevice Allocation: AP, SM')
cambiumEthTXPackets = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumEthTXPackets.setStatus('current')
if mibBuilder.loadTexts: cambiumEthTXPackets.setDescription('Total Ethernet TX packets\n\t\tDevice Allocation: AP, SM')
cambiumEthTXErrors = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumEthTXErrors.setStatus('current')
if mibBuilder.loadTexts: cambiumEthTXErrors.setDescription('Total Ethernet TX errors\n\t\tDevice Allocation: AP, SM')
cambiumEthTXDrops = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumEthTXDrops.setStatus('current')
if mibBuilder.loadTexts: cambiumEthTXDrops.setDescription('Total Ethernet TX drops\n\t\tDevice Allocation: AP, SM')
cambiumEthTXMulticast = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumEthTXMulticast.setStatus('current')
if mibBuilder.loadTexts: cambiumEthTXMulticast.setDescription('Total Ethernet TX multicast\n\t\tDevice Allocation: AP, SM')
cambiumEthTXBroadcast = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumEthTXBroadcast.setStatus('current')
if mibBuilder.loadTexts: cambiumEthTXBroadcast.setDescription('Total Ethernet TX broadcast\n\t\tDevice Allocation: AP, SM')
cambiumAthRXBytes = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumAthRXBytes.setStatus('obsolete')
if mibBuilder.loadTexts: cambiumAthRXBytes.setDescription('Total Wireless RX bytes\n\t\tDevice Allocation: AP, SM')
cambiumAthRXPackets = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumAthRXPackets.setStatus('obsolete')
if mibBuilder.loadTexts: cambiumAthRXPackets.setDescription('Total Wireless RX packets\n\t\tDevice Allocation: AP, SM')
cambiumAthRXErrors = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumAthRXErrors.setStatus('obsolete')
if mibBuilder.loadTexts: cambiumAthRXErrors.setDescription('Total Wireless RX errors\n\t\tDevice Allocation: AP, SM')
cambiumAthRXDrops = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumAthRXDrops.setStatus('obsolete')
if mibBuilder.loadTexts: cambiumAthRXDrops.setDescription('Total Wireless RX drops\n\t\tDevice Allocation: AP, SM')
cambiumAthRXMulticast = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumAthRXMulticast.setStatus('obsolete')
if mibBuilder.loadTexts: cambiumAthRXMulticast.setDescription('Total Wireless RX multicast\n\t\tDevice Allocation: AP, SM')
cambiumAthRXBroadcast = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumAthRXBroadcast.setStatus('obsolete')
if mibBuilder.loadTexts: cambiumAthRXBroadcast.setDescription('Total Wireless RX broadcast\n\t\tDevice Allocation: AP, SM')
cambiumAthTXBytes = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumAthTXBytes.setStatus('obsolete')
if mibBuilder.loadTexts: cambiumAthTXBytes.setDescription('Total Wireless TX bytes\n\t\tDevice Allocation: AP, SM')
cambiumAthTXPackets = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumAthTXPackets.setStatus('obsolete')
if mibBuilder.loadTexts: cambiumAthTXPackets.setDescription('Total Wireless TX packets\n\t\tDevice Allocation: AP, SM')
cambiumAthTXErrors = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumAthTXErrors.setStatus('obsolete')
if mibBuilder.loadTexts: cambiumAthTXErrors.setDescription('Total Wireless TX errors\n\t\tDevice Allocation: AP, SM')
cambiumAthTXDrops = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumAthTXDrops.setStatus('obsolete')
if mibBuilder.loadTexts: cambiumAthTXDrops.setDescription('Total Wireless TX drops\n\t\tDevice Allocation: AP, SM')
cambiumAthTXMulticast = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumAthTXMulticast.setStatus('obsolete')
if mibBuilder.loadTexts: cambiumAthTXMulticast.setDescription('Total Wireless TX multicast\n\t\tDevice Allocation: AP, SM')
cambiumAthTXBroadcast = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumAthTXBroadcast.setStatus('obsolete')
if mibBuilder.loadTexts: cambiumAthTXBroadcast.setDescription('Total Wireless TX broadcast\n\t\tDevice Allocation: AP, SM')
sysNetworkEntryAttempt = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysNetworkEntryAttempt.setStatus('current')
if mibBuilder.loadTexts: sysNetworkEntryAttempt.setDescription('Number of attempt to enter the AP network\n\t\t\t\tDevice Allocation: AP')
sysNetworkEntrySuccess = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysNetworkEntrySuccess.setStatus('current')
if mibBuilder.loadTexts: sysNetworkEntrySuccess.setDescription('Number of successful network entry into the AP\n\t\t\t\tDevice Allocation: AP')
sysNetworkEntryAuthenticationFailure = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysNetworkEntryAuthenticationFailure.setStatus('current')
if mibBuilder.loadTexts: sysNetworkEntryAuthenticationFailure.setDescription('Number of failed network entry into the AP due to\n\t\t\t\tauthentication failure\n\t\t\t\tDevice Allocation: AP')
sysDFSDetectedCount = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDFSDetectedCount.setStatus('current')
if mibBuilder.loadTexts: sysDFSDetectedCount.setDescription('Number of DFS detected during channel initialization or during\n\t\t\t\tservice which causes channel remap\n\t\t\t\tDevice Allocation: AP, SM')
ulWLanKbitCount = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ulWLanKbitCount.setStatus('current')
if mibBuilder.loadTexts: ulWLanKbitCount.setDescription('Aggregated total Uplink data traffic in kilobits\n\t\t\t\tDevice Allocation: AP, SM')
dlWLanKbitCount = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlWLanKbitCount.setStatus('current')
if mibBuilder.loadTexts: dlWLanKbitCount.setDescription('Aggregated total Downlink data traffic in kilobits\n\t\t\t\tDevice Allocation: AP, SM')
ulWLanTotalPacketCount = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ulWLanTotalPacketCount.setStatus('current')
if mibBuilder.loadTexts: ulWLanTotalPacketCount.setDescription('Aggregated number of total Uplink data packet transmitted by\n\t\t\t\tSM or received by AP\n\t\t\t\tDevice Allocation: AP, SM')
sysRebootCount = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysRebootCount.setStatus('obsolete')
if mibBuilder.loadTexts: sysRebootCount.setDescription('Device Reboot Counter\n\t\t\t\tDevice Allocation: AP, SM')
dlWLanTotalPacketCount = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 42), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlWLanTotalPacketCount.setStatus('current')
if mibBuilder.loadTexts: dlWLanTotalPacketCount.setDescription('Aggregated number of total Downlink data packet transmitted by\n\t\t\t\tAP or received by SM\n\t\t\t\tDevice Allocation: AP, SM')
ulWLanMultiBroadcastKbitCount = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ulWLanMultiBroadcastKbitCount.setStatus('current')
if mibBuilder.loadTexts: ulWLanMultiBroadcastKbitCount.setDescription('Aggregated total Uplink multicast and broadcast data traffic in\n\t\t\t\tkilobits\n\t\t\t\tDevice Allocation: AP, SM')
dlWLanMultiBroadcastKbitCount = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 44), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlWLanMultiBroadcastKbitCount.setStatus('current')
if mibBuilder.loadTexts: dlWLanMultiBroadcastKbitCount.setDescription('Aggregated total Downlink multicast and broadcast data traffic\n\t\t\t\tin kilobits\n\t\t\t\tDevice Allocation: AP, SM')
wLanSessionDroppedCount = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wLanSessionDroppedCount.setStatus('current')
if mibBuilder.loadTexts: wLanSessionDroppedCount.setDescription('Aggregated number of SM session dropped due to no responses of\n\t\t\t\tbandwidth request response\n\t\t\t\tDevice Allocation: AP, SM')
cambiumTDDStatsPerSTATable = MibTable((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 46), )
if mibBuilder.loadTexts: cambiumTDDStatsPerSTATable.setStatus('current')
if mibBuilder.loadTexts: cambiumTDDStatsPerSTATable.setDescription('This table contains information relevant to customer TDD Statistics\n\t\t   for connected SMs:\n\t\t   - station MAC Address,\n\t\t   - uplink data traffic in Kbits for a single SM;\n\t\t   - downlink data traffic in Kbits for a single SM;\n\t\t   - number of uplink total data packet received at AP for a single SM;\n\t\t   - number of downlink total data packet transmitted at AP for a single\n\t\t\t SM;\n\t\t   - number of uplink data packet dropped due to data integrity error or\n\t\t\t other RF related packer errors for a single SM;\n\t\t   - number of downlink data packet dropped due to no-acknowledgement or\n\t\t\t other RF related packet error for a single SM;\n\t\t   - number of downlink data packet dropped due to data buffer/queue\n\t\t\t overflow or other system internal buffer/sending related packet\n\t\t\t error for a single SM;\n\t\t   - number of downlink data packet retransmitted due to no-acknowledge\n\t\t\t for a single SM.\n\t\t   Device Allocation: AP')
cambiumTDDStatsPerSTAEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 46, 1), ).setIndexNames((0, "CAMBIUM-PMP80211-MIB", "cambiumTDDStatsPerSTAIndex"))
if mibBuilder.loadTexts: cambiumTDDStatsPerSTAEntry.setStatus('current')
if mibBuilder.loadTexts: cambiumTDDStatsPerSTAEntry.setDescription('Customer TDD Statistics for particular SM\n\t\t   Device Allocation: AP')
cambiumTDDStatsPerSTAIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 46, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumTDDStatsPerSTAIndex.setStatus('current')
if mibBuilder.loadTexts: cambiumTDDStatsPerSTAIndex.setDescription('Table index')
cambiumTDDStatsListMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 46, 1, 2), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(11, 17), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumTDDStatsListMAC.setStatus('current')
if mibBuilder.loadTexts: cambiumTDDStatsListMAC.setDescription('Connected SM WLAN MAC Address\n\t\t   Device Allocation: AP')
ulWLanPerUserKbitCount = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 46, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ulWLanPerUserKbitCount.setStatus('current')
if mibBuilder.loadTexts: ulWLanPerUserKbitCount.setDescription('Uplink data traffic in Kbits for a single SM\n\t\t   Device Allocation: AP')
dlWLanPerUserKbitCount = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 46, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlWLanPerUserKbitCount.setStatus('current')
if mibBuilder.loadTexts: dlWLanPerUserKbitCount.setDescription('Downlink data traffic in Kbits for a single SM\n\t\t   Device Allocation: AP')
ulWLanPerUserTotalPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 46, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ulWLanPerUserTotalPacketCount.setStatus('current')
if mibBuilder.loadTexts: ulWLanPerUserTotalPacketCount.setDescription('Number of uplink total data packet received at AP for a single SM\n\t\t   Device Allocation: AP')
dlWLanPerUserTotalPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 46, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlWLanPerUserTotalPacketCount.setStatus('current')
if mibBuilder.loadTexts: dlWLanPerUserTotalPacketCount.setDescription('Number of downlink total data packet transmitted at AP for a single\n\t\t  SM \n\t\t   Device Allocation: AP')
ulWLanPerUserErrorDroppedPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 46, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ulWLanPerUserErrorDroppedPacketCount.setStatus('current')
if mibBuilder.loadTexts: ulWLanPerUserErrorDroppedPacketCount.setDescription('Number of uplink data packet dropped due to data integrity error or\n\t\t   other RF related packer errors for a single SM\n\t\t   Device Allocation: AP')
dlWLanPerUserErrorDroppedPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 46, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlWLanPerUserErrorDroppedPacketCount.setStatus('current')
if mibBuilder.loadTexts: dlWLanPerUserErrorDroppedPacketCount.setDescription('Number of downlink data packet dropped due to no-acknowledgement or\n\t\t   other RF related packet error for a single SM\n\t\t   Device Allocation: AP')
dlWLanPerUserCapacityDroppedPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 46, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlWLanPerUserCapacityDroppedPacketCount.setStatus('current')
if mibBuilder.loadTexts: dlWLanPerUserCapacityDroppedPacketCount.setDescription('Number of downlink data packet dropped due to data buffer/queue\n\t\t   overflow or other system internal buffer/sending related packet error\n\t\t   for a single SM\n\t\t   Device Allocation: AP')
dlWLanPerUserRetransmitPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 46, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlWLanPerUserRetransmitPacketCount.setStatus('current')
if mibBuilder.loadTexts: dlWLanPerUserRetransmitPacketCount.setDescription('Number of downlink data packet retransmitted due to no-acknowledge\n\t\t   for a single SM\n\t\t   Device Allocation: AP')
dlWLanPerUserTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 46, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlWLanPerUserTxPower.setStatus('current')
if mibBuilder.loadTexts: dlWLanPerUserTxPower.setDescription('Downlink TxPower of data packages for a single SM\n\t\t   Device Allocation: AP')
ulWLanErrorDroppedPacketCount = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 47), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ulWLanErrorDroppedPacketCount.setStatus('current')
if mibBuilder.loadTexts: ulWLanErrorDroppedPacketCount.setDescription('Aggregated number of total Uplink data packet dropped due to\n\t\t\t\tdata integrity error or other data packet association or RF\n\t\t\t\terror in packet\n\t\t\t\tDevice Allocation: AP, SM')
dlWLanErrorDroppedPacketCount = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 48), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlWLanErrorDroppedPacketCount.setStatus('current')
if mibBuilder.loadTexts: dlWLanErrorDroppedPacketCount.setDescription('Aggregated number of total Downlink data packet dropped due to\n\t\t\t\tdata integrity error or other data packet association error in\n\t\t\t\tpacket\n\t\t\t\tDevice Allocation: AP, SM')
ulWLanCapacityDroppedPacketCount = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 49), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ulWLanCapacityDroppedPacketCount.setStatus('current')
if mibBuilder.loadTexts: ulWLanCapacityDroppedPacketCount.setDescription('Aggregated number of total Uplink data packet dropped due to\n\t\t\t\tWLAN capacity issue in packets\n\t\t\t\tDevice Allocation: AP, SM')
dlWLanCapacityDroppedPacketCount = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 50), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlWLanCapacityDroppedPacketCount.setStatus('current')
if mibBuilder.loadTexts: dlWLanCapacityDroppedPacketCount.setDescription('Aggregated number of total Downlink data packet dropped due to\n\t\t\t\texceed data buffer, over capacity or internal packet package\n\t\t\t\tsent issues in packet\n\t\t\t\tDevice Allocation: AP, SM')
ulWLanTotalAvailableFrameTimePerSecond = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ulWLanTotalAvailableFrameTimePerSecond.setStatus('current')
if mibBuilder.loadTexts: ulWLanTotalAvailableFrameTimePerSecond.setDescription('Aggregated number of total uplink available frame time can be\n\t\t\t\tscheduled for traffic in micro second for 1 second period\n\t\t\t\tDevice Allocation: AP')
dlWLanTotalAvailableFrameTimePerSecond = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlWLanTotalAvailableFrameTimePerSecond.setStatus('current')
if mibBuilder.loadTexts: dlWLanTotalAvailableFrameTimePerSecond.setDescription('Aggregated number of total downlink available frame time can be\n\t\t\t\tscheduled for traffic in micro second for 1 second period\n\t\t\t\tDevice Allocation: AP')
ulWLanTotalUsedFrameTimePerSecond = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ulWLanTotalUsedFrameTimePerSecond.setStatus('current')
if mibBuilder.loadTexts: ulWLanTotalUsedFrameTimePerSecond.setDescription('Aggregated number of uplink frame time schedule to be used in\n\t\t\t\tmicrosecond for 1 second period\n\t\t\t\tDevice Allocation: AP')
dlWLanTotalUsedFrameTimePerSecond = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 54), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlWLanTotalUsedFrameTimePerSecond.setStatus('current')
if mibBuilder.loadTexts: dlWLanTotalUsedFrameTimePerSecond.setDescription('Aggregated number of downlink frame time scheduled to be used\n\t\t\t\tper frame for 1 second period\n\t\t\t\tDevice Allocation: AP')
ulWLanTotalOverheadFrameTimePerSecond = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 55), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ulWLanTotalOverheadFrameTimePerSecond.setStatus('current')
if mibBuilder.loadTexts: ulWLanTotalOverheadFrameTimePerSecond.setDescription('Aggregated number of uplink frame time is used for overhead\n\t\t\t\t(preamble and inter-frame gap) in microsecond for 1 second\n\t\t\t\tperiod\n\t\t\t\tDevice Allocation: AP')
dlWLanTotalOverheadFrameTimePerSecond = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 56), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlWLanTotalOverheadFrameTimePerSecond.setStatus('current')
if mibBuilder.loadTexts: dlWLanTotalOverheadFrameTimePerSecond.setDescription('Aggregated number of downlink frame time is used for overhead\n\t\t\t\t(preamble ans inter-frame gap) per frame for 1 second period\n\t\t\t\tDevice Allocation: AP')
cambiumMCSTable = MibTable((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 57), )
if mibBuilder.loadTexts: cambiumMCSTable.setStatus('obsolete')
if mibBuilder.loadTexts: cambiumMCSTable.setDescription('This table contains information relevant to customer TDD Statistics\n\t\t   for MCS RX and TX rates:\n\t\t   - MCS number (MCSxx);\n\t\t   - Aggregated number of uplink frame time used for MCSxx in\n\t\t\t microsecond for 1 second period;\n\t\t   - Aggregated number of downlink frame time used for MCSxx in\n\t\t\t microsecond for 1 second period.\n\t\t   Device Allocation: AP')
cambiumMCSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 57, 1), ).setIndexNames((0, "CAMBIUM-PMP80211-MIB", "cambiumMCSIndex"))
if mibBuilder.loadTexts: cambiumMCSEntry.setStatus('obsolete')
if mibBuilder.loadTexts: cambiumMCSEntry.setDescription('MCS table\n\t\t   Device Allocation: AP')
cambiumMCSIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 57, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumMCSIndex.setStatus('obsolete')
if mibBuilder.loadTexts: cambiumMCSIndex.setDescription('MCS index\n\t\t   Device Allocation: AP')
cambiumMCSNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 57, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumMCSNumber.setStatus('obsolete')
if mibBuilder.loadTexts: cambiumMCSNumber.setDescription('MCS number (MCSxx)\n\t\t   Device Allocation: AP')
ulWLanMCSUsedFrameTimePerSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 57, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ulWLanMCSUsedFrameTimePerSecond.setStatus('obsolete')
if mibBuilder.loadTexts: ulWLanMCSUsedFrameTimePerSecond.setDescription('Aggregated number of uplink frame time used for MCSxx in\n\t\t\tmicrosecond for 1 second period\n\t\t   Device Allocation: AP')
dlWLanMCSUsedFrameTimePerSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 57, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlWLanMCSUsedFrameTimePerSecond.setStatus('obsolete')
if mibBuilder.loadTexts: dlWLanMCSUsedFrameTimePerSecond.setDescription('Aggregated number of downlink frame time used for MCSxx in\n\t\t\tmicrosecond for 1 second period\n\t\t   Device Allocation: AP')
ulWLanRetransPacketCount = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 58), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ulWLanRetransPacketCount.setStatus('current')
if mibBuilder.loadTexts: ulWLanRetransPacketCount.setDescription('Aggregated number of total Uplink data packet retransmitted due\n\t\t\t\tto no-acknowledgement.\n\t\t\t\tDevice Allocation: SM')
dlWLanRetransPacketCount = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 59), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlWLanRetransPacketCount.setStatus('current')
if mibBuilder.loadTexts: dlWLanRetransPacketCount.setDescription('Aggregated number of total Downlink data packet retransmitted\n\t\t\t\tdue to no-acknowledgement\n\t\t\t\tDevice Allocation: AP')
ulWLanBroadcastPacketCount = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 60), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ulWLanBroadcastPacketCount.setStatus('current')
if mibBuilder.loadTexts: ulWLanBroadcastPacketCount.setDescription('Aggregated total Uplink broadcast packet counter\n\t\t\t\tDevice Allocation: AP, SM')
dlWLanBroadcastPacketCount = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 61), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlWLanBroadcastPacketCount.setStatus('current')
if mibBuilder.loadTexts: dlWLanBroadcastPacketCount.setDescription('Aggregated total Downlink broadcast packet counter\n\t\t\t\tDevice Allocation: AP, SM')
ulWLanMulticastPacketCount = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 62), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ulWLanMulticastPacketCount.setStatus('current')
if mibBuilder.loadTexts: ulWLanMulticastPacketCount.setDescription('Aggregated total Uplink multicast packet counter\n\t\t\t\tDevice Allocation: AP, SM')
dlWLanMulticastPacketCount = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 63), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlWLanMulticastPacketCount.setStatus('current')
if mibBuilder.loadTexts: dlWLanMulticastPacketCount.setDescription('Aggregated total Downlink multicast packet counter\n\t\t\t\tDevice Allocation: AP, SM')
sysCPUUsage = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 64), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCPUUsage.setStatus('current')
if mibBuilder.loadTexts: sysCPUUsage.setDescription('CPU Usage, measuring up to 0.1%\n\t\t\t\tRange: 0..1000\n\t\t\t\tDevice Allocation: AP, SM')
rxEtherLanKbitCount = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 65), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxEtherLanKbitCount.setStatus('current')
if mibBuilder.loadTexts: rxEtherLanKbitCount.setDescription('Total Ethernet RX bytes\n\t\tDevice Allocation: AP, SM')
rxEtherLanTotalPacketCount = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 66), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxEtherLanTotalPacketCount.setStatus('current')
if mibBuilder.loadTexts: rxEtherLanTotalPacketCount.setDescription('Total Ethernet RX packets\n\t\tDevice Allocation: AP, SM')
rxEtherLanErrorPacketCount = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 67), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxEtherLanErrorPacketCount.setStatus('current')
if mibBuilder.loadTexts: rxEtherLanErrorPacketCount.setDescription('Total Ethernet RX errors\n\t\tDevice Allocation: AP, SM')
rxEtherLanDroppedPacketCount = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 68), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxEtherLanDroppedPacketCount.setStatus('current')
if mibBuilder.loadTexts: rxEtherLanDroppedPacketCount.setDescription('Total Ethernet RX drops\n\t\tDevice Allocation: AP, SM')
rxEtherLanMulticastPacketCount = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 69), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxEtherLanMulticastPacketCount.setStatus('current')
if mibBuilder.loadTexts: rxEtherLanMulticastPacketCount.setDescription('Total Ethernet RX multicast\n\t\tDevice Allocation: AP, SM')
rxEtherLanBroadcastPacketCount = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 70), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxEtherLanBroadcastPacketCount.setStatus('current')
if mibBuilder.loadTexts: rxEtherLanBroadcastPacketCount.setDescription('Total Ethernet RX broadcast\n\t\tDevice Allocation: AP, SM')
rxEtherLanMultiBroadcastKbitCount = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 71), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxEtherLanMultiBroadcastKbitCount.setStatus('current')
if mibBuilder.loadTexts: rxEtherLanMultiBroadcastKbitCount.setDescription('Aggregated total Ethernet RX multicast and broadcast data traffic \n\t\tDevice Allocation: AP, SM')
txEtherLanKbitCount = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 72), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txEtherLanKbitCount.setStatus('current')
if mibBuilder.loadTexts: txEtherLanKbitCount.setDescription('Total Ethernet TX bytes\n\t\tDevice Allocation: AP, SM')
txEtherLanTotalPacketCount = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 73), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txEtherLanTotalPacketCount.setStatus('current')
if mibBuilder.loadTexts: txEtherLanTotalPacketCount.setDescription('Total Ethernet TX packets\n\t\tDevice Allocation: AP, SM')
txEtherLanErrorPacketCount = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 74), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txEtherLanErrorPacketCount.setStatus('current')
if mibBuilder.loadTexts: txEtherLanErrorPacketCount.setDescription('Total Ethernet TX errors\n\t\tDevice Allocation: AP, SM')
txEtherLanDroppedPacketCount = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 75), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txEtherLanDroppedPacketCount.setStatus('current')
if mibBuilder.loadTexts: txEtherLanDroppedPacketCount.setDescription('Total Ethernet TX drops\n\t\tDevice Allocation: AP, SM')
txEtherLanMulticastPacketCount = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 76), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txEtherLanMulticastPacketCount.setStatus('current')
if mibBuilder.loadTexts: txEtherLanMulticastPacketCount.setDescription('Total Ethernet TX multicast\n\t\tDevice Allocation: AP, SM')
txEtherLanBroadcastPacketCount = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 77), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txEtherLanBroadcastPacketCount.setStatus('current')
if mibBuilder.loadTexts: txEtherLanBroadcastPacketCount.setDescription('Total Ethernet TX broadcast\n\t\tDevice Allocation: AP, SM')
txEtherLanMultiBroadcastKbitCount = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 78), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txEtherLanMultiBroadcastKbitCount.setStatus('current')
if mibBuilder.loadTexts: txEtherLanMultiBroadcastKbitCount.setDescription('Aggregated total Ethernet TX multicast and broadcast data traffic\n\t\tDevice Allocation: AP, SM')
cambiumStatsResetTimer = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 79), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumStatsResetTimer.setStatus('current')
if mibBuilder.loadTexts: cambiumStatsResetTimer.setDescription('Status time to indicate when is the last time stats are reset\n\t\t\t\tDevice Allocation: AP, SM')
ulWLanMCS00Packets = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 80), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ulWLanMCS00Packets.setStatus('current')
if mibBuilder.loadTexts: ulWLanMCS00Packets.setDescription('Aggregated number of uplink packet received for MCS00\n\t\t\t\tDevice Allocation: AP')
ulWLanMCS01Packets = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 81), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ulWLanMCS01Packets.setStatus('current')
if mibBuilder.loadTexts: ulWLanMCS01Packets.setDescription('Aggregated number of uplink packet received for MCS01\n\t\t\t\tDevice Allocation: AP')
ulWLanMCS02Packets = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 82), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ulWLanMCS02Packets.setStatus('current')
if mibBuilder.loadTexts: ulWLanMCS02Packets.setDescription('Aggregated number of uplink packet received for MCS02\n\t\t\t\tDevice Allocation: AP')
ulWLanMCS03Packets = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 83), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ulWLanMCS03Packets.setStatus('current')
if mibBuilder.loadTexts: ulWLanMCS03Packets.setDescription('Aggregated number of uplink packet received for MCS03\n\t\t\t\tDevice Allocation: AP')
ulWLanMCS04Packets = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 84), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ulWLanMCS04Packets.setStatus('current')
if mibBuilder.loadTexts: ulWLanMCS04Packets.setDescription('Aggregated number of uplink packet received for MCS04\n\t\t\t\tDevice Allocation: AP')
ulWLanMCS05Packets = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 85), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ulWLanMCS05Packets.setStatus('current')
if mibBuilder.loadTexts: ulWLanMCS05Packets.setDescription('Aggregated number of uplink packet received for MCS05\n\t\t\t\tDevice Allocation: AP')
ulWLanMCS06Packets = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 86), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ulWLanMCS06Packets.setStatus('current')
if mibBuilder.loadTexts: ulWLanMCS06Packets.setDescription('Aggregated number of uplink packet received for MCS06\n\t\t\t\tDevice Allocation: AP')
ulWLanMCS07Packets = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 87), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ulWLanMCS07Packets.setStatus('current')
if mibBuilder.loadTexts: ulWLanMCS07Packets.setDescription('Aggregated number of uplink packet received for MCS07\n\t\t\t\tDevice Allocation: AP')
ulWLanMCS08Packets = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 88), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ulWLanMCS08Packets.setStatus('current')
if mibBuilder.loadTexts: ulWLanMCS08Packets.setDescription('Aggregated number of uplink packet received for MCS08\n\t\t\t\tDevice Allocation: AP')
ulWLanMCS09Packets = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 89), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ulWLanMCS09Packets.setStatus('current')
if mibBuilder.loadTexts: ulWLanMCS09Packets.setDescription('Aggregated number of uplink packet received for MCS09\n\t\t\t\tDevice Allocation: AP')
ulWLanMCS10Packets = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 90), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ulWLanMCS10Packets.setStatus('current')
if mibBuilder.loadTexts: ulWLanMCS10Packets.setDescription('Aggregated number of uplink packet received for MCS10\n\t\t\t\tDevice Allocation: AP')
ulWLanMCS11Packets = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 91), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ulWLanMCS11Packets.setStatus('current')
if mibBuilder.loadTexts: ulWLanMCS11Packets.setDescription('Aggregated number of uplink packet received for MCS11\n\t\t\t\tDevice Allocation: AP')
ulWLanMCS12Packets = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 92), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ulWLanMCS12Packets.setStatus('current')
if mibBuilder.loadTexts: ulWLanMCS12Packets.setDescription('Aggregated number of uplink packet received for MCS12\n\t\t\t\tDevice Allocation: AP')
ulWLanMCS13Packets = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 93), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ulWLanMCS13Packets.setStatus('current')
if mibBuilder.loadTexts: ulWLanMCS13Packets.setDescription('Aggregated number of uplink packet received for MCS13\n\t\t\t\tDevice Allocation: AP')
ulWLanMCS14Packets = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 94), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ulWLanMCS14Packets.setStatus('current')
if mibBuilder.loadTexts: ulWLanMCS14Packets.setDescription('Aggregated number of uplink packet received for MCS14\n\t\t\t\tDevice Allocation: AP')
ulWLanMCS15Packets = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 95), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ulWLanMCS15Packets.setStatus('current')
if mibBuilder.loadTexts: ulWLanMCS15Packets.setDescription('Aggregated number of uplink packet received for MCS15\n\t\t\t\tDevice Allocation: AP')
dlWLanMCS00Packets = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 96), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlWLanMCS00Packets.setStatus('current')
if mibBuilder.loadTexts: dlWLanMCS00Packets.setDescription('Aggregated number of downlink packet received for MCS00\n\t\t\t\tDevice Allocation: AP')
dlWLanMCS01Packets = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 97), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlWLanMCS01Packets.setStatus('current')
if mibBuilder.loadTexts: dlWLanMCS01Packets.setDescription('Aggregated number of downlink packet received for MCS01\n\t\t\t\tDevice Allocation: AP')
dlWLanMCS02Packets = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 98), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlWLanMCS02Packets.setStatus('current')
if mibBuilder.loadTexts: dlWLanMCS02Packets.setDescription('Aggregated number of downlink packet received for MCS02\n\t\t\t\tDevice Allocation: AP')
dlWLanMCS03Packets = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 99), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlWLanMCS03Packets.setStatus('current')
if mibBuilder.loadTexts: dlWLanMCS03Packets.setDescription('Aggregated number of downlink packet received for MCS03\n\t\t\t\tDevice Allocation: AP')
dlWLanMCS04Packets = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 100), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlWLanMCS04Packets.setStatus('current')
if mibBuilder.loadTexts: dlWLanMCS04Packets.setDescription('Aggregated number of downlink packet received for MCS04\n\t\t\t\tDevice Allocation: AP')
dlWLanMCS05Packets = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 101), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlWLanMCS05Packets.setStatus('current')
if mibBuilder.loadTexts: dlWLanMCS05Packets.setDescription('Aggregated number of downlink packet received for MCS05\n\t\t\t\tDevice Allocation: AP')
dlWLanMCS06Packets = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 102), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlWLanMCS06Packets.setStatus('current')
if mibBuilder.loadTexts: dlWLanMCS06Packets.setDescription('Aggregated number of downlink packet received for MCS06\n\t\t\t\tDevice Allocation: AP')
dlWLanMCS07Packets = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 103), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlWLanMCS07Packets.setStatus('current')
if mibBuilder.loadTexts: dlWLanMCS07Packets.setDescription('Aggregated number of downlink packet received for MCS07\n\t\t\t\tDevice Allocation: AP')
dlWLanMCS08Packets = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 104), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlWLanMCS08Packets.setStatus('current')
if mibBuilder.loadTexts: dlWLanMCS08Packets.setDescription('Aggregated number of downlink packet received for MCS08\n\t\t\t\tDevice Allocation: AP')
dlWLanMCS09Packets = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 105), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlWLanMCS09Packets.setStatus('current')
if mibBuilder.loadTexts: dlWLanMCS09Packets.setDescription('Aggregated number of downlink packet received for MCS09\n\t\t\t\tDevice Allocation: AP')
dlWLanMCS10Packets = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 106), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlWLanMCS10Packets.setStatus('current')
if mibBuilder.loadTexts: dlWLanMCS10Packets.setDescription('Aggregated number of downlink packet received for MCS10\n\t\t\t\tDevice Allocation: AP')
dlWLanMCS11Packets = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 107), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlWLanMCS11Packets.setStatus('current')
if mibBuilder.loadTexts: dlWLanMCS11Packets.setDescription('Aggregated number of downlink packet received for MCS11\n\t\t\t\tDevice Allocation: AP')
dlWLanMCS12Packets = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 108), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlWLanMCS12Packets.setStatus('current')
if mibBuilder.loadTexts: dlWLanMCS12Packets.setDescription('Aggregated number of downlink packet received for MCS12\n\t\t\t\tDevice Allocation: AP')
dlWLanMCS13Packets = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 109), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlWLanMCS13Packets.setStatus('current')
if mibBuilder.loadTexts: dlWLanMCS13Packets.setDescription('Aggregated number of downlink packet received for MCS13\n\t\t\t\tDevice Allocation: AP')
dlWLanMCS14Packets = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 110), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlWLanMCS14Packets.setStatus('current')
if mibBuilder.loadTexts: dlWLanMCS14Packets.setDescription('Aggregated number of downlink packet received for MCS14\n\t\t\t\tDevice Allocation: AP')
dlWLanMCS15Packets = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 111), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlWLanMCS15Packets.setStatus('current')
if mibBuilder.loadTexts: dlWLanMCS15Packets.setDescription('Aggregated number of downlink packet received for MCS15\n\t\t\t\tDevice Allocation: AP')
syslogServerIPFirst = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogServerIPFirst.setStatus('current')
if mibBuilder.loadTexts: syslogServerIPFirst.setDescription('Syslog Server IP Address 1\n\t\tDevice Allocation: AP, SM')
syslogServerIPSecond = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogServerIPSecond.setStatus('current')
if mibBuilder.loadTexts: syslogServerIPSecond.setDescription('Syslog Server IP Address 2\n\t\tDevice Allocation: AP, SM')
syslogServerIPThird = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogServerIPThird.setStatus('current')
if mibBuilder.loadTexts: syslogServerIPThird.setDescription('Syslog Server IP Address 3\n\t\tDevice Allocation: AP, SM')
syslogServerIPFourth = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogServerIPFourth.setStatus('current')
if mibBuilder.loadTexts: syslogServerIPFourth.setDescription('Syslog Server IP Address 4\n\t\tDevice Allocation: AP, SM')
syslogServerLogToWeb = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogServerLogToWeb.setStatus('current')
if mibBuilder.loadTexts: syslogServerLogToWeb.setDescription('Enable Log to WEB Interface:\n\t\t\t0 - Disable, \n\t\t\t1 - Enable\n\t\tDevice Allocation: AP, SM')
syslogServerLogMask = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogServerLogMask.setStatus('current')
if mibBuilder.loadTexts: syslogServerLogMask.setDescription('Log Level Mask:\n\t\t\t0x00 - all messages, \n\t\t\t0x01 - emerg,\n\t\t\t0x02 - alert, \n\t\t\t0x04 - crit,\n\t\t\t0x08 - err,\n\t\t\t0x10 - warning,\n\t\t\t0x20 - notice,\n\t\t\t0x40 - info,\n\t\t\t0x80 - debug\n\t\tDevice Allocation: AP, SM')
dhcpLanEnable = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpLanEnable.setStatus('current')
if mibBuilder.loadTexts: dhcpLanEnable.setDescription('Local DHCP Server Enable:\n\t\t\t0 - Disable\n\t\t\t1 - Enable\n\t\tDevice Allocation: SM')
dhcpLanStart = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483647, 2147483647)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpLanStart.setStatus('current')
if mibBuilder.loadTexts: dhcpLanStart.setDescription('Local DHCP Server IP Start Address\n\t\tOffset from the Network address.\n\t\tDevice Allocation: SM')
dhcpLanLimit = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483647, 2147483647)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpLanLimit.setStatus('current')
if mibBuilder.loadTexts: dhcpLanLimit.setDescription('Local DHCP Server IP End Address\n\t\tOffset from the Network address.\n\t\tDevice Allocation: SM')
dhcpLanLeasetime = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 24)).clone(24)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpLanLeasetime.setStatus('current')
if mibBuilder.loadTexts: dhcpLanLeasetime.setDescription('Local DHCP Lease Setup in hours\n\t\tValid Range: 1 hour - 24 hours\n\t\tDevice Allocation: SM')
dhcpLanHostTable = MibTable((1, 3, 6, 1, 4, 1, 17713, 21, 3, 2, 5), )
if mibBuilder.loadTexts: dhcpLanHostTable.setStatus('current')
if mibBuilder.loadTexts: dhcpLanHostTable.setDescription('Table for DHCP Hosts\n\t\tDevice Allocation: SM')
dhcpLanHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17713, 21, 3, 2, 5, 1), ).setIndexNames((0, "CAMBIUM-PMP80211-MIB", "dhcpLanHostIndex"))
if mibBuilder.loadTexts: dhcpLanHostEntry.setStatus('current')
if mibBuilder.loadTexts: dhcpLanHostEntry.setDescription('DHCP Hosts Table Entry\n\t\tDevice Allocation: SM')
dhcpLanHostIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpLanHostIndex.setStatus('current')
if mibBuilder.loadTexts: dhcpLanHostIndex.setDescription('DHCP host Table Index\n\t\tTable Entry is cleared if Index is set to zero\n\t\tDevice Allocation: SM')
dhcpLanHostIP = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 2, 5, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpLanHostIP.setStatus('current')
if mibBuilder.loadTexts: dhcpLanHostIP.setDescription("DHCP Lan Host IP\n\t\t'ignore' or the IP address to be used for DHCP host\n\t\tDevice Allocation: SM")
dhcpLanHostMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 2, 5, 1, 3), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(17, 17), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpLanHostMAC.setStatus('current')
if mibBuilder.loadTexts: dhcpLanHostMAC.setDescription('The hardware address of this host\n\t\tDevice Allocation: SM')
dhcpLanHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 2, 5, 1, 4), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(1, 128), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpLanHostName.setStatus('current')
if mibBuilder.loadTexts: dhcpLanHostName.setDescription('Optional hostname to assign\n\t\tDevice Allocation: SM')
dhcpOption82 = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpOption82.setStatus('current')
if mibBuilder.loadTexts: dhcpOption82.setDescription('DHCP Option82:\n\t\t\t\t 0 - Disable\n\t\t\t\t 1 - Enable\n\t\t\t\tDevice Allocation: AP')
cambiumSSHServerEnable = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), )).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumSSHServerEnable.setStatus('current')
if mibBuilder.loadTexts: cambiumSSHServerEnable.setDescription('Cambium SSH Server:\n\t\t\t\t\t\t0 - Disable,\n\t\t\t\t\t\t1 - Enable\n\t\t\t\tDevice Allocation: AP, SM')
networkMode = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ValueRangeConstraint(3, 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkMode.setStatus('current')
if mibBuilder.loadTexts: networkMode.setDescription('SM Network Mode:\n\t\t\t1 - NAT,\n\t\t\t2 - Bridge,\n\t\t\t3 - Router\n\t\tDevice Allocation: SM')
networkSTP = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkSTP.setStatus('current')
if mibBuilder.loadTexts: networkSTP.setDescription('Spanning Tree Protocol:\n\t\t\t0 - Disable STP (Default mode)\n\t\t\t1 - Enable STP\n\t\tDevice Allocation: AP, SM')
networkLanIPAddressMode = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), )).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkLanIPAddressMode.setStatus('current')
if mibBuilder.loadTexts: networkLanIPAddressMode.setDescription('SM NAT LAN IP Address Mode\n\t\t\t1 - Static, \n\t\t\t2 - DHCP\n\t\tDevice Allocation: AP, SM')
networkLanIPAddr = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 2, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkLanIPAddr.setStatus('current')
if mibBuilder.loadTexts: networkLanIPAddr.setDescription('SM NAT LAN IP Address\n\t\tDevice Allocation: SM')
networkLanNetmask = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 2, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkLanNetmask.setStatus('current')
if mibBuilder.loadTexts: networkLanNetmask.setDescription('SM NAT LAN IP Subnet Mask\n\t\tDevice Allocation: SM')
networkLanGatewayIP = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 2, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkLanGatewayIP.setStatus('current')
if mibBuilder.loadTexts: networkLanGatewayIP.setDescription('SM NAT LAN Gateway IP Address\n\t\tDevice Allocation: SM')
networkLanDNSIPAddr = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 2, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkLanDNSIPAddr.setStatus('obsolete')
if mibBuilder.loadTexts: networkLanDNSIPAddr.setDescription('SM NAT LAN DNS Server IP Address\n\t\tDevice Allocation: SM')
networkLanMTU = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(576, 1700), )).clone(1500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkLanMTU.setStatus('current')
if mibBuilder.loadTexts: networkLanMTU.setDescription('SM NAT LAN MTU size\n\t\tDevice Allocation: SM')
networkLanDNSIPAddrPrimary = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 2, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkLanDNSIPAddrPrimary.setStatus('current')
if mibBuilder.loadTexts: networkLanDNSIPAddrPrimary.setDescription('SM NAT LAN DNS Server IP Address\n\t\tDevice Allocation: SM\n\t\tPrimary Server IP')
networkLanDNSIPAddrSecondary = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 2, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkLanDNSIPAddrSecondary.setStatus('current')
if mibBuilder.loadTexts: networkLanDNSIPAddrSecondary.setDescription('SM NAT LAN DNS Server IP Address\n\t\tDevice Allocation: SM\n\t\tSecondary Server IP')
networkLanAutoNegotiation = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), )).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkLanAutoNegotiation.setStatus('current')
if mibBuilder.loadTexts: networkLanAutoNegotiation.setDescription('Lan Autonegotiation \n\t\t\t0 - Disable,\n\t\t\t1 - Enable\n\t\tDevice Allocation: AP, SM')
networkLanSpeed = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(10, 10), ValueRangeConstraint(100, 100), ValueRangeConstraint(1000, 1000), )).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkLanSpeed.setStatus('current')
if mibBuilder.loadTexts: networkLanSpeed.setDescription('LAN Speed \n\t\t\t10\t - 10 Mb/s,\n\t\t\t100\t - 100 Mb/s,\n\t\t\t1000 - 1000 Mb/s\n\t\tDevice Allocation: AP, SM')
networkLanDuplex = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 2, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), )).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkLanDuplex.setStatus('current')
if mibBuilder.loadTexts: networkLanDuplex.setDescription('LAN Duplex Mode \n\t\t\t0 - Half,\n\t\t\t1 - Full\n\t\tDevice Allocation: AP, SM')
networkBroadcastStormEnabled = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkBroadcastStormEnabled.setStatus('current')
if mibBuilder.loadTexts: networkBroadcastStormEnabled.setDescription('Broadcast Strom Control \n\t\t\t0 - Disabled,\n\t\t\t1 - Enabled\n\t\tDevice Allocation: AP, SM')
networkBroadcastStormRate = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 2, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkBroadcastStormRate.setStatus('current')
if mibBuilder.loadTexts: networkBroadcastStormRate.setDescription('Broadcast Strom Control Rate\n\t\t\tin frames per second\n\t\tDevice Allocation: AP, SM')
networkLan2Enabled = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 2, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), )).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkLan2Enabled.setStatus('current')
if mibBuilder.loadTexts: networkLan2Enabled.setDescription('AUX Lan Port Enabled \n\t\t\t0 - Disable,\n\t\t\t1 - Enable\n\t\tDevice Allocation: AP, SM')
networkLan2AutoNegotiation = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 2, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), )).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkLan2AutoNegotiation.setStatus('current')
if mibBuilder.loadTexts: networkLan2AutoNegotiation.setDescription('Lan Autonegotiation \n\t\t\t0 - Disable,\n\t\t\t1 - Enable\n\t\tDevice Allocation: AP, SM')
networkLan2Speed = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 2, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(10, 10), ValueRangeConstraint(100, 100), )).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkLan2Speed.setStatus('current')
if mibBuilder.loadTexts: networkLan2Speed.setDescription('LAN Speed \n\t\t\t10\t - 10 Mb/s,\n\t\t\t100\t - 100 Mb/s\n\t\tDevice Allocation: AP, SM')
networkLan2Duplex = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 2, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), )).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkLan2Duplex.setStatus('current')
if mibBuilder.loadTexts: networkLan2Duplex.setDescription('LAN Duplex Mode \n\t\t\t0 - Half,\n\t\t\t1 - Full\n\t\tDevice Allocation: AP, SM')
networkLan2PoEEnabled = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 2, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), )).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkLan2PoEEnabled.setStatus('current')
if mibBuilder.loadTexts: networkLan2PoEEnabled.setDescription('PoE Enabled \n\t\t\t0 - Disabled,\n\t\t\t1 - Enabled\n\t\tDevice Allocation: SM')
networkLanEnabled = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 2, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), )).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkLanEnabled.setStatus('current')
if mibBuilder.loadTexts: networkLanEnabled.setDescription('Lan Port Enabled\n\t\t\t0 - Disable,\n\t\t\t1 - Enable\n\t\tDevice Allocation: SM')
networkWanIPAddressMode = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), )).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkWanIPAddressMode.setStatus('current')
if mibBuilder.loadTexts: networkWanIPAddressMode.setDescription('SM NAT WAN IP Address Mode\n\t\t\t1 - Static, \n\t\t\t2 - DHCP\n\t\tDevice Allocation: SM')
networkWanIPAddr = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 3, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkWanIPAddr.setStatus('current')
if mibBuilder.loadTexts: networkWanIPAddr.setDescription('SM NAT WAN IP Address\n\t\tDevice Allocation: SM')
networkWanNetmask = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 3, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkWanNetmask.setStatus('current')
if mibBuilder.loadTexts: networkWanNetmask.setDescription('SM NAT WAN IP Subnet Mask\n\t\tDevice Allocation: SM')
networkWanGatewayIP = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 3, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkWanGatewayIP.setStatus('current')
if mibBuilder.loadTexts: networkWanGatewayIP.setDescription('SM NAT WAN Gateway IP Address\n\t\tDevice Allocation: SM')
networkWanDNSIPAddr = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 3, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkWanDNSIPAddr.setStatus('obsolete')
if mibBuilder.loadTexts: networkWanDNSIPAddr.setDescription('SM NAT WAN DNS Server IP Address\n\t\tDevice Allocation: SM')
networkWanMTU = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(576, 1700), )).clone(1500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkWanMTU.setStatus('current')
if mibBuilder.loadTexts: networkWanMTU.setDescription('SM NAT WAN MTU size\n\t\tDevice Allocation: SM')
networkWanDNSIPAddrPrimary = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 3, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkWanDNSIPAddrPrimary.setStatus('current')
if mibBuilder.loadTexts: networkWanDNSIPAddrPrimary.setDescription('SM NAT WAN DNS Server IP Address\n\t\tDevice Allocation: SM\n\t\tPrimary Server IP')
networkWanDNSIPAddrSecondary = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 3, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkWanDNSIPAddrSecondary.setStatus('current')
if mibBuilder.loadTexts: networkWanDNSIPAddrSecondary.setDescription('SM NAT WAN DNS Server IP Address\n\t\tDevice Allocation: SM\n\t\tSecondary Server IP')
networkWanPPPoE = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkWanPPPoE.setStatus('current')
if mibBuilder.loadTexts: networkWanPPPoE.setDescription('SM only.Enable or Disable PPPoE\n\t\tmode. 1 is enable 0 is disable')
networkWanPPPoEUsername = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 3, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkWanPPPoEUsername.setStatus('current')
if mibBuilder.loadTexts: networkWanPPPoEUsername.setDescription('SM only.Username to authenticate with\n\t\tPPPoE Server')
networkWanPPPoEPassword = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 3, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkWanPPPoEPassword.setStatus('current')
if mibBuilder.loadTexts: networkWanPPPoEPassword.setDescription('SM only.Password to authenticate with\n\t\tPPPoE Server')
networkWanPPPoEAC = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 3, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkWanPPPoEAC.setStatus('current')
if mibBuilder.loadTexts: networkWanPPPoEAC.setDescription('SM only.PPPoE Access Concentrator Name')
networkWanPPPoEService = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 3, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkWanPPPoEService.setStatus('current')
if mibBuilder.loadTexts: networkWanPPPoEService.setDescription('SM only.PPPoE Service Name')
networkWanPPPoEAuth = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 3, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkWanPPPoEAuth.setStatus('current')
if mibBuilder.loadTexts: networkWanPPPoEAuth.setDescription('SM only.This indicates type of authentication\n\t\twith PPPoE Server. Options are\n\t\t0 - All\n\t\t1 - PAP\n\t\t2 - CHAP')
networkWanPPPoEMTU = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 3, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(576, 1492), )).clone(1492)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkWanPPPoEMTU.setStatus('current')
if mibBuilder.loadTexts: networkWanPPPoEMTU.setDescription('SM only.MTU size to be used for PPPoE\n\t\tconnection')
networkWanPPPoEKeepAlive = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 3, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(5, 180), )).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkWanPPPoEKeepAlive.setStatus('current')
if mibBuilder.loadTexts: networkWanPPPoEKeepAlive.setDescription('SM only.Time in seconds for the keep Alive\n\t\tmessages from PPPoE client to PPPoE\n\t\tServer')
networkWanPPPoEMSSClamping = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 3, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkWanPPPoEMSSClamping.setStatus('current')
if mibBuilder.loadTexts: networkWanPPPoEMSSClamping.setDescription('SM only.Enable or disable MSS Clamping\n\t\t0 - Disable\n\t\t1 - Enable')
networkBridgeIPAddressMode = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), )).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkBridgeIPAddressMode.setStatus('current')
if mibBuilder.loadTexts: networkBridgeIPAddressMode.setDescription('Device Bridge IP Address Mode\n\t\t\t1 - Static, \n\t\t\t2 - DHCP\n\t\tDevice Allocation: AP, SM')
networkBridgeIPAddr = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 7, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkBridgeIPAddr.setStatus('current')
if mibBuilder.loadTexts: networkBridgeIPAddr.setDescription('Device Bridge IP Address\n\t\tDevice Allocation: AP, SM')
networkBridgeNetmask = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 7, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkBridgeNetmask.setStatus('current')
if mibBuilder.loadTexts: networkBridgeNetmask.setDescription('Device Bridge IP Subnet Mask\n\t\tDevice Allocation: AP, SM')
networkBridgeGatewayIP = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 7, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkBridgeGatewayIP.setStatus('current')
if mibBuilder.loadTexts: networkBridgeGatewayIP.setDescription('Device Bridge Gateway IP Address\n\t\tDevice Allocation: AP, SM')
networkBridgeDNSIPAddr = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 7, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkBridgeDNSIPAddr.setStatus('obsolete')
if mibBuilder.loadTexts: networkBridgeDNSIPAddr.setDescription('Device Bridge DNS Server IP Address\n\t\tDevice Allocation: AP, SM')
networkBridgeMTU = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 7, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(576, 1700), )).clone(1500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkBridgeMTU.setStatus('current')
if mibBuilder.loadTexts: networkBridgeMTU.setDescription('Device Bridge MTU size\n\t\tDevice Allocation: AP, SM')
networkBridgeDNSIPAddrPrimary = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 7, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkBridgeDNSIPAddrPrimary.setStatus('current')
if mibBuilder.loadTexts: networkBridgeDNSIPAddrPrimary.setDescription('Device Bridge DNS Server IP Address\n\t\tDevice Allocation: AP, SM\n\t\tPrimary Server IP')
networkBridgeDNSIPAddrSecondary = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 7, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkBridgeDNSIPAddrSecondary.setStatus('current')
if mibBuilder.loadTexts: networkBridgeDNSIPAddrSecondary.setDescription('Device Bridge DNS Server IP Address\n\t\tDevice Allocation: AP, SM\n\t\tSecondary Server IP')
networkPortSecurity = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkPortSecurity.setStatus('current')
if mibBuilder.loadTexts: networkPortSecurity.setDescription('LAN Port Security switch:\n\t\t\t\t\t\t0 - Disable\n\t\t\t\t\t\t1 - Enable\n\t\t\t\tDevice Allocation: SM')
networkPortSecurityMax = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkPortSecurityMax.setStatus('current')
if mibBuilder.loadTexts: networkPortSecurityMax.setDescription('Number of secure MAC addresses:\n\t\t\t\t\t\t1-254 - Fixed Learned MAC limit\n\t\t\t\tDevice Allocation: SM')
networkPortSecurityAgingTime = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1440)).clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkPortSecurityAgingTime.setStatus('current')
if mibBuilder.loadTexts: networkPortSecurityAgingTime.setDescription('Security MAC address aging time:\n\t\t\t\t\t\tThis prameter indicates on how long to store learned MAC address in the cache in seconds,\n\t\t\t\t\t\t0 - do not delete MAC address from the buffer,\n\t\t\t\t\t\tDefault - is 300 seconds.\n\t\t\t\tDevice Allocation: AP, SM')
mcastGroupLimit = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 5), )).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcastGroupLimit.setStatus('current')
if mibBuilder.loadTexts: mcastGroupLimit.setDescription('Multicast Group Limit:\n\t\t\t\t\t\tDefault - 3 Multicast Groups for SM, unlimited for AP.\n\t\t\t\tDevice Allocation: SM')
mgmtIFEnable = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 20, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgmtIFEnable.setStatus('current')
if mibBuilder.loadTexts: mgmtIFEnable.setDescription('Separate Management Interface Enabled:\n\t\t\t\t0 - Disabled,\n\t\t\t\t1 - Enabled\n\t\t\t\tDevice Allocation: SM')
mgmtIFVLAN = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 20, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgmtIFVLAN.setStatus('current')
if mibBuilder.loadTexts: mgmtIFVLAN.setDescription('Separate Management Interface VLAN Enabled:\n\t\t\t\t0 - Disabled,\n\t\t\t\t1 - Enabled\n\t\t\t\tDevice Allocation: SM')
mgmtIFVID = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 20, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgmtIFVID.setStatus('current')
if mibBuilder.loadTexts: mgmtIFVID.setDescription('Separate Management Interface VLAN\n\t\t\t\tDevice Allocation: SM')
mgmtIFVP = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 20, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgmtIFVP.setStatus('current')
if mibBuilder.loadTexts: mgmtIFVP.setDescription('Separate Management Interface VP\n\t\t\t\tDevice Allocation: SM')
mgmtIFIPAddressMode = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 20, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgmtIFIPAddressMode.setStatus('current')
if mibBuilder.loadTexts: mgmtIFIPAddressMode.setDescription('Separate Management IP Address Mode\n\t\t\t1 - Static,\n\t\t\t2 - DHCP\n\t\tDevice Allocation: SM')
mgmtIFIPAddr = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 20, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgmtIFIPAddr.setStatus('current')
if mibBuilder.loadTexts: mgmtIFIPAddr.setDescription('Separate Management IP Address\n\t\t\t\tDevice Allocation: SM')
mgmtIFNetmask = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 20, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgmtIFNetmask.setStatus('current')
if mibBuilder.loadTexts: mgmtIFNetmask.setDescription('Separate Management IP Subnet Mask\n\t\t\t\tDevice Allocation: SM')
mgmtIFGateway = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 20, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgmtIFGateway.setStatus('current')
if mibBuilder.loadTexts: mgmtIFGateway.setDescription('Separate Management IP Gateway\n\t\t\t\tDevice Allocation: SM')
cambiumIPAliasCnfTable = MibTable((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 27, 1), )
if mibBuilder.loadTexts: cambiumIPAliasCnfTable.setStatus('current')
if mibBuilder.loadTexts: cambiumIPAliasCnfTable.setDescription('Static Network Table')
cambiumIPAliasCnfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 27, 1, 1), ).setIndexNames((0, "CAMBIUM-PMP80211-MIB", "cambiumIPAliasesIndex"))
if mibBuilder.loadTexts: cambiumIPAliasCnfEntry.setStatus('current')
if mibBuilder.loadTexts: cambiumIPAliasCnfEntry.setDescription('Static Network Table Entry\n\t\tDevice Allocation: SM')
cambiumIPAliasesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 27, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumIPAliasesIndex.setStatus('current')
if mibBuilder.loadTexts: cambiumIPAliasesIndex.setDescription('IP Alias Table Index\n\tTable Entry is cleared if Index is set to zero\n\tDevice Allocation: AP, SM')
cambiumIPAliasesIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 27, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumIPAliasesIpAddr.setStatus('current')
if mibBuilder.loadTexts: cambiumIPAliasesIpAddr.setDescription('Network IP Alliases address')
cambiumIPAliasesNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 27, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumIPAliasesNetmask.setStatus('current')
if mibBuilder.loadTexts: cambiumIPAliasesNetmask.setDescription('Network Dest IP Netmask')
cambiumIPAliasesInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 27, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumIPAliasesInfo.setStatus('current')
if mibBuilder.loadTexts: cambiumIPAliasesInfo.setDescription('Network Info message')
cambiumIPAliasesEnable = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 27, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumIPAliasesEnable.setStatus('current')
if mibBuilder.loadTexts: cambiumIPAliasesEnable.setDescription('Enable/Disable IP Aliases in Router mode\n\t\tDevice Allocation: SM')
networkLanDefaultIP = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 25), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkLanDefaultIP.setStatus('current')
if mibBuilder.loadTexts: networkLanDefaultIP.setDescription('Default Network IP\n\t\t\t\tDevice Allocation: SM')
networkRelaydEnable = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkRelaydEnable.setStatus('current')
if mibBuilder.loadTexts: networkRelaydEnable.setDescription('Relay for forwarding DHCP packets:\n\t\t\t0 - Disable\n\t\t\t1 - Enable\n\t\tDevice Allocation: AP,SM')
networkUPNP = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 21, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkUPNP.setStatus('current')
if mibBuilder.loadTexts: networkUPNP.setDescription('Enable UPnP on SM in NAT mode\n                0 - Disable,\n                1 - Enable\n                Device Allocation: SM')
networkNATPMP = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 21, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkNATPMP.setStatus('current')
if mibBuilder.loadTexts: networkNATPMP.setDescription('Enable NAT-PMP on SM in NAT mode\n                0 - Disable,\n                1 - Enable\n                Device Allocation: SM')
networkLLDP = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 23, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkLLDP.setStatus('current')
if mibBuilder.loadTexts: networkLLDP.setDescription('Enable LLDP\n                0 - Disable,\n                1 - Enable\n                Device Allocation: AP,SM')
networkLLDPMode = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 23, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkLLDPMode.setStatus('current')
if mibBuilder.loadTexts: networkLLDPMode.setDescription('LLDP mode\n\t\t\t\t1 - receive and transmit LLDPDU\n\t\t\t\t2 - only receive LLDPDU\n                Device Allocation: AP,SM')
snmpReadOnlyCommunity = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 5, 1), DisplayString().clone('public')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpReadOnlyCommunity.setStatus('current')
if mibBuilder.loadTexts: snmpReadOnlyCommunity.setDescription('SNMP read-only community name\n\t\tDevice Allocation: AP, SM')
snmpReadWriteCommunity = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 5, 2), DisplayString().clone('private')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpReadWriteCommunity.setStatus('current')
if mibBuilder.loadTexts: snmpReadWriteCommunity.setDescription('SNMP read-write community name\n\t\tDevice Allocation: AP, SM')
snmpSystemName = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 5, 3), DisplayString().clone('CambiumNetworks')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpSystemName.setStatus('current')
if mibBuilder.loadTexts: snmpSystemName.setDescription('SNMP System Name\n\t\tDevice Allocation: AP, SM')
snmpSystemDescription = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 5, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpSystemDescription.setStatus('current')
if mibBuilder.loadTexts: snmpSystemDescription.setDescription('SNMP System Description\n\t\tDevice Allocation: AP, SM')
snmpTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 5, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapEnable.setStatus('current')
if mibBuilder.loadTexts: snmpTrapEnable.setDescription('SNMP Trap Support Enable\n\t\t\t0 - Disable, \n\t\t\t1 - Enable\n\t\tDevice Allocation: AP, SM')
snmpTrapCommunity = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 5, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapCommunity.setStatus('current')
if mibBuilder.loadTexts: snmpTrapCommunity.setDescription('SNMP Trap Community\n\t\tDevice Allocation: AP, SM')
snmpTrapTable = MibTable((1, 3, 6, 1, 4, 1, 17713, 21, 3, 5, 7), )
if mibBuilder.loadTexts: snmpTrapTable.setStatus('current')
if mibBuilder.loadTexts: snmpTrapTable.setDescription('SNMP Trap Servers Table\n\t\tDevice Allocation: AP, SM')
snmpTrapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17713, 21, 3, 5, 7, 1), ).setIndexNames((0, "CAMBIUM-PMP80211-MIB", "snmpTrapEntryIndex"))
if mibBuilder.loadTexts: snmpTrapEntry.setStatus('current')
if mibBuilder.loadTexts: snmpTrapEntry.setDescription('SNMP Trap Table Entry\n\t\tDevice Allocation: AP, SM')
snmpTrapEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 5, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapEntryIndex.setStatus('current')
if mibBuilder.loadTexts: snmpTrapEntryIndex.setDescription('SNMP Trap Server IP Table Index\n\t\tTable Entry is cleared if Index is set to zero\n\t\tDevice Allocation: AP, SM')
snmpTrapEntryIP = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 5, 7, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapEntryIP.setStatus('current')
if mibBuilder.loadTexts: snmpTrapEntryIP.setDescription('SNMP Trap Server IP Address\n\t\tDevice Allocation: AP, SM')
snmpTrapEntryPort = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 5, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(162)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapEntryPort.setStatus('current')
if mibBuilder.loadTexts: snmpTrapEntryPort.setDescription('SNMP Trap Server Port Number\n\t\tDevice Allocation: AP, SM')
snmpDomainAccessEnable = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 5, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpDomainAccessEnable.setStatus('current')
if mibBuilder.loadTexts: snmpDomainAccessEnable.setDescription('SNMP Access Domain Enable\n\t\t\t0 - Disable, \n\t\t\t1 - Enable\n\t\tDevice Allocation: AP, SM')
snmpDomainAccessIP = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 5, 9), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(7, 15), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpDomainAccessIP.setStatus('current')
if mibBuilder.loadTexts: snmpDomainAccessIP.setDescription('SNMP Access Domain IP Address\n\t\tDevice Allocation: AP, SM')
snmpDomainAccessIPMask = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 5, 10), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(7, 15), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpDomainAccessIPMask.setStatus('current')
if mibBuilder.loadTexts: snmpDomainAccessIPMask.setDescription('SNMP Access Domain IP Mask\n\t\tDevice Allocation: AP, SM')
systemConfigTimezone = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 6, 1, 1), DisplayString().clone('GMT')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemConfigTimezone.setStatus('current')
if mibBuilder.loadTexts: systemConfigTimezone.setDescription('Time Zone\n\t\tDevice Allocation: AP, SM')
systemConfigDeviceName = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 6, 1, 2), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(1, 128), )).clone('Cambium-STA')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemConfigDeviceName.setStatus('current')
if mibBuilder.loadTexts: systemConfigDeviceName.setDescription('SM Device Name\n\t\tDevice Allocation: AP, SM')
systemConfigETSILicense = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128)).clone('ETSIkey')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemConfigETSILicense.setStatus('obsolete')
if mibBuilder.loadTexts: systemConfigETSILicense.setDescription('ETSI Country Code. \n\t\tSet the country code using license key on AP. Visit Cambium Webserver\n\t\tto get the license key. The country code set in license key will\n\t\tbe used to set country code on AP if the key validation pass. This \n\t\tparameter is for AP only.\n\t\tDevice Allocation: AP')
systemConfigSWLockBit = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemConfigSWLockBit.setStatus('current')
if mibBuilder.loadTexts: systemConfigSWLockBit.setDescription('Software Lock Bit.\n\t\tThis bit indicates if the Software Lock Bit is set or not.\n\t\tIf the software bit is set then country code needs to be\n\t\tset using License Key from Cambium Webserver\n\t\t\t0 - Bit not Set, \n\t\t\t1 - Bit is set\n\t\tDevice Allocation: AP, SM')
systemConfigHWLockBit = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemConfigHWLockBit.setStatus('current')
if mibBuilder.loadTexts: systemConfigHWLockBit.setDescription('Hardware Lock Bit.\n\t\tThis bit indicates if the hardware Lock Bit is set or not.\n\t\tIf the hardware bit is set then country code cannot be changed.\n\t\t\t0 - Bit not Set, \n\t\t\t1 - Bit is set\n\t\tDevice Allocation: AP, SM')
systemDeviceLocLatitude = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 6, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemDeviceLocLatitude.setStatus('current')
if mibBuilder.loadTexts: systemDeviceLocLatitude.setDescription('Device GPS Location Latitude.\n\t\tCoordinates of device in (h ddd.ddddd) format.\n\t\tUsed to display location at Google Maps service.\n\t\tDevice Allocation: AP, SM')
systemDeviceLocLongitude = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 6, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemDeviceLocLongitude.setStatus('current')
if mibBuilder.loadTexts: systemDeviceLocLongitude.setDescription('Device GPS Location Longitude.\n\t\tCoordinates of device in (h ddd.ddddd) format.\n\t\tUsed to display location at Google Maps service.\n\t\tDevice Allocation: AP, SM')
systemDeviceLocHeight = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 6, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemDeviceLocHeight.setStatus('current')
if mibBuilder.loadTexts: systemDeviceLocHeight.setDescription('Device GPS Location Longitude.\n\t\tAltitude of device above/below mean sea level.\n\t\tDevice Allocation: AP, SM')
systemConfigisGPSkeyOK = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 6, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemConfigisGPSkeyOK.setStatus('obsolete')
if mibBuilder.loadTexts: systemConfigisGPSkeyOK.setDescription('GPS Lock.\n\t\tThis field indicates if the GPS Key is OK. Based on this the GPS\n\t\tis locked on the board.\n\t\t\t0 - GPS Key is bad. Sync Source defaulted to Internal GPS only\n\t\t\t1 - GPS Key is good. User can set sync source to any value \n\t\tDevice Allocation: AP')
systemConfigGPSLockBit = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 6, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemConfigGPSLockBit.setStatus('obsolete')
if mibBuilder.loadTexts: systemConfigGPSLockBit.setDescription("GPS Lock Bit.\n                This bit indicates if the GPS feature Lock Bit is set or not.\n                If the hardware bit is set then GPS synchronisation can't be used.\n                        0 - No limitation of usage GPS synchronisation,\n                        1 - GPS synchronisation not allowed,\n                        2 - The GPSkey required to allow synchronisation\n                Device Allocation: AP")
systemConfigSMLockBit = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 6, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemConfigSMLockBit.setStatus('current')
if mibBuilder.loadTexts: systemConfigSMLockBit.setDescription('SM Lock Bit\n                This bit indicates if the AP is locked for Maximum SM registrations support.\n                If the bit is set then maximum of 10 SMs can be registered on the AP.\n                        0 - No limitation, up to 120 SM registrations are supported,\n                        1 - AP is tiered with 10 SM registrations\n                Device Allocation: AP')
systemConfigSMLimit = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 6, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemConfigSMLimit.setStatus('current')
if mibBuilder.loadTexts: systemConfigSMLimit.setDescription('SM Registrations limit, based on Operational License content.\n\t\tIndicates the maximum number of SMs with could be registered to an AP.\n\t\tValid only in TDD mode if device is AP Lite.\n\t\tDevice Allocation: AP')
powerSequenceFactoryDefault = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 6, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), )).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerSequenceFactoryDefault.setStatus('current')
if mibBuilder.loadTexts: powerSequenceFactoryDefault.setDescription("Set this to enable or disable the ability to factory default the radio's \n\t\tconfiguration using the power cycle sequence(explained in the User Guide). \n\t\t\t0 - Disabled \n\t\t\t1 - Enabled\n\t\tDevice Allocation: AP, SM")
systemConfigLockedCC = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 6, 1, 16), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(1, 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemConfigLockedCC.setStatus('current')
if mibBuilder.loadTexts: systemConfigLockedCC.setDescription('Return Locked Country Value in case if device is locked for particular country.\n\t\tDevice Allocation: AP, SM')
systemConfigMinAntGain = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 6, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemConfigMinAntGain.setStatus('current')
if mibBuilder.loadTexts: systemConfigMinAntGain.setDescription('Return Minimum allowed Antenna Gain.\n\t\tDevice Allocation: AP, SM')
systemConfigOperationalLicense = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 6, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemConfigOperationalLicense.setStatus('current')
if mibBuilder.loadTexts: systemConfigOperationalLicense.setDescription('Device Operational License. \n\t\tSet Operational License on AP to extend basic functionality. \n\t\tVisit Cambium Webserver to get the license key. ETSI country code and \n\t\tmaximum SMs count value will be set on AP if the key validation pass.\n\t\tLicense is required on locked devices only.\n\t\tDevice Allocation: AP')
systemNtpServerIPMode = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 6, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), )).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemNtpServerIPMode.setStatus('current')
if mibBuilder.loadTexts: systemNtpServerIPMode.setDescription('NTP Server IP Address receive mode\n\t\t\t1 - Static, \n\t\t\t2 - DHCP\n\t\tDevice Allocation: AP, SM')
systemNtpServerPrimaryIP = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 6, 2, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemNtpServerPrimaryIP.setStatus('current')
if mibBuilder.loadTexts: systemNtpServerPrimaryIP.setDescription('NTP Server 1 IP Address\n\t\tDevice Allocation: AP, SM')
systemNtpServerSecondaryIP = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 6, 2, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemNtpServerSecondaryIP.setStatus('current')
if mibBuilder.loadTexts: systemNtpServerSecondaryIP.setDescription('NTP Server 2 IP Address\n\t\tDevice Allocation: AP, SM')
webService = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), )).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: webService.setStatus('current')
if mibBuilder.loadTexts: webService.setDescription('Web Service\n\t\t\t1 - HTTP, \n\t\t\t2 - HTTPS\n\t\tDevice Allocation: AP, SM')
httpPort = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 7, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(80)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpPort.setStatus('current')
if mibBuilder.loadTexts: httpPort.setDescription('HTTP Port\n\t\tDevice Allocation: AP, SM')
httpsPort = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 7, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(443)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpsPort.setStatus('current')
if mibBuilder.loadTexts: httpsPort.setDescription('HTTPs Port')
wirelessDeviceCountryCode = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 1, 1), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(2, 2), )).clone('NS')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessDeviceCountryCode.setStatus('current')
if mibBuilder.loadTexts: wirelessDeviceCountryCode.setDescription('Country Code. \n\t\tIf US Lock SKU, this is US and cannot be changed. \n\t\tIf not locked, for 9350, it will be None, for 9344, it will be Follow AP CC. \n\t\tWhen user change CC at SM, the SM Scan Frequency Type  will be FA\n\t\tDevice Allocation: AP')
wirelessType = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), )).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessType.setStatus('obsolete')
if mibBuilder.loadTexts: wirelessType.setDescription('Wireless type:\n\t\t\t\t\t\t1 - tdd driver,\n\t\t\t\t\t\t2 - 80211 (aquila) driver\n\t\t\t\tDevice Allocation: AP, SM')
wirelessDefaultCountryCode = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 1, 3), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(2, 2), )).clone('OT')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessDefaultCountryCode.setStatus('current')
if mibBuilder.loadTexts: wirelessDefaultCountryCode.setDescription('Default Country Code.')
wirelessInterfaceMode = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ValueRangeConstraint(3, 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessInterfaceMode.setStatus('current')
if mibBuilder.loadTexts: wirelessInterfaceMode.setDescription('Wireless Interface Mode:\n\t\t\t1 for AP, \n\t\t\t2 for SM, \n\t\t\t3 for Spectrum Analyzer\n\t\tDevice Allocation: AP, SM')
wirelessInterfaceSSID = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)).clone('Cambium-AP')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessInterfaceSSID.setStatus('current')
if mibBuilder.loadTexts: wirelessInterfaceSSID.setDescription('Wireless SSID\n\t\tDevice Allocation: AP')
wirelessInterfaceEncryption = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ValueRangeConstraint(3, 3), )).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessInterfaceEncryption.setStatus('current')
if mibBuilder.loadTexts: wirelessInterfaceEncryption.setDescription('Wireless authentication type:\n\t\t\t1 - Open mode,\n\t\t\t2 - wpa2 mode,\n\t\t\t3 - EAP-TTLS\n\t\tDevice Allocation: AP')
wirelessInterfaceEncryptionKey = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 2, 4), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(8, 63), )).clone('Cam39-Tai!wdmv')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessInterfaceEncryptionKey.setStatus('current')
if mibBuilder.loadTexts: wirelessInterfaceEncryptionKey.setDescription('Pre-shared authentication key.\n\t\tDevice Allocation: AP')
wirelessInterfaceHTMode = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessInterfaceHTMode.setStatus('current')
if mibBuilder.loadTexts: wirelessInterfaceHTMode.setDescription('Frequency Bandwidth\n\t\t\t1 - 20Mhz, \n\t\t\t2 - 40Mhz, \n\t\t\t3 - 10Mhz,\n\t\t\t4 - 5MHz\n\t\tDevice Allocation: AP')
wirelessInterfaceTXPower = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-24, 30)).clone(7)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessInterfaceTXPower.setStatus('current')
if mibBuilder.loadTexts: wirelessInterfaceTXPower.setDescription('TX Power (Board Output Conducted)\n\t\tDevice Allocation: AP')
wirelessInterfaceTDDAntennaGain = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 2, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 40)).clone(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessInterfaceTDDAntennaGain.setStatus('current')
if mibBuilder.loadTexts: wirelessInterfaceTDDAntennaGain.setDescription('Antenna Gain\n\t\tDevice Allocation: AP, SM')
wirelessInterfaceTDDRatio = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ValueRangeConstraint(3, 3), ValueRangeConstraint(4, 4), )).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessInterfaceTDDRatio.setStatus('current')
if mibBuilder.loadTexts: wirelessInterfaceTDDRatio.setDescription('DL/UL Ratio: \n\t\t\t1 - 75/25,\n\t\t\t2 - 50/50,\n\t\t\t3 - 30/70,\n\t\t\t4 - Flexible\n\t\tDevice Allocation: AP')
wirelessInterfaceTPCTRL = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 2, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-80, -40)).clone(-60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessInterfaceTPCTRL.setStatus('current')
if mibBuilder.loadTexts: wirelessInterfaceTPCTRL.setDescription('Set/get target receive level (TRL)\n\t\tDevice Allocation: AP')
wirelessInterfaceTPCMode = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 2, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), )).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessInterfaceTPCMode.setStatus('obsolete')
if mibBuilder.loadTexts: wirelessInterfaceTPCMode.setDescription('Power mode selection.\n\t\tValues:0 - Disable, 1 - Open Loop, 2 - Close Loop\n\t\tWhen system is in Fixed mode (75/35, 50/50, 30/70), this parameter can only be Close or Open Loop.\n\t\tWhen system is in Flexible mode, this parameter can be either Close Loop, Open Loop or Disable.\n\t\tThe default TPC mode is Close Loop.\n\t\tDevice Allocation: AP')
wirelessInterfacePTPMode = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), )).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessInterfacePTPMode.setStatus('current')
if mibBuilder.loadTexts: wirelessInterfacePTPMode.setDescription('PTP Setting\n\t\t\t0 - Off\n\t\t\t1 - Connect First SM,\n\t\t\t2 - MAC Address Limited\n\t\tDevice Allocation: AP')
wirelessInterfacePTPMACAddress = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 2, 13), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(11, 17), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessInterfacePTPMACAddress.setStatus('current')
if mibBuilder.loadTexts: wirelessInterfacePTPMACAddress.setDescription('PTP MAC Address\n\t\tDevice Allocation: AP')
wirelessInterfaceSyncSource = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 2, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ValueRangeConstraint(3, 3), ValueRangeConstraint(4, 4), )).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessInterfaceSyncSource.setStatus('current')
if mibBuilder.loadTexts: wirelessInterfaceSyncSource.setDescription('1PPS Sync Source\n\t\t\t1 - GPS,\n\t\t\t2 - CMM4,\n\t\t\t3 - Internal Free Run,\n\t\t\t4 - CMM3\n\t\tDevice Allocation: AP')
wirelessInterfaceSyncHoldTime = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 2, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20, 864000)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessInterfaceSyncHoldTime.setStatus('current')
if mibBuilder.loadTexts: wirelessInterfaceSyncHoldTime.setDescription('GPS Sync Hold Time in seconds\n\t\tDevice Allocation: AP')
wirelessInterfaceScanFrequencyListTwenty = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 2, 16), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(1, 1064), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessInterfaceScanFrequencyListTwenty.setStatus('current')
if mibBuilder.loadTexts: wirelessInterfaceScanFrequencyListTwenty.setDescription('Scan Frequency List for 20 MHz\n\t\tDevice Allocation: SM')
wirelessInterfaceScanFrequencyListForty = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 2, 17), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(1, 1064), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessInterfaceScanFrequencyListForty.setStatus('current')
if mibBuilder.loadTexts: wirelessInterfaceScanFrequencyListForty.setDescription('Scan Frequency List for 40 MHz\n\t\tDevice Allocation: SM')
centerFrequency = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 2, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(2407, 5970), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: centerFrequency.setStatus('current')
if mibBuilder.loadTexts: centerFrequency.setDescription('Per freq band: 5725 GHz for 5G SKU, 2407 for 2.4G SKU\n\t\tDevice Allocation: AP')
dfsAlternative1CenterFrequency = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 2, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(2407, 5970), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dfsAlternative1CenterFrequency.setStatus('current')
if mibBuilder.loadTexts: dfsAlternative1CenterFrequency.setDescription('Per freq band\n\t\tDevice Allocation: AP')
dfsAlternative2CenterFrequency = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 2, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(2407, 5970), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dfsAlternative2CenterFrequency.setStatus('current')
if mibBuilder.loadTexts: dfsAlternative2CenterFrequency.setDescription('Per freq band\n\t\tDevice Allocation: AP')
wirelessMaximumCellSize = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 2, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessMaximumCellSize.setStatus('current')
if mibBuilder.loadTexts: wirelessMaximumCellSize.setDescription('Maximum Cell Size in units\n\t\twirelessCellSizeUnit defines the unit type: \n\t\t\t1 - Miles \n\t\t\t2 - Kilometers\n\t\tDevice Allocation: AP')
wirelessCellSizeUnit = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 2, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessCellSizeUnit.setStatus('current')
if mibBuilder.loadTexts: wirelessCellSizeUnit.setDescription('Maximum Cell Size units:\n\t\t\t1 - Miles\n\t\t\t2 - Kilometers\n\t\tDevice Allocation: AP')
wirelessMaximumSTA = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 2, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 120), )).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessMaximumSTA.setStatus('current')
if mibBuilder.loadTexts: wirelessMaximumSTA.setDescription('Maximum Number of SM\n\t\tDevice Allocation: AP')
wirelessRadiusTimeout = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessRadiusTimeout.setStatus('current')
if mibBuilder.loadTexts: wirelessRadiusTimeout.setDescription('RADIUS server response timeout\n\t\tDevice Allocation: AP')
wirelessRadiusRetry = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessRadiusRetry.setStatus('current')
if mibBuilder.loadTexts: wirelessRadiusRetry.setDescription('RADIUS server retry\n\t\tDevice Allocation: AP')
wirelessRadiusGUIUserAuth = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessRadiusGUIUserAuth.setStatus('current')
if mibBuilder.loadTexts: wirelessRadiusGUIUserAuth.setDescription('SM GUI User Authentication Option\n\t\t\t0 - Device Local Only\n\t\t\t1 - Remote RADIUS Server Only\n\t\t\t2 - Remote RADIUS Server and Fallback to Local\n\t\tDevice Allocation: AP')
wirelessRadiusCurrentGUIUserAuth = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessRadiusCurrentGUIUserAuth.setStatus('current')
if mibBuilder.loadTexts: wirelessRadiusCurrentGUIUserAuth.setDescription('Current GUI User Authentication Option\n\t\t\t0 - Device Local Only\n\t\t\t1 - Remote RADIUS Server Only\n\t\t\t2 - Remote RADIUS Server and Fallback to Local\n\t\tDevice Allocation: SM')
wirelessRadiusSeverInfo = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 5, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessRadiusSeverInfo.setStatus('current')
if mibBuilder.loadTexts: wirelessRadiusSeverInfo.setDescription('RADIUS server info\n\t\tDevice Allocation: SM')
wirelessRadiusIdentityStr = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 5, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128)).clone('anonymous')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessRadiusIdentityStr.setStatus('current')
if mibBuilder.loadTexts: wirelessRadiusIdentityStr.setDescription('Authentication Identity String\n\t\tDevice Allocation: SM')
wirelessRadiusIdentityRealm = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 5, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128)).clone('cambiumnetworks.com')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessRadiusIdentityRealm.setStatus('current')
if mibBuilder.loadTexts: wirelessRadiusIdentityRealm.setDescription('Authentication Identity Realm\n\t\tDevice Allocation: SM')
wirelessRadiusUsername = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 5, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128)).clone('cambium-station')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessRadiusUsername.setStatus('current')
if mibBuilder.loadTexts: wirelessRadiusUsername.setDescription('Authentication Username\n\t\tDevice Allocation: SM')
wirelessRadiusPassword = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 5, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128)).clone('cambium')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessRadiusPassword.setStatus('current')
if mibBuilder.loadTexts: wirelessRadiusPassword.setDescription('Authentication Password\n\t\tDevice Allocation: SM')
useMACAddressAsWirelessRadiusUsername = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 5, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: useMACAddressAsWirelessRadiusUsername.setStatus('current')
if mibBuilder.loadTexts: useMACAddressAsWirelessRadiusUsername.setDescription("For using an Ethernet MAC address instead of RADIUS username\n\t\t0 - Off (default),\n\t\t1 - using ':' as format,\n\t\t2 - using '-' as format\n\t\tDevice Allocation: SM")
wirelessRadiusServerTable = MibTable((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 6, 1), )
if mibBuilder.loadTexts: wirelessRadiusServerTable.setStatus('current')
if mibBuilder.loadTexts: wirelessRadiusServerTable.setDescription('RADIUS servers table\n\t\t\tDevice Allocation: AP')
wirelessRadiusServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 6, 1, 1), ).setIndexNames((0, "CAMBIUM-PMP80211-MIB", "wirelessRadiusServerIndex"))
if mibBuilder.loadTexts: wirelessRadiusServerEntry.setStatus('current')
if mibBuilder.loadTexts: wirelessRadiusServerEntry.setDescription('RADIUS servers table entry\n\t\t\tDevice Allocation: AP')
wirelessRadiusServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessRadiusServerIndex.setStatus('current')
if mibBuilder.loadTexts: wirelessRadiusServerIndex.setDescription('RADIUS servers limiting number\n\t\t\tDevice Allocation: AP')
wirelessRadiusServerIP = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 6, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessRadiusServerIP.setStatus('current')
if mibBuilder.loadTexts: wirelessRadiusServerIP.setDescription('RADIUS server IP address\n\t\t\tDevice Allocation: AP')
wirelessRadiusServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1812)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessRadiusServerPort.setStatus('current')
if mibBuilder.loadTexts: wirelessRadiusServerPort.setDescription('RADIUS server port\n\t\t\tDevice Allocation: AP')
wirelessRadiusServerSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 6, 1, 1, 4), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(1, 128), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessRadiusServerSecret.setStatus('current')
if mibBuilder.loadTexts: wirelessRadiusServerSecret.setDescription('RADIUS server port\n\t\t\tDevice Allocation: AP')
wirelessRadiusDefaultCertificate = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 8, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8192))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessRadiusDefaultCertificate.setStatus('current')
if mibBuilder.loadTexts: wirelessRadiusDefaultCertificate.setDescription('Default RADIUS certificate\n\t\t\tDevice Allocation: SM')
wirelessRadiusUser1Certificate = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 8, 2), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(1, 8192), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessRadiusUser1Certificate.setStatus('current')
if mibBuilder.loadTexts: wirelessRadiusUser1Certificate.setDescription('Default RADIUS certificate\n\t\t\tDevice Allocation: SM')
wirelessRadiusUser2Certificate = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 8, 3), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(1, 8192), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessRadiusUser2Certificate.setStatus('current')
if mibBuilder.loadTexts: wirelessRadiusUser2Certificate.setDescription('Default RADIUS certificate\n\t\t\tDevice Allocation: SM')
wirelessRadiusUseDefaultCertificate = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 8, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), )).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessRadiusUseDefaultCertificate.setStatus('current')
if mibBuilder.loadTexts: wirelessRadiusUseDefaultCertificate.setDescription('RADIUS default certificate use\n\t\t\tDevice Allocation: SM')
wirelessRadiusPMP320Certificate = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 9, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8192))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessRadiusPMP320Certificate.setStatus('current')
if mibBuilder.loadTexts: wirelessRadiusPMP320Certificate.setDescription('PMP320 RADIUS certificate\n\t\t\tDevice Allocation: SM')
wirelessRadiusUsePMP320Certificate = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 9, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), )).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessRadiusUsePMP320Certificate.setStatus('current')
if mibBuilder.loadTexts: wirelessRadiusUsePMP320Certificate.setDescription('RADIUS PMP320 certificate use\n\t\t\tDevice Allocation: SM')
wirelessRadiusPMP450Certificate = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 9, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8192))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessRadiusPMP450Certificate.setStatus('current')
if mibBuilder.loadTexts: wirelessRadiusPMP450Certificate.setDescription('PMP450 RADIUS certificate\n\t\t\tDevice Allocation: SM')
wirelessRadiusUsePMP450Certificate = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 9, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), )).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessRadiusUsePMP450Certificate.setStatus('current')
if mibBuilder.loadTexts: wirelessRadiusUsePMP450Certificate.setDescription('RADIUS PMP450 certificate use\n\t\t\tDevice Allocation: SM')
wirelessRadiusUseDefCertificate = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), )).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessRadiusUseDefCertificate.setStatus('obsolete')
if mibBuilder.loadTexts: wirelessRadiusUseDefCertificate.setDescription('RADIUS default certificate use\n\t\t\tDevice Allocation: SM')
wirelessRadiusUser1CertificateName = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 7, 2, 1), DisplayString().clone('cert2')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessRadiusUser1CertificateName.setStatus('obsolete')
if mibBuilder.loadTexts: wirelessRadiusUser1CertificateName.setDescription('First user RADIUS certificate name\n\t\t\tDevice Allocation: AP')
wirelessRadiusUser2CertificateName = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 7, 3, 1), DisplayString().clone('cert3')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessRadiusUser2CertificateName.setStatus('obsolete')
if mibBuilder.loadTexts: wirelessRadiusUser2CertificateName.setDescription('Second user RADIUS certificate name\n\t\t\tDevice Allocation: AP')
wirelessRadiusDefCertificateView = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 7, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessRadiusDefCertificateView.setStatus('obsolete')
if mibBuilder.loadTexts: wirelessRadiusDefCertificateView.setDescription('RADIUS default certificate view\n\t\t\tDevice Allocation: AP')
wirelessRadiusUser1CertificateView = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 7, 2, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessRadiusUser1CertificateView.setStatus('obsolete')
if mibBuilder.loadTexts: wirelessRadiusUser1CertificateView.setDescription('First user RADIUS certificate view\n\t\t\tDevice Allocation: AP')
wirelessRadiusUser2CertificateView = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 7, 3, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessRadiusUser2CertificateView.setStatus('obsolete')
if mibBuilder.loadTexts: wirelessRadiusUser2CertificateView.setDescription('Second user RADIUS certificate view\n\t\t\tDevice Allocation: AP')
dfsAlternative1Bandwidth = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 2, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ValueRangeConstraint(3, 3), ValueRangeConstraint(4, 4), )).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dfsAlternative1Bandwidth.setStatus('current')
if mibBuilder.loadTexts: dfsAlternative1Bandwidth.setDescription('Frequency Bandwidth\n\t\t\t1 - 20Mhz, \n\t\t\t2 - 40Mhz, \n\t\t\t3 - 10Mhz, \n\t\t\t4 - 5Mhz, \n\t\tDevice Allocation: AP')
dfsAlternative2Bandwidth = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 2, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ValueRangeConstraint(3, 3), ValueRangeConstraint(4, 4), )).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dfsAlternative2Bandwidth.setStatus('current')
if mibBuilder.loadTexts: dfsAlternative2Bandwidth.setDescription('Frequency Bandwidth\n\t\t\t1 - 20Mhz, \n\t\t\t2 - 40Mhz, \n\t\t\t3 - 10Mhz, \n\t\t\t4 - 5Mhz, \n\t\tDevice Allocation: AP')
wirelessAcceptableAPRSSIThreshold = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 2, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, -20)).clone(-90)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessAcceptableAPRSSIThreshold.setStatus('current')
if mibBuilder.loadTexts: wirelessAcceptableAPRSSIThreshold.setDescription('AP RSSI Threshold\n\t\tDevice Allocation: SM')
wirelessAcceptableAPCINRThreshold = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 2, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-5, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessAcceptableAPCINRThreshold.setStatus('obsolete')
if mibBuilder.loadTexts: wirelessAcceptableAPCINRThreshold.setDescription('AP CINR Threshold\n\t\tDevice Allocation: SM')
wirelessInterfaceUnblockUSfreqs = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 2, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessInterfaceUnblockUSfreqs.setStatus('obsolete')
if mibBuilder.loadTexts: wirelessInterfaceUnblockUSfreqs.setDescription('Block US 5.2 and 5.4 bands\n\t\t5.2 and 5.4 bands are blocked until DFS certification is acheived\n\t\tDevice Allocation: AP, SM')
wirelessMIREnable = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 2, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessMIREnable.setStatus('current')
if mibBuilder.loadTexts: wirelessMIREnable.setDescription('Maximum Information Rate (MIR) Limiting:\n\t\t\t0 - Disable,\n\t\t\t1 - Enable\n\t\tDevice Allocation: AP')
wirelessMIRSTAProfileNumber = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 2, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessMIRSTAProfileNumber.setStatus('current')
if mibBuilder.loadTexts: wirelessMIRSTAProfileNumber.setDescription('Maximum Information Rate (MIR) Limiting Profile Number on SM\n\t\tDevice Allocation: SM')
wirelessMIRAPDefaultProfileNumber = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 2, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessMIRAPDefaultProfileNumber.setStatus('current')
if mibBuilder.loadTexts: wirelessMIRAPDefaultProfileNumber.setDescription('Maximum Information Rate (MIR) Limiting Default Profile number on AP\n\t\tThis Profile Number will be used by AP is SM provides improper profile\n\t\tDevice Allocation: AP')
wirelessMIRProfileTable = MibTable((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 4, 1), )
if mibBuilder.loadTexts: wirelessMIRProfileTable.setStatus('current')
if mibBuilder.loadTexts: wirelessMIRProfileTable.setDescription('Maximum Information Rate (MIR) Limiting profile Table\n\t\tDevice Allocation: AP')
wirelessMIRProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 4, 1, 1), ).setIndexNames((0, "CAMBIUM-PMP80211-MIB", "wirelessMIRProfileIndex"))
if mibBuilder.loadTexts: wirelessMIRProfileEntry.setStatus('current')
if mibBuilder.loadTexts: wirelessMIRProfileEntry.setDescription('Maximum Information Rate (MIR) Limiting profile Table Entry\n\t\tDevice Allocation: AP')
wirelessMIRProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessMIRProfileIndex.setStatus('current')
if mibBuilder.loadTexts: wirelessMIRProfileIndex.setDescription('Maximum Information Rate (MIR) Limiting profile Number\n\t\tDevice Allocation: AP')
wirelessMIRProfileNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessMIRProfileNumber.setStatus('current')
if mibBuilder.loadTexts: wirelessMIRProfileNumber.setDescription('Number of MIR profile\n\t\tDevice Allocation: AP')
wirelessMIRProfileDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 4, 1, 1, 3), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(1, 128), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessMIRProfileDescription.setStatus('current')
if mibBuilder.loadTexts: wirelessMIRProfileDescription.setDescription('MIR profile description\n\t\tDevice Allocation: AP')
wirelessDLMIR = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessDLMIR.setStatus('current')
if mibBuilder.loadTexts: wirelessDLMIR.setDescription('DL MIR in kilobits per second\n\t\tDevice Allocation: AP')
wirelessULMIR = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessULMIR.setStatus('current')
if mibBuilder.loadTexts: wirelessULMIR.setDescription('UL MIR in kilobits per second\n\t\tDevice Allocation: AP')
wirelessInterfaceScanFrequencyBandwidth = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 2, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessInterfaceScanFrequencyBandwidth.setStatus('current')
if mibBuilder.loadTexts: wirelessInterfaceScanFrequencyBandwidth.setDescription('Frequency Bandwidth as bitmask, fields are:\n\t\t\t1 - 20Mhz, \n\t\t\t2 - 40Mhz, \n\t\t\t4 - 10Mhz, \n\t\t\t8 - 5Mhz\n\t\tDevice Allocation: SM')
wirelessInterfaceGuardInterval = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 2, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), )).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessInterfaceGuardInterval.setStatus('current')
if mibBuilder.loadTexts: wirelessInterfaceGuardInterval.setDescription('Guard Interval:\n\t\t\t1 - Long GuardInterval,\n\t\t\t2 - Short GuardInterval\n\t\tDevice Allocation: AP')
wirelessInterfaceiFreqReuseMode = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 2, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessInterfaceiFreqReuseMode.setStatus('current')
if mibBuilder.loadTexts: wirelessInterfaceiFreqReuseMode.setDescription('Frequency Reuse Mode:\n\t\t\t0 - Off,\n\t\t\t1 - Frequency-Reuse-Front,\n\t\t\t2 - Frequency-Reuse-Back\n\t\tDevice Allocation: AP')
wirelessSTAPriority = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 2, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessSTAPriority.setStatus('current')
if mibBuilder.loadTexts: wirelessSTAPriority.setDescription('SM priority value:\n\t\t\t0 - Normal,\n\t\t\t1 - High,\n\t\t\t2 - Low\n\t\tDevice Allocation: SM')
wirelessSmoothingBit = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 2, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessSmoothingBit.setStatus('obsolete')
if mibBuilder.loadTexts: wirelessSmoothingBit.setDescription('Smoothing Bit values:\n\t\t\t0 - Bit is cleared, smoothing is off,\n\t\t\t1 - Bit is set, smoothing is on\n\t\tDevice Allocation: AP')
wirelessSecurityMethod = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 2, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessSecurityMethod.setStatus('current')
if mibBuilder.loadTexts: wirelessSecurityMethod.setDescription('Allowed types of authentications on SM side\n\t\t\t\t(Preferred AP list is not set)\n\t\t\t\tUse bitmask to enable pereferred methods, 0 - means enable method:\n\t\t\t\tset 0-th bit to 0 - Open method (110b)\n\t\t\t\tset 1-st bit to 0 - WPA2 method (101b)\n\t\t\t\tset 2-nd bit to 0 - EAP-TTLS method (011b)\n\t\t\t\t0x00 - All enabled')
wirelessAcceptableAPSNRThreshold = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 2, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-5, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessAcceptableAPSNRThreshold.setStatus('current')
if mibBuilder.loadTexts: wirelessAcceptableAPSNRThreshold.setDescription('AP CINR Threshold\n\t\tDevice Allocation: SM')
wirelessMgmtPacketRate = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 2, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), )).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessMgmtPacketRate.setStatus('current')
if mibBuilder.loadTexts: wirelessMgmtPacketRate.setDescription('Management rate:\n\t\t\t0 - MCS0\n\t\t\t1 - MCS1\n\t\tDevice Allocation: AP')
wirelessStaIsolate = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 2, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessStaIsolate.setStatus('current')
if mibBuilder.loadTexts: wirelessStaIsolate.setDescription('Enables or disables bridging within the AP driver\n\t\tbetween SMs.\n\t\t\t0 - Disabled\n\t\t\t1 - Enabled\n\t\tDevice Allocation: AP')
wirelessCcaEnable = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 2, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessCcaEnable.setStatus('current')
if mibBuilder.loadTexts: wirelessCcaEnable.setDescription('Clear Channel Assignment:\n\t\t\t0 - Disable\n\t\t\t1 - Enable\n\t\tDevice Allocation: AP')
wirelessInterfaceScanFrequencyListTen = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 2, 42), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(1, 1064), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessInterfaceScanFrequencyListTen.setStatus('current')
if mibBuilder.loadTexts: wirelessInterfaceScanFrequencyListTen.setDescription('Scan Frequency List for 10MHz\n\t\tDevice Allocation: SM')
wirelessInterfaceScanFrequencyListFive = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 2, 43), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(1, 1064), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessInterfaceScanFrequencyListFive.setStatus('current')
if mibBuilder.loadTexts: wirelessInterfaceScanFrequencyListFive.setDescription('Scan Frequency List for 5MHz\n\t\tDevice Allocation: SM')
wirelessMulticastEnhanceMode = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 2, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(3, 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessMulticastEnhanceMode.setStatus('current')
if mibBuilder.loadTexts: wirelessMulticastEnhanceMode.setDescription('Multicast enhancement mode \n\t\t\t0 - Disabled\n\t\t\t3 - IGMP Snooping + MC Passthru\n\t\tDevice Allocation: AP')
wirelessTXPowerManualLimit = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 2, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessTXPowerManualLimit.setStatus('current')
if mibBuilder.loadTexts: wirelessTXPowerManualLimit.setDescription('Allow user to limit MAX output TX Power\n\t\tDevice Allocation: SM')
wirelessRateMaxMCS = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 2, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessRateMaxMCS.setStatus('current')
if mibBuilder.loadTexts: wirelessRateMaxMCS.setDescription('Allow user to set MAX TX rate\n\t\tNot allowed for SNMP processing\n\t\tDevice Allocation: AP, SM')
wirelessSMWifiDistance = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 2, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessSMWifiDistance.setStatus('current')
if mibBuilder.loadTexts: wirelessSMWifiDistance.setDescription('Distance to AP for SM in Standard Wi-Fi mode\n\t\twirelessCellSizeUnitdefines the unit type:\n\t\t\t1 - Miles\n\t\t\t2 - Kilometers\n\t\tDevice Allocation: SM')
wirelessInterfaceProtocolMode = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 2, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ValueRangeConstraint(3, 3), ValueRangeConstraint(4, 4), )).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessInterfaceProtocolMode.setStatus('current')
if mibBuilder.loadTexts: wirelessInterfaceProtocolMode.setDescription('Protocol Module Mode:\n\t\t   1 - TDD\n\t\t   2 - AP/SM WiFi\n\t\t   3 - PTP.LL\n\t\t   4 - TDD PTP\n\t   Device Allocation: AP/SM')
forceMcastBcast4Addr = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 2, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), )).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: forceMcastBcast4Addr.setStatus('current')
if mibBuilder.loadTexts: forceMcastBcast4Addr.setDescription('1 - TRUE\n\t\t0 - FALSE')
wirelessInterfaceRateMinMCS = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 2, 55), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessInterfaceRateMinMCS.setStatus('current')
if mibBuilder.loadTexts: wirelessInterfaceRateMinMCS.setDescription('Minimum locked MCS rate.\n\t\tDefault allocation: AP, SM.')
wirelessInterfaceRateMaxMCS = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 2, 56), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessInterfaceRateMaxMCS.setStatus('current')
if mibBuilder.loadTexts: wirelessInterfaceRateMaxMCS.setDescription('Maximum locked MCS rate.\n        Default allocation: AP, SM.')
wirelessMulticastIgmpFastLeave = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 2, 57), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessMulticastIgmpFastLeave.setStatus('current')
if mibBuilder.loadTexts: wirelessMulticastIgmpFastLeave.setDescription('Multicast enhancement mode \n            0 - IGMP Fast Leave OFF\n            1 - IGMP Fast Leave ON\n        Device Allocation: AP')
wirelessInterfaceTDDFrameSize = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 2, 58), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2500, 2500), ValueRangeConstraint(5000, 5000), )).clone(5000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessInterfaceTDDFrameSize.setStatus('current')
if mibBuilder.loadTexts: wirelessInterfaceTDDFrameSize.setDescription('TDD Frame Duration in microseconds\n\t\t\t2500 - 2.5 ms\n\t\t\t5000 - 5 ms\n\t\tDevice Allocation: AP')
wirelessInterfaceColocState = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 2, 59), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessInterfaceColocState.setStatus('current')
if mibBuilder.loadTexts: wirelessInterfaceColocState.setDescription('Co-location state\n\t\t\t0 - disabled\n\t\t\t1 - FSK co-location\n\t\tDevice Allocation: AP')
wirelessInterfaceColocSystemSyncSrc = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 2, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ValueRangeConstraint(4, 4), )).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessInterfaceColocSystemSyncSrc.setStatus('current')
if mibBuilder.loadTexts: wirelessInterfaceColocSystemSyncSrc.setDescription('Co-location state\n\t\t\t1 - GPS,\n\t\t\t2 - CMM4,\n\t\t\t4 - CMM3\n\t\tDevice Allocation: AP')
wirelessAPWifiWLANmode = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 2, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessAPWifiWLANmode.setStatus('current')
if mibBuilder.loadTexts: wirelessAPWifiWLANmode.setDescription('AP Wi-Fi WLAN mode (short, 1000m operational distance)\n                        0 - Disabled,\n                        1 - Enabled\n                Device Allocation: AP')
apWiFiDLCTSMode = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 2, 62), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), )).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWiFiDLCTSMode.setStatus('current')
if mibBuilder.loadTexts: apWiFiDLCTSMode.setDescription('Force AP WiFi to enable Self CTS\n                        0 - Disabled,\n                        1 - Enabled\n                Device Allocation: AP')
apWiFiULCTSRTSMode = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 2, 63), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), )).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWiFiULCTSRTSMode.setStatus('current')
if mibBuilder.loadTexts: apWiFiULCTSRTSMode.setDescription('Force AP WiFi to add ERP IE to the Beacon\n                        0 - Disabled,\n                        1 - Enabled\n                Device Allocation: AP')
apWiFiRTSThreshold = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 2, 64), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2346)).clone(2346)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWiFiRTSThreshold.setStatus('current')
if mibBuilder.loadTexts: apWiFiRTSThreshold.setDescription('Wi-Fi interface RTS Threshold\n                Device Allocation: AP, SM')
wirelessMACFilter = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 2, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessMACFilter.setStatus('current')
if mibBuilder.loadTexts: wirelessMACFilter.setDescription('Enable/Disable MAC list filter\n\t\t\t0 - Disabled,\n\t\t\t1 - Enabled\n\t\tDevice Allocation: AP')
wirelessMACFilterPolicy = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 2, 71), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), )).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessMACFilterPolicy.setStatus('current')
if mibBuilder.loadTexts: wirelessMACFilterPolicy.setDescription('Permit/Prevent policy for MAC list\n\t\t\t1 - Prevent\n\t\t\t2 - Permit\n\t\tDevice Allocation: AP')
wirelessMACFilterTable = MibTable((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 2, 72), )
if mibBuilder.loadTexts: wirelessMACFilterTable.setStatus('current')
if mibBuilder.loadTexts: wirelessMACFilterTable.setDescription('Table for MAC filter list\n\t\tDevice Allocation: AP')
wirelessMACFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 2, 72, 1), ).setIndexNames((0, "CAMBIUM-PMP80211-MIB", "wirelessMACFilterIndex"))
if mibBuilder.loadTexts: wirelessMACFilterEntry.setStatus('current')
if mibBuilder.loadTexts: wirelessMACFilterEntry.setDescription('L2 ACL Table Entry\n\t\tDevice Allocation: AP')
wirelessMACFilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 2, 72, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessMACFilterIndex.setStatus('current')
if mibBuilder.loadTexts: wirelessMACFilterIndex.setDescription('MAC filter list table Index(equal max STA)\n\t\tTable Entry is cleared if Index is set to zero\n\t\tDevice Allocation: AP')
wirelessFilterMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 2, 72, 1, 2), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(1, 128), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessFilterMAC.setStatus('current')
if mibBuilder.loadTexts: wirelessFilterMAC.setDescription('MAC of SM for filter table\n\t\tDevice Allocation: AP')
wirelessFilterInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 2, 72, 1, 3), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(1, 128), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessFilterInfo.setStatus('current')
if mibBuilder.loadTexts: wirelessFilterInfo.setDescription('Description for MAC in the filter table\n\t\tDevice Allocation: AP')
l2FirewallEnable = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l2FirewallEnable.setStatus('current')
if mibBuilder.loadTexts: l2FirewallEnable.setDescription('L2 ACL Status Flag: \n\t\t\t0 - Disable, \n\t\t\t1 - Enable.\n\t\tDevice Allocation: AP, SM')
l2FirewallTable = MibTable((1, 3, 6, 1, 4, 1, 17713, 21, 3, 9, 2), )
if mibBuilder.loadTexts: l2FirewallTable.setStatus('current')
if mibBuilder.loadTexts: l2FirewallTable.setDescription('Table for L2 ACL\n\t\tDevice Allocation: AP, SM')
l2FirewallEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17713, 21, 3, 9, 2, 1), ).setIndexNames((0, "CAMBIUM-PMP80211-MIB", "l2FirewallEntryIndex"))
if mibBuilder.loadTexts: l2FirewallEntry.setStatus('current')
if mibBuilder.loadTexts: l2FirewallEntry.setDescription('L2 ACL Table Entry\n\t\tDevice Allocation: AP, SM')
l2FirewallEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 9, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l2FirewallEntryIndex.setStatus('current')
if mibBuilder.loadTexts: l2FirewallEntryIndex.setDescription('L2 Firewall Table Index\n\t\tTable Entry is cleared if Index is set to zero\n\t\tDevice Allocation: AP, SM')
l2FirewallEntryName = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 9, 2, 1, 2), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(1, 128), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l2FirewallEntryName.setStatus('current')
if mibBuilder.loadTexts: l2FirewallEntryName.setDescription('L2 ACL Rule Name.\n\t\tDevice Allocation: AP, SM')
l2FirewallEntryAction = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 9, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l2FirewallEntryAction.setStatus('current')
if mibBuilder.loadTexts: l2FirewallEntryAction.setDescription('Action:\n\t\t\t0 - Reject, \n\t\t\t1 - Permit.\n\t\tDevice Allocation: AP, SM')
l2FirewallEntryInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 9, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l2FirewallEntryInterface.setStatus('current')
if mibBuilder.loadTexts: l2FirewallEntryInterface.setDescription('Interface:\n\t\t\t1 - WAN, \n\t\t\t2 - LAN.\n\t\tDevice Allocation: AP, SM')
l2FirewallEntryLog = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 9, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l2FirewallEntryLog.setStatus('current')
if mibBuilder.loadTexts: l2FirewallEntryLog.setDescription('Log:\n\t\t\t1 - On, \n\t\t\t0 - Off.\n\t\tDevice Allocation: AP, SM')
l2FirewallEntryEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 9, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l2FirewallEntryEtherType.setStatus('current')
if mibBuilder.loadTexts: l2FirewallEntryEtherType.setDescription('L2 ACL Ethernet type: 0000-ffff\n\t\tDevice Allocation: AP, SM')
l2FirewallEntryVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 9, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4094), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l2FirewallEntryVlanID.setStatus('current')
if mibBuilder.loadTexts: l2FirewallEntryVlanID.setDescription('L2 ACL Vlan ID\n\t\tDevice Allocation: AP, SM')
l2FirewallEntrySrcMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 9, 2, 1, 8), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(11, 17), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l2FirewallEntrySrcMAC.setStatus('current')
if mibBuilder.loadTexts: l2FirewallEntrySrcMAC.setDescription('L2 ACL Source MAC Address\n\t\tDevice Allocation: AP, SM')
l2FirewallEntrySrcMask = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 9, 2, 1, 9), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(11, 17), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l2FirewallEntrySrcMask.setStatus('current')
if mibBuilder.loadTexts: l2FirewallEntrySrcMask.setDescription('L2 ACL Source MAC Address Mask\n\t\tDevice Allocation: AP, SM')
l2FirewallEntryDstMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 9, 2, 1, 10), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(11, 17), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l2FirewallEntryDstMAC.setStatus('current')
if mibBuilder.loadTexts: l2FirewallEntryDstMAC.setDescription('L2 ACL Destination MAC Address\n\t\tDevice Allocation: AP, SM')
l2FirewallEntryDstMask = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 9, 2, 1, 11), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(11, 17), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l2FirewallEntryDstMask.setStatus('current')
if mibBuilder.loadTexts: l2FirewallEntryDstMask.setDescription('L2 ACL Destination MAC Address Mask\n\t\tDevice Allocation: AP, SM')
l2WanRemoteAccess = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 9, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l2WanRemoteAccess.setStatus('current')
if mibBuilder.loadTexts: l2WanRemoteAccess.setDescription('Remote Access To AP Through Wan:\n\t\t\t0 - Decline, \n\t\t\t1 - Allow\n\t\tDevice Allocation: AP, SM')
l2SnmpLanRemoteAccess = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 9, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), )).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l2SnmpLanRemoteAccess.setStatus('current')
if mibBuilder.loadTexts: l2SnmpLanRemoteAccess.setDescription('SNMP access from LAN:\n\t\t\t0 - Decline, \n\t\t\t1 - Allow\n\t\tDevice Allocation: AP, SM')
l2DHCPServersBelowSTA = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 9, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l2DHCPServersBelowSTA.setStatus('current')
if mibBuilder.loadTexts: l2DHCPServersBelowSTA.setDescription('Allow DHCP Servers Below SM:\n\t\t\t0 - Decline, \n\t\t\t1 - Allow\n\t\tDevice Allocation: SM')
l2LanRemoteAccess = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 9, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l2LanRemoteAccess.setStatus('current')
if mibBuilder.loadTexts: l2LanRemoteAccess.setDescription('SM Management Access Through LAN:\n\t\t\t0 - Wireless Only,\n\t\t\t1 - Ethernet and Wireless\n\t\tDevice Allocation: SM')
l3FirewallEnable = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l3FirewallEnable.setStatus('current')
if mibBuilder.loadTexts: l3FirewallEnable.setDescription('L3 ACL Rule Status\n\t\t\t1 - Enable, \n\t\t\t0 - Disable\n\t\tDevice Allocation: AP, SM')
l3FirewallTable = MibTable((1, 3, 6, 1, 4, 1, 17713, 21, 3, 10, 2), )
if mibBuilder.loadTexts: l3FirewallTable.setStatus('current')
if mibBuilder.loadTexts: l3FirewallTable.setDescription('L3 Firewall Table\n\t\tDevice Allocation: AP, SM')
l3FirewallEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17713, 21, 3, 10, 2, 1), ).setIndexNames((0, "CAMBIUM-PMP80211-MIB", "l3FirewallEntryIndex"))
if mibBuilder.loadTexts: l3FirewallEntry.setStatus('current')
if mibBuilder.loadTexts: l3FirewallEntry.setDescription('L3 Firewall Table Entry\n\t\tDevice Allocation: AP, SM')
l3FirewallEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 10, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l3FirewallEntryIndex.setStatus('current')
if mibBuilder.loadTexts: l3FirewallEntryIndex.setDescription('L3 ACL Table Index\n\t\tTable Entry is cleared if Index is set to zero\n\t\tDevice Allocation: AP, SM')
l3FirewallEntryName = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 10, 2, 1, 2), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(1, 128), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l3FirewallEntryName.setStatus('current')
if mibBuilder.loadTexts: l3FirewallEntryName.setDescription('L3 ACL Rule Name\n\t\tDevice Allocation: AP, SM')
l3FirewallEntryAction = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 10, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l3FirewallEntryAction.setStatus('current')
if mibBuilder.loadTexts: l3FirewallEntryAction.setDescription('L3 ACL Rule Acrion\n\t\t\t0 - Reject, \n\t\t\t1 - Permit\n\t\tDevice Allocation: AP, SM')
l3FirewallEntryInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 10, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l3FirewallEntryInterface.setStatus('current')
if mibBuilder.loadTexts: l3FirewallEntryInterface.setDescription('L3 ACL Rule Interface\n\t\t\t1 - WAN, \n\t\t\t2 - LAN\n\t\tDevice Allocation: AP, SM')
l3FirewallEntryLog = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 10, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l3FirewallEntryLog.setStatus('current')
if mibBuilder.loadTexts: l3FirewallEntryLog.setDescription('L3 ACL Rule Log Flag\n\t\t\t1 - Rule Loggin is On, \n\t\t\t0 - Rule Logging is Off\n\t\tDevice Allocation: AP, SM')
l3FirewallEntryProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 10, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ValueRangeConstraint(3, 3), ValueRangeConstraint(4, 4), ValueRangeConstraint(5, 5), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l3FirewallEntryProtocol.setStatus('current')
if mibBuilder.loadTexts: l3FirewallEntryProtocol.setDescription('L3 ACL Rules IP Protocol\n\t\t\t1 - TCP, \n\t\t\t2 - UDP, \n\t\t\t3 - TCP+UDP, \n\t\t\t4 - ICMP, \n\t\t\t5 - IP\n\t\tDevice Allocation: AP, SM')
l3FirewallEntryPort = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 10, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l3FirewallEntryPort.setStatus('current')
if mibBuilder.loadTexts: l3FirewallEntryPort.setDescription('L3 ACL Rule Port\n\t\tDevice Allocation: AP, SM')
l3FirewallEntrySrcIP = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 10, 2, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l3FirewallEntrySrcIP.setStatus('current')
if mibBuilder.loadTexts: l3FirewallEntrySrcIP.setDescription('L3 ACL Rule Source IP Address\n\t\tDevice Allocation: AP, SM')
l3FirewallEntrySrcMask = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 10, 2, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l3FirewallEntrySrcMask.setStatus('current')
if mibBuilder.loadTexts: l3FirewallEntrySrcMask.setDescription('L3 ACL Rule Source Network Mask\n\t\tDevice Allocation: AP, SM')
l3FirewallEntryDstIP = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 10, 2, 1, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l3FirewallEntryDstIP.setStatus('current')
if mibBuilder.loadTexts: l3FirewallEntryDstIP.setDescription('L3 ACL Rule Destination IP Address\n\t\tDevice Allocation: AP, SM')
l3FirewallEntryDstMask = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 10, 2, 1, 11), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l3FirewallEntryDstMask.setStatus('current')
if mibBuilder.loadTexts: l3FirewallEntryDstMask.setDescription('L3 ACL Rule Destination Network Mask\n\t\tDevice Allocation: AP, SM')
l3FirewallEntryDSCP = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 10, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l3FirewallEntryDSCP.setStatus('current')
if mibBuilder.loadTexts: l3FirewallEntryDSCP.setDescription('L3 ACL Rule DSCP\n\t\tDevice Allocation: AP, SM')
l3FirewallEntryToS = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 10, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l3FirewallEntryToS.setStatus('current')
if mibBuilder.loadTexts: l3FirewallEntryToS.setDescription('L3 ACL Rule TOS\n\t\tDevice Allocation: AP, SM')
dmzEnable = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 12, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dmzEnable.setStatus('current')
if mibBuilder.loadTexts: dmzEnable.setDescription('Enable DMZ:\n\t\t\t1 - Enable, \n\t\t\t0 - Disable.\n\t\tDevice Allocation: SM')
dmzIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 12, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dmzIPAddress.setStatus('current')
if mibBuilder.loadTexts: dmzIPAddress.setDescription('DMZ IP Address.\n\t\tDevice Allocation: SM')
voipEnable = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voipEnable.setStatus('current')
if mibBuilder.loadTexts: voipEnable.setDescription('VoIP Enable:\n\t\t\t0 - disable, \n\t\t\t1 - enable\n\t\tDevice Allocation: AP, SM')
qosEnable = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 11, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosEnable.setStatus('current')
if mibBuilder.loadTexts: qosEnable.setDescription('Enable QoS:\n\t\t\t0 - disable, \n\t\t\t1 - enable\n\t\tDevice Allocation: AP, SM')
classificationListTable = MibTable((1, 3, 6, 1, 4, 1, 17713, 21, 3, 11, 3), )
if mibBuilder.loadTexts: classificationListTable.setStatus('current')
if mibBuilder.loadTexts: classificationListTable.setDescription('Quality of Service rules Table\n\t\tDevice Allocation: AP, SM')
mcPriority = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 11, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcPriority.setStatus('current')
if mibBuilder.loadTexts: mcPriority.setDescription('Multicast Priority:\n\t\t\t0 - low, \n\t\t\t1 - high\n\t\tDevice Allocation: AP, SM')
bcPriority = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 11, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bcPriority.setStatus('current')
if mibBuilder.loadTexts: bcPriority.setDescription('Broadcast Priority:\n\t\t\t0 - low, \n\t\t\t1 - high\n\t\tDevice Allocation: AP, SM')
classificationListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17713, 21, 3, 11, 3, 1), ).setIndexNames((0, "CAMBIUM-PMP80211-MIB", "classificationRuleIndex"))
if mibBuilder.loadTexts: classificationListEntry.setStatus('current')
if mibBuilder.loadTexts: classificationListEntry.setDescription('Quality of Service Rule Entry\n\t\tDevice Allocation: AP, SM')
classificationRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 11, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: classificationRuleIndex.setStatus('current')
if mibBuilder.loadTexts: classificationRuleIndex.setDescription('QoS Rule Table Index\n\t\tTable Entry is cleared if Index is set to zero\n\t\tDevice Allocation: AP, SM')
classificationRuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 11, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 9), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: classificationRuleType.setStatus('current')
if mibBuilder.loadTexts: classificationRuleType.setDescription('QoS Rule Type: \n\t\t\t1 - voip, \n\t\t\t2 - dscp, \n\t\t\t3 - cos, \n\t\t\t4 - vlanid, \n\t\t\t5 - ethertype, \n\t\t\t6 - ipv4, \n\t\t\t7 - mac, \n\t\t\t8 - broadcast, \n\t\t\t9 - multicast\n\t\tDevice Allocation: AP, SM')
classificationRuleValue = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 11, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: classificationRuleValue.setStatus('current')
if mibBuilder.loadTexts: classificationRuleValue.setDescription('QoS Rule Value. Qos rule value is valid only for dscp, cos, vlanid and ethertype Rule types\n\t\tDevice Allocation: AP, SM')
classificationRuleIP = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 11, 3, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: classificationRuleIP.setStatus('current')
if mibBuilder.loadTexts: classificationRuleIP.setDescription('QoS IP Address\n\t\tDevice Allocation: AP, SM')
classificationRuleMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 11, 3, 1, 5), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(17, 17), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: classificationRuleMAC.setStatus('current')
if mibBuilder.loadTexts: classificationRuleMAC.setDescription('QoS MAC Address\n\t\tDevice Allocation: AP, SM')
classificationRuleMask = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 11, 3, 1, 6), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(7, 17), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: classificationRuleMask.setStatus('current')
if mibBuilder.loadTexts: classificationRuleMask.setDescription('QoS Netmask\n\t\tDevice Allocation: AP, SM')
classificationRuleDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 11, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: classificationRuleDirection.setStatus('current')
if mibBuilder.loadTexts: classificationRuleDirection.setDescription('IP or MAC Rules direction: \n\t\t\t1 - Source, \n\t\t\t2 - Destination, \n\t\t\t3 - Either (or Both directions)\n\t\tDevice Allocation: AP, SM')
classificationRuleQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 11, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: classificationRuleQueue.setStatus('current')
if mibBuilder.loadTexts: classificationRuleQueue.setDescription('Rule Queue: \n\t\t\t1- Hight, \n\t\t\t2 - Low, \n\t\t\t3 - VoIP\n\t\tDevice Allocation: AP, SM')
portForwardingEntryEnable = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 13, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portForwardingEntryEnable.setStatus('current')
if mibBuilder.loadTexts: portForwardingEntryEnable.setDescription('Port Forwarding feature:\n\t\t\t0 - Disable, \n\t\t\t1 - Enable\n\t\tDevice Allocation: SM')
portForwardingTable = MibTable((1, 3, 6, 1, 4, 1, 17713, 21, 3, 13, 2), )
if mibBuilder.loadTexts: portForwardingTable.setStatus('current')
if mibBuilder.loadTexts: portForwardingTable.setDescription('Port Forwarding Rules Table\n\t\tDevice Allocation: SM')
portForwardingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17713, 21, 3, 13, 2, 1), ).setIndexNames((0, "CAMBIUM-PMP80211-MIB", "portForwardingTableEntryIndex"))
if mibBuilder.loadTexts: portForwardingEntry.setStatus('current')
if mibBuilder.loadTexts: portForwardingEntry.setDescription('Port Forwarding Table Rule Entry\n\t\tDevice Allocation: SM')
portForwardingTableEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 13, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portForwardingTableEntryIndex.setStatus('current')
if mibBuilder.loadTexts: portForwardingTableEntryIndex.setDescription('Port Forwarding Table Entry Index\n\t\tTable Entry is cleared if Index is set to zero\n\t\tDevice Allocation: SM')
portForwardingTableEntryProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 13, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ValueRangeConstraint(3, 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portForwardingTableEntryProtocol.setStatus('current')
if mibBuilder.loadTexts: portForwardingTableEntryProtocol.setDescription('Port Forwarding Table Entry Rule Protocol:\n\t\t\t0 - Clear Rule, \n\t\t\t1 - UDP, \n\t\t\t2 - TCP, \n\t\t\t3 - UDP+TCP\n\t\tDevice Allocation: SM')
portForwardingTableEntryWLANPortBegin = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 13, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portForwardingTableEntryWLANPortBegin.setStatus('current')
if mibBuilder.loadTexts: portForwardingTableEntryWLANPortBegin.setDescription('Port Forwarding WLAN Port Start number\n\t\tDevice Allocation: SM')
portForwardingTableEntryWLANPortEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 13, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portForwardingTableEntryWLANPortEnd.setStatus('current')
if mibBuilder.loadTexts: portForwardingTableEntryWLANPortEnd.setDescription('Port Forwarding WLAN Port End number\n\t\tDevice Allocation: SM')
portForwardingTableEntryLANIP = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 13, 2, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portForwardingTableEntryLANIP.setStatus('current')
if mibBuilder.loadTexts: portForwardingTableEntryLANIP.setDescription('Port Forwarding LAN IP Address\n\t\tDevice Allocation: SM')
portForwardingTableEntryWLANPortMappedBegin = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 13, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portForwardingTableEntryWLANPortMappedBegin.setStatus('current')
if mibBuilder.loadTexts: portForwardingTableEntryWLANPortMappedBegin.setDescription('Port Forwarding Mapped Port number\n\t\tDevice Allocation: SM')
portForwardingSepMangIPEntryEnable = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 13, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portForwardingSepMangIPEntryEnable.setStatus('current')
if mibBuilder.loadTexts: portForwardingSepMangIPEntryEnable.setDescription('SM Separate Management IP Port Forwarding feature:\n                        0 - Disable,\n                        1 - Enable\n                Device Allocation: SM')
portForwardingSepMangIPTable = MibTable((1, 3, 6, 1, 4, 1, 17713, 21, 3, 13, 4), )
if mibBuilder.loadTexts: portForwardingSepMangIPTable.setStatus('current')
if mibBuilder.loadTexts: portForwardingSepMangIPTable.setDescription('SM Separate Management IP Port Forwarding Rules Table\n                Device Allocation: SM')
portForwardingSepMangIPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17713, 21, 3, 13, 4, 1), ).setIndexNames((0, "CAMBIUM-PMP80211-MIB", "portForwardingSepMangIPTableEntryIndex"))
if mibBuilder.loadTexts: portForwardingSepMangIPEntry.setStatus('current')
if mibBuilder.loadTexts: portForwardingSepMangIPEntry.setDescription('SM Separate Management IP Port Forwarding Table Rule Entry\n                Device Allocation: SM')
portForwardingSepMangIPTableEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 13, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portForwardingSepMangIPTableEntryIndex.setStatus('current')
if mibBuilder.loadTexts: portForwardingSepMangIPTableEntryIndex.setDescription('SM Separate Management IP Port Forwarding Table Entry Index\n                Table Entry is cleared if Index is set to zero\n                Device Allocation: SM')
portForwardingSepMangIPTableEntryProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 13, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ValueRangeConstraint(3, 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portForwardingSepMangIPTableEntryProtocol.setStatus('current')
if mibBuilder.loadTexts: portForwardingSepMangIPTableEntryProtocol.setDescription('SM Separate Management IP Port Forwarding Table Entry Rule Protocol:\n                        0 - Clear Rule,\n                        1 - UDP,\n                        2 - TCP,\n                        3 - UDP+TCP\n                Device Allocation: SM')
portForwardingSepMangIPTableEntryWLANPortBegin = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 13, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portForwardingSepMangIPTableEntryWLANPortBegin.setStatus('current')
if mibBuilder.loadTexts: portForwardingSepMangIPTableEntryWLANPortBegin.setDescription('SM Separate Management IP Port Forwarding WLAN Port Start number\n                Device Allocation: SM')
portForwardingSepMangIPTableEntryWLANPortEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 13, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portForwardingSepMangIPTableEntryWLANPortEnd.setStatus('current')
if mibBuilder.loadTexts: portForwardingSepMangIPTableEntryWLANPortEnd.setDescription('SM Separate Management IP Port Forwarding WLAN Port End number\n                Device Allocation: SM')
portForwardingSepMangIPTableEntryLANIP = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 13, 4, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portForwardingSepMangIPTableEntryLANIP.setStatus('current')
if mibBuilder.loadTexts: portForwardingSepMangIPTableEntryLANIP.setDescription('SM Separate Management IP Port Forwarding LAN IP Address\n                Device Allocation: SM')
portForwardingSepMangIPTableEntryWLANPortMappedBegin = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 13, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portForwardingSepMangIPTableEntryWLANPortMappedBegin.setStatus('current')
if mibBuilder.loadTexts: portForwardingSepMangIPTableEntryWLANPortMappedBegin.setDescription('SM Separate Management IP Port Forwarding Mapped Port number\n                Device Allocation: SM')
staticRoutesEnableMain = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 16, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticRoutesEnableMain.setStatus('current')
if mibBuilder.loadTexts: staticRoutesEnableMain.setDescription('Static Routes trigger\n\t\t\t0 - Disable\n\t\t\t1 - Enable')
cambiumStaticRoutesCnfTable = MibTable((1, 3, 6, 1, 4, 1, 17713, 21, 3, 16, 2), )
if mibBuilder.loadTexts: cambiumStaticRoutesCnfTable.setStatus('current')
if mibBuilder.loadTexts: cambiumStaticRoutesCnfTable.setDescription('Static Routes Table')
cambiumDeviceAgentEnable = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 20, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), )).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumDeviceAgentEnable.setStatus('current')
if mibBuilder.loadTexts: cambiumDeviceAgentEnable.setDescription('Remote Management:\n\t\t\t\t0 - Disable\n\t\t\t\t1 - Enable\n\t\t\tCambium provides cloud management of Cambium devices called cnMaestro.\n\t\t\tThis allows a user to manage all of their various Cambium devices via the web from any location in the world.\n\t\t\tThis field enables this cnMaestro Cloud Management.')
cambiumDeviceAgentCNSURL = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 20, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumDeviceAgentCNSURL.setStatus('current')
if mibBuilder.loadTexts: cambiumDeviceAgentCNSURL.setDescription('cnMaestro URL:\n\t\t\t This specifies the URL for accessing the cnMaestro Cloud Manager')
cambiumCNSDeviceAgentID = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 20, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumCNSDeviceAgentID.setStatus('current')
if mibBuilder.loadTexts: cambiumCNSDeviceAgentID.setDescription("Cambium ID:\n\t\t\tThis is a user name for the cnMaestro Remote Management system.\n\t\t\tThis is used with the 'Onboarding Key' to on-board older Cambium devices, \n\t\t\twhich are not provisioned with an MSN in the Cambium factory.")
cambiumCNSDeviceAgentPassword = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 20, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumCNSDeviceAgentPassword.setStatus('current')
if mibBuilder.loadTexts: cambiumCNSDeviceAgentPassword.setDescription("Onboarding Key:\n\t\t\tThis is a password for the cnMaestro Remote Management system.\n\t\t\tThis is used with the 'Cambium ID' to on-board older Cambium devices,\n\t\t\twhich are not provisioned with an MSN in the Cambium factory.")
cambiumStaticRoutesCnfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17713, 21, 3, 16, 2, 1), ).setIndexNames((0, "CAMBIUM-PMP80211-MIB", "cambiumStaticRoutesCnfIndex"))
if mibBuilder.loadTexts: cambiumStaticRoutesCnfEntry.setStatus('current')
if mibBuilder.loadTexts: cambiumStaticRoutesCnfEntry.setDescription('Static Routes Dest/Getway pair entry')
cambiumStaticRoutesCnfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 16, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumStaticRoutesCnfIndex.setStatus('current')
if mibBuilder.loadTexts: cambiumStaticRoutesCnfIndex.setDescription('Index')
cambiumStaticRoutesCnfDestIP = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 16, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumStaticRoutesCnfDestIP.setStatus('current')
if mibBuilder.loadTexts: cambiumStaticRoutesCnfDestIP.setDescription('Destination IP')
cambiumStaticRoutesCnfGW = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 16, 2, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumStaticRoutesCnfGW.setStatus('current')
if mibBuilder.loadTexts: cambiumStaticRoutesCnfGW.setDescription('Getway IP')
cambiumStaticRoutesCnfNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 16, 2, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumStaticRoutesCnfNetmask.setStatus('current')
if mibBuilder.loadTexts: cambiumStaticRoutesCnfNetmask.setDescription('Dest IP Netmask')
cambiumStaticRoutesCnfEnbl = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 16, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumStaticRoutesCnfEnbl.setStatus('current')
if mibBuilder.loadTexts: cambiumStaticRoutesCnfEnbl.setDescription('Static Routes enable an entry')
cambiumStaticRoutesCnfInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 16, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumStaticRoutesCnfInfo.setStatus('current')
if mibBuilder.loadTexts: cambiumStaticRoutesCnfInfo.setDescription('Static Routes Interface Name')
mgmtVLANEnable = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgmtVLANEnable.setStatus('current')
if mibBuilder.loadTexts: mgmtVLANEnable.setDescription('Management VLANs State:\n\t\t\t0 - Disable, \n\t\t\t1 - Enable\n\t\tDevice Allocation: AP, SM')
mgmtVLANVID = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgmtVLANVID.setStatus('current')
if mibBuilder.loadTexts: mgmtVLANVID.setDescription('Management VLAN ID\n\t\tDevice Allocation: AP, SM')
mgmtVLANVP = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgmtVLANVP.setStatus('current')
if mibBuilder.loadTexts: mgmtVLANVP.setDescription('Management VLAN VP\n\t\tDevice Allocation: AP, SM')
dataVLANEnable = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dataVLANEnable.setStatus('current')
if mibBuilder.loadTexts: dataVLANEnable.setDescription('Data VLANs State:\n\t\t\t0 - Disable, \n\t\t\t1 - Enable\n\t\tDevice Allocation: SM')
dataVLANVID = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dataVLANVID.setStatus('current')
if mibBuilder.loadTexts: dataVLANVID.setDescription('Data VLAN ID\n\t\tDevice Allocation: SM')
dataVLANVP = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 5, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dataVLANVP.setStatus('current')
if mibBuilder.loadTexts: dataVLANVP.setDescription('Data VLAN VP\n\t\tDevice Allocation: SM')
mcastVLANEnable = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 15, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcastVLANEnable.setStatus('current')
if mibBuilder.loadTexts: mcastVLANEnable.setDescription('Multicast VLAN State:\n\t\t\t\t\t\t0 - Disable,\n\t\t\t\t\t\t1 - Enable\n\t\t\t\tDevice Allocation: SM')
mcastVLANVID = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 15, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcastVLANVID.setStatus('current')
if mibBuilder.loadTexts: mcastVLANVID.setDescription('Multicast VLAN ID\n\t\t\t\tDevice Allocation: SM')
mcastVLANVP = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 15, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcastVLANVP.setStatus('current')
if mibBuilder.loadTexts: mcastVLANVP.setDescription('Multicast VLAN VP\n\t\t\t\tDevice Allocation: SM')
membershipVLANTable = MibTable((1, 3, 6, 1, 4, 1, 17713, 21, 3, 14, 3), )
if mibBuilder.loadTexts: membershipVLANTable.setStatus('current')
if mibBuilder.loadTexts: membershipVLANTable.setDescription('Membership VLAN Rules Table\n\t\tDevice Allocation: SM')
membershipVLANEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17713, 21, 3, 14, 3, 1), ).setIndexNames((0, "CAMBIUM-PMP80211-MIB", "membershipVLANTableEntryIndex"))
if mibBuilder.loadTexts: membershipVLANEntry.setStatus('current')
if mibBuilder.loadTexts: membershipVLANEntry.setDescription('Membership VLAN Table Rule Entry\n\t\tDevice Allocation: SM')
membershipVLANTableEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 14, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: membershipVLANTableEntryIndex.setStatus('current')
if mibBuilder.loadTexts: membershipVLANTableEntryIndex.setDescription('Membership VLAN Table Entry Index\n\t\tTable Entry is cleared if Index is set to zero\n\t\tDevice Allocation: SM')
membershipVLANTableEntryVIDBegin = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 14, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4095), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: membershipVLANTableEntryVIDBegin.setStatus('current')
if mibBuilder.loadTexts: membershipVLANTableEntryVIDBegin.setDescription('Membership VLAN Table Entry VLAN ID Begin\n\t\tDevice Allocation: SM')
membershipVLANTableEntryVIDEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 14, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4095), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: membershipVLANTableEntryVIDEnd.setStatus('current')
if mibBuilder.loadTexts: membershipVLANTableEntryVIDEnd.setDescription('Membership VLAN Table Entry VLAN ID End\n\t\tDevice Allocation: SM')
mappingVLANTable = MibTable((1, 3, 6, 1, 4, 1, 17713, 21, 3, 14, 5), )
if mibBuilder.loadTexts: mappingVLANTable.setStatus('current')
if mibBuilder.loadTexts: mappingVLANTable.setDescription('Mapping VLAN Rules Table\n\t\t\t\tDevice Allocation: SM')
mappingVLANEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17713, 21, 3, 14, 5, 1), ).setIndexNames((0, "CAMBIUM-PMP80211-MIB", "mappingVLANTableEntryIndex"))
if mibBuilder.loadTexts: mappingVLANEntry.setStatus('current')
if mibBuilder.loadTexts: mappingVLANEntry.setDescription('Mapping VLAN Table Rule Entry\n\t\t\t\tDevice Allocation: SM')
mappingVLANTableEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 14, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mappingVLANTableEntryIndex.setStatus('current')
if mibBuilder.loadTexts: mappingVLANTableEntryIndex.setDescription('Mapping VLAN Table Entry Index\n\t\t\t\tTable Entry is cleared if Index is set to zero\n\t\t\t\tDevice Allocation: SM')
mappingVLANTableEntryCVLAN = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 14, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4095), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mappingVLANTableEntryCVLAN.setStatus('current')
if mibBuilder.loadTexts: mappingVLANTableEntryCVLAN.setDescription('Mapping VLAN Table C-VLAN ID,\n\t\t\t\t Defines VLAN ID to be mapped from CPE side.\n\t\t\t\tDevice Allocation: SM')
mappingVLANTableEntrySVLAN = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 14, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4095), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mappingVLANTableEntrySVLAN.setStatus('current')
if mibBuilder.loadTexts: mappingVLANTableEntrySVLAN.setDescription('Mapping VLAN Table S-VLAN ID,\n                 Defines VLAN ID to be mapped from Service provider.\n                Device Allocation: SM')
dlkmNATSIPHelpers = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 15, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlkmNATSIPHelpers.setStatus('current')
if mibBuilder.loadTexts: dlkmNATSIPHelpers.setDescription('Enables Auxiliary Netfilter NAT SIP Helper modules support:\n\t\t\t0 - Disable,\n\t\t\t1 - Enabled\n\t\tDevice Allocation: AP, SM')
prefferedAPTable = MibTable((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 3, 1), )
if mibBuilder.loadTexts: prefferedAPTable.setStatus('current')
if mibBuilder.loadTexts: prefferedAPTable.setDescription('Preffered AP Table\n\t\tDevice Allocation: SM')
prefferedAPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 3, 1, 1), ).setIndexNames((0, "CAMBIUM-PMP80211-MIB", "prefferedListTableEntryIndex"))
if mibBuilder.loadTexts: prefferedAPEntry.setStatus('current')
if mibBuilder.loadTexts: prefferedAPEntry.setDescription('Preffered SSID Table Entry\n\t\tDevice Allocation: SM')
prefferedListTableEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prefferedListTableEntryIndex.setStatus('current')
if mibBuilder.loadTexts: prefferedListTableEntryIndex.setDescription('Preferred AP Table Index\n\t\tTable Entry is cleared if Index is set to zero\n\t\tDevice Allocation: SM')
prefferedListTableEntrySSID = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(1, 32), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prefferedListTableEntrySSID.setStatus('current')
if mibBuilder.loadTexts: prefferedListTableEntrySSID.setDescription('Preferred AP SSID\n\t\tDevice Allocation: SM')
prefferedListTableEntryKEY = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 3, 1, 1, 3), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(8, 63), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prefferedListTableEntryKEY.setStatus('current')
if mibBuilder.loadTexts: prefferedListTableEntryKEY.setDescription('Preferred AP Shared Key\n\t\tDevice Allocation: SM')
prefferedListTableSecurityMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prefferedListTableSecurityMethod.setStatus('current')
if mibBuilder.loadTexts: prefferedListTableSecurityMethod.setDescription('Authentication modes to connect to AP\n\t\tDevice Allocation: SM\n\t\tUse bitmask to enable pereferred methods, 0 - means enable method:\n\t\tset 0-th bit to 0 - Open method (110b)\n\t\tset 1-st bit to 0 - WPA2 method (101b)\n\t\tset 2-nd bit to 0 - EAP-TTLS method (011b)\n\t\t0x00 - All enabled')
cambiumpmp80211DeviceReboot = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumpmp80211DeviceReboot.setStatus('current')
if mibBuilder.loadTexts: cambiumpmp80211DeviceReboot.setDescription('OID for Device Reboot, send reboot command to device\n\t\tDevice Allocation: AP, SM')
cambiumpmp80211ConfigurationReset = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumpmp80211ConfigurationReset.setStatus('current')
if mibBuilder.loadTexts: cambiumpmp80211ConfigurationReset.setDescription('OID for System Configuration reset to Defaults\n\t\tDevice Allocation: AP, SM')
cambiumpmp80211ConfigurationSave = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumpmp80211ConfigurationSave.setStatus('current')
if mibBuilder.loadTexts: cambiumpmp80211ConfigurationSave.setDescription('OID for configuration save\n\t\tDevice Allocation: AP, SM')
cambiumpmp80211ConfigurationApply = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 4, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumpmp80211ConfigurationApply.setStatus('current')
if mibBuilder.loadTexts: cambiumpmp80211ConfigurationApply.setDescription('OID for configuration Apply\n\t\tDevice Allocation: AP, SM')
cambiumpmp80211ConfigurationDiscard = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 4, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumpmp80211ConfigurationDiscard.setStatus('current')
if mibBuilder.loadTexts: cambiumpmp80211ConfigurationDiscard.setDescription('OID for configuration Discard\n\t\tDevice Allocation: AP, SM')
cambiumpmp80211ConfigurationState = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 4, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumpmp80211ConfigurationState.setStatus('current')
if mibBuilder.loadTexts: cambiumpmp80211ConfigurationState.setDescription('System configuration state OID.\n\t\tBit masks:\n\t\t\t0000 0001 - System is configured.\n\t\t\t0000 0010 - There are unsaved changesets.\n\t\t\t0000 0100 - There are unrestarted services.\n\t\t\t0000 1000 - Needed reboot of the system.\n\t\t\t0001 0000 - Configurations was reset.\n\t\t\t0010 0000 - Services restarting in process.\n\t\t\t0100 0000 - Software Update performed.\n\t\tDevice Allocation: AP, SM')
cambiumpmp80211SoftwareUpdate = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 4, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumpmp80211SoftwareUpdate.setStatus('current')
if mibBuilder.loadTexts: cambiumpmp80211SoftwareUpdate.setDescription('System OID for Software Update Agent,\n\t\tSW Update link value can be either remote firmware link (http, https, ftp),\n\t\tor local file link: /tmp/firmware.tar.gz\n\t\tNOTE: Device is automatically rebooted if link type is remote\n\t\tDevice Allocation: AP, SM')
cambiumpmp80211SoftwareUpdateStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 4, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumpmp80211SoftwareUpdateStatus.setStatus('current')
if mibBuilder.loadTexts: cambiumpmp80211SoftwareUpdateStatus.setDescription('Software Update Status OID\n\t\t\t0 - No SW Update is pending or No SW upgrade occurs,\n\t\t\t1 - SW Update is in progress, Uploading image to device,\n\t\t\t2 - SW Update is in progress, Verifying SHA2 signature,\n\t\t\t3 - SW Update is in progress, Executing pre-update script,\n\t\t\t4 - SW Update is in progress, Uploading image to flash,\n\t\t\t5 - SW Update is in progress, Uploading u-boot to flash,\n\t\t\t6 - SW Update is in progress, Executing post-update script,\n\t\t\t7 - SW Update is finished, waiting for reboot,\n\t\t\t8 - SW Update is in progress, Executing config down-grade script\n\t\tWhen SW Update is successfully, return value is 7,\n\t\tGUI or NMS indicate that SW update was successful,\n\t\tDevice can be rebooted.\n\t\tDevice Allocation: AP, SM')
cambiumpmp80211STAListUpdate = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 4, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumpmp80211STAListUpdate.setStatus('current')
if mibBuilder.loadTexts: cambiumpmp80211STAListUpdate.setDescription('System OID for SM List update\n\t\tWhen this OID is received, \n\t\tConnected SM list table is getting updated with actual SM list\n\t\tDevice Allocation: AP')
cambiumpmp80211STAListUpdateStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 4, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumpmp80211STAListUpdateStatus.setStatus('current')
if mibBuilder.loadTexts: cambiumpmp80211STAListUpdateStatus.setDescription('Sta List Update Status OID.\n\t\tThis OID is used to indicate SM list table status:\n\t\t\t0 - No SMs are registerd to AP\n\t\t\t1 - SM List Table is getting updated\n\t\t\t2 - SM Data is ready\n\t\tDevice Allocation: AP')
cambiumpmp80211APListUpdate = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 4, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumpmp80211APListUpdate.setStatus('current')
if mibBuilder.loadTexts: cambiumpmp80211APListUpdate.setDescription('System OID for AP List update\n\t\tWhen this OID is received,\n\t\tScanned AP list table is getting updated with actual AP scan list\n\t\tDevice Allocation: SM')
cambiumpmp80211APListUpdateStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 4, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumpmp80211APListUpdateStatus.setStatus('current')
if mibBuilder.loadTexts: cambiumpmp80211APListUpdateStatus.setDescription('AP List Update Status OID.\n\t\tThis OID is used to indicate AP list table status:\n\t\t\t0 - No APs are available in the list\n\t\t\t1 - AP List Table is getting updated\n\t\t\t2 - AP Data is ready\n\t\tDevice Allocation: SM')
cambiumpmp80211SoftwareUpdateError = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 4, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 22))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumpmp80211SoftwareUpdateError.setStatus('current')
if mibBuilder.loadTexts: cambiumpmp80211SoftwareUpdateError.setDescription("Software Update error code:\n\t\t0 - Finished successfully, waiting for reboot\n\t\t1 - SW update file download failed\n\t\t2 - Unpack failed, damaged or wrong format package\n\t\t3 - Firmware digital signature check failed\n\t\t4 - U-Boot digital signature check failed\n\t\t5 - Firmware FLASH write failed\n\t\t6 - U-Boot FLASH write failed\n\t\t7 - Boot partition switch failed\n\t\t8 - Board SKU is not supported for this firmware\n\t\t9 - Can't read firmware version, upgrade is impossible\n\t\t10 - Down-grade not supported for 802.11 driver\n\t\t11 - Down-grade below 2.3.1 is not supported for AP Lite device\n\t\t12 - Down-grade not supported for non SM TDD mode\n\t\t13 - Down-grade below 2.4.2 not supported for Ironman/Ironland board type\n\t\t14 - Down-grade below 2.5.0 not supported for AP WiFi\n\t\t15 - Down-grade below 2.4.3 not supported for Reset Via Power Sequence\n\t\t16 - Down-grade below 2.4.3 not supported for Particular Country Locked device\n\t\t17 - Down-grade below 2.5.0 not supported for 2.5ms mode\n\t\t18 - Down-grade below 2.5.2 not supported for Use MAC Address as EAP-TTLS Username\n\t\t19 - Down-grade below 2.6.0 not supported for 5/10Mhz BW for WiFi & ePTP mode\n\t\t20 - Down-grade below 2.6.0 not supported for Separate Management IP Port Forwarding\n\t\t21 - General error. Device has no free memory\n\t\t22 - General error code\n                Device Allocation: AP, SM")
cambiumpmp80211StatsPerSTAListUpdateStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 4, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumpmp80211StatsPerSTAListUpdateStatus.setStatus('current')
if mibBuilder.loadTexts: cambiumpmp80211StatsPerSTAListUpdateStatus.setDescription('Stats per SM List Update Status OID.\n\t\t\t\t This OID is used to indicate Stats per SM list table status:\n\t\t\t\t 0 - No SMs are registerd to AP\n\t\t\t\t 1 - TBD\n\t\t\t\t 2 - TBD')
cambiumpmp80211StatsPerSTAListUpdate = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 4, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumpmp80211StatsPerSTAListUpdate.setStatus('current')
if mibBuilder.loadTexts: cambiumpmp80211StatsPerSTAListUpdate.setDescription('System OID for Stats per SM table update\n\t\t\t\t When this OID is received,\n\t\t\t\t Stats per SM table is getting updated with actual data')
cambiumpmp80211STADisconnect = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 4, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumpmp80211STADisconnect.setStatus('current')
if mibBuilder.loadTexts: cambiumpmp80211STADisconnect.setDescription('System OID for particular SM disconnection\n\t\t\t\tDevice Allocation: AP')
cambiumpmp80211GPSAutopopulate = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 4, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumpmp80211GPSAutopopulate.setStatus('current')
if mibBuilder.loadTexts: cambiumpmp80211GPSAutopopulate.setDescription('System action to auto-populate GPS stats for device\n\t\t\t\t into system configuration\n\t\t\t\t device location for latitude, longitude and height\n\t\t\t\tDevice Allocation: AP, SM')
cambiumpmp80211SoftwareUpdateErrorStr = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 4, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumpmp80211SoftwareUpdateErrorStr.setStatus('current')
if mibBuilder.loadTexts: cambiumpmp80211SoftwareUpdateErrorStr.setDescription('Software Update error, text descriprion')
cambiumpmp80211GpsFirmwareUpdate = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 4, 19), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumpmp80211GpsFirmwareUpdate.setStatus('current')
if mibBuilder.loadTexts: cambiumpmp80211GpsFirmwareUpdate.setDescription('System OID for GPS Firmware Update Agent,\n\t\tGps FW Update link value can be either remote firmware link (http, https, ftp),\n\t\tor local file link: /tmp/firmware.tar.gz\n\t\tNOTE: Device is automatically rebooted if link type is remote\n\t\tDevice Allocation: AP, SM')
cambiumpmp80211GpsFirmwareUpdateError = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 4, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumpmp80211GpsFirmwareUpdateError.setStatus('current')
if mibBuilder.loadTexts: cambiumpmp80211GpsFirmwareUpdateError.setDescription('Firmware Update error code:\n\t\t\t\t\t\t0 - Finished successfully\n\t\t\t\t\t\t1 - SW update file download failed\n\t\t\t\t\t\t2 - Unpack failed, damaged or wrong format package, or file access error\n\t\t\t\t\t\t3 - GPS Firmware digital signature check failed\n\t\t\t\t\t\t4 - GPS DA digital signature check failed\n\t\t\t\t\t\t5 - GPS DA download to GPS device failed\n\t\t\t\t\t\t6 - GPS FW download to GPS device failed\n\t\t\t\t\t\t7 - Board SKU is not supported for this firmware\n\t\t\t\t\t\t8 - GPS general communication error\t\t\t\t\t  \n\t\t\t\tDevice Allocation: AP, SM')
cambiumpmp80211GpsFirmwareUpdateErrorStr = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 4, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumpmp80211GpsFirmwareUpdateErrorStr.setStatus('current')
if mibBuilder.loadTexts: cambiumpmp80211GpsFirmwareUpdateErrorStr.setDescription('GPS Firmware Update error, text description')
cambiumBridgeTableAPStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 4, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumBridgeTableAPStatus.setStatus('current')
if mibBuilder.loadTexts: cambiumBridgeTableAPStatus.setDescription('AP Bridge Table Update Status OID.\n\t\tThis OID is used to indicate bridge table status:\n\t\t\t0 - Bridge table is empty\n\t\t\t1 - Bridge table is filled with data\n\t\t\t2 - AP Data is ready\n\t\tDevice Allocation: AP')
cambiumBridgeTableSTAUpdate = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 4, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumBridgeTableSTAUpdate.setStatus('current')
if mibBuilder.loadTexts: cambiumBridgeTableSTAUpdate.setDescription('System OID for AP Bridge Table update.\n\t\t When this OID is received, bridge table is getting updated with actual\n\t\t bridge table list\n\t\t Device Allocation: SM')
cambiumBridgeTableSTAStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 4, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumBridgeTableSTAStatus.setStatus('current')
if mibBuilder.loadTexts: cambiumBridgeTableSTAStatus.setDescription('Bridge Table Update Status OID.\n\t\tThis OID is used to indicate bridge table status:\n\t\t\t0 - Bridge table is empty\n\t\t\t1 - Bridge table is filled with data\n\t\t\t2 - SM Data is ready\n\t\tDevice Allocation: SM')
cambiumBridgeTableAPUpdate = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 4, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumBridgeTableAPUpdate.setStatus('current')
if mibBuilder.loadTexts: cambiumBridgeTableAPUpdate.setDescription('System OID for Bridge Table update.\n\t\t When this OID is received, bridge table is getting updated with actual\n\t\t bridge table list\n\t\t Device Allocation: AP')
cambiumForceTabUpdDHCP = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 4, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumForceTabUpdDHCP.setStatus('current')
if mibBuilder.loadTexts: cambiumForceTabUpdDHCP.setDescription('Force update DHCP Host table, \n\t\t1 - Force action\n\tDevice Allocation: SM')
cambiumForceTabUpdTrap = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 4, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumForceTabUpdTrap.setStatus('current')
if mibBuilder.loadTexts: cambiumForceTabUpdTrap.setDescription('Force update SNMP Trap table, \n\t\t1 - Force action\n\tDevice Allocation: AP, SM')
cambiumForceTabUpdl2Frw = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 4, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumForceTabUpdl2Frw.setStatus('current')
if mibBuilder.loadTexts: cambiumForceTabUpdl2Frw.setDescription('Force update l2 Firewal table, \n\t\t1 - Force action\n\tDevice Allocation: AP, SM')
cambiumForceTabUpdl3Frw = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 4, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumForceTabUpdl3Frw.setStatus('current')
if mibBuilder.loadTexts: cambiumForceTabUpdl3Frw.setDescription('Force update l3 Firewal table, \n\t\t1 - Force action\n\tDevice Allocation: AP, SM')
cambiumForceTabUpdQos = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 4, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumForceTabUpdQos.setStatus('current')
if mibBuilder.loadTexts: cambiumForceTabUpdQos.setDescription('Force update Quality of Service table, \n\t\t1 - Force action\n\tDevice Allocation: AP, SM')
cambiumForceTabUpdPortFw = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 4, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumForceTabUpdPortFw.setStatus('current')
if mibBuilder.loadTexts: cambiumForceTabUpdPortFw.setDescription('Force update Port Forwarding table, \n\t\t1 - Force action\n\tDevice Allocation: SM')
cambiumForceTabUpdVlan = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 4, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumForceTabUpdVlan.setStatus('current')
if mibBuilder.loadTexts: cambiumForceTabUpdVlan.setDescription('Force update Membership VLAN table, \n\t\t1 - Force action\n\tDevice Allocation: SM')
cambiumForceTabUpdMappingVlan = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 4, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumForceTabUpdMappingVlan.setStatus('current')
if mibBuilder.loadTexts: cambiumForceTabUpdMappingVlan.setDescription('Force update VLAN Mapping table,\n\t\t\t\t1 - Force action\n\t\tDevice Allocation: AP, SM')
cambiumConfigurationApplyOnReboot = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 4, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumConfigurationApplyOnReboot.setStatus('current')
if mibBuilder.loadTexts: cambiumConfigurationApplyOnReboot.setDescription('OID for configuration Apply\n\t\t\t\ton stage of device reboot.\n\t\t\t\tDevice Allocation: AP, SM')
cambiumForceSTARescan = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 4, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumForceSTARescan.setStatus('current')
if mibBuilder.loadTexts: cambiumForceSTARescan.setDescription('force a STA rescan,\n\t\t\t\t1 - Force action\n\t\tDevice Allocation: AP, SM')
cambiumForceTabUpdMcastDeny = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 4, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumForceTabUpdMcastDeny.setStatus('current')
if mibBuilder.loadTexts: cambiumForceTabUpdMcastDeny.setDescription('Force update Multicast deny table,\n\t\t\t\t1 - Force action\n\t\tDevice Allocation: AP, SM')
cambiumForceTabUpdStaticRoutesCnf = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 4, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumForceTabUpdStaticRoutesCnf.setStatus('current')
if mibBuilder.loadTexts: cambiumForceTabUpdStaticRoutesCnf.setDescription('Force update Static Routes Conf table,\n\t\t\t\t1 - Force action\n\t\tDevice Allocation: AP, SM')
cambiumForceTabUpdMIR = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 4, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumForceTabUpdMIR.setStatus('current')
if mibBuilder.loadTexts: cambiumForceTabUpdMIR.setDescription('Force update MIR table,\n\t\t\t\t1 - Force action\n\t\tDevice Allocation: AP, SM')
cambiumForceTabUpdRadiusServ = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 4, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumForceTabUpdRadiusServ.setStatus('current')
if mibBuilder.loadTexts: cambiumForceTabUpdRadiusServ.setDescription('Force update Radius Server table,\n\t\t\t\t1 - Force action\n\t\tDevice Allocation: AP, SM')
cambiumForceTabUpdPrefAPList = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 4, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumForceTabUpdPrefAPList.setStatus('current')
if mibBuilder.loadTexts: cambiumForceTabUpdPrefAPList.setDescription('Force update Preferred AP list table,\n\t\t\t\t1 - Force action\n\t\tDevice Allocation: AP, SM')
cambiumForceTabUpdAPAlias = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 4, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumForceTabUpdAPAlias.setStatus('current')
if mibBuilder.loadTexts: cambiumForceTabUpdAPAlias.setDescription('Force update AP Alias table,\n\t\t\t\t1 - Force action\n\t\tDevice Allocation: AP, SM')
cambiumForceTabUpdPortFwSepMangIP = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 4, 46), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumForceTabUpdPortFwSepMangIP.setStatus('current')
if mibBuilder.loadTexts: cambiumForceTabUpdPortFwSepMangIP.setDescription('Force update Separate Management IP Port Forwarding table,\n                1 - Force action\n        Device Allocation: SM')
cambiumpmp80211SoftwareUpdateStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 21, 0, 1)).setObjects(("CAMBIUM-PMP80211-MIB", "cambiumpmp80211SoftwareUpdateError"), ("CAMBIUM-PMP80211-MIB", "cambiumpmp80211SoftwareUpdateErrorStr"))
if mibBuilder.loadTexts: cambiumpmp80211SoftwareUpdateStatusTrap.setStatus('current')
if mibBuilder.loadTexts: cambiumpmp80211SoftwareUpdateStatusTrap.setDescription('Software Update error TRAP. Trap indicating Software Update State. \n\t\tThis state is indicated by the included value of cambiumpmp80211GpsFirmwareUpdateError\n\t\tDevice Allocation: AP, SM')
cambiumpmp80211GPSSyncStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 21, 0, 2)).setObjects(("CAMBIUM-PMP80211-MIB", "cambiumToolbarGPSSyncState"))
if mibBuilder.loadTexts: cambiumpmp80211GPSSyncStatusTrap.setStatus('current')
if mibBuilder.loadTexts: cambiumpmp80211GPSSyncStatusTrap.setDescription('GPS Sync Status TRAP. Trap indicating GPS Sync State change.\n\t\tThis state is indicated by the included value of cambiumToolbarGPSSyncState\n\t\tDevice Allocation: AP, SM')
cambiumpmp80211SystemUpTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 21, 0, 3))
if mibBuilder.loadTexts: cambiumpmp80211SystemUpTrap.setStatus('current')
if mibBuilder.loadTexts: cambiumpmp80211SystemUpTrap.setDescription('System UP TRAP. Trap indicating SNMP subSystem UP\n\t\tDevice Allocation: AP, SM')
cambiumpmp80211DFSStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 21, 0, 4)).setObjects(("CAMBIUM-PMP80211-MIB", "cambiumDFSStatus"), ("CAMBIUM-PMP80211-MIB", "cambiumDFSStatusStr"))
if mibBuilder.loadTexts: cambiumpmp80211DFSStatusTrap.setStatus('current')
if mibBuilder.loadTexts: cambiumpmp80211DFSStatusTrap.setDescription('DFS Status TRAP. Trap indicating DFS Event.\n\t\tThis event is indicated by the included value of cambiumDFSStatus\n\t\tDevice Allocation: AP, SM')
cambiumpmp80211JSONCfgImportTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 21, 0, 5)).setObjects(("CAMBIUM-PMP80211-MIB", "cambiumJSONCfgImportError"))
if mibBuilder.loadTexts: cambiumpmp80211JSONCfgImportTrap.setStatus('current')
if mibBuilder.loadTexts: cambiumpmp80211JSONCfgImportTrap.setDescription('JSON configuration import error trap. Trap catches JSON configuration\n\t\timport state. This state is indicated by the included value of\n\t\tcambiumJSONCfgImportError.\n\t\tDevice Allocation: AP, SM')
cambiumpmp80211JSONCfgExportTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 21, 0, 6)).setObjects(("CAMBIUM-PMP80211-MIB", "cambiumJSONCfgExportError"))
if mibBuilder.loadTexts: cambiumpmp80211JSONCfgExportTrap.setStatus('current')
if mibBuilder.loadTexts: cambiumpmp80211JSONCfgExportTrap.setDescription('JSON configuration export error trap. Trap catches JSON configuration\n\t\texport state. This state is indicated by the included value of\n\t\tcambiumJSONCfgExportError.\n\t\tDevice Allocation: AP, SM')
cambiumpmp80211FullCfgRestoreTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 21, 0, 7)).setObjects(("CAMBIUM-PMP80211-MIB", "cambiumFullCfgRestoreError"))
if mibBuilder.loadTexts: cambiumpmp80211FullCfgRestoreTrap.setStatus('current')
if mibBuilder.loadTexts: cambiumpmp80211FullCfgRestoreTrap.setDescription('Full configuration restore error trap. Trap catches full configuration\n\t\trestoring state. This state is indicated by the included value of\n\t\tcambiumFullCfgRestoreError.\n\t\tDevice Allocation: AP, SM')
cambiumpmp80211FullCfgBackupTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 21, 0, 8)).setObjects(("CAMBIUM-PMP80211-MIB", "cambiumFullCfgBackUpError"))
if mibBuilder.loadTexts: cambiumpmp80211FullCfgBackupTrap.setStatus('current')
if mibBuilder.loadTexts: cambiumpmp80211FullCfgBackupTrap.setDescription('Full configuration backup error trap. Trap catches full configuration\n\t\tbackup state. This state is indicated by the included value of\n\t\tcambiumFullCfgBackUpError.\n\t\tDevice Allocation: AP, SM')
cambiumpmp80211GpsFirmwareUpdateStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 21, 0, 9)).setObjects(("CAMBIUM-PMP80211-MIB", "cambiumpmp80211GpsFirmwareUpdateError"), ("CAMBIUM-PMP80211-MIB", "cambiumpmp80211GpsFirmwareUpdateErrorStr"))
if mibBuilder.loadTexts: cambiumpmp80211GpsFirmwareUpdateStatusTrap.setStatus('current')
if mibBuilder.loadTexts: cambiumpmp80211GpsFirmwareUpdateStatusTrap.setDescription('GPS Update error TRAP. Trap indicating GPS Firmware Update State. \n\t\tThis state is indicated by the included value of cambiumpmp80211GpsFirmwareUpdateError\n\t\tDevice Allocation: AP, SM')
cambiumpmp80211STADropTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 21, 0, 10)).setObjects(("CAMBIUM-PMP80211-MIB", "cambiumSTAMAC"), ("CAMBIUM-PMP80211-MIB", "cambiumSTADropReason"))
if mibBuilder.loadTexts: cambiumpmp80211STADropTrap.setStatus('current')
if mibBuilder.loadTexts: cambiumpmp80211STADropTrap.setDescription('SM Drop trap. Trap catches dropped SM info. Information is\n\t\tcontained in the included values of cambiumSTAMAC and\n\t\tcambiumSTADropReason.\n\t\tDevice Allocation: AP')
cambiumpmp80211SMRegTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 21, 0, 11)).setObjects(("CAMBIUM-PMP80211-MIB", "cambiumSTAMAC"))
if mibBuilder.loadTexts: cambiumpmp80211SMRegTrap.setStatus('current')
if mibBuilder.loadTexts: cambiumpmp80211SMRegTrap.setDescription('SM Registration trap. Trap catches registered SM info. Information is\n\t\tcontained in the included value of cambiumSTAMAC.\n\t\tDevice Allocation: AP')
cambiumpmp80211SystemRebootTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 21, 0, 12))
if mibBuilder.loadTexts: cambiumpmp80211SystemRebootTrap.setStatus('current')
if mibBuilder.loadTexts: cambiumpmp80211SystemRebootTrap.setDescription('System reboot trap. Trap indicates that snmpd daemon has been shut\n\t\tdown and the system is going to reboot.\n\t\tDevice Allocation: AP, SM')
cambiumpmp80211SAModeTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 21, 0, 13))
if mibBuilder.loadTexts: cambiumpmp80211SAModeTrap.setStatus('current')
if mibBuilder.loadTexts: cambiumpmp80211SAModeTrap.setDescription('Spectrum Analyzer mode trap. Trap indicates that he system is going to\n\t\treboot in SA mode.\n\t\tDevice Allocation: AP, SM')
cambiumpmpETSIframeSkipTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 21, 0, 14))
if mibBuilder.loadTexts: cambiumpmpETSIframeSkipTrap.setStatus('current')
if mibBuilder.loadTexts: cambiumpmpETSIframeSkipTrap.setDescription('To much frame skipped due to CCA.\n\t\tDevice Allocation: AP')
cambiumpmp80211NetworkEntryFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 21, 0, 15)).setObjects(("CAMBIUM-PMP80211-MIB", "cambiumNetworkEntryFailureSTAMAC"), ("CAMBIUM-PMP80211-MIB", "cambiumNetworkEntryFailureReason"))
if mibBuilder.loadTexts: cambiumpmp80211NetworkEntryFailureTrap.setStatus('current')
if mibBuilder.loadTexts: cambiumpmp80211NetworkEntryFailureTrap.setDescription('SM rejected trap. Trap obtains info about the latest rejected SM. Trap string\n\t\tis contained an information string with rejected reason and MAC of \n\t\trejected SM. Trap message for a host is consisted of cambiumNetworkEntryFailureSTAMAC and \n\t\tcambiumNetworkEntryFailureReason objects.\n\t\tDevice Allocation: AP')
cambiumLinkTestDuration = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2, 2), ValueRangeConstraint(4, 4), ValueRangeConstraint(6, 6), ValueRangeConstraint(8, 8), ValueRangeConstraint(10, 10), ValueRangeConstraint(12, 12), ValueRangeConstraint(14, 14), ValueRangeConstraint(16, 16), ValueRangeConstraint(18, 18), ValueRangeConstraint(20, 20), )).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumLinkTestDuration.setStatus('current')
if mibBuilder.loadTexts: cambiumLinkTestDuration.setDescription('Link Test Duration OID.\n\t\tDevice Allocation: AP, SM')
cambiumLinkTestPckSize = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(128, 128), ValueRangeConstraint(800, 800), ValueRangeConstraint(1500, 1500), )).clone(1500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumLinkTestPckSize.setStatus('current')
if mibBuilder.loadTexts: cambiumLinkTestPckSize.setDescription('Link Test Packet Size OID.\n\t\tDevice Allocation: AP, SM')
cambiumLinkTestStartForMAC = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(11, 17))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumLinkTestStartForMAC.setStatus('current')
if mibBuilder.loadTexts: cambiumLinkTestStartForMAC.setDescription('The Link Test Destination MAC address.\n\t\tStart Link Test by write this OID.\n\t\tDevice Allocation: AP, SM')
cambiumLinkTestStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumLinkTestStatus.setStatus('current')
if mibBuilder.loadTexts: cambiumLinkTestStatus.setDescription('The Link Test Status OID.\n\t\t0: WAIT\n\t\t1: START\n\t\t2: BUSY\n\t\t3: SUCCESS\n\t\t4: SUCCESS (PREF PERIOD)\n\t\t5: ERROR UNREACHABLE\n\t\t6: ERROR FAIL\n\t\tDevice Allocation: AP, SM')
cambiumLinkTestResultDate = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 6, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(6, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumLinkTestResultDate.setStatus('current')
if mibBuilder.loadTexts: cambiumLinkTestResultDate.setDescription('The Link Test Result Timestamp\n\t\tDevice Allocation: AP, SM')
cambiumLinkTestResultUL = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 6, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumLinkTestResultUL.setStatus('current')
if mibBuilder.loadTexts: cambiumLinkTestResultUL.setDescription('Link Test Result Uplink.\n\t\tDevice Allocation: AP, SM')
cambiumLinkTestResultDL = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 6, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumLinkTestResultDL.setStatus('current')
if mibBuilder.loadTexts: cambiumLinkTestResultDL.setDescription('Link Test Result Downlink.\n\t\tDevice Allocation: AP, SM')
caminfoScanFrequencyListCountry = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 6, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: caminfoScanFrequencyListCountry.setStatus('current')
if mibBuilder.loadTexts: caminfoScanFrequencyListCountry.setDescription('Country for Frequency List 20/40 MHz band\n\t\tDevice Allocation: AP, SM')
caminfoScanFrequencyListTwentyBand = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 6, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 1064))).setMaxAccess("readonly")
if mibBuilder.loadTexts: caminfoScanFrequencyListTwentyBand.setStatus('current')
if mibBuilder.loadTexts: caminfoScanFrequencyListTwentyBand.setDescription('Scan Frequency List for 20 MHz band\n\t\tDevice Allocation: SM')
caminfoScanFrequencyListFortyBand = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 6, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 1064))).setMaxAccess("readonly")
if mibBuilder.loadTexts: caminfoScanFrequencyListFortyBand.setStatus('current')
if mibBuilder.loadTexts: caminfoScanFrequencyListFortyBand.setDescription('Scan Frequency List for 40 MHz band\n\t\tDevice Allocation: SM')
caminfoScanFrequencyListAllow59band = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 6, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: caminfoScanFrequencyListAllow59band.setStatus('current')
if mibBuilder.loadTexts: caminfoScanFrequencyListAllow59band.setDescription('Allow 59 band if the board is calibrated\n\t\tusing new frequency values. \n\t\t\t0 - Do not Allow \n\t\t\t1 - Allow\n\t\tDevice Allocation: AP, SM')
cambiumInternetConnectionServerIP = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 6, 3, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumInternetConnectionServerIP.setStatus('current')
if mibBuilder.loadTexts: cambiumInternetConnectionServerIP.setDescription('Internet Connection Server IP Address\n\t\tThis is auxiliary IP address to ping \n\t\tin order to define Internet connection Status\n\t\tDevice Allocation: AP, SM')
cambiumInternetConnectionPollPeriod = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 6, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumInternetConnectionPollPeriod.setStatus('current')
if mibBuilder.loadTexts: cambiumInternetConnectionPollPeriod.setDescription('Internet Connection Server Ping period in seconds\n\t\tDevice Allocation: AP, SM')
cambiumToolbarGlobeState = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 6, 3, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumToolbarGlobeState.setStatus('current')
if mibBuilder.loadTexts: cambiumToolbarGlobeState.setDescription('Globe Internet Connectivity Status Icon State:\n\t\t\t0 - No Internet Connectivity,\n\t\t\t1 - Internet Connectivity\n\t\tDevice Allocation: AP, SM')
cambiumToolbarGPSSyncState = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 6, 3, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumToolbarGPSSyncState.setStatus('current')
if mibBuilder.loadTexts: cambiumToolbarGPSSyncState.setDescription('GPS Current SYNC State:\n\t\t\t0 - The Initialization State\n\t\t\t1 - The No Synchronization State\n\t\t\t2 - The Synchronization State\n\t\t\t3 - The Hold Off State\n\t\t\t4 - The Regaining Sync State\n\t\t\t5 - The Free Run State\n\t\tDevice Allocation: AP')
cambiumToolbarDeviceConfigurationState = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 6, 3, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumToolbarDeviceConfigurationState.setStatus('current')
if mibBuilder.loadTexts: cambiumToolbarDeviceConfigurationState.setDescription('System configuration state OID.\n\t\tBit masks:\n\t\t\t0000 0001 - System is configured.\n\t\t\t0000 0010 - There are unsaved changesets.\n\t\t\t0000 0100 - There are unrestarted services.\n\t\t\t0000 1000 - Needed reboot of the system.\n\t\t\t0001 0000 - Configurations was reset.\n\t\t\t0010 0000 - Services restarting in process.\n\t\t\t0100 0000 - Software Update performed.\n\t\tDevice Allocation: AP, SM')
cambiumToolbarSyncSource = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 6, 3, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ValueRangeConstraint(3, 3), ValueRangeConstraint(4, 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumToolbarSyncSource.setStatus('current')
if mibBuilder.loadTexts: cambiumToolbarSyncSource.setDescription('Sync Source Status:\n\t\t\t1 - GPS Sync Up, \n\t\t\t2 - GPS Sync Down, \n\t\t\t3 - CMM4 Sync,\n\t\t\t4 - CMM3 Sync\n\t\tDevice Allocation: AP')
cambiumToolbarGPSSyncStateStr = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 6, 3, 2, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumToolbarGPSSyncStateStr.setStatus('current')
if mibBuilder.loadTexts: cambiumToolbarGPSSyncStateStr.setDescription('GPS Current SYNC State (text)\n\t\tDevice Allocation: AP')
cambiumJSONCfgImport = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 6, 4, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumJSONCfgImport.setStatus('current')
if mibBuilder.loadTexts: cambiumJSONCfgImport.setDescription('OID to start import process, when valid link to JSON configuration file\n\t\tis received.\n\t\tDevice Allocation: AP, SM')
cambiumJSONCfgImportStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 6, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumJSONCfgImportStatus.setStatus('current')
if mibBuilder.loadTexts: cambiumJSONCfgImportStatus.setDescription('OID to get the status of the import process:\n\t\t-1\tError\n\t\t 0\tIdle\n\t\t 1\tDownloading file\n\t\t 2\tImporting file\n\t\t 3\tRebooting\n\t\tDevice Allocation: AP, SM')
cambiumJSONCfgImportError = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 6, 4, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumJSONCfgImportError.setStatus('current')
if mibBuilder.loadTexts: cambiumJSONCfgImportError.setDescription('Import config Error message (text) \n\t\tDevice Allocation: AP, SM')
cambiumJSONCfgExport = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 6, 4, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumJSONCfgExport.setStatus('current')
if mibBuilder.loadTexts: cambiumJSONCfgExport.setDescription('OID to start export process\n\t\t0\tNo action\n\t\t1\tStart\n\t\tDevice Allocation: AP, SM')
cambiumJSONCfgExportStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 6, 4, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumJSONCfgExportStatus.setStatus('current')
if mibBuilder.loadTexts: cambiumJSONCfgExportStatus.setDescription('OID to get the status of the export process:\n\t\t-1\tError\n\t\t 0\tIdle\n\t\t 1\tExporting JSON config\n\t\t 2\tMoving config into upload directory\n\t\t 3\tPreparing link for uploading\n\t\t 4\tSuccess\n\t\tDevice Allocation: AP, SM')
cambiumJSONCfgExportError = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 6, 4, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumJSONCfgExportError.setStatus('current')
if mibBuilder.loadTexts: cambiumJSONCfgExportError.setDescription('Export config Error message (text)\n\t\tDevice Allocation: AP, SM')
cambiumJSONCfgExportLink = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 6, 4, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumJSONCfgExportLink.setStatus('current')
if mibBuilder.loadTexts: cambiumJSONCfgExportLink.setDescription('Link to the configuration file on the board\n\t\tDevice Allocation: AP, SM')
cambiumFullCfgRestore = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 6, 4, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumFullCfgRestore.setStatus('current')
if mibBuilder.loadTexts: cambiumFullCfgRestore.setDescription('OID to start restore process, when valid link to full configuration\n\t\tfile is received.\n\t\tDevice Allocation: AP, SM')
cambiumFullCfgRestoreStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 6, 4, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumFullCfgRestoreStatus.setStatus('current')
if mibBuilder.loadTexts: cambiumFullCfgRestoreStatus.setDescription('OID to get the status of the restore process:\n\t\t-1\tError\n\t\t 0\tIdle\n\t\t 1\tDownloading file\n\t\t 2\tDecrypting\n\t\t 3\tUnpacking\n\t\t 4\tImporting\n\t\t 5\tRebooting\n\t\tDevice Allocation: AP, SM')
cambiumFullCfgRestoreError = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 6, 4, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumFullCfgRestoreError.setStatus('current')
if mibBuilder.loadTexts: cambiumFullCfgRestoreError.setDescription('Restore config Error message (text)\n\t\tDevice Allocation: AP, SM')
cambiumFullCfgBackUp = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 6, 4, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumFullCfgBackUp.setStatus('current')
if mibBuilder.loadTexts: cambiumFullCfgBackUp.setDescription('OID to start backup process\n\t\tBitmask indicating which part of configuration to backup:\n\t\t001 - json-config files\n\t\t010 - files of security & certificates\n\t\t100 - log files \n\t\tDevice Allocation: AP, SM')
cambiumFullCfgBackUpStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 6, 4, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumFullCfgBackUpStatus.setStatus('current')
if mibBuilder.loadTexts: cambiumFullCfgBackUpStatus.setDescription('OID to get the status of the backup process:\n\t\t-1\tError\n\t\t 0\tIdle\n\t\t 1\tPacking configuration files\n\t\t 2\tEncrypting configuration files\n\t\t 3\tMoving packed files into upload directory\n\t\t 4\tPreparing link for uploading\n\t\t 5\tSuccess\n\t\tDevice Allocation: AP, SM')
cambiumFullCfgBackUpError = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 6, 4, 32), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumFullCfgBackUpError.setStatus('current')
if mibBuilder.loadTexts: cambiumFullCfgBackUpError.setDescription('Backup config Error message (text)\n\t\tDevice Allocation: AP, SM')
cambiumFullCfgBackUpLink = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 6, 4, 33), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumFullCfgBackUpLink.setStatus('current')
if mibBuilder.loadTexts: cambiumFullCfgBackUpLink.setDescription('Link to the packed configuration files on the board, ready to upload\n\t\tDevice Allocation: AP, SM')
acsEnable = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 6, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acsEnable.setStatus('current')
if mibBuilder.loadTexts: acsEnable.setDescription('Automatic Channel Selection (ACS) automatically selects best values for\n\t\tcenterFrequency, dfsAlternative1CenterFrequency and dfsAlternative2CenterFrequency:\n\t\t 0 - Disable,\n\t\t 1 - Enable\n\t\tDevice Allocation: AP')
acsScanMinDwellTime = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 6, 6, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 500)).clone(200)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acsScanMinDwellTime.setStatus('current')
if mibBuilder.loadTexts: acsScanMinDwellTime.setDescription('Minimum dwell time during Automatic Channel Selection (ACS) scan in milliseconds.\n\t\tDevice Allocation: AP')
acsScanMaxDwellTime = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 6, 6, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(300, 600)).clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acsScanMaxDwellTime.setStatus('current')
if mibBuilder.loadTexts: acsScanMaxDwellTime.setDescription('Maximum dwell time during Automatic Channel Selection (ACS) scan in milliseconds.\n\t\tDevice Allocation: AP')
acsControl = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 6, 6, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acsControl.setStatus('current')
if mibBuilder.loadTexts: acsControl.setDescription('Automatic Channel Selection (ACS) control:\n\t\t 0 - No change,\n\t\t 1 - Run scan now,\n\t\t 2 - Abort current scan\n\t\tDevice Allocation: AP')
cambiumIDMMode = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 6, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumIDMMode.setStatus('current')
if mibBuilder.loadTexts: cambiumIDMMode.setDescription('OID to configure IDM Mode\n\t\t0 - System Wide\n\t\t1 - Local\n\t\tDevice Allocation: AP, SM')
cambiumIDMTime = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 6, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1000, 120000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumIDMTime.setStatus('current')
if mibBuilder.loadTexts: cambiumIDMTime.setDescription('OID to configure IDM Time.\n\t\tDevice Allocation: AP, SM')
cambiumIDMEnable = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 6, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumIDMEnable.setStatus('current')
if mibBuilder.loadTexts: cambiumIDMEnable.setDescription('OID to enable/disable IDM feature\n\t\t0 - Enable IDM\n\t\t1 - Disable IDM\n\t\tDevice Allocation: AP, SM')
cambiumIDMResultsTable = MibTable((1, 3, 6, 1, 4, 1, 17713, 21, 6, 5, 10), )
if mibBuilder.loadTexts: cambiumIDMResultsTable.setStatus('current')
if mibBuilder.loadTexts: cambiumIDMResultsTable.setDescription('This table contains information of IDM Results:\n\t\t  IDM Cycle,\n\t\t  Device MAC,\n\t\t  Last Comb RSSI,\n\t\t  Last Rate,\n\t\t  Max Rate,\n\t\t  Number of Packets,\n\t\t  CRC Comb RSSI,\n\t\t  CRC Ch0 RSSI,\n\t\t  CRC Ch1 RSSI,\n\t\t  CRC Number of Packets,\n\t\t  PRQ Comb RSSI,\n\t\t  PRQ Ch0 RSSI,\n\t\t  PRQ Ch1 RSSI,\n\t\t  PRQ Number of Packets,\n\tDevice Allocation: AP, SM')
cambiumIDMResultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17713, 21, 6, 5, 10, 1), ).setIndexNames((0, "CAMBIUM-PMP80211-MIB", "cambiumAPNumberOfConnectedSTA"))
if mibBuilder.loadTexts: cambiumIDMResultsEntry.setStatus('current')
if mibBuilder.loadTexts: cambiumIDMResultsEntry.setDescription('Wireless parameters mapping for particular device.\n\tDevice Allocation: AP, SM')
idmDeviceListCycle = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 6, 5, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: idmDeviceListCycle.setStatus('current')
if mibBuilder.loadTexts: idmDeviceListCycle.setDescription('IDM Cycle Number.\n\tDevice Allocation: AP, SM')
idmDeviceListMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 6, 5, 10, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(11, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: idmDeviceListMAC.setStatus('current')
if mibBuilder.loadTexts: idmDeviceListMAC.setDescription('MAC Address of device collected IDM Statistics.\n\tDevice Allocation: AP, SM')
idmDeviceListLCombRSSI = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 6, 5, 10, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: idmDeviceListLCombRSSI.setStatus('current')
if mibBuilder.loadTexts: idmDeviceListLCombRSSI.setDescription('Combined RSSI of last received MPDU.\n\tDevice Allocation: AP, SM')
idmDeviceListLRate = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 6, 5, 10, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: idmDeviceListLRate.setStatus('current')
if mibBuilder.loadTexts: idmDeviceListLRate.setDescription('Rate code of last received MPDU.\n\tDevice Allocation: AP, SM')
idmDeviceListMaxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 6, 5, 10, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: idmDeviceListMaxRate.setStatus('current')
if mibBuilder.loadTexts: idmDeviceListMaxRate.setDescription('Maximum rate code.\n\tDevice Allocation: AP, SM')
idmDeviceListPcktsNum = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 6, 5, 10, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: idmDeviceListPcktsNum.setStatus('current')
if mibBuilder.loadTexts: idmDeviceListPcktsNum.setDescription('Number of packets filtered by IDM.\n\tDevice Allocation: AP, SM')
idmDeviceListCRCCombRSSI = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 6, 5, 10, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: idmDeviceListCRCCombRSSI.setStatus('current')
if mibBuilder.loadTexts: idmDeviceListCRCCombRSSI.setDescription('Combined RSSI of maximum received CRC error MPDU.\n\tDevice Allocation: AP, SM')
idmDeviceListCRCCh0RSSI = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 6, 5, 10, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: idmDeviceListCRCCh0RSSI.setStatus('current')
if mibBuilder.loadTexts: idmDeviceListCRCCh0RSSI.setDescription('Channel 0 RSSI of maximum received CRC error MPDU.\n\tDevice Allocation: AP, SM')
idmDeviceListCRCCh1RSSI = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 6, 5, 10, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: idmDeviceListCRCCh1RSSI.setStatus('current')
if mibBuilder.loadTexts: idmDeviceListCRCCh1RSSI.setDescription('Channel 1 RSSI of maximum received CRC error MPDU.\n\tDevice Allocation: AP, SM')
idmDeviceListCRCPcktsNum = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 6, 5, 10, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: idmDeviceListCRCPcktsNum.setStatus('current')
if mibBuilder.loadTexts: idmDeviceListCRCPcktsNum.setDescription('Number of packets with CRC error filtered by IDM.\n\tDevice Allocation: AP, SM')
idmDeviceListPRQCombRSSI = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 6, 5, 10, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: idmDeviceListPRQCombRSSI.setStatus('current')
if mibBuilder.loadTexts: idmDeviceListPRQCombRSSI.setDescription('Combined RSSI of maximum received Probe Requests MPDU.\n\tDevice Allocation: AP, SM')
idmDeviceListPRQCh0RSSI = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 6, 5, 10, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: idmDeviceListPRQCh0RSSI.setStatus('current')
if mibBuilder.loadTexts: idmDeviceListPRQCh0RSSI.setDescription('Channel 0 RSSI of maximum received Probe Requests MPDU.\n\tDevice Allocation: AP, SM')
idmDeviceListPRQCh1RSSI = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 6, 5, 10, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: idmDeviceListPRQCh1RSSI.setStatus('current')
if mibBuilder.loadTexts: idmDeviceListPRQCh1RSSI.setDescription('Channel 1 RSSI of maximum received Probe Requests MPDU.\n\tDevice Allocation: AP, SM')
idmDeviceListPRQPcktsNum = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 6, 5, 10, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: idmDeviceListPRQPcktsNum.setStatus('current')
if mibBuilder.loadTexts: idmDeviceListPRQPcktsNum.setDescription('Number of Probe Requests filtered by IDM.\n\tDevice Allocation: AP, SM')
cambiumIDMSumMAC = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 6, 5, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(11, 17))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumIDMSumMAC.setStatus('current')
if mibBuilder.loadTexts: cambiumIDMSumMAC.setDescription('MAC Address of device collected IDM Summary Statistics.\n\tDevice Allocation: AP, SM')
cambiumIDMSumLCombRSSI = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 6, 5, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumIDMSumLCombRSSI.setStatus('current')
if mibBuilder.loadTexts: cambiumIDMSumLCombRSSI.setDescription('Summary Combined RSSI of last received MPDU.\n\tDevice Allocation: AP, SM')
cambiumIDMSumLRate = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 6, 5, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumIDMSumLRate.setStatus('current')
if mibBuilder.loadTexts: cambiumIDMSumLRate.setDescription('Summary Rate code of last received MPDU.\n\tDevice Allocation: AP, SM')
cambiumIDMSumMaxRate = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 6, 5, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumIDMSumMaxRate.setStatus('current')
if mibBuilder.loadTexts: cambiumIDMSumMaxRate.setDescription('Summary Maximum rate code.\n\tDevice Allocation: AP, SM')
cambiumIDMSumPcktsNum = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 6, 5, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumIDMSumPcktsNum.setStatus('current')
if mibBuilder.loadTexts: cambiumIDMSumPcktsNum.setDescription('Summary Number of packets filtered by IDM.\n\tDevice Allocation: AP, SM')
cambiumIDMSumCRCCombRSSI = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 6, 5, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumIDMSumCRCCombRSSI.setStatus('current')
if mibBuilder.loadTexts: cambiumIDMSumCRCCombRSSI.setDescription('Summary Combined RSSI of maximum received CRC error MPDU.\n\tDevice Allocation: AP, SM')
cambiumIDMSumCRCCh0RSSI = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 6, 5, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumIDMSumCRCCh0RSSI.setStatus('current')
if mibBuilder.loadTexts: cambiumIDMSumCRCCh0RSSI.setDescription('Summary Channel 0 RSSI of maximum received CRC error MPDU.\n\tDevice Allocation: AP, SM')
cambiumIDMSumCRCCh1RSSI = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 6, 5, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumIDMSumCRCCh1RSSI.setStatus('current')
if mibBuilder.loadTexts: cambiumIDMSumCRCCh1RSSI.setDescription('Summary Channel 1 RSSI of maximum received CRC error MPDU.\n\tDevice Allocation: AP, SM')
cambiumIDMSumCRCPcktsNum = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 6, 5, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumIDMSumCRCPcktsNum.setStatus('current')
if mibBuilder.loadTexts: cambiumIDMSumCRCPcktsNum.setDescription('Summary Number of packets with CRC error filtered by IDM.\n\tDevice Allocation: AP, SM')
cambiumIDMSumPRQCombRSSI = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 6, 5, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumIDMSumPRQCombRSSI.setStatus('current')
if mibBuilder.loadTexts: cambiumIDMSumPRQCombRSSI.setDescription('Summary Combined RSSI of maximum received Probe Requests MPDU.\n\tDevice Allocation: AP, SM')
cambiumIDMSumPRQCh0RSSI = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 6, 5, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumIDMSumPRQCh0RSSI.setStatus('current')
if mibBuilder.loadTexts: cambiumIDMSumPRQCh0RSSI.setDescription('Summary Channel 0 RSSI of maximum received Probe Requests MPDU.\n\tDevice Allocation: AP, SM')
cambiumIDMSumPRQCh1RSSI = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 6, 5, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumIDMSumPRQCh1RSSI.setStatus('current')
if mibBuilder.loadTexts: cambiumIDMSumPRQCh1RSSI.setDescription('Summary Channel 1 RSSI of maximum received Probe Requests MPDU.\n\tDevice Allocation: AP, SM')
cambiumIDMSumPRQPcktsNum = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 6, 5, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumIDMSumPRQPcktsNum.setStatus('current')
if mibBuilder.loadTexts: cambiumIDMSumPRQPcktsNum.setDescription('Summary Number of Probe Requests filtered by IDM.\n\tDevice Allocation: AP, SM')
cambiumIDMSummaryTable = MibTable((1, 3, 6, 1, 4, 1, 17713, 21, 6, 5, 30), )
if mibBuilder.loadTexts: cambiumIDMSummaryTable.setStatus('current')
if mibBuilder.loadTexts: cambiumIDMSummaryTable.setDescription('This table contains information of IDM Summary Top Interferers:\n\t\t  Intrf MAC,\n\t\t  Intrf RSSI,\n\t\t  Intrf Ch0 RSSI,\n\t\t  Intrf Ch1 RSSI,\n\t\t  Intrf SSID,\n\tDevice Allocation: AP, SM')
cambiumIDMSummaryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17713, 21, 6, 5, 30, 1), ).setIndexNames((0, "CAMBIUM-PMP80211-MIB", "cambiumAPNumberOfConnectedSTA"))
if mibBuilder.loadTexts: cambiumIDMSummaryEntry.setStatus('current')
if mibBuilder.loadTexts: cambiumIDMSummaryEntry.setDescription('Wireless parameters mapping for particular device.\n\tDevice Allocation: AP, SM')
idmSummaryIntMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 6, 5, 30, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(11, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: idmSummaryIntMAC.setStatus('current')
if mibBuilder.loadTexts: idmSummaryIntMAC.setDescription('MAC Address of Interferer.\n\tDevice Allocation: AP, SM')
idmSummaryIntCombRSSI = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 6, 5, 30, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: idmSummaryIntCombRSSI.setStatus('current')
if mibBuilder.loadTexts: idmSummaryIntCombRSSI.setDescription('Interferer Combined RSSI.\n\tDevice Allocation: AP, SM')
idmSummaryIntCh0RSSI = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 6, 5, 30, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: idmSummaryIntCh0RSSI.setStatus('current')
if mibBuilder.loadTexts: idmSummaryIntCh0RSSI.setDescription('Interferer Channel 0 RSSI.\n\tDevice Allocation: AP, SM')
idmSummaryIntCh1RSSI = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 6, 5, 30, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: idmSummaryIntCh1RSSI.setStatus('current')
if mibBuilder.loadTexts: idmSummaryIntCh1RSSI.setDescription('Interferer Channel 1 RSSI.\n\tDevice Allocation: AP, SM')
idmSummaryIntSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 6, 5, 30, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: idmSummaryIntSSID.setStatus('current')
if mibBuilder.loadTexts: idmSummaryIntSSID.setDescription('SSID name of Interferer.\n\tDevice Allocation: AP, SM')
mibBuilder.exportSymbols("CAMBIUM-PMP80211-MIB", connectedSTAListDLRSSI=connectedSTAListDLRSSI, cambiumStatsForceUpdate=cambiumStatsForceUpdate, cambiumCNSDeviceAgentID=cambiumCNSDeviceAgentID, connectedSTAMirDLRate=connectedSTAMirDLRate, dlkm=dlkm, wireless=wireless, networkRadiusVSAmembershipVLANTable=networkRadiusVSAmembershipVLANTable, acsState=acsState, networkRadiusVSAmgmtIFVID=networkRadiusVSAmgmtIFVID, cambiumLinkTestPckSize=cambiumLinkTestPckSize, idmSummaryIntCh1RSSI=idmSummaryIntCh1RSSI, cambiumIDMSumPRQPcktsNum=cambiumIDMSumPRQPcktsNum, dataVLANVP=dataVLANVP, dhcpLanHostName=dhcpLanHostName, acsControl=acsControl, cambiumNetworkEntryFailureReason=cambiumNetworkEntryFailureReason, upnpd=upnpd, connectedSTAListAID=connectedSTAListAID, cambiumEffectiveDeviceDefaultGateWay=cambiumEffectiveDeviceDefaultGateWay, cambiumIDMSumPcktsNum=cambiumIDMSumPcktsNum, cambiumFactoryReset=cambiumFactoryReset, connectedSTAListDLCINR=connectedSTAListDLCINR, networkRadiusVSAmembershipVLANVIDBegin=networkRadiusVSAmembershipVLANVIDBegin, wirelessRadiusServerPort=wirelessRadiusServerPort, dhcpLanLeasetime=dhcpLanLeasetime, networkLan2Enabled=networkLan2Enabled, cambiumJSONCfgExportLink=cambiumJSONCfgExportLink, wirelessInterfaceMode=wirelessInterfaceMode, cambiumMCSIndex=cambiumMCSIndex, cambiumMcastStatus=cambiumMcastStatus, wLanSessionDroppedCount=wLanSessionDroppedCount, cambiumToolBarOpts=cambiumToolBarOpts, cambiumTDDStatsPerSTATable=cambiumTDDStatsPerSTATable, networkLanSpeed=networkLanSpeed, cambiumSTADLCINR=cambiumSTADLCINR, networkRadiusVSAmgmtVLANVP=networkRadiusVSAmgmtVLANVP, cambiumAthTXMulticast=cambiumAthTXMulticast, cambiumpmp80211JSONCfgExportTrap=cambiumpmp80211JSONCfgExportTrap, cambiumIDMSumCRCPcktsNum=cambiumIDMSumCRCPcktsNum, httpPort=httpPort, l2FirewallEntry=l2FirewallEntry, cambiumPmp80211SystemMonitoring=cambiumPmp80211SystemMonitoring, wirelessInterfaceProtocolMode=wirelessInterfaceProtocolMode, cambiumSSHServer=cambiumSSHServer, wirelessRadiusCertificateListRow1=wirelessRadiusCertificateListRow1, l2FirewallEntryName=l2FirewallEntryName, classificationRuleType=classificationRuleType, powerSequenceFactoryDefault=powerSequenceFactoryDefault, mgmtVLANVID=mgmtVLANVID, cambiumBridgeTableAPUpdate=cambiumBridgeTableAPUpdate, ulWLanTotalPacketCount=ulWLanTotalPacketCount, dataVLAN=dataVLAN, systemConfigSWLockBit=systemConfigSWLockBit, wirelessRadiusServerEntry=wirelessRadiusServerEntry, l2FirewallTable=l2FirewallTable, connectedSTADLSNR=connectedSTADLSNR, cambiumARPIndex=cambiumARPIndex, cambiumIDMSumPRQCh0RSSI=cambiumIDMSumPRQCh0RSSI, syslogServerIPSecond=syslogServerIPSecond, wirelessInterfaceGuardInterval=wirelessInterfaceGuardInterval, cambiumpmp80211STADropTrap=cambiumpmp80211STADropTrap, acsScanMaxDwellTime=acsScanMaxDwellTime, syslogServerIPFourth=syslogServerIPFourth, cambiumSubscribedMcastGroupNum=cambiumSubscribedMcastGroupNum, snmpTrapEntryIndex=snmpTrapEntryIndex, syslogServerIPFirst=syslogServerIPFirst, cambiumpmp80211SMRegTrap=cambiumpmp80211SMRegTrap, wirelessRadiusCertificateListRow3=wirelessRadiusCertificateListRow3, cambiumpmp80211GpsFirmwareUpdateStatusTrap=cambiumpmp80211GpsFirmwareUpdateStatusTrap, caminfoScanFrequencyListFortyBand=caminfoScanFrequencyListFortyBand, cambiumpmp80211FullCfgBackupTrap=cambiumpmp80211FullCfgBackupTrap, cambiumAthTXBroadcast=cambiumAthTXBroadcast, mgmtIFIPAddressMode=mgmtIFIPAddressMode, snmpTrapEnable=snmpTrapEnable, networkRadiusVSAmembershipVLANVIDEnd=networkRadiusVSAmembershipVLANVIDEnd, wirelessRadiusUsername=wirelessRadiusUsername, cambiumSTADLRSSI=cambiumSTADLRSSI, ulWLanMCS04Packets=ulWLanMCS04Packets, cambiumEffectiveDeviceName=cambiumEffectiveDeviceName, cambiumToolBarStates=cambiumToolBarStates, wirelessInterfaceScanFrequencyListTen=wirelessInterfaceScanFrequencyListTen, dlWLanMCS10Packets=dlWLanMCS10Packets, dlWLanMCS08Packets=dlWLanMCS08Packets, wirelessInterfaceColocState=wirelessInterfaceColocState, connectedSTATXQuality=connectedSTATXQuality, cambiumSubModeType=cambiumSubModeType, systemConfigLockedCC=systemConfigLockedCC, dhcpServerLeaseEntry=dhcpServerLeaseEntry, rxEtherLanMultiBroadcastKbitCount=rxEtherLanMultiBroadcastKbitCount, idmDeviceListPcktsNum=idmDeviceListPcktsNum, cambiumSubscribedMcastGroupTable=cambiumSubscribedMcastGroupTable, connectedSTASessionTime=connectedSTASessionTime, cambiumForceTabUpdMappingVlan=cambiumForceTabUpdMappingVlan, connectedAPListChannel=connectedAPListChannel, ulWLanMCS02Packets=ulWLanMCS02Packets, dlWLanMCS04Packets=dlWLanMCS04Packets, cambiumIPAliasCnfEntry=cambiumIPAliasCnfEntry, networkWanPPPoEService=networkWanPPPoEService, networkBroadcastStormRate=networkBroadcastStormRate, portForwardingSepMangIPTableEntryWLANPortBegin=portForwardingSepMangIPTableEntryWLANPortBegin, gpsSatelliteId=gpsSatelliteId, networkWanPPPoEMSSClamping=networkWanPPPoEMSSClamping, snmpDomainAccessEnable=snmpDomainAccessEnable, cambiumpmp80211JSONCfgImportTrap=cambiumpmp80211JSONCfgImportTrap, networkPortSecurityAgingTime=networkPortSecurityAgingTime, dlWLanCapacityDroppedPacketCount=dlWLanCapacityDroppedPacketCount, networkAliases=networkAliases, wirelessDeviceCountryCode=wirelessDeviceCountryCode, wirelessRadiusUseDefaultCertificate=wirelessRadiusUseDefaultCertificate, idmDeviceListMAC=idmDeviceListMAC, connectedAPListRemainingSTA=connectedAPListRemainingSTA, networkLanIPAddressMode=networkLanIPAddressMode, cambiumCurrentuImageIVersion=cambiumCurrentuImageIVersion, connectedAPNEState=connectedAPNEState, cambiumIPAliasesInfo=cambiumIPAliasesInfo, dhcpLanLimit=dhcpLanLimit, mgmtIFVP=mgmtIFVP, cambiumMCSNumber=cambiumMCSNumber, cambiumBridgeTableAPStatus=cambiumBridgeTableAPStatus, networkRadiusVSAmappingVLANIndex=networkRadiusVSAmappingVLANIndex, cambiumToolbarSyncSource=cambiumToolbarSyncSource, cambiumEffectiveDeviceDNSIPAddress=cambiumEffectiveDeviceDNSIPAddress, dlWLanMulticastPacketCount=dlWLanMulticastPacketCount, camAPBrTabDevPort=camAPBrTabDevPort, dfsAlternative1CenterFrequency=dfsAlternative1CenterFrequency, prefferedAPTable=prefferedAPTable, cambiumpmp80211GpsFirmwareUpdate=cambiumpmp80211GpsFirmwareUpdate, cambiumForceTabUpdPortFw=cambiumForceTabUpdPortFw, cambiumFullCfgRestoreError=cambiumFullCfgRestoreError, ulWLanTotalOverheadFrameTimePerSecond=ulWLanTotalOverheadFrameTimePerSecond, l2FirewallEntryEtherType=l2FirewallEntryEtherType, dataVLANEnable=dataVLANEnable, apWiFiULCTSRTSMode=apWiFiULCTSRTSMode, dhcpLanEnable=dhcpLanEnable, wirelessRadiusUsePMP450Certificate=wirelessRadiusUsePMP450Certificate, cambiumFullCfgBackUpLink=cambiumFullCfgBackUpLink, cambiumDFSStatus=cambiumDFSStatus, cambiumLANSpeedStatus=cambiumLANSpeedStatus, systemConfigSMLimit=systemConfigSMLimit, wirelessRadiusServerList=wirelessRadiusServerList, connectedSTADLRSSI=connectedSTADLRSSI, cambiumToolbarGlobeState=cambiumToolbarGlobeState, cambiumpmp80211GpsFirmwareUpdateErrorStr=cambiumpmp80211GpsFirmwareUpdateErrorStr, connectedAPScanAge=connectedAPScanAge, ulWLanMCS00Packets=ulWLanMCS00Packets, idmSummaryIntCh0RSSI=idmSummaryIntCh0RSSI, cambiumLinkTestResultUL=cambiumLinkTestResultUL, cambiumManagementIFNetMask=cambiumManagementIFNetMask, l2FirewallEntrySrcMAC=l2FirewallEntrySrcMAC, txEtherLanBroadcastPacketCount=txEtherLanBroadcastPacketCount, cambiumGeneralStatus=cambiumGeneralStatus, cambiumIDMSumLRate=cambiumIDMSumLRate, wirelessInterfaceTXPower=wirelessInterfaceTXPower, dhcpLanHostEntry=dhcpLanHostEntry, dlWLanMCS03Packets=dlWLanMCS03Packets, networkRadiusVSAmgmtVLANVID=networkRadiusVSAmgmtVLANVID, networkRadiusVSAdataVLANVID=networkRadiusVSAdataVLANVID, camSTABrTabDevPort=camSTABrTabDevPort, cambiumToolBar=cambiumToolBar, cambiumEPMPMSN=cambiumEPMPMSN, networkLanEnabled=networkLanEnabled, wirelessRadiusUser1Certificate=wirelessRadiusUser1Certificate, idmSummaryIntMAC=idmSummaryIntMAC, wirelessInterface=wirelessInterface, cambiumSTABridgeTable=cambiumSTABridgeTable, connectedAPListRSSI=connectedAPListRSSI, networkRelaydEnable=networkRelaydEnable, prefferedListTableSecurityMethod=prefferedListTableSecurityMethod, ulWLanMCS14Packets=ulWLanMCS14Packets, l3FirewallEntryDstIP=l3FirewallEntryDstIP, systemConfig=systemConfig, mcastVLAN=mcastVLAN, cambiumGPSSatSNRTable=cambiumGPSSatSNRTable, dlWLanMCSUsedFrameTimePerSecond=dlWLanMCSUsedFrameTimePerSecond, dhcpLanHostIndex=dhcpLanHostIndex, cambiumCnsServConsStat=cambiumCnsServConsStat, cambiumDFSStatusStr=cambiumDFSStatusStr, ulWLanMCS10Packets=ulWLanMCS10Packets, cambLicenseSMcntUnlock=cambLicenseSMcntUnlock, cambiumStaticRoutesCnfEntry=cambiumStaticRoutesCnfEntry, cambiumEffectiveSyncSource=cambiumEffectiveSyncSource, snmpSystemDescription=snmpSystemDescription, cambiumManagementIFStatus=cambiumManagementIFStatus, ulWLanRetransPacketCount=ulWLanRetransPacketCount, cambiumBridgeTableSTAUpdate=cambiumBridgeTableSTAUpdate, wirelessRadiusExtraCertificateSet=wirelessRadiusExtraCertificateSet, connectedSTAMAC=connectedSTAMAC, cambiumEthTXBytes=cambiumEthTXBytes, cambiumRFStatus=cambiumRFStatus, ulWLanMCS03Packets=ulWLanMCS03Packets, networkWanDNSIPAddrSecondary=networkWanDNSIPAddrSecondary, networkWanPPPoEUsername=networkWanPPPoEUsername, networkRadiusVSAmappingVLANEntry=networkRadiusVSAmappingVLANEntry, connectedSTAListMirULRate=connectedSTAListMirULRate, networkLanIPAddr=networkLanIPAddr, apWiFiRTSThreshold=apWiFiRTSThreshold, wirelessFilterMAC=wirelessFilterMAC, dmzEnable=dmzEnable, connectedAPNoise=connectedAPNoise, wirelessMIRList=wirelessMIRList, cambLicenseStatus=cambLicenseStatus, mgmtVLANEnable=mgmtVLANEnable, dlWLanPerUserCapacityDroppedPacketCount=dlWLanPerUserCapacityDroppedPacketCount, wirelessULMIR=wirelessULMIR, mgmtVLANVP=mgmtVLANVP, cambiumEthTXBroadcast=cambiumEthTXBroadcast, cambiumAthRXDrops=cambiumAthRXDrops, portForwardingSepMangIPEntry=portForwardingSepMangIPEntry, cambiumMCSTable=cambiumMCSTable, networkWanPPPoEKeepAlive=networkWanPPPoEKeepAlive, membershipVLANTable=membershipVLANTable, ulWLanCapacityDroppedPacketCount=ulWLanCapacityDroppedPacketCount, networkLanAutoNegotiation=networkLanAutoNegotiation, networkWanPPPoEMTU=networkWanPPPoEMTU, wirelessRadiusDefCertificateView=wirelessRadiusDefCertificateView, cambiumStaticRoutesNetmask=cambiumStaticRoutesNetmask, networkWanPPPoEAuth=networkWanPPPoEAuth, cambiumWirelessMACAddress=cambiumWirelessMACAddress, wirelessRadiusIdentityRealm=wirelessRadiusIdentityRealm, cambiumGPSLatitude=cambiumGPSLatitude, wirelessAcceptableAPSNRThreshold=wirelessAcceptableAPSNRThreshold, wirelessMACFilterIndex=wirelessMACFilterIndex, dlWLanTotalPacketCount=dlWLanTotalPacketCount, networkWanPPPoE=networkWanPPPoE, rxEtherLanBroadcastPacketCount=rxEtherLanBroadcastPacketCount, l3FirewallEntryDSCP=l3FirewallEntryDSCP, mappingVLANTableEntryCVLAN=mappingVLANTableEntryCVLAN, dlWLanErrorDroppedPacketCount=dlWLanErrorDroppedPacketCount, cambiumpmp80211APListUpdate=cambiumpmp80211APListUpdate, cambiumGPSNumVisibleSat=cambiumGPSNumVisibleSat, cambiumIPAliasNetmask=cambiumIPAliasNetmask, sysNetworkEntryAuthenticationFailure=sysNetworkEntryAuthenticationFailure, cambiumpmp80211SoftwareUpdateStatusTrap=cambiumpmp80211SoftwareUpdateStatusTrap, cambiumIDMSumCRCCh1RSSI=cambiumIDMSumCRCCh1RSSI, systemConfigHWLockBit=systemConfigHWLockBit, cambiumEffectiveSTANetworkMode=cambiumEffectiveSTANetworkMode, cambiumSTAConnectedRFBandwidth=cambiumSTAConnectedRFBandwidth, l3FirewallEntryDstMask=l3FirewallEntryDstMask, cambiumSSHServerEnable=cambiumSSHServerEnable, camAPBrTabBridgeName=camAPBrTabBridgeName, ulWLanMCS09Packets=ulWLanMCS09Packets, cambiumDriverType=cambiumDriverType, wirelessMIRSTAProfileNumber=wirelessMIRSTAProfileNumber, wirelessInterfaceRateMinMCS=wirelessInterfaceRateMinMCS, forceMcastBcast4Addr=forceMcastBcast4Addr, wirelessInterfaceScanFrequencyBandwidth=wirelessInterfaceScanFrequencyBandwidth, cambiumStaticRoutesCnfTable=cambiumStaticRoutesCnfTable, dlWLanMultiBroadcastKbitCount=dlWLanMultiBroadcastKbitCount, networkWanPPPoEPassword=networkWanPPPoEPassword, wirelessRadiusUsePMP320Certificate=wirelessRadiusUsePMP320Certificate, wirelessRadiusUser2Certificate=wirelessRadiusUser2Certificate, cambiumLAN2Status=cambiumLAN2Status, systemDeviceLocHeight=systemDeviceLocHeight, wirelessInterfaceSSID=wirelessInterfaceSSID)
mibBuilder.exportSymbols("CAMBIUM-PMP80211-MIB", connectedSTAClickTWebSec=connectedSTAClickTWebSec, cambiumAPConnectedSTAListTable=cambiumAPConnectedSTAListTable, snmpDomainAccessIPMask=snmpDomainAccessIPMask, cambiumEffectiveDeviceWANPPPoEStatus=cambiumEffectiveDeviceWANPPPoEStatus, l2FirewallEntryInterface=l2FirewallEntryInterface, snmpTrapTable=snmpTrapTable, systemDeviceLocLatitude=systemDeviceLocLatitude, wirelessRadiusServerTable=wirelessRadiusServerTable, camSTABrTabDevMACAddress=camSTABrTabDevMACAddress, connectedSTAClickTHostName=connectedSTAClickTHostName, cambiumEthRXBytes=cambiumEthRXBytes, cambiumARPMAC=cambiumARPMAC, connectedSTAListDLMCS=connectedSTAListDLMCS, networkLan2AutoNegotiation=networkLan2AutoNegotiation, wirelessInterfaceTPCTRL=wirelessInterfaceTPCTRL, wirelessRadiusRetry=wirelessRadiusRetry, wirelessCellSizeUnit=wirelessCellSizeUnit, networkWanIPAddressMode=networkWanIPAddressMode, wirelessStaIsolate=wirelessStaIsolate, cambiumpmp80211STADisconnect=cambiumpmp80211STADisconnect, connectedAPListNEAge=connectedAPListNEAge, connectedAPAuthMethod=connectedAPAuthMethod, networkWanMTU=networkWanMTU, cambiumJSONCfgExportStatus=cambiumJSONCfgExportStatus, ulWLanPerUserErrorDroppedPacketCount=ulWLanPerUserErrorDroppedPacketCount, cambiumStaticRoutesCnfInfo=cambiumStaticRoutesCnfInfo, connectedAPListRate=connectedAPListRate, cambiumRealTimeStatsMonitoring=cambiumRealTimeStatsMonitoring, dhcpStaticIP=dhcpStaticIP, dhcpServerEndIP=dhcpServerEndIP, connectedAPListBandwidth=connectedAPListBandwidth, connectedSTAListMirSrc=connectedSTAListMirSrc, staticRoutesEnableMain=staticRoutesEnableMain, cambiumpmp80211ConfigurationReset=cambiumpmp80211ConfigurationReset, connectedSTAMcastGRP4=connectedSTAMcastGRP4, cambiumIDMSumMAC=cambiumIDMSumMAC, mgmtVLAN=mgmtVLAN, cambiumGPSDeviceInfo=cambiumGPSDeviceInfo, cambiumARPEntry=cambiumARPEntry, rxEtherLanKbitCount=rxEtherLanKbitCount, connectedAPListCINR=connectedAPListCINR, connectedAPListScanAge=connectedAPListScanAge, classificationListTable=classificationListTable, dlWLanMCS14Packets=dlWLanMCS14Packets, dlWLanRetransPacketCount=dlWLanRetransPacketCount, networkBridgeDNSIPAddr=networkBridgeDNSIPAddr, sysRebootCount=sysRebootCount, l2FirewallEnable=l2FirewallEnable, syslogServerIPThird=syslogServerIPThird, wirelessMaximumSTA=wirelessMaximumSTA, syslogServerLogMask=syslogServerLogMask, cambiumESN=cambiumESN, wirelessInterfaceConnectionState=wirelessInterfaceConnectionState, mgmtIF=mgmtIF, portForwardingEntryEnable=portForwardingEntryEnable, cambiumEthRXDrops=cambiumEthRXDrops, cambiumARPTable=cambiumARPTable, cambiumFullCfgBackUp=cambiumFullCfgBackUp, wirelessRadiusIdentityStr=wirelessRadiusIdentityStr, ulWLanPerUserTotalPacketCount=ulWLanPerUserTotalPacketCount, portForwardingSepMangIPEntryEnable=portForwardingSepMangIPEntryEnable, cambLicenseMACaddr=cambLicenseMACaddr, networkWanNetmask=networkWanNetmask, cambiumpmp80211SystemActions=cambiumpmp80211SystemActions, dlWLanMCS09Packets=dlWLanMCS09Packets, wirelessInterfaceTPCMode=wirelessInterfaceTPCMode, wirelessRadiusUseDefCertificate=wirelessRadiusUseDefCertificate, cambiumSTAUplinkMCSMode=cambiumSTAUplinkMCSMode, dhcpLanHostMAC=dhcpLanHostMAC, wirelessTXPowerManualLimit=wirelessTXPowerManualLimit, cambiumForceTabUpdPrefAPList=cambiumForceTabUpdPrefAPList, portForwardingTableEntryLANIP=portForwardingTableEntryLANIP, connectedSTAListULRSSI=connectedSTAListULRSSI, ulWLanKbitCount=ulWLanKbitCount, cambiumLinkTestResultDL=cambiumLinkTestResultDL, cambiumAPBridgeTable=cambiumAPBridgeTable, wirelessPrefList=wirelessPrefList, dlWLanMCS01Packets=dlWLanMCS01Packets, cambiumGPSLongitude=cambiumGPSLongitude, wirelessRadiusSeverInfo=wirelessRadiusSeverInfo, idmDeviceListPRQCombRSSI=idmDeviceListPRQCombRSSI, connectedSTAListULCINR=connectedSTAListULCINR, dlWLanBroadcastPacketCount=dlWLanBroadcastPacketCount, cambiumpmp80211ConfigurationSave=cambiumpmp80211ConfigurationSave, l3FirewallEntryName=l3FirewallEntryName, systemConfigGPSLockBit=systemConfigGPSLockBit, idmDeviceListCRCCh0RSSI=idmDeviceListCRCCh0RSSI, cambiumManagementIFGateway=cambiumManagementIFGateway, cambiumLinkTest=cambiumLinkTest, cambiumGPSStatus=cambiumGPSStatus, cambiumCfg=cambiumCfg, cambiumEffectiveTDDRatio=cambiumEffectiveTDDRatio, dlWLanMCS05Packets=dlWLanMCS05Packets, cambiumpmp80211GPSSyncStatusTrap=cambiumpmp80211GPSSyncStatusTrap, cambiumEthRXErrors=cambiumEthRXErrors, connectedSTADistance=connectedSTADistance, cambiumpmp80211SoftwareUpdateError=cambiumpmp80211SoftwareUpdateError, cambiumGPSNumTrackedSat=cambiumGPSNumTrackedSat, cambiumIDMResultsTable=cambiumIDMResultsTable, wirelessInterfaceEncryptionKey=wirelessInterfaceEncryptionKey, cambiumEthTXDrops=cambiumEthTXDrops, mappingVLANTableEntryIndex=mappingVLANTableEntryIndex, txEtherLanKbitCount=txEtherLanKbitCount, dmz=dmz, cambiumSTAPriority=cambiumSTAPriority, networkLLDPMode=networkLLDPMode, cambiumSTAPowerControlMode=cambiumSTAPowerControlMode, cambiumpmp80211SystemConfiguration=cambiumpmp80211SystemConfiguration, sysDFSDetectedCount=sysDFSDetectedCount, ulWLanMCS13Packets=ulWLanMCS13Packets, cambiumForceTabUpdTrap=cambiumForceTabUpdTrap, wirelessRadiusPassword=wirelessRadiusPassword, wirelessAPWifiWLANmode=wirelessAPWifiWLANmode, networkWanIPAddr=networkWanIPAddr, txEtherLanTotalPacketCount=txEtherLanTotalPacketCount, cambiumNetworkEntryFailureSTAMAC=cambiumNetworkEntryFailureSTAMAC, classificationRuleQueue=classificationRuleQueue, cambiumForceTabUpdAPAlias=cambiumForceTabUpdAPAlias, systemNtpServerSecondaryIP=systemNtpServerSecondaryIP, cambiumIDMSumLCombRSSI=cambiumIDMSumLCombRSSI, cambiumStatsResetTimer=cambiumStatsResetTimer, wirelessMIRProfileIndex=wirelessMIRProfileIndex, cambiumIDM=cambiumIDM, ulWLanMulticastPacketCount=ulWLanMulticastPacketCount, connectedAPRate=connectedAPRate, apWiFiDLCTSMode=apWiFiDLCTSMode, dfsAlternative1Bandwidth=dfsAlternative1Bandwidth, wirelessRadiusCertificateList=wirelessRadiusCertificateList, cambiumForceTabUpdDHCP=cambiumForceTabUpdDHCP, snmpReadWriteCommunity=snmpReadWriteCommunity, sysNetworkEntryAttempt=sysNetworkEntryAttempt, networkMode=networkMode, wirelessRadiusUser1CertificateName=wirelessRadiusUser1CertificateName, cambiumSTABridgeEntry=cambiumSTABridgeEntry, prefferedAPEntry=prefferedAPEntry, connectedSTAChannel=connectedSTAChannel, wirelessMIRProfileEntry=wirelessMIRProfileEntry, cambiumAthTXBytes=cambiumAthTXBytes, cambiumIPAliasesNetmask=cambiumIPAliasesNetmask, l2WanRemoteAccess=l2WanRemoteAccess, ulWLanErrorDroppedPacketCount=ulWLanErrorDroppedPacketCount, dlWLanMCS06Packets=dlWLanMCS06Packets, cambiumJSONCfgImportError=cambiumJSONCfgImportError, wirelessInterfaceUnblockUSfreqs=wirelessInterfaceUnblockUSfreqs, connectedAPListNEState=connectedAPListNEState, cambiumEffectiveWANIPAddress=cambiumEffectiveWANIPAddress, cambiumEthRXPackets=cambiumEthRXPackets, cambiumTDDStatsListMAC=cambiumTDDStatsListMAC, systemConfigOperationalLicense=systemConfigOperationalLicense, cambiumToolbarGPSSyncStateStr=cambiumToolbarGPSSyncStateStr, cambiumARPIP=cambiumARPIP, connectedAPListBSSID=connectedAPListBSSID, connectedAPListNoise=connectedAPListNoise, wirelessInterfaceTDDRatio=wirelessInterfaceTDDRatio, lldpd=lldpd, cambiumRadiusVSAStatus=cambiumRadiusVSAStatus, cambiumSTADownlinkMCSMode=cambiumSTADownlinkMCSMode, voipEnable=voipEnable, connectedSTAMcastGRP2=connectedSTAMcastGRP2, cambiumJSONCfgImportStatus=cambiumJSONCfgImportStatus, snmpTrapCommunity=snmpTrapCommunity, wirelessMIRProfileNumber=wirelessMIRProfileNumber, cambiumLANMACAddress=cambiumLANMACAddress, cambiumSTAConductedTXPower=cambiumSTAConductedTXPower, networkLanMTU=networkLanMTU, cambiumIPAliasTableIndex=cambiumIPAliasTableIndex, wirelessRadiusCertificateSet=wirelessRadiusCertificateSet, caminfoScanFrequencyListTwentyBand=caminfoScanFrequencyListTwentyBand, systemConfigSMLockBit=systemConfigSMLockBit, systemConfigETSILicense=systemConfigETSILicense, cambiumPerformanceMonitoring=cambiumPerformanceMonitoring, connectedSTADLMCS=connectedSTADLMCS, mgmtIFNetmask=mgmtIFNetmask, wirelessMulticastIgmpFastLeave=wirelessMulticastIgmpFastLeave, dmzIPAddress=dmzIPAddress, dlWLanPerUserRetransmitPacketCount=dlWLanPerUserRetransmitPacketCount, wirelessRadiusServerIndex=wirelessRadiusServerIndex, cambiumCurrentSWInfo=cambiumCurrentSWInfo, cambiumStaticRoutesCnfNetmask=cambiumStaticRoutesCnfNetmask, membershipVLANTableEntryIndex=membershipVLANTableEntryIndex, idmDeviceListPRQPcktsNum=idmDeviceListPRQPcktsNum, cambiumGPSSatSNREntry=cambiumGPSSatSNREntry, networkRadiusVSAmembershipVLANEntry=networkRadiusVSAmembershipVLANEntry, idmDeviceListCRCCombRSSI=idmDeviceListCRCCombRSSI, snmp=snmp, cambiumAPMcastTotalGroupCount=cambiumAPMcastTotalGroupCount, bcPriority=bcPriority, wirelessMIRProfileDescription=wirelessMIRProfileDescription, portForwardingTable=portForwardingTable, portForwardingTableEntryProtocol=portForwardingTableEntryProtocol, cambiumpmp80211SystemTraps=cambiumpmp80211SystemTraps, pmpMibTree=pmpMibTree, cambiumLinkTestResultDate=cambiumLinkTestResultDate, dlWLanTotalOverheadFrameTimePerSecond=dlWLanTotalOverheadFrameTimePerSecond, cambiumAthRXBroadcast=cambiumAthRXBroadcast, cambiumJSONCfgExport=cambiumJSONCfgExport, cambiumDeviceAgent=cambiumDeviceAgent, portForwarding=portForwarding, cambiumManagementIFIPAddress=cambiumManagementIFIPAddress, cambiumGPSFirmwareUpdateStatus=cambiumGPSFirmwareUpdateStatus, wirelessRadiusDefaultCertificate=wirelessRadiusDefaultCertificate, connectedSTAClickTWebPort=connectedSTAClickTWebPort, systemNtpServer=systemNtpServer, cambiumSystemLog=cambiumSystemLog, wirelessMIRProfileTable=wirelessMIRProfileTable, wirelessInterfaceScanFrequencyListForty=wirelessInterfaceScanFrequencyListForty, cambiumDateTime=cambiumDateTime, systemNtpServerPrimaryIP=systemNtpServerPrimaryIP, wirelessInterfaceSyncSource=wirelessInterfaceSyncSource, wirelessSecurityMethod=wirelessSecurityMethod, l3FirewallEntryInterface=l3FirewallEntryInterface, cambiumIDMTime=cambiumIDMTime, dlWLanPerUserTxPower=dlWLanPerUserTxPower, ulWLanMCSUsedFrameTimePerSecond=ulWLanMCSUsedFrameTimePerSecond, cambiumAcsStatus=cambiumAcsStatus, mcastVLANEnable=mcastVLANEnable, staTxQuality=staTxQuality, connectedAPAuthenticationMethod=connectedAPAuthenticationMethod, l3FirewallEntryProtocol=l3FirewallEntryProtocol, cambiumIPAliasesIpAddr=cambiumIPAliasesIpAddr, cambiumpmp80211STAListUpdateStatus=cambiumpmp80211STAListUpdateStatus, cambiumLAN2ModeStatus=cambiumLAN2ModeStatus, l2SnmpLanRemoteAccess=l2SnmpLanRemoteAccess, cambiumpmp80211DeviceReboot=cambiumpmp80211DeviceReboot, ulWLanMCS07Packets=ulWLanMCS07Packets, cambiumAthTXPackets=cambiumAthTXPackets, wirelessRadiusPMP450Certificate=wirelessRadiusPMP450Certificate, dlWLanMCS11Packets=dlWLanMCS11Packets, l3FirewallEntryPort=l3FirewallEntryPort, cambiumDHCP=cambiumDHCP, l3FirewallEntryIndex=l3FirewallEntryIndex, membershipVLANTableEntryVIDBegin=membershipVLANTableEntryVIDBegin, connectedAPRemainingSTA=connectedAPRemainingSTA, l2FirewallEntryLog=l2FirewallEntryLog, wirelessDevice=wirelessDevice, cambiumIPAliasesEnable=cambiumIPAliasesEnable, snmpTrapEntryIP=snmpTrapEntryIP, cambiumPmp80211SystemStatus=cambiumPmp80211SystemStatus, cambiumSTAConnectedAP=cambiumSTAConnectedAP, sysCPUUsage=sysCPUUsage, classificationRuleDirection=classificationRuleDirection, cambiumEffectiveNetworkLanMTU=cambiumEffectiveNetworkLanMTU, cambiumIPAliasTable=cambiumIPAliasTable, cambiumTDDStatsPerSTAIndex=cambiumTDDStatsPerSTAIndex, connectedAPListINT=connectedAPListINT, cambiumLicenseInfo=cambiumLicenseInfo, cambiumEffectiveDeviceLANNetMask=cambiumEffectiveDeviceLANNetMask, connectedSTAULRSSI=connectedSTAULRSSI, cambiumSTAConnectedAPTable=cambiumSTAConnectedAPTable, cambiumpmp80211GpsFirmwareUpdateError=cambiumpmp80211GpsFirmwareUpdateError, wirelessMACFilterTable=wirelessMACFilterTable, classificationListEntry=classificationListEntry, wirelessRadiusCurrentGUIUserAuth=wirelessRadiusCurrentGUIUserAuth, cambiumSTAConnectedAPListEntry=cambiumSTAConnectedAPListEntry)
mibBuilder.exportSymbols("CAMBIUM-PMP80211-MIB", connectedAPListFrequency=connectedAPListFrequency, dlkmNATSIPHelpers=dlkmNATSIPHelpers, cambiumLinkTestStartForMAC=cambiumLinkTestStartForMAC, networkLanGatewayIP=networkLanGatewayIP, camAPBrTabDevMACAddress=camAPBrTabDevMACAddress, wirelessInterfacePTPMACAddress=wirelessInterfacePTPMACAddress, cambiumpmp80211GPSAutopopulate=cambiumpmp80211GPSAutopopulate, systemConfigTimezone=systemConfigTimezone, connectedSTAPriority=connectedSTAPriority, l3FirewallEnable=l3FirewallEnable, wirelessRateMaxMCS=wirelessRateMaxMCS, portForwardingTableEntryIndex=portForwardingTableEntryIndex, ulWLanTotalAvailableFrameTimePerSecond=ulWLanTotalAvailableFrameTimePerSecond, ulWLanMCS15Packets=ulWLanMCS15Packets, cambiumIDMMode=cambiumIDMMode, cambiumAPConnectedSTAEntry=cambiumAPConnectedSTAEntry, dlWLanMCS13Packets=dlWLanMCS13Packets, gpsSnrValue=gpsSnrValue, cambiumStaticRoutesTable=cambiumStaticRoutesTable, dlWLanMCS00Packets=dlWLanMCS00Packets, portForwardingSepMangIPTableEntryWLANPortMappedBegin=portForwardingSepMangIPTableEntryWLANPortMappedBegin, cambiumEthTXPackets=cambiumEthTXPackets, cambiumEffectiveAuthenticationType=cambiumEffectiveAuthenticationType, cambiumFullCfgBackUpError=cambiumFullCfgBackUpError, connectedSTATXCapacity=connectedSTATXCapacity, systemDeviceLocLongitude=systemDeviceLocLongitude, idmDeviceListPRQCh0RSSI=idmDeviceListPRQCh0RSSI, connectedAPBSSID=connectedAPBSSID, connectedSTAIP=connectedSTAIP, cambiumDeviceAgentEnable=cambiumDeviceAgentEnable, dhcpOption82=dhcpOption82, networkRadiusVSAmcastVLANVID=networkRadiusVSAmcastVLANVID, wirelessInterfacePTPMode=wirelessInterfacePTPMode, cambiumLinkTestDuration=cambiumLinkTestDuration, cambiumRegisteredMcastGroupIP=cambiumRegisteredMcastGroupIP, networkRadiusVSAmembershipVLANIndex=networkRadiusVSAmembershipVLANIndex, networkPortSecurityMax=networkPortSecurityMax, systemConfigMinAntGain=systemConfigMinAntGain, httpsPort=httpsPort, wirelessRadiusUser2CertificateName=wirelessRadiusUser2CertificateName, wirelessMulticastEnhanceMode=wirelessMulticastEnhanceMode, cambiumIDMSumCRCCh0RSSI=cambiumIDMSumCRCCh0RSSI, cambiumEthTXErrors=cambiumEthTXErrors, l2FirewallEntryDstMAC=l2FirewallEntryDstMAC, l2FirewallEntryDstMask=l2FirewallEntryDstMask, wirelessRadiusCertificateListRow2=wirelessRadiusCertificateListRow2, acsScanMinDwellTime=acsScanMinDwellTime, cambiumDhcpStatus=cambiumDhcpStatus, cambiumStaticRoutesCnfDestIP=cambiumStaticRoutesCnfDestIP, txEtherLanErrorPacketCount=txEtherLanErrorPacketCount, wirelessSMWifiDistance=wirelessSMWifiDistance, l2FirewallEntrySrcMask=l2FirewallEntrySrcMask, cambLicenseVersion=cambLicenseVersion, connectedSTAMcastGRP1=connectedSTAMcastGRP1, l2DHCPServersBelowSTA=l2DHCPServersBelowSTA, cambiumpmp80211ConfigurationApply=cambiumpmp80211ConfigurationApply, cambiumJSONCfgImport=cambiumJSONCfgImport, wirelessInterfaceEncryption=wirelessInterfaceEncryption, snmpReadOnlyCommunity=snmpReadOnlyCommunity, cambiumForceSTARescan=cambiumForceSTARescan, cambiumEffectiveAntennaGain=cambiumEffectiveAntennaGain, cambiumConfigurationApplyOnReboot=cambiumConfigurationApplyOnReboot, caminfo=caminfo, networkRadiusVSAmappingVLANTable=networkRadiusVSAmappingVLANTable, sysNetworkEntrySuccess=sysNetworkEntrySuccess, wirelessRadius=wirelessRadius, dhcpLeaseDevName=dhcpLeaseDevName, cambiumFullCfgBackUpStatus=cambiumFullCfgBackUpStatus, wirelessRadiusGUIUserAuth=wirelessRadiusGUIUserAuth, cambiumForceTabUpdl3Frw=cambiumForceTabUpdl3Frw, dhcpServerDNSIP=dhcpServerDNSIP, txEtherLanMultiBroadcastKbitCount=txEtherLanMultiBroadcastKbitCount, systemConfigisGPSkeyOK=systemConfigisGPSkeyOK, idmSummaryIntSSID=idmSummaryIntSSID, networkLanDNSIPAddrSecondary=networkLanDNSIPAddrSecondary, mappingVLANTableEntrySVLAN=mappingVLANTableEntrySVLAN, wirelessInterfaceiFreqReuseMode=wirelessInterfaceiFreqReuseMode, membershipVLANTableEntryVIDEnd=membershipVLANTableEntryVIDEnd, wirelessAcceptableAPCINRThreshold=wirelessAcceptableAPCINRThreshold, portForwardingEntry=portForwardingEntry, cambiumIDMResultsEntry=cambiumIDMResultsEntry, dhcpLeaseMAC=dhcpLeaseMAC, cambiumAthRXErrors=cambiumAthRXErrors, cambiumSystem=cambiumSystem, connectedAPCAPS=connectedAPCAPS, cambiumGPSCurrentSyncState=cambiumGPSCurrentSyncState, cambiumSTADistanceMil=cambiumSTADistanceMil, cambiumIPAliasesIndex=cambiumIPAliasesIndex, wirelessInterfaceColocSystemSyncSrc=wirelessInterfaceColocSystemSyncSrc, syslogServerLogToWeb=syslogServerLogToWeb, cambiumStaticRoutesCnfGW=cambiumStaticRoutesCnfGW, staTxCapacity=staTxCapacity, cambiumpmp80211StatsPerSTAListUpdate=cambiumpmp80211StatsPerSTAListUpdate, l2FirewallEntryVlanID=l2FirewallEntryVlanID, connectedAPSSID=connectedAPSSID, cambiumForceTabUpdMcastDeny=cambiumForceTabUpdMcastDeny, cambiumEffectiveDeviceWANNetMask=cambiumEffectiveDeviceWANNetMask, wirelessInterfaceRateMaxMCS=wirelessInterfaceRateMaxMCS, rxEtherLanErrorPacketCount=rxEtherLanErrorPacketCount, connectedSTAMcastGRP0=connectedSTAMcastGRP0, l3FirewallEntrySrcMask=l3FirewallEntrySrcMask, mcastVLANVP=mcastVLANVP, wirelessInterfaceTDDAntennaGain=wirelessInterfaceTDDAntennaGain, dhcpStaticMAC=dhcpStaticMAC, networkRadiusVSAmgmtIFVP=networkRadiusVSAmgmtIFVP, wirelessMgmtPacketRate=wirelessMgmtPacketRate, vlans=vlans, networkBridgeMTU=networkBridgeMTU, mappingVLANEntry=mappingVLANEntry, camSTABrTabBridgeName=camSTABrTabBridgeName, cambiumpmp80211StatsPerSTAListUpdateStatus=cambiumpmp80211StatsPerSTAListUpdateStatus, networkWanGatewayIP=networkWanGatewayIP, mappingVLANTable=mappingVLANTable, cambiumInternetConnectionServerIP=cambiumInternetConnectionServerIP, connectedSTAListIP=connectedSTAListIP, connectedSTAMcastGRP3=connectedSTAMcastGRP3, cambiumToolbarDeviceConfigurationState=cambiumToolbarDeviceConfigurationState, acsEnable=acsEnable, networkBridgeDNSIPAddrPrimary=networkBridgeDNSIPAddrPrimary, cambiumIDMSumCRCCombRSSI=cambiumIDMSumCRCCombRSSI, cambiumEffectiveNetworkBridgeMTU=cambiumEffectiveNetworkBridgeMTU, dhcpServerStaticHostEntry=dhcpServerStaticHostEntry, sysRebootCounter=sysRebootCounter, cambiumSystemUptime=cambiumSystemUptime, wirelessSTAPriority=wirelessSTAPriority, portForwardingSepMangIPTableEntryLANIP=portForwardingSepMangIPTableEntryLANIP, cambiumDeviceAgentCNSURL=cambiumDeviceAgentCNSURL, cambiumSTAConnectedAPListTable=cambiumSTAConnectedAPListTable, PYSNMP_MODULE_ID=pmpMibTree, networkLanNetmask=networkLanNetmask, cambiumWebServer=cambiumWebServer, idmDeviceListCycle=idmDeviceListCycle, mcastGroupLimit=mcastGroupLimit, ulWLanBroadcastPacketCount=ulWLanBroadcastPacketCount, ulWLanMCS11Packets=ulWLanMCS11Packets, cambiumAthRXPackets=cambiumAthRXPackets, wirelessSmoothingBit=wirelessSmoothingBit, l2Firewall=l2Firewall, wirelessInterfaceScanFrequencyListFive=wirelessInterfaceScanFrequencyListFive, l3FirewallEntryToS=l3FirewallEntryToS, cambiumSTADistanceKm=cambiumSTADistanceKm, cambiumAPCnsMGMTState=cambiumAPCnsMGMTState, cambiumpmpETSIframeSkipTrap=cambiumpmpETSIframeSkipTrap, connectedSTAULSNR=connectedSTAULSNR, cambiumCurrentuImageVersion=cambiumCurrentuImageVersion, idmDeviceListLRate=idmDeviceListLRate, dlWLanTotalUsedFrameTimePerSecond=dlWLanTotalUsedFrameTimePerSecond, cambiumAthTXErrors=cambiumAthTXErrors, networkWan=networkWan, camSTABrTabAgingTime=camSTABrTabAgingTime, l3FirewallEntryAction=l3FirewallEntryAction, portForwardingTableEntryWLANPortBegin=portForwardingTableEntryWLANPortBegin, portForwardingSepMangIPTableEntryIndex=portForwardingSepMangIPTableEntryIndex, dhcpStaticIndex=dhcpStaticIndex, networkBridge=networkBridge, classificationRuleMAC=classificationRuleMAC, cambiumAPBridgeEntry=cambiumAPBridgeEntry, networkBridgeDNSIPAddrSecondary=networkBridgeDNSIPAddrSecondary, dhcpLeaseIndex=dhcpLeaseIndex, rxEtherLanDroppedPacketCount=rxEtherLanDroppedPacketCount, idmSummaryIntCombRSSI=idmSummaryIntCombRSSI, classificationRuleIndex=classificationRuleIndex, cambiumHWInfo=cambiumHWInfo, networkPortSecurity=networkPortSecurity, cambiumIPAliasEntry=cambiumIPAliasEntry, qosEnable=qosEnable, connectedAPSNR=connectedAPSNR, connectedSTAMirULRate=connectedSTAMirULRate, dhcpLanHostIP=dhcpLanHostIP, networkLanDuplex=networkLanDuplex, cambium=cambium, cambiumStaticRoutesInterface=cambiumStaticRoutesInterface, cambiumIDMSummaryTable=cambiumIDMSummaryTable, cambiumLANStatus=cambiumLANStatus, connectedAPListSSID=connectedAPListSSID, networkNATPMP=networkNATPMP, dhcpServerLeaseTable=dhcpServerLeaseTable, cambiumStaticRoutesGW=cambiumStaticRoutesGW, wirelessInterfaceHTMode=wirelessInterfaceHTMode, networkLan2PoEEnabled=networkLan2PoEEnabled, network=network, cambiumToolbarGPSSyncState=cambiumToolbarGPSSyncState, cambiumIPAliasCnfTable=cambiumIPAliasCnfTable, connectedSTAAID=connectedSTAAID, wirelessType=wirelessType, connectedAPMeetNEAttemptCriteria=connectedAPMeetNEAttemptCriteria, cambiumCNSDeviceAgentPassword=cambiumCNSDeviceAgentPassword, wirelessInterfaceScanFrequencyListTwenty=wirelessInterfaceScanFrequencyListTwenty, cambiumIDMSumPRQCh1RSSI=cambiumIDMSumPRQCh1RSSI, prefferedListTableEntryKEY=prefferedListTableEntryKEY, cambiumUbootVersion=cambiumUbootVersion, dfsAlternative2Bandwidth=dfsAlternative2Bandwidth, cambiumpmp80211Tools=cambiumpmp80211Tools, wirelessRadiusUser1CertificateView=wirelessRadiusUser1CertificateView, cambiumStaticRoutesDestIP=cambiumStaticRoutesDestIP, cambiumForceTabUpdMIR=cambiumForceTabUpdMIR, cambiumSTAConnectedAPEntry=cambiumSTAConnectedAPEntry, routing=routing, cambiumpmp80211STAListUpdate=cambiumpmp80211STAListUpdate, ulWLanMCS01Packets=ulWLanMCS01Packets, cambiumACSCfg=cambiumACSCfg, centerFrequency=centerFrequency, dhcpLeaseIP=dhcpLeaseIP, webService=webService, cambiumFullCfgRestore=cambiumFullCfgRestore, connectedAPINT=connectedAPINT, idmDeviceListLCombRSSI=idmDeviceListLCombRSSI, connectedSTAListULMCS=connectedSTAListULMCS, connectedAPNEAge=connectedAPNEAge, ulWLanPerUserKbitCount=ulWLanPerUserKbitCount, idmDeviceListCRCPcktsNum=idmDeviceListCRCPcktsNum, connectedSTAClickTHWAddr=connectedSTAClickTHWAddr, l3Firewall=l3Firewall, cambiumSTADropReason=cambiumSTADropReason, connectedSTAMcastTotalGroups=connectedSTAMcastTotalGroups, wirelessRadiusPMP320Certificate=wirelessRadiusPMP320Certificate, l2FirewallEntryAction=l2FirewallEntryAction, cambiumSTAMAC=cambiumSTAMAC, networkLan=networkLan, cambiumConnectedAPMACAddress=cambiumConnectedAPMACAddress, networkLan2Duplex=networkLan2Duplex, networkBridgeNetmask=networkBridgeNetmask, cambiumLAN2SpeedStatus=cambiumLAN2SpeedStatus, membershipVLANEntry=membershipVLANEntry, cambiumpmp80211APListUpdateStatus=cambiumpmp80211APListUpdateStatus, dlWLanPerUserKbitCount=dlWLanPerUserKbitCount, dlWLanMCS07Packets=dlWLanMCS07Packets, camAPBrTabAgingTime=camAPBrTabAgingTime, connectedSTAListMAC=connectedSTAListMAC, wirelessAcceptableAPRSSIThreshold=wirelessAcceptableAPRSSIThreshold, connectedSTADLRateMbps=connectedSTADLRateMbps, l3FirewallEntry=l3FirewallEntry, cambiumForceTabUpdRadiusServ=cambiumForceTabUpdRadiusServ, wirelessRadiusServerIP=wirelessRadiusServerIP, cambiumStaticRoutesCnfEnbl=cambiumStaticRoutesCnfEnbl, dlWLanMCS12Packets=dlWLanMCS12Packets, networkBridgeGatewayIP=networkBridgeGatewayIP, l3FirewallEntrySrcIP=l3FirewallEntrySrcIP, connectedSTAListMirDLRate=connectedSTAListMirDLRate, ulWLanMCS06Packets=ulWLanMCS06Packets, connectedAPListCAPS=connectedAPListCAPS, networkRadiusVSAmappingVLANCVLAN=networkRadiusVSAmappingVLANCVLAN, cambiumMCSEntry=cambiumMCSEntry, rxEtherLanMulticastPacketCount=rxEtherLanMulticastPacketCount, networkWanPPPoEAC=networkWanPPPoEAC, networkLanDefaultIP=networkLanDefaultIP, wirelessCcaEnable=wirelessCcaEnable, txEtherLanDroppedPacketCount=txEtherLanDroppedPacketCount, mgmtIFEnable=mgmtIFEnable, dhcpServerStartIP=dhcpServerStartIP, networkBridgeIPAddressMode=networkBridgeIPAddressMode, wirelessDLMIR=wirelessDLMIR, cambiumEffectiveMcastGroupLimit=cambiumEffectiveMcastGroupLimit, dlWLanTotalAvailableFrameTimePerSecond=dlWLanTotalAvailableFrameTimePerSecond)
mibBuilder.exportSymbols("CAMBIUM-PMP80211-MIB", connectedSTAMirSrc=connectedSTAMirSrc, dlWLanMCS15Packets=dlWLanMCS15Packets, portForwardingSepMangIPTableEntryWLANPortEnd=portForwardingSepMangIPTableEntryWLANPortEnd, cambiumForceTabUpdStaticRoutesCnf=cambiumForceTabUpdStaticRoutesCnf, caminfoScanFrequencyListCountry=caminfoScanFrequencyListCountry, cambiumAthRXMulticast=cambiumAthRXMulticast, wirelessMACFilterEntry=wirelessMACFilterEntry, cambiumForceTabUpdPortFwSepMangIP=cambiumForceTabUpdPortFwSepMangIP, networkSTP=networkSTP, cambiumAPConnectedSTATable=cambiumAPConnectedSTATable, mgmtIFVID=mgmtIFVID, networkRadiusVSAdataVLANVP=networkRadiusVSAdataVLANVP, cambiumEthTXMulticast=cambiumEthTXMulticast, portForwardingTableEntryWLANPortMappedBegin=portForwardingTableEntryWLANPortMappedBegin, cambiumEffectiveCountryCode=cambiumEffectiveCountryCode, portForwardingSepMangIPTable=portForwardingSepMangIPTable, portForwardingSepMangIPTableEntryProtocol=portForwardingSepMangIPTableEntryProtocol, cambiumpmp80211SoftwareUpdateStatus=cambiumpmp80211SoftwareUpdateStatus, l2FirewallEntryIndex=l2FirewallEntryIndex, networkWanDNSIPAddrPrimary=networkWanDNSIPAddrPrimary, cambiumpmp80211SoftwareUpdate=cambiumpmp80211SoftwareUpdate, cambiumAthTXDrops=cambiumAthTXDrops, wirelessMIREnable=wirelessMIREnable, wirelessInterfaceTDDFrameSize=wirelessInterfaceTDDFrameSize, dlWLanKbitCount=dlWLanKbitCount, l2LanRemoteAccess=l2LanRemoteAccess, snmpDomainAccessIP=snmpDomainAccessIP, cambiumGPSHeight=cambiumGPSHeight, cambiumJSONCfgExportError=cambiumJSONCfgExportError, cambiumpmp80211SystemUpTrap=cambiumpmp80211SystemUpTrap, networkRadiusVSAmappingVLANSVLAN=networkRadiusVSAmappingVLANSVLAN, mgmtIFIPAddr=mgmtIFIPAddr, cambiumpmp80211DFSStatusTrap=cambiumpmp80211DFSStatusTrap, cambiumCnsServAccountID=cambiumCnsServAccountID, gpsSatelliteStatus=gpsSatelliteStatus, cambiumGPSTime=cambiumGPSTime, cambLicenseCountry=cambLicenseCountry, cambiumLANModeStatus=cambiumLANModeStatus, ulWLanTotalUsedFrameTimePerSecond=ulWLanTotalUsedFrameTimePerSecond, cambiumEffectiveDeviceIPAddress=cambiumEffectiveDeviceIPAddress, connectedSTAListChannel=connectedSTAListChannel, networkLLDP=networkLLDP, classificationRuleMask=classificationRuleMask, mgmtIFGateway=mgmtIFGateway, cambiumTDDStatsPerSTAEntry=cambiumTDDStatsPerSTAEntry, cambiumIPAliasIP=cambiumIPAliasIP, cambiumIDMSumMaxRate=cambiumIDMSumMaxRate, cambiumWLANStatus=cambiumWLANStatus, networkLanDNSIPAddr=networkLanDNSIPAddr, cambiumStaticRoutesIndex=cambiumStaticRoutesIndex, cambiumStaticRoutesCnfIndex=cambiumStaticRoutesCnfIndex, cambiumEffectiveSSID=cambiumEffectiveSSID, multicast=multicast, cambiumStaticRoutesEntry=cambiumStaticRoutesEntry, wirelessRadiusUser2CertificateView=wirelessRadiusUser2CertificateView, ulWLanMCS08Packets=ulWLanMCS08Packets, connectedAPFrequency=connectedAPFrequency, caminfoScanFrequencyListAllow59band=caminfoScanFrequencyListAllow59band, dlWLanPerUserErrorDroppedPacketCount=dlWLanPerUserErrorDroppedPacketCount, connectedAPListMeetNEAttemptCriteria=connectedAPListMeetNEAttemptCriteria, wirelessDefaultCountryCode=wirelessDefaultCountryCode, dhcpServerStaticHostTable=dhcpServerStaticHostTable, l3FirewallTable=l3FirewallTable, cambiumForceTabUpdl2Frw=cambiumForceTabUpdl2Frw, cambiumDHCPOption82Status=cambiumDHCPOption82Status, idmDeviceListCRCCh1RSSI=idmDeviceListCRCCh1RSSI, cambiumDeviceLongitude=cambiumDeviceLongitude, dlWLanMCS02Packets=dlWLanMCS02Packets, wirelessRadiusTimeout=wirelessRadiusTimeout, mgmtIFVLAN=mgmtIFVLAN, systemNtpServerIPMode=systemNtpServerIPMode, cambiumpmp80211ConfigurationDiscard=cambiumpmp80211ConfigurationDiscard, useMACAddressAsWirelessRadiusUsername=useMACAddressAsWirelessRadiusUsername, networkBroadcastStormEnabled=networkBroadcastStormEnabled, cambiumSubscribedMcastGroupEntry=cambiumSubscribedMcastGroupEntry, cambiumInternetConnectionPollPeriod=cambiumInternetConnectionPollPeriod, classificationRuleIP=classificationRuleIP, cambiumFullCfgRestoreStatus=cambiumFullCfgRestoreStatus, wirelessMACFilterPolicy=wirelessMACFilterPolicy, networkWanDNSIPAddr=networkWanDNSIPAddr, cambiumLinkTestStatus=cambiumLinkTestStatus, cambiumpmp80211ConfigurationState=cambiumpmp80211ConfigurationState, cambiumBridgeTableSTAStatus=cambiumBridgeTableSTAStatus, ulWLanMCS05Packets=ulWLanMCS05Packets, camAPBrTabSTAMACAddress=camAPBrTabSTAMACAddress, ulWLanMultiBroadcastKbitCount=ulWLanMultiBroadcastKbitCount, prefferedListTableEntryIndex=prefferedListTableEntryIndex, cambiumIDMEnable=cambiumIDMEnable, idmDeviceListPRQCh1RSSI=idmDeviceListPRQCh1RSSI, classificationRuleValue=classificationRuleValue, cambiumMcastHandlingStatus=cambiumMcastHandlingStatus, connectedSTAULMCS=connectedSTAULMCS, cambiumARPInterface=cambiumARPInterface, dhcpServerGatewayIP=dhcpServerGatewayIP, snmpTrapEntry=snmpTrapEntry, cambiumSTADLSNR=cambiumSTADLSNR, networkLanDNSIPAddrPrimary=networkLanDNSIPAddrPrimary, wirelessFilterInfo=wirelessFilterInfo, wirelessMIRAPDefaultProfileNumber=wirelessMIRAPDefaultProfileNumber, wirelessMACFilter=wirelessMACFilter, confQoS=confQoS, dhcpLanHostTable=dhcpLanHostTable, cambiumIDMSumPRQCombRSSI=cambiumIDMSumPRQCombRSSI, connectedAPChannel=connectedAPChannel, txEtherLanMulticastPacketCount=txEtherLanMulticastPacketCount, dlWLanPerUserTotalPacketCount=dlWLanPerUserTotalPacketCount, l3FirewallEntryLog=l3FirewallEntryLog, networkLan2Speed=networkLan2Speed, wirelessRadiusServerSecret=wirelessRadiusServerSecret, wirelessMaximumCellSize=wirelessMaximumCellSize, portForwardingTableEntryWLANPortEnd=portForwardingTableEntryWLANPortEnd, cambiumpmp80211SystemRebootTrap=cambiumpmp80211SystemRebootTrap, cambiumAPConnectedSTAListEntry=cambiumAPConnectedSTAListEntry, connectedAPBandwidth=connectedAPBandwidth, ulWLanMCS12Packets=ulWLanMCS12Packets, cambiumSTAConnectedRFFrequency=cambiumSTAConnectedRFFrequency, networkUPNP=networkUPNP, dhcpLanStart=dhcpLanStart, cambiumIDMSummaryEntry=cambiumIDMSummaryEntry, cambiumAdvancedPerformanceMonitoring=cambiumAdvancedPerformanceMonitoring, cambiumpmp80211NetworkEntryFailureTrap=cambiumpmp80211NetworkEntryFailureTrap, dfsAlternative2CenterFrequency=dfsAlternative2CenterFrequency, cambiumLinkStatus=cambiumLinkStatus, cambiumForceTabUpdQos=cambiumForceTabUpdQos, prefferedListTableEntrySSID=prefferedListTableEntrySSID, dataVLANVID=dataVLANVID, cambiumpmp80211SAModeTrap=cambiumpmp80211SAModeTrap, mcastVLANVID=mcastVLANVID, cambiumForceTabUpdVlan=cambiumForceTabUpdVlan, connectedAPRSSI=connectedAPRSSI, idmDeviceListMaxRate=idmDeviceListMaxRate, cambiumAPNumberOfConnectedSTA=cambiumAPNumberOfConnectedSTA, cambiumEthRXBroadcast=cambiumEthRXBroadcast, snmpTrapEntryPort=snmpTrapEntryPort, mcPriority=mcPriority, cambiumPropagationDelay=cambiumPropagationDelay, networkBridgeIPAddr=networkBridgeIPAddr, rxEtherLanTotalPacketCount=rxEtherLanTotalPacketCount, cambiumEthRXMulticast=cambiumEthRXMulticast, snmpSystemName=snmpSystemName, cambiumAthRXBytes=cambiumAthRXBytes, cambiumpmp80211FullCfgRestoreTrap=cambiumpmp80211FullCfgRestoreTrap, cambiumDeviceLatitude=cambiumDeviceLatitude, cambiumpmp80211SoftwareUpdateErrorStr=cambiumpmp80211SoftwareUpdateErrorStr, wirelessInterfaceSyncHoldTime=wirelessInterfaceSyncHoldTime, systemConfigDeviceName=systemConfigDeviceName)
