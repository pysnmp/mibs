#
# PySNMP MIB module LLDP-EXT-MED-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/standard/iee/LLDP-MED-MIB
# Produced by pysmi-1.1.12 at Wed Jul  3 09:07:07 2024
# On host fv-az2021-432 platform Linux version 6.5.0-1022-azure by user runner
# Using Python version 3.10.14 (main, Jun 20 2024, 15:20:03) [GCC 11.4.0]
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
Dscp, = mibBuilder.importSymbols("DIFFSERV-DSCP-TC", "Dscp")
lldpRemIndex, lldpExtensions, lldpLocPortNum, lldpRemChassisIdSubtype, lldpRemTimeMark, lldpRemChassisId, lldpRemLocalPortNum, lldpPortConfigEntry = mibBuilder.importSymbols("LLDP-MIB", "lldpRemIndex", "lldpExtensions", "lldpLocPortNum", "lldpRemChassisIdSubtype", "lldpRemTimeMark", "lldpRemChassisId", "lldpRemLocalPortNum", "lldpPortConfigEntry")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Unsigned32, iso, ModuleIdentity, Counter32, Gauge32, ObjectIdentity, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, MibIdentifier, NotificationType, IpAddress, Counter64, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "iso", "ModuleIdentity", "Counter32", "Gauge32", "ObjectIdentity", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "MibIdentifier", "NotificationType", "IpAddress", "Counter64", "Bits")
DisplayString, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "TruthValue")
lldpXMedMIB = ModuleIdentity((1, 0, 8802, 1, 1, 2, 1, 5, 4795))
lldpXMedMIB.setRevisions(('2005-07-28 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: lldpXMedMIB.setRevisionsDescriptions(('Published as part of ANSI/TIA-1057.',))
if mibBuilder.loadTexts: lldpXMedMIB.setLastUpdated('200507280000Z')
if mibBuilder.loadTexts: lldpXMedMIB.setOrganization('TIA TR41.4 Working Group')
if mibBuilder.loadTexts: lldpXMedMIB.setContactInfo('  WG-URL: http://www.tiaonline.org/standards/sfg/scope.cfm#TR-41.4\n             WG-EMail: tr41@tiacomm.org\n              Contact: Chair, TIA TR-41\n               Postal: Telecommunications Industry Association\n                       2500 Wilson Blvd., Suite 300\n                       Arlington, VA 22201 USA\n                  Tel: (703) 907-7700\n               E-mail: tr41@tiacomm.org')
if mibBuilder.loadTexts: lldpXMedMIB.setDescription("The LLDP Management Information Base extension module for\n            TIA-TR41.4 media endpoint discovery information.\n\n            In order to assure the uniqueness of the LLDP-MIB,\n            lldpXMedMIB is branched from lldpExtensions using the TIA OUI \n            value as the node.  An OUI/'company_id' is a 24 bit globally \n            unique assigned number referenced by various standards.\n\n            Copyright (C) TIA (2005).  This version of this MIB module\n            is published as Section 13.3 of ANSI/TIA-1057.\n\n            See the standard itself for full legal notices.")
lldpXMedNotifications = MibIdentifier((1, 0, 8802, 1, 1, 2, 1, 5, 4795, 0))
lldpXMedObjects = MibIdentifier((1, 0, 8802, 1, 1, 2, 1, 5, 4795, 1))
lldpXMedTopologyChangeDetected = NotificationType((1, 0, 8802, 1, 1, 2, 1, 5, 4795, 0, 1)).setObjects(("LLDP-MIB", "lldpRemChassisIdSubtype"), ("LLDP-MIB", "lldpRemChassisId"), ("LLDP-EXT-MED-MIB", "lldpXMedRemDeviceClass"))
if mibBuilder.loadTexts: lldpXMedTopologyChangeDetected.setStatus('current')
if mibBuilder.loadTexts: lldpXMedTopologyChangeDetected.setDescription('A notification generated by the local device sensing\n                a change in the topology that indicates that a new remote\n                device attached to a local port, or a remote device disconnected \n                or moved from one port to another.')
lldpXMedConfig = MibIdentifier((1, 0, 8802, 1, 1, 2, 1, 5, 4795, 1, 1))
lldpXMedLocalData = MibIdentifier((1, 0, 8802, 1, 1, 2, 1, 5, 4795, 1, 2))
lldpXMedRemoteData = MibIdentifier((1, 0, 8802, 1, 1, 2, 1, 5, 4795, 1, 3))
class LldpXMedDeviceClass(TextualConvention, Integer32):
    description = 'Device Class to which the device is a member.  \n\n            A value of notDefined(0) indicates that the device \n            has capabilities not covered by any of the LLDP-MED classes. \n            \n            A value of endpointClass1(1) indicates that the device \n            has endpoint class 1 capabilities. \n            \n            A value of endpointClass2(2) indicates that the device \n            has endpoint class 2 capabilities. \n            \n            A value of endpointClass3(3) indicates that the device \n            has endpoint class 3 capabilities. \n            \n            A value of networkConnectivity(4) indicates that the device \n            has network connectivity device capabilities. \n            '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("notDefined", 0), ("endpointClass1", 1), ("endpointClass2", 2), ("endpointClass3", 3), ("networkConnectivity", 4))

class LldpXMedCapabilities(TextualConvention, Bits):
    description = "Bitmap that includes the MED organizationally defined set of LLDP\n            TLVs the device is capable of and whose transmission is allowed on \n            the local LLDP agent by network management.  \n\n            Each bit in the bitmap corresponds to an LLDP-MED subtype associated  \n            with a specific TIA TR41.4 MED TLV.  \n\n            Having the bit 'capabilities(0)' set indicates that the LLDP \n            agent refers to the Capabilities TLVs.\n\n            Having the bit 'networkPolicy(1)' set indicates that the LLDP \n            agent refers to the Network Policy TLVs.\n\n            Having the bit 'location(2)' set indicates that \n            the LLDP agent refers to the Emergency Communications\n            System Location TLVs.\n\n            Having the bit 'extendedPSE(3)' set indicates that \n            the LLDP agent refers to the Extended PoE TLVs with PSE \n            capabilities.\n\n            Having the bit 'extendedPD(4)' set indicates that \n            the LLDP agent refers to the Extended PoE TLVs with PD \n            capabilities.\n\n            Having the bit 'inventory(5)' set indicates that \n            the LLDP agent refers to the Hardware Revision, Firmware \n            Revision, Software Revision, Serial Number, Manufacturer Name, \n            Model Name, and Asset ID TLVs."
    status = 'current'
    namedValues = NamedValues(("capabilities", 0), ("networkPolicy", 1), ("location", 2), ("extendedPSE", 3), ("extendedPD", 4), ("inventory", 5))

class LocationSubtype(TextualConvention, Integer32):
    description = 'The location subtype advertised by the remote endpoint.\n\n             A value coordinateBased(2) indicates that the location subtype\n             advertised by the endpoint is defined to use the relevant sub-\n             fields of the DHCP option for Coordinate LCI as specified in \n             ANSI/TIA-1057, Section 10.2.4.3.1.\n\n             A value civicAddress(3) indicates that the location subtype\n             advertised by the endpoint is defined to use the relevant sub-\n             fields of the DHCP option for Civic Address as specified in \n             ANSI/TIA-1057, Section 10.2.4.3.2.\n\n             A value elin(4) indicates that the location subtype \n             advertised by the endpoint is defined to use the Emergency \n             Location Information Number (ELIN) as specified in\n             ANSI/TIA-1057, Section 10.2.4.3.3.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("unknown", 1), ("coordinateBased", 2), ("civicAddress", 3), ("elin", 4))

class PolicyAppType(TextualConvention, Bits):
    description = 'The media type that defines the primary function of the\n             application for the policy advertised by an endpoint.\n\n             Having the bit voice(1) set indicates that the media type defining\n             a primary function of the application for the policy advertised on \n             the local port is voice. \n\n             Having the bit voiceSignaling(3) set indicates that the media type \n             defining a primary function of the application for the policy \n             advertised on the local port is voice signaling. \n\n             Having the bit guestVoice(4) set indicates that the media type \n             Defining a primary function of the application for the policy            \n             advertised on the local port is guest voice. \n\n             Having the bit guestVoiceSignaling(5) set indicates that the media\n             type defining a primary function of the application for the policy \n             advertised on the local port is guest voice signaling. \n\n             Having the bit softPhoneVoice(6) set indicates that the media type \n             Defining a primary function of the application for the policy \n             advertised on the local port is softphone voice. \n\n             Having the bit videoConferencing(7) set indicates that the media \n             type defining a primary function of the application for the policy \n             advertised on the local port is voice. \n\n             Having the bit streamingVideo(8) set indicates that the media type \n             defining a primary function of the application for the policy \n             advertised on  the local port is streaming video. \n\n             Having the bit videoSignaling(2) set indicates that the media type \n             defining a primary function of the application for the policy \n             advertised on the local port is video signaling.'
    status = 'current'
    namedValues = NamedValues(("unknown", 0), ("voice", 1), ("voiceSignaling", 2), ("guestVoice", 3), ("guestVoiceSignaling", 4), ("softPhoneVoice", 5), ("videoconferencing", 6), ("streamingVideo", 7), ("videoSignaling", 8))

lldpXMedLocDeviceClass = MibScalar((1, 0, 8802, 1, 1, 2, 1, 5, 4795, 1, 1, 1), LldpXMedDeviceClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXMedLocDeviceClass.setReference(' ANSI/TIA-1057, Section 10.2.2.2')
if mibBuilder.loadTexts: lldpXMedLocDeviceClass.setStatus('current')
if mibBuilder.loadTexts: lldpXMedLocDeviceClass.setDescription('Local Device Class.')
lldpXMedPortConfigTable = MibTable((1, 0, 8802, 1, 1, 2, 1, 5, 4795, 1, 1, 2), )
if mibBuilder.loadTexts: lldpXMedPortConfigTable.setStatus('current')
if mibBuilder.loadTexts: lldpXMedPortConfigTable.setDescription('A table that controls selection of LLDP TLVs to be transmitted \n            on individual ports.')
lldpXMedPortConfigEntry = MibTableRow((1, 0, 8802, 1, 1, 2, 1, 5, 4795, 1, 1, 2, 1), )
lldpPortConfigEntry.registerAugmentions(("LLDP-EXT-MED-MIB", "lldpXMedPortConfigEntry"))
lldpXMedPortConfigEntry.setIndexNames(*lldpPortConfigEntry.getIndexNames())
if mibBuilder.loadTexts: lldpXMedPortConfigEntry.setStatus('current')
if mibBuilder.loadTexts: lldpXMedPortConfigEntry.setDescription('LLDP configuration information that controls the\n            transmission of the MED organizationally defined TLVs on\n            LLDP transmission capable ports.\n\n            This configuration object augments the lldpPortConfigEntry of\n            the LLDP-MIB, therefore it is only present along with the port\n            configuration defined by the associated lldpPortConfigEntry\n            entry.\n\n            Each active lldpXMedPortConfigEntry must be stored and \n            retrieved from non-volatile storage (along with the \n            corresponding lldpPortConfigEntry) after a re-initialization \n            of the management system.')
lldpXMedPortCapSupported = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 4795, 1, 1, 2, 1, 1), LldpXMedCapabilities()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXMedPortCapSupported.setReference('ANSI/TIA-1057, Section 10.2.2.3')
if mibBuilder.loadTexts: lldpXMedPortCapSupported.setStatus('current')
if mibBuilder.loadTexts: lldpXMedPortCapSupported.setDescription('The bitmap includes the MED organizationally defined set of LLDP\n            TLVs whose transmission is possible for the respective port\n            on the LLDP agent of the device. Each bit in the bitmap corresponds\n            to an LLDP-MED subtype associated with a specific TIA TR41.4 MED \n            optional TLV. If the bit is set, the agent supports the \n            corresponding TLV.')
lldpXMedPortConfigTLVsTxEnable = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 4795, 1, 1, 2, 1, 2), LldpXMedCapabilities()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpXMedPortConfigTLVsTxEnable.setReference('ANSI/TIA-1057, Section 10.2.2.3')
if mibBuilder.loadTexts: lldpXMedPortConfigTLVsTxEnable.setStatus('current')
if mibBuilder.loadTexts: lldpXMedPortConfigTLVsTxEnable.setDescription('The lldpXMedPortConfigTLVsTxEnable, defined as a bitmap,\n            includes the MED organizationally defined set of LLDP\n            TLVs whose transmission is allowed on the local LLDP agent by\n            the network management.  Each bit in the bitmap corresponds\n            to an LLDP-MED subtype associated with a specific TIA TR41.4 MED \n            optional TLV. If the bit is set, the agent will send the \n            corresponding TLV if the respective capability is supported per \n            port.\n\n            Setting a bit with in this object for a non-supported capability\n            shall have no functional effect and will result in an inconsistent\n            value error returned to the management application. \n \n            There are other rules and restrictions that prevent arbitrary\n            combinations of TLVs to be enabled on LLDP-MED devices according to\n            the device classes. These rules are defined in Section 10.2.1, \n            Tables 5 - 9 of ANSI/TIA-1057. In case a management application \n            attempts to set this object to a value that does not follow the rules, \n            the set operation shall have and will result in an inconsistent \n            value error returned to the management application. \n\n            Setting this object to an empty set is valid and effectively \n            disables LLDP-MED on a per-port basis by disabling transmission of \n            all MED organizational TLVs. In this case the remote tables objects \n            in the LLDP-MED MIB corresponding to the respective port will not \n            be populated. \n             \n            The default value for lldpXMedPortConfigTLVsTxEnable object\n            is an empty set, which means no enumerated values are set.\n\n            The value of this object must be restored from non-volatile\n            storage after a re-initialization of the management system.')
lldpXMedPortConfigNotifEnable = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 4795, 1, 1, 2, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpXMedPortConfigNotifEnable.setReference(' ANSI/TIA-1057, Section 12.3')
if mibBuilder.loadTexts: lldpXMedPortConfigNotifEnable.setStatus('current')
if mibBuilder.loadTexts: lldpXMedPortConfigNotifEnable.setDescription("A value of 'true(1)' enables sending the topology change \n             traps on this port.\n             A value of 'false(2)' disables sending the topology change \n             traps on this port.")
lldpXMedFastStartRepeatCount = MibScalar((1, 0, 8802, 1, 1, 2, 1, 5, 4795, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpXMedFastStartRepeatCount.setReference(' ANSI/TIA-1057, Section 11.2.1')
if mibBuilder.loadTexts: lldpXMedFastStartRepeatCount.setStatus('current')
if mibBuilder.loadTexts: lldpXMedFastStartRepeatCount.setDescription('The number of times the fast start LLDPDU are being sent during the \n             activation of the fast start mechanism defined by LLDP-MED.')
lldpXMedLocMediaPolicyTable = MibTable((1, 0, 8802, 1, 1, 2, 1, 5, 4795, 1, 2, 1), )
if mibBuilder.loadTexts: lldpXMedLocMediaPolicyTable.setStatus('current')
if mibBuilder.loadTexts: lldpXMedLocMediaPolicyTable.setDescription('This table contains one row per policy type per port \n             of media policy information (as a part of the MED \n             organizational extension) on the local system known \n             to this agent.')
lldpXMedLocMediaPolicyEntry = MibTableRow((1, 0, 8802, 1, 1, 2, 1, 5, 4795, 1, 2, 1, 1), ).setIndexNames((0, "LLDP-MIB", "lldpLocPortNum"), (0, "LLDP-EXT-MED-MIB", "lldpXMedLocMediaPolicyAppType"))
if mibBuilder.loadTexts: lldpXMedLocMediaPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: lldpXMedLocMediaPolicyEntry.setDescription('Information about a particular policy on a specific \n             port component.')
lldpXMedLocMediaPolicyAppType = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 4795, 1, 2, 1, 1, 1), PolicyAppType())
if mibBuilder.loadTexts: lldpXMedLocMediaPolicyAppType.setReference('ANSI/TIA-1057, Section 10.2.3.1')
if mibBuilder.loadTexts: lldpXMedLocMediaPolicyAppType.setStatus('current')
if mibBuilder.loadTexts: lldpXMedLocMediaPolicyAppType.setDescription('The media type that defines the primary function of the\n             application for the policy advertised by an endpoint.')
lldpXMedLocMediaPolicyVlanID = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 4795, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4094), ValueRangeConstraint(4095, 4095), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXMedLocMediaPolicyVlanID.setReference(' ANSI/TIA-1057, Section 10.2.3.5')
if mibBuilder.loadTexts: lldpXMedLocMediaPolicyVlanID.setStatus('current')
if mibBuilder.loadTexts: lldpXMedLocMediaPolicyVlanID.setDescription('An extension of the VLAN Identifier for the port, \n             as defined in IEEE 802.1P-1998.\n  \n             A value of 1 through 4094 is used to define a valid PVID.\n  \n             A value of 0 shall be used if the device is using priority tagged\n             frames, meaning that only the 802.1p priority level is significant\n             and the default VID of the ingress port is being used instead.\n  \n             A value of 4095 is reserved for implementation use.')
lldpXMedLocMediaPolicyPriority = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 4795, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXMedLocMediaPolicyPriority.setReference(' ANSI/TIA-1057, Section 10.2.3.6 ')
if mibBuilder.loadTexts: lldpXMedLocMediaPolicyPriority.setStatus('current')
if mibBuilder.loadTexts: lldpXMedLocMediaPolicyPriority.setDescription('This object contains the value of the 802.1p priority\n            which is associated with the given port on the\n            local system.')
lldpXMedLocMediaPolicyDscp = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 4795, 1, 2, 1, 1, 4), Dscp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXMedLocMediaPolicyDscp.setReference(' ANSI/TIA-1057, Section 10.2.3.7')
if mibBuilder.loadTexts: lldpXMedLocMediaPolicyDscp.setStatus('current')
if mibBuilder.loadTexts: lldpXMedLocMediaPolicyDscp.setDescription('This object contains the value of the Differentiated Service\n            Code Point (DSCP) as defined in IETF RFC 2474 and RFC 2475\n            which is associated with the given port on the local system.')
lldpXMedLocMediaPolicyUnknown = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 4795, 1, 2, 1, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXMedLocMediaPolicyUnknown.setReference(' ANSI/TIA-1057, Section 10.2.3.2')
if mibBuilder.loadTexts: lldpXMedLocMediaPolicyUnknown.setStatus('current')
if mibBuilder.loadTexts: lldpXMedLocMediaPolicyUnknown.setDescription("A value of 'true' indicates that the \n             network policy for the specified application type is \n             currently unknown.  In this case, the VLAN ID, the \n             layer 2 priority and the DSCP value fields are ignored.\n             A value of 'false' indicates that this network policy \n             is defined  ")
lldpXMedLocMediaPolicyTagged = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 4795, 1, 2, 1, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXMedLocMediaPolicyTagged.setReference(' ANSI/TIA-1057, Section 10.2.3.3')
if mibBuilder.loadTexts: lldpXMedLocMediaPolicyTagged.setStatus('current')
if mibBuilder.loadTexts: lldpXMedLocMediaPolicyTagged.setDescription("A value of 'true' indicates that the application is using a \n             tagged VLAN.\n             A value of 'false' indicates that for the specific application\n             the device either is using an untagged VLAN or does not \n             support port based VLAN operation.  In this case, both the \n             VLAN ID and the Layer 2 priority fields are ignored and \n             only the DSCP value has relevance ")
lldpXMedLocHardwareRev = MibScalar((1, 0, 8802, 1, 1, 2, 1, 5, 4795, 1, 2, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXMedLocHardwareRev.setReference(' ANSI/TIA-1057, Section 10.2.6.1')
if mibBuilder.loadTexts: lldpXMedLocHardwareRev.setStatus('current')
if mibBuilder.loadTexts: lldpXMedLocHardwareRev.setDescription('The vendor-specific hardware revision string\n            as advertised by the endpoint.')
lldpXMedLocFirmwareRev = MibScalar((1, 0, 8802, 1, 1, 2, 1, 5, 4795, 1, 2, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXMedLocFirmwareRev.setReference(' ANSI/TIA-1057, Section 10.2.6.2')
if mibBuilder.loadTexts: lldpXMedLocFirmwareRev.setStatus('current')
if mibBuilder.loadTexts: lldpXMedLocFirmwareRev.setDescription('The vendor-specific firmware revision string\n            as advertised by the endpoint.')
lldpXMedLocSoftwareRev = MibScalar((1, 0, 8802, 1, 1, 2, 1, 5, 4795, 1, 2, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXMedLocSoftwareRev.setReference(' ANSI/TIA-1057, Section 10.2.6.3')
if mibBuilder.loadTexts: lldpXMedLocSoftwareRev.setStatus('current')
if mibBuilder.loadTexts: lldpXMedLocSoftwareRev.setDescription('The vendor-specific software revision string\n            as advertised by the endpoint.')
lldpXMedLocSerialNum = MibScalar((1, 0, 8802, 1, 1, 2, 1, 5, 4795, 1, 2, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXMedLocSerialNum.setReference(' ANSI/TIA-1057, Section 10.2.6.4')
if mibBuilder.loadTexts: lldpXMedLocSerialNum.setStatus('current')
if mibBuilder.loadTexts: lldpXMedLocSerialNum.setDescription('The vendor-specific serial number\n            as advertised by the endpoint.')
lldpXMedLocMfgName = MibScalar((1, 0, 8802, 1, 1, 2, 1, 5, 4795, 1, 2, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXMedLocMfgName.setReference(' ANSI/TIA-1057, Section 10.2.6.5')
if mibBuilder.loadTexts: lldpXMedLocMfgName.setStatus('current')
if mibBuilder.loadTexts: lldpXMedLocMfgName.setDescription('The vendor-specific manufacturer name\n            as advertised by the endpoint.')
lldpXMedLocModelName = MibScalar((1, 0, 8802, 1, 1, 2, 1, 5, 4795, 1, 2, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXMedLocModelName.setReference(' ANSI/TIA-1057, Section 10.2.6.6')
if mibBuilder.loadTexts: lldpXMedLocModelName.setStatus('current')
if mibBuilder.loadTexts: lldpXMedLocModelName.setDescription('The vendor-specific model name\n            as advertised by the endpoint.')
lldpXMedLocAssetID = MibScalar((1, 0, 8802, 1, 1, 2, 1, 5, 4795, 1, 2, 8), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXMedLocAssetID.setReference(' ANSI/TIA-1057, Section 10.2.6.7')
if mibBuilder.loadTexts: lldpXMedLocAssetID.setStatus('current')
if mibBuilder.loadTexts: lldpXMedLocAssetID.setDescription('The vendor-specific asset tracking identifier\n            as advertised by the endpoint.')
lldpXMedLocLocationTable = MibTable((1, 0, 8802, 1, 1, 2, 1, 5, 4795, 1, 2, 9), )
if mibBuilder.loadTexts: lldpXMedLocLocationTable.setStatus('current')
if mibBuilder.loadTexts: lldpXMedLocLocationTable.setDescription('This table contains Location information as advertised\n            by the local system.\n\n            The information may be configured per port by a Location \n            Information Server (LIS) or other management application. \n            \n            Multiple Location TLVs of different subtypes may be transmitted\n            in the same PDU.\n\n            The information in this table MUST be stored in non-volatile-memory \n            and persist over restart/reboot sequences.')
lldpXMedLocLocationEntry = MibTableRow((1, 0, 8802, 1, 1, 2, 1, 5, 4795, 1, 2, 9, 1), ).setIndexNames((0, "LLDP-MIB", "lldpLocPortNum"), (0, "LLDP-EXT-MED-MIB", "lldpXMedLocLocationSubtype"))
if mibBuilder.loadTexts: lldpXMedLocLocationEntry.setStatus('current')
if mibBuilder.loadTexts: lldpXMedLocLocationEntry.setDescription('Information about Location information for the local device.')
lldpXMedLocLocationSubtype = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 4795, 1, 2, 9, 1, 1), LocationSubtype())
if mibBuilder.loadTexts: lldpXMedLocLocationSubtype.setReference('ANSI/TIA-1057, Section 10.2.4.2')
if mibBuilder.loadTexts: lldpXMedLocLocationSubtype.setStatus('current')
if mibBuilder.loadTexts: lldpXMedLocLocationSubtype.setDescription('The location subtype advertised by the local device.')
lldpXMedLocLocationInfo = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 4795, 1, 2, 9, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpXMedLocLocationInfo.setReference('ANSI/TIA-1057, Section 10.2.4.3')
if mibBuilder.loadTexts: lldpXMedLocLocationInfo.setStatus('current')
if mibBuilder.loadTexts: lldpXMedLocLocationInfo.setDescription('The location information. Parsing of this information is \n             dependent upon the location subtype, as defined by the value of the \n             lldpXMedLocLocationSubtype object. ')
lldpXMedLocXPoEDeviceType = MibScalar((1, 0, 8802, 1, 1, 2, 1, 5, 4795, 1, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("pseDevice", 2), ("pdDevice", 3), ("none", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXMedLocXPoEDeviceType.setReference('ANSI/TIA-1057, Section 10.2.5.1')
if mibBuilder.loadTexts: lldpXMedLocXPoEDeviceType.setStatus('current')
if mibBuilder.loadTexts: lldpXMedLocXPoEDeviceType.setDescription('Defines the type of Power-via-MDI (Power over Ethernet) advertised\n             by the local device.\n\n             A value pseDevice(2) indicates that the device is advertised as a \n             Power Sourcing Entity (PSE).\n\n             A value pdDevice(3) indicates that the device is advertised as a \n             Powered Device (PD).\n\n             A value of none(4) indicates that the device does not support PoE.')
lldpXMedLocXPoEPSEPortTable = MibTable((1, 0, 8802, 1, 1, 2, 1, 5, 4795, 1, 2, 11), )
if mibBuilder.loadTexts: lldpXMedLocXPoEPSEPortTable.setStatus('current')
if mibBuilder.loadTexts: lldpXMedLocXPoEPSEPortTable.setDescription('This table contains one row per port of PSE PoE\n            information on the local system known to this agent.')
lldpXMedLocXPoEPSEPortEntry = MibTableRow((1, 0, 8802, 1, 1, 2, 1, 5, 4795, 1, 2, 11, 1), ).setIndexNames((0, "LLDP-MIB", "lldpLocPortNum"))
if mibBuilder.loadTexts: lldpXMedLocXPoEPSEPortEntry.setStatus('current')
if mibBuilder.loadTexts: lldpXMedLocXPoEPSEPortEntry.setDescription('Information about a particular port PoE information.')
lldpXMedLocXPoEPSEPortPowerAv = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 4795, 1, 2, 11, 1, 1), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023))).setUnits('tenth of watt').setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXMedLocXPoEPSEPortPowerAv.setReference(' ANSI/TIA-1057, Section 10.2.5.4 ')
if mibBuilder.loadTexts: lldpXMedLocXPoEPSEPortPowerAv.setStatus('current')
if mibBuilder.loadTexts: lldpXMedLocXPoEPSEPortPowerAv.setDescription('This object contains the value of the power available from the\n            PSE via this port expressed in units of 0.1 watts.')
lldpXMedLocXPoEPSEPortPDPriority = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 4795, 1, 2, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("critical", 2), ("high", 3), ("low", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXMedLocXPoEPSEPortPDPriority.setReference('ANSI/TIA-1057, Section 10.2.5.3')
if mibBuilder.loadTexts: lldpXMedLocXPoEPSEPortPDPriority.setStatus('current')
if mibBuilder.loadTexts: lldpXMedLocXPoEPSEPortPDPriority.setDescription('Reflects the PD power priority that is being advertised on this\n             PSE port.\n\n             If both locally configure priority and \n             ldpXMedRemXPoEPDPowerPriority are available on this port, it is\n             a matter of local policy which one takes precedence. This object \n             reflects the active value on this port. \n \n             If the priority is not configured or known by the PD, the value \n             unknown(1) will be returned. \n       \n             A value critical(2) indicates that the device advertises its power \n             Priority as critical, as per RFC 3621.\n \n             A value high(3) indicates that the device advertises its power \n             Priority as high, as per RFC 3621.\n \n             A value low(4) indicates that the device advertises its power \n             Priority as low, as per RFC 3621.')
lldpXMedLocXPoEPSEPowerSource = MibScalar((1, 0, 8802, 1, 1, 2, 1, 5, 4795, 1, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("primary", 2), ("backup", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXMedLocXPoEPSEPowerSource.setReference('ANSI/TIA-1057, Section 10.2.5.2')
if mibBuilder.loadTexts: lldpXMedLocXPoEPSEPowerSource.setStatus('current')
if mibBuilder.loadTexts: lldpXMedLocXPoEPSEPowerSource.setDescription('Defines the type of PSE Power Source advertised\n             by the local device.\n\n             A value primary(2) indicates that the device advertises its power \n             source as primary.\n\n             A value backup(3) indicates that the device advertises its power \n             Source as backup.')
lldpXMedLocXPoEPDPowerReq = MibScalar((1, 0, 8802, 1, 1, 2, 1, 5, 4795, 1, 2, 13), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023))).setUnits('tenth of watt').setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXMedLocXPoEPDPowerReq.setReference(' ANSI/TIA-1057, Section 10.2.4.3 ')
if mibBuilder.loadTexts: lldpXMedLocXPoEPDPowerReq.setStatus('current')
if mibBuilder.loadTexts: lldpXMedLocXPoEPDPowerReq.setDescription('This object contains the value of the power required by a \n            PD expressed in units of 0.1 watts.')
lldpXMedLocXPoEPDPowerSource = MibScalar((1, 0, 8802, 1, 1, 2, 1, 5, 4795, 1, 2, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("fromPSE", 2), ("local", 3), ("localAndPSE", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXMedLocXPoEPDPowerSource.setReference('ANSI/TIA-1057, Section 10.2.5.2')
if mibBuilder.loadTexts: lldpXMedLocXPoEPDPowerSource.setStatus('current')
if mibBuilder.loadTexts: lldpXMedLocXPoEPDPowerSource.setDescription('Defines the type of Power Source advertised as being used \n             by the local device.\n\n             A value fromPSE(2) indicates that the device advertises its power \n             source as received from a PSE.\n\n             A value local(3) indicates that the device advertises its power \n             source as local.\n\n             A value localAndPSE(4) indicates that the device advertises its \n             power source as using both local and PSE power.')
lldpXMedLocXPoEPDPowerPriority = MibScalar((1, 0, 8802, 1, 1, 2, 1, 5, 4795, 1, 2, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("critical", 2), ("high", 3), ("low", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXMedLocXPoEPDPowerPriority.setReference('ANSI/TIA-1057, Section 10.2.5.3')
if mibBuilder.loadTexts: lldpXMedLocXPoEPDPowerPriority.setStatus('current')
if mibBuilder.loadTexts: lldpXMedLocXPoEPDPowerPriority.setDescription('Defines the priority advertised as being required by this PD.\n\n             A value critical(2) indicates that the device advertises its power \n             Priority as critical, as per RFC 3621.\n\n             A value high(3) indicates that the device advertises its power \n             Priority as high, as per RFC 3621.\n\n             A value low(4) indicates that the device advertises its power \n             Priority as low, as per RFC 3621.')
lldpXMedRemCapabilitiesTable = MibTable((1, 0, 8802, 1, 1, 2, 1, 5, 4795, 1, 3, 1), )
if mibBuilder.loadTexts: lldpXMedRemCapabilitiesTable.setStatus('current')
if mibBuilder.loadTexts: lldpXMedRemCapabilitiesTable.setDescription('A table that displays LLDP-MED capabilities of remote devices \n            connected to individual ports.')
lldpXMedRemCapabilitiesEntry = MibTableRow((1, 0, 8802, 1, 1, 2, 1, 5, 4795, 1, 3, 1, 1), ).setIndexNames((0, "LLDP-MIB", "lldpRemTimeMark"), (0, "LLDP-MIB", "lldpRemLocalPortNum"), (0, "LLDP-MIB", "lldpRemIndex"))
if mibBuilder.loadTexts: lldpXMedRemCapabilitiesEntry.setStatus('current')
if mibBuilder.loadTexts: lldpXMedRemCapabilitiesEntry.setDescription('LLDP-MED capabilities of remote devices connected to the device \n            ports and communicating via LLDP-MED.\n\n            The remote tables in the LLDP-MED MIB excepting this table may be \n            sparsely populate. An entry in one of these table is meaningful \n            and shall be populated by the agent only if the corresponding bits\n            for the respective function are set in the objects in this table. ')
lldpXMedRemCapSupported = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 4795, 1, 3, 1, 1, 1), LldpXMedCapabilities()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXMedRemCapSupported.setReference('ANSI/TIA-1057, Sections 10.2.2.1')
if mibBuilder.loadTexts: lldpXMedRemCapSupported.setStatus('current')
if mibBuilder.loadTexts: lldpXMedRemCapSupported.setDescription('The bitmap includes the MED organizationally defined set of LLDP\n            TLVs whose transmission is possible on the LLDP agent of the remote\n            device connected to this port. Each bit in the bitmap corresponds\n            to an LLDP-MED subtype associated with a specific TIA TR41.4 MED                \n            optional TLV. If the bit is set, the agent has the capability \n            to support the corresponding TLV.')
lldpXMedRemCapCurrent = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 4795, 1, 3, 1, 1, 2), LldpXMedCapabilities()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXMedRemCapCurrent.setReference('ANSI/TIA-1057, Sections 10.2.2.1')
if mibBuilder.loadTexts: lldpXMedRemCapCurrent.setStatus('current')
if mibBuilder.loadTexts: lldpXMedRemCapCurrent.setDescription('The bitmap includes the MED organizationally defined set of LLDP\n            TLVs whose transmission is possible on the LLDP agent of the remote\n            device connected to this port. Each bit in the bitmap corresponds\n            to an LLDP-MED subtype associated with a specific TIA TR41.4 MED                \n            optional TLV. If the bit is set, the agent currently supports the \n            corresponding TLV.')
lldpXMedRemDeviceClass = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 4795, 1, 3, 1, 1, 3), LldpXMedDeviceClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXMedRemDeviceClass.setReference(' ANSI/TIA-1057, Section 10.2.2.2')
if mibBuilder.loadTexts: lldpXMedRemDeviceClass.setStatus('current')
if mibBuilder.loadTexts: lldpXMedRemDeviceClass.setDescription('Device Class as advertised by the device remotely connected to the \n             port.')
lldpXMedRemMediaPolicyTable = MibTable((1, 0, 8802, 1, 1, 2, 1, 5, 4795, 1, 3, 2), )
if mibBuilder.loadTexts: lldpXMedRemMediaPolicyTable.setStatus('current')
if mibBuilder.loadTexts: lldpXMedRemMediaPolicyTable.setDescription('This table contains media policy information as advertised\n            by the remote system.\n\n            This table may be sparsely populated. Entries in this table are\n            relevant only if the networkPolicy(0) bits in the \n            lldpXMedRemCapSupported and lldpXMedRemCapCurrent objects of the \n            corresponding ports are set.')
lldpXMedRemMediaPolicyEntry = MibTableRow((1, 0, 8802, 1, 1, 2, 1, 5, 4795, 1, 3, 2, 1), ).setIndexNames((0, "LLDP-MIB", "lldpRemTimeMark"), (0, "LLDP-MIB", "lldpRemLocalPortNum"), (0, "LLDP-MIB", "lldpRemIndex"), (0, "LLDP-EXT-MED-MIB", "lldpXMedRemMediaPolicyAppType"))
if mibBuilder.loadTexts: lldpXMedRemMediaPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: lldpXMedRemMediaPolicyEntry.setDescription('Information about the per port per policy type policy \n             information for a particular physical network connection.')
lldpXMedRemMediaPolicyAppType = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 4795, 1, 3, 2, 1, 1), PolicyAppType())
if mibBuilder.loadTexts: lldpXMedRemMediaPolicyAppType.setReference('ANSI/TIA-1057, Section 10.2.3.1')
if mibBuilder.loadTexts: lldpXMedRemMediaPolicyAppType.setStatus('current')
if mibBuilder.loadTexts: lldpXMedRemMediaPolicyAppType.setDescription('The media type that defines the primary function of the\n             application for the policy advertised by the endpoint connected \n             remotely to this port.')
lldpXMedRemMediaPolicyVlanID = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 4795, 1, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4094), ValueRangeConstraint(4095, 4095), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXMedRemMediaPolicyVlanID.setReference(' ANSI/TIA-1057, Section 10.2.3.5')
if mibBuilder.loadTexts: lldpXMedRemMediaPolicyVlanID.setStatus('current')
if mibBuilder.loadTexts: lldpXMedRemMediaPolicyVlanID.setDescription('An extension of the VLAN Identifier for the remote system\n             connected to this port, as defined in IEEE 802.1P-1998.\n             \n             A value of 1 through 4094 is used to define a valid PVID.\n             \n             A value of 0 shall be used if the device is using priority tagged\n             frames, meaning that only the 802.1p priority level is significant\n             and the default VID of the ingress port is being used instead.\n             \n             A value of 4095 is reserved for implementation use.')
lldpXMedRemMediaPolicyPriority = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 4795, 1, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXMedRemMediaPolicyPriority.setReference(' ANSI/TIA-1057, Section 10.2.3.6')
if mibBuilder.loadTexts: lldpXMedRemMediaPolicyPriority.setStatus('current')
if mibBuilder.loadTexts: lldpXMedRemMediaPolicyPriority.setDescription('This object contains the value of the 802.1p priority\n            which is associated with the remote system connected at\n            given port.')
lldpXMedRemMediaPolicyDscp = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 4795, 1, 3, 2, 1, 4), Dscp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXMedRemMediaPolicyDscp.setReference(' ANSI/TIA-1057, Section 10.2.3.7')
if mibBuilder.loadTexts: lldpXMedRemMediaPolicyDscp.setStatus('current')
if mibBuilder.loadTexts: lldpXMedRemMediaPolicyDscp.setDescription('This object contains the value of the Differentiated Service\n            Code Point (DSCP) as defined in IETF RFC 2474 and RFC 2475\n            which is associated with remote system connected at the port.')
lldpXMedRemMediaPolicyUnknown = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 4795, 1, 3, 2, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXMedRemMediaPolicyUnknown.setReference(' ANSI/TIA-1057, Section 10.2.3.2')
if mibBuilder.loadTexts: lldpXMedRemMediaPolicyUnknown.setStatus('current')
if mibBuilder.loadTexts: lldpXMedRemMediaPolicyUnknown.setDescription("A value of 'true' indicates that the \n             network policy for the specified application type is \n             currently unknown.  In this case, the VLAN ID, the \n             layer 2 priority and the DSCP value fields are ignored.\n             A value of 'false' indicates that this network policy \n             is defined.")
lldpXMedRemMediaPolicyTagged = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 4795, 1, 3, 2, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXMedRemMediaPolicyTagged.setReference(' ANSI/TIA-1057, Section 10.2.3.3')
if mibBuilder.loadTexts: lldpXMedRemMediaPolicyTagged.setStatus('current')
if mibBuilder.loadTexts: lldpXMedRemMediaPolicyTagged.setDescription("A value of 'true' indicates that the application is using a \n             tagged VLAN.\n             A value of 'false' indicates that for the specific application\n             the device either is using an untagged VLAN or does not \n             support port based VLAN operation.  In this case, both the \n             VLAN ID and the Layer 2 priority fields are ignored and \n             only the DSCP value has relevance ")
lldpXMedRemInventoryTable = MibTable((1, 0, 8802, 1, 1, 2, 1, 5, 4795, 1, 3, 3), )
if mibBuilder.loadTexts: lldpXMedRemInventoryTable.setStatus('current')
if mibBuilder.loadTexts: lldpXMedRemInventoryTable.setDescription('This table contains inventory information as advertised\n            by the remote system.\n            \n            This table may be sparsely populated. Entries in this table are\n            relevant only if the inventory(2) bits in the \n            lldpXMedRemCapSupported and lldpXMedRemCapCurrent objects of the \n            corresponding ports are set ')
lldpXMedRemInventoryEntry = MibTableRow((1, 0, 8802, 1, 1, 2, 1, 5, 4795, 1, 3, 3, 1), ).setIndexNames((0, "LLDP-MIB", "lldpRemTimeMark"), (0, "LLDP-MIB", "lldpRemLocalPortNum"), (0, "LLDP-MIB", "lldpRemIndex"))
if mibBuilder.loadTexts: lldpXMedRemInventoryEntry.setStatus('current')
if mibBuilder.loadTexts: lldpXMedRemInventoryEntry.setDescription('Information about inventory information for the remote devices\n             connected to the ports.')
lldpXMedRemHardwareRev = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 4795, 1, 3, 3, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXMedRemHardwareRev.setReference(' ANSI/TIA-1057, Section 10.2.6.1')
if mibBuilder.loadTexts: lldpXMedRemHardwareRev.setStatus('current')
if mibBuilder.loadTexts: lldpXMedRemHardwareRev.setDescription('The vendor-specific hardware revision string\n            as advertised by the remote endpoint.')
lldpXMedRemFirmwareRev = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 4795, 1, 3, 3, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXMedRemFirmwareRev.setReference(' ANSI/TIA-1057, Section 10.2.6.2')
if mibBuilder.loadTexts: lldpXMedRemFirmwareRev.setStatus('current')
if mibBuilder.loadTexts: lldpXMedRemFirmwareRev.setDescription('The vendor-specific firmware revision string\n            as advertised by the remote endpoint.')
lldpXMedRemSoftwareRev = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 4795, 1, 3, 3, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXMedRemSoftwareRev.setReference(' ANSI/TIA-1057, Section 10.2.6.3')
if mibBuilder.loadTexts: lldpXMedRemSoftwareRev.setStatus('current')
if mibBuilder.loadTexts: lldpXMedRemSoftwareRev.setDescription('The vendor-specific software revision string\n            as advertised by the remote endpoint.')
lldpXMedRemSerialNum = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 4795, 1, 3, 3, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXMedRemSerialNum.setReference(' ANSI/TIA-1057, Section 10.2.6.4')
if mibBuilder.loadTexts: lldpXMedRemSerialNum.setStatus('current')
if mibBuilder.loadTexts: lldpXMedRemSerialNum.setDescription('The vendor-specific serial number\n            as advertised by the remote endpoint.')
lldpXMedRemMfgName = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 4795, 1, 3, 3, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXMedRemMfgName.setReference(' ANSI/TIA-1057, Section 10.2.6.5')
if mibBuilder.loadTexts: lldpXMedRemMfgName.setStatus('current')
if mibBuilder.loadTexts: lldpXMedRemMfgName.setDescription('The vendor-specific manufacturer name\n            as advertised by the remote endpoint.')
lldpXMedRemModelName = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 4795, 1, 3, 3, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXMedRemModelName.setReference(' ANSI/TIA-1057, Section 10.2.6.6')
if mibBuilder.loadTexts: lldpXMedRemModelName.setStatus('current')
if mibBuilder.loadTexts: lldpXMedRemModelName.setDescription('The vendor-specific model name\n            as advertised by the remote endpoint.')
lldpXMedRemAssetID = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 4795, 1, 3, 3, 1, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXMedRemAssetID.setReference(' ANSI/TIA-1057, Section 10.2.6.7')
if mibBuilder.loadTexts: lldpXMedRemAssetID.setStatus('current')
if mibBuilder.loadTexts: lldpXMedRemAssetID.setDescription('The vendor-specific asset tracking identifier\n            as advertised by the remote endpoint.')
lldpXMedRemLocationTable = MibTable((1, 0, 8802, 1, 1, 2, 1, 5, 4795, 1, 3, 4), )
if mibBuilder.loadTexts: lldpXMedRemLocationTable.setStatus('current')
if mibBuilder.loadTexts: lldpXMedRemLocationTable.setDescription('This table contains Location information as advertised\n            by the remote system.\n            \n            This table may be sparsely populated. Entries in this table are\n            relevant only if the Location(3) bits in the \n            lldpXMedRemCapSupported and lldpXMedRemCapCurrent objects of the \n            corresponding ports are set ')
lldpXMedRemLocationEntry = MibTableRow((1, 0, 8802, 1, 1, 2, 1, 5, 4795, 1, 3, 4, 1), ).setIndexNames((0, "LLDP-MIB", "lldpRemTimeMark"), (0, "LLDP-MIB", "lldpRemLocalPortNum"), (0, "LLDP-MIB", "lldpRemIndex"), (0, "LLDP-EXT-MED-MIB", "lldpXMedRemLocationSubtype"))
if mibBuilder.loadTexts: lldpXMedRemLocationEntry.setStatus('current')
if mibBuilder.loadTexts: lldpXMedRemLocationEntry.setDescription('Information about Location information for the remote devices\n             connected to the ports.')
lldpXMedRemLocationSubtype = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 4795, 1, 3, 4, 1, 1), LocationSubtype())
if mibBuilder.loadTexts: lldpXMedRemLocationSubtype.setReference('ANSI/TIA-1057, Section 10.2.4.2 ')
if mibBuilder.loadTexts: lldpXMedRemLocationSubtype.setStatus('current')
if mibBuilder.loadTexts: lldpXMedRemLocationSubtype.setDescription('The location subtype advertised by the remote endpoint.')
lldpXMedRemLocationInfo = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 4795, 1, 3, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXMedRemLocationInfo.setReference('ANSI/TIA-1057, Section 10.2.4.3 ')
if mibBuilder.loadTexts: lldpXMedRemLocationInfo.setStatus('current')
if mibBuilder.loadTexts: lldpXMedRemLocationInfo.setDescription('The location information advertised by the remote endpoint.\n             Parsing of this information is dependent upon the location  \n             subtype, as defined by the value of the corresponding\n             lldpXMedRemLocationSubType object. ')
lldpXMedRemXPoETable = MibTable((1, 0, 8802, 1, 1, 2, 1, 5, 4795, 1, 3, 5), )
if mibBuilder.loadTexts: lldpXMedRemXPoETable.setStatus('current')
if mibBuilder.loadTexts: lldpXMedRemXPoETable.setDescription('This table contains information about the PoE device type\n            as advertised by the remote system.\n            \n            This table is densely populated.')
lldpXMedRemXPoEEntry = MibTableRow((1, 0, 8802, 1, 1, 2, 1, 5, 4795, 1, 3, 5, 1), ).setIndexNames((0, "LLDP-MIB", "lldpRemTimeMark"), (0, "LLDP-MIB", "lldpRemLocalPortNum"), (0, "LLDP-MIB", "lldpRemIndex"))
if mibBuilder.loadTexts: lldpXMedRemXPoEEntry.setStatus('current')
if mibBuilder.loadTexts: lldpXMedRemXPoEEntry.setDescription('Information about PoE type of the remote devices\n             connected to the ports.')
lldpXMedRemXPoEDeviceType = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 4795, 1, 3, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("pseDevice", 2), ("pdDevice", 3), ("none", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXMedRemXPoEDeviceType.setReference('ANSI/TIA-1057, Section 10.2.5.1')
if mibBuilder.loadTexts: lldpXMedRemXPoEDeviceType.setStatus('current')
if mibBuilder.loadTexts: lldpXMedRemXPoEDeviceType.setDescription('Defines the type of Power-via-MDI (Power over Ethernet) advertised\n             by the remote device.\n\n             A value pseDevice(2) indicates that the device is advertised as a \n             Power Sourcing Entity (PSE).\n\n             A value pdDevice(3) indicates that the device is advertised as a \n             Powered Device (PD).\n\n             A value none(4) indicates that the device does not support PoE.')
lldpXMedRemXPoEPSETable = MibTable((1, 0, 8802, 1, 1, 2, 1, 5, 4795, 1, 3, 6), )
if mibBuilder.loadTexts: lldpXMedRemXPoEPSETable.setStatus('current')
if mibBuilder.loadTexts: lldpXMedRemXPoEPSETable.setDescription('This table contains extended PoE information as advertised\n            by the remote devices of PSE type.\n            \n            This table may be sparsely populated. Entries in this table are\n            relevant only if the extendedPSE(4) bits in the \n            lldpXMedRemCapSupported and lldpXMedRemCapCurrent objects of the \n            corresponding ports are set ')
lldpXMedRemXPoEPSEEntry = MibTableRow((1, 0, 8802, 1, 1, 2, 1, 5, 4795, 1, 3, 6, 1), ).setIndexNames((0, "LLDP-MIB", "lldpRemTimeMark"), (0, "LLDP-MIB", "lldpRemLocalPortNum"), (0, "LLDP-MIB", "lldpRemIndex"))
if mibBuilder.loadTexts: lldpXMedRemXPoEPSEEntry.setStatus('current')
if mibBuilder.loadTexts: lldpXMedRemXPoEPSEEntry.setDescription('Information about Extended PoE PSE information for \n            the remote devices connected to the ports.')
lldpXMedRemXPoEPSEPowerAv = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 4795, 1, 3, 6, 1, 1), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023))).setUnits('tenth of watt').setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXMedRemXPoEPSEPowerAv.setReference(' ANSI/TIA-1057, Section 10.2.5.4')
if mibBuilder.loadTexts: lldpXMedRemXPoEPSEPowerAv.setStatus('current')
if mibBuilder.loadTexts: lldpXMedRemXPoEPSEPowerAv.setDescription('This object contains the value of the power available from the\n            PSE via this port expressed in units of 0.1 watts on the remote \n            device.')
lldpXMedRemXPoEPSEPowerSource = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 4795, 1, 3, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("primary", 2), ("backup", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXMedRemXPoEPSEPowerSource.setReference('ANSI/TIA-1057, Section 10.2.5.2')
if mibBuilder.loadTexts: lldpXMedRemXPoEPSEPowerSource.setStatus('current')
if mibBuilder.loadTexts: lldpXMedRemXPoEPSEPowerSource.setDescription('Defines the type of PSE Power Source advertised\n             by the remote device.\n\n             A value primary(2) indicates that the device advertises its power \n             source as primary.\n\n             A value backup(3) indicates that the device advertises its power \n             Source as backup.')
lldpXMedRemXPoEPSEPowerPriority = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 4795, 1, 3, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("critical", 2), ("high", 3), ("low", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXMedRemXPoEPSEPowerPriority.setReference('ANSI/TIA-1057, Section 10.2.5.3')
if mibBuilder.loadTexts: lldpXMedRemXPoEPSEPowerPriority.setStatus('current')
if mibBuilder.loadTexts: lldpXMedRemXPoEPSEPowerPriority.setDescription('This object contains the value of the PSE power priority \n            advertised by the remote device.\n            \n            A value critical(2) indicates that the device advertises its power \n            priority as critical, as per RFC 3621.\n            \n            A value high(3) indicates that the device advertises its power \n            priority as high, as per RFC 3621.\n            \n            A value low(4) indicates that the device advertises its power \n            priority as low, as per RFC 3621.')
lldpXMedRemXPoEPDTable = MibTable((1, 0, 8802, 1, 1, 2, 1, 5, 4795, 1, 3, 7), )
if mibBuilder.loadTexts: lldpXMedRemXPoEPDTable.setStatus('current')
if mibBuilder.loadTexts: lldpXMedRemXPoEPDTable.setDescription('This table contains extended PoE information as advertised\n            by the remote devices of PD type.\n            \n            This table may be sparsely populated. Entries in this table are\n            relevant only if the extendedPD(5) bits in the \n            lldpXMedRemCapSupported and lldpXMedRemCapCurrent objects of the \n            corresponding ports are set ')
lldpXMedRemXPoEPDEntry = MibTableRow((1, 0, 8802, 1, 1, 2, 1, 5, 4795, 1, 3, 7, 1), ).setIndexNames((0, "LLDP-MIB", "lldpRemTimeMark"), (0, "LLDP-MIB", "lldpRemLocalPortNum"), (0, "LLDP-MIB", "lldpRemIndex"))
if mibBuilder.loadTexts: lldpXMedRemXPoEPDEntry.setStatus('current')
if mibBuilder.loadTexts: lldpXMedRemXPoEPDEntry.setDescription('Information about XPoEPD information for the remote devices\n             connected to the ports.')
lldpXMedRemXPoEPDPowerReq = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 4795, 1, 3, 7, 1, 1), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023))).setUnits('tenth of watt').setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXMedRemXPoEPDPowerReq.setReference(' ANSI/TIA-1057, Section 10.2.5.4 ')
if mibBuilder.loadTexts: lldpXMedRemXPoEPDPowerReq.setStatus('current')
if mibBuilder.loadTexts: lldpXMedRemXPoEPDPowerReq.setDescription('This object contains the value of the power required by a \n            PD connected remotely to the port\n            expressed in units of 0.1 watts.')
lldpXMedRemXPoEPDPowerSource = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 4795, 1, 3, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("fromPSE", 2), ("local", 3), ("localAndPSE", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXMedRemXPoEPDPowerSource.setReference('ANSI/TIA-1057, Section 10.2.5.2')
if mibBuilder.loadTexts: lldpXMedRemXPoEPDPowerSource.setStatus('current')
if mibBuilder.loadTexts: lldpXMedRemXPoEPDPowerSource.setDescription('Defines the type of Power Source advertised as being used \n             by the device connected remotely to the port.\n\n             A value fromPSE(2) indicates that the device advertises its power \n             source as received from a PSE.\n\n             A value local(3) indicates that the device advertises its power \n             source as local.\n\n             A value localAndPSE(4) indicates that the device advertises its \n             power source as using both local and PSE power.')
lldpXMedRemXPoEPDPowerPriority = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 4795, 1, 3, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("critical", 2), ("high", 3), ("low", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXMedRemXPoEPDPowerPriority.setReference('ANSI/TIA-1057, Section 10.2.5.3')
if mibBuilder.loadTexts: lldpXMedRemXPoEPDPowerPriority.setStatus('current')
if mibBuilder.loadTexts: lldpXMedRemXPoEPDPowerPriority.setDescription('Defines the priority advertised as being required by the PD\n             connected remotely to the port.\n\n             A value critical(2) indicates that the device advertises its power \n             Priority as critical, as per RFC 3621.\n\n             A value high(3) indicates that the device advertises its power \n             Priority as high, as per RFC 3621.\n\n             A value low(4) indicates that the device advertises its power \n             Priority as low, as per RFC 3621.')
lldpXMedConformance = MibIdentifier((1, 0, 8802, 1, 1, 2, 1, 5, 4795, 2))
lldpXMedCompliances = MibIdentifier((1, 0, 8802, 1, 1, 2, 1, 5, 4795, 2, 1))
lldpXMedGroups = MibIdentifier((1, 0, 8802, 1, 1, 2, 1, 5, 4795, 2, 2))
lldpXMedCompliance = ModuleCompliance((1, 0, 8802, 1, 1, 2, 1, 5, 4795, 2, 1, 1)).setObjects(("LLDP-EXT-MED-MIB", "lldpXMedConfigGroup"), ("LLDP-EXT-MED-MIB", "lldpXMedRemSysGroup"), ("LLDP-EXT-MED-MIB", "lldpXMedNotificationsGroup"), ("LLDP-EXT-MED-MIB", "lldpXMedOptMediaPolicyGroup"), ("LLDP-EXT-MED-MIB", "lldpXMedOptInventoryGroup"), ("LLDP-EXT-MED-MIB", "lldpXMedOptLocationGroup"), ("LLDP-EXT-MED-MIB", "lldpXMedOptPoEPSEGroup"), ("LLDP-EXT-MED-MIB", "lldpXMedOptPoEPDGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lldpXMedCompliance = lldpXMedCompliance.setStatus('current')
if mibBuilder.loadTexts: lldpXMedCompliance.setDescription('The compliance statement for SNMP entities which implement\n            the LLDP MED extension MIB.')
lldpXMedConfigGroup = ObjectGroup((1, 0, 8802, 1, 1, 2, 1, 5, 4795, 2, 2, 1)).setObjects(("LLDP-EXT-MED-MIB", "lldpXMedPortCapSupported"), ("LLDP-EXT-MED-MIB", "lldpXMedPortConfigTLVsTxEnable"), ("LLDP-EXT-MED-MIB", "lldpXMedPortConfigNotifEnable"), ("LLDP-EXT-MED-MIB", "lldpXMedFastStartRepeatCount"), ("LLDP-EXT-MED-MIB", "lldpXMedLocXPoEDeviceType"), ("LLDP-EXT-MED-MIB", "lldpXMedLocDeviceClass"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lldpXMedConfigGroup = lldpXMedConfigGroup.setStatus('current')
if mibBuilder.loadTexts: lldpXMedConfigGroup.setDescription('The collection of objects which are used to configure or\n            describe the configuration or behavior of the LLDP-MED\n            organizational extension implementation.')
lldpXMedOptMediaPolicyGroup = ObjectGroup((1, 0, 8802, 1, 1, 2, 1, 5, 4795, 2, 2, 2)).setObjects(("LLDP-EXT-MED-MIB", "lldpXMedLocMediaPolicyVlanID"), ("LLDP-EXT-MED-MIB", "lldpXMedLocMediaPolicyPriority"), ("LLDP-EXT-MED-MIB", "lldpXMedLocMediaPolicyDscp"), ("LLDP-EXT-MED-MIB", "lldpXMedLocMediaPolicyUnknown"), ("LLDP-EXT-MED-MIB", "lldpXMedLocMediaPolicyTagged"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lldpXMedOptMediaPolicyGroup = lldpXMedOptMediaPolicyGroup.setStatus('current')
if mibBuilder.loadTexts: lldpXMedOptMediaPolicyGroup.setDescription('The collection of objects which are used to represent LLDP\n            MED organizational extensions for Media Policy Information.')
lldpXMedOptInventoryGroup = ObjectGroup((1, 0, 8802, 1, 1, 2, 1, 5, 4795, 2, 2, 3)).setObjects(("LLDP-EXT-MED-MIB", "lldpXMedLocHardwareRev"), ("LLDP-EXT-MED-MIB", "lldpXMedLocFirmwareRev"), ("LLDP-EXT-MED-MIB", "lldpXMedLocSoftwareRev"), ("LLDP-EXT-MED-MIB", "lldpXMedLocSerialNum"), ("LLDP-EXT-MED-MIB", "lldpXMedLocMfgName"), ("LLDP-EXT-MED-MIB", "lldpXMedLocModelName"), ("LLDP-EXT-MED-MIB", "lldpXMedLocAssetID"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lldpXMedOptInventoryGroup = lldpXMedOptInventoryGroup.setStatus('current')
if mibBuilder.loadTexts: lldpXMedOptInventoryGroup.setDescription('The collection of objects which are used to represent LLDP\n            MED organizational extension for inventory Information.')
lldpXMedOptLocationGroup = ObjectGroup((1, 0, 8802, 1, 1, 2, 1, 5, 4795, 2, 2, 4)).setObjects(("LLDP-EXT-MED-MIB", "lldpXMedLocLocationInfo"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lldpXMedOptLocationGroup = lldpXMedOptLocationGroup.setStatus('current')
if mibBuilder.loadTexts: lldpXMedOptLocationGroup.setDescription('The collection of objects which are used to represent LLDP\n            MED organizational extension for Location Information.')
lldpXMedOptPoEPSEGroup = ObjectGroup((1, 0, 8802, 1, 1, 2, 1, 5, 4795, 2, 2, 5)).setObjects(("LLDP-EXT-MED-MIB", "lldpXMedLocXPoEPSEPortPowerAv"), ("LLDP-EXT-MED-MIB", "lldpXMedLocXPoEPSEPortPDPriority"), ("LLDP-EXT-MED-MIB", "lldpXMedLocXPoEPSEPowerSource"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lldpXMedOptPoEPSEGroup = lldpXMedOptPoEPSEGroup.setStatus('current')
if mibBuilder.loadTexts: lldpXMedOptPoEPSEGroup.setDescription('The collection of objects which are used to represent LLDP\n            MED organizational extensions for PoE PSE Information.')
lldpXMedOptPoEPDGroup = ObjectGroup((1, 0, 8802, 1, 1, 2, 1, 5, 4795, 2, 2, 6)).setObjects(("LLDP-EXT-MED-MIB", "lldpXMedLocXPoEPDPowerReq"), ("LLDP-EXT-MED-MIB", "lldpXMedLocXPoEPDPowerSource"), ("LLDP-EXT-MED-MIB", "lldpXMedLocXPoEPDPowerPriority"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lldpXMedOptPoEPDGroup = lldpXMedOptPoEPDGroup.setStatus('current')
if mibBuilder.loadTexts: lldpXMedOptPoEPDGroup.setDescription('The collection of objects which are used to represent LLDP\n            MED organizational extensions for PoE PD Information.')
lldpXMedRemSysGroup = ObjectGroup((1, 0, 8802, 1, 1, 2, 1, 5, 4795, 2, 2, 7)).setObjects(("LLDP-EXT-MED-MIB", "lldpXMedRemCapSupported"), ("LLDP-EXT-MED-MIB", "lldpXMedRemCapCurrent"), ("LLDP-EXT-MED-MIB", "lldpXMedRemDeviceClass"), ("LLDP-EXT-MED-MIB", "lldpXMedRemMediaPolicyVlanID"), ("LLDP-EXT-MED-MIB", "lldpXMedRemMediaPolicyPriority"), ("LLDP-EXT-MED-MIB", "lldpXMedRemMediaPolicyDscp"), ("LLDP-EXT-MED-MIB", "lldpXMedRemMediaPolicyUnknown"), ("LLDP-EXT-MED-MIB", "lldpXMedRemMediaPolicyTagged"), ("LLDP-EXT-MED-MIB", "lldpXMedRemHardwareRev"), ("LLDP-EXT-MED-MIB", "lldpXMedRemFirmwareRev"), ("LLDP-EXT-MED-MIB", "lldpXMedRemSoftwareRev"), ("LLDP-EXT-MED-MIB", "lldpXMedRemSerialNum"), ("LLDP-EXT-MED-MIB", "lldpXMedRemMfgName"), ("LLDP-EXT-MED-MIB", "lldpXMedRemModelName"), ("LLDP-EXT-MED-MIB", "lldpXMedRemAssetID"), ("LLDP-EXT-MED-MIB", "lldpXMedRemLocationInfo"), ("LLDP-EXT-MED-MIB", "lldpXMedRemXPoEDeviceType"), ("LLDP-EXT-MED-MIB", "lldpXMedRemXPoEPSEPowerAv"), ("LLDP-EXT-MED-MIB", "lldpXMedRemXPoEPSEPowerSource"), ("LLDP-EXT-MED-MIB", "lldpXMedRemXPoEPSEPowerPriority"), ("LLDP-EXT-MED-MIB", "lldpXMedRemXPoEPDPowerReq"), ("LLDP-EXT-MED-MIB", "lldpXMedRemXPoEPDPowerSource"), ("LLDP-EXT-MED-MIB", "lldpXMedRemXPoEPDPowerPriority"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lldpXMedRemSysGroup = lldpXMedRemSysGroup.setStatus('current')
if mibBuilder.loadTexts: lldpXMedRemSysGroup.setDescription('The collection of objects which are used to represent LLDP-\n            MED organizational extension Remote Device Information.')
lldpXMedNotificationsGroup = NotificationGroup((1, 0, 8802, 1, 1, 2, 1, 5, 4795, 2, 2, 8)).setObjects(("LLDP-EXT-MED-MIB", "lldpXMedTopologyChangeDetected"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lldpXMedNotificationsGroup = lldpXMedNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: lldpXMedNotificationsGroup.setDescription('Notifications sent by an LLDP-MED agent.')
mibBuilder.exportSymbols("LLDP-EXT-MED-MIB", lldpXMedLocXPoEPSEPortPDPriority=lldpXMedLocXPoEPSEPortPDPriority, lldpXMedRemHardwareRev=lldpXMedRemHardwareRev, lldpXMedRemSoftwareRev=lldpXMedRemSoftwareRev, lldpXMedRemMediaPolicyTagged=lldpXMedRemMediaPolicyTagged, lldpXMedTopologyChangeDetected=lldpXMedTopologyChangeDetected, lldpXMedLocXPoEPSEPortTable=lldpXMedLocXPoEPSEPortTable, lldpXMedOptMediaPolicyGroup=lldpXMedOptMediaPolicyGroup, lldpXMedLocModelName=lldpXMedLocModelName, lldpXMedRemXPoEPSEEntry=lldpXMedRemXPoEPSEEntry, lldpXMedRemXPoEPSEPowerPriority=lldpXMedRemXPoEPSEPowerPriority, lldpXMedRemSerialNum=lldpXMedRemSerialNum, lldpXMedRemXPoEEntry=lldpXMedRemXPoEEntry, lldpXMedRemLocationSubtype=lldpXMedRemLocationSubtype, lldpXMedRemXPoEPDEntry=lldpXMedRemXPoEPDEntry, lldpXMedRemXPoETable=lldpXMedRemXPoETable, lldpXMedRemXPoEPDPowerSource=lldpXMedRemXPoEPDPowerSource, lldpXMedRemMfgName=lldpXMedRemMfgName, lldpXMedOptPoEPDGroup=lldpXMedOptPoEPDGroup, lldpXMedRemCapabilitiesTable=lldpXMedRemCapabilitiesTable, lldpXMedRemDeviceClass=lldpXMedRemDeviceClass, LldpXMedDeviceClass=LldpXMedDeviceClass, lldpXMedRemInventoryEntry=lldpXMedRemInventoryEntry, lldpXMedLocXPoEDeviceType=lldpXMedLocXPoEDeviceType, lldpXMedPortConfigTLVsTxEnable=lldpXMedPortConfigTLVsTxEnable, lldpXMedObjects=lldpXMedObjects, lldpXMedLocLocationSubtype=lldpXMedLocLocationSubtype, lldpXMedFastStartRepeatCount=lldpXMedFastStartRepeatCount, lldpXMedNotificationsGroup=lldpXMedNotificationsGroup, lldpXMedLocXPoEPSEPortPowerAv=lldpXMedLocXPoEPSEPortPowerAv, lldpXMedLocMediaPolicyDscp=lldpXMedLocMediaPolicyDscp, lldpXMedConfigGroup=lldpXMedConfigGroup, lldpXMedLocLocationTable=lldpXMedLocLocationTable, lldpXMedRemoteData=lldpXMedRemoteData, lldpXMedRemCapabilitiesEntry=lldpXMedRemCapabilitiesEntry, lldpXMedRemXPoEDeviceType=lldpXMedRemXPoEDeviceType, lldpXMedRemMediaPolicyUnknown=lldpXMedRemMediaPolicyUnknown, lldpXMedMIB=lldpXMedMIB, lldpXMedConfig=lldpXMedConfig, lldpXMedLocXPoEPSEPowerSource=lldpXMedLocXPoEPSEPowerSource, lldpXMedRemCapCurrent=lldpXMedRemCapCurrent, lldpXMedOptInventoryGroup=lldpXMedOptInventoryGroup, lldpXMedLocFirmwareRev=lldpXMedLocFirmwareRev, lldpXMedLocDeviceClass=lldpXMedLocDeviceClass, lldpXMedRemXPoEPSETable=lldpXMedRemXPoEPSETable, lldpXMedConformance=lldpXMedConformance, lldpXMedCompliances=lldpXMedCompliances, lldpXMedOptPoEPSEGroup=lldpXMedOptPoEPSEGroup, lldpXMedLocMediaPolicyTable=lldpXMedLocMediaPolicyTable, lldpXMedCompliance=lldpXMedCompliance, lldpXMedRemXPoEPDPowerReq=lldpXMedRemXPoEPDPowerReq, lldpXMedLocalData=lldpXMedLocalData, lldpXMedRemXPoEPDPowerPriority=lldpXMedRemXPoEPDPowerPriority, lldpXMedLocMediaPolicyVlanID=lldpXMedLocMediaPolicyVlanID, lldpXMedRemSysGroup=lldpXMedRemSysGroup, lldpXMedLocXPoEPSEPortEntry=lldpXMedLocXPoEPSEPortEntry, lldpXMedRemMediaPolicyVlanID=lldpXMedRemMediaPolicyVlanID, lldpXMedRemMediaPolicyDscp=lldpXMedRemMediaPolicyDscp, lldpXMedRemMediaPolicyTable=lldpXMedRemMediaPolicyTable, lldpXMedRemLocationEntry=lldpXMedRemLocationEntry, lldpXMedOptLocationGroup=lldpXMedOptLocationGroup, PYSNMP_MODULE_ID=lldpXMedMIB, LocationSubtype=LocationSubtype, lldpXMedLocSoftwareRev=lldpXMedLocSoftwareRev, lldpXMedRemMediaPolicyAppType=lldpXMedRemMediaPolicyAppType, lldpXMedLocSerialNum=lldpXMedLocSerialNum, lldpXMedGroups=lldpXMedGroups, lldpXMedLocAssetID=lldpXMedLocAssetID, lldpXMedPortConfigNotifEnable=lldpXMedPortConfigNotifEnable, lldpXMedLocMfgName=lldpXMedLocMfgName, lldpXMedRemMediaPolicyPriority=lldpXMedRemMediaPolicyPriority, LldpXMedCapabilities=LldpXMedCapabilities, lldpXMedRemModelName=lldpXMedRemModelName, lldpXMedRemLocationInfo=lldpXMedRemLocationInfo, lldpXMedRemFirmwareRev=lldpXMedRemFirmwareRev, PolicyAppType=PolicyAppType, lldpXMedLocMediaPolicyAppType=lldpXMedLocMediaPolicyAppType, lldpXMedLocMediaPolicyTagged=lldpXMedLocMediaPolicyTagged, lldpXMedRemXPoEPSEPowerSource=lldpXMedRemXPoEPSEPowerSource, lldpXMedLocLocationEntry=lldpXMedLocLocationEntry, lldpXMedLocLocationInfo=lldpXMedLocLocationInfo, lldpXMedRemCapSupported=lldpXMedRemCapSupported, lldpXMedPortConfigEntry=lldpXMedPortConfigEntry, lldpXMedPortConfigTable=lldpXMedPortConfigTable, lldpXMedRemXPoEPDTable=lldpXMedRemXPoEPDTable, lldpXMedLocMediaPolicyEntry=lldpXMedLocMediaPolicyEntry, lldpXMedPortCapSupported=lldpXMedPortCapSupported, lldpXMedLocMediaPolicyPriority=lldpXMedLocMediaPolicyPriority, lldpXMedRemInventoryTable=lldpXMedRemInventoryTable, lldpXMedLocXPoEPDPowerSource=lldpXMedLocXPoEPDPowerSource, lldpXMedRemAssetID=lldpXMedRemAssetID, lldpXMedNotifications=lldpXMedNotifications, lldpXMedLocXPoEPDPowerPriority=lldpXMedLocXPoEPDPowerPriority, lldpXMedRemXPoEPSEPowerAv=lldpXMedRemXPoEPSEPowerAv, lldpXMedLocXPoEPDPowerReq=lldpXMedLocXPoEPDPowerReq, lldpXMedLocMediaPolicyUnknown=lldpXMedLocMediaPolicyUnknown, lldpXMedRemMediaPolicyEntry=lldpXMedRemMediaPolicyEntry, lldpXMedRemLocationTable=lldpXMedRemLocationTable, lldpXMedLocHardwareRev=lldpXMedLocHardwareRev)
