#
# PySNMP MIB module AH-TRAP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/aerohive/AH-TRAP-MIB
# Produced by pysmi-1.1.12 at Fri Nov 22 16:39:04 2024
# On host fv-az1437-189 platform Linux version 6.5.0-1025-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
AhString, AhNodeID, AhMACProtocol, ahAPTrap = mibBuilder.importSymbols("AH-SMI-MIB", "AhString", "AhNodeID", "AhMACProtocol", "ahAPTrap")
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Unsigned32, Bits, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Gauge32, ObjectIdentity, TruthValue, MibIdentifier, iso, IpAddress, Counter32, ModuleIdentity, TimeTicks, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Bits", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Gauge32", "ObjectIdentity", "TruthValue", "MibIdentifier", "iso", "IpAddress", "Counter32", "ModuleIdentity", "TimeTicks", "NotificationType")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class AhAuthenticationMethod(TextualConvention, Integer32):
    description = 'Authentication method supported by the HiveAP'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11))
    namedValues = NamedValues(("cwp", 0), ("open", 1), ("wep-open", 2), ("wep-shared", 3), ("wpa-psk", 4), ("wpa2-psk", 5), ("wpa-8021x", 6), ("wpa2-8021X", 7), ("wpa-auto-psk", 8), ("dynamic-wep", 10), ("x8021x", 11))

class AhEncrytionMethod(TextualConvention, Integer32):
    description = 'Encryption method supported by the HiveAP'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("aes", 0), ("tkip", 1), ("wep", 2), ("non", 3))

ahTrapModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 26928, 1, 1, 1, 1, 1))
if mibBuilder.loadTexts: ahTrapModule.setLastUpdated('200612140000Z')
if mibBuilder.loadTexts: ahTrapModule.setOrganization('Aerohive Networks, Inc.')
if mibBuilder.loadTexts: ahTrapModule.setContactInfo('See AH-SMI-MIB for information.')
if mibBuilder.loadTexts: ahTrapModule.setDescription('This is the MIB module for access point trap definitions \n\t   for Aerohive Networks Inc.')
ahNotificationVarBind = MibIdentifier((1, 3, 6, 1, 4, 1, 26928, 1, 1, 1, 1, 2))
class AhState(TextualConvention, Integer32):
    description = 'It defines the state for interfaces.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("ahUp", 1), ("ahDown", 2))

class AhProbableCause(TextualConvention, Integer32):
    description = 'It defines the probable cause for a problem on the HiveAP.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("ahClear", 0), ("ahUnknown", 1), ("ahFlashFailure", 2), ("ahFanFailure", 3), ("ahPowerSupplyFailure", 4), ("ahSoftwareUpgradeFailure", 5), ("ahRadioFailure", 6), ("ahConfFailure", 7))

ahFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 26928, 1, 1, 1, 1, 1, 1)).setObjects(("AH-TRAP-MIB", "ahAPId"), ("AH-TRAP-MIB", "ahAPName"), ("AH-TRAP-MIB", "ahObjectName"), ("AH-TRAP-MIB", "ahSeverity"), ("AH-TRAP-MIB", "ahProbableCause"), ("AH-TRAP-MIB", "ahFailureSet"), ("AH-TRAP-MIB", "ahCode"), ("AH-TRAP-MIB", "ahTrapDesc"))
if mibBuilder.loadTexts: ahFailureTrap.setStatus('current')
if mibBuilder.loadTexts: ahFailureTrap.setDescription('This event is generated for any equipment or software failures. \n                         ')
ahThresholdCrossingEvent = NotificationType((1, 3, 6, 1, 4, 1, 26928, 1, 1, 1, 1, 1, 2)).setObjects(("AH-TRAP-MIB", "ahAPId"), ("AH-TRAP-MIB", "ahAPName"), ("AH-TRAP-MIB", "ahObjectName"), ("AH-TRAP-MIB", "ahCurValue"), ("AH-TRAP-MIB", "ahThresholdHigh"), ("AH-TRAP-MIB", "ahThresholdLow"), ("AH-TRAP-MIB", "ahCode"), ("AH-TRAP-MIB", "ahTrapDesc"))
if mibBuilder.loadTexts: ahThresholdCrossingEvent.setStatus('current')
if mibBuilder.loadTexts: ahThresholdCrossingEvent.setDescription('This event is generated whenever a threshold is crossed for the first time.')
ahStateChangeEvent = NotificationType((1, 3, 6, 1, 4, 1, 26928, 1, 1, 1, 1, 1, 3)).setObjects(("AH-TRAP-MIB", "ahAPId"), ("AH-TRAP-MIB", "ahAPName"), ("AH-TRAP-MIB", "ahObjectName"), ("AH-TRAP-MIB", "ahPreviousState"), ("AH-TRAP-MIB", "ahCurrentState"), ("AH-TRAP-MIB", "ahCode"), ("AH-TRAP-MIB", "ahTrapDesc"))
if mibBuilder.loadTexts: ahStateChangeEvent.setStatus('current')
if mibBuilder.loadTexts: ahStateChangeEvent.setDescription('This event is generated whenever an object state change occurs.')
ahConnectionChangeEvent = NotificationType((1, 3, 6, 1, 4, 1, 26928, 1, 1, 1, 1, 1, 4)).setObjects(("AH-TRAP-MIB", "ahAPId"), ("AH-TRAP-MIB", "ahAPName"), ("AH-TRAP-MIB", "ahObjectName"), ("AH-TRAP-MIB", "ahIfIndex"), ("AH-TRAP-MIB", "ahObjectType"), ("AH-TRAP-MIB", "ahRemoteId"), ("AH-TRAP-MIB", "ahCurrentState"), ("AH-TRAP-MIB", "ahSSID"), ("AH-TRAP-MIB", "ahCLientIP"), ("AH-TRAP-MIB", "ahClientHostName"), ("AH-TRAP-MIB", "ahClientUserName"), ("AH-TRAP-MIB", "ahClientAuthMethod"), ("AH-TRAP-MIB", "ahClientEncryptionMethod"), ("AH-TRAP-MIB", "ahClientMACProtocol"), ("AH-TRAP-MIB", "ahClientVLAN"), ("AH-TRAP-MIB", "ahClientUserProfId"), ("AH-TRAP-MIB", "ahClientChannel"), ("AH-TRAP-MIB", "ahClientCWPUsed"), ("AH-TRAP-MIB", "ahBSSID"), ("AH-TRAP-MIB", "ahAssociationTime"), ("AH-TRAP-MIB", "ahIfName"), ("AH-TRAP-MIB", "ahIDPRSSI"), ("AH-TRAP-MIB", "ahCode"), ("AH-TRAP-MIB", "ahTrapDesc"))
if mibBuilder.loadTexts: ahConnectionChangeEvent.setStatus('current')
if mibBuilder.loadTexts: ahConnectionChangeEvent.setDescription('This event is generated whenever a connection state change\n\t\t\t occurs. The connection might be between a HiveAP and its client,\n\t\t\t or between a HiveAP and a neighboring HiveAP.')
ahIDPStationEvent = NotificationType((1, 3, 6, 1, 4, 1, 26928, 1, 1, 1, 1, 1, 5)).setObjects(("AH-TRAP-MIB", "ahAPId"), ("AH-TRAP-MIB", "ahAPName"), ("AH-TRAP-MIB", "ahIfIndex"), ("AH-TRAP-MIB", "ahObjectName"), ("AH-TRAP-MIB", "ahStationType"), ("AH-TRAP-MIB", "ahRemoteId"), ("AH-TRAP-MIB", "ahIDPType"), ("AH-TRAP-MIB", "ahIDPChannel"), ("AH-TRAP-MIB", "ahIDPRSSI"), ("AH-TRAP-MIB", "ahIDPStationData"), ("AH-TRAP-MIB", "ahIDPCompliance"), ("AH-TRAP-MIB", "ahSSID"), ("AH-TRAP-MIB", "ahRemoved"), ("AH-TRAP-MIB", "ahIDPInNet"), ("AH-TRAP-MIB", "ahCode"), ("AH-TRAP-MIB", "ahTrapDesc"))
if mibBuilder.loadTexts: ahIDPStationEvent.setStatus('current')
if mibBuilder.loadTexts: ahIDPStationEvent.setDescription('This event is generated whenever IDP detects an AP \n\t\t\t in its neighborhood. The ahRomoteId indicates the detected AP\n\t\t\t MAC address, and the ahIDPCompliance indicates conformance of\n\t\t\t IDP policy this AP satisfies. The ahIDPChannel and ahIDPRSSI\n\t\t\t indicates the radio channel and Receive Signal Strenth Indication.')
ahClientInfoEvent = NotificationType((1, 3, 6, 1, 4, 1, 26928, 1, 1, 1, 1, 1, 6)).setObjects(("AH-TRAP-MIB", "ahAPId"), ("AH-TRAP-MIB", "ahAPName"), ("AH-TRAP-MIB", "ahObjectName"), ("AH-TRAP-MIB", "ahSSID"), ("AH-TRAP-MIB", "ahClientMAC"), ("AH-TRAP-MIB", "ahCLientIP"), ("AH-TRAP-MIB", "ahClientHostName"), ("AH-TRAP-MIB", "ahClientUserName"), ("AH-TRAP-MIB", "ahCode"), ("AH-TRAP-MIB", "ahTrapDesc"))
if mibBuilder.loadTexts: ahClientInfoEvent.setStatus('current')
if mibBuilder.loadTexts: ahClientInfoEvent.setDescription('This event is generated whenever HiveAP a new client \n\t\t\t\t\tmakes an association and its IP address, hostname, and\n\t\t\t\t\tUser name is obtained.')
ahPoEEvent = NotificationType((1, 3, 6, 1, 4, 1, 26928, 1, 1, 1, 1, 1, 7)).setObjects(("AH-TRAP-MIB", "ahAPId"), ("AH-TRAP-MIB", "ahAPName"), ("AH-TRAP-MIB", "ahObjectName"), ("AH-TRAP-MIB", "ahPowerSrc"), ("AH-TRAP-MIB", "ahPoEEth0On"), ("AH-TRAP-MIB", "ahPoEEth0Pwr"), ("AH-TRAP-MIB", "ahPoEEth0MaxSpeed"), ("AH-TRAP-MIB", "ahPoEWifi0Setting"), ("AH-TRAP-MIB", "ahPoEEth1On"), ("AH-TRAP-MIB", "ahPoEEth1Pwr"), ("AH-TRAP-MIB", "ahPoEEth1MaxSpeed"), ("AH-TRAP-MIB", "ahPoEWifi1Setting"), ("AH-TRAP-MIB", "ahPoEWifi2Setting"), ("AH-TRAP-MIB", "ahCode"), ("AH-TRAP-MIB", "ahTrapDesc"))
if mibBuilder.loadTexts: ahPoEEvent.setStatus('current')
if mibBuilder.loadTexts: ahPoEEvent.setDescription('This event is generated whenever a HiveAP (802.11n \n\t\t\t\t\tproduct line) boots up or changes power levels.')
ahChannelPowerChangeEvent = NotificationType((1, 3, 6, 1, 4, 1, 26928, 1, 1, 1, 1, 1, 8)).setObjects(("AH-TRAP-MIB", "ahAPId"), ("AH-TRAP-MIB", "ahAPName"), ("AH-TRAP-MIB", "ahObjectName"), ("AH-TRAP-MIB", "ahIfIndex"), ("AH-TRAP-MIB", "ahRadioChannel"), ("AH-TRAP-MIB", "ahRadioTxPower"), ("AH-TRAP-MIB", "ahBeaconInterval"), ("AH-TRAP-MIB", "ahCode"), ("AH-TRAP-MIB", "ahTrapDesc"))
if mibBuilder.loadTexts: ahChannelPowerChangeEvent.setStatus('current')
if mibBuilder.loadTexts: ahChannelPowerChangeEvent.setDescription('This event is generated whenever a HiveAP boots up, \n\t\t\t\tor changes channels or power levels.')
ahIDPMitigateEvent = NotificationType((1, 3, 6, 1, 4, 1, 26928, 1, 1, 1, 1, 1, 9)).setObjects(("AH-TRAP-MIB", "ahAPId"), ("AH-TRAP-MIB", "ahAPName"), ("AH-TRAP-MIB", "ahIfIndex"), ("AH-TRAP-MIB", "ahObjectName"), ("AH-TRAP-MIB", "ahRemoteId"), ("AH-TRAP-MIB", "ahBSSID"), ("AH-TRAP-MIB", "ahDiscoverAge"), ("AH-TRAP-MIB", "ahUpdateAge"), ("AH-TRAP-MIB", "ahRemoved"), ("AH-TRAP-MIB", "ahCode"), ("AH-TRAP-MIB", "ahTrapDesc"))
if mibBuilder.loadTexts: ahIDPMitigateEvent.setStatus('current')
if mibBuilder.loadTexts: ahIDPMitigateEvent.setDescription('This event is generated whenever IDP detects an rogue client\n\t\t\t connect to a rogue AP. The ahRomoteId indicates the detected \n\t\t\t Station MAC address. ')
ahInterferenceMapAlertEvent = NotificationType((1, 3, 6, 1, 4, 1, 26928, 1, 1, 1, 1, 1, 10)).setObjects(("AH-TRAP-MIB", "ahAPId"), ("AH-TRAP-MIB", "ahAPName"), ("AH-TRAP-MIB", "ahIfIndex"), ("AH-TRAP-MIB", "ahObjectName"), ("AH-TRAP-MIB", "ahInterferenceThreshold"), ("AH-TRAP-MIB", "ahRunningAverageInterference"), ("AH-TRAP-MIB", "ahShortTermInterference"), ("AH-TRAP-MIB", "ahSnapshotInterference"), ("AH-TRAP-MIB", "ahCRCErrRateThreshold"), ("AH-TRAP-MIB", "ahCRCErrRate"), ("AH-TRAP-MIB", "ahSeverity"), ("AH-TRAP-MIB", "ahFailureSet"), ("AH-TRAP-MIB", "ahCode"), ("AH-TRAP-MIB", "ahTrapDesc"))
if mibBuilder.loadTexts: ahInterferenceMapAlertEvent.setStatus('current')
if mibBuilder.loadTexts: ahInterferenceMapAlertEvent.setDescription('For every one minute interval, AP will monitor the interference channel utilizations\n\t                 (snapshot, short term means average and running average) and CRC error rate \n\t                 against their thresholds, if any one of them is above their threshold \n\t                 (thresholds are settable by CLI), AP should send HM an interference alert event to HM.\n\t                 AP will send out clear alert to HM only when: the last short term period  s CRC-error-rate,\n\t                 means average Interference CU and the last snapshot interference CU are all below their thresholds.')
ahBandwidthSentinelEvent = NotificationType((1, 3, 6, 1, 4, 1, 26928, 1, 1, 1, 1, 1, 11)).setObjects(("AH-TRAP-MIB", "ahAPId"), ("AH-TRAP-MIB", "ahAPName"), ("AH-TRAP-MIB", "ahIfIndex"), ("AH-TRAP-MIB", "ahObjectName"), ("AH-TRAP-MIB", "ahClientMAC"), ("AH-TRAP-MIB", "ahBandwidthSentinelStatus"), ("AH-TRAP-MIB", "ahGuaranteedBandwidth"), ("AH-TRAP-MIB", "ahActualBandwidth"), ("AH-TRAP-MIB", "ahBandwidthSentinelAction"), ("AH-TRAP-MIB", "ahCode"), ("AH-TRAP-MIB", "ahTrapDesc"))
if mibBuilder.loadTexts: ahBandwidthSentinelEvent.setStatus('current')
if mibBuilder.loadTexts: ahBandwidthSentinelEvent.setDescription('HiveOS will send two different kinds of traps: bandwidth sentinel alert trap, and bandwidth sentinel clear trap.\n\t                 The   alert   trap will serve the purpose to tell HM that the client is violating the bandwidth sentinel,\n\t                 the   clear   trap will clear the previous   alert   trap.')
ahAlarmMsgMapAlertEvent = NotificationType((1, 3, 6, 1, 4, 1, 26928, 1, 1, 1, 1, 1, 12)).setObjects(("AH-TRAP-MIB", "ahAPId"), ("AH-TRAP-MIB", "ahAPName"), ("AH-TRAP-MIB", "ahIfIndex"), ("AH-TRAP-MIB", "ahObjectName"), ("AH-TRAP-MIB", "ahLevel"), ("AH-TRAP-MIB", "ahClientMAC"), ("AH-TRAP-MIB", "ahSSID"), ("AH-TRAP-MIB", "ahAlarmAlertType"), ("AH-TRAP-MIB", "ahThresholdValue"), ("AH-TRAP-MIB", "ahShortTermValue"), ("AH-TRAP-MIB", "ahSnapshotValue"), ("AH-TRAP-MIB", "ahFailureSet"), ("AH-TRAP-MIB", "ahCode"), ("AH-TRAP-MIB", "ahTrapDesc"))
if mibBuilder.loadTexts: ahAlarmMsgMapAlertEvent.setStatus('current')
if mibBuilder.loadTexts: ahAlarmMsgMapAlertEvent.setDescription("HiveOS will send two different kinds of level alert: interface level alert, and client level alert.\n                         There are four alert types, CRC error rate, TX drop/retry rate, Rx drop rate; interface level includes all alert type, \n                         the client level includes Tx drop/retry rate, Rx drop Rate; the 'set' alert means there is an alert raised, \n                         with type indicated in the alert type field, the 'clear' alert means the previous alert condition has been cleared.")
ahAPId = MibScalar((1, 3, 6, 1, 4, 1, 26928, 1, 1, 1, 1, 2, 1), AhNodeID())
if mibBuilder.loadTexts: ahAPId.setStatus('current')
if mibBuilder.loadTexts: ahAPId.setDescription('It is the node ID (MAC address in hexadecimal format) \n\t\t\tof the HiveAP where the trap is generated. If a HiveAP is \n\t\t\tconfigured with 2 hives, the node ID is the first MAC address\n\t\t\tof the management interface.')
ahAPName = MibScalar((1, 3, 6, 1, 4, 1, 26928, 1, 1, 1, 1, 2, 2), AhString())
if mibBuilder.loadTexts: ahAPName.setStatus('current')
if mibBuilder.loadTexts: ahAPName.setDescription('The host name of the HiveAP where the trap is generated.')
ahSeverity = MibScalar((1, 3, 6, 1, 4, 1, 26928, 1, 1, 1, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 4, 3, 2, 1))).clone(namedValues=NamedValues(("critical", 5), ("major", 4), ("minor", 3), ("info", 2), ("undetermined", 1))))
if mibBuilder.loadTexts: ahSeverity.setStatus('current')
if mibBuilder.loadTexts: ahSeverity.setDescription('It contains the serverity of the trap.')
ahObjectName = MibScalar((1, 3, 6, 1, 4, 1, 26928, 1, 1, 1, 1, 2, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64)))
if mibBuilder.loadTexts: ahObjectName.setStatus('current')
if mibBuilder.loadTexts: ahObjectName.setDescription('It describes the object for which the trap is generated.')
ahProbableCause = MibScalar((1, 3, 6, 1, 4, 1, 26928, 1, 1, 1, 1, 2, 5), AhProbableCause())
if mibBuilder.loadTexts: ahProbableCause.setStatus('current')
if mibBuilder.loadTexts: ahProbableCause.setDescription('It describes the probable cause of a problem.')
ahCurValue = MibScalar((1, 3, 6, 1, 4, 1, 26928, 1, 1, 1, 1, 2, 6), Integer32())
if mibBuilder.loadTexts: ahCurValue.setStatus('current')
if mibBuilder.loadTexts: ahCurValue.setDescription('It contains the current value of a threshold counter.')
ahThresholdHigh = MibScalar((1, 3, 6, 1, 4, 1, 26928, 1, 1, 1, 1, 2, 7), Integer32())
if mibBuilder.loadTexts: ahThresholdHigh.setStatus('current')
if mibBuilder.loadTexts: ahThresholdHigh.setDescription('It contains the value for a high threshold.')
ahThresholdLow = MibScalar((1, 3, 6, 1, 4, 1, 26928, 1, 1, 1, 1, 2, 8), Integer32())
if mibBuilder.loadTexts: ahThresholdLow.setStatus('current')
if mibBuilder.loadTexts: ahThresholdLow.setDescription('It contains the value for a low threshold.')
ahPreviousState = MibScalar((1, 3, 6, 1, 4, 1, 26928, 1, 1, 1, 1, 2, 9), AhState())
if mibBuilder.loadTexts: ahPreviousState.setStatus('current')
if mibBuilder.loadTexts: ahPreviousState.setDescription('It contains the value for a previous state.')
ahCurrentState = MibScalar((1, 3, 6, 1, 4, 1, 26928, 1, 1, 1, 1, 2, 10), AhState())
if mibBuilder.loadTexts: ahCurrentState.setStatus('current')
if mibBuilder.loadTexts: ahCurrentState.setDescription('It contains the value for the current state.')
ahTrapDesc = MibScalar((1, 3, 6, 1, 4, 1, 26928, 1, 1, 1, 1, 2, 11), DisplayString())
if mibBuilder.loadTexts: ahTrapDesc.setStatus('current')
if mibBuilder.loadTexts: ahTrapDesc.setDescription('It contains the description of the trap.')
ahCode = MibScalar((1, 3, 6, 1, 4, 1, 26928, 1, 1, 1, 1, 2, 12), Integer32())
if mibBuilder.loadTexts: ahCode.setStatus('current')
if mibBuilder.loadTexts: ahCode.setDescription('It contains access information to the Aerohive \n\t\t\tlogging/action dictionary.')
ahIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 26928, 1, 1, 1, 1, 2, 13), Integer32())
if mibBuilder.loadTexts: ahIfIndex.setStatus('current')
if mibBuilder.loadTexts: ahIfIndex.setDescription('The interface index used to identify uniquely\n\t\t\tan interface (logical or physical).')
ahObjectType = MibScalar((1, 3, 6, 1, 4, 1, 26928, 1, 1, 1, 1, 2, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clientLink", 1), ("neighborLink", 2))))
if mibBuilder.loadTexts: ahObjectType.setStatus('current')
if mibBuilder.loadTexts: ahObjectType.setDescription('It specifies the object type: a client link or a neighbor link.')
ahRemoteId = MibScalar((1, 3, 6, 1, 4, 1, 26928, 1, 1, 1, 1, 2, 15), AhNodeID())
if mibBuilder.loadTexts: ahRemoteId.setStatus('current')
if mibBuilder.loadTexts: ahRemoteId.setDescription('It is the MAC address of the remote node. If the remote \n\t\t\tnode is a HiveAP, the ID must be the MAC address\n\t\t\tof its management interface. If the remote node is a\n\t\t\tclient station, it must be the MAC address of the client.')
ahIDPType = MibScalar((1, 3, 6, 1, 4, 1, 26928, 1, 1, 1, 1, 2, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("rogue", 1), ("valid", 2), ("external", 3))))
if mibBuilder.loadTexts: ahIDPType.setStatus('current')
if mibBuilder.loadTexts: ahIDPType.setDescription('It is used to indicate the AP identified is a\n\t\trogue, or valid, or compliant, or noncompliant, or external AP.')
ahIDPChannel = MibScalar((1, 3, 6, 1, 4, 1, 26928, 1, 1, 1, 1, 2, 17), Integer32())
if mibBuilder.loadTexts: ahIDPChannel.setStatus('current')
if mibBuilder.loadTexts: ahIDPChannel.setDescription('It is the channel number used by the identified AP.')
ahIDPRSSI = MibScalar((1, 3, 6, 1, 4, 1, 26928, 1, 1, 1, 1, 2, 18), Integer32())
if mibBuilder.loadTexts: ahIDPRSSI.setStatus('current')
if mibBuilder.loadTexts: ahIDPRSSI.setDescription('It is the RSSI for the identified AP or Client.')
ahIDPCompliance = MibScalar((1, 3, 6, 1, 4, 1, 26928, 1, 1, 1, 1, 2, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32, 64, 128, 256))).clone(namedValues=NamedValues(("open-policy", 1), ("wep-policy", 2), ("wpa-policy", 4), ("wmm-policy", 8), ("oui-policy", 16), ("ssid-policy", 32), ("short-preamble-policy", 64), ("short-beacon-policy", 128), ("ad-hoc-policy", 256))))
if mibBuilder.loadTexts: ahIDPCompliance.setStatus('current')
if mibBuilder.loadTexts: ahIDPCompliance.setDescription('It is bit mask to indicate which policy the indentified\n\t\tAP is compliant with (bit is set if it is NOT compliant).')
ahSSID = MibScalar((1, 3, 6, 1, 4, 1, 26928, 1, 1, 1, 1, 2, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)))
if mibBuilder.loadTexts: ahSSID.setStatus('current')
if mibBuilder.loadTexts: ahSSID.setDescription('It contains the SSID name for the detected AP.')
ahStationType = MibScalar((1, 3, 6, 1, 4, 1, 26928, 1, 1, 1, 1, 2, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("station-ap", 1), ("station-client", 2))))
if mibBuilder.loadTexts: ahStationType.setStatus('current')
if mibBuilder.loadTexts: ahStationType.setDescription('It indicates whether it is event for a peer AP \n        \t\t\t\tor client PC')
ahIDPStationData = MibScalar((1, 3, 6, 1, 4, 1, 26928, 1, 1, 1, 1, 2, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 64, 128, 256))).clone(namedValues=NamedValues(("open-policy", 1), ("wep-policy", 2), ("wpa-policy", 4), ("wmm-policy", 8), ("short-preamble-policy", 64), ("short-beacon-policy", 128), ("ad-hoc-policy", 256))))
if mibBuilder.loadTexts: ahIDPStationData.setStatus('current')
if mibBuilder.loadTexts: ahIDPStationData.setDescription('It is bit mask to indicate policies are detected for \n\t\t\t\tthe identified AP . Note: the oui-policy and ssid-policy are\n\t\t\t\tomitted due to the presence of the ahRemoteID, and SSID in the\n\t\t\t\ttrap message. ')
ahRemoved = MibScalar((1, 3, 6, 1, 4, 1, 26928, 1, 1, 1, 1, 2, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("removed-false", 0), ("removed-true", 1))))
if mibBuilder.loadTexts: ahRemoved.setStatus('current')
if mibBuilder.loadTexts: ahRemoved.setDescription('It indicates whether the AP or client can not \n        \t\t\t\tbe detected.')
ahClientMAC = MibScalar((1, 3, 6, 1, 4, 1, 26928, 1, 1, 1, 1, 2, 24), AhNodeID())
if mibBuilder.loadTexts: ahClientMAC.setStatus('current')
if mibBuilder.loadTexts: ahClientMAC.setDescription('It contains the MAC address of the wireless client. It is \n        \t\t\t\trequired.')
ahCLientIP = MibScalar((1, 3, 6, 1, 4, 1, 26928, 1, 1, 1, 1, 2, 25), DisplayString())
if mibBuilder.loadTexts: ahCLientIP.setStatus('current')
if mibBuilder.loadTexts: ahCLientIP.setDescription('It contains the IP address of the wireless client. It is\n        \t\t\t\toptional.')
ahClientHostName = MibScalar((1, 3, 6, 1, 4, 1, 26928, 1, 1, 1, 1, 2, 26), DisplayString())
if mibBuilder.loadTexts: ahClientHostName.setStatus('current')
if mibBuilder.loadTexts: ahClientHostName.setDescription('It contains the host name of the wireless client. It is\n        \t\t\t\toptional.')
ahClientUserName = MibScalar((1, 3, 6, 1, 4, 1, 26928, 1, 1, 1, 1, 2, 27), DisplayString())
if mibBuilder.loadTexts: ahClientUserName.setStatus('current')
if mibBuilder.loadTexts: ahClientUserName.setDescription('It contains the user name of the wireless client. It is\n        \t\t\t\toptional.')
ahPowerSrc = MibScalar((1, 3, 6, 1, 4, 1, 26928, 1, 1, 1, 1, 2, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("adaptor", 0), ("poe", 1))))
if mibBuilder.loadTexts: ahPowerSrc.setStatus('current')
if mibBuilder.loadTexts: ahPowerSrc.setDescription('It indicates whether the power source is from the power adaptor or PoE. \n\t\t\t\tIf the power source is the adaptor, PoE information in the trap is ignored.')
ahPoEEth0On = MibScalar((1, 3, 6, 1, 4, 1, 26928, 1, 1, 1, 1, 2, 29), TruthValue())
if mibBuilder.loadTexts: ahPoEEth0On.setStatus('current')
if mibBuilder.loadTexts: ahPoEEth0On.setDescription('It indicates whether PoE is on eth0 or not.')
ahPoEEth0Pwr = MibScalar((1, 3, 6, 1, 4, 1, 26928, 1, 1, 1, 1, 2, 30), Integer32())
if mibBuilder.loadTexts: ahPoEEth0Pwr.setStatus('current')
if mibBuilder.loadTexts: ahPoEEth0Pwr.setDescription('It indicates the power level of PoE in watts\n        \t\t\t\tmultiply by 10.')
ahPoEEth1On = MibScalar((1, 3, 6, 1, 4, 1, 26928, 1, 1, 1, 1, 2, 31), TruthValue())
if mibBuilder.loadTexts: ahPoEEth1On.setStatus('current')
if mibBuilder.loadTexts: ahPoEEth1On.setDescription('It indicates whether PoE is on eth1 or not.')
ahPoEEth1Pwr = MibScalar((1, 3, 6, 1, 4, 1, 26928, 1, 1, 1, 1, 2, 32), Integer32())
if mibBuilder.loadTexts: ahPoEEth1Pwr.setStatus('current')
if mibBuilder.loadTexts: ahPoEEth1Pwr.setDescription('It indicates the power level of PoE on eht1 in watts\n        \t\t\t\tmultiply by 10.')
ahRadioChannel = MibScalar((1, 3, 6, 1, 4, 1, 26928, 1, 1, 1, 1, 2, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ahRadioChannel.setStatus('current')
if mibBuilder.loadTexts: ahRadioChannel.setDescription('It is the channel number currently in use for this radio.')
ahRadioTxPower = MibScalar((1, 3, 6, 1, 4, 1, 26928, 1, 1, 1, 1, 2, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ahRadioTxPower.setStatus('current')
if mibBuilder.loadTexts: ahRadioTxPower.setDescription('It is the transmit power in dBm that the radio is currently using. The range \n\t\t\t\t\tis 0 to 20 dBm.')
ahClientAuthMethod = MibScalar((1, 3, 6, 1, 4, 1, 26928, 1, 1, 1, 1, 2, 35), AhAuthenticationMethod()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ahClientAuthMethod.setStatus('current')
if mibBuilder.loadTexts: ahClientAuthMethod.setDescription('It is the authentication method the client uses when \n\t\tcommunicating with the HiveAP.')
ahClientEncryptionMethod = MibScalar((1, 3, 6, 1, 4, 1, 26928, 1, 1, 1, 1, 2, 36), AhEncrytionMethod()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ahClientEncryptionMethod.setStatus('current')
if mibBuilder.loadTexts: ahClientEncryptionMethod.setDescription('It is the encryption method the client uses when communicating\n\t\t\t\twith the HiveAP.')
ahClientMACProtocol = MibScalar((1, 3, 6, 1, 4, 1, 26928, 1, 1, 1, 1, 2, 37), AhMACProtocol()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ahClientMACProtocol.setStatus('current')
if mibBuilder.loadTexts: ahClientMACProtocol.setDescription('It is the radio mode the client uses when communicating\n\t\t\t\twith the HiveAP.')
ahClientVLAN = MibScalar((1, 3, 6, 1, 4, 1, 26928, 1, 1, 1, 1, 2, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ahClientVLAN.setStatus('current')
if mibBuilder.loadTexts: ahClientVLAN.setDescription('It is the VLAN that the client uses when communicating\n\t\t\t\twith the HiveAP.')
ahClientUserProfId = MibScalar((1, 3, 6, 1, 4, 1, 26928, 1, 1, 1, 1, 2, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ahClientUserProfId.setStatus('current')
if mibBuilder.loadTexts: ahClientUserProfId.setDescription('It is the user profile ID that the client uses when communicating\n\t\t\t\twith the HiveAP.')
ahClientChannel = MibScalar((1, 3, 6, 1, 4, 1, 26928, 1, 1, 1, 1, 2, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ahClientChannel.setStatus('current')
if mibBuilder.loadTexts: ahClientChannel.setDescription('It is the radio channel that the client uses when communicating\n\t\t\t\twith the HiveAP.')
ahClientCWPUsed = MibScalar((1, 3, 6, 1, 4, 1, 26928, 1, 1, 1, 1, 2, 41), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ahClientCWPUsed.setStatus('current')
if mibBuilder.loadTexts: ahClientCWPUsed.setDescription('It is the Boolean datatype indicating whether a captive web portal\n\t\t\t\tis used.')
ahBSSID = MibScalar((1, 3, 6, 1, 4, 1, 26928, 1, 1, 1, 1, 2, 42), AhNodeID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ahBSSID.setStatus('current')
if mibBuilder.loadTexts: ahBSSID.setDescription('It is the basic service set identifier of the client\n\t\t if the ahRemoteId is a client.')
ahPoEEth0MaxSpeed = MibScalar((1, 3, 6, 1, 4, 1, 26928, 1, 1, 1, 1, 2, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("linkdown", 1), ("eth10", 2), ("eth100", 3), ("eth1000", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ahPoEEth0MaxSpeed.setStatus('current')
if mibBuilder.loadTexts: ahPoEEth0MaxSpeed.setDescription('It is the automatically adjusted maximum Ethernet speed \n\t\tbased on the power source and level.')
ahPoEEth1MaxSpeed = MibScalar((1, 3, 6, 1, 4, 1, 26928, 1, 1, 1, 1, 2, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("linkdown", 1), ("eth10", 2), ("eth100", 3), ("eth1000", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ahPoEEth1MaxSpeed.setStatus('current')
if mibBuilder.loadTexts: ahPoEEth1MaxSpeed.setDescription('It is the automatically adjusted maximum Ethernet speed \n\t\tbased on the power source and level.')
ahPoEWifi0Setting = MibScalar((1, 3, 6, 1, 4, 1, 26928, 1, 1, 1, 1, 2, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("invalid", 0), ("linkdown", 1), ("config", 2), ("tx2rx3", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ahPoEWifi0Setting.setStatus('current')
if mibBuilder.loadTexts: ahPoEWifi0Setting.setDescription('It is the automatically adjusted Wi-Fi setting based on the \n\t\tpower source and power level.')
ahPoEWifi1Setting = MibScalar((1, 3, 6, 1, 4, 1, 26928, 1, 1, 1, 1, 2, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("invalid", 0), ("linkdown", 1), ("config", 2), ("tx2rx3", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ahPoEWifi1Setting.setStatus('current')
if mibBuilder.loadTexts: ahPoEWifi1Setting.setDescription('It is the automatically adjusted Wi-Fi setting based on the\n\t\tpower source and power level.')
ahPoEWifi2Setting = MibScalar((1, 3, 6, 1, 4, 1, 26928, 1, 1, 1, 1, 2, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("invalid", 0), ("linkdown", 1), ("config", 2), ("tx2rx3", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ahPoEWifi2Setting.setStatus('current')
if mibBuilder.loadTexts: ahPoEWifi2Setting.setDescription('It is the automatically adjusted Wi-Fi setting based on the\n\t\tpower source and power level.')
ahAssociationTime = MibScalar((1, 3, 6, 1, 4, 1, 26928, 1, 1, 1, 1, 2, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ahAssociationTime.setStatus('current')
if mibBuilder.loadTexts: ahAssociationTime.setDescription('The association time(s) of client connect or disconnect to AP.')
ahIDPInNet = MibScalar((1, 3, 6, 1, 4, 1, 26928, 1, 1, 1, 1, 2, 49), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ahIDPInNet.setStatus('current')
if mibBuilder.loadTexts: ahIDPInNet.setDescription('It is the Boolean datatype indicating whether AP is in local network.')
ahDiscoverAge = MibScalar((1, 3, 6, 1, 4, 1, 26928, 1, 1, 1, 1, 2, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ahDiscoverAge.setStatus('current')
if mibBuilder.loadTexts: ahDiscoverAge.setDescription('It is the age from the rogue client is discovered.')
ahUpdateAge = MibScalar((1, 3, 6, 1, 4, 1, 26928, 1, 1, 1, 1, 2, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ahUpdateAge.setStatus('current')
if mibBuilder.loadTexts: ahUpdateAge.setDescription('It is the age from the rogue client is updated.')
ahRunningAverageInterference = MibScalar((1, 3, 6, 1, 4, 1, 26928, 1, 1, 1, 1, 2, 52), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ahRunningAverageInterference.setStatus('current')
if mibBuilder.loadTexts: ahRunningAverageInterference.setDescription('channel utilizations running average interference.')
ahShortTermInterference = MibScalar((1, 3, 6, 1, 4, 1, 26928, 1, 1, 1, 1, 2, 53), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ahShortTermInterference.setStatus('current')
if mibBuilder.loadTexts: ahShortTermInterference.setDescription('channel utilizations short term interference.\n\t                 The short term period is defined by CLI config,\n\t                  usually, it should be in the range of 5 minutes to 30 minutes. ')
ahSnapshotInterference = MibScalar((1, 3, 6, 1, 4, 1, 26928, 1, 1, 1, 1, 2, 54), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ahSnapshotInterference.setStatus('current')
if mibBuilder.loadTexts: ahSnapshotInterference.setDescription('channel utilizations snapshot interference. it is the last minute  s means average.')
ahFailureSet = MibScalar((1, 3, 6, 1, 4, 1, 26928, 1, 1, 1, 1, 2, 55), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ahFailureSet.setStatus('current')
if mibBuilder.loadTexts: ahFailureSet.setDescription('It is the Boolean datatype indicating whether this failure(alert) is on or off.')
ahInterferenceThreshold = MibScalar((1, 3, 6, 1, 4, 1, 26928, 1, 1, 1, 1, 2, 56), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ahInterferenceThreshold.setStatus('current')
if mibBuilder.loadTexts: ahInterferenceThreshold.setDescription('the configured channel utilizations interference threshold.\n\t                 it is defined by CLI config.')
ahCRCErrRateThreshold = MibScalar((1, 3, 6, 1, 4, 1, 26928, 1, 1, 1, 1, 2, 57), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ahCRCErrRateThreshold.setStatus('current')
if mibBuilder.loadTexts: ahCRCErrRateThreshold.setDescription('the configured CRC error rate threshold. it is defined by CLI config.')
ahCRCErrRate = MibScalar((1, 3, 6, 1, 4, 1, 26928, 1, 1, 1, 1, 2, 58), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ahCRCErrRate.setStatus('current')
if mibBuilder.loadTexts: ahCRCErrRate.setDescription('short term CRC error rate. The interval of the refresh of CRC error rate calculation \n\t                 is the same interval as channel utilization short term means average interval.')
ahBandwidthSentinelStatus = MibScalar((1, 3, 6, 1, 4, 1, 26928, 1, 1, 1, 1, 2, 59), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("alert", 0), ("clear", 1), ("bad", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ahBandwidthSentinelStatus.setStatus('current')
if mibBuilder.loadTexts: ahBandwidthSentinelStatus.setDescription('Bandwidth sentinel status.\n\t\t         In alert message, the value should be zero. In clear message, the value should be 1.')
ahGuaranteedBandwidth = MibScalar((1, 3, 6, 1, 4, 1, 26928, 1, 1, 1, 1, 2, 60), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ahGuaranteedBandwidth.setStatus('current')
if mibBuilder.loadTexts: ahGuaranteedBandwidth.setDescription('the configured guaranteed bandwidth(Kbps). it is defined by CLI config.')
ahActualBandwidth = MibScalar((1, 3, 6, 1, 4, 1, 26928, 1, 1, 1, 1, 2, 61), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ahActualBandwidth.setStatus('current')
if mibBuilder.loadTexts: ahActualBandwidth.setDescription('the actual bandwidth(Kbps).')
ahBandwidthSentinelAction = MibScalar((1, 3, 6, 1, 4, 1, 26928, 1, 1, 1, 1, 2, 62), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ahBandwidthSentinelAction.setStatus('current')
if mibBuilder.loadTexts: ahBandwidthSentinelAction.setDescription('bit maps to indicate which action has been taken on this client.\n\t                 bit 0: indicate whether log the guaranteed bandwidth violation or not,\n\t                 bit 1: indicate whether add more token to meet the minimum guaranteed bandwidth or not.')
ahBeaconInterval = MibScalar((1, 3, 6, 1, 4, 1, 26928, 1, 1, 1, 1, 2, 63), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ahBeaconInterval.setStatus('current')
if mibBuilder.loadTexts: ahBeaconInterval.setDescription('It is the number of time units between Beacon transmissions, One time unit is\n                         1024 microseconds.')
ahLevel = MibScalar((1, 3, 6, 1, 4, 1, 26928, 1, 1, 1, 1, 2, 64), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("interface", 1), ("client", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ahLevel.setStatus('current')
if mibBuilder.loadTexts: ahLevel.setDescription('The level value will tell HM whether this is an interface level alert or a client alert.')
ahAlarmAlertType = MibScalar((1, 3, 6, 1, 4, 1, 26928, 1, 1, 1, 1, 2, 65), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("crcrate", 0), ("txdroprate", 1), ("txretryrate", 2), ("rxdroprate", 3), ("airtime", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ahAlarmAlertType.setStatus('current')
if mibBuilder.loadTexts: ahAlarmAlertType.setDescription('There are five types, CRC Rate only applies to interface level alert, \n                             TX drop/retry rate is is calculated based on retries over total unicast TX frames,\n                             RX drop rate is calculated based on the dropped RX frames over total RX frames,\n                             Airtime percentage is the sum of both TX and RX airtime percentages.')
ahThresholdValue = MibScalar((1, 3, 6, 1, 4, 1, 26928, 1, 1, 1, 1, 2, 66), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ahThresholdValue.setStatus('current')
if mibBuilder.loadTexts: ahThresholdValue.setDescription('the configured CRC error rate, TX drop/retry rate, RX drop rate threshold. it is defined by CLI config.')
ahShortTermValue = MibScalar((1, 3, 6, 1, 4, 1, 26928, 1, 1, 1, 1, 2, 67), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ahShortTermValue.setStatus('current')
if mibBuilder.loadTexts: ahShortTermValue.setDescription('the percentage of this sampling period, CRC error rate, TX drop/retry rate, RX drop rate.')
ahSnapshotValue = MibScalar((1, 3, 6, 1, 4, 1, 26928, 1, 1, 1, 1, 2, 68), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ahSnapshotValue.setStatus('current')
if mibBuilder.loadTexts: ahSnapshotValue.setDescription('the snapshot value of CRC error rate, TX drop/retry rate, RX drop rate.')
ahIfName = MibScalar((1, 3, 6, 1, 4, 1, 26928, 1, 1, 1, 1, 2, 69), AhString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ahIfName.setStatus('current')
if mibBuilder.loadTexts: ahIfName.setDescription('Name - uniquely identifies an AP Interface.')
mibBuilder.exportSymbols("AH-TRAP-MIB", ahClientMAC=ahClientMAC, ahPowerSrc=ahPowerSrc, ahShortTermInterference=ahShortTermInterference, ahLevel=ahLevel, ahRunningAverageInterference=ahRunningAverageInterference, ahPoEEth0Pwr=ahPoEEth0Pwr, AhAuthenticationMethod=AhAuthenticationMethod, ahClientVLAN=ahClientVLAN, ahThresholdCrossingEvent=ahThresholdCrossingEvent, ahCRCErrRate=ahCRCErrRate, ahIDPInNet=ahIDPInNet, ahInterferenceMapAlertEvent=ahInterferenceMapAlertEvent, ahFailureTrap=ahFailureTrap, ahObjectType=ahObjectType, ahThresholdLow=ahThresholdLow, ahAssociationTime=ahAssociationTime, ahTrapDesc=ahTrapDesc, ahClientMACProtocol=ahClientMACProtocol, ahCode=ahCode, ahClientAuthMethod=ahClientAuthMethod, ahPoEWifi1Setting=ahPoEWifi1Setting, ahThresholdHigh=ahThresholdHigh, ahIDPCompliance=ahIDPCompliance, ahPoEWifi0Setting=ahPoEWifi0Setting, ahSSID=ahSSID, ahTrapModule=ahTrapModule, ahPreviousState=ahPreviousState, ahInterferenceThreshold=ahInterferenceThreshold, ahThresholdValue=ahThresholdValue, ahStateChangeEvent=ahStateChangeEvent, ahCRCErrRateThreshold=ahCRCErrRateThreshold, ahIDPStationEvent=ahIDPStationEvent, ahClientEncryptionMethod=ahClientEncryptionMethod, ahIfIndex=ahIfIndex, ahAPId=ahAPId, ahSeverity=ahSeverity, ahPoEEth0MaxSpeed=ahPoEEth0MaxSpeed, ahBandwidthSentinelStatus=ahBandwidthSentinelStatus, ahClientCWPUsed=ahClientCWPUsed, ahRemoteId=ahRemoteId, ahPoEWifi2Setting=ahPoEWifi2Setting, ahSnapshotValue=ahSnapshotValue, ahPoEEth1On=ahPoEEth1On, ahPoEEth1MaxSpeed=ahPoEEth1MaxSpeed, ahFailureSet=ahFailureSet, ahDiscoverAge=ahDiscoverAge, ahIfName=ahIfName, ahCLientIP=ahCLientIP, ahClientInfoEvent=ahClientInfoEvent, ahIDPMitigateEvent=ahIDPMitigateEvent, ahIDPStationData=ahIDPStationData, ahCurrentState=ahCurrentState, AhState=AhState, ahGuaranteedBandwidth=ahGuaranteedBandwidth, ahBandwidthSentinelEvent=ahBandwidthSentinelEvent, ahChannelPowerChangeEvent=ahChannelPowerChangeEvent, ahAPName=ahAPName, ahCurValue=ahCurValue, ahClientChannel=ahClientChannel, ahBandwidthSentinelAction=ahBandwidthSentinelAction, ahPoEEth1Pwr=ahPoEEth1Pwr, ahRemoved=ahRemoved, ahClientHostName=ahClientHostName, ahAlarmAlertType=ahAlarmAlertType, ahConnectionChangeEvent=ahConnectionChangeEvent, ahObjectName=ahObjectName, ahShortTermValue=ahShortTermValue, ahUpdateAge=ahUpdateAge, ahNotificationVarBind=ahNotificationVarBind, ahIDPType=ahIDPType, ahClientUserProfId=ahClientUserProfId, ahActualBandwidth=ahActualBandwidth, ahClientUserName=ahClientUserName, ahBSSID=ahBSSID, ahProbableCause=ahProbableCause, ahPoEEvent=ahPoEEvent, ahPoEEth0On=ahPoEEth0On, ahIDPChannel=ahIDPChannel, AhEncrytionMethod=AhEncrytionMethod, ahAlarmMsgMapAlertEvent=ahAlarmMsgMapAlertEvent, ahSnapshotInterference=ahSnapshotInterference, ahStationType=ahStationType, PYSNMP_MODULE_ID=ahTrapModule, ahIDPRSSI=ahIDPRSSI, ahRadioChannel=ahRadioChannel, ahBeaconInterval=ahBeaconInterval, AhProbableCause=AhProbableCause, ahRadioTxPower=ahRadioTxPower)
