#
# PySNMP MIB module F3-CFM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/adva/F3-CFM-MIB
# Produced by pysmi-1.1.12 at Tue Jun  4 10:05:32 2024
# On host fv-az801-864 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
fsp150cm, = mibBuilder.importSymbols("ADVA-MIB", "fsp150cm")
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
OperationalState, VlanPriority, PerfCounter64, AdminState, SecondaryState, CmPmBinAction = mibBuilder.importSymbols("CM-COMMON-MIB", "OperationalState", "VlanPriority", "PerfCounter64", "AdminState", "SecondaryState", "CmPmBinAction")
neIndex, slotIndex, shelfIndex = mibBuilder.importSymbols("CM-ENTITY-MIB", "neIndex", "slotIndex", "shelfIndex")
cmEthernetAccPortIndex, cmEthernetTrafficPortIndex, cmEthernetNetPortIndex = mibBuilder.importSymbols("CM-FACILITY-MIB", "cmEthernetAccPortIndex", "cmEthernetTrafficPortIndex", "cmEthernetNetPortIndex")
dot1agCfmMepIdentifier, dot1agCfmMepEntry, Dot1agCfmMDLevel, dot1agCfmMdIndex, dot1agCfmMaIndex, dot1agCfmMaNetEntry, Dot1agCfmMepId, dot1agCfmMaCompEntry = mibBuilder.importSymbols("IEEE8021-CFM-MIB", "dot1agCfmMepIdentifier", "dot1agCfmMepEntry", "Dot1agCfmMDLevel", "dot1agCfmMdIndex", "dot1agCfmMaIndex", "dot1agCfmMaNetEntry", "Dot1agCfmMepId", "dot1agCfmMaCompEntry")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
TimeTicks, ObjectIdentity, IpAddress, Unsigned32, MibIdentifier, ModuleIdentity, Integer32, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Counter64, NotificationType, Gauge32, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "ObjectIdentity", "IpAddress", "Unsigned32", "MibIdentifier", "ModuleIdentity", "Integer32", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Counter64", "NotificationType", "Gauge32", "Bits")
MacAddress, RowStatus, TruthValue, VariablePointer, DisplayString, TextualConvention, StorageType = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "RowStatus", "TruthValue", "VariablePointer", "DisplayString", "TextualConvention", "StorageType")
f3CfmMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2544, 1, 12, 13))
f3CfmMIB.setRevisions(('2021-01-28 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: f3CfmMIB.setRevisionsDescriptions(('\n         Notes from release 201706220000Z,\n         (1) Added TEXTUAL-CONVENTION CfmPduVersionType\n         (2) Added object cfmMepVersion\n \n         Notes from release 201302130000Z,\n         (i)Added TEXTUAL-CONVENTION CfmSignalFailTriggers \n         (ii)Added scalar cfmSignalFailTriggers \n\n         Notes from release 201111220000Z,\n         (i)Added the following objects to support CFM MEPs and Server MEPs on\n            pluggable cards: \n              -cfmMepOperationalState, cfmMepSecondaryState\n              -cfmServerMepAdminState, cfmServerMepOperationalState, \n               cfmServerMepSecondaryState\n\n          Notes from release 201012160000Z,\n           -Formalized the OBJECT-GROUP definitions\n\n          Notes from release 201012160000Z,\n           -Updated description of cfmAccPortQosShaperIndex\n\n          Notes from release 201012140000Z,\n           -Added object cfmMepStatsAction\n\n         Notes from release 201005130000Z,\n         (1)New scalars slmMulticastMacAddress, slmOpcode, slrOpcode \n            are added\n\n         Notes from release 201003310000Z,\n         (1)New table cfmServerMepTable is added\n\n         Notes from release 200903190000Z,\n         (1)MIB version ready for release of FSP150CC devices GE101 and GE206.',))
if mibBuilder.loadTexts: f3CfmMIB.setLastUpdated('202101280000Z')
if mibBuilder.loadTexts: f3CfmMIB.setOrganization('ADVA Optical Networking SE')
if mibBuilder.loadTexts: f3CfmMIB.setContactInfo('Web URL: http://adva.com/\n        E-mail:  support@adva.com\n        Postal:  ADVA Optical Networking SE\n             Campus Martinsried\n             Fraunhoferstrasse 9a\n             82152 Martinsried/Munich\n             Germany\n        Phone: +49 089 89 06 65 0\n        Fax:  +49 089 89 06 65 199 ')
if mibBuilder.loadTexts: f3CfmMIB.setDescription('This module defines the CFM (8021AG) Extension MIB definitions \n             used by the F3 (FSP150CM/CC) product lines.  \n             Copyright (C) ADVA.')
cfmExtSvc = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 13, 1))
cfmExtSvcObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 13, 1, 1))
cfmExtSvcConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 13, 1, 2))
class CfmAisGenTriggerTypes(TextualConvention, Bits):
    description = 'Bit Mask that specifies all the defects that can trigger AIS to be\n        generated.'
    status = 'current'
    namedValues = NamedValues(("bAisDefRemoteCCM", 0), ("bAisDefErrorCCM", 1), ("bAisDefXconCCM", 2), ("bAisDefAis", 3))

class CfmAisInterval(TextualConvention, Integer32):
    description = 'AIS interval which is the frequency of ETH-AIS frame generation.\n        Note the values of the 1 second and 1 minute integers which are aligned\n        with the values defined for the AIS interval for AIS PDU in Y.1731.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("aisInterval1sec", 1), ("aisInterval1min", 2))

class CfmLmmDmmInterval(TextualConvention, Integer32):
    description = 'Y.1731 Loss or delay measurement frame transmission interval.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("interval10msec", 1), ("interval100msec", 2), ("interval1sec", 3), ("interval10sec", 4), ("interval1min", 5))

class CfmMepDefects(TextualConvention, Bits):
    description = 'A MEP can detect and report a number of defects such as\n         RDI, MACStatus, RMEP CCM, Error CCM, Xconn CCM. These are\n         are defined in Dot1agCfmMepDefects in standard 802.1ag MIB.\n         Y.1731 adds additional defects such as AIS defect which is\n         defined here.\n          bDefAIS(0) A MEP received an ETH-AIS frame/indication.\n        '
    status = 'current'
    namedValues = NamedValues(("bDefAIS", 0))

class CfmLLFTriggerTypes(TextualConvention, Bits):
    description = 'Bit Mask that specifies all the conditions that trigger a link loss\n        forwarding.'
    status = 'current'
    namedValues = NamedValues(("bAis", 0), ("bCcmIfStatusTlv", 1), ("bRemoteCCM", 2), ("bRDI", 3))

class CfmSignalFailTriggers(TextualConvention, Bits):
    description = 'Bit Mask that specifies all the conditions that trigger Signal Fail.'
    status = 'current'
    namedValues = NamedValues(("rdiCcm", 0), ("remoteCcm", 1), ("erroredCcm", 2), ("xconCcm", 3), ("ais", 4))

class CfmSlmEnabledTypes(TextualConvention, Bits):
    description = 'Bit Mask that specifies all the priorities.'
    status = 'current'
    namedValues = NamedValues(("cos0", 0), ("cos1", 1), ("cos2", 2), ("cos3", 3), ("cos4", 4), ("cos5", 5), ("cos6", 6), ("cos7", 7))

class CfmPduVersionType(TextualConvention, Integer32):
    description = 'Indicates the version of the Y.1731 OAM PDUs.\n          y1731-2008  -- Indicates the PDU formats defined in Y.1731-2008.\n          y1731-2011  -- Indicates the PDU formats defined in Y.1731-2011.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("notApplicable", 0), ("y1731-2008", 1), ("y1731-2011", 2))

cfmExtScalars = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 13, 1, 1, 1))
cfmEthType = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 13, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmEthType.setStatus('current')
if mibBuilder.loadTexts: cfmEthType.setDescription('This object provides the system level Ethernet type for CFM.')
cfmMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 13, 1, 1, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmMacAddress.setStatus('current')
if mibBuilder.loadTexts: cfmMacAddress.setDescription('This object provides the system level Mac address for CFM.')
slmMulticastMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 13, 1, 1, 1, 3), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slmMulticastMacAddress.setStatus('current')
if mibBuilder.loadTexts: slmMulticastMacAddress.setDescription('This object can be used to configure the Synthetic Loss Measurement(SLM)\n          Multicast MAC Address.')
slmOpcode = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 13, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slmOpcode.setStatus('current')
if mibBuilder.loadTexts: slmOpcode.setDescription('This object can be used to configure the Operation Code for the\n          Synthetic Loss Measurement(SLM) message.')
slrOpcode = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 13, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slrOpcode.setStatus('current')
if mibBuilder.loadTexts: slrOpcode.setDescription('This object can be used to configure the Operation Code for the\n          Synthetic Loss Response(SLR) message.')
cfmSignalFailTriggers = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 13, 1, 1, 1, 6), CfmSignalFailTriggers()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfmSignalFailTriggers.setStatus('current')
if mibBuilder.loadTexts: cfmSignalFailTriggers.setDescription('This object can be used to configure the list of defects which constitute\n          Signal Fail condition.')
cfmMepTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 13, 1, 1, 2), )
if mibBuilder.loadTexts: cfmMepTable.setStatus('current')
if mibBuilder.loadTexts: cfmMepTable.setDescription('Additional MEP configuration such as Y.1731 configuration.')
cfmMepEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 13, 1, 1, 2, 1), )
dot1agCfmMepEntry.registerAugmentions(("F3-CFM-MIB", "cfmMepEntry"))
cfmMepEntry.setIndexNames(*dot1agCfmMepEntry.getIndexNames())
if mibBuilder.loadTexts: cfmMepEntry.setStatus('current')
if mibBuilder.loadTexts: cfmMepEntry.setDescription('A list of additional MEP parameters such the Y.1731 parameters.')
cfmMepAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 13, 1, 1, 2, 1, 1), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfmMepAdminState.setStatus('current')
if mibBuilder.loadTexts: cfmMepAdminState.setDescription('This object represents the Administrative State of the CFM MEPs.')
cfmMepAisGenTriggerTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 13, 1, 1, 2, 1, 2), CfmAisGenTriggerTypes()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cfmMepAisGenTriggerTypes.setStatus('current')
if mibBuilder.loadTexts: cfmMepAisGenTriggerTypes.setDescription('A bit mask which indicates all the defects that result in triggering\n         an AIS for the higher level MEP or transmission of ETH-AIS.')
cfmMepAisClientMdLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 13, 1, 1, 2, 1, 3), Dot1agCfmMDLevel()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cfmMepAisClientMdLevel.setStatus('current')
if mibBuilder.loadTexts: cfmMepAisClientMdLevel.setDescription('AIS Client MD level which is the MD level used to identify any\n         higher level local MEPs for which AIS defect needs to be set or\n         MD level of the ETH-AIS frame generated if there are no local MEPs\n         at this MD level.')
cfmMepAisInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 13, 1, 1, 2, 1, 4), CfmAisInterval()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cfmMepAisInterval.setStatus('current')
if mibBuilder.loadTexts: cfmMepAisInterval.setDescription('ETH-AIS frame transmission interval if decision is made to transmit the\n         ETH-AIS frame.')
cfmMepAisGenEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 13, 1, 1, 2, 1, 5), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cfmMepAisGenEnabled.setStatus('current')
if mibBuilder.loadTexts: cfmMepAisGenEnabled.setDescription('This flag enables/disables propagation of ETH-AIS to client MD levels.')
cfmMepAisPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 13, 1, 1, 2, 1, 6), VlanPriority()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cfmMepAisPriority.setStatus('current')
if mibBuilder.loadTexts: cfmMepAisPriority.setDescription('This VLAN priority of the ETH-AIS frame.')
cfmMepLmTxCountAllPriosEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 13, 1, 1, 2, 1, 7), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cfmMepLmTxCountAllPriosEnabled.setStatus('current')
if mibBuilder.loadTexts: cfmMepLmTxCountAllPriosEnabled.setDescription('This attribute is used when Y.1731 probes are created and LMM frames\n         are transmitted. As per Y.1731, loss measurement should be done per\n         priority class. The implementation is restricted to support counting\n         of frames for only one priority that can be modified. As an added\n         value there is an option to count all priorities. This flag is used\n         to decide whether to put cumulative data frame counts for all the\n         priorities into the LMM that is transmitted by the MEP instead of\n         data frame counts for a provisioned individual priority.')
cfmMepLmRxCountAllPriosEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 13, 1, 1, 2, 1, 8), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cfmMepLmRxCountAllPriosEnabled.setStatus('current')
if mibBuilder.loadTexts: cfmMepLmRxCountAllPriosEnabled.setDescription('This attribute is used when Y.1731 probes are created and LMR frames\n         are transmitted. As per Y.1731, loss measurement should be done per\n         priority class. The implementation is restricted to support counting\n         of frames for only one priority that can be modified. As an added\n         value there is an option to count all priorities. This flag is used\n         to decide whether to put cumulative data frame counts for all the\n         priorities into the LMR that is transmitted by the MEP instead of\n         data frame counts for a provisioned individual priority. LMR is sent\n         by a MEP when an LMM is received.')
cfmMepLmDualEndedCountAllPriosEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 13, 1, 1, 2, 1, 9), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cfmMepLmDualEndedCountAllPriosEnabled.setStatus('current')
if mibBuilder.loadTexts: cfmMepLmDualEndedCountAllPriosEnabled.setDescription('This attribute is used when Y.1731 probes are created and CCM frames\n         are transmitted with loss measurement counts. As per Y.1731, loss\n         measurement should be done per priority class. The implementation is\n         restricted to support counting of frames for only one priority that\n         can be modified. As an added value there is an option to count all\n         priorities. This flag is used to decide whether to put cumulative\n         data frame counts for all the priorities into the CCM instead of\n         data frame counts for a provisioned individual priority.')
cfmMepLmCountInProfileEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 13, 1, 1, 2, 1, 10), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cfmMepLmCountInProfileEnabled.setStatus('current')
if mibBuilder.loadTexts: cfmMepLmCountInProfileEnabled.setDescription('As per the Y.1731 data frames counted for loss measurement shall be\n         in-profile (green) data frames. As an added value, this flag is\n         provided for the device to count all frames instead of green frames\n         only. This flag could be set to false in cases where the remote\n         device is not color aware and/or capable of color marking. Even\n         if the device is capable of color marking and is color aware if the\n         outer tag is not an S-TAG it makes sense to set this flag to false.\n         As defined in IEEE 802.1ad the S-TAG has the drop eligibility bit\n         that is used to mark the frames green or yellow.')
cfmMepLmTxPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 13, 1, 1, 2, 1, 11), VlanPriority()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cfmMepLmTxPriority.setStatus('current')
if mibBuilder.loadTexts: cfmMepLmTxPriority.setDescription('This attribute is used if cfmMepLmTxCountAllPrios is false.\n         This attribute serves three purposes:\n         - It is the VLAN priority of the LMM.\n         - Data frames transmitted and received with this VLAN priority\n           are counted by the MEP. The transmit count is sent in the LMM\n           and the receive count is used to complete the list of four\n           counts used for the loss measurement.\n         - If an LMR is received with a VLAN priority other than this\n           the LMR is dropped.')
cfmMepDmPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 13, 1, 1, 2, 1, 12), VlanPriority()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cfmMepDmPriority.setStatus('current')
if mibBuilder.loadTexts: cfmMepDmPriority.setDescription('This attribute specifies the DMM frame VLAN priority.')
cfmMepRxCCMs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 13, 1, 1, 2, 1, 13), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmMepRxCCMs.setStatus('current')
if mibBuilder.loadTexts: cfmMepRxCCMs.setDescription('This provides the total number of received CCMs on the MEP.')
cfmMepErrCCMs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 13, 1, 1, 2, 1, 14), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmMepErrCCMs.setStatus('current')
if mibBuilder.loadTexts: cfmMepErrCCMs.setDescription('This provides the total number of errored CCMs on the MEP.')
cfmMepLLFTriggerTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 13, 1, 1, 2, 1, 15), CfmLLFTriggerTypes()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cfmMepLLFTriggerTypes.setStatus('current')
if mibBuilder.loadTexts: cfmMepLLFTriggerTypes.setDescription('This bit mask indicates the CFM triggers that result in link loss\n         forwarding.')
cfmMepDefects = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 13, 1, 1, 2, 1, 16), CfmMepDefects()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmMepDefects.setStatus('current')
if mibBuilder.loadTexts: cfmMepDefects.setDescription('This bit mask indicates defects that not defined in standard 802.1ag\n         MIB such as AIS defect.')
cfmMepTagEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 13, 1, 1, 2, 1, 17), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfmMepTagEtherType.setStatus('current')
if mibBuilder.loadTexts: cfmMepTagEtherType.setDescription('This object allows management of Ether Type for MEP VLAN Tag for the MEPs.')
cfmMepStatsAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 13, 1, 1, 2, 1, 18), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfmMepStatsAction.setStatus('current')
if mibBuilder.loadTexts: cfmMepStatsAction.setDescription('Allows the Manager to clear the CFM level \n                 statistics : cfmMepRxCCMs, cfmMepErrCCMs.')
cfmMepLbmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 13, 1, 1, 2, 1, 19), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cfmMepLbmInterval.setStatus('current')
if mibBuilder.loadTexts: cfmMepLbmInterval.setDescription('ETH-LBM frame transmission interval.')
cfmMepOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 13, 1, 1, 2, 1, 20), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmMepOperationalState.setStatus('current')
if mibBuilder.loadTexts: cfmMepOperationalState.setDescription('This object represents the Operational State of the CFM MEP.')
cfmMepSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 13, 1, 1, 2, 1, 21), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmMepSecondaryState.setStatus('current')
if mibBuilder.loadTexts: cfmMepSecondaryState.setDescription('This object represents the Secondary State of the CFM MEP.')
cfmMepSlmEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 13, 1, 1, 2, 1, 22), CfmSlmEnabledTypes()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfmMepSlmEnabled.setStatus('current')
if mibBuilder.loadTexts: cfmMepSlmEnabled.setDescription('This bit mask indicates the whether SLM is enabled per each COS.')
cfmMepAssociatedObject = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 13, 1, 1, 2, 1, 23), VariablePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfmMepAssociatedObject.setStatus('current')
if mibBuilder.loadTexts: cfmMepAssociatedObject.setDescription('This object represents the associated port, it could be port, flow or flow point.')
cfmMepPduVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 13, 1, 1, 2, 1, 24), CfmPduVersionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfmMepPduVersion.setStatus('current')
if mibBuilder.loadTexts: cfmMepPduVersion.setDescription('This object indicates the version of the Y.1731 OAM PDUs')
cfmMepLlbResponderEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 13, 1, 1, 2, 1, 25), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfmMepLlbResponderEnabled.setStatus('current')
if mibBuilder.loadTexts: cfmMepLlbResponderEnabled.setDescription('This attribute specifies whether Latching Loopback Responder\n         function is enabled.')
cfmMepLlbPortLLEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 13, 1, 1, 2, 1, 26), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfmMepLlbPortLLEnabled.setStatus('current')
if mibBuilder.loadTexts: cfmMepLlbPortLLEnabled.setDescription('This attribute enables port loopback. In MEF 46 loopback is based\n         on LLFS (Latching Loopback Frame Set) which is untagged or tagged.\n         MEF 46 does not have the notion of port loopback. If this attribute\n         is true a port loopback will be activated instead of loopback for\n         untagged frames when LLFS is untagged.')
cfmMepLlbVidList = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 13, 1, 1, 2, 1, 27), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfmMepLlbVidList.setStatus('current')
if mibBuilder.loadTexts: cfmMepLlbVidList.setDescription('This is a list of VIDs on which Latching Loopback is allowed.\n         An empty list indicates it is allowed on any VID. This list is\n         shall allow combination of individual VIDs and or ranges.\n         VIDs or VID ranges are comma separated. VID ranges are of the\n         form X1:X2 (range of VIDs from X1 to X2).')
cfmMepCcmInterfaceStatusTLVControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 13, 1, 1, 2, 1, 28), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfmMepCcmInterfaceStatusTLVControl.setStatus('current')
if mibBuilder.loadTexts: cfmMepCcmInterfaceStatusTLVControl.setDescription('This attribute controls MEP option of the insertion of the Interface \n         Status TLV in CCM messages.')
cfmAccPortQosShaperTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 13, 1, 1, 3), )
if mibBuilder.loadTexts: cfmAccPortQosShaperTable.setStatus('current')
if mibBuilder.loadTexts: cfmAccPortQosShaperTable.setDescription('A list of configurable profile entries for CFM QoS Shapers for Access Port.')
cfmAccPortQosShaperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 13, 1, 1, 3, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetAccPortIndex"), (0, "F3-CFM-MIB", "cfmAccPortQosShaperIndex"))
if mibBuilder.loadTexts: cfmAccPortQosShaperEntry.setStatus('current')
if mibBuilder.loadTexts: cfmAccPortQosShaperEntry.setDescription('A list of parameters that set up the CFM QoS Queue profiles.\n         This shaper is created automatically when the first Down MEP\n         is created on a Access Port.')
cfmAccPortQosShaperIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 13, 1, 1, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: cfmAccPortQosShaperIndex.setStatus('current')
if mibBuilder.loadTexts: cfmAccPortQosShaperIndex.setDescription('A unique index associated with the type of Access Port Based Shaper.\n         Index 1 refers to the Shaper associated with PORT-based Down MEPs,\n         Index 2 refers to the Shaper associated with the VID-based Down MEPs.')
cfmAccPortQosShaperCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 13, 1, 1, 3, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfmAccPortQosShaperCIR.setStatus('current')
if mibBuilder.loadTexts: cfmAccPortQosShaperCIR.setDescription('This object identifies the queue CIR.')
cfmAccPortQosShaperBufSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 13, 1, 1, 3, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfmAccPortQosShaperBufSize.setStatus('current')
if mibBuilder.loadTexts: cfmAccPortQosShaperBufSize.setDescription('This object identifies the queue buffer size.')
cfmAccPortQosShaperAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 13, 1, 1, 3, 1, 4), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfmAccPortQosShaperAdminState.setStatus('current')
if mibBuilder.loadTexts: cfmAccPortQosShaperAdminState.setDescription("This object allows the management of the Shaper Administrative State.\n          Only 'in-service' and 'management' states are allowed.")
cfmNetPortQosShaperTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 13, 1, 1, 4), )
if mibBuilder.loadTexts: cfmNetPortQosShaperTable.setStatus('current')
if mibBuilder.loadTexts: cfmNetPortQosShaperTable.setDescription('A list of configurable profile entries for CFM QoS Shapers for Network Port.')
cfmNetPortQosShaperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 13, 1, 1, 4, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetNetPortIndex"), (0, "F3-CFM-MIB", "cfmNetPortQosShaperTypeIndex"))
if mibBuilder.loadTexts: cfmNetPortQosShaperEntry.setStatus('current')
if mibBuilder.loadTexts: cfmNetPortQosShaperEntry.setDescription('A list of parameters that set up the CFM QoS Queue profiles.\n         This shaper is created automatically when the first Down MEP\n         is created on a Network Port.')
cfmNetPortQosShaperTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 13, 1, 1, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: cfmNetPortQosShaperTypeIndex.setStatus('current')
if mibBuilder.loadTexts: cfmNetPortQosShaperTypeIndex.setDescription('A unique index associated with the type of Network Port Based Shaper.\n         Index 1 refers to the Shaper associated with PORT-based Down MEPs,\n         Index 2 refers to the Shaper associated with the VID-based Down MEPs.')
cfmNetPortQosShaperCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 13, 1, 1, 4, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfmNetPortQosShaperCIR.setStatus('current')
if mibBuilder.loadTexts: cfmNetPortQosShaperCIR.setDescription('This object identifies the queue CIR.')
cfmNetPortQosShaperBufSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 13, 1, 1, 4, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfmNetPortQosShaperBufSize.setStatus('current')
if mibBuilder.loadTexts: cfmNetPortQosShaperBufSize.setDescription('This object identifies the queue buffer size.')
cfmNetPortQosShaperAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 13, 1, 1, 4, 1, 4), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfmNetPortQosShaperAdminState.setStatus('current')
if mibBuilder.loadTexts: cfmNetPortQosShaperAdminState.setDescription("This object allows the management of the Shaper Administrative State.\n          Only 'in-service' and 'management' states are allowed.")
cfmServerMepTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 13, 1, 1, 5), )
if mibBuilder.loadTexts: cfmServerMepTable.setStatus('current')
if mibBuilder.loadTexts: cfmServerMepTable.setDescription('Server MEP management table.')
cfmServerMepEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 13, 1, 1, 5, 1), ).setIndexNames((0, "F3-CFM-MIB", "cfmServerMepIndex"))
if mibBuilder.loadTexts: cfmServerMepEntry.setStatus('current')
if mibBuilder.loadTexts: cfmServerMepEntry.setDescription('This allows management of Server MEPs.')
cfmServerMepIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 13, 1, 1, 5, 1, 1), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cfmServerMepIndex.setStatus('current')
if mibBuilder.loadTexts: cfmServerMepIndex.setDescription('The integer index value corresponding to a Server MEP.')
cfmServerMepAssociatedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 13, 1, 1, 5, 1, 2), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cfmServerMepAssociatedPort.setStatus('current')
if mibBuilder.loadTexts: cfmServerMepAssociatedPort.setDescription('This is the port on which the CFM Server MEP is created.')
cfmServerMepAisClientMdLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 13, 1, 1, 5, 1, 3), Dot1agCfmMDLevel()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cfmServerMepAisClientMdLevel.setStatus('current')
if mibBuilder.loadTexts: cfmServerMepAisClientMdLevel.setDescription('AIS Client MD level which is the MD level used to identify any\n         higher level local MEPs for which AIS defect needs to be set or\n         MD level of the ETH-AIS frame generated if there are no local MEPs\n         at this MD level.')
cfmServerMepAisInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 13, 1, 1, 5, 1, 4), CfmAisInterval()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cfmServerMepAisInterval.setStatus('current')
if mibBuilder.loadTexts: cfmServerMepAisInterval.setDescription('ETH-AIS frame transmission interval if decision is made to transmit the\n         ETH-AIS frame.')
cfmServerMepAisGenEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 13, 1, 1, 5, 1, 5), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cfmServerMepAisGenEnabled.setStatus('current')
if mibBuilder.loadTexts: cfmServerMepAisGenEnabled.setDescription('This flag enables/disables propagation of ETH-AIS to client MD levels.')
cfmServerMepAisPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 13, 1, 1, 5, 1, 6), VlanPriority()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cfmServerMepAisPriority.setStatus('current')
if mibBuilder.loadTexts: cfmServerMepAisPriority.setDescription('This VLAN priority of the ETH-AIS frame.')
cfmServerMepStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 13, 1, 1, 5, 1, 7), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cfmServerMepStorageType.setStatus('current')
if mibBuilder.loadTexts: cfmServerMepStorageType.setDescription('The type of storage configured for this entry.')
cfmServerMepRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 13, 1, 1, 5, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cfmServerMepRowStatus.setStatus('current')
if mibBuilder.loadTexts: cfmServerMepRowStatus.setDescription('The status of this row.\n            An entry MUST NOT exist in the active state unless all\n            objects in the entry have an appropriate value, as described\n            in the description clause for each writable object.\n\n            The values of cfmServerMepRowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            cfmServerMepRowStatus value as createAndGo(4).\n            Upon successful row creation, this object has a\n            value of active(1).\n\n            The cfmServerMepRowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
cfmServerMepAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 13, 1, 1, 5, 1, 9), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfmServerMepAdminState.setStatus('current')
if mibBuilder.loadTexts: cfmServerMepAdminState.setDescription('This object represents the Administrative State of the Server MEP.')
cfmServerMepOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 13, 1, 1, 5, 1, 10), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmServerMepOperationalState.setStatus('current')
if mibBuilder.loadTexts: cfmServerMepOperationalState.setDescription('This object represents the Operational State of the Server MEP.')
cfmServerMepSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 13, 1, 1, 5, 1, 11), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmServerMepSecondaryState.setStatus('current')
if mibBuilder.loadTexts: cfmServerMepSecondaryState.setDescription('This object represents the Secondary State of the CFM MEP.')
cfmDownMEPQosShaperTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 13, 1, 1, 6), )
if mibBuilder.loadTexts: cfmDownMEPQosShaperTable.setStatus('current')
if mibBuilder.loadTexts: cfmDownMEPQosShaperTable.setDescription('A list of configurable profile entries for CFM QoS Shapers for down MEPs.')
cfmDownMEPQosShaperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 13, 1, 1, 6, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetTrafficPortIndex"), (0, "F3-CFM-MIB", "cfmDownMEPQosShaperType"), (0, "F3-CFM-MIB", "cfmDownMEPQosShaperIndex"))
if mibBuilder.loadTexts: cfmDownMEPQosShaperEntry.setStatus('current')
if mibBuilder.loadTexts: cfmDownMEPQosShaperEntry.setDescription('A list of parameters that set up the CFM QoS Queue profiles.\n         This shaper is created automatically when the first Down MEP\n         is created on a Port. Note, this queues is valid for port based Down MEPs, VID based down MEPs on NNI port.')
cfmDownMEPQosShaperIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 13, 1, 1, 6, 1, 1), Integer32())
if mibBuilder.loadTexts: cfmDownMEPQosShaperIndex.setStatus('current')
if mibBuilder.loadTexts: cfmDownMEPQosShaperIndex.setDescription('A unique index associated with the Shaper for Down MEPs.')
cfmDownMEPQosShaperType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 13, 1, 1, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmDownMEPQosShaperType.setStatus('current')
if mibBuilder.loadTexts: cfmDownMEPQosShaperType.setDescription('Type of  Shaper for Down MEPs.\n         1 refers to the Shaper associated with Down MEPs(for both port based and VID based) fot Transimit direction,\n         2 refers to the Shaper associated with Down MEPs(for both port based and VID based) fot Receiving direction')
cfmDownMEPQosShaperCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 13, 1, 1, 6, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfmDownMEPQosShaperCIR.setStatus('current')
if mibBuilder.loadTexts: cfmDownMEPQosShaperCIR.setDescription('This object identifies the queue CIR.')
cfmDownMEPQosShaperProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 13, 1, 1, 6, 1, 4), VariablePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfmDownMEPQosShaperProfile.setStatus('current')
if mibBuilder.loadTexts: cfmDownMEPQosShaperProfile.setDescription('This object identifies the OID of cmQosQueueProfileIndex in the cmQosQueueProfileTable.')
cfmDownMEPQosShaperAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 13, 1, 1, 6, 1, 5), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfmDownMEPQosShaperAdminState.setStatus('current')
if mibBuilder.loadTexts: cfmDownMEPQosShaperAdminState.setDescription("This object allows the management of the Shaper Administrative State.\n          Only 'in-service' and 'management' states are allowed.")
cfmMepExcludedMepListTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 13, 1, 1, 7), )
if mibBuilder.loadTexts: cfmMepExcludedMepListTable.setStatus('current')
if mibBuilder.loadTexts: cfmMepExcludedMepListTable.setDescription('A list of configurable profile entries for CFM excluded mep list.')
cfmMepExcludedMepListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 13, 1, 1, 7, 1), ).setIndexNames((0, "IEEE8021-CFM-MIB", "dot1agCfmMdIndex"), (0, "IEEE8021-CFM-MIB", "dot1agCfmMaIndex"), (0, "IEEE8021-CFM-MIB", "dot1agCfmMepIdentifier"), (0, "F3-CFM-MIB", "cfmMepExcludedMepListIdentifier"))
if mibBuilder.loadTexts: cfmMepExcludedMepListEntry.setStatus('current')
if mibBuilder.loadTexts: cfmMepExcludedMepListEntry.setDescription('Excluded Remote Mep List for local Mep, not expected to receive OAM from these MEPs.')
cfmMepExcludedMepListIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 13, 1, 1, 7, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8191)))
if mibBuilder.loadTexts: cfmMepExcludedMepListIdentifier.setStatus('current')
if mibBuilder.loadTexts: cfmMepExcludedMepListIdentifier.setDescription('A unique index associated with CfmMepExcludedMepListEntry.')
cfmMepExcludedMepListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 13, 1, 1, 7, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cfmMepExcludedMepListRowStatus.setStatus('current')
if mibBuilder.loadTexts: cfmMepExcludedMepListRowStatus.setDescription('The status of this row.\n            An entry MUST NOT exist in the active state unless all\n            objects in the entry have an appropriate value, as described\n            in the description clause for each writable object.\n\n            The values of cfmMepExcludedMepListRowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            cfmMepExcludedMepListRowStatus value as createAndGo(4).\n            Upon successful row creation, this object has a\n            value of active(1).\n\n            The cfmMepExcludedMepListRowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
cfmMepLbrTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 13, 1, 1, 8), )
if mibBuilder.loadTexts: cfmMepLbrTable.setStatus('current')
if mibBuilder.loadTexts: cfmMepLbrTable.setDescription('A list of configurable profile entries for MepLbr.')
cfmMepLbrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 13, 1, 1, 8, 1), ).setIndexNames((0, "IEEE8021-CFM-MIB", "dot1agCfmMdIndex"), (0, "IEEE8021-CFM-MIB", "dot1agCfmMaIndex"), (0, "IEEE8021-CFM-MIB", "dot1agCfmMepIdentifier"), (0, "F3-CFM-MIB", "cfmMepLbrMacAddress"))
if mibBuilder.loadTexts: cfmMepLbrEntry.setStatus('current')
if mibBuilder.loadTexts: cfmMepLbrEntry.setDescription('MEP LBR statistic table.')
cfmMepLbrMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 13, 1, 1, 8, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmMepLbrMacAddress.setStatus('current')
if mibBuilder.loadTexts: cfmMepLbrMacAddress.setDescription('Source Mac Address of LBR.')
cfmMepLbrMepId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 13, 1, 1, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmMepLbrMepId.setStatus('current')
if mibBuilder.loadTexts: cfmMepLbrMepId.setDescription('Remote MEP ID.')
cfmMepLbrInOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 13, 1, 1, 8, 1, 3), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmMepLbrInOrder.setStatus('current')
if mibBuilder.loadTexts: cfmMepLbrInOrder.setDescription('Total valid in-order LBR received.')
cfmMepLbrOutOfOder = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 13, 1, 1, 8, 1, 4), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmMepLbrOutOfOder.setStatus('current')
if mibBuilder.loadTexts: cfmMepLbrOutOfOder.setDescription('Total valid out of order LBR received.')
cfmMaCompTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 13, 1, 1, 9), )
if mibBuilder.loadTexts: cfmMaCompTable.setStatus('current')
if mibBuilder.loadTexts: cfmMaCompTable.setDescription('A additional list of MA components.')
cfmMaCompEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 13, 1, 1, 9, 1), )
dot1agCfmMaCompEntry.registerAugmentions(("F3-CFM-MIB", "cfmMaCompEntry"))
cfmMaCompEntry.setIndexNames(*dot1agCfmMaCompEntry.getIndexNames())
if mibBuilder.loadTexts: cfmMaCompEntry.setStatus('current')
if mibBuilder.loadTexts: cfmMaCompEntry.setDescription('A list of additional maCompEntry.')
cfmMaCompIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 13, 1, 1, 9, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmMaCompIndex.setStatus('current')
if mibBuilder.loadTexts: cfmMaCompIndex.setDescription('This object represents the maComp number value.')
cfmMaCompEntity = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 13, 1, 1, 9, 1, 2), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cfmMaCompEntity.setStatus('current')
if mibBuilder.loadTexts: cfmMaCompEntity.setDescription("This object represents the maComp entity, it is should be port or flow's oid.")
cfmMaNetTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 13, 1, 1, 10), )
if mibBuilder.loadTexts: cfmMaNetTable.setStatus('current')
if mibBuilder.loadTexts: cfmMaNetTable.setDescription('A additional list of MA.')
cfmMaNetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 13, 1, 1, 10, 1), )
dot1agCfmMaNetEntry.registerAugmentions(("F3-CFM-MIB", "cfmMaNetEntry"))
cfmMaNetEntry.setIndexNames(*dot1agCfmMaNetEntry.getIndexNames())
if mibBuilder.loadTexts: cfmMaNetEntry.setStatus('current')
if mibBuilder.loadTexts: cfmMaNetEntry.setDescription('A list of additional maNetEntry.')
cfmMaNetRemoteMepAutoDiscovery = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 13, 1, 1, 10, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfmMaNetRemoteMepAutoDiscovery.setStatus('current')
if mibBuilder.loadTexts: cfmMaNetRemoteMepAutoDiscovery.setDescription('This object represents whether learn remote mep automatically.')
cfmMaNetMepNumbers = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 13, 1, 1, 10, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfmMaNetMepNumbers.setStatus('current')
if mibBuilder.loadTexts: cfmMaNetMepNumbers.setDescription('This object represents the max number of meps per MA.')
cfmTrafficPortQosShaperTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 13, 1, 1, 11), )
if mibBuilder.loadTexts: cfmTrafficPortQosShaperTable.setStatus('current')
if mibBuilder.loadTexts: cfmTrafficPortQosShaperTable.setDescription('A list of configurable entries for CFM QoS Shapers for Traffic Ports.')
cfmTrafficPortQosShaperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 13, 1, 1, 11, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetTrafficPortIndex"), (0, "F3-CFM-MIB", "cfmTrafficPortQosShaperIndex"))
if mibBuilder.loadTexts: cfmTrafficPortQosShaperEntry.setStatus('current')
if mibBuilder.loadTexts: cfmTrafficPortQosShaperEntry.setDescription('A list of parameters that set up the CFM QoS Queue profiles.\n         This shaper is created automatically when the first Down MEP\n         is created on a Traffic Port.')
cfmTrafficPortQosShaperIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 13, 1, 1, 11, 1, 1), Integer32())
if mibBuilder.loadTexts: cfmTrafficPortQosShaperIndex.setStatus('current')
if mibBuilder.loadTexts: cfmTrafficPortQosShaperIndex.setDescription('A unique index associated with the type of Traffic Port Based Shaper.\n         Index 1 refers to the Shaper associated with PORT-based Down MEPs,\n         Index 2 refers to the Shaper associated with the VID-based Down MEPs.')
cfmTrafficPortQosShaperCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 13, 1, 1, 11, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfmTrafficPortQosShaperCIR.setStatus('current')
if mibBuilder.loadTexts: cfmTrafficPortQosShaperCIR.setDescription('This object identifies the queue CIR.')
cfmTrafficPortQosShaperBufSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 13, 1, 1, 11, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfmTrafficPortQosShaperBufSize.setStatus('current')
if mibBuilder.loadTexts: cfmTrafficPortQosShaperBufSize.setDescription('This object identifies the queue buffer size.')
cfmTrafficPortQosShaperAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 13, 1, 1, 11, 1, 4), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfmTrafficPortQosShaperAdminState.setStatus('current')
if mibBuilder.loadTexts: cfmTrafficPortQosShaperAdminState.setDescription("This object allows the management of the Shaper Administrative State.\n          Only 'in-service' and 'management' states are allowed.")
cfmMepLlbMacAddressTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 13, 1, 1, 12), )
if mibBuilder.loadTexts: cfmMepLlbMacAddressTable.setStatus('current')
if mibBuilder.loadTexts: cfmMepLlbMacAddressTable.setDescription('A additional list of MAC Addresses.')
cfmLlbMacAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 13, 1, 1, 12, 1), ).setIndexNames((0, "IEEE8021-CFM-MIB", "dot1agCfmMdIndex"), (0, "IEEE8021-CFM-MIB", "dot1agCfmMaIndex"), (0, "IEEE8021-CFM-MIB", "dot1agCfmMepIdentifier"), (0, "F3-CFM-MIB", "cfmLlbMacAddress"))
if mibBuilder.loadTexts: cfmLlbMacAddressEntry.setStatus('current')
if mibBuilder.loadTexts: cfmLlbMacAddressEntry.setDescription('A conceptual row in the cfmMepLlbMacAddressTable.')
cfmLlbMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 13, 1, 1, 12, 1, 1), MacAddress())
if mibBuilder.loadTexts: cfmLlbMacAddress.setStatus('current')
if mibBuilder.loadTexts: cfmLlbMacAddress.setDescription('This object represents the Latching Loopback MAC Addresses.')
cfmLlbMacAddressRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 13, 1, 1, 12, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cfmLlbMacAddressRowStatus.setStatus('current')
if mibBuilder.loadTexts: cfmLlbMacAddressRowStatus.setDescription('The status of this row.\n \t        An entry MUST NOT exist in the active state unless all\n \t        objects in the entry have an appropriate value, as described\n \t        in the description clause for each writable object.\n \t        \n \t        The values of cfmLlbMacAddressRowStatus supported are\n \t        createAndGo(4) and destroy(6).  All mandatory attributes\n \t        must be specified in a single SNMP SET request with\n \t        cfmLlbMacAddressRowStatus value as createAndGo(4).\n \t        Upon successful row creation, this object has a\n \t        value of active(1).\n \t        \n \t        The cfmLlbMacAddressRowStatus object may be modified if\n \t        the associated instance of this object is equal to active(1).')
cfmExtSvcCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 13, 1, 2, 1))
cfmExtSvcGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 13, 1, 2, 2))
cfmExtCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2544, 1, 12, 13, 1, 2, 1, 1)).setObjects(("F3-CFM-MIB", "cfmExtGroup"), ("F3-CFM-MIB", "cfmGenGroup"), ("F3-CFM-MIB", "cfmMepGroup"), ("F3-CFM-MIB", "cfmPortShaperGroup"), ("F3-CFM-MIB", "cfmServerMepGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cfmExtCompliance = cfmExtCompliance.setStatus('current')
if mibBuilder.loadTexts: cfmExtCompliance.setDescription('Describes the requirements for conformance to the CFM Extensions.')
cfmExtGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 13, 1, 2, 2, 1)).setObjects(("F3-CFM-MIB", "cfmEthType"), ("F3-CFM-MIB", "cfmMacAddress"), ("F3-CFM-MIB", "slmMulticastMacAddress"), ("F3-CFM-MIB", "slmOpcode"), ("F3-CFM-MIB", "slrOpcode"), ("F3-CFM-MIB", "cfmMepAdminState"), ("F3-CFM-MIB", "cfmMepAisGenTriggerTypes"), ("F3-CFM-MIB", "cfmMepAisClientMdLevel"), ("F3-CFM-MIB", "cfmMepAisInterval"), ("F3-CFM-MIB", "cfmMepAisGenEnabled"), ("F3-CFM-MIB", "cfmMepAisPriority"), ("F3-CFM-MIB", "cfmMepLmTxCountAllPriosEnabled"), ("F3-CFM-MIB", "cfmMepLmRxCountAllPriosEnabled"), ("F3-CFM-MIB", "cfmMepLmDualEndedCountAllPriosEnabled"), ("F3-CFM-MIB", "cfmMepLmCountInProfileEnabled"), ("F3-CFM-MIB", "cfmMepLmTxPriority"), ("F3-CFM-MIB", "cfmMepDmPriority"), ("F3-CFM-MIB", "cfmMepRxCCMs"), ("F3-CFM-MIB", "cfmMepErrCCMs"), ("F3-CFM-MIB", "cfmMepLLFTriggerTypes"), ("F3-CFM-MIB", "cfmMepDefects"), ("F3-CFM-MIB", "cfmMepTagEtherType"), ("F3-CFM-MIB", "cfmMepStatsAction"), ("F3-CFM-MIB", "cfmMepLbmInterval"), ("F3-CFM-MIB", "cfmAccPortQosShaperIndex"), ("F3-CFM-MIB", "cfmAccPortQosShaperCIR"), ("F3-CFM-MIB", "cfmAccPortQosShaperBufSize"), ("F3-CFM-MIB", "cfmAccPortQosShaperAdminState"), ("F3-CFM-MIB", "cfmNetPortQosShaperTypeIndex"), ("F3-CFM-MIB", "cfmNetPortQosShaperCIR"), ("F3-CFM-MIB", "cfmNetPortQosShaperBufSize"), ("F3-CFM-MIB", "cfmNetPortQosShaperAdminState"), ("F3-CFM-MIB", "cfmServerMepIndex"), ("F3-CFM-MIB", "cfmServerMepAssociatedPort"), ("F3-CFM-MIB", "cfmServerMepAisClientMdLevel"), ("F3-CFM-MIB", "cfmServerMepAisInterval"), ("F3-CFM-MIB", "cfmServerMepAisGenEnabled"), ("F3-CFM-MIB", "cfmServerMepAisPriority"), ("F3-CFM-MIB", "cfmServerMepStorageType"), ("F3-CFM-MIB", "cfmServerMepRowStatus"), ("F3-CFM-MIB", "cfmDownMEPQosShaperIndex"), ("F3-CFM-MIB", "cfmDownMEPQosShaperType"), ("F3-CFM-MIB", "cfmDownMEPQosShaperCIR"), ("F3-CFM-MIB", "cfmDownMEPQosShaperProfile"), ("F3-CFM-MIB", "cfmDownMEPQosShaperAdminState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cfmExtGroup = cfmExtGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cfmExtGroup.setDescription('******************THIS OBJECT GROUP IS NOW DEPRECATED ******************\n         A collection of objects used to identify CFM extension implementation compliance.')
cfmGenGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 13, 1, 2, 2, 2)).setObjects(("F3-CFM-MIB", "cfmEthType"), ("F3-CFM-MIB", "cfmMacAddress"), ("F3-CFM-MIB", "slmMulticastMacAddress"), ("F3-CFM-MIB", "slmOpcode"), ("F3-CFM-MIB", "slrOpcode"), ("F3-CFM-MIB", "cfmSignalFailTriggers"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cfmGenGroup = cfmGenGroup.setStatus('current')
if mibBuilder.loadTexts: cfmGenGroup.setDescription('A collection of objects used to identify CFM extension implementation compliance.')
cfmMepGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 13, 1, 2, 2, 3)).setObjects(("F3-CFM-MIB", "cfmMepAdminState"), ("F3-CFM-MIB", "cfmMepAisGenTriggerTypes"), ("F3-CFM-MIB", "cfmMepAisClientMdLevel"), ("F3-CFM-MIB", "cfmMepAisInterval"), ("F3-CFM-MIB", "cfmMepAisGenEnabled"), ("F3-CFM-MIB", "cfmMepAisPriority"), ("F3-CFM-MIB", "cfmMepLmTxCountAllPriosEnabled"), ("F3-CFM-MIB", "cfmMepLmRxCountAllPriosEnabled"), ("F3-CFM-MIB", "cfmMepLmDualEndedCountAllPriosEnabled"), ("F3-CFM-MIB", "cfmMepLmCountInProfileEnabled"), ("F3-CFM-MIB", "cfmMepLmTxPriority"), ("F3-CFM-MIB", "cfmMepDmPriority"), ("F3-CFM-MIB", "cfmMepRxCCMs"), ("F3-CFM-MIB", "cfmMepErrCCMs"), ("F3-CFM-MIB", "cfmMepLLFTriggerTypes"), ("F3-CFM-MIB", "cfmMepDefects"), ("F3-CFM-MIB", "cfmMepTagEtherType"), ("F3-CFM-MIB", "cfmMepStatsAction"), ("F3-CFM-MIB", "cfmMepOperationalState"), ("F3-CFM-MIB", "cfmMepSecondaryState"), ("F3-CFM-MIB", "cfmMepSlmEnabled"), ("F3-CFM-MIB", "cfmMepExcludedMepListIdentifier"), ("F3-CFM-MIB", "cfmMepExcludedMepListRowStatus"), ("F3-CFM-MIB", "cfmMepLbrMacAddress"), ("F3-CFM-MIB", "cfmMepLbrMepId"), ("F3-CFM-MIB", "cfmMepLbrInOrder"), ("F3-CFM-MIB", "cfmMepLbrOutOfOder"), ("F3-CFM-MIB", "cfmMepAssociatedObject"), ("F3-CFM-MIB", "cfmMepPduVersion"), ("F3-CFM-MIB", "cfmMepLlbResponderEnabled"), ("F3-CFM-MIB", "cfmMepLlbPortLLEnabled"), ("F3-CFM-MIB", "cfmMepLlbVidList"), ("F3-CFM-MIB", "cfmLlbMacAddress"), ("F3-CFM-MIB", "cfmMepCcmInterfaceStatusTLVControl"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cfmMepGroup = cfmMepGroup.setStatus('current')
if mibBuilder.loadTexts: cfmMepGroup.setDescription('A collection of objects used to identify additional CFM MEP functions.')
cfmPortShaperGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 13, 1, 2, 2, 4)).setObjects(("F3-CFM-MIB", "cfmAccPortQosShaperIndex"), ("F3-CFM-MIB", "cfmAccPortQosShaperCIR"), ("F3-CFM-MIB", "cfmAccPortQosShaperBufSize"), ("F3-CFM-MIB", "cfmAccPortQosShaperAdminState"), ("F3-CFM-MIB", "cfmNetPortQosShaperTypeIndex"), ("F3-CFM-MIB", "cfmNetPortQosShaperCIR"), ("F3-CFM-MIB", "cfmNetPortQosShaperBufSize"), ("F3-CFM-MIB", "cfmNetPortQosShaperAdminState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cfmPortShaperGroup = cfmPortShaperGroup.setStatus('current')
if mibBuilder.loadTexts: cfmPortShaperGroup.setDescription('A collection of objects used to identify CFM Port Shaper functionality.')
cfmServerMepGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 13, 1, 2, 2, 5)).setObjects(("F3-CFM-MIB", "cfmServerMepIndex"), ("F3-CFM-MIB", "cfmServerMepAssociatedPort"), ("F3-CFM-MIB", "cfmServerMepAisClientMdLevel"), ("F3-CFM-MIB", "cfmServerMepAisInterval"), ("F3-CFM-MIB", "cfmServerMepAisGenEnabled"), ("F3-CFM-MIB", "cfmServerMepAisPriority"), ("F3-CFM-MIB", "cfmServerMepStorageType"), ("F3-CFM-MIB", "cfmServerMepRowStatus"), ("F3-CFM-MIB", "cfmServerMepAdminState"), ("F3-CFM-MIB", "cfmServerMepOperationalState"), ("F3-CFM-MIB", "cfmServerMepSecondaryState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cfmServerMepGroup = cfmServerMepGroup.setStatus('current')
if mibBuilder.loadTexts: cfmServerMepGroup.setDescription('A collection of objects used to identify CFM Server MEP functionality.')
cfmMaCompGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 13, 1, 2, 2, 6)).setObjects(("F3-CFM-MIB", "cfmMaCompIndex"), ("F3-CFM-MIB", "cfmMaCompEntity"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cfmMaCompGroup = cfmMaCompGroup.setStatus('current')
if mibBuilder.loadTexts: cfmMaCompGroup.setDescription('A collection of additional objects used to show maComp.')
mibBuilder.exportSymbols("F3-CFM-MIB", cfmMepAisGenEnabled=cfmMepAisGenEnabled, cfmNetPortQosShaperCIR=cfmNetPortQosShaperCIR, cfmMepLlbVidList=cfmMepLlbVidList, cfmMaNetTable=cfmMaNetTable, cfmMepLbrMacAddress=cfmMepLbrMacAddress, cfmServerMepGroup=cfmServerMepGroup, CfmAisInterval=CfmAisInterval, cfmAccPortQosShaperCIR=cfmAccPortQosShaperCIR, cfmGenGroup=cfmGenGroup, cfmMepAisPriority=cfmMepAisPriority, cfmExtSvcGroups=cfmExtSvcGroups, cfmServerMepAssociatedPort=cfmServerMepAssociatedPort, cfmMaCompGroup=cfmMaCompGroup, cfmServerMepRowStatus=cfmServerMepRowStatus, cfmSignalFailTriggers=cfmSignalFailTriggers, cfmMepAisClientMdLevel=cfmMepAisClientMdLevel, cfmNetPortQosShaperEntry=cfmNetPortQosShaperEntry, cfmServerMepAisPriority=cfmServerMepAisPriority, cfmMaCompTable=cfmMaCompTable, cfmLlbMacAddressEntry=cfmLlbMacAddressEntry, cfmExtScalars=cfmExtScalars, cfmMepAdminState=cfmMepAdminState, cfmExtSvcCompliances=cfmExtSvcCompliances, cfmMepAisGenTriggerTypes=cfmMepAisGenTriggerTypes, cfmMepStatsAction=cfmMepStatsAction, cfmTrafficPortQosShaperCIR=cfmTrafficPortQosShaperCIR, cfmMacAddress=cfmMacAddress, cfmMepCcmInterfaceStatusTLVControl=cfmMepCcmInterfaceStatusTLVControl, cfmMaNetMepNumbers=cfmMaNetMepNumbers, cfmMepLmTxCountAllPriosEnabled=cfmMepLmTxCountAllPriosEnabled, cfmMepLlbResponderEnabled=cfmMepLlbResponderEnabled, slrOpcode=slrOpcode, cfmNetPortQosShaperBufSize=cfmNetPortQosShaperBufSize, cfmMepLmTxPriority=cfmMepLmTxPriority, cfmMepTagEtherType=cfmMepTagEtherType, cfmServerMepAisClientMdLevel=cfmServerMepAisClientMdLevel, cfmExtGroup=cfmExtGroup, cfmMepLmCountInProfileEnabled=cfmMepLmCountInProfileEnabled, cfmMepExcludedMepListRowStatus=cfmMepExcludedMepListRowStatus, cfmPortShaperGroup=cfmPortShaperGroup, cfmMaNetEntry=cfmMaNetEntry, cfmMepExcludedMepListIdentifier=cfmMepExcludedMepListIdentifier, cfmMepExcludedMepListTable=cfmMepExcludedMepListTable, cfmMepEntry=cfmMepEntry, cfmMepLmRxCountAllPriosEnabled=cfmMepLmRxCountAllPriosEnabled, cfmMepExcludedMepListEntry=cfmMepExcludedMepListEntry, cfmMaCompEntity=cfmMaCompEntity, cfmMepSlmEnabled=cfmMepSlmEnabled, cfmNetPortQosShaperTable=cfmNetPortQosShaperTable, cfmAccPortQosShaperEntry=cfmAccPortQosShaperEntry, cfmDownMEPQosShaperCIR=cfmDownMEPQosShaperCIR, cfmDownMEPQosShaperEntry=cfmDownMEPQosShaperEntry, cfmMaCompIndex=cfmMaCompIndex, cfmTrafficPortQosShaperBufSize=cfmTrafficPortQosShaperBufSize, cfmServerMepAisInterval=cfmServerMepAisInterval, cfmTrafficPortQosShaperEntry=cfmTrafficPortQosShaperEntry, cfmDownMEPQosShaperAdminState=cfmDownMEPQosShaperAdminState, cfmMepLbmInterval=cfmMepLbmInterval, cfmDownMEPQosShaperProfile=cfmDownMEPQosShaperProfile, cfmServerMepTable=cfmServerMepTable, cfmNetPortQosShaperTypeIndex=cfmNetPortQosShaperTypeIndex, cfmDownMEPQosShaperTable=cfmDownMEPQosShaperTable, cfmMepPduVersion=cfmMepPduVersion, cfmMepAisInterval=cfmMepAisInterval, cfmMepLlbPortLLEnabled=cfmMepLlbPortLLEnabled, cfmExtCompliance=cfmExtCompliance, CfmAisGenTriggerTypes=CfmAisGenTriggerTypes, cfmMaCompEntry=cfmMaCompEntry, cfmMepRxCCMs=cfmMepRxCCMs, cfmLlbMacAddressRowStatus=cfmLlbMacAddressRowStatus, cfmAccPortQosShaperBufSize=cfmAccPortQosShaperBufSize, cfmMepDmPriority=cfmMepDmPriority, cfmAccPortQosShaperTable=cfmAccPortQosShaperTable, cfmAccPortQosShaperAdminState=cfmAccPortQosShaperAdminState, cfmServerMepStorageType=cfmServerMepStorageType, cfmExtSvc=cfmExtSvc, cfmMepErrCCMs=cfmMepErrCCMs, cfmMepGroup=cfmMepGroup, cfmNetPortQosShaperAdminState=cfmNetPortQosShaperAdminState, cfmServerMepIndex=cfmServerMepIndex, cfmServerMepEntry=cfmServerMepEntry, cfmTrafficPortQosShaperTable=cfmTrafficPortQosShaperTable, cfmMepAssociatedObject=cfmMepAssociatedObject, cfmEthType=cfmEthType, cfmLlbMacAddress=cfmLlbMacAddress, cfmMepOperationalState=cfmMepOperationalState, cfmDownMEPQosShaperIndex=cfmDownMEPQosShaperIndex, cfmMepTable=cfmMepTable, cfmDownMEPQosShaperType=cfmDownMEPQosShaperType, cfmExtSvcConformance=cfmExtSvcConformance, slmOpcode=slmOpcode, cfmMepLLFTriggerTypes=cfmMepLLFTriggerTypes, PYSNMP_MODULE_ID=f3CfmMIB, cfmMepLbrEntry=cfmMepLbrEntry, cfmTrafficPortQosShaperIndex=cfmTrafficPortQosShaperIndex, f3CfmMIB=f3CfmMIB, cfmTrafficPortQosShaperAdminState=cfmTrafficPortQosShaperAdminState, cfmMepLmDualEndedCountAllPriosEnabled=cfmMepLmDualEndedCountAllPriosEnabled, cfmMepLlbMacAddressTable=cfmMepLlbMacAddressTable, cfmServerMepSecondaryState=cfmServerMepSecondaryState, slmMulticastMacAddress=slmMulticastMacAddress, cfmMepDefects=cfmMepDefects, CfmMepDefects=CfmMepDefects, CfmLmmDmmInterval=CfmLmmDmmInterval, cfmAccPortQosShaperIndex=cfmAccPortQosShaperIndex, CfmSignalFailTriggers=CfmSignalFailTriggers, CfmPduVersionType=CfmPduVersionType, CfmSlmEnabledTypes=CfmSlmEnabledTypes, CfmLLFTriggerTypes=CfmLLFTriggerTypes, cfmMepLbrInOrder=cfmMepLbrInOrder, cfmServerMepOperationalState=cfmServerMepOperationalState, cfmMepLbrMepId=cfmMepLbrMepId, cfmServerMepAisGenEnabled=cfmServerMepAisGenEnabled, cfmServerMepAdminState=cfmServerMepAdminState, cfmMepSecondaryState=cfmMepSecondaryState, cfmMepLbrOutOfOder=cfmMepLbrOutOfOder, cfmExtSvcObjects=cfmExtSvcObjects, cfmMaNetRemoteMepAutoDiscovery=cfmMaNetRemoteMepAutoDiscovery, cfmMepLbrTable=cfmMepLbrTable)
