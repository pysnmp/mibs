#
# PySNMP MIB module MAS-MIB-SMIV2-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/citrix/MAS-MIB-SMIV2-MIB
# Produced by pysmi-1.1.12 at Tue May 28 13:38:47 2024
# On host fv-az768-311 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
Ipv6Address, = mibBuilder.importSymbols("IPV6-TC", "Ipv6Address")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, iso, IpAddress, ModuleIdentity, Counter32, enterprises, ObjectIdentity, Bits, Unsigned32, TimeTicks, MibIdentifier, Integer32, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "iso", "IpAddress", "ModuleIdentity", "Counter32", "enterprises", "ObjectIdentity", "Bits", "Unsigned32", "TimeTicks", "MibIdentifier", "Integer32", "Gauge32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
netScaler = ModuleIdentity((1, 3, 6, 1, 4, 1, 5951))
if mibBuilder.loadTexts: netScaler.setLastUpdated('201312050000Z')
if mibBuilder.loadTexts: netScaler.setOrganization('Citrix Systems, Inc.')
if mibBuilder.loadTexts: netScaler.setContactInfo('Citrix Technical Assistance Center\n                        Postal: Citrix Systems, Inc.\n                                851 West Cypress Creek Road\n                                Fort Lauderdale, Florida  33309\n                                United States\n                        Tel: +1-800-4-CITRIX (+1-800-424-8749)\n                        E-mail: customercare@citrix.com')
if mibBuilder.loadTexts: netScaler.setDescription('The enterprise specific MIB for Citrix Application Delivery Management.')
masRoot = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 7))
masEventGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 7, 1))
systemGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 7, 2))
systemPlatform = MibScalar((1, 3, 6, 1, 4, 1, 5951, 7, 2, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemPlatform.setStatus('current')
if mibBuilder.loadTexts: systemPlatform.setDescription('Platform')
systemProduct = MibScalar((1, 3, 6, 1, 4, 1, 5951, 7, 2, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemProduct.setStatus('current')
if mibBuilder.loadTexts: systemProduct.setDescription('Product Name')
systemBuildNumber = MibScalar((1, 3, 6, 1, 4, 1, 5951, 7, 2, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemBuildNumber.setStatus('current')
if mibBuilder.loadTexts: systemBuildNumber.setDescription('Build Number')
systemIPAddressType = MibScalar((1, 3, 6, 1, 4, 1, 5951, 7, 2, 4), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemIPAddressType.setStatus('current')
if mibBuilder.loadTexts: systemIPAddressType.setDescription('Type of systemIPAddress')
systemIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 5951, 7, 2, 5), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemIPAddress.setStatus('current')
if mibBuilder.loadTexts: systemIPAddress.setDescription('IP Address')
systemNetmaskType = MibScalar((1, 3, 6, 1, 4, 1, 5951, 7, 2, 6), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemNetmaskType.setStatus('current')
if mibBuilder.loadTexts: systemNetmaskType.setDescription('Type of systemNetmask')
systemNetmask = MibScalar((1, 3, 6, 1, 4, 1, 5951, 7, 2, 7), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemNetmask.setStatus('current')
if mibBuilder.loadTexts: systemNetmask.setDescription('Netmask')
systemGatewayType = MibScalar((1, 3, 6, 1, 4, 1, 5951, 7, 2, 8), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemGatewayType.setStatus('current')
if mibBuilder.loadTexts: systemGatewayType.setDescription('Type of systemGateway')
systemGateway = MibScalar((1, 3, 6, 1, 4, 1, 5951, 7, 2, 9), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemGateway.setStatus('current')
if mibBuilder.loadTexts: systemGateway.setDescription('Gateway ')
systemDnsType = MibScalar((1, 3, 6, 1, 4, 1, 5951, 7, 2, 10), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemDnsType.setStatus('current')
if mibBuilder.loadTexts: systemDnsType.setDescription('Type of systemDns')
systemDns = MibScalar((1, 3, 6, 1, 4, 1, 5951, 7, 2, 11), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemDns.setStatus('current')
if mibBuilder.loadTexts: systemDns.setDescription('DNS Server')
systemSysId = MibScalar((1, 3, 6, 1, 4, 1, 5951, 7, 2, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemSysId.setStatus('current')
if mibBuilder.loadTexts: systemSysId.setDescription('System Id')
systemSerial = MibScalar((1, 3, 6, 1, 4, 1, 5951, 7, 2, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemSerial.setStatus('current')
if mibBuilder.loadTexts: systemSerial.setDescription('Serial Number')
systemCurrentTime = MibScalar((1, 3, 6, 1, 4, 1, 5951, 7, 2, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemCurrentTime.setStatus('current')
if mibBuilder.loadTexts: systemCurrentTime.setDescription('Current Time')
systemUptime = MibScalar((1, 3, 6, 1, 4, 1, 5951, 7, 2, 15), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemUptime.setStatus('current')
if mibBuilder.loadTexts: systemUptime.setDescription('Uptime')
systemBiosVersion = MibScalar((1, 3, 6, 1, 4, 1, 5951, 7, 2, 16), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemBiosVersion.setStatus('current')
if mibBuilder.loadTexts: systemBiosVersion.setDescription('BIOS Version')
systemCustomID = MibScalar((1, 3, 6, 1, 4, 1, 5951, 7, 2, 17), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemCustomID.setStatus('current')
if mibBuilder.loadTexts: systemCustomID.setDescription('Custom identification number for appliance')
systemCpuUsage = MibScalar((1, 3, 6, 1, 4, 1, 5951, 7, 2, 18), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemCpuUsage.setStatus('current')
if mibBuilder.loadTexts: systemCpuUsage.setDescription('CPU Usage (%)')
systemMemoryUsage = MibScalar((1, 3, 6, 1, 4, 1, 5951, 7, 2, 19), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemMemoryUsage.setStatus('current')
if mibBuilder.loadTexts: systemMemoryUsage.setDescription('Memory Usage (%)')
systemDiskUsage = MibScalar((1, 3, 6, 1, 4, 1, 5951, 7, 2, 20), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemDiskUsage.setStatus('current')
if mibBuilder.loadTexts: systemDiskUsage.setDescription('Disk Usage (%)')
deviceGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 7, 3))
netscalerTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 7, 3, 2), )
if mibBuilder.loadTexts: netscalerTable.setStatus('current')
if mibBuilder.loadTexts: netscalerTable.setDescription('netscalertable')
netscalerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 7, 3, 2, 1), ).setIndexNames((0, "MAS-MIB-SMIV2-MIB", "nsIpAddressType"), (0, "MAS-MIB-SMIV2-MIB", "nsIpAddress"), (0, "MAS-MIB-SMIV2-MIB", "nsHostIPAddressType"), (0, "MAS-MIB-SMIV2-MIB", "nsHostIPAddress"))
if mibBuilder.loadTexts: netscalerEntry.setStatus('current')
if mibBuilder.loadTexts: netscalerEntry.setDescription('...')
nsIpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 2, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIpAddressType.setStatus('current')
if mibBuilder.loadTexts: nsIpAddressType.setDescription('Type of nsIpAddress')
nsIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 2, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIpAddress.setStatus('current')
if mibBuilder.loadTexts: nsIpAddress.setDescription('IP Address for this managed device')
nsHostIPAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 2, 1, 3), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsHostIPAddressType.setStatus('current')
if mibBuilder.loadTexts: nsHostIPAddressType.setDescription('Type of nsHostIPAddress')
nsHostIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 2, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsHostIPAddress.setStatus('current')
if mibBuilder.loadTexts: nsHostIPAddress.setDescription('Host IPAddress where VM is provisioned')
nsProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 2, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsProfileName.setStatus('current')
if mibBuilder.loadTexts: nsProfileName.setDescription('Device Profile Name that is attached with this managed device')
nsName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 2, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsName.setStatus('current')
if mibBuilder.loadTexts: nsName.setDescription('Name of managed device')
nsNetmaskType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 2, 1, 7), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsNetmaskType.setStatus('current')
if mibBuilder.loadTexts: nsNetmaskType.setDescription('Type of nsNetmask')
nsNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 2, 1, 8), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsNetmask.setStatus('current')
if mibBuilder.loadTexts: nsNetmask.setDescription('Netmask of managed device')
nsGatewayType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 2, 1, 9), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsGatewayType.setStatus('current')
if mibBuilder.loadTexts: nsGatewayType.setDescription('Type of nsGateway')
nsGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 2, 1, 10), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsGateway.setStatus('current')
if mibBuilder.loadTexts: nsGateway.setDescription('Default Gateway of managed device')
nsHostname = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 2, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsHostname.setStatus('current')
if mibBuilder.loadTexts: nsHostname.setDescription('Assign hostname to managed device, if this is not provided, name will be set as host name ')
nsDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 2, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsDescription.setStatus('current')
if mibBuilder.loadTexts: nsDescription.setDescription('Description of managed device')
nsVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 2, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVersion.setStatus('current')
if mibBuilder.loadTexts: nsVersion.setDescription('Device Version')
nsUuid = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 2, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsUuid.setStatus('current')
if mibBuilder.loadTexts: nsUuid.setDescription('UUID of VM Instance')
nsInstanceState = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 2, 1, 15), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsInstanceState.setStatus('current')
if mibBuilder.loadTexts: nsInstanceState.setDescription('State of device, UP only if device accessible')
nsVirtualFunctions = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 2, 1, 16), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVirtualFunctions.setStatus('current')
if mibBuilder.loadTexts: nsVirtualFunctions.setDescription('Virtual Functions assigned to VM Instance')
nsSslVirtualFunctions = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 2, 1, 17), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSslVirtualFunctions.setStatus('current')
if mibBuilder.loadTexts: nsSslVirtualFunctions.setDescription('SSL Virtual Functions assigned to VM Instance')
nsVmState = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 2, 1, 18), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVmState.setStatus('current')
if mibBuilder.loadTexts: nsVmState.setDescription('State of Virtual Machine (Running | Halted)')
nsNumberOfCPU = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsNumberOfCPU.setStatus('current')
if mibBuilder.loadTexts: nsNumberOfCPU.setDescription('Number of CPU that is assigned to VM Instance')
nsVmMemoryTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 2, 1, 21), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVmMemoryTotal.setStatus('current')
if mibBuilder.loadTexts: nsVmMemoryTotal.setDescription('Total Memory of VM Instance in MB')
nsUptime = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 2, 1, 26), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsUptime.setStatus('current')
if mibBuilder.loadTexts: nsUptime.setDescription('Uptime of device')
nsNumberOfSSLCores = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 2, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsNumberOfSSLCores.setStatus('current')
if mibBuilder.loadTexts: nsNumberOfSSLCores.setDescription('Assign number of ssl virtual functions to VM Instance')
nsCpuCoreMgmt = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 2, 1, 28), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCpuCoreMgmt.setStatus('current')
if mibBuilder.loadTexts: nsCpuCoreMgmt.setDescription('Management CPU cores assigned to VM Instance')
nsCpuCorePE = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 2, 1, 29), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCpuCorePE.setStatus('current')
if mibBuilder.loadTexts: nsCpuCorePE.setDescription('Packet Engine cores assigned to VM Instance')
nsVmDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 2, 1, 30), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVmDescription.setStatus('current')
if mibBuilder.loadTexts: nsVmDescription.setDescription('Description')
nsThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 2, 1, 31), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsThroughput.setStatus('current')
if mibBuilder.loadTexts: nsThroughput.setDescription('Assign throughput in Mbps to VM Instance')
nsNumberOfCores = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 2, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsNumberOfCores.setStatus('current')
if mibBuilder.loadTexts: nsNumberOfCores.setDescription('Number of cores that are assigned to VM Instance')
nsNsCPUUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 2, 1, 33), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsNsCPUUsage.setStatus('current')
if mibBuilder.loadTexts: nsNsCPUUsage.setDescription('CPU Usage (%) of Citrix ADC Instance')
nsNsMemoryUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 2, 1, 35), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsNsMemoryUsage.setStatus('current')
if mibBuilder.loadTexts: nsNsMemoryUsage.setDescription('Memory Usage (%)')
nsNsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 2, 1, 36), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsNsTx.setStatus('current')
if mibBuilder.loadTexts: nsNsTx.setDescription('Out Throughput of Citrix ADC Instance in Mbps')
nsNsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 2, 1, 37), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsNsRx.setStatus('current')
if mibBuilder.loadTexts: nsNsRx.setDescription('In Throughput of Citrix ADC Instance in Mbps')
nsHttpReq = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 2, 1, 38), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsHttpReq.setStatus('current')
if mibBuilder.loadTexts: nsHttpReq.setDescription('HTTP Requests/second')
nsUpsince = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 2, 1, 39), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsUpsince.setStatus('current')
if mibBuilder.loadTexts: nsUpsince.setDescription('Upsince of managed device')
nsLicense = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 2, 1, 40), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsLicense.setStatus('current')
if mibBuilder.loadTexts: nsLicense.setDescription('Feature License for Citrix ADC Instance, needs to be set while provisioning (standard, enterprise, platinum)')
nsHaMasterState = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 2, 1, 41), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsHaMasterState.setStatus('current')
if mibBuilder.loadTexts: nsHaMasterState.setDescription('Master State (Primary/Secondary)')
nsHaIPAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 2, 1, 42), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsHaIPAddressType.setStatus('current')
if mibBuilder.loadTexts: nsHaIPAddressType.setDescription('Type of nsHaIPAddress')
nsHaIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 2, 1, 43), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsHaIPAddress.setStatus('current')
if mibBuilder.loadTexts: nsHaIPAddress.setDescription('Peer IP Address')
nsNodeState = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 2, 1, 44), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsNodeState.setStatus('current')
if mibBuilder.loadTexts: nsNodeState.setDescription('Node State of Citrix ADC Instance')
nsHaSync = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 2, 1, 45), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsHaSync.setStatus('current')
if mibBuilder.loadTexts: nsHaSync.setDescription('HA Synchronization State')
nsPps = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 2, 1, 46), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsPps.setStatus('current')
if mibBuilder.loadTexts: nsPps.setDescription('Assign packets per seconds to Citrix ADC Instance')
nsNumberOfSslCoresUp = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 2, 1, 47), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsNumberOfSslCoresUp.setStatus('current')
if mibBuilder.loadTexts: nsNumberOfSslCoresUp.setDescription('Number of SSL Cores Up')
nsIfOby1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 2, 1, 48), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfOby1.setStatus('current')
if mibBuilder.loadTexts: nsIfOby1.setDescription('Network 0/1 on VM Instance')
nsIf0by2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 2, 1, 49), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIf0by2.setStatus('current')
if mibBuilder.loadTexts: nsIf0by2.setDescription('Network 0/2 on VM Instance')
nsNsVLANId = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 2, 1, 50), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsNsVLANId.setStatus('current')
if mibBuilder.loadTexts: nsNsVLANId.setDescription('VLAN Id')
nsNsVLANTagged = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 2, 1, 51), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsNsVLANTagged.setStatus('current')
if mibBuilder.loadTexts: nsNsVLANTagged.setDescription('NSVLAN Tagged')
nsVlanType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 2, 1, 52), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVlanType.setStatus('current')
if mibBuilder.loadTexts: nsVlanType.setDescription('VLAN Type, Citrix ADC or L2 VLAN')
cloudBridgeTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 7, 3, 3), )
if mibBuilder.loadTexts: cloudBridgeTable.setStatus('current')
if mibBuilder.loadTexts: cloudBridgeTable.setDescription('cloudBridgetable')
cloudBridgeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 7, 3, 3, 1), ).setIndexNames((0, "MAS-MIB-SMIV2-MIB", "cbIpAddressType"), (0, "MAS-MIB-SMIV2-MIB", "cbIpAddress"), (0, "MAS-MIB-SMIV2-MIB", "cbHostIPAddressType"), (0, "MAS-MIB-SMIV2-MIB", "cbHostIPAddress"))
if mibBuilder.loadTexts: cloudBridgeEntry.setStatus('current')
if mibBuilder.loadTexts: cloudBridgeEntry.setDescription('...')
cbIpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 3, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbIpAddressType.setStatus('current')
if mibBuilder.loadTexts: cbIpAddressType.setDescription('Type of cbIpAddress')
cbIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 3, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbIpAddress.setStatus('current')
if mibBuilder.loadTexts: cbIpAddress.setDescription('IP Address for this managed device')
cbHostIPAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 3, 1, 3), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbHostIPAddressType.setStatus('current')
if mibBuilder.loadTexts: cbHostIPAddressType.setDescription('Type of cbHostIPAddress')
cbHostIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 3, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbHostIPAddress.setStatus('current')
if mibBuilder.loadTexts: cbHostIPAddress.setDescription('Host IPAddress where VM is provisioned')
cbProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 3, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbProfileName.setStatus('current')
if mibBuilder.loadTexts: cbProfileName.setDescription('Device Profile Name that is attached with this managed device')
cbName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 3, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbName.setStatus('current')
if mibBuilder.loadTexts: cbName.setDescription('Name of managed device')
cbNetmaskType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 3, 1, 7), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbNetmaskType.setStatus('current')
if mibBuilder.loadTexts: cbNetmaskType.setDescription('Type of cbNetmask')
cbNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 3, 1, 8), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbNetmask.setStatus('current')
if mibBuilder.loadTexts: cbNetmask.setDescription('Netmask of managed device')
cbGatewayType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 3, 1, 9), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbGatewayType.setStatus('current')
if mibBuilder.loadTexts: cbGatewayType.setDescription('Type of cbGateway')
cbGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 3, 1, 10), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbGateway.setStatus('current')
if mibBuilder.loadTexts: cbGateway.setDescription('Default Gateway of managed device')
cbHostname = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 3, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbHostname.setStatus('current')
if mibBuilder.loadTexts: cbHostname.setDescription('Assign hostname to managed device, if this is not provided, name will be set as host name ')
cbDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 3, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbDescription.setStatus('current')
if mibBuilder.loadTexts: cbDescription.setDescription('Description of managed device')
cbVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 3, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbVersion.setStatus('current')
if mibBuilder.loadTexts: cbVersion.setDescription('Device Version')
cbInstanceState = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 3, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbInstanceState.setStatus('current')
if mibBuilder.loadTexts: cbInstanceState.setDescription('State of device, UP only if device accessible')
cbUuid = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 3, 1, 15), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbUuid.setStatus('current')
if mibBuilder.loadTexts: cbUuid.setDescription('UUID of VM Instance')
cbVirtualFunctions = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 3, 1, 16), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbVirtualFunctions.setStatus('current')
if mibBuilder.loadTexts: cbVirtualFunctions.setDescription('Virtual Functions assigned to VM Instance')
cbVmState = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 3, 1, 17), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbVmState.setStatus('current')
if mibBuilder.loadTexts: cbVmState.setDescription('State of Virtual Machine (Running | Halted)')
cbNumberOfCPU = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 3, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbNumberOfCPU.setStatus('current')
if mibBuilder.loadTexts: cbNumberOfCPU.setDescription('Number of CPU that is assigned to VM Instance')
cbVmCPUUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 3, 1, 19), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbVmCPUUsage.setStatus('current')
if mibBuilder.loadTexts: cbVmCPUUsage.setDescription('CPU Usage (%) of VM Instance')
cbVmMemoryTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 3, 1, 20), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbVmMemoryTotal.setStatus('current')
if mibBuilder.loadTexts: cbVmMemoryTotal.setDescription('Total Memory of VM Instance in MB')
cbVmMemoryFree = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 3, 1, 21), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbVmMemoryFree.setStatus('current')
if mibBuilder.loadTexts: cbVmMemoryFree.setDescription('Free Memory (MB) available in VM Instance')
cbVmMemoryUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 3, 1, 22), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbVmMemoryUsage.setStatus('current')
if mibBuilder.loadTexts: cbVmMemoryUsage.setDescription('Memory Usage (%) of VM Instance')
cbUptime = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 3, 1, 25), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbUptime.setStatus('current')
if mibBuilder.loadTexts: cbUptime.setDescription('Uptime of device')
cbDiskAllocation = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 3, 1, 30), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbDiskAllocation.setStatus('current')
if mibBuilder.loadTexts: cbDiskAllocation.setDescription('Disk allocation for VM Instance')
cbAPAIPADDRESSType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 3, 1, 47), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbAPAIPADDRESSType.setStatus('current')
if mibBuilder.loadTexts: cbAPAIPADDRESSType.setDescription('Type of cbAPAIPADDRESS')
cbAPAIPADDRESS = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 3, 1, 48), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbAPAIPADDRESS.setStatus('current')
if mibBuilder.loadTexts: cbAPAIPADDRESS.setDescription('aPA IP Address')
cbAPANetMaskType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 3, 1, 49), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbAPANetMaskType.setStatus('current')
if mibBuilder.loadTexts: cbAPANetMaskType.setDescription('Type of cbAPANetMask')
cbAPANetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 3, 1, 50), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbAPANetMask.setStatus('current')
if mibBuilder.loadTexts: cbAPANetMask.setDescription('aPA Netmask')
cbAPAGatewayType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 3, 1, 51), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbAPAGatewayType.setStatus('current')
if mibBuilder.loadTexts: cbAPAGatewayType.setDescription('Type of cbAPAGateway')
cbAPAGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 3, 1, 52), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbAPAGateway.setStatus('current')
if mibBuilder.loadTexts: cbAPAGateway.setDescription('aPA Gateway')
cbPluginIPADDRESSType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 3, 1, 53), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbPluginIPADDRESSType.setStatus('current')
if mibBuilder.loadTexts: cbPluginIPADDRESSType.setDescription('Type of cbPluginIPADDRESS')
cbPluginIPADDRESS = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 3, 1, 54), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbPluginIPADDRESS.setStatus('current')
if mibBuilder.loadTexts: cbPluginIPADDRESS.setDescription('Plugin IP Address')
cbMgmtIPAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 3, 1, 57), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbMgmtIPAddressType.setStatus('current')
if mibBuilder.loadTexts: cbMgmtIPAddressType.setDescription('Type of cbMgmtIPAddress')
cbMgmtIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 3, 1, 58), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbMgmtIPAddress.setStatus('current')
if mibBuilder.loadTexts: cbMgmtIPAddress.setDescription('Management IP Address for this Managed Device')
cloudBridgeAcceleratorTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 7, 3, 4), )
if mibBuilder.loadTexts: cloudBridgeAcceleratorTable.setStatus('current')
if mibBuilder.loadTexts: cloudBridgeAcceleratorTable.setDescription('cloudBridgeAcceleratortable')
cloudBridgeAcceleratorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 7, 3, 4, 1), ).setIndexNames((0, "MAS-MIB-SMIV2-MIB", "cbAcceleratorIpAddressType"), (0, "MAS-MIB-SMIV2-MIB", "cbAcceleratorIpAddress"), (0, "MAS-MIB-SMIV2-MIB", "cbAcceleratorHostIPAddressType"), (0, "MAS-MIB-SMIV2-MIB", "cbAcceleratorHostIPAddress"))
if mibBuilder.loadTexts: cloudBridgeAcceleratorEntry.setStatus('current')
if mibBuilder.loadTexts: cloudBridgeAcceleratorEntry.setDescription('...')
cbAcceleratorIpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 4, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbAcceleratorIpAddressType.setStatus('current')
if mibBuilder.loadTexts: cbAcceleratorIpAddressType.setDescription('Type of cbAcceleratorIpAddress')
cbAcceleratorIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 4, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbAcceleratorIpAddress.setStatus('current')
if mibBuilder.loadTexts: cbAcceleratorIpAddress.setDescription('IP Address for this managed device')
cbAcceleratorHostIPAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 4, 1, 3), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbAcceleratorHostIPAddressType.setStatus('current')
if mibBuilder.loadTexts: cbAcceleratorHostIPAddressType.setDescription('Type of cbAcceleratorHostIPAddress')
cbAcceleratorHostIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 4, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbAcceleratorHostIPAddress.setStatus('current')
if mibBuilder.loadTexts: cbAcceleratorHostIPAddress.setDescription('Host IPAddress where VM is provisioned')
cbAcceleratorProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 4, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbAcceleratorProfileName.setStatus('current')
if mibBuilder.loadTexts: cbAcceleratorProfileName.setDescription('Device Profile Name that is attached with this managed device')
cbAcceleratorName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 4, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbAcceleratorName.setStatus('current')
if mibBuilder.loadTexts: cbAcceleratorName.setDescription('Name of managed device')
cbAcceleratorNetmaskType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 4, 1, 7), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbAcceleratorNetmaskType.setStatus('current')
if mibBuilder.loadTexts: cbAcceleratorNetmaskType.setDescription('Type of cbAcceleratorNetmask')
cbAcceleratorNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 4, 1, 8), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbAcceleratorNetmask.setStatus('current')
if mibBuilder.loadTexts: cbAcceleratorNetmask.setDescription('Netmask of managed device')
cbAcceleratorGatewayType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 4, 1, 9), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbAcceleratorGatewayType.setStatus('current')
if mibBuilder.loadTexts: cbAcceleratorGatewayType.setDescription('Type of cbAcceleratorGateway')
cbAcceleratorGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 4, 1, 10), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbAcceleratorGateway.setStatus('current')
if mibBuilder.loadTexts: cbAcceleratorGateway.setDescription('Default Gateway of managed device')
cbAcceleratorHostname = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 4, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbAcceleratorHostname.setStatus('current')
if mibBuilder.loadTexts: cbAcceleratorHostname.setDescription('Assign hostname to managed device, if this is not provided, name will be set as host name ')
cbAcceleratorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 4, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbAcceleratorDescription.setStatus('current')
if mibBuilder.loadTexts: cbAcceleratorDescription.setDescription('Description of managed device')
cbAcceleratorVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 4, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbAcceleratorVersion.setStatus('current')
if mibBuilder.loadTexts: cbAcceleratorVersion.setDescription('Device Version')
cbAcceleratorInstanceState = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 4, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbAcceleratorInstanceState.setStatus('current')
if mibBuilder.loadTexts: cbAcceleratorInstanceState.setDescription('State of device, UP only if device accessible')
cbAcceleratorUuid = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 4, 1, 15), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbAcceleratorUuid.setStatus('current')
if mibBuilder.loadTexts: cbAcceleratorUuid.setDescription('UUID of VM Instance')
cbAcceleratorVmState = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 4, 1, 16), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbAcceleratorVmState.setStatus('current')
if mibBuilder.loadTexts: cbAcceleratorVmState.setDescription('State of Virtual Machine (Running | Halted)')
cbAcceleratorNumberOfCPU = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 4, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbAcceleratorNumberOfCPU.setStatus('current')
if mibBuilder.loadTexts: cbAcceleratorNumberOfCPU.setDescription('Number of CPU that is assigned to VM Instance')
cbAcceleratorVmCPUUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 4, 1, 18), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbAcceleratorVmCPUUsage.setStatus('current')
if mibBuilder.loadTexts: cbAcceleratorVmCPUUsage.setDescription('CPU Usage (%) of VM Instance')
cbAcceleratorVmMemoryTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 4, 1, 19), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbAcceleratorVmMemoryTotal.setStatus('current')
if mibBuilder.loadTexts: cbAcceleratorVmMemoryTotal.setDescription('Total Memory of VM Instance in MB')
cbAcceleratorVmMemoryFree = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 4, 1, 20), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbAcceleratorVmMemoryFree.setStatus('current')
if mibBuilder.loadTexts: cbAcceleratorVmMemoryFree.setDescription('Free Memory (MB) available in VM Instance')
cbAcceleratorVmMemoryUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 4, 1, 21), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbAcceleratorVmMemoryUsage.setStatus('current')
if mibBuilder.loadTexts: cbAcceleratorVmMemoryUsage.setDescription('Memory Usage (%) of VM Instance')
cbAcceleratorUptime = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 4, 1, 24), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbAcceleratorUptime.setStatus('current')
if mibBuilder.loadTexts: cbAcceleratorUptime.setDescription('Uptime of device')
cbAcceleratorIpList = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 4, 1, 31), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbAcceleratorIpList.setStatus('current')
if mibBuilder.loadTexts: cbAcceleratorIpList.setDescription('Specify the list of Citrix SD-WAN IPs for which this device will act as a Citrix SD-WAN Accelerator.')
cbAcceleratorMgmtIPAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 4, 1, 38), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbAcceleratorMgmtIPAddressType.setStatus('current')
if mibBuilder.loadTexts: cbAcceleratorMgmtIPAddressType.setDescription('Type of cbAcceleratorMgmtIPAddress')
cbAcceleratorMgmtIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 7, 3, 4, 1, 39), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbAcceleratorMgmtIPAddress.setStatus('current')
if mibBuilder.loadTexts: cbAcceleratorMgmtIPAddress.setDescription('Management IP Address for this Managed Device')
eventVarBindOids = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 7, 1, 1))
source = MibScalar((1, 3, 6, 1, 4, 1, 5951, 7, 1, 1, 1), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: source.setStatus('current')
if mibBuilder.loadTexts: source.setDescription('IP address of the device generating the event')
entityName = MibScalar((1, 3, 6, 1, 4, 1, 5951, 7, 1, 1, 2), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: entityName.setStatus('current')
if mibBuilder.loadTexts: entityName.setDescription('Name of the entity associated with this alarm')
entityType = MibScalar((1, 3, 6, 1, 4, 1, 5951, 7, 1, 1, 3), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: entityType.setStatus('current')
if mibBuilder.loadTexts: entityType.setDescription('Type of entity associated with this alarm')
eventMessage = MibScalar((1, 3, 6, 1, 4, 1, 5951, 7, 1, 1, 4), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: eventMessage.setStatus('current')
if mibBuilder.loadTexts: eventMessage.setDescription('Message associated with this alarm')
thresholdValue = MibScalar((1, 3, 6, 1, 4, 1, 5951, 7, 1, 1, 5), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: thresholdValue.setStatus('current')
if mibBuilder.loadTexts: thresholdValue.setDescription('High threshold value configured for this alarm')
currentValue = MibScalar((1, 3, 6, 1, 4, 1, 5951, 7, 1, 1, 6), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: currentValue.setStatus('current')
if mibBuilder.loadTexts: currentValue.setDescription('Current value of the entity when high or normal threshold trap is sent')
severity = MibScalar((1, 3, 6, 1, 4, 1, 5951, 7, 1, 1, 7), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: severity.setStatus('current')
if mibBuilder.loadTexts: severity.setDescription('Severity associated with this alarm')
mpsEvents = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2))
cpuUsageHigh = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 1)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "currentValue"), ("MAS-MIB-SMIV2-MIB", "thresholdValue"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: cpuUsageHigh.setStatus('current')
if mibBuilder.loadTexts: cpuUsageHigh.setDescription('CPU utilization has exceeded the high threshold value')
cpuUsageNormal = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 2)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "currentValue"), ("MAS-MIB-SMIV2-MIB", "thresholdValue"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: cpuUsageNormal.setStatus('current')
if mibBuilder.loadTexts: cpuUsageNormal.setDescription('CPU utilization has returned to normal')
memoryUsageHigh = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 3)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "currentValue"), ("MAS-MIB-SMIV2-MIB", "thresholdValue"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: memoryUsageHigh.setStatus('current')
if mibBuilder.loadTexts: memoryUsageHigh.setDescription('Memory utilization has exceeded the high threshold value.')
memoryUsageNormal = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 4)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "currentValue"), ("MAS-MIB-SMIV2-MIB", "thresholdValue"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: memoryUsageNormal.setStatus('current')
if mibBuilder.loadTexts: memoryUsageNormal.setDescription('Memory utilization has returned to normal')
diskUtilizationHigh = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 35)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "currentValue"), ("MAS-MIB-SMIV2-MIB", "thresholdValue"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: diskUtilizationHigh.setStatus('current')
if mibBuilder.loadTexts: diskUtilizationHigh.setDescription("This trap is sent when the Disk utilization goes high. 'entityName' and 'eventMessage' will show specific failure information")
diskUtilizationNormal = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 36)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "currentValue"), ("MAS-MIB-SMIV2-MIB", "thresholdValue"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: diskUtilizationNormal.setStatus('current')
if mibBuilder.loadTexts: diskUtilizationNormal.setDescription("This trap is sent when the Disk utilization becomes normal. 'entityName' and 'eventMessage' will show specific failure information")
subSystemDown = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 43)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: subSystemDown.setStatus('current')
if mibBuilder.loadTexts: subSystemDown.setDescription('A subsystem has gone DOWN; entityName shows details')
subSystemUp = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 44)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: subSystemUp.setStatus('current')
if mibBuilder.loadTexts: subSystemUp.setDescription('A subsystem has returned to the UP state; entityName shows details')
subSystemFailed = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 45)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: subSystemFailed.setStatus('current')
if mibBuilder.loadTexts: subSystemFailed.setDescription('A subsystem has failed; entityName shows details')
mpsDown = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 46)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: mpsDown.setStatus('current')
if mibBuilder.loadTexts: mpsDown.setDescription('All subsystems are DOWN')
mpsUp = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 47)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: mpsUp.setStatus('current')
if mibBuilder.loadTexts: mpsUp.setDescription('All subsystems are UP')
passwordRecoveryFailed = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 48)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: passwordRecoveryFailed.setStatus('current')
if mibBuilder.loadTexts: passwordRecoveryFailed.setDescription('Password recovery has failed')
passwordRecoverySuccess = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 49)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: passwordRecoverySuccess.setStatus('current')
if mibBuilder.loadTexts: passwordRecoverySuccess.setDescription('Password has been recovered successfully')
deviceStateChanged = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 54)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: deviceStateChanged.setStatus('current')
if mibBuilder.loadTexts: deviceStateChanged.setDescription('Instance state of a managed device has changed')
backupFailed = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 58)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: backupFailed.setStatus('current')
if mibBuilder.loadTexts: backupFailed.setDescription('This trap is sent when the backup operation fails')
loginFailure = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 71)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: loginFailure.setStatus('current')
if mibBuilder.loadTexts: loginFailure.setDescription("This trap is sent when User Authentication fails. 'entityName' and 'eventMessage' will show specific failure information")
inventoryFailed = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 72)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: inventoryFailed.setStatus('current')
if mibBuilder.loadTexts: inventoryFailed.setDescription('XenServer inventory collection has failed')
trapConfigFailure = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 78)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: trapConfigFailure.setStatus('current')
if mibBuilder.loadTexts: trapConfigFailure.setDescription('This trap is sent when failure occurs in adding snmp trap destination')
pooledLicenseGrace = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 80)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: pooledLicenseGrace.setStatus('current')
if mibBuilder.loadTexts: pooledLicenseGrace.setDescription('OnGrace; entityName and eventMessage show License is on grace')
pooledLicenseGraceNormal = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 81)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: pooledLicenseGraceNormal.setStatus('current')
if mibBuilder.loadTexts: pooledLicenseGraceNormal.setDescription('License in not under Grace')
licensePoolThresholdWarning = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 84)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: licensePoolThresholdWarning.setStatus('current')
if mibBuilder.loadTexts: licensePoolThresholdWarning.setDescription('licensePoolThresholdWarning; LicensePool is crossed Threshold value')
licensePoolThresholdNormal = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 85)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: licensePoolThresholdNormal.setStatus('current')
if mibBuilder.loadTexts: licensePoolThresholdNormal.setDescription('LicensePool is below Threshold value')
vipLicenseLimitWarning = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 86)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: vipLicenseLimitWarning.setStatus('current')
if mibBuilder.loadTexts: vipLicenseLimitWarning.setDescription('VIPs are more than License Limit')
vipLicenseLimitNormal = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 87)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: vipLicenseLimitNormal.setStatus('current')
if mibBuilder.loadTexts: vipLicenseLimitNormal.setDescription('VIPs are below than License Limit')
remoteBackupFailed = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 88)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: remoteBackupFailed.setStatus('current')
if mibBuilder.loadTexts: remoteBackupFailed.setDescription('This trap is sent when Remote Backup fails.')
remoteBackupResumed = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 89)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: remoteBackupResumed.setStatus('current')
if mibBuilder.loadTexts: remoteBackupResumed.setDescription('This trap is sent when Remote Backup failure is rectified and its running again.')
perfCounterThresholdHigh = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 90)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: perfCounterThresholdHigh.setStatus('current')
if mibBuilder.loadTexts: perfCounterThresholdHigh.setDescription('perfCounterThresholdHigh; Performance counter value has crossed the Threshold value')
perfCounterThresholdNormal = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 91)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: perfCounterThresholdNormal.setStatus('current')
if mibBuilder.loadTexts: perfCounterThresholdNormal.setDescription('perfCounterThresholdNormal; Performance counter value is below the Clear value')
devicebackupFailed = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 92)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: devicebackupFailed.setStatus('current')
if mibBuilder.loadTexts: devicebackupFailed.setDescription('This trap is sent when the device backup operation fails')
remoteDeviceBackupFailed = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 93)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: remoteDeviceBackupFailed.setStatus('current')
if mibBuilder.loadTexts: remoteDeviceBackupFailed.setDescription('This trap is sent when Remote Device Backup fails.')
dataStorageExceeded = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 94)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: dataStorageExceeded.setStatus('current')
if mibBuilder.loadTexts: dataStorageExceeded.setDescription('dataStorageExceeded;Database storage exceeds the limit specified in license')
dataStorageNormal = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 95)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: dataStorageNormal.setStatus('current')
if mibBuilder.loadTexts: dataStorageNormal.setDescription('dataStorageNormal;Database storage is within the limit allowed by license.')
sslCertThresholdBreached = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 96)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: sslCertThresholdBreached.setStatus('current')
if mibBuilder.loadTexts: sslCertThresholdBreached.setDescription('sslCertThresholdBreached;Certificate expiry')
sslCertThresholdNormal = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 97)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: sslCertThresholdNormal.setStatus('current')
if mibBuilder.loadTexts: sslCertThresholdNormal.setDescription('sslCertThresholdNormal')
haFailover = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 98)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: haFailover.setStatus('current')
if mibBuilder.loadTexts: haFailover.setDescription('HA Failover happened.')
haNoHeartBeats = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 99)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: haNoHeartBeats.setStatus('current')
if mibBuilder.loadTexts: haNoHeartBeats.setDescription('No Heartbeats from peer.')
haDatabaseOutOfSync = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 100)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: haDatabaseOutOfSync.setStatus('current')
if mibBuilder.loadTexts: haDatabaseOutOfSync.setDescription('HA nodes database out of sync')
inventoryUp = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 101)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: inventoryUp.setStatus('current')
if mibBuilder.loadTexts: inventoryUp.setDescription('Inventory has returned to normal condition')
deviceBooted = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 104)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: deviceBooted.setStatus('current')
if mibBuilder.loadTexts: deviceBooted.setDescription('A managed device has failed to start')
deviceRebooted = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 105)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: deviceRebooted.setStatus('current')
if mibBuilder.loadTexts: deviceRebooted.setDescription('A managed device has failed to restart')
autoScaleGroupAdded = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 106)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: autoScaleGroupAdded.setStatus('current')
if mibBuilder.loadTexts: autoScaleGroupAdded.setDescription('AutoScaleGroup Added')
autoScaleGroupModified = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 107)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: autoScaleGroupModified.setStatus('current')
if mibBuilder.loadTexts: autoScaleGroupModified.setDescription('AutoScaleGroup Modified')
autoScaleGroupDeleted = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 108)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: autoScaleGroupDeleted.setStatus('current')
if mibBuilder.loadTexts: autoScaleGroupDeleted.setDescription('AutoScaleGroup Deleted')
clusterProvisionStatus = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 109)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: clusterProvisionStatus.setStatus('current')
if mibBuilder.loadTexts: clusterProvisionStatus.setDescription('AutoScaleGroup: Cluster Provision Status')
nodeProvisionStatus = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 110)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: nodeProvisionStatus.setStatus('current')
if mibBuilder.loadTexts: nodeProvisionStatus.setDescription('AutoScaleGroup: Node Provision Status')
coolDownPeriodStatus = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 111)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: coolDownPeriodStatus.setStatus('current')
if mibBuilder.loadTexts: coolDownPeriodStatus.setDescription('AutoScaleGroup: Cool Down Period Status')
clusterDeprovisionStatus = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 112)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: clusterDeprovisionStatus.setStatus('current')
if mibBuilder.loadTexts: clusterDeprovisionStatus.setDescription('AutoScaleGroup: Cluster Deprovision Status')
nodeDeprovisionStatus = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 113)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: nodeDeprovisionStatus.setStatus('current')
if mibBuilder.loadTexts: nodeDeprovisionStatus.setDescription('AutoScaleGroup: Node Deprovision Status')
drainConnPeriodStatus = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 114)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: drainConnPeriodStatus.setStatus('current')
if mibBuilder.loadTexts: drainConnPeriodStatus.setDescription('AutoScaleGroup: Drain Connection Period Status')
deployAppStatus = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 115)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: deployAppStatus.setStatus('current')
if mibBuilder.loadTexts: deployAppStatus.setDescription('AutoScaleGroup: Deploy application status')
modifyAppStatus = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 116)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: modifyAppStatus.setStatus('current')
if mibBuilder.loadTexts: modifyAppStatus.setDescription('AutoScaleGroup: Modify application status')
deleteAppStatus = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 117)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: deleteAppStatus.setStatus('current')
if mibBuilder.loadTexts: deleteAppStatus.setDescription('AutoScaleGroup: Delete application status')
ipLimitReached = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 118)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: ipLimitReached.setStatus('current')
if mibBuilder.loadTexts: ipLimitReached.setDescription('AutoScaleGroup: IP Limit Reached')
scaleOutStatus = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 119)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: scaleOutStatus.setStatus('current')
if mibBuilder.loadTexts: scaleOutStatus.setDescription('AutoScaleGroup: Scale Out Status')
scaleInStatus = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 120)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: scaleInStatus.setStatus('current')
if mibBuilder.loadTexts: scaleInStatus.setDescription('AutoScaleGroup: Scale In Status')
addIPSetStatus = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 121)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: addIPSetStatus.setStatus('current')
if mibBuilder.loadTexts: addIPSetStatus.setDescription('AutoScaleGroup: IPSet creation status')
deleteIPSetStatus = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 122)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: deleteIPSetStatus.setStatus('current')
if mibBuilder.loadTexts: deleteIPSetStatus.setDescription('AutoScaleGroup: IPSet deletion status')
addZone = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 123)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: addZone.setStatus('current')
if mibBuilder.loadTexts: addZone.setDescription('AutoScaleGroup: Add Zone status')
deleteZone = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 124)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: deleteZone.setStatus('current')
if mibBuilder.loadTexts: deleteZone.setDescription('AutoScaleGroup: Delete Zone status')
addRecord = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 125)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: addRecord.setStatus('current')
if mibBuilder.loadTexts: addRecord.setDescription('AutoScaleGroup: Add record status')
deleteRecord = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 126)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: deleteRecord.setStatus('current')
if mibBuilder.loadTexts: deleteRecord.setDescription('AutoScaleGroup: Add record status')
addRRData = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 127)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: addRRData.setStatus('current')
if mibBuilder.loadTexts: addRRData.setDescription('AutoScaleGroup: Add rrdata status')
deleteRRData = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 128)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: deleteRRData.setStatus('current')
if mibBuilder.loadTexts: deleteRRData.setDescription('AutoScaleGroup: delete rrdata status')
instancePolicyReconfigurationFailed = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 131)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: instancePolicyReconfigurationFailed.setStatus('current')
if mibBuilder.loadTexts: instancePolicyReconfigurationFailed.setDescription('Reconfiguration of policies failed on an instance')
instancePolicyReconfigurationSucceeded = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 132)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: instancePolicyReconfigurationSucceeded.setStatus('current')
if mibBuilder.loadTexts: instancePolicyReconfigurationSucceeded.setDescription('Reconfiguration of policies succeeded on an instance')
autoscalegroupUpgrade = NotificationType((1, 3, 6, 1, 4, 1, 5951, 7, 1, 2, 133)).setObjects(("MAS-MIB-SMIV2-MIB", "source"), ("MAS-MIB-SMIV2-MIB", "entityName"), ("MAS-MIB-SMIV2-MIB", "eventMessage"), ("MAS-MIB-SMIV2-MIB", "severity"))
if mibBuilder.loadTexts: autoscalegroupUpgrade.setStatus('current')
if mibBuilder.loadTexts: autoscalegroupUpgrade.setDescription('AutoScaleGroup: Upgrade AutoScaleGroup')
mibBuilder.exportSymbols("MAS-MIB-SMIV2-MIB", cbGatewayType=cbGatewayType, cbVersion=cbVersion, cbVmMemoryFree=cbVmMemoryFree, cbNumberOfCPU=cbNumberOfCPU, source=source, subSystemFailed=subSystemFailed, deviceBooted=deviceBooted, nsHostIPAddressType=nsHostIPAddressType, masEventGroup=masEventGroup, nsVmState=nsVmState, nsIfOby1=nsIfOby1, nsProfileName=nsProfileName, netscalerTable=netscalerTable, nsVmMemoryTotal=nsVmMemoryTotal, cbMgmtIPAddressType=cbMgmtIPAddressType, cbAcceleratorUptime=cbAcceleratorUptime, cbAPAIPADDRESS=cbAPAIPADDRESS, nsHaIPAddressType=nsHaIPAddressType, systemGroup=systemGroup, entityType=entityType, nsNsRx=nsNsRx, severity=severity, nsNetmaskType=nsNetmaskType, nsNumberOfSSLCores=nsNumberOfSSLCores, instancePolicyReconfigurationFailed=instancePolicyReconfigurationFailed, remoteBackupResumed=remoteBackupResumed, nsVmDescription=nsVmDescription, systemBiosVersion=systemBiosVersion, systemCurrentTime=systemCurrentTime, autoScaleGroupModified=autoScaleGroupModified, PYSNMP_MODULE_ID=netScaler, eventVarBindOids=eventVarBindOids, addRRData=addRRData, nsUuid=nsUuid, haNoHeartBeats=haNoHeartBeats, cbAcceleratorHostIPAddress=cbAcceleratorHostIPAddress, thresholdValue=thresholdValue, systemIPAddressType=systemIPAddressType, inventoryFailed=inventoryFailed, diskUtilizationNormal=diskUtilizationNormal, cbAcceleratorHostname=cbAcceleratorHostname, licensePoolThresholdNormal=licensePoolThresholdNormal, cbNetmaskType=cbNetmaskType, cbHostIPAddress=cbHostIPAddress, cpuUsageHigh=cpuUsageHigh, deviceStateChanged=deviceStateChanged, dataStorageNormal=dataStorageNormal, cbUuid=cbUuid, cbAcceleratorNetmaskType=cbAcceleratorNetmaskType, addIPSetStatus=addIPSetStatus, clusterProvisionStatus=clusterProvisionStatus, nsGateway=nsGateway, instancePolicyReconfigurationSucceeded=instancePolicyReconfigurationSucceeded, modifyAppStatus=modifyAppStatus, currentValue=currentValue, cbAPAGatewayType=cbAPAGatewayType, memoryUsageNormal=memoryUsageNormal, sslCertThresholdBreached=sslCertThresholdBreached, cbUptime=cbUptime, nsHttpReq=nsHttpReq, nsUpsince=nsUpsince, cbAcceleratorProfileName=cbAcceleratorProfileName, nsNsVLANTagged=nsNsVLANTagged, cbVmCPUUsage=cbVmCPUUsage, netScaler=netScaler, cbAcceleratorIpAddress=cbAcceleratorIpAddress, cbAcceleratorIpAddressType=cbAcceleratorIpAddressType, nsVlanType=nsVlanType, cloudBridgeTable=cloudBridgeTable, entityName=entityName, cbHostname=cbHostname, nsNsMemoryUsage=nsNsMemoryUsage, nsIf0by2=nsIf0by2, cbAcceleratorVmMemoryFree=cbAcceleratorVmMemoryFree, cbAcceleratorVmState=cbAcceleratorVmState, cbAcceleratorVmMemoryTotal=cbAcceleratorVmMemoryTotal, nsThroughput=nsThroughput, eventMessage=eventMessage, cbInstanceState=cbInstanceState, nsLicense=nsLicense, systemProduct=systemProduct, remoteBackupFailed=remoteBackupFailed, systemGatewayType=systemGatewayType, cbIpAddress=cbIpAddress, deleteIPSetStatus=deleteIPSetStatus, nsVersion=nsVersion, mpsUp=mpsUp, systemIPAddress=systemIPAddress, nsSslVirtualFunctions=nsSslVirtualFunctions, nsNsCPUUsage=nsNsCPUUsage, nsNsTx=nsNsTx, loginFailure=loginFailure, systemUptime=systemUptime, nsPps=nsPps, cbName=cbName, nsNumberOfCores=nsNumberOfCores, pooledLicenseGraceNormal=pooledLicenseGraceNormal, nsNumberOfSslCoresUp=nsNumberOfSslCoresUp, licensePoolThresholdWarning=licensePoolThresholdWarning, cbPluginIPADDRESS=cbPluginIPADDRESS, cbAcceleratorMgmtIPAddressType=cbAcceleratorMgmtIPAddressType, nsHaSync=nsHaSync, cbIpAddressType=cbIpAddressType, nsIpAddress=nsIpAddress, cbAcceleratorNumberOfCPU=cbAcceleratorNumberOfCPU, nsUptime=nsUptime, scaleInStatus=scaleInStatus, masRoot=masRoot, cloudBridgeAcceleratorEntry=cloudBridgeAcceleratorEntry, cbAcceleratorNetmask=cbAcceleratorNetmask, cbAcceleratorIpList=cbAcceleratorIpList, haDatabaseOutOfSync=haDatabaseOutOfSync, scaleOutStatus=scaleOutStatus, trapConfigFailure=trapConfigFailure, systemPlatform=systemPlatform, addRecord=addRecord, systemNetmaskType=systemNetmaskType, autoScaleGroupDeleted=autoScaleGroupDeleted, netscalerEntry=netscalerEntry, perfCounterThresholdHigh=perfCounterThresholdHigh, nsHaIPAddress=nsHaIPAddress, nsName=nsName, cbAPANetMaskType=cbAPANetMaskType, subSystemUp=subSystemUp, devicebackupFailed=devicebackupFailed, systemDns=systemDns, nsVirtualFunctions=nsVirtualFunctions, cbVmMemoryTotal=cbVmMemoryTotal, nsNetmask=nsNetmask, cbAPANetMask=cbAPANetMask, cbNetmask=cbNetmask, deleteAppStatus=deleteAppStatus, cbAcceleratorInstanceState=cbAcceleratorInstanceState, systemDiskUsage=systemDiskUsage, cloudBridgeAcceleratorTable=cloudBridgeAcceleratorTable, addZone=addZone, cbVmState=cbVmState, dataStorageExceeded=dataStorageExceeded, systemSerial=systemSerial, systemCpuUsage=systemCpuUsage, autoScaleGroupAdded=autoScaleGroupAdded, nsHostname=nsHostname, nsNodeState=nsNodeState, systemBuildNumber=systemBuildNumber, diskUtilizationHigh=diskUtilizationHigh, cbGateway=cbGateway, pooledLicenseGrace=pooledLicenseGrace, nsHaMasterState=nsHaMasterState, autoscalegroupUpgrade=autoscalegroupUpgrade, nsIpAddressType=nsIpAddressType, cloudBridgeEntry=cloudBridgeEntry, nsNumberOfCPU=nsNumberOfCPU, systemNetmask=systemNetmask, cbVmMemoryUsage=cbVmMemoryUsage, mpsDown=mpsDown, clusterDeprovisionStatus=clusterDeprovisionStatus, cbAPAGateway=cbAPAGateway, systemCustomID=systemCustomID, cbPluginIPADDRESSType=cbPluginIPADDRESSType, ipLimitReached=ipLimitReached, deleteRecord=deleteRecord, deployAppStatus=deployAppStatus, nsInstanceState=nsInstanceState, cbAPAIPADDRESSType=cbAPAIPADDRESSType, sslCertThresholdNormal=sslCertThresholdNormal, nsDescription=nsDescription, nsHostIPAddress=nsHostIPAddress, perfCounterThresholdNormal=perfCounterThresholdNormal, cbAcceleratorDescription=cbAcceleratorDescription, cbAcceleratorMgmtIPAddress=cbAcceleratorMgmtIPAddress, passwordRecoveryFailed=passwordRecoveryFailed, passwordRecoverySuccess=passwordRecoverySuccess, deleteRRData=deleteRRData, systemSysId=systemSysId, deviceGroup=deviceGroup, cbAcceleratorVmCPUUsage=cbAcceleratorVmCPUUsage, nodeProvisionStatus=nodeProvisionStatus, systemMemoryUsage=systemMemoryUsage, haFailover=haFailover, backupFailed=backupFailed, nsGatewayType=nsGatewayType, cbAcceleratorVmMemoryUsage=cbAcceleratorVmMemoryUsage, cbMgmtIPAddress=cbMgmtIPAddress, coolDownPeriodStatus=coolDownPeriodStatus, nsNsVLANId=nsNsVLANId, deviceRebooted=deviceRebooted, memoryUsageHigh=memoryUsageHigh, cbAcceleratorGateway=cbAcceleratorGateway, cpuUsageNormal=cpuUsageNormal, cbAcceleratorGatewayType=cbAcceleratorGatewayType, nsCpuCorePE=nsCpuCorePE, cbDiskAllocation=cbDiskAllocation, cbVirtualFunctions=cbVirtualFunctions, vipLicenseLimitWarning=vipLicenseLimitWarning, cbAcceleratorUuid=cbAcceleratorUuid, subSystemDown=subSystemDown, vipLicenseLimitNormal=vipLicenseLimitNormal, nodeDeprovisionStatus=nodeDeprovisionStatus, deleteZone=deleteZone, inventoryUp=inventoryUp, systemDnsType=systemDnsType, drainConnPeriodStatus=drainConnPeriodStatus, cbAcceleratorName=cbAcceleratorName, cbProfileName=cbProfileName, cbDescription=cbDescription, systemGateway=systemGateway, cbHostIPAddressType=cbHostIPAddressType, remoteDeviceBackupFailed=remoteDeviceBackupFailed, nsCpuCoreMgmt=nsCpuCoreMgmt, cbAcceleratorHostIPAddressType=cbAcceleratorHostIPAddressType, cbAcceleratorVersion=cbAcceleratorVersion, mpsEvents=mpsEvents)
