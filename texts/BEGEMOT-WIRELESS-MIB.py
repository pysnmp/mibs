#
# PySNMP MIB module BEGEMOT-WIRELESS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/pfsense/BEGEMOT-WIRELESS-MIB
# Produced by pysmi-1.1.12 at Thu May 30 02:21:14 2024
# On host fv-az1567-87 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion")
begemot, = mibBuilder.importSymbols("BEGEMOT-MIB", "begemot")
ifIndex, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "ifIndex", "InterfaceIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
TimeTicks, Unsigned32, NotificationType, MibIdentifier, Gauge32, mib_2, Counter32, Counter64, ObjectIdentity, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, ModuleIdentity, Bits, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Unsigned32", "NotificationType", "MibIdentifier", "Gauge32", "mib-2", "Counter32", "Counter64", "ObjectIdentity", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "ModuleIdentity", "Bits", "Integer32")
RowStatus, TextualConvention, DisplayString, MacAddress, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "DisplayString", "MacAddress", "TruthValue")
begemotWlan = ModuleIdentity((1, 3, 6, 1, 4, 1, 12325, 1, 210))
begemotWlan.setRevisions(('2010-05-17 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: begemotWlan.setRevisionsDescriptions(('Initial revision.',))
if mibBuilder.loadTexts: begemotWlan.setLastUpdated('201005170000Z')
if mibBuilder.loadTexts: begemotWlan.setOrganization('The FreeBSD Foundation')
if mibBuilder.loadTexts: begemotWlan.setContactInfo('\t\tShteryana Shopova\n\n\t     Postal:\t12 Andrey Lyapchev Blvd.\n\t\t\tblock 2, ap.19\n\t\t\t1797 Sofia\n\t\t\tBulgaria\n\n\t     Fax:\tN/A\n\n\t     E-Mail:\tsyrinx@FreeBSD.org')
if mibBuilder.loadTexts: begemotWlan.setDescription('The Begemot MIB for managing IEEE802.11 interfaces.')
class WlanMgmtReasonCode(TextualConvention, Integer32):
    description = 'Enumeration of reason and codes used in IEEE802.11\n\tmanagement frames to indicate why an action took place.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 32, 33, 34, 35, 36, 37, 38, 39))
    namedValues = NamedValues(("unspecified", 1), ("authenticationExpire", 2), ("authenticationLeave", 3), ("associationExpire", 4), ("associationTooMany", 5), ("notAuthenticated", 6), ("notAssociated", 7), ("associationLeave", 8), ("associationNotAuthenticated", 9), ("dissassocPwrcapBad", 10), ("dissassocSuperchanBad", 11), ("ieInvalid", 13), ("micFailure", 14), ("fourWayHandshakeTimeout", 15), ("groupKeyUpdateTimeout", 16), ("ieIn4FourWayDiffers", 17), ("groupCipherInvalid", 18), ("pairwiseCiherInvalid", 19), ("akmpInvalid", 20), ("unsupportedRsnIeVersion", 21), ("invalidRsnIeCap", 22), ("dot1xAuthFailed", 23), ("cipherSuiteRejected", 24), ("unspeciffiedQos", 32), ("insufficientBw", 33), ("tooManyFrames", 34), ("outsideTxOp", 35), ("leavingQbss", 36), ("badMechanism", 37), ("setupNeeded", 38), ("timeout", 39))

class WlanMgmtMeshReasonCode(TextualConvention, Integer32):
    description = 'Enumeration of reason and codes used in IEEE802.11\n\tmesh routing management frames to indicate why an\n\taction took place.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))
    namedValues = NamedValues(("peerLinkCancelled", 2), ("maxPeers", 3), ("cpViolation", 4), ("closeRcvd", 5), ("maxRetries", 6), ("confirmTimeout", 7), ("invalidGtk", 8), ("inconsistentParams", 9), ("invalidSecurity", 10), ("perrUnspecified", 11), ("perrNoFI", 12), ("perrDestUnreach", 13))

class WlanMgmtStatusCode(TextualConvention, Integer32):
    description = 'Enumeration of reason and codes used in IEEE802.11\n\tmanagement frames to indicate what the result of an\n\toperation is.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 40, 41, 42, 43, 44, 45, 46))
    namedValues = NamedValues(("success", 0), ("unspecified", 1), ("capabilitiesInfo", 10), ("notAssociated", 11), ("other", 12), ("algorithm", 13), ("sequence", 14), ("challenge", 15), ("timeout", 16), ("tooMany", 17), ("basicRate", 18), ("spRequired", 19), ("pbccRequired", 20), ("caRequired", 21), ("specMgmtRequired", 22), ("pwrcapRequire", 23), ("superchanRequired", 24), ("shortSlotRequired", 25), ("dssofdmRequired", 26), ("missingHTCaps", 27), ("invalidIE", 40), ("groupCipherInvalid", 41), ("pairwiseCipherInvalid", 42), ("akmpInvalid", 43), ("unsupportedRsnIEVersion", 44), ("invalidRsnIECap", 45), ("cipherSuiteRejected", 46))

class WlanRegDomainCode(TextualConvention, Integer32):
    description = 'Enumeration of regdomain codes.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))
    namedValues = NamedValues(("fcc", 1), ("ca", 2), ("etsi", 3), ("etsi2", 4), ("etsi3", 5), ("fcc3", 6), ("japan", 7), ("korea", 8), ("apac", 9), ("apac2", 10), ("apac3", 11), ("row", 12), ("none", 13), ("debug", 14), ("sr9", 15), ("xr9", 16), ("gz901", 17))

class WlanIfaceDot11nPduType(TextualConvention, Integer32):
    description = 'Enumeration of values for PDU transmit/receive enabled.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("disabled", 0), ("rxOnly", 1), ("txOnly", 2), ("txAndRx", 3))

class WlanPeerCapabilityFlags(TextualConvention, Bits):
    description = 'A list of capability bits that may be advertised by a peer.'
    status = 'current'
    namedValues = NamedValues(("ess", 1), ("ibss", 2), ("cfPollable", 3), ("cfPollRequest", 4), ("privacy", 5), ("shortPreamble", 6), ("pbcc", 7), ("channelAgility", 8), ("shortSlotTime", 9), ("rsn", 10), ("dsssofdm", 11))

class WlanIfPhyMode(TextualConvention, Integer32):
    description = 'A list of wireless PHY operating modes.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))
    namedValues = NamedValues(("auto", 1), ("dot11a", 2), ("dot11b", 3), ("dot11g", 4), ("fh", 5), ("turboA", 6), ("turboG", 7), ("sturboA", 8), ("dot11na", 9), ("dot11ng", 10), ("ofdmHalf", 11), ("ofdmQuarter", 12))

begemotWlanNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 12325, 1, 210, 0))
begemotWlanInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 12325, 1, 210, 1))
begemotWlanScanning = MibIdentifier((1, 3, 6, 1, 4, 1, 12325, 1, 210, 2))
begemotWlanStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 12325, 1, 210, 3))
begemotWlanWep = MibIdentifier((1, 3, 6, 1, 4, 1, 12325, 1, 210, 4))
begemotWlanMACAccessControl = MibIdentifier((1, 3, 6, 1, 4, 1, 12325, 1, 210, 5))
begemotWlanMeshRouting = MibIdentifier((1, 3, 6, 1, 4, 1, 12325, 1, 210, 6))
wlanInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 12325, 1, 210, 1, 1), )
if mibBuilder.loadTexts: wlanInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: wlanInterfaceTable.setDescription('A table that contains the list of cloned wireless\n\tinterfaces created on the system.')
wlanInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12325, 1, 210, 1, 1, 1), ).setIndexNames((0, "BEGEMOT-WIRELESS-MIB", "wlanIfaceName"))
if mibBuilder.loadTexts: wlanInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: wlanInterfaceEntry.setDescription('Information for a cloned wireless interface.')
wlanIfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 1, 1, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanIfaceIndex.setStatus('current')
if mibBuilder.loadTexts: wlanIfaceIndex.setDescription('The ifIndex of this cloned wireless interface.')
wlanIfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wlanIfaceName.setStatus('current')
if mibBuilder.loadTexts: wlanIfaceName.setDescription('The name of this cloned wireless interface.')
wlanParentIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wlanParentIfName.setStatus('current')
if mibBuilder.loadTexts: wlanParentIfName.setDescription("The name of this cloned wireless interface's parent hardware\n\tinterface.")
wlanIfaceOperatingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("ibss", 0), ("station", 1), ("wds", 2), ("adhocDemo", 3), ("hostAp", 4), ("monitor", 5), ("meshPoint", 6), ("tdma", 7))).clone('station')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wlanIfaceOperatingMode.setStatus('current')
if mibBuilder.loadTexts: wlanIfaceOperatingMode.setDescription('The desired operating mode of the cloned wireless interface.')
wlanIfaceFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 1, 1, 1, 5), Bits().clone(namedValues=NamedValues(("uniqueBssid", 1), ("noBeacons", 2), ("wdsLegacy", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wlanIfaceFlags.setStatus('current')
if mibBuilder.loadTexts: wlanIfaceFlags.setDescription('Flags per cloned wireless interface used during creation.')
wlanIfaceBssid = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 1, 1, 1, 6), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wlanIfaceBssid.setStatus('current')
if mibBuilder.loadTexts: wlanIfaceBssid.setDescription('The BSSID assigned to a cloned wireless interface operating in\n\tWDS mode.')
wlanIfaceLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 1, 1, 1, 7), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wlanIfaceLocalAddress.setStatus('current')
if mibBuilder.loadTexts: wlanIfaceLocalAddress.setDescription('The unique local MAC address assigned to the cloned wireless\n\tinterface during creation.')
wlanIfaceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 1, 1, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wlanIfaceStatus.setStatus('current')
if mibBuilder.loadTexts: wlanIfaceStatus.setDescription('This column allows creation or deletion of cloned wireless\n\tinterfaces.')
wlanIfaceState = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wlanIfaceState.setStatus('current')
if mibBuilder.loadTexts: wlanIfaceState.setDescription('The operating state of the interface.')
wlanIfParentTable = MibTable((1, 3, 6, 1, 4, 1, 12325, 1, 210, 1, 2), )
if mibBuilder.loadTexts: wlanIfParentTable.setStatus('current')
if mibBuilder.loadTexts: wlanIfParentTable.setDescription('A table that contains information about the parent hardware\n\tinterface of every cloned wireless interface in the system.')
wlanIfParentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12325, 1, 210, 1, 2, 1), )
wlanInterfaceEntry.registerAugmentions(("BEGEMOT-WIRELESS-MIB", "wlanIfParentEntry"))
wlanIfParentEntry.setIndexNames(*wlanInterfaceEntry.getIndexNames())
if mibBuilder.loadTexts: wlanIfParentEntry.setStatus('current')
if mibBuilder.loadTexts: wlanIfParentEntry.setDescription('Information for the parent hardware interface of a cloned\n\twireless interface.')
wlanIfParentDriverCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 1, 2, 1, 1), Bits().clone(namedValues=NamedValues(("station", 1), ("ieee8023encap", 2), ("athFastFrames", 3), ("athTurbo", 4), ("ibss", 5), ("pmgt", 6), ("hostAp", 7), ("ahDemo", 8), ("swRetry", 9), ("txPmgt", 10), ("shortSlot", 11), ("shortPreamble", 12), ("monitor", 13), ("dfs", 14), ("mbss", 15), ("wpa1", 16), ("wpa2", 17), ("burst", 18), ("wme", 19), ("wds", 20), ("bgScan", 21), ("txFrag", 22), ("tdma", 23)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanIfParentDriverCapabilities.setStatus('current')
if mibBuilder.loadTexts: wlanIfParentDriverCapabilities.setDescription("The driver capabilities of this cloned interface's parent.")
wlanIfParentCryptoCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 1, 2, 1, 2), Bits().clone(namedValues=NamedValues(("wep", 1), ("tkip", 2), ("aes", 3), ("aesCcm", 4), ("tkipMic", 5), ("ckip", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanIfParentCryptoCapabilities.setStatus('current')
if mibBuilder.loadTexts: wlanIfParentCryptoCapabilities.setDescription("The hardware cryptographic capabilities of this cloned\n\tinterface's parent.")
wlanIfParentHTCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 1, 2, 1, 3), Bits().clone(namedValues=NamedValues(("ldpc", 1), ("chwidth40", 2), ("greenField", 3), ("shortGi20", 4), ("shortGi40", 5), ("txStbc", 6), ("delba", 7), ("amsdu7935", 8), ("dssscck40", 9), ("psmp", 10), ("fortyMHzIntolerant", 11), ("lsigTxOpProt", 12), ("htcAmpdu", 13), ("htcAmsdu", 14), ("htcHt", 15), ("htcSmps", 16), ("htcRifs", 17)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanIfParentHTCapabilities.setStatus('current')
if mibBuilder.loadTexts: wlanIfParentHTCapabilities.setDescription("The hardware High Throughput capabilities of this cloned\n\tinterface's parent.")
wlanIfaceConfigTable = MibTable((1, 3, 6, 1, 4, 1, 12325, 1, 210, 1, 3), )
if mibBuilder.loadTexts: wlanIfaceConfigTable.setStatus('current')
if mibBuilder.loadTexts: wlanIfaceConfigTable.setDescription("A table that contains a list of configuration parameters per\n\tcloned wireless interface. Some of the parameters may not be\n\tapplicable depending on the underlying device's hardware\n\tcapabilities and operating mode of the virtual interface.")
wlanIfaceConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12325, 1, 210, 1, 3, 1), )
wlanInterfaceEntry.registerAugmentions(("BEGEMOT-WIRELESS-MIB", "wlanIfaceConfigEntry"))
wlanIfaceConfigEntry.setIndexNames(*wlanInterfaceEntry.getIndexNames())
if mibBuilder.loadTexts: wlanIfaceConfigEntry.setStatus('current')
if mibBuilder.loadTexts: wlanIfaceConfigEntry.setDescription('A list of configuration parameters for a cloned wireless interface.')
wlanIfacePacketBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 1, 3, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanIfacePacketBurst.setStatus('current')
if mibBuilder.loadTexts: wlanIfacePacketBurst.setDescription('The value of this object controls whether packet bursting is\n\tenabled on the interface.')
wlanIfaceCountryCode = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 1, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanIfaceCountryCode.setStatus('current')
if mibBuilder.loadTexts: wlanIfaceCountryCode.setDescription("The value of this object controls the country regulatory\n\tconstraints for operation of this wireless interface. The first\n\ttwo octets of this string is the two character country code as\n\tdescribed in ISO/IEC 3166-1. The third octet shall contain one\n\tof the following:\n\n\t1. an ASCII space character, if the regulations under which the\n\tinterface is operating include all environments in the specified\n\tcountry.\n\n\t2. an ASCII 'O' character, if the country's regulations are for\n\tOutdoor environment only.\n\n\t3. an ASCII 'I' character, if the country's regulations are for\n\tIndoor environment only.")
wlanIfaceRegDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 1, 3, 1, 3), WlanRegDomainCode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanIfaceRegDomain.setStatus('current')
if mibBuilder.loadTexts: wlanIfaceRegDomain.setDescription('This object specifies the regulatory domain to use when calculating\n\tthe regulatory constraints for operation of the interface.')
wlanIfaceDesiredSsid = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 1, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanIfaceDesiredSsid.setStatus('current')
if mibBuilder.loadTexts: wlanIfaceDesiredSsid.setDescription('The desired SSID for the interface as an ASCII  string.\n\tSpecifying an empty string shall remove the current configured\n\tSSID.')
wlanIfaceDesiredChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 1, 3, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanIfaceDesiredChannel.setStatus('current')
if mibBuilder.loadTexts: wlanIfaceDesiredChannel.setDescription('The desired operating channel for this interface. The value of this\n\tcolumn is the channel index (wlanIfaceChannelId) of the corresponding\n\tentry from the wlanIfaceChannelTable. The interface status must be\n\tdown so that the current operating channel may be set properly.')
wlanIfaceDynamicFreqSelection = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 1, 3, 1, 6), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanIfaceDynamicFreqSelection.setStatus('current')
if mibBuilder.loadTexts: wlanIfaceDynamicFreqSelection.setDescription('The value of this object specifies whether Dynamic Frequency\n\tSelection (DFS) as specified in 802.11h is enabled on an\n\tinterface that supports 802.11h and DFS.')
wlanIfaceFastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 1, 3, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanIfaceFastFrames.setStatus('current')
if mibBuilder.loadTexts: wlanIfaceFastFrames.setDescription('The value of this object controls whether use of Atheros Fast\n\tFrames is enabled when when communicating with another Fast\n\tFrames-capable station. The value is only meaningful for\n\tinterfaces that support Atheros Fast Frames.')
wlanIfaceDturbo = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 1, 3, 1, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanIfaceDturbo.setStatus('current')
if mibBuilder.loadTexts: wlanIfaceDturbo.setDescription('The value of this object controls whether use of Atheros Dynamic\n\tTurbo mode is enabled when when communicating with another Dynamic\n\tTurbo-capable station. The value is only meaningful for interfaces\n\tthat support Atheros Dynamic Turbo mode.')
wlanIfaceTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 1, 3, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanIfaceTxPower.setStatus('current')
if mibBuilder.loadTexts: wlanIfaceTxPower.setDescription('The value of this object controls the power used to transmit\n\tframes. Accepted values are in units of one tenths of a dBm in\n\tsteps of .5 dBm, e.g setting the value of this object to 155\n\tresults in 15.5 dBm transmit power configured on the interface.')
wlanIfaceFragmentThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 1, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(256, 2346)).clone(2346)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanIfaceFragmentThreshold.setStatus('current')
if mibBuilder.loadTexts: wlanIfaceFragmentThreshold.setDescription('The value of this object controls the threshold for which\n\ttransmitted frames are broken into fragments. Setting the value\n\tof this object to 2346 will disable transmit fragmentation.')
wlanIfaceRTSThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 1, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2346)).clone(2346)).setUnits('bytes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanIfaceRTSThreshold.setStatus('current')
if mibBuilder.loadTexts: wlanIfaceRTSThreshold.setDescription('The value of this object controls the threshold for which\n\ttransmitted frames are preceded by transmission of an RTS\n\tcontrol frame. Setting the value of this object to 2346 will\n\tdisable transmission of RTS frames.')
wlanIfaceWlanPrivacySubscribe = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 1, 3, 1, 12), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanIfaceWlanPrivacySubscribe.setStatus('current')
if mibBuilder.loadTexts: wlanIfaceWlanPrivacySubscribe.setDescription('The value of this object specifies whether Wireless Privacy\n\tSubscriber support is enabled on the interface.')
wlanIfaceBgScan = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 1, 3, 1, 13), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanIfaceBgScan.setStatus('current')
if mibBuilder.loadTexts: wlanIfaceBgScan.setDescription('The value of this object specifies whether background scanning\n\tis enabled for an interface operating in station mode.')
wlanIfaceBgScanIdle = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 1, 3, 1, 14), Integer32().clone(250)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanIfaceBgScanIdle.setStatus('current')
if mibBuilder.loadTexts: wlanIfaceBgScanIdle.setDescription('The value of this object specifies the minimum time a station must\n\tbe idle before a background scan is initiated on an interface\n\toperating in station mode.')
wlanIfaceBgScanInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 1, 3, 1, 15), Integer32().clone(300)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanIfaceBgScanInterval.setStatus('current')
if mibBuilder.loadTexts: wlanIfaceBgScanInterval.setDescription('The value of this object specifies the interval at which background\n\tscanning is attempted when operating in station mode.')
wlanIfaceBeaconMissedThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 1, 3, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(7)).setUnits('frames').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanIfaceBeaconMissedThreshold.setStatus('current')
if mibBuilder.loadTexts: wlanIfaceBeaconMissedThreshold.setDescription('The value of this object specifies the number of consecutive missed\n\tbeacons before an interface operating in station mode will attempt\n\tto search for a new access point.')
wlanIfaceDesiredBssid = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 1, 3, 1, 17), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanIfaceDesiredBssid.setStatus('current')
if mibBuilder.loadTexts: wlanIfaceDesiredBssid.setDescription('The value of this object specifies the MAC address of the desired\n\taccess point to use when an interface is operating as a station.')
wlanIfaceRoamingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 1, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("device", 1), ("auto", 2), ("manual", 3))).clone('auto')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanIfaceRoamingMode.setStatus('current')
if mibBuilder.loadTexts: wlanIfaceRoamingMode.setDescription('The value of this object specifies the desired system behavior\n\twhen the interface is operating as a station and the communication\n\twith the current access point is broken.')
wlanIfaceDot11d = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 1, 3, 1, 19), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanIfaceDot11d.setStatus('current')
if mibBuilder.loadTexts: wlanIfaceDot11d.setDescription('The value of this object specifies whether 802.11d specification\n\tsupport is enabled.')
wlanIfaceDot11h = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 1, 3, 1, 20), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanIfaceDot11h.setStatus('current')
if mibBuilder.loadTexts: wlanIfaceDot11h.setDescription('The value of this object specifies whether 802.11h support\n\tincluding spectrum management is enabled. The value is only\n\tmeaningfull for interfaces that support 802.11h specification.')
wlanIfaceDynamicWds = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 1, 3, 1, 21), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanIfaceDynamicWds.setStatus('current')
if mibBuilder.loadTexts: wlanIfaceDynamicWds.setDescription('The value of this object specifies whether Dynamic WDS (DWDS)\n\tsupport is enabled. The value is only meaningful for interfaces\n\tthat support Dynamic WDS.')
wlanIfacePowerSave = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 1, 3, 1, 22), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanIfacePowerSave.setStatus('current')
if mibBuilder.loadTexts: wlanIfacePowerSave.setDescription('The value of this object specifies whether powersave operation\n\tis enabled. The value is only meaningful for interfaces that\n\tsupport powersave operation.')
wlanIfaceApBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 1, 3, 1, 23), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanIfaceApBridge.setStatus('current')
if mibBuilder.loadTexts: wlanIfaceApBridge.setDescription('The value of this object specifies whether packets between\n\twireless clients will be passed directly by an interface\n\toperating in host ap mode. Disabling it may be useful in\n\tsituations when traffic between wireless clients needs to be\n\tprocessed with packet filtering.')
wlanIfaceBeaconInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 1, 3, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(25, 1000)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanIfaceBeaconInterval.setStatus('current')
if mibBuilder.loadTexts: wlanIfaceBeaconInterval.setDescription("The value of this object specifies the interval at with beacon\n\tframes are sent when an interface is operating in ad-hoc or ap\n\tmode. The beacon interval is specified in TU's (1024 usecs).")
wlanIfaceDtimPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 1, 3, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanIfaceDtimPeriod.setStatus('current')
if mibBuilder.loadTexts: wlanIfaceDtimPeriod.setDescription('The value of this object specifies the DTIM period at which\n\tbuffered multicast data frames are transmitted by an interface\n\toperating in host ap mode. Its value indicates the number of\n\tbeacon intervals between DTIM.')
wlanIfaceHideSsid = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 1, 3, 1, 26), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanIfaceHideSsid.setStatus('current')
if mibBuilder.loadTexts: wlanIfaceHideSsid.setDescription('The value of this object specifies whether broadcasting of the\n\tSSID in beacon frames and responding to undirected probe request\n\tframes is enabled for an interface operating in ap mode.')
wlanIfaceInactivityProccess = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 1, 3, 1, 27), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanIfaceInactivityProccess.setStatus('current')
if mibBuilder.loadTexts: wlanIfaceInactivityProccess.setDescription('The value of this object specifies whether inactivity processing\n\tfor associated station on an interface operating in ap mode is\n\tenabled.')
wlanIfaceDot11gProtMode = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 1, 3, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("cts", 2), ("rtscts", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanIfaceDot11gProtMode.setStatus('current')
if mibBuilder.loadTexts: wlanIfaceDot11gProtMode.setDescription('The value of this object specifies the technique used for\n\tprotecting OFDM frames in a mixed 11b/11g network.')
wlanIfaceDot11gPureMode = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 1, 3, 1, 29), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanIfaceDot11gPureMode.setStatus('current')
if mibBuilder.loadTexts: wlanIfaceDot11gPureMode.setDescription('The value of this object specifies whether only 802.11g-capable\n\tstations will be allowed to associate to an interface operating\n\tas access point in 802.11g mode.')
wlanIfaceDot11nPureMode = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 1, 3, 1, 30), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanIfaceDot11nPureMode.setStatus('current')
if mibBuilder.loadTexts: wlanIfaceDot11nPureMode.setDescription('The value of this object specifies whether only HT-capable\n\tstations will be allowed to associate to an interface operating\n\tas access point in 802.11n mode.')
wlanIfaceDot11nAmpdu = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 1, 3, 1, 31), WlanIfaceDot11nPduType().clone('txAndRx')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanIfaceDot11nAmpdu.setStatus('current')
if mibBuilder.loadTexts: wlanIfaceDot11nAmpdu.setDescription('The value of this object specifies whether sending and\n\treceiving of AMPDU frames is enabled on an interface\n\toperating in 802.11n mode.')
wlanIfaceDot11nAmpduDensity = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 1, 3, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(25, 25), ValueRangeConstraint(50, 50), ValueRangeConstraint(100, 100), ValueRangeConstraint(200, 200), ValueRangeConstraint(400, 400), ValueRangeConstraint(800, 800), ValueRangeConstraint(1600, 1600), ))).setUnits('1/100ths-of-microsecond').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanIfaceDot11nAmpduDensity.setStatus('current')
if mibBuilder.loadTexts: wlanIfaceDot11nAmpduDensity.setDescription('The value of this object specifies the AMPDU density parameter\n\tfor an interface operating in 802.11n mode.')
wlanIfaceDot11nAmpduLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 1, 3, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(8192, 8192), ValueRangeConstraint(16384, 16384), ValueRangeConstraint(32768, 32768), ValueRangeConstraint(65536, 65536), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanIfaceDot11nAmpduLimit.setStatus('current')
if mibBuilder.loadTexts: wlanIfaceDot11nAmpduLimit.setDescription('The value of this object specifies a limit on the AMPDU packet\n\tsize for receiving AMPDU frames for an interface operating in\n\t802.11n mode.')
wlanIfaceDot11nAmsdu = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 1, 3, 1, 34), WlanIfaceDot11nPduType().clone('rxOnly')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanIfaceDot11nAmsdu.setStatus('current')
if mibBuilder.loadTexts: wlanIfaceDot11nAmsdu.setDescription('The value of this object specifies whether sending and receiving\n\tof AMSDU frames is enabled on an interface operating in 802.11n\n\tmode.')
wlanIfaceDot11nAmsduLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 1, 3, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(3839, 3839), ValueRangeConstraint(7935, 7935), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanIfaceDot11nAmsduLimit.setStatus('current')
if mibBuilder.loadTexts: wlanIfaceDot11nAmsduLimit.setDescription('The value of this object specifies a limit on the AMSDU packet\n\tsize when sending and receiving AMSDU frames for an interface\n\toperating in 802.11n mode.')
wlanIfaceDot11nHighThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 1, 3, 1, 36), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanIfaceDot11nHighThroughput.setStatus('current')
if mibBuilder.loadTexts: wlanIfaceDot11nHighThroughput.setDescription('The value of this object specifies whether use of High Throughput\n\t(HT) is enabled for an interface operating in 802.11n mode.')
wlanIfaceDot11nHTCompatible = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 1, 3, 1, 37), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanIfaceDot11nHTCompatible.setStatus('current')
if mibBuilder.loadTexts: wlanIfaceDot11nHTCompatible.setDescription('The value of this object specifies whether use of compatibility\n\tsupport for pre-802.11n devices is enabled for an interface\n\toperating in 802.11n mode.')
wlanIfaceDot11nHTProtMode = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 1, 3, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("rts", 2))).clone('rts')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanIfaceDot11nHTProtMode.setStatus('current')
if mibBuilder.loadTexts: wlanIfaceDot11nHTProtMode.setDescription('The value of this object specifies the technique used for\n\tprotecting HT frames in a mixed legacy/HT network for interfaces\n\toperating in 802.11n mode.')
wlanIfaceDot11nRIFS = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 1, 3, 1, 39), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanIfaceDot11nRIFS.setStatus('current')
if mibBuilder.loadTexts: wlanIfaceDot11nRIFS.setDescription('The value of this object specifies whether Reduced InterFrame\n\tSpacing (RIFS) is enabled for an interface operating in 802.11n\n\tmode on an HT channel.')
wlanIfaceDot11nShortGI = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 1, 3, 1, 40), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanIfaceDot11nShortGI.setStatus('current')
if mibBuilder.loadTexts: wlanIfaceDot11nShortGI.setDescription('The value of this object specifies whether use of Short Guard\n\tInterval is enabled on an interface operating in 802.11n mode\n\ton an HT channel.')
wlanIfaceDot11nSMPSMode = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 1, 3, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("static", 2), ("dynamic", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanIfaceDot11nSMPSMode.setStatus('current')
if mibBuilder.loadTexts: wlanIfaceDot11nSMPSMode.setDescription('The value of this object specifies whether use of Spatial Multiplexing\n\tPower Save (SMPS) is enabled on an interface operating in 802.11n mode\n\tand whether SMPS mode is set to Static or Dynamic. The value is only\n\tmeaningfull for interfaces that support SMPS.')
wlanIfaceTdmaSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 1, 3, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanIfaceTdmaSlot.setStatus('current')
if mibBuilder.loadTexts: wlanIfaceTdmaSlot.setDescription('The value of this object specifies the slot configuration to use\n\twhen operating in TDMA mode.')
wlanIfaceTdmaSlotCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 1, 3, 1, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanIfaceTdmaSlotCount.setStatus('current')
if mibBuilder.loadTexts: wlanIfaceTdmaSlotCount.setDescription('The value of this object specifies the number of slots to use to\n\tsetup a BSS for an interface operating in TDMA mode.')
wlanIfaceTdmaSlotLength = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 1, 3, 1, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(150, 65000)).clone(10000)).setUnits('microseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanIfaceTdmaSlotLength.setStatus('current')
if mibBuilder.loadTexts: wlanIfaceTdmaSlotLength.setDescription('The value of this object specifies a slot length that each station\n\thas when a BSS is setup by an interface operating in TDMA mode.')
wlanIfaceTdmaBeaconInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 1, 3, 1, 45), Integer32().clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanIfaceTdmaBeaconInterval.setStatus('current')
if mibBuilder.loadTexts: wlanIfaceTdmaBeaconInterval.setDescription('The value of this object specifies the number of superframes at\n\twhich a beacon frame is sent to synchronize the TDMA slot timing\n\tfor interfaces operating in TDMA mode.')
wlanIfacePeerTable = MibTable((1, 3, 6, 1, 4, 1, 12325, 1, 210, 1, 4), )
if mibBuilder.loadTexts: wlanIfacePeerTable.setStatus('current')
if mibBuilder.loadTexts: wlanIfacePeerTable.setDescription('A table that contains information about the associated stations\n\tfor an interface operating as an access point, or the stations\n\tidentified as neighbors in the IBSS for an interface operating in\n\tadhoc mode.')
wlanIfacePeerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12325, 1, 210, 1, 4, 1), ).setIndexNames((0, "BEGEMOT-WIRELESS-MIB", "wlanIfaceName"), (0, "BEGEMOT-WIRELESS-MIB", "wlanIfacePeerAddress"))
if mibBuilder.loadTexts: wlanIfacePeerEntry.setStatus('current')
if mibBuilder.loadTexts: wlanIfacePeerEntry.setDescription('An entry that contains information for the associated stations\n\tfor an interface operating as an access point, or the neighboring\n\tstations of an interface in adhoc mode.')
wlanIfacePeerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 1, 4, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanIfacePeerAddress.setStatus('current')
if mibBuilder.loadTexts: wlanIfacePeerAddress.setDescription('The MAC address of this peer.')
wlanIfacePeerAssociationId = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 1, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanIfacePeerAssociationId.setStatus('current')
if mibBuilder.loadTexts: wlanIfacePeerAssociationId.setDescription('The ID of the associacition with this peer.')
wlanIfacePeerVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanIfacePeerVlanTag.setStatus('current')
if mibBuilder.loadTexts: wlanIfacePeerVlanTag.setDescription('The Vlan Tag for traffic to/from this peer.')
wlanIfacePeerFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 1, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanIfacePeerFrequency.setStatus('current')
if mibBuilder.loadTexts: wlanIfacePeerFrequency.setDescription('The operating frequency for the link with this peer.')
wlanIfacePeerCurrentTXRate = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 1, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanIfacePeerCurrentTXRate.setStatus('current')
if mibBuilder.loadTexts: wlanIfacePeerCurrentTXRate.setDescription('The current transmit rate for this peer.')
wlanIfacePeerRxSignalStrength = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 1, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanIfacePeerRxSignalStrength.setStatus('current')
if mibBuilder.loadTexts: wlanIfacePeerRxSignalStrength.setDescription('The average receive signal strength for this peer.')
wlanIfacePeerIdleTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 1, 4, 1, 7), Integer32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanIfacePeerIdleTimer.setStatus('current')
if mibBuilder.loadTexts: wlanIfacePeerIdleTimer.setDescription("The value of this peer's inactivity timer.")
wlanIfacePeerTxSequenceNo = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 1, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanIfacePeerTxSequenceNo.setStatus('current')
if mibBuilder.loadTexts: wlanIfacePeerTxSequenceNo.setDescription('The last sequence number transmitted to this peer.')
wlanIfacePeerRxSequenceNo = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 1, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanIfacePeerRxSequenceNo.setStatus('current')
if mibBuilder.loadTexts: wlanIfacePeerRxSequenceNo.setDescription('The last sequence number received from this peer.')
wlanIfacePeerTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 1, 4, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanIfacePeerTxPower.setStatus('current')
if mibBuilder.loadTexts: wlanIfacePeerTxPower.setDescription('The transmit power limit for this peer.')
wlanIfacePeerCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 1, 4, 1, 11), WlanPeerCapabilityFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanIfacePeerCapabilities.setStatus('current')
if mibBuilder.loadTexts: wlanIfacePeerCapabilities.setDescription('The capabilities advertised by this peer.')
wlanIfacePeerFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 1, 4, 1, 12), Bits().clone(namedValues=NamedValues(("authorizedForData", 1), ("qosEnabled", 2), ("erpEnabled", 3), ("powerSaveMode", 4), ("authRefHeld", 5), ("htEnabled", 6), ("htCompat", 7), ("wpsAssoc", 8), ("tsnAssoc", 9), ("ampduRx", 10), ("ampduTx", 11), ("mimoPowerSave", 12), ("sendRts", 13), ("rifs", 14), ("shortGiHT20", 15), ("shortGiHT40", 16), ("amsduRx", 17), ("amsduTx", 18)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanIfacePeerFlags.setStatus('current')
if mibBuilder.loadTexts: wlanIfacePeerFlags.setDescription('The peer state flags.')
wlanIfaceChannelTable = MibTable((1, 3, 6, 1, 4, 1, 12325, 1, 210, 1, 5), )
if mibBuilder.loadTexts: wlanIfaceChannelTable.setStatus('current')
if mibBuilder.loadTexts: wlanIfaceChannelTable.setDescription('A table that contains information about the active channels for\n\tthe cloned wireless interfaces in the system.')
wlanIfaceChannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12325, 1, 210, 1, 5, 1), ).setIndexNames((0, "BEGEMOT-WIRELESS-MIB", "wlanIfaceName"), (0, "BEGEMOT-WIRELESS-MIB", "wlanIfaceChannelId"))
if mibBuilder.loadTexts: wlanIfaceChannelEntry.setStatus('current')
if mibBuilder.loadTexts: wlanIfaceChannelEntry.setDescription('An entry that contains active channel information for the wireless\n\tinterface.')
wlanIfaceChannelId = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1536)))
if mibBuilder.loadTexts: wlanIfaceChannelId.setStatus('current')
if mibBuilder.loadTexts: wlanIfaceChannelId.setDescription('The index of this channel entry.')
wlanIfaceChannelIeeeId = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanIfaceChannelIeeeId.setStatus('current')
if mibBuilder.loadTexts: wlanIfaceChannelIeeeId.setDescription('The channel IEEE ID.')
wlanIfaceChannelType = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("fhss", 1), ("dot11a", 2), ("dot11b", 3), ("dot11g", 4), ("tenMHz", 5), ("fiveMHz", 6), ("turbo", 7), ("ht", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanIfaceChannelType.setStatus('current')
if mibBuilder.loadTexts: wlanIfaceChannelType.setDescription('The operating channel type for this entry.')
wlanIfaceChannelFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 1, 5, 1, 4), Bits().clone(namedValues=NamedValues(("turbo", 1), ("cck", 2), ("ofdm", 3), ("spectrum2Ghz", 4), ("spectrum5Ghz", 5), ("passiveScan", 6), ("dynamicCckOfdm", 7), ("gfsk", 8), ("spectrum900Mhz", 9), ("dot11aStaticTurbo", 10), ("halfRate", 11), ("quarterRate", 12), ("ht20", 13), ("ht40u", 14), ("ht40d", 15), ("dfs", 16), ("xmit4ms", 17), ("noAdhoc", 18), ("noHostAp", 19), ("dot11d", 20)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanIfaceChannelFlags.setStatus('current')
if mibBuilder.loadTexts: wlanIfaceChannelFlags.setDescription('The channel flags.')
wlanIfaceChannelFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 1, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanIfaceChannelFrequency.setStatus('current')
if mibBuilder.loadTexts: wlanIfaceChannelFrequency.setDescription('The channel frequency setting in MHz.')
wlanIfaceChannelMaxRegPower = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 1, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanIfaceChannelMaxRegPower.setStatus('current')
if mibBuilder.loadTexts: wlanIfaceChannelMaxRegPower.setDescription('The maximum regulatory tx power in dBm for this channel.')
wlanIfaceChannelMaxTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 1, 5, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanIfaceChannelMaxTxPower.setStatus('current')
if mibBuilder.loadTexts: wlanIfaceChannelMaxTxPower.setDescription('The maximum tx power in units of .5 dBm for this channel.')
wlanIfaceChannelMinTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 1, 5, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanIfaceChannelMinTxPower.setStatus('current')
if mibBuilder.loadTexts: wlanIfaceChannelMinTxPower.setDescription('The minimum tx power in units of .5 dBm for this channel.')
wlanIfaceChannelState = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 1, 5, 1, 9), Bits().clone(namedValues=NamedValues(("radar", 1), ("cacDone", 2), ("interferenceDetected", 3), ("radarClear", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanIfaceChannelState.setStatus('current')
if mibBuilder.loadTexts: wlanIfaceChannelState.setDescription('The channel dynamic state.')
wlanIfaceChannelHTExtension = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 1, 5, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanIfaceChannelHTExtension.setStatus('current')
if mibBuilder.loadTexts: wlanIfaceChannelHTExtension.setDescription('The HT40 extension channel number.')
wlanIfaceChannelMaxAntennaGain = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 1, 5, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanIfaceChannelMaxAntennaGain.setStatus('current')
if mibBuilder.loadTexts: wlanIfaceChannelMaxAntennaGain.setDescription('The maximum antenna gain in units of .5 dBm.')
wlanScanConfigTable = MibTable((1, 3, 6, 1, 4, 1, 12325, 1, 210, 2, 1), )
if mibBuilder.loadTexts: wlanScanConfigTable.setStatus('current')
if mibBuilder.loadTexts: wlanScanConfigTable.setDescription('A table that contains a configuration for channel scanning\n\tinitiated via SNMP.')
wlanScanConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12325, 1, 210, 2, 1, 1), ).setIndexNames((0, "BEGEMOT-WIRELESS-MIB", "wlanIfaceName"))
if mibBuilder.loadTexts: wlanScanConfigEntry.setStatus('current')
if mibBuilder.loadTexts: wlanScanConfigEntry.setDescription('Per cloned wireless interface channel scan configuration data.\n\tThe entry will be empty if no scans were initiated via SNMP.')
wlanScanFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 2, 1, 1, 1), Bits().clone(namedValues=NamedValues(("noSelection", 1), ("activeScan", 2), ("pickFirst", 3), ("backgroundScan", 4), ("once", 5), ("noBroadcast", 6), ("noAutoSequencing", 7), ("flushCashe", 8), ("chechCashe", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanScanFlags.setStatus('current')
if mibBuilder.loadTexts: wlanScanFlags.setDescription('Desired flags for the channel scan.')
wlanScanDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanScanDuration.setStatus('current')
if mibBuilder.loadTexts: wlanScanDuration.setDescription('The desired duration of the scan. Setting the value of this object\n\tto the highest allowed value will initiate an infinite scan.')
wlanScanMinChannelDwellTime = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 2, 1, 1, 3), Integer32()).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanScanMinChannelDwellTime.setStatus('current')
if mibBuilder.loadTexts: wlanScanMinChannelDwellTime.setDescription('The minimum channel dwelltime for this scan.')
wlanScanMaxChannelDwellTime = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 2, 1, 1, 4), Integer32()).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanScanMaxChannelDwellTime.setStatus('current')
if mibBuilder.loadTexts: wlanScanMaxChannelDwellTime.setDescription('The maximum channel dwelltime for this scan.')
wlanScanConfigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 0), ("notStarted", 1), ("running", 2), ("finished", 3), ("cancel", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanScanConfigStatus.setStatus('current')
if mibBuilder.loadTexts: wlanScanConfigStatus.setDescription('This object is used to initiate or cancel channel scanning on the cloned\n\tinterface via SNMP. Setting its value to running(2) will initiate channel\n\tscanning on the cloned interface, while setting the value to cancel will\n\tcancel the current ongoing scan. All other values should be returned in\n\tGET operations only.')
wlanScanResultsTable = MibTable((1, 3, 6, 1, 4, 1, 12325, 1, 210, 2, 2), )
if mibBuilder.loadTexts: wlanScanResultsTable.setStatus('current')
if mibBuilder.loadTexts: wlanScanResultsTable.setDescription('A table that contains scan results for a virtual wireless interface.')
wlanScanResultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12325, 1, 210, 2, 2, 1), ).setIndexNames((0, "BEGEMOT-WIRELESS-MIB", "wlanIfaceName"), (0, "BEGEMOT-WIRELESS-MIB", "wlanScanResultID"), (0, "BEGEMOT-WIRELESS-MIB", "wlanScanResultBssid"))
if mibBuilder.loadTexts: wlanScanResultsEntry.setStatus('current')
if mibBuilder.loadTexts: wlanScanResultsEntry.setDescription('Per virtual wireless interface channel scan results data.')
wlanScanResultID = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 2, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanScanResultID.setStatus('current')
if mibBuilder.loadTexts: wlanScanResultID.setDescription('The SSID/MESH ID for this scan result entry.')
wlanScanResultBssid = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 2, 2, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanScanResultBssid.setStatus('current')
if mibBuilder.loadTexts: wlanScanResultBssid.setDescription('The BSSID for this scan result entry.')
wlanScanResultChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanScanResultChannel.setStatus('current')
if mibBuilder.loadTexts: wlanScanResultChannel.setDescription('The operating channel for this scan result entry.')
wlanScanResultRate = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanScanResultRate.setStatus('current')
if mibBuilder.loadTexts: wlanScanResultRate.setDescription('The operating rate of this scan result entry.')
wlanScanResultNoise = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 2, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanScanResultNoise.setStatus('current')
if mibBuilder.loadTexts: wlanScanResultNoise.setDescription('The channel noise for this scan result entry.')
wlanScanResultBeaconInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 2, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanScanResultBeaconInterval.setStatus('current')
if mibBuilder.loadTexts: wlanScanResultBeaconInterval.setDescription('The beacon interval reported for this scan result entry.')
wlanScanResultCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 2, 2, 1, 7), WlanPeerCapabilityFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanScanResultCapabilities.setStatus('current')
if mibBuilder.loadTexts: wlanScanResultCapabilities.setDescription('The capabilities advertised for this scan result entry.')
wlanIfRoamParamsTable = MibTable((1, 3, 6, 1, 4, 1, 12325, 1, 210, 1, 6), )
if mibBuilder.loadTexts: wlanIfRoamParamsTable.setStatus('current')
if mibBuilder.loadTexts: wlanIfRoamParamsTable.setDescription('A table that contains the parameters that govern the roaming\n\toperation on a wireless interface.')
wlanIfRoamParamsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12325, 1, 210, 1, 6, 1), ).setIndexNames((0, "BEGEMOT-WIRELESS-MIB", "wlanIfaceName"), (0, "BEGEMOT-WIRELESS-MIB", "wlanIfRoamPhyMode"))
if mibBuilder.loadTexts: wlanIfRoamParamsEntry.setStatus('current')
if mibBuilder.loadTexts: wlanIfRoamParamsEntry.setDescription('An entry that contains the roaming parameters of a wireless\n\tinterface.')
wlanIfRoamPhyMode = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 1, 6, 1, 1), WlanIfPhyMode())
if mibBuilder.loadTexts: wlanIfRoamPhyMode.setStatus('current')
if mibBuilder.loadTexts: wlanIfRoamPhyMode.setDescription('The PHY mode for this roaming parameters entry.')
wlanIfRoamRxSignalStrength = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 1, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanIfRoamRxSignalStrength.setStatus('current')
if mibBuilder.loadTexts: wlanIfRoamRxSignalStrength.setDescription('The Receive Signal Strength for this roaming parameters entry.')
wlanIfRoamTxRateThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 1, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanIfRoamTxRateThreshold.setStatus('current')
if mibBuilder.loadTexts: wlanIfRoamTxRateThreshold.setDescription('The transmit rate threshold value for this roaming parameters\n\t entry in Mb/s or MCS.')
wlanIfTxParamsTable = MibTable((1, 3, 6, 1, 4, 1, 12325, 1, 210, 1, 7), )
if mibBuilder.loadTexts: wlanIfTxParamsTable.setStatus('current')
if mibBuilder.loadTexts: wlanIfTxParamsTable.setDescription('A table that contains the parameters that govern the transmit\n\toperation on a wireless interface.')
wlanIfTxParamsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12325, 1, 210, 1, 7, 1), ).setIndexNames((0, "BEGEMOT-WIRELESS-MIB", "wlanIfaceName"), (0, "BEGEMOT-WIRELESS-MIB", "wlanIfTxPhyMode"))
if mibBuilder.loadTexts: wlanIfTxParamsEntry.setStatus('current')
if mibBuilder.loadTexts: wlanIfTxParamsEntry.setDescription('An entry that contains the transmit parameters of a wireless\n\tinterface.')
wlanIfTxPhyMode = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 1, 7, 1, 1), WlanIfPhyMode())
if mibBuilder.loadTexts: wlanIfTxPhyMode.setStatus('current')
if mibBuilder.loadTexts: wlanIfTxPhyMode.setDescription('The PHY mode for this entry.')
wlanIfTxUnicastRate = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 1, 7, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanIfTxUnicastRate.setStatus('current')
if mibBuilder.loadTexts: wlanIfTxUnicastRate.setDescription('The value of this object specifies a fixed rate for transmitting\n\tunicast frames in this phy mode.')
wlanIfTxMcastRate = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 1, 7, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanIfTxMcastRate.setStatus('current')
if mibBuilder.loadTexts: wlanIfTxMcastRate.setDescription('The value of this object specifies a fixed rate for transmitting\n\tbroadcast and multicast frames in this phy mode.')
wlanIfTxMgmtRate = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 1, 7, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanIfTxMgmtRate.setStatus('current')
if mibBuilder.loadTexts: wlanIfTxMgmtRate.setDescription('The value of this object specifies a fixed rate for transmitting\n\tmanagement and/or control frames in this phy mode.')
wlanIfTxMaxRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 1, 7, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanIfTxMaxRetryCount.setStatus('current')
if mibBuilder.loadTexts: wlanIfTxMaxRetryCount.setDescription('The maximum number of tries to use when sending unicast frames\n\tin this phy mode.')
wlanIfaceStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 12325, 1, 210, 3, 1), )
if mibBuilder.loadTexts: wlanIfaceStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: wlanIfaceStatisticsTable.setDescription('A table that contains summary statistics for each virtual wireless\n\tinterface on the managed device.')
wlanIfaceStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12325, 1, 210, 3, 1, 1), )
wlanInterfaceEntry.registerAugmentions(("BEGEMOT-WIRELESS-MIB", "wlanIfaceStatisticsEntry"))
wlanIfaceStatisticsEntry.setIndexNames(*wlanInterfaceEntry.getIndexNames())
if mibBuilder.loadTexts: wlanIfaceStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: wlanIfaceStatisticsEntry.setDescription('A list of statistics for each virtual wireless interface.')
wlanStatsRxBadVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 3, 1, 1, 1), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatsRxBadVersion.setStatus('current')
if mibBuilder.loadTexts: wlanStatsRxBadVersion.setDescription('The number of frames received by this interface that had bad version.')
wlanStatsRxTooShort = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 3, 1, 1, 2), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatsRxTooShort.setStatus('current')
if mibBuilder.loadTexts: wlanStatsRxTooShort.setDescription('The number of frames received by this interface that were too short.')
wlanStatsRxWrongBssid = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 3, 1, 1, 3), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatsRxWrongBssid.setStatus('current')
if mibBuilder.loadTexts: wlanStatsRxWrongBssid.setDescription('The number of frames received by this interface with wrong BSSID.')
wlanStatsRxDiscardedDups = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 3, 1, 1, 4), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatsRxDiscardedDups.setStatus('current')
if mibBuilder.loadTexts: wlanStatsRxDiscardedDups.setDescription('The number of received discarded duplicate frames by this interface.')
wlanStatsRxWrongDir = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 3, 1, 1, 5), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatsRxWrongDir.setStatus('current')
if mibBuilder.loadTexts: wlanStatsRxWrongDir.setDescription('The number of received frames by this interface that were dropped\n\tdue to wrong direction.')
wlanStatsRxDiscardMcastEcho = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 3, 1, 1, 6), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatsRxDiscardMcastEcho.setStatus('current')
if mibBuilder.loadTexts: wlanStatsRxDiscardMcastEcho.setDescription('The number of received multicast echo frames discarded by this\n\tinterface.')
wlanStatsRxDiscardNoAssoc = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 3, 1, 1, 7), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatsRxDiscardNoAssoc.setStatus('current')
if mibBuilder.loadTexts: wlanStatsRxDiscardNoAssoc.setDescription('The number of frames received by this interface that were dropped\n\tsince no association existed with the sending station.')
wlanStatsRxWepNoPrivacy = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 3, 1, 1, 8), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatsRxWepNoPrivacy.setStatus('current')
if mibBuilder.loadTexts: wlanStatsRxWepNoPrivacy.setDescription('The number of frames received by this interface that were dropped\n\tsince they contained WEP information and WEP privacy was off.')
wlanStatsRxWepUnencrypted = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 3, 1, 1, 9), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatsRxWepUnencrypted.setStatus('current')
if mibBuilder.loadTexts: wlanStatsRxWepUnencrypted.setDescription('The number of frames received by this interface that were dropped\n\tsince they contained no WEP information and WEP privacy was on.')
wlanStatsRxWepFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 3, 1, 1, 10), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatsRxWepFailed.setStatus('current')
if mibBuilder.loadTexts: wlanStatsRxWepFailed.setDescription('The number of frames received by this interface that were dropped\n\tsince processing of the WEP information contained in them failed.')
wlanStatsRxDecapsulationFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 3, 1, 1, 11), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatsRxDecapsulationFailed.setStatus('current')
if mibBuilder.loadTexts: wlanStatsRxDecapsulationFailed.setDescription('The number of received frames that were discarded by this interface\n\tdue to decapsulation failure.')
wlanStatsRxDiscardMgmt = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 3, 1, 1, 12), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatsRxDiscardMgmt.setStatus('current')
if mibBuilder.loadTexts: wlanStatsRxDiscardMgmt.setDescription('The number of received management frames discarded by this interface.')
wlanStatsRxControl = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 3, 1, 1, 13), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatsRxControl.setStatus('current')
if mibBuilder.loadTexts: wlanStatsRxControl.setDescription('The number of control frames received by this interface.')
wlanStatsRxBeacon = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 3, 1, 1, 14), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatsRxBeacon.setStatus('current')
if mibBuilder.loadTexts: wlanStatsRxBeacon.setDescription('The number of beacon frames received by this interface.')
wlanStatsRxRateSetTooBig = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 3, 1, 1, 15), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatsRxRateSetTooBig.setStatus('current')
if mibBuilder.loadTexts: wlanStatsRxRateSetTooBig.setDescription('The number of frames received by this interface with extended\n\tsupported rate element.')
wlanStatsRxElemMissing = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 3, 1, 1, 16), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatsRxElemMissing.setStatus('current')
if mibBuilder.loadTexts: wlanStatsRxElemMissing.setDescription('The number of frames received by this interface that were missing\n\ta required element.')
wlanStatsRxElemTooBig = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 3, 1, 1, 17), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatsRxElemTooBig.setStatus('current')
if mibBuilder.loadTexts: wlanStatsRxElemTooBig.setDescription('The number of frames received by this interface that contained an\n\tinformation element whose size was too big.')
wlanStatsRxElemTooSmall = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 3, 1, 1, 18), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatsRxElemTooSmall.setStatus('current')
if mibBuilder.loadTexts: wlanStatsRxElemTooSmall.setDescription('The number of frames received by this interface that contained an\n\tinformation element whose size was too small.')
wlanStatsRxElemUnknown = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 3, 1, 1, 19), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatsRxElemUnknown.setStatus('current')
if mibBuilder.loadTexts: wlanStatsRxElemUnknown.setDescription('The number of frames received by this interface that contained an\n\tunknown information element.')
wlanStatsRxChannelMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 3, 1, 1, 20), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatsRxChannelMismatch.setStatus('current')
if mibBuilder.loadTexts: wlanStatsRxChannelMismatch.setDescription('The number of frames received by this interface, that were discarded\n\tsince they were received on a channel different from the one indicated\n\tin the DS params element id.')
wlanStatsRxDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 3, 1, 1, 21), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatsRxDropped.setStatus('current')
if mibBuilder.loadTexts: wlanStatsRxDropped.setDescription('The number of frames received by this interface that were dropped due\n\tto unknown reason.')
wlanStatsRxSsidMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 3, 1, 1, 22), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatsRxSsidMismatch.setStatus('current')
if mibBuilder.loadTexts: wlanStatsRxSsidMismatch.setDescription('The number of frames received by this interface that had a bad SSID.')
wlanStatsRxAuthNotSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 3, 1, 1, 23), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatsRxAuthNotSupported.setStatus('current')
if mibBuilder.loadTexts: wlanStatsRxAuthNotSupported.setDescription('The number of frames received by this interface that contained an\n\tunknown authentication algorithm.')
wlanStatsRxAuthFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 3, 1, 1, 24), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatsRxAuthFailed.setStatus('current')
if mibBuilder.loadTexts: wlanStatsRxAuthFailed.setDescription('The number of frames received by this interface for which the\n\tauthentication failed.')
wlanStatsRxAuthCM = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 3, 1, 1, 25), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatsRxAuthCM.setStatus('current')
if mibBuilder.loadTexts: wlanStatsRxAuthCM.setDescription('The number of frames received by this interface for which the\n\tauthentication failed due to TKIP countermeasures enabled.')
wlanStatsRxAssocWrongBssid = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 3, 1, 1, 26), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatsRxAssocWrongBssid.setStatus('current')
if mibBuilder.loadTexts: wlanStatsRxAssocWrongBssid.setDescription('The number of frames received by this interface with association\n\trequest that had a bad BSSID.')
wlanStatsRxAssocNoAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 3, 1, 1, 27), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatsRxAssocNoAuth.setStatus('current')
if mibBuilder.loadTexts: wlanStatsRxAssocNoAuth.setDescription('The number of frames received by this interface with association\n\trequest that came from unauthentication node.')
wlanStatsRxAssocCapMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 3, 1, 1, 28), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatsRxAssocCapMismatch.setStatus('current')
if mibBuilder.loadTexts: wlanStatsRxAssocCapMismatch.setDescription('The number of frames received by this interface with association\n\trequest that had bad capabilities set.')
wlanStatsRxAssocNoRateMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 3, 1, 1, 29), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatsRxAssocNoRateMatch.setStatus('current')
if mibBuilder.loadTexts: wlanStatsRxAssocNoRateMatch.setDescription('The number of frames received by this interface with association\n\trequest that had unsupported rate set.')
wlanStatsRxBadWpaIE = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 3, 1, 1, 30), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatsRxBadWpaIE.setStatus('current')
if mibBuilder.loadTexts: wlanStatsRxBadWpaIE.setDescription('The number of frames received by this interface with association\n\trequest that had no or invalid WPA information element.')
wlanStatsRxDeauthenticate = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 3, 1, 1, 31), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatsRxDeauthenticate.setStatus('current')
if mibBuilder.loadTexts: wlanStatsRxDeauthenticate.setDescription('The number of deauthentication requests received by this interface.')
wlanStatsRxDisassociate = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 3, 1, 1, 32), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatsRxDisassociate.setStatus('current')
if mibBuilder.loadTexts: wlanStatsRxDisassociate.setDescription('The number of deassociation requests received by this interface.')
wlanStatsRxUnknownSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 3, 1, 1, 33), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatsRxUnknownSubtype.setStatus('current')
if mibBuilder.loadTexts: wlanStatsRxUnknownSubtype.setDescription('The number of frames received by this interface that had unknown\n\tsubtype.')
wlanStatsRxFailedNoBuf = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 3, 1, 1, 34), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatsRxFailedNoBuf.setStatus('current')
if mibBuilder.loadTexts: wlanStatsRxFailedNoBuf.setDescription('The number of frames received by this interface that were dropped\n\tdue to lack of free buffers.')
wlanStatsRxBadAuthRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 3, 1, 1, 35), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatsRxBadAuthRequest.setStatus('current')
if mibBuilder.loadTexts: wlanStatsRxBadAuthRequest.setDescription('The number of frames received by this interface for which\n\tauthentication failed.')
wlanStatsRxUnAuthorized = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 3, 1, 1, 36), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatsRxUnAuthorized.setStatus('current')
if mibBuilder.loadTexts: wlanStatsRxUnAuthorized.setDescription('The number of non-PAE frames received by this interface prior to\n\tauthorization.')
wlanStatsRxBadKeyId = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 3, 1, 1, 37), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatsRxBadKeyId.setStatus('current')
if mibBuilder.loadTexts: wlanStatsRxBadKeyId.setDescription('The number of frames received by this interface with bad key.')
wlanStatsRxCCMPSeqViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 3, 1, 1, 38), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatsRxCCMPSeqViolation.setStatus('current')
if mibBuilder.loadTexts: wlanStatsRxCCMPSeqViolation.setDescription('The number of frames received by this interface that caused CCMP\n\tsequence violation.')
wlanStatsRxCCMPBadFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 3, 1, 1, 39), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatsRxCCMPBadFormat.setStatus('current')
if mibBuilder.loadTexts: wlanStatsRxCCMPBadFormat.setDescription('The number of frames received by this interface that had bad CCMP\n\tformat.')
wlanStatsRxCCMPFailedMIC = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 3, 1, 1, 40), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatsRxCCMPFailedMIC.setStatus('current')
if mibBuilder.loadTexts: wlanStatsRxCCMPFailedMIC.setDescription('The number of frames receivbed by this interface for which CCMP\n\tdecryption failed due to MIC mismatch.')
wlanStatsRxTKIPSeqViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 3, 1, 1, 41), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatsRxTKIPSeqViolation.setStatus('current')
if mibBuilder.loadTexts: wlanStatsRxTKIPSeqViolation.setDescription('The number of frames received by this interface that caused TKIP\n\tsequence violation..')
wlanStatsRxTKIPBadFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 3, 1, 1, 42), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatsRxTKIPBadFormat.setStatus('current')
if mibBuilder.loadTexts: wlanStatsRxTKIPBadFormat.setDescription('The number of frames received by this interface that were missing\n\tTKIP ExtIV.')
wlanStatsRxTKIPFailedMIC = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 3, 1, 1, 43), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatsRxTKIPFailedMIC.setStatus('current')
if mibBuilder.loadTexts: wlanStatsRxTKIPFailedMIC.setDescription('The number of frames received by this interface for which TKIP\n\tdecryption failed due to MIC mismatch.')
wlanStatsRxTKIPFailedICV = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 3, 1, 1, 44), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatsRxTKIPFailedICV.setStatus('current')
if mibBuilder.loadTexts: wlanStatsRxTKIPFailedICV.setDescription('The number of frames received by this interface for which TKIP\n\tdecryption failed due to ICV mismatch.')
wlanStatsRxDiscardACL = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 3, 1, 1, 45), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatsRxDiscardACL.setStatus('current')
if mibBuilder.loadTexts: wlanStatsRxDiscardACL.setDescription('The number of frames received by this interface that were\n\tdisallowed by ACL.')
wlanStatsTxFailedNoBuf = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 3, 1, 1, 46), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatsTxFailedNoBuf.setStatus('current')
if mibBuilder.loadTexts: wlanStatsTxFailedNoBuf.setDescription('The number of frames that were not transmitted by this interface\n\tdue to lack of free buffers.')
wlanStatsTxFailedNoNode = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 3, 1, 1, 47), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatsTxFailedNoNode.setStatus('current')
if mibBuilder.loadTexts: wlanStatsTxFailedNoNode.setDescription('The number of frames that were queued for transmit on this interface\n\tbut were not sent since appropriate node for sending was not found.')
wlanStatsTxUnknownMgmt = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 3, 1, 1, 48), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatsTxUnknownMgmt.setStatus('current')
if mibBuilder.loadTexts: wlanStatsTxUnknownMgmt.setDescription('The number of unknown management frames transmitted by this interface.')
wlanStatsTxBadCipher = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 3, 1, 1, 49), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatsTxBadCipher.setStatus('current')
if mibBuilder.loadTexts: wlanStatsTxBadCipher.setDescription('The number of frames that were queued for transmit on this interface\n\tbut were not send since the specified key was not setup.')
wlanStatsTxNoDefKey = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 3, 1, 1, 50), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatsTxNoDefKey.setStatus('current')
if mibBuilder.loadTexts: wlanStatsTxNoDefKey.setDescription('The number of frames that were queued for transmit on this interface\n\tbut were not send since an appropriate key was not found.')
wlanStatsTxFragmented = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 3, 1, 1, 51), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatsTxFragmented.setStatus('current')
if mibBuilder.loadTexts: wlanStatsTxFragmented.setDescription('The number of fragmented frames transmitted by this interface.')
wlanStatsTxFragmentsCreated = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 3, 1, 1, 52), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatsTxFragmentsCreated.setStatus('current')
if mibBuilder.loadTexts: wlanStatsTxFragmentsCreated.setDescription('The number of created fragments transmitted by this interface.')
wlanStatsActiveScans = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 3, 1, 1, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatsActiveScans.setStatus('current')
if mibBuilder.loadTexts: wlanStatsActiveScans.setDescription('The number of active scans performed by this interface.')
wlanStatsPassiveScans = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 3, 1, 1, 54), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatsPassiveScans.setStatus('current')
if mibBuilder.loadTexts: wlanStatsPassiveScans.setDescription('The number of passive scans performed by this interface.')
wlanStatsTimeoutInactivity = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 3, 1, 1, 55), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatsTimeoutInactivity.setStatus('current')
if mibBuilder.loadTexts: wlanStatsTimeoutInactivity.setDescription('The number of times a station/node was dropped by this interface\n\tdue to inactivity timeout.')
wlanStatsCryptoNoMem = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 3, 1, 1, 56), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatsCryptoNoMem.setStatus('current')
if mibBuilder.loadTexts: wlanStatsCryptoNoMem.setDescription('The number times attaching a crypto protocol to this interface\n\tfailed due to lack of memory.')
wlanStatsSwCryptoTKIP = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 3, 1, 1, 57), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatsSwCryptoTKIP.setStatus('current')
if mibBuilder.loadTexts: wlanStatsSwCryptoTKIP.setDescription('The number of times TKIP encryption/decryption was handled in\n\t software for frames received/transmitted by this interface.')
wlanStatsSwCryptoTKIPEnMIC = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 3, 1, 1, 58), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatsSwCryptoTKIPEnMIC.setStatus('current')
if mibBuilder.loadTexts: wlanStatsSwCryptoTKIPEnMIC.setDescription('The number of times TKIP MIC was added in software to frames\n\ttransmitted by this interface.')
wlanStatsSwCryptoTKIPDeMIC = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 3, 1, 1, 59), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatsSwCryptoTKIPDeMIC.setStatus('current')
if mibBuilder.loadTexts: wlanStatsSwCryptoTKIPDeMIC.setDescription('The number of times TKIP MIC was stripped in software from frames\n\treceived by this interface.')
wlanStatsCryptoTKIPCM = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 3, 1, 1, 60), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatsCryptoTKIPCM.setStatus('current')
if mibBuilder.loadTexts: wlanStatsCryptoTKIPCM.setDescription('The number of frames discarded by this interface due to TKIP\n\tcounter measures.')
wlanStatsSwCryptoCCMP = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 3, 1, 1, 61), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatsSwCryptoCCMP.setStatus('current')
if mibBuilder.loadTexts: wlanStatsSwCryptoCCMP.setDescription('The number of times CCMP encryption/decryption was handled in\n\t software for frames received/transmitted by this interface.')
wlanStatsSwCryptoWEP = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 3, 1, 1, 62), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatsSwCryptoWEP.setStatus('current')
if mibBuilder.loadTexts: wlanStatsSwCryptoWEP.setDescription('The number of times WEP encryption/decryption was handled in\n\t software for frames received/transmitted by this interface.')
wlanStatsCryptoCipherKeyRejected = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 3, 1, 1, 63), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatsCryptoCipherKeyRejected.setStatus('current')
if mibBuilder.loadTexts: wlanStatsCryptoCipherKeyRejected.setDescription('The number of times a key was rejected for this interface.')
wlanStatsCryptoNoKey = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 3, 1, 1, 64), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatsCryptoNoKey.setStatus('current')
if mibBuilder.loadTexts: wlanStatsCryptoNoKey.setDescription('The number of times key setup for this interface failed.')
wlanStatsCryptoDeleteKeyFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 3, 1, 1, 65), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatsCryptoDeleteKeyFailed.setStatus('current')
if mibBuilder.loadTexts: wlanStatsCryptoDeleteKeyFailed.setDescription('The number of times key deletion from driver for this interface\n\tfailed.')
wlanStatsCryptoUnknownCipher = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 3, 1, 1, 66), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatsCryptoUnknownCipher.setStatus('current')
if mibBuilder.loadTexts: wlanStatsCryptoUnknownCipher.setDescription('The number of times key setup for this interface failed due to\n\tinvalid cipher.')
wlanStatsCryptoAttachFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 3, 1, 1, 67), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatsCryptoAttachFailed.setStatus('current')
if mibBuilder.loadTexts: wlanStatsCryptoAttachFailed.setDescription('The number of times attaching a cipher for this interface failed.')
wlanStatsCryptoKeyFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 3, 1, 1, 68), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatsCryptoKeyFailed.setStatus('current')
if mibBuilder.loadTexts: wlanStatsCryptoKeyFailed.setDescription('The number of times setting a cipher in the driver for this\n\tinterface failed.')
wlanStatsCryptoEnMICFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 3, 1, 1, 69), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatsCryptoEnMICFailed.setStatus('current')
if mibBuilder.loadTexts: wlanStatsCryptoEnMICFailed.setDescription('The number of frames that were discarded by by this interface\n\tdue to failed enmic.')
wlanStatsIBSSCapMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 3, 1, 1, 70), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatsIBSSCapMismatch.setStatus('current')
if mibBuilder.loadTexts: wlanStatsIBSSCapMismatch.setDescription('The number of times a BSSID change failed for an interface operating\n\tin ad hoc mode due to capabilities mismatch.')
wlanStatsUnassocStaPSPoll = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 3, 1, 1, 71), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatsUnassocStaPSPoll.setStatus('current')
if mibBuilder.loadTexts: wlanStatsUnassocStaPSPoll.setDescription('The number of ps-poll frames from unassociated station received\n\tby this interface.')
wlanStatsBadAidPSPoll = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 3, 1, 1, 72), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatsBadAidPSPoll.setStatus('current')
if mibBuilder.loadTexts: wlanStatsBadAidPSPoll.setDescription('The number of ps-poll frames with incorrect aid received by this\n\tinterface.')
wlanStatsEmptyPSPoll = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 3, 1, 1, 73), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatsEmptyPSPoll.setStatus('current')
if mibBuilder.loadTexts: wlanStatsEmptyPSPoll.setDescription('The number of empty ps-poll frames received by this interface.')
wlanStatsRxFFBadHdr = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 3, 1, 1, 74), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatsRxFFBadHdr.setStatus('current')
if mibBuilder.loadTexts: wlanStatsRxFFBadHdr.setDescription('The number of fast frames with bad header received by this interface.')
wlanStatsRxFFTooShort = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 3, 1, 1, 75), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatsRxFFTooShort.setStatus('current')
if mibBuilder.loadTexts: wlanStatsRxFFTooShort.setDescription('The number of fast frames received by this interface, for which\n\tdecapsulation failed.')
wlanStatsRxFFSplitError = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 3, 1, 1, 76), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatsRxFFSplitError.setStatus('current')
if mibBuilder.loadTexts: wlanStatsRxFFSplitError.setDescription('The number of fast frames received by this interface, for which\n\tdecapsulation failed during split.')
wlanStatsRxFFDecap = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 3, 1, 1, 77), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatsRxFFDecap.setStatus('current')
if mibBuilder.loadTexts: wlanStatsRxFFDecap.setDescription('The number of fast frames received by this interface, that were\n\tsuccessfully  decapsulated.')
wlanStatsTxFFEncap = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 3, 1, 1, 78), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatsTxFFEncap.setStatus('current')
if mibBuilder.loadTexts: wlanStatsTxFFEncap.setDescription('The number of encapsulated fast frames transmitted by this interface.')
wlanStatsRxBadBintval = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 3, 1, 1, 79), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatsRxBadBintval.setStatus('current')
if mibBuilder.loadTexts: wlanStatsRxBadBintval.setDescription('The number of frames with bogus beacon interval received by this\n\tinterface.')
wlanStatsRxDemicFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 3, 1, 1, 80), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatsRxDemicFailed.setStatus('current')
if mibBuilder.loadTexts: wlanStatsRxDemicFailed.setDescription('The number of frames received by this interface for which\n\tstripping of the MIC failed.')
wlanStatsRxDefragFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 3, 1, 1, 81), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatsRxDefragFailed.setStatus('current')
if mibBuilder.loadTexts: wlanStatsRxDefragFailed.setDescription('The number of frames received by this interface for which\n\tdefragmentation failed.')
wlanStatsRxMgmt = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 3, 1, 1, 82), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatsRxMgmt.setStatus('current')
if mibBuilder.loadTexts: wlanStatsRxMgmt.setDescription('The number of management frames received by this interface.')
wlanStatsRxActionMgmt = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 3, 1, 1, 83), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatsRxActionMgmt.setStatus('current')
if mibBuilder.loadTexts: wlanStatsRxActionMgmt.setDescription('The number of action management frames received by this interface.')
wlanStatsRxAMSDUTooShort = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 3, 1, 1, 84), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatsRxAMSDUTooShort.setStatus('current')
if mibBuilder.loadTexts: wlanStatsRxAMSDUTooShort.setDescription('The number of A-MSDU frames received by this interface for which\n\tdecapsulaiton failed.')
wlanStatsRxAMSDUSplitError = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 3, 1, 1, 85), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatsRxAMSDUSplitError.setStatus('current')
if mibBuilder.loadTexts: wlanStatsRxAMSDUSplitError.setDescription('The number of A-MSDU frames received by this interface for which\n\tsplit failed.')
wlanStatsRxAMSDUDecap = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 3, 1, 1, 86), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatsRxAMSDUDecap.setStatus('current')
if mibBuilder.loadTexts: wlanStatsRxAMSDUDecap.setDescription('The number of A-MSDU frames received by this interface which\n\twere successfully decapsulaited.')
wlanStatsTxAMSDUEncap = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 3, 1, 1, 87), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatsTxAMSDUEncap.setStatus('current')
if mibBuilder.loadTexts: wlanStatsTxAMSDUEncap.setDescription('The number of encapsulated  A-MSDU frames transmitted by this\n\tinterface.')
wlanStatsAMPDUBadBAR = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 3, 1, 1, 88), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatsAMPDUBadBAR.setStatus('current')
if mibBuilder.loadTexts: wlanStatsAMPDUBadBAR.setDescription('The number of A-MPDU  frames that were dropped by this interface\n\tsource BAR frame processing was disabled.')
wlanStatsAMPDUOowBar = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 3, 1, 1, 89), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatsAMPDUOowBar.setStatus('current')
if mibBuilder.loadTexts: wlanStatsAMPDUOowBar.setDescription('The number of A-MPDU BAR before ADDBA frames received by this\n\tinterface.')
wlanStatsAMPDUMovedBAR = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 3, 1, 1, 90), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatsAMPDUMovedBAR.setStatus('current')
if mibBuilder.loadTexts: wlanStatsAMPDUMovedBAR.setDescription('The number of times a BAR moved window occurred.')
wlanStatsAMPDURxBAR = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 3, 1, 1, 91), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatsAMPDURxBAR.setStatus('current')
if mibBuilder.loadTexts: wlanStatsAMPDURxBAR.setDescription('The number of A-MPDU BAR frames received by this interface.')
wlanStatsAMPDURxOor = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 3, 1, 1, 92), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatsAMPDURxOor.setStatus('current')
if mibBuilder.loadTexts: wlanStatsAMPDURxOor.setDescription('The number of out-of-order A-MPDU frames by received this interface.')
wlanStatsAMPDURxCopied = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 3, 1, 1, 93), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatsAMPDURxCopied.setStatus('current')
if mibBuilder.loadTexts: wlanStatsAMPDURxCopied.setDescription('The number of A-MPDU frames by copied down this interface.')
wlanStatsAMPDURxDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 3, 1, 1, 94), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatsAMPDURxDropped.setStatus('current')
if mibBuilder.loadTexts: wlanStatsAMPDURxDropped.setDescription('The number of A-MPDU frames by dropped this interface.')
wlanStatsTxDiscardBadState = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 3, 1, 1, 95), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatsTxDiscardBadState.setStatus('current')
if mibBuilder.loadTexts: wlanStatsTxDiscardBadState.setDescription('The number of frames queued for transmit on this interface that\n\twere discarded due to interface state not ready for transmit.')
wlanStatsTxFailedNoAssoc = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 3, 1, 1, 96), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatsTxFailedNoAssoc.setStatus('current')
if mibBuilder.loadTexts: wlanStatsTxFailedNoAssoc.setDescription('The number of frames queued for transmit on this interface that\n\twere discarded since the receiving station was not associated.')
wlanStatsTxClassifyFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 3, 1, 1, 97), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatsTxClassifyFailed.setStatus('current')
if mibBuilder.loadTexts: wlanStatsTxClassifyFailed.setDescription('The number of frames queued for transmit on this interface that\n\twere discarded since their priority was not determined.')
wlanStatsDwdsMcastDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 3, 1, 1, 98), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatsDwdsMcastDiscard.setStatus('current')
if mibBuilder.loadTexts: wlanStatsDwdsMcastDiscard.setDescription('The number of multicast over DWDS frames discarded by this interface.')
wlanStatsHTAssocRejectNoHT = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 3, 1, 1, 99), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatsHTAssocRejectNoHT.setStatus('current')
if mibBuilder.loadTexts: wlanStatsHTAssocRejectNoHT.setDescription('The number of management frames received from a non-HT stations\n\tthat were rejected by this interface.')
wlanStatsHTAssocDowngrade = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 3, 1, 1, 100), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatsHTAssocDowngrade.setStatus('current')
if mibBuilder.loadTexts: wlanStatsHTAssocDowngrade.setDescription('The number of times HT was disallowed for an association on\n\tthis interface due to WEP or TKIP requested.')
wlanStatsHTAssocRateMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 3, 1, 1, 101), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatsHTAssocRateMismatch.setStatus('current')
if mibBuilder.loadTexts: wlanStatsHTAssocRateMismatch.setDescription('The number of times rate mismatch occurred during HT rate set\n\thandling on this interface.')
wlanStatsAMPDURxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 3, 1, 1, 102), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatsAMPDURxAge.setStatus('current')
if mibBuilder.loadTexts: wlanStatsAMPDURxAge.setDescription('The number of A-MPDU frames sent by this interface due to aging out.')
wlanStatsAMPDUMoved = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 3, 1, 1, 103), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatsAMPDUMoved.setStatus('current')
if mibBuilder.loadTexts: wlanStatsAMPDUMoved.setDescription('The number of time A-MPDU MSDU moved window occurred for this\n\tinterface.')
wlanStatsADDBADisabledReject = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 3, 1, 1, 104), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatsADDBADisabledReject.setStatus('current')
if mibBuilder.loadTexts: wlanStatsADDBADisabledReject.setDescription('The number of received ADDBA frames that were discarded by this\n\tinterface since ADDBA was disabled.')
wlanStatsADDBANoRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 3, 1, 1, 105), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatsADDBANoRequest.setStatus('current')
if mibBuilder.loadTexts: wlanStatsADDBANoRequest.setDescription('The number of received ADDBA responses frames that were discarded\n\tby this interface due to no pending ADDBA.')
wlanStatsADDBABadToken = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 3, 1, 1, 106), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatsADDBABadToken.setStatus('current')
if mibBuilder.loadTexts: wlanStatsADDBABadToken.setDescription('The number of received ADDBA response frames that were discarded\n\tby this interface since ADDBA response caused dialogtoken mismatch.')
wlanStatsADDBABadPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 3, 1, 1, 107), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatsADDBABadPolicy.setStatus('current')
if mibBuilder.loadTexts: wlanStatsADDBABadPolicy.setDescription('The number of received ADDBA response frames that were discarded\n\tby this interface since ADDBA response caused policy mismatch.')
wlanStatsAMPDUStopped = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 3, 1, 1, 108), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatsAMPDUStopped.setStatus('current')
if mibBuilder.loadTexts: wlanStatsAMPDUStopped.setDescription('The number of times a A-MPDU stream stopped on this interface.')
wlanStatsAMPDUStopFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 3, 1, 1, 109), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatsAMPDUStopFailed.setStatus('current')
if mibBuilder.loadTexts: wlanStatsAMPDUStopFailed.setDescription('The number of times a A-MPDU stream stop failed on this interface.')
wlanStatsAMPDURxReorder = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 3, 1, 1, 110), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatsAMPDURxReorder.setStatus('current')
if mibBuilder.loadTexts: wlanStatsAMPDURxReorder.setDescription('The number of received reordered A-MPDU frames on this interface.')
wlanStatsScansBackground = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 3, 1, 1, 111), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatsScansBackground.setStatus('current')
if mibBuilder.loadTexts: wlanStatsScansBackground.setDescription('The number of background scans started on this interface.')
wlanLastDeauthReason = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 3, 1, 1, 112), WlanMgmtReasonCode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanLastDeauthReason.setStatus('current')
if mibBuilder.loadTexts: wlanLastDeauthReason.setDescription('The last received deauthenticate reason on this interface.')
wlanLastDissasocReason = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 3, 1, 1, 113), WlanMgmtReasonCode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanLastDissasocReason.setStatus('current')
if mibBuilder.loadTexts: wlanLastDissasocReason.setDescription('The last received disassociate reason on this interface.')
wlanLastAuthFailReason = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 3, 1, 1, 114), WlanMgmtReasonCode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanLastAuthFailReason.setStatus('current')
if mibBuilder.loadTexts: wlanLastAuthFailReason.setDescription('The last received authentication failed reason on this interface.')
wlanStatsBeaconMissedEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 3, 1, 1, 115), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatsBeaconMissedEvents.setStatus('current')
if mibBuilder.loadTexts: wlanStatsBeaconMissedEvents.setDescription('The number of beacon miss notification events on this interface.')
wlanStatsRxDiscardBadStates = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 3, 1, 1, 116), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatsRxDiscardBadStates.setStatus('current')
if mibBuilder.loadTexts: wlanStatsRxDiscardBadStates.setDescription('The number of frames received on this interface that were discarded\n\tdue to interface state not ready for receive.')
wlanStatsFFFlushed = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 3, 1, 1, 117), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatsFFFlushed.setStatus('current')
if mibBuilder.loadTexts: wlanStatsFFFlushed.setDescription('The number of fast frames flushed from the stage queue on this\n\tinterface.')
wlanStatsTxControlFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 3, 1, 1, 118), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatsTxControlFrames.setStatus('current')
if mibBuilder.loadTexts: wlanStatsTxControlFrames.setDescription('The number of control frames transmitted by this interface.')
wlanStatsAMPDURexmt = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 3, 1, 1, 119), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatsAMPDURexmt.setStatus('current')
if mibBuilder.loadTexts: wlanStatsAMPDURexmt.setDescription('The number of A-MPDU frames successfully retransmitted by this\n\tinterface.')
wlanStatsAMPDURexmtFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 3, 1, 1, 120), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStatsAMPDURexmtFailed.setStatus('current')
if mibBuilder.loadTexts: wlanStatsAMPDURexmtFailed.setDescription('The number of A-MPDU frames for which retransmission failed on\n\tthis interface.')
wlanStatsReset = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 3, 1, 1, 121), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no-op", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanStatsReset.setStatus('current')
if mibBuilder.loadTexts: wlanStatsReset.setDescription('The value of this object is used to reset the statistics on this\n\tinterface.')
wlanWepInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 12325, 1, 210, 4, 1), )
if mibBuilder.loadTexts: wlanWepInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: wlanWepInterfaceTable.setDescription('A table that contains WEP configuration for the wireless interfaces\n\ton the managed system.')
wlanWepInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12325, 1, 210, 4, 1, 1), ).setIndexNames((0, "BEGEMOT-WIRELESS-MIB", "wlanIfaceName"))
if mibBuilder.loadTexts: wlanWepInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: wlanWepInterfaceEntry.setDescription('WEP Configuration for wireless interface.')
wlanWepMode = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("mixed", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanWepMode.setStatus('current')
if mibBuilder.loadTexts: wlanWepMode.setDescription('The WEP mode set on the interface.')
wlanWepDefTxKey = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 4, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanWepDefTxKey.setStatus('current')
if mibBuilder.loadTexts: wlanWepDefTxKey.setDescription('The index of the default WEP key for the interface.')
wlanWepKeyTable = MibTable((1, 3, 6, 1, 4, 1, 12325, 1, 210, 4, 2), )
if mibBuilder.loadTexts: wlanWepKeyTable.setStatus('current')
if mibBuilder.loadTexts: wlanWepKeyTable.setDescription('A table that contains the configured WEP keys for a virtual\n\twireless interface.')
wlanWepKeyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12325, 1, 210, 4, 2, 1), ).setIndexNames((0, "BEGEMOT-WIRELESS-MIB", "wlanIfaceName"), (0, "BEGEMOT-WIRELESS-MIB", "wlanWepKeyID"))
if mibBuilder.loadTexts: wlanWepKeyEntry.setStatus('current')
if mibBuilder.loadTexts: wlanWepKeyEntry.setDescription('A configured WEP Key entry.')
wlanWepKeyID = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanWepKeyID.setStatus('current')
if mibBuilder.loadTexts: wlanWepKeyID.setDescription('The WEP Key ID.')
wlanWepKeyLength = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 4, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanWepKeyLength.setStatus('current')
if mibBuilder.loadTexts: wlanWepKeyLength.setDescription('The WEP Key length.')
wlanWepKeySet = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 4, 2, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanWepKeySet.setStatus('current')
if mibBuilder.loadTexts: wlanWepKeySet.setDescription('The WEP Key String to configure for this key. When GET is attempted\n\tfor this column, an empty Octet String is returned.')
wlanWepKeyHash = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 4, 2, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanWepKeyHash.setStatus('current')
if mibBuilder.loadTexts: wlanWepKeyHash.setDescription('The SHA256 hash produced of the WEP Key String.')
wlanWepKeyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 4, 2, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanWepKeyStatus.setStatus('current')
if mibBuilder.loadTexts: wlanWepKeyStatus.setDescription('This object is used for creating/deleting WEP keys.')
wlanMACAccessControlTable = MibTable((1, 3, 6, 1, 4, 1, 12325, 1, 210, 5, 1), )
if mibBuilder.loadTexts: wlanMACAccessControlTable.setStatus('current')
if mibBuilder.loadTexts: wlanMACAccessControlTable.setDescription('A table that contains Access Control configuration for wireless\n\tinterfaces operating as an access point.')
wlanMACAccessControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12325, 1, 210, 5, 1, 1), ).setIndexNames((0, "BEGEMOT-WIRELESS-MIB", "wlanIfaceName"))
if mibBuilder.loadTexts: wlanMACAccessControlEntry.setStatus('current')
if mibBuilder.loadTexts: wlanMACAccessControlEntry.setDescription('The MAC Access Control configuration for a wireless interface\n\toperating as an access point.')
wlanMACAccessControlPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 7))).clone(namedValues=NamedValues(("open", 0), ("allow", 1), ("deny", 2), ("radius", 7))).clone('open')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanMACAccessControlPolicy.setStatus('current')
if mibBuilder.loadTexts: wlanMACAccessControlPolicy.setDescription('The value of this object specifies the MAC Access Control policy\n\tfor this Host AP interface.')
wlanMACAccessControlNacl = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 5, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanMACAccessControlNacl.setStatus('current')
if mibBuilder.loadTexts: wlanMACAccessControlNacl.setDescription('The number of active MAC Access Control Entries in the Database\n\tfor this Host AP interface.')
wlanMACAccessControlFlush = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no-op", 0), ("flush", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanMACAccessControlFlush.setStatus('current')
if mibBuilder.loadTexts: wlanMACAccessControlFlush.setDescription('This object is used to flush all entries from the MAC Access\n\tControl Database for the specified virtual wireless interface.')
wlanMACAccessControlMACTable = MibTable((1, 3, 6, 1, 4, 1, 12325, 1, 210, 5, 2), )
if mibBuilder.loadTexts: wlanMACAccessControlMACTable.setStatus('current')
if mibBuilder.loadTexts: wlanMACAccessControlMACTable.setDescription('A table that contains Access Control MAC for virtual wireless\n\tinterfaces operating in Host AP mode.')
wlanMACAccessControlMACEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12325, 1, 210, 5, 2, 1), ).setIndexNames((0, "BEGEMOT-WIRELESS-MIB", "wlanIfaceName"), (0, "BEGEMOT-WIRELESS-MIB", "wlanMACAccessControlMAC"))
if mibBuilder.loadTexts: wlanMACAccessControlMACEntry.setStatus('current')
if mibBuilder.loadTexts: wlanMACAccessControlMACEntry.setDescription('The MAC Access Control configuration database with MAC addresses\n\tfor a virtual wireless interface.')
wlanMACAccessControlMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 5, 2, 1, 1), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanMACAccessControlMAC.setStatus('current')
if mibBuilder.loadTexts: wlanMACAccessControlMAC.setDescription("The value of this object specifies the station's MAC to which\n\tthe Access Control policy will be applied.")
wlanMACAccessControlMACStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 5, 2, 1, 2), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanMACAccessControlMACStatus.setStatus('current')
if mibBuilder.loadTexts: wlanMACAccessControlMACStatus.setDescription('The object is used to add or delete MAC entries from the Access\n\tControl Database for this interface operating in Host AP mode.\n\tTo add an entry the value of this object should be set to createAndGo,\n\ta value of destroy will remove an existing entry. A GET on this object\n\twill always return value active.')
wlanMeshRoutingConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 12325, 1, 210, 6, 1))
wlanMeshInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 12325, 1, 210, 6, 2))
wlanMeshRoute = MibIdentifier((1, 3, 6, 1, 4, 1, 12325, 1, 210, 6, 3))
wlanMeshStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 12325, 1, 210, 6, 4))
wlanMeshRouteProtocols = MibIdentifier((1, 3, 6, 1, 4, 1, 12325, 1, 210, 6, 5))
wlanMeshMaxRetries = MibScalar((1, 3, 6, 1, 4, 1, 12325, 1, 210, 6, 1, 1), Integer32().clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanMeshMaxRetries.setStatus('current')
if mibBuilder.loadTexts: wlanMeshMaxRetries.setDescription('Maximum retries during peer link establishment for wireless mesh\n\trouting operation.')
wlanMeshConfirmTimeout = MibScalar((1, 3, 6, 1, 4, 1, 12325, 1, 210, 6, 1, 2), Integer32().clone(40)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanMeshConfirmTimeout.setStatus('current')
if mibBuilder.loadTexts: wlanMeshConfirmTimeout.setDescription('Confirm state timeout for wireless mesh routing operation.')
wlanMeshHoldingTimeout = MibScalar((1, 3, 6, 1, 4, 1, 12325, 1, 210, 6, 1, 3), Integer32().clone(40)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanMeshHoldingTimeout.setStatus('current')
if mibBuilder.loadTexts: wlanMeshHoldingTimeout.setDescription('Holding state timeout for wireless mesh routing operation.')
wlanMeshRetryTimeout = MibScalar((1, 3, 6, 1, 4, 1, 12325, 1, 210, 6, 1, 4), Integer32().clone(40)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanMeshRetryTimeout.setStatus('current')
if mibBuilder.loadTexts: wlanMeshRetryTimeout.setDescription('Retry timeout for wireless mesh routing operation.')
wlanMeshInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 12325, 1, 210, 6, 2, 1), )
if mibBuilder.loadTexts: wlanMeshInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: wlanMeshInterfaceTable.setDescription('A table that contains information for wireless interfaces operating\n\tas wireless mesh points.')
wlanMeshInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12325, 1, 210, 6, 2, 1, 1), ).setIndexNames((0, "BEGEMOT-WIRELESS-MIB", "wlanIfaceName"))
if mibBuilder.loadTexts: wlanMeshInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: wlanMeshInterfaceEntry.setDescription('Wireless Mesh Routing information for an interface operating as\n\tmesh point.')
wlanMeshId = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 6, 2, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanMeshId.setStatus('current')
if mibBuilder.loadTexts: wlanMeshId.setDescription('The desired Mesh Identifier for the interface.')
wlanMeshTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 6, 2, 1, 1, 2), Integer32().clone(31)).setUnits('hops').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanMeshTTL.setStatus('current')
if mibBuilder.loadTexts: wlanMeshTTL.setDescription('The number of hops a packet may be forwarded before it is discarded.')
wlanMeshPeeringEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 6, 2, 1, 1, 3), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanMeshPeeringEnabled.setStatus('current')
if mibBuilder.loadTexts: wlanMeshPeeringEnabled.setDescription('Enable or disable peering with neighbor mesh stations for this\n\tinterface.')
wlanMeshForwardingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 6, 2, 1, 1, 4), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanMeshForwardingEnabled.setStatus('current')
if mibBuilder.loadTexts: wlanMeshForwardingEnabled.setDescription('Enable or disable forwarding packets by this interface.')
wlanMeshMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 6, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("unknown", 0), ("airtime", 1))).clone('airtime')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanMeshMetric.setStatus('current')
if mibBuilder.loadTexts: wlanMeshMetric.setDescription('The link metric protocol used by the interface.')
wlanMeshPath = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 6, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("unknown", 0), ("hwmp", 1))).clone('hwmp')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanMeshPath.setStatus('current')
if mibBuilder.loadTexts: wlanMeshPath.setDescription('The path selection protocol used by the interface.')
wlanMeshRoutesFlush = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 6, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no-op", 0), ("flush", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanMeshRoutesFlush.setStatus('current')
if mibBuilder.loadTexts: wlanMeshRoutesFlush.setDescription('This object is used to flush all mesh route entries from the mesh\n\trouting table for the specified interface.')
wlanMeshNeighborTable = MibTable((1, 3, 6, 1, 4, 1, 12325, 1, 210, 6, 2, 2), )
if mibBuilder.loadTexts: wlanMeshNeighborTable.setStatus('current')
if mibBuilder.loadTexts: wlanMeshNeighborTable.setDescription('A table that contains information for the neighbors of wireless\n\tinterfaces operating in mesh mode.')
wlanMeshNeighborEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12325, 1, 210, 6, 2, 2, 1), ).setIndexNames((0, "BEGEMOT-WIRELESS-MIB", "wlanIfaceName"), (0, "BEGEMOT-WIRELESS-MIB", "wlanMeshNeighborAddress"))
if mibBuilder.loadTexts: wlanMeshNeighborEntry.setStatus('current')
if mibBuilder.loadTexts: wlanMeshNeighborEntry.setDescription('Information for all neighbors of a wireless interface operating as\n\ta mesh point.')
wlanMeshNeighborAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 6, 2, 2, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanMeshNeighborAddress.setStatus('current')
if mibBuilder.loadTexts: wlanMeshNeighborAddress.setDescription('The Ethernet address of this neighbor.')
wlanMeshNeighborFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 6, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanMeshNeighborFrequency.setStatus('current')
if mibBuilder.loadTexts: wlanMeshNeighborFrequency.setDescription('The operating frequency for the link with this neighbor.')
wlanMeshNeighborLocalId = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 6, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanMeshNeighborLocalId.setStatus('current')
if mibBuilder.loadTexts: wlanMeshNeighborLocalId.setDescription('The local mesh id for this neighbor.')
wlanMeshNeighborPeerId = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 6, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanMeshNeighborPeerId.setStatus('current')
if mibBuilder.loadTexts: wlanMeshNeighborPeerId.setDescription('The mesh peer id of this neighbor.')
wlanMeshNeighborPeerState = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 6, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("idle", 0), ("openTx", 1), ("openRx", 2), ("confirmRx", 3), ("established", 4), ("closing", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanMeshNeighborPeerState.setStatus('current')
if mibBuilder.loadTexts: wlanMeshNeighborPeerState.setDescription('The current link state for this neighbor.')
wlanMeshNeighborCurrentTXRate = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 6, 2, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanMeshNeighborCurrentTXRate.setStatus('current')
if mibBuilder.loadTexts: wlanMeshNeighborCurrentTXRate.setDescription('The current transmit rate for this neighbor.')
wlanMeshNeighborRxSignalStrength = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 6, 2, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanMeshNeighborRxSignalStrength.setStatus('current')
if mibBuilder.loadTexts: wlanMeshNeighborRxSignalStrength.setDescription('The average receive signal strength for this neighbor.')
wlanMeshNeighborIdleTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 6, 2, 2, 1, 8), Integer32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanMeshNeighborIdleTimer.setStatus('current')
if mibBuilder.loadTexts: wlanMeshNeighborIdleTimer.setDescription("The value of this neighbor's inactivity timer.")
wlanMeshNeighborTxSequenceNo = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 6, 2, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanMeshNeighborTxSequenceNo.setStatus('current')
if mibBuilder.loadTexts: wlanMeshNeighborTxSequenceNo.setDescription('The last sequence number transmitted to this neighbor.')
wlanMeshNeighborRxSequenceNo = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 6, 2, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanMeshNeighborRxSequenceNo.setStatus('current')
if mibBuilder.loadTexts: wlanMeshNeighborRxSequenceNo.setDescription('The last sequence number received from this neighbor.')
wlanMeshRouteTable = MibTable((1, 3, 6, 1, 4, 1, 12325, 1, 210, 6, 3, 1), )
if mibBuilder.loadTexts: wlanMeshRouteTable.setStatus('current')
if mibBuilder.loadTexts: wlanMeshRouteTable.setDescription('A table that contains the mesh routing table for interfaces operating\n\tas mesh points, used for forwarding packets on a mesh network.')
wlanMeshRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12325, 1, 210, 6, 3, 1, 1), ).setIndexNames((0, "BEGEMOT-WIRELESS-MIB", "wlanIfaceName"), (0, "BEGEMOT-WIRELESS-MIB", "wlanMeshRouteDestination"))
if mibBuilder.loadTexts: wlanMeshRouteEntry.setStatus('current')
if mibBuilder.loadTexts: wlanMeshRouteEntry.setDescription('Wireless Mesh Routing Table entries for virtual wireless interfaces.')
wlanMeshRouteDestination = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 6, 3, 1, 1, 1), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wlanMeshRouteDestination.setStatus('current')
if mibBuilder.loadTexts: wlanMeshRouteDestination.setDescription("The mesh route entry's destination address.")
wlanMeshRouteNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 6, 3, 1, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanMeshRouteNextHop.setStatus('current')
if mibBuilder.loadTexts: wlanMeshRouteNextHop.setDescription("The mesh route entry's next hop address.")
wlanMeshRouteHops = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 6, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanMeshRouteHops.setStatus('current')
if mibBuilder.loadTexts: wlanMeshRouteHops.setDescription('The number of hops for this mesh route entry.')
wlanMeshRouteMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 6, 3, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanMeshRouteMetric.setStatus('current')
if mibBuilder.loadTexts: wlanMeshRouteMetric.setDescription('The metric of this mesh route entry.')
wlanMeshRouteLifeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 6, 3, 1, 1, 5), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanMeshRouteLifeTime.setStatus('current')
if mibBuilder.loadTexts: wlanMeshRouteLifeTime.setDescription('The life time of this mesh route entry.')
wlanMeshRouteLastMseq = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 6, 3, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanMeshRouteLastMseq.setStatus('current')
if mibBuilder.loadTexts: wlanMeshRouteLastMseq.setDescription('The last sequence number seen from this destination.')
wlanMeshRouteFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 6, 3, 1, 1, 7), Bits().clone(namedValues=NamedValues(("valid", 1), ("proxy", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanMeshRouteFlags.setStatus('current')
if mibBuilder.loadTexts: wlanMeshRouteFlags.setDescription("The Mesh Route entry's flags.")
wlanMeshRouteStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 6, 3, 1, 1, 8), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanMeshRouteStatus.setStatus('current')
if mibBuilder.loadTexts: wlanMeshRouteStatus.setDescription('The object is used to add or delete entries from the mesh routing\n\ttable for the virtual wireless interface.')
wlanMeshStatsTable = MibTable((1, 3, 6, 1, 4, 1, 12325, 1, 210, 6, 4, 1), )
if mibBuilder.loadTexts: wlanMeshStatsTable.setStatus('current')
if mibBuilder.loadTexts: wlanMeshStatsTable.setDescription('A table that contains summary statistics for each virtual wireless\n\tinterface operating as mesh point.')
wlanMeshStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12325, 1, 210, 6, 4, 1, 1), ).setIndexNames((0, "BEGEMOT-WIRELESS-MIB", "wlanIfaceName"))
if mibBuilder.loadTexts: wlanMeshStatsEntry.setStatus('current')
if mibBuilder.loadTexts: wlanMeshStatsEntry.setDescription('A list of statistics for each virtual wireless interface operating\n\tas mesh point.')
wlanMeshDroppedBadSta = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 6, 4, 1, 1, 1), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanMeshDroppedBadSta.setStatus('current')
if mibBuilder.loadTexts: wlanMeshDroppedBadSta.setDescription('The number of frames dropped by this interface since they were\n\treceived from a non-mesh station.')
wlanMeshDroppedNoLink = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 6, 4, 1, 1, 2), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanMeshDroppedNoLink.setStatus('current')
if mibBuilder.loadTexts: wlanMeshDroppedNoLink.setDescription('The number of frames dropped by this interface since no link had\n\tbeen established.')
wlanMeshNoFwdTtl = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 6, 4, 1, 1, 3), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanMeshNoFwdTtl.setStatus('current')
if mibBuilder.loadTexts: wlanMeshNoFwdTtl.setDescription('The number of frames that were not forwarded by this interface\n\tbecause of a zero TTL.')
wlanMeshNoFwdBuf = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 6, 4, 1, 1, 4), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanMeshNoFwdBuf.setStatus('current')
if mibBuilder.loadTexts: wlanMeshNoFwdBuf.setDescription('The number of frames that were not forwarded by this interface\n\tdue to lack of free buffers.')
wlanMeshNoFwdTooShort = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 6, 4, 1, 1, 5), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanMeshNoFwdTooShort.setStatus('current')
if mibBuilder.loadTexts: wlanMeshNoFwdTooShort.setDescription('The number of frames that were not forwarded by this interface\n\tdue to missing headers.')
wlanMeshNoFwdDisabled = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 6, 4, 1, 1, 6), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanMeshNoFwdDisabled.setStatus('current')
if mibBuilder.loadTexts: wlanMeshNoFwdDisabled.setDescription('The number of frames that were not forwarded by this interface\n\tsince forwarding was disabled.')
wlanMeshNoFwdPathUnknown = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 6, 4, 1, 1, 7), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanMeshNoFwdPathUnknown.setStatus('current')
if mibBuilder.loadTexts: wlanMeshNoFwdPathUnknown.setDescription('The number of frames that were not forwarded by this interface\n\tsince the path was unknown.')
wlanMeshDroppedBadAE = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 6, 4, 1, 1, 8), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanMeshDroppedBadAE.setStatus('current')
if mibBuilder.loadTexts: wlanMeshDroppedBadAE.setDescription('The number of frames that were dropped by this interface since\n\tthe AE was invalid.')
wlanMeshRouteAddFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 6, 4, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanMeshRouteAddFailed.setStatus('current')
if mibBuilder.loadTexts: wlanMeshRouteAddFailed.setDescription('The number of times an addition of a route to the mesh routing\n\ttable for this interface failed.')
wlanMeshDroppedNoProxy = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 6, 4, 1, 1, 10), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanMeshDroppedNoProxy.setStatus('current')
if mibBuilder.loadTexts: wlanMeshDroppedNoProxy.setDescription('The number of frames that were dropped by this interface since\n\tproxying was not enabled on the interface.')
wlanMeshDroppedMisaligned = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 6, 4, 1, 1, 11), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanMeshDroppedMisaligned.setStatus('current')
if mibBuilder.loadTexts: wlanMeshDroppedMisaligned.setDescription('The number of frames that were dropped by this interface due to\n\tbad alignment.')
wlanMeshProtoHWMP = MibIdentifier((1, 3, 6, 1, 4, 1, 12325, 1, 210, 6, 5, 1))
wlanMeshHWMPConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 12325, 1, 210, 6, 5, 1, 1))
wlanMeshHWMPInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 12325, 1, 210, 6, 5, 1, 2))
wlanMeshHWMPStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 12325, 1, 210, 6, 5, 1, 3))
wlanHWMPRouteInactiveTimeout = MibScalar((1, 3, 6, 1, 4, 1, 12325, 1, 210, 6, 5, 1, 1, 1), Integer32().clone(5000)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanHWMPRouteInactiveTimeout.setStatus('current')
if mibBuilder.loadTexts: wlanHWMPRouteInactiveTimeout.setDescription('The HWMP Route inactivity timeout.')
wlanHWMPRootAnnounceInterval = MibScalar((1, 3, 6, 1, 4, 1, 12325, 1, 210, 6, 5, 1, 1, 2), Integer32().clone(1000)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanHWMPRootAnnounceInterval.setStatus('current')
if mibBuilder.loadTexts: wlanHWMPRootAnnounceInterval.setDescription('The HWMP Root Announcement interval.')
wlanHWMPRootInterval = MibScalar((1, 3, 6, 1, 4, 1, 12325, 1, 210, 6, 5, 1, 1, 3), Integer32().clone(2000)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanHWMPRootInterval.setStatus('current')
if mibBuilder.loadTexts: wlanHWMPRootInterval.setDescription('The HWMP Root interval.')
wlanHWMPRootTimeout = MibScalar((1, 3, 6, 1, 4, 1, 12325, 1, 210, 6, 5, 1, 1, 4), Integer32().clone(5000)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanHWMPRootTimeout.setStatus('current')
if mibBuilder.loadTexts: wlanHWMPRootTimeout.setDescription('The root PREQ timeout.')
wlanHWMPPathLifetime = MibScalar((1, 3, 6, 1, 4, 1, 12325, 1, 210, 6, 5, 1, 1, 5), Integer32().clone(500)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanHWMPPathLifetime.setStatus('current')
if mibBuilder.loadTexts: wlanHWMPPathLifetime.setDescription('The HWMP path entry lifetime.')
wlanHWMPReplyForwardBit = MibScalar((1, 3, 6, 1, 4, 1, 12325, 1, 210, 6, 5, 1, 1, 6), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanHWMPReplyForwardBit.setStatus('current')
if mibBuilder.loadTexts: wlanHWMPReplyForwardBit.setDescription('A non-zero value for this object specifies that RF bit shall be\n\tset on generated PREQs.')
wlanHWMPTargetOnlyBit = MibScalar((1, 3, 6, 1, 4, 1, 12325, 1, 210, 6, 5, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanHWMPTargetOnlyBit.setStatus('current')
if mibBuilder.loadTexts: wlanHWMPTargetOnlyBit.setDescription('A non-zero value for this object specifies that TO bit shall be\n\tset on generated PREQs.')
wlanHWMPInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 12325, 1, 210, 6, 5, 1, 2, 1), )
if mibBuilder.loadTexts: wlanHWMPInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: wlanHWMPInterfaceTable.setDescription('A table that contains information for wireless interfaces\n\toperating in mesh mode.')
wlanHWMPInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12325, 1, 210, 6, 5, 1, 2, 1, 1), ).setIndexNames((0, "BEGEMOT-WIRELESS-MIB", "wlanIfaceName"))
if mibBuilder.loadTexts: wlanHWMPInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: wlanHWMPInterfaceEntry.setDescription('Wireless Mesh Routing HWMP information for a wireless interface.')
wlanHWMPRootMode = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 6, 5, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("normal", 2), ("proactive", 3), ("rann", 4))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanHWMPRootMode.setStatus('current')
if mibBuilder.loadTexts: wlanHWMPRootMode.setDescription('This object is used to configure whether the interface will operate\n\tas root node and specify root node mode.')
wlanHWMPMaxHops = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 6, 5, 1, 2, 1, 1, 2), Integer32().clone(31)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanHWMPMaxHops.setStatus('current')
if mibBuilder.loadTexts: wlanHWMPMaxHops.setDescription('The maximum number of hops allowed on an HMWP path for this interface.')
wlanMeshHWMPStatsTable = MibTable((1, 3, 6, 1, 4, 1, 12325, 1, 210, 6, 5, 1, 3, 1), )
if mibBuilder.loadTexts: wlanMeshHWMPStatsTable.setStatus('current')
if mibBuilder.loadTexts: wlanMeshHWMPStatsTable.setDescription('A table that contains summary statistics for HWMP operation on an\n\tinterface operating as mesh point.')
wlanMeshHWMPStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12325, 1, 210, 6, 5, 1, 3, 1, 1), ).setIndexNames((0, "BEGEMOT-WIRELESS-MIB", "wlanIfaceName"))
if mibBuilder.loadTexts: wlanMeshHWMPStatsEntry.setStatus('current')
if mibBuilder.loadTexts: wlanMeshHWMPStatsEntry.setDescription('A list of HWMP statistics for each wlan interface operating as HWMP\n\tmesh point.')
wlanMeshHWMPWrongSeqNo = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 6, 5, 1, 3, 1, 1, 1), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanMeshHWMPWrongSeqNo.setStatus('current')
if mibBuilder.loadTexts: wlanMeshHWMPWrongSeqNo.setDescription('The number of HWMP frames with wrong sequence number received by\n\tthis interface.')
wlanMeshHWMPTxRootPREQ = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 6, 5, 1, 3, 1, 1, 2), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanMeshHWMPTxRootPREQ.setStatus('current')
if mibBuilder.loadTexts: wlanMeshHWMPTxRootPREQ.setDescription('The number of HWMP Root PREQ frames sent by this interface.')
wlanMeshHWMPTxRootRANN = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 6, 5, 1, 3, 1, 1, 3), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanMeshHWMPTxRootRANN.setStatus('current')
if mibBuilder.loadTexts: wlanMeshHWMPTxRootRANN.setDescription('The number of HWMP Root RANN frames sent by this interface.')
wlanMeshHWMPProxy = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 210, 6, 5, 1, 3, 1, 1, 4), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanMeshHWMPProxy.setStatus('current')
if mibBuilder.loadTexts: wlanMeshHWMPProxy.setDescription('The number of HWMP PREP frames discarded by this interface due to\n\tthe HWMP route being marked as proxy.')
mibBuilder.exportSymbols("BEGEMOT-WIRELESS-MIB", wlanMeshNeighborAddress=wlanMeshNeighborAddress, wlanStatsHTAssocDowngrade=wlanStatsHTAssocDowngrade, wlanStatsReset=wlanStatsReset, wlanStatsRxDefragFailed=wlanStatsRxDefragFailed, wlanMeshNeighborPeerId=wlanMeshNeighborPeerId, wlanStatsRxFFBadHdr=wlanStatsRxFFBadHdr, wlanStatsScansBackground=wlanStatsScansBackground, wlanIfaceRoamingMode=wlanIfaceRoamingMode, wlanMeshNeighborIdleTimer=wlanMeshNeighborIdleTimer, wlanIfaceDot11nSMPSMode=wlanIfaceDot11nSMPSMode, wlanStatsRxAssocWrongBssid=wlanStatsRxAssocWrongBssid, wlanStatsAMPDURxBAR=wlanStatsAMPDURxBAR, wlanIfaceChannelHTExtension=wlanIfaceChannelHTExtension, wlanMeshNeighborRxSequenceNo=wlanMeshNeighborRxSequenceNo, wlanStatsRxDropped=wlanStatsRxDropped, wlanParentIfName=wlanParentIfName, wlanStatsActiveScans=wlanStatsActiveScans, wlanMACAccessControlMACTable=wlanMACAccessControlMACTable, wlanIfacePeerIdleTimer=wlanIfacePeerIdleTimer, wlanStatsRxMgmt=wlanStatsRxMgmt, wlanMACAccessControlEntry=wlanMACAccessControlEntry, wlanIfaceChannelTable=wlanIfaceChannelTable, WlanIfaceDot11nPduType=WlanIfaceDot11nPduType, wlanStatsRxElemUnknown=wlanStatsRxElemUnknown, wlanStatsRxDiscardedDups=wlanStatsRxDiscardedDups, wlanIfaceDot11h=wlanIfaceDot11h, wlanIfaceName=wlanIfaceName, wlanStatsRxBadBintval=wlanStatsRxBadBintval, wlanStatsRxElemMissing=wlanStatsRxElemMissing, wlanStatsCryptoKeyFailed=wlanStatsCryptoKeyFailed, wlanStatsAMPDUStopFailed=wlanStatsAMPDUStopFailed, wlanMACAccessControlNacl=wlanMACAccessControlNacl, wlanMeshRouteMetric=wlanMeshRouteMetric, wlanMeshRetryTimeout=wlanMeshRetryTimeout, wlanIfaceDot11nHighThroughput=wlanIfaceDot11nHighThroughput, wlanMeshDroppedNoLink=wlanMeshDroppedNoLink, wlanStatsRxAssocNoRateMatch=wlanStatsRxAssocNoRateMatch, wlanStatsSwCryptoCCMP=wlanStatsSwCryptoCCMP, wlanMeshNeighborTxSequenceNo=wlanMeshNeighborTxSequenceNo, wlanInterfaceEntry=wlanInterfaceEntry, wlanMeshHWMPStatistics=wlanMeshHWMPStatistics, wlanIfaceBgScanIdle=wlanIfaceBgScanIdle, WlanMgmtStatusCode=WlanMgmtStatusCode, wlanMeshNeighborEntry=wlanMeshNeighborEntry, wlanStatsAMPDUOowBar=wlanStatsAMPDUOowBar, wlanMeshId=wlanMeshId, wlanMeshDroppedBadSta=wlanMeshDroppedBadSta, wlanIfParentTable=wlanIfParentTable, wlanIfaceDot11nAmpduDensity=wlanIfaceDot11nAmpduDensity, wlanScanResultChannel=wlanScanResultChannel, wlanStatsRxAMSDUTooShort=wlanStatsRxAMSDUTooShort, wlanIfaceFragmentThreshold=wlanIfaceFragmentThreshold, wlanStatsRxAuthNotSupported=wlanStatsRxAuthNotSupported, wlanWepMode=wlanWepMode, wlanMeshHWMPInterface=wlanMeshHWMPInterface, wlanIfaceIndex=wlanIfaceIndex, wlanIfParentDriverCapabilities=wlanIfParentDriverCapabilities, wlanStatsAMPDURxDropped=wlanStatsAMPDURxDropped, wlanMeshTTL=wlanMeshTTL, wlanMeshNoFwdBuf=wlanMeshNoFwdBuf, wlanStatsRxElemTooBig=wlanStatsRxElemTooBig, wlanMeshRouteProtocols=wlanMeshRouteProtocols, wlanStatsRxWepNoPrivacy=wlanStatsRxWepNoPrivacy, wlanStatsRxBadAuthRequest=wlanStatsRxBadAuthRequest, wlanIfaceOperatingMode=wlanIfaceOperatingMode, wlanStatsRxDiscardBadStates=wlanStatsRxDiscardBadStates, wlanMeshStatsEntry=wlanMeshStatsEntry, wlanIfaceBeaconInterval=wlanIfaceBeaconInterval, begemotWlanMeshRouting=begemotWlanMeshRouting, wlanMeshNeighborCurrentTXRate=wlanMeshNeighborCurrentTXRate, wlanStatsRxAssocNoAuth=wlanStatsRxAssocNoAuth, wlanStatsRxActionMgmt=wlanStatsRxActionMgmt, wlanStatsRxAssocCapMismatch=wlanStatsRxAssocCapMismatch, wlanMeshHWMPWrongSeqNo=wlanMeshHWMPWrongSeqNo, wlanStatsTimeoutInactivity=wlanStatsTimeoutInactivity, wlanIfaceDot11d=wlanIfaceDot11d, wlanStatsSwCryptoWEP=wlanStatsSwCryptoWEP, wlanStatsBeaconMissedEvents=wlanStatsBeaconMissedEvents, wlanMeshRouteLifeTime=wlanMeshRouteLifeTime, wlanStatsTxBadCipher=wlanStatsTxBadCipher, wlanIfaceTdmaBeaconInterval=wlanIfaceTdmaBeaconInterval, wlanIfaceDot11nPureMode=wlanIfaceDot11nPureMode, wlanStatsRxTKIPBadFormat=wlanStatsRxTKIPBadFormat, wlanScanResultsEntry=wlanScanResultsEntry, wlanIfTxParamsEntry=wlanIfTxParamsEntry, wlanHWMPReplyForwardBit=wlanHWMPReplyForwardBit, begemotWlanMACAccessControl=begemotWlanMACAccessControl, wlanStatsCryptoUnknownCipher=wlanStatsCryptoUnknownCipher, wlanWepInterfaceTable=wlanWepInterfaceTable, wlanIfaceTdmaSlotCount=wlanIfaceTdmaSlotCount, wlanHWMPRootInterval=wlanHWMPRootInterval, wlanMeshRouteDestination=wlanMeshRouteDestination, wlanIfaceTdmaSlot=wlanIfaceTdmaSlot, wlanInterfaceTable=wlanInterfaceTable, wlanMeshRouteFlags=wlanMeshRouteFlags, wlanIfRoamRxSignalStrength=wlanIfRoamRxSignalStrength, wlanScanConfigEntry=wlanScanConfigEntry, wlanStatsRxDiscardMgmt=wlanStatsRxDiscardMgmt, wlanMeshRouteNextHop=wlanMeshRouteNextHop, wlanMeshHWMPConfig=wlanMeshHWMPConfig, wlanMeshHWMPStatsEntry=wlanMeshHWMPStatsEntry, wlanStatsCryptoDeleteKeyFailed=wlanStatsCryptoDeleteKeyFailed, wlanStatsTxFailedNoBuf=wlanStatsTxFailedNoBuf, wlanStatsRxDiscardACL=wlanStatsRxDiscardACL, wlanStatsRxDisassociate=wlanStatsRxDisassociate, wlanIfaceChannelMaxRegPower=wlanIfaceChannelMaxRegPower, wlanLastDeauthReason=wlanLastDeauthReason, wlanStatsTxDiscardBadState=wlanStatsTxDiscardBadState, begemotWlanStatistics=begemotWlanStatistics, wlanHWMPMaxHops=wlanHWMPMaxHops, wlanStatsTxFragmented=wlanStatsTxFragmented, wlanMeshHWMPStatsTable=wlanMeshHWMPStatsTable, wlanIfaceBssid=wlanIfaceBssid, wlanStatsRxUnAuthorized=wlanStatsRxUnAuthorized, wlanIfaceDot11nAmsduLimit=wlanIfaceDot11nAmsduLimit, wlanIfRoamTxRateThreshold=wlanIfRoamTxRateThreshold, wlanIfaceRTSThreshold=wlanIfaceRTSThreshold, wlanIfTxMaxRetryCount=wlanIfTxMaxRetryCount, wlanMeshRouteTable=wlanMeshRouteTable, wlanIfacePeerTable=wlanIfacePeerTable, wlanStatsADDBABadToken=wlanStatsADDBABadToken, wlanIfaceInactivityProccess=wlanIfaceInactivityProccess, wlanStatsRxAuthCM=wlanStatsRxAuthCM, wlanMeshNeighborPeerState=wlanMeshNeighborPeerState, wlanIfaceChannelMinTxPower=wlanIfaceChannelMinTxPower, wlanMeshNeighborTable=wlanMeshNeighborTable, wlanStatsTxFailedNoAssoc=wlanStatsTxFailedNoAssoc, wlanStatsRxSsidMismatch=wlanStatsRxSsidMismatch, wlanIfacePeerTxSequenceNo=wlanIfacePeerTxSequenceNo, wlanStatsTxNoDefKey=wlanStatsTxNoDefKey, wlanIfacePeerRxSignalStrength=wlanIfacePeerRxSignalStrength, wlanMACAccessControlPolicy=wlanMACAccessControlPolicy, wlanMeshNeighborRxSignalStrength=wlanMeshNeighborRxSignalStrength, wlanIfacePowerSave=wlanIfacePowerSave, wlanMeshPath=wlanMeshPath, wlanHWMPInterfaceTable=wlanHWMPInterfaceTable, wlanStatsRxCCMPBadFormat=wlanStatsRxCCMPBadFormat, wlanStatsFFFlushed=wlanStatsFFFlushed, wlanScanMinChannelDwellTime=wlanScanMinChannelDwellTime, wlanStatsAMPDUStopped=wlanStatsAMPDUStopped, wlanStatsEmptyPSPoll=wlanStatsEmptyPSPoll, wlanStatsDwdsMcastDiscard=wlanStatsDwdsMcastDiscard, wlanScanResultsTable=wlanScanResultsTable, wlanMeshHWMPTxRootRANN=wlanMeshHWMPTxRootRANN, wlanStatsRxDiscardMcastEcho=wlanStatsRxDiscardMcastEcho, wlanIfaceChannelFlags=wlanIfaceChannelFlags, wlanIfaceChannelMaxAntennaGain=wlanIfaceChannelMaxAntennaGain, wlanIfaceBgScan=wlanIfaceBgScan, wlanMeshRouteEntry=wlanMeshRouteEntry, wlanMACAccessControlMAC=wlanMACAccessControlMAC, wlanIfParentEntry=wlanIfParentEntry, wlanMeshRouteAddFailed=wlanMeshRouteAddFailed, wlanIfaceDot11nAmpduLimit=wlanIfaceDot11nAmpduLimit, wlanIfaceConfigEntry=wlanIfaceConfigEntry, wlanStatsTxAMSDUEncap=wlanStatsTxAMSDUEncap, wlanStatsRxDecapsulationFailed=wlanStatsRxDecapsulationFailed, wlanHWMPRootMode=wlanHWMPRootMode, wlanStatsRxWrongDir=wlanStatsRxWrongDir, wlanStatsAMPDURxAge=wlanStatsAMPDURxAge, wlanHWMPInterfaceEntry=wlanHWMPInterfaceEntry, wlanHWMPPathLifetime=wlanHWMPPathLifetime, wlanStatsRxControl=wlanStatsRxControl, wlanStatsRxFFTooShort=wlanStatsRxFFTooShort, wlanMeshDroppedMisaligned=wlanMeshDroppedMisaligned, wlanStatsTxFragmentsCreated=wlanStatsTxFragmentsCreated, WlanPeerCapabilityFlags=WlanPeerCapabilityFlags, wlanStatsRxFFSplitError=wlanStatsRxFFSplitError, wlanStatsHTAssocRateMismatch=wlanStatsHTAssocRateMismatch, wlanIfaceDot11nAmsdu=wlanIfaceDot11nAmsdu, WlanRegDomainCode=WlanRegDomainCode, wlanIfaceConfigTable=wlanIfaceConfigTable, wlanWepDefTxKey=wlanWepDefTxKey, wlanMeshInterface=wlanMeshInterface, wlanScanFlags=wlanScanFlags, wlanMeshNoFwdDisabled=wlanMeshNoFwdDisabled, wlanIfaceDot11nShortGI=wlanIfaceDot11nShortGI, WlanMgmtReasonCode=WlanMgmtReasonCode, wlanMeshDroppedBadAE=wlanMeshDroppedBadAE, wlanIfacePeerEntry=wlanIfacePeerEntry, wlanStatsADDBABadPolicy=wlanStatsADDBABadPolicy, wlanWepKeyLength=wlanWepKeyLength, wlanStatsRxWepFailed=wlanStatsRxWepFailed, wlanStatsRxTKIPSeqViolation=wlanStatsRxTKIPSeqViolation, wlanScanResultBeaconInterval=wlanScanResultBeaconInterval, begemotWlanScanning=begemotWlanScanning, wlanMeshRouteStatus=wlanMeshRouteStatus, wlanIfaceChannelIeeeId=wlanIfaceChannelIeeeId, wlanStatsCryptoTKIPCM=wlanStatsCryptoTKIPCM, wlanStatsPassiveScans=wlanStatsPassiveScans, wlanIfaceWlanPrivacySubscribe=wlanIfaceWlanPrivacySubscribe, wlanStatsRxBadWpaIE=wlanStatsRxBadWpaIE, wlanIfacePeerAssociationId=wlanIfacePeerAssociationId, wlanStatsRxChannelMismatch=wlanStatsRxChannelMismatch, wlanStatsRxTooShort=wlanStatsRxTooShort, wlanStatsAMPDURxReorder=wlanStatsAMPDURxReorder, wlanIfaceDot11gPureMode=wlanIfaceDot11gPureMode, wlanMeshMetric=wlanMeshMetric, wlanStatsTxFailedNoNode=wlanStatsTxFailedNoNode, wlanIfaceChannelFrequency=wlanIfaceChannelFrequency, wlanStatsRxBeacon=wlanStatsRxBeacon, wlanScanResultCapabilities=wlanScanResultCapabilities, wlanIfacePacketBurst=wlanIfacePacketBurst, wlanStatsAMPDUBadBAR=wlanStatsAMPDUBadBAR, wlanScanConfigTable=wlanScanConfigTable, wlanStatsAMPDURexmt=wlanStatsAMPDURexmt, wlanMeshDroppedNoProxy=wlanMeshDroppedNoProxy, wlanStatsRxFFDecap=wlanStatsRxFFDecap, wlanStatsADDBANoRequest=wlanStatsADDBANoRequest, wlanMeshInterfaceEntry=wlanMeshInterfaceEntry, wlanIfaceBeaconMissedThreshold=wlanIfaceBeaconMissedThreshold, wlanStatsRxWrongBssid=wlanStatsRxWrongBssid, wlanMeshNoFwdTtl=wlanMeshNoFwdTtl, wlanStatsCryptoNoKey=wlanStatsCryptoNoKey, wlanStatsSwCryptoTKIPEnMIC=wlanStatsSwCryptoTKIPEnMIC, wlanIfTxMgmtRate=wlanIfTxMgmtRate, wlanIfacePeerFlags=wlanIfacePeerFlags, wlanStatsTxFFEncap=wlanStatsTxFFEncap, wlanIfaceDesiredSsid=wlanIfaceDesiredSsid, wlanIfaceApBridge=wlanIfaceApBridge, wlanScanResultNoise=wlanScanResultNoise, wlanIfaceTxPower=wlanIfaceTxPower, wlanIfaceStatisticsEntry=wlanIfaceStatisticsEntry, wlanWepKeyStatus=wlanWepKeyStatus, wlanStatsRxCCMPFailedMIC=wlanStatsRxCCMPFailedMIC, wlanIfRoamPhyMode=wlanIfRoamPhyMode, wlanIfaceFlags=wlanIfaceFlags, wlanIfaceDturbo=wlanIfaceDturbo, wlanWepKeyID=wlanWepKeyID, wlanWepKeyHash=wlanWepKeyHash, wlanScanConfigStatus=wlanScanConfigStatus, wlanLastDissasocReason=wlanLastDissasocReason, wlanIfacePeerCapabilities=wlanIfacePeerCapabilities, wlanMACAccessControlFlush=wlanMACAccessControlFlush, wlanScanResultBssid=wlanScanResultBssid, wlanMACAccessControlTable=wlanMACAccessControlTable, wlanStatsRxDeauthenticate=wlanStatsRxDeauthenticate, wlanStatsTxUnknownMgmt=wlanStatsTxUnknownMgmt, begemotWlanWep=begemotWlanWep, wlanIfaceBgScanInterval=wlanIfaceBgScanInterval, wlanStatsRxDiscardNoAssoc=wlanStatsRxDiscardNoAssoc, wlanScanResultRate=wlanScanResultRate, wlanLastAuthFailReason=wlanLastAuthFailReason, wlanMeshNoFwdTooShort=wlanMeshNoFwdTooShort, begemotWlanInterface=begemotWlanInterface, wlanStatsTxControlFrames=wlanStatsTxControlFrames, wlanHWMPRootAnnounceInterval=wlanHWMPRootAnnounceInterval, wlanIfacePeerAddress=wlanIfacePeerAddress, wlanIfacePeerRxSequenceNo=wlanIfacePeerRxSequenceNo, wlanIfaceDynamicWds=wlanIfaceDynamicWds, wlanScanDuration=wlanScanDuration, wlanIfTxParamsTable=wlanIfTxParamsTable, wlanStatsHTAssocRejectNoHT=wlanStatsHTAssocRejectNoHT, wlanStatsAMPDURxCopied=wlanStatsAMPDURxCopied, wlanIfaceDynamicFreqSelection=wlanIfaceDynamicFreqSelection)
mibBuilder.exportSymbols("BEGEMOT-WIRELESS-MIB", wlanMeshHWMPTxRootPREQ=wlanMeshHWMPTxRootPREQ, wlanIfaceState=wlanIfaceState, wlanWepKeyEntry=wlanWepKeyEntry, wlanStatsIBSSCapMismatch=wlanStatsIBSSCapMismatch, wlanIfaceFastFrames=wlanIfaceFastFrames, wlanStatsAMPDUMoved=wlanStatsAMPDUMoved, wlanIfaceDtimPeriod=wlanIfaceDtimPeriod, wlanStatsRxAMSDUSplitError=wlanStatsRxAMSDUSplitError, wlanStatsRxUnknownSubtype=wlanStatsRxUnknownSubtype, begemotWlanNotifications=begemotWlanNotifications, wlanWepInterfaceEntry=wlanWepInterfaceEntry, wlanStatsRxAMSDUDecap=wlanStatsRxAMSDUDecap, wlanScanResultID=wlanScanResultID, wlanIfacePeerFrequency=wlanIfacePeerFrequency, wlanStatsSwCryptoTKIP=wlanStatsSwCryptoTKIP, wlanIfaceDot11nHTProtMode=wlanIfaceDot11nHTProtMode, wlanIfaceDesiredBssid=wlanIfaceDesiredBssid, wlanMeshInterfaceTable=wlanMeshInterfaceTable, wlanMeshHoldingTimeout=wlanMeshHoldingTimeout, wlanScanMaxChannelDwellTime=wlanScanMaxChannelDwellTime, wlanStatsRxCCMPSeqViolation=wlanStatsRxCCMPSeqViolation, wlanStatsRxBadKeyId=wlanStatsRxBadKeyId, wlanIfTxMcastRate=wlanIfTxMcastRate, wlanStatsRxDemicFailed=wlanStatsRxDemicFailed, wlanMeshForwardingEnabled=wlanMeshForwardingEnabled, wlanIfaceLocalAddress=wlanIfaceLocalAddress, wlanIfParentHTCapabilities=wlanIfParentHTCapabilities, wlanStatsCryptoAttachFailed=wlanStatsCryptoAttachFailed, wlanMeshPeeringEnabled=wlanMeshPeeringEnabled, wlanStatsRxTKIPFailedICV=wlanStatsRxTKIPFailedICV, wlanIfaceChannelMaxTxPower=wlanIfaceChannelMaxTxPower, wlanStatsAMPDUMovedBAR=wlanStatsAMPDUMovedBAR, wlanStatsUnassocStaPSPoll=wlanStatsUnassocStaPSPoll, wlanStatsRxWepUnencrypted=wlanStatsRxWepUnencrypted, WlanMgmtMeshReasonCode=WlanMgmtMeshReasonCode, wlanIfaceCountryCode=wlanIfaceCountryCode, wlanMeshHWMPProxy=wlanMeshHWMPProxy, wlanIfaceRegDomain=wlanIfaceRegDomain, WlanIfPhyMode=WlanIfPhyMode, wlanIfTxPhyMode=wlanIfTxPhyMode, wlanMeshStatsTable=wlanMeshStatsTable, wlanIfaceStatus=wlanIfaceStatus, wlanIfParentCryptoCapabilities=wlanIfParentCryptoCapabilities, wlanIfTxUnicastRate=wlanIfTxUnicastRate, wlanMeshRoutingConfig=wlanMeshRoutingConfig, wlanStatsRxElemTooSmall=wlanStatsRxElemTooSmall, wlanStatsCryptoNoMem=wlanStatsCryptoNoMem, wlanIfaceChannelState=wlanIfaceChannelState, wlanMeshRouteHops=wlanMeshRouteHops, wlanMeshNoFwdPathUnknown=wlanMeshNoFwdPathUnknown, wlanMeshMaxRetries=wlanMeshMaxRetries, wlanMeshConfirmTimeout=wlanMeshConfirmTimeout, wlanStatsTxClassifyFailed=wlanStatsTxClassifyFailed, wlanIfaceChannelType=wlanIfaceChannelType, wlanHWMPRouteInactiveTimeout=wlanHWMPRouteInactiveTimeout, wlanIfRoamParamsEntry=wlanIfRoamParamsEntry, wlanHWMPRootTimeout=wlanHWMPRootTimeout, wlanStatsRxFailedNoBuf=wlanStatsRxFailedNoBuf, wlanStatsRxRateSetTooBig=wlanStatsRxRateSetTooBig, PYSNMP_MODULE_ID=begemotWlan, wlanIfacePeerTxPower=wlanIfacePeerTxPower, wlanMeshRoute=wlanMeshRoute, wlanHWMPTargetOnlyBit=wlanHWMPTargetOnlyBit, wlanStatsRxAuthFailed=wlanStatsRxAuthFailed, wlanIfaceStatisticsTable=wlanIfaceStatisticsTable, wlanMeshStatistics=wlanMeshStatistics, wlanIfaceDot11gProtMode=wlanIfaceDot11gProtMode, wlanWepKeyTable=wlanWepKeyTable, wlanIfaceTdmaSlotLength=wlanIfaceTdmaSlotLength, wlanStatsBadAidPSPoll=wlanStatsBadAidPSPoll, wlanMeshRouteLastMseq=wlanMeshRouteLastMseq, wlanIfaceHideSsid=wlanIfaceHideSsid, begemotWlan=begemotWlan, wlanIfacePeerVlanTag=wlanIfacePeerVlanTag, wlanIfaceChannelEntry=wlanIfaceChannelEntry, wlanStatsAMPDURxOor=wlanStatsAMPDURxOor, wlanIfaceDot11nHTCompatible=wlanIfaceDot11nHTCompatible, wlanStatsCryptoEnMICFailed=wlanStatsCryptoEnMICFailed, wlanMeshProtoHWMP=wlanMeshProtoHWMP, wlanStatsSwCryptoTKIPDeMIC=wlanStatsSwCryptoTKIPDeMIC, wlanStatsADDBADisabledReject=wlanStatsADDBADisabledReject, wlanStatsCryptoCipherKeyRejected=wlanStatsCryptoCipherKeyRejected, wlanIfaceDot11nRIFS=wlanIfaceDot11nRIFS, wlanIfaceDot11nAmpdu=wlanIfaceDot11nAmpdu, wlanIfRoamParamsTable=wlanIfRoamParamsTable, wlanIfaceDesiredChannel=wlanIfaceDesiredChannel, wlanIfacePeerCurrentTXRate=wlanIfacePeerCurrentTXRate, wlanStatsAMPDURexmtFailed=wlanStatsAMPDURexmtFailed, wlanMeshRoutesFlush=wlanMeshRoutesFlush, wlanWepKeySet=wlanWepKeySet, wlanIfaceChannelId=wlanIfaceChannelId, wlanStatsRxTKIPFailedMIC=wlanStatsRxTKIPFailedMIC, wlanMeshNeighborLocalId=wlanMeshNeighborLocalId, wlanMACAccessControlMACStatus=wlanMACAccessControlMACStatus, wlanStatsRxBadVersion=wlanStatsRxBadVersion, wlanMACAccessControlMACEntry=wlanMACAccessControlMACEntry, wlanMeshNeighborFrequency=wlanMeshNeighborFrequency)
