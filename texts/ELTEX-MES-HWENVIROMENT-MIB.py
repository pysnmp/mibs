#
# PySNMP MIB module ELTEX-MES-HWENVIROMENT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/eltex/ELTEX-MES-HWENVIROMENT-MIB
# Produced by pysmi-1.1.12 at Tue May 28 12:05:57 2024
# On host fv-az1490-484 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
eltMes, = mibBuilder.importSymbols("ELTEX-MES", "eltMes")
RlEnvMonState, rlEnvMonFanStatusEntry = mibBuilder.importSymbols("RADLAN-HWENVIROMENT", "RlEnvMonState", "rlEnvMonFanStatusEntry")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Bits, NotificationType, Gauge32, ObjectIdentity, Unsigned32, MibIdentifier, Counter64, Counter32, IpAddress, Integer32, TimeTicks, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "NotificationType", "Gauge32", "ObjectIdentity", "Unsigned32", "MibIdentifier", "Counter64", "Counter32", "IpAddress", "Integer32", "TimeTicks", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
eltMesEnv = ModuleIdentity((1, 3, 6, 1, 4, 1, 35265, 1, 23, 11))
eltMesEnv.setRevisions(('2018-07-27 00:00', '2017-10-11 00:00', '2015-06-11 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: eltMesEnv.setRevisionsDescriptions(('Added eltEnvResetButtonMode scalar.', "Added Eltex's hardware enviroment definition.", 'Initial revision.',))
if mibBuilder.loadTexts: eltMesEnv.setLastUpdated('201807270000Z')
if mibBuilder.loadTexts: eltMesEnv.setOrganization('Eltex Enterprise Co, Ltd.')
if mibBuilder.loadTexts: eltMesEnv.setContactInfo('www.eltex.nsk.ru')
if mibBuilder.loadTexts: eltMesEnv.setDescription("This private MIB module contains Eltex's hardware enviroment definition.")
eltEnvMonBatteryStatusTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 23, 11, 1), )
if mibBuilder.loadTexts: eltEnvMonBatteryStatusTable.setStatus('current')
if mibBuilder.loadTexts: eltEnvMonBatteryStatusTable.setDescription('The table of battery status maintained by the environmental monitor\n             card.')
eltEnvMonBatteryStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 23, 11, 1, 1), ).setIndexNames((0, "ELTEX-MES-HWENVIROMENT-MIB", "eltEnvMonBatteryStatusIndex"))
if mibBuilder.loadTexts: eltEnvMonBatteryStatusEntry.setStatus('current')
if mibBuilder.loadTexts: eltEnvMonBatteryStatusEntry.setDescription('An entry in the battery status table, representing the status of\n             the associated battery maintained by the environmental monitor.')
eltEnvMonBatteryStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 11, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: eltEnvMonBatteryStatusIndex.setStatus('current')
if mibBuilder.loadTexts: eltEnvMonBatteryStatusIndex.setDescription('Unique index for the battery being instrumented. This index is for SNMP\n         purposes only, and has no intrinsic meaning.')
eltEnvMonBatteryState = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 11, 1, 1, 2), RlEnvMonState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltEnvMonBatteryState.setStatus('current')
if mibBuilder.loadTexts: eltEnvMonBatteryState.setDescription('The mandatory state of the battery being instrumented.')
eltEnvMonBatteryStatusCharge = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 11, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 100), ValueRangeConstraint(255, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltEnvMonBatteryStatusCharge.setStatus('current')
if mibBuilder.loadTexts: eltEnvMonBatteryStatusCharge.setDescription('Remaining percentage of battery charge. Value of 255 means that this\n         parameter is undefined due to battery not supporting this feature or\n         because it cannot be obtained in current state.')
eltEnvResetButtonMode = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 23, 11, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1), ("reset-only", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltEnvResetButtonMode.setStatus('current')
if mibBuilder.loadTexts: eltEnvResetButtonMode.setDescription('Mode of reset button: 0 - Enable, 1 - disable, 2 - reset-only mode')
eltEnvMonFanStatusTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 23, 11, 3), )
if mibBuilder.loadTexts: eltEnvMonFanStatusTable.setStatus('current')
if mibBuilder.loadTexts: eltEnvMonFanStatusTable.setDescription('The table of fan status maintained by the environmental monitor')
eltEnvMonFanStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 23, 11, 3, 1), )
rlEnvMonFanStatusEntry.registerAugmentions(("ELTEX-MES-HWENVIROMENT-MIB", "eltEnvMonFanStatusEntry"))
eltEnvMonFanStatusEntry.setIndexNames(*rlEnvMonFanStatusEntry.getIndexNames())
if mibBuilder.loadTexts: eltEnvMonFanStatusEntry.setStatus('current')
if mibBuilder.loadTexts: eltEnvMonFanStatusEntry.setDescription('This table augments existing RADLAN table rlEnvMonFanStatusTable')
eltEnvMonFanSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 11, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltEnvMonFanSpeed.setStatus('current')
if mibBuilder.loadTexts: eltEnvMonFanSpeed.setDescription('This parameter represents the speed of the fan in RPM')
mibBuilder.exportSymbols("ELTEX-MES-HWENVIROMENT-MIB", eltEnvMonBatteryStatusEntry=eltEnvMonBatteryStatusEntry, eltEnvMonFanStatusTable=eltEnvMonFanStatusTable, eltMesEnv=eltMesEnv, eltEnvMonBatteryStatusIndex=eltEnvMonBatteryStatusIndex, PYSNMP_MODULE_ID=eltMesEnv, eltEnvMonFanStatusEntry=eltEnvMonFanStatusEntry, eltEnvResetButtonMode=eltEnvResetButtonMode, eltEnvMonBatteryState=eltEnvMonBatteryState, eltEnvMonBatteryStatusCharge=eltEnvMonBatteryStatusCharge, eltEnvMonFanSpeed=eltEnvMonFanSpeed, eltEnvMonBatteryStatusTable=eltEnvMonBatteryStatusTable)
