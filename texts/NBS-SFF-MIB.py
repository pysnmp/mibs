#
# PySNMP MIB module NBS-SFF-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/mrv/NBS-SFF-MIB
# Produced by pysmi-1.1.12 at Mon Jun  3 13:42:29 2024
# On host fv-az1210-277 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
NbsCmmcChannelBand, = mibBuilder.importSymbols("NBS-CMMCENUM-MIB", "NbsCmmcChannelBand")
nbs, NbsTcMHz = mibBuilder.importSymbols("NBS-MIB", "nbs", "NbsTcMHz")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, ModuleIdentity, IpAddress, Bits, Unsigned32, iso, NotificationType, Gauge32, Integer32, ObjectIdentity, Counter64, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "ModuleIdentity", "IpAddress", "Bits", "Unsigned32", "iso", "NotificationType", "Gauge32", "Integer32", "ObjectIdentity", "Counter64", "MibIdentifier")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
nbsSffMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 629, 204))
if mibBuilder.loadTexts: nbsSffMib.setLastUpdated('201706060000Z')
if mibBuilder.loadTexts: nbsSffMib.setOrganization('NBS')
if mibBuilder.loadTexts: nbsSffMib.setContactInfo('For technical support, please contact your service channel')
if mibBuilder.loadTexts: nbsSffMib.setDescription('MIB for representing SFF MSA standards')
nbsSffObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 629, 204, 1))
if mibBuilder.loadTexts: nbsSffObjects.setStatus('current')
if mibBuilder.loadTexts: nbsSffObjects.setDescription('all MIB objects in nbsSFF MIB.')
nbsSffMsaGrp = ObjectIdentity((1, 3, 6, 1, 4, 1, 629, 204, 1, 1))
if mibBuilder.loadTexts: nbsSffMsaGrp.setStatus('current')
if mibBuilder.loadTexts: nbsSffMsaGrp.setDescription('All SFF MSA objects.')
nbsSffWdmGrp = ObjectIdentity((1, 3, 6, 1, 4, 1, 629, 204, 1, 2))
if mibBuilder.loadTexts: nbsSffWdmGrp.setStatus('current')
if mibBuilder.loadTexts: nbsSffWdmGrp.setDescription('All DWDM MSA objects.')
nbsSffDiagnosticsGrp = ObjectIdentity((1, 3, 6, 1, 4, 1, 629, 204, 1, 3))
if mibBuilder.loadTexts: nbsSffDiagnosticsGrp.setStatus('current')
if mibBuilder.loadTexts: nbsSffDiagnosticsGrp.setDescription('All Diagnostics objects.')
nbsSffMsxGrp = ObjectIdentity((1, 3, 6, 1, 4, 1, 629, 204, 1, 4))
if mibBuilder.loadTexts: nbsSffMsxGrp.setStatus('current')
if mibBuilder.loadTexts: nbsSffMsxGrp.setDescription('All SFF MSA Extension objects.')
nbsSffMsaTable = MibTable((1, 3, 6, 1, 4, 1, 629, 204, 1, 1, 1), )
if mibBuilder.loadTexts: nbsSffMsaTable.setStatus('current')
if mibBuilder.loadTexts: nbsSffMsaTable.setDescription('Operations, Administration, and Management information')
nbsSffMsaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 204, 1, 1, 1, 1), ).setIndexNames((0, "NBS-SFF-MIB", "nbsSffMsaPhysicalIfIndex"))
if mibBuilder.loadTexts: nbsSffMsaEntry.setStatus('current')
if mibBuilder.loadTexts: nbsSffMsaEntry.setDescription('Represents a SFF MSA details of a port.')
nbsSffMsaPhysicalIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 204, 1, 1, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: nbsSffMsaPhysicalIfIndex.setReference('rfc1213 (MIB-II)')
if mibBuilder.loadTexts: nbsSffMsaPhysicalIfIndex.setStatus('current')
if mibBuilder.loadTexts: nbsSffMsaPhysicalIfIndex.setDescription('ifIndex from MIB2')
nbsSffMsaIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 204, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 130))).clone(namedValues=NamedValues(("unknown", 1), ("gbic", 2), ("moduleSolderedToBoard", 3), ("sfpTransceiver", 4), ("threeHundredPinXBI", 5), ("xenpak", 6), ("xfp", 7), ("xff", 8), ("xfpe", 9), ("xpak", 10), ("x2", 11), ("dwdm", 12), ("qsfp", 13), ("qsfpPlus", 14), ("cfp", 15), ("cxp", 16), ("mrvCxp", 130)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSffMsaIdentifier.setReference('Specification for SFP MSA, Table 3.2\n         Specification for XFP MSA v4.5 section 5.2 & table 32\n         InfiniBand Architecture Specification Annex A6, section 7.6.3\n         CFP MSA Hardware Specification, Table 14 CFP NVR 1')
if mibBuilder.loadTexts: nbsSffMsaIdentifier.setStatus('current')
if mibBuilder.loadTexts: nbsSffMsaIdentifier.setDescription('The MSA Identifier as reported in the MSA memory map, +1.\n\n         Some of these MSA Identifiers are also represented in\n         nbsCmmcPortType from the NBS-CMMC-MIB:\n\n         nbsSffMsaIdentifier  nbsCmmcPortType\n         -------------------  ---------------\n                  gbic   (2)  gbic (147)\n        sfpTransceiver   (4)  sfp  (125)\n                   xfp   (7)  xfp  (197)\n                  qsfp  (13)  qsfp (219)\n                 qsfp+  (14)  qsfp (219)\n                   cfp  (15)  cfp  (221)\n                   cxp  (16)  cxp  (220)\n                mrvCxp (130)  cxp  (220)')
nbsSffMsaExtIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 204, 1, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSffMsaExtIdentifier.setReference('Specification for SFP MSA')
if mibBuilder.loadTexts: nbsSffMsaExtIdentifier.setStatus('current')
if mibBuilder.loadTexts: nbsSffMsaExtIdentifier.setDescription('The field should be set to 04h for all SFP modules indicating\n         serial ID module definition.\n\n         Not supported value: 0')
nbsSffMsaOpticalConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 204, 1, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSffMsaOpticalConnector.setReference('Specification for SFP MSA, Table 3.3, and\n         InfiniBand Architecture Specification Annex A6, section 7.6.3')
if mibBuilder.loadTexts: nbsSffMsaOpticalConnector.setStatus('current')
if mibBuilder.loadTexts: nbsSffMsaOpticalConnector.setDescription('The Optical Connector as reported in the MSA memory map, +1.\n\n         Here is the list of values:\n         1 - unknown\n         2 - SC\n         3 - Fiber Channel Style 1 copper connector\n         4 - Fiber Channel Style 2 copper connector\n         5 - BNC/TNC\n         6 - Fiber Channel coaxial headers\n         7 - Fiberjack\n         8 - LC\n         9 - MT-RJ\n        10 - MU\n        11 - SG\n        12 - Optical pigtail\n        13 - MPO Parllel Optic\n        14 to 32 - Reserved\n        33 - HSSDC II\n        34 - Copper pigtail\n        35 - RJ45\n        36 to 128 - Reserved\n        -- start InfiniBand Annex A6 (CXP)\n        48 (30h: Passive Copper Cable Assembly)\n        49 (31h: Active Copper Cable Assembly (ref. Byte 147))\n        50 (32h: Active Optical Cable Assembly)\n        51 (33h: Optical Transceiver w/ optical connector)\n        -- end InfiniBand Annex A6 (CXP)\n        129 - firewireA (MRV Specific)\n        130 - cuRJ45 (MRV Specific)\n        131 - cuRJ45 with LEDs (MRV Specific)\n        132 - coaxBNC (MRV Specific)\n        133 - sataDevicePlug (MRV Specific)\n        134 - sataHostPlug (MRV Specific)\n        135 - miniCoax (MRV Specific)\n        136 to 256 - Vendor specific')
nbsSffMsaTransceiverCodes = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 204, 1, 1, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 11))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSffMsaTransceiverCodes.setReference('Specification for SFP MSA, Table 3.4')
if mibBuilder.loadTexts: nbsSffMsaTransceiverCodes.setStatus('current')
if mibBuilder.loadTexts: nbsSffMsaTransceiverCodes.setDescription('The following bit significant indicators define the\n         electronic or optical interfaces that are supported by the\n         SFP transceiver. At least one bit shall be set in this field.\n         For Fibre Channel SFPs, the Fibre Channel speed, transmission\n         media, transmitter technology, and distance capability shall\n         all be indicated.\n\n           Reserved Standard Compliance Codes\n\n          BitIndex  Byte  Bit  Description\n                     3    0-7  Reserved\n                     4    4-7  Reserved\n\n           SONET Compliance codes\n\n             12      4     3 - Reserved\n             13      4     2 - OC48 Long reach\n             14      4     1 - OC48 Intermediate reach\n             15      4     0 - OC48 Short reach\n\n             16      5     7 - Reserved\n             17      5     6 - OC 12 Single mode long reach\n             18      5     5 - OC 12 Single mode inter reach\n             19      5     4 - OC 12 Multi-mode short reach\n             20      5     3 - Reserved\n             21      5     2 - OC 3 Single mode long reach\n             22      5     1 - OC 3 Single mode inter reach\n             23      5     0 - OC 3 Multi-mode short reach\n\n           Gigabit Ethernet Compliance codes\n            24-27    6    4-7 - Reserved\n             28      6    3 - 1000BASE-T\n             29      6    2 - 1000BASE-CX\n             30      6    1 - 1000BASE-LX\n             31      6    0 - 1000BASE-SX\n\n           Fiber Channel link length\n             32      7    7 - Very long distance\n             33      7    6 - Short distance\n             34      7    5 - Intermediate distance\n             35      7    4 - Long distance\n\n           Fibre Channel transmitter technology\n            36-37    7    2 to 3 - Reserved\n             38      7    1 - Longwave laser\n             39      7    0 - Electrical inter-enclosure\n\n             40      8    7 - Electrical intra-enclosure\n             41      8    6 - Shortwave laster without OFC\n             42      8    5 - Shortwave laster with OFC\n             43      8    4 - Longwave laser\n            44-47    8    0 to 3 - Reserved\n\n           Fiber channel transmission media\n             48      9    7 - Twin Axial pair\n             49      9    6 - Shielded Twisted Pair\n             50      9    5 - Miniature coax\n             51      9    4 - Video coax\n             52      9    3 - Multi-mode, 62.5m\n             53      9    2 - Multi-mode, 50 m\n             54      9    1 - Reserved\n             55      9    0 - Single Mode\n\n          Fiber channel speed\n            56-58   10    5-7 - Reserved\n             59     10    4 - 400 MBps\n             60     10    3 - Reserved\n             61     10    2 - 200 MBps\n             62     10    1 - Reserved\n             63     10    0 - 100 MBps')
nbsSffMsaSerialEncoding = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 204, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("notSupported", 1), ("lineCode8To10", 2), ("lineCode4To5", 3), ("nrz", 4), ("manchester", 5), ("sonetScrambled", 6), ("unspecified", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSffMsaSerialEncoding.setReference('Specification for SFP MSA, Table 3.5')
if mibBuilder.loadTexts: nbsSffMsaSerialEncoding.setStatus('current')
if mibBuilder.loadTexts: nbsSffMsaSerialEncoding.setDescription('The encoding value indicates the serial encoding mechanism\n         that is the nominal design target of the particular\n         transceiver. The value shall be contained in the serial data.\n         For XFPs this object must return notSupported, and user should\n         refer to these MIB objects\n               nbsXfpSerialEncodingRZ\n               nbsXfpSerialEncodingNRZ\n               nbsXfpSerialEncodingSonetScrm\n               nbsXfpSerialEncoding8B10B\n               nbsXfpSerialEncoding64B')
nbsSffMsaNominalBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 204, 1, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSffMsaNominalBitRate.setReference('Specification for SFP MSA, BR, Nominal')
if mibBuilder.loadTexts: nbsSffMsaNominalBitRate.setStatus('current')
if mibBuilder.loadTexts: nbsSffMsaNominalBitRate.setDescription('The nominal bit rate (BR, nominal) is specified in units of\n         100 Megabits per second, rounded off to the nearest 100\n         Megabits per second. The bit rate includes those bits\n         necessary to encode and delimit the signal as well as those\n         bits carrying data information. A value of 0 indicates that\n         the bit rate is not specified and must be determined from the\n         transceiver technology. The actual information transfer rate\n         will depend on the encoding of the data, as defined by the\n         encoding value.')
nbsSffMsaLinkLengthSmfKm = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 204, 1, 1, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSffMsaLinkLengthSmfKm.setReference('Specification for SFP MSA, Length (9m) - Km and\n                  section 5.22 of XFP MSA INF_8077i')
if mibBuilder.loadTexts: nbsSffMsaLinkLengthSmfKm.setStatus('current')
if mibBuilder.loadTexts: nbsSffMsaLinkLengthSmfKm.setDescription('This value specifies the link length that is supported by the\n         transceiver while operating in compliance with the applicable\n         standards using single mode fiber. The value is in units of\n         kilometers. A value of 255 means that the transceiver supports\n         a link length greater than 254 km. A value of zero means that\n         the transceiver does not support single mode fiber or that the\n         length information must be determined from the transceiver\n         technology. XFP uses this object for the same purpose.')
nbsSffMsaLinkLengthSmf100m = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 204, 1, 1, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSffMsaLinkLengthSmf100m.setReference('Specification for SFP MSA, Length (9m) and section\n                 5.22 of XFP MSA INF_8077i')
if mibBuilder.loadTexts: nbsSffMsaLinkLengthSmf100m.setStatus('current')
if mibBuilder.loadTexts: nbsSffMsaLinkLengthSmf100m.setDescription('This value specifies the link length that is supported by the\n         transceiver while operating in compliance with the applicable\n         standards using single mode fiber. The value is in units of\n         100 meters. A value of 255 means that the transceiver supports\n         a link length greater than 25.4 km. A value of zero means that\n         the transceiver does not support single mode fiber or that the\n         length information must be determined from the transceiver\n         technology.')
nbsSffMsaLinkLengthMmf10m = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 204, 1, 1, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSffMsaLinkLengthMmf10m.setReference('Specification for SFP MSA, Length (50m)')
if mibBuilder.loadTexts: nbsSffMsaLinkLengthMmf10m.setStatus('current')
if mibBuilder.loadTexts: nbsSffMsaLinkLengthMmf10m.setDescription('This value specifies link length that is supported by the\n         transceiver while operating in compliance with applicable\n         standards using 50 micron multimode OM2 [500MHz*km at 850nm,]\n         fiber. The value is in units of 10 meters. A value of 255\n         means that the transceiver supports a link length greater\n         than 2.54 km. A value of zero means that the transceiver\n         does not support 50 micron multimode fiber or that the\n         length information must be determined from the transceiver\n         technology.')
nbsSffMsaLinkLength625Mmf10m = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 204, 1, 1, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSffMsaLinkLength625Mmf10m.setReference('Specification for SFP MSA, Length (62.5m) and\n                section 5.22 of XFP MSA INF_8077i')
if mibBuilder.loadTexts: nbsSffMsaLinkLength625Mmf10m.setStatus('current')
if mibBuilder.loadTexts: nbsSffMsaLinkLength625Mmf10m.setDescription('This value specifies link length that is supported by the\n         transceiver while operating in compliance with applicable\n         standards using 62.5 micron multimode OM1 [200 MHz*km at\n         850nm, 500 MHz*km at 1310nm] fiber. The value is in units\n         of 10 meters. A value of 255 means that the transceiver\n         supports a link length greater than 2.54 km. A value of zero\n         means that the transceiver does not support 62.5 micron\n         multimode fiber or that the length information must determined\n         from the transceiver technology. It is common for a multimode\n         transceiver to support OM1, OM2 and OM3 fiber.')
nbsSffMsaCopperLinkLength = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 204, 1, 1, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSffMsaCopperLinkLength.setReference('Specification for SFP MSA, Length Copper & section\n                 5.22 of XFP MSA INF_8077i')
if mibBuilder.loadTexts: nbsSffMsaCopperLinkLength.setStatus('current')
if mibBuilder.loadTexts: nbsSffMsaCopperLinkLength.setDescription('This value specifies the minimum link length that is supported\n         by the transceiver while operating in compliance with the\n         applicable standards using copper cable. The value is in units\n         of 1 meter. A value of 255 means that the transceiver supports\n         a link length greater than 254 meters. A value of zero means\n         that the transceiver does not support copper cables or that\n         the length information must be determined from the transceiver\n         technology. Further information about the cable design,\n         equalization, and connectors is usually required to guarantee\n         meeting a particular length requirement.')
nbsSffMsaVendorName = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 204, 1, 1, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSffMsaVendorName.setReference('Specification for SFP MSA, Vendor name')
if mibBuilder.loadTexts: nbsSffMsaVendorName.setStatus('current')
if mibBuilder.loadTexts: nbsSffMsaVendorName.setDescription('The vendor name is a 16 character field that contains ASCII\n         characters, The vendor name shall be the full name of the\n         corporation, a commonly accepted abbreviation of the name of\n         the corporation, the SCSI company code for the corporation,\n         or the stock exchange code for the corporation. At least one\n         of the vendor name or the vendor OUI fields shall contain\n         valid serial data.')
nbsSffMsaVendorOUI = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 204, 1, 1, 1, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSffMsaVendorOUI.setReference('Specification for SFP MSA, Vendor OUI')
if mibBuilder.loadTexts: nbsSffMsaVendorOUI.setStatus('current')
if mibBuilder.loadTexts: nbsSffMsaVendorOUI.setDescription('The vendor organizationally unique identifier field (vendor\n         OUI) is a 3-byte field that contains the IEEE Company\n         Identifier for the vendor. A value of all zero in the 3-byte\n         field indicates that the Vendor OUI is unspecified.')
nbsSffMsaVendorPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 204, 1, 1, 1, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSffMsaVendorPartNumber.setReference('Specification for SFP MSA, Vendor PN')
if mibBuilder.loadTexts: nbsSffMsaVendorPartNumber.setStatus('current')
if mibBuilder.loadTexts: nbsSffMsaVendorPartNumber.setDescription('The vendor part number (vendor PN) is a 16-byte field that\n         contains ASCII characters, left-aligned, defining the vendor\n         part number or product name.\n\n         Unlike the MSA standard, agent returns size 0 string if the\n         part number is unspecified and there will be no white space\n         padding.')
nbsSffMsaVendorRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 204, 1, 1, 1, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSffMsaVendorRevision.setReference('Specification for SFP MSA, Vendor Rev and XFP for MSA\n                INF8077i section 5.32')
if mibBuilder.loadTexts: nbsSffMsaVendorRevision.setStatus('current')
if mibBuilder.loadTexts: nbsSffMsaVendorRevision.setDescription("The vendor revision number (vendor rev) is a 4-byte field that\n         contains ASCII characters, defining the vendor's product\n         revision number.\n\n         Unlike the MSA standard, agent returns size 0 string if the\n         part number is unspecified and there will be no white space\n         padding.\n\n         This is a two byte string for XFP, four bytes for others.")
nbsSffMsaBaseChecksumMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 204, 1, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSffMsaBaseChecksumMatch.setReference('Specification for SFP MSA, CC_BASE and Specification\n                for XFP for MSA INF8077i section 5.36')
if mibBuilder.loadTexts: nbsSffMsaBaseChecksumMatch.setStatus('current')
if mibBuilder.loadTexts: nbsSffMsaBaseChecksumMatch.setDescription("The check code is a one byte code that can be used to verify\n         that the first 64 (0-63) bytes of serial information in the\n         SFP transceiver is valid.Returns yes if checksum matches, no\n         if checksum doesn't match. For XFPs, The check code shall be\n         the low order 8 bits of the sum of the contents of all the\n         bytes from byte 128 to byte 190, inclusive.")
nbsSffMsaLossOfSignalImplemented = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 204, 1, 1, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSffMsaLossOfSignalImplemented.setReference('Specification for SFP MSA Table 3.6')
if mibBuilder.loadTexts: nbsSffMsaLossOfSignalImplemented.setStatus('current')
if mibBuilder.loadTexts: nbsSffMsaLossOfSignalImplemented.setDescription('Byte 65 Bit 1. Signal as defined in the specification')
nbsSffMsaLossOfSignalInverted = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 204, 1, 1, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSffMsaLossOfSignalInverted.setReference('Specification for SFP MSA Table 3.6')
if mibBuilder.loadTexts: nbsSffMsaLossOfSignalInverted.setStatus('current')
if mibBuilder.loadTexts: nbsSffMsaLossOfSignalInverted.setDescription('Byte 65 Bit 2. Signal as defined in the specification')
nbsSffMsaTxFault = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 204, 1, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSffMsaTxFault.setReference('Specification for SFP MSA Table 3.6 and\n                Specification for XFP MSA INF8077i, section 5.11 &\n                table 39')
if mibBuilder.loadTexts: nbsSffMsaTxFault.setStatus('current')
if mibBuilder.loadTexts: nbsSffMsaTxFault.setDescription('Byte 65 Bit 3.TX_FAULT signal implemented. Reset definition\n          in Section III and Laser Fault condition, Generated by laser\n          safety system.')
nbsSffMsaTxDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 204, 1, 1, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSffMsaTxDisable.setReference('Specification for SFP MSA Table 3.6')
if mibBuilder.loadTexts: nbsSffMsaTxDisable.setStatus('current')
if mibBuilder.loadTexts: nbsSffMsaTxDisable.setDescription('Byte 65 Bit 4.TX_DISABLE is implemented and disables the\n          serial output.')
nbsSffMsaRateSelectImplemented = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 204, 1, 1, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSffMsaRateSelectImplemented.setReference('Specification for SFP MSA Table 3.6')
if mibBuilder.loadTexts: nbsSffMsaRateSelectImplemented.setStatus('current')
if mibBuilder.loadTexts: nbsSffMsaRateSelectImplemented.setDescription('Byte 65 Bit 5.If this bit is set then active control of the\n          rate select pin is required to change rates. If bit is not\n          set, no control of pin is required. In all cases, compliance\n          with multiple rate standards should be determined by\n          Transceiver codes in bytes 4,5,6, and 10. See table 3.4')
nbsSffMsaMaxBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 204, 1, 1, 1, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSffMsaMaxBitRate.setReference('Specification for SFP MSA  BR,max')
if mibBuilder.loadTexts: nbsSffMsaMaxBitRate.setStatus('current')
if mibBuilder.loadTexts: nbsSffMsaMaxBitRate.setDescription('The upper bit rate limit at which the SFP transceiver will\n         still meet its specifications (BR, max) is specified in units\n         of 1% above the nominal bit rate. A value of zero indicates\n         that this field is not specified.')
nbsSffMsaMinBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 204, 1, 1, 1, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSffMsaMinBitRate.setReference('Specification for SFP MSA  BR,min')
if mibBuilder.loadTexts: nbsSffMsaMinBitRate.setStatus('current')
if mibBuilder.loadTexts: nbsSffMsaMinBitRate.setDescription('The lower bit rate limit at which the SFP transceiver will\n         still meet its specifications (BR, min) is specified in units\n         of 1% below the nominal bit rate. A value of zero indicates\n         that this field is not specified.')
nbsSffMsaVendorSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 204, 1, 1, 1, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSffMsaVendorSerialNumber.setReference('Specification for SFP MSA  Vendor SN and XFP for MSA\n                INF8077i section 5.38')
if mibBuilder.loadTexts: nbsSffMsaVendorSerialNumber.setStatus('current')
if mibBuilder.loadTexts: nbsSffMsaVendorSerialNumber.setDescription("The vendor serial number (vendor SN) is a 16 character field\n         that contains ASCII characters, left-aligned and padded on\n         the right with ASCII spaces (20h), defining the vendor's\n         serial number for the SFP transceiver. A value of all zero\n         in the 16-byte field indicates that the vendor SN is\n         unspecified.")
nbsSffMsaVendorDateCode = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 204, 1, 1, 1, 1, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(6, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSffMsaVendorDateCode.setReference('Specification for SFP MSA Table 3.7 and XFP for MSA\n                INF8077i section 5.39')
if mibBuilder.loadTexts: nbsSffMsaVendorDateCode.setStatus('current')
if mibBuilder.loadTexts: nbsSffMsaVendorDateCode.setDescription("The date code is an 8-byte field that contains the vendor's\n         date code in ASCII characters. The date code is mandatory.")
nbsSffMsaExtChecksumMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 204, 1, 1, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSffMsaExtChecksumMatch.setReference('Specification for SFP MSA, CC_BASE')
if mibBuilder.loadTexts: nbsSffMsaExtChecksumMatch.setStatus('current')
if mibBuilder.loadTexts: nbsSffMsaExtChecksumMatch.setDescription('The check code is a one byte code that can be used to verify\n         that the first 32 bytes of extended serial information in the\n         SFP transceiver is valid. The check code shall be the low\n         order 8 bits of the sum of the contents of all the bytes from\n         byte 64 to byte 94, inclusive.')
nbsSffWdmTable = MibTable((1, 3, 6, 1, 4, 1, 629, 204, 1, 2, 1), )
if mibBuilder.loadTexts: nbsSffWdmTable.setStatus('current')
if mibBuilder.loadTexts: nbsSffWdmTable.setDescription('Operations, Administration, and Management information')
nbsSffWdmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 204, 1, 2, 1, 1), ).setIndexNames((0, "NBS-SFF-MIB", "nbsSffMsaPhysicalIfIndex"))
if mibBuilder.loadTexts: nbsSffWdmEntry.setStatus('current')
if mibBuilder.loadTexts: nbsSffWdmEntry.setDescription('Represents WDM properties of a port.')
nbsSffWdmClassOfPower = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 204, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("under1W", 1), ("oneToOneAndHalfW", 2), ("overOneAndHalfW", 3), ("reserved", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSffWdmClassOfPower.setReference('Specification for DWDM SFP Transceiver, section 2.2.3')
if mibBuilder.loadTexts: nbsSffWdmClassOfPower.setStatus('current')
if mibBuilder.loadTexts: nbsSffWdmClassOfPower.setDescription('Extended identifier of class of Power.')
nbsSffWdmClassOfTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 204, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("class0", 1), ("class1", 2), ("class2", 3), ("class3", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSffWdmClassOfTemperature.setReference('Specification for DWDM SFP Transceiver, section 2.2.3')
if mibBuilder.loadTexts: nbsSffWdmClassOfTemperature.setStatus('current')
if mibBuilder.loadTexts: nbsSffWdmClassOfTemperature.setDescription('Extended identifier of class of Temperature.\n         class0 - Temperature in [-5, 70C]\n         class1 - Temperature in [-40, 85C]\n         class2 - reserved\n         class3 - defined by MIB objects nbsSffDwdmMaxCaseTemperature &\n                  nbsSffDwdmMinCaseTemperature')
nbsSffWdmClassOfWdm = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 204, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noWdm", 1), ("cwdm", 2), ("dwdm", 3), ("reserved", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSffWdmClassOfWdm.setReference('Specification for DWDM SFP Transceiver, section 2.2.3')
if mibBuilder.loadTexts: nbsSffWdmClassOfWdm.setStatus('current')
if mibBuilder.loadTexts: nbsSffWdmClassOfWdm.setDescription('Extended identifier of class of WDM.\n         1 - No WDM\n         2 - CWDM\n         3 - DWDM\n         4 - Reserved')
nbsSffWdmOpticalReach = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 204, 1, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSffWdmOpticalReach.setReference('Specification for DWDM SFP Transceiver, section 2.2.8')
if mibBuilder.loadTexts: nbsSffWdmOpticalReach.setStatus('current')
if mibBuilder.loadTexts: nbsSffWdmOpticalReach.setDescription('This value specifies the link length in kilometers that is\n         supported by the transceiver while operating in compliance\n         with the applicable standards using single mode fiber.')
nbsSffWdmMaxCaseTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 204, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483647, 2147483647)).clone(70)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSffWdmMaxCaseTemperature.setReference('Specification for DWDM SFP Transceiver, section 2.2.9\n                and Specification for XFP MSA, INF8077i section 5.35')
if mibBuilder.loadTexts: nbsSffWdmMaxCaseTemperature.setStatus('current')
if mibBuilder.loadTexts: nbsSffWdmMaxCaseTemperature.setDescription('This field defines the maximum operating case temperature in\n         Celsius. For WDMs, this value is in byte 15 in A0h, For XFPs,\n         this value is in byte 190.')
nbsSffWdmMinCaseTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 204, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483647, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSffWdmMinCaseTemperature.setReference('Specification for DWDM SFP Transceiver, section 2.2.10')
if mibBuilder.loadTexts: nbsSffWdmMinCaseTemperature.setStatus('current')
if mibBuilder.loadTexts: nbsSffWdmMinCaseTemperature.setDescription('This field defines the minimum operating case temperature\n         in Celsius.')
nbsSffWdmMaxSupplyCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 204, 1, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSffWdmMaxSupplyCurrent.setReference('Specification for DWDM SFP Transceiver, section 2.2.11')
if mibBuilder.loadTexts: nbsSffWdmMaxSupplyCurrent.setStatus('current')
if mibBuilder.loadTexts: nbsSffWdmMaxSupplyCurrent.setDescription('This field defines the maximum supply current, in milli Amps,\n         which the module will consume under worst case conditions.')
nbsSffWdmNumberOfChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 204, 1, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSffWdmNumberOfChannels.setReference('Specification for DWDM SFP Transceiver, section 2.2.12')
if mibBuilder.loadTexts: nbsSffWdmNumberOfChannels.setStatus('current')
if mibBuilder.loadTexts: nbsSffWdmNumberOfChannels.setDescription('This specifies the tuning range from 1 to 63, where 1\n         indicates this module is not tunable by user commands.')
nbsSffWdmChannelSpacing = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 204, 1, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notTunable", 1), ("ghz50", 2), ("ghz100", 3), ("ghz200", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSffWdmChannelSpacing.setReference('Specification for DWDM SFP Transceiver, section 2.2.12')
if mibBuilder.loadTexts: nbsSffWdmChannelSpacing.setStatus('current')
if mibBuilder.loadTexts: nbsSffWdmChannelSpacing.setDescription('This field identifies the densest channel spacing the module\n         is compatible with and the number of channels over which the\n         module may be tuned by user command.')
nbsSffWdmVariableDecisionThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 204, 1, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notSupported", 1), ("supported", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSffWdmVariableDecisionThreshold.setReference('Specification for DWDM SFP Transceiver, section 2.2.14')
if mibBuilder.loadTexts: nbsSffWdmVariableDecisionThreshold.setStatus('current')
if mibBuilder.loadTexts: nbsSffWdmVariableDecisionThreshold.setDescription('DWDM Variable Decission Threshold.')
nbsSffWdmWavelengthMonitorType = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 204, 1, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("wavelength", 1), ("laserTemperature", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSffWdmWavelengthMonitorType.setReference('Specification for DWDM SFP Transceiver, section 2.2.14')
if mibBuilder.loadTexts: nbsSffWdmWavelengthMonitorType.setStatus('current')
if mibBuilder.loadTexts: nbsSffWdmWavelengthMonitorType.setDescription('DWDM Wavelength monitor type in A2 byte.')
nbsSffWdmExtTransmitPowerType = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 204, 1, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pwrDefault", 1), ("pwrExtended", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSffWdmExtTransmitPowerType.setReference('Specification for DWDM SFP Transceiver, section 2.2.14')
if mibBuilder.loadTexts: nbsSffWdmExtTransmitPowerType.setStatus('current')
if mibBuilder.loadTexts: nbsSffWdmExtTransmitPowerType.setDescription('DWDM Extended Transmit Power Type.')
nbsSffWdmVariableOpticalAttenuator = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 204, 1, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notImplemented", 1), ("implemented", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSffWdmVariableOpticalAttenuator.setReference('Specification for DWDM SFP Transceiver, section 2.2.14')
if mibBuilder.loadTexts: nbsSffWdmVariableOpticalAttenuator.setStatus('current')
if mibBuilder.loadTexts: nbsSffWdmVariableOpticalAttenuator.setDescription('DWDM Variable Optical Atttenuator.')
nbsSffWdmPilotToneFunctionality = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 204, 1, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("pilotToneNone", 1), ("pilotToneDetection", 2), ("pilotToneInjection", 3), ("pilotToneInjectionDetection", 4), ("pilotToneEnhanced", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSffWdmPilotToneFunctionality.setReference('Specification for DWDM SFP Transceiver, section 2.2.14')
if mibBuilder.loadTexts: nbsSffWdmPilotToneFunctionality.setStatus('current')
if mibBuilder.loadTexts: nbsSffWdmPilotToneFunctionality.setDescription('DWDM Pilot Tone Functionality.')
nbsSffWdmOptionalInterruptPin = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 204, 1, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notSupported", 1), ("supported", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSffWdmOptionalInterruptPin.setReference('Specification for DWDM SFP Transceiver, section 2.2.14')
if mibBuilder.loadTexts: nbsSffWdmOptionalInterruptPin.setStatus('current')
if mibBuilder.loadTexts: nbsSffWdmOptionalInterruptPin.setDescription('DWDM Optional Interrupt Pin.')
nbsSffWdmLaserWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 204, 1, 2, 1, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 150))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSffWdmLaserWavelength.setReference('Specification for DWDM SFP Transceiver, section 2.2.18')
if mibBuilder.loadTexts: nbsSffWdmLaserWavelength.setStatus('current')
if mibBuilder.loadTexts: nbsSffWdmLaserWavelength.setDescription('Nominal transmitter output wavelength.\n\n         For SFPs, per Specification for DWDM SFP Transceiver,\n         section 2.2.1, The laser wavelength\n         is equal to the 16 bit integer value in nm (16 bit value with\n         byte 60 as high order byte and byte 61 as low order byte) and\n         with the fractional part of the wavelength in units of 0.01nm\n         (byte 62).\n\n         For XFPs,per specification for INF8077i, see section 5.33')
nbsSffWdmFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 204, 1, 2, 1, 1, 17), NbsTcMHz()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSffWdmFrequency.setStatus('current')
if mibBuilder.loadTexts: nbsSffWdmFrequency.setDescription('Nominal transmitter frequency, in MHz')
nbsSffWdmChannelBand = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 204, 1, 2, 1, 1, 18), NbsCmmcChannelBand()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSffWdmChannelBand.setStatus('current')
if mibBuilder.loadTexts: nbsSffWdmChannelBand.setDescription('ITU Channel Band')
nbsSffWdmChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 204, 1, 2, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSffWdmChannelNumber.setStatus('current')
if mibBuilder.loadTexts: nbsSffWdmChannelNumber.setDescription('ITU Channel Number')
nbsSffDiagsTable = MibTable((1, 3, 6, 1, 4, 1, 629, 204, 1, 3, 1), )
if mibBuilder.loadTexts: nbsSffDiagsTable.setStatus('current')
if mibBuilder.loadTexts: nbsSffDiagsTable.setDescription('Operations, Administration, and Management information')
nbsSffDiagsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 204, 1, 3, 1, 1), ).setIndexNames((0, "NBS-SFF-MIB", "nbsSffMsaPhysicalIfIndex"))
if mibBuilder.loadTexts: nbsSffDiagsEntry.setStatus('current')
if mibBuilder.loadTexts: nbsSffDiagsEntry.setDescription('Represents Digital Diagnostics of a port.')
nbsSffDiagsRateIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 204, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notSupported", 1), ("rate421G", 2), ("rate842GRx", 3), ("rate842GRxTx", 4), ("rate842GTx", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSffDiagsRateIdentifier.setReference('Table 3.6a of SFF-8472 Rev 10.3 Diagnostic monitoring\n                 interface for optical transceiver')
if mibBuilder.loadTexts: nbsSffDiagsRateIdentifier.setStatus('current')
if mibBuilder.loadTexts: nbsSffDiagsRateIdentifier.setDescription('The rate identifier byte refers to several (optional) industry\n         standard definitions of Rate_Select or Application_Select\n         control behaviors, intended to manage transceiver optimization\n         for multiple operating rates.')
nbsSffDiagsLinkLengthOm3 = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 204, 1, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSffDiagsLinkLengthOm3.setReference('Specification for Diagnostic monitoring interface for\n                 optical transceiver (SFF-8472 rev 10.3)')
if mibBuilder.loadTexts: nbsSffDiagsLinkLengthOm3.setStatus('current')
if mibBuilder.loadTexts: nbsSffDiagsLinkLengthOm3.setDescription('This value specifies link length that is supported by the\n         transceiver while operating in compliance with applicable\n         standards using 50 micron multimode OM3 [2000 MHz*km] fiber.\n         The value is in units of 10 meters. A value of 255 means that\n         the transceiver supports a link length greater than 2.54 km.\n         A value of zero means that the transceiver does not support\n         50 micron multimode fiber or that the length information must\n         be determined from the transceiver technology.')
nbsSffDiagsLaserWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 204, 1, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSffDiagsLaserWavelength.setReference('Specification for Diagnostic monitoring interface for\n                 optical transceiver (SFF-8472 rev 10.3)')
if mibBuilder.loadTexts: nbsSffDiagsLaserWavelength.setStatus('current')
if mibBuilder.loadTexts: nbsSffDiagsLaserWavelength.setDescription('Nominal transmitter output wavelength at room temperature. 16\n         bit value with byte 60 as high order byte and byte 61 as low\n         order byte. The laser wavelength is equal to the the 16 bit\n         integer value in nm. This field allows the user to read the\n         laser wavelength directly, so it is not necessary to infer\n         it from the transceiver Code for Electronic Compatibility\n         (bytes 3 to 10). This also allows specification of wavelengths\n         not covered in bytes 3 to 10, such as those used in coarse WDM\n         systems.')
nbsSffDiagsLROutputImplemented = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 204, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSffDiagsLROutputImplemented.setReference('Specification for Diagnostic monitoring interface for\n                 optical transceiver (SFF-8472 rev 10.3), Table 3.7')
if mibBuilder.loadTexts: nbsSffDiagsLROutputImplemented.setStatus('current')
if mibBuilder.loadTexts: nbsSffDiagsLROutputImplemented.setDescription('Byte 64, bit 0. Value of 1 identifies a conventional\n          limiting (or unspecified) receiver output. Value of 2\n          identifies a linear receiver output.')
nbsSffDiagsPowerLevelDeclaration = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 204, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("level1", 1), ("level2", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSffDiagsPowerLevelDeclaration.setReference('Specification for Diagnostic monitoring interface for\n                 optical transceiver (SFF-8472 rev 10.3), Table 3.7')
if mibBuilder.loadTexts: nbsSffDiagsPowerLevelDeclaration.setStatus('current')
if mibBuilder.loadTexts: nbsSffDiagsPowerLevelDeclaration.setDescription('Byte 64, bit 1. Value 1 identifies Power Level 1 (or\n          unspecified) requirements. Value 2 identifies a Power\n          Level2 requirements.')
nbsSffDiagsCooledTranDeclaration = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 204, 1, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("uncooled", 1), ("cooled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSffDiagsCooledTranDeclaration.setReference('Specification for Diagnostic monitoring interface for\n                 optical transceiver (SFF-8472 rev 10.3), Table 3.7')
if mibBuilder.loadTexts: nbsSffDiagsCooledTranDeclaration.setStatus('current')
if mibBuilder.loadTexts: nbsSffDiagsCooledTranDeclaration.setDescription(' Byte 64, bit 2. Value 1 identifies a conventional\n           uncooled (or unspecified) laser implementation. Value 2\n           identifies a cooled laser transmitter implementation.')
nbsSffDiagsAddressChangeRequired = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 204, 1, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSffDiagsAddressChangeRequired.setReference('Specification for Diagnostic monitoring interface for\n                 optical transceiver (SFF-8472 rev 10.3), Table 3.9')
if mibBuilder.loadTexts: nbsSffDiagsAddressChangeRequired.setStatus('current')
if mibBuilder.loadTexts: nbsSffDiagsAddressChangeRequired.setDescription('Byte 92, bit 2 indicates whether or not it is necessary for\n          the host to perform an address change sequence before\n          accessing information at 2-wire serial address A2h. If this\n          bit is not set, the host may simply read from either address,\n          A0h or A2h, by using that value in the address byte during\n          the 2-wire communication sequence. If the bit is set, the\n          defined sequence must be executed prior to accessing\n          information at address A2h.')
nbsSffDiagsPowerMeasurementType = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 204, 1, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("oma", 1), ("averagePower", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSffDiagsPowerMeasurementType.setReference('Specification for Diagnostic monitoring interface for\n                optical transceiver (SFF-8472 rev 10.3), Table 3.9\n                Specification for XFP for MSA, INF8077i, section 5.40\n                table 56')
if mibBuilder.loadTexts: nbsSffDiagsPowerMeasurementType.setStatus('current')
if mibBuilder.loadTexts: nbsSffDiagsPowerMeasurementType.setDescription('Byte 92, bit 3 indicates whether the received power\n          measurement represents average input optical power or OMA.\n          If the bit is set, average power is monitored. If it is not,\n          OMA is monitored. For XFPs, the address location would be\n          byte 220, bit 3')
nbsSffDiagsExternallyCalibrated = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 204, 1, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSffDiagsExternallyCalibrated.setReference('Specification for Diagnostic monitoring interface for\n                 optical transceiver (SFF-8472 rev 10.3), Table 3.9')
if mibBuilder.loadTexts: nbsSffDiagsExternallyCalibrated.setStatus('current')
if mibBuilder.loadTexts: nbsSffDiagsExternallyCalibrated.setDescription('Byte 92, bit 4 Externally Calibrated\n          Two calibration options are possible if bit 6 has been set\n          indicating that digital diagnostic monitoring has been\n          implemented. If bit 4 is set, the reported values are A/D\n          counts which must be converted to real world units using\n          calibration values read using 2 wire serial address\n          1010001X (A2h) from bytes 56 to 95.')
nbsSffDiagsInternallyCalibrated = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 204, 1, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSffDiagsInternallyCalibrated.setReference('Specification for Diagnostic monitoring interface for\n                 optical transceiver (SFF-8472 rev 10.3), Table 3.9')
if mibBuilder.loadTexts: nbsSffDiagsInternallyCalibrated.setStatus('current')
if mibBuilder.loadTexts: nbsSffDiagsInternallyCalibrated.setDescription('Byte 92, bit 5 Internally Calibrated.\n          Two calibration options are possible if bit 6 has been set\n          indicating that digital diagnostic monitoring has been\n          implemented. If bit 5, Internally calibrated is set, the\n          transceiver directly reports calibrated values in units of\n          current, power etc.')
nbsSffDiagsDDMonitoringImplemented = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 204, 1, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSffDiagsDDMonitoringImplemented.setReference('Specification for Diagnostic monitoring interface for\n                 optical transceiver (SFF-8472 rev 10.3), Table 3.9')
if mibBuilder.loadTexts: nbsSffDiagsDDMonitoringImplemented.setStatus('current')
if mibBuilder.loadTexts: nbsSffDiagsDDMonitoringImplemented.setDescription('Byte 92, bit 6. If this bit is set indicating that digital\n          diagnostic monitoring has been implemented, received power\n          monitoring, transmitted power monitoring, bias current\n          monitoring, supply voltage monitoring and temperature\n          monitoring must all be implemented. Additionally, alarm and\n          warning thresholds must be written as specified in this\n          document at locations 00 to 55 on 2 wire serial address\n          1010001X (A2h)')
nbsSffDiagsOptRateSelectControl = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 204, 1, 3, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notImplemented", 1), ("implemented", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSffDiagsOptRateSelectControl.setReference('Specification for Diagnostic monitoring interface for\n                 optical transceiver (SFF-8472 rev 10.3), Table 3.10')
if mibBuilder.loadTexts: nbsSffDiagsOptRateSelectControl.setStatus('current')
if mibBuilder.loadTexts: nbsSffDiagsOptRateSelectControl.setDescription('Byte 93 bit 1. Optional Rate Select control implemented per\n          SFF-8431. Sets to 1 if not implemented, 2 if implemented.')
nbsSffDiagsOptAppSelectControl = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 204, 1, 3, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notImplemented", 1), ("implemented", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSffDiagsOptAppSelectControl.setReference('Specification for Diagnostic monitoring interface for\n                 optical transceiver (SFF-8472 rev 10.3), Table 3.10')
if mibBuilder.loadTexts: nbsSffDiagsOptAppSelectControl.setStatus('current')
if mibBuilder.loadTexts: nbsSffDiagsOptAppSelectControl.setDescription('Based on byte 93 bit 2. Optional Application Select control\n          implemented per SFF-8079. Sets to 1 if not\n          implemented, 2 if implemented.')
nbsSffDiagsOptSoftRSControlMon = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 204, 1, 3, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notImplemented", 1), ("implemented", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSffDiagsOptSoftRSControlMon.setReference('Specification for Diagnostic monitoring interface for\n                optical transceiver (SFF-8472 rev 10.3), Table 3.10\n                and Table 3.11')
if mibBuilder.loadTexts: nbsSffDiagsOptSoftRSControlMon.setStatus('current')
if mibBuilder.loadTexts: nbsSffDiagsOptSoftRSControlMon.setDescription('Based on byte 93 bit 3. Optional soft RATE_SELECT control and\n          monitoring implemented. Sets to 1 if not implemented,\n          2 if implemented.')
nbsSffDiagsOptSoftRxLoSMonitoring = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 204, 1, 3, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notImplemented", 1), ("implemented", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSffDiagsOptSoftRxLoSMonitoring.setReference('Specification for Diagnostic monitoring interface for\n                optical transceiver (SFF-8472 rev 10.3), Table 3.10\n                and Table 3.11')
if mibBuilder.loadTexts: nbsSffDiagsOptSoftRxLoSMonitoring.setStatus('current')
if mibBuilder.loadTexts: nbsSffDiagsOptSoftRxLoSMonitoring.setDescription('Based on byte 93 bit 4. Optional soft RX_LOS monitoring\n          implemented. Sets to 1 if not implemented, 2 if implemented.')
nbsSffDiagsOptSoftTxFaultMonitoring = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 204, 1, 3, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notImplemented", 1), ("implemented", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSffDiagsOptSoftTxFaultMonitoring.setReference('Specification for Diagnostic monitoring interface for\n                optical transceiver (SFF-8472 rev 10.3), Table 3.10\n                and Table 3.11')
if mibBuilder.loadTexts: nbsSffDiagsOptSoftTxFaultMonitoring.setStatus('current')
if mibBuilder.loadTexts: nbsSffDiagsOptSoftTxFaultMonitoring.setDescription('Based on byte 93 bit 5. Optional soft TX_FAULT monitoring\n          implemented. Sets to 1 if not implemented, 2 if implemented.')
nbsSffDiagsOptSoftTxDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 204, 1, 3, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notImplemented", 1), ("implemented", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSffDiagsOptSoftTxDisable.setReference('Specification for Diagnostic monitoring interface for\n                optical transceiver (SFF-8472 rev 10.3), Table 3.10\n                and Table 3.11')
if mibBuilder.loadTexts: nbsSffDiagsOptSoftTxDisable.setStatus('current')
if mibBuilder.loadTexts: nbsSffDiagsOptSoftTxDisable.setDescription('Based on byte 93 bit 6. Optional soft TX_DISABLE control and\n          monitoring implemented.Sets to 1 if not implemented, 2 if\n          implemented.')
nbsSffDiagsOptAlarmWarningFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 204, 1, 3, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notImplemented", 1), ("implemented", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSffDiagsOptAlarmWarningFlags.setReference('Specification for Diagnostic monitoring interface for\n                 optical transceiver (SFF-8472 rev 10.3), Table 3.10')
if mibBuilder.loadTexts: nbsSffDiagsOptAlarmWarningFlags.setStatus('current')
if mibBuilder.loadTexts: nbsSffDiagsOptAlarmWarningFlags.setDescription('Based on byte 93 bit 7. Optional Alarm/warning flags\n          implemented for all monitored quantities.Sets to 1 if\n          not implemented, 2 if implemented. See Table 3.18')
nbsSffDiags8472Compliance = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 204, 1, 3, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 256))).clone(namedValues=NamedValues(("notSupported", 1), ("rev9dot3of8472", 2), ("rev9dot5of8472", 3), ("rev10dot2of8472", 4), ("rev10dot4of8472", 5), ("rev11dot0of8472", 6), ("rev11dot3of8472", 7), ("rev11dot4of8472", 8), ("rev12dot0of8472", 9), ("unallocated", 256)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSffDiags8472Compliance.setReference('Specification for Diagnostic monitoring interface for\n                 optical transceiver (SFF-8472 rev 10.3), Table 3.12')
if mibBuilder.loadTexts: nbsSffDiags8472Compliance.setStatus('current')
if mibBuilder.loadTexts: nbsSffDiags8472Compliance.setDescription('Byte 94 contains an unsigned integer that indicates which\n         feature set(s) are implemented in the transceiver.')
nbsSffDiagsTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 204, 1, 3, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483647, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSffDiagsTemperature.setReference('Diagnostic Monitoring Interface for Optical\n                 Transceivers, SFF-8472 Rev 10.3 Table 3.17')
if mibBuilder.loadTexts: nbsSffDiagsTemperature.setStatus('current')
if mibBuilder.loadTexts: nbsSffDiagsTemperature.setDescription('Module temperature in centigradese.')
nbsSffDiagsTempLowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 204, 1, 3, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSffDiagsTempLowAlarm.setReference('Diagnostic Monitoring Interface for Optical\n                 Transceivers, SFF-8472 Rev 10.3 Table 3.15 and\n                 XFP for MSA INF8077i table 35.')
if mibBuilder.loadTexts: nbsSffDiagsTempLowAlarm.setStatus('current')
if mibBuilder.loadTexts: nbsSffDiagsTempLowAlarm.setDescription('Predefined temperature for low alarm threshold in\n         Centigrades.')
nbsSffDiagsTempLowWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 204, 1, 3, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSffDiagsTempLowWarn.setReference('Diagnostic Monitoring Interface for Optical\n                 Transceivers, SFF-8472 Rev 10.3 Table 3.15  and\n                 XFP for MSA INF8077i table 35.')
if mibBuilder.loadTexts: nbsSffDiagsTempLowWarn.setStatus('current')
if mibBuilder.loadTexts: nbsSffDiagsTempLowWarn.setDescription('Predefined temperature for low warning threshold in\n         Centigrades')
nbsSffDiagsTempHighWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 204, 1, 3, 1, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSffDiagsTempHighWarn.setReference('Diagnostic Monitoring Interface for Optical\n                 Transceivers, SFF-8472 Rev 10.3 Table 3.15  and\n                 XFP for MSA INF8077i table 35.')
if mibBuilder.loadTexts: nbsSffDiagsTempHighWarn.setStatus('current')
if mibBuilder.loadTexts: nbsSffDiagsTempHighWarn.setDescription('Predefined temperature for high warning threshold in\n         Centigrades')
nbsSffDiagsTempHighAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 204, 1, 3, 1, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSffDiagsTempHighAlarm.setReference('Diagnostic Monitoring Interface for Optical\n                 Transceivers, SFF-8472 Rev 10.3 Table 3.15  and\n                 XFP for MSA INF 8077i table 35.')
if mibBuilder.loadTexts: nbsSffDiagsTempHighAlarm.setStatus('current')
if mibBuilder.loadTexts: nbsSffDiagsTempHighAlarm.setDescription('Predefined temperature for high alarm threshold in\n         Centigrades')
nbsSffDiagsVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 204, 1, 3, 1, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSffDiagsVoltage.setReference('Diagnostic Monitoring Interface for Optical\n                 Transceivers, SFF-8472 Rev 10.3 Table 3.17')
if mibBuilder.loadTexts: nbsSffDiagsVoltage.setStatus('current')
if mibBuilder.loadTexts: nbsSffDiagsVoltage.setDescription('Internally measured supply voltage in transceiver in the\n         units of Volts. Bytes 98 & 99 of Address A2h')
nbsSffDiagsVoltLowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 204, 1, 3, 1, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSffDiagsVoltLowAlarm.setReference('Diagnostic Monitoring Interface for Optical\n                 Transceivers, SFF-8472 Rev 10.3 Table 3.15')
if mibBuilder.loadTexts: nbsSffDiagsVoltLowAlarm.setStatus('current')
if mibBuilder.loadTexts: nbsSffDiagsVoltLowAlarm.setDescription('Predefined voltage for low alarm threshold in the\n         units of Volts.')
nbsSffDiagsVoltLowWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 204, 1, 3, 1, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSffDiagsVoltLowWarn.setReference('Diagnostic Monitoring Interface for Optical\n                 Transceivers, SFF-8472 Rev 10.3 Table 3.15')
if mibBuilder.loadTexts: nbsSffDiagsVoltLowWarn.setStatus('current')
if mibBuilder.loadTexts: nbsSffDiagsVoltLowWarn.setDescription('Predefined voltage for low warning threshold in the\n         units of Volts.')
nbsSffDiagsVoltHighWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 204, 1, 3, 1, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSffDiagsVoltHighWarn.setReference('Diagnostic Monitoring Interface for Optical\n                 Transceivers, SFF-8472 Rev 10.3 Table 3.15')
if mibBuilder.loadTexts: nbsSffDiagsVoltHighWarn.setStatus('current')
if mibBuilder.loadTexts: nbsSffDiagsVoltHighWarn.setDescription('Predefined voltage for high warning threshold in the\n         units of Volts.')
nbsSffDiagsVoltHighAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 204, 1, 3, 1, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSffDiagsVoltHighAlarm.setReference('Diagnostic Monitoring Interface for Optical\n                 Transceivers, SFF-8472 Rev 10.3 Table 3.15')
if mibBuilder.loadTexts: nbsSffDiagsVoltHighAlarm.setStatus('current')
if mibBuilder.loadTexts: nbsSffDiagsVoltHighAlarm.setDescription('Predefined voltage for high alarm threshold in the\n         units of Volts.')
nbsSffDiagsBiasCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 204, 1, 3, 1, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSffDiagsBiasCurrent.setReference('Diagnostic Monitoring Interface for Optical\n                 Transceivers, SFF-8472 Rev 10.3 Table 3.17')
if mibBuilder.loadTexts: nbsSffDiagsBiasCurrent.setStatus('current')
if mibBuilder.loadTexts: nbsSffDiagsBiasCurrent.setDescription('Internally measured TX Bias Current in the units of mA.\n         Bytes 100 & 101 of Address A2h')
nbsSffDiagsBiasLowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 204, 1, 3, 1, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSffDiagsBiasLowAlarm.setReference('Diagnostic Monitoring Interface for Optical\n                 Transceivers, SFF-8472 Rev 10.3 Table 3.15  and\n                 XFP for MSA INF 8077i table 35.')
if mibBuilder.loadTexts: nbsSffDiagsBiasLowAlarm.setStatus('current')
if mibBuilder.loadTexts: nbsSffDiagsBiasLowAlarm.setDescription('Predefined bias current for low alarm threshold in the\n         units of mA')
nbsSffDiagsBiasLowWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 204, 1, 3, 1, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSffDiagsBiasLowWarn.setReference('Diagnostic Monitoring Interface for Optical\n                 Transceivers, SFF-8472 Rev 10.3 Table 3.15  and\n                 XFP for MSA INF 8077i table 35.')
if mibBuilder.loadTexts: nbsSffDiagsBiasLowWarn.setStatus('current')
if mibBuilder.loadTexts: nbsSffDiagsBiasLowWarn.setDescription('Predefined bias current for low warning threshold in\n         the units of mA')
nbsSffDiagsBiasHighWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 204, 1, 3, 1, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSffDiagsBiasHighWarn.setReference('Diagnostic Monitoring Interface for Optical\n                 Transceivers, SFF-8472 Rev 10.3 Table 3.15  and\n                 XFP for MSA INF 8077i table 35.')
if mibBuilder.loadTexts: nbsSffDiagsBiasHighWarn.setStatus('current')
if mibBuilder.loadTexts: nbsSffDiagsBiasHighWarn.setDescription('Predefined bias current for high warning threshold in the\n         units of mA')
nbsSffDiagsBiasHighAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 204, 1, 3, 1, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSffDiagsBiasHighAlarm.setReference('Diagnostic Monitoring Interface for Optical\n                 Transceivers, SFF-8472 Rev 10.3 Table 3.15  and\n                 XFP for MSA INF 8077i table 35.')
if mibBuilder.loadTexts: nbsSffDiagsBiasHighAlarm.setStatus('current')
if mibBuilder.loadTexts: nbsSffDiagsBiasHighAlarm.setDescription('Predefined bias current for high alarm threshold in the\n         units of mA')
nbsSffDiagsTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 204, 1, 3, 1, 1, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSffDiagsTxPower.setReference('Diagnostic Monitoring Interface for Optical\n                 Transceivers, SFF-8472 Rev 10.3 Table 3.17')
if mibBuilder.loadTexts: nbsSffDiagsTxPower.setStatus('current')
if mibBuilder.loadTexts: nbsSffDiagsTxPower.setDescription('Measured TX output power in the units of dBm.')
nbsSffDiagsTxPowerLowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 204, 1, 3, 1, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSffDiagsTxPowerLowAlarm.setReference('Diagnostic Monitoring Interface for Optical\n                 Transceivers, SFF-8472 Rev 10.3 Table 3.15  and\n                 XFP for MSA INF 8077i table 35.')
if mibBuilder.loadTexts: nbsSffDiagsTxPowerLowAlarm.setStatus('current')
if mibBuilder.loadTexts: nbsSffDiagsTxPowerLowAlarm.setDescription('Predefined Tx output power for low alarm threshold in the\n         units of dBm.')
nbsSffDiagsTxPowerLowWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 204, 1, 3, 1, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSffDiagsTxPowerLowWarn.setReference('Diagnostic Monitoring Interface for Optical\n                 Transceivers, SFF-8472 Rev 10.3 Table 3.15  and\n                 XFP for MSA INF 8077i table 35.')
if mibBuilder.loadTexts: nbsSffDiagsTxPowerLowWarn.setStatus('current')
if mibBuilder.loadTexts: nbsSffDiagsTxPowerLowWarn.setDescription('Predefined Tx output power for low warning threshold in the\n         units of dBm.')
nbsSffDiagsTxPowerHighWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 204, 1, 3, 1, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSffDiagsTxPowerHighWarn.setReference('Diagnostic Monitoring Interface for Optical\n                 Transceivers, SFF-8472 Rev 10.3 Table 3.15  and\n                 XFP for MSA INF 8077i table 35.')
if mibBuilder.loadTexts: nbsSffDiagsTxPowerHighWarn.setStatus('current')
if mibBuilder.loadTexts: nbsSffDiagsTxPowerHighWarn.setDescription('Predefined Tx output power for high warning threshold in the\n         units of dBm.')
nbsSffDiagsTxPowerHighAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 204, 1, 3, 1, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSffDiagsTxPowerHighAlarm.setReference('Diagnostic Monitoring Interface for Optical\n                 Transceivers, SFF-8472 Rev 10.3 Table 3.15  and\n                 XFP for MSA INF 8077i table 35.')
if mibBuilder.loadTexts: nbsSffDiagsTxPowerHighAlarm.setStatus('current')
if mibBuilder.loadTexts: nbsSffDiagsTxPowerHighAlarm.setDescription('Predefined Tx output power for high alarm threshold in\n         the units of dBm.')
nbsSffDiagsRxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 204, 1, 3, 1, 1, 40), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSffDiagsRxPower.setReference('Diagnostic Monitoring Interface for Optical\n                 Transceivers, SFF-8472 Rev 10.3 Table 3.16')
if mibBuilder.loadTexts: nbsSffDiagsRxPower.setStatus('current')
if mibBuilder.loadTexts: nbsSffDiagsRxPower.setDescription('Measured received optical power.\n          Received power, RX_PWR, is given in uW by the\n          following equation:\n          Rx_PWR (uW) = Rx_PWR(4) * Rx_PWR AD\n          4 (16 bit unsigned integer) +\n          Rx_PWR(3) * Rx_PWR AD\n          3 (16 bit unsigned integer) +\n          Rx_PWR(2) * Rx_PWR AD\n          2 (16 bit unsigned integer) +\n          Rx_PWR(1) * Rx_PWR AD (16 bit unsigned integer) +\n          Rx_PWR(0)')
nbsSffDiagsRxPowerLowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 204, 1, 3, 1, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSffDiagsRxPowerLowAlarm.setReference('Diagnostic Monitoring Interface for Optical\n                 Transceivers, SFF-8472 Rev 10.3 Table 3.15  and\n                 XFP for MSA INF 8077i table 35.')
if mibBuilder.loadTexts: nbsSffDiagsRxPowerLowAlarm.setStatus('current')
if mibBuilder.loadTexts: nbsSffDiagsRxPowerLowAlarm.setDescription('Predefined Rx input power for low alarm threshold in\n         the units of dBm.')
nbsSffDiagsRxPowerLowWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 204, 1, 3, 1, 1, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSffDiagsRxPowerLowWarn.setReference('Diagnostic Monitoring Interface for Optical\n                 Transceivers, SFF-8472 Rev 10.3 Table 3.15  and\n                 XFP for MSA INF 8077i table 35.')
if mibBuilder.loadTexts: nbsSffDiagsRxPowerLowWarn.setStatus('current')
if mibBuilder.loadTexts: nbsSffDiagsRxPowerLowWarn.setDescription('Predefined Rx input power for low warning threshold in\n         the units of dBm.')
nbsSffDiagsRxPowerHighWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 204, 1, 3, 1, 1, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSffDiagsRxPowerHighWarn.setReference('Diagnostic Monitoring Interface for Optical\n                 Transceivers, SFF-8472 Rev 10.3 Table 3.15  and\n                 XFP for MSA INF 8077i table 35.')
if mibBuilder.loadTexts: nbsSffDiagsRxPowerHighWarn.setStatus('current')
if mibBuilder.loadTexts: nbsSffDiagsRxPowerHighWarn.setDescription('Predefined Rx input power for high warning threshold in the\n         units of dBm.')
nbsSffDiagsRxPowerHighAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 204, 1, 3, 1, 1, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSffDiagsRxPowerHighAlarm.setReference('Diagnostic Monitoring Interface for Optical\n                 Transceivers, SFF-8472 Rev 10.3 Table 3.15  and\n                 XFP for MSA INF 8077i table 35.')
if mibBuilder.loadTexts: nbsSffDiagsRxPowerHighAlarm.setStatus('current')
if mibBuilder.loadTexts: nbsSffDiagsRxPowerHighAlarm.setDescription('Predefined Rx input power for high alarm threshold in\n         the units of dBm.')
nbsSffDiagsDataReadyBarState = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 204, 1, 3, 1, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSffDiagsDataReadyBarState.setReference('Diagnostic Monitoring Interface for Optical\n                 Transceivers, SFF-8472 Rev 10.3 Table 3.17')
if mibBuilder.loadTexts: nbsSffDiagsDataReadyBarState.setStatus('current')
if mibBuilder.loadTexts: nbsSffDiagsDataReadyBarState.setDescription('Indicates transceiver has achieved power up and data is ready.\n         Bit remains high until data is ready to be read at which time\n         the device sets the bit low. Byte 110, bit 0 of A2h')
nbsSffDiagsRxLosState = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 204, 1, 3, 1, 1, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSffDiagsRxLosState.setReference('Diagnostic Monitoring Interface for Optical\n                 Transceivers, SFF-8472 Rev 10.3 Table 3.17')
if mibBuilder.loadTexts: nbsSffDiagsRxLosState.setStatus('current')
if mibBuilder.loadTexts: nbsSffDiagsRxLosState.setDescription('Digital state of the RX_LOS Output Pin. Updated within 100ms\n         of change on pin. Byte 110, bit 1 of A2h')
nbsSffDiagsTxFaultState = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 204, 1, 3, 1, 1, 47), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSffDiagsTxFaultState.setReference('Diagnostic Monitoring Interface for Optical\n                 Transceivers, SFF-8472 Rev 10.3 Table 3.17')
if mibBuilder.loadTexts: nbsSffDiagsTxFaultState.setStatus('current')
if mibBuilder.loadTexts: nbsSffDiagsTxFaultState.setDescription('Digital state of the TX Fault Output Pin. Updated within\n         100ms of change on pin. Byte 110, bit 2 of A2h')
nbsSffDiagsSoftRateSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 204, 1, 3, 1, 1, 48), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSffDiagsSoftRateSelect.setReference('Diagnostic Monitoring Interface for Optical\n                 Transceivers, SFF-8472 Rev 10.3 Table 3.17')
if mibBuilder.loadTexts: nbsSffDiagsSoftRateSelect.setStatus('current')
if mibBuilder.loadTexts: nbsSffDiagsSoftRateSelect.setDescription("Read/write bit that allows software rate select control.\n         Writing 1 selects full bandwidth operation. This bit is\n         OR'd with the hard Rate_Select, AS(0) or RS(0) pin value.\n         See Table 3.11 for timing requirements. Default at power\n         up is logic zero/low. If Soft Rate Select is not implemented,\n         the transceiver ignores the value of this bit. Note: Specific\n         transceiver behaviors of this bit are identified in Table 3.6a\n         and referenced documents. See Table 3.18a, byte 118, bit 3 for\n         Soft RS(1) Select. Byte 110, bit 3 of A2h")
nbsSffDiagsRateSelectState0 = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 204, 1, 3, 1, 1, 49), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSffDiagsRateSelectState0.setReference('Diagnostic Monitoring Interface for Optical\n                 Transceivers, SFF-8472 Rev 10.3 Table 3.17')
if mibBuilder.loadTexts: nbsSffDiagsRateSelectState0.setStatus('current')
if mibBuilder.loadTexts: nbsSffDiagsRateSelectState0.setDescription('Digital state of the SFP Rate_Select Input Pin. Updated within\n         100ms of change on pin. Note: This pin is also known as AS(0)\n         in SFF-8079 and RS(0) in SFF-8431. Byte 110, bit 4 of A2h')
nbsSffDiagsRS1State = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 204, 1, 3, 1, 1, 50), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSffDiagsRS1State.setReference('Diagnostic Monitoring Interface for Optical\n                 Transceivers, SFF-8472 Rev 10.3 Table 3.17')
if mibBuilder.loadTexts: nbsSffDiagsRS1State.setStatus('current')
if mibBuilder.loadTexts: nbsSffDiagsRS1State.setDescription('Reserved for digital state of input pin AS(1) per SFF-8079 and\n         RS(1) per SFF-8431. Updated within 100ms of change on pin. See\n         A2h Byte 118, Bit 3 for Soft RS(1) Select control information.\n         Byte 110, bit 5 of A2h')
nbsSffDiagsSoftTxDisableSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 204, 1, 3, 1, 1, 51), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSffDiagsSoftTxDisableSelect.setReference('Diagnostic Monitoring Interface for Optical\n                 Transceivers, SFF-8472 Rev 10.3 Table 3.17')
if mibBuilder.loadTexts: nbsSffDiagsSoftTxDisableSelect.setStatus('current')
if mibBuilder.loadTexts: nbsSffDiagsSoftTxDisableSelect.setDescription('Read/write bit that allows software disable of laser.\n         Writing 1 disables laser. See Table 3.11 for enable/\n         disable timing requirements. This bit is OR d with the hard\n         TX_DISABLE pin value. Note, per SFP MSA TX_DISABLE pin is\n         default enabled unless pulled low by hardware. If Soft TX\n         Disable is not implemented, the transceiver ignores the value\n         of this bit. Default power up value is zero/low.\n         Byte 110, bit 6 of A2h')
nbsSffDiagsTxDisableState = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 204, 1, 3, 1, 1, 52), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSffDiagsTxDisableState.setReference('Diagnostic Monitoring Interface for Optical\n                 Transceivers, SFF-8472 Rev 10.3 Table 3.17')
if mibBuilder.loadTexts: nbsSffDiagsTxDisableState.setStatus('current')
if mibBuilder.loadTexts: nbsSffDiagsTxDisableState.setDescription('Digital state of the TX Disable Input Pin. Updated within\n          100ms of change on pin.')
nbsSffDiagsBiasCurrentSlope = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 204, 1, 3, 1, 1, 53), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSffDiagsBiasCurrentSlope.setReference('Diagnostic Monitoring Interface for Optical\n                 Transceivers, SFF-8472 Rev 10.3 Table 3.16')
if mibBuilder.loadTexts: nbsSffDiagsBiasCurrentSlope.setStatus('current')
if mibBuilder.loadTexts: nbsSffDiagsBiasCurrentSlope.setDescription('Fixed decimal (unsigned) calibration data, laser bias\n          current measured in mA.')
nbsSffDiagsBiasCurrentOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 204, 1, 3, 1, 1, 54), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSffDiagsBiasCurrentOffset.setReference('Diagnostic Monitoring Interface for Optical\n                 Transceivers, SFF-8472 Rev 10.3 Table 3.16')
if mibBuilder.loadTexts: nbsSffDiagsBiasCurrentOffset.setStatus('current')
if mibBuilder.loadTexts: nbsSffDiagsBiasCurrentOffset.setDescription("Fixed decimal (signed two's complement) calibration data,\n          laser bias current measured in mA.")
nbsSffDiagsTxPowerSlope = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 204, 1, 3, 1, 1, 55), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSffDiagsTxPowerSlope.setReference('Diagnostic Monitoring Interface for Optical\n                 Transceivers, SFF-8472 Rev 10.3 Table 3.16')
if mibBuilder.loadTexts: nbsSffDiagsTxPowerSlope.setStatus('current')
if mibBuilder.loadTexts: nbsSffDiagsTxPowerSlope.setDescription('Fixed decimal (unsigned) calibration data, transmitter\n          coupled output power in the units of dBm.')
nbsSffDiagsTxPowerOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 204, 1, 3, 1, 1, 56), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSffDiagsTxPowerOffset.setReference('Diagnostic Monitoring Interface for Optical\n                 Transceivers, SFF-8472 Rev 10.3 Table 3.16')
if mibBuilder.loadTexts: nbsSffDiagsTxPowerOffset.setStatus('current')
if mibBuilder.loadTexts: nbsSffDiagsTxPowerOffset.setDescription("Fixed decimal (signed two's complement) calibration data,\n          transmitter coupled output power in the units of dBm.")
nbsSffDiagsTemperatureSlope = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 204, 1, 3, 1, 1, 57), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSffDiagsTemperatureSlope.setReference('Diagnostic Monitoring Interface for Optical\n                 Transceivers, SFF-8472 Rev 10.3 Table 3.16')
if mibBuilder.loadTexts: nbsSffDiagsTemperatureSlope.setStatus('current')
if mibBuilder.loadTexts: nbsSffDiagsTemperatureSlope.setDescription('Fixed decimal (unsigned) calibration data, internal module\n          temperature in C')
nbsSffDiagsTemperatureOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 204, 1, 3, 1, 1, 58), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSffDiagsTemperatureOffset.setReference('Diagnostic Monitoring Interface for Optical\n                 Transceivers, SFF-8472 Rev 10.3 Table 3.16')
if mibBuilder.loadTexts: nbsSffDiagsTemperatureOffset.setStatus('current')
if mibBuilder.loadTexts: nbsSffDiagsTemperatureOffset.setDescription("Fixed decimal (signed two's complement) calibration data,\n          internal module temperature in C")
nbsSffDiagsVoltageSlope = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 204, 1, 3, 1, 1, 59), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSffDiagsVoltageSlope.setReference('Diagnostic Monitoring Interface for Optical\n                 Transceivers, SFF-8472 Rev 10.3 Table 3.16')
if mibBuilder.loadTexts: nbsSffDiagsVoltageSlope.setStatus('current')
if mibBuilder.loadTexts: nbsSffDiagsVoltageSlope.setDescription('Fixed decimal (unsigned) calibration data, internal module\n          supply voltage in Volts.')
nbsSffDiagsVoltageOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 204, 1, 3, 1, 1, 60), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSffDiagsVoltageOffset.setReference('Diagnostic Monitoring Interface for Optical\n                 Transceivers, SFF-8472 Rev 10.3 Table 3.16')
if mibBuilder.loadTexts: nbsSffDiagsVoltageOffset.setStatus('current')
if mibBuilder.loadTexts: nbsSffDiagsVoltageOffset.setDescription("Fixed decimal (signed two's complement) calibration data,\n          internal module supply voltage in Volts.")
nbsSffDiagsPowerLevelSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 204, 1, 3, 1, 1, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSffDiagsPowerLevelSelect.setReference('Diagnostic Monitoring Interface for Optical\n                 Transceivers, SFF-8472 Rev 10.3 Table 3.18a of A2h')
if mibBuilder.loadTexts: nbsSffDiagsPowerLevelSelect.setStatus('current')
if mibBuilder.loadTexts: nbsSffDiagsPowerLevelSelect.setDescription('Reserved for SFF-8431 Power Level (maximum power dissipation)\n          enable.\n          Value of zero disables Power Level 2 (1.0 Watt max).\n          Value of one enables Power Level 2 (1.5 Watt max).\n          Refer to Table 3.7 for Power Level declaration.\n          Refer to Table 3.11 for timing.')
nbsSffDiagsPowerLevelOpState = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 204, 1, 3, 1, 1, 62), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSffDiagsPowerLevelOpState.setReference('Diagnostic Monitoring Interface for Optical\n                 Transceivers, SFF-8472 Rev 10.3 Table 3.18a of A2h')
if mibBuilder.loadTexts: nbsSffDiagsPowerLevelOpState.setStatus('current')
if mibBuilder.loadTexts: nbsSffDiagsPowerLevelOpState.setDescription('Reserved for SFF-8431 Power Level (maximum power dissipation)\n          status.Value of zero indicates Power Level 1 operation\n         (1.0 Watt max) Value of one indicates Power Level 2 operation\n         (1.5 Watt max).Refer to Table 3.7 for Power Level declaration.\n         Refer to Table 3.11 for timing.')
nbsSffDiagsSoftRSSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 204, 1, 3, 1, 1, 63), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSffDiagsSoftRSSelect.setReference('Diagnostic Monitoring Interface for Optical\n                 Transceivers, SFF-8472 Rev 10.3 Table 3.18a of A2h')
if mibBuilder.loadTexts: nbsSffDiagsSoftRSSelect.setStatus('current')
if mibBuilder.loadTexts: nbsSffDiagsSoftRSSelect.setDescription('Read/write bit that allows software Tx rate control. Writing\n          1 selects full speed Tx operation. This bit is OR d with the\n          hard RS(1) pin value.See Table 3.11 for timing requirements.\n          Default at power up is logic zero/low. If Soft RS(1) is not\n          implemented, the transceiver ignores the value of this bit.\n          Note: Specific transceiver behaviors of this bit are\n          identified in Table 3.6a and referenced documents. See\n          Table 3.17, byte 110, bit 3 for Soft RS(0) Select.')
nbsSffMsxTableSize = MibScalar((1, 3, 6, 1, 4, 1, 629, 204, 1, 4, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSffMsxTableSize.setStatus('current')
if mibBuilder.loadTexts: nbsSffMsxTableSize.setDescription('The number of entries in nbsSffMsxTable')
nbsSffMsxTable = MibTable((1, 3, 6, 1, 4, 1, 629, 204, 1, 4, 2), )
if mibBuilder.loadTexts: nbsSffMsxTable.setStatus('current')
if mibBuilder.loadTexts: nbsSffMsxTable.setDescription('Non-standardized extensions to the Multi-Source Agreement')
nbsSffMsxEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 204, 1, 4, 2, 1), ).setIndexNames((0, "NBS-SFF-MIB", "nbsSffMsxPhysicalIfIndex"))
if mibBuilder.loadTexts: nbsSffMsxEntry.setStatus('current')
if mibBuilder.loadTexts: nbsSffMsxEntry.setDescription('Pluggable Transceiver information and settings yet to be\n         standardized')
nbsSffMsxPhysicalIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 204, 1, 4, 2, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSffMsxPhysicalIfIndex.setStatus('current')
if mibBuilder.loadTexts: nbsSffMsxPhysicalIfIndex.setDescription('MIB2 ifIndex of this port')
nbsSffMsxHasSgmiiPhy = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 204, 1, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notSupported", 1), ("no", 2), ("yes", 3))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsSffMsxHasSgmiiPhy.setStatus('current')
if mibBuilder.loadTexts: nbsSffMsxHasSgmiiPhy.setDescription('Some Gigabit Ethernet compatible SFP transeivers, such as\n         SFP-FDSGMII-M and SFP-FDSGMII-LR, have a built-in SGMII PHY.\n         Those that do require special autonegotiation processing,\n         without which autonegotiation will fail and the port will be\n         unable to pass traffic.\n\n         If the SFP has a built-in SGMII PHY, the user should set this\n         to yes(3).')
mibBuilder.exportSymbols("NBS-SFF-MIB", nbsSffMsaVendorSerialNumber=nbsSffMsaVendorSerialNumber, nbsSffDiagsTempHighWarn=nbsSffDiagsTempHighWarn, nbsSffWdmChannelSpacing=nbsSffWdmChannelSpacing, nbsSffWdmMinCaseTemperature=nbsSffWdmMinCaseTemperature, nbsSffMsaNominalBitRate=nbsSffMsaNominalBitRate, nbsSffMsxGrp=nbsSffMsxGrp, nbsSffDiagsLROutputImplemented=nbsSffDiagsLROutputImplemented, nbsSffDiagsOptSoftTxDisable=nbsSffDiagsOptSoftTxDisable, nbsSffWdmClassOfPower=nbsSffWdmClassOfPower, nbsSffDiagsRxPowerLowWarn=nbsSffDiagsRxPowerLowWarn, nbsSffDiagsTable=nbsSffDiagsTable, nbsSffDiagsTempHighAlarm=nbsSffDiagsTempHighAlarm, nbsSffMsxEntry=nbsSffMsxEntry, nbsSffWdmVariableOpticalAttenuator=nbsSffWdmVariableOpticalAttenuator, nbsSffMsaVendorDateCode=nbsSffMsaVendorDateCode, nbsSffMsxPhysicalIfIndex=nbsSffMsxPhysicalIfIndex, nbsSffMsaBaseChecksumMatch=nbsSffMsaBaseChecksumMatch, nbsSffDiagsTempLowAlarm=nbsSffDiagsTempLowAlarm, nbsSffDiagsExternallyCalibrated=nbsSffDiagsExternallyCalibrated, nbsSffDiagsOptRateSelectControl=nbsSffDiagsOptRateSelectControl, nbsSffMsaTransceiverCodes=nbsSffMsaTransceiverCodes, nbsSffMsaTxDisable=nbsSffMsaTxDisable, nbsSffMsaIdentifier=nbsSffMsaIdentifier, nbsSffMsaLinkLengthMmf10m=nbsSffMsaLinkLengthMmf10m, nbsSffDiagsBiasLowWarn=nbsSffDiagsBiasLowWarn, nbsSffMsaLinkLengthSmf100m=nbsSffMsaLinkLengthSmf100m, nbsSffWdmChannelBand=nbsSffWdmChannelBand, nbsSffDiagsSoftRSSelect=nbsSffDiagsSoftRSSelect, nbsSffMsaGrp=nbsSffMsaGrp, nbsSffDiagsBiasHighWarn=nbsSffDiagsBiasHighWarn, nbsSffMsaVendorOUI=nbsSffMsaVendorOUI, nbsSffDiagsOptSoftRxLoSMonitoring=nbsSffDiagsOptSoftRxLoSMonitoring, nbsSffDiagsVoltage=nbsSffDiagsVoltage, nbsSffMsaSerialEncoding=nbsSffMsaSerialEncoding, nbsSffDiagsBiasCurrentSlope=nbsSffDiagsBiasCurrentSlope, nbsSffDiagsBiasCurrentOffset=nbsSffDiagsBiasCurrentOffset, nbsSffMsaLinkLength625Mmf10m=nbsSffMsaLinkLength625Mmf10m, nbsSffMsaRateSelectImplemented=nbsSffMsaRateSelectImplemented, nbsSffMsxTableSize=nbsSffMsxTableSize, nbsSffDiagsInternallyCalibrated=nbsSffDiagsInternallyCalibrated, nbsSffDiagsRS1State=nbsSffDiagsRS1State, nbsSffDiagsPowerLevelSelect=nbsSffDiagsPowerLevelSelect, nbsSffDiagsBiasLowAlarm=nbsSffDiagsBiasLowAlarm, nbsSffDiagsVoltHighAlarm=nbsSffDiagsVoltHighAlarm, nbsSffWdmMaxCaseTemperature=nbsSffWdmMaxCaseTemperature, nbsSffMsaVendorPartNumber=nbsSffMsaVendorPartNumber, nbsSffWdmVariableDecisionThreshold=nbsSffWdmVariableDecisionThreshold, nbsSffDiagsOptSoftTxFaultMonitoring=nbsSffDiagsOptSoftTxFaultMonitoring, nbsSffMsaTable=nbsSffMsaTable, nbsSffDiagsRxLosState=nbsSffDiagsRxLosState, nbsSffWdmMaxSupplyCurrent=nbsSffWdmMaxSupplyCurrent, nbsSffDiagsVoltHighWarn=nbsSffDiagsVoltHighWarn, nbsSffDiagsLaserWavelength=nbsSffDiagsLaserWavelength, nbsSffMsaExtChecksumMatch=nbsSffMsaExtChecksumMatch, nbsSffMsaTxFault=nbsSffMsaTxFault, nbsSffDiagsBiasCurrent=nbsSffDiagsBiasCurrent, nbsSffMsaOpticalConnector=nbsSffMsaOpticalConnector, nbsSffMsaEntry=nbsSffMsaEntry, nbsSffMsaMaxBitRate=nbsSffMsaMaxBitRate, nbsSffDiagsDDMonitoringImplemented=nbsSffDiagsDDMonitoringImplemented, nbsSffDiagsPowerMeasurementType=nbsSffDiagsPowerMeasurementType, nbsSffMsaLossOfSignalInverted=nbsSffMsaLossOfSignalInverted, nbsSffDiagsRxPowerHighWarn=nbsSffDiagsRxPowerHighWarn, nbsSffDiagsSoftRateSelect=nbsSffDiagsSoftRateSelect, nbsSffDiagsCooledTranDeclaration=nbsSffDiagsCooledTranDeclaration, nbsSffDiagsPowerLevelDeclaration=nbsSffDiagsPowerLevelDeclaration, nbsSffWdmOpticalReach=nbsSffWdmOpticalReach, nbsSffMsaLossOfSignalImplemented=nbsSffMsaLossOfSignalImplemented, nbsSffMib=nbsSffMib, nbsSffWdmPilotToneFunctionality=nbsSffWdmPilotToneFunctionality, nbsSffDiagsOptAppSelectControl=nbsSffDiagsOptAppSelectControl, nbsSffDiagsLinkLengthOm3=nbsSffDiagsLinkLengthOm3, nbsSffMsaLinkLengthSmfKm=nbsSffMsaLinkLengthSmfKm, nbsSffMsxTable=nbsSffMsxTable, nbsSffDiagsTempLowWarn=nbsSffDiagsTempLowWarn, nbsSffMsxHasSgmiiPhy=nbsSffMsxHasSgmiiPhy, nbsSffDiagsRxPower=nbsSffDiagsRxPower, nbsSffDiagsRateIdentifier=nbsSffDiagsRateIdentifier, nbsSffWdmTable=nbsSffWdmTable, nbsSffDiagnosticsGrp=nbsSffDiagnosticsGrp, nbsSffDiagsBiasHighAlarm=nbsSffDiagsBiasHighAlarm, nbsSffDiagsTxPowerHighAlarm=nbsSffDiagsTxPowerHighAlarm, nbsSffMsaExtIdentifier=nbsSffMsaExtIdentifier, nbsSffDiagsEntry=nbsSffDiagsEntry, nbsSffDiagsOptAlarmWarningFlags=nbsSffDiagsOptAlarmWarningFlags, nbsSffDiagsRxPowerHighAlarm=nbsSffDiagsRxPowerHighAlarm, nbsSffDiagsTxPowerSlope=nbsSffDiagsTxPowerSlope, nbsSffWdmWavelengthMonitorType=nbsSffWdmWavelengthMonitorType, nbsSffDiagsTemperatureOffset=nbsSffDiagsTemperatureOffset, nbsSffWdmChannelNumber=nbsSffWdmChannelNumber, nbsSffDiagsTxPowerLowAlarm=nbsSffDiagsTxPowerLowAlarm, nbsSffDiagsTxPower=nbsSffDiagsTxPower, nbsSffDiagsTxFaultState=nbsSffDiagsTxFaultState, nbsSffDiagsTxPowerLowWarn=nbsSffDiagsTxPowerLowWarn, nbsSffDiagsTemperature=nbsSffDiagsTemperature, nbsSffWdmGrp=nbsSffWdmGrp, nbsSffMsaVendorName=nbsSffMsaVendorName, nbsSffDiagsVoltLowWarn=nbsSffDiagsVoltLowWarn, nbsSffDiagsPowerLevelOpState=nbsSffDiagsPowerLevelOpState, nbsSffWdmNumberOfChannels=nbsSffWdmNumberOfChannels, nbsSffDiagsVoltageSlope=nbsSffDiagsVoltageSlope, nbsSffMsaPhysicalIfIndex=nbsSffMsaPhysicalIfIndex, nbsSffWdmOptionalInterruptPin=nbsSffWdmOptionalInterruptPin, nbsSffObjects=nbsSffObjects, nbsSffDiagsTxDisableState=nbsSffDiagsTxDisableState, nbsSffWdmClassOfTemperature=nbsSffWdmClassOfTemperature, nbsSffWdmFrequency=nbsSffWdmFrequency, nbsSffWdmEntry=nbsSffWdmEntry, nbsSffDiagsSoftTxDisableSelect=nbsSffDiagsSoftTxDisableSelect, nbsSffDiagsTxPowerOffset=nbsSffDiagsTxPowerOffset, nbsSffDiagsOptSoftRSControlMon=nbsSffDiagsOptSoftRSControlMon, nbsSffDiags8472Compliance=nbsSffDiags8472Compliance, nbsSffDiagsAddressChangeRequired=nbsSffDiagsAddressChangeRequired, nbsSffDiagsRateSelectState0=nbsSffDiagsRateSelectState0, nbsSffDiagsTemperatureSlope=nbsSffDiagsTemperatureSlope, nbsSffWdmExtTransmitPowerType=nbsSffWdmExtTransmitPowerType, nbsSffMsaCopperLinkLength=nbsSffMsaCopperLinkLength, nbsSffDiagsDataReadyBarState=nbsSffDiagsDataReadyBarState, nbsSffMsaMinBitRate=nbsSffMsaMinBitRate, nbsSffWdmLaserWavelength=nbsSffWdmLaserWavelength, nbsSffDiagsRxPowerLowAlarm=nbsSffDiagsRxPowerLowAlarm, nbsSffMsaVendorRevision=nbsSffMsaVendorRevision, nbsSffDiagsTxPowerHighWarn=nbsSffDiagsTxPowerHighWarn, nbsSffDiagsVoltLowAlarm=nbsSffDiagsVoltLowAlarm, PYSNMP_MODULE_ID=nbsSffMib, nbsSffDiagsVoltageOffset=nbsSffDiagsVoltageOffset, nbsSffWdmClassOfWdm=nbsSffWdmClassOfWdm)
