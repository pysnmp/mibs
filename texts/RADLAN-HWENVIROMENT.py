#
# PySNMP MIB module RADLAN-HWENVIROMENT (http://snmplabs.com/pysmi)
# ASN.1 source https://pysnmp.github.io:443/mibs/asn1/RADLAN-HWENVIROMENT
# Produced by pysmi-1.1.12 at Mon Sep 16 14:54:10 2024
# On host fv-az1272-448 platform Linux version 6.5.0-1025-azure by user runner
# Using Python version 3.10.14 (main, Jul 16 2024, 19:03:10) [GCC 11.4.0]
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
rnd, = mibBuilder.importSymbols("RADLAN-MIB", "rnd")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
IpAddress, ModuleIdentity, Counter64, Bits, MibIdentifier, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, ObjectIdentity, iso, TimeTicks, Unsigned32, Counter32, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "ModuleIdentity", "Counter64", "Bits", "MibIdentifier", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "ObjectIdentity", "iso", "TimeTicks", "Unsigned32", "Counter32", "Integer32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
DisplayString, = mibBuilder.importSymbols("SNMPv2-TC-v1", "DisplayString")
rlEnv = ModuleIdentity((1, 3, 6, 1, 4, 1, 89, 83))
rlEnv.setRevisions(('2003-09-21 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: rlEnv.setRevisionsDescriptions(('Added this MODULE-IDENTITY clause.',))
if mibBuilder.loadTexts: rlEnv.setLastUpdated('200309210000Z')
if mibBuilder.loadTexts: rlEnv.setOrganization('Radlan Computer Communications Ltd.')
if mibBuilder.loadTexts: rlEnv.setContactInfo('radlan.com')
if mibBuilder.loadTexts: rlEnv.setDescription('The private MIB module definition for environment of Radlan devices.')
class RlEnvMonState(TextualConvention, Integer32):
    description = 'Represents the state of a device being monitored.\n                 Valid values are:\n\n                 normal(1):         the environment is good, such as low\n                                    temperature.\n\n                 warning(2):        the environment is bad, such as temperature\n                                    above normal operation range but not too\n                                    high.\n\n                 critical(3):       the environment is very bad, such as\n                                    temperature much higher than normal\n                                    operation limit.\n\n                 shutdown(4):       the environment is the worst, the system\n                                    should be shutdown immediately.\n\n                 notPresent(5):     the environmental monitor is not present,\n                                    such as temperature sensors do not exist.\n\n                 notFunctioning(6): the environmental monitor does not\n                                    function properly, such as a temperature\n                                    sensor generates a abnormal data like\n                                    1000 C.\n                '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("normal", 1), ("warning", 2), ("critical", 3), ("shutdown", 4), ("notPresent", 5), ("notFunctioning", 6))

rlEnvPhysicalDescription = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 83, 1))
rlEnvMonFanStatusTable = MibTable((1, 3, 6, 1, 4, 1, 89, 83, 1, 1), )
if mibBuilder.loadTexts: rlEnvMonFanStatusTable.setStatus('current')
if mibBuilder.loadTexts: rlEnvMonFanStatusTable.setDescription('The table of fan status maintained by the environmental\n                monitor.')
rlEnvMonFanStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 83, 1, 1, 1), ).setIndexNames((0, "RADLAN-HWENVIROMENT", "rlEnvMonFanStatusIndex"))
if mibBuilder.loadTexts: rlEnvMonFanStatusEntry.setStatus('current')
if mibBuilder.loadTexts: rlEnvMonFanStatusEntry.setDescription('An entry in the fan status table, representing the status of\n                the associated fan maintained by the environmental monitor.')
rlEnvMonFanStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 83, 1, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: rlEnvMonFanStatusIndex.setStatus('current')
if mibBuilder.loadTexts: rlEnvMonFanStatusIndex.setDescription('Unique index for the fan being instrumented.\n                This index is for SNMP purposes only, and has no\n                intrinsic meaning.')
rlEnvMonFanStatusDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 83, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlEnvMonFanStatusDescr.setStatus('current')
if mibBuilder.loadTexts: rlEnvMonFanStatusDescr.setDescription('Textual description of the fan being instrumented.\n                This description is a short textual label, suitable as a\n                human-sensible identification for the rest of the\n                information in the entry.')
rlEnvMonFanState = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 83, 1, 1, 1, 3), RlEnvMonState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlEnvMonFanState.setStatus('current')
if mibBuilder.loadTexts: rlEnvMonFanState.setDescription('The mandatory  state of the fan being instrumented.')
rlEnvMonSupplyStatusTable = MibTable((1, 3, 6, 1, 4, 1, 89, 83, 1, 2), )
if mibBuilder.loadTexts: rlEnvMonSupplyStatusTable.setStatus('current')
if mibBuilder.loadTexts: rlEnvMonSupplyStatusTable.setDescription('The table of power supply status maintained by the\n                environmental monitor card.')
rlEnvMonSupplyStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 83, 1, 2, 1), ).setIndexNames((0, "RADLAN-HWENVIROMENT", "rlEnvMonSupplyStatusIndex"))
if mibBuilder.loadTexts: rlEnvMonSupplyStatusEntry.setStatus('current')
if mibBuilder.loadTexts: rlEnvMonSupplyStatusEntry.setDescription('An entry in the power supply status table, representing the\n                status of the associated power supply maintained by the\n                environmental monitor card.')
rlEnvMonSupplyStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 83, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: rlEnvMonSupplyStatusIndex.setStatus('current')
if mibBuilder.loadTexts: rlEnvMonSupplyStatusIndex.setDescription('Unique index for the power supply being instrumented.\n                This index is for SNMP purposes only, and has no\n                intrinsic meaning.')
rlEnvMonSupplyStatusDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 83, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlEnvMonSupplyStatusDescr.setStatus('current')
if mibBuilder.loadTexts: rlEnvMonSupplyStatusDescr.setDescription('Textual description of the power supply being instrumented.\n                This description is a short textual label, suitable as a\n                human-sensible identification for the rest of the\n                information in the entry.')
rlEnvMonSupplyState = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 83, 1, 2, 1, 3), RlEnvMonState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlEnvMonSupplyState.setStatus('current')
if mibBuilder.loadTexts: rlEnvMonSupplyState.setDescription('The mandatory  state of the power supply being instrumented.')
rlEnvMonSupplySource = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 83, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("ac", 2), ("dc", 3), ("externalPowerSupply", 4), ("internalRedundant", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlEnvMonSupplySource.setStatus('current')
if mibBuilder.loadTexts: rlEnvMonSupplySource.setDescription('The power supply source.\n                 unknown - Power supply source unknown\n                 ac      - AC power supply\n                 dc      - DC power supply\n                 externalPowerSupply - External power supply\n                 internalRedundant - Internal redundant power supply\n                ')
mibBuilder.exportSymbols("RADLAN-HWENVIROMENT", rlEnvMonFanStatusIndex=rlEnvMonFanStatusIndex, rlEnvMonSupplySource=rlEnvMonSupplySource, rlEnvMonSupplyState=rlEnvMonSupplyState, rlEnvMonFanState=rlEnvMonFanState, rlEnv=rlEnv, rlEnvMonSupplyStatusIndex=rlEnvMonSupplyStatusIndex, rlEnvMonFanStatusEntry=rlEnvMonFanStatusEntry, rlEnvMonSupplyStatusDescr=rlEnvMonSupplyStatusDescr, rlEnvMonSupplyStatusEntry=rlEnvMonSupplyStatusEntry, rlEnvMonFanStatusDescr=rlEnvMonFanStatusDescr, PYSNMP_MODULE_ID=rlEnv, RlEnvMonState=RlEnvMonState, rlEnvMonSupplyStatusTable=rlEnvMonSupplyStatusTable, rlEnvPhysicalDescription=rlEnvPhysicalDescription, rlEnvMonFanStatusTable=rlEnvMonFanStatusTable)
