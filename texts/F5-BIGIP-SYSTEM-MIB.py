#
# PySNMP MIB module F5-BIGIP-SYSTEM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/f5/F5-BIGIP-SYSTEM-MIB
# Produced by pysmi-1.1.12 at Mon Sep 16 14:54:50 2024
# On host fv-az1272-448 platform Linux version 6.5.0-1025-azure by user runner
# Using Python version 3.10.14 (main, Jul 16 2024, 19:03:10) [GCC 11.4.0]
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint")
bigipGroups, bigipCompliances, LongDisplayString, bigipTrafficMgmt = mibBuilder.importSymbols("F5-BIGIP-COMMON-MIB", "bigipGroups", "bigipCompliances", "LongDisplayString", "bigipTrafficMgmt")
InetAddress, InetAddressType, InetPortNumber = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType", "InetPortNumber")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Gauge32, Counter64, Bits, ObjectIdentity, NotificationType, Unsigned32, Opaque, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Integer32, enterprises, ModuleIdentity, MibIdentifier, iso, IpAddress, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Counter64", "Bits", "ObjectIdentity", "NotificationType", "Unsigned32", "Opaque", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Integer32", "enterprises", "ModuleIdentity", "MibIdentifier", "iso", "IpAddress", "Counter32")
TextualConvention, MacAddress, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "MacAddress", "DisplayString")
bigipSystem = ModuleIdentity((1, 3, 6, 1, 4, 1, 3375, 2, 1))
if mibBuilder.loadTexts: bigipSystem.setLastUpdated('202004092220Z')
if mibBuilder.loadTexts: bigipSystem.setOrganization('F5 Networks, Inc.')
if mibBuilder.loadTexts: bigipSystem.setContactInfo('postal: F5 Networks, Inc. \n\t \t  801 Fifth Avenue\n                  Seattle, WA 98104\n          phone:  (206) 272-6500\n          email:  support@f5.com')
if mibBuilder.loadTexts: bigipSystem.setDescription('Top-level infrastructure of the F5 enterprise MIB tree.')
sysGlobals = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1))
sysNetwork = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2))
sysPlatform = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3))
sysProduct = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 4))
sysSubMemory = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 5))
sysSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 6))
sysHostInfoStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 7))
sysSystemStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 8))
sysSoftware = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 9))
sysClusters = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 10))
sysModules = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 11))
sysProcess = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 12))
sysVCMP = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 13))
sysCM = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 14))
sysCrypto = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 15))
sysAdmin = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 1))
sysArpNdp = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 2))
sysDot1dBridge = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 3))
sysInterfaces = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4))
sysL2 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 5))
sysPacketFilters = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 6))
sysRoute = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 7))
sysSelfIps = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 8))
sysSelfPorts = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 9))
sysSpanningTree = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 10))
sysTransmission = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 11))
sysTrunks = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 12))
sysVlans = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 13))
sysDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 14))
sysTunnels = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 15))
sysLldp = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 16))
sysIPsec = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 17))
sysGlobalAttrs = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 1))
sysGlobalStats = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2))
sysGlobalAttr = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 1, 1))
sysGlobalStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1))
sysGlobalAuthStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 2))
sysGlobalConnPoolStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 3))
sysGlobalHttpStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 4))
sysGlobalIcmpStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 5))
sysGlobalIcmp6Stat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 6))
sysGlobalIpStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 7))
sysGlobalIp6Stat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 8))
sysGlobalClientSslStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9))
sysGlobalServerSslStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 10))
sysGlobalStreamStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 11))
sysGlobalTcpStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 12))
sysGlobalUdpStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 13))
sysGlobalFastHttpStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 14))
sysGlobalXmlStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 15))
sysGlobalIiopStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 16))
sysGlobalRtspStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 17))
sysGlobalSctpStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 18))
sysGlobalFastL4Stat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 19))
sysGlobalHost = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 20))
sysGlobalTmmStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 21))
sysGlobalHttpCompressionStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 22))
sysGlobalWebAccelerationStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 23))
sysGlobalDnsStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 24))
sysGlobalLsnPoolStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 25))
sysGlobalFtpStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 26))
sysGlobalSipStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 27))
sysGlobalPptpStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 28))
sysGlobalPcpStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 29))
sysGlobalDnsServerStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 30))
sysGlobalMptcpStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 31))
sysGlobalTftpStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 32))
sysGlobalLsnPoolFailureStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 33))
sysGlobalIpsecalgStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 34))
sysGlobalDiametersessionStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 35))
sysGlobalDiameterrouterStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 36))
sysGlobalSipsessionStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 37))
sysGlobalSiprouterStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 38))
sysGlobalFwNatDynamicPoolStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 39))
sysGlobalFwNatDynamicPoolFailureStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 40))
sysGlobalFwNatStaticSourceTranslationPoolStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 41))
sysGlobalFwNatStaticDestinationTranslationPoolStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 42))
sysAdminIp = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 1, 1))
sysSysDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 14, 1))
sysUnicastAddr = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 14, 2))
sysSysDeviceActiveModules = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 14, 4))
sysSysDeviceInactiveModules = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 14, 5))
sysSysDeviceOptionalModules = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 14, 6))
sysSysDeviceTimelimitedModules = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 14, 7))
sysCpu = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 1))
sysChassis = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 2))
sysGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 3))
sysDeviceModelOIDs = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4))
sysPlatformInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 5))
sysCpuSensor = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 6))
sysChassisFan = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 2, 1))
sysChassisPowerSupply = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 2, 2))
sysChassisTemp = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 2, 3))
sysBladeTemp = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 2, 4))
sysBladeVoltage = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 2, 5))
sysArpStaticEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 2, 1))
sysDot1dbaseStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 3, 1))
sysDot1dbaseStatPort = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 3, 2))
sysInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 1))
sysInterfaceMediaOptions = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 2))
sysInterfaceId = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 3))
sysInterfaceStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 4))
sysIfxStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 5))
sysInterfaceMediaSfp = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 6))
sysSwitchDdmStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 7))
sysL2Forward = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 5, 1))
sysL2ForwardStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 5, 2))
sysL2ForwardAttr = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 5, 3))
sysPacketFilter = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 6, 1))
sysPacketFilterAddress = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 6, 2))
sysPacketFilterVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 6, 3))
sysPacketFilterMac = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 6, 4))
sysPacketFilterStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 6, 5))
sysRouteMgmtEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 7, 1))
sysRouteStaticEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 7, 2))
sysSelfIp = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 8, 1))
sysSelfPort = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 9, 1))
sysSelfPortDefault = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 9, 2))
sysStp = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 10, 1))
sysStpGlobals = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 10, 2))
sysStpInterfaceMbr = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 10, 3))
sysStpVlanMbr = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 10, 4))
sysStpBridgeStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 10, 5))
sysStpBridgeTreeStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 10, 6))
sysStpInterfaceStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 10, 7))
sysStpInterfaceTreeStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 10, 8))
sysStpGlobals2 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 10, 9))
sysDot3Stat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 11, 1))
sysTrunk = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 12, 1))
sysTrunkStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 12, 2))
sysTrunkCfgMember = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 12, 3))
sysVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 13, 1))
sysVlanMember = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 13, 2))
sysVlanGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 13, 3))
sysVlanGroupMbr = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 13, 4))
sysProxyExclusion = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 13, 5))
sysVlanStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 13, 6))
sysVlanxStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 13, 7))
sysVlanIfcStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 13, 8))
sysFecStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 15, 1))
sysHostMemory = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 7, 1))
sysHostCpu = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 7, 2))
sysHostDisk = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 7, 3))
sysMultiHost = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 7, 4))
sysMultiHostCpu = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 7, 5))
sysLogicalDisk = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 7, 6))
sysPhysicalDisk = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 7, 7))
sysDiskBay = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 7, 8))
sysLogicalDiskMembers = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 7, 9))
sysSoftwareVolume = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 9, 1))
sysSoftwareImage = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 9, 2))
sysSoftwareHotfix = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 9, 3))
sysSoftwareStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 9, 4))
sysPvaStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 8, 1))
sysTmmStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 8, 2))
sysTmmProcStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 8, 3))
sysTmmPagesStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 8, 4))
sysCluster = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 10, 1))
sysClusterMbr = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 10, 2))
sysChassisSlot = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 10, 3))
sysModuleAllocation = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 11, 1))
sysProcPidStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 12, 1))
sysPlaneStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 12, 2))
sysVcmp = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 13, 1))
sysVcmpCpuCore = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 13, 2))
sysVcmpVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 13, 3))
sysVcmpStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 13, 4))
sysVcmpAssignedSlots = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 13, 5))
sysVcmpAllowedSlots = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 13, 6))
sysVirtualDisk = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 13, 7))
sysCmSyncStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 14, 1))
sysCmSyncStatusDetails = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 14, 2))
sysCmFailoverStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 14, 3))
sysCmFailoverStatusDetails = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 14, 4))
sysCmTrafficGroupStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 14, 5))
sysCertificateFileObject = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 15, 1))
sysCertValidatorOcsp = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 15, 2))
sysJoinCertValidator = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 15, 3))
sysCertValidatorOcspStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 15, 4))
sysCertStatusObject = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 15, 5))
sysCertOrderManager = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 15, 6))
sysCertOrderManagerStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 15, 7))
sysJoinCertOrderManager = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 15, 8))
sysJoinCertOrderManagerStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 15, 9))
sysLldpNeighbors = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 16, 1))
sysIpsecSpdStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 17, 1))
bigip520 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 1))
bigip540 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 2))
bigip1000 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 3))
bigip1500 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 4))
bigip2400 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 5))
bigip3400 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 6))
bigip4100 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 7))
bigip5100 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 8))
bigip5110 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 9))
bigip6400 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 10))
bigip6800 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 11))
bigip8400 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 12))
bigip8800 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 13))
em3000 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 14))
wj300 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 15))
wj400 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 16))
wj500 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 17))
wj800 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 18))
bigipViprion4 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 19))
bigip1600 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 20))
bigip3600 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 21))
bigip6900 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 22))
bigip8900 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 23))
bigip3900 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 24))
bigip8950 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 25))
em4000 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 26))
bigip11050 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 27))
em500 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 28))
arx1000 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 29))
arx2000 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 30))
arx4000 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 31))
arx500 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 32))
bigip3410 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 33))
bigipPb100 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 34))
bigipPb100n = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 35))
sam4300 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 36))
firepass1200 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 37))
firepass4100 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 38))
firepass4300 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 39))
swanWJ200 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 40))
trafficShield4100 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 41))
wa4500 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 42))
bigipVirtualEdition = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 43))
bigip11000 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 44))
bigip11050N = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 45))
bigipVprB2100 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 46))
bigipVprB4300 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 47))
bigipVprC2400 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 48))
arx1500 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 49))
arx2500 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 50))
bigip11000F = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 51))
bigip11050F = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 52))
bigip6900F = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 53))
bigip6900N = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 54))
bigip6900S = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 55))
bigip8900F = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 56))
bigip8950S = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 57))
bigipPb200N = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 58))
bigip4000 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 59))
bigip10000 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 60))
bigip2000 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 61))
bigip5000 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 62))
bigip7000 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 63))
bigip800 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 64))
bigipVprB4300N = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 65))
bigip10000F = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 66))
bigip10000S = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 67))
bigip7000F = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 68))
bigip7000S = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 69))
bigipVprB2250 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 70))
bigip5050 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 71))
bigip5250 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 72))
bigip4050 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 73))
bigip4250 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 74))
bigip2050 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 75))
bigip2250 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 76))
bigip7050 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 77))
bigip7250 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 78))
bigip10050 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 79))
bigip10250 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 80))
bigip2200 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 81))
bigip4200 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 82))
bigip5200 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 83))
bigip7200 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 84))
bigip7200F = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 85))
bigip7200S = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 86))
bigip10200 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 87))
bigip10200F = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 88))
bigip10200S = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 89))
bigiq7000 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 90))
bigip5250F = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 91))
bigip12050 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 92))
bigip10350N = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 93))
bigipVcmpGuest = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 94))
bigipVprC2200 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 95))
bigip7055 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 96))
bigip7255 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 97))
bigip10055 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 98))
bigip10255 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 99))
bigipPb200 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 100))
bigipVprB2150 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 101))
bigipVprB4450N = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 102))
bigip10350 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 103))
bigipi2600 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 104))
bigipi2800 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 105))
bigipi4600 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 106))
bigipi4800 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 107))
bigipi5600 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 108))
bigipi5800 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 109))
bigipi7600 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 110))
bigipi7800 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 111))
bigipi10600 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 112))
bigipi10800 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 113))
bigipi12600 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 114))
bigipi12800 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 115))
bigipi15600 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 116))
bigipi15800 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 117))
herculoni2800 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 118))
herculoni5800 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 119))
herculoni10800 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 120))
bigipi11600 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 121))
bigipi11800 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 122))
bigipi11800_DS = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 123)).setLabel("bigipi11800-DS")
bigipi5820_DF = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 124)).setLabel("bigipi5820-DF")
bigipi7820_DF = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 125)).setLabel("bigipi7820-DF")
bigipi850 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 126))
bigipi11600_DS = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 127)).setLabel("bigipi11600-DS")
bigipi11400_DS = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 128)).setLabel("bigipi11400-DS")
bigipi7600_D = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 129)).setLabel("bigipi7600-D")
bigipi7800_D = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 130)).setLabel("bigipi7800-D")
bigipi15600_N = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 131)).setLabel("bigipi15600-N")
bigipi15800_N = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 132)).setLabel("bigipi15800-N")
bigipi10610 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 133))
bigipi10810 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 134))
ykVprC2400 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 135))
ykVprB2250 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 136))
ykVprB2150 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 137))
yki2600 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 138))
yki2800 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 139))
yki4600 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 140))
yki4800 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 141))
yki5600 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 142))
yki5800 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 143))
yki7600 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 144))
yki7800 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 145))
yki10600 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 146))
yki10800 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 147))
unknown = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 4, 1000))
sysAttrArpMaxEntries = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 1, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAttrArpMaxEntries.setStatus('current')
if mibBuilder.loadTexts: sysAttrArpMaxEntries.setDescription('The maximum number of dynamic entries which can be exist\n\t\tat one time.')
sysAttrArpAddReciprocal = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAttrArpAddReciprocal.setStatus('current')
if mibBuilder.loadTexts: sysAttrArpAddReciprocal.setDescription('When enabled add the IP/MAC address of an ARP requester \n\t\tinto the ARP table. Enabling this field can allow a malicious \n\t\tuser on the local net to poison the ARP cache. Disabling \n\t\tit reduces the performance of the system')
sysAttrArpTimeout = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAttrArpTimeout.setStatus('current')
if mibBuilder.loadTexts: sysAttrArpTimeout.setDescription('Determine how long (in seconds) ARP entries are kept in\n\t\tthe cache before being marked stale.')
sysAttrArpRetries = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAttrArpRetries.setStatus('current')
if mibBuilder.loadTexts: sysAttrArpRetries.setDescription('The maximum number of times to request an ARP before\n\t\tgiving up and marking the IP address as unavailable.')
sysAttrBootQuiet = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAttrBootQuiet.setStatus('current')
if mibBuilder.loadTexts: sysAttrBootQuiet.setDescription('The behavior of boot message display during a reboot of  \n\t\tthe system. Enabling this suppresses the messages. \n\t\tDisabling this displays messages.')
sysAttrConfigsyncState = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 1, 1, 6), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAttrConfigsyncState.setStatus('deprecated')
if mibBuilder.loadTexts: sysAttrConfigsyncState.setDescription('Deprecated! Replaced by sysCmSyncStatus and sysCmSyncStatusDetails.\n\t\t Enumerated state between peer systems.\n\t\t-1 - uninitialized or disabled config state\n\t\t 0 - Synchronized\n\t\t 1 - Local config modified, recommend configsync to peer\n\t\t 2 - Peer config modified, recommend configsync from peer\n\t\t 3 - Config modified on both systems, manual intervention required')
sysAttrConnAdaptiveReaperHiwat = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 1, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAttrConnAdaptiveReaperHiwat.setStatus('current')
if mibBuilder.loadTexts: sysAttrConnAdaptiveReaperHiwat.setDescription('The high threshold for dynamic reaper, at which point no \n\t\t new connection will be allowed.')
sysAttrConnAdaptiveReaperLowat = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 1, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAttrConnAdaptiveReaperLowat.setStatus('current')
if mibBuilder.loadTexts: sysAttrConnAdaptiveReaperLowat.setDescription('The low threshold for dynamic reaper, at which point the \n\t\t reaper will kick in.')
sysAttrConnAutoLasthop = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAttrConnAutoLasthop.setStatus('current')
if mibBuilder.loadTexts: sysAttrConnAutoLasthop.setDescription('The behavior of automatic last hop pools.')
sysAttrFailoverActiveMode = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAttrFailoverActiveMode.setStatus('deprecated')
if mibBuilder.loadTexts: sysAttrFailoverActiveMode.setDescription('Deprecated! The redundant pair mode. Enabling is to use active-active mode. \n\t\tBy default this is disable, active-standby mode is used.')
sysAttrFailoverForceActive = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAttrFailoverForceActive.setStatus('deprecated')
if mibBuilder.loadTexts: sysAttrFailoverForceActive.setDescription('Deprecated! The behavior of failover. Enabling makes failover daemon \n\t\talways attempt to become the active unit.')
sysAttrFailoverForceStandby = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAttrFailoverForceStandby.setStatus('deprecated')
if mibBuilder.loadTexts: sysAttrFailoverForceStandby.setDescription('Deprecated! The behavior of failover. Enabling makes failover daemon \n\t\tgo to standby whenever is senses its peer alive.')
sysAttrFailoverIsRedundant = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAttrFailoverIsRedundant.setStatus('current')
if mibBuilder.loadTexts: sysAttrFailoverIsRedundant.setDescription('The redundant mode of the system.')
sysAttrFailoverMemoryRestartPercent = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 1, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAttrFailoverMemoryRestartPercent.setStatus('deprecated')
if mibBuilder.loadTexts: sysAttrFailoverMemoryRestartPercent.setDescription('Deprecated! Refer sysAttrConnAdaptiveReaperHiwat and sysAttrConnAdaptiveReaperLowat\n\t\tfor memory threshold when TMM (Traffic Management Module) takes actions.   \n\t\tThe percentage of memory usage that triggers reboot.')
sysAttrFailoverNetwork = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAttrFailoverNetwork.setStatus('current')
if mibBuilder.loadTexts: sysAttrFailoverNetwork.setDescription('The  behavior of using the network as a backup to, or\n\t\tinstead of, the serial line for failover if this value \n\t\tis 1.  By default this feature is disabled.')
sysAttrFailoverStandbyLinkDownTime = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 1, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAttrFailoverStandbyLinkDownTime.setStatus('current')
if mibBuilder.loadTexts: sysAttrFailoverStandbyLinkDownTime.setDescription("How long the external link is held down when the unit \n\t\tfails over and becomes standby. This is so an external \n\t\tswitch will update its L2 tables and use the newly active \n\t\tunit's link. Each unit = 1/10 of a second. \n\t\tZero value = disable (ie. do not bring link down).")
sysAttrFailoverSslhardware = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAttrFailoverSslhardware.setStatus('deprecated')
if mibBuilder.loadTexts: sysAttrFailoverSslhardware.setDescription('Deprecated! This feature has been eliminated.\n\t\tEnables/disables the action prescribed by \n\t\tsysAttrFailoverSslhardwareAction (failover or reboot).')
sysAttrFailoverSslhardwareAction = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("failover", 0), ("reboot", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAttrFailoverSslhardwareAction.setStatus('deprecated')
if mibBuilder.loadTexts: sysAttrFailoverSslhardwareAction.setDescription('Deprecated! This feature has been eliminated.\n\t\tThis is controlled by the sysAttrFailoverSslhardware.  \n\t\tIf sysAttrFailoverSslhardware is enabled, the action \n\t\tprescribed here will take place when SSL hardware fails.')
sysAttrFailoverUnitMask = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 1, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAttrFailoverUnitMask.setStatus('deprecated')
if mibBuilder.loadTexts: sysAttrFailoverUnitMask.setDescription('Deprecated! Refer to sysCmTrafficGroupStatus, sysCmFailoverStatus, and\n\t\tsysCmFailoverStatusDetails.\n\t\tThis data indicates whether the machine is active or standby.\n\t\tThe value for this data could be 0, 1, 2, or 3. \n\t\tThe values of 1 and 2 are only defined for an active-active installation. \n\t\tIf two boxes are both active, value for unit 1 will be 1 and value for unit 2 will be 2. \n\t\tOtherwise, for active unit, this value is 3; for stand-by unit, this value is 0.')
sysAttrFailoverUnitId = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 1, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAttrFailoverUnitId.setStatus('deprecated')
if mibBuilder.loadTexts: sysAttrFailoverUnitId.setDescription('Deprecated! Refer to sysCmTrafficGroupStatus, sysCmFailoverStatus, and\n\t\tsysCmFailoverStatusDetails.\n\t\tThe controller unique unit id, 1 or 2, in the event that \n\t\tnetwork communication is not possible with its peer.')
sysAttrModeMaint = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAttrModeMaint.setStatus('current')
if mibBuilder.loadTexts: sysAttrModeMaint.setDescription('The state of system maintenance mode. \n\t\t disable - not in maintenance mode; \n\t\t enable  - maintenance mode.')
sysAttrPacketFilter = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAttrPacketFilter.setStatus('current')
if mibBuilder.loadTexts: sysAttrPacketFilter.setDescription('This option globally enables or disables processing of all \n\t\t\tpacket filter options, including the rule list. The packet \n\t\t\tfilter is enabled by default.')
sysAttrPacketFilterAllowImportantIcmp = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAttrPacketFilterAllowImportantIcmp.setStatus('current')
if mibBuilder.loadTexts: sysAttrPacketFilterAllowImportantIcmp.setDescription('This option causes the packet filter to automatically \n\t\t\taccept a number of important ICMP types without requiring \n\t\t\tthe addition of a rule to handle them. Acceptance of ICMP \n\t\t\ttraffic by this option occurs prior to rule list evaluation, \n\t\t\tmaking it impossible to override the behavior of this option \n\t\t\twith a rule. The types of ICMP packets accepted by this \n\t\t\toption include:\n\t\t\tUNREACH (3) - all types \n\t\t\tSOURCEQUENCH (4) \n\t\t\tREDIRECT (5) - all types \n\t\t\tTIMEXCEED (11) - all types \n\t\t\tThis option is enabled by default.')
sysAttrPacketFilterEstablished = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAttrPacketFilterEstablished.setStatus('current')
if mibBuilder.loadTexts: sysAttrPacketFilterEstablished.setDescription('The status of filter established feature. This option \n\t\t\t controls whether or not filter rules are applied to \n\t\t\t packets which are part of an existing, established \n\t\t\t connection or pseudo-connection. When this option is \n\t\t\t enabled, all ingress packets are subject to filter \n\t\t\t rules. When the option is disabled, filter rules are not \n\t\t\t applied to packets which are part of an existing \n\t\t\t connection. That is useful to prevent filtering of reply \n\t\t\t traffic. This option is disabled by default.')
sysAttrPacketFilterDefaultAction = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("accept", 0), ("discard", 1), ("reject", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAttrPacketFilterDefaultAction.setStatus('current')
if mibBuilder.loadTexts: sysAttrPacketFilterDefaultAction.setDescription('The filter default action. This variable controls how to \n\t\t\t handle packets which did not match any rules. It can be \n\t\t\t either accept, discard or reject. The default value is \n\t\t\t accept.')
sysAttrPacketFilterSendIcmpErrors = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAttrPacketFilterSendIcmpErrors.setStatus('current')
if mibBuilder.loadTexts: sysAttrPacketFilterSendIcmpErrors.setDescription('The feature to control the kind of errors to send for REJECT rules.')
sysAttrPvaAcceleration = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("partial", 1), ("full", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAttrPvaAcceleration.setStatus('current')
if mibBuilder.loadTexts: sysAttrPvaAcceleration.setDescription('The type of hardware acceleration desired.')
sysAttrVlanFDBTimeout = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 1, 1, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAttrVlanFDBTimeout.setStatus('current')
if mibBuilder.loadTexts: sysAttrVlanFDBTimeout.setDescription('Controls how long before an entry expires in the L2 forwarding \n\t\tdatabase.')
sysAttrWatchdogState = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 1, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAttrWatchdogState.setStatus('current')
if mibBuilder.loadTexts: sysAttrWatchdogState.setDescription('The state of watch dog feature - a hardware device that \n\t\t monitors the system for hardware failure. ')
sysStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysStatResetStats.setStatus('current')
if mibBuilder.loadTexts: sysStatResetStats.setDescription('The action to reset resettable statistics data in sysGlobalStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
sysStatClientPktsIn = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatClientPktsIn.setStatus('current')
if mibBuilder.loadTexts: sysStatClientPktsIn.setDescription('The number of packets received by the system from client-side.')
sysStatClientBytesIn = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatClientBytesIn.setStatus('current')
if mibBuilder.loadTexts: sysStatClientBytesIn.setDescription('The number of bytes received by the system from client-side.')
sysStatClientPktsOut = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatClientPktsOut.setStatus('current')
if mibBuilder.loadTexts: sysStatClientPktsOut.setDescription('The number of packets sent to client-side from the system.')
sysStatClientBytesOut = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatClientBytesOut.setStatus('current')
if mibBuilder.loadTexts: sysStatClientBytesOut.setDescription('The number of bytes sent to client-side from the system.')
sysStatClientMaxConns = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatClientMaxConns.setStatus('current')
if mibBuilder.loadTexts: sysStatClientMaxConns.setDescription('The maximum connections from client-side to the system.')
sysStatClientTotConns = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatClientTotConns.setStatus('current')
if mibBuilder.loadTexts: sysStatClientTotConns.setDescription('The total connections from client-side to the system.')
sysStatClientCurConns = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatClientCurConns.setStatus('current')
if mibBuilder.loadTexts: sysStatClientCurConns.setDescription('The current connections from client-side to the system.')
sysStatServerPktsIn = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatServerPktsIn.setStatus('current')
if mibBuilder.loadTexts: sysStatServerPktsIn.setDescription('The number of packets received by the system from server-side.')
sysStatServerBytesIn = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatServerBytesIn.setStatus('current')
if mibBuilder.loadTexts: sysStatServerBytesIn.setDescription('The number of bytes received by the system from server-side.')
sysStatServerPktsOut = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatServerPktsOut.setStatus('current')
if mibBuilder.loadTexts: sysStatServerPktsOut.setDescription('The number of packets sent to server-side from the system.')
sysStatServerBytesOut = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatServerBytesOut.setStatus('current')
if mibBuilder.loadTexts: sysStatServerBytesOut.setDescription('The number of bytes sent to server-side from the system.')
sysStatServerMaxConns = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatServerMaxConns.setStatus('current')
if mibBuilder.loadTexts: sysStatServerMaxConns.setDescription('The maximum connections from server-side to the system.')
sysStatServerTotConns = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatServerTotConns.setStatus('current')
if mibBuilder.loadTexts: sysStatServerTotConns.setDescription('The total connections from server-side to the system.')
sysStatServerCurConns = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatServerCurConns.setStatus('current')
if mibBuilder.loadTexts: sysStatServerCurConns.setDescription('The current connections from server-side to the system.')
sysStatPvaClientPktsIn = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatPvaClientPktsIn.setStatus('current')
if mibBuilder.loadTexts: sysStatPvaClientPktsIn.setDescription('The number of hardware accelerated packets received \n\t\tby the system from client-side.')
sysStatPvaClientBytesIn = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatPvaClientBytesIn.setStatus('current')
if mibBuilder.loadTexts: sysStatPvaClientBytesIn.setDescription('The number of hardware accelerated bytes received \n\t\tby the system from client-side.')
sysStatPvaClientPktsOut = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatPvaClientPktsOut.setStatus('current')
if mibBuilder.loadTexts: sysStatPvaClientPktsOut.setDescription('The number of hardware accelerated packets sent to client-side from the system.')
sysStatPvaClientBytesOut = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatPvaClientBytesOut.setStatus('current')
if mibBuilder.loadTexts: sysStatPvaClientBytesOut.setDescription('The number of hardware accelerated bytes sent to client-side from the system.')
sysStatPvaClientMaxConns = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatPvaClientMaxConns.setStatus('current')
if mibBuilder.loadTexts: sysStatPvaClientMaxConns.setDescription('The maximum hardware accelerated connections from client-side to the system.')
sysStatPvaClientTotConns = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatPvaClientTotConns.setStatus('current')
if mibBuilder.loadTexts: sysStatPvaClientTotConns.setDescription('The total hardware accelerated connections from client-side to the system.')
sysStatPvaClientCurConns = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatPvaClientCurConns.setStatus('current')
if mibBuilder.loadTexts: sysStatPvaClientCurConns.setDescription('The current hardware accelerated connections from client-side to the system.')
sysStatPvaServerPktsIn = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatPvaServerPktsIn.setStatus('current')
if mibBuilder.loadTexts: sysStatPvaServerPktsIn.setDescription('The number of hardware accelerated packets received \n\t\tby the system from server-side.')
sysStatPvaServerBytesIn = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatPvaServerBytesIn.setStatus('current')
if mibBuilder.loadTexts: sysStatPvaServerBytesIn.setDescription('The number of hardware accelerated bytes received \n\t\tby the system from server-side.')
sysStatPvaServerPktsOut = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatPvaServerPktsOut.setStatus('current')
if mibBuilder.loadTexts: sysStatPvaServerPktsOut.setDescription('The number of hardware accelerated packets sent to server-side from the system.')
sysStatPvaServerBytesOut = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatPvaServerBytesOut.setStatus('current')
if mibBuilder.loadTexts: sysStatPvaServerBytesOut.setDescription('The number of hardware accelerated bytes sent to server-side from the system.')
sysStatPvaServerMaxConns = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatPvaServerMaxConns.setStatus('current')
if mibBuilder.loadTexts: sysStatPvaServerMaxConns.setDescription('The maximum hardware accelerated connections from server-side to the system.')
sysStatPvaServerTotConns = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatPvaServerTotConns.setStatus('current')
if mibBuilder.loadTexts: sysStatPvaServerTotConns.setDescription('The total hardware accelerated connections from server-side to the system.')
sysStatPvaServerCurConns = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatPvaServerCurConns.setStatus('current')
if mibBuilder.loadTexts: sysStatPvaServerCurConns.setDescription('The current hardware accelerated connections from server-side to the system.')
sysStatTotPvaAssistConn = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatTotPvaAssistConn.setStatus('current')
if mibBuilder.loadTexts: sysStatTotPvaAssistConn.setDescription('The total number of the partially hardware accelerated connections on the system.')
sysStatCurrPvaAssistConn = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 31), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatCurrPvaAssistConn.setStatus('current')
if mibBuilder.loadTexts: sysStatCurrPvaAssistConn.setDescription('The current number of the partially hardware accelerated connections on the system.')
sysStatMaintenanceModeDeny = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatMaintenanceModeDeny.setStatus('current')
if mibBuilder.loadTexts: sysStatMaintenanceModeDeny.setDescription('The connection requests rejected because the virtual\n\t\tserver was in maintenance mode. ')
sysStatMaxConnVirtualPathDeny = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatMaxConnVirtualPathDeny.setStatus('current')
if mibBuilder.loadTexts: sysStatMaxConnVirtualPathDeny.setDescription('The connection requests rejected because they exceeded\n\t\tthe connection limit for a virtual server (IP:port).')
sysStatVirtualServerNonSynDeny = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatVirtualServerNonSynDeny.setStatus('current')
if mibBuilder.loadTexts: sysStatVirtualServerNonSynDeny.setDescription('The packets that are not connection requests and are \n\t\tdestined for a virtual server that has no connection \n\t\tfor the client address.')
sysStatNoHandlerDeny = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatNoHandlerDeny.setStatus('current')
if mibBuilder.loadTexts: sysStatNoHandlerDeny.setDescription('The incoming packets that could not be processed by a\n\t\ta virtual server, NAT, or SNAT.')
sysStatLicenseDeny = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatLicenseDeny.setStatus('current')
if mibBuilder.loadTexts: sysStatLicenseDeny.setDescription('The packets which were dropped due to exceeding licensing \n\t\tlimitations.')
sysStatConnectionMemoryErrors = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatConnectionMemoryErrors.setStatus('current')
if mibBuilder.loadTexts: sysStatConnectionMemoryErrors.setDescription('The errors of that connection could not be created because memory \n\t\twas not available.')
sysStatCpuCount = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatCpuCount.setStatus('current')
if mibBuilder.loadTexts: sysStatCpuCount.setDescription('The number of CPUs on the system.')
sysStatActiveCpuCount = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatActiveCpuCount.setStatus('current')
if mibBuilder.loadTexts: sysStatActiveCpuCount.setDescription('The number of active CPUs on the system.')
sysStatMultiProcessorMode = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("modeup", 0), ("modesmp", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatMultiProcessorMode.setStatus('deprecated')
if mibBuilder.loadTexts: sysStatMultiProcessorMode.setDescription("Deprecated! Used to refer to the mode the system's processors were\n\t\t\trunning in.")
sysStatTmTotalCycles = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatTmTotalCycles.setStatus('current')
if mibBuilder.loadTexts: sysStatTmTotalCycles.setDescription('Traffic management CPU usage. The total cycles spent in \n\t\ttraffic management.')
sysStatTmIdleCycles = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 42), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatTmIdleCycles.setStatus('current')
if mibBuilder.loadTexts: sysStatTmIdleCycles.setDescription('Traffic management CPU usage. The cycles spent polling with no \n\t\ttraffic.')
sysStatTmSleepCycles = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatTmSleepCycles.setStatus('current')
if mibBuilder.loadTexts: sysStatTmSleepCycles.setDescription('Traffic management CPU usage. The cycles yielded.')
sysStatMemoryTotal = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 44), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatMemoryTotal.setStatus('current')
if mibBuilder.loadTexts: sysStatMemoryTotal.setDescription('The total memory available in bytes for TMM (Traffic Management Module).\n\t        Use sysStatMemoryTotalKb for gauge type.')
sysStatMemoryUsed = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatMemoryUsed.setStatus('current')
if mibBuilder.loadTexts: sysStatMemoryUsed.setDescription('The memory in use in bytes for TMM (Traffic Management Module).\n\t        Use sysStatMemoryUsedKb for gauge type.')
sysStatDroppedPackets = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 46), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatDroppedPackets.setStatus('current')
if mibBuilder.loadTexts: sysStatDroppedPackets.setDescription('The total dropped packets.')
sysStatIncomingPacketErrors = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 47), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatIncomingPacketErrors.setStatus('current')
if mibBuilder.loadTexts: sysStatIncomingPacketErrors.setDescription('The total incoming packet errors for the system.')
sysStatOutgoingPacketErrors = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 48), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatOutgoingPacketErrors.setStatus('current')
if mibBuilder.loadTexts: sysStatOutgoingPacketErrors.setDescription('The total outgoing packet errors for the system.')
sysStatAuthTotSessions = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 49), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatAuthTotSessions.setStatus('current')
if mibBuilder.loadTexts: sysStatAuthTotSessions.setDescription('The total number of concurrent auth sessions on the system.')
sysStatAuthCurSessions = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 50), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatAuthCurSessions.setStatus('current')
if mibBuilder.loadTexts: sysStatAuthCurSessions.setDescription('The current number of concurrent auth sessions on the system.')
sysStatAuthMaxSessions = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 51), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatAuthMaxSessions.setStatus('current')
if mibBuilder.loadTexts: sysStatAuthMaxSessions.setDescription('The maximum number of concurrent auth sessions on the system.')
sysStatAuthSuccessResults = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 52), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatAuthSuccessResults.setStatus('current')
if mibBuilder.loadTexts: sysStatAuthSuccessResults.setDescription('The total number of auth success results (That is when a \n\t\tsuccessful authorization has completed all of the required \n\t\tauth services.) on the system.')
sysStatAuthFailureResults = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 53), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatAuthFailureResults.setStatus('current')
if mibBuilder.loadTexts: sysStatAuthFailureResults.setDescription('The total number of auth failure results (That is when an \n\t\tunsuccessful authorization operation has completed.) on the system.')
sysStatAuthWantcredentialResults = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 54), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatAuthWantcredentialResults.setStatus('current')
if mibBuilder.loadTexts: sysStatAuthWantcredentialResults.setDescription('The total number of auth wantcredential results (That is when \n\t\tan authorization operation needs an additional credential.) on the system.')
sysStatAuthErrorResults = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 55), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatAuthErrorResults.setStatus('current')
if mibBuilder.loadTexts: sysStatAuthErrorResults.setDescription('The total number of auth error results (That is when an error \n\t\toccurred during authorization has occurred.) on the system.')
sysStatHttpRequests = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 56), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatHttpRequests.setStatus('current')
if mibBuilder.loadTexts: sysStatHttpRequests.setDescription('The total number of HTTP requests to the system.')
sysStatHardSyncookieGen = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 57), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatHardSyncookieGen.setStatus('current')
if mibBuilder.loadTexts: sysStatHardSyncookieGen.setDescription('The number of hardware SYN cookies are generated on the system.')
sysStatHardSyncookieDet = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 58), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatHardSyncookieDet.setStatus('current')
if mibBuilder.loadTexts: sysStatHardSyncookieDet.setDescription('The number of hardware SYN cookies are detected on the system.')
sysStatClientPktsIn5s = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 59), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatClientPktsIn5s.setStatus('current')
if mibBuilder.loadTexts: sysStatClientPktsIn5s.setDescription('The average number of packets received by the system from client-side in the last five seconds.')
sysStatClientBytesIn5s = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 60), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatClientBytesIn5s.setStatus('current')
if mibBuilder.loadTexts: sysStatClientBytesIn5s.setDescription('The average number of bytes received by the system from client-side in the last five seconds.')
sysStatClientPktsOut5s = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 61), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatClientPktsOut5s.setStatus('current')
if mibBuilder.loadTexts: sysStatClientPktsOut5s.setDescription('The average number of packets sent to client-side from the system in the last five seconds.')
sysStatClientBytesOut5s = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 62), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatClientBytesOut5s.setStatus('current')
if mibBuilder.loadTexts: sysStatClientBytesOut5s.setDescription('The average number of bytes sent to client-side from the system in the last five seconds.')
sysStatClientMaxConns5s = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 63), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatClientMaxConns5s.setStatus('current')
if mibBuilder.loadTexts: sysStatClientMaxConns5s.setDescription('The maximum connections from client-side to the system in the last five seconds.')
sysStatClientTotConns5s = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 64), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatClientTotConns5s.setStatus('deprecated')
if mibBuilder.loadTexts: sysStatClientTotConns5s.setDescription('Deprecated! the average connection data is available in sysStatClientCurConns5s.')
sysStatClientCurConns5s = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 65), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatClientCurConns5s.setStatus('current')
if mibBuilder.loadTexts: sysStatClientCurConns5s.setDescription('The average current connections from client-side to the system in the last five seconds.')
sysStatServerPktsIn5s = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 66), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatServerPktsIn5s.setStatus('current')
if mibBuilder.loadTexts: sysStatServerPktsIn5s.setDescription('The average number of packets received by the system from server-side in the last five seconds.')
sysStatServerBytesIn5s = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 67), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatServerBytesIn5s.setStatus('current')
if mibBuilder.loadTexts: sysStatServerBytesIn5s.setDescription('The average number of bytes received by the system from server-side in the last five seconds.')
sysStatServerPktsOut5s = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 68), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatServerPktsOut5s.setStatus('current')
if mibBuilder.loadTexts: sysStatServerPktsOut5s.setDescription('The average number of packets sent to server-side from the system in the last five seconds.')
sysStatServerBytesOut5s = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 69), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatServerBytesOut5s.setStatus('current')
if mibBuilder.loadTexts: sysStatServerBytesOut5s.setDescription('The average number of bytes sent to server-side from the system in the last five seconds.')
sysStatServerMaxConns5s = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 70), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatServerMaxConns5s.setStatus('current')
if mibBuilder.loadTexts: sysStatServerMaxConns5s.setDescription('The maximum connections from server-side to the system in the last five seconds.')
sysStatServerTotConns5s = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 71), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatServerTotConns5s.setStatus('deprecated')
if mibBuilder.loadTexts: sysStatServerTotConns5s.setDescription('Deprecated! the average connection data is available in sysStatServerCurConns5s.')
sysStatServerCurConns5s = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 72), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatServerCurConns5s.setStatus('current')
if mibBuilder.loadTexts: sysStatServerCurConns5s.setDescription('The average current connections from server-side to the system in the last five seconds.')
sysStatClientPktsIn1m = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 73), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatClientPktsIn1m.setStatus('current')
if mibBuilder.loadTexts: sysStatClientPktsIn1m.setDescription('The average number of packets received by the system from client-side in the last one minute.')
sysStatClientBytesIn1m = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 74), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatClientBytesIn1m.setStatus('current')
if mibBuilder.loadTexts: sysStatClientBytesIn1m.setDescription('The average number of bytes received by the system from client-side in the last one minute.')
sysStatClientPktsOut1m = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 75), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatClientPktsOut1m.setStatus('current')
if mibBuilder.loadTexts: sysStatClientPktsOut1m.setDescription('The average number of packets sent to client-side from the system in the last one minute.')
sysStatClientBytesOut1m = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 76), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatClientBytesOut1m.setStatus('current')
if mibBuilder.loadTexts: sysStatClientBytesOut1m.setDescription('The average number of bytes sent to client-side from the system in the last one minute.')
sysStatClientMaxConns1m = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 77), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatClientMaxConns1m.setStatus('current')
if mibBuilder.loadTexts: sysStatClientMaxConns1m.setDescription('The maximum connections from client-side to the system in the last one minute.')
sysStatClientTotConns1m = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 78), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatClientTotConns1m.setStatus('deprecated')
if mibBuilder.loadTexts: sysStatClientTotConns1m.setDescription('Deprecated! the average connection data is available in sysStatClientCurConns1m.')
sysStatClientCurConns1m = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 79), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatClientCurConns1m.setStatus('current')
if mibBuilder.loadTexts: sysStatClientCurConns1m.setDescription('The average current connections from client-side to the system in the last one minute.')
sysStatServerPktsIn1m = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 80), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatServerPktsIn1m.setStatus('current')
if mibBuilder.loadTexts: sysStatServerPktsIn1m.setDescription('The average number of packets received by the system from server-side in the last one minute.')
sysStatServerBytesIn1m = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 81), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatServerBytesIn1m.setStatus('current')
if mibBuilder.loadTexts: sysStatServerBytesIn1m.setDescription('The average number of bytes received by the system from server-side in the last one minute.')
sysStatServerPktsOut1m = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 82), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatServerPktsOut1m.setStatus('current')
if mibBuilder.loadTexts: sysStatServerPktsOut1m.setDescription('The average number of packets sent to server-side from the system in the last one minute.')
sysStatServerBytesOut1m = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 83), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatServerBytesOut1m.setStatus('current')
if mibBuilder.loadTexts: sysStatServerBytesOut1m.setDescription('The average number of bytes sent to server-side from the system in the last one minute.')
sysStatServerMaxConns1m = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 84), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatServerMaxConns1m.setStatus('current')
if mibBuilder.loadTexts: sysStatServerMaxConns1m.setDescription('The maximum connections from server-side to the system in the last one minute.')
sysStatServerTotConns1m = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 85), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatServerTotConns1m.setStatus('deprecated')
if mibBuilder.loadTexts: sysStatServerTotConns1m.setDescription('Deprecated! the average connection data is available in sysStatServerCurConns1m.')
sysStatServerCurConns1m = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 86), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatServerCurConns1m.setStatus('current')
if mibBuilder.loadTexts: sysStatServerCurConns1m.setDescription('The average current connections from server-side to the system in the last one minute.')
sysStatClientPktsIn5m = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 87), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatClientPktsIn5m.setStatus('current')
if mibBuilder.loadTexts: sysStatClientPktsIn5m.setDescription('The average average number of packets received by the system from client-side in the last five minutes.')
sysStatClientBytesIn5m = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 88), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatClientBytesIn5m.setStatus('current')
if mibBuilder.loadTexts: sysStatClientBytesIn5m.setDescription('The average number of bytes received by the system from client-side in the last five minutes.')
sysStatClientPktsOut5m = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 89), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatClientPktsOut5m.setStatus('current')
if mibBuilder.loadTexts: sysStatClientPktsOut5m.setDescription('The average number of packets sent to client-side from the system in the last five minutes.')
sysStatClientBytesOut5m = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 90), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatClientBytesOut5m.setStatus('current')
if mibBuilder.loadTexts: sysStatClientBytesOut5m.setDescription('The average number of bytes sent to client-side from the system in the last five minutes.')
sysStatClientMaxConns5m = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 91), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatClientMaxConns5m.setStatus('current')
if mibBuilder.loadTexts: sysStatClientMaxConns5m.setDescription('The maximum connections from client-side to the system in the last five minutes.')
sysStatClientTotConns5m = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 92), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatClientTotConns5m.setStatus('deprecated')
if mibBuilder.loadTexts: sysStatClientTotConns5m.setDescription('Deprecated! the average connection data is available in sysStatClientCurConns5m.')
sysStatClientCurConns5m = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 93), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatClientCurConns5m.setStatus('current')
if mibBuilder.loadTexts: sysStatClientCurConns5m.setDescription('The average current connections from client-side to the system in the last five minutes.')
sysStatServerPktsIn5m = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 94), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatServerPktsIn5m.setStatus('current')
if mibBuilder.loadTexts: sysStatServerPktsIn5m.setDescription('The average number of packets received by the system from server-side in the last five minutes.')
sysStatServerBytesIn5m = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 95), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatServerBytesIn5m.setStatus('current')
if mibBuilder.loadTexts: sysStatServerBytesIn5m.setDescription('The average number of bytes received by the system from server-side in the last five minutes.')
sysStatServerPktsOut5m = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 96), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatServerPktsOut5m.setStatus('current')
if mibBuilder.loadTexts: sysStatServerPktsOut5m.setDescription('The average number of packets sent to server-side from the system in the last five minutes.')
sysStatServerBytesOut5m = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 97), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatServerBytesOut5m.setStatus('current')
if mibBuilder.loadTexts: sysStatServerBytesOut5m.setDescription('The average number of bytes sent to server-side from the system in the last five minutes.')
sysStatServerMaxConns5m = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 98), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatServerMaxConns5m.setStatus('current')
if mibBuilder.loadTexts: sysStatServerMaxConns5m.setDescription('The maximum connections from server-side to the system in the last five minutes.')
sysStatServerTotConns5m = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 99), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatServerTotConns5m.setStatus('deprecated')
if mibBuilder.loadTexts: sysStatServerTotConns5m.setDescription('Deprecated! the average connection data is available in sysStatServerCurConns5m.')
sysStatServerCurConns5m = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 100), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatServerCurConns5m.setStatus('current')
if mibBuilder.loadTexts: sysStatServerCurConns5m.setDescription('The average current connections from server-side to the system in the last five minutes.')
sysStatPvaClientPktsIn5s = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 101), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatPvaClientPktsIn5s.setStatus('current')
if mibBuilder.loadTexts: sysStatPvaClientPktsIn5s.setDescription('The average number of hardware accelerated packets received \n\t\tby the system from client-side in the last five seconds.')
sysStatPvaClientBytesIn5s = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 102), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatPvaClientBytesIn5s.setStatus('current')
if mibBuilder.loadTexts: sysStatPvaClientBytesIn5s.setDescription('The average number of hardware accelerated bytes received \n\t\tby the system from client-side in the last five seconds.')
sysStatPvaClientPktsOut5s = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 103), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatPvaClientPktsOut5s.setStatus('current')
if mibBuilder.loadTexts: sysStatPvaClientPktsOut5s.setDescription('The average number of hardware accelerated packets sent to client-side from the system in the last five seconds.')
sysStatPvaClientBytesOut5s = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 104), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatPvaClientBytesOut5s.setStatus('current')
if mibBuilder.loadTexts: sysStatPvaClientBytesOut5s.setDescription('The average  number of hardware accelerated bytes sent to client-side from the system in the last five seconds.')
sysStatPvaClientMaxConns5s = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 105), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatPvaClientMaxConns5s.setStatus('current')
if mibBuilder.loadTexts: sysStatPvaClientMaxConns5s.setDescription('The maximum hardware accelerated connections from client-side to the system in the last five seconds.')
sysStatPvaClientTotConns5s = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 106), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatPvaClientTotConns5s.setStatus('deprecated')
if mibBuilder.loadTexts: sysStatPvaClientTotConns5s.setDescription('Deprecated! the average connection data is available in sysStatPvaClientCurConns5s')
sysStatPvaClientCurConns5s = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 107), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatPvaClientCurConns5s.setStatus('current')
if mibBuilder.loadTexts: sysStatPvaClientCurConns5s.setDescription('The average current hardware accelerated connections from client-side to the system in the last five seconds.')
sysStatPvaServerPktsIn5s = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 108), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatPvaServerPktsIn5s.setStatus('current')
if mibBuilder.loadTexts: sysStatPvaServerPktsIn5s.setDescription('The average number of hardware accelerated packets received \n\t\tby the system from server-side in the last five seconds.')
sysStatPvaServerBytesIn5s = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 109), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatPvaServerBytesIn5s.setStatus('current')
if mibBuilder.loadTexts: sysStatPvaServerBytesIn5s.setDescription('The average number of hardware accelerated bytes received \n\t\tby the system from server-side in the last five seconds.')
sysStatPvaServerPktsOut5s = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 110), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatPvaServerPktsOut5s.setStatus('current')
if mibBuilder.loadTexts: sysStatPvaServerPktsOut5s.setDescription('The average number of hardware accelerated packets sent to server-side from the system in the last five seconds.')
sysStatPvaServerBytesOut5s = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 111), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatPvaServerBytesOut5s.setStatus('current')
if mibBuilder.loadTexts: sysStatPvaServerBytesOut5s.setDescription('The average number of hardware accelerated bytes sent to server-side from the system in the last five seconds.')
sysStatPvaServerMaxConns5s = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 112), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatPvaServerMaxConns5s.setStatus('current')
if mibBuilder.loadTexts: sysStatPvaServerMaxConns5s.setDescription('The maximum hardware accelerated connections from server-side to the system in the last five seconds.')
sysStatPvaServerTotConns5s = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 113), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatPvaServerTotConns5s.setStatus('deprecated')
if mibBuilder.loadTexts: sysStatPvaServerTotConns5s.setDescription('Deprecated! the average connection data is available in sysStatPvaServerCurConns5s.')
sysStatPvaServerCurConns5s = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 114), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatPvaServerCurConns5s.setStatus('current')
if mibBuilder.loadTexts: sysStatPvaServerCurConns5s.setDescription('The average current hardware accelerated connections from server-side to the system in the last five seconds.')
sysStatPvaClientPktsIn1m = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 115), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatPvaClientPktsIn1m.setStatus('current')
if mibBuilder.loadTexts: sysStatPvaClientPktsIn1m.setDescription('The average number of hardware accelerated packets received \n\t\tby the system from client-side in the last five seconds.')
sysStatPvaClientBytesIn1m = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 116), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatPvaClientBytesIn1m.setStatus('current')
if mibBuilder.loadTexts: sysStatPvaClientBytesIn1m.setDescription('The average number of hardware accelerated bytes received\n\t\tby the system from client-side in the last one minute.')
sysStatPvaClientPktsOut1m = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 117), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatPvaClientPktsOut1m.setStatus('current')
if mibBuilder.loadTexts: sysStatPvaClientPktsOut1m.setDescription('The average number of hardware accelerated packets sent to client-side from the system in the last one minute.')
sysStatPvaClientBytesOut1m = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 118), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatPvaClientBytesOut1m.setStatus('current')
if mibBuilder.loadTexts: sysStatPvaClientBytesOut1m.setDescription('The average  number of hardware accelerated bytes sent to client-side from the system in the last one minute.')
sysStatPvaClientMaxConns1m = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 119), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatPvaClientMaxConns1m.setStatus('current')
if mibBuilder.loadTexts: sysStatPvaClientMaxConns1m.setDescription('The maximum hardware accelerated connections from client-side to the system in the last one minute.')
sysStatPvaClientTotConns1m = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 120), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatPvaClientTotConns1m.setStatus('deprecated')
if mibBuilder.loadTexts: sysStatPvaClientTotConns1m.setDescription('Deprecated! the average connection data is available in sysStatPvaClientCurConns1m.')
sysStatPvaClientCurConns1m = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 121), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatPvaClientCurConns1m.setStatus('current')
if mibBuilder.loadTexts: sysStatPvaClientCurConns1m.setDescription('The average current hardware accelerated connections from client-side to the system in the last one minute.')
sysStatPvaServerPktsIn1m = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 122), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatPvaServerPktsIn1m.setStatus('current')
if mibBuilder.loadTexts: sysStatPvaServerPktsIn1m.setDescription('The average number of hardware accelerated packets received \n\t\tby the system from server-side in the last one minute.')
sysStatPvaServerBytesIn1m = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 123), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatPvaServerBytesIn1m.setStatus('current')
if mibBuilder.loadTexts: sysStatPvaServerBytesIn1m.setDescription('The average number of hardware accelerated bytes received \n\t\tby the system from server-side in the last one minute.')
sysStatPvaServerPktsOut1m = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 124), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatPvaServerPktsOut1m.setStatus('current')
if mibBuilder.loadTexts: sysStatPvaServerPktsOut1m.setDescription('The average number of hardware accelerated packets sent to server-side from the system in the last one minute.')
sysStatPvaServerBytesOut1m = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 125), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatPvaServerBytesOut1m.setStatus('current')
if mibBuilder.loadTexts: sysStatPvaServerBytesOut1m.setDescription('The average number of hardware accelerated bytes sent to server-side from the system in the last one minute.')
sysStatPvaServerMaxConns1m = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 126), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatPvaServerMaxConns1m.setStatus('current')
if mibBuilder.loadTexts: sysStatPvaServerMaxConns1m.setDescription('The maximum hardware accelerated connections from server-side to the system in the last one minute.')
sysStatPvaServerTotConns1m = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 127), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatPvaServerTotConns1m.setStatus('deprecated')
if mibBuilder.loadTexts: sysStatPvaServerTotConns1m.setDescription('Deprecated! the average connection data is available in sysStatPvaServerCurConns1m.')
sysStatPvaServerCurConns1m = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 128), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatPvaServerCurConns1m.setStatus('current')
if mibBuilder.loadTexts: sysStatPvaServerCurConns1m.setDescription('The average current hardware accelerated connections from server-side to the system in the last one minute.')
sysStatPvaClientPktsIn5m = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 129), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatPvaClientPktsIn5m.setStatus('current')
if mibBuilder.loadTexts: sysStatPvaClientPktsIn5m.setDescription('The average number of hardware accelerated packets received \n\t\tby the system from client-side in the last five minutes.')
sysStatPvaClientBytesIn5m = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 130), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatPvaClientBytesIn5m.setStatus('current')
if mibBuilder.loadTexts: sysStatPvaClientBytesIn5m.setDescription('The average number of hardware accelerated bytes received \n\t\tby the system from client-side in the last five minutes.')
sysStatPvaClientPktsOut5m = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 131), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatPvaClientPktsOut5m.setStatus('current')
if mibBuilder.loadTexts: sysStatPvaClientPktsOut5m.setDescription('The average number of hardware accelerated packets sent to client-side from the system in the last five minutes.')
sysStatPvaClientBytesOut5m = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 132), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatPvaClientBytesOut5m.setStatus('current')
if mibBuilder.loadTexts: sysStatPvaClientBytesOut5m.setDescription('The average  number of hardware accelerated bytes sent to client-side from the system in the last five minutes.')
sysStatPvaClientMaxConns5m = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 133), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatPvaClientMaxConns5m.setStatus('current')
if mibBuilder.loadTexts: sysStatPvaClientMaxConns5m.setDescription('The maximum hardware accelerated connections from client-side to the system in the last five minutes.')
sysStatPvaClientTotConns5m = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 134), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatPvaClientTotConns5m.setStatus('deprecated')
if mibBuilder.loadTexts: sysStatPvaClientTotConns5m.setDescription('Deprecated! the average connection data is available in sysStatPvaClientCurConns5m.')
sysStatPvaClientCurConns5m = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 135), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatPvaClientCurConns5m.setStatus('current')
if mibBuilder.loadTexts: sysStatPvaClientCurConns5m.setDescription('The average current hardware accelerated connections from client-side to the system in the last five minutes.')
sysStatPvaServerPktsIn5m = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 136), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatPvaServerPktsIn5m.setStatus('current')
if mibBuilder.loadTexts: sysStatPvaServerPktsIn5m.setDescription('The average number of hardware accelerated packets received \n\t\tby the system from server-side in the last five minutes.')
sysStatPvaServerBytesIn5m = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 137), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatPvaServerBytesIn5m.setStatus('current')
if mibBuilder.loadTexts: sysStatPvaServerBytesIn5m.setDescription('The average number of hardware accelerated bytes received \n\t\tby the system from server-side in the last five minutes.')
sysStatPvaServerPktsOut5m = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 138), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatPvaServerPktsOut5m.setStatus('current')
if mibBuilder.loadTexts: sysStatPvaServerPktsOut5m.setDescription('The average number of hardware accelerated packets sent to server-side from the system in the last five minutes.')
sysStatPvaServerBytesOut5m = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 139), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatPvaServerBytesOut5m.setStatus('current')
if mibBuilder.loadTexts: sysStatPvaServerBytesOut5m.setDescription('The average number of hardware accelerated bytes sent to server-side from the system in the last five minutes.')
sysStatPvaServerMaxConns5m = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 140), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatPvaServerMaxConns5m.setStatus('current')
if mibBuilder.loadTexts: sysStatPvaServerMaxConns5m.setDescription('The maximum hardware accelerated connections from server-side to the system in the last five minutes.')
sysStatPvaServerTotConns5m = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 141), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatPvaServerTotConns5m.setStatus('deprecated')
if mibBuilder.loadTexts: sysStatPvaServerTotConns5m.setDescription('Deprecated! the average connection data is available in sysStatPvaServerCurConns5m.')
sysStatPvaServerCurConns5m = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 142), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatPvaServerCurConns5m.setStatus('current')
if mibBuilder.loadTexts: sysStatPvaServerCurConns5m.setDescription('The average current hardware accelerated connections from server-side to the system in the last five minutes.')
sysStatMemoryTotalKb = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 143), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatMemoryTotalKb.setStatus('current')
if mibBuilder.loadTexts: sysStatMemoryTotalKb.setDescription('The total memory available in Kilobytes for TMM (Traffic Management Module).')
sysStatMemoryUsedKb = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 1, 144), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatMemoryUsedKb.setStatus('current')
if mibBuilder.loadTexts: sysStatMemoryUsedKb.setDescription('The memory in use in Kilobytes for TMM (Traffic Management Module).')
sysAuthStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysAuthStatResetStats.setStatus('current')
if mibBuilder.loadTexts: sysAuthStatResetStats.setDescription('The action to reset resettable statistics data in sysGlobalAuthStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
sysAuthStatTotSessions = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 2, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAuthStatTotSessions.setStatus('current')
if mibBuilder.loadTexts: sysAuthStatTotSessions.setDescription('The total number of concurrent auth sessions.')
sysAuthStatCurSessions = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 2, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAuthStatCurSessions.setStatus('current')
if mibBuilder.loadTexts: sysAuthStatCurSessions.setDescription('The current number of concurrent auth sessions.')
sysAuthStatMaxSessions = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 2, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAuthStatMaxSessions.setStatus('current')
if mibBuilder.loadTexts: sysAuthStatMaxSessions.setDescription('The maximum number of concurrent auth sessions')
sysAuthStatSuccessResults = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 2, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAuthStatSuccessResults.setStatus('current')
if mibBuilder.loadTexts: sysAuthStatSuccessResults.setDescription('The total number of auth success results (That is when a \n\t\tsuccessful authorization has completed all of the required \n\t\tauth services.).')
sysAuthStatFailureResults = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 2, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAuthStatFailureResults.setStatus('current')
if mibBuilder.loadTexts: sysAuthStatFailureResults.setDescription('The total number of auth failure results (That is when an \n\t\tunsuccessful authorization operation has completed.).')
sysAuthStatWantcredentialResults = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 2, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAuthStatWantcredentialResults.setStatus('current')
if mibBuilder.loadTexts: sysAuthStatWantcredentialResults.setDescription('The total number of auth wantcredential results (That is when \n\t\tan authorization operation needs an additional credential.)')
sysAuthStatErrorResults = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 2, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAuthStatErrorResults.setStatus('current')
if mibBuilder.loadTexts: sysAuthStatErrorResults.setDescription('The total number of auth error results (That is when an error \n\t\toccurred during authorization has occurred.).')
sysConnPoolStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 3, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysConnPoolStatResetStats.setStatus('current')
if mibBuilder.loadTexts: sysConnPoolStatResetStats.setDescription('The action to reset resettable statistics data in sysGlobalConnPoolStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
sysConnPoolStatCurSize = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 3, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysConnPoolStatCurSize.setStatus('current')
if mibBuilder.loadTexts: sysConnPoolStatCurSize.setDescription('The number of currently idle connections in pools on the system.')
sysConnPoolStatMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 3, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysConnPoolStatMaxSize.setStatus('current')
if mibBuilder.loadTexts: sysConnPoolStatMaxSize.setDescription('The number of idle connections in pools on the system.')
sysConnPoolStatReuses = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 3, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysConnPoolStatReuses.setStatus('current')
if mibBuilder.loadTexts: sysConnPoolStatReuses.setDescription('The number of times a connection was reused from pools on the system.')
sysConnPoolStatConnects = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 3, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysConnPoolStatConnects.setStatus('current')
if mibBuilder.loadTexts: sysConnPoolStatConnects.setDescription('The number of times a new connection was initiated in pools on the system.')
sysHttpStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 4, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysHttpStatResetStats.setStatus('current')
if mibBuilder.loadTexts: sysHttpStatResetStats.setDescription('The action to reset resettable statistics data in sysGlobalHttpStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
sysHttpStatCookiePersistInserts = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 4, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHttpStatCookiePersistInserts.setStatus('current')
if mibBuilder.loadTexts: sysHttpStatCookiePersistInserts.setDescription('The number of successful attempts to insert HTTP headers \n\t\t for cookie persistence (set-cookie header insertions).')
sysHttpStatResp2xxCnt = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 4, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHttpStatResp2xxCnt.setStatus('current')
if mibBuilder.loadTexts: sysHttpStatResp2xxCnt.setDescription('The number of server-side responses in range of 200 to 206 \n\t\t (successful responses)')
sysHttpStatResp3xxCnt = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 4, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHttpStatResp3xxCnt.setStatus('current')
if mibBuilder.loadTexts: sysHttpStatResp3xxCnt.setDescription('The number of server-side responses in range of 300 to 307 \n\t\t (redirection responses).')
sysHttpStatResp4xxCnt = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 4, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHttpStatResp4xxCnt.setStatus('current')
if mibBuilder.loadTexts: sysHttpStatResp4xxCnt.setDescription('The number of server-side responses in range of 400 to 417  \n\t\t (client errors).')
sysHttpStatResp5xxCnt = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 4, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHttpStatResp5xxCnt.setStatus('current')
if mibBuilder.loadTexts: sysHttpStatResp5xxCnt.setDescription('The number of server-side responses in range of 500 to 505 \n\t\t (server errors).')
sysHttpStatNumberReqs = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 4, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHttpStatNumberReqs.setStatus('current')
if mibBuilder.loadTexts: sysHttpStatNumberReqs.setDescription('The total number of HTTP requests.')
sysHttpStatGetReqs = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 4, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHttpStatGetReqs.setStatus('current')
if mibBuilder.loadTexts: sysHttpStatGetReqs.setDescription('The total number of HTTP get requests.')
sysHttpStatPostReqs = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 4, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHttpStatPostReqs.setStatus('current')
if mibBuilder.loadTexts: sysHttpStatPostReqs.setDescription('The total number of HTTP post requests.')
sysHttpStatV9Reqs = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 4, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHttpStatV9Reqs.setStatus('current')
if mibBuilder.loadTexts: sysHttpStatV9Reqs.setDescription('The total number of version 9 requests.')
sysHttpStatV10Reqs = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 4, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHttpStatV10Reqs.setStatus('current')
if mibBuilder.loadTexts: sysHttpStatV10Reqs.setDescription('The total number of version 10 requests.')
sysHttpStatV11Reqs = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 4, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHttpStatV11Reqs.setStatus('current')
if mibBuilder.loadTexts: sysHttpStatV11Reqs.setDescription('The total number of version 11 requests.')
sysHttpStatV9Resp = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 4, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHttpStatV9Resp.setStatus('current')
if mibBuilder.loadTexts: sysHttpStatV9Resp.setDescription('The total number of version 9 responses.')
sysHttpStatV10Resp = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 4, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHttpStatV10Resp.setStatus('current')
if mibBuilder.loadTexts: sysHttpStatV10Resp.setDescription('The total number of version 10 responses.')
sysHttpStatV11Resp = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 4, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHttpStatV11Resp.setStatus('current')
if mibBuilder.loadTexts: sysHttpStatV11Resp.setDescription('The total number of version 11 responses.')
sysHttpStatMaxKeepaliveReq = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 4, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHttpStatMaxKeepaliveReq.setStatus('current')
if mibBuilder.loadTexts: sysHttpStatMaxKeepaliveReq.setDescription('The maximum number of requests made in a connection.')
sysHttpStatRespBucket1k = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 4, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHttpStatRespBucket1k.setStatus('current')
if mibBuilder.loadTexts: sysHttpStatRespBucket1k.setDescription('The number of responses under 1k.')
sysHttpStatRespBucket4k = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 4, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHttpStatRespBucket4k.setStatus('current')
if mibBuilder.loadTexts: sysHttpStatRespBucket4k.setDescription('The number of responses under 1 - 4k.')
sysHttpStatRespBucket16k = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 4, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHttpStatRespBucket16k.setStatus('current')
if mibBuilder.loadTexts: sysHttpStatRespBucket16k.setDescription('The number of responses under 4 - 16k.')
sysHttpStatRespBucket32k = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 4, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHttpStatRespBucket32k.setStatus('current')
if mibBuilder.loadTexts: sysHttpStatRespBucket32k.setDescription('The number of responses under 16 - 32k.')
sysHttpStatPrecompressBytes = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 4, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHttpStatPrecompressBytes.setStatus('deprecated')
if mibBuilder.loadTexts: sysHttpStatPrecompressBytes.setDescription('Deprecated!  The number of response bytes before compression has taken place.')
sysHttpStatPostcompressBytes = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 4, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHttpStatPostcompressBytes.setStatus('deprecated')
if mibBuilder.loadTexts: sysHttpStatPostcompressBytes.setDescription('Deprecated!  The number of response bytes after compression has taken place.')
sysHttpStatNullCompressBytes = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 4, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHttpStatNullCompressBytes.setStatus('deprecated')
if mibBuilder.loadTexts: sysHttpStatNullCompressBytes.setDescription('Deprecated!  The number of bytes subjected to NULL compression (for license enforcement).')
sysHttpStatHtmlPrecompressBytes = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 4, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHttpStatHtmlPrecompressBytes.setStatus('deprecated')
if mibBuilder.loadTexts: sysHttpStatHtmlPrecompressBytes.setDescription('Deprecated!  The number of precompressed bytes for the MIME-Types: HTML.')
sysHttpStatHtmlPostcompressBytes = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 4, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHttpStatHtmlPostcompressBytes.setStatus('deprecated')
if mibBuilder.loadTexts: sysHttpStatHtmlPostcompressBytes.setDescription('Deprecated!  The number of postcompressed bytes for the MIME-Types: HTML.')
sysHttpStatCssPrecompressBytes = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 4, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHttpStatCssPrecompressBytes.setStatus('deprecated')
if mibBuilder.loadTexts: sysHttpStatCssPrecompressBytes.setDescription('Deprecated!  The number of precompressed bytes for the MIME-Types: CSS.')
sysHttpStatCssPostcompressBytes = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 4, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHttpStatCssPostcompressBytes.setStatus('deprecated')
if mibBuilder.loadTexts: sysHttpStatCssPostcompressBytes.setDescription('Deprecated!  The number of postcompressed bytes for the MIME-Types: CSS.')
sysHttpStatJsPrecompressBytes = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 4, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHttpStatJsPrecompressBytes.setStatus('deprecated')
if mibBuilder.loadTexts: sysHttpStatJsPrecompressBytes.setDescription('Deprecated!  The number of precompressed bytes for the MIME-Types: Javascript.')
sysHttpStatJsPostcompressBytes = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 4, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHttpStatJsPostcompressBytes.setStatus('deprecated')
if mibBuilder.loadTexts: sysHttpStatJsPostcompressBytes.setDescription('Deprecated!  The number of postcompressed bytes for the MIME-Types: Javascript.')
sysHttpStatXmlPrecompressBytes = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 4, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHttpStatXmlPrecompressBytes.setStatus('deprecated')
if mibBuilder.loadTexts: sysHttpStatXmlPrecompressBytes.setDescription('Deprecated!  The number of precompressed bytes for the MIME-Types: XML.')
sysHttpStatXmlPostcompressBytes = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 4, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHttpStatXmlPostcompressBytes.setStatus('deprecated')
if mibBuilder.loadTexts: sysHttpStatXmlPostcompressBytes.setDescription('Deprecated!  The number of postcompressed bytes for the MIME-Types: XML.')
sysHttpStatSgmlPrecompressBytes = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 4, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHttpStatSgmlPrecompressBytes.setStatus('deprecated')
if mibBuilder.loadTexts: sysHttpStatSgmlPrecompressBytes.setDescription('Deprecated!  The number of precompressed bytes for the MIME-Types: SGML.')
sysHttpStatSgmlPostcompressBytes = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 4, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHttpStatSgmlPostcompressBytes.setStatus('deprecated')
if mibBuilder.loadTexts: sysHttpStatSgmlPostcompressBytes.setDescription('Deprecated!  The number of postcompressed bytes for the MIME-Types: SGML.')
sysHttpStatPlainPrecompressBytes = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 4, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHttpStatPlainPrecompressBytes.setStatus('deprecated')
if mibBuilder.loadTexts: sysHttpStatPlainPrecompressBytes.setDescription('Deprecated!  The number of precompressed bytes for the MIME-Types: Plain.')
sysHttpStatPlainPostcompressBytes = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 4, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHttpStatPlainPostcompressBytes.setStatus('deprecated')
if mibBuilder.loadTexts: sysHttpStatPlainPostcompressBytes.setDescription('Deprecated!  The number of postcompressed bytes for the MIME-Types: Plain.')
sysHttpStatOctetPrecompressBytes = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 4, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHttpStatOctetPrecompressBytes.setStatus('deprecated')
if mibBuilder.loadTexts: sysHttpStatOctetPrecompressBytes.setDescription('Deprecated!  The number of precompressed bytes for the MIME-Types: Octet stream.')
sysHttpStatOctetPostcompressBytes = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 4, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHttpStatOctetPostcompressBytes.setStatus('deprecated')
if mibBuilder.loadTexts: sysHttpStatOctetPostcompressBytes.setDescription('Deprecated!  The number of postcompressed bytes for the MIME-Types: Octet stream.')
sysHttpStatImagePrecompressBytes = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 4, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHttpStatImagePrecompressBytes.setStatus('deprecated')
if mibBuilder.loadTexts: sysHttpStatImagePrecompressBytes.setDescription('Deprecated!  The number of precompressed bytes for the MIME-Types: Images.')
sysHttpStatImagePostcompressBytes = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 4, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHttpStatImagePostcompressBytes.setStatus('deprecated')
if mibBuilder.loadTexts: sysHttpStatImagePostcompressBytes.setDescription('Deprecated!  The number of postcompressed bytes for the MIME-Types: Images.')
sysHttpStatVideoPrecompressBytes = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 4, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHttpStatVideoPrecompressBytes.setStatus('deprecated')
if mibBuilder.loadTexts: sysHttpStatVideoPrecompressBytes.setDescription('Deprecated!  The number of precompressed bytes for the MIME-Types: Video files.')
sysHttpStatVideoPostcompressBytes = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 4, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHttpStatVideoPostcompressBytes.setStatus('deprecated')
if mibBuilder.loadTexts: sysHttpStatVideoPostcompressBytes.setDescription('Deprecated!  The number of postcompressed bytes for the MIME-Types: Video files.')
sysHttpStatAudioPrecompressBytes = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 4, 42), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHttpStatAudioPrecompressBytes.setStatus('deprecated')
if mibBuilder.loadTexts: sysHttpStatAudioPrecompressBytes.setDescription('Deprecated!  The number of precompressed bytes for the MIME-Types: Audio files.')
sysHttpStatAudioPostcompressBytes = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 4, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHttpStatAudioPostcompressBytes.setStatus('deprecated')
if mibBuilder.loadTexts: sysHttpStatAudioPostcompressBytes.setDescription('Deprecated!  The number of postcompressed bytes for the MIME-Types: Audio files.')
sysHttpStatOtherPrecompressBytes = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 4, 44), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHttpStatOtherPrecompressBytes.setStatus('deprecated')
if mibBuilder.loadTexts: sysHttpStatOtherPrecompressBytes.setDescription('Deprecated!  The number of precompressed bytes for the MIME-Types: other than \n\t\tHTML, CSS, Javascript, XML, SGML, Plain, Images, Video files, \n\t\tAudio files.')
sysHttpStatOtherPostcompressBytes = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 4, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHttpStatOtherPostcompressBytes.setStatus('deprecated')
if mibBuilder.loadTexts: sysHttpStatOtherPostcompressBytes.setDescription('Deprecated!  The number of postcompressed bytes for the MIME-Types: other than \n\t\tHTML, CSS, Javascript, XML, SGML, Plain, Images, Video files, \n\t\tAudio files.')
sysHttpStatRamcacheHits = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 4, 46), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHttpStatRamcacheHits.setStatus('deprecated')
if mibBuilder.loadTexts: sysHttpStatRamcacheHits.setDescription('Deprecated!  The number of RAM cache hits.')
sysHttpStatRamcacheMisses = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 4, 47), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHttpStatRamcacheMisses.setStatus('deprecated')
if mibBuilder.loadTexts: sysHttpStatRamcacheMisses.setDescription('Deprecated!  The number of RAM cache misses, excluding un-cacheable data.')
sysHttpStatRamcacheMissesAll = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 4, 48), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHttpStatRamcacheMissesAll.setStatus('deprecated')
if mibBuilder.loadTexts: sysHttpStatRamcacheMissesAll.setDescription('Deprecated!  The total number of RAM cache misses.')
sysHttpStatRamcacheHitBytes = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 4, 49), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHttpStatRamcacheHitBytes.setStatus('deprecated')
if mibBuilder.loadTexts: sysHttpStatRamcacheHitBytes.setDescription('Deprecated!  The number of RAM cache hits in bytes.')
sysHttpStatRamcacheMissBytes = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 4, 50), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHttpStatRamcacheMissBytes.setStatus('deprecated')
if mibBuilder.loadTexts: sysHttpStatRamcacheMissBytes.setDescription('Deprecated!  The number of RAM cache misses in bytes, excluding un-cacheable data.')
sysHttpStatRamcacheMissBytesAll = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 4, 51), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHttpStatRamcacheMissBytesAll.setStatus('deprecated')
if mibBuilder.loadTexts: sysHttpStatRamcacheMissBytesAll.setDescription('Deprecated!  The total number of RAM cache misses in bytes.')
sysHttpStatRamcacheSize = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 4, 52), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHttpStatRamcacheSize.setStatus('deprecated')
if mibBuilder.loadTexts: sysHttpStatRamcacheSize.setDescription('Deprecated!  The Ram cache current size.')
sysHttpStatRamcacheCount = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 4, 53), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHttpStatRamcacheCount.setStatus('deprecated')
if mibBuilder.loadTexts: sysHttpStatRamcacheCount.setDescription('Deprecated!  The number of items stored in Ram cache.')
sysHttpStatRamcacheEvictions = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 4, 54), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHttpStatRamcacheEvictions.setStatus('deprecated')
if mibBuilder.loadTexts: sysHttpStatRamcacheEvictions.setDescription('Deprecated!  The number of Ram cache evictions.')
sysHttpStatRespBucket64k = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 4, 55), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHttpStatRespBucket64k.setStatus('deprecated')
if mibBuilder.loadTexts: sysHttpStatRespBucket64k.setDescription('Deprecated! Please use the larger buckets.')
sysHttpStatV20Reqs = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 4, 56), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHttpStatV20Reqs.setStatus('current')
if mibBuilder.loadTexts: sysHttpStatV20Reqs.setDescription('The total number of version 20 requests.')
sysHttpStatV30Reqs = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 4, 57), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHttpStatV30Reqs.setStatus('current')
if mibBuilder.loadTexts: sysHttpStatV30Reqs.setDescription('The total number of version 30 requests.')
sysHttpStatV20Resp = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 4, 58), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHttpStatV20Resp.setStatus('current')
if mibBuilder.loadTexts: sysHttpStatV20Resp.setDescription('The total number of version 20 responses.')
sysHttpStatV30Resp = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 4, 59), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHttpStatV30Resp.setStatus('current')
if mibBuilder.loadTexts: sysHttpStatV30Resp.setDescription('The total number of version 30 responses.')
sysIcmpStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 5, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysIcmpStatResetStats.setStatus('current')
if mibBuilder.loadTexts: sysIcmpStatResetStats.setDescription('The action to reset resettable statistics data in sysGlobalIcmpStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
sysIcmpStatTx = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 5, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIcmpStatTx.setStatus('current')
if mibBuilder.loadTexts: sysIcmpStatTx.setDescription('The total number of ICMP messages which this entity attempted \n\t\tto send.')
sysIcmpStatRx = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 5, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIcmpStatRx.setStatus('current')
if mibBuilder.loadTexts: sysIcmpStatRx.setDescription('The total number of ICMP messages which the entity received.')
sysIcmpStatForward = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 5, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIcmpStatForward.setStatus('current')
if mibBuilder.loadTexts: sysIcmpStatForward.setDescription('The number of ICMP messages which the entity forwarded.')
sysIcmpStatDrop = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 5, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIcmpStatDrop.setStatus('current')
if mibBuilder.loadTexts: sysIcmpStatDrop.setDescription('The number of ICMP messages which the entity dropped.')
sysIcmpStatErrCksum = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 5, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIcmpStatErrCksum.setStatus('current')
if mibBuilder.loadTexts: sysIcmpStatErrCksum.setDescription('The number of ICMP messages which the entity received but \n\t\tdetermined as having ICMP-specific errors, bad ICMP checksums.')
sysIcmpStatErrLen = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 5, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIcmpStatErrLen.setStatus('current')
if mibBuilder.loadTexts: sysIcmpStatErrLen.setDescription('The number of ICMP messages which the entity received but \n\t\t\tdetermined as having ICMP-specific errors, bad ICMP bad length.')
sysIcmpStatErrMem = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 5, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIcmpStatErrMem.setStatus('current')
if mibBuilder.loadTexts: sysIcmpStatErrMem.setDescription('The number of memory allocation errors in the process.')
sysIcmpStatErrRtx = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 5, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIcmpStatErrRtx.setStatus('current')
if mibBuilder.loadTexts: sysIcmpStatErrRtx.setDescription('The number of routing errors.')
sysIcmpStatErrProto = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 5, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIcmpStatErrProto.setStatus('current')
if mibBuilder.loadTexts: sysIcmpStatErrProto.setDescription('The number of ICMP messages which the entity received but\n\t\tdetermined as having protocol errors.')
sysIcmpStatErrOpt = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 5, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIcmpStatErrOpt.setStatus('current')
if mibBuilder.loadTexts: sysIcmpStatErrOpt.setDescription('The number of errors in options.')
sysIcmpStatErr = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 5, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIcmpStatErr.setStatus('current')
if mibBuilder.loadTexts: sysIcmpStatErr.setDescription('The number of other not specified errors.')
sysIcmp6StatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 6, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysIcmp6StatResetStats.setStatus('current')
if mibBuilder.loadTexts: sysIcmp6StatResetStats.setDescription('The action to reset resettable statistics data in sysGlobalIcmp6Stat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
sysIcmp6StatTx = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 6, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIcmp6StatTx.setStatus('current')
if mibBuilder.loadTexts: sysIcmp6StatTx.setDescription('The total number of ICMP messages which this entity attempted \n\t\tto send.')
sysIcmp6StatRx = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 6, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIcmp6StatRx.setStatus('current')
if mibBuilder.loadTexts: sysIcmp6StatRx.setDescription('The total number of ICMP messages which the entity received.')
sysIcmp6StatForward = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 6, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIcmp6StatForward.setStatus('current')
if mibBuilder.loadTexts: sysIcmp6StatForward.setDescription('The number of ICMP messages which the entity forwarded.')
sysIcmp6StatDrop = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 6, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIcmp6StatDrop.setStatus('current')
if mibBuilder.loadTexts: sysIcmp6StatDrop.setDescription('The number of ICMP messages which the entity dropped.')
sysIcmp6StatErrCksum = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 6, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIcmp6StatErrCksum.setStatus('current')
if mibBuilder.loadTexts: sysIcmp6StatErrCksum.setDescription('The number of ICMP messages which the entity received but \n\t\tdetermined as having ICMP-specific errors, bad ICMP checksums.')
sysIcmp6StatErrLen = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 6, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIcmp6StatErrLen.setStatus('current')
if mibBuilder.loadTexts: sysIcmp6StatErrLen.setDescription('The number of ICMP messages which the entity received but \n\t\t\tdetermined as having ICMP-specific errors, bad ICMP bad length.')
sysIcmp6StatErrMem = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 6, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIcmp6StatErrMem.setStatus('current')
if mibBuilder.loadTexts: sysIcmp6StatErrMem.setDescription('The number of memory allocation errors in the process.')
sysIcmp6StatErrRtx = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 6, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIcmp6StatErrRtx.setStatus('current')
if mibBuilder.loadTexts: sysIcmp6StatErrRtx.setDescription('The number of routing errors.')
sysIcmp6StatErrProto = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 6, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIcmp6StatErrProto.setStatus('current')
if mibBuilder.loadTexts: sysIcmp6StatErrProto.setDescription('The number of ICMP messages which the entity received but\n\t\tdetermined as having protocol errors.')
sysIcmp6StatErrOpt = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 6, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIcmp6StatErrOpt.setStatus('current')
if mibBuilder.loadTexts: sysIcmp6StatErrOpt.setDescription('The number of errors in options.')
sysIcmp6StatErr = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 6, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIcmp6StatErr.setStatus('current')
if mibBuilder.loadTexts: sysIcmp6StatErr.setDescription('The number of other not specified errors.')
sysIpStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 7, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysIpStatResetStats.setStatus('current')
if mibBuilder.loadTexts: sysIpStatResetStats.setDescription('The action to reset resettable statistics data in sysGlobalIpStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
sysIpStatTx = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 7, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIpStatTx.setStatus('current')
if mibBuilder.loadTexts: sysIpStatTx.setDescription('The total number of transmitted datagrams to interfaces.')
sysIpStatRx = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 7, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIpStatRx.setStatus('current')
if mibBuilder.loadTexts: sysIpStatRx.setDescription('The total number of received datagrams from interfaces.')
sysIpStatDropped = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 7, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIpStatDropped.setStatus('current')
if mibBuilder.loadTexts: sysIpStatDropped.setDescription('The total number of dropped datagrams.')
sysIpStatRxFrag = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 7, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIpStatRxFrag.setStatus('current')
if mibBuilder.loadTexts: sysIpStatRxFrag.setDescription('The number of received IP datagrams that have been successfully \n\t\tfragmented at this entity.')
sysIpStatRxFragDropped = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 7, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIpStatRxFragDropped.setStatus('current')
if mibBuilder.loadTexts: sysIpStatRxFragDropped.setDescription('The number of received IP datagrams that have been dropped\n\t\tbecause they needed to be fragmented at this entity but could \n\t\tnot be.')
sysIpStatTxFrag = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 7, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIpStatTxFrag.setStatus('current')
if mibBuilder.loadTexts: sysIpStatTxFrag.setDescription('The number of transmitted IP datagrams that have been successfully \n\t\tfragmented at this entity.')
sysIpStatTxFragDropped = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 7, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIpStatTxFragDropped.setStatus('current')
if mibBuilder.loadTexts: sysIpStatTxFragDropped.setDescription('The number of transmitted IP datagrams that have been dropped\n\t\tbecause they needed to be fragmented at this entity but could \n\t\tnot be.')
sysIpStatReassembled = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 7, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIpStatReassembled.setStatus('current')
if mibBuilder.loadTexts: sysIpStatReassembled.setDescription('The number of IP datagrams successfully reassembled.')
sysIpStatErrCksum = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 7, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIpStatErrCksum.setStatus('current')
if mibBuilder.loadTexts: sysIpStatErrCksum.setDescription('The number of datagrams discarded due to errors in their\n\t\tIP headers, bad checksums.')
sysIpStatErrLen = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 7, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIpStatErrLen.setStatus('current')
if mibBuilder.loadTexts: sysIpStatErrLen.setDescription('The number of IP datagrams discarded due to errors in their\n\t\tIP headers, bad length.')
sysIpStatErrMem = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 7, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIpStatErrMem.setStatus('current')
if mibBuilder.loadTexts: sysIpStatErrMem.setDescription('The number of memory allocation errors in the packet process.')
sysIpStatErrRtx = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 7, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIpStatErrRtx.setStatus('current')
if mibBuilder.loadTexts: sysIpStatErrRtx.setDescription('The number of routing errors.')
sysIpStatErrProto = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 7, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIpStatErrProto.setStatus('current')
if mibBuilder.loadTexts: sysIpStatErrProto.setDescription('The number of IP datagrams discarded due to errors in their\n\t\tprotocols.')
sysIpStatErrOpt = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 7, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIpStatErrOpt.setStatus('current')
if mibBuilder.loadTexts: sysIpStatErrOpt.setDescription('The number of errors in options.')
sysIpStatErrReassembledTooLong = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 7, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIpStatErrReassembledTooLong.setStatus('current')
if mibBuilder.loadTexts: sysIpStatErrReassembledTooLong.setDescription('The number of IP datagrams discarded due to errors of \n\t\treassembled too long.')
sysIpStatNbrPbqFullDropped = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 7, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIpStatNbrPbqFullDropped.setStatus('current')
if mibBuilder.loadTexts: sysIpStatNbrPbqFullDropped.setDescription('The number of IP datagrams dropped because the neighbor\n\t        queue was full.')
sysIpStatNbrUnreachableDropped = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 7, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIpStatNbrUnreachableDropped.setStatus('current')
if mibBuilder.loadTexts: sysIpStatNbrUnreachableDropped.setDescription('The number of IP datagrams dropped because the neighbor\n\t        host or gateway was unreachable.')
sysIpStatMcastTx = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 7, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIpStatMcastTx.setStatus('current')
if mibBuilder.loadTexts: sysIpStatMcastTx.setDescription('Number of transmitted multicast packets.')
sysIpStatMcastRx = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 7, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIpStatMcastRx.setStatus('current')
if mibBuilder.loadTexts: sysIpStatMcastRx.setDescription('Number of received multicast packets.')
sysIpStatErrMcastRpf = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 7, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIpStatErrMcastRpf.setStatus('current')
if mibBuilder.loadTexts: sysIpStatErrMcastRpf.setDescription('Number of multicast packets dropped due to failed\n\t        reverse-path-forward (RPF) check.')
sysIpStatErrMcastWrongIf = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 7, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIpStatErrMcastWrongIf.setStatus('current')
if mibBuilder.loadTexts: sysIpStatErrMcastWrongIf.setDescription('Number of multicast packets dropped due to wrong interface.')
sysIpStatErrMcastNoRoute = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 7, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIpStatErrMcastNoRoute.setStatus('current')
if mibBuilder.loadTexts: sysIpStatErrMcastNoRoute.setDescription('Number of multicast packets dropped due to failure to lookup route.')
sysIpStatErrMcastRouteLookupTimeout = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 7, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIpStatErrMcastRouteLookupTimeout.setStatus('current')
if mibBuilder.loadTexts: sysIpStatErrMcastRouteLookupTimeout.setDescription('Number of multicast packets dropped due to timeout while looking up\n\t        route.')
sysIpStatErrMcastMaxPendingPackets = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 7, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIpStatErrMcastMaxPendingPackets.setStatus('current')
if mibBuilder.loadTexts: sysIpStatErrMcastMaxPendingPackets.setDescription('Number of multicast packets dropped due to pending queue being full.')
sysIpStatErrMcastMaxPendingRoutes = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 7, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIpStatErrMcastMaxPendingRoutes.setStatus('current')
if mibBuilder.loadTexts: sysIpStatErrMcastMaxPendingRoutes.setDescription('Number of multicast packets dropped due to pending routing exceeded\n\t        the max number.')
sysIp6StatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 8, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysIp6StatResetStats.setStatus('current')
if mibBuilder.loadTexts: sysIp6StatResetStats.setDescription('The action to reset resettable statistics data in sysGlobalIp6Stat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
sysIp6StatTx = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 8, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIp6StatTx.setStatus('current')
if mibBuilder.loadTexts: sysIp6StatTx.setDescription('The total number of transmitted datagrams to interfaces.')
sysIp6StatRx = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 8, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIp6StatRx.setStatus('current')
if mibBuilder.loadTexts: sysIp6StatRx.setDescription('The total number of received datagrams from interfaces.')
sysIp6StatDropped = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 8, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIp6StatDropped.setStatus('current')
if mibBuilder.loadTexts: sysIp6StatDropped.setDescription('The total number of dropped datagrams.')
sysIp6StatRxFrag = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 8, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIp6StatRxFrag.setStatus('current')
if mibBuilder.loadTexts: sysIp6StatRxFrag.setDescription('The number of received IP datagrams that have been successfully \n\t\tfragmented at this entity.')
sysIp6StatRxFragDropped = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 8, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIp6StatRxFragDropped.setStatus('current')
if mibBuilder.loadTexts: sysIp6StatRxFragDropped.setDescription('The number of received IP datagrams that have been dropped\n\t\tbecause they needed to be fragmented at this entity but could \n\t\tnot be.')
sysIp6StatTxFrag = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 8, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIp6StatTxFrag.setStatus('current')
if mibBuilder.loadTexts: sysIp6StatTxFrag.setDescription('The number of transmitted IP datagrams that have been successfully \n\t\tfragmented at this entity.')
sysIp6StatTxFragDropped = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 8, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIp6StatTxFragDropped.setStatus('current')
if mibBuilder.loadTexts: sysIp6StatTxFragDropped.setDescription('The number of transmitted IP datagrams that have been dropped\n\t\tbecause they needed to be fragmented at this entity but could \n\t\tnot be.')
sysIp6StatReassembled = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 8, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIp6StatReassembled.setStatus('current')
if mibBuilder.loadTexts: sysIp6StatReassembled.setDescription('The number of IP datagrams successfully reassembled.')
sysIp6StatErrCksum = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 8, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIp6StatErrCksum.setStatus('current')
if mibBuilder.loadTexts: sysIp6StatErrCksum.setDescription('The number of datagrams discarded due to errors in their\n\t\tIP headers, bad checksums.')
sysIp6StatErrLen = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 8, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIp6StatErrLen.setStatus('current')
if mibBuilder.loadTexts: sysIp6StatErrLen.setDescription('The number of IP datagrams discarded due to errors in their\n\t\tIP headers, bad length.')
sysIp6StatErrMem = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 8, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIp6StatErrMem.setStatus('current')
if mibBuilder.loadTexts: sysIp6StatErrMem.setDescription('The number of memory allocation errors in the packet process.')
sysIp6StatErrRtx = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 8, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIp6StatErrRtx.setStatus('current')
if mibBuilder.loadTexts: sysIp6StatErrRtx.setDescription('The number of routing errors.')
sysIp6StatErrProto = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 8, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIp6StatErrProto.setStatus('current')
if mibBuilder.loadTexts: sysIp6StatErrProto.setDescription('The number of IP datagrams discarded due to errors in their\n\t\tprotocols.')
sysIp6StatErrOpt = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 8, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIp6StatErrOpt.setStatus('current')
if mibBuilder.loadTexts: sysIp6StatErrOpt.setDescription('The number of errors in options.')
sysIp6StatErrReassembledTooLong = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 8, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIp6StatErrReassembledTooLong.setStatus('current')
if mibBuilder.loadTexts: sysIp6StatErrReassembledTooLong.setDescription('The number of IP datagrams discarded due to errors of \n\t\treassembled too long.')
sysIp6StatNbrPbqFullDropped = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 8, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIp6StatNbrPbqFullDropped.setStatus('current')
if mibBuilder.loadTexts: sysIp6StatNbrPbqFullDropped.setDescription('The number of IP datagrams dropped because the neighbor\n\t        queue was full.')
sysIp6StatNbrUnreachableDropped = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 8, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIp6StatNbrUnreachableDropped.setStatus('current')
if mibBuilder.loadTexts: sysIp6StatNbrUnreachableDropped.setDescription('The number of IP datagrams dropped because the neighbor\n\t        host or gateway was unreachable.')
sysIp6StatMcastTx = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 8, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIp6StatMcastTx.setStatus('current')
if mibBuilder.loadTexts: sysIp6StatMcastTx.setDescription('Number of transmitted multicast packets.')
sysIp6StatMcastRx = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 8, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIp6StatMcastRx.setStatus('current')
if mibBuilder.loadTexts: sysIp6StatMcastRx.setDescription('Number of received multicast packets.')
sysIp6StatErrMcastRpf = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 8, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIp6StatErrMcastRpf.setStatus('current')
if mibBuilder.loadTexts: sysIp6StatErrMcastRpf.setDescription('Number of multicast packets dropped due to failed\n\t        reverse-path-forward (RPF) check.')
sysIp6StatErrMcastWrongIf = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 8, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIp6StatErrMcastWrongIf.setStatus('current')
if mibBuilder.loadTexts: sysIp6StatErrMcastWrongIf.setDescription('Number of multicast packets dropped due to wrong interface.')
sysIp6StatErrMcastNoRoute = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 8, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIp6StatErrMcastNoRoute.setStatus('current')
if mibBuilder.loadTexts: sysIp6StatErrMcastNoRoute.setDescription('Number of multicast packets dropped due to failure to lookup route.')
sysIp6StatErrMcastRouteLookupTimeout = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 8, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIp6StatErrMcastRouteLookupTimeout.setStatus('current')
if mibBuilder.loadTexts: sysIp6StatErrMcastRouteLookupTimeout.setDescription('Number of multicast packets dropped due to timeout while looking up\n\t        route.')
sysIp6StatErrMcastMaxPendingPackets = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 8, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIp6StatErrMcastMaxPendingPackets.setStatus('current')
if mibBuilder.loadTexts: sysIp6StatErrMcastMaxPendingPackets.setDescription('Number of multicast packets dropped due to pending queue being full.')
sysIp6StatErrMcastMaxPendingRoutes = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 8, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIp6StatErrMcastMaxPendingRoutes.setStatus('current')
if mibBuilder.loadTexts: sysIp6StatErrMcastMaxPendingRoutes.setDescription('Number of multicast packets dropped due to pending routing exceeded\n\t        the max number.')
sysClientsslStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysClientsslStatResetStats.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatResetStats.setDescription('The action to reset resettable statistics data in sysGlobalClientSslStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
sysClientsslStatCurConns = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatCurConns.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatCurConns.setDescription('The current number of concurrent connections with \n\t\t established SSL sessions being maintained by the filter.')
sysClientsslStatMaxConns = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatMaxConns.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatMaxConns.setDescription('The maximum number of concurrent connections with \n\t\t established SSL sessions being maintained by the filter.')
sysClientsslStatCurNativeConns = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatCurNativeConns.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatCurNativeConns.setDescription('The current number of concurrent native connections with \n\t\t established SSL sessions being maintained by the filter.')
sysClientsslStatMaxNativeConns = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatMaxNativeConns.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatMaxNativeConns.setDescription('The maximum number of concurrent native connections with \n\t\t established SSL sessions being maintained by the filter.')
sysClientsslStatTotNativeConns = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatTotNativeConns.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatTotNativeConns.setDescription('The total number of concurrent native connections with \n\t\t established SSL sessions being maintained by the filter.')
sysClientsslStatCurCompatConns = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatCurCompatConns.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatCurCompatConns.setDescription('The current number of concurrent compat connections with \n\t\t established SSL sessions being maintained by the filter.')
sysClientsslStatMaxCompatConns = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatMaxCompatConns.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatMaxCompatConns.setDescription('The maximum number of concurrent compat connections with \n\t\t established SSL sessions being maintained by the filter.')
sysClientsslStatTotCompatConns = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatTotCompatConns.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatTotCompatConns.setDescription('The total number of concurrent compat connections with \n\t\t established SSL sessions being maintained by the filter.')
sysClientsslStatEncryptedBytesIn = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatEncryptedBytesIn.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatEncryptedBytesIn.setDescription('The total encrypted bytes received.')
sysClientsslStatEncryptedBytesOut = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatEncryptedBytesOut.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatEncryptedBytesOut.setDescription('The total encrypted bytes sent.')
sysClientsslStatDecryptedBytesIn = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatDecryptedBytesIn.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatDecryptedBytesIn.setDescription('The total decrypted bytes received.')
sysClientsslStatDecryptedBytesOut = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatDecryptedBytesOut.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatDecryptedBytesOut.setDescription('The total decrypted bytes sent.')
sysClientsslStatRecordsIn = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatRecordsIn.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatRecordsIn.setDescription('The total records received.')
sysClientsslStatRecordsOut = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatRecordsOut.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatRecordsOut.setDescription('The total records sent.')
sysClientsslStatFullyHwAcceleratedConns = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatFullyHwAcceleratedConns.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatFullyHwAcceleratedConns.setDescription('Fully hardware-accelerated implies usage of the Cavium \n\t\t Nitrox or similar hardware accelerator such that all \n\t\t significant cryptographic operations are offloaded, \n\t\t including but not limited to the SSL handshake (at least \n\t\t the RSA/DSA/DH operations) and record processing (at least \n\t\t the bulk cipher plus MAC).')
sysClientsslStatPartiallyHwAcceleratedConns = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatPartiallyHwAcceleratedConns.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatPartiallyHwAcceleratedConns.setDescription('Partially hardware-accelerated indicates that at least the \n\t\t RSA decryptions are offloaded.')
sysClientsslStatNonHwAcceleratedConns = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatNonHwAcceleratedConns.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatNonHwAcceleratedConns.setDescription('Non-accelerated connections are those for which no \n\t\t steady-state hardware acceleration is available (either \n\t\t because no hardware accelerators are available or because \n\t\t the necessary cryptographic operations are unsupported).  \n\t\t Because the extent of hardware acceleration may not be known \n\t\t until a connection has closed (mid-stream SSL handshakes \n\t\t might renegotiate an SSL session not supported by hardware \n\t\t acceleration), this statistic will not be updated for a  \n\t\t given connection until it has closed.')
sysClientsslStatPrematureDisconnects = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatPrematureDisconnects.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatPrematureDisconnects.setDescription('The number of connections disconnected before SSL session \n\t\t establishment: the total number of connections that were \n\t\t prematurely closed before an SSL session was established, \n\t\t not including connections in pass-through mode.')
sysClientsslStatMidstreamRenegotiations = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatMidstreamRenegotiations.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatMidstreamRenegotiations.setDescription('The number of mid-stream SSL re-negotiations, not including \n\t\t initial SSL session establishment.')
sysClientsslStatSessCacheCurEntries = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatSessCacheCurEntries.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatSessCacheCurEntries.setDescription('The number of the current entries in this cache.')
sysClientsslStatSessCacheHits = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatSessCacheHits.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatSessCacheHits.setDescription('The total number of the cache hits.')
sysClientsslStatSessCacheLookups = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatSessCacheLookups.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatSessCacheLookups.setDescription('The total number of the cache lookups.')
sysClientsslStatSessCacheOverflows = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatSessCacheOverflows.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatSessCacheOverflows.setDescription('The total number of the cache overflows.')
sysClientsslStatSessCacheInvalidations = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatSessCacheInvalidations.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatSessCacheInvalidations.setDescription('The total number of the session invalidations.')
sysClientsslStatPeercertValid = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatPeercertValid.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatPeercertValid.setDescription('The total number of the valid certificates.')
sysClientsslStatPeercertInvalid = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatPeercertInvalid.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatPeercertInvalid.setDescription('The total number of the invalid certificates.')
sysClientsslStatPeercertNone = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatPeercertNone.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatPeercertNone.setDescription('The total number of connections without certificates.')
sysClientsslStatHandshakeFailures = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatHandshakeFailures.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatHandshakeFailures.setDescription('The total number of  handshake failures.')
sysClientsslStatBadRecords = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatBadRecords.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatBadRecords.setDescription('The total number of the bad records.')
sysClientsslStatFatalAlerts = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatFatalAlerts.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatFatalAlerts.setDescription('The total number of the fatal alerts.')
sysClientsslStatSslv2 = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatSslv2.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatSslv2.setDescription('The SSL protocol version 2.')
sysClientsslStatSslv3 = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatSslv3.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatSslv3.setDescription('The SSL protocol version 3.')
sysClientsslStatTlsv1 = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatTlsv1.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatTlsv1.setDescription('The SSL TLS protocol version 1.')
sysClientsslStatAdhKeyxchg = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatAdhKeyxchg.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatAdhKeyxchg.setDescription('The anonymous Diffie-Hellman.')
sysClientsslStatDhDssKeyxchg = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatDhDssKeyxchg.setStatus('deprecated')
if mibBuilder.loadTexts: sysClientsslStatDhDssKeyxchg.setDescription('Deprecated! DSS certificate is obsolete in BIGIP.\n\t\tThe diffie-Hellman w/ DSS certificate.')
sysClientsslStatDhRsaKeyxchg = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatDhRsaKeyxchg.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatDhRsaKeyxchg.setDescription('The diffie-Hellman w/ RSA certificate.')
sysClientsslStatDssKeyxchg = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatDssKeyxchg.setStatus('deprecated')
if mibBuilder.loadTexts: sysClientsslStatDssKeyxchg.setDescription('Deprecated! DSS certificate is obsolete in BIGIP.\n\t\tThe DSS certificate.')
sysClientsslStatEdhDssKeyxchg = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatEdhDssKeyxchg.setStatus('deprecated')
if mibBuilder.loadTexts: sysClientsslStatEdhDssKeyxchg.setDescription('Deprecated! DSS certificate is obsolete in BIGIP.\n\t\tThe ephemeral Diffie-Hellman w/ DSS cert.')
sysClientsslStatRsaKeyxchg = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatRsaKeyxchg.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatRsaKeyxchg.setDescription('The RSA certificate.')
sysClientsslStatNullBulk = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatNullBulk.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatNullBulk.setDescription('No encryption.')
sysClientsslStatAesBulk = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 42), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatAesBulk.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatAesBulk.setDescription('Advanced Encryption Standard (CBC).')
sysClientsslStatDesBulk = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatDesBulk.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatDesBulk.setDescription('Digital Encryption Standard (CBC).')
sysClientsslStatIdeaBulk = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 44), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatIdeaBulk.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatIdeaBulk.setDescription('IDEA (old SSLv2 cipher).')
sysClientsslStatRc2Bulk = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatRc2Bulk.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatRc2Bulk.setDescription('Rivest Cipher 2 (CBC).')
sysClientsslStatRc4Bulk = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 46), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatRc4Bulk.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatRc4Bulk.setDescription('Rivest Cipher 4 (CBC).')
sysClientsslStatNullDigest = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 47), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatNullDigest.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatNullDigest.setDescription('No message authentication.')
sysClientsslStatMd5Digest = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 48), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatMd5Digest.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatMd5Digest.setDescription('Message Digest 5.')
sysClientsslStatShaDigest = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 49), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatShaDigest.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatShaDigest.setDescription('Secure Hash Algorithm.')
sysClientsslStatNotssl = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 50), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatNotssl.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatNotssl.setDescription('The total number of the bad client greetings.')
sysClientsslStatEdhRsaKeyxchg = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 51), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatEdhRsaKeyxchg.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatEdhRsaKeyxchg.setDescription('Ephemeral Diffie-Hellman w/ RSA cert.')
sysClientsslStatTotConns5s = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 52), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatTotConns5s.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatTotConns5s.setDescription('The average total SSL connections from client-side to the system in last five seconds.')
sysClientsslStatTotConns1m = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 53), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatTotConns1m.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatTotConns1m.setDescription('The average total SSL connections from client-side to the system in last one minute.')
sysClientsslStatTotConns5m = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 54), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatTotConns5m.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatTotConns5m.setDescription('The average total SSL connections from client-side to the system in last five minutes.')
sysClientsslStatSecureHandshakes = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 55), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatSecureHandshakes.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatSecureHandshakes.setDescription('The number of handshakes, including mid-stream re-negotiations,\n\t\t\t performed with peers supporting SSL secure renegotiation.')
sysClientsslStatInsecureHandshakeAccepts = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 56), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatInsecureHandshakeAccepts.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatInsecureHandshakeAccepts.setDescription('The number of handshakes, including mid-stream re-negotiations,\n\t\t\t performed with peers not supporting SSL secure renegotiation.')
sysClientsslStatInsecureHandshakeRejects = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 57), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatInsecureHandshakeRejects.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatInsecureHandshakeRejects.setDescription('The number of rejected initial handshakes with peers\n\t\t\t not supporting SSL secure renegotiation.')
sysClientsslStatInsecureRenegotiationRejects = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 58), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatInsecureRenegotiationRejects.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatInsecureRenegotiationRejects.setDescription('The number of rejected renegotiation attempts by peers\n\t\t\t not supporting SSL secure renegotiation.')
sysClientsslStatSniRejects = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 59), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatSniRejects.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatSniRejects.setDescription('The number of rejected handshake attempts by peers\n\t\t\t not supporting SSL SNI extension or having mismatched\n\t\t\t server names.')
sysClientsslStatTlsv11 = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 60), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatTlsv11.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatTlsv11.setDescription('The SSL TLS protocol version 1.1.')
sysClientsslStatTlsv12 = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 61), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatTlsv12.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatTlsv12.setDescription('The SSL TLS protocol version 1.2.')
sysClientsslStatDtlsv1 = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 62), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatDtlsv1.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatDtlsv1.setDescription('The SSL DTLS protocol version 1.0.')
sysClientsslStatEcdheRsaKeyxchg = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 63), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatEcdheRsaKeyxchg.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatEcdheRsaKeyxchg.setDescription('Ephemeral ECDH w/ RSA cert.')
sysClientsslStatConns = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 64), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatConns.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatConns.setDescription('The total connections using SSL FWDP feature.')
sysClientsslStatCachedCerts = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 65), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatCachedCerts.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatCachedCerts.setDescription('The total SSL FWDP cached certificates.')
sysClientsslStatEcdhRsaKeyxchg = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 66), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatEcdhRsaKeyxchg.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatEcdhRsaKeyxchg.setDescription('Fixed ECDH with RSA signed cert.')
sysClientsslStatEcdheEcdsaKeyxchg = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 67), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatEcdheEcdsaKeyxchg.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatEcdheEcdsaKeyxchg.setDescription('Ephemeral ECDH with ECDSA cert.')
sysClientsslStatEcdhEcdsaKeyxchg = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 68), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatEcdhEcdsaKeyxchg.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatEcdhEcdsaKeyxchg.setDescription('Fixed ECDH with ECDSA cert.')
sysClientsslStatDheDssKeyxchg = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 69), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatDheDssKeyxchg.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatDheDssKeyxchg.setDescription('Ephemeral DH with DSS cert.')
sysClientsslStatAesGcmBulk = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 70), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatAesGcmBulk.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatAesGcmBulk.setDescription('Advanced Encryption Standard Galois Counter Mode (AES-GCM).')
sysClientsslStatDestinationIpBypasses = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 71), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatDestinationIpBypasses.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatDestinationIpBypasses.setDescription('The total SSL FWDP Destination IP Bypasses.')
sysClientsslStatSourceIpBypasses = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 72), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatSourceIpBypasses.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatSourceIpBypasses.setDescription('The total SSL FWDP Source IP Bypasses.')
sysClientsslStatHostnameBypasses = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 73), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatHostnameBypasses.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatHostnameBypasses.setDescription('The total SSL FWDP Hostname Bypasses.')
sysClientsslStatAggregateRenegotiationsRejected = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 74), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatAggregateRenegotiationsRejected.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatAggregateRenegotiationsRejected.setDescription('The total number of aggregate renegotiations rejected.')
sysClientsslStatOcspStaplingConns = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 75), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatOcspStaplingConns.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatOcspStaplingConns.setDescription('The total connections sending the status-request extension in the client hello.')
sysClientsslStatOcspStaplingResponseStatusErrors = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 76), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatOcspStaplingResponseStatusErrors.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatOcspStaplingResponseStatusErrors.setDescription('The total OCSP response errors.')
sysClientsslStatOcspStaplingResponseValidationErrors = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 77), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatOcspStaplingResponseValidationErrors.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatOcspStaplingResponseValidationErrors.setDescription('The total OCSP response validation errors.')
sysClientsslStatOcspStaplingCertStatusErrors = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 78), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatOcspStaplingCertStatusErrors.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatOcspStaplingCertStatusErrors.setDescription('The total certificate status errors (revoked, unknown).')
sysClientsslStatOcspStaplingOcspConnHttpErrors = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 79), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatOcspStaplingOcspConnHttpErrors.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatOcspStaplingOcspConnHttpErrors.setDescription('The total HTTP errors on the connection made to fetch the OCSP response.')
sysClientsslStatOcspStaplingOcspConnTimeouts = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 80), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatOcspStaplingOcspConnTimeouts.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatOcspStaplingOcspConnTimeouts.setDescription('The total timeouts on the connection made to fetch the OCSP response.')
sysClientsslStatOcspStaplingOcspConnFailures = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 81), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatOcspStaplingOcspConnFailures.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatOcspStaplingOcspConnFailures.setDescription('The total connection failures when fetching OCSP response.')
sysClientsslStatSessionMirrorSuccess = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 82), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatSessionMirrorSuccess.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatSessionMirrorSuccess.setDescription('The total SSL sessions mirrored successfully.')
sysClientsslStatSessionMirrorFailure = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 83), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatSessionMirrorFailure.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatSessionMirrorFailure.setDescription('The total SSL session mirror failures.')
sysClientsslStatConnectionMirrorPeerReady = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 84), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatConnectionMirrorPeerReady.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatConnectionMirrorPeerReady.setDescription('The total SSL HA peer ready messages.')
sysClientsslStatConnectionMirrorHaCtxSent = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 85), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatConnectionMirrorHaCtxSent.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatConnectionMirrorHaCtxSent.setDescription('The total SSL HA context sent messages.')
sysClientsslStatConnectionMirrorHaCtxRecv = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 86), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatConnectionMirrorHaCtxRecv.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatConnectionMirrorHaCtxRecv.setDescription('The total SSL HA context received messages.')
sysClientsslStatConnectionMirrorHaHsSuccess = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 87), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatConnectionMirrorHaHsSuccess.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatConnectionMirrorHaHsSuccess.setDescription('The total SSL HA handshake succesful.')
sysClientsslStatConnectionMirrorHaFailure = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 88), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatConnectionMirrorHaFailure.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatConnectionMirrorHaFailure.setDescription('The total SSL HA failures.')
sysClientsslStatConnectionMirrorHaTimeout = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 89), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatConnectionMirrorHaTimeout.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatConnectionMirrorHaTimeout.setDescription('The total SSL HA timeouts.')
sysClientsslStatDtlsTxPushbacks = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 90), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatDtlsTxPushbacks.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatDtlsTxPushbacks.setDescription('The total number of the Datagram Transport Layer Security transmitted packets which are pushed back.')
sysClientsslStatCamelliaBulk = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 91), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatCamelliaBulk.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatCamelliaBulk.setDescription('Camellia Cipher (CBC).')
sysClientsslStatActiveHandshakeRejected = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 92), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatActiveHandshakeRejected.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatActiveHandshakeRejected.setDescription('The total number of active handshakes rejected.')
sysClientsslStatCurrentActiveHandshakes = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 93), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatCurrentActiveHandshakes.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatCurrentActiveHandshakes.setDescription('The total number of current active handshakes.')
sysClientsslStatExtendedMasterSecrets = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 94), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatExtendedMasterSecrets.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatExtendedMasterSecrets.setDescription('The total number of extended master secret handshakes.')
sysClientsslStatBypassesHandshakeAlert = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 95), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatBypassesHandshakeAlert.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatBypassesHandshakeAlert.setDescription('The total ssl fwdp bypasses by receiving handshake alert.')
sysClientsslStatBypassClientCertificateRequest = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 96), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatBypassClientCertificateRequest.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatBypassClientCertificateRequest.setDescription('The total ssl fwdp bypasses by failed client certificate request.')
sysClientsslStatOcspFwdpClientsslCachedResp = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 97), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatOcspFwdpClientsslCachedResp.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatOcspFwdpClientsslCachedResp.setDescription('The total SSL OCSP FWDP certificate status responses cached.')
sysClientsslStatOcspFwdpClientsslCertStatusReq = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 98), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatOcspFwdpClientsslCertStatusReq.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatOcspFwdpClientsslCertStatusReq.setDescription('The number of connections that requested OCSP certificate status.')
sysClientsslStatOcspFwdpClientsslStapledResp = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 99), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatOcspFwdpClientsslStapledResp.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatOcspFwdpClientsslStapledResp.setDescription('The number of connections for which OCSP certificate status was stapled.')
sysClientsslStatOcspFwdpClientsslRespstatusErrResp = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 100), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatOcspFwdpClientsslRespstatusErrResp.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatOcspFwdpClientsslRespstatusErrResp.setDescription('The number of connections for which stapled response did not indicate success.')
sysClientsslStatOcspFwdpClientsslInvalidCertResp = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 101), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatOcspFwdpClientsslInvalidCertResp.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatOcspFwdpClientsslInvalidCertResp.setDescription('The number of connections for which invalid certificate was returned to indicate revoked response.')
sysClientsslStatOcspFwdpClientsslRevokedResp = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 102), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatOcspFwdpClientsslRevokedResp.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatOcspFwdpClientsslRevokedResp.setDescription('The number of connections for which stapled response indicated revoked certificate status.')
sysClientsslStatOcspFwdpClientsslUnknownResp = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 103), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatOcspFwdpClientsslUnknownResp.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatOcspFwdpClientsslUnknownResp.setDescription('The number of connections for which stapled response indicated unknown certificate status.')
sysClientsslStatC3dConns = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 104), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatC3dConns.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatC3dConns.setDescription('The total connections using SSL C3D feature.')
sysClientsslStatChacha20Poly1305Bulk = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 105), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatChacha20Poly1305Bulk.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatChacha20Poly1305Bulk.setDescription('ChaCha20-Poly1305.')
sysClientsslStatAesBulkOffload = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 106), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatAesBulkOffload.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatAesBulkOffload.setDescription('Advanced Encryption Standard (CBC) offload.')
sysClientsslStatAesGcmBulkOffload = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 107), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatAesGcmBulkOffload.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatAesGcmBulkOffload.setDescription('Advanced Encryption Standard Galois Counter Mode (AES-GCM) offload.')
sysClientsslStatChacha20Poly1305BulkOffld = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 108), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatChacha20Poly1305BulkOffld.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatChacha20Poly1305BulkOffld.setDescription('ChaCha20-Poly1305 offload.')
sysClientsslStatDesBulkOffload = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 109), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatDesBulkOffload.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatDesBulkOffload.setDescription('Digital Encryption Standard (CBC) offload.')
sysClientsslStatRc4BulkOffload = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 110), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatRc4BulkOffload.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatRc4BulkOffload.setDescription('Rivest Cipher 4 (CBC) offload.')
sysClientsslStatCamelliaBulkOffload = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 111), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatCamelliaBulkOffload.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatCamelliaBulkOffload.setDescription('Camellia Cipher (CBC) offload.')
sysClientsslStatMd5DigestOffload = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 112), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatMd5DigestOffload.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatMd5DigestOffload.setDescription('Message Digest 5 Offload.')
sysClientsslStatShaDigestOffload = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 113), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatShaDigestOffload.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatShaDigestOffload.setDescription('Secure Hash Algorithm offload.')
sysClientsslStatSha224Digest = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 114), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatSha224Digest.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatSha224Digest.setDescription('Secure Hash Algorithm 224.')
sysClientsslStatSha224DigestOffload = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 115), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatSha224DigestOffload.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatSha224DigestOffload.setDescription('Secure Hash Algorithm 224 offload.')
sysClientsslStatSha256Digest = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 116), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatSha256Digest.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatSha256Digest.setDescription('Secure Hash Algorithm 256.')
sysClientsslStatSha256DigestOffload = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 117), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatSha256DigestOffload.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatSha256DigestOffload.setDescription('Secure Hash Algorithm 256 offload.')
sysClientsslStatSha384Digest = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 118), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatSha384Digest.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatSha384Digest.setDescription('Secure Hash Algorithm 384.')
sysClientsslStatSha384DigestOffload = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 119), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatSha384DigestOffload.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatSha384DigestOffload.setDescription('Secure Hash Algorithm 384 offload.')
sysClientsslStatSha512Digest = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 120), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatSha512Digest.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatSha512Digest.setDescription('Secure Hash Algorithm 512.')
sysClientsslStatSha512DigestOffload = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 121), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatSha512DigestOffload.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatSha512DigestOffload.setDescription('Secure Hash Algorithm 512 offload.')
sysClientsslStatDhGroupP256 = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 122), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatDhGroupP256.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatDhGroupP256.setDescription('DH Group P256.')
sysClientsslStatDhGroupP256Offload = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 123), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatDhGroupP256Offload.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatDhGroupP256Offload.setDescription('DH Group P256 offload.')
sysClientsslStatDhGroupP384 = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 124), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatDhGroupP384.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatDhGroupP384.setDescription('DH Group P384.')
sysClientsslStatDhGroupP384Offload = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 125), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatDhGroupP384Offload.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatDhGroupP384Offload.setDescription('DH Group P384 offload.')
sysClientsslStatDhGroupX25519 = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 126), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatDhGroupX25519.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatDhGroupX25519.setDescription('DH Group X25519.')
sysClientsslStatDhGroupX25519Offload = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 127), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatDhGroupX25519Offload.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatDhGroupX25519Offload.setDescription('DH Group X25519 offload.')
sysClientsslStatRsaKeySize1024 = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 128), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatRsaKeySize1024.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatRsaKeySize1024.setDescription('RSA key size 1024.')
sysClientsslStatRsaKeySize1024Offload = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 129), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatRsaKeySize1024Offload.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatRsaKeySize1024Offload.setDescription('RSA key size 1024 offload.')
sysClientsslStatRsaKeySize2048 = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 130), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatRsaKeySize2048.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatRsaKeySize2048.setDescription('RSA key size 2048.')
sysClientsslStatRsaKeySize2048Offload = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 131), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatRsaKeySize2048Offload.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatRsaKeySize2048Offload.setDescription('RSA key size 2048_offload.')
sysClientsslStatRsaKeySize4096 = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 132), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatRsaKeySize4096.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatRsaKeySize4096.setDescription('RSA key size 4096.')
sysClientsslStatRsaKeySize4096Offload = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 133), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatRsaKeySize4096Offload.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatRsaKeySize4096Offload.setDescription('RSA key size 4096 offload.')
sysClientsslStatTotalHandshakesSoftware = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 134), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatTotalHandshakesSoftware.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatTotalHandshakesSoftware.setDescription('Handshake records processed in software.')
sysClientsslStatTotalHandshakesOffload = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 9, 135), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClientsslStatTotalHandshakesOffload.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatTotalHandshakesOffload.setDescription('Handshake records offloaded.')
sysServersslStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 10, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysServersslStatResetStats.setStatus('current')
if mibBuilder.loadTexts: sysServersslStatResetStats.setDescription('The action to reset resettable statistics data in sysGlobalServerSslStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
sysServersslStatCurConns = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 10, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServersslStatCurConns.setStatus('current')
if mibBuilder.loadTexts: sysServersslStatCurConns.setDescription('The current number of concurrent connections with \n\t\t established SSL sessions being maintained by the filter.')
sysServersslStatMaxConns = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 10, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServersslStatMaxConns.setStatus('current')
if mibBuilder.loadTexts: sysServersslStatMaxConns.setDescription('The maximum number of concurrent connections with \n\t\t established SSL sessions being maintained by the filter.')
sysServersslStatCurNativeConns = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 10, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServersslStatCurNativeConns.setStatus('current')
if mibBuilder.loadTexts: sysServersslStatCurNativeConns.setDescription('The current number of concurrent native connections with \n\t\t established SSL sessions being maintained by the filter.')
sysServersslStatMaxNativeConns = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 10, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServersslStatMaxNativeConns.setStatus('current')
if mibBuilder.loadTexts: sysServersslStatMaxNativeConns.setDescription('The maximum number of concurrent native connections with \n\t\t established SSL sessions being maintained by the filter.')
sysServersslStatTotNativeConns = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 10, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServersslStatTotNativeConns.setStatus('current')
if mibBuilder.loadTexts: sysServersslStatTotNativeConns.setDescription('The total number of concurrent native connections with \n\t\t established SSL sessions being maintained by the filter.')
sysServersslStatCurCompatConns = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 10, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServersslStatCurCompatConns.setStatus('current')
if mibBuilder.loadTexts: sysServersslStatCurCompatConns.setDescription('The current number of concurrent compat connections with \n\t\t established SSL sessions being maintained by the filter.')
sysServersslStatMaxCompatConns = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 10, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServersslStatMaxCompatConns.setStatus('current')
if mibBuilder.loadTexts: sysServersslStatMaxCompatConns.setDescription('The maximum number of concurrent compat connections with \n\t\t established SSL sessions being maintained by the filter.')
sysServersslStatTotCompatConns = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 10, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServersslStatTotCompatConns.setStatus('current')
if mibBuilder.loadTexts: sysServersslStatTotCompatConns.setDescription('The total number of concurrent compat connections with \n\t\t established SSL sessions being maintained by the filter.')
sysServersslStatEncryptedBytesIn = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 10, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServersslStatEncryptedBytesIn.setStatus('current')
if mibBuilder.loadTexts: sysServersslStatEncryptedBytesIn.setDescription('The total encrypted bytes received.')
sysServersslStatEncryptedBytesOut = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 10, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServersslStatEncryptedBytesOut.setStatus('current')
if mibBuilder.loadTexts: sysServersslStatEncryptedBytesOut.setDescription('The total encrypted bytes sent.')
sysServersslStatDecryptedBytesIn = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 10, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServersslStatDecryptedBytesIn.setStatus('current')
if mibBuilder.loadTexts: sysServersslStatDecryptedBytesIn.setDescription('The total decrypted bytes received.')
sysServersslStatDecryptedBytesOut = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 10, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServersslStatDecryptedBytesOut.setStatus('current')
if mibBuilder.loadTexts: sysServersslStatDecryptedBytesOut.setDescription('The total decrypted bytes sent.')
sysServersslStatRecordsIn = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 10, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServersslStatRecordsIn.setStatus('current')
if mibBuilder.loadTexts: sysServersslStatRecordsIn.setDescription('The total records received.')
sysServersslStatRecordsOut = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 10, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServersslStatRecordsOut.setStatus('current')
if mibBuilder.loadTexts: sysServersslStatRecordsOut.setDescription('The total records sent.')
sysServersslStatFullyHwAcceleratedConns = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 10, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServersslStatFullyHwAcceleratedConns.setStatus('current')
if mibBuilder.loadTexts: sysServersslStatFullyHwAcceleratedConns.setDescription('Fully hardware-accelerated implies usage of the Cavium \n\t\t Nitrox or similar hardware accelerator such that all \n\t\t significant cryptographic operations are offloaded, \n\t\t including but not limited to the SSL handshake (at least \n\t\t the RSA/DSA/DH operations) and record processing (at least \n\t\t the bulk cipher plus MAC).')
sysServersslStatPartiallyHwAcceleratedConns = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 10, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServersslStatPartiallyHwAcceleratedConns.setStatus('current')
if mibBuilder.loadTexts: sysServersslStatPartiallyHwAcceleratedConns.setDescription('Partially hardware-accelerated indicates that at least the \n\t\t RSA decryptions are offloaded.')
sysServersslStatNonHwAcceleratedConns = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 10, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServersslStatNonHwAcceleratedConns.setStatus('current')
if mibBuilder.loadTexts: sysServersslStatNonHwAcceleratedConns.setDescription('Non-accelerated connections are those for which no \n\t\t steady-state hardware acceleration is available (either \n\t\t because no hardware accelerators are available or because \n\t\t the necessary cryptographic operations are unsupported).  \n\t\t Because the extent of hardware acceleration may not be known \n\t\t until a connection has closed (mid-stream SSL handshakes \n\t\t might renegotiate an SSL session not supported by hardware \n\t\t acceleration), this statistic will not be updated for a  \n\t\t given connection until it has closed.')
sysServersslStatPrematureDisconnects = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 10, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServersslStatPrematureDisconnects.setStatus('current')
if mibBuilder.loadTexts: sysServersslStatPrematureDisconnects.setDescription('The number of connections disconnected before SSL session \n\t\t establishment: the total number of connections that were \n\t\t prematurely closed before an SSL session was established, \n\t\t not including connections in pass-through mode.')
sysServersslStatMidstreamRenegotiations = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 10, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServersslStatMidstreamRenegotiations.setStatus('current')
if mibBuilder.loadTexts: sysServersslStatMidstreamRenegotiations.setDescription('The number of mid-stream SSL re-negotiations, not including \n\t\t initial SSL session establishment.')
sysServersslStatSessCacheCurEntries = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 10, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServersslStatSessCacheCurEntries.setStatus('current')
if mibBuilder.loadTexts: sysServersslStatSessCacheCurEntries.setDescription('The number of the current entries in this cache.')
sysServersslStatSessCacheHits = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 10, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServersslStatSessCacheHits.setStatus('current')
if mibBuilder.loadTexts: sysServersslStatSessCacheHits.setDescription('The total number of the cache hits.')
sysServersslStatSessCacheLookups = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 10, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServersslStatSessCacheLookups.setStatus('current')
if mibBuilder.loadTexts: sysServersslStatSessCacheLookups.setDescription('The total number of the cache lookups.')
sysServersslStatSessCacheOverflows = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 10, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServersslStatSessCacheOverflows.setStatus('current')
if mibBuilder.loadTexts: sysServersslStatSessCacheOverflows.setDescription('The total number of the cache overflows.')
sysServersslStatSessCacheInvalidations = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 10, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServersslStatSessCacheInvalidations.setStatus('current')
if mibBuilder.loadTexts: sysServersslStatSessCacheInvalidations.setDescription('The total number of the session invalidations.')
sysServersslStatPeercertValid = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 10, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServersslStatPeercertValid.setStatus('current')
if mibBuilder.loadTexts: sysServersslStatPeercertValid.setDescription('The total number of the valid certificates.')
sysServersslStatPeercertInvalid = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 10, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServersslStatPeercertInvalid.setStatus('current')
if mibBuilder.loadTexts: sysServersslStatPeercertInvalid.setDescription('The total number of the invalid certificates.')
sysServersslStatPeercertNone = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 10, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServersslStatPeercertNone.setStatus('current')
if mibBuilder.loadTexts: sysServersslStatPeercertNone.setDescription('The total number of connections without certificates.')
sysServersslStatHandshakeFailures = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 10, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServersslStatHandshakeFailures.setStatus('current')
if mibBuilder.loadTexts: sysServersslStatHandshakeFailures.setDescription('The total number of handshake failures.')
sysServersslStatBadRecords = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 10, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServersslStatBadRecords.setStatus('current')
if mibBuilder.loadTexts: sysServersslStatBadRecords.setDescription('The total number of the bad records.')
sysServersslStatFatalAlerts = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 10, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServersslStatFatalAlerts.setStatus('current')
if mibBuilder.loadTexts: sysServersslStatFatalAlerts.setDescription('The total number of the fatal alerts.')
sysServersslStatSslv2 = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 10, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServersslStatSslv2.setStatus('current')
if mibBuilder.loadTexts: sysServersslStatSslv2.setDescription('The SSL protocol version 2.')
sysServersslStatSslv3 = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 10, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServersslStatSslv3.setStatus('current')
if mibBuilder.loadTexts: sysServersslStatSslv3.setDescription('The SSL protocol version 3.')
sysServersslStatTlsv1 = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 10, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServersslStatTlsv1.setStatus('current')
if mibBuilder.loadTexts: sysServersslStatTlsv1.setDescription('The SSL TLS protocol version 1.')
sysServersslStatAdhKeyxchg = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 10, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServersslStatAdhKeyxchg.setStatus('current')
if mibBuilder.loadTexts: sysServersslStatAdhKeyxchg.setDescription('The anonymous Diffie-Hellman.')
sysServersslStatDhDssKeyxchg = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 10, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServersslStatDhDssKeyxchg.setStatus('deprecated')
if mibBuilder.loadTexts: sysServersslStatDhDssKeyxchg.setDescription('Deprecated! DSS certificate is obsolete in BIGIP.\n\t\tThe diffie-Hellman w/ DSS certificate.')
sysServersslStatDhRsaKeyxchg = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 10, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServersslStatDhRsaKeyxchg.setStatus('current')
if mibBuilder.loadTexts: sysServersslStatDhRsaKeyxchg.setDescription('The diffie-Hellman w/ RSA certificate.')
sysServersslStatDssKeyxchg = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 10, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServersslStatDssKeyxchg.setStatus('deprecated')
if mibBuilder.loadTexts: sysServersslStatDssKeyxchg.setDescription('Deprecated! DSS certificate is obsolete in BIGIP.\n\t\tThe DSS certificate.')
sysServersslStatEdhDssKeyxchg = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 10, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServersslStatEdhDssKeyxchg.setStatus('deprecated')
if mibBuilder.loadTexts: sysServersslStatEdhDssKeyxchg.setDescription('Deprecated! DSS certificate is obsolete in BIGIP.\n\t\tThe ephemeral Diffie-Hellman w/ DSS cert.')
sysServersslStatRsaKeyxchg = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 10, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServersslStatRsaKeyxchg.setStatus('current')
if mibBuilder.loadTexts: sysServersslStatRsaKeyxchg.setDescription('The RSA certificate.')
sysServersslStatNullBulk = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 10, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServersslStatNullBulk.setStatus('current')
if mibBuilder.loadTexts: sysServersslStatNullBulk.setDescription('No encryption.')
sysServersslStatAesBulk = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 10, 42), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServersslStatAesBulk.setStatus('current')
if mibBuilder.loadTexts: sysServersslStatAesBulk.setDescription('Advanced Encryption Standard (CBC).')
sysServersslStatDesBulk = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 10, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServersslStatDesBulk.setStatus('current')
if mibBuilder.loadTexts: sysServersslStatDesBulk.setDescription('Digital Encryption Standard (CBC).')
sysServersslStatIdeaBulk = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 10, 44), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServersslStatIdeaBulk.setStatus('current')
if mibBuilder.loadTexts: sysServersslStatIdeaBulk.setDescription('IDEA (old SSLv2 cipher).')
sysServersslStatRc2Bulk = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 10, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServersslStatRc2Bulk.setStatus('current')
if mibBuilder.loadTexts: sysServersslStatRc2Bulk.setDescription('Rivest Cipher 2 (CBC).')
sysServersslStatRc4Bulk = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 10, 46), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServersslStatRc4Bulk.setStatus('current')
if mibBuilder.loadTexts: sysServersslStatRc4Bulk.setDescription('Rivest Cipher 4 (CBC).')
sysServersslStatNullDigest = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 10, 47), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServersslStatNullDigest.setStatus('current')
if mibBuilder.loadTexts: sysServersslStatNullDigest.setDescription('No message authentication.')
sysServersslStatMd5Digest = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 10, 48), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServersslStatMd5Digest.setStatus('current')
if mibBuilder.loadTexts: sysServersslStatMd5Digest.setDescription('Message Digest 5.')
sysServersslStatShaDigest = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 10, 49), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServersslStatShaDigest.setStatus('current')
if mibBuilder.loadTexts: sysServersslStatShaDigest.setDescription('Secure Hash Algorithm.')
sysServersslStatNotssl = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 10, 50), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServersslStatNotssl.setStatus('current')
if mibBuilder.loadTexts: sysServersslStatNotssl.setDescription('The total number of the bad client greetings.')
sysServersslStatEdhRsaKeyxchg = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 10, 51), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServersslStatEdhRsaKeyxchg.setStatus('current')
if mibBuilder.loadTexts: sysServersslStatEdhRsaKeyxchg.setDescription('Ephemeral Diffie-Hellman w/ RSA cert.')
sysServersslStatSecureHandshakes = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 10, 52), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServersslStatSecureHandshakes.setStatus('current')
if mibBuilder.loadTexts: sysServersslStatSecureHandshakes.setDescription('The number of handshakes, including mid-stream re-negotiations,\n\t\t\t performed with peers supporting SSL secure renegotiation.')
sysServersslStatInsecureHandshakeAccepts = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 10, 53), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServersslStatInsecureHandshakeAccepts.setStatus('current')
if mibBuilder.loadTexts: sysServersslStatInsecureHandshakeAccepts.setDescription('The number of handshakes, including mid-stream re-negotiations,\n\t\t\t performed with peers not supporting SSL secure renegotiation.')
sysServersslStatInsecureHandshakeRejects = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 10, 54), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServersslStatInsecureHandshakeRejects.setStatus('current')
if mibBuilder.loadTexts: sysServersslStatInsecureHandshakeRejects.setDescription('The number of rejected initial handshakes with peers\n\t\t\t not supporting SSL secure renegotiation.')
sysServersslStatInsecureRenegotiationRejects = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 10, 55), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServersslStatInsecureRenegotiationRejects.setStatus('current')
if mibBuilder.loadTexts: sysServersslStatInsecureRenegotiationRejects.setDescription('The number of rejected renegotiation attempts by peers\n\t\t\t not supporting SSL secure renegotiation.')
sysServersslStatSniRejects = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 10, 56), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServersslStatSniRejects.setStatus('current')
if mibBuilder.loadTexts: sysServersslStatSniRejects.setDescription('The number of rejected handshake attempts by peers\n\t\t\t not supporting SSL SNI extension or having mismatched\n\t\t\t server names.')
sysServersslStatTlsv11 = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 10, 57), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServersslStatTlsv11.setStatus('current')
if mibBuilder.loadTexts: sysServersslStatTlsv11.setDescription('The SSL TLS protocol version 1.1.')
sysServersslStatTlsv12 = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 10, 58), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServersslStatTlsv12.setStatus('current')
if mibBuilder.loadTexts: sysServersslStatTlsv12.setDescription('The SSL TLS protocol version 1.2.')
sysServersslStatDtlsv1 = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 10, 59), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServersslStatDtlsv1.setStatus('current')
if mibBuilder.loadTexts: sysServersslStatDtlsv1.setDescription('The SSL DTLS protocol version 1.0.')
sysServersslStatEcdheRsaKeyxchg = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 10, 60), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServersslStatEcdheRsaKeyxchg.setStatus('current')
if mibBuilder.loadTexts: sysServersslStatEcdheRsaKeyxchg.setDescription('Ephemeral ECDH w/ RSA cert.')
sysServersslStatConns = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 10, 61), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServersslStatConns.setStatus('current')
if mibBuilder.loadTexts: sysServersslStatConns.setDescription('The total connections using SSL FWDP feature.')
sysServersslStatEcdhRsaKeyxchg = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 10, 62), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServersslStatEcdhRsaKeyxchg.setStatus('current')
if mibBuilder.loadTexts: sysServersslStatEcdhRsaKeyxchg.setDescription('Fixed ECDH with RSA signed cert.')
sysServersslStatEcdheEcdsaKeyxchg = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 10, 63), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServersslStatEcdheEcdsaKeyxchg.setStatus('current')
if mibBuilder.loadTexts: sysServersslStatEcdheEcdsaKeyxchg.setDescription('Ephemeral ECDH with ECDSA cert.')
sysServersslStatEcdhEcdsaKeyxchg = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 10, 64), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServersslStatEcdhEcdsaKeyxchg.setStatus('current')
if mibBuilder.loadTexts: sysServersslStatEcdhEcdsaKeyxchg.setDescription('Fixed ECDH with ECDSA cert.')
sysServersslStatDheDssKeyxchg = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 10, 65), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServersslStatDheDssKeyxchg.setStatus('current')
if mibBuilder.loadTexts: sysServersslStatDheDssKeyxchg.setDescription('Ephemeral DH with DSS cert.')
sysServersslStatAesGcmBulk = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 10, 66), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServersslStatAesGcmBulk.setStatus('current')
if mibBuilder.loadTexts: sysServersslStatAesGcmBulk.setDescription('Advanced Encryption Standard Galois Counter Mode (AES-GCM).')
sysServersslStatDestinationIpBypasses = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 10, 67), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServersslStatDestinationIpBypasses.setStatus('current')
if mibBuilder.loadTexts: sysServersslStatDestinationIpBypasses.setDescription('The total SSL FWDP Destination IP Bypasses.')
sysServersslStatSourceIpBypasses = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 10, 68), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServersslStatSourceIpBypasses.setStatus('current')
if mibBuilder.loadTexts: sysServersslStatSourceIpBypasses.setDescription('The total SSL FWDP Source IP Bypasses.')
sysServersslStatHostnameBypasses = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 10, 69), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServersslStatHostnameBypasses.setStatus('current')
if mibBuilder.loadTexts: sysServersslStatHostnameBypasses.setDescription('The total SSL FWDP Hostname Bypasses.')
sysServersslStatRenegotiationsRejected = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 10, 70), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServersslStatRenegotiationsRejected.setStatus('current')
if mibBuilder.loadTexts: sysServersslStatRenegotiationsRejected.setDescription('The total number of renegotiations rejected.')
sysServersslStatAggregateRenegotiationsRejected = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 10, 71), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServersslStatAggregateRenegotiationsRejected.setStatus('current')
if mibBuilder.loadTexts: sysServersslStatAggregateRenegotiationsRejected.setDescription('The total number of aggregate renegotiations rejected.')
sysServersslStatSessionMirrorSuccess = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 10, 72), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServersslStatSessionMirrorSuccess.setStatus('current')
if mibBuilder.loadTexts: sysServersslStatSessionMirrorSuccess.setDescription('The total SSL sessions mirrored successfully.')
sysServersslStatSessionMirrorFailure = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 10, 73), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServersslStatSessionMirrorFailure.setStatus('current')
if mibBuilder.loadTexts: sysServersslStatSessionMirrorFailure.setDescription('The total SSL session mirror failures.')
sysServersslStatConnectionMirrorPeerReady = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 10, 74), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServersslStatConnectionMirrorPeerReady.setStatus('current')
if mibBuilder.loadTexts: sysServersslStatConnectionMirrorPeerReady.setDescription('The total SSL HA peer ready messages.')
sysServersslStatConnectionMirrorHaCtxSent = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 10, 75), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServersslStatConnectionMirrorHaCtxSent.setStatus('current')
if mibBuilder.loadTexts: sysServersslStatConnectionMirrorHaCtxSent.setDescription('The total SSL HA context sent messages.')
sysServersslStatConnectionMirrorHaCtxRecv = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 10, 76), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServersslStatConnectionMirrorHaCtxRecv.setStatus('current')
if mibBuilder.loadTexts: sysServersslStatConnectionMirrorHaCtxRecv.setDescription('The total SSL HA context received messages.')
sysServersslStatConnectionMirrorHaHsSuccess = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 10, 77), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServersslStatConnectionMirrorHaHsSuccess.setStatus('current')
if mibBuilder.loadTexts: sysServersslStatConnectionMirrorHaHsSuccess.setDescription('The total SSL HA handshake succesful.')
sysServersslStatConnectionMirrorHaFailure = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 10, 78), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServersslStatConnectionMirrorHaFailure.setStatus('current')
if mibBuilder.loadTexts: sysServersslStatConnectionMirrorHaFailure.setDescription('The total SSL HA failures.')
sysServersslStatConnectionMirrorHaTimeout = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 10, 79), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServersslStatConnectionMirrorHaTimeout.setStatus('current')
if mibBuilder.loadTexts: sysServersslStatConnectionMirrorHaTimeout.setDescription('The total SSL HA timeouts.')
sysServersslStatDtlsTxPushbacks = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 10, 80), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServersslStatDtlsTxPushbacks.setStatus('current')
if mibBuilder.loadTexts: sysServersslStatDtlsTxPushbacks.setDescription('The total number of the Datagram Transport Layer Security transmitted packets which are pushed back.')
sysServersslStatCamelliaBulk = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 10, 81), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServersslStatCamelliaBulk.setStatus('current')
if mibBuilder.loadTexts: sysServersslStatCamelliaBulk.setDescription('Camellia Cipher (CBC).')
sysServersslStatActiveHandshakeRejected = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 10, 82), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServersslStatActiveHandshakeRejected.setStatus('current')
if mibBuilder.loadTexts: sysServersslStatActiveHandshakeRejected.setDescription('The total number of active handshakes rejected.')
sysServersslStatCurrentActiveHandshakes = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 10, 83), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServersslStatCurrentActiveHandshakes.setStatus('current')
if mibBuilder.loadTexts: sysServersslStatCurrentActiveHandshakes.setDescription('The total number of current active handshakes.')
sysServersslStatExtendedMasterSecrets = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 10, 84), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServersslStatExtendedMasterSecrets.setStatus('current')
if mibBuilder.loadTexts: sysServersslStatExtendedMasterSecrets.setDescription('The total number of extended master secret handshakes.')
sysServersslStatBypassesHandshakeAlert = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 10, 85), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServersslStatBypassesHandshakeAlert.setStatus('current')
if mibBuilder.loadTexts: sysServersslStatBypassesHandshakeAlert.setDescription('The total ssl fwdp bypasses by receiving handshake alert.')
sysServersslStatBypassClientCertificateRequest = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 10, 86), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServersslStatBypassClientCertificateRequest.setStatus('current')
if mibBuilder.loadTexts: sysServersslStatBypassClientCertificateRequest.setDescription('The total ssl fwdp bypasses by failed client certificate request.')
sysServersslStatOcspServersslCachedResp = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 10, 87), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServersslStatOcspServersslCachedResp.setStatus('current')
if mibBuilder.loadTexts: sysServersslStatOcspServersslCachedResp.setDescription('Total number of server connections for which OCSP response was obtained from the cache.')
sysServersslStatOcspServersslStapledResp = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 10, 88), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServersslStatOcspServersslStapledResp.setStatus('current')
if mibBuilder.loadTexts: sysServersslStatOcspServersslStapledResp.setDescription('Total number of server connections that had stapled a valid OCSP response.')
sysServersslStatOcspServersslResponderQueries = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 10, 89), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServersslStatOcspServersslResponderQueries.setStatus('current')
if mibBuilder.loadTexts: sysServersslStatOcspServersslResponderQueries.setDescription('Total number of server connections that required communicating with OCSP responder.')
sysServersslStatOcspServersslResponseErrors = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 10, 90), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServersslStatOcspServersslResponseErrors.setStatus('current')
if mibBuilder.loadTexts: sysServersslStatOcspServersslResponseErrors.setDescription('Total number of server connections for which OCSP responder query failed for any reason.')
sysServersslStatOcspServersslCertStatusUnknown = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 10, 91), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServersslStatOcspServersslCertStatusUnknown.setStatus('current')
if mibBuilder.loadTexts: sysServersslStatOcspServersslCertStatusUnknown.setDescription('Total number of server connections for which certificate status was indicated as unknown.')
sysServersslStatOcspServersslCertStatusRevoked = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 10, 92), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServersslStatOcspServersslCertStatusRevoked.setStatus('current')
if mibBuilder.loadTexts: sysServersslStatOcspServersslCertStatusRevoked.setDescription('Total number of server connections for which certificate status was indicated as revoked.')
sysServersslStatC3dConns = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 10, 93), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServersslStatC3dConns.setStatus('current')
if mibBuilder.loadTexts: sysServersslStatC3dConns.setDescription('The total connections using SSL C3D feature.')
sysServersslStatChacha20Poly1305Bulk = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 10, 94), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServersslStatChacha20Poly1305Bulk.setStatus('current')
if mibBuilder.loadTexts: sysServersslStatChacha20Poly1305Bulk.setDescription('ChaCha20-Poly1305.')
sysServersslStatAesBulkOffload = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 10, 95), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServersslStatAesBulkOffload.setStatus('current')
if mibBuilder.loadTexts: sysServersslStatAesBulkOffload.setDescription('Advanced Encryption Standard (CBC) offload.')
sysServersslStatAesGcmBulkOffload = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 10, 96), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServersslStatAesGcmBulkOffload.setStatus('current')
if mibBuilder.loadTexts: sysServersslStatAesGcmBulkOffload.setDescription('Advanced Encryption Standard Galois Counter Mode (AES-GCM) offload.')
sysServersslStatChacha20Poly1305BulkOffld = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 10, 97), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServersslStatChacha20Poly1305BulkOffld.setStatus('current')
if mibBuilder.loadTexts: sysServersslStatChacha20Poly1305BulkOffld.setDescription('ChaCha20-Poly1305 offload.')
sysServersslStatDesBulkOffload = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 10, 98), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServersslStatDesBulkOffload.setStatus('current')
if mibBuilder.loadTexts: sysServersslStatDesBulkOffload.setDescription('Digital Encryption Standard (CBC) offload.')
sysServersslStatRc4BulkOffload = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 10, 99), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServersslStatRc4BulkOffload.setStatus('current')
if mibBuilder.loadTexts: sysServersslStatRc4BulkOffload.setDescription('Rivest Cipher 4 (CBC) offload.')
sysServersslStatCamelliaBulkOffload = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 10, 100), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServersslStatCamelliaBulkOffload.setStatus('current')
if mibBuilder.loadTexts: sysServersslStatCamelliaBulkOffload.setDescription('Camellia Cipher (CBC) offload.')
sysServersslStatMd5DigestOffload = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 10, 101), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServersslStatMd5DigestOffload.setStatus('current')
if mibBuilder.loadTexts: sysServersslStatMd5DigestOffload.setDescription('Message Digest 5 Offload.')
sysServersslStatShaDigestOffload = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 10, 102), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServersslStatShaDigestOffload.setStatus('current')
if mibBuilder.loadTexts: sysServersslStatShaDigestOffload.setDescription('Secure Hash Algorithm offload.')
sysServersslStatSha224Digest = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 10, 103), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServersslStatSha224Digest.setStatus('current')
if mibBuilder.loadTexts: sysServersslStatSha224Digest.setDescription('Secure Hash Algorithm 224.')
sysServersslStatSha224DigestOffload = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 10, 104), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServersslStatSha224DigestOffload.setStatus('current')
if mibBuilder.loadTexts: sysServersslStatSha224DigestOffload.setDescription('Secure Hash Algorithm 224 offload.')
sysServersslStatSha256Digest = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 10, 105), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServersslStatSha256Digest.setStatus('current')
if mibBuilder.loadTexts: sysServersslStatSha256Digest.setDescription('Secure Hash Algorithm 256.')
sysServersslStatSha256DigestOffload = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 10, 106), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServersslStatSha256DigestOffload.setStatus('current')
if mibBuilder.loadTexts: sysServersslStatSha256DigestOffload.setDescription('Secure Hash Algorithm 256 offload.')
sysServersslStatSha384Digest = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 10, 107), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServersslStatSha384Digest.setStatus('current')
if mibBuilder.loadTexts: sysServersslStatSha384Digest.setDescription('Secure Hash Algorithm 384.')
sysServersslStatSha384DigestOffload = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 10, 108), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServersslStatSha384DigestOffload.setStatus('current')
if mibBuilder.loadTexts: sysServersslStatSha384DigestOffload.setDescription('Secure Hash Algorithm 384 offload.')
sysServersslStatSha512Digest = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 10, 109), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServersslStatSha512Digest.setStatus('current')
if mibBuilder.loadTexts: sysServersslStatSha512Digest.setDescription('Secure Hash Algorithm 512.')
sysServersslStatSha512DigestOffload = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 10, 110), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServersslStatSha512DigestOffload.setStatus('current')
if mibBuilder.loadTexts: sysServersslStatSha512DigestOffload.setDescription('Secure Hash Algorithm 512 offload.')
sysServersslStatDhGroupP256 = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 10, 111), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServersslStatDhGroupP256.setStatus('current')
if mibBuilder.loadTexts: sysServersslStatDhGroupP256.setDescription('DH Group P256.')
sysServersslStatDhGroupP256Offload = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 10, 112), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServersslStatDhGroupP256Offload.setStatus('current')
if mibBuilder.loadTexts: sysServersslStatDhGroupP256Offload.setDescription('DH Group P256 offload.')
sysServersslStatDhGroupP384 = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 10, 113), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServersslStatDhGroupP384.setStatus('current')
if mibBuilder.loadTexts: sysServersslStatDhGroupP384.setDescription('DH Group P384.')
sysServersslStatDhGroupP384Offload = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 10, 114), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServersslStatDhGroupP384Offload.setStatus('current')
if mibBuilder.loadTexts: sysServersslStatDhGroupP384Offload.setDescription('DH Group P384 offload.')
sysServersslStatDhGroupX25519 = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 10, 115), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServersslStatDhGroupX25519.setStatus('current')
if mibBuilder.loadTexts: sysServersslStatDhGroupX25519.setDescription('DH Group X25519.')
sysServersslStatDhGroupX25519Offload = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 10, 116), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServersslStatDhGroupX25519Offload.setStatus('current')
if mibBuilder.loadTexts: sysServersslStatDhGroupX25519Offload.setDescription('DH Group X25519 offload.')
sysServersslStatRsaKeySize1024 = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 10, 117), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServersslStatRsaKeySize1024.setStatus('current')
if mibBuilder.loadTexts: sysServersslStatRsaKeySize1024.setDescription('RSA key size 1024.')
sysServersslStatRsaKeySize1024Offload = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 10, 118), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServersslStatRsaKeySize1024Offload.setStatus('current')
if mibBuilder.loadTexts: sysServersslStatRsaKeySize1024Offload.setDescription('RSA key size 1024 offload.')
sysServersslStatRsaKeySize2048 = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 10, 119), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServersslStatRsaKeySize2048.setStatus('current')
if mibBuilder.loadTexts: sysServersslStatRsaKeySize2048.setDescription('RSA key size 2048.')
sysServersslStatRsaKeySize2048Offload = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 10, 120), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServersslStatRsaKeySize2048Offload.setStatus('current')
if mibBuilder.loadTexts: sysServersslStatRsaKeySize2048Offload.setDescription('RSA key size 2048_offload.')
sysServersslStatRsaKeySize4096 = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 10, 121), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServersslStatRsaKeySize4096.setStatus('current')
if mibBuilder.loadTexts: sysServersslStatRsaKeySize4096.setDescription('RSA key size 4096.')
sysServersslStatRsaKeySize4096Offload = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 10, 122), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServersslStatRsaKeySize4096Offload.setStatus('current')
if mibBuilder.loadTexts: sysServersslStatRsaKeySize4096Offload.setDescription('RSA key size 4096 offload.')
sysServersslStatTotalHandshakesSoftware = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 10, 123), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServersslStatTotalHandshakesSoftware.setStatus('current')
if mibBuilder.loadTexts: sysServersslStatTotalHandshakesSoftware.setDescription('Handshake records processed in software.')
sysServersslStatTotalHandshakesOffload = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 10, 124), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServersslStatTotalHandshakesOffload.setStatus('current')
if mibBuilder.loadTexts: sysServersslStatTotalHandshakesOffload.setDescription('Handshake records offloaded.')
sysStreamStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 11, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysStreamStatResetStats.setStatus('current')
if mibBuilder.loadTexts: sysStreamStatResetStats.setDescription('The action to reset resettable statistics data in sysGlobalStreamStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
sysStreamStatReplaces = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 11, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStreamStatReplaces.setStatus('current')
if mibBuilder.loadTexts: sysStreamStatReplaces.setDescription('The number of replace operations completed on the system.')
sysTcpStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 12, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTcpStatResetStats.setStatus('current')
if mibBuilder.loadTexts: sysTcpStatResetStats.setDescription('The action to reset resettable statistics data in sysGlobalTcpStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
sysTcpStatOpen = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 12, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTcpStatOpen.setStatus('current')
if mibBuilder.loadTexts: sysTcpStatOpen.setDescription('The number of current open connections.')
sysTcpStatCloseWait = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 12, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTcpStatCloseWait.setStatus('current')
if mibBuilder.loadTexts: sysTcpStatCloseWait.setDescription('The number of current connections in CLOSE-WAIT/LAST-ACK.')
sysTcpStatFinWait = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 12, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTcpStatFinWait.setStatus('current')
if mibBuilder.loadTexts: sysTcpStatFinWait.setDescription('The number of current connections in FIN-WAIT-1/CLOSING.')
sysTcpStatTimeWait = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 12, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTcpStatTimeWait.setStatus('current')
if mibBuilder.loadTexts: sysTcpStatTimeWait.setDescription('The number of current connections in TIME-WAIT.')
sysTcpStatAccepts = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 12, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTcpStatAccepts.setStatus('current')
if mibBuilder.loadTexts: sysTcpStatAccepts.setDescription('The number of connections accepted.')
sysTcpStatAcceptfails = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 12, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTcpStatAcceptfails.setStatus('current')
if mibBuilder.loadTexts: sysTcpStatAcceptfails.setDescription('The number of connections not accepted.')
sysTcpStatConnects = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 12, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTcpStatConnects.setStatus('current')
if mibBuilder.loadTexts: sysTcpStatConnects.setDescription('The number of connections established.')
sysTcpStatConnfails = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 12, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTcpStatConnfails.setStatus('current')
if mibBuilder.loadTexts: sysTcpStatConnfails.setDescription('The number of connections failures.')
sysTcpStatExpires = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 12, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTcpStatExpires.setStatus('current')
if mibBuilder.loadTexts: sysTcpStatExpires.setDescription('The number of connections expired due to idle timeout.')
sysTcpStatAbandons = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 12, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTcpStatAbandons.setStatus('current')
if mibBuilder.loadTexts: sysTcpStatAbandons.setDescription('The number of connections abandoned connections due to \n\t\tretries/keep-alives.')
sysTcpStatRxrst = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 12, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTcpStatRxrst.setStatus('current')
if mibBuilder.loadTexts: sysTcpStatRxrst.setDescription('The number of received RST.')
sysTcpStatRxbadsum = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 12, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTcpStatRxbadsum.setStatus('current')
if mibBuilder.loadTexts: sysTcpStatRxbadsum.setDescription('The number of bad checksum.')
sysTcpStatRxbadseg = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 12, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTcpStatRxbadseg.setStatus('current')
if mibBuilder.loadTexts: sysTcpStatRxbadseg.setDescription('The number of malformed segments.')
sysTcpStatRxooseg = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 12, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTcpStatRxooseg.setStatus('current')
if mibBuilder.loadTexts: sysTcpStatRxooseg.setDescription('The number of out of order segments.')
sysTcpStatRxcookie = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 12, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTcpStatRxcookie.setStatus('current')
if mibBuilder.loadTexts: sysTcpStatRxcookie.setDescription('The number of received SYN-cookies.')
sysTcpStatRxbadcookie = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 12, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTcpStatRxbadcookie.setStatus('current')
if mibBuilder.loadTexts: sysTcpStatRxbadcookie.setDescription('The number of bad SYN-cookies.')
sysTcpStatSyncacheover = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 12, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTcpStatSyncacheover.setStatus('current')
if mibBuilder.loadTexts: sysTcpStatSyncacheover.setDescription('The number of SYN-cache overflow.')
sysTcpStatTxrexmits = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 12, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTcpStatTxrexmits.setStatus('current')
if mibBuilder.loadTexts: sysTcpStatTxrexmits.setDescription('The number of retransmitted segments.')
sysTcpStatFinWait2 = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 12, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTcpStatFinWait2.setStatus('current')
if mibBuilder.loadTexts: sysTcpStatFinWait2.setDescription('The number of current connections in FIN-WAIT-2.')
sysUdpStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 13, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysUdpStatResetStats.setStatus('current')
if mibBuilder.loadTexts: sysUdpStatResetStats.setDescription('The action to reset resettable statistics data in sysGlobalUdpStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
sysUdpStatOpen = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 13, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysUdpStatOpen.setStatus('current')
if mibBuilder.loadTexts: sysUdpStatOpen.setDescription('The number of current open connections.')
sysUdpStatAccepts = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 13, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysUdpStatAccepts.setStatus('current')
if mibBuilder.loadTexts: sysUdpStatAccepts.setDescription('The number of connections accepted.')
sysUdpStatAcceptfails = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 13, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysUdpStatAcceptfails.setStatus('current')
if mibBuilder.loadTexts: sysUdpStatAcceptfails.setDescription('The number of connections not accepted.')
sysUdpStatConnects = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 13, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysUdpStatConnects.setStatus('current')
if mibBuilder.loadTexts: sysUdpStatConnects.setDescription('The number of connections established.')
sysUdpStatConnfails = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 13, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysUdpStatConnfails.setStatus('current')
if mibBuilder.loadTexts: sysUdpStatConnfails.setDescription('The number of connections failures.')
sysUdpStatExpires = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 13, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysUdpStatExpires.setStatus('current')
if mibBuilder.loadTexts: sysUdpStatExpires.setDescription('The number of connections expired connections due to idle timeout.')
sysUdpStatRxdgram = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 13, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysUdpStatRxdgram.setStatus('current')
if mibBuilder.loadTexts: sysUdpStatRxdgram.setDescription('The number of received datagrams.')
sysUdpStatRxbaddgram = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 13, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysUdpStatRxbaddgram.setStatus('current')
if mibBuilder.loadTexts: sysUdpStatRxbaddgram.setDescription('The number of malformed datagrams.')
sysUdpStatRxunreach = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 13, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysUdpStatRxunreach.setStatus('current')
if mibBuilder.loadTexts: sysUdpStatRxunreach.setDescription('The number of received ICMP un-reached.')
sysUdpStatRxbadsum = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 13, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysUdpStatRxbadsum.setStatus('current')
if mibBuilder.loadTexts: sysUdpStatRxbadsum.setDescription('The number of bad checksum.')
sysUdpStatRxnosum = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 13, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysUdpStatRxnosum.setStatus('current')
if mibBuilder.loadTexts: sysUdpStatRxnosum.setDescription('The number of no checksum.')
sysUdpStatTxdgram = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 13, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysUdpStatTxdgram.setStatus('current')
if mibBuilder.loadTexts: sysUdpStatTxdgram.setDescription('The number of transmitted datagrams.')
sysAdminIpNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAdminIpNumber.setStatus('current')
if mibBuilder.loadTexts: sysAdminIpNumber.setDescription('The number of sysAdminIp entries in the table.')
sysAdminIpTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 1, 1, 2), )
if mibBuilder.loadTexts: sysAdminIpTable.setStatus('current')
if mibBuilder.loadTexts: sysAdminIpTable.setDescription("A table containing information of a device's administrative IP addresses on this machine.")
sysAdminIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 1, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-SYSTEM-MIB", "sysAdminIpAddrType"), (0, "F5-BIGIP-SYSTEM-MIB", "sysAdminIpAddr"))
if mibBuilder.loadTexts: sysAdminIpEntry.setStatus('current')
if mibBuilder.loadTexts: sysAdminIpEntry.setDescription('Columns in the sysAdminIp Table')
sysAdminIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 1, 1, 2, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAdminIpAddrType.setStatus('current')
if mibBuilder.loadTexts: sysAdminIpAddrType.setDescription('The IP address type of sysAdminIpAddr')
sysAdminIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 1, 1, 2, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAdminIpAddr.setStatus('current')
if mibBuilder.loadTexts: sysAdminIpAddr.setDescription('An administrative IP address on this machine. It is \n\t\t interpreted within the context of a sysAdminIpAddrType value.')
sysAdminIpNetmaskType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 1, 1, 2, 1, 3), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAdminIpNetmaskType.setStatus('current')
if mibBuilder.loadTexts: sysAdminIpNetmaskType.setDescription('The netmask type of sysAdminIpNetmask')
sysAdminIpNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 1, 1, 2, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAdminIpNetmask.setStatus('current')
if mibBuilder.loadTexts: sysAdminIpNetmask.setDescription('The netmask for the administrative IP address on this machine. It is \n\t\t interpreted within the context of a sysAdminIpNetmaskType value.')
sysAdminIpName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 1, 1, 2, 1, 5), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAdminIpName.setStatus('current')
if mibBuilder.loadTexts: sysAdminIpName.setDescription('The name of admin ip.')
sysArpStaticEntryNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysArpStaticEntryNumber.setStatus('current')
if mibBuilder.loadTexts: sysArpStaticEntryNumber.setDescription('The number of sysArpStaticEntry entries in the table.')
sysArpStaticEntryTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 2, 1, 2), )
if mibBuilder.loadTexts: sysArpStaticEntryTable.setStatus('current')
if mibBuilder.loadTexts: sysArpStaticEntryTable.setDescription('A table containing information of static ARP/NDP entries.')
sysArpStaticEntryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 2, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-SYSTEM-MIB", "sysArpStaticEntryName"))
if mibBuilder.loadTexts: sysArpStaticEntryEntry.setStatus('current')
if mibBuilder.loadTexts: sysArpStaticEntryEntry.setDescription('Columns in the sysArpStaticEntry Table')
sysArpStaticEntryIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 2, 1, 2, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysArpStaticEntryIpAddrType.setStatus('current')
if mibBuilder.loadTexts: sysArpStaticEntryIpAddrType.setDescription('The IP address type of sysArpStaticEntryIpAddr.')
sysArpStaticEntryIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 2, 1, 2, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysArpStaticEntryIpAddr.setStatus('current')
if mibBuilder.loadTexts: sysArpStaticEntryIpAddr.setDescription('An IP address entry of the ARP/NDP entry. It is interpreted within \n\t\tthe context of a sysArpStaticEntryIpAddrType.')
sysArpStaticEntryMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 2, 1, 2, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysArpStaticEntryMacAddr.setStatus('current')
if mibBuilder.loadTexts: sysArpStaticEntryMacAddr.setDescription('The MAC address which the specified IP address to be mapped to.')
sysArpStaticEntryName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 2, 1, 2, 1, 4), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysArpStaticEntryName.setStatus('current')
if mibBuilder.loadTexts: sysArpStaticEntryName.setDescription('The name binding')
sysDot1dbaseStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 3, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysDot1dbaseStatResetStats.setStatus('current')
if mibBuilder.loadTexts: sysDot1dbaseStatResetStats.setDescription('The action to reset resettable statistics data in sysDot1dbaseStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
sysDot1dbaseStatMacAddr = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 3, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDot1dbaseStatMacAddr.setStatus('current')
if mibBuilder.loadTexts: sysDot1dbaseStatMacAddr.setDescription('The MAC address used by this bridge when it must\n\t\tbe referred to in a unique fashion.   It is\n\t\trecommended that this be the numerically smallest\n\t\tMAC address of all ports that belong to this\n\t\tbridge.  However it is only required to be unique.\n\t\tWhen concatenated with dot1dStpPriority a unique\n\t\tbridge identifier is formed which is used in the\n\t\tspanning tree protocol.')
sysDot1dbaseStatNumPorts = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDot1dbaseStatNumPorts.setStatus('current')
if mibBuilder.loadTexts: sysDot1dbaseStatNumPorts.setDescription('The number of ports controlled by this bridging entity.')
sysDot1dbaseStatType = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("uninitialized", 0), ("unknown", 1), ("transparentonly", 2), ("sourcerouteonly", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDot1dbaseStatType.setStatus('current')
if mibBuilder.loadTexts: sysDot1dbaseStatType.setDescription('Indicates what type of bridging this bridge can\n\t\tperform.  If a bridge is actually performing a\n\t\tcertain type of bridging this will be indicated by\n\t\tentries in the port table for the given type.')
sysDot1dbaseStatPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 3, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDot1dbaseStatPortNumber.setStatus('current')
if mibBuilder.loadTexts: sysDot1dbaseStatPortNumber.setDescription('The number of sysDot1dbaseStatPort entries in the table.')
sysDot1dbaseStatPortTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 3, 2, 2), )
if mibBuilder.loadTexts: sysDot1dbaseStatPortTable.setStatus('current')
if mibBuilder.loadTexts: sysDot1dbaseStatPortTable.setDescription('A table that contains generic information about\n\t\tevery port that is associated with this bridge.\n\t\tTransparent, source-route, etc. ports are included.\n\t\tThis is a part of sysDot1dbaseStat and syssysDot1dbaseStatResetStat\n\t\twill reset data in this table.')
sysDot1dbaseStatPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 3, 2, 2, 1), ).setIndexNames((0, "F5-BIGIP-SYSTEM-MIB", "sysDot1dbaseStatPortIndex"))
if mibBuilder.loadTexts: sysDot1dbaseStatPortEntry.setStatus('current')
if mibBuilder.loadTexts: sysDot1dbaseStatPortEntry.setDescription('Columns in the sysDot1dbaseStatPort Table')
sysDot1dbaseStatPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 3, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDot1dbaseStatPortIndex.setStatus('current')
if mibBuilder.loadTexts: sysDot1dbaseStatPortIndex.setDescription('The index of the table that contains generic information \n\t\tabout every port that is associated with this bridge.')
sysDot1dbaseStatPortPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 3, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDot1dbaseStatPortPort.setStatus('current')
if mibBuilder.loadTexts: sysDot1dbaseStatPortPort.setDescription('The port number of the port for which this entry\n\t\tcontains bridge management information.')
sysDot1dbaseStatPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 3, 2, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDot1dbaseStatPortName.setStatus('current')
if mibBuilder.loadTexts: sysDot1dbaseStatPortName.setDescription('The name of the interface corresponding to the port.')
sysDot1dbaseStatPortDelayExceededDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 3, 2, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDot1dbaseStatPortDelayExceededDiscards.setStatus('current')
if mibBuilder.loadTexts: sysDot1dbaseStatPortDelayExceededDiscards.setDescription('The number of frames discarded by this port due\n\t\tto excessive transit delay through the bridge.  It\n\t\tis incremented by both transparent and source\n\t\troute bridges.')
sysDot1dbaseStatPortMtuExceededDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 3, 2, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDot1dbaseStatPortMtuExceededDiscards.setStatus('current')
if mibBuilder.loadTexts: sysDot1dbaseStatPortMtuExceededDiscards.setDescription('The number of frames discarded by this port due\n\t\tto an excessive size.  It is incremented by both\n\t\ttransparent and source route bridges.')
sysInterfaceNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysInterfaceNumber.setStatus('current')
if mibBuilder.loadTexts: sysInterfaceNumber.setDescription('The number of sysInterface entries in the table.')
sysInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 1, 2), )
if mibBuilder.loadTexts: sysInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: sysInterfaceTable.setDescription('A table containing information of the interfaces on the device.')
sysInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-SYSTEM-MIB", "sysInterfaceName"))
if mibBuilder.loadTexts: sysInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: sysInterfaceEntry.setDescription('Columns in the sysInterface Table')
sysInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysInterfaceName.setStatus('current')
if mibBuilder.loadTexts: sysInterfaceName.setDescription('The name of an interface.')
sysInterfaceMediaMaxSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 1, 2, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysInterfaceMediaMaxSpeed.setStatus('current')
if mibBuilder.loadTexts: sysInterfaceMediaMaxSpeed.setDescription('The best possible media speed in MBPS for the specified interface.')
sysInterfaceMediaMaxDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("half", 1), ("full", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysInterfaceMediaMaxDuplex.setStatus('current')
if mibBuilder.loadTexts: sysInterfaceMediaMaxDuplex.setDescription('The best possible media duplex mode for the specified interface.\n\t\t half    - Force half duplex;\n\t\t full    - Force full duplex;\n\t\t none    - All media is deselected.')
sysInterfaceMediaActiveSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 1, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysInterfaceMediaActiveSpeed.setStatus('current')
if mibBuilder.loadTexts: sysInterfaceMediaActiveSpeed.setDescription('The current active media speed for the specified interface.')
sysInterfaceMediaActiveDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("half", 1), ("full", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysInterfaceMediaActiveDuplex.setStatus('current')
if mibBuilder.loadTexts: sysInterfaceMediaActiveDuplex.setDescription('The active media duplex mode for the specified interface.\n\t\t half    - Force half duplex;\n\t\t full    - Force full duplex;\n\t\t none    - All media is deselected.')
sysInterfaceMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 1, 2, 1, 6), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysInterfaceMacAddr.setStatus('current')
if mibBuilder.loadTexts: sysInterfaceMacAddr.setDescription('The MAC address of the specified interface.')
sysInterfaceMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 1, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysInterfaceMtu.setStatus('current')
if mibBuilder.loadTexts: sysInterfaceMtu.setDescription('The maximum transmission unit size of datagram which can be \n\t\tsent/received on the specified interface.')
sysInterfaceEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysInterfaceEnabled.setStatus('current')
if mibBuilder.loadTexts: sysInterfaceEnabled.setDescription('The state of the specified interface, whether it is enabled.')
sysInterfaceLearnMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("learnforward", 0), ("nolearnforward", 1), ("nolearndrop", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysInterfaceLearnMode.setStatus('current')
if mibBuilder.loadTexts: sysInterfaceLearnMode.setDescription('The learn mode of the specified interface.')
sysInterfaceFlowCtrlReq = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("txrx", 1), ("tx", 2), ("rx", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysInterfaceFlowCtrlReq.setStatus('current')
if mibBuilder.loadTexts: sysInterfaceFlowCtrlReq.setDescription('The request pause state of the specified interface.\n\t\tnone - no pause;\n\t\ttxrx - pause all data flow;\n\t\ttx - pause out going data flow;\n\t\trx - pause in coming data flow.')
sysInterfaceStpLink = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("linkp2p", 0), ("linkshared", 1), ("linkauto", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysInterfaceStpLink.setStatus('current')
if mibBuilder.loadTexts: sysInterfaceStpLink.setDescription('The STP link types for the specified interface.')
sysInterfaceStpEdge = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysInterfaceStpEdge.setStatus('current')
if mibBuilder.loadTexts: sysInterfaceStpEdge.setDescription('The edge-port state for the specified interface is enabled.')
sysInterfaceStpEdgeActive = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysInterfaceStpEdgeActive.setStatus('current')
if mibBuilder.loadTexts: sysInterfaceStpEdgeActive.setDescription('The active edge-port state for the specified interface is enabled.')
sysInterfaceStpAuto = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 1, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysInterfaceStpAuto.setStatus('current')
if mibBuilder.loadTexts: sysInterfaceStpAuto.setDescription('The auto edge-port detection state for the specified interface is enabled.')
sysInterfaceStpEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 1, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysInterfaceStpEnable.setStatus('current')
if mibBuilder.loadTexts: sysInterfaceStpEnable.setDescription('The STP state for the specified interface is enabled.')
sysInterfaceStpReset = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 1, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysInterfaceStpReset.setStatus('current')
if mibBuilder.loadTexts: sysInterfaceStpReset.setDescription('The STP protocol detection reset state for the specified interface is enabled.')
sysInterfaceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 1, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3, 5))).clone(namedValues=NamedValues(("up", 0), ("down", 1), ("uninitialized", 3), ("unpopulated", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysInterfaceStatus.setStatus('current')
if mibBuilder.loadTexts: sysInterfaceStatus.setDescription('The current state of the specified interface.\n\t\t up            - has link and is initialized;  \n\t\t down          - has no link and is initialized;\n\t\t uninitialized - has not been initialized;\t\n\t\t unpopulated   - interface not physically populated.')
sysInterfaceComboPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 1, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysInterfaceComboPort.setStatus('current')
if mibBuilder.loadTexts: sysInterfaceComboPort.setDescription('The state which indicates whether or not the specified interface is a dual media \n\t\tport supporting both fixed copper and SFP.')
sysInterfacePreferSfp = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 1, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysInterfacePreferSfp.setStatus('current')
if mibBuilder.loadTexts: sysInterfacePreferSfp.setDescription('The state which indicates whether or not SFP is the preferred media. \n\t\tThis is only used only for dual media ports.')
sysInterfaceSfpMedia = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 1, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysInterfaceSfpMedia.setStatus('current')
if mibBuilder.loadTexts: sysInterfaceSfpMedia.setDescription('The state indicating whether or not the specified interface supports SFP media.')
sysInterfacePhyMaster = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 1, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("slave", 0), ("master", 1), ("auto", 2), ("none", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysInterfacePhyMaster.setStatus('current')
if mibBuilder.loadTexts: sysInterfacePhyMaster.setDescription('The configured SFP media type of the specified interface.')
sysIntfMediaNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIntfMediaNumber.setStatus('current')
if mibBuilder.loadTexts: sysIntfMediaNumber.setDescription('The number of sysInterfaceMediaOptions entries in the table.')
sysIntfMediaTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 2, 2), )
if mibBuilder.loadTexts: sysIntfMediaTable.setStatus('current')
if mibBuilder.loadTexts: sysIntfMediaTable.setDescription('A table containing information of the non-SFP media options of the interfaces.')
sysIntfMediaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 2, 2, 1), ).setIndexNames((0, "F5-BIGIP-SYSTEM-MIB", "sysIntfMediaName"), (0, "F5-BIGIP-SYSTEM-MIB", "sysIntfMediaIndex"))
if mibBuilder.loadTexts: sysIntfMediaEntry.setStatus('current')
if mibBuilder.loadTexts: sysIntfMediaEntry.setDescription('Columns in the sysIntfMedia Table')
sysIntfMediaName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 2, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIntfMediaName.setStatus('current')
if mibBuilder.loadTexts: sysIntfMediaName.setDescription('The name of an interface.')
sysIntfMediaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIntfMediaIndex.setStatus('current')
if mibBuilder.loadTexts: sysIntfMediaIndex.setDescription('The index of the non-SFP media option for the specified interface.')
sysIntfMediaMediaOption = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33))).clone(namedValues=NamedValues(("media10THdx", 1), ("media10TFdx", 2), ("media100TxHdx", 3), ("media100TxFdx", 4), ("media1000THdx", 5), ("media1000TFdx", 6), ("media1000FxHdx", 7), ("media1000FxFdx", 8), ("media10000TxHdx", 9), ("media10000TFdx", 10), ("media10000FxHdx", 11), ("media10000FxFdx", 12), ("mediaAuto", 13), ("mediaInternal", 14), ("media1000SxHdx", 15), ("media1000SxFdx", 16), ("media1000LxHdx", 17), ("media1000LxFdx", 18), ("media10000SrFdx", 19), ("media10000LrFdx", 20), ("media10000ErFdx", 21), ("media1000CxFdx", 22), ("media10000SfpPlusCuFdx", 23), ("media40000Sr4Fdx", 24), ("media40000Lr4Fdx", 25), ("media40000Cr4Fdx", 26), ("media40000Fdx", 27), ("media42000Fdx", 28), ("media100000Fdx", 29), ("media100000Sr4Fdx", 30), ("media100000Lr4Fdx", 31), ("media100000Cr4Fdx", 32), ("media100000Ar4dx", 33)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIntfMediaMediaOption.setStatus('current')
if mibBuilder.loadTexts: sysIntfMediaMediaOption.setDescription('The media option for non-SFP media of the specified interface.\n\t\tmedia10THdx - 10BaseT:RJ45, half duplex,\n\t\tmedia10TFdx - 10BaseT:RJ45, full duplex,\n\t\tmedia100TxHdx - 100BaseTX:RJ45, half duplex,\n\t\tmedia100TxFdx - 100BaseTX:RJ45, full duplex,\n\t\tmedia1000THdx - 1000BaseT - gigabit ethernet RJ45, half duplex,\n\t\tmedia1000TFdx - 1000BaseTX:gigabit ethernet RJ45, full duplex,\n\t\tmedia1000FxHdx - deprecated. 1000BaseTX:gigabit over fiber, half duplex,\n\t\tmedia1000FxFdx - deprecated. 1000BaseTX:gigabit over fiber, full duplex,\n\t\tmedia10000TxHdx - deprecated. 1000BaseTX:10gigabit RJ45, half duplex,\n\t\tmedia10000TFdx - 10000BaseT - 10gig Ethernet - Copper, full duplex,\n\t\tmedia10000FxHdx - deprecated. 1000BaseTX:10gigabit over fiber, half duplex,\n\t\tmedia10000FxFdx - deprecated. 1000BaseTX:10gigabit over fiber, full duplex,\n\t\tmediaAuto - autoselect best media,\n\t\tmediaInternal - this media option is only used internally,\n\t\tmedia1000SxHdx - deprecated. 1000BaseSX: gigabit over fiber - Shortwave, half duplex,\n\t\tmedia1000SxFdx - 1000BaseSX: gigabit over fiber - Shortwave, full duplex ,\n\t\tmedia1000LxHdx - deprecated.1000BaseLX - gigabit over fiber - Longwave, full duplex,\n\t\tmedia1000LxFdx - 1000BaseLX - gigabit over fiber - Longwave, half duplex,\n\t\tmedia10000SrFdx - 10GBase-SR - Shortwave 850nm multimode fiber - 300m max - serial 64B/66B encoding, full duplex,\n\t\tmedia10000LrFdx - 10GBase-LR - Longwave 1310nm single mode fiber - 10km max - serial 64B/66B encoding, full duplex,\n\t\tmedia10000ErFdx - 10GBase-ER - Extra longwave 1550nm single mode fiber - 40km max - serial 64B/66B encoding, full duplex,\n\t\tmedia1000CxFdx - 1000BaseCX: Copper, full duplex,\n\t\tmedia10000SfpPlusCuFdx - 10G SFP+: Copper, full duplex,\n\t\tmedia40000Sr4Fdx - 40GBase: fiber, Shortwave (850nm), full duplex,\n\t\tmedia40000Lr4Fdx - 40GBase: fiber, Longwave (1310nm), full duplex.,\n\t\tmedia40000Cr4Fdx - 40GBase: Copper, full duplex.,\n\t\tmedia40000Fdx - 40GBase: Full duplex.,\n\t\tmedia42000Fdx - 42GBase: Full duplex.,\n\t\tmedia100000Fdx - 100GBase: Full duplex.,\n\t\tmedia100000Sr4Fdx - 100GBase: fiber, Shortwave (850nm), full duplex,\n\t\tmedia100000Lr4Fdx - 100GBase: fiber, Longwave (1310nm), full duplex.,\n\t\tmedia100000Cr4Fdx - 100GBase: Copper, full duplex.,\n\t\tmedia100000Ar4Fdx - 100GBase: Active Optical Cable, full duplex.')
sysIfNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIfNumber.setStatus('current')
if mibBuilder.loadTexts: sysIfNumber.setDescription('The number of sysInterfaceId entries in the table.')
sysIfTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 3, 2), )
if mibBuilder.loadTexts: sysIfTable.setStatus('current')
if mibBuilder.loadTexts: sysIfTable.setDescription('A table that contains information of numerical IDs and names of a collection of \n\t\t\tinterfaces.')
sysIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 3, 2, 1), ).setIndexNames((0, "F5-BIGIP-SYSTEM-MIB", "sysIfIndex"))
if mibBuilder.loadTexts: sysIfEntry.setStatus('current')
if mibBuilder.loadTexts: sysIfEntry.setDescription('Columns in the sysIf Table')
sysIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIfIndex.setStatus('current')
if mibBuilder.loadTexts: sysIfIndex.setDescription('The unique value for an interface.')
sysIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 3, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIfName.setStatus('current')
if mibBuilder.loadTexts: sysIfName.setDescription('The name for an interface associated with the specified interface ID.')
sysInterfaceStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 4, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysInterfaceStatResetStats.setStatus('current')
if mibBuilder.loadTexts: sysInterfaceStatResetStats.setDescription('The action to reset resettable statistics data in sysInterfaceStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
sysInterfaceStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysInterfaceStatNumber.setStatus('current')
if mibBuilder.loadTexts: sysInterfaceStatNumber.setDescription('The number of sysInterfaceStat entries in the table.')
sysInterfaceStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 4, 3), )
if mibBuilder.loadTexts: sysInterfaceStatTable.setStatus('current')
if mibBuilder.loadTexts: sysInterfaceStatTable.setDescription('A table containing statistic information of the interfaces on the device.')
sysInterfaceStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 4, 3, 1), ).setIndexNames((0, "F5-BIGIP-SYSTEM-MIB", "sysInterfaceStatName"))
if mibBuilder.loadTexts: sysInterfaceStatEntry.setStatus('current')
if mibBuilder.loadTexts: sysInterfaceStatEntry.setDescription('Columns in the sysInterfaceStat Table')
sysInterfaceStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 4, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysInterfaceStatName.setStatus('current')
if mibBuilder.loadTexts: sysInterfaceStatName.setDescription('The name of an interface.')
sysInterfaceStatPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 4, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysInterfaceStatPktsIn.setStatus('current')
if mibBuilder.loadTexts: sysInterfaceStatPktsIn.setDescription('The number of packets received on this interface.')
sysInterfaceStatBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 4, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysInterfaceStatBytesIn.setStatus('current')
if mibBuilder.loadTexts: sysInterfaceStatBytesIn.setDescription('The number of bytes received on the specified interface.')
sysInterfaceStatPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 4, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysInterfaceStatPktsOut.setStatus('current')
if mibBuilder.loadTexts: sysInterfaceStatPktsOut.setDescription('The number of packets transmitted out of the specified interface.')
sysInterfaceStatBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 4, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysInterfaceStatBytesOut.setStatus('current')
if mibBuilder.loadTexts: sysInterfaceStatBytesOut.setDescription('The number of bytes transmitted out of the specified interface.')
sysInterfaceStatMcastIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 4, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysInterfaceStatMcastIn.setStatus('current')
if mibBuilder.loadTexts: sysInterfaceStatMcastIn.setDescription('The number of multicast packets received on the specified interface.')
sysInterfaceStatMcastOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 4, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysInterfaceStatMcastOut.setStatus('current')
if mibBuilder.loadTexts: sysInterfaceStatMcastOut.setDescription('The number of multicast packets transmitted out of the specified interface.')
sysInterfaceStatErrorsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 4, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysInterfaceStatErrorsIn.setStatus('current')
if mibBuilder.loadTexts: sysInterfaceStatErrorsIn.setDescription('The number of received packets that are either undersized, \n\t\toversized, or have FCS errors by the specified interface.')
sysInterfaceStatErrorsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 4, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysInterfaceStatErrorsOut.setStatus('current')
if mibBuilder.loadTexts: sysInterfaceStatErrorsOut.setDescription('The number of excessive collisions, incremented for each \n\t\tframe that experienced 16 collisions during transmission and \n\t\twas aborted on the specified interface.')
sysInterfaceStatDropsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 4, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysInterfaceStatDropsIn.setStatus('current')
if mibBuilder.loadTexts: sysInterfaceStatDropsIn.setDescription('The number of packets dropped on ingress for various reasons on the specified interface.')
sysInterfaceStatDropsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 4, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysInterfaceStatDropsOut.setStatus('current')
if mibBuilder.loadTexts: sysInterfaceStatDropsOut.setDescription('The number of packets aged out or with excessive transmission \n\t\tdelays due to multiple deferrals on the specified interface.')
sysInterfaceStatCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 4, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysInterfaceStatCollisions.setStatus('current')
if mibBuilder.loadTexts: sysInterfaceStatCollisions.setDescription('The number of collisions on the specified interface, incremented by the \n\t\tnumber of collisions experienced during transmissions of a frame')
sysInterfaceStatQqIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 4, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysInterfaceStatQqIn.setStatus('current')
if mibBuilder.loadTexts: sysInterfaceStatQqIn.setDescription('The number of double tagged packets received on the specified interface.')
sysInterfaceStatQqOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 4, 3, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysInterfaceStatQqOut.setStatus('current')
if mibBuilder.loadTexts: sysInterfaceStatQqOut.setDescription('The number of double tagged packets transmitted out of the specified interface.')
sysInterfaceStatPauseActive = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 4, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("txrx", 1), ("tx", 2), ("rx", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysInterfaceStatPauseActive.setStatus('current')
if mibBuilder.loadTexts: sysInterfaceStatPauseActive.setDescription('The pause state of the specified interface.\n\t\tnone - no pause;\n\t\ttxrx - pause all data flow;\n\t\ttx - pause out going data flow;\n\t\trx - pause in coming data flow.')
sysIfxStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 5, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysIfxStatResetStats.setStatus('current')
if mibBuilder.loadTexts: sysIfxStatResetStats.setDescription('The action to reset resettable statistics data in sysIfxStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
sysIfxStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIfxStatNumber.setStatus('current')
if mibBuilder.loadTexts: sysIfxStatNumber.setDescription('The number of sysIfxStat entries in the table.')
sysIfxStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 5, 3), )
if mibBuilder.loadTexts: sysIfxStatTable.setStatus('current')
if mibBuilder.loadTexts: sysIfxStatTable.setDescription('A table that contains additional statistic information of collection of \n\t\tinterfaces.')
sysIfxStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 5, 3, 1), ).setIndexNames((0, "F5-BIGIP-SYSTEM-MIB", "sysIfxStatName"))
if mibBuilder.loadTexts: sysIfxStatEntry.setStatus('current')
if mibBuilder.loadTexts: sysIfxStatEntry.setDescription('Columns in the sysIfxStat Table')
sysIfxStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 5, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIfxStatName.setStatus('current')
if mibBuilder.loadTexts: sysIfxStatName.setDescription('The name of the interface.')
sysIfxStatInMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 5, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIfxStatInMulticastPkts.setStatus('current')
if mibBuilder.loadTexts: sysIfxStatInMulticastPkts.setDescription('The number of packets, delivered by this sub-layer to a\n\t\thigher (sub-)layer, which were addressed to a multicast\n\t\taddress at this sub-layer.  For a MAC layer protocol, this\n\t\tincludes both Group and Functional addresses.')
sysIfxStatInBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 5, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIfxStatInBroadcastPkts.setStatus('current')
if mibBuilder.loadTexts: sysIfxStatInBroadcastPkts.setDescription('The number of packets, delivered by this sub-layer to a\n\t\thigher (sub-)layer, which were addressed to a broadcast\n\t\taddress at this sub-layer.')
sysIfxStatOutMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 5, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIfxStatOutMulticastPkts.setStatus('current')
if mibBuilder.loadTexts: sysIfxStatOutMulticastPkts.setDescription('The total number of packets that higher-level protocols\n\t\trequested be transmitted, and which were addressed to a\n\t\tmulticast address at this sub-layer, including those that\n\t\twere discarded or not sent.  For a MAC layer protocol, this\n\t\tincludes both Group and Functional addresses.')
sysIfxStatOutBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 5, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIfxStatOutBroadcastPkts.setStatus('current')
if mibBuilder.loadTexts: sysIfxStatOutBroadcastPkts.setDescription('The total number of packets that higher-level protocols\n\t\trequested be transmitted, and which were addressed to a\n\t\tbroadcast address at this sub-layer, including those that\n\t\twere discarded or not sent.')
sysIfxStatHcInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 5, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIfxStatHcInOctets.setStatus('current')
if mibBuilder.loadTexts: sysIfxStatHcInOctets.setDescription('The total number of octets received on the interface,\n\t\tincluding framing characters.')
sysIfxStatHcInUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 5, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIfxStatHcInUcastPkts.setStatus('current')
if mibBuilder.loadTexts: sysIfxStatHcInUcastPkts.setDescription('The number of packets, delivered by this sub-layer to a\n\t\thigher (sub-)layer, which were not addressed to a multicast\n\t\tor broadcast address at this sub-layer.')
sysIfxStatHcInMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 5, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIfxStatHcInMulticastPkts.setStatus('current')
if mibBuilder.loadTexts: sysIfxStatHcInMulticastPkts.setDescription('The number of packets, delivered by this sub-layer to a\n\t\thigher (sub-)layer, which were addressed to a multicast\n\t\taddress at this sub-layer.  For a MAC layer protocol, this\n\t\tincludes both Group and Functional addresses.')
sysIfxStatHcInBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 5, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIfxStatHcInBroadcastPkts.setStatus('current')
if mibBuilder.loadTexts: sysIfxStatHcInBroadcastPkts.setDescription('The number of packets, delivered by this sub-layer to a\n\t\thigher (sub-)layer, which were addressed to a broadcast\n\t\taddress at this sub-layer.')
sysIfxStatHcOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 5, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIfxStatHcOutOctets.setStatus('current')
if mibBuilder.loadTexts: sysIfxStatHcOutOctets.setDescription('The total number of octets transmitted out of the\n\t\tinterface, including framing characters.')
sysIfxStatHcOutUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 5, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIfxStatHcOutUcastPkts.setStatus('current')
if mibBuilder.loadTexts: sysIfxStatHcOutUcastPkts.setDescription('The total number of packets that higher-level protocols\n\t\trequested be transmitted, and which were not addressed to a\n\t\tmulticast or broadcast address at this sub-layer, including\n\t\tthose that were discarded or not sent.')
sysIfxStatHcOutMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 5, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIfxStatHcOutMulticastPkts.setStatus('current')
if mibBuilder.loadTexts: sysIfxStatHcOutMulticastPkts.setDescription('The total number of packets that higher-level protocols\n\t\trequested be transmitted, and which were addressed to a\n\t\tmulticast address at this sub-layer, including those that\n\t\twere discarded or not sent.  For a MAC layer protocol, this\n\t\tincludes both Group and Functional addresses.')
sysIfxStatHcOutBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 5, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIfxStatHcOutBroadcastPkts.setStatus('current')
if mibBuilder.loadTexts: sysIfxStatHcOutBroadcastPkts.setDescription('The total number of packets that higher-level protocols\n\t\trequested be transmitted, and which were addressed to a\n\t\tbroadcast address at this sub-layer, including those that\n\t\twere discarded or not sent.')
sysIfxStatHighSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 5, 3, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIfxStatHighSpeed.setStatus('current')
if mibBuilder.loadTexts: sysIfxStatHighSpeed.setDescription("An estimate of the interface's current bandwidth in units\n\t\tof 1,000,000 bits per second.  If this object reports a\n\t\tvalue of `n' then the speed of the interface is somewhere in\n\t\tthe range of `n-500,000' to `n+499,999'.  For interfaces\n\t\twhich do not vary in bandwidth or for those where no\n\t\taccurate estimation can be made, this object should contain\n\t\tthe nominal bandwidth.  For a sub-layer which has no concept\n\t\tof bandwidth, this object should be zero.")
sysIfxStatConnectorPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 5, 3, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIfxStatConnectorPresent.setStatus('current')
if mibBuilder.loadTexts: sysIfxStatConnectorPresent.setDescription("This object has the value 'true(1)' if the interface\n\t\tsublayer has a physical connector and the value 'false(2)'\n\t\totherwise.")
sysIfxStatCounterDiscontinuityTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 5, 3, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIfxStatCounterDiscontinuityTime.setStatus('current')
if mibBuilder.loadTexts: sysIfxStatCounterDiscontinuityTime.setDescription('This object always contains a zero value.')
sysIfxStatAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 5, 3, 1, 17), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIfxStatAlias.setStatus('current')
if mibBuilder.loadTexts: sysIfxStatAlias.setDescription("This object is an 'alias' name for the interface as\n\t\tspecified by a network manager, and provides a non-volatile\n\t\t'handle' for the interface.")
sysL2ForwardNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysL2ForwardNumber.setStatus('current')
if mibBuilder.loadTexts: sysL2ForwardNumber.setDescription('The number of sysL2Forward entries in the table.')
sysL2ForwardTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 5, 1, 2), )
if mibBuilder.loadTexts: sysL2ForwardTable.setStatus('current')
if mibBuilder.loadTexts: sysL2ForwardTable.setDescription('A table containing static L2 forwarding entries information.')
sysL2ForwardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 5, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-SYSTEM-MIB", "sysL2ForwardVlanName"), (0, "F5-BIGIP-SYSTEM-MIB", "sysL2ForwardMacAddr"))
if mibBuilder.loadTexts: sysL2ForwardEntry.setStatus('current')
if mibBuilder.loadTexts: sysL2ForwardEntry.setDescription('Columns in the sysL2Forward Table')
sysL2ForwardVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 5, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysL2ForwardVlanName.setStatus('current')
if mibBuilder.loadTexts: sysL2ForwardVlanName.setDescription('The VLAN name which static forward entity is from.')
sysL2ForwardMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 5, 1, 2, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysL2ForwardMacAddr.setStatus('current')
if mibBuilder.loadTexts: sysL2ForwardMacAddr.setDescription('The MAC address for the specified VLAN.')
sysL2ForwardIfname = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 5, 1, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysL2ForwardIfname.setStatus('current')
if mibBuilder.loadTexts: sysL2ForwardIfname.setDescription('The name of interface for the specified VLAN.')
sysL2ForwardIftype = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 5, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("interface", 0), ("trunk", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysL2ForwardIftype.setStatus('current')
if mibBuilder.loadTexts: sysL2ForwardIftype.setDescription('The type of interface for the specified VLAN.')
sysL2ForwardDynamic = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 5, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysL2ForwardDynamic.setStatus('current')
if mibBuilder.loadTexts: sysL2ForwardDynamic.setDescription('The dynamic state of the specified entity.')
sysPacketFilterNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPacketFilterNumber.setStatus('current')
if mibBuilder.loadTexts: sysPacketFilterNumber.setDescription('The number of sysPacketFilter entries in the table.')
sysPacketFilterTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 6, 1, 2), )
if mibBuilder.loadTexts: sysPacketFilterTable.setStatus('current')
if mibBuilder.loadTexts: sysPacketFilterTable.setDescription('A table containing information of packet filters.')
sysPacketFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 6, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-SYSTEM-MIB", "sysPacketFilterRname"))
if mibBuilder.loadTexts: sysPacketFilterEntry.setStatus('current')
if mibBuilder.loadTexts: sysPacketFilterEntry.setDescription('Columns in the sysPacketFilter Table')
sysPacketFilterRname = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 6, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPacketFilterRname.setStatus('current')
if mibBuilder.loadTexts: sysPacketFilterRname.setDescription('The name of the rule is used only for identification by the \n\t\t user and for logging.')
sysPacketFilterOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 6, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPacketFilterOrder.setStatus('current')
if mibBuilder.loadTexts: sysPacketFilterOrder.setDescription("The rule sort-order. The sort-order part of the rule is an \n\t\t integer value used to assign a relative weight to the rule. \n\t\t The sort-order may be any number between 0 and 999, but no two \n\t\t rules may have the same value. The specific value of the \n\t\t sort-order is not important, only its position relative to the \n\t\t other rules' sort-orders.  Rule evaluation order is determined \n\t\t by starting with the lowest numbered rule and moving up through \n\t\t to the highest.")
sysPacketFilterAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 6, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("accept", 1), ("discard", 2), ("reject", 3), ("continue", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPacketFilterAction.setStatus('current')
if mibBuilder.loadTexts: sysPacketFilterAction.setDescription('The action the filter takes. The action part of the rule can \n\t\t be any one of the values accept, discard, reject or none.  \n\t\t The reject behaves as discard, but also returns an ICMP packet \n\t\t to the sender indicating that the traffic matching the rule was \n\t\t explicitly rejected. The ICMP will be of type 3 (destination \n\t\t unreachable), code 13 (administratively prohibited), and \n\t\t contain most or all of the L3 and L4 headers of the packet \n\t\t being rejected.  The none is special in that it indicates no \n\t\t action. It can be used for pure accounting or logging purposes \n\t\t without making a decision on how to handle the traffic.')
sysPacketFilterVname = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 6, 1, 2, 1, 4), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPacketFilterVname.setStatus('current')
if mibBuilder.loadTexts: sysPacketFilterVname.setDescription('The VLAN name currently in existence. The VLAN part of the  \n\t\t rule determines which ingress VLAN to match on. If present,  \n\t\t this must be a specific VLAN name currently in existence. If \n\t\t omitted, the rule matches all VLANs.')
sysPacketFilterLog = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 6, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPacketFilterLog.setStatus('current')
if mibBuilder.loadTexts: sysPacketFilterLog.setDescription('The log option, whether or not logging will be performed. \n\t\t If a rule has an associated logging action, an entry will be \n\t\t created in the system log each time the rule is matched. The \n\t\t log entry will contain details of the traffic that matched \n\t\t the rule, such as source and destination addresses and ports. \n\t\t If a rule does not have an associated logging action, no log \n\t\t entry is created.')
sysPacketFilterRclass = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 6, 1, 2, 1, 6), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPacketFilterRclass.setStatus('current')
if mibBuilder.loadTexts: sysPacketFilterRclass.setDescription('The rate class name specified by the user.')
sysPacketFilterExpression = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 6, 1, 2, 1, 7), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPacketFilterExpression.setStatus('current')
if mibBuilder.loadTexts: sysPacketFilterExpression.setDescription('The BPF(Berkeley Packet Filter) filter expression. The filter\n\t\t part of the rule is the expression used to match ingress \n\t\t traffic.')
sysPacketFilterAddrNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 6, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPacketFilterAddrNumber.setStatus('current')
if mibBuilder.loadTexts: sysPacketFilterAddrNumber.setDescription('The number of sysPacketFilterAddress entries in the table.')
sysPacketFilterAddrTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 6, 2, 2), )
if mibBuilder.loadTexts: sysPacketFilterAddrTable.setStatus('current')
if mibBuilder.loadTexts: sysPacketFilterAddrTable.setDescription('A table containing information of rate filter allow/trusted addresses.')
sysPacketFilterAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 6, 2, 2, 1), ).setIndexNames((0, "F5-BIGIP-SYSTEM-MIB", "sysPacketFilterAddrRname"), (0, "F5-BIGIP-SYSTEM-MIB", "sysPacketFilterAddrIndex"))
if mibBuilder.loadTexts: sysPacketFilterAddrEntry.setStatus('current')
if mibBuilder.loadTexts: sysPacketFilterAddrEntry.setDescription('Columns in the sysPacketFilterAddr Table')
sysPacketFilterAddrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 6, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPacketFilterAddrIndex.setStatus('current')
if mibBuilder.loadTexts: sysPacketFilterAddrIndex.setDescription('Name is now used for indexing.')
sysPacketFilterAddrIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 6, 2, 2, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPacketFilterAddrIpType.setStatus('current')
if mibBuilder.loadTexts: sysPacketFilterAddrIpType.setDescription('The IP address type of sysPacketFilterAllowTrustedAddress')
sysPacketFilterAddrIp = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 6, 2, 2, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPacketFilterAddrIp.setStatus('current')
if mibBuilder.loadTexts: sysPacketFilterAddrIp.setDescription('The allow trusted IP address in the packet filter.  \n\t\tIt is interpreted within the context of an  sysPacketFilterAllowTrustedAddressType value.')
sysPacketFilterAddrRname = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 6, 2, 2, 1, 4), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPacketFilterAddrRname.setStatus('current')
if mibBuilder.loadTexts: sysPacketFilterAddrRname.setDescription('The name of the rule for use in folders.')
sysPacketFilterVlanNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 6, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPacketFilterVlanNumber.setStatus('current')
if mibBuilder.loadTexts: sysPacketFilterVlanNumber.setDescription('The number of sysPacketFilterVlan entries in the table.')
sysPacketFilterVlanTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 6, 3, 2), )
if mibBuilder.loadTexts: sysPacketFilterVlanTable.setStatus('current')
if mibBuilder.loadTexts: sysPacketFilterVlanTable.setDescription('A table containing information of rate filter allow/trusted VLANs.')
sysPacketFilterVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 6, 3, 2, 1), ).setIndexNames((0, "F5-BIGIP-SYSTEM-MIB", "sysPacketFilterVlanRname"), (0, "F5-BIGIP-SYSTEM-MIB", "sysPacketFilterVlanIndex"))
if mibBuilder.loadTexts: sysPacketFilterVlanEntry.setStatus('current')
if mibBuilder.loadTexts: sysPacketFilterVlanEntry.setDescription('Columns in the sysPacketFilterVlan Table')
sysPacketFilterVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 6, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPacketFilterVlanIndex.setStatus('current')
if mibBuilder.loadTexts: sysPacketFilterVlanIndex.setDescription('Name is now used for indexing.')
sysPacketFilterVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 6, 3, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPacketFilterVlanName.setStatus('current')
if mibBuilder.loadTexts: sysPacketFilterVlanName.setDescription('The name of the allow trusted VLAN in the packet filter.')
sysPacketFilterVlanRname = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 6, 3, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPacketFilterVlanRname.setStatus('current')
if mibBuilder.loadTexts: sysPacketFilterVlanRname.setDescription('The name of the rule for use in folders.')
sysPacketFilterMacNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 6, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPacketFilterMacNumber.setStatus('current')
if mibBuilder.loadTexts: sysPacketFilterMacNumber.setDescription('The number of sysPacketFilterMac entries in the table.')
sysPacketFilterMacTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 6, 4, 2), )
if mibBuilder.loadTexts: sysPacketFilterMacTable.setStatus('current')
if mibBuilder.loadTexts: sysPacketFilterMacTable.setDescription('A table containing information of rate filter allow/trusted MAC addresses.')
sysPacketFilterMacEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 6, 4, 2, 1), ).setIndexNames((0, "F5-BIGIP-SYSTEM-MIB", "sysPacketFilterMacRname"), (0, "F5-BIGIP-SYSTEM-MIB", "sysPacketFilterMacIndex"))
if mibBuilder.loadTexts: sysPacketFilterMacEntry.setStatus('current')
if mibBuilder.loadTexts: sysPacketFilterMacEntry.setDescription('Columns in the sysPacketFilterMac Table')
sysPacketFilterMacIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 6, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPacketFilterMacIndex.setStatus('current')
if mibBuilder.loadTexts: sysPacketFilterMacIndex.setDescription('Name is now used for indexing.')
sysPacketFilterMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 6, 4, 2, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPacketFilterMacAddr.setStatus('current')
if mibBuilder.loadTexts: sysPacketFilterMacAddr.setDescription('The allow trusted MAC address in the packet filter.')
sysPacketFilterMacRname = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 6, 4, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPacketFilterMacRname.setStatus('current')
if mibBuilder.loadTexts: sysPacketFilterMacRname.setDescription('The name of the rule for use in folders.')
sysPacketFilterStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 6, 5, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysPacketFilterStatResetStats.setStatus('current')
if mibBuilder.loadTexts: sysPacketFilterStatResetStats.setDescription('The action to reset resettable statistics data in sysPacketFilterStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
sysPacketFilterStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 6, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPacketFilterStatNumber.setStatus('current')
if mibBuilder.loadTexts: sysPacketFilterStatNumber.setDescription('The number of sysPacketFilterStat entries in the table.')
sysPacketFilterStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 6, 5, 3), )
if mibBuilder.loadTexts: sysPacketFilterStatTable.setStatus('current')
if mibBuilder.loadTexts: sysPacketFilterStatTable.setDescription('A table containing statistic information of packet filters.')
sysPacketFilterStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 6, 5, 3, 1), ).setIndexNames((0, "F5-BIGIP-SYSTEM-MIB", "sysPacketFilterStatRname"))
if mibBuilder.loadTexts: sysPacketFilterStatEntry.setStatus('current')
if mibBuilder.loadTexts: sysPacketFilterStatEntry.setDescription('Columns in the sysPacketFilterStat Table')
sysPacketFilterStatRname = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 6, 5, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPacketFilterStatRname.setStatus('current')
if mibBuilder.loadTexts: sysPacketFilterStatRname.setDescription('The name of the rule is used only for identification by the \n\t\t user and for logging.')
sysPacketFilterStatHits = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 6, 5, 3, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPacketFilterStatHits.setStatus('current')
if mibBuilder.loadTexts: sysPacketFilterStatHits.setDescription('The number of matches on filter rule. Each time a rule is \n\t\t matched by a packet, a use count for that rule is \n\t\t incremented. This is unrelated to the optional logging action \n\t\t which might be enabled for the rule. The use count for a new \n\t\t rule starts at zero and increments for each matching packet.')
sysRouteMgmtEntryNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysRouteMgmtEntryNumber.setStatus('current')
if mibBuilder.loadTexts: sysRouteMgmtEntryNumber.setDescription('The number of sysRouteMgmtEntry entries in the table.')
sysRouteMgmtEntryTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 7, 1, 2), )
if mibBuilder.loadTexts: sysRouteMgmtEntryTable.setStatus('current')
if mibBuilder.loadTexts: sysRouteMgmtEntryTable.setDescription('A table containing administrative route information.')
sysRouteMgmtEntryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 7, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-SYSTEM-MIB", "sysRouteMgmtEntryName"))
if mibBuilder.loadTexts: sysRouteMgmtEntryEntry.setStatus('current')
if mibBuilder.loadTexts: sysRouteMgmtEntryEntry.setDescription('Columns in the sysRouteMgmtEntry Table')
sysRouteMgmtEntryDestType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 7, 1, 2, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysRouteMgmtEntryDestType.setStatus('current')
if mibBuilder.loadTexts: sysRouteMgmtEntryDestType.setDescription('The IP address type of sysRouteMgmtEntryDest.')
sysRouteMgmtEntryDest = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 7, 1, 2, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysRouteMgmtEntryDest.setStatus('current')
if mibBuilder.loadTexts: sysRouteMgmtEntryDest.setDescription('The destination IP address in the route table. It is interpreted \n\t\twithin the context of a sysRouteMgmtEntryDestType value.')
sysRouteMgmtEntryNetmaskType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 7, 1, 2, 1, 3), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysRouteMgmtEntryNetmaskType.setStatus('current')
if mibBuilder.loadTexts: sysRouteMgmtEntryNetmaskType.setDescription('The IP address type of sysRouteMgmtEntryNetmask.')
sysRouteMgmtEntryNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 7, 1, 2, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysRouteMgmtEntryNetmask.setStatus('current')
if mibBuilder.loadTexts: sysRouteMgmtEntryNetmask.setDescription('The netmask of the specified destination IP address in the route table.  \n\t\t\tIt is interpreted within the context of \n\t\ta sysRouteMgmtEntryNetmaskType value.')
sysRouteMgmtEntryType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 7, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("gateway", 0), ("pool", 1), ("interface", 2), ("blackhole", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysRouteMgmtEntryType.setStatus('current')
if mibBuilder.loadTexts: sysRouteMgmtEntryType.setDescription('The type of the specified route.')
sysRouteMgmtEntryGatewayType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 7, 1, 2, 1, 6), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysRouteMgmtEntryGatewayType.setStatus('current')
if mibBuilder.loadTexts: sysRouteMgmtEntryGatewayType.setDescription('The IP address type of sysRouteMgmtEntryGateway.')
sysRouteMgmtEntryGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 7, 1, 2, 1, 7), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysRouteMgmtEntryGateway.setStatus('current')
if mibBuilder.loadTexts: sysRouteMgmtEntryGateway.setDescription('The gateway to the specified destination IP address in the route table. \n\t\tIt is interpreted within the context of an \n\t\tsysRouteMgmtEntryGatewayType value.')
sysRouteMgmtEntryMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 7, 1, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysRouteMgmtEntryMtu.setStatus('current')
if mibBuilder.loadTexts: sysRouteMgmtEntryMtu.setDescription('The maximum transmission unit size of datagram which can be \n\t\tsent to the specified destination.')
sysRouteMgmtEntryName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 7, 1, 2, 1, 9), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysRouteMgmtEntryName.setStatus('current')
if mibBuilder.loadTexts: sysRouteMgmtEntryName.setDescription('The name of destination.')
sysRouteStaticEntryNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 7, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysRouteStaticEntryNumber.setStatus('current')
if mibBuilder.loadTexts: sysRouteStaticEntryNumber.setDescription('The number of sysRouteStaticEntry entries in the table.')
sysRouteStaticEntryTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 7, 2, 2), )
if mibBuilder.loadTexts: sysRouteStaticEntryTable.setStatus('current')
if mibBuilder.loadTexts: sysRouteStaticEntryTable.setDescription('A table containing static route information.')
sysRouteStaticEntryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 7, 2, 2, 1), ).setIndexNames((0, "F5-BIGIP-SYSTEM-MIB", "sysRouteStaticEntryName"))
if mibBuilder.loadTexts: sysRouteStaticEntryEntry.setStatus('current')
if mibBuilder.loadTexts: sysRouteStaticEntryEntry.setDescription('Columns in the sysRouteStaticEntry Table')
sysRouteStaticEntryDestType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 7, 2, 2, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysRouteStaticEntryDestType.setStatus('current')
if mibBuilder.loadTexts: sysRouteStaticEntryDestType.setDescription('The IP address type of sysRouteStaticEntryDest.')
sysRouteStaticEntryDest = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 7, 2, 2, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysRouteStaticEntryDest.setStatus('current')
if mibBuilder.loadTexts: sysRouteStaticEntryDest.setDescription('The destination IP address in the route table. It is interpreted \n\t\twithin the context of a sysRouteStaticEntryDestType value.')
sysRouteStaticEntryNetmaskType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 7, 2, 2, 1, 3), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysRouteStaticEntryNetmaskType.setStatus('current')
if mibBuilder.loadTexts: sysRouteStaticEntryNetmaskType.setDescription('The IP address type of sysRouteStaticEntryNetmask.')
sysRouteStaticEntryNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 7, 2, 2, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysRouteStaticEntryNetmask.setStatus('current')
if mibBuilder.loadTexts: sysRouteStaticEntryNetmask.setDescription('The netmask of the specified destination IP address in the route table.  \n\t\t\tIt is interpreted within the context of \n\t\ta sysRouteStaticEntryNetmaskType value.')
sysRouteStaticEntryType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 7, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("gateway", 0), ("pool", 1), ("interface", 2), ("blackhole", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysRouteStaticEntryType.setStatus('current')
if mibBuilder.loadTexts: sysRouteStaticEntryType.setDescription('The type of the specified route.')
sysRouteStaticEntryVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 7, 2, 2, 1, 6), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysRouteStaticEntryVlanName.setStatus('current')
if mibBuilder.loadTexts: sysRouteStaticEntryVlanName.setDescription('The name of the VLAN which the specified destination associates with.')
sysRouteStaticEntryGatewayType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 7, 2, 2, 1, 7), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysRouteStaticEntryGatewayType.setStatus('current')
if mibBuilder.loadTexts: sysRouteStaticEntryGatewayType.setDescription('The IP address type of sysRouteStaticEntryGateway.')
sysRouteStaticEntryGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 7, 2, 2, 1, 8), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysRouteStaticEntryGateway.setStatus('current')
if mibBuilder.loadTexts: sysRouteStaticEntryGateway.setDescription('The gateway to the specified destination IP address in the route table. \n\t\tIt is interpreted within the context of an \n\t\tsysRouteStaticEntryGatewayType value.')
sysRouteStaticEntryPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 7, 2, 2, 1, 9), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysRouteStaticEntryPoolName.setStatus('current')
if mibBuilder.loadTexts: sysRouteStaticEntryPoolName.setDescription('The name of the pool which the specified destination associates with.')
sysRouteStaticEntryMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 7, 2, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysRouteStaticEntryMtu.setStatus('current')
if mibBuilder.loadTexts: sysRouteStaticEntryMtu.setDescription('The maximum transmission unit size of datagram which can be \n\t\tsent to the specified destination.')
sysRouteStaticEntryName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 7, 2, 2, 1, 11), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysRouteStaticEntryName.setStatus('current')
if mibBuilder.loadTexts: sysRouteStaticEntryName.setDescription('The name of destination.')
sysSelfIpNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSelfIpNumber.setStatus('current')
if mibBuilder.loadTexts: sysSelfIpNumber.setDescription('The number of sysSelfIp entries in the table.')
sysSelfIpTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 8, 1, 2), )
if mibBuilder.loadTexts: sysSelfIpTable.setStatus('current')
if mibBuilder.loadTexts: sysSelfIpTable.setDescription('A table containing information of self IPs.')
sysSelfIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 8, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-SYSTEM-MIB", "sysSelfIpName"))
if mibBuilder.loadTexts: sysSelfIpEntry.setStatus('current')
if mibBuilder.loadTexts: sysSelfIpEntry.setDescription('Columns in the sysSelfIp Table')
sysSelfIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 8, 1, 2, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSelfIpAddrType.setStatus('current')
if mibBuilder.loadTexts: sysSelfIpAddrType.setDescription('The IP address type of sysSelfIpAddr.')
sysSelfIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 8, 1, 2, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSelfIpAddr.setStatus('current')
if mibBuilder.loadTexts: sysSelfIpAddr.setDescription('The IP address of a self IP. It is \n\t\t interpreted within the context of a sysSelfIpAddrType value.')
sysSelfIpNetmaskType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 8, 1, 2, 1, 3), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSelfIpNetmaskType.setStatus('current')
if mibBuilder.loadTexts: sysSelfIpNetmaskType.setDescription('The IP address type of sysSelfIpNetmask.')
sysSelfIpNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 8, 1, 2, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSelfIpNetmask.setStatus('current')
if mibBuilder.loadTexts: sysSelfIpNetmask.setDescription('The netmask of the specified self IP. It is interpreted within \n\t\t the context of a sysSelfIpNetmaskType value.')
sysSelfIpUnitId = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 8, 1, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSelfIpUnitId.setStatus('current')
if mibBuilder.loadTexts: sysSelfIpUnitId.setDescription('The unit number associated with the specified self IP address.')
sysSelfIpIsFloating = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 8, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSelfIpIsFloating.setStatus('current')
if mibBuilder.loadTexts: sysSelfIpIsFloating.setDescription('The state of the specified self IP address, whether it is shared.')
sysSelfIpVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 8, 1, 2, 1, 7), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSelfIpVlanName.setStatus('current')
if mibBuilder.loadTexts: sysSelfIpVlanName.setDescription('The VLAN associated with the specified self IP address.')
sysSelfIpName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 8, 1, 2, 1, 8), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSelfIpName.setStatus('current')
if mibBuilder.loadTexts: sysSelfIpName.setDescription('The name of self IP.')
sysSelfPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSelfPortNumber.setStatus('current')
if mibBuilder.loadTexts: sysSelfPortNumber.setDescription('The number of sysSelfPort entries in the table.')
sysSelfPortTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 9, 1, 2), )
if mibBuilder.loadTexts: sysSelfPortTable.setStatus('current')
if mibBuilder.loadTexts: sysSelfPortTable.setDescription('A table containing information of self IP access list.')
sysSelfPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 9, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-SYSTEM-MIB", "sysSelfPortSelfName"), (0, "F5-BIGIP-SYSTEM-MIB", "sysSelfPortProtocol"), (0, "F5-BIGIP-SYSTEM-MIB", "sysSelfPortPort"))
if mibBuilder.loadTexts: sysSelfPortEntry.setStatus('current')
if mibBuilder.loadTexts: sysSelfPortEntry.setDescription('Columns in the sysSelfPort Table')
sysSelfPortAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 9, 1, 2, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSelfPortAddrType.setStatus('deprecated')
if mibBuilder.loadTexts: sysSelfPortAddrType.setDescription('Deprecated!  Use self_name as index\n\t\tThe IP address type of sysSelfPortAddr.')
sysSelfPortAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 9, 1, 2, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSelfPortAddr.setStatus('deprecated')
if mibBuilder.loadTexts: sysSelfPortAddr.setDescription('Deprecated!  Use self_name as index\n\t\tThe self IP address. \n\t\tIt is interpreted within the context of \n\t\ta sysSelfPortAddrType value.')
sysSelfPortProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 9, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSelfPortProtocol.setStatus('current')
if mibBuilder.loadTexts: sysSelfPortProtocol.setDescription("The protocol allowed to access for the specified self IP.\n\t\t'0' means allowing all protocols;\n\t\t'256' means allowing the default list, which is listed in sysSelfPortDefault.")
sysSelfPortPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 9, 1, 2, 1, 4), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSelfPortPort.setStatus('current')
if mibBuilder.loadTexts: sysSelfPortPort.setDescription("The service allowed to access for the specified self IP.\n\t\t'0' means allowing all services for the specified protocol(s).")
sysSelfPortSelfName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 9, 1, 2, 1, 5), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSelfPortSelfName.setStatus('current')
if mibBuilder.loadTexts: sysSelfPortSelfName.setDescription('The name of self port.')
sysStpNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStpNumber.setStatus('current')
if mibBuilder.loadTexts: sysStpNumber.setDescription('The number of sysStp entries in the table.')
sysStpTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 10, 1, 2), )
if mibBuilder.loadTexts: sysStpTable.setStatus('current')
if mibBuilder.loadTexts: sysStpTable.setDescription('A table containing information of STP instances of the BIGIP spanning tree.')
sysStpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 10, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-SYSTEM-MIB", "sysStpName"))
if mibBuilder.loadTexts: sysStpEntry.setStatus('current')
if mibBuilder.loadTexts: sysStpEntry.setDescription('Columns in the sysStp Table')
sysStpInstanceId = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 10, 1, 2, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStpInstanceId.setStatus('current')
if mibBuilder.loadTexts: sysStpInstanceId.setDescription(' The spanning tree instance ID, 0-4095.')
sysStpPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 10, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStpPriority.setStatus('current')
if mibBuilder.loadTexts: sysStpPriority.setDescription('The bridge priority of the specified spanning tree instance.\n\t\tEach bridge in a spanning tree instance has a priority value, \n\t\twhich controls the topology of the spanning tree chosen by the protocol.\n\t\tThe bridge with the lowest priority value will become the root \n\t\tof the spanning tree. Priority values range from 0-61440 in steps \n\t\tof 4096. Hence, the supported priorities are:\n\t\t\t\t   0       16384       32768       49152\n\t\t\t\t4096       20480       36864       53248\n\t\t\t\t8192       24576       40960       57344\n\t\t\t   12288       28672       45056       61440\n\t\tThe default bridge priority is 61440, which will prevent BIGIP \n\t\tfrom being chosen as the root bridge.  If the specified bridge \n\t\tpriority is not one of the allowed values listed above, it is\n\t\trounded down to the next lower value in the list.\n\t\tIn STP or RSTP mode, only STP instance 0 is valid.')
sysStpRootAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 10, 1, 2, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStpRootAddr.setStatus('current')
if mibBuilder.loadTexts: sysStpRootAddr.setDescription('The MAC address of the root bridge.')
sysStpRegionalRootAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 10, 1, 2, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStpRegionalRootAddr.setStatus('current')
if mibBuilder.loadTexts: sysStpRegionalRootAddr.setDescription('The MAC address of the regional root bridge.')
sysStpName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 10, 1, 2, 1, 5), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStpName.setStatus('current')
if mibBuilder.loadTexts: sysStpName.setDescription('STP name')
sysStpGlobalsMode = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 10, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 0), ("stp", 1), ("rstp", 2), ("mstp", 3), ("passthru", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStpGlobalsMode.setStatus('deprecated')
if mibBuilder.loadTexts: sysStpGlobalsMode.setDescription('Deprecated!.\n\t\tThe STP mode.')
sysStpGlobalsFwdDelay = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 10, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStpGlobalsFwdDelay.setStatus('deprecated')
if mibBuilder.loadTexts: sysStpGlobalsFwdDelay.setDescription('Deprecated!.\n\t\tThe forward delay parameter, which controls how long an \n\t\tinterface was blocked from forwarding network traffic after \n\t\ta reconfiguration of the spanning tree topology. The default \n\t\tvalue is 15 seconds, and the valid range is 4-30 seconds.  \n\t\tNote that this parameter has no effect when the STP mode \n\t\tis RSPT or MSTP, as long as all bridges in the spanning tree \n\t\tuse the RSTP or MSTP protocol.')
sysStpGlobalsHelloTime = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 10, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStpGlobalsHelloTime.setStatus('deprecated')
if mibBuilder.loadTexts: sysStpGlobalsHelloTime.setDescription('Deprecated!.\n\t\tThe hello time, which is the time interval in seconds \n\t\tbetween the periodic transmissions that communicate spanning \n\t\ttree information to the adjacent bridges in the network. \n\t\tThe default value is 2 seconds, and the valid range is 1-10 seconds.')
sysStpGlobalsMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 10, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStpGlobalsMaxAge.setStatus('deprecated')
if mibBuilder.loadTexts: sysStpGlobalsMaxAge.setDescription('Deprecated!.\n\t\tThe maximum age parameter, which controls how long spanning tree \n\t\tinformation received from other bridges is considered valid.  \n\t\tThe default value is 20 seconds, and the valid range is 6-40 seconds.')
sysStpGlobalsTransmitHold = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 10, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStpGlobalsTransmitHold.setStatus('deprecated')
if mibBuilder.loadTexts: sysStpGlobalsTransmitHold.setDescription('Deprecated!.\n\t\tThe transmit hold count parameter, which is an absolute limit on \n\t\tthe number of spanning tree protocol packets the BIG-IP may transmit \n\t\ton a port in any hello time interval.  This ensures that the spanning \n\t\ttree packets will not unduly load the network even in unstable \n\t\tconditions. The default value is 6 packets, and the valid range \n\t\tis 1-10 packets.')
sysStpGlobalsMaxHops = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 10, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStpGlobalsMaxHops.setStatus('deprecated')
if mibBuilder.loadTexts: sysStpGlobalsMaxHops.setDescription("Deprecated!.\n\t\tThe maximum hops an MSTP packet may travel before it is discarded.  \n\t\tIt's used only when the STP mode is MSTP.")
sysStpGlobalsIdentifier = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 10, 2, 7), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStpGlobalsIdentifier.setStatus('deprecated')
if mibBuilder.loadTexts: sysStpGlobalsIdentifier.setDescription('Deprecated!.\n\t\tThe configuration identifier name in a spanning tree region, \n\t\tused to identify a group of adjacent bridges with identical \n\t\tconfiguration name, configuration revision levels, and assignments \n\t\tof VLANs to spanning tree instances.  This setting is used only \n\t\twhen the STP mode is MSTP.')
sysStpGlobalsRevision = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 10, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStpGlobalsRevision.setStatus('deprecated')
if mibBuilder.loadTexts: sysStpGlobalsRevision.setDescription("Deprecated!.\n\t\t The configuration revision level of the MSTP configuration.  \n\t\tIt's used only when the STP mode is MSTP.")
sysStpInterfaceMbrNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 10, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStpInterfaceMbrNumber.setStatus('current')
if mibBuilder.loadTexts: sysStpInterfaceMbrNumber.setDescription('The number of sysStpInterfaceMbr entries in the table.')
sysStpInterfaceMbrTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 10, 3, 2), )
if mibBuilder.loadTexts: sysStpInterfaceMbrTable.setStatus('current')
if mibBuilder.loadTexts: sysStpInterfaceMbrTable.setDescription('A table containing information of STP instances and their interfaces.')
sysStpInterfaceMbrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 10, 3, 2, 1), ).setIndexNames((0, "F5-BIGIP-SYSTEM-MIB", "sysStpInterfaceMbrInstanceName"), (0, "F5-BIGIP-SYSTEM-MIB", "sysStpInterfaceMbrName"))
if mibBuilder.loadTexts: sysStpInterfaceMbrEntry.setStatus('current')
if mibBuilder.loadTexts: sysStpInterfaceMbrEntry.setDescription('Columns in the sysStpInterfaceMbr Table')
sysStpInterfaceMbrInstanceId = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 10, 3, 2, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStpInterfaceMbrInstanceId.setStatus('deprecated')
if mibBuilder.loadTexts: sysStpInterfaceMbrInstanceId.setDescription("Deprecated! \n\t\tA parent STP instance's ID.")
sysStpInterfaceMbrName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 10, 3, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStpInterfaceMbrName.setStatus('current')
if mibBuilder.loadTexts: sysStpInterfaceMbrName.setDescription('The name of STP port object of the specified STP instance.')
sysStpInterfaceMbrType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 10, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("interface", 0), ("trunk", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStpInterfaceMbrType.setStatus('current')
if mibBuilder.loadTexts: sysStpInterfaceMbrType.setDescription('The type of the STP port object of the associated STP instance.')
sysStpInterfaceMbrStateActive = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 10, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("detach", 0), ("block", 1), ("listen", 2), ("learn", 3), ("forward", 4), ("disable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStpInterfaceMbrStateActive.setStatus('current')
if mibBuilder.loadTexts: sysStpInterfaceMbrStateActive.setDescription('The active state of the specified STP port object \n\t\tin the associated STP instance.')
sysStpInterfaceMbrRole = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 10, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disable", 0), ("root", 1), ("designate", 2), ("alternate", 3), ("backup", 4), ("master", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStpInterfaceMbrRole.setStatus('current')
if mibBuilder.loadTexts: sysStpInterfaceMbrRole.setDescription('The role of the specified STP port object in the associated STP instance.')
sysStpInterfaceMbrPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 10, 3, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStpInterfaceMbrPriority.setStatus('current')
if mibBuilder.loadTexts: sysStpInterfaceMbrPriority.setDescription('The priority of the specified STP port object in the associated STP instance.\n\t\t\t This priority value influences which STP port is chosen to carry \n\t\tnetwork traffic. Interfaces with numerically lower values are favored \n\t\tto carry traffic. Interface priorities have values in the range\n\t\tfrom 0-240 in steps of 166. Hence, the supported priorities are:\n\t\t\t\t   0        64       128       192\n\t\t\t\t  16        80       144       208\n\t\t\t\t  32        96       160       224\n\t\t\t\t  48       112       176       240\n\t\tThe default interface priority is 128.  If the specified interface \n\t\tpriority is not one of the allowed values listed above, \n\t\tit is rounded down to the next lower value in the list.\n\t\tIn STP or RSTP mode, only STP instance 0 is valid.')
sysStpInterfaceMbrPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 10, 3, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStpInterfaceMbrPathCost.setStatus('current')
if mibBuilder.loadTexts: sysStpInterfaceMbrPathCost.setDescription("The path cost for the specified STP port object in the associated STP instance.\n\t\tAn interface path cost represents the relative cost of sending network\n\t\ttraffic through that interface. In calculating the spanning tree, \n\t\tthe algorithm tries to minimize the total path cost between each point\n\t\t\tand the root bridge. By manipulating the path costs of different \n\t\tinterfaces, it's possible to steer traffic toward paths that are faster,\n\t\tmore reliable, and/or more economical. Path costs have a range of\n\t\t1-200,000,000, and the default path cost for an interface is based on \n\t\tthe interface's maximum speed (not the actual speed).\n\t\t\t\t  Max interface speed         Default path cost\n\t\t\t\t\t  10 Gb/s                 2,000\n\t\t\t\t\t   1 Gb/s                 20,000\n\t\t\t\t\t 100 Mb/s                 200,000\n\t\t\t\t\t  10 MB/s                 2,000,000\n\t\tThe default path cost is a function of the interface's maximum speed, \n\t\tnot its actual speed, so the default path cost of a 10/100/1000 Mb/s \n\t\tinterface will be 20,000 even if the interface is running at 10 Mb/s.\n\t\tChanges in link speed don't cause path costs to change.\n\t\tLink aggregation doesn't affect the default path cost, \n\t\ti.e. a trunk of four 1 Gb/s interfaces will still have a default path \n\t\tcost of 20,000.\n\t\tIn STP or RSTP mode, only STP instance 0 is valid.")
sysStpInterfaceMbrStateRequested = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 10, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("detach", 0), ("block", 1), ("listen", 2), ("learn", 3), ("forward", 4), ("disable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStpInterfaceMbrStateRequested.setStatus('current')
if mibBuilder.loadTexts: sysStpInterfaceMbrStateRequested.setDescription('The requested state of the specified STP port object \n\t\tin the associated STP instance.')
sysStpInterfaceMbrInstanceName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 10, 3, 2, 1, 9), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStpInterfaceMbrInstanceName.setStatus('current')
if mibBuilder.loadTexts: sysStpInterfaceMbrInstanceName.setDescription('Parent stp instance name')
sysStpVlanMbrNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 10, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStpVlanMbrNumber.setStatus('current')
if mibBuilder.loadTexts: sysStpVlanMbrNumber.setDescription('The number of sysStpVlanMbr entries in the table.')
sysStpVlanMbrTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 10, 4, 2), )
if mibBuilder.loadTexts: sysStpVlanMbrTable.setStatus('current')
if mibBuilder.loadTexts: sysStpVlanMbrTable.setDescription('A table containing information of STP instances and their VLAN members.')
sysStpVlanMbrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 10, 4, 2, 1), ).setIndexNames((0, "F5-BIGIP-SYSTEM-MIB", "sysStpVlanMbrStpName"), (0, "F5-BIGIP-SYSTEM-MIB", "sysStpVlanMbrVlanVname"))
if mibBuilder.loadTexts: sysStpVlanMbrEntry.setStatus('current')
if mibBuilder.loadTexts: sysStpVlanMbrEntry.setDescription('Columns in the sysStpVlanMbr Table')
sysStpVlanMbrInstanceId = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 10, 4, 2, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStpVlanMbrInstanceId.setStatus('deprecated')
if mibBuilder.loadTexts: sysStpVlanMbrInstanceId.setDescription("Deprecated! \n\t\tA parent STP instance's ID.")
sysStpVlanMbrVlanVname = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 10, 4, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStpVlanMbrVlanVname.setStatus('current')
if mibBuilder.loadTexts: sysStpVlanMbrVlanVname.setDescription('The name of a VLAN of the specified STP instance.\n\t\tThis method may be used only in MSTP mode. In STP or RSTP mode, \n\t\tall VLANs automatically belong to spanning tree instance 0.')
sysStpVlanMbrStpName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 10, 4, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStpVlanMbrStpName.setStatus('current')
if mibBuilder.loadTexts: sysStpVlanMbrStpName.setDescription('Parent STP name')
sysStpBridgeStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 10, 5, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysStpBridgeStatResetStats.setStatus('current')
if mibBuilder.loadTexts: sysStpBridgeStatResetStats.setDescription('The action to reset resettable statistics data in sysStpBridgeStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
sysStpBridgeStatMode = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 10, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 0), ("stp", 1), ("rstp", 2), ("mstp", 3), ("passthru", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStpBridgeStatMode.setStatus('current')
if mibBuilder.loadTexts: sysStpBridgeStatMode.setDescription('The mode of STP bridge.')
sysStpBridgeStatFwdDelay = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 10, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStpBridgeStatFwdDelay.setStatus('current')
if mibBuilder.loadTexts: sysStpBridgeStatFwdDelay.setDescription('The forward delay in 256ths of a second.  \n\t\tIt controls how fast a port changes its spanning state \n\t\twhen moving toward the Forwarding state. The value determines \n\t\thow long the port stays in each of the Listening and Learning\n\t\tstates, which precede the Forwarding state. This value is also used, \n\t\twhen a topology change has been detected and is underway, to age \n\t\tall dynamic entries in the Forwarding Database. \n\t\t[Note that this value is the one that this bridge is currently using, \n\t\tin contrast to sysSnmpStpBridgeStatBridgeFwdDelay which is the value \n\t\tthat this bridge and all others would start using if/when this bridge \n\t\twere to become the root.')
sysStpBridgeStatHelloTime = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 10, 5, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStpBridgeStatHelloTime.setStatus('current')
if mibBuilder.loadTexts: sysStpBridgeStatHelloTime.setDescription('The hello time in 256ths of a second. It is the time interval \n\t\tbetween the periodic transmissions that communicate spanning tree \n\t\tinformation to the adjacent bridges in the network. This is \n\t\tthe actual value that this bridge is currently using.')
sysStpBridgeStatMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 10, 5, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStpBridgeStatMaxAge.setStatus('current')
if mibBuilder.loadTexts: sysStpBridgeStatMaxAge.setDescription('The maximum age in 256ths of a second. It controls how long \n\t\tspanning tree information received from other bridges is \n\t\tconsidered valid. This is the actual value that this bridge \n\t\tis currently using.')
sysStpBridgeStatBridgeFwdDelay = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 10, 5, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStpBridgeStatBridgeFwdDelay.setStatus('current')
if mibBuilder.loadTexts: sysStpBridgeStatBridgeFwdDelay.setDescription('The bridge forward time (256ths). The value that all bridges use \n\t\tfor ForwardDelay when this bridge is acting as the root.')
sysStpBridgeStatBridgeHelloTime = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 10, 5, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStpBridgeStatBridgeHelloTime.setStatus('current')
if mibBuilder.loadTexts: sysStpBridgeStatBridgeHelloTime.setDescription('The bridge hello time (256ths). The value that all bridges use \n\t\tfor HelloTime when this bridge is acting as the root.')
sysStpBridgeStatBridgeMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 10, 5, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStpBridgeStatBridgeMaxAge.setStatus('current')
if mibBuilder.loadTexts: sysStpBridgeStatBridgeMaxAge.setDescription('The bridge maximum age (256ths). The value that all bridges use \n\t\tfor MaxAge when this bridge is acting as the root.')
sysStpBridgeStatTransmitHold = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 10, 5, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStpBridgeStatTransmitHold.setStatus('current')
if mibBuilder.loadTexts: sysStpBridgeStatTransmitHold.setDescription('The transmit hold count in BPDUs (Bridge Protocol Data Units)  \n\t\tper hello time.')
sysStpBridgeStatPathCost = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 10, 5, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStpBridgeStatPathCost.setStatus('current')
if mibBuilder.loadTexts: sysStpBridgeStatPathCost.setDescription('CIST root bridge (external) path cost.\n\t\tCIST is Common and Internal Spanning Tree created by MSTP to represent \n\t\tthe connectivity of the entire network. This is equivalent to \n\t\tthe single spanning tree used for STP and RSTP. \n\t\tCommunications between MST regions occurs using the CIST')
sysStpBridgeStatRootPrio = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 10, 5, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStpBridgeStatRootPrio.setStatus('current')
if mibBuilder.loadTexts: sysStpBridgeStatRootPrio.setDescription('CIST root bridge priority. \n\t\tCIST is Common and Internal Spanning Tree created by MSTP to represent\n\t\t\tthe connectivity of the entire network. This is equivalent to\n\t\t\tthe single spanning tree used for STP and RSTP.\n\t\t\tCommunications between MST regions occurs using the CIST')
sysStpBridgeStatRootAddr = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 10, 5, 12), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStpBridgeStatRootAddr.setStatus('current')
if mibBuilder.loadTexts: sysStpBridgeStatRootAddr.setDescription('CIST root bridge MAC address.\n\t\tCIST is Common and Internal Spanning Tree created by MSTP to represent\n\t\t\tthe connectivity of the entire network. This is equivalent to\n\t\t\tthe single spanning tree used for STP and RSTP.\n\t\t\tCommunications between MST regions occurs using the CIST')
sysStpBridgeTreeStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 10, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStpBridgeTreeStatNumber.setStatus('current')
if mibBuilder.loadTexts: sysStpBridgeTreeStatNumber.setDescription('The number of sysStpBridgeTreeStat entries in the table.')
sysStpBridgeTreeStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 10, 6, 2), )
if mibBuilder.loadTexts: sysStpBridgeTreeStatTable.setStatus('current')
if mibBuilder.loadTexts: sysStpBridgeTreeStatTable.setDescription('A table that contains port objects information of the BIGIP spanning tree.\n\t\tThis is a part of sysStpBridgeStat and sysStpBrigeStatResetStat\n\t\twill reset data in this table.')
sysStpBridgeTreeStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 10, 6, 2, 1), ).setIndexNames((0, "F5-BIGIP-SYSTEM-MIB", "sysStpBridgeTreeStatIndex"))
if mibBuilder.loadTexts: sysStpBridgeTreeStatEntry.setStatus('current')
if mibBuilder.loadTexts: sysStpBridgeTreeStatEntry.setDescription('Columns in the sysStpBridgeTreeStat Table')
sysStpBridgeTreeStatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 10, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStpBridgeTreeStatIndex.setStatus('current')
if mibBuilder.loadTexts: sysStpBridgeTreeStatIndex.setDescription('The index of the table that contains generic information \n\t\tabout spanning bridge tree.')
sysStpBridgeTreeStatInstanceId = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 10, 6, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStpBridgeTreeStatInstanceId.setStatus('current')
if mibBuilder.loadTexts: sysStpBridgeTreeStatInstanceId.setDescription('The spanning tree instance ID.')
sysStpBridgeTreeStatPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 10, 6, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStpBridgeTreeStatPriority.setStatus('current')
if mibBuilder.loadTexts: sysStpBridgeTreeStatPriority.setDescription('The bridge priority in the spanning tree.')
sysStpBridgeTreeStatLastTc = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 10, 6, 2, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStpBridgeTreeStatLastTc.setStatus('current')
if mibBuilder.loadTexts: sysStpBridgeTreeStatLastTc.setDescription('The time of last topology change.')
sysStpBridgeTreeStatTcCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 10, 6, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStpBridgeTreeStatTcCount.setStatus('current')
if mibBuilder.loadTexts: sysStpBridgeTreeStatTcCount.setDescription('The count of topology changes.')
sysStpBridgeTreeStatDesigRootPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 10, 6, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStpBridgeTreeStatDesigRootPrio.setStatus('current')
if mibBuilder.loadTexts: sysStpBridgeTreeStatDesigRootPrio.setDescription('The regional root bridge priority (MSTP).')
sysStpBridgeTreeStatDesigRootAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 10, 6, 2, 1, 7), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStpBridgeTreeStatDesigRootAddr.setStatus('current')
if mibBuilder.loadTexts: sysStpBridgeTreeStatDesigRootAddr.setDescription('The regional root bridge address (MSTP).')
sysStpBridgeTreeStatInternalPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 10, 6, 2, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStpBridgeTreeStatInternalPathCost.setStatus('current')
if mibBuilder.loadTexts: sysStpBridgeTreeStatInternalPathCost.setDescription('The root internal path cost (MSTP).')
sysStpBridgeTreeStatRootPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 10, 6, 2, 1, 9), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStpBridgeTreeStatRootPort.setStatus('current')
if mibBuilder.loadTexts: sysStpBridgeTreeStatRootPort.setDescription('The root port interface name')
sysStpBridgeTreeStatRootPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 10, 6, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStpBridgeTreeStatRootPortNum.setStatus('current')
if mibBuilder.loadTexts: sysStpBridgeTreeStatRootPortNum.setDescription('The root port number.')
sysStpBridgeTreeStatInstanceName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 10, 6, 2, 1, 11), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStpBridgeTreeStatInstanceName.setStatus('current')
if mibBuilder.loadTexts: sysStpBridgeTreeStatInstanceName.setDescription('The spanning tree instance name.')
sysStpInterfaceStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 10, 7, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysStpInterfaceStatResetStats.setStatus('current')
if mibBuilder.loadTexts: sysStpInterfaceStatResetStats.setDescription('The action to reset resettable statistics data in sysStpInterfaceStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
sysStpInterfaceStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 10, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStpInterfaceStatNumber.setStatus('current')
if mibBuilder.loadTexts: sysStpInterfaceStatNumber.setDescription('The number of sysStpInterfaceStat entries in the table.')
sysStpInterfaceStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 10, 7, 3), )
if mibBuilder.loadTexts: sysStpInterfaceStatTable.setStatus('current')
if mibBuilder.loadTexts: sysStpInterfaceStatTable.setDescription('The spanning tree information apply to the  particular network \n\t\tinterfaces or trunks.')
sysStpInterfaceStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 10, 7, 3, 1), ).setIndexNames((0, "F5-BIGIP-SYSTEM-MIB", "sysStpInterfaceStatName"))
if mibBuilder.loadTexts: sysStpInterfaceStatEntry.setStatus('current')
if mibBuilder.loadTexts: sysStpInterfaceStatEntry.setDescription('Columns in the sysStpInterfaceStat Table')
sysStpInterfaceStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 10, 7, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStpInterfaceStatName.setStatus('current')
if mibBuilder.loadTexts: sysStpInterfaceStatName.setDescription('The name of an interface.')
sysStpInterfaceStatPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 10, 7, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStpInterfaceStatPortNum.setStatus('current')
if mibBuilder.loadTexts: sysStpInterfaceStatPortNum.setDescription('The STP port number.')
sysStpInterfaceStatStpEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 10, 7, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStpInterfaceStatStpEnable.setStatus('current')
if mibBuilder.loadTexts: sysStpInterfaceStatStpEnable.setDescription('The state indicating whether STP is enable or not on port.')
sysStpInterfaceStatPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 10, 7, 3, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStpInterfaceStatPathCost.setStatus('current')
if mibBuilder.loadTexts: sysStpInterfaceStatPathCost.setDescription('The external path cost of the specified port in the associated STP tree instance.')
sysStpInterfaceStatRootCost = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 10, 7, 3, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStpInterfaceStatRootCost.setStatus('current')
if mibBuilder.loadTexts: sysStpInterfaceStatRootCost.setDescription('CIST (Common and Internal Spanning Tree in MSTP) root path cost.')
sysStpInterfaceStatRootPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 10, 7, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStpInterfaceStatRootPrio.setStatus('current')
if mibBuilder.loadTexts: sysStpInterfaceStatRootPrio.setDescription('CIST (Common and Internal Spanning Tree in MSTP) root bridge priority.')
sysStpInterfaceStatRootAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 10, 7, 3, 1, 7), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStpInterfaceStatRootAddr.setStatus('current')
if mibBuilder.loadTexts: sysStpInterfaceStatRootAddr.setDescription('CIST (Common and Internal Spanning Tree in MSTP) root bridge MAC address.')
sysStpInterfaceTreeStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 10, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStpInterfaceTreeStatNumber.setStatus('current')
if mibBuilder.loadTexts: sysStpInterfaceTreeStatNumber.setDescription('The number of sysStpInterfaceTreeStat entries in the table.')
sysStpInterfaceTreeStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 10, 8, 2), )
if mibBuilder.loadTexts: sysStpInterfaceTreeStatTable.setStatus('current')
if mibBuilder.loadTexts: sysStpInterfaceTreeStatTable.setDescription('A table that contains port objects information of the  spanning interface tree.\n\t\tThis is a part of sysStpInterfaceStat and sysStpInterfaceStatResetStat\n\t\twill reset data in this table.')
sysStpInterfaceTreeStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 10, 8, 2, 1), ).setIndexNames((0, "F5-BIGIP-SYSTEM-MIB", "sysStpInterfaceTreeStatName"), (0, "F5-BIGIP-SYSTEM-MIB", "sysStpInterfaceTreeStatIndex"))
if mibBuilder.loadTexts: sysStpInterfaceTreeStatEntry.setStatus('current')
if mibBuilder.loadTexts: sysStpInterfaceTreeStatEntry.setDescription('Columns in the sysStpInterfaceTreeStat Table')
sysStpInterfaceTreeStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 10, 8, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStpInterfaceTreeStatName.setStatus('current')
if mibBuilder.loadTexts: sysStpInterfaceTreeStatName.setDescription('The name of an interface which represents a port object \n\t\tin a spanning tree instance.')
sysStpInterfaceTreeStatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 10, 8, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStpInterfaceTreeStatIndex.setStatus('current')
if mibBuilder.loadTexts: sysStpInterfaceTreeStatIndex.setDescription('The index of the table that contains the information of \n\t\tthe specified port in a spanning tree instance.')
sysStpInterfaceTreeStatInstanceId = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 10, 8, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStpInterfaceTreeStatInstanceId.setStatus('current')
if mibBuilder.loadTexts: sysStpInterfaceTreeStatInstanceId.setDescription('The ID of the STP instance which the specified port associated with.')
sysStpInterfaceTreeStatPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 10, 8, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStpInterfaceTreeStatPriority.setStatus('current')
if mibBuilder.loadTexts: sysStpInterfaceTreeStatPriority.setDescription('The priority of the specified port in the associated spanning tree instance.')
sysStpInterfaceTreeStatState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 10, 8, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("detach", 0), ("block", 1), ("listen", 2), ("learn", 3), ("forward", 4), ("disable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStpInterfaceTreeStatState.setStatus('current')
if mibBuilder.loadTexts: sysStpInterfaceTreeStatState.setDescription('The state in which the specified port is in the associated spanning tree instance.')
sysStpInterfaceTreeStatStatRole = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 10, 8, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disable", 0), ("root", 1), ("designate", 2), ("alternate", 3), ("backup", 4), ("master", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStpInterfaceTreeStatStatRole.setStatus('current')
if mibBuilder.loadTexts: sysStpInterfaceTreeStatStatRole.setDescription('The role of the port object in the associated spanning tree instance.')
sysStpInterfaceTreeStatDesigRootPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 10, 8, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStpInterfaceTreeStatDesigRootPrio.setStatus('current')
if mibBuilder.loadTexts: sysStpInterfaceTreeStatDesigRootPrio.setDescription("The regional root bridge priority component of the port's\n\t\tpriority vector in the associated spanning tree instance.")
sysStpInterfaceTreeStatDesigRootAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 10, 8, 2, 1, 8), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStpInterfaceTreeStatDesigRootAddr.setStatus('current')
if mibBuilder.loadTexts: sysStpInterfaceTreeStatDesigRootAddr.setDescription("The regional root bridge MAC address component of the port's\n\t\tpriority vector in the associated spanning tree instance.")
sysStpInterfaceTreeStatDesigCost = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 10, 8, 2, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStpInterfaceTreeStatDesigCost.setStatus('current')
if mibBuilder.loadTexts: sysStpInterfaceTreeStatDesigCost.setDescription("The internal root path cost component of the port's priority\n\t\tvector in the associated spanning tree instance.")
sysStpInterfaceTreeStatDesigBridgePrio = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 10, 8, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStpInterfaceTreeStatDesigBridgePrio.setStatus('current')
if mibBuilder.loadTexts: sysStpInterfaceTreeStatDesigBridgePrio.setDescription("The designated bridge priority component of the port's priority\n\t\tvector in the associated spanning tree instance.")
sysStpInterfaceTreeStatDesigBridgeAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 10, 8, 2, 1, 11), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStpInterfaceTreeStatDesigBridgeAddr.setStatus('current')
if mibBuilder.loadTexts: sysStpInterfaceTreeStatDesigBridgeAddr.setDescription("The designated bridge MAC address component of the port's\n\t\tpriority vector in the associated spanning tree instance.")
sysStpInterfaceTreeStatDesigPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 10, 8, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStpInterfaceTreeStatDesigPortNum.setStatus('current')
if mibBuilder.loadTexts: sysStpInterfaceTreeStatDesigPortNum.setDescription("The designated port identifier component of the port's priority\n\t\tvector in the associated spanning tree instance.")
sysStpInterfaceTreeStatDesigPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 10, 8, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStpInterfaceTreeStatDesigPortPriority.setStatus('current')
if mibBuilder.loadTexts: sysStpInterfaceTreeStatDesigPortPriority.setDescription("The designated port priority component of the port's priority\n\t\tvector in the associated spanning tree instance.")
sysStpInterfaceTreeStatInternalPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 10, 8, 2, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStpInterfaceTreeStatInternalPathCost.setStatus('current')
if mibBuilder.loadTexts: sysStpInterfaceTreeStatInternalPathCost.setDescription('The internal path cost of the specified port in the associated \n\t\tspanning tree instance. This is only for MSTP.')
sysStpInterfaceTreeStatFwdTransitions = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 10, 8, 2, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStpInterfaceTreeStatFwdTransitions.setStatus('current')
if mibBuilder.loadTexts: sysStpInterfaceTreeStatFwdTransitions.setDescription('The count of transitions to forwarding state for the port \n\t\tin the associated spanning tree instance.')
sysDot3StatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 11, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysDot3StatResetStats.setStatus('current')
if mibBuilder.loadTexts: sysDot3StatResetStats.setDescription('The action to reset resettable statistics data in sysDot3Stat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
sysDot3StatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 11, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDot3StatNumber.setStatus('current')
if mibBuilder.loadTexts: sysDot3StatNumber.setDescription('The number of sysDot3Stat entries in the table.')
sysDot3StatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 11, 1, 3), )
if mibBuilder.loadTexts: sysDot3StatTable.setStatus('current')
if mibBuilder.loadTexts: sysDot3StatTable.setDescription('A table that contains statistic information of collection of \n\t\tethernet-like interfaces attached to a particular system.')
sysDot3StatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 11, 1, 3, 1), ).setIndexNames((0, "F5-BIGIP-SYSTEM-MIB", "sysDot3StatName"))
if mibBuilder.loadTexts: sysDot3StatEntry.setStatus('current')
if mibBuilder.loadTexts: sysDot3StatEntry.setDescription('Columns in the sysDot3Stat Table')
sysDot3StatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 11, 1, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDot3StatName.setStatus('current')
if mibBuilder.loadTexts: sysDot3StatName.setDescription('The name of the interface.')
sysDot3StatAlignmentErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 11, 1, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDot3StatAlignmentErrors.setStatus('current')
if mibBuilder.loadTexts: sysDot3StatAlignmentErrors.setDescription('A count of frames received on a particular\n\t\tinterface that are not an integral number of\n\t\toctets in length and do not pass the FCS check.')
sysDot3StatFcsErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 11, 1, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDot3StatFcsErrors.setStatus('current')
if mibBuilder.loadTexts: sysDot3StatFcsErrors.setDescription('A count of frames received on a particular\n\t\tinterface that are an integral number of octets\n\t\tin length but do not pass the FCS check.  This\n\t\tcount does not include frames received with\n\t\tframe-too-long or frame-too-short error.')
sysDot3StatSingleCollisionFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 11, 1, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDot3StatSingleCollisionFrames.setStatus('current')
if mibBuilder.loadTexts: sysDot3StatSingleCollisionFrames.setDescription('A count of successfully transmitted frames on\n\t\ta particular interface for which transmission\n\t\tis inhibited by exactly one collision.')
sysDot3StatMultiCollisionFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 11, 1, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDot3StatMultiCollisionFrames.setStatus('current')
if mibBuilder.loadTexts: sysDot3StatMultiCollisionFrames.setDescription('A count of successfully transmitted frames on\n\t\ta particular interface for which transmission\n\t\tis inhibited by more than one collision.')
sysDot3StatSqetestErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 11, 1, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDot3StatSqetestErrors.setStatus('current')
if mibBuilder.loadTexts: sysDot3StatSqetestErrors.setDescription('A count of times that the SQE TEST ERROR\n\t\tmessage is generated by the PLS sublayer for a\n\t\tparticular interface. The SQE TEST ERROR\n\t\tis set in accordance with the rules for\n\t\tverification of the SQE detection mechanism in\n\t\tthe PLS Carrier Sense Function as described in\n\t\tIEEE Std. 802.3, 1998 Edition, section 7.2.4.6.')
sysDot3StatDeferredTx = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 11, 1, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDot3StatDeferredTx.setStatus('current')
if mibBuilder.loadTexts: sysDot3StatDeferredTx.setDescription('A count of frames for which the first\n\t\ttransmission attempt on a particular interface\n\t\tis delayed because the medium is busy.\n\t\tThe count represented by an instance of this\n\t\tobject does not include frames involved in\n\t\tcollisions.')
sysDot3StatLateCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 11, 1, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDot3StatLateCollisions.setStatus('current')
if mibBuilder.loadTexts: sysDot3StatLateCollisions.setDescription('The number of times that a collision is\n\t\tdetected on a particular interface later than\n\t\tone slotTime into the transmission of a packet.')
sysDot3StatExcessiveCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 11, 1, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDot3StatExcessiveCollisions.setStatus('current')
if mibBuilder.loadTexts: sysDot3StatExcessiveCollisions.setDescription('A count of frames for which transmission on a\n\t\tparticular interface fails due to excessive\n\t\tcollisions.\n\t\tThis counter does not increment when the\n\t\tinterface is operating in full-duplex mode.')
sysDot3StatIntmacTxErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 11, 1, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDot3StatIntmacTxErrors.setStatus('current')
if mibBuilder.loadTexts: sysDot3StatIntmacTxErrors.setDescription('A count of frames for which transmission on a\n\t\tparticular interface fails due to an internal\n\t\tMAC sublayer transmit error. A frame is only\n\t\tcounted by an instance of this object if it is\n\t\tnot counted by the corresponding instance of\n\t\teither the sysDot3StatLateCollisions object, the\n\t\tsysDot3StatExcessiveCollisions object, or the\n\t\tsysDot3StatCarrierSenseErrors object.')
sysDot3StatCarrierSenseErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 11, 1, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDot3StatCarrierSenseErrors.setStatus('current')
if mibBuilder.loadTexts: sysDot3StatCarrierSenseErrors.setDescription('The number of times that the carrier sense\n\t\tcondition was lost or never asserted when\n\t\tattempting to transmit a frame on a particular\n\t\tinterface.')
sysDot3StatFrameTooLongs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 11, 1, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDot3StatFrameTooLongs.setStatus('current')
if mibBuilder.loadTexts: sysDot3StatFrameTooLongs.setDescription('A count of frames received on a particular\n\t\tinterface that exceed the maximum permitted\n\t\tframe size.')
sysDot3StatIntmacRxErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 11, 1, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDot3StatIntmacRxErrors.setStatus('current')
if mibBuilder.loadTexts: sysDot3StatIntmacRxErrors.setDescription('A count of frames for which reception on a\n\t\tparticular interface fails due to an internal\n\t\tMAC sublayer receive error. A frame is only\n\t\tcounted by an instance of this object if it is\n\t\tnot counted by the corresponding instance of\n\t\teither the sysDot3StatFrameTooLongs object, the\n\t\tsysDot3StatAlignmentErrors object, or the\n\t\tsysDot3StatFcsErrors object.')
sysDot3StatSymbolErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 11, 1, 3, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDot3StatSymbolErrors.setStatus('current')
if mibBuilder.loadTexts: sysDot3StatSymbolErrors.setDescription('This is a hardware counter that increments each time \n\t\ta valid receiver was present and at least 1 invalid data \n\t\tsymbol was detected.')
sysDot3StatDuplexStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 11, 1, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("halfDuplex", 2), ("fullDuplex", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDot3StatDuplexStatus.setStatus('current')
if mibBuilder.loadTexts: sysDot3StatDuplexStatus.setDescription("The current mode of operation of the MAC\n\t\tentity.  'unknown' indicates that the current\n\t\tduplex mode could not be determined.")
sysDot3StatCollisionCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 11, 1, 3, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDot3StatCollisionCount.setStatus('deprecated')
if mibBuilder.loadTexts: sysDot3StatCollisionCount.setDescription('Deprecated! The number of per-frame media collisions for\n\t\twhich a particular collision histogram cell\n\t\trepresents the frequency on a particular\n\t\tinterface.')
sysDot3StatCollisionFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 11, 1, 3, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDot3StatCollisionFreq.setStatus('deprecated')
if mibBuilder.loadTexts: sysDot3StatCollisionFreq.setDescription('Deprecated! A count of individual MAC frames for which the\n\t\ttransmission (successful or otherwise) on a\n\t\tparticular interface occurs after the\n\t\tframe has experienced exactly the number\n\t\tof collisions in the associated\n\t\tsysDot3CollisionCount object.')
sysDot3StatRateControlAbility = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 11, 1, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("supported", 1), ("notSupported", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDot3StatRateControlAbility.setStatus('current')
if mibBuilder.loadTexts: sysDot3StatRateControlAbility.setDescription("'true (1)' for interfaces operating at speeds above\n\t        1000 Mb/s that support Rate Control through\n\t        lowering the average data rate of the MAC\n\t        sublayer, with frame granularity, and 'false'\n\t        otherwise.")
sysDot3StatRateControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 11, 1, 3, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("rateControlOff", 1), ("rateControlOn", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDot3StatRateControlStatus.setStatus('current')
if mibBuilder.loadTexts: sysDot3StatRateControlStatus.setDescription('The current Rate Control mode of operation of\n\t         the MAC sublayer of this interface.')
sysTrunkNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTrunkNumber.setStatus('current')
if mibBuilder.loadTexts: sysTrunkNumber.setDescription('The number of sysTrunk entries in the table.')
sysTrunkTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 12, 1, 2), )
if mibBuilder.loadTexts: sysTrunkTable.setStatus('current')
if mibBuilder.loadTexts: sysTrunkTable.setDescription('A table containing information of trunks.')
sysTrunkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 12, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-SYSTEM-MIB", "sysTrunkName"))
if mibBuilder.loadTexts: sysTrunkEntry.setStatus('current')
if mibBuilder.loadTexts: sysTrunkEntry.setDescription('Columns in the sysTrunk Table')
sysTrunkName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 12, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTrunkName.setStatus('current')
if mibBuilder.loadTexts: sysTrunkName.setDescription('The name of a trunk.')
sysTrunkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 12, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("up", 0), ("down", 1), ("disable", 2), ("uninitialized", 3), ("loopback", 4), ("unpopulated", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTrunkStatus.setStatus('current')
if mibBuilder.loadTexts: sysTrunkStatus.setDescription('The interface status.')
sysTrunkAggAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 12, 1, 2, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTrunkAggAddr.setStatus('current')
if mibBuilder.loadTexts: sysTrunkAggAddr.setDescription('The aggregator MAC address of the specified trunk.')
sysTrunkCfgMbrCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 12, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTrunkCfgMbrCount.setStatus('current')
if mibBuilder.loadTexts: sysTrunkCfgMbrCount.setDescription('The number of configured members that the specified trunk has.')
sysTrunkOperBw = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 12, 1, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTrunkOperBw.setStatus('current')
if mibBuilder.loadTexts: sysTrunkOperBw.setDescription('The operational bandwidth in Mbps.')
sysTrunkStpEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 12, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTrunkStpEnable.setStatus('current')
if mibBuilder.loadTexts: sysTrunkStpEnable.setDescription('Whether STP is enabled for the specified trunk.')
sysTrunkStpReset = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 12, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTrunkStpReset.setStatus('current')
if mibBuilder.loadTexts: sysTrunkStpReset.setDescription('Whether STP reset command is enabled for the specified trunk.')
sysTrunkLacpEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 12, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTrunkLacpEnabled.setStatus('current')
if mibBuilder.loadTexts: sysTrunkLacpEnabled.setDescription('Whether LACP is enabled for the specified trunk.')
sysTrunkActiveLacp = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 12, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTrunkActiveLacp.setStatus('current')
if mibBuilder.loadTexts: sysTrunkActiveLacp.setDescription('The active versus passive LACP on the specified trunk.')
sysTrunkShortTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 12, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTrunkShortTimeout.setStatus('current')
if mibBuilder.loadTexts: sysTrunkShortTimeout.setDescription('The short versus long timeout on the specified trunk.')
sysTrunkStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 12, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTrunkStatResetStats.setStatus('current')
if mibBuilder.loadTexts: sysTrunkStatResetStats.setDescription('The action to reset resettable statistics data in sysTrunkStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
sysTrunkStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 12, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTrunkStatNumber.setStatus('current')
if mibBuilder.loadTexts: sysTrunkStatNumber.setDescription('The number of sysTrunkStat entries in the table.')
sysTrunkStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 12, 2, 3), )
if mibBuilder.loadTexts: sysTrunkStatTable.setStatus('current')
if mibBuilder.loadTexts: sysTrunkStatTable.setDescription('A table containing statistic information of trunks.')
sysTrunkStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 12, 2, 3, 1), ).setIndexNames((0, "F5-BIGIP-SYSTEM-MIB", "sysTrunkStatName"))
if mibBuilder.loadTexts: sysTrunkStatEntry.setStatus('current')
if mibBuilder.loadTexts: sysTrunkStatEntry.setDescription('Columns in the sysTrunkStat Table')
sysTrunkStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 12, 2, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTrunkStatName.setStatus('current')
if mibBuilder.loadTexts: sysTrunkStatName.setDescription('The name of a trunk.')
sysTrunkStatPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 12, 2, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTrunkStatPktsIn.setStatus('current')
if mibBuilder.loadTexts: sysTrunkStatPktsIn.setDescription('The number of packets received on the specified trunk.')
sysTrunkStatBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 12, 2, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTrunkStatBytesIn.setStatus('current')
if mibBuilder.loadTexts: sysTrunkStatBytesIn.setDescription('The number of bytes received on the specified trunk.')
sysTrunkStatPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 12, 2, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTrunkStatPktsOut.setStatus('current')
if mibBuilder.loadTexts: sysTrunkStatPktsOut.setDescription('The number of packets transmitted out of the specified trunk.')
sysTrunkStatBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 12, 2, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTrunkStatBytesOut.setStatus('current')
if mibBuilder.loadTexts: sysTrunkStatBytesOut.setDescription('The number of bytes transmitted out of the specified trunk.')
sysTrunkStatMcastIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 12, 2, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTrunkStatMcastIn.setStatus('current')
if mibBuilder.loadTexts: sysTrunkStatMcastIn.setDescription('The number of multicast packets received on the specified trunk.')
sysTrunkStatMcastOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 12, 2, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTrunkStatMcastOut.setStatus('current')
if mibBuilder.loadTexts: sysTrunkStatMcastOut.setDescription('The number of multicast packets transmitted out of the specified trunk.')
sysTrunkStatErrorsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 12, 2, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTrunkStatErrorsIn.setStatus('current')
if mibBuilder.loadTexts: sysTrunkStatErrorsIn.setDescription('The number of received packets that are either undersized, \n\t\toversized, or have FCS errors by the specified trunk.')
sysTrunkStatErrorsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 12, 2, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTrunkStatErrorsOut.setStatus('current')
if mibBuilder.loadTexts: sysTrunkStatErrorsOut.setDescription('The number of excessive collisions, incremented for each \n\t\tframe that experienced 16 collisions during transmission and \n\t\twas aborted on the specified trunk.')
sysTrunkStatDropsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 12, 2, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTrunkStatDropsIn.setStatus('current')
if mibBuilder.loadTexts: sysTrunkStatDropsIn.setDescription('The number of packets dropped on ingress for various reasons on the specified trunk.')
sysTrunkStatDropsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 12, 2, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTrunkStatDropsOut.setStatus('current')
if mibBuilder.loadTexts: sysTrunkStatDropsOut.setDescription('The number of packets aged out or with excessive transmission \n\t\tdelays due to multiple deferrals on the specified trunk.')
sysTrunkStatCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 12, 2, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTrunkStatCollisions.setStatus('current')
if mibBuilder.loadTexts: sysTrunkStatCollisions.setDescription('The number of collisions on the specified trunk, incremented by the \n\t\tnumber of collisions experienced during transmissions of a frame')
sysTrunkCfgMemberNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 12, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTrunkCfgMemberNumber.setStatus('current')
if mibBuilder.loadTexts: sysTrunkCfgMemberNumber.setDescription('The number of sysTrunkCfgMember entries in the table.')
sysTrunkCfgMemberTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 12, 3, 2), )
if mibBuilder.loadTexts: sysTrunkCfgMemberTable.setStatus('current')
if mibBuilder.loadTexts: sysTrunkCfgMemberTable.setDescription('A table containing information of configured trunk members.')
sysTrunkCfgMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 12, 3, 2, 1), ).setIndexNames((0, "F5-BIGIP-SYSTEM-MIB", "sysTrunkCfgMemberTrunkName"), (0, "F5-BIGIP-SYSTEM-MIB", "sysTrunkCfgMemberName"))
if mibBuilder.loadTexts: sysTrunkCfgMemberEntry.setStatus('current')
if mibBuilder.loadTexts: sysTrunkCfgMemberEntry.setDescription('Columns in the sysTrunkCfgMember Table')
sysTrunkCfgMemberTrunkName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 12, 3, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTrunkCfgMemberTrunkName.setStatus('current')
if mibBuilder.loadTexts: sysTrunkCfgMemberTrunkName.setDescription('The name of a trunk to which this member belongs.')
sysTrunkCfgMemberName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 12, 3, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTrunkCfgMemberName.setStatus('current')
if mibBuilder.loadTexts: sysTrunkCfgMemberName.setDescription('The name of a trunk member associated with the specified trunk.')
sysVlanNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 13, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVlanNumber.setStatus('current')
if mibBuilder.loadTexts: sysVlanNumber.setDescription('The number of sysVlan entries in the table.')
sysVlanTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 13, 1, 2), )
if mibBuilder.loadTexts: sysVlanTable.setStatus('current')
if mibBuilder.loadTexts: sysVlanTable.setDescription('A table containing informations of VLANs.')
sysVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 13, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-SYSTEM-MIB", "sysVlanVname"))
if mibBuilder.loadTexts: sysVlanEntry.setStatus('current')
if mibBuilder.loadTexts: sysVlanEntry.setDescription('Columns in the sysVlan Table')
sysVlanVname = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 13, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVlanVname.setStatus('current')
if mibBuilder.loadTexts: sysVlanVname.setDescription('The name of a VLAN.')
sysVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 13, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVlanId.setStatus('current')
if mibBuilder.loadTexts: sysVlanId.setDescription('The VLAN tag numbers or IDs (valid range is 1-4095).')
sysVlanSpanningTree = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 13, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVlanSpanningTree.setStatus('current')
if mibBuilder.loadTexts: sysVlanSpanningTree.setDescription('The status of spanning tree domain is enabled.')
sysVlanMacMasquerade = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 13, 1, 2, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVlanMacMasquerade.setStatus('deprecated')
if mibBuilder.loadTexts: sysVlanMacMasquerade.setDescription('Deprecated!  Use traffic group MAC address instead.\n\t\t\tThe MAC masquerade address for the specified VLAN.')
sysVlanMacTrue = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 13, 1, 2, 1, 5), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVlanMacTrue.setStatus('current')
if mibBuilder.loadTexts: sysVlanMacTrue.setDescription('The true MAC address used by the specified VLAN.')
sysVlanSourceCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 13, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVlanSourceCheck.setStatus('current')
if mibBuilder.loadTexts: sysVlanSourceCheck.setDescription("The source checking state for the specified VLAN. \n\t\tIf it's true and auto lasthop is disabled, check that the\n\t\tsource of the first packet of a connection is correct \n\t\t(correct VLAN, router, node).")
sysVlanFailsafeEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 13, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVlanFailsafeEnabled.setStatus('current')
if mibBuilder.loadTexts: sysVlanFailsafeEnabled.setDescription('The failsafe state for the specified VLAN is enabled.')
sysVlanMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 13, 1, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVlanMtu.setStatus('current')
if mibBuilder.loadTexts: sysVlanMtu.setDescription('The maximum transmission unit size of datagram which can be \n\t\t\tsent to the specified VLAN.')
sysVlanFailsafeTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 13, 1, 2, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVlanFailsafeTimeout.setStatus('current')
if mibBuilder.loadTexts: sysVlanFailsafeTimeout.setDescription('The failsafe timeouts for the specified VLAN.')
sysVlanFailsafeAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 13, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("unusedhaaction", 0), ("reboot", 1), ("restart", 2), ("failover", 3), ("goactive", 4), ("noaction", 5), ("restartall", 6), ("failoveraborttm", 7), ("gooffline", 8), ("goofflinerestart", 9), ("goofflineaborttm", 10), ("goofflinedownlinks", 11), ("goofflinedownlinksrestart", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVlanFailsafeAction.setStatus('current')
if mibBuilder.loadTexts: sysVlanFailsafeAction.setDescription('The failsafe action for the specified VLAN.')
sysVlanMirrorHashPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 13, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVlanMirrorHashPortEnable.setStatus('current')
if mibBuilder.loadTexts: sysVlanMirrorHashPortEnable.setDescription('The state whether to hash the port for VLAN mirroring for the specified VLAN.')
sysVlanLearnMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 13, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("learnforward", 0), ("nolearnforward", 1), ("nolearndrop", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVlanLearnMode.setStatus('current')
if mibBuilder.loadTexts: sysVlanLearnMode.setDescription('The learn mode of the specified VLAN.')
sysVlanMemberNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 13, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVlanMemberNumber.setStatus('current')
if mibBuilder.loadTexts: sysVlanMemberNumber.setDescription('The number of sysVlanMember entries in the table.')
sysVlanMemberTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 13, 2, 2), )
if mibBuilder.loadTexts: sysVlanMemberTable.setStatus('current')
if mibBuilder.loadTexts: sysVlanMemberTable.setDescription('A table containing information of VLAN members.')
sysVlanMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 13, 2, 2, 1), ).setIndexNames((0, "F5-BIGIP-SYSTEM-MIB", "sysVlanMemberParentVname"), (0, "F5-BIGIP-SYSTEM-MIB", "sysVlanMemberVmname"))
if mibBuilder.loadTexts: sysVlanMemberEntry.setStatus('current')
if mibBuilder.loadTexts: sysVlanMemberEntry.setDescription('Columns in the sysVlanMember Table')
sysVlanMemberVmname = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 13, 2, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVlanMemberVmname.setStatus('current')
if mibBuilder.loadTexts: sysVlanMemberVmname.setDescription('The name of a VLAN member.')
sysVlanMemberParentVname = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 13, 2, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVlanMemberParentVname.setStatus('current')
if mibBuilder.loadTexts: sysVlanMemberParentVname.setDescription('The name of a VLAN to which the specified member belongs.')
sysVlanMemberTagged = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 13, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVlanMemberTagged.setStatus('current')
if mibBuilder.loadTexts: sysVlanMemberTagged.setDescription('The tagged/untagged state of the specified VLAN member.')
sysVlanMemberType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 13, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("interface", 0), ("trunk", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVlanMemberType.setStatus('current')
if mibBuilder.loadTexts: sysVlanMemberType.setDescription('The type of the specified VLAN member.')
sysVlanGroupNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 13, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVlanGroupNumber.setStatus('current')
if mibBuilder.loadTexts: sysVlanGroupNumber.setDescription('The number of sysVlanGroup entries in the table.')
sysVlanGroupTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 13, 3, 2), )
if mibBuilder.loadTexts: sysVlanGroupTable.setStatus('current')
if mibBuilder.loadTexts: sysVlanGroupTable.setDescription('A table containing information of VLAN groups.')
sysVlanGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 13, 3, 2, 1), ).setIndexNames((0, "F5-BIGIP-SYSTEM-MIB", "sysVlanGroupName"))
if mibBuilder.loadTexts: sysVlanGroupEntry.setStatus('current')
if mibBuilder.loadTexts: sysVlanGroupEntry.setDescription('Columns in the sysVlanGroup Table')
sysVlanGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 13, 3, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVlanGroupName.setStatus('current')
if mibBuilder.loadTexts: sysVlanGroupName.setDescription('The name of a VLAN group.')
sysVlanGroupVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 13, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVlanGroupVlanId.setStatus('deprecated')
if mibBuilder.loadTexts: sysVlanGroupVlanId.setDescription('Deprecated! The VLAN ID/tag numbers (valid range is 1-4095).')
sysVlanGroupMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 13, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("transparent", 0), ("translucent", 1), ("opaque", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVlanGroupMode.setStatus('current')
if mibBuilder.loadTexts: sysVlanGroupMode.setDescription('The transparency mode for the specified VLAN group. \n\t\ttransparent - bridge with no modifications;\n\t\ttranslucent - toggle locally-modified bit of src MAC;\n\t\topaque - bridge using proxy-arp.')
sysVlanGroupBridgeAllTraffic = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 13, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVlanGroupBridgeAllTraffic.setStatus('current')
if mibBuilder.loadTexts: sysVlanGroupBridgeAllTraffic.setDescription('The state to indicate whether to bridge non-IP traffic as \n\t\twell as IP traffic for the specified VLAN group.')
sysVlanGroupBridgeInStandby = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 13, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVlanGroupBridgeInStandby.setStatus('current')
if mibBuilder.loadTexts: sysVlanGroupBridgeInStandby.setDescription('The state to indicate whether to bridge while unit is \n\t\tin standby mode for the specified VLAN group.')
sysVlanGroupBridgeMulticast = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 13, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVlanGroupBridgeMulticast.setStatus('current')
if mibBuilder.loadTexts: sysVlanGroupBridgeMulticast.setDescription('The state to indicate whether to bridge multicast/broadcast \n\t\ttraffic for the specified VLAN group.')
sysVlanGroupMacMasquerade = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 13, 3, 2, 1, 7), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVlanGroupMacMasquerade.setStatus('deprecated')
if mibBuilder.loadTexts: sysVlanGroupMacMasquerade.setDescription('Deprecated!  Use traffic group MAC address instead.\n\t\t\tThe MAC masquerade address for the specified VLAN group.')
sysVlanGroupMacTrue = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 13, 3, 2, 1, 8), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVlanGroupMacTrue.setStatus('current')
if mibBuilder.loadTexts: sysVlanGroupMacTrue.setDescription('The true MAC address used by the specified VLAN group.')
sysVlanGroupMbrNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 13, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVlanGroupMbrNumber.setStatus('current')
if mibBuilder.loadTexts: sysVlanGroupMbrNumber.setDescription('The number of sysVlanGroupMbr entries in the table.')
sysVlanGroupMbrTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 13, 4, 2), )
if mibBuilder.loadTexts: sysVlanGroupMbrTable.setStatus('current')
if mibBuilder.loadTexts: sysVlanGroupMbrTable.setDescription("A table containing information of VLAN group's members.")
sysVlanGroupMbrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 13, 4, 2, 1), ).setIndexNames((0, "F5-BIGIP-SYSTEM-MIB", "sysVlanGroupMbrGroupName"), (0, "F5-BIGIP-SYSTEM-MIB", "sysVlanGroupMbrVlanName"))
if mibBuilder.loadTexts: sysVlanGroupMbrEntry.setStatus('current')
if mibBuilder.loadTexts: sysVlanGroupMbrEntry.setDescription('Columns in the sysVlanGroupMbr Table')
sysVlanGroupMbrGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 13, 4, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVlanGroupMbrGroupName.setStatus('current')
if mibBuilder.loadTexts: sysVlanGroupMbrGroupName.setDescription('The name of a VLAN group.')
sysVlanGroupMbrVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 13, 4, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVlanGroupMbrVlanName.setStatus('current')
if mibBuilder.loadTexts: sysVlanGroupMbrVlanName.setDescription("The name of a VLAN group's member associated with the specified VLAN group.")
sysProxyExclusionNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 13, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysProxyExclusionNumber.setStatus('current')
if mibBuilder.loadTexts: sysProxyExclusionNumber.setDescription('The number of sysProxyExclusion entries in the table.')
sysProxyExclusionTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 13, 5, 2), )
if mibBuilder.loadTexts: sysProxyExclusionTable.setStatus('current')
if mibBuilder.loadTexts: sysProxyExclusionTable.setDescription("A table containing information of a list of IP's that proxy arp will ignore on VLAN groups.")
sysProxyExclusionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 13, 5, 2, 1), ).setIndexNames((0, "F5-BIGIP-SYSTEM-MIB", "sysProxyExclusionVlangroupName"), (0, "F5-BIGIP-SYSTEM-MIB", "sysProxyExclusionIpType"), (0, "F5-BIGIP-SYSTEM-MIB", "sysProxyExclusionIp"))
if mibBuilder.loadTexts: sysProxyExclusionEntry.setStatus('current')
if mibBuilder.loadTexts: sysProxyExclusionEntry.setDescription('Columns in the sysProxyExclusion Table')
sysProxyExclusionVlangroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 13, 5, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysProxyExclusionVlangroupName.setStatus('current')
if mibBuilder.loadTexts: sysProxyExclusionVlangroupName.setDescription('The name of a VLAN group.')
sysProxyExclusionIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 13, 5, 2, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysProxyExclusionIpType.setStatus('current')
if mibBuilder.loadTexts: sysProxyExclusionIpType.setDescription('The IP address type of sysProxyExclusionIp')
sysProxyExclusionIp = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 13, 5, 2, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysProxyExclusionIp.setStatus('current')
if mibBuilder.loadTexts: sysProxyExclusionIp.setDescription('The IP address ignored from the global proxy exclusion list \n\t\tfor the specified VLAN group. It is interpreted within the context \n\t\tof a sysProxyExclusionIpType value')
sysCpuNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCpuNumber.setStatus('deprecated')
if mibBuilder.loadTexts: sysCpuNumber.setDescription('Deprecated!.\n\t\tThe number of sysCpu entries in the table.')
sysCpuTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 1, 2), )
if mibBuilder.loadTexts: sysCpuTable.setStatus('deprecated')
if mibBuilder.loadTexts: sysCpuTable.setDescription('Deprecated! Replaced by sysCpuSensor table.\n\t\t\tA table containing information of CPU status on the system.')
sysCpuEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-SYSTEM-MIB", "sysCpuIndex"))
if mibBuilder.loadTexts: sysCpuEntry.setStatus('deprecated')
if mibBuilder.loadTexts: sysCpuEntry.setDescription('Columns in the sysCpu Table')
sysCpuIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCpuIndex.setStatus('deprecated')
if mibBuilder.loadTexts: sysCpuIndex.setDescription('Deprecated! Replaced by sysCpuSensor table.\n\t\t\tThe CPU index on the system.')
sysCpuTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCpuTemperature.setStatus('deprecated')
if mibBuilder.loadTexts: sysCpuTemperature.setDescription('Deprecated! Replaced by sysCpuSensor table.\n\t\t\tThe temperature of the indexed CPU on the system.\n\t\t\tThis is only supported for the platform where\n\t\t\tthe sensor data is available.')
sysCpuFanSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 1, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCpuFanSpeed.setStatus('deprecated')
if mibBuilder.loadTexts: sysCpuFanSpeed.setDescription('Deprecated! Replaced by sysCpuSensor table.\n\t\t\tThe fan speed (in RPM) of the indexed CPU on the system.,\n\t\t\tThis is only supported for the platform where\n\t\t\tthe sensor data is available.')
sysCpuName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 1, 2, 1, 4), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCpuName.setStatus('deprecated')
if mibBuilder.loadTexts: sysCpuName.setDescription('Deprecated! Replaced by sysCpuSensor table.\n\t\t\tIdentifier for the CPU.')
sysCpuSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCpuSlot.setStatus('deprecated')
if mibBuilder.loadTexts: sysCpuSlot.setDescription('Deprecated! Replaced by sysCpuSensor table.\n\t\t\tChassis slot number, if applicable.')
sysChassisFanNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysChassisFanNumber.setStatus('current')
if mibBuilder.loadTexts: sysChassisFanNumber.setDescription('The number of sysChassisFan entries in the table.')
sysChassisFanTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 2, 1, 2), )
if mibBuilder.loadTexts: sysChassisFanTable.setStatus('current')
if mibBuilder.loadTexts: sysChassisFanTable.setDescription('A table containing information of chassis fan status of the system.')
sysChassisFanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 2, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-SYSTEM-MIB", "sysChassisFanIndex"))
if mibBuilder.loadTexts: sysChassisFanEntry.setStatus('current')
if mibBuilder.loadTexts: sysChassisFanEntry.setDescription('Columns in the sysChassisFan Table')
sysChassisFanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 2, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysChassisFanIndex.setStatus('current')
if mibBuilder.loadTexts: sysChassisFanIndex.setDescription('The index of a chassis fan on the system. It identifies a \n\t\tparticular chassis fan.')
sysChassisFanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 2, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("bad", 0), ("good", 1), ("notpresent", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysChassisFanStatus.setStatus('current')
if mibBuilder.loadTexts: sysChassisFanStatus.setDescription('The status of the indexed chassis fan on the system.,\n\t\tThis is only supported for the platform where \n\t\tthe sensor data is available.')
sysChassisFanSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 2, 1, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysChassisFanSpeed.setStatus('current')
if mibBuilder.loadTexts: sysChassisFanSpeed.setDescription("The actual speed of the indexed chassis fan on the system.\n\t\tThis is only supported for the platform where the actual \n\t\tfan speed data is available.\n\t\t'0' means fan speed is unavailable while the associated chassis status is good.")
sysChassisPowerSupplyNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 2, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysChassisPowerSupplyNumber.setStatus('current')
if mibBuilder.loadTexts: sysChassisPowerSupplyNumber.setDescription('The number of sysChassisPowerSupply entries in the table.')
sysChassisPowerSupplyTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 2, 2, 2), )
if mibBuilder.loadTexts: sysChassisPowerSupplyTable.setStatus('current')
if mibBuilder.loadTexts: sysChassisPowerSupplyTable.setDescription('A table containing information of chassis power supply status of the system.')
sysChassisPowerSupplyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 2, 2, 2, 1), ).setIndexNames((0, "F5-BIGIP-SYSTEM-MIB", "sysChassisPowerSupplyIndex"))
if mibBuilder.loadTexts: sysChassisPowerSupplyEntry.setStatus('current')
if mibBuilder.loadTexts: sysChassisPowerSupplyEntry.setDescription('Columns in the sysChassisPowerSupply Table')
sysChassisPowerSupplyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 2, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysChassisPowerSupplyIndex.setStatus('current')
if mibBuilder.loadTexts: sysChassisPowerSupplyIndex.setDescription('The index of a power supply  on the system.')
sysChassisPowerSupplyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 2, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("bad", 0), ("good", 1), ("notpresent", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysChassisPowerSupplyStatus.setStatus('current')
if mibBuilder.loadTexts: sysChassisPowerSupplyStatus.setDescription('The status of the indexed power supply on the system.,\n\t\tThis is only supported for the platform where \n\t\tthe sensor data is available.')
sysChassisTempNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 2, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysChassisTempNumber.setStatus('current')
if mibBuilder.loadTexts: sysChassisTempNumber.setDescription('The number of sysChassisTemp entries in the table.')
sysChassisTempTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 2, 3, 2), )
if mibBuilder.loadTexts: sysChassisTempTable.setStatus('current')
if mibBuilder.loadTexts: sysChassisTempTable.setDescription('A table containing information of chassis temperature of the system.')
sysChassisTempEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 2, 3, 2, 1), ).setIndexNames((0, "F5-BIGIP-SYSTEM-MIB", "sysChassisTempIndex"))
if mibBuilder.loadTexts: sysChassisTempEntry.setStatus('current')
if mibBuilder.loadTexts: sysChassisTempEntry.setDescription('Columns in the sysChassisTemp Table')
sysChassisTempIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 2, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysChassisTempIndex.setStatus('current')
if mibBuilder.loadTexts: sysChassisTempIndex.setDescription('The index of a chassis temperature sensor on the system. \n\t\tIt identifies a particular chassis temperature sensor, fan, etc.')
sysChassisTempTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 2, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysChassisTempTemperature.setStatus('current')
if mibBuilder.loadTexts: sysChassisTempTemperature.setDescription('The chassis temperature (in Celsius) of the indexed sensor on the system.,\n\t\tThis is only supported for the platform where \n\t\tthe sensor data is available.')
sysProductName = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 4, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysProductName.setStatus('current')
if mibBuilder.loadTexts: sysProductName.setDescription('The product name.')
sysProductVersion = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 4, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysProductVersion.setStatus('current')
if mibBuilder.loadTexts: sysProductVersion.setDescription('The product version.')
sysProductBuild = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 4, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysProductBuild.setStatus('current')
if mibBuilder.loadTexts: sysProductBuild.setDescription('The product build number.')
sysProductEdition = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 4, 4), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysProductEdition.setStatus('current')
if mibBuilder.loadTexts: sysProductEdition.setDescription('The product edition.')
sysProductDate = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 4, 5), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysProductDate.setStatus('current')
if mibBuilder.loadTexts: sysProductDate.setDescription('The product build date.')
sysProductHotfix = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 4, 6), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysProductHotfix.setStatus('deprecated')
if mibBuilder.loadTexts: sysProductHotfix.setDescription("Deprecated! The 'Edition' field contains the hotfix number, if applicable")
sysSubMemoryResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 5, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSubMemoryResetStats.setStatus('deprecated')
if mibBuilder.loadTexts: sysSubMemoryResetStats.setDescription('Deprecated!.\n\t\tThe action to reset resettable statistics data in sysSubMemory.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
sysSubMemoryNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSubMemoryNumber.setStatus('deprecated')
if mibBuilder.loadTexts: sysSubMemoryNumber.setDescription('Deprecated!.\n\t\tThe number of sysSubMemory entries in the table.')
sysSubMemoryTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 1, 5, 3), )
if mibBuilder.loadTexts: sysSubMemoryTable.setStatus('deprecated')
if mibBuilder.loadTexts: sysSubMemoryTable.setDescription('Deprecated! \n\t\tA table containing information of the memory usage for each subsystem.')
sysSubMemoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 1, 5, 3, 1), ).setIndexNames((0, "F5-BIGIP-SYSTEM-MIB", "sysSubMemoryName"))
if mibBuilder.loadTexts: sysSubMemoryEntry.setStatus('deprecated')
if mibBuilder.loadTexts: sysSubMemoryEntry.setDescription('Columns in the sysSubMemory Table')
sysSubMemoryName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 5, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSubMemoryName.setStatus('deprecated')
if mibBuilder.loadTexts: sysSubMemoryName.setDescription('Deprecated! \n\t\tThe name of the subsystem.')
sysSubMemoryAllocated = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 5, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSubMemoryAllocated.setStatus('deprecated')
if mibBuilder.loadTexts: sysSubMemoryAllocated.setDescription('Deprecated!\n\t\tThe number of bytes currently allocated for this subsystem.')
sysSubMemoryMaxAllocated = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 5, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSubMemoryMaxAllocated.setStatus('deprecated')
if mibBuilder.loadTexts: sysSubMemoryMaxAllocated.setDescription('Deprecated!\n\t\tThe maximum number of bytes allocated for this subsystem.')
sysSubMemorySize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 5, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSubMemorySize.setStatus('deprecated')
if mibBuilder.loadTexts: sysSubMemorySize.setDescription('Deprecated!\n\t\tThe size in bytes of each object.')
sysSystemName = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 6, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSystemName.setStatus('current')
if mibBuilder.loadTexts: sysSystemName.setDescription('The operating system name.')
sysSystemNodeName = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 6, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSystemNodeName.setStatus('current')
if mibBuilder.loadTexts: sysSystemNodeName.setDescription('The host name of the system on the network.')
sysSystemRelease = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 6, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSystemRelease.setStatus('current')
if mibBuilder.loadTexts: sysSystemRelease.setDescription('The current system release level.')
sysSystemVersion = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 6, 4), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSystemVersion.setStatus('current')
if mibBuilder.loadTexts: sysSystemVersion.setDescription('The current system version level.')
sysSystemMachine = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 6, 5), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSystemMachine.setStatus('current')
if mibBuilder.loadTexts: sysSystemMachine.setDescription('The name of the hardware type the system is running.')
sysSystemUptime = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 6, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSystemUptime.setStatus('current')
if mibBuilder.loadTexts: sysSystemUptime.setDescription('The system up time in 1/100 seconds since boot.')
sysSystemUptimeInSec = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 6, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSystemUptimeInSec.setStatus('current')
if mibBuilder.loadTexts: sysSystemUptimeInSec.setDescription('The system up time in seconds since boot.')
sysFastHttpStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 14, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysFastHttpStatResetStats.setStatus('current')
if mibBuilder.loadTexts: sysFastHttpStatResetStats.setDescription('The action to reset resettable statistics data in sysGlobalFastHttpStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
sysFastHttpStatClientSyns = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 14, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFastHttpStatClientSyns.setStatus('current')
if mibBuilder.loadTexts: sysFastHttpStatClientSyns.setDescription('The total number of client SYN cookies generated.')
sysFastHttpStatClientAccepts = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 14, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFastHttpStatClientAccepts.setStatus('current')
if mibBuilder.loadTexts: sysFastHttpStatClientAccepts.setDescription('The total number of client TCP accepts.')
sysFastHttpStatServerConnects = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 14, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFastHttpStatServerConnects.setStatus('current')
if mibBuilder.loadTexts: sysFastHttpStatServerConnects.setDescription('The total number of server TCP connects.')
sysFastHttpStatConnpoolCurSize = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 14, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFastHttpStatConnpoolCurSize.setStatus('current')
if mibBuilder.loadTexts: sysFastHttpStatConnpoolCurSize.setDescription('The number of available server-side flows in the reuse pools.')
sysFastHttpStatConnpoolMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 14, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFastHttpStatConnpoolMaxSize.setStatus('current')
if mibBuilder.loadTexts: sysFastHttpStatConnpoolMaxSize.setDescription('The maximum number of available server-side flows in the reuse pools.')
sysFastHttpStatConnpoolReuses = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 14, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFastHttpStatConnpoolReuses.setStatus('current')
if mibBuilder.loadTexts: sysFastHttpStatConnpoolReuses.setDescription('The number of times a server-side flow was reused from the pools.')
sysFastHttpStatConnpoolExhausted = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 14, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFastHttpStatConnpoolExhausted.setStatus('current')
if mibBuilder.loadTexts: sysFastHttpStatConnpoolExhausted.setDescription('The number of times the reuse pools was exhausted.')
sysFastHttpStatNumberReqs = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 14, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFastHttpStatNumberReqs.setStatus('current')
if mibBuilder.loadTexts: sysFastHttpStatNumberReqs.setDescription('The total number of http requests.')
sysFastHttpStatUnbufferedReqs = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 14, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFastHttpStatUnbufferedReqs.setStatus('current')
if mibBuilder.loadTexts: sysFastHttpStatUnbufferedReqs.setDescription('The total number of un-buffered requests.')
sysFastHttpStatGetReqs = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 14, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFastHttpStatGetReqs.setStatus('current')
if mibBuilder.loadTexts: sysFastHttpStatGetReqs.setDescription('The total number of get requests.')
sysFastHttpStatPostReqs = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 14, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFastHttpStatPostReqs.setStatus('current')
if mibBuilder.loadTexts: sysFastHttpStatPostReqs.setDescription('The total number of post requests.')
sysFastHttpStatV9Reqs = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 14, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFastHttpStatV9Reqs.setStatus('current')
if mibBuilder.loadTexts: sysFastHttpStatV9Reqs.setDescription('The total number of version 9 requests.')
sysFastHttpStatV10Reqs = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 14, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFastHttpStatV10Reqs.setStatus('current')
if mibBuilder.loadTexts: sysFastHttpStatV10Reqs.setDescription('The total number of version 10 requests.')
sysFastHttpStatV11Reqs = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 14, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFastHttpStatV11Reqs.setStatus('current')
if mibBuilder.loadTexts: sysFastHttpStatV11Reqs.setDescription('The total number of version 11 requests.')
sysFastHttpStatResp2xxCnt = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 14, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFastHttpStatResp2xxCnt.setStatus('current')
if mibBuilder.loadTexts: sysFastHttpStatResp2xxCnt.setDescription('The number of server-side responses in range of 200 to 206 \n\t\t(successful responses).')
sysFastHttpStatResp3xxCnt = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 14, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFastHttpStatResp3xxCnt.setStatus('current')
if mibBuilder.loadTexts: sysFastHttpStatResp3xxCnt.setDescription('The number of server-side responses in range of 300 to 307 \n\t\t(redirection responses).')
sysFastHttpStatResp4xxCnt = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 14, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFastHttpStatResp4xxCnt.setStatus('current')
if mibBuilder.loadTexts: sysFastHttpStatResp4xxCnt.setDescription('The number of server-side responses in range of 400 to 417 (client errors). ')
sysFastHttpStatResp5xxCnt = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 14, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFastHttpStatResp5xxCnt.setStatus('current')
if mibBuilder.loadTexts: sysFastHttpStatResp5xxCnt.setDescription('The number of server-side responses in range of 500 to 505 (server errors).')
sysFastHttpStatReqParseErrors = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 14, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFastHttpStatReqParseErrors.setStatus('current')
if mibBuilder.loadTexts: sysFastHttpStatReqParseErrors.setDescription('The number of request parse errors.')
sysFastHttpStatRespParseErrors = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 14, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFastHttpStatRespParseErrors.setStatus('current')
if mibBuilder.loadTexts: sysFastHttpStatRespParseErrors.setDescription('The number of response parse errors.')
sysFastHttpStatClientRxBad = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 14, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFastHttpStatClientRxBad.setStatus('current')
if mibBuilder.loadTexts: sysFastHttpStatClientRxBad.setDescription('The number of bad TCP segments dropped from client-side.')
sysFastHttpStatServerRxBad = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 14, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFastHttpStatServerRxBad.setStatus('current')
if mibBuilder.loadTexts: sysFastHttpStatServerRxBad.setDescription('The number of bad TCP segments dropped from server-side.')
sysFastHttpStatPipelinedReqs = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 14, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFastHttpStatPipelinedReqs.setStatus('current')
if mibBuilder.loadTexts: sysFastHttpStatPipelinedReqs.setDescription('The number of pipelined HTTP requests detected.')
sysXmlStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 15, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysXmlStatResetStats.setStatus('deprecated')
if mibBuilder.loadTexts: sysXmlStatResetStats.setDescription('Deprecated!.\n\t\tThe action to reset resettable statistics data in sysGlobalXmlStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
sysXmlStatNumErrors = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 15, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysXmlStatNumErrors.setStatus('deprecated')
if mibBuilder.loadTexts: sysXmlStatNumErrors.setDescription('Deprecated!.\n\t\tDeprecated! The total number of XML parsing errors.')
sysGeneralHwName = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 3, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGeneralHwName.setStatus('current')
if mibBuilder.loadTexts: sysGeneralHwName.setDescription('The name of the system hardware model.')
sysGeneralHwNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 3, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGeneralHwNumber.setStatus('deprecated')
if mibBuilder.loadTexts: sysGeneralHwNumber.setDescription('Deprecated! \n\t\t   The name of the system model. This is replaced by platform.marketing_name')
sysGeneralChassisSerialNum = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 3, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGeneralChassisSerialNum.setStatus('current')
if mibBuilder.loadTexts: sysGeneralChassisSerialNum.setDescription('The system serial number.')
sysIiopStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 16, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysIiopStatResetStats.setStatus('deprecated')
if mibBuilder.loadTexts: sysIiopStatResetStats.setDescription('Deprecated!.\n\t\tThe action to reset resettable statistics data in sysGlobalIiopStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
sysIiopStatNumRequests = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 16, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIiopStatNumRequests.setStatus('deprecated')
if mibBuilder.loadTexts: sysIiopStatNumRequests.setDescription('Deprecated!.\n\t\tThe total number of IIOP requests.')
sysIiopStatNumResponses = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 16, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIiopStatNumResponses.setStatus('deprecated')
if mibBuilder.loadTexts: sysIiopStatNumResponses.setDescription('Deprecated!.\n\t\tThe total number of IIOP responses.')
sysIiopStatNumCancels = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 16, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIiopStatNumCancels.setStatus('deprecated')
if mibBuilder.loadTexts: sysIiopStatNumCancels.setDescription('Deprecated!.\n\t\tThe total number of IIOP cancel messages.')
sysIiopStatNumErrors = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 16, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIiopStatNumErrors.setStatus('deprecated')
if mibBuilder.loadTexts: sysIiopStatNumErrors.setDescription('Deprecated!.\n\t\tThe total number of IIOP error messages.')
sysIiopStatNumFragments = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 16, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIiopStatNumFragments.setStatus('deprecated')
if mibBuilder.loadTexts: sysIiopStatNumFragments.setDescription('Deprecated!.\n\t\tThe total number of IIOP fragments.')
sysRtspStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 17, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysRtspStatResetStats.setStatus('current')
if mibBuilder.loadTexts: sysRtspStatResetStats.setDescription('The action to reset resettable statistics data in sysGlobalRtspStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
sysRtspStatNumRequests = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 17, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysRtspStatNumRequests.setStatus('current')
if mibBuilder.loadTexts: sysRtspStatNumRequests.setDescription('The total number of RTSP requests.')
sysRtspStatNumResponses = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 17, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysRtspStatNumResponses.setStatus('current')
if mibBuilder.loadTexts: sysRtspStatNumResponses.setDescription('The total number of RTSP responses.')
sysRtspStatNumErrors = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 17, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysRtspStatNumErrors.setStatus('current')
if mibBuilder.loadTexts: sysRtspStatNumErrors.setDescription('The total number of RTSP errors.')
sysRtspStatNumInterleavedData = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 17, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysRtspStatNumInterleavedData.setStatus('current')
if mibBuilder.loadTexts: sysRtspStatNumInterleavedData.setDescription('The total number of interleaved RTSP data packets.')
sysSctpStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 18, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSctpStatResetStats.setStatus('current')
if mibBuilder.loadTexts: sysSctpStatResetStats.setDescription('The action to reset resettable statistics data in sysGlobalSctpStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
sysSctpStatAccepts = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 18, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSctpStatAccepts.setStatus('current')
if mibBuilder.loadTexts: sysSctpStatAccepts.setDescription('The total number of accepted connections.')
sysSctpStatAcceptfails = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 18, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSctpStatAcceptfails.setStatus('current')
if mibBuilder.loadTexts: sysSctpStatAcceptfails.setDescription('The total number of not accepted responses.')
sysSctpStatConnects = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 18, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSctpStatConnects.setStatus('current')
if mibBuilder.loadTexts: sysSctpStatConnects.setDescription('The total number of established connections.')
sysSctpStatConnfails = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 18, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSctpStatConnfails.setStatus('current')
if mibBuilder.loadTexts: sysSctpStatConnfails.setDescription('The total number of connections failures.')
sysSctpStatExpires = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 18, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSctpStatExpires.setStatus('current')
if mibBuilder.loadTexts: sysSctpStatExpires.setDescription('The total number of expired connections due to idle timeout.')
sysSctpStatAbandons = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 18, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSctpStatAbandons.setStatus('current')
if mibBuilder.loadTexts: sysSctpStatAbandons.setDescription('The total number of abandoned connections due to retries/keep-alives.')
sysSctpStatRxrst = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 18, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSctpStatRxrst.setStatus('current')
if mibBuilder.loadTexts: sysSctpStatRxrst.setDescription('The total number of received Abort chunks.')
sysSctpStatRxbadsum = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 18, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSctpStatRxbadsum.setStatus('current')
if mibBuilder.loadTexts: sysSctpStatRxbadsum.setDescription('The total number of bad checksum in received packets.')
sysSctpStatRxcookie = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 18, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSctpStatRxcookie.setStatus('current')
if mibBuilder.loadTexts: sysSctpStatRxcookie.setDescription('The total number of received SCTP cookies (including bad and good ones).')
sysSctpStatRxbadcookie = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 18, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSctpStatRxbadcookie.setStatus('current')
if mibBuilder.loadTexts: sysSctpStatRxbadcookie.setDescription('The total number of received bad SCTP cookies.')
sysSctpStatAssociations = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 18, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSctpStatAssociations.setStatus('current')
if mibBuilder.loadTexts: sysSctpStatAssociations.setDescription('The current number of active SCTP associations for the specified profile.')
sysSctpStatClosing = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 18, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSctpStatClosing.setStatus('current')
if mibBuilder.loadTexts: sysSctpStatClosing.setDescription('The current number of closing SCTP associations for the specified profile.')
sysSctpStatConfirmedAddresses = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 18, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSctpStatConfirmedAddresses.setStatus('current')
if mibBuilder.loadTexts: sysSctpStatConfirmedAddresses.setDescription('The current number of confirmed remote transport addresses for the specified profile.')
sysSctpStatUnconfirmedAddresses = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 18, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSctpStatUnconfirmedAddresses.setStatus('current')
if mibBuilder.loadTexts: sysSctpStatUnconfirmedAddresses.setDescription('The current number of unconfirmed remote transport addresses for the specified profile.')
sysSctpStatActivePaths = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 18, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSctpStatActivePaths.setStatus('current')
if mibBuilder.loadTexts: sysSctpStatActivePaths.setDescription('The current number of active transport paths for the specified profile.')
sysSctpStatInactivePaths = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 18, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSctpStatInactivePaths.setStatus('current')
if mibBuilder.loadTexts: sysSctpStatInactivePaths.setDescription('The current number of inactive transport paths for the specified profile.')
sysL2ForwardStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 5, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysL2ForwardStatNumber.setStatus('current')
if mibBuilder.loadTexts: sysL2ForwardStatNumber.setDescription('The number of sysL2ForwardStat entries in the table.')
sysL2ForwardStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 5, 2, 2), )
if mibBuilder.loadTexts: sysL2ForwardStatTable.setStatus('current')
if mibBuilder.loadTexts: sysL2ForwardStatTable.setDescription('A table containing current entries (dynamic and static) of \n\t\tL2 forwarding information. An object of this type is transient.\n\t\tBy default, this table displays nothing until sysL2ForwardAttrVlan\n\t\tis set.')
sysL2ForwardStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 5, 2, 2, 1), ).setIndexNames((0, "F5-BIGIP-SYSTEM-MIB", "sysL2ForwardStatVlanName"), (0, "F5-BIGIP-SYSTEM-MIB", "sysL2ForwardStatMacAddr"))
if mibBuilder.loadTexts: sysL2ForwardStatEntry.setStatus('current')
if mibBuilder.loadTexts: sysL2ForwardStatEntry.setDescription('Columns in the sysL2ForwardStat Table')
sysL2ForwardStatVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 5, 2, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysL2ForwardStatVlanName.setStatus('current')
if mibBuilder.loadTexts: sysL2ForwardStatVlanName.setDescription('The VLAN name which static forward entity is from.')
sysL2ForwardStatMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 5, 2, 2, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysL2ForwardStatMacAddr.setStatus('current')
if mibBuilder.loadTexts: sysL2ForwardStatMacAddr.setDescription('The MAC address for the specified VLAN.')
sysL2ForwardStatIfname = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 5, 2, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysL2ForwardStatIfname.setStatus('current')
if mibBuilder.loadTexts: sysL2ForwardStatIfname.setDescription('The name of interface for the specified VLAN.')
sysL2ForwardStatIftype = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 5, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("interface", 0), ("trunk", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysL2ForwardStatIftype.setStatus('current')
if mibBuilder.loadTexts: sysL2ForwardStatIftype.setDescription('The type of interface for the specified VLAN.')
sysL2ForwardStatDynamic = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 5, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysL2ForwardStatDynamic.setStatus('current')
if mibBuilder.loadTexts: sysL2ForwardStatDynamic.setDescription('The dynamic state of the specified entity.')
sysL2ForwardAttrVlan = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 5, 3, 1), LongDisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysL2ForwardAttrVlan.setStatus('current')
if mibBuilder.loadTexts: sysL2ForwardAttrVlan.setDescription("The VLAN name which is used for querying sysL2ForwardStat.\n\t\tsysL2ForwardStat will display L2 forward statistics associated \n\t\tVLAN specified here. The default is set to 'none', which means \n\t\tsysL2ForwardStat will display nothing. If this is set to 'all', \n\t\tsysL2ForwardStat will display for all VLANs.")
sysHostMemoryTotal = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 7, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHostMemoryTotal.setStatus('current')
if mibBuilder.loadTexts: sysHostMemoryTotal.setDescription('The total host memory in bytes. Use sysHostMemoryTotalKb for gauge type.\n\t\tThis is for a single host system. For multiple host system, \n\t\tplease refer sysMultiHost table.')
sysHostMemoryUsed = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 7, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHostMemoryUsed.setStatus('current')
if mibBuilder.loadTexts: sysHostMemoryUsed.setDescription('The host memory in bytes currently in use. Use sysHostMemoryUsedKb for\n\t\tgauge type. This is for a single host system. For multiple host system, \n\t\tplease refer sysMultiHost table.')
sysHostMemoryTotalKb = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 7, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHostMemoryTotalKb.setStatus('current')
if mibBuilder.loadTexts: sysHostMemoryTotalKb.setDescription('The total host memory in Kilobytes. \n\t\tThis is for a single host system. For multiple host system, \n\t\tplease refer sysMultiHost table.')
sysHostMemoryUsedKb = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 7, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHostMemoryUsedKb.setStatus('current')
if mibBuilder.loadTexts: sysHostMemoryUsedKb.setDescription('The host memory in Kilobytes currently in use.\n\t\tThis is for a single host system. For multiple host system, \n\t\tplease refer sysMultiHost table.')
sysHostCpuNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 7, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHostCpuNumber.setStatus('deprecated')
if mibBuilder.loadTexts: sysHostCpuNumber.setDescription('Deprecated!.\n\t\tThe number of sysHostCpu entries in the table.')
sysHostCpuTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 1, 7, 2, 2), )
if mibBuilder.loadTexts: sysHostCpuTable.setStatus('deprecated')
if mibBuilder.loadTexts: sysHostCpuTable.setDescription('Deprecated! Replaced by sysMultiHostCpu table.\n\t\tA table containing entries of system CPU usage information. This is for a single host system.')
sysHostCpuEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 1, 7, 2, 2, 1), ).setIndexNames((0, "F5-BIGIP-SYSTEM-MIB", "sysHostCpuIndex"))
if mibBuilder.loadTexts: sysHostCpuEntry.setStatus('deprecated')
if mibBuilder.loadTexts: sysHostCpuEntry.setDescription('Columns in the sysHostCpu Table')
sysHostCpuIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 7, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHostCpuIndex.setStatus('deprecated')
if mibBuilder.loadTexts: sysHostCpuIndex.setDescription('Deprecated! Replaced by sysMultiHostCpu table.\n\t\t The index of a CPU in this CPU table.')
sysHostCpuId = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 7, 2, 2, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHostCpuId.setStatus('deprecated')
if mibBuilder.loadTexts: sysHostCpuId.setDescription('Deprecated! Replaced by sysMultiHostCpu table.\n\t\tThe ID of a processor.')
sysHostCpuUser = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 7, 2, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHostCpuUser.setStatus('deprecated')
if mibBuilder.loadTexts: sysHostCpuUser.setDescription('Deprecated! Replaced by sysMultiHostCpu table.\n\t\tThe time spent by the specified processor in user context.')
sysHostCpuNice = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 7, 2, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHostCpuNice.setStatus('deprecated')
if mibBuilder.loadTexts: sysHostCpuNice.setDescription('Deprecated! Replaced by sysMultiHostCpu table.\n\t\tThe time spent by the specified processor running niced processes.')
sysHostCpuSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 7, 2, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHostCpuSystem.setStatus('deprecated')
if mibBuilder.loadTexts: sysHostCpuSystem.setDescription('Deprecated! Replaced by sysMultiHostCpu table.\n\t\tThe time spent by the specified processor servicing system calls.')
sysHostCpuIdle = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 7, 2, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHostCpuIdle.setStatus('deprecated')
if mibBuilder.loadTexts: sysHostCpuIdle.setDescription('Deprecated! Replaced by sysMultiHostCpu table.\n\t\tThe time spent by the specified processor doing nothing.')
sysHostCpuIrq = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 7, 2, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHostCpuIrq.setStatus('deprecated')
if mibBuilder.loadTexts: sysHostCpuIrq.setDescription('Deprecated! Replaced by sysMultiHostCpu table.\n\t\tThe time spent by the specified processor servicing hardware interrupts.')
sysHostCpuSoftirq = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 7, 2, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHostCpuSoftirq.setStatus('deprecated')
if mibBuilder.loadTexts: sysHostCpuSoftirq.setDescription('Deprecated! Replaced by sysMultiHostCpu table.\n\t\tThe time spent by the specified processor servicing soft interrupts.')
sysHostCpuIowait = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 7, 2, 2, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHostCpuIowait.setStatus('deprecated')
if mibBuilder.loadTexts: sysHostCpuIowait.setDescription('Deprecated! Replaced by sysMultiHostCpu table.\n\t\tThe time spent by the specified processor waiting for external I/O to complete.')
sysHostDiskNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 7, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHostDiskNumber.setStatus('current')
if mibBuilder.loadTexts: sysHostDiskNumber.setDescription('The number of sysHostDisk entries in the table.')
sysHostDiskTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 1, 7, 3, 2), )
if mibBuilder.loadTexts: sysHostDiskTable.setStatus('current')
if mibBuilder.loadTexts: sysHostDiskTable.setDescription('A table containing entries of system disk usage information.')
sysHostDiskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 1, 7, 3, 2, 1), ).setIndexNames((0, "F5-BIGIP-SYSTEM-MIB", "sysHostDiskPartition"))
if mibBuilder.loadTexts: sysHostDiskEntry.setStatus('current')
if mibBuilder.loadTexts: sysHostDiskEntry.setDescription('Columns in the sysHostDisk Table')
sysHostDiskPartition = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 7, 3, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHostDiskPartition.setStatus('current')
if mibBuilder.loadTexts: sysHostDiskPartition.setDescription('The name of a disk partition.')
sysHostDiskBlockSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 7, 3, 2, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHostDiskBlockSize.setStatus('current')
if mibBuilder.loadTexts: sysHostDiskBlockSize.setDescription('The number of bytes in the specified partition.')
sysHostDiskTotalBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 7, 3, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHostDiskTotalBlocks.setStatus('current')
if mibBuilder.loadTexts: sysHostDiskTotalBlocks.setDescription('The number of total blocks in the specified partition.')
sysHostDiskFreeBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 7, 3, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHostDiskFreeBlocks.setStatus('current')
if mibBuilder.loadTexts: sysHostDiskFreeBlocks.setDescription('The number of free blocks in the specified partition.')
sysHostDiskTotalNodes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 7, 3, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHostDiskTotalNodes.setStatus('current')
if mibBuilder.loadTexts: sysHostDiskTotalNodes.setDescription('The number of total file nodes in the specified partition.')
sysHostDiskFreeNodes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 7, 3, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHostDiskFreeNodes.setStatus('current')
if mibBuilder.loadTexts: sysHostDiskFreeNodes.setDescription('The number of free file nodes in the specified partition.')
sysSelfPortDefNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 9, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSelfPortDefNumber.setStatus('current')
if mibBuilder.loadTexts: sysSelfPortDefNumber.setDescription('The number of sysSelfPortDefault entries in the table.')
sysSelfPortDefTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 9, 2, 2), )
if mibBuilder.loadTexts: sysSelfPortDefTable.setStatus('current')
if mibBuilder.loadTexts: sysSelfPortDefTable.setDescription('A table containing information of default protocol/service access list.')
sysSelfPortDefEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 9, 2, 2, 1), ).setIndexNames((0, "F5-BIGIP-SYSTEM-MIB", "sysSelfPortDefAllowName"), (0, "F5-BIGIP-SYSTEM-MIB", "sysSelfPortDefProtocol"), (0, "F5-BIGIP-SYSTEM-MIB", "sysSelfPortDefPort"))
if mibBuilder.loadTexts: sysSelfPortDefEntry.setStatus('current')
if mibBuilder.loadTexts: sysSelfPortDefEntry.setDescription('Columns in the sysSelfPortDef Table')
sysSelfPortDefProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 9, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSelfPortDefProtocol.setStatus('current')
if mibBuilder.loadTexts: sysSelfPortDefProtocol.setDescription("The default protocol allowed.\n\t\t'0' means allowing all protocols.")
sysSelfPortDefPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 9, 2, 2, 1, 2), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSelfPortDefPort.setStatus('current')
if mibBuilder.loadTexts: sysSelfPortDefPort.setDescription("The default service allowed.\n\t\t'0' means allowing all services for the specified protocol(s).")
sysSelfPortDefAllowName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 9, 2, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSelfPortDefAllowName.setStatus('current')
if mibBuilder.loadTexts: sysSelfPortDefAllowName.setDescription('The allow name of self port default.')
sysIntfMediaSfpNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIntfMediaSfpNumber.setStatus('current')
if mibBuilder.loadTexts: sysIntfMediaSfpNumber.setDescription('The number of sysInterfaceMediaSfp entries in the table.')
sysIntfMediaSfpTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 6, 2), )
if mibBuilder.loadTexts: sysIntfMediaSfpTable.setStatus('current')
if mibBuilder.loadTexts: sysIntfMediaSfpTable.setDescription('A table containing information of the SFP media options of the interfaces.')
sysIntfMediaSfpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 6, 2, 1), ).setIndexNames((0, "F5-BIGIP-SYSTEM-MIB", "sysIntfMediaSfpName"), (0, "F5-BIGIP-SYSTEM-MIB", "sysIntfMediaSfpIndex"))
if mibBuilder.loadTexts: sysIntfMediaSfpEntry.setStatus('current')
if mibBuilder.loadTexts: sysIntfMediaSfpEntry.setDescription('Columns in the sysIntfMediaSfp Table')
sysIntfMediaSfpName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 6, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIntfMediaSfpName.setStatus('current')
if mibBuilder.loadTexts: sysIntfMediaSfpName.setDescription('The name of an interface.')
sysIntfMediaSfpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIntfMediaSfpIndex.setStatus('current')
if mibBuilder.loadTexts: sysIntfMediaSfpIndex.setDescription('The index of the SFP media option for the specified interface.')
sysIntfMediaSfpType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 6, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 10, 13, 14, 16, 18, 19, 20, 21, 22, 23, 24, 25))).clone(namedValues=NamedValues(("media10THdx", 1), ("media10TFdx", 2), ("media100TxHdx", 3), ("media100TxFdx", 4), ("media1000THdx", 5), ("media1000TFdx", 6), ("media10000TFdx", 10), ("mediaAuto", 13), ("mediaInternal", 14), ("media1000SxFdx", 16), ("media1000LxFdx", 18), ("media10000SrFdx", 19), ("media10000LrFdx", 20), ("media10000ErFdx", 21), ("media1000CxFdx", 22), ("media10000SfpPlusCuFdx", 23), ("media40000Sr4Fdx", 24), ("media40000Lr4Fdx", 25)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIntfMediaSfpType.setStatus('current')
if mibBuilder.loadTexts: sysIntfMediaSfpType.setDescription('The media option for SFP media of the specified interface.\n\t\tmedia10THdx - 10BaseT:RJ45, half duplex,\n\t\tmedia10TFdx - 10BaseT:RJ45, full duplex,\n\t\tmedia100TxHdx - 100BaseTX:RJ45, half duplex,\n\t\tmedia100TxFdx - 100BaseTX:RJ45, full duplex,\n\t\tmedia1000THdx - 1000BaseT - gigabit ethernet RJ45, half duplex,\n\t\tmedia1000TFdx - 1000BaseTX:gigabit ethernet RJ45, full duplex,\n\t\tmedia10000TFdx - 10000BaseT - 10gig Ethernet - Copper, full duplex,\n\t\tmediaAuto - autoselect best media,\n\t\tmediaInternal - this media option is only used internally,\n\t\tmedia1000SxFdx - 1000BaseSX: gigabit over fiber - Shortwave, full duplex,\n\t\tmedia1000LxFdx - 1000BaseLX - gigabit over fiber - Longwave, half duplex,\n\t\tmedia10000SrFdx - 10GBase-SR - Shortwave 850nm multimode fiber - 300m max - serial 64B/66B encoding, full duplex,\n\t\tmedia10000LrFdx - 10GBase-LR - Longwave 1310nm single mode fiber - 10km max - serial 64B/66B encoding, full duplex,\n\t\tmedia10000ErFdx - 10GBase-ER - Extra longwave 1550nm single mode fiber - 40km max - serial 64B/66B encoding, full duplex,\n\t\tmedia1000CxFdx - 1000BaseCX: Copper, full duplex,\n\t\tmedia10000SfpPlusCuFdx - 10G SFP+: Copper, full duplex,\n\t\tmedia40000Sr4Fdx - 40GBase: fiber, Shortwave (850nm), full duplex,\n\t\tmedia40000Lr4Fdx - 40GBase: fiber, Longwave (1310nm), full duplex.')
sysPvaStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 8, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysPvaStatResetStats.setStatus('current')
if mibBuilder.loadTexts: sysPvaStatResetStats.setDescription('The action to reset resettable statistics data in sysPvaStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
sysPvaStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPvaStatNumber.setStatus('current')
if mibBuilder.loadTexts: sysPvaStatNumber.setDescription('The number of sysPvaStat entries in the table.')
sysPvaStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 1, 8, 1, 3), )
if mibBuilder.loadTexts: sysPvaStatTable.setStatus('current')
if mibBuilder.loadTexts: sysPvaStatTable.setDescription('A table containing statistics information of the Packet Velocity Acceleration Engine (PVA) on the system.')
sysPvaStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 1, 8, 1, 3, 1), ).setIndexNames((0, "F5-BIGIP-SYSTEM-MIB", "sysPvaStatPvaId"))
if mibBuilder.loadTexts: sysPvaStatEntry.setStatus('current')
if mibBuilder.loadTexts: sysPvaStatEntry.setDescription('Columns in the sysPvaStat Table')
sysPvaStatPvaId = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 8, 1, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPvaStatPvaId.setStatus('current')
if mibBuilder.loadTexts: sysPvaStatPvaId.setDescription('The ID of PVA (Packet Velocity Acceleration Engine) on the system.')
sysPvaStatClientPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 8, 1, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPvaStatClientPktsIn.setStatus('current')
if mibBuilder.loadTexts: sysPvaStatClientPktsIn.setDescription('The number of hardware accelerated packets received \n\t\tby the system from client-side.')
sysPvaStatClientBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 8, 1, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPvaStatClientBytesIn.setStatus('current')
if mibBuilder.loadTexts: sysPvaStatClientBytesIn.setDescription('The number of hardware accelerated bytes received \n\t\tby the system from client-side.')
sysPvaStatClientPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 8, 1, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPvaStatClientPktsOut.setStatus('current')
if mibBuilder.loadTexts: sysPvaStatClientPktsOut.setDescription('The number of hardware accelerated packets sent to client-side from the system.')
sysPvaStatClientBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 8, 1, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPvaStatClientBytesOut.setStatus('current')
if mibBuilder.loadTexts: sysPvaStatClientBytesOut.setDescription('The number of hardware accelerated bytes sent to client-side from the system.')
sysPvaStatClientMaxConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 8, 1, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPvaStatClientMaxConns.setStatus('current')
if mibBuilder.loadTexts: sysPvaStatClientMaxConns.setDescription('The maximum hardware accelerated connections from client-side to the system.')
sysPvaStatClientTotConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 8, 1, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPvaStatClientTotConns.setStatus('current')
if mibBuilder.loadTexts: sysPvaStatClientTotConns.setDescription('The total hardware accelerated connections from client-side to the system.')
sysPvaStatClientCurConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 8, 1, 3, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPvaStatClientCurConns.setStatus('current')
if mibBuilder.loadTexts: sysPvaStatClientCurConns.setDescription('The current hardware accelerated connections from client-side to the system.')
sysPvaStatServerPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 8, 1, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPvaStatServerPktsIn.setStatus('current')
if mibBuilder.loadTexts: sysPvaStatServerPktsIn.setDescription('The number of hardware accelerated packets received \n\t\tby the system from server-side.')
sysPvaStatServerBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 8, 1, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPvaStatServerBytesIn.setStatus('current')
if mibBuilder.loadTexts: sysPvaStatServerBytesIn.setDescription('The number of hardware accelerated bytes received \n\t\tby the system from server-side.')
sysPvaStatServerPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 8, 1, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPvaStatServerPktsOut.setStatus('current')
if mibBuilder.loadTexts: sysPvaStatServerPktsOut.setDescription('The number of hardware accelerated packets sent to server-side from the system.')
sysPvaStatServerBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 8, 1, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPvaStatServerBytesOut.setStatus('current')
if mibBuilder.loadTexts: sysPvaStatServerBytesOut.setDescription('The number of hardware accelerated bytes sent to server-side from the system.')
sysPvaStatServerMaxConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 8, 1, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPvaStatServerMaxConns.setStatus('current')
if mibBuilder.loadTexts: sysPvaStatServerMaxConns.setDescription('The maximum hardware accelerated connections from server-side to the system.')
sysPvaStatServerTotConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 8, 1, 3, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPvaStatServerTotConns.setStatus('current')
if mibBuilder.loadTexts: sysPvaStatServerTotConns.setDescription('The total hardware accelerated connections from server-side to the system.')
sysPvaStatServerCurConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 8, 1, 3, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPvaStatServerCurConns.setStatus('current')
if mibBuilder.loadTexts: sysPvaStatServerCurConns.setDescription('The current hardware accelerated connections from server-side to the system.')
sysPvaStatTotAssistConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 8, 1, 3, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPvaStatTotAssistConns.setStatus('current')
if mibBuilder.loadTexts: sysPvaStatTotAssistConns.setDescription('The total number of the partially hardware accelerated connections on the system.')
sysPvaStatCurAssistConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 8, 1, 3, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPvaStatCurAssistConns.setStatus('current')
if mibBuilder.loadTexts: sysPvaStatCurAssistConns.setDescription('The current number of the partially hardware accelerated connections on the system.')
sysPvaStatHardSyncookieGen = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 8, 1, 3, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPvaStatHardSyncookieGen.setStatus('current')
if mibBuilder.loadTexts: sysPvaStatHardSyncookieGen.setDescription('The number of hardware SYN cookies are generated on the system.')
sysPvaStatHardSyncookieDet = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 8, 1, 3, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPvaStatHardSyncookieDet.setStatus('current')
if mibBuilder.loadTexts: sysPvaStatHardSyncookieDet.setDescription('The number of hardware SYN cookies are detected on the system.')
sysTmmStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 8, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTmmStatResetStats.setStatus('current')
if mibBuilder.loadTexts: sysTmmStatResetStats.setDescription('The action to reset resettable statistics data in sysTmmStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
sysTmmStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 8, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTmmStatNumber.setStatus('current')
if mibBuilder.loadTexts: sysTmmStatNumber.setDescription('The number of sysTmmStat entries in the table.')
sysTmmStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 1, 8, 2, 3), )
if mibBuilder.loadTexts: sysTmmStatTable.setStatus('current')
if mibBuilder.loadTexts: sysTmmStatTable.setDescription('A table containing statistics information of the Traffic Management Module (TMM)\n\t        presented per TMM ID (TmmId).')
sysTmmStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 1, 8, 2, 3, 1), ).setIndexNames((0, "F5-BIGIP-SYSTEM-MIB", "sysTmmStatTmmId"))
if mibBuilder.loadTexts: sysTmmStatEntry.setStatus('current')
if mibBuilder.loadTexts: sysTmmStatEntry.setDescription('Columns in the sysTmmStat Table')
sysTmmStatTmmId = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 8, 2, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTmmStatTmmId.setStatus('current')
if mibBuilder.loadTexts: sysTmmStatTmmId.setDescription("The key for TMM (Traffic Management Module) access on the system. \n\t\tThis is a concatenation of the slot and cpuid. ie: '1.0'.")
sysTmmStatTmmPid = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 8, 2, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTmmStatTmmPid.setStatus('current')
if mibBuilder.loadTexts: sysTmmStatTmmPid.setDescription('The process ID of the specified TMM (Traffic Management Module) on the system.')
sysTmmStatCpu = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 8, 2, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTmmStatCpu.setStatus('current')
if mibBuilder.loadTexts: sysTmmStatCpu.setDescription('An index of CPU on which the specified TMM (Traffic Management Module) is running on the system.')
sysTmmStatTmid = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 8, 2, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTmmStatTmid.setStatus('current')
if mibBuilder.loadTexts: sysTmmStatTmid.setDescription('An index of a running TMM (Traffic Management Module) on the system.')
sysTmmStatNpus = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 8, 2, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTmmStatNpus.setStatus('current')
if mibBuilder.loadTexts: sysTmmStatNpus.setDescription('The number of TMMs (Traffic Management Module) on the system.')
sysTmmStatClientPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 8, 2, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTmmStatClientPktsIn.setStatus('current')
if mibBuilder.loadTexts: sysTmmStatClientPktsIn.setDescription('The number of packets received by the system from client-side.')
sysTmmStatClientBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 8, 2, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTmmStatClientBytesIn.setStatus('current')
if mibBuilder.loadTexts: sysTmmStatClientBytesIn.setDescription('The number of bytes received by the system from client-side.')
sysTmmStatClientPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 8, 2, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTmmStatClientPktsOut.setStatus('current')
if mibBuilder.loadTexts: sysTmmStatClientPktsOut.setDescription('The number of packets sent to client-side from the system.')
sysTmmStatClientBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 8, 2, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTmmStatClientBytesOut.setStatus('current')
if mibBuilder.loadTexts: sysTmmStatClientBytesOut.setDescription('The number of bytes sent to client-side from the system.')
sysTmmStatClientMaxConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 8, 2, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTmmStatClientMaxConns.setStatus('current')
if mibBuilder.loadTexts: sysTmmStatClientMaxConns.setDescription('The maximum connections from client-side to the system.')
sysTmmStatClientTotConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 8, 2, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTmmStatClientTotConns.setStatus('current')
if mibBuilder.loadTexts: sysTmmStatClientTotConns.setDescription('The total connections from client-side to the system.')
sysTmmStatClientCurConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 8, 2, 3, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTmmStatClientCurConns.setStatus('current')
if mibBuilder.loadTexts: sysTmmStatClientCurConns.setDescription('The current connections from client-side to the system.')
sysTmmStatServerPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 8, 2, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTmmStatServerPktsIn.setStatus('current')
if mibBuilder.loadTexts: sysTmmStatServerPktsIn.setDescription('The number of packets received by the system from server-side.')
sysTmmStatServerBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 8, 2, 3, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTmmStatServerBytesIn.setStatus('current')
if mibBuilder.loadTexts: sysTmmStatServerBytesIn.setDescription('The number of bytes received by the system from server-side.')
sysTmmStatServerPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 8, 2, 3, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTmmStatServerPktsOut.setStatus('current')
if mibBuilder.loadTexts: sysTmmStatServerPktsOut.setDescription('The number of packets sent to server-side from the system.')
sysTmmStatServerBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 8, 2, 3, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTmmStatServerBytesOut.setStatus('current')
if mibBuilder.loadTexts: sysTmmStatServerBytesOut.setDescription('The number of bytes sent to server-side from the system.')
sysTmmStatServerMaxConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 8, 2, 3, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTmmStatServerMaxConns.setStatus('current')
if mibBuilder.loadTexts: sysTmmStatServerMaxConns.setDescription('The maximum connections from server-side to the system.')
sysTmmStatServerTotConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 8, 2, 3, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTmmStatServerTotConns.setStatus('current')
if mibBuilder.loadTexts: sysTmmStatServerTotConns.setDescription('The total connections from server-side to the system.')
sysTmmStatServerCurConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 8, 2, 3, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTmmStatServerCurConns.setStatus('current')
if mibBuilder.loadTexts: sysTmmStatServerCurConns.setDescription('The current connections from server-side to the system.')
sysTmmStatMaintenanceModeDeny = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 8, 2, 3, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTmmStatMaintenanceModeDeny.setStatus('current')
if mibBuilder.loadTexts: sysTmmStatMaintenanceModeDeny.setDescription('The connection requests rejected because the virtual\n\t\tserver was in maintenance mode. ')
sysTmmStatMaxConnVirtualAddrDeny = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 8, 2, 3, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTmmStatMaxConnVirtualAddrDeny.setStatus('current')
if mibBuilder.loadTexts: sysTmmStatMaxConnVirtualAddrDeny.setDescription('The connection requests rejected because they exceeded\n\t\tthe connection limit for a virtual server address.')
sysTmmStatMaxConnVirtualPathDeny = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 8, 2, 3, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTmmStatMaxConnVirtualPathDeny.setStatus('current')
if mibBuilder.loadTexts: sysTmmStatMaxConnVirtualPathDeny.setDescription('The connection requests rejected because they exceeded\n\t\tthe connection limit for a virtual server (IP:port).')
sysTmmStatVirtualServerNonSynDeny = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 8, 2, 3, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTmmStatVirtualServerNonSynDeny.setStatus('current')
if mibBuilder.loadTexts: sysTmmStatVirtualServerNonSynDeny.setDescription('The packets that are not connection requests and are \n\t\tdestined for a virtual server that has no connection \n\t\tfor the client address.')
sysTmmStatNoHandlerDeny = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 8, 2, 3, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTmmStatNoHandlerDeny.setStatus('current')
if mibBuilder.loadTexts: sysTmmStatNoHandlerDeny.setDescription('The incoming packets that could not be processed by a\n\t\ta virtual server, NAT, or SNAT.')
sysTmmStatLicenseDeny = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 8, 2, 3, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTmmStatLicenseDeny.setStatus('current')
if mibBuilder.loadTexts: sysTmmStatLicenseDeny.setDescription('The packets which were dropped due to exceeding licensing \n\t\tlimitations.')
sysTmmStatCmpConnRedirected = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 8, 2, 3, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTmmStatCmpConnRedirected.setStatus('current')
if mibBuilder.loadTexts: sysTmmStatCmpConnRedirected.setDescription('The connections that were redirected to a different TMM in the cluster.')
sysTmmStatConnectionMemoryErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 8, 2, 3, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTmmStatConnectionMemoryErrors.setStatus('current')
if mibBuilder.loadTexts: sysTmmStatConnectionMemoryErrors.setDescription('The connections could not be created because memory was not available.')
sysTmmStatTmTotalCycles = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 8, 2, 3, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTmmStatTmTotalCycles.setStatus('deprecated')
if mibBuilder.loadTexts: sysTmmStatTmTotalCycles.setDescription('Deprecated! Please use the provided tmm usage ratios.\n\t\t\tTraffic management CPU usage. The total cycles spent in traffic management.')
sysTmmStatTmIdleCycles = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 8, 2, 3, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTmmStatTmIdleCycles.setStatus('deprecated')
if mibBuilder.loadTexts: sysTmmStatTmIdleCycles.setDescription('Deprecated! Please use the provided tmm usage ratios.\n\t\tTraffic management CPU usage. The cycles spent polling with no traffic.')
sysTmmStatTmSleepCycles = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 8, 2, 3, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTmmStatTmSleepCycles.setStatus('deprecated')
if mibBuilder.loadTexts: sysTmmStatTmSleepCycles.setDescription('Deprecated! Please use the provided tmm usage ratios.\n\t\tTraffic management CPU usage. The cycles yielded (uniprocessor only).')
sysTmmStatMemoryTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 8, 2, 3, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTmmStatMemoryTotal.setStatus('current')
if mibBuilder.loadTexts: sysTmmStatMemoryTotal.setDescription('The total memory available in bytes for TMM (Traffic Management Module).\n\t        Use sysTmmStatMemoryTotalKb for gauge type.')
sysTmmStatMemoryUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 8, 2, 3, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTmmStatMemoryUsed.setStatus('current')
if mibBuilder.loadTexts: sysTmmStatMemoryUsed.setDescription('The memory in use in bytes for TMM (Traffic Management Module).\n\t        Use sysTmmStatMemoryUsedKb. for gauge type')
sysTmmStatDroppedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 8, 2, 3, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTmmStatDroppedPackets.setStatus('current')
if mibBuilder.loadTexts: sysTmmStatDroppedPackets.setDescription('The total dropped packets.')
sysTmmStatIncomingPacketErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 8, 2, 3, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTmmStatIncomingPacketErrors.setStatus('current')
if mibBuilder.loadTexts: sysTmmStatIncomingPacketErrors.setDescription('The total incoming packet errors for the system.')
sysTmmStatOutgoingPacketErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 8, 2, 3, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTmmStatOutgoingPacketErrors.setStatus('current')
if mibBuilder.loadTexts: sysTmmStatOutgoingPacketErrors.setDescription('The total outgoing packet errors for the system.')
sysTmmStatHttpRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 8, 2, 3, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTmmStatHttpRequests.setStatus('current')
if mibBuilder.loadTexts: sysTmmStatHttpRequests.setDescription('The total number of HTTP requests to the system.')
sysTmmStatTmUsageRatio5s = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 8, 2, 3, 1, 37), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTmmStatTmUsageRatio5s.setStatus('current')
if mibBuilder.loadTexts: sysTmmStatTmUsageRatio5s.setDescription('The percentage of time the TMM was busy over the last 5 seconds.')
sysTmmStatTmUsageRatio1m = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 8, 2, 3, 1, 38), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTmmStatTmUsageRatio1m.setStatus('current')
if mibBuilder.loadTexts: sysTmmStatTmUsageRatio1m.setDescription('The percentage of time the TMM was busy over the last 1 minute.')
sysTmmStatTmUsageRatio5m = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 8, 2, 3, 1, 39), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTmmStatTmUsageRatio5m.setStatus('current')
if mibBuilder.loadTexts: sysTmmStatTmUsageRatio5m.setDescription('The percentage of time the TMM was busy over the last 5 minutes.')
sysTmmStatSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 8, 2, 3, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTmmStatSlotId.setStatus('current')
if mibBuilder.loadTexts: sysTmmStatSlotId.setDescription('The index of the slot where the TMM is running.')
sysTmmStatMemoryTotalKb = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 8, 2, 3, 1, 41), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTmmStatMemoryTotalKb.setStatus('current')
if mibBuilder.loadTexts: sysTmmStatMemoryTotalKb.setDescription('The total memory available in Kilobytes for TMM (Traffic Management Module).')
sysTmmStatMemoryUsedKb = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 8, 2, 3, 1, 42), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTmmStatMemoryUsedKb.setStatus('current')
if mibBuilder.loadTexts: sysTmmStatMemoryUsedKb.setDescription('The memory in use in Kilobytes for TMM (Traffic Management Module).')
sysTmmStatClientEvictedConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 8, 2, 3, 1, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTmmStatClientEvictedConns.setStatus('current')
if mibBuilder.loadTexts: sysTmmStatClientEvictedConns.setDescription('The number of client-side connections that have been evicted from the system.')
sysTmmStatClientSlowKilled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 8, 2, 3, 1, 44), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTmmStatClientSlowKilled.setStatus('current')
if mibBuilder.loadTexts: sysTmmStatClientSlowKilled.setDescription('The number of slow client-side connections that have been killed from the system.')
sysTmmStatServerEvictedConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 8, 2, 3, 1, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTmmStatServerEvictedConns.setStatus('current')
if mibBuilder.loadTexts: sysTmmStatServerEvictedConns.setDescription('The number of server-side connections that have been evicted from the system.')
sysTmmStatServerSlowKilled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 8, 2, 3, 1, 46), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTmmStatServerSlowKilled.setStatus('current')
if mibBuilder.loadTexts: sysTmmStatServerSlowKilled.setDescription('The number of slow server-side connections that have been killed from the system.')
sysTmmStatSwSyncookies = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 8, 2, 3, 1, 47), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTmmStatSwSyncookies.setStatus('current')
if mibBuilder.loadTexts: sysTmmStatSwSyncookies.setDescription('The number of syn cookies received.')
sysTmmStatSwSyncookieAccepts = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 8, 2, 3, 1, 48), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTmmStatSwSyncookieAccepts.setStatus('current')
if mibBuilder.loadTexts: sysTmmStatSwSyncookieAccepts.setDescription('The number of syn cookies received that were accepted.')
sysTmmStatSyncookieRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 8, 2, 3, 1, 49), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTmmStatSyncookieRejects.setStatus('current')
if mibBuilder.loadTexts: sysTmmStatSyncookieRejects.setDescription('The number of syn cookies received that were rejected.')
sysTmmStatHwSyncookies = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 8, 2, 3, 1, 50), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTmmStatHwSyncookies.setStatus('current')
if mibBuilder.loadTexts: sysTmmStatHwSyncookies.setDescription('The number of hardware syn cookies received.')
sysTmmStatHwSyncookieAccepts = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 8, 2, 3, 1, 51), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTmmStatHwSyncookieAccepts.setStatus('current')
if mibBuilder.loadTexts: sysTmmStatHwSyncookieAccepts.setDescription('The number of hardware syn cookies received that were accepted.')
sysTmmStatWlSyncookieHits = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 8, 2, 3, 1, 52), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTmmStatWlSyncookieHits.setStatus('current')
if mibBuilder.loadTexts: sysTmmStatWlSyncookieHits.setDescription('The number of whitelist syn cookie hits.')
sysTmmStatWlSyncookieAccepts = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 8, 2, 3, 1, 53), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTmmStatWlSyncookieAccepts.setStatus('current')
if mibBuilder.loadTexts: sysTmmStatWlSyncookieAccepts.setDescription('The number of whitelist syn cookies received that were accepted.')
sysTmmStatWlSyncookieRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 8, 2, 3, 1, 54), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTmmStatWlSyncookieRejects.setStatus('current')
if mibBuilder.loadTexts: sysTmmStatWlSyncookieRejects.setDescription('The number of whitelist syn cookies received that were rejected.')
sysTmmStatConnectionFlowMiss = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 8, 2, 3, 1, 55), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTmmStatConnectionFlowMiss.setStatus('current')
if mibBuilder.loadTexts: sysTmmStatConnectionFlowMiss.setDescription('The number of TCP packets discarded due to the lack of an associated\n\t        flow.')
sysMultiHostNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 7, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMultiHostNumber.setStatus('current')
if mibBuilder.loadTexts: sysMultiHostNumber.setDescription('The number of sysMultiHost entries in the table.')
sysMultiHostTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 1, 7, 4, 2), )
if mibBuilder.loadTexts: sysMultiHostTable.setStatus('current')
if mibBuilder.loadTexts: sysMultiHostTable.setDescription('A table containing system statistics information of the host, such as memory usage, cpu type, etc.')
sysMultiHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 1, 7, 4, 2, 1), ).setIndexNames((0, "F5-BIGIP-SYSTEM-MIB", "sysMultiHostHostId"))
if mibBuilder.loadTexts: sysMultiHostEntry.setStatus('current')
if mibBuilder.loadTexts: sysMultiHostEntry.setDescription('Columns in the sysMultiHost Table')
sysMultiHostHostId = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 7, 4, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMultiHostHostId.setStatus('current')
if mibBuilder.loadTexts: sysMultiHostHostId.setDescription('The host identifier.')
sysMultiHostTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 7, 4, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMultiHostTotal.setStatus('current')
if mibBuilder.loadTexts: sysMultiHostTotal.setDescription('The total host memory in bytes for the specified host.\n\t        Use sysMultiHostTotalKb for gauge type.')
sysMultiHostUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 7, 4, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMultiHostUsed.setStatus('current')
if mibBuilder.loadTexts: sysMultiHostUsed.setDescription('The host memory in bytes currently in use for the specified host.\n\t        Use sysMultiHostUsedKb for gauge type.')
sysMultiHostMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 7, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("modeup", 0), ("modesmp", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMultiHostMode.setStatus('deprecated')
if mibBuilder.loadTexts: sysMultiHostMode.setDescription('Deprecated! This used to reference mode processor was running in.')
sysMultiHostCpuCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 7, 4, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMultiHostCpuCount.setStatus('current')
if mibBuilder.loadTexts: sysMultiHostCpuCount.setDescription('The number of CPUs for the specified host.')
sysMultiHostActiveCpuCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 7, 4, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMultiHostActiveCpuCount.setStatus('current')
if mibBuilder.loadTexts: sysMultiHostActiveCpuCount.setDescription('The number of active CPUs for the specified host.')
sysMultiHostOtherMemoryTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 7, 4, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMultiHostOtherMemoryTotal.setStatus('current')
if mibBuilder.loadTexts: sysMultiHostOtherMemoryTotal.setDescription('The total other non-TMM memory in bytes for the specified host.\n\t        Use sysMultiHostOtherMemoryTotalKb for gauge type.')
sysMultiHostOtherMemoryUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 7, 4, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMultiHostOtherMemoryUsed.setStatus('current')
if mibBuilder.loadTexts: sysMultiHostOtherMemoryUsed.setDescription('The other non-TMM memory in bytes currently in use for the specified host.\n\t        Use sysMultiHostOtherMemoryUsedKb for gauge type.')
sysMultiHostSwapTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 7, 4, 2, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMultiHostSwapTotal.setStatus('current')
if mibBuilder.loadTexts: sysMultiHostSwapTotal.setDescription('The total swap in bytes for the specified host.\n\t        Use sysMultiHostSwapTotalKb for gauge type.')
sysMultiHostSwapUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 7, 4, 2, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMultiHostSwapUsed.setStatus('current')
if mibBuilder.loadTexts: sysMultiHostSwapUsed.setDescription('The swap in bytes currently in use for the specified host.\n\t        Use sysMultiHostSwapUsedKb for gauge type.')
sysMultiHostTotalKb = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 7, 4, 2, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMultiHostTotalKb.setStatus('current')
if mibBuilder.loadTexts: sysMultiHostTotalKb.setDescription('The total host memory in Kilobytes for the specified host.')
sysMultiHostUsedKb = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 7, 4, 2, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMultiHostUsedKb.setStatus('current')
if mibBuilder.loadTexts: sysMultiHostUsedKb.setDescription('The host memory in Kilobytes currently in use for the specified host.')
sysMultiHostOtherMemoryTotalKb = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 7, 4, 2, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMultiHostOtherMemoryTotalKb.setStatus('current')
if mibBuilder.loadTexts: sysMultiHostOtherMemoryTotalKb.setDescription('The total other non-TMM memory in Kilobytes for the specified host.')
sysMultiHostOtherMemoryUsedKb = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 7, 4, 2, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMultiHostOtherMemoryUsedKb.setStatus('current')
if mibBuilder.loadTexts: sysMultiHostOtherMemoryUsedKb.setDescription('The other non-TMM memory in Kilobytes currently in use for the specified host.')
sysMultiHostSwapTotalKb = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 7, 4, 2, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMultiHostSwapTotalKb.setStatus('current')
if mibBuilder.loadTexts: sysMultiHostSwapTotalKb.setDescription('The total swap in Kilobytes for the specified host.')
sysMultiHostSwapUsedKb = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 7, 4, 2, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMultiHostSwapUsedKb.setStatus('current')
if mibBuilder.loadTexts: sysMultiHostSwapUsedKb.setDescription('The swap in Kilobytes currently in use for the specified host.')
sysMultiHostCpuNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 7, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMultiHostCpuNumber.setStatus('current')
if mibBuilder.loadTexts: sysMultiHostCpuNumber.setDescription('The number of sysMultiHostCpu entries in the table.')
sysMultiHostCpuTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 1, 7, 5, 2), )
if mibBuilder.loadTexts: sysMultiHostCpuTable.setStatus('current')
if mibBuilder.loadTexts: sysMultiHostCpuTable.setDescription('A table containing entries of system CPU usage information for a system.')
sysMultiHostCpuEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 1, 7, 5, 2, 1), ).setIndexNames((0, "F5-BIGIP-SYSTEM-MIB", "sysMultiHostCpuHostId"), (0, "F5-BIGIP-SYSTEM-MIB", "sysMultiHostCpuIndex"))
if mibBuilder.loadTexts: sysMultiHostCpuEntry.setStatus('current')
if mibBuilder.loadTexts: sysMultiHostCpuEntry.setDescription('Columns in the sysMultiHostCpu Table')
sysMultiHostCpuHostId = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 7, 5, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMultiHostCpuHostId.setStatus('current')
if mibBuilder.loadTexts: sysMultiHostCpuHostId.setDescription('A host identifier on the system.')
sysMultiHostCpuIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 7, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMultiHostCpuIndex.setStatus('current')
if mibBuilder.loadTexts: sysMultiHostCpuIndex.setDescription('The index of the table that contains the information of \n\t\tthe specified processor of the associated host.')
sysMultiHostCpuId = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 7, 5, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMultiHostCpuId.setStatus('current')
if mibBuilder.loadTexts: sysMultiHostCpuId.setDescription('The ID of the specified processor of the associated host.')
sysMultiHostCpuUser = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 7, 5, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMultiHostCpuUser.setStatus('current')
if mibBuilder.loadTexts: sysMultiHostCpuUser.setDescription('The time spent by the specified processor in user context for the associated host.')
sysMultiHostCpuNice = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 7, 5, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMultiHostCpuNice.setStatus('current')
if mibBuilder.loadTexts: sysMultiHostCpuNice.setDescription('The time spent by the specified processor running niced processes for the associated host.')
sysMultiHostCpuSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 7, 5, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMultiHostCpuSystem.setStatus('current')
if mibBuilder.loadTexts: sysMultiHostCpuSystem.setDescription('The time spent by the specified processor servicing system calls for the associated host.')
sysMultiHostCpuIdle = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 7, 5, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMultiHostCpuIdle.setStatus('current')
if mibBuilder.loadTexts: sysMultiHostCpuIdle.setDescription('The time spent by the specified processor doing nothing for the associated host.')
sysMultiHostCpuIrq = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 7, 5, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMultiHostCpuIrq.setStatus('current')
if mibBuilder.loadTexts: sysMultiHostCpuIrq.setDescription('The time spent by the specified processor servicing hardware interrupts for the associated host.')
sysMultiHostCpuSoftirq = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 7, 5, 2, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMultiHostCpuSoftirq.setStatus('current')
if mibBuilder.loadTexts: sysMultiHostCpuSoftirq.setDescription('The time spent by the specified processor servicing soft interrupts for the associated host.')
sysMultiHostCpuIowait = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 7, 5, 2, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMultiHostCpuIowait.setStatus('current')
if mibBuilder.loadTexts: sysMultiHostCpuIowait.setDescription('The time spent by the specified processor waiting for external I/O to complete for the associated host.')
sysMultiHostCpuUsageRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 7, 5, 2, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMultiHostCpuUsageRatio.setStatus('current')
if mibBuilder.loadTexts: sysMultiHostCpuUsageRatio.setDescription('This is usage ratio of CPU for the associated host. This value indicates the present cpu usage. For usage\n\t\tcomputed over specific intervals, please use the specific (5s,1m,5m) OIDs')
sysMultiHostCpuUser5s = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 7, 5, 2, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMultiHostCpuUser5s.setStatus('current')
if mibBuilder.loadTexts: sysMultiHostCpuUser5s.setDescription('The average time spent by the specified processor in user context for the associated host in the last five seconds.')
sysMultiHostCpuNice5s = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 7, 5, 2, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMultiHostCpuNice5s.setStatus('current')
if mibBuilder.loadTexts: sysMultiHostCpuNice5s.setDescription('The average time spent by the specified processor running niced processes for the associated host in the last five seconds.')
sysMultiHostCpuSystem5s = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 7, 5, 2, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMultiHostCpuSystem5s.setStatus('current')
if mibBuilder.loadTexts: sysMultiHostCpuSystem5s.setDescription('The average time spent by the specified processor servicing system calls for the associated host in the last five seconds.')
sysMultiHostCpuIdle5s = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 7, 5, 2, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMultiHostCpuIdle5s.setStatus('current')
if mibBuilder.loadTexts: sysMultiHostCpuIdle5s.setDescription('The average time spent by the specified processor doing nothing for the associated host in the last five seconds.')
sysMultiHostCpuIrq5s = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 7, 5, 2, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMultiHostCpuIrq5s.setStatus('current')
if mibBuilder.loadTexts: sysMultiHostCpuIrq5s.setDescription('The average time spent by the specified processor servicing hardware interrupts for the associated host in the last five seconds.')
sysMultiHostCpuSoftirq5s = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 7, 5, 2, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMultiHostCpuSoftirq5s.setStatus('current')
if mibBuilder.loadTexts: sysMultiHostCpuSoftirq5s.setDescription('The average time spent by the specified processor servicing soft interrupts for the associated host in the last five seconds.')
sysMultiHostCpuIowait5s = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 7, 5, 2, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMultiHostCpuIowait5s.setStatus('current')
if mibBuilder.loadTexts: sysMultiHostCpuIowait5s.setDescription('The average time spent by the specified processor waiting for external I/O to complete for the associated host in the last five seconds.')
sysMultiHostCpuUsageRatio5s = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 7, 5, 2, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMultiHostCpuUsageRatio5s.setStatus('current')
if mibBuilder.loadTexts: sysMultiHostCpuUsageRatio5s.setDescription('This is  average usage ratio of CPU for the associated host in the last five seconds. It is calculated by \n\t\t(sum of deltas for user, niced, system)/(sum of deltas of user, niced, system, idle, irq, softirq, and iowait),\n\t\twhere each delta is the difference for each stat over the last 5-second interval;\n\t\tuser: sysMultiHostCpuUser5s;\n\t\tniced: sysMultiHostCpuNiced5s;\n\t\t\tstolen: sysMultiHostCpuStolen5s;\n\t\tsystem: sysMultiHostCpuSystem5s;\n\t\tidle: sysMultiHostCpuIdle5s;\n\t\tirq: sysMultiHostCpuIrq5s;\n\t\tiowait: sysMultiHostCpuIowait5s')
sysMultiHostCpuUser1m = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 7, 5, 2, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMultiHostCpuUser1m.setStatus('current')
if mibBuilder.loadTexts: sysMultiHostCpuUser1m.setDescription('The average time spent by the specified processor in user context for the associated host in the last one minute.')
sysMultiHostCpuNice1m = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 7, 5, 2, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMultiHostCpuNice1m.setStatus('current')
if mibBuilder.loadTexts: sysMultiHostCpuNice1m.setDescription('The average time spent by the specified processor running niced processes for the associated host in the last one minute.')
sysMultiHostCpuSystem1m = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 7, 5, 2, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMultiHostCpuSystem1m.setStatus('current')
if mibBuilder.loadTexts: sysMultiHostCpuSystem1m.setDescription('The average time spent by the specified processor servicing system calls for the associated host in the last one minute.')
sysMultiHostCpuIdle1m = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 7, 5, 2, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMultiHostCpuIdle1m.setStatus('current')
if mibBuilder.loadTexts: sysMultiHostCpuIdle1m.setDescription('The average time spent by the specified processor doing nothing for the associated host in the last one minute.')
sysMultiHostCpuIrq1m = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 7, 5, 2, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMultiHostCpuIrq1m.setStatus('current')
if mibBuilder.loadTexts: sysMultiHostCpuIrq1m.setDescription('The average time spent by the specified processor servicing hardware interrupts for the associated host in the last one minute.')
sysMultiHostCpuSoftirq1m = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 7, 5, 2, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMultiHostCpuSoftirq1m.setStatus('current')
if mibBuilder.loadTexts: sysMultiHostCpuSoftirq1m.setDescription('The average time spent by the specified processor servicing soft interrupts for the associated host in the last one minute.')
sysMultiHostCpuIowait1m = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 7, 5, 2, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMultiHostCpuIowait1m.setStatus('current')
if mibBuilder.loadTexts: sysMultiHostCpuIowait1m.setDescription('The average time spent by the specified processor waiting for external I/O to complete for the associated host in the last one minute.')
sysMultiHostCpuUsageRatio1m = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 7, 5, 2, 1, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMultiHostCpuUsageRatio1m.setStatus('current')
if mibBuilder.loadTexts: sysMultiHostCpuUsageRatio1m.setDescription('This is  average usage ratio of CPU for the associated host in the last one minute. It is calculated by \n\t\t(sum of deltas for user, niced, system)/(sum of deltas of user, niced, system, idle, irq, softirq, and iowait),\n\t\twhere each delta is the difference for each stat over the last 1-minute interval;\n\t\tuser: sysMultiHostCpuUser1m;\n\t\tniced: sysMultiHostCpuNiced1m;\n\t\t\tstolen: sysMultiHostCpuStolen1m;\n\t\tsystem: sysMultiHostCpuSystem1m;\n\t\tidle: sysMultiHostCpuIdle1m;\n\t\tirq: sysMultiHostCpuIrq1m;\n\t\tiowait: sysMultiHostCpuIowait1m')
sysMultiHostCpuUser5m = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 7, 5, 2, 1, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMultiHostCpuUser5m.setStatus('current')
if mibBuilder.loadTexts: sysMultiHostCpuUser5m.setDescription('The average time spent by the specified processor in user context for the associated host in the last five minutes.')
sysMultiHostCpuNice5m = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 7, 5, 2, 1, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMultiHostCpuNice5m.setStatus('current')
if mibBuilder.loadTexts: sysMultiHostCpuNice5m.setDescription('The average time spent by the specified processor running niced processes for the associated host in the last five minutes.')
sysMultiHostCpuSystem5m = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 7, 5, 2, 1, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMultiHostCpuSystem5m.setStatus('current')
if mibBuilder.loadTexts: sysMultiHostCpuSystem5m.setDescription('The average time spent by the specified processor servicing system calls for the associated host in the last five minutes.')
sysMultiHostCpuIdle5m = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 7, 5, 2, 1, 31), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMultiHostCpuIdle5m.setStatus('current')
if mibBuilder.loadTexts: sysMultiHostCpuIdle5m.setDescription('The average time spent by the specified processor doing nothing for the associated host in the last five minutes.')
sysMultiHostCpuIrq5m = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 7, 5, 2, 1, 32), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMultiHostCpuIrq5m.setStatus('current')
if mibBuilder.loadTexts: sysMultiHostCpuIrq5m.setDescription('The average time spent by the specified processor servicing hardware interrupts for the associated host in the last five minutes.')
sysMultiHostCpuSoftirq5m = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 7, 5, 2, 1, 33), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMultiHostCpuSoftirq5m.setStatus('current')
if mibBuilder.loadTexts: sysMultiHostCpuSoftirq5m.setDescription('The average time spent by the specified processor servicing soft interrupts for the associated host in the last five minutes.')
sysMultiHostCpuIowait5m = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 7, 5, 2, 1, 34), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMultiHostCpuIowait5m.setStatus('current')
if mibBuilder.loadTexts: sysMultiHostCpuIowait5m.setDescription('The average time spent by the specified processor waiting for external I/O to complete for the associated host in the last five minutes.')
sysMultiHostCpuUsageRatio5m = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 7, 5, 2, 1, 35), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMultiHostCpuUsageRatio5m.setStatus('current')
if mibBuilder.loadTexts: sysMultiHostCpuUsageRatio5m.setDescription('This is  average usage ratio of CPU for the associated host in the last five minutes. It is calculated by \n\t\t(sum of deltas for user, niced, system)/(sum of deltas of user, niced, system, idle, irq, softirq, and iowait),\n\t\twhere each delta is the difference for each stat over the last 5-minute interval;\n\t\tuser: sysMultiHostCpuUser5m;\n\t\tniced: sysMultiHostCpuNiced5m;\n\t\t\tstolen: sysMultiHostCpuStolen5m;\n\t\tsystem: sysMultiHostCpuSystem5m;\n\t\tidle: sysMultiHostCpuIdle5m;\n\t\tirq: sysMultiHostCpuIrq5m;\n\t\tiowait: sysMultiHostCpuIowait5m')
sysMultiHostCpuStolen = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 7, 5, 2, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMultiHostCpuStolen.setStatus('current')
if mibBuilder.loadTexts: sysMultiHostCpuStolen.setDescription("The time 'stolen' from the specified processor for the associated host.")
sysMultiHostCpuStolen5s = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 7, 5, 2, 1, 37), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMultiHostCpuStolen5s.setStatus('current')
if mibBuilder.loadTexts: sysMultiHostCpuStolen5s.setDescription("The average time 'stolen' from the specified processor for the associated host in the last five seconds.")
sysMultiHostCpuStolen1m = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 7, 5, 2, 1, 38), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMultiHostCpuStolen1m.setStatus('current')
if mibBuilder.loadTexts: sysMultiHostCpuStolen1m.setDescription("The average time 'stolen' from the specified processor for the associated host in the last one minute.")
sysMultiHostCpuStolen5m = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 7, 5, 2, 1, 39), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMultiHostCpuStolen5m.setStatus('current')
if mibBuilder.loadTexts: sysMultiHostCpuStolen5m.setDescription("The average time 'stolen' from the specified processor for the associated host in the last five minutes.")
sysMultiHostCpuSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 7, 5, 2, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMultiHostCpuSlotId.setStatus('current')
if mibBuilder.loadTexts: sysMultiHostCpuSlotId.setDescription('If this is an appliance, the slot is 0. If this is in a cluster, the slot is the position in the cluster (1-based)')
sysFastL4StatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 19, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysFastL4StatResetStats.setStatus('current')
if mibBuilder.loadTexts: sysFastL4StatResetStats.setDescription('The action to reset resettable statistics data in sysGlobalFastL4Stat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
sysFastL4StatOpen = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 19, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFastL4StatOpen.setStatus('current')
if mibBuilder.loadTexts: sysFastL4StatOpen.setDescription('The total number of current open connections.')
sysFastL4StatAccepts = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 19, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFastL4StatAccepts.setStatus('current')
if mibBuilder.loadTexts: sysFastL4StatAccepts.setDescription('The total number of accepted connections.')
sysFastL4StatAcceptfails = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 19, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFastL4StatAcceptfails.setStatus('current')
if mibBuilder.loadTexts: sysFastL4StatAcceptfails.setDescription('The total number of not accepted connections.')
sysFastL4StatExpires = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 19, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFastL4StatExpires.setStatus('current')
if mibBuilder.loadTexts: sysFastL4StatExpires.setDescription('The total number of expired connections due to idle timeout.')
sysFastL4StatRxbadpkt = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 19, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFastL4StatRxbadpkt.setStatus('current')
if mibBuilder.loadTexts: sysFastL4StatRxbadpkt.setDescription('The total number of malformed packets.')
sysFastL4StatRxunreach = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 19, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFastL4StatRxunreach.setStatus('current')
if mibBuilder.loadTexts: sysFastL4StatRxunreach.setDescription('The total number of received ICMP unreach/TCP RST.')
sysFastL4StatRxbadunreach = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 19, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFastL4StatRxbadunreach.setStatus('current')
if mibBuilder.loadTexts: sysFastL4StatRxbadunreach.setDescription('The total number of received TCP RST outside the current window.')
sysFastL4StatRxbadsum = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 19, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFastL4StatRxbadsum.setStatus('current')
if mibBuilder.loadTexts: sysFastL4StatRxbadsum.setDescription('The total number of bad checksum.')
sysFastL4StatTxerrors = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 19, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFastL4StatTxerrors.setStatus('current')
if mibBuilder.loadTexts: sysFastL4StatTxerrors.setDescription('The total number of transmit datagram errors.')
sysFastL4StatSyncookIssue = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 19, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFastL4StatSyncookIssue.setStatus('current')
if mibBuilder.loadTexts: sysFastL4StatSyncookIssue.setDescription('The total number of syncookies issued.')
sysFastL4StatSyncookAccept = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 19, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFastL4StatSyncookAccept.setStatus('current')
if mibBuilder.loadTexts: sysFastL4StatSyncookAccept.setDescription('The total number of syncookies accepted.')
sysFastL4StatSyncookReject = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 19, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFastL4StatSyncookReject.setStatus('current')
if mibBuilder.loadTexts: sysFastL4StatSyncookReject.setDescription('The total number of syncookies rejected.')
sysFastL4StatServersynrtx = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 19, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFastL4StatServersynrtx.setStatus('current')
if mibBuilder.loadTexts: sysFastL4StatServersynrtx.setDescription('The total number of retransmissions of SYN to server for a syncookied connection.')
sysFastL4StatLbcSuccessful = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 19, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFastL4StatLbcSuccessful.setStatus('current')
if mibBuilder.loadTexts: sysFastL4StatLbcSuccessful.setDescription('The total number of Successful Late Binding Connections.')
sysFastL4StatLbcTimedout = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 19, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFastL4StatLbcTimedout.setStatus('current')
if mibBuilder.loadTexts: sysFastL4StatLbcTimedout.setDescription('The total number of Late Binding Connections that were timed out.')
sysClusterNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClusterNumber.setStatus('current')
if mibBuilder.loadTexts: sysClusterNumber.setDescription('The number of sysCluster entries in the table.')
sysClusterTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 1, 10, 1, 2), )
if mibBuilder.loadTexts: sysClusterTable.setStatus('current')
if mibBuilder.loadTexts: sysClusterTable.setDescription('A table containing cluster information of the system.')
sysClusterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 1, 10, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-SYSTEM-MIB", "sysClusterName"))
if mibBuilder.loadTexts: sysClusterEntry.setStatus('current')
if mibBuilder.loadTexts: sysClusterEntry.setDescription('Columns in the sysCluster Table')
sysClusterName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 10, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClusterName.setStatus('current')
if mibBuilder.loadTexts: sysClusterName.setDescription('The name of a cluster.')
sysClusterEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 10, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClusterEnabled.setStatus('current')
if mibBuilder.loadTexts: sysClusterEnabled.setDescription('The state indicating whether cluster environment is enabled or not.')
sysClusterFloatMgmtIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 10, 1, 2, 1, 3), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClusterFloatMgmtIpType.setStatus('current')
if mibBuilder.loadTexts: sysClusterFloatMgmtIpType.setDescription('The IP address type of the specified cluster.')
sysClusterFloatMgmtIp = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 10, 1, 2, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClusterFloatMgmtIp.setStatus('current')
if mibBuilder.loadTexts: sysClusterFloatMgmtIp.setDescription('The IP address of the specified cluster. It is interpreted within \n\t\t the context of a sysClusterMgmtIpType value.')
sysClusterFloatMgmtNetmaskType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 10, 1, 2, 1, 5), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClusterFloatMgmtNetmaskType.setStatus('current')
if mibBuilder.loadTexts: sysClusterFloatMgmtNetmaskType.setDescription('The netmask type of of the specified cluster IP address.')
sysClusterFloatMgmtNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 10, 1, 2, 1, 6), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClusterFloatMgmtNetmask.setStatus('current')
if mibBuilder.loadTexts: sysClusterFloatMgmtNetmask.setDescription('The netmask of the specified cluster IP address. It is interpreted within \n\t\t the context of a sysFloatMgmtNetmaskType value.')
sysClusterMinUpMbrs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 10, 1, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClusterMinUpMbrs.setStatus('current')
if mibBuilder.loadTexts: sysClusterMinUpMbrs.setDescription('The minimum number of UP members required for the specified cluster \n\t\tbefore a high availability action to be taken. \n\t\tThis is used when ltmClusterMinUpMbrsEnable is true.')
sysClusterMinUpMbrsEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 10, 1, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClusterMinUpMbrsEnable.setStatus('current')
if mibBuilder.loadTexts: sysClusterMinUpMbrsEnable.setDescription('The state indicating whether or not an action will be taken when the \n\t\t\tminimum number of UP members requirement is not met for the specified cluster.')
sysClusterMinUpMbrsAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 10, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("unusedhaaction", 0), ("reboot", 1), ("restart", 2), ("failover", 3), ("goactive", 4), ("noaction", 5), ("restartall", 6), ("failoveraborttm", 7), ("gooffline", 8), ("goofflinerestart", 9), ("goofflineaborttm", 10), ("goofflinedownlinks", 11), ("goofflinedownlinksrestart", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClusterMinUpMbrsAction.setStatus('current')
if mibBuilder.loadTexts: sysClusterMinUpMbrsAction.setDescription('The action to be taken if the minimum number of UP members requirement \n\t\t\tis not met for the specified cluster. This is used when \n\t\t\tsysClusterMinUpMbrsEnable is true.')
sysClusterAvailabilityState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 10, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("green", 1), ("yellow", 2), ("red", 3), ("blue", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClusterAvailabilityState.setStatus('current')
if mibBuilder.loadTexts: sysClusterAvailabilityState.setDescription('The state of the specified cluster availability indicated in color')
sysClusterEnabledStat = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 10, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("enabled", 1), ("disabled", 2), ("disabledbyparent", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClusterEnabledStat.setStatus('current')
if mibBuilder.loadTexts: sysClusterEnabledStat.setDescription('The state of the specified cluster activity status, as specified \n\t\t\tby the user.')
sysClusterDisabledParentType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 10, 1, 2, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClusterDisabledParentType.setStatus('current')
if mibBuilder.loadTexts: sysClusterDisabledParentType.setDescription('The type of parent object which disabled the specified cluster.')
sysClusterStatusReason = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 10, 1, 2, 1, 13), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClusterStatusReason.setStatus('current')
if mibBuilder.loadTexts: sysClusterStatusReason.setDescription("The detail description of the cluster's status of parent object \n\t\t\twhich disabled the specified cluster.")
sysClusterHaState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 10, 1, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("offline", 0), ("forcedoffline", 1), ("standby", 2), ("active", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClusterHaState.setStatus('current')
if mibBuilder.loadTexts: sysClusterHaState.setDescription('The state of high availability action.')
sysClusterPriSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 10, 1, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClusterPriSlotId.setStatus('current')
if mibBuilder.loadTexts: sysClusterPriSlotId.setDescription('The slot ID of current primary slot in the specified cluster.')
sysClusterLastPriSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 10, 1, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClusterLastPriSlotId.setStatus('current')
if mibBuilder.loadTexts: sysClusterLastPriSlotId.setDescription('The slot ID of last primary slot in the specified cluster.')
sysClusterPriSelTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 10, 1, 2, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClusterPriSelTime.setStatus('current')
if mibBuilder.loadTexts: sysClusterPriSelTime.setDescription('The epoch timestamp representing the time at which the primary slot\n\t\t\tis selected in the cluster.')
sysClusterMbrNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 10, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClusterMbrNumber.setStatus('current')
if mibBuilder.loadTexts: sysClusterMbrNumber.setDescription('The number of sysClusterMbr entries in the table.')
sysClusterMbrTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 1, 10, 2, 2), )
if mibBuilder.loadTexts: sysClusterMbrTable.setStatus('current')
if mibBuilder.loadTexts: sysClusterMbrTable.setDescription('A table containing cluster members information of the system.')
sysClusterMbrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 1, 10, 2, 2, 1), ).setIndexNames((0, "F5-BIGIP-SYSTEM-MIB", "sysClusterMbrCluster"), (0, "F5-BIGIP-SYSTEM-MIB", "sysClusterMbrSlotId"))
if mibBuilder.loadTexts: sysClusterMbrEntry.setStatus('current')
if mibBuilder.loadTexts: sysClusterMbrEntry.setDescription('Columns in the sysClusterMbr Table')
sysClusterMbrCluster = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 10, 2, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClusterMbrCluster.setStatus('current')
if mibBuilder.loadTexts: sysClusterMbrCluster.setDescription('The name of a cluster.')
sysClusterMbrSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 10, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClusterMbrSlotId.setStatus('current')
if mibBuilder.loadTexts: sysClusterMbrSlotId.setDescription('The slot id in the specified cluster.')
sysClusterMbrAvailabilityState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 10, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("green", 1), ("yellow", 2), ("red", 3), ("blue", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClusterMbrAvailabilityState.setStatus('current')
if mibBuilder.loadTexts: sysClusterMbrAvailabilityState.setDescription('The state of the specified cluster member availability indicated in color')
sysClusterMbrEnabledStat = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 10, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("enabled", 1), ("disabled", 2), ("disabledbyparent", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClusterMbrEnabledStat.setStatus('current')
if mibBuilder.loadTexts: sysClusterMbrEnabledStat.setDescription('The state of the specified cluster member activity status, as specified \n\t\t\tby the user.')
sysClusterMbrDisabledParentType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 10, 2, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClusterMbrDisabledParentType.setStatus('current')
if mibBuilder.loadTexts: sysClusterMbrDisabledParentType.setDescription('The type of parent object which disabled the specified cluster member.')
sysClusterMbrStatusReason = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 10, 2, 2, 1, 6), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClusterMbrStatusReason.setStatus('current')
if mibBuilder.loadTexts: sysClusterMbrStatusReason.setDescription("The detail description of the cluster's status of parent object \n\t\t\twhich disabled the specified cluster member.")
sysClusterMbrLicensed = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 10, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClusterMbrLicensed.setStatus('current')
if mibBuilder.loadTexts: sysClusterMbrLicensed.setDescription('The state indicating whether or not the specified cluster member is licensed.')
sysClusterMbrState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 10, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("initial", 0), ("quorumwait", 1), ("quorum", 2), ("running", 3), ("shutdown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClusterMbrState.setStatus('current')
if mibBuilder.loadTexts: sysClusterMbrState.setDescription('The state which the specified cluster member in at.')
sysClusterMbrEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 10, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClusterMbrEnabled.setStatus('current')
if mibBuilder.loadTexts: sysClusterMbrEnabled.setDescription('The state indicating whehter the specified member is enabled or not.')
sysClusterMbrPriming = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 10, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClusterMbrPriming.setStatus('current')
if mibBuilder.loadTexts: sysClusterMbrPriming.setDescription('The state indicating whether or not priming is enabled.')
sysClusterMbrMgmtAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 10, 2, 2, 1, 11), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClusterMbrMgmtAddrType.setStatus('current')
if mibBuilder.loadTexts: sysClusterMbrMgmtAddrType.setDescription('The IP address type of the specified cluster member.')
sysClusterMbrMgmtAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 10, 2, 2, 1, 12), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClusterMbrMgmtAddr.setStatus('current')
if mibBuilder.loadTexts: sysClusterMbrMgmtAddr.setDescription('The IP address of the specified cluster member. It is interpreted within \n\t\t the context of a sysClusterMbrMgmtAddrType value.')
sysClusterMbrHaState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 10, 2, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 0), ("offline", 1), ("forcedoffline", 2), ("standby", 3), ("active", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysClusterMbrHaState.setStatus('current')
if mibBuilder.loadTexts: sysClusterMbrHaState.setDescription('The state of high availability action of the specified cluster member.')
sysSwVolumeNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSwVolumeNumber.setStatus('current')
if mibBuilder.loadTexts: sysSwVolumeNumber.setDescription('The number of sysSoftwareVolume entries in the table.')
sysSwVolumeTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 1, 9, 1, 2), )
if mibBuilder.loadTexts: sysSwVolumeTable.setStatus('current')
if mibBuilder.loadTexts: sysSwVolumeTable.setDescription('A table containing software volume information on the system.')
sysSwVolumeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 1, 9, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-SYSTEM-MIB", "sysSwVolumeSlotId"), (0, "F5-BIGIP-SYSTEM-MIB", "sysSwVolumeName"))
if mibBuilder.loadTexts: sysSwVolumeEntry.setStatus('current')
if mibBuilder.loadTexts: sysSwVolumeEntry.setDescription('Columns in the sysSwVolume Table')
sysSwVolumeSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 9, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSwVolumeSlotId.setStatus('current')
if mibBuilder.loadTexts: sysSwVolumeSlotId.setDescription('The slot ID.')
sysSwVolumeName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 9, 1, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSwVolumeName.setStatus('current')
if mibBuilder.loadTexts: sysSwVolumeName.setDescription('The harddisk name.')
sysSwVolumeSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 9, 1, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSwVolumeSize.setStatus('current')
if mibBuilder.loadTexts: sysSwVolumeSize.setDescription('The space of the specified harddisk.')
sysSwVolumeActive = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 9, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSwVolumeActive.setStatus('current')
if mibBuilder.loadTexts: sysSwVolumeActive.setDescription('The state indicating whether or not the specified slot is active.')
sysSwImageNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 9, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSwImageNumber.setStatus('current')
if mibBuilder.loadTexts: sysSwImageNumber.setDescription('The number of sysSoftwareImage entries in the table.')
sysSwImageTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 1, 9, 2, 2), )
if mibBuilder.loadTexts: sysSwImageTable.setStatus('current')
if mibBuilder.loadTexts: sysSwImageTable.setDescription('A table containing software image information on the system.')
sysSwImageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 1, 9, 2, 2, 1), ).setIndexNames((0, "F5-BIGIP-SYSTEM-MIB", "sysSwImageSlotId"), (0, "F5-BIGIP-SYSTEM-MIB", "sysSwImageFilename"))
if mibBuilder.loadTexts: sysSwImageEntry.setStatus('current')
if mibBuilder.loadTexts: sysSwImageEntry.setDescription('Columns in the sysSwImage Table')
sysSwImageSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 9, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSwImageSlotId.setStatus('current')
if mibBuilder.loadTexts: sysSwImageSlotId.setDescription('The slot ID.')
sysSwImageFilename = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 9, 2, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSwImageFilename.setStatus('current')
if mibBuilder.loadTexts: sysSwImageFilename.setDescription('The software image name.')
sysSwImageProduct = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 9, 2, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSwImageProduct.setStatus('current')
if mibBuilder.loadTexts: sysSwImageProduct.setDescription('The product name of the specified image.')
sysSwImageVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 9, 2, 2, 1, 4), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSwImageVersion.setStatus('current')
if mibBuilder.loadTexts: sysSwImageVersion.setDescription('The version of the specified image.')
sysSwImageBuild = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 9, 2, 2, 1, 5), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSwImageBuild.setStatus('current')
if mibBuilder.loadTexts: sysSwImageBuild.setDescription('The build number of the specified image.')
sysSwImageChksum = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 9, 2, 2, 1, 6), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSwImageChksum.setStatus('current')
if mibBuilder.loadTexts: sysSwImageChksum.setDescription('The chksum of specified image.')
sysSwImageVerified = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 9, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSwImageVerified.setStatus('current')
if mibBuilder.loadTexts: sysSwImageVerified.setDescription('The state indicating whether the specified image is verified or not.')
sysSwImageBuildDate = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 9, 2, 2, 1, 8), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSwImageBuildDate.setStatus('current')
if mibBuilder.loadTexts: sysSwImageBuildDate.setDescription('The date when the specified image is built.')
sysSwImageLastModified = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 9, 2, 2, 1, 9), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSwImageLastModified.setStatus('current')
if mibBuilder.loadTexts: sysSwImageLastModified.setDescription('The date when the specified image is last modified.')
sysSwImageFileSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 9, 2, 2, 1, 10), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSwImageFileSize.setStatus('current')
if mibBuilder.loadTexts: sysSwImageFileSize.setDescription('The size of the specified software image.')
sysSwHotfixNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 9, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSwHotfixNumber.setStatus('current')
if mibBuilder.loadTexts: sysSwHotfixNumber.setDescription('The number of sysSoftwareHotfix entries in the table.')
sysSwHotfixTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 1, 9, 3, 2), )
if mibBuilder.loadTexts: sysSwHotfixTable.setStatus('current')
if mibBuilder.loadTexts: sysSwHotfixTable.setDescription('A table containing hotfix software information on the system.')
sysSwHotfixEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 1, 9, 3, 2, 1), ).setIndexNames((0, "F5-BIGIP-SYSTEM-MIB", "sysSwHotfixSlotId"), (0, "F5-BIGIP-SYSTEM-MIB", "sysSwHotfixFilename"))
if mibBuilder.loadTexts: sysSwHotfixEntry.setStatus('current')
if mibBuilder.loadTexts: sysSwHotfixEntry.setDescription('Columns in the sysSwHotfix Table')
sysSwHotfixSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 9, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSwHotfixSlotId.setStatus('current')
if mibBuilder.loadTexts: sysSwHotfixSlotId.setDescription('The slot ID.')
sysSwHotfixFilename = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 9, 3, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSwHotfixFilename.setStatus('current')
if mibBuilder.loadTexts: sysSwHotfixFilename.setDescription('The software image name.')
sysSwHotfixProduct = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 9, 3, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSwHotfixProduct.setStatus('current')
if mibBuilder.loadTexts: sysSwHotfixProduct.setDescription('The product name of the specified hotfix image.')
sysSwHotfixVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 9, 3, 2, 1, 4), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSwHotfixVersion.setStatus('current')
if mibBuilder.loadTexts: sysSwHotfixVersion.setDescription('The version of the specified hotfix image.')
sysSwHotfixBuild = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 9, 3, 2, 1, 5), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSwHotfixBuild.setStatus('current')
if mibBuilder.loadTexts: sysSwHotfixBuild.setDescription('The build number of the specified hotfix image.')
sysSwHotfixChksum = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 9, 3, 2, 1, 6), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSwHotfixChksum.setStatus('current')
if mibBuilder.loadTexts: sysSwHotfixChksum.setDescription('The chksum of specified hotfix image.')
sysSwHotfixVerified = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 9, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSwHotfixVerified.setStatus('current')
if mibBuilder.loadTexts: sysSwHotfixVerified.setDescription('The state indicating whether the specified hotfix image is verified or not.')
sysSwHotfixHotfixId = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 9, 3, 2, 1, 8), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSwHotfixHotfixId.setStatus('current')
if mibBuilder.loadTexts: sysSwHotfixHotfixId.setDescription('The ID of the hotfix image.')
sysSwHotfixHotfixTitle = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 9, 3, 2, 1, 9), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSwHotfixHotfixTitle.setStatus('current')
if mibBuilder.loadTexts: sysSwHotfixHotfixTitle.setDescription('The title of the hotfix image.')
sysSwStatusNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 9, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSwStatusNumber.setStatus('current')
if mibBuilder.loadTexts: sysSwStatusNumber.setDescription('The number of sysSoftwareStatus entries in the table.')
sysSwStatusTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 1, 9, 4, 2), )
if mibBuilder.loadTexts: sysSwStatusTable.setStatus('current')
if mibBuilder.loadTexts: sysSwStatusTable.setDescription('A table containing software status information on the system.')
sysSwStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 1, 9, 4, 2, 1), ).setIndexNames((0, "F5-BIGIP-SYSTEM-MIB", "sysSwStatusSlotId"), (0, "F5-BIGIP-SYSTEM-MIB", "sysSwStatusVolume"))
if mibBuilder.loadTexts: sysSwStatusEntry.setStatus('current')
if mibBuilder.loadTexts: sysSwStatusEntry.setDescription('Columns in the sysSwStatus Table')
sysSwStatusSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 9, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSwStatusSlotId.setStatus('current')
if mibBuilder.loadTexts: sysSwStatusSlotId.setDescription('The slot ID.')
sysSwStatusVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 9, 4, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSwStatusVolume.setStatus('current')
if mibBuilder.loadTexts: sysSwStatusVolume.setDescription('The harddisk name.')
sysSwStatusProduct = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 9, 4, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSwStatusProduct.setStatus('current')
if mibBuilder.loadTexts: sysSwStatusProduct.setDescription('The product name of the specified software.')
sysSwStatusVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 9, 4, 2, 1, 4), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSwStatusVersion.setStatus('current')
if mibBuilder.loadTexts: sysSwStatusVersion.setDescription('The version of the specified software.')
sysSwStatusBuild = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 9, 4, 2, 1, 5), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSwStatusBuild.setStatus('current')
if mibBuilder.loadTexts: sysSwStatusBuild.setDescription('The build number of the specified software.')
sysSwStatusActive = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 9, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSwStatusActive.setStatus('current')
if mibBuilder.loadTexts: sysSwStatusActive.setDescription('The state indicating whether the system is acive or not.')
sysGlobalHostResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 20, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysGlobalHostResetStats.setStatus('current')
if mibBuilder.loadTexts: sysGlobalHostResetStats.setDescription('The action to reset resettable statistics data in sysGlobalHost.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
sysGlobalHostMemTotal = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 20, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalHostMemTotal.setStatus('current')
if mibBuilder.loadTexts: sysGlobalHostMemTotal.setDescription('The total host memory in bytes for the system.\n\tUse sysGlobalHostMemTotalKb for gauge type.')
sysGlobalHostMemUsed = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 20, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalHostMemUsed.setStatus('current')
if mibBuilder.loadTexts: sysGlobalHostMemUsed.setDescription('The host memory in bytes currently in use for the system.\n\tUse sysGlobalHostMemUsedKb for gauge type.')
sysGlobalHostCpuCount = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 20, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalHostCpuCount.setStatus('current')
if mibBuilder.loadTexts: sysGlobalHostCpuCount.setDescription('The number of CPUs in the system.')
sysGlobalHostActiveCpuCount = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 20, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalHostActiveCpuCount.setStatus('current')
if mibBuilder.loadTexts: sysGlobalHostActiveCpuCount.setDescription('The number of active CPUs in the system.')
sysGlobalHostCpuUser = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 20, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalHostCpuUser.setStatus('current')
if mibBuilder.loadTexts: sysGlobalHostCpuUser.setDescription('The average time spent by all processors in user context for the system.')
sysGlobalHostCpuNice = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 20, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalHostCpuNice.setStatus('current')
if mibBuilder.loadTexts: sysGlobalHostCpuNice.setDescription('The average time spent by all processors running niced processes for the system.')
sysGlobalHostCpuSystem = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 20, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalHostCpuSystem.setStatus('current')
if mibBuilder.loadTexts: sysGlobalHostCpuSystem.setDescription('The average time spent by all processors servicing system calls for the system.')
sysGlobalHostCpuIdle = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 20, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalHostCpuIdle.setStatus('current')
if mibBuilder.loadTexts: sysGlobalHostCpuIdle.setDescription('The average time spent by all processors doing nothing for the system.')
sysGlobalHostCpuIrq = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 20, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalHostCpuIrq.setStatus('current')
if mibBuilder.loadTexts: sysGlobalHostCpuIrq.setDescription('The average time spent by all processors servicing hardware interrupts for the system.')
sysGlobalHostCpuSoftirq = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 20, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalHostCpuSoftirq.setStatus('current')
if mibBuilder.loadTexts: sysGlobalHostCpuSoftirq.setDescription('The average time spent by all processors servicing soft interrupts for the system.')
sysGlobalHostCpuIowait = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 20, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalHostCpuIowait.setStatus('current')
if mibBuilder.loadTexts: sysGlobalHostCpuIowait.setDescription('The average time spent by all processors waiting for external I/O to complete for the system.')
sysGlobalHostCpuUsageRatio = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 20, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalHostCpuUsageRatio.setStatus('current')
if mibBuilder.loadTexts: sysGlobalHostCpuUsageRatio.setDescription('This is usage ratio of CPU for the system. It is calculated by \n\t(sum of deltas for user, niced, system)/(sum of deltas of user, niced, system, idle, irq, softirq, and iowait),\n\twhere each delta is the difference for each stat over the last 10-second interval;\n\tuser: sysGlobalHostCpuUser;\n\tniced: sysGlobalHostCpuNiced;\n\t\tstolen: sysGlobalHostCpuStolen;\n\tsystem: sysGlobalHostCpuSystem;\n\tidle: sysGlobalHostCpuIdle;\n\tirq: sysGlobalHostCpuIrq;\n\tiowait: sysGlobalHostCpuIowait')
sysGlobalHostCpuUser5s = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 20, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalHostCpuUser5s.setStatus('current')
if mibBuilder.loadTexts: sysGlobalHostCpuUser5s.setDescription('The average time spent by the specified processor in user context for the system in the last five seconds.')
sysGlobalHostCpuNice5s = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 20, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalHostCpuNice5s.setStatus('current')
if mibBuilder.loadTexts: sysGlobalHostCpuNice5s.setDescription('The average time spent by the specified processor running niced processes for the system in the last five seconds.')
sysGlobalHostCpuSystem5s = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 20, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalHostCpuSystem5s.setStatus('current')
if mibBuilder.loadTexts: sysGlobalHostCpuSystem5s.setDescription('The average time spent by the specified processor servicing system calls for the system in the last five seconds.')
sysGlobalHostCpuIdle5s = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 20, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalHostCpuIdle5s.setStatus('current')
if mibBuilder.loadTexts: sysGlobalHostCpuIdle5s.setDescription('The average time spent by the specified processor doing nothing for the system in the last five seconds.')
sysGlobalHostCpuIrq5s = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 20, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalHostCpuIrq5s.setStatus('current')
if mibBuilder.loadTexts: sysGlobalHostCpuIrq5s.setDescription('The average time spent by the specified processor servicing hardware interrupts for the system in the last five seconds.')
sysGlobalHostCpuSoftirq5s = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 20, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalHostCpuSoftirq5s.setStatus('current')
if mibBuilder.loadTexts: sysGlobalHostCpuSoftirq5s.setDescription('The average time spent by the specified processor servicing soft interrupts for the system in the last five seconds.')
sysGlobalHostCpuIowait5s = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 20, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalHostCpuIowait5s.setStatus('current')
if mibBuilder.loadTexts: sysGlobalHostCpuIowait5s.setDescription('The average time spent by the specified processor waiting for external I/O to complete for the system in the last five seconds.')
sysGlobalHostCpuUsageRatio5s = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 20, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalHostCpuUsageRatio5s.setStatus('current')
if mibBuilder.loadTexts: sysGlobalHostCpuUsageRatio5s.setDescription('This is  average usage ratio of CPU for the system in the last five seconds. It is calculated by \n\t(sum of deltas for user, niced, system)/(sum of deltas of user, niced, system, idle, irq, softirq, and iowait),\n\twhere each delta is the difference for each stat over the last 5-second interval;\n\tuser: sysGlobalHostCpuUser5s;\n\tniced: sysGlobalHostCpuNiced5s;\n\t\tstolen: sysGlobalHostCpuStolen5s;\n\tsystem: sysGlobalHostCpuSystem5s;\n\tidle: sysGlobalHostCpuIdle5s;\n\tirq: sysGlobalHostCpuIrq5s;\n\tiowait: sysGlobalHostCpuIowait5s')
sysGlobalHostCpuUser1m = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 20, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalHostCpuUser1m.setStatus('current')
if mibBuilder.loadTexts: sysGlobalHostCpuUser1m.setDescription('The average time spent by the specified processor in user context for the system in the last one minute.')
sysGlobalHostCpuNice1m = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 20, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalHostCpuNice1m.setStatus('current')
if mibBuilder.loadTexts: sysGlobalHostCpuNice1m.setDescription('The average time spent by the specified processor running niced processes for the system in the last one minute.')
sysGlobalHostCpuSystem1m = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 20, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalHostCpuSystem1m.setStatus('current')
if mibBuilder.loadTexts: sysGlobalHostCpuSystem1m.setDescription('The average time spent by the specified processor servicing system calls for the system in the last one minute.')
sysGlobalHostCpuIdle1m = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 20, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalHostCpuIdle1m.setStatus('current')
if mibBuilder.loadTexts: sysGlobalHostCpuIdle1m.setDescription('The average time spent by the specified processor doing nothing for the system in the last one minute.')
sysGlobalHostCpuIrq1m = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 20, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalHostCpuIrq1m.setStatus('current')
if mibBuilder.loadTexts: sysGlobalHostCpuIrq1m.setDescription('The average time spent by the specified processor servicing hardware interrupts for the system in the last one minute.')
sysGlobalHostCpuSoftirq1m = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 20, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalHostCpuSoftirq1m.setStatus('current')
if mibBuilder.loadTexts: sysGlobalHostCpuSoftirq1m.setDescription('The average time spent by the specified processor servicing soft interrupts for the system in the last one minute.')
sysGlobalHostCpuIowait1m = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 20, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalHostCpuIowait1m.setStatus('current')
if mibBuilder.loadTexts: sysGlobalHostCpuIowait1m.setDescription('The average time spent by the specified processor waiting for external I/O to complete for the system in the last one minute.')
sysGlobalHostCpuUsageRatio1m = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 20, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalHostCpuUsageRatio1m.setStatus('current')
if mibBuilder.loadTexts: sysGlobalHostCpuUsageRatio1m.setDescription('This is  average usage ratio of CPU for the system in the last one minute. It is calculated by \n\t(sum of deltas for user, niced, system)/(sum of deltas of user, niced, system, idle, irq, softirq, and iowait),\n\twhere each delta is the difference for each stat over the last 1-minute interval;\n\tuser: sysGlobalHostCpuUser1m;\n\tniced: sysGlobalHostCpuNiced1m;\n\t\tstolen: sysGlobalHostCpuStolen1m;\n\tsystem: sysGlobalHostCpuSystem1m;\n\tidle: sysGlobalHostCpuIdle1m;\n\tirq: sysGlobalHostCpuIrq1m;\n\tiowait: sysGlobalHostCpuIowait1m')
sysGlobalHostCpuUser5m = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 20, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalHostCpuUser5m.setStatus('current')
if mibBuilder.loadTexts: sysGlobalHostCpuUser5m.setDescription('The average time spent by the specified processor in user context for the system in the last five minutes.')
sysGlobalHostCpuNice5m = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 20, 31), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalHostCpuNice5m.setStatus('current')
if mibBuilder.loadTexts: sysGlobalHostCpuNice5m.setDescription('The average time spent by the specified processor running niced processes for the system in the last five minutes.')
sysGlobalHostCpuSystem5m = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 20, 32), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalHostCpuSystem5m.setStatus('current')
if mibBuilder.loadTexts: sysGlobalHostCpuSystem5m.setDescription('The average time spent by the specified processor servicing system calls for the system in the last five minutes.')
sysGlobalHostCpuIdle5m = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 20, 33), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalHostCpuIdle5m.setStatus('current')
if mibBuilder.loadTexts: sysGlobalHostCpuIdle5m.setDescription('The average time spent by the specified processor doing nothing for the system in the last five minutes.')
sysGlobalHostCpuIrq5m = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 20, 34), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalHostCpuIrq5m.setStatus('current')
if mibBuilder.loadTexts: sysGlobalHostCpuIrq5m.setDescription('The average time spent by the specified processor servicing hardware interrupts for the system in the last five minutes.')
sysGlobalHostCpuSoftirq5m = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 20, 35), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalHostCpuSoftirq5m.setStatus('current')
if mibBuilder.loadTexts: sysGlobalHostCpuSoftirq5m.setDescription('The average time spent by the specified processor servicing soft interrupts for the system in the last five minutes.')
sysGlobalHostCpuIowait5m = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 20, 36), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalHostCpuIowait5m.setStatus('current')
if mibBuilder.loadTexts: sysGlobalHostCpuIowait5m.setDescription('The average time spent by the specified processor waiting for external I/O to complete for the system in the last five minutes.')
sysGlobalHostCpuUsageRatio5m = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 20, 37), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalHostCpuUsageRatio5m.setStatus('current')
if mibBuilder.loadTexts: sysGlobalHostCpuUsageRatio5m.setDescription('This is  average usage ratio of CPU for the system in the last five minutes. It is calculated by \n\t(sum of deltas for user, niced, system)/(sum of deltas of user, niced, system, idle, irq, softirq, and iowait),\n\twhere each delta is the difference for each stat over the last 5-minute interval;\n\tuser: sysGlobalHostCpuUser5m;\n\tniced: sysGlobalHostCpuNiced5m;\n\t\tstolen: sysGlobalHostCpuStolen5m;\n\tsystem: sysGlobalHostCpuSystem5m;\n\tidle: sysGlobalHostCpuIdle5m;\n\tirq: sysGlobalHostCpuIrq5m;\n\tiowait: sysGlobalHostCpuIowait5m')
sysGlobalHostCpuStolen = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 20, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalHostCpuStolen.setStatus('current')
if mibBuilder.loadTexts: sysGlobalHostCpuStolen.setDescription("The time 'stolen' from the system (for virtual machines).")
sysGlobalHostCpuStolen5s = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 20, 39), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalHostCpuStolen5s.setStatus('current')
if mibBuilder.loadTexts: sysGlobalHostCpuStolen5s.setDescription("The average time 'stolen' from the system in the last five seconds.")
sysGlobalHostCpuStolen1m = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 20, 40), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalHostCpuStolen1m.setStatus('current')
if mibBuilder.loadTexts: sysGlobalHostCpuStolen1m.setDescription("The average time 'stolen' from the system in the last one minute.")
sysGlobalHostCpuStolen5m = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 20, 41), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalHostCpuStolen5m.setStatus('current')
if mibBuilder.loadTexts: sysGlobalHostCpuStolen5m.setDescription("The average time 'stolen' from the system in the last five minutes.")
sysGlobalHostMemTotalKb = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 20, 42), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalHostMemTotalKb.setStatus('current')
if mibBuilder.loadTexts: sysGlobalHostMemTotalKb.setDescription('The total host memory in Kilobytes for the system.')
sysGlobalHostMemUsedKb = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 20, 43), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalHostMemUsedKb.setStatus('current')
if mibBuilder.loadTexts: sysGlobalHostMemUsedKb.setDescription('The host memory in Kilobytes currently in use for the system.')
sysGlobalHostOtherMemoryTotal = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 20, 44), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalHostOtherMemoryTotal.setStatus('current')
if mibBuilder.loadTexts: sysGlobalHostOtherMemoryTotal.setDescription('The total other non-TMM memory in bytes for the system.\n\t        Use sysGlobalHostOtherMemTotalKb for gauge type.')
sysGlobalHostOtherMemoryUsed = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 20, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalHostOtherMemoryUsed.setStatus('current')
if mibBuilder.loadTexts: sysGlobalHostOtherMemoryUsed.setDescription('The other non-TMM memory in bytes currently in use for the system.\n\t        Use sysGlobalHostOtherMemUsedKb for gauge type.')
sysGlobalHostSwapTotal = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 20, 46), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalHostSwapTotal.setStatus('current')
if mibBuilder.loadTexts: sysGlobalHostSwapTotal.setDescription('The total swap in bytes for the system.\n\t        Use sysGlobalHostSwapTotalKb for gauge type.')
sysGlobalHostSwapUsed = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 20, 47), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalHostSwapUsed.setStatus('current')
if mibBuilder.loadTexts: sysGlobalHostSwapUsed.setDescription('The swap in bytes currently in use for the system.\n\t        Use sysGlobalHostSwapUsedKb for gauge type.')
sysGlobalHostOtherMemTotalKb = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 20, 48), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalHostOtherMemTotalKb.setStatus('current')
if mibBuilder.loadTexts: sysGlobalHostOtherMemTotalKb.setDescription('The total other non-TMM memory in Kilobytes for the system.')
sysGlobalHostOtherMemUsedKb = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 20, 49), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalHostOtherMemUsedKb.setStatus('current')
if mibBuilder.loadTexts: sysGlobalHostOtherMemUsedKb.setDescription('The other non-TMM memory in Kilobytes currently in use for the system.')
sysGlobalHostSwapTotalKb = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 20, 50), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalHostSwapTotalKb.setStatus('current')
if mibBuilder.loadTexts: sysGlobalHostSwapTotalKb.setDescription('The total swap in Kilobytes for the system.')
sysGlobalHostSwapUsedKb = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 20, 51), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalHostSwapUsedKb.setStatus('current')
if mibBuilder.loadTexts: sysGlobalHostSwapUsedKb.setDescription('The swap in Kilobytes currently in use for the system.')
sysModuleAllocationNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysModuleAllocationNumber.setStatus('current')
if mibBuilder.loadTexts: sysModuleAllocationNumber.setDescription('The number of sysModuleAllocation entries in the table.')
sysModuleAllocationTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 1, 11, 1, 2), )
if mibBuilder.loadTexts: sysModuleAllocationTable.setStatus('current')
if mibBuilder.loadTexts: sysModuleAllocationTable.setDescription('Resource allocation information about modules on the system')
sysModuleAllocationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 1, 11, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-SYSTEM-MIB", "sysModuleAllocationName"))
if mibBuilder.loadTexts: sysModuleAllocationEntry.setStatus('current')
if mibBuilder.loadTexts: sysModuleAllocationEntry.setDescription('Columns in the sysModuleAllocation Table')
sysModuleAllocationName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 11, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysModuleAllocationName.setStatus('current')
if mibBuilder.loadTexts: sysModuleAllocationName.setDescription('The name of the Module')
sysModuleAllocationProvisionLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 11, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("minimum", 2), ("nominal", 3), ("dedicated", 4), ("custom", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysModuleAllocationProvisionLevel.setStatus('current')
if mibBuilder.loadTexts: sysModuleAllocationProvisionLevel.setDescription('The provisioning level indicates how the systems resources\n\t\tare distributed amongst the modules')
sysModuleAllocationMemoryRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 11, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysModuleAllocationMemoryRatio.setStatus('current')
if mibBuilder.loadTexts: sysModuleAllocationMemoryRatio.setDescription("The ratio of available memory to allocate. Only valid if level is 'custom'")
sysModuleAllocationCpuRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 11, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysModuleAllocationCpuRatio.setStatus('current')
if mibBuilder.loadTexts: sysModuleAllocationCpuRatio.setDescription("The ratio of CPU to allocate to this module. Only valid if level is 'custom'")
sysModuleAllocationDiskRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 11, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysModuleAllocationDiskRatio.setStatus('current')
if mibBuilder.loadTexts: sysModuleAllocationDiskRatio.setDescription("The ratio of available disk space to allocate to this module. Only valid if level is 'custom'")
sysGlobalTmmStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 21, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysGlobalTmmStatResetStats.setStatus('current')
if mibBuilder.loadTexts: sysGlobalTmmStatResetStats.setDescription('The action to reset resettable statistics data in sysGlobalTmmStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
sysGlobalTmmStatNpus = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 21, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalTmmStatNpus.setStatus('current')
if mibBuilder.loadTexts: sysGlobalTmmStatNpus.setDescription('The number of TMMs (Traffic Management Module) on the system.')
sysGlobalTmmStatClientPktsIn = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 21, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalTmmStatClientPktsIn.setStatus('current')
if mibBuilder.loadTexts: sysGlobalTmmStatClientPktsIn.setDescription('The number of packets received by the system from client-side.')
sysGlobalTmmStatClientBytesIn = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 21, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalTmmStatClientBytesIn.setStatus('current')
if mibBuilder.loadTexts: sysGlobalTmmStatClientBytesIn.setDescription('The number of bytes received by the system from client-side.')
sysGlobalTmmStatClientPktsOut = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 21, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalTmmStatClientPktsOut.setStatus('current')
if mibBuilder.loadTexts: sysGlobalTmmStatClientPktsOut.setDescription('The number of packets sent to client-side from the system.')
sysGlobalTmmStatClientBytesOut = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 21, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalTmmStatClientBytesOut.setStatus('current')
if mibBuilder.loadTexts: sysGlobalTmmStatClientBytesOut.setDescription('The number of bytes sent to client-side from the system.')
sysGlobalTmmStatClientMaxConns = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 21, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalTmmStatClientMaxConns.setStatus('current')
if mibBuilder.loadTexts: sysGlobalTmmStatClientMaxConns.setDescription('The maximum connections from client-side to the system.')
sysGlobalTmmStatClientTotConns = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 21, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalTmmStatClientTotConns.setStatus('current')
if mibBuilder.loadTexts: sysGlobalTmmStatClientTotConns.setDescription('The total connections from client-side to the system.')
sysGlobalTmmStatClientCurConns = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 21, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalTmmStatClientCurConns.setStatus('current')
if mibBuilder.loadTexts: sysGlobalTmmStatClientCurConns.setDescription('The current connections from client-side to the system.')
sysGlobalTmmStatServerPktsIn = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 21, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalTmmStatServerPktsIn.setStatus('current')
if mibBuilder.loadTexts: sysGlobalTmmStatServerPktsIn.setDescription('The number of packets received by the system from server-side.')
sysGlobalTmmStatServerBytesIn = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 21, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalTmmStatServerBytesIn.setStatus('current')
if mibBuilder.loadTexts: sysGlobalTmmStatServerBytesIn.setDescription('The number of bytes received by the system from server-side.')
sysGlobalTmmStatServerPktsOut = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 21, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalTmmStatServerPktsOut.setStatus('current')
if mibBuilder.loadTexts: sysGlobalTmmStatServerPktsOut.setDescription('The number of packets sent to server-side from the system.')
sysGlobalTmmStatServerBytesOut = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 21, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalTmmStatServerBytesOut.setStatus('current')
if mibBuilder.loadTexts: sysGlobalTmmStatServerBytesOut.setDescription('The number of bytes sent to server-side from the system.')
sysGlobalTmmStatServerMaxConns = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 21, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalTmmStatServerMaxConns.setStatus('current')
if mibBuilder.loadTexts: sysGlobalTmmStatServerMaxConns.setDescription('The maximum connections from server-side to the system.')
sysGlobalTmmStatServerTotConns = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 21, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalTmmStatServerTotConns.setStatus('current')
if mibBuilder.loadTexts: sysGlobalTmmStatServerTotConns.setDescription('The total connections from server-side to the system.')
sysGlobalTmmStatServerCurConns = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 21, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalTmmStatServerCurConns.setStatus('current')
if mibBuilder.loadTexts: sysGlobalTmmStatServerCurConns.setDescription('The current connections from server-side to the system.')
sysGlobalTmmStatMaintenanceModeDeny = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 21, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalTmmStatMaintenanceModeDeny.setStatus('current')
if mibBuilder.loadTexts: sysGlobalTmmStatMaintenanceModeDeny.setDescription('The connection requests rejected because the virtual\n\t\tserver was in maintenance mode. ')
sysGlobalTmmStatMaxConnVirtualAddrDeny = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 21, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalTmmStatMaxConnVirtualAddrDeny.setStatus('current')
if mibBuilder.loadTexts: sysGlobalTmmStatMaxConnVirtualAddrDeny.setDescription('The connection requests rejected because they exceeded\n\t\tthe connection limit for a virtual server address.')
sysGlobalTmmStatMaxConnVirtualPathDeny = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 21, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalTmmStatMaxConnVirtualPathDeny.setStatus('current')
if mibBuilder.loadTexts: sysGlobalTmmStatMaxConnVirtualPathDeny.setDescription('The connection requests rejected because they exceeded\n\t\tthe connection limit for a virtual server (IP:port).')
sysGlobalTmmStatVirtualServerNonSynDeny = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 21, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalTmmStatVirtualServerNonSynDeny.setStatus('current')
if mibBuilder.loadTexts: sysGlobalTmmStatVirtualServerNonSynDeny.setDescription('The packets that are not connection requests and are \n\t\tdestined for a virtual server that has no connection \n\t\tfor the client address.')
sysGlobalTmmStatNoHandlerDeny = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 21, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalTmmStatNoHandlerDeny.setStatus('current')
if mibBuilder.loadTexts: sysGlobalTmmStatNoHandlerDeny.setDescription('The incoming packets that could not be processed by a\n\t\tvirtual server, NAT, or SNAT.')
sysGlobalTmmStatLicenseDeny = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 21, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalTmmStatLicenseDeny.setStatus('current')
if mibBuilder.loadTexts: sysGlobalTmmStatLicenseDeny.setDescription('The packets which were dropped due to exceeding licensing \n\t\tlimitations.')
sysGlobalTmmStatCmpConnRedirected = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 21, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalTmmStatCmpConnRedirected.setStatus('current')
if mibBuilder.loadTexts: sysGlobalTmmStatCmpConnRedirected.setDescription('The connections that were redirected to a different TMM in the cluster.')
sysGlobalTmmStatConnectionMemoryErrors = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 21, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalTmmStatConnectionMemoryErrors.setStatus('current')
if mibBuilder.loadTexts: sysGlobalTmmStatConnectionMemoryErrors.setDescription('The connections could not be created because memory was not available.')
sysGlobalTmmStatTmTotalCycles = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 21, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalTmmStatTmTotalCycles.setStatus('deprecated')
if mibBuilder.loadTexts: sysGlobalTmmStatTmTotalCycles.setDescription('Deprecated! Please use the provided tmm usage ratios.\n\t\tTraffic management CPU usage. The total cycles spent in traffic management.')
sysGlobalTmmStatTmIdleCycles = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 21, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalTmmStatTmIdleCycles.setStatus('deprecated')
if mibBuilder.loadTexts: sysGlobalTmmStatTmIdleCycles.setDescription('Deprecated! Please use the provided tmm usage ratios.\n\t\tTraffic management CPU usage. The cycles spent polling with no traffic.')
sysGlobalTmmStatTmSleepCycles = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 21, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalTmmStatTmSleepCycles.setStatus('deprecated')
if mibBuilder.loadTexts: sysGlobalTmmStatTmSleepCycles.setDescription('Deprecated! Please use the provided tmm usage ratios.\n\t\tTraffic management CPU usage. The cycles yielded.')
sysGlobalTmmStatMemoryTotal = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 21, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalTmmStatMemoryTotal.setStatus('current')
if mibBuilder.loadTexts: sysGlobalTmmStatMemoryTotal.setDescription('The total memory available in bytes for TMM (Traffic Management Module).\n\t        Use sysGlobalTmmStatMemoryTotalKb for gauge type.')
sysGlobalTmmStatMemoryUsed = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 21, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalTmmStatMemoryUsed.setStatus('current')
if mibBuilder.loadTexts: sysGlobalTmmStatMemoryUsed.setDescription('The memory in use in bytes for TMM (Traffic Management Module).\n\t        Use sysGlobalTmmStatMemoryUsedKb for gauge type.')
sysGlobalTmmStatDroppedPackets = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 21, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalTmmStatDroppedPackets.setStatus('current')
if mibBuilder.loadTexts: sysGlobalTmmStatDroppedPackets.setDescription('The total dropped packets.')
sysGlobalTmmStatIncomingPacketErrors = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 21, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalTmmStatIncomingPacketErrors.setStatus('current')
if mibBuilder.loadTexts: sysGlobalTmmStatIncomingPacketErrors.setDescription('The total incoming packet errors for the system.')
sysGlobalTmmStatOutgoingPacketErrors = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 21, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalTmmStatOutgoingPacketErrors.setStatus('current')
if mibBuilder.loadTexts: sysGlobalTmmStatOutgoingPacketErrors.setDescription('The total outgoing packet errors for the system.')
sysGlobalTmmStatHttpRequests = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 21, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalTmmStatHttpRequests.setStatus('current')
if mibBuilder.loadTexts: sysGlobalTmmStatHttpRequests.setDescription('The total number of HTTP requests to the system.')
sysGlobalTmmStatTmUsageRatio5s = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 21, 34), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalTmmStatTmUsageRatio5s.setStatus('current')
if mibBuilder.loadTexts: sysGlobalTmmStatTmUsageRatio5s.setDescription('The percentage of time all TMMs were busy over the last 5 seconds.')
sysGlobalTmmStatTmUsageRatio1m = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 21, 35), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalTmmStatTmUsageRatio1m.setStatus('current')
if mibBuilder.loadTexts: sysGlobalTmmStatTmUsageRatio1m.setDescription('The percentage of time all TMMs were busy over the last 1 minute.')
sysGlobalTmmStatTmUsageRatio5m = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 21, 36), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalTmmStatTmUsageRatio5m.setStatus('current')
if mibBuilder.loadTexts: sysGlobalTmmStatTmUsageRatio5m.setDescription('The percentage of time all TMMs were busy over the last 5 minutes.')
sysGlobalTmmStatMemoryTotalKb = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 21, 37), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalTmmStatMemoryTotalKb.setStatus('current')
if mibBuilder.loadTexts: sysGlobalTmmStatMemoryTotalKb.setDescription('The total memory available in Kilobytes for TMM (Traffic Management Module).')
sysGlobalTmmStatMemoryUsedKb = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 21, 38), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalTmmStatMemoryUsedKb.setStatus('current')
if mibBuilder.loadTexts: sysGlobalTmmStatMemoryUsedKb.setDescription('The memory in use in Kilobytes for TMM (Traffic Management Module).')
sysGlobalTmmStatSwSyncookies = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 21, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalTmmStatSwSyncookies.setStatus('current')
if mibBuilder.loadTexts: sysGlobalTmmStatSwSyncookies.setDescription('The number of syn cookies received.')
sysGlobalTmmStatSwSyncookieAccepts = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 21, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalTmmStatSwSyncookieAccepts.setStatus('current')
if mibBuilder.loadTexts: sysGlobalTmmStatSwSyncookieAccepts.setDescription('The number of syn cookies received that were accepted.')
sysGlobalTmmStatSyncookieRejects = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 21, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalTmmStatSyncookieRejects.setStatus('current')
if mibBuilder.loadTexts: sysGlobalTmmStatSyncookieRejects.setDescription('The number of syn cookies received that were rejected.')
sysGlobalTmmStatHwSyncookies = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 21, 42), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalTmmStatHwSyncookies.setStatus('current')
if mibBuilder.loadTexts: sysGlobalTmmStatHwSyncookies.setDescription('The number of hardware syn cookies received.')
sysGlobalTmmStatHwSyncookieAccepts = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 21, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalTmmStatHwSyncookieAccepts.setStatus('current')
if mibBuilder.loadTexts: sysGlobalTmmStatHwSyncookieAccepts.setDescription('The number of hardware syn cookies received that were accepted.')
sysGlobalTmmStatWlSyncookieHits = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 21, 44), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalTmmStatWlSyncookieHits.setStatus('current')
if mibBuilder.loadTexts: sysGlobalTmmStatWlSyncookieHits.setDescription('The number of whitelist syn cookie hits.')
sysGlobalTmmStatWlSyncookieAccepts = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 21, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalTmmStatWlSyncookieAccepts.setStatus('current')
if mibBuilder.loadTexts: sysGlobalTmmStatWlSyncookieAccepts.setDescription('The number of whitelist syn cookies received that were accepted.')
sysGlobalTmmStatWlSyncookieRejects = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 21, 46), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalTmmStatWlSyncookieRejects.setStatus('current')
if mibBuilder.loadTexts: sysGlobalTmmStatWlSyncookieRejects.setDescription('The number of whitelist syn cookies received that were rejected.')
sysGlobalTmmStatConnectionFlowMiss = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 21, 47), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalTmmStatConnectionFlowMiss.setStatus('current')
if mibBuilder.loadTexts: sysGlobalTmmStatConnectionFlowMiss.setDescription('The number of TCP packets discarded due to the lack of an associated\n\t        flow.')
sysPlatformInfoName = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 5, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPlatformInfoName.setStatus('current')
if mibBuilder.loadTexts: sysPlatformInfoName.setDescription('The platform name')
sysPlatformInfoMarketingName = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 5, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPlatformInfoMarketingName.setStatus('current')
if mibBuilder.loadTexts: sysPlatformInfoMarketingName.setDescription('The system name used by marketing')
sysLogicalDiskNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 7, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLogicalDiskNumber.setStatus('current')
if mibBuilder.loadTexts: sysLogicalDiskNumber.setDescription('The number of sysLogicalDisk entries in the table.')
sysLogicalDiskTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 1, 7, 6, 2), )
if mibBuilder.loadTexts: sysLogicalDiskTable.setStatus('current')
if mibBuilder.loadTexts: sysLogicalDiskTable.setDescription('Logical disks status')
sysLogicalDiskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 1, 7, 6, 2, 1), ).setIndexNames((0, "F5-BIGIP-SYSTEM-MIB", "sysLogicalDiskSlotId"), (0, "F5-BIGIP-SYSTEM-MIB", "sysLogicalDiskName"))
if mibBuilder.loadTexts: sysLogicalDiskEntry.setStatus('current')
if mibBuilder.loadTexts: sysLogicalDiskEntry.setDescription('Columns in the sysLogicalDisk Table')
sysLogicalDiskSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 7, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLogicalDiskSlotId.setStatus('current')
if mibBuilder.loadTexts: sysLogicalDiskSlotId.setDescription('The slot ID.')
sysLogicalDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 7, 6, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLogicalDiskName.setStatus('current')
if mibBuilder.loadTexts: sysLogicalDiskName.setDescription('The logical disk name.')
sysLogicalDiskDevname = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 7, 6, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLogicalDiskDevname.setStatus('current')
if mibBuilder.loadTexts: sysLogicalDiskDevname.setDescription('The logical disk device name.')
sysLogicalDiskMedia = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 7, 6, 2, 1, 4), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLogicalDiskMedia.setStatus('current')
if mibBuilder.loadTexts: sysLogicalDiskMedia.setDescription('The logical disk media.')
sysLogicalDiskSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 7, 6, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLogicalDiskSize.setStatus('current')
if mibBuilder.loadTexts: sysLogicalDiskSize.setDescription('The size of logical disk')
sysLogicalDiskFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 7, 6, 2, 1, 6), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLogicalDiskFormat.setStatus('current')
if mibBuilder.loadTexts: sysLogicalDiskFormat.setDescription('The logical disk formate.')
sysPhysicalDiskNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 7, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPhysicalDiskNumber.setStatus('current')
if mibBuilder.loadTexts: sysPhysicalDiskNumber.setDescription('The number of sysPhysicalDisk entries in the table.')
sysPhysicalDiskTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 1, 7, 7, 2), )
if mibBuilder.loadTexts: sysPhysicalDiskTable.setStatus('current')
if mibBuilder.loadTexts: sysPhysicalDiskTable.setDescription('Physical disk status')
sysPhysicalDiskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 1, 7, 7, 2, 1), ).setIndexNames((0, "F5-BIGIP-SYSTEM-MIB", "sysPhysicalDiskSerialNumber"))
if mibBuilder.loadTexts: sysPhysicalDiskEntry.setStatus('current')
if mibBuilder.loadTexts: sysPhysicalDiskEntry.setDescription('Columns in the sysPhysicalDisk Table')
sysPhysicalDiskSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 7, 7, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPhysicalDiskSerialNumber.setStatus('current')
if mibBuilder.loadTexts: sysPhysicalDiskSerialNumber.setDescription('The serial number of physical disk')
sysPhysicalDiskSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 7, 7, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPhysicalDiskSlotId.setStatus('current')
if mibBuilder.loadTexts: sysPhysicalDiskSlotId.setDescription('The slot ID.')
sysPhysicalDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 7, 7, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPhysicalDiskName.setStatus('current')
if mibBuilder.loadTexts: sysPhysicalDiskName.setDescription('The physical disk name.')
sysPhysicalDiskIsArrayMember = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 7, 7, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPhysicalDiskIsArrayMember.setStatus('current')
if mibBuilder.loadTexts: sysPhysicalDiskIsArrayMember.setDescription('If the physical disk is the member of an array. Default is false')
sysPhysicalDiskArrayStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 7, 7, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("undefined", 0), ("ok", 1), ("replicating", 2), ("missing", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPhysicalDiskArrayStatus.setStatus('current')
if mibBuilder.loadTexts: sysPhysicalDiskArrayStatus.setDescription('The physical disk array status')
sysDiskBayNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 7, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDiskBayNumber.setStatus('current')
if mibBuilder.loadTexts: sysDiskBayNumber.setDescription('The number of sysDiskBay entries in the table.')
sysDiskBayTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 1, 7, 8, 2), )
if mibBuilder.loadTexts: sysDiskBayTable.setStatus('current')
if mibBuilder.loadTexts: sysDiskBayTable.setDescription('Disk bay status')
sysDiskBayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 1, 7, 8, 2, 1), ).setIndexNames((0, "F5-BIGIP-SYSTEM-MIB", "sysDiskBayId"))
if mibBuilder.loadTexts: sysDiskBayEntry.setStatus('current')
if mibBuilder.loadTexts: sysDiskBayEntry.setDescription('Columns in the sysDiskBay Table')
sysDiskBayId = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 7, 8, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDiskBayId.setStatus('current')
if mibBuilder.loadTexts: sysDiskBayId.setDescription('The disk bay ID.')
sysDiskBayDiskSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 7, 8, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDiskBayDiskSerialNumber.setStatus('current')
if mibBuilder.loadTexts: sysDiskBayDiskSerialNumber.setDescription('The serial number of physical disk')
sysLogicalDiskMembersNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 7, 9, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLogicalDiskMembersNumber.setStatus('current')
if mibBuilder.loadTexts: sysLogicalDiskMembersNumber.setDescription('The number of sysLogicalDiskMembers entries in the table.')
sysLogicalDiskMembersTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 1, 7, 9, 2), )
if mibBuilder.loadTexts: sysLogicalDiskMembersTable.setStatus('current')
if mibBuilder.loadTexts: sysLogicalDiskMembersTable.setDescription('Logical disk members status')
sysLogicalDiskMembersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 1, 7, 9, 2, 1), ).setIndexNames((0, "F5-BIGIP-SYSTEM-MIB", "sysLogicalDiskMembersDevname"), (0, "F5-BIGIP-SYSTEM-MIB", "sysLogicalDiskMembersSerialNumber"))
if mibBuilder.loadTexts: sysLogicalDiskMembersEntry.setStatus('current')
if mibBuilder.loadTexts: sysLogicalDiskMembersEntry.setDescription('Columns in the sysLogicalDiskMembers Table')
sysLogicalDiskMembersDevname = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 7, 9, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLogicalDiskMembersDevname.setStatus('current')
if mibBuilder.loadTexts: sysLogicalDiskMembersDevname.setDescription('device name of logical disk members')
sysLogicalDiskMembersSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 7, 9, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLogicalDiskMembersSerialNumber.setStatus('current')
if mibBuilder.loadTexts: sysLogicalDiskMembersSerialNumber.setDescription('The serial number of logical disk members')
sysLogicalDiskMembersSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 7, 9, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLogicalDiskMembersSlotId.setStatus('current')
if mibBuilder.loadTexts: sysLogicalDiskMembersSlotId.setDescription('The slot ID of logical disk members.')
sysProcPidStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysProcPidStatNumber.setStatus('current')
if mibBuilder.loadTexts: sysProcPidStatNumber.setDescription('The number of sysProcPidStat entries in the table.')
sysProcPidStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 1, 12, 1, 2), )
if mibBuilder.loadTexts: sysProcPidStatTable.setStatus('current')
if mibBuilder.loadTexts: sysProcPidStatTable.setDescription('individual process stat and statm')
sysProcPidStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 1, 12, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-SYSTEM-MIB", "sysProcPidStatBladeNum"), (0, "F5-BIGIP-SYSTEM-MIB", "sysProcPidStatPid"))
if mibBuilder.loadTexts: sysProcPidStatEntry.setStatus('current')
if mibBuilder.loadTexts: sysProcPidStatEntry.setDescription('Columns in the sysProcPidStat Table')
sysProcPidStatPid = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 12, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysProcPidStatPid.setStatus('current')
if mibBuilder.loadTexts: sysProcPidStatPid.setDescription('process pid')
sysProcPidStatProcName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 12, 1, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysProcPidStatProcName.setStatus('current')
if mibBuilder.loadTexts: sysProcPidStatProcName.setDescription('process name')
sysProcPidStatCommandLine = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 12, 1, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysProcPidStatCommandLine.setStatus('current')
if mibBuilder.loadTexts: sysProcPidStatCommandLine.setDescription('command line used to start process')
sysProcPidStatModules = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 12, 1, 2, 1, 4), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysProcPidStatModules.setStatus('current')
if mibBuilder.loadTexts: sysProcPidStatModules.setDescription('module name of this process')
sysProcPidStatBladeNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 12, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysProcPidStatBladeNum.setStatus('current')
if mibBuilder.loadTexts: sysProcPidStatBladeNum.setDescription('blade number')
sysProcPidStatProcessor = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 12, 1, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysProcPidStatProcessor.setStatus('current')
if mibBuilder.loadTexts: sysProcPidStatProcessor.setDescription('last CPU process run on')
sysProcPidStatUpdateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 12, 1, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysProcPidStatUpdateTime.setStatus('current')
if mibBuilder.loadTexts: sysProcPidStatUpdateTime.setDescription('last time proc_pid_stat updated')
sysProcPidStatCpuUsageRecent = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 12, 1, 2, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysProcPidStatCpuUsageRecent.setStatus('current')
if mibBuilder.loadTexts: sysProcPidStatCpuUsageRecent.setDescription('last poll interval cpu usage (percentage)')
sysProcPidStatCpuUsage1min = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 12, 1, 2, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysProcPidStatCpuUsage1min.setStatus('current')
if mibBuilder.loadTexts: sysProcPidStatCpuUsage1min.setDescription('last 1 min average cpu usage (percentage)')
sysProcPidStatCpuUsage5mins = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 12, 1, 2, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysProcPidStatCpuUsage5mins.setStatus('current')
if mibBuilder.loadTexts: sysProcPidStatCpuUsage5mins.setDescription('last 5 mins average cpu usage (percentage)')
sysProcPidStatSystemUsageRecent = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 12, 1, 2, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysProcPidStatSystemUsageRecent.setStatus('current')
if mibBuilder.loadTexts: sysProcPidStatSystemUsageRecent.setDescription('last poll interval system usage (percentage)')
sysProcPidStatSystemUsage1min = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 12, 1, 2, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysProcPidStatSystemUsage1min.setStatus('current')
if mibBuilder.loadTexts: sysProcPidStatSystemUsage1min.setDescription('last 1 min average system usage (percentage)')
sysProcPidStatSystemUsage5mins = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 12, 1, 2, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysProcPidStatSystemUsage5mins.setStatus('current')
if mibBuilder.loadTexts: sysProcPidStatSystemUsage5mins.setDescription('last 5 mins average system usage (percentage)')
sysProcPidStatPpid = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 12, 1, 2, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysProcPidStatPpid.setStatus('current')
if mibBuilder.loadTexts: sysProcPidStatPpid.setDescription('pid of process parent')
sysProcPidStatPgrp = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 12, 1, 2, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysProcPidStatPgrp.setStatus('current')
if mibBuilder.loadTexts: sysProcPidStatPgrp.setDescription('process group id')
sysProcPidStatState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 12, 1, 2, 1, 16), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysProcPidStatState.setStatus('current')
if mibBuilder.loadTexts: sysProcPidStatState.setDescription('single-char code for process state (S=sleep)')
sysProcPidStatSession = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 12, 1, 2, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysProcPidStatSession.setStatus('current')
if mibBuilder.loadTexts: sysProcPidStatSession.setDescription('session id')
sysProcPidStatTtyNr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 12, 1, 2, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysProcPidStatTtyNr.setStatus('current')
if mibBuilder.loadTexts: sysProcPidStatTtyNr.setDescription('full device number of controlling terminal')
sysProcPidStatTpgid = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 12, 1, 2, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysProcPidStatTpgid.setStatus('current')
if mibBuilder.loadTexts: sysProcPidStatTpgid.setDescription('terminal process group id')
sysProcPidStatFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 12, 1, 2, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysProcPidStatFlags.setStatus('current')
if mibBuilder.loadTexts: sysProcPidStatFlags.setDescription('kernel flags for the process')
sysProcPidStatMinFlt = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 12, 1, 2, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysProcPidStatMinFlt.setStatus('current')
if mibBuilder.loadTexts: sysProcPidStatMinFlt.setDescription('num minor pg faults since process start')
sysProcPidStatCminFlt = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 12, 1, 2, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysProcPidStatCminFlt.setStatus('current')
if mibBuilder.loadTexts: sysProcPidStatCminFlt.setDescription('num minor pg faults of child processes')
sysProcPidStatMajFlt = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 12, 1, 2, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysProcPidStatMajFlt.setStatus('current')
if mibBuilder.loadTexts: sysProcPidStatMajFlt.setDescription('num major pg faults since process start')
sysProcPidStatCmajFlt = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 12, 1, 2, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysProcPidStatCmajFlt.setStatus('current')
if mibBuilder.loadTexts: sysProcPidStatCmajFlt.setDescription('num major pg faults of child processes')
sysProcPidStatUtime = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 12, 1, 2, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysProcPidStatUtime.setStatus('current')
if mibBuilder.loadTexts: sysProcPidStatUtime.setDescription('user-mode CPU time accumulated by process')
sysProcPidStatStime = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 12, 1, 2, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysProcPidStatStime.setStatus('current')
if mibBuilder.loadTexts: sysProcPidStatStime.setDescription('kernel-mode CPU time accumulated by process')
sysProcPidStatCutime = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 12, 1, 2, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysProcPidStatCutime.setStatus('current')
if mibBuilder.loadTexts: sysProcPidStatCutime.setDescription('cumul utime of process + reaped children')
sysProcPidStatCstime = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 12, 1, 2, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysProcPidStatCstime.setStatus('current')
if mibBuilder.loadTexts: sysProcPidStatCstime.setDescription('cumul stime of process + reaped children')
sysProcPidStatPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 12, 1, 2, 1, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysProcPidStatPriority.setStatus('current')
if mibBuilder.loadTexts: sysProcPidStatPriority.setDescription('kernel scheduling priority')
sysProcPidStatNice = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 12, 1, 2, 1, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysProcPidStatNice.setStatus('current')
if mibBuilder.loadTexts: sysProcPidStatNice.setDescription('standard unix nice level of process')
sysProcPidStatNumThreads = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 12, 1, 2, 1, 31), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysProcPidStatNumThreads.setStatus('current')
if mibBuilder.loadTexts: sysProcPidStatNumThreads.setDescription('Number of threads in this process')
sysProcPidStatItrealvalue = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 12, 1, 2, 1, 32), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysProcPidStatItrealvalue.setStatus('current')
if mibBuilder.loadTexts: sysProcPidStatItrealvalue.setDescription('Time in jiffies before next SIGALRM sent')
sysProcPidStatStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 12, 1, 2, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysProcPidStatStartTime.setStatus('current')
if mibBuilder.loadTexts: sysProcPidStatStartTime.setDescription('start time of process - sec since 1-1-70')
sysProcPidStatVsize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 12, 1, 2, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysProcPidStatVsize.setStatus('current')
if mibBuilder.loadTexts: sysProcPidStatVsize.setDescription('Virtual memory size in bytes.\n\t        Use sysProcPidStatVsizeKb for gauge type.')
sysProcPidStatRss = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 12, 1, 2, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysProcPidStatRss.setStatus('current')
if mibBuilder.loadTexts: sysProcPidStatRss.setDescription('resident set size (pg)')
sysProcPidStatRssRlim = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 12, 1, 2, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysProcPidStatRssRlim.setStatus('current')
if mibBuilder.loadTexts: sysProcPidStatRssRlim.setDescription('resident set size limit')
sysProcPidStatStartCode = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 12, 1, 2, 1, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysProcPidStatStartCode.setStatus('current')
if mibBuilder.loadTexts: sysProcPidStatStartCode.setDescription('address of beginning of code segment')
sysProcPidStatEndCode = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 12, 1, 2, 1, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysProcPidStatEndCode.setStatus('current')
if mibBuilder.loadTexts: sysProcPidStatEndCode.setDescription('address of end of code segment')
sysProcPidStatStartStack = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 12, 1, 2, 1, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysProcPidStatStartStack.setStatus('current')
if mibBuilder.loadTexts: sysProcPidStatStartStack.setDescription('addr of the bottom of stack for process')
sysProcPidStatKstkEsp = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 12, 1, 2, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysProcPidStatKstkEsp.setStatus('current')
if mibBuilder.loadTexts: sysProcPidStatKstkEsp.setDescription('kernel stack pointer')
sysProcPidStatKstkEip = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 12, 1, 2, 1, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysProcPidStatKstkEip.setStatus('current')
if mibBuilder.loadTexts: sysProcPidStatKstkEip.setDescription('kernel instruction pointer')
sysProcPidStatSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 12, 1, 2, 1, 42), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysProcPidStatSignal.setStatus('current')
if mibBuilder.loadTexts: sysProcPidStatSignal.setDescription('bit map of pending signals')
sysProcPidStatBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 12, 1, 2, 1, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysProcPidStatBlocked.setStatus('current')
if mibBuilder.loadTexts: sysProcPidStatBlocked.setDescription('mask of blocked signals')
sysProcPidStatSigignore = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 12, 1, 2, 1, 44), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysProcPidStatSigignore.setStatus('current')
if mibBuilder.loadTexts: sysProcPidStatSigignore.setDescription('mask of ignored signals')
sysProcPidStatSigcatch = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 12, 1, 2, 1, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysProcPidStatSigcatch.setStatus('current')
if mibBuilder.loadTexts: sysProcPidStatSigcatch.setDescription('mask of caught  signals')
sysProcPidStatWchan = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 12, 1, 2, 1, 46), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysProcPidStatWchan.setStatus('current')
if mibBuilder.loadTexts: sysProcPidStatWchan.setDescription('address of kernel wait channel proc is')
sysProcPidStatNswap = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 12, 1, 2, 1, 47), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysProcPidStatNswap.setStatus('current')
if mibBuilder.loadTexts: sysProcPidStatNswap.setDescription('number of page swapped')
sysProcPidStatCnswap = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 12, 1, 2, 1, 48), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysProcPidStatCnswap.setStatus('current')
if mibBuilder.loadTexts: sysProcPidStatCnswap.setDescription('cumulative number of page swapped')
sysProcPidStatExitSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 12, 1, 2, 1, 49), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysProcPidStatExitSignal.setStatus('current')
if mibBuilder.loadTexts: sysProcPidStatExitSignal.setDescription('might not be SIGCHLD')
sysProcPidStatRtPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 12, 1, 2, 1, 50), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysProcPidStatRtPriority.setStatus('current')
if mibBuilder.loadTexts: sysProcPidStatRtPriority.setDescription('real-time priority')
sysProcPidStatPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 12, 1, 2, 1, 51), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysProcPidStatPolicy.setStatus('current')
if mibBuilder.loadTexts: sysProcPidStatPolicy.setDescription('schedule policy')
sysProcPidStatProgSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 12, 1, 2, 1, 52), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysProcPidStatProgSize.setStatus('current')
if mibBuilder.loadTexts: sysProcPidStatProgSize.setDescription('Total program size, measured in pages.')
sysProcPidStatResident = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 12, 1, 2, 1, 53), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysProcPidStatResident.setStatus('current')
if mibBuilder.loadTexts: sysProcPidStatResident.setDescription('resident size')
sysProcPidStatShare = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 12, 1, 2, 1, 54), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysProcPidStatShare.setStatus('current')
if mibBuilder.loadTexts: sysProcPidStatShare.setDescription('shared pages')
sysProcPidStatTSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 12, 1, 2, 1, 55), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysProcPidStatTSize.setStatus('current')
if mibBuilder.loadTexts: sysProcPidStatTSize.setDescription('text (code)')
sysProcPidStatLSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 12, 1, 2, 1, 56), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysProcPidStatLSize.setStatus('current')
if mibBuilder.loadTexts: sysProcPidStatLSize.setDescription('library, not used in Linux 2.6')
sysProcPidStatDSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 12, 1, 2, 1, 57), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysProcPidStatDSize.setStatus('current')
if mibBuilder.loadTexts: sysProcPidStatDSize.setDescription('data + stack, not used in Linux 2.6')
sysProcPidStatDirty = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 12, 1, 2, 1, 58), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysProcPidStatDirty.setStatus('current')
if mibBuilder.loadTexts: sysProcPidStatDirty.setDescription('dirty pages, not used in Linux 2.6')
sysProcPidStatVsizeKb = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 12, 1, 2, 1, 59), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysProcPidStatVsizeKb.setStatus('current')
if mibBuilder.loadTexts: sysProcPidStatVsizeKb.setDescription('Virtual memory size in Kilobytes.')
sysHttpCompressionStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 22, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysHttpCompressionStatResetStats.setStatus('current')
if mibBuilder.loadTexts: sysHttpCompressionStatResetStats.setDescription('The action to reset resettable statistics data in sysGlobalHttpCompressionStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
sysHttpCompressionStatPrecompressBytes = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 22, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHttpCompressionStatPrecompressBytes.setStatus('current')
if mibBuilder.loadTexts: sysHttpCompressionStatPrecompressBytes.setDescription('The number of response bytes before compression has taken place.')
sysHttpCompressionStatPostcompressBytes = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 22, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHttpCompressionStatPostcompressBytes.setStatus('current')
if mibBuilder.loadTexts: sysHttpCompressionStatPostcompressBytes.setDescription('The number of response bytes after compression has taken place.')
sysHttpCompressionStatNullCompressBytes = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 22, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHttpCompressionStatNullCompressBytes.setStatus('current')
if mibBuilder.loadTexts: sysHttpCompressionStatNullCompressBytes.setDescription('The number of bytes subjected to NULL compression (for license enforcement).')
sysHttpCompressionStatHtmlPrecompressBytes = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 22, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHttpCompressionStatHtmlPrecompressBytes.setStatus('current')
if mibBuilder.loadTexts: sysHttpCompressionStatHtmlPrecompressBytes.setDescription('The number of pre-compressed bytes for the MIME-Types: HTML.')
sysHttpCompressionStatHtmlPostcompressBytes = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 22, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHttpCompressionStatHtmlPostcompressBytes.setStatus('current')
if mibBuilder.loadTexts: sysHttpCompressionStatHtmlPostcompressBytes.setDescription('The number of post-compressed bytes for the MIME-Types: HTML.')
sysHttpCompressionStatCssPrecompressBytes = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 22, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHttpCompressionStatCssPrecompressBytes.setStatus('current')
if mibBuilder.loadTexts: sysHttpCompressionStatCssPrecompressBytes.setDescription('The number of pre-compressed bytes for the MIME-Types: CSS.')
sysHttpCompressionStatCssPostcompressBytes = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 22, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHttpCompressionStatCssPostcompressBytes.setStatus('current')
if mibBuilder.loadTexts: sysHttpCompressionStatCssPostcompressBytes.setDescription('The number of post-compressed bytes for the MIME-Types: CSS.')
sysHttpCompressionStatJsPrecompressBytes = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 22, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHttpCompressionStatJsPrecompressBytes.setStatus('current')
if mibBuilder.loadTexts: sysHttpCompressionStatJsPrecompressBytes.setDescription('The number of pre-compressed bytes for the MIME-Types: Javascript.')
sysHttpCompressionStatJsPostcompressBytes = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 22, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHttpCompressionStatJsPostcompressBytes.setStatus('current')
if mibBuilder.loadTexts: sysHttpCompressionStatJsPostcompressBytes.setDescription('The number of post-compressed bytes for the MIME-Types: Javascript.')
sysHttpCompressionStatXmlPrecompressBytes = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 22, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHttpCompressionStatXmlPrecompressBytes.setStatus('current')
if mibBuilder.loadTexts: sysHttpCompressionStatXmlPrecompressBytes.setDescription('The number of pre-compressed bytes for the MIME-Types: XML.')
sysHttpCompressionStatXmlPostcompressBytes = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 22, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHttpCompressionStatXmlPostcompressBytes.setStatus('current')
if mibBuilder.loadTexts: sysHttpCompressionStatXmlPostcompressBytes.setDescription('The number of post-compressed bytes for the MIME-Types: XML.')
sysHttpCompressionStatSgmlPrecompressBytes = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 22, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHttpCompressionStatSgmlPrecompressBytes.setStatus('current')
if mibBuilder.loadTexts: sysHttpCompressionStatSgmlPrecompressBytes.setDescription('The number of pre-compressed bytes for the MIME-Types: SGML.')
sysHttpCompressionStatSgmlPostcompressBytes = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 22, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHttpCompressionStatSgmlPostcompressBytes.setStatus('current')
if mibBuilder.loadTexts: sysHttpCompressionStatSgmlPostcompressBytes.setDescription('The number of post-compressed bytes for the MIME-Types: SGML.')
sysHttpCompressionStatPlainPrecompressBytes = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 22, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHttpCompressionStatPlainPrecompressBytes.setStatus('current')
if mibBuilder.loadTexts: sysHttpCompressionStatPlainPrecompressBytes.setDescription('The number of pre-compressed bytes for the MIME-Types: Plain.')
sysHttpCompressionStatPlainPostcompressBytes = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 22, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHttpCompressionStatPlainPostcompressBytes.setStatus('current')
if mibBuilder.loadTexts: sysHttpCompressionStatPlainPostcompressBytes.setDescription('The number of post-compressed bytes for the MIME-Types: Plain.')
sysHttpCompressionStatOctetPrecompressBytes = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 22, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHttpCompressionStatOctetPrecompressBytes.setStatus('current')
if mibBuilder.loadTexts: sysHttpCompressionStatOctetPrecompressBytes.setDescription('The number of pre-compressed bytes for the MIME-Types: Octet stream.')
sysHttpCompressionStatOctetPostcompressBytes = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 22, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHttpCompressionStatOctetPostcompressBytes.setStatus('current')
if mibBuilder.loadTexts: sysHttpCompressionStatOctetPostcompressBytes.setDescription('The number of post-compressed bytes for the MIME-Types: Octet stream.')
sysHttpCompressionStatImagePrecompressBytes = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 22, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHttpCompressionStatImagePrecompressBytes.setStatus('current')
if mibBuilder.loadTexts: sysHttpCompressionStatImagePrecompressBytes.setDescription('The number of pre-compressed bytes for the MIME-Types: Images.')
sysHttpCompressionStatImagePostcompressBytes = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 22, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHttpCompressionStatImagePostcompressBytes.setStatus('current')
if mibBuilder.loadTexts: sysHttpCompressionStatImagePostcompressBytes.setDescription('The number of post-compressed bytes for the MIME-Types: Images.')
sysHttpCompressionStatVideoPrecompressBytes = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 22, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHttpCompressionStatVideoPrecompressBytes.setStatus('current')
if mibBuilder.loadTexts: sysHttpCompressionStatVideoPrecompressBytes.setDescription('The number of pre-compressed bytes for the MIME-Types: Video files.')
sysHttpCompressionStatVideoPostcompressBytes = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 22, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHttpCompressionStatVideoPostcompressBytes.setStatus('current')
if mibBuilder.loadTexts: sysHttpCompressionStatVideoPostcompressBytes.setDescription('The number of post-compressed bytes for the MIME-Types: Video files.')
sysHttpCompressionStatAudioPrecompressBytes = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 22, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHttpCompressionStatAudioPrecompressBytes.setStatus('current')
if mibBuilder.loadTexts: sysHttpCompressionStatAudioPrecompressBytes.setDescription('The number of pre-compressed bytes for the MIME-Types: Audio files.')
sysHttpCompressionStatAudioPostcompressBytes = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 22, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHttpCompressionStatAudioPostcompressBytes.setStatus('current')
if mibBuilder.loadTexts: sysHttpCompressionStatAudioPostcompressBytes.setDescription('The number of post-compressed bytes for the MIME-Types: Audio files.')
sysHttpCompressionStatOtherPrecompressBytes = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 22, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHttpCompressionStatOtherPrecompressBytes.setStatus('current')
if mibBuilder.loadTexts: sysHttpCompressionStatOtherPrecompressBytes.setDescription('The number of pre-compressed bytes for the MIME-Types: other than \n\t\tHTML, CSS, Javascript, XML, SGML, Plain, Images, Video files, \n\t\tAudio files.')
sysHttpCompressionStatOtherPostcompressBytes = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 22, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHttpCompressionStatOtherPostcompressBytes.setStatus('current')
if mibBuilder.loadTexts: sysHttpCompressionStatOtherPostcompressBytes.setDescription('The number of post-compressed bytes for the MIME-Types: other than \n\t\tHTML, CSS, Javascript, XML, SGML, Plain, Images, Video files, \n\t\tAudio files.')
sysWebAccelerationStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 23, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysWebAccelerationStatResetStats.setStatus('current')
if mibBuilder.loadTexts: sysWebAccelerationStatResetStats.setDescription('The action to reset resettable statistics data in sysGlobalWebAccelerationStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
sysWebAccelerationStatCacheHits = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 23, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysWebAccelerationStatCacheHits.setStatus('current')
if mibBuilder.loadTexts: sysWebAccelerationStatCacheHits.setDescription('The number of cache hits.')
sysWebAccelerationStatCacheMisses = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 23, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysWebAccelerationStatCacheMisses.setStatus('current')
if mibBuilder.loadTexts: sysWebAccelerationStatCacheMisses.setDescription('The number of cache misses, excluding un-cacheable data.')
sysWebAccelerationStatCacheMissesAll = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 23, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysWebAccelerationStatCacheMissesAll.setStatus('current')
if mibBuilder.loadTexts: sysWebAccelerationStatCacheMissesAll.setDescription('The total number of cache misses.')
sysWebAccelerationStatCacheHitBytes = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 23, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysWebAccelerationStatCacheHitBytes.setStatus('current')
if mibBuilder.loadTexts: sysWebAccelerationStatCacheHitBytes.setDescription('The number of cache hits in bytes.')
sysWebAccelerationStatCacheMissBytes = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 23, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysWebAccelerationStatCacheMissBytes.setStatus('current')
if mibBuilder.loadTexts: sysWebAccelerationStatCacheMissBytes.setDescription('The number of cache misses in bytes, excluding un-cacheable data.')
sysWebAccelerationStatCacheMissBytesAll = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 23, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysWebAccelerationStatCacheMissBytesAll.setStatus('current')
if mibBuilder.loadTexts: sysWebAccelerationStatCacheMissBytesAll.setDescription('The total number of cache misses in bytes.')
sysWebAccelerationStatCacheSize = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 23, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysWebAccelerationStatCacheSize.setStatus('current')
if mibBuilder.loadTexts: sysWebAccelerationStatCacheSize.setDescription('The current cache size (in bytes).')
sysWebAccelerationStatCacheCount = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 23, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysWebAccelerationStatCacheCount.setStatus('current')
if mibBuilder.loadTexts: sysWebAccelerationStatCacheCount.setDescription('The number of items stored in cache.')
sysWebAccelerationStatCacheEvictions = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 23, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysWebAccelerationStatCacheEvictions.setStatus('current')
if mibBuilder.loadTexts: sysWebAccelerationStatCacheEvictions.setDescription('The number of cache evictions.')
sysWebAccelerationStatInterStripeHits = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 23, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysWebAccelerationStatInterStripeHits.setStatus('current')
if mibBuilder.loadTexts: sysWebAccelerationStatInterStripeHits.setDescription('The number of inter-stripe cache hits.')
sysWebAccelerationStatInterStripeMisses = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 23, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysWebAccelerationStatInterStripeMisses.setStatus('current')
if mibBuilder.loadTexts: sysWebAccelerationStatInterStripeMisses.setDescription('The number of inter-stripe cache misses.')
sysWebAccelerationStatInterStripeHitBytes = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 23, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysWebAccelerationStatInterStripeHitBytes.setStatus('current')
if mibBuilder.loadTexts: sysWebAccelerationStatInterStripeHitBytes.setDescription('The number of inter-stripe cache hits in bytes.')
sysWebAccelerationStatInterStripeSize = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 23, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysWebAccelerationStatInterStripeSize.setStatus('current')
if mibBuilder.loadTexts: sysWebAccelerationStatInterStripeSize.setDescription('The current inter-stripe cache size (in bytes).')
sysWebAccelerationStatInterStripeCount = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 23, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysWebAccelerationStatInterStripeCount.setStatus('current')
if mibBuilder.loadTexts: sysWebAccelerationStatInterStripeCount.setDescription('The number of items stored in inter-stripe cache.')
sysWebAccelerationStatInterStripeEvictions = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 23, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysWebAccelerationStatInterStripeEvictions.setStatus('current')
if mibBuilder.loadTexts: sysWebAccelerationStatInterStripeEvictions.setDescription('The number of inter-stripe cache evictions.')
sysWebAccelerationStatRemoteHits = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 23, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysWebAccelerationStatRemoteHits.setStatus('current')
if mibBuilder.loadTexts: sysWebAccelerationStatRemoteHits.setDescription('The number of remote cache hits.')
sysWebAccelerationStatRemoteMisses = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 23, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysWebAccelerationStatRemoteMisses.setStatus('current')
if mibBuilder.loadTexts: sysWebAccelerationStatRemoteMisses.setDescription('The number of remote cache misses.')
sysWebAccelerationStatRemoteHitBytes = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 23, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysWebAccelerationStatRemoteHitBytes.setStatus('current')
if mibBuilder.loadTexts: sysWebAccelerationStatRemoteHitBytes.setDescription('The number of remote cache hits in bytes.')
sysVlanStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 13, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVlanStatNumber.setStatus('current')
if mibBuilder.loadTexts: sysVlanStatNumber.setDescription('The number of sysVlanStat entries in the table.')
sysVlanStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 13, 6, 2), )
if mibBuilder.loadTexts: sysVlanStatTable.setStatus('current')
if mibBuilder.loadTexts: sysVlanStatTable.setDescription('Vlan statistics, sum of its interfaces interface_stat.')
sysVlanStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 13, 6, 2, 1), ).setIndexNames((0, "F5-BIGIP-SYSTEM-MIB", "sysVlanStatVlanName"))
if mibBuilder.loadTexts: sysVlanStatEntry.setStatus('current')
if mibBuilder.loadTexts: sysVlanStatEntry.setDescription('Columns in the sysVlanStat Table')
sysVlanStatVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 13, 6, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVlanStatVlanName.setStatus('current')
if mibBuilder.loadTexts: sysVlanStatVlanName.setDescription('The name of a VLAN.')
sysVlanStatPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 13, 6, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVlanStatPktsIn.setStatus('current')
if mibBuilder.loadTexts: sysVlanStatPktsIn.setDescription('The number of packets received on this vlan.')
sysVlanStatBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 13, 6, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVlanStatBytesIn.setStatus('current')
if mibBuilder.loadTexts: sysVlanStatBytesIn.setDescription('The number of bytes received on the specified vlan.')
sysVlanStatPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 13, 6, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVlanStatPktsOut.setStatus('current')
if mibBuilder.loadTexts: sysVlanStatPktsOut.setDescription('The number of packets transmitted out of the specified vlan.')
sysVlanStatBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 13, 6, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVlanStatBytesOut.setStatus('current')
if mibBuilder.loadTexts: sysVlanStatBytesOut.setDescription('The number of bytes transmitted out of the specified vlan.')
sysVlanStatMcastIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 13, 6, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVlanStatMcastIn.setStatus('current')
if mibBuilder.loadTexts: sysVlanStatMcastIn.setDescription('The number of multicast packets received on the specified vlan.')
sysVlanStatMcastOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 13, 6, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVlanStatMcastOut.setStatus('current')
if mibBuilder.loadTexts: sysVlanStatMcastOut.setDescription('The number of multicast packets transmitted out of the specified vlan.')
sysVlanStatErrorsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 13, 6, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVlanStatErrorsIn.setStatus('current')
if mibBuilder.loadTexts: sysVlanStatErrorsIn.setDescription('The number of received packets that are either undersized, \n\t\toversized, or have FCS errors by the specified vlan.')
sysVlanStatErrorsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 13, 6, 2, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVlanStatErrorsOut.setStatus('current')
if mibBuilder.loadTexts: sysVlanStatErrorsOut.setDescription('The number of excessive collisions, incremented for each \n\t\tframe that experienced 16 collisions during transmission and \n\t\twas aborted on the specified vlan.')
sysVlanStatDropsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 13, 6, 2, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVlanStatDropsIn.setStatus('current')
if mibBuilder.loadTexts: sysVlanStatDropsIn.setDescription('The number of packets dropped on ingress for various reasons on the specified vlan.')
sysVlanStatDropsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 13, 6, 2, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVlanStatDropsOut.setStatus('current')
if mibBuilder.loadTexts: sysVlanStatDropsOut.setDescription('The number of packets aged out or with excessive transmission \n\t\tdelays due to multiple deferrals on the specified vlan.')
sysVlanStatCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 13, 6, 2, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVlanStatCollisions.setStatus('current')
if mibBuilder.loadTexts: sysVlanStatCollisions.setDescription('The number of collisions on the specified vlan, incremented by the \n\t\tnumber of collisions experienced during transmissions of a frame')
sysVlanxStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 13, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVlanxStatNumber.setStatus('current')
if mibBuilder.loadTexts: sysVlanxStatNumber.setDescription('The number of sysVlanxStat entries in the table.')
sysVlanxStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 13, 7, 2), )
if mibBuilder.loadTexts: sysVlanxStatTable.setStatus('current')
if mibBuilder.loadTexts: sysVlanxStatTable.setDescription('Vlan statistics, sum of its interfaces ifx_stat.')
sysVlanxStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 13, 7, 2, 1), ).setIndexNames((0, "F5-BIGIP-SYSTEM-MIB", "sysVlanxStatVlanName"))
if mibBuilder.loadTexts: sysVlanxStatEntry.setStatus('current')
if mibBuilder.loadTexts: sysVlanxStatEntry.setDescription('Columns in the sysVlanxStat Table')
sysVlanxStatVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 13, 7, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVlanxStatVlanName.setStatus('current')
if mibBuilder.loadTexts: sysVlanxStatVlanName.setDescription('The name of a VLAN.')
sysVlanxStatInMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 13, 7, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVlanxStatInMulticastPkts.setStatus('current')
if mibBuilder.loadTexts: sysVlanxStatInMulticastPkts.setDescription('The number of packets, delivered by this sub-layer to a\n\t\thigher (sub-)layer, which were addressed to a multicast\n\t\taddress at this sub-layer.  For a MAC layer protocol, this\n\t\tincludes both Group and Functional addresses.')
sysVlanxStatInBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 13, 7, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVlanxStatInBroadcastPkts.setStatus('current')
if mibBuilder.loadTexts: sysVlanxStatInBroadcastPkts.setDescription('The number of packets, delivered by this sub-layer to a\n\t\thigher (sub-)layer, which were addressed to a broadcast\n\t\taddress at this sub-layer.')
sysVlanxStatOutMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 13, 7, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVlanxStatOutMulticastPkts.setStatus('current')
if mibBuilder.loadTexts: sysVlanxStatOutMulticastPkts.setDescription('The total number of packets that higher-level protocols\n\t\trequested be transmitted, and which were addressed to a\n\t\tmulticast address at this sub-layer, including those that\n\t\twere discarded or not sent.  For a MAC layer protocol, this\n\t\tincludes both Group and Functional addresses.')
sysVlanxStatOutBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 13, 7, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVlanxStatOutBroadcastPkts.setStatus('current')
if mibBuilder.loadTexts: sysVlanxStatOutBroadcastPkts.setDescription('The total number of packets that higher-level protocols\n\t\trequested be transmitted, and which were addressed to a\n\t\tbroadcast address at this sub-layer, including those that\n\t\twere discarded or not sent.')
sysVlanxStatHcInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 13, 7, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVlanxStatHcInOctets.setStatus('current')
if mibBuilder.loadTexts: sysVlanxStatHcInOctets.setDescription('The total number of octets received on the interface,\n\t\tincluding framing characters.')
sysVlanxStatHcInUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 13, 7, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVlanxStatHcInUcastPkts.setStatus('current')
if mibBuilder.loadTexts: sysVlanxStatHcInUcastPkts.setDescription('The number of packets, delivered by this sub-layer to a\n\t\thigher (sub-)layer, which were not addressed to a multicast\n\t\tor broadcast address at this sub-layer.')
sysVlanxStatHcInMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 13, 7, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVlanxStatHcInMulticastPkts.setStatus('current')
if mibBuilder.loadTexts: sysVlanxStatHcInMulticastPkts.setDescription('The number of packets, delivered by this sub-layer to a\n\t\thigher (sub-)layer, which were addressed to a multicast\n\t\taddress at this sub-layer.  For a MAC layer protocol, this\n\t\tincludes both Group and Functional addresses.')
sysVlanxStatHcInBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 13, 7, 2, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVlanxStatHcInBroadcastPkts.setStatus('current')
if mibBuilder.loadTexts: sysVlanxStatHcInBroadcastPkts.setDescription('The number of packets, delivered by this sub-layer to a\n\t\thigher (sub-)layer, which were addressed to a broadcast\n\t\taddress at this sub-layer.')
sysVlanxStatHcOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 13, 7, 2, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVlanxStatHcOutOctets.setStatus('current')
if mibBuilder.loadTexts: sysVlanxStatHcOutOctets.setDescription('The total number of octets transmitted out of the\n\t\tinterface, including framing characters.')
sysVlanxStatHcOutUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 13, 7, 2, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVlanxStatHcOutUcastPkts.setStatus('current')
if mibBuilder.loadTexts: sysVlanxStatHcOutUcastPkts.setDescription('The total number of packets that higher-level protocols\n\t\trequested be transmitted, and which were not addressed to a\n\t\tmulticast or broadcast address at this sub-layer, including\n\t\tthose that were discarded or not sent.')
sysVlanxStatHcOutMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 13, 7, 2, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVlanxStatHcOutMulticastPkts.setStatus('current')
if mibBuilder.loadTexts: sysVlanxStatHcOutMulticastPkts.setDescription('The total number of packets that higher-level protocols\n\t\trequested be transmitted, and which were addressed to a\n\t\tmulticast address at this sub-layer, including those that\n\t\twere discarded or not sent.  For a MAC layer protocol, this\n\t\tincludes both Group and Functional addresses.')
sysVlanxStatHcOutBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 13, 7, 2, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVlanxStatHcOutBroadcastPkts.setStatus('current')
if mibBuilder.loadTexts: sysVlanxStatHcOutBroadcastPkts.setDescription('The total number of packets that higher-level protocols\n\t\trequested be transmitted, and which were addressed to a\n\t\tbroadcast address at this sub-layer, including those that\n\t\twere discarded or not sent.')
sysVlanxStatHighSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 13, 7, 2, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVlanxStatHighSpeed.setStatus('current')
if mibBuilder.loadTexts: sysVlanxStatHighSpeed.setDescription("An estimate of the interface's current bandwidth in units\n\t\tof 1,000,000 bits per second.  If this object reports a\n\t\tvalue of `n' then the speed of the interface is somewhere in\n\t\tthe range of `n-500,000' to `n+499,999'.  For interfaces\n\t\twhich do not vary in bandwidth or for those where no\n\t\taccurate estimation can be made, this object should contain\n\t\tthe nominal bandwidth.  For a sub-layer which has no concept\n\t\tof bandwidth, this object should be zero.")
sysVlanxStatConnectorPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 13, 7, 2, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVlanxStatConnectorPresent.setStatus('current')
if mibBuilder.loadTexts: sysVlanxStatConnectorPresent.setDescription("This object has the value 'true(1)' if the interface\n\t\tsublayer has a physical connector and the value 'false(2)'\n\t\totherwise.")
sysVlanxStatCounterDiscontinuityTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 13, 7, 2, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVlanxStatCounterDiscontinuityTime.setStatus('current')
if mibBuilder.loadTexts: sysVlanxStatCounterDiscontinuityTime.setDescription("The value of sysUpTime on the most recent occasion at which\n\t\tany one or more of this interface's counters suffered a\n\t\tdiscontinuity.  The relevant counters are the specific\n\t\tinstances associated with this interface of any Counter32 or\n\t\tCounter64 object contained in the sysInterfaceTable or sysInterfaceXTable. \n\t\tIf no such discontinuities have occurred since the last re-\n\t\tinitialization of the local management subsystem, then this\n\t\tobject contains a zero value.")
sysVcmpNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 13, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVcmpNumber.setStatus('current')
if mibBuilder.loadTexts: sysVcmpNumber.setDescription('The number of sysVcmp entries in the table.')
sysVcmpTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 1, 13, 1, 2), )
if mibBuilder.loadTexts: sysVcmpTable.setStatus('current')
if mibBuilder.loadTexts: sysVcmpTable.setDescription('A list VCMP guest configurations.')
sysVcmpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 1, 13, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-SYSTEM-MIB", "sysVcmpVcmpName"))
if mibBuilder.loadTexts: sysVcmpEntry.setStatus('current')
if mibBuilder.loadTexts: sysVcmpEntry.setDescription('Columns in the sysVcmp Table')
sysVcmpVcmpName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 13, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVcmpVcmpName.setStatus('current')
if mibBuilder.loadTexts: sysVcmpVcmpName.setDescription('The name of the VCMP guest.')
sysVcmpHostname = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 13, 1, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVcmpHostname.setStatus('current')
if mibBuilder.loadTexts: sysVcmpHostname.setDescription('The host name of the VCMP guest.')
sysVcmpSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 13, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVcmpSlots.setStatus('current')
if mibBuilder.loadTexts: sysVcmpSlots.setDescription('The maximum number of slots to which the VCMP guest may be\n\t         allocated.')
sysVcmpState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 13, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("configured", 0), ("provisioned", 1), ("deployed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVcmpState.setStatus('current')
if mibBuilder.loadTexts: sysVcmpState.setDescription('VCMP guests can be in one of three user-chosen states: Configured,\n\t\t Provisioned, or Deployed. \n\t\t A guest in the Configured state has no hardware resources allocated \n\t\t  to it and has no virtual machines running. \n\t\t A guest in the Provisioned state has hardware resources allocated \n\t\t  but no virtual machines running. \n\t\t A guest in the Deployed has hardware resources and should have \n\t\t  virtual machines running. \n\t\t The vcmpd daemon tries to launch and maintain any virtual machines \n\t\t  that belong to VCMP guests in the Deployed state.')
sysVcmpMgmtNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 13, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("bridged", 0), ("isolated", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVcmpMgmtNetwork.setStatus('current')
if mibBuilder.loadTexts: sysVcmpMgmtNetwork.setDescription("A VCMP guest is set to one of two management network modes: bridged or\n\t\t isolated. In bridged mode, the management interface of the guest's \n\t\t virtual machines are attached to the management network of the hypervisor. \n\t\t This allows remote access over the virtual machines' management interfaces.\n\t\t In isolated mode, the virtual machines' management interfaces are NOT \n\t\t connected to the hypervisor's management network. Console access or SSH \n\t\t access over the guest's VLANs is required to administer the guest's \n\t\t virtual machines.")
sysVcmpMgmtAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 13, 1, 2, 1, 6), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVcmpMgmtAddrType.setStatus('current')
if mibBuilder.loadTexts: sysVcmpMgmtAddrType.setDescription('The IP address type of sysMgmtAddr.')
sysVcmpMgmtAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 13, 1, 2, 1, 7), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVcmpMgmtAddr.setStatus('current')
if mibBuilder.loadTexts: sysVcmpMgmtAddr.setDescription('The IP address of the management port of a VCMP guest. It is interpreted \n\t\t within the context of a sysMgmtAddrType value.')
sysVcmpMgmtNetmaskType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 13, 1, 2, 1, 8), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVcmpMgmtNetmaskType.setStatus('current')
if mibBuilder.loadTexts: sysVcmpMgmtNetmaskType.setDescription('The IP address type of sysMgmtNetmask.')
sysVcmpMgmtNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 13, 1, 2, 1, 9), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVcmpMgmtNetmask.setStatus('current')
if mibBuilder.loadTexts: sysVcmpMgmtNetmask.setDescription('The netmask of the management port of a VCMP guest. It is interpreted \n\t\t within the context of a sysMgmtNetmaskType value.')
sysVcmpMgmtGwType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 13, 1, 2, 1, 10), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVcmpMgmtGwType.setStatus('current')
if mibBuilder.loadTexts: sysVcmpMgmtGwType.setDescription('The IP address type of sysMgmtGw.')
sysVcmpMgmtGw = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 13, 1, 2, 1, 11), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVcmpMgmtGw.setStatus('current')
if mibBuilder.loadTexts: sysVcmpMgmtGw.setDescription('The gateway of the management port of VCMP guest. It is interpreted \n\t\t within the context of a sysMgmtGwType value.')
sysVcmpVcmpId = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 13, 1, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVcmpVcmpId.setStatus('current')
if mibBuilder.loadTexts: sysVcmpVcmpId.setDescription('VCMP guest ID (valid range is 1-65535).')
sysVcmpMgmtBaseMac = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 13, 1, 2, 1, 13), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVcmpMgmtBaseMac.setStatus('current')
if mibBuilder.loadTexts: sysVcmpMgmtBaseMac.setDescription('The base MAC address of the management port of this VCMP guest.')
sysVcmpBaseMac = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 13, 1, 2, 1, 14), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVcmpBaseMac.setStatus('current')
if mibBuilder.loadTexts: sysVcmpBaseMac.setDescription('The base MAC address assigned to this VCMP guest.')
sysVcmpMacPoolSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 13, 1, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVcmpMacPoolSize.setStatus('current')
if mibBuilder.loadTexts: sysVcmpMacPoolSize.setDescription('The number of MAC addresses assigned to this VCMP guest.')
sysVcmpInitialImage = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 13, 1, 2, 1, 16), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVcmpInitialImage.setStatus('current')
if mibBuilder.loadTexts: sysVcmpInitialImage.setDescription("The initial software image file name that the hypervisor should use when \n\t\t installing TMOS to a guest's virtual disks. This does not reflect \n\t\t changes made in the Guest.")
sysVcmpVirtualDisk = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 13, 1, 2, 1, 17), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVcmpVirtualDisk.setStatus('current')
if mibBuilder.loadTexts: sysVcmpVirtualDisk.setDescription('The virtual disk that the VCMP guest is using.')
sysVcmpInitialHotfix = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 13, 1, 2, 1, 18), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVcmpInitialHotfix.setStatus('current')
if mibBuilder.loadTexts: sysVcmpInitialHotfix.setDescription("The initial software hotfix image file name that the hypervisor should\n\t         use when installing TMOS to a guest's virtual disks. This does not\n\t         reflect changes made in the Guest.")
sysVcmpMinSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 13, 1, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVcmpMinSlots.setStatus('current')
if mibBuilder.loadTexts: sysVcmpMinSlots.setDescription('The minimum number of slots to which the VCMP guest may be\n\t         allocated.')
sysVcmpCoresPerSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 13, 1, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVcmpCoresPerSlot.setStatus('current')
if mibBuilder.loadTexts: sysVcmpCoresPerSlot.setDescription('The number of cores per slot that should be allocated to the\n\t         VCMP guest.')
sysVcmpCpuCoreNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 13, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVcmpCpuCoreNumber.setStatus('current')
if mibBuilder.loadTexts: sysVcmpCpuCoreNumber.setDescription('The number of sysVcmpCpuCore entries in the table.')
sysVcmpCpuCoreTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 1, 13, 2, 2), )
if mibBuilder.loadTexts: sysVcmpCpuCoreTable.setStatus('current')
if mibBuilder.loadTexts: sysVcmpCpuCoreTable.setDescription('A list of CPU cores assigned to VCMP guest.')
sysVcmpCpuCoreEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 1, 13, 2, 2, 1), ).setIndexNames((0, "F5-BIGIP-SYSTEM-MIB", "sysVcmpCpuCoreVcmpName"), (0, "F5-BIGIP-SYSTEM-MIB", "sysVcmpCpuCoreCpuCoreId"))
if mibBuilder.loadTexts: sysVcmpCpuCoreEntry.setStatus('current')
if mibBuilder.loadTexts: sysVcmpCpuCoreEntry.setDescription('Columns in the sysVcmpCpuCore Table')
sysVcmpCpuCoreVcmpName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 13, 2, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVcmpCpuCoreVcmpName.setStatus('current')
if mibBuilder.loadTexts: sysVcmpCpuCoreVcmpName.setDescription('The VCMP guest name.')
sysVcmpCpuCoreCpuCoreId = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 13, 2, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVcmpCpuCoreCpuCoreId.setStatus('current')
if mibBuilder.loadTexts: sysVcmpCpuCoreCpuCoreId.setDescription('CPU cores assigned to VCMP guest.\n\t\tNOTE: cpu_core_id does not need to refer to existing objects in\n\t\tthe cpu_core table. This can happen if a pulled blade causes \n\t\tcores that were assigned to a VCMP object to no longer exist.')
sysVcmpVlanNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 13, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVcmpVlanNumber.setStatus('current')
if mibBuilder.loadTexts: sysVcmpVlanNumber.setDescription('The number of sysVcmpVlan entries in the table.')
sysVcmpVlanTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 1, 13, 3, 2), )
if mibBuilder.loadTexts: sysVcmpVlanTable.setStatus('current')
if mibBuilder.loadTexts: sysVcmpVlanTable.setDescription('A list of VLANs associated with the VCMP guest.')
sysVcmpVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 1, 13, 3, 2, 1), ).setIndexNames((0, "F5-BIGIP-SYSTEM-MIB", "sysVcmpVlanVcmpName"), (0, "F5-BIGIP-SYSTEM-MIB", "sysVcmpVlanVlanName"))
if mibBuilder.loadTexts: sysVcmpVlanEntry.setStatus('current')
if mibBuilder.loadTexts: sysVcmpVlanEntry.setDescription('Columns in the sysVcmpVlan Table')
sysVcmpVlanVcmpName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 13, 3, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVcmpVlanVcmpName.setStatus('current')
if mibBuilder.loadTexts: sysVcmpVlanVcmpName.setDescription('VCMP guest name')
sysVcmpVlanVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 13, 3, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVcmpVlanVlanName.setStatus('current')
if mibBuilder.loadTexts: sysVcmpVlanVlanName.setDescription('The name of the VLAN assigned to a VCMP guest.')
sysVcmpStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 13, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVcmpStatNumber.setStatus('current')
if mibBuilder.loadTexts: sysVcmpStatNumber.setDescription('The number of sysVcmpStat entries in the table.')
sysVcmpStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 1, 13, 4, 2), )
if mibBuilder.loadTexts: sysVcmpStatTable.setStatus('current')
if mibBuilder.loadTexts: sysVcmpStatTable.setDescription('The statistics and state of this VCMP guest.')
sysVcmpStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 1, 13, 4, 2, 1), ).setIndexNames((0, "F5-BIGIP-SYSTEM-MIB", "sysVcmpStatVcmpName"), (0, "F5-BIGIP-SYSTEM-MIB", "sysVcmpStatSlotId"))
if mibBuilder.loadTexts: sysVcmpStatEntry.setStatus('current')
if mibBuilder.loadTexts: sysVcmpStatEntry.setDescription('Columns in the sysVcmpStat Table')
sysVcmpStatVcmpName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 13, 4, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVcmpStatVcmpName.setStatus('current')
if mibBuilder.loadTexts: sysVcmpStatVcmpName.setDescription('The name of the VCMP guest.')
sysVcmpStatVcmpId = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 13, 4, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVcmpStatVcmpId.setStatus('current')
if mibBuilder.loadTexts: sysVcmpStatVcmpId.setDescription('The VCMP guest ID (valid range is 1 to 65535).')
sysVcmpStatSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 13, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVcmpStatSlotId.setStatus('current')
if mibBuilder.loadTexts: sysVcmpStatSlotId.setDescription('The ID of the slot on which the VCMP guest resides.')
sysVcmpStatVmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 13, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("unknown", 0), ("created", 1), ("stopped", 2), ("starting", 3), ("running", 4), ("stopping", 5), ("installingVdisk", 6), ("deleted", 7), ("failed", 8), ("inactive", 9), ("acquiringVdisk", 10), ("waitingInstall", 11), ("waitingMigrate", 12), ("migratingVdisk", 13), ("waitingStart", 14), ("waitingCreate", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVcmpStatVmStatus.setStatus('current')
if mibBuilder.loadTexts: sysVcmpStatVmStatus.setDescription('The status of this VCMP guest.')
sysVcmpStatDiskUse = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 13, 4, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVcmpStatDiskUse.setStatus('current')
if mibBuilder.loadTexts: sysVcmpStatDiskUse.setDescription('The disk space used by this VCMP guest (in bytes).\n\t        Use sysVcmpStatDiskUseKb for gauge type.')
sysVcmpStatMemoryUse = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 13, 4, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVcmpStatMemoryUse.setStatus('current')
if mibBuilder.loadTexts: sysVcmpStatMemoryUse.setDescription('The memory space allocated by this VCMP guest (in bytes).\n\t        Use sysVcmpStatMemoryUseKb for gauge type.')
sysVcmpStatBaseMac = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 13, 4, 2, 1, 7), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVcmpStatBaseMac.setStatus('current')
if mibBuilder.loadTexts: sysVcmpStatBaseMac.setDescription('The base MAC address assigned to this VCMP guest.')
sysVcmpStatMacPoolSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 13, 4, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVcmpStatMacPoolSize.setStatus('current')
if mibBuilder.loadTexts: sysVcmpStatMacPoolSize.setDescription('The number of MAC addresses assigned to this VCMP guest.')
sysVcmpStatCores = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 13, 4, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVcmpStatCores.setStatus('current')
if mibBuilder.loadTexts: sysVcmpStatCores.setDescription('The number of cores assigned to this VCMP guest on this slot.')
sysVcmpStatVdisk = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 13, 4, 2, 1, 10), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVcmpStatVdisk.setStatus('current')
if mibBuilder.loadTexts: sysVcmpStatVdisk.setDescription('The virtual disk assigned to this VCMP guest.')
sysVcmpStatStarts = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 13, 4, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVcmpStatStarts.setStatus('current')
if mibBuilder.loadTexts: sysVcmpStatStarts.setDescription('The number of starts of this VCMP guest.')
sysVcmpStatRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 13, 4, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVcmpStatRetries.setStatus('current')
if mibBuilder.loadTexts: sysVcmpStatRetries.setDescription('The number of retries of this VCMP guest.')
sysVcmpStatUptime = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 13, 4, 2, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVcmpStatUptime.setStatus('current')
if mibBuilder.loadTexts: sysVcmpStatUptime.setDescription('The time at which this VCMP guest became up and running.')
sysVcmpStatComment = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 13, 4, 2, 1, 14), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVcmpStatComment.setStatus('current')
if mibBuilder.loadTexts: sysVcmpStatComment.setDescription('The error or state messages for this VCMP guest.')
sysVcmpStatInterfaceNames = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 13, 4, 2, 1, 15), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVcmpStatInterfaceNames.setStatus('current')
if mibBuilder.loadTexts: sysVcmpStatInterfaceNames.setDescription('The interfaces assigned to this VCMP guest.')
sysVcmpStatCoreNames = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 13, 4, 2, 1, 16), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVcmpStatCoreNames.setStatus('current')
if mibBuilder.loadTexts: sysVcmpStatCoreNames.setDescription('The cores assigned to this VCMP guest.')
sysVcmpStatPrompt = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 13, 4, 2, 1, 17), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVcmpStatPrompt.setStatus('current')
if mibBuilder.loadTexts: sysVcmpStatPrompt.setDescription('The prompt status of this VCMP guest.')
sysVcmpStatCpuUsageRecent = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 13, 4, 2, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVcmpStatCpuUsageRecent.setStatus('current')
if mibBuilder.loadTexts: sysVcmpStatCpuUsageRecent.setDescription('Recent CPU usage for this VCMP guest.')
sysVcmpStatCpuUsage1min = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 13, 4, 2, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVcmpStatCpuUsage1min.setStatus('current')
if mibBuilder.loadTexts: sysVcmpStatCpuUsage1min.setDescription('CPU usage in the past minute for this VCMP guest.')
sysVcmpStatCpuUsage5mins = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 13, 4, 2, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVcmpStatCpuUsage5mins.setStatus('current')
if mibBuilder.loadTexts: sysVcmpStatCpuUsage5mins.setDescription('CPU usage in the past 5 minutes for this VCMP guest.')
sysVcmpStatPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 13, 4, 2, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVcmpStatPktsIn.setStatus('current')
if mibBuilder.loadTexts: sysVcmpStatPktsIn.setDescription('Incoming packet count for this VCMP guest.')
sysVcmpStatBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 13, 4, 2, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVcmpStatBytesIn.setStatus('current')
if mibBuilder.loadTexts: sysVcmpStatBytesIn.setDescription('Incoming byte count for this VCMP guest.')
sysVcmpStatMcastIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 13, 4, 2, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVcmpStatMcastIn.setStatus('current')
if mibBuilder.loadTexts: sysVcmpStatMcastIn.setDescription('Incoming multicasts for this VCMP guest.')
sysVcmpStatDropsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 13, 4, 2, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVcmpStatDropsIn.setStatus('current')
if mibBuilder.loadTexts: sysVcmpStatDropsIn.setDescription('Drops on incoming traffic for this VCMP guest.')
sysVcmpStatPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 13, 4, 2, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVcmpStatPktsOut.setStatus('current')
if mibBuilder.loadTexts: sysVcmpStatPktsOut.setDescription('Outgoing packet count for this VCMP guest.')
sysVcmpStatBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 13, 4, 2, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVcmpStatBytesOut.setStatus('current')
if mibBuilder.loadTexts: sysVcmpStatBytesOut.setDescription('Outgoing byte count for this VCMP guest.')
sysVcmpStatMcastOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 13, 4, 2, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVcmpStatMcastOut.setStatus('current')
if mibBuilder.loadTexts: sysVcmpStatMcastOut.setDescription('Outgoing multicasts for this VCMP guest.')
sysVcmpStatDropsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 13, 4, 2, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVcmpStatDropsOut.setStatus('current')
if mibBuilder.loadTexts: sysVcmpStatDropsOut.setDescription('Drops on outgoing traffic for this VCMP guest.')
sysVcmpStatDiskUseKb = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 13, 4, 2, 1, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVcmpStatDiskUseKb.setStatus('current')
if mibBuilder.loadTexts: sysVcmpStatDiskUseKb.setDescription('The disk space used by this VCMP guest (in Kilobytes).')
sysVcmpStatMemoryUseKb = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 13, 4, 2, 1, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVcmpStatMemoryUseKb.setStatus('current')
if mibBuilder.loadTexts: sysVcmpStatMemoryUseKb.setDescription('The memory space allocated by this VCMP guest (in Kilobytes).')
sysChassisSlotNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 10, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysChassisSlotNumber.setStatus('current')
if mibBuilder.loadTexts: sysChassisSlotNumber.setDescription('The number of sysChassisSlot entries in the table.')
sysChassisSlotTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 1, 10, 3, 2), )
if mibBuilder.loadTexts: sysChassisSlotTable.setStatus('current')
if mibBuilder.loadTexts: sysChassisSlotTable.setDescription('A table containing slot information in the chassis.')
sysChassisSlotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 1, 10, 3, 2, 1), ).setIndexNames((0, "F5-BIGIP-SYSTEM-MIB", "sysChassisSlotSlotId"))
if mibBuilder.loadTexts: sysChassisSlotEntry.setStatus('current')
if mibBuilder.loadTexts: sysChassisSlotEntry.setDescription('Columns in the sysChassisSlot Table')
sysChassisSlotSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 10, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysChassisSlotSlotId.setStatus('current')
if mibBuilder.loadTexts: sysChassisSlotSlotId.setDescription('The slot id in the specified cluster.')
sysChassisSlotSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 10, 3, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysChassisSlotSerialNumber.setStatus('current')
if mibBuilder.loadTexts: sysChassisSlotSerialNumber.setDescription('The serial number of this chassis slot.')
sysChassisSlotDown = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 10, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysChassisSlotDown.setStatus('current')
if mibBuilder.loadTexts: sysChassisSlotDown.setDescription('The state indicating whether the chassis slot is down or not.')
sysChassisSlotState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 10, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("failed", 0), ("unknown", 1), ("empty", 2), ("priming", 3), ("ok", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysChassisSlotState.setStatus('current')
if mibBuilder.loadTexts: sysChassisSlotState.setDescription('The chassis slot state')
sysSysDeviceNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 14, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSysDeviceNumber.setStatus('current')
if mibBuilder.loadTexts: sysSysDeviceNumber.setDescription('The number of sysSysDevice entries in the table.')
sysSysDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 14, 1, 2), )
if mibBuilder.loadTexts: sysSysDeviceTable.setStatus('current')
if mibBuilder.loadTexts: sysSysDeviceTable.setDescription('A table containing device information on devices connected to this machine')
sysSysDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 14, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-SYSTEM-MIB", "sysSysDeviceName"))
if mibBuilder.loadTexts: sysSysDeviceEntry.setStatus('current')
if mibBuilder.loadTexts: sysSysDeviceEntry.setDescription('Columns in the sysSysDevice Table')
sysSysDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 14, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSysDeviceName.setStatus('current')
if mibBuilder.loadTexts: sysSysDeviceName.setDescription('The unique device name')
sysSysDeviceMgmtIp = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 14, 1, 2, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSysDeviceMgmtIp.setStatus('current')
if mibBuilder.loadTexts: sysSysDeviceMgmtIp.setDescription('The ip used to connect to the device')
sysSysDeviceMgmtIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 14, 1, 2, 1, 3), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSysDeviceMgmtIpType.setStatus('current')
if mibBuilder.loadTexts: sysSysDeviceMgmtIpType.setDescription('')
sysSysDeviceHostname = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 14, 1, 2, 1, 4), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSysDeviceHostname.setStatus('current')
if mibBuilder.loadTexts: sysSysDeviceHostname.setDescription('The hostname of the device')
sysSysDeviceMirrorIp = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 14, 1, 2, 1, 5), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSysDeviceMirrorIp.setStatus('current')
if mibBuilder.loadTexts: sysSysDeviceMirrorIp.setDescription('The mirror ip address')
sysSysDeviceMirrorIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 14, 1, 2, 1, 6), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSysDeviceMirrorIpType.setStatus('current')
if mibBuilder.loadTexts: sysSysDeviceMirrorIpType.setDescription('')
sysSysDeviceMirrorSecondaryIp = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 14, 1, 2, 1, 7), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSysDeviceMirrorSecondaryIp.setStatus('current')
if mibBuilder.loadTexts: sysSysDeviceMirrorSecondaryIp.setDescription('The secondary mirror ip')
sysSysDeviceMirrorSecondaryIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 14, 1, 2, 1, 8), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSysDeviceMirrorSecondaryIpType.setStatus('current')
if mibBuilder.loadTexts: sysSysDeviceMirrorSecondaryIpType.setDescription('')
sysSysDeviceMulticastInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 14, 1, 2, 1, 9), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSysDeviceMulticastInterface.setStatus('current')
if mibBuilder.loadTexts: sysSysDeviceMulticastInterface.setDescription('Multicast Interface')
sysSysDeviceMulticastAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 14, 1, 2, 1, 10), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSysDeviceMulticastAddr.setStatus('current')
if mibBuilder.loadTexts: sysSysDeviceMulticastAddr.setDescription('Multicast Address')
sysSysDeviceMulticastAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 14, 1, 2, 1, 11), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSysDeviceMulticastAddrType.setStatus('current')
if mibBuilder.loadTexts: sysSysDeviceMulticastAddrType.setDescription('')
sysSysDeviceMulticastPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 14, 1, 2, 1, 12), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSysDeviceMulticastPort.setStatus('current')
if mibBuilder.loadTexts: sysSysDeviceMulticastPort.setDescription('Multicast Port')
sysSysDeviceVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 14, 1, 2, 1, 13), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSysDeviceVersion.setStatus('current')
if mibBuilder.loadTexts: sysSysDeviceVersion.setDescription('The product version')
sysSysDeviceProduct = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 14, 1, 2, 1, 14), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSysDeviceProduct.setStatus('current')
if mibBuilder.loadTexts: sysSysDeviceProduct.setDescription('The product installed on the device')
sysSysDeviceEdition = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 14, 1, 2, 1, 15), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSysDeviceEdition.setStatus('current')
if mibBuilder.loadTexts: sysSysDeviceEdition.setDescription('The edition of the product installed on the device')
sysSysDeviceMarketingName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 14, 1, 2, 1, 16), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSysDeviceMarketingName.setStatus('current')
if mibBuilder.loadTexts: sysSysDeviceMarketingName.setDescription('The marketing name of the device')
sysSysDevicePlatformId = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 14, 1, 2, 1, 17), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSysDevicePlatformId.setStatus('current')
if mibBuilder.loadTexts: sysSysDevicePlatformId.setDescription('The platform name of the device')
sysSysDeviceChassisId = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 14, 1, 2, 1, 18), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSysDeviceChassisId.setStatus('current')
if mibBuilder.loadTexts: sysSysDeviceChassisId.setDescription('The unique chassis id of this device')
sysUnicastAddrNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 14, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysUnicastAddrNumber.setStatus('current')
if mibBuilder.loadTexts: sysUnicastAddrNumber.setDescription('The number of sysUnicastAddr entries in the table.')
sysUnicastAddrTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 14, 2, 2), )
if mibBuilder.loadTexts: sysUnicastAddrTable.setStatus('current')
if mibBuilder.loadTexts: sysUnicastAddrTable.setDescription('A table that contains the unicast address/port combinations available on this device')
sysUnicastAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 14, 2, 2, 1), ).setIndexNames((0, "F5-BIGIP-SYSTEM-MIB", "sysUnicastAddrName"), (0, "F5-BIGIP-SYSTEM-MIB", "sysUnicastAddrIndex"))
if mibBuilder.loadTexts: sysUnicastAddrEntry.setStatus('current')
if mibBuilder.loadTexts: sysUnicastAddrEntry.setDescription('Columns in the sysUnicastAddr Table')
sysUnicastAddrName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 14, 2, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysUnicastAddrName.setStatus('current')
if mibBuilder.loadTexts: sysUnicastAddrName.setDescription('')
sysUnicastAddrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 14, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysUnicastAddrIndex.setStatus('current')
if mibBuilder.loadTexts: sysUnicastAddrIndex.setDescription('Index of the unicast addr within this table')
sysUnicastAddrSourceIp = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 14, 2, 2, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysUnicastAddrSourceIp.setStatus('current')
if mibBuilder.loadTexts: sysUnicastAddrSourceIp.setDescription('Source unicast address for this device')
sysUnicastAddrSourceIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 14, 2, 2, 1, 4), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysUnicastAddrSourceIpType.setStatus('current')
if mibBuilder.loadTexts: sysUnicastAddrSourceIpType.setDescription('')
sysUnicastAddrSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 14, 2, 2, 1, 5), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysUnicastAddrSourcePort.setStatus('current')
if mibBuilder.loadTexts: sysUnicastAddrSourcePort.setDescription('Source port for unicast on this device')
sysSysDeviceActiveModulesNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 14, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSysDeviceActiveModulesNumber.setStatus('current')
if mibBuilder.loadTexts: sysSysDeviceActiveModulesNumber.setDescription('The number of sysSysDeviceActiveModules entries in the table.')
sysSysDeviceActiveModulesTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 14, 4, 2), )
if mibBuilder.loadTexts: sysSysDeviceActiveModulesTable.setStatus('current')
if mibBuilder.loadTexts: sysSysDeviceActiveModulesTable.setDescription('A table containing a list of the active modules on the device.')
sysSysDeviceActiveModulesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 14, 4, 2, 1), ).setIndexNames((0, "F5-BIGIP-SYSTEM-MIB", "sysSysDeviceActiveModulesName"), (0, "F5-BIGIP-SYSTEM-MIB", "sysSysDeviceActiveModulesIndex"))
if mibBuilder.loadTexts: sysSysDeviceActiveModulesEntry.setStatus('current')
if mibBuilder.loadTexts: sysSysDeviceActiveModulesEntry.setDescription('Columns in the sysSysDeviceActiveModules Table')
sysSysDeviceActiveModulesName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 14, 4, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSysDeviceActiveModulesName.setStatus('current')
if mibBuilder.loadTexts: sysSysDeviceActiveModulesName.setDescription('')
sysSysDeviceActiveModulesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 14, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSysDeviceActiveModulesIndex.setStatus('current')
if mibBuilder.loadTexts: sysSysDeviceActiveModulesIndex.setDescription('Index of the unicast addr within this table')
sysSysDeviceActiveModulesModule = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 14, 4, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSysDeviceActiveModulesModule.setStatus('current')
if mibBuilder.loadTexts: sysSysDeviceActiveModulesModule.setDescription('An active module on the device')
sysSysDeviceInactiveModulesNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 14, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSysDeviceInactiveModulesNumber.setStatus('current')
if mibBuilder.loadTexts: sysSysDeviceInactiveModulesNumber.setDescription('The number of sysSysDeviceInactiveModules entries in the table.')
sysSysDeviceInactiveModulesTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 14, 5, 2), )
if mibBuilder.loadTexts: sysSysDeviceInactiveModulesTable.setStatus('current')
if mibBuilder.loadTexts: sysSysDeviceInactiveModulesTable.setDescription('A table containing a list of the inactive modules on the device.')
sysSysDeviceInactiveModulesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 14, 5, 2, 1), ).setIndexNames((0, "F5-BIGIP-SYSTEM-MIB", "sysSysDeviceInactiveModulesName"), (0, "F5-BIGIP-SYSTEM-MIB", "sysSysDeviceInactiveModulesIndex"))
if mibBuilder.loadTexts: sysSysDeviceInactiveModulesEntry.setStatus('current')
if mibBuilder.loadTexts: sysSysDeviceInactiveModulesEntry.setDescription('Columns in the sysSysDeviceInactiveModules Table')
sysSysDeviceInactiveModulesName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 14, 5, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSysDeviceInactiveModulesName.setStatus('current')
if mibBuilder.loadTexts: sysSysDeviceInactiveModulesName.setDescription('')
sysSysDeviceInactiveModulesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 14, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSysDeviceInactiveModulesIndex.setStatus('current')
if mibBuilder.loadTexts: sysSysDeviceInactiveModulesIndex.setDescription('Index of the unicast addr within this table')
sysSysDeviceInactiveModulesModule = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 14, 5, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSysDeviceInactiveModulesModule.setStatus('current')
if mibBuilder.loadTexts: sysSysDeviceInactiveModulesModule.setDescription('An inactive module on the device')
sysSysDeviceOptionalModulesNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 14, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSysDeviceOptionalModulesNumber.setStatus('current')
if mibBuilder.loadTexts: sysSysDeviceOptionalModulesNumber.setDescription('The number of sysSysDeviceOptionalModules entries in the table.')
sysSysDeviceOptionalModulesTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 14, 6, 2), )
if mibBuilder.loadTexts: sysSysDeviceOptionalModulesTable.setStatus('current')
if mibBuilder.loadTexts: sysSysDeviceOptionalModulesTable.setDescription('A table containing a list of the optional modules on the device.')
sysSysDeviceOptionalModulesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 14, 6, 2, 1), ).setIndexNames((0, "F5-BIGIP-SYSTEM-MIB", "sysSysDeviceOptionalModulesName"), (0, "F5-BIGIP-SYSTEM-MIB", "sysSysDeviceOptionalModulesIndex"))
if mibBuilder.loadTexts: sysSysDeviceOptionalModulesEntry.setStatus('current')
if mibBuilder.loadTexts: sysSysDeviceOptionalModulesEntry.setDescription('Columns in the sysSysDeviceOptionalModules Table')
sysSysDeviceOptionalModulesName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 14, 6, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSysDeviceOptionalModulesName.setStatus('current')
if mibBuilder.loadTexts: sysSysDeviceOptionalModulesName.setDescription('')
sysSysDeviceOptionalModulesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 14, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSysDeviceOptionalModulesIndex.setStatus('current')
if mibBuilder.loadTexts: sysSysDeviceOptionalModulesIndex.setDescription('Index of the unicast addr within this table')
sysSysDeviceOptionalModulesModule = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 14, 6, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSysDeviceOptionalModulesModule.setStatus('current')
if mibBuilder.loadTexts: sysSysDeviceOptionalModulesModule.setDescription('An optional module on the device')
sysSysDeviceTimelimitedModulesNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 14, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSysDeviceTimelimitedModulesNumber.setStatus('current')
if mibBuilder.loadTexts: sysSysDeviceTimelimitedModulesNumber.setDescription('The number of sysSysDeviceTimelimitedModules entries in the table.')
sysSysDeviceTimelimitedModulesTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 14, 7, 2), )
if mibBuilder.loadTexts: sysSysDeviceTimelimitedModulesTable.setStatus('current')
if mibBuilder.loadTexts: sysSysDeviceTimelimitedModulesTable.setDescription('A table containing a list of the timelimited modules on the device.')
sysSysDeviceTimelimitedModulesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 14, 7, 2, 1), ).setIndexNames((0, "F5-BIGIP-SYSTEM-MIB", "sysSysDeviceTimelimitedModulesName"), (0, "F5-BIGIP-SYSTEM-MIB", "sysSysDeviceTimelimitedModulesIndex"))
if mibBuilder.loadTexts: sysSysDeviceTimelimitedModulesEntry.setStatus('current')
if mibBuilder.loadTexts: sysSysDeviceTimelimitedModulesEntry.setDescription('Columns in the sysSysDeviceTimelimitedModules Table')
sysSysDeviceTimelimitedModulesName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 14, 7, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSysDeviceTimelimitedModulesName.setStatus('current')
if mibBuilder.loadTexts: sysSysDeviceTimelimitedModulesName.setDescription('')
sysSysDeviceTimelimitedModulesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 14, 7, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSysDeviceTimelimitedModulesIndex.setStatus('current')
if mibBuilder.loadTexts: sysSysDeviceTimelimitedModulesIndex.setDescription('Index of the unicast addr within this table')
sysSysDeviceTimelimitedModulesModule = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 14, 7, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSysDeviceTimelimitedModulesModule.setStatus('current')
if mibBuilder.loadTexts: sysSysDeviceTimelimitedModulesModule.setDescription('An timelimited module on the device')
sysStpGlobals2Number = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 10, 9, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStpGlobals2Number.setStatus('current')
if mibBuilder.loadTexts: sysStpGlobals2Number.setDescription('The number of sysStpGlobals2 entries in the table.')
sysStpGlobals2Table = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 10, 9, 2), )
if mibBuilder.loadTexts: sysStpGlobals2Table.setStatus('current')
if mibBuilder.loadTexts: sysStpGlobals2Table.setDescription("The STP domain's global information.")
sysStpGlobals2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 10, 9, 2, 1), ).setIndexNames((0, "F5-BIGIP-SYSTEM-MIB", "sysStpGlobals2Name"))
if mibBuilder.loadTexts: sysStpGlobals2Entry.setStatus('current')
if mibBuilder.loadTexts: sysStpGlobals2Entry.setDescription('Columns in the sysStpGlobals2 Table')
sysStpGlobals2Mode = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 10, 9, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 0), ("stp", 1), ("rstp", 2), ("mstp", 3), ("passthru", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStpGlobals2Mode.setStatus('current')
if mibBuilder.loadTexts: sysStpGlobals2Mode.setDescription('The STP mode.')
sysStpGlobals2FwdDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 10, 9, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStpGlobals2FwdDelay.setStatus('current')
if mibBuilder.loadTexts: sysStpGlobals2FwdDelay.setDescription('The forward delay parameter, which controls how long an \n\t\tinterface was blocked from forwarding network traffic after \n\t\ta reconfiguration of the spanning tree topology. The default \n\t\tvalue is 15 seconds, and the valid range is 4-30 seconds.  \n\t\tNote that this parameter has no effect when the STP mode \n\t\tis RSPT or MSTP, as long as all bridges in the spanning tree \n\t\tuse the RSTP or MSTP protocol.')
sysStpGlobals2HelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 10, 9, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStpGlobals2HelloTime.setStatus('current')
if mibBuilder.loadTexts: sysStpGlobals2HelloTime.setDescription('The hello time, which is the time interval in seconds \n\t\tbetween the periodic transmissions that communicate spanning \n\t\ttree information to the adjacent bridges in the network. \n\t\tThe default value is 2 seconds, and the valid range is 1-10 seconds.')
sysStpGlobals2MaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 10, 9, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStpGlobals2MaxAge.setStatus('current')
if mibBuilder.loadTexts: sysStpGlobals2MaxAge.setDescription('The maximum age parameter, which controls how long spanning tree \n\t\tinformation received from other bridges is considered valid.  \n\t\tThe default value is 20 seconds, and the valid range is 6-40 seconds.')
sysStpGlobals2TransmitHold = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 10, 9, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStpGlobals2TransmitHold.setStatus('current')
if mibBuilder.loadTexts: sysStpGlobals2TransmitHold.setDescription('The transmit hold count parameter, which is an absolute limit on \n\t\tthe number of spanning tree protocol packets the BIG-IP may transmit \n\t\ton a port in any hello time interval.  This ensures that the spanning \n\t\ttree packets will not unduly load the network even in unstable \n\t\tconditions. The default value is 6 packets, and the valid range \n\t\tis 1-10 packets.')
sysStpGlobals2MaxHops = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 10, 9, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStpGlobals2MaxHops.setStatus('current')
if mibBuilder.loadTexts: sysStpGlobals2MaxHops.setDescription("The maximum hops an MSTP packet may travel before it is discarded.  \n\t\tIt's used only when the STP mode is MSTP.")
sysStpGlobals2Identifier = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 10, 9, 2, 1, 7), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStpGlobals2Identifier.setStatus('current')
if mibBuilder.loadTexts: sysStpGlobals2Identifier.setDescription('The configuration identifier name in a spanning tree region, \n\t\tused to identify a group of adjacent bridges with identical \n\t\tconfiguration name, configuration revision levels, and assignments \n\t\tof VLANs to spanning tree instances.  This setting is used only \n\t\twhen the STP mode is MSTP.')
sysStpGlobals2Revision = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 10, 9, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStpGlobals2Revision.setStatus('current')
if mibBuilder.loadTexts: sysStpGlobals2Revision.setDescription(" The configuration revision level of the MSTP configuration.  \n\t\tIt's used only when the STP mode is MSTP.")
sysStpGlobals2Name = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 10, 9, 2, 1, 9), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStpGlobals2Name.setStatus('current')
if mibBuilder.loadTexts: sysStpGlobals2Name.setDescription('The name this stp global configuration.')
sysCpuSensorNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCpuSensorNumber.setStatus('current')
if mibBuilder.loadTexts: sysCpuSensorNumber.setDescription('The number of sysCpuSensor entries in the table.')
sysCpuSensorTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 6, 2), )
if mibBuilder.loadTexts: sysCpuSensorTable.setStatus('current')
if mibBuilder.loadTexts: sysCpuSensorTable.setDescription('A table containing information of CPU sensor status on the system.')
sysCpuSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 6, 2, 1), ).setIndexNames((0, "F5-BIGIP-SYSTEM-MIB", "sysCpuSensorSlot"), (0, "F5-BIGIP-SYSTEM-MIB", "sysCpuSensorIndex"))
if mibBuilder.loadTexts: sysCpuSensorEntry.setStatus('current')
if mibBuilder.loadTexts: sysCpuSensorEntry.setDescription('Columns in the sysCpuSensor Table')
sysCpuSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCpuSensorIndex.setStatus('current')
if mibBuilder.loadTexts: sysCpuSensorIndex.setDescription('The CPU index on the system.')
sysCpuSensorTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 6, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCpuSensorTemperature.setStatus('current')
if mibBuilder.loadTexts: sysCpuSensorTemperature.setDescription('The temperature of the indexed CPU on the system.\n\t\t\tThis is only supported for the platform where\n\t\t\tthe sensor data is available.')
sysCpuSensorFanSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 6, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCpuSensorFanSpeed.setStatus('current')
if mibBuilder.loadTexts: sysCpuSensorFanSpeed.setDescription('The fan speed (in RPM) of the indexed CPU on the system.,\n\t\t\tThis is only supported for the platform where\n\t\t\tthe sensor data is available.')
sysCpuSensorName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 6, 2, 1, 4), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCpuSensorName.setStatus('current')
if mibBuilder.loadTexts: sysCpuSensorName.setDescription('Identifier for the CPU.')
sysCpuSensorSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 6, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCpuSensorSlot.setStatus('current')
if mibBuilder.loadTexts: sysCpuSensorSlot.setDescription('Chassis slot number, if applicable.')
sysCmSyncStatusId = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("unknown", 0), ("syncing", 1), ("needManualSync", 2), ("inSync", 3), ("syncFailed", 4), ("syncDisconnected", 5), ("standalone", 6), ("awaitingInitialSync", 7), ("incompatibleVersion", 8), ("partialSync", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCmSyncStatusId.setStatus('current')
if mibBuilder.loadTexts: sysCmSyncStatusId.setDescription("The sync status ID on the system.\n\t\tunknown - the device is disconnected from the device group;\n\t\tsyncing - the device is joining the device group or has requested changes\n\t\tfrom device group or inconsistent with the group;\n\t\tneedManualSync - changes have been made on the device not syncd to\n\t\tthe device group;\n\t\tinSync - the device is consistent with the device group;\n\t\tsyncFailed - the device is inconsistent with the device group, requires\n\t\tuser intervention;\n\t\tsyncDisconnected - the device is not connected to any peers; \n\t\tstandalone - the device is in a standalone configuration;\n\t\tawaitingInitialSync - the device is waiting for initial sync;\n\t\tincompatibleVersion - the device's version is incompatible with rest of\n\t\tthe devices in the device group;\n\t\tpartialSync - some but not all devices successfully received the last sync.")
sysCmSyncStatusStatus = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 14, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCmSyncStatusStatus.setStatus('current')
if mibBuilder.loadTexts: sysCmSyncStatusStatus.setDescription('The sync status on the system.')
sysCmSyncStatusColor = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 14, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("green", 0), ("yellow", 1), ("red", 2), ("blue", 3), ("gray", 4), ("black", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCmSyncStatusColor.setStatus('current')
if mibBuilder.loadTexts: sysCmSyncStatusColor.setDescription("The color of the sync status on the system.\n\t\tgreen - the system is functioning correctly;\n\t\tyellow - the system may be functioning suboptimally;\n\t\tred - the system requires attention to function correctly;\n\t\tblue - the system's status is unknown or incomplete;\n\t\tgray - the system is intentionally not functioning (offline);\n\t\tblack - the system is not connected to any peers.")
sysCmSyncStatusSummary = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 14, 1, 4), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCmSyncStatusSummary.setStatus('current')
if mibBuilder.loadTexts: sysCmSyncStatusSummary.setDescription('The summary of the sync status on the system.')
sysCmSyncStatusDetailsNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 14, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCmSyncStatusDetailsNumber.setStatus('current')
if mibBuilder.loadTexts: sysCmSyncStatusDetailsNumber.setDescription('The number of sysCmSyncStatusDetails entries in the table.')
sysCmSyncStatusDetailsTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 1, 14, 2, 2), )
if mibBuilder.loadTexts: sysCmSyncStatusDetailsTable.setStatus('current')
if mibBuilder.loadTexts: sysCmSyncStatusDetailsTable.setDescription('A table containing details of sync status on the system.')
sysCmSyncStatusDetailsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 1, 14, 2, 2, 1), ).setIndexNames((0, "F5-BIGIP-SYSTEM-MIB", "sysCmSyncStatusDetailsIndex"))
if mibBuilder.loadTexts: sysCmSyncStatusDetailsEntry.setStatus('current')
if mibBuilder.loadTexts: sysCmSyncStatusDetailsEntry.setDescription('Columns in the sysCmSyncStatusDetails Table')
sysCmSyncStatusDetailsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 14, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCmSyncStatusDetailsIndex.setStatus('current')
if mibBuilder.loadTexts: sysCmSyncStatusDetailsIndex.setDescription('The index of the table that contains the details of the sync status\n\t\ton the system.')
sysCmSyncStatusDetailsDetails = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 14, 2, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCmSyncStatusDetailsDetails.setStatus('current')
if mibBuilder.loadTexts: sysCmSyncStatusDetailsDetails.setDescription('The details of the sync status on the system.')
sysCmFailoverStatusId = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 14, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 0), ("offline", 1), ("forcedOffline", 2), ("standby", 3), ("active", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCmFailoverStatusId.setStatus('current')
if mibBuilder.loadTexts: sysCmFailoverStatusId.setDescription('The failover status ID on the system.\n\t\tunknown - the failover status of the device is unknown;\n\t\toffline - the device is offline;\n\t\tforcedOffline - the device is forced offline;\n\t\tstandby - the device is standby;\n\t\tactive - the device  is active.')
sysCmFailoverStatusStatus = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 14, 3, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCmFailoverStatusStatus.setStatus('current')
if mibBuilder.loadTexts: sysCmFailoverStatusStatus.setDescription('The failover status on the system.')
sysCmFailoverStatusColor = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 14, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("green", 0), ("yellow", 1), ("red", 2), ("blue", 3), ("gray", 4), ("black", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCmFailoverStatusColor.setStatus('current')
if mibBuilder.loadTexts: sysCmFailoverStatusColor.setDescription("The color of the failover status on the system.\n\t\tgreen - the system is functioning correctly;\n\t\tyellow - the system may be functioning suboptimally;\n\t\tred - the system requires attention to function correctly;\n\t\tblue - the system's status is unknown or incomplete;\n\t\tgray - the system is intentionally not functioning (offline);\n\t\tblack - the system is not connected to any peers.")
sysCmFailoverStatusSummary = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 14, 3, 4), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCmFailoverStatusSummary.setStatus('current')
if mibBuilder.loadTexts: sysCmFailoverStatusSummary.setDescription('The summary of the failover status on the system.')
sysCmFailoverStatusDetailsNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 14, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCmFailoverStatusDetailsNumber.setStatus('current')
if mibBuilder.loadTexts: sysCmFailoverStatusDetailsNumber.setDescription('The number of sysCmFailoverStatusDetails entries in the table.')
sysCmFailoverStatusDetailsTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 1, 14, 4, 2), )
if mibBuilder.loadTexts: sysCmFailoverStatusDetailsTable.setStatus('current')
if mibBuilder.loadTexts: sysCmFailoverStatusDetailsTable.setDescription('A table containing details of failover status on the system.')
sysCmFailoverStatusDetailsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 1, 14, 4, 2, 1), ).setIndexNames((0, "F5-BIGIP-SYSTEM-MIB", "sysCmFailoverStatusDetailsIndex"))
if mibBuilder.loadTexts: sysCmFailoverStatusDetailsEntry.setStatus('current')
if mibBuilder.loadTexts: sysCmFailoverStatusDetailsEntry.setDescription('Columns in the sysCmFailoverStatusDetails Table')
sysCmFailoverStatusDetailsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 14, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCmFailoverStatusDetailsIndex.setStatus('current')
if mibBuilder.loadTexts: sysCmFailoverStatusDetailsIndex.setDescription('The index of the table that contains the details of the failover status\n\t\ton the system.')
sysCmFailoverStatusDetailsDetails = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 14, 4, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCmFailoverStatusDetailsDetails.setStatus('current')
if mibBuilder.loadTexts: sysCmFailoverStatusDetailsDetails.setDescription('The details of the failover status on the system.')
sysCmTrafficGroupStatusNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 14, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCmTrafficGroupStatusNumber.setStatus('current')
if mibBuilder.loadTexts: sysCmTrafficGroupStatusNumber.setDescription('The number of sysCmTrafficGroupStatus entries in the table.')
sysCmTrafficGroupStatusTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 1, 14, 5, 2), )
if mibBuilder.loadTexts: sysCmTrafficGroupStatusTable.setStatus('current')
if mibBuilder.loadTexts: sysCmTrafficGroupStatusTable.setDescription('A table containing information of traffic group(s) status on the system.')
sysCmTrafficGroupStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 1, 14, 5, 2, 1), ).setIndexNames((0, "F5-BIGIP-SYSTEM-MIB", "sysCmTrafficGroupStatusTrafficGroup"), (0, "F5-BIGIP-SYSTEM-MIB", "sysCmTrafficGroupStatusDeviceName"))
if mibBuilder.loadTexts: sysCmTrafficGroupStatusEntry.setStatus('current')
if mibBuilder.loadTexts: sysCmTrafficGroupStatusEntry.setDescription('Columns in the sysCmTrafficGroupStatus Table')
sysCmTrafficGroupStatusTrafficGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 14, 5, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCmTrafficGroupStatusTrafficGroup.setStatus('current')
if mibBuilder.loadTexts: sysCmTrafficGroupStatusTrafficGroup.setDescription('The name of the traffic group.')
sysCmTrafficGroupStatusDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 14, 5, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCmTrafficGroupStatusDeviceName.setStatus('current')
if mibBuilder.loadTexts: sysCmTrafficGroupStatusDeviceName.setDescription('The name of the device.')
sysCmTrafficGroupStatusFailoverStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 14, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 0), ("offline", 1), ("forcedOffline", 2), ("standby", 3), ("active", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCmTrafficGroupStatusFailoverStatus.setStatus('current')
if mibBuilder.loadTexts: sysCmTrafficGroupStatusFailoverStatus.setDescription('The failover status of the device within the traffic group.\n\t\tunknown - the failover status of the device is unknown;\n\t\toffline - the device is offline;\n\t\tforcedOffline - the device is forced offline;\n\t\tstandby - the device is standby;\n\t\tactive - the device  is active.')
sysDnsStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 24, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysDnsStatResetStats.setStatus('current')
if mibBuilder.loadTexts: sysDnsStatResetStats.setDescription('The action to reset resettable statistics data in sysGlobalDnsStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
sysDnsStatQueries = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 24, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDnsStatQueries.setStatus('current')
if mibBuilder.loadTexts: sysDnsStatQueries.setDescription('The total number of DNS queries.')
sysDnsStatResponses = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 24, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDnsStatResponses.setStatus('current')
if mibBuilder.loadTexts: sysDnsStatResponses.setDescription('The total number of DNS responses.')
sysDnsStatResponsesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 24, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDnsStatResponsesPerSec.setStatus('current')
if mibBuilder.loadTexts: sysDnsStatResponsesPerSec.setDescription('The average number of DNS responses per second.')
sysDnsStatToGtm = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 24, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDnsStatToGtm.setStatus('current')
if mibBuilder.loadTexts: sysDnsStatToGtm.setDescription('The number of requests sent to GTM.')
sysDnsStatDnsExpressReqs = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 24, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDnsStatDnsExpressReqs.setStatus('current')
if mibBuilder.loadTexts: sysDnsStatDnsExpressReqs.setDescription('The number of DNS Express requests.')
sysDnsStatDnsExpressNotifies = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 24, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDnsStatDnsExpressNotifies.setStatus('current')
if mibBuilder.loadTexts: sysDnsStatDnsExpressNotifies.setDescription('The number of DNS Express notifies.')
sysDnsStatToCache = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 24, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDnsStatToCache.setStatus('current')
if mibBuilder.loadTexts: sysDnsStatToCache.setDescription('The number of requests sent to the DNS cache.')
sysDnsStatToDns = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 24, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDnsStatToDns.setStatus('current')
if mibBuilder.loadTexts: sysDnsStatToDns.setDescription('The number of requests sent to backend DNS.')
sysDnsStatDns64Reqs = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 24, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDnsStatDns64Reqs.setStatus('current')
if mibBuilder.loadTexts: sysDnsStatDns64Reqs.setDescription('The number of A requests the system generated and sent.')
sysDnsStatDns64Rewrites = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 24, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDnsStatDns64Rewrites.setStatus('current')
if mibBuilder.loadTexts: sysDnsStatDns64Rewrites.setDescription('The number of A responses translated to AAAA.')
sysDnsStatDns64Failures = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 24, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDnsStatDns64Failures.setStatus('current')
if mibBuilder.loadTexts: sysDnsStatDns64Failures.setDescription('The number of unsuccessful AAAA requests.')
sysDnsStatHints = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 24, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDnsStatHints.setStatus('current')
if mibBuilder.loadTexts: sysDnsStatHints.setDescription('The number of hint (Root Nameservers) responses sent.')
sysDnsStatRejects = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 24, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDnsStatRejects.setStatus('current')
if mibBuilder.loadTexts: sysDnsStatRejects.setDescription('The number of reject (REFUSED) responses sent.')
sysDnsStatNoErrors = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 24, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDnsStatNoErrors.setStatus('current')
if mibBuilder.loadTexts: sysDnsStatNoErrors.setDescription('The number of NOERROR responses sent.')
sysDnsStatDrops = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 24, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDnsStatDrops.setStatus('current')
if mibBuilder.loadTexts: sysDnsStatDrops.setDescription('The number of packets dropped (not sent to GTM, DNS-Express, DNSSEC,\n\t\tDNS64, or Backend DNS (e.g. BIND)).')
sysDnsStatMalformed = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 24, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDnsStatMalformed.setStatus('current')
if mibBuilder.loadTexts: sysDnsStatMalformed.setDescription('The number of malformed packets received.')
sysDnsStatTclSuspends = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 24, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDnsStatTclSuspends.setStatus('current')
if mibBuilder.loadTexts: sysDnsStatTclSuspends.setDescription('The number of TCL suspends.')
sysDnsStatRecursionDesired = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 24, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDnsStatRecursionDesired.setStatus('current')
if mibBuilder.loadTexts: sysDnsStatRecursionDesired.setDescription('The number of queries with RD bit set.')
sysDnsStatCheckingDisabled = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 24, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDnsStatCheckingDisabled.setStatus('current')
if mibBuilder.loadTexts: sysDnsStatCheckingDisabled.setDescription('The number of queries with CD bit set.')
sysDnsStatEdns0 = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 24, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDnsStatEdns0.setStatus('current')
if mibBuilder.loadTexts: sysDnsStatEdns0.setDescription('The number of queries with EDNS0 bit set.')
sysDnsStatOpcodeQuery = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 24, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDnsStatOpcodeQuery.setStatus('current')
if mibBuilder.loadTexts: sysDnsStatOpcodeQuery.setDescription('The number of queries whose operation code is QUERY.')
sysDnsStatOpcodeNotify = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 24, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDnsStatOpcodeNotify.setStatus('current')
if mibBuilder.loadTexts: sysDnsStatOpcodeNotify.setDescription('The number of queries whose operation code is NOTIFY.')
sysDnsStatOpcodeUpdate = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 24, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDnsStatOpcodeUpdate.setStatus('current')
if mibBuilder.loadTexts: sysDnsStatOpcodeUpdate.setDescription('The number of queries whose operation code is UPDATE.')
sysDnsStatZoneIxfr = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 24, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDnsStatZoneIxfr.setStatus('current')
if mibBuilder.loadTexts: sysDnsStatZoneIxfr.setDescription('The number of queries whose question type is IXFR.')
sysDnsStatZoneAxfr = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 24, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDnsStatZoneAxfr.setStatus('current')
if mibBuilder.loadTexts: sysDnsStatZoneAxfr.setDescription('The number of queries whose question type is AXFR.')
sysDnsStatAuthoritativeAnswer = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 24, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDnsStatAuthoritativeAnswer.setStatus('current')
if mibBuilder.loadTexts: sysDnsStatAuthoritativeAnswer.setDescription('The number of responses with AA bit set.')
sysDnsStatRecursionAvailable = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 24, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDnsStatRecursionAvailable.setStatus('current')
if mibBuilder.loadTexts: sysDnsStatRecursionAvailable.setDescription('The number of responses with RA bit set.')
sysDnsStatAuthenticatedData = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 24, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDnsStatAuthenticatedData.setStatus('current')
if mibBuilder.loadTexts: sysDnsStatAuthenticatedData.setDescription('The number of responses with AD bit set.')
sysDnsStatTruncated = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 24, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDnsStatTruncated.setStatus('current')
if mibBuilder.loadTexts: sysDnsStatTruncated.setDescription('The number of responses with TC bit set.')
sysDnsStatRcodeNoerror = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 24, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDnsStatRcodeNoerror.setStatus('current')
if mibBuilder.loadTexts: sysDnsStatRcodeNoerror.setDescription('The number of responses whose return code is NOERROR.')
sysDnsStatRcodeNxdomain = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 24, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDnsStatRcodeNxdomain.setStatus('current')
if mibBuilder.loadTexts: sysDnsStatRcodeNxdomain.setDescription('The number of responses whose return code is NXDOMAIN.')
sysDnsStatRcodeServfail = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 24, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDnsStatRcodeServfail.setStatus('current')
if mibBuilder.loadTexts: sysDnsStatRcodeServfail.setDescription('The number of responses whose return code is SERVFAIL.')
sysDnsStatRcodeRefused = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 24, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDnsStatRcodeRefused.setStatus('current')
if mibBuilder.loadTexts: sysDnsStatRcodeRefused.setDescription('The number of responses whose return code is REFUSED.')
sysDnsStatMalicious = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 24, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDnsStatMalicious.setStatus('current')
if mibBuilder.loadTexts: sysDnsStatMalicious.setDescription('The number of malicious packets received.')
sysDnsStatAReqs = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 24, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDnsStatAReqs.setStatus('current')
if mibBuilder.loadTexts: sysDnsStatAReqs.setDescription('The number of A query packets received.')
sysDnsStatAaaaReqs = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 24, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDnsStatAaaaReqs.setStatus('current')
if mibBuilder.loadTexts: sysDnsStatAaaaReqs.setDescription('The number of AAAA query packets received.')
sysDnsStatAnyReqs = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 24, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDnsStatAnyReqs.setStatus('current')
if mibBuilder.loadTexts: sysDnsStatAnyReqs.setDescription('The number of ANY type query packets received.')
sysDnsStatCnameReqs = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 24, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDnsStatCnameReqs.setStatus('current')
if mibBuilder.loadTexts: sysDnsStatCnameReqs.setDescription('The number of CNAME query packets received.')
sysDnsStatMxReqs = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 24, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDnsStatMxReqs.setStatus('current')
if mibBuilder.loadTexts: sysDnsStatMxReqs.setDescription('The number of MX query packets received.')
sysDnsStatNsReqs = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 24, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDnsStatNsReqs.setStatus('current')
if mibBuilder.loadTexts: sysDnsStatNsReqs.setDescription('The number of NS query packets received.')
sysDnsStatPtrReqs = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 24, 42), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDnsStatPtrReqs.setStatus('current')
if mibBuilder.loadTexts: sysDnsStatPtrReqs.setDescription('The number of PTR query packets received.')
sysDnsStatSoaReqs = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 24, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDnsStatSoaReqs.setStatus('current')
if mibBuilder.loadTexts: sysDnsStatSoaReqs.setDescription('The number of SOA query packets received.')
sysDnsStatSrvReqs = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 24, 44), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDnsStatSrvReqs.setStatus('current')
if mibBuilder.loadTexts: sysDnsStatSrvReqs.setDescription('The number of SRV query packets received.')
sysDnsStatTxtReqs = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 24, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDnsStatTxtReqs.setStatus('current')
if mibBuilder.loadTexts: sysDnsStatTxtReqs.setDescription('The number of TXT query packets received.')
sysDnsStatOtherReqs = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 24, 46), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDnsStatOtherReqs.setStatus('current')
if mibBuilder.loadTexts: sysDnsStatOtherReqs.setDescription('The number of uncategorized DNS packets received.')
sysDnsStatGtmRewrites = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 24, 47), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDnsStatGtmRewrites.setStatus('current')
if mibBuilder.loadTexts: sysDnsStatGtmRewrites.setDescription('The number of responses modified by GTM.')
sysDnsStatOpcodeOther = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 24, 48), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDnsStatOpcodeOther.setStatus('current')
if mibBuilder.loadTexts: sysDnsStatOpcodeOther.setDescription('The number of queries whose operation code is uncategorized.')
sysDnsStatFastDnsResponses = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 24, 49), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDnsStatFastDnsResponses.setStatus('current')
if mibBuilder.loadTexts: sysDnsStatFastDnsResponses.setDescription('The number of responses returned by DNS Rapid Response.')
sysDnsStatFastDnsAllowed = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 24, 50), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDnsStatFastDnsAllowed.setStatus('current')
if mibBuilder.loadTexts: sysDnsStatFastDnsAllowed.setDescription('The number of non-matched queries passing through DNS Rapid Response.')
sysDnsStatFastDnsDrops = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 24, 51), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDnsStatFastDnsDrops.setStatus('current')
if mibBuilder.loadTexts: sysDnsStatFastDnsDrops.setDescription('The number of non-matching queries dropped by DNS Rapid Response.')
sysDnsStatFastDnsRespTc = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 24, 52), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDnsStatFastDnsRespTc.setStatus('current')
if mibBuilder.loadTexts: sysDnsStatFastDnsRespTc.setDescription('The number of non-matching queries resulting in a truncated response by DNS Rapid Response.')
sysDnsStatFastDnsRespNx = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 24, 53), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDnsStatFastDnsRespNx.setStatus('current')
if mibBuilder.loadTexts: sysDnsStatFastDnsRespNx.setDescription('The number of non-matching queries resulting in a NXDOMAIN response by DNS Rapid Response.')
sysDnsStatFastDnsRespNe = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 24, 54), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDnsStatFastDnsRespNe.setStatus('current')
if mibBuilder.loadTexts: sysDnsStatFastDnsRespNe.setDescription('The number of non-matching queries resulting in a No-Data response by DNS Rapid Response.')
sysDnsStatFastDnsRespRf = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 24, 55), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDnsStatFastDnsRespRf.setStatus('current')
if mibBuilder.loadTexts: sysDnsStatFastDnsRespRf.setDescription('The number of non-matching queries resulting in a REFUSED response by DNS Rapid Response.')
sysDnsStatNaptrReqs = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 24, 56), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDnsStatNaptrReqs.setStatus('current')
if mibBuilder.loadTexts: sysDnsStatNaptrReqs.setDescription('The number of NAPTR query packets received.')
sysDnsStatRcodeBadvers = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 24, 57), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDnsStatRcodeBadvers.setStatus('current')
if mibBuilder.loadTexts: sysDnsStatRcodeBadvers.setDescription('The number of responses whose return code is BADVERS.')
sysDnsStatFastDnsRespBvers = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 24, 58), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDnsStatFastDnsRespBvers.setStatus('current')
if mibBuilder.loadTexts: sysDnsStatFastDnsRespBvers.setDescription('The number of queries resulting in a BADVERS response by DNS Rapid Response.')
sysLsnPoolStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 25, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLsnPoolStatResetStats.setStatus('current')
if mibBuilder.loadTexts: sysLsnPoolStatResetStats.setDescription('The action to reset resettable statistics data in sysGlobalLsnPoolStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
sysLsnPoolStatActivePersistenceMappings = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 25, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLsnPoolStatActivePersistenceMappings.setStatus('current')
if mibBuilder.loadTexts: sysLsnPoolStatActivePersistenceMappings.setDescription('The number of active persistence mappings.')
sysLsnPoolStatActiveInboundReservations = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 25, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLsnPoolStatActiveInboundReservations.setStatus('current')
if mibBuilder.loadTexts: sysLsnPoolStatActiveInboundReservations.setDescription('The number of active inbound reservations.')
sysLsnPoolStatTranslationRequests = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 25, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLsnPoolStatTranslationRequests.setStatus('current')
if mibBuilder.loadTexts: sysLsnPoolStatTranslationRequests.setDescription('The number of translation requests.')
sysLsnPoolStatHairpinConnectionRequests = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 25, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLsnPoolStatHairpinConnectionRequests.setStatus('current')
if mibBuilder.loadTexts: sysLsnPoolStatHairpinConnectionRequests.setDescription('The number of hairpin connection requests.')
sysLsnPoolStatActiveTranslations = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 25, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLsnPoolStatActiveTranslations.setStatus('current')
if mibBuilder.loadTexts: sysLsnPoolStatActiveTranslations.setDescription('The number of active translations.')
sysLsnPoolStatActiveHairpinConnections = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 25, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLsnPoolStatActiveHairpinConnections.setStatus('current')
if mibBuilder.loadTexts: sysLsnPoolStatActiveHairpinConnections.setDescription('The number of active hairpin connections.')
sysLsnPoolStatTranslationRequestFailures = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 25, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLsnPoolStatTranslationRequestFailures.setStatus('current')
if mibBuilder.loadTexts: sysLsnPoolStatTranslationRequestFailures.setDescription('The number of translation request failures.')
sysLsnPoolStatPersistenceMappingFailures = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 25, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLsnPoolStatPersistenceMappingFailures.setStatus('current')
if mibBuilder.loadTexts: sysLsnPoolStatPersistenceMappingFailures.setDescription('The number of persistence mapping translation failures.')
sysLsnPoolStatHairpinConnectionFailures = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 25, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLsnPoolStatHairpinConnectionFailures.setStatus('current')
if mibBuilder.loadTexts: sysLsnPoolStatHairpinConnectionFailures.setDescription('The number of failed hairpin connection attempts.  A hairpin connection failure occurs when \n\t        a subscriber connects to an inbound reservation but a connection could not be created.')
sysLsnPoolStatBackupPoolTranslations = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 25, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLsnPoolStatBackupPoolTranslations.setStatus('current')
if mibBuilder.loadTexts: sysLsnPoolStatBackupPoolTranslations.setDescription('The number of translation requests that were served using the backup pool.')
sysLsnPoolStatLogAttempts = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 25, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLsnPoolStatLogAttempts.setStatus('current')
if mibBuilder.loadTexts: sysLsnPoolStatLogAttempts.setDescription('The number of logging attempts.')
sysLsnPoolStatLogFailures = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 25, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLsnPoolStatLogFailures.setStatus('current')
if mibBuilder.loadTexts: sysLsnPoolStatLogFailures.setDescription('The number of logging attempts that resulted in failures.')
sysLsnPoolStatTotalEndPoints = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 25, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLsnPoolStatTotalEndPoints.setStatus('current')
if mibBuilder.loadTexts: sysLsnPoolStatTotalEndPoints.setDescription('The product of the number of IP addresses and the translation port\n\t        range. This is computed when the pool membership or translation\n\t        port range changes.')
sysLsnPoolStatActivePortBlocks = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 25, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLsnPoolStatActivePortBlocks.setStatus('current')
if mibBuilder.loadTexts: sysLsnPoolStatActivePortBlocks.setDescription('The total number of port blocks actively in use.')
sysLsnPoolStatActiveClientsReachedLimit = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 25, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLsnPoolStatActiveClientsReachedLimit.setStatus('current')
if mibBuilder.loadTexts: sysLsnPoolStatActiveClientsReachedLimit.setDescription('Total clients who have reached the max port blocks allocated to them.')
sysLsnPoolStatActiveZombiePortBlocks = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 25, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLsnPoolStatActiveZombiePortBlocks.setStatus('current')
if mibBuilder.loadTexts: sysLsnPoolStatActiveZombiePortBlocks.setDescription('Total blocks which have reached their lifetime and cannot be used for\n\t        new allocations. They are not yet deleted because there are\n\t        connections using ports in that block.')
sysLsnPoolStatTotalClientsReachedLimit = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 25, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLsnPoolStatTotalClientsReachedLimit.setStatus('current')
if mibBuilder.loadTexts: sysLsnPoolStatTotalClientsReachedLimit.setDescription('Total client connections rejected because client hit\n\t        client-block-limit and could not find any free ports in the\n\t        existing blocks.')
sysLsnPoolStatTotalPortBlockAllocations = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 25, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLsnPoolStatTotalPortBlockAllocations.setStatus('current')
if mibBuilder.loadTexts: sysLsnPoolStatTotalPortBlockAllocations.setDescription('Total port block allocations.')
sysLsnPoolStatTotalPortBlockAllocationFailures = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 25, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLsnPoolStatTotalPortBlockAllocationFailures.setStatus('current')
if mibBuilder.loadTexts: sysLsnPoolStatTotalPortBlockAllocationFailures.setDescription('Total port block allocation failures.')
sysLsnPoolStatTotalPortBlockDeallocations = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 25, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLsnPoolStatTotalPortBlockDeallocations.setStatus('current')
if mibBuilder.loadTexts: sysLsnPoolStatTotalPortBlockDeallocations.setDescription('Total port blocks freed.')
sysLsnPoolStatTotalZombiePortBlockConnsKilled = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 25, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLsnPoolStatTotalZombiePortBlockConnsKilled.setStatus('current')
if mibBuilder.loadTexts: sysLsnPoolStatTotalZombiePortBlockConnsKilled.setDescription('Total connections killed due to zombie block reaching zombie timeout.')
sysLsnPoolStatTotalZombiePortBlocksCreated = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 25, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLsnPoolStatTotalZombiePortBlocksCreated.setStatus('current')
if mibBuilder.loadTexts: sysLsnPoolStatTotalZombiePortBlocksCreated.setDescription('Total blocks which have reached their lifetime and cannot be used for\n\t        new allocations. They are not yet deleted because there are\n\t        connections using ports in that block.')
sysLsnPoolStatTotalZombiePortBlocksDeleted = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 25, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLsnPoolStatTotalZombiePortBlocksDeleted.setStatus('current')
if mibBuilder.loadTexts: sysLsnPoolStatTotalZombiePortBlocksDeleted.setDescription('Total zombie blocks deleted after their zombie timeouts. When a zombie\n\t        block is deleted, the connections using them are killed.')
sysLsnPoolStatEndPointsString = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 25, 25), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLsnPoolStatEndPointsString.setStatus('current')
if mibBuilder.loadTexts: sysLsnPoolStatEndPointsString.setDescription('The product of the number of IP addresses and the translation port\n\t        range. This is computed when the pool membership or translation\n\t        port range changes.')
sysFecStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 15, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysFecStatResetStats.setStatus('current')
if mibBuilder.loadTexts: sysFecStatResetStats.setDescription('The action to reset resettable statistics data in sysFecStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
sysFecStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 15, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFecStatNumber.setStatus('current')
if mibBuilder.loadTexts: sysFecStatNumber.setDescription('The number of sysFecStat entries in the table.')
sysFecStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 15, 1, 3), )
if mibBuilder.loadTexts: sysFecStatTable.setStatus('current')
if mibBuilder.loadTexts: sysFecStatTable.setDescription('A table containing statistics information about FEC tunnels.')
sysFecStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 15, 1, 3, 1), ).setIndexNames((0, "F5-BIGIP-SYSTEM-MIB", "sysFecStatName"), (0, "F5-BIGIP-SYSTEM-MIB", "sysFecStatProfile"))
if mibBuilder.loadTexts: sysFecStatEntry.setStatus('current')
if mibBuilder.loadTexts: sysFecStatEntry.setDescription('Columns in the sysFecStat Table')
sysFecStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 15, 1, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFecStatName.setStatus('current')
if mibBuilder.loadTexts: sysFecStatName.setDescription('The name of a FEC tunnel.')
sysFecStatProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 15, 1, 3, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFecStatProfile.setStatus('current')
if mibBuilder.loadTexts: sysFecStatProfile.setDescription('The name of a FEC profile.')
sysFecStatOutRawPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 15, 1, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFecStatOutRawPackets.setStatus('current')
if mibBuilder.loadTexts: sysFecStatOutRawPackets.setDescription('The number of output raw packets.')
sysFecStatOutRawBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 15, 1, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFecStatOutRawBytes.setStatus('current')
if mibBuilder.loadTexts: sysFecStatOutRawBytes.setDescription('The number of output raw bytes.')
sysFecStatOutRdndPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 15, 1, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFecStatOutRdndPackets.setStatus('current')
if mibBuilder.loadTexts: sysFecStatOutRdndPackets.setDescription('The number of output redundant packets.')
sysFecStatOutRdndBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 15, 1, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFecStatOutRdndBytes.setStatus('current')
if mibBuilder.loadTexts: sysFecStatOutRdndBytes.setDescription('The number of output redundant bytes.')
sysFecStatInRawPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 15, 1, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFecStatInRawPackets.setStatus('current')
if mibBuilder.loadTexts: sysFecStatInRawPackets.setDescription('The number of input raw packets.')
sysFecStatInRawBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 15, 1, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFecStatInRawBytes.setStatus('current')
if mibBuilder.loadTexts: sysFecStatInRawBytes.setDescription('The number of input raw bytes.')
sysFecStatInRdndPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 15, 1, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFecStatInRdndPackets.setStatus('current')
if mibBuilder.loadTexts: sysFecStatInRdndPackets.setDescription('The number of input redundant packets.')
sysFecStatInRdndBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 15, 1, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFecStatInRdndBytes.setStatus('current')
if mibBuilder.loadTexts: sysFecStatInRdndBytes.setDescription('The number of input redundant bytes.')
sysFecStatInRdndLost = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 15, 1, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFecStatInRdndLost.setStatus('current')
if mibBuilder.loadTexts: sysFecStatInRdndLost.setDescription('The number of input redundant packets lost.')
sysFecStatInRawLost = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 15, 1, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFecStatInRawLost.setStatus('current')
if mibBuilder.loadTexts: sysFecStatInRawLost.setDescription('The number of input raw packets lost.')
sysFecStatRmtInRdndPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 15, 1, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFecStatRmtInRdndPackets.setStatus('current')
if mibBuilder.loadTexts: sysFecStatRmtInRdndPackets.setDescription('The number of remote side input redundant packets.')
sysFecStatRmtInRdndLost = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 15, 1, 3, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFecStatRmtInRdndLost.setStatus('current')
if mibBuilder.loadTexts: sysFecStatRmtInRdndLost.setDescription('The number of remote side input redundant packets lost.')
sysFecStatRmtInRawPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 15, 1, 3, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFecStatRmtInRawPackets.setStatus('current')
if mibBuilder.loadTexts: sysFecStatRmtInRawPackets.setDescription('The number of remote side input raw packets.')
sysFecStatRmtInRawLost = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 15, 1, 3, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFecStatRmtInRawLost.setStatus('current')
if mibBuilder.loadTexts: sysFecStatRmtInRawLost.setDescription('The number of remote side input raw packets lost.')
sysVcmpAssignedSlotsNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 13, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVcmpAssignedSlotsNumber.setStatus('current')
if mibBuilder.loadTexts: sysVcmpAssignedSlotsNumber.setDescription('The number of sysVcmpAssignedSlots entries in the table.')
sysVcmpAssignedSlotsTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 1, 13, 5, 2), )
if mibBuilder.loadTexts: sysVcmpAssignedSlotsTable.setStatus('current')
if mibBuilder.loadTexts: sysVcmpAssignedSlotsTable.setDescription('A list of the slots assigned to a VCMP guest.')
sysVcmpAssignedSlotsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 1, 13, 5, 2, 1), ).setIndexNames((0, "F5-BIGIP-SYSTEM-MIB", "sysVcmpAssignedSlotsName"), (0, "F5-BIGIP-SYSTEM-MIB", "sysVcmpAssignedSlotsIndex"))
if mibBuilder.loadTexts: sysVcmpAssignedSlotsEntry.setStatus('current')
if mibBuilder.loadTexts: sysVcmpAssignedSlotsEntry.setDescription('Columns in the sysVcmpAssignedSlots Table')
sysVcmpAssignedSlotsName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 13, 5, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVcmpAssignedSlotsName.setStatus('current')
if mibBuilder.loadTexts: sysVcmpAssignedSlotsName.setDescription('The name of a VCMP guest.')
sysVcmpAssignedSlotsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 13, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVcmpAssignedSlotsIndex.setStatus('current')
if mibBuilder.loadTexts: sysVcmpAssignedSlotsIndex.setDescription('The index of the slot number assigned to the specified VCMP guest.')
sysVcmpAssignedSlotsSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 13, 5, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVcmpAssignedSlotsSlotId.setStatus('current')
if mibBuilder.loadTexts: sysVcmpAssignedSlotsSlotId.setDescription('The slot number assigned to the specified VCMP guest.')
sysVcmpAllowedSlotsNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 13, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVcmpAllowedSlotsNumber.setStatus('current')
if mibBuilder.loadTexts: sysVcmpAllowedSlotsNumber.setDescription('The number of sysVcmpAllowedSlots entries in the table.')
sysVcmpAllowedSlotsTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 1, 13, 6, 2), )
if mibBuilder.loadTexts: sysVcmpAllowedSlotsTable.setStatus('current')
if mibBuilder.loadTexts: sysVcmpAllowedSlotsTable.setDescription('A list of the slots that are allowed to be assigned to a VCMP guest.')
sysVcmpAllowedSlotsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 1, 13, 6, 2, 1), ).setIndexNames((0, "F5-BIGIP-SYSTEM-MIB", "sysVcmpAllowedSlotsName"), (0, "F5-BIGIP-SYSTEM-MIB", "sysVcmpAllowedSlotsIndex"))
if mibBuilder.loadTexts: sysVcmpAllowedSlotsEntry.setStatus('current')
if mibBuilder.loadTexts: sysVcmpAllowedSlotsEntry.setDescription('Columns in the sysVcmpAllowedSlots Table')
sysVcmpAllowedSlotsName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 13, 6, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVcmpAllowedSlotsName.setStatus('current')
if mibBuilder.loadTexts: sysVcmpAllowedSlotsName.setDescription('The name of a VCMP guest.')
sysVcmpAllowedSlotsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 13, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVcmpAllowedSlotsIndex.setStatus('current')
if mibBuilder.loadTexts: sysVcmpAllowedSlotsIndex.setDescription('The index of a slot number allowed for the specified VCMP guest.')
sysVcmpAllowedSlotsSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 13, 6, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVcmpAllowedSlotsSlotId.setStatus('current')
if mibBuilder.loadTexts: sysVcmpAllowedSlotsSlotId.setDescription('A slot number allowed for the specified VCMP guest.')
sysVirtualDiskNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 13, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVirtualDiskNumber.setStatus('current')
if mibBuilder.loadTexts: sysVirtualDiskNumber.setDescription('The number of sysVirtualDisk entries in the table.')
sysVirtualDiskTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 1, 13, 7, 2), )
if mibBuilder.loadTexts: sysVirtualDiskTable.setStatus('current')
if mibBuilder.loadTexts: sysVirtualDiskTable.setDescription('A list of virtual disks for the VCMP guest VMs on the appliance or on each slot.')
sysVirtualDiskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 1, 13, 7, 2, 1), ).setIndexNames((0, "F5-BIGIP-SYSTEM-MIB", "sysVirtualDiskSlotId"), (0, "F5-BIGIP-SYSTEM-MIB", "sysVirtualDiskFilename"))
if mibBuilder.loadTexts: sysVirtualDiskEntry.setStatus('current')
if mibBuilder.loadTexts: sysVirtualDiskEntry.setDescription('Columns in the sysVirtualDisk Table')
sysVirtualDiskFilename = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 13, 7, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVirtualDiskFilename.setStatus('current')
if mibBuilder.loadTexts: sysVirtualDiskFilename.setDescription('Virtual disk image filename on the host.')
sysVirtualDiskOperatingSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 13, 7, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("tmos", 1), ("linux", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVirtualDiskOperatingSystem.setStatus('current')
if mibBuilder.loadTexts: sysVirtualDiskOperatingSystem.setDescription('The guest operating system installed on the virtual disk.')
sysVirtualDiskSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 13, 7, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVirtualDiskSlotId.setStatus('current')
if mibBuilder.loadTexts: sysVirtualDiskSlotId.setDescription('The chassis slot number of this virtual disk.')
sysVirtualDiskState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 13, 7, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 0), ("created", 1), ("installing", 2), ("migrating", 3), ("ready", 4), ("inUse", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVirtualDiskState.setStatus('current')
if mibBuilder.loadTexts: sysVirtualDiskState.setDescription('The status of this virtual disk.')
sysGlobalSipStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 27, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysGlobalSipStatResetStats.setStatus('current')
if mibBuilder.loadTexts: sysGlobalSipStatResetStats.setDescription('The action to reset resettable statistics data in sysGlobalSipStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
sysGlobalSipStatRequests = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 27, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalSipStatRequests.setStatus('current')
if mibBuilder.loadTexts: sysGlobalSipStatRequests.setDescription('The total number of requests received.')
sysGlobalSipStatResponses = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 27, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalSipStatResponses.setStatus('current')
if mibBuilder.loadTexts: sysGlobalSipStatResponses.setDescription('The total number of responses sent.')
sysGlobalSipStatBadmsgs = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 27, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalSipStatBadmsgs.setStatus('current')
if mibBuilder.loadTexts: sysGlobalSipStatBadmsgs.setDescription('The total number of bad messages due to malform requests.')
sysGlobalSipStatDrops = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 27, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalSipStatDrops.setStatus('current')
if mibBuilder.loadTexts: sysGlobalSipStatDrops.setDescription('The total number of dropped packets.')
sysGlobalFtpStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 26, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysGlobalFtpStatResetStats.setStatus('current')
if mibBuilder.loadTexts: sysGlobalFtpStatResetStats.setDescription('The action to reset resettable statistics data in sysGlobalFtpStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
sysGlobalFtpStatLoginRequests = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 26, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalFtpStatLoginRequests.setStatus('current')
if mibBuilder.loadTexts: sysGlobalFtpStatLoginRequests.setDescription('The total number of login requests received.')
sysGlobalFtpStatDownloadRequests = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 26, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalFtpStatDownloadRequests.setStatus('current')
if mibBuilder.loadTexts: sysGlobalFtpStatDownloadRequests.setDescription('The total number of download requests received.')
sysGlobalFtpStatUploadRequests = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 26, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalFtpStatUploadRequests.setStatus('current')
if mibBuilder.loadTexts: sysGlobalFtpStatUploadRequests.setDescription('The total number of upload requests received.')
sysGlobalFtpStatFtpsSessions = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 26, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalFtpStatFtpsSessions.setStatus('current')
if mibBuilder.loadTexts: sysGlobalFtpStatFtpsSessions.setDescription('The total number of sessions entering explicit FTPS mode.')
sysGlobalFtpStatPassthruTransitions = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 26, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalFtpStatPassthruTransitions.setStatus('current')
if mibBuilder.loadTexts: sysGlobalFtpStatPassthruTransitions.setDescription('The total number of sessions entering pass through mode.')
sysGlobalFtpStatFtpsIntercepts = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 26, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalFtpStatFtpsIntercepts.setStatus('current')
if mibBuilder.loadTexts: sysGlobalFtpStatFtpsIntercepts.setDescription('The total number of intercepted FTPS connections.')
sysGlobalFtpStatFtpsResets = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 26, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalFtpStatFtpsResets.setStatus('current')
if mibBuilder.loadTexts: sysGlobalFtpStatFtpsResets.setDescription('The total number of reset FTP connections due to FTPS policy.')
sysGlobalFtpStatFtpsBypasses = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 26, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalFtpStatFtpsBypasses.setStatus('current')
if mibBuilder.loadTexts: sysGlobalFtpStatFtpsBypasses.setDescription('The total number of FTP transitions to pass through mode due to SSL bypass.')
sysGlobalFtpStatPassiveRequests = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 26, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalFtpStatPassiveRequests.setStatus('current')
if mibBuilder.loadTexts: sysGlobalFtpStatPassiveRequests.setDescription('The total number of passive transfer requests received.')
sysGlobalFtpStatActiveRequests = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 26, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalFtpStatActiveRequests.setStatus('current')
if mibBuilder.loadTexts: sysGlobalFtpStatActiveRequests.setDescription('The total number of active transfer requests received.')
sysBladeTempNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 2, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysBladeTempNumber.setStatus('current')
if mibBuilder.loadTexts: sysBladeTempNumber.setDescription('The number of sysBladeTemp entries in the table.')
sysBladeTempTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 2, 4, 2), )
if mibBuilder.loadTexts: sysBladeTempTable.setStatus('current')
if mibBuilder.loadTexts: sysBladeTempTable.setDescription('A table containing information of blade temperature of the system.')
sysBladeTempEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 2, 4, 2, 1), ).setIndexNames((0, "F5-BIGIP-SYSTEM-MIB", "sysBladeTempIndex"), (0, "F5-BIGIP-SYSTEM-MIB", "sysBladeTempSlot"))
if mibBuilder.loadTexts: sysBladeTempEntry.setStatus('current')
if mibBuilder.loadTexts: sysBladeTempEntry.setDescription('Columns in the sysBladeTemp Table')
sysBladeTempIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 2, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysBladeTempIndex.setStatus('current')
if mibBuilder.loadTexts: sysBladeTempIndex.setDescription('The index of a chassis temperature sensor on the system. \n\t\tIt identifies a particular chassis temperature sensor, fan, etc.')
sysBladeTempTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 2, 4, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysBladeTempTemperature.setStatus('current')
if mibBuilder.loadTexts: sysBladeTempTemperature.setDescription('The blade temperature (in Celsius) of the indexed sensor on the system.,\n\t\tThis is only supported for the platform where \n\t\tthe sensor data is available.')
sysBladeTempLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 2, 4, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysBladeTempLocation.setStatus('current')
if mibBuilder.loadTexts: sysBladeTempLocation.setDescription('The location for the temperature sensor.')
sysBladeTempSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 2, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysBladeTempSlot.setStatus('current')
if mibBuilder.loadTexts: sysBladeTempSlot.setDescription('The chassis slot number, if applicable.')
sysBladeVoltageNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 2, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysBladeVoltageNumber.setStatus('current')
if mibBuilder.loadTexts: sysBladeVoltageNumber.setDescription('The number of sysBladeVoltage entries in the table.')
sysBladeVoltageTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 2, 5, 2), )
if mibBuilder.loadTexts: sysBladeVoltageTable.setStatus('current')
if mibBuilder.loadTexts: sysBladeVoltageTable.setDescription('A table containing information of blade voltage of the system.')
sysBladeVoltageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 2, 5, 2, 1), ).setIndexNames((0, "F5-BIGIP-SYSTEM-MIB", "sysBladeVoltageIndex"))
if mibBuilder.loadTexts: sysBladeVoltageEntry.setStatus('current')
if mibBuilder.loadTexts: sysBladeVoltageEntry.setDescription('Columns in the sysBladeVoltage Table')
sysBladeVoltageIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 2, 5, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysBladeVoltageIndex.setStatus('current')
if mibBuilder.loadTexts: sysBladeVoltageIndex.setDescription('The index of the voltage sensor. \n\t\tIt identifies a particular blade voltage sensor, fan, etc.')
sysBladeVoltageVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 2, 5, 2, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysBladeVoltageVoltage.setStatus('current')
if mibBuilder.loadTexts: sysBladeVoltageVoltage.setDescription('The blade voltage (in mV) of the indexed sensor on the system.,\n\t\tThis is only supported for the platform where \n\t\tthe sensor data is available.')
sysBladeVoltageSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 3, 2, 5, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysBladeVoltageSlot.setStatus('current')
if mibBuilder.loadTexts: sysBladeVoltageSlot.setDescription('The chassis slot number, if applicable.')
sysProfilePptpStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 28, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysProfilePptpStatResetStats.setStatus('current')
if mibBuilder.loadTexts: sysProfilePptpStatResetStats.setDescription('The action to reset resettable statistics data in sysGlobalPptpStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
sysProfilePptpStatStartRequests = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 28, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysProfilePptpStatStartRequests.setStatus('current')
if mibBuilder.loadTexts: sysProfilePptpStatStartRequests.setDescription('Number of PPTP control messages used to establish the control\n\t     connection between a server and a client.')
sysProfilePptpStatStartReplies = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 28, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysProfilePptpStatStartReplies.setStatus('current')
if mibBuilder.loadTexts: sysProfilePptpStatStartReplies.setDescription('Number of PPTP control messages sent in reply to a received\n\t     Start-Control-Connection-Request message.')
sysProfilePptpStatStopRequests = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 28, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysProfilePptpStatStopRequests.setStatus('current')
if mibBuilder.loadTexts: sysProfilePptpStatStopRequests.setDescription('Number of PPTP control messages sent by one peer of a client-server\n\t     control connection to inform the other peer that the control\n\t     connection should be closed.')
sysProfilePptpStatStopReplies = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 28, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysProfilePptpStatStopReplies.setStatus('current')
if mibBuilder.loadTexts: sysProfilePptpStatStopReplies.setDescription('Number of PPTP control messages sent by one peer of a client-server\n\t     control connection upon receipt of a\n\t     Stop-Control-Connection-Request from the other peer.')
sysProfilePptpStatEchoRequests = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 28, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysProfilePptpStatEchoRequests.setStatus('current')
if mibBuilder.loadTexts: sysProfilePptpStatEchoRequests.setDescription('Number of PPTP control messages sent by either peer of a client-server\n\t     control connection.')
sysProfilePptpStatEchoReplies = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 28, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysProfilePptpStatEchoReplies.setStatus('current')
if mibBuilder.loadTexts: sysProfilePptpStatEchoReplies.setDescription('Number of PPTP control messages sent by either peer of a client-server\n\t     control connection in response to the receipt of an Echo-Request.')
sysProfilePptpStatOutgoingCallRequests = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 28, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysProfilePptpStatOutgoingCallRequests.setStatus('current')
if mibBuilder.loadTexts: sysProfilePptpStatOutgoingCallRequests.setDescription('Number of PPTP control messages sent by the server to the client to\n\t     indicate that an outbound call from the client is to be\n\t     established.')
sysProfilePptpStatOutgoingCallReplies = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 28, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysProfilePptpStatOutgoingCallReplies.setStatus('current')
if mibBuilder.loadTexts: sysProfilePptpStatOutgoingCallReplies.setDescription('Number of PPTP control messages sent by the client to the server in\n\t     response to a received Outgoing-Call-Request message.')
sysProfilePptpStatCallClearRequests = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 28, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysProfilePptpStatCallClearRequests.setStatus('current')
if mibBuilder.loadTexts: sysProfilePptpStatCallClearRequests.setDescription('Number of PPTP control messages sent by the server to the client\n\t     indicating that a particular call is to be disconnected.')
sysProfilePptpStatCallDisconnectNotifies = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 28, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysProfilePptpStatCallDisconnectNotifies.setStatus('current')
if mibBuilder.loadTexts: sysProfilePptpStatCallDisconnectNotifies.setDescription('Number of PPTP Call-Disconnect-Notify control messages sent by the client \n\t    to the server.  Its purpose is to inform the server of both the\n\t    disconnection and the reason for it.')
sysProfilePptpStatWanErrorNotifies = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 28, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysProfilePptpStatWanErrorNotifies.setStatus('current')
if mibBuilder.loadTexts: sysProfilePptpStatWanErrorNotifies.setDescription('Number of WAN-Error-Notify messages sent by the client to the server to \n\t    indicate WAN error conditions (conditions that occur on the interface \n\t    supporting PPP).')
sysProfilePptpStatSetLinkInfo = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 28, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysProfilePptpStatSetLinkInfo.setStatus('current')
if mibBuilder.loadTexts: sysProfilePptpStatSetLinkInfo.setDescription('Number of PPTP control messages sent by the server to the client to\n\t     set PPP-negotiated options.')
sysProfilePptpStatActiveCalls = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 28, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysProfilePptpStatActiveCalls.setStatus('current')
if mibBuilder.loadTexts: sysProfilePptpStatActiveCalls.setDescription('Number of active PPTP calls.')
sysProfilePptpStatTotalCalls = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 28, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysProfilePptpStatTotalCalls.setStatus('current')
if mibBuilder.loadTexts: sysProfilePptpStatTotalCalls.setDescription('Total number of PPTP calls served.')
sysProfilePptpStatFailedCalls = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 28, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysProfilePptpStatFailedCalls.setStatus('current')
if mibBuilder.loadTexts: sysProfilePptpStatFailedCalls.setDescription('Total number of PPTP calls that failed.')
sysPcpStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 29, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysPcpStatResetStats.setStatus('current')
if mibBuilder.loadTexts: sysPcpStatResetStats.setDescription('The action to reset resettable statistics data in sysGlobalPcpStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
sysPcpStatPcpAnnounceRequests = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 29, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPcpStatPcpAnnounceRequests.setStatus('current')
if mibBuilder.loadTexts: sysPcpStatPcpAnnounceRequests.setDescription('The total number of Announce requests received.')
sysPcpStatPcpAnnounceResponsesUcast = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 29, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPcpStatPcpAnnounceResponsesUcast.setStatus('current')
if mibBuilder.loadTexts: sysPcpStatPcpAnnounceResponsesUcast.setDescription('The total number of unicast Announce responses transmitted.')
sysPcpStatPcpAnnounceResponsesMulticast = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 29, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPcpStatPcpAnnounceResponsesMulticast.setStatus('current')
if mibBuilder.loadTexts: sysPcpStatPcpAnnounceResponsesMulticast.setDescription('The total number of multicast Announce responses transmitted.')
sysPcpStatPcpMapRequests = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 29, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPcpStatPcpMapRequests.setStatus('current')
if mibBuilder.loadTexts: sysPcpStatPcpMapRequests.setDescription('The total number of Map requests received.')
sysPcpStatPcpMapResponses = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 29, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPcpStatPcpMapResponses.setStatus('current')
if mibBuilder.loadTexts: sysPcpStatPcpMapResponses.setDescription('The total number of Map responses transmitted.')
sysPcpStatPcpPeerRequests = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 29, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPcpStatPcpPeerRequests.setStatus('current')
if mibBuilder.loadTexts: sysPcpStatPcpPeerRequests.setDescription('The total number of Peer requests received.')
sysPcpStatPcpPeerResponses = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 29, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPcpStatPcpPeerResponses.setStatus('current')
if mibBuilder.loadTexts: sysPcpStatPcpPeerResponses.setDescription('The total number of Peer responses transmitted.')
sysPcpStatPcpErrorsInvalidRequests = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 29, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPcpStatPcpErrorsInvalidRequests.setStatus('current')
if mibBuilder.loadTexts: sysPcpStatPcpErrorsInvalidRequests.setDescription('The total number of invalid or malformed PCP requests received.')
sysPcpStatPcpErrorsUnavailableResource = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 29, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPcpStatPcpErrorsUnavailableResource.setStatus('current')
if mibBuilder.loadTexts: sysPcpStatPcpErrorsUnavailableResource.setDescription('The total number of PCP requests received where the server has insufficient \n\t     resources to complete the requested operation.')
sysPcpStatPcpErrorsNotAuthorized = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 29, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPcpStatPcpErrorsNotAuthorized.setStatus('current')
if mibBuilder.loadTexts: sysPcpStatPcpErrorsNotAuthorized.setDescription('The total number of PCP requests that generated (or caused) an\n\t    unauthorized error when attempting to create a mapping.')
sysPcpStatPcpErrorsOther = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 29, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPcpStatPcpErrorsOther.setStatus('current')
if mibBuilder.loadTexts: sysPcpStatPcpErrorsOther.setDescription('The total number of PCP requests received that resulted in other errors.')
sysDnsServerStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 30, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysDnsServerStatResetStats.setStatus('current')
if mibBuilder.loadTexts: sysDnsServerStatResetStats.setDescription('The action to reset resettable statistics data in sysGlobalDnsServerStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
sysDnsServerStatXfrQueries = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 30, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDnsServerStatXfrQueries.setStatus('current')
if mibBuilder.loadTexts: sysDnsServerStatXfrQueries.setDescription('The number of zone transfer queries.')
sysDnsServerStatXfrResponses = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 30, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDnsServerStatXfrResponses.setStatus('current')
if mibBuilder.loadTexts: sysDnsServerStatXfrResponses.setDescription('The number of zone transfer responses.')
sysDnsServerStatXfrNotifies = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 30, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDnsServerStatXfrNotifies.setStatus('current')
if mibBuilder.loadTexts: sysDnsServerStatXfrNotifies.setDescription('The number of zone transfer notifies.')
sysDnsServerStatXfrNotifyFailed = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 30, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDnsServerStatXfrNotifyFailed.setStatus('current')
if mibBuilder.loadTexts: sysDnsServerStatXfrNotifyFailed.setDescription('The number of zone transfer notify failures.')
sysMptcpStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 31, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysMptcpStatResetStats.setStatus('current')
if mibBuilder.loadTexts: sysMptcpStatResetStats.setDescription('The action to reset resettable statistics data in sysGlobalMptcpStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
sysMptcpStatAccept = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 31, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMptcpStatAccept.setStatus('current')
if mibBuilder.loadTexts: sysMptcpStatAccept.setDescription('The total number of primary MPTCP connections accepted.')
sysMptcpStatAcceptFail = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 31, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMptcpStatAcceptFail.setStatus('current')
if mibBuilder.loadTexts: sysMptcpStatAcceptFail.setDescription('The total number of primary MPTCP connections rejected.')
sysMptcpStatJoinFlow = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 31, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMptcpStatJoinFlow.setStatus('current')
if mibBuilder.loadTexts: sysMptcpStatJoinFlow.setDescription('The total number of secondary MPTCP connections accepted.')
sysMptcpStatJoinFlowFail = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 31, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMptcpStatJoinFlowFail.setStatus('current')
if mibBuilder.loadTexts: sysMptcpStatJoinFlowFail.setDescription('The total number of secondary MPTCP connections rejected.')
sysMptcpStatClose = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 31, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMptcpStatClose.setStatus('current')
if mibBuilder.loadTexts: sysMptcpStatClose.setDescription('The total number of MPTCP connections closed.')
sysMptcpStatRxtimeout = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 31, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMptcpStatRxtimeout.setStatus('current')
if mibBuilder.loadTexts: sysMptcpStatRxtimeout.setDescription('The total number of retransmission timeouts for MPTCP connections.')
sysMptcpStatRxfailover = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 31, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMptcpStatRxfailover.setStatus('current')
if mibBuilder.loadTexts: sysMptcpStatRxfailover.setDescription('The total number of retransmission failovers for MPTCP connections.')
sysMptcpStatAddAddrTx = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 31, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMptcpStatAddAddrTx.setStatus('current')
if mibBuilder.loadTexts: sysMptcpStatAddAddrTx.setDescription('The total number of add_addr sent for MPTCP connections.')
sysMptcpStatAddAddrRx = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 31, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMptcpStatAddAddrRx.setStatus('current')
if mibBuilder.loadTexts: sysMptcpStatAddAddrRx.setDescription('The total number of add_addr received for MPTCP connections.')
sysMptcpStatRemAddrTx = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 31, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMptcpStatRemAddrTx.setStatus('current')
if mibBuilder.loadTexts: sysMptcpStatRemAddrTx.setDescription('The total number of remove_addr sent for MPTCP connections.')
sysMptcpStatRemAddrRx = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 31, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMptcpStatRemAddrRx.setStatus('current')
if mibBuilder.loadTexts: sysMptcpStatRemAddrRx.setDescription('The total number of remove_addr received for MPTCP connections.')
sysMptcpStatPrioTx = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 31, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMptcpStatPrioTx.setStatus('current')
if mibBuilder.loadTexts: sysMptcpStatPrioTx.setDescription('The total number of priority events sent for MPTCP connections.')
sysMptcpStatPrioRx = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 31, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMptcpStatPrioRx.setStatus('current')
if mibBuilder.loadTexts: sysMptcpStatPrioRx.setDescription('The total number of priority events received for MPTCP connections.')
sysMptcpStatFailTx = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 31, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMptcpStatFailTx.setStatus('current')
if mibBuilder.loadTexts: sysMptcpStatFailTx.setDescription('The total number of fallback events sent for MPTCP connections.')
sysMptcpStatFailRx = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 31, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMptcpStatFailRx.setStatus('current')
if mibBuilder.loadTexts: sysMptcpStatFailRx.setDescription('The total number of fallback events received for MPTCP connections.')
sysMptcpStatFastcloseTx = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 31, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMptcpStatFastcloseTx.setStatus('current')
if mibBuilder.loadTexts: sysMptcpStatFastcloseTx.setDescription('The total number of fastclose events sent for MPTCP connections.')
sysMptcpStatFastcloseRx = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 31, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMptcpStatFastcloseRx.setStatus('current')
if mibBuilder.loadTexts: sysMptcpStatFastcloseRx.setDescription('The total number of fastclose events received for MPTCP connections.')
sysLldpNeighborsTableNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 16, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLldpNeighborsTableNumber.setStatus('current')
if mibBuilder.loadTexts: sysLldpNeighborsTableNumber.setDescription('The number of sysLldpNeighbors entries in the table.')
sysLldpNeighborsTableTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 16, 1, 2), )
if mibBuilder.loadTexts: sysLldpNeighborsTableTable.setStatus('current')
if mibBuilder.loadTexts: sysLldpNeighborsTableTable.setDescription('A table containing information of lldp neighbors.')
sysLldpNeighborsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 16, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-SYSTEM-MIB", "sysLldpNeighborsTableChassisId"), (0, "F5-BIGIP-SYSTEM-MIB", "sysLldpNeighborsTablePortId"))
if mibBuilder.loadTexts: sysLldpNeighborsTableEntry.setStatus('current')
if mibBuilder.loadTexts: sysLldpNeighborsTableEntry.setDescription('Columns in the sysLldpNeighborsTable Table')
sysLldpNeighborsTableChassisId = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 16, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLldpNeighborsTableChassisId.setStatus('current')
if mibBuilder.loadTexts: sysLldpNeighborsTableChassisId.setDescription('The chassis ID of the LLDP neighbor.')
sysLldpNeighborsTablePortId = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 16, 1, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLldpNeighborsTablePortId.setStatus('current')
if mibBuilder.loadTexts: sysLldpNeighborsTablePortId.setDescription('The port ID of the LLDP neighbor.')
sysLldpNeighborsTableLocalInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 16, 1, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLldpNeighborsTableLocalInterface.setStatus('current')
if mibBuilder.loadTexts: sysLldpNeighborsTableLocalInterface.setDescription('The local port ID to which the LLDP neighbor is connected.')
sysLldpNeighborsTablePortDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 16, 1, 2, 1, 4), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLldpNeighborsTablePortDesc.setStatus('current')
if mibBuilder.loadTexts: sysLldpNeighborsTablePortDesc.setDescription('A description of the port on the LLDP neighbor.')
sysLldpNeighborsTableSysName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 16, 1, 2, 1, 5), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLldpNeighborsTableSysName.setStatus('current')
if mibBuilder.loadTexts: sysLldpNeighborsTableSysName.setDescription('The system name of the LLDP neighbor.')
sysLldpNeighborsTableSysDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 16, 1, 2, 1, 6), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLldpNeighborsTableSysDesc.setStatus('current')
if mibBuilder.loadTexts: sysLldpNeighborsTableSysDesc.setDescription('A description of the LLDP neighbor.')
sysLldpNeighborsTableSysCap = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 16, 1, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLldpNeighborsTableSysCap.setStatus('current')
if mibBuilder.loadTexts: sysLldpNeighborsTableSysCap.setDescription('System capabilities of the LLDP neighbor (switching, routing, etc.)')
sysLldpNeighborsTableMgmtAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 16, 1, 2, 1, 8), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLldpNeighborsTableMgmtAddr.setStatus('current')
if mibBuilder.loadTexts: sysLldpNeighborsTableMgmtAddr.setDescription('Management IP address of the LLDP neighbor.')
sysLldpNeighborsTablePvid = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 16, 1, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLldpNeighborsTablePvid.setStatus('current')
if mibBuilder.loadTexts: sysLldpNeighborsTablePvid.setDescription('The VLAN ID associated with the port on the LLDP neighbor.')
sysLldpNeighborsTablePpvid = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 16, 1, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLldpNeighborsTablePpvid.setStatus('current')
if mibBuilder.loadTexts: sysLldpNeighborsTablePpvid.setDescription('Indicates whether a PPVID TLV has been received by the LLDP neighbor.')
sysLldpNeighborsTableVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 16, 1, 2, 1, 11), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLldpNeighborsTableVlanName.setStatus('current')
if mibBuilder.loadTexts: sysLldpNeighborsTableVlanName.setDescription('The VLAN name associated with the port on the LLDP neighbor.')
sysLldpNeighborsTableVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 16, 1, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLldpNeighborsTableVlanTag.setStatus('current')
if mibBuilder.loadTexts: sysLldpNeighborsTableVlanTag.setDescription('The VLAN tag associated with the port on the LLDP neighbor.')
sysLldpNeighborsTableProtocolIdentity = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 16, 1, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLldpNeighborsTableProtocolIdentity.setStatus('current')
if mibBuilder.loadTexts: sysLldpNeighborsTableProtocolIdentity.setDescription('Indicates whether a Protocol Identity TLV has been received by the LLDP neighbor.')
sysLldpNeighborsTableAutoNego = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 16, 1, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLldpNeighborsTableAutoNego.setStatus('current')
if mibBuilder.loadTexts: sysLldpNeighborsTableAutoNego.setDescription('The MAC/PHY Auto-Negotiation status of the LLDP neighbor.')
sysLldpNeighborsTablePmd = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 16, 1, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLldpNeighborsTablePmd.setStatus('current')
if mibBuilder.loadTexts: sysLldpNeighborsTablePmd.setDescription('The MAC/PHY Physical Medium Dependant (PMD) capability of the LLDP neighbor.')
sysLldpNeighborsTableMau = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 16, 1, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLldpNeighborsTableMau.setStatus('current')
if mibBuilder.loadTexts: sysLldpNeighborsTableMau.setDescription('The MAC/PHY Medium Attachment Unit (MAU) type of the LLDP neighbor.')
sysLldpNeighborsTableAggStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 16, 1, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLldpNeighborsTableAggStatus.setStatus('current')
if mibBuilder.loadTexts: sysLldpNeighborsTableAggStatus.setDescription('Link aggregation status/capability of LLDP neighbor port.')
sysLldpNeighborsTableAggPortid = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 16, 1, 2, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLldpNeighborsTableAggPortid.setStatus('current')
if mibBuilder.loadTexts: sysLldpNeighborsTableAggPortid.setDescription('If the remote port is aggregated, indicates the aggregated port ID on the LLDP neighbor.')
sysLldpNeighborsTableMfs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 16, 1, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLldpNeighborsTableMfs.setStatus('current')
if mibBuilder.loadTexts: sysLldpNeighborsTableMfs.setDescription("Maximum frame size of the LLDP neighbor's MAC and PHY implementation.")
sysLldpNeighborsTableF5ProductModel = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 16, 1, 2, 1, 20), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLldpNeighborsTableF5ProductModel.setStatus('current')
if mibBuilder.loadTexts: sysLldpNeighborsTableF5ProductModel.setDescription('Displays the F5 product model name if the LLDP neighbor is an F5 product.')
sysIpsecSpdStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 17, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysIpsecSpdStatResetStats.setStatus('current')
if mibBuilder.loadTexts: sysIpsecSpdStatResetStats.setDescription('The action to reset resettable statistics data in sysIpsecSpdStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
sysIpsecSpdStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 17, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIpsecSpdStatNumber.setStatus('current')
if mibBuilder.loadTexts: sysIpsecSpdStatNumber.setDescription('The number of sysIpsecSpdStat entries in the table.')
sysIpsecSpdStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 17, 1, 3), )
if mibBuilder.loadTexts: sysIpsecSpdStatTable.setStatus('current')
if mibBuilder.loadTexts: sysIpsecSpdStatTable.setDescription('The global attribute information of the system.')
sysIpsecSpdStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 17, 1, 3, 1), ).setIndexNames((0, "F5-BIGIP-SYSTEM-MIB", "sysIpsecSpdStatTrafficSelectorName"), (0, "F5-BIGIP-SYSTEM-MIB", "sysIpsecSpdStatReqid"))
if mibBuilder.loadTexts: sysIpsecSpdStatEntry.setStatus('current')
if mibBuilder.loadTexts: sysIpsecSpdStatEntry.setDescription('Columns in the sysIpsecSpdStat Table')
sysIpsecSpdStatTrafficSelectorName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 17, 1, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIpsecSpdStatTrafficSelectorName.setStatus('current')
if mibBuilder.loadTexts: sysIpsecSpdStatTrafficSelectorName.setDescription('The traffic selector name')
sysIpsecSpdStatReqid = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 17, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIpsecSpdStatReqid.setStatus('current')
if mibBuilder.loadTexts: sysIpsecSpdStatReqid.setDescription('The req id')
sysIpsecSpdStatSourceAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 17, 1, 3, 1, 3), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIpsecSpdStatSourceAddressType.setStatus('current')
if mibBuilder.loadTexts: sysIpsecSpdStatSourceAddressType.setDescription('The source address type')
sysIpsecSpdStatSourceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 17, 1, 3, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIpsecSpdStatSourceAddress.setStatus('current')
if mibBuilder.loadTexts: sysIpsecSpdStatSourceAddress.setDescription('The source address')
sysIpsecSpdStatSourceNetmaskType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 17, 1, 3, 1, 5), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIpsecSpdStatSourceNetmaskType.setStatus('current')
if mibBuilder.loadTexts: sysIpsecSpdStatSourceNetmaskType.setDescription('The source netmask type')
sysIpsecSpdStatSourceNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 17, 1, 3, 1, 6), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIpsecSpdStatSourceNetmask.setStatus('current')
if mibBuilder.loadTexts: sysIpsecSpdStatSourceNetmask.setDescription('The source netmask')
sysIpsecSpdStatSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 17, 1, 3, 1, 7), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIpsecSpdStatSourcePort.setStatus('current')
if mibBuilder.loadTexts: sysIpsecSpdStatSourcePort.setDescription('The source port')
sysIpsecSpdStatDestinationAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 17, 1, 3, 1, 8), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIpsecSpdStatDestinationAddressType.setStatus('current')
if mibBuilder.loadTexts: sysIpsecSpdStatDestinationAddressType.setDescription('The destination address type')
sysIpsecSpdStatDestinationAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 17, 1, 3, 1, 9), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIpsecSpdStatDestinationAddress.setStatus('current')
if mibBuilder.loadTexts: sysIpsecSpdStatDestinationAddress.setDescription('The destination address')
sysIpsecSpdStatDestinationNetmaskType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 17, 1, 3, 1, 10), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIpsecSpdStatDestinationNetmaskType.setStatus('current')
if mibBuilder.loadTexts: sysIpsecSpdStatDestinationNetmaskType.setDescription('The destination netmask type')
sysIpsecSpdStatDestinationNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 17, 1, 3, 1, 11), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIpsecSpdStatDestinationNetmask.setStatus('current')
if mibBuilder.loadTexts: sysIpsecSpdStatDestinationNetmask.setDescription('The destination netmask')
sysIpsecSpdStatDestinationPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 17, 1, 3, 1, 12), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIpsecSpdStatDestinationPort.setStatus('current')
if mibBuilder.loadTexts: sysIpsecSpdStatDestinationPort.setDescription('The destination port')
sysIpsecSpdStatDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 17, 1, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("in", 0), ("out", 1), ("both", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIpsecSpdStatDirection.setStatus('current')
if mibBuilder.loadTexts: sysIpsecSpdStatDirection.setDescription('The direction')
sysIpsecSpdStatTunnelState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 17, 1, 3, 1, 14), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIpsecSpdStatTunnelState.setStatus('current')
if mibBuilder.loadTexts: sysIpsecSpdStatTunnelState.setDescription('The tunnel state')
sysIpsecSpdStatPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 17, 1, 3, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIpsecSpdStatPackets.setStatus('current')
if mibBuilder.loadTexts: sysIpsecSpdStatPackets.setDescription('The packets')
sysIpsecSpdStatBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 17, 1, 3, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIpsecSpdStatBytes.setStatus('current')
if mibBuilder.loadTexts: sysIpsecSpdStatBytes.setDescription('The bytes')
sysGlobalTftpStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 32, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysGlobalTftpStatResetStats.setStatus('current')
if mibBuilder.loadTexts: sysGlobalTftpStatResetStats.setDescription('The action to reset resettable statistics data in sysGlobalTftpStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
sysGlobalTftpStatReadRequests = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 32, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalTftpStatReadRequests.setStatus('current')
if mibBuilder.loadTexts: sysGlobalTftpStatReadRequests.setDescription('The total number of read requests received.')
sysGlobalTftpStatWriteRequests = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 32, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalTftpStatWriteRequests.setStatus('current')
if mibBuilder.loadTexts: sysGlobalTftpStatWriteRequests.setDescription('The total number of write requests received.')
sysGlobalTftpStatDiscardedRequests = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 32, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalTftpStatDiscardedRequests.setStatus('current')
if mibBuilder.loadTexts: sysGlobalTftpStatDiscardedRequests.setDescription('The total number of requests that were discarded.')
sysGlobalDiametersessionStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 35, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysGlobalDiametersessionStatResetStats.setStatus('current')
if mibBuilder.loadTexts: sysGlobalDiametersessionStatResetStats.setDescription('The action to reset resettable statistics data in sysGlobalDiametersessionStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
sysGlobalDiametersessionStatTotCapExcReq = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 35, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalDiametersessionStatTotCapExcReq.setStatus('current')
if mibBuilder.loadTexts: sysGlobalDiametersessionStatTotCapExcReq.setDescription('Displays the number of Capabilities Exchange Request messages.')
sysGlobalDiametersessionStatTotCapExcAns = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 35, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalDiametersessionStatTotCapExcAns.setStatus('current')
if mibBuilder.loadTexts: sysGlobalDiametersessionStatTotCapExcAns.setDescription('Displays the number of Capabilities Exchange Answer messages.')
sysGlobalDiametersessionStatTotDeviceWatchdogRequests = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 35, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalDiametersessionStatTotDeviceWatchdogRequests.setStatus('current')
if mibBuilder.loadTexts: sysGlobalDiametersessionStatTotDeviceWatchdogRequests.setDescription('Displays the number of Device Watchdog Request messages.')
sysGlobalDiametersessionStatTotDeviceWatchdogAnswers = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 35, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalDiametersessionStatTotDeviceWatchdogAnswers.setStatus('current')
if mibBuilder.loadTexts: sysGlobalDiametersessionStatTotDeviceWatchdogAnswers.setDescription('Displays the number of Device Watchdog Answers messages.')
sysGlobalDiametersessionStatTotDisconnectPeerRequests = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 35, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalDiametersessionStatTotDisconnectPeerRequests.setStatus('current')
if mibBuilder.loadTexts: sysGlobalDiametersessionStatTotDisconnectPeerRequests.setDescription('Displays the number of Disconnect Peer Request messages.')
sysGlobalDiametersessionStatTotDisconnectPeerAnswers = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 35, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalDiametersessionStatTotDisconnectPeerAnswers.setStatus('current')
if mibBuilder.loadTexts: sysGlobalDiametersessionStatTotDisconnectPeerAnswers.setDescription('Displays the number of Disconnect Peer Answer messages.')
sysGlobalDiametersessionStatTotAccountingRequests = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 35, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalDiametersessionStatTotAccountingRequests.setStatus('current')
if mibBuilder.loadTexts: sysGlobalDiametersessionStatTotAccountingRequests.setDescription('Displays the number of Accounting Request messages.')
sysGlobalDiametersessionStatTotAccountingAnswers = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 35, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalDiametersessionStatTotAccountingAnswers.setStatus('current')
if mibBuilder.loadTexts: sysGlobalDiametersessionStatTotAccountingAnswers.setDescription('Displays the number of Accounting Answers messages.')
sysGlobalDiametersessionStatTotCreditControlRequests = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 35, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalDiametersessionStatTotCreditControlRequests.setStatus('current')
if mibBuilder.loadTexts: sysGlobalDiametersessionStatTotCreditControlRequests.setDescription('Displays the number of Credit Control Request messages.')
sysGlobalDiametersessionStatTotCreditControlAnswers = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 35, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalDiametersessionStatTotCreditControlAnswers.setStatus('current')
if mibBuilder.loadTexts: sysGlobalDiametersessionStatTotCreditControlAnswers.setDescription('Displays the number of Credit Control Answers messages.')
sysGlobalDiametersessionStatTotUserAuthorizationRequests = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 35, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalDiametersessionStatTotUserAuthorizationRequests.setStatus('current')
if mibBuilder.loadTexts: sysGlobalDiametersessionStatTotUserAuthorizationRequests.setDescription('Displays the number of User Authorization Request messages.')
sysGlobalDiametersessionStatTotUserAuthorizationAnswers = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 35, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalDiametersessionStatTotUserAuthorizationAnswers.setStatus('current')
if mibBuilder.loadTexts: sysGlobalDiametersessionStatTotUserAuthorizationAnswers.setDescription('Displays the number of User Authorization Answers messages.')
sysGlobalDiametersessionStatTotOtherRequests = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 35, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalDiametersessionStatTotOtherRequests.setStatus('current')
if mibBuilder.loadTexts: sysGlobalDiametersessionStatTotOtherRequests.setDescription('Displays the number of Other Request messages.')
sysGlobalDiametersessionStatTotOtherAnswers = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 35, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalDiametersessionStatTotOtherAnswers.setStatus('current')
if mibBuilder.loadTexts: sysGlobalDiametersessionStatTotOtherAnswers.setDescription('Displays the number of Other Answers messages.')
sysGlobalDiametersessionStatTotBadMessages = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 35, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalDiametersessionStatTotBadMessages.setStatus('current')
if mibBuilder.loadTexts: sysGlobalDiametersessionStatTotBadMessages.setDescription('Displays the number of Bad Messages.')
sysGlobalDiametersessionStatTotRejectedUnconfiguredPeers = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 35, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalDiametersessionStatTotRejectedUnconfiguredPeers.setStatus('current')
if mibBuilder.loadTexts: sysGlobalDiametersessionStatTotRejectedUnconfiguredPeers.setDescription('Displays the number of Messages Rejected for Unconfigured Peers.')
sysGlobalDiametersessionStatCurReqQueuedForRetrans = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 35, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalDiametersessionStatCurReqQueuedForRetrans.setStatus('current')
if mibBuilder.loadTexts: sysGlobalDiametersessionStatCurReqQueuedForRetrans.setDescription('Displays the current number of request messages queued for retransmission.')
sysGlobalDiametersessionStatTotRetransReturnedBusy = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 35, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalDiametersessionStatTotRetransReturnedBusy.setStatus('current')
if mibBuilder.loadTexts: sysGlobalDiametersessionStatTotRetransReturnedBusy.setDescription('Displays the total number of requests triggered for retransmission that returned a busy answer.')
sysGlobalDiametersessionStatTotRetransReturnedUnavail = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 35, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalDiametersessionStatTotRetransReturnedUnavail.setStatus('current')
if mibBuilder.loadTexts: sysGlobalDiametersessionStatTotRetransReturnedUnavail.setDescription('Displays the total number of requests triggered for retransmission that returned a unable to deliver answer.')
sysGlobalDiametersessionStatTotRetransReqRetransmitted = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 35, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalDiametersessionStatTotRetransReqRetransmitted.setStatus('current')
if mibBuilder.loadTexts: sysGlobalDiametersessionStatTotRetransReqRetransmitted.setDescription('Displays the total number of requests retransmitted.')
sysGlobalDiametersessionStatTotRetransmissionTimeout = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 35, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalDiametersessionStatTotRetransmissionTimeout.setStatus('current')
if mibBuilder.loadTexts: sysGlobalDiametersessionStatTotRetransmissionTimeout.setDescription('Displays the total number of requests triggered for retransmission due to timeout.')
sysGlobalDiametersessionStatTotRetransmissionErrorCode = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 35, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalDiametersessionStatTotRetransmissionErrorCode.setStatus('current')
if mibBuilder.loadTexts: sysGlobalDiametersessionStatTotRetransmissionErrorCode.setDescription('Displays the total number of requests triggered for retransmission due a error code.')
sysGlobalDiametersessionStatTotRetransmissionIrule = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 35, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalDiametersessionStatTotRetransmissionIrule.setStatus('current')
if mibBuilder.loadTexts: sysGlobalDiametersessionStatTotRetransmissionIrule.setDescription('Displays the total number of requests triggered for retransmission by iRule command.')
sysGlobalDiametersessionStatTotRequestReceived = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 35, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalDiametersessionStatTotRequestReceived.setStatus('current')
if mibBuilder.loadTexts: sysGlobalDiametersessionStatTotRequestReceived.setDescription('Displays the number of request messages received.')
sysGlobalDiametersessionStatTotRequestSent = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 35, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalDiametersessionStatTotRequestSent.setStatus('current')
if mibBuilder.loadTexts: sysGlobalDiametersessionStatTotRequestSent.setDescription('Displays the number of request messages sent.')
sysGlobalDiametersessionStatTotDiscardUnroutable = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 35, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalDiametersessionStatTotDiscardUnroutable.setStatus('current')
if mibBuilder.loadTexts: sysGlobalDiametersessionStatTotDiscardUnroutable.setDescription('Displays the number of unroutable request messages dropped automatically.')
sysGlobalDiametersessionStatTotRespondUnroutable = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 35, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalDiametersessionStatTotRespondUnroutable.setStatus('current')
if mibBuilder.loadTexts: sysGlobalDiametersessionStatTotRespondUnroutable.setDescription('Displays the number of unroutable request messages converted to error\n\t     answer messages automatically.')
sysGlobalDiametersessionStatAveRequestLatency = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 35, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalDiametersessionStatAveRequestLatency.setStatus('current')
if mibBuilder.loadTexts: sysGlobalDiametersessionStatAveRequestLatency.setDescription('Displays the average L7 processing latency for diameter request messages\n\t     over the last second (in milliseconds).')
sysGlobalDiametersessionStatAveAnswerLatency = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 35, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalDiametersessionStatAveAnswerLatency.setStatus('current')
if mibBuilder.loadTexts: sysGlobalDiametersessionStatAveAnswerLatency.setDescription('Displays the average L7 processing latency for diameter answer messages\n\t     over the last second. (in milliseconds).')
sysGlobalDiametersessionStatAvePeerDelay = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 35, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalDiametersessionStatAvePeerDelay.setStatus('current')
if mibBuilder.loadTexts: sysGlobalDiametersessionStatAvePeerDelay.setDescription('Displays the average time between forwarding a request message to a peer and\n\t     receiving the answer message from that peer over the last second (in milliseconds).')
sysGlobalDiametersessionStatAveRoundTripTime = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 35, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalDiametersessionStatAveRoundTripTime.setStatus('current')
if mibBuilder.loadTexts: sysGlobalDiametersessionStatAveRoundTripTime.setDescription('Displays the average time between receiving a request message and\n\t     forwarding the answer message over the last second (in milliseconds).')
sysGlobalDiametersessionStatCurTrafficRate = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 35, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalDiametersessionStatCurTrafficRate.setStatus('current')
if mibBuilder.loadTexts: sysGlobalDiametersessionStatCurTrafficRate.setDescription('Displays the number of requests and responses sent and received over the\n\t     last second.')
sysGlobalDiametersessionStatCurErrorAnswerRatio = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 35, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalDiametersessionStatCurErrorAnswerRatio.setStatus('current')
if mibBuilder.loadTexts: sysGlobalDiametersessionStatCurErrorAnswerRatio.setDescription('Displays the percentage of answer messages received containing an\n\t     error result code (3000-5999).')
sysGlobalDiametersessionStatCurTimeoutRatio = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 35, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalDiametersessionStatCurTimeoutRatio.setStatus('current')
if mibBuilder.loadTexts: sysGlobalDiametersessionStatCurTimeoutRatio.setDescription('Displays the percentage of answer messages unanswered.')
sysGlobalDiametersessionStatTotAnswerResultCodeReceived1xxx = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 35, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalDiametersessionStatTotAnswerResultCodeReceived1xxx.setStatus('current')
if mibBuilder.loadTexts: sysGlobalDiametersessionStatTotAnswerResultCodeReceived1xxx.setDescription('Displays the number of answer messages received with\n\t     a response code between 1000-1999.')
sysGlobalDiametersessionStatTotAnswerResultCodeReceived2xxx = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 35, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalDiametersessionStatTotAnswerResultCodeReceived2xxx.setStatus('current')
if mibBuilder.loadTexts: sysGlobalDiametersessionStatTotAnswerResultCodeReceived2xxx.setDescription('Displays the number of answer messages received with\n\t     a response code between 2000-2999.')
sysGlobalDiametersessionStatTotAnswerResultCodeReceived3xxx = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 35, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalDiametersessionStatTotAnswerResultCodeReceived3xxx.setStatus('current')
if mibBuilder.loadTexts: sysGlobalDiametersessionStatTotAnswerResultCodeReceived3xxx.setDescription('Displays the number of answer messages received with\n\t     a response code between 3000-3999.')
sysGlobalDiametersessionStatTotAnswerResultCodeReceived4xxx = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 35, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalDiametersessionStatTotAnswerResultCodeReceived4xxx.setStatus('current')
if mibBuilder.loadTexts: sysGlobalDiametersessionStatTotAnswerResultCodeReceived4xxx.setDescription('Displays the number of answer messages received with\n\t     a response code between 4000-4999.')
sysGlobalDiametersessionStatTotAnswerResultCodeReceived5xxx = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 35, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalDiametersessionStatTotAnswerResultCodeReceived5xxx.setStatus('current')
if mibBuilder.loadTexts: sysGlobalDiametersessionStatTotAnswerResultCodeReceived5xxx.setDescription('Displays the number of answer messages received with\n\t     a response code between 5000-5999.')
sysGlobalDiametersessionStatTotAnswerResultCodeSent1xxx = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 35, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalDiametersessionStatTotAnswerResultCodeSent1xxx.setStatus('current')
if mibBuilder.loadTexts: sysGlobalDiametersessionStatTotAnswerResultCodeSent1xxx.setDescription('Displays the number of answer messages sent with a response\n\t     code between 1000-1999.')
sysGlobalDiametersessionStatTotAnswerResultCodeSent2xxx = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 35, 42), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalDiametersessionStatTotAnswerResultCodeSent2xxx.setStatus('current')
if mibBuilder.loadTexts: sysGlobalDiametersessionStatTotAnswerResultCodeSent2xxx.setDescription('Displays the number of answer messages sent with a response\n\t     code between 2000-2999.')
sysGlobalDiametersessionStatTotAnswerResultCodeSent3xxx = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 35, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalDiametersessionStatTotAnswerResultCodeSent3xxx.setStatus('current')
if mibBuilder.loadTexts: sysGlobalDiametersessionStatTotAnswerResultCodeSent3xxx.setDescription('Displays the number of answer messages sent with a response\n\t     code between 3000-3999.')
sysGlobalDiametersessionStatTotAnswerResultCodeSent4xxx = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 35, 44), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalDiametersessionStatTotAnswerResultCodeSent4xxx.setStatus('current')
if mibBuilder.loadTexts: sysGlobalDiametersessionStatTotAnswerResultCodeSent4xxx.setDescription('Displays the number of answer messages sent with a response\n\t     code between 4000-4999.')
sysGlobalDiametersessionStatTotAnswerResultCodeSent5xxx = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 35, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalDiametersessionStatTotAnswerResultCodeSent5xxx.setStatus('current')
if mibBuilder.loadTexts: sysGlobalDiametersessionStatTotAnswerResultCodeSent5xxx.setDescription('Displays the number of answer messages sent with a response\n\t     code between 5000-5999.')
sysGlobalDiameterrouterStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 36, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysGlobalDiameterrouterStatResetStats.setStatus('current')
if mibBuilder.loadTexts: sysGlobalDiameterrouterStatResetStats.setDescription('The action to reset resettable statistics data in sysGlobalDiameterrouterStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
sysGlobalDiameterrouterStatTotMessgesIn = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 36, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalDiameterrouterStatTotMessgesIn.setStatus('current')
if mibBuilder.loadTexts: sysGlobalDiameterrouterStatTotMessgesIn.setDescription('Displays the number of messages received for forwarding.')
sysGlobalDiameterrouterStatTotMessagesInRetry = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 36, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalDiameterrouterStatTotMessagesInRetry.setStatus('current')
if mibBuilder.loadTexts: sysGlobalDiameterrouterStatTotMessagesInRetry.setDescription('Displays the number of retry messages received for forwarding.')
sysGlobalDiameterrouterStatTotMessagesOut = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 36, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalDiameterrouterStatTotMessagesOut.setStatus('current')
if mibBuilder.loadTexts: sysGlobalDiameterrouterStatTotMessagesOut.setDescription('Displays the number of messages forwarded or returned to the originator.')
sysGlobalDiameterrouterStatTotMessagesCannotReturn = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 36, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalDiameterrouterStatTotMessagesCannotReturn.setStatus('current')
if mibBuilder.loadTexts: sysGlobalDiameterrouterStatTotMessagesCannotReturn.setDescription('Displays the number of messages which routing failed and could not be returned to the originator.')
sysGlobalDiameterrouterStatTotMessagesRouted = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 36, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalDiameterrouterStatTotMessagesRouted.setStatus('current')
if mibBuilder.loadTexts: sysGlobalDiameterrouterStatTotMessagesRouted.setDescription('Displays the number of messages where a route was successfully found.')
sysGlobalDiameterrouterStatTotMessagesUnroutable = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 36, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalDiameterrouterStatTotMessagesUnroutable.setStatus('current')
if mibBuilder.loadTexts: sysGlobalDiameterrouterStatTotMessagesUnroutable.setDescription('Displays the number of messages where no route was found.')
sysGlobalDiameterrouterStatTotMessagesDropped = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 36, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalDiameterrouterStatTotMessagesDropped.setStatus('current')
if mibBuilder.loadTexts: sysGlobalDiameterrouterStatTotMessagesDropped.setDescription('Displays the number of messages dropped via an iRule.')
sysGlobalDiameterrouterStatTotMessagesQueueFull = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 36, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalDiameterrouterStatTotMessagesQueueFull.setStatus('current')
if mibBuilder.loadTexts: sysGlobalDiameterrouterStatTotMessagesQueueFull.setDescription('Displays the number of messages which were routed but the outgoing\n\t      queue for the destination was full.')
sysGlobalDiameterrouterStatTotMessagesNoConnection = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 36, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalDiameterrouterStatTotMessagesNoConnection.setStatus('current')
if mibBuilder.loadTexts: sysGlobalDiameterrouterStatTotMessagesNoConnection.setDescription('Displays the number of messages which were routed to a connection which was closed before the\n\t      message could be delivered.')
sysGlobalDiameterrouterStatTotMessagesConnectionClosed = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 36, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalDiameterrouterStatTotMessagesConnectionClosed.setStatus('current')
if mibBuilder.loadTexts: sysGlobalDiameterrouterStatTotMessagesConnectionClosed.setDescription('Displays the number of messages which were pending delivery when the connection closed.')
sysGlobalDiameterrouterStatTotMessagesInternalError = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 36, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalDiameterrouterStatTotMessagesInternalError.setStatus('current')
if mibBuilder.loadTexts: sysGlobalDiameterrouterStatTotMessagesInternalError.setDescription('Displays the number of messages which were not routed due to an internal error .')
sysGlobalDiameterrouterStatTotMessagesPersistInUse = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 36, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalDiameterrouterStatTotMessagesPersistInUse.setStatus('current')
if mibBuilder.loadTexts: sysGlobalDiameterrouterStatTotMessagesPersistInUse.setDescription('Displays the number of messages which after routing failed to add a persistence entry because it\n\t      was already in use.')
sysGlobalDiameterrouterStatTotMessagesStandbyDropped = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 36, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalDiameterrouterStatTotMessagesStandbyDropped.setStatus('current')
if mibBuilder.loadTexts: sysGlobalDiameterrouterStatTotMessagesStandbyDropped.setDescription('Displays the number of messages which were dropped on the\n\t      standby device.')
sysGlobalDiameterrouterStatTotMessagesMaxRetries = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 36, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalDiameterrouterStatTotMessagesMaxRetries.setStatus('current')
if mibBuilder.loadTexts: sysGlobalDiameterrouterStatTotMessagesMaxRetries.setDescription('Displays the number of messages returned to the originator because the latest attempt to retry\n\t      routing exceeded the configured max retry count.')
sysGlobalDiameterrouterStatTotMessagesInCloned = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 36, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalDiameterrouterStatTotMessagesInCloned.setStatus('current')
if mibBuilder.loadTexts: sysGlobalDiameterrouterStatTotMessagesInCloned.setDescription('Displays the total number of messages cloned per route.')
sysGlobalDiameterrouterStatTotMessagesReturned = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 36, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalDiameterrouterStatTotMessagesReturned.setStatus('current')
if mibBuilder.loadTexts: sysGlobalDiameterrouterStatTotMessagesReturned.setDescription('Displays the number of messages returned.')
sysGlobalDiameterrouterStatTotPayloadBytesIn = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 36, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalDiameterrouterStatTotPayloadBytesIn.setStatus('current')
if mibBuilder.loadTexts: sysGlobalDiameterrouterStatTotPayloadBytesIn.setDescription('Displays the number of bytes of payload received.')
sysGlobalDiameterrouterStatTotPayloadBytesOut = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 36, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalDiameterrouterStatTotPayloadBytesOut.setStatus('current')
if mibBuilder.loadTexts: sysGlobalDiameterrouterStatTotPayloadBytesOut.setDescription('Displays the number of bytes of payload sent.')
sysGlobalDiameterrouterStatCurIncomingStreams = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 36, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalDiameterrouterStatCurIncomingStreams.setStatus('current')
if mibBuilder.loadTexts: sysGlobalDiameterrouterStatCurIncomingStreams.setDescription('Displays the number of active incoming streams.')
sysGlobalDiameterrouterStatCurOutgoingStreams = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 36, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalDiameterrouterStatCurOutgoingStreams.setStatus('current')
if mibBuilder.loadTexts: sysGlobalDiameterrouterStatCurOutgoingStreams.setDescription('Displays the number of active outgoing streams.')
sysGlobalDiameterrouterStatTotIncomingStreams = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 36, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalDiameterrouterStatTotIncomingStreams.setStatus('current')
if mibBuilder.loadTexts: sysGlobalDiameterrouterStatTotIncomingStreams.setDescription('Displays the total number of incoming streams since TMM restart or stats reset.')
sysGlobalDiameterrouterStatTotOutgoingStreams = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 36, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalDiameterrouterStatTotOutgoingStreams.setStatus('current')
if mibBuilder.loadTexts: sysGlobalDiameterrouterStatTotOutgoingStreams.setDescription('Displays the total number of outgoing streams since TMM restart or stats reset.')
sysGlobalDiameterrouterStatTotFailedOutgoingStreams = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 36, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalDiameterrouterStatTotFailedOutgoingStreams.setStatus('current')
if mibBuilder.loadTexts: sysGlobalDiameterrouterStatTotFailedOutgoingStreams.setDescription('Displays the total number of failed outgoing streams since TMM restart or stats reset.')
sysGlobalDiameterrouterStatCurIncomingConnections = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 36, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalDiameterrouterStatCurIncomingConnections.setStatus('current')
if mibBuilder.loadTexts: sysGlobalDiameterrouterStatCurIncomingConnections.setDescription('Displays the number of active incoming connections.')
sysGlobalDiameterrouterStatCurOutgoingConnections = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 36, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalDiameterrouterStatCurOutgoingConnections.setStatus('current')
if mibBuilder.loadTexts: sysGlobalDiameterrouterStatCurOutgoingConnections.setDescription('Displays the number of active outgoing connections (including outgoing connections created by\n\t      auto-initialization).')
sysGlobalDiameterrouterStatCurAutoInitOutgoingConnections = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 36, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalDiameterrouterStatCurAutoInitOutgoingConnections.setStatus('current')
if mibBuilder.loadTexts: sysGlobalDiameterrouterStatCurAutoInitOutgoingConnections.setDescription('Displays the number of active outgoing connections created by auto-initialization.')
sysGlobalDiameterrouterStatTotIncomingConnections = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 36, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalDiameterrouterStatTotIncomingConnections.setStatus('current')
if mibBuilder.loadTexts: sysGlobalDiameterrouterStatTotIncomingConnections.setDescription('Displays the total number of incoming connections created since TMM restart or stats reset.')
sysGlobalDiameterrouterStatTotOutgoingConnections = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 36, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalDiameterrouterStatTotOutgoingConnections.setStatus('current')
if mibBuilder.loadTexts: sysGlobalDiameterrouterStatTotOutgoingConnections.setDescription('Displays the total number of outgoing connections created since TMM restart or stats reset\n\t      (including outgoing connections created by auto-initialization).')
sysGlobalDiameterrouterStatTotAutoInitOutgoingConnections = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 36, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalDiameterrouterStatTotAutoInitOutgoingConnections.setStatus('current')
if mibBuilder.loadTexts: sysGlobalDiameterrouterStatTotAutoInitOutgoingConnections.setDescription('Displays the total number of outgoing connections created by auto-initialization since\n\t      TMM restart or stats reset.')
sysGlobalDiameterrouterStatTotFailedOutgoingConnections = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 36, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalDiameterrouterStatTotFailedOutgoingConnections.setStatus('current')
if mibBuilder.loadTexts: sysGlobalDiameterrouterStatTotFailedOutgoingConnections.setDescription('Displays the total number of outgoing connections that failed to be established.')
sysGlobalDiameterrouterStatTotFailedAutoInitOutgoingConnections = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 36, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalDiameterrouterStatTotFailedAutoInitOutgoingConnections.setStatus('current')
if mibBuilder.loadTexts: sysGlobalDiameterrouterStatTotFailedAutoInitOutgoingConnections.setDescription('Displays the total number of outgoing connections that failed to be established by\n\t      auto-initalization.')
sysGlobalDiameterrouterStatCurPassthruConnections = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 36, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalDiameterrouterStatCurPassthruConnections.setStatus('current')
if mibBuilder.loadTexts: sysGlobalDiameterrouterStatCurPassthruConnections.setDescription('Displays the number of active pass through connections.')
sysGlobalDiameterrouterStatTotPassthruConnections = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 36, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalDiameterrouterStatTotPassthruConnections.setStatus('current')
if mibBuilder.loadTexts: sysGlobalDiameterrouterStatTotPassthruConnections.setDescription('Displays the total number of pass through connections since TMM restart or stats reset.')
sysGlobalDiameterrouterStatTotFailedPassthruConnections = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 36, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalDiameterrouterStatTotFailedPassthruConnections.setStatus('current')
if mibBuilder.loadTexts: sysGlobalDiameterrouterStatTotFailedPassthruConnections.setDescription('Displays the total number of failed pass through connections since TMM restart or stats reset.')
sysGlobalDiameterrouterStatTotPassthruBytes = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 36, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalDiameterrouterStatTotPassthruBytes.setStatus('current')
if mibBuilder.loadTexts: sysGlobalDiameterrouterStatTotPassthruBytes.setDescription('Displays the number of pass through bytes.')
sysGlobalDiameterrouterStatCurPendingRequests = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 36, 37), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalDiameterrouterStatCurPendingRequests.setStatus('current')
if mibBuilder.loadTexts: sysGlobalDiameterrouterStatCurPendingRequests.setDescription('Displays the current number of pending requests.')
sysGlobalDiameterrouterStatTotExpiredPendingRequests = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 36, 38), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalDiameterrouterStatTotExpiredPendingRequests.setStatus('current')
if mibBuilder.loadTexts: sysGlobalDiameterrouterStatTotExpiredPendingRequests.setDescription('Displays the total number of expired pending requests.')
sysGlobalDiameterrouterStatTotDroppedUnexpectedAnswers = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 36, 39), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalDiameterrouterStatTotDroppedUnexpectedAnswers.setStatus('current')
if mibBuilder.loadTexts: sysGlobalDiameterrouterStatTotDroppedUnexpectedAnswers.setDescription('Displays the total number of unexpected answers received and dropped.')
sysGlobalDiameterrouterStatTotDroppedLateAnswers = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 36, 40), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalDiameterrouterStatTotDroppedLateAnswers.setStatus('current')
if mibBuilder.loadTexts: sysGlobalDiameterrouterStatTotDroppedLateAnswers.setDescription('Displays the total number of late answers received and dropped.')
sysGlobalDiameterrouterStatTotMsgsDroppedForceOffline = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 36, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalDiameterrouterStatTotMsgsDroppedForceOffline.setStatus('current')
if mibBuilder.loadTexts: sysGlobalDiameterrouterStatTotMsgsDroppedForceOffline.setDescription('Displays the number of messages dropped due to force offline.')
sysGlobalSipsessionStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 37, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysGlobalSipsessionStatResetStats.setStatus('current')
if mibBuilder.loadTexts: sysGlobalSipsessionStatResetStats.setDescription('The action to reset resettable statistics data in sysGlobalSipsessionStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
sysGlobalSipsessionStatRequests = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 37, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalSipsessionStatRequests.setStatus('current')
if mibBuilder.loadTexts: sysGlobalSipsessionStatRequests.setDescription('Displays the number of SIP request messages the system handled.')
sysGlobalSipsessionStatResponses = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 37, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalSipsessionStatResponses.setStatus('current')
if mibBuilder.loadTexts: sysGlobalSipsessionStatResponses.setDescription('Displays the number of SIP response messages the system handled.')
sysGlobalSipsessionStatBadmsgs = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 37, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalSipsessionStatBadmsgs.setStatus('current')
if mibBuilder.loadTexts: sysGlobalSipsessionStatBadmsgs.setDescription('Displays the number of bad SIP messages the system handled.')
sysGlobalSipsessionStatBadmsgsReq = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 37, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalSipsessionStatBadmsgsReq.setStatus('current')
if mibBuilder.loadTexts: sysGlobalSipsessionStatBadmsgsReq.setDescription('Displays the number of bad SIP request messages the system handled.')
sysGlobalSipsessionStatDrops = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 37, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalSipsessionStatDrops.setStatus('current')
if mibBuilder.loadTexts: sysGlobalSipsessionStatDrops.setDescription('Displays the total number of SIP messages the system dropped.')
sysGlobalSipsessionStatDropsReq = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 37, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalSipsessionStatDropsReq.setStatus('current')
if mibBuilder.loadTexts: sysGlobalSipsessionStatDropsReq.setDescription('Displays the number of SIP request messages the system dropped.')
sysGlobalSipsessionStatInvite = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 37, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalSipsessionStatInvite.setStatus('current')
if mibBuilder.loadTexts: sysGlobalSipsessionStatInvite.setDescription('Displays the number of INVITE SIP request messages the system handled.')
sysGlobalSipsessionStatAck = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 37, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalSipsessionStatAck.setStatus('current')
if mibBuilder.loadTexts: sysGlobalSipsessionStatAck.setDescription('Displays the number of ACK SIP request messages the system handled.')
sysGlobalSipsessionStatBye = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 37, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalSipsessionStatBye.setStatus('current')
if mibBuilder.loadTexts: sysGlobalSipsessionStatBye.setDescription('Displays the number of BYE SIP request messages the system handled.')
sysGlobalSipsessionStatCancel = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 37, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalSipsessionStatCancel.setStatus('current')
if mibBuilder.loadTexts: sysGlobalSipsessionStatCancel.setDescription('Displays the number of CANCEL SIP request messages the system handled.')
sysGlobalSipsessionStatOptions = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 37, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalSipsessionStatOptions.setStatus('current')
if mibBuilder.loadTexts: sysGlobalSipsessionStatOptions.setDescription('Displays the number of OPTIONS SIP request messages the system handled.')
sysGlobalSipsessionStatRegisterReq = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 37, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalSipsessionStatRegisterReq.setStatus('current')
if mibBuilder.loadTexts: sysGlobalSipsessionStatRegisterReq.setDescription('Displays the number of REGISTER SIP request messages the system handled.')
sysGlobalSipsessionStatPrack = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 37, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalSipsessionStatPrack.setStatus('current')
if mibBuilder.loadTexts: sysGlobalSipsessionStatPrack.setDescription('Displays the number of PRACK SIP request messages the system handled.')
sysGlobalSipsessionStatSubscribe = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 37, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalSipsessionStatSubscribe.setStatus('current')
if mibBuilder.loadTexts: sysGlobalSipsessionStatSubscribe.setDescription('Displays the number of SUBSCRIBE SIP request messages the system handled.')
sysGlobalSipsessionStatNotify = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 37, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalSipsessionStatNotify.setStatus('current')
if mibBuilder.loadTexts: sysGlobalSipsessionStatNotify.setDescription('Displays the number of NOTIFY SIP request messages the system handled.')
sysGlobalSipsessionStatPublish = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 37, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalSipsessionStatPublish.setStatus('current')
if mibBuilder.loadTexts: sysGlobalSipsessionStatPublish.setDescription('Displays the number of PUBLISH SIP request messages the system handled.')
sysGlobalSipsessionStatInfo = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 37, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalSipsessionStatInfo.setStatus('current')
if mibBuilder.loadTexts: sysGlobalSipsessionStatInfo.setDescription('Displays the number of INFO SIP request messages the system handled.')
sysGlobalSipsessionStatRefer = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 37, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalSipsessionStatRefer.setStatus('current')
if mibBuilder.loadTexts: sysGlobalSipsessionStatRefer.setDescription('Displays the number of REFER SIP request messages the system handled.')
sysGlobalSipsessionStatMessage = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 37, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalSipsessionStatMessage.setStatus('current')
if mibBuilder.loadTexts: sysGlobalSipsessionStatMessage.setDescription('Displays the number of MESSAGE SIP request messages the system handled.')
sysGlobalSipsessionStatUpdateReq = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 37, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalSipsessionStatUpdateReq.setStatus('current')
if mibBuilder.loadTexts: sysGlobalSipsessionStatUpdateReq.setDescription('Displays the number of UPDATE SIP request messages the system handled.')
sysGlobalSipsessionStatService = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 37, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalSipsessionStatService.setStatus('current')
if mibBuilder.loadTexts: sysGlobalSipsessionStatService.setDescription('Displays the number of SERVICE SIP request messages the system handled.')
sysGlobalSipsessionStatBenotify = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 37, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalSipsessionStatBenotify.setStatus('current')
if mibBuilder.loadTexts: sysGlobalSipsessionStatBenotify.setDescription('Displays the number of BENOTIFY SIP request messages the system handled.')
sysGlobalSipsessionStatNegotiate = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 37, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalSipsessionStatNegotiate.setStatus('current')
if mibBuilder.loadTexts: sysGlobalSipsessionStatNegotiate.setDescription('Displays the number of NEGOTIATE SIP request messages the system handled.')
sysGlobalSipsessionStatOther = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 37, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalSipsessionStatOther.setStatus('current')
if mibBuilder.loadTexts: sysGlobalSipsessionStatOther.setDescription('Displays the number of OTHER SIP request messages the system handled.')
sysGlobalSipsessionStatProvisional = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 37, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalSipsessionStatProvisional.setStatus('current')
if mibBuilder.loadTexts: sysGlobalSipsessionStatProvisional.setDescription('Displays the number of Provisional SIP response messages the system handled.')
sysGlobalSipsessionStatSuccessful = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 37, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalSipsessionStatSuccessful.setStatus('current')
if mibBuilder.loadTexts: sysGlobalSipsessionStatSuccessful.setDescription('Displays the number of Successful SIP response messages the system handled.')
sysGlobalSipsessionStatRedirection = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 37, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalSipsessionStatRedirection.setStatus('current')
if mibBuilder.loadTexts: sysGlobalSipsessionStatRedirection.setDescription('Displays the number of Redirection SIP response messages the system handled.')
sysGlobalSipsessionStatClientFailures = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 37, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalSipsessionStatClientFailures.setStatus('current')
if mibBuilder.loadTexts: sysGlobalSipsessionStatClientFailures.setDescription('Displays the number of Client Failure SIP response messages the system handled.')
sysGlobalSipsessionStatServerFailures = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 37, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalSipsessionStatServerFailures.setStatus('current')
if mibBuilder.loadTexts: sysGlobalSipsessionStatServerFailures.setDescription('Displays the number of Server Failure SIP response messages the system handled.')
sysGlobalSipsessionStatGlobalFailures = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 37, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalSipsessionStatGlobalFailures.setStatus('current')
if mibBuilder.loadTexts: sysGlobalSipsessionStatGlobalFailures.setDescription('Displays the number of Global Failure SIP response messages the system handled.')
sysGlobalSipsessionStatBadRequest = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 37, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalSipsessionStatBadRequest.setStatus('current')
if mibBuilder.loadTexts: sysGlobalSipsessionStatBadRequest.setDescription('Displays the number of Bad-Request failure response messages generated when\n\t      rejecting a SIP message due to a malformed syntax.')
sysGlobalSipsessionStatBadRequest400Sent = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 37, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalSipsessionStatBadRequest400Sent.setStatus('current')
if mibBuilder.loadTexts: sysGlobalSipsessionStatBadRequest400Sent.setDescription('Displays the number of Bad-Request failure response messages sent when\n\t      rejecting a SIP message due to a malformed syntax.')
sysGlobalSipsessionStatNotFound = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 37, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalSipsessionStatNotFound.setStatus('current')
if mibBuilder.loadTexts: sysGlobalSipsessionStatNotFound.setDescription('Displays the number of Bad-Request failure response messages generated when rejecting\n\t      a SIP message when there is no matching user registration entry.')
sysGlobalSipsessionStatNotFound404Sent = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 37, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalSipsessionStatNotFound404Sent.setStatus('current')
if mibBuilder.loadTexts: sysGlobalSipsessionStatNotFound404Sent.setDescription('Displays the number of Bad-Request failure response messages sent when\n\t      rejecting a SIP message when there is no matching user registration entry.')
sysGlobalSipsessionStatRequestEntityTooLarge = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 37, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalSipsessionStatRequestEntityTooLarge.setStatus('current')
if mibBuilder.loadTexts: sysGlobalSipsessionStatRequestEntityTooLarge.setDescription('Displays the number of Request-Entity-Too-Large response\n\t      messages generated when rejecting a SIP message due to some aspect of the message exceeding a\n\t      configured size limit.')
sysGlobalSipsessionStatRequestEntityTooLarge413Sent = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 37, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalSipsessionStatRequestEntityTooLarge413Sent.setStatus('current')
if mibBuilder.loadTexts: sysGlobalSipsessionStatRequestEntityTooLarge413Sent.setDescription('Displays the number of Request-Entity-Too-Large response\n\t      messages sent when rejecting a SIP message due to some aspect of the message exceeding a\n\t      configured size limit.')
sysGlobalSipsessionStatUnsupportedUriScheme = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 37, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalSipsessionStatUnsupportedUriScheme.setStatus('current')
if mibBuilder.loadTexts: sysGlobalSipsessionStatUnsupportedUriScheme.setDescription('Displays the number of Unsupported-URI-Scheme responses messages\n\t      generated when rejecting a SIP message due to malformed URI.')
sysGlobalSipsessionStatUnsupportedUriScheme416Sent = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 37, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalSipsessionStatUnsupportedUriScheme416Sent.setStatus('current')
if mibBuilder.loadTexts: sysGlobalSipsessionStatUnsupportedUriScheme416Sent.setDescription('Displays the number of Unsupported-URI-Scheme responses\n\t      messages sent when rejecting a SIP message due to malformed URI.')
sysGlobalSipsessionStatTemporarilyUnavailable = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 37, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalSipsessionStatTemporarilyUnavailable.setStatus('current')
if mibBuilder.loadTexts: sysGlobalSipsessionStatTemporarilyUnavailable.setDescription('Displays the number of Temporary Unavailable failure response\n\t      messages generated when rejecting a call when the user is not available at this time.')
sysGlobalSipsessionStatTemporarilyUnavailable480Sent = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 37, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalSipsessionStatTemporarilyUnavailable480Sent.setStatus('current')
if mibBuilder.loadTexts: sysGlobalSipsessionStatTemporarilyUnavailable480Sent.setDescription('Displays the number of Temporary Unavailable failure\n\t      response messages sent when rejecting a call when the user is not available at this time.')
sysGlobalSipsessionStatTransactionDoesNotExist = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 37, 42), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalSipsessionStatTransactionDoesNotExist.setStatus('current')
if mibBuilder.loadTexts: sysGlobalSipsessionStatTransactionDoesNotExist.setDescription('Displays the number of transaction does not exist response\n\t      message generated when response or request message is not able to be matched to a SIP transaction.')
sysGlobalSipsessionStatTransactionDoesNotExist481Sent = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 37, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalSipsessionStatTransactionDoesNotExist481Sent.setStatus('current')
if mibBuilder.loadTexts: sysGlobalSipsessionStatTransactionDoesNotExist481Sent.setDescription('Displays the number of transaction does not exist response\n\t      message sent when response or request message is not able to be matched to a SIP transaction.')
sysGlobalSipsessionStatLoopDetected = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 37, 44), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalSipsessionStatLoopDetected.setStatus('current')
if mibBuilder.loadTexts: sysGlobalSipsessionStatLoopDetected.setDescription('Displays the number of Loop-Detected failure response messages generated\n\t      when rejecting a SIP message due to loop detection.')
sysGlobalSipsessionStatLoopDetected482Sent = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 37, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalSipsessionStatLoopDetected482Sent.setStatus('current')
if mibBuilder.loadTexts: sysGlobalSipsessionStatLoopDetected482Sent.setDescription('Displays the number of Loop-Detected failure response messages sent\n\t      when rejecting a SIP message due to loop detection.')
sysGlobalSipsessionStatTooManyHops = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 37, 46), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalSipsessionStatTooManyHops.setStatus('current')
if mibBuilder.loadTexts: sysGlobalSipsessionStatTooManyHops.setDescription("Displays the number of Too-Many-Hops failure response messages generated\n\t      when rejecting a SIP message as Max-Forwards header has reached value '0'.")
sysGlobalSipsessionStatTooManyHops483Sent = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 37, 47), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalSipsessionStatTooManyHops483Sent.setStatus('current')
if mibBuilder.loadTexts: sysGlobalSipsessionStatTooManyHops483Sent.setDescription("Displays the number of Too-Many-Hops failure response messages sent\n\t      when rejecting a SIP message as Max-Forwards header has reached value '0'.")
sysGlobalSipsessionStatAddressIncomplete = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 37, 48), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalSipsessionStatAddressIncomplete.setStatus('current')
if mibBuilder.loadTexts: sysGlobalSipsessionStatAddressIncomplete.setDescription('Displays the number of Address-Incomplete failure response\n\t      messages generated when rejecting a SIP message due to malformed or incomplete request URI.')
sysGlobalSipsessionStatAddressIncomplete484Sent = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 37, 49), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalSipsessionStatAddressIncomplete484Sent.setStatus('current')
if mibBuilder.loadTexts: sysGlobalSipsessionStatAddressIncomplete484Sent.setDescription('Displays the number of Address-Incomplete failure\n\t      response messages sent when rejecting a SIP message due to malformed or incomplete request URI.')
sysGlobalSipsessionStatNotAcceptableHere = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 37, 50), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalSipsessionStatNotAcceptableHere.setStatus('current')
if mibBuilder.loadTexts: sysGlobalSipsessionStatNotAcceptableHere.setDescription('Displays the number of Not-Acceptable failure response\n\t      messages generated when rejecting a SIP message containing too many SDP media requests.')
sysGlobalSipsessionStatNotAcceptableHere488Sent = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 37, 51), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalSipsessionStatNotAcceptableHere488Sent.setStatus('current')
if mibBuilder.loadTexts: sysGlobalSipsessionStatNotAcceptableHere488Sent.setDescription('Displays the number of Not-Acceptable failure response\n\t      messages sent when rejecting a SIP message containing too many SDP media requests.')
sysGlobalSipsessionStatServerInternalError = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 37, 52), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalSipsessionStatServerInternalError.setStatus('current')
if mibBuilder.loadTexts: sysGlobalSipsessionStatServerInternalError.setDescription('Displays the number of Server-Internal-Error failure response\n\t      messages generated when rejecting a SIP message due to some unexpected condition and cannot\n\t      fulfill the request.')
sysGlobalSipsessionStatServerInternalError500Sent = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 37, 53), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalSipsessionStatServerInternalError500Sent.setStatus('current')
if mibBuilder.loadTexts: sysGlobalSipsessionStatServerInternalError500Sent.setDescription('Displays the number of Server-Internal-Error failure response\n\t      messages sent when rejecting a SIP message due to some unexpected condition and cannot\n\t      fulfill the request.')
sysGlobalSipsessionStatNotImplemented = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 37, 54), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalSipsessionStatNotImplemented.setStatus('current')
if mibBuilder.loadTexts: sysGlobalSipsessionStatNotImplemented.setDescription('Displays the number of Not-Implemented failure response messages generated\n\t      when rejecting a SIP message due to an invalid/unimplemented request method.')
sysGlobalSipsessionStatNotImplemented501Sent = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 37, 55), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalSipsessionStatNotImplemented501Sent.setStatus('current')
if mibBuilder.loadTexts: sysGlobalSipsessionStatNotImplemented501Sent.setDescription('Displays the number of Not-Implemented failure response messages\n\t      sent when rejecting a SIP message due to an invalid/unimplemented request method.')
sysGlobalSipsessionStatServiceUnavailable = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 37, 56), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalSipsessionStatServiceUnavailable.setStatus('current')
if mibBuilder.loadTexts: sysGlobalSipsessionStatServiceUnavailable.setDescription('Displays the number of Service-Unavailable failure response messages\n\t      generated when rejecting a SIP message due to the server undergoing maintenance or temporary\n\t      traffic overload.')
sysGlobalSipsessionStatServiceUnavailable503Sent = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 37, 57), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalSipsessionStatServiceUnavailable503Sent.setStatus('current')
if mibBuilder.loadTexts: sysGlobalSipsessionStatServiceUnavailable503Sent.setDescription('Displays the number of Service-Unavailable failure response\n\t      messages sent when rejecting a SIP message due to the server undergoing maintenance or temporary\n\t      traffic overload.')
sysGlobalSipsessionStatVersionNotSupported = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 37, 58), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalSipsessionStatVersionNotSupported.setStatus('current')
if mibBuilder.loadTexts: sysGlobalSipsessionStatVersionNotSupported.setDescription('Displays the number of Version-Not-Supported failure response messages\n\t      generated when rejecting a SIP message when the SIP protocol version in the request is not supported\n\t      by the server.')
sysGlobalSipsessionStatVersionNotSupported505Sent = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 37, 59), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalSipsessionStatVersionNotSupported505Sent.setStatus('current')
if mibBuilder.loadTexts: sysGlobalSipsessionStatVersionNotSupported505Sent.setDescription('Displays the number of Version-Not-Supported failure response\n\t      messages sent when rejecting a SIP message when the SIP protocol version in the request is not supported\n\t      by the server.')
sysGlobalSiprouterStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 38, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysGlobalSiprouterStatResetStats.setStatus('current')
if mibBuilder.loadTexts: sysGlobalSiprouterStatResetStats.setDescription('The action to reset resettable statistics data in sysGlobalSiprouterStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
sysGlobalSiprouterStatTotMessgesIn = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 38, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalSiprouterStatTotMessgesIn.setStatus('current')
if mibBuilder.loadTexts: sysGlobalSiprouterStatTotMessgesIn.setDescription('Displays the number of messages received for forwarding.')
sysGlobalSiprouterStatTotMessagesInRetry = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 38, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalSiprouterStatTotMessagesInRetry.setStatus('current')
if mibBuilder.loadTexts: sysGlobalSiprouterStatTotMessagesInRetry.setDescription('Displays the number of retry messages received for forwarding.')
sysGlobalSiprouterStatTotMessagesOut = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 38, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalSiprouterStatTotMessagesOut.setStatus('current')
if mibBuilder.loadTexts: sysGlobalSiprouterStatTotMessagesOut.setDescription('Displays the number of messages forwarded or returned to the originator.')
sysGlobalSiprouterStatTotMessagesCannotReturn = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 38, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalSiprouterStatTotMessagesCannotReturn.setStatus('current')
if mibBuilder.loadTexts: sysGlobalSiprouterStatTotMessagesCannotReturn.setDescription('Displays the number of messages which routing failed and could not be returned to the originator.')
sysGlobalSiprouterStatTotMessagesRouted = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 38, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalSiprouterStatTotMessagesRouted.setStatus('current')
if mibBuilder.loadTexts: sysGlobalSiprouterStatTotMessagesRouted.setDescription('Displays the number of messages where a route was successfully found.')
sysGlobalSiprouterStatTotMessagesUnroutable = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 38, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalSiprouterStatTotMessagesUnroutable.setStatus('current')
if mibBuilder.loadTexts: sysGlobalSiprouterStatTotMessagesUnroutable.setDescription('Displays the number of messages where no route was found.')
sysGlobalSiprouterStatTotMessagesDropped = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 38, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalSiprouterStatTotMessagesDropped.setStatus('current')
if mibBuilder.loadTexts: sysGlobalSiprouterStatTotMessagesDropped.setDescription('Displays the number of messages dropped via an iRule.')
sysGlobalSiprouterStatTotMessagesQueueFull = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 38, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalSiprouterStatTotMessagesQueueFull.setStatus('current')
if mibBuilder.loadTexts: sysGlobalSiprouterStatTotMessagesQueueFull.setDescription('Displays the number of messages which were routed but the outgoing\n\t      queue for the destination was full.')
sysGlobalSiprouterStatTotMessagesNoConnection = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 38, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalSiprouterStatTotMessagesNoConnection.setStatus('current')
if mibBuilder.loadTexts: sysGlobalSiprouterStatTotMessagesNoConnection.setDescription('Displays the number of messages which were routed to a connection which was closed before the\n\t      message could be delivered.')
sysGlobalSiprouterStatTotMessagesConnectionClosed = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 38, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalSiprouterStatTotMessagesConnectionClosed.setStatus('current')
if mibBuilder.loadTexts: sysGlobalSiprouterStatTotMessagesConnectionClosed.setDescription('Displays the number of messages which were pending delivery when the connection closed.')
sysGlobalSiprouterStatTotMessagesInternalError = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 38, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalSiprouterStatTotMessagesInternalError.setStatus('current')
if mibBuilder.loadTexts: sysGlobalSiprouterStatTotMessagesInternalError.setDescription('Displays the number of messages which were not routed due to an internal error .')
sysGlobalSiprouterStatTotMessagesPersistInUse = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 38, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalSiprouterStatTotMessagesPersistInUse.setStatus('current')
if mibBuilder.loadTexts: sysGlobalSiprouterStatTotMessagesPersistInUse.setDescription('Displays the number of messages which after routing failed to add a persistence entry because it\n\t      was already in use.')
sysGlobalSiprouterStatTotMessagesStandbyDropped = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 38, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalSiprouterStatTotMessagesStandbyDropped.setStatus('current')
if mibBuilder.loadTexts: sysGlobalSiprouterStatTotMessagesStandbyDropped.setDescription('Displays the number of messages which were dropped on the\n\t      standby device.')
sysGlobalSiprouterStatTotMessagesMaxRetries = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 38, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalSiprouterStatTotMessagesMaxRetries.setStatus('current')
if mibBuilder.loadTexts: sysGlobalSiprouterStatTotMessagesMaxRetries.setDescription('Displays the number of messages returned to the originator because the latest attempt to retry\n\t      routing exceeded the configured max retry count.')
sysGlobalSiprouterStatTotMessagesInCloned = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 38, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalSiprouterStatTotMessagesInCloned.setStatus('current')
if mibBuilder.loadTexts: sysGlobalSiprouterStatTotMessagesInCloned.setDescription('Displays the total number of messages cloned per route.')
sysGlobalSiprouterStatTotMessagesReturned = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 38, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalSiprouterStatTotMessagesReturned.setStatus('current')
if mibBuilder.loadTexts: sysGlobalSiprouterStatTotMessagesReturned.setDescription('Displays the number of messages returned.')
sysGlobalSiprouterStatTotPayloadBytesIn = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 38, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalSiprouterStatTotPayloadBytesIn.setStatus('current')
if mibBuilder.loadTexts: sysGlobalSiprouterStatTotPayloadBytesIn.setDescription('Displays the number of bytes of payload received.')
sysGlobalSiprouterStatTotPayloadBytesOut = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 38, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalSiprouterStatTotPayloadBytesOut.setStatus('current')
if mibBuilder.loadTexts: sysGlobalSiprouterStatTotPayloadBytesOut.setDescription('Displays the number of bytes of payload sent.')
sysGlobalSiprouterStatCurIncomingStreams = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 38, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalSiprouterStatCurIncomingStreams.setStatus('current')
if mibBuilder.loadTexts: sysGlobalSiprouterStatCurIncomingStreams.setDescription('Displays the number of active incoming streams.')
sysGlobalSiprouterStatCurOutgoingStreams = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 38, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalSiprouterStatCurOutgoingStreams.setStatus('current')
if mibBuilder.loadTexts: sysGlobalSiprouterStatCurOutgoingStreams.setDescription('Displays the number of active outgoing streams.')
sysGlobalSiprouterStatTotIncomingStreams = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 38, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalSiprouterStatTotIncomingStreams.setStatus('current')
if mibBuilder.loadTexts: sysGlobalSiprouterStatTotIncomingStreams.setDescription('Displays the total number of incoming streams since TMM restart or stats reset.')
sysGlobalSiprouterStatTotOutgoingStreams = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 38, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalSiprouterStatTotOutgoingStreams.setStatus('current')
if mibBuilder.loadTexts: sysGlobalSiprouterStatTotOutgoingStreams.setDescription('Displays the total number of outgoing streams since TMM restart or stats reset.')
sysGlobalSiprouterStatTotFailedOutgoingStreams = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 38, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalSiprouterStatTotFailedOutgoingStreams.setStatus('current')
if mibBuilder.loadTexts: sysGlobalSiprouterStatTotFailedOutgoingStreams.setDescription('Displays the total number of failed outgoing streams since TMM restart or stats reset.')
sysGlobalSiprouterStatCurIncomingConnections = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 38, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalSiprouterStatCurIncomingConnections.setStatus('current')
if mibBuilder.loadTexts: sysGlobalSiprouterStatCurIncomingConnections.setDescription('Displays the number of active incoming connections.')
sysGlobalSiprouterStatCurOutgoingConnections = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 38, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalSiprouterStatCurOutgoingConnections.setStatus('current')
if mibBuilder.loadTexts: sysGlobalSiprouterStatCurOutgoingConnections.setDescription('Displays the number of active outgoing connections (including outgoing connections created by\n\t      auto-initialization).')
sysGlobalSiprouterStatCurAutoInitOutgoingConnections = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 38, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalSiprouterStatCurAutoInitOutgoingConnections.setStatus('current')
if mibBuilder.loadTexts: sysGlobalSiprouterStatCurAutoInitOutgoingConnections.setDescription('Displays the number of active outgoing connections created by auto-initialization.')
sysGlobalSiprouterStatTotIncomingConnections = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 38, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalSiprouterStatTotIncomingConnections.setStatus('current')
if mibBuilder.loadTexts: sysGlobalSiprouterStatTotIncomingConnections.setDescription('Displays the total number of incoming connections created since TMM restart or stats reset.')
sysGlobalSiprouterStatTotOutgoingConnections = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 38, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalSiprouterStatTotOutgoingConnections.setStatus('current')
if mibBuilder.loadTexts: sysGlobalSiprouterStatTotOutgoingConnections.setDescription('Displays the total number of outgoing connections created since TMM restart or stats reset\n\t      (including outgoing connections created by auto-initialization).')
sysGlobalSiprouterStatTotAutoInitOutgoingConnections = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 38, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalSiprouterStatTotAutoInitOutgoingConnections.setStatus('current')
if mibBuilder.loadTexts: sysGlobalSiprouterStatTotAutoInitOutgoingConnections.setDescription('Displays the total number of outgoing connections created by auto-initialization since\n\t      TMM restart or stats reset.')
sysGlobalSiprouterStatTotFailedOutgoingConnections = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 38, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalSiprouterStatTotFailedOutgoingConnections.setStatus('current')
if mibBuilder.loadTexts: sysGlobalSiprouterStatTotFailedOutgoingConnections.setDescription('Displays the total number of outgoing connections that failed to be established.')
sysGlobalSiprouterStatTotFailedAutoInitOutgoingConnections = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 38, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalSiprouterStatTotFailedAutoInitOutgoingConnections.setStatus('current')
if mibBuilder.loadTexts: sysGlobalSiprouterStatTotFailedAutoInitOutgoingConnections.setDescription('Displays the total number of outgoing connections that failed to be established by\n\t      auto-initalization.')
sysGlobalSiprouterStatCurPassthruConnections = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 38, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalSiprouterStatCurPassthruConnections.setStatus('current')
if mibBuilder.loadTexts: sysGlobalSiprouterStatCurPassthruConnections.setDescription('Displays the number of active pass through connections.')
sysGlobalSiprouterStatTotPassthruConnections = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 38, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalSiprouterStatTotPassthruConnections.setStatus('current')
if mibBuilder.loadTexts: sysGlobalSiprouterStatTotPassthruConnections.setDescription('Displays the total number of pass through connections since TMM restart or stats reset.')
sysGlobalSiprouterStatTotFailedPassthruConnections = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 38, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalSiprouterStatTotFailedPassthruConnections.setStatus('current')
if mibBuilder.loadTexts: sysGlobalSiprouterStatTotFailedPassthruConnections.setDescription('Displays the total number of failed pass through connections since TMM restart or stats reset.')
sysGlobalSiprouterStatTotPassthruBytes = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 38, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalSiprouterStatTotPassthruBytes.setStatus('current')
if mibBuilder.loadTexts: sysGlobalSiprouterStatTotPassthruBytes.setDescription('Displays the number of pass through bytes.')
sysGlobalSiprouterStatCurrPendingCalls = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 38, 37), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalSiprouterStatCurrPendingCalls.setStatus('current')
if mibBuilder.loadTexts: sysGlobalSiprouterStatCurrPendingCalls.setDescription('Displays the current number of pending calls.')
sysGlobalSiprouterStatCurrActiveCalls = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 38, 38), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalSiprouterStatCurrActiveCalls.setStatus('current')
if mibBuilder.loadTexts: sysGlobalSiprouterStatCurrActiveCalls.setDescription('Displays the current number of active calls.')
sysGlobalSiprouterStatTotSuccessfulCalls = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 38, 39), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalSiprouterStatTotSuccessfulCalls.setStatus('current')
if mibBuilder.loadTexts: sysGlobalSiprouterStatTotSuccessfulCalls.setDescription('Displays the total number of total successful calls.')
sysGlobalSiprouterStatTotRejectedCalls = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 38, 40), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalSiprouterStatTotRejectedCalls.setStatus('current')
if mibBuilder.loadTexts: sysGlobalSiprouterStatTotRejectedCalls.setDescription('Displays the total number of rejected calls.')
sysGlobalSiprouterStatTotCancelledCalls = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 38, 41), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalSiprouterStatTotCancelledCalls.setStatus('current')
if mibBuilder.loadTexts: sysGlobalSiprouterStatTotCancelledCalls.setDescription('Displays the total number of cancelled calls.')
sysGlobalSiprouterStatActiveRegistrations = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 38, 42), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalSiprouterStatActiveRegistrations.setStatus('current')
if mibBuilder.loadTexts: sysGlobalSiprouterStatActiveRegistrations.setDescription('Displays the total number of active registrations.')
sysGlobalSiprouterStatRejectedRegistrations = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 38, 43), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalSiprouterStatRejectedRegistrations.setStatus('current')
if mibBuilder.loadTexts: sysGlobalSiprouterStatRejectedRegistrations.setDescription('Displays the total number of rejected registrations.')
sysGlobalIpsecalgStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 34, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysGlobalIpsecalgStatResetStats.setStatus('current')
if mibBuilder.loadTexts: sysGlobalIpsecalgStatResetStats.setDescription('The action to reset resettable statistics data in sysGlobalIpsecalgStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
sysGlobalIpsecalgStatIkePackets = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 34, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalIpsecalgStatIkePackets.setStatus('current')
if mibBuilder.loadTexts: sysGlobalIpsecalgStatIkePackets.setDescription('Number of IKE packets.')
sysGlobalIpsecalgStatTunnelCreates = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 34, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalIpsecalgStatTunnelCreates.setStatus('current')
if mibBuilder.loadTexts: sysGlobalIpsecalgStatTunnelCreates.setDescription('Number of tunnel creates.')
sysGlobalIpsecalgStatTunnelTeardowns = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 34, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalIpsecalgStatTunnelTeardowns.setStatus('current')
if mibBuilder.loadTexts: sysGlobalIpsecalgStatTunnelTeardowns.setDescription('Number of tunnel teardowns.')
sysGlobalIpsecalgStatFailures = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 34, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalIpsecalgStatFailures.setStatus('current')
if mibBuilder.loadTexts: sysGlobalIpsecalgStatFailures.setDescription('Number of failed connection attempts.')
sysGlobalIpsecalgStatPendingIkeConnectionLimitDrops = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 34, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGlobalIpsecalgStatPendingIkeConnectionLimitDrops.setStatus('current')
if mibBuilder.loadTexts: sysGlobalIpsecalgStatPendingIkeConnectionLimitDrops.setDescription('Number of dropped IKE connections because a client exceeded its limit of pending unacknowledged connections.')
sysLsnPoolFailureStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 33, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLsnPoolFailureStatResetStats.setStatus('current')
if mibBuilder.loadTexts: sysLsnPoolFailureStatResetStats.setDescription('The action to reset resettable statistics data in sysGlobalLsnPoolFailureStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
sysLsnPoolFailureStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 33, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLsnPoolFailureStatNumber.setStatus('current')
if mibBuilder.loadTexts: sysLsnPoolFailureStatNumber.setDescription('The number of sysGlobalLsnPoolFailureStat entries in the table.')
sysLsnPoolFailureStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 33, 3), )
if mibBuilder.loadTexts: sysLsnPoolFailureStatTable.setStatus('current')
if mibBuilder.loadTexts: sysLsnPoolFailureStatTable.setDescription("The system's global LSN pool failure statistics information. \n\t\tThese are the roll-ups of all the individual LSN pool failures' \n\t\tstatistics.")
sysLsnPoolFailureStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 33, 3, 1), ).setIndexNames((0, "F5-BIGIP-SYSTEM-MIB", "sysLsnPoolFailureStatFailureCause"))
if mibBuilder.loadTexts: sysLsnPoolFailureStatEntry.setStatus('current')
if mibBuilder.loadTexts: sysLsnPoolFailureStatEntry.setDescription('Columns in the sysLsnPoolFailureStat Table')
sysLsnPoolFailureStatFailureCause = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 33, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLsnPoolFailureStatFailureCause.setStatus('current')
if mibBuilder.loadTexts: sysLsnPoolFailureStatFailureCause.setDescription('The name of the failure cause.')
sysLsnPoolFailureStatFailureCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 33, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLsnPoolFailureStatFailureCount.setStatus('current')
if mibBuilder.loadTexts: sysLsnPoolFailureStatFailureCount.setDescription('Total failures due to the cause.')
sysPlaneStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 12, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPlaneStatNumber.setStatus('current')
if mibBuilder.loadTexts: sysPlaneStatNumber.setDescription('The number of sysPlaneStat entries in the table.')
sysPlaneStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 1, 12, 2, 2), )
if mibBuilder.loadTexts: sysPlaneStatTable.setStatus('current')
if mibBuilder.loadTexts: sysPlaneStatTable.setDescription('Processing plane resource usage')
sysPlaneStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 1, 12, 2, 2, 1), ).setIndexNames((0, "F5-BIGIP-SYSTEM-MIB", "sysPlaneStatPlaneName"))
if mibBuilder.loadTexts: sysPlaneStatEntry.setStatus('current')
if mibBuilder.loadTexts: sysPlaneStatEntry.setDescription('Columns in the sysPlaneStat Table')
sysPlaneStatPlaneName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 12, 2, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPlaneStatPlaneName.setStatus('current')
if mibBuilder.loadTexts: sysPlaneStatPlaneName.setDescription('Plane name')
sysPlaneStatCpuCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 12, 2, 2, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPlaneStatCpuCount.setStatus('current')
if mibBuilder.loadTexts: sysPlaneStatCpuCount.setDescription('Total number of active CPUs assigned to plane')
sysPlaneStatCpuRatioCurr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 12, 2, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPlaneStatCpuRatioCurr.setStatus('current')
if mibBuilder.loadTexts: sysPlaneStatCpuRatioCurr.setDescription('Last poll interval plane CPU usage (percentage)')
sysPlaneStatCpuRatio5sec = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 12, 2, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPlaneStatCpuRatio5sec.setStatus('current')
if mibBuilder.loadTexts: sysPlaneStatCpuRatio5sec.setDescription('Last 5 sec average plane CPU usage (percentage)')
sysPlaneStatCpuRatio1min = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 12, 2, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPlaneStatCpuRatio1min.setStatus('current')
if mibBuilder.loadTexts: sysPlaneStatCpuRatio1min.setDescription('Last 1 min average plane CPU usage (percentage)')
sysPlaneStatCpuRatio5min = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 12, 2, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPlaneStatCpuRatio5min.setStatus('current')
if mibBuilder.loadTexts: sysPlaneStatCpuRatio5min.setDescription('Last 5 min average plane CPU usage (percentage)')
sysSwitchDdmStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSwitchDdmStatNumber.setStatus('current')
if mibBuilder.loadTexts: sysSwitchDdmStatNumber.setDescription('The number of sysSwitchDdmStat entries in the table.')
sysSwitchDdmStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 7, 2), )
if mibBuilder.loadTexts: sysSwitchDdmStatTable.setStatus('current')
if mibBuilder.loadTexts: sysSwitchDdmStatTable.setDescription('A table containing Digital Diagnostic Monitoring information for Gigabit\n\t         Ethernet Optical Transceivers. Receive or transmit power outside of\n\t         threshold ranges will display an alarm or warning.')
sysSwitchDdmStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 7, 2, 1), ).setIndexNames((0, "F5-BIGIP-SYSTEM-MIB", "sysSwitchDdmStatName"))
if mibBuilder.loadTexts: sysSwitchDdmStatEntry.setStatus('current')
if mibBuilder.loadTexts: sysSwitchDdmStatEntry.setDescription('Columns in the sysSwitchDdmStat Table')
sysSwitchDdmStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 7, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSwitchDdmStatName.setStatus('current')
if mibBuilder.loadTexts: sysSwitchDdmStatName.setDescription('The name of the interface.')
sysSwitchDdmStatTxPwr1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 7, 2, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSwitchDdmStatTxPwr1.setStatus('current')
if mibBuilder.loadTexts: sysSwitchDdmStatTxPwr1.setDescription('The laser output optical power in .1 microWatts (.1uW).')
sysSwitchDdmStatTxDbmPwr1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 7, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSwitchDdmStatTxDbmPwr1.setStatus('current')
if mibBuilder.loadTexts: sysSwitchDdmStatTxDbmPwr1.setDescription('The laser output optical power in .001 dBm.')
sysSwitchDdmStatTxPwr2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 7, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSwitchDdmStatTxPwr2.setStatus('current')
if mibBuilder.loadTexts: sysSwitchDdmStatTxPwr2.setDescription('The laser output optical power in .1 microWatts (.1uW). Only available for QSFP transceivers.')
sysSwitchDdmStatTxDbmPwr2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 7, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSwitchDdmStatTxDbmPwr2.setStatus('current')
if mibBuilder.loadTexts: sysSwitchDdmStatTxDbmPwr2.setDescription('The laser output optical power in .001 dBm. Only available for QSFP transceivers.')
sysSwitchDdmStatTxPwr3 = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 7, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSwitchDdmStatTxPwr3.setStatus('current')
if mibBuilder.loadTexts: sysSwitchDdmStatTxPwr3.setDescription('The laser output optical power in .1 microWatts (.1uW). Only available for QSFP transceivers.')
sysSwitchDdmStatTxDbmPwr3 = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 7, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSwitchDdmStatTxDbmPwr3.setStatus('current')
if mibBuilder.loadTexts: sysSwitchDdmStatTxDbmPwr3.setDescription('The laser output optical power in .001 dBm. Only available for QSFP transceivers.')
sysSwitchDdmStatTxPwr4 = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 7, 2, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSwitchDdmStatTxPwr4.setStatus('current')
if mibBuilder.loadTexts: sysSwitchDdmStatTxPwr4.setDescription('The laser output optical power in .1 microWatts (.1uW). Only available for QSFP transceivers.')
sysSwitchDdmStatTxDbmPwr4 = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 7, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSwitchDdmStatTxDbmPwr4.setStatus('current')
if mibBuilder.loadTexts: sysSwitchDdmStatTxDbmPwr4.setDescription('The laser output optical power in .001 dBm. Only available for QSFP transceivers.')
sysSwitchDdmStatRxPwr1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 7, 2, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSwitchDdmStatRxPwr1.setStatus('current')
if mibBuilder.loadTexts: sysSwitchDdmStatRxPwr1.setDescription('The laser receiver1 optical power in .1 microWatts (.1uW).')
sysSwitchDdmStatRxDbmPwr1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 7, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSwitchDdmStatRxDbmPwr1.setStatus('current')
if mibBuilder.loadTexts: sysSwitchDdmStatRxDbmPwr1.setDescription('The laser receiver1 optical power in .001 dBm.')
sysSwitchDdmStatRxPwr2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 7, 2, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSwitchDdmStatRxPwr2.setStatus('current')
if mibBuilder.loadTexts: sysSwitchDdmStatRxPwr2.setDescription('The laser receiver2 optical power in .1 microWatts (.1uW). Only available for QSFP transceivers.')
sysSwitchDdmStatRxDbmPwr2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 7, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSwitchDdmStatRxDbmPwr2.setStatus('current')
if mibBuilder.loadTexts: sysSwitchDdmStatRxDbmPwr2.setDescription('The laser receiver2 optical power in .001 dBm. Only available for QSFP transceivers.')
sysSwitchDdmStatRxPwr3 = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 7, 2, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSwitchDdmStatRxPwr3.setStatus('current')
if mibBuilder.loadTexts: sysSwitchDdmStatRxPwr3.setDescription('The laser receiver3 optical power in .1 microWatts (.1uW). Only available for QSFP transceivers.')
sysSwitchDdmStatRxDbmPwr3 = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 7, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSwitchDdmStatRxDbmPwr3.setStatus('current')
if mibBuilder.loadTexts: sysSwitchDdmStatRxDbmPwr3.setDescription('The laser receiver3 optical power in .001 dBm. Only available for QSFP transceivers.')
sysSwitchDdmStatRxPwr4 = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 7, 2, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSwitchDdmStatRxPwr4.setStatus('current')
if mibBuilder.loadTexts: sysSwitchDdmStatRxPwr4.setDescription('The laser receiver4 optical power in .1 microWatts (.1uW). Only available for QSFP transceivers.')
sysSwitchDdmStatRxDbmPwr4 = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 7, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSwitchDdmStatRxDbmPwr4.setStatus('current')
if mibBuilder.loadTexts: sysSwitchDdmStatRxDbmPwr4.setDescription('The laser receiver4 optical power in .001 dBm. Only available for QSFP transceivers.')
sysSwitchDdmStatTxAlarmLo = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 7, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSwitchDdmStatTxAlarmLo.setStatus('current')
if mibBuilder.loadTexts: sysSwitchDdmStatTxAlarmLo.setDescription('The state of the transmit low power alarm.')
sysSwitchDdmStatTxAlarmHi = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 7, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSwitchDdmStatTxAlarmHi.setStatus('current')
if mibBuilder.loadTexts: sysSwitchDdmStatTxAlarmHi.setDescription('The state of the transmit high power alarm.')
sysSwitchDdmStatRxAlarmLo = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 7, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSwitchDdmStatRxAlarmLo.setStatus('current')
if mibBuilder.loadTexts: sysSwitchDdmStatRxAlarmLo.setDescription('The state of the receive low power alarm.')
sysSwitchDdmStatRxAlarmHi = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 7, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSwitchDdmStatRxAlarmHi.setStatus('current')
if mibBuilder.loadTexts: sysSwitchDdmStatRxAlarmHi.setDescription('The state of the receive high power alarm.')
sysSwitchDdmStatTxWarnLo = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 7, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSwitchDdmStatTxWarnLo.setStatus('current')
if mibBuilder.loadTexts: sysSwitchDdmStatTxWarnLo.setDescription('The state of the transmit low power warning.')
sysSwitchDdmStatTxWarnHi = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 7, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSwitchDdmStatTxWarnHi.setStatus('current')
if mibBuilder.loadTexts: sysSwitchDdmStatTxWarnHi.setDescription('The state of the transmit high power warning.')
sysSwitchDdmStatRxWarnLo = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 7, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSwitchDdmStatRxWarnLo.setStatus('current')
if mibBuilder.loadTexts: sysSwitchDdmStatRxWarnLo.setDescription('The state of the receive low power warning.')
sysSwitchDdmStatRxWarnHi = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 7, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSwitchDdmStatRxWarnHi.setStatus('current')
if mibBuilder.loadTexts: sysSwitchDdmStatRxWarnHi.setDescription('The state of the receive high power warning.')
sysSwitchDdmStatTxPwrLoAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 7, 2, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSwitchDdmStatTxPwrLoAlarm.setStatus('current')
if mibBuilder.loadTexts: sysSwitchDdmStatTxPwrLoAlarm.setDescription('Transmit optical power low alarm threshold in .1 microWatts.')
sysSwitchDdmStatTxDbmPwrLoAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 7, 2, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSwitchDdmStatTxDbmPwrLoAlarm.setStatus('current')
if mibBuilder.loadTexts: sysSwitchDdmStatTxDbmPwrLoAlarm.setDescription('Transmit optical power low alarm threshold in .001 dBm.')
sysSwitchDdmStatTxPwrHiAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 7, 2, 1, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSwitchDdmStatTxPwrHiAlarm.setStatus('current')
if mibBuilder.loadTexts: sysSwitchDdmStatTxPwrHiAlarm.setDescription('Transmit optical power high alarm threshold in .1 microWatts.')
sysSwitchDdmStatTxDbmPwrHiAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 7, 2, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSwitchDdmStatTxDbmPwrHiAlarm.setStatus('current')
if mibBuilder.loadTexts: sysSwitchDdmStatTxDbmPwrHiAlarm.setDescription('Transmit optical power high alarm threshold in .001 dBm.')
sysSwitchDdmStatTxPwrLoWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 7, 2, 1, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSwitchDdmStatTxPwrLoWarn.setStatus('current')
if mibBuilder.loadTexts: sysSwitchDdmStatTxPwrLoWarn.setDescription('Transmit optical power low warning threshold in .1 microWatts.')
sysSwitchDdmStatTxDbmPwrLoWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 7, 2, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSwitchDdmStatTxDbmPwrLoWarn.setStatus('current')
if mibBuilder.loadTexts: sysSwitchDdmStatTxDbmPwrLoWarn.setDescription('Transmit optical power low warning threshold in .001 dBm.')
sysSwitchDdmStatTxPwrHiWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 7, 2, 1, 32), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSwitchDdmStatTxPwrHiWarn.setStatus('current')
if mibBuilder.loadTexts: sysSwitchDdmStatTxPwrHiWarn.setDescription('Transmit optical power high warning threshold in .1 microWatts.')
sysSwitchDdmStatTxDbmPwrHiWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 7, 2, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSwitchDdmStatTxDbmPwrHiWarn.setStatus('current')
if mibBuilder.loadTexts: sysSwitchDdmStatTxDbmPwrHiWarn.setDescription('Transmit optical power high warning threshold in .001 dBm.')
sysSwitchDdmStatRxPwrLoAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 7, 2, 1, 34), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSwitchDdmStatRxPwrLoAlarm.setStatus('current')
if mibBuilder.loadTexts: sysSwitchDdmStatRxPwrLoAlarm.setDescription('Receive optical power low alarm threshold in .1 microWatts.')
sysSwitchDdmStatRxDbmPwrLoAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 7, 2, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSwitchDdmStatRxDbmPwrLoAlarm.setStatus('current')
if mibBuilder.loadTexts: sysSwitchDdmStatRxDbmPwrLoAlarm.setDescription('Receive optical power low alarm threshold in .001 dBm.')
sysSwitchDdmStatRxPwrHiAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 7, 2, 1, 36), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSwitchDdmStatRxPwrHiAlarm.setStatus('current')
if mibBuilder.loadTexts: sysSwitchDdmStatRxPwrHiAlarm.setDescription('Receive optical power high alarm threshold in .1 microWatts.')
sysSwitchDdmStatRxDbmPwrHiAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 7, 2, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSwitchDdmStatRxDbmPwrHiAlarm.setStatus('current')
if mibBuilder.loadTexts: sysSwitchDdmStatRxDbmPwrHiAlarm.setDescription('Receive optical power high alarm threshold in .001 dBm.')
sysSwitchDdmStatRxPwrLoWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 7, 2, 1, 38), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSwitchDdmStatRxPwrLoWarn.setStatus('current')
if mibBuilder.loadTexts: sysSwitchDdmStatRxPwrLoWarn.setDescription('Receive optical power low warning threshold in .1 microWatts.')
sysSwitchDdmStatRxDbmPwrLoWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 7, 2, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSwitchDdmStatRxDbmPwrLoWarn.setStatus('current')
if mibBuilder.loadTexts: sysSwitchDdmStatRxDbmPwrLoWarn.setDescription('Receive optical power low warning threshold in .001 dBm.')
sysSwitchDdmStatRxPwrHiWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 7, 2, 1, 40), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSwitchDdmStatRxPwrHiWarn.setStatus('current')
if mibBuilder.loadTexts: sysSwitchDdmStatRxPwrHiWarn.setDescription('Receive optical power high warning threshold in .1 microWatts.')
sysSwitchDdmStatRxDbmPwrHiWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 4, 7, 2, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSwitchDdmStatRxDbmPwrHiWarn.setStatus('current')
if mibBuilder.loadTexts: sysSwitchDdmStatRxDbmPwrHiWarn.setDescription('Receive optical power high warning threshold in .001 dBm.')
sysTmmProcStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 8, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTmmProcStatNumber.setStatus('current')
if mibBuilder.loadTexts: sysTmmProcStatNumber.setDescription('The number of sysTmmProcStat entries in the table.')
sysTmmProcStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 1, 8, 3, 2), )
if mibBuilder.loadTexts: sysTmmProcStatTable.setStatus('current')
if mibBuilder.loadTexts: sysTmmProcStatTable.setDescription('A table containing statistics information of the Traffic Management Module (TMM)\n\t        presented per TMM Process ID (TmmPid).')
sysTmmProcStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 1, 8, 3, 2, 1), ).setIndexNames((0, "F5-BIGIP-SYSTEM-MIB", "sysTmmProcStatSlotId"), (0, "F5-BIGIP-SYSTEM-MIB", "sysTmmProcStatTmmPid"))
if mibBuilder.loadTexts: sysTmmProcStatEntry.setStatus('current')
if mibBuilder.loadTexts: sysTmmProcStatEntry.setDescription('Columns in the sysTmmProcStat Table')
sysTmmProcStatSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 8, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTmmProcStatSlotId.setStatus('current')
if mibBuilder.loadTexts: sysTmmProcStatSlotId.setDescription('The index of the slot where the TMM is running.')
sysTmmProcStatTmmPid = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 8, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTmmProcStatTmmPid.setStatus('current')
if mibBuilder.loadTexts: sysTmmProcStatTmmPid.setDescription('The process ID of the specified TMM (Traffic Management Module) on the system.')
sysTmmProcStatMemoryTotalKb = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 8, 3, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTmmProcStatMemoryTotalKb.setStatus('current')
if mibBuilder.loadTexts: sysTmmProcStatMemoryTotalKb.setDescription('The total memory available in Kilobytes for TMM (Traffic Management Module).')
sysTmmProcStatMemoryUsedKb = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 8, 3, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTmmProcStatMemoryUsedKb.setStatus('current')
if mibBuilder.loadTexts: sysTmmProcStatMemoryUsedKb.setDescription('The memory in use in Kilobytes for TMM (Traffic Management Module).')
sysCertificateFileObjectNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 15, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCertificateFileObjectNumber.setStatus('current')
if mibBuilder.loadTexts: sysCertificateFileObjectNumber.setDescription('The number of sysCertificateFileObject entries in the table.')
sysCertificateFileObjectTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 1, 15, 1, 2), )
if mibBuilder.loadTexts: sysCertificateFileObjectTable.setStatus('current')
if mibBuilder.loadTexts: sysCertificateFileObjectTable.setDescription('A table containing certificate configuration.')
sysCertificateFileObjectEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 1, 15, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-SYSTEM-MIB", "sysCertificateFileObjectName"))
if mibBuilder.loadTexts: sysCertificateFileObjectEntry.setStatus('current')
if mibBuilder.loadTexts: sysCertificateFileObjectEntry.setDescription('Columns in the sysCertificateFileObject Table')
sysCertificateFileObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 15, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCertificateFileObjectName.setStatus('current')
if mibBuilder.loadTexts: sysCertificateFileObjectName.setDescription('The certificate name.')
sysCertificateFileObjectIssuerCert = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 15, 1, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCertificateFileObjectIssuerCert.setStatus('current')
if mibBuilder.loadTexts: sysCertificateFileObjectIssuerCert.setDescription('The issuer certificate name.')
sysCertificateFileObjectCertStatusValidationOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 15, 1, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCertificateFileObjectCertStatusValidationOptions.setStatus('current')
if mibBuilder.loadTexts: sysCertificateFileObjectCertStatusValidationOptions.setDescription('The certificate status validation options.\n\t        CERT_STATUS_VALIDATION_OPT_OCSP = 1')
sysCertificateFileObjectExpirationString = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 15, 1, 2, 1, 4), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCertificateFileObjectExpirationString.setStatus('current')
if mibBuilder.loadTexts: sysCertificateFileObjectExpirationString.setDescription('The expiration date of the certificate as a string.')
sysCertificateFileObjectExpirationDate = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 15, 1, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCertificateFileObjectExpirationDate.setStatus('current')
if mibBuilder.loadTexts: sysCertificateFileObjectExpirationDate.setDescription('The expiration date of the certificate in unix time.')
sysCertValidatorOcspNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 15, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCertValidatorOcspNumber.setStatus('current')
if mibBuilder.loadTexts: sysCertValidatorOcspNumber.setDescription('The number of sysCertValidatorOcsp entries in the table.')
sysCertValidatorOcspTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 1, 15, 2, 2), )
if mibBuilder.loadTexts: sysCertValidatorOcspTable.setStatus('current')
if mibBuilder.loadTexts: sysCertValidatorOcspTable.setDescription('A table containing OCSP certificate validator configuration.')
sysCertValidatorOcspEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 1, 15, 2, 2, 1), ).setIndexNames((0, "F5-BIGIP-SYSTEM-MIB", "sysCertValidatorOcspName"))
if mibBuilder.loadTexts: sysCertValidatorOcspEntry.setStatus('current')
if mibBuilder.loadTexts: sysCertValidatorOcspEntry.setDescription('Columns in the sysCertValidatorOcsp Table')
sysCertValidatorOcspName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 15, 2, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCertValidatorOcspName.setStatus('current')
if mibBuilder.loadTexts: sysCertValidatorOcspName.setDescription('The OCSP validator name.')
sysCertValidatorOcspProxyServerPool = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 15, 2, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCertValidatorOcspProxyServerPool.setStatus('current')
if mibBuilder.loadTexts: sysCertValidatorOcspProxyServerPool.setDescription('The proxy server pool name.')
sysCertValidatorOcspDnsResolver = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 15, 2, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCertValidatorOcspDnsResolver.setStatus('current')
if mibBuilder.loadTexts: sysCertValidatorOcspDnsResolver.setDescription('The DNS resolver name.')
sysCertValidatorOcspTrustedResponders = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 15, 2, 2, 1, 4), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCertValidatorOcspTrustedResponders.setStatus('current')
if mibBuilder.loadTexts: sysCertValidatorOcspTrustedResponders.setDescription('The name of trusted OCSP responder certificate.')
sysCertValidatorOcspUrl = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 15, 2, 2, 1, 5), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCertValidatorOcspUrl.setStatus('current')
if mibBuilder.loadTexts: sysCertValidatorOcspUrl.setDescription('The OCSP responder URL.')
sysCertValidatorOcspSignerCert = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 15, 2, 2, 1, 6), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCertValidatorOcspSignerCert.setStatus('current')
if mibBuilder.loadTexts: sysCertValidatorOcspSignerCert.setDescription('The signer certificate name.')
sysCertValidatorOcspSignerKey = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 15, 2, 2, 1, 7), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCertValidatorOcspSignerKey.setStatus('current')
if mibBuilder.loadTexts: sysCertValidatorOcspSignerKey.setDescription('The signer key name.')
sysCertValidatorOcspSignerKeyPassphrase = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 15, 2, 2, 1, 8), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCertValidatorOcspSignerKeyPassphrase.setStatus('deprecated')
if mibBuilder.loadTexts: sysCertValidatorOcspSignerKeyPassphrase.setDescription('Deprecated! No longer supported.\n\t        The signer key passphrase.')
sysCertValidatorOcspSignHash = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 15, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("sha1", 0), ("sha256", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCertValidatorOcspSignHash.setStatus('current')
if mibBuilder.loadTexts: sysCertValidatorOcspSignHash.setDescription('OCSP request signing hash algorithm.')
sysCertValidatorOcspTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 15, 2, 2, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCertValidatorOcspTimeout.setStatus('current')
if mibBuilder.loadTexts: sysCertValidatorOcspTimeout.setDescription('Timeout for fetching OCSP response.')
sysCertValidatorOcspClockSkew = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 15, 2, 2, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCertValidatorOcspClockSkew.setStatus('current')
if mibBuilder.loadTexts: sysCertValidatorOcspClockSkew.setDescription('Maximum allowable clock skew between the responder and the BIG-IP.')
sysCertValidatorOcspStatusAge = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 15, 2, 2, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCertValidatorOcspStatusAge.setStatus('current')
if mibBuilder.loadTexts: sysCertValidatorOcspStatusAge.setDescription('Response validity period when new status is available immediately.')
sysCertValidatorOcspCacheTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 15, 2, 2, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCertValidatorOcspCacheTimeout.setStatus('current')
if mibBuilder.loadTexts: sysCertValidatorOcspCacheTimeout.setDescription('Lifetime of the response in the cache.')
sysCertValidatorOcspCacheErrorTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 15, 2, 2, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCertValidatorOcspCacheErrorTimeout.setStatus('current')
if mibBuilder.loadTexts: sysCertValidatorOcspCacheErrorTimeout.setDescription('Lifetime of the error response in the cache.')
sysCertValidatorOcspStrictRespCertCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 15, 2, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCertValidatorOcspStrictRespCertCheck.setStatus('current')
if mibBuilder.loadTexts: sysCertValidatorOcspStrictRespCertCheck.setDescription("Check for OCSP signing extension in the signer's certificate.")
sysCertValidatorOcspConcurrentConnectionsLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 15, 2, 2, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCertValidatorOcspConcurrentConnectionsLimit.setStatus('current')
if mibBuilder.loadTexts: sysCertValidatorOcspConcurrentConnectionsLimit.setDescription('Concurrent connections limit for OCSP response fetching.')
sysCertValidatorOcspRouteDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 15, 2, 2, 1, 17), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCertValidatorOcspRouteDomain.setStatus('current')
if mibBuilder.loadTexts: sysCertValidatorOcspRouteDomain.setDescription('Route domain for fetching OCSP response using HTTP forward proxy.')
sysJoinCertValidatorNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 15, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysJoinCertValidatorNumber.setStatus('current')
if mibBuilder.loadTexts: sysJoinCertValidatorNumber.setDescription('The number of sysJoinCertValidator entries in the table.')
sysJoinCertValidatorTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 1, 15, 3, 2), )
if mibBuilder.loadTexts: sysJoinCertValidatorTable.setStatus('current')
if mibBuilder.loadTexts: sysJoinCertValidatorTable.setDescription('A table containing the association between certificates and validators.')
sysJoinCertValidatorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 1, 15, 3, 2, 1), ).setIndexNames((0, "F5-BIGIP-SYSTEM-MIB", "sysJoinCertValidatorCert"), (0, "F5-BIGIP-SYSTEM-MIB", "sysJoinCertValidatorValidator"))
if mibBuilder.loadTexts: sysJoinCertValidatorEntry.setStatus('current')
if mibBuilder.loadTexts: sysJoinCertValidatorEntry.setDescription('Columns in the sysJoinCertValidator Table')
sysJoinCertValidatorCert = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 15, 3, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysJoinCertValidatorCert.setStatus('current')
if mibBuilder.loadTexts: sysJoinCertValidatorCert.setDescription('The certificate name.')
sysJoinCertValidatorValidator = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 15, 3, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysJoinCertValidatorValidator.setStatus('current')
if mibBuilder.loadTexts: sysJoinCertValidatorValidator.setDescription('The validator name.')
sysCertValidatorOcspStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 15, 4, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysCertValidatorOcspStatResetStats.setStatus('current')
if mibBuilder.loadTexts: sysCertValidatorOcspStatResetStats.setDescription('The action to reset resettable statistics data in sysCertValidatorOcspStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
sysCertValidatorOcspStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 15, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCertValidatorOcspStatNumber.setStatus('current')
if mibBuilder.loadTexts: sysCertValidatorOcspStatNumber.setDescription('The number of sysCertValidatorOcspStat entries in the table.')
sysCertValidatorOcspStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 1, 15, 4, 3), )
if mibBuilder.loadTexts: sysCertValidatorOcspStatTable.setStatus('current')
if mibBuilder.loadTexts: sysCertValidatorOcspStatTable.setDescription('A table containing OCSP certificate validator statistics.')
sysCertValidatorOcspStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 1, 15, 4, 3, 1), ).setIndexNames((0, "F5-BIGIP-SYSTEM-MIB", "sysCertValidatorOcspStatName"))
if mibBuilder.loadTexts: sysCertValidatorOcspStatEntry.setStatus('current')
if mibBuilder.loadTexts: sysCertValidatorOcspStatEntry.setDescription('Columns in the sysCertValidatorOcspStat Table')
sysCertValidatorOcspStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 15, 4, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCertValidatorOcspStatName.setStatus('current')
if mibBuilder.loadTexts: sysCertValidatorOcspStatName.setDescription('The name of validator.')
sysCertValidatorOcspStatOcspRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 15, 4, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCertValidatorOcspStatOcspRequests.setStatus('current')
if mibBuilder.loadTexts: sysCertValidatorOcspStatOcspRequests.setDescription('The number of OCSP requests.')
sysCertValidatorOcspStatOcspInternalErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 15, 4, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCertValidatorOcspStatOcspInternalErrors.setStatus('current')
if mibBuilder.loadTexts: sysCertValidatorOcspStatOcspInternalErrors.setDescription('The number of internal errors.')
sysCertValidatorOcspStatSuccessfulCacheRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 15, 4, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCertValidatorOcspStatSuccessfulCacheRequests.setStatus('current')
if mibBuilder.loadTexts: sysCertValidatorOcspStatSuccessfulCacheRequests.setDescription('The number of successful cache requests.')
sysCertValidatorOcspStatConnectionHttpErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 15, 4, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCertValidatorOcspStatConnectionHttpErrors.setStatus('current')
if mibBuilder.loadTexts: sysCertValidatorOcspStatConnectionHttpErrors.setDescription('The number of HTTP errors.')
sysCertValidatorOcspStatConnectionTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 15, 4, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCertValidatorOcspStatConnectionTimeouts.setStatus('current')
if mibBuilder.loadTexts: sysCertValidatorOcspStatConnectionTimeouts.setDescription('The number of connection timeouts.')
sysCertValidatorOcspStatConnectionOtherFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 15, 4, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCertValidatorOcspStatConnectionOtherFailures.setStatus('current')
if mibBuilder.loadTexts: sysCertValidatorOcspStatConnectionOtherFailures.setDescription('The number of other connection failures.')
sysCertValidatorOcspStatResponseMalformedRequestErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 15, 4, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCertValidatorOcspStatResponseMalformedRequestErrors.setStatus('current')
if mibBuilder.loadTexts: sysCertValidatorOcspStatResponseMalformedRequestErrors.setDescription("The number of responses with response status of 'malformed request'.")
sysCertValidatorOcspStatResponseInternalErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 15, 4, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCertValidatorOcspStatResponseInternalErrors.setStatus('current')
if mibBuilder.loadTexts: sysCertValidatorOcspStatResponseInternalErrors.setDescription("The number of responses with response status of 'internal errors'.")
sysCertValidatorOcspStatResponseTryLaterErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 15, 4, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCertValidatorOcspStatResponseTryLaterErrors.setStatus('current')
if mibBuilder.loadTexts: sysCertValidatorOcspStatResponseTryLaterErrors.setDescription("The number of responses with response status of 'Try Later'.")
sysCertValidatorOcspStatResponseSignatureRequiredErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 15, 4, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCertValidatorOcspStatResponseSignatureRequiredErrors.setStatus('current')
if mibBuilder.loadTexts: sysCertValidatorOcspStatResponseSignatureRequiredErrors.setDescription("The number of responses with response status of 'signature required'.")
sysCertValidatorOcspStatResponseUnauthorizedErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 15, 4, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCertValidatorOcspStatResponseUnauthorizedErrors.setStatus('current')
if mibBuilder.loadTexts: sysCertValidatorOcspStatResponseUnauthorizedErrors.setDescription("The number of responses with response status of 'unauthorized'.")
sysCertValidatorOcspStatResponseValidationParseErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 15, 4, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCertValidatorOcspStatResponseValidationParseErrors.setStatus('current')
if mibBuilder.loadTexts: sysCertValidatorOcspStatResponseValidationParseErrors.setDescription('The number of response parsing errors.')
sysCertValidatorOcspStatResponseValidationVerifyErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 15, 4, 3, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCertValidatorOcspStatResponseValidationVerifyErrors.setStatus('current')
if mibBuilder.loadTexts: sysCertValidatorOcspStatResponseValidationVerifyErrors.setDescription('The number of response verification errors.')
sysCertValidatorOcspStatResponseValidationValidityErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 15, 4, 3, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCertValidatorOcspStatResponseValidationValidityErrors.setStatus('current')
if mibBuilder.loadTexts: sysCertValidatorOcspStatResponseValidationValidityErrors.setDescription('The number of response validity errors.')
sysCertValidatorOcspStatResponseValidationOtherErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 15, 4, 3, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCertValidatorOcspStatResponseValidationOtherErrors.setStatus('current')
if mibBuilder.loadTexts: sysCertValidatorOcspStatResponseValidationOtherErrors.setDescription('The number of other validation errors.')
sysCertValidatorOcspStatCertificateStatusGood = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 15, 4, 3, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCertValidatorOcspStatCertificateStatusGood.setStatus('current')
if mibBuilder.loadTexts: sysCertValidatorOcspStatCertificateStatusGood.setDescription('The number of certificates in good status.')
sysCertValidatorOcspStatCertificateStatusRevoked = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 15, 4, 3, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCertValidatorOcspStatCertificateStatusRevoked.setStatus('current')
if mibBuilder.loadTexts: sysCertValidatorOcspStatCertificateStatusRevoked.setDescription('The number of certificates in revoked status.')
sysCertValidatorOcspStatCertificateStatusUnknown = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 15, 4, 3, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCertValidatorOcspStatCertificateStatusUnknown.setStatus('current')
if mibBuilder.loadTexts: sysCertValidatorOcspStatCertificateStatusUnknown.setDescription('The number of certificates in unknown status.')
sysCertStatusObjectNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 15, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCertStatusObjectNumber.setStatus('current')
if mibBuilder.loadTexts: sysCertStatusObjectNumber.setDescription('The number of sysCertStatusObject entries in the table.')
sysCertStatusObjectTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 1, 15, 5, 2), )
if mibBuilder.loadTexts: sysCertStatusObjectTable.setStatus('current')
if mibBuilder.loadTexts: sysCertStatusObjectTable.setDescription('A table containing the validation status of the certificate and its validator.')
sysCertStatusObjectEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 1, 15, 5, 2, 1), ).setIndexNames((0, "F5-BIGIP-SYSTEM-MIB", "sysCertStatusObjectCertName"))
if mibBuilder.loadTexts: sysCertStatusObjectEntry.setStatus('current')
if mibBuilder.loadTexts: sysCertStatusObjectEntry.setDescription('Columns in the sysCertStatusObject Table')
sysCertStatusObjectCertName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 15, 5, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCertStatusObjectCertName.setStatus('current')
if mibBuilder.loadTexts: sysCertStatusObjectCertName.setDescription('The certificate name.')
sysCertStatusObjectCertStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 15, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("good", 1), ("revoked", 2), ("unknown", 3), ("error", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCertStatusObjectCertStatus.setStatus('current')
if mibBuilder.loadTexts: sysCertStatusObjectCertStatus.setDescription('The status of the certificate.')
sysCertStatusObjectOcspStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 15, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("none", 0), ("unknown", 1), ("connectionErrorHttp", 2), ("connectionErrorTimeout", 3), ("connectionErrorOther", 4), ("responseErrorMalformedRequest", 5), ("responseErrorInternalError", 6), ("responseErrorTryLater", 7), ("responseErrorSignatureRequired", 8), ("responseErrorUnauthorized", 9), ("responseValidationErrorParse", 10), ("responseValidationErrorVerify", 11), ("responseValidationErrorValidity", 12), ("responseValidationErrorOther", 13), ("successful", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCertStatusObjectOcspStatus.setStatus('current')
if mibBuilder.loadTexts: sysCertStatusObjectOcspStatus.setDescription('The status of OCSP request.')
sysCertOrderManagerNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 15, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCertOrderManagerNumber.setStatus('current')
if mibBuilder.loadTexts: sysCertOrderManagerNumber.setDescription('The number of sysCertOrderManager entries in the table.')
sysCertOrderManagerTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 1, 15, 6, 2), )
if mibBuilder.loadTexts: sysCertOrderManagerTable.setStatus('current')
if mibBuilder.loadTexts: sysCertOrderManagerTable.setDescription('A table containing certificate order manager configuration.')
sysCertOrderManagerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 1, 15, 6, 2, 1), ).setIndexNames((0, "F5-BIGIP-SYSTEM-MIB", "sysCertOrderManagerName"))
if mibBuilder.loadTexts: sysCertOrderManagerEntry.setStatus('current')
if mibBuilder.loadTexts: sysCertOrderManagerEntry.setDescription('Columns in the sysCertOrderManager Table')
sysCertOrderManagerName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 15, 6, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCertOrderManagerName.setStatus('current')
if mibBuilder.loadTexts: sysCertOrderManagerName.setDescription('The certificate order manager name.')
sysCertOrderManagerValidityDays = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 15, 6, 2, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCertOrderManagerValidityDays.setStatus('current')
if mibBuilder.loadTexts: sysCertOrderManagerValidityDays.setDescription('Certificate validity in days.')
sysCertOrderManagerAutoRenew = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 15, 6, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCertOrderManagerAutoRenew.setStatus('current')
if mibBuilder.loadTexts: sysCertOrderManagerAutoRenew.setDescription('Enable/Disable certificate auto renewal.')
sysCertOrderManagerAuthorityName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 15, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("comodo", 1), ("symantec", 2), ("godaddy", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCertOrderManagerAuthorityName.setStatus('current')
if mibBuilder.loadTexts: sysCertOrderManagerAuthorityName.setDescription('The certificate authority.')
sysCertOrderManagerBaseUrl = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 15, 6, 2, 1, 5), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCertOrderManagerBaseUrl.setStatus('current')
if mibBuilder.loadTexts: sysCertOrderManagerBaseUrl.setDescription('The base URL for reaching CA server.')
sysCertOrderManagerAdditionalHeaders = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 15, 6, 2, 1, 6), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCertOrderManagerAdditionalHeaders.setStatus('current')
if mibBuilder.loadTexts: sysCertOrderManagerAdditionalHeaders.setDescription('Additional HTTP headers required by the certificate authority.')
sysCertOrderManagerInternalProxy = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 15, 6, 2, 1, 7), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCertOrderManagerInternalProxy.setStatus('current')
if mibBuilder.loadTexts: sysCertOrderManagerInternalProxy.setDescription('Internal proxy for reaching the CA.')
sysCertOrderManagerOrderInformation = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 15, 6, 2, 1, 8), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCertOrderManagerOrderInformation.setStatus('current')
if mibBuilder.loadTexts: sysCertOrderManagerOrderInformation.setDescription('CA Specific order information.')
sysCertOrderManagerLoginName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 15, 6, 2, 1, 9), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCertOrderManagerLoginName.setStatus('current')
if mibBuilder.loadTexts: sysCertOrderManagerLoginName.setDescription('Login name for the CA account.')
sysCertOrderManagerClientKey = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 15, 6, 2, 1, 10), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCertOrderManagerClientKey.setStatus('current')
if mibBuilder.loadTexts: sysCertOrderManagerClientKey.setDescription('Client authentication key for connecting to CA server.')
sysCertOrderManagerClientCert = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 15, 6, 2, 1, 11), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCertOrderManagerClientCert.setStatus('current')
if mibBuilder.loadTexts: sysCertOrderManagerClientCert.setDescription('Client authentication certificate for connecting to CA server.')
sysCertOrderManagerCaCert = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 15, 6, 2, 1, 12), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCertOrderManagerCaCert.setStatus('current')
if mibBuilder.loadTexts: sysCertOrderManagerCaCert.setDescription('CA certificate chain for validation.')
sysCertOrderManagerStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 15, 7, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysCertOrderManagerStatResetStats.setStatus('current')
if mibBuilder.loadTexts: sysCertOrderManagerStatResetStats.setDescription('The action to reset resettable statistics data in sysCertOrderManagerStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
sysCertOrderManagerStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 15, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCertOrderManagerStatNumber.setStatus('current')
if mibBuilder.loadTexts: sysCertOrderManagerStatNumber.setDescription('The number of sysCertOrderManagerStat entries in the table.')
sysCertOrderManagerStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 1, 15, 7, 3), )
if mibBuilder.loadTexts: sysCertOrderManagerStatTable.setStatus('current')
if mibBuilder.loadTexts: sysCertOrderManagerStatTable.setDescription('A table containing certificate order manager configuration statistics.')
sysCertOrderManagerStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 1, 15, 7, 3, 1), ).setIndexNames((0, "F5-BIGIP-SYSTEM-MIB", "sysCertOrderManagerStatName"))
if mibBuilder.loadTexts: sysCertOrderManagerStatEntry.setStatus('current')
if mibBuilder.loadTexts: sysCertOrderManagerStatEntry.setDescription('Columns in the sysCertOrderManagerStat Table')
sysCertOrderManagerStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 15, 7, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCertOrderManagerStatName.setStatus('current')
if mibBuilder.loadTexts: sysCertOrderManagerStatName.setDescription('The name of certficate order manager.')
sysCertOrderManagerStatTotalOrders = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 15, 7, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCertOrderManagerStatTotalOrders.setStatus('current')
if mibBuilder.loadTexts: sysCertOrderManagerStatTotalOrders.setDescription('Total number of orders.')
sysCertOrderManagerStatApproved = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 15, 7, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCertOrderManagerStatApproved.setStatus('current')
if mibBuilder.loadTexts: sysCertOrderManagerStatApproved.setDescription('The number of approved orders.')
sysCertOrderManagerStatPending = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 15, 7, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCertOrderManagerStatPending.setStatus('current')
if mibBuilder.loadTexts: sysCertOrderManagerStatPending.setDescription('The number of pending orders.')
sysCertOrderManagerStatRejected = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 15, 7, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCertOrderManagerStatRejected.setStatus('current')
if mibBuilder.loadTexts: sysCertOrderManagerStatRejected.setDescription('The number of rejected orders.')
sysCertOrderManagerStatCanceled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 15, 7, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCertOrderManagerStatCanceled.setStatus('current')
if mibBuilder.loadTexts: sysCertOrderManagerStatCanceled.setDescription('The number of canceled orders.')
sysCertOrderManagerStatConnectionErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 15, 7, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCertOrderManagerStatConnectionErrors.setStatus('current')
if mibBuilder.loadTexts: sysCertOrderManagerStatConnectionErrors.setDescription('The number of connection errors.')
sysCertOrderManagerStatInternalErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 15, 7, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCertOrderManagerStatInternalErrors.setStatus('current')
if mibBuilder.loadTexts: sysCertOrderManagerStatInternalErrors.setDescription('The number of internal errors.')
sysCertOrderManagerStatOtherErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 15, 7, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCertOrderManagerStatOtherErrors.setStatus('current')
if mibBuilder.loadTexts: sysCertOrderManagerStatOtherErrors.setDescription('The number of other errors.')
sysCertOrderManagerStatCertsCreated = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 15, 7, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCertOrderManagerStatCertsCreated.setStatus('current')
if mibBuilder.loadTexts: sysCertOrderManagerStatCertsCreated.setDescription('The number of certificates created.')
sysCertOrderManagerStatCertsRenewed = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 15, 7, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCertOrderManagerStatCertsRenewed.setStatus('current')
if mibBuilder.loadTexts: sysCertOrderManagerStatCertsRenewed.setDescription('The number of certificates renewed.')
sysCertOrderManagerStatCertsAutoRenewed = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 15, 7, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCertOrderManagerStatCertsAutoRenewed.setStatus('current')
if mibBuilder.loadTexts: sysCertOrderManagerStatCertsAutoRenewed.setDescription('The number of certificates auto renewed.')
sysCertOrderManagerStatCertsRevoked = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 15, 7, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCertOrderManagerStatCertsRevoked.setStatus('current')
if mibBuilder.loadTexts: sysCertOrderManagerStatCertsRevoked.setDescription('The number of certificates revoked.')
sysJoinCertOrderManagerNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 15, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysJoinCertOrderManagerNumber.setStatus('current')
if mibBuilder.loadTexts: sysJoinCertOrderManagerNumber.setDescription('The number of sysJoinCertOrderManager entries in the table.')
sysJoinCertOrderManagerTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 1, 15, 8, 2), )
if mibBuilder.loadTexts: sysJoinCertOrderManagerTable.setStatus('current')
if mibBuilder.loadTexts: sysJoinCertOrderManagerTable.setDescription('A table containing association between key and certificate order manager .')
sysJoinCertOrderManagerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 1, 15, 8, 2, 1), ).setIndexNames((0, "F5-BIGIP-SYSTEM-MIB", "sysJoinCertOrderManagerKeyName"))
if mibBuilder.loadTexts: sysJoinCertOrderManagerEntry.setStatus('current')
if mibBuilder.loadTexts: sysJoinCertOrderManagerEntry.setDescription('Columns in the sysJoinCertOrderManager Table')
sysJoinCertOrderManagerKeyName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 15, 8, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysJoinCertOrderManagerKeyName.setStatus('current')
if mibBuilder.loadTexts: sysJoinCertOrderManagerKeyName.setDescription('The key certificate order manager name.')
sysJoinCertOrderManagerCertOrderManager = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 15, 8, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysJoinCertOrderManagerCertOrderManager.setStatus('current')
if mibBuilder.loadTexts: sysJoinCertOrderManagerCertOrderManager.setDescription('The certificate order manager name.')
sysJoinCertOrderManagerOrderStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 15, 8, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("none", 0), ("newOrderPending", 1), ("renewOrderPending", 2), ("autoRenewOrderPending", 3), ("replaceOrderPending", 4), ("revokeOrderPending", 5), ("cancelOrderPending", 6), ("newOrderApproved", 7), ("renewOrderApproved", 8), ("autoRenewOrderApproved", 9), ("replaceOrderApproved", 10), ("revokeOrderApproved", 11), ("cancelOrderApproved", 12), ("newOrderRejected", 13), ("renewOrderRejected", 14), ("autoRenewOrderRejected", 15), ("replaceOrderRejected", 16), ("revokeOrderRejected", 17), ("cancelOrderRejected", 18)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysJoinCertOrderManagerOrderStatus.setStatus('current')
if mibBuilder.loadTexts: sysJoinCertOrderManagerOrderStatus.setDescription('The certificate order status.')
sysJoinCertOrderManagerOrderType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 15, 8, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 0), ("new", 1), ("renew", 2), ("autoRenew", 3), ("replace", 4), ("revoke", 5), ("cancel", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysJoinCertOrderManagerOrderType.setStatus('current')
if mibBuilder.loadTexts: sysJoinCertOrderManagerOrderType.setDescription('The certificate order type.')
sysJoinCertOrderManagerDownloadCert = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 15, 8, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysJoinCertOrderManagerDownloadCert.setStatus('current')
if mibBuilder.loadTexts: sysJoinCertOrderManagerDownloadCert.setDescription('Download approved certificate from CA account.')
sysJoinCertOrderManagerOrderId = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 15, 8, 2, 1, 6), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysJoinCertOrderManagerOrderId.setStatus('current')
if mibBuilder.loadTexts: sysJoinCertOrderManagerOrderId.setDescription('The certificate order id provided by CA.')
sysJoinCertOrderManagerOrderResponse = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 15, 8, 2, 1, 7), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysJoinCertOrderManagerOrderResponse.setStatus('current')
if mibBuilder.loadTexts: sysJoinCertOrderManagerOrderResponse.setDescription('The certificate order response from CA.')
sysJoinCertOrderManagerStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 15, 9, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysJoinCertOrderManagerStatResetStats.setStatus('current')
if mibBuilder.loadTexts: sysJoinCertOrderManagerStatResetStats.setDescription('The action to reset resettable statistics data in sysJoinCertOrderManagerStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
sysJoinCertOrderManagerStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 15, 9, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysJoinCertOrderManagerStatNumber.setStatus('current')
if mibBuilder.loadTexts: sysJoinCertOrderManagerStatNumber.setDescription('The number of sysJoinCertOrderManagerStat entries in the table.')
sysJoinCertOrderManagerStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 1, 15, 9, 3), )
if mibBuilder.loadTexts: sysJoinCertOrderManagerStatTable.setStatus('current')
if mibBuilder.loadTexts: sysJoinCertOrderManagerStatTable.setDescription('A table containing certificate order statistics for the key.')
sysJoinCertOrderManagerStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 1, 15, 9, 3, 1), ).setIndexNames((0, "F5-BIGIP-SYSTEM-MIB", "sysJoinCertOrderManagerStatKeyName"))
if mibBuilder.loadTexts: sysJoinCertOrderManagerStatEntry.setStatus('current')
if mibBuilder.loadTexts: sysJoinCertOrderManagerStatEntry.setDescription('Columns in the sysJoinCertOrderManagerStat Table')
sysJoinCertOrderManagerStatKeyName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 15, 9, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysJoinCertOrderManagerStatKeyName.setStatus('current')
if mibBuilder.loadTexts: sysJoinCertOrderManagerStatKeyName.setDescription('The name of the key.')
sysJoinCertOrderManagerStatCertOrderManager = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 15, 9, 3, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysJoinCertOrderManagerStatCertOrderManager.setStatus('current')
if mibBuilder.loadTexts: sysJoinCertOrderManagerStatCertOrderManager.setDescription('The name certificate order manager.')
sysJoinCertOrderManagerStatCertIssued = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 15, 9, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysJoinCertOrderManagerStatCertIssued.setStatus('current')
if mibBuilder.loadTexts: sysJoinCertOrderManagerStatCertIssued.setDescription('Total number of certificate issued.')
sysJoinCertOrderManagerStatRejectedReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 15, 9, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysJoinCertOrderManagerStatRejectedReqs.setStatus('current')
if mibBuilder.loadTexts: sysJoinCertOrderManagerStatRejectedReqs.setDescription('The number of rejected orders.')
sysJoinCertOrderManagerStatCancelledReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 15, 9, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysJoinCertOrderManagerStatCancelledReqs.setStatus('current')
if mibBuilder.loadTexts: sysJoinCertOrderManagerStatCancelledReqs.setDescription('The number of canceled orders.')
sysJoinCertOrderManagerStatCaPollReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 15, 9, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysJoinCertOrderManagerStatCaPollReqs.setStatus('current')
if mibBuilder.loadTexts: sysJoinCertOrderManagerStatCaPollReqs.setDescription('The number of times CA was checked for order status.')
sysJoinCertOrderManagerStatConnErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 15, 9, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysJoinCertOrderManagerStatConnErrors.setStatus('current')
if mibBuilder.loadTexts: sysJoinCertOrderManagerStatConnErrors.setDescription('The number of connection errors.')
sysJoinCertOrderManagerStatOtherErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 15, 9, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysJoinCertOrderManagerStatOtherErrors.setStatus('current')
if mibBuilder.loadTexts: sysJoinCertOrderManagerStatOtherErrors.setDescription('The number of other errors.')
sysFwNatDynamicPoolStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 39, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysFwNatDynamicPoolStatResetStats.setStatus('current')
if mibBuilder.loadTexts: sysFwNatDynamicPoolStatResetStats.setDescription('The action to reset resettable statistics data in sysGlobalFwNatDynamicPoolStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
sysFwNatDynamicPoolStatLsnTranslationRequests = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 39, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFwNatDynamicPoolStatLsnTranslationRequests.setStatus('current')
if mibBuilder.loadTexts: sysFwNatDynamicPoolStatLsnTranslationRequests.setDescription('The number of translation requests.')
sysFwNatDynamicPoolStatLsnHairpinConnectionRequests = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 39, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFwNatDynamicPoolStatLsnHairpinConnectionRequests.setStatus('current')
if mibBuilder.loadTexts: sysFwNatDynamicPoolStatLsnHairpinConnectionRequests.setDescription('The number of hairpin connection requests.')
sysFwNatDynamicPoolStatLsnActiveTranslations = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 39, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFwNatDynamicPoolStatLsnActiveTranslations.setStatus('current')
if mibBuilder.loadTexts: sysFwNatDynamicPoolStatLsnActiveTranslations.setDescription('The number of active translations.')
sysFwNatDynamicPoolStatLsnActiveHairpinConnections = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 39, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFwNatDynamicPoolStatLsnActiveHairpinConnections.setStatus('current')
if mibBuilder.loadTexts: sysFwNatDynamicPoolStatLsnActiveHairpinConnections.setDescription('The number of active hairpin connections.')
sysFwNatDynamicPoolStatLsnTranslationRequestFailures = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 39, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFwNatDynamicPoolStatLsnTranslationRequestFailures.setStatus('current')
if mibBuilder.loadTexts: sysFwNatDynamicPoolStatLsnTranslationRequestFailures.setDescription('The number of translation request failures.')
sysFwNatDynamicPoolStatLsnPersistenceMappingFailures = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 39, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFwNatDynamicPoolStatLsnPersistenceMappingFailures.setStatus('current')
if mibBuilder.loadTexts: sysFwNatDynamicPoolStatLsnPersistenceMappingFailures.setDescription('The number of persistence mapping failures.')
sysFwNatDynamicPoolStatLsnHairpinConnectionFailures = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 39, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFwNatDynamicPoolStatLsnHairpinConnectionFailures.setStatus('current')
if mibBuilder.loadTexts: sysFwNatDynamicPoolStatLsnHairpinConnectionFailures.setDescription('The number of hairpin connection failures.')
sysFwNatDynamicPoolStatLsnBackupPoolTranslations = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 39, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFwNatDynamicPoolStatLsnBackupPoolTranslations.setStatus('current')
if mibBuilder.loadTexts: sysFwNatDynamicPoolStatLsnBackupPoolTranslations.setDescription('The number of backup pool translations.')
sysFwNatDynamicPoolStatLsnActiveEndPoints = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 39, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFwNatDynamicPoolStatLsnActiveEndPoints.setStatus('current')
if mibBuilder.loadTexts: sysFwNatDynamicPoolStatLsnActiveEndPoints.setDescription('The number of active end points.')
sysFwNatDynamicPoolStatLsnEndPoints = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 39, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFwNatDynamicPoolStatLsnEndPoints.setStatus('current')
if mibBuilder.loadTexts: sysFwNatDynamicPoolStatLsnEndPoints.setDescription('The number of end points.')
sysFwNatDynamicPoolStatLsnEndPointsHighValue = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 39, 12), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFwNatDynamicPoolStatLsnEndPointsHighValue.setStatus('current')
if mibBuilder.loadTexts: sysFwNatDynamicPoolStatLsnEndPointsHighValue.setDescription('The end points high value.')
sysFwNatDynamicPoolStatPbaActivePortBlocks = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 39, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFwNatDynamicPoolStatPbaActivePortBlocks.setStatus('current')
if mibBuilder.loadTexts: sysFwNatDynamicPoolStatPbaActivePortBlocks.setDescription('The number of active port blocks.')
sysFwNatDynamicPoolStatPbaActiveClientsReachedLimit = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 39, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFwNatDynamicPoolStatPbaActiveClientsReachedLimit.setStatus('current')
if mibBuilder.loadTexts: sysFwNatDynamicPoolStatPbaActiveClientsReachedLimit.setDescription('The number of active clients reached limit.')
sysFwNatDynamicPoolStatPbaActiveZombiePortBlocks = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 39, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFwNatDynamicPoolStatPbaActiveZombiePortBlocks.setStatus('current')
if mibBuilder.loadTexts: sysFwNatDynamicPoolStatPbaActiveZombiePortBlocks.setDescription('The number of active zombie port blocks.')
sysFwNatDynamicPoolStatPbaPortBlockAllocations = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 39, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFwNatDynamicPoolStatPbaPortBlockAllocations.setStatus('current')
if mibBuilder.loadTexts: sysFwNatDynamicPoolStatPbaPortBlockAllocations.setDescription('The number of port block allocations.')
sysFwNatDynamicPoolStatPbaPortBlockAllocationFailures = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 39, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFwNatDynamicPoolStatPbaPortBlockAllocationFailures.setStatus('current')
if mibBuilder.loadTexts: sysFwNatDynamicPoolStatPbaPortBlockAllocationFailures.setDescription('The number of port block allocation failures.')
sysFwNatDynamicPoolStatPbaPortBlockDeallocations = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 39, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFwNatDynamicPoolStatPbaPortBlockDeallocations.setStatus('current')
if mibBuilder.loadTexts: sysFwNatDynamicPoolStatPbaPortBlockDeallocations.setDescription('The number of port block deallocations.')
sysFwNatDynamicPoolStatPbaClientsReachedLimit = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 39, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFwNatDynamicPoolStatPbaClientsReachedLimit.setStatus('current')
if mibBuilder.loadTexts: sysFwNatDynamicPoolStatPbaClientsReachedLimit.setDescription('The number of clients reached limit.')
sysFwNatDynamicPoolStatPbaZombiePortBlocksCreated = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 39, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFwNatDynamicPoolStatPbaZombiePortBlocksCreated.setStatus('current')
if mibBuilder.loadTexts: sysFwNatDynamicPoolStatPbaZombiePortBlocksCreated.setDescription('The number of zombie port blocks created.')
sysFwNatDynamicPoolStatPbaZombiePortBlocksDeleted = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 39, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFwNatDynamicPoolStatPbaZombiePortBlocksDeleted.setStatus('current')
if mibBuilder.loadTexts: sysFwNatDynamicPoolStatPbaZombiePortBlocksDeleted.setDescription('The number of zombie port blocks deleted.')
sysFwNatDynamicPoolStatPbaZombiePortBlockConnsKilled = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 39, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFwNatDynamicPoolStatPbaZombiePortBlockConnsKilled.setStatus('current')
if mibBuilder.loadTexts: sysFwNatDynamicPoolStatPbaZombiePortBlockConnsKilled.setDescription('The number of zombie port block connections killed.')
sysFwNatDynamicPoolStatPcpAnnounceRequests = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 39, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFwNatDynamicPoolStatPcpAnnounceRequests.setStatus('current')
if mibBuilder.loadTexts: sysFwNatDynamicPoolStatPcpAnnounceRequests.setDescription('The number of announce requests.')
sysFwNatDynamicPoolStatPcpAnnounceResponsesUcast = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 39, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFwNatDynamicPoolStatPcpAnnounceResponsesUcast.setStatus('current')
if mibBuilder.loadTexts: sysFwNatDynamicPoolStatPcpAnnounceResponsesUcast.setDescription('The number of announce responses ucast.')
sysFwNatDynamicPoolStatPcpAnnounceResponsesMulticast = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 39, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFwNatDynamicPoolStatPcpAnnounceResponsesMulticast.setStatus('current')
if mibBuilder.loadTexts: sysFwNatDynamicPoolStatPcpAnnounceResponsesMulticast.setDescription('The number of announce responses multicast.')
sysFwNatDynamicPoolStatPcpMapRequests = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 39, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFwNatDynamicPoolStatPcpMapRequests.setStatus('current')
if mibBuilder.loadTexts: sysFwNatDynamicPoolStatPcpMapRequests.setDescription('The number of map requests.')
sysFwNatDynamicPoolStatPcpMapResponses = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 39, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFwNatDynamicPoolStatPcpMapResponses.setStatus('current')
if mibBuilder.loadTexts: sysFwNatDynamicPoolStatPcpMapResponses.setDescription('The number of map responses.')
sysFwNatDynamicPoolStatPcpPeerRequests = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 39, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFwNatDynamicPoolStatPcpPeerRequests.setStatus('current')
if mibBuilder.loadTexts: sysFwNatDynamicPoolStatPcpPeerRequests.setDescription('The number of peer requests.')
sysFwNatDynamicPoolStatPcpPeerResponses = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 39, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFwNatDynamicPoolStatPcpPeerResponses.setStatus('current')
if mibBuilder.loadTexts: sysFwNatDynamicPoolStatPcpPeerResponses.setDescription('The number of peer responses.')
sysFwNatDynamicPoolStatPcpErrorsInvalidRequest = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 39, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFwNatDynamicPoolStatPcpErrorsInvalidRequest.setStatus('current')
if mibBuilder.loadTexts: sysFwNatDynamicPoolStatPcpErrorsInvalidRequest.setDescription('The number of errors: invalid request.')
sysFwNatDynamicPoolStatPcpErrorsUnavailableResource = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 39, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFwNatDynamicPoolStatPcpErrorsUnavailableResource.setStatus('current')
if mibBuilder.loadTexts: sysFwNatDynamicPoolStatPcpErrorsUnavailableResource.setDescription('The number of errors: unavailable resource.')
sysFwNatDynamicPoolStatPcpErrorsNotAuthorized = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 39, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFwNatDynamicPoolStatPcpErrorsNotAuthorized.setStatus('current')
if mibBuilder.loadTexts: sysFwNatDynamicPoolStatPcpErrorsNotAuthorized.setDescription('The number of errors: not authorized.')
sysFwNatDynamicPoolStatPcpErrorsOther = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 39, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFwNatDynamicPoolStatPcpErrorsOther.setStatus('current')
if mibBuilder.loadTexts: sysFwNatDynamicPoolStatPcpErrorsOther.setDescription('The number of errors: other.')
sysFwNatDynamicPoolFailureStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 40, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysFwNatDynamicPoolFailureStatResetStats.setStatus('current')
if mibBuilder.loadTexts: sysFwNatDynamicPoolFailureStatResetStats.setDescription('The action to reset resettable statistics data in sysGlobalFwNatDynamicPoolFailureStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
sysFwNatDynamicPoolFailureStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 40, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFwNatDynamicPoolFailureStatNumber.setStatus('current')
if mibBuilder.loadTexts: sysFwNatDynamicPoolFailureStatNumber.setDescription('The number of sysGlobalFwNatDynamicPoolFailureStat entries in the table.')
sysFwNatDynamicPoolFailureStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 40, 3), )
if mibBuilder.loadTexts: sysFwNatDynamicPoolFailureStatTable.setStatus('current')
if mibBuilder.loadTexts: sysFwNatDynamicPoolFailureStatTable.setDescription("The system's global Dynamic AFM NAT Translation Pool failure statistics information. \n\t\tThese are the roll-ups of all the individual Dynamic AFM NAT Translation Pool failures' \n\t\tstatistics.")
sysFwNatDynamicPoolFailureStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 40, 3, 1), ).setIndexNames((0, "F5-BIGIP-SYSTEM-MIB", "sysFwNatDynamicPoolFailureStatFailureCause"))
if mibBuilder.loadTexts: sysFwNatDynamicPoolFailureStatEntry.setStatus('current')
if mibBuilder.loadTexts: sysFwNatDynamicPoolFailureStatEntry.setDescription('Columns in the sysFwNatDynamicPoolFailureStat Table')
sysFwNatDynamicPoolFailureStatFailureCause = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 40, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFwNatDynamicPoolFailureStatFailureCause.setStatus('current')
if mibBuilder.loadTexts: sysFwNatDynamicPoolFailureStatFailureCause.setDescription('The name of the failure cause.')
sysFwNatDynamicPoolFailureStatFailureCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 40, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFwNatDynamicPoolFailureStatFailureCount.setStatus('current')
if mibBuilder.loadTexts: sysFwNatDynamicPoolFailureStatFailureCount.setDescription('Total failures due to the cause.')
sysFwNatStaticDestinationTranslationPoolStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 42, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysFwNatStaticDestinationTranslationPoolStatResetStats.setStatus('current')
if mibBuilder.loadTexts: sysFwNatStaticDestinationTranslationPoolStatResetStats.setDescription('The action to reset resettable statistics data in sysGlobalFwNatStaticDestinationTranslationPoolStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
sysFwNatStaticDestinationTranslationPoolStatTransReqs = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 42, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFwNatStaticDestinationTranslationPoolStatTransReqs.setStatus('current')
if mibBuilder.loadTexts: sysFwNatStaticDestinationTranslationPoolStatTransReqs.setDescription('The number of translation requests.')
sysFwNatStaticDestinationTranslationPoolStatTransReqFails = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 42, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFwNatStaticDestinationTranslationPoolStatTransReqFails.setStatus('current')
if mibBuilder.loadTexts: sysFwNatStaticDestinationTranslationPoolStatTransReqFails.setDescription('The number of translation request failures.')
sysFwNatStaticDestinationTranslationPoolStatBidirReqs = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 42, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFwNatStaticDestinationTranslationPoolStatBidirReqs.setStatus('current')
if mibBuilder.loadTexts: sysFwNatStaticDestinationTranslationPoolStatBidirReqs.setDescription('The number of bidirectional requests.')
sysFwNatStaticDestinationTranslationPoolStatBidirReqFails = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 42, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFwNatStaticDestinationTranslationPoolStatBidirReqFails.setStatus('current')
if mibBuilder.loadTexts: sysFwNatStaticDestinationTranslationPoolStatBidirReqFails.setDescription('The number of bidirectional request failures.')
sysFwNatStaticDestinationTranslationPoolStatErrAddrTrans = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 42, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFwNatStaticDestinationTranslationPoolStatErrAddrTrans.setStatus('current')
if mibBuilder.loadTexts: sysFwNatStaticDestinationTranslationPoolStatErrAddrTrans.setDescription('The number of err address translation events.')
sysFwNatStaticDestinationTranslationPoolStatErrPortTrans = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 42, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFwNatStaticDestinationTranslationPoolStatErrPortTrans.setStatus('current')
if mibBuilder.loadTexts: sysFwNatStaticDestinationTranslationPoolStatErrPortTrans.setDescription('The number of err port translation events.')
sysFwNatStaticDestinationTranslationPoolStatErrFlowCollis = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 42, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFwNatStaticDestinationTranslationPoolStatErrFlowCollis.setStatus('current')
if mibBuilder.loadTexts: sysFwNatStaticDestinationTranslationPoolStatErrFlowCollis.setDescription('The number of err flow collision events.')
sysFwNatStaticDestinationTranslationPoolStatErrCfgMismtch = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 42, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFwNatStaticDestinationTranslationPoolStatErrCfgMismtch.setStatus('current')
if mibBuilder.loadTexts: sysFwNatStaticDestinationTranslationPoolStatErrCfgMismtch.setDescription('The number of err config mismatch events.')
sysFwNatStaticDestinationTranslationPoolStatErrMemory = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 42, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFwNatStaticDestinationTranslationPoolStatErrMemory.setStatus('current')
if mibBuilder.loadTexts: sysFwNatStaticDestinationTranslationPoolStatErrMemory.setDescription('The number of err memory events.')
sysFwNatStaticDestinationTranslationPoolStatSubscrIdLkps = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 42, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFwNatStaticDestinationTranslationPoolStatSubscrIdLkps.setStatus('current')
if mibBuilder.loadTexts: sysFwNatStaticDestinationTranslationPoolStatSubscrIdLkps.setDescription('The number of subscriber id lookups.')
sysFwNatStaticDestinationTranslationPoolStatSubscrIdNotFd = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 42, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFwNatStaticDestinationTranslationPoolStatSubscrIdNotFd.setStatus('current')
if mibBuilder.loadTexts: sysFwNatStaticDestinationTranslationPoolStatSubscrIdNotFd.setDescription('The number of subscriber id not found events.')
sysFwNatStaticDestinationTranslationPoolStatSubscrIdErrs = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 42, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFwNatStaticDestinationTranslationPoolStatSubscrIdErrs.setStatus('current')
if mibBuilder.loadTexts: sysFwNatStaticDestinationTranslationPoolStatSubscrIdErrs.setDescription('The number of subscriber id errors.')
sysFwNatStaticSourceTranslationPoolStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 41, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysFwNatStaticSourceTranslationPoolStatResetStats.setStatus('current')
if mibBuilder.loadTexts: sysFwNatStaticSourceTranslationPoolStatResetStats.setDescription('The action to reset resettable statistics data in sysGlobalFwNatStaticSourceTranslationPoolStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
sysFwNatStaticSourceTranslationPoolStatTransReqs = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 41, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFwNatStaticSourceTranslationPoolStatTransReqs.setStatus('current')
if mibBuilder.loadTexts: sysFwNatStaticSourceTranslationPoolStatTransReqs.setDescription('The number of translation requests.')
sysFwNatStaticSourceTranslationPoolStatTransReqFails = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 41, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFwNatStaticSourceTranslationPoolStatTransReqFails.setStatus('current')
if mibBuilder.loadTexts: sysFwNatStaticSourceTranslationPoolStatTransReqFails.setDescription('The number of translation request failures.')
sysFwNatStaticSourceTranslationPoolStatBidirReqs = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 41, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFwNatStaticSourceTranslationPoolStatBidirReqs.setStatus('current')
if mibBuilder.loadTexts: sysFwNatStaticSourceTranslationPoolStatBidirReqs.setDescription('The number of bidirectional requests.')
sysFwNatStaticSourceTranslationPoolStatBidirReqFails = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 41, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFwNatStaticSourceTranslationPoolStatBidirReqFails.setStatus('current')
if mibBuilder.loadTexts: sysFwNatStaticSourceTranslationPoolStatBidirReqFails.setDescription('The number of bidirectional request failures.')
sysFwNatStaticSourceTranslationPoolStatErrAddrTrans = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 41, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFwNatStaticSourceTranslationPoolStatErrAddrTrans.setStatus('current')
if mibBuilder.loadTexts: sysFwNatStaticSourceTranslationPoolStatErrAddrTrans.setDescription('The number of err address translation events.')
sysFwNatStaticSourceTranslationPoolStatErrPortTrans = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 41, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFwNatStaticSourceTranslationPoolStatErrPortTrans.setStatus('current')
if mibBuilder.loadTexts: sysFwNatStaticSourceTranslationPoolStatErrPortTrans.setDescription('The number of err port translation events.')
sysFwNatStaticSourceTranslationPoolStatErrFlowCollis = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 41, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFwNatStaticSourceTranslationPoolStatErrFlowCollis.setStatus('current')
if mibBuilder.loadTexts: sysFwNatStaticSourceTranslationPoolStatErrFlowCollis.setDescription('The number of err flow collision events.')
sysFwNatStaticSourceTranslationPoolStatErrCfgMismtch = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 41, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFwNatStaticSourceTranslationPoolStatErrCfgMismtch.setStatus('current')
if mibBuilder.loadTexts: sysFwNatStaticSourceTranslationPoolStatErrCfgMismtch.setDescription('The number of err config mismatch events.')
sysFwNatStaticSourceTranslationPoolStatErrMemory = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 41, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFwNatStaticSourceTranslationPoolStatErrMemory.setStatus('current')
if mibBuilder.loadTexts: sysFwNatStaticSourceTranslationPoolStatErrMemory.setDescription('The number of err memory events.')
sysFwNatStaticSourceTranslationPoolStatSubscrIdLkps = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 41, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFwNatStaticSourceTranslationPoolStatSubscrIdLkps.setStatus('current')
if mibBuilder.loadTexts: sysFwNatStaticSourceTranslationPoolStatSubscrIdLkps.setDescription('The number of subscriber id lookups.')
sysFwNatStaticSourceTranslationPoolStatSubscrIdNotFd = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 41, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFwNatStaticSourceTranslationPoolStatSubscrIdNotFd.setStatus('current')
if mibBuilder.loadTexts: sysFwNatStaticSourceTranslationPoolStatSubscrIdNotFd.setDescription('The number of subscriber id not found events.')
sysFwNatStaticSourceTranslationPoolStatSubscrIdErrs = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 1, 2, 41, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFwNatStaticSourceTranslationPoolStatSubscrIdErrs.setStatus('current')
if mibBuilder.loadTexts: sysFwNatStaticSourceTranslationPoolStatSubscrIdErrs.setDescription('The number of subscriber id errors.')
sysTmmPagesStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 8, 4, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTmmPagesStatResetStats.setStatus('current')
if mibBuilder.loadTexts: sysTmmPagesStatResetStats.setDescription('The action to reset resettable statistics data in sysTmmPagesStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
sysTmmPagesStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 8, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTmmPagesStatNumber.setStatus('current')
if mibBuilder.loadTexts: sysTmmPagesStatNumber.setDescription('The number of sysTmmPagesStat entries in the table.')
sysTmmPagesStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 1, 8, 4, 3), )
if mibBuilder.loadTexts: sysTmmPagesStatTable.setStatus('current')
if mibBuilder.loadTexts: sysTmmPagesStatTable.setDescription('Page memory statistics')
sysTmmPagesStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 1, 8, 4, 3, 1), ).setIndexNames((0, "F5-BIGIP-SYSTEM-MIB", "sysTmmPagesStatSlot"), (0, "F5-BIGIP-SYSTEM-MIB", "sysTmmPagesStatTmm"))
if mibBuilder.loadTexts: sysTmmPagesStatEntry.setStatus('current')
if mibBuilder.loadTexts: sysTmmPagesStatEntry.setDescription('Columns in the sysTmmPagesStat Table')
sysTmmPagesStatSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 8, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTmmPagesStatSlot.setStatus('current')
if mibBuilder.loadTexts: sysTmmPagesStatSlot.setDescription('The slot id')
sysTmmPagesStatTmm = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 8, 4, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTmmPagesStatTmm.setStatus('current')
if mibBuilder.loadTexts: sysTmmPagesStatTmm.setDescription('The ID of the TMM (Traffic Management Module) on the system.')
sysTmmPagesStatPagesUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 8, 4, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTmmPagesStatPagesUsed.setStatus('current')
if mibBuilder.loadTexts: sysTmmPagesStatPagesUsed.setDescription('The count of used memory pages within the TMM.')
sysTmmPagesStatPagesAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 8, 4, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTmmPagesStatPagesAvail.setStatus('current')
if mibBuilder.loadTexts: sysTmmPagesStatPagesAvail.setDescription('The count of available memory pages allocated for the TMM.')
sysVlanIfcStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 13, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVlanIfcStatNumber.setStatus('current')
if mibBuilder.loadTexts: sysVlanIfcStatNumber.setDescription('The number of sysVlanIfcStat entries in the table.')
sysVlanIfcStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 13, 8, 2), )
if mibBuilder.loadTexts: sysVlanIfcStatTable.setStatus('current')
if mibBuilder.loadTexts: sysVlanIfcStatTable.setDescription('Vlan stats, retrieved from TMM ifc_stat.')
sysVlanIfcStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 13, 8, 2, 1), ).setIndexNames((0, "F5-BIGIP-SYSTEM-MIB", "sysVlanIfcStatName"))
if mibBuilder.loadTexts: sysVlanIfcStatEntry.setStatus('current')
if mibBuilder.loadTexts: sysVlanIfcStatEntry.setDescription('Columns in the sysVlanIfcStat Table')
sysVlanIfcStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 13, 8, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVlanIfcStatName.setStatus('current')
if mibBuilder.loadTexts: sysVlanIfcStatName.setDescription('The name of a VLAN.')
sysVlanIfcStatInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 13, 8, 2, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVlanIfcStatInDiscards.setStatus('current')
if mibBuilder.loadTexts: sysVlanIfcStatInDiscards.setDescription('The number of incoming packets discarded.')
sysVlanIfcStatInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 13, 8, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVlanIfcStatInErrors.setStatus('current')
if mibBuilder.loadTexts: sysVlanIfcStatInErrors.setDescription('The number of incoming error packets.')
sysVlanIfcStatInUnknownProtos = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 13, 8, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVlanIfcStatInUnknownProtos.setStatus('current')
if mibBuilder.loadTexts: sysVlanIfcStatInUnknownProtos.setDescription('The number of incoming unknown proto packets.')
sysVlanIfcStatOutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 13, 8, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVlanIfcStatOutDiscards.setStatus('current')
if mibBuilder.loadTexts: sysVlanIfcStatOutDiscards.setDescription('The number of outgoing packets discarded.')
sysVlanIfcStatOutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 13, 8, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVlanIfcStatOutErrors.setStatus('current')
if mibBuilder.loadTexts: sysVlanIfcStatOutErrors.setDescription('The number of outgoing error packets.')
sysVlanIfcStatHcInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 13, 8, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVlanIfcStatHcInOctets.setStatus('current')
if mibBuilder.loadTexts: sysVlanIfcStatHcInOctets.setDescription('The total number of incoming octets.')
sysVlanIfcStatHcInUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 13, 8, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVlanIfcStatHcInUcastPkts.setStatus('current')
if mibBuilder.loadTexts: sysVlanIfcStatHcInUcastPkts.setDescription('The number of incoming unicast packets.')
sysVlanIfcStatHcInMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 13, 8, 2, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVlanIfcStatHcInMulticastPkts.setStatus('current')
if mibBuilder.loadTexts: sysVlanIfcStatHcInMulticastPkts.setDescription('The number of incoming multicast packets.')
sysVlanIfcStatHcInBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 13, 8, 2, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVlanIfcStatHcInBroadcastPkts.setStatus('current')
if mibBuilder.loadTexts: sysVlanIfcStatHcInBroadcastPkts.setDescription('The number of incoming broadcast packets.')
sysVlanIfcStatHcOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 13, 8, 2, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVlanIfcStatHcOutOctets.setStatus('current')
if mibBuilder.loadTexts: sysVlanIfcStatHcOutOctets.setDescription('The total number of outgoing octets.')
sysVlanIfcStatHcOutUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 13, 8, 2, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVlanIfcStatHcOutUcastPkts.setStatus('current')
if mibBuilder.loadTexts: sysVlanIfcStatHcOutUcastPkts.setDescription('The number of outgoing unicast packets.')
sysVlanIfcStatHcOutMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 13, 8, 2, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVlanIfcStatHcOutMulticastPkts.setStatus('current')
if mibBuilder.loadTexts: sysVlanIfcStatHcOutMulticastPkts.setDescription('The number of outgoing multicast packets.')
sysVlanIfcStatHcOutBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 13, 8, 2, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVlanIfcStatHcOutBroadcastPkts.setStatus('current')
if mibBuilder.loadTexts: sysVlanIfcStatHcOutBroadcastPkts.setDescription('The number of outgoing broadcast packets.')
sysVlanIfcStatPvaInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 13, 8, 2, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVlanIfcStatPvaInPkts.setStatus('current')
if mibBuilder.loadTexts: sysVlanIfcStatPvaInPkts.setDescription('The number of incoming PVA packets.')
sysVlanIfcStatPvaInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 13, 8, 2, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVlanIfcStatPvaInOctets.setStatus('current')
if mibBuilder.loadTexts: sysVlanIfcStatPvaInOctets.setDescription('The number of incoming PVA octets.')
sysVlanIfcStatPvaOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 13, 8, 2, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVlanIfcStatPvaOutPkts.setStatus('current')
if mibBuilder.loadTexts: sysVlanIfcStatPvaOutPkts.setDescription('The number of outgoing PVA packets.')
sysVlanIfcStatPvaOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 1, 2, 13, 8, 2, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVlanIfcStatPvaOutOctets.setStatus('current')
if mibBuilder.loadTexts: sysVlanIfcStatPvaOutOctets.setDescription('The number of outgoing PVA octets.')
bigipSystemCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 3375, 2, 5, 1, 1)).setObjects(("F5-BIGIP-SYSTEM-MIB", "bigipSystemGroups"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bigipSystemCompliance = bigipSystemCompliance.setStatus('current')
if mibBuilder.loadTexts: bigipSystemCompliance.setDescription('This specifies the objects that are required to claim \n                 compliance to F5 Traffic Management System.')
bigipSystemGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1))
sysAttrGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 1)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysAttrArpMaxEntries"), ("F5-BIGIP-SYSTEM-MIB", "sysAttrArpAddReciprocal"), ("F5-BIGIP-SYSTEM-MIB", "sysAttrArpTimeout"), ("F5-BIGIP-SYSTEM-MIB", "sysAttrArpRetries"), ("F5-BIGIP-SYSTEM-MIB", "sysAttrBootQuiet"), ("F5-BIGIP-SYSTEM-MIB", "sysAttrConfigsyncState"), ("F5-BIGIP-SYSTEM-MIB", "sysAttrConnAdaptiveReaperHiwat"), ("F5-BIGIP-SYSTEM-MIB", "sysAttrConnAdaptiveReaperLowat"), ("F5-BIGIP-SYSTEM-MIB", "sysAttrConnAutoLasthop"), ("F5-BIGIP-SYSTEM-MIB", "sysAttrFailoverActiveMode"), ("F5-BIGIP-SYSTEM-MIB", "sysAttrFailoverForceActive"), ("F5-BIGIP-SYSTEM-MIB", "sysAttrFailoverForceStandby"), ("F5-BIGIP-SYSTEM-MIB", "sysAttrFailoverIsRedundant"), ("F5-BIGIP-SYSTEM-MIB", "sysAttrFailoverMemoryRestartPercent"), ("F5-BIGIP-SYSTEM-MIB", "sysAttrFailoverNetwork"), ("F5-BIGIP-SYSTEM-MIB", "sysAttrFailoverStandbyLinkDownTime"), ("F5-BIGIP-SYSTEM-MIB", "sysAttrFailoverSslhardware"), ("F5-BIGIP-SYSTEM-MIB", "sysAttrFailoverSslhardwareAction"), ("F5-BIGIP-SYSTEM-MIB", "sysAttrFailoverUnitMask"), ("F5-BIGIP-SYSTEM-MIB", "sysAttrFailoverUnitId"), ("F5-BIGIP-SYSTEM-MIB", "sysAttrModeMaint"), ("F5-BIGIP-SYSTEM-MIB", "sysAttrPacketFilter"), ("F5-BIGIP-SYSTEM-MIB", "sysAttrPacketFilterAllowImportantIcmp"), ("F5-BIGIP-SYSTEM-MIB", "sysAttrPacketFilterEstablished"), ("F5-BIGIP-SYSTEM-MIB", "sysAttrPacketFilterDefaultAction"), ("F5-BIGIP-SYSTEM-MIB", "sysAttrPacketFilterSendIcmpErrors"), ("F5-BIGIP-SYSTEM-MIB", "sysAttrPvaAcceleration"), ("F5-BIGIP-SYSTEM-MIB", "sysAttrVlanFDBTimeout"), ("F5-BIGIP-SYSTEM-MIB", "sysAttrWatchdogState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysAttrGroup = sysAttrGroup.setStatus('current')
if mibBuilder.loadTexts: sysAttrGroup.setDescription('A collection of objects of sysGlobalAttr MIB.')
sysStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 2)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysStatResetStats"), ("F5-BIGIP-SYSTEM-MIB", "sysStatClientPktsIn"), ("F5-BIGIP-SYSTEM-MIB", "sysStatClientBytesIn"), ("F5-BIGIP-SYSTEM-MIB", "sysStatClientPktsOut"), ("F5-BIGIP-SYSTEM-MIB", "sysStatClientBytesOut"), ("F5-BIGIP-SYSTEM-MIB", "sysStatClientMaxConns"), ("F5-BIGIP-SYSTEM-MIB", "sysStatClientTotConns"), ("F5-BIGIP-SYSTEM-MIB", "sysStatClientCurConns"), ("F5-BIGIP-SYSTEM-MIB", "sysStatServerPktsIn"), ("F5-BIGIP-SYSTEM-MIB", "sysStatServerBytesIn"), ("F5-BIGIP-SYSTEM-MIB", "sysStatServerPktsOut"), ("F5-BIGIP-SYSTEM-MIB", "sysStatServerBytesOut"), ("F5-BIGIP-SYSTEM-MIB", "sysStatServerMaxConns"), ("F5-BIGIP-SYSTEM-MIB", "sysStatServerTotConns"), ("F5-BIGIP-SYSTEM-MIB", "sysStatServerCurConns"), ("F5-BIGIP-SYSTEM-MIB", "sysStatPvaClientPktsIn"), ("F5-BIGIP-SYSTEM-MIB", "sysStatPvaClientBytesIn"), ("F5-BIGIP-SYSTEM-MIB", "sysStatPvaClientPktsOut"), ("F5-BIGIP-SYSTEM-MIB", "sysStatPvaClientBytesOut"), ("F5-BIGIP-SYSTEM-MIB", "sysStatPvaClientMaxConns"), ("F5-BIGIP-SYSTEM-MIB", "sysStatPvaClientTotConns"), ("F5-BIGIP-SYSTEM-MIB", "sysStatPvaClientCurConns"), ("F5-BIGIP-SYSTEM-MIB", "sysStatPvaServerPktsIn"), ("F5-BIGIP-SYSTEM-MIB", "sysStatPvaServerBytesIn"), ("F5-BIGIP-SYSTEM-MIB", "sysStatPvaServerPktsOut"), ("F5-BIGIP-SYSTEM-MIB", "sysStatPvaServerBytesOut"), ("F5-BIGIP-SYSTEM-MIB", "sysStatPvaServerMaxConns"), ("F5-BIGIP-SYSTEM-MIB", "sysStatPvaServerTotConns"), ("F5-BIGIP-SYSTEM-MIB", "sysStatPvaServerCurConns"), ("F5-BIGIP-SYSTEM-MIB", "sysStatTotPvaAssistConn"), ("F5-BIGIP-SYSTEM-MIB", "sysStatCurrPvaAssistConn"), ("F5-BIGIP-SYSTEM-MIB", "sysStatMaintenanceModeDeny"), ("F5-BIGIP-SYSTEM-MIB", "sysStatMaxConnVirtualPathDeny"), ("F5-BIGIP-SYSTEM-MIB", "sysStatVirtualServerNonSynDeny"), ("F5-BIGIP-SYSTEM-MIB", "sysStatNoHandlerDeny"), ("F5-BIGIP-SYSTEM-MIB", "sysStatLicenseDeny"), ("F5-BIGIP-SYSTEM-MIB", "sysStatConnectionMemoryErrors"), ("F5-BIGIP-SYSTEM-MIB", "sysStatCpuCount"), ("F5-BIGIP-SYSTEM-MIB", "sysStatActiveCpuCount"), ("F5-BIGIP-SYSTEM-MIB", "sysStatMultiProcessorMode"), ("F5-BIGIP-SYSTEM-MIB", "sysStatTmTotalCycles"), ("F5-BIGIP-SYSTEM-MIB", "sysStatTmIdleCycles"), ("F5-BIGIP-SYSTEM-MIB", "sysStatTmSleepCycles"), ("F5-BIGIP-SYSTEM-MIB", "sysStatMemoryTotal"), ("F5-BIGIP-SYSTEM-MIB", "sysStatMemoryUsed"), ("F5-BIGIP-SYSTEM-MIB", "sysStatDroppedPackets"), ("F5-BIGIP-SYSTEM-MIB", "sysStatIncomingPacketErrors"), ("F5-BIGIP-SYSTEM-MIB", "sysStatOutgoingPacketErrors"), ("F5-BIGIP-SYSTEM-MIB", "sysStatAuthTotSessions"), ("F5-BIGIP-SYSTEM-MIB", "sysStatAuthCurSessions"), ("F5-BIGIP-SYSTEM-MIB", "sysStatAuthMaxSessions"), ("F5-BIGIP-SYSTEM-MIB", "sysStatAuthSuccessResults"), ("F5-BIGIP-SYSTEM-MIB", "sysStatAuthFailureResults"), ("F5-BIGIP-SYSTEM-MIB", "sysStatAuthWantcredentialResults"), ("F5-BIGIP-SYSTEM-MIB", "sysStatAuthErrorResults"), ("F5-BIGIP-SYSTEM-MIB", "sysStatHttpRequests"), ("F5-BIGIP-SYSTEM-MIB", "sysStatHardSyncookieGen"), ("F5-BIGIP-SYSTEM-MIB", "sysStatHardSyncookieDet"), ("F5-BIGIP-SYSTEM-MIB", "sysStatClientPktsIn5s"), ("F5-BIGIP-SYSTEM-MIB", "sysStatClientBytesIn5s"), ("F5-BIGIP-SYSTEM-MIB", "sysStatClientPktsOut5s"), ("F5-BIGIP-SYSTEM-MIB", "sysStatClientBytesOut5s"), ("F5-BIGIP-SYSTEM-MIB", "sysStatClientMaxConns5s"), ("F5-BIGIP-SYSTEM-MIB", "sysStatClientTotConns5s"), ("F5-BIGIP-SYSTEM-MIB", "sysStatClientCurConns5s"), ("F5-BIGIP-SYSTEM-MIB", "sysStatServerPktsIn5s"), ("F5-BIGIP-SYSTEM-MIB", "sysStatServerBytesIn5s"), ("F5-BIGIP-SYSTEM-MIB", "sysStatServerPktsOut5s"), ("F5-BIGIP-SYSTEM-MIB", "sysStatServerBytesOut5s"), ("F5-BIGIP-SYSTEM-MIB", "sysStatServerMaxConns5s"), ("F5-BIGIP-SYSTEM-MIB", "sysStatServerTotConns5s"), ("F5-BIGIP-SYSTEM-MIB", "sysStatServerCurConns5s"), ("F5-BIGIP-SYSTEM-MIB", "sysStatClientPktsIn1m"), ("F5-BIGIP-SYSTEM-MIB", "sysStatClientBytesIn1m"), ("F5-BIGIP-SYSTEM-MIB", "sysStatClientPktsOut1m"), ("F5-BIGIP-SYSTEM-MIB", "sysStatClientBytesOut1m"), ("F5-BIGIP-SYSTEM-MIB", "sysStatClientMaxConns1m"), ("F5-BIGIP-SYSTEM-MIB", "sysStatClientTotConns1m"), ("F5-BIGIP-SYSTEM-MIB", "sysStatClientCurConns1m"), ("F5-BIGIP-SYSTEM-MIB", "sysStatServerPktsIn1m"), ("F5-BIGIP-SYSTEM-MIB", "sysStatServerBytesIn1m"), ("F5-BIGIP-SYSTEM-MIB", "sysStatServerPktsOut1m"), ("F5-BIGIP-SYSTEM-MIB", "sysStatServerBytesOut1m"), ("F5-BIGIP-SYSTEM-MIB", "sysStatServerMaxConns1m"), ("F5-BIGIP-SYSTEM-MIB", "sysStatServerTotConns1m"), ("F5-BIGIP-SYSTEM-MIB", "sysStatServerCurConns1m"), ("F5-BIGIP-SYSTEM-MIB", "sysStatClientPktsIn5m"), ("F5-BIGIP-SYSTEM-MIB", "sysStatClientBytesIn5m"), ("F5-BIGIP-SYSTEM-MIB", "sysStatClientPktsOut5m"), ("F5-BIGIP-SYSTEM-MIB", "sysStatClientBytesOut5m"), ("F5-BIGIP-SYSTEM-MIB", "sysStatClientMaxConns5m"), ("F5-BIGIP-SYSTEM-MIB", "sysStatClientTotConns5m"), ("F5-BIGIP-SYSTEM-MIB", "sysStatClientCurConns5m"), ("F5-BIGIP-SYSTEM-MIB", "sysStatServerPktsIn5m"), ("F5-BIGIP-SYSTEM-MIB", "sysStatServerBytesIn5m"), ("F5-BIGIP-SYSTEM-MIB", "sysStatServerPktsOut5m"), ("F5-BIGIP-SYSTEM-MIB", "sysStatServerBytesOut5m"), ("F5-BIGIP-SYSTEM-MIB", "sysStatServerMaxConns5m"), ("F5-BIGIP-SYSTEM-MIB", "sysStatServerTotConns5m"), ("F5-BIGIP-SYSTEM-MIB", "sysStatServerCurConns5m"), ("F5-BIGIP-SYSTEM-MIB", "sysStatPvaClientPktsIn5s"), ("F5-BIGIP-SYSTEM-MIB", "sysStatPvaClientBytesIn5s"), ("F5-BIGIP-SYSTEM-MIB", "sysStatPvaClientPktsOut5s"), ("F5-BIGIP-SYSTEM-MIB", "sysStatPvaClientBytesOut5s"), ("F5-BIGIP-SYSTEM-MIB", "sysStatPvaClientMaxConns5s"), ("F5-BIGIP-SYSTEM-MIB", "sysStatPvaClientTotConns5s"), ("F5-BIGIP-SYSTEM-MIB", "sysStatPvaClientCurConns5s"), ("F5-BIGIP-SYSTEM-MIB", "sysStatPvaServerPktsIn5s"), ("F5-BIGIP-SYSTEM-MIB", "sysStatPvaServerBytesIn5s"), ("F5-BIGIP-SYSTEM-MIB", "sysStatPvaServerPktsOut5s"), ("F5-BIGIP-SYSTEM-MIB", "sysStatPvaServerBytesOut5s"), ("F5-BIGIP-SYSTEM-MIB", "sysStatPvaServerMaxConns5s"), ("F5-BIGIP-SYSTEM-MIB", "sysStatPvaServerTotConns5s"), ("F5-BIGIP-SYSTEM-MIB", "sysStatPvaServerCurConns5s"), ("F5-BIGIP-SYSTEM-MIB", "sysStatPvaClientPktsIn1m"), ("F5-BIGIP-SYSTEM-MIB", "sysStatPvaClientBytesIn1m"), ("F5-BIGIP-SYSTEM-MIB", "sysStatPvaClientPktsOut1m"), ("F5-BIGIP-SYSTEM-MIB", "sysStatPvaClientBytesOut1m"), ("F5-BIGIP-SYSTEM-MIB", "sysStatPvaClientMaxConns1m"), ("F5-BIGIP-SYSTEM-MIB", "sysStatPvaClientTotConns1m"), ("F5-BIGIP-SYSTEM-MIB", "sysStatPvaClientCurConns1m"), ("F5-BIGIP-SYSTEM-MIB", "sysStatPvaServerPktsIn1m"), ("F5-BIGIP-SYSTEM-MIB", "sysStatPvaServerBytesIn1m"), ("F5-BIGIP-SYSTEM-MIB", "sysStatPvaServerPktsOut1m"), ("F5-BIGIP-SYSTEM-MIB", "sysStatPvaServerBytesOut1m"), ("F5-BIGIP-SYSTEM-MIB", "sysStatPvaServerMaxConns1m"), ("F5-BIGIP-SYSTEM-MIB", "sysStatPvaServerTotConns1m"), ("F5-BIGIP-SYSTEM-MIB", "sysStatPvaServerCurConns1m"), ("F5-BIGIP-SYSTEM-MIB", "sysStatPvaClientPktsIn5m"), ("F5-BIGIP-SYSTEM-MIB", "sysStatPvaClientBytesIn5m"), ("F5-BIGIP-SYSTEM-MIB", "sysStatPvaClientPktsOut5m"), ("F5-BIGIP-SYSTEM-MIB", "sysStatPvaClientBytesOut5m"), ("F5-BIGIP-SYSTEM-MIB", "sysStatPvaClientMaxConns5m"), ("F5-BIGIP-SYSTEM-MIB", "sysStatPvaClientTotConns5m"), ("F5-BIGIP-SYSTEM-MIB", "sysStatPvaClientCurConns5m"), ("F5-BIGIP-SYSTEM-MIB", "sysStatPvaServerPktsIn5m"), ("F5-BIGIP-SYSTEM-MIB", "sysStatPvaServerBytesIn5m"), ("F5-BIGIP-SYSTEM-MIB", "sysStatPvaServerPktsOut5m"), ("F5-BIGIP-SYSTEM-MIB", "sysStatPvaServerBytesOut5m"), ("F5-BIGIP-SYSTEM-MIB", "sysStatPvaServerMaxConns5m"), ("F5-BIGIP-SYSTEM-MIB", "sysStatPvaServerTotConns5m"), ("F5-BIGIP-SYSTEM-MIB", "sysStatPvaServerCurConns5m"), ("F5-BIGIP-SYSTEM-MIB", "sysStatMemoryTotalKb"), ("F5-BIGIP-SYSTEM-MIB", "sysStatMemoryUsedKb"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysStatGroup = sysStatGroup.setStatus('current')
if mibBuilder.loadTexts: sysStatGroup.setDescription('A collection of objects of sysGlobalStat MIB.')
sysAuthStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 3)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysAuthStatResetStats"), ("F5-BIGIP-SYSTEM-MIB", "sysAuthStatTotSessions"), ("F5-BIGIP-SYSTEM-MIB", "sysAuthStatCurSessions"), ("F5-BIGIP-SYSTEM-MIB", "sysAuthStatMaxSessions"), ("F5-BIGIP-SYSTEM-MIB", "sysAuthStatSuccessResults"), ("F5-BIGIP-SYSTEM-MIB", "sysAuthStatFailureResults"), ("F5-BIGIP-SYSTEM-MIB", "sysAuthStatWantcredentialResults"), ("F5-BIGIP-SYSTEM-MIB", "sysAuthStatErrorResults"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysAuthStatGroup = sysAuthStatGroup.setStatus('current')
if mibBuilder.loadTexts: sysAuthStatGroup.setDescription('A collection of objects of sysGlobalAuthStat MIB.')
sysConnPoolStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 4)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysConnPoolStatResetStats"), ("F5-BIGIP-SYSTEM-MIB", "sysConnPoolStatCurSize"), ("F5-BIGIP-SYSTEM-MIB", "sysConnPoolStatMaxSize"), ("F5-BIGIP-SYSTEM-MIB", "sysConnPoolStatReuses"), ("F5-BIGIP-SYSTEM-MIB", "sysConnPoolStatConnects"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysConnPoolStatGroup = sysConnPoolStatGroup.setStatus('current')
if mibBuilder.loadTexts: sysConnPoolStatGroup.setDescription('A collection of objects of sysGlobalConnPoolStat MIB.')
sysHttpStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 5)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysHttpStatResetStats"), ("F5-BIGIP-SYSTEM-MIB", "sysHttpStatCookiePersistInserts"), ("F5-BIGIP-SYSTEM-MIB", "sysHttpStatResp2xxCnt"), ("F5-BIGIP-SYSTEM-MIB", "sysHttpStatResp3xxCnt"), ("F5-BIGIP-SYSTEM-MIB", "sysHttpStatResp4xxCnt"), ("F5-BIGIP-SYSTEM-MIB", "sysHttpStatResp5xxCnt"), ("F5-BIGIP-SYSTEM-MIB", "sysHttpStatNumberReqs"), ("F5-BIGIP-SYSTEM-MIB", "sysHttpStatGetReqs"), ("F5-BIGIP-SYSTEM-MIB", "sysHttpStatPostReqs"), ("F5-BIGIP-SYSTEM-MIB", "sysHttpStatV9Reqs"), ("F5-BIGIP-SYSTEM-MIB", "sysHttpStatV10Reqs"), ("F5-BIGIP-SYSTEM-MIB", "sysHttpStatV11Reqs"), ("F5-BIGIP-SYSTEM-MIB", "sysHttpStatV9Resp"), ("F5-BIGIP-SYSTEM-MIB", "sysHttpStatV10Resp"), ("F5-BIGIP-SYSTEM-MIB", "sysHttpStatV11Resp"), ("F5-BIGIP-SYSTEM-MIB", "sysHttpStatMaxKeepaliveReq"), ("F5-BIGIP-SYSTEM-MIB", "sysHttpStatRespBucket1k"), ("F5-BIGIP-SYSTEM-MIB", "sysHttpStatRespBucket4k"), ("F5-BIGIP-SYSTEM-MIB", "sysHttpStatRespBucket16k"), ("F5-BIGIP-SYSTEM-MIB", "sysHttpStatRespBucket32k"), ("F5-BIGIP-SYSTEM-MIB", "sysHttpStatPrecompressBytes"), ("F5-BIGIP-SYSTEM-MIB", "sysHttpStatPostcompressBytes"), ("F5-BIGIP-SYSTEM-MIB", "sysHttpStatNullCompressBytes"), ("F5-BIGIP-SYSTEM-MIB", "sysHttpStatHtmlPrecompressBytes"), ("F5-BIGIP-SYSTEM-MIB", "sysHttpStatHtmlPostcompressBytes"), ("F5-BIGIP-SYSTEM-MIB", "sysHttpStatCssPrecompressBytes"), ("F5-BIGIP-SYSTEM-MIB", "sysHttpStatCssPostcompressBytes"), ("F5-BIGIP-SYSTEM-MIB", "sysHttpStatJsPrecompressBytes"), ("F5-BIGIP-SYSTEM-MIB", "sysHttpStatJsPostcompressBytes"), ("F5-BIGIP-SYSTEM-MIB", "sysHttpStatXmlPrecompressBytes"), ("F5-BIGIP-SYSTEM-MIB", "sysHttpStatXmlPostcompressBytes"), ("F5-BIGIP-SYSTEM-MIB", "sysHttpStatSgmlPrecompressBytes"), ("F5-BIGIP-SYSTEM-MIB", "sysHttpStatSgmlPostcompressBytes"), ("F5-BIGIP-SYSTEM-MIB", "sysHttpStatPlainPrecompressBytes"), ("F5-BIGIP-SYSTEM-MIB", "sysHttpStatPlainPostcompressBytes"), ("F5-BIGIP-SYSTEM-MIB", "sysHttpStatOctetPrecompressBytes"), ("F5-BIGIP-SYSTEM-MIB", "sysHttpStatOctetPostcompressBytes"), ("F5-BIGIP-SYSTEM-MIB", "sysHttpStatImagePrecompressBytes"), ("F5-BIGIP-SYSTEM-MIB", "sysHttpStatImagePostcompressBytes"), ("F5-BIGIP-SYSTEM-MIB", "sysHttpStatVideoPrecompressBytes"), ("F5-BIGIP-SYSTEM-MIB", "sysHttpStatVideoPostcompressBytes"), ("F5-BIGIP-SYSTEM-MIB", "sysHttpStatAudioPrecompressBytes"), ("F5-BIGIP-SYSTEM-MIB", "sysHttpStatAudioPostcompressBytes"), ("F5-BIGIP-SYSTEM-MIB", "sysHttpStatOtherPrecompressBytes"), ("F5-BIGIP-SYSTEM-MIB", "sysHttpStatOtherPostcompressBytes"), ("F5-BIGIP-SYSTEM-MIB", "sysHttpStatRamcacheHits"), ("F5-BIGIP-SYSTEM-MIB", "sysHttpStatRamcacheMisses"), ("F5-BIGIP-SYSTEM-MIB", "sysHttpStatRamcacheMissesAll"), ("F5-BIGIP-SYSTEM-MIB", "sysHttpStatRamcacheHitBytes"), ("F5-BIGIP-SYSTEM-MIB", "sysHttpStatRamcacheMissBytes"), ("F5-BIGIP-SYSTEM-MIB", "sysHttpStatRamcacheMissBytesAll"), ("F5-BIGIP-SYSTEM-MIB", "sysHttpStatRamcacheSize"), ("F5-BIGIP-SYSTEM-MIB", "sysHttpStatRamcacheCount"), ("F5-BIGIP-SYSTEM-MIB", "sysHttpStatRamcacheEvictions"), ("F5-BIGIP-SYSTEM-MIB", "sysHttpStatRespBucket64k"), ("F5-BIGIP-SYSTEM-MIB", "sysHttpStatV20Reqs"), ("F5-BIGIP-SYSTEM-MIB", "sysHttpStatV30Reqs"), ("F5-BIGIP-SYSTEM-MIB", "sysHttpStatV20Resp"), ("F5-BIGIP-SYSTEM-MIB", "sysHttpStatV30Resp"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysHttpStatGroup = sysHttpStatGroup.setStatus('current')
if mibBuilder.loadTexts: sysHttpStatGroup.setDescription('A collection of objects of sysGlobalHttpStat MIB.')
sysIcmpStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 6)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysIcmpStatResetStats"), ("F5-BIGIP-SYSTEM-MIB", "sysIcmpStatTx"), ("F5-BIGIP-SYSTEM-MIB", "sysIcmpStatRx"), ("F5-BIGIP-SYSTEM-MIB", "sysIcmpStatForward"), ("F5-BIGIP-SYSTEM-MIB", "sysIcmpStatDrop"), ("F5-BIGIP-SYSTEM-MIB", "sysIcmpStatErrCksum"), ("F5-BIGIP-SYSTEM-MIB", "sysIcmpStatErrLen"), ("F5-BIGIP-SYSTEM-MIB", "sysIcmpStatErrMem"), ("F5-BIGIP-SYSTEM-MIB", "sysIcmpStatErrRtx"), ("F5-BIGIP-SYSTEM-MIB", "sysIcmpStatErrProto"), ("F5-BIGIP-SYSTEM-MIB", "sysIcmpStatErrOpt"), ("F5-BIGIP-SYSTEM-MIB", "sysIcmpStatErr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysIcmpStatGroup = sysIcmpStatGroup.setStatus('current')
if mibBuilder.loadTexts: sysIcmpStatGroup.setDescription('A collection of objects of sysGlobalIcmpStat MIB.')
sysIcmp6StatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 7)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysIcmp6StatResetStats"), ("F5-BIGIP-SYSTEM-MIB", "sysIcmp6StatTx"), ("F5-BIGIP-SYSTEM-MIB", "sysIcmp6StatRx"), ("F5-BIGIP-SYSTEM-MIB", "sysIcmp6StatForward"), ("F5-BIGIP-SYSTEM-MIB", "sysIcmp6StatDrop"), ("F5-BIGIP-SYSTEM-MIB", "sysIcmp6StatErrCksum"), ("F5-BIGIP-SYSTEM-MIB", "sysIcmp6StatErrLen"), ("F5-BIGIP-SYSTEM-MIB", "sysIcmp6StatErrMem"), ("F5-BIGIP-SYSTEM-MIB", "sysIcmp6StatErrRtx"), ("F5-BIGIP-SYSTEM-MIB", "sysIcmp6StatErrProto"), ("F5-BIGIP-SYSTEM-MIB", "sysIcmp6StatErrOpt"), ("F5-BIGIP-SYSTEM-MIB", "sysIcmp6StatErr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysIcmp6StatGroup = sysIcmp6StatGroup.setStatus('current')
if mibBuilder.loadTexts: sysIcmp6StatGroup.setDescription('A collection of objects of sysGlobalIcmp6Stat MIB.')
sysIpStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 8)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysIpStatResetStats"), ("F5-BIGIP-SYSTEM-MIB", "sysIpStatTx"), ("F5-BIGIP-SYSTEM-MIB", "sysIpStatRx"), ("F5-BIGIP-SYSTEM-MIB", "sysIpStatDropped"), ("F5-BIGIP-SYSTEM-MIB", "sysIpStatRxFrag"), ("F5-BIGIP-SYSTEM-MIB", "sysIpStatRxFragDropped"), ("F5-BIGIP-SYSTEM-MIB", "sysIpStatTxFrag"), ("F5-BIGIP-SYSTEM-MIB", "sysIpStatTxFragDropped"), ("F5-BIGIP-SYSTEM-MIB", "sysIpStatReassembled"), ("F5-BIGIP-SYSTEM-MIB", "sysIpStatErrCksum"), ("F5-BIGIP-SYSTEM-MIB", "sysIpStatErrLen"), ("F5-BIGIP-SYSTEM-MIB", "sysIpStatErrMem"), ("F5-BIGIP-SYSTEM-MIB", "sysIpStatErrRtx"), ("F5-BIGIP-SYSTEM-MIB", "sysIpStatErrProto"), ("F5-BIGIP-SYSTEM-MIB", "sysIpStatErrOpt"), ("F5-BIGIP-SYSTEM-MIB", "sysIpStatErrReassembledTooLong"), ("F5-BIGIP-SYSTEM-MIB", "sysIpStatNbrPbqFullDropped"), ("F5-BIGIP-SYSTEM-MIB", "sysIpStatNbrUnreachableDropped"), ("F5-BIGIP-SYSTEM-MIB", "sysIpStatMcastTx"), ("F5-BIGIP-SYSTEM-MIB", "sysIpStatMcastRx"), ("F5-BIGIP-SYSTEM-MIB", "sysIpStatErrMcastRpf"), ("F5-BIGIP-SYSTEM-MIB", "sysIpStatErrMcastWrongIf"), ("F5-BIGIP-SYSTEM-MIB", "sysIpStatErrMcastNoRoute"), ("F5-BIGIP-SYSTEM-MIB", "sysIpStatErrMcastRouteLookupTimeout"), ("F5-BIGIP-SYSTEM-MIB", "sysIpStatErrMcastMaxPendingPackets"), ("F5-BIGIP-SYSTEM-MIB", "sysIpStatErrMcastMaxPendingRoutes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysIpStatGroup = sysIpStatGroup.setStatus('current')
if mibBuilder.loadTexts: sysIpStatGroup.setDescription('A collection of objects of sysGlobalIpStat MIB.')
sysIp6StatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 9)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysIp6StatResetStats"), ("F5-BIGIP-SYSTEM-MIB", "sysIp6StatTx"), ("F5-BIGIP-SYSTEM-MIB", "sysIp6StatRx"), ("F5-BIGIP-SYSTEM-MIB", "sysIp6StatDropped"), ("F5-BIGIP-SYSTEM-MIB", "sysIp6StatRxFrag"), ("F5-BIGIP-SYSTEM-MIB", "sysIp6StatRxFragDropped"), ("F5-BIGIP-SYSTEM-MIB", "sysIp6StatTxFrag"), ("F5-BIGIP-SYSTEM-MIB", "sysIp6StatTxFragDropped"), ("F5-BIGIP-SYSTEM-MIB", "sysIp6StatReassembled"), ("F5-BIGIP-SYSTEM-MIB", "sysIp6StatErrCksum"), ("F5-BIGIP-SYSTEM-MIB", "sysIp6StatErrLen"), ("F5-BIGIP-SYSTEM-MIB", "sysIp6StatErrMem"), ("F5-BIGIP-SYSTEM-MIB", "sysIp6StatErrRtx"), ("F5-BIGIP-SYSTEM-MIB", "sysIp6StatErrProto"), ("F5-BIGIP-SYSTEM-MIB", "sysIp6StatErrOpt"), ("F5-BIGIP-SYSTEM-MIB", "sysIp6StatErrReassembledTooLong"), ("F5-BIGIP-SYSTEM-MIB", "sysIp6StatNbrPbqFullDropped"), ("F5-BIGIP-SYSTEM-MIB", "sysIp6StatNbrUnreachableDropped"), ("F5-BIGIP-SYSTEM-MIB", "sysIp6StatMcastTx"), ("F5-BIGIP-SYSTEM-MIB", "sysIp6StatMcastRx"), ("F5-BIGIP-SYSTEM-MIB", "sysIp6StatErrMcastRpf"), ("F5-BIGIP-SYSTEM-MIB", "sysIp6StatErrMcastWrongIf"), ("F5-BIGIP-SYSTEM-MIB", "sysIp6StatErrMcastNoRoute"), ("F5-BIGIP-SYSTEM-MIB", "sysIp6StatErrMcastRouteLookupTimeout"), ("F5-BIGIP-SYSTEM-MIB", "sysIp6StatErrMcastMaxPendingPackets"), ("F5-BIGIP-SYSTEM-MIB", "sysIp6StatErrMcastMaxPendingRoutes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysIp6StatGroup = sysIp6StatGroup.setStatus('current')
if mibBuilder.loadTexts: sysIp6StatGroup.setDescription('A collection of objects of sysGlobalIp6Stat MIB.')
sysClientsslStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 10)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatResetStats"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatCurConns"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatMaxConns"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatCurNativeConns"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatMaxNativeConns"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatTotNativeConns"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatCurCompatConns"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatMaxCompatConns"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatTotCompatConns"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatEncryptedBytesIn"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatEncryptedBytesOut"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatDecryptedBytesIn"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatDecryptedBytesOut"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatRecordsIn"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatRecordsOut"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatFullyHwAcceleratedConns"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatPartiallyHwAcceleratedConns"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatNonHwAcceleratedConns"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatPrematureDisconnects"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatMidstreamRenegotiations"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatSessCacheCurEntries"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatSessCacheHits"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatSessCacheLookups"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatSessCacheOverflows"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatSessCacheInvalidations"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatPeercertValid"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatPeercertInvalid"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatPeercertNone"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatHandshakeFailures"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatBadRecords"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatFatalAlerts"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatSslv2"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatSslv3"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatTlsv1"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatAdhKeyxchg"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatDhDssKeyxchg"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatDhRsaKeyxchg"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatDssKeyxchg"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatEdhDssKeyxchg"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatRsaKeyxchg"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatNullBulk"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatAesBulk"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatDesBulk"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatIdeaBulk"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatRc2Bulk"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatRc4Bulk"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatNullDigest"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatMd5Digest"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatShaDigest"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatNotssl"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatEdhRsaKeyxchg"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatTotConns5s"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatTotConns1m"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatTotConns5m"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatSecureHandshakes"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatInsecureHandshakeAccepts"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatInsecureHandshakeRejects"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatInsecureRenegotiationRejects"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatSniRejects"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatTlsv11"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatTlsv12"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatDtlsv1"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatEcdheRsaKeyxchg"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatConns"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatCachedCerts"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatEcdhRsaKeyxchg"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatEcdheEcdsaKeyxchg"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatEcdhEcdsaKeyxchg"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatDheDssKeyxchg"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatAesGcmBulk"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatDestinationIpBypasses"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatSourceIpBypasses"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatHostnameBypasses"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatAggregateRenegotiationsRejected"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatOcspStaplingConns"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatOcspStaplingResponseStatusErrors"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatOcspStaplingResponseValidationErrors"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatOcspStaplingCertStatusErrors"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatOcspStaplingOcspConnHttpErrors"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatOcspStaplingOcspConnTimeouts"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatOcspStaplingOcspConnFailures"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatSessionMirrorSuccess"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatSessionMirrorFailure"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatConnectionMirrorPeerReady"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatConnectionMirrorHaCtxSent"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatConnectionMirrorHaCtxRecv"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatConnectionMirrorHaHsSuccess"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatConnectionMirrorHaFailure"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatConnectionMirrorHaTimeout"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatDtlsTxPushbacks"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatCamelliaBulk"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatActiveHandshakeRejected"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatCurrentActiveHandshakes"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatExtendedMasterSecrets"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatBypassesHandshakeAlert"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatBypassClientCertificateRequest"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatOcspFwdpClientsslCachedResp"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatOcspFwdpClientsslCertStatusReq"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatOcspFwdpClientsslStapledResp"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatOcspFwdpClientsslRespstatusErrResp"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatOcspFwdpClientsslInvalidCertResp"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatOcspFwdpClientsslRevokedResp"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatOcspFwdpClientsslUnknownResp"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatC3dConns"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatChacha20Poly1305Bulk"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatAesBulkOffload"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatAesGcmBulkOffload"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatChacha20Poly1305BulkOffld"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatDesBulkOffload"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatRc4BulkOffload"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatCamelliaBulkOffload"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatMd5DigestOffload"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatShaDigestOffload"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatSha224Digest"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatSha224DigestOffload"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatSha256Digest"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatSha256DigestOffload"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatSha384Digest"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatSha384DigestOffload"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatSha512Digest"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatSha512DigestOffload"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatDhGroupP256"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatDhGroupP256Offload"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatDhGroupP384"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatDhGroupP384Offload"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatDhGroupX25519"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatDhGroupX25519Offload"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatRsaKeySize1024"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatRsaKeySize1024Offload"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatRsaKeySize2048"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatRsaKeySize2048Offload"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatRsaKeySize4096"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatRsaKeySize4096Offload"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatTotalHandshakesSoftware"), ("F5-BIGIP-SYSTEM-MIB", "sysClientsslStatTotalHandshakesOffload"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysClientsslStatGroup = sysClientsslStatGroup.setStatus('current')
if mibBuilder.loadTexts: sysClientsslStatGroup.setDescription('A collection of objects of sysGlobalClientSslStat MIB.')
sysServersslStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 11)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysServersslStatResetStats"), ("F5-BIGIP-SYSTEM-MIB", "sysServersslStatCurConns"), ("F5-BIGIP-SYSTEM-MIB", "sysServersslStatMaxConns"), ("F5-BIGIP-SYSTEM-MIB", "sysServersslStatCurNativeConns"), ("F5-BIGIP-SYSTEM-MIB", "sysServersslStatMaxNativeConns"), ("F5-BIGIP-SYSTEM-MIB", "sysServersslStatTotNativeConns"), ("F5-BIGIP-SYSTEM-MIB", "sysServersslStatCurCompatConns"), ("F5-BIGIP-SYSTEM-MIB", "sysServersslStatMaxCompatConns"), ("F5-BIGIP-SYSTEM-MIB", "sysServersslStatTotCompatConns"), ("F5-BIGIP-SYSTEM-MIB", "sysServersslStatEncryptedBytesIn"), ("F5-BIGIP-SYSTEM-MIB", "sysServersslStatEncryptedBytesOut"), ("F5-BIGIP-SYSTEM-MIB", "sysServersslStatDecryptedBytesIn"), ("F5-BIGIP-SYSTEM-MIB", "sysServersslStatDecryptedBytesOut"), ("F5-BIGIP-SYSTEM-MIB", "sysServersslStatRecordsIn"), ("F5-BIGIP-SYSTEM-MIB", "sysServersslStatRecordsOut"), ("F5-BIGIP-SYSTEM-MIB", "sysServersslStatFullyHwAcceleratedConns"), ("F5-BIGIP-SYSTEM-MIB", "sysServersslStatPartiallyHwAcceleratedConns"), ("F5-BIGIP-SYSTEM-MIB", "sysServersslStatNonHwAcceleratedConns"), ("F5-BIGIP-SYSTEM-MIB", "sysServersslStatPrematureDisconnects"), ("F5-BIGIP-SYSTEM-MIB", "sysServersslStatMidstreamRenegotiations"), ("F5-BIGIP-SYSTEM-MIB", "sysServersslStatSessCacheCurEntries"), ("F5-BIGIP-SYSTEM-MIB", "sysServersslStatSessCacheHits"), ("F5-BIGIP-SYSTEM-MIB", "sysServersslStatSessCacheLookups"), ("F5-BIGIP-SYSTEM-MIB", "sysServersslStatSessCacheOverflows"), ("F5-BIGIP-SYSTEM-MIB", "sysServersslStatSessCacheInvalidations"), ("F5-BIGIP-SYSTEM-MIB", "sysServersslStatPeercertValid"), ("F5-BIGIP-SYSTEM-MIB", "sysServersslStatPeercertInvalid"), ("F5-BIGIP-SYSTEM-MIB", "sysServersslStatPeercertNone"), ("F5-BIGIP-SYSTEM-MIB", "sysServersslStatHandshakeFailures"), ("F5-BIGIP-SYSTEM-MIB", "sysServersslStatBadRecords"), ("F5-BIGIP-SYSTEM-MIB", "sysServersslStatFatalAlerts"), ("F5-BIGIP-SYSTEM-MIB", "sysServersslStatSslv2"), ("F5-BIGIP-SYSTEM-MIB", "sysServersslStatSslv3"), ("F5-BIGIP-SYSTEM-MIB", "sysServersslStatTlsv1"), ("F5-BIGIP-SYSTEM-MIB", "sysServersslStatAdhKeyxchg"), ("F5-BIGIP-SYSTEM-MIB", "sysServersslStatDhDssKeyxchg"), ("F5-BIGIP-SYSTEM-MIB", "sysServersslStatDhRsaKeyxchg"), ("F5-BIGIP-SYSTEM-MIB", "sysServersslStatDssKeyxchg"), ("F5-BIGIP-SYSTEM-MIB", "sysServersslStatEdhDssKeyxchg"), ("F5-BIGIP-SYSTEM-MIB", "sysServersslStatRsaKeyxchg"), ("F5-BIGIP-SYSTEM-MIB", "sysServersslStatNullBulk"), ("F5-BIGIP-SYSTEM-MIB", "sysServersslStatAesBulk"), ("F5-BIGIP-SYSTEM-MIB", "sysServersslStatDesBulk"), ("F5-BIGIP-SYSTEM-MIB", "sysServersslStatIdeaBulk"), ("F5-BIGIP-SYSTEM-MIB", "sysServersslStatRc2Bulk"), ("F5-BIGIP-SYSTEM-MIB", "sysServersslStatRc4Bulk"), ("F5-BIGIP-SYSTEM-MIB", "sysServersslStatNullDigest"), ("F5-BIGIP-SYSTEM-MIB", "sysServersslStatMd5Digest"), ("F5-BIGIP-SYSTEM-MIB", "sysServersslStatShaDigest"), ("F5-BIGIP-SYSTEM-MIB", "sysServersslStatNotssl"), ("F5-BIGIP-SYSTEM-MIB", "sysServersslStatEdhRsaKeyxchg"), ("F5-BIGIP-SYSTEM-MIB", "sysServersslStatSecureHandshakes"), ("F5-BIGIP-SYSTEM-MIB", "sysServersslStatInsecureHandshakeAccepts"), ("F5-BIGIP-SYSTEM-MIB", "sysServersslStatInsecureHandshakeRejects"), ("F5-BIGIP-SYSTEM-MIB", "sysServersslStatInsecureRenegotiationRejects"), ("F5-BIGIP-SYSTEM-MIB", "sysServersslStatSniRejects"), ("F5-BIGIP-SYSTEM-MIB", "sysServersslStatTlsv11"), ("F5-BIGIP-SYSTEM-MIB", "sysServersslStatTlsv12"), ("F5-BIGIP-SYSTEM-MIB", "sysServersslStatDtlsv1"), ("F5-BIGIP-SYSTEM-MIB", "sysServersslStatEcdheRsaKeyxchg"), ("F5-BIGIP-SYSTEM-MIB", "sysServersslStatConns"), ("F5-BIGIP-SYSTEM-MIB", "sysServersslStatEcdhRsaKeyxchg"), ("F5-BIGIP-SYSTEM-MIB", "sysServersslStatEcdheEcdsaKeyxchg"), ("F5-BIGIP-SYSTEM-MIB", "sysServersslStatEcdhEcdsaKeyxchg"), ("F5-BIGIP-SYSTEM-MIB", "sysServersslStatDheDssKeyxchg"), ("F5-BIGIP-SYSTEM-MIB", "sysServersslStatAesGcmBulk"), ("F5-BIGIP-SYSTEM-MIB", "sysServersslStatDestinationIpBypasses"), ("F5-BIGIP-SYSTEM-MIB", "sysServersslStatSourceIpBypasses"), ("F5-BIGIP-SYSTEM-MIB", "sysServersslStatHostnameBypasses"), ("F5-BIGIP-SYSTEM-MIB", "sysServersslStatRenegotiationsRejected"), ("F5-BIGIP-SYSTEM-MIB", "sysServersslStatAggregateRenegotiationsRejected"), ("F5-BIGIP-SYSTEM-MIB", "sysServersslStatSessionMirrorSuccess"), ("F5-BIGIP-SYSTEM-MIB", "sysServersslStatSessionMirrorFailure"), ("F5-BIGIP-SYSTEM-MIB", "sysServersslStatConnectionMirrorPeerReady"), ("F5-BIGIP-SYSTEM-MIB", "sysServersslStatConnectionMirrorHaCtxSent"), ("F5-BIGIP-SYSTEM-MIB", "sysServersslStatConnectionMirrorHaCtxRecv"), ("F5-BIGIP-SYSTEM-MIB", "sysServersslStatConnectionMirrorHaHsSuccess"), ("F5-BIGIP-SYSTEM-MIB", "sysServersslStatConnectionMirrorHaFailure"), ("F5-BIGIP-SYSTEM-MIB", "sysServersslStatConnectionMirrorHaTimeout"), ("F5-BIGIP-SYSTEM-MIB", "sysServersslStatDtlsTxPushbacks"), ("F5-BIGIP-SYSTEM-MIB", "sysServersslStatCamelliaBulk"), ("F5-BIGIP-SYSTEM-MIB", "sysServersslStatActiveHandshakeRejected"), ("F5-BIGIP-SYSTEM-MIB", "sysServersslStatCurrentActiveHandshakes"), ("F5-BIGIP-SYSTEM-MIB", "sysServersslStatExtendedMasterSecrets"), ("F5-BIGIP-SYSTEM-MIB", "sysServersslStatBypassesHandshakeAlert"), ("F5-BIGIP-SYSTEM-MIB", "sysServersslStatBypassClientCertificateRequest"), ("F5-BIGIP-SYSTEM-MIB", "sysServersslStatOcspServersslCachedResp"), ("F5-BIGIP-SYSTEM-MIB", "sysServersslStatOcspServersslStapledResp"), ("F5-BIGIP-SYSTEM-MIB", "sysServersslStatOcspServersslResponderQueries"), ("F5-BIGIP-SYSTEM-MIB", "sysServersslStatOcspServersslResponseErrors"), ("F5-BIGIP-SYSTEM-MIB", "sysServersslStatOcspServersslCertStatusUnknown"), ("F5-BIGIP-SYSTEM-MIB", "sysServersslStatOcspServersslCertStatusRevoked"), ("F5-BIGIP-SYSTEM-MIB", "sysServersslStatC3dConns"), ("F5-BIGIP-SYSTEM-MIB", "sysServersslStatChacha20Poly1305Bulk"), ("F5-BIGIP-SYSTEM-MIB", "sysServersslStatAesBulkOffload"), ("F5-BIGIP-SYSTEM-MIB", "sysServersslStatAesGcmBulkOffload"), ("F5-BIGIP-SYSTEM-MIB", "sysServersslStatChacha20Poly1305BulkOffld"), ("F5-BIGIP-SYSTEM-MIB", "sysServersslStatDesBulkOffload"), ("F5-BIGIP-SYSTEM-MIB", "sysServersslStatRc4BulkOffload"), ("F5-BIGIP-SYSTEM-MIB", "sysServersslStatCamelliaBulkOffload"), ("F5-BIGIP-SYSTEM-MIB", "sysServersslStatMd5DigestOffload"), ("F5-BIGIP-SYSTEM-MIB", "sysServersslStatShaDigestOffload"), ("F5-BIGIP-SYSTEM-MIB", "sysServersslStatSha224Digest"), ("F5-BIGIP-SYSTEM-MIB", "sysServersslStatSha224DigestOffload"), ("F5-BIGIP-SYSTEM-MIB", "sysServersslStatSha256Digest"), ("F5-BIGIP-SYSTEM-MIB", "sysServersslStatSha256DigestOffload"), ("F5-BIGIP-SYSTEM-MIB", "sysServersslStatSha384Digest"), ("F5-BIGIP-SYSTEM-MIB", "sysServersslStatSha384DigestOffload"), ("F5-BIGIP-SYSTEM-MIB", "sysServersslStatSha512Digest"), ("F5-BIGIP-SYSTEM-MIB", "sysServersslStatSha512DigestOffload"), ("F5-BIGIP-SYSTEM-MIB", "sysServersslStatDhGroupP256"), ("F5-BIGIP-SYSTEM-MIB", "sysServersslStatDhGroupP256Offload"), ("F5-BIGIP-SYSTEM-MIB", "sysServersslStatDhGroupP384"), ("F5-BIGIP-SYSTEM-MIB", "sysServersslStatDhGroupP384Offload"), ("F5-BIGIP-SYSTEM-MIB", "sysServersslStatDhGroupX25519"), ("F5-BIGIP-SYSTEM-MIB", "sysServersslStatDhGroupX25519Offload"), ("F5-BIGIP-SYSTEM-MIB", "sysServersslStatRsaKeySize1024"), ("F5-BIGIP-SYSTEM-MIB", "sysServersslStatRsaKeySize1024Offload"), ("F5-BIGIP-SYSTEM-MIB", "sysServersslStatRsaKeySize2048"), ("F5-BIGIP-SYSTEM-MIB", "sysServersslStatRsaKeySize2048Offload"), ("F5-BIGIP-SYSTEM-MIB", "sysServersslStatRsaKeySize4096"), ("F5-BIGIP-SYSTEM-MIB", "sysServersslStatRsaKeySize4096Offload"), ("F5-BIGIP-SYSTEM-MIB", "sysServersslStatTotalHandshakesSoftware"), ("F5-BIGIP-SYSTEM-MIB", "sysServersslStatTotalHandshakesOffload"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysServersslStatGroup = sysServersslStatGroup.setStatus('current')
if mibBuilder.loadTexts: sysServersslStatGroup.setDescription('A collection of objects of sysGlobalServerSslStat MIB.')
sysStreamStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 12)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysStreamStatResetStats"), ("F5-BIGIP-SYSTEM-MIB", "sysStreamStatReplaces"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysStreamStatGroup = sysStreamStatGroup.setStatus('current')
if mibBuilder.loadTexts: sysStreamStatGroup.setDescription('A collection of objects of sysGlobalStreamStat MIB.')
sysTcpStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 13)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysTcpStatResetStats"), ("F5-BIGIP-SYSTEM-MIB", "sysTcpStatOpen"), ("F5-BIGIP-SYSTEM-MIB", "sysTcpStatCloseWait"), ("F5-BIGIP-SYSTEM-MIB", "sysTcpStatFinWait"), ("F5-BIGIP-SYSTEM-MIB", "sysTcpStatTimeWait"), ("F5-BIGIP-SYSTEM-MIB", "sysTcpStatAccepts"), ("F5-BIGIP-SYSTEM-MIB", "sysTcpStatAcceptfails"), ("F5-BIGIP-SYSTEM-MIB", "sysTcpStatConnects"), ("F5-BIGIP-SYSTEM-MIB", "sysTcpStatConnfails"), ("F5-BIGIP-SYSTEM-MIB", "sysTcpStatExpires"), ("F5-BIGIP-SYSTEM-MIB", "sysTcpStatAbandons"), ("F5-BIGIP-SYSTEM-MIB", "sysTcpStatRxrst"), ("F5-BIGIP-SYSTEM-MIB", "sysTcpStatRxbadsum"), ("F5-BIGIP-SYSTEM-MIB", "sysTcpStatRxbadseg"), ("F5-BIGIP-SYSTEM-MIB", "sysTcpStatRxooseg"), ("F5-BIGIP-SYSTEM-MIB", "sysTcpStatRxcookie"), ("F5-BIGIP-SYSTEM-MIB", "sysTcpStatRxbadcookie"), ("F5-BIGIP-SYSTEM-MIB", "sysTcpStatSyncacheover"), ("F5-BIGIP-SYSTEM-MIB", "sysTcpStatTxrexmits"), ("F5-BIGIP-SYSTEM-MIB", "sysTcpStatFinWait2"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysTcpStatGroup = sysTcpStatGroup.setStatus('current')
if mibBuilder.loadTexts: sysTcpStatGroup.setDescription('A collection of objects of sysGlobalTcpStat MIB.')
sysUdpStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 14)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysUdpStatResetStats"), ("F5-BIGIP-SYSTEM-MIB", "sysUdpStatOpen"), ("F5-BIGIP-SYSTEM-MIB", "sysUdpStatAccepts"), ("F5-BIGIP-SYSTEM-MIB", "sysUdpStatAcceptfails"), ("F5-BIGIP-SYSTEM-MIB", "sysUdpStatConnects"), ("F5-BIGIP-SYSTEM-MIB", "sysUdpStatConnfails"), ("F5-BIGIP-SYSTEM-MIB", "sysUdpStatExpires"), ("F5-BIGIP-SYSTEM-MIB", "sysUdpStatRxdgram"), ("F5-BIGIP-SYSTEM-MIB", "sysUdpStatRxbaddgram"), ("F5-BIGIP-SYSTEM-MIB", "sysUdpStatRxunreach"), ("F5-BIGIP-SYSTEM-MIB", "sysUdpStatRxbadsum"), ("F5-BIGIP-SYSTEM-MIB", "sysUdpStatRxnosum"), ("F5-BIGIP-SYSTEM-MIB", "sysUdpStatTxdgram"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysUdpStatGroup = sysUdpStatGroup.setStatus('current')
if mibBuilder.loadTexts: sysUdpStatGroup.setDescription('A collection of objects of sysGlobalUdpStat MIB.')
sysAdminIpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 15)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysAdminIpNumber"), ("F5-BIGIP-SYSTEM-MIB", "sysAdminIpAddrType"), ("F5-BIGIP-SYSTEM-MIB", "sysAdminIpAddr"), ("F5-BIGIP-SYSTEM-MIB", "sysAdminIpNetmaskType"), ("F5-BIGIP-SYSTEM-MIB", "sysAdminIpNetmask"), ("F5-BIGIP-SYSTEM-MIB", "sysAdminIpName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysAdminIpGroup = sysAdminIpGroup.setStatus('current')
if mibBuilder.loadTexts: sysAdminIpGroup.setDescription('A collection of objects of sysAdminIp MIB.')
sysArpStaticEntryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 16)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysArpStaticEntryNumber"), ("F5-BIGIP-SYSTEM-MIB", "sysArpStaticEntryIpAddrType"), ("F5-BIGIP-SYSTEM-MIB", "sysArpStaticEntryIpAddr"), ("F5-BIGIP-SYSTEM-MIB", "sysArpStaticEntryMacAddr"), ("F5-BIGIP-SYSTEM-MIB", "sysArpStaticEntryName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysArpStaticEntryGroup = sysArpStaticEntryGroup.setStatus('current')
if mibBuilder.loadTexts: sysArpStaticEntryGroup.setDescription('A collection of objects of sysArpStaticEntry MIB.')
sysDot1dbaseStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 17)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysDot1dbaseStatResetStats"), ("F5-BIGIP-SYSTEM-MIB", "sysDot1dbaseStatMacAddr"), ("F5-BIGIP-SYSTEM-MIB", "sysDot1dbaseStatNumPorts"), ("F5-BIGIP-SYSTEM-MIB", "sysDot1dbaseStatType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysDot1dbaseStatGroup = sysDot1dbaseStatGroup.setStatus('current')
if mibBuilder.loadTexts: sysDot1dbaseStatGroup.setDescription('A collection of objects of sysDot1dbaseStat MIB.')
sysDot1dbaseStatPortGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 18)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysDot1dbaseStatPortNumber"), ("F5-BIGIP-SYSTEM-MIB", "sysDot1dbaseStatPortIndex"), ("F5-BIGIP-SYSTEM-MIB", "sysDot1dbaseStatPortPort"), ("F5-BIGIP-SYSTEM-MIB", "sysDot1dbaseStatPortName"), ("F5-BIGIP-SYSTEM-MIB", "sysDot1dbaseStatPortDelayExceededDiscards"), ("F5-BIGIP-SYSTEM-MIB", "sysDot1dbaseStatPortMtuExceededDiscards"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysDot1dbaseStatPortGroup = sysDot1dbaseStatPortGroup.setStatus('current')
if mibBuilder.loadTexts: sysDot1dbaseStatPortGroup.setDescription('A collection of objects of sysDot1dbaseStatPort MIB.')
sysInterfaceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 19)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysInterfaceNumber"), ("F5-BIGIP-SYSTEM-MIB", "sysInterfaceName"), ("F5-BIGIP-SYSTEM-MIB", "sysInterfaceMediaMaxSpeed"), ("F5-BIGIP-SYSTEM-MIB", "sysInterfaceMediaMaxDuplex"), ("F5-BIGIP-SYSTEM-MIB", "sysInterfaceMediaActiveSpeed"), ("F5-BIGIP-SYSTEM-MIB", "sysInterfaceMediaActiveDuplex"), ("F5-BIGIP-SYSTEM-MIB", "sysInterfaceMacAddr"), ("F5-BIGIP-SYSTEM-MIB", "sysInterfaceMtu"), ("F5-BIGIP-SYSTEM-MIB", "sysInterfaceEnabled"), ("F5-BIGIP-SYSTEM-MIB", "sysInterfaceLearnMode"), ("F5-BIGIP-SYSTEM-MIB", "sysInterfaceFlowCtrlReq"), ("F5-BIGIP-SYSTEM-MIB", "sysInterfaceStpLink"), ("F5-BIGIP-SYSTEM-MIB", "sysInterfaceStpEdge"), ("F5-BIGIP-SYSTEM-MIB", "sysInterfaceStpEdgeActive"), ("F5-BIGIP-SYSTEM-MIB", "sysInterfaceStpAuto"), ("F5-BIGIP-SYSTEM-MIB", "sysInterfaceStpEnable"), ("F5-BIGIP-SYSTEM-MIB", "sysInterfaceStpReset"), ("F5-BIGIP-SYSTEM-MIB", "sysInterfaceStatus"), ("F5-BIGIP-SYSTEM-MIB", "sysInterfaceComboPort"), ("F5-BIGIP-SYSTEM-MIB", "sysInterfacePreferSfp"), ("F5-BIGIP-SYSTEM-MIB", "sysInterfaceSfpMedia"), ("F5-BIGIP-SYSTEM-MIB", "sysInterfacePhyMaster"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysInterfaceGroup = sysInterfaceGroup.setStatus('current')
if mibBuilder.loadTexts: sysInterfaceGroup.setDescription('A collection of objects of sysInterface MIB.')
sysIntfMediaGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 20)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysIntfMediaNumber"), ("F5-BIGIP-SYSTEM-MIB", "sysIntfMediaName"), ("F5-BIGIP-SYSTEM-MIB", "sysIntfMediaIndex"), ("F5-BIGIP-SYSTEM-MIB", "sysIntfMediaMediaOption"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysIntfMediaGroup = sysIntfMediaGroup.setStatus('current')
if mibBuilder.loadTexts: sysIntfMediaGroup.setDescription('A collection of objects of sysInterfaceMediaOptions MIB.')
sysIfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 21)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysIfNumber"), ("F5-BIGIP-SYSTEM-MIB", "sysIfIndex"), ("F5-BIGIP-SYSTEM-MIB", "sysIfName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysIfGroup = sysIfGroup.setStatus('current')
if mibBuilder.loadTexts: sysIfGroup.setDescription('A collection of objects of sysInterfaceId MIB.')
sysInterfaceStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 22)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysInterfaceStatResetStats"), ("F5-BIGIP-SYSTEM-MIB", "sysInterfaceStatNumber"), ("F5-BIGIP-SYSTEM-MIB", "sysInterfaceStatName"), ("F5-BIGIP-SYSTEM-MIB", "sysInterfaceStatPktsIn"), ("F5-BIGIP-SYSTEM-MIB", "sysInterfaceStatBytesIn"), ("F5-BIGIP-SYSTEM-MIB", "sysInterfaceStatPktsOut"), ("F5-BIGIP-SYSTEM-MIB", "sysInterfaceStatBytesOut"), ("F5-BIGIP-SYSTEM-MIB", "sysInterfaceStatMcastIn"), ("F5-BIGIP-SYSTEM-MIB", "sysInterfaceStatMcastOut"), ("F5-BIGIP-SYSTEM-MIB", "sysInterfaceStatErrorsIn"), ("F5-BIGIP-SYSTEM-MIB", "sysInterfaceStatErrorsOut"), ("F5-BIGIP-SYSTEM-MIB", "sysInterfaceStatDropsIn"), ("F5-BIGIP-SYSTEM-MIB", "sysInterfaceStatDropsOut"), ("F5-BIGIP-SYSTEM-MIB", "sysInterfaceStatCollisions"), ("F5-BIGIP-SYSTEM-MIB", "sysInterfaceStatQqIn"), ("F5-BIGIP-SYSTEM-MIB", "sysInterfaceStatQqOut"), ("F5-BIGIP-SYSTEM-MIB", "sysInterfaceStatPauseActive"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysInterfaceStatGroup = sysInterfaceStatGroup.setStatus('current')
if mibBuilder.loadTexts: sysInterfaceStatGroup.setDescription('A collection of objects of sysInterfaceStat MIB.')
sysIfxStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 23)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysIfxStatResetStats"), ("F5-BIGIP-SYSTEM-MIB", "sysIfxStatNumber"), ("F5-BIGIP-SYSTEM-MIB", "sysIfxStatName"), ("F5-BIGIP-SYSTEM-MIB", "sysIfxStatInMulticastPkts"), ("F5-BIGIP-SYSTEM-MIB", "sysIfxStatInBroadcastPkts"), ("F5-BIGIP-SYSTEM-MIB", "sysIfxStatOutMulticastPkts"), ("F5-BIGIP-SYSTEM-MIB", "sysIfxStatOutBroadcastPkts"), ("F5-BIGIP-SYSTEM-MIB", "sysIfxStatHcInOctets"), ("F5-BIGIP-SYSTEM-MIB", "sysIfxStatHcInUcastPkts"), ("F5-BIGIP-SYSTEM-MIB", "sysIfxStatHcInMulticastPkts"), ("F5-BIGIP-SYSTEM-MIB", "sysIfxStatHcInBroadcastPkts"), ("F5-BIGIP-SYSTEM-MIB", "sysIfxStatHcOutOctets"), ("F5-BIGIP-SYSTEM-MIB", "sysIfxStatHcOutUcastPkts"), ("F5-BIGIP-SYSTEM-MIB", "sysIfxStatHcOutMulticastPkts"), ("F5-BIGIP-SYSTEM-MIB", "sysIfxStatHcOutBroadcastPkts"), ("F5-BIGIP-SYSTEM-MIB", "sysIfxStatHighSpeed"), ("F5-BIGIP-SYSTEM-MIB", "sysIfxStatConnectorPresent"), ("F5-BIGIP-SYSTEM-MIB", "sysIfxStatCounterDiscontinuityTime"), ("F5-BIGIP-SYSTEM-MIB", "sysIfxStatAlias"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysIfxStatGroup = sysIfxStatGroup.setStatus('current')
if mibBuilder.loadTexts: sysIfxStatGroup.setDescription('A collection of objects of sysIfxStat MIB.')
sysL2ForwardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 24)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysL2ForwardNumber"), ("F5-BIGIP-SYSTEM-MIB", "sysL2ForwardVlanName"), ("F5-BIGIP-SYSTEM-MIB", "sysL2ForwardMacAddr"), ("F5-BIGIP-SYSTEM-MIB", "sysL2ForwardIfname"), ("F5-BIGIP-SYSTEM-MIB", "sysL2ForwardIftype"), ("F5-BIGIP-SYSTEM-MIB", "sysL2ForwardDynamic"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysL2ForwardGroup = sysL2ForwardGroup.setStatus('current')
if mibBuilder.loadTexts: sysL2ForwardGroup.setDescription('A collection of objects of sysL2Forward MIB.')
sysPacketFilterGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 25)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysPacketFilterNumber"), ("F5-BIGIP-SYSTEM-MIB", "sysPacketFilterRname"), ("F5-BIGIP-SYSTEM-MIB", "sysPacketFilterOrder"), ("F5-BIGIP-SYSTEM-MIB", "sysPacketFilterAction"), ("F5-BIGIP-SYSTEM-MIB", "sysPacketFilterVname"), ("F5-BIGIP-SYSTEM-MIB", "sysPacketFilterLog"), ("F5-BIGIP-SYSTEM-MIB", "sysPacketFilterRclass"), ("F5-BIGIP-SYSTEM-MIB", "sysPacketFilterExpression"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysPacketFilterGroup = sysPacketFilterGroup.setStatus('current')
if mibBuilder.loadTexts: sysPacketFilterGroup.setDescription('A collection of objects of sysPacketFilter MIB.')
sysPacketFilterAddrGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 26)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysPacketFilterAddrNumber"), ("F5-BIGIP-SYSTEM-MIB", "sysPacketFilterAddrIndex"), ("F5-BIGIP-SYSTEM-MIB", "sysPacketFilterAddrIpType"), ("F5-BIGIP-SYSTEM-MIB", "sysPacketFilterAddrIp"), ("F5-BIGIP-SYSTEM-MIB", "sysPacketFilterAddrRname"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysPacketFilterAddrGroup = sysPacketFilterAddrGroup.setStatus('current')
if mibBuilder.loadTexts: sysPacketFilterAddrGroup.setDescription('A collection of objects of sysPacketFilterAddress MIB.')
sysPacketFilterVlanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 27)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysPacketFilterVlanNumber"), ("F5-BIGIP-SYSTEM-MIB", "sysPacketFilterVlanIndex"), ("F5-BIGIP-SYSTEM-MIB", "sysPacketFilterVlanName"), ("F5-BIGIP-SYSTEM-MIB", "sysPacketFilterVlanRname"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysPacketFilterVlanGroup = sysPacketFilterVlanGroup.setStatus('current')
if mibBuilder.loadTexts: sysPacketFilterVlanGroup.setDescription('A collection of objects of sysPacketFilterVlan MIB.')
sysPacketFilterMacGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 28)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysPacketFilterMacNumber"), ("F5-BIGIP-SYSTEM-MIB", "sysPacketFilterMacIndex"), ("F5-BIGIP-SYSTEM-MIB", "sysPacketFilterMacAddr"), ("F5-BIGIP-SYSTEM-MIB", "sysPacketFilterMacRname"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysPacketFilterMacGroup = sysPacketFilterMacGroup.setStatus('current')
if mibBuilder.loadTexts: sysPacketFilterMacGroup.setDescription('A collection of objects of sysPacketFilterMac MIB.')
sysPacketFilterStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 29)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysPacketFilterStatResetStats"), ("F5-BIGIP-SYSTEM-MIB", "sysPacketFilterStatNumber"), ("F5-BIGIP-SYSTEM-MIB", "sysPacketFilterStatRname"), ("F5-BIGIP-SYSTEM-MIB", "sysPacketFilterStatHits"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysPacketFilterStatGroup = sysPacketFilterStatGroup.setStatus('current')
if mibBuilder.loadTexts: sysPacketFilterStatGroup.setDescription('A collection of objects of sysPacketFilterStat MIB.')
sysRouteMgmtEntryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 30)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysRouteMgmtEntryNumber"), ("F5-BIGIP-SYSTEM-MIB", "sysRouteMgmtEntryDestType"), ("F5-BIGIP-SYSTEM-MIB", "sysRouteMgmtEntryDest"), ("F5-BIGIP-SYSTEM-MIB", "sysRouteMgmtEntryNetmaskType"), ("F5-BIGIP-SYSTEM-MIB", "sysRouteMgmtEntryNetmask"), ("F5-BIGIP-SYSTEM-MIB", "sysRouteMgmtEntryType"), ("F5-BIGIP-SYSTEM-MIB", "sysRouteMgmtEntryGatewayType"), ("F5-BIGIP-SYSTEM-MIB", "sysRouteMgmtEntryGateway"), ("F5-BIGIP-SYSTEM-MIB", "sysRouteMgmtEntryMtu"), ("F5-BIGIP-SYSTEM-MIB", "sysRouteMgmtEntryName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysRouteMgmtEntryGroup = sysRouteMgmtEntryGroup.setStatus('current')
if mibBuilder.loadTexts: sysRouteMgmtEntryGroup.setDescription('A collection of objects of sysRouteMgmtEntry MIB.')
sysRouteStaticEntryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 31)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysRouteStaticEntryNumber"), ("F5-BIGIP-SYSTEM-MIB", "sysRouteStaticEntryDestType"), ("F5-BIGIP-SYSTEM-MIB", "sysRouteStaticEntryDest"), ("F5-BIGIP-SYSTEM-MIB", "sysRouteStaticEntryNetmaskType"), ("F5-BIGIP-SYSTEM-MIB", "sysRouteStaticEntryNetmask"), ("F5-BIGIP-SYSTEM-MIB", "sysRouteStaticEntryType"), ("F5-BIGIP-SYSTEM-MIB", "sysRouteStaticEntryVlanName"), ("F5-BIGIP-SYSTEM-MIB", "sysRouteStaticEntryGatewayType"), ("F5-BIGIP-SYSTEM-MIB", "sysRouteStaticEntryGateway"), ("F5-BIGIP-SYSTEM-MIB", "sysRouteStaticEntryPoolName"), ("F5-BIGIP-SYSTEM-MIB", "sysRouteStaticEntryMtu"), ("F5-BIGIP-SYSTEM-MIB", "sysRouteStaticEntryName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysRouteStaticEntryGroup = sysRouteStaticEntryGroup.setStatus('current')
if mibBuilder.loadTexts: sysRouteStaticEntryGroup.setDescription('A collection of objects of sysRouteStaticEntry MIB.')
sysSelfIpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 32)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysSelfIpNumber"), ("F5-BIGIP-SYSTEM-MIB", "sysSelfIpAddrType"), ("F5-BIGIP-SYSTEM-MIB", "sysSelfIpAddr"), ("F5-BIGIP-SYSTEM-MIB", "sysSelfIpNetmaskType"), ("F5-BIGIP-SYSTEM-MIB", "sysSelfIpNetmask"), ("F5-BIGIP-SYSTEM-MIB", "sysSelfIpUnitId"), ("F5-BIGIP-SYSTEM-MIB", "sysSelfIpIsFloating"), ("F5-BIGIP-SYSTEM-MIB", "sysSelfIpVlanName"), ("F5-BIGIP-SYSTEM-MIB", "sysSelfIpName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysSelfIpGroup = sysSelfIpGroup.setStatus('current')
if mibBuilder.loadTexts: sysSelfIpGroup.setDescription('A collection of objects of sysSelfIp MIB.')
sysSelfPortGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 33)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysSelfPortNumber"), ("F5-BIGIP-SYSTEM-MIB", "sysSelfPortAddrType"), ("F5-BIGIP-SYSTEM-MIB", "sysSelfPortAddr"), ("F5-BIGIP-SYSTEM-MIB", "sysSelfPortProtocol"), ("F5-BIGIP-SYSTEM-MIB", "sysSelfPortPort"), ("F5-BIGIP-SYSTEM-MIB", "sysSelfPortSelfName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysSelfPortGroup = sysSelfPortGroup.setStatus('current')
if mibBuilder.loadTexts: sysSelfPortGroup.setDescription('A collection of objects of sysSelfPort MIB.')
sysStpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 34)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysStpNumber"), ("F5-BIGIP-SYSTEM-MIB", "sysStpInstanceId"), ("F5-BIGIP-SYSTEM-MIB", "sysStpPriority"), ("F5-BIGIP-SYSTEM-MIB", "sysStpRootAddr"), ("F5-BIGIP-SYSTEM-MIB", "sysStpRegionalRootAddr"), ("F5-BIGIP-SYSTEM-MIB", "sysStpName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysStpGroup = sysStpGroup.setStatus('current')
if mibBuilder.loadTexts: sysStpGroup.setDescription('A collection of objects of sysStp MIB.')
sysStpGlobalsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 35)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysStpGlobalsMode"), ("F5-BIGIP-SYSTEM-MIB", "sysStpGlobalsFwdDelay"), ("F5-BIGIP-SYSTEM-MIB", "sysStpGlobalsHelloTime"), ("F5-BIGIP-SYSTEM-MIB", "sysStpGlobalsMaxAge"), ("F5-BIGIP-SYSTEM-MIB", "sysStpGlobalsTransmitHold"), ("F5-BIGIP-SYSTEM-MIB", "sysStpGlobalsMaxHops"), ("F5-BIGIP-SYSTEM-MIB", "sysStpGlobalsIdentifier"), ("F5-BIGIP-SYSTEM-MIB", "sysStpGlobalsRevision"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysStpGlobalsGroup = sysStpGlobalsGroup.setStatus('current')
if mibBuilder.loadTexts: sysStpGlobalsGroup.setDescription('A collection of objects of sysStpGlobals MIB.')
sysStpInterfaceMbrGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 36)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysStpInterfaceMbrNumber"), ("F5-BIGIP-SYSTEM-MIB", "sysStpInterfaceMbrInstanceId"), ("F5-BIGIP-SYSTEM-MIB", "sysStpInterfaceMbrName"), ("F5-BIGIP-SYSTEM-MIB", "sysStpInterfaceMbrType"), ("F5-BIGIP-SYSTEM-MIB", "sysStpInterfaceMbrStateActive"), ("F5-BIGIP-SYSTEM-MIB", "sysStpInterfaceMbrRole"), ("F5-BIGIP-SYSTEM-MIB", "sysStpInterfaceMbrPriority"), ("F5-BIGIP-SYSTEM-MIB", "sysStpInterfaceMbrPathCost"), ("F5-BIGIP-SYSTEM-MIB", "sysStpInterfaceMbrStateRequested"), ("F5-BIGIP-SYSTEM-MIB", "sysStpInterfaceMbrInstanceName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysStpInterfaceMbrGroup = sysStpInterfaceMbrGroup.setStatus('current')
if mibBuilder.loadTexts: sysStpInterfaceMbrGroup.setDescription('A collection of objects of sysStpInterfaceMbr MIB.')
sysStpVlanMbrGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 37)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysStpVlanMbrNumber"), ("F5-BIGIP-SYSTEM-MIB", "sysStpVlanMbrInstanceId"), ("F5-BIGIP-SYSTEM-MIB", "sysStpVlanMbrVlanVname"), ("F5-BIGIP-SYSTEM-MIB", "sysStpVlanMbrStpName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysStpVlanMbrGroup = sysStpVlanMbrGroup.setStatus('current')
if mibBuilder.loadTexts: sysStpVlanMbrGroup.setDescription('A collection of objects of sysStpVlanMbr MIB.')
sysStpBridgeStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 38)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysStpBridgeStatResetStats"), ("F5-BIGIP-SYSTEM-MIB", "sysStpBridgeStatMode"), ("F5-BIGIP-SYSTEM-MIB", "sysStpBridgeStatFwdDelay"), ("F5-BIGIP-SYSTEM-MIB", "sysStpBridgeStatHelloTime"), ("F5-BIGIP-SYSTEM-MIB", "sysStpBridgeStatMaxAge"), ("F5-BIGIP-SYSTEM-MIB", "sysStpBridgeStatBridgeFwdDelay"), ("F5-BIGIP-SYSTEM-MIB", "sysStpBridgeStatBridgeHelloTime"), ("F5-BIGIP-SYSTEM-MIB", "sysStpBridgeStatBridgeMaxAge"), ("F5-BIGIP-SYSTEM-MIB", "sysStpBridgeStatTransmitHold"), ("F5-BIGIP-SYSTEM-MIB", "sysStpBridgeStatPathCost"), ("F5-BIGIP-SYSTEM-MIB", "sysStpBridgeStatRootPrio"), ("F5-BIGIP-SYSTEM-MIB", "sysStpBridgeStatRootAddr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysStpBridgeStatGroup = sysStpBridgeStatGroup.setStatus('current')
if mibBuilder.loadTexts: sysStpBridgeStatGroup.setDescription('A collection of objects of sysStpBridgeStat MIB.')
sysStpBridgeTreeStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 39)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysStpBridgeTreeStatNumber"), ("F5-BIGIP-SYSTEM-MIB", "sysStpBridgeTreeStatIndex"), ("F5-BIGIP-SYSTEM-MIB", "sysStpBridgeTreeStatInstanceId"), ("F5-BIGIP-SYSTEM-MIB", "sysStpBridgeTreeStatPriority"), ("F5-BIGIP-SYSTEM-MIB", "sysStpBridgeTreeStatLastTc"), ("F5-BIGIP-SYSTEM-MIB", "sysStpBridgeTreeStatTcCount"), ("F5-BIGIP-SYSTEM-MIB", "sysStpBridgeTreeStatDesigRootPrio"), ("F5-BIGIP-SYSTEM-MIB", "sysStpBridgeTreeStatDesigRootAddr"), ("F5-BIGIP-SYSTEM-MIB", "sysStpBridgeTreeStatInternalPathCost"), ("F5-BIGIP-SYSTEM-MIB", "sysStpBridgeTreeStatRootPort"), ("F5-BIGIP-SYSTEM-MIB", "sysStpBridgeTreeStatRootPortNum"), ("F5-BIGIP-SYSTEM-MIB", "sysStpBridgeTreeStatInstanceName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysStpBridgeTreeStatGroup = sysStpBridgeTreeStatGroup.setStatus('current')
if mibBuilder.loadTexts: sysStpBridgeTreeStatGroup.setDescription('A collection of objects of sysStpBridgeTreeStat MIB.')
sysStpInterfaceStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 40)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysStpInterfaceStatResetStats"), ("F5-BIGIP-SYSTEM-MIB", "sysStpInterfaceStatNumber"), ("F5-BIGIP-SYSTEM-MIB", "sysStpInterfaceStatName"), ("F5-BIGIP-SYSTEM-MIB", "sysStpInterfaceStatPortNum"), ("F5-BIGIP-SYSTEM-MIB", "sysStpInterfaceStatStpEnable"), ("F5-BIGIP-SYSTEM-MIB", "sysStpInterfaceStatPathCost"), ("F5-BIGIP-SYSTEM-MIB", "sysStpInterfaceStatRootCost"), ("F5-BIGIP-SYSTEM-MIB", "sysStpInterfaceStatRootPrio"), ("F5-BIGIP-SYSTEM-MIB", "sysStpInterfaceStatRootAddr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysStpInterfaceStatGroup = sysStpInterfaceStatGroup.setStatus('current')
if mibBuilder.loadTexts: sysStpInterfaceStatGroup.setDescription('A collection of objects of sysStpInterfaceStat MIB.')
sysStpInterfaceTreeStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 41)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysStpInterfaceTreeStatNumber"), ("F5-BIGIP-SYSTEM-MIB", "sysStpInterfaceTreeStatName"), ("F5-BIGIP-SYSTEM-MIB", "sysStpInterfaceTreeStatIndex"), ("F5-BIGIP-SYSTEM-MIB", "sysStpInterfaceTreeStatInstanceId"), ("F5-BIGIP-SYSTEM-MIB", "sysStpInterfaceTreeStatPriority"), ("F5-BIGIP-SYSTEM-MIB", "sysStpInterfaceTreeStatState"), ("F5-BIGIP-SYSTEM-MIB", "sysStpInterfaceTreeStatStatRole"), ("F5-BIGIP-SYSTEM-MIB", "sysStpInterfaceTreeStatDesigRootPrio"), ("F5-BIGIP-SYSTEM-MIB", "sysStpInterfaceTreeStatDesigRootAddr"), ("F5-BIGIP-SYSTEM-MIB", "sysStpInterfaceTreeStatDesigCost"), ("F5-BIGIP-SYSTEM-MIB", "sysStpInterfaceTreeStatDesigBridgePrio"), ("F5-BIGIP-SYSTEM-MIB", "sysStpInterfaceTreeStatDesigBridgeAddr"), ("F5-BIGIP-SYSTEM-MIB", "sysStpInterfaceTreeStatDesigPortNum"), ("F5-BIGIP-SYSTEM-MIB", "sysStpInterfaceTreeStatDesigPortPriority"), ("F5-BIGIP-SYSTEM-MIB", "sysStpInterfaceTreeStatInternalPathCost"), ("F5-BIGIP-SYSTEM-MIB", "sysStpInterfaceTreeStatFwdTransitions"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysStpInterfaceTreeStatGroup = sysStpInterfaceTreeStatGroup.setStatus('current')
if mibBuilder.loadTexts: sysStpInterfaceTreeStatGroup.setDescription('A collection of objects of sysStpInterfaceTreeStat MIB.')
sysDot3StatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 42)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysDot3StatResetStats"), ("F5-BIGIP-SYSTEM-MIB", "sysDot3StatNumber"), ("F5-BIGIP-SYSTEM-MIB", "sysDot3StatName"), ("F5-BIGIP-SYSTEM-MIB", "sysDot3StatAlignmentErrors"), ("F5-BIGIP-SYSTEM-MIB", "sysDot3StatFcsErrors"), ("F5-BIGIP-SYSTEM-MIB", "sysDot3StatSingleCollisionFrames"), ("F5-BIGIP-SYSTEM-MIB", "sysDot3StatMultiCollisionFrames"), ("F5-BIGIP-SYSTEM-MIB", "sysDot3StatSqetestErrors"), ("F5-BIGIP-SYSTEM-MIB", "sysDot3StatDeferredTx"), ("F5-BIGIP-SYSTEM-MIB", "sysDot3StatLateCollisions"), ("F5-BIGIP-SYSTEM-MIB", "sysDot3StatExcessiveCollisions"), ("F5-BIGIP-SYSTEM-MIB", "sysDot3StatIntmacTxErrors"), ("F5-BIGIP-SYSTEM-MIB", "sysDot3StatCarrierSenseErrors"), ("F5-BIGIP-SYSTEM-MIB", "sysDot3StatFrameTooLongs"), ("F5-BIGIP-SYSTEM-MIB", "sysDot3StatIntmacRxErrors"), ("F5-BIGIP-SYSTEM-MIB", "sysDot3StatSymbolErrors"), ("F5-BIGIP-SYSTEM-MIB", "sysDot3StatDuplexStatus"), ("F5-BIGIP-SYSTEM-MIB", "sysDot3StatCollisionCount"), ("F5-BIGIP-SYSTEM-MIB", "sysDot3StatCollisionFreq"), ("F5-BIGIP-SYSTEM-MIB", "sysDot3StatRateControlAbility"), ("F5-BIGIP-SYSTEM-MIB", "sysDot3StatRateControlStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysDot3StatGroup = sysDot3StatGroup.setStatus('current')
if mibBuilder.loadTexts: sysDot3StatGroup.setDescription('A collection of objects of sysDot3Stat MIB.')
sysTrunkGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 43)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysTrunkNumber"), ("F5-BIGIP-SYSTEM-MIB", "sysTrunkName"), ("F5-BIGIP-SYSTEM-MIB", "sysTrunkStatus"), ("F5-BIGIP-SYSTEM-MIB", "sysTrunkAggAddr"), ("F5-BIGIP-SYSTEM-MIB", "sysTrunkCfgMbrCount"), ("F5-BIGIP-SYSTEM-MIB", "sysTrunkOperBw"), ("F5-BIGIP-SYSTEM-MIB", "sysTrunkStpEnable"), ("F5-BIGIP-SYSTEM-MIB", "sysTrunkStpReset"), ("F5-BIGIP-SYSTEM-MIB", "sysTrunkLacpEnabled"), ("F5-BIGIP-SYSTEM-MIB", "sysTrunkActiveLacp"), ("F5-BIGIP-SYSTEM-MIB", "sysTrunkShortTimeout"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysTrunkGroup = sysTrunkGroup.setStatus('current')
if mibBuilder.loadTexts: sysTrunkGroup.setDescription('A collection of objects of sysTrunk MIB.')
sysTrunkStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 44)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysTrunkStatResetStats"), ("F5-BIGIP-SYSTEM-MIB", "sysTrunkStatNumber"), ("F5-BIGIP-SYSTEM-MIB", "sysTrunkStatName"), ("F5-BIGIP-SYSTEM-MIB", "sysTrunkStatPktsIn"), ("F5-BIGIP-SYSTEM-MIB", "sysTrunkStatBytesIn"), ("F5-BIGIP-SYSTEM-MIB", "sysTrunkStatPktsOut"), ("F5-BIGIP-SYSTEM-MIB", "sysTrunkStatBytesOut"), ("F5-BIGIP-SYSTEM-MIB", "sysTrunkStatMcastIn"), ("F5-BIGIP-SYSTEM-MIB", "sysTrunkStatMcastOut"), ("F5-BIGIP-SYSTEM-MIB", "sysTrunkStatErrorsIn"), ("F5-BIGIP-SYSTEM-MIB", "sysTrunkStatErrorsOut"), ("F5-BIGIP-SYSTEM-MIB", "sysTrunkStatDropsIn"), ("F5-BIGIP-SYSTEM-MIB", "sysTrunkStatDropsOut"), ("F5-BIGIP-SYSTEM-MIB", "sysTrunkStatCollisions"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysTrunkStatGroup = sysTrunkStatGroup.setStatus('current')
if mibBuilder.loadTexts: sysTrunkStatGroup.setDescription('A collection of objects of sysTrunkStat MIB.')
sysTrunkCfgMemberGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 45)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysTrunkCfgMemberNumber"), ("F5-BIGIP-SYSTEM-MIB", "sysTrunkCfgMemberTrunkName"), ("F5-BIGIP-SYSTEM-MIB", "sysTrunkCfgMemberName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysTrunkCfgMemberGroup = sysTrunkCfgMemberGroup.setStatus('current')
if mibBuilder.loadTexts: sysTrunkCfgMemberGroup.setDescription('A collection of objects of sysTrunkCfgMember MIB.')
sysVlanDataGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 46)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysVlanNumber"), ("F5-BIGIP-SYSTEM-MIB", "sysVlanVname"), ("F5-BIGIP-SYSTEM-MIB", "sysVlanId"), ("F5-BIGIP-SYSTEM-MIB", "sysVlanSpanningTree"), ("F5-BIGIP-SYSTEM-MIB", "sysVlanMacMasquerade"), ("F5-BIGIP-SYSTEM-MIB", "sysVlanMacTrue"), ("F5-BIGIP-SYSTEM-MIB", "sysVlanSourceCheck"), ("F5-BIGIP-SYSTEM-MIB", "sysVlanFailsafeEnabled"), ("F5-BIGIP-SYSTEM-MIB", "sysVlanMtu"), ("F5-BIGIP-SYSTEM-MIB", "sysVlanFailsafeTimeout"), ("F5-BIGIP-SYSTEM-MIB", "sysVlanFailsafeAction"), ("F5-BIGIP-SYSTEM-MIB", "sysVlanMirrorHashPortEnable"), ("F5-BIGIP-SYSTEM-MIB", "sysVlanLearnMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysVlanDataGroup = sysVlanDataGroup.setStatus('current')
if mibBuilder.loadTexts: sysVlanDataGroup.setDescription('A collection of objects of sysVlan MIB.')
sysVlanMemberGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 47)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysVlanMemberNumber"), ("F5-BIGIP-SYSTEM-MIB", "sysVlanMemberVmname"), ("F5-BIGIP-SYSTEM-MIB", "sysVlanMemberParentVname"), ("F5-BIGIP-SYSTEM-MIB", "sysVlanMemberTagged"), ("F5-BIGIP-SYSTEM-MIB", "sysVlanMemberType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysVlanMemberGroup = sysVlanMemberGroup.setStatus('current')
if mibBuilder.loadTexts: sysVlanMemberGroup.setDescription('A collection of objects of sysVlanMember MIB.')
sysVlanGroupGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 48)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysVlanGroupNumber"), ("F5-BIGIP-SYSTEM-MIB", "sysVlanGroupName"), ("F5-BIGIP-SYSTEM-MIB", "sysVlanGroupVlanId"), ("F5-BIGIP-SYSTEM-MIB", "sysVlanGroupMode"), ("F5-BIGIP-SYSTEM-MIB", "sysVlanGroupBridgeAllTraffic"), ("F5-BIGIP-SYSTEM-MIB", "sysVlanGroupBridgeInStandby"), ("F5-BIGIP-SYSTEM-MIB", "sysVlanGroupBridgeMulticast"), ("F5-BIGIP-SYSTEM-MIB", "sysVlanGroupMacMasquerade"), ("F5-BIGIP-SYSTEM-MIB", "sysVlanGroupMacTrue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysVlanGroupGroup = sysVlanGroupGroup.setStatus('current')
if mibBuilder.loadTexts: sysVlanGroupGroup.setDescription('A collection of objects of sysVlanGroup MIB.')
sysVlanGroupMbrGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 49)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysVlanGroupMbrNumber"), ("F5-BIGIP-SYSTEM-MIB", "sysVlanGroupMbrGroupName"), ("F5-BIGIP-SYSTEM-MIB", "sysVlanGroupMbrVlanName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysVlanGroupMbrGroup = sysVlanGroupMbrGroup.setStatus('current')
if mibBuilder.loadTexts: sysVlanGroupMbrGroup.setDescription('A collection of objects of sysVlanGroupMbr MIB.')
sysProxyExclusionGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 50)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysProxyExclusionNumber"), ("F5-BIGIP-SYSTEM-MIB", "sysProxyExclusionVlangroupName"), ("F5-BIGIP-SYSTEM-MIB", "sysProxyExclusionIpType"), ("F5-BIGIP-SYSTEM-MIB", "sysProxyExclusionIp"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysProxyExclusionGroup = sysProxyExclusionGroup.setStatus('current')
if mibBuilder.loadTexts: sysProxyExclusionGroup.setDescription('A collection of objects of sysProxyExclusion MIB.')
sysCpuGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 51)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysCpuNumber"), ("F5-BIGIP-SYSTEM-MIB", "sysCpuIndex"), ("F5-BIGIP-SYSTEM-MIB", "sysCpuTemperature"), ("F5-BIGIP-SYSTEM-MIB", "sysCpuFanSpeed"), ("F5-BIGIP-SYSTEM-MIB", "sysCpuName"), ("F5-BIGIP-SYSTEM-MIB", "sysCpuSlot"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysCpuGroup = sysCpuGroup.setStatus('current')
if mibBuilder.loadTexts: sysCpuGroup.setDescription('A collection of objects of sysCpu MIB.')
sysChassisFanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 52)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysChassisFanNumber"), ("F5-BIGIP-SYSTEM-MIB", "sysChassisFanIndex"), ("F5-BIGIP-SYSTEM-MIB", "sysChassisFanStatus"), ("F5-BIGIP-SYSTEM-MIB", "sysChassisFanSpeed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysChassisFanGroup = sysChassisFanGroup.setStatus('current')
if mibBuilder.loadTexts: sysChassisFanGroup.setDescription('A collection of objects of sysChassisFan MIB.')
sysChassisPowerSupplyGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 53)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysChassisPowerSupplyNumber"), ("F5-BIGIP-SYSTEM-MIB", "sysChassisPowerSupplyIndex"), ("F5-BIGIP-SYSTEM-MIB", "sysChassisPowerSupplyStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysChassisPowerSupplyGroup = sysChassisPowerSupplyGroup.setStatus('current')
if mibBuilder.loadTexts: sysChassisPowerSupplyGroup.setDescription('A collection of objects of sysChassisPowerSupply MIB.')
sysChassisTempGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 54)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysChassisTempNumber"), ("F5-BIGIP-SYSTEM-MIB", "sysChassisTempIndex"), ("F5-BIGIP-SYSTEM-MIB", "sysChassisTempTemperature"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysChassisTempGroup = sysChassisTempGroup.setStatus('current')
if mibBuilder.loadTexts: sysChassisTempGroup.setDescription('A collection of objects of sysChassisTemp MIB.')
sysProductGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 55)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysProductName"), ("F5-BIGIP-SYSTEM-MIB", "sysProductVersion"), ("F5-BIGIP-SYSTEM-MIB", "sysProductBuild"), ("F5-BIGIP-SYSTEM-MIB", "sysProductEdition"), ("F5-BIGIP-SYSTEM-MIB", "sysProductDate"), ("F5-BIGIP-SYSTEM-MIB", "sysProductHotfix"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysProductGroup = sysProductGroup.setStatus('current')
if mibBuilder.loadTexts: sysProductGroup.setDescription('A collection of objects of sysProduct MIB.')
sysSubMemoryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 56)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysSubMemoryResetStats"), ("F5-BIGIP-SYSTEM-MIB", "sysSubMemoryNumber"), ("F5-BIGIP-SYSTEM-MIB", "sysSubMemoryName"), ("F5-BIGIP-SYSTEM-MIB", "sysSubMemoryAllocated"), ("F5-BIGIP-SYSTEM-MIB", "sysSubMemoryMaxAllocated"), ("F5-BIGIP-SYSTEM-MIB", "sysSubMemorySize"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysSubMemoryGroup = sysSubMemoryGroup.setStatus('current')
if mibBuilder.loadTexts: sysSubMemoryGroup.setDescription('A collection of objects of sysSubMemory MIB.')
sysSystemGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 57)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysSystemName"), ("F5-BIGIP-SYSTEM-MIB", "sysSystemNodeName"), ("F5-BIGIP-SYSTEM-MIB", "sysSystemRelease"), ("F5-BIGIP-SYSTEM-MIB", "sysSystemVersion"), ("F5-BIGIP-SYSTEM-MIB", "sysSystemMachine"), ("F5-BIGIP-SYSTEM-MIB", "sysSystemUptime"), ("F5-BIGIP-SYSTEM-MIB", "sysSystemUptimeInSec"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysSystemGroup = sysSystemGroup.setStatus('current')
if mibBuilder.loadTexts: sysSystemGroup.setDescription('A collection of objects of sysSystem MIB.')
sysFastHttpStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 58)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysFastHttpStatResetStats"), ("F5-BIGIP-SYSTEM-MIB", "sysFastHttpStatClientSyns"), ("F5-BIGIP-SYSTEM-MIB", "sysFastHttpStatClientAccepts"), ("F5-BIGIP-SYSTEM-MIB", "sysFastHttpStatServerConnects"), ("F5-BIGIP-SYSTEM-MIB", "sysFastHttpStatConnpoolCurSize"), ("F5-BIGIP-SYSTEM-MIB", "sysFastHttpStatConnpoolMaxSize"), ("F5-BIGIP-SYSTEM-MIB", "sysFastHttpStatConnpoolReuses"), ("F5-BIGIP-SYSTEM-MIB", "sysFastHttpStatConnpoolExhausted"), ("F5-BIGIP-SYSTEM-MIB", "sysFastHttpStatNumberReqs"), ("F5-BIGIP-SYSTEM-MIB", "sysFastHttpStatUnbufferedReqs"), ("F5-BIGIP-SYSTEM-MIB", "sysFastHttpStatGetReqs"), ("F5-BIGIP-SYSTEM-MIB", "sysFastHttpStatPostReqs"), ("F5-BIGIP-SYSTEM-MIB", "sysFastHttpStatV9Reqs"), ("F5-BIGIP-SYSTEM-MIB", "sysFastHttpStatV10Reqs"), ("F5-BIGIP-SYSTEM-MIB", "sysFastHttpStatV11Reqs"), ("F5-BIGIP-SYSTEM-MIB", "sysFastHttpStatResp2xxCnt"), ("F5-BIGIP-SYSTEM-MIB", "sysFastHttpStatResp3xxCnt"), ("F5-BIGIP-SYSTEM-MIB", "sysFastHttpStatResp4xxCnt"), ("F5-BIGIP-SYSTEM-MIB", "sysFastHttpStatResp5xxCnt"), ("F5-BIGIP-SYSTEM-MIB", "sysFastHttpStatReqParseErrors"), ("F5-BIGIP-SYSTEM-MIB", "sysFastHttpStatRespParseErrors"), ("F5-BIGIP-SYSTEM-MIB", "sysFastHttpStatClientRxBad"), ("F5-BIGIP-SYSTEM-MIB", "sysFastHttpStatServerRxBad"), ("F5-BIGIP-SYSTEM-MIB", "sysFastHttpStatPipelinedReqs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysFastHttpStatGroup = sysFastHttpStatGroup.setStatus('current')
if mibBuilder.loadTexts: sysFastHttpStatGroup.setDescription('A collection of objects of sysGlobalFastHttpStat MIB.')
sysXmlStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 59)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysXmlStatResetStats"), ("F5-BIGIP-SYSTEM-MIB", "sysXmlStatNumErrors"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysXmlStatGroup = sysXmlStatGroup.setStatus('current')
if mibBuilder.loadTexts: sysXmlStatGroup.setDescription('A collection of objects of sysGlobalXmlStat MIB.')
sysGeneralGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 60)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysGeneralHwName"), ("F5-BIGIP-SYSTEM-MIB", "sysGeneralHwNumber"), ("F5-BIGIP-SYSTEM-MIB", "sysGeneralChassisSerialNum"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysGeneralGroup = sysGeneralGroup.setStatus('current')
if mibBuilder.loadTexts: sysGeneralGroup.setDescription('A collection of objects of sysGeneral MIB.')
sysIiopStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 61)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysIiopStatResetStats"), ("F5-BIGIP-SYSTEM-MIB", "sysIiopStatNumRequests"), ("F5-BIGIP-SYSTEM-MIB", "sysIiopStatNumResponses"), ("F5-BIGIP-SYSTEM-MIB", "sysIiopStatNumCancels"), ("F5-BIGIP-SYSTEM-MIB", "sysIiopStatNumErrors"), ("F5-BIGIP-SYSTEM-MIB", "sysIiopStatNumFragments"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysIiopStatGroup = sysIiopStatGroup.setStatus('current')
if mibBuilder.loadTexts: sysIiopStatGroup.setDescription('A collection of objects of sysGlobalIiopStat MIB.')
sysRtspStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 62)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysRtspStatResetStats"), ("F5-BIGIP-SYSTEM-MIB", "sysRtspStatNumRequests"), ("F5-BIGIP-SYSTEM-MIB", "sysRtspStatNumResponses"), ("F5-BIGIP-SYSTEM-MIB", "sysRtspStatNumErrors"), ("F5-BIGIP-SYSTEM-MIB", "sysRtspStatNumInterleavedData"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysRtspStatGroup = sysRtspStatGroup.setStatus('current')
if mibBuilder.loadTexts: sysRtspStatGroup.setDescription('A collection of objects of sysGlobalRtspStat MIB.')
sysSctpStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 63)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysSctpStatResetStats"), ("F5-BIGIP-SYSTEM-MIB", "sysSctpStatAccepts"), ("F5-BIGIP-SYSTEM-MIB", "sysSctpStatAcceptfails"), ("F5-BIGIP-SYSTEM-MIB", "sysSctpStatConnects"), ("F5-BIGIP-SYSTEM-MIB", "sysSctpStatConnfails"), ("F5-BIGIP-SYSTEM-MIB", "sysSctpStatExpires"), ("F5-BIGIP-SYSTEM-MIB", "sysSctpStatAbandons"), ("F5-BIGIP-SYSTEM-MIB", "sysSctpStatRxrst"), ("F5-BIGIP-SYSTEM-MIB", "sysSctpStatRxbadsum"), ("F5-BIGIP-SYSTEM-MIB", "sysSctpStatRxcookie"), ("F5-BIGIP-SYSTEM-MIB", "sysSctpStatRxbadcookie"), ("F5-BIGIP-SYSTEM-MIB", "sysSctpStatAssociations"), ("F5-BIGIP-SYSTEM-MIB", "sysSctpStatClosing"), ("F5-BIGIP-SYSTEM-MIB", "sysSctpStatConfirmedAddresses"), ("F5-BIGIP-SYSTEM-MIB", "sysSctpStatUnconfirmedAddresses"), ("F5-BIGIP-SYSTEM-MIB", "sysSctpStatActivePaths"), ("F5-BIGIP-SYSTEM-MIB", "sysSctpStatInactivePaths"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysSctpStatGroup = sysSctpStatGroup.setStatus('current')
if mibBuilder.loadTexts: sysSctpStatGroup.setDescription('A collection of objects of sysGlobalSctpStat MIB.')
sysL2ForwardStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 64)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysL2ForwardStatNumber"), ("F5-BIGIP-SYSTEM-MIB", "sysL2ForwardStatVlanName"), ("F5-BIGIP-SYSTEM-MIB", "sysL2ForwardStatMacAddr"), ("F5-BIGIP-SYSTEM-MIB", "sysL2ForwardStatIfname"), ("F5-BIGIP-SYSTEM-MIB", "sysL2ForwardStatIftype"), ("F5-BIGIP-SYSTEM-MIB", "sysL2ForwardStatDynamic"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysL2ForwardStatGroup = sysL2ForwardStatGroup.setStatus('current')
if mibBuilder.loadTexts: sysL2ForwardStatGroup.setDescription('A collection of objects of sysL2ForwardStat MIB.')
sysL2ForwardAttrGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 65)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysL2ForwardAttrVlan"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysL2ForwardAttrGroup = sysL2ForwardAttrGroup.setStatus('current')
if mibBuilder.loadTexts: sysL2ForwardAttrGroup.setDescription('A collection of objects of sysL2ForwardAttr MIB.')
sysHostMemoryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 66)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysHostMemoryTotal"), ("F5-BIGIP-SYSTEM-MIB", "sysHostMemoryUsed"), ("F5-BIGIP-SYSTEM-MIB", "sysHostMemoryTotalKb"), ("F5-BIGIP-SYSTEM-MIB", "sysHostMemoryUsedKb"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysHostMemoryGroup = sysHostMemoryGroup.setStatus('current')
if mibBuilder.loadTexts: sysHostMemoryGroup.setDescription('A collection of objects of sysHostMemory MIB.')
sysHostCpuGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 67)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysHostCpuNumber"), ("F5-BIGIP-SYSTEM-MIB", "sysHostCpuIndex"), ("F5-BIGIP-SYSTEM-MIB", "sysHostCpuId"), ("F5-BIGIP-SYSTEM-MIB", "sysHostCpuUser"), ("F5-BIGIP-SYSTEM-MIB", "sysHostCpuNice"), ("F5-BIGIP-SYSTEM-MIB", "sysHostCpuSystem"), ("F5-BIGIP-SYSTEM-MIB", "sysHostCpuIdle"), ("F5-BIGIP-SYSTEM-MIB", "sysHostCpuIrq"), ("F5-BIGIP-SYSTEM-MIB", "sysHostCpuSoftirq"), ("F5-BIGIP-SYSTEM-MIB", "sysHostCpuIowait"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysHostCpuGroup = sysHostCpuGroup.setStatus('current')
if mibBuilder.loadTexts: sysHostCpuGroup.setDescription('A collection of objects of sysHostCpu MIB.')
sysHostDiskGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 68)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysHostDiskNumber"), ("F5-BIGIP-SYSTEM-MIB", "sysHostDiskPartition"), ("F5-BIGIP-SYSTEM-MIB", "sysHostDiskBlockSize"), ("F5-BIGIP-SYSTEM-MIB", "sysHostDiskTotalBlocks"), ("F5-BIGIP-SYSTEM-MIB", "sysHostDiskFreeBlocks"), ("F5-BIGIP-SYSTEM-MIB", "sysHostDiskTotalNodes"), ("F5-BIGIP-SYSTEM-MIB", "sysHostDiskFreeNodes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysHostDiskGroup = sysHostDiskGroup.setStatus('current')
if mibBuilder.loadTexts: sysHostDiskGroup.setDescription('A collection of objects of sysHostDisk MIB.')
sysSelfPortDefGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 69)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysSelfPortDefNumber"), ("F5-BIGIP-SYSTEM-MIB", "sysSelfPortDefProtocol"), ("F5-BIGIP-SYSTEM-MIB", "sysSelfPortDefPort"), ("F5-BIGIP-SYSTEM-MIB", "sysSelfPortDefAllowName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysSelfPortDefGroup = sysSelfPortDefGroup.setStatus('current')
if mibBuilder.loadTexts: sysSelfPortDefGroup.setDescription('A collection of objects of sysSelfPortDefault MIB.')
sysIntfMediaSfpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 70)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysIntfMediaSfpNumber"), ("F5-BIGIP-SYSTEM-MIB", "sysIntfMediaSfpName"), ("F5-BIGIP-SYSTEM-MIB", "sysIntfMediaSfpIndex"), ("F5-BIGIP-SYSTEM-MIB", "sysIntfMediaSfpType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysIntfMediaSfpGroup = sysIntfMediaSfpGroup.setStatus('current')
if mibBuilder.loadTexts: sysIntfMediaSfpGroup.setDescription('A collection of objects of sysInterfaceMediaSfp MIB.')
sysPvaStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 71)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysPvaStatResetStats"), ("F5-BIGIP-SYSTEM-MIB", "sysPvaStatNumber"), ("F5-BIGIP-SYSTEM-MIB", "sysPvaStatPvaId"), ("F5-BIGIP-SYSTEM-MIB", "sysPvaStatClientPktsIn"), ("F5-BIGIP-SYSTEM-MIB", "sysPvaStatClientBytesIn"), ("F5-BIGIP-SYSTEM-MIB", "sysPvaStatClientPktsOut"), ("F5-BIGIP-SYSTEM-MIB", "sysPvaStatClientBytesOut"), ("F5-BIGIP-SYSTEM-MIB", "sysPvaStatClientMaxConns"), ("F5-BIGIP-SYSTEM-MIB", "sysPvaStatClientTotConns"), ("F5-BIGIP-SYSTEM-MIB", "sysPvaStatClientCurConns"), ("F5-BIGIP-SYSTEM-MIB", "sysPvaStatServerPktsIn"), ("F5-BIGIP-SYSTEM-MIB", "sysPvaStatServerBytesIn"), ("F5-BIGIP-SYSTEM-MIB", "sysPvaStatServerPktsOut"), ("F5-BIGIP-SYSTEM-MIB", "sysPvaStatServerBytesOut"), ("F5-BIGIP-SYSTEM-MIB", "sysPvaStatServerMaxConns"), ("F5-BIGIP-SYSTEM-MIB", "sysPvaStatServerTotConns"), ("F5-BIGIP-SYSTEM-MIB", "sysPvaStatServerCurConns"), ("F5-BIGIP-SYSTEM-MIB", "sysPvaStatTotAssistConns"), ("F5-BIGIP-SYSTEM-MIB", "sysPvaStatCurAssistConns"), ("F5-BIGIP-SYSTEM-MIB", "sysPvaStatHardSyncookieGen"), ("F5-BIGIP-SYSTEM-MIB", "sysPvaStatHardSyncookieDet"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysPvaStatGroup = sysPvaStatGroup.setStatus('current')
if mibBuilder.loadTexts: sysPvaStatGroup.setDescription('A collection of objects of sysPvaStat MIB.')
sysTmmStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 72)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysTmmStatResetStats"), ("F5-BIGIP-SYSTEM-MIB", "sysTmmStatNumber"), ("F5-BIGIP-SYSTEM-MIB", "sysTmmStatTmmId"), ("F5-BIGIP-SYSTEM-MIB", "sysTmmStatTmmPid"), ("F5-BIGIP-SYSTEM-MIB", "sysTmmStatCpu"), ("F5-BIGIP-SYSTEM-MIB", "sysTmmStatTmid"), ("F5-BIGIP-SYSTEM-MIB", "sysTmmStatNpus"), ("F5-BIGIP-SYSTEM-MIB", "sysTmmStatClientPktsIn"), ("F5-BIGIP-SYSTEM-MIB", "sysTmmStatClientBytesIn"), ("F5-BIGIP-SYSTEM-MIB", "sysTmmStatClientPktsOut"), ("F5-BIGIP-SYSTEM-MIB", "sysTmmStatClientBytesOut"), ("F5-BIGIP-SYSTEM-MIB", "sysTmmStatClientMaxConns"), ("F5-BIGIP-SYSTEM-MIB", "sysTmmStatClientTotConns"), ("F5-BIGIP-SYSTEM-MIB", "sysTmmStatClientCurConns"), ("F5-BIGIP-SYSTEM-MIB", "sysTmmStatServerPktsIn"), ("F5-BIGIP-SYSTEM-MIB", "sysTmmStatServerBytesIn"), ("F5-BIGIP-SYSTEM-MIB", "sysTmmStatServerPktsOut"), ("F5-BIGIP-SYSTEM-MIB", "sysTmmStatServerBytesOut"), ("F5-BIGIP-SYSTEM-MIB", "sysTmmStatServerMaxConns"), ("F5-BIGIP-SYSTEM-MIB", "sysTmmStatServerTotConns"), ("F5-BIGIP-SYSTEM-MIB", "sysTmmStatServerCurConns"), ("F5-BIGIP-SYSTEM-MIB", "sysTmmStatMaintenanceModeDeny"), ("F5-BIGIP-SYSTEM-MIB", "sysTmmStatMaxConnVirtualAddrDeny"), ("F5-BIGIP-SYSTEM-MIB", "sysTmmStatMaxConnVirtualPathDeny"), ("F5-BIGIP-SYSTEM-MIB", "sysTmmStatVirtualServerNonSynDeny"), ("F5-BIGIP-SYSTEM-MIB", "sysTmmStatNoHandlerDeny"), ("F5-BIGIP-SYSTEM-MIB", "sysTmmStatLicenseDeny"), ("F5-BIGIP-SYSTEM-MIB", "sysTmmStatCmpConnRedirected"), ("F5-BIGIP-SYSTEM-MIB", "sysTmmStatConnectionMemoryErrors"), ("F5-BIGIP-SYSTEM-MIB", "sysTmmStatTmTotalCycles"), ("F5-BIGIP-SYSTEM-MIB", "sysTmmStatTmIdleCycles"), ("F5-BIGIP-SYSTEM-MIB", "sysTmmStatTmSleepCycles"), ("F5-BIGIP-SYSTEM-MIB", "sysTmmStatMemoryTotal"), ("F5-BIGIP-SYSTEM-MIB", "sysTmmStatMemoryUsed"), ("F5-BIGIP-SYSTEM-MIB", "sysTmmStatDroppedPackets"), ("F5-BIGIP-SYSTEM-MIB", "sysTmmStatIncomingPacketErrors"), ("F5-BIGIP-SYSTEM-MIB", "sysTmmStatOutgoingPacketErrors"), ("F5-BIGIP-SYSTEM-MIB", "sysTmmStatHttpRequests"), ("F5-BIGIP-SYSTEM-MIB", "sysTmmStatTmUsageRatio5s"), ("F5-BIGIP-SYSTEM-MIB", "sysTmmStatTmUsageRatio1m"), ("F5-BIGIP-SYSTEM-MIB", "sysTmmStatTmUsageRatio5m"), ("F5-BIGIP-SYSTEM-MIB", "sysTmmStatSlotId"), ("F5-BIGIP-SYSTEM-MIB", "sysTmmStatMemoryTotalKb"), ("F5-BIGIP-SYSTEM-MIB", "sysTmmStatMemoryUsedKb"), ("F5-BIGIP-SYSTEM-MIB", "sysTmmStatClientEvictedConns"), ("F5-BIGIP-SYSTEM-MIB", "sysTmmStatClientSlowKilled"), ("F5-BIGIP-SYSTEM-MIB", "sysTmmStatServerEvictedConns"), ("F5-BIGIP-SYSTEM-MIB", "sysTmmStatServerSlowKilled"), ("F5-BIGIP-SYSTEM-MIB", "sysTmmStatSwSyncookies"), ("F5-BIGIP-SYSTEM-MIB", "sysTmmStatSwSyncookieAccepts"), ("F5-BIGIP-SYSTEM-MIB", "sysTmmStatSyncookieRejects"), ("F5-BIGIP-SYSTEM-MIB", "sysTmmStatHwSyncookies"), ("F5-BIGIP-SYSTEM-MIB", "sysTmmStatHwSyncookieAccepts"), ("F5-BIGIP-SYSTEM-MIB", "sysTmmStatWlSyncookieHits"), ("F5-BIGIP-SYSTEM-MIB", "sysTmmStatWlSyncookieAccepts"), ("F5-BIGIP-SYSTEM-MIB", "sysTmmStatWlSyncookieRejects"), ("F5-BIGIP-SYSTEM-MIB", "sysTmmStatConnectionFlowMiss"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysTmmStatGroup = sysTmmStatGroup.setStatus('current')
if mibBuilder.loadTexts: sysTmmStatGroup.setDescription('A collection of objects of sysTmmStat MIB.')
sysMultiHostGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 73)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysMultiHostNumber"), ("F5-BIGIP-SYSTEM-MIB", "sysMultiHostHostId"), ("F5-BIGIP-SYSTEM-MIB", "sysMultiHostTotal"), ("F5-BIGIP-SYSTEM-MIB", "sysMultiHostUsed"), ("F5-BIGIP-SYSTEM-MIB", "sysMultiHostMode"), ("F5-BIGIP-SYSTEM-MIB", "sysMultiHostCpuCount"), ("F5-BIGIP-SYSTEM-MIB", "sysMultiHostActiveCpuCount"), ("F5-BIGIP-SYSTEM-MIB", "sysMultiHostOtherMemoryTotal"), ("F5-BIGIP-SYSTEM-MIB", "sysMultiHostOtherMemoryUsed"), ("F5-BIGIP-SYSTEM-MIB", "sysMultiHostSwapTotal"), ("F5-BIGIP-SYSTEM-MIB", "sysMultiHostSwapUsed"), ("F5-BIGIP-SYSTEM-MIB", "sysMultiHostTotalKb"), ("F5-BIGIP-SYSTEM-MIB", "sysMultiHostUsedKb"), ("F5-BIGIP-SYSTEM-MIB", "sysMultiHostOtherMemoryTotalKb"), ("F5-BIGIP-SYSTEM-MIB", "sysMultiHostOtherMemoryUsedKb"), ("F5-BIGIP-SYSTEM-MIB", "sysMultiHostSwapTotalKb"), ("F5-BIGIP-SYSTEM-MIB", "sysMultiHostSwapUsedKb"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysMultiHostGroup = sysMultiHostGroup.setStatus('current')
if mibBuilder.loadTexts: sysMultiHostGroup.setDescription('A collection of objects of sysMultiHost MIB.')
sysMultiHostCpuGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 74)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysMultiHostCpuNumber"), ("F5-BIGIP-SYSTEM-MIB", "sysMultiHostCpuHostId"), ("F5-BIGIP-SYSTEM-MIB", "sysMultiHostCpuIndex"), ("F5-BIGIP-SYSTEM-MIB", "sysMultiHostCpuId"), ("F5-BIGIP-SYSTEM-MIB", "sysMultiHostCpuUser"), ("F5-BIGIP-SYSTEM-MIB", "sysMultiHostCpuNice"), ("F5-BIGIP-SYSTEM-MIB", "sysMultiHostCpuSystem"), ("F5-BIGIP-SYSTEM-MIB", "sysMultiHostCpuIdle"), ("F5-BIGIP-SYSTEM-MIB", "sysMultiHostCpuIrq"), ("F5-BIGIP-SYSTEM-MIB", "sysMultiHostCpuSoftirq"), ("F5-BIGIP-SYSTEM-MIB", "sysMultiHostCpuIowait"), ("F5-BIGIP-SYSTEM-MIB", "sysMultiHostCpuUsageRatio"), ("F5-BIGIP-SYSTEM-MIB", "sysMultiHostCpuUser5s"), ("F5-BIGIP-SYSTEM-MIB", "sysMultiHostCpuNice5s"), ("F5-BIGIP-SYSTEM-MIB", "sysMultiHostCpuSystem5s"), ("F5-BIGIP-SYSTEM-MIB", "sysMultiHostCpuIdle5s"), ("F5-BIGIP-SYSTEM-MIB", "sysMultiHostCpuIrq5s"), ("F5-BIGIP-SYSTEM-MIB", "sysMultiHostCpuSoftirq5s"), ("F5-BIGIP-SYSTEM-MIB", "sysMultiHostCpuIowait5s"), ("F5-BIGIP-SYSTEM-MIB", "sysMultiHostCpuUsageRatio5s"), ("F5-BIGIP-SYSTEM-MIB", "sysMultiHostCpuUser1m"), ("F5-BIGIP-SYSTEM-MIB", "sysMultiHostCpuNice1m"), ("F5-BIGIP-SYSTEM-MIB", "sysMultiHostCpuSystem1m"), ("F5-BIGIP-SYSTEM-MIB", "sysMultiHostCpuIdle1m"), ("F5-BIGIP-SYSTEM-MIB", "sysMultiHostCpuIrq1m"), ("F5-BIGIP-SYSTEM-MIB", "sysMultiHostCpuSoftirq1m"), ("F5-BIGIP-SYSTEM-MIB", "sysMultiHostCpuIowait1m"), ("F5-BIGIP-SYSTEM-MIB", "sysMultiHostCpuUsageRatio1m"), ("F5-BIGIP-SYSTEM-MIB", "sysMultiHostCpuUser5m"), ("F5-BIGIP-SYSTEM-MIB", "sysMultiHostCpuNice5m"), ("F5-BIGIP-SYSTEM-MIB", "sysMultiHostCpuSystem5m"), ("F5-BIGIP-SYSTEM-MIB", "sysMultiHostCpuIdle5m"), ("F5-BIGIP-SYSTEM-MIB", "sysMultiHostCpuIrq5m"), ("F5-BIGIP-SYSTEM-MIB", "sysMultiHostCpuSoftirq5m"), ("F5-BIGIP-SYSTEM-MIB", "sysMultiHostCpuIowait5m"), ("F5-BIGIP-SYSTEM-MIB", "sysMultiHostCpuUsageRatio5m"), ("F5-BIGIP-SYSTEM-MIB", "sysMultiHostCpuStolen"), ("F5-BIGIP-SYSTEM-MIB", "sysMultiHostCpuStolen5s"), ("F5-BIGIP-SYSTEM-MIB", "sysMultiHostCpuStolen1m"), ("F5-BIGIP-SYSTEM-MIB", "sysMultiHostCpuStolen5m"), ("F5-BIGIP-SYSTEM-MIB", "sysMultiHostCpuSlotId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysMultiHostCpuGroup = sysMultiHostCpuGroup.setStatus('current')
if mibBuilder.loadTexts: sysMultiHostCpuGroup.setDescription('A collection of objects of sysMultiHostCpu MIB.')
sysFastL4StatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 75)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysFastL4StatResetStats"), ("F5-BIGIP-SYSTEM-MIB", "sysFastL4StatOpen"), ("F5-BIGIP-SYSTEM-MIB", "sysFastL4StatAccepts"), ("F5-BIGIP-SYSTEM-MIB", "sysFastL4StatAcceptfails"), ("F5-BIGIP-SYSTEM-MIB", "sysFastL4StatExpires"), ("F5-BIGIP-SYSTEM-MIB", "sysFastL4StatRxbadpkt"), ("F5-BIGIP-SYSTEM-MIB", "sysFastL4StatRxunreach"), ("F5-BIGIP-SYSTEM-MIB", "sysFastL4StatRxbadunreach"), ("F5-BIGIP-SYSTEM-MIB", "sysFastL4StatRxbadsum"), ("F5-BIGIP-SYSTEM-MIB", "sysFastL4StatTxerrors"), ("F5-BIGIP-SYSTEM-MIB", "sysFastL4StatSyncookIssue"), ("F5-BIGIP-SYSTEM-MIB", "sysFastL4StatSyncookAccept"), ("F5-BIGIP-SYSTEM-MIB", "sysFastL4StatSyncookReject"), ("F5-BIGIP-SYSTEM-MIB", "sysFastL4StatServersynrtx"), ("F5-BIGIP-SYSTEM-MIB", "sysFastL4StatLbcSuccessful"), ("F5-BIGIP-SYSTEM-MIB", "sysFastL4StatLbcTimedout"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysFastL4StatGroup = sysFastL4StatGroup.setStatus('current')
if mibBuilder.loadTexts: sysFastL4StatGroup.setDescription('A collection of objects of sysGlobalFastL4Stat MIB.')
sysClusterGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 76)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysClusterNumber"), ("F5-BIGIP-SYSTEM-MIB", "sysClusterName"), ("F5-BIGIP-SYSTEM-MIB", "sysClusterEnabled"), ("F5-BIGIP-SYSTEM-MIB", "sysClusterFloatMgmtIpType"), ("F5-BIGIP-SYSTEM-MIB", "sysClusterFloatMgmtIp"), ("F5-BIGIP-SYSTEM-MIB", "sysClusterFloatMgmtNetmaskType"), ("F5-BIGIP-SYSTEM-MIB", "sysClusterFloatMgmtNetmask"), ("F5-BIGIP-SYSTEM-MIB", "sysClusterMinUpMbrs"), ("F5-BIGIP-SYSTEM-MIB", "sysClusterMinUpMbrsEnable"), ("F5-BIGIP-SYSTEM-MIB", "sysClusterMinUpMbrsAction"), ("F5-BIGIP-SYSTEM-MIB", "sysClusterAvailabilityState"), ("F5-BIGIP-SYSTEM-MIB", "sysClusterEnabledStat"), ("F5-BIGIP-SYSTEM-MIB", "sysClusterDisabledParentType"), ("F5-BIGIP-SYSTEM-MIB", "sysClusterStatusReason"), ("F5-BIGIP-SYSTEM-MIB", "sysClusterHaState"), ("F5-BIGIP-SYSTEM-MIB", "sysClusterPriSlotId"), ("F5-BIGIP-SYSTEM-MIB", "sysClusterLastPriSlotId"), ("F5-BIGIP-SYSTEM-MIB", "sysClusterPriSelTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysClusterGroup = sysClusterGroup.setStatus('current')
if mibBuilder.loadTexts: sysClusterGroup.setDescription('A collection of objects of sysCluster MIB.')
sysClusterMbrGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 77)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysClusterMbrNumber"), ("F5-BIGIP-SYSTEM-MIB", "sysClusterMbrCluster"), ("F5-BIGIP-SYSTEM-MIB", "sysClusterMbrSlotId"), ("F5-BIGIP-SYSTEM-MIB", "sysClusterMbrAvailabilityState"), ("F5-BIGIP-SYSTEM-MIB", "sysClusterMbrEnabledStat"), ("F5-BIGIP-SYSTEM-MIB", "sysClusterMbrDisabledParentType"), ("F5-BIGIP-SYSTEM-MIB", "sysClusterMbrStatusReason"), ("F5-BIGIP-SYSTEM-MIB", "sysClusterMbrLicensed"), ("F5-BIGIP-SYSTEM-MIB", "sysClusterMbrState"), ("F5-BIGIP-SYSTEM-MIB", "sysClusterMbrEnabled"), ("F5-BIGIP-SYSTEM-MIB", "sysClusterMbrPriming"), ("F5-BIGIP-SYSTEM-MIB", "sysClusterMbrMgmtAddrType"), ("F5-BIGIP-SYSTEM-MIB", "sysClusterMbrMgmtAddr"), ("F5-BIGIP-SYSTEM-MIB", "sysClusterMbrHaState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysClusterMbrGroup = sysClusterMbrGroup.setStatus('current')
if mibBuilder.loadTexts: sysClusterMbrGroup.setDescription('A collection of objects of sysClusterMbr MIB.')
sysSwVolumeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 78)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysSwVolumeNumber"), ("F5-BIGIP-SYSTEM-MIB", "sysSwVolumeSlotId"), ("F5-BIGIP-SYSTEM-MIB", "sysSwVolumeName"), ("F5-BIGIP-SYSTEM-MIB", "sysSwVolumeSize"), ("F5-BIGIP-SYSTEM-MIB", "sysSwVolumeActive"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysSwVolumeGroup = sysSwVolumeGroup.setStatus('current')
if mibBuilder.loadTexts: sysSwVolumeGroup.setDescription('A collection of objects of sysSoftwareVolume MIB.')
sysSwImageGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 79)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysSwImageNumber"), ("F5-BIGIP-SYSTEM-MIB", "sysSwImageSlotId"), ("F5-BIGIP-SYSTEM-MIB", "sysSwImageFilename"), ("F5-BIGIP-SYSTEM-MIB", "sysSwImageProduct"), ("F5-BIGIP-SYSTEM-MIB", "sysSwImageVersion"), ("F5-BIGIP-SYSTEM-MIB", "sysSwImageBuild"), ("F5-BIGIP-SYSTEM-MIB", "sysSwImageChksum"), ("F5-BIGIP-SYSTEM-MIB", "sysSwImageVerified"), ("F5-BIGIP-SYSTEM-MIB", "sysSwImageBuildDate"), ("F5-BIGIP-SYSTEM-MIB", "sysSwImageLastModified"), ("F5-BIGIP-SYSTEM-MIB", "sysSwImageFileSize"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysSwImageGroup = sysSwImageGroup.setStatus('current')
if mibBuilder.loadTexts: sysSwImageGroup.setDescription('A collection of objects of sysSoftwareImage MIB.')
sysSwHotfixGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 80)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysSwHotfixNumber"), ("F5-BIGIP-SYSTEM-MIB", "sysSwHotfixSlotId"), ("F5-BIGIP-SYSTEM-MIB", "sysSwHotfixFilename"), ("F5-BIGIP-SYSTEM-MIB", "sysSwHotfixProduct"), ("F5-BIGIP-SYSTEM-MIB", "sysSwHotfixVersion"), ("F5-BIGIP-SYSTEM-MIB", "sysSwHotfixBuild"), ("F5-BIGIP-SYSTEM-MIB", "sysSwHotfixChksum"), ("F5-BIGIP-SYSTEM-MIB", "sysSwHotfixVerified"), ("F5-BIGIP-SYSTEM-MIB", "sysSwHotfixHotfixId"), ("F5-BIGIP-SYSTEM-MIB", "sysSwHotfixHotfixTitle"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysSwHotfixGroup = sysSwHotfixGroup.setStatus('current')
if mibBuilder.loadTexts: sysSwHotfixGroup.setDescription('A collection of objects of sysSoftwareHotfix MIB.')
sysSwStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 81)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysSwStatusNumber"), ("F5-BIGIP-SYSTEM-MIB", "sysSwStatusSlotId"), ("F5-BIGIP-SYSTEM-MIB", "sysSwStatusVolume"), ("F5-BIGIP-SYSTEM-MIB", "sysSwStatusProduct"), ("F5-BIGIP-SYSTEM-MIB", "sysSwStatusVersion"), ("F5-BIGIP-SYSTEM-MIB", "sysSwStatusBuild"), ("F5-BIGIP-SYSTEM-MIB", "sysSwStatusActive"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysSwStatusGroup = sysSwStatusGroup.setStatus('current')
if mibBuilder.loadTexts: sysSwStatusGroup.setDescription('A collection of objects of sysSoftwareStatus MIB.')
sysGlobalHostGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 82)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysGlobalHostResetStats"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalHostMemTotal"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalHostMemUsed"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalHostCpuCount"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalHostActiveCpuCount"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalHostCpuUser"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalHostCpuNice"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalHostCpuSystem"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalHostCpuIdle"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalHostCpuIrq"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalHostCpuSoftirq"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalHostCpuIowait"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalHostCpuUsageRatio"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalHostCpuUser5s"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalHostCpuNice5s"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalHostCpuSystem5s"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalHostCpuIdle5s"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalHostCpuIrq5s"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalHostCpuSoftirq5s"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalHostCpuIowait5s"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalHostCpuUsageRatio5s"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalHostCpuUser1m"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalHostCpuNice1m"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalHostCpuSystem1m"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalHostCpuIdle1m"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalHostCpuIrq1m"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalHostCpuSoftirq1m"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalHostCpuIowait1m"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalHostCpuUsageRatio1m"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalHostCpuUser5m"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalHostCpuNice5m"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalHostCpuSystem5m"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalHostCpuIdle5m"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalHostCpuIrq5m"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalHostCpuSoftirq5m"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalHostCpuIowait5m"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalHostCpuUsageRatio5m"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalHostCpuStolen"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalHostCpuStolen5s"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalHostCpuStolen1m"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalHostCpuStolen5m"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalHostMemTotalKb"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalHostMemUsedKb"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalHostOtherMemoryTotal"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalHostOtherMemoryUsed"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalHostSwapTotal"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalHostSwapUsed"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalHostOtherMemTotalKb"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalHostOtherMemUsedKb"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalHostSwapTotalKb"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalHostSwapUsedKb"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysGlobalHostGroup = sysGlobalHostGroup.setStatus('current')
if mibBuilder.loadTexts: sysGlobalHostGroup.setDescription('A collection of objects of sysGlobalHost MIB.')
sysModuleAllocationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 83)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysModuleAllocationNumber"), ("F5-BIGIP-SYSTEM-MIB", "sysModuleAllocationName"), ("F5-BIGIP-SYSTEM-MIB", "sysModuleAllocationProvisionLevel"), ("F5-BIGIP-SYSTEM-MIB", "sysModuleAllocationMemoryRatio"), ("F5-BIGIP-SYSTEM-MIB", "sysModuleAllocationCpuRatio"), ("F5-BIGIP-SYSTEM-MIB", "sysModuleAllocationDiskRatio"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysModuleAllocationGroup = sysModuleAllocationGroup.setStatus('current')
if mibBuilder.loadTexts: sysModuleAllocationGroup.setDescription('A collection of objects of sysModuleAllocation MIB.')
sysGlobalTmmStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 84)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysGlobalTmmStatResetStats"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalTmmStatNpus"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalTmmStatClientPktsIn"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalTmmStatClientBytesIn"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalTmmStatClientPktsOut"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalTmmStatClientBytesOut"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalTmmStatClientMaxConns"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalTmmStatClientTotConns"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalTmmStatClientCurConns"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalTmmStatServerPktsIn"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalTmmStatServerBytesIn"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalTmmStatServerPktsOut"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalTmmStatServerBytesOut"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalTmmStatServerMaxConns"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalTmmStatServerTotConns"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalTmmStatServerCurConns"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalTmmStatMaintenanceModeDeny"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalTmmStatMaxConnVirtualAddrDeny"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalTmmStatMaxConnVirtualPathDeny"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalTmmStatVirtualServerNonSynDeny"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalTmmStatNoHandlerDeny"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalTmmStatLicenseDeny"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalTmmStatCmpConnRedirected"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalTmmStatConnectionMemoryErrors"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalTmmStatTmTotalCycles"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalTmmStatTmIdleCycles"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalTmmStatTmSleepCycles"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalTmmStatMemoryTotal"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalTmmStatMemoryUsed"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalTmmStatDroppedPackets"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalTmmStatIncomingPacketErrors"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalTmmStatOutgoingPacketErrors"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalTmmStatHttpRequests"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalTmmStatTmUsageRatio5s"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalTmmStatTmUsageRatio1m"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalTmmStatTmUsageRatio5m"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalTmmStatMemoryTotalKb"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalTmmStatMemoryUsedKb"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalTmmStatSwSyncookies"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalTmmStatSwSyncookieAccepts"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalTmmStatSyncookieRejects"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalTmmStatHwSyncookies"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalTmmStatHwSyncookieAccepts"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalTmmStatWlSyncookieHits"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalTmmStatWlSyncookieAccepts"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalTmmStatWlSyncookieRejects"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalTmmStatConnectionFlowMiss"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysGlobalTmmStatGroup = sysGlobalTmmStatGroup.setStatus('current')
if mibBuilder.loadTexts: sysGlobalTmmStatGroup.setDescription('A collection of objects of sysGlobalTmmStat MIB.')
sysPlatformInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 85)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysPlatformInfoName"), ("F5-BIGIP-SYSTEM-MIB", "sysPlatformInfoMarketingName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysPlatformInfoGroup = sysPlatformInfoGroup.setStatus('current')
if mibBuilder.loadTexts: sysPlatformInfoGroup.setDescription('A collection of objects of sysPlatformInfo MIB.')
sysLogicalDiskGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 86)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysLogicalDiskNumber"), ("F5-BIGIP-SYSTEM-MIB", "sysLogicalDiskSlotId"), ("F5-BIGIP-SYSTEM-MIB", "sysLogicalDiskName"), ("F5-BIGIP-SYSTEM-MIB", "sysLogicalDiskDevname"), ("F5-BIGIP-SYSTEM-MIB", "sysLogicalDiskMedia"), ("F5-BIGIP-SYSTEM-MIB", "sysLogicalDiskSize"), ("F5-BIGIP-SYSTEM-MIB", "sysLogicalDiskFormat"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysLogicalDiskGroup = sysLogicalDiskGroup.setStatus('current')
if mibBuilder.loadTexts: sysLogicalDiskGroup.setDescription('A collection of objects of sysLogicalDisk MIB.')
sysPhysicalDiskGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 87)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysPhysicalDiskNumber"), ("F5-BIGIP-SYSTEM-MIB", "sysPhysicalDiskSerialNumber"), ("F5-BIGIP-SYSTEM-MIB", "sysPhysicalDiskSlotId"), ("F5-BIGIP-SYSTEM-MIB", "sysPhysicalDiskName"), ("F5-BIGIP-SYSTEM-MIB", "sysPhysicalDiskIsArrayMember"), ("F5-BIGIP-SYSTEM-MIB", "sysPhysicalDiskArrayStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysPhysicalDiskGroup = sysPhysicalDiskGroup.setStatus('current')
if mibBuilder.loadTexts: sysPhysicalDiskGroup.setDescription('A collection of objects of sysPhysicalDisk MIB.')
sysDiskBayGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 88)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysDiskBayNumber"), ("F5-BIGIP-SYSTEM-MIB", "sysDiskBayId"), ("F5-BIGIP-SYSTEM-MIB", "sysDiskBayDiskSerialNumber"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysDiskBayGroup = sysDiskBayGroup.setStatus('current')
if mibBuilder.loadTexts: sysDiskBayGroup.setDescription('A collection of objects of sysDiskBay MIB.')
sysLogicalDiskMembersGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 89)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysLogicalDiskMembersNumber"), ("F5-BIGIP-SYSTEM-MIB", "sysLogicalDiskMembersDevname"), ("F5-BIGIP-SYSTEM-MIB", "sysLogicalDiskMembersSerialNumber"), ("F5-BIGIP-SYSTEM-MIB", "sysLogicalDiskMembersSlotId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysLogicalDiskMembersGroup = sysLogicalDiskMembersGroup.setStatus('current')
if mibBuilder.loadTexts: sysLogicalDiskMembersGroup.setDescription('A collection of objects of sysLogicalDiskMembers MIB.')
sysProcPidStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 90)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysProcPidStatNumber"), ("F5-BIGIP-SYSTEM-MIB", "sysProcPidStatPid"), ("F5-BIGIP-SYSTEM-MIB", "sysProcPidStatProcName"), ("F5-BIGIP-SYSTEM-MIB", "sysProcPidStatCommandLine"), ("F5-BIGIP-SYSTEM-MIB", "sysProcPidStatModules"), ("F5-BIGIP-SYSTEM-MIB", "sysProcPidStatBladeNum"), ("F5-BIGIP-SYSTEM-MIB", "sysProcPidStatProcessor"), ("F5-BIGIP-SYSTEM-MIB", "sysProcPidStatUpdateTime"), ("F5-BIGIP-SYSTEM-MIB", "sysProcPidStatCpuUsageRecent"), ("F5-BIGIP-SYSTEM-MIB", "sysProcPidStatCpuUsage1min"), ("F5-BIGIP-SYSTEM-MIB", "sysProcPidStatCpuUsage5mins"), ("F5-BIGIP-SYSTEM-MIB", "sysProcPidStatSystemUsageRecent"), ("F5-BIGIP-SYSTEM-MIB", "sysProcPidStatSystemUsage1min"), ("F5-BIGIP-SYSTEM-MIB", "sysProcPidStatSystemUsage5mins"), ("F5-BIGIP-SYSTEM-MIB", "sysProcPidStatPpid"), ("F5-BIGIP-SYSTEM-MIB", "sysProcPidStatPgrp"), ("F5-BIGIP-SYSTEM-MIB", "sysProcPidStatState"), ("F5-BIGIP-SYSTEM-MIB", "sysProcPidStatSession"), ("F5-BIGIP-SYSTEM-MIB", "sysProcPidStatTtyNr"), ("F5-BIGIP-SYSTEM-MIB", "sysProcPidStatTpgid"), ("F5-BIGIP-SYSTEM-MIB", "sysProcPidStatFlags"), ("F5-BIGIP-SYSTEM-MIB", "sysProcPidStatMinFlt"), ("F5-BIGIP-SYSTEM-MIB", "sysProcPidStatCminFlt"), ("F5-BIGIP-SYSTEM-MIB", "sysProcPidStatMajFlt"), ("F5-BIGIP-SYSTEM-MIB", "sysProcPidStatCmajFlt"), ("F5-BIGIP-SYSTEM-MIB", "sysProcPidStatUtime"), ("F5-BIGIP-SYSTEM-MIB", "sysProcPidStatStime"), ("F5-BIGIP-SYSTEM-MIB", "sysProcPidStatCutime"), ("F5-BIGIP-SYSTEM-MIB", "sysProcPidStatCstime"), ("F5-BIGIP-SYSTEM-MIB", "sysProcPidStatPriority"), ("F5-BIGIP-SYSTEM-MIB", "sysProcPidStatNice"), ("F5-BIGIP-SYSTEM-MIB", "sysProcPidStatNumThreads"), ("F5-BIGIP-SYSTEM-MIB", "sysProcPidStatItrealvalue"), ("F5-BIGIP-SYSTEM-MIB", "sysProcPidStatStartTime"), ("F5-BIGIP-SYSTEM-MIB", "sysProcPidStatVsize"), ("F5-BIGIP-SYSTEM-MIB", "sysProcPidStatRss"), ("F5-BIGIP-SYSTEM-MIB", "sysProcPidStatRssRlim"), ("F5-BIGIP-SYSTEM-MIB", "sysProcPidStatStartCode"), ("F5-BIGIP-SYSTEM-MIB", "sysProcPidStatEndCode"), ("F5-BIGIP-SYSTEM-MIB", "sysProcPidStatStartStack"), ("F5-BIGIP-SYSTEM-MIB", "sysProcPidStatKstkEsp"), ("F5-BIGIP-SYSTEM-MIB", "sysProcPidStatKstkEip"), ("F5-BIGIP-SYSTEM-MIB", "sysProcPidStatSignal"), ("F5-BIGIP-SYSTEM-MIB", "sysProcPidStatBlocked"), ("F5-BIGIP-SYSTEM-MIB", "sysProcPidStatSigignore"), ("F5-BIGIP-SYSTEM-MIB", "sysProcPidStatSigcatch"), ("F5-BIGIP-SYSTEM-MIB", "sysProcPidStatWchan"), ("F5-BIGIP-SYSTEM-MIB", "sysProcPidStatNswap"), ("F5-BIGIP-SYSTEM-MIB", "sysProcPidStatCnswap"), ("F5-BIGIP-SYSTEM-MIB", "sysProcPidStatExitSignal"), ("F5-BIGIP-SYSTEM-MIB", "sysProcPidStatRtPriority"), ("F5-BIGIP-SYSTEM-MIB", "sysProcPidStatPolicy"), ("F5-BIGIP-SYSTEM-MIB", "sysProcPidStatProgSize"), ("F5-BIGIP-SYSTEM-MIB", "sysProcPidStatResident"), ("F5-BIGIP-SYSTEM-MIB", "sysProcPidStatShare"), ("F5-BIGIP-SYSTEM-MIB", "sysProcPidStatTSize"), ("F5-BIGIP-SYSTEM-MIB", "sysProcPidStatLSize"), ("F5-BIGIP-SYSTEM-MIB", "sysProcPidStatDSize"), ("F5-BIGIP-SYSTEM-MIB", "sysProcPidStatDirty"), ("F5-BIGIP-SYSTEM-MIB", "sysProcPidStatVsizeKb"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysProcPidStatGroup = sysProcPidStatGroup.setStatus('current')
if mibBuilder.loadTexts: sysProcPidStatGroup.setDescription('A collection of objects of sysProcPidStat MIB.')
sysHttpCompressionStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 91)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysHttpCompressionStatResetStats"), ("F5-BIGIP-SYSTEM-MIB", "sysHttpCompressionStatPrecompressBytes"), ("F5-BIGIP-SYSTEM-MIB", "sysHttpCompressionStatPostcompressBytes"), ("F5-BIGIP-SYSTEM-MIB", "sysHttpCompressionStatNullCompressBytes"), ("F5-BIGIP-SYSTEM-MIB", "sysHttpCompressionStatHtmlPrecompressBytes"), ("F5-BIGIP-SYSTEM-MIB", "sysHttpCompressionStatHtmlPostcompressBytes"), ("F5-BIGIP-SYSTEM-MIB", "sysHttpCompressionStatCssPrecompressBytes"), ("F5-BIGIP-SYSTEM-MIB", "sysHttpCompressionStatCssPostcompressBytes"), ("F5-BIGIP-SYSTEM-MIB", "sysHttpCompressionStatJsPrecompressBytes"), ("F5-BIGIP-SYSTEM-MIB", "sysHttpCompressionStatJsPostcompressBytes"), ("F5-BIGIP-SYSTEM-MIB", "sysHttpCompressionStatXmlPrecompressBytes"), ("F5-BIGIP-SYSTEM-MIB", "sysHttpCompressionStatXmlPostcompressBytes"), ("F5-BIGIP-SYSTEM-MIB", "sysHttpCompressionStatSgmlPrecompressBytes"), ("F5-BIGIP-SYSTEM-MIB", "sysHttpCompressionStatSgmlPostcompressBytes"), ("F5-BIGIP-SYSTEM-MIB", "sysHttpCompressionStatPlainPrecompressBytes"), ("F5-BIGIP-SYSTEM-MIB", "sysHttpCompressionStatPlainPostcompressBytes"), ("F5-BIGIP-SYSTEM-MIB", "sysHttpCompressionStatOctetPrecompressBytes"), ("F5-BIGIP-SYSTEM-MIB", "sysHttpCompressionStatOctetPostcompressBytes"), ("F5-BIGIP-SYSTEM-MIB", "sysHttpCompressionStatImagePrecompressBytes"), ("F5-BIGIP-SYSTEM-MIB", "sysHttpCompressionStatImagePostcompressBytes"), ("F5-BIGIP-SYSTEM-MIB", "sysHttpCompressionStatVideoPrecompressBytes"), ("F5-BIGIP-SYSTEM-MIB", "sysHttpCompressionStatVideoPostcompressBytes"), ("F5-BIGIP-SYSTEM-MIB", "sysHttpCompressionStatAudioPrecompressBytes"), ("F5-BIGIP-SYSTEM-MIB", "sysHttpCompressionStatAudioPostcompressBytes"), ("F5-BIGIP-SYSTEM-MIB", "sysHttpCompressionStatOtherPrecompressBytes"), ("F5-BIGIP-SYSTEM-MIB", "sysHttpCompressionStatOtherPostcompressBytes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysHttpCompressionStatGroup = sysHttpCompressionStatGroup.setStatus('current')
if mibBuilder.loadTexts: sysHttpCompressionStatGroup.setDescription('A collection of objects of sysGlobalHttpCompressionStat MIB.')
sysWebAccelerationStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 92)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysWebAccelerationStatResetStats"), ("F5-BIGIP-SYSTEM-MIB", "sysWebAccelerationStatCacheHits"), ("F5-BIGIP-SYSTEM-MIB", "sysWebAccelerationStatCacheMisses"), ("F5-BIGIP-SYSTEM-MIB", "sysWebAccelerationStatCacheMissesAll"), ("F5-BIGIP-SYSTEM-MIB", "sysWebAccelerationStatCacheHitBytes"), ("F5-BIGIP-SYSTEM-MIB", "sysWebAccelerationStatCacheMissBytes"), ("F5-BIGIP-SYSTEM-MIB", "sysWebAccelerationStatCacheMissBytesAll"), ("F5-BIGIP-SYSTEM-MIB", "sysWebAccelerationStatCacheSize"), ("F5-BIGIP-SYSTEM-MIB", "sysWebAccelerationStatCacheCount"), ("F5-BIGIP-SYSTEM-MIB", "sysWebAccelerationStatCacheEvictions"), ("F5-BIGIP-SYSTEM-MIB", "sysWebAccelerationStatInterStripeHits"), ("F5-BIGIP-SYSTEM-MIB", "sysWebAccelerationStatInterStripeMisses"), ("F5-BIGIP-SYSTEM-MIB", "sysWebAccelerationStatInterStripeHitBytes"), ("F5-BIGIP-SYSTEM-MIB", "sysWebAccelerationStatInterStripeSize"), ("F5-BIGIP-SYSTEM-MIB", "sysWebAccelerationStatInterStripeCount"), ("F5-BIGIP-SYSTEM-MIB", "sysWebAccelerationStatInterStripeEvictions"), ("F5-BIGIP-SYSTEM-MIB", "sysWebAccelerationStatRemoteHits"), ("F5-BIGIP-SYSTEM-MIB", "sysWebAccelerationStatRemoteMisses"), ("F5-BIGIP-SYSTEM-MIB", "sysWebAccelerationStatRemoteHitBytes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysWebAccelerationStatGroup = sysWebAccelerationStatGroup.setStatus('current')
if mibBuilder.loadTexts: sysWebAccelerationStatGroup.setDescription('A collection of objects of sysGlobalWebAccelerationStat MIB.')
sysVlanStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 93)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysVlanStatNumber"), ("F5-BIGIP-SYSTEM-MIB", "sysVlanStatVlanName"), ("F5-BIGIP-SYSTEM-MIB", "sysVlanStatPktsIn"), ("F5-BIGIP-SYSTEM-MIB", "sysVlanStatBytesIn"), ("F5-BIGIP-SYSTEM-MIB", "sysVlanStatPktsOut"), ("F5-BIGIP-SYSTEM-MIB", "sysVlanStatBytesOut"), ("F5-BIGIP-SYSTEM-MIB", "sysVlanStatMcastIn"), ("F5-BIGIP-SYSTEM-MIB", "sysVlanStatMcastOut"), ("F5-BIGIP-SYSTEM-MIB", "sysVlanStatErrorsIn"), ("F5-BIGIP-SYSTEM-MIB", "sysVlanStatErrorsOut"), ("F5-BIGIP-SYSTEM-MIB", "sysVlanStatDropsIn"), ("F5-BIGIP-SYSTEM-MIB", "sysVlanStatDropsOut"), ("F5-BIGIP-SYSTEM-MIB", "sysVlanStatCollisions"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysVlanStatGroup = sysVlanStatGroup.setStatus('current')
if mibBuilder.loadTexts: sysVlanStatGroup.setDescription('A collection of objects of sysVlanStat MIB.')
sysVlanxStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 94)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysVlanxStatNumber"), ("F5-BIGIP-SYSTEM-MIB", "sysVlanxStatVlanName"), ("F5-BIGIP-SYSTEM-MIB", "sysVlanxStatInMulticastPkts"), ("F5-BIGIP-SYSTEM-MIB", "sysVlanxStatInBroadcastPkts"), ("F5-BIGIP-SYSTEM-MIB", "sysVlanxStatOutMulticastPkts"), ("F5-BIGIP-SYSTEM-MIB", "sysVlanxStatOutBroadcastPkts"), ("F5-BIGIP-SYSTEM-MIB", "sysVlanxStatHcInOctets"), ("F5-BIGIP-SYSTEM-MIB", "sysVlanxStatHcInUcastPkts"), ("F5-BIGIP-SYSTEM-MIB", "sysVlanxStatHcInMulticastPkts"), ("F5-BIGIP-SYSTEM-MIB", "sysVlanxStatHcInBroadcastPkts"), ("F5-BIGIP-SYSTEM-MIB", "sysVlanxStatHcOutOctets"), ("F5-BIGIP-SYSTEM-MIB", "sysVlanxStatHcOutUcastPkts"), ("F5-BIGIP-SYSTEM-MIB", "sysVlanxStatHcOutMulticastPkts"), ("F5-BIGIP-SYSTEM-MIB", "sysVlanxStatHcOutBroadcastPkts"), ("F5-BIGIP-SYSTEM-MIB", "sysVlanxStatHighSpeed"), ("F5-BIGIP-SYSTEM-MIB", "sysVlanxStatConnectorPresent"), ("F5-BIGIP-SYSTEM-MIB", "sysVlanxStatCounterDiscontinuityTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysVlanxStatGroup = sysVlanxStatGroup.setStatus('current')
if mibBuilder.loadTexts: sysVlanxStatGroup.setDescription('A collection of objects of sysVlanxStat MIB.')
sysVcmpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 95)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysVcmpNumber"), ("F5-BIGIP-SYSTEM-MIB", "sysVcmpVcmpName"), ("F5-BIGIP-SYSTEM-MIB", "sysVcmpHostname"), ("F5-BIGIP-SYSTEM-MIB", "sysVcmpSlots"), ("F5-BIGIP-SYSTEM-MIB", "sysVcmpState"), ("F5-BIGIP-SYSTEM-MIB", "sysVcmpMgmtNetwork"), ("F5-BIGIP-SYSTEM-MIB", "sysVcmpMgmtAddrType"), ("F5-BIGIP-SYSTEM-MIB", "sysVcmpMgmtAddr"), ("F5-BIGIP-SYSTEM-MIB", "sysVcmpMgmtNetmaskType"), ("F5-BIGIP-SYSTEM-MIB", "sysVcmpMgmtNetmask"), ("F5-BIGIP-SYSTEM-MIB", "sysVcmpMgmtGwType"), ("F5-BIGIP-SYSTEM-MIB", "sysVcmpMgmtGw"), ("F5-BIGIP-SYSTEM-MIB", "sysVcmpVcmpId"), ("F5-BIGIP-SYSTEM-MIB", "sysVcmpMgmtBaseMac"), ("F5-BIGIP-SYSTEM-MIB", "sysVcmpBaseMac"), ("F5-BIGIP-SYSTEM-MIB", "sysVcmpMacPoolSize"), ("F5-BIGIP-SYSTEM-MIB", "sysVcmpInitialImage"), ("F5-BIGIP-SYSTEM-MIB", "sysVcmpVirtualDisk"), ("F5-BIGIP-SYSTEM-MIB", "sysVcmpInitialHotfix"), ("F5-BIGIP-SYSTEM-MIB", "sysVcmpMinSlots"), ("F5-BIGIP-SYSTEM-MIB", "sysVcmpCoresPerSlot"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysVcmpGroup = sysVcmpGroup.setStatus('current')
if mibBuilder.loadTexts: sysVcmpGroup.setDescription('A collection of objects of sysVcmp MIB.')
sysVcmpCpuCoreGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 96)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysVcmpCpuCoreNumber"), ("F5-BIGIP-SYSTEM-MIB", "sysVcmpCpuCoreVcmpName"), ("F5-BIGIP-SYSTEM-MIB", "sysVcmpCpuCoreCpuCoreId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysVcmpCpuCoreGroup = sysVcmpCpuCoreGroup.setStatus('current')
if mibBuilder.loadTexts: sysVcmpCpuCoreGroup.setDescription('A collection of objects of sysVcmpCpuCore MIB.')
sysVcmpVlanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 97)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysVcmpVlanNumber"), ("F5-BIGIP-SYSTEM-MIB", "sysVcmpVlanVcmpName"), ("F5-BIGIP-SYSTEM-MIB", "sysVcmpVlanVlanName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysVcmpVlanGroup = sysVcmpVlanGroup.setStatus('current')
if mibBuilder.loadTexts: sysVcmpVlanGroup.setDescription('A collection of objects of sysVcmpVlan MIB.')
sysVcmpStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 98)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysVcmpStatNumber"), ("F5-BIGIP-SYSTEM-MIB", "sysVcmpStatVcmpName"), ("F5-BIGIP-SYSTEM-MIB", "sysVcmpStatVcmpId"), ("F5-BIGIP-SYSTEM-MIB", "sysVcmpStatSlotId"), ("F5-BIGIP-SYSTEM-MIB", "sysVcmpStatVmStatus"), ("F5-BIGIP-SYSTEM-MIB", "sysVcmpStatDiskUse"), ("F5-BIGIP-SYSTEM-MIB", "sysVcmpStatMemoryUse"), ("F5-BIGIP-SYSTEM-MIB", "sysVcmpStatBaseMac"), ("F5-BIGIP-SYSTEM-MIB", "sysVcmpStatMacPoolSize"), ("F5-BIGIP-SYSTEM-MIB", "sysVcmpStatCores"), ("F5-BIGIP-SYSTEM-MIB", "sysVcmpStatVdisk"), ("F5-BIGIP-SYSTEM-MIB", "sysVcmpStatStarts"), ("F5-BIGIP-SYSTEM-MIB", "sysVcmpStatRetries"), ("F5-BIGIP-SYSTEM-MIB", "sysVcmpStatUptime"), ("F5-BIGIP-SYSTEM-MIB", "sysVcmpStatComment"), ("F5-BIGIP-SYSTEM-MIB", "sysVcmpStatInterfaceNames"), ("F5-BIGIP-SYSTEM-MIB", "sysVcmpStatCoreNames"), ("F5-BIGIP-SYSTEM-MIB", "sysVcmpStatPrompt"), ("F5-BIGIP-SYSTEM-MIB", "sysVcmpStatCpuUsageRecent"), ("F5-BIGIP-SYSTEM-MIB", "sysVcmpStatCpuUsage1min"), ("F5-BIGIP-SYSTEM-MIB", "sysVcmpStatCpuUsage5mins"), ("F5-BIGIP-SYSTEM-MIB", "sysVcmpStatPktsIn"), ("F5-BIGIP-SYSTEM-MIB", "sysVcmpStatBytesIn"), ("F5-BIGIP-SYSTEM-MIB", "sysVcmpStatMcastIn"), ("F5-BIGIP-SYSTEM-MIB", "sysVcmpStatDropsIn"), ("F5-BIGIP-SYSTEM-MIB", "sysVcmpStatPktsOut"), ("F5-BIGIP-SYSTEM-MIB", "sysVcmpStatBytesOut"), ("F5-BIGIP-SYSTEM-MIB", "sysVcmpStatMcastOut"), ("F5-BIGIP-SYSTEM-MIB", "sysVcmpStatDropsOut"), ("F5-BIGIP-SYSTEM-MIB", "sysVcmpStatDiskUseKb"), ("F5-BIGIP-SYSTEM-MIB", "sysVcmpStatMemoryUseKb"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysVcmpStatGroup = sysVcmpStatGroup.setStatus('current')
if mibBuilder.loadTexts: sysVcmpStatGroup.setDescription('A collection of objects of sysVcmpStat MIB.')
sysChassisSlotGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 99)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysChassisSlotNumber"), ("F5-BIGIP-SYSTEM-MIB", "sysChassisSlotSlotId"), ("F5-BIGIP-SYSTEM-MIB", "sysChassisSlotSerialNumber"), ("F5-BIGIP-SYSTEM-MIB", "sysChassisSlotDown"), ("F5-BIGIP-SYSTEM-MIB", "sysChassisSlotState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysChassisSlotGroup = sysChassisSlotGroup.setStatus('current')
if mibBuilder.loadTexts: sysChassisSlotGroup.setDescription('A collection of objects of sysChassisSlot MIB.')
sysSysDeviceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 100)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysSysDeviceNumber"), ("F5-BIGIP-SYSTEM-MIB", "sysSysDeviceName"), ("F5-BIGIP-SYSTEM-MIB", "sysSysDeviceMgmtIp"), ("F5-BIGIP-SYSTEM-MIB", "sysSysDeviceMgmtIpType"), ("F5-BIGIP-SYSTEM-MIB", "sysSysDeviceHostname"), ("F5-BIGIP-SYSTEM-MIB", "sysSysDeviceMirrorIp"), ("F5-BIGIP-SYSTEM-MIB", "sysSysDeviceMirrorIpType"), ("F5-BIGIP-SYSTEM-MIB", "sysSysDeviceMirrorSecondaryIp"), ("F5-BIGIP-SYSTEM-MIB", "sysSysDeviceMirrorSecondaryIpType"), ("F5-BIGIP-SYSTEM-MIB", "sysSysDeviceMulticastInterface"), ("F5-BIGIP-SYSTEM-MIB", "sysSysDeviceMulticastAddr"), ("F5-BIGIP-SYSTEM-MIB", "sysSysDeviceMulticastAddrType"), ("F5-BIGIP-SYSTEM-MIB", "sysSysDeviceMulticastPort"), ("F5-BIGIP-SYSTEM-MIB", "sysSysDeviceVersion"), ("F5-BIGIP-SYSTEM-MIB", "sysSysDeviceProduct"), ("F5-BIGIP-SYSTEM-MIB", "sysSysDeviceEdition"), ("F5-BIGIP-SYSTEM-MIB", "sysSysDeviceMarketingName"), ("F5-BIGIP-SYSTEM-MIB", "sysSysDevicePlatformId"), ("F5-BIGIP-SYSTEM-MIB", "sysSysDeviceChassisId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysSysDeviceGroup = sysSysDeviceGroup.setStatus('current')
if mibBuilder.loadTexts: sysSysDeviceGroup.setDescription('A collection of objects of sysSysDevice MIB.')
sysUnicastAddrGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 101)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysUnicastAddrNumber"), ("F5-BIGIP-SYSTEM-MIB", "sysUnicastAddrName"), ("F5-BIGIP-SYSTEM-MIB", "sysUnicastAddrIndex"), ("F5-BIGIP-SYSTEM-MIB", "sysUnicastAddrSourceIp"), ("F5-BIGIP-SYSTEM-MIB", "sysUnicastAddrSourceIpType"), ("F5-BIGIP-SYSTEM-MIB", "sysUnicastAddrSourcePort"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysUnicastAddrGroup = sysUnicastAddrGroup.setStatus('current')
if mibBuilder.loadTexts: sysUnicastAddrGroup.setDescription('A collection of objects of sysUnicastAddr MIB.')
sysSysDeviceActiveModulesGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 102)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysSysDeviceActiveModulesNumber"), ("F5-BIGIP-SYSTEM-MIB", "sysSysDeviceActiveModulesName"), ("F5-BIGIP-SYSTEM-MIB", "sysSysDeviceActiveModulesIndex"), ("F5-BIGIP-SYSTEM-MIB", "sysSysDeviceActiveModulesModule"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysSysDeviceActiveModulesGroup = sysSysDeviceActiveModulesGroup.setStatus('current')
if mibBuilder.loadTexts: sysSysDeviceActiveModulesGroup.setDescription('A collection of objects of sysSysDeviceActiveModules MIB.')
sysSysDeviceInactiveModulesGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 103)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysSysDeviceInactiveModulesNumber"), ("F5-BIGIP-SYSTEM-MIB", "sysSysDeviceInactiveModulesName"), ("F5-BIGIP-SYSTEM-MIB", "sysSysDeviceInactiveModulesIndex"), ("F5-BIGIP-SYSTEM-MIB", "sysSysDeviceInactiveModulesModule"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysSysDeviceInactiveModulesGroup = sysSysDeviceInactiveModulesGroup.setStatus('current')
if mibBuilder.loadTexts: sysSysDeviceInactiveModulesGroup.setDescription('A collection of objects of sysSysDeviceInactiveModules MIB.')
sysSysDeviceOptionalModulesGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 104)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysSysDeviceOptionalModulesNumber"), ("F5-BIGIP-SYSTEM-MIB", "sysSysDeviceOptionalModulesName"), ("F5-BIGIP-SYSTEM-MIB", "sysSysDeviceOptionalModulesIndex"), ("F5-BIGIP-SYSTEM-MIB", "sysSysDeviceOptionalModulesModule"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysSysDeviceOptionalModulesGroup = sysSysDeviceOptionalModulesGroup.setStatus('current')
if mibBuilder.loadTexts: sysSysDeviceOptionalModulesGroup.setDescription('A collection of objects of sysSysDeviceOptionalModules MIB.')
sysSysDeviceTimelimitedModulesGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 105)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysSysDeviceTimelimitedModulesNumber"), ("F5-BIGIP-SYSTEM-MIB", "sysSysDeviceTimelimitedModulesName"), ("F5-BIGIP-SYSTEM-MIB", "sysSysDeviceTimelimitedModulesIndex"), ("F5-BIGIP-SYSTEM-MIB", "sysSysDeviceTimelimitedModulesModule"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysSysDeviceTimelimitedModulesGroup = sysSysDeviceTimelimitedModulesGroup.setStatus('current')
if mibBuilder.loadTexts: sysSysDeviceTimelimitedModulesGroup.setDescription('A collection of objects of sysSysDeviceTimelimitedModules MIB.')
sysStpGlobals2Group = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 106)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysStpGlobals2Number"), ("F5-BIGIP-SYSTEM-MIB", "sysStpGlobals2Mode"), ("F5-BIGIP-SYSTEM-MIB", "sysStpGlobals2FwdDelay"), ("F5-BIGIP-SYSTEM-MIB", "sysStpGlobals2HelloTime"), ("F5-BIGIP-SYSTEM-MIB", "sysStpGlobals2MaxAge"), ("F5-BIGIP-SYSTEM-MIB", "sysStpGlobals2TransmitHold"), ("F5-BIGIP-SYSTEM-MIB", "sysStpGlobals2MaxHops"), ("F5-BIGIP-SYSTEM-MIB", "sysStpGlobals2Identifier"), ("F5-BIGIP-SYSTEM-MIB", "sysStpGlobals2Revision"), ("F5-BIGIP-SYSTEM-MIB", "sysStpGlobals2Name"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysStpGlobals2Group = sysStpGlobals2Group.setStatus('current')
if mibBuilder.loadTexts: sysStpGlobals2Group.setDescription('A collection of objects of sysStpGlobals2 MIB.')
sysCpuSensorGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 107)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysCpuSensorNumber"), ("F5-BIGIP-SYSTEM-MIB", "sysCpuSensorIndex"), ("F5-BIGIP-SYSTEM-MIB", "sysCpuSensorTemperature"), ("F5-BIGIP-SYSTEM-MIB", "sysCpuSensorFanSpeed"), ("F5-BIGIP-SYSTEM-MIB", "sysCpuSensorName"), ("F5-BIGIP-SYSTEM-MIB", "sysCpuSensorSlot"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysCpuSensorGroup = sysCpuSensorGroup.setStatus('current')
if mibBuilder.loadTexts: sysCpuSensorGroup.setDescription('A collection of objects of sysCpuSensor MIB.')
sysCmSyncStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 108)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysCmSyncStatusId"), ("F5-BIGIP-SYSTEM-MIB", "sysCmSyncStatusStatus"), ("F5-BIGIP-SYSTEM-MIB", "sysCmSyncStatusColor"), ("F5-BIGIP-SYSTEM-MIB", "sysCmSyncStatusSummary"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysCmSyncStatusGroup = sysCmSyncStatusGroup.setStatus('current')
if mibBuilder.loadTexts: sysCmSyncStatusGroup.setDescription('A collection of objects of sysCmSyncStatus MIB.')
sysCmSyncStatusDetailsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 109)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysCmSyncStatusDetailsNumber"), ("F5-BIGIP-SYSTEM-MIB", "sysCmSyncStatusDetailsIndex"), ("F5-BIGIP-SYSTEM-MIB", "sysCmSyncStatusDetailsDetails"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysCmSyncStatusDetailsGroup = sysCmSyncStatusDetailsGroup.setStatus('current')
if mibBuilder.loadTexts: sysCmSyncStatusDetailsGroup.setDescription('A collection of objects of sysCmSyncStatusDetails MIB.')
sysCmFailoverStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 110)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysCmFailoverStatusId"), ("F5-BIGIP-SYSTEM-MIB", "sysCmFailoverStatusStatus"), ("F5-BIGIP-SYSTEM-MIB", "sysCmFailoverStatusColor"), ("F5-BIGIP-SYSTEM-MIB", "sysCmFailoverStatusSummary"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysCmFailoverStatusGroup = sysCmFailoverStatusGroup.setStatus('current')
if mibBuilder.loadTexts: sysCmFailoverStatusGroup.setDescription('A collection of objects of sysCmFailoverStatus MIB.')
sysCmFailoverStatusDetailsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 111)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysCmFailoverStatusDetailsNumber"), ("F5-BIGIP-SYSTEM-MIB", "sysCmFailoverStatusDetailsIndex"), ("F5-BIGIP-SYSTEM-MIB", "sysCmFailoverStatusDetailsDetails"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysCmFailoverStatusDetailsGroup = sysCmFailoverStatusDetailsGroup.setStatus('current')
if mibBuilder.loadTexts: sysCmFailoverStatusDetailsGroup.setDescription('A collection of objects of sysCmFailoverStatusDetails MIB.')
sysCmTrafficGroupStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 112)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysCmTrafficGroupStatusNumber"), ("F5-BIGIP-SYSTEM-MIB", "sysCmTrafficGroupStatusTrafficGroup"), ("F5-BIGIP-SYSTEM-MIB", "sysCmTrafficGroupStatusDeviceName"), ("F5-BIGIP-SYSTEM-MIB", "sysCmTrafficGroupStatusFailoverStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysCmTrafficGroupStatusGroup = sysCmTrafficGroupStatusGroup.setStatus('current')
if mibBuilder.loadTexts: sysCmTrafficGroupStatusGroup.setDescription('A collection of objects of sysCmTrafficGroupStatus MIB.')
sysDnsStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 113)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysDnsStatResetStats"), ("F5-BIGIP-SYSTEM-MIB", "sysDnsStatQueries"), ("F5-BIGIP-SYSTEM-MIB", "sysDnsStatResponses"), ("F5-BIGIP-SYSTEM-MIB", "sysDnsStatResponsesPerSec"), ("F5-BIGIP-SYSTEM-MIB", "sysDnsStatToGtm"), ("F5-BIGIP-SYSTEM-MIB", "sysDnsStatDnsExpressReqs"), ("F5-BIGIP-SYSTEM-MIB", "sysDnsStatDnsExpressNotifies"), ("F5-BIGIP-SYSTEM-MIB", "sysDnsStatToCache"), ("F5-BIGIP-SYSTEM-MIB", "sysDnsStatToDns"), ("F5-BIGIP-SYSTEM-MIB", "sysDnsStatDns64Reqs"), ("F5-BIGIP-SYSTEM-MIB", "sysDnsStatDns64Rewrites"), ("F5-BIGIP-SYSTEM-MIB", "sysDnsStatDns64Failures"), ("F5-BIGIP-SYSTEM-MIB", "sysDnsStatHints"), ("F5-BIGIP-SYSTEM-MIB", "sysDnsStatRejects"), ("F5-BIGIP-SYSTEM-MIB", "sysDnsStatNoErrors"), ("F5-BIGIP-SYSTEM-MIB", "sysDnsStatDrops"), ("F5-BIGIP-SYSTEM-MIB", "sysDnsStatMalformed"), ("F5-BIGIP-SYSTEM-MIB", "sysDnsStatTclSuspends"), ("F5-BIGIP-SYSTEM-MIB", "sysDnsStatRecursionDesired"), ("F5-BIGIP-SYSTEM-MIB", "sysDnsStatCheckingDisabled"), ("F5-BIGIP-SYSTEM-MIB", "sysDnsStatEdns0"), ("F5-BIGIP-SYSTEM-MIB", "sysDnsStatOpcodeQuery"), ("F5-BIGIP-SYSTEM-MIB", "sysDnsStatOpcodeNotify"), ("F5-BIGIP-SYSTEM-MIB", "sysDnsStatOpcodeUpdate"), ("F5-BIGIP-SYSTEM-MIB", "sysDnsStatZoneIxfr"), ("F5-BIGIP-SYSTEM-MIB", "sysDnsStatZoneAxfr"), ("F5-BIGIP-SYSTEM-MIB", "sysDnsStatAuthoritativeAnswer"), ("F5-BIGIP-SYSTEM-MIB", "sysDnsStatRecursionAvailable"), ("F5-BIGIP-SYSTEM-MIB", "sysDnsStatAuthenticatedData"), ("F5-BIGIP-SYSTEM-MIB", "sysDnsStatTruncated"), ("F5-BIGIP-SYSTEM-MIB", "sysDnsStatRcodeNoerror"), ("F5-BIGIP-SYSTEM-MIB", "sysDnsStatRcodeNxdomain"), ("F5-BIGIP-SYSTEM-MIB", "sysDnsStatRcodeServfail"), ("F5-BIGIP-SYSTEM-MIB", "sysDnsStatRcodeRefused"), ("F5-BIGIP-SYSTEM-MIB", "sysDnsStatMalicious"), ("F5-BIGIP-SYSTEM-MIB", "sysDnsStatAReqs"), ("F5-BIGIP-SYSTEM-MIB", "sysDnsStatAaaaReqs"), ("F5-BIGIP-SYSTEM-MIB", "sysDnsStatAnyReqs"), ("F5-BIGIP-SYSTEM-MIB", "sysDnsStatCnameReqs"), ("F5-BIGIP-SYSTEM-MIB", "sysDnsStatMxReqs"), ("F5-BIGIP-SYSTEM-MIB", "sysDnsStatNsReqs"), ("F5-BIGIP-SYSTEM-MIB", "sysDnsStatPtrReqs"), ("F5-BIGIP-SYSTEM-MIB", "sysDnsStatSoaReqs"), ("F5-BIGIP-SYSTEM-MIB", "sysDnsStatSrvReqs"), ("F5-BIGIP-SYSTEM-MIB", "sysDnsStatTxtReqs"), ("F5-BIGIP-SYSTEM-MIB", "sysDnsStatOtherReqs"), ("F5-BIGIP-SYSTEM-MIB", "sysDnsStatGtmRewrites"), ("F5-BIGIP-SYSTEM-MIB", "sysDnsStatOpcodeOther"), ("F5-BIGIP-SYSTEM-MIB", "sysDnsStatFastDnsResponses"), ("F5-BIGIP-SYSTEM-MIB", "sysDnsStatFastDnsAllowed"), ("F5-BIGIP-SYSTEM-MIB", "sysDnsStatFastDnsDrops"), ("F5-BIGIP-SYSTEM-MIB", "sysDnsStatFastDnsRespTc"), ("F5-BIGIP-SYSTEM-MIB", "sysDnsStatFastDnsRespNx"), ("F5-BIGIP-SYSTEM-MIB", "sysDnsStatFastDnsRespNe"), ("F5-BIGIP-SYSTEM-MIB", "sysDnsStatFastDnsRespRf"), ("F5-BIGIP-SYSTEM-MIB", "sysDnsStatNaptrReqs"), ("F5-BIGIP-SYSTEM-MIB", "sysDnsStatRcodeBadvers"), ("F5-BIGIP-SYSTEM-MIB", "sysDnsStatFastDnsRespBvers"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysDnsStatGroup = sysDnsStatGroup.setStatus('current')
if mibBuilder.loadTexts: sysDnsStatGroup.setDescription('A collection of objects of sysGlobalDnsStat MIB.')
sysLsnPoolStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 114)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysLsnPoolStatResetStats"), ("F5-BIGIP-SYSTEM-MIB", "sysLsnPoolStatActivePersistenceMappings"), ("F5-BIGIP-SYSTEM-MIB", "sysLsnPoolStatActiveInboundReservations"), ("F5-BIGIP-SYSTEM-MIB", "sysLsnPoolStatTranslationRequests"), ("F5-BIGIP-SYSTEM-MIB", "sysLsnPoolStatHairpinConnectionRequests"), ("F5-BIGIP-SYSTEM-MIB", "sysLsnPoolStatActiveTranslations"), ("F5-BIGIP-SYSTEM-MIB", "sysLsnPoolStatActiveHairpinConnections"), ("F5-BIGIP-SYSTEM-MIB", "sysLsnPoolStatTranslationRequestFailures"), ("F5-BIGIP-SYSTEM-MIB", "sysLsnPoolStatPersistenceMappingFailures"), ("F5-BIGIP-SYSTEM-MIB", "sysLsnPoolStatHairpinConnectionFailures"), ("F5-BIGIP-SYSTEM-MIB", "sysLsnPoolStatBackupPoolTranslations"), ("F5-BIGIP-SYSTEM-MIB", "sysLsnPoolStatLogAttempts"), ("F5-BIGIP-SYSTEM-MIB", "sysLsnPoolStatLogFailures"), ("F5-BIGIP-SYSTEM-MIB", "sysLsnPoolStatTotalEndPoints"), ("F5-BIGIP-SYSTEM-MIB", "sysLsnPoolStatActivePortBlocks"), ("F5-BIGIP-SYSTEM-MIB", "sysLsnPoolStatActiveClientsReachedLimit"), ("F5-BIGIP-SYSTEM-MIB", "sysLsnPoolStatActiveZombiePortBlocks"), ("F5-BIGIP-SYSTEM-MIB", "sysLsnPoolStatTotalClientsReachedLimit"), ("F5-BIGIP-SYSTEM-MIB", "sysLsnPoolStatTotalPortBlockAllocations"), ("F5-BIGIP-SYSTEM-MIB", "sysLsnPoolStatTotalPortBlockAllocationFailures"), ("F5-BIGIP-SYSTEM-MIB", "sysLsnPoolStatTotalPortBlockDeallocations"), ("F5-BIGIP-SYSTEM-MIB", "sysLsnPoolStatTotalZombiePortBlockConnsKilled"), ("F5-BIGIP-SYSTEM-MIB", "sysLsnPoolStatTotalZombiePortBlocksCreated"), ("F5-BIGIP-SYSTEM-MIB", "sysLsnPoolStatTotalZombiePortBlocksDeleted"), ("F5-BIGIP-SYSTEM-MIB", "sysLsnPoolStatEndPointsString"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysLsnPoolStatGroup = sysLsnPoolStatGroup.setStatus('current')
if mibBuilder.loadTexts: sysLsnPoolStatGroup.setDescription('A collection of objects of sysGlobalLsnPoolStat MIB.')
sysFecStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 115)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysFecStatResetStats"), ("F5-BIGIP-SYSTEM-MIB", "sysFecStatNumber"), ("F5-BIGIP-SYSTEM-MIB", "sysFecStatName"), ("F5-BIGIP-SYSTEM-MIB", "sysFecStatProfile"), ("F5-BIGIP-SYSTEM-MIB", "sysFecStatOutRawPackets"), ("F5-BIGIP-SYSTEM-MIB", "sysFecStatOutRawBytes"), ("F5-BIGIP-SYSTEM-MIB", "sysFecStatOutRdndPackets"), ("F5-BIGIP-SYSTEM-MIB", "sysFecStatOutRdndBytes"), ("F5-BIGIP-SYSTEM-MIB", "sysFecStatInRawPackets"), ("F5-BIGIP-SYSTEM-MIB", "sysFecStatInRawBytes"), ("F5-BIGIP-SYSTEM-MIB", "sysFecStatInRdndPackets"), ("F5-BIGIP-SYSTEM-MIB", "sysFecStatInRdndBytes"), ("F5-BIGIP-SYSTEM-MIB", "sysFecStatInRdndLost"), ("F5-BIGIP-SYSTEM-MIB", "sysFecStatInRawLost"), ("F5-BIGIP-SYSTEM-MIB", "sysFecStatRmtInRdndPackets"), ("F5-BIGIP-SYSTEM-MIB", "sysFecStatRmtInRdndLost"), ("F5-BIGIP-SYSTEM-MIB", "sysFecStatRmtInRawPackets"), ("F5-BIGIP-SYSTEM-MIB", "sysFecStatRmtInRawLost"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysFecStatGroup = sysFecStatGroup.setStatus('current')
if mibBuilder.loadTexts: sysFecStatGroup.setDescription('A collection of objects of sysFecStat MIB.')
sysVcmpAssignedSlotsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 116)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysVcmpAssignedSlotsNumber"), ("F5-BIGIP-SYSTEM-MIB", "sysVcmpAssignedSlotsName"), ("F5-BIGIP-SYSTEM-MIB", "sysVcmpAssignedSlotsIndex"), ("F5-BIGIP-SYSTEM-MIB", "sysVcmpAssignedSlotsSlotId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysVcmpAssignedSlotsGroup = sysVcmpAssignedSlotsGroup.setStatus('current')
if mibBuilder.loadTexts: sysVcmpAssignedSlotsGroup.setDescription('A collection of objects of sysVcmpAssignedSlots MIB.')
sysVcmpAllowedSlotsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 117)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysVcmpAllowedSlotsNumber"), ("F5-BIGIP-SYSTEM-MIB", "sysVcmpAllowedSlotsName"), ("F5-BIGIP-SYSTEM-MIB", "sysVcmpAllowedSlotsIndex"), ("F5-BIGIP-SYSTEM-MIB", "sysVcmpAllowedSlotsSlotId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysVcmpAllowedSlotsGroup = sysVcmpAllowedSlotsGroup.setStatus('current')
if mibBuilder.loadTexts: sysVcmpAllowedSlotsGroup.setDescription('A collection of objects of sysVcmpAllowedSlots MIB.')
sysVirtualDiskGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 118)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysVirtualDiskNumber"), ("F5-BIGIP-SYSTEM-MIB", "sysVirtualDiskFilename"), ("F5-BIGIP-SYSTEM-MIB", "sysVirtualDiskOperatingSystem"), ("F5-BIGIP-SYSTEM-MIB", "sysVirtualDiskSlotId"), ("F5-BIGIP-SYSTEM-MIB", "sysVirtualDiskState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysVirtualDiskGroup = sysVirtualDiskGroup.setStatus('current')
if mibBuilder.loadTexts: sysVirtualDiskGroup.setDescription('A collection of objects of sysVirtualDisk MIB.')
sysGlobalSipStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 119)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysGlobalSipStatResetStats"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalSipStatRequests"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalSipStatResponses"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalSipStatBadmsgs"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalSipStatDrops"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysGlobalSipStatGroup = sysGlobalSipStatGroup.setStatus('current')
if mibBuilder.loadTexts: sysGlobalSipStatGroup.setDescription('A collection of objects of sysGlobalSipStat MIB.')
sysGlobalFtpStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 120)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysGlobalFtpStatResetStats"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalFtpStatLoginRequests"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalFtpStatDownloadRequests"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalFtpStatUploadRequests"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalFtpStatFtpsSessions"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalFtpStatPassthruTransitions"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalFtpStatFtpsIntercepts"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalFtpStatFtpsResets"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalFtpStatFtpsBypasses"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalFtpStatPassiveRequests"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalFtpStatActiveRequests"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysGlobalFtpStatGroup = sysGlobalFtpStatGroup.setStatus('current')
if mibBuilder.loadTexts: sysGlobalFtpStatGroup.setDescription('A collection of objects of sysGlobalFtpStat MIB.')
sysBladeTempGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 121)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysBladeTempNumber"), ("F5-BIGIP-SYSTEM-MIB", "sysBladeTempIndex"), ("F5-BIGIP-SYSTEM-MIB", "sysBladeTempTemperature"), ("F5-BIGIP-SYSTEM-MIB", "sysBladeTempLocation"), ("F5-BIGIP-SYSTEM-MIB", "sysBladeTempSlot"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysBladeTempGroup = sysBladeTempGroup.setStatus('current')
if mibBuilder.loadTexts: sysBladeTempGroup.setDescription('A collection of objects of sysBladeTemp MIB.')
sysBladeVoltageGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 122)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysBladeVoltageNumber"), ("F5-BIGIP-SYSTEM-MIB", "sysBladeVoltageIndex"), ("F5-BIGIP-SYSTEM-MIB", "sysBladeVoltageVoltage"), ("F5-BIGIP-SYSTEM-MIB", "sysBladeVoltageSlot"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysBladeVoltageGroup = sysBladeVoltageGroup.setStatus('current')
if mibBuilder.loadTexts: sysBladeVoltageGroup.setDescription('A collection of objects of sysBladeVoltage MIB.')
sysProfilePptpStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 123)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysProfilePptpStatResetStats"), ("F5-BIGIP-SYSTEM-MIB", "sysProfilePptpStatStartRequests"), ("F5-BIGIP-SYSTEM-MIB", "sysProfilePptpStatStartReplies"), ("F5-BIGIP-SYSTEM-MIB", "sysProfilePptpStatStopRequests"), ("F5-BIGIP-SYSTEM-MIB", "sysProfilePptpStatStopReplies"), ("F5-BIGIP-SYSTEM-MIB", "sysProfilePptpStatEchoRequests"), ("F5-BIGIP-SYSTEM-MIB", "sysProfilePptpStatEchoReplies"), ("F5-BIGIP-SYSTEM-MIB", "sysProfilePptpStatOutgoingCallRequests"), ("F5-BIGIP-SYSTEM-MIB", "sysProfilePptpStatOutgoingCallReplies"), ("F5-BIGIP-SYSTEM-MIB", "sysProfilePptpStatCallClearRequests"), ("F5-BIGIP-SYSTEM-MIB", "sysProfilePptpStatCallDisconnectNotifies"), ("F5-BIGIP-SYSTEM-MIB", "sysProfilePptpStatWanErrorNotifies"), ("F5-BIGIP-SYSTEM-MIB", "sysProfilePptpStatSetLinkInfo"), ("F5-BIGIP-SYSTEM-MIB", "sysProfilePptpStatActiveCalls"), ("F5-BIGIP-SYSTEM-MIB", "sysProfilePptpStatTotalCalls"), ("F5-BIGIP-SYSTEM-MIB", "sysProfilePptpStatFailedCalls"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysProfilePptpStatGroup = sysProfilePptpStatGroup.setStatus('current')
if mibBuilder.loadTexts: sysProfilePptpStatGroup.setDescription('A collection of objects of sysGlobalPptpStat MIB.')
sysPcpStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 124)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysPcpStatResetStats"), ("F5-BIGIP-SYSTEM-MIB", "sysPcpStatPcpAnnounceRequests"), ("F5-BIGIP-SYSTEM-MIB", "sysPcpStatPcpAnnounceResponsesUcast"), ("F5-BIGIP-SYSTEM-MIB", "sysPcpStatPcpAnnounceResponsesMulticast"), ("F5-BIGIP-SYSTEM-MIB", "sysPcpStatPcpMapRequests"), ("F5-BIGIP-SYSTEM-MIB", "sysPcpStatPcpMapResponses"), ("F5-BIGIP-SYSTEM-MIB", "sysPcpStatPcpPeerRequests"), ("F5-BIGIP-SYSTEM-MIB", "sysPcpStatPcpPeerResponses"), ("F5-BIGIP-SYSTEM-MIB", "sysPcpStatPcpErrorsInvalidRequests"), ("F5-BIGIP-SYSTEM-MIB", "sysPcpStatPcpErrorsUnavailableResource"), ("F5-BIGIP-SYSTEM-MIB", "sysPcpStatPcpErrorsNotAuthorized"), ("F5-BIGIP-SYSTEM-MIB", "sysPcpStatPcpErrorsOther"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysPcpStatGroup = sysPcpStatGroup.setStatus('current')
if mibBuilder.loadTexts: sysPcpStatGroup.setDescription('A collection of objects of sysGlobalPcpStat MIB.')
sysDnsServerStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 125)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysDnsServerStatResetStats"), ("F5-BIGIP-SYSTEM-MIB", "sysDnsServerStatXfrQueries"), ("F5-BIGIP-SYSTEM-MIB", "sysDnsServerStatXfrResponses"), ("F5-BIGIP-SYSTEM-MIB", "sysDnsServerStatXfrNotifies"), ("F5-BIGIP-SYSTEM-MIB", "sysDnsServerStatXfrNotifyFailed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysDnsServerStatGroup = sysDnsServerStatGroup.setStatus('current')
if mibBuilder.loadTexts: sysDnsServerStatGroup.setDescription('A collection of objects of sysGlobalDnsServerStat MIB.')
sysMptcpStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 126)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysMptcpStatResetStats"), ("F5-BIGIP-SYSTEM-MIB", "sysMptcpStatAccept"), ("F5-BIGIP-SYSTEM-MIB", "sysMptcpStatAcceptFail"), ("F5-BIGIP-SYSTEM-MIB", "sysMptcpStatJoinFlow"), ("F5-BIGIP-SYSTEM-MIB", "sysMptcpStatJoinFlowFail"), ("F5-BIGIP-SYSTEM-MIB", "sysMptcpStatClose"), ("F5-BIGIP-SYSTEM-MIB", "sysMptcpStatRxtimeout"), ("F5-BIGIP-SYSTEM-MIB", "sysMptcpStatRxfailover"), ("F5-BIGIP-SYSTEM-MIB", "sysMptcpStatAddAddrTx"), ("F5-BIGIP-SYSTEM-MIB", "sysMptcpStatAddAddrRx"), ("F5-BIGIP-SYSTEM-MIB", "sysMptcpStatRemAddrTx"), ("F5-BIGIP-SYSTEM-MIB", "sysMptcpStatRemAddrRx"), ("F5-BIGIP-SYSTEM-MIB", "sysMptcpStatPrioTx"), ("F5-BIGIP-SYSTEM-MIB", "sysMptcpStatPrioRx"), ("F5-BIGIP-SYSTEM-MIB", "sysMptcpStatFailTx"), ("F5-BIGIP-SYSTEM-MIB", "sysMptcpStatFailRx"), ("F5-BIGIP-SYSTEM-MIB", "sysMptcpStatFastcloseTx"), ("F5-BIGIP-SYSTEM-MIB", "sysMptcpStatFastcloseRx"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysMptcpStatGroup = sysMptcpStatGroup.setStatus('current')
if mibBuilder.loadTexts: sysMptcpStatGroup.setDescription('A collection of objects of sysGlobalMptcpStat MIB.')
sysLldpNeighborsTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 127)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysLldpNeighborsTableNumber"), ("F5-BIGIP-SYSTEM-MIB", "sysLldpNeighborsTableChassisId"), ("F5-BIGIP-SYSTEM-MIB", "sysLldpNeighborsTablePortId"), ("F5-BIGIP-SYSTEM-MIB", "sysLldpNeighborsTableLocalInterface"), ("F5-BIGIP-SYSTEM-MIB", "sysLldpNeighborsTablePortDesc"), ("F5-BIGIP-SYSTEM-MIB", "sysLldpNeighborsTableSysName"), ("F5-BIGIP-SYSTEM-MIB", "sysLldpNeighborsTableSysDesc"), ("F5-BIGIP-SYSTEM-MIB", "sysLldpNeighborsTableSysCap"), ("F5-BIGIP-SYSTEM-MIB", "sysLldpNeighborsTableMgmtAddr"), ("F5-BIGIP-SYSTEM-MIB", "sysLldpNeighborsTablePvid"), ("F5-BIGIP-SYSTEM-MIB", "sysLldpNeighborsTablePpvid"), ("F5-BIGIP-SYSTEM-MIB", "sysLldpNeighborsTableVlanName"), ("F5-BIGIP-SYSTEM-MIB", "sysLldpNeighborsTableVlanTag"), ("F5-BIGIP-SYSTEM-MIB", "sysLldpNeighborsTableProtocolIdentity"), ("F5-BIGIP-SYSTEM-MIB", "sysLldpNeighborsTableAutoNego"), ("F5-BIGIP-SYSTEM-MIB", "sysLldpNeighborsTablePmd"), ("F5-BIGIP-SYSTEM-MIB", "sysLldpNeighborsTableMau"), ("F5-BIGIP-SYSTEM-MIB", "sysLldpNeighborsTableAggStatus"), ("F5-BIGIP-SYSTEM-MIB", "sysLldpNeighborsTableAggPortid"), ("F5-BIGIP-SYSTEM-MIB", "sysLldpNeighborsTableMfs"), ("F5-BIGIP-SYSTEM-MIB", "sysLldpNeighborsTableF5ProductModel"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysLldpNeighborsTableGroup = sysLldpNeighborsTableGroup.setStatus('current')
if mibBuilder.loadTexts: sysLldpNeighborsTableGroup.setDescription('A collection of objects of sysLldpNeighbors MIB.')
sysIpsecSpdStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 128)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysIpsecSpdStatResetStats"), ("F5-BIGIP-SYSTEM-MIB", "sysIpsecSpdStatNumber"), ("F5-BIGIP-SYSTEM-MIB", "sysIpsecSpdStatTrafficSelectorName"), ("F5-BIGIP-SYSTEM-MIB", "sysIpsecSpdStatReqid"), ("F5-BIGIP-SYSTEM-MIB", "sysIpsecSpdStatSourceAddressType"), ("F5-BIGIP-SYSTEM-MIB", "sysIpsecSpdStatSourceAddress"), ("F5-BIGIP-SYSTEM-MIB", "sysIpsecSpdStatSourceNetmaskType"), ("F5-BIGIP-SYSTEM-MIB", "sysIpsecSpdStatSourceNetmask"), ("F5-BIGIP-SYSTEM-MIB", "sysIpsecSpdStatSourcePort"), ("F5-BIGIP-SYSTEM-MIB", "sysIpsecSpdStatDestinationAddressType"), ("F5-BIGIP-SYSTEM-MIB", "sysIpsecSpdStatDestinationAddress"), ("F5-BIGIP-SYSTEM-MIB", "sysIpsecSpdStatDestinationNetmaskType"), ("F5-BIGIP-SYSTEM-MIB", "sysIpsecSpdStatDestinationNetmask"), ("F5-BIGIP-SYSTEM-MIB", "sysIpsecSpdStatDestinationPort"), ("F5-BIGIP-SYSTEM-MIB", "sysIpsecSpdStatDirection"), ("F5-BIGIP-SYSTEM-MIB", "sysIpsecSpdStatTunnelState"), ("F5-BIGIP-SYSTEM-MIB", "sysIpsecSpdStatPackets"), ("F5-BIGIP-SYSTEM-MIB", "sysIpsecSpdStatBytes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysIpsecSpdStatGroup = sysIpsecSpdStatGroup.setStatus('current')
if mibBuilder.loadTexts: sysIpsecSpdStatGroup.setDescription('A collection of objects of sysIpsecSpdStat MIB.')
sysGlobalTftpStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 129)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysGlobalTftpStatResetStats"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalTftpStatReadRequests"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalTftpStatWriteRequests"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalTftpStatDiscardedRequests"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysGlobalTftpStatGroup = sysGlobalTftpStatGroup.setStatus('current')
if mibBuilder.loadTexts: sysGlobalTftpStatGroup.setDescription('A collection of objects of sysGlobalTftpStat MIB.')
sysGlobalDiametersessionStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 130)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysGlobalDiametersessionStatResetStats"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalDiametersessionStatTotCapExcReq"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalDiametersessionStatTotCapExcAns"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalDiametersessionStatTotDeviceWatchdogRequests"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalDiametersessionStatTotDeviceWatchdogAnswers"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalDiametersessionStatTotDisconnectPeerRequests"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalDiametersessionStatTotDisconnectPeerAnswers"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalDiametersessionStatTotAccountingRequests"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalDiametersessionStatTotAccountingAnswers"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalDiametersessionStatTotCreditControlRequests"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalDiametersessionStatTotCreditControlAnswers"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalDiametersessionStatTotUserAuthorizationRequests"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalDiametersessionStatTotUserAuthorizationAnswers"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalDiametersessionStatTotOtherRequests"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalDiametersessionStatTotOtherAnswers"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalDiametersessionStatTotBadMessages"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalDiametersessionStatTotRejectedUnconfiguredPeers"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalDiametersessionStatCurReqQueuedForRetrans"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalDiametersessionStatTotRetransReturnedBusy"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalDiametersessionStatTotRetransReturnedUnavail"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalDiametersessionStatTotRetransReqRetransmitted"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalDiametersessionStatTotRetransmissionTimeout"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalDiametersessionStatTotRetransmissionErrorCode"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalDiametersessionStatTotRetransmissionIrule"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalDiametersessionStatTotRequestReceived"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalDiametersessionStatTotRequestSent"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalDiametersessionStatTotDiscardUnroutable"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalDiametersessionStatTotRespondUnroutable"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalDiametersessionStatAveRequestLatency"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalDiametersessionStatAveAnswerLatency"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalDiametersessionStatAvePeerDelay"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalDiametersessionStatAveRoundTripTime"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalDiametersessionStatCurTrafficRate"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalDiametersessionStatCurErrorAnswerRatio"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalDiametersessionStatCurTimeoutRatio"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalDiametersessionStatTotAnswerResultCodeReceived1xxx"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalDiametersessionStatTotAnswerResultCodeReceived2xxx"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalDiametersessionStatTotAnswerResultCodeReceived3xxx"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalDiametersessionStatTotAnswerResultCodeReceived4xxx"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalDiametersessionStatTotAnswerResultCodeReceived5xxx"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalDiametersessionStatTotAnswerResultCodeSent1xxx"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalDiametersessionStatTotAnswerResultCodeSent2xxx"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalDiametersessionStatTotAnswerResultCodeSent3xxx"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalDiametersessionStatTotAnswerResultCodeSent4xxx"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalDiametersessionStatTotAnswerResultCodeSent5xxx"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysGlobalDiametersessionStatGroup = sysGlobalDiametersessionStatGroup.setStatus('current')
if mibBuilder.loadTexts: sysGlobalDiametersessionStatGroup.setDescription('A collection of objects of sysGlobalDiametersessionStat MIB.')
sysGlobalDiameterrouterStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 131)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysGlobalDiameterrouterStatResetStats"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalDiameterrouterStatTotMessgesIn"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalDiameterrouterStatTotMessagesInRetry"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalDiameterrouterStatTotMessagesOut"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalDiameterrouterStatTotMessagesCannotReturn"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalDiameterrouterStatTotMessagesRouted"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalDiameterrouterStatTotMessagesUnroutable"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalDiameterrouterStatTotMessagesDropped"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalDiameterrouterStatTotMessagesQueueFull"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalDiameterrouterStatTotMessagesNoConnection"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalDiameterrouterStatTotMessagesConnectionClosed"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalDiameterrouterStatTotMessagesInternalError"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalDiameterrouterStatTotMessagesPersistInUse"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalDiameterrouterStatTotMessagesStandbyDropped"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalDiameterrouterStatTotMessagesMaxRetries"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalDiameterrouterStatTotMessagesInCloned"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalDiameterrouterStatTotMessagesReturned"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalDiameterrouterStatTotPayloadBytesIn"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalDiameterrouterStatTotPayloadBytesOut"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalDiameterrouterStatCurIncomingStreams"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalDiameterrouterStatCurOutgoingStreams"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalDiameterrouterStatTotIncomingStreams"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalDiameterrouterStatTotOutgoingStreams"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalDiameterrouterStatTotFailedOutgoingStreams"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalDiameterrouterStatCurIncomingConnections"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalDiameterrouterStatCurOutgoingConnections"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalDiameterrouterStatCurAutoInitOutgoingConnections"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalDiameterrouterStatTotIncomingConnections"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalDiameterrouterStatTotOutgoingConnections"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalDiameterrouterStatTotAutoInitOutgoingConnections"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalDiameterrouterStatTotFailedOutgoingConnections"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalDiameterrouterStatTotFailedAutoInitOutgoingConnections"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalDiameterrouterStatCurPassthruConnections"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalDiameterrouterStatTotPassthruConnections"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalDiameterrouterStatTotFailedPassthruConnections"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalDiameterrouterStatTotPassthruBytes"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalDiameterrouterStatCurPendingRequests"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalDiameterrouterStatTotExpiredPendingRequests"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalDiameterrouterStatTotDroppedUnexpectedAnswers"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalDiameterrouterStatTotDroppedLateAnswers"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalDiameterrouterStatTotMsgsDroppedForceOffline"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysGlobalDiameterrouterStatGroup = sysGlobalDiameterrouterStatGroup.setStatus('current')
if mibBuilder.loadTexts: sysGlobalDiameterrouterStatGroup.setDescription('A collection of objects of sysGlobalDiameterrouterStat MIB.')
sysGlobalSipsessionStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 132)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysGlobalSipsessionStatResetStats"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalSipsessionStatRequests"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalSipsessionStatResponses"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalSipsessionStatBadmsgs"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalSipsessionStatBadmsgsReq"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalSipsessionStatDrops"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalSipsessionStatDropsReq"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalSipsessionStatInvite"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalSipsessionStatAck"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalSipsessionStatBye"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalSipsessionStatCancel"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalSipsessionStatOptions"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalSipsessionStatRegisterReq"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalSipsessionStatPrack"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalSipsessionStatSubscribe"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalSipsessionStatNotify"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalSipsessionStatPublish"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalSipsessionStatInfo"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalSipsessionStatRefer"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalSipsessionStatMessage"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalSipsessionStatUpdateReq"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalSipsessionStatService"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalSipsessionStatBenotify"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalSipsessionStatNegotiate"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalSipsessionStatOther"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalSipsessionStatProvisional"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalSipsessionStatSuccessful"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalSipsessionStatRedirection"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalSipsessionStatClientFailures"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalSipsessionStatServerFailures"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalSipsessionStatGlobalFailures"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalSipsessionStatBadRequest"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalSipsessionStatBadRequest400Sent"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalSipsessionStatNotFound"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalSipsessionStatNotFound404Sent"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalSipsessionStatRequestEntityTooLarge"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalSipsessionStatRequestEntityTooLarge413Sent"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalSipsessionStatUnsupportedUriScheme"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalSipsessionStatUnsupportedUriScheme416Sent"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalSipsessionStatTemporarilyUnavailable"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalSipsessionStatTemporarilyUnavailable480Sent"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalSipsessionStatTransactionDoesNotExist"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalSipsessionStatTransactionDoesNotExist481Sent"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalSipsessionStatLoopDetected"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalSipsessionStatLoopDetected482Sent"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalSipsessionStatTooManyHops"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalSipsessionStatTooManyHops483Sent"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalSipsessionStatAddressIncomplete"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalSipsessionStatAddressIncomplete484Sent"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalSipsessionStatNotAcceptableHere"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalSipsessionStatNotAcceptableHere488Sent"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalSipsessionStatServerInternalError"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalSipsessionStatServerInternalError500Sent"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalSipsessionStatNotImplemented"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalSipsessionStatNotImplemented501Sent"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalSipsessionStatServiceUnavailable"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalSipsessionStatServiceUnavailable503Sent"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalSipsessionStatVersionNotSupported"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalSipsessionStatVersionNotSupported505Sent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysGlobalSipsessionStatGroup = sysGlobalSipsessionStatGroup.setStatus('current')
if mibBuilder.loadTexts: sysGlobalSipsessionStatGroup.setDescription('A collection of objects of sysGlobalSipsessionStat MIB.')
sysGlobalSiprouterStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 133)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysGlobalSiprouterStatResetStats"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalSiprouterStatTotMessgesIn"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalSiprouterStatTotMessagesInRetry"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalSiprouterStatTotMessagesOut"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalSiprouterStatTotMessagesCannotReturn"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalSiprouterStatTotMessagesRouted"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalSiprouterStatTotMessagesUnroutable"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalSiprouterStatTotMessagesDropped"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalSiprouterStatTotMessagesQueueFull"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalSiprouterStatTotMessagesNoConnection"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalSiprouterStatTotMessagesConnectionClosed"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalSiprouterStatTotMessagesInternalError"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalSiprouterStatTotMessagesPersistInUse"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalSiprouterStatTotMessagesStandbyDropped"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalSiprouterStatTotMessagesMaxRetries"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalSiprouterStatTotMessagesInCloned"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalSiprouterStatTotMessagesReturned"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalSiprouterStatTotPayloadBytesIn"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalSiprouterStatTotPayloadBytesOut"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalSiprouterStatCurIncomingStreams"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalSiprouterStatCurOutgoingStreams"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalSiprouterStatTotIncomingStreams"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalSiprouterStatTotOutgoingStreams"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalSiprouterStatTotFailedOutgoingStreams"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalSiprouterStatCurIncomingConnections"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalSiprouterStatCurOutgoingConnections"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalSiprouterStatCurAutoInitOutgoingConnections"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalSiprouterStatTotIncomingConnections"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalSiprouterStatTotOutgoingConnections"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalSiprouterStatTotAutoInitOutgoingConnections"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalSiprouterStatTotFailedOutgoingConnections"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalSiprouterStatTotFailedAutoInitOutgoingConnections"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalSiprouterStatCurPassthruConnections"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalSiprouterStatTotPassthruConnections"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalSiprouterStatTotFailedPassthruConnections"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalSiprouterStatTotPassthruBytes"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalSiprouterStatCurrPendingCalls"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalSiprouterStatCurrActiveCalls"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalSiprouterStatTotSuccessfulCalls"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalSiprouterStatTotRejectedCalls"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalSiprouterStatTotCancelledCalls"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalSiprouterStatActiveRegistrations"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalSiprouterStatRejectedRegistrations"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysGlobalSiprouterStatGroup = sysGlobalSiprouterStatGroup.setStatus('current')
if mibBuilder.loadTexts: sysGlobalSiprouterStatGroup.setDescription('A collection of objects of sysGlobalSiprouterStat MIB.')
sysGlobalIpsecalgStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 134)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysGlobalIpsecalgStatResetStats"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalIpsecalgStatIkePackets"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalIpsecalgStatTunnelCreates"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalIpsecalgStatTunnelTeardowns"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalIpsecalgStatFailures"), ("F5-BIGIP-SYSTEM-MIB", "sysGlobalIpsecalgStatPendingIkeConnectionLimitDrops"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysGlobalIpsecalgStatGroup = sysGlobalIpsecalgStatGroup.setStatus('current')
if mibBuilder.loadTexts: sysGlobalIpsecalgStatGroup.setDescription('A collection of objects of sysGlobalIpsecalgStat MIB.')
sysLsnPoolFailureStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 135)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysLsnPoolFailureStatResetStats"), ("F5-BIGIP-SYSTEM-MIB", "sysLsnPoolFailureStatNumber"), ("F5-BIGIP-SYSTEM-MIB", "sysLsnPoolFailureStatFailureCause"), ("F5-BIGIP-SYSTEM-MIB", "sysLsnPoolFailureStatFailureCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysLsnPoolFailureStatGroup = sysLsnPoolFailureStatGroup.setStatus('current')
if mibBuilder.loadTexts: sysLsnPoolFailureStatGroup.setDescription('A collection of objects of sysGlobalLsnPoolFailureStat MIB.')
sysPlaneStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 136)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysPlaneStatNumber"), ("F5-BIGIP-SYSTEM-MIB", "sysPlaneStatPlaneName"), ("F5-BIGIP-SYSTEM-MIB", "sysPlaneStatCpuCount"), ("F5-BIGIP-SYSTEM-MIB", "sysPlaneStatCpuRatioCurr"), ("F5-BIGIP-SYSTEM-MIB", "sysPlaneStatCpuRatio5sec"), ("F5-BIGIP-SYSTEM-MIB", "sysPlaneStatCpuRatio1min"), ("F5-BIGIP-SYSTEM-MIB", "sysPlaneStatCpuRatio5min"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysPlaneStatGroup = sysPlaneStatGroup.setStatus('current')
if mibBuilder.loadTexts: sysPlaneStatGroup.setDescription('A collection of objects of sysPlaneStat MIB.')
sysSwitchDdmStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 137)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysSwitchDdmStatNumber"), ("F5-BIGIP-SYSTEM-MIB", "sysSwitchDdmStatName"), ("F5-BIGIP-SYSTEM-MIB", "sysSwitchDdmStatTxPwr1"), ("F5-BIGIP-SYSTEM-MIB", "sysSwitchDdmStatTxDbmPwr1"), ("F5-BIGIP-SYSTEM-MIB", "sysSwitchDdmStatTxPwr2"), ("F5-BIGIP-SYSTEM-MIB", "sysSwitchDdmStatTxDbmPwr2"), ("F5-BIGIP-SYSTEM-MIB", "sysSwitchDdmStatTxPwr3"), ("F5-BIGIP-SYSTEM-MIB", "sysSwitchDdmStatTxDbmPwr3"), ("F5-BIGIP-SYSTEM-MIB", "sysSwitchDdmStatTxPwr4"), ("F5-BIGIP-SYSTEM-MIB", "sysSwitchDdmStatTxDbmPwr4"), ("F5-BIGIP-SYSTEM-MIB", "sysSwitchDdmStatRxPwr1"), ("F5-BIGIP-SYSTEM-MIB", "sysSwitchDdmStatRxDbmPwr1"), ("F5-BIGIP-SYSTEM-MIB", "sysSwitchDdmStatRxPwr2"), ("F5-BIGIP-SYSTEM-MIB", "sysSwitchDdmStatRxDbmPwr2"), ("F5-BIGIP-SYSTEM-MIB", "sysSwitchDdmStatRxPwr3"), ("F5-BIGIP-SYSTEM-MIB", "sysSwitchDdmStatRxDbmPwr3"), ("F5-BIGIP-SYSTEM-MIB", "sysSwitchDdmStatRxPwr4"), ("F5-BIGIP-SYSTEM-MIB", "sysSwitchDdmStatRxDbmPwr4"), ("F5-BIGIP-SYSTEM-MIB", "sysSwitchDdmStatTxAlarmLo"), ("F5-BIGIP-SYSTEM-MIB", "sysSwitchDdmStatTxAlarmHi"), ("F5-BIGIP-SYSTEM-MIB", "sysSwitchDdmStatRxAlarmLo"), ("F5-BIGIP-SYSTEM-MIB", "sysSwitchDdmStatRxAlarmHi"), ("F5-BIGIP-SYSTEM-MIB", "sysSwitchDdmStatTxWarnLo"), ("F5-BIGIP-SYSTEM-MIB", "sysSwitchDdmStatTxWarnHi"), ("F5-BIGIP-SYSTEM-MIB", "sysSwitchDdmStatRxWarnLo"), ("F5-BIGIP-SYSTEM-MIB", "sysSwitchDdmStatRxWarnHi"), ("F5-BIGIP-SYSTEM-MIB", "sysSwitchDdmStatTxPwrLoAlarm"), ("F5-BIGIP-SYSTEM-MIB", "sysSwitchDdmStatTxDbmPwrLoAlarm"), ("F5-BIGIP-SYSTEM-MIB", "sysSwitchDdmStatTxPwrHiAlarm"), ("F5-BIGIP-SYSTEM-MIB", "sysSwitchDdmStatTxDbmPwrHiAlarm"), ("F5-BIGIP-SYSTEM-MIB", "sysSwitchDdmStatTxPwrLoWarn"), ("F5-BIGIP-SYSTEM-MIB", "sysSwitchDdmStatTxDbmPwrLoWarn"), ("F5-BIGIP-SYSTEM-MIB", "sysSwitchDdmStatTxPwrHiWarn"), ("F5-BIGIP-SYSTEM-MIB", "sysSwitchDdmStatTxDbmPwrHiWarn"), ("F5-BIGIP-SYSTEM-MIB", "sysSwitchDdmStatRxPwrLoAlarm"), ("F5-BIGIP-SYSTEM-MIB", "sysSwitchDdmStatRxDbmPwrLoAlarm"), ("F5-BIGIP-SYSTEM-MIB", "sysSwitchDdmStatRxPwrHiAlarm"), ("F5-BIGIP-SYSTEM-MIB", "sysSwitchDdmStatRxDbmPwrHiAlarm"), ("F5-BIGIP-SYSTEM-MIB", "sysSwitchDdmStatRxPwrLoWarn"), ("F5-BIGIP-SYSTEM-MIB", "sysSwitchDdmStatRxDbmPwrLoWarn"), ("F5-BIGIP-SYSTEM-MIB", "sysSwitchDdmStatRxPwrHiWarn"), ("F5-BIGIP-SYSTEM-MIB", "sysSwitchDdmStatRxDbmPwrHiWarn"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysSwitchDdmStatGroup = sysSwitchDdmStatGroup.setStatus('current')
if mibBuilder.loadTexts: sysSwitchDdmStatGroup.setDescription('A collection of objects of sysSwitchDdmStat MIB.')
sysTmmProcStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 138)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysTmmProcStatNumber"), ("F5-BIGIP-SYSTEM-MIB", "sysTmmProcStatSlotId"), ("F5-BIGIP-SYSTEM-MIB", "sysTmmProcStatTmmPid"), ("F5-BIGIP-SYSTEM-MIB", "sysTmmProcStatMemoryTotalKb"), ("F5-BIGIP-SYSTEM-MIB", "sysTmmProcStatMemoryUsedKb"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysTmmProcStatGroup = sysTmmProcStatGroup.setStatus('current')
if mibBuilder.loadTexts: sysTmmProcStatGroup.setDescription('A collection of objects of sysTmmProcStat MIB.')
sysCertificateFileObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 139)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysCertificateFileObjectNumber"), ("F5-BIGIP-SYSTEM-MIB", "sysCertificateFileObjectName"), ("F5-BIGIP-SYSTEM-MIB", "sysCertificateFileObjectIssuerCert"), ("F5-BIGIP-SYSTEM-MIB", "sysCertificateFileObjectCertStatusValidationOptions"), ("F5-BIGIP-SYSTEM-MIB", "sysCertificateFileObjectExpirationString"), ("F5-BIGIP-SYSTEM-MIB", "sysCertificateFileObjectExpirationDate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysCertificateFileObjectGroup = sysCertificateFileObjectGroup.setStatus('current')
if mibBuilder.loadTexts: sysCertificateFileObjectGroup.setDescription('A collection of objects of sysCertificateFileObject MIB.')
sysCertValidatorOcspGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 140)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysCertValidatorOcspNumber"), ("F5-BIGIP-SYSTEM-MIB", "sysCertValidatorOcspName"), ("F5-BIGIP-SYSTEM-MIB", "sysCertValidatorOcspProxyServerPool"), ("F5-BIGIP-SYSTEM-MIB", "sysCertValidatorOcspDnsResolver"), ("F5-BIGIP-SYSTEM-MIB", "sysCertValidatorOcspTrustedResponders"), ("F5-BIGIP-SYSTEM-MIB", "sysCertValidatorOcspUrl"), ("F5-BIGIP-SYSTEM-MIB", "sysCertValidatorOcspSignerCert"), ("F5-BIGIP-SYSTEM-MIB", "sysCertValidatorOcspSignerKey"), ("F5-BIGIP-SYSTEM-MIB", "sysCertValidatorOcspSignerKeyPassphrase"), ("F5-BIGIP-SYSTEM-MIB", "sysCertValidatorOcspSignHash"), ("F5-BIGIP-SYSTEM-MIB", "sysCertValidatorOcspTimeout"), ("F5-BIGIP-SYSTEM-MIB", "sysCertValidatorOcspClockSkew"), ("F5-BIGIP-SYSTEM-MIB", "sysCertValidatorOcspStatusAge"), ("F5-BIGIP-SYSTEM-MIB", "sysCertValidatorOcspCacheTimeout"), ("F5-BIGIP-SYSTEM-MIB", "sysCertValidatorOcspCacheErrorTimeout"), ("F5-BIGIP-SYSTEM-MIB", "sysCertValidatorOcspStrictRespCertCheck"), ("F5-BIGIP-SYSTEM-MIB", "sysCertValidatorOcspConcurrentConnectionsLimit"), ("F5-BIGIP-SYSTEM-MIB", "sysCertValidatorOcspRouteDomain"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysCertValidatorOcspGroup = sysCertValidatorOcspGroup.setStatus('current')
if mibBuilder.loadTexts: sysCertValidatorOcspGroup.setDescription('A collection of objects of sysCertValidatorOcsp MIB.')
sysJoinCertValidatorGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 141)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysJoinCertValidatorNumber"), ("F5-BIGIP-SYSTEM-MIB", "sysJoinCertValidatorCert"), ("F5-BIGIP-SYSTEM-MIB", "sysJoinCertValidatorValidator"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysJoinCertValidatorGroup = sysJoinCertValidatorGroup.setStatus('current')
if mibBuilder.loadTexts: sysJoinCertValidatorGroup.setDescription('A collection of objects of sysJoinCertValidator MIB.')
sysCertValidatorOcspStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 142)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysCertValidatorOcspStatResetStats"), ("F5-BIGIP-SYSTEM-MIB", "sysCertValidatorOcspStatNumber"), ("F5-BIGIP-SYSTEM-MIB", "sysCertValidatorOcspStatName"), ("F5-BIGIP-SYSTEM-MIB", "sysCertValidatorOcspStatOcspRequests"), ("F5-BIGIP-SYSTEM-MIB", "sysCertValidatorOcspStatOcspInternalErrors"), ("F5-BIGIP-SYSTEM-MIB", "sysCertValidatorOcspStatSuccessfulCacheRequests"), ("F5-BIGIP-SYSTEM-MIB", "sysCertValidatorOcspStatConnectionHttpErrors"), ("F5-BIGIP-SYSTEM-MIB", "sysCertValidatorOcspStatConnectionTimeouts"), ("F5-BIGIP-SYSTEM-MIB", "sysCertValidatorOcspStatConnectionOtherFailures"), ("F5-BIGIP-SYSTEM-MIB", "sysCertValidatorOcspStatResponseMalformedRequestErrors"), ("F5-BIGIP-SYSTEM-MIB", "sysCertValidatorOcspStatResponseInternalErrors"), ("F5-BIGIP-SYSTEM-MIB", "sysCertValidatorOcspStatResponseTryLaterErrors"), ("F5-BIGIP-SYSTEM-MIB", "sysCertValidatorOcspStatResponseSignatureRequiredErrors"), ("F5-BIGIP-SYSTEM-MIB", "sysCertValidatorOcspStatResponseUnauthorizedErrors"), ("F5-BIGIP-SYSTEM-MIB", "sysCertValidatorOcspStatResponseValidationParseErrors"), ("F5-BIGIP-SYSTEM-MIB", "sysCertValidatorOcspStatResponseValidationVerifyErrors"), ("F5-BIGIP-SYSTEM-MIB", "sysCertValidatorOcspStatResponseValidationValidityErrors"), ("F5-BIGIP-SYSTEM-MIB", "sysCertValidatorOcspStatResponseValidationOtherErrors"), ("F5-BIGIP-SYSTEM-MIB", "sysCertValidatorOcspStatCertificateStatusGood"), ("F5-BIGIP-SYSTEM-MIB", "sysCertValidatorOcspStatCertificateStatusRevoked"), ("F5-BIGIP-SYSTEM-MIB", "sysCertValidatorOcspStatCertificateStatusUnknown"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysCertValidatorOcspStatGroup = sysCertValidatorOcspStatGroup.setStatus('current')
if mibBuilder.loadTexts: sysCertValidatorOcspStatGroup.setDescription('A collection of objects of sysCertValidatorOcspStat MIB.')
sysCertStatusObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 143)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysCertStatusObjectNumber"), ("F5-BIGIP-SYSTEM-MIB", "sysCertStatusObjectCertName"), ("F5-BIGIP-SYSTEM-MIB", "sysCertStatusObjectCertStatus"), ("F5-BIGIP-SYSTEM-MIB", "sysCertStatusObjectOcspStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysCertStatusObjectGroup = sysCertStatusObjectGroup.setStatus('current')
if mibBuilder.loadTexts: sysCertStatusObjectGroup.setDescription('A collection of objects of sysCertStatusObject MIB.')
sysCertOrderManagerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 144)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysCertOrderManagerNumber"), ("F5-BIGIP-SYSTEM-MIB", "sysCertOrderManagerName"), ("F5-BIGIP-SYSTEM-MIB", "sysCertOrderManagerValidityDays"), ("F5-BIGIP-SYSTEM-MIB", "sysCertOrderManagerAutoRenew"), ("F5-BIGIP-SYSTEM-MIB", "sysCertOrderManagerAuthorityName"), ("F5-BIGIP-SYSTEM-MIB", "sysCertOrderManagerBaseUrl"), ("F5-BIGIP-SYSTEM-MIB", "sysCertOrderManagerAdditionalHeaders"), ("F5-BIGIP-SYSTEM-MIB", "sysCertOrderManagerInternalProxy"), ("F5-BIGIP-SYSTEM-MIB", "sysCertOrderManagerOrderInformation"), ("F5-BIGIP-SYSTEM-MIB", "sysCertOrderManagerLoginName"), ("F5-BIGIP-SYSTEM-MIB", "sysCertOrderManagerClientKey"), ("F5-BIGIP-SYSTEM-MIB", "sysCertOrderManagerClientCert"), ("F5-BIGIP-SYSTEM-MIB", "sysCertOrderManagerCaCert"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysCertOrderManagerGroup = sysCertOrderManagerGroup.setStatus('current')
if mibBuilder.loadTexts: sysCertOrderManagerGroup.setDescription('A collection of objects of sysCertOrderManager MIB.')
sysCertOrderManagerStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 145)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysCertOrderManagerStatResetStats"), ("F5-BIGIP-SYSTEM-MIB", "sysCertOrderManagerStatNumber"), ("F5-BIGIP-SYSTEM-MIB", "sysCertOrderManagerStatName"), ("F5-BIGIP-SYSTEM-MIB", "sysCertOrderManagerStatTotalOrders"), ("F5-BIGIP-SYSTEM-MIB", "sysCertOrderManagerStatApproved"), ("F5-BIGIP-SYSTEM-MIB", "sysCertOrderManagerStatPending"), ("F5-BIGIP-SYSTEM-MIB", "sysCertOrderManagerStatRejected"), ("F5-BIGIP-SYSTEM-MIB", "sysCertOrderManagerStatCanceled"), ("F5-BIGIP-SYSTEM-MIB", "sysCertOrderManagerStatConnectionErrors"), ("F5-BIGIP-SYSTEM-MIB", "sysCertOrderManagerStatInternalErrors"), ("F5-BIGIP-SYSTEM-MIB", "sysCertOrderManagerStatOtherErrors"), ("F5-BIGIP-SYSTEM-MIB", "sysCertOrderManagerStatCertsCreated"), ("F5-BIGIP-SYSTEM-MIB", "sysCertOrderManagerStatCertsRenewed"), ("F5-BIGIP-SYSTEM-MIB", "sysCertOrderManagerStatCertsAutoRenewed"), ("F5-BIGIP-SYSTEM-MIB", "sysCertOrderManagerStatCertsRevoked"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysCertOrderManagerStatGroup = sysCertOrderManagerStatGroup.setStatus('current')
if mibBuilder.loadTexts: sysCertOrderManagerStatGroup.setDescription('A collection of objects of sysCertOrderManagerStat MIB.')
sysJoinCertOrderManagerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 146)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysJoinCertOrderManagerNumber"), ("F5-BIGIP-SYSTEM-MIB", "sysJoinCertOrderManagerKeyName"), ("F5-BIGIP-SYSTEM-MIB", "sysJoinCertOrderManagerCertOrderManager"), ("F5-BIGIP-SYSTEM-MIB", "sysJoinCertOrderManagerOrderStatus"), ("F5-BIGIP-SYSTEM-MIB", "sysJoinCertOrderManagerOrderType"), ("F5-BIGIP-SYSTEM-MIB", "sysJoinCertOrderManagerDownloadCert"), ("F5-BIGIP-SYSTEM-MIB", "sysJoinCertOrderManagerOrderId"), ("F5-BIGIP-SYSTEM-MIB", "sysJoinCertOrderManagerOrderResponse"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysJoinCertOrderManagerGroup = sysJoinCertOrderManagerGroup.setStatus('current')
if mibBuilder.loadTexts: sysJoinCertOrderManagerGroup.setDescription('A collection of objects of sysJoinCertOrderManager MIB.')
sysJoinCertOrderManagerStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 147)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysJoinCertOrderManagerStatResetStats"), ("F5-BIGIP-SYSTEM-MIB", "sysJoinCertOrderManagerStatNumber"), ("F5-BIGIP-SYSTEM-MIB", "sysJoinCertOrderManagerStatKeyName"), ("F5-BIGIP-SYSTEM-MIB", "sysJoinCertOrderManagerStatCertOrderManager"), ("F5-BIGIP-SYSTEM-MIB", "sysJoinCertOrderManagerStatCertIssued"), ("F5-BIGIP-SYSTEM-MIB", "sysJoinCertOrderManagerStatRejectedReqs"), ("F5-BIGIP-SYSTEM-MIB", "sysJoinCertOrderManagerStatCancelledReqs"), ("F5-BIGIP-SYSTEM-MIB", "sysJoinCertOrderManagerStatCaPollReqs"), ("F5-BIGIP-SYSTEM-MIB", "sysJoinCertOrderManagerStatConnErrors"), ("F5-BIGIP-SYSTEM-MIB", "sysJoinCertOrderManagerStatOtherErrors"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysJoinCertOrderManagerStatGroup = sysJoinCertOrderManagerStatGroup.setStatus('current')
if mibBuilder.loadTexts: sysJoinCertOrderManagerStatGroup.setDescription('A collection of objects of sysJoinCertOrderManagerStat MIB.')
sysFwNatDynamicPoolStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 148)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysFwNatDynamicPoolStatResetStats"), ("F5-BIGIP-SYSTEM-MIB", "sysFwNatDynamicPoolStatLsnTranslationRequests"), ("F5-BIGIP-SYSTEM-MIB", "sysFwNatDynamicPoolStatLsnHairpinConnectionRequests"), ("F5-BIGIP-SYSTEM-MIB", "sysFwNatDynamicPoolStatLsnActiveTranslations"), ("F5-BIGIP-SYSTEM-MIB", "sysFwNatDynamicPoolStatLsnActiveHairpinConnections"), ("F5-BIGIP-SYSTEM-MIB", "sysFwNatDynamicPoolStatLsnTranslationRequestFailures"), ("F5-BIGIP-SYSTEM-MIB", "sysFwNatDynamicPoolStatLsnPersistenceMappingFailures"), ("F5-BIGIP-SYSTEM-MIB", "sysFwNatDynamicPoolStatLsnHairpinConnectionFailures"), ("F5-BIGIP-SYSTEM-MIB", "sysFwNatDynamicPoolStatLsnBackupPoolTranslations"), ("F5-BIGIP-SYSTEM-MIB", "sysFwNatDynamicPoolStatLsnActiveEndPoints"), ("F5-BIGIP-SYSTEM-MIB", "sysFwNatDynamicPoolStatLsnEndPoints"), ("F5-BIGIP-SYSTEM-MIB", "sysFwNatDynamicPoolStatLsnEndPointsHighValue"), ("F5-BIGIP-SYSTEM-MIB", "sysFwNatDynamicPoolStatPbaActivePortBlocks"), ("F5-BIGIP-SYSTEM-MIB", "sysFwNatDynamicPoolStatPbaActiveClientsReachedLimit"), ("F5-BIGIP-SYSTEM-MIB", "sysFwNatDynamicPoolStatPbaActiveZombiePortBlocks"), ("F5-BIGIP-SYSTEM-MIB", "sysFwNatDynamicPoolStatPbaPortBlockAllocations"), ("F5-BIGIP-SYSTEM-MIB", "sysFwNatDynamicPoolStatPbaPortBlockAllocationFailures"), ("F5-BIGIP-SYSTEM-MIB", "sysFwNatDynamicPoolStatPbaPortBlockDeallocations"), ("F5-BIGIP-SYSTEM-MIB", "sysFwNatDynamicPoolStatPbaClientsReachedLimit"), ("F5-BIGIP-SYSTEM-MIB", "sysFwNatDynamicPoolStatPbaZombiePortBlocksCreated"), ("F5-BIGIP-SYSTEM-MIB", "sysFwNatDynamicPoolStatPbaZombiePortBlocksDeleted"), ("F5-BIGIP-SYSTEM-MIB", "sysFwNatDynamicPoolStatPbaZombiePortBlockConnsKilled"), ("F5-BIGIP-SYSTEM-MIB", "sysFwNatDynamicPoolStatPcpAnnounceRequests"), ("F5-BIGIP-SYSTEM-MIB", "sysFwNatDynamicPoolStatPcpAnnounceResponsesUcast"), ("F5-BIGIP-SYSTEM-MIB", "sysFwNatDynamicPoolStatPcpAnnounceResponsesMulticast"), ("F5-BIGIP-SYSTEM-MIB", "sysFwNatDynamicPoolStatPcpMapRequests"), ("F5-BIGIP-SYSTEM-MIB", "sysFwNatDynamicPoolStatPcpMapResponses"), ("F5-BIGIP-SYSTEM-MIB", "sysFwNatDynamicPoolStatPcpPeerRequests"), ("F5-BIGIP-SYSTEM-MIB", "sysFwNatDynamicPoolStatPcpPeerResponses"), ("F5-BIGIP-SYSTEM-MIB", "sysFwNatDynamicPoolStatPcpErrorsInvalidRequest"), ("F5-BIGIP-SYSTEM-MIB", "sysFwNatDynamicPoolStatPcpErrorsUnavailableResource"), ("F5-BIGIP-SYSTEM-MIB", "sysFwNatDynamicPoolStatPcpErrorsNotAuthorized"), ("F5-BIGIP-SYSTEM-MIB", "sysFwNatDynamicPoolStatPcpErrorsOther"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysFwNatDynamicPoolStatGroup = sysFwNatDynamicPoolStatGroup.setStatus('current')
if mibBuilder.loadTexts: sysFwNatDynamicPoolStatGroup.setDescription('A collection of objects of sysGlobalFwNatDynamicPoolStat MIB.')
sysFwNatDynamicPoolFailureStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 149)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysFwNatDynamicPoolFailureStatResetStats"), ("F5-BIGIP-SYSTEM-MIB", "sysFwNatDynamicPoolFailureStatNumber"), ("F5-BIGIP-SYSTEM-MIB", "sysFwNatDynamicPoolFailureStatFailureCause"), ("F5-BIGIP-SYSTEM-MIB", "sysFwNatDynamicPoolFailureStatFailureCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysFwNatDynamicPoolFailureStatGroup = sysFwNatDynamicPoolFailureStatGroup.setStatus('current')
if mibBuilder.loadTexts: sysFwNatDynamicPoolFailureStatGroup.setDescription('A collection of objects of sysGlobalFwNatDynamicPoolFailureStat MIB.')
sysFwNatStaticDestinationTranslationPoolStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 150)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysFwNatStaticDestinationTranslationPoolStatResetStats"), ("F5-BIGIP-SYSTEM-MIB", "sysFwNatStaticDestinationTranslationPoolStatTransReqs"), ("F5-BIGIP-SYSTEM-MIB", "sysFwNatStaticDestinationTranslationPoolStatTransReqFails"), ("F5-BIGIP-SYSTEM-MIB", "sysFwNatStaticDestinationTranslationPoolStatBidirReqs"), ("F5-BIGIP-SYSTEM-MIB", "sysFwNatStaticDestinationTranslationPoolStatBidirReqFails"), ("F5-BIGIP-SYSTEM-MIB", "sysFwNatStaticDestinationTranslationPoolStatErrAddrTrans"), ("F5-BIGIP-SYSTEM-MIB", "sysFwNatStaticDestinationTranslationPoolStatErrPortTrans"), ("F5-BIGIP-SYSTEM-MIB", "sysFwNatStaticDestinationTranslationPoolStatErrFlowCollis"), ("F5-BIGIP-SYSTEM-MIB", "sysFwNatStaticDestinationTranslationPoolStatErrCfgMismtch"), ("F5-BIGIP-SYSTEM-MIB", "sysFwNatStaticDestinationTranslationPoolStatErrMemory"), ("F5-BIGIP-SYSTEM-MIB", "sysFwNatStaticDestinationTranslationPoolStatSubscrIdLkps"), ("F5-BIGIP-SYSTEM-MIB", "sysFwNatStaticDestinationTranslationPoolStatSubscrIdNotFd"), ("F5-BIGIP-SYSTEM-MIB", "sysFwNatStaticDestinationTranslationPoolStatSubscrIdErrs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysFwNatStaticDestinationTranslationPoolStatGroup = sysFwNatStaticDestinationTranslationPoolStatGroup.setStatus('current')
if mibBuilder.loadTexts: sysFwNatStaticDestinationTranslationPoolStatGroup.setDescription('A collection of objects of sysGlobalFwNatStaticDestinationTranslationPoolStat MIB.')
sysFwNatStaticSourceTranslationPoolStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 151)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysFwNatStaticSourceTranslationPoolStatResetStats"), ("F5-BIGIP-SYSTEM-MIB", "sysFwNatStaticSourceTranslationPoolStatTransReqs"), ("F5-BIGIP-SYSTEM-MIB", "sysFwNatStaticSourceTranslationPoolStatTransReqFails"), ("F5-BIGIP-SYSTEM-MIB", "sysFwNatStaticSourceTranslationPoolStatBidirReqs"), ("F5-BIGIP-SYSTEM-MIB", "sysFwNatStaticSourceTranslationPoolStatBidirReqFails"), ("F5-BIGIP-SYSTEM-MIB", "sysFwNatStaticSourceTranslationPoolStatErrAddrTrans"), ("F5-BIGIP-SYSTEM-MIB", "sysFwNatStaticSourceTranslationPoolStatErrPortTrans"), ("F5-BIGIP-SYSTEM-MIB", "sysFwNatStaticSourceTranslationPoolStatErrFlowCollis"), ("F5-BIGIP-SYSTEM-MIB", "sysFwNatStaticSourceTranslationPoolStatErrCfgMismtch"), ("F5-BIGIP-SYSTEM-MIB", "sysFwNatStaticSourceTranslationPoolStatErrMemory"), ("F5-BIGIP-SYSTEM-MIB", "sysFwNatStaticSourceTranslationPoolStatSubscrIdLkps"), ("F5-BIGIP-SYSTEM-MIB", "sysFwNatStaticSourceTranslationPoolStatSubscrIdNotFd"), ("F5-BIGIP-SYSTEM-MIB", "sysFwNatStaticSourceTranslationPoolStatSubscrIdErrs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysFwNatStaticSourceTranslationPoolStatGroup = sysFwNatStaticSourceTranslationPoolStatGroup.setStatus('current')
if mibBuilder.loadTexts: sysFwNatStaticSourceTranslationPoolStatGroup.setDescription('A collection of objects of sysGlobalFwNatStaticSourceTranslationPoolStat MIB.')
sysTmmPagesStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 152)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysTmmPagesStatResetStats"), ("F5-BIGIP-SYSTEM-MIB", "sysTmmPagesStatNumber"), ("F5-BIGIP-SYSTEM-MIB", "sysTmmPagesStatSlot"), ("F5-BIGIP-SYSTEM-MIB", "sysTmmPagesStatTmm"), ("F5-BIGIP-SYSTEM-MIB", "sysTmmPagesStatPagesUsed"), ("F5-BIGIP-SYSTEM-MIB", "sysTmmPagesStatPagesAvail"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysTmmPagesStatGroup = sysTmmPagesStatGroup.setStatus('current')
if mibBuilder.loadTexts: sysTmmPagesStatGroup.setDescription('A collection of objects of sysTmmPagesStat MIB.')
sysVlanIfcStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 1, 153)).setObjects(("F5-BIGIP-SYSTEM-MIB", "sysVlanIfcStatNumber"), ("F5-BIGIP-SYSTEM-MIB", "sysVlanIfcStatName"), ("F5-BIGIP-SYSTEM-MIB", "sysVlanIfcStatInDiscards"), ("F5-BIGIP-SYSTEM-MIB", "sysVlanIfcStatInErrors"), ("F5-BIGIP-SYSTEM-MIB", "sysVlanIfcStatInUnknownProtos"), ("F5-BIGIP-SYSTEM-MIB", "sysVlanIfcStatOutDiscards"), ("F5-BIGIP-SYSTEM-MIB", "sysVlanIfcStatOutErrors"), ("F5-BIGIP-SYSTEM-MIB", "sysVlanIfcStatHcInOctets"), ("F5-BIGIP-SYSTEM-MIB", "sysVlanIfcStatHcInUcastPkts"), ("F5-BIGIP-SYSTEM-MIB", "sysVlanIfcStatHcInMulticastPkts"), ("F5-BIGIP-SYSTEM-MIB", "sysVlanIfcStatHcInBroadcastPkts"), ("F5-BIGIP-SYSTEM-MIB", "sysVlanIfcStatHcOutOctets"), ("F5-BIGIP-SYSTEM-MIB", "sysVlanIfcStatHcOutUcastPkts"), ("F5-BIGIP-SYSTEM-MIB", "sysVlanIfcStatHcOutMulticastPkts"), ("F5-BIGIP-SYSTEM-MIB", "sysVlanIfcStatHcOutBroadcastPkts"), ("F5-BIGIP-SYSTEM-MIB", "sysVlanIfcStatPvaInPkts"), ("F5-BIGIP-SYSTEM-MIB", "sysVlanIfcStatPvaInOctets"), ("F5-BIGIP-SYSTEM-MIB", "sysVlanIfcStatPvaOutPkts"), ("F5-BIGIP-SYSTEM-MIB", "sysVlanIfcStatPvaOutOctets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysVlanIfcStatGroup = sysVlanIfcStatGroup.setStatus('current')
if mibBuilder.loadTexts: sysVlanIfcStatGroup.setDescription('A collection of objects of sysVlanIfcStat MIB.')
mibBuilder.exportSymbols("F5-BIGIP-SYSTEM-MIB", sysTmmStatDroppedPackets=sysTmmStatDroppedPackets, sysSwitchDdmStatGroup=sysSwitchDdmStatGroup, sysLsnPoolStatGroup=sysLsnPoolStatGroup, sysJoinCertOrderManagerStatConnErrors=sysJoinCertOrderManagerStatConnErrors, sysGlobalDiameterrouterStatCurIncomingConnections=sysGlobalDiameterrouterStatCurIncomingConnections, sysSelfIp=sysSelfIp, sysClientsslStatCurrentActiveHandshakes=sysClientsslStatCurrentActiveHandshakes, sysBladeVoltageSlot=sysBladeVoltageSlot, sysIfxStatResetStats=sysIfxStatResetStats, sysCpuSensorFanSpeed=sysCpuSensorFanSpeed, sysProductBuild=sysProductBuild, sysIpStatErrOpt=sysIpStatErrOpt, sysIfxStatHcOutOctets=sysIfxStatHcOutOctets, sysGlobalDiameterrouterStatTotIncomingStreams=sysGlobalDiameterrouterStatTotIncomingStreams, sysVlanTable=sysVlanTable, sysGlobalTmmStatClientMaxConns=sysGlobalTmmStatClientMaxConns, sysClientsslStatSessionMirrorFailure=sysClientsslStatSessionMirrorFailure, sysCpu=sysCpu, sysDot3StatCarrierSenseErrors=sysDot3StatCarrierSenseErrors, sysTmmStatServerEvictedConns=sysTmmStatServerEvictedConns, sysGlobalSiprouterStatTotFailedPassthruConnections=sysGlobalSiprouterStatTotFailedPassthruConnections, sysHostMemoryUsed=sysHostMemoryUsed, sysTmmStatConnectionFlowMiss=sysTmmStatConnectionFlowMiss, sysTmmStatTmUsageRatio5s=sysTmmStatTmUsageRatio5s, sysLldpNeighborsTableAggStatus=sysLldpNeighborsTableAggStatus, sysHttpStatVideoPrecompressBytes=sysHttpStatVideoPrecompressBytes, sysAdminIpNetmask=sysAdminIpNetmask, sysTrunkStatTable=sysTrunkStatTable, sysVlanMember=sysVlanMember, sysTmmStatServerMaxConns=sysTmmStatServerMaxConns, sysSelfPortTable=sysSelfPortTable, sysGlobalSipsessionStatTooManyHops483Sent=sysGlobalSipsessionStatTooManyHops483Sent, sysFwNatStaticDestinationTranslationPoolStatErrMemory=sysFwNatStaticDestinationTranslationPoolStatErrMemory, sysProfilePptpStatCallClearRequests=sysProfilePptpStatCallClearRequests, sysWebAccelerationStatRemoteHits=sysWebAccelerationStatRemoteHits, sysDnsServerStatXfrResponses=sysDnsServerStatXfrResponses, sysJoinCertOrderManagerOrderStatus=sysJoinCertOrderManagerOrderStatus, sysStpInterfaceStatGroup=sysStpInterfaceStatGroup, sysSysDeviceOptionalModulesNumber=sysSysDeviceOptionalModulesNumber, sysHttpCompressionStatPostcompressBytes=sysHttpCompressionStatPostcompressBytes, sysSwitchDdmStatEntry=sysSwitchDdmStatEntry, sysIcmpStatForward=sysIcmpStatForward, sysCertOrderManagerName=sysCertOrderManagerName, sysBladeVoltageGroup=sysBladeVoltageGroup, sysGlobalStats=sysGlobalStats, sysIpStatResetStats=sysIpStatResetStats, sysClientsslStatMaxCompatConns=sysClientsslStatMaxCompatConns, sysInterfaceMtu=sysInterfaceMtu, sysGlobalSipsessionStatOther=sysGlobalSipsessionStatOther, sysProductHotfix=sysProductHotfix, sysCertValidatorOcspStrictRespCertCheck=sysCertValidatorOcspStrictRespCertCheck, sysDnsStatTxtReqs=sysDnsStatTxtReqs, sysPacketFilterVlanIndex=sysPacketFilterVlanIndex, sysStatAuthSuccessResults=sysStatAuthSuccessResults, sysServersslStatInsecureHandshakeRejects=sysServersslStatInsecureHandshakeRejects, sysStatClientCurConns=sysStatClientCurConns, sysClientsslStatTotConns1m=sysClientsslStatTotConns1m, sysClusterMbrSlotId=sysClusterMbrSlotId, sysClientsslStatDesBulkOffload=sysClientsslStatDesBulkOffload, sysVcmpAllowedSlotsEntry=sysVcmpAllowedSlotsEntry, sysProfilePptpStatResetStats=sysProfilePptpStatResetStats, sysSubMemoryGroup=sysSubMemoryGroup, sysLogicalDiskMembersNumber=sysLogicalDiskMembersNumber, sysFastHttpStatUnbufferedReqs=sysFastHttpStatUnbufferedReqs, sysGlobalFwNatStaticSourceTranslationPoolStat=sysGlobalFwNatStaticSourceTranslationPoolStat, sysDot3StatMultiCollisionFrames=sysDot3StatMultiCollisionFrames, sysGlobalTmmStatServerCurConns=sysGlobalTmmStatServerCurConns, sysStatPvaServerTotConns5s=sysStatPvaServerTotConns5s, sysFwNatDynamicPoolFailureStatFailureCount=sysFwNatDynamicPoolFailureStatFailureCount, sysChassisPowerSupplyStatus=sysChassisPowerSupplyStatus, sysDot1dbaseStatPortName=sysDot1dbaseStatPortName, sysInterfaceStatQqIn=sysInterfaceStatQqIn, sysGlobalHostCpuNice5m=sysGlobalHostCpuNice5m, sysHttpCompressionStatPrecompressBytes=sysHttpCompressionStatPrecompressBytes, sysWebAccelerationStatCacheEvictions=sysWebAccelerationStatCacheEvictions, sysCertValidatorOcspCacheTimeout=sysCertValidatorOcspCacheTimeout, sysDot3StatExcessiveCollisions=sysDot3StatExcessiveCollisions, bigipVprB2250=bigipVprB2250, sysPcpStatPcpPeerResponses=sysPcpStatPcpPeerResponses, sysClusterPriSlotId=sysClusterPriSlotId, sysPvaStatClientPktsOut=sysPvaStatClientPktsOut, sysDnsServerStatResetStats=sysDnsServerStatResetStats, bigip11050N=bigip11050N, sysSysDeviceName=sysSysDeviceName, sysMultiHostCpuIdle5s=sysMultiHostCpuIdle5s, sysGlobalTmmStatServerPktsOut=sysGlobalTmmStatServerPktsOut, sysTrunkStatEntry=sysTrunkStatEntry, sysMptcpStatFastcloseRx=sysMptcpStatFastcloseRx, sysServersslStatRecordsIn=sysServersslStatRecordsIn, sysClusterNumber=sysClusterNumber, sysMultiHostCpuIrq=sysMultiHostCpuIrq, sysHttpCompressionStatResetStats=sysHttpCompressionStatResetStats, sysVlanxStatGroup=sysVlanxStatGroup, sysStpGlobalsMode=sysStpGlobalsMode, sysProcPidStatNice=sysProcPidStatNice, sysVcmpStatCpuUsage5mins=sysVcmpStatCpuUsage5mins, sysLldpNeighborsTableLocalInterface=sysLldpNeighborsTableLocalInterface, bigip10350N=bigip10350N, sysSwitchDdmStat=sysSwitchDdmStat, sysVcmpCpuCoreEntry=sysVcmpCpuCoreEntry, sysVcmpCpuCoreVcmpName=sysVcmpCpuCoreVcmpName, bigipi10800=bigipi10800, sysStatPvaClientBytesIn=sysStatPvaClientBytesIn, sysFastHttpStatResetStats=sysFastHttpStatResetStats, sysPhysicalDiskGroup=sysPhysicalDiskGroup, sysSystemNodeName=sysSystemNodeName, sysRouteMgmtEntryEntry=sysRouteMgmtEntryEntry, sysTmmStatLicenseDeny=sysTmmStatLicenseDeny, sysTrunkName=sysTrunkName, sysInterfaceStatDropsOut=sysInterfaceStatDropsOut, sysGlobalTcpStat=sysGlobalTcpStat, sysProductName=sysProductName, sysGlobalTmmStatGroup=sysGlobalTmmStatGroup, sysMultiHostCpuNice5m=sysMultiHostCpuNice5m, sysConnPoolStatCurSize=sysConnPoolStatCurSize, sysClientsslStatConnectionMirrorHaCtxRecv=sysClientsslStatConnectionMirrorHaCtxRecv, sysGlobalSiprouterStatTotMessagesNoConnection=sysGlobalSiprouterStatTotMessagesNoConnection, sysSysDeviceActiveModulesTable=sysSysDeviceActiveModulesTable, sysClientsslStatRsaKeySize1024Offload=sysClientsslStatRsaKeySize1024Offload, sysStpBridgeTreeStatRootPort=sysStpBridgeTreeStatRootPort, sysHttpStatPostcompressBytes=sysHttpStatPostcompressBytes, sysPcpStatPcpAnnounceResponsesMulticast=sysPcpStatPcpAnnounceResponsesMulticast, sysSubMemoryMaxAllocated=sysSubMemoryMaxAllocated, sysStatPvaClientTotConns=sysStatPvaClientTotConns, sysStpInterfaceStatPortNum=sysStpInterfaceStatPortNum, sysCertValidatorOcspStatResponseMalformedRequestErrors=sysCertValidatorOcspStatResponseMalformedRequestErrors, sysJoinCertOrderManagerStatKeyName=sysJoinCertOrderManagerStatKeyName, sysLsnPoolStatTotalPortBlockAllocationFailures=sysLsnPoolStatTotalPortBlockAllocationFailures, sysClusterMbr=sysClusterMbr, sysFastHttpStatConnpoolCurSize=sysFastHttpStatConnpoolCurSize, sysIfxStatConnectorPresent=sysIfxStatConnectorPresent, sysFecStatOutRawPackets=sysFecStatOutRawPackets, sysServersslStatDhGroupP256Offload=sysServersslStatDhGroupP256Offload, sysIpStatErrRtx=sysIpStatErrRtx, sysGlobalDiameterrouterStatTotMessagesUnroutable=sysGlobalDiameterrouterStatTotMessagesUnroutable, sysPvaStatEntry=sysPvaStatEntry, sysGlobalTmmStatMemoryUsed=sysGlobalTmmStatMemoryUsed, sysGlobalSipsessionStatLoopDetected482Sent=sysGlobalSipsessionStatLoopDetected482Sent, sysL2ForwardAttr=sysL2ForwardAttr, sysHttpCompressionStatXmlPrecompressBytes=sysHttpCompressionStatXmlPrecompressBytes, sysCmSyncStatusDetails=sysCmSyncStatusDetails, sysPacketFilterExpression=sysPacketFilterExpression, sysHttpStatResp4xxCnt=sysHttpStatResp4xxCnt, sysMultiHostMode=sysMultiHostMode, sysFastL4StatSyncookIssue=sysFastL4StatSyncookIssue, sysSysDeviceTimelimitedModulesName=sysSysDeviceTimelimitedModulesName, sysServersslStatPartiallyHwAcceleratedConns=sysServersslStatPartiallyHwAcceleratedConns, sysFastL4StatLbcTimedout=sysFastL4StatLbcTimedout, sysBladeVoltageTable=sysBladeVoltageTable, sysGlobalTftpStatWriteRequests=sysGlobalTftpStatWriteRequests, sysHttpStatSgmlPostcompressBytes=sysHttpStatSgmlPostcompressBytes, sysMultiHostCpuIdle=sysMultiHostCpuIdle, sysVcmpCpuCore=sysVcmpCpuCore, sysStpGlobalsIdentifier=sysStpGlobalsIdentifier, sysVcmpMinSlots=sysVcmpMinSlots, yki2600=yki2600, bigip7200=bigip7200, sysInterfaceStatErrorsOut=sysInterfaceStatErrorsOut, sysSwStatusVolume=sysSwStatusVolume, sysFecStatInRdndLost=sysFecStatInRdndLost, sysPcpStatPcpAnnounceResponsesUcast=sysPcpStatPcpAnnounceResponsesUcast, sysAttrFailoverNetwork=sysAttrFailoverNetwork, sysGlobalSipsessionStatGlobalFailures=sysGlobalSipsessionStatGlobalFailures, sysVlanGroupMacTrue=sysVlanGroupMacTrue, sysVirtualDiskFilename=sysVirtualDiskFilename, ykVprB2150=ykVprB2150, sysClientsslStatSha384DigestOffload=sysClientsslStatSha384DigestOffload, sysClientsslStatConnectionMirrorHaCtxSent=sysClientsslStatConnectionMirrorHaCtxSent, bigipSystemCompliance=bigipSystemCompliance, sysChassisPowerSupplyIndex=sysChassisPowerSupplyIndex, sysClientsslStatSourceIpBypasses=sysClientsslStatSourceIpBypasses, sysMultiHostCpuIrq1m=sysMultiHostCpuIrq1m, sysSwImageTable=sysSwImageTable, sysCertValidatorOcspSignerKey=sysCertValidatorOcspSignerKey, sysVcmpAssignedSlotsEntry=sysVcmpAssignedSlotsEntry, bigip7000F=bigip7000F, sysStpGlobals2MaxHops=sysStpGlobals2MaxHops, sysUnicastAddrSourcePort=sysUnicastAddrSourcePort, sysSwImageBuildDate=sysSwImageBuildDate, sysGlobalHostSwapTotalKb=sysGlobalHostSwapTotalKb, sysMultiHostCpuSystem=sysMultiHostCpuSystem, sysPcpStatResetStats=sysPcpStatResetStats, sysMultiHostOtherMemoryUsedKb=sysMultiHostOtherMemoryUsedKb, sysServersslStatDhGroupP256=sysServersslStatDhGroupP256, sysPlaneStatCpuCount=sysPlaneStatCpuCount, sysHostCpuId=sysHostCpuId, sysHttpStatRamcacheMissBytesAll=sysHttpStatRamcacheMissBytesAll, sysFastHttpStatReqParseErrors=sysFastHttpStatReqParseErrors, sysCertOrderManagerAutoRenew=sysCertOrderManagerAutoRenew, sysTcpStatOpen=sysTcpStatOpen, sysBladeTempIndex=sysBladeTempIndex, sysStpVlanMbrTable=sysStpVlanMbrTable, sysCertValidatorOcspTable=sysCertValidatorOcspTable, sysFwNatDynamicPoolStatLsnBackupPoolTranslations=sysFwNatDynamicPoolStatLsnBackupPoolTranslations, sysClientsslStatRc4BulkOffload=sysClientsslStatRc4BulkOffload, sysFastHttpStatServerRxBad=sysFastHttpStatServerRxBad, sysGlobalTmmStatWlSyncookieRejects=sysGlobalTmmStatWlSyncookieRejects, sysSwitchDdmStatTxDbmPwr4=sysSwitchDdmStatTxDbmPwr4, sysVlanIfcStatOutErrors=sysVlanIfcStatOutErrors, sysGlobalDiametersessionStatGroup=sysGlobalDiametersessionStatGroup, sysStatClientPktsOut5s=sysStatClientPktsOut5s, sysSctpStatActivePaths=sysSctpStatActivePaths, sysCertValidatorOcspClockSkew=sysCertValidatorOcspClockSkew, sysGlobalSipsessionStatInvite=sysGlobalSipsessionStatInvite, sysStpBridgeTreeStatNumber=sysStpBridgeTreeStatNumber, sysProcPidStatNumThreads=sysProcPidStatNumThreads, sysMultiHostCpuIowait=sysMultiHostCpuIowait, sysStatServerTotConns5m=sysStatServerTotConns5m, sysGlobalDiametersessionStatAveRequestLatency=sysGlobalDiametersessionStatAveRequestLatency, sysStatActiveCpuCount=sysStatActiveCpuCount, sysVlanGroupMbr=sysVlanGroupMbr, sysCertificateFileObjectEntry=sysCertificateFileObjectEntry, sysRouteStaticEntry=sysRouteStaticEntry, sysGlobalIpsecalgStatFailures=sysGlobalIpsecalgStatFailures, bigipVirtualEdition=bigipVirtualEdition, sysJoinCertValidatorValidator=sysJoinCertValidatorValidator, sysCpuSensorGroup=sysCpuSensorGroup, sysVlanxStatHcInMulticastPkts=sysVlanxStatHcInMulticastPkts, sysAttrConfigsyncState=sysAttrConfigsyncState, sysWebAccelerationStatInterStripeMisses=sysWebAccelerationStatInterStripeMisses, sysGlobalTmmStatSwSyncookieAccepts=sysGlobalTmmStatSwSyncookieAccepts, sysFwNatDynamicPoolStatPcpErrorsUnavailableResource=sysFwNatDynamicPoolStatPcpErrorsUnavailableResource, sysTmmStatClientPktsIn=sysTmmStatClientPktsIn, sysGlobalSiprouterStatTotMessagesStandbyDropped=sysGlobalSiprouterStatTotMessagesStandbyDropped, sysWebAccelerationStatCacheHitBytes=sysWebAccelerationStatCacheHitBytes, sysServersslStatSha224DigestOffload=sysServersslStatSha224DigestOffload, sysVlanxStatHcOutMulticastPkts=sysVlanxStatHcOutMulticastPkts, sysDnsStatOpcodeQuery=sysDnsStatOpcodeQuery, sysFastL4StatLbcSuccessful=sysFastL4StatLbcSuccessful, sysProcPidStatPpid=sysProcPidStatPpid, sysProxyExclusionIp=sysProxyExclusionIp, sysServersslStatMd5Digest=sysServersslStatMd5Digest, sysCertValidatorOcspTimeout=sysCertValidatorOcspTimeout, sysInterfaceMediaOptions=sysInterfaceMediaOptions, sysServersslStatTlsv12=sysServersslStatTlsv12, sysSysDeviceInactiveModulesModule=sysSysDeviceInactiveModulesModule, sysCertValidatorOcspStatCertificateStatusUnknown=sysCertValidatorOcspStatCertificateStatusUnknown, sysClientsslStatTotalHandshakesSoftware=sysClientsslStatTotalHandshakesSoftware, sysSubMemoryName=sysSubMemoryName, sysAttrConnAdaptiveReaperLowat=sysAttrConnAdaptiveReaperLowat, PYSNMP_MODULE_ID=bigipSystem, sysServersslStatBypassClientCertificateRequest=sysServersslStatBypassClientCertificateRequest, sysLldpNeighbors=sysLldpNeighbors, sysIfxStatInBroadcastPkts=sysIfxStatInBroadcastPkts, sysDot3StatCollisionCount=sysDot3StatCollisionCount, sysHttpStatResp3xxCnt=sysHttpStatResp3xxCnt, sysIpsecSpdStatPackets=sysIpsecSpdStatPackets, sysServersslStatNonHwAcceleratedConns=sysServersslStatNonHwAcceleratedConns, sysVlanxStatHcOutBroadcastPkts=sysVlanxStatHcOutBroadcastPkts, sysTmmStatEntry=sysTmmStatEntry, sysSysDeviceHostname=sysSysDeviceHostname, sysHttpStatV9Resp=sysHttpStatV9Resp, sysSelfPorts=sysSelfPorts, sysProcPidStatCpuUsageRecent=sysProcPidStatCpuUsageRecent)
mibBuilder.exportSymbols("F5-BIGIP-SYSTEM-MIB", sysIpStatErrReassembledTooLong=sysIpStatErrReassembledTooLong, sysProcPidStatSignal=sysProcPidStatSignal, sysProfilePptpStatStopReplies=sysProfilePptpStatStopReplies, sysStatServerPktsOut5s=sysStatServerPktsOut5s, sysGlobalSiprouterStatTotOutgoingStreams=sysGlobalSiprouterStatTotOutgoingStreams, sysTmmStatNoHandlerDeny=sysTmmStatNoHandlerDeny, sysStpBridgeStatPathCost=sysStpBridgeStatPathCost, sysSwStatusTable=sysSwStatusTable, sysGlobalHostCpuSoftirq1m=sysGlobalHostCpuSoftirq1m, sysChassisPowerSupplyGroup=sysChassisPowerSupplyGroup, sysVcmpStatDiskUseKb=sysVcmpStatDiskUseKb, sysIp6StatErrLen=sysIp6StatErrLen, sysSysDeviceMirrorSecondaryIpType=sysSysDeviceMirrorSecondaryIpType, sysSysDeviceTimelimitedModulesIndex=sysSysDeviceTimelimitedModulesIndex, sysProcPidStatCminFlt=sysProcPidStatCminFlt, sysSysDeviceMirrorSecondaryIp=sysSysDeviceMirrorSecondaryIp, sysGlobalDiameterrouterStat=sysGlobalDiameterrouterStat, sysTrunkCfgMemberTable=sysTrunkCfgMemberTable, sysClientsslStatMidstreamRenegotiations=sysClientsslStatMidstreamRenegotiations, sysStatServerPktsOut=sysStatServerPktsOut, sysPacketFilterVlan=sysPacketFilterVlan, sysIpsecSpdStatSourcePort=sysIpsecSpdStatSourcePort, sysTrunkShortTimeout=sysTrunkShortTimeout, sysChassisTempGroup=sysChassisTempGroup, sysTcpStatTxrexmits=sysTcpStatTxrexmits, sysGlobalSipsessionStatProvisional=sysGlobalSipsessionStatProvisional, sysProcPidStatVsize=sysProcPidStatVsize, sysIcmpStatResetStats=sysIcmpStatResetStats, sysMultiHostSwapTotal=sysMultiHostSwapTotal, sysFwNatDynamicPoolStatPcpAnnounceResponsesUcast=sysFwNatDynamicPoolStatPcpAnnounceResponsesUcast, sysStpInterfaceStatRootPrio=sysStpInterfaceStatRootPrio, sysVlanIfcStatPvaOutPkts=sysVlanIfcStatPvaOutPkts, sysFastL4StatResetStats=sysFastL4StatResetStats, sysVlanStatCollisions=sysVlanStatCollisions, sysGlobalSipsessionStatBadRequest=sysGlobalSipsessionStatBadRequest, sysGlobalIiopStat=sysGlobalIiopStat, sysClientsslStatHandshakeFailures=sysClientsslStatHandshakeFailures, sysGlobalSipsessionStatNotFound404Sent=sysGlobalSipsessionStatNotFound404Sent, sysStpBridgeStatHelloTime=sysStpBridgeStatHelloTime, sysHttpStatGetReqs=sysHttpStatGetReqs, sysCmSyncStatusDetailsGroup=sysCmSyncStatusDetailsGroup, sysCertStatusObjectOcspStatus=sysCertStatusObjectOcspStatus, sysStpInterfaceTreeStatName=sysStpInterfaceTreeStatName, sysInterfaceStatNumber=sysInterfaceStatNumber, sysCertOrderManagerLoginName=sysCertOrderManagerLoginName, sysStatPvaClientTotConns5s=sysStatPvaClientTotConns5s, sysSysDeviceMirrorIpType=sysSysDeviceMirrorIpType, sysSwitchDdmStatTxDbmPwrLoAlarm=sysSwitchDdmStatTxDbmPwrLoAlarm, sysStatPvaClientBytesIn5s=sysStatPvaClientBytesIn5s, sysStpGlobals2Entry=sysStpGlobals2Entry, sysTmmProcStatMemoryUsedKb=sysTmmProcStatMemoryUsedKb, sysProcPidStatStartTime=sysProcPidStatStartTime, sysChassisFanNumber=sysChassisFanNumber, sysSwitchDdmStatTxPwr4=sysSwitchDdmStatTxPwr4, sysStpBridgeStatTransmitHold=sysStpBridgeStatTransmitHold, sysFwNatDynamicPoolStatPbaPortBlockAllocationFailures=sysFwNatDynamicPoolStatPbaPortBlockAllocationFailures, sysFwNatDynamicPoolFailureStatEntry=sysFwNatDynamicPoolFailureStatEntry, sysPvaStatServerPktsOut=sysPvaStatServerPktsOut, sysStatServerPktsOut5m=sysStatServerPktsOut5m, sysRouteMgmtEntryMtu=sysRouteMgmtEntryMtu, sysSwStatusEntry=sysSwStatusEntry, sysIpsecSpdStatBytes=sysIpsecSpdStatBytes, sysInterfaceEntry=sysInterfaceEntry, sysStatResetStats=sysStatResetStats, sysIpsecSpdStatNumber=sysIpsecSpdStatNumber, sysCmFailoverStatusId=sysCmFailoverStatusId, sysGlobalDiametersessionStatTotRequestReceived=sysGlobalDiametersessionStatTotRequestReceived, sysStpInterfaceStatResetStats=sysStpInterfaceStatResetStats, sysFwNatStaticDestinationTranslationPoolStatSubscrIdErrs=sysFwNatStaticDestinationTranslationPoolStatSubscrIdErrs, sysCpuTable=sysCpuTable, sysIfxStatHcInBroadcastPkts=sysIfxStatHcInBroadcastPkts, sysIpStatErrMcastNoRoute=sysIpStatErrMcastNoRoute, sysCrypto=sysCrypto, sysTmmStatHwSyncookies=sysTmmStatHwSyncookies, sysJoinCertOrderManager=sysJoinCertOrderManager, sysPlaneStatEntry=sysPlaneStatEntry, sysFastHttpStatNumberReqs=sysFastHttpStatNumberReqs, sysStpGlobalsGroup=sysStpGlobalsGroup, bigip6900F=bigip6900F, sysClientsslStatIdeaBulk=sysClientsslStatIdeaBulk, sysSysDevicePlatformId=sysSysDevicePlatformId, bigip4250=bigip4250, sysSelfPortAddr=sysSelfPortAddr, sysClientsslStatPrematureDisconnects=sysClientsslStatPrematureDisconnects, bigip540=bigip540, sysBladeVoltageEntry=sysBladeVoltageEntry, sysVcmpVlanGroup=sysVcmpVlanGroup, sysGlobalSiprouterStatGroup=sysGlobalSiprouterStatGroup, sysProfilePptpStatWanErrorNotifies=sysProfilePptpStatWanErrorNotifies, sysJoinCertValidatorTable=sysJoinCertValidatorTable, sysCertValidatorOcspStat=sysCertValidatorOcspStat, sysLsnPoolFailureStatFailureCause=sysLsnPoolFailureStatFailureCause, sysVcmpAssignedSlotsName=sysVcmpAssignedSlotsName, sysDot3StatNumber=sysDot3StatNumber, sysCmFailoverStatusDetailsGroup=sysCmFailoverStatusDetailsGroup, sysIfNumber=sysIfNumber, sysStatPvaClientMaxConns=sysStatPvaClientMaxConns, sysSysDeviceMulticastPort=sysSysDeviceMulticastPort, sysServersslStatPeercertValid=sysServersslStatPeercertValid, sysSwitchDdmStatTxDbmPwrLoWarn=sysSwitchDdmStatTxDbmPwrLoWarn, sysTmmStatTmmId=sysTmmStatTmmId, sysCpuSlot=sysCpuSlot, sysIcmpStatGroup=sysIcmpStatGroup, sysHttpCompressionStatXmlPostcompressBytes=sysHttpCompressionStatXmlPostcompressBytes, sysLogicalDiskName=sysLogicalDiskName, sysProcPidStatBladeNum=sysProcPidStatBladeNum, sysVirtualDiskGroup=sysVirtualDiskGroup, sysSwitchDdmStatRxPwr1=sysSwitchDdmStatRxPwr1, sysGlobalFastHttpStat=sysGlobalFastHttpStat, wj800=wj800, sysPlaneStatGroup=sysPlaneStatGroup, sysStatMultiProcessorMode=sysStatMultiProcessorMode, sysServersslStatAesGcmBulkOffload=sysServersslStatAesGcmBulkOffload, sysSysDeviceProduct=sysSysDeviceProduct, sysCmTrafficGroupStatus=sysCmTrafficGroupStatus, sysRoute=sysRoute, sysFwNatDynamicPoolStatPbaActivePortBlocks=sysFwNatDynamicPoolStatPbaActivePortBlocks, sysProfilePptpStatEchoReplies=sysProfilePptpStatEchoReplies, sysCmTrafficGroupStatusGroup=sysCmTrafficGroupStatusGroup, sysSelfIpAddr=sysSelfIpAddr, sysTmmStatServerPktsOut=sysTmmStatServerPktsOut, sysPvaStatClientPktsIn=sysPvaStatClientPktsIn, sysStatOutgoingPacketErrors=sysStatOutgoingPacketErrors, sysMultiHostCpuUsageRatio5s=sysMultiHostCpuUsageRatio5s, sysGlobalHostMemUsed=sysGlobalHostMemUsed, sysProfilePptpStatOutgoingCallRequests=sysProfilePptpStatOutgoingCallRequests, sysClusterMbrMgmtAddrType=sysClusterMbrMgmtAddrType, sysLsnPoolStatTotalPortBlockAllocations=sysLsnPoolStatTotalPortBlockAllocations, sysIntfMediaSfpName=sysIntfMediaSfpName, sysLldpNeighborsTablePpvid=sysLldpNeighborsTablePpvid, sysVlanSourceCheck=sysVlanSourceCheck, sysTmmStatClientTotConns=sysTmmStatClientTotConns, sysGlobalHostCpuIdle5m=sysGlobalHostCpuIdle5m, sysSysDeviceTable=sysSysDeviceTable, sysGlobalDiameterrouterStatTotPassthruConnections=sysGlobalDiameterrouterStatTotPassthruConnections, sysLogicalDiskTable=sysLogicalDiskTable, sysJoinCertOrderManagerEntry=sysJoinCertOrderManagerEntry, sysProfilePptpStatStartRequests=sysProfilePptpStatStartRequests, sysServersslStatSessCacheOverflows=sysServersslStatSessCacheOverflows, sysVirtualDiskNumber=sysVirtualDiskNumber, sysRouteMgmtEntryNetmaskType=sysRouteMgmtEntryNetmaskType, sysStp=sysStp, sysSwitchDdmStatRxDbmPwrHiWarn=sysSwitchDdmStatRxDbmPwrHiWarn, sysFwNatStaticSourceTranslationPoolStatResetStats=sysFwNatStaticSourceTranslationPoolStatResetStats, sysGlobalSiprouterStatTotPassthruBytes=sysGlobalSiprouterStatTotPassthruBytes, sysGlobalSipsessionStatService=sysGlobalSipsessionStatService, sysIp6StatRxFragDropped=sysIp6StatRxFragDropped, sysPacketFilterStat=sysPacketFilterStat, sysSysDeviceNumber=sysSysDeviceNumber, sysWebAccelerationStatGroup=sysWebAccelerationStatGroup, sysClientsslStatOcspFwdpClientsslInvalidCertResp=sysClientsslStatOcspFwdpClientsslInvalidCertResp, sysServersslStatTotalHandshakesSoftware=sysServersslStatTotalHandshakesSoftware, sysSwImageChksum=sysSwImageChksum, sysSctpStatInactivePaths=sysSctpStatInactivePaths, sysUnicastAddrNumber=sysUnicastAddrNumber, sysHttpStatRamcacheMissBytes=sysHttpStatRamcacheMissBytes, sysSystem=sysSystem, sysClusterPriSelTime=sysClusterPriSelTime, sysClientsslStatNullBulk=sysClientsslStatNullBulk, sysGlobalSiprouterStatTotMessagesInCloned=sysGlobalSiprouterStatTotMessagesInCloned, sysStpVlanMbr=sysStpVlanMbr, sysPacketFilterAddrIpType=sysPacketFilterAddrIpType, sysJoinCertOrderManagerOrderType=sysJoinCertOrderManagerOrderType, arx2500=arx2500, sysVcmpCpuCoreCpuCoreId=sysVcmpCpuCoreCpuCoreId, sysVcmpAllowedSlotsName=sysVcmpAllowedSlotsName, sysClientsslStatConnectionMirrorHaFailure=sysClientsslStatConnectionMirrorHaFailure, sysVlanGroupMbrGroup=sysVlanGroupMbrGroup, sysStpBridgeStat=sysStpBridgeStat, sysPlaneStatPlaneName=sysPlaneStatPlaneName, sysFecStatOutRdndBytes=sysFecStatOutRdndBytes, sysFastHttpStatResp2xxCnt=sysFastHttpStatResp2xxCnt, sysHttpStatOtherPostcompressBytes=sysHttpStatOtherPostcompressBytes, sysDnsStatFastDnsRespRf=sysDnsStatFastDnsRespRf, sysIcmpStatErrProto=sysIcmpStatErrProto, sysDnsStatResetStats=sysDnsStatResetStats, sysGlobalHostActiveCpuCount=sysGlobalHostActiveCpuCount, sysPhysicalDiskTable=sysPhysicalDiskTable, sysMultiHostCpuUser1m=sysMultiHostCpuUser1m, sysClientsslStatRc2Bulk=sysClientsslStatRc2Bulk, sysBladeVoltageNumber=sysBladeVoltageNumber, sysTmmStatNpus=sysTmmStatNpus, sysServersslStatAesBulkOffload=sysServersslStatAesBulkOffload, sysGlobalHostCpuSystem=sysGlobalHostCpuSystem, sysIpStatErrCksum=sysIpStatErrCksum, sysGlobalHostCpuSoftirq5m=sysGlobalHostCpuSoftirq5m, sysSctpStatAcceptfails=sysSctpStatAcceptfails, sysIpStatNbrUnreachableDropped=sysIpStatNbrUnreachableDropped, sysVlanIfcStatInUnknownProtos=sysVlanIfcStatInUnknownProtos, sysClientsslStatDhGroupX25519Offload=sysClientsslStatDhGroupX25519Offload, sysFecStatEntry=sysFecStatEntry, sysMultiHostUsed=sysMultiHostUsed, sysHttpStatSgmlPrecompressBytes=sysHttpStatSgmlPrecompressBytes, sysMultiHostCpuSystem5m=sysMultiHostCpuSystem5m, sysWebAccelerationStatRemoteMisses=sysWebAccelerationStatRemoteMisses, sysServersslStatTlsv1=sysServersslStatTlsv1, sysChassisFanTable=sysChassisFanTable, sysVcmpAssignedSlots=sysVcmpAssignedSlots, sysInterfaceLearnMode=sysInterfaceLearnMode, bigip8950=bigip8950, sysDot3StatSqetestErrors=sysDot3StatSqetestErrors, sysGlobalDiametersessionStatTotRetransReturnedUnavail=sysGlobalDiametersessionStatTotRetransReturnedUnavail, sysDnsStatGroup=sysDnsStatGroup, sysVcmpAllowedSlotsTable=sysVcmpAllowedSlotsTable, sysProcPidStatCutime=sysProcPidStatCutime, bigip4000=bigip4000, sysServersslStatOcspServersslResponseErrors=sysServersslStatOcspServersslResponseErrors, sysRouteMgmtEntry=sysRouteMgmtEntry, sysStpGlobalsMaxAge=sysStpGlobalsMaxAge, sysIfTable=sysIfTable, bigip7050=bigip7050, sysHttpCompressionStatImagePostcompressBytes=sysHttpCompressionStatImagePostcompressBytes, sysStpInterfaceMbr=sysStpInterfaceMbr, sysGlobalTmmStatTmUsageRatio5m=sysGlobalTmmStatTmUsageRatio5m, sysGlobalSiprouterStatTotIncomingConnections=sysGlobalSiprouterStatTotIncomingConnections, sysGlobalTmmStatConnectionFlowMiss=sysGlobalTmmStatConnectionFlowMiss, sysProcPidStatModules=sysProcPidStatModules, sysStatServerMaxConns5m=sysStatServerMaxConns5m, sysFwNatStaticSourceTranslationPoolStatErrAddrTrans=sysFwNatStaticSourceTranslationPoolStatErrAddrTrans, sysSwHotfixBuild=sysSwHotfixBuild, sysLsnPoolStatTotalZombiePortBlockConnsKilled=sysLsnPoolStatTotalZombiePortBlockConnsKilled, sysArpStaticEntryEntry=sysArpStaticEntryEntry, sysSwitchDdmStatTxAlarmHi=sysSwitchDdmStatTxAlarmHi, sysSelfPortDefAllowName=sysSelfPortDefAllowName, sysIp6StatNbrPbqFullDropped=sysIp6StatNbrPbqFullDropped, sysIpStatTxFragDropped=sysIpStatTxFragDropped, sysMultiHostCpuNice1m=sysMultiHostCpuNice1m, sysGlobalDiametersessionStatTotDisconnectPeerRequests=sysGlobalDiametersessionStatTotDisconnectPeerRequests, sysClientsslStatConnectionMirrorHaHsSuccess=sysClientsslStatConnectionMirrorHaHsSuccess, sysIp6StatErrMcastMaxPendingRoutes=sysIp6StatErrMcastMaxPendingRoutes, sysServersslStatDheDssKeyxchg=sysServersslStatDheDssKeyxchg, sysAuthStatTotSessions=sysAuthStatTotSessions, sysHostDisk=sysHostDisk, sysJoinCertValidatorGroup=sysJoinCertValidatorGroup, sysCluster=sysCluster, sysChassisPowerSupplyEntry=sysChassisPowerSupplyEntry, sysCertValidatorOcsp=sysCertValidatorOcsp, sysFastHttpStatResp5xxCnt=sysFastHttpStatResp5xxCnt, sysIfxStat=sysIfxStat, sysServersslStatMaxNativeConns=sysServersslStatMaxNativeConns, sysCertValidatorOcspStatResponseInternalErrors=sysCertValidatorOcspStatResponseInternalErrors, sysTcpStatTimeWait=sysTcpStatTimeWait, sysCertOrderManagerStatPending=sysCertOrderManagerStatPending, sysGlobalSipsessionStatBenotify=sysGlobalSipsessionStatBenotify, sysVlanxStatConnectorPresent=sysVlanxStatConnectorPresent, sysVcmpStatVmStatus=sysVcmpStatVmStatus, sysFwNatDynamicPoolStatPcpPeerResponses=sysFwNatDynamicPoolStatPcpPeerResponses, sysGlobalFtpStatActiveRequests=sysGlobalFtpStatActiveRequests, sysBladeTemp=sysBladeTemp, sysGlobalDiametersessionStatTotDisconnectPeerAnswers=sysGlobalDiametersessionStatTotDisconnectPeerAnswers, sysVcmpEntry=sysVcmpEntry, sysHttpStatNumberReqs=sysHttpStatNumberReqs, sysVcmpTable=sysVcmpTable, sysMptcpStatJoinFlowFail=sysMptcpStatJoinFlowFail)
mibBuilder.exportSymbols("F5-BIGIP-SYSTEM-MIB", sysStpBridgeStatGroup=sysStpBridgeStatGroup, sysAttrFailoverStandbyLinkDownTime=sysAttrFailoverStandbyLinkDownTime, sysHttpStatMaxKeepaliveReq=sysHttpStatMaxKeepaliveReq, yki7600=yki7600, sysClientsslStatMd5DigestOffload=sysClientsslStatMd5DigestOffload, sysProcPidStatExitSignal=sysProcPidStatExitSignal, sysPacketFilterOrder=sysPacketFilterOrder, sysProfilePptpStatTotalCalls=sysProfilePptpStatTotalCalls, sysSysDeviceOptionalModulesGroup=sysSysDeviceOptionalModulesGroup, sysXmlStatNumErrors=sysXmlStatNumErrors, sysVcmpVlanEntry=sysVcmpVlanEntry, bigipPb100=bigipPb100, sysServersslStatDhDssKeyxchg=sysServersslStatDhDssKeyxchg, sysFastHttpStatResp3xxCnt=sysFastHttpStatResp3xxCnt, sysCertificateFileObjectExpirationString=sysCertificateFileObjectExpirationString, sysVlanxStatInMulticastPkts=sysVlanxStatInMulticastPkts, sysServersslStatNullDigest=sysServersslStatNullDigest, sysTmmPagesStatTmm=sysTmmPagesStatTmm, sysCertOrderManagerCaCert=sysCertOrderManagerCaCert, sysLogicalDiskSize=sysLogicalDiskSize, sysProcPidStatRss=sysProcPidStatRss, sysStatServerBytesIn=sysStatServerBytesIn, sysGlobalSiprouterStatTotFailedAutoInitOutgoingConnections=sysGlobalSiprouterStatTotFailedAutoInitOutgoingConnections, sysIpsecSpdStatDestinationPort=sysIpsecSpdStatDestinationPort, sysGlobalHostCpuSoftirq5s=sysGlobalHostCpuSoftirq5s, sysModuleAllocationTable=sysModuleAllocationTable, sysVcmpStatTable=sysVcmpStatTable, sysDnsStatFastDnsRespNe=sysDnsStatFastDnsRespNe, sysWebAccelerationStatInterStripeHits=sysWebAccelerationStatInterStripeHits, sysStpGlobalsTransmitHold=sysStpGlobalsTransmitHold, sysStpInterfaceStatName=sysStpInterfaceStatName, sysSwitchDdmStatRxDbmPwr3=sysSwitchDdmStatRxDbmPwr3, sysStpVlanMbrGroup=sysStpVlanMbrGroup, sysIiopStatGroup=sysIiopStatGroup, sysPcpStatPcpMapResponses=sysPcpStatPcpMapResponses, sysHostCpuSoftirq=sysHostCpuSoftirq, sysCpuGroup=sysCpuGroup, sysFwNatDynamicPoolStatLsnPersistenceMappingFailures=sysFwNatDynamicPoolStatLsnPersistenceMappingFailures, sysSwStatusActive=sysSwStatusActive, sysLsnPoolFailureStatEntry=sysLsnPoolFailureStatEntry, sysVcmpCpuCoreGroup=sysVcmpCpuCoreGroup, sysSoftwareHotfix=sysSoftwareHotfix, sysStatServerCurConns=sysStatServerCurConns, sysStatPvaServerBytesIn1m=sysStatPvaServerBytesIn1m, sysGlobalDiametersessionStatAveAnswerLatency=sysGlobalDiametersessionStatAveAnswerLatency, sysInterface=sysInterface, sysServersslStatEcdheRsaKeyxchg=sysServersslStatEcdheRsaKeyxchg, bigip2250=bigip2250, bigip800=bigip800, sysStatPvaClientBytesIn1m=sysStatPvaClientBytesIn1m, sysFastL4StatServersynrtx=sysFastL4StatServersynrtx, sysGlobalTmmStatClientPktsIn=sysGlobalTmmStatClientPktsIn, bigipPb100n=bigipPb100n, sysSysDeviceMirrorIp=sysSysDeviceMirrorIp, sysStatClientPktsOut1m=sysStatClientPktsOut1m, sysArpStaticEntryMacAddr=sysArpStaticEntryMacAddr, sysSysDeviceTimelimitedModulesGroup=sysSysDeviceTimelimitedModulesGroup, sysDot1dbaseStatMacAddr=sysDot1dbaseStatMacAddr, sysGlobalDiameterrouterStatTotPayloadBytesIn=sysGlobalDiameterrouterStatTotPayloadBytesIn, sysDot3StatEntry=sysDot3StatEntry, sysMptcpStatRxfailover=sysMptcpStatRxfailover, sysPvaStatNumber=sysPvaStatNumber, bigipi5800=bigipi5800, bigip10200S=bigip10200S, sysVlanGroupBridgeInStandby=sysVlanGroupBridgeInStandby, sysClientsslStatBypassClientCertificateRequest=sysClientsslStatBypassClientCertificateRequest, sysFastL4StatSyncookReject=sysFastL4StatSyncookReject, sysGlobalSipsessionStatBadRequest400Sent=sysGlobalSipsessionStatBadRequest400Sent, sysFastL4StatAccepts=sysFastL4StatAccepts, sysGlobalSiprouterStatTotIncomingStreams=sysGlobalSiprouterStatTotIncomingStreams, sysClientsslStatOcspStaplingResponseValidationErrors=sysClientsslStatOcspStaplingResponseValidationErrors, sysMultiHostCpuSoftirq5s=sysMultiHostCpuSoftirq5s, sysFastHttpStatPostReqs=sysFastHttpStatPostReqs, sysTmmStatServerSlowKilled=sysTmmStatServerSlowKilled, sysClientsslStatDestinationIpBypasses=sysClientsslStatDestinationIpBypasses, sysClusterFloatMgmtIp=sysClusterFloatMgmtIp, sysTrunkStatResetStats=sysTrunkStatResetStats, sysGlobalDiameterrouterStatCurAutoInitOutgoingConnections=sysGlobalDiameterrouterStatCurAutoInitOutgoingConnections, sysGlobalSipsessionStatServerFailures=sysGlobalSipsessionStatServerFailures, sysTmmStatClientMaxConns=sysTmmStatClientMaxConns, sysClientsslStatCamelliaBulk=sysClientsslStatCamelliaBulk, sysMptcpStatResetStats=sysMptcpStatResetStats, sysChassisSlotSerialNumber=sysChassisSlotSerialNumber, sysWebAccelerationStatCacheSize=sysWebAccelerationStatCacheSize, sysDnsStatFastDnsDrops=sysDnsStatFastDnsDrops, sysVcmpStatMcastIn=sysVcmpStatMcastIn, sysVlans=sysVlans, sysClusterFloatMgmtIpType=sysClusterFloatMgmtIpType, sysCpuFanSpeed=sysCpuFanSpeed, bigipi15600_N=bigipi15600_N, sysMultiHostCpuStolen=sysMultiHostCpuStolen, sysAttrFailoverMemoryRestartPercent=sysAttrFailoverMemoryRestartPercent, sysStpBridgeTreeStatTcCount=sysStpBridgeTreeStatTcCount, sysStatPvaClientBytesOut1m=sysStatPvaClientBytesOut1m, sysIfName=sysIfName, sysCertOrderManagerStatTotalOrders=sysCertOrderManagerStatTotalOrders, firepass4300=firepass4300, sysVcmpStatRetries=sysVcmpStatRetries, sysInterfaceTable=sysInterfaceTable, sysGlobalSipsessionStatAddressIncomplete484Sent=sysGlobalSipsessionStatAddressIncomplete484Sent, sysPhysicalDisk=sysPhysicalDisk, sysLldp=sysLldp, sysChassisSlot=sysChassisSlot, sysSwStatusNumber=sysSwStatusNumber, sysProfilePptpStatSetLinkInfo=sysProfilePptpStatSetLinkInfo, sysInterfaceComboPort=sysInterfaceComboPort, sysMultiHostCpuNice=sysMultiHostCpuNice, sysCertValidatorOcspStatResponseValidationValidityErrors=sysCertValidatorOcspStatResponseValidationValidityErrors, sysPvaStatServerMaxConns=sysPvaStatServerMaxConns, sysCertOrderManagerStat=sysCertOrderManagerStat, sysClientsslStatRc4Bulk=sysClientsslStatRc4Bulk, sysGlobalSiprouterStatTotMessagesRouted=sysGlobalSiprouterStatTotMessagesRouted, sysDnsStatPtrReqs=sysDnsStatPtrReqs, sysCmSyncStatus=sysCmSyncStatus, sysSpanningTree=sysSpanningTree, sysCertValidatorOcspStatConnectionTimeouts=sysCertValidatorOcspStatConnectionTimeouts, sysCertOrderManagerStatCertsRenewed=sysCertOrderManagerStatCertsRenewed, sysPlatform=sysPlatform, sysTmmPagesStatTable=sysTmmPagesStatTable, bigipi11800=bigipi11800, sysVcmpMgmtAddrType=sysVcmpMgmtAddrType, sysStatPvaServerBytesIn5m=sysStatPvaServerBytesIn5m, sysClusterTable=sysClusterTable, sysCertValidatorOcspGroup=sysCertValidatorOcspGroup, sysRouteStaticEntryName=sysRouteStaticEntryName, sysHttpStatRamcacheEvictions=sysHttpStatRamcacheEvictions, sysClientsslStatDhDssKeyxchg=sysClientsslStatDhDssKeyxchg, sysStatHardSyncookieDet=sysStatHardSyncookieDet, sysStatPvaServerPktsOut5s=sysStatPvaServerPktsOut5s, sysDot1dbaseStatPortEntry=sysDot1dbaseStatPortEntry, sysHttpStatPrecompressBytes=sysHttpStatPrecompressBytes, sysClusterDisabledParentType=sysClusterDisabledParentType, wa4500=wa4500, sysIpStatErrProto=sysIpStatErrProto, sysL2Forward=sysL2Forward, sysServersslStatRsaKeyxchg=sysServersslStatRsaKeyxchg, sysPacketFilterStatGroup=sysPacketFilterStatGroup, sysGlobalTmmStatTmIdleCycles=sysGlobalTmmStatTmIdleCycles, sysHttpCompressionStatHtmlPrecompressBytes=sysHttpCompressionStatHtmlPrecompressBytes, sysIp6StatMcastTx=sysIp6StatMcastTx, sysInterfaceStatBytesOut=sysInterfaceStatBytesOut, sysGlobalDiameterrouterStatCurPassthruConnections=sysGlobalDiameterrouterStatCurPassthruConnections, sysGlobalHostCpuCount=sysGlobalHostCpuCount, sysServersslStatRc4BulkOffload=sysServersslStatRc4BulkOffload, sysCertValidatorOcspTrustedResponders=sysCertValidatorOcspTrustedResponders, arx2000=arx2000, sysFwNatDynamicPoolStatLsnEndPoints=sysFwNatDynamicPoolStatLsnEndPoints, bigip1500=bigip1500, sysIntfMediaSfpIndex=sysIntfMediaSfpIndex, sysStpVlanMbrInstanceId=sysStpVlanMbrInstanceId, sysGlobalFastL4Stat=sysGlobalFastL4Stat, bigipi11400_DS=bigipi11400_DS, sysGlobalSiprouterStatTotRejectedCalls=sysGlobalSiprouterStatTotRejectedCalls, sysDot1dbaseStatPortMtuExceededDiscards=sysDot1dbaseStatPortMtuExceededDiscards, sysStpInterfaceTreeStatDesigBridgeAddr=sysStpInterfaceTreeStatDesigBridgeAddr, sysMultiHostCpuStolen5s=sysMultiHostCpuStolen5s, sysCertValidatorOcspStatName=sysCertValidatorOcspStatName, sysClientsslStatSessionMirrorSuccess=sysClientsslStatSessionMirrorSuccess, sysGlobalSiprouterStatTotMessagesConnectionClosed=sysGlobalSiprouterStatTotMessagesConnectionClosed, sysVlanMemberTable=sysVlanMemberTable, sysGlobalDiametersessionStatAveRoundTripTime=sysGlobalDiametersessionStatAveRoundTripTime, sysDnsStatQueries=sysDnsStatQueries, sysStatClientPktsOut5m=sysStatClientPktsOut5m, sysInterfaceStatPktsOut=sysInterfaceStatPktsOut, sysAttrPacketFilterDefaultAction=sysAttrPacketFilterDefaultAction, sysProcPidStatRssRlim=sysProcPidStatRssRlim, sysServersslStatNullBulk=sysServersslStatNullBulk, sysGlobalSipsessionStatTransactionDoesNotExist=sysGlobalSipsessionStatTransactionDoesNotExist, sysVlanGroupMbrVlanName=sysVlanGroupMbrVlanName, sysGlobalDiametersessionStatTotBadMessages=sysGlobalDiametersessionStatTotBadMessages, sysClusterAvailabilityState=sysClusterAvailabilityState, sysVlanxStatHcOutUcastPkts=sysVlanxStatHcOutUcastPkts, bigipi10810=bigipi10810, sysGlobalSiprouterStatCurIncomingStreams=sysGlobalSiprouterStatCurIncomingStreams, sysMultiHostCpuIdle1m=sysMultiHostCpuIdle1m, sysHttpStatRespBucket64k=sysHttpStatRespBucket64k, sysHttpCompressionStatNullCompressBytes=sysHttpCompressionStatNullCompressBytes, sysHttpStatImagePrecompressBytes=sysHttpStatImagePrecompressBytes, sysDot3StatTable=sysDot3StatTable, sysHttpCompressionStatSgmlPrecompressBytes=sysHttpCompressionStatSgmlPrecompressBytes, sysClientsslStatEcdheRsaKeyxchg=sysClientsslStatEcdheRsaKeyxchg, sysServersslStatShaDigestOffload=sysServersslStatShaDigestOffload, sysPcpStatPcpErrorsInvalidRequests=sysPcpStatPcpErrorsInvalidRequests, sysStpBridgeTreeStatDesigRootPrio=sysStpBridgeTreeStatDesigRootPrio, sysGlobalDiametersessionStat=sysGlobalDiametersessionStat, sysUdpStatAccepts=sysUdpStatAccepts, sysStpGlobals2FwdDelay=sysStpGlobals2FwdDelay, sysIpsecSpdStatResetStats=sysIpsecSpdStatResetStats, sysStpBridgeTreeStatPriority=sysStpBridgeTreeStatPriority, sysCmTrafficGroupStatusDeviceName=sysCmTrafficGroupStatusDeviceName, sysGlobalSiprouterStatCurOutgoingConnections=sysGlobalSiprouterStatCurOutgoingConnections, sysIntfMediaEntry=sysIntfMediaEntry, sysPacketFilterAddrNumber=sysPacketFilterAddrNumber, sysTrunkStatErrorsIn=sysTrunkStatErrorsIn, sysClientsslStatOcspStaplingOcspConnFailures=sysClientsslStatOcspStaplingOcspConnFailures, sysInterfaceMediaActiveSpeed=sysInterfaceMediaActiveSpeed, sysStpBridgeStatResetStats=sysStpBridgeStatResetStats, sysTrunkCfgMbrCount=sysTrunkCfgMbrCount, sysSysDeviceOptionalModulesName=sysSysDeviceOptionalModulesName, sysFwNatDynamicPoolFailureStatGroup=sysFwNatDynamicPoolFailureStatGroup, sysIpStatRxFragDropped=sysIpStatRxFragDropped, sysSubMemoryNumber=sysSubMemoryNumber, sysGlobalSipsessionStatTemporarilyUnavailable480Sent=sysGlobalSipsessionStatTemporarilyUnavailable480Sent, sysStatClientBytesOut=sysStatClientBytesOut, sysGlobalSipsessionStatNotAcceptableHere488Sent=sysGlobalSipsessionStatNotAcceptableHere488Sent, sysVlanxStatOutMulticastPkts=sysVlanxStatOutMulticastPkts, sysDnsStatRcodeNoerror=sysDnsStatRcodeNoerror, bigipi11600_DS=bigipi11600_DS, sysClientsslStatDhRsaKeyxchg=sysClientsslStatDhRsaKeyxchg, sysRtspStatNumResponses=sysRtspStatNumResponses, sysStpBridgeTreeStatEntry=sysStpBridgeTreeStatEntry, sysSwitchDdmStatRxWarnHi=sysSwitchDdmStatRxWarnHi, sysClientsslStatAesGcmBulkOffload=sysClientsslStatAesGcmBulkOffload, sysIiopStatNumCancels=sysIiopStatNumCancels, sysMptcpStatRemAddrTx=sysMptcpStatRemAddrTx, sysVcmpStatBaseMac=sysVcmpStatBaseMac, sysStatConnectionMemoryErrors=sysStatConnectionMemoryErrors, sysWebAccelerationStatInterStripeCount=sysWebAccelerationStatInterStripeCount, bigip1000=bigip1000, bigipVprB4450N=bigipVprB4450N, sysIpsecSpdStatDestinationAddress=sysIpsecSpdStatDestinationAddress, sysIpStatMcastRx=sysIpStatMcastRx, sysGlobalSipsessionStatDrops=sysGlobalSipsessionStatDrops, sysGlobalDiameterrouterStatTotMessagesCannotReturn=sysGlobalDiameterrouterStatTotMessagesCannotReturn, sysIfxStatName=sysIfxStatName, sysGlobalSiprouterStatTotCancelledCalls=sysGlobalSiprouterStatTotCancelledCalls, sysRouteMgmtEntryDestType=sysRouteMgmtEntryDestType, sysSwVolumeNumber=sysSwVolumeNumber, sysVlanMemberEntry=sysVlanMemberEntry, herculoni5800=herculoni5800, sysAttrArpAddReciprocal=sysAttrArpAddReciprocal, sysTcpStatConnects=sysTcpStatConnects, bigiq7000=bigiq7000, sysClientsslStatOcspStaplingOcspConnTimeouts=sysClientsslStatOcspStaplingOcspConnTimeouts, sysRouteStaticEntryGatewayType=sysRouteStaticEntryGatewayType, sysGlobalTmmStatWlSyncookieHits=sysGlobalTmmStatWlSyncookieHits, sysIp6StatGroup=sysIp6StatGroup, sysGlobalDiametersessionStatTotRetransReqRetransmitted=sysGlobalDiametersessionStatTotRetransReqRetransmitted, bigipi2800=bigipi2800, sysStpBridgeStatBridgeHelloTime=sysStpBridgeStatBridgeHelloTime, sysSystemUptime=sysSystemUptime, sysVlanStatBytesOut=sysVlanStatBytesOut, sysIpsecSpdStatEntry=sysIpsecSpdStatEntry, sysGlobalSipsessionStatUpdateReq=sysGlobalSipsessionStatUpdateReq, sysAttrPacketFilterSendIcmpErrors=sysAttrPacketFilterSendIcmpErrors, sysIpsecSpdStatSourceNetmask=sysIpsecSpdStatSourceNetmask, sysMultiHostCpuSlotId=sysMultiHostCpuSlotId, sysSwitchDdmStatRxDbmPwr1=sysSwitchDdmStatRxDbmPwr1, sysClientsslStatC3dConns=sysClientsslStatC3dConns, sysCertValidatorOcspSignerCert=sysCertValidatorOcspSignerCert, sysStpInterfaceMbrInstanceName=sysStpInterfaceMbrInstanceName, sysGlobalDiameterrouterStatTotMessagesInternalError=sysGlobalDiameterrouterStatTotMessagesInternalError, sysMultiHost=sysMultiHost, sysHttpStatXmlPostcompressBytes=sysHttpStatXmlPostcompressBytes)
mibBuilder.exportSymbols("F5-BIGIP-SYSTEM-MIB", sysVcmpStatStarts=sysVcmpStatStarts, sysGlobalTmmStatMaxConnVirtualAddrDeny=sysGlobalTmmStatMaxConnVirtualAddrDeny, sysFwNatDynamicPoolStatLsnActiveHairpinConnections=sysFwNatDynamicPoolStatLsnActiveHairpinConnections, yki4800=yki4800, sysFastHttpStatServerConnects=sysFastHttpStatServerConnects, sysServersslStatAesBulk=sysServersslStatAesBulk, sysChassisSlotTable=sysChassisSlotTable, sysCmFailoverStatusSummary=sysCmFailoverStatusSummary, sysFwNatDynamicPoolStatPcpMapRequests=sysFwNatDynamicPoolStatPcpMapRequests, sysConnPoolStatMaxSize=sysConnPoolStatMaxSize, sysHttpStatV20Resp=sysHttpStatV20Resp, sysVirtualDiskEntry=sysVirtualDiskEntry, sysCmFailoverStatusStatus=sysCmFailoverStatusStatus, bigip7200F=bigip7200F, sysDnsStatRecursionDesired=sysDnsStatRecursionDesired, sysTmmStatTmmPid=sysTmmStatTmmPid, bigip5000=bigip5000, sysSwStatusBuild=sysSwStatusBuild, sysStatMemoryUsedKb=sysStatMemoryUsedKb, sysHostMemoryUsedKb=sysHostMemoryUsedKb, sysStpBridgeTreeStatRootPortNum=sysStpBridgeTreeStatRootPortNum, sysProcPidStatNswap=sysProcPidStatNswap, sysFwNatStaticSourceTranslationPoolStatErrPortTrans=sysFwNatStaticSourceTranslationPoolStatErrPortTrans, sysStatPvaServerPktsOut1m=sysStatPvaServerPktsOut1m, sysGlobalHostResetStats=sysGlobalHostResetStats, sysHttpCompressionStatOtherPostcompressBytes=sysHttpCompressionStatOtherPostcompressBytes, sysInterfaceStatGroup=sysInterfaceStatGroup, sysLogicalDiskFormat=sysLogicalDiskFormat, sam4300=sam4300, sysVlanIfcStatHcInMulticastPkts=sysVlanIfcStatHcInMulticastPkts, sysHostDiskFreeBlocks=sysHostDiskFreeBlocks, sysTmmStatSlotId=sysTmmStatSlotId, sysPlaneStatCpuRatioCurr=sysPlaneStatCpuRatioCurr, sysGlobalDiameterrouterStatCurPendingRequests=sysGlobalDiameterrouterStatCurPendingRequests, sysMptcpStatRxtimeout=sysMptcpStatRxtimeout, sysCmTrafficGroupStatusNumber=sysCmTrafficGroupStatusNumber, bigip4100=bigip4100, sysVlanStatDropsOut=sysVlanStatDropsOut, sysVcmpNumber=sysVcmpNumber, sysGlobalTmmStatServerBytesIn=sysGlobalTmmStatServerBytesIn, sysGlobalSiprouterStatTotPayloadBytesIn=sysGlobalSiprouterStatTotPayloadBytesIn, sysGlobalDiameterrouterStatTotMessgesIn=sysGlobalDiameterrouterStatTotMessgesIn, sysSwitchDdmStatTxDbmPwrHiAlarm=sysSwitchDdmStatTxDbmPwrHiAlarm, sysTmmProcStatTable=sysTmmProcStatTable, sysCertStatusObjectCertName=sysCertStatusObjectCertName, sysProcess=sysProcess, sysCmSyncStatusDetailsEntry=sysCmSyncStatusDetailsEntry, sysLldpNeighborsTableSysCap=sysLldpNeighborsTableSysCap, sysSwImageFilename=sysSwImageFilename, sysIntfMediaTable=sysIntfMediaTable, sysArpStaticEntryGroup=sysArpStaticEntryGroup, sysDnsStatTruncated=sysDnsStatTruncated, sysGlobalSipsessionStatNotImplemented501Sent=sysGlobalSipsessionStatNotImplemented501Sent, sysGlobalDiametersessionStatTotCapExcAns=sysGlobalDiametersessionStatTotCapExcAns, sysDot3StatSingleCollisionFrames=sysDot3StatSingleCollisionFrames, sysDot1dbaseStatPortPort=sysDot1dbaseStatPortPort, sysMultiHostCpuIowait1m=sysMultiHostCpuIowait1m, sysDnsStatResponsesPerSec=sysDnsStatResponsesPerSec, sysMultiHostCpuSystem1m=sysMultiHostCpuSystem1m, sysGlobalDiametersessionStatTotAnswerResultCodeReceived2xxx=sysGlobalDiametersessionStatTotAnswerResultCodeReceived2xxx, sysStpBridgeTreeStatDesigRootAddr=sysStpBridgeTreeStatDesigRootAddr, sysVlanStatPktsIn=sysVlanStatPktsIn, sysSwImageProduct=sysSwImageProduct, sysCertificateFileObjectExpirationDate=sysCertificateFileObjectExpirationDate, sysServersslStatConnectionMirrorHaHsSuccess=sysServersslStatConnectionMirrorHaHsSuccess, sysHostDiskEntry=sysHostDiskEntry, sysGlobalIpsecalgStatTunnelCreates=sysGlobalIpsecalgStatTunnelCreates, sysDot3StatFrameTooLongs=sysDot3StatFrameTooLongs, sysMultiHostCpuStolen5m=sysMultiHostCpuStolen5m, sysFastL4StatRxbadunreach=sysFastL4StatRxbadunreach, sysGlobalDiameterrouterStatTotMessagesConnectionClosed=sysGlobalDiameterrouterStatTotMessagesConnectionClosed, bigip2050=bigip2050, sysLsnPoolStatTranslationRequestFailures=sysLsnPoolStatTranslationRequestFailures, sysSwitchDdmStatTxPwrLoWarn=sysSwitchDdmStatTxPwrLoWarn, sysMultiHostOtherMemoryUsed=sysMultiHostOtherMemoryUsed, bigip11050=bigip11050, bigip7200S=bigip7200S, sysVcmpAllowedSlots=sysVcmpAllowedSlots, sysTcpStatRxbadcookie=sysTcpStatRxbadcookie, sysFwNatStaticDestinationTranslationPoolStatResetStats=sysFwNatStaticDestinationTranslationPoolStatResetStats, sysClusterGroup=sysClusterGroup, sysGlobalSipsessionStatTemporarilyUnavailable=sysGlobalSipsessionStatTemporarilyUnavailable, sysFastHttpStatClientAccepts=sysFastHttpStatClientAccepts, sysWebAccelerationStatInterStripeEvictions=sysWebAccelerationStatInterStripeEvictions, sysUdpStatOpen=sysUdpStatOpen, sysStatPvaServerBytesIn=sysStatPvaServerBytesIn, sysHostCpu=sysHostCpu, sysSctpStatConfirmedAddresses=sysSctpStatConfirmedAddresses, sysGlobalHostSwapUsedKb=sysGlobalHostSwapUsedKb, sysInterfaceStatus=sysInterfaceStatus, sysClientsslStatSha224Digest=sysClientsslStatSha224Digest, sysLsnPoolStatLogFailures=sysLsnPoolStatLogFailures, sysGlobalTmmStatMaintenanceModeDeny=sysGlobalTmmStatMaintenanceModeDeny, sysClientsslStatConnectionMirrorHaTimeout=sysClientsslStatConnectionMirrorHaTimeout, sysGlobalSipsessionStatRefer=sysGlobalSipsessionStatRefer, sysPacketFilterAddress=sysPacketFilterAddress, sysFastHttpStatV11Reqs=sysFastHttpStatV11Reqs, sysSwImageEntry=sysSwImageEntry, sysStpBridgeTreeStatGroup=sysStpBridgeTreeStatGroup, sysTrunkStatus=sysTrunkStatus, sysStatClientTotConns5m=sysStatClientTotConns5m, sysSystemMachine=sysSystemMachine, sysVcmpMgmtAddr=sysVcmpMgmtAddr, sysCertOrderManager=sysCertOrderManager, sysVlanStatMcastOut=sysVlanStatMcastOut, sysCpuSensor=sysCpuSensor, sysFwNatStaticSourceTranslationPoolStatSubscrIdLkps=sysFwNatStaticSourceTranslationPoolStatSubscrIdLkps, sysStatPvaServerBytesIn5s=sysStatPvaServerBytesIn5s, sysVcmpVlanNumber=sysVcmpVlanNumber, sysLldpNeighborsTablePmd=sysLldpNeighborsTablePmd, sysVcmp=sysVcmp, sysGlobalDiameterrouterStatTotFailedAutoInitOutgoingConnections=sysGlobalDiameterrouterStatTotFailedAutoInitOutgoingConnections, em500=em500, sysStatServerCurConns5s=sysStatServerCurConns5s, sysLldpNeighborsTableTable=sysLldpNeighborsTableTable, sysGlobalSipsessionStatUnsupportedUriScheme=sysGlobalSipsessionStatUnsupportedUriScheme, wj500=wj500, sysTmmProcStatTmmPid=sysTmmProcStatTmmPid, sysIp6StatErrReassembledTooLong=sysIp6StatErrReassembledTooLong, sysHostCpuNumber=sysHostCpuNumber, sysGlobalDiametersessionStatTotOtherRequests=sysGlobalDiametersessionStatTotOtherRequests, sysDeviceModelOIDs=sysDeviceModelOIDs, sysFwNatDynamicPoolStatPcpErrorsOther=sysFwNatDynamicPoolStatPcpErrorsOther, sysCertOrderManagerClientCert=sysCertOrderManagerClientCert, sysLldpNeighborsTableSysDesc=sysLldpNeighborsTableSysDesc, sysGlobalFwNatDynamicPoolStat=sysGlobalFwNatDynamicPoolStat, sysGlobalDiametersessionStatTotAnswerResultCodeSent3xxx=sysGlobalDiametersessionStatTotAnswerResultCodeSent3xxx, sysRouteMgmtEntryGatewayType=sysRouteMgmtEntryGatewayType, sysHttpStatRamcacheHitBytes=sysHttpStatRamcacheHitBytes, sysGlobalTmmStatClientTotConns=sysGlobalTmmStatClientTotConns, sysFwNatDynamicPoolStatPbaActiveZombiePortBlocks=sysFwNatDynamicPoolStatPbaActiveZombiePortBlocks, sysStatGroup=sysStatGroup, sysCertOrderManagerStatRejected=sysCertOrderManagerStatRejected, sysIpStatDropped=sysIpStatDropped, sysStpBridgeStatBridgeFwdDelay=sysStpBridgeStatBridgeFwdDelay, sysInterfaceStatEntry=sysInterfaceStatEntry, sysVlanStatMcastIn=sysVlanStatMcastIn, bigipi5600=bigipi5600, sysGlobalDiametersessionStatResetStats=sysGlobalDiametersessionStatResetStats, bigip11050F=bigip11050F, sysTmmStatCmpConnRedirected=sysTmmStatCmpConnRedirected, sysSelfIps=sysSelfIps, sysTrunkStat=sysTrunkStat, sysStpVlanMbrStpName=sysStpVlanMbrStpName, sysVcmpStatMemoryUseKb=sysVcmpStatMemoryUseKb, sysSwHotfixHotfixId=sysSwHotfixHotfixId, sysTmmStatClientPktsOut=sysTmmStatClientPktsOut, sysFwNatDynamicPoolFailureStatTable=sysFwNatDynamicPoolFailureStatTable, sysGlobalTftpStat=sysGlobalTftpStat, sysJoinCertOrderManagerOrderId=sysJoinCertOrderManagerOrderId, sysFastL4StatRxbadsum=sysFastL4StatRxbadsum, sysVlanGroupTable=sysVlanGroupTable, wj300=wj300, sysGlobalHostCpuIrq5s=sysGlobalHostCpuIrq5s, yki10600=yki10600, sysStpGlobals2=sysStpGlobals2, sysDot1dbaseStatType=sysDot1dbaseStatType, sysGlobalTmmStatClientBytesOut=sysGlobalTmmStatClientBytesOut, sysDnsStatDns64Failures=sysDnsStatDns64Failures, sysGlobalDiametersessionStatTotOtherAnswers=sysGlobalDiametersessionStatTotOtherAnswers, bigip3410=bigip3410, sysUnicastAddrGroup=sysUnicastAddrGroup, sysConnPoolStatConnects=sysConnPoolStatConnects, sysClientsslStatTotCompatConns=sysClientsslStatTotCompatConns, sysServersslStatConnectionMirrorHaCtxRecv=sysServersslStatConnectionMirrorHaCtxRecv, sysGlobalSipsessionStatBye=sysGlobalSipsessionStatBye, sysPacketFilter=sysPacketFilter, sysSysDeviceOptionalModulesEntry=sysSysDeviceOptionalModulesEntry, sysGlobalSipsessionStatMessage=sysGlobalSipsessionStatMessage, sysJoinCertOrderManagerGroup=sysJoinCertOrderManagerGroup, sysIcmp6StatErrMem=sysIcmp6StatErrMem, sysCM=sysCM, bigip2200=bigip2200, sysFastHttpStatConnpoolMaxSize=sysFastHttpStatConnpoolMaxSize, sysIpsecSpdStatTable=sysIpsecSpdStatTable, sysFwNatStaticSourceTranslationPoolStatBidirReqs=sysFwNatStaticSourceTranslationPoolStatBidirReqs, sysLldpNeighborsTableGroup=sysLldpNeighborsTableGroup, sysMultiHostCpuNumber=sysMultiHostCpuNumber, sysJoinCertOrderManagerStatEntry=sysJoinCertOrderManagerStatEntry, sysServersslStatChacha20Poly1305BulkOffld=sysServersslStatChacha20Poly1305BulkOffld, bigipi10610=bigipi10610, sysProcPidStatDirty=sysProcPidStatDirty, sysVcmpAllowedSlotsNumber=sysVcmpAllowedSlotsNumber, sysStatServerPktsIn5m=sysStatServerPktsIn5m, bigip4050=bigip4050, sysVlanxStat=sysVlanxStat, sysServersslStatRsaKeySize4096=sysServersslStatRsaKeySize4096, sysGlobalHostCpuIdle1m=sysGlobalHostCpuIdle1m, sysStatPvaServerMaxConns1m=sysStatPvaServerMaxConns1m, sysClientsslStatRsaKeySize4096Offload=sysClientsslStatRsaKeySize4096Offload, sysSysDeviceGroup=sysSysDeviceGroup, sysTrunkStpEnable=sysTrunkStpEnable, sysGlobalTftpStatGroup=sysGlobalTftpStatGroup, sysLldpNeighborsTableVlanName=sysLldpNeighborsTableVlanName, sysVcmpAssignedSlotsGroup=sysVcmpAssignedSlotsGroup, sysServersslStatSessCacheCurEntries=sysServersslStatSessCacheCurEntries, sysUdpStatExpires=sysUdpStatExpires, sysHttpCompressionStatPlainPrecompressBytes=sysHttpCompressionStatPlainPrecompressBytes, sysStpGlobals2Group=sysStpGlobals2Group, sysRtspStatNumErrors=sysRtspStatNumErrors, sysGlobalDiameterrouterStatTotIncomingConnections=sysGlobalDiameterrouterStatTotIncomingConnections, sysProduct=sysProduct, sysServersslStatHandshakeFailures=sysServersslStatHandshakeFailures, bigipi850=bigipi850, sysDnsStatHints=sysDnsStatHints, sysModuleAllocationDiskRatio=sysModuleAllocationDiskRatio, sysTrunkActiveLacp=sysTrunkActiveLacp, sysProcPidStatBlocked=sysProcPidStatBlocked, sysGlobalSiprouterStatTotMessagesInRetry=sysGlobalSiprouterStatTotMessagesInRetry, sysCmFailoverStatusGroup=sysCmFailoverStatusGroup, sysVirtualDisk=sysVirtualDisk, sysVlanIfcStatPvaInPkts=sysVlanIfcStatPvaInPkts, sysGlobalTmmStatServerPktsIn=sysGlobalTmmStatServerPktsIn, sysVlan=sysVlan, sysSelfIpAddrType=sysSelfIpAddrType, sysVlanStatPktsOut=sysVlanStatPktsOut, sysClientsslStatSha384Digest=sysClientsslStatSha384Digest, sysStpNumber=sysStpNumber, bigipViprion4=bigipViprion4, sysHostCpuUser=sysHostCpuUser, sysChassisPowerSupplyNumber=sysChassisPowerSupplyNumber, sysGlobalHostGroup=sysGlobalHostGroup, sysCmFailoverStatusDetailsTable=sysCmFailoverStatusDetailsTable, sysDevice=sysDevice, sysLogicalDiskMembersGroup=sysLogicalDiskMembersGroup, sysStatClientBytesOut5s=sysStatClientBytesOut5s, sysPcpStatGroup=sysPcpStatGroup, sysTmmStatTmUsageRatio5m=sysTmmStatTmUsageRatio5m, sysInterfaceStpEdgeActive=sysInterfaceStpEdgeActive, bigipSystemGroups=bigipSystemGroups, sysMultiHostCpuSoftirq1m=sysMultiHostCpuSoftirq1m, bigip6900S=bigip6900S, sysTmmStatSyncookieRejects=sysTmmStatSyncookieRejects, sysProcPidStatCommandLine=sysProcPidStatCommandLine, sysFwNatStaticDestinationTranslationPoolStatSubscrIdNotFd=sysFwNatStaticDestinationTranslationPoolStatSubscrIdNotFd, sysHttpCompressionStatPlainPostcompressBytes=sysHttpCompressionStatPlainPostcompressBytes, sysVcmpInitialHotfix=sysVcmpInitialHotfix, sysFecStatOutRawBytes=sysFecStatOutRawBytes, sysIp6StatErrMcastWrongIf=sysIp6StatErrMcastWrongIf, sysSwitchDdmStatRxAlarmHi=sysSwitchDdmStatRxAlarmHi, sysGlobalTmmStatClientCurConns=sysGlobalTmmStatClientCurConns, sysArpStaticEntryName=sysArpStaticEntryName, sysPacketFilterStatTable=sysPacketFilterStatTable, sysIiopStatNumResponses=sysIiopStatNumResponses, sysServersslStatSourceIpBypasses=sysServersslStatSourceIpBypasses, sysGlobalHostCpuIrq1m=sysGlobalHostCpuIrq1m, sysHttpStatCookiePersistInserts=sysHttpStatCookiePersistInserts, sysCpuSensorTable=sysCpuSensorTable, sysHttpCompressionStatOtherPrecompressBytes=sysHttpCompressionStatOtherPrecompressBytes, sysDnsStatSoaReqs=sysDnsStatSoaReqs, sysStpInterfaceMbrEntry=sysStpInterfaceMbrEntry, sysStatPvaClientBytesIn5m=sysStatPvaClientBytesIn5m, sysChassisSlotEntry=sysChassisSlotEntry, sysGlobalDiametersessionStatTotRejectedUnconfiguredPeers=sysGlobalDiametersessionStatTotRejectedUnconfiguredPeers)
mibBuilder.exportSymbols("F5-BIGIP-SYSTEM-MIB", sysTmmPagesStatGroup=sysTmmPagesStatGroup, sysHostCpuIdle=sysHostCpuIdle, sysStatAuthWantcredentialResults=sysStatAuthWantcredentialResults, arx1000=arx1000, sysChassisSlotNumber=sysChassisSlotNumber, sysClientsslStatOcspFwdpClientsslRevokedResp=sysClientsslStatOcspFwdpClientsslRevokedResp, bigipVprB4300=bigipVprB4300, sysClientsslStatOcspStaplingCertStatusErrors=sysClientsslStatOcspStaplingCertStatusErrors, sysVlanIfcStatGroup=sysVlanIfcStatGroup, sysProcPidStatProcName=sysProcPidStatProcName, sysGlobalSipsessionStatPrack=sysGlobalSipsessionStatPrack, sysSctpStatConnfails=sysSctpStatConnfails, sysCertValidatorOcspStatResponseUnauthorizedErrors=sysCertValidatorOcspStatResponseUnauthorizedErrors, sysArpStaticEntry=sysArpStaticEntry, sysVcmpStatVcmpName=sysVcmpStatVcmpName, sysGlobalFtpStatUploadRequests=sysGlobalFtpStatUploadRequests, sysMptcpStatPrioTx=sysMptcpStatPrioTx, sysStatAuthFailureResults=sysStatAuthFailureResults, sysGlobalDiametersessionStatTotRequestSent=sysGlobalDiametersessionStatTotRequestSent, sysGlobalSiprouterStatTotPassthruConnections=sysGlobalSiprouterStatTotPassthruConnections, sysTmmStatResetStats=sysTmmStatResetStats, sysGlobalTmmStatIncomingPacketErrors=sysGlobalTmmStatIncomingPacketErrors, sysLsnPoolFailureStatTable=sysLsnPoolFailureStatTable, sysMultiHostCpuStolen1m=sysMultiHostCpuStolen1m, sysVcmpMgmtGwType=sysVcmpMgmtGwType, sysTmmProcStatEntry=sysTmmProcStatEntry, sysTmmPagesStatResetStats=sysTmmPagesStatResetStats, sysBladeVoltage=sysBladeVoltage, sysArpStaticEntryIpAddr=sysArpStaticEntryIpAddr, sysVcmpVlanVlanName=sysVcmpVlanVlanName, sysGlobalDiameterrouterStatTotMessagesNoConnection=sysGlobalDiameterrouterStatTotMessagesNoConnection, sysStpInterfaceTreeStatInternalPathCost=sysStpInterfaceTreeStatInternalPathCost, sysLldpNeighborsTableChassisId=sysLldpNeighborsTableChassisId, sysIntfMediaSfpTable=sysIntfMediaSfpTable, sysLldpNeighborsTableEntry=sysLldpNeighborsTableEntry, sysLogicalDiskSlotId=sysLogicalDiskSlotId, sysVcmpInitialImage=sysVcmpInitialImage, sysGlobalSipsessionStatUnsupportedUriScheme416Sent=sysGlobalSipsessionStatUnsupportedUriScheme416Sent, sysVcmpStatDropsOut=sysVcmpStatDropsOut, sysClusterMbrDisabledParentType=sysClusterMbrDisabledParentType, sysGlobalHostOtherMemoryTotal=sysGlobalHostOtherMemoryTotal, sysBladeTempTable=sysBladeTempTable, sysStatPvaClientTotConns5m=sysStatPvaClientTotConns5m, sysVcmpVlanVcmpName=sysVcmpVlanVcmpName, arx1500=arx1500, sysProcPidStatTSize=sysProcPidStatTSize, sysPlaneStatCpuRatio1min=sysPlaneStatCpuRatio1min, sysStpBridgeStatMode=sysStpBridgeStatMode, sysClientsslStatSessCacheLookups=sysClientsslStatSessCacheLookups, sysGeneralGroup=sysGeneralGroup, sysVlanIfcStatInErrors=sysVlanIfcStatInErrors, sysSubMemorySize=sysSubMemorySize, sysServersslStatSessionMirrorSuccess=sysServersslStatSessionMirrorSuccess, sysCertValidatorOcspStatResponseValidationVerifyErrors=sysCertValidatorOcspStatResponseValidationVerifyErrors, sysServersslStatBadRecords=sysServersslStatBadRecords, sysStpBridgeStatRootAddr=sysStpBridgeStatRootAddr, sysTmmStatClientBytesIn=sysTmmStatClientBytesIn, sysTmmProcStat=sysTmmProcStat, sysStatPvaClientBytesOut=sysStatPvaClientBytesOut, sysGlobalSiprouterStatTotMessagesQueueFull=sysGlobalSiprouterStatTotMessagesQueueFull, sysTrunkGroup=sysTrunkGroup, sysRouteMgmtEntryType=sysRouteMgmtEntryType, sysRtspStatResetStats=sysRtspStatResetStats, sysStatPvaServerTotConns=sysStatPvaServerTotConns, sysGlobalHostSwapTotal=sysGlobalHostSwapTotal, sysVcmpStatBytesOut=sysVcmpStatBytesOut, sysSysDeviceOptionalModulesModule=sysSysDeviceOptionalModulesModule, sysWebAccelerationStatInterStripeHitBytes=sysWebAccelerationStatInterStripeHitBytes, sysIiopStatNumFragments=sysIiopStatNumFragments, sysGlobalTmmStatNpus=sysGlobalTmmStatNpus, sysJoinCertOrderManagerNumber=sysJoinCertOrderManagerNumber, sysRouteStaticEntryDest=sysRouteStaticEntryDest, sysServersslStatRecordsOut=sysServersslStatRecordsOut, sysDnsStatAuthenticatedData=sysDnsStatAuthenticatedData, sysInterfaceStpEdge=sysInterfaceStpEdge, sysGlobalIpsecalgStatIkePackets=sysGlobalIpsecalgStatIkePackets, sysDnsStatResponses=sysDnsStatResponses, sysIntfMediaIndex=sysIntfMediaIndex, sysModuleAllocationMemoryRatio=sysModuleAllocationMemoryRatio, sysGlobalPcpStat=sysGlobalPcpStat, sysStpGlobals2TransmitHold=sysStpGlobals2TransmitHold, bigip5100=bigip5100, sysLldpNeighborsTableAggPortid=sysLldpNeighborsTableAggPortid, sysTcpStatRxbadsum=sysTcpStatRxbadsum, sysStpVlanMbrVlanVname=sysStpVlanMbrVlanVname, sysGlobalDiameterrouterStatResetStats=sysGlobalDiameterrouterStatResetStats, sysCertOrderManagerStatCertsAutoRenewed=sysCertOrderManagerStatCertsAutoRenewed, sysStatPvaServerCurConns5s=sysStatPvaServerCurConns5s, sysClusterMinUpMbrsAction=sysClusterMinUpMbrsAction, sysGlobalDiameterrouterStatTotMessagesStandbyDropped=sysGlobalDiameterrouterStatTotMessagesStandbyDropped, sysHttpStatRespBucket4k=sysHttpStatRespBucket4k, sysHostMemory=sysHostMemory, sysDnsStatCheckingDisabled=sysDnsStatCheckingDisabled, sysVlanIfcStatHcInOctets=sysVlanIfcStatHcInOctets, sysGlobalHostSwapUsed=sysGlobalHostSwapUsed, sysHttpCompressionStatJsPrecompressBytes=sysHttpCompressionStatJsPrecompressBytes, sysAttrPacketFilter=sysAttrPacketFilter, sysMultiHostHostId=sysMultiHostHostId, sysSystemRelease=sysSystemRelease, sysServersslStatSessCacheLookups=sysServersslStatSessCacheLookups, sysClusterHaState=sysClusterHaState, sysAdminIpGroup=sysAdminIpGroup, sysIcmp6StatTx=sysIcmp6StatTx, sysAdminIpNumber=sysAdminIpNumber, sysFastHttpStatPipelinedReqs=sysFastHttpStatPipelinedReqs, sysTmmStatServerCurConns=sysTmmStatServerCurConns, sysHttpCompressionStatSgmlPostcompressBytes=sysHttpCompressionStatSgmlPostcompressBytes, sysInterfaceStatPktsIn=sysInterfaceStatPktsIn, sysGlobalSiprouterStatTotMessagesDropped=sysGlobalSiprouterStatTotMessagesDropped, sysCertValidatorOcspStatConnectionOtherFailures=sysCertValidatorOcspStatConnectionOtherFailures, sysInterfaces=sysInterfaces, sysTmmProcStatMemoryTotalKb=sysTmmProcStatMemoryTotalKb, sysProductGroup=sysProductGroup, sysGlobalSipStatGroup=sysGlobalSipStatGroup, sysClientsslStatAesBulk=sysClientsslStatAesBulk, sysStpInterfaceTreeStatTable=sysStpInterfaceTreeStatTable, sysPvaStatClientCurConns=sysPvaStatClientCurConns, sysWebAccelerationStatResetStats=sysWebAccelerationStatResetStats, sysClientsslStatTotConns5s=sysClientsslStatTotConns5s, sysVlanStat=sysVlanStat, sysSysDeviceActiveModules=sysSysDeviceActiveModules, sysStatPvaClientMaxConns1m=sysStatPvaClientMaxConns1m, sysPvaStatServerPktsIn=sysPvaStatServerPktsIn, sysVlanStatErrorsOut=sysVlanStatErrorsOut, sysGlobalTmmStatDroppedPackets=sysGlobalTmmStatDroppedPackets, sysStpEntry=sysStpEntry, sysProxyExclusionTable=sysProxyExclusionTable, sysStatPvaServerPktsOut5m=sysStatPvaServerPktsOut5m, sysFecStatRmtInRawLost=sysFecStatRmtInRawLost, sysAttrFailoverSslhardwareAction=sysAttrFailoverSslhardwareAction, sysDot3StatGroup=sysDot3StatGroup, sysClientsslStatRecordsIn=sysClientsslStatRecordsIn, sysClientsslStatNullDigest=sysClientsslStatNullDigest, sysProfilePptpStatEchoRequests=sysProfilePptpStatEchoRequests, sysMultiHostActiveCpuCount=sysMultiHostActiveCpuCount, sysVlanGroupMbrEntry=sysVlanGroupMbrEntry, sysIp6StatRx=sysIp6StatRx, sysSwImageNumber=sysSwImageNumber, sysSwitchDdmStatTxPwrHiWarn=sysSwitchDdmStatTxPwrHiWarn, bigip6900N=bigip6900N, sysPacketFilterAddrIp=sysPacketFilterAddrIp, sysStpInterfaceMbrInstanceId=sysStpInterfaceMbrInstanceId, sysHttpStatNullCompressBytes=sysHttpStatNullCompressBytes, sysVcmpVcmpName=sysVcmpVcmpName, sysTcpStatExpires=sysTcpStatExpires, sysChassis=sysChassis, sysServersslStatConns=sysServersslStatConns, sysCertOrderManagerStatEntry=sysCertOrderManagerStatEntry, sysSwitchDdmStatRxPwrLoWarn=sysSwitchDdmStatRxPwrLoWarn, sysVcmpStatSlotId=sysVcmpStatSlotId, yki7800=yki7800, sysSwitchDdmStatTxDbmPwrHiWarn=sysSwitchDdmStatTxDbmPwrHiWarn, yki5800=yki5800, sysDot1dbaseStatPort=sysDot1dbaseStatPort, sysTcpStatRxrst=sysTcpStatRxrst, sysGlobalHostCpuSystem5m=sysGlobalHostCpuSystem5m, sysServersslStatSha512Digest=sysServersslStatSha512Digest, bigip12050=bigip12050, sysStatPvaServerMaxConns=sysStatPvaServerMaxConns, sysMultiHostTotal=sysMultiHostTotal, sysProcPidStatStartCode=sysProcPidStatStartCode, sysVlanxStatInBroadcastPkts=sysVlanxStatInBroadcastPkts, sysGlobalSiprouterStatTotMessgesIn=sysGlobalSiprouterStatTotMessgesIn, sysIpStatNbrPbqFullDropped=sysIpStatNbrPbqFullDropped, sysGlobalDiametersessionStatTotDeviceWatchdogRequests=sysGlobalDiametersessionStatTotDeviceWatchdogRequests, sysGlobalAuthStat=sysGlobalAuthStat, bigipi7800=bigipi7800, sysServersslStatPeercertInvalid=sysServersslStatPeercertInvalid, sysCertValidatorOcspStatOcspRequests=sysCertValidatorOcspStatOcspRequests, sysGlobalDiameterrouterStatTotDroppedLateAnswers=sysGlobalDiameterrouterStatTotDroppedLateAnswers, sysFastL4StatAcceptfails=sysFastL4StatAcceptfails, sysProxyExclusionEntry=sysProxyExclusionEntry, sysServersslStatSha384DigestOffload=sysServersslStatSha384DigestOffload, sysGlobalSipStatResponses=sysGlobalSipStatResponses, sysSwitchDdmStatRxWarnLo=sysSwitchDdmStatRxWarnLo, sysTmmStatServerPktsIn=sysTmmStatServerPktsIn, sysGlobalSipsessionStatServiceUnavailable503Sent=sysGlobalSipsessionStatServiceUnavailable503Sent, yki4600=yki4600, sysGlobalSiprouterStatTotMessagesReturned=sysGlobalSiprouterStatTotMessagesReturned, sysPvaStatGroup=sysPvaStatGroup, sysAttrArpTimeout=sysAttrArpTimeout, sysVlanIfcStatNumber=sysVlanIfcStatNumber, sysSubMemory=sysSubMemory, sysPacketFilterVlanName=sysPacketFilterVlanName, sysGlobalSipsessionStatNotify=sysGlobalSipsessionStatNotify, sysStpGlobals2Revision=sysStpGlobals2Revision, sysDnsStatRejects=sysDnsStatRejects, sysJoinCertOrderManagerOrderResponse=sysJoinCertOrderManagerOrderResponse, sysFwNatDynamicPoolStatPcpErrorsInvalidRequest=sysFwNatDynamicPoolStatPcpErrorsInvalidRequest, sysSysDeviceTimelimitedModules=sysSysDeviceTimelimitedModules, sysClientsslStatCachedCerts=sysClientsslStatCachedCerts, bigipSystem=bigipSystem, sysChassisSlotDown=sysChassisSlotDown, sysMultiHostCpuSoftirq=sysMultiHostCpuSoftirq, sysDnsStatMalformed=sysDnsStatMalformed, sysGlobalDiameterrouterStatTotMessagesDropped=sysGlobalDiameterrouterStatTotMessagesDropped, sysStatServerBytesIn5s=sysStatServerBytesIn5s, sysCmFailoverStatusDetails=sysCmFailoverStatusDetails, sysClientsslStatEdhRsaKeyxchg=sysClientsslStatEdhRsaKeyxchg, sysIp6StatDropped=sysIp6StatDropped, sysSelfPortGroup=sysSelfPortGroup, sysPacketFilterAction=sysPacketFilterAction, sysMultiHostCpuIdle5m=sysMultiHostCpuIdle5m, sysUnicastAddrIndex=sysUnicastAddrIndex, sysGlobalSipStatRequests=sysGlobalSipStatRequests, sysSysDeviceInactiveModulesGroup=sysSysDeviceInactiveModulesGroup, sysIcmp6StatResetStats=sysIcmp6StatResetStats, sysInterfaceStat=sysInterfaceStat, sysVlanIfcStatHcOutMulticastPkts=sysVlanIfcStatHcOutMulticastPkts, sysServersslStatSha256Digest=sysServersslStatSha256Digest, bigip8800=bigip8800, sysClientsslStatTlsv11=sysClientsslStatTlsv11, sysCpuIndex=sysCpuIndex, sysL2ForwardAttrGroup=sysL2ForwardAttrGroup, sysHttpCompressionStatOctetPostcompressBytes=sysHttpCompressionStatOctetPostcompressBytes, sysSysDeviceTimelimitedModulesTable=sysSysDeviceTimelimitedModulesTable, sysGlobalDiameterrouterStatTotMessagesQueueFull=sysGlobalDiameterrouterStatTotMessagesQueueFull, sysTrunkOperBw=sysTrunkOperBw, bigip6400=bigip6400, sysAdminIpAddrType=sysAdminIpAddrType, sysIp6StatErrRtx=sysIp6StatErrRtx, sysGlobalSipsessionStatRegisterReq=sysGlobalSipsessionStatRegisterReq, sysStpInterfaceTreeStatDesigPortNum=sysStpInterfaceTreeStatDesigPortNum, sysServersslStatFullyHwAcceleratedConns=sysServersslStatFullyHwAcceleratedConns, sysRtspStatGroup=sysRtspStatGroup, sysJoinCertOrderManagerStatGroup=sysJoinCertOrderManagerStatGroup, sysStpVlanMbrNumber=sysStpVlanMbrNumber, sysTcpStatCloseWait=sysTcpStatCloseWait, sysGlobalDiametersessionStatTotAnswerResultCodeReceived4xxx=sysGlobalDiametersessionStatTotAnswerResultCodeReceived4xxx, sysIpStatErrLen=sysIpStatErrLen, sysStpBridgeStatRootPrio=sysStpBridgeStatRootPrio, sysProxyExclusionVlangroupName=sysProxyExclusionVlangroupName, sysIp6StatErrProto=sysIp6StatErrProto, arx4000=arx4000, sysIfxStatEntry=sysIfxStatEntry, sysProcPidStatMinFlt=sysProcPidStatMinFlt, sysHttpStatResp2xxCnt=sysHttpStatResp2xxCnt, sysSysDeviceMarketingName=sysSysDeviceMarketingName, sysStatPvaServerBytesOut5m=sysStatPvaServerBytesOut5m, sysProcPidStatSigcatch=sysProcPidStatSigcatch, sysStpInterfaceTreeStatStatRole=sysStpInterfaceTreeStatStatRole, sysClusterMbrLicensed=sysClusterMbrLicensed, sysLogicalDiskMembersEntry=sysLogicalDiskMembersEntry, sysGlobalTmmStatHwSyncookies=sysGlobalTmmStatHwSyncookies, sysClusters=sysClusters, sysTmmStatMemoryTotal=sysTmmStatMemoryTotal, sysAttrBootQuiet=sysAttrBootQuiet, sysMultiHostNumber=sysMultiHostNumber, sysInterfaceMediaMaxDuplex=sysInterfaceMediaMaxDuplex, sysJoinCertOrderManagerTable=sysJoinCertOrderManagerTable, sysSystemName=sysSystemName, sysClientsslStatOcspStaplingConns=sysClientsslStatOcspStaplingConns, sysServersslStatEcdheEcdsaKeyxchg=sysServersslStatEcdheEcdsaKeyxchg, sysStpInterfaceTreeStatDesigRootAddr=sysStpInterfaceTreeStatDesigRootAddr)
mibBuilder.exportSymbols("F5-BIGIP-SYSTEM-MIB", sysHostMemoryTotal=sysHostMemoryTotal, sysStatPvaServerPktsIn=sysStatPvaServerPktsIn, sysProcPidStatDSize=sysProcPidStatDSize, sysStpGlobalsMaxHops=sysStpGlobalsMaxHops, sysGlobalTmmStatResetStats=sysGlobalTmmStatResetStats, sysRouteStaticEntryVlanName=sysRouteStaticEntryVlanName, sysVlanGroupMacMasquerade=sysVlanGroupMacMasquerade, sysStatServerCurConns1m=sysStatServerCurConns1m, sysInterfaceName=sysInterfaceName, sysStatPvaClientCurConns5m=sysStatPvaClientCurConns5m, sysCertificateFileObject=sysCertificateFileObject, sysHttpStatHtmlPrecompressBytes=sysHttpStatHtmlPrecompressBytes, sysMultiHostCpuUsageRatio=sysMultiHostCpuUsageRatio, sysCpuNumber=sysCpuNumber, sysStpInterfaceTreeStat=sysStpInterfaceTreeStat, sysSysDeviceActiveModulesIndex=sysSysDeviceActiveModulesIndex, sysJoinCertOrderManagerStatOtherErrors=sysJoinCertOrderManagerStatOtherErrors, sysVcmpStatMemoryUse=sysVcmpStatMemoryUse, sysGlobalFwNatStaticDestinationTranslationPoolStat=sysGlobalFwNatStaticDestinationTranslationPoolStat, sysCertOrderManagerStatApproved=sysCertOrderManagerStatApproved, bigipi12600=bigipi12600, sysClientsslStatOcspStaplingResponseStatusErrors=sysClientsslStatOcspStaplingResponseStatusErrors, sysHttpCompressionStatAudioPrecompressBytes=sysHttpCompressionStatAudioPrecompressBytes, sysVcmpStatPktsIn=sysVcmpStatPktsIn, bigip3400=bigip3400, sysGlobalFtpStatPassiveRequests=sysGlobalFtpStatPassiveRequests, sysServersslStatOcspServersslResponderQueries=sysServersslStatOcspServersslResponderQueries, sysInterfaceMediaMaxSpeed=sysInterfaceMediaMaxSpeed, sysGlobalFtpStatDownloadRequests=sysGlobalFtpStatDownloadRequests, sysGlobalDiametersessionStatTotAccountingRequests=sysGlobalDiametersessionStatTotAccountingRequests, sysServersslStatEdhRsaKeyxchg=sysServersslStatEdhRsaKeyxchg, sysStpGlobals2Number=sysStpGlobals2Number, sysClusterMbrNumber=sysClusterMbrNumber, sysVcmpMgmtNetmask=sysVcmpMgmtNetmask, sysMultiHostCpuIrq5s=sysMultiHostCpuIrq5s, sysIp6StatErrMcastRouteLookupTimeout=sysIp6StatErrMcastRouteLookupTimeout, sysProcPidStatUpdateTime=sysProcPidStatUpdateTime, sysFwNatDynamicPoolStatLsnActiveTranslations=sysFwNatDynamicPoolStatLsnActiveTranslations, sysGlobalDiameterrouterStatTotMessagesInCloned=sysGlobalDiameterrouterStatTotMessagesInCloned, sysGlobalSipsessionStatSubscribe=sysGlobalSipsessionStatSubscribe, sysProcPidStatUtime=sysProcPidStatUtime, sysIiopStatNumRequests=sysIiopStatNumRequests, sysHttpStatV10Resp=sysHttpStatV10Resp, sysAdminIpAddr=sysAdminIpAddr, sysLsnPoolStatLogAttempts=sysLsnPoolStatLogAttempts, sysClientsslStatBypassesHandshakeAlert=sysClientsslStatBypassesHandshakeAlert, sysRouteStaticEntryEntry=sysRouteStaticEntryEntry, sysFastL4StatRxunreach=sysFastL4StatRxunreach, sysVcmpStatInterfaceNames=sysVcmpStatInterfaceNames, sysSctpStatRxrst=sysSctpStatRxrst, sysHttpCompressionStatCssPrecompressBytes=sysHttpCompressionStatCssPrecompressBytes, sysLogicalDiskNumber=sysLogicalDiskNumber, sysGlobalSipsessionStat=sysGlobalSipsessionStat, sysVcmpHostname=sysVcmpHostname, sysStpInterfaceStatNumber=sysStpInterfaceStatNumber, bigip10200=bigip10200, sysServersslStatCurNativeConns=sysServersslStatCurNativeConns, sysGlobalDiametersessionStatTotAnswerResultCodeSent1xxx=sysGlobalDiametersessionStatTotAnswerResultCodeSent1xxx, sysWebAccelerationStatCacheCount=sysWebAccelerationStatCacheCount, sysIfxStatCounterDiscontinuityTime=sysIfxStatCounterDiscontinuityTime, sysVcmpCoresPerSlot=sysVcmpCoresPerSlot, sysServersslStatSslv2=sysServersslStatSslv2, sysChassisTempNumber=sysChassisTempNumber, sysSwitchDdmStatRxPwrHiAlarm=sysSwitchDdmStatRxPwrHiAlarm, sysProcPidStatSession=sysProcPidStatSession, sysRouteStaticEntryGroup=sysRouteStaticEntryGroup, bigip10350=bigip10350, sysCertOrderManagerTable=sysCertOrderManagerTable, sysServersslStatRsaKeySize2048Offload=sysServersslStatRsaKeySize2048Offload, sysGlobalDiameterrouterStatTotFailedOutgoingStreams=sysGlobalDiameterrouterStatTotFailedOutgoingStreams, sysDnsStatOpcodeNotify=sysDnsStatOpcodeNotify, sysSwVolumeSize=sysSwVolumeSize, sysCertValidatorOcspStatusAge=sysCertValidatorOcspStatusAge, sysDot3StatRateControlAbility=sysDot3StatRateControlAbility, sysCertStatusObjectCertStatus=sysCertStatusObjectCertStatus, sysGlobalLsnPoolStat=sysGlobalLsnPoolStat, sysGlobalWebAccelerationStat=sysGlobalWebAccelerationStat, sysVlanGroupBridgeAllTraffic=sysVlanGroupBridgeAllTraffic, sysGlobalHostCpuUsageRatio=sysGlobalHostCpuUsageRatio, sysClientsslStatActiveHandshakeRejected=sysClientsslStatActiveHandshakeRejected, sysClientsslStatChacha20Poly1305BulkOffld=sysClientsslStatChacha20Poly1305BulkOffld, bigip1600=bigip1600, sysRouteStaticEntryNetmask=sysRouteStaticEntryNetmask, sysGlobalSipsessionStatTransactionDoesNotExist481Sent=sysGlobalSipsessionStatTransactionDoesNotExist481Sent, sysStpInterfaceStatRootAddr=sysStpInterfaceStatRootAddr, sysCertValidatorOcspName=sysCertValidatorOcspName, sysPlatformInfoName=sysPlatformInfoName, sysGlobalTmmStatWlSyncookieAccepts=sysGlobalTmmStatWlSyncookieAccepts, sysStpBridgeTreeStatIndex=sysStpBridgeTreeStatIndex, sysStatClientPktsIn1m=sysStatClientPktsIn1m, sysHttpStatV30Resp=sysHttpStatV30Resp, arx500=arx500, sysServersslStatBypassesHandshakeAlert=sysServersslStatBypassesHandshakeAlert, sysSwVolumeEntry=sysSwVolumeEntry, sysIcmp6StatErr=sysIcmp6StatErr, sysGlobalSiprouterStatActiveRegistrations=sysGlobalSiprouterStatActiveRegistrations, sysStpInterfaceMbrNumber=sysStpInterfaceMbrNumber, sysFwNatDynamicPoolStatPcpAnnounceRequests=sysFwNatDynamicPoolStatPcpAnnounceRequests, bigip11000F=bigip11000F, sysFwNatStaticSourceTranslationPoolStatSubscrIdNotFd=sysFwNatStaticSourceTranslationPoolStatSubscrIdNotFd, sysStpGlobalsHelloTime=sysStpGlobalsHelloTime, sysLldpNeighborsTableProtocolIdentity=sysLldpNeighborsTableProtocolIdentity, sysSctpStatAssociations=sysSctpStatAssociations, sysPacketFilterVlanEntry=sysPacketFilterVlanEntry, sysPvaStatServerTotConns=sysPvaStatServerTotConns, sysChassisTempTemperature=sysChassisTempTemperature, sysDiskBayNumber=sysDiskBayNumber, sysFwNatStaticSourceTranslationPoolStatErrCfgMismtch=sysFwNatStaticSourceTranslationPoolStatErrCfgMismtch, sysPacketFilterEntry=sysPacketFilterEntry, sysDnsStatZoneAxfr=sysDnsStatZoneAxfr, sysLsnPoolStatPersistenceMappingFailures=sysLsnPoolStatPersistenceMappingFailures, sysProcPidStatSigignore=sysProcPidStatSigignore, sysGlobalDiametersessionStatTotCapExcReq=sysGlobalDiametersessionStatTotCapExcReq, sysVcmpMgmtBaseMac=sysVcmpMgmtBaseMac, sysSelfPortDefProtocol=sysSelfPortDefProtocol, sysServersslStatCamelliaBulk=sysServersslStatCamelliaBulk, sysServersslStatSessCacheInvalidations=sysServersslStatSessCacheInvalidations, sysGlobalTmmStatTmUsageRatio5s=sysGlobalTmmStatTmUsageRatio5s, sysSubMemoryEntry=sysSubMemoryEntry, sysTmmPagesStatPagesUsed=sysTmmPagesStatPagesUsed, sysGlobalMptcpStat=sysGlobalMptcpStat, sysInterfaceStatName=sysInterfaceStatName, sysTmmStatIncomingPacketErrors=sysTmmStatIncomingPacketErrors, sysSoftwareImage=sysSoftwareImage, sysLsnPoolStatActiveClientsReachedLimit=sysLsnPoolStatActiveClientsReachedLimit, sysSelfPortDefEntry=sysSelfPortDefEntry, sysProcPidStatProgSize=sysProcPidStatProgSize, sysGlobalSipStatBadmsgs=sysGlobalSipStatBadmsgs, sysStatPvaClientBytesOut5s=sysStatPvaClientBytesOut5s, sysClientsslStatTlsv12=sysClientsslStatTlsv12, sysMultiHostTable=sysMultiHostTable, bigipVprC2400=bigipVprC2400, sysCertValidatorOcspStatOcspInternalErrors=sysCertValidatorOcspStatOcspInternalErrors, sysLldpNeighborsTableNumber=sysLldpNeighborsTableNumber, sysDnsStatFastDnsAllowed=sysDnsStatFastDnsAllowed, sysIpsecSpdStatReqid=sysIpsecSpdStatReqid, sysSwitchDdmStatRxPwrLoAlarm=sysSwitchDdmStatRxPwrLoAlarm, sysGlobalTmmStatHttpRequests=sysGlobalTmmStatHttpRequests, sysDnsStatAuthoritativeAnswer=sysDnsStatAuthoritativeAnswer, sysStpInterfaceTreeStatDesigBridgePrio=sysStpInterfaceTreeStatDesigBridgePrio, sysLsnPoolStatTranslationRequests=sysLsnPoolStatTranslationRequests, sysDot1dBridge=sysDot1dBridge, sysTmmStatTmid=sysTmmStatTmid, sysCpuEntry=sysCpuEntry, sysStatPvaClientCurConns5s=sysStatPvaClientCurConns5s, sysDnsServerStatGroup=sysDnsServerStatGroup, sysPcpStatPcpErrorsUnavailableResource=sysPcpStatPcpErrorsUnavailableResource, sysProfilePptpStatFailedCalls=sysProfilePptpStatFailedCalls, sysIfxStatHcInMulticastPkts=sysIfxStatHcInMulticastPkts, sysIntfMediaGroup=sysIntfMediaGroup, sysJoinCertOrderManagerStatRejectedReqs=sysJoinCertOrderManagerStatRejectedReqs, sysProcPidStatEndCode=sysProcPidStatEndCode, sysHttpCompressionStatOctetPrecompressBytes=sysHttpCompressionStatOctetPrecompressBytes, sysClientsslStatDecryptedBytesIn=sysClientsslStatDecryptedBytesIn, sysTrunkCfgMemberName=sysTrunkCfgMemberName, sysCmFailoverStatusDetailsNumber=sysCmFailoverStatusDetailsNumber, sysBladeTempLocation=sysBladeTempLocation, sysGlobalSipsessionStatDropsReq=sysGlobalSipsessionStatDropsReq, sysSysDeviceInactiveModules=sysSysDeviceInactiveModules, sysServersslStatHostnameBypasses=sysServersslStatHostnameBypasses, sysL2ForwardTable=sysL2ForwardTable, sysStatHttpRequests=sysStatHttpRequests, sysStpGlobals2HelloTime=sysStpGlobals2HelloTime, sysCertValidatorOcspStatNumber=sysCertValidatorOcspStatNumber, sysAdminIp=sysAdminIp, sysChassisSlotGroup=sysChassisSlotGroup, sysDot3StatSymbolErrors=sysDot3StatSymbolErrors, sysSelfIpEntry=sysSelfIpEntry, sysVlanStatBytesIn=sysVlanStatBytesIn, sysServersslStatRsaKeySize4096Offload=sysServersslStatRsaKeySize4096Offload, sysServersslStatAdhKeyxchg=sysServersslStatAdhKeyxchg, sysMptcpStatRemAddrRx=sysMptcpStatRemAddrRx, sysProcPidStatMajFlt=sysProcPidStatMajFlt, sysTmmStat=sysTmmStat, sysClientsslStatOcspFwdpClientsslStapledResp=sysClientsslStatOcspFwdpClientsslStapledResp, sysCertOrderManagerStatResetStats=sysCertOrderManagerStatResetStats, sysVlanMtu=sysVlanMtu, sysLsnPoolStatEndPointsString=sysLsnPoolStatEndPointsString, sysFwNatDynamicPoolStatPbaClientsReachedLimit=sysFwNatDynamicPoolStatPbaClientsReachedLimit, sysVlanStatNumber=sysVlanStatNumber, sysGlobalSipsessionStatVersionNotSupported=sysGlobalSipsessionStatVersionNotSupported, sysHttpCompressionStatAudioPostcompressBytes=sysHttpCompressionStatAudioPostcompressBytes, sysGlobalConnPoolStat=sysGlobalConnPoolStat, sysCertificateFileObjectCertStatusValidationOptions=sysCertificateFileObjectCertStatusValidationOptions, sysDnsStatCnameReqs=sysDnsStatCnameReqs, sysVlanGroupVlanId=sysVlanGroupVlanId, sysStpInterfaceStatRootCost=sysStpInterfaceStatRootCost, sysMultiHostCpuSoftirq5m=sysMultiHostCpuSoftirq5m, sysTmmPagesStatPagesAvail=sysTmmPagesStatPagesAvail, sysFwNatStaticSourceTranslationPoolStatGroup=sysFwNatStaticSourceTranslationPoolStatGroup, sysInterfaceStatMcastOut=sysInterfaceStatMcastOut, bigip7250=bigip7250, sysGlobalDiametersessionStatTotRetransReturnedBusy=sysGlobalDiametersessionStatTotRetransReturnedBusy, sysHttpStatJsPostcompressBytes=sysHttpStatJsPostcompressBytes, sysSoftwareStatus=sysSoftwareStatus, sysVlanIfcStatTable=sysVlanIfcStatTable, sysGlobalSiprouterStatTotOutgoingConnections=sysGlobalSiprouterStatTotOutgoingConnections, sysStatPvaClientPktsOut5m=sysStatPvaClientPktsOut5m, sysClientsslStatTotNativeConns=sysClientsslStatTotNativeConns, sysServersslStatAggregateRenegotiationsRejected=sysServersslStatAggregateRenegotiationsRejected, sysStpInterfaceTreeStatDesigRootPrio=sysStpInterfaceTreeStatDesigRootPrio, sysFastL4StatSyncookAccept=sysFastL4StatSyncookAccept, sysGlobalDiameterrouterStatTotFailedPassthruConnections=sysGlobalDiameterrouterStatTotFailedPassthruConnections, sysIfxStatGroup=sysIfxStatGroup, sysIp6StatErrMem=sysIp6StatErrMem, sysPacketFilterRname=sysPacketFilterRname, sysLogicalDiskDevname=sysLogicalDiskDevname, sysFecStatRmtInRdndLost=sysFecStatRmtInRdndLost, sysTcpStatAccepts=sysTcpStatAccepts, sysGlobalDiameterrouterStatTotPayloadBytesOut=sysGlobalDiameterrouterStatTotPayloadBytesOut, sysGlobalPptpStat=sysGlobalPptpStat, sysStatPvaServerMaxConns5m=sysStatPvaServerMaxConns5m, sysUdpStatConnfails=sysUdpStatConnfails, sysStatClientBytesIn5m=sysStatClientBytesIn5m, sysGlobalTmmStatServerBytesOut=sysGlobalTmmStatServerBytesOut, sysChassisTempTable=sysChassisTempTable, sysUnicastAddrSourceIpType=sysUnicastAddrSourceIpType, sysProcPidStatNumber=sysProcPidStatNumber, sysStpInterfaceMbrRole=sysStpInterfaceMbrRole, sysVcmpCpuCoreTable=sysVcmpCpuCoreTable, sysClientsslStatCurConns=sysClientsslStatCurConns, sysSwitchDdmStatTxPwr3=sysSwitchDdmStatTxPwr3, sysGlobalStreamStat=sysGlobalStreamStat, sysGlobalXmlStat=sysGlobalXmlStat, sysStatServerMaxConns1m=sysStatServerMaxConns1m, sysCertOrderManagerStatCertsRevoked=sysCertOrderManagerStatCertsRevoked, sysSelfIpVlanName=sysSelfIpVlanName, sysUdpStatRxbaddgram=sysUdpStatRxbaddgram, sysDiskBayDiskSerialNumber=sysDiskBayDiskSerialNumber, sysGlobalSipsessionStatClientFailures=sysGlobalSipsessionStatClientFailures, sysGlobalSiprouterStatTotMessagesInternalError=sysGlobalSiprouterStatTotMessagesInternalError, sysServersslStatResetStats=sysServersslStatResetStats, bigipVprB4300N=bigipVprB4300N, sysServersslStatRsaKeySize2048=sysServersslStatRsaKeySize2048, sysChassisFanSpeed=sysChassisFanSpeed, sysIcmp6StatErrProto=sysIcmp6StatErrProto, sysClientsslStatRsaKeySize2048Offload=sysClientsslStatRsaKeySize2048Offload, sysClientsslStatResetStats=sysClientsslStatResetStats, sysProcPidStatSystemUsage5mins=sysProcPidStatSystemUsage5mins, sysDnsServerStatXfrNotifyFailed=sysDnsServerStatXfrNotifyFailed, sysDiskBay=sysDiskBay, sysStatPvaClientCurConns1m=sysStatPvaClientCurConns1m, sysStpVlanMbrEntry=sysStpVlanMbrEntry, sysGlobalSipsessionStatLoopDetected=sysGlobalSipsessionStatLoopDetected, sysCertStatusObject=sysCertStatusObject, sysAttrFailoverUnitId=sysAttrFailoverUnitId, sysStatTmIdleCycles=sysStatTmIdleCycles, sysVlanGroupGroup=sysVlanGroupGroup, sysIcmp6StatDrop=sysIcmp6StatDrop, sysStpGlobalsFwdDelay=sysStpGlobalsFwdDelay, sysPvaStatServerCurConns=sysPvaStatServerCurConns, sysProfilePptpStatGroup=sysProfilePptpStatGroup, sysGlobalTmmStatVirtualServerNonSynDeny=sysGlobalTmmStatVirtualServerNonSynDeny, sysL2ForwardStatVlanName=sysL2ForwardStatVlanName)
mibBuilder.exportSymbols("F5-BIGIP-SYSTEM-MIB", sysVlanxStatEntry=sysVlanxStatEntry, sysVlanIfcStatHcOutOctets=sysVlanIfcStatHcOutOctets, sysMptcpStatAddAddrRx=sysMptcpStatAddAddrRx, sysFecStat=sysFecStat, sysClientsslStatEcdheEcdsaKeyxchg=sysClientsslStatEcdheEcdsaKeyxchg, sysIntfMediaSfpEntry=sysIntfMediaSfpEntry, sysTmmStatWlSyncookieAccepts=sysTmmStatWlSyncookieAccepts, sysLsnPoolFailureStatGroup=sysLsnPoolFailureStatGroup, sysClusterEnabled=sysClusterEnabled, sysGlobalDiameterrouterStatTotMsgsDroppedForceOffline=sysGlobalDiameterrouterStatTotMsgsDroppedForceOffline, sysStpGlobals2Mode=sysStpGlobals2Mode, sysClusterMbrEnabledStat=sysClusterMbrEnabledStat, sysIp6StatTx=sysIp6StatTx, sysGlobalHostCpuIrq=sysGlobalHostCpuIrq, sysFecStatInRdndPackets=sysFecStatInRdndPackets, sysFastHttpStatResp4xxCnt=sysFastHttpStatResp4xxCnt, sysSysDeviceTimelimitedModulesModule=sysSysDeviceTimelimitedModulesModule, sysStatPvaServerPktsIn5m=sysStatPvaServerPktsIn5m, sysProfilePptpStatCallDisconnectNotifies=sysProfilePptpStatCallDisconnectNotifies, sysVcmpAssignedSlotsSlotId=sysVcmpAssignedSlotsSlotId, sysIfxStatHighSpeed=sysIfxStatHighSpeed, sysSysDeviceActiveModulesModule=sysSysDeviceActiveModulesModule, sysStatPvaServerMaxConns5s=sysStatPvaServerMaxConns5s, sysCertOrderManagerStatName=sysCertOrderManagerStatName, sysL2ForwardAttrVlan=sysL2ForwardAttrVlan, sysStatAuthCurSessions=sysStatAuthCurSessions, sysStatServerTotConns5s=sysStatServerTotConns5s, sysSwStatusVersion=sysSwStatusVersion, sysClusterMinUpMbrsEnable=sysClusterMinUpMbrsEnable, bigip3900=bigip3900, sysAttrFailoverActiveMode=sysAttrFailoverActiveMode, sysSwitchDdmStatRxPwr3=sysSwitchDdmStatRxPwr3, sysGlobalDiametersessionStatTotAccountingAnswers=sysGlobalDiametersessionStatTotAccountingAnswers, sysCertStatusObjectNumber=sysCertStatusObjectNumber, sysGlobalSipsessionStatVersionNotSupported505Sent=sysGlobalSipsessionStatVersionNotSupported505Sent, sysGlobalDiameterrouterStatTotMessagesPersistInUse=sysGlobalDiameterrouterStatTotMessagesPersistInUse, sysSctpStatConnects=sysSctpStatConnects, sysClientsslStatPeercertInvalid=sysClientsslStatPeercertInvalid, sysAttrPacketFilterAllowImportantIcmp=sysAttrPacketFilterAllowImportantIcmp, sysClusterMbrPriming=sysClusterMbrPriming, sysUdpStatRxdgram=sysUdpStatRxdgram, sysGlobalIp6Stat=sysGlobalIp6Stat, sysTrunkStatDropsOut=sysTrunkStatDropsOut, sysGlobalSipsessionStatNotFound=sysGlobalSipsessionStatNotFound, sysServersslStatDssKeyxchg=sysServersslStatDssKeyxchg, sysGlobalHostCpuNice=sysGlobalHostCpuNice, sysGlobalDiametersessionStatTotAnswerResultCodeSent4xxx=sysGlobalDiametersessionStatTotAnswerResultCodeSent4xxx, sysDot1dbaseStat=sysDot1dbaseStat, bigip5250=bigip5250, sysGlobalDiameterrouterStatTotOutgoingStreams=sysGlobalDiameterrouterStatTotOutgoingStreams, sysGlobalHostOtherMemTotalKb=sysGlobalHostOtherMemTotalKb, unknown=unknown, sysVlanMemberType=sysVlanMemberType, sysIfEntry=sysIfEntry, bigipi10600=bigipi10600, sysServersslStatExtendedMasterSecrets=sysServersslStatExtendedMasterSecrets, sysGlobalHostCpuSoftirq=sysGlobalHostCpuSoftirq, sysSwVolumeName=sysSwVolumeName, sysDnsStatOtherReqs=sysDnsStatOtherReqs, sysStatAuthErrorResults=sysStatAuthErrorResults, sysJoinCertOrderManagerStatResetStats=sysJoinCertOrderManagerStatResetStats, sysGlobalDiametersessionStatTotCreditControlRequests=sysGlobalDiametersessionStatTotCreditControlRequests, sysInterfaceId=sysInterfaceId, sysCertValidatorOcspStatResponseValidationOtherErrors=sysCertValidatorOcspStatResponseValidationOtherErrors, sysStatAuthTotSessions=sysStatAuthTotSessions, bigip5110=bigip5110, sysServersslStatSecureHandshakes=sysServersslStatSecureHandshakes, sysLldpNeighborsTablePortDesc=sysLldpNeighborsTablePortDesc, sysIfxStatNumber=sysIfxStatNumber, sysCertificateFileObjectTable=sysCertificateFileObjectTable, sysClientsslStatConnectionMirrorPeerReady=sysClientsslStatConnectionMirrorPeerReady, sysClientsslStatRsaKeySize4096=sysClientsslStatRsaKeySize4096, sysVlanxStatHcInBroadcastPkts=sysVlanxStatHcInBroadcastPkts, sysSelfIpNetmaskType=sysSelfIpNetmaskType, sysCertOrderManagerEntry=sysCertOrderManagerEntry, sysHostCpuNice=sysHostCpuNice, sysStatMaxConnVirtualPathDeny=sysStatMaxConnVirtualPathDeny, sysClientsslStatOcspStaplingOcspConnHttpErrors=sysClientsslStatOcspStaplingOcspConnHttpErrors, sysTrunkStatDropsIn=sysTrunkStatDropsIn, sysGlobalSipsessionStatResetStats=sysGlobalSipsessionStatResetStats, sysStatPvaServerPktsOut=sysStatPvaServerPktsOut, sysServersslStatMd5DigestOffload=sysServersslStatMd5DigestOffload, sysCpuTemperature=sysCpuTemperature, sysGlobalHostCpuIdle=sysGlobalHostCpuIdle, sysServersslStatEncryptedBytesOut=sysServersslStatEncryptedBytesOut, sysStpInterfaceMbrStateActive=sysStpInterfaceMbrStateActive, sysGlobalIpsecalgStatResetStats=sysGlobalIpsecalgStatResetStats, sysGlobalSipsessionStatCancel=sysGlobalSipsessionStatCancel, sysMultiHostCpuSystem5s=sysMultiHostCpuSystem5s, sysFwNatDynamicPoolStatLsnTranslationRequests=sysFwNatDynamicPoolStatLsnTranslationRequests, sysStatPvaServerPktsIn5s=sysStatPvaServerPktsIn5s, sysHostDiskTotalNodes=sysHostDiskTotalNodes, sysGlobalSiprouterStatTotMessagesCannotReturn=sysGlobalSiprouterStatTotMessagesCannotReturn, sysIpsecSpdStatDirection=sysIpsecSpdStatDirection, sysGlobalTmmStatServerTotConns=sysGlobalTmmStatServerTotConns, sysUdpStatResetStats=sysUdpStatResetStats, sysClientsslStatPartiallyHwAcceleratedConns=sysClientsslStatPartiallyHwAcceleratedConns, sysSysDeviceTimelimitedModulesNumber=sysSysDeviceTimelimitedModulesNumber, sysServersslStatSessionMirrorFailure=sysServersslStatSessionMirrorFailure, yki10800=yki10800, sysCertificateFileObjectGroup=sysCertificateFileObjectGroup, sysGlobalDiametersessionStatCurTrafficRate=sysGlobalDiametersessionStatCurTrafficRate, sysChassisSlotState=sysChassisSlotState, sysGlobalSipStatResetStats=sysGlobalSipStatResetStats, sysHttpStatPlainPrecompressBytes=sysHttpStatPlainPrecompressBytes, sysClientsslStatOcspFwdpClientsslUnknownResp=sysClientsslStatOcspFwdpClientsslUnknownResp, sysSwImageVersion=sysSwImageVersion, sysGlobalFtpStatFtpsResets=sysGlobalFtpStatFtpsResets, sysInterfaceMacAddr=sysInterfaceMacAddr, sysMultiHostEntry=sysMultiHostEntry, sysVcmpStatComment=sysVcmpStatComment, sysVlanIfcStatPvaInOctets=sysVlanIfcStatPvaInOctets, sysCertValidatorOcspSignerKeyPassphrase=sysCertValidatorOcspSignerKeyPassphrase, sysSelfPortPort=sysSelfPortPort, sysDnsStatNoErrors=sysDnsStatNoErrors, sysDiskBayGroup=sysDiskBayGroup, sysStatPvaServerTotConns1m=sysStatPvaServerTotConns1m, sysConnPoolStatGroup=sysConnPoolStatGroup, sysSwVolumeTable=sysSwVolumeTable, sysLsnPoolStatBackupPoolTranslations=sysLsnPoolStatBackupPoolTranslations, bigip2000=bigip2000, sysClientsslStatDesBulk=sysClientsslStatDesBulk, sysProcPidStatShare=sysProcPidStatShare, sysSctpStatAccepts=sysSctpStatAccepts, sysGlobalSiprouterStatTotMessagesMaxRetries=sysGlobalSiprouterStatTotMessagesMaxRetries, sysVlanStatGroup=sysVlanStatGroup, sysMultiHostCpuIrq5m=sysMultiHostCpuIrq5m, sysStatPvaClientPktsOut=sysStatPvaClientPktsOut, sysSctpStatRxcookie=sysSctpStatRxcookie, sysClientsslStatDtlsTxPushbacks=sysClientsslStatDtlsTxPushbacks, sysGlobalIcmp6Stat=sysGlobalIcmp6Stat, ykVprC2400=ykVprC2400, sysSctpStatRxbadsum=sysSctpStatRxbadsum, sysStatPvaClientPktsIn=sysStatPvaClientPktsIn, sysClusterMbrState=sysClusterMbrState, sysGlobalDiametersessionStatTotCreditControlAnswers=sysGlobalDiametersessionStatTotCreditControlAnswers, sysVlanIfcStatName=sysVlanIfcStatName, sysGlobalSipsessionStatBadmsgs=sysGlobalSipsessionStatBadmsgs, sysProcPidStatLSize=sysProcPidStatLSize, sysGlobalDiameterrouterStatTotMessagesOut=sysGlobalDiameterrouterStatTotMessagesOut, sysIp6StatMcastRx=sysIp6StatMcastRx, sysFwNatStaticDestinationTranslationPoolStatErrFlowCollis=sysFwNatStaticDestinationTranslationPoolStatErrFlowCollis, sysUnicastAddr=sysUnicastAddr, sysCmTrafficGroupStatusFailoverStatus=sysCmTrafficGroupStatusFailoverStatus, em4000=em4000, sysInterfacePreferSfp=sysInterfacePreferSfp, sysPcpStatPcpErrorsNotAuthorized=sysPcpStatPcpErrorsNotAuthorized, sysGlobalHostCpuIowait1m=sysGlobalHostCpuIowait1m, sysStatServerBytesOut=sysStatServerBytesOut, sysProxyExclusionGroup=sysProxyExclusionGroup, sysInterfaceStatDropsIn=sysInterfaceStatDropsIn, sysIfxStatOutMulticastPkts=sysIfxStatOutMulticastPkts, sysSysDeviceInactiveModulesNumber=sysSysDeviceInactiveModulesNumber, sysVlanGroupMbrGroupName=sysVlanGroupMbrGroupName, sysTmmStatOutgoingPacketErrors=sysTmmStatOutgoingPacketErrors, sysStreamStatReplaces=sysStreamStatReplaces, sysGlobalHostCpuNice1m=sysGlobalHostCpuNice1m, sysTmmProcStatNumber=sysTmmProcStatNumber, sysUdpStatRxnosum=sysUdpStatRxnosum, sysProcPidStatCpuUsage1min=sysProcPidStatCpuUsage1min, sysHttpStatXmlPrecompressBytes=sysHttpStatXmlPrecompressBytes, sysVlanMirrorHashPortEnable=sysVlanMirrorHashPortEnable, bigip11000=bigip11000, sysInterfaceEnabled=sysInterfaceEnabled, sysClusterEnabledStat=sysClusterEnabledStat, sysStpGlobals2Table=sysStpGlobals2Table, sysPvaStatResetStats=sysPvaStatResetStats, sysStatPvaServerBytesOut1m=sysStatPvaServerBytesOut1m, sysHttpCompressionStatJsPostcompressBytes=sysHttpCompressionStatJsPostcompressBytes, sysFwNatDynamicPoolStatResetStats=sysFwNatDynamicPoolStatResetStats, sysGlobalTftpStatResetStats=sysGlobalTftpStatResetStats, sysSelfPortProtocol=sysSelfPortProtocol, sysStpInterfaceTreeStatInstanceId=sysStpInterfaceTreeStatInstanceId, sysClientsslStatOcspFwdpClientsslRespstatusErrResp=sysClientsslStatOcspFwdpClientsslRespstatusErrResp, sysMultiHostCpuNice5s=sysMultiHostCpuNice5s, sysServersslStatCurrentActiveHandshakes=sysServersslStatCurrentActiveHandshakes, sysProcPidStatFlags=sysProcPidStatFlags, sysClientsslStatChacha20Poly1305Bulk=sysClientsslStatChacha20Poly1305Bulk, sysJoinCertOrderManagerKeyName=sysJoinCertOrderManagerKeyName, sysGlobalDiameterrouterStatTotExpiredPendingRequests=sysGlobalDiameterrouterStatTotExpiredPendingRequests, sysStatTmTotalCycles=sysStatTmTotalCycles, sysGlobalServerSslStat=sysGlobalServerSslStat, sysServersslStatDecryptedBytesIn=sysServersslStatDecryptedBytesIn, sysVirtualDiskTable=sysVirtualDiskTable, sysStpName=sysStpName, sysVlanEntry=sysVlanEntry, sysDnsStatRcodeRefused=sysDnsStatRcodeRefused, sysGlobalFtpStatFtpsIntercepts=sysGlobalFtpStatFtpsIntercepts, sysClientsslStatShaDigestOffload=sysClientsslStatShaDigestOffload, sysCertValidatorOcspEntry=sysCertValidatorOcspEntry, sysGlobalDiametersessionStatTotDeviceWatchdogAnswers=sysGlobalDiametersessionStatTotDeviceWatchdogAnswers, sysChassisTempIndex=sysChassisTempIndex, sysProcPidStatEntry=sysProcPidStatEntry, sysModuleAllocationName=sysModuleAllocationName, sysStatServerBytesOut5s=sysStatServerBytesOut5s, sysStatPvaClientPktsIn1m=sysStatPvaClientPktsIn1m, sysGlobalDiametersessionStatCurReqQueuedForRetrans=sysGlobalDiametersessionStatCurReqQueuedForRetrans, sysSwImageSlotId=sysSwImageSlotId, sysChassisFanStatus=sysChassisFanStatus, sysGlobalDiameterrouterStatTotAutoInitOutgoingConnections=sysGlobalDiameterrouterStatTotAutoInitOutgoingConnections, sysIpsecSpdStatDestinationNetmask=sysIpsecSpdStatDestinationNetmask, sysStpInterfaceMbrPathCost=sysStpInterfaceMbrPathCost, sysInterfaceGroup=sysInterfaceGroup, sysVlanLearnMode=sysVlanLearnMode, sysIp6StatRxFrag=sysIp6StatRxFrag, sysClientsslStatNotssl=sysClientsslStatNotssl, sysPacketFilterVlanTable=sysPacketFilterVlanTable, sysClientsslStatSha512Digest=sysClientsslStatSha512Digest, sysVcmpStatCpuUsageRecent=sysVcmpStatCpuUsageRecent, sysVcmpVcmpId=sysVcmpVcmpId, sysTrunks=sysTrunks, sysHttpStatRespBucket1k=sysHttpStatRespBucket1k, sysModuleAllocationCpuRatio=sysModuleAllocationCpuRatio, sysPhysicalDiskEntry=sysPhysicalDiskEntry, sysClientsslStatConns=sysClientsslStatConns, sysInterfaceStpEnable=sysInterfaceStpEnable, sysArpStaticEntryTable=sysArpStaticEntryTable, sysL2ForwardStatTable=sysL2ForwardStatTable, sysClientsslStatInsecureHandshakeRejects=sysClientsslStatInsecureHandshakeRejects, sysJoinCertValidatorCert=sysJoinCertValidatorCert, sysTmmStatHttpRequests=sysTmmStatHttpRequests, sysTrunkStatPktsIn=sysTrunkStatPktsIn, sysGlobalDiameterrouterStatTotMessagesInRetry=sysGlobalDiameterrouterStatTotMessagesInRetry, sysGlobalUdpStat=sysGlobalUdpStat, sysDiskBayTable=sysDiskBayTable, sysSwHotfixVerified=sysSwHotfixVerified, sysMultiHostCpu=sysMultiHostCpu, sysProductDate=sysProductDate, sysGlobalSipStat=sysGlobalSipStat, sysGlobalTmmStatServerMaxConns=sysGlobalTmmStatServerMaxConns, sysLldpNeighborsTableAutoNego=sysLldpNeighborsTableAutoNego, sysSystemVersion=sysSystemVersion, sysSysDeviceOptionalModulesIndex=sysSysDeviceOptionalModulesIndex, sysTmmStatServerTotConns=sysTmmStatServerTotConns, sysProcPidStatVsizeKb=sysProcPidStatVsizeKb, sysAttrWatchdogState=sysAttrWatchdogState, sysFwNatStaticSourceTranslationPoolStatTransReqFails=sysFwNatStaticSourceTranslationPoolStatTransReqFails, sysSwHotfixGroup=sysSwHotfixGroup, sysIpStatErrMem=sysIpStatErrMem, sysXmlStatResetStats=sysXmlStatResetStats, sysTmmStatMaintenanceModeDeny=sysTmmStatMaintenanceModeDeny, sysMptcpStatAcceptFail=sysMptcpStatAcceptFail, sysJoinCertOrderManagerCertOrderManager=sysJoinCertOrderManagerCertOrderManager, sysChassisTempEntry=sysChassisTempEntry, sysVlanVname=sysVlanVname, sysSwitchDdmStatRxAlarmLo=sysSwitchDdmStatRxAlarmLo, sysHostCpuEntry=sysHostCpuEntry, sysDnsStatOpcodeUpdate=sysDnsStatOpcodeUpdate, sysVcmpStatGroup=sysVcmpStatGroup, sysVlanId=sysVlanId, sysVlanMemberParentVname=sysVlanMemberParentVname, sysGlobalSiprouterStatTotMessagesPersistInUse=sysGlobalSiprouterStatTotMessagesPersistInUse, sysIcmpStatErrOpt=sysIcmpStatErrOpt, sysServersslStatDhGroupX25519=sysServersslStatDhGroupX25519)
mibBuilder.exportSymbols("F5-BIGIP-SYSTEM-MIB", sysHttpStatResp5xxCnt=sysHttpStatResp5xxCnt, sysTmmPagesStatSlot=sysTmmPagesStatSlot, sysMultiHostSwapTotalKb=sysMultiHostSwapTotalKb, sysLogicalDiskMembersTable=sysLogicalDiskMembersTable, sysLsnPoolFailureStatFailureCount=sysLsnPoolFailureStatFailureCount, sysClientsslStatTotConns5m=sysClientsslStatTotConns5m, sysGlobalSipsessionStatRequestEntityTooLarge=sysGlobalSipsessionStatRequestEntityTooLarge, sysPcpStatPcpPeerRequests=sysPcpStatPcpPeerRequests, sysServersslStatSha224Digest=sysServersslStatSha224Digest, sysMptcpStatGroup=sysMptcpStatGroup, sysHttpStatRamcacheMisses=sysHttpStatRamcacheMisses, sysIntfMediaSfpNumber=sysIntfMediaSfpNumber, sysDnsStatDrops=sysDnsStatDrops, sysStatServerBytesOut1m=sysStatServerBytesOut1m, sysClientsslStatOcspFwdpClientsslCertStatusReq=sysClientsslStatOcspFwdpClientsslCertStatusReq, sysGlobalTmmStatMemoryTotal=sysGlobalTmmStatMemoryTotal, sysGlobalTmmStatCmpConnRedirected=sysGlobalTmmStatCmpConnRedirected, sysStatClientMaxConns5m=sysStatClientMaxConns5m, sysSysDeviceInactiveModulesEntry=sysSysDeviceInactiveModulesEntry, sysSwitchDdmStatTxPwr2=sysSwitchDdmStatTxPwr2, sysStatTotPvaAssistConn=sysStatTotPvaAssistConn, sysHostCpuGroup=sysHostCpuGroup, trafficShield4100=trafficShield4100, sysStpBridgeStatMaxAge=sysStpBridgeStatMaxAge, sysSwitchDdmStatNumber=sysSwitchDdmStatNumber, sysVcmpVirtualDisk=sysVcmpVirtualDisk, sysClientsslStatSha256Digest=sysClientsslStatSha256Digest, sysStatServerMaxConns5s=sysStatServerMaxConns5s, sysL2ForwardStatEntry=sysL2ForwardStatEntry, sysServersslStatDhGroupX25519Offload=sysServersslStatDhGroupX25519Offload, sysIpStatReassembled=sysIpStatReassembled, sysClusterMbrStatusReason=sysClusterMbrStatusReason, sysAuthStatGroup=sysAuthStatGroup, sysJoinCertOrderManagerStatCaPollReqs=sysJoinCertOrderManagerStatCaPollReqs, sysLsnPoolStatHairpinConnectionFailures=sysLsnPoolStatHairpinConnectionFailures, sysGlobalAttr=sysGlobalAttr, sysServersslStatInsecureRenegotiationRejects=sysServersslStatInsecureRenegotiationRejects, sysClientsslStatEcdhEcdsaKeyxchg=sysClientsslStatEcdhEcdsaKeyxchg, sysVcmpStat=sysVcmpStat, sysServersslStatConnectionMirrorPeerReady=sysServersslStatConnectionMirrorPeerReady, sysClientsslStatDecryptedBytesOut=sysClientsslStatDecryptedBytesOut, sysStatMaintenanceModeDeny=sysStatMaintenanceModeDeny, sysMptcpStatAddAddrTx=sysMptcpStatAddAddrTx, sysTmmProcStatGroup=sysTmmProcStatGroup, sysProcPidStatKstkEsp=sysProcPidStatKstkEsp, sysIcmpStatErrMem=sysIcmpStatErrMem, sysPcpStatPcpAnnounceRequests=sysPcpStatPcpAnnounceRequests, sysAuthStatFailureResults=sysAuthStatFailureResults, sysGlobalSipsessionStatNotImplemented=sysGlobalSipsessionStatNotImplemented, sysProcPidStatItrealvalue=sysProcPidStatItrealvalue, sysGlobalHostMemTotal=sysGlobalHostMemTotal, bigip8400=bigip8400, sysInterfaceStatQqOut=sysInterfaceStatQqOut, sysVcmpStatVdisk=sysVcmpStatVdisk, sysCmTrafficGroupStatusEntry=sysCmTrafficGroupStatusEntry, sysSwImageFileSize=sysSwImageFileSize, ykVprB2250=ykVprB2250, sysGlobalFtpStatLoginRequests=sysGlobalFtpStatLoginRequests, sysChassisFanIndex=sysChassisFanIndex, sysServersslStatSniRejects=sysServersslStatSniRejects, sysClientsslStatDssKeyxchg=sysClientsslStatDssKeyxchg, sysIcmp6StatErrRtx=sysIcmp6StatErrRtx, sysFwNatDynamicPoolStatPbaPortBlockAllocations=sysFwNatDynamicPoolStatPbaPortBlockAllocations, sysIpStatErrMcastMaxPendingPackets=sysIpStatErrMcastMaxPendingPackets, sysSwitchDdmStatTxDbmPwr2=sysSwitchDdmStatTxDbmPwr2, sysSwHotfixHotfixTitle=sysSwHotfixHotfixTitle, sysCertOrderManagerStatCertsCreated=sysCertOrderManagerStatCertsCreated, sysLogicalDiskMembersSlotId=sysLogicalDiskMembersSlotId, sysGlobalDiametersessionStatTotRetransmissionTimeout=sysGlobalDiametersessionStatTotRetransmissionTimeout, sysStatServerPktsOut1m=sysStatServerPktsOut1m, sysDot3StatDuplexStatus=sysDot3StatDuplexStatus, sysStpInterfaceMbrTable=sysStpInterfaceMbrTable, sysJoinCertOrderManagerStatNumber=sysJoinCertOrderManagerStatNumber, sysTmmStatMemoryUsedKb=sysTmmStatMemoryUsedKb, sysMultiHostCpuCount=sysMultiHostCpuCount, sysSysDeviceInactiveModulesTable=sysSysDeviceInactiveModulesTable, sysJoinCertOrderManagerStatCertIssued=sysJoinCertOrderManagerStatCertIssued, sysSwitchDdmStatTxDbmPwr3=sysSwitchDdmStatTxDbmPwr3, sysCertValidatorOcspStatResetStats=sysCertValidatorOcspStatResetStats, sysClientsslStatTlsv1=sysClientsslStatTlsv1, sysCpuSensorNumber=sysCpuSensorNumber, sysHttpStatAudioPostcompressBytes=sysHttpStatAudioPostcompressBytes, sysInterfaceStatMcastIn=sysInterfaceStatMcastIn, sysSwVolumeGroup=sysSwVolumeGroup, sysAttrFailoverForceStandby=sysAttrFailoverForceStandby, sysRouteStaticEntryPoolName=sysRouteStaticEntryPoolName, sysTmmProcStatSlotId=sysTmmProcStatSlotId, sysStpBridgeTreeStatInstanceName=sysStpBridgeTreeStatInstanceName, sysGlobalHttpStat=sysGlobalHttpStat, sysInterfaceStatTable=sysInterfaceStatTable, bigip10000S=bigip10000S, sysMultiHostOtherMemoryTotalKb=sysMultiHostOtherMemoryTotalKb, sysGlobalDiameterrouterStatTotMessagesMaxRetries=sysGlobalDiameterrouterStatTotMessagesMaxRetries, bigipPb200N=bigipPb200N, sysAuthStatErrorResults=sysAuthStatErrorResults, sysIpsecSpdStatTrafficSelectorName=sysIpsecSpdStatTrafficSelectorName, sysFwNatStaticDestinationTranslationPoolStatTransReqs=sysFwNatStaticDestinationTranslationPoolStatTransReqs, sysServersslStatDtlsv1=sysServersslStatDtlsv1, sysFwNatStaticDestinationTranslationPoolStatErrPortTrans=sysFwNatStaticDestinationTranslationPoolStatErrPortTrans, sysGlobalSiprouterStatTotAutoInitOutgoingConnections=sysGlobalSiprouterStatTotAutoInitOutgoingConnections, sysCertificateFileObjectIssuerCert=sysCertificateFileObjectIssuerCert, sysTmmPagesStatEntry=sysTmmPagesStatEntry, sysMultiHostCpuGroup=sysMultiHostCpuGroup, sysServersslStatMaxCompatConns=sysServersslStatMaxCompatConns, bigip10250=bigip10250, sysDnsStatEdns0=sysDnsStatEdns0, sysSwitchDdmStatTxWarnLo=sysSwitchDdmStatTxWarnLo, sysSwitchDdmStatTxDbmPwr1=sysSwitchDdmStatTxDbmPwr1, sysUdpStatTxdgram=sysUdpStatTxdgram, sysServersslStatIdeaBulk=sysServersslStatIdeaBulk, sysClientsslStatCurCompatConns=sysClientsslStatCurCompatConns, sysPacketFilterVname=sysPacketFilterVname, sysCertOrderManagerOrderInformation=sysCertOrderManagerOrderInformation, sysServersslStatEcdhEcdsaKeyxchg=sysServersslStatEcdhEcdsaKeyxchg, sysTmmPagesStat=sysTmmPagesStat, sysSwHotfixVersion=sysSwHotfixVersion, sysCmFailoverStatusDetailsEntry=sysCmFailoverStatusDetailsEntry, sysAttrArpMaxEntries=sysAttrArpMaxEntries, sysMultiHostCpuIowait5m=sysMultiHostCpuIowait5m, sysStpInterfaceStatStpEnable=sysStpInterfaceStatStpEnable, sysTmmStatTable=sysTmmStatTable, sysTmmStatWlSyncookieHits=sysTmmStatWlSyncookieHits, sysProcPidStatSystemUsage1min=sysProcPidStatSystemUsage1min, sysGlobalFtpStatResetStats=sysGlobalFtpStatResetStats, sysDiskBayId=sysDiskBayId, sysVlanStatDropsIn=sysVlanStatDropsIn, bigipPb200=bigipPb200, sysCertValidatorOcspUrl=sysCertValidatorOcspUrl, sysSctpStatResetStats=sysSctpStatResetStats, sysCertOrderManagerInternalProxy=sysCertOrderManagerInternalProxy, sysIpsecSpdStatGroup=sysIpsecSpdStatGroup, sysHttpStatPostReqs=sysHttpStatPostReqs, sysTmmStatMemoryUsed=sysTmmStatMemoryUsed, sysGlobalTmmStatClientBytesIn=sysGlobalTmmStatClientBytesIn, sysCertOrderManagerStatTable=sysCertOrderManagerStatTable, sysServersslStatEncryptedBytesIn=sysServersslStatEncryptedBytesIn, sysGlobalFtpStat=sysGlobalFtpStat, sysStatDroppedPackets=sysStatDroppedPackets, sysStpInterfaceTreeStatDesigPortPriority=sysStpInterfaceTreeStatDesigPortPriority, sysGlobalDiameterrouterStatCurOutgoingStreams=sysGlobalDiameterrouterStatCurOutgoingStreams, sysFastL4StatGroup=sysFastL4StatGroup, sysServersslStatCurConns=sysServersslStatCurConns, sysGlobals=sysGlobals, sysDnsStatRcodeServfail=sysDnsStatRcodeServfail, sysIp6StatNbrUnreachableDropped=sysIp6StatNbrUnreachableDropped, sysHttpStatV30Reqs=sysHttpStatV30Reqs, sysStpInterfaceStat=sysStpInterfaceStat, sysVlanIfcStatHcOutUcastPkts=sysVlanIfcStatHcOutUcastPkts, sysMultiHostCpuUser=sysMultiHostCpuUser, sysDnsStatAnyReqs=sysDnsStatAnyReqs, sysInterfaceStatResetStats=sysInterfaceStatResetStats, sysGlobalSiprouterStatCurPassthruConnections=sysGlobalSiprouterStatCurPassthruConnections, sysChassisSlotSlotId=sysChassisSlotSlotId, sysCertOrderManagerStatConnectionErrors=sysCertOrderManagerStatConnectionErrors, sysTcpStatRxcookie=sysTcpStatRxcookie, sysGlobalSipsessionStatNegotiate=sysGlobalSipsessionStatNegotiate, sysIntfMediaNumber=sysIntfMediaNumber, sysGlobalSipsessionStatResponses=sysGlobalSipsessionStatResponses, sysGlobalHost=sysGlobalHost, sysClusterLastPriSlotId=sysClusterLastPriSlotId, sysProxyExclusionNumber=sysProxyExclusionNumber, sysSelfIpIsFloating=sysSelfIpIsFloating, sysVirtualDiskSlotId=sysVirtualDiskSlotId, sysChassisFanEntry=sysChassisFanEntry, sysPacketFilterLog=sysPacketFilterLog, bigipVprC2200=bigipVprC2200, sysLldpNeighborsTableF5ProductModel=sysLldpNeighborsTableF5ProductModel, sysServersslStatSha512DigestOffload=sysServersslStatSha512DigestOffload, sysGlobalHostCpuIowait=sysGlobalHostCpuIowait, sysGlobalSipsessionStatRedirection=sysGlobalSipsessionStatRedirection, sysPacketFilterMacTable=sysPacketFilterMacTable, sysLsnPoolStatActiveInboundReservations=sysLsnPoolStatActiveInboundReservations, sysIcmp6StatErrCksum=sysIcmp6StatErrCksum, sysVcmpVlanTable=sysVcmpVlanTable, sysCmSyncStatusDetailsDetails=sysCmSyncStatusDetailsDetails, sysHttpStatVideoPostcompressBytes=sysHttpStatVideoPostcompressBytes, sysGlobalTmmStatClientPktsOut=sysGlobalTmmStatClientPktsOut, sysDnsStatDns64Reqs=sysDnsStatDns64Reqs, sysTcpStatAbandons=sysTcpStatAbandons, sysCmFailoverStatusDetailsDetails=sysCmFailoverStatusDetailsDetails, sysSwImageBuild=sysSwImageBuild, sysClientsslStatDheDssKeyxchg=sysClientsslStatDheDssKeyxchg, sysTrunkCfgMember=sysTrunkCfgMember, sysServersslStatSslv3=sysServersslStatSslv3, sysProcPidStatPid=sysProcPidStatPid, sysIpsecSpdStatDestinationAddressType=sysIpsecSpdStatDestinationAddressType, sysIcmpStatRx=sysIcmpStatRx, sysCmSyncStatusDetailsNumber=sysCmSyncStatusDetailsNumber, sysCertificateFileObjectNumber=sysCertificateFileObjectNumber, sysGlobalLsnPoolFailureStat=sysGlobalLsnPoolFailureStat, sysVirtualDiskOperatingSystem=sysVirtualDiskOperatingSystem, sysSwStatusGroup=sysSwStatusGroup, sysHttpStatGroup=sysHttpStatGroup, sysSelfPortSelfName=sysSelfPortSelfName, sysTunnels=sysTunnels, sysStpBridgeTreeStatInternalPathCost=sysStpBridgeTreeStatInternalPathCost, sysChassisPowerSupply=sysChassisPowerSupply, sysGlobalHostCpuUsageRatio5m=sysGlobalHostCpuUsageRatio5m, sysClientsslStatSha512DigestOffload=sysClientsslStatSha512DigestOffload, sysHttpStatOctetPostcompressBytes=sysHttpStatOctetPostcompressBytes, sysIp6StatErrMcastNoRoute=sysIp6StatErrMcastNoRoute, sysProcPidStat=sysProcPidStat, sysLsnPoolStatTotalZombiePortBlocksCreated=sysLsnPoolStatTotalZombiePortBlocksCreated, sysGlobalSipsessionStatBadmsgsReq=sysGlobalSipsessionStatBadmsgsReq, sysPacketFilterRclass=sysPacketFilterRclass, sysL2ForwardDynamic=sysL2ForwardDynamic, sysStatClientPktsIn=sysStatClientPktsIn, sysSwitchDdmStatRxDbmPwrLoAlarm=sysSwitchDdmStatRxDbmPwrLoAlarm, sysIpsecSpdStatSourceAddressType=sysIpsecSpdStatSourceAddressType, sysStatServerPktsIn5s=sysStatServerPktsIn5s, sysMptcpStatAccept=sysMptcpStatAccept, sysHttpStatRespBucket32k=sysHttpStatRespBucket32k, sysGlobalSiprouterStatResetStats=sysGlobalSiprouterStatResetStats, bigipi7600_D=bigipi7600_D, sysIcmpStatErrRtx=sysIcmpStatErrRtx, sysHostCpuTable=sysHostCpuTable, sysSysDeviceActiveModulesEntry=sysSysDeviceActiveModulesEntry, sysVlanGroupMode=sysVlanGroupMode, sysTcpStatConnfails=sysTcpStatConnfails, sysClusterFloatMgmtNetmaskType=sysClusterFloatMgmtNetmaskType, sysDnsStatFastDnsRespNx=sysDnsStatFastDnsRespNx, sysTcpStatResetStats=sysTcpStatResetStats, sysFastHttpStatV9Reqs=sysFastHttpStatV9Reqs, sysIcmpStatTx=sysIcmpStatTx, sysStatClientTotConns1m=sysStatClientTotConns1m, sysClusterEntry=sysClusterEntry, sysStatClientMaxConns=sysStatClientMaxConns, sysTmmStatClientBytesOut=sysTmmStatClientBytesOut, sysSoftwareVolume=sysSoftwareVolume, sysDnsStatFastDnsRespTc=sysDnsStatFastDnsRespTc, sysFecStatResetStats=sysFecStatResetStats, sysFwNatStaticDestinationTranslationPoolStatBidirReqFails=sysFwNatStaticDestinationTranslationPoolStatBidirReqFails, sysTrunkCfgMemberNumber=sysTrunkCfgMemberNumber, bigipi7800_D=bigipi7800_D, sysProcPidStatPolicy=sysProcPidStatPolicy, sysIpStatErrMcastMaxPendingRoutes=sysIpStatErrMcastMaxPendingRoutes, sysTcpStatAcceptfails=sysTcpStatAcceptfails, sysGlobalAttrs=sysGlobalAttrs, sysStatIncomingPacketErrors=sysStatIncomingPacketErrors, sysStpRootAddr=sysStpRootAddr, sysPlatformInfoMarketingName=sysPlatformInfoMarketingName, sysVcmpStatPrompt=sysVcmpStatPrompt, sysIcmpStatErr=sysIcmpStatErr, sysGlobalTmmStatMemoryUsedKb=sysGlobalTmmStatMemoryUsedKb, sysSwImageGroup=sysSwImageGroup, sysFecStatTable=sysFecStatTable, sysJoinCertOrderManagerStatCertOrderManager=sysJoinCertOrderManagerStatCertOrderManager, sysClientsslStatOcspFwdpClientsslCachedResp=sysClientsslStatOcspFwdpClientsslCachedResp, sysInterfaceStpLink=sysInterfaceStpLink, sysVlanStatErrorsIn=sysVlanStatErrorsIn, sysFecStatRmtInRdndPackets=sysFecStatRmtInRdndPackets, sysArpNdp=sysArpNdp, sysClientsslStatAesBulkOffload=sysClientsslStatAesBulkOffload, sysTmmStatHwSyncookieAccepts=sysTmmStatHwSyncookieAccepts)
mibBuilder.exportSymbols("F5-BIGIP-SYSTEM-MIB", sysClientsslStatHostnameBypasses=sysClientsslStatHostnameBypasses, sysProcPidStatTtyNr=sysProcPidStatTtyNr, sysServersslStatInsecureHandshakeAccepts=sysServersslStatInsecureHandshakeAccepts, sysStatPvaClientTotConns1m=sysStatPvaClientTotConns1m, sysStpGroup=sysStpGroup, sysTmmStatConnectionMemoryErrors=sysTmmStatConnectionMemoryErrors, em3000=em3000, sysPvaStat=sysPvaStat, sysFwNatDynamicPoolStatGroup=sysFwNatDynamicPoolStatGroup, bigip6800=bigip6800, sysPhysicalDiskSlotId=sysPhysicalDiskSlotId, sysRtspStatNumRequests=sysRtspStatNumRequests, sysStatClientCurConns5m=sysStatClientCurConns5m, sysHostCpuIrq=sysHostCpuIrq, sysMultiHostOtherMemoryTotal=sysMultiHostOtherMemoryTotal, sysGlobalHostCpuIdle5s=sysGlobalHostCpuIdle5s, sysClientsslStatEdhDssKeyxchg=sysClientsslStatEdhDssKeyxchg, sysCmTrafficGroupStatusTrafficGroup=sysCmTrafficGroupStatusTrafficGroup, bigipi12800=bigipi12800, sysGlobalDiameterrouterStatTotDroppedUnexpectedAnswers=sysGlobalDiameterrouterStatTotDroppedUnexpectedAnswers, sysClientsslStatAggregateRenegotiationsRejected=sysClientsslStatAggregateRenegotiationsRejected, sysVlanxStatTable=sysVlanxStatTable, sysTrunkStpReset=sysTrunkStpReset, sysCertStatusObjectGroup=sysCertStatusObjectGroup, sysSelfIpNumber=sysSelfIpNumber, sysDot3StatCollisionFreq=sysDot3StatCollisionFreq, sysClientsslStatSha224DigestOffload=sysClientsslStatSha224DigestOffload, sysStpBridgeTreeStatLastTc=sysStpBridgeTreeStatLastTc, sysStatPvaClientPktsOut5s=sysStatPvaClientPktsOut5s, sysStreamStatResetStats=sysStreamStatResetStats, sysDnsStatToCache=sysDnsStatToCache, sysGlobalSipsessionStatNotAcceptableHere=sysGlobalSipsessionStatNotAcceptableHere, sysVlanIfcStatOutDiscards=sysVlanIfcStatOutDiscards, sysDnsStatToGtm=sysDnsStatToGtm, sysGlobalSiprouterStatTotFailedOutgoingConnections=sysGlobalSiprouterStatTotFailedOutgoingConnections, sysIfxStatHcOutMulticastPkts=sysIfxStatHcOutMulticastPkts, sysCpuName=sysCpuName, sysPvaStatServerBytesIn=sysPvaStatServerBytesIn, sysCertValidatorOcspStatEntry=sysCertValidatorOcspStatEntry, sysFecStatName=sysFecStatName, sysHostDiskTable=sysHostDiskTable, sysHttpStatV11Reqs=sysHttpStatV11Reqs, sysDnsStatTclSuspends=sysDnsStatTclSuspends, sysServersslStatCamelliaBulkOffload=sysServersslStatCamelliaBulkOffload, herculoni10800=herculoni10800, sysGlobalSiprouterStatTotFailedOutgoingStreams=sysGlobalSiprouterStatTotFailedOutgoingStreams, sysGlobalDiametersessionStatTotUserAuthorizationAnswers=sysGlobalDiametersessionStatTotUserAuthorizationAnswers, sysStatClientBytesIn5s=sysStatClientBytesIn5s, sysDnsStatFastDnsRespBvers=sysDnsStatFastDnsRespBvers, sysPacketFilterStatHits=sysPacketFilterStatHits, sysModules=sysModules, sysStpGlobalsRevision=sysStpGlobalsRevision, sysBladeTempSlot=sysBladeTempSlot, sysDot3StatAlignmentErrors=sysDot3StatAlignmentErrors, sysStpGlobals2Identifier=sysStpGlobals2Identifier, sysTrunkStatBytesOut=sysTrunkStatBytesOut, sysGlobalTmmStatMaxConnVirtualPathDeny=sysGlobalTmmStatMaxConnVirtualPathDeny, sysGlobalHostCpuStolen5s=sysGlobalHostCpuStolen5s, sysAttrFailoverUnitMask=sysAttrFailoverUnitMask, sysStatServerPktsIn=sysStatServerPktsIn, sysFecStatInRawBytes=sysFecStatInRawBytes, sysCertValidatorOcspRouteDomain=sysCertValidatorOcspRouteDomain, sysHostMemoryTotalKb=sysHostMemoryTotalKb, sysVCMP=sysVCMP, sysClientsslStatShaDigest=sysClientsslStatShaDigest, sysStpInterfaceMbrName=sysStpInterfaceMbrName, sysSubMemoryTable=sysSubMemoryTable, sysAttrArpRetries=sysAttrArpRetries, sysL2ForwardStatIftype=sysL2ForwardStatIftype, sysProcPidStatStime=sysProcPidStatStime, sysGlobalHostCpuUsageRatio5s=sysGlobalHostCpuUsageRatio5s, sysStatClientPktsIn5s=sysStatClientPktsIn5s, sysDnsStatDns64Rewrites=sysDnsStatDns64Rewrites, sysSwitchDdmStatRxDbmPwr4=sysSwitchDdmStatRxDbmPwr4, sysFwNatDynamicPoolStatPbaZombiePortBlockConnsKilled=sysFwNatDynamicPoolStatPbaZombiePortBlockConnsKilled, sysVcmpAllowedSlotsIndex=sysVcmpAllowedSlotsIndex, sysGlobalDiametersessionStatTotRetransmissionErrorCode=sysGlobalDiametersessionStatTotRetransmissionErrorCode, sysStpPriority=sysStpPriority, sysSwStatusSlotId=sysSwStatusSlotId, sysHostDiskGroup=sysHostDiskGroup, sysVcmpStatBytesIn=sysVcmpStatBytesIn, sysVcmpMacPoolSize=sysVcmpMacPoolSize, sysVlanGroupMbrNumber=sysVlanGroupMbrNumber, sysCertValidatorOcspStatResponseSignatureRequiredErrors=sysCertValidatorOcspStatResponseSignatureRequiredErrors, sysLogicalDiskMembersSerialNumber=sysLogicalDiskMembersSerialNumber, sysVlanGroupEntry=sysVlanGroupEntry, sysServersslStatDesBulkOffload=sysServersslStatDesBulkOffload, bigip10255=bigip10255, sysSwImageLastModified=sysSwImageLastModified, sysHttpStatV9Reqs=sysHttpStatV9Reqs, sysMultiHostCpuUsageRatio5m=sysMultiHostCpuUsageRatio5m, sysProcPidStatTable=sysProcPidStatTable, sysLldpNeighborsTableMgmtAddr=sysLldpNeighborsTableMgmtAddr, sysFwNatDynamicPoolStatPbaPortBlockDeallocations=sysFwNatDynamicPoolStatPbaPortBlockDeallocations, sysTmmPagesStatNumber=sysTmmPagesStatNumber, sysPacketFilterMacEntry=sysPacketFilterMacEntry, sysFecStatProfile=sysFecStatProfile, sysServersslStatTotNativeConns=sysServersslStatTotNativeConns, sysPvaStatCurAssistConns=sysPvaStatCurAssistConns, sysTrunkCfgMemberTrunkName=sysTrunkCfgMemberTrunkName, sysGlobalHostCpuUser5m=sysGlobalHostCpuUser5m, sysPacketFilterTable=sysPacketFilterTable, sysHttpStatRamcacheMissesAll=sysHttpStatRamcacheMissesAll, sysServersslStatDtlsTxPushbacks=sysServersslStatDtlsTxPushbacks, sysPacketFilterStatRname=sysPacketFilterStatRname, sysGlobalHostCpuSystem5s=sysGlobalHostCpuSystem5s, sysJoinCertOrderManagerDownloadCert=sysJoinCertOrderManagerDownloadCert, sysTrunkTable=sysTrunkTable, sysVcmpStatVcmpId=sysVcmpStatVcmpId, sysLogicalDisk=sysLogicalDisk, sysStatServerMaxConns=sysStatServerMaxConns, sysVcmpAssignedSlotsIndex=sysVcmpAssignedSlotsIndex, sysGlobalHostCpuUsageRatio1m=sysGlobalHostCpuUsageRatio1m, sysTcpStatRxooseg=sysTcpStatRxooseg, sysGlobalSipsessionStatServiceUnavailable=sysGlobalSipsessionStatServiceUnavailable, sysClientsslStatPeercertNone=sysClientsslStatPeercertNone, sysUdpStatAcceptfails=sysUdpStatAcceptfails, sysHttpStatCssPrecompressBytes=sysHttpStatCssPrecompressBytes, sysFecStatOutRdndPackets=sysFecStatOutRdndPackets, sysStpInterfaceMbrGroup=sysStpInterfaceMbrGroup, sysLsnPoolStatTotalEndPoints=sysLsnPoolStatTotalEndPoints, sysVcmpStatCoreNames=sysVcmpStatCoreNames, sysClientsslStatEncryptedBytesOut=sysClientsslStatEncryptedBytesOut, sysModuleAllocationProvisionLevel=sysModuleAllocationProvisionLevel, sysStatMemoryTotal=sysStatMemoryTotal, sysGlobalTmmStatTmSleepCycles=sysGlobalTmmStatTmSleepCycles, sysDnsStatDnsExpressReqs=sysDnsStatDnsExpressReqs, sysUdpStatGroup=sysUdpStatGroup, sysPacketFilterAddrTable=sysPacketFilterAddrTable, sysServersslStatTlsv11=sysServersslStatTlsv11, sysTcpStatRxbadseg=sysTcpStatRxbadseg, sysDot1dbaseStatPortTable=sysDot1dbaseStatPortTable, sysRouteStaticEntryDestType=sysRouteStaticEntryDestType, sysGlobalHostCpuUser1m=sysGlobalHostCpuUser1m, sysGlobalSiprouterStatCurOutgoingStreams=sysGlobalSiprouterStatCurOutgoingStreams, sysCertValidatorOcspSignHash=sysCertValidatorOcspSignHash, sysDnsServerStatXfrNotifies=sysDnsServerStatXfrNotifies, sysIpStatErrMcastRouteLookupTimeout=sysIpStatErrMcastRouteLookupTimeout, sysTrunkCfgMemberGroup=sysTrunkCfgMemberGroup, sysClientsslStatEcdhRsaKeyxchg=sysClientsslStatEcdhRsaKeyxchg, sysSystemUptimeInSec=sysSystemUptimeInSec, sysUnicastAddrName=sysUnicastAddrName, sysStatClientPktsOut=sysStatClientPktsOut, sysRouteStaticEntryTable=sysRouteStaticEntryTable, sysPvaStatHardSyncookieDet=sysPvaStatHardSyncookieDet, sysAdminIpTable=sysAdminIpTable, sysFwNatDynamicPoolStatPcpErrorsNotAuthorized=sysFwNatDynamicPoolStatPcpErrorsNotAuthorized, sysGlobalDiametersessionStatCurTimeoutRatio=sysGlobalDiametersessionStatCurTimeoutRatio, bigipi11600=bigipi11600, sysLldpNeighborsTablePortId=sysLldpNeighborsTablePortId, sysServersslStatDhGroupP384Offload=sysServersslStatDhGroupP384Offload, sysSysDeviceVersion=sysSysDeviceVersion, sysGlobalSipsessionStatServerInternalError500Sent=sysGlobalSipsessionStatServerInternalError500Sent, sysVlanMemberNumber=sysVlanMemberNumber, sysStpInterfaceTreeStatNumber=sysStpInterfaceTreeStatNumber, sysClusterMbrEnabled=sysClusterMbrEnabled, sysL2ForwardGroup=sysL2ForwardGroup, sysFecStatGroup=sysFecStatGroup, sysVlanGroupBridgeMulticast=sysVlanGroupBridgeMulticast, sysProcPidStatKstkEip=sysProcPidStatKstkEip, sysIpsecSpdStat=sysIpsecSpdStat, sysGlobalTftpStatReadRequests=sysGlobalTftpStatReadRequests, sysClientsslStatNonHwAcceleratedConns=sysClientsslStatNonHwAcceleratedConns, sysProcPidStatTpgid=sysProcPidStatTpgid, sysGlobalDiameterrouterStatTotMessagesRouted=sysGlobalDiameterrouterStatTotMessagesRouted, sysIp6StatTxFrag=sysIp6StatTxFrag, sysFecStatInRdndBytes=sysFecStatInRdndBytes, sysGlobalSctpStat=sysGlobalSctpStat, bigipVprB2150=bigipVprB2150, sysMultiHostUsedKb=sysMultiHostUsedKb, sysDot3StatRateControlStatus=sysDot3StatRateControlStatus, sysDot3Stat=sysDot3Stat, sysCertStatusObjectTable=sysCertStatusObjectTable, sysVlanFailsafeEnabled=sysVlanFailsafeEnabled, sysWebAccelerationStatCacheHits=sysWebAccelerationStatCacheHits, sysCpuSensorName=sysCpuSensorName, bigip7000S=bigip7000S, sysStatPvaClientPktsIn5m=sysStatPvaClientPktsIn5m, sysHttpStatImagePostcompressBytes=sysHttpStatImagePostcompressBytes, sysPvaStatTable=sysPvaStatTable, sysSysDeviceInactiveModulesName=sysSysDeviceInactiveModulesName, sysServersslStatSessCacheHits=sysServersslStatSessCacheHits, sysMptcpStatFastcloseTx=sysMptcpStatFastcloseTx, sysClientsslStatFatalAlerts=sysClientsslStatFatalAlerts, sysVlanGroupNumber=sysVlanGroupNumber, sysDot3StatIntmacRxErrors=sysDot3StatIntmacRxErrors, sysFwNatStaticDestinationTranslationPoolStatGroup=sysFwNatStaticDestinationTranslationPoolStatGroup, sysProcPidStatWchan=sysProcPidStatWchan, sysIntfMediaMediaOption=sysIntfMediaMediaOption, sysL2ForwardStatGroup=sysL2ForwardStatGroup, sysCertValidatorOcspStatResponseValidationParseErrors=sysCertValidatorOcspStatResponseValidationParseErrors, sysServersslStatDesBulk=sysServersslStatDesBulk, sysDnsStatMalicious=sysDnsStatMalicious, sysL2=sysL2, sysSysDeviceActiveModulesName=sysSysDeviceActiveModulesName, sysAuthStatSuccessResults=sysAuthStatSuccessResults, sysRouteStaticEntryGateway=sysRouteStaticEntryGateway, sysDnsStatNaptrReqs=sysDnsStatNaptrReqs, sysServersslStatGroup=sysServersslStatGroup, sysVlanIfcStatInDiscards=sysVlanIfcStatInDiscards, sysFwNatDynamicPoolFailureStatResetStats=sysFwNatDynamicPoolFailureStatResetStats, sysSwitchDdmStatRxPwr2=sysSwitchDdmStatRxPwr2, sysClusterMbrCluster=sysClusterMbrCluster, sysJoinCertValidator=sysJoinCertValidator, sysStatPvaClientMaxConns5s=sysStatPvaClientMaxConns5s, bigip10000=bigip10000, sysLsnPoolStatTotalPortBlockDeallocations=sysLsnPoolStatTotalPortBlockDeallocations, sysLogicalDiskEntry=sysLogicalDiskEntry, sysTmmStatSwSyncookies=sysTmmStatSwSyncookies, sysAttrModeMaint=sysAttrModeMaint, sysGeneralHwName=sysGeneralHwName, sysServersslStatEcdhRsaKeyxchg=sysServersslStatEcdhRsaKeyxchg, sysGlobalHostOtherMemoryUsed=sysGlobalHostOtherMemoryUsed, sysGlobalIpsecalgStatTunnelTeardowns=sysGlobalIpsecalgStatTunnelTeardowns, sysServersslStatEdhDssKeyxchg=sysServersslStatEdhDssKeyxchg, sysHttpStatV20Reqs=sysHttpStatV20Reqs, sysSysDeviceMulticastAddrType=sysSysDeviceMulticastAddrType, sysAuthStatMaxSessions=sysAuthStatMaxSessions, sysCertOrderManagerStatOtherErrors=sysCertOrderManagerStatOtherErrors, sysLsnPoolStatTotalZombiePortBlocksDeleted=sysLsnPoolStatTotalZombiePortBlocksDeleted, sysTrunkEntry=sysTrunkEntry, sysGlobalDiameterrouterStatCurIncomingStreams=sysGlobalDiameterrouterStatCurIncomingStreams, sysPlaneStatCpuRatio5sec=sysPlaneStatCpuRatio5sec, sysTmmStatServerBytesIn=sysTmmStatServerBytesIn, sysPacketFilterStatNumber=sysPacketFilterStatNumber, sysSelfPortDefPort=sysSelfPortDefPort, sysHttpCompressionStatHtmlPostcompressBytes=sysHttpCompressionStatHtmlPostcompressBytes, sysSwHotfixEntry=sysSwHotfixEntry, sysPlaneStat=sysPlaneStat, sysLldpNeighborsTableMfs=sysLldpNeighborsTableMfs, sysHttpCompressionStatVideoPostcompressBytes=sysHttpCompressionStatVideoPostcompressBytes, sysMptcpStatJoinFlow=sysMptcpStatJoinFlow, sysFastHttpStatClientRxBad=sysFastHttpStatClientRxBad, sysIpStatTxFrag=sysIpStatTxFrag, sysAttrPacketFilterEstablished=sysAttrPacketFilterEstablished, sysRtspStatNumInterleavedData=sysRtspStatNumInterleavedData, sysSelfPortDefNumber=sysSelfPortDefNumber, bigip7255=bigip7255, sysSelfIpTable=sysSelfIpTable, sysIfxStatOutBroadcastPkts=sysIfxStatOutBroadcastPkts, sysTmmStatClientEvictedConns=sysTmmStatClientEvictedConns, sysAuthStatResetStats=sysAuthStatResetStats, sysPhysicalDiskName=sysPhysicalDiskName, sysVcmpSlots=sysVcmpSlots, sysDnsStatRcodeBadvers=sysDnsStatRcodeBadvers, sysDot3StatDeferredTx=sysDot3StatDeferredTx, sysClientsslStatFullyHwAcceleratedConns=sysClientsslStatFullyHwAcceleratedConns, sysDot1dbaseStatPortIndex=sysDot1dbaseStatPortIndex, sysStatClientPktsIn5m=sysStatClientPktsIn5m, sysCertOrderManagerStatGroup=sysCertOrderManagerStatGroup, sysSelfPortDefTable=sysSelfPortDefTable, sysIntfMediaSfpType=sysIntfMediaSfpType, sysStpInterfaceMbrPriority=sysStpInterfaceMbrPriority, bigipVcmpGuest=bigipVcmpGuest)
mibBuilder.exportSymbols("F5-BIGIP-SYSTEM-MIB", sysGlobalDiameterrouterStatTotPassthruBytes=sysGlobalDiameterrouterStatTotPassthruBytes, sysTrunkCfgMemberEntry=sysTrunkCfgMemberEntry, sysIfxStatAlias=sysIfxStatAlias, sysSysDeviceEdition=sysSysDeviceEdition, sysClientsslStatTotalHandshakesOffload=sysClientsslStatTotalHandshakesOffload, sysCertValidatorOcspStatGroup=sysCertValidatorOcspStatGroup, sysFastL4StatTxerrors=sysFastL4StatTxerrors, sysGlobalHttpCompressionStat=sysGlobalHttpCompressionStat, sysGlobalTmmStatHwSyncookieAccepts=sysGlobalTmmStatHwSyncookieAccepts, sysSwHotfixTable=sysSwHotfixTable, sysFwNatStaticDestinationTranslationPoolStatTransReqFails=sysFwNatStaticDestinationTranslationPoolStatTransReqFails, sysVcmpStatUptime=sysVcmpStatUptime, sysGlobalIcmpStat=sysGlobalIcmpStat, sysL2ForwardEntry=sysL2ForwardEntry, sysGlobalSipsessionStatSuccessful=sysGlobalSipsessionStatSuccessful, sysTransmission=sysTransmission, sysTmmStatGroup=sysTmmStatGroup, sysStatCpuCount=sysStatCpuCount, sysTmmStatSwSyncookieAccepts=sysTmmStatSwSyncookieAccepts, sysSwitchDdmStatTable=sysSwitchDdmStatTable, sysCertStatusObjectEntry=sysCertStatusObjectEntry, sysL2ForwardStatNumber=sysL2ForwardStatNumber, sysHostCpuIowait=sysHostCpuIowait, sysGlobalTmmStatMemoryTotalKb=sysGlobalTmmStatMemoryTotalKb, sysGlobalDiameterrouterStatCurOutgoingConnections=sysGlobalDiameterrouterStatCurOutgoingConnections, bigipi15800_N=bigipi15800_N, sysVlanxStatNumber=sysVlanxStatNumber, sysPlaneStatNumber=sysPlaneStatNumber, sysCertOrderManagerAdditionalHeaders=sysCertOrderManagerAdditionalHeaders, sysGlobalHostCpuUser=sysGlobalHostCpuUser, sysGlobalTmmStatOutgoingPacketErrors=sysGlobalTmmStatOutgoingPacketErrors, sysLsnPoolStatTotalClientsReachedLimit=sysLsnPoolStatTotalClientsReachedLimit, sysPvaStatPvaId=sysPvaStatPvaId, sysClientsslStatDhGroupP384Offload=sysClientsslStatDhGroupP384Offload, sysSctpStatRxbadcookie=sysSctpStatRxbadcookie, sysModuleAllocationNumber=sysModuleAllocationNumber, sysProductEdition=sysProductEdition, bigip8900=bigip8900, sysSwVolumeSlotId=sysSwVolumeSlotId, sysGlobalDiametersessionStatAvePeerDelay=sysGlobalDiametersessionStatAvePeerDelay, sysPvaStatServerBytesOut=sysPvaStatServerBytesOut, sysVcmpStatCpuUsage1min=sysVcmpStatCpuUsage1min, sysAuthStatCurSessions=sysAuthStatCurSessions, sysUdpStatRxbadsum=sysUdpStatRxbadsum, sysCmSyncStatusSummary=sysCmSyncStatusSummary, sysServersslStatOcspServersslCachedResp=sysServersslStatOcspServersslCachedResp, sysStatPvaClientPktsIn5s=sysStatPvaClientPktsIn5s, sysClientsslStatDhGroupP256=sysClientsslStatDhGroupP256, sysFwNatDynamicPoolStatLsnHairpinConnectionRequests=sysFwNatDynamicPoolStatLsnHairpinConnectionRequests, sysStatPvaServerPktsIn1m=sysStatPvaServerPktsIn1m, sysIp6StatErrCksum=sysIp6StatErrCksum, sysProcPidStatCnswap=sysProcPidStatCnswap, sysRouteStaticEntryNetmaskType=sysRouteStaticEntryNetmaskType, sysLsnPoolStatActiveZombiePortBlocks=sysLsnPoolStatActiveZombiePortBlocks, sysGlobalIpsecalgStat=sysGlobalIpsecalgStat, sysPlaneStatTable=sysPlaneStatTable, sysVlanIfcStatHcInBroadcastPkts=sysVlanIfcStatHcInBroadcastPkts, sysMultiHostCpuHostId=sysMultiHostCpuHostId, sysFwNatDynamicPoolStatPbaZombiePortBlocksCreated=sysFwNatDynamicPoolStatPbaZombiePortBlocksCreated, sysPvaStatTotAssistConns=sysPvaStatTotAssistConns, wj400=wj400, sysClientsslStatBadRecords=sysClientsslStatBadRecords, sysSelfPortNumber=sysSelfPortNumber, sysIpStatMcastTx=sysIpStatMcastTx, sysFwNatDynamicPoolFailureStatNumber=sysFwNatDynamicPoolFailureStatNumber, sysGlobalSiprouterStatTotMessagesUnroutable=sysGlobalSiprouterStatTotMessagesUnroutable, sysLldpNeighborsTableSysName=sysLldpNeighborsTableSysName, sysWebAccelerationStatCacheMisses=sysWebAccelerationStatCacheMisses, sysSelfIpGroup=sysSelfIpGroup, sysRouteMgmtEntryDest=sysRouteMgmtEntryDest, sysStatCurrPvaAssistConn=sysStatCurrPvaAssistConn, sysVcmpMgmtNetmaskType=sysVcmpMgmtNetmaskType, bigip8950S=bigip8950S, sysMultiHostCpuUser5m=sysMultiHostCpuUser5m, sysModuleAllocationEntry=sysModuleAllocationEntry, sysStatClientBytesOut5m=sysStatClientBytesOut5m, sysVlanxStatCounterDiscontinuityTime=sysVlanxStatCounterDiscontinuityTime, sysGlobalDiametersessionStatTotRetransmissionIrule=sysGlobalDiametersessionStatTotRetransmissionIrule, sysProductVersion=sysProductVersion, sysGlobalSiprouterStatTotSuccessfulCalls=sysGlobalSiprouterStatTotSuccessfulCalls, sysSelfPort=sysSelfPort, sysDnsStatNsReqs=sysDnsStatNsReqs, bigip7055=bigip7055, sysIp6StatTxFragDropped=sysIp6StatTxFragDropped, sysHttpStatCssPostcompressBytes=sysHttpStatCssPostcompressBytes, sysSelfPortEntry=sysSelfPortEntry, sysInterfaceMediaSfp=sysInterfaceMediaSfp, sysStatPvaServerCurConns1m=sysStatPvaServerCurConns1m, bigip10050=bigip10050, sysGeneralHwNumber=sysGeneralHwNumber, sysProcPidStatStartStack=sysProcPidStatStartStack, sysStatPvaClientBytesOut5m=sysStatPvaClientBytesOut5m, sysTmmStatCpu=sysTmmStatCpu, bigipi15600=bigipi15600, sysStpRegionalRootAddr=sysStpRegionalRootAddr, sysServersslStatC3dConns=sysServersslStatC3dConns, yki2800=yki2800, bigip10200F=bigip10200F, sysInterfaceSfpMedia=sysInterfaceSfpMedia, sysStatPvaServerCurConns=sysStatPvaServerCurConns, sysHostMemoryGroup=sysHostMemoryGroup, sysSctpStatGroup=sysSctpStatGroup, sysL2ForwardIfname=sysL2ForwardIfname, sysServersslStatRc4Bulk=sysServersslStatRc4Bulk, sysClientsslStatSessCacheInvalidations=sysClientsslStatSessCacheInvalidations, sysSysDevice=sysSysDevice, bigip3600=bigip3600, sysPacketFilterStatResetStats=sysPacketFilterStatResetStats, sysTmmStatTmSleepCycles=sysTmmStatTmSleepCycles, sysIfxStatInMulticastPkts=sysIfxStatInMulticastPkts, sysStatClientBytesIn=sysStatClientBytesIn, sysAdminIpEntry=sysAdminIpEntry, bigip4200=bigip4200, sysDnsServerStatXfrQueries=sysDnsServerStatXfrQueries, sysSctpStatUnconfirmedAddresses=sysSctpStatUnconfirmedAddresses, sysMultiHostCpuId=sysMultiHostCpuId, sysIpsecSpdStatSourceAddress=sysIpsecSpdStatSourceAddress, sysVirtualDiskState=sysVirtualDiskState, sysFwNatDynamicPoolFailureStatFailureCause=sysFwNatDynamicPoolFailureStatFailureCause, sysCertOrderManagerValidityDays=sysCertOrderManagerValidityDays, sysVcmpMgmtNetwork=sysVcmpMgmtNetwork, sysProcPidStatCstime=sysProcPidStatCstime, sysPacketFilterMacGroup=sysPacketFilterMacGroup, sysHttpStatJsPrecompressBytes=sysHttpStatJsPrecompressBytes, sysStpInterfaceStatTable=sysStpInterfaceStatTable, sysVcmpAssignedSlotsTable=sysVcmpAssignedSlotsTable, sysXmlStatGroup=sysXmlStatGroup, sysDnsStatDnsExpressNotifies=sysDnsStatDnsExpressNotifies, sysFwNatStaticDestinationTranslationPoolStatErrAddrTrans=sysFwNatStaticDestinationTranslationPoolStatErrAddrTrans, sysInterfaceStpReset=sysInterfaceStpReset, sysSysDeviceTimelimitedModulesEntry=sysSysDeviceTimelimitedModulesEntry, sysSysDeviceMgmtIp=sysSysDeviceMgmtIp, bigipi4600=bigipi4600, sysGlobalHostMemTotalKb=sysGlobalHostMemTotalKb, sysVlanIfcStatHcInUcastPkts=sysVlanIfcStatHcInUcastPkts, sysStpTable=sysStpTable, sysClusterMbrAvailabilityState=sysClusterMbrAvailabilityState, sysStatLicenseDeny=sysStatLicenseDeny, sysGlobalSiprouterStatTotMessagesOut=sysGlobalSiprouterStatTotMessagesOut, sysPacketFilterVlanNumber=sysPacketFilterVlanNumber, sysPacketFilterMac=sysPacketFilterMac, sysStatClientTotConns=sysStatClientTotConns, sysServersslStatMidstreamRenegotiations=sysServersslStatMidstreamRenegotiations, sysChassisPowerSupplyTable=sysChassisPowerSupplyTable, sysCertOrderManagerStatNumber=sysCertOrderManagerStatNumber, sysSwitchDdmStatName=sysSwitchDdmStatName, sysRouteMgmtEntryNumber=sysRouteMgmtEntryNumber, sysVlanMemberGroup=sysVlanMemberGroup, sysGlobalDiametersessionStatCurErrorAnswerRatio=sysGlobalDiametersessionStatCurErrorAnswerRatio, sysSysDeviceActiveModulesGroup=sysSysDeviceActiveModulesGroup, sysClientsslStatAdhKeyxchg=sysClientsslStatAdhKeyxchg, sysClusterStatusReason=sysClusterStatusReason, sysServersslStatTotCompatConns=sysServersslStatTotCompatConns, sysGlobalTmmStatConnectionMemoryErrors=sysGlobalTmmStatConnectionMemoryErrors, sysCertValidatorOcspDnsResolver=sysCertValidatorOcspDnsResolver, sysVlanGroupName=sysVlanGroupName, sysStpGlobals2Name=sysStpGlobals2Name, sysServersslStatChacha20Poly1305Bulk=sysServersslStatChacha20Poly1305Bulk, sysVlanxStatHcInOctets=sysVlanxStatHcInOctets, sysVcmpBaseMac=sysVcmpBaseMac, sysGlobalFtpStatGroup=sysGlobalFtpStatGroup, sysDnsStatSrvReqs=sysDnsStatSrvReqs, sysGlobalDnsStat=sysGlobalDnsStat, sysVlanIfcStatPvaOutOctets=sysVlanIfcStatPvaOutOctets, sysDot3StatFcsErrors=sysDot3StatFcsErrors, sysBladeVoltageVoltage=sysBladeVoltageVoltage, sysCmSyncStatusGroup=sysCmSyncStatusGroup, sysMultiHostCpuUser5s=sysMultiHostCpuUser5s, sysUnicastAddrEntry=sysUnicastAddrEntry, sysTcpStatFinWait=sysTcpStatFinWait, sysSysDeviceOptionalModules=sysSysDeviceOptionalModules, sysCertValidatorOcspStatConnectionHttpErrors=sysCertValidatorOcspStatConnectionHttpErrors, sysGlobalTmmStatTmTotalCycles=sysGlobalTmmStatTmTotalCycles, sysHttpStatV10Reqs=sysHttpStatV10Reqs, sysCmSyncStatusStatus=sysCmSyncStatusStatus, sysRouteMgmtEntryGroup=sysRouteMgmtEntryGroup, sysStatClientBytesOut1m=sysStatClientBytesOut1m, sysPhysicalDiskNumber=sysPhysicalDiskNumber, sysTmmStatServerBytesOut=sysTmmStatServerBytesOut, sysGeneralChassisSerialNum=sysGeneralChassisSerialNum, sysPacketFilterMacIndex=sysPacketFilterMacIndex, sysClientsslStatRsaKeySize2048=sysClientsslStatRsaKeySize2048, sysServersslStatConnectionMirrorHaFailure=sysServersslStatConnectionMirrorHaFailure, sysSysDeviceChassisId=sysSysDeviceChassisId, sysChassisTemp=sysChassisTemp, sysDot1dbaseStatNumPorts=sysDot1dbaseStatNumPorts, sysL2ForwardVlanName=sysL2ForwardVlanName, sysBladeVoltageIndex=sysBladeVoltageIndex, sysIfIndex=sysIfIndex, sysGlobalHostOtherMemUsedKb=sysGlobalHostOtherMemUsedKb, sysPacketFilterAddrEntry=sysPacketFilterAddrEntry, sysClusterFloatMgmtNetmask=sysClusterFloatMgmtNetmask, sysProxyExclusion=sysProxyExclusion, sysSwHotfixChksum=sysSwHotfixChksum, sysSelfPortAddrType=sysSelfPortAddrType, sysPcpStatPcpErrorsOther=sysPcpStatPcpErrorsOther, sysLldpNeighborsTableMau=sysLldpNeighborsTableMau, sysHttpCompressionStatGroup=sysHttpCompressionStatGroup, sysVlanMacMasquerade=sysVlanMacMasquerade, sysGlobalDiameterrouterStatTotFailedOutgoingConnections=sysGlobalDiameterrouterStatTotFailedOutgoingConnections, sysVlanDataGroup=sysVlanDataGroup, sysRouteMgmtEntryName=sysRouteMgmtEntryName, sysGlobalSipsessionStatRequestEntityTooLarge413Sent=sysGlobalSipsessionStatRequestEntityTooLarge413Sent, sysStpInterfaceTreeStatDesigCost=sysStpInterfaceTreeStatDesigCost, sysCertificateFileObjectName=sysCertificateFileObjectName, sysClientsslStatDhGroupX25519=sysClientsslStatDhGroupX25519, sysServersslStatSha256DigestOffload=sysServersslStatSha256DigestOffload, sysWebAccelerationStatRemoteHitBytes=sysWebAccelerationStatRemoteHitBytes, sysLogicalDiskMedia=sysLogicalDiskMedia, sysMptcpStatPrioRx=sysMptcpStatPrioRx, sysDnsStatToDns=sysDnsStatToDns, sysVlanGroup=sysVlanGroup, sysInterfaceFlowCtrlReq=sysInterfaceFlowCtrlReq, sysMultiHostSwapUsedKb=sysMultiHostSwapUsedKb, sysSelfPortDefGroup=sysSelfPortDefGroup, sysProcPidStatGroup=sysProcPidStatGroup, sysSwitchDdmStatRxDbmPwr2=sysSwitchDdmStatRxDbmPwr2, sysSystemStat=sysSystemStat, sysStpInterfaceTreeStatGroup=sysStpInterfaceTreeStatGroup, bigipVprB2100=bigipVprB2100, sysIcmp6StatErrOpt=sysIcmp6StatErrOpt, sysLldpNeighborsTablePvid=sysLldpNeighborsTablePvid, sysClientsslStatInsecureHandshakeAccepts=sysClientsslStatInsecureHandshakeAccepts, sysCpuSensorIndex=sysCpuSensorIndex, sysChassisFanGroup=sysChassisFanGroup, sysCpuSensorEntry=sysCpuSensorEntry, sysMultiHostCpuIndex=sysMultiHostCpuIndex, sysRouteStaticEntryNumber=sysRouteStaticEntryNumber, sysPacketFilterAddrRname=sysPacketFilterAddrRname, sysMptcpStatFailRx=sysMptcpStatFailRx, sysDnsStatMxReqs=sysDnsStatMxReqs, sysFwNatDynamicPoolStatLsnTranslationRequestFailures=sysFwNatDynamicPoolStatLsnTranslationRequestFailures, sysStatClientCurConns5s=sysStatClientCurConns5s, sysHttpStatHtmlPostcompressBytes=sysHttpStatHtmlPostcompressBytes, sysL2ForwardNumber=sysL2ForwardNumber, sysRouteMgmtEntryNetmask=sysRouteMgmtEntryNetmask, sysDot1dbaseStatPortNumber=sysDot1dbaseStatPortNumber, sysFastHttpStatConnpoolReuses=sysFastHttpStatConnpoolReuses, sysVcmpStatDropsIn=sysVcmpStatDropsIn, sysAdminIpNetmaskType=sysAdminIpNetmaskType, sysSwStatusProduct=sysSwStatusProduct, bigip5050=bigip5050, sysSwitchDdmStatRxPwrHiWarn=sysSwitchDdmStatRxPwrHiWarn, sysSwitchDdmStatTxPwrHiAlarm=sysSwitchDdmStatTxPwrHiAlarm, sysClientsslStatMd5Digest=sysClientsslStatMd5Digest, sysClientsslStatMaxConns=sysClientsslStatMaxConns, sysVcmpStatMcastOut=sysVcmpStatMcastOut, sysVlanIfcStatEntry=sysVlanIfcStatEntry, sysClientsslStatEncryptedBytesIn=sysClientsslStatEncryptedBytesIn, sysProcPidStatPgrp=sysProcPidStatPgrp, sysStpInterfaceStatEntry=sysStpInterfaceStatEntry, sysSubMemoryResetStats=sysSubMemoryResetStats, sysL2ForwardMacAddr=sysL2ForwardMacAddr, sysJoinCertValidatorEntry=sysJoinCertValidatorEntry)
mibBuilder.exportSymbols("F5-BIGIP-SYSTEM-MIB", herculoni2800=herculoni2800, sysStpInterfaceMbrStateRequested=sysStpInterfaceMbrStateRequested, sysSwHotfixNumber=sysSwHotfixNumber, sysIntfMediaName=sysIntfMediaName, sysCpuSensorSlot=sysCpuSensorSlot, sysClientsslStatCamelliaBulkOffload=sysClientsslStatCamelliaBulkOffload, sysSubMemoryAllocated=sysSubMemoryAllocated, sysMultiHostCpuIowait5s=sysMultiHostCpuIowait5s, sysTmmStatTmTotalCycles=sysTmmStatTmTotalCycles, sysStpInterfaceTreeStatIndex=sysStpInterfaceTreeStatIndex, sysVcmpAllowedSlotsSlotId=sysVcmpAllowedSlotsSlotId, sysIpStatGroup=sysIpStatGroup, sysVcmpStatEntry=sysVcmpStatEntry, bigipi7820_DF=bigipi7820_DF, sysServersslStatSha384Digest=sysServersslStatSha384Digest, sysVlanxStatHcOutOctets=sysVlanxStatHcOutOctets, sysCpuSensorTemperature=sysCpuSensorTemperature, sysBladeTempNumber=sysBladeTempNumber, sysGlobalHostCpuIowait5s=sysGlobalHostCpuIowait5s, sysFwNatDynamicPoolStatPbaZombiePortBlocksDeleted=sysFwNatDynamicPoolStatPbaZombiePortBlocksDeleted, sysServersslStatRc2Bulk=sysServersslStatRc2Bulk, sysIfxStatHcOutUcastPkts=sysIfxStatHcOutUcastPkts, bigipi5820_DF=bigipi5820_DF, sysProfilePptpStatStartReplies=sysProfilePptpStatStartReplies, sysTrunkStatName=sysTrunkStatName, sysGlobalSipsessionStatTooManyHops=sysGlobalSipsessionStatTooManyHops, sysLogicalDiskMembersDevname=sysLogicalDiskMembersDevname, sysClusterMbrGroup=sysClusterMbrGroup, sysServersslStatPrematureDisconnects=sysServersslStatPrematureDisconnects, sysVlanMemberVmname=sysVlanMemberVmname, sysHttpStatResetStats=sysHttpStatResetStats, sysFwNatStaticSourceTranslationPoolStatBidirReqFails=sysFwNatStaticSourceTranslationPoolStatBidirReqFails, sysHostDiskNumber=sysHostDiskNumber, sysProcPidStatCmajFlt=sysProcPidStatCmajFlt, sysCertOrderManagerStatCanceled=sysCertOrderManagerStatCanceled, sysGlobalClientSslStat=sysGlobalClientSslStat, sysStatNoHandlerDeny=sysStatNoHandlerDeny, sysLsnPoolStatHairpinConnectionRequests=sysLsnPoolStatHairpinConnectionRequests, sysStatServerBytesIn5m=sysStatServerBytesIn5m, sysGlobalDiametersessionStatTotAnswerResultCodeReceived3xxx=sysGlobalDiametersessionStatTotAnswerResultCodeReceived3xxx, sysHostDiskTotalBlocks=sysHostDiskTotalBlocks, sysProcPidStatState=sysProcPidStatState, sysStatPvaServerTotConns5m=sysStatPvaServerTotConns5m, sysGlobalTmmStat=sysGlobalTmmStat, sysIiopStatNumErrors=sysIiopStatNumErrors, sysCmSyncStatusDetailsTable=sysCmSyncStatusDetailsTable, sysInterfaceStatPauseActive=sysInterfaceStatPauseActive, sysSysDeviceActiveModulesNumber=sysSysDeviceActiveModulesNumber, sysTcpStatGroup=sysTcpStatGroup, sysClientsslStatSecureHandshakes=sysClientsslStatSecureHandshakes, sysClientsslStatSessCacheOverflows=sysClientsslStatSessCacheOverflows, sysGlobalHostCpuStolen5m=sysGlobalHostCpuStolen5m, sysSwHotfixFilename=sysSwHotfixFilename, sysGlobalStat=sysGlobalStat, sysPacketFilterMacRname=sysPacketFilterMacRname, sysCmFailoverStatusColor=sysCmFailoverStatusColor, sysSctpStatExpires=sysSctpStatExpires, sysGlobalSipsessionStatOptions=sysGlobalSipsessionStatOptions, sysStatServerBytesIn1m=sysStatServerBytesIn1m, sysIfGroup=sysIfGroup, bigip10055=bigip10055, sysTmmStatMaxConnVirtualAddrDeny=sysTmmStatMaxConnVirtualAddrDeny, sysDnsStatRecursionAvailable=sysDnsStatRecursionAvailable, sysCertValidatorOcspConcurrentConnectionsLimit=sysCertValidatorOcspConcurrentConnectionsLimit, sysHttpStatPlainPostcompressBytes=sysHttpStatPlainPostcompressBytes, sysFwNatDynamicPoolStatLsnActiveEndPoints=sysFwNatDynamicPoolStatLsnActiveEndPoints, sysProxyExclusionIpType=sysProxyExclusionIpType, sysTmmStatVirtualServerNonSynDeny=sysTmmStatVirtualServerNonSynDeny, sysGlobalSipsessionStatGroup=sysGlobalSipsessionStatGroup, sysFastHttpStatV10Reqs=sysFastHttpStatV10Reqs, sysStatPvaClientMaxConns5m=sysStatPvaClientMaxConns5m, sysTmmStatClientSlowKilled=sysTmmStatClientSlowKilled, sysHttpCompressionStatCssPostcompressBytes=sysHttpCompressionStatCssPostcompressBytes, sysTrunkAggAddr=sysTrunkAggAddr, sysL2ForwardIftype=sysL2ForwardIftype, sysClientsslStatMaxNativeConns=sysClientsslStatMaxNativeConns, sysMultiHostCpuTable=sysMultiHostCpuTable, sysTrunkNumber=sysTrunkNumber, sysSwHotfixSlotId=sysSwHotfixSlotId, sysVlanFailsafeAction=sysVlanFailsafeAction, sysVcmpStatDiskUse=sysVcmpStatDiskUse, sysStatClientTotConns5s=sysStatClientTotConns5s, sysClientsslStatRecordsOut=sysClientsslStatRecordsOut, sysIfxStatHcInUcastPkts=sysIfxStatHcInUcastPkts, sysGlobalSipsessionStatServerInternalError=sysGlobalSipsessionStatServerInternalError, sysProfilePptpStatActiveCalls=sysProfilePptpStatActiveCalls, sysClientsslStatAesGcmBulk=sysClientsslStatAesGcmBulk, sysIcmpStatErrCksum=sysIcmpStatErrCksum, sysServersslStatFatalAlerts=sysServersslStatFatalAlerts, sysGlobalDiametersessionStatTotUserAuthorizationRequests=sysGlobalDiametersessionStatTotUserAuthorizationRequests, sysSwitchDdmStatRxDbmPwrLoWarn=sysSwitchDdmStatRxDbmPwrLoWarn, sysGlobalHostCpuStolen1m=sysGlobalHostCpuStolen1m, sysStatServerBytesOut5m=sysStatServerBytesOut5m, sysGlobalSiprouterStatCurrPendingCalls=sysGlobalSiprouterStatCurrPendingCalls, sysSysDeviceMgmtIpType=sysSysDeviceMgmtIpType, sysPlaneStatCpuRatio5min=sysPlaneStatCpuRatio5min, sysStreamStatGroup=sysStreamStatGroup, sysStatPvaServerBytesOut=sysStatPvaServerBytesOut, sysHostCpuSystem=sysHostCpuSystem, sysPacketFilterMacAddr=sysPacketFilterMacAddr, sysMptcpStatFailTx=sysMptcpStatFailTx, sysClientsslStatSniRejects=sysClientsslStatSniRejects, sysHttpStatRamcacheCount=sysHttpStatRamcacheCount, sysTmmStatTmUsageRatio1m=sysTmmStatTmUsageRatio1m, sysTcpStatSyncacheover=sysTcpStatSyncacheover, sysPacketFilters=sysPacketFilters, sysTrunkStatBytesIn=sysTrunkStatBytesIn, sysInterfaceStpAuto=sysInterfaceStpAuto, sysVcmpStatPktsOut=sysVcmpStatPktsOut, sysRouteStaticEntryMtu=sysRouteStaticEntryMtu, sysGlobalHostMemUsedKb=sysGlobalHostMemUsedKb, sysGlobalSiprouterStat=sysGlobalSiprouterStat, sysSwitchDdmStatTxPwr1=sysSwitchDdmStatTxPwr1, sysPvaStatHardSyncookieGen=sysPvaStatHardSyncookieGen, sysDot1dbaseStatGroup=sysDot1dbaseStatGroup, sysCmFailoverStatusDetailsIndex=sysCmFailoverStatusDetailsIndex, sysServersslStatOcspServersslCertStatusUnknown=sysServersslStatOcspServersslCertStatusUnknown, sysStatServerTotConns=sysStatServerTotConns, sysClientsslStatDhGroupP256Offload=sysClientsslStatDhGroupP256Offload, sysDot3StatResetStats=sysDot3StatResetStats, sysSysDeviceEntry=sysSysDeviceEntry, sysStatPvaClientCurConns=sysStatPvaClientCurConns, sysGlobalHostCpuNice5s=sysGlobalHostCpuNice5s, sysFwNatStaticDestinationTranslationPoolStatErrCfgMismtch=sysFwNatStaticDestinationTranslationPoolStatErrCfgMismtch, sysVcmpMgmtGw=sysVcmpMgmtGw, sysDnsStatZoneIxfr=sysDnsStatZoneIxfr, sysPacketFilterAddrGroup=sysPacketFilterAddrGroup, sysVlanStatVlanName=sysVlanStatVlanName, sysFwNatDynamicPoolStatPcpMapResponses=sysFwNatDynamicPoolStatPcpMapResponses, sysVcmpState=sysVcmpState, bigip2400=bigip2400, sysTrunkLacpEnabled=sysTrunkLacpEnabled, yki5600=yki5600, sysIpsecSpdStatDestinationNetmaskType=sysIpsecSpdStatDestinationNetmaskType, sysVlanIfcStatHcOutBroadcastPkts=sysVlanIfcStatHcOutBroadcastPkts, sysCertOrderManagerAuthorityName=sysCertOrderManagerAuthorityName, sysGlobalFtpStatFtpsSessions=sysGlobalFtpStatFtpsSessions, bigipi2600=bigipi2600, sysClusterName=sysClusterName, sysSysDeviceInactiveModulesIndex=sysSysDeviceInactiveModulesIndex, bigip10000F=bigip10000F, sysStatHardSyncookieGen=sysStatHardSyncookieGen, sysIfxStatTable=sysIfxStatTable, sysFwNatDynamicPoolStatLsnHairpinConnectionFailures=sysFwNatDynamicPoolStatLsnHairpinConnectionFailures, sysServersslStatDecryptedBytesOut=sysServersslStatDecryptedBytesOut, sysDot3StatName=sysDot3StatName, sysGlobalHostCpuStolen=sysGlobalHostCpuStolen, sysDot1dbaseStatPortDelayExceededDiscards=sysDot1dbaseStatPortDelayExceededDiscards, sysServersslStatRsaKeySize1024Offload=sysServersslStatRsaKeySize1024Offload, sysPlatformInfoGroup=sysPlatformInfoGroup, sysAttrFailoverSslhardware=sysAttrFailoverSslhardware, sysCertValidatorOcspStatTable=sysCertValidatorOcspStatTable, sysCmSyncStatusId=sysCmSyncStatusId, sysFastL4StatExpires=sysFastL4StatExpires, sysSctpStatClosing=sysSctpStatClosing, sysGlobalDiameterrouterStatTotMessagesReturned=sysGlobalDiameterrouterStatTotMessagesReturned, sysHttpStatV11Resp=sysHttpStatV11Resp, sysCertValidatorOcspStatCertificateStatusRevoked=sysCertValidatorOcspStatCertificateStatusRevoked, sysProcPidStatResident=sysProcPidStatResident, sysTrunkStatNumber=sysTrunkStatNumber, sysDnsStatGtmRewrites=sysDnsStatGtmRewrites, sysLogicalDiskGroup=sysLogicalDiskGroup, sysProcPidStatPriority=sysProcPidStatPriority, sysCertOrderManagerStatInternalErrors=sysCertOrderManagerStatInternalErrors, sysRouteStaticEntryType=sysRouteStaticEntryType, sysInterfacePhyMaster=sysInterfacePhyMaster, sysStpBridgeTreeStatInstanceId=sysStpBridgeTreeStatInstanceId, sysCmSyncStatusDetailsIndex=sysCmSyncStatusDetailsIndex, sysStpInterfaceMbrType=sysStpInterfaceMbrType, sysVlanMemberTagged=sysVlanMemberTagged, sysStpBridgeTreeStatTable=sysStpBridgeTreeStatTable, sysTrunkStatCollisions=sysTrunkStatCollisions, sysAdmin=sysAdmin, sysFecStatInRawLost=sysFecStatInRawLost, sysGeneral=sysGeneral, sysClusterMbrMgmtAddr=sysClusterMbrMgmtAddr, sysDot1dbaseStatPortGroup=sysDot1dbaseStatPortGroup, sysHostDiskPartition=sysHostDiskPartition, sysFecStatInRawPackets=sysFecStatInRawPackets, sysFwNatDynamicPoolStatLsnEndPointsHighValue=sysFwNatDynamicPoolStatLsnEndPointsHighValue, sysIfxStatHcInOctets=sysIfxStatHcInOctets, sysPacketFilterVlanRname=sysPacketFilterVlanRname, sysFwNatStaticDestinationTranslationPoolStatBidirReqs=sysFwNatStaticDestinationTranslationPoolStatBidirReqs, sysCertOrderManagerBaseUrl=sysCertOrderManagerBaseUrl, sysTcpStatFinWait2=sysTcpStatFinWait2, sysSctpStatAbandons=sysSctpStatAbandons, sysTrunkStatPktsOut=sysTrunkStatPktsOut, sysGlobalTmmStatSwSyncookies=sysGlobalTmmStatSwSyncookies, sysConnPoolStatReuses=sysConnPoolStatReuses, sysGlobalSiprouterStatCurIncomingConnections=sysGlobalSiprouterStatCurIncomingConnections, sysDot3StatIntmacTxErrors=sysDot3StatIntmacTxErrors, sysVcmpStatNumber=sysVcmpStatNumber, sysStpInterfaceTreeStatState=sysStpInterfaceTreeStatState, sysGlobalTmmStatLicenseDeny=sysGlobalTmmStatLicenseDeny, sysVlanxStatHcInUcastPkts=sysVlanxStatHcInUcastPkts, sysAttrPvaAcceleration=sysAttrPvaAcceleration, sysTmmStatMaxConnVirtualPathDeny=sysTmmStatMaxConnVirtualPathDeny, sysBladeTempTemperature=sysBladeTempTemperature, sysWebAccelerationStatCacheMissBytes=sysWebAccelerationStatCacheMissBytes, sysLsnPoolStatActivePersistenceMappings=sysLsnPoolStatActivePersistenceMappings, sysServersslStatAesGcmBulk=sysServersslStatAesGcmBulk, sysStpGlobals=sysStpGlobals, sysStatVirtualServerNonSynDeny=sysStatVirtualServerNonSynDeny, sysLsnPoolStatActivePortBlocks=sysLsnPoolStatActivePortBlocks, sysStatClientMaxConns1m=sysStatClientMaxConns1m, bigip7000=bigip7000, sysRouteMgmtEntryGateway=sysRouteMgmtEntryGateway, sysClientsslStatRsaKeyxchg=sysClientsslStatRsaKeyxchg, sysSwitchDdmStatTxAlarmLo=sysSwitchDdmStatTxAlarmLo, sysServersslStatOcspServersslStapledResp=sysServersslStatOcspServersslStapledResp, sysProcPidStatProcessor=sysProcPidStatProcessor, sysVlanNumber=sysVlanNumber, sysGlobalSipsessionStatInfo=sysGlobalSipsessionStatInfo, sysPcpStatPcpMapRequests=sysPcpStatPcpMapRequests, sysTmmStatNumber=sysTmmStatNumber, sysVlanMacTrue=sysVlanMacTrue, sysTmmStatTmIdleCycles=sysTmmStatTmIdleCycles, sysClusterMinUpMbrs=sysClusterMinUpMbrs, sysGlobalSipStatDrops=sysGlobalSipStatDrops, sysVcmpGroup=sysVcmpGroup, sysIp6StatReassembled=sysIp6StatReassembled, sysLsnPoolStatActiveTranslations=sysLsnPoolStatActiveTranslations, sysStatMemoryTotalKb=sysStatMemoryTotalKb, sysServersslStatConnectionMirrorHaCtxSent=sysServersslStatConnectionMirrorHaCtxSent, sysClientsslStatDtlsv1=sysClientsslStatDtlsv1, sysInterfaceNumber=sysInterfaceNumber, sysClientsslStatRsaKeySize1024=sysClientsslStatRsaKeySize1024, sysAttrFailoverForceActive=sysAttrFailoverForceActive, sysClientsslStatSslv3=sysClientsslStatSslv3, sysSystemGroup=sysSystemGroup, sysStatServerTotConns1m=sysStatServerTotConns1m, sysClusterMbrEntry=sysClusterMbrEntry, sysVcmpVlan=sysVcmpVlan, sysStpBridgeStatBridgeMaxAge=sysStpBridgeStatBridgeMaxAge, sysFastL4StatRxbadpkt=sysFastL4StatRxbadpkt, sysInterfaceMediaActiveDuplex=sysInterfaceMediaActiveDuplex, sysGlobalFtpStatPassthruTransitions=sysGlobalFtpStatPassthruTransitions, sysMptcpStatClose=sysMptcpStatClose, sysStpInterfaceStatPathCost=sysStpInterfaceStatPathCost, sysGlobalDiameterrouterStatTotOutgoingConnections=sysGlobalDiameterrouterStatTotOutgoingConnections, sysIpsecSpdStatTunnelState=sysIpsecSpdStatTunnelState, sysIPsec=sysIPsec, sysSwitchDdmStatTxPwrLoAlarm=sysSwitchDdmStatTxPwrLoAlarm, sysServersslStatCurCompatConns=sysServersslStatCurCompatConns, sysDnsStatFastDnsResponses=sysDnsStatFastDnsResponses, firepass1200=firepass1200, sysWebAccelerationStatCacheMissesAll=sysWebAccelerationStatCacheMissesAll, sysGlobalHostCpuIowait5m=sysGlobalHostCpuIowait5m, sysStatClientBytesIn1m=sysStatClientBytesIn1m, sysPacketFilterAddrIndex=sysPacketFilterAddrIndex, sysGlobalSipsessionStatPublish=sysGlobalSipsessionStatPublish, sysPvaStatClientTotConns=sysPvaStatClientTotConns, sysSysDeviceOptionalModulesTable=sysSysDeviceOptionalModulesTable, sysHostDiskBlockSize=sysHostDiskBlockSize)
mibBuilder.exportSymbols("F5-BIGIP-SYSTEM-MIB", sysPacketFilterGroup=sysPacketFilterGroup, sysIpStatRxFrag=sysIpStatRxFrag, sysClientsslStatGroup=sysClientsslStatGroup, sysCertValidatorOcspNumber=sysCertValidatorOcspNumber, bigipi11800_DS=bigipi11800_DS, bigipi15800=bigipi15800, sysHttpStatRamcacheHits=sysHttpStatRamcacheHits, sysPhysicalDiskArrayStatus=sysPhysicalDiskArrayStatus, sysPacketFilterVlanGroup=sysPacketFilterVlanGroup, sysGlobalDiametersessionStatTotAnswerResultCodeSent2xxx=sysGlobalDiametersessionStatTotAnswerResultCodeSent2xxx, sysTrunk=sysTrunk, sysHostCpuIndex=sysHostCpuIndex, sysHostDiskFreeNodes=sysHostDiskFreeNodes, sysFwNatDynamicPoolStatPbaActiveClientsReachedLimit=sysFwNatDynamicPoolStatPbaActiveClientsReachedLimit, sysClientsslStatSessCacheCurEntries=sysClientsslStatSessCacheCurEntries, sysGlobalIpStat=sysGlobalIpStat, sysPhysicalDiskIsArrayMember=sysPhysicalDiskIsArrayMember, sysVlanStatEntry=sysVlanStatEntry, sysSwVolumeActive=sysSwVolumeActive, sysJoinCertOrderManagerStatTable=sysJoinCertOrderManagerStatTable, sysFwNatStaticSourceTranslationPoolStatErrFlowCollis=sysFwNatStaticSourceTranslationPoolStatErrFlowCollis, sysFwNatStaticSourceTranslationPoolStatSubscrIdErrs=sysFwNatStaticSourceTranslationPoolStatSubscrIdErrs, bigip5250F=bigip5250F, sysGlobalSiprouterStatCurrActiveCalls=sysGlobalSiprouterStatCurrActiveCalls, sysFastHttpStatRespParseErrors=sysFastHttpStatRespParseErrors, sysTmmStatWlSyncookieRejects=sysTmmStatWlSyncookieRejects, sysFwNatStaticSourceTranslationPoolStatTransReqs=sysFwNatStaticSourceTranslationPoolStatTransReqs, sysServersslStatConnectionMirrorHaTimeout=sysServersslStatConnectionMirrorHaTimeout, sysIcmpStatErrLen=sysIcmpStatErrLen, sysVlanxStatVlanName=sysVlanxStatVlanName, sysIcmp6StatRx=sysIcmp6StatRx, sysProcPidStatSystemUsageRecent=sysProcPidStatSystemUsageRecent, sysHttpCompressionStatVideoPrecompressBytes=sysHttpCompressionStatVideoPrecompressBytes, sysL2ForwardStatIfname=sysL2ForwardStatIfname, sysLogicalDiskMembers=sysLogicalDiskMembers, sysStatClientMaxConns5s=sysStatClientMaxConns5s, sysCmSyncStatusColor=sysCmSyncStatusColor, sysClientsslStatDhGroupP384=sysClientsslStatDhGroupP384, sysDnsStatAReqs=sysDnsStatAReqs, sysServersslStatRenegotiationsRejected=sysServersslStatRenegotiationsRejected, sysCertValidatorOcspStatCertificateStatusGood=sysCertValidatorOcspStatCertificateStatusGood, sysFwNatStaticSourceTranslationPoolStatErrMemory=sysFwNatStaticSourceTranslationPoolStatErrMemory, sysIpStatErrMcastRpf=sysIpStatErrMcastRpf, sysClientsslStatPeercertValid=sysClientsslStatPeercertValid, sysWebAccelerationStatCacheMissBytesAll=sysWebAccelerationStatCacheMissBytesAll, sysVlanxStatHighSpeed=sysVlanxStatHighSpeed, sysVlanFailsafeTimeout=sysVlanFailsafeTimeout, sysGlobalSiprouterStatTotPayloadBytesOut=sysGlobalSiprouterStatTotPayloadBytesOut, sysStatServerPktsIn1m=sysStatServerPktsIn1m, bigipi7600=bigipi7600, sysFwNatDynamicPoolStatPcpAnnounceResponsesMulticast=sysFwNatDynamicPoolStatPcpAnnounceResponsesMulticast, sysProcPidStatRtPriority=sysProcPidStatRtPriority, sysLsnPoolFailureStatResetStats=sysLsnPoolFailureStatResetStats, sysGlobalHostCpuUser5s=sysGlobalHostCpuUser5s, sysJoinCertOrderManagerStat=sysJoinCertOrderManagerStat, sysGlobalSipsessionStatAck=sysGlobalSipsessionStatAck, sysInterfaceStatBytesIn=sysInterfaceStatBytesIn, sysGlobalIpsecalgStatGroup=sysGlobalIpsecalgStatGroup, sysPvaStatClientBytesIn=sysPvaStatClientBytesIn, bigip8900F=bigip8900F, sysClientsslStatSessCacheHits=sysClientsslStatSessCacheHits, sysStatPvaClientPktsOut1m=sysStatPvaClientPktsOut1m, sysHttpCompressionStatImagePrecompressBytes=sysHttpCompressionStatImagePrecompressBytes, sysVcmpCpuCoreNumber=sysVcmpCpuCoreNumber, sysAdminIpName=sysAdminIpName, sysFwNatDynamicPoolStatPcpPeerRequests=sysFwNatDynamicPoolStatPcpPeerRequests, sysSysDeviceMulticastAddr=sysSysDeviceMulticastAddr, bigip6900=bigip6900, sysVcmpStatMacPoolSize=sysVcmpStatMacPoolSize, sysCertOrderManagerGroup=sysCertOrderManagerGroup, sysSysDeviceMulticastInterface=sysSysDeviceMulticastInterface, sysVlanIfcStat=sysVlanIfcStat, sysIp6StatErrOpt=sysIp6StatErrOpt, sysUnicastAddrTable=sysUnicastAddrTable, sysGlobalRtspStat=sysGlobalRtspStat, sysSelfPortDefault=sysSelfPortDefault, sysDnsStatRcodeNxdomain=sysDnsStatRcodeNxdomain, sysGlobalTmmStatNoHandlerDeny=sysGlobalTmmStatNoHandlerDeny, sysDnsStatOpcodeOther=sysDnsStatOpcodeOther, sysModuleAllocationGroup=sysModuleAllocationGroup, sysIfxStatHcOutBroadcastPkts=sysIfxStatHcOutBroadcastPkts, sysMultiHostCpuUsageRatio1m=sysMultiHostCpuUsageRatio1m, sysServersslStatPeercertNone=sysServersslStatPeercertNone, sysClientsslStatSha256DigestOffload=sysClientsslStatSha256DigestOffload, sysHttpStatOctetPrecompressBytes=sysHttpStatOctetPrecompressBytes, sysServersslStatActiveHandshakeRejected=sysServersslStatActiveHandshakeRejected, sysL2ForwardStatMacAddr=sysL2ForwardStatMacAddr, sysSwHotfixProduct=sysSwHotfixProduct, sysGlobalSiprouterStatRejectedRegistrations=sysGlobalSiprouterStatRejectedRegistrations, sysGlobalSipsessionStatRequests=sysGlobalSipsessionStatRequests, sysClientsslStatCurNativeConns=sysClientsslStatCurNativeConns, sysPacketFilterNumber=sysPacketFilterNumber, sysClientsslStatSslv2=sysClientsslStatSslv2, sysIcmp6StatErrLen=sysIcmp6StatErrLen, sysProfilePptpStatStopRequests=sysProfilePptpStatStopRequests, sysPacketFilterStatEntry=sysPacketFilterStatEntry, sysGlobalHostCpuIrq5m=sysGlobalHostCpuIrq5m, sysModuleAllocation=sysModuleAllocation, swanWJ200=swanWJ200, sysHttpStatRespBucket16k=sysHttpStatRespBucket16k, sysVcmpAssignedSlotsNumber=sysVcmpAssignedSlotsNumber, sysFastHttpStatConnpoolExhausted=sysFastHttpStatConnpoolExhausted, sysServersslStatDhRsaKeyxchg=sysServersslStatDhRsaKeyxchg, sysWebAccelerationStatInterStripeSize=sysWebAccelerationStatInterStripeSize, sysAttrVlanFDBTimeout=sysAttrVlanFDBTimeout, sysGlobalDnsServerStat=sysGlobalDnsServerStat, firepass4100=firepass4100, sysAttrFailoverIsRedundant=sysAttrFailoverIsRedundant, sysClusterMbrHaState=sysClusterMbrHaState, sysPvaStatClientMaxConns=sysPvaStatClientMaxConns, sysStatMemoryUsed=sysStatMemoryUsed, bigip520=bigip520, sysTmmStatClientCurConns=sysTmmStatClientCurConns, sysGlobalIpsecalgStatPendingIkeConnectionLimitDrops=sysGlobalIpsecalgStatPendingIkeConnectionLimitDrops, sysTrunkStatGroup=sysTrunkStatGroup, sysSelfIpUnitId=sysSelfIpUnitId, sysGlobalTftpStatDiscardedRequests=sysGlobalTftpStatDiscardedRequests, sysHttpStatRamcacheSize=sysHttpStatRamcacheSize, sysClientsslStatExtendedMasterSecrets=sysClientsslStatExtendedMasterSecrets, sysLldpNeighborsTableVlanTag=sysLldpNeighborsTableVlanTag, bigipi4800=bigipi4800, sysNetwork=sysNetwork, sysSwitchDdmStatTxWarnHi=sysSwitchDdmStatTxWarnHi, sysVlanStatTable=sysVlanStatTable, sysServersslStatOcspServersslCertStatusRevoked=sysServersslStatOcspServersslCertStatusRevoked, sysGlobalDiameterrouterStatGroup=sysGlobalDiameterrouterStatGroup, sysServersslStatMaxConns=sysServersslStatMaxConns, sysRouteMgmtEntryTable=sysRouteMgmtEntryTable, sysTmmStatMemoryTotalKb=sysTmmStatMemoryTotalKb, sysArpStaticEntryNumber=sysArpStaticEntryNumber, sysDiskBayEntry=sysDiskBayEntry, sysSelfIpNetmask=sysSelfIpNetmask, sysIp6StatResetStats=sysIp6StatResetStats, sysFastHttpStatGetReqs=sysFastHttpStatGetReqs, sysStatAuthMaxSessions=sysStatAuthMaxSessions, sysServersslStatRsaKeySize1024=sysServersslStatRsaKeySize1024, sysSoftware=sysSoftware, sysTrunkStatMcastOut=sysTrunkStatMcastOut, sysStpInterfaceTreeStatFwdTransitions=sysStpInterfaceTreeStatFwdTransitions, sysIiopStatResetStats=sysIiopStatResetStats, sysIntfMediaSfpGroup=sysIntfMediaSfpGroup, sysIpStatRx=sysIpStatRx, sysSwImageVerified=sysSwImageVerified, sysTrunkStatErrorsOut=sysTrunkStatErrorsOut, sysGlobalDiametersessionStatTotDiscardUnroutable=sysGlobalDiametersessionStatTotDiscardUnroutable, sysStatPvaServerCurConns5m=sysStatPvaServerCurConns5m, sysProcPidStatCpuUsage5mins=sysProcPidStatCpuUsage5mins, sysCertOrderManagerClientKey=sysCertOrderManagerClientKey, sysStpInterfaceTreeStatPriority=sysStpInterfaceTreeStatPriority, sysServersslStatTotalHandshakesOffload=sysServersslStatTotalHandshakesOffload, bigip5200=bigip5200, sysMultiHostCpuEntry=sysMultiHostCpuEntry, sysStpInstanceId=sysStpInstanceId, sysHttpStatOtherPrecompressBytes=sysHttpStatOtherPrecompressBytes, sysAuthStatWantcredentialResults=sysAuthStatWantcredentialResults, sysIp6StatErrMcastRpf=sysIp6StatErrMcastRpf, sysSelfIpName=sysSelfIpName, sysGlobalDiametersessionStatTotAnswerResultCodeReceived1xxx=sysGlobalDiametersessionStatTotAnswerResultCodeReceived1xxx, sysAttrConnAdaptiveReaperHiwat=sysAttrConnAdaptiveReaperHiwat, sysIpStatTx=sysIpStatTx, sysProfilePptpStatOutgoingCallReplies=sysProfilePptpStatOutgoingCallReplies, sysMultiHostGroup=sysMultiHostGroup, sysFastHttpStatClientSyns=sysFastHttpStatClientSyns, sysIcmp6StatForward=sysIcmp6StatForward, sysUnicastAddrSourceIp=sysUnicastAddrSourceIp, sysJoinCertOrderManagerStatCancelledReqs=sysJoinCertOrderManagerStatCancelledReqs, sysTrunkStatMcastIn=sysTrunkStatMcastIn, sysServersslStatDhGroupP384=sysServersslStatDhGroupP384, sysStatPvaServerBytesOut5s=sysStatPvaServerBytesOut5s, sysLsnPoolStatActiveHairpinConnections=sysLsnPoolStatActiveHairpinConnections, sysGlobalDiametersessionStatTotRespondUnroutable=sysGlobalDiametersessionStatTotRespondUnroutable, sysGlobalDiametersessionStatTotAnswerResultCodeReceived5xxx=sysGlobalDiametersessionStatTotAnswerResultCodeReceived5xxx, sysStatClientCurConns1m=sysStatClientCurConns1m, sysIp6StatErrMcastMaxPendingPackets=sysIp6StatErrMcastMaxPendingPackets, sysFecStatRmtInRawPackets=sysFecStatRmtInRawPackets, sysL2ForwardStat=sysL2ForwardStat, sysCertValidatorOcspCacheErrorTimeout=sysCertValidatorOcspCacheErrorTimeout, sysAttrConnAutoLasthop=sysAttrConnAutoLasthop, sysPhysicalDiskSerialNumber=sysPhysicalDiskSerialNumber, sysStpBridgeStatFwdDelay=sysStpBridgeStatFwdDelay, sysGlobalFwNatDynamicPoolFailureStat=sysGlobalFwNatDynamicPoolFailureStat, sysServersslStatNotssl=sysServersslStatNotssl, sysDot3StatLateCollisions=sysDot3StatLateCollisions, sysStpBridgeTreeStat=sysStpBridgeTreeStat, sysFastL4StatOpen=sysFastL4StatOpen, sysIcmpStatDrop=sysIcmpStatDrop, sysServersslStatShaDigest=sysServersslStatShaDigest, sysStpGlobals2MaxAge=sysStpGlobals2MaxAge, sysChassisFan=sysChassisFan, sysDnsStatAaaaReqs=sysDnsStatAaaaReqs, sysIcmp6StatGroup=sysIcmp6StatGroup, sysHttpStatAudioPrecompressBytes=sysHttpStatAudioPrecompressBytes, sysL2ForwardStatDynamic=sysL2ForwardStatDynamic, sysGlobalSipsessionStatAddressIncomplete=sysGlobalSipsessionStatAddressIncomplete, sysVlanGroupMbrTable=sysVlanGroupMbrTable, sysPlatformInfo=sysPlatformInfo, sysGlobalFtpStatFtpsBypasses=sysGlobalFtpStatFtpsBypasses, sysGlobalTmmStatSyncookieRejects=sysGlobalTmmStatSyncookieRejects, sysServersslStatDestinationIpBypasses=sysServersslStatDestinationIpBypasses, sysCertValidatorOcspProxyServerPool=sysCertValidatorOcspProxyServerPool, sysFecStatNumber=sysFecStatNumber, sysCmFailoverStatus=sysCmFailoverStatus, sysDot1dbaseStatResetStats=sysDot1dbaseStatResetStats, sysSwitchDdmStatRxDbmPwrHiAlarm=sysSwitchDdmStatRxDbmPwrHiAlarm, sysStatServerCurConns5m=sysStatServerCurConns5m, sysVcmpStatCores=sysVcmpStatCores, sysGlobalDiametersessionStatTotAnswerResultCodeSent5xxx=sysGlobalDiametersessionStatTotAnswerResultCodeSent5xxx, sysStpInterfaceTreeStatEntry=sysStpInterfaceTreeStatEntry, sysGlobalSiprouterStatCurAutoInitOutgoingConnections=sysGlobalSiprouterStatCurAutoInitOutgoingConnections, sysConnPoolStatResetStats=sysConnPoolStatResetStats, sysVcmpAllowedSlotsGroup=sysVcmpAllowedSlotsGroup, sysCmTrafficGroupStatusTable=sysCmTrafficGroupStatusTable, sysArpStaticEntryIpAddrType=sysArpStaticEntryIpAddrType, sysBladeTempEntry=sysBladeTempEntry, sysGlobalHostCpuSystem1m=sysGlobalHostCpuSystem1m, sysCertValidatorOcspStatResponseTryLaterErrors=sysCertValidatorOcspStatResponseTryLaterErrors, sysFwNatStaticDestinationTranslationPoolStatSubscrIdLkps=sysFwNatStaticDestinationTranslationPoolStatSubscrIdLkps, sysJoinCertValidatorNumber=sysJoinCertValidatorNumber, sysBladeTempGroup=sysBladeTempGroup, sysVlanSpanningTree=sysVlanSpanningTree, sysMultiHostTotalKb=sysMultiHostTotalKb, sysClientsslStatInsecureRenegotiationRejects=sysClientsslStatInsecureRenegotiationRejects, sysCertValidatorOcspStatSuccessfulCacheRequests=sysCertValidatorOcspStatSuccessfulCacheRequests, sysLsnPoolFailureStatNumber=sysLsnPoolFailureStatNumber, sysClusterMbrTable=sysClusterMbrTable, sysStatTmSleepCycles=sysStatTmSleepCycles, sysFastHttpStatGroup=sysFastHttpStatGroup, sysGlobalTmmStatTmUsageRatio1m=sysGlobalTmmStatTmUsageRatio1m, sysPvaStatClientBytesOut=sysPvaStatClientBytesOut, sysSwitchDdmStatRxPwr4=sysSwitchDdmStatRxPwr4, sysUdpStatRxunreach=sysUdpStatRxunreach, sysHostInfoStat=sysHostInfoStat, sysAttrGroup=sysAttrGroup, sysIpsecSpdStatSourceNetmaskType=sysIpsecSpdStatSourceNetmaskType, sysPacketFilterMacNumber=sysPacketFilterMacNumber, sysVlanxStatOutBroadcastPkts=sysVlanxStatOutBroadcastPkts, sysLsnPoolStatResetStats=sysLsnPoolStatResetStats, sysUdpStatConnects=sysUdpStatConnects, sysIpStatErrMcastWrongIf=sysIpStatErrMcastWrongIf, sysCertOrderManagerNumber=sysCertOrderManagerNumber, sysInterfaceStatErrorsIn=sysInterfaceStatErrorsIn, sysMultiHostSwapUsed=sysMultiHostSwapUsed, sysInterfaceStatCollisions=sysInterfaceStatCollisions)
