#
# PySNMP MIB module EKINOPS-MGNT2-NMS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/ekinops/EKINOPS-MGNT2-NMS-MIB
# Produced by pysmi-1.1.12 at Tue Jun  4 10:04:56 2024
# On host fv-az1773-903 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
ekinops, EkiOnOff = mibBuilder.importSymbols("EKINOPS-MIB", "ekinops", "EkiOnOff")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
ObjectIdentity, Unsigned32, ModuleIdentity, Counter64, MibIdentifier, IpAddress, TimeTicks, Counter32, iso, Gauge32, NotificationType, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Unsigned32", "ModuleIdentity", "Counter64", "MibIdentifier", "IpAddress", "TimeTicks", "Counter32", "iso", "Gauge32", "NotificationType", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32")
DisplayString, RowStatus, TextualConvention, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "TextualConvention", "DateAndTime")
SnmpUDPAddress, = mibBuilder.importSymbols("SNMPv2-TM", "SnmpUDPAddress")
mgnt2NMS = ModuleIdentity((1, 3, 6, 1, 4, 1, 20044, 1000))
mgnt2NMS.setRevisions(('2009-07-26 15:00', '2015-04-13 00:00', '2015-11-12 00:00', '2016-06-06 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: mgnt2NMS.setRevisionsDescriptions(('Initial version.', 'Add bindings for Node Controller\n           Add objects for Linux download\n\t   Add objects for SoftwareDownload', 'Appropriate Limits on SYNTAX of some OBJECT-TYPE)', 'new synthesisAlarm alarmtype ',))
if mibBuilder.loadTexts: mgnt2NMS.setLastUpdated('201511120000Z')
if mibBuilder.loadTexts: mgnt2NMS.setOrganization('Ekinops')
if mibBuilder.loadTexts: mgnt2NMS.setContactInfo('Ekinops\n          3, rue Blaise Pascal\n          F-22300 Lannion / FRANCE\n\n          Tel : +33 (0)2 96 05 00 30\n          Fax : +33 (0)2 96 48 62 39\n\n          E-mail: support@ekinops.fr')
if mibBuilder.loadTexts: mgnt2NMS.setDescription('MIB for managing Ekinops 360 Network Element via a NMS.')
mgnt2NMSMibObject = MibIdentifier((1, 3, 6, 1, 4, 1, 20044, 1000, 1))
mgnt2SupportMCConf = MibIdentifier((1, 3, 6, 1, 4, 1, 20044, 1000, 2))
mgnt2SupportMCCompl = MibIdentifier((1, 3, 6, 1, 4, 1, 20044, 1000, 2, 1))
mgnt2SupportMCGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 20044, 1000, 2, 2))
class Mgnt2NotificationId(TextualConvention, Counter32):
    description = 'This object contains a unique event/alarm numbering.'
    status = 'current'

class Mgnt2AlmProbableCause(TextualConvention, Integer32):
    description = 'This object is used to specify the OID of the probable cause of the \n         generated notification.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 1000))
    namedValues = NamedValues(("other", 1), ("adapterError", 2), ("applicationSubsystemFailure", 3), ("bandwidthReduced", 4), ("callEstablishmentError", 5), ("communicationsProtocolError", 6), ("communicationsSubsystemFailure", 7), ("configurationOrCustomizationError", 8), ("congestion", 9), ("corruptData", 10), ("cpuCyclesLimitExceeded", 11), ("dataSetOrModemError", 12), ("degradedSignal", 13), ("dteDceInterfaceError", 14), ("enclosureDoorOpen", 15), ("equipmentMalfunction", 16), ("excessiveVibration", 17), ("fileError", 18), ("fireDetected", 19), ("floodDetected", 20), ("framingError", 21), ("heatingVentCoolingSystemProblem", 22), ("humidityUnacceptable", 23), ("inputOutputDeviceError", 24), ("inputDeviceError", 25), ("lanError", 26), ("leakDetected", 27), ("localNodeTransmissionError", 28), ("lossOfFrame", 29), ("lossOfSignal", 30), ("materialSupplyExhausted", 31), ("multiplexerProblem", 32), ("outOfMemory", 33), ("ouputDeviceError", 34), ("performanceDegraded", 35), ("powerProblem", 36), ("pressureUnacceptable", 37), ("processorProblem", 38), ("pumpFailure", 39), ("queueSizeExceeded", 40), ("receiveFailure", 41), ("receiverFailure", 42), ("remoteNodeTransmissionError", 43), ("resourceAtOrNearingCapacity", 44), ("responseTimeExecessive", 45), ("retransmissionRateExcessive", 46), ("softwareError", 47), ("softwareProgramAbnormallyTerminated", 48), ("softwareProgramError", 49), ("storageCapacityProblem", 50), ("temperatureUnacceptable", 51), ("thresholdCrossed", 52), ("timingProblem", 53), ("toxicLeakDetected", 54), ("transmitFailure", 55), ("transmitterFailure", 56), ("underlyingResourceUnavailable", 57), ("versionMismatch", 58), ("authenticationFailure", 59), ("breachOfConfidentiality", 60), ("cableTamper", 61), ("delayedInformation", 62), ("denialOfService", 63), ("duplicateInformation", 64), ("informationMissing", 65), ("informationModificationDetected", 66), ("informationOutOfSequence", 67), ("intrusionDetection", 68), ("keyExpired", 69), ("nonRepudiationFailure", 70), ("outOfHoursActivity", 71), ("outOfService", 72), ("proceduralError", 73), ("unauthorizedAccessAttempt", 74), ("unexpectedInformation", 75), ("informationalStatus", 1000))

class Mgnt2ObjectClassId(TextualConvention, Integer32):
    description = 'This object represents the SNMP entry table \n         object identity (Managed Object Class) of the instance \n         where the event/alarm occured.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))
    namedValues = NamedValues(("other", 1), ("unknown", 2), ("chassis", 3), ("backplane", 4), ("container", 5), ("powerSupply", 6), ("fan", 7), ("sensor", 8), ("module", 9), ("port", 10), ("stack", 11), ("cpu", 12), ("mgnt", 13))

class Mgnt2AlmSeverity(TextualConvention, Integer32):
    description = 'The value of this object identifies the severity of\n          an alarm stored in alarm Table. \n          The cleared severity is not foreseen inside APT table.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("critical", 1), ("major", 2), ("minor", 3), ("warning", 4), ("indeterminate", 5), ("cleared", 6))

class Mgnt2AlmType(TextualConvention, Integer32):
    description = 'The value of this object identifies the type of\n          an alarm stored in alarm Table.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))
    namedValues = NamedValues(("other", 1), ("communicationsAlarm", 2), ("qualityOfServiceAlarm", 3), ("processingErrorAlarm", 4), ("equipmentAlarm", 5), ("environmentalAlarm", 6), ("integrityViolation", 7), ("operationalViolation", 8), ("physicalViolation", 9), ("securityServiceOrMechanismViolation", 10), ("timeDomainViolation", 11), ("synthesisAlarm", 12))

class Mgnt2EventType(TextualConvention, Integer32):
    description = 'The value of this object identifies the type of\n          an event stored in event log Table.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("objectCreation", 1), ("objectDeletion", 2), ("attributeValueChange", 3), ("stateChange", 4), ("activityLog", 5))

class Mgnt2EventSourceType(TextualConvention, Integer32):
    description = 'This object indicates the event source.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("event", 1), ("control", 2), ("config", 3))

class Mgnt2LacState(TextualConvention, Integer32):
    description = 'This is the State attribute for the Local Access Control.\n         This attribute can be set:\n         - by Agent at creation time to accessRequested \n         - by EML to the values accessGranted or accessDenied'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("accessDenied", 0), ("accessRequested", 1), ("accessGrantedCraft", 2), ("accessGrantedCli", 3), ("accessGrantedSnmp", 4))

class Mgnt2ServerAddress(TextualConvention, OctetString):
    description = "This textual convention define a server adress.\n         It can be either only the IP address of the server if \n         server is running on default port. ex : '10.0.17.57'\n         or IP adress and server port separated by ':' allowing to\n         connect a server running on unusual port. ex : '10.0.17.57:5041'\n         "
    status = 'current'

class Mgnt2UploadDownloadFileEncoding(TextualConvention, Integer32):
    description = "This describes the agent's capability in term of which\n           file encoding styles it supports."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("other", 1), ("ascii", 2), ("xml", 3), ("bin", 4), ("data", 5))

class Mgnt2UploadDownloadFileCompression(TextualConvention, Integer32):
    description = "This describes the agent's capability in term of which\n           file compression styles it supports."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("noCompression", 1), ("bzip", 2), ("gzip", 3))

class Mgnt2UploadDownloadActionStatus(TextualConvention, Integer32):
    description = 'This object indicates the download status and allow to start download.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("success", 0), ("start", 1), ("inProgress", 2), ("failed", 3), ("automatic", 4), ("abort", 5))

class Mgnt2UploadDownloadErrorCode(TextualConvention, Integer32):
    description = 'This object indicates the upload/download error code.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))
    namedValues = NamedValues(("noError", 0), ("missingLogin", 1), ("missingPassword", 2), ("missingFile", 3), ("serverUnreachable", 4), ("badPassword", 5), ("noSpaceLeft", 6), ("corruptedFile", 7), ("canceled", 8), ("noWriteAccess", 9), ("undefinedError", 10), ("accessViolation", 11), ("fileExist", 12), ("wrongDirection", 13), ("wrongName", 14), ("wrongCompression", 15))

class Mgnt2SoftwareDownloadActionStatus(TextualConvention, Integer32):
    description = 'This object indicates the upload/download error code.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))
    namedValues = NamedValues(("noError", 0), ("missingLogin", 1), ("missingPassword", 2), ("missingFile", 3), ("serverUnreachable", 4), ("badPassword", 5), ("noSpaceLeft", 6), ("corruptedFile", 7), ("canceled", 8), ("noWriteAccess", 9))

class Mgnt2DownloadFileType(TextualConvention, Integer32):
    description = 'This object indicates the the file type to download/upload.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("pmPackage", 0), ("mgntPackage", 1), ("configurationFile", 2), ("logFile", 3), ("perfFile", 4), ("wavePlan", 5), ("adminPackage", 6))

mgnt2ActiveAlmTable = MibTable((1, 3, 6, 1, 4, 1, 20044, 1000, 1, 1), )
if mibBuilder.loadTexts: mgnt2ActiveAlmTable.setStatus('current')
if mibBuilder.loadTexts: mgnt2ActiveAlmTable.setDescription('This table defines the MGNT2-NMS Active Alarm table\n          This table is used by Agent in order to store the active alarms,\n          managing system can only read them.')
mgnt2ActiveAlmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 20044, 1000, 1, 1, 1), ).setIndexNames((0, "EKINOPS-MGNT2-NMS-MIB", "mgnt2ActiveAlmNotificationId"))
if mibBuilder.loadTexts: mgnt2ActiveAlmEntry.setStatus('current')
if mibBuilder.loadTexts: mgnt2ActiveAlmEntry.setDescription('Information about a single alarm in the Active Alarm table.\n         Entries in this table are created by SNMP NE and will be\n         automatically deleted by SNMP NE when it is \n         genereted a cleared-alarm.')
mgnt2ActiveAlmNotificationId = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 1000, 1, 1, 1, 1), Mgnt2NotificationId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2ActiveAlmNotificationId.setStatus('current')
if mibBuilder.loadTexts: mgnt2ActiveAlmNotificationId.setDescription('See textual conventions.')
mgnt2ActiveAlmProbableCause = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 1000, 1, 1, 1, 2), Mgnt2AlmProbableCause()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2ActiveAlmProbableCause.setStatus('current')
if mibBuilder.loadTexts: mgnt2ActiveAlmProbableCause.setDescription('See textual conventions.')
mgnt2ActiveAlmObjectClassIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 1000, 1, 1, 1, 3), Mgnt2ObjectClassId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2ActiveAlmObjectClassIdentifier.setStatus('current')
if mibBuilder.loadTexts: mgnt2ActiveAlmObjectClassIdentifier.setDescription('See textual conventions.')
mgnt2ActiveAlmSourcePm = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 1000, 1, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2ActiveAlmSourcePm.setStatus('current')
if mibBuilder.loadTexts: mgnt2ActiveAlmSourcePm.setDescription('See textual conventions.')
mgnt2ActiveAlmBoardNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 1000, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2ActiveAlmBoardNumber.setStatus('current')
if mibBuilder.loadTexts: mgnt2ActiveAlmBoardNumber.setDescription('See textual conventions.')
mgnt2ActiveAlmSourcePortType = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 1000, 1, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2ActiveAlmSourcePortType.setStatus('current')
if mibBuilder.loadTexts: mgnt2ActiveAlmSourcePortType.setDescription('This OID gives the type of the port who sent a trap')
mgnt2ActiveAlmSourcePortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 1000, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2ActiveAlmSourcePortNumber.setStatus('current')
if mibBuilder.loadTexts: mgnt2ActiveAlmSourcePortNumber.setDescription('This OID gives the port number of the PM that sent the last trap')
mgnt2ActiveAlmSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 1000, 1, 1, 1, 8), Mgnt2AlmSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2ActiveAlmSeverity.setStatus('current')
if mibBuilder.loadTexts: mgnt2ActiveAlmSeverity.setDescription('See textual conventions.')
mgnt2ActiveAlmSpecificProblem = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 1000, 1, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2ActiveAlmSpecificProblem.setStatus('current')
if mibBuilder.loadTexts: mgnt2ActiveAlmSpecificProblem.setDescription('This object contains the alarm specific problem description. \n          Indicates further refinements to the problem identified \n          by the alarm type.  If more than one specific problem \n          is described in this object, the problem descriptions are \n          separated by <;> characters. The format of the displayString \n          is for further study.')
mgnt2ActiveAlmAdditionalText = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 1000, 1, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2ActiveAlmAdditionalText.setStatus('current')
if mibBuilder.loadTexts: mgnt2ActiveAlmAdditionalText.setDescription('')
mgnt2ActiveAlmType = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 1000, 1, 1, 1, 11), Mgnt2AlmType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2ActiveAlmType.setStatus('current')
if mibBuilder.loadTexts: mgnt2ActiveAlmType.setDescription('See textual convention')
mgnt2ActiveAlmTime = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 1000, 1, 1, 1, 12), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2ActiveAlmTime.setStatus('current')
if mibBuilder.loadTexts: mgnt2ActiveAlmTime.setDescription('This object indicates when the alarm has been generated.')
mgnt2ActiveAlmNodeControllerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 1000, 1, 1, 1, 13), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2ActiveAlmNodeControllerIpAddress.setStatus('current')
if mibBuilder.loadTexts: mgnt2ActiveAlmNodeControllerIpAddress.setDescription('This OID gives the IP address of the Node Controller')
mgnt2ActiveAlmChassisId = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 1000, 1, 1, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2ActiveAlmChassisId.setStatus('current')
if mibBuilder.loadTexts: mgnt2ActiveAlmChassisId.setDescription('This OID gives the chassis ID ')
mgnt2AlmLogTable = MibTable((1, 3, 6, 1, 4, 1, 20044, 1000, 1, 2), )
if mibBuilder.loadTexts: mgnt2AlmLogTable.setStatus('current')
if mibBuilder.loadTexts: mgnt2AlmLogTable.setDescription('This table defines the Alarm Log table.\n          It is used to store the alarms generated by SNMP NE.')
mgnt2AlmLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 20044, 1000, 1, 2, 1), ).setIndexNames((0, "EKINOPS-MGNT2-NMS-MIB", "mgnt2AlmLogNotificationId"))
if mibBuilder.loadTexts: mgnt2AlmLogEntry.setStatus('current')
if mibBuilder.loadTexts: mgnt2AlmLogEntry.setDescription('Each entry contains information about single alarm notification.\n         Entries in this table are created automatically by\n         Agent and they are never deleted because the Log behavior is \n         automatically set to Wrap, hence when no more entry will be\n         created (log full) new log entry will cause the deletion \n         of the oldest one.')
mgnt2AlmLogNotificationId = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 1000, 1, 2, 1, 1), Mgnt2NotificationId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2AlmLogNotificationId.setStatus('current')
if mibBuilder.loadTexts: mgnt2AlmLogNotificationId.setDescription('See textual conventions.')
mgnt2AlmLogProbableCause = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 1000, 1, 2, 1, 2), Mgnt2AlmProbableCause()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2AlmLogProbableCause.setStatus('current')
if mibBuilder.loadTexts: mgnt2AlmLogProbableCause.setDescription('See textual conventions.')
mgnt2AlmLogObjectClassIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 1000, 1, 2, 1, 3), Mgnt2ObjectClassId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2AlmLogObjectClassIdentifier.setStatus('current')
if mibBuilder.loadTexts: mgnt2AlmLogObjectClassIdentifier.setDescription('See textual conventions.')
mgnt2AlmLogSourcePm = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 1000, 1, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2AlmLogSourcePm.setStatus('current')
if mibBuilder.loadTexts: mgnt2AlmLogSourcePm.setDescription('See textual conventions.')
mgnt2AlmLogBoardNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 1000, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2AlmLogBoardNumber.setStatus('current')
if mibBuilder.loadTexts: mgnt2AlmLogBoardNumber.setDescription('See textual conventions.')
mgnt2AlmLogSourcePortType = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 1000, 1, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2AlmLogSourcePortType.setStatus('current')
if mibBuilder.loadTexts: mgnt2AlmLogSourcePortType.setDescription('This OID gives the type of the port who sent a trap')
mgnt2AlmLogSourcePortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 1000, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2AlmLogSourcePortNumber.setStatus('current')
if mibBuilder.loadTexts: mgnt2AlmLogSourcePortNumber.setDescription('This OID gives the port number of the PM that sent the last trap')
mgnt2AlmLogSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 1000, 1, 2, 1, 8), Mgnt2AlmSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2AlmLogSeverity.setStatus('current')
if mibBuilder.loadTexts: mgnt2AlmLogSeverity.setDescription('The perceived severity of the alarm, as specified by\n         the agent that generated it.')
mgnt2AlmLogSpecificProblem = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 1000, 1, 2, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2AlmLogSpecificProblem.setStatus('current')
if mibBuilder.loadTexts: mgnt2AlmLogSpecificProblem.setDescription('See textual conventions.\n         This object is only present if it was included in the\n         alarm trap corresponding to this AlarmLog entry.')
mgnt2AlmLogAdditionalText = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 1000, 1, 2, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2AlmLogAdditionalText.setStatus('current')
if mibBuilder.loadTexts: mgnt2AlmLogAdditionalText.setDescription('')
mgnt2AlmLogAlarmType = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 1000, 1, 2, 1, 11), Mgnt2AlmType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2AlmLogAlarmType.setStatus('current')
if mibBuilder.loadTexts: mgnt2AlmLogAlarmType.setDescription('')
mgnt2AlmLogTime = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 1000, 1, 2, 1, 13), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2AlmLogTime.setStatus('current')
if mibBuilder.loadTexts: mgnt2AlmLogTime.setDescription('This object indicates when the alarm has been generated.')
mgnt2AlmLogNodeControllerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 1000, 1, 2, 1, 14), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2AlmLogNodeControllerIpAddress.setStatus('current')
if mibBuilder.loadTexts: mgnt2AlmLogNodeControllerIpAddress.setDescription('This OID gives the IP address of the Node Controller')
mgnt2AlmLogChassisId = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 1000, 1, 2, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2AlmLogChassisId.setStatus('current')
if mibBuilder.loadTexts: mgnt2AlmLogChassisId.setDescription('This OID gives the chassis ID ')
mgnt2EventLogTable = MibTable((1, 3, 6, 1, 4, 1, 20044, 1000, 1, 3), )
if mibBuilder.loadTexts: mgnt2EventLogTable.setStatus('current')
if mibBuilder.loadTexts: mgnt2EventLogTable.setDescription('This table contain information about single event notification\n         not alarm. Entries in this table are created automatically by\n         Agent and they are never deleted because the Log behavior is \n         automatically set to Wrap, hence when no more entry will be\n         created (log full) new log entry will cause the deletion \n         of the oldest one.')
mgnt2EventLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 20044, 1000, 1, 3, 1), ).setIndexNames((0, "EKINOPS-MGNT2-NMS-MIB", "mgnt2EventLogNotificationId"))
if mibBuilder.loadTexts: mgnt2EventLogEntry.setStatus('current')
if mibBuilder.loadTexts: mgnt2EventLogEntry.setDescription('An entry in the mgnt2EventLogTable')
mgnt2EventLogNotificationId = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 1000, 1, 3, 1, 1), Mgnt2NotificationId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2EventLogNotificationId.setStatus('current')
if mibBuilder.loadTexts: mgnt2EventLogNotificationId.setDescription('See textual conventions.')
mgnt2EventLogObjectClassIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 1000, 1, 3, 1, 2), Mgnt2ObjectClassId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2EventLogObjectClassIdentifier.setStatus('current')
if mibBuilder.loadTexts: mgnt2EventLogObjectClassIdentifier.setDescription('See textual conventions.')
mgnt2EventLogSourcePm = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 1000, 1, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2EventLogSourcePm.setStatus('current')
if mibBuilder.loadTexts: mgnt2EventLogSourcePm.setDescription('See textual conventions.')
mgnt2EventLogBoardNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 1000, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2EventLogBoardNumber.setStatus('current')
if mibBuilder.loadTexts: mgnt2EventLogBoardNumber.setDescription('See textual conventions.')
mgnt2EventLogSourcePortType = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 1000, 1, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2EventLogSourcePortType.setStatus('current')
if mibBuilder.loadTexts: mgnt2EventLogSourcePortType.setDescription('This OID gives the type of the port who sent a trap')
mgnt2EventLogSourcePortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 1000, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2EventLogSourcePortNumber.setStatus('current')
if mibBuilder.loadTexts: mgnt2EventLogSourcePortNumber.setDescription('This OID gives the port number of the PM that sent the last trap')
mgnt2EventLogEventType = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 1000, 1, 3, 1, 8), Mgnt2EventType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2EventLogEventType.setStatus('current')
if mibBuilder.loadTexts: mgnt2EventLogEventType.setDescription('This object describes the type of the event logged.')
mgnt2EventLogSourceType = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 1000, 1, 3, 1, 9), Mgnt2EventSourceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2EventLogSourceType.setStatus('current')
if mibBuilder.loadTexts: mgnt2EventLogSourceType.setDescription('This object describes the source type of the event logged.')
mgnt2EventLogReason = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 1000, 1, 3, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2EventLogReason.setStatus('current')
if mibBuilder.loadTexts: mgnt2EventLogReason.setDescription('')
mgnt2EventLogAdditionalText = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 1000, 1, 3, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2EventLogAdditionalText.setStatus('current')
if mibBuilder.loadTexts: mgnt2EventLogAdditionalText.setDescription('')
mgnt2EventLogTime = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 1000, 1, 3, 1, 12), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2EventLogTime.setStatus('current')
if mibBuilder.loadTexts: mgnt2EventLogTime.setDescription('This object indicates when the event has been generated.')
mgnt2EventLogNodeControllerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 1000, 1, 3, 1, 13), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2EventLogNodeControllerIpAddress.setStatus('current')
if mibBuilder.loadTexts: mgnt2EventLogNodeControllerIpAddress.setDescription('This OID gives the IP address of the Node Controller')
mgnt2EventLogChassisId = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 1000, 1, 3, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2EventLogChassisId.setStatus('current')
if mibBuilder.loadTexts: mgnt2EventLogChassisId.setDescription('This OID gives the chassis ID ')
mgnt2UploadDownload = MibIdentifier((1, 3, 6, 1, 4, 1, 20044, 1000, 1, 5))
mgnt2UploadDownloadFilename = MibScalar((1, 3, 6, 1, 4, 1, 20044, 1000, 1, 5, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2UploadDownloadFilename.setStatus('current')
if mibBuilder.loadTexts: mgnt2UploadDownloadFilename.setDescription('software file name including eventually file path')
mgnt2UploadDownloadAddress = MibScalar((1, 3, 6, 1, 4, 1, 20044, 1000, 1, 5, 2), Mgnt2ServerAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2UploadDownloadAddress.setStatus('current')
if mibBuilder.loadTexts: mgnt2UploadDownloadAddress.setDescription('See textual convention')
mgnt2UploadDownloadLogin = MibScalar((1, 3, 6, 1, 4, 1, 20044, 1000, 1, 5, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2UploadDownloadLogin.setStatus('current')
if mibBuilder.loadTexts: mgnt2UploadDownloadLogin.setDescription('Login for ftp')
mgnt2UploadDownloadPasswd = MibScalar((1, 3, 6, 1, 4, 1, 20044, 1000, 1, 5, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2UploadDownloadPasswd.setStatus('current')
if mibBuilder.loadTexts: mgnt2UploadDownloadPasswd.setDescription('Password for ftp.\n        A manager sets this value with ftp account password using SNMP.\n        For security reasons if a manager reads this entry, NE must return an empty string (instead of password).\n        ')
mgnt2UploadDownloadTxRetries = MibScalar((1, 3, 6, 1, 4, 1, 20044, 1000, 1, 5, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2UploadDownloadTxRetries.setStatus('current')
if mibBuilder.loadTexts: mgnt2UploadDownloadTxRetries.setDescription('Communication retries between the Client and Server. \n        <0> denotes one (first) transmission and no retries in case of failure \n        no re-transmissions are required.')
mgnt2UploadDownloadActionStatus = MibScalar((1, 3, 6, 1, 4, 1, 20044, 1000, 1, 5, 6), Mgnt2UploadDownloadActionStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2UploadDownloadActionStatus.setStatus('current')
if mibBuilder.loadTexts: mgnt2UploadDownloadActionStatus.setDescription('Entry used to know status of upload/ download to start \n        upload/download operation (Action)')
mgnt2UploadDownloadErrorCode = MibScalar((1, 3, 6, 1, 4, 1, 20044, 1000, 1, 5, 7), Mgnt2UploadDownloadErrorCode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2UploadDownloadErrorCode.setStatus('current')
if mibBuilder.loadTexts: mgnt2UploadDownloadErrorCode.setDescription('See textual convention')
mgnt2UploadDownloadDirection = MibScalar((1, 3, 6, 1, 4, 1, 20044, 1000, 1, 5, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2UploadDownloadDirection.setStatus('current')
if mibBuilder.loadTexts: mgnt2UploadDownloadDirection.setDescription('\n        FTP direction : \n        0 : From NE to external server\n        1 : From external server to NE\n        ')
mgnt2UploadDownloadProgress = MibScalar((1, 3, 6, 1, 4, 1, 20044, 1000, 1, 5, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2UploadDownloadProgress.setStatus('current')
if mibBuilder.loadTexts: mgnt2UploadDownloadProgress.setDescription("Percentage of software file(s) downloaded.\n         Only significant in case mgnt2UploadDownloadActionStatus is 'inProgress' or 'automatic'\n        ")
mgnt2UploadDownloadReceivedFiles = MibScalar((1, 3, 6, 1, 4, 1, 20044, 1000, 1, 5, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2UploadDownloadReceivedFiles.setStatus('current')
if mibBuilder.loadTexts: mgnt2UploadDownloadReceivedFiles.setDescription("Number of files received during upload/download (significant when status is 'automatic')")
mgnt2UploadDownloadRemainingFiles = MibScalar((1, 3, 6, 1, 4, 1, 20044, 1000, 1, 5, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2UploadDownloadRemainingFiles.setStatus('current')
if mibBuilder.loadTexts: mgnt2UploadDownloadRemainingFiles.setDescription("Number of files remaining for upload/download (significant when status is 'automatic')")
mgnt2UploadDownloadFileType = MibScalar((1, 3, 6, 1, 4, 1, 20044, 1000, 1, 5, 12), Mgnt2DownloadFileType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2UploadDownloadFileType.setStatus('current')
if mibBuilder.loadTexts: mgnt2UploadDownloadFileType.setDescription('File type to download/upload :\n             - 0 : pmPackage\n             - 1 : mgntPackage\n             - 2 : configurationFile\n             - 3 : logFile\n             - 4 : perfFile')
mgnt2UploadDownloadFileCompression = MibScalar((1, 3, 6, 1, 4, 1, 20044, 1000, 1, 5, 13), Mgnt2UploadDownloadFileCompression()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2UploadDownloadFileCompression.setStatus('current')
if mibBuilder.loadTexts: mgnt2UploadDownloadFileCompression.setDescription('See Textual convention')
mgnt2UploadDownloadDeleteLastFile = MibScalar((1, 3, 6, 1, 4, 1, 20044, 1000, 1, 5, 14), EkiOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2UploadDownloadDeleteLastFile.setStatus('current')
if mibBuilder.loadTexts: mgnt2UploadDownloadDeleteLastFile.setDescription('')
mgnt2Configuration = MibIdentifier((1, 3, 6, 1, 4, 1, 20044, 1000, 1, 6))
mgnt2ConfigurationChecksum = MibScalar((1, 3, 6, 1, 4, 1, 20044, 1000, 1, 6, 1), DisplayString())
if mibBuilder.loadTexts: mgnt2ConfigurationChecksum.setStatus('deprecated')
if mibBuilder.loadTexts: mgnt2ConfigurationChecksum.setDescription('Entry used to identify uniquely configuration file content.\n        (Used to check alignement between NE configuration and configuration known by NM)')
mgnt2ConfigurationActionStatus = MibScalar((1, 3, 6, 1, 4, 1, 20044, 1000, 1, 6, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2ConfigurationActionStatus.setStatus('current')
if mibBuilder.loadTexts: mgnt2ConfigurationActionStatus.setDescription('\n        0 : activate\n        1 : activated\n        2 : failed')
mgnt2ConfigurationActivationErrorCode = MibScalar((1, 3, 6, 1, 4, 1, 20044, 1000, 1, 6, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2ConfigurationActivationErrorCode.setStatus('current')
if mibBuilder.loadTexts: mgnt2ConfigurationActivationErrorCode.setDescription('\n        0 : noError\n        1 : badValue\n        2 : missingFile\n        3 : emptyFile\n\t\t4 : wrong file')
mgnt2ConfigurationActivationErrorString = MibScalar((1, 3, 6, 1, 4, 1, 20044, 1000, 1, 6, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2ConfigurationActivationErrorString.setStatus('current')
if mibBuilder.loadTexts: mgnt2ConfigurationActivationErrorString.setDescription('String explaining Error code.\n         For example, in case of bad value(s), faulty parameter(s) name(s) are given')
mgnt2SoftwareDownload = MibIdentifier((1, 3, 6, 1, 4, 1, 20044, 1000, 1, 7))
mgnt2SoftwareDownloadActionStatus = MibScalar((1, 3, 6, 1, 4, 1, 20044, 1000, 1, 7, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2SoftwareDownloadActionStatus.setStatus('current')
if mibBuilder.loadTexts: mgnt2SoftwareDownloadActionStatus.setDescription('\n        0 : activate\n        1 : downgrade\n        2 : abort\n        3 : activated\n        4 : downgraded\n        5 : failed')
mgnt2SoftwareDownloadActivationErrorCode = MibScalar((1, 3, 6, 1, 4, 1, 20044, 1000, 1, 7, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2SoftwareDownloadActivationErrorCode.setStatus('current')
if mibBuilder.loadTexts: mgnt2SoftwareDownloadActivationErrorCode.setDescription('\n        0 : noError\n        1 : badValue\n        2 : missingFile\n        3 : emptyFile\n\t\t4 : wrong file')
mgnt2SoftwareDownloadActivationErrorString = MibScalar((1, 3, 6, 1, 4, 1, 20044, 1000, 1, 7, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2SoftwareDownloadActivationErrorString.setStatus('current')
if mibBuilder.loadTexts: mgnt2SoftwareDownloadActivationErrorString.setDescription('String explaining Error code.\n         For example, in case of bad value(s), faulty parameter(s) name(s) are given')
mgnt2SoftwareDownloadActivationSlotNumber = MibScalar((1, 3, 6, 1, 4, 1, 20044, 1000, 1, 7, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2SoftwareDownloadActivationSlotNumber.setStatus('current')
if mibBuilder.loadTexts: mgnt2SoftwareDownloadActivationSlotNumber.setDescription('')
mgnt2SoftwareDownloadActivationClearFile = MibScalar((1, 3, 6, 1, 4, 1, 20044, 1000, 1, 7, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2SoftwareDownloadActivationClearFile.setStatus('current')
if mibBuilder.loadTexts: mgnt2SoftwareDownloadActivationClearFile.setDescription('\n        0 : keepfile\n        1 : clearfile\n\t')
mgnt2SoftwareDownloadActivationFilename = MibScalar((1, 3, 6, 1, 4, 1, 20044, 1000, 1, 7, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2SoftwareDownloadActivationFilename.setStatus('current')
if mibBuilder.loadTexts: mgnt2SoftwareDownloadActivationFilename.setDescription('software file name including eventually file path')
mgnt2SoftwareDownloadActivationAutoRestart = MibScalar((1, 3, 6, 1, 4, 1, 20044, 1000, 1, 7, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2SoftwareDownloadActivationAutoRestart.setStatus('current')
if mibBuilder.loadTexts: mgnt2SoftwareDownloadActivationAutoRestart.setDescription('\n        0 : norestart\n        1 : autorestart\n\t')
mgnt2SoftwareDownloadActivationFileType = MibScalar((1, 3, 6, 1, 4, 1, 20044, 1000, 1, 7, 9), Mgnt2DownloadFileType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2SoftwareDownloadActivationFileType.setStatus('current')
if mibBuilder.loadTexts: mgnt2SoftwareDownloadActivationFileType.setDescription('File type to download/upload :\n             - 0 : pmPackage\n             - 1 : mgntPackage\n             - 2 : configurationFile\n             - 3 : logFile\n             - 4 : perfFile')
mgnt2LacTable = MibTable((1, 3, 6, 1, 4, 1, 20044, 1000, 1, 8), )
if mibBuilder.loadTexts: mgnt2LacTable.setStatus('current')
if mibBuilder.loadTexts: mgnt2LacTable.setDescription('The MGNT2 Local Access control table.\n         This table is used to give access to the Craft Terminals or/and NMS.')
mgnt2LacEntry = MibTableRow((1, 3, 6, 1, 4, 1, 20044, 1000, 1, 8, 1), ).setIndexNames((0, "EKINOPS-MGNT2-NMS-MIB", "mgnt2LacIndex"))
if mibBuilder.loadTexts: mgnt2LacEntry.setStatus('current')
if mibBuilder.loadTexts: mgnt2LacEntry.setDescription('Entry is automatically created by Agent at start-up time.')
mgnt2LacIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 1000, 1, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2LacIndex.setStatus('current')
if mibBuilder.loadTexts: mgnt2LacIndex.setDescription('This is the index for the Local Access Control table.')
mgnt2LacState = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 1000, 1, 8, 1, 2), Mgnt2LacState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2LacState.setStatus('current')
if mibBuilder.loadTexts: mgnt2LacState.setDescription('See textual convention')
mgnt2LacNoResponseTimeOutPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 20044, 1000, 1, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgnt2LacNoResponseTimeOutPeriod.setStatus('current')
if mibBuilder.loadTexts: mgnt2LacNoResponseTimeOutPeriod.setDescription('This is the No Response TimeOut Period attribute for the\n         Local Access Control.')
mgnt2PolledInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 20044, 1000, 1, 10))
mgnt2PolledInfoLastAlarmNotificationId = MibScalar((1, 3, 6, 1, 4, 1, 20044, 1000, 1, 10, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2PolledInfoLastAlarmNotificationId.setStatus('current')
if mibBuilder.loadTexts: mgnt2PolledInfoLastAlarmNotificationId.setDescription('This object contains the notification identifier of the last alarm\n         stored inside AlarmLog.')
mgnt2PolledInfoLastEventNotificationId = MibScalar((1, 3, 6, 1, 4, 1, 20044, 1000, 1, 10, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2PolledInfoLastEventNotificationId.setStatus('current')
if mibBuilder.loadTexts: mgnt2PolledInfoLastEventNotificationId.setDescription('This object contains the notification identifier of the last Event\n         stored inside EventLog.')
mgnt2PolledInfoConfigurationChecksum = MibScalar((1, 3, 6, 1, 4, 1, 20044, 1000, 1, 10, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgnt2PolledInfoConfigurationChecksum.setStatus('current')
if mibBuilder.loadTexts: mgnt2PolledInfoConfigurationChecksum.setDescription('Entry used to identify uniquely configuration file content.\n        (Used to check alignement between NE configuration and configuration known by NM)')
mgnt2TrapNMSAlarm = NotificationType((1, 3, 6, 1, 4, 1, 20044, 1000, 1, 11)).setObjects(("EKINOPS-MGNT2-NMS-MIB", "mgnt2AlmLogNotificationId"), ("EKINOPS-MGNT2-NMS-MIB", "mgnt2AlmLogObjectClassIdentifier"), ("EKINOPS-MGNT2-NMS-MIB", "mgnt2AlmLogSourcePm"), ("EKINOPS-MGNT2-NMS-MIB", "mgnt2AlmLogBoardNumber"), ("EKINOPS-MGNT2-NMS-MIB", "mgnt2AlmLogSourcePortType"), ("EKINOPS-MGNT2-NMS-MIB", "mgnt2AlmLogSourcePortNumber"), ("EKINOPS-MGNT2-NMS-MIB", "mgnt2AlmLogProbableCause"), ("EKINOPS-MGNT2-NMS-MIB", "mgnt2AlmLogSeverity"), ("EKINOPS-MGNT2-NMS-MIB", "mgnt2AlmLogSpecificProblem"), ("EKINOPS-MGNT2-NMS-MIB", "mgnt2AlmLogAdditionalText"), ("EKINOPS-MGNT2-NMS-MIB", "mgnt2AlmLogAlarmType"), ("EKINOPS-MGNT2-NMS-MIB", "mgnt2AlmLogTime"), ("EKINOPS-MGNT2-NMS-MIB", "mgnt2AlmLogNodeControllerIpAddress"), ("EKINOPS-MGNT2-NMS-MIB", "mgnt2AlmLogChassisId"))
if mibBuilder.loadTexts: mgnt2TrapNMSAlarm.setStatus('current')
if mibBuilder.loadTexts: mgnt2TrapNMSAlarm.setDescription('This notification reports Alarm event.')
mgnt2TrapNMSEvent = NotificationType((1, 3, 6, 1, 4, 1, 20044, 1000, 1, 12)).setObjects(("EKINOPS-MGNT2-NMS-MIB", "mgnt2EventLogNotificationId"), ("EKINOPS-MGNT2-NMS-MIB", "mgnt2EventLogObjectClassIdentifier"), ("EKINOPS-MGNT2-NMS-MIB", "mgnt2EventLogSourcePm"), ("EKINOPS-MGNT2-NMS-MIB", "mgnt2EventLogBoardNumber"), ("EKINOPS-MGNT2-NMS-MIB", "mgnt2EventLogSourcePortType"), ("EKINOPS-MGNT2-NMS-MIB", "mgnt2EventLogSourcePortNumber"), ("EKINOPS-MGNT2-NMS-MIB", "mgnt2EventLogEventType"), ("EKINOPS-MGNT2-NMS-MIB", "mgnt2EventLogSourceType"), ("EKINOPS-MGNT2-NMS-MIB", "mgnt2EventLogReason"), ("EKINOPS-MGNT2-NMS-MIB", "mgnt2EventLogAdditionalText"), ("EKINOPS-MGNT2-NMS-MIB", "mgnt2EventLogTime"), ("EKINOPS-MGNT2-NMS-MIB", "mgnt2EventLogNodeControllerIpAddress"), ("EKINOPS-MGNT2-NMS-MIB", "mgnt2EventLogChassisId"))
if mibBuilder.loadTexts: mgnt2TrapNMSEvent.setStatus('current')
if mibBuilder.loadTexts: mgnt2TrapNMSEvent.setDescription('This notification reports an Event.')
mgnt2SupportMc = ModuleCompliance((1, 3, 6, 1, 4, 1, 20044, 1000, 2, 1, 1)).setObjects(("EKINOPS-MGNT2-NMS-MIB", "mgnt2ActiveAlmGroup"), ("EKINOPS-MGNT2-NMS-MIB", "mgnt2AlmLogGroup"), ("EKINOPS-MGNT2-NMS-MIB", "mgnt2EventLogGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mgnt2SupportMc = mgnt2SupportMc.setStatus('current')
if mibBuilder.loadTexts: mgnt2SupportMc.setDescription('This module compliance describes a set of objects required for\n         MGNT2-NMS SNMP Agent implementation.')
mgnt2ActiveAlmGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 20044, 1000, 2, 1, 2)).setObjects(("EKINOPS-MGNT2-NMS-MIB", "mgnt2ActiveAlmProbableCause"), ("EKINOPS-MGNT2-NMS-MIB", "mgnt2ActiveAlmObjectClassIdentifier"), ("EKINOPS-MGNT2-NMS-MIB", "mgnt2ActiveAlmSourcePm"), ("EKINOPS-MGNT2-NMS-MIB", "mgnt2ActiveAlmBoardNumber"), ("EKINOPS-MGNT2-NMS-MIB", "mgnt2ActiveAlmSourcePortType"), ("EKINOPS-MGNT2-NMS-MIB", "mgnt2ActiveAlmSourcePortNumber"), ("EKINOPS-MGNT2-NMS-MIB", "mgnt2ActiveAlmSeverity"), ("EKINOPS-MGNT2-NMS-MIB", "mgnt2ActiveAlmType"), ("EKINOPS-MGNT2-NMS-MIB", "mgnt2ActiveAlmTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mgnt2ActiveAlmGroup = mgnt2ActiveAlmGroup.setStatus('current')
if mibBuilder.loadTexts: mgnt2ActiveAlmGroup.setDescription('This group describes the mandatory objects needed for the\n         Active Alarm management configuration.')
mgnt2AlmLogGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 20044, 1000, 2, 1, 3)).setObjects(("EKINOPS-MGNT2-NMS-MIB", "mgnt2AlmLogProbableCause"), ("EKINOPS-MGNT2-NMS-MIB", "mgnt2AlmLogObjectClassIdentifier"), ("EKINOPS-MGNT2-NMS-MIB", "mgnt2AlmLogSourcePm"), ("EKINOPS-MGNT2-NMS-MIB", "mgnt2AlmLogBoardNumber"), ("EKINOPS-MGNT2-NMS-MIB", "mgnt2AlmLogSourcePortType"), ("EKINOPS-MGNT2-NMS-MIB", "mgnt2AlmLogSourcePortNumber"), ("EKINOPS-MGNT2-NMS-MIB", "mgnt2AlmLogSeverity"), ("EKINOPS-MGNT2-NMS-MIB", "mgnt2AlmLogAlarmType"), ("EKINOPS-MGNT2-NMS-MIB", "mgnt2AlmLogTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mgnt2AlmLogGroup = mgnt2AlmLogGroup.setStatus('current')
if mibBuilder.loadTexts: mgnt2AlmLogGroup.setDescription('This group describes the mandatory objects needed for the\n         Alarm log management configuration.')
mgnt2EventLogGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 20044, 1000, 2, 1, 4)).setObjects(("EKINOPS-MGNT2-NMS-MIB", "mgnt2EventLogObjectClassIdentifier"), ("EKINOPS-MGNT2-NMS-MIB", "mgnt2EventLogSourcePm"), ("EKINOPS-MGNT2-NMS-MIB", "mgnt2EventLogBoardNumber"), ("EKINOPS-MGNT2-NMS-MIB", "mgnt2EventLogSourcePortType"), ("EKINOPS-MGNT2-NMS-MIB", "mgnt2EventLogSourcePortNumber"), ("EKINOPS-MGNT2-NMS-MIB", "mgnt2EventLogEventType"), ("EKINOPS-MGNT2-NMS-MIB", "mgnt2EventLogSourceType"), ("EKINOPS-MGNT2-NMS-MIB", "mgnt2EventLogTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mgnt2EventLogGroup = mgnt2EventLogGroup.setStatus('current')
if mibBuilder.loadTexts: mgnt2EventLogGroup.setDescription('This group describes the mandatory objects needed for the\n         Event log management configuration.')
mibBuilder.exportSymbols("EKINOPS-MGNT2-NMS-MIB", mgnt2SoftwareDownloadActivationAutoRestart=mgnt2SoftwareDownloadActivationAutoRestart, mgnt2PolledInfo=mgnt2PolledInfo, mgnt2ConfigurationActivationErrorString=mgnt2ConfigurationActivationErrorString, mgnt2EventLogReason=mgnt2EventLogReason, Mgnt2EventType=Mgnt2EventType, mgnt2EventLogObjectClassIdentifier=mgnt2EventLogObjectClassIdentifier, mgnt2UploadDownloadDirection=mgnt2UploadDownloadDirection, mgnt2ConfigurationActivationErrorCode=mgnt2ConfigurationActivationErrorCode, mgnt2UploadDownloadFileCompression=mgnt2UploadDownloadFileCompression, Mgnt2ObjectClassId=Mgnt2ObjectClassId, mgnt2SupportMCConf=mgnt2SupportMCConf, mgnt2SupportMCGroup=mgnt2SupportMCGroup, mgnt2EventLogBoardNumber=mgnt2EventLogBoardNumber, mgnt2ConfigurationChecksum=mgnt2ConfigurationChecksum, mgnt2EventLogGroup=mgnt2EventLogGroup, mgnt2AlmLogNotificationId=mgnt2AlmLogNotificationId, mgnt2AlmLogAdditionalText=mgnt2AlmLogAdditionalText, mgnt2UploadDownloadRemainingFiles=mgnt2UploadDownloadRemainingFiles, mgnt2SoftwareDownloadActivationFileType=mgnt2SoftwareDownloadActivationFileType, mgnt2Configuration=mgnt2Configuration, mgnt2TrapNMSEvent=mgnt2TrapNMSEvent, mgnt2AlmLogSourcePortType=mgnt2AlmLogSourcePortType, mgnt2PolledInfoLastEventNotificationId=mgnt2PolledInfoLastEventNotificationId, mgnt2ActiveAlmSourcePm=mgnt2ActiveAlmSourcePm, mgnt2ActiveAlmSpecificProblem=mgnt2ActiveAlmSpecificProblem, mgnt2PolledInfoLastAlarmNotificationId=mgnt2PolledInfoLastAlarmNotificationId, mgnt2SoftwareDownloadActivationClearFile=mgnt2SoftwareDownloadActivationClearFile, mgnt2EventLogEntry=mgnt2EventLogEntry, mgnt2UploadDownloadProgress=mgnt2UploadDownloadProgress, mgnt2LacNoResponseTimeOutPeriod=mgnt2LacNoResponseTimeOutPeriod, mgnt2AlmLogSpecificProblem=mgnt2AlmLogSpecificProblem, mgnt2EventLogTime=mgnt2EventLogTime, mgnt2UploadDownloadDeleteLastFile=mgnt2UploadDownloadDeleteLastFile, mgnt2ActiveAlmNotificationId=mgnt2ActiveAlmNotificationId, mgnt2ActiveAlmSourcePortNumber=mgnt2ActiveAlmSourcePortNumber, mgnt2UploadDownloadAddress=mgnt2UploadDownloadAddress, mgnt2EventLogSourceType=mgnt2EventLogSourceType, Mgnt2SoftwareDownloadActionStatus=Mgnt2SoftwareDownloadActionStatus, Mgnt2UploadDownloadErrorCode=Mgnt2UploadDownloadErrorCode, mgnt2AlmLogTable=mgnt2AlmLogTable, mgnt2LacState=mgnt2LacState, mgnt2SoftwareDownloadActivationErrorCode=mgnt2SoftwareDownloadActivationErrorCode, mgnt2SoftwareDownloadActionStatus=mgnt2SoftwareDownloadActionStatus, mgnt2SupportMCCompl=mgnt2SupportMCCompl, mgnt2AlmLogNodeControllerIpAddress=mgnt2AlmLogNodeControllerIpAddress, mgnt2ActiveAlmObjectClassIdentifier=mgnt2ActiveAlmObjectClassIdentifier, mgnt2AlmLogAlarmType=mgnt2AlmLogAlarmType, mgnt2NMSMibObject=mgnt2NMSMibObject, Mgnt2NotificationId=Mgnt2NotificationId, PYSNMP_MODULE_ID=mgnt2NMS, mgnt2EventLogEventType=mgnt2EventLogEventType, mgnt2ActiveAlmEntry=mgnt2ActiveAlmEntry, mgnt2UploadDownloadPasswd=mgnt2UploadDownloadPasswd, mgnt2LacIndex=mgnt2LacIndex, mgnt2ActiveAlmSeverity=mgnt2ActiveAlmSeverity, mgnt2EventLogAdditionalText=mgnt2EventLogAdditionalText, Mgnt2DownloadFileType=Mgnt2DownloadFileType, mgnt2ActiveAlmTime=mgnt2ActiveAlmTime, mgnt2AlmLogSeverity=mgnt2AlmLogSeverity, mgnt2AlmLogGroup=mgnt2AlmLogGroup, mgnt2ActiveAlmBoardNumber=mgnt2ActiveAlmBoardNumber, Mgnt2AlmSeverity=Mgnt2AlmSeverity, mgnt2AlmLogBoardNumber=mgnt2AlmLogBoardNumber, mgnt2UploadDownloadFilename=mgnt2UploadDownloadFilename, mgnt2UploadDownloadTxRetries=mgnt2UploadDownloadTxRetries, mgnt2LacEntry=mgnt2LacEntry, mgnt2SupportMc=mgnt2SupportMc, mgnt2AlmLogTime=mgnt2AlmLogTime, mgnt2SoftwareDownloadActivationFilename=mgnt2SoftwareDownloadActivationFilename, mgnt2EventLogNotificationId=mgnt2EventLogNotificationId, mgnt2ConfigurationActionStatus=mgnt2ConfigurationActionStatus, mgnt2SoftwareDownload=mgnt2SoftwareDownload, mgnt2TrapNMSAlarm=mgnt2TrapNMSAlarm, mgnt2EventLogSourcePortType=mgnt2EventLogSourcePortType, mgnt2SoftwareDownloadActivationSlotNumber=mgnt2SoftwareDownloadActivationSlotNumber, mgnt2EventLogSourcePm=mgnt2EventLogSourcePm, mgnt2ActiveAlmChassisId=mgnt2ActiveAlmChassisId, Mgnt2LacState=Mgnt2LacState, mgnt2LacTable=mgnt2LacTable, mgnt2ActiveAlmNodeControllerIpAddress=mgnt2ActiveAlmNodeControllerIpAddress, mgnt2ActiveAlmSourcePortType=mgnt2ActiveAlmSourcePortType, mgnt2UploadDownloadReceivedFiles=mgnt2UploadDownloadReceivedFiles, mgnt2AlmLogObjectClassIdentifier=mgnt2AlmLogObjectClassIdentifier, mgnt2UploadDownloadLogin=mgnt2UploadDownloadLogin, mgnt2UploadDownloadActionStatus=mgnt2UploadDownloadActionStatus, Mgnt2UploadDownloadActionStatus=Mgnt2UploadDownloadActionStatus, mgnt2SoftwareDownloadActivationErrorString=mgnt2SoftwareDownloadActivationErrorString, mgnt2UploadDownloadErrorCode=mgnt2UploadDownloadErrorCode, mgnt2AlmLogSourcePortNumber=mgnt2AlmLogSourcePortNumber, mgnt2AlmLogChassisId=mgnt2AlmLogChassisId, mgnt2UploadDownload=mgnt2UploadDownload, Mgnt2AlmType=Mgnt2AlmType, Mgnt2ServerAddress=Mgnt2ServerAddress, mgnt2ActiveAlmTable=mgnt2ActiveAlmTable, Mgnt2AlmProbableCause=Mgnt2AlmProbableCause, mgnt2ActiveAlmType=mgnt2ActiveAlmType, Mgnt2UploadDownloadFileCompression=Mgnt2UploadDownloadFileCompression, mgnt2AlmLogProbableCause=mgnt2AlmLogProbableCause, Mgnt2UploadDownloadFileEncoding=Mgnt2UploadDownloadFileEncoding, mgnt2AlmLogSourcePm=mgnt2AlmLogSourcePm, mgnt2EventLogTable=mgnt2EventLogTable, mgnt2PolledInfoConfigurationChecksum=mgnt2PolledInfoConfigurationChecksum, mgnt2ActiveAlmProbableCause=mgnt2ActiveAlmProbableCause, mgnt2NMS=mgnt2NMS, mgnt2EventLogSourcePortNumber=mgnt2EventLogSourcePortNumber, mgnt2EventLogChassisId=mgnt2EventLogChassisId, mgnt2UploadDownloadFileType=mgnt2UploadDownloadFileType, mgnt2AlmLogEntry=mgnt2AlmLogEntry, mgnt2EventLogNodeControllerIpAddress=mgnt2EventLogNodeControllerIpAddress, mgnt2ActiveAlmGroup=mgnt2ActiveAlmGroup, Mgnt2EventSourceType=Mgnt2EventSourceType, mgnt2ActiveAlmAdditionalText=mgnt2ActiveAlmAdditionalText)
