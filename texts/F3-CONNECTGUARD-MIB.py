#
# PySNMP MIB module F3-CONNECTGUARD-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/adva/F3-CONNECTGUARD-MIB
# Produced by pysmi-1.1.12 at Tue May 28 11:43:41 2024
# On host fv-az665-912 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
fsp150cm, = mibBuilder.importSymbols("ADVA-MIB", "fsp150cm")
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint")
TrafficDirection, AfpTagControl, EthernetPortSpeed, VlanTagType, CmPmIntervalType, VlanPriority, SfpMediaType, EthernetMediaType, VlanId, CmPmBinAction, VlanEthertype, SfpConnectorValue, PriorityMapMode, OperationalState, AdminState, SecondaryState, PerfCounter64, F3DisplayString = mibBuilder.importSymbols("CM-COMMON-MIB", "TrafficDirection", "AfpTagControl", "EthernetPortSpeed", "VlanTagType", "CmPmIntervalType", "VlanPriority", "SfpMediaType", "EthernetMediaType", "VlanId", "CmPmBinAction", "VlanEthertype", "SfpConnectorValue", "PriorityMapMode", "OperationalState", "AdminState", "SecondaryState", "PerfCounter64", "F3DisplayString")
f3UsbHostIndex, networkElementEntry, neIndex, shelfIndex, slotIndex = mibBuilder.importSymbols("CM-ENTITY-MIB", "f3UsbHostIndex", "networkElementEntry", "neIndex", "shelfIndex", "slotIndex")
cmFlowEntry, = mibBuilder.importSymbols("CM-FACILITY-MIB", "cmFlowEntry")
PhysicalIndex, = mibBuilder.importSymbols("ENTITY-MIB", "PhysicalIndex")
f3NetFlowPointEntry, f3AccFlowPointEntry = mibBuilder.importSymbols("F3-FPM-MIB", "f3NetFlowPointEntry", "f3AccFlowPointEntry")
SecySCI, = mibBuilder.importSymbols("IEEE8021-SECY-MIB", "SecySCI")
InterfaceIndex, ifIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "ifIndex")
Ipv6Address, = mibBuilder.importSymbols("IPV6-TC", "Ipv6Address")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
iso, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, ModuleIdentity, Bits, ObjectIdentity, Integer32, NotificationType, MibIdentifier, Counter64, Counter32, Unsigned32, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "ModuleIdentity", "Bits", "ObjectIdentity", "Integer32", "NotificationType", "MibIdentifier", "Counter64", "Counter32", "Unsigned32", "TimeTicks")
TextualConvention, TimeStamp, DisplayString, TruthValue, DateAndTime, RowStatus, MacAddress, VariablePointer, StorageType = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TimeStamp", "DisplayString", "TruthValue", "DateAndTime", "RowStatus", "MacAddress", "VariablePointer", "StorageType")
f3ConnectGuardMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36))
f3ConnectGuardMIB.setRevisions(('2016-07-11 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: f3ConnectGuardMIB.setRevisionsDescriptions(('Notes from release 201607110000Z\n          a) added  FlowSecureState back to the mib since the mib has been released\n         Notes from release 201607080000Z\n          a) deprecated f3FlowExtConnectGuardTable moved the attributes to cmFlowTable\n          b) removed f3AccFlowpointExtConnectGuardTable and f3NetFlowpointExtConnectGuardTable\n             and moved the attributes to acc/net flowpoint tables\n         Notes from release 201606200000Z\n          a) added f3ConnectGuardFlowKeyInjectFlowPoint to f3ConnectGuardFlowTable\n         Notes from release 201606170000Z\n          a) added f3MPFlowExtConnectGuardTable\n         Notes from release 201606060000Z\n          a) added f3ConnectGuardFlowKeyExchangeFrameOuterVlanEtherType, f3ConnectGuardFlowKeyExchangeFrameInner1VlanEtherType,\n             and f3ConnectGuardFlowKeyExchangeFrameInner2VlanEtherType to f3ConnectGuardFlowTable\n         Notes from release 201605100000Z\n          a) added f3AccFlowpointExtConnectGuardTable and f3NetFlowpointExtConnectGuardTable\n             to support secure flow on flow point\n         Notes from release 201604120000Z\n          a) added system level scalar f3ConnectGuardCryptoPasswordControl\n         Notes from release 201601260000Z\n          a) add f3ConnectGuardFlowAlias to f3ConnectGuardFlowTable\n         Notes from release 201409120000Z\n          \n         Notes from release 201601040000Z\n           a) add f3ConnectGuardFlowAssociatedMep to f3ConnectGuardFlowTable\n        ',))
if mibBuilder.loadTexts: f3ConnectGuardMIB.setLastUpdated('201607110000Z')
if mibBuilder.loadTexts: f3ConnectGuardMIB.setOrganization('ADVA Optical Networking')
if mibBuilder.loadTexts: f3ConnectGuardMIB.setContactInfo('        Jack Chen\n                     ADVA Optical Networking, Inc.\n                Tel: +86755 86217400-8205\n             E-mail: jchen@advaoptical.com\n             Postal: \n             ')
if mibBuilder.loadTexts: f3ConnectGuardMIB.setDescription('This module defines the Connect Guard MIB definitions used by \n             the F3 (FSP150CM/CC) product lines.\n             Copyright (C) ADVA Optical Networking.')
f3ConnectGuardConfigObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 1))
f3ConnectGuardPerformanceObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 2))
f3ConnectGuardNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 3))
f3ConnectGuardConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 4))
class FlowSecureState(TextualConvention, Integer32):
    description = 'Flow secure state.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("secureNormal", 1), ("secureBlocked", 2), ("unsecureNormal", 3), ("unsecureBlocked", 4))

class CipherSuiteType(TextualConvention, Integer32):
    description = 'This object describes the cipher suite type.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("gcmAes256", 1), ("gcmAes128", 2))

class KeyExchangeFrameTagControl(TextualConvention, Integer32):
    description = 'This object describes the key exchange frame tag mode.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("autoSelect", 1), ("manual", 2))

class ScSaState(TextualConvention, Integer32):
    description = 'This object describes the SC State.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("inUse", 1), ("notInUse", 2))

class ConnectGuardKeyExMode(TextualConvention, Integer32):
    description = 'This object describes the Connect Guard Key exchange mode.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("authPasswordBasedDiffieHellman", 1), ("caBasedDiffieHellman", 2), ("ieee8021x", 3))

class DiffieHellmanKeyPairLength(TextualConvention, Integer32):
    description = 'This object describes supported length used in DiffieHellman algorithm.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("length2048", 1), ("length4096", 2))

class ConnectGuardFlowActionType(TextualConvention, Integer32):
    description = 'The action on mac sec flow.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("noAction", 1), ("restartKeyXchg", 2))

f3ConnectGuardFlowTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 1, 1), )
if mibBuilder.loadTexts: f3ConnectGuardFlowTable.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardFlowTable.setDescription('A list of entries for the Connect Guard flow.')
f3ConnectGuardFlowEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 1, 1, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-CONNECTGUARD-MIB", "f3ConnectGuardFlowIndex"))
if mibBuilder.loadTexts: f3ConnectGuardFlowEntry.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardFlowEntry.setDescription('A conceptual row in the f3ConnectGuardFlowTable.')
f3ConnectGuardFlowIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 1, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: f3ConnectGuardFlowIndex.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardFlowIndex.setDescription('The index of the Connect Guard flow entry.')
f3ConnectGuardFlowCipherSuite = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 1, 1, 1, 2), CipherSuiteType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3ConnectGuardFlowCipherSuite.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardFlowCipherSuite.setDescription('This object defines the cipher suite type for this flow.')
f3ConnectGuardFlowAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 1, 1, 1, 3), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3ConnectGuardFlowAdminState.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardFlowAdminState.setDescription('This object represents the Administrative State of the Flow.')
f3ConnectGuardFlowSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 1, 1, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ConnectGuardFlowSecondaryState.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardFlowSecondaryState.setDescription('This object represents the Secondary State of the Flow.')
f3ConnectGuardFlowOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 1, 1, 1, 5), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ConnectGuardFlowOperationalState.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardFlowOperationalState.setDescription('This object represents the Operational State of the Flow.')
f3ConnectGuardFlowEgressInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 1, 1, 1, 6), VariablePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3ConnectGuardFlowEgressInterface.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardFlowEgressInterface.setDescription('This object defines the Connect Guard Flow egress interface.')
f3ConnectGuardFlowKeyExchangeProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 1, 1, 1, 7), VariablePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3ConnectGuardFlowKeyExchangeProfile.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardFlowKeyExchangeProfile.setDescription('This object defines the key exchange profile to be used for the secure flow.')
f3ConnectGuardFlowKeyExchangeFrameTagControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 1, 1, 1, 8), KeyExchangeFrameTagControl()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3ConnectGuardFlowKeyExchangeFrameTagControl.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardFlowKeyExchangeFrameTagControl.setDescription('This object defines the key exchange frame tag mode.')
f3ConnectGuardFlowKeyExchangeFrameOuterVlanEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 1, 1, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3ConnectGuardFlowKeyExchangeFrameOuterVlanEnabled.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardFlowKeyExchangeFrameOuterVlanEnabled.setDescription('This object controls the key exchange frame Outer Vlan.')
f3ConnectGuardFlowKeyExchangeFrameOuterVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 1, 1, 1, 10), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3ConnectGuardFlowKeyExchangeFrameOuterVlanId.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardFlowKeyExchangeFrameOuterVlanId.setDescription('This object defines the key exchange frame outer Vlan ID')
f3ConnectGuardFlowKeyExchangeFrameOuterVlanPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 1, 1, 1, 11), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3ConnectGuardFlowKeyExchangeFrameOuterVlanPriority.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardFlowKeyExchangeFrameOuterVlanPriority.setDescription('This object defines the key exchange frame outer Vlan Priority.')
f3ConnectGuardFlowKeyExchangeFrameInner1VlanEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 1, 1, 1, 12), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3ConnectGuardFlowKeyExchangeFrameInner1VlanEnabled.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardFlowKeyExchangeFrameInner1VlanEnabled.setDescription('This object controls the key exchange frame Inner Vlan.')
f3ConnectGuardFlowKeyExchangeFrameInner1VlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 1, 1, 1, 13), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3ConnectGuardFlowKeyExchangeFrameInner1VlanId.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardFlowKeyExchangeFrameInner1VlanId.setDescription('This object defines the key exchange frame Inner Vlan ID')
f3ConnectGuardFlowKeyExchangeFrameInner1VlanPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 1, 1, 1, 14), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3ConnectGuardFlowKeyExchangeFrameInner1VlanPriority.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardFlowKeyExchangeFrameInner1VlanPriority.setDescription('This object defines the key exchange frame Inner Vlan Priority.')
f3ConnectGuardFlowKeyExchangeFrameInner2VlanEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 1, 1, 1, 15), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3ConnectGuardFlowKeyExchangeFrameInner2VlanEnabled.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardFlowKeyExchangeFrameInner2VlanEnabled.setDescription('This object controls the key exchange frame Inner most Vlan.')
f3ConnectGuardFlowKeyExchangeFrameInner2VlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 1, 1, 1, 16), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3ConnectGuardFlowKeyExchangeFrameInner2VlanId.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardFlowKeyExchangeFrameInner2VlanId.setDescription('This object defines the key exchange frame Inner most Vlan ID')
f3ConnectGuardFlowKeyExchangeFrameInner2VlanPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 1, 1, 1, 17), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3ConnectGuardFlowKeyExchangeFrameInner2VlanPriority.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardFlowKeyExchangeFrameInner2VlanPriority.setDescription('This object defines the key exchange frame Inner most Vlan Priority.')
f3ConnectGuardFlowKeyExchangeInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 1, 1, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3ConnectGuardFlowKeyExchangeInterval.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardFlowKeyExchangeInterval.setDescription('This object defines the key exchange interval value, in one minute increment')
f3ConnectGuardFlowTagsClear = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 1, 1, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3ConnectGuardFlowTagsClear.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardFlowTagsClear.setDescription('This object defines the number of tags to by pass in encryption')
f3ConnectGuardFlowStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 1, 1, 1, 20), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3ConnectGuardFlowStorageType.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardFlowStorageType.setDescription('The type of storage configured for this entry.')
f3ConnectGuardFlowRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 1, 1, 1, 21), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3ConnectGuardFlowRowStatus.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardFlowRowStatus.setDescription('The status of this row.\n            An entry MUST NOT exist in the active state unless all\n            objects in the entry have an appropriate value, as described\n            in the description clause for each writable object.\n\n            The values of f3ConnectGuardFlowRowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            f3ConnectGuardFlowRowStatus value as createAndGo(4).\n            Upon successful row creation, this variable has a\n            value of active(1).\n\n            The f3ConnectGuardFlowRowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
f3ConnectGuardFlowKeyXchgFailsCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 1, 1, 1, 22), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ConnectGuardFlowKeyXchgFailsCounts.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardFlowKeyXchgFailsCounts.setDescription('This object counts number of times key exchange protocol failed.')
f3ConnectGuardFlowAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 1, 1, 1, 23), ConnectGuardFlowActionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3ConnectGuardFlowAction.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardFlowAction.setDescription('This object describe operation on the Connect Guard flow.')
f3ConnectGuardFlowReplayProtectionEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 1, 1, 1, 24), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3ConnectGuardFlowReplayProtectionEnabled.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardFlowReplayProtectionEnabled.setDescription('This object can be used to enable/disable replay proctection.')
f3ConnectGuardFlowReplayProtectionWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 1, 1, 1, 25), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3ConnectGuardFlowReplayProtectionWindow.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardFlowReplayProtectionWindow.setDescription('This object defines replay proctection window value.')
f3ConnectGuardFlowRemoteMacAddrEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 1, 1, 1, 26), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3ConnectGuardFlowRemoteMacAddrEnabled.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardFlowRemoteMacAddrEnabled.setDescription('This object can be used to enable/disable remote MAC Address that used as the destination MAC address in the \n            key exchange protocol packets.')
f3ConnectGuardFlowRemoteMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 1, 1, 1, 27), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3ConnectGuardFlowRemoteMacAddr.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardFlowRemoteMacAddr.setDescription('This object defines remote MAC Address value.')
f3ConnectGuardFlowAssociatedMep = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 1, 1, 1, 28), VariablePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3ConnectGuardFlowAssociatedMep.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardFlowAssociatedMep.setDescription('This object speicify the mep object to use as trigger for key exchange failure')
f3ConnectGuardFlowAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 1, 1, 1, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3ConnectGuardFlowAlias.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardFlowAlias.setDescription("This object speicify the connect guard flow's alias.")
f3ConnectGuardFlowKeyExchangeFrameOuterVlanEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 1, 1, 1, 30), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3ConnectGuardFlowKeyExchangeFrameOuterVlanEtherType.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardFlowKeyExchangeFrameOuterVlanEtherType.setDescription('Outer vlan ether type used in key exchange.')
f3ConnectGuardFlowKeyExchangeFrameInner1VlanEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 1, 1, 1, 31), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3ConnectGuardFlowKeyExchangeFrameInner1VlanEtherType.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardFlowKeyExchangeFrameInner1VlanEtherType.setDescription('Inner1 vlan ether type used in key exchange.')
f3ConnectGuardFlowKeyExchangeFrameInner2VlanEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 1, 1, 1, 32), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3ConnectGuardFlowKeyExchangeFrameInner2VlanEtherType.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardFlowKeyExchangeFrameInner2VlanEtherType.setDescription('Inner2 vlan ether type used in key exchange.')
f3ConnectGuardFlowKeyInjectFlowPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 1, 1, 1, 33), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3ConnectGuardFlowKeyInjectFlowPoint.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardFlowKeyInjectFlowPoint.setDescription('Pointer to a flowpoint used to up inject key exchange frames in case of ERP.')
f3ConnectGuardKeyExchangeProfileTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 1, 2), )
if mibBuilder.loadTexts: f3ConnectGuardKeyExchangeProfileTable.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardKeyExchangeProfileTable.setDescription('A list of entries for the key exchange profile.')
f3ConnectGuardKeyExchangeProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 1, 2, 1), ).setIndexNames((0, "F3-CONNECTGUARD-MIB", "f3ConnectGuardKeyExchangeProfileIndex"))
if mibBuilder.loadTexts: f3ConnectGuardKeyExchangeProfileEntry.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardKeyExchangeProfileEntry.setDescription('A conceptual row in the f3ConnectGuardKeyExchangeProfileTable.')
f3ConnectGuardKeyExchangeProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 1, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: f3ConnectGuardKeyExchangeProfileIndex.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardKeyExchangeProfileIndex.setDescription('The index of the key exchange profile.')
f3ConnectGuardKeyExchangeProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 1, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3ConnectGuardKeyExchangeProfileName.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardKeyExchangeProfileName.setDescription('The name of this profile.')
f3ConnectGuardKeyExchangeProfileUserId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 1, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ConnectGuardKeyExchangeProfileUserId.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardKeyExchangeProfileUserId.setDescription('The user name who created this profile. It is automatically set by the system.')
f3ConnectGuardKeyExchangeProfileMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 1, 2, 1, 4), ConnectGuardKeyExMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3ConnectGuardKeyExchangeProfileMode.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardKeyExchangeProfileMode.setDescription('The key exchange mode.')
f3ConnectGuardKeyExchangeProfileAuthPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 1, 2, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3ConnectGuardKeyExchangeProfileAuthPassword.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardKeyExchangeProfileAuthPassword.setDescription('The authentication password for this profile.')
f3ConnectGuardKeyExchangeProfileDiffieHellmanKeyPairLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 1, 2, 1, 6), DiffieHellmanKeyPairLength()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3ConnectGuardKeyExchangeProfileDiffieHellmanKeyPairLen.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardKeyExchangeProfileDiffieHellmanKeyPairLen.setDescription('The Diffie-Hellman key pair length for this profile.')
f3ConnectGuardKeyExchangeProfileStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 1, 2, 1, 7), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3ConnectGuardKeyExchangeProfileStorageType.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardKeyExchangeProfileStorageType.setDescription('The type of storage configured for this entry.')
f3ConnectGuardKeyExchangeProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 1, 2, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3ConnectGuardKeyExchangeProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardKeyExchangeProfileRowStatus.setDescription('The status of this row.\n            An entry MUST NOT exist in the active state unless all\n            objects in the entry have an appropriate value, as described\n            in the description clause for each writable object.\n\n            The values of f3ConnectGuardKeyExchangeProfileRowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            f3ConnectGuardKeyExchangeProfileRowStatus value as createAndGo(4).\n            Upon successful row creation, this variable has a\n            value of active(1).\n\n            The f3ConnectGuardKeyExchangeProfileRowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
f3ConnectGuardTxSCTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 1, 3), )
if mibBuilder.loadTexts: f3ConnectGuardTxSCTable.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardTxSCTable.setDescription('A list of entries for the Connect Guard TX SC.')
f3ConnectGuardTxSCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 1, 3, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-CONNECTGUARD-MIB", "f3ConnectGuardFlowIndex"), (0, "F3-CONNECTGUARD-MIB", "f3ConnectGuardTxSCIndex"))
if mibBuilder.loadTexts: f3ConnectGuardTxSCEntry.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardTxSCEntry.setDescription('A conceptual row in the f3ConnectGuardTxSCTable.')
f3ConnectGuardTxSCIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 1, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: f3ConnectGuardTxSCIndex.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardTxSCIndex.setDescription('The index of the Connect Guard TX SC entry.')
f3ConnectGuardTxSCI = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 1, 3, 1, 2), SecySCI()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ConnectGuardTxSCI.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardTxSCI.setDescription('The index of the Connect Guard TX SCI.')
f3ConnectGuardTxScState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 1, 3, 1, 3), ScSaState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ConnectGuardTxScState.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardTxScState.setDescription('This object defines the Tx Sc State.')
f3ConnectGuardCurrentTxSa = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 1, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ConnectGuardCurrentTxSa.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardCurrentTxSa.setDescription('This object defines the AN number of current Tx SA.\n            -1 means no current Tx SA.')
f3ConnectGuardPreviousTxSa = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 1, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ConnectGuardPreviousTxSa.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardPreviousTxSa.setDescription('This object defines the AN number of previous Tx SA.\n            -1 means no previous Tx SA.')
f3ConnectGuardTxScCreateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 1, 3, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ConnectGuardTxScCreateTime.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardTxScCreateTime.setDescription('This object defines the system time when the SC was created.')
f3ConnectGuardTxScStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 1, 3, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ConnectGuardTxScStartTime.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardTxScStartTime.setDescription('The system time when this transmitting SC last started\n \t           transmitting Connect Guard frames.')
f3ConnectGuardTxScStopTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 1, 3, 1, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ConnectGuardTxScStopTime.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardTxScStopTime.setDescription('The system time when this transmitting SC last stopped\n \t           transmitting Connect Guard frames.')
f3ConnectGuardRxSCTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 1, 4), )
if mibBuilder.loadTexts: f3ConnectGuardRxSCTable.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardRxSCTable.setDescription('A list of entries for the Connect Guard RX SC.')
f3ConnectGuardRxSCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 1, 4, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-CONNECTGUARD-MIB", "f3ConnectGuardFlowIndex"), (0, "F3-CONNECTGUARD-MIB", "f3ConnectGuardRxSCIndex"))
if mibBuilder.loadTexts: f3ConnectGuardRxSCEntry.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardRxSCEntry.setDescription('A conceptual row in the f3ConnectGuardRxSCTable.')
f3ConnectGuardRxSCIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 1, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: f3ConnectGuardRxSCIndex.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardRxSCIndex.setDescription('The RX SC number.')
f3ConnectGuardRxSCI = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 1, 4, 1, 2), SecySCI()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ConnectGuardRxSCI.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardRxSCI.setDescription('The SCI value, includes 8 bytes.')
f3ConnectGuardRxScState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 1, 4, 1, 3), ScSaState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ConnectGuardRxScState.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardRxScState.setDescription('The state of the receiving SC in the SecY.\n            inUse(1) : means any of SAs for this SC is in use.\n            notInUse(2) : means no SAs for this SC is in use.')
f3ConnectGuardCurrentRxSa = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 1, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ConnectGuardCurrentRxSa.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardCurrentRxSa.setDescription('The AN number of current Rx SA, -1 means no current Rx SA.')
f3ConnectGuardRxScCreateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 1, 4, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ConnectGuardRxScCreateTime.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardRxScCreateTime.setDescription('The system time when this receiving SC was created.')
f3ConnectGuardRxScStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 1, 4, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ConnectGuardRxScStartTime.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardRxScStartTime.setDescription('The system time when this receiving SC last started\n             receiving ConnectGuard frames.')
f3ConnectGuardRxScStopTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 1, 4, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ConnectGuardRxScStopTime.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardRxScStopTime.setDescription('The system time when this receiving SC last stopped\n             receiving ConnectGuard frames.')
f3ConnectGuardTxSATable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 1, 5), )
if mibBuilder.loadTexts: f3ConnectGuardTxSATable.setReference('IEEE 802.1AE Clause 10.7.21')
if mibBuilder.loadTexts: f3ConnectGuardTxSATable.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardTxSATable.setDescription('A table for providing information about the status of each\n         transmitting SA supported by the MAC security entity.')
f3ConnectGuardTxSAEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 1, 5, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-CONNECTGUARD-MIB", "f3ConnectGuardFlowIndex"), (0, "F3-CONNECTGUARD-MIB", "f3ConnectGuardTxSCIndex"), (0, "F3-CONNECTGUARD-MIB", "f3ConnectGuardTxSAIndex"))
if mibBuilder.loadTexts: f3ConnectGuardTxSAEntry.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardTxSAEntry.setDescription('An entry containing transmitting SA management information\n         applicable to a particular SA.')
f3ConnectGuardTxSAIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 1, 5, 1, 1), Unsigned32())
if mibBuilder.loadTexts: f3ConnectGuardTxSAIndex.setReference('IEEE 802.1AE Clause 10.7.21')
if mibBuilder.loadTexts: f3ConnectGuardTxSAIndex.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardTxSAIndex.setDescription('The association number (AN) for identifying a transmitting\n         SA.')
f3ConnectGuardTxSAState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 1, 5, 1, 2), ScSaState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ConnectGuardTxSAState.setReference('IEEE 802.1AE Clause 10.7.22')
if mibBuilder.loadTexts: f3ConnectGuardTxSAState.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardTxSAState.setDescription('The current status of the transmitting SA.\n         inUse(1) : means this SA is in use.\n         notInUse(2) : means this SA is not in use.')
f3ConnectGuardTxSANextPN = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 1, 5, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ConnectGuardTxSANextPN.setReference('IEEE 802.1AE Clause 10.7.21')
if mibBuilder.loadTexts: f3ConnectGuardTxSANextPN.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardTxSANextPN.setDescription('The next packet number (PN) that will be used in transmitting\n         ConnectGuard frames in the SA.')
f3ConnectGuardTxSASAKUnchanged = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 1, 5, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ConnectGuardTxSASAKUnchanged.setReference('IEEE 802.1AE Clause 10.7.21')
if mibBuilder.loadTexts: f3ConnectGuardTxSASAKUnchanged.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardTxSASAKUnchanged.setDescription('A reference to an SAK that is unchanged for the life\n         of the transmitting SA.')
f3ConnectGuardTxSACreatedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 1, 5, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ConnectGuardTxSACreatedTime.setReference('IEEE 802.1AE Clause 10.7.22')
if mibBuilder.loadTexts: f3ConnectGuardTxSACreatedTime.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardTxSACreatedTime.setDescription('The system time when this transmitting SA was created.')
f3ConnectGuardTxSAStartedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 1, 5, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ConnectGuardTxSAStartedTime.setReference('IEEE 802.1AE Clause 10.7.22')
if mibBuilder.loadTexts: f3ConnectGuardTxSAStartedTime.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardTxSAStartedTime.setDescription('The system time when this transmitting SA last started\n         transmitting ConnectGuard frames.')
f3ConnectGuardTxSAStoppedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 1, 5, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ConnectGuardTxSAStoppedTime.setReference('IEEE 802.1AE Clause 10.7.22')
if mibBuilder.loadTexts: f3ConnectGuardTxSAStoppedTime.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardTxSAStoppedTime.setDescription('The system time when this transmitting SA last stopped\n         transmitting ConnectGuard frames.')
f3ConnectGuardRxSATable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 1, 6), )
if mibBuilder.loadTexts: f3ConnectGuardRxSATable.setReference('IEEE 802.1AE Clause 10.7.21')
if mibBuilder.loadTexts: f3ConnectGuardRxSATable.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardRxSATable.setDescription('A table for providing information about the status of each\n         transmitting SA supported by the MAC security entity.')
f3ConnectGuardRxSAEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 1, 6, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-CONNECTGUARD-MIB", "f3ConnectGuardFlowIndex"), (0, "F3-CONNECTGUARD-MIB", "f3ConnectGuardRxSCIndex"), (0, "F3-CONNECTGUARD-MIB", "f3ConnectGuardRxSAIndex"))
if mibBuilder.loadTexts: f3ConnectGuardRxSAEntry.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardRxSAEntry.setDescription('An entry containing transmitting SA management information\n         applicable to a particular SA.')
f3ConnectGuardRxSAIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 1, 6, 1, 1), Unsigned32())
if mibBuilder.loadTexts: f3ConnectGuardRxSAIndex.setReference('IEEE 802.1AE Clause 10.7.21')
if mibBuilder.loadTexts: f3ConnectGuardRxSAIndex.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardRxSAIndex.setDescription('The association number (AN) for identifying a transmitting\n         SA.')
f3ConnectGuardRxSAState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 1, 6, 1, 2), ScSaState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ConnectGuardRxSAState.setReference('IEEE 802.1AE Clause 10.7.22')
if mibBuilder.loadTexts: f3ConnectGuardRxSAState.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardRxSAState.setDescription('The current status of the transmitting SA.\n         inUse(1) : means this SA is in use.\n         notInUse(2) : means this SA is not in use.')
f3ConnectGuardRxSANextPN = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 1, 6, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ConnectGuardRxSANextPN.setReference('IEEE 802.1AE Clause 10.7.21')
if mibBuilder.loadTexts: f3ConnectGuardRxSANextPN.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardRxSANextPN.setDescription('The next packet number (PN) that will be used in transmitting\n         ConnectGuard frames in the SA.')
f3ConnectGuardRxSASAKUnchanged = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 1, 6, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ConnectGuardRxSASAKUnchanged.setReference('IEEE 802.1AE Clause 10.7.21')
if mibBuilder.loadTexts: f3ConnectGuardRxSASAKUnchanged.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardRxSASAKUnchanged.setDescription('A reference to an SAK that is unchanged for the life\n         of the transmitting SA.')
f3ConnectGuardRxSACreatedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 1, 6, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ConnectGuardRxSACreatedTime.setReference('IEEE 802.1AE Clause 10.7.22')
if mibBuilder.loadTexts: f3ConnectGuardRxSACreatedTime.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardRxSACreatedTime.setDescription('The system time when this transmitting SA was created.')
f3ConnectGuardRxSAStartedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 1, 6, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ConnectGuardRxSAStartedTime.setReference('IEEE 802.1AE Clause 10.7.22')
if mibBuilder.loadTexts: f3ConnectGuardRxSAStartedTime.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardRxSAStartedTime.setDescription('The system time when this transmitting SA last started\n         transmitting ConnectGuard frames.')
f3ConnectGuardRxSAStoppedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 1, 6, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ConnectGuardRxSAStoppedTime.setReference('IEEE 802.1AE Clause 10.7.22')
if mibBuilder.loadTexts: f3ConnectGuardRxSAStoppedTime.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardRxSAStoppedTime.setDescription('The system time when this transmitting SA last stopped\n         transmitting ConnectGuard frames.')
f3FlowExtConnectGuardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 1, 7), )
if mibBuilder.loadTexts: f3FlowExtConnectGuardTable.setStatus('deprecated')
if mibBuilder.loadTexts: f3FlowExtConnectGuardTable.setDescription('A list of entries corresponding to Flow for configuration purposes.\n             This table has been deprecated. Attributes have been moved to \n             cmFlowTable.')
f3FlowExtConnectGuardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 1, 7, 1), )
cmFlowEntry.registerAugmentions(("F3-CONNECTGUARD-MIB", "f3FlowExtConnectGuardEntry"))
f3FlowExtConnectGuardEntry.setIndexNames(*cmFlowEntry.getIndexNames())
if mibBuilder.loadTexts: f3FlowExtConnectGuardEntry.setStatus('deprecated')
if mibBuilder.loadTexts: f3FlowExtConnectGuardEntry.setDescription('A conceptual row in the f3FlowExtConnectGuardTable.')
f3FlowRefConnectGuardFlowObject = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 1, 7, 1, 1), VariablePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3FlowRefConnectGuardFlowObject.setStatus('current')
if mibBuilder.loadTexts: f3FlowRefConnectGuardFlowObject.setDescription('This object specifies Mac Sec flow object OID.')
f3FlowSecureBlockingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 1, 7, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3FlowSecureBlockingEnabled.setStatus('current')
if mibBuilder.loadTexts: f3FlowSecureBlockingEnabled.setDescription('This object can be used to enable/disable secure block.')
f3FlowSecureState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 1, 7, 1, 3), FlowSecureState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3FlowSecureState.setStatus('current')
if mibBuilder.loadTexts: f3FlowSecureState.setDescription('This object specifies the secure state of this flow.')
f3ConnectGuardConfigScalars = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 1, 8))
f3ConnectGuardPasswordScalars = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 1, 9))
f3ConnectGuardCryptoPassword = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 1, 9, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3ConnectGuardCryptoPassword.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardCryptoPassword.setDescription('This is the second level password for the crypto user. \n        This password is required to modify ConnectGuard objects. \n        Every set request that involves a ConnectGuard object should \n        include this variable with correct password value to succeed.')
f3ConnectGuardRestoreFactoryApproved = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 1, 8, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3ConnectGuardRestoreFactoryApproved.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardRestoreFactoryApproved.setDescription('Crypto user can use this object to enable/disable restore factory defaults on the NID.')
f3ConnectGuardSoftwareVersionApproved = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 1, 8, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3ConnectGuardSoftwareVersionApproved.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardSoftwareVersionApproved.setDescription('This object describes the software version that crypto user approved for upgrade.')
f3ConnectGuardSoftwareInstallApproved = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 1, 8, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3ConnectGuardSoftwareInstallApproved.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardSoftwareInstallApproved.setDescription('Crypto user can use this object to enable/disable sofware install on the NID.')
f3ConnectGuardRestoreDatabaseApproved = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 1, 8, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3ConnectGuardRestoreDatabaseApproved.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardRestoreDatabaseApproved.setDescription('Crypto user can use this object to enable/disable restore database on the NID.')
f3ConnectGuardConfigFileLoadApproved = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 1, 8, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3ConnectGuardConfigFileLoadApproved.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardConfigFileLoadApproved.setDescription('Crypto user can use this object to enable/disable config file operation on the NID.')
f3ConnectGuardCryptoPasswordControl = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 1, 8, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3ConnectGuardCryptoPasswordControl.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardCryptoPasswordControl.setDescription('A system level attribute to disable/enable crypto password request when changing ConnectGuard attributes.')
f3ConnectGuardFlowStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 2, 1), )
if mibBuilder.loadTexts: f3ConnectGuardFlowStatsTable.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardFlowStatsTable.setDescription('A collection of Mac Sec Flow statistics.  \n             These reflect the current data.')
f3ConnectGuardFlowStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 2, 1, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-CONNECTGUARD-MIB", "f3ConnectGuardFlowIndex"), (0, "F3-CONNECTGUARD-MIB", "f3ConnectGuardFlowStatsIndex"))
if mibBuilder.loadTexts: f3ConnectGuardFlowStatsEntry.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardFlowStatsEntry.setDescription('A conceptual row in the f3ConnectGuardFlowStatsTable.\n             Entries exist in this table for each Connect Guard Flow.')
f3ConnectGuardFlowStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: f3ConnectGuardFlowStatsIndex.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardFlowStatsIndex.setDescription('An arbitrary integer index value used to uniquely identify\n            this Connect Guard Flow statistics entry. \n            1 - 15min\n            2 - 1day\n            3 - rollover\n            4 - 5min')
f3ConnectGuardFlowStatsIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 2, 1, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ConnectGuardFlowStatsIntervalType.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardFlowStatsIntervalType.setDescription('Indicates the type of collection, i.e. whether it is\n             15 Min, 1 Day or rollover.')
f3ConnectGuardFlowStatsValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 2, 1, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ConnectGuardFlowStatsValid.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardFlowStatsValid.setDescription('Indicates the validity of the bin.')
f3ConnectGuardFlowStatsAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 2, 1, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3ConnectGuardFlowStatsAction.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardFlowStatsAction.setDescription('Allows the operator to clear the bin.')
f3ConnectGuardFlowStatsTxUntaggedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 2, 1, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ConnectGuardFlowStatsTxUntaggedPkts.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardFlowStatsTxUntaggedPkts.setDescription('The number of transmitted packets without the MAC\tsecurity tag (SecTAG).')
f3ConnectGuardFlowStatsTxTooLongPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 2, 1, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ConnectGuardFlowStatsTxTooLongPkts.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardFlowStatsTxTooLongPkts.setDescription('The number of transmitted packets discarded because the packet\n \t        length is greater than the ifMtu of the Common Port interface.')
f3ConnectGuardFlowStatsRxUntaggedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 2, 1, 1, 7), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ConnectGuardFlowStatsRxUntaggedPkts.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardFlowStatsRxUntaggedPkts.setDescription('The number of received packets without the MAC security tag(SecTAG).')
f3ConnectGuardFlowStatsRxNotagPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 2, 1, 1, 8), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ConnectGuardFlowStatsRxNotagPkts.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardFlowStatsRxNotagPkts.setDescription('The number of received packets discarded without the MAC security tag (SecTAG).')
f3ConnectGuardFlowStatsRxBadtagPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 2, 1, 1, 9), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ConnectGuardFlowStatsRxBadtagPkts.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardFlowStatsRxBadtagPkts.setDescription('The number of received packets discarded with an invalid\n \t        SecTAG or a zero value PN or an invalid ICV.')
f3ConnectGuardFlowStatsRxUnknownSCIPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 2, 1, 1, 10), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ConnectGuardFlowStatsRxUnknownSCIPkts.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardFlowStatsRxUnknownSCIPkts.setDescription('The number of received packets with unknown SCI.')
f3ConnectGuardFlowStatsRxNoSCIPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 2, 1, 1, 11), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ConnectGuardFlowStatsRxNoSCIPkts.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardFlowStatsRxNoSCIPkts.setDescription('The number of received packets discarded with unknown SCI information.')
f3ConnectGuardFlowStatsRxOverrunPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 2, 1, 1, 12), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ConnectGuardFlowStatsRxOverrunPkts.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardFlowStatsRxOverrunPkts.setDescription('The number of packets discarded because the number of\n         received packets exceeded the cryptographic performance\n         capabilities.')
f3ConnectGuardFlowHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 2, 2), )
if mibBuilder.loadTexts: f3ConnectGuardFlowHistoryTable.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardFlowHistoryTable.setDescription('A collection of Connect Guard Flow history statistics.  \n             These reflect the history data.')
f3ConnectGuardFlowHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 2, 2, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-CONNECTGUARD-MIB", "f3ConnectGuardFlowIndex"), (0, "F3-CONNECTGUARD-MIB", "f3ConnectGuardFlowStatsIndex"), (0, "F3-CONNECTGUARD-MIB", "f3ConnectGuardFlowHistoryIndex"))
if mibBuilder.loadTexts: f3ConnectGuardFlowHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardFlowHistoryEntry.setDescription('A conceptual row in the f3ConnectGuardFlowHistoryTable.\n             Entries exist in this table for each Connect Guard Flow.')
f3ConnectGuardFlowHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 2, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: f3ConnectGuardFlowHistoryIndex.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardFlowHistoryIndex.setDescription('An arbitrary integer index value used to uniquely identify\n            this Connect Guard Flow statistics entry.')
f3ConnectGuardFlowHistoryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 2, 2, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ConnectGuardFlowHistoryTime.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardFlowHistoryTime.setDescription('Indicates the time of history bin creation.')
f3ConnectGuardFlowHistoryValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 2, 2, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ConnectGuardFlowHistoryValid.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardFlowHistoryValid.setDescription('Indicates the validity of the bin.')
f3ConnectGuardFlowHistoryAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 2, 2, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3ConnectGuardFlowHistoryAction.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardFlowHistoryAction.setDescription('Allows the operator to clear the bin.')
f3ConnectGuardFlowHistoryTxUntaggedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 2, 2, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ConnectGuardFlowHistoryTxUntaggedPkts.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardFlowHistoryTxUntaggedPkts.setDescription('The number of transmitted packets without the MAC\tsecurity tag (SecTAG).')
f3ConnectGuardFlowHistoryTxTooLongPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 2, 2, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ConnectGuardFlowHistoryTxTooLongPkts.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardFlowHistoryTxTooLongPkts.setDescription('The number of transmitted packets discarded because the packet\n \t        length is greater than the ifMtu of the Common Port interface.')
f3ConnectGuardFlowHistoryRxUntaggedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 2, 2, 1, 7), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ConnectGuardFlowHistoryRxUntaggedPkts.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardFlowHistoryRxUntaggedPkts.setDescription('The number of received packets without the MAC security tag(SecTAG).')
f3ConnectGuardFlowHistoryRxNotagPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 2, 2, 1, 8), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ConnectGuardFlowHistoryRxNotagPkts.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardFlowHistoryRxNotagPkts.setDescription('The number of received packets discarded without the MAC security tag (SecTAG).')
f3ConnectGuardFlowHistoryRxBadtagPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 2, 2, 1, 9), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ConnectGuardFlowHistoryRxBadtagPkts.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardFlowHistoryRxBadtagPkts.setDescription('The number of received packets discarded with an invalid\n \t        SecTAG or a zero value PN or an invalid ICV.')
f3ConnectGuardFlowHistoryRxUnknownSCIPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 2, 2, 1, 10), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ConnectGuardFlowHistoryRxUnknownSCIPkts.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardFlowHistoryRxUnknownSCIPkts.setDescription('The number of received packets with unknown SCI.')
f3ConnectGuardFlowHistoryRxNoSCIPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 2, 2, 1, 11), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ConnectGuardFlowHistoryRxNoSCIPkts.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardFlowHistoryRxNoSCIPkts.setDescription('The number of received packets discarded with unknown SCI information.')
f3ConnectGuardFlowHistoryRxOverrunPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 2, 2, 1, 12), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ConnectGuardFlowHistoryRxOverrunPkts.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardFlowHistoryRxOverrunPkts.setDescription('The number of packets discarded because the number of\n         received packets exceeded the cryptographic performance\n         capabilities.')
f3ConnectGuardFlowThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 2, 3), )
if mibBuilder.loadTexts: f3ConnectGuardFlowThresholdTable.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardFlowThresholdTable.setDescription('A table of entries that allow manageability of Connect Guard Flow\n             Thresholds.')
f3ConnectGuardFlowThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 2, 3, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-CONNECTGUARD-MIB", "f3ConnectGuardFlowIndex"), (0, "F3-CONNECTGUARD-MIB", "f3ConnectGuardFlowStatsIndex"), (0, "F3-CONNECTGUARD-MIB", "f3ConnectGuardFlowThresholdIndex"))
if mibBuilder.loadTexts: f3ConnectGuardFlowThresholdEntry.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardFlowThresholdEntry.setDescription('A conceptual row in the f3PtpAccPortFlowPointThresholdTable.')
f3ConnectGuardFlowThresholdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: f3ConnectGuardFlowThresholdIndex.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardFlowThresholdIndex.setDescription('An index that uniquely identifies an entry in the\n        f3ConnectGuardFlowThresholdTable.')
f3ConnectGuardFlowThresholdInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 2, 3, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ConnectGuardFlowThresholdInterval.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardFlowThresholdInterval.setDescription('The interval over which monitored value is\n        sampled and compared with the specified threshold.')
f3ConnectGuardFlowThresholdVariable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 2, 3, 1, 3), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ConnectGuardFlowThresholdVariable.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardFlowThresholdVariable.setDescription('The object identifier of the particular variable to be\n        sampled.')
f3ConnectGuardFlowThresholdValueLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 2, 3, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3ConnectGuardFlowThresholdValueLo.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardFlowThresholdValueLo.setDescription('Lower 32 bits of the threshold value.')
f3ConnectGuardFlowThresholdValueHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 2, 3, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3ConnectGuardFlowThresholdValueHi.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardFlowThresholdValueHi.setDescription('Higher 32 bits of the threshold value.')
f3ConnectGuardFlowThresholdMonValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 2, 3, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ConnectGuardFlowThresholdMonValue.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardFlowThresholdMonValue.setDescription('Monitored value corresponding to f3ConnectGuardFlowThresholdVariable.')
f3ConnectGuardTxSCStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 2, 4), )
if mibBuilder.loadTexts: f3ConnectGuardTxSCStatsTable.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardTxSCStatsTable.setDescription('A collection of Connect Guard TxSC statistics.  \n             These reflect the current data.')
f3ConnectGuardTxSCStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 2, 4, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-CONNECTGUARD-MIB", "f3ConnectGuardFlowIndex"), (0, "F3-CONNECTGUARD-MIB", "f3ConnectGuardTxSCIndex"), (0, "F3-CONNECTGUARD-MIB", "f3ConnectGuardTxSCStatsIndex"))
if mibBuilder.loadTexts: f3ConnectGuardTxSCStatsEntry.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardTxSCStatsEntry.setDescription('A conceptual row in the f3ConnectGuardTxSCStatsTable.\n             Entries exist in this table for each Connect Guard TxSC.')
f3ConnectGuardTxSCStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: f3ConnectGuardTxSCStatsIndex.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardTxSCStatsIndex.setDescription('An arbitrary integer index value used to uniquely identify\n            this Connect Guard TX SC statistics entry. \n            1 - 15min\n            2 - 1day\n            3 - rollover\n            4 - 5min')
f3ConnectGuardTxSCStatsIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 2, 4, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ConnectGuardTxSCStatsIntervalType.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardTxSCStatsIntervalType.setDescription('Indicates the type of collection, i.e. whether it is\n             15 Min, 1 Day or rollover.')
f3ConnectGuardTxSCStatsValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 2, 4, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ConnectGuardTxSCStatsValid.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardTxSCStatsValid.setDescription('Indicates the validity of the bin.')
f3ConnectGuardTxSCStatsAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 2, 4, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3ConnectGuardTxSCStatsAction.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardTxSCStatsAction.setDescription('Allows the operator to clear the bin.')
f3ConnectGuardTxSCStatsTxProtectedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 2, 4, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ConnectGuardTxSCStatsTxProtectedPkts.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardTxSCStatsTxProtectedPkts.setDescription('The number of integrity protected but not encrypted packets.')
f3ConnectGuardTxSCStatsTxEncryptedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 2, 4, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ConnectGuardTxSCStatsTxEncryptedPkts.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardTxSCStatsTxEncryptedPkts.setDescription('The number of integrity protected and encrypted packets.')
f3ConnectGuardTxSCStatsTxOctetsProtected = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 2, 4, 1, 7), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ConnectGuardTxSCStatsTxOctetsProtected.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardTxSCStatsTxOctetsProtected.setDescription('The number of plain text octets that are integrity protected\n        \tbut not encrypted.')
f3ConnectGuardTxSCStatsTxOctetsEncrypted = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 2, 4, 1, 8), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ConnectGuardTxSCStatsTxOctetsEncrypted.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardTxSCStatsTxOctetsEncrypted.setDescription('The number of plain text octets that are integrity protected\n \t        and encrypted.')
f3ConnectGuardTxSCHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 2, 5), )
if mibBuilder.loadTexts: f3ConnectGuardTxSCHistoryTable.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardTxSCHistoryTable.setDescription('A collection of Connect Guard TxSC history statistics.  \n             These reflect the history data.')
f3ConnectGuardTxSCHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 2, 5, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-CONNECTGUARD-MIB", "f3ConnectGuardFlowIndex"), (0, "F3-CONNECTGUARD-MIB", "f3ConnectGuardTxSCIndex"), (0, "F3-CONNECTGUARD-MIB", "f3ConnectGuardTxSCStatsIndex"), (0, "F3-CONNECTGUARD-MIB", "f3ConnectGuardTxSCHistoryIndex"))
if mibBuilder.loadTexts: f3ConnectGuardTxSCHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardTxSCHistoryEntry.setDescription('A conceptual row in the f3ConnectGuardTxSCHistoryTable.\n             Entries exist in this table for each Connect Guard TX SC.')
f3ConnectGuardTxSCHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 2, 5, 1, 1), Integer32())
if mibBuilder.loadTexts: f3ConnectGuardTxSCHistoryIndex.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardTxSCHistoryIndex.setDescription('An arbitrary integer index value used to uniquely identify\n            this Connect Guard TxSC statistics entry.')
f3ConnectGuardTxSCHistoryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 2, 5, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ConnectGuardTxSCHistoryTime.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardTxSCHistoryTime.setDescription('Indicates the time of history bin creation.')
f3ConnectGuardTxSCHistoryValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 2, 5, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ConnectGuardTxSCHistoryValid.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardTxSCHistoryValid.setDescription('Indicates the validity of the bin.')
f3ConnectGuardTxSCHistoryAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 2, 5, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3ConnectGuardTxSCHistoryAction.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardTxSCHistoryAction.setDescription('Allows the operator to clear the bin.')
f3ConnectGuardTxSCHistoryTxProtectedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 2, 5, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ConnectGuardTxSCHistoryTxProtectedPkts.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardTxSCHistoryTxProtectedPkts.setDescription('The number of integrity protected but not encrypted packets.')
f3ConnectGuardTxSCHistoryTxEncryptedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 2, 5, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ConnectGuardTxSCHistoryTxEncryptedPkts.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardTxSCHistoryTxEncryptedPkts.setDescription('The number of integrity protected and encrypted packets.')
f3ConnectGuardTxSCHistoryTxOctetsProtected = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 2, 5, 1, 7), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ConnectGuardTxSCHistoryTxOctetsProtected.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardTxSCHistoryTxOctetsProtected.setDescription('The number of plain text octets that are integrity protected\n        \tbut not encrypted.')
f3ConnectGuardTxSCHistoryTxOctetsEncrypted = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 2, 5, 1, 8), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ConnectGuardTxSCHistoryTxOctetsEncrypted.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardTxSCHistoryTxOctetsEncrypted.setDescription('The number of plain text octets that are integrity protected\n \t        and encrypted.')
f3ConnectGuardTxSCThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 2, 6), )
if mibBuilder.loadTexts: f3ConnectGuardTxSCThresholdTable.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardTxSCThresholdTable.setDescription('A table of entries that allow manageability of Connect Guard TxSC\n             Thresholds.')
f3ConnectGuardTxSCThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 2, 6, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-CONNECTGUARD-MIB", "f3ConnectGuardFlowIndex"), (0, "F3-CONNECTGUARD-MIB", "f3ConnectGuardTxSCIndex"), (0, "F3-CONNECTGUARD-MIB", "f3ConnectGuardTxSCStatsIndex"), (0, "F3-CONNECTGUARD-MIB", "f3ConnectGuardTxSCThresholdIndex"))
if mibBuilder.loadTexts: f3ConnectGuardTxSCThresholdEntry.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardTxSCThresholdEntry.setDescription('A conceptual row in the f3ConnectGuardTxSCThresholdEntry.')
f3ConnectGuardTxSCThresholdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 2, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: f3ConnectGuardTxSCThresholdIndex.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardTxSCThresholdIndex.setDescription('An index that uniquely identifies an entry in the\n        f3ConnectGuardTxSCThresholdTable.')
f3ConnectGuardTxSCThresholdInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 2, 6, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ConnectGuardTxSCThresholdInterval.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardTxSCThresholdInterval.setDescription('The interval over which monitored value is\n        sampled and compared with the specified threshold.')
f3ConnectGuardTxSCThresholdVariable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 2, 6, 1, 3), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ConnectGuardTxSCThresholdVariable.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardTxSCThresholdVariable.setDescription('The object identifier of the particular variable to be\n        sampled.')
f3ConnectGuardTxSCThresholdValueLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 2, 6, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3ConnectGuardTxSCThresholdValueLo.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardTxSCThresholdValueLo.setDescription('Lower 32 bits of the threshold value.')
f3ConnectGuardTxSCThresholdValueHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 2, 6, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3ConnectGuardTxSCThresholdValueHi.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardTxSCThresholdValueHi.setDescription('Higher 32 bits of the threshold value.')
f3ConnectGuardTxSCThresholdMonValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 2, 6, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ConnectGuardTxSCThresholdMonValue.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardTxSCThresholdMonValue.setDescription('Monitored value corresponding to f3ConnectGuardTxSCThresholdVariable.')
f3ConnectGuardRxSCStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 2, 7), )
if mibBuilder.loadTexts: f3ConnectGuardRxSCStatsTable.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardRxSCStatsTable.setDescription('A collection of Connect Guard RxSC statistics.  \n             These reflect the current data.')
f3ConnectGuardRxSCStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 2, 7, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-CONNECTGUARD-MIB", "f3ConnectGuardFlowIndex"), (0, "F3-CONNECTGUARD-MIB", "f3ConnectGuardRxSCIndex"), (0, "F3-CONNECTGUARD-MIB", "f3ConnectGuardRxSCStatsIndex"))
if mibBuilder.loadTexts: f3ConnectGuardRxSCStatsEntry.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardRxSCStatsEntry.setDescription('A conceptual row in the f3ConnectGuardRxSCStatsTable.\n             Entries exist in this table for each Connect Guard RxSC.')
f3ConnectGuardRxSCStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 2, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: f3ConnectGuardRxSCStatsIndex.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardRxSCStatsIndex.setDescription('An arbitrary integer index value used to uniquely identify\n            this Connect Guard Rx SC statistics entry. \n            1 - 15min\n            2 - 1day\n            3 - rollover\n            4 - 5min')
f3ConnectGuardRxSCStatsIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 2, 7, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ConnectGuardRxSCStatsIntervalType.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardRxSCStatsIntervalType.setDescription('Indicates the type of collection, i.e. whether it is\n             15 Min, 1 Day or rollover.')
f3ConnectGuardRxSCStatsValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 2, 7, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ConnectGuardRxSCStatsValid.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardRxSCStatsValid.setDescription('Indicates the validity of the bin.')
f3ConnectGuardRxSCStatsAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 2, 7, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3ConnectGuardRxSCStatsAction.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardRxSCStatsAction.setDescription('Allows the operator to clear the bin.')
f3ConnectGuardRxSCStatsRxUnusedSAPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 2, 7, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ConnectGuardRxSCStatsRxUnusedSAPkts.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardRxSCStatsRxUnusedSAPkts.setDescription('The summation of counter secyRxSAStatsUnusedSAPkts\n \t        information for all the SAs.')
f3ConnectGuardRxSCStatsRxNoUsingSAPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 2, 7, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ConnectGuardRxSCStatsRxNoUsingSAPkts.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardRxSCStatsRxNoUsingSAPkts.setDescription('The summation of counter secyRxSAStatsNoUsingSAPkts \n \t        information for all the SAs.')
f3ConnectGuardRxSCStatsRxLatePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 2, 7, 1, 7), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ConnectGuardRxSCStatsRxLatePkts.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardRxSCStatsRxLatePkts.setDescription('the number of received packets that have\n \t        been discarded with the condition : secyReplayProtect is equal\n \t        to true and the PN of the packet is lower than the lower bound\n \t        replay check PN.')
f3ConnectGuardRxSCStatsRxNotValidPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 2, 7, 1, 8), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ConnectGuardRxSCStatsRxNotValidPkts.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardRxSCStatsRxNotValidPkts.setDescription('The summation of counter secyRxSAStatsNotValidPkts\n \t        information for all the SAs.')
f3ConnectGuardRxSCStatsRxInvalidPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 2, 7, 1, 9), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ConnectGuardRxSCStatsRxInvalidPkts.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardRxSCStatsRxInvalidPkts.setDescription('The summation of counter secyRxSAStatsInvalidPkts\n \t        information for all the SAs.')
f3ConnectGuardRxSCStatsRxDelayedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 2, 7, 1, 10), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ConnectGuardRxSCStatsRxDelayedPkts.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardRxSCStatsRxDelayedPkts.setDescription('The number of packets with the condition\n \t        that the PN of the packets is lower than the lower bound\n \t        replay protection PN.')
f3ConnectGuardRxSCStatsRxUncheckedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 2, 7, 1, 11), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ConnectGuardRxSCStatsRxUncheckedPkts.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardRxSCStatsRxUncheckedPkts.setDescription('The number of packets with the following condition:\n \t        -secyValidateFrames is disabled or\n \t        -secyValidateFrames is not disabled and the packet is not\n \t           encrypted and the integrity check has failed or\n \t        -secyValidateFrames is not disable and the packet is\n \t           encrypted and integrity check has failed.')
f3ConnectGuardRxSCStatsRxOKPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 2, 7, 1, 12), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ConnectGuardRxSCStatsRxOKPkts.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardRxSCStatsRxOKPkts.setDescription('The summation of counter secyRxSAStatsOKPkts\n         information for all the SAs.')
f3ConnectGuardRxSCStatsRxOctetsValidated = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 2, 7, 1, 13), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ConnectGuardRxSCStatsRxOctetsValidated.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardRxSCStatsRxOctetsValidated.setDescription('The number of octets of plaintext recovered from received\n         \tpackets that were integrity protected but not encrypted.')
f3ConnectGuardRxSCStatsRxOctetsDecrypted = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 2, 7, 1, 14), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ConnectGuardRxSCStatsRxOctetsDecrypted.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardRxSCStatsRxOctetsDecrypted.setDescription('The number of octets of plaintext recovered from received\n \t        packets that were integrity protected and encrypted.')
f3ConnectGuardRxSCHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 2, 8), )
if mibBuilder.loadTexts: f3ConnectGuardRxSCHistoryTable.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardRxSCHistoryTable.setDescription('A collection of Connect Guard RxSC history statistics.  \n             These reflect the history data.')
f3ConnectGuardRxSCHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 2, 8, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-CONNECTGUARD-MIB", "f3ConnectGuardFlowIndex"), (0, "F3-CONNECTGUARD-MIB", "f3ConnectGuardRxSCIndex"), (0, "F3-CONNECTGUARD-MIB", "f3ConnectGuardRxSCStatsIndex"), (0, "F3-CONNECTGUARD-MIB", "f3ConnectGuardRxSCHistoryIndex"))
if mibBuilder.loadTexts: f3ConnectGuardRxSCHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardRxSCHistoryEntry.setDescription('A conceptual row in the f3ConnectGuardRxSCHistoryTable.\n             Entries exist in this table for each Connect Guard Flow RX SC.')
f3ConnectGuardRxSCHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 2, 8, 1, 1), Integer32())
if mibBuilder.loadTexts: f3ConnectGuardRxSCHistoryIndex.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardRxSCHistoryIndex.setDescription('An arbitrary integer index value used to uniquely identify\n            this Connect Guard RxSC statistics entry.')
f3ConnectGuardRxSCHistoryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 2, 8, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ConnectGuardRxSCHistoryTime.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardRxSCHistoryTime.setDescription('Indicates the time of history bin creation.')
f3ConnectGuardRxSCHistoryValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 2, 8, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ConnectGuardRxSCHistoryValid.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardRxSCHistoryValid.setDescription('Indicates the validity of the bin.')
f3ConnectGuardRxSCHistoryAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 2, 8, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3ConnectGuardRxSCHistoryAction.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardRxSCHistoryAction.setDescription('Allows the operator to clear the bin.')
f3ConnectGuardRxSCHistoryRxUnusedSAPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 2, 8, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ConnectGuardRxSCHistoryRxUnusedSAPkts.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardRxSCHistoryRxUnusedSAPkts.setDescription('The summation of counter secyRxSAStatsUnusedSAPkts\n \t        information for all the SAs.')
f3ConnectGuardRxSCHistoryRxNoUsingSAPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 2, 8, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ConnectGuardRxSCHistoryRxNoUsingSAPkts.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardRxSCHistoryRxNoUsingSAPkts.setDescription('The summation of counter secyRxSAStatsNoUsingSAPkts \n \t        information for all the SAs.')
f3ConnectGuardRxSCHistoryRxLatePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 2, 8, 1, 7), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ConnectGuardRxSCHistoryRxLatePkts.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardRxSCHistoryRxLatePkts.setDescription('the number of received packets that have\n \t        been discarded with the condition : secyReplayProtect is equal\n \t        to true and the PN of the packet is lower than the lower bound\n \t        replay check PN.')
f3ConnectGuardRxSCHistoryRxNotValidPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 2, 8, 1, 8), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ConnectGuardRxSCHistoryRxNotValidPkts.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardRxSCHistoryRxNotValidPkts.setDescription('The summation of counter secyRxSAStatsNotValidPkts\n \t        information for all the SAs.')
f3ConnectGuardRxSCHistoryRxInvalidPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 2, 8, 1, 9), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ConnectGuardRxSCHistoryRxInvalidPkts.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardRxSCHistoryRxInvalidPkts.setDescription('The summation of counter secyRxSAStatsInvalidPkts\n \t        information for all the SAs.')
f3ConnectGuardRxSCHistoryRxDelayedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 2, 8, 1, 10), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ConnectGuardRxSCHistoryRxDelayedPkts.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardRxSCHistoryRxDelayedPkts.setDescription('The number of packets with the condition\n \t        that the PN of the packets is lower than the lower bound\n \t        replay protection PN.')
f3ConnectGuardRxSCHistoryRxUncheckedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 2, 8, 1, 11), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ConnectGuardRxSCHistoryRxUncheckedPkts.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardRxSCHistoryRxUncheckedPkts.setDescription('The number of packets with the following condition:\n \t        -secyValidateFrames is disabled or\n \t        -secyValidateFrames is not disabled and the packet is not\n \t           encrypted and the integrity check has failed or\n \t        -secyValidateFrames is not disable and the packet is\n \t           encrypted and integrity check has failed.')
f3ConnectGuardRxSCHistoryRxOKPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 2, 8, 1, 12), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ConnectGuardRxSCHistoryRxOKPkts.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardRxSCHistoryRxOKPkts.setDescription('The summation of counter secyRxSAStatsOKPkts\n         information for all the SAs.')
f3ConnectGuardRxSCHistoryRxOctetsValidated = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 2, 8, 1, 13), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ConnectGuardRxSCHistoryRxOctetsValidated.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardRxSCHistoryRxOctetsValidated.setDescription('The number of octets of plaintext recovered from received\n         \tpackets that were integrity protected but not encrypted.')
f3ConnectGuardRxSCHistoryRxOctetsDecrypted = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 2, 8, 1, 14), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ConnectGuardRxSCHistoryRxOctetsDecrypted.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardRxSCHistoryRxOctetsDecrypted.setDescription('The number of octets of plaintext recovered from received\n \t        packets that were integrity protected and encrypted.')
f3ConnectGuardRxSCThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 2, 9), )
if mibBuilder.loadTexts: f3ConnectGuardRxSCThresholdTable.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardRxSCThresholdTable.setDescription('A table of entries that allow manageability of Connect Guard RxSC\n             Thresholds.')
f3ConnectGuardRxSCThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 2, 9, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-CONNECTGUARD-MIB", "f3ConnectGuardFlowIndex"), (0, "F3-CONNECTGUARD-MIB", "f3ConnectGuardRxSCIndex"), (0, "F3-CONNECTGUARD-MIB", "f3ConnectGuardRxSCStatsIndex"), (0, "F3-CONNECTGUARD-MIB", "f3ConnectGuardRxSCThresholdIndex"))
if mibBuilder.loadTexts: f3ConnectGuardRxSCThresholdEntry.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardRxSCThresholdEntry.setDescription('A conceptual row in the f3ConnectGuardRxSCThresholdEntry.')
f3ConnectGuardRxSCThresholdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 2, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: f3ConnectGuardRxSCThresholdIndex.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardRxSCThresholdIndex.setDescription('An index that uniquely identifies an entry in the\n         f3ConnectGuardRxSCThresholdTable.')
f3ConnectGuardRxSCThresholdInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 2, 9, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ConnectGuardRxSCThresholdInterval.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardRxSCThresholdInterval.setDescription('The interval over which monitored value is\n         sampled and compared with the specified threshold.')
f3ConnectGuardRxSCThresholdVariable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 2, 9, 1, 3), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ConnectGuardRxSCThresholdVariable.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardRxSCThresholdVariable.setDescription('The object identifier of the particular variable to be\n         sampled.')
f3ConnectGuardRxSCThresholdValueLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 2, 9, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3ConnectGuardRxSCThresholdValueLo.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardRxSCThresholdValueLo.setDescription('Lower 32 bits of the threshold value.')
f3ConnectGuardRxSCThresholdValueHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 2, 9, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3ConnectGuardRxSCThresholdValueHi.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardRxSCThresholdValueHi.setDescription('Higher 32 bits of the threshold value.')
f3ConnectGuardRxSCThresholdMonValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 2, 9, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ConnectGuardRxSCThresholdMonValue.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardRxSCThresholdMonValue.setDescription('Monitored value corresponding to f3ConnectGuardRxSCThresholdVariable.')
f3ConnectGuardTxSAStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 2, 10), )
if mibBuilder.loadTexts: f3ConnectGuardTxSAStatsTable.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardTxSAStatsTable.setDescription('A collection of Connect Guard Tx SA statistics.  \n             These reflect the current data.')
f3ConnectGuardTxSAStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 2, 10, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-CONNECTGUARD-MIB", "f3ConnectGuardFlowIndex"), (0, "F3-CONNECTGUARD-MIB", "f3ConnectGuardTxSCIndex"), (0, "F3-CONNECTGUARD-MIB", "f3ConnectGuardTxSAIndex"))
if mibBuilder.loadTexts: f3ConnectGuardTxSAStatsEntry.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardTxSAStatsEntry.setDescription('A conceptual row in the f3ConnectGuardTxSAStatsTable.\n             Entries exist in this table for each Connect Guard TxSA.')
f3ConnectGuardTxSAStatsProtectedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 2, 10, 1, 1), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ConnectGuardTxSAStatsProtectedPkts.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardTxSAStatsProtectedPkts.setDescription('The number of integrity protected but not encrypted packets\n \t           for this transmitting SA.')
f3ConnectGuardTxSAStatsEncryptedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 2, 10, 1, 2), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ConnectGuardTxSAStatsEncryptedPkts.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardTxSAStatsEncryptedPkts.setDescription('The number of integrity protected and encrypted packets for\n \t           this transmitting SA.')
f3ConnectGuardRxSAStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 2, 11), )
if mibBuilder.loadTexts: f3ConnectGuardRxSAStatsTable.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardRxSAStatsTable.setDescription('A collection of Connect Guard Rx SA statistics.  \n             These reflect the current data.')
f3ConnectGuardRxSAStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 2, 11, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-CONNECTGUARD-MIB", "f3ConnectGuardFlowIndex"), (0, "F3-CONNECTGUARD-MIB", "f3ConnectGuardRxSCIndex"), (0, "F3-CONNECTGUARD-MIB", "f3ConnectGuardRxSAIndex"))
if mibBuilder.loadTexts: f3ConnectGuardRxSAStatsEntry.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardRxSAStatsEntry.setDescription('A conceptual row in the f3ConnectGuardRxSAStatsTable.\n             Entries exist in this table for each Connect Guard RxSA.')
f3ConnectGuardRxSAStatsUnusedSAPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 2, 11, 1, 1), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ConnectGuardRxSAStatsUnusedSAPkts.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardRxSAStatsUnusedSAPkts.setDescription('For this SA which is not currently in use, the number of\n            received, unencrypted, packets with secyValidateFrames\n            not in the strict mode.')
f3ConnectGuardRxSAStatsNoUsingSAPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 2, 11, 1, 2), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ConnectGuardRxSAStatsNoUsingSAPkts.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardRxSAStatsNoUsingSAPkts.setDescription('For this SA which is not currently in use, the number of\n            received packets that have been discarded, and have\n            either the packets encrypted or the secyValidateFrames set to\n            strict mode.')
f3ConnectGuardRxSAStatsNotValidPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 2, 11, 1, 3), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ConnectGuardRxSAStatsNotValidPkts.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardRxSAStatsNotValidPkts.setDescription('For this SA, the number discarded packets with the\n            condition that the packets are not valid and one of the\n            following conditions are true: either secyValidateFrames in\n            strict mode or the packets encrypted.')
f3ConnectGuardRxSAStatsInvalidPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 2, 11, 1, 4), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ConnectGuardRxSAStatsInvalidPkts.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardRxSAStatsInvalidPkts.setDescription('For this SA, the number of packets with the condition\n            that the packets are not valid and secyValidateFrames is in\n            check mode.')
f3ConnectGuardRxSAStatsOKPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 2, 11, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ConnectGuardRxSAStatsOKPkts.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardRxSAStatsOKPkts.setDescription('For this SA, the number of validated packets.')
f3ConnectGuardFlowThresholdCrossingAlert = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 3, 1)).setObjects(("F3-CONNECTGUARD-MIB", "f3ConnectGuardFlowThresholdIndex"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardFlowThresholdInterval"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardFlowThresholdVariable"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardFlowThresholdValueLo"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardFlowThresholdValueHi"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardFlowThresholdMonValue"))
if mibBuilder.loadTexts: f3ConnectGuardFlowThresholdCrossingAlert.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardFlowThresholdCrossingAlert.setDescription('This trap is sent each time a threshold on a PM condition\n             on an Connect Guard flow is crossed.')
f3ConnectGuardTxSCThresholdCrossingAlert = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 3, 2)).setObjects(("F3-CONNECTGUARD-MIB", "f3ConnectGuardTxSCThresholdIndex"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardTxSCThresholdInterval"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardTxSCThresholdVariable"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardTxSCThresholdValueLo"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardTxSCThresholdValueHi"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardTxSCThresholdMonValue"))
if mibBuilder.loadTexts: f3ConnectGuardTxSCThresholdCrossingAlert.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardTxSCThresholdCrossingAlert.setDescription('This trap is sent each time a threshold on a PM condition\n             on an Connect Guard Tx SC is crossed.')
f3ConnectGuardRxSCThresholdCrossingAlert = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 3, 3)).setObjects(("F3-CONNECTGUARD-MIB", "f3ConnectGuardRxSCThresholdIndex"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardRxSCThresholdInterval"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardRxSCThresholdVariable"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardRxSCThresholdValueLo"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardRxSCThresholdValueHi"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardRxSCThresholdMonValue"))
if mibBuilder.loadTexts: f3ConnectGuardRxSCThresholdCrossingAlert.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardRxSCThresholdCrossingAlert.setDescription('This trap is sent each time a threshold on a PM condition\n             on an Connect Guard Rx SC is crossed.')
f3ConnectGuardStateChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 3, 4)).setObjects(("F3-CONNECTGUARD-MIB", "f3FlowSecureState"))
if mibBuilder.loadTexts: f3ConnectGuardStateChangeTrap.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardStateChangeTrap.setDescription('This trap is sent each time secure state value changed.')
f3ConnectGuardCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 4, 1))
f3ConnectGuardGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 4, 2))
f3ConnectGuardCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 4, 1, 1)).setObjects(("F3-CONNECTGUARD-MIB", "f3ConnectGuardObjectsGroup"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardPerfGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3ConnectGuardCompliance = f3ConnectGuardCompliance.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardCompliance.setDescription('Describes the requirements for conformance to the Connect Guard.')
f3ConnectGuardObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 4, 2, 1)).setObjects(("F3-CONNECTGUARD-MIB", "f3ConnectGuardFlowIndex"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardFlowEgressInterface"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardFlowAdminState"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardFlowSecondaryState"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardFlowOperationalState"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardFlowCipherSuite"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardFlowKeyExchangeProfile"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardFlowKeyExchangeFrameTagControl"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardFlowKeyExchangeFrameOuterVlanEnabled"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardFlowKeyExchangeFrameOuterVlanId"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardFlowKeyExchangeFrameOuterVlanPriority"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardFlowKeyExchangeFrameInner1VlanEnabled"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardFlowKeyExchangeFrameInner1VlanId"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardFlowKeyExchangeFrameInner1VlanPriority"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardFlowKeyExchangeFrameInner2VlanEnabled"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardFlowKeyExchangeFrameInner2VlanId"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardFlowKeyExchangeFrameInner2VlanPriority"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardFlowKeyExchangeInterval"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardFlowTagsClear"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardFlowStorageType"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardFlowRowStatus"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardFlowKeyXchgFailsCounts"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardFlowAction"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardFlowReplayProtectionEnabled"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardFlowReplayProtectionWindow"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardFlowRemoteMacAddrEnabled"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardFlowRemoteMacAddr"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardFlowAssociatedMep"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardFlowAlias"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardFlowKeyExchangeFrameOuterVlanEtherType"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardFlowKeyExchangeFrameInner1VlanEtherType"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardFlowKeyExchangeFrameInner2VlanEtherType"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardFlowKeyInjectFlowPoint"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardKeyExchangeProfileIndex"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardKeyExchangeProfileName"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardKeyExchangeProfileUserId"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardKeyExchangeProfileMode"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardKeyExchangeProfileAuthPassword"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardKeyExchangeProfileDiffieHellmanKeyPairLen"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardKeyExchangeProfileStorageType"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardKeyExchangeProfileRowStatus"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardTxSCIndex"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardTxSCI"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardTxScState"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardCurrentTxSa"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardPreviousTxSa"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardTxScCreateTime"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardTxScStartTime"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardTxScStopTime"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardRxSCIndex"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardRxSCI"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardRxScState"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardCurrentRxSa"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardRxScCreateTime"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardRxScStartTime"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardRxScStopTime"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardTxSAIndex"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardTxSAState"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardTxSANextPN"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardTxSASAKUnchanged"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardTxSACreatedTime"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardTxSAStartedTime"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardTxSAStoppedTime"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardRxSAIndex"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardRxSAState"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardRxSANextPN"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardRxSASAKUnchanged"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardRxSACreatedTime"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardRxSAStartedTime"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardRxSAStoppedTime"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardCryptoPassword"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardRestoreFactoryApproved"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardSoftwareVersionApproved"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardSoftwareInstallApproved"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardRestoreDatabaseApproved"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardConfigFileLoadApproved"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3ConnectGuardObjectsGroup = f3ConnectGuardObjectsGroup.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardObjectsGroup.setDescription('A collection of objects used to manage the Connect Guard functionality.')
f3ConnectGuardPerfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 36, 4, 2, 2)).setObjects(("F3-CONNECTGUARD-MIB", "f3ConnectGuardFlowStatsIndex"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardFlowStatsIntervalType"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardFlowStatsValid"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardFlowStatsAction"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardFlowStatsTxUntaggedPkts"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardFlowStatsTxTooLongPkts"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardFlowStatsRxUntaggedPkts"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardFlowStatsRxNotagPkts"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardFlowStatsRxBadtagPkts"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardFlowStatsRxUnknownSCIPkts"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardFlowStatsRxNoSCIPkts"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardFlowStatsRxOverrunPkts"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardFlowHistoryIndex"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardFlowHistoryTime"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardFlowHistoryValid"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardFlowHistoryAction"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardFlowHistoryTxUntaggedPkts"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardFlowHistoryTxTooLongPkts"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardFlowHistoryRxUntaggedPkts"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardFlowHistoryRxNotagPkts"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardFlowHistoryRxBadtagPkts"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardFlowHistoryRxUnknownSCIPkts"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardFlowHistoryRxNoSCIPkts"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardFlowHistoryRxOverrunPkts"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardFlowThresholdIndex"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardFlowThresholdInterval"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardFlowThresholdVariable"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardFlowThresholdValueLo"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardFlowThresholdValueHi"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardFlowThresholdMonValue"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardTxSCStatsIndex"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardTxSCStatsIntervalType"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardTxSCStatsValid"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardTxSCStatsAction"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardTxSCStatsTxProtectedPkts"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardTxSCStatsTxEncryptedPkts"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardTxSCStatsTxOctetsProtected"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardTxSCStatsTxOctetsEncrypted"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardTxSCHistoryIndex"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardTxSCHistoryTime"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardTxSCHistoryValid"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardTxSCHistoryAction"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardTxSCHistoryTxProtectedPkts"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardTxSCHistoryTxEncryptedPkts"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardTxSCHistoryTxOctetsProtected"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardTxSCHistoryTxOctetsEncrypted"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardTxSCThresholdIndex"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardTxSCThresholdInterval"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardTxSCThresholdVariable"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardTxSCThresholdValueLo"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardTxSCThresholdValueHi"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardTxSCThresholdMonValue"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardRxSCStatsIndex"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardRxSCStatsIntervalType"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardRxSCStatsValid"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardRxSCStatsAction"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardRxSCStatsRxUnusedSAPkts"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardRxSCStatsRxNoUsingSAPkts"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardRxSCStatsRxLatePkts"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardRxSCStatsRxNotValidPkts"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardRxSCStatsRxInvalidPkts"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardRxSCStatsRxDelayedPkts"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardRxSCStatsRxUncheckedPkts"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardRxSCStatsRxOKPkts"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardRxSCStatsRxOctetsValidated"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardRxSCStatsRxOctetsDecrypted"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardRxSCHistoryIndex"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardRxSCHistoryTime"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardRxSCHistoryValid"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardRxSCHistoryAction"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardRxSCHistoryRxUnusedSAPkts"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardRxSCHistoryRxNoUsingSAPkts"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardRxSCHistoryRxLatePkts"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardRxSCHistoryRxNotValidPkts"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardRxSCHistoryRxInvalidPkts"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardRxSCHistoryRxDelayedPkts"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardRxSCHistoryRxUncheckedPkts"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardRxSCHistoryRxOKPkts"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardRxSCHistoryRxOctetsValidated"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardRxSCHistoryRxOctetsDecrypted"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardRxSCThresholdIndex"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardRxSCThresholdInterval"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardRxSCThresholdVariable"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardRxSCThresholdValueLo"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardRxSCThresholdValueHi"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardRxSCThresholdMonValue"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardTxSAStatsProtectedPkts"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardTxSAStatsEncryptedPkts"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardRxSAStatsUnusedSAPkts"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardRxSAStatsNoUsingSAPkts"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardRxSAStatsNotValidPkts"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardRxSAStatsInvalidPkts"), ("F3-CONNECTGUARD-MIB", "f3ConnectGuardRxSAStatsOKPkts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3ConnectGuardPerfGroup = f3ConnectGuardPerfGroup.setStatus('current')
if mibBuilder.loadTexts: f3ConnectGuardPerfGroup.setDescription('A collection of objects performance used to manage the Connect Guard functionality.')
mibBuilder.exportSymbols("F3-CONNECTGUARD-MIB", KeyExchangeFrameTagControl=KeyExchangeFrameTagControl, f3ConnectGuardTxSCI=f3ConnectGuardTxSCI, f3ConnectGuardFlowThresholdTable=f3ConnectGuardFlowThresholdTable, f3ConnectGuardRxSCHistoryAction=f3ConnectGuardRxSCHistoryAction, f3ConnectGuardRxSAEntry=f3ConnectGuardRxSAEntry, f3ConnectGuardFlowTagsClear=f3ConnectGuardFlowTagsClear, f3ConnectGuardRxSAStatsTable=f3ConnectGuardRxSAStatsTable, f3ConnectGuardFlowThresholdMonValue=f3ConnectGuardFlowThresholdMonValue, f3ConnectGuardTxSCStatsValid=f3ConnectGuardTxSCStatsValid, f3ConnectGuardFlowEgressInterface=f3ConnectGuardFlowEgressInterface, f3ConnectGuardCryptoPasswordControl=f3ConnectGuardCryptoPasswordControl, f3ConnectGuardFlowHistoryRxUntaggedPkts=f3ConnectGuardFlowHistoryRxUntaggedPkts, f3ConnectGuardRxSCStatsRxDelayedPkts=f3ConnectGuardRxSCStatsRxDelayedPkts, f3ConnectGuardTxSCStatsTxProtectedPkts=f3ConnectGuardTxSCStatsTxProtectedPkts, f3ConnectGuardRestoreFactoryApproved=f3ConnectGuardRestoreFactoryApproved, f3ConnectGuardCurrentTxSa=f3ConnectGuardCurrentTxSa, f3ConnectGuardFlowThresholdCrossingAlert=f3ConnectGuardFlowThresholdCrossingAlert, f3ConnectGuardFlowKeyExchangeFrameInner1VlanEnabled=f3ConnectGuardFlowKeyExchangeFrameInner1VlanEnabled, f3ConnectGuardFlowRemoteMacAddr=f3ConnectGuardFlowRemoteMacAddr, f3ConnectGuardRxSANextPN=f3ConnectGuardRxSANextPN, f3ConnectGuardFlowThresholdValueHi=f3ConnectGuardFlowThresholdValueHi, f3ConnectGuardRxSCThresholdIndex=f3ConnectGuardRxSCThresholdIndex, f3ConnectGuardRxSCThresholdInterval=f3ConnectGuardRxSCThresholdInterval, f3ConnectGuardFlowStatsRxUntaggedPkts=f3ConnectGuardFlowStatsRxUntaggedPkts, f3ConnectGuardTxSCHistoryEntry=f3ConnectGuardTxSCHistoryEntry, f3ConnectGuardTxSCThresholdTable=f3ConnectGuardTxSCThresholdTable, f3ConnectGuardRxSCHistoryEntry=f3ConnectGuardRxSCHistoryEntry, f3ConnectGuardRxSAStatsNoUsingSAPkts=f3ConnectGuardRxSAStatsNoUsingSAPkts, CipherSuiteType=CipherSuiteType, f3ConnectGuardKeyExchangeProfileEntry=f3ConnectGuardKeyExchangeProfileEntry, ScSaState=ScSaState, f3ConnectGuardFlowKeyExchangeInterval=f3ConnectGuardFlowKeyExchangeInterval, f3ConnectGuardRxSCStatsRxOctetsDecrypted=f3ConnectGuardRxSCStatsRxOctetsDecrypted, f3ConnectGuardFlowThresholdInterval=f3ConnectGuardFlowThresholdInterval, f3ConnectGuardRxSCStatsRxNoUsingSAPkts=f3ConnectGuardRxSCStatsRxNoUsingSAPkts, f3ConnectGuardTxSCStatsEntry=f3ConnectGuardTxSCStatsEntry, f3ConnectGuardFlowRemoteMacAddrEnabled=f3ConnectGuardFlowRemoteMacAddrEnabled, ConnectGuardFlowActionType=ConnectGuardFlowActionType, f3ConnectGuardFlowKeyExchangeFrameOuterVlanId=f3ConnectGuardFlowKeyExchangeFrameOuterVlanId, f3ConnectGuardRxSCHistoryTable=f3ConnectGuardRxSCHistoryTable, f3ConnectGuardRxSAStatsNotValidPkts=f3ConnectGuardRxSAStatsNotValidPkts, f3ConnectGuardFlowOperationalState=f3ConnectGuardFlowOperationalState, f3ConnectGuardTxSCHistoryTxOctetsProtected=f3ConnectGuardTxSCHistoryTxOctetsProtected, f3ConnectGuardRxSCHistoryRxOctetsValidated=f3ConnectGuardRxSCHistoryRxOctetsValidated, f3ConnectGuardKeyExchangeProfileTable=f3ConnectGuardKeyExchangeProfileTable, f3ConnectGuardGroups=f3ConnectGuardGroups, f3ConnectGuardTxSCStatsAction=f3ConnectGuardTxSCStatsAction, f3ConnectGuardRxSCThresholdEntry=f3ConnectGuardRxSCThresholdEntry, f3ConnectGuardRxSCStatsRxUncheckedPkts=f3ConnectGuardRxSCStatsRxUncheckedPkts, f3ConnectGuardTxSCThresholdCrossingAlert=f3ConnectGuardTxSCThresholdCrossingAlert, f3ConnectGuardFlowAdminState=f3ConnectGuardFlowAdminState, f3ConnectGuardRxSAStoppedTime=f3ConnectGuardRxSAStoppedTime, f3ConnectGuardRxSAStatsOKPkts=f3ConnectGuardRxSAStatsOKPkts, f3ConnectGuardRxSCIndex=f3ConnectGuardRxSCIndex, f3FlowExtConnectGuardTable=f3FlowExtConnectGuardTable, f3ConnectGuardTxSCHistoryTxProtectedPkts=f3ConnectGuardTxSCHistoryTxProtectedPkts, f3ConnectGuardPasswordScalars=f3ConnectGuardPasswordScalars, f3ConnectGuardKeyExchangeProfileMode=f3ConnectGuardKeyExchangeProfileMode, f3ConnectGuardRxSCTable=f3ConnectGuardRxSCTable, f3ConnectGuardKeyExchangeProfileName=f3ConnectGuardKeyExchangeProfileName, f3ConnectGuardKeyExchangeProfileUserId=f3ConnectGuardKeyExchangeProfileUserId, f3ConnectGuardRxSCEntry=f3ConnectGuardRxSCEntry, f3ConnectGuardFlowHistoryAction=f3ConnectGuardFlowHistoryAction, f3ConnectGuardFlowHistoryEntry=f3ConnectGuardFlowHistoryEntry, f3ConnectGuardRxSCHistoryRxNotValidPkts=f3ConnectGuardRxSCHistoryRxNotValidPkts, f3ConnectGuardTxSCStatsTable=f3ConnectGuardTxSCStatsTable, f3ConnectGuardTxSCThresholdMonValue=f3ConnectGuardTxSCThresholdMonValue, f3ConnectGuardFlowHistoryRxBadtagPkts=f3ConnectGuardFlowHistoryRxBadtagPkts, f3ConnectGuardTxSCStatsIndex=f3ConnectGuardTxSCStatsIndex, f3ConnectGuardConfigFileLoadApproved=f3ConnectGuardConfigFileLoadApproved, f3ConnectGuardRxSCHistoryTime=f3ConnectGuardRxSCHistoryTime, f3ConnectGuardFlowHistoryRxNoSCIPkts=f3ConnectGuardFlowHistoryRxNoSCIPkts, f3ConnectGuardFlowStatsValid=f3ConnectGuardFlowStatsValid, f3ConnectGuardRxSCHistoryValid=f3ConnectGuardRxSCHistoryValid, f3ConnectGuardTxScStopTime=f3ConnectGuardTxScStopTime, f3ConnectGuardTxSCStatsIntervalType=f3ConnectGuardTxSCStatsIntervalType, f3ConnectGuardRxSCHistoryRxOKPkts=f3ConnectGuardRxSCHistoryRxOKPkts, f3ConnectGuardFlowStatsRxNoSCIPkts=f3ConnectGuardFlowStatsRxNoSCIPkts, f3ConnectGuardTxSCHistoryTable=f3ConnectGuardTxSCHistoryTable, f3ConnectGuardPerfGroup=f3ConnectGuardPerfGroup, f3ConnectGuardFlowKeyExchangeFrameOuterVlanPriority=f3ConnectGuardFlowKeyExchangeFrameOuterVlanPriority, f3ConnectGuardPreviousTxSa=f3ConnectGuardPreviousTxSa, f3ConnectGuardFlowHistoryTxTooLongPkts=f3ConnectGuardFlowHistoryTxTooLongPkts, f3ConnectGuardRxSCStatsRxNotValidPkts=f3ConnectGuardRxSCStatsRxNotValidPkts, f3ConnectGuardRxSAStatsInvalidPkts=f3ConnectGuardRxSAStatsInvalidPkts, f3ConnectGuardFlowThresholdEntry=f3ConnectGuardFlowThresholdEntry, f3ConnectGuardFlowKeyExchangeFrameInner2VlanId=f3ConnectGuardFlowKeyExchangeFrameInner2VlanId, f3ConnectGuardRxSCStatsRxInvalidPkts=f3ConnectGuardRxSCStatsRxInvalidPkts, f3FlowSecureState=f3FlowSecureState, f3ConnectGuardTxSCHistoryTxOctetsEncrypted=f3ConnectGuardTxSCHistoryTxOctetsEncrypted, f3ConnectGuardRxSCHistoryRxOctetsDecrypted=f3ConnectGuardRxSCHistoryRxOctetsDecrypted, f3ConnectGuardFlowKeyExchangeFrameInner2VlanPriority=f3ConnectGuardFlowKeyExchangeFrameInner2VlanPriority, f3ConnectGuardFlowKeyExchangeFrameOuterVlanEnabled=f3ConnectGuardFlowKeyExchangeFrameOuterVlanEnabled, f3ConnectGuardFlowHistoryIndex=f3ConnectGuardFlowHistoryIndex, DiffieHellmanKeyPairLength=DiffieHellmanKeyPairLength, f3ConnectGuardFlowIndex=f3ConnectGuardFlowIndex, f3ConnectGuardRxSCHistoryRxDelayedPkts=f3ConnectGuardRxSCHistoryRxDelayedPkts, f3ConnectGuardFlowStatsRxUnknownSCIPkts=f3ConnectGuardFlowStatsRxUnknownSCIPkts, f3ConnectGuardTxSCThresholdVariable=f3ConnectGuardTxSCThresholdVariable, PYSNMP_MODULE_ID=f3ConnectGuardMIB, f3ConnectGuardFlowStatsEntry=f3ConnectGuardFlowStatsEntry, f3ConnectGuardRxSCThresholdValueHi=f3ConnectGuardRxSCThresholdValueHi, f3ConnectGuardKeyExchangeProfileStorageType=f3ConnectGuardKeyExchangeProfileStorageType, f3ConnectGuardRxScCreateTime=f3ConnectGuardRxScCreateTime, f3ConnectGuardRxSCHistoryIndex=f3ConnectGuardRxSCHistoryIndex, f3ConnectGuardFlowRowStatus=f3ConnectGuardFlowRowStatus, f3ConnectGuardCompliances=f3ConnectGuardCompliances, f3ConnectGuardNotifications=f3ConnectGuardNotifications, f3ConnectGuardTxSCIndex=f3ConnectGuardTxSCIndex, f3ConnectGuardFlowHistoryRxUnknownSCIPkts=f3ConnectGuardFlowHistoryRxUnknownSCIPkts, f3ConnectGuardPerformanceObjects=f3ConnectGuardPerformanceObjects, f3ConnectGuardTxSCThresholdEntry=f3ConnectGuardTxSCThresholdEntry, f3ConnectGuardRxSCStatsRxUnusedSAPkts=f3ConnectGuardRxSCStatsRxUnusedSAPkts, f3ConnectGuardFlowKeyInjectFlowPoint=f3ConnectGuardFlowKeyInjectFlowPoint, f3ConnectGuardRxSCHistoryRxLatePkts=f3ConnectGuardRxSCHistoryRxLatePkts, f3ConnectGuardRxSCThresholdCrossingAlert=f3ConnectGuardRxSCThresholdCrossingAlert, f3ConnectGuardFlowReplayProtectionWindow=f3ConnectGuardFlowReplayProtectionWindow, f3ConnectGuardFlowKeyExchangeFrameInner2VlanEnabled=f3ConnectGuardFlowKeyExchangeFrameInner2VlanEnabled, f3ConnectGuardRxSCStatsTable=f3ConnectGuardRxSCStatsTable, f3ConnectGuardStateChangeTrap=f3ConnectGuardStateChangeTrap, f3ConnectGuardTxSCHistoryAction=f3ConnectGuardTxSCHistoryAction, f3ConnectGuardRxSASAKUnchanged=f3ConnectGuardRxSASAKUnchanged, f3ConnectGuardCompliance=f3ConnectGuardCompliance, f3ConnectGuardObjectsGroup=f3ConnectGuardObjectsGroup, f3ConnectGuardFlowStatsIndex=f3ConnectGuardFlowStatsIndex, f3ConnectGuardTxSASAKUnchanged=f3ConnectGuardTxSASAKUnchanged, f3ConnectGuardFlowSecondaryState=f3ConnectGuardFlowSecondaryState, f3ConnectGuardMIB=f3ConnectGuardMIB, f3ConnectGuardSoftwareInstallApproved=f3ConnectGuardSoftwareInstallApproved, f3ConnectGuardFlowStatsTxUntaggedPkts=f3ConnectGuardFlowStatsTxUntaggedPkts, f3ConnectGuardFlowStatsIntervalType=f3ConnectGuardFlowStatsIntervalType, f3ConnectGuardRxScStopTime=f3ConnectGuardRxScStopTime, f3ConnectGuardRxSCStatsIntervalType=f3ConnectGuardRxSCStatsIntervalType, f3ConnectGuardTxSCThresholdInterval=f3ConnectGuardTxSCThresholdInterval, f3FlowExtConnectGuardEntry=f3FlowExtConnectGuardEntry, f3ConnectGuardFlowThresholdVariable=f3ConnectGuardFlowThresholdVariable, f3ConnectGuardRxSCStatsValid=f3ConnectGuardRxSCStatsValid, f3ConnectGuardFlowHistoryTxUntaggedPkts=f3ConnectGuardFlowHistoryTxUntaggedPkts, f3ConnectGuardTxSCThresholdValueLo=f3ConnectGuardTxSCThresholdValueLo, f3ConnectGuardRxSCThresholdVariable=f3ConnectGuardRxSCThresholdVariable, f3ConnectGuardConfigObjects=f3ConnectGuardConfigObjects, f3ConnectGuardRxSCStatsIndex=f3ConnectGuardRxSCStatsIndex, ConnectGuardKeyExMode=ConnectGuardKeyExMode, f3ConnectGuardCurrentRxSa=f3ConnectGuardCurrentRxSa, f3ConnectGuardCryptoPassword=f3ConnectGuardCryptoPassword, f3ConnectGuardFlowHistoryValid=f3ConnectGuardFlowHistoryValid, f3ConnectGuardRxSATable=f3ConnectGuardRxSATable, f3FlowRefConnectGuardFlowObject=f3FlowRefConnectGuardFlowObject, FlowSecureState=FlowSecureState, f3ConnectGuardKeyExchangeProfileIndex=f3ConnectGuardKeyExchangeProfileIndex, f3ConnectGuardTxSATable=f3ConnectGuardTxSATable, f3ConnectGuardRxSCStatsRxLatePkts=f3ConnectGuardRxSCStatsRxLatePkts, f3ConnectGuardRxSAStatsEntry=f3ConnectGuardRxSAStatsEntry, f3ConnectGuardTxScStartTime=f3ConnectGuardTxScStartTime, f3ConnectGuardRxSCThresholdValueLo=f3ConnectGuardRxSCThresholdValueLo, f3FlowSecureBlockingEnabled=f3FlowSecureBlockingEnabled, f3ConnectGuardFlowThresholdIndex=f3ConnectGuardFlowThresholdIndex, f3ConnectGuardTxScState=f3ConnectGuardTxScState, f3ConnectGuardRxSCHistoryRxInvalidPkts=f3ConnectGuardRxSCHistoryRxInvalidPkts, f3ConnectGuardFlowTable=f3ConnectGuardFlowTable, f3ConnectGuardFlowStatsRxOverrunPkts=f3ConnectGuardFlowStatsRxOverrunPkts, f3ConnectGuardTxSAStatsProtectedPkts=f3ConnectGuardTxSAStatsProtectedPkts, f3ConnectGuardTxSCHistoryIndex=f3ConnectGuardTxSCHistoryIndex, f3ConnectGuardTxSAStatsTable=f3ConnectGuardTxSAStatsTable, f3ConnectGuardTxSAEntry=f3ConnectGuardTxSAEntry, f3ConnectGuardRxScStartTime=f3ConnectGuardRxScStartTime, f3ConnectGuardTxSAStatsEntry=f3ConnectGuardTxSAStatsEntry, f3ConnectGuardConformance=f3ConnectGuardConformance, f3ConnectGuardTxSAState=f3ConnectGuardTxSAState, f3ConnectGuardRxSCThresholdMonValue=f3ConnectGuardRxSCThresholdMonValue, f3ConnectGuardTxSCTable=f3ConnectGuardTxSCTable, f3ConnectGuardFlowHistoryRxOverrunPkts=f3ConnectGuardFlowHistoryRxOverrunPkts, f3ConnectGuardFlowKeyXchgFailsCounts=f3ConnectGuardFlowKeyXchgFailsCounts, f3ConnectGuardFlowStorageType=f3ConnectGuardFlowStorageType, f3ConnectGuardTxSCStatsTxEncryptedPkts=f3ConnectGuardTxSCStatsTxEncryptedPkts, f3ConnectGuardTxSANextPN=f3ConnectGuardTxSANextPN, f3ConnectGuardFlowStatsRxBadtagPkts=f3ConnectGuardFlowStatsRxBadtagPkts, f3ConnectGuardTxSCHistoryValid=f3ConnectGuardTxSCHistoryValid, f3ConnectGuardSoftwareVersionApproved=f3ConnectGuardSoftwareVersionApproved, f3ConnectGuardRestoreDatabaseApproved=f3ConnectGuardRestoreDatabaseApproved, f3ConnectGuardTxSCEntry=f3ConnectGuardTxSCEntry, f3ConnectGuardTxSCThresholdIndex=f3ConnectGuardTxSCThresholdIndex, f3ConnectGuardTxSAIndex=f3ConnectGuardTxSAIndex, f3ConnectGuardRxSCStatsRxOctetsValidated=f3ConnectGuardRxSCStatsRxOctetsValidated, f3ConnectGuardRxSCHistoryRxNoUsingSAPkts=f3ConnectGuardRxSCHistoryRxNoUsingSAPkts, f3ConnectGuardTxSAStatsEncryptedPkts=f3ConnectGuardTxSAStatsEncryptedPkts, f3ConnectGuardFlowAlias=f3ConnectGuardFlowAlias, f3ConnectGuardFlowCipherSuite=f3ConnectGuardFlowCipherSuite, f3ConnectGuardFlowAction=f3ConnectGuardFlowAction, f3ConnectGuardRxSACreatedTime=f3ConnectGuardRxSACreatedTime, f3ConnectGuardRxSAIndex=f3ConnectGuardRxSAIndex, f3ConnectGuardFlowKeyExchangeFrameInner1VlanPriority=f3ConnectGuardFlowKeyExchangeFrameInner1VlanPriority, f3ConnectGuardFlowAssociatedMep=f3ConnectGuardFlowAssociatedMep, f3ConnectGuardFlowEntry=f3ConnectGuardFlowEntry, f3ConnectGuardFlowStatsTable=f3ConnectGuardFlowStatsTable, f3ConnectGuardFlowThresholdValueLo=f3ConnectGuardFlowThresholdValueLo, f3ConnectGuardTxSCStatsTxOctetsProtected=f3ConnectGuardTxSCStatsTxOctetsProtected, f3ConnectGuardFlowKeyExchangeFrameInner2VlanEtherType=f3ConnectGuardFlowKeyExchangeFrameInner2VlanEtherType, f3ConnectGuardRxScState=f3ConnectGuardRxScState, f3ConnectGuardTxScCreateTime=f3ConnectGuardTxScCreateTime, f3ConnectGuardRxSAStartedTime=f3ConnectGuardRxSAStartedTime, f3ConnectGuardFlowHistoryTime=f3ConnectGuardFlowHistoryTime, f3ConnectGuardFlowHistoryRxNotagPkts=f3ConnectGuardFlowHistoryRxNotagPkts, f3ConnectGuardKeyExchangeProfileAuthPassword=f3ConnectGuardKeyExchangeProfileAuthPassword, f3ConnectGuardFlowKeyExchangeFrameOuterVlanEtherType=f3ConnectGuardFlowKeyExchangeFrameOuterVlanEtherType, f3ConnectGuardFlowStatsRxNotagPkts=f3ConnectGuardFlowStatsRxNotagPkts, f3ConnectGuardRxSCStatsAction=f3ConnectGuardRxSCStatsAction, f3ConnectGuardTxSAStartedTime=f3ConnectGuardTxSAStartedTime, f3ConnectGuardFlowHistoryTable=f3ConnectGuardFlowHistoryTable, f3ConnectGuardTxSCHistoryTxEncryptedPkts=f3ConnectGuardTxSCHistoryTxEncryptedPkts, f3ConnectGuardFlowKeyExchangeFrameInner1VlanId=f3ConnectGuardFlowKeyExchangeFrameInner1VlanId, f3ConnectGuardTxSCHistoryTime=f3ConnectGuardTxSCHistoryTime, f3ConnectGuardRxSCThresholdTable=f3ConnectGuardRxSCThresholdTable, f3ConnectGuardFlowStatsAction=f3ConnectGuardFlowStatsAction, f3ConnectGuardRxSAStatsUnusedSAPkts=f3ConnectGuardRxSAStatsUnusedSAPkts, f3ConnectGuardRxSCI=f3ConnectGuardRxSCI, f3ConnectGuardRxSCStatsEntry=f3ConnectGuardRxSCStatsEntry, f3ConnectGuardFlowReplayProtectionEnabled=f3ConnectGuardFlowReplayProtectionEnabled, f3ConnectGuardFlowKeyExchangeFrameTagControl=f3ConnectGuardFlowKeyExchangeFrameTagControl, f3ConnectGuardRxSAState=f3ConnectGuardRxSAState, f3ConnectGuardFlowKeyExchangeFrameInner1VlanEtherType=f3ConnectGuardFlowKeyExchangeFrameInner1VlanEtherType, f3ConnectGuardTxSACreatedTime=f3ConnectGuardTxSACreatedTime, f3ConnectGuardFlowStatsTxTooLongPkts=f3ConnectGuardFlowStatsTxTooLongPkts, f3ConnectGuardConfigScalars=f3ConnectGuardConfigScalars, f3ConnectGuardKeyExchangeProfileDiffieHellmanKeyPairLen=f3ConnectGuardKeyExchangeProfileDiffieHellmanKeyPairLen, f3ConnectGuardTxSAStoppedTime=f3ConnectGuardTxSAStoppedTime, f3ConnectGuardRxSCHistoryRxUnusedSAPkts=f3ConnectGuardRxSCHistoryRxUnusedSAPkts, f3ConnectGuardRxSCStatsRxOKPkts=f3ConnectGuardRxSCStatsRxOKPkts, f3ConnectGuardTxSCThresholdValueHi=f3ConnectGuardTxSCThresholdValueHi, f3ConnectGuardFlowKeyExchangeProfile=f3ConnectGuardFlowKeyExchangeProfile, f3ConnectGuardKeyExchangeProfileRowStatus=f3ConnectGuardKeyExchangeProfileRowStatus, f3ConnectGuardRxSCHistoryRxUncheckedPkts=f3ConnectGuardRxSCHistoryRxUncheckedPkts, f3ConnectGuardTxSCStatsTxOctetsEncrypted=f3ConnectGuardTxSCStatsTxOctetsEncrypted)
