#
# PySNMP MIB module VMWARE-RESOURCES-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/vmware/VMWARE-RESOURCES-MIB
# Produced by pysmi-1.1.12 at Tue Jun  4 13:57:50 2024
# On host fv-az1110-484 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
NotificationType, Unsigned32, Bits, ModuleIdentity, Counter64, TimeTicks, Gauge32, IpAddress, Integer32, MibIdentifier, Counter32, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, iso = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Unsigned32", "Bits", "ModuleIdentity", "Counter64", "TimeTicks", "Gauge32", "IpAddress", "Integer32", "MibIdentifier", "Counter32", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
vmwResources, = mibBuilder.importSymbols("VMWARE-ROOT-MIB", "vmwResources")
VmwSubsystemStatus, = mibBuilder.importSymbols("VMWARE-TC-MIB", "VmwSubsystemStatus")
vmwResourcesMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6876, 3, 10))
vmwResourcesMIB.setRevisions(('2008-10-15 00:00', '2007-12-27 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: vmwResourcesMIB.setRevisionsDescriptions(('All per-VM managed objects were moved to new managed objects in VMWARE-VMINFO MIB.\n      See VMWARE-OBSOLETE-RESOURCE-MIB for oid assignments in prior version of this mib module.\n      Add to comments the Managed Object Browser (MOB) URLs which provide \n      data this MIB module exposes.', 'This is the first revision in SMIv2 format. Prior version was published as SMIv1.',))
if mibBuilder.loadTexts: vmwResourcesMIB.setLastUpdated('200810150000Z')
if mibBuilder.loadTexts: vmwResourcesMIB.setOrganization('VMware, Inc')
if mibBuilder.loadTexts: vmwResourcesMIB.setContactInfo('VMware, Inc\n    3401 Hillview Ave\n    Palo Alto, CA 94304\n    Tel: 1-877-486-9273 or 650-427-5000\n    Fax: 650-427-5001\n    Web: http://communities.vmware.com/community/developer/forums/managementapi\n    ')
if mibBuilder.loadTexts: vmwResourcesMIB.setDescription('This MIB module provides instrumentation of ESX Hypervisor resources such \n      as cpu, memory, and disk.')
vmwCPU = ObjectIdentity((1, 3, 6, 1, 4, 1, 6876, 3, 1))
if mibBuilder.loadTexts: vmwCPU.setStatus('current')
if mibBuilder.loadTexts: vmwCPU.setDescription('Information about physical CPU(s)')
vmwNumCPUs = MibScalar((1, 3, 6, 1, 4, 1, 6876, 3, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmwNumCPUs.setStatus('current')
if mibBuilder.loadTexts: vmwNumCPUs.setDescription('Number of physical CPUs on the system.')
vmwMemory = MibIdentifier((1, 3, 6, 1, 4, 1, 6876, 3, 2))
vmwMemSize = MibScalar((1, 3, 6, 1, 4, 1, 6876, 3, 2, 1), Gauge32()).setUnits('kilobytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: vmwMemSize.setStatus('current')
if mibBuilder.loadTexts: vmwMemSize.setDescription("Amount of physical memory present on machine as provided by Hypervisor.\n         It is computed from the sum of vmwMemCOS plus unreserved property as\n         reported VIM subsystem. Unreserved is computed from hypervisor's total\n         number of memory pages.\n\n         VIM Parent Container: https://esx.example.com/mob/?moid=memorySystem\n         VIM property: unreserved\n         MOB: https://esx.example.com/mob/?moid=memoryManagerSystem&doPath=consoleReservationInfo\n\n         For reference here two other related VIM properties:\n         VIM property: memorySize\n         MOB: https://esx.example.com/mob/?moid=ha%2dhost&doPath=summary%2ehardware\n         \n         VIM property: totalMemory\n         MOB: https://esx.example.com/mob/?moid=ha%2dcompute%2dres&doPath=summary\n         ")
vmwMemCOS = MibScalar((1, 3, 6, 1, 4, 1, 6876, 3, 2, 2), Gauge32()).setUnits('kilobytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: vmwMemCOS.setStatus('current')
if mibBuilder.loadTexts: vmwMemCOS.setDescription('This managed object reports memory allocated for COS, theConsole OS\n         (aka Service Console) which is a memory region carved out of physical\n         memory to boot a RedHat Linux distribution/provides device management\n         interface.\n\n         Note that in the VMware ESXi product there is no COS so this will report 0.\n         \n         This managed object reports the amount of physical memory allocated to the COS.\n         VIM Parent Container: https://esx.example.com/mob/?moid=memorySystem\n         VIM property: serviceConsoleReserved\n         MOB: https://esx.example.com/mob/?moid=memoryManagerSystem&doPath=consoleReservationInfo\n        ')
vmwMemAvail = MibScalar((1, 3, 6, 1, 4, 1, 6876, 3, 2, 3), Gauge32()).setUnits('kilobytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: vmwMemAvail.setStatus('current')
if mibBuilder.loadTexts: vmwMemAvail.setDescription('Amount of memory available to run Virutal Machines and to allocate for\n         hypervisor needs. It is computed by subtracting vmwMemCOS from\n         vmwMemSize. The result is the amount of memory available to VMs and to\n         the hypervisor.\n\n         To get a more accurate view of memory available to VMs the following property\n         represents the amount of resources available for the root resource pool for running \n         virtual machines.\n\n         VIM property: effectiveMemory\n         MOB: https://esx.example.com/mob/?moid=ha%2dcompute%2dres&doPath=summary\n        ')
vmwStorage = MibIdentifier((1, 3, 6, 1, 4, 1, 6876, 3, 5))
vmwHostBusAdapterNumber = MibScalar((1, 3, 6, 1, 4, 1, 6876, 3, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmwHostBusAdapterNumber.setStatus('current')
if mibBuilder.loadTexts: vmwHostBusAdapterNumber.setDescription('Number of entries in vmwHostBusAdapterTable.')
vmwHostBusAdapterTable = MibTable((1, 3, 6, 1, 4, 1, 6876, 3, 5, 2), )
if mibBuilder.loadTexts: vmwHostBusAdapterTable.setStatus('current')
if mibBuilder.loadTexts: vmwHostBusAdapterTable.setDescription('Inventory of Host Bus Adatpers found in this system. \n         CLI: esxcfg-scsidevs -a\n         VIM Parent Container: https://esx.example.com/mob/?moid=storageSystem\n         VIM property: hostBusAdapter\n         MOB: https://esx.example.com/mob/?moid=storageSystem&doPath=storageDeviceInfo')
vmwHostBusAdapterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6876, 3, 5, 2, 1), ).setIndexNames((0, "VMWARE-RESOURCES-MIB", "vmwHostBusAdapterIndex"))
if mibBuilder.loadTexts: vmwHostBusAdapterEntry.setStatus('current')
if mibBuilder.loadTexts: vmwHostBusAdapterEntry.setDescription('Details for this adapter.')
vmwHostBusAdapterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6876, 3, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023)))
if mibBuilder.loadTexts: vmwHostBusAdapterIndex.setStatus('current')
if mibBuilder.loadTexts: vmwHostBusAdapterIndex.setDescription('An arbitrary index assigned to this adapter.')
vmwHbaDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 6876, 3, 5, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmwHbaDeviceName.setStatus('current')
if mibBuilder.loadTexts: vmwHbaDeviceName.setDescription('The system device name for this host bus adapter.')
vmwHbaBusNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6876, 3, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 1023), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmwHbaBusNumber.setStatus('current')
if mibBuilder.loadTexts: vmwHbaBusNumber.setDescription("The host bus number. For unsuported HBA's reports -1.")
vmwHbaStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6876, 3, 5, 2, 1, 4), VmwSubsystemStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmwHbaStatus.setStatus('current')
if mibBuilder.loadTexts: vmwHbaStatus.setDescription('The operational status of the adapter.')
vmwHbaModelName = MibTableColumn((1, 3, 6, 1, 4, 1, 6876, 3, 5, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmwHbaModelName.setStatus('current')
if mibBuilder.loadTexts: vmwHbaModelName.setDescription('The model name of the host bus adapter.')
vmwHbaDriverName = MibTableColumn((1, 3, 6, 1, 4, 1, 6876, 3, 5, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmwHbaDriverName.setStatus('current')
if mibBuilder.loadTexts: vmwHbaDriverName.setDescription('The name of the driver.')
vmwHbaPci = MibTableColumn((1, 3, 6, 1, 4, 1, 6876, 3, 5, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmwHbaPci.setStatus('current')
if mibBuilder.loadTexts: vmwHbaPci.setDescription('The Peripheral Connect Interface (PCI) ID of the device.')
vmwResourceMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6876, 3, 10, 2))
vmwResourceMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6876, 3, 10, 2, 1))
vmwResMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6876, 3, 10, 2, 2))
vmwResourceMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6876, 3, 10, 2, 1, 2)).setObjects(("VMWARE-RESOURCES-MIB", "vmwResourceGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vmwResourceMIBCompliance = vmwResourceMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: vmwResourceMIBCompliance.setDescription('The compliance statement for entities which implement the \n    VMWARE-RESOURCE-MIB.')
vmwResourceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6876, 3, 10, 2, 2, 1)).setObjects(("VMWARE-RESOURCES-MIB", "vmwNumCPUs"), ("VMWARE-RESOURCES-MIB", "vmwMemSize"), ("VMWARE-RESOURCES-MIB", "vmwMemCOS"), ("VMWARE-RESOURCES-MIB", "vmwMemAvail"), ("VMWARE-RESOURCES-MIB", "vmwHostBusAdapterNumber"), ("VMWARE-RESOURCES-MIB", "vmwHbaDeviceName"), ("VMWARE-RESOURCES-MIB", "vmwHbaBusNumber"), ("VMWARE-RESOURCES-MIB", "vmwHbaStatus"), ("VMWARE-RESOURCES-MIB", "vmwHbaModelName"), ("VMWARE-RESOURCES-MIB", "vmwHbaDriverName"), ("VMWARE-RESOURCES-MIB", "vmwHbaPci"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vmwResourceGroup = vmwResourceGroup.setStatus('current')
if mibBuilder.loadTexts: vmwResourceGroup.setDescription('These objects provide resource details.')
mibBuilder.exportSymbols("VMWARE-RESOURCES-MIB", vmwHostBusAdapterIndex=vmwHostBusAdapterIndex, vmwResourceMIBCompliances=vmwResourceMIBCompliances, vmwHbaDeviceName=vmwHbaDeviceName, vmwMemSize=vmwMemSize, vmwHostBusAdapterTable=vmwHostBusAdapterTable, vmwResourcesMIB=vmwResourcesMIB, vmwCPU=vmwCPU, vmwHbaPci=vmwHbaPci, vmwMemAvail=vmwMemAvail, vmwHostBusAdapterNumber=vmwHostBusAdapterNumber, vmwResourceMIBConformance=vmwResourceMIBConformance, vmwHbaDriverName=vmwHbaDriverName, vmwResourceGroup=vmwResourceGroup, vmwHostBusAdapterEntry=vmwHostBusAdapterEntry, vmwResourceMIBCompliance=vmwResourceMIBCompliance, vmwNumCPUs=vmwNumCPUs, vmwResMIBGroups=vmwResMIBGroups, PYSNMP_MODULE_ID=vmwResourcesMIB, vmwStorage=vmwStorage, vmwHbaStatus=vmwHbaStatus, vmwMemory=vmwMemory, vmwHbaBusNumber=vmwHbaBusNumber, vmwHbaModelName=vmwHbaModelName, vmwMemCOS=vmwMemCOS)
