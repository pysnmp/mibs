#
# PySNMP MIB module A10-AX-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/a10/A10-AX-MIB
# Produced by pysmi-1.1.12 at Mon Jul  1 09:09:18 2024
# On host fv-az532-988 platform Linux version 6.5.0-1022-azure by user runner
# Using Python version 3.10.14 (main, Jun 20 2024, 15:20:03) [GCC 11.4.0]
#
a10Mgmt, = mibBuilder.importSymbols("A10-COMMON-MIB", "a10Mgmt")
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion")
CounterBasedGauge64, = mibBuilder.importSymbols("HCNUM-TC", "CounterBasedGauge64")
InetAddressType, = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, iso, TimeTicks, Unsigned32, Integer32, Counter32, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Bits, MibIdentifier, Counter64, ObjectIdentity, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "iso", "TimeTicks", "Unsigned32", "Integer32", "Counter32", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Bits", "MibIdentifier", "Counter64", "ObjectIdentity", "ModuleIdentity")
DisplayString, PhysAddress, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "PhysAddress", "TextualConvention")
axMgmt = ModuleIdentity((1, 3, 6, 1, 4, 1, 22610, 2, 4))
if mibBuilder.loadTexts: axMgmt.setLastUpdated('200705071327Z')
if mibBuilder.loadTexts: axMgmt.setOrganization('A10 Networks, Inc.')
if mibBuilder.loadTexts: axMgmt.setContactInfo('Address: A10 Networks, Inc.\n                                          2309 Bering Drive\n                                          San Jose, CA 95131\n                                 Phone:   +1-888-822-7210 (USA/Canada)\n                                          +1-408-325-8676 (International)\n                                 E-mail:  support@A10Networks.com')
if mibBuilder.loadTexts: axMgmt.setDescription('Management root OID for the application acceleration family appliance')
axSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1))
axLogging = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 2))
axApp = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3))
acosRoot = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 100))
axSysVersion = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 1))
axSysMemory = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 2))
axSysCpu = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 3))
axSysDisk = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 4))
axSysHwInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 5))
axSysInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 6))
axNetwork = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7))
axSysPrimaryVersionOnDisk = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysPrimaryVersionOnDisk.setStatus('current')
if mibBuilder.loadTexts: axSysPrimaryVersionOnDisk.setDescription('The primary system image version on hard disk.')
axSysSecondaryVersionOnDisk = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysSecondaryVersionOnDisk.setStatus('current')
if mibBuilder.loadTexts: axSysSecondaryVersionOnDisk.setDescription('The secondary system image version on hard disk.')
axSysPrimaryVersionOnCF = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysPrimaryVersionOnCF.setStatus('current')
if mibBuilder.loadTexts: axSysPrimaryVersionOnCF.setDescription('The primary system image version on Compact Flash.')
axSysSecondaryVersionOnCF = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysSecondaryVersionOnCF.setStatus('current')
if mibBuilder.loadTexts: axSysSecondaryVersionOnCF.setDescription('The secondary system image version on Compact Flash.')
axSysMemoryTotal = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysMemoryTotal.setStatus('current')
if mibBuilder.loadTexts: axSysMemoryTotal.setDescription('The total memory(KB).')
axSysMemoryUsage = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysMemoryUsage.setStatus('current')
if mibBuilder.loadTexts: axSysMemoryUsage.setDescription('The usage memory(KB).')
axSysCpuNumber = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysCpuNumber.setStatus('current')
if mibBuilder.loadTexts: axSysCpuNumber.setDescription('The cpu number in a10System')
axSysCpuTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 3, 2), )
if mibBuilder.loadTexts: axSysCpuTable.setStatus('current')
if mibBuilder.loadTexts: axSysCpuTable.setDescription('The cpu information table.')
axSysCpuEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 3, 2, 1), ).setIndexNames((0, "A10-AX-MIB", "axSysCpuIndex"))
if mibBuilder.loadTexts: axSysCpuEntry.setStatus('current')
if mibBuilder.loadTexts: axSysCpuEntry.setDescription('The cpu entry')
axSysCpuIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysCpuIndex.setStatus('current')
if mibBuilder.loadTexts: axSysCpuIndex.setDescription('The index of the CPU.')
axSysCpuUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 3, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysCpuUsage.setStatus('current')
if mibBuilder.loadTexts: axSysCpuUsage.setDescription('The CPU Usage.')
axSysCpuUsageValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysCpuUsageValue.setStatus('current')
if mibBuilder.loadTexts: axSysCpuUsageValue.setDescription('The CPU usage value.')
axSysCpuCtrlCpuFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysCpuCtrlCpuFlag.setStatus('current')
if mibBuilder.loadTexts: axSysCpuCtrlCpuFlag.setDescription('The control CPU flag: 1 - control CPU, 0 - data CPU.')
axSysAverageCpuUsage = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysAverageCpuUsage.setStatus('current')
if mibBuilder.loadTexts: axSysAverageCpuUsage.setDescription('The average CPU usage in last 5 seconds.')
axSysAverageControlCpuUsage = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysAverageControlCpuUsage.setStatus('current')
if mibBuilder.loadTexts: axSysAverageControlCpuUsage.setDescription('The average control CPU usage in last 5 seconds.')
axSysAverageDataCpuUsage = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysAverageDataCpuUsage.setStatus('current')
if mibBuilder.loadTexts: axSysAverageDataCpuUsage.setDescription('The average data CPU usage  in last 5 seconds.')
axSysCpuUsageTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 3, 6), )
if mibBuilder.loadTexts: axSysCpuUsageTable.setStatus('current')
if mibBuilder.loadTexts: axSysCpuUsageTable.setDescription('The cpu usage information table.')
axSysCpuUsageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 3, 6, 1), ).setIndexNames((0, "A10-AX-MIB", "axSysCpuIndexInUsage"), (0, "A10-AX-MIB", "axSysCpuUsagePeriodIndex"))
if mibBuilder.loadTexts: axSysCpuUsageEntry.setStatus('current')
if mibBuilder.loadTexts: axSysCpuUsageEntry.setDescription('The CPU Usage entry')
axSysCpuIndexInUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 3, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysCpuIndexInUsage.setStatus('current')
if mibBuilder.loadTexts: axSysCpuIndexInUsage.setDescription('The index of the CPU.')
axSysCpuUsagePeriodIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 3, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysCpuUsagePeriodIndex.setStatus('current')
if mibBuilder.loadTexts: axSysCpuUsagePeriodIndex.setDescription('The CPU usage sampling period:\n                1: 1-second sampling,\n                2: 5-second sampling,\n                3: 10-second sampling,\n                4: 30-second sampling,\n                5: 60-second sampling.')
axSysCpuUsageValueAtPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 3, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysCpuUsageValueAtPeriod.setStatus('current')
if mibBuilder.loadTexts: axSysCpuUsageValueAtPeriod.setDescription('The CPU usage value at given period, 1-sec, 5-sec, 10-sec, 30-sec, and 60-sec.')
axSysCpuUsageCtrlCpuFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 3, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysCpuUsageCtrlCpuFlag.setStatus('current')
if mibBuilder.loadTexts: axSysCpuUsageCtrlCpuFlag.setDescription('The control CPU flag: 1 - control CPU, 0 - data CPU.')
axSysCpuUsagePerPartitionTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 3, 7), )
if mibBuilder.loadTexts: axSysCpuUsagePerPartitionTable.setStatus('current')
if mibBuilder.loadTexts: axSysCpuUsagePerPartitionTable.setDescription('The cpu usage per partition information table.')
axSysCpuUsagePerPartitionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 3, 7, 1), ).setIndexNames((0, "A10-AX-MIB", "axSysCpuIndexInUsagePerPartition"), (0, "A10-AX-MIB", "axSysCpuUsagePerPartitionPeriodIndex"), (0, "A10-AX-MIB", "axSysCpuUsagePartitionName"))
if mibBuilder.loadTexts: axSysCpuUsagePerPartitionEntry.setStatus('current')
if mibBuilder.loadTexts: axSysCpuUsagePerPartitionEntry.setDescription('The CPU Usage per partition entry')
axSysCpuIndexInUsagePerPartition = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 3, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysCpuIndexInUsagePerPartition.setStatus('current')
if mibBuilder.loadTexts: axSysCpuIndexInUsagePerPartition.setDescription('The index of the CPU. The value, 0, is for the control CPU.')
axSysCpuUsagePerPartitionPeriodIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 3, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysCpuUsagePerPartitionPeriodIndex.setStatus('current')
if mibBuilder.loadTexts: axSysCpuUsagePerPartitionPeriodIndex.setDescription('The CPU usage per partition sampling period:\n                1: 1-second sampling,\n                2: 5-second sampling,\n                3: 10-second sampling,\n                4: 30-second sampling,\n                5: 60-second sampling.')
axSysCpuUsagePartitionName = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 3, 7, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysCpuUsagePartitionName.setStatus('current')
if mibBuilder.loadTexts: axSysCpuUsagePartitionName.setDescription('The partition name in the CPU usage per partition table.')
axSysCpuUsagePerPartitionValueAtPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 3, 7, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysCpuUsagePerPartitionValueAtPeriod.setStatus('current')
if mibBuilder.loadTexts: axSysCpuUsagePerPartitionValueAtPeriod.setDescription('The CPU usage per partition value at given period, 1-sec, 5-sec, 10-sec, 30-sec, and 60-sec.')
axSysCpuUsagePerPartitionCtrlCpuFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 3, 7, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysCpuUsagePerPartitionCtrlCpuFlag.setStatus('current')
if mibBuilder.loadTexts: axSysCpuUsagePerPartitionCtrlCpuFlag.setDescription('The control CPU flag: 1 - control CPU, 0 - data CPU.')
axSysDiskTotalSpace = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysDiskTotalSpace.setStatus('current')
if mibBuilder.loadTexts: axSysDiskTotalSpace.setDescription('The total space of the disk in MB.')
axSysDiskFreeSpace = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysDiskFreeSpace.setStatus('current')
if mibBuilder.loadTexts: axSysDiskFreeSpace.setDescription('The free space of the disk in MB.')
axSysHwPhySystemTemp = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysHwPhySystemTemp.setStatus('current')
if mibBuilder.loadTexts: axSysHwPhySystemTemp.setDescription('The physical system temperature in Celsius.')
axSysHwFan1Speed = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysHwFan1Speed.setStatus('deprecated')
if mibBuilder.loadTexts: axSysHwFan1Speed.setDescription("The fan1's speed")
axSysHwFan2Speed = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysHwFan2Speed.setStatus('deprecated')
if mibBuilder.loadTexts: axSysHwFan2Speed.setDescription("The fan2's speed")
axSysHwFan3Speed = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 5, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysHwFan3Speed.setStatus('deprecated')
if mibBuilder.loadTexts: axSysHwFan3Speed.setDescription("The fan3's speed")
axSysHwPhySystemTempStatus = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 5, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("failed", 0), ("low-med", 1), ("med-med", 2), ("med-high", 3), ("ok", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysHwPhySystemTempStatus.setStatus('current')
if mibBuilder.loadTexts: axSysHwPhySystemTempStatus.setDescription('The system temperature status range')
axSysLowerOrLeftPowerSupplyStatus = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 5, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, -1))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("unknown", -1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysLowerOrLeftPowerSupplyStatus.setStatus('deprecated')
if mibBuilder.loadTexts: axSysLowerOrLeftPowerSupplyStatus.setDescription('The lower power supply status for AX 2000, 2100, 2200, 3100, 3200, 4330, 4430, 5100, 5200, 5330, 5430, 5630, 6430 and 6630; or,\n         the left power supply status for AX 2500, 2600, 300, or\n         the AX 1000 power supply status.')
axSysUpperOrRightPowerSupplyStatus = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 5, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, -1))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("unknown", -1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysUpperOrRightPowerSupplyStatus.setStatus('deprecated')
if mibBuilder.loadTexts: axSysUpperOrRightPowerSupplyStatus.setDescription('The upper power supply status for AX 2000, 2100, 2200, 3100, 3200, 4330, 4430, 5100, 5200, 5330, 5430, 5630, 6430 and 6630\n         the right power supply status for AX 2500, 2600, 3000.\n         Not applied for AX 1000.')
axSysFanStatusTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 5, 9), )
if mibBuilder.loadTexts: axSysFanStatusTable.setStatus('current')
if mibBuilder.loadTexts: axSysFanStatusTable.setDescription('The table contains system fan status ')
axSysFanStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 5, 9, 1), ).setIndexNames((0, "A10-AX-MIB", "axFanIndex"))
if mibBuilder.loadTexts: axSysFanStatusEntry.setStatus('current')
if mibBuilder.loadTexts: axSysFanStatusEntry.setDescription('Columns in the axSysFanStatusTable')
axFanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 5, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFanIndex.setStatus('current')
if mibBuilder.loadTexts: axFanIndex.setDescription('The system fan index.')
axFanName = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 5, 9, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFanName.setStatus('current')
if mibBuilder.loadTexts: axFanName.setDescription('The system fan name.')
axFanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 5, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 5, 6, 7, -2, -1))).clone(namedValues=NamedValues(("failed", 0), ("okFixedHigh", 4), ("okLowMed", 5), ("okMedMed", 6), ("okMedHigh", 7), ("notReady", -2), ("unknown", -1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFanStatus.setStatus('current')
if mibBuilder.loadTexts: axFanStatus.setDescription('Fan status:\n                   0: Failed, 4: OK-fixed/high, 5: OK-low/med, 6: OK-med/med, 7: OK-med/high,\n                   -2: not ready, -1: unknown.')
axFanSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 5, 9, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFanSpeed.setStatus('current')
if mibBuilder.loadTexts: axFanSpeed.setDescription('The fan speed.')
axPowerSupplyVoltageTotal = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 5, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axPowerSupplyVoltageTotal.setStatus('current')
if mibBuilder.loadTexts: axPowerSupplyVoltageTotal.setDescription('The total number of axPowerSupplyVoltage entries.')
axPowerSupplyVoltageTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 5, 11), )
if mibBuilder.loadTexts: axPowerSupplyVoltageTable.setStatus('current')
if mibBuilder.loadTexts: axPowerSupplyVoltageTable.setDescription('A table contains the system power supply voltage status.')
axPowerSupplyVoltageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 5, 11, 1), ).setIndexNames((0, "A10-AX-MIB", "axPowerSupplyVoltageIndex"))
if mibBuilder.loadTexts: axPowerSupplyVoltageEntry.setStatus('current')
if mibBuilder.loadTexts: axPowerSupplyVoltageEntry.setDescription('Columns in the axPowerSupplyVoltageTable')
axPowerSupplyVoltageIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 5, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axPowerSupplyVoltageIndex.setStatus('current')
if mibBuilder.loadTexts: axPowerSupplyVoltageIndex.setDescription('The table index.')
axPowerSupplyVoltageStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 5, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("invalid", 0), ("normal", 1), ("unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axPowerSupplyVoltageStatus.setStatus('current')
if mibBuilder.loadTexts: axPowerSupplyVoltageStatus.setDescription('The status of the indexed system power supply voltage.\n                 This is only supported for the platform where the sensor data is available.')
axPowerSupplyVoltageDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 5, 11, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axPowerSupplyVoltageDescription.setStatus('current')
if mibBuilder.loadTexts: axPowerSupplyVoltageDescription.setDescription('The description of the system power supply voltage.')
axSysPowerSupplyStatusTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 5, 12), )
if mibBuilder.loadTexts: axSysPowerSupplyStatusTable.setStatus('current')
if mibBuilder.loadTexts: axSysPowerSupplyStatusTable.setDescription('The table contains power supply  status.')
axSysPowerSupplyStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 5, 12, 1), ).setIndexNames((0, "A10-AX-MIB", "axPowerSupplyIndex"))
if mibBuilder.loadTexts: axSysPowerSupplyStatusEntry.setStatus('current')
if mibBuilder.loadTexts: axSysPowerSupplyStatusEntry.setDescription('Columns in the axSysPowerSupplyStatusTable')
axPowerSupplyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 5, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axPowerSupplyIndex.setStatus('current')
if mibBuilder.loadTexts: axPowerSupplyIndex.setDescription('The system power suplly index.')
axPowerSupplyName = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 5, 12, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axPowerSupplyName.setStatus('current')
if mibBuilder.loadTexts: axPowerSupplyName.setDescription('The pwer supply name.')
axPowerSupplyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 5, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, -1))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("absent", 2), ("unknown", -1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axPowerSupplyStatus.setStatus('current')
if mibBuilder.loadTexts: axPowerSupplyStatus.setDescription('The power supply status.')
axSysStartupMode = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 0))).clone(namedValues=NamedValues(("primaryDisk", 1), ("secondaryDisk", 2), ("primaryCF", 3), ("secondaryCF", 4), ("unknown", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysStartupMode.setStatus('current')
if mibBuilder.loadTexts: axSysStartupMode.setDescription('The startup mode.')
axSysSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 6, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysSerialNumber.setStatus('current')
if mibBuilder.loadTexts: axSysSerialNumber.setDescription('The system serial number.')
axSysFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 6, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysFirmwareVersion.setStatus('current')
if mibBuilder.loadTexts: axSysFirmwareVersion.setDescription('The system firmware version.')
axSysAFleXEngineVersion = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 6, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysAFleXEngineVersion.setStatus('current')
if mibBuilder.loadTexts: axSysAFleXEngineVersion.setDescription('The system aFlex engine version.')
axInterfaces = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1))
axVlans = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 2))
axTrunks = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 3))
axLayer3 = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 100))
axInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 1))
axInterfaceStat = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 2))
axInterfaceCount = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axInterfaceCount.setStatus('current')
if mibBuilder.loadTexts: axInterfaceCount.setDescription('The number of axInterface entries in the table.')
axInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 1, 2), )
if mibBuilder.loadTexts: axInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: axInterfaceTable.setDescription('A table containing information of the physical interfaces.')
axInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 1, 2, 1), ).setIndexNames((0, "A10-AX-MIB", "axInterfaceIndex"))
if mibBuilder.loadTexts: axInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: axInterfaceEntry.setDescription('Columns in the axInterface Table')
axInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axInterfaceIndex.setStatus('current')
if mibBuilder.loadTexts: axInterfaceIndex.setDescription('The index value of the interface.')
axInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axInterfaceName.setStatus('current')
if mibBuilder.loadTexts: axInterfaceName.setDescription('The name of the interface.')
axInterfaceMediaMaxSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axInterfaceMediaMaxSpeed.setStatus('current')
if mibBuilder.loadTexts: axInterfaceMediaMaxSpeed.setDescription('The best possible media speed in MBPS for the interface.')
axInterfaceMediaMaxDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("half", 1), ("full", 2), ("auto", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axInterfaceMediaMaxDuplex.setStatus('current')
if mibBuilder.loadTexts: axInterfaceMediaMaxDuplex.setDescription('The best possible media duplex mode for the interface.\n                 half    - Force half duplex;\n                 full    - Force full duplex;\n                 none    - All media is deselected.')
axInterfaceMediaActiveSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axInterfaceMediaActiveSpeed.setStatus('current')
if mibBuilder.loadTexts: axInterfaceMediaActiveSpeed.setDescription('The current active media speed for the interface.')
axInterfaceMediaActiveDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("half", 1), ("full", 2), ("auto", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axInterfaceMediaActiveDuplex.setStatus('current')
if mibBuilder.loadTexts: axInterfaceMediaActiveDuplex.setDescription('The active media duplex mode for the specified interface.\n                 half    - Half duplex;\n                 full    - Full duplex;\n                 auto    - Auto duplex;\n                 none    - All media is disabled.')
axInterfaceMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 1, 2, 1, 7), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axInterfaceMacAddr.setStatus('current')
if mibBuilder.loadTexts: axInterfaceMacAddr.setDescription('The MAC address of the specified interface.')
axInterfaceMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 1, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axInterfaceMtu.setStatus('current')
if mibBuilder.loadTexts: axInterfaceMtu.setDescription('The maximum transmission unit size of datagram which can be\n                sent/received on the specified interface.')
axInterfaceAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axInterfaceAdminStatus.setStatus('current')
if mibBuilder.loadTexts: axInterfaceAdminStatus.setDescription('The state of this interface, whether it is enabled.')
axInterfaceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("up", 0), ("down", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axInterfaceStatus.setStatus('current')
if mibBuilder.loadTexts: axInterfaceStatus.setDescription('The current state of the interface.\n                 up            - has link and is initialized;\n                 down          - has no link and is initialized;\n                 disabled      - has been forced down ')
axInterfaceAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 1, 2, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axInterfaceAlias.setStatus('current')
if mibBuilder.loadTexts: axInterfaceAlias.setDescription('The alias name of the interface if defined.')
axInterfaceFlowCtrlAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axInterfaceFlowCtrlAdminStatus.setStatus('current')
if mibBuilder.loadTexts: axInterfaceFlowCtrlAdminStatus.setDescription('The control flow of this interface is enabled or disabled.')
axInterfaceFlowCtrlOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axInterfaceFlowCtrlOperStatus.setStatus('current')
if mibBuilder.loadTexts: axInterfaceFlowCtrlOperStatus.setDescription('The control flow state of this interface.')
axInterfaceStatTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 2, 1), )
if mibBuilder.loadTexts: axInterfaceStatTable.setStatus('current')
if mibBuilder.loadTexts: axInterfaceStatTable.setDescription('A table containing statistic information of the physical interfacess.')
axInterfaceStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 2, 1, 1), ).setIndexNames((0, "A10-AX-MIB", "axInterfaceStatIndex"))
if mibBuilder.loadTexts: axInterfaceStatEntry.setStatus('current')
if mibBuilder.loadTexts: axInterfaceStatEntry.setDescription('Columns in the axInterfaceStat Table')
axInterfaceStatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axInterfaceStatIndex.setStatus('current')
if mibBuilder.loadTexts: axInterfaceStatIndex.setDescription('The index value of the interface.')
axInterfaceStatPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 2, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axInterfaceStatPktsIn.setStatus('current')
if mibBuilder.loadTexts: axInterfaceStatPktsIn.setDescription('The number of packets received on this interface.')
axInterfaceStatBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 2, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axInterfaceStatBytesIn.setStatus('current')
if mibBuilder.loadTexts: axInterfaceStatBytesIn.setDescription('The number of bytes received on this interface.')
axInterfaceStatPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 2, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axInterfaceStatPktsOut.setStatus('current')
if mibBuilder.loadTexts: axInterfaceStatPktsOut.setDescription('The number of packets transmitted out of this interface.')
axInterfaceStatBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 2, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axInterfaceStatBytesOut.setStatus('current')
if mibBuilder.loadTexts: axInterfaceStatBytesOut.setDescription('The number of bytes transmitted out of this interface.')
axInterfaceStatMcastIn = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 2, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axInterfaceStatMcastIn.setStatus('current')
if mibBuilder.loadTexts: axInterfaceStatMcastIn.setDescription('The number of multicast packets received on this interface.')
axInterfaceStatMcastOut = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 2, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axInterfaceStatMcastOut.setStatus('current')
if mibBuilder.loadTexts: axInterfaceStatMcastOut.setDescription('The number of multicast packets transmitted out of this interface.')
axInterfaceStatErrorsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 2, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axInterfaceStatErrorsIn.setStatus('current')
if mibBuilder.loadTexts: axInterfaceStatErrorsIn.setDescription('The number of received packets that are either undersized,\n                oversized, or have FCS errors.')
axInterfaceStatErrorsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 2, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axInterfaceStatErrorsOut.setStatus('current')
if mibBuilder.loadTexts: axInterfaceStatErrorsOut.setDescription('The number of excessive collisions, incremented for each\n                frame that experienced 16 collisions during transmission and\n                was aborted.')
axInterfaceStatDropsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 2, 1, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axInterfaceStatDropsIn.setStatus('current')
if mibBuilder.loadTexts: axInterfaceStatDropsIn.setDescription('The number of packets dropped on ingress for various reasons.')
axInterfaceStatDropsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 2, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axInterfaceStatDropsOut.setStatus('current')
if mibBuilder.loadTexts: axInterfaceStatDropsOut.setDescription('The number of packets aged out or with excessive transmission\n                delays due to multiple deferrals.')
axInterfaceStatCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 2, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axInterfaceStatCollisions.setStatus('current')
if mibBuilder.loadTexts: axInterfaceStatCollisions.setDescription('The number of collisions on this interface, incremented by the\n                number of collisions experienced during transmissions of a frame')
axInterfaceStatBitsPerSecIn = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 2, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axInterfaceStatBitsPerSecIn.setStatus('current')
if mibBuilder.loadTexts: axInterfaceStatBitsPerSecIn.setDescription('The input rate in bits per second.')
axInterfaceStatPktsPerSecIn = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 2, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axInterfaceStatPktsPerSecIn.setStatus('current')
if mibBuilder.loadTexts: axInterfaceStatPktsPerSecIn.setDescription('The input rate in packets per second.')
axInterfaceStatUtilPercentIn = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 2, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axInterfaceStatUtilPercentIn.setStatus('current')
if mibBuilder.loadTexts: axInterfaceStatUtilPercentIn.setDescription("The input utilization in percentage.  For the ve interface, it's 0.")
axInterfaceStatBitsPerSecOut = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 2, 1, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axInterfaceStatBitsPerSecOut.setStatus('current')
if mibBuilder.loadTexts: axInterfaceStatBitsPerSecOut.setDescription('The output rate in bits per second.')
axInterfaceStatPktsPerSecOut = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 2, 1, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axInterfaceStatPktsPerSecOut.setStatus('current')
if mibBuilder.loadTexts: axInterfaceStatPktsPerSecOut.setDescription('The output rate in packets per second.')
axInterfaceStatUtilPercentOut = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 2, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axInterfaceStatUtilPercentOut.setStatus('current')
if mibBuilder.loadTexts: axInterfaceStatUtilPercentOut.setDescription("The output utilization in percentage.  For the ve interface, it's 0.")
axVlanCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 2, 1))
axVlanCfgTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 2, 1, 1), )
if mibBuilder.loadTexts: axVlanCfgTable.setStatus('current')
if mibBuilder.loadTexts: axVlanCfgTable.setDescription('The table contains VLAN configuration.')
axVlanCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 2, 1, 1, 1), ).setIndexNames((0, "A10-AX-MIB", "axVlanId"))
if mibBuilder.loadTexts: axVlanCfgEntry.setStatus('current')
if mibBuilder.loadTexts: axVlanCfgEntry.setDescription('Columns in the axVlanCfgTable')
axVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 2, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVlanId.setStatus('current')
if mibBuilder.loadTexts: axVlanId.setDescription('The VLAN id.')
axVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 2, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVlanName.setStatus('current')
if mibBuilder.loadTexts: axVlanName.setDescription('The VLAN name.')
axVlanRouterInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 2, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVlanRouterInterface.setStatus('current')
if mibBuilder.loadTexts: axVlanRouterInterface.setDescription('VLAN router interface (ve) if configured.  If a SNMP-Get value is zero, that means this object is not configured.')
axVlanCfgMemberTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 2, 1, 2), )
if mibBuilder.loadTexts: axVlanCfgMemberTable.setStatus('current')
if mibBuilder.loadTexts: axVlanCfgMemberTable.setDescription('The table contains VLAN member configuration.')
axVlanCfgMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 2, 1, 2, 1), ).setIndexNames((0, "A10-AX-MIB", "axVlanMemberVlanId"), (0, "A10-AX-MIB", "axVlanMemberIntfId"))
if mibBuilder.loadTexts: axVlanCfgMemberEntry.setStatus('current')
if mibBuilder.loadTexts: axVlanCfgMemberEntry.setDescription('Columns in the axVlanCfgMemberTable')
axVlanMemberVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 2, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVlanMemberVlanId.setStatus('current')
if mibBuilder.loadTexts: axVlanMemberVlanId.setDescription('The VLAN id.')
axVlanMemberIntfId = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 2, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVlanMemberIntfId.setStatus('current')
if mibBuilder.loadTexts: axVlanMemberIntfId.setDescription('The interface id configures as the VLAN member.')
axVlanMemberTagged = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 2, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVlanMemberTagged.setStatus('current')
if mibBuilder.loadTexts: axVlanMemberTagged.setDescription('The tagged/untagged state of the specific VLAN member.')
axTrunk = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 3, 1))
axTrunkStats = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 3, 2))
axTrunkCfgMembers = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 3, 3))
axTrunkTotal = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTrunkTotal.setStatus('current')
if mibBuilder.loadTexts: axTrunkTotal.setDescription('The total number of axTrunk entries in the table.')
axTrunkTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 3, 1, 2), )
if mibBuilder.loadTexts: axTrunkTable.setStatus('current')
if mibBuilder.loadTexts: axTrunkTable.setDescription('A table contains trunk information.')
axTrunkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 3, 1, 2, 1), ).setIndexNames((0, "A10-AX-MIB", "axTrunkName"))
if mibBuilder.loadTexts: axTrunkEntry.setStatus('current')
if mibBuilder.loadTexts: axTrunkEntry.setDescription('Columns in the axTrunkTable')
axTrunkName = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 3, 1, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTrunkName.setStatus('current')
if mibBuilder.loadTexts: axTrunkName.setDescription('The trunk name.')
axTrunkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 3, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("down", 0), ("up", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTrunkStatus.setStatus('current')
if mibBuilder.loadTexts: axTrunkStatus.setDescription('The trunk status.')
axTrunkDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 3, 1, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTrunkDescription.setStatus('current')
if mibBuilder.loadTexts: axTrunkDescription.setDescription('The trunk description.')
axTrunkTypeLacpEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 3, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTrunkTypeLacpEnabled.setStatus('current')
if mibBuilder.loadTexts: axTrunkTypeLacpEnabled.setDescription('The trunk type is dynamic, LACP.')
axTrunkCfgMemberCount = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 3, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTrunkCfgMemberCount.setStatus('current')
if mibBuilder.loadTexts: axTrunkCfgMemberCount.setDescription('The total number of configured trunk members.')
axTrunkPortThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 3, 1, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTrunkPortThreshold.setStatus('current')
if mibBuilder.loadTexts: axTrunkPortThreshold.setDescription('Threshold for minimum number of ports that need to be up.')
axTrunkPortThresholdTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 3, 1, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTrunkPortThresholdTimer.setStatus('current')
if mibBuilder.loadTexts: axTrunkPortThresholdTimer.setDescription('Timer for port-threshold in second.')
axTrunkStatTotal = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 3, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTrunkStatTotal.setStatus('current')
if mibBuilder.loadTexts: axTrunkStatTotal.setDescription('The total number of axTrunkStat entries in the table.')
axTrunkStatTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 3, 2, 2), )
if mibBuilder.loadTexts: axTrunkStatTable.setStatus('current')
if mibBuilder.loadTexts: axTrunkStatTable.setDescription('A table contains trunk statistic information.')
axTrunkStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 3, 2, 2, 1), ).setIndexNames((0, "A10-AX-MIB", "axTrunkStatName"))
if mibBuilder.loadTexts: axTrunkStatEntry.setStatus('current')
if mibBuilder.loadTexts: axTrunkStatEntry.setDescription('Columns in the axTrunkStatTable')
axTrunkStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 3, 2, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTrunkStatName.setStatus('current')
if mibBuilder.loadTexts: axTrunkStatName.setDescription('The trunk name.')
axTrunkStatPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 3, 2, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTrunkStatPktsIn.setStatus('current')
if mibBuilder.loadTexts: axTrunkStatPktsIn.setDescription('The total number of received packets on the given trunk.')
axTrunkStatBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 3, 2, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTrunkStatBytesIn.setStatus('current')
if mibBuilder.loadTexts: axTrunkStatBytesIn.setDescription('The total number of received bytes on the given trunk.')
axTrunkStatPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 3, 2, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTrunkStatPktsOut.setStatus('current')
if mibBuilder.loadTexts: axTrunkStatPktsOut.setDescription('The total number of transmitted packets on the given trunk.')
axTrunkStatBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 3, 2, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTrunkStatBytesOut.setStatus('current')
if mibBuilder.loadTexts: axTrunkStatBytesOut.setDescription('The total number of transmitted bytes on the given trunk.')
axTrunkStatMcastIn = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 3, 2, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTrunkStatMcastIn.setStatus('current')
if mibBuilder.loadTexts: axTrunkStatMcastIn.setDescription('The total number of received multicast packets on the given trunk.')
axTrunkStatMcastOut = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 3, 2, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTrunkStatMcastOut.setStatus('current')
if mibBuilder.loadTexts: axTrunkStatMcastOut.setDescription('The total number of transmitted multicast packets out of the given trunk.')
axTrunkStatErrorsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 3, 2, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTrunkStatErrorsIn.setStatus('current')
if mibBuilder.loadTexts: axTrunkStatErrorsIn.setDescription('The total number of received packets with errors by the given trunk.')
axTrunkStatErrorsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 3, 2, 2, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTrunkStatErrorsOut.setStatus('current')
if mibBuilder.loadTexts: axTrunkStatErrorsOut.setDescription('The total number of excessive collisions, incremented for each\n                frame that experienced 16 collisions during transmission and\n                was aborted on the given trunk.')
axTrunkStatDropsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 3, 2, 2, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTrunkStatDropsIn.setStatus('current')
if mibBuilder.loadTexts: axTrunkStatDropsIn.setDescription('The total number of dropped packets on the given trunk.')
axTrunkStatDropsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 3, 2, 2, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTrunkStatDropsOut.setStatus('current')
if mibBuilder.loadTexts: axTrunkStatDropsOut.setDescription('The total number of packets aged out or with excessive transmission\n                delays due to multiple deferrals on the given trunk.')
axTrunkCfgMemberTotal = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 3, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTrunkCfgMemberTotal.setStatus('current')
if mibBuilder.loadTexts: axTrunkCfgMemberTotal.setDescription('The total number of axTrunkCfgMember entries.')
axTrunkCfgMemberTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 3, 3, 2), )
if mibBuilder.loadTexts: axTrunkCfgMemberTable.setStatus('current')
if mibBuilder.loadTexts: axTrunkCfgMemberTable.setDescription('A table contains configured trunk member information.')
axTrunkCfgMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 3, 3, 2, 1), ).setIndexNames((0, "A10-AX-MIB", "axTrunkCfgMemberTrunkName"), (0, "A10-AX-MIB", "axTrunkCfgMemberName"))
if mibBuilder.loadTexts: axTrunkCfgMemberEntry.setStatus('current')
if mibBuilder.loadTexts: axTrunkCfgMemberEntry.setDescription('Columns in the sysTrunkCfgMember Table')
axTrunkCfgMemberTrunkName = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 3, 3, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTrunkCfgMemberTrunkName.setStatus('current')
if mibBuilder.loadTexts: axTrunkCfgMemberTrunkName.setDescription('The trunk name.')
axTrunkCfgMemberName = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 3, 3, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTrunkCfgMemberName.setStatus('current')
if mibBuilder.loadTexts: axTrunkCfgMemberName.setDescription('The trunk member name: the physical port belongs to the trunk.')
axTrunkCfgMemberAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 3, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTrunkCfgMemberAdminStatus.setStatus('current')
if mibBuilder.loadTexts: axTrunkCfgMemberAdminStatus.setDescription('The trunk port member administrative status.')
axTrunkCfgMemberOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 3, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("down", 0), ("up", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTrunkCfgMemberOperStatus.setStatus('current')
if mibBuilder.loadTexts: axTrunkCfgMemberOperStatus.setDescription('The trunk port member operational status.')
axLogBufferSize = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 2, 1), Integer32().clone(100000)).setMaxAccess("readonly")
if mibBuilder.loadTexts: axLogBufferSize.setStatus('current')
if mibBuilder.loadTexts: axLogBufferSize.setDescription('The logging database size.')
axLogBufferPri = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, -1))).clone(namedValues=NamedValues(("emergency", 0), ("alert", 1), ("critical", 2), ("error", 3), ("warning", 4), ("notice", 5), ("info", 6), ("debug", 7), ("notDefined", -1))).clone(7)).setMaxAccess("readonly")
if mibBuilder.loadTexts: axLogBufferPri.setStatus('current')
if mibBuilder.loadTexts: axLogBufferPri.setDescription('The logging buffer priority, logging messages which levels above\n                                that value must be output to internal database.')
axLogConsolePri = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, -1))).clone(namedValues=NamedValues(("emergency", 0), ("alert", 1), ("critical", 2), ("error", 3), ("warning", 4), ("notice", 5), ("info", 6), ("debug", 7), ("notDefined", -1))).clone(7)).setMaxAccess("readonly")
if mibBuilder.loadTexts: axLogConsolePri.setStatus('current')
if mibBuilder.loadTexts: axLogConsolePri.setDescription('The logging console priority, logging messages which levels above\n                                that value must be output to console.')
axLogEmailPri = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, -1))).clone(namedValues=NamedValues(("emergency", 0), ("alert", 1), ("critical", 2), ("error", 3), ("warning", 4), ("notice", 5), ("info", 6), ("debug", 7), ("notDefined", -1))).clone(-1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: axLogEmailPri.setStatus('current')
if mibBuilder.loadTexts: axLogEmailPri.setDescription('The logging email priority, logging messages which levels above\n                                that value must be output to email address.')
axLogEmailAddr = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 2, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axLogEmailAddr.setStatus('current')
if mibBuilder.loadTexts: axLogEmailAddr.setDescription('The email address that receive the logging messages.')
axLogSyslogPri = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, -1))).clone(namedValues=NamedValues(("emergency", 0), ("alert", 1), ("critical", 2), ("error", 3), ("warning", 4), ("notice", 5), ("info", 6), ("debug", 7), ("notDefined", -1))).clone(-1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: axLogSyslogPri.setStatus('current')
if mibBuilder.loadTexts: axLogSyslogPri.setDescription('The logging syslog priority, logging messages which levels above\n                                that value must be output to syslog host.')
axLogSyslogHostTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 2, 9), )
if mibBuilder.loadTexts: axLogSyslogHostTable.setStatus('current')
if mibBuilder.loadTexts: axLogSyslogHostTable.setDescription('The syslog host table.')
axLogSyslogHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 2, 9, 1), ).setIndexNames((0, "A10-AX-MIB", "axLogSyslogHostIndex"))
if mibBuilder.loadTexts: axLogSyslogHostEntry.setStatus('current')
if mibBuilder.loadTexts: axLogSyslogHostEntry.setDescription('The syslog host entry')
axLogSyslogHostIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 2, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axLogSyslogHostIndex.setStatus('current')
if mibBuilder.loadTexts: axLogSyslogHostIndex.setDescription('The index of the syslog host list.')
axLogSyslogHost = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 2, 9, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axLogSyslogHost.setStatus('current')
if mibBuilder.loadTexts: axLogSyslogHost.setDescription('The syslog host IP address or DNS name.')
axLogSyslogPort = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 2, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32767)).clone(514)).setMaxAccess("readonly")
if mibBuilder.loadTexts: axLogSyslogPort.setStatus('current')
if mibBuilder.loadTexts: axLogSyslogPort.setDescription('The logging syslog host port.')
axLogMonitorPri = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 2, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, -1))).clone(namedValues=NamedValues(("emergency", 0), ("alert", 1), ("critical", 2), ("error", 3), ("warning", 4), ("notice", 5), ("info", 6), ("debug", 7), ("notDefined", -1))).clone(-1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: axLogMonitorPri.setStatus('current')
if mibBuilder.loadTexts: axLogMonitorPri.setDescription('The logging monitor priority, logging messages which levels above\n                                that value must be output to snmp trap host.')
axArpInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 100, 1))
axArpEntryTotal = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 100, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axArpEntryTotal.setStatus('current')
if mibBuilder.loadTexts: axArpEntryTotal.setDescription('The total number of ARP entries in the table.')
axArpInfoTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 100, 1, 2), )
if mibBuilder.loadTexts: axArpInfoTable.setStatus('current')
if mibBuilder.loadTexts: axArpInfoTable.setDescription('A table contains opertional ARP information.')
axArpInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 100, 1, 2, 1), ).setIndexNames((0, "A10-AX-MIB", "axArpIpAddr"))
if mibBuilder.loadTexts: axArpInfoEntry.setStatus('current')
if mibBuilder.loadTexts: axArpInfoEntry.setDescription('Columns in the axArpInfoTable')
axArpIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 100, 1, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axArpIpAddr.setStatus('current')
if mibBuilder.loadTexts: axArpIpAddr.setDescription('The destination IP address of the ARP entry.')
axArpMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 100, 1, 2, 1, 2), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axArpMacAddr.setStatus('current')
if mibBuilder.loadTexts: axArpMacAddr.setDescription('The MAC address for the ARP entry.')
axArpEntryVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 100, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axArpEntryVlan.setStatus('current')
if mibBuilder.loadTexts: axArpEntryVlan.setDescription('The VLAN identifier for the ARP entry.')
axArpEntrySourceInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 100, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axArpEntrySourceInterface.setStatus('current')
if mibBuilder.loadTexts: axArpEntrySourceInterface.setDescription('The port number in ifIndex for the ARP entry taking effective.')
axArpEntrySourceIntName = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 100, 1, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axArpEntrySourceIntName.setStatus('current')
if mibBuilder.loadTexts: axArpEntrySourceIntName.setDescription('The interface description name for axArpEntrySourceInterface.')
axArpEntryType = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 100, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("incomplete", 0), ("static", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axArpEntryType.setStatus('current')
if mibBuilder.loadTexts: axArpEntryType.setDescription('The type of the ARP entry.')
axArpEntryAging = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 100, 1, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axArpEntryAging.setStatus('current')
if mibBuilder.loadTexts: axArpEntryAging.setDescription('The aging time of the ARP entry in seconds.')
axAppGlobals = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 1))
axServers = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2))
axServiceGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3))
axVirtualServers = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4))
axConnReuseStats = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 5))
axFastHttpProxyStats = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6))
axHttpProxyStats = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7))
axTcpProxyStats = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8))
axSslStats = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 9))
axFtpStats = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 10))
axNetStats = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11))
axNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12))
axSmtpProxyStats = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13))
axSslProxyStats = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 14))
axPersistentStats = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 15))
axSwitchStats = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16))
axHA = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 17))
axIpNatStats = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18))
axSessionStats = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 19))
axGslb = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20))
axNetworkingStats = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 21))
axAppGlobalSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 1, 1))
axAppGlobalStats = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 1, 2))
axGlobalAppBuffer = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 1, 3))
axL3vStats = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 1, 4))
axServer = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 1))
axServerStat = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 2))
axServerPort = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 3))
axServerPortStat = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 4))
axServiceGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 1))
axServiceGroupStat = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 2))
axServiceGroupMember = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 3))
axServiceGroupMemberStat = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 4))
axVirtualServer = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 1))
axVirtualServerStat = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 2))
axVirtualServerPort = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 3))
axVirtualServerPortStat = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 4))
axVirtualServerNameStat = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 5))
axVirtualServerNamePortStat = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 6))
axHAGlobalConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 17, 1))
axHAGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 17, 2))
axHAFloatingIP = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 17, 3))
axAppGlobalSystemResourceUsageTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 1, 1, 1), )
if mibBuilder.loadTexts: axAppGlobalSystemResourceUsageTable.setStatus('current')
if mibBuilder.loadTexts: axAppGlobalSystemResourceUsageTable.setDescription("A table has information of the system resource usages,\n                 it should contains the results as the CLI command,\n                 'show system resouce-usage'\n                 Resource                         Current    Default    Minimum    Maximum\n                 --------------------------------------------------------------------------\n                 l4-session-count                 1048576    1048576    131072     8388608\n                 nat-pool-addr-count              500        500        500        4000\n                 real-server-count                1024       1024       512        2048\n                 real-port-count                  2048       2048       512        4096\n                 service-group-count              512        512        512        1024\n                 virtual-port-count               512        512        256        1024\n                 virtual-server-count             512        512        512        1024\n                 http-template-count              256        256        32         1024\n                 proxy-template-count             256        256        32         1024\n                 conn-reuse-template-count        256        256        32         1024\n                 fast-tcp-template-count          256        256        32         1024\n                 fast-udp-template-count          256        256        32         1024\n                 client-ssl-template-count        256        256        32         1024\n                 server-ssl-template-count        256        256        32         1024\n                 stream-template-count            256        256        32         1024\n                 persist-cookie-template-count    256        256        32         1024\n                 persist-srcip-template-count     256        256        32         1024\n                 nalloc-mem-val                   0          0          0          5120\n                ")
axAppGlobalSystemResourceUsageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 1, 1, 1, 1), ).setIndexNames((0, "A10-AX-MIB", "axAppGlobalSystemResourceIndex"))
if mibBuilder.loadTexts: axAppGlobalSystemResourceUsageEntry.setStatus('current')
if mibBuilder.loadTexts: axAppGlobalSystemResourceUsageEntry.setDescription('Columns in the axAppGlobalSystemResourceUsage Table')
axAppGlobalSystemResourceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 1, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axAppGlobalSystemResourceIndex.setStatus('current')
if mibBuilder.loadTexts: axAppGlobalSystemResourceIndex.setDescription('The system resource usage table index.')
axAppGlobalSystemResourceName = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 1, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axAppGlobalSystemResourceName.setStatus('current')
if mibBuilder.loadTexts: axAppGlobalSystemResourceName.setDescription('The system resource name.')
axAppGlobalAllowedCurrentValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 1, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axAppGlobalAllowedCurrentValue.setStatus('current')
if mibBuilder.loadTexts: axAppGlobalAllowedCurrentValue.setDescription('The current value for the allowed system resource.')
axAppGlobalAllowedDefaultValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 1, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axAppGlobalAllowedDefaultValue.setStatus('current')
if mibBuilder.loadTexts: axAppGlobalAllowedDefaultValue.setDescription('The default value for the allowed system resource.')
axAppGlobalAllowedMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 1, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axAppGlobalAllowedMinValue.setStatus('current')
if mibBuilder.loadTexts: axAppGlobalAllowedMinValue.setDescription('The minimum value for the allowed system resource.')
axAppGlobalAllowedMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 1, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axAppGlobalAllowedMaxValue.setStatus('current')
if mibBuilder.loadTexts: axAppGlobalAllowedMaxValue.setDescription('The maximum value for the allowed system resource.')
axAppGlobalTotalCurrentConnections = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 1, 2, 1), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axAppGlobalTotalCurrentConnections.setStatus('current')
if mibBuilder.loadTexts: axAppGlobalTotalCurrentConnections.setDescription('Total current connections')
axAppGlobalTotalNewConnections = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 1, 2, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axAppGlobalTotalNewConnections.setStatus('current')
if mibBuilder.loadTexts: axAppGlobalTotalNewConnections.setDescription('Total new connections')
axAppGlobalTotalNewL4Connections = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 1, 2, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axAppGlobalTotalNewL4Connections.setStatus('current')
if mibBuilder.loadTexts: axAppGlobalTotalNewL4Connections.setDescription('Total new L4 connections')
axAppGlobalTotalNewL7Connections = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 1, 2, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axAppGlobalTotalNewL7Connections.setStatus('current')
if mibBuilder.loadTexts: axAppGlobalTotalNewL7Connections.setDescription('Total new L7 connections')
axAppGlobalTotalNewIPNatConnections = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 1, 2, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axAppGlobalTotalNewIPNatConnections.setStatus('current')
if mibBuilder.loadTexts: axAppGlobalTotalNewIPNatConnections.setDescription('Total new IP-NAT connections')
axAppGlobalTotalSSLConnections = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 1, 2, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axAppGlobalTotalSSLConnections.setStatus('current')
if mibBuilder.loadTexts: axAppGlobalTotalSSLConnections.setDescription('Total SSL connections')
axAppGlobalTotalL7Requests = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 1, 2, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axAppGlobalTotalL7Requests.setStatus('current')
if mibBuilder.loadTexts: axAppGlobalTotalL7Requests.setDescription('Total L7 requests')
axGlobalAppPacketDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 1, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGlobalAppPacketDrop.setStatus('current')
if mibBuilder.loadTexts: axGlobalAppPacketDrop.setDescription('Total number of buffer drops in the last 10 seconds.')
axGlobalTotalAppPacketDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 1, 2, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGlobalTotalAppPacketDrop.setStatus('current')
if mibBuilder.loadTexts: axGlobalTotalAppPacketDrop.setDescription('Total number of accumulative buffer drops.')
axGlobalTotalL4Session = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 1, 2, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGlobalTotalL4Session.setStatus('current')
if mibBuilder.loadTexts: axGlobalTotalL4Session.setDescription('Total number of L4 sessions.')
axGlobalTotalThroughput = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 1, 2, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGlobalTotalThroughput.setStatus('current')
if mibBuilder.loadTexts: axGlobalTotalThroughput.setDescription('Total throughput of all the interfaces.')
axAppGlobalTotalCurrentConnectionsInteger = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 1, 2, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axAppGlobalTotalCurrentConnectionsInteger.setStatus('current')
if mibBuilder.loadTexts: axAppGlobalTotalCurrentConnectionsInteger.setDescription('Total current connections')
axGlobalTotalL4SessionInteger = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 1, 2, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGlobalTotalL4SessionInteger.setStatus('current')
if mibBuilder.loadTexts: axGlobalTotalL4SessionInteger.setDescription('Total number of L4 sessions.')
axAppGlobalBufferConfigLimit = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axAppGlobalBufferConfigLimit.setStatus('current')
if mibBuilder.loadTexts: axAppGlobalBufferConfigLimit.setDescription('Application buffer configured limit.')
axAppGlobalBufferCurrentUsage = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 1, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axAppGlobalBufferCurrentUsage.setStatus('current')
if mibBuilder.loadTexts: axAppGlobalBufferCurrentUsage.setDescription('Application buffer current usage.')
axL3vGlobalStatsTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 1, 4, 1), )
if mibBuilder.loadTexts: axL3vGlobalStatsTable.setStatus('current')
if mibBuilder.loadTexts: axL3vGlobalStatsTable.setDescription('The global statitics in a l3v partition.')
axL3vGlobalStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 1, 4, 1, 1), ).setIndexNames((0, "A10-AX-MIB", "axL3vGlobalStatsPartitionName"))
if mibBuilder.loadTexts: axL3vGlobalStatsEntry.setStatus('current')
if mibBuilder.loadTexts: axL3vGlobalStatsEntry.setDescription('Columns in the axL3vGlobalStatsTable')
axL3vGlobalStatsPartitionName = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 1, 4, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axL3vGlobalStatsPartitionName.setStatus('current')
if mibBuilder.loadTexts: axL3vGlobalStatsPartitionName.setDescription('The L3V partition name.')
axL3vGlobalStatsTotalThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 1, 4, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axL3vGlobalStatsTotalThroughput.setStatus('current')
if mibBuilder.loadTexts: axL3vGlobalStatsTotalThroughput.setDescription('Total throughput of all the interfaces in a L3V partition.')
axL3vGlobalStatsTotalCurrentConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 1, 4, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axL3vGlobalStatsTotalCurrentConnections.setStatus('current')
if mibBuilder.loadTexts: axL3vGlobalStatsTotalCurrentConnections.setDescription('Total current connections in a L3V partition.')
axL3vGlobalStatsTotalNewConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 1, 4, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axL3vGlobalStatsTotalNewConnections.setStatus('current')
if mibBuilder.loadTexts: axL3vGlobalStatsTotalNewConnections.setDescription('Total new connections in a L3V partition.')
axL3vGlobalStatsTotalNewL4Connections = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 1, 4, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axL3vGlobalStatsTotalNewL4Connections.setStatus('current')
if mibBuilder.loadTexts: axL3vGlobalStatsTotalNewL4Connections.setDescription('Total new layer 4 connections in a L3V partition.')
axL3vGlobalStatsTotalNewL7Connections = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 1, 4, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axL3vGlobalStatsTotalNewL7Connections.setStatus('current')
if mibBuilder.loadTexts: axL3vGlobalStatsTotalNewL7Connections.setDescription('Total new layer 7 connections in a L3V partition.')
axL3vGlobalStatsTotalSslConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 1, 4, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axL3vGlobalStatsTotalSslConnections.setStatus('current')
if mibBuilder.loadTexts: axL3vGlobalStatsTotalSslConnections.setDescription('Total SSL connections in a L3V partition.')
axL3vGlobalStatsTotalL7Requests = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 1, 4, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axL3vGlobalStatsTotalL7Requests.setStatus('current')
if mibBuilder.loadTexts: axL3vGlobalStatsTotalL7Requests.setDescription('Total layer 7 requests in a L3V partition.')
axL3vGlobalStatsTotalL4Sessions = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 1, 4, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axL3vGlobalStatsTotalL4Sessions.setStatus('current')
if mibBuilder.loadTexts: axL3vGlobalStatsTotalL4Sessions.setDescription('Total layer 7 session in a L3V partition.')
axServerCount = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerCount.setStatus('current')
if mibBuilder.loadTexts: axServerCount.setDescription('The total count of axServer entries in the table.')
axServerTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 1, 2), )
if mibBuilder.loadTexts: axServerTable.setStatus('current')
if mibBuilder.loadTexts: axServerTable.setDescription('A table has information of the servers.')
axServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 1, 2, 1), ).setIndexNames((0, "A10-AX-MIB", "axServerName"))
if mibBuilder.loadTexts: axServerEntry.setStatus('current')
if mibBuilder.loadTexts: axServerEntry.setDescription('Columns in the axServer Table')
axServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 1, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerName.setStatus('current')
if mibBuilder.loadTexts: axServerName.setDescription('The name of the server.')
axServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerAddress.setStatus('current')
if mibBuilder.loadTexts: axServerAddress.setDescription('The IP address or host name of the server.')
axServerEnabledState = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerEnabledState.setStatus('current')
if mibBuilder.loadTexts: axServerEnabledState.setDescription('The monitor state for this node address.')
axServerHealthMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 1, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerHealthMonitor.setStatus('current')
if mibBuilder.loadTexts: axServerHealthMonitor.setDescription('The health monitor name assigned to the server')
axServerMonitorState = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerMonitorState.setStatus('current')
if mibBuilder.loadTexts: axServerMonitorState.setDescription('The server monitor status is in\n                        0: Disabled (administrative disabled)\n                        1: Up (administrative enabled)\n                        2: Down (administrative enabled)')
axServerAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 1, 2, 1, 6), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerAddressType.setStatus('current')
if mibBuilder.loadTexts: axServerAddressType.setDescription('The type of axServerAddress:\n            unknown(0), ipv4(1), ipv6(2)...')
axServerStatCount = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerStatCount.setStatus('current')
if mibBuilder.loadTexts: axServerStatCount.setDescription('The total count of axServerStat entries in the table.')
axServerStatTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 2, 2), )
if mibBuilder.loadTexts: axServerStatTable.setStatus('current')
if mibBuilder.loadTexts: axServerStatTable.setDescription('A table containing statistic information of node addresses.')
axServerStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 2, 2, 1), ).setIndexNames((0, "A10-AX-MIB", "axServerStatAddress"))
if mibBuilder.loadTexts: axServerStatEntry.setStatus('current')
if mibBuilder.loadTexts: axServerStatEntry.setDescription('Columns in the axServerStat Table')
axServerStatAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 2, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerStatAddress.setStatus('current')
if mibBuilder.loadTexts: axServerStatAddress.setDescription('The ip address of this server.')
axServerStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 2, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerStatName.setStatus('current')
if mibBuilder.loadTexts: axServerStatName.setDescription('The server name.')
axServerStatServerPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 2, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerStatServerPktsIn.setStatus('current')
if mibBuilder.loadTexts: axServerStatServerPktsIn.setDescription('The number of packets received from client to server.')
axServerStatServerBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 2, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerStatServerBytesIn.setStatus('current')
if mibBuilder.loadTexts: axServerStatServerBytesIn.setDescription('The number of bytes received from client to server.')
axServerStatServerPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 2, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerStatServerPktsOut.setStatus('current')
if mibBuilder.loadTexts: axServerStatServerPktsOut.setDescription('The number of packets sent for server to client.')
axServerStatServerBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 2, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerStatServerBytesOut.setStatus('current')
if mibBuilder.loadTexts: axServerStatServerBytesOut.setDescription('The number of bytes sent from server to client.')
axServerStatServerTotalConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 2, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerStatServerTotalConns.setStatus('current')
if mibBuilder.loadTexts: axServerStatServerTotalConns.setDescription('The total connections from server side.')
axServerStatServerCurConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 2, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerStatServerCurConns.setStatus('current')
if mibBuilder.loadTexts: axServerStatServerCurConns.setDescription('The current connections from server side.')
axServerStatServerPersistConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 2, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerStatServerPersistConns.setStatus('deprecated')
if mibBuilder.loadTexts: axServerStatServerPersistConns.setDescription('The persistent connections from server side.')
axServerStatServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerStatServerStatus.setStatus('current')
if mibBuilder.loadTexts: axServerStatServerStatus.setDescription('The server status is in\n                        0: Disabled (administrative disabled)\n                        1: Up (administrative enabled)\n                        2: Down (administrative enabled)')
axServerStatServerTotalL7Reqs = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 2, 2, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerStatServerTotalL7Reqs.setStatus('current')
if mibBuilder.loadTexts: axServerStatServerTotalL7Reqs.setDescription('The total number of L7 requests if applicable')
axServerStatServerTotalCurrL7Reqs = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 2, 2, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerStatServerTotalCurrL7Reqs.setStatus('current')
if mibBuilder.loadTexts: axServerStatServerTotalCurrL7Reqs.setDescription('The number of current L7 requests if applicable')
axServerStatServerTotalSuccL7Reqs = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 2, 2, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerStatServerTotalSuccL7Reqs.setStatus('current')
if mibBuilder.loadTexts: axServerStatServerTotalSuccL7Reqs.setDescription('The number of successful L7 requests if applicable')
axServerStatServerPeakConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 2, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerStatServerPeakConns.setStatus('current')
if mibBuilder.loadTexts: axServerStatServerPeakConns.setDescription('The number of the peak connections')
axServerStatAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 2, 2, 1, 15), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerStatAddressType.setStatus('current')
if mibBuilder.loadTexts: axServerStatAddressType.setDescription('The type of axServerStatAddress:\n            unknown(0), ipv4(1), ipv6(2)...')
axServerPortTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 3, 1), )
if mibBuilder.loadTexts: axServerPortTable.setStatus('current')
if mibBuilder.loadTexts: axServerPortTable.setDescription('A table has information of real servers.')
axServerPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 3, 1, 1), ).setIndexNames((0, "A10-AX-MIB", "axServerNameInPort"), (0, "A10-AX-MIB", "axServerPortType"), (0, "A10-AX-MIB", "axServerPortNum"))
if mibBuilder.loadTexts: axServerPortEntry.setStatus('current')
if mibBuilder.loadTexts: axServerPortEntry.setDescription('Columns in the axServer Port Table')
axServerNameInPort = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 3, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerNameInPort.setStatus('current')
if mibBuilder.loadTexts: axServerNameInPort.setDescription('The server name.')
axServerPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("tcp", 2), ("udp", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerPortType.setStatus('current')
if mibBuilder.loadTexts: axServerPortType.setDescription('The port type of the server port.')
axServerPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerPortNum.setStatus('current')
if mibBuilder.loadTexts: axServerPortNum.setDescription('The port number of the server.')
axServerAddressInPort = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 3, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerAddressInPort.setStatus('current')
if mibBuilder.loadTexts: axServerAddressInPort.setDescription('The IP address or host name of the server.')
axServerPortEnabledState = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerPortEnabledState.setStatus('current')
if mibBuilder.loadTexts: axServerPortEnabledState.setDescription('The monitor state for this node address.')
axServerPortHealthMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 3, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerPortHealthMonitor.setStatus('current')
if mibBuilder.loadTexts: axServerPortHealthMonitor.setDescription('The health monitor name assigned to the server')
axServerPortConnLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 3, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerPortConnLimit.setStatus('current')
if mibBuilder.loadTexts: axServerPortConnLimit.setDescription('The connection limit of the server port.')
axServerPortWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 3, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerPortWeight.setStatus('current')
if mibBuilder.loadTexts: axServerPortWeight.setDescription('The weight of the server port.')
axServerPortMonitorState = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerPortMonitorState.setStatus('current')
if mibBuilder.loadTexts: axServerPortMonitorState.setDescription('The server port status is in\n                        0: Disabled (administrative disabled)\n                        1: Up (administrative enabled)\n                        2: Down (administrative enabled)')
axServerAddressInPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 3, 1, 1, 10), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerAddressInPortType.setStatus('current')
if mibBuilder.loadTexts: axServerAddressInPortType.setDescription('The type of axServerAddressInPort:\n            unknown(0), ipv4(1), ipv6(2)...')
axServerPortStatTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 4, 1), )
if mibBuilder.loadTexts: axServerPortStatTable.setStatus('current')
if mibBuilder.loadTexts: axServerPortStatTable.setDescription('A table containing statistic information of node addresses.')
axServerPortStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 4, 1, 1), ).setIndexNames((0, "A10-AX-MIB", "axServerStatAddrInPort"), (0, "A10-AX-MIB", "axServerStatPortType"), (0, "A10-AX-MIB", "axServerStatPortNum"))
if mibBuilder.loadTexts: axServerPortStatEntry.setStatus('current')
if mibBuilder.loadTexts: axServerPortStatEntry.setDescription('Columns in the axServerStat Table')
axServerStatAddrInPort = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 4, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerStatAddrInPort.setStatus('current')
if mibBuilder.loadTexts: axServerStatAddrInPort.setDescription('The ip address of this server.')
axServerStatPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("tcp", 2), ("udp", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerStatPortType.setStatus('current')
if mibBuilder.loadTexts: axServerStatPortType.setDescription('The server port type.')
axServerStatPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 4, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerStatPortNum.setStatus('current')
if mibBuilder.loadTexts: axServerStatPortNum.setDescription('The server port number.')
axServerStatNameInPort = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 4, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerStatNameInPort.setStatus('current')
if mibBuilder.loadTexts: axServerStatNameInPort.setDescription('The ip address of this server.')
axServerPortStatPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 4, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerPortStatPktsIn.setStatus('current')
if mibBuilder.loadTexts: axServerPortStatPktsIn.setDescription('The number of packets received from client to server.')
axServerPortStatBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 4, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerPortStatBytesIn.setStatus('current')
if mibBuilder.loadTexts: axServerPortStatBytesIn.setDescription('The number of bytes received from client to server.')
axServerPortStatPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 4, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerPortStatPktsOut.setStatus('current')
if mibBuilder.loadTexts: axServerPortStatPktsOut.setDescription('The number of packets sent from server to client.')
axServerPortStatBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 4, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerPortStatBytesOut.setStatus('current')
if mibBuilder.loadTexts: axServerPortStatBytesOut.setDescription('The number of bytes sent from server to client.')
axServerPortStatTotalConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 4, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerPortStatTotalConns.setStatus('current')
if mibBuilder.loadTexts: axServerPortStatTotalConns.setDescription('The maximum connections from server side.')
axServerPortStatCurConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 4, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerPortStatCurConns.setStatus('current')
if mibBuilder.loadTexts: axServerPortStatCurConns.setDescription('The current connections from server side.')
axServerPortStatPersistConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 4, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerPortStatPersistConns.setStatus('deprecated')
if mibBuilder.loadTexts: axServerPortStatPersistConns.setDescription('The persistent connections from server side.')
axServerPortStatStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 4, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerPortStatStatus.setStatus('current')
if mibBuilder.loadTexts: axServerPortStatStatus.setDescription('The server port status is in\n                        0: Disabled (administrative disabled)\n                        1: Up (administrative enabled)\n                        2: Down (administrative enabled)')
axServerPortStatTotalL7Reqs = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 4, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerPortStatTotalL7Reqs.setStatus('current')
if mibBuilder.loadTexts: axServerPortStatTotalL7Reqs.setDescription('The total number of L7 requests if applicable')
axServerPortStatTotalCurrL7Reqs = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 4, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerPortStatTotalCurrL7Reqs.setStatus('current')
if mibBuilder.loadTexts: axServerPortStatTotalCurrL7Reqs.setDescription('The number of current L7 requests if applicable')
axServerPortStatTotalSuccL7Reqs = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 4, 1, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerPortStatTotalSuccL7Reqs.setStatus('current')
if mibBuilder.loadTexts: axServerPortStatTotalSuccL7Reqs.setDescription('The number of successful L7 requests if applicable')
axServerPortStatPeakConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 4, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerPortStatPeakConns.setStatus('current')
if mibBuilder.loadTexts: axServerPortStatPeakConns.setDescription('The number of peak connections')
axServerStatAddrInPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 4, 1, 1, 17), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerStatAddrInPortType.setStatus('current')
if mibBuilder.loadTexts: axServerStatAddrInPortType.setDescription('The type of axServerStatAddrInPort:\n            unknown(0), ipv4(1), ipv6(2)...')
axServiceGroupCount = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupCount.setStatus('current')
if mibBuilder.loadTexts: axServiceGroupCount.setDescription('The number of axServiceGroup entries in the table.')
axServiceGroupTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 1, 2), )
if mibBuilder.loadTexts: axServiceGroupTable.setStatus('current')
if mibBuilder.loadTexts: axServiceGroupTable.setDescription('A table containing information of service groups.')
axServiceGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 1, 2, 1), ).setIndexNames((0, "A10-AX-MIB", "axServiceGroupName"))
if mibBuilder.loadTexts: axServiceGroupEntry.setStatus('current')
if mibBuilder.loadTexts: axServiceGroupEntry.setDescription('Columns in the axServiceGroup Table')
axServiceGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 1, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupName.setStatus('current')
if mibBuilder.loadTexts: axServiceGroupName.setDescription('The service group name.')
axServiceGroupType = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("firewall", 1), ("tcp", 2), ("udp", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupType.setStatus('current')
if mibBuilder.loadTexts: axServiceGroupType.setDescription('The type of the service group.')
axServiceGroupLbAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18))).clone(namedValues=NamedValues(("roundRobin", 0), ("weightRoundRobin", 1), ("leastConnection", 2), ("weightLeastConnection", 3), ("serviceLeastConnection", 4), ("serviceWeightLeastConnection", 5), ("fastResponseTime", 6), ("leastRequest", 7), ("roundRobinStrict", 8), ("sourceIpHashBasedStateless", 9), ("sourceIpOnlyHashBasedStateless", 10), ("destinationIpHashBasedStateless", 11), ("sourceDestinationIpHashBasedStateless", 12), ("perPacketRoundRobinStateless", 13), ("sourceIpOnlyHash", 15), ("sourceIpWithPortHash", 16), ("destinationIpOnlyHash", 17), ("destinationIpWithPortHash", 18)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupLbAlgorithm.setStatus('current')
if mibBuilder.loadTexts: axServiceGroupLbAlgorithm.setDescription('The load balance method for the service group')
axServiceGroupDisplayStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("allUp", 1), ("functionalUp", 2), ("partialUp", 3), ("stopped", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupDisplayStatus.setStatus('current')
if mibBuilder.loadTexts: axServiceGroupDisplayStatus.setDescription('The display status of the service group:\n                    AllUp(1), FunctionalUp(2), PartialUp(3), Stopped(4).')
axServiceGroupStatTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 2, 1), )
if mibBuilder.loadTexts: axServiceGroupStatTable.setStatus('current')
if mibBuilder.loadTexts: axServiceGroupStatTable.setDescription('A table containing statistic information of service groups.')
axServiceGroupStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 2, 1, 1), ).setIndexNames((0, "A10-AX-MIB", "axServiceGroupStatName"))
if mibBuilder.loadTexts: axServiceGroupStatEntry.setStatus('current')
if mibBuilder.loadTexts: axServiceGroupStatEntry.setDescription('Columns in the axServiceGroupStat Table')
axServiceGroupStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 2, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupStatName.setStatus('current')
if mibBuilder.loadTexts: axServiceGroupStatName.setDescription('The service group name.')
axServiceGroupStatPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 2, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupStatPktsIn.setStatus('current')
if mibBuilder.loadTexts: axServiceGroupStatPktsIn.setDescription('The number of packets received from client to server.')
axServiceGroupStatBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 2, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupStatBytesIn.setStatus('current')
if mibBuilder.loadTexts: axServiceGroupStatBytesIn.setDescription('The number of bytes received from client to server.')
axServiceGroupStatPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 2, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupStatPktsOut.setStatus('current')
if mibBuilder.loadTexts: axServiceGroupStatPktsOut.setDescription('The number of packets sent from server to client.')
axServiceGroupStatBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 2, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupStatBytesOut.setStatus('current')
if mibBuilder.loadTexts: axServiceGroupStatBytesOut.setDescription('The number of bytes sent from server to client.')
axServiceGroupStatTotConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 2, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupStatTotConns.setStatus('current')
if mibBuilder.loadTexts: axServiceGroupStatTotConns.setDescription('The total connections from server side.')
axServiceGroupStatCurConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupStatCurConns.setStatus('current')
if mibBuilder.loadTexts: axServiceGroupStatCurConns.setDescription('The current connections from server side.')
axServiceGroupStatPersistConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupStatPersistConns.setStatus('deprecated')
if mibBuilder.loadTexts: axServiceGroupStatPersistConns.setDescription('The persistent connections from server side.')
axServiceGroupStatDisplayStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("allUp", 1), ("functionalUp", 2), ("partialUp", 3), ("stopped", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupStatDisplayStatus.setStatus('current')
if mibBuilder.loadTexts: axServiceGroupStatDisplayStatus.setDescription('The display status of the service group:\n                    AllUp(1), FunctionalUp(2), PartialUp(3), Stopped(4).')
axServiceGroupStatTotalL7Reqs = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 2, 1, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupStatTotalL7Reqs.setStatus('current')
if mibBuilder.loadTexts: axServiceGroupStatTotalL7Reqs.setDescription('The total number of L7 requests if applicable')
axServiceGroupStatTotalCurrL7Reqs = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 2, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupStatTotalCurrL7Reqs.setStatus('current')
if mibBuilder.loadTexts: axServiceGroupStatTotalCurrL7Reqs.setDescription('The number of current L7 requests if applicable')
axServiceGroupStatTotalSuccL7Reqs = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 2, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupStatTotalSuccL7Reqs.setStatus('current')
if mibBuilder.loadTexts: axServiceGroupStatTotalSuccL7Reqs.setDescription('The number of successful L7 requests if applicable')
axServiceGroupStatPeakConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupStatPeakConns.setStatus('current')
if mibBuilder.loadTexts: axServiceGroupStatPeakConns.setDescription('The number of peak connections')
axServiceGroupMemberTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 3, 1), )
if mibBuilder.loadTexts: axServiceGroupMemberTable.setStatus('current')
if mibBuilder.loadTexts: axServiceGroupMemberTable.setDescription('A table containing information of service group members.')
axServiceGroupMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 3, 1, 1), ).setIndexNames((0, "A10-AX-MIB", "axServiceGroupNameInMember"), (0, "A10-AX-MIB", "axServiceGroupMemberAddrType"), (0, "A10-AX-MIB", "axServerNameInServiceGroupMember"), (0, "A10-AX-MIB", "axServerPortNumInServiceGroupMember"))
if mibBuilder.loadTexts: axServiceGroupMemberEntry.setStatus('current')
if mibBuilder.loadTexts: axServiceGroupMemberEntry.setDescription('Columns in the axServiceGroupMember Table')
axServiceGroupNameInMember = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 3, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupNameInMember.setStatus('current')
if mibBuilder.loadTexts: axServiceGroupNameInMember.setDescription('The name of axServiceGroup.')
axServiceGroupMemberAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("firewall", 1), ("tcp", 2), ("udp", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupMemberAddrType.setStatus('current')
if mibBuilder.loadTexts: axServiceGroupMemberAddrType.setDescription('The type of service group')
axServerNameInServiceGroupMember = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 3, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerNameInServiceGroupMember.setStatus('current')
if mibBuilder.loadTexts: axServerNameInServiceGroupMember.setDescription('The server name in the service group member.')
axServerPortNumInServiceGroupMember = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerPortNumInServiceGroupMember.setStatus('current')
if mibBuilder.loadTexts: axServerPortNumInServiceGroupMember.setDescription('The port number of this member.')
axServerPortPriorityInServiceGroupMember = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerPortPriorityInServiceGroupMember.setStatus('current')
if mibBuilder.loadTexts: axServerPortPriorityInServiceGroupMember.setDescription('The priority value of a service group member.')
axServerPortStatusInServiceGroupMember = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerPortStatusInServiceGroupMember.setStatus('current')
if mibBuilder.loadTexts: axServerPortStatusInServiceGroupMember.setDescription('The server port status of the service group member:\n                    Disabled(0), Up(1), Down(2).')
axServiceGroupMemberStatTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 4, 1), )
if mibBuilder.loadTexts: axServiceGroupMemberStatTable.setStatus('current')
if mibBuilder.loadTexts: axServiceGroupMemberStatTable.setDescription('A table containing statistic information of service group members.')
axServiceGroupMemberStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 4, 1, 1), ).setIndexNames((0, "A10-AX-MIB", "axServiceGroupMemberStatName"), (0, "A10-AX-MIB", "axServiceGroupMemberStatAddrType"), (0, "A10-AX-MIB", "axServerNameInServiceGroupMemberStat"), (0, "A10-AX-MIB", "axServerPortNumInServiceGroupMemberStat"))
if mibBuilder.loadTexts: axServiceGroupMemberStatEntry.setStatus('current')
if mibBuilder.loadTexts: axServiceGroupMemberStatEntry.setDescription('Columns in the axServiceGroupMemberStat Table')
axServiceGroupMemberStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 4, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupMemberStatName.setStatus('current')
if mibBuilder.loadTexts: axServiceGroupMemberStatName.setDescription('The service group name.')
axServiceGroupMemberStatAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("firewall", 1), ("tcp", 2), ("udp", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupMemberStatAddrType.setStatus('current')
if mibBuilder.loadTexts: axServiceGroupMemberStatAddrType.setDescription('The type of service group')
axServerNameInServiceGroupMemberStat = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 4, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerNameInServiceGroupMemberStat.setStatus('current')
if mibBuilder.loadTexts: axServerNameInServiceGroupMemberStat.setDescription('The ip address of this member in the service group.')
axServerPortNumInServiceGroupMemberStat = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 4, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerPortNumInServiceGroupMemberStat.setStatus('current')
if mibBuilder.loadTexts: axServerPortNumInServiceGroupMemberStat.setDescription('The port number of this member.')
axServiceGroupMemberStatPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 4, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupMemberStatPktsIn.setStatus('current')
if mibBuilder.loadTexts: axServiceGroupMemberStatPktsIn.setDescription('The number of packets received from client to server.')
axServiceGroupMemberStatBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 4, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupMemberStatBytesIn.setStatus('current')
if mibBuilder.loadTexts: axServiceGroupMemberStatBytesIn.setDescription('The number of bytes received from client to server.')
axServiceGroupMemberStatPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 4, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupMemberStatPktsOut.setStatus('current')
if mibBuilder.loadTexts: axServiceGroupMemberStatPktsOut.setDescription('The number of packets sent from server to client.')
axServiceGroupMemberStatBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 4, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupMemberStatBytesOut.setStatus('current')
if mibBuilder.loadTexts: axServiceGroupMemberStatBytesOut.setDescription('The number of bytes sent from server to client.')
axServiceGroupMemberStatPersistConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 4, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupMemberStatPersistConns.setStatus('deprecated')
if mibBuilder.loadTexts: axServiceGroupMemberStatPersistConns.setDescription('The persistent connections from server side.')
axServiceGroupMemberStatTotConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 4, 1, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupMemberStatTotConns.setStatus('current')
if mibBuilder.loadTexts: axServiceGroupMemberStatTotConns.setDescription('The total connections from server side.')
axServiceGroupMemberStatCurConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 4, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupMemberStatCurConns.setStatus('current')
if mibBuilder.loadTexts: axServiceGroupMemberStatCurConns.setDescription('The current connections from server side.')
axServerPortStatusInServiceGroupMemberStat = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 4, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerPortStatusInServiceGroupMemberStat.setStatus('current')
if mibBuilder.loadTexts: axServerPortStatusInServiceGroupMemberStat.setDescription('The server port status of the service group member:\n                    Disabled(0), Up(1), Down(2)')
axServiceGroupMemberStatTotalL7Reqs = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 4, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupMemberStatTotalL7Reqs.setStatus('current')
if mibBuilder.loadTexts: axServiceGroupMemberStatTotalL7Reqs.setDescription('The total number of L7 requests if applicable')
axServiceGroupMemberStatTotalCurrL7Reqs = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 4, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupMemberStatTotalCurrL7Reqs.setStatus('current')
if mibBuilder.loadTexts: axServiceGroupMemberStatTotalCurrL7Reqs.setDescription('The number of current L7 requests if applicable')
axServiceGroupMemberStatTotalSuccL7Reqs = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 4, 1, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupMemberStatTotalSuccL7Reqs.setStatus('current')
if mibBuilder.loadTexts: axServiceGroupMemberStatTotalSuccL7Reqs.setDescription('The number of successful L7 requests if applicable')
axServiceGroupMemberStatResponseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 4, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupMemberStatResponseTime.setStatus('current')
if mibBuilder.loadTexts: axServiceGroupMemberStatResponseTime.setDescription('The service group member response time in millisecond.')
axServiceGroupMemberStatPeakConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 4, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupMemberStatPeakConns.setStatus('current')
if mibBuilder.loadTexts: axServiceGroupMemberStatPeakConns.setDescription('The service group member peak connections.')
axVirtualServerCount = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerCount.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerCount.setDescription('The number of axVirtualServer entries in the table.')
axVirtualServerTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 1, 2), )
if mibBuilder.loadTexts: axVirtualServerTable.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerTable.setDescription('A table containing information of virtual servers.')
axVirtualServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 1, 2, 1), ).setIndexNames((0, "A10-AX-MIB", "axVirtualServerName"))
if mibBuilder.loadTexts: axVirtualServerEntry.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerEntry.setDescription('Columns in the axVirtualServer Table')
axVirtualServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 1, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerName.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerName.setDescription('The name of this virtual server.')
axVirtualServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerAddress.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerAddress.setDescription('The ip address of this virtual server.')
axVirtualServerEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerEnabled.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerEnabled.setDescription('Whether this virtual server is enabled.')
axVirtualServerHAGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 1, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerHAGroup.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerHAGroup.setDescription('HA group name configured for the virtual server.')
axVirtualServerDisplayStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 0), ("allUp", 1), ("functionalUp", 2), ("partialUp", 3), ("stopped", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerDisplayStatus.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerDisplayStatus.setDescription('The display status of this virtual server port:\n                    Disabled(0), AllUp(1), FunctionalUp(2), PartialUp(3), Stopped(4).')
axVirtualServerAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 1, 2, 1, 6), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerAddressType.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerAddressType.setDescription('The type of axVirtualServerAddress:\n            unknown(0), ipv4(1), ipv6(2)...')
axVirtualServerStatTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 2, 1), )
if mibBuilder.loadTexts: axVirtualServerStatTable.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerStatTable.setDescription('A table containing statistic information of virtual servers.')
axVirtualServerStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 2, 1, 1), ).setIndexNames((0, "A10-AX-MIB", "axVirtualServerStatAddress"))
if mibBuilder.loadTexts: axVirtualServerStatEntry.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerStatEntry.setDescription('Columns in the axVirtualServerStat Table')
axVirtualServerStatAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 2, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerStatAddress.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerStatAddress.setDescription('The address of this virtual server.')
axVirtualServerStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerStatName.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerStatName.setDescription('The name of this virtual server.')
axVirtualServerStatPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 2, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerStatPktsIn.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerStatPktsIn.setDescription('The number of packets received from client to server.')
axVirtualServerStatBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 2, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerStatBytesIn.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerStatBytesIn.setDescription('The number of bytes received from client to server.')
axVirtualServerStatPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 2, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerStatPktsOut.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerStatPktsOut.setDescription('The number of packets sent from server to client.')
axVirtualServerStatBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 2, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerStatBytesOut.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerStatBytesOut.setDescription('The number of bytes sent from server to client.')
axVirtualServerStatPersistConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerStatPersistConns.setStatus('deprecated')
if mibBuilder.loadTexts: axVirtualServerStatPersistConns.setDescription('The persistent connections from client side.')
axVirtualServerStatTotConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 2, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerStatTotConns.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerStatTotConns.setDescription('The total connections from client side.')
axVirtualServerStatCurConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 2, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerStatCurConns.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerStatCurConns.setDescription('The current connections from client side.')
axVirtualServerStatStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerStatStatus.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerStatStatus.setDescription('The current virtual server status.')
axVirtualServerStatDisplayStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 0), ("allUp", 1), ("functionalUp", 2), ("partialUp", 3), ("stopped", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerStatDisplayStatus.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerStatDisplayStatus.setDescription('The display status of this virtual server:\n                    Disabled(0), AllUp(1), FunctionalUp(2), PartialUp(3), Stopped(4).')
axVirtualServerStatTotalL7Reqs = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 2, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerStatTotalL7Reqs.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerStatTotalL7Reqs.setDescription('The total number of L7 requests if applicable')
axVirtualServerStatTotalCurrL7Reqs = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 2, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerStatTotalCurrL7Reqs.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerStatTotalCurrL7Reqs.setDescription('The number of current L7 requests if applicable')
axVirtualServerStatTotalSuccL7Reqs = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 2, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerStatTotalSuccL7Reqs.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerStatTotalSuccL7Reqs.setDescription('The number of successful L7 requests if applicable')
axVirtualServerStatPeakConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 2, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerStatPeakConns.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerStatPeakConns.setDescription('The number of peak connections')
axVirtualServerStatAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 2, 1, 1, 16), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerStatAddressType.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerStatAddressType.setDescription('The type of axVirtualServerStatAddress:\n            unknown(0), ipv4(1), ipv6(2)...')
axVirtualServerPortTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 3, 1), )
if mibBuilder.loadTexts: axVirtualServerPortTable.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerPortTable.setDescription('A table containing information of virtual server port configuration.')
axVirtualServerPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 3, 1, 1), ).setIndexNames((0, "A10-AX-MIB", "axVirtualServerPortName"), (0, "A10-AX-MIB", "axVirtualServerPortType"), (0, "A10-AX-MIB", "axVirtualServerPortNum"))
if mibBuilder.loadTexts: axVirtualServerPortEntry.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerPortEntry.setDescription('Columns in the axVirtualServerPort Table')
axVirtualServerPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 3, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortName.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerPortName.setDescription('The name of the virtual server. ')
axVirtualServerPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 8, 9, 10, 12, 14, 15, 16, 17, 11, 19, 18, 5, 20, 21, 22, 23, 24))).clone(namedValues=NamedValues(("firewall", 1), ("tcp", 2), ("udp", 3), ("rtsp", 8), ("ftp", 9), ("mms", 10), ("fastHTTP", 12), ("http", 14), ("https", 15), ("sslProxy", 16), ("smtp", 17), ("sip", 11), ("sips", 19), ("sip-TCP", 18), ("others", 5), ("tcpProxy", 20), ("diameter", 21), ("dnsUdp", 22), ("tftp", 23), ("dnsTcp", 24)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortType.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerPortType.setDescription('The port type of a virtual server port.')
axVirtualServerPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortNum.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerPortNum.setDescription('The virtual server port number.')
axVirtualServerPortAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 3, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortAddress.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerPortAddress.setDescription('The ip address of this virtual server. ')
axVirtualServerPortEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortEnabled.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerPortEnabled.setDescription('The status of this virtual server port is enabled.')
axVirtualServerPortServiceGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 3, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortServiceGroup.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerPortServiceGroup.setDescription('The service group is assigned to the virtual server port.')
axVirtualServerPortHaGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 3, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortHaGroupID.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerPortHaGroupID.setDescription('The HA group ID assigned to the virtual service port.')
axVirtualServerPortPersistTemplateType = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 0))).clone(namedValues=NamedValues(("cookiePersist", 1), ("sourcIPPersist", 2), ("destinationIPPersist", 3), ("sslIDPersist", 4), ("unknown", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortPersistTemplateType.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerPortPersistTemplateType.setDescription('The persistent template type if applicable.')
axVirtualServerPortPersistTempl = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 3, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortPersistTempl.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerPortPersistTempl.setDescription('The persistent template dependent on the axVirtualServerPortPersistTemplateType value.')
axVirtualServerPortTemplate = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 3, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortTemplate.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerPortTemplate.setDescription('The virtual server port template for all port types except for Firewall.')
axVirtualServerPortPolicyTemplate = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 3, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortPolicyTemplate.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerPortPolicyTemplate.setDescription('The policy template for all port types except for Firewall.')
axVirtualServerPortTCPTemplate = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 3, 1, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortTCPTemplate.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerPortTCPTemplate.setDescription('The TCP template for TPC/FastHTTP/RTSP/FTP/MMS/Others port types.')
axVirtualServerPortHTTPTemplate = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 3, 1, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortHTTPTemplate.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerPortHTTPTemplate.setDescription('The HTTP template for HTTP/HTTPS/FastHTTP port types.')
axVirtualServerPortRamCacheTemplate = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 3, 1, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortRamCacheTemplate.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerPortRamCacheTemplate.setDescription('The RAM cache template for HTTP/HTTPS port types.')
axVirtualServerPortConnReuseTemplate = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 3, 1, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortConnReuseTemplate.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerPortConnReuseTemplate.setDescription('The connection reuse template for HTTP/HTTPS/FastHTTP port types.')
axVirtualServerPortTCPProxyTemplate = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 3, 1, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortTCPProxyTemplate.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerPortTCPProxyTemplate.setDescription('The TCP proxy template for HTTP/HTTPS/SSLProxy/SMTP port types.')
axVirtualServerPortClientSSLTemplate = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 3, 1, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortClientSSLTemplate.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerPortClientSSLTemplate.setDescription('The Client-SSL template for HTTPS/SSLProxy/SMTP port types.')
axVirtualServerPortServerSSLTemplate = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 3, 1, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortServerSSLTemplate.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerPortServerSSLTemplate.setDescription('The Server-SSL template for HTTPS port type only.')
axVirtualServerPortRTSPTemplate = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 3, 1, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortRTSPTemplate.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerPortRTSPTemplate.setDescription('The RTSP template for RTSP port type only.')
axVirtualServerPortSMTPTemplate = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 3, 1, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortSMTPTemplate.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerPortSMTPTemplate.setDescription('The SMTP template for SMTP port type only.')
axVirtualServerPortSIPTemplate = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 3, 1, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortSIPTemplate.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerPortSIPTemplate.setDescription('The SIP template for SIP port type only.')
axVirtualServerPortUDPTemplate = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 3, 1, 1, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortUDPTemplate.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerPortUDPTemplate.setDescription('The UDP template for UDP port type only.')
axVirtualServerPortDisplayStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 3, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4))).clone(namedValues=NamedValues(("disabled", 0), ("allUp", 1), ("functionalUp", 2), ("stopped", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortDisplayStatus.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerPortDisplayStatus.setDescription('The display status of this virtual server port:\n                    Disabled(0), AllUp(1), FunctionalUp(2), Stopped(4).')
axVirtualServerPortAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 3, 1, 1, 24), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortAddressType.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerPortAddressType.setDescription('The type of axVirtualServerPortAddress:\n            unknown(0), ipv4(1), ipv6(2)...')
axVirtualServerPortDiameterTemplate = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 3, 1, 1, 25), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortDiameterTemplate.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerPortDiameterTemplate.setDescription('The Diameter template for diameter type only.')
axVirtualServerPortStatTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 4, 1), )
if mibBuilder.loadTexts: axVirtualServerPortStatTable.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerPortStatTable.setDescription('A table containing statistic information of virtual server service ports.')
axVirtualServerPortStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 4, 1, 1), ).setIndexNames((0, "A10-AX-MIB", "axVirtualServerPortStatAddress"), (0, "A10-AX-MIB", "axVirtualServerStatPortType"), (0, "A10-AX-MIB", "axVirtualServerStatPortNum"))
if mibBuilder.loadTexts: axVirtualServerPortStatEntry.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerPortStatEntry.setDescription('Columns in the axVirtualServerPortStat Table')
axVirtualServerPortStatAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 4, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortStatAddress.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerPortStatAddress.setDescription('The ip address of this virtual address.')
axVirtualServerStatPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 8, 9, 10, 12, 14, 15, 16, 17, 11, 19, 18, 5, 20, 21, 22, 23, 24))).clone(namedValues=NamedValues(("firewall", 1), ("tcp", 2), ("udp", 3), ("rtsp", 8), ("ftp", 9), ("mms", 10), ("fastHTTP", 12), ("http", 14), ("https", 15), ("sslProxy", 16), ("smtp", 17), ("sip", 11), ("sips", 19), ("sip-tcp", 18), ("others", 5), ("tcpProxy", 20), ("diameter", 21), ("dnsUdp", 22), ("tftp", 23), ("dnsTcp", 24)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerStatPortType.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerStatPortType.setDescription('The port type of a virtual server port')
axVirtualServerStatPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 4, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerStatPortNum.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerStatPortNum.setDescription('The service port number.')
axVirtualServerPortStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 4, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortStatName.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerPortStatName.setDescription('The name of the virtual server')
axVirtualServerStatPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerStatPortStatus.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerStatPortStatus.setDescription('The status of this virtual server port.')
axVirtualServerPortStatPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 4, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortStatPktsIn.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerPortStatPktsIn.setDescription('The number of packets received from client to server.')
axVirtualServerPortStatBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 4, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortStatBytesIn.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerPortStatBytesIn.setDescription('The number of bytes received from client to server.')
axVirtualServerPortStatPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 4, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortStatPktsOut.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerPortStatPktsOut.setDescription('The number of packets sent from server to client.')
axVirtualServerPortStatBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 4, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortStatBytesOut.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerPortStatBytesOut.setDescription('The number of bytes sent from server to client.')
axVirtualServerPortStatPersistConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 4, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortStatPersistConns.setStatus('deprecated')
if mibBuilder.loadTexts: axVirtualServerPortStatPersistConns.setDescription('Persistent connections from client side.')
axVirtualServerPortStatTotConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 4, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortStatTotConns.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerPortStatTotConns.setDescription('Total connections from client side.')
axVirtualServerPortStatCurConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 4, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortStatCurConns.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerPortStatCurConns.setDescription('Current connections from client side.')
axVirtualServerStatPortDisplayStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 4, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4))).clone(namedValues=NamedValues(("disabled", 0), ("allUp", 1), ("functionalUp", 2), ("stopped", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerStatPortDisplayStatus.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerStatPortDisplayStatus.setDescription('The display status of this virtual server port:\n                    Disabled(0), AllUp(1), FunctionalUp(2), Stopped(4).')
axVirtualServerPortStatTotalL7Reqs = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 4, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortStatTotalL7Reqs.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerPortStatTotalL7Reqs.setDescription('The total number of L7 requests if applicable')
axVirtualServerPortStatTotalCurrL7Reqs = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 4, 1, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortStatTotalCurrL7Reqs.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerPortStatTotalCurrL7Reqs.setDescription('The number of current L7 requests if applicable')
axVirtualServerPortStatTotalSuccL7Reqs = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 4, 1, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortStatTotalSuccL7Reqs.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerPortStatTotalSuccL7Reqs.setDescription('The number of successful L7 requests if applicable')
axVirtualServerPortStatPeakConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 4, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortStatPeakConns.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerPortStatPeakConns.setDescription('The number of peak connections')
axVirtualServerPortStatAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 4, 1, 1, 18), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortStatAddressType.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerPortStatAddressType.setDescription('The type of axVirtualServerPortStatAddress:\n            unknown(0), ipv4(1), ipv6(2)...')
axVirtualServerNameStatTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 5, 1), )
if mibBuilder.loadTexts: axVirtualServerNameStatTable.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerNameStatTable.setDescription('A table containing statistic information of virtual servers.')
axVirtualServerNameStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 5, 1, 1), ).setIndexNames((0, "A10-AX-MIB", "axVirtualServerStatDisplayName"))
if mibBuilder.loadTexts: axVirtualServerNameStatEntry.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerNameStatEntry.setDescription('Columns in the axVirtualServerNameStat Table')
axVirtualServerStatDisplayName = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 5, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerStatDisplayName.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerStatDisplayName.setDescription('The name of this virtual server.')
axVirtualServerNameStatPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 5, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerNameStatPktsIn.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerNameStatPktsIn.setDescription('The number of packets received from client to server.')
axVirtualServerNameStatBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 5, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerNameStatBytesIn.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerNameStatBytesIn.setDescription('The number of bytes received from client to server.')
axVirtualServerNameStatPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 5, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerNameStatPktsOut.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerNameStatPktsOut.setDescription('The number of packets sent from server to client.')
axVirtualServerNameStatBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 5, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerNameStatBytesOut.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerNameStatBytesOut.setDescription('The number of bytes sent from server to client.')
axVirtualServerNameStatPersistConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 5, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerNameStatPersistConns.setStatus('deprecated')
if mibBuilder.loadTexts: axVirtualServerNameStatPersistConns.setDescription('The persistent connections from client side.')
axVirtualServerNameStatTotConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 5, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerNameStatTotConns.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerNameStatTotConns.setDescription('The total connections from client side.')
axVirtualServerNameStatCurConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 5, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerNameStatCurConns.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerNameStatCurConns.setDescription('The current connections from client side.')
axVirtualServerNameStatStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 5, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerNameStatStatus.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerNameStatStatus.setDescription('The current virtual server status.')
axVirtualServerNameStatDisplayStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 5, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 0), ("allUp", 1), ("functionalUp", 2), ("partialUp", 3), ("stopped", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerNameStatDisplayStatus.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerNameStatDisplayStatus.setDescription('The display status of this virtual server:\n                    Disabled(0), AllUp(1), FunctionalUp(2), PartialUp(3), Stopped(4).')
axVirtualServerNameStatTotalL7Reqs = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 5, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerNameStatTotalL7Reqs.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerNameStatTotalL7Reqs.setDescription('The total number of L7 requests if applicable')
axVirtualServerNameStatTotalCurrL7Reqs = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 5, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerNameStatTotalCurrL7Reqs.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerNameStatTotalCurrL7Reqs.setDescription('The number of current L7 requests if applicable')
axVirtualServerNameStatTotalSuccL7Reqs = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 5, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerNameStatTotalSuccL7Reqs.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerNameStatTotalSuccL7Reqs.setDescription('The number of successful L7 requests if applicable')
axVirtualServerNameStatPeakConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 5, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerNameStatPeakConns.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerNameStatPeakConns.setDescription('The number of peak connections')
axVirtualServerNamePortStatTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 6, 1), )
if mibBuilder.loadTexts: axVirtualServerNamePortStatTable.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerNamePortStatTable.setDescription('A table containing statistic information of virtual server service ports.')
axVirtualServerNamePortStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 6, 1, 1), ).setIndexNames((0, "A10-AX-MIB", "axVirtualServerNamePortStatName"), (0, "A10-AX-MIB", "axVirtualServerNameStatPortType"), (0, "A10-AX-MIB", "axVirtualServerNameStatPortNum"))
if mibBuilder.loadTexts: axVirtualServerNamePortStatEntry.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerNamePortStatEntry.setDescription('Columns in the axVirtualServerNamePortStat Table')
axVirtualServerNamePortStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 6, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerNamePortStatName.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerNamePortStatName.setDescription('The name of the virtual server')
axVirtualServerNameStatPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 8, 9, 10, 12, 14, 15, 16, 17, 11, 19, 18, 5, 20, 21, 22, 23, 24))).clone(namedValues=NamedValues(("firewall", 1), ("tcp", 2), ("udp", 3), ("rtsp", 8), ("ftp", 9), ("mms", 10), ("fastHTTP", 12), ("http", 14), ("https", 15), ("sslProxy", 16), ("smtp", 17), ("sip", 11), ("sips", 19), ("sip-tcp", 18), ("others", 5), ("tcpProxy", 20), ("diameter", 21), ("dnsUdp", 22), ("tftp", 23), ("dnsTcp", 24)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerNameStatPortType.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerNameStatPortType.setDescription('The port type of a virtual server port')
axVirtualServerNameStatPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 6, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerNameStatPortNum.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerNameStatPortNum.setDescription('The service port number.')
axVirtualServerNameStatPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerNameStatPortStatus.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerNameStatPortStatus.setDescription('The status of this virtual server port.')
axVirtualServerNamePortStatPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 6, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerNamePortStatPktsIn.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerNamePortStatPktsIn.setDescription('The number of packets received from client to server.')
axVirtualServerNamePortStatBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 6, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerNamePortStatBytesIn.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerNamePortStatBytesIn.setDescription('The number of bytes received from client to server.')
axVirtualServerNamePortStatPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 6, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerNamePortStatPktsOut.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerNamePortStatPktsOut.setDescription('The number of packets sent from server to client.')
axVirtualServerNamePortStatBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 6, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerNamePortStatBytesOut.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerNamePortStatBytesOut.setDescription('The number of bytes sent from server to client.')
axVirtualServerNamePortStatPersistConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 6, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerNamePortStatPersistConns.setStatus('deprecated')
if mibBuilder.loadTexts: axVirtualServerNamePortStatPersistConns.setDescription('Persistent connections from client side.')
axVirtualServerNamePortStatTotConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 6, 1, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerNamePortStatTotConns.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerNamePortStatTotConns.setDescription('Total connections from client side.')
axVirtualServerNamePortStatCurConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 6, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerNamePortStatCurConns.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerNamePortStatCurConns.setDescription('Current connections from client side.')
axVirtualServerNameStatPortDisplayStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 6, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4))).clone(namedValues=NamedValues(("disabled", 0), ("allUp", 1), ("functionalUp", 2), ("stopped", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerNameStatPortDisplayStatus.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerNameStatPortDisplayStatus.setDescription('The display status of this virtual server port:\n                    Disabled(0), AllUp(1), FunctionalUp(2), Stopped(4).')
axVirtualServerNamePortStatTotalL7Reqs = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 6, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerNamePortStatTotalL7Reqs.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerNamePortStatTotalL7Reqs.setDescription('The total number of L7 requests if applicable')
axVirtualServerNamePortStatTotalCurrL7Reqs = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 6, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerNamePortStatTotalCurrL7Reqs.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerNamePortStatTotalCurrL7Reqs.setDescription('The number of current L7 requests if applicable')
axVirtualServerNamePortStatTotalSuccL7Reqs = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 6, 1, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerNamePortStatTotalSuccL7Reqs.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerNamePortStatTotalSuccL7Reqs.setDescription('The number of successful L7 requests if applicable')
axVirtualServerNamePortStatPeakConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 6, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerNamePortStatPeakConns.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerNamePortStatPeakConns.setDescription('The number of peak connections')
axConnReuseStatTotalOpenPersist = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axConnReuseStatTotalOpenPersist.setStatus('current')
if mibBuilder.loadTexts: axConnReuseStatTotalOpenPersist.setDescription('The total count of open persistent connection-reuse sessions.')
axConnReuseStatTotalActivePersist = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axConnReuseStatTotalActivePersist.setStatus('current')
if mibBuilder.loadTexts: axConnReuseStatTotalActivePersist.setDescription('The total count of active persistent connection-reuse sessions.')
axConnReuseStatTotalEstablished = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axConnReuseStatTotalEstablished.setStatus('current')
if mibBuilder.loadTexts: axConnReuseStatTotalEstablished.setDescription('The total count of established connection-reuse sessions.')
axConnReuseStatTotalTerminated = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 5, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axConnReuseStatTotalTerminated.setStatus('current')
if mibBuilder.loadTexts: axConnReuseStatTotalTerminated.setDescription('The total count of terminated connection-reuse sessions.')
axConnReuseStatTotalBound = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 5, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axConnReuseStatTotalBound.setStatus('current')
if mibBuilder.loadTexts: axConnReuseStatTotalBound.setDescription('The total count of bound connection-reuse sessions.')
axConnReuseStatTotalUNBound = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 5, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axConnReuseStatTotalUNBound.setStatus('current')
if mibBuilder.loadTexts: axConnReuseStatTotalUNBound.setDescription('The total count of unbound connection-reuse sessions.')
axConnReuseStatTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 5, 7), )
if mibBuilder.loadTexts: axConnReuseStatTable.setStatus('current')
if mibBuilder.loadTexts: axConnReuseStatTable.setDescription('The connection-reuse status table.')
axConnReuseStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 5, 7, 1), ).setIndexNames((0, "A10-AX-MIB", "axConnReuseStatCpuIndex"))
if mibBuilder.loadTexts: axConnReuseStatEntry.setStatus('current')
if mibBuilder.loadTexts: axConnReuseStatEntry.setDescription('The connection-reuse entry.')
axConnReuseStatCpuIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 5, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axConnReuseStatCpuIndex.setStatus('current')
if mibBuilder.loadTexts: axConnReuseStatCpuIndex.setDescription('Cpu Index to the connection-reuse STAT.')
axConnReuseStatOpenPersist = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 5, 7, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axConnReuseStatOpenPersist.setStatus('current')
if mibBuilder.loadTexts: axConnReuseStatOpenPersist.setDescription('The count of open persistent connection-reuse sessions.')
axConnReuseStatActivePersist = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 5, 7, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axConnReuseStatActivePersist.setStatus('current')
if mibBuilder.loadTexts: axConnReuseStatActivePersist.setDescription('The count of active persistent connection-reuse sessions.')
axConnReuseStatTotalEst = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 5, 7, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axConnReuseStatTotalEst.setStatus('current')
if mibBuilder.loadTexts: axConnReuseStatTotalEst.setDescription('The count of established connection-reuse sessions.')
axConnReuseStatTotalTerm = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 5, 7, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axConnReuseStatTotalTerm.setStatus('current')
if mibBuilder.loadTexts: axConnReuseStatTotalTerm.setDescription('The count of terminated connection-reuse sessions.')
axConnReuseStatTotalBind = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 5, 7, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axConnReuseStatTotalBind.setStatus('current')
if mibBuilder.loadTexts: axConnReuseStatTotalBind.setDescription('The count of bound connection-reuse sessions.')
axConnReuseStatTotalUNBind = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 5, 7, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axConnReuseStatTotalUNBind.setStatus('current')
if mibBuilder.loadTexts: axConnReuseStatTotalUNBind.setDescription('The count of unbound connection-reuse sessions')
axConnReuseStatTotalDelayedUNBind = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 5, 7, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axConnReuseStatTotalDelayedUNBind.setStatus('current')
if mibBuilder.loadTexts: axConnReuseStatTotalDelayedUNBind.setDescription('Number of connections whose unbinding was delayed.')
axConnReuseStatTotalLongRes = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 5, 7, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axConnReuseStatTotalLongRes.setStatus('current')
if mibBuilder.loadTexts: axConnReuseStatTotalLongRes.setDescription('Number of responses that took too long.')
axConnReuseStatTotalMissedRes = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 5, 7, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axConnReuseStatTotalMissedRes.setStatus('current')
if mibBuilder.loadTexts: axConnReuseStatTotalMissedRes.setDescription('Number of missed responses to HTTP requests.')
axConnReuseStatTotalDelayedUNBound = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 5, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axConnReuseStatTotalDelayedUNBound.setStatus('current')
if mibBuilder.loadTexts: axConnReuseStatTotalDelayedUNBound.setDescription('Number of connections whose unbinding was delayed.')
axConnReuseStatTotalLongResponse = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 5, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axConnReuseStatTotalLongResponse.setStatus('current')
if mibBuilder.loadTexts: axConnReuseStatTotalLongResponse.setDescription('Number of responses that took too long.')
axConnReuseStatTotalMissedResponse = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 5, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axConnReuseStatTotalMissedResponse.setStatus('current')
if mibBuilder.loadTexts: axConnReuseStatTotalMissedResponse.setDescription('Number of missed responses to HTTP requests.')
axFastHttpProxyStatTotalConn = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatTotalConn.setStatus('current')
if mibBuilder.loadTexts: axFastHttpProxyStatTotalConn.setDescription('The total count of proxy connections.')
axFastHttpProxyStatTotalReq = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatTotalReq.setStatus('current')
if mibBuilder.loadTexts: axFastHttpProxyStatTotalReq.setDescription('The total count of http requests.')
axFastHttpProxyStatTotalSuccReq = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatTotalSuccReq.setStatus('current')
if mibBuilder.loadTexts: axFastHttpProxyStatTotalSuccReq.setDescription('The total count of http requests which connected successful.')
axFastHttpProxyStatTotalNoProxy = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatTotalNoProxy.setStatus('current')
if mibBuilder.loadTexts: axFastHttpProxyStatTotalNoProxy.setDescription('The total count of no proxy fail.')
axFastHttpProxyStatTotalCRst = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatTotalCRst.setStatus('current')
if mibBuilder.loadTexts: axFastHttpProxyStatTotalCRst.setDescription('The total count of http connections reset by client.')
axFastHttpProxyStatTotalSRst = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatTotalSRst.setStatus('current')
if mibBuilder.loadTexts: axFastHttpProxyStatTotalSRst.setDescription('The total count of http connections reset by server.')
axFastHttpProxyStatTotalNoTuple = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatTotalNoTuple.setStatus('current')
if mibBuilder.loadTexts: axFastHttpProxyStatTotalNoTuple.setDescription('The total count of no tuple fail.')
axFastHttpProxyStatTotalReqErr = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatTotalReqErr.setStatus('current')
if mibBuilder.loadTexts: axFastHttpProxyStatTotalReqErr.setDescription('The total count of request parse failed.')
axFastHttpProxyStatTotalSvrSelErr = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatTotalSvrSelErr.setStatus('current')
if mibBuilder.loadTexts: axFastHttpProxyStatTotalSvrSelErr.setDescription('The total count of server select failed.')
axFastHttpProxyStatTotalFwdReqErr = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatTotalFwdReqErr.setStatus('current')
if mibBuilder.loadTexts: axFastHttpProxyStatTotalFwdReqErr.setDescription('The total count of firewall request fail.')
axFastHttpProxyStatTotalFwdDataReqErr = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatTotalFwdDataReqErr.setStatus('current')
if mibBuilder.loadTexts: axFastHttpProxyStatTotalFwdDataReqErr.setDescription('The total count of firewall data request failed.')
axFastHttpProxyStatTotalReqReXmit = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatTotalReqReXmit.setStatus('current')
if mibBuilder.loadTexts: axFastHttpProxyStatTotalReqReXmit.setDescription('The total count of retransmitted http request.')
axFastHttpProxyStatTotalReqPktOutOrder = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatTotalReqPktOutOrder.setStatus('current')
if mibBuilder.loadTexts: axFastHttpProxyStatTotalReqPktOutOrder.setDescription('The total count of request packet out of order.')
axFastHttpProxyStatTotalSvrReSel = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatTotalSvrReSel.setStatus('current')
if mibBuilder.loadTexts: axFastHttpProxyStatTotalSvrReSel.setDescription('The total count of server reselect.')
axFastHttpProxyStatTotalPreMatureClose = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatTotalPreMatureClose.setStatus('current')
if mibBuilder.loadTexts: axFastHttpProxyStatTotalPreMatureClose.setDescription('The total count of server premature closed connections.')
axFastHttpProxyStatTotalSvrConn = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatTotalSvrConn.setStatus('current')
if mibBuilder.loadTexts: axFastHttpProxyStatTotalSvrConn.setDescription('The total count of server connections made.')
axFastHttpProxyStatTotalSNATErr = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatTotalSNATErr.setStatus('current')
if mibBuilder.loadTexts: axFastHttpProxyStatTotalSNATErr.setDescription('The total count of Source NAT failed.')
axFastHttpProxyStatTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 18), )
if mibBuilder.loadTexts: axFastHttpProxyStatTable.setStatus('current')
if mibBuilder.loadTexts: axFastHttpProxyStatTable.setDescription('The fast http proxy status table.')
axFastHttpProxyStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 18, 1), ).setIndexNames((0, "A10-AX-MIB", "axFastHttpProxyStatCpuIndex"))
if mibBuilder.loadTexts: axFastHttpProxyStatEntry.setStatus('current')
if mibBuilder.loadTexts: axFastHttpProxyStatEntry.setDescription('The fast http proxy status entry.')
axFastHttpProxyStatCpuIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 18, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatCpuIndex.setStatus('current')
if mibBuilder.loadTexts: axFastHttpProxyStatCpuIndex.setDescription('The cpu index of fast http proxy STAT table')
axFastHttpProxyStatCurrProxyConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 18, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatCurrProxyConns.setStatus('current')
if mibBuilder.loadTexts: axFastHttpProxyStatCurrProxyConns.setDescription('The count of current fast http proxy connections')
axFastHttpProxyStatTotalProxyConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 18, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatTotalProxyConns.setStatus('current')
if mibBuilder.loadTexts: axFastHttpProxyStatTotalProxyConns.setDescription('The total count of fast http proxy connections of current cpu.')
axFastHttpProxyStatHttpReq = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 18, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatHttpReq.setStatus('current')
if mibBuilder.loadTexts: axFastHttpProxyStatHttpReq.setDescription('The count of http requests.')
axFastHttpProxyStatHttpReqSucc = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 18, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatHttpReqSucc.setStatus('current')
if mibBuilder.loadTexts: axFastHttpProxyStatHttpReqSucc.setDescription('The count of http reqests which connected successfully.')
axFastHttpProxyStatNoProxyErr = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 18, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatNoProxyErr.setStatus('current')
if mibBuilder.loadTexts: axFastHttpProxyStatNoProxyErr.setDescription('The count of no proxy error.')
axFastHttpProxyStatClientRst = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 18, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatClientRst.setStatus('current')
if mibBuilder.loadTexts: axFastHttpProxyStatClientRst.setDescription('The count of http connections reset by client.')
axFastHttpProxyStatServerRst = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 18, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatServerRst.setStatus('current')
if mibBuilder.loadTexts: axFastHttpProxyStatServerRst.setDescription('The count of http connections reset by server.')
axFastHttpProxyStatNoTupleErr = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 18, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatNoTupleErr.setStatus('current')
if mibBuilder.loadTexts: axFastHttpProxyStatNoTupleErr.setDescription('The count of no tuple fail.')
axFastHttpProxyStatParseReqFail = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 18, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatParseReqFail.setStatus('current')
if mibBuilder.loadTexts: axFastHttpProxyStatParseReqFail.setDescription('The count of request parse failed.')
axFastHttpProxyStatServerSelFail = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 18, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatServerSelFail.setStatus('current')
if mibBuilder.loadTexts: axFastHttpProxyStatServerSelFail.setDescription('The count of server select failed.')
axFastHttpProxyStatFwdReqFail = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 18, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatFwdReqFail.setStatus('current')
if mibBuilder.loadTexts: axFastHttpProxyStatFwdReqFail.setDescription('The count of firewall request fail.')
axFastHttpProxyStatFwdReqDataFail = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 18, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatFwdReqDataFail.setStatus('current')
if mibBuilder.loadTexts: axFastHttpProxyStatFwdReqDataFail.setDescription('The count of firewall data request failed.')
axFastHttpProxyStatReqReTran = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 18, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatReqReTran.setStatus('current')
if mibBuilder.loadTexts: axFastHttpProxyStatReqReTran.setDescription('The count of retransmitted http request.')
axFastHttpProxyStatReqPktOutOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 18, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatReqPktOutOrder.setStatus('current')
if mibBuilder.loadTexts: axFastHttpProxyStatReqPktOutOrder.setDescription('The count of request packet out of order.')
axFastHttpProxyStatServerReSel = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 18, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatServerReSel.setStatus('current')
if mibBuilder.loadTexts: axFastHttpProxyStatServerReSel.setDescription('The count of server reselect.')
axFastHttpProxyStatServerPreMatureClose = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 18, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatServerPreMatureClose.setStatus('current')
if mibBuilder.loadTexts: axFastHttpProxyStatServerPreMatureClose.setDescription('The count of server premature closed connections.')
axFastHttpProxyStatServerConnMade = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 18, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatServerConnMade.setStatus('current')
if mibBuilder.loadTexts: axFastHttpProxyStatServerConnMade.setDescription('The count of server connections made.')
axHttpProxyStatTotalConn = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatTotalConn.setStatus('current')
if mibBuilder.loadTexts: axHttpProxyStatTotalConn.setDescription('The total count of proxy connections.')
axHttpProxyStatTotalReq = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatTotalReq.setStatus('current')
if mibBuilder.loadTexts: axHttpProxyStatTotalReq.setDescription('The total count of http requests.')
axHttpProxyStatTotalSuccReq = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatTotalSuccReq.setStatus('current')
if mibBuilder.loadTexts: axHttpProxyStatTotalSuccReq.setDescription('The total count of http requests which connected\nsuccessful.')
axHttpProxyStatTotalNoProxy = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatTotalNoProxy.setStatus('current')
if mibBuilder.loadTexts: axHttpProxyStatTotalNoProxy.setDescription('The total count of no proxy fail.')
axHttpProxyStatTotalCRst = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatTotalCRst.setStatus('current')
if mibBuilder.loadTexts: axHttpProxyStatTotalCRst.setDescription('The total count of http connections reset by client.')
axHttpProxyStatTotalSRst = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatTotalSRst.setStatus('current')
if mibBuilder.loadTexts: axHttpProxyStatTotalSRst.setDescription('The total count of http connections reset by server.')
axHttpProxyStatTotalNoTuple = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatTotalNoTuple.setStatus('current')
if mibBuilder.loadTexts: axHttpProxyStatTotalNoTuple.setDescription('The total count of no tuple fail.')
axHttpProxyStatTotalReqErr = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatTotalReqErr.setStatus('current')
if mibBuilder.loadTexts: axHttpProxyStatTotalReqErr.setDescription('The total count of request parse failed.')
axHttpProxyStatTotalSvrSelErr = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatTotalSvrSelErr.setStatus('current')
if mibBuilder.loadTexts: axHttpProxyStatTotalSvrSelErr.setDescription('The total count of server select failed.')
axHttpProxyStatTotalFwdReqErr = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatTotalFwdReqErr.setStatus('current')
if mibBuilder.loadTexts: axHttpProxyStatTotalFwdReqErr.setDescription('The total count of firewall request fail.')
axHttpProxyStatTotalFwdDataReqErr = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatTotalFwdDataReqErr.setStatus('current')
if mibBuilder.loadTexts: axHttpProxyStatTotalFwdDataReqErr.setDescription('The total count of firewall data request failed.')
axHttpProxyStatTotalReqReXmit = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatTotalReqReXmit.setStatus('current')
if mibBuilder.loadTexts: axHttpProxyStatTotalReqReXmit.setDescription('The total count of retransmitted http request.')
axHttpProxyStatTotalReqPktOutOrder = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatTotalReqPktOutOrder.setStatus('current')
if mibBuilder.loadTexts: axHttpProxyStatTotalReqPktOutOrder.setDescription('The total count of request packet out of order.')
axHttpProxyStatTotalSvrReSel = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatTotalSvrReSel.setStatus('current')
if mibBuilder.loadTexts: axHttpProxyStatTotalSvrReSel.setDescription('The total count of server reselect.')
axHttpProxyStatTotalPreMatureClose = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatTotalPreMatureClose.setStatus('current')
if mibBuilder.loadTexts: axHttpProxyStatTotalPreMatureClose.setDescription('The total count of server premature closed connections.')
axHttpProxyStatTotalSvrConn = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatTotalSvrConn.setStatus('current')
if mibBuilder.loadTexts: axHttpProxyStatTotalSvrConn.setDescription('The total count of server connections made.')
axHttpProxyStatTotalSNATErr = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatTotalSNATErr.setStatus('current')
if mibBuilder.loadTexts: axHttpProxyStatTotalSNATErr.setDescription('The total count of Source NAT failed.')
axHttpProxyStatTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 18), )
if mibBuilder.loadTexts: axHttpProxyStatTable.setStatus('current')
if mibBuilder.loadTexts: axHttpProxyStatTable.setDescription('The http proxy STAT table.')
axHttpProxyStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 18, 1), ).setIndexNames((0, "A10-AX-MIB", "axHttpProxyStatCpuIndex"))
if mibBuilder.loadTexts: axHttpProxyStatEntry.setStatus('current')
if mibBuilder.loadTexts: axHttpProxyStatEntry.setDescription('The http proxy STAT entry.')
axHttpProxyStatCpuIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 18, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatCpuIndex.setStatus('current')
if mibBuilder.loadTexts: axHttpProxyStatCpuIndex.setDescription('The cpu Index of http proxy STAT table.')
axHttpProxyStatCurrProxyConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 18, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatCurrProxyConns.setStatus('current')
if mibBuilder.loadTexts: axHttpProxyStatCurrProxyConns.setDescription('The count of current http proxy connections')
axHttpProxyStatTotalProxyConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 18, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatTotalProxyConns.setStatus('current')
if mibBuilder.loadTexts: axHttpProxyStatTotalProxyConns.setDescription('The total count of http proxy connections of current cpu.')
axHttpProxyStatHttpReq = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 18, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatHttpReq.setStatus('current')
if mibBuilder.loadTexts: axHttpProxyStatHttpReq.setDescription('The count of http requests.')
axHttpProxyStatHttpReqSucc = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 18, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatHttpReqSucc.setStatus('current')
if mibBuilder.loadTexts: axHttpProxyStatHttpReqSucc.setDescription('The count of http reqests which connected successfully.')
axHttpProxyStatNoProxyErr = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 18, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatNoProxyErr.setStatus('current')
if mibBuilder.loadTexts: axHttpProxyStatNoProxyErr.setDescription('The count of no proxy error.')
axHttpProxyStatClientRst = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 18, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatClientRst.setStatus('current')
if mibBuilder.loadTexts: axHttpProxyStatClientRst.setDescription('The count of http connections reset by client.')
axHttpProxyStatServerRst = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 18, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatServerRst.setStatus('current')
if mibBuilder.loadTexts: axHttpProxyStatServerRst.setDescription('The count of http connections reset by server.')
axHttpProxyStatNoTupleErr = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 18, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatNoTupleErr.setStatus('current')
if mibBuilder.loadTexts: axHttpProxyStatNoTupleErr.setDescription('The count of no tuple fail.')
axHttpProxyStatParseReqFail = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 18, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatParseReqFail.setStatus('current')
if mibBuilder.loadTexts: axHttpProxyStatParseReqFail.setDescription('The count of request parse failed.')
axHttpProxyStatServerSelFail = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 18, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatServerSelFail.setStatus('current')
if mibBuilder.loadTexts: axHttpProxyStatServerSelFail.setDescription('he count of server select failed.')
axHttpProxyStatFwdReqFail = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 18, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatFwdReqFail.setStatus('current')
if mibBuilder.loadTexts: axHttpProxyStatFwdReqFail.setDescription('The count of firewall request fail.')
axHttpProxyStatFwdReqDataFail = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 18, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatFwdReqDataFail.setStatus('current')
if mibBuilder.loadTexts: axHttpProxyStatFwdReqDataFail.setDescription('The count of firewall data request failed.')
axHttpProxyStatReqReTran = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 18, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatReqReTran.setStatus('current')
if mibBuilder.loadTexts: axHttpProxyStatReqReTran.setDescription('The count of retransmitted http request.')
axHttpProxyStatReqPktOutOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 18, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatReqPktOutOrder.setStatus('current')
if mibBuilder.loadTexts: axHttpProxyStatReqPktOutOrder.setDescription('The count of request packet out of order.')
axHttpProxyStatServerReSel = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 18, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatServerReSel.setStatus('current')
if mibBuilder.loadTexts: axHttpProxyStatServerReSel.setDescription('The count of server reselect.')
axHttpProxyStatServerPreMatureClose = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 18, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatServerPreMatureClose.setStatus('current')
if mibBuilder.loadTexts: axHttpProxyStatServerPreMatureClose.setDescription('The count of server premature closed connections.')
axHttpProxyStatServerConnMade = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 18, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatServerConnMade.setStatus('current')
if mibBuilder.loadTexts: axHttpProxyStatServerConnMade.setDescription('The count of server connections made.')
axTcpProxyStatTotalCurrEstConn = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatTotalCurrEstConn.setStatus('current')
if mibBuilder.loadTexts: axTcpProxyStatTotalCurrEstConn.setDescription('The total count of currently established tcp Connections.')
axTcpProxyStatTotalActiveOpenConn = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatTotalActiveOpenConn.setStatus('current')
if mibBuilder.loadTexts: axTcpProxyStatTotalActiveOpenConn.setDescription('The total count of actively opened tcp Connections.')
axTcpProxyStatTotalPassiveOpenConn = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatTotalPassiveOpenConn.setStatus('current')
if mibBuilder.loadTexts: axTcpProxyStatTotalPassiveOpenConn.setDescription('The total count of passively opened tcp connections.')
axTcpProxyStatTotalConnAttemptFail = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatTotalConnAttemptFail.setStatus('current')
if mibBuilder.loadTexts: axTcpProxyStatTotalConnAttemptFail.setDescription('The total count of connectting attempt fails.')
axTcpProxyStatTotalInTCPPacket = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatTotalInTCPPacket.setStatus('current')
if mibBuilder.loadTexts: axTcpProxyStatTotalInTCPPacket.setDescription('The total count of received tcp packets.')
axTcpProxyStatTotalOutTCPPkt = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatTotalOutTCPPkt.setStatus('current')
if mibBuilder.loadTexts: axTcpProxyStatTotalOutTCPPkt.setDescription('The total count of sent tcp packets.')
axTcpProxyStatTotalReXmitPkt = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatTotalReXmitPkt.setStatus('current')
if mibBuilder.loadTexts: axTcpProxyStatTotalReXmitPkt.setDescription('The total count of re-transmitted packets.')
axTcpProxyStatTotalRstRcvOnEstConn = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatTotalRstRcvOnEstConn.setStatus('current')
if mibBuilder.loadTexts: axTcpProxyStatTotalRstRcvOnEstConn.setDescription('The total count of reset received on established connection.')
axTcpProxyStatTotalRstSent = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatTotalRstSent.setStatus('current')
if mibBuilder.loadTexts: axTcpProxyStatTotalRstSent.setDescription('The total count of reset sent.')
axTCPProxyStatTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 10), )
if mibBuilder.loadTexts: axTCPProxyStatTable.setStatus('current')
if mibBuilder.loadTexts: axTCPProxyStatTable.setDescription('The TCP proxy STAT table.')
axTCPProxyStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 10, 1), ).setIndexNames((0, "A10-AX-MIB", "axTcpProxyStatCpuIndex"))
if mibBuilder.loadTexts: axTCPProxyStatEntry.setStatus('current')
if mibBuilder.loadTexts: axTCPProxyStatEntry.setDescription('The TCP proxy STAT entry.')
axTcpProxyStatCpuIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatCpuIndex.setStatus('current')
if mibBuilder.loadTexts: axTcpProxyStatCpuIndex.setDescription('The cpu index of TCP proxy STAT table.')
axTcpProxyStatCurrEstConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 10, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatCurrEstConns.setStatus('current')
if mibBuilder.loadTexts: axTcpProxyStatCurrEstConns.setDescription('The count of currently established connections.')
axTcpProxyStatActiveOpenConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 10, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatActiveOpenConns.setStatus('current')
if mibBuilder.loadTexts: axTcpProxyStatActiveOpenConns.setDescription('The count of active open connections.')
axTcpProxyStatPassiveOpenConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 10, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatPassiveOpenConns.setStatus('current')
if mibBuilder.loadTexts: axTcpProxyStatPassiveOpenConns.setDescription('The count of passive open connections.')
axTcpProxyStatConnAttempFail = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 10, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatConnAttempFail.setStatus('current')
if mibBuilder.loadTexts: axTcpProxyStatConnAttempFail.setDescription('The count of connecting attempt fail.')
axTcpProxyStatTotalInTCPPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 10, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatTotalInTCPPkt.setStatus('current')
if mibBuilder.loadTexts: axTcpProxyStatTotalInTCPPkt.setDescription('The total count of packet received.')
axTcpProxyStatTotalOutPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 10, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatTotalOutPkt.setStatus('current')
if mibBuilder.loadTexts: axTcpProxyStatTotalOutPkt.setDescription('The total count of packets sent.')
axTcpProxyStatReTranPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 10, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatReTranPkt.setStatus('current')
if mibBuilder.loadTexts: axTcpProxyStatReTranPkt.setDescription('The count of re-transmit packets.')
axTcpProxyStatRstRvdEstConn = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 10, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatRstRvdEstConn.setStatus('current')
if mibBuilder.loadTexts: axTcpProxyStatRstRvdEstConn.setDescription('The count of reset received on established connections.')
axTcpProxyStatRstSent = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 10, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatRstSent.setStatus('current')
if mibBuilder.loadTexts: axTcpProxyStatRstSent.setDescription('The count of Reset Sent.')
axTcpProxyStatInputErr = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 10, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatInputErr.setStatus('current')
if mibBuilder.loadTexts: axTcpProxyStatInputErr.setDescription('The count of Input Error.')
axTcpProxyStatSocketAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 10, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatSocketAlloc.setStatus('current')
if mibBuilder.loadTexts: axTcpProxyStatSocketAlloc.setDescription('The count of socket allocated.')
axTcpProxyStatOrphanSocket = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 10, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatOrphanSocket.setStatus('current')
if mibBuilder.loadTexts: axTcpProxyStatOrphanSocket.setDescription('The count of orphan sockets.')
axTcpProxyStatMemAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 10, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatMemAlloc.setStatus('current')
if mibBuilder.loadTexts: axTcpProxyStatMemAlloc.setDescription('The size of allocated memory used by tcp proxy.')
axTcpProxyStatTotalRxBuf = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 10, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatTotalRxBuf.setStatus('current')
if mibBuilder.loadTexts: axTcpProxyStatTotalRxBuf.setDescription('The size of Rx buffer.')
axTcpProxyStatTotalTxBuf = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 10, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatTotalTxBuf.setStatus('current')
if mibBuilder.loadTexts: axTcpProxyStatTotalTxBuf.setDescription('The size of TX buffer.')
axTcpProxyStatTCPSYNSNTState = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 10, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatTCPSYNSNTState.setStatus('current')
if mibBuilder.loadTexts: axTcpProxyStatTCPSYNSNTState.setDescription('The count of TCP connections in SYN-SNT state.')
axTcpProxyStatTCPSYNRCVState = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 10, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatTCPSYNRCVState.setStatus('current')
if mibBuilder.loadTexts: axTcpProxyStatTCPSYNRCVState.setDescription('The count of TCP connections in SYN-RCV state.')
axTcpProxyStatTCPFINW1State = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 10, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatTCPFINW1State.setStatus('current')
if mibBuilder.loadTexts: axTcpProxyStatTCPFINW1State.setDescription('The count of TCP connections in FIN-W1 state.')
axTcpProxyStatTCPFINW2State = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 10, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatTCPFINW2State.setStatus('current')
if mibBuilder.loadTexts: axTcpProxyStatTCPFINW2State.setDescription('The count of TCP connections in FIN-W2 state.')
axTcpProxyStatTimeWstate = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 10, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatTimeWstate.setStatus('current')
if mibBuilder.loadTexts: axTcpProxyStatTimeWstate.setDescription('The count of TCP connections in TCP TimeW state.')
axTcpProxyStatTCPCloseState = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 10, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatTCPCloseState.setStatus('current')
if mibBuilder.loadTexts: axTcpProxyStatTCPCloseState.setDescription('The count of TCP connections in close state.')
axTcpProxyStatTCPCloseWState = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 10, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatTCPCloseWState.setStatus('current')
if mibBuilder.loadTexts: axTcpProxyStatTCPCloseWState.setDescription('The count of TCP connections in closeW state.')
axTcpProxyStatTCPLastACKState = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 10, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatTCPLastACKState.setStatus('current')
if mibBuilder.loadTexts: axTcpProxyStatTCPLastACKState.setDescription('The count of TCP connections in lastACK state.')
axTcpProxyStatTCPListenState = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 10, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatTCPListenState.setStatus('current')
if mibBuilder.loadTexts: axTcpProxyStatTCPListenState.setDescription('The count of TCP connections in listen state.')
axTcpProxyStatTCPClosingState = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 10, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatTCPClosingState.setStatus('current')
if mibBuilder.loadTexts: axTcpProxyStatTCPClosingState.setDescription('The count of TCP connections in closing state.')
axSslStatSSLModNum = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 9, 1), Integer32().clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSslStatSSLModNum.setStatus('current')
if mibBuilder.loadTexts: axSslStatSSLModNum.setDescription('The number of SSL modules.')
axSslStatCurrSSLConn = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 9, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSslStatCurrSSLConn.setStatus('current')
if mibBuilder.loadTexts: axSslStatCurrSSLConn.setDescription('Current SSL Connections.')
axSslStatTotalSSLConn = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 9, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSslStatTotalSSLConn.setStatus('current')
if mibBuilder.loadTexts: axSslStatTotalSSLConn.setDescription('Total SSL connections.')
axSslStatFailSSLHandshake = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 9, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSslStatFailSSLHandshake.setStatus('current')
if mibBuilder.loadTexts: axSslStatFailSSLHandshake.setDescription('Failed SSL handshake.')
axSslStatSSLMemUsage = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 9, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSslStatSSLMemUsage.setStatus('current')
if mibBuilder.loadTexts: axSslStatSSLMemUsage.setDescription('The SSL Memory usage(Byte).')
axSslStatTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 9, 6), )
if mibBuilder.loadTexts: axSslStatTable.setStatus('current')
if mibBuilder.loadTexts: axSslStatTable.setDescription('The SSL STAT table.')
axSslStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 9, 6, 1), ).setIndexNames((0, "A10-AX-MIB", "axSslStatModuleIndex"))
if mibBuilder.loadTexts: axSslStatEntry.setStatus('current')
if mibBuilder.loadTexts: axSslStatEntry.setDescription('The SSL STAT entry.')
axSslStatModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 9, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSslStatModuleIndex.setStatus('current')
if mibBuilder.loadTexts: axSslStatModuleIndex.setDescription('The Module Index of SSL STAT table')
axSslStatEnableCryptoEngine = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 9, 6, 1, 2), Counter32().clone(22)).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSslStatEnableCryptoEngine.setStatus('current')
if mibBuilder.loadTexts: axSslStatEnableCryptoEngine.setDescription('The number of enabled crypto engines.')
axSslStatAvailCryptoEngine = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 9, 6, 1, 3), Counter32().clone(22)).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSslStatAvailCryptoEngine.setStatus('current')
if mibBuilder.loadTexts: axSslStatAvailCryptoEngine.setDescription('The number of available crypto engines.')
axSslStatSSLFailedCAVfy = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 9, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSslStatSSLFailedCAVfy.setStatus('current')
if mibBuilder.loadTexts: axSslStatSSLFailedCAVfy.setDescription('Number of times an SSL session was terminated due to a certificate verification failure.')
axSslStatSSLNoHWContextMem = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 9, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSslStatSSLNoHWContextMem.setStatus('current')
if mibBuilder.loadTexts: axSslStatSSLNoHWContextMem.setDescription('Number of times the encryption processor was unable to allocate memory.')
axSslStatSSLHWRingFull = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 9, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSslStatSSLHWRingFull.setStatus('current')
if mibBuilder.loadTexts: axSslStatSSLHWRingFull.setDescription('Number of times the AX software was unable to enqueue an SSL record to the SSL processor for encryption/decryption.(Number of times the processor reached its performance limit.)')
axSslStatSSLFailedCryptoOperation = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 9, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSslStatSSLFailedCryptoOperation.setStatus('current')
if mibBuilder.loadTexts: axSslStatSSLFailedCryptoOperation.setDescription('Number of times when the crypto opertion fails.')
axFtpStatTotalCtrlSession = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 10, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFtpStatTotalCtrlSession.setStatus('current')
if mibBuilder.loadTexts: axFtpStatTotalCtrlSession.setDescription('The total count of control sessions.')
axFtpStatTotalALGPkt = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 10, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFtpStatTotalALGPkt.setStatus('current')
if mibBuilder.loadTexts: axFtpStatTotalALGPkt.setDescription('The total count of ALG packets.')
axFtpStatALGPktReXmit = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 10, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFtpStatALGPktReXmit.setStatus('current')
if mibBuilder.loadTexts: axFtpStatALGPktReXmit.setDescription('The count of ALG packets rexmitted.')
axFtpStatOutConnCtrl = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 10, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFtpStatOutConnCtrl.setStatus('current')
if mibBuilder.loadTexts: axFtpStatOutConnCtrl.setDescription('The count of out of control connections.')
axFtpStatTotalDataSession = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 10, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFtpStatTotalDataSession.setStatus('current')
if mibBuilder.loadTexts: axFtpStatTotalDataSession.setDescription('The total count of data sessions.')
axFtpStatOutConnData = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 10, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFtpStatOutConnData.setStatus('current')
if mibBuilder.loadTexts: axFtpStatOutConnData.setDescription('The total count of out of data connections.')
axNetStatIPOutNoRoute = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatIPOutNoRoute.setStatus('current')
if mibBuilder.loadTexts: axNetStatIPOutNoRoute.setDescription('The count of IP out no route.')
axNetStatTCPOutRst = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatTCPOutRst.setStatus('current')
if mibBuilder.loadTexts: axNetStatTCPOutRst.setDescription('The count of TCP out Reset.')
axNetStatTCPSynRcv = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatTCPSynRcv.setStatus('current')
if mibBuilder.loadTexts: axNetStatTCPSynRcv.setDescription('The count of TCP SYN packets received.')
axNetStatTCPSYNCookieSent = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatTCPSYNCookieSent.setStatus('current')
if mibBuilder.loadTexts: axNetStatTCPSYNCookieSent.setDescription('The count of TCP SYN cookie sent.')
axNetStatTCPSYNCookieSentFail = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatTCPSYNCookieSentFail.setStatus('current')
if mibBuilder.loadTexts: axNetStatTCPSYNCookieSentFail.setDescription('The count of TCP SYN cookie sent fail.')
axNetStatTCPReceive = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatTCPReceive.setStatus('current')
if mibBuilder.loadTexts: axNetStatTCPReceive.setDescription('Number of TCP packets received.')
axNetStatUDPReceive = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatUDPReceive.setStatus('current')
if mibBuilder.loadTexts: axNetStatUDPReceive.setDescription('Number of UDP packets received.')
axNetStatServerSelFail = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatServerSelFail.setStatus('current')
if mibBuilder.loadTexts: axNetStatServerSelFail.setDescription('Number of times selection of a real server failed.')
axNetStatSourceNATFail = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatSourceNATFail.setStatus('current')
if mibBuilder.loadTexts: axNetStatSourceNATFail.setDescription('Number of times a source NAT failure occurred.')
axNetStatTCPSynCookieFail = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatTCPSynCookieFail.setStatus('current')
if mibBuilder.loadTexts: axNetStatTCPSynCookieFail.setDescription('Number of times a TCP SYN cookie failure occurred.')
axNetStatNoVportDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatNoVportDrop.setStatus('current')
if mibBuilder.loadTexts: axNetStatNoVportDrop.setDescription('Number of times traffic was dropped because the requested virtual port was not available.')
axNetStatNoSynPktDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatNoSynPktDrop.setStatus('current')
if mibBuilder.loadTexts: axNetStatNoSynPktDrop.setDescription('Number of SYN packets dropped.')
axNetStatConnLimitDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatConnLimitDrop.setStatus('current')
if mibBuilder.loadTexts: axNetStatConnLimitDrop.setDescription('Number of packets dropped because the server connection limit had been reached.')
axNetStatConnLimitReset = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatConnLimitReset.setStatus('current')
if mibBuilder.loadTexts: axNetStatConnLimitReset.setDescription('Number of connections reset because the server connection limit had been reached.')
axNetStatProxyNoSockDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatProxyNoSockDrop.setStatus('current')
if mibBuilder.loadTexts: axNetStatProxyNoSockDrop.setDescription('Number of packets dropped because the proxy did not have an available socket.')
axNetStataFlexDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStataFlexDrop.setStatus('current')
if mibBuilder.loadTexts: axNetStataFlexDrop.setDescription('Number of packets dropped due to an aFlex.')
axNetStatSessionAgingOut = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatSessionAgingOut.setStatus('current')
if mibBuilder.loadTexts: axNetStatSessionAgingOut.setDescription('Number of sessions that have aged out.')
axNetStatTCPNoSLB = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatTCPNoSLB.setStatus('current')
if mibBuilder.loadTexts: axNetStatTCPNoSLB.setDescription('Total number of TCP packets in non SLB processing.')
axNetStatUDPNoSLB = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatUDPNoSLB.setStatus('current')
if mibBuilder.loadTexts: axNetStatUDPNoSLB.setDescription('Total number of UDP packets in non SLB processing.')
axNetStatTCPOutRSTNoSYN = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatTCPOutRSTNoSYN.setStatus('current')
if mibBuilder.loadTexts: axNetStatTCPOutRSTNoSYN.setDescription('Total number of TCP out RST no SYN.')
axNetStatTCPOutRSTL4Proxy = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatTCPOutRSTL4Proxy.setStatus('current')
if mibBuilder.loadTexts: axNetStatTCPOutRSTL4Proxy.setDescription('Total number of TCP out RST L4 proxy.')
axNetStatTCPOutRSTACKattack = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatTCPOutRSTACKattack.setStatus('current')
if mibBuilder.loadTexts: axNetStatTCPOutRSTACKattack.setDescription('Total number of TCP out RST ACK attack.')
axNetStatTCPOutRSTAFleX = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatTCPOutRSTAFleX.setStatus('current')
if mibBuilder.loadTexts: axNetStatTCPOutRSTAFleX.setDescription('Total number of TCP out RST aFlex.')
axNetStatTCPOutRSTStaleSess = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatTCPOutRSTStaleSess.setStatus('current')
if mibBuilder.loadTexts: axNetStatTCPOutRSTStaleSess.setDescription('Total number of TCP out RST stale session.')
axNetStatTCPOutRSTProxy = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatTCPOutRSTProxy.setStatus('current')
if mibBuilder.loadTexts: axNetStatTCPOutRSTProxy.setDescription('Total number of TCP out RST TCP proxy.')
axNetStatNoSYNPktDropFIN = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatNoSYNPktDropFIN.setStatus('current')
if mibBuilder.loadTexts: axNetStatNoSYNPktDropFIN.setDescription('Total number of No SYN pkt drops - FIN.')
axNetStatNoSYNPktDropRST = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatNoSYNPktDropRST.setStatus('current')
if mibBuilder.loadTexts: axNetStatNoSYNPktDropRST.setDescription('Total number of No SYN pkt drops - RST.')
axNetStatNoSYNPktDropACK = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatNoSYNPktDropACK.setStatus('current')
if mibBuilder.loadTexts: axNetStatNoSYNPktDropACK.setDescription('Total number of No SYN pkt drops - ACK.')
axNetStatSYNThrotte = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatSYNThrotte.setStatus('current')
if mibBuilder.loadTexts: axNetStatSYNThrotte.setDescription('Total number of SYN Throttle.')
axNetStatSSLSIDPersistSucc = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatSSLSIDPersistSucc.setStatus('current')
if mibBuilder.loadTexts: axNetStatSSLSIDPersistSucc.setDescription('Total number of SSL SID persist successful.')
axNetStatSSLSIDPersistFail = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatSSLSIDPersistFail.setStatus('current')
if mibBuilder.loadTexts: axNetStatSSLSIDPersistFail.setDescription('Total number of SSL SID persist failed.')
axNetStatClientSSLSIDNotFound = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatClientSSLSIDNotFound.setStatus('current')
if mibBuilder.loadTexts: axNetStatClientSSLSIDNotFound.setDescription('Total number of Client SSL SID not found.')
axNetStatClientSSLSIDMatch = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatClientSSLSIDMatch.setStatus('current')
if mibBuilder.loadTexts: axNetStatClientSSLSIDMatch.setDescription('Total number of Client SSL SID match')
axNetStatClientSSLSIDNotMatch = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatClientSSLSIDNotMatch.setStatus('current')
if mibBuilder.loadTexts: axNetStatClientSSLSIDNotMatch.setDescription('Total number of Client SSL SID not match.')
axNetStatServerSSLSIDNotFound = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatServerSSLSIDNotFound.setStatus('current')
if mibBuilder.loadTexts: axNetStatServerSSLSIDNotFound.setDescription('Total number of Server SSL SID not found.')
axNetStatServerSSLSIDReset = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatServerSSLSIDReset.setStatus('current')
if mibBuilder.loadTexts: axNetStatServerSSLSIDReset.setDescription('Total number of Server SSL SID reset.')
axNetStatServerSSLSIDMatch = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatServerSSLSIDMatch.setStatus('current')
if mibBuilder.loadTexts: axNetStatServerSSLSIDMatch.setDescription('Total number of Server SSL SID match.')
axNetStatServerSSLSIDNotMatch = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatServerSSLSIDNotMatch.setStatus('current')
if mibBuilder.loadTexts: axNetStatServerSSLSIDNotMatch.setDescription('Total number of Server SSL SID not match.')
axNetStatCreateSSLSIDSucc = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatCreateSSLSIDSucc.setStatus('current')
if mibBuilder.loadTexts: axNetStatCreateSSLSIDSucc.setDescription('Total number of Create SSL SID successfully.')
axNetStatCreateSSLSIDFail = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatCreateSSLSIDFail.setStatus('current')
if mibBuilder.loadTexts: axNetStatCreateSSLSIDFail.setDescription('Total number of Create SSL SID failed.')
axNetStatConnRateLimitDrops = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatConnRateLimitDrops.setStatus('current')
if mibBuilder.loadTexts: axNetStatConnRateLimitDrops.setDescription('Total number of Conn rate limit drops.')
axNetStatConnRateLimitResets = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatConnRateLimitResets.setStatus('current')
if mibBuilder.loadTexts: axNetStatConnRateLimitResets.setDescription('Total number of Conn rate limit resets.')
axNetStatInbandHMRetry = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatInbandHMRetry.setStatus('current')
if mibBuilder.loadTexts: axNetStatInbandHMRetry.setDescription('Total number of Inband HM retry.')
axNetStatInbandHMReassign = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatInbandHMReassign.setStatus('current')
if mibBuilder.loadTexts: axNetStatInbandHMReassign.setDescription('Total number of Inband HM reassign.')
axNetStat2TCPReceive = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStat2TCPReceive.setStatus('current')
if mibBuilder.loadTexts: axNetStat2TCPReceive.setDescription('Number of TCP packets received in the 64-bit counter.')
axNetStat2UDPReceive = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 46), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStat2UDPReceive.setStatus('current')
if mibBuilder.loadTexts: axNetStat2UDPReceive.setDescription('Number of UDP packets received in the 64-bit counter.')
axNetStatL4SynAttack = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatL4SynAttack.setStatus('current')
if mibBuilder.loadTexts: axNetStatL4SynAttack.setDescription('Number of L4 SYN attacks')
axNetStatExt = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90))
axNetStatExtL2Dsr = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtL2Dsr.setStatus('current')
if mibBuilder.loadTexts: axNetStatExtL2Dsr.setDescription('Number of L2 DSR')
axNetStatExtL3Dsr = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtL3Dsr.setStatus('current')
if mibBuilder.loadTexts: axNetStatExtL3Dsr.setDescription('Number of L3 DSR')
axNetStatExtNatNoFwdRoute = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtNatNoFwdRoute.setStatus('current')
if mibBuilder.loadTexts: axNetStatExtNatNoFwdRoute.setDescription('Number of Source NAT no fwd route')
axNetStatExtNatNoRevRoute = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtNatNoRevRoute.setStatus('current')
if mibBuilder.loadTexts: axNetStatExtNatNoRevRoute.setDescription('Number of Source NAT no rev route')
axNetStatExtNatIcmpProcess = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtNatIcmpProcess.setStatus('current')
if mibBuilder.loadTexts: axNetStatExtNatIcmpProcess.setDescription('Number of Source NAT ICMP process')
axNetStatExtNatIcmpNoMatch = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtNatIcmpNoMatch.setStatus('current')
if mibBuilder.loadTexts: axNetStatExtNatIcmpNoMatch.setDescription('Number of Source NAT ICMP no match')
axNetStatExtAutoNatIdMismatch = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtAutoNatIdMismatch.setStatus('current')
if mibBuilder.loadTexts: axNetStatExtAutoNatIdMismatch.setDescription('Number of Auto NAT id mismatch')
axNetStatExtNoVportDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtNoVportDrop.setStatus('current')
if mibBuilder.loadTexts: axNetStatExtNoVportDrop.setDescription('Number of vport not matching drops')
axNetStatExtTcpSessionAgedOut = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtTcpSessionAgedOut.setStatus('current')
if mibBuilder.loadTexts: axNetStatExtTcpSessionAgedOut.setDescription('Number of TCP Session aged out')
axNetStatExtUdpSessionAgedOut = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtUdpSessionAgedOut.setStatus('current')
if mibBuilder.loadTexts: axNetStatExtUdpSessionAgedOut.setDescription('Number of UDP Session aged out')
axNetStatExtOtherSessionAgedOut = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtOtherSessionAgedOut.setStatus('current')
if mibBuilder.loadTexts: axNetStatExtOtherSessionAgedOut.setDescription('Number of Other Session aged out')
axNetStatExtAutoReselectServer = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtAutoReselectServer.setStatus('current')
if mibBuilder.loadTexts: axNetStatExtAutoReselectServer.setDescription('Number of Auto-reselect server')
axNetStatExtFastAgingSet = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtFastAgingSet.setStatus('current')
if mibBuilder.loadTexts: axNetStatExtFastAgingSet.setDescription('Number of Fast aging set')
axNetStatExtFastAgingReset = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtFastAgingReset.setStatus('current')
if mibBuilder.loadTexts: axNetStatExtFastAgingReset.setDescription('Number of Fast aging reset')
axNetStatExtTcpInvalidDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtTcpInvalidDrop.setStatus('current')
if mibBuilder.loadTexts: axNetStatExtTcpInvalidDrop.setDescription('Number of TCP invalid drop')
axNetStatExtOutOfSeqAckDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtOutOfSeqAckDrop.setStatus('current')
if mibBuilder.loadTexts: axNetStatExtOutOfSeqAckDrop.setDescription('Number of Out of sequence ACK drop')
axNetStatExtTcpSynStaleSessionDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtTcpSynStaleSessionDrop.setStatus('current')
if mibBuilder.loadTexts: axNetStatExtTcpSynStaleSessionDrop.setDescription('Number of SYN stale sess drop')
axNetStatExtAnomalyOutOfSeq = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtAnomalyOutOfSeq.setStatus('current')
if mibBuilder.loadTexts: axNetStatExtAnomalyOutOfSeq.setDescription('Number of Anomaly out of sequence')
axNetStatExtAnomalyZeroWindow = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtAnomalyZeroWindow.setStatus('current')
if mibBuilder.loadTexts: axNetStatExtAnomalyZeroWindow.setDescription('Number of Anomaly zero window')
axNetStatExtAnomalyBadContent = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtAnomalyBadContent.setStatus('current')
if mibBuilder.loadTexts: axNetStatExtAnomalyBadContent.setDescription('Number of Anomaly bad content')
axNetStatExtAnomalyPbslbDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtAnomalyPbslbDrop.setStatus('current')
if mibBuilder.loadTexts: axNetStatExtAnomalyPbslbDrop.setDescription('Number of Anomaly pbslb drop')
axNetStatExtNoResourceDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtNoResourceDrop.setStatus('current')
if mibBuilder.loadTexts: axNetStatExtNoResourceDrop.setDescription('Number of No resource drop')
axNetStatExtResetUnknownConns = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtResetUnknownConns.setStatus('current')
if mibBuilder.loadTexts: axNetStatExtResetUnknownConns.setDescription('Number of Reset unknown conn')
axNetStatExtRstL7OnFailover = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtRstL7OnFailover.setStatus('current')
if mibBuilder.loadTexts: axNetStatExtRstL7OnFailover.setDescription('Number of RST L7 on failover ')
axNetStatExtTcpSynOtherFlagsDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtTcpSynOtherFlagsDrop.setStatus('current')
if mibBuilder.loadTexts: axNetStatExtTcpSynOtherFlagsDrop.setDescription('Number of TCP SYN Other Flags Drop')
axNetStatExtTcpSynWithDataDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtTcpSynWithDataDrop.setStatus('current')
if mibBuilder.loadTexts: axNetStatExtTcpSynWithDataDrop.setDescription('Number of TCP SYN With Data Drop')
axNetStatExtIgnoreMsl = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtIgnoreMsl.setStatus('current')
if mibBuilder.loadTexts: axNetStatExtIgnoreMsl.setDescription('Number of ignore msl')
axNetStatExtNatPortPreserveTry = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtNatPortPreserveTry.setStatus('current')
if mibBuilder.loadTexts: axNetStatExtNatPortPreserveTry.setDescription('Number of NAT Port Preserve Try')
axNetStatExtNatPortPreserveSucc = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtNatPortPreserveSucc.setStatus('current')
if mibBuilder.loadTexts: axNetStatExtNatPortPreserveSucc.setDescription('Number of NAT Port Preserve Succ')
axNetStatExtBwLimitExceedDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtBwLimitExceedDrop.setStatus('current')
if mibBuilder.loadTexts: axNetStatExtBwLimitExceedDrop.setDescription('Number of BW-Limit Exceed drop')
axNetStatExtBwWaterMarkDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtBwWaterMarkDrop.setStatus('current')
if mibBuilder.loadTexts: axNetStatExtBwWaterMarkDrop.setDescription('Number of BW-Watermark drop')
axNetStatExtL4CpsExceedDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtL4CpsExceedDrop.setStatus('current')
if mibBuilder.loadTexts: axNetStatExtL4CpsExceedDrop.setDescription('Number of L4 CPS exceed drop')
axNetStatExtNatCpsExceedDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtNatCpsExceedDrop.setStatus('current')
if mibBuilder.loadTexts: axNetStatExtNatCpsExceedDrop.setDescription('Number of NAT CPS exceed drop')
axNetStatExtL7CpsExceedDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtL7CpsExceedDrop.setStatus('current')
if mibBuilder.loadTexts: axNetStatExtL7CpsExceedDrop.setDescription('Number of L7 CPS exceed drop')
axNetStatExtSslCpsExceedDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtSslCpsExceedDrop.setStatus('current')
if mibBuilder.loadTexts: axNetStatExtSslCpsExceedDrop.setDescription('Number of SSL CPS exceed drop')
axNetStatExtSslTptExceedDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtSslTptExceedDrop.setStatus('current')
if mibBuilder.loadTexts: axNetStatExtSslTptExceedDrop.setDescription('Number of SSL TPT exceed drop')
axNetStatExtSslTptWaterMarkDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtSslTptWaterMarkDrop.setStatus('current')
if mibBuilder.loadTexts: axNetStatExtSslTptWaterMarkDrop.setDescription('Number of SSL TPT-Watermark drop')
axNetStatExtL3vConnLimitDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtL3vConnLimitDrop.setStatus('current')
if mibBuilder.loadTexts: axNetStatExtL3vConnLimitDrop.setDescription('Number of L3V Conn Limit Drop')
axNetStatExtL4ServerHandshakeFail = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtL4ServerHandshakeFail.setStatus('current')
if mibBuilder.loadTexts: axNetStatExtL4ServerHandshakeFail.setDescription('Number of L4 server handshake fail')
axNetStatExtL4AxReXmitSyn = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtL4AxReXmitSyn.setStatus('current')
if mibBuilder.loadTexts: axNetStatExtL4AxReXmitSyn.setDescription('Number of L4 AX re-xmit SYN')
axNetStatExtL4RcvAckOnSyn = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtL4RcvAckOnSyn.setStatus('current')
if mibBuilder.loadTexts: axNetStatExtL4RcvAckOnSyn.setDescription('Number of L4 rcv ACK on SYN')
axNetStatExtL4RcvRstOnSyn = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtL4RcvRstOnSyn.setStatus('current')
if mibBuilder.loadTexts: axNetStatExtL4RcvRstOnSyn.setDescription('Number of L4 rcv RST on SYN')
axNetStatExtTcpNoEstSessionAgedOut = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtTcpNoEstSessionAgedOut.setStatus('current')
if mibBuilder.loadTexts: axNetStatExtTcpNoEstSessionAgedOut.setDescription('Number of TCP no-Est Sess aged out')
axNetStatExtNoEstCsynRcvAgedOut = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtNoEstCsynRcvAgedOut.setStatus('current')
if mibBuilder.loadTexts: axNetStatExtNoEstCsynRcvAgedOut.setDescription('Number of no-Est CSYN rcv aged out')
axNetStatExtNoEstSsynSntAgedOut = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtNoEstSsynSntAgedOut.setStatus('current')
if mibBuilder.loadTexts: axNetStatExtNoEstSsynSntAgedOut.setDescription('Number of no-Est SSYN snt aged out')
axNetStatExtL4RcvReXmitSyn = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtL4RcvReXmitSyn.setStatus('current')
if mibBuilder.loadTexts: axNetStatExtL4RcvReXmitSyn.setDescription('Number of L4 rcv rexmit SYN')
axNetStatExtL4RcvReXmitSynDelq = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtL4RcvReXmitSynDelq.setStatus('current')
if mibBuilder.loadTexts: axNetStatExtL4RcvReXmitSynDelq.setDescription('Number of L4 rcv rexmit SYN (delq)')
axNetStatExtL4RcvReXmitSynAck = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtL4RcvReXmitSynAck.setStatus('current')
if mibBuilder.loadTexts: axNetStatExtL4RcvReXmitSynAck.setDescription('Number of L4 rcv rexmit SYN|ACK')
axNetStatExtL4RcvReXmitSynAckDq = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtL4RcvReXmitSynAckDq.setStatus('current')
if mibBuilder.loadTexts: axNetStatExtL4RcvReXmitSynAckDq.setDescription('Number of L4 rcv rexmit SYN|ACK DQ ')
axNetStatExtL4RcvFwdLastAck = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtL4RcvFwdLastAck.setStatus('current')
if mibBuilder.loadTexts: axNetStatExtL4RcvFwdLastAck.setDescription('Number of L4 rcv fwd last ACK')
axNetStatExtL4RcvRevLastAck = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtL4RcvRevLastAck.setStatus('current')
if mibBuilder.loadTexts: axNetStatExtL4RcvRevLastAck.setDescription('Number of L4 rcv rev last ACK')
axNetStatExtL4RcvFwdFin = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtL4RcvFwdFin.setStatus('current')
if mibBuilder.loadTexts: axNetStatExtL4RcvFwdFin.setDescription('Number of L4 rcv fwd FIN')
axNetStatExtL4RcvFwdFinDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtL4RcvFwdFinDrop.setStatus('current')
if mibBuilder.loadTexts: axNetStatExtL4RcvFwdFinDrop.setDescription('Number of L4 rcv fwd FIN dup')
axNetStatExtL4RcvFwdFinAck = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 54), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtL4RcvFwdFinAck.setStatus('current')
if mibBuilder.loadTexts: axNetStatExtL4RcvFwdFinAck.setDescription('Number of L4 rcv fwd FIN|ACK')
axNetStatExtL4RcvRevFin = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 55), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtL4RcvRevFin.setStatus('current')
if mibBuilder.loadTexts: axNetStatExtL4RcvRevFin.setDescription('Number of L4 rcv rev FIN')
axNetStatExtL4RcvRevFinDup = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 56), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtL4RcvRevFinDup.setStatus('current')
if mibBuilder.loadTexts: axNetStatExtL4RcvRevFinDup.setDescription('Number of L4 rcv rev FIN dup')
axNetStatExtL4RcvFevFinAck = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 57), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtL4RcvFevFinAck.setStatus('current')
if mibBuilder.loadTexts: axNetStatExtL4RcvFevFinAck.setDescription('Number of L4 rcv rev FIN|ACK')
axNetStatExtL4RcvFwdRst = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 58), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtL4RcvFwdRst.setStatus('current')
if mibBuilder.loadTexts: axNetStatExtL4RcvFwdRst.setDescription('Number of L4 rcv fwd RST')
axNetStatExtL4RcfRevRst = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 59), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtL4RcfRevRst.setStatus('current')
if mibBuilder.loadTexts: axNetStatExtL4RcfRevRst.setDescription('Number of L4 rcv rev RST')
axNetStatExtL4UdpReqsNoRsp = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 60), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtL4UdpReqsNoRsp.setStatus('current')
if mibBuilder.loadTexts: axNetStatExtL4UdpReqsNoRsp.setDescription('Number of L4 UDP reqs no rsp')
axNetStatExtL4UdpReqRsps = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 61), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtL4UdpReqRsps.setStatus('current')
if mibBuilder.loadTexts: axNetStatExtL4UdpReqRsps.setDescription('Number of L4 UDP req rsps')
axNetStatExtL4UdpReqRspNotMatch = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 62), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtL4UdpReqRspNotMatch.setStatus('current')
if mibBuilder.loadTexts: axNetStatExtL4UdpReqRspNotMatch.setDescription('Number of L4 UDP req/rsp not match')
axNetStatExtL4UdpReqGreaterRsps = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 63), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtL4UdpReqGreaterRsps.setStatus('current')
if mibBuilder.loadTexts: axNetStatExtL4UdpReqGreaterRsps.setDescription('Number of L4 UDP req > rsps')
axNetStatExtL4UdpRspsGreaterReqs = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 64), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtL4UdpRspsGreaterReqs.setStatus('current')
if mibBuilder.loadTexts: axNetStatExtL4UdpRspsGreaterReqs.setDescription('Number of L4 UDP rsps > reqs')
axNetStatExtL4UdpReqs = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 65), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtL4UdpReqs.setStatus('current')
if mibBuilder.loadTexts: axNetStatExtL4UdpReqs.setDescription('Number of L4 UDP reqs')
axNetStatExtL4UdpRsps = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 66), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtL4UdpRsps.setStatus('current')
if mibBuilder.loadTexts: axNetStatExtL4UdpRsps.setDescription('Number of L4 UDP rsps')
axNetStatExtL4TcpEst = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 90, 67), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatExtL4TcpEst.setStatus('current')
if mibBuilder.loadTexts: axNetStatExtL4TcpEst.setDescription('Number of L4 TCP Established')
axNetStatTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100), )
if mibBuilder.loadTexts: axNetStatTable.setStatus('current')
if mibBuilder.loadTexts: axNetStatTable.setDescription('The Net STAT table.')
axNetStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1), ).setIndexNames((0, "A10-AX-MIB", "axNetStatCpuIndex"))
if mibBuilder.loadTexts: axNetStatEntry.setStatus('current')
if mibBuilder.loadTexts: axNetStatEntry.setDescription('The Net STAT entry.')
axNetStatCpuIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatCpuIndex.setStatus('current')
if mibBuilder.loadTexts: axNetStatCpuIndex.setDescription('The Module Index of Net STAT table')
axNetStatIPOutNoRt = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatIPOutNoRt.setStatus('current')
if mibBuilder.loadTexts: axNetStatIPOutNoRt.setDescription('Number of IP packets that could not be routed.')
axNetStatTCPOutReset = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatTCPOutReset.setStatus('current')
if mibBuilder.loadTexts: axNetStatTCPOutReset.setDescription('Number of TCP Resets sent.')
axNetStatTCPSynRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatTCPSynRecv.setStatus('current')
if mibBuilder.loadTexts: axNetStatTCPSynRecv.setDescription('Number of TCP SYN packets received.')
axNetStatTCPSYNCookieSnt = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatTCPSYNCookieSnt.setStatus('current')
if mibBuilder.loadTexts: axNetStatTCPSYNCookieSnt.setDescription('Number of TCP SYN cookies sent.')
axNetStatTCPSYNCookieSntFail = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatTCPSYNCookieSntFail.setStatus('current')
if mibBuilder.loadTexts: axNetStatTCPSYNCookieSntFail.setDescription('Number of TCP SYN cookie send attempts that failed.')
axNetStatTCPRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatTCPRcv.setStatus('current')
if mibBuilder.loadTexts: axNetStatTCPRcv.setDescription('Number of TCP packets received.')
axNetStatUDPRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatUDPRcv.setStatus('current')
if mibBuilder.loadTexts: axNetStatUDPRcv.setDescription('Number of UDP packets received.')
axNetStatServerSelFails = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatServerSelFails.setStatus('current')
if mibBuilder.loadTexts: axNetStatServerSelFails.setDescription('Number of times selection of a real server failed.')
axNetStatSourceNATFails = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatSourceNATFails.setStatus('current')
if mibBuilder.loadTexts: axNetStatSourceNATFails.setDescription('Number of times a source NAT failure occurred.')
axNetStatTCPSynCookieFails = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatTCPSynCookieFails.setStatus('current')
if mibBuilder.loadTexts: axNetStatTCPSynCookieFails.setDescription('Number of times a TCP SYN cookie failure occurred.')
axNetStatNoVportDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatNoVportDrops.setStatus('current')
if mibBuilder.loadTexts: axNetStatNoVportDrops.setDescription('Number of times traffic was dropped because the requested virtual port was not available.')
axNetStatNoSynPktDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatNoSynPktDrops.setStatus('current')
if mibBuilder.loadTexts: axNetStatNoSynPktDrops.setDescription('Number of SYN packets dropped.')
axNetStatConnLimitDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatConnLimitDrops.setStatus('current')
if mibBuilder.loadTexts: axNetStatConnLimitDrops.setDescription('Number of packets dropped because the server connection limit had been reached.')
axNetStatConnLimitResets = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatConnLimitResets.setStatus('current')
if mibBuilder.loadTexts: axNetStatConnLimitResets.setDescription('Number of connections reset because the server connection limit had been reached.')
axNetStatProxyNoSockDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatProxyNoSockDrops.setStatus('current')
if mibBuilder.loadTexts: axNetStatProxyNoSockDrops.setDescription('Number of packets dropped because the proxy did not have an available socket.')
axNetStataFlexDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStataFlexDrops.setStatus('current')
if mibBuilder.loadTexts: axNetStataFlexDrops.setDescription('Number of packets dropped due to an aFlex.')
axNetStatSessionsAgingOut = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatSessionsAgingOut.setStatus('current')
if mibBuilder.loadTexts: axNetStatSessionsAgingOut.setDescription('Number of sessions that have aged out.')
axNetStatTCPsNoSLB = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatTCPsNoSLB.setStatus('current')
if mibBuilder.loadTexts: axNetStatTCPsNoSLB.setDescription('Number of TCP packets in non SLB processing.')
axNetStatUDPsNoSLB = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatUDPsNoSLB.setStatus('current')
if mibBuilder.loadTexts: axNetStatUDPsNoSLB.setDescription('Number of UDP packets in non SLB processing.')
axNetStatEntryTCPOutRSTNoSYN = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatEntryTCPOutRSTNoSYN.setStatus('current')
if mibBuilder.loadTexts: axNetStatEntryTCPOutRSTNoSYN.setDescription('Number of TCP out RST no SYN.')
axNetStatEntryTCPOutRSTL4Proxy = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatEntryTCPOutRSTL4Proxy.setStatus('current')
if mibBuilder.loadTexts: axNetStatEntryTCPOutRSTL4Proxy.setDescription('Number of TCP out RST L4 proxy.')
axNetStatEntryTCPOutRSTACKattack = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatEntryTCPOutRSTACKattack.setStatus('current')
if mibBuilder.loadTexts: axNetStatEntryTCPOutRSTACKattack.setDescription('Number of TCP out RST ACK attack.')
axNetStatEntryTCPOutRSTAFleX = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatEntryTCPOutRSTAFleX.setStatus('current')
if mibBuilder.loadTexts: axNetStatEntryTCPOutRSTAFleX.setDescription('Number of TCP out RST aFlex.')
axNetStatEntryTCPOutRSTStaleSess = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatEntryTCPOutRSTStaleSess.setStatus('current')
if mibBuilder.loadTexts: axNetStatEntryTCPOutRSTStaleSess.setDescription('Number of TCP out RST stale session.')
axNetStatEntryTCPOutRSTProxy = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatEntryTCPOutRSTProxy.setStatus('current')
if mibBuilder.loadTexts: axNetStatEntryTCPOutRSTProxy.setDescription('Number of TCP out RST TCP proxy.')
axNetStatEntryNoSYNPktDropFIN = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatEntryNoSYNPktDropFIN.setStatus('current')
if mibBuilder.loadTexts: axNetStatEntryNoSYNPktDropFIN.setDescription('Number of No SYN pkt drops - FIN.')
axNetStatEntryNoSYNPktDropRST = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatEntryNoSYNPktDropRST.setStatus('current')
if mibBuilder.loadTexts: axNetStatEntryNoSYNPktDropRST.setDescription('Number of No SYN pkt drops - RST.')
axNetStatEntryNoSYNPktDropACK = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatEntryNoSYNPktDropACK.setStatus('current')
if mibBuilder.loadTexts: axNetStatEntryNoSYNPktDropACK.setDescription('Number of No SYN pkt drops - ACK.')
axNetStatEntrySYNThrotte = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatEntrySYNThrotte.setStatus('current')
if mibBuilder.loadTexts: axNetStatEntrySYNThrotte.setDescription('Number of SYN Throttle.')
axNetStatEntrySSLSIDPersistSucc = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatEntrySSLSIDPersistSucc.setStatus('current')
if mibBuilder.loadTexts: axNetStatEntrySSLSIDPersistSucc.setDescription('Total number of SSL SID persist successful.')
axNetStatEntrySSLSIDPersistFail = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatEntrySSLSIDPersistFail.setStatus('current')
if mibBuilder.loadTexts: axNetStatEntrySSLSIDPersistFail.setDescription('Total number of SSL SID persist failed.')
axNetStatEntryClientSSLSIDNotFound = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatEntryClientSSLSIDNotFound.setStatus('current')
if mibBuilder.loadTexts: axNetStatEntryClientSSLSIDNotFound.setDescription('Total number of Client SSL SID not found.')
axNetStatEntryClientSSLSIDMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatEntryClientSSLSIDMatch.setStatus('current')
if mibBuilder.loadTexts: axNetStatEntryClientSSLSIDMatch.setDescription('Total number of Client SSL SID match')
axNetStatEntryClientSSLSIDNotMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatEntryClientSSLSIDNotMatch.setStatus('current')
if mibBuilder.loadTexts: axNetStatEntryClientSSLSIDNotMatch.setDescription('Total number of Client SSL SID not match.')
axNetStatEntryServerSSLSIDNotFound = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatEntryServerSSLSIDNotFound.setStatus('current')
if mibBuilder.loadTexts: axNetStatEntryServerSSLSIDNotFound.setDescription('Total number of Server SSL SID not found.')
axNetStatEntryServerSSLSIDReset = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatEntryServerSSLSIDReset.setStatus('current')
if mibBuilder.loadTexts: axNetStatEntryServerSSLSIDReset.setDescription('Total number of Server SSL SID reset.')
axNetStatEntryServerSSLSIDMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatEntryServerSSLSIDMatch.setStatus('current')
if mibBuilder.loadTexts: axNetStatEntryServerSSLSIDMatch.setDescription('Total number of Server SSL SID match.')
axNetStatEntryServerSSLSIDNotMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatEntryServerSSLSIDNotMatch.setStatus('current')
if mibBuilder.loadTexts: axNetStatEntryServerSSLSIDNotMatch.setDescription('Total number of Server SSL SID not match.')
axNetStatEntryCreateSSLSIDSucc = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatEntryCreateSSLSIDSucc.setStatus('current')
if mibBuilder.loadTexts: axNetStatEntryCreateSSLSIDSucc.setDescription('Total number of Create SSL SID successfully.')
axNetStatEntryCreateSSLSIDFail = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatEntryCreateSSLSIDFail.setStatus('current')
if mibBuilder.loadTexts: axNetStatEntryCreateSSLSIDFail.setDescription('Total number of Create SSL SID failed.')
axNetStatEntryConnRateLimitDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatEntryConnRateLimitDrops.setStatus('current')
if mibBuilder.loadTexts: axNetStatEntryConnRateLimitDrops.setDescription('Number of Conn rate limit drops.')
axNetStatEntryConnRateLimitResets = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatEntryConnRateLimitResets.setStatus('current')
if mibBuilder.loadTexts: axNetStatEntryConnRateLimitResets.setDescription('Number of Conn rate limit resets.')
axNetStatEntryInbandHMRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatEntryInbandHMRetry.setStatus('current')
if mibBuilder.loadTexts: axNetStatEntryInbandHMRetry.setDescription('Number of Inband HM retry.')
axNetStatEntryInbandHMReassign = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatEntryInbandHMReassign.setStatus('current')
if mibBuilder.loadTexts: axNetStatEntryInbandHMReassign.setDescription('Number of Inband HM reassign.')
axSmtpProxyStatsCurrProxyConns = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatsCurrProxyConns.setStatus('current')
if mibBuilder.loadTexts: axSmtpProxyStatsCurrProxyConns.setDescription('Number of currently active SMTP connections using the AX Series device as an SMTP proxy.')
axSmtpProxyStatsTotalProxyConns = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatsTotalProxyConns.setStatus('current')
if mibBuilder.loadTexts: axSmtpProxyStatsTotalProxyConns.setDescription('Total number of SMTP connections that have used the AX Series device as an SMTP proxy.')
axSmtpProxyStatsSmtpRequests = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatsSmtpRequests.setStatus('current')
if mibBuilder.loadTexts: axSmtpProxyStatsSmtpRequests.setDescription('Total number of SMTP requests received by the SMTP proxy.')
axSmtpProxyStatsSmtpReqSuccs = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatsSmtpReqSuccs.setStatus('current')
if mibBuilder.loadTexts: axSmtpProxyStatsSmtpReqSuccs.setDescription('Number of SMTP requests received by the AX Series device that were successfully fulfilled (by connection to a real server).')
axSmtpProxyStatsNoProxyError = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatsNoProxyError.setStatus('current')
if mibBuilder.loadTexts: axSmtpProxyStatsNoProxyError.setDescription('Number of proxy errors.')
axSmtpProxyStatsClientRST = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatsClientRST.setStatus('current')
if mibBuilder.loadTexts: axSmtpProxyStatsClientRST.setDescription('Number of times TCP connections with clients were reset.')
axSmtpProxyStatsServerRST = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatsServerRST.setStatus('current')
if mibBuilder.loadTexts: axSmtpProxyStatsServerRST.setDescription('Number of times TCP connections with servers were reset.')
axSmtpProxyStatsNoTupleError = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatsNoTupleError.setStatus('current')
if mibBuilder.loadTexts: axSmtpProxyStatsNoTupleError.setDescription('Number of tuple errors.')
axSmtpProxyStatsParseReqFail = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatsParseReqFail.setStatus('current')
if mibBuilder.loadTexts: axSmtpProxyStatsParseReqFail.setDescription('Number of times parsing of an SMTP request failed.')
axSmtpProxyStatsServerSelFail = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatsServerSelFail.setStatus('current')
if mibBuilder.loadTexts: axSmtpProxyStatsServerSelFail.setDescription('Number of times selection of a real server failed.')
axSmtpProxyStatsFwdReqFail = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatsFwdReqFail.setStatus('current')
if mibBuilder.loadTexts: axSmtpProxyStatsFwdReqFail.setDescription('Number of forward request failures.')
axSmtpProxyStatsFwdReqDataFail = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatsFwdReqDataFail.setStatus('current')
if mibBuilder.loadTexts: axSmtpProxyStatsFwdReqDataFail.setDescription('Number of forward request data failures.')
axSmtpProxyStatsReqRetrans = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatsReqRetrans.setStatus('current')
if mibBuilder.loadTexts: axSmtpProxyStatsReqRetrans.setDescription('Number of retransmitted requests.')
axSmtpProxyStatsReqPktOutOrder = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatsReqPktOutOrder.setStatus('current')
if mibBuilder.loadTexts: axSmtpProxyStatsReqPktOutOrder.setDescription('Number of request packets received from clients out of sequence.')
axSmtpProxyStatsServerResel = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatsServerResel.setStatus('current')
if mibBuilder.loadTexts: axSmtpProxyStatsServerResel.setDescription('Number of times a request was forwarded to another server because the current server was failing.')
axSmtpProxyStatsSvrPrematureClose = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatsSvrPrematureClose.setStatus('current')
if mibBuilder.loadTexts: axSmtpProxyStatsSvrPrematureClose.setDescription('Number of times the connection with a server closed prematurely.')
axSmtpProxyStatsSvrConnMade = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatsSvrConnMade.setStatus('current')
if mibBuilder.loadTexts: axSmtpProxyStatsSvrConnMade.setDescription('Number of connections made with servers.')
axSmtpProxyStatsSNATFail = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatsSNATFail.setStatus('current')
if mibBuilder.loadTexts: axSmtpProxyStatsSNATFail.setDescription('Number of source NAT failures.')
axSmtpProxyStatTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 19), )
if mibBuilder.loadTexts: axSmtpProxyStatTable.setStatus('current')
if mibBuilder.loadTexts: axSmtpProxyStatTable.setDescription('The Smtp proxy STAT table.')
axSmtpProxyStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 19, 1), ).setIndexNames((0, "A10-AX-MIB", "axSmtpProxyStatCpuIndex"))
if mibBuilder.loadTexts: axSmtpProxyStatEntry.setStatus('current')
if mibBuilder.loadTexts: axSmtpProxyStatEntry.setDescription('The Smtp proxy STAT entry.')
axSmtpProxyStatCpuIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 19, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatCpuIndex.setStatus('current')
if mibBuilder.loadTexts: axSmtpProxyStatCpuIndex.setDescription('The Module Index of Smtp Proxy STAT table')
axSmtpProxyStatCurrProxyConn = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 19, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatCurrProxyConn.setStatus('current')
if mibBuilder.loadTexts: axSmtpProxyStatCurrProxyConn.setDescription('Number of currently active SMTP connections using the AX Series device as an SMTP proxy.')
axSmtpProxyStatTotalProxyConn = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 19, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatTotalProxyConn.setStatus('current')
if mibBuilder.loadTexts: axSmtpProxyStatTotalProxyConn.setDescription('Total number of SMTP connections that have used the AX Series device as an SMTP proxy.')
axSmtpProxyStatSmtpReq = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 19, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatSmtpReq.setStatus('current')
if mibBuilder.loadTexts: axSmtpProxyStatSmtpReq.setDescription('Total number of SMTP requests received by the SMTP proxy.')
axSmtpProxyStatSmtpReqSucc = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 19, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatSmtpReqSucc.setStatus('current')
if mibBuilder.loadTexts: axSmtpProxyStatSmtpReqSucc.setDescription('Number of SMTP requests received by the AX Series device that were successfully fulfilled (by connection to a real server).')
axSmtpProxyStatNoProxyError = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 19, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatNoProxyError.setStatus('current')
if mibBuilder.loadTexts: axSmtpProxyStatNoProxyError.setDescription('Number of proxy errors.')
axSmtpProxyStatClientRST = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 19, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatClientRST.setStatus('current')
if mibBuilder.loadTexts: axSmtpProxyStatClientRST.setDescription('Number of times TCP connections with clients were reset.')
axSmtpProxyStatServerRST = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 19, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatServerRST.setStatus('current')
if mibBuilder.loadTexts: axSmtpProxyStatServerRST.setDescription('Number of times TCP connections with servers were reset.')
axSmtpProxyStatNoTupleError = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 19, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatNoTupleError.setStatus('current')
if mibBuilder.loadTexts: axSmtpProxyStatNoTupleError.setDescription('Number of tuple errors.')
axSmtpProxyStatParseReqFail = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 19, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatParseReqFail.setStatus('current')
if mibBuilder.loadTexts: axSmtpProxyStatParseReqFail.setDescription('Number of times parsing of an SMTP request failed.')
axSmtpProxyStatServerSelFail = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 19, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatServerSelFail.setStatus('current')
if mibBuilder.loadTexts: axSmtpProxyStatServerSelFail.setDescription('Number of times selection of a real server failed.')
axSmtpProxyStatFwdReqFail = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 19, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatFwdReqFail.setStatus('current')
if mibBuilder.loadTexts: axSmtpProxyStatFwdReqFail.setDescription('Number of forward request failures.')
axSmtpProxyStatFwdReqDataFail = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 19, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatFwdReqDataFail.setStatus('current')
if mibBuilder.loadTexts: axSmtpProxyStatFwdReqDataFail.setDescription('Number of forward request data failures.')
axSmtpProxyStatReqRetrans = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 19, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatReqRetrans.setStatus('current')
if mibBuilder.loadTexts: axSmtpProxyStatReqRetrans.setDescription('Number of retransmitted requests.')
axSmtpProxyStatReqPktOutOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 19, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatReqPktOutOrder.setStatus('current')
if mibBuilder.loadTexts: axSmtpProxyStatReqPktOutOrder.setDescription('Number of request packets received from clients out of sequence.')
axSmtpProxyStatServerResel = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 19, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatServerResel.setStatus('current')
if mibBuilder.loadTexts: axSmtpProxyStatServerResel.setDescription('Number of times a request was forwarded to another server because the current server was failing.')
axSmtpProxyStatSvrPrematureClose = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 19, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatSvrPrematureClose.setStatus('current')
if mibBuilder.loadTexts: axSmtpProxyStatSvrPrematureClose.setDescription('TNumber of times the connection with a server closed prematurely.')
axSmtpProxyStatSvrConnMade = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 19, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatSvrConnMade.setStatus('current')
if mibBuilder.loadTexts: axSmtpProxyStatSvrConnMade.setDescription('Number of connections made with servers.')
axSmtpProxyStatSNATFail = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 19, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatSNATFail.setStatus('current')
if mibBuilder.loadTexts: axSmtpProxyStatSNATFail.setDescription('Number of source NAT failures.')
axSslProxyStatsCurrProxyConns = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 14, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSslProxyStatsCurrProxyConns.setStatus('current')
if mibBuilder.loadTexts: axSslProxyStatsCurrProxyConns.setDescription('Number of currently active connections using the AX device as an SSL proxy.')
axSslProxyStatsTotalProxyConns = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 14, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSslProxyStatsTotalProxyConns.setStatus('current')
if mibBuilder.loadTexts: axSslProxyStatsTotalProxyConns.setDescription('Total number of connections using the AX device as an SSL proxy.')
axSslProxyStatsClientErr = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 14, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSslProxyStatsClientErr.setStatus('current')
if mibBuilder.loadTexts: axSslProxyStatsClientErr.setDescription('Number of client errors.')
axSslProxyStatsServerErr = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 14, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSslProxyStatsServerErr.setStatus('current')
if mibBuilder.loadTexts: axSslProxyStatsServerErr.setDescription('Number of server errors.')
axSslProxyStatsSessNotFound = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 14, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSslProxyStatsSessNotFound.setStatus('current')
if mibBuilder.loadTexts: axSslProxyStatsSessNotFound.setDescription('Number of times a session was not found.')
axSslProxyStatsNoRoute = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 14, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSslProxyStatsNoRoute.setStatus('current')
if mibBuilder.loadTexts: axSslProxyStatsNoRoute.setDescription('Number of times no route was available.')
axSslProxyStatsSvrSelFail = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 14, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSslProxyStatsSvrSelFail.setStatus('current')
if mibBuilder.loadTexts: axSslProxyStatsSvrSelFail.setDescription('Number of times selection or a real server failed.')
axSslProxyStatsSNATFail = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 14, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSslProxyStatsSNATFail.setStatus('current')
if mibBuilder.loadTexts: axSslProxyStatsSNATFail.setDescription('Number of occurrences of source NAT failure.')
axPersistentStatsUrlHashPersistOKPri = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 15, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axPersistentStatsUrlHashPersistOKPri.setStatus('current')
if mibBuilder.loadTexts: axPersistentStatsUrlHashPersistOKPri.setDescription('Number of requests successfully sent to the primary server selected by URL hashing. The primary server is the one that was initially selected and then re-used based on the hash value.')
axPersistentStatsUrlHashPersistOKSec = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 15, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axPersistentStatsUrlHashPersistOKSec.setStatus('current')
if mibBuilder.loadTexts: axPersistentStatsUrlHashPersistOKSec.setDescription('Number of requests that were sent to another server (a secondary server) because the primary server selected by URL hashing was unavailable.')
axPersistentStatsUrlHashPersistFail = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 15, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axPersistentStatsUrlHashPersistFail.setStatus('current')
if mibBuilder.loadTexts: axPersistentStatsUrlHashPersistFail.setDescription('Number of requests that could not be fulfilled using URL hashing.')
axPersistentStatsSIPPersistOK = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 15, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axPersistentStatsSIPPersistOK.setStatus('current')
if mibBuilder.loadTexts: axPersistentStatsSIPPersistOK.setDescription('Number of requests successfully sent to the same server as previous requests from the same client, based on source-IP persistence.')
axPersistentStatsSIPPersistFail = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 15, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axPersistentStatsSIPPersistFail.setStatus('current')
if mibBuilder.loadTexts: axPersistentStatsSIPPersistFail.setDescription('Number of requests that could not be fulfilled by the same server as previous requests from the same client, based on source-IP persistence.')
axPersistentStatsSSLSIDPersistOK = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 15, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axPersistentStatsSSLSIDPersistOK.setStatus('current')
if mibBuilder.loadTexts: axPersistentStatsSSLSIDPersistOK.setDescription('Total number of SSL session ID persistent success.')
axPersistentStatsSSLSIDPersistFail = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 15, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axPersistentStatsSSLSIDPersistFail.setStatus('current')
if mibBuilder.loadTexts: axPersistentStatsSSLSIDPersistFail.setDescription('Total number of SSL session ID persistent failure.')
axPersistentStatsCookiePersistOK = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 15, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axPersistentStatsCookiePersistOK.setStatus('current')
if mibBuilder.loadTexts: axPersistentStatsCookiePersistOK.setDescription('Total number of cookie persistent success.')
axPersistentStatsCookiePersistFail = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 15, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axPersistentStatsCookiePersistFail.setStatus('current')
if mibBuilder.loadTexts: axPersistentStatsCookiePersistFail.setDescription('Total number of cookie persistent failure.')
axPersistentStatsPersistCookieNotFound = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 15, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axPersistentStatsPersistCookieNotFound.setStatus('current')
if mibBuilder.loadTexts: axPersistentStatsPersistCookieNotFound.setDescription('Total number of cookie persistent failure in not-found cases.')
axPersistentStatTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 15, 11), )
if mibBuilder.loadTexts: axPersistentStatTable.setStatus('current')
if mibBuilder.loadTexts: axPersistentStatTable.setDescription('The Persistent STAT table.')
axPersistentStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 15, 11, 1), ).setIndexNames((0, "A10-AX-MIB", "axPersistentStatCpuIndex"))
if mibBuilder.loadTexts: axPersistentStatEntry.setStatus('current')
if mibBuilder.loadTexts: axPersistentStatEntry.setDescription('The Persistent STAT entry.')
axPersistentStatCpuIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 15, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axPersistentStatCpuIndex.setStatus('current')
if mibBuilder.loadTexts: axPersistentStatCpuIndex.setDescription('The cpu index of Persistent STAT table')
axPersistentStatUrlHashPersistOKPri = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 15, 11, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axPersistentStatUrlHashPersistOKPri.setStatus('current')
if mibBuilder.loadTexts: axPersistentStatUrlHashPersistOKPri.setDescription('Number of requests successfully sent to the primary server selected by URL hashing. The primary server is the one that was initially selected and then re-used based on the hash value.')
axPersistentStatUrlHashPersistOKSec = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 15, 11, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axPersistentStatUrlHashPersistOKSec.setStatus('current')
if mibBuilder.loadTexts: axPersistentStatUrlHashPersistOKSec.setDescription('Number of requests that were sent to another server (a secondary server) because the primary server selected by URL hashing was unavailable.')
axPersistentStatUrlHashPersistFail = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 15, 11, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axPersistentStatUrlHashPersistFail.setStatus('current')
if mibBuilder.loadTexts: axPersistentStatUrlHashPersistFail.setDescription('Number of requests that could not be fulfilled using URL hashing.')
axPersistentStatSIPPersistOK = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 15, 11, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axPersistentStatSIPPersistOK.setStatus('current')
if mibBuilder.loadTexts: axPersistentStatSIPPersistOK.setDescription('Number of requests successfully sent to the same server as previous requests from the same client, based on source-IP persistence.')
axPersistentStatSIPPersistFail = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 15, 11, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axPersistentStatSIPPersistFail.setStatus('current')
if mibBuilder.loadTexts: axPersistentStatSIPPersistFail.setDescription('Number of requests that could not be fulfilled by the same server as previous requests from the same client, based on source-IP persistence.')
axPersistentStatSSLSIDPersistOK = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 15, 11, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axPersistentStatSSLSIDPersistOK.setStatus('current')
if mibBuilder.loadTexts: axPersistentStatSSLSIDPersistOK.setDescription('Number of SSL session ID persistent success.')
axPersistentStatSSLSIDPersistFail = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 15, 11, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axPersistentStatSSLSIDPersistFail.setStatus('current')
if mibBuilder.loadTexts: axPersistentStatSSLSIDPersistFail.setDescription('Number of SSL session ID persistent failure.')
axPersistentStatCookiePersistOK = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 15, 11, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axPersistentStatCookiePersistOK.setStatus('current')
if mibBuilder.loadTexts: axPersistentStatCookiePersistOK.setDescription('Number of cookie persistent success.')
axPersistentStatCookiePersistFail = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 15, 11, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axPersistentStatCookiePersistFail.setStatus('current')
if mibBuilder.loadTexts: axPersistentStatCookiePersistFail.setDescription('Number of cookie persistent failure.')
axPersistentStatPersistCookieNotFound = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 15, 11, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axPersistentStatPersistCookieNotFound.setStatus('current')
if mibBuilder.loadTexts: axPersistentStatPersistCookieNotFound.setDescription('Number of cookie persistent failure in not-found cases.')
axSwitchStatsL2Forward = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatsL2Forward.setStatus('current')
if mibBuilder.loadTexts: axSwitchStatsL2Forward.setDescription('Number of packets that have been Layer 2 switched.')
axSwitchStatsL3IPForward = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatsL3IPForward.setStatus('current')
if mibBuilder.loadTexts: axSwitchStatsL3IPForward.setDescription('Number of packets that have been Layer 3 routed.')
axSwitchStatsIPv4NoRouteDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatsIPv4NoRouteDrop.setStatus('current')
if mibBuilder.loadTexts: axSwitchStatsIPv4NoRouteDrop.setDescription('Number of IPv4 packets that were dropped due to routing failures.')
axSwitchStatsL3IPv6Forward = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatsL3IPv6Forward.setStatus('current')
if mibBuilder.loadTexts: axSwitchStatsL3IPv6Forward.setDescription('Number of IPv6 packets that have been Layer 3 routed.')
axSwitchStatsIPv6NoRouteDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatsIPv6NoRouteDrop.setStatus('current')
if mibBuilder.loadTexts: axSwitchStatsIPv6NoRouteDrop.setDescription('Number of IPv6 packets that were dropped due to routing failures.')
axSwitchStatsL4Process = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatsL4Process.setStatus('current')
if mibBuilder.loadTexts: axSwitchStatsL4Process.setDescription('Number of packets that went to a VIP or NAT for processing.')
axSwitchStatsIncorrectLenDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatsIncorrectLenDrop.setStatus('current')
if mibBuilder.loadTexts: axSwitchStatsIncorrectLenDrop.setDescription('Number of packets dropped due to incorrect protocol length.A high value for this counter can indicate a packet length attack.')
axSwitchStatsProtoDownDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatsProtoDownDrop.setStatus('current')
if mibBuilder.loadTexts: axSwitchStatsProtoDownDrop.setDescription('Number of packets dropped because the corresponding protocol was disabled.')
axSwitchStatsUnknownProtoDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatsUnknownProtoDrop.setStatus('current')
if mibBuilder.loadTexts: axSwitchStatsUnknownProtoDrop.setDescription('Number of packets dropped because the protocol was unknown.')
axSwitchStatsTTLExceedDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatsTTLExceedDrop.setStatus('current')
if mibBuilder.loadTexts: axSwitchStatsTTLExceedDrop.setDescription('Number of packets dropped due to TTL expiration.')
axSwitchStatsLinkdownDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatsLinkdownDrop.setStatus('current')
if mibBuilder.loadTexts: axSwitchStatsLinkdownDrop.setDescription('Number of packets dropped because the outgoing link was down.')
axSwitchStatsSRCPortSuppress = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatsSRCPortSuppress.setStatus('current')
if mibBuilder.loadTexts: axSwitchStatsSRCPortSuppress.setDescription('Packet drops because of source port suppression.')
axSwitchStatsVLANFlood = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatsVLANFlood.setStatus('current')
if mibBuilder.loadTexts: axSwitchStatsVLANFlood.setDescription('Number of packets that have been broadcast to a VLAN.')
axSwitchStatsIPFragRcv = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatsIPFragRcv.setStatus('current')
if mibBuilder.loadTexts: axSwitchStatsIPFragRcv.setDescription('Number of IPv4 fragments that have been received.')
axSwitchStatsARPReqRcv = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatsARPReqRcv.setStatus('current')
if mibBuilder.loadTexts: axSwitchStatsARPReqRcv.setDescription('Number of ARP requests that have been received.')
axSwitchStatsARPRespRcv = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatsARPRespRcv.setStatus('current')
if mibBuilder.loadTexts: axSwitchStatsARPRespRcv.setDescription('Number of ARP responses that have been received.')
axSwitchStatsFwdKernel = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatsFwdKernel.setStatus('current')
if mibBuilder.loadTexts: axSwitchStatsFwdKernel.setDescription('Number of packets received by the kernel from data interfaces.')
axSwitchStatsIPTCPFragRcv = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatsIPTCPFragRcv.setStatus('current')
if mibBuilder.loadTexts: axSwitchStatsIPTCPFragRcv.setDescription('Number of IP TCP fragments received.')
axSwitchStatsIPFragOverlap = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatsIPFragOverlap.setStatus('current')
if mibBuilder.loadTexts: axSwitchStatsIPFragOverlap.setDescription('Number of overlapping fragments received.')
axSwitchStatsIPFragOverlapDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatsIPFragOverlapDrop.setStatus('current')
if mibBuilder.loadTexts: axSwitchStatsIPFragOverlapDrop.setDescription('Number of fragments dropped due to overload.')
axSwitchStatsIPFragReasmOk = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatsIPFragReasmOk.setStatus('current')
if mibBuilder.loadTexts: axSwitchStatsIPFragReasmOk.setDescription('Number of successfully reassembled IP fragments.')
axSwitchStatsIPFragReasmFail = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatsIPFragReasmFail.setStatus('current')
if mibBuilder.loadTexts: axSwitchStatsIPFragReasmFail.setDescription('Number of fragment reassembly failures.')
axSwitchStatsAnomLanAttackDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatsAnomLanAttackDrop.setStatus('current')
if mibBuilder.loadTexts: axSwitchStatsAnomLanAttackDrop.setDescription('Number of packets dropped by an IP land attack filter.This statistic and the other Anomaly statistics show how many packets were dropped by DDoS protection filters. For the AX device to drop these packets, the corresponding DDoS protection options must be enabled.')
axSwitchStatsAnomIPOptionDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatsAnomIPOptionDrop.setStatus('current')
if mibBuilder.loadTexts: axSwitchStatsAnomIPOptionDrop.setDescription('Number of packets dropped by an IP option filter.')
axSwitchStatsAnomPingDeathDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatsAnomPingDeathDrop.setStatus('current')
if mibBuilder.loadTexts: axSwitchStatsAnomPingDeathDrop.setDescription('Number of packets dropped by a ping-of-death filter.')
axSwitchStatsAnomAllFragDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatsAnomAllFragDrop.setStatus('current')
if mibBuilder.loadTexts: axSwitchStatsAnomAllFragDrop.setDescription('Number of packets dropped by a frag filter.')
axSwitchStatsAnomTCPNoFragDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatsAnomTCPNoFragDrop.setStatus('current')
if mibBuilder.loadTexts: axSwitchStatsAnomTCPNoFragDrop.setDescription('Number of packets dropped by a tcp-no-flag filter.')
axSwitchStatsAnomSYNFragDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatsAnomSYNFragDrop.setStatus('current')
if mibBuilder.loadTexts: axSwitchStatsAnomSYNFragDrop.setDescription('Number of packets dropped by a tcp-syn-frag filter.')
axSwitchStatsAnomTCPSynFinDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatsAnomTCPSynFinDrop.setStatus('current')
if mibBuilder.loadTexts: axSwitchStatsAnomTCPSynFinDrop.setDescription('Number of packets dropped by a tcp-syn-fin filter.')
axSwitchStatsAnomAnyDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatsAnomAnyDrop.setStatus('current')
if mibBuilder.loadTexts: axSwitchStatsAnomAnyDrop.setDescription('Number of packets dropped by any type of hardware-based DDoS protection filter.')
axSwitchStatTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31), )
if mibBuilder.loadTexts: axSwitchStatTable.setStatus('current')
if mibBuilder.loadTexts: axSwitchStatTable.setDescription('The switch status table.')
axSwitchStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1), ).setIndexNames((0, "A10-AX-MIB", "axSwitchStatCpuIndex"))
if mibBuilder.loadTexts: axSwitchStatEntry.setStatus('current')
if mibBuilder.loadTexts: axSwitchStatEntry.setDescription('The Switch status entry.')
axSwitchStatCpuIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatCpuIndex.setStatus('current')
if mibBuilder.loadTexts: axSwitchStatCpuIndex.setDescription('The cpu index of Switch STAT table')
axSwitchStatL2Forward = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatL2Forward.setStatus('current')
if mibBuilder.loadTexts: axSwitchStatL2Forward.setDescription('Number of packets that have been Layer 2 switched.')
axSwitchStatL3IPForward = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatL3IPForward.setStatus('current')
if mibBuilder.loadTexts: axSwitchStatL3IPForward.setDescription('Number of packets that have been Layer 3 routed.')
axSwitchStatIPv4NoRouteDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatIPv4NoRouteDrop.setStatus('current')
if mibBuilder.loadTexts: axSwitchStatIPv4NoRouteDrop.setDescription('Number of IPv4 packets that were dropped due to routing failures.')
axSwitchStatL3IPv6Forward = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatL3IPv6Forward.setStatus('current')
if mibBuilder.loadTexts: axSwitchStatL3IPv6Forward.setDescription('Number of IPv6 packets that have been Layer 3 routed.')
axSwitchStatIPv6NoRouteDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatIPv6NoRouteDrop.setStatus('current')
if mibBuilder.loadTexts: axSwitchStatIPv6NoRouteDrop.setDescription('Number of IPv6 packets that were dropped due to routing failures.')
axSwitchStatL4Process = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatL4Process.setStatus('current')
if mibBuilder.loadTexts: axSwitchStatL4Process.setDescription('Number of packets that went to a VIP or NAT for processing.')
axSwitchStatIncorrectLenDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatIncorrectLenDrop.setStatus('current')
if mibBuilder.loadTexts: axSwitchStatIncorrectLenDrop.setDescription('Number of packets dropped due to incorrect protocol length.A high value for this counter can indicate a packet length attack.')
axSwitchStatProtoDownDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatProtoDownDrop.setStatus('current')
if mibBuilder.loadTexts: axSwitchStatProtoDownDrop.setDescription('Number of packets dropped because the corresponding protocol was disabled.')
axSwitchStatUnknownProtoDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatUnknownProtoDrop.setStatus('current')
if mibBuilder.loadTexts: axSwitchStatUnknownProtoDrop.setDescription('Number of packets dropped because the protocol was unknown.')
axSwitchStatTTLExceedDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatTTLExceedDrop.setStatus('current')
if mibBuilder.loadTexts: axSwitchStatTTLExceedDrop.setDescription('Number of packets dropped due to TTL expiration.')
axSwitchStatLinkdownDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatLinkdownDrop.setStatus('current')
if mibBuilder.loadTexts: axSwitchStatLinkdownDrop.setDescription('Number of packets dropped because the outgoing link was down.')
axSwitchStatSRCPortSuppress = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatSRCPortSuppress.setStatus('current')
if mibBuilder.loadTexts: axSwitchStatSRCPortSuppress.setDescription('Packet drops because of source port suppression.')
axSwitchStatVLANFlood = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatVLANFlood.setStatus('current')
if mibBuilder.loadTexts: axSwitchStatVLANFlood.setDescription('Number of packets that have been broadcast to a VLAN.')
axSwitchStatIPFragRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatIPFragRcv.setStatus('current')
if mibBuilder.loadTexts: axSwitchStatIPFragRcv.setDescription('Number of IPv4 fragments that have been received.')
axSwitchStatARPReqRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatARPReqRcv.setStatus('current')
if mibBuilder.loadTexts: axSwitchStatARPReqRcv.setDescription('Number of ARP requests that have been received.')
axSwitchStatARPRespRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatARPRespRcv.setStatus('current')
if mibBuilder.loadTexts: axSwitchStatARPRespRcv.setDescription('Number of ARP responses that have been received.')
axSwitchStatFwdKernel = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatFwdKernel.setStatus('current')
if mibBuilder.loadTexts: axSwitchStatFwdKernel.setDescription('Number of packets received by the kernel from data interfaces.')
axSwitchStatIPTCPFragRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatIPTCPFragRcv.setStatus('current')
if mibBuilder.loadTexts: axSwitchStatIPTCPFragRcv.setDescription('Number of IP TCP fragments received.')
axSwitchStatIPFragOverlap = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatIPFragOverlap.setStatus('current')
if mibBuilder.loadTexts: axSwitchStatIPFragOverlap.setDescription('Number of overlapping fragments received.')
axSwitchStatIPFragOverlapDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatIPFragOverlapDrop.setStatus('current')
if mibBuilder.loadTexts: axSwitchStatIPFragOverlapDrop.setDescription('Number of fragments dropped due to overload.')
axSwitchStatIPFragReasmOk = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatIPFragReasmOk.setStatus('current')
if mibBuilder.loadTexts: axSwitchStatIPFragReasmOk.setDescription('Number of successfully reassembled IP fragments.')
axSwitchStatIPFragReasmFail = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatIPFragReasmFail.setStatus('current')
if mibBuilder.loadTexts: axSwitchStatIPFragReasmFail.setDescription('Number of fragment reassembly failures.')
axSwitchStatAnomLanAttackDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatAnomLanAttackDrop.setStatus('current')
if mibBuilder.loadTexts: axSwitchStatAnomLanAttackDrop.setDescription('Number of packets dropped by an IP land attack filter.This statistic and the other Anomaly statistics show how many packets were dropped by DDoS protection filters. For the AX device to drop these packets, the corresponding DDoS protection options must be enabled.')
axSwitchStatAnomIPOptionDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatAnomIPOptionDrop.setStatus('current')
if mibBuilder.loadTexts: axSwitchStatAnomIPOptionDrop.setDescription('Number of packets dropped by an IP option filter.')
axSwitchStatAnomPingDeathDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatAnomPingDeathDrop.setStatus('current')
if mibBuilder.loadTexts: axSwitchStatAnomPingDeathDrop.setDescription('Number of packets dropped by a ping-of-death filter.')
axSwitchStatAnomAllFragDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatAnomAllFragDrop.setStatus('current')
if mibBuilder.loadTexts: axSwitchStatAnomAllFragDrop.setDescription('Number of packets dropped by a frag filter.')
axSwitchStatAnomTCPNoFragDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatAnomTCPNoFragDrop.setStatus('current')
if mibBuilder.loadTexts: axSwitchStatAnomTCPNoFragDrop.setDescription('Number of packets dropped by a tcp-no-flag filter.')
axSwitchStatAnomSYNFragDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatAnomSYNFragDrop.setStatus('current')
if mibBuilder.loadTexts: axSwitchStatAnomSYNFragDrop.setDescription('Number of packets dropped by a tcp-syn-frag filter.')
axSwitchStatAnomTCPSynFinDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatAnomTCPSynFinDrop.setStatus('current')
if mibBuilder.loadTexts: axSwitchStatAnomTCPSynFinDrop.setDescription('Number of packets dropped by a tcp-syn-fin filter.')
axSwitchStatAnomAnyDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatAnomAnyDrop.setStatus('current')
if mibBuilder.loadTexts: axSwitchStatAnomAnyDrop.setDescription('Number of packets dropped by any type of hardware-based DDoS protection filter.')
axHAConfigEnabled = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 17, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHAConfigEnabled.setStatus('current')
if mibBuilder.loadTexts: axHAConfigEnabled.setDescription('The HA configuration enabled flag.')
axHAID = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 17, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHAID.setStatus('current')
if mibBuilder.loadTexts: axHAID.setDescription('Local configured HA group ID.')
axHASetID = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 17, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHASetID.setStatus('current')
if mibBuilder.loadTexts: axHASetID.setDescription('Local configured HA group set-id')
axHAPreemptStatusEnabled = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 17, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHAPreemptStatusEnabled.setStatus('current')
if mibBuilder.loadTexts: axHAPreemptStatusEnabled.setDescription('The HA preempt enabled flag')
axHATimeoutInterval = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 17, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHATimeoutInterval.setStatus('current')
if mibBuilder.loadTexts: axHATimeoutInterval.setDescription('The HA time interval.')
axHATimeoutRetry = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 17, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHATimeoutRetry.setStatus('current')
if mibBuilder.loadTexts: axHATimeoutRetry.setDescription('The HA retries when time out.')
axHAARPRetry = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 17, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHAARPRetry.setStatus('current')
if mibBuilder.loadTexts: axHAARPRetry.setDescription('The ARP retries.')
axHAGroupCount = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 17, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHAGroupCount.setStatus('current')
if mibBuilder.loadTexts: axHAGroupCount.setDescription('The number of valid HA groups.')
axHAGroupStatusTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 17, 2, 2), )
if mibBuilder.loadTexts: axHAGroupStatusTable.setStatus('current')
if mibBuilder.loadTexts: axHAGroupStatusTable.setDescription('A table contains the HA group status information.')
axHAGroupStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 17, 2, 2, 1), ).setIndexNames((0, "A10-AX-MIB", "axHAGroupID"))
if mibBuilder.loadTexts: axHAGroupStatusEntry.setStatus('current')
if mibBuilder.loadTexts: axHAGroupStatusEntry.setDescription('Columns in the axHAGroupStatus Table')
axHAGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 17, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHAGroupID.setStatus('current')
if mibBuilder.loadTexts: axHAGroupID.setDescription('The HA group ID.')
axHAGroupLocalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 17, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 9))).clone(namedValues=NamedValues(("standby", 0), ("active", 1), ("notConfigured", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHAGroupLocalStatus.setStatus('current')
if mibBuilder.loadTexts: axHAGroupLocalStatus.setDescription('The local status of this HA group.')
axHAGroupLocalPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 17, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHAGroupLocalPriority.setStatus('current')
if mibBuilder.loadTexts: axHAGroupLocalPriority.setDescription('The local priority of this HA group.')
axHAGroupPeerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 17, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 9))).clone(namedValues=NamedValues(("standby", 0), ("active", 1), ("notConfigured", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHAGroupPeerStatus.setStatus('current')
if mibBuilder.loadTexts: axHAGroupPeerStatus.setDescription('The peer status of this HA group.')
axHAGroupPeerPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 17, 2, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHAGroupPeerPriority.setStatus('current')
if mibBuilder.loadTexts: axHAGroupPeerPriority.setDescription('The peer priority of this HA group.')
axHAFloatingIPCount = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 17, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHAFloatingIPCount.setStatus('current')
if mibBuilder.loadTexts: axHAFloatingIPCount.setDescription('The number of HA floating-IP entries.')
axHAFloatingIPTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 17, 3, 2), )
if mibBuilder.loadTexts: axHAFloatingIPTable.setStatus('current')
if mibBuilder.loadTexts: axHAFloatingIPTable.setDescription('A table contains the HA floating-IP information.')
axHAFloatingIPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 17, 3, 2, 1), ).setIndexNames((0, "A10-AX-MIB", "axHAFloatingIPIndex"))
if mibBuilder.loadTexts: axHAFloatingIPEntry.setStatus('current')
if mibBuilder.loadTexts: axHAFloatingIPEntry.setDescription('The index column in the axHAFloatingIP Table')
axHAFloatingIPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 17, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHAFloatingIPIndex.setStatus('current')
if mibBuilder.loadTexts: axHAFloatingIPIndex.setDescription('The index column.')
axHAFloatingIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 17, 3, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHAFloatingIPAddress.setStatus('current')
if mibBuilder.loadTexts: axHAFloatingIPAddress.setDescription('HA floating-IP address (either IPv4 or IPv6).')
axHAFloatingIPHaGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 17, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHAFloatingIPHaGroupID.setStatus('current')
if mibBuilder.loadTexts: axHAFloatingIPHaGroupID.setDescription('The HA group ID for the HA floating-IP entry.')
axIpNatStatsGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 1))
axIpNatStatsIntfInsideOutside = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 2))
axIpNatStatsDynamicMapping = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 3))
axIpNatPoolStats = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 100))
axIpNatLoggingStats = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 101))
axIpNatLsnStats = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4))
axIpNatNat64Stats = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 5))
axIpNatDsliteStats = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 6))
axIpNatStatsDynamicMappingAclName = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 19))
axFixedNatStats = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 120))
axIpNatStatsGlobalHits = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 1, 1), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatStatsGlobalHits.setStatus('current')
if mibBuilder.loadTexts: axIpNatStatsGlobalHits.setDescription('Total hits in the IP source NAT.')
axIpNatStatsGlobalMisses = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 1, 2), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatStatsGlobalMisses.setStatus('current')
if mibBuilder.loadTexts: axIpNatStatsGlobalMisses.setDescription('Total misses in the IP source NAT')
axIpNatStatsIntfInsideOutsideTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 2, 1), )
if mibBuilder.loadTexts: axIpNatStatsIntfInsideOutsideTable.setStatus('current')
if mibBuilder.loadTexts: axIpNatStatsIntfInsideOutsideTable.setDescription('A table has information of IP NAT interface inside/outside')
axIpNatStatsIntfInsideOutsideEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 2, 1, 1), ).setIndexNames((0, "A10-AX-MIB", "axIpNatStatsInsideOutsideIntfIndex"))
if mibBuilder.loadTexts: axIpNatStatsIntfInsideOutsideEntry.setStatus('current')
if mibBuilder.loadTexts: axIpNatStatsIntfInsideOutsideEntry.setDescription('Columns in the axIpNatStatsIntfInsideOutside Table')
axIpNatStatsInsideOutsideIntfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatStatsInsideOutsideIntfIndex.setStatus('current')
if mibBuilder.loadTexts: axIpNatStatsInsideOutsideIntfIndex.setDescription('The index of the AxIpNatStatsIntfInsideOutside table.')
axIpNatStatsInsideOutsideIntfName = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatStatsInsideOutsideIntfName.setStatus('current')
if mibBuilder.loadTexts: axIpNatStatsInsideOutsideIntfName.setDescription('The interface name, such as ethernet1, ethernet2, ve3, ...')
axIpNatStatsInsideOutsideIntfDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("inside", 0), ("outside", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatStatsInsideOutsideIntfDirection.setStatus('current')
if mibBuilder.loadTexts: axIpNatStatsInsideOutsideIntfDirection.setDescription('The interface bind direction, inside or outside.')
axIpNatStatsDynamicMappingTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 3, 1), )
if mibBuilder.loadTexts: axIpNatStatsDynamicMappingTable.setStatus('current')
if mibBuilder.loadTexts: axIpNatStatsDynamicMappingTable.setDescription('A table has information of IP NAT interface inside/outside')
axIpNatStatsDynamicMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 3, 1, 1), ).setIndexNames((0, "A10-AX-MIB", "axIpNatStatsDynamicMappingAccessListID"))
if mibBuilder.loadTexts: axIpNatStatsDynamicMappingEntry.setStatus('current')
if mibBuilder.loadTexts: axIpNatStatsDynamicMappingEntry.setDescription('Columns in the axIpNatStatsDynamicMapping Table')
axIpNatStatsDynamicMappingAccessListID = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatStatsDynamicMappingAccessListID.setStatus('current')
if mibBuilder.loadTexts: axIpNatStatsDynamicMappingAccessListID.setDescription('The access list id.')
axIpNatStatsDynamicMappingPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatStatsDynamicMappingPoolName.setStatus('current')
if mibBuilder.loadTexts: axIpNatStatsDynamicMappingPoolName.setDescription('The IP source NAT pool name')
axIpNatStatsDynamicMappingStartAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 3, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatStatsDynamicMappingStartAddress.setStatus('current')
if mibBuilder.loadTexts: axIpNatStatsDynamicMappingStartAddress.setDescription('The start adddress of the pool')
axIpNatStatsDynamicMappingEndAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 3, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatStatsDynamicMappingEndAddress.setStatus('current')
if mibBuilder.loadTexts: axIpNatStatsDynamicMappingEndAddress.setDescription('The end address of the pool')
axIpNatStatsDynamicMappingTotalAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatStatsDynamicMappingTotalAddresses.setStatus('current')
if mibBuilder.loadTexts: axIpNatStatsDynamicMappingTotalAddresses.setDescription('The total addresses in the pool.')
axIpNatStatsDynamicMappingAllocAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatStatsDynamicMappingAllocAddresses.setStatus('current')
if mibBuilder.loadTexts: axIpNatStatsDynamicMappingAllocAddresses.setDescription('The total allocated addresses in the pool')
axIpNatStatsDynamicMappingMissAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 3, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatStatsDynamicMappingMissAddresses.setStatus('current')
if mibBuilder.loadTexts: axIpNatStatsDynamicMappingMissAddresses.setDescription('The total misses in the pool')
axIpNatStatsDynamicMappingStartAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 3, 1, 1, 8), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatStatsDynamicMappingStartAddressType.setStatus('current')
if mibBuilder.loadTexts: axIpNatStatsDynamicMappingStartAddressType.setDescription('The type of axIpNatStatsDynamicMappingStartAddress:\n            unknown(0), ipv4(1), ipv6(2)...')
axIpNatStatsDynamicMappingEndAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 3, 1, 1, 9), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatStatsDynamicMappingEndAddressType.setStatus('current')
if mibBuilder.loadTexts: axIpNatStatsDynamicMappingEndAddressType.setDescription('The type of axIpNatStatsDynamicMappingEndAddress:\n            unknown(0), ipv4(1), ipv6(2)...')
axIpNatPoolStatsTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 100, 1), )
if mibBuilder.loadTexts: axIpNatPoolStatsTable.setStatus('current')
if mibBuilder.loadTexts: axIpNatPoolStatsTable.setDescription('A table has information of IP NAT pool statistics.')
axIpNatPoolStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 100, 1, 1), ).setIndexNames((0, "A10-AX-MIB", "axIpNatPoolName"))
if mibBuilder.loadTexts: axIpNatPoolStatsEntry.setStatus('current')
if mibBuilder.loadTexts: axIpNatPoolStatsEntry.setDescription('Columns in the axIpNatPoolStats Table')
axIpNatPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 100, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatPoolName.setStatus('current')
if mibBuilder.loadTexts: axIpNatPoolName.setDescription('The IP NAT pool name')
axIpNatPoolStartAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 100, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatPoolStartAddress.setStatus('current')
if mibBuilder.loadTexts: axIpNatPoolStartAddress.setDescription('The IP NAT pool start address (IPv4 or IPv6)')
axIpNatPoolEndAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 100, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatPoolEndAddress.setStatus('current')
if mibBuilder.loadTexts: axIpNatPoolEndAddress.setDescription('The IP NAT pool end address (IPv4 or IPv6)')
axIpNatPoolPortUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 100, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatPoolPortUsage.setStatus('current')
if mibBuilder.loadTexts: axIpNatPoolPortUsage.setDescription('The total port usage in the pool.')
axIpNatPoolTotalUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 100, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatPoolTotalUsed.setStatus('current')
if mibBuilder.loadTexts: axIpNatPoolTotalUsed.setDescription('The total of used addresses in the pool.')
axIpNatPoolTotalFree = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 100, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatPoolTotalFree.setStatus('current')
if mibBuilder.loadTexts: axIpNatPoolTotalFree.setDescription('The total of free addresses in the pool')
axIpNatPoolFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 100, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatPoolFailed.setStatus('current')
if mibBuilder.loadTexts: axIpNatPoolFailed.setDescription('The total misses in the pool')
axSessionStatsGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 19, 1))
axSessionGlobalStatTCPEstablished = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 19, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSessionGlobalStatTCPEstablished.setStatus('current')
if mibBuilder.loadTexts: axSessionGlobalStatTCPEstablished.setDescription('The count of TCP established.')
axSessionGlobalStatTCPHalfOpen = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 19, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSessionGlobalStatTCPHalfOpen.setStatus('current')
if mibBuilder.loadTexts: axSessionGlobalStatTCPHalfOpen.setDescription('The count of TCP half open.')
axSessionGlobalStatUDP = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 19, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSessionGlobalStatUDP.setStatus('current')
if mibBuilder.loadTexts: axSessionGlobalStatUDP.setDescription('The count of UDP connections.')
axSessionGlobalStatNonTcpUdpIPSession = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 19, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSessionGlobalStatNonTcpUdpIPSession.setStatus('current')
if mibBuilder.loadTexts: axSessionGlobalStatNonTcpUdpIPSession.setDescription('The count of non TCP/UDP IP sessions.')
axSessionGlobalStatOther = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 19, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSessionGlobalStatOther.setStatus('current')
if mibBuilder.loadTexts: axSessionGlobalStatOther.setDescription('The count of others.')
axSessionGlobalStatReverseNATTCP = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 19, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSessionGlobalStatReverseNATTCP.setStatus('current')
if mibBuilder.loadTexts: axSessionGlobalStatReverseNATTCP.setDescription('The count of reverse NAT TCP.')
axSessionGlobalStatReverseNATUDP = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 19, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSessionGlobalStatReverseNATUDP.setStatus('current')
if mibBuilder.loadTexts: axSessionGlobalStatReverseNATUDP.setDescription('The count of reverse NAT UDP.')
axSessionGlobalStatFreeBufferCount = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 19, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSessionGlobalStatFreeBufferCount.setStatus('current')
if mibBuilder.loadTexts: axSessionGlobalStatFreeBufferCount.setDescription('The count of free buffer.')
axSessionGlobalStatFreeCurrentConns = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 19, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSessionGlobalStatFreeCurrentConns.setStatus('current')
if mibBuilder.loadTexts: axSessionGlobalStatFreeCurrentConns.setDescription('The count of free current connections.')
axSessionGlobalStatConnCount = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 19, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSessionGlobalStatConnCount.setStatus('current')
if mibBuilder.loadTexts: axSessionGlobalStatConnCount.setDescription('The count of current connections.')
axSessionGlobalStatConnFree = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 19, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSessionGlobalStatConnFree.setStatus('current')
if mibBuilder.loadTexts: axSessionGlobalStatConnFree.setDescription('The count of freed connections.')
axSessionGlobalStatTCPSynHalfOpen = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 19, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSessionGlobalStatTCPSynHalfOpen.setStatus('current')
if mibBuilder.loadTexts: axSessionGlobalStatTCPSynHalfOpen.setDescription('The count of TCP SYN half open.')
axSessionGlobalStatConnSMPAllocated = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 19, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSessionGlobalStatConnSMPAllocated.setStatus('current')
if mibBuilder.loadTexts: axSessionGlobalStatConnSMPAllocated.setDescription('The count of allocated SMP connections.')
axSessionGlobalStatConnSMPFree = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 19, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSessionGlobalStatConnSMPFree.setStatus('current')
if mibBuilder.loadTexts: axSessionGlobalStatConnSMPFree.setDescription('The count of free SMP connections.')
axGslbZones = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 1))
axGslbSites = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 2))
axGslbServiceIPs = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 3))
axGslbServiceIpPorts = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 4))
axGslbSiteSlbDevices = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 5))
axGslbGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 6))
axGslbZoneCount = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbZoneCount.setStatus('current')
if mibBuilder.loadTexts: axGslbZoneCount.setDescription('The number of axGslbZoneStatsTable entries in the table.')
axGslbZoneStatsTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 1, 2), )
if mibBuilder.loadTexts: axGslbZoneStatsTable.setStatus('current')
if mibBuilder.loadTexts: axGslbZoneStatsTable.setDescription('A table has information of GSLB zones')
axGslbZoneStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 1, 2, 1), ).setIndexNames((0, "A10-AX-MIB", "axGslbZoneName"))
if mibBuilder.loadTexts: axGslbZoneStatsEntry.setStatus('current')
if mibBuilder.loadTexts: axGslbZoneStatsEntry.setDescription('Columns in the axGslbStatsZones Table')
axGslbZoneName = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 1, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbZoneName.setStatus('current')
if mibBuilder.loadTexts: axGslbZoneName.setDescription('The name of the zone entry.')
axGslbZoneAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbZoneAdminState.setStatus('current')
if mibBuilder.loadTexts: axGslbZoneAdminState.setDescription('The Zone administrative state.')
axGslbZoneOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbZoneOperState.setStatus('current')
if mibBuilder.loadTexts: axGslbZoneOperState.setDescription('The Zone operational state.')
axGslbZoneReceivedQueries = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 1, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbZoneReceivedQueries.setStatus('current')
if mibBuilder.loadTexts: axGslbZoneReceivedQueries.setDescription('The number of received queries on the zone entry.')
axGslbZoneSentResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 1, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbZoneSentResponses.setStatus('current')
if mibBuilder.loadTexts: axGslbZoneSentResponses.setDescription('The number of sent response on the zone entry.')
axGslbZoneProxyModeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 1, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbZoneProxyModeCount.setStatus('current')
if mibBuilder.loadTexts: axGslbZoneProxyModeCount.setDescription('The count in proxy mode.')
axGslbZoneCacheModeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 1, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbZoneCacheModeCount.setStatus('current')
if mibBuilder.loadTexts: axGslbZoneCacheModeCount.setDescription('The count in cache mode.')
axGslbZoneServerModeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 1, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbZoneServerModeCount.setStatus('current')
if mibBuilder.loadTexts: axGslbZoneServerModeCount.setDescription('The count in server mode.')
axGslbZoneStickyModeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 1, 2, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbZoneStickyModeCount.setStatus('current')
if mibBuilder.loadTexts: axGslbZoneStickyModeCount.setDescription('The count in sticky mode.')
axGslbZoneBackupModeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 1, 2, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbZoneBackupModeCount.setStatus('current')
if mibBuilder.loadTexts: axGslbZoneBackupModeCount.setDescription('The count in backup mode.')
axGslbZoneServiceStatsTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 1, 3), )
if mibBuilder.loadTexts: axGslbZoneServiceStatsTable.setStatus('current')
if mibBuilder.loadTexts: axGslbZoneServiceStatsTable.setDescription('A table has information of GSLB zone services')
axGslbZoneServiceStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 1, 3, 1), ).setIndexNames((0, "A10-AX-MIB", "axGslbZoneServiceFqdn"))
if mibBuilder.loadTexts: axGslbZoneServiceStatsEntry.setStatus('current')
if mibBuilder.loadTexts: axGslbZoneServiceStatsEntry.setDescription('Columns in the axGslbZoneServiceStats Table')
axGslbZoneServiceFqdn = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 1, 3, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbZoneServiceFqdn.setStatus('current')
if mibBuilder.loadTexts: axGslbZoneServiceFqdn.setDescription('The Fqdn of Zone Service Entry.')
axGslbZoneNameInServiceEntry = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 1, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbZoneNameInServiceEntry.setStatus('current')
if mibBuilder.loadTexts: axGslbZoneNameInServiceEntry.setDescription('The name of the zone in service entry.')
axGslbZoneServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 1, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbZoneServiceName.setStatus('current')
if mibBuilder.loadTexts: axGslbZoneServiceName.setDescription('The service name of the zone service entry.')
axGslbZoneServicePortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 1, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbZoneServicePortNum.setStatus('current')
if mibBuilder.loadTexts: axGslbZoneServicePortNum.setDescription('The port number of the zone service entry.')
axGslbZoneServiceAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbZoneServiceAdminState.setStatus('current')
if mibBuilder.loadTexts: axGslbZoneServiceAdminState.setDescription('The Zone Service administrative state.')
axGslbZoneServiceOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbZoneServiceOperState.setStatus('current')
if mibBuilder.loadTexts: axGslbZoneServiceOperState.setDescription('The Zone Service operational state.')
axGslbZoneServiceReceivedQueries = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 1, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbZoneServiceReceivedQueries.setStatus('current')
if mibBuilder.loadTexts: axGslbZoneServiceReceivedQueries.setDescription('The number of received queries on the zone service entry.')
axGslbZoneServiceSentResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 1, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbZoneServiceSentResponses.setStatus('current')
if mibBuilder.loadTexts: axGslbZoneServiceSentResponses.setDescription('The number of sent response on the zone service entry.')
axGslbZoneServiceProxyModeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 1, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbZoneServiceProxyModeCount.setStatus('current')
if mibBuilder.loadTexts: axGslbZoneServiceProxyModeCount.setDescription('The count in proxy mode.')
axGslbZoneServiceCacheModeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 1, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbZoneServiceCacheModeCount.setStatus('current')
if mibBuilder.loadTexts: axGslbZoneServiceCacheModeCount.setDescription('The count in cache mode.')
axGslbZoneServiceServerModeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 1, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbZoneServiceServerModeCount.setStatus('current')
if mibBuilder.loadTexts: axGslbZoneServiceServerModeCount.setDescription('The count in server mode.')
axGslbZoneServiceStickyModeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 1, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbZoneServiceStickyModeCount.setStatus('current')
if mibBuilder.loadTexts: axGslbZoneServiceStickyModeCount.setDescription('The count in sticky mode.')
axGslbZoneServiceBackupModeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 1, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbZoneServiceBackupModeCount.setStatus('current')
if mibBuilder.loadTexts: axGslbZoneServiceBackupModeCount.setDescription('The count in backup mode.')
axGslbSiteCount = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbSiteCount.setStatus('current')
if mibBuilder.loadTexts: axGslbSiteCount.setDescription('The total number of sites.')
axGslbSiteStatsTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 2, 2), )
if mibBuilder.loadTexts: axGslbSiteStatsTable.setStatus('current')
if mibBuilder.loadTexts: axGslbSiteStatsTable.setDescription('A table has information of GSLB sites')
axGslbSiteStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 2, 2, 1), ).setIndexNames((0, "A10-AX-MIB", "axGslbSiteName"))
if mibBuilder.loadTexts: axGslbSiteStatsEntry.setStatus('current')
if mibBuilder.loadTexts: axGslbSiteStatsEntry.setDescription('Columns in the axGslbSiteStats Table')
axGslbSiteName = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 2, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbSiteName.setStatus('current')
if mibBuilder.loadTexts: axGslbSiteName.setDescription('The name of the site entry.')
axGslbSiteAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbSiteAdminState.setStatus('current')
if mibBuilder.loadTexts: axGslbSiteAdminState.setDescription('The site administrative state.')
axGslbSiteOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbSiteOperState.setStatus('current')
if mibBuilder.loadTexts: axGslbSiteOperState.setDescription('The site operational state.')
axGslbSiteHitCount = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 2, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbSiteHitCount.setStatus('current')
if mibBuilder.loadTexts: axGslbSiteHitCount.setDescription('The hit count of the site.')
axGslbSiteDeviceStatsTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 2, 3), )
if mibBuilder.loadTexts: axGslbSiteDeviceStatsTable.setStatus('current')
if mibBuilder.loadTexts: axGslbSiteDeviceStatsTable.setDescription('A table has information of GSLB site devices')
axGslbSiteDeviceStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 2, 3, 1), ).setIndexNames((0, "A10-AX-MIB", "axGslbSiteNameInDeviceEntry"), (0, "A10-AX-MIB", "axGslbSiteSlbDeviceIpAddr"), (0, "A10-AX-MIB", "axGslbSiteServiceIpAddr"), (0, "A10-AX-MIB", "axGslbSiteServiceIpPortNum"))
if mibBuilder.loadTexts: axGslbSiteDeviceStatsEntry.setStatus('current')
if mibBuilder.loadTexts: axGslbSiteDeviceStatsEntry.setDescription('Columns in the axGslbSiteDevicesStats Table')
axGslbSiteNameInDeviceEntry = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 2, 3, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbSiteNameInDeviceEntry.setStatus('current')
if mibBuilder.loadTexts: axGslbSiteNameInDeviceEntry.setDescription('The name of the site.')
axGslbSiteSlbDeviceIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 2, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbSiteSlbDeviceIpAddr.setStatus('current')
if mibBuilder.loadTexts: axGslbSiteSlbDeviceIpAddr.setDescription('The IP address of the SLB device in the site entry.')
axGslbSiteServiceIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 2, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbSiteServiceIpAddr.setStatus('current')
if mibBuilder.loadTexts: axGslbSiteServiceIpAddr.setDescription('The IP address of the service-ip in the site device entry.')
axGslbSiteServiceIpPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 2, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbSiteServiceIpPortNum.setStatus('current')
if mibBuilder.loadTexts: axGslbSiteServiceIpPortNum.setDescription('The port number of the service-ip in the site device entry.')
axGslbSiteSlbDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 2, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbSiteSlbDeviceName.setStatus('current')
if mibBuilder.loadTexts: axGslbSiteSlbDeviceName.setDescription('The SLB device name in the site device entry.')
axGslbSiteServiceIpName = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 2, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbSiteServiceIpName.setStatus('current')
if mibBuilder.loadTexts: axGslbSiteServiceIpName.setDescription('The service-ip name in the site device entry.')
axGslbSiteServiceIpAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbSiteServiceIpAdminState.setStatus('current')
if mibBuilder.loadTexts: axGslbSiteServiceIpAdminState.setDescription('The service-ip administrative state.')
axGslbSiteServiceIpOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 2, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbSiteServiceIpOperState.setStatus('current')
if mibBuilder.loadTexts: axGslbSiteServiceIpOperState.setDescription('The service-ip operational state.')
axGslbSiteServiceIpHitCount = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 2, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbSiteServiceIpHitCount.setStatus('current')
if mibBuilder.loadTexts: axGslbSiteServiceIpHitCount.setDescription('The hit count of the service-ip name in the site device entry.')
axGslbServiceIPCount = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbServiceIPCount.setStatus('current')
if mibBuilder.loadTexts: axGslbServiceIPCount.setDescription('The number of axGslbServiceIPTable entries in the table.')
axGslbServiceIPTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 3, 2), )
if mibBuilder.loadTexts: axGslbServiceIPTable.setStatus('current')
if mibBuilder.loadTexts: axGslbServiceIPTable.setDescription('A table has information of GSLB service IPs')
axGslbServiceIPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 3, 2, 1), ).setIndexNames((0, "A10-AX-MIB", "axGslbServiceIpAddr"))
if mibBuilder.loadTexts: axGslbServiceIPEntry.setStatus('current')
if mibBuilder.loadTexts: axGslbServiceIPEntry.setDescription('Columns in the axGslbServiceIPs Table')
axGslbServiceIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 3, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbServiceIpAddr.setStatus('current')
if mibBuilder.loadTexts: axGslbServiceIpAddr.setDescription('The IP address of the service-ip entry.')
axGslbServiceIpName = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 3, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbServiceIpName.setStatus('current')
if mibBuilder.loadTexts: axGslbServiceIpName.setDescription('The name of the service-ip entry.')
axGslbServiceIpSiteName = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 3, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbServiceIpSiteName.setStatus('current')
if mibBuilder.loadTexts: axGslbServiceIpSiteName.setDescription('The site name has the service-ip entry.')
axGslbServiceIpAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbServiceIpAdminState.setStatus('current')
if mibBuilder.loadTexts: axGslbServiceIpAdminState.setDescription('The service-ip administrative state.')
axGslbServiceIpOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbServiceIpOperState.setStatus('current')
if mibBuilder.loadTexts: axGslbServiceIpOperState.setDescription('The service-ip operational state.')
axGslbServiceIpIsVirtualServerFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("isVirtualServer", 1), ("other", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbServiceIpIsVirtualServerFlag.setStatus('current')
if mibBuilder.loadTexts: axGslbServiceIpIsVirtualServerFlag.setDescription('The flag of virtual server.')
axGslbServiceIpProtocolFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 0))).clone(namedValues=NamedValues(("gslbProtocol", 1), ("localProtocol", 2), ("unknown", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbServiceIpProtocolFlag.setStatus('current')
if mibBuilder.loadTexts: axGslbServiceIpProtocolFlag.setDescription('The service-ip with the GSLB protocol or local protocol.')
axGslbServiceIpServicePortCount = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 3, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbServiceIpServicePortCount.setStatus('current')
if mibBuilder.loadTexts: axGslbServiceIpServicePortCount.setDescription('The number of ports for the service-ip entry.')
axGslbServiceIpHitCount = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 3, 2, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbServiceIpHitCount.setStatus('current')
if mibBuilder.loadTexts: axGslbServiceIpHitCount.setDescription('The hit count of the service-ip entry.')
axGslbServiceIpPortTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 4, 1), )
if mibBuilder.loadTexts: axGslbServiceIpPortTable.setStatus('current')
if mibBuilder.loadTexts: axGslbServiceIpPortTable.setDescription('A table has information of GSLB service ports')
axGslbServiceIpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 4, 1, 1), ).setIndexNames((0, "A10-AX-MIB", "axGslbServiceIpPortAddr"), (0, "A10-AX-MIB", "axGslbServiceIpPortNum"))
if mibBuilder.loadTexts: axGslbServiceIpPortEntry.setStatus('current')
if mibBuilder.loadTexts: axGslbServiceIpPortEntry.setDescription('Columns in the axGslbServicePorts Table')
axGslbServiceIpPortAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 4, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbServiceIpPortAddr.setStatus('current')
if mibBuilder.loadTexts: axGslbServiceIpPortAddr.setDescription('The IP address of the service-ip entry.')
axGslbServiceIpPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbServiceIpPortNum.setStatus('current')
if mibBuilder.loadTexts: axGslbServiceIpPortNum.setDescription('The port number of the service-ip port entry')
axGslbServiceIpPortOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbServiceIpPortOperState.setStatus('current')
if mibBuilder.loadTexts: axGslbServiceIpPortOperState.setDescription('The service-ip port operational state.')
axGslbServiceIpPortProtocolFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 0))).clone(namedValues=NamedValues(("gslbProtocol", 1), ("localProtocol", 2), ("unknown", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbServiceIpPortProtocolFlag.setStatus('current')
if mibBuilder.loadTexts: axGslbServiceIpPortProtocolFlag.setDescription('The service-ip port with the GSLB protocol or local protocol.')
axGslbServiceIpPortActiveServerCount = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 4, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbServiceIpPortActiveServerCount.setStatus('current')
if mibBuilder.loadTexts: axGslbServiceIpPortActiveServerCount.setDescription('The number of the active real servers.')
axGslbServiceIpPortCurrConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 4, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbServiceIpPortCurrConns.setStatus('current')
if mibBuilder.loadTexts: axGslbServiceIpPortCurrConns.setDescription('The number of the current connections.')
axGslbSiteSlbDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 5, 1), )
if mibBuilder.loadTexts: axGslbSiteSlbDeviceTable.setStatus('current')
if mibBuilder.loadTexts: axGslbSiteSlbDeviceTable.setDescription('A table has information of GSLB service ports')
axGslbSiteSlbDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 5, 1, 1), ).setIndexNames((0, "A10-AX-MIB", "axGslbSiteSlbDeviceSiteName"), (0, "A10-AX-MIB", "axGslbSiteSlbForDeviceIpAddr"))
if mibBuilder.loadTexts: axGslbSiteSlbDeviceEntry.setStatus('current')
if mibBuilder.loadTexts: axGslbSiteSlbDeviceEntry.setDescription('Columns in the axGslbSiteSlbDevices Table')
axGslbSiteSlbDeviceSiteName = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 5, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbSiteSlbDeviceSiteName.setStatus('current')
if mibBuilder.loadTexts: axGslbSiteSlbDeviceSiteName.setDescription('The site name of the slb-device entry.')
axGslbSiteSlbForDeviceIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbSiteSlbForDeviceIpAddr.setStatus('current')
if mibBuilder.loadTexts: axGslbSiteSlbForDeviceIpAddr.setDescription('The IP address of the slb-device entry.')
axGslbSiteForSlbDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 5, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbSiteForSlbDeviceName.setStatus('current')
if mibBuilder.loadTexts: axGslbSiteForSlbDeviceName.setDescription('The name of the slb-device entry.')
axGslbSiteSlbDeviceProtocolFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 0))).clone(namedValues=NamedValues(("gslbProtocol", 1), ("localProtocol", 2), ("unknown", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbSiteSlbDeviceProtocolFlag.setStatus('current')
if mibBuilder.loadTexts: axGslbSiteSlbDeviceProtocolFlag.setDescription('The SLB device with the GSLB protocol or local protocol.')
axGslbSiteSlbDeviceAdminPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 5, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbSiteSlbDeviceAdminPreference.setStatus('current')
if mibBuilder.loadTexts: axGslbSiteSlbDeviceAdminPreference.setDescription('The administrative preference of the SLB device entry.')
axGslbSiteSlbDeviceSessionUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 5, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbSiteSlbDeviceSessionUtilization.setStatus('current')
if mibBuilder.loadTexts: axGslbSiteSlbDeviceSessionUtilization.setDescription('The session utilization of the SLB device entry in percentage.')
axGslbSiteSlbDeviceAvailSessionCount = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 5, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbSiteSlbDeviceAvailSessionCount.setStatus('current')
if mibBuilder.loadTexts: axGslbSiteSlbDeviceAvailSessionCount.setDescription('The number of the available sessions in the SLB device entry.')
axGslbSiteSlbDeviceServicIpCount = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 5, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbSiteSlbDeviceServicIpCount.setStatus('current')
if mibBuilder.loadTexts: axGslbSiteSlbDeviceServicIpCount.setDescription('The number of the service-ip entries.')
axGslbGroupTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 6, 1), )
if mibBuilder.loadTexts: axGslbGroupTable.setStatus('current')
if mibBuilder.loadTexts: axGslbGroupTable.setDescription('A table has information on GSLB groups.')
axGslbGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 6, 1, 1), ).setIndexNames((0, "A10-AX-MIB", "axGslbGroupName"), (0, "A10-AX-MIB", "axGslbGroupMember"), (0, "A10-AX-MIB", "axGslbGroupAddress"))
if mibBuilder.loadTexts: axGslbGroupEntry.setStatus('current')
if mibBuilder.loadTexts: axGslbGroupEntry.setDescription('Columns in the axGslbGroup Table')
axGslbGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 6, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbGroupName.setStatus('current')
if mibBuilder.loadTexts: axGslbGroupName.setDescription('The name of the axGslbGroupTable entry.')
axGslbGroupMember = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 6, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbGroupMember.setStatus('current')
if mibBuilder.loadTexts: axGslbGroupMember.setDescription('The member of the group in the axGslbGroupTable entry.')
axGslbGroupSysID = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 6, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbGroupSysID.setStatus('current')
if mibBuilder.loadTexts: axGslbGroupSysID.setDescription('The sys id of the member in the axGslbGroupTable entry.')
axGslbGroupPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 6, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbGroupPriority.setStatus('current')
if mibBuilder.loadTexts: axGslbGroupPriority.setDescription('The priority of the member in the axGslbGroupTable entry.')
axGslbGroupAttribute = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 6, 1, 1, 5), Bits().clone(namedValues=NamedValues(("master", 1), ("disabled", 2), ("learn", 3), ("passive", 4), ("bridge", 5), ("super", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbGroupAttribute.setStatus('current')
if mibBuilder.loadTexts: axGslbGroupAttribute.setDescription('The attribute of the member in the axGslbGroupTable entry.')
axGslbGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("ok", 1), ("idle", 2), ("connect", 3), ("active", 4), ("openSent", 5), ("openConfirm", 6), ("established", 7), ("unknown", 8), ("ready", 9), ("masterSync", 10), ("fullSync", 11), ("synced", 12), ("stopped", 13), ("waitSync", 14), ("vcs", 15), ("ha", 16), ("auto", 17)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbGroupStatus.setStatus('current')
if mibBuilder.loadTexts: axGslbGroupStatus.setDescription('The status of the member in the axGslbGroupTable entry.')
axGslbGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 20, 6, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGslbGroupAddress.setStatus('current')
if mibBuilder.loadTexts: axGslbGroupAddress.setDescription('The ip address of the member in the axGslbGroupTable entry.')
mibBuilder.exportSymbols("A10-AX-MIB", axVirtualServerNameStatEntry=axVirtualServerNameStatEntry, axVirtualServerPortStatAddressType=axVirtualServerPortStatAddressType, axPersistentStatEntry=axPersistentStatEntry, axServerEnabledState=axServerEnabledState, axFanIndex=axFanIndex, axServerStatServerTotalConns=axServerStatServerTotalConns, axNetStatExtL4RcvFevFinAck=axNetStatExtL4RcvFevFinAck, axPersistentStatCookiePersistOK=axPersistentStatCookiePersistOK, axSmtpProxyStatTotalProxyConn=axSmtpProxyStatTotalProxyConn, axNetStatCreateSSLSIDFail=axNetStatCreateSSLSIDFail, axNetStatEntryClientSSLSIDNotMatch=axNetStatEntryClientSSLSIDNotMatch, axGslbSiteServiceIpName=axGslbSiteServiceIpName, axServiceGroupStatDisplayStatus=axServiceGroupStatDisplayStatus, axSysCpuIndex=axSysCpuIndex, axInterfaceFlowCtrlAdminStatus=axInterfaceFlowCtrlAdminStatus, axNetStatExtL4RcvReXmitSynDelq=axNetStatExtL4RcvReXmitSynDelq, axTrunkStatDropsOut=axTrunkStatDropsOut, axNetStatEntryTCPOutRSTProxy=axNetStatEntryTCPOutRSTProxy, axTrunkStats=axTrunkStats, axNetStatConnLimitResets=axNetStatConnLimitResets, axHASetID=axHASetID, axSessionGlobalStatUDP=axSessionGlobalStatUDP, axAppGlobalSetting=axAppGlobalSetting, axServerName=axServerName, axSslStatSSLMemUsage=axSslStatSSLMemUsage, axServiceGroupMemberStatEntry=axServiceGroupMemberStatEntry, axVirtualServerPortUDPTemplate=axVirtualServerPortUDPTemplate, axServerStatAddress=axServerStatAddress, axPersistentStatPersistCookieNotFound=axPersistentStatPersistCookieNotFound, axSmtpProxyStatCurrProxyConn=axSmtpProxyStatCurrProxyConn, axInterfaceStatBytesIn=axInterfaceStatBytesIn, axInterfaceStatBitsPerSecIn=axInterfaceStatBitsPerSecIn, axHAGroupCount=axHAGroupCount, axInterfaceStatPktsIn=axInterfaceStatPktsIn, axHAFloatingIP=axHAFloatingIP, axSessionStats=axSessionStats, axHttpProxyStatTotalConn=axHttpProxyStatTotalConn, axVlanMemberIntfId=axVlanMemberIntfId, axVirtualServerTable=axVirtualServerTable, axNetStatExtAnomalyOutOfSeq=axNetStatExtAnomalyOutOfSeq, axSmtpProxyStatSmtpReqSucc=axSmtpProxyStatSmtpReqSucc, axTrunkStatName=axTrunkStatName, axFastHttpProxyStatNoTupleErr=axFastHttpProxyStatNoTupleErr, axSysPrimaryVersionOnCF=axSysPrimaryVersionOnCF, axHAGroupLocalPriority=axHAGroupLocalPriority, PYSNMP_MODULE_ID=axMgmt, axInterfaceStatDropsIn=axInterfaceStatDropsIn, axTrunkStatus=axTrunkStatus, axL3vGlobalStatsTotalSslConnections=axL3vGlobalStatsTotalSslConnections, axGslbServiceIpName=axGslbServiceIpName, axVirtualServerPortPersistTemplateType=axVirtualServerPortPersistTemplateType, axSysMemoryTotal=axSysMemoryTotal, axGslbGroupSysID=axGslbGroupSysID, axNetStatConnRateLimitResets=axNetStatConnRateLimitResets, axVirtualServerNamePortStatTotalCurrL7Reqs=axVirtualServerNamePortStatTotalCurrL7Reqs, axVlanCfg=axVlanCfg, axSmtpProxyStatServerResel=axSmtpProxyStatServerResel, axNetStatExtL4RcvFwdFin=axNetStatExtL4RcvFwdFin, axNetStataFlexDrop=axNetStataFlexDrop, axSwitchStatL3IPForward=axSwitchStatL3IPForward, axSysCpuUsagePerPartitionEntry=axSysCpuUsagePerPartitionEntry, axAppGlobalAllowedDefaultValue=axAppGlobalAllowedDefaultValue, axVlanCfgTable=axVlanCfgTable, axAppGlobalAllowedMaxValue=axAppGlobalAllowedMaxValue, axVirtualServerNameStatPktsIn=axVirtualServerNameStatPktsIn, axGslbZoneServiceSentResponses=axGslbZoneServiceSentResponses, axSessionGlobalStatOther=axSessionGlobalStatOther, axTcpProxyStatSocketAlloc=axTcpProxyStatSocketAlloc, axFastHttpProxyStatReqPktOutOrder=axFastHttpProxyStatReqPktOutOrder, axGslbZoneNameInServiceEntry=axGslbZoneNameInServiceEntry, axGslbServiceIPs=axGslbServiceIPs, axGslbGroupAttribute=axGslbGroupAttribute, axTcpProxyStatTCPFINW1State=axTcpProxyStatTCPFINW1State, axServerPortStatCurConns=axServerPortStatCurConns, axSwitchStatAnomLanAttackDrop=axSwitchStatAnomLanAttackDrop, axNetStatExtAnomalyPbslbDrop=axNetStatExtAnomalyPbslbDrop, axGslbGroupTable=axGslbGroupTable, axInterfaceStatBytesOut=axInterfaceStatBytesOut, axVirtualServerPortStatPktsIn=axVirtualServerPortStatPktsIn, axServerPortStatTotalSuccL7Reqs=axServerPortStatTotalSuccL7Reqs, axSmtpProxyStatTable=axSmtpProxyStatTable, axSessionGlobalStatReverseNATUDP=axSessionGlobalStatReverseNATUDP, axSmtpProxyStatsSNATFail=axSmtpProxyStatsSNATFail, axPersistentStatsUrlHashPersistOKSec=axPersistentStatsUrlHashPersistOKSec, axGslbSiteSlbDeviceIpAddr=axGslbSiteSlbDeviceIpAddr, axGslb=axGslb, axPersistentStatUrlHashPersistFail=axPersistentStatUrlHashPersistFail, axVirtualServerPortStatEntry=axVirtualServerPortStatEntry, axNetStatNoSynPktDrop=axNetStatNoSynPktDrop, axConnReuseStatTotalTerm=axConnReuseStatTotalTerm, axSwitchStatIPv6NoRouteDrop=axSwitchStatIPv6NoRouteDrop, axTrunkCfgMemberTotal=axTrunkCfgMemberTotal, axVirtualServerNamePortStatTotalL7Reqs=axVirtualServerNamePortStatTotalL7Reqs, axTcpProxyStatTotalRstSent=axTcpProxyStatTotalRstSent, axGslbServiceIpAddr=axGslbServiceIpAddr, axVirtualServerPortRamCacheTemplate=axVirtualServerPortRamCacheTemplate, axGslbZoneProxyModeCount=axGslbZoneProxyModeCount, axNetStatEntryTCPOutRSTL4Proxy=axNetStatEntryTCPOutRSTL4Proxy, axTrunkCfgMemberCount=axTrunkCfgMemberCount, axL3vStats=axL3vStats, axServerEntry=axServerEntry, axGslbServiceIpPortNum=axGslbServiceIpPortNum, axSwitchStatsL3IPv6Forward=axSwitchStatsL3IPv6Forward, axVirtualServerPortServerSSLTemplate=axVirtualServerPortServerSSLTemplate, axNetStatEntryInbandHMReassign=axNetStatEntryInbandHMReassign, axSysCpuIndexInUsagePerPartition=axSysCpuIndexInUsagePerPartition, axGslbZoneServiceProxyModeCount=axGslbZoneServiceProxyModeCount, axServiceGroupStatBytesOut=axServiceGroupStatBytesOut, axArpEntryTotal=axArpEntryTotal, axNetStatExtL4RcvRevLastAck=axNetStatExtL4RcvRevLastAck, axServerPortStat=axServerPortStat, axFastHttpProxyStatServerReSel=axFastHttpProxyStatServerReSel, axServiceGroupStatName=axServiceGroupStatName, axArpEntryType=axArpEntryType, axConnReuseStatTotalBind=axConnReuseStatTotalBind, axGslbZoneReceivedQueries=axGslbZoneReceivedQueries, axServiceGroupStatPeakConns=axServiceGroupStatPeakConns, axInterfaceMtu=axInterfaceMtu, axVirtualServerStatTotConns=axVirtualServerStatTotConns, axAppGlobalTotalNewL7Connections=axAppGlobalTotalNewL7Connections, axTcpProxyStatTCPCloseWState=axTcpProxyStatTCPCloseWState, axAppGlobalAllowedCurrentValue=axAppGlobalAllowedCurrentValue, axSwitchStatIPFragOverlapDrop=axSwitchStatIPFragOverlapDrop, axAppGlobalSystemResourceUsageTable=axAppGlobalSystemResourceUsageTable, axSmtpProxyStatReqPktOutOrder=axSmtpProxyStatReqPktOutOrder, axSessionGlobalStatNonTcpUdpIPSession=axSessionGlobalStatNonTcpUdpIPSession, axNetStatExtL2Dsr=axNetStatExtL2Dsr, axFastHttpProxyStatTotalPreMatureClose=axFastHttpProxyStatTotalPreMatureClose, axSwitchStatFwdKernel=axSwitchStatFwdKernel, axGslbSiteNameInDeviceEntry=axGslbSiteNameInDeviceEntry, axPersistentStatSSLSIDPersistFail=axPersistentStatSSLSIDPersistFail, axHttpProxyStatTotalReqErr=axHttpProxyStatTotalReqErr, axConnReuseStatTable=axConnReuseStatTable, axHttpProxyStatReqPktOutOrder=axHttpProxyStatReqPktOutOrder, axLogSyslogPort=axLogSyslogPort, axServer=axServer, axSslStatEntry=axSslStatEntry, axGslbSiteStatsTable=axGslbSiteStatsTable, axNetStatExtL4RcvRevFin=axNetStatExtL4RcvRevFin, axServerPortStatTotalCurrL7Reqs=axServerPortStatTotalCurrL7Reqs, axPersistentStatSSLSIDPersistOK=axPersistentStatSSLSIDPersistOK, axFastHttpProxyStatTotalSNATErr=axFastHttpProxyStatTotalSNATErr, axVirtualServerEnabled=axVirtualServerEnabled, axServiceGroupMemberStatTotConns=axServiceGroupMemberStatTotConns, axVirtualServerStatTotalL7Reqs=axVirtualServerStatTotalL7Reqs, axSwitchStatsProtoDownDrop=axSwitchStatsProtoDownDrop, axSwitchStatsAnomTCPSynFinDrop=axSwitchStatsAnomTCPSynFinDrop, axGslbSiteName=axGslbSiteName, axGslbSiteAdminState=axGslbSiteAdminState, axHttpProxyStatClientRst=axHttpProxyStatClientRst, axNetStatSourceNATFails=axNetStatSourceNATFails, axTrunkDescription=axTrunkDescription, axNetStatExtNatNoFwdRoute=axNetStatExtNatNoFwdRoute, axNetStatSSLSIDPersistFail=axNetStatSSLSIDPersistFail, axSysCpuUsageEntry=axSysCpuUsageEntry, axTcpProxyStatTotalActiveOpenConn=axTcpProxyStatTotalActiveOpenConn, acosRoot=acosRoot, axVirtualServerNameStatPortDisplayStatus=axVirtualServerNameStatPortDisplayStatus, axServerPort=axServerPort, axInterfaceStatus=axInterfaceStatus, axServiceGroupMemberStat=axServiceGroupMemberStat, axSysUpperOrRightPowerSupplyStatus=axSysUpperOrRightPowerSupplyStatus, axGslbServiceIPCount=axGslbServiceIPCount, axGslbZoneBackupModeCount=axGslbZoneBackupModeCount, axTrunkPortThreshold=axTrunkPortThreshold, axInterfaceCount=axInterfaceCount, axVirtualServerPortStatName=axVirtualServerPortStatName, axSysSecondaryVersionOnDisk=axSysSecondaryVersionOnDisk, axServerPortStatTotalL7Reqs=axServerPortStatTotalL7Reqs, axConnReuseStatTotalDelayedUNBound=axConnReuseStatTotalDelayedUNBound, axNetStatCpuIndex=axNetStatCpuIndex, axVirtualServerAddress=axVirtualServerAddress, axVirtualServerNameStatStatus=axVirtualServerNameStatStatus, axServerPortStatTable=axServerPortStatTable, axServerPortStatBytesIn=axServerPortStatBytesIn, axSslProxyStatsSNATFail=axSslProxyStatsSNATFail, axServiceGroupLbAlgorithm=axServiceGroupLbAlgorithm, axArpIpAddr=axArpIpAddr, axInterfaceMacAddr=axInterfaceMacAddr, axNetStatUDPNoSLB=axNetStatUDPNoSLB, axNetwork=axNetwork, axSwitchStatCpuIndex=axSwitchStatCpuIndex, axHAFloatingIPAddress=axHAFloatingIPAddress, axVirtualServerName=axVirtualServerName, axSmtpProxyStatsSmtpRequests=axSmtpProxyStatsSmtpRequests, axServerPortNumInServiceGroupMember=axServerPortNumInServiceGroupMember, axNetStatEntryNoSYNPktDropRST=axNetStatEntryNoSYNPktDropRST, axIpNatNat64Stats=axIpNatNat64Stats, axTrunkStatBytesOut=axTrunkStatBytesOut, axConnReuseStatTotalUNBind=axConnReuseStatTotalUNBind, axSessionGlobalStatTCPEstablished=axSessionGlobalStatTCPEstablished, axSmtpProxyStatSvrConnMade=axSmtpProxyStatSvrConnMade, axSwitchStatIPFragOverlap=axSwitchStatIPFragOverlap, axGslbServiceIpPortTable=axGslbServiceIpPortTable, axPersistentStatsCookiePersistOK=axPersistentStatsCookiePersistOK, axGslbSiteSlbDeviceAvailSessionCount=axGslbSiteSlbDeviceAvailSessionCount, axTrunkStatPktsIn=axTrunkStatPktsIn, axVirtualServerStatBytesIn=axVirtualServerStatBytesIn, axSslProxyStatsServerErr=axSslProxyStatsServerErr, axVirtualServerPortStatTable=axVirtualServerPortStatTable, axSwitchStatIPFragRcv=axSwitchStatIPFragRcv, axGslbZoneCacheModeCount=axGslbZoneCacheModeCount, axSysHwInfo=axSysHwInfo, axSslStatTotalSSLConn=axSslStatTotalSSLConn, axSslStatSSLFailedCAVfy=axSslStatSSLFailedCAVfy, axHttpProxyStatNoTupleErr=axHttpProxyStatNoTupleErr, axSysCpuUsagePerPartitionPeriodIndex=axSysCpuUsagePerPartitionPeriodIndex, axFtpStatTotalCtrlSession=axFtpStatTotalCtrlSession, axNetStatExtFastAgingSet=axNetStatExtFastAgingSet, axServerStatPortNum=axServerStatPortNum, axAppGlobalSystemResourceIndex=axAppGlobalSystemResourceIndex, axServiceGroupStatTotalSuccL7Reqs=axServiceGroupStatTotalSuccL7Reqs, axPowerSupplyVoltageTable=axPowerSupplyVoltageTable, axNetStatEntryCreateSSLSIDFail=axNetStatEntryCreateSSLSIDFail, axInterfaceStat=axInterfaceStat, axVirtualServerPortServiceGroup=axVirtualServerPortServiceGroup, axServerStatServerPktsIn=axServerStatServerPktsIn, axFastHttpProxyStatTotalNoTuple=axFastHttpProxyStatTotalNoTuple, axHttpProxyStatTotalSvrConn=axHttpProxyStatTotalSvrConn, axTcpProxyStatTCPListenState=axTcpProxyStatTCPListenState, axHttpProxyStatTotalProxyConns=axHttpProxyStatTotalProxyConns, axVirtualServerPortStatPersistConns=axVirtualServerPortStatPersistConns, axNetStatExtNatCpsExceedDrop=axNetStatExtNatCpsExceedDrop, axConnReuseStatTotalOpenPersist=axConnReuseStatTotalOpenPersist, axSmtpProxyStatClientRST=axSmtpProxyStatClientRST, axInterfaceStatUtilPercentIn=axInterfaceStatUtilPercentIn, axServerAddressType=axServerAddressType, axTrunkCfgMemberEntry=axTrunkCfgMemberEntry, axNetStatServerSelFails=axNetStatServerSelFails, axServerStatAddressType=axServerStatAddressType, axVirtualServerStatEntry=axVirtualServerStatEntry, axServiceGroupNameInMember=axServiceGroupNameInMember, axFastHttpProxyStatTotalSuccReq=axFastHttpProxyStatTotalSuccReq, axVirtualServerPortRTSPTemplate=axVirtualServerPortRTSPTemplate, axServerStatAddrInPort=axServerStatAddrInPort, axSysFanStatusTable=axSysFanStatusTable, axIpNatLsnStats=axIpNatLsnStats, axTrunkCfgMembers=axTrunkCfgMembers, axGslbGroupName=axGslbGroupName, axFastHttpProxyStatTotalCRst=axFastHttpProxyStatTotalCRst, axSwitchStatsAnomAnyDrop=axSwitchStatsAnomAnyDrop, axVlans=axVlans, axNetStatEntrySSLSIDPersistFail=axNetStatEntrySSLSIDPersistFail, axTcpProxyStatReTranPkt=axTcpProxyStatReTranPkt, axNetStatTCPOutRSTAFleX=axNetStatTCPOutRSTAFleX, axServerPortStatPktsIn=axServerPortStatPktsIn, axVirtualServerNameStatPortType=axVirtualServerNameStatPortType, axConnReuseStatTotalEst=axConnReuseStatTotalEst, axNetStatExtL4UdpReqRspNotMatch=axNetStatExtL4UdpReqRspNotMatch, axGslbZoneServiceServerModeCount=axGslbZoneServiceServerModeCount, axPowerSupplyVoltageTotal=axPowerSupplyVoltageTotal, axServerNameInPort=axServerNameInPort, axConnReuseStatTotalActivePersist=axConnReuseStatTotalActivePersist, axServiceGroups=axServiceGroups)
mibBuilder.exportSymbols("A10-AX-MIB", axL3vGlobalStatsPartitionName=axL3vGlobalStatsPartitionName, axNetStatEntryTCPOutRSTAFleX=axNetStatEntryTCPOutRSTAFleX, axVirtualServerNamePortStatTotConns=axVirtualServerNamePortStatTotConns, axTCPProxyStatTable=axTCPProxyStatTable, axServerStatServerTotalCurrL7Reqs=axServerStatServerTotalCurrL7Reqs, axNetStatExtL4UdpReqRsps=axNetStatExtL4UdpReqRsps, axServiceGroupMember=axServiceGroupMember, axAppGlobalTotalL7Requests=axAppGlobalTotalL7Requests, axSwitchStatsARPRespRcv=axSwitchStatsARPRespRcv, axServerStatServerPktsOut=axServerStatServerPktsOut, axSwitchStatVLANFlood=axSwitchStatVLANFlood, axNetStatUDPsNoSLB=axNetStatUDPsNoSLB, axSessionGlobalStatConnFree=axSessionGlobalStatConnFree, axSysCpuUsagePartitionName=axSysCpuUsagePartitionName, axVirtualServerPortStat=axVirtualServerPortStat, axFastHttpProxyStatParseReqFail=axFastHttpProxyStatParseReqFail, axInterfaceStatBitsPerSecOut=axInterfaceStatBitsPerSecOut, axNetStatEntryTCPOutRSTACKattack=axNetStatEntryTCPOutRSTACKattack, axFastHttpProxyStatTotalConn=axFastHttpProxyStatTotalConn, axHAConfigEnabled=axHAConfigEnabled, axVirtualServer=axVirtualServer, axIpNatStatsDynamicMappingMissAddresses=axIpNatStatsDynamicMappingMissAddresses, axTcpProxyStatCpuIndex=axTcpProxyStatCpuIndex, axInterfaceStatIndex=axInterfaceStatIndex, axNetStatExtL4CpsExceedDrop=axNetStatExtL4CpsExceedDrop, axFastHttpProxyStatEntry=axFastHttpProxyStatEntry, axVirtualServerPortClientSSLTemplate=axVirtualServerPortClientSSLTemplate, axTcpProxyStatTotalRstRcvOnEstConn=axTcpProxyStatTotalRstRcvOnEstConn, axVlanCfgEntry=axVlanCfgEntry, axSwitchStatARPReqRcv=axSwitchStatARPReqRcv, axIpNatDsliteStats=axIpNatDsliteStats, axHttpProxyStatTotalReqPktOutOrder=axHttpProxyStatTotalReqPktOutOrder, axFtpStatTotalALGPkt=axFtpStatTotalALGPkt, axSmtpProxyStatsParseReqFail=axSmtpProxyStatsParseReqFail, axSwitchStatL2Forward=axSwitchStatL2Forward, axFastHttpProxyStatTotalSRst=axFastHttpProxyStatTotalSRst, axNetStatTCPNoSLB=axNetStatTCPNoSLB, axFastHttpProxyStatTotalSvrSelErr=axFastHttpProxyStatTotalSvrSelErr, axNetStatTCPSynRcv=axNetStatTCPSynRcv, axLogBufferPri=axLogBufferPri, axVirtualServerStatPortStatus=axVirtualServerStatPortStatus, axNetStatEntryClientSSLSIDMatch=axNetStatEntryClientSSLSIDMatch, axNetStatTCPOutRSTStaleSess=axNetStatTCPOutRSTStaleSess, axNetStatClientSSLSIDMatch=axNetStatClientSSLSIDMatch, axNetStatExtTcpInvalidDrop=axNetStatExtTcpInvalidDrop, axNetStatClientSSLSIDNotMatch=axNetStatClientSSLSIDNotMatch, axGslbSiteServiceIpHitCount=axGslbSiteServiceIpHitCount, axLogEmailPri=axLogEmailPri, axNetStatEntry=axNetStatEntry, axSwitchStatAnomAllFragDrop=axSwitchStatAnomAllFragDrop, axNetStatExtL3vConnLimitDrop=axNetStatExtL3vConnLimitDrop, axSmtpProxyStatReqRetrans=axSmtpProxyStatReqRetrans, axVirtualServerStatDisplayName=axVirtualServerStatDisplayName, axIpNatPoolTotalUsed=axIpNatPoolTotalUsed, axSysCpuUsagePerPartitionTable=axSysCpuUsagePerPartitionTable, axSysAverageDataCpuUsage=axSysAverageDataCpuUsage, axHttpProxyStatFwdReqDataFail=axHttpProxyStatFwdReqDataFail, axNetStatExtL4UdpRspsGreaterReqs=axNetStatExtL4UdpRspsGreaterReqs, axGslbSiteSlbDeviceSessionUtilization=axGslbSiteSlbDeviceSessionUtilization, axGslbServiceIpPortAddr=axGslbServiceIpPortAddr, axSslStatSSLModNum=axSslStatSSLModNum, axNetStatExtNatPortPreserveSucc=axNetStatExtNatPortPreserveSucc, axNetStatConnLimitDrops=axNetStatConnLimitDrops, axServerStatTable=axServerStatTable, axIpNatStatsDynamicMapping=axIpNatStatsDynamicMapping, axHttpProxyStatTotalSuccReq=axHttpProxyStatTotalSuccReq, axServiceGroupMemberStatCurConns=axServiceGroupMemberStatCurConns, axHttpProxyStatHttpReqSucc=axHttpProxyStatHttpReqSucc, axIpNatStatsDynamicMappingStartAddress=axIpNatStatsDynamicMappingStartAddress, axServiceGroupType=axServiceGroupType, axInterface=axInterface, axSwitchStatAnomSYNFragDrop=axSwitchStatAnomSYNFragDrop, axSysCpuUsageValue=axSysCpuUsageValue, axPersistentStatSIPPersistFail=axPersistentStatSIPPersistFail, axVirtualServerNameStatBytesIn=axVirtualServerNameStatBytesIn, axArpInfoEntry=axArpInfoEntry, axSwitchStatsIPFragReasmFail=axSwitchStatsIPFragReasmFail, axSysCpuNumber=axSysCpuNumber, axPersistentStatCpuIndex=axPersistentStatCpuIndex, axSslProxyStatsClientErr=axSslProxyStatsClientErr, axServerPortMonitorState=axServerPortMonitorState, axSwitchStatL4Process=axSwitchStatL4Process, axArpInfo=axArpInfo, axSysCpuUsage=axSysCpuUsage, axSslStatSSLHWRingFull=axSslStatSSLHWRingFull, axGslbGroupMember=axGslbGroupMember, axSysCpu=axSysCpu, axVirtualServerStatTable=axVirtualServerStatTable, axFtpStatOutConnData=axFtpStatOutConnData, axNetStatInbandHMRetry=axNetStatInbandHMRetry, axNetStatExtNoEstCsynRcvAgedOut=axNetStatExtNoEstCsynRcvAgedOut, axServerPortEntry=axServerPortEntry, axAppGlobalTotalNewIPNatConnections=axAppGlobalTotalNewIPNatConnections, axVirtualServerStatName=axVirtualServerStatName, axPersistentStatsSIPPersistFail=axPersistentStatsSIPPersistFail, axGslbServiceIpPorts=axGslbServiceIpPorts, axTcpProxyStatTotalReXmitPkt=axTcpProxyStatTotalReXmitPkt, axInterfaceStatPktsPerSecOut=axInterfaceStatPktsPerSecOut, axVirtualServerNameStatBytesOut=axVirtualServerNameStatBytesOut, axGslbSiteServiceIpAddr=axGslbSiteServiceIpAddr, axNetworkingStats=axNetworkingStats, axServerPortNum=axServerPortNum, axTcpProxyStatTCPCloseState=axTcpProxyStatTCPCloseState, axNetStatServerSSLSIDReset=axNetStatServerSSLSIDReset, axTrunkCfgMemberAdminStatus=axTrunkCfgMemberAdminStatus, axServiceGroupMemberAddrType=axServiceGroupMemberAddrType, axNetStatExtL4RcfRevRst=axNetStatExtL4RcfRevRst, axTrunkCfgMemberName=axTrunkCfgMemberName, axHttpProxyStatServerSelFail=axHttpProxyStatServerSelFail, axFastHttpProxyStatTable=axFastHttpProxyStatTable, axVirtualServerStatTotalCurrL7Reqs=axVirtualServerStatTotalCurrL7Reqs, axVirtualServerPortStatPktsOut=axVirtualServerPortStatPktsOut, axLogBufferSize=axLogBufferSize, axNetStatTCPOutRst=axNetStatTCPOutRst, axHttpProxyStatTotalFwdDataReqErr=axHttpProxyStatTotalFwdDataReqErr, axGslbServiceIpPortProtocolFlag=axGslbServiceIpPortProtocolFlag, axGslbGroupAddress=axGslbGroupAddress, axServerPortNumInServiceGroupMemberStat=axServerPortNumInServiceGroupMemberStat, axAppGlobalBufferCurrentUsage=axAppGlobalBufferCurrentUsage, axL3vGlobalStatsTotalNewL7Connections=axL3vGlobalStatsTotalNewL7Connections, axGslbZoneServiceCacheModeCount=axGslbZoneServiceCacheModeCount, axLogSyslogHostTable=axLogSyslogHostTable, axVirtualServerPortPolicyTemplate=axVirtualServerPortPolicyTemplate, axServerHealthMonitor=axServerHealthMonitor, axGslbGroupPriority=axGslbGroupPriority, axTCPProxyStatEntry=axTCPProxyStatEntry, axSysCpuTable=axSysCpuTable, axGslbZoneName=axGslbZoneName, axAppGlobalBufferConfigLimit=axAppGlobalBufferConfigLimit, axServerStatCount=axServerStatCount, axSslStatEnableCryptoEngine=axSslStatEnableCryptoEngine, axNetStat2TCPReceive=axNetStat2TCPReceive, axSslStatTable=axSslStatTable, axMgmt=axMgmt, axNetStatExtNoEstSsynSntAgedOut=axNetStatExtNoEstSsynSntAgedOut, axTrunkStatDropsIn=axTrunkStatDropsIn, axNetStatExtL4UdpRsps=axNetStatExtL4UdpRsps, axServerStatServerBytesOut=axServerStatServerBytesOut, axSessionStatsGlobal=axSessionStatsGlobal, axFastHttpProxyStatHttpReq=axFastHttpProxyStatHttpReq, axL3vGlobalStatsTotalThroughput=axL3vGlobalStatsTotalThroughput, axServerPortStatBytesOut=axServerPortStatBytesOut, axHttpProxyStatCpuIndex=axHttpProxyStatCpuIndex, axGslbSiteSlbDeviceName=axGslbSiteSlbDeviceName, axFastHttpProxyStats=axFastHttpProxyStats, axServerPortTable=axServerPortTable, axServerPortStatPktsOut=axServerPortStatPktsOut, axInterfaceStatErrorsOut=axInterfaceStatErrorsOut, axServiceGroupStatTotConns=axServiceGroupStatTotConns, axHttpProxyStatNoProxyErr=axHttpProxyStatNoProxyErr, axNetStatProxyNoSockDrop=axNetStatProxyNoSockDrop, axNetStatClientSSLSIDNotFound=axNetStatClientSSLSIDNotFound, axNetStatExtL4RcvFwdRst=axNetStatExtL4RcvFwdRst, axSessionGlobalStatFreeCurrentConns=axSessionGlobalStatFreeCurrentConns, axGslbSiteServiceIpPortNum=axGslbSiteServiceIpPortNum, axGslbServiceIpPortActiveServerCount=axGslbServiceIpPortActiveServerCount, axVlanCfgMemberTable=axVlanCfgMemberTable, axSmtpProxyStatsReqPktOutOrder=axSmtpProxyStatsReqPktOutOrder, axApp=axApp, axInterfaces=axInterfaces, axNetStatTCPOutRSTProxy=axNetStatTCPOutRSTProxy, axSysDiskFreeSpace=axSysDiskFreeSpace, axTrunkCfgMemberTrunkName=axTrunkCfgMemberTrunkName, axFastHttpProxyStatServerPreMatureClose=axFastHttpProxyStatServerPreMatureClose, axSwitchStatsIncorrectLenDrop=axSwitchStatsIncorrectLenDrop, axIpNatStatsDynamicMappingTotalAddresses=axIpNatStatsDynamicMappingTotalAddresses, axGslbZoneServiceReceivedQueries=axGslbZoneServiceReceivedQueries, axVirtualServerNameStatPortStatus=axVirtualServerNameStatPortStatus, axVlanMemberVlanId=axVlanMemberVlanId, axHttpProxyStatTable=axHttpProxyStatTable, axTcpProxyStatActiveOpenConns=axTcpProxyStatActiveOpenConns, axIpNatStatsDynamicMappingAclName=axIpNatStatsDynamicMappingAclName, axTrunkStatTable=axTrunkStatTable, axServerAddress=axServerAddress, axNetStatEntryServerSSLSIDNotFound=axNetStatEntryServerSSLSIDNotFound, axSwitchStatsFwdKernel=axSwitchStatsFwdKernel, axTcpProxyStatTCPLastACKState=axTcpProxyStatTCPLastACKState, axServiceGroupMemberStatPersistConns=axServiceGroupMemberStatPersistConns, axNetStatConnRateLimitDrops=axNetStatConnRateLimitDrops, axTrunkPortThresholdTimer=axTrunkPortThresholdTimer, axSysCpuUsagePeriodIndex=axSysCpuUsagePeriodIndex, axNetStats=axNetStats, axNetStatExtTcpSessionAgedOut=axNetStatExtTcpSessionAgedOut, axInterfaceStatMcastIn=axInterfaceStatMcastIn, axServiceGroupStatTotalCurrL7Reqs=axServiceGroupStatTotalCurrL7Reqs, axNetStatExtSslTptExceedDrop=axNetStatExtSslTptExceedDrop, axGslbZoneServiceAdminState=axGslbZoneServiceAdminState, axSwitchStatAnomAnyDrop=axSwitchStatAnomAnyDrop, axSmtpProxyStatsNoTupleError=axSmtpProxyStatsNoTupleError, axNetStatUDPRcv=axNetStatUDPRcv, axSysCpuEntry=axSysCpuEntry, axVirtualServerNameStatTotalSuccL7Reqs=axVirtualServerNameStatTotalSuccL7Reqs, axSwitchStatEntry=axSwitchStatEntry, axSwitchStatIPv4NoRouteDrop=axSwitchStatIPv4NoRouteDrop, axNetStatTCPsNoSLB=axNetStatTCPsNoSLB, axFtpStats=axFtpStats, axNetStatExtFastAgingReset=axNetStatExtFastAgingReset, axNetStatEntryConnRateLimitResets=axNetStatEntryConnRateLimitResets, axVirtualServerDisplayStatus=axVirtualServerDisplayStatus, axGslbZoneServiceOperState=axGslbZoneServiceOperState, axNetStatEntryNoSYNPktDropFIN=axNetStatEntryNoSYNPktDropFIN, axSwitchStatsIPFragOverlapDrop=axSwitchStatsIPFragOverlapDrop, axGslbSiteStatsEntry=axGslbSiteStatsEntry, axInterfaceAdminStatus=axInterfaceAdminStatus, axHAFloatingIPEntry=axHAFloatingIPEntry, axGlobalTotalThroughput=axGlobalTotalThroughput, axFastHttpProxyStatNoProxyErr=axFastHttpProxyStatNoProxyErr, axSwitchStatsAnomPingDeathDrop=axSwitchStatsAnomPingDeathDrop, axGslbGroupEntry=axGslbGroupEntry, axPersistentStatsCookiePersistFail=axPersistentStatsCookiePersistFail, axAppGlobalTotalCurrentConnectionsInteger=axAppGlobalTotalCurrentConnectionsInteger, axNetStatEntryServerSSLSIDMatch=axNetStatEntryServerSSLSIDMatch, axNetStatCreateSSLSIDSucc=axNetStatCreateSSLSIDSucc, axHAGroupID=axHAGroupID, axL3vGlobalStatsTable=axL3vGlobalStatsTable, axServiceGroupMemberEntry=axServiceGroupMemberEntry, axHttpProxyStatTotalReqReXmit=axHttpProxyStatTotalReqReXmit, axAppGlobalTotalNewConnections=axAppGlobalTotalNewConnections, axTrunkName=axTrunkName, axVirtualServerPortHaGroupID=axVirtualServerPortHaGroupID, axNetStataFlexDrops=axNetStataFlexDrops, axIpNatStatsDynamicMappingEntry=axIpNatStatsDynamicMappingEntry, axServiceGroupMemberStatPeakConns=axServiceGroupMemberStatPeakConns, axNetStatInbandHMReassign=axNetStatInbandHMReassign, axSysCpuUsageCtrlCpuFlag=axSysCpuUsageCtrlCpuFlag, axSmtpProxyStatFwdReqDataFail=axSmtpProxyStatFwdReqDataFail, axNetStatExtTcpSynStaleSessionDrop=axNetStatExtTcpSynStaleSessionDrop, axPowerSupplyVoltageStatus=axPowerSupplyVoltageStatus, axGslbZoneStatsEntry=axGslbZoneStatsEntry, axServerMonitorState=axServerMonitorState, axInterfaceMediaMaxDuplex=axInterfaceMediaMaxDuplex, axVirtualServerPortAddress=axVirtualServerPortAddress, axVirtualServerNamePortStatPersistConns=axVirtualServerNamePortStatPersistConns, axInterfaceAlias=axInterfaceAlias, axNetStatExtBwWaterMarkDrop=axNetStatExtBwWaterMarkDrop, axServerStatServerBytesIn=axServerStatServerBytesIn, axGslbSiteSlbDevices=axGslbSiteSlbDevices, axSmtpProxyStatsServerSelFail=axSmtpProxyStatsServerSelFail, axIpNatStatsDynamicMappingEndAddress=axIpNatStatsDynamicMappingEndAddress, axFastHttpProxyStatCurrProxyConns=axFastHttpProxyStatCurrProxyConns, axSwitchStatsSRCPortSuppress=axSwitchStatsSRCPortSuppress, axIpNatStats=axIpNatStats, axVirtualServerPortStatTotalSuccL7Reqs=axVirtualServerPortStatTotalSuccL7Reqs, axNetStatExtResetUnknownConns=axNetStatExtResetUnknownConns, axNetStatTable=axNetStatTable, axPersistentStatUrlHashPersistOKSec=axPersistentStatUrlHashPersistOKSec, axFastHttpProxyStatFwdReqDataFail=axFastHttpProxyStatFwdReqDataFail, axServerPortStatusInServiceGroupMember=axServerPortStatusInServiceGroupMember, axSysMemoryUsage=axSysMemoryUsage, axVirtualServerPortTemplate=axVirtualServerPortTemplate, axServerStat=axServerStat, axNetStatEntryInbandHMRetry=axNetStatEntryInbandHMRetry, axVirtualServerNamePortStatEntry=axVirtualServerNamePortStatEntry, axSwitchStatUnknownProtoDrop=axSwitchStatUnknownProtoDrop)
mibBuilder.exportSymbols("A10-AX-MIB", axSmtpProxyStatParseReqFail=axSmtpProxyStatParseReqFail, axSmtpProxyStatServerRST=axSmtpProxyStatServerRST, axSysCpuCtrlCpuFlag=axSysCpuCtrlCpuFlag, axVirtualServerStatPortType=axVirtualServerStatPortType, axSslStatAvailCryptoEngine=axSslStatAvailCryptoEngine, axNetStatExtNatIcmpProcess=axNetStatExtNatIcmpProcess, axVirtualServerEntry=axVirtualServerEntry, axIpNatLoggingStats=axIpNatLoggingStats, axServiceGroupStatPktsOut=axServiceGroupStatPktsOut, axFastHttpProxyStatTotalProxyConns=axFastHttpProxyStatTotalProxyConns, axServiceGroupMemberStatPktsOut=axServiceGroupMemberStatPktsOut, axSmtpProxyStatsSvrConnMade=axSmtpProxyStatsSvrConnMade, axNetStatTCPSynCookieFails=axNetStatTCPSynCookieFails, axSslStats=axSslStats, axSmtpProxyStatsNoProxyError=axSmtpProxyStatsNoProxyError, axHttpProxyStatCurrProxyConns=axHttpProxyStatCurrProxyConns, axGslbZoneServiceStatsEntry=axGslbZoneServiceStatsEntry, axServerPortType=axServerPortType, axNetStatIPOutNoRoute=axNetStatIPOutNoRoute, axServerPortStatEntry=axServerPortStatEntry, axSysHwFan2Speed=axSysHwFan2Speed, axTcpProxyStatRstSent=axTcpProxyStatRstSent, axTcpProxyStatTCPSYNSNTState=axTcpProxyStatTCPSYNSNTState, axFastHttpProxyStatTotalSvrConn=axFastHttpProxyStatTotalSvrConn, axFtpStatOutConnCtrl=axFtpStatOutConnCtrl, axNetStatTCPReceive=axNetStatTCPReceive, axNetStat2UDPReceive=axNetStat2UDPReceive, axNetStatSessionsAgingOut=axNetStatSessionsAgingOut, axNetStatExtTcpSynOtherFlagsDrop=axNetStatExtTcpSynOtherFlagsDrop, axConnReuseStatTotalLongRes=axConnReuseStatTotalLongRes, axFastHttpProxyStatTotalReqReXmit=axFastHttpProxyStatTotalReqReXmit, axNetStatEntryTCPOutRSTStaleSess=axNetStatEntryTCPOutRSTStaleSess, axArpEntrySourceIntName=axArpEntrySourceIntName, axNetStatExtSslTptWaterMarkDrop=axNetStatExtSslTptWaterMarkDrop, axPersistentStatsSSLSIDPersistFail=axPersistentStatsSSLSIDPersistFail, axSwitchStatARPRespRcv=axSwitchStatARPRespRcv, axHttpProxyStats=axHttpProxyStats, axPersistentStatUrlHashPersistOKPri=axPersistentStatUrlHashPersistOKPri, axPersistentStatsUrlHashPersistOKPri=axPersistentStatsUrlHashPersistOKPri, axTrunkStatPktsOut=axTrunkStatPktsOut, axSwitchStatIPFragReasmOk=axSwitchStatIPFragReasmOk, axServiceGroupMemberStatTable=axServiceGroupMemberStatTable, axSslProxyStatsNoRoute=axSslProxyStatsNoRoute, axInterfaceEntry=axInterfaceEntry, axSwitchStatsAnomTCPNoFragDrop=axSwitchStatsAnomTCPNoFragDrop, axTcpProxyStatTotalOutPkt=axTcpProxyStatTotalOutPkt, axTcpProxyStatCurrEstConns=axTcpProxyStatCurrEstConns, axGslbServiceIPTable=axGslbServiceIPTable, axGslbSiteDeviceStatsEntry=axGslbSiteDeviceStatsEntry, axTrunkTotal=axTrunkTotal, axVlanMemberTagged=axVlanMemberTagged, axIpNatStatsDynamicMappingAccessListID=axIpNatStatsDynamicMappingAccessListID, axServiceGroupEntry=axServiceGroupEntry, axSysStartupMode=axSysStartupMode, axFastHttpProxyStatTotalReq=axFastHttpProxyStatTotalReq, axTcpProxyStatTCPClosingState=axTcpProxyStatTCPClosingState, axNetStatExtL4UdpReqs=axNetStatExtL4UdpReqs, axNetStatTCPOutRSTNoSYN=axNetStatTCPOutRSTNoSYN, axSysMemory=axSysMemory, axVirtualServerNamePortStatPktsIn=axVirtualServerNamePortStatPktsIn, axSwitchStatTable=axSwitchStatTable, axSwitchStatIPFragReasmFail=axSwitchStatIPFragReasmFail, axIpNatStatsDynamicMappingEndAddressType=axIpNatStatsDynamicMappingEndAddressType, axNetStatExtL4RcvReXmitSynAckDq=axNetStatExtL4RcvReXmitSynAckDq, axSwitchStatsL3IPForward=axSwitchStatsL3IPForward, axLogSyslogHostIndex=axLogSyslogHostIndex, axPowerSupplyVoltageIndex=axPowerSupplyVoltageIndex, axSwitchStatsVLANFlood=axSwitchStatsVLANFlood, axNetStatServerSSLSIDNotFound=axNetStatServerSSLSIDNotFound, axServerCount=axServerCount, axSmtpProxyStatsTotalProxyConns=axSmtpProxyStatsTotalProxyConns, axIpNatPoolFailed=axIpNatPoolFailed, axPowerSupplyVoltageEntry=axPowerSupplyVoltageEntry, axArpMacAddr=axArpMacAddr, axServiceGroupMemberStatTotalCurrL7Reqs=axServiceGroupMemberStatTotalCurrL7Reqs, axSwitchStatL3IPv6Forward=axSwitchStatL3IPv6Forward, axGslbSiteCount=axGslbSiteCount, axSysHwFan1Speed=axSysHwFan1Speed, axVirtualServerNameStatCurConns=axVirtualServerNameStatCurConns, axArpEntryAging=axArpEntryAging, axSslProxyStats=axSslProxyStats, axInterfaceIndex=axInterfaceIndex, axGslbGroups=axGslbGroups, axTrunkStatMcastIn=axTrunkStatMcastIn, axInterfaceStatUtilPercentOut=axInterfaceStatUtilPercentOut, axSmtpProxyStatCpuIndex=axSmtpProxyStatCpuIndex, axTcpProxyStatPassiveOpenConns=axTcpProxyStatPassiveOpenConns, axLayer3=axLayer3, axHAGroupPeerPriority=axHAGroupPeerPriority, axNetStatEntryNoSYNPktDropACK=axNetStatEntryNoSYNPktDropACK, axVirtualServerNamePortStatBytesIn=axVirtualServerNamePortStatBytesIn, axNetStatTCPRcv=axNetStatTCPRcv, axSmtpProxyStatsCurrProxyConns=axSmtpProxyStatsCurrProxyConns, axGslbZoneAdminState=axGslbZoneAdminState, axSslStatSSLNoHWContextMem=axSslStatSSLNoHWContextMem, axVirtualServerNameStatTotConns=axVirtualServerNameStatTotConns, axL3vGlobalStatsTotalL4Sessions=axL3vGlobalStatsTotalL4Sessions, axPowerSupplyName=axPowerSupplyName, axNetStatExtSslCpsExceedDrop=axNetStatExtSslCpsExceedDrop, axSmtpProxyStatSNATFail=axSmtpProxyStatSNATFail, axVirtualServerPortSMTPTemplate=axVirtualServerPortSMTPTemplate, axNetStatExtL4TcpEst=axNetStatExtL4TcpEst, axVirtualServerPortNum=axVirtualServerPortNum, axConnReuseStatTotalBound=axConnReuseStatTotalBound, axNetStatExtNoVportDrop=axNetStatExtNoVportDrop, axHAGroupStatusTable=axHAGroupStatusTable, axSysPowerSupplyStatusTable=axSysPowerSupplyStatusTable, axHAFloatingIPTable=axHAFloatingIPTable, axVirtualServerNamePortStatBytesOut=axVirtualServerNamePortStatBytesOut, axSwitchStatsIPv4NoRouteDrop=axSwitchStatsIPv4NoRouteDrop, axServiceGroupName=axServiceGroupName, axSessionGlobalStatFreeBufferCount=axSessionGlobalStatFreeBufferCount, axHA=axHA, axGlobalAppBuffer=axGlobalAppBuffer, axServiceGroupStatEntry=axServiceGroupStatEntry, axGslbZoneOperState=axGslbZoneOperState, axNetStatExtL4RcvFwdFinDrop=axNetStatExtL4RcvFwdFinDrop, axGslbServiceIpHitCount=axGslbServiceIpHitCount, axSmtpProxyStatsClientRST=axSmtpProxyStatsClientRST, axVirtualServerCount=axVirtualServerCount, axSwitchStats=axSwitchStats, axVirtualServerNamePortStat=axVirtualServerNamePortStat, axServiceGroupMemberStatPktsIn=axServiceGroupMemberStatPktsIn, axGslbSiteSlbDeviceServicIpCount=axGslbSiteSlbDeviceServicIpCount, axServiceGroupMemberStatTotalL7Reqs=axServiceGroupMemberStatTotalL7Reqs, axGslbSiteHitCount=axGslbSiteHitCount, axServerNameInServiceGroupMember=axServerNameInServiceGroupMember, axVirtualServerPortConnReuseTemplate=axVirtualServerPortConnReuseTemplate, axSmtpProxyStatSvrPrematureClose=axSmtpProxyStatSvrPrematureClose, axVirtualServerNameStatPeakConns=axVirtualServerNameStatPeakConns, axArpEntryVlan=axArpEntryVlan, axVirtualServerNamePortStatTable=axVirtualServerNamePortStatTable, axSysAverageCpuUsage=axSysAverageCpuUsage, axNetStatTCPOutRSTACKattack=axNetStatTCPOutRSTACKattack, axVirtualServerStatPersistConns=axVirtualServerStatPersistConns, axIpNatPoolStatsEntry=axIpNatPoolStatsEntry, axSessionGlobalStatTCPSynHalfOpen=axSessionGlobalStatTCPSynHalfOpen, axIpNatStatsGlobalMisses=axIpNatStatsGlobalMisses, axGslbZoneServiceStatsTable=axGslbZoneServiceStatsTable, axGslbSiteOperState=axGslbSiteOperState, axServerStatServerCurConns=axServerStatServerCurConns, axHttpProxyStatEntry=axHttpProxyStatEntry, axLogging=axLogging, axSysCpuUsageValueAtPeriod=axSysCpuUsageValueAtPeriod, axInterfaceStatTable=axInterfaceStatTable, axInterfaceStatPktsOut=axInterfaceStatPktsOut, axGslbZoneServiceFqdn=axGslbZoneServiceFqdn, axNetStatExtTcpNoEstSessionAgedOut=axNetStatExtTcpNoEstSessionAgedOut, axNetStatTCPSynRecv=axNetStatTCPSynRecv, axSmtpProxyStatFwdReqFail=axSmtpProxyStatFwdReqFail, axInterfaceStatPktsPerSecIn=axInterfaceStatPktsPerSecIn, axSessionGlobalStatTCPHalfOpen=axSessionGlobalStatTCPHalfOpen, axNetStatSSLSIDPersistSucc=axNetStatSSLSIDPersistSucc, axHttpProxyStatTotalSRst=axHttpProxyStatTotalSRst, axHAFloatingIPCount=axHAFloatingIPCount, axNetStatExtL4AxReXmitSyn=axNetStatExtL4AxReXmitSyn, axServiceGroupMemberStatAddrType=axServiceGroupMemberStatAddrType, axSwitchStatsAnomLanAttackDrop=axSwitchStatsAnomLanAttackDrop, axTcpProxyStats=axTcpProxyStats, axGlobalTotalL4Session=axGlobalTotalL4Session, axConnReuseStatTotalEstablished=axConnReuseStatTotalEstablished, axVirtualServerStatPortDisplayStatus=axVirtualServerStatPortDisplayStatus, axVirtualServerStatPortNum=axVirtualServerStatPortNum, axNetStatNoVportDrops=axNetStatNoVportDrops, axServerPortStatusInServiceGroupMemberStat=axServerPortStatusInServiceGroupMemberStat, axL3vGlobalStatsTotalNewConnections=axL3vGlobalStatsTotalNewConnections, axLogConsolePri=axLogConsolePri, axSysPowerSupplyStatusEntry=axSysPowerSupplyStatusEntry, axFanStatus=axFanStatus, axTrunkTypeLacpEnabled=axTrunkTypeLacpEnabled, axGslbServiceIpPortEntry=axGslbServiceIpPortEntry, axServiceGroupStatPktsIn=axServiceGroupStatPktsIn, axTrunks=axTrunks, axTrunkStatErrorsIn=axTrunkStatErrorsIn, axServerStatServerTotalSuccL7Reqs=axServerStatServerTotalSuccL7Reqs, axConnReuseStatTotalMissedResponse=axConnReuseStatTotalMissedResponse, axNetStatExtNatNoRevRoute=axNetStatExtNatNoRevRoute, axSwitchStatIncorrectLenDrop=axSwitchStatIncorrectLenDrop, axServerPortWeight=axServerPortWeight, axIpNatPoolStats=axIpNatPoolStats, axSmtpProxyStats=axSmtpProxyStats, axVirtualServerNameStatPortNum=axVirtualServerNameStatPortNum, axNetStatNoSYNPktDropACK=axNetStatNoSYNPktDropACK, axConnReuseStatActivePersist=axConnReuseStatActivePersist, axGslbServiceIpProtocolFlag=axGslbServiceIpProtocolFlag, axNetStatServerSSLSIDNotMatch=axNetStatServerSSLSIDNotMatch, axFastHttpProxyStatTotalNoProxy=axFastHttpProxyStatTotalNoProxy, axNetStatTCPSYNCookieSnt=axNetStatTCPSYNCookieSnt, axNetStatExtAnomalyBadContent=axNetStatExtAnomalyBadContent, axVirtualServerAddressType=axVirtualServerAddressType, axSysDisk=axSysDisk, axGslbServiceIpServicePortCount=axGslbServiceIpServicePortCount, axInterfaceFlowCtrlOperStatus=axInterfaceFlowCtrlOperStatus, axFastHttpProxyStatFwdReqFail=axFastHttpProxyStatFwdReqFail, axFtpStatTotalDataSession=axFtpStatTotalDataSession, axSwitchStatsTTLExceedDrop=axSwitchStatsTTLExceedDrop, axIpNatPoolName=axIpNatPoolName, axFastHttpProxyStatTotalReqErr=axFastHttpProxyStatTotalReqErr, axNetStatExtAutoNatIdMismatch=axNetStatExtAutoNatIdMismatch, axTrunkTable=axTrunkTable, axSysSerialNumber=axSysSerialNumber, axTrunkStatBytesIn=axTrunkStatBytesIn, axVirtualServerPortEnabled=axVirtualServerPortEnabled, axHttpProxyStatTotalReq=axHttpProxyStatTotalReq, axNetStatExtOutOfSeqAckDrop=axNetStatExtOutOfSeqAckDrop, axGslbServiceIpIsVirtualServerFlag=axGslbServiceIpIsVirtualServerFlag, axConnReuseStatEntry=axConnReuseStatEntry, axTcpProxyStatTotalRxBuf=axTcpProxyStatTotalRxBuf, axNetStatTCPOutRSTL4Proxy=axNetStatTCPOutRSTL4Proxy, axNetStatExtNoResourceDrop=axNetStatExtNoResourceDrop, axGslbSiteDeviceStatsTable=axGslbSiteDeviceStatsTable, axSwitchStatAnomTCPSynFinDrop=axSwitchStatAnomTCPSynFinDrop, axVirtualServerPortTable=axVirtualServerPortTable, axGslbZoneServiceStickyModeCount=axGslbZoneServiceStickyModeCount, axFastHttpProxyStatClientRst=axFastHttpProxyStatClientRst, axHAPreemptStatusEnabled=axHAPreemptStatusEnabled, axNetStatSessionAgingOut=axNetStatSessionAgingOut, axInterfaceStatErrorsIn=axInterfaceStatErrorsIn, axFastHttpProxyStatServerConnMade=axFastHttpProxyStatServerConnMade, axSysHwFan3Speed=axSysHwFan3Speed, axPowerSupplyStatus=axPowerSupplyStatus, axAppGlobalTotalNewL4Connections=axAppGlobalTotalNewL4Connections, axVirtualServerStatBytesOut=axVirtualServerStatBytesOut, axNetStatExt=axNetStatExt, axIpNatStatsDynamicMappingAllocAddresses=axIpNatStatsDynamicMappingAllocAddresses, axGslbSiteForSlbDeviceName=axGslbSiteForSlbDeviceName, axServerStatEntry=axServerStatEntry, axServiceGroupMemberStatBytesOut=axServiceGroupMemberStatBytesOut, axSwitchStatsAnomIPOptionDrop=axSwitchStatsAnomIPOptionDrop, axHttpProxyStatServerReSel=axHttpProxyStatServerReSel, axVirtualServerNamePortStatTotalSuccL7Reqs=axVirtualServerNamePortStatTotalSuccL7Reqs, axPowerSupplyIndex=axPowerSupplyIndex, axHttpProxyStatTotalSvrSelErr=axHttpProxyStatTotalSvrSelErr, axHAARPRetry=axHAARPRetry, axHttpProxyStatTotalNoTuple=axHttpProxyStatTotalNoTuple, axSysCpuUsagePerPartitionValueAtPeriod=axSysCpuUsagePerPartitionValueAtPeriod, axNetStatServerSSLSIDMatch=axNetStatServerSSLSIDMatch, axGslbServiceIpPortCurrConns=axGslbServiceIpPortCurrConns, axServiceGroup=axServiceGroup, axInterfaceMediaActiveDuplex=axInterfaceMediaActiveDuplex, axGslbZoneServicePortNum=axGslbZoneServicePortNum, axHAFloatingIPIndex=axHAFloatingIPIndex, axGslbZoneServerModeCount=axGslbZoneServerModeCount, axLogSyslogHost=axLogSyslogHost, axServerStatNameInPort=axServerStatNameInPort, axTcpProxyStatTotalPassiveOpenConn=axTcpProxyStatTotalPassiveOpenConn, axPersistentStatsSIPPersistOK=axPersistentStatsSIPPersistOK, axSwitchStatProtoDownDrop=axSwitchStatProtoDownDrop, axIpNatStatsIntfInsideOutsideTable=axIpNatStatsIntfInsideOutsideTable, axVirtualServers=axVirtualServers, axServerPortEnabledState=axServerPortEnabledState, axAppGlobals=axAppGlobals, axAppGlobalSystemResourceName=axAppGlobalSystemResourceName, axHttpProxyStatServerRst=axHttpProxyStatServerRst)
mibBuilder.exportSymbols("A10-AX-MIB", axSysCpuUsageTable=axSysCpuUsageTable, axNetStatExtL4RcvFwdLastAck=axNetStatExtL4RcvFwdLastAck, axServerStatServerPersistConns=axServerStatServerPersistConns, axVirtualServerStatCurConns=axVirtualServerStatCurConns, axPersistentStatSIPPersistOK=axPersistentStatSIPPersistOK, axAppGlobalTotalSSLConnections=axAppGlobalTotalSSLConnections, axVlanCfgMemberEntry=axVlanCfgMemberEntry, axHttpProxyStatTotalFwdReqErr=axHttpProxyStatTotalFwdReqErr, axTcpProxyStatTCPFINW2State=axTcpProxyStatTCPFINW2State, axVirtualServerNameStatTotalCurrL7Reqs=axVirtualServerNameStatTotalCurrL7Reqs, axSwitchStatsIPv6NoRouteDrop=axSwitchStatsIPv6NoRouteDrop, axSessionGlobalStatReverseNATTCP=axSessionGlobalStatReverseNATTCP, axSessionGlobalStatConnCount=axSessionGlobalStatConnCount, axHAGroup=axHAGroup, axNetStatEntryTCPOutRSTNoSYN=axNetStatEntryTCPOutRSTNoSYN, axServerStatAddrInPortType=axServerStatAddrInPortType, axTcpProxyStatTotalOutTCPPkt=axTcpProxyStatTotalOutTCPPkt, axSwitchStatsIPFragReasmOk=axSwitchStatsIPFragReasmOk, axVirtualServerNamePortStatPeakConns=axVirtualServerNamePortStatPeakConns, axNetStatConnLimitDrop=axNetStatConnLimitDrop, axServerPortConnLimit=axServerPortConnLimit, axIpNatStatsDynamicMappingTable=axIpNatStatsDynamicMappingTable, axNetStatSYNThrotte=axNetStatSYNThrotte, axHAGlobalConfig=axHAGlobalConfig, axSysAFleXEngineVersion=axSysAFleXEngineVersion, axSwitchStatsIPFragOverlap=axSwitchStatsIPFragOverlap, axIpNatPoolEndAddress=axIpNatPoolEndAddress, axVirtualServerPortAddressType=axVirtualServerPortAddressType, axServerStatServerTotalL7Reqs=axServerStatServerTotalL7Reqs, axSysLowerOrLeftPowerSupplyStatus=axSysLowerOrLeftPowerSupplyStatus, axServerStatServerStatus=axServerStatServerStatus, axTcpProxyStatMemAlloc=axTcpProxyStatMemAlloc, axTrunkStatMcastOut=axTrunkStatMcastOut, axGslbServiceIpPortOperState=axGslbServiceIpPortOperState, axNetStatExtL4RcvReXmitSynAck=axNetStatExtL4RcvReXmitSynAck, axAppGlobalTotalCurrentConnections=axAppGlobalTotalCurrentConnections, axFastHttpProxyStatHttpReqSucc=axFastHttpProxyStatHttpReqSucc, axTcpProxyStatOrphanSocket=axTcpProxyStatOrphanSocket, axFastHttpProxyStatReqReTran=axFastHttpProxyStatReqReTran, axAppGlobalSystemResourceUsageEntry=axAppGlobalSystemResourceUsageEntry, axSmtpProxyStatsServerResel=axSmtpProxyStatsServerResel, axInterfaceStatEntry=axInterfaceStatEntry, axHttpProxyStatReqReTran=axHttpProxyStatReqReTran, axNetStatExtIgnoreMsl=axNetStatExtIgnoreMsl, axNetStatEntryServerSSLSIDReset=axNetStatEntryServerSSLSIDReset, axSmtpProxyStatEntry=axSmtpProxyStatEntry, axL3vGlobalStatsEntry=axL3vGlobalStatsEntry, axVirtualServerPortTCPProxyTemplate=axVirtualServerPortTCPProxyTemplate, axVirtualServerStat=axVirtualServerStat, axVirtualServerStatStatus=axVirtualServerStatStatus, axNetStatServerSelFail=axNetStatServerSelFail, axHAGroupPeerStatus=axHAGroupPeerStatus, axGslbSiteSlbDeviceEntry=axGslbSiteSlbDeviceEntry, axVirtualServerPortStatTotalL7Reqs=axVirtualServerPortStatTotalL7Reqs, axHttpProxyStatParseReqFail=axHttpProxyStatParseReqFail, axHttpProxyStatTotalSvrReSel=axHttpProxyStatTotalSvrReSel, axL3vGlobalStatsTotalL7Requests=axL3vGlobalStatsTotalL7Requests, axSmtpProxyStatsFwdReqFail=axSmtpProxyStatsFwdReqFail, axServiceGroupStatTotalL7Reqs=axServiceGroupStatTotalL7Reqs, axTcpProxyStatTotalConnAttemptFail=axTcpProxyStatTotalConnAttemptFail, axPersistentStatTable=axPersistentStatTable, axPersistentStatCookiePersistFail=axPersistentStatCookiePersistFail, axVlanRouterInterface=axVlanRouterInterface, axNetStatExtRstL7OnFailover=axNetStatExtRstL7OnFailover, axNetStatExtAutoReselectServer=axNetStatExtAutoReselectServer, axSmtpProxyStatServerSelFail=axSmtpProxyStatServerSelFail, axSwitchStatsUnknownProtoDrop=axSwitchStatsUnknownProtoDrop, axServerPortPriorityInServiceGroupMember=axServerPortPriorityInServiceGroupMember, axVirtualServerPortStatPeakConns=axVirtualServerPortStatPeakConns, axNetStatExtNatPortPreserveTry=axNetStatExtNatPortPreserveTry, axServerPortStatTotalConns=axServerPortStatTotalConns, axVirtualServerPortDisplayStatus=axVirtualServerPortDisplayStatus, axHttpProxyStatTotalNoProxy=axHttpProxyStatTotalNoProxy, axNetStatExtL3Dsr=axNetStatExtL3Dsr, axTrunkStatTotal=axTrunkStatTotal, axNetStatNoVportDrop=axNetStatNoVportDrop, axFanSpeed=axFanSpeed, axGslbServiceIpSiteName=axGslbServiceIpSiteName, axNetStatL4SynAttack=axNetStatL4SynAttack, axHttpProxyStatHttpReq=axHttpProxyStatHttpReq, axInterfaceStatMcastOut=axInterfaceStatMcastOut, axInterfaceMediaMaxSpeed=axInterfaceMediaMaxSpeed, axNetStatExtL4RcvAckOnSyn=axNetStatExtL4RcvAckOnSyn, axSwitchStatsLinkdownDrop=axSwitchStatsLinkdownDrop, axVirtualServerNameStatPktsOut=axVirtualServerNameStatPktsOut, axGslbZones=axGslbZones, axNetStatExtBwLimitExceedDrop=axNetStatExtBwLimitExceedDrop, axIpNatStatsGlobalHits=axIpNatStatsGlobalHits, axGslbServiceIpAdminState=axGslbServiceIpAdminState, axSwitchStatTTLExceedDrop=axSwitchStatTTLExceedDrop, axServiceGroupStatBytesIn=axServiceGroupStatBytesIn, axNetStatTCPOutReset=axNetStatTCPOutReset, axGslbZoneServiceBackupModeCount=axGslbZoneServiceBackupModeCount, axSmtpProxyStatNoProxyError=axSmtpProxyStatNoProxyError, axNetStatSourceNATFail=axNetStatSourceNATFail, axNotification=axNotification, axTrunkStatEntry=axTrunkStatEntry, axSysPrimaryVersionOnDisk=axSysPrimaryVersionOnDisk, axSysVersion=axSysVersion, axNetStatExtL4RcvFwdFinAck=axNetStatExtL4RcvFwdFinAck, axInterfaceName=axInterfaceName, axTcpProxyStatRstRvdEstConn=axTcpProxyStatRstRvdEstConn, axGslbSiteServiceIpOperState=axGslbSiteServiceIpOperState, axSwitchStatsIPTCPFragRcv=axSwitchStatsIPTCPFragRcv, axFastHttpProxyStatServerRst=axFastHttpProxyStatServerRst, axHttpProxyStatServerConnMade=axHttpProxyStatServerConnMade, axVlanName=axVlanName, axNetStatNoSYNPktDropFIN=axNetStatNoSYNPktDropFIN, axConnReuseStats=axConnReuseStats, axNetStatNoSynPktDrops=axNetStatNoSynPktDrops, axSwitchStatsAnomAllFragDrop=axSwitchStatsAnomAllFragDrop, axSysFirmwareVersion=axSysFirmwareVersion, axGslbServiceIpOperState=axGslbServiceIpOperState, axNetStatExtNatIcmpNoMatch=axNetStatExtNatIcmpNoMatch, axSysFanStatusEntry=axSysFanStatusEntry, axServerPortStatPersistConns=axServerPortStatPersistConns, axNetStatExtL4RcvRstOnSyn=axNetStatExtL4RcvRstOnSyn, axSslProxyStatsCurrProxyConns=axSslProxyStatsCurrProxyConns, axHATimeoutInterval=axHATimeoutInterval, axGslbZoneCount=axGslbZoneCount, axSwitchStatsIPFragRcv=axSwitchStatsIPFragRcv, axServers=axServers, axSysHwPhySystemTempStatus=axSysHwPhySystemTempStatus, axInterfaceStatDropsOut=axInterfaceStatDropsOut, axLogMonitorPri=axLogMonitorPri, axArpEntrySourceInterface=axArpEntrySourceInterface, axServerStatServerPeakConns=axServerStatServerPeakConns, axVirtualServerPortEntry=axVirtualServerPortEntry, axVirtualServerNamePortStatPktsOut=axVirtualServerNamePortStatPktsOut, axSmtpProxyStatNoTupleError=axSmtpProxyStatNoTupleError, axFastHttpProxyStatTotalFwdReqErr=axFastHttpProxyStatTotalFwdReqErr, axVirtualServerStatAddress=axVirtualServerStatAddress, axVirtualServerNamePortStatCurConns=axVirtualServerNamePortStatCurConns, axNetStatTCPSYNCookieSentFail=axNetStatTCPSYNCookieSentFail, axPersistentStatsSSLSIDPersistOK=axPersistentStatsSSLSIDPersistOK, axIpNatPoolTotalFree=axIpNatPoolTotalFree, axGslbSiteSlbDeviceSiteName=axGslbSiteSlbDeviceSiteName, axServerTable=axServerTable, axGlobalTotalAppPacketDrop=axGlobalTotalAppPacketDrop, axServiceGroupCount=axServiceGroupCount, axConnReuseStatTotalTerminated=axConnReuseStatTotalTerminated, axInterfaceMediaActiveSpeed=axInterfaceMediaActiveSpeed, axServerAddressInPort=axServerAddressInPort, axIpNatStatsDynamicMappingStartAddressType=axIpNatStatsDynamicMappingStartAddressType, axServerPortStatStatus=axServerPortStatStatus, axNetStatEntrySYNThrotte=axNetStatEntrySYNThrotte, axSysHwPhySystemTemp=axSysHwPhySystemTemp, axFastHttpProxyStatCpuIndex=axFastHttpProxyStatCpuIndex, axIpNatPoolStatsTable=axIpNatPoolStatsTable, axGlobalTotalL4SessionInteger=axGlobalTotalL4SessionInteger, axVirtualServerPortStatTotalCurrL7Reqs=axVirtualServerPortStatTotalCurrL7Reqs, axFastHttpProxyStatTotalSvrReSel=axFastHttpProxyStatTotalSvrReSel, axHAID=axHAID, axServerStatName=axServerStatName, axNetStatTCPSYNCookieSntFail=axNetStatTCPSYNCookieSntFail, axNetStatEntryCreateSSLSIDSucc=axNetStatEntryCreateSSLSIDSucc, axTcpProxyStatInputErr=axTcpProxyStatInputErr, axNetStatExtL4RcvRevFinDup=axNetStatExtL4RcvRevFinDup, axSwitchStatsL2Forward=axSwitchStatsL2Forward, axVirtualServerPortStatBytesOut=axVirtualServerPortStatBytesOut, axArpInfoTable=axArpInfoTable, axSysCpuUsagePerPartitionCtrlCpuFlag=axSysCpuUsagePerPartitionCtrlCpuFlag, axHttpProxyStatTotalSNATErr=axHttpProxyStatTotalSNATErr, axSwitchStatSRCPortSuppress=axSwitchStatSRCPortSuppress, axSwitchStatAnomPingDeathDrop=axSwitchStatAnomPingDeathDrop, axPersistentStatsPersistCookieNotFound=axPersistentStatsPersistCookieNotFound, axInterfaceTable=axInterfaceTable, axFastHttpProxyStatTotalReqPktOutOrder=axFastHttpProxyStatTotalReqPktOutOrder, axTrunkEntry=axTrunkEntry, axTcpProxyStatTotalInTCPPacket=axTcpProxyStatTotalInTCPPacket, axVirtualServerPortType=axVirtualServerPortType, axConnReuseStatTotalUNBound=axConnReuseStatTotalUNBound, axSslProxyStatsSessNotFound=axSslProxyStatsSessNotFound, axHttpProxyStatTotalPreMatureClose=axHttpProxyStatTotalPreMatureClose, axIpNatStatsGlobal=axIpNatStatsGlobal, axIpNatStatsInsideOutsideIntfIndex=axIpNatStatsInsideOutsideIntfIndex, axTcpProxyStatTimeWstate=axTcpProxyStatTimeWstate, axGslbSites=axGslbSites, axSslStatFailSSLHandshake=axSslStatFailSSLHandshake, axSysDiskTotalSpace=axSysDiskTotalSpace, axL3vGlobalStatsTotalCurrentConnections=axL3vGlobalStatsTotalCurrentConnections, axNetStatProxyNoSockDrops=axNetStatProxyNoSockDrops, axVirtualServerPortSIPTemplate=axVirtualServerPortSIPTemplate, axHAGroupStatusEntry=axHAGroupStatusEntry, axConnReuseStatTotalLongResponse=axConnReuseStatTotalLongResponse, axVirtualServerStatDisplayStatus=axVirtualServerStatDisplayStatus, axGslbSiteServiceIpAdminState=axGslbSiteServiceIpAdminState, axServerAddressInPortType=axServerAddressInPortType, axSwitchStatsARPReqRcv=axSwitchStatsARPReqRcv, axNetStatExtL4ServerHandshakeFail=axNetStatExtL4ServerHandshakeFail, axTcpProxyStatConnAttempFail=axTcpProxyStatConnAttempFail, axVirtualServerPort=axVirtualServerPort, axL3vGlobalStatsTotalNewL4Connections=axL3vGlobalStatsTotalNewL4Connections, axNetStatConnLimitReset=axNetStatConnLimitReset, axGlobalAppPacketDrop=axGlobalAppPacketDrop, axSessionGlobalStatConnSMPFree=axSessionGlobalStatConnSMPFree, axVlanId=axVlanId, axSslProxyStatsTotalProxyConns=axSslProxyStatsTotalProxyConns, axVirtualServerPortTCPTemplate=axVirtualServerPortTCPTemplate, axVirtualServerHAGroup=axVirtualServerHAGroup, axTcpProxyStatTCPSYNRCVState=axTcpProxyStatTCPSYNRCVState, axNetStatEntryConnRateLimitDrops=axNetStatEntryConnRateLimitDrops, axConnReuseStatCpuIndex=axConnReuseStatCpuIndex, axGslbGroupStatus=axGslbGroupStatus, axVirtualServerStatPktsIn=axVirtualServerStatPktsIn, axConnReuseStatTotalDelayedUNBind=axConnReuseStatTotalDelayedUNBind, axServerStatPortType=axServerStatPortType, axGslbSiteSlbDeviceTable=axGslbSiteSlbDeviceTable, axNetStatExtL4UdpReqsNoRsp=axNetStatExtL4UdpReqsNoRsp, axNetStatTCPSynCookieFail=axNetStatTCPSynCookieFail, axVirtualServerPortPersistTempl=axVirtualServerPortPersistTempl, axNetStatNoSYNPktDropRST=axNetStatNoSYNPktDropRST, axServiceGroupStatTable=axServiceGroupStatTable, axIpNatStatsInsideOutsideIntfDirection=axIpNatStatsInsideOutsideIntfDirection, axSmtpProxyStatsSvrPrematureClose=axSmtpProxyStatsSvrPrematureClose, axServiceGroupTable=axServiceGroupTable, axFanName=axFanName, axNetStatExtL4RcvReXmitSyn=axNetStatExtL4RcvReXmitSyn, axSmtpProxyStatSmtpReq=axSmtpProxyStatSmtpReq, axIpNatStatsInsideOutsideIntfName=axIpNatStatsInsideOutsideIntfName, axVirtualServerNameStatTable=axVirtualServerNameStatTable, axSmtpProxyStatsReqRetrans=axSmtpProxyStatsReqRetrans, axIpNatStatsIntfInsideOutside=axIpNatStatsIntfInsideOutside, axSysCpuIndexInUsage=axSysCpuIndexInUsage, axServiceGroupStatPersistConns=axServiceGroupStatPersistConns, axVirtualServerStatTotalSuccL7Reqs=axVirtualServerStatTotalSuccL7Reqs, axConnReuseStatOpenPersist=axConnReuseStatOpenPersist, axNetStatTCPSYNCookieSent=axNetStatTCPSYNCookieSent, axNetStatEntrySSLSIDPersistSucc=axNetStatEntrySSLSIDPersistSucc, axVirtualServerNameStat=axVirtualServerNameStat, axTrunkStatErrorsOut=axTrunkStatErrorsOut, axTcpProxyStatTotalCurrEstConn=axTcpProxyStatTotalCurrEstConn, axSysInfo=axSysInfo, axSslStatSSLFailedCryptoOperation=axSslStatSSLFailedCryptoOperation, axSmtpProxyStatsServerRST=axSmtpProxyStatsServerRST, axVirtualServerNamePortStatName=axVirtualServerNamePortStatName, axServiceGroupStatCurConns=axServiceGroupStatCurConns, axVirtualServerNameStatDisplayStatus=axVirtualServerNameStatDisplayStatus, axHAGroupLocalStatus=axHAGroupLocalStatus, axNetStatEntryServerSSLSIDNotMatch=axNetStatEntryServerSSLSIDNotMatch, axTrunk=axTrunk, axVirtualServerStatPktsOut=axVirtualServerStatPktsOut, axVirtualServerStatAddressType=axVirtualServerStatAddressType, axFtpStatALGPktReXmit=axFtpStatALGPktReXmit, axNetStatExtOtherSessionAgedOut=axNetStatExtOtherSessionAgedOut, axSwitchStatAnomIPOptionDrop=axSwitchStatAnomIPOptionDrop, axServerPortStatPeakConns=axServerPortStatPeakConns, axGslbServiceIPEntry=axGslbServiceIPEntry, axGslbSiteSlbForDeviceIpAddr=axGslbSiteSlbForDeviceIpAddr, axTrunkCfgMemberTable=axTrunkCfgMemberTable, axServerNameInServiceGroupMemberStat=axServerNameInServiceGroupMemberStat, axPowerSupplyVoltageDescription=axPowerSupplyVoltageDescription, axIpNatPoolPortUsage=axIpNatPoolPortUsage, axAppGlobalAllowedMinValue=axAppGlobalAllowedMinValue)
mibBuilder.exportSymbols("A10-AX-MIB", axFastHttpProxyStatTotalFwdDataReqErr=axFastHttpProxyStatTotalFwdDataReqErr, axVirtualServerStatPeakConns=axVirtualServerStatPeakConns, axNetStatExtUdpSessionAgedOut=axNetStatExtUdpSessionAgedOut, axGslbSiteSlbDeviceAdminPreference=axGslbSiteSlbDeviceAdminPreference, axSystem=axSystem, axServiceGroupMemberStatResponseTime=axServiceGroupMemberStatResponseTime, axNetStatExtTcpSynWithDataDrop=axNetStatExtTcpSynWithDataDrop, axServiceGroupMemberStatBytesIn=axServiceGroupMemberStatBytesIn, axVirtualServerPortStatBytesIn=axVirtualServerPortStatBytesIn, axInterfaceStatCollisions=axInterfaceStatCollisions, axNetStatEntryClientSSLSIDNotFound=axNetStatEntryClientSSLSIDNotFound, axIpNatPoolStartAddress=axIpNatPoolStartAddress, axVirtualServerPortStatCurConns=axVirtualServerPortStatCurConns, axHttpProxyStatTotalCRst=axHttpProxyStatTotalCRst, axGslbZoneStatsTable=axGslbZoneStatsTable, axSslStatCurrSSLConn=axSslStatCurrSSLConn, axLogEmailAddr=axLogEmailAddr, axServiceGroupDisplayStatus=axServiceGroupDisplayStatus, axTcpProxyStatTotalTxBuf=axTcpProxyStatTotalTxBuf, axSwitchStatAnomTCPNoFragDrop=axSwitchStatAnomTCPNoFragDrop, axPersistentStats=axPersistentStats, axSslProxyStatsSvrSelFail=axSslProxyStatsSvrSelFail, axHAFloatingIPHaGroupID=axHAFloatingIPHaGroupID, axNetStatExtAnomalyZeroWindow=axNetStatExtAnomalyZeroWindow, axNetStatIPOutNoRt=axNetStatIPOutNoRt, axHATimeoutRetry=axHATimeoutRetry, axVirtualServerPortDiameterTemplate=axVirtualServerPortDiameterTemplate, axServiceGroupMemberStatTotalSuccL7Reqs=axServiceGroupMemberStatTotalSuccL7Reqs, axPersistentStatsUrlHashPersistFail=axPersistentStatsUrlHashPersistFail, axNetStatExtL4UdpReqGreaterRsps=axNetStatExtL4UdpReqGreaterRsps, axIpNatStatsDynamicMappingPoolName=axIpNatStatsDynamicMappingPoolName, axAppGlobalStats=axAppGlobalStats, axSwitchStatIPTCPFragRcv=axSwitchStatIPTCPFragRcv, axSessionGlobalStatConnSMPAllocated=axSessionGlobalStatConnSMPAllocated, axNetStatExtL7CpsExceedDrop=axNetStatExtL7CpsExceedDrop, axLogSyslogPri=axLogSyslogPri, axSysAverageControlCpuUsage=axSysAverageControlCpuUsage, axSmtpProxyStatsSmtpReqSuccs=axSmtpProxyStatsSmtpReqSuccs, axTcpProxyStatTotalInTCPPkt=axTcpProxyStatTotalInTCPPkt, axSslStatModuleIndex=axSslStatModuleIndex, axLogSyslogHostEntry=axLogSyslogHostEntry, axVirtualServerNameStatTotalL7Reqs=axVirtualServerNameStatTotalL7Reqs, axFastHttpProxyStatServerSelFail=axFastHttpProxyStatServerSelFail, axVirtualServerPortStatAddress=axVirtualServerPortStatAddress, axVirtualServerPortStatTotConns=axVirtualServerPortStatTotConns, axHttpProxyStatServerPreMatureClose=axHttpProxyStatServerPreMatureClose, axHttpProxyStatFwdReqFail=axHttpProxyStatFwdReqFail, axSwitchStatsL4Process=axSwitchStatsL4Process, axSwitchStatsAnomSYNFragDrop=axSwitchStatsAnomSYNFragDrop, axGslbSiteSlbDeviceProtocolFlag=axGslbSiteSlbDeviceProtocolFlag, axTrunkCfgMemberOperStatus=axTrunkCfgMemberOperStatus, axSysSecondaryVersionOnCF=axSysSecondaryVersionOnCF, axServiceGroupStat=axServiceGroupStat, axServiceGroupMemberStatName=axServiceGroupMemberStatName, axVirtualServerPortHTTPTemplate=axVirtualServerPortHTTPTemplate, axSmtpProxyStatsFwdReqDataFail=axSmtpProxyStatsFwdReqDataFail, axSwitchStatLinkdownDrop=axSwitchStatLinkdownDrop, axFixedNatStats=axFixedNatStats, axGslbZoneSentResponses=axGslbZoneSentResponses, axGslbZoneStickyModeCount=axGslbZoneStickyModeCount, axGslbZoneServiceName=axGslbZoneServiceName, axIpNatStatsIntfInsideOutsideEntry=axIpNatStatsIntfInsideOutsideEntry, axVirtualServerPortName=axVirtualServerPortName, axNetStatUDPReceive=axNetStatUDPReceive, axServerPortHealthMonitor=axServerPortHealthMonitor, axServiceGroupMemberTable=axServiceGroupMemberTable, axVirtualServerNameStatPersistConns=axVirtualServerNameStatPersistConns, axConnReuseStatTotalMissedRes=axConnReuseStatTotalMissedRes)
