#
# PySNMP MIB module TELDAT-MON-INTERF-WLAN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/teldat/TELDAT-MON-INTERF-WLAN-MIB
# Produced by pysmi-1.1.12 at Tue Dec  3 10:11:55 2024
# On host fv-az575-513 platform Linux version 6.5.0-1025-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
iso, Integer32, Gauge32, Bits, MibIdentifier, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Counter64, Counter32, NotificationType, Unsigned32, TimeTicks, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Integer32", "Gauge32", "Bits", "MibIdentifier", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Counter64", "Counter32", "NotificationType", "Unsigned32", "TimeTicks", "ModuleIdentity")
DisplayString, MacAddress, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "MacAddress", "TextualConvention")
telProdNpMonInterfRouter, = mibBuilder.importSymbols("TELDAT-SW-STRUCTURE-MIB", "telProdNpMonInterfRouter")
class WlanRSSI(TextualConvention, Integer32):
    description = 'This type is used to represent receiver input levels in dBm.'
    status = 'mandatory'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(-110, 0)

class WlanRate(TextualConvention, Integer32):
    description = 'This type is used to represent WLAN data rates in 500 Kbps units.'
    status = 'mandatory'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 600)

telProdNpMonInterfWlan = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 4, 1, 2, 2, 2, 24))
telProdNpMonInterfWlanRadioTable = MibTable((1, 3, 6, 1, 4, 1, 2007, 4, 1, 2, 2, 2, 24, 1), )
if mibBuilder.loadTexts: telProdNpMonInterfWlanRadioTable.setStatus('mandatory')
if mibBuilder.loadTexts: telProdNpMonInterfWlanRadioTable.setDescription('The telProdNpMonInterfWlanRadioTable contains information relating to the \n                interfaces available on the system. Each entry corresponds to\n                an available WLAN interface. Entries cannot be added or \n                deleted by the user. \n\n                Creating entries: Entries are created by the system\n                automatically when a new WLAN module is installed.\n\n                Deleting entries: Entries are removed by the system\n                after the appropriate WLAN module is removed.')
telProdNpMonInterfWlanRadioEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2007, 4, 1, 2, 2, 2, 24, 1, 1), ).setIndexNames((0, "TELDAT-MON-INTERF-WLAN-MIB", "telProdNpMonInterfWlanRadioIfIndex"))
if mibBuilder.loadTexts: telProdNpMonInterfWlanRadioEntry.setStatus('mandatory')
if mibBuilder.loadTexts: telProdNpMonInterfWlanRadioEntry.setDescription('A base list of objects that are information about Wlan radio data.\n        The index is the number of the interface')
telProdNpMonInterfWlanRadioIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 4, 1, 2, 2, 2, 24, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telProdNpMonInterfWlanRadioIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: telProdNpMonInterfWlanRadioIfIndex.setDescription('Unique radio index.')
telProdNpMonInterfWlanRadioIfMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 4, 1, 2, 2, 2, 24, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 8, 9, 12, 14, 15))).clone(namedValues=NamedValues(("mode-11a", 1), ("mode-11b", 2), ("mode-11g", 4), ("mode-11b-11g", 6), ("mode-11n", 8), ("mode-11a-11n", 9), ("mode-11g-11n", 12), ("mode-11b-11g-11n", 14), ("mode-11a-11b-11g-11n", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: telProdNpMonInterfWlanRadioIfMode.setStatus('mandatory')
if mibBuilder.loadTexts: telProdNpMonInterfWlanRadioIfMode.setDescription('Mixed and compatibility modes between various 802.11 substandards.')
telProdNpMonInterfWlanRadioIfSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 4, 1, 2, 2, 2, 24, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telProdNpMonInterfWlanRadioIfSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: telProdNpMonInterfWlanRadioIfSpeed.setDescription('The value defines the bitrate or the coding scheme to use for data frames.')
telProdNpMonInterfWlanRadioIfChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 4, 1, 2, 2, 2, 24, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: telProdNpMonInterfWlanRadioIfChannel.setStatus('mandatory')
if mibBuilder.loadTexts: telProdNpMonInterfWlanRadioIfChannel.setDescription('The physical channel ')
telProdNpMonInterfWlanRadioIfRtsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 4, 1, 2, 2, 2, 24, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: telProdNpMonInterfWlanRadioIfRtsThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: telProdNpMonInterfWlanRadioIfRtsThreshold.setDescription('This attribute shall indicate the number of octets in an\n        MPDU, below which an RTS/CTS handshake shall not be\n        performed, except as RTS/CTS is used as a cross modulation\n        protection mechanism. An RTS/CTS\n        handshake shall be performed at the beginning of any frame\n        exchange sequence where the MPDU is of type Data or\n        Management, the MPDU has an individual address in the\n        Address1 field, and the length of the MPDU is greater than\n        this threshold. Setting this attribute to be larger than the\n        maximum MSDU size shall have the effect of turning off the\n        RTS/CTS handshake for frames of Data or Management type\n        transmitted by this STA. Setting this attribute to one \n        shall have the effect of turning on the RTS/CTS handshake\n        for all frames of Data or Management type transmitted by\n        this STA.')
telProdNpMonInterfWlanRadioIfTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 4, 1, 2, 2, 2, 24, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: telProdNpMonInterfWlanRadioIfTxPower.setStatus('mandatory')
if mibBuilder.loadTexts: telProdNpMonInterfWlanRadioIfTxPower.setDescription('Transmitter output power in dBm.')
telProdNpMonInterfWlanRadioIfBand = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 4, 1, 2, 2, 2, 24, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telProdNpMonInterfWlanRadioIfBand.setStatus('mandatory')
if mibBuilder.loadTexts: telProdNpMonInterfWlanRadioIfBand.setDescription('Frequency band.')
telProdNpMonInterfWlanRadioIfCountry = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 4, 1, 2, 2, 2, 24, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: telProdNpMonInterfWlanRadioIfCountry.setStatus('mandatory')
if mibBuilder.loadTexts: telProdNpMonInterfWlanRadioIfCountry.setDescription("This attribute identifies the country in which the station is operating.\n        The first two octets of this string is the two character country code as\n        described in document ISO/IEC 3166-1. The third octet shall be one of the\n        following:\n        1. an ASCII space character, if the regulations under which the\n        station is operating encompass all environments in the country,\n        2. an ASCII 'O' character, if the regulations under which the\n        station is operating are for an Outdoor environment only, or\n        3. an ASCII 'I' character, if the regulations under which the\n        station is operating are for an Indoor environment only.")
telProdNpMonInterfWlanRadioIfAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 4, 1, 2, 2, 2, 24, 1, 1, 9), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telProdNpMonInterfWlanRadioIfAddress.setStatus('mandatory')
if mibBuilder.loadTexts: telProdNpMonInterfWlanRadioIfAddress.setDescription('The MAC Address.')
telProdNpMonInterfWlanRadioIfRealChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 4, 1, 2, 2, 2, 24, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: telProdNpMonInterfWlanRadioIfRealChannel.setStatus('mandatory')
if mibBuilder.loadTexts: telProdNpMonInterfWlanRadioIfRealChannel.setDescription('The actually selected channel for transmit and receive.\n         In most cases this is the same value as wlanIfChannel,\n         except if automatic channel selection is active. In this \n         case, this variable shows the channel in use.')
telProdNpMonInterfWlanRadioIfFragmentThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 4, 1, 2, 2, 2, 24, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(256, 8000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: telProdNpMonInterfWlanRadioIfFragmentThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: telProdNpMonInterfWlanRadioIfFragmentThreshold.setDescription('This attribute shall specify the mandatory maximum size, in\n        octets, of the PSDU that may be delivered to the PHY.\n        This maximum size does not apply in the case of A-MPDU. An\n        MSDU, A-MSDU or MMPDU shall be broken into fragments if its\n        size exceeds the value of this attribute after adding MAC\n        headers and trailers. An MSDU, A-MSDU or MMPDU shall be\n        fragmented when the resulting frame has an individual address\n        in the Address1 field, and the length of the frame is larger\n        than this threshold. The default value for this attribute\n        shall be the lesser of 8000 or the aMPDUMaxLength or the\n        aPSDUMaxLength of the attached PHY and shall never exceed the\n        lesser of 8000 or the aMPDUMaxLength or the\n        aPSDUMaxLength of the attached PHY. The value of this\n        attribute shall never be less than 256.')
telProdNpMonInterfWlanBSSTable = MibTable((1, 3, 6, 1, 4, 1, 2007, 4, 1, 2, 2, 2, 24, 2), )
if mibBuilder.loadTexts: telProdNpMonInterfWlanBSSTable.setStatus('mandatory')
if mibBuilder.loadTexts: telProdNpMonInterfWlanBSSTable.setDescription(' Describes a WLAN VSS and the corresponding settings')
telProdNpMonInterfWlanBSSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2007, 4, 1, 2, 2, 2, 24, 2, 1), ).setIndexNames((0, "TELDAT-MON-INTERF-WLAN-MIB", "telProdNpMonInterfWlanBSSIfIndex"))
if mibBuilder.loadTexts: telProdNpMonInterfWlanBSSEntry.setStatus('mandatory')
if mibBuilder.loadTexts: telProdNpMonInterfWlanBSSEntry.setDescription('A base list of objects that are information about BSS data.\n        The index is the number of the interface')
telProdNpMonInterfWlanBSSIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 4, 1, 2, 2, 2, 24, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telProdNpMonInterfWlanBSSIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: telProdNpMonInterfWlanBSSIfIndex.setDescription('Unique BSS index.')
telProdNpMonInterfWlanBSSId = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 4, 1, 2, 2, 2, 24, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: telProdNpMonInterfWlanBSSId.setStatus('mandatory')
if mibBuilder.loadTexts: telProdNpMonInterfWlanBSSId.setDescription('This attribute reflects the SSID.')
telProdNpMonInterfWlanBSSPrivInvoked = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 4, 1, 2, 2, 2, 24, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("enable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: telProdNpMonInterfWlanBSSPrivInvoked.setStatus('mandatory')
if mibBuilder.loadTexts: telProdNpMonInterfWlanBSSPrivInvoked.setDescription('Privacy invoked. If enabled, some level of security is invoked\n        when transmitting data frames.')
telProdNpMonInterfWlanBSSRsn = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 4, 1, 2, 2, 2, 24, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("wpa", 0), ("wpa2", 1), ("none", 2), ("wpa-wpa2", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: telProdNpMonInterfWlanBSSRsn.setStatus('mandatory')
if mibBuilder.loadTexts: telProdNpMonInterfWlanBSSRsn.setDescription('The Robust Security Network setting.')
telProdNpMonInterfWlanBSSAkm = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 4, 1, 2, 2, 2, 24, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("dot1x", 0), ("psk", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: telProdNpMonInterfWlanBSSAkm.setStatus('mandatory')
if mibBuilder.loadTexts: telProdNpMonInterfWlanBSSAkm.setDescription('The Authenticated Key Management setting.')
telProdNpMonInterfWlanBSSCipher = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 4, 1, 2, 2, 2, 24, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("auto", 1), ("wep", 2), ("tkip", 3), ("aes-ccm", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: telProdNpMonInterfWlanBSSCipher.setStatus('mandatory')
if mibBuilder.loadTexts: telProdNpMonInterfWlanBSSCipher.setDescription('The ciphers in use for WPA or WPA2.\n         auto(1) is used for TKIP and AES')
telProdNpMonInterfWlanBSSDefaultKey = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 4, 1, 2, 2, 2, 24, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("key1", 1), ("key2", 2), ("key3", 3), ("key4", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: telProdNpMonInterfWlanBSSDefaultKey.setStatus('mandatory')
if mibBuilder.loadTexts: telProdNpMonInterfWlanBSSDefaultKey.setDescription('Default key for WEP encryption. This is the key used\n        to transmit data frames if WEP is enabled')
telProdNpMonInterfWlanBSSKey1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 4, 1, 2, 2, 2, 24, 2, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: telProdNpMonInterfWlanBSSKey1.setStatus('mandatory')
if mibBuilder.loadTexts: telProdNpMonInterfWlanBSSKey1.setDescription('Key string for WEP key number 1.')
telProdNpMonInterfWlanBSSKey2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 4, 1, 2, 2, 2, 24, 2, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 33))).setMaxAccess("readonly")
if mibBuilder.loadTexts: telProdNpMonInterfWlanBSSKey2.setStatus('mandatory')
if mibBuilder.loadTexts: telProdNpMonInterfWlanBSSKey2.setDescription('Key string for WEP key number 2.')
telProdNpMonInterfWlanBSSKey3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 4, 1, 2, 2, 2, 24, 2, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 33))).setMaxAccess("readonly")
if mibBuilder.loadTexts: telProdNpMonInterfWlanBSSKey3.setStatus('mandatory')
if mibBuilder.loadTexts: telProdNpMonInterfWlanBSSKey3.setDescription('Key string for WEP key number 3.')
telProdNpMonInterfWlanBSSKey4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 4, 1, 2, 2, 2, 24, 2, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 33))).setMaxAccess("readonly")
if mibBuilder.loadTexts: telProdNpMonInterfWlanBSSKey4.setStatus('mandatory')
if mibBuilder.loadTexts: telProdNpMonInterfWlanBSSKey4.setDescription('Key string for WEP key number 4.')
telProdNpMonInterfWlanBSSMaxAsoc = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 4, 1, 2, 2, 2, 24, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: telProdNpMonInterfWlanBSSMaxAsoc.setStatus('mandatory')
if mibBuilder.loadTexts: telProdNpMonInterfWlanBSSMaxAsoc.setDescription('The number of allowed clients of the requested BSS.')
telProdNpMonInterfWlanBSSAcl = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 4, 1, 2, 2, 2, 24, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disable", 0), ("deny-entries", 1), ("allow-entries", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: telProdNpMonInterfWlanBSSAcl.setStatus('mandatory')
if mibBuilder.loadTexts: telProdNpMonInterfWlanBSSAcl.setDescription('MAC Media Access Control via MAC Address.')
telProdNpMonInterfWlanBSSClientIsolation = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 4, 1, 2, 2, 2, 24, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: telProdNpMonInterfWlanBSSClientIsolation.setStatus('mandatory')
if mibBuilder.loadTexts: telProdNpMonInterfWlanBSSClientIsolation.setDescription('Client isolation setting.')
telProdNpMonInterfWlanBSSHidden = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 4, 1, 2, 2, 2, 24, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("yes", 2), ("no", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: telProdNpMonInterfWlanBSSHidden.setStatus('mandatory')
if mibBuilder.loadTexts: telProdNpMonInterfWlanBSSHidden.setDescription('Define whether SSID is hidden (yes(2)) or not (no(1)).')
telProdNpMonInterfWlanBSSBssId = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 4, 1, 2, 2, 2, 24, 2, 1, 16), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telProdNpMonInterfWlanBSSBssId.setStatus('mandatory')
if mibBuilder.loadTexts: telProdNpMonInterfWlanBSSBssId.setDescription('This object contains the actual current BSSID for the service set.')
telProdNpMonInterfWlanBSSBeaconPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 4, 1, 2, 2, 2, 24, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: telProdNpMonInterfWlanBSSBeaconPeriod.setStatus('mandatory')
if mibBuilder.loadTexts: telProdNpMonInterfWlanBSSBeaconPeriod.setDescription('This attribute shall specify the number of TU that a\n         station shall use for scheduling Beacon transmissions.\n         This value is transmitted in Beacon and Probe Response\n         frames.')
telProdNpMonInterfWlanBSSDTIMPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 4, 1, 2, 2, 2, 24, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: telProdNpMonInterfWlanBSSDTIMPeriod.setStatus('mandatory')
if mibBuilder.loadTexts: telProdNpMonInterfWlanBSSDTIMPeriod.setDescription('This attribute shall specify the number of beacon\n         intervals that shall elapse between transmission of\n         Beacons frames containing a TIM element whose DTIM\n         Count field is 0. This value is transmitted in\n         the DTIM Period field of Beacon frames.')
telProdNpMonInterfWlanBSSMSDUTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 4, 1, 2, 2, 2, 24, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telProdNpMonInterfWlanBSSMSDUTx.setStatus('mandatory')
if mibBuilder.loadTexts: telProdNpMonInterfWlanBSSMSDUTx.setDescription('This attribute counts the total number of \n        packets transmitted on this BSS.')
telProdNpMonInterfWlanBSSMSDURx = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 4, 1, 2, 2, 2, 24, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telProdNpMonInterfWlanBSSMSDURx.setStatus('mandatory')
if mibBuilder.loadTexts: telProdNpMonInterfWlanBSSMSDURx.setDescription('This attribute counts the total number of \n       packets received by this BSS.')
telProdNpMonInterfWlanBSSBytesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 4, 1, 2, 2, 2, 24, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telProdNpMonInterfWlanBSSBytesTx.setStatus('mandatory')
if mibBuilder.loadTexts: telProdNpMonInterfWlanBSSBytesTx.setDescription('Transmitted Bytes.')
telProdNpMonInterfWlanBSSBytesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 4, 1, 2, 2, 2, 24, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telProdNpMonInterfWlanBSSBytesRx.setStatus('mandatory')
if mibBuilder.loadTexts: telProdNpMonInterfWlanBSSBytesRx.setDescription('Received Bytes.')
telProdNpMonInterfWlanBSSCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 4, 1, 2, 2, 2, 24, 2, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telProdNpMonInterfWlanBSSCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: telProdNpMonInterfWlanBSSCurrent.setDescription('Count of current associated stations')
telProdNpMonInterfWlanBSSOpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 4, 1, 2, 2, 2, 24, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("access-point", 0), ("station", 1), ("wbr", 2), ("repeater", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: telProdNpMonInterfWlanBSSOpMode.setStatus('mandatory')
if mibBuilder.loadTexts: telProdNpMonInterfWlanBSSOpMode.setDescription('This value specify that the scan properties is used for AP,\n       client or wds.')
telProdNpMonInterfwlanBSSPassPhrase = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 4, 1, 2, 2, 2, 24, 2, 1, 25), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: telProdNpMonInterfwlanBSSPassPhrase.setStatus('mandatory')
if mibBuilder.loadTexts: telProdNpMonInterfwlanBSSPassPhrase.setDescription('Passphrase string for WPA-PSK and WPA2-PSK.')
telProdNpMonInterfWlanStationTable = MibTable((1, 3, 6, 1, 4, 1, 2007, 4, 1, 2, 2, 2, 24, 3), )
if mibBuilder.loadTexts: telProdNpMonInterfWlanStationTable.setStatus('mandatory')
if mibBuilder.loadTexts: telProdNpMonInterfWlanStationTable.setDescription('The telProdNpMonInterfWlanStation contains information relating to the \n        clients currently associated to our access points.\n        Each entry corresponds to\n        an associated client station (STA). \n        Entries cannot be added or deleted by the user. \n\n        Creating entries: Entries are created by the system\n        automatically when a new STA ia associated.\n\n        Deleting entries: Entries are removed by the system\n        whenever an associated STA is removed.')
telProdNpMonInterfWlanStationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2007, 4, 1, 2, 2, 2, 24, 3, 1), ).setIndexNames((0, "TELDAT-MON-INTERF-WLAN-MIB", "telProdNpMonInterfWlanStationIfIndex"), (0, "TELDAT-MON-INTERF-WLAN-MIB", "telProdNpMonInterfWlanStationAddress"))
if mibBuilder.loadTexts: telProdNpMonInterfWlanStationEntry.setStatus('mandatory')
if mibBuilder.loadTexts: telProdNpMonInterfWlanStationEntry.setDescription('A base list of objects that are information about stations.\n        The index is the number of the interface and the MAC address of the station')
telProdNpMonInterfWlanStationIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 4, 1, 2, 2, 2, 24, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telProdNpMonInterfWlanStationIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: telProdNpMonInterfWlanStationIfIndex.setDescription('Interface number.')
telProdNpMonInterfWlanStationAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 4, 1, 2, 2, 2, 24, 3, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telProdNpMonInterfWlanStationAddress.setStatus('mandatory')
if mibBuilder.loadTexts: telProdNpMonInterfWlanStationAddress.setDescription('MAC Address of the Assigned STA.')
telProdNpMonInterfWlanStationState = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 4, 1, 2, 2, 2, 24, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telProdNpMonInterfWlanStationState.setStatus('mandatory')
if mibBuilder.loadTexts: telProdNpMonInterfWlanStationState.setDescription('Station state.')
telProdNpMonInterfWlanStationSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 4, 1, 2, 2, 2, 24, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 1), ("wep40", 2), ("wep104", 3), ("wpa-psk", 4), ("wpa", 5), ("wpa2", 6), ("wpa2-psk", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: telProdNpMonInterfWlanStationSecurity.setStatus('mandatory')
if mibBuilder.loadTexts: telProdNpMonInterfWlanStationSecurity.setDescription('The Security Option of the Station.')
telProdNpMonInterfWlanStationNode = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 4, 1, 2, 2, 2, 24, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("access-point", 2), ("client", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: telProdNpMonInterfWlanStationNode.setStatus('mandatory')
if mibBuilder.loadTexts: telProdNpMonInterfWlanStationNode.setDescription('The Node type of the Station.')
telProdNpMonInterfWlanStationMSDUTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 4, 1, 2, 2, 2, 24, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telProdNpMonInterfWlanStationMSDUTx.setStatus('mandatory')
if mibBuilder.loadTexts: telProdNpMonInterfWlanStationMSDUTx.setDescription('This attribute counts the total number of \n        packets transmitted to this station.')
telProdNpMonInterfWlanStationMSDURx = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 4, 1, 2, 2, 2, 24, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telProdNpMonInterfWlanStationMSDURx.setStatus('mandatory')
if mibBuilder.loadTexts: telProdNpMonInterfWlanStationMSDURx.setDescription('This attribute counts the total number of \n        packets received from this station.')
telProdNpMonInterfWlanStationBytesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 4, 1, 2, 2, 2, 24, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telProdNpMonInterfWlanStationBytesTx.setStatus('mandatory')
if mibBuilder.loadTexts: telProdNpMonInterfWlanStationBytesTx.setDescription('This attribute counts the total number of \n        octets transmitted to this station.')
telProdNpMonInterfWlanStationBytesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 4, 1, 2, 2, 2, 24, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telProdNpMonInterfWlanStationBytesRx.setStatus('mandatory')
if mibBuilder.loadTexts: telProdNpMonInterfWlanStationBytesRx.setDescription('This attribute counts the total number of \n        octets received from this station.')
telProdNpMonInterfWlanStationRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 4, 1, 2, 2, 2, 24, 3, 1, 10), WlanRate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telProdNpMonInterfWlanStationRate.setStatus('mandatory')
if mibBuilder.loadTexts: telProdNpMonInterfWlanStationRate.setDescription('This attribute reflects the data rate of the latest \n        packet received from this station, in 500 kbps units.')
telProdNpMonInterfWlanStationSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 4, 1, 2, 2, 2, 24, 3, 1, 11), WlanRSSI()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: telProdNpMonInterfWlanStationSignal.setStatus('mandatory')
if mibBuilder.loadTexts: telProdNpMonInterfWlanStationSignal.setDescription('This attribute shows the received signal strength in dBm.')
telProdNpMonInterfWlanStationNoise = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 4, 1, 2, 2, 2, 24, 3, 1, 12), WlanRSSI()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: telProdNpMonInterfWlanStationNoise.setStatus('mandatory')
if mibBuilder.loadTexts: telProdNpMonInterfWlanStationNoise.setDescription('This attribute shows the measured noise level in dBm, or \n         0 if no connection can be established.')
telProdNpMonInterfWlanStationConnectTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 4, 1, 2, 2, 2, 24, 3, 1, 13), Counter32()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: telProdNpMonInterfWlanStationConnectTime.setStatus('mandatory')
if mibBuilder.loadTexts: telProdNpMonInterfWlanStationConnectTime.setDescription('This attribute records the system uptime at the moment \n        the client successfully finished association.')
telProdNpMonInterfWlanACLTable = MibTable((1, 3, 6, 1, 4, 1, 2007, 4, 1, 2, 2, 2, 24, 4), )
if mibBuilder.loadTexts: telProdNpMonInterfWlanACLTable.setStatus('mandatory')
if mibBuilder.loadTexts: telProdNpMonInterfWlanACLTable.setDescription('The WLAN Access List based on MAC Addresses')
telProdNpMonInterfWlanACLEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2007, 4, 1, 2, 2, 2, 24, 4, 1), ).setIndexNames((0, "TELDAT-MON-INTERF-WLAN-MIB", "telProdNpMonInterfWlanACLIfIndex"), (0, "TELDAT-MON-INTERF-WLAN-MIB", "telProdNpMonInterfWlanACLAddress"))
if mibBuilder.loadTexts: telProdNpMonInterfWlanACLEntry.setStatus('mandatory')
if mibBuilder.loadTexts: telProdNpMonInterfWlanACLEntry.setDescription('The WLAN Access List based on MAC Addresses entry.\n        Index: telProdNpMonInterfWlanACLIfIndex telProdNpMonInterfWlanACLAddress.')
telProdNpMonInterfWlanACLIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 4, 1, 2, 2, 2, 24, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telProdNpMonInterfWlanACLIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: telProdNpMonInterfWlanACLIfIndex.setDescription('The Interface the MAC Address belongs.')
telProdNpMonInterfWlanACLAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 4, 1, 2, 2, 2, 24, 4, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telProdNpMonInterfWlanACLAddress.setStatus('mandatory')
if mibBuilder.loadTexts: telProdNpMonInterfWlanACLAddress.setDescription('The MAC Address for the accepted client')
telProdNpMonInterfWlanScanResultsTable = MibTable((1, 3, 6, 1, 4, 1, 2007, 4, 1, 2, 2, 2, 24, 5), )
if mibBuilder.loadTexts: telProdNpMonInterfWlanScanResultsTable.setStatus('mandatory')
if mibBuilder.loadTexts: telProdNpMonInterfWlanScanResultsTable.setDescription('This table contains the list of BSS entries found by foreground \n         or background scanning in client mode.')
telProdNpMonInterfWlanScanResultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2007, 4, 1, 2, 2, 2, 24, 5, 1), ).setIndexNames((0, "TELDAT-MON-INTERF-WLAN-MIB", "telProdNpMonInterfWlanScanResultsIfIndex"), (0, "TELDAT-MON-INTERF-WLAN-MIB", "telProdNpMonInterfWlanScanResultsIndex"))
if mibBuilder.loadTexts: telProdNpMonInterfWlanScanResultsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: telProdNpMonInterfWlanScanResultsEntry.setDescription('A entry of the table. \n        Index: telProdNpMonInterfWlanScanResultsIfIndex, telProdNpMonInterfWlanScanResultsIndex')
telProdNpMonInterfWlanScanResultsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 4, 1, 2, 2, 2, 24, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telProdNpMonInterfWlanScanResultsIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: telProdNpMonInterfWlanScanResultsIfIndex.setDescription('ifIndex of the WLAN Interface the scan results belong to.')
telProdNpMonInterfWlanScanResultsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 4, 1, 2, 2, 2, 24, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telProdNpMonInterfWlanScanResultsIndex.setStatus('mandatory')
if mibBuilder.loadTexts: telProdNpMonInterfWlanScanResultsIndex.setDescription('Auxiliary index for different BSS entries.')
telProdNpMonInterfWlanScanResultsBSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 4, 1, 2, 2, 2, 24, 5, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telProdNpMonInterfWlanScanResultsBSSID.setStatus('mandatory')
if mibBuilder.loadTexts: telProdNpMonInterfWlanScanResultsBSSID.setDescription('BSSID of this BSS.')
telProdNpMonInterfWlanScanResultsSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 4, 1, 2, 2, 2, 24, 5, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telProdNpMonInterfWlanScanResultsSSID.setStatus('mandatory')
if mibBuilder.loadTexts: telProdNpMonInterfWlanScanResultsSSID.setDescription('SSID aka network name of this BSS. \n         If broadcasting of SSID is disabled on this \n         BSS, this string may be empty.')
telProdNpMonInterfWlanScanResultsChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 4, 1, 2, 2, 2, 24, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: telProdNpMonInterfWlanScanResultsChannel.setStatus('mandatory')
if mibBuilder.loadTexts: telProdNpMonInterfWlanScanResultsChannel.setDescription('The channel this BSS was received on.')
telProdNpMonInterfWlanScanResultsSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 4, 1, 2, 2, 2, 24, 5, 1, 6), WlanRSSI()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: telProdNpMonInterfWlanScanResultsSignal.setStatus('mandatory')
if mibBuilder.loadTexts: telProdNpMonInterfWlanScanResultsSignal.setDescription('Receive signal strength of this BSS.')
telProdNpMonInterfWlanScanResultsNoise = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 4, 1, 2, 2, 2, 24, 5, 1, 7), WlanRSSI()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: telProdNpMonInterfWlanScanResultsNoise.setStatus('mandatory')
if mibBuilder.loadTexts: telProdNpMonInterfWlanScanResultsNoise.setDescription("This attribute shows the measured noise level in dBm, or \n       0 when this value is not available.\n       It's the value measured during the last reception of data.")
telProdNpMonInterfWlanScanResultsBeaconPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 4, 1, 2, 2, 2, 24, 5, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: telProdNpMonInterfWlanScanResultsBeaconPeriod.setStatus('mandatory')
if mibBuilder.loadTexts: telProdNpMonInterfWlanScanResultsBeaconPeriod.setDescription('This attribute contains the number of TU that this \n         BSS uses for scheduling Beacon transmissions.')
telProdNpMonInterfWlanScanResultsRates = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 4, 1, 2, 2, 2, 24, 5, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telProdNpMonInterfWlanScanResultsRates.setStatus('mandatory')
if mibBuilder.loadTexts: telProdNpMonInterfWlanScanResultsRates.setDescription('This attribute contains one octet for each \n         supported rate in this BSS, in Mbps units.')
telProdNpMonInterfWlanScanResultsBasicRates = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 4, 1, 2, 2, 2, 24, 5, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telProdNpMonInterfWlanScanResultsBasicRates.setStatus('mandatory')
if mibBuilder.loadTexts: telProdNpMonInterfWlanScanResultsBasicRates.setDescription('This attribute contains one octet for each required \n         basic rate in this BSS, in Mbps units.')
telProdNpMonInterfWlanScanResultsExtendedRates = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 4, 1, 2, 2, 2, 24, 5, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telProdNpMonInterfWlanScanResultsExtendedRates.setStatus('mandatory')
if mibBuilder.loadTexts: telProdNpMonInterfWlanScanResultsExtendedRates.setDescription('This attribute contains one octet for each supported \n         extended rate in this BSS, in Mbps units.')
telProdNpMonInterfWlanWMMTable = MibTable((1, 3, 6, 1, 4, 1, 2007, 4, 1, 2, 2, 2, 24, 6), )
if mibBuilder.loadTexts: telProdNpMonInterfWlanWMMTable.setStatus('mandatory')
if mibBuilder.loadTexts: telProdNpMonInterfWlanWMMTable.setDescription('Describes a WLAN WMM Access category settings')
telProdNpMonInterfWlanWMMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2007, 4, 1, 2, 2, 2, 24, 6, 1), ).setIndexNames((0, "TELDAT-MON-INTERF-WLAN-MIB", "telProdNpMonInterfWlanWMMAccCat"), (0, "TELDAT-MON-INTERF-WLAN-MIB", "telProdNpMonInterfWlanWMMwlanIf"), (0, "TELDAT-MON-INTERF-WLAN-MIB", "telProdNpMonInterfWlanWMMType"))
if mibBuilder.loadTexts: telProdNpMonInterfWlanWMMEntry.setStatus('mandatory')
if mibBuilder.loadTexts: telProdNpMonInterfWlanWMMEntry.setDescription('A entry of the table.\n         Index: telProdNpMonInterfWlanWMMAccCat, telProdNpMonInterfWlanWMMwlanIf, telProdNpMonInterfWlanWMMType ')
telProdNpMonInterfWlanWMMwlanIf = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 4, 1, 2, 2, 2, 24, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telProdNpMonInterfWlanWMMwlanIf.setStatus('mandatory')
if mibBuilder.loadTexts: telProdNpMonInterfWlanWMMwlanIf.setDescription('Radio index the AC belongs to.')
telProdNpMonInterfWlanWMMAccCat = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 4, 1, 2, 2, 2, 24, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("besteffort", 1), ("background", 2), ("video", 3), ("voice", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: telProdNpMonInterfWlanWMMAccCat.setStatus('mandatory')
if mibBuilder.loadTexts: telProdNpMonInterfWlanWMMAccCat.setDescription("Access category type, each category is mandatory for a wlanIf.\n\n         An access category (AC) is a label for the common set of enhanced\n         distributed channel access (EDCA) parameters that are used by a \n         quality of service (QoS) station (QSTA) to contend for the channel\n         in order to transmit medium access control (MAC) service data \n         units (MSDUs) with certain priorities.\n\n         (More info in '802.11E / 3.123 access category (AC)').\n\n         besteffort(1): standard/default priority\n         background(2): low priority\n         video(3): medium priority (higher than 'besteffort')\n         voice(4): high priority")
telProdNpMonInterfWlanWMMType = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 4, 1, 2, 2, 2, 24, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("access-point", 1), ("station", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: telProdNpMonInterfWlanWMMType.setStatus('mandatory')
if mibBuilder.loadTexts: telProdNpMonInterfWlanWMMType.setDescription('Type to which this telProdNpMonInterfWlanWMMEntry corresponds.\n         Type access-point means the own parameters for WMM are changed.\n         The entries with type station will be provided to the connected \n         stations via WMM-IE.')
telProdNpMonInterfWlanWMMaCWmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 4, 1, 2, 2, 2, 24, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telProdNpMonInterfWlanWMMaCWmin.setStatus('mandatory')
if mibBuilder.loadTexts: telProdNpMonInterfWlanWMMaCWmin.setDescription('Minimum size of contention window. \n         for AC_BK and AC_BE telProdNpMonInterfWlanWMMaCWmin = telProdNpMonInterfWlanIfCWmin,\n         for AC_VI telProdNpMonInterfWlanWMMaCWmin = (telProdNpMonInterfWlanIfCWmin-1)/2,\n          for AC_VO telProdNpMonInterfWlanWMMaCWmin = (telProdNpMonInterfWlanIfCWmin-3)/4.')
telProdNpMonInterfWlanWMMaCWmax = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 4, 1, 2, 2, 2, 24, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telProdNpMonInterfWlanWMMaCWmax.setStatus('mandatory')
if mibBuilder.loadTexts: telProdNpMonInterfWlanWMMaCWmax.setDescription('Maximum size of contention window. \n         for AC_BK telProdNpMonInterfWlanWMMaCWmax = telProdNpMonInterfWlanIfCWmax,\n         for AC_BE telProdNpMonInterfWlanWMMaCWmax = 4*telProdNpMonInterfWlanIfCWmin + 3,\n         for AC_VI telProdNpMonInterfWlanWMMaCWmax = telProdNpMonInterfWlanIfCWmin,\n         for AC_VO telProdNpMonInterfWlanWMMaCWmax = (telProdNpMonInterfWlanIfCWmin-1)/2.')
telProdNpMonInterfWlanWMMAifsn = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 4, 1, 2, 2, 2, 24, 6, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: telProdNpMonInterfWlanWMMAifsn.setStatus('mandatory')
if mibBuilder.loadTexts: telProdNpMonInterfWlanWMMAifsn.setDescription('Arbitration Inter-Frame Space Number (AIFSN)\n         for this Access category.')
telProdNpMonInterfWlanWMMTxopLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 4, 1, 2, 2, 2, 24, 6, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: telProdNpMonInterfWlanWMMTxopLimit.setStatus('mandatory')
if mibBuilder.loadTexts: telProdNpMonInterfWlanWMMTxopLimit.setDescription('802.11 mode Transmit Opportunity Limit. The TxopLimit\n          value is given in units of 32 microseconds.')
telProdNpMonInterfWlanWMMAckPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 4, 1, 2, 2, 2, 24, 6, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ack", 1), ("noAck", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: telProdNpMonInterfWlanWMMAckPolicy.setStatus('mandatory')
if mibBuilder.loadTexts: telProdNpMonInterfWlanWMMAckPolicy.setDescription("Ack policy for this Access category (default value is 'ack(1)').")
telProdNpMonInterfWlanWMMACM = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 4, 1, 2, 2, 2, 24, 6, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: telProdNpMonInterfWlanWMMACM.setStatus('mandatory')
if mibBuilder.loadTexts: telProdNpMonInterfWlanWMMACM.setDescription("ACM (admission control) policy for this Access category i\n                (default value is 'disabled(2)').")
telProdNpMonInterfWlanClientTable = MibTable((1, 3, 6, 1, 4, 1, 2007, 4, 1, 2, 2, 2, 24, 7), )
if mibBuilder.loadTexts: telProdNpMonInterfWlanClientTable.setStatus('mandatory')
if mibBuilder.loadTexts: telProdNpMonInterfWlanClientTable.setDescription(' Describes a WLAN Client and the corresponding\n\tsettings')
telProdNpMonInterfwlanClientEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2007, 4, 1, 2, 2, 2, 24, 7, 1), ).setIndexNames((0, "TELDAT-MON-INTERF-WLAN-MIB", "telProdNpMonInterfWlanClientIfIndex"), (0, "TELDAT-MON-INTERF-WLAN-MIB", "telProdNpMonInterfWlanClientSSID"))
if mibBuilder.loadTexts: telProdNpMonInterfwlanClientEntry.setStatus('mandatory')
if mibBuilder.loadTexts: telProdNpMonInterfwlanClientEntry.setDescription('A base list of objects with information about the networks the\n         WLAN can connect to when acting as a client.\n         The indexes are the number of the WLAN interface and the network\n         index')
telProdNpMonInterfWlanClientIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 4, 1, 2, 2, 2, 24, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telProdNpMonInterfWlanClientIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: telProdNpMonInterfWlanClientIfIndex.setDescription('WLAN interface index.')
telProdNpMonInterfWlanClientSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 4, 1, 2, 2, 2, 24, 7, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telProdNpMonInterfWlanClientSSID.setStatus('mandatory')
if mibBuilder.loadTexts: telProdNpMonInterfWlanClientSSID.setDescription('The Service Set Name')
telProdNpMonInterfWlanClientPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 4, 1, 2, 2, 2, 24, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("enable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: telProdNpMonInterfWlanClientPriority.setStatus('mandatory')
if mibBuilder.loadTexts: telProdNpMonInterfWlanClientPriority.setDescription('Priority of the network. The higher the priority,\n         the sooner the client tries to associate with it.')
telProdNpMonInterfWlanClientPrivInvoked = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 4, 1, 2, 2, 2, 24, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("enable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: telProdNpMonInterfWlanClientPrivInvoked.setStatus('mandatory')
if mibBuilder.loadTexts: telProdNpMonInterfWlanClientPrivInvoked.setDescription('Privacy invoked. If enabled, some level of security is invoked\n        when transmitting data frames.')
telProdNpMonInterfWlanClientRsn = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 4, 1, 2, 2, 2, 24, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("wpa", 0), ("wpa2", 1), ("none", 2), ("wpa-wpa2", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: telProdNpMonInterfWlanClientRsn.setStatus('mandatory')
if mibBuilder.loadTexts: telProdNpMonInterfWlanClientRsn.setDescription('The Robust Security Network settings.')
telProdNpMonInterfWlanClientAkm = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 4, 1, 2, 2, 2, 24, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("dot1x", 0), ("psk", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: telProdNpMonInterfWlanClientAkm.setStatus('mandatory')
if mibBuilder.loadTexts: telProdNpMonInterfWlanClientAkm.setDescription('The Authenticated Key Management setting.')
telProdNpMonInterfWlanClientCipher = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 4, 1, 2, 2, 2, 24, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("auto", 1), ("wep", 2), ("tkip", 3), ("aes-ccm", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: telProdNpMonInterfWlanClientCipher.setStatus('mandatory')
if mibBuilder.loadTexts: telProdNpMonInterfWlanClientCipher.setDescription('The ciphers in use for WPA or WPA2.\n         auto(1) is used for TKIP and AES')
telProdNpMonInterfWlanClientDefaultKey = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 4, 1, 2, 2, 2, 24, 7, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("key1", 1), ("key2", 2), ("key3", 3), ("key4", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: telProdNpMonInterfWlanClientDefaultKey.setStatus('mandatory')
if mibBuilder.loadTexts: telProdNpMonInterfWlanClientDefaultKey.setDescription('Default key for WEP encryption. This is the key used\n        to transmit data frames if WEP is enabled')
telProdNpMonInterfWlanClientKey1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 4, 1, 2, 2, 2, 24, 7, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 33))).setMaxAccess("readonly")
if mibBuilder.loadTexts: telProdNpMonInterfWlanClientKey1.setStatus('mandatory')
if mibBuilder.loadTexts: telProdNpMonInterfWlanClientKey1.setDescription('Key string for WEP key number 1.')
telProdNpMonInterfWlanClientKey2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 4, 1, 2, 2, 2, 24, 7, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 33))).setMaxAccess("readonly")
if mibBuilder.loadTexts: telProdNpMonInterfWlanClientKey2.setStatus('mandatory')
if mibBuilder.loadTexts: telProdNpMonInterfWlanClientKey2.setDescription('Key string for WEP key number 2.')
telProdNpMonInterfWlanClientKey3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 4, 1, 2, 2, 2, 24, 7, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 33))).setMaxAccess("readonly")
if mibBuilder.loadTexts: telProdNpMonInterfWlanClientKey3.setStatus('mandatory')
if mibBuilder.loadTexts: telProdNpMonInterfWlanClientKey3.setDescription('Key string for WEP key number 3.')
telProdNpMonInterfWlanClientKey4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 4, 1, 2, 2, 2, 24, 7, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 33))).setMaxAccess("readonly")
if mibBuilder.loadTexts: telProdNpMonInterfWlanClientKey4.setStatus('mandatory')
if mibBuilder.loadTexts: telProdNpMonInterfWlanClientKey4.setDescription('Key string for WEP key number 4.')
telProdNpMonInterfwlanClientPassPhrase = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 4, 1, 2, 2, 2, 24, 7, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: telProdNpMonInterfwlanClientPassPhrase.setStatus('mandatory')
if mibBuilder.loadTexts: telProdNpMonInterfwlanClientPassPhrase.setDescription('Passphrase string for WPA-PSK and WPA2-PSK.')
mibBuilder.exportSymbols("TELDAT-MON-INTERF-WLAN-MIB", telProdNpMonInterfWlanStationBytesTx=telProdNpMonInterfWlanStationBytesTx, telProdNpMonInterfWlanStationConnectTime=telProdNpMonInterfWlanStationConnectTime, telProdNpMonInterfWlanRadioIfCountry=telProdNpMonInterfWlanRadioIfCountry, telProdNpMonInterfWlanBSSCipher=telProdNpMonInterfWlanBSSCipher, telProdNpMonInterfWlanACLIfIndex=telProdNpMonInterfWlanACLIfIndex, telProdNpMonInterfWlanBSSIfIndex=telProdNpMonInterfWlanBSSIfIndex, telProdNpMonInterfWlanClientCipher=telProdNpMonInterfWlanClientCipher, telProdNpMonInterfWlanBSSTable=telProdNpMonInterfWlanBSSTable, telProdNpMonInterfWlanScanResultsNoise=telProdNpMonInterfWlanScanResultsNoise, telProdNpMonInterfWlanClientPrivInvoked=telProdNpMonInterfWlanClientPrivInvoked, telProdNpMonInterfWlanStationBytesRx=telProdNpMonInterfWlanStationBytesRx, telProdNpMonInterfWlanScanResultsChannel=telProdNpMonInterfWlanScanResultsChannel, telProdNpMonInterfWlanStationAddress=telProdNpMonInterfWlanStationAddress, telProdNpMonInterfWlanBSSBeaconPeriod=telProdNpMonInterfWlanBSSBeaconPeriod, telProdNpMonInterfWlanBSSKey3=telProdNpMonInterfWlanBSSKey3, telProdNpMonInterfWlanScanResultsBasicRates=telProdNpMonInterfWlanScanResultsBasicRates, telProdNpMonInterfWlanRadioIfTxPower=telProdNpMonInterfWlanRadioIfTxPower, telProdNpMonInterfWlanStationEntry=telProdNpMonInterfWlanStationEntry, telProdNpMonInterfWlanRadioIfRealChannel=telProdNpMonInterfWlanRadioIfRealChannel, telProdNpMonInterfWlanBSSId=telProdNpMonInterfWlanBSSId, telProdNpMonInterfWlanACLAddress=telProdNpMonInterfWlanACLAddress, telProdNpMonInterfWlanClientIfIndex=telProdNpMonInterfWlanClientIfIndex, telProdNpMonInterfWlanWMMaCWmin=telProdNpMonInterfWlanWMMaCWmin, telProdNpMonInterfWlanBSSBytesRx=telProdNpMonInterfWlanBSSBytesRx, telProdNpMonInterfWlanStationNoise=telProdNpMonInterfWlanStationNoise, telProdNpMonInterfWlanStationSignal=telProdNpMonInterfWlanStationSignal, telProdNpMonInterfWlanStationMSDURx=telProdNpMonInterfWlanStationMSDURx, telProdNpMonInterfWlanBSSKey1=telProdNpMonInterfWlanBSSKey1, telProdNpMonInterfWlanBSSMSDURx=telProdNpMonInterfWlanBSSMSDURx, WlanRSSI=WlanRSSI, telProdNpMonInterfWlanRadioIfRtsThreshold=telProdNpMonInterfWlanRadioIfRtsThreshold, telProdNpMonInterfWlanBSSMSDUTx=telProdNpMonInterfWlanBSSMSDUTx, telProdNpMonInterfWlanScanResultsIndex=telProdNpMonInterfWlanScanResultsIndex, telProdNpMonInterfWlanClientSSID=telProdNpMonInterfWlanClientSSID, telProdNpMonInterfWlanStationSecurity=telProdNpMonInterfWlanStationSecurity, telProdNpMonInterfWlanStationState=telProdNpMonInterfWlanStationState, telProdNpMonInterfWlanScanResultsSSID=telProdNpMonInterfWlanScanResultsSSID, telProdNpMonInterfWlanRadioIfAddress=telProdNpMonInterfWlanRadioIfAddress, telProdNpMonInterfWlanStationMSDUTx=telProdNpMonInterfWlanStationMSDUTx, telProdNpMonInterfWlanClientRsn=telProdNpMonInterfWlanClientRsn, telProdNpMonInterfWlanBSSHidden=telProdNpMonInterfWlanBSSHidden, telProdNpMonInterfWlanRadioEntry=telProdNpMonInterfWlanRadioEntry, telProdNpMonInterfWlanClientTable=telProdNpMonInterfWlanClientTable, telProdNpMonInterfWlanACLEntry=telProdNpMonInterfWlanACLEntry, telProdNpMonInterfWlanScanResultsRates=telProdNpMonInterfWlanScanResultsRates, telProdNpMonInterfWlanRadioIfFragmentThreshold=telProdNpMonInterfWlanRadioIfFragmentThreshold, telProdNpMonInterfWlanRadioIfIndex=telProdNpMonInterfWlanRadioIfIndex, telProdNpMonInterfWlanRadioIfMode=telProdNpMonInterfWlanRadioIfMode, telProdNpMonInterfWlanRadioIfBand=telProdNpMonInterfWlanRadioIfBand, telProdNpMonInterfWlanBSSKey4=telProdNpMonInterfWlanBSSKey4, telProdNpMonInterfWlanWMMACM=telProdNpMonInterfWlanWMMACM, telProdNpMonInterfWlanBSSMaxAsoc=telProdNpMonInterfWlanBSSMaxAsoc, telProdNpMonInterfWlanClientKey3=telProdNpMonInterfWlanClientKey3, telProdNpMonInterfWlanClientKey1=telProdNpMonInterfWlanClientKey1, telProdNpMonInterfWlanStationIfIndex=telProdNpMonInterfWlanStationIfIndex, telProdNpMonInterfWlanWMMAifsn=telProdNpMonInterfWlanWMMAifsn, telProdNpMonInterfWlanStationTable=telProdNpMonInterfWlanStationTable, telProdNpMonInterfWlanScanResultsBSSID=telProdNpMonInterfWlanScanResultsBSSID, telProdNpMonInterfWlanClientKey4=telProdNpMonInterfWlanClientKey4, telProdNpMonInterfWlanRadioIfChannel=telProdNpMonInterfWlanRadioIfChannel, telProdNpMonInterfWlanWMMEntry=telProdNpMonInterfWlanWMMEntry, telProdNpMonInterfWlanScanResultsEntry=telProdNpMonInterfWlanScanResultsEntry, telProdNpMonInterfWlanBSSDefaultKey=telProdNpMonInterfWlanBSSDefaultKey, telProdNpMonInterfWlanScanResultsIfIndex=telProdNpMonInterfWlanScanResultsIfIndex, telProdNpMonInterfWlanClientDefaultKey=telProdNpMonInterfWlanClientDefaultKey, telProdNpMonInterfWlanBSSRsn=telProdNpMonInterfWlanBSSRsn, telProdNpMonInterfWlanWMMwlanIf=telProdNpMonInterfWlanWMMwlanIf, telProdNpMonInterfWlanClientPriority=telProdNpMonInterfWlanClientPriority, telProdNpMonInterfWlanWMMTable=telProdNpMonInterfWlanWMMTable, telProdNpMonInterfWlanBSSAkm=telProdNpMonInterfWlanBSSAkm, telProdNpMonInterfWlanClientAkm=telProdNpMonInterfWlanClientAkm, telProdNpMonInterfWlanScanResultsBeaconPeriod=telProdNpMonInterfWlanScanResultsBeaconPeriod, telProdNpMonInterfWlanWMMType=telProdNpMonInterfWlanWMMType, telProdNpMonInterfWlanWMMaCWmax=telProdNpMonInterfWlanWMMaCWmax, telProdNpMonInterfWlanACLTable=telProdNpMonInterfWlanACLTable, telProdNpMonInterfwlanClientPassPhrase=telProdNpMonInterfwlanClientPassPhrase, telProdNpMonInterfWlanBSSCurrent=telProdNpMonInterfWlanBSSCurrent, telProdNpMonInterfWlanScanResultsSignal=telProdNpMonInterfWlanScanResultsSignal, telProdNpMonInterfWlanBSSEntry=telProdNpMonInterfWlanBSSEntry, telProdNpMonInterfWlanBSSAcl=telProdNpMonInterfWlanBSSAcl, telProdNpMonInterfwlanClientEntry=telProdNpMonInterfwlanClientEntry, telProdNpMonInterfWlanWMMAccCat=telProdNpMonInterfWlanWMMAccCat, telProdNpMonInterfWlanBSSBytesTx=telProdNpMonInterfWlanBSSBytesTx, telProdNpMonInterfWlanBSSKey2=telProdNpMonInterfWlanBSSKey2, telProdNpMonInterfWlanBSSClientIsolation=telProdNpMonInterfWlanBSSClientIsolation, telProdNpMonInterfWlanRadioTable=telProdNpMonInterfWlanRadioTable, telProdNpMonInterfWlan=telProdNpMonInterfWlan, WlanRate=WlanRate, telProdNpMonInterfWlanRadioIfSpeed=telProdNpMonInterfWlanRadioIfSpeed, telProdNpMonInterfWlanScanResultsTable=telProdNpMonInterfWlanScanResultsTable, telProdNpMonInterfWlanScanResultsExtendedRates=telProdNpMonInterfWlanScanResultsExtendedRates, telProdNpMonInterfWlanBSSOpMode=telProdNpMonInterfWlanBSSOpMode, telProdNpMonInterfWlanBSSBssId=telProdNpMonInterfWlanBSSBssId, telProdNpMonInterfwlanBSSPassPhrase=telProdNpMonInterfwlanBSSPassPhrase, telProdNpMonInterfWlanWMMAckPolicy=telProdNpMonInterfWlanWMMAckPolicy, telProdNpMonInterfWlanStationNode=telProdNpMonInterfWlanStationNode, telProdNpMonInterfWlanStationRate=telProdNpMonInterfWlanStationRate, telProdNpMonInterfWlanClientKey2=telProdNpMonInterfWlanClientKey2, telProdNpMonInterfWlanBSSPrivInvoked=telProdNpMonInterfWlanBSSPrivInvoked, telProdNpMonInterfWlanBSSDTIMPeriod=telProdNpMonInterfWlanBSSDTIMPeriod, telProdNpMonInterfWlanWMMTxopLimit=telProdNpMonInterfWlanWMMTxopLimit)
