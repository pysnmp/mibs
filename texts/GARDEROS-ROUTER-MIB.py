#
# PySNMP MIB module GARDEROS-ROUTER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/garderos/GARDEROS-ROUTER-MIB
# Produced by pysmi-1.1.12 at Thu Sep 26 02:13:49 2024
# On host fv-az1144-917 platform Linux version 6.8.0-1014-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
garderos, = mibBuilder.importSymbols("GARDEROS-SMI-MIB", "garderos")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
Counter32, ModuleIdentity, Counter64, Unsigned32, IpAddress, TimeTicks, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Gauge32, ObjectIdentity, MibIdentifier, Integer32, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "ModuleIdentity", "Counter64", "Unsigned32", "IpAddress", "TimeTicks", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Gauge32", "ObjectIdentity", "MibIdentifier", "Integer32", "iso")
DisplayString, TextualConvention, PhysAddress = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "PhysAddress")
router = ModuleIdentity((1, 3, 6, 1, 4, 1, 16108, 3))
router.setRevisions(('2017-03-10 10:18',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: router.setRevisionsDescriptions(('Router',))
if mibBuilder.loadTexts: router.setLastUpdated('201703101018Z')
if mibBuilder.loadTexts: router.setOrganization('Garderos GmbH')
if mibBuilder.loadTexts: router.setContactInfo('info@garderos.com')
if mibBuilder.loadTexts: router.setDescription('The MIB Module for Garderos Router Products')
class RouterType(TextualConvention, Integer32):
    description = 'Type of device'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(3))
    namedValues = NamedValues(("grs", 3))

class RouterComponent(TextualConvention, Integer32):
    description = 'Component who generated the trap'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))
    namedValues = NamedValues(("netd", 1), ("radius", 2), ("www", 3), ("ppp", 4), ("configd", 5), ("snmpd", 6), ("system", 7), ("ntpd", 8), ("sshd", 9), ("telnetd", 10), ("console", 11), ("cli", 12), ("dhcpd", 13))

class RouterSeverity(TextualConvention, Integer32):
    description = 'The severity of the event associated to the trap'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("debug", 0), ("info", 1), ("error", 2), ("panic", 3))

class RouterSyslogSeverity(TextualConvention, Integer32):
    description = 'The syslog severity of the event associated to the trap'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("emergency", 0), ("alert", 1), ("critical", 2), ("error", 3), ("warning", 4), ("notice", 5), ("info", 6), ("debug", 7))

routerMIB = ObjectIdentity((1, 3, 6, 1, 4, 1, 16108, 3, 1))
if mibBuilder.loadTexts: routerMIB.setStatus('current')
if mibBuilder.loadTexts: routerMIB.setDescription('Router MIB')
routerNotifications = ObjectIdentity((1, 3, 6, 1, 4, 1, 16108, 3, 1, 0))
if mibBuilder.loadTexts: routerNotifications.setStatus('current')
if mibBuilder.loadTexts: routerNotifications.setDescription('Notifications')
routerObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1))
if mibBuilder.loadTexts: routerObjects.setStatus('current')
if mibBuilder.loadTexts: routerObjects.setDescription('GRS object')
routerInformation = ObjectIdentity((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1))
if mibBuilder.loadTexts: routerInformation.setStatus('current')
if mibBuilder.loadTexts: routerInformation.setDescription('GRS information object')
routerTrap = ObjectIdentity((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 3))
if mibBuilder.loadTexts: routerTrap.setStatus('current')
if mibBuilder.loadTexts: routerTrap.setDescription('Traps')
routerTables = ObjectIdentity((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1000))
if mibBuilder.loadTexts: routerTables.setStatus('current')
if mibBuilder.loadTexts: routerTables.setDescription('GRS list definitions.')
routerDhcpIpv4Tables = ObjectIdentity((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1000, 10))
if mibBuilder.loadTexts: routerDhcpIpv4Tables.setStatus('current')
if mibBuilder.loadTexts: routerDhcpIpv4Tables.setDescription('DHCP IPv4')
routerLqeTables = ObjectIdentity((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1000, 20))
if mibBuilder.loadTexts: routerLqeTables.setStatus('current')
if mibBuilder.loadTexts: routerLqeTables.setDescription('LQE')
routerWwanTables = ObjectIdentity((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1000, 100))
if mibBuilder.loadTexts: routerWwanTables.setStatus('current')
if mibBuilder.loadTexts: routerWwanTables.setDescription('WWAN')
routerDslTables = ObjectIdentity((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1000, 200))
if mibBuilder.loadTexts: routerDslTables.setStatus('current')
if mibBuilder.loadTexts: routerDslTables.setDescription('DSL')
routerConformance = ObjectIdentity((1, 3, 6, 1, 4, 1, 16108, 3, 1, 2))
if mibBuilder.loadTexts: routerConformance.setStatus('current')
if mibBuilder.loadTexts: routerConformance.setDescription('Conformance')
routerGroups = ObjectIdentity((1, 3, 6, 1, 4, 1, 16108, 3, 1, 2, 1))
if mibBuilder.loadTexts: routerGroups.setStatus('current')
if mibBuilder.loadTexts: routerGroups.setDescription('Groups')
routerCompliances = ObjectIdentity((1, 3, 6, 1, 4, 1, 16108, 3, 1, 2, 2))
if mibBuilder.loadTexts: routerCompliances.setStatus('current')
if mibBuilder.loadTexts: routerCompliances.setDescription('Compliance')
routerModuleCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 16108, 3, 1, 2, 2, 1)).setObjects(("GARDEROS-ROUTER-MIB", "routerNotificationGroup"), ("GARDEROS-ROUTER-MIB", "routerInformationGroup"), ("GARDEROS-ROUTER-MIB", "routerDhcpIpv4SubnetGroup"), ("GARDEROS-ROUTER-MIB", "routerLqeResultGroup"), ("GARDEROS-ROUTER-MIB", "routerWwanModemGeneralGroup"), ("GARDEROS-ROUTER-MIB", "routerDslModemGeneralGroup"), ("GARDEROS-ROUTER-MIB", "routerTrapObjectGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    routerModuleCompliance = routerModuleCompliance.setStatus('current')
if mibBuilder.loadTexts: routerModuleCompliance.setDescription('The compliance statement for entities which\n                 implement the router MIB.')
routerInformationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 16108, 3, 1, 2, 1, 1)).setObjects(("GARDEROS-ROUTER-MIB", "routerName"), ("GARDEROS-ROUTER-MIB", "routerVersion"), ("GARDEROS-ROUTER-MIB", "routerConfigAge"), ("GARDEROS-ROUTER-MIB", "routerConfigType"), ("GARDEROS-ROUTER-MIB", "routerConfigServer"), ("GARDEROS-ROUTER-MIB", "routerKernel"), ("GARDEROS-ROUTER-MIB", "routerSystemMac"), ("GARDEROS-ROUTER-MIB", "routerTemperature"), ("GARDEROS-ROUTER-MIB", "routerSerial"), ("GARDEROS-ROUTER-MIB", "routerSecureBoot"), ("GARDEROS-ROUTER-MIB", "routerStartupConfigHash"), ("GARDEROS-ROUTER-MIB", "routerDescription"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    routerInformationGroup = routerInformationGroup.setStatus('current')
if mibBuilder.loadTexts: routerInformationGroup.setDescription('Group of GRS standard MIB objects')
routerName = MibScalar((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerName.setStatus('current')
if mibBuilder.loadTexts: routerName.setDescription('GRS name')
routerVersion = MibScalar((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerVersion.setStatus('current')
if mibBuilder.loadTexts: routerVersion.setDescription('Version')
routerConfigAge = MibScalar((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerConfigAge.setStatus('current')
if mibBuilder.loadTexts: routerConfigAge.setDescription('Configuration Age')
routerConfigType = MibScalar((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerConfigType.setStatus('current')
if mibBuilder.loadTexts: routerConfigType.setDescription('Configuration source type')
routerConfigServer = MibScalar((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerConfigServer.setStatus('current')
if mibBuilder.loadTexts: routerConfigServer.setDescription('URL of the configuration source')
routerKernel = MibScalar((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerKernel.setStatus('current')
if mibBuilder.loadTexts: routerKernel.setDescription('OS information (output of uname -a)')
routerSystemMac = MibScalar((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1, 7), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerSystemMac.setStatus('current')
if mibBuilder.loadTexts: routerSystemMac.setDescription('System MAC address')
routerTemperature = MibScalar((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerTemperature.setStatus('current')
if mibBuilder.loadTexts: routerTemperature.setDescription('Temperature of the device in centigrade')
routerSerial = MibScalar((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerSerial.setStatus('current')
if mibBuilder.loadTexts: routerSerial.setDescription('Serial number of the device.')
routerSecureBoot = MibScalar((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerSecureBoot.setStatus('current')
if mibBuilder.loadTexts: routerSecureBoot.setDescription('State of secure boot.')
routerStartupConfigHash = MibScalar((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerStartupConfigHash.setStatus('current')
if mibBuilder.loadTexts: routerStartupConfigHash.setDescription('MD5 hash of the startup configuration.')
routerDescription = MibScalar((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerDescription.setStatus('current')
if mibBuilder.loadTexts: routerDescription.setDescription('Description of router.')
routerNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 16108, 3, 1, 2, 1, 2)).setObjects(("GARDEROS-ROUTER-MIB", "routerNotification"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    routerNotificationGroup = routerNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: routerNotificationGroup.setDescription('Garderos Notifications Group')
routerNotification = NotificationType((1, 3, 6, 1, 4, 1, 16108, 3, 1, 0, 1)).setObjects(("GARDEROS-ROUTER-MIB", "routerName"), ("GARDEROS-ROUTER-MIB", "routerTrapSeverity"), ("GARDEROS-ROUTER-MIB", "routerTrapComponent"), ("GARDEROS-ROUTER-MIB", "routerTrapType"), ("GARDEROS-ROUTER-MIB", "routerTrapDescription"), ("GARDEROS-ROUTER-MIB", "routerTrapErrorCode"), ("GARDEROS-ROUTER-MIB", "routerTrapErrorDescription"), ("GARDEROS-ROUTER-MIB", "routerTrapSyslogSeverity"))
if mibBuilder.loadTexts: routerNotification.setStatus('current')
if mibBuilder.loadTexts: routerNotification.setDescription('Our sent trap itself')
routerTrapObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 16108, 3, 1, 2, 1, 3)).setObjects(("GARDEROS-ROUTER-MIB", "routerTrapSeverity"), ("GARDEROS-ROUTER-MIB", "routerTrapType"), ("GARDEROS-ROUTER-MIB", "routerTrapComponent"), ("GARDEROS-ROUTER-MIB", "routerTrapDescription"), ("GARDEROS-ROUTER-MIB", "routerTrapErrorCode"), ("GARDEROS-ROUTER-MIB", "routerTrapErrorDescription"), ("GARDEROS-ROUTER-MIB", "routerTrapSyslogSeverity"), ("GARDEROS-ROUTER-MIB", "routerName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    routerTrapObjectGroup = routerTrapObjectGroup.setStatus('current')
if mibBuilder.loadTexts: routerTrapObjectGroup.setDescription('Garderos Group of all trap objects')
routerTrapSeverity = MibScalar((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 3, 1), RouterSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerTrapSeverity.setStatus('current')
if mibBuilder.loadTexts: routerTrapSeverity.setDescription('Severity')
routerTrapComponent = MibScalar((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 3, 2), RouterComponent()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerTrapComponent.setStatus('current')
if mibBuilder.loadTexts: routerTrapComponent.setDescription('Component (netd|radius|www|ppp|configd|snmpd|system|ntpd|sshd|telnetd|console|cli|dhcpd)')
routerTrapType = MibScalar((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 3, 3), RouterType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerTrapType.setStatus('current')
if mibBuilder.loadTexts: routerTrapType.setDescription('Type (grs)')
routerTrapDescription = MibScalar((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 3, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerTrapDescription.setStatus('current')
if mibBuilder.loadTexts: routerTrapDescription.setDescription('Unique description of the error')
routerTrapErrorCode = MibScalar((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerTrapErrorCode.setStatus('current')
if mibBuilder.loadTexts: routerTrapErrorCode.setDescription('Unique error code of the error')
routerTrapErrorDescription = MibScalar((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 3, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerTrapErrorDescription.setStatus('current')
if mibBuilder.loadTexts: routerTrapErrorDescription.setDescription('Error code description')
routerTrapSyslogSeverity = MibScalar((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 3, 7), RouterSyslogSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerTrapSyslogSeverity.setStatus('current')
if mibBuilder.loadTexts: routerTrapSyslogSeverity.setDescription('Syslog severity value')
routerDhcpIpv4SubnetTable = MibTable((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1000, 10, 1), )
if mibBuilder.loadTexts: routerDhcpIpv4SubnetTable.setStatus('current')
if mibBuilder.loadTexts: routerDhcpIpv4SubnetTable.setDescription('DHCP IPv4 subnets')
routerDhcpIpv4SubnetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1000, 10, 1, 1), ).setIndexNames((0, "GARDEROS-ROUTER-MIB", "routerDhcpIpv4SubnetIndex"))
if mibBuilder.loadTexts: routerDhcpIpv4SubnetEntry.setStatus('current')
if mibBuilder.loadTexts: routerDhcpIpv4SubnetEntry.setDescription('DHCP IPv4 subnet definition')
routerDhcpIpv4SubnetGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 16108, 3, 1, 2, 1, 1011)).setObjects(("GARDEROS-ROUTER-MIB", "routerDhcpIpv4SubnetId"), ("GARDEROS-ROUTER-MIB", "routerDhcpIpv4SubnetTotalLeases"), ("GARDEROS-ROUTER-MIB", "routerDhcpIpv4SubnetFreeLeases"), ("GARDEROS-ROUTER-MIB", "routerDhcpIpv4SubnetUsedLeases"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    routerDhcpIpv4SubnetGroup = routerDhcpIpv4SubnetGroup.setStatus('current')
if mibBuilder.loadTexts: routerDhcpIpv4SubnetGroup.setDescription('DHCP IPv4 subnet object group')
routerDhcpIpv4SubnetId = MibTableColumn((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1000, 10, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerDhcpIpv4SubnetId.setStatus('current')
if mibBuilder.loadTexts: routerDhcpIpv4SubnetId.setDescription('Identifier of the subnet')
routerDhcpIpv4SubnetTotalLeases = MibTableColumn((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1000, 10, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerDhcpIpv4SubnetTotalLeases.setStatus('current')
if mibBuilder.loadTexts: routerDhcpIpv4SubnetTotalLeases.setDescription('Total number of leases of the subnet')
routerDhcpIpv4SubnetFreeLeases = MibTableColumn((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1000, 10, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerDhcpIpv4SubnetFreeLeases.setStatus('current')
if mibBuilder.loadTexts: routerDhcpIpv4SubnetFreeLeases.setDescription('Total number of free leases of the subnet')
routerDhcpIpv4SubnetUsedLeases = MibTableColumn((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1000, 10, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerDhcpIpv4SubnetUsedLeases.setStatus('current')
if mibBuilder.loadTexts: routerDhcpIpv4SubnetUsedLeases.setDescription('Total number of used leases of the subnet')
routerDhcpIpv4SubnetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1000, 10, 1, 1, 100), Unsigned32())
if mibBuilder.loadTexts: routerDhcpIpv4SubnetIndex.setStatus('current')
if mibBuilder.loadTexts: routerDhcpIpv4SubnetIndex.setDescription('DHCP IPv4 service table index')
routerLqeResultTable = MibTable((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1000, 20, 1), )
if mibBuilder.loadTexts: routerLqeResultTable.setStatus('current')
if mibBuilder.loadTexts: routerLqeResultTable.setDescription('LQE result table')
routerLqeResultEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1000, 20, 1, 1), ).setIndexNames((0, "GARDEROS-ROUTER-MIB", "routerLqeIndex"))
if mibBuilder.loadTexts: routerLqeResultEntry.setStatus('current')
if mibBuilder.loadTexts: routerLqeResultEntry.setDescription('Entry into LQE result table')
routerLqeResultGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 16108, 3, 1, 2, 1, 1021)).setObjects(("GARDEROS-ROUTER-MIB", "routerLqeResultName"), ("GARDEROS-ROUTER-MIB", "routerLqeResultAlgorithm"), ("GARDEROS-ROUTER-MIB", "routerLqeResultInterface"), ("GARDEROS-ROUTER-MIB", "routerLqeResultLqi"), ("GARDEROS-ROUTER-MIB", "routerLqeResultLastLqi"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    routerLqeResultGroup = routerLqeResultGroup.setStatus('current')
if mibBuilder.loadTexts: routerLqeResultGroup.setDescription('LQE result values object group')
routerLqeResultName = MibTableColumn((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1000, 20, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerLqeResultName.setStatus('current')
if mibBuilder.loadTexts: routerLqeResultName.setDescription('LQE name.')
routerLqeResultAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1000, 20, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerLqeResultAlgorithm.setStatus('current')
if mibBuilder.loadTexts: routerLqeResultAlgorithm.setDescription('LQE algorithm name.')
routerLqeResultInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1000, 20, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerLqeResultInterface.setStatus('current')
if mibBuilder.loadTexts: routerLqeResultInterface.setDescription('LQE interface name.')
routerLqeResultLqi = MibTableColumn((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1000, 20, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerLqeResultLqi.setStatus('current')
if mibBuilder.loadTexts: routerLqeResultLqi.setDescription('LQI.')
routerLqeResultLastLqi = MibTableColumn((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1000, 20, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerLqeResultLastLqi.setStatus('current')
if mibBuilder.loadTexts: routerLqeResultLastLqi.setDescription('Last LQI.')
routerLqeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1000, 20, 1, 1, 100), Unsigned32())
if mibBuilder.loadTexts: routerLqeIndex.setStatus('current')
if mibBuilder.loadTexts: routerLqeIndex.setDescription('Index of LQE result entry. Not readable.')
routerWwanModemGeneralTable = MibTable((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1000, 100, 1), )
if mibBuilder.loadTexts: routerWwanModemGeneralTable.setStatus('current')
if mibBuilder.loadTexts: routerWwanModemGeneralTable.setDescription('WWAN general values table')
routerWwanModemGeneralEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1000, 100, 1, 1), ).setIndexNames((0, "GARDEROS-ROUTER-MIB", "routerWwanIndex"))
if mibBuilder.loadTexts: routerWwanModemGeneralEntry.setStatus('current')
if mibBuilder.loadTexts: routerWwanModemGeneralEntry.setDescription('Entry into WWAN general values table')
routerWwanModemGeneralGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 16108, 3, 1, 2, 1, 1101)).setObjects(("GARDEROS-ROUTER-MIB", "routerWwanModemName"), ("GARDEROS-ROUTER-MIB", "routerWwanModemModel"), ("GARDEROS-ROUTER-MIB", "routerWwanSupportedTech"), ("GARDEROS-ROUTER-MIB", "routerWwanDialInNumber"), ("GARDEROS-ROUTER-MIB", "routerWwanApn"), ("GARDEROS-ROUTER-MIB", "routerWwanImsi"), ("GARDEROS-ROUTER-MIB", "routerWwanSimId"), ("GARDEROS-ROUTER-MIB", "routerWwanPinState"), ("GARDEROS-ROUTER-MIB", "routerWwanNetworkTech"), ("GARDEROS-ROUTER-MIB", "routerWwanCurrentTech"), ("GARDEROS-ROUTER-MIB", "routerWwanUseTech"), ("GARDEROS-ROUTER-MIB", "routerWwanBand"), ("GARDEROS-ROUTER-MIB", "routerWwanLinkQuality"), ("GARDEROS-ROUTER-MIB", "routerWwanLinkRefSigRecQuality"), ("GARDEROS-ROUTER-MIB", "routerWwanLinkRefSigRecPower"), ("GARDEROS-ROUTER-MIB", "routerWwanLinkSigIntNoiseRatio"), ("GARDEROS-ROUTER-MIB", "routerWwanLinkEcIo"), ("GARDEROS-ROUTER-MIB", "routerWwanOperatorName"), ("GARDEROS-ROUTER-MIB", "routerWwanOperatorId"), ("GARDEROS-ROUTER-MIB", "routerWwanCellIdDec"), ("GARDEROS-ROUTER-MIB", "routerWwanCellIdHex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    routerWwanModemGeneralGroup = routerWwanModemGeneralGroup.setStatus('current')
if mibBuilder.loadTexts: routerWwanModemGeneralGroup.setDescription('WWAN general values object group')
routerWwanModemName = MibTableColumn((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1000, 100, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerWwanModemName.setStatus('current')
if mibBuilder.loadTexts: routerWwanModemName.setDescription('Name of the modem.')
routerWwanModemModel = MibTableColumn((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1000, 100, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerWwanModemModel.setStatus('current')
if mibBuilder.loadTexts: routerWwanModemModel.setDescription('Model of the modem.')
routerWwanSupportedTech = MibTableColumn((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1000, 100, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerWwanSupportedTech.setStatus('current')
if mibBuilder.loadTexts: routerWwanSupportedTech.setDescription('Technologies supported by the modem.')
routerWwanDialInNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1000, 100, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerWwanDialInNumber.setStatus('current')
if mibBuilder.loadTexts: routerWwanDialInNumber.setDescription('Dial in number configured for the modem.')
routerWwanApn = MibTableColumn((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1000, 100, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerWwanApn.setStatus('current')
if mibBuilder.loadTexts: routerWwanApn.setDescription('APN configured for the modem.')
routerWwanImsi = MibTableColumn((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1000, 100, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerWwanImsi.setStatus('current')
if mibBuilder.loadTexts: routerWwanImsi.setDescription('IMSI of the SIM card that is used by the modem.')
routerWwanSimId = MibTableColumn((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1000, 100, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerWwanSimId.setStatus('current')
if mibBuilder.loadTexts: routerWwanSimId.setDescription('SIM ID of the SIM card that is used by the modem.')
routerWwanPinState = MibTableColumn((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1000, 100, 1, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerWwanPinState.setStatus('current')
if mibBuilder.loadTexts: routerWwanPinState.setDescription('Current PIN state on the SIM card.')
routerWwanNetworkTech = MibTableColumn((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1000, 100, 1, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerWwanNetworkTech.setStatus('current')
if mibBuilder.loadTexts: routerWwanNetworkTech.setDescription('Technologies offer by the network.')
routerWwanCurrentTech = MibTableColumn((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1000, 100, 1, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerWwanCurrentTech.setStatus('current')
if mibBuilder.loadTexts: routerWwanCurrentTech.setDescription('Technology currently used by the modem.')
routerWwanUseTech = MibTableColumn((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1000, 100, 1, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerWwanUseTech.setStatus('current')
if mibBuilder.loadTexts: routerWwanUseTech.setDescription('Technology to be used by the modem.')
routerWwanBand = MibTableColumn((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1000, 100, 1, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerWwanBand.setStatus('current')
if mibBuilder.loadTexts: routerWwanBand.setDescription('Current band used by the modem.')
routerWwanLinkQuality = MibTableColumn((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1000, 100, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerWwanLinkQuality.setStatus('current')
if mibBuilder.loadTexts: routerWwanLinkQuality.setDescription('Link quality (RSSI).')
routerWwanLinkRefSigRecQuality = MibTableColumn((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1000, 100, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerWwanLinkRefSigRecQuality.setStatus('current')
if mibBuilder.loadTexts: routerWwanLinkRefSigRecQuality.setDescription('LTE link RSRQ, LTE only.')
routerWwanLinkRefSigRecPower = MibTableColumn((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1000, 100, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerWwanLinkRefSigRecPower.setStatus('current')
if mibBuilder.loadTexts: routerWwanLinkRefSigRecPower.setDescription('LTE link RSRP, LTE only.')
routerWwanLinkSigIntNoiseRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1000, 100, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerWwanLinkSigIntNoiseRatio.setStatus('current')
if mibBuilder.loadTexts: routerWwanLinkSigIntNoiseRatio.setDescription('LTE link SINR, LTE only.')
routerWwanLinkEcIo = MibTableColumn((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1000, 100, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerWwanLinkEcIo.setStatus('current')
if mibBuilder.loadTexts: routerWwanLinkEcIo.setDescription('Link EC/IO, CDMA only.')
routerWwanOperatorName = MibTableColumn((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1000, 100, 1, 1, 30), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerWwanOperatorName.setStatus('current')
if mibBuilder.loadTexts: routerWwanOperatorName.setDescription('Clear text operator name.')
routerWwanOperatorId = MibTableColumn((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1000, 100, 1, 1, 31), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerWwanOperatorId.setStatus('current')
if mibBuilder.loadTexts: routerWwanOperatorId.setDescription('Operator ID: MCC + MNC')
routerWwanCellIdDec = MibTableColumn((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1000, 100, 1, 1, 32), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerWwanCellIdDec.setStatus('current')
if mibBuilder.loadTexts: routerWwanCellIdDec.setDescription('Basestation cell Id (decimal).')
routerWwanCellIdHex = MibTableColumn((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1000, 100, 1, 1, 33), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerWwanCellIdHex.setStatus('current')
if mibBuilder.loadTexts: routerWwanCellIdHex.setDescription('Basestation cell Id (hex).')
routerWwanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1000, 100, 1, 1, 100), Unsigned32())
if mibBuilder.loadTexts: routerWwanIndex.setStatus('current')
if mibBuilder.loadTexts: routerWwanIndex.setDescription('Index of WWAN general entry. Not readable.')
routerDslModemGeneralTable = MibTable((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1000, 200, 1), )
if mibBuilder.loadTexts: routerDslModemGeneralTable.setStatus('current')
if mibBuilder.loadTexts: routerDslModemGeneralTable.setDescription('DSL general values table')
routerDslModemGeneralEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1000, 200, 1, 1), ).setIndexNames((0, "GARDEROS-ROUTER-MIB", "routerDslIndex"))
if mibBuilder.loadTexts: routerDslModemGeneralEntry.setStatus('current')
if mibBuilder.loadTexts: routerDslModemGeneralEntry.setDescription('Entry into DSL general values table')
routerDslModemGeneralGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 16108, 3, 1, 2, 1, 1201)).setObjects(("GARDEROS-ROUTER-MIB", "routerDslModemName"), ("GARDEROS-ROUTER-MIB", "routerDslModemModel"), ("GARDEROS-ROUTER-MIB", "routerDslModemSupportedTech"), ("GARDEROS-ROUTER-MIB", "routerDslModemFirmware"), ("GARDEROS-ROUTER-MIB", "routerDslModemStatus"), ("GARDEROS-ROUTER-MIB", "routerDslModemMode"), ("GARDEROS-ROUTER-MIB", "routerDslModemWanService"), ("GARDEROS-ROUTER-MIB", "routerDslDslamVendor"), ("GARDEROS-ROUTER-MIB", "routerDslUptime"), ("GARDEROS-ROUTER-MIB", "routerDslDownRate"), ("GARDEROS-ROUTER-MIB", "routerDslUpRate"), ("GARDEROS-ROUTER-MIB", "routerDslDownSigNoiseRatio"), ("GARDEROS-ROUTER-MIB", "routerDslUpSigNoiseRatio"), ("GARDEROS-ROUTER-MIB", "routerDslDownAttenuation"), ("GARDEROS-ROUTER-MIB", "routerDslUpAttenuation"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    routerDslModemGeneralGroup = routerDslModemGeneralGroup.setStatus('current')
if mibBuilder.loadTexts: routerDslModemGeneralGroup.setDescription('DSL general values object group')
routerDslModemName = MibTableColumn((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1000, 200, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerDslModemName.setStatus('current')
if mibBuilder.loadTexts: routerDslModemName.setDescription('Name of the modem.')
routerDslModemModel = MibTableColumn((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1000, 200, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerDslModemModel.setStatus('current')
if mibBuilder.loadTexts: routerDslModemModel.setDescription('Model of the modem.')
routerDslModemSupportedTech = MibTableColumn((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1000, 200, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerDslModemSupportedTech.setStatus('current')
if mibBuilder.loadTexts: routerDslModemSupportedTech.setDescription('Technologies supported by the modem.')
routerDslModemFirmware = MibTableColumn((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1000, 200, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerDslModemFirmware.setStatus('current')
if mibBuilder.loadTexts: routerDslModemFirmware.setDescription('Firmware version of the modem.')
routerDslModemStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1000, 200, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerDslModemStatus.setStatus('current')
if mibBuilder.loadTexts: routerDslModemStatus.setDescription('Current modem status.')
routerDslModemMode = MibTableColumn((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1000, 200, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerDslModemMode.setStatus('current')
if mibBuilder.loadTexts: routerDslModemMode.setDescription('Current DSL mode.')
routerDslModemWanService = MibTableColumn((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1000, 200, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerDslModemWanService.setStatus('current')
if mibBuilder.loadTexts: routerDslModemWanService.setDescription('Layer 2 service.')
routerDslDslamVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1000, 200, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerDslDslamVendor.setStatus('current')
if mibBuilder.loadTexts: routerDslDslamVendor.setDescription('DSLAM that the modem is connected to.')
routerDslUptime = MibTableColumn((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1000, 200, 1, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerDslUptime.setStatus('current')
if mibBuilder.loadTexts: routerDslUptime.setDescription('Modem uptime.')
routerDslDownRate = MibTableColumn((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1000, 200, 1, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerDslDownRate.setStatus('current')
if mibBuilder.loadTexts: routerDslDownRate.setDescription('Current down rate.')
routerDslUpRate = MibTableColumn((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1000, 200, 1, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerDslUpRate.setStatus('current')
if mibBuilder.loadTexts: routerDslUpRate.setDescription('Current up rate.')
routerDslDownSigNoiseRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1000, 200, 1, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerDslDownSigNoiseRatio.setStatus('current')
if mibBuilder.loadTexts: routerDslDownSigNoiseRatio.setDescription('Current down SNR.')
routerDslUpSigNoiseRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1000, 200, 1, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerDslUpSigNoiseRatio.setStatus('current')
if mibBuilder.loadTexts: routerDslUpSigNoiseRatio.setDescription('Current up SNR.')
routerDslDownAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1000, 200, 1, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerDslDownAttenuation.setStatus('current')
if mibBuilder.loadTexts: routerDslDownAttenuation.setDescription('Current down attenuation.')
routerDslUpAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1000, 200, 1, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerDslUpAttenuation.setStatus('current')
if mibBuilder.loadTexts: routerDslUpAttenuation.setDescription('Current up attenuation.')
routerDslIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 16108, 3, 1, 1, 1000, 200, 1, 1, 100), Unsigned32())
if mibBuilder.loadTexts: routerDslIndex.setStatus('current')
if mibBuilder.loadTexts: routerDslIndex.setDescription('Index of DSL general entry, not readable')
mibBuilder.exportSymbols("GARDEROS-ROUTER-MIB", router=router, RouterSeverity=RouterSeverity, routerDslModemFirmware=routerDslModemFirmware, routerWwanIndex=routerWwanIndex, routerGroups=routerGroups, routerLqeIndex=routerLqeIndex, routerNotification=routerNotification, routerDslModemGeneralTable=routerDslModemGeneralTable, routerDslIndex=routerDslIndex, routerWwanPinState=routerWwanPinState, routerWwanCurrentTech=routerWwanCurrentTech, routerWwanModemGeneralEntry=routerWwanModemGeneralEntry, routerLqeResultTable=routerLqeResultTable, routerDslUptime=routerDslUptime, routerObjects=routerObjects, routerDslModemName=routerDslModemName, routerTrapSeverity=routerTrapSeverity, routerWwanModemModel=routerWwanModemModel, routerDslModemWanService=routerDslModemWanService, routerWwanCellIdDec=routerWwanCellIdDec, routerWwanTables=routerWwanTables, routerWwanLinkQuality=routerWwanLinkQuality, routerWwanUseTech=routerWwanUseTech, RouterSyslogSeverity=RouterSyslogSeverity, RouterType=RouterType, routerWwanSimId=routerWwanSimId, routerDslUpRate=routerDslUpRate, routerWwanSupportedTech=routerWwanSupportedTech, routerKernel=routerKernel, routerDhcpIpv4SubnetUsedLeases=routerDhcpIpv4SubnetUsedLeases, routerWwanOperatorName=routerWwanOperatorName, routerTrapSyslogSeverity=routerTrapSyslogSeverity, routerDslModemModel=routerDslModemModel, RouterComponent=RouterComponent, routerLqeResultName=routerLqeResultName, routerSecureBoot=routerSecureBoot, routerLqeResultLqi=routerLqeResultLqi, routerDescription=routerDescription, routerWwanNetworkTech=routerWwanNetworkTech, routerMIB=routerMIB, routerWwanBand=routerWwanBand, routerWwanDialInNumber=routerWwanDialInNumber, routerDslUpAttenuation=routerDslUpAttenuation, routerConfigAge=routerConfigAge, routerLqeResultInterface=routerLqeResultInterface, routerDhcpIpv4Tables=routerDhcpIpv4Tables, routerWwanLinkEcIo=routerWwanLinkEcIo, routerDhcpIpv4SubnetTable=routerDhcpIpv4SubnetTable, routerDslModemGeneralGroup=routerDslModemGeneralGroup, routerWwanModemName=routerWwanModemName, routerWwanLinkSigIntNoiseRatio=routerWwanLinkSigIntNoiseRatio, routerDslModemStatus=routerDslModemStatus, routerSystemMac=routerSystemMac, routerTables=routerTables, routerConformance=routerConformance, routerConfigServer=routerConfigServer, routerWwanCellIdHex=routerWwanCellIdHex, routerTrapDescription=routerTrapDescription, routerDslModemGeneralEntry=routerDslModemGeneralEntry, routerTrapType=routerTrapType, routerNotifications=routerNotifications, routerDhcpIpv4SubnetIndex=routerDhcpIpv4SubnetIndex, routerDslDownSigNoiseRatio=routerDslDownSigNoiseRatio, routerLqeResultLastLqi=routerLqeResultLastLqi, routerTrapErrorDescription=routerTrapErrorDescription, routerLqeResultEntry=routerLqeResultEntry, routerDslDslamVendor=routerDslDslamVendor, routerVersion=routerVersion, routerWwanModemGeneralGroup=routerWwanModemGeneralGroup, routerInformationGroup=routerInformationGroup, routerLqeResultAlgorithm=routerLqeResultAlgorithm, routerDhcpIpv4SubnetFreeLeases=routerDhcpIpv4SubnetFreeLeases, routerDhcpIpv4SubnetGroup=routerDhcpIpv4SubnetGroup, routerWwanLinkRefSigRecPower=routerWwanLinkRefSigRecPower, routerNotificationGroup=routerNotificationGroup, routerCompliances=routerCompliances, routerTrapComponent=routerTrapComponent, routerSerial=routerSerial, routerWwanApn=routerWwanApn, routerTemperature=routerTemperature, routerDhcpIpv4SubnetId=routerDhcpIpv4SubnetId, routerLqeTables=routerLqeTables, routerConfigType=routerConfigType, routerWwanModemGeneralTable=routerWwanModemGeneralTable, PYSNMP_MODULE_ID=router, routerTrap=routerTrap, routerModuleCompliance=routerModuleCompliance, routerTrapErrorCode=routerTrapErrorCode, routerWwanLinkRefSigRecQuality=routerWwanLinkRefSigRecQuality, routerStartupConfigHash=routerStartupConfigHash, routerDhcpIpv4SubnetEntry=routerDhcpIpv4SubnetEntry, routerWwanImsi=routerWwanImsi, routerWwanOperatorId=routerWwanOperatorId, routerDslDownRate=routerDslDownRate, routerDslModemMode=routerDslModemMode, routerDslDownAttenuation=routerDslDownAttenuation, routerLqeResultGroup=routerLqeResultGroup, routerDslUpSigNoiseRatio=routerDslUpSigNoiseRatio, routerDslModemSupportedTech=routerDslModemSupportedTech, routerDslTables=routerDslTables, routerName=routerName, routerDhcpIpv4SubnetTotalLeases=routerDhcpIpv4SubnetTotalLeases, routerTrapObjectGroup=routerTrapObjectGroup, routerInformation=routerInformation)
