#
# PySNMP MIB module RS-XX9-ATV-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/rs/RS-XX9-ATV-MIB
# Produced by pysmi-1.1.12 at Tue Dec  3 10:11:19 2024
# On host fv-az575-513 platform Linux version 6.5.0-1025-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
rsXx9Atv, rsXx9MibModule = mibBuilder.importSymbols("RS-XX9-SMI-MIB", "rsXx9Atv", "rsXx9MibModule")
SwitchOnOff, IndexTransmitter, IndexAB, NotificationState = mibBuilder.importSymbols("RS-XX9-TC-MIB", "SwitchOnOff", "IndexTransmitter", "IndexAB", "NotificationState")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
IpAddress, TimeTicks, Counter32, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, ObjectIdentity, Integer32, MibIdentifier, ModuleIdentity, Unsigned32, Gauge32, iso, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "TimeTicks", "Counter32", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "ObjectIdentity", "Integer32", "MibIdentifier", "ModuleIdentity", "Unsigned32", "Gauge32", "iso", "Counter64")
TruthValue, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "TextualConvention")
rsXx9AtvMibModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 2566, 149, 1, 216, 9))
rsXx9AtvMibModule.setRevisions(('2014-12-22 16:00', '2014-09-30 16:00', '2013-10-01 18:00', '2013-02-04 16:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: rsXx9AtvMibModule.setRevisionsDescriptions(('updated description texts\n                ', 'added atvInputIrdetoMode\n                ', 'initial release. \n                removed atvInpCmnInputIdx from all atvInput tables. \n                atvNicamCfgPreemphasis is showing the correct value now. \n                added clarification to description of atvInpAudioClipping', 'Preliminary version.',))
if mibBuilder.loadTexts: rsXx9AtvMibModule.setLastUpdated('201412221600Z')
if mibBuilder.loadTexts: rsXx9AtvMibModule.setOrganization('Rohde&Schwarz GmbH & Co. KG')
if mibBuilder.loadTexts: rsXx9AtvMibModule.setContactInfo('Rohde & Schwarz GmbH & Co. KG\n                Broadcasting Division\n                \n                Muehldorfstrasse 15\n                81671 Munich\n                Germany\n                \n                customersupport@rohde-schwarz.com')
if mibBuilder.loadTexts: rsXx9AtvMibModule.setDescription('This MIB defines ATV specific objects\n                of XX9000 transmitting systems from Rohde & Schwarz.\n                \n                The following MIBs are related to this:\n                - RS-COMMON-MIB         - mandatory for this MIB\n                - RS-XX9-SMI-MIB        - mandatory for this MIB\n                - RS-XX9-TC-MIB         - mandatory for this MIB')
class SoundMode(TextualConvention, Integer32):
    description = 'Description.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("carrierOff", 1), ("modulationOff", 2), ("on", 3))

rsXx9AtvNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 0))
rsXx9AtvObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1))
atvInput = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 1))
atvInputCommonTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 1, 1), )
if mibBuilder.loadTexts: atvInputCommonTable.setStatus('current')
if mibBuilder.loadTexts: atvInputCommonTable.setDescription('Description.')
atvInputCommonEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 1, 1, 1), ).setIndexNames((0, "RS-XX9-ATV-MIB", "atvInpCmnTxIdx"), (0, "RS-XX9-ATV-MIB", "atvInpCmnExcIdx"))
if mibBuilder.loadTexts: atvInputCommonEntry.setStatus('current')
if mibBuilder.loadTexts: atvInputCommonEntry.setDescription('Description.')
atvInpCmnTxIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 1, 1, 1, 1), IndexTransmitter())
if mibBuilder.loadTexts: atvInpCmnTxIdx.setStatus('current')
if mibBuilder.loadTexts: atvInpCmnTxIdx.setDescription('The transmitter index.')
atvInpCmnExcIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 1, 1, 1, 2), IndexAB())
if mibBuilder.loadTexts: atvInpCmnExcIdx.setStatus('current')
if mibBuilder.loadTexts: atvInpCmnExcIdx.setDescription('This index distinguishes the exiters.\n                Necessary if you have dual drive transmitters.')
atvInpCmnInputIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("input1", 1), ("input2", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atvInpCmnInputIdx.setStatus('obsolete')
if mibBuilder.loadTexts: atvInpCmnInputIdx.setDescription('Obsolete input index.')
atvInpCmnDatalineInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("mono", 2), ("stereo", 3), ("dual", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atvInpCmnDatalineInfo.setStatus('current')
if mibBuilder.loadTexts: atvInpCmnDatalineInfo.setDescription('Description.')
atvInpCmnInputImpedance = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sixHundredOhm", 1), ("highImpedance", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvInpCmnInputImpedance.setStatus('current')
if mibBuilder.loadTexts: atvInpCmnInputImpedance.setDescription('Description.')
atvInpCmnAudioLowpass = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 1, 1, 1, 6), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvInpCmnAudioLowpass.setStatus('current')
if mibBuilder.loadTexts: atvInpCmnAudioLowpass.setDescription('Switche lowpass filter for FM tone on or off.')
atvInpCmnNicam728Datastream = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 1, 1, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atvInpCmnNicam728Datastream.setStatus('current')
if mibBuilder.loadTexts: atvInpCmnNicam728Datastream.setDescription("No digital nicam datastream was detected at Input Nicam. \n                If you want to use analog audio inputs set the 'Nicam Mode' \n                to 'Coder' in coder config menu.\n                \n                Available in modulator mode only.\n                ")
atvInputIrdetoMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("standard", 1), ("irdeto", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atvInputIrdetoMode.setStatus('current')
if mibBuilder.loadTexts: atvInputIrdetoMode.setDescription('Description.')
atvInputVideoTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 1, 2), )
if mibBuilder.loadTexts: atvInputVideoTable.setStatus('current')
if mibBuilder.loadTexts: atvInputVideoTable.setDescription('Description.')
atvInputVideoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 1, 2, 1), )
atvInputCommonEntry.registerAugmentions(("RS-XX9-ATV-MIB", "atvInputVideoEntry"))
atvInputVideoEntry.setIndexNames(*atvInputCommonEntry.getIndexNames())
if mibBuilder.loadTexts: atvInputVideoEntry.setStatus('current')
if mibBuilder.loadTexts: atvInputVideoEntry.setDescription('Description.')
atvInpVideoWhiteAmplitude = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 1, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1300))).setUnits('mV').setMaxAccess("readonly")
if mibBuilder.loadTexts: atvInpVideoWhiteAmplitude.setStatus('current')
if mibBuilder.loadTexts: atvInpVideoWhiteAmplitude.setDescription('Measured value input amplitude white.')
atvInpVideoWhitePulseMonitoring = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("ok", 2), ("lem40", 3), ("lem30", 4), ("gep30", 5), ("gep40", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atvInpVideoWhitePulseMonitoring.setStatus('current')
if mibBuilder.loadTexts: atvInpVideoWhitePulseMonitoring.setDescription('White pulse monitoring:\n                none(1)  - check row with white impulse not found\n                ok(2)    - white impulse found and level ok\n                lem40(3) - level of white impulse more than 40% below nominal level\n                lem30(4) - level of white impulse more than 30% below nominal level\n                gep30(5) - level of white impulse more than 30% above nominal level\n                gep40(6) - level of white impulse more than 40% above nominal level')
atvInpVideoSyncAmplitude = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 1, 2, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setUnits('mV').setMaxAccess("readonly")
if mibBuilder.loadTexts: atvInpVideoSyncAmplitude.setStatus('current')
if mibBuilder.loadTexts: atvInpVideoSyncAmplitude.setDescription('Indicates the measured input amplitude of the sync pulse.')
atvInpVideoSyncMonitoring = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ok", 1), ("noV", 2), ("noHV", 3), ("lowLevel", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atvInpVideoSyncMonitoring.setStatus('current')
if mibBuilder.loadTexts: atvInpVideoSyncMonitoring.setDescription('Indicates the status of sync-pulse monitoring of the input signal. \n                \n                Ok:  A standard-compliant input signal is being applied. \n                No V:No V-pulse frame is detected. \n                No H+V: No V-pulse or H-pulse frame is detected. \n                Low Level: The sync-pulse amplitude is less than 50% of the nominal \n                sync-pulse amplitude; the processed signal is, however, available at \n                the encoder output.\n                ')
atvInpVideoClipping = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 1, 2, 1, 5), NotificationState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atvInpVideoClipping.setStatus('current')
if mibBuilder.loadTexts: atvInpVideoClipping.setDescription('Indicates the status of possible video input signal clipping. \n                \n                off(2)   - no clipping: The video input signal is within the valid range. \n                fault(3) - clipping: The video input signal is clipped.\n                warning(4)   - no headroom: The video input signal is just off a clipping boundary. \n                ')
atvInpVideoNominalAmplitude = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dotSeven", 1), ("one", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvInpVideoNominalAmplitude.setStatus('current')
if mibBuilder.loadTexts: atvInpVideoNominalAmplitude.setDescription('Indicates the set video input amplitude. Nominal input amplitude on 75 Ohm:\n                dotSeven(1) - 0.7 V\n                one(2)      - 1.0 V\n                \n                ')
atvInputAudioTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 1, 3), )
if mibBuilder.loadTexts: atvInputAudioTable.setStatus('current')
if mibBuilder.loadTexts: atvInputAudioTable.setDescription('Description.')
atvInputAudioEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 1, 3, 1), ).setIndexNames((0, "RS-XX9-ATV-MIB", "atvInpCmnTxIdx"), (0, "RS-XX9-ATV-MIB", "atvInpCmnExcIdx"), (0, "RS-XX9-ATV-MIB", "atvInpAudioNfSignalIdx"))
if mibBuilder.loadTexts: atvInputAudioEntry.setStatus('current')
if mibBuilder.loadTexts: atvInputAudioEntry.setDescription('Description.')
atvInpAudioNfSignalIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("af1", 1), ("af2", 2))))
if mibBuilder.loadTexts: atvInpAudioNfSignalIdx.setStatus('current')
if mibBuilder.loadTexts: atvInpAudioNfSignalIdx.setDescription('NF signal index.')
atvInpAudioCurrentLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 1, 3, 1, 2), Unsigned32()).setUnits('per thousand').setMaxAccess("readonly")
if mibBuilder.loadTexts: atvInpAudioCurrentLevel.setStatus('current')
if mibBuilder.loadTexts: atvInpAudioCurrentLevel.setDescription('Indicates the current input level at the FM sound modulator for the\n                AF signal (as a percentage of the maximum drive level).')
atvInpAudioClipping = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 1, 3, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atvInpAudioClipping.setStatus('current')
if mibBuilder.loadTexts: atvInpAudioClipping.setDescription('Indicates the status of possible clipping of the AF input signal. \n                The following displays (with color signalization) are possible: \n                \n                NO CLIPPING: AF input signal AF2 is within the valid range. \n                CLIPPING: AF input signal AF2 is clipped because it has \n                exceeded the maximum permissible input level.\n                ')
atvInpAudioNominalLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1200, 1200))).setUnits('1/100 dBu').setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvInpAudioNominalLevel.setStatus('current')
if mibBuilder.loadTexts: atvInpAudioNominalLevel.setDescription('Nominal input level of NF signal.')
atvInputNicamTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 1, 4), )
if mibBuilder.loadTexts: atvInputNicamTable.setStatus('current')
if mibBuilder.loadTexts: atvInputNicamTable.setDescription('Description.')
atvInputNicamEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 1, 4, 1), )
atvInputAudioEntry.registerAugmentions(("RS-XX9-ATV-MIB", "atvInputNicamEntry"))
atvInputNicamEntry.setIndexNames(*atvInputAudioEntry.getIndexNames())
if mibBuilder.loadTexts: atvInputNicamEntry.setStatus('current')
if mibBuilder.loadTexts: atvInputNicamEntry.setDescription('Description.')
atvInpNicamCurrentLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 1, 4, 1, 1), Unsigned32()).setUnits('per thousand').setMaxAccess("readonly")
if mibBuilder.loadTexts: atvInpNicamCurrentLevel.setStatus('current')
if mibBuilder.loadTexts: atvInpNicamCurrentLevel.setDescription('Current input level on NICAM coder for NF signal.\n                \n                Available in coder mode only.\n                \n                ')
atvInpNicamClipping = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 1, 4, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atvInpNicamClipping.setStatus('current')
if mibBuilder.loadTexts: atvInpNicamClipping.setDescription('The gain for nicam input is too high. \n                Reduce the gain setting in Input AF 2 menu.\n                \n                Available in coder mode only.')
atvInpNicamGainAdjustment = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-600, 600))).setUnits('milli Bel').setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvInpNicamGainAdjustment.setStatus('current')
if mibBuilder.loadTexts: atvInpNicamGainAdjustment.setDescription('Indicates the set input level for the NICAM signal that is fed \n                to the integrated NICAM coder. The setting can be changed \n                here for matching purposes.\n                \n                Available in coder mode only.')
atvCommon = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 2))
atvCommonStateTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 2, 2), )
if mibBuilder.loadTexts: atvCommonStateTable.setStatus('current')
if mibBuilder.loadTexts: atvCommonStateTable.setDescription('Description.')
atvCommonStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 2, 2, 1), ).setIndexNames((0, "RS-XX9-ATV-MIB", "atvCmnStTxIdx"), (0, "RS-XX9-ATV-MIB", "atvCmnStExcIdx"))
if mibBuilder.loadTexts: atvCommonStateEntry.setStatus('current')
if mibBuilder.loadTexts: atvCommonStateEntry.setDescription('Description.')
atvCmnStTxIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 2, 2, 1, 1), IndexTransmitter())
if mibBuilder.loadTexts: atvCmnStTxIdx.setStatus('current')
if mibBuilder.loadTexts: atvCmnStTxIdx.setDescription('The transmitter index.')
atvCmnStExcIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 2, 2, 1, 2), IndexAB())
if mibBuilder.loadTexts: atvCmnStExcIdx.setStatus('current')
if mibBuilder.loadTexts: atvCmnStExcIdx.setDescription('This index distinguishes the exiters.\n                Necessary if you have dual drive transmitters.')
atvCmnStCurrentAudioMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("mono", 1), ("stereo", 2), ("dual", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atvCmnStCurrentAudioMode.setStatus('current')
if mibBuilder.loadTexts: atvCmnStCurrentAudioMode.setDescription('The current audio mode.')
atvCommonConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 2, 3), )
if mibBuilder.loadTexts: atvCommonConfigTable.setStatus('current')
if mibBuilder.loadTexts: atvCommonConfigTable.setDescription('Description.')
atvCommonConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 2, 3, 1), )
atvCommonStateEntry.registerAugmentions(("RS-XX9-ATV-MIB", "atvCommonConfigEntry"))
atvCommonConfigEntry.setIndexNames(*atvCommonStateEntry.getIndexNames())
if mibBuilder.loadTexts: atvCommonConfigEntry.setStatus('current')
if mibBuilder.loadTexts: atvCommonConfigEntry.setDescription('Description.')
atvCmnCfgTvStandard = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("dk", 2), ("i", 3), ("i1", 4), ("k1", 5), ("b", 6), ("g", 7), ("m", 8), ("m1", 9), ("n", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvCmnCfgTvStandard.setStatus('current')
if mibBuilder.loadTexts: atvCmnCfgTvStandard.setDescription('Selection of ATV standard.')
atvCmnCfgSoundCarrierSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("singleCarrier", 1), ("dualCarrier", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvCmnCfgSoundCarrierSelect.setStatus('current')
if mibBuilder.loadTexts: atvCmnCfgSoundCarrierSelect.setDescription('Number of sound subcarriers (for standards B, G, D/K, I, I1, K1). \n                \n                The following settings are possible here: \n                Single Carrier: one sound subcarrier\n                Dual Carrier: two sound subcarriers\n                ')
atvCmnCfgCoderMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("off", 1), ("mono", 2), ("stereo", 3), ("dual", 4), ("auto", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvCmnCfgCoderMode.setStatus('current')
if mibBuilder.loadTexts: atvCmnCfgCoderMode.setDescription('Selection of audio mode.\n                \n                The following settings have a special meaning: \n                Off: Dual-sound is set as the audio mode. \n                Mono: The AF1 input signal is routed to audio carrier one. \n                Stereo: The two AF input signals contain the left and right channel of a stereo signal. \n                Dual: The two AF input signals provide independent audio information for dual-sound mode. \n                Auto (Dataline):The audio mode is read out from the audio data line present in the picture signal.\n                ')
atvCmnCfgVisionSound1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-150, -50))).setUnits('centi Bel').setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvCmnCfgVisionSound1.setStatus('current')
if mibBuilder.loadTexts: atvCmnCfgVisionSound1.setDescription('value for sound subcarrier level 1 referenced to the peak envelope power of the vision carrier.')
atvCmnCfgVisionSound2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-270, -170))).setUnits('centi Bel').setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvCmnCfgVisionSound2.setStatus('current')
if mibBuilder.loadTexts: atvCmnCfgVisionSound2.setDescription('value for sound subcarrier level 2 referenced to the peak envelope power of the vision carrier.')
atvCmnCfgResidual = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 2, 3, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(80, 250))).setUnits('per thousand').setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvCmnCfgResidual.setStatus('current')
if mibBuilder.loadTexts: atvCmnCfgResidual.setDescription('value for the residual carrier.')
atvCommonTestTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 2, 4), )
if mibBuilder.loadTexts: atvCommonTestTable.setStatus('current')
if mibBuilder.loadTexts: atvCommonTestTable.setDescription('Configures the test mode of the exciter.')
atvCommonTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 2, 4, 1), )
atvCommonStateEntry.registerAugmentions(("RS-XX9-ATV-MIB", "atvCommonTestEntry"))
atvCommonTestEntry.setIndexNames(*atvCommonStateEntry.getIndexNames())
if mibBuilder.loadTexts: atvCommonTestEntry.setStatus('current')
if mibBuilder.loadTexts: atvCommonTestEntry.setDescription('An entry in the atvCommonTestTable.')
atvCommonTestSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("off", 1), ("singleCarrier", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvCommonTestSignal.setStatus('current')
if mibBuilder.loadTexts: atvCommonTestSignal.setDescription('off(1)           - no test mode\n                singleCarrier(3) - produces an unmodulated carrier\n                                   on a selected output frequency')
atvVideo = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 3))
atvVideoStateTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 3, 2), )
if mibBuilder.loadTexts: atvVideoStateTable.setStatus('current')
if mibBuilder.loadTexts: atvVideoStateTable.setDescription('Description.')
atvVideoStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 3, 2, 1), ).setIndexNames((0, "RS-XX9-ATV-MIB", "atvVideoStTxIdx"), (0, "RS-XX9-ATV-MIB", "atvVideoStExcIdx"))
if mibBuilder.loadTexts: atvVideoStateEntry.setStatus('current')
if mibBuilder.loadTexts: atvVideoStateEntry.setDescription('Description.')
atvVideoStTxIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 3, 2, 1, 1), IndexTransmitter())
if mibBuilder.loadTexts: atvVideoStTxIdx.setStatus('current')
if mibBuilder.loadTexts: atvVideoStTxIdx.setDescription('The transmitter index.')
atvVideoStExcIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 3, 2, 1, 2), IndexAB())
if mibBuilder.loadTexts: atvVideoStExcIdx.setStatus('current')
if mibBuilder.loadTexts: atvVideoStExcIdx.setDescription('This index distinguishes the exiters.\n                Necessary if you have dual drive transmitters.')
atvVideoStWhiteAmplitudeOutput = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 3, 2, 1, 3), Unsigned32()).setUnits('mV').setMaxAccess("readonly")
if mibBuilder.loadTexts: atvVideoStWhiteAmplitudeOutput.setStatus('current')
if mibBuilder.loadTexts: atvVideoStWhiteAmplitudeOutput.setDescription('Description.')
atvVideoStMemoryGain = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 3, 2, 1, 4), Unsigned32()).setUnits('per thousand').setMaxAccess("readonly")
if mibBuilder.loadTexts: atvVideoStMemoryGain.setStatus('current')
if mibBuilder.loadTexts: atvVideoStMemoryGain.setDescription('Description.')
atvVideoStCurrentGainSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("manual", 1), ("memory", 2), ("automatic", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atvVideoStCurrentGainSource.setStatus('current')
if mibBuilder.loadTexts: atvVideoStCurrentGainSource.setDescription('Description.')
atvVideoStLimiterActive = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 3, 2, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atvVideoStLimiterActive.setStatus('current')
if mibBuilder.loadTexts: atvVideoStLimiterActive.setDescription('Description.')
atvVideoStSyncAmplitudeOutput = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 3, 2, 1, 7), Unsigned32()).setUnits('mV').setMaxAccess("readonly")
if mibBuilder.loadTexts: atvVideoStSyncAmplitudeOutput.setStatus('current')
if mibBuilder.loadTexts: atvVideoStSyncAmplitudeOutput.setDescription('Description.')
atvVideoConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 3, 3), )
if mibBuilder.loadTexts: atvVideoConfigTable.setStatus('current')
if mibBuilder.loadTexts: atvVideoConfigTable.setDescription('Description.')
atvVideoConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 3, 3, 1), )
atvVideoStateEntry.registerAugmentions(("RS-XX9-ATV-MIB", "atvVideoConfigEntry"))
atvVideoConfigEntry.setIndexNames(*atvVideoStateEntry.getIndexNames())
if mibBuilder.loadTexts: atvVideoConfigEntry.setStatus('current')
if mibBuilder.loadTexts: atvVideoConfigEntry.setDescription('Description.')
atvVideoCfgAutomatic = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 3, 3, 1, 1), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvVideoCfgAutomatic.setStatus('current')
if mibBuilder.loadTexts: atvVideoCfgAutomatic.setDescription('Description.')
atvVideoCfgGainSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("manual", 1), ("memory", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvVideoCfgGainSource.setStatus('current')
if mibBuilder.loadTexts: atvVideoCfgGainSource.setDescription('Description.')
atvVideoCfgManualGain = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 100))).setUnits('per thousand').setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvVideoCfgManualGain.setStatus('current')
if mibBuilder.loadTexts: atvVideoCfgManualGain.setDescription('Description.')
atvVideoCfgTestLine = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 3, 3, 1, 4), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(16, 22), ValueRangeConstraint(329, 335), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvVideoCfgTestLine.setStatus('current')
if mibBuilder.loadTexts: atvVideoCfgTestLine.setDescription('Description.')
atvVideoCfgDataLine = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 3, 3, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 22))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvVideoCfgDataLine.setStatus('current')
if mibBuilder.loadTexts: atvVideoCfgDataLine.setDescription('Description.')
atvVideoCfgLimiter = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 3, 3, 1, 6), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvVideoCfgLimiter.setStatus('current')
if mibBuilder.loadTexts: atvVideoCfgLimiter.setDescription('Description.')
atvVideoCfgThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 3, 3, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(900, 1200))).setUnits('per thousand').setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvVideoCfgThreshold.setStatus('current')
if mibBuilder.loadTexts: atvVideoCfgThreshold.setDescription('Description.')
atvVideoCfgSyncImpulsRegeneration = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 3, 3, 1, 8), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvVideoCfgSyncImpulsRegeneration.setStatus('current')
if mibBuilder.loadTexts: atvVideoCfgSyncImpulsRegeneration.setDescription('Description.')
atvVideoCfgSyncAmplitude = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 3, 3, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(200, 500))).setUnits('mV').setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvVideoCfgSyncAmplitude.setStatus('current')
if mibBuilder.loadTexts: atvVideoCfgSyncAmplitude.setDescription('Description.')
atvVideoCfgReceiverPreEqualization = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 3, 3, 1, 10), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvVideoCfgReceiverPreEqualization.setStatus('current')
if mibBuilder.loadTexts: atvVideoCfgReceiverPreEqualization.setDescription('Indicates whether receiver pre-equalization is switched on. \n                Receiver pre-equalization can be switched on or off here.\n                ')
atvVideoCfgDiplexer = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 3, 3, 1, 11), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvVideoCfgDiplexer.setStatus('current')
if mibBuilder.loadTexts: atvVideoCfgDiplexer.setDescription('Description.')
atvVideoCfgDiplexerPeaking = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 3, 3, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 25))).setUnits('centi Bel').setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvVideoCfgDiplexerPeaking.setStatus('current')
if mibBuilder.loadTexts: atvVideoCfgDiplexerPeaking.setDescription('Description.')
atvAudio = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 4))
atvAudioStateTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 4, 2), )
if mibBuilder.loadTexts: atvAudioStateTable.setStatus('current')
if mibBuilder.loadTexts: atvAudioStateTable.setDescription('Description.')
atvAudioStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 4, 2, 1), ).setIndexNames((0, "RS-XX9-ATV-MIB", "atvAudioStTxIdx"), (0, "RS-XX9-ATV-MIB", "atvAudioStExcIdx"))
if mibBuilder.loadTexts: atvAudioStateEntry.setStatus('current')
if mibBuilder.loadTexts: atvAudioStateEntry.setDescription('Description.')
atvAudioStTxIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 4, 2, 1, 1), IndexTransmitter())
if mibBuilder.loadTexts: atvAudioStTxIdx.setStatus('current')
if mibBuilder.loadTexts: atvAudioStTxIdx.setDescription('The transmitter index.')
atvAudioStExcIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 4, 2, 1, 2), IndexAB())
if mibBuilder.loadTexts: atvAudioStExcIdx.setStatus('current')
if mibBuilder.loadTexts: atvAudioStExcIdx.setDescription('This index distinguishes the exiters.\n                Necessary if you have dual drive transmitters.')
atvAudioStCurrentDeviationCarrier1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 4, 2, 1, 3), Unsigned32()).setUnits('Hz').setMaxAccess("readonly")
if mibBuilder.loadTexts: atvAudioStCurrentDeviationCarrier1.setStatus('current')
if mibBuilder.loadTexts: atvAudioStCurrentDeviationCarrier1.setDescription('Description.')
atvAudioStCurrentDeviationCarrier2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 4, 2, 1, 4), Unsigned32()).setUnits('Hz').setMaxAccess("readonly")
if mibBuilder.loadTexts: atvAudioStCurrentDeviationCarrier2.setStatus('current')
if mibBuilder.loadTexts: atvAudioStCurrentDeviationCarrier2.setDescription('Description.')
atvAudioStCurrentPilotDeviation = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 4, 2, 1, 5), Unsigned32()).setUnits('Hz').setMaxAccess("readonly")
if mibBuilder.loadTexts: atvAudioStCurrentPilotDeviation.setStatus('current')
if mibBuilder.loadTexts: atvAudioStCurrentPilotDeviation.setDescription('Description.')
atvAudioStLimiterCarrier1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 4, 2, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atvAudioStLimiterCarrier1.setStatus('current')
if mibBuilder.loadTexts: atvAudioStLimiterCarrier1.setDescription('Description.')
atvAudioStLimiterCarrier2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 4, 2, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atvAudioStLimiterCarrier2.setStatus('current')
if mibBuilder.loadTexts: atvAudioStLimiterCarrier2.setDescription('Description.')
atvAudioConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 4, 3), )
if mibBuilder.loadTexts: atvAudioConfigTable.setStatus('current')
if mibBuilder.loadTexts: atvAudioConfigTable.setDescription('Description.')
atvAudioConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 4, 3, 1), )
atvAudioStateEntry.registerAugmentions(("RS-XX9-ATV-MIB", "atvAudioConfigEntry"))
atvAudioConfigEntry.setIndexNames(*atvAudioStateEntry.getIndexNames())
if mibBuilder.loadTexts: atvAudioConfigEntry.setStatus('current')
if mibBuilder.loadTexts: atvAudioConfigEntry.setDescription('Description.')
atvAudioCfgIrtNicam = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("irt", 1), ("nicam", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvAudioCfgIrtNicam.setStatus('current')
if mibBuilder.loadTexts: atvAudioCfgIrtNicam.setDescription('Description.')
atvAudioCfgPreemphase = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 4, 3, 1, 2), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvAudioCfgPreemphase.setStatus('current')
if mibBuilder.loadTexts: atvAudioCfgPreemphase.setDescription('Description.')
atvAudioCfgNominalDeviationAF1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 4, 3, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(20000, 75000))).setUnits('Hz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvAudioCfgNominalDeviationAF1.setStatus('current')
if mibBuilder.loadTexts: atvAudioCfgNominalDeviationAF1.setDescription('Description.')
atvAudioCfgNominalDeviationAF2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 4, 3, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(20000, 75000))).setUnits('Hz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvAudioCfgNominalDeviationAF2.setStatus('current')
if mibBuilder.loadTexts: atvAudioCfgNominalDeviationAF2.setDescription('Description.')
atvAudioCfgPilotGain = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 4, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1900, -1200))).setUnits('1/100 dBu').setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvAudioCfgPilotGain.setStatus('current')
if mibBuilder.loadTexts: atvAudioCfgPilotGain.setDescription('Description.')
atvAudioCfgPilot = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 4, 3, 1, 6), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvAudioCfgPilot.setStatus('current')
if mibBuilder.loadTexts: atvAudioCfgPilot.setDescription('Description.')
atvAudioCfgSoundModeCarrier1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 4, 3, 1, 7), SoundMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvAudioCfgSoundModeCarrier1.setStatus('current')
if mibBuilder.loadTexts: atvAudioCfgSoundModeCarrier1.setDescription('Description.')
atvAudioCfgSoundModeCarrier2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 4, 3, 1, 8), SoundMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvAudioCfgSoundModeCarrier2.setStatus('current')
if mibBuilder.loadTexts: atvAudioCfgSoundModeCarrier2.setDescription('Description.')
atvAudioCfgLimiterThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 4, 3, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(50000, 120000))).setUnits('Hz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvAudioCfgLimiterThreshold.setStatus('current')
if mibBuilder.loadTexts: atvAudioCfgLimiterThreshold.setDescription('Description.')
atvAudioCfgDeviationLimiter = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 4, 3, 1, 10), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvAudioCfgDeviationLimiter.setStatus('current')
if mibBuilder.loadTexts: atvAudioCfgDeviationLimiter.setDescription('Description.')
atvAudioCfgWarningAbove = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 4, 3, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(50000, 250000))).setUnits('Hz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvAudioCfgWarningAbove.setStatus('current')
if mibBuilder.loadTexts: atvAudioCfgWarningAbove.setDescription('Description.')
atvAudioCfgPrecorrectionChannel1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 4, 3, 1, 12), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvAudioCfgPrecorrectionChannel1.setStatus('current')
if mibBuilder.loadTexts: atvAudioCfgPrecorrectionChannel1.setDescription('Indicates whether the sound phase shifter for carrier 1 is switched on. \n                The setting can be changed here.\n                ')
atvAudioCfgPrecorrectionChannel2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 4, 3, 1, 13), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvAudioCfgPrecorrectionChannel2.setStatus('current')
if mibBuilder.loadTexts: atvAudioCfgPrecorrectionChannel2.setDescription('Indicates whether the sound phase shifter for carrier 1 is switched on. \n                The setting can be changed here.\n                ')
atvAudioCfgInsetPoint1Channel1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 4, 3, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setUnits('per thousand').setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvAudioCfgInsetPoint1Channel1.setStatus('current')
if mibBuilder.loadTexts: atvAudioCfgInsetPoint1Channel1.setDescription('Indicates the first position defined for the respective onset point of the \n                phase shifter (referenced to modulation of the picture signal)\n                ')
atvAudioCfgInsetPoint1Channel2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 4, 3, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setUnits('per thousand').setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvAudioCfgInsetPoint1Channel2.setStatus('current')
if mibBuilder.loadTexts: atvAudioCfgInsetPoint1Channel2.setDescription('Indicates the first position defined for the respective onset point of the \n                phase shifter (referenced to modulation of the picture signal)\n                ')
atvAudioCfgSlope1Channel1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 4, 3, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-500, 500))).setUnits('per thousand').setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvAudioCfgSlope1Channel1.setStatus('current')
if mibBuilder.loadTexts: atvAudioCfgSlope1Channel1.setDescription('Indicates the value that has been set for the slope at the respective \n                onset point of the phase shifter.\n                ')
atvAudioCfgSlope1Channel2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 4, 3, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-500, 500))).setUnits('per thousand').setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvAudioCfgSlope1Channel2.setStatus('current')
if mibBuilder.loadTexts: atvAudioCfgSlope1Channel2.setDescription('Indicates the value that has been set for the slope at the respective \n                onset point of the phase shifter.\n                ')
atvAudioCfgInsetPoint2Channel1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 4, 3, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setUnits('per thousand').setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvAudioCfgInsetPoint2Channel1.setStatus('current')
if mibBuilder.loadTexts: atvAudioCfgInsetPoint2Channel1.setDescription('Indicates the second position defined for the respective onset \n                point of the phase shifter (referenced to modulation of the \n                picture signal)\n                ')
atvAudioCfgInsetPoint2Channel2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 4, 3, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setUnits('per thousand').setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvAudioCfgInsetPoint2Channel2.setStatus('current')
if mibBuilder.loadTexts: atvAudioCfgInsetPoint2Channel2.setDescription('Indicates the second position defined for the respective onset \n                point of the phase shifter (referenced to modulation of the \n                picture signal)\n                ')
atvAudioCfgSlope2Channel1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 4, 3, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-500, 500))).setUnits('per thousand').setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvAudioCfgSlope2Channel1.setStatus('current')
if mibBuilder.loadTexts: atvAudioCfgSlope2Channel1.setDescription('Indicates the value that has been set for the slope at \n                the respective onset point of the phase shifter.\n                ')
atvAudioCfgSlope2Channel2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 4, 3, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-500, 500))).setUnits('per thousand').setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvAudioCfgSlope2Channel2.setStatus('current')
if mibBuilder.loadTexts: atvAudioCfgSlope2Channel2.setDescription('Indicates the value that has been set for the slope at \n                the respective onset point of the phase shifter.\n                ')
atvNicam = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 5))
atvNicamConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 5, 3), )
if mibBuilder.loadTexts: atvNicamConfigTable.setStatus('current')
if mibBuilder.loadTexts: atvNicamConfigTable.setDescription('Description.')
atvNicamConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 5, 3, 1), ).setIndexNames((0, "RS-XX9-ATV-MIB", "atvNicamCfgTxIdx"), (0, "RS-XX9-ATV-MIB", "atvNicamCfgExcIdx"))
if mibBuilder.loadTexts: atvNicamConfigEntry.setStatus('current')
if mibBuilder.loadTexts: atvNicamConfigEntry.setDescription('Description.')
atvNicamCfgTxIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 5, 3, 1, 1), IndexTransmitter())
if mibBuilder.loadTexts: atvNicamCfgTxIdx.setStatus('current')
if mibBuilder.loadTexts: atvNicamCfgTxIdx.setDescription('The transmitter index.')
atvNicamCfgExcIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 5, 3, 1, 2), IndexAB())
if mibBuilder.loadTexts: atvNicamCfgExcIdx.setStatus('current')
if mibBuilder.loadTexts: atvNicamCfgExcIdx.setDescription('This index distinguishes the exiters.\n                Necessary if you have dual drive transmitters.')
atvNicamCfgAudioMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 5, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("equalFM", 1), ("monoData", 2), ("stereo", 3), ("dual", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvNicamCfgAudioMode.setStatus('current')
if mibBuilder.loadTexts: atvNicamCfgAudioMode.setDescription('Description.')
atvNicamCfgPreemphasis = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 5, 3, 1, 4), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvNicamCfgPreemphasis.setStatus('current')
if mibBuilder.loadTexts: atvNicamCfgPreemphasis.setDescription('Description.')
atvNicamCfgReserveSound = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 5, 3, 1, 5), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvNicamCfgReserveSound.setStatus('current')
if mibBuilder.loadTexts: atvNicamCfgReserveSound.setDescription('Description.')
atvNicamCfgNicamMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 5, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("coder", 1), ("modulator", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvNicamCfgNicamMode.setStatus('current')
if mibBuilder.loadTexts: atvNicamCfgNicamMode.setDescription('Description.')
atvNicamCfgNicamRolloff = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 5, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("auto", 1), ("pct40", 2), ("pct100", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvNicamCfgNicamRolloff.setStatus('current')
if mibBuilder.loadTexts: atvNicamCfgNicamRolloff.setDescription('Description.')
atvNicamCfgSoundMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 1, 5, 3, 1, 8), SoundMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvNicamCfgSoundMode.setStatus('current')
if mibBuilder.loadTexts: atvNicamCfgSoundMode.setDescription('Description.')
rsXx9AtvConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 2))
rsXx9AtvCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 2, 1))
atvBasicCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 2, 1, 1)).setObjects(("RS-XX9-ATV-MIB", "atvObjsCommon"), ("RS-XX9-ATV-MIB", "atvObjsVideo"), ("RS-XX9-ATV-MIB", "atvObjsAudio"), ("RS-XX9-ATV-MIB", "atvObjsNicam"), ("RS-XX9-ATV-MIB", "atvObjsInput"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atvBasicCompliance = atvBasicCompliance.setStatus('current')
if mibBuilder.loadTexts: atvBasicCompliance.setDescription('The compliance statement for XX9000 ATV encoding.')
rsXx9AtvGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 2, 2))
atvObjsInput = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 2, 2, 1)).setObjects(("RS-XX9-ATV-MIB", "atvInpCmnDatalineInfo"), ("RS-XX9-ATV-MIB", "atvInpCmnInputImpedance"), ("RS-XX9-ATV-MIB", "atvInpVideoWhiteAmplitude"), ("RS-XX9-ATV-MIB", "atvInpVideoWhitePulseMonitoring"), ("RS-XX9-ATV-MIB", "atvInpVideoSyncAmplitude"), ("RS-XX9-ATV-MIB", "atvInpVideoSyncMonitoring"), ("RS-XX9-ATV-MIB", "atvInpVideoNominalAmplitude"), ("RS-XX9-ATV-MIB", "atvInpAudioCurrentLevel"), ("RS-XX9-ATV-MIB", "atvInpAudioClipping"), ("RS-XX9-ATV-MIB", "atvInpAudioNominalLevel"), ("RS-XX9-ATV-MIB", "atvInpNicamCurrentLevel"), ("RS-XX9-ATV-MIB", "atvInpNicamClipping"), ("RS-XX9-ATV-MIB", "atvInpVideoClipping"), ("RS-XX9-ATV-MIB", "atvInputIrdetoMode"), ("RS-XX9-ATV-MIB", "atvInpNicamGainAdjustment"), ("RS-XX9-ATV-MIB", "atvInpCmnAudioLowpass"), ("RS-XX9-ATV-MIB", "atvInpCmnNicam728Datastream"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atvObjsInput = atvObjsInput.setStatus('current')
if mibBuilder.loadTexts: atvObjsInput.setDescription('Input ATV objects group.')
atvObjsCommon = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 2, 2, 2)).setObjects(("RS-XX9-ATV-MIB", "atvCmnStCurrentAudioMode"), ("RS-XX9-ATV-MIB", "atvCmnCfgTvStandard"), ("RS-XX9-ATV-MIB", "atvCmnCfgSoundCarrierSelect"), ("RS-XX9-ATV-MIB", "atvCmnCfgCoderMode"), ("RS-XX9-ATV-MIB", "atvCmnCfgVisionSound1"), ("RS-XX9-ATV-MIB", "atvCmnCfgVisionSound2"), ("RS-XX9-ATV-MIB", "atvCmnCfgResidual"), ("RS-XX9-ATV-MIB", "atvCommonTestSignal"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atvObjsCommon = atvObjsCommon.setStatus('current')
if mibBuilder.loadTexts: atvObjsCommon.setDescription('Common ATV objects group.')
atvObjsVideo = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 2, 2, 3)).setObjects(("RS-XX9-ATV-MIB", "atvVideoStWhiteAmplitudeOutput"), ("RS-XX9-ATV-MIB", "atvVideoStMemoryGain"), ("RS-XX9-ATV-MIB", "atvVideoStCurrentGainSource"), ("RS-XX9-ATV-MIB", "atvVideoStLimiterActive"), ("RS-XX9-ATV-MIB", "atvVideoStSyncAmplitudeOutput"), ("RS-XX9-ATV-MIB", "atvVideoCfgAutomatic"), ("RS-XX9-ATV-MIB", "atvVideoCfgGainSource"), ("RS-XX9-ATV-MIB", "atvVideoCfgManualGain"), ("RS-XX9-ATV-MIB", "atvVideoCfgTestLine"), ("RS-XX9-ATV-MIB", "atvVideoCfgDataLine"), ("RS-XX9-ATV-MIB", "atvVideoCfgLimiter"), ("RS-XX9-ATV-MIB", "atvVideoCfgThreshold"), ("RS-XX9-ATV-MIB", "atvVideoCfgSyncImpulsRegeneration"), ("RS-XX9-ATV-MIB", "atvVideoCfgSyncAmplitude"), ("RS-XX9-ATV-MIB", "atvVideoCfgReceiverPreEqualization"), ("RS-XX9-ATV-MIB", "atvVideoCfgDiplexer"), ("RS-XX9-ATV-MIB", "atvVideoCfgDiplexerPeaking"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atvObjsVideo = atvObjsVideo.setStatus('current')
if mibBuilder.loadTexts: atvObjsVideo.setDescription('Video ATV objects group.')
atvObjsAudio = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 2, 2, 4)).setObjects(("RS-XX9-ATV-MIB", "atvAudioStCurrentDeviationCarrier1"), ("RS-XX9-ATV-MIB", "atvAudioStCurrentDeviationCarrier2"), ("RS-XX9-ATV-MIB", "atvAudioStCurrentPilotDeviation"), ("RS-XX9-ATV-MIB", "atvAudioStLimiterCarrier1"), ("RS-XX9-ATV-MIB", "atvAudioStLimiterCarrier2"), ("RS-XX9-ATV-MIB", "atvAudioCfgIrtNicam"), ("RS-XX9-ATV-MIB", "atvAudioCfgPreemphase"), ("RS-XX9-ATV-MIB", "atvAudioCfgNominalDeviationAF1"), ("RS-XX9-ATV-MIB", "atvAudioCfgNominalDeviationAF2"), ("RS-XX9-ATV-MIB", "atvAudioCfgPilotGain"), ("RS-XX9-ATV-MIB", "atvAudioCfgPilot"), ("RS-XX9-ATV-MIB", "atvAudioCfgSoundModeCarrier1"), ("RS-XX9-ATV-MIB", "atvAudioCfgSoundModeCarrier2"), ("RS-XX9-ATV-MIB", "atvAudioCfgLimiterThreshold"), ("RS-XX9-ATV-MIB", "atvAudioCfgDeviationLimiter"), ("RS-XX9-ATV-MIB", "atvAudioCfgWarningAbove"), ("RS-XX9-ATV-MIB", "atvAudioCfgPrecorrectionChannel1"), ("RS-XX9-ATV-MIB", "atvAudioCfgPrecorrectionChannel2"), ("RS-XX9-ATV-MIB", "atvAudioCfgInsetPoint1Channel1"), ("RS-XX9-ATV-MIB", "atvAudioCfgInsetPoint1Channel2"), ("RS-XX9-ATV-MIB", "atvAudioCfgSlope1Channel1"), ("RS-XX9-ATV-MIB", "atvAudioCfgSlope1Channel2"), ("RS-XX9-ATV-MIB", "atvAudioCfgInsetPoint2Channel1"), ("RS-XX9-ATV-MIB", "atvAudioCfgInsetPoint2Channel2"), ("RS-XX9-ATV-MIB", "atvAudioCfgSlope2Channel1"), ("RS-XX9-ATV-MIB", "atvAudioCfgSlope2Channel2"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atvObjsAudio = atvObjsAudio.setStatus('current')
if mibBuilder.loadTexts: atvObjsAudio.setDescription('Audio ATV objects group.')
atvObjsNicam = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 2, 2, 5)).setObjects(("RS-XX9-ATV-MIB", "atvNicamCfgAudioMode"), ("RS-XX9-ATV-MIB", "atvNicamCfgPreemphasis"), ("RS-XX9-ATV-MIB", "atvNicamCfgReserveSound"), ("RS-XX9-ATV-MIB", "atvNicamCfgNicamMode"), ("RS-XX9-ATV-MIB", "atvNicamCfgNicamRolloff"), ("RS-XX9-ATV-MIB", "atvNicamCfgSoundMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atvObjsNicam = atvObjsNicam.setStatus('current')
if mibBuilder.loadTexts: atvObjsNicam.setDescription('NICAM ATV objects group.')
atvObjsInputObsolete = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 9, 2, 2, 6)).setObjects(("RS-XX9-ATV-MIB", "atvInpCmnInputIdx"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atvObjsInputObsolete = atvObjsInputObsolete.setStatus('obsolete')
if mibBuilder.loadTexts: atvObjsInputObsolete.setDescription('Obsolete input ATV objects group.')
mibBuilder.exportSymbols("RS-XX9-ATV-MIB", atvVideoConfigTable=atvVideoConfigTable, atvInpVideoNominalAmplitude=atvInpVideoNominalAmplitude, atvVideoCfgThreshold=atvVideoCfgThreshold, atvAudioCfgPrecorrectionChannel2=atvAudioCfgPrecorrectionChannel2, atvInpCmnInputIdx=atvInpCmnInputIdx, atvCmnCfgCoderMode=atvCmnCfgCoderMode, atvVideoStMemoryGain=atvVideoStMemoryGain, atvObjsInput=atvObjsInput, atvCmnCfgResidual=atvCmnCfgResidual, atvAudioStLimiterCarrier2=atvAudioStLimiterCarrier2, atvAudioCfgPilot=atvAudioCfgPilot, atvAudio=atvAudio, atvCommonStateEntry=atvCommonStateEntry, atvAudioCfgWarningAbove=atvAudioCfgWarningAbove, atvAudioStateTable=atvAudioStateTable, atvInpAudioClipping=atvInpAudioClipping, atvAudioCfgSlope1Channel2=atvAudioCfgSlope1Channel2, atvNicamConfigTable=atvNicamConfigTable, atvCommonTestEntry=atvCommonTestEntry, atvInpAudioNominalLevel=atvInpAudioNominalLevel, atvInpCmnDatalineInfo=atvInpCmnDatalineInfo, atvCommon=atvCommon, atvObjsAudio=atvObjsAudio, atvAudioCfgInsetPoint1Channel2=atvAudioCfgInsetPoint1Channel2, atvInputAudioEntry=atvInputAudioEntry, atvNicamCfgSoundMode=atvNicamCfgSoundMode, atvInpVideoSyncAmplitude=atvInpVideoSyncAmplitude, atvVideoStateTable=atvVideoStateTable, atvVideoStSyncAmplitudeOutput=atvVideoStSyncAmplitudeOutput, atvNicamCfgTxIdx=atvNicamCfgTxIdx, atvVideoCfgTestLine=atvVideoCfgTestLine, atvVideoStWhiteAmplitudeOutput=atvVideoStWhiteAmplitudeOutput, atvAudioStExcIdx=atvAudioStExcIdx, atvCmnCfgVisionSound2=atvCmnCfgVisionSound2, atvInput=atvInput, atvAudioCfgDeviationLimiter=atvAudioCfgDeviationLimiter, atvCommonConfigTable=atvCommonConfigTable, atvInpVideoWhitePulseMonitoring=atvInpVideoWhitePulseMonitoring, atvVideoCfgSyncImpulsRegeneration=atvVideoCfgSyncImpulsRegeneration, atvAudioCfgInsetPoint2Channel2=atvAudioCfgInsetPoint2Channel2, atvNicamConfigEntry=atvNicamConfigEntry, atvCommonTestTable=atvCommonTestTable, atvInpNicamCurrentLevel=atvInpNicamCurrentLevel, atvInpCmnExcIdx=atvInpCmnExcIdx, atvInpAudioCurrentLevel=atvInpAudioCurrentLevel, atvCmnStCurrentAudioMode=atvCmnStCurrentAudioMode, atvInputCommonTable=atvInputCommonTable, atvInputIrdetoMode=atvInputIrdetoMode, atvInputVideoEntry=atvInputVideoEntry, atvVideoCfgReceiverPreEqualization=atvVideoCfgReceiverPreEqualization, atvAudioCfgInsetPoint1Channel1=atvAudioCfgInsetPoint1Channel1, rsXx9AtvMibModule=rsXx9AtvMibModule, atvNicamCfgAudioMode=atvNicamCfgAudioMode, atvInputNicamTable=atvInputNicamTable, atvInputVideoTable=atvInputVideoTable, atvCmnCfgVisionSound1=atvCmnCfgVisionSound1, atvAudioConfigEntry=atvAudioConfigEntry, atvCommonConfigEntry=atvCommonConfigEntry, atvAudioCfgSlope1Channel1=atvAudioCfgSlope1Channel1, atvVideoCfgDataLine=atvVideoCfgDataLine, atvAudioCfgSlope2Channel1=atvAudioCfgSlope2Channel1, atvObjsInputObsolete=atvObjsInputObsolete, atvAudioStCurrentDeviationCarrier1=atvAudioStCurrentDeviationCarrier1, rsXx9AtvObjects=rsXx9AtvObjects, PYSNMP_MODULE_ID=rsXx9AtvMibModule, rsXx9AtvGroups=rsXx9AtvGroups, atvAudioConfigTable=atvAudioConfigTable, atvNicamCfgReserveSound=atvNicamCfgReserveSound, atvInpCmnInputImpedance=atvInpCmnInputImpedance, atvNicamCfgNicamRolloff=atvNicamCfgNicamRolloff, rsXx9AtvCompliances=rsXx9AtvCompliances, atvVideoStateEntry=atvVideoStateEntry, atvVideoCfgDiplexerPeaking=atvVideoCfgDiplexerPeaking, SoundMode=SoundMode, atvNicamCfgExcIdx=atvNicamCfgExcIdx, atvNicamCfgNicamMode=atvNicamCfgNicamMode, atvNicam=atvNicam, atvInpCmnNicam728Datastream=atvInpCmnNicam728Datastream, atvVideoCfgDiplexer=atvVideoCfgDiplexer, atvAudioCfgPreemphase=atvAudioCfgPreemphase, atvCmnStExcIdx=atvCmnStExcIdx, atvAudioCfgLimiterThreshold=atvAudioCfgLimiterThreshold, atvObjsCommon=atvObjsCommon, atvVideoCfgLimiter=atvVideoCfgLimiter, atvAudioStCurrentPilotDeviation=atvAudioStCurrentPilotDeviation, atvAudioCfgIrtNicam=atvAudioCfgIrtNicam, rsXx9AtvConformance=rsXx9AtvConformance, atvVideo=atvVideo, atvCommonStateTable=atvCommonStateTable, atvInpCmnTxIdx=atvInpCmnTxIdx, atvCommonTestSignal=atvCommonTestSignal, atvAudioStCurrentDeviationCarrier2=atvAudioStCurrentDeviationCarrier2, atvVideoStTxIdx=atvVideoStTxIdx, atvInpVideoSyncMonitoring=atvInpVideoSyncMonitoring, atvAudioCfgNominalDeviationAF2=atvAudioCfgNominalDeviationAF2, atvObjsVideo=atvObjsVideo, atvObjsNicam=atvObjsNicam, atvVideoCfgSyncAmplitude=atvVideoCfgSyncAmplitude, atvAudioStLimiterCarrier1=atvAudioStLimiterCarrier1, atvVideoConfigEntry=atvVideoConfigEntry, atvCmnStTxIdx=atvCmnStTxIdx, atvInpAudioNfSignalIdx=atvInpAudioNfSignalIdx, atvAudioCfgSoundModeCarrier1=atvAudioCfgSoundModeCarrier1, rsXx9AtvNotifications=rsXx9AtvNotifications, atvAudioCfgNominalDeviationAF1=atvAudioCfgNominalDeviationAF1, atvInpVideoClipping=atvInpVideoClipping, atvAudioCfgPrecorrectionChannel1=atvAudioCfgPrecorrectionChannel1, atvBasicCompliance=atvBasicCompliance, atvVideoCfgAutomatic=atvVideoCfgAutomatic, atvCmnCfgSoundCarrierSelect=atvCmnCfgSoundCarrierSelect, atvVideoCfgManualGain=atvVideoCfgManualGain, atvInputAudioTable=atvInputAudioTable, atvInputNicamEntry=atvInputNicamEntry, atvVideoCfgGainSource=atvVideoCfgGainSource, atvInpVideoWhiteAmplitude=atvInpVideoWhiteAmplitude, atvVideoStCurrentGainSource=atvVideoStCurrentGainSource, atvAudioCfgSoundModeCarrier2=atvAudioCfgSoundModeCarrier2, atvNicamCfgPreemphasis=atvNicamCfgPreemphasis, atvVideoStExcIdx=atvVideoStExcIdx, atvInputCommonEntry=atvInputCommonEntry, atvAudioStateEntry=atvAudioStateEntry, atvAudioCfgPilotGain=atvAudioCfgPilotGain, atvAudioCfgSlope2Channel2=atvAudioCfgSlope2Channel2, atvInpNicamClipping=atvInpNicamClipping, atvInpCmnAudioLowpass=atvInpCmnAudioLowpass, atvInpNicamGainAdjustment=atvInpNicamGainAdjustment, atvVideoStLimiterActive=atvVideoStLimiterActive, atvCmnCfgTvStandard=atvCmnCfgTvStandard, atvAudioCfgInsetPoint2Channel1=atvAudioCfgInsetPoint2Channel1, atvAudioStTxIdx=atvAudioStTxIdx)
