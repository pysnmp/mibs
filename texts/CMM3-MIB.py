#
# PySNMP MIB module CMM3-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/cambium/CMM3-MIB.txt
# Produced by pysmi-1.1.12 at Thu Nov 28 02:55:30 2024
# On host fv-az885-149 platform Linux version 6.5.0-1025-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Integer32, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Counter32, iso, TimeTicks, Unsigned32, Gauge32, MibIdentifier, NotificationType, Bits, ModuleIdentity, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Counter32", "iso", "TimeTicks", "Unsigned32", "Gauge32", "MibIdentifier", "NotificationType", "Bits", "ModuleIdentity", "IpAddress")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
whispCMM, whispBox, whispModules = mibBuilder.importSymbols("WHISP-GLOBAL-REG-MIB", "whispCMM", "whispBox", "whispModules")
WhispMACAddress, WhispLUID, EventString = mibBuilder.importSymbols("WHISP-TCV2-MIB", "WhispMACAddress", "WhispLUID", "EventString")
cmmIIIMibModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 161, 19, 1, 1, 15))
if mibBuilder.loadTexts: cmmIIIMibModule.setLastUpdated('200305150000Z')
if mibBuilder.loadTexts: cmmIIIMibModule.setOrganization('Cambium Networks')
if mibBuilder.loadTexts: cmmIIIMibModule.setContactInfo('\n            Canopy Technical Support\n            email: technical-support@canopywireless.com')
if mibBuilder.loadTexts: cmmIIIMibModule.setDescription('This module contains CMM3 MIB definitions.')
cmmGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 1))
cmmSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 2))
cmmConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 3))
cmmStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 4))
cmmGps = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 5))
cmmEventLog = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 6))
cmmControls = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 7))
cmmSwitchGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 1, 1)).setObjects(("CMM3-MIB", "portNumber"), ("CMM3-MIB", "rxDropPkts"), ("CMM3-MIB", "rxOctets"), ("CMM3-MIB", "rxBroadcastPkts"), ("CMM3-MIB", "rxMulticastPkts"), ("CMM3-MIB", "rxSAChanges"), ("CMM3-MIB", "rxUndersizePkts"), ("CMM3-MIB", "rxOversizePkts"), ("CMM3-MIB", "rxFragments"), ("CMM3-MIB", "rxJabbers"), ("CMM3-MIB", "rxUnicastPkts"), ("CMM3-MIB", "rxAlignmentErrors"), ("CMM3-MIB", "rxFCSErrors"), ("CMM3-MIB", "rxGoodOctets"), ("CMM3-MIB", "rxExcessSizeDisc"), ("CMM3-MIB", "rxPausePkts"), ("CMM3-MIB", "rxSymbolErrors"), ("CMM3-MIB", "txDropPkts"), ("CMM3-MIB", "txOctets"), ("CMM3-MIB", "txBroadcastPkts"), ("CMM3-MIB", "txMulticastPkts"), ("CMM3-MIB", "txCollisions"), ("CMM3-MIB", "txUnicastPkts"), ("CMM3-MIB", "txSingleCollision"), ("CMM3-MIB", "txMultipleCollision"), ("CMM3-MIB", "txDeferredTransmit"), ("CMM3-MIB", "txLateCollision"), ("CMM3-MIB", "txExcessiveCollision"), ("CMM3-MIB", "txPausePkts"), ("CMM3-MIB", "txFrameInDisc"), ("CMM3-MIB", "pkts64Octets"), ("CMM3-MIB", "pkts65to127Octets"), ("CMM3-MIB", "pkts128to255Octets"), ("CMM3-MIB", "pkts256to511Octets"), ("CMM3-MIB", "pkts512to1023Octets"), ("CMM3-MIB", "pkts1024to1522Octets"), ("CMM3-MIB", "mirSrcPortNumber"), ("CMM3-MIB", "mirSrcRxEnable"), ("CMM3-MIB", "mirSrcTxEnable"), ("CMM3-MIB", "portMirrorEnable"), ("CMM3-MIB", "mirrorCapturePort"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmmSwitchGroup = cmmSwitchGroup.setStatus('current')
if mibBuilder.loadTexts: cmmSwitchGroup.setDescription('CMMIII switch group.')
cmmConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 1, 2)).setObjects(("CMM3-MIB", "gpsTimingPulse"), ("CMM3-MIB", "lan1Ip"), ("CMM3-MIB", "lan1SubnetMask"), ("CMM3-MIB", "defaultGateway"), ("CMM3-MIB", "port1PowerCtr"), ("CMM3-MIB", "port2PowerCtr"), ("CMM3-MIB", "port3PowerCtr"), ("CMM3-MIB", "port4PowerCtr"), ("CMM3-MIB", "port5PowerCtr"), ("CMM3-MIB", "port6PowerCtr"), ("CMM3-MIB", "port7PowerCtr"), ("CMM3-MIB", "port8PowerCtr"), ("CMM3-MIB", "displayOnlyAccess"), ("CMM3-MIB", "fullAccess"), ("CMM3-MIB", "displayOnlyStatus"), ("CMM3-MIB", "fullAccessStatus"), ("CMM3-MIB", "webAutoUpdate"), ("CMM3-MIB", "port1Config"), ("CMM3-MIB", "port2Config"), ("CMM3-MIB", "port3Config"), ("CMM3-MIB", "port4Config"), ("CMM3-MIB", "port5Config"), ("CMM3-MIB", "port6Config"), ("CMM3-MIB", "port7Config"), ("CMM3-MIB", "port8Config"), ("CMM3-MIB", "port1Description"), ("CMM3-MIB", "port2Description"), ("CMM3-MIB", "port3Description"), ("CMM3-MIB", "port4Description"), ("CMM3-MIB", "port5Description"), ("CMM3-MIB", "port6Description"), ("CMM3-MIB", "port7Description"), ("CMM3-MIB", "port8Description"), ("CMM3-MIB", "snmpTrap1"), ("CMM3-MIB", "snmpTrap2"), ("CMM3-MIB", "snmpTrap3"), ("CMM3-MIB", "snmpTrap4"), ("CMM3-MIB", "snmpTrap5"), ("CMM3-MIB", "snmpTrap6"), ("CMM3-MIB", "snmpTrap7"), ("CMM3-MIB", "snmpTrap8"), ("CMM3-MIB", "snmpTrap9"), ("CMM3-MIB", "snmpTrap10"), ("CMM3-MIB", "vlanTagEnable"), ("CMM3-MIB", "vlanTagId"), ("CMM3-MIB", "port1Uplink"), ("CMM3-MIB", "port2Uplink"), ("CMM3-MIB", "port3Uplink"), ("CMM3-MIB", "port4Uplink"), ("CMM3-MIB", "port5Uplink"), ("CMM3-MIB", "port6Uplink"), ("CMM3-MIB", "port7Uplink"), ("CMM3-MIB", "port8Uplink"), ("CMM3-MIB", "port1Management"), ("CMM3-MIB", "port2Management"), ("CMM3-MIB", "port3Management"), ("CMM3-MIB", "port4Management"), ("CMM3-MIB", "port5Management"), ("CMM3-MIB", "port6Management"), ("CMM3-MIB", "port7Management"), ("CMM3-MIB", "port8Management"), ("CMM3-MIB", "rebootIfRequired"), ("CMM3-MIB", "port1VlanConf"), ("CMM3-MIB", "port2VlanConf"), ("CMM3-MIB", "port3VlanConf"), ("CMM3-MIB", "port4VlanConf"), ("CMM3-MIB", "port5VlanConf"), ("CMM3-MIB", "port6VlanConf"), ("CMM3-MIB", "port7VlanConf"), ("CMM3-MIB", "port8VlanConf"), ("CMM3-MIB", "port1PwrReset"), ("CMM3-MIB", "port2PwrReset"), ("CMM3-MIB", "port3PwrReset"), ("CMM3-MIB", "port4PwrReset"), ("CMM3-MIB", "port5PwrReset"), ("CMM3-MIB", "port6PwrReset"), ("CMM3-MIB", "port7PwrReset"), ("CMM3-MIB", "port8PwrReset"), ("CMM3-MIB", "snmpReadOnly"), ("CMM3-MIB", "snmpCommunityString"), ("CMM3-MIB", "snmpAccessSubnet"), ("CMM3-MIB", "snmpAccessSubnet2"), ("CMM3-MIB", "snmpAccessSubnet3"), ("CMM3-MIB", "snmpAccessSubnet4"), ("CMM3-MIB", "snmpAccessSubnet5"), ("CMM3-MIB", "snmpAccessSubnet6"), ("CMM3-MIB", "snmpAccessSubnet7"), ("CMM3-MIB", "snmpAccessSubnet8"), ("CMM3-MIB", "snmpAccessSubnet9"), ("CMM3-MIB", "snmpAccessSubnet10"), ("CMM3-MIB", "sessionTimeout"), ("CMM3-MIB", "ipAccessFilterEnable"), ("CMM3-MIB", "allowedIPAccess1"), ("CMM3-MIB", "allowedIPAccess2"), ("CMM3-MIB", "allowedIPAccess3"), ("CMM3-MIB", "cmm3SnmpGPSSyncTrapEnable"), ("CMM3-MIB", "siteInfoViewable"), ("CMM3-MIB", "verifyGPSChecksum"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmmConfigGroup = cmmConfigGroup.setStatus('current')
if mibBuilder.loadTexts: cmmConfigGroup.setDescription('CMMIII configuration group.')
cmmStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 1, 3)).setObjects(("CMM3-MIB", "portIndex"), ("CMM3-MIB", "linkStatus"), ("CMM3-MIB", "linkSpeed"), ("CMM3-MIB", "duplexStatus"), ("CMM3-MIB", "powerStatus"), ("CMM3-MIB", "uplinkStatus"), ("CMM3-MIB", "managementStatus"), ("CMM3-MIB", "deviceType"), ("CMM3-MIB", "pldVersion"), ("CMM3-MIB", "softwareVersion"), ("CMM3-MIB", "systemTime"), ("CMM3-MIB", "upTime"), ("CMM3-MIB", "satellitesVisible"), ("CMM3-MIB", "satellitesTracked"), ("CMM3-MIB", "latitude"), ("CMM3-MIB", "longitude"), ("CMM3-MIB", "height"), ("CMM3-MIB", "trackingMode"), ("CMM3-MIB", "syncStatus"), ("CMM3-MIB", "macAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmmStatusGroup = cmmStatusGroup.setStatus('current')
if mibBuilder.loadTexts: cmmStatusGroup.setDescription('CMMIII configuration group.')
cmmGPSGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 1, 4)).setObjects(("CMM3-MIB", "gpsTrackingMode"), ("CMM3-MIB", "gpsTime"), ("CMM3-MIB", "gpsDate"), ("CMM3-MIB", "gpsSatellitesVisible"), ("CMM3-MIB", "gpsSatellitesTracked"), ("CMM3-MIB", "gpsHeight"), ("CMM3-MIB", "gpsAntennaConnection"), ("CMM3-MIB", "gpsLatitude"), ("CMM3-MIB", "gpsLongitude"), ("CMM3-MIB", "gpsInvalidMsg"), ("CMM3-MIB", "gpsRestartCount"), ("CMM3-MIB", "gpsReceiverInfo"), ("CMM3-MIB", "gpsReInitCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmmGPSGroup = cmmGPSGroup.setStatus('current')
if mibBuilder.loadTexts: cmmGPSGroup.setDescription('CMMIII GPS status group.')
cmmUserTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 1, 5)).setObjects(("CMM3-MIB", "entryIndex"), ("CMM3-MIB", "userLoginName"), ("CMM3-MIB", "userPswd"), ("CMM3-MIB", "accessLevel"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmmUserTableGroup = cmmUserTableGroup.setStatus('current')
if mibBuilder.loadTexts: cmmUserTableGroup.setDescription('CMMIII User Information Table group.')
portMirrorEnable = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portMirrorEnable.setStatus('current')
if mibBuilder.loadTexts: portMirrorEnable.setDescription('A unique value for each CMM port.  Its value starts from 1')
mirrorCapturePort = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("port1", 1), ("port2", 2), ("port3", 3), ("port4", 4), ("port5", 5), ("port6", 6), ("port7", 7), ("port8", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mirrorCapturePort.setStatus('current')
if mibBuilder.loadTexts: mirrorCapturePort.setDescription('A unique value for each CMM port.  Its value starts from 1')
cmmSwitchTable = MibTable((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 2, 1), )
if mibBuilder.loadTexts: cmmSwitchTable.setStatus('current')
if mibBuilder.loadTexts: cmmSwitchTable.setDescription('Table of CMM MIB counters.')
cmmSwitchEntry = MibTableRow((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 2, 1, 1), ).setIndexNames((0, "CMM3-MIB", "mirSrcPortNumber"))
if mibBuilder.loadTexts: cmmSwitchEntry.setStatus('current')
if mibBuilder.loadTexts: cmmSwitchEntry.setDescription('CMM MIB counters')
portNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portNumber.setStatus('current')
if mibBuilder.loadTexts: portNumber.setDescription('A unique value for each CMM port.  Its value starts from 1')
rxDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxDropPkts.setStatus('current')
if mibBuilder.loadTexts: rxDropPkts.setDescription('The number of good packets received by a port that \n             were dropped due to lack of resources(e.g., lack of \n             input buffers)or were dropped due to lack of resources \n             before a determination of the validity of the packet was \n             able to be made (e.g., receive FIFO overflow). The counter \n             is only incremented if the receive error was not counted \n             by either the RxExcessSizeDisc, the RxAlignmentErrors or \n             the RxRCSErrors counters.')
rxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 2, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxOctets.setStatus('current')
if mibBuilder.loadTexts: rxOctets.setDescription('The number of bytes of data received by a port\n             (excluding preamble but including FCS), including\n             bad packets.')
rxBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxBroadcastPkts.setStatus('current')
if mibBuilder.loadTexts: rxBroadcastPkts.setDescription('The number of good packets received by a port that\n             are directed to the broadcast address. This counter\n             does not include error broadcast packets or valid\n             multicast packets.')
rxMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxMulticastPkts.setStatus('current')
if mibBuilder.loadTexts: rxMulticastPkts.setDescription('The number of good packets received by a port that\n             are directed to the multicast address. This counter\n             does not include error multicast packets or valid\n             broadcast packets.')
rxSAChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxSAChanges.setStatus('current')
if mibBuilder.loadTexts: rxSAChanges.setDescription('The number of times the SA of good receive packets\n             has changed from the previous value. A count greater\n             than 1 generally indicates the port if connected to\n             a repeater based network.')
rxUndersizePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxUndersizePkts.setStatus('current')
if mibBuilder.loadTexts: rxUndersizePkts.setDescription('The number of good packets received by a port that are\n             less than 64 bytes long (excluding framing bits but\n             including the FCS).')
rxOversizePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxOversizePkts.setStatus('current')
if mibBuilder.loadTexts: rxOversizePkts.setDescription('The number of good packets received by a port that are\n             greater than 1522 bytes inclusive (excluding framing bits \n             but including the FCS). Note that this counter alone will\n             be incremented for packets in the range 1523-1536 bytes\n             inclusive, whereas both this counter and the RxExcessSizeDisc\n             counter will be incremented for packets of 1537 bytes and \n             higher.')
rxFragments = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxFragments.setStatus('current')
if mibBuilder.loadTexts: rxFragments.setDescription('The number of packets received by a port that are less than\n             64 bytes(excluding framing bits) and have either an FCS error\n             or an alignment error')
rxJabbers = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxJabbers.setStatus('current')
if mibBuilder.loadTexts: rxJabbers.setDescription('The number of packets received by a port that are longer \n             than 1522 bytes and have either an FCS error or an alignment\n             error.')
rxUnicastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxUnicastPkts.setStatus('current')
if mibBuilder.loadTexts: rxUnicastPkts.setDescription('The number of good packets received by a port that are\n             addressed to a unicast address.')
rxAlignmentErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxAlignmentErrors.setStatus('current')
if mibBuilder.loadTexts: rxAlignmentErrors.setDescription('The number of packets received by a port that have a \n             length (excluding framing bits but including FCS) \n             between 64 and 1522 bytes, inclusive, and have a bad\n             FCS with a non-integral number of bytes.')
rxFCSErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxFCSErrors.setStatus('current')
if mibBuilder.loadTexts: rxFCSErrors.setDescription('The number of packets received by a port that have a\n             length (excluding framing bits but including FCS) \n             between 64 and 152 bytes, and have a bad FCS with an\n             integral number of bytes.')
rxGoodOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 2, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxGoodOctets.setStatus('current')
if mibBuilder.loadTexts: rxGoodOctets.setDescription('The total number of bytes in all good packets received\n             by a port (excluding framing bits but including FCS).')
rxExcessSizeDisc = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 2, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxExcessSizeDisc.setStatus('current')
if mibBuilder.loadTexts: rxExcessSizeDisc.setDescription('The number of good packets received by a port that \n             are greater than 1536 bytes (excluding framing bits\n             but including FCS) and were discarded due to excessive\n             length. Note that the RxOversizePkts counter alone is\n             incremented for packets in the range of 1523-1536 bytes\n             inclusive, whereas both this counter and the RxOversizePkts\n             are incremented for packets of 1537 bytes and higher.')
rxPausePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 2, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxPausePkts.setStatus('current')
if mibBuilder.loadTexts: rxPausePkts.setDescription('The number of PAUSE frame received by a port. The PAUSE\n             frame must have a valid MAC Control Frame EtherType field\n             (88-08h), have a destination MAC address of either the MAC\n             Control frame reserved multicast address(01-80-c2-00-00-011)\n             or the unique MAC address associated with the specific port,\n             a valid PAUSE Opcode (00-01), be a minimum of 64 bytes in\n             length (excluding preamble but including FCS), and have a \n             valid CRC. Although an 802.3 compliant MAC is only permitted\n             to transmit PAUSE frames when in full duplex mode, with\n             flow control enabled, and with the transfer of PAUSE frames\n             determined by the result of auto-negotiation, an 802.3 MAC\n             receiver is required to count all received PAUSE frames,\n             regardless of its half/full-duplex status. An indication\n             that a MAC is in half-duplex with the RxPausePkts\n             incrementing indicates a non-compliant transmitting device\n             on the network.')
rxSymbolErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 2, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxSymbolErrors.setStatus('current')
if mibBuilder.loadTexts: rxSymbolErrors.setDescription('The total number of times a valid length packet was received\n             at a port and at least one invalid data symbol was detected.\n             Counter only increment once per carrier event and does not\n             increment on detection of collision during the carrier event.')
txDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 2, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txDropPkts.setStatus('current')
if mibBuilder.loadTexts: txDropPkts.setDescription('The total number of good bytes of data transmitted by a\n             port (excluding preamble but including FCS).')
txOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 2, 1, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txOctets.setStatus('current')
if mibBuilder.loadTexts: txOctets.setDescription('The number of good packets received by a port that\n             are directed to the multicast address. This counter\n             does not include error multicast packets or valid\n             broadcast packets.')
txBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 2, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txBroadcastPkts.setStatus('current')
if mibBuilder.loadTexts: txBroadcastPkts.setDescription('The number of good packets transmitted by a port that\n             are directed to a broadcast address. This counter\n             does not include errored broadcast packets or valid\n             multicast packets.')
txMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 2, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txMulticastPkts.setStatus('current')
if mibBuilder.loadTexts: txMulticastPkts.setDescription('The number of good packets transmitted by a port that\n             are directed to a multicast address. This counter\n             does not include errored multicast packets or valid\n             broadcast packets.')
txCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 2, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txCollisions.setStatus('current')
if mibBuilder.loadTexts: txCollisions.setDescription('The number of collision experienced by a port during\n             packet transmissions.')
txUnicastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 2, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txUnicastPkts.setStatus('current')
if mibBuilder.loadTexts: txUnicastPkts.setDescription('The number of good packets transmitted by a port \n             that are addressed to a unicast address.')
txSingleCollision = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 2, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txSingleCollision.setStatus('current')
if mibBuilder.loadTexts: txSingleCollision.setDescription('The number packets successfully transmitted by a port\n             that experienced exactly one collision.')
txMultipleCollision = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 2, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txMultipleCollision.setStatus('current')
if mibBuilder.loadTexts: txMultipleCollision.setDescription('The number packets successfully transmitted by a port\n             that experienced more than one collision')
txDeferredTransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 2, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txDeferredTransmit.setStatus('current')
if mibBuilder.loadTexts: txDeferredTransmit.setDescription('The number packets successfully transmitted by a port\n             for which the first transmission attempt is delayed\n             because medium is busy.')
txLateCollision = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 2, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txLateCollision.setStatus('current')
if mibBuilder.loadTexts: txLateCollision.setDescription('The number of times that a collision is detected\n             later than 512 bit-times into the transmission of\n             a packet.')
txExcessiveCollision = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 2, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txExcessiveCollision.setStatus('current')
if mibBuilder.loadTexts: txExcessiveCollision.setDescription('The number of packets that are not transmitted from\n             a port because the packet experienced 16 transmission\n             attempts.')
txPausePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 2, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txPausePkts.setStatus('current')
if mibBuilder.loadTexts: txPausePkts.setDescription('The number of PAUSE frame transmitted by a port.\n             The MAC resolve to full duplex mode, with 803.3x\n             flow control PAUSE frame exchange enabled at the\n             completion of auto-negotiation.')
txFrameInDisc = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 2, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txFrameInDisc.setStatus('current')
if mibBuilder.loadTexts: txFrameInDisc.setDescription('The number of valid packets  received which are\n             discarded by the forwarding process due to lack\n             of space on an output queue. Note: not maintained\n             or reported in the MIB counters. Located in\n             Congestion registers. This attribute only increments\n             if a network device is not acting in compliance with\n             a flow control request, or the BCM5327M internal\n             flow control/buffering scheme has been misconfigured.')
pkts64Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 2, 1, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pkts64Octets.setStatus('current')
if mibBuilder.loadTexts: pkts64Octets.setDescription('The number of packets (including error packets) \n             that are 64 bytes long.')
pkts65to127Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 2, 1, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pkts65to127Octets.setStatus('current')
if mibBuilder.loadTexts: pkts65to127Octets.setDescription('The number of packets (including error packets) \n             that are between 65 and 127 bytes long.')
pkts128to255Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 2, 1, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pkts128to255Octets.setStatus('current')
if mibBuilder.loadTexts: pkts128to255Octets.setDescription('The number of packets (including error packets) \n             that are between 128 and 255 bytes long.')
pkts256to511Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 2, 1, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pkts256to511Octets.setStatus('current')
if mibBuilder.loadTexts: pkts256to511Octets.setDescription('The number of packets (including error packets) \n             that are between 256 and 511 bytes long.')
pkts512to1023Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 2, 1, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pkts512to1023Octets.setStatus('current')
if mibBuilder.loadTexts: pkts512to1023Octets.setDescription('The number of packets (including error packets) \n             that are between 512 and 1023 bytes long.')
pkts1024to1522Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 2, 1, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pkts1024to1522Octets.setStatus('current')
if mibBuilder.loadTexts: pkts1024to1522Octets.setDescription('The number of packets (including error packets) \n             that are between 1024 and 1522 bytes long.')
cmmSwitchMirrorSrcPortsTable = MibTable((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 2, 4), )
if mibBuilder.loadTexts: cmmSwitchMirrorSrcPortsTable.setStatus('current')
if mibBuilder.loadTexts: cmmSwitchMirrorSrcPortsTable.setDescription('Table of CMM Switch Mirror Source Ports.')
cmmSwitchMirrorSrcPortsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 2, 4, 1), ).setIndexNames((0, "CMM3-MIB", "mirSrcPortNumber"))
if mibBuilder.loadTexts: cmmSwitchMirrorSrcPortsEntry.setStatus('current')
if mibBuilder.loadTexts: cmmSwitchMirrorSrcPortsEntry.setDescription('CMM Switch Mirror Source Ports')
mirSrcPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mirSrcPortNumber.setStatus('current')
if mibBuilder.loadTexts: mirSrcPortNumber.setDescription('A unique value for each CMM port.  Its value starts from 1')
mirSrcRxEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mirSrcRxEnable.setStatus('current')
if mibBuilder.loadTexts: mirSrcRxEnable.setDescription('A unique value for each CMM port.  Its value starts from 1')
mirSrcTxEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mirSrcTxEnable.setStatus('current')
if mibBuilder.loadTexts: mirSrcTxEnable.setDescription('A unique value for each CMM port.  Its value starts from 1')
gpsTimingPulse = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("master", 1), ("slave", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gpsTimingPulse.setStatus('current')
if mibBuilder.loadTexts: gpsTimingPulse.setDescription('(1) -- Master.\n             (0) -- Slave.')
lan1Ip = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 3, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lan1Ip.setStatus('current')
if mibBuilder.loadTexts: lan1Ip.setDescription('LAN 1 IP.')
lan1SubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 3, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lan1SubnetMask.setStatus('current')
if mibBuilder.loadTexts: lan1SubnetMask.setDescription('LAN 1 subnet mask.')
defaultGateway = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 3, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: defaultGateway.setStatus('current')
if mibBuilder.loadTexts: defaultGateway.setDescription('Default gateway')
port1PowerCtr = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("on", 1), ("off", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: port1PowerCtr.setStatus('current')
if mibBuilder.loadTexts: port1PowerCtr.setDescription('Power control for port 1.\n             (1) -- Power on.\n             (0) -- Power off')
port2PowerCtr = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("on", 1), ("off", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: port2PowerCtr.setStatus('current')
if mibBuilder.loadTexts: port2PowerCtr.setDescription('Power control for port 2.\n             (1) -- Power on.\n             (0) -- Power off.')
port3PowerCtr = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("on", 1), ("off", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: port3PowerCtr.setStatus('current')
if mibBuilder.loadTexts: port3PowerCtr.setDescription('Power control for port 3.\n             (1) -- Power on.\n             (0) -- Power off')
port4PowerCtr = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("on", 1), ("off", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: port4PowerCtr.setStatus('current')
if mibBuilder.loadTexts: port4PowerCtr.setDescription('Power control for port 4.\n             (1) -- Power on.\n             (0) -- Power off')
port5PowerCtr = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("on", 1), ("off", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: port5PowerCtr.setStatus('current')
if mibBuilder.loadTexts: port5PowerCtr.setDescription('Power control for port 5.\n             (1) -- Power on.\n             (0) -- Power off')
port6PowerCtr = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 3, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("on", 1), ("off", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: port6PowerCtr.setStatus('current')
if mibBuilder.loadTexts: port6PowerCtr.setDescription('Power control for port 6.\n             (1) -- Power on.\n             (0) -- Power off')
port7PowerCtr = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 3, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("on", 1), ("off", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: port7PowerCtr.setStatus('current')
if mibBuilder.loadTexts: port7PowerCtr.setDescription('Power control for port 7.\n             (1) -- Power on.\n             (0) -- Power off')
port8PowerCtr = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 3, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("on", 1), ("off", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: port8PowerCtr.setStatus('current')
if mibBuilder.loadTexts: port8PowerCtr.setDescription('Power control for port 8.\n             (1) -- Power on.\n             (0) -- Power off')
displayOnlyAccess = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 3, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: displayOnlyAccess.setStatus('obsolete')
if mibBuilder.loadTexts: displayOnlyAccess.setDescription('Display only access to web interface and telnet.')
fullAccess = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 3, 14), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fullAccess.setStatus('obsolete')
if mibBuilder.loadTexts: fullAccess.setDescription('Full access password to web interface and telnet.')
displayOnlyStatus = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 3, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: displayOnlyStatus.setStatus('obsolete')
if mibBuilder.loadTexts: displayOnlyStatus.setDescription('Display only password status.')
fullAccessStatus = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 3, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fullAccessStatus.setStatus('obsolete')
if mibBuilder.loadTexts: fullAccessStatus.setDescription('Full access password status.')
webAutoUpdate = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 3, 17), Integer32()).setUnits('Seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: webAutoUpdate.setStatus('current')
if mibBuilder.loadTexts: webAutoUpdate.setDescription('Web page auto update in seconds. 0 means disabled.')
port1Config = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 3, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("auto", 1), ("hundredFDX", 2), ("hundredHDX", 3), ("tenFDX", 4), ("tenHDX", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: port1Config.setStatus('current')
if mibBuilder.loadTexts: port1Config.setDescription('Link speed configuration on port 1.')
port2Config = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 3, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("auto", 1), ("hundredFDX", 2), ("hundredHDX", 3), ("tenFDX", 4), ("tenHDX", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: port2Config.setStatus('current')
if mibBuilder.loadTexts: port2Config.setDescription('Link speed configuration on port 2.')
port3Config = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 3, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("auto", 1), ("hundredFDX", 2), ("hundredHDX", 3), ("tenFDX", 4), ("tenHDX", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: port3Config.setStatus('current')
if mibBuilder.loadTexts: port3Config.setDescription('Link speed configuration on port 3.')
port4Config = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 3, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("auto", 1), ("hundredFDX", 2), ("hundredHDX", 3), ("tenFDX", 4), ("tenHDX", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: port4Config.setStatus('current')
if mibBuilder.loadTexts: port4Config.setDescription('Link speed configuration on port 4.')
port5Config = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 3, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("auto", 1), ("hundredFDX", 2), ("hundredHDX", 3), ("tenFDX", 4), ("tenHDX", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: port5Config.setStatus('current')
if mibBuilder.loadTexts: port5Config.setDescription('Link speed configuration on port 5.')
port6Config = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 3, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("auto", 1), ("hundredFDX", 2), ("hundredHDX", 3), ("tenFDX", 4), ("tenHDX", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: port6Config.setStatus('current')
if mibBuilder.loadTexts: port6Config.setDescription('Link speed configuration on port 6.')
port7Config = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 3, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("auto", 1), ("hundredFDX", 2), ("hundredHDX", 3), ("tenFDX", 4), ("tenHDX", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: port7Config.setStatus('current')
if mibBuilder.loadTexts: port7Config.setDescription('Link speed configuration on port 7.')
port8Config = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 3, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("auto", 1), ("hundredFDX", 2), ("hundredHDX", 3), ("tenFDX", 4), ("tenHDX", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: port8Config.setStatus('current')
if mibBuilder.loadTexts: port8Config.setDescription('Link speed configuration on port 8.')
port1Description = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 3, 26), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: port1Description.setStatus('current')
if mibBuilder.loadTexts: port1Description.setDescription('Port 1 text description.')
port2Description = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 3, 27), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: port2Description.setStatus('current')
if mibBuilder.loadTexts: port2Description.setDescription('Port 2 text description.')
port3Description = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 3, 28), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: port3Description.setStatus('current')
if mibBuilder.loadTexts: port3Description.setDescription('Port 3 text description.')
port4Description = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 3, 29), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: port4Description.setStatus('current')
if mibBuilder.loadTexts: port4Description.setDescription('Port 4 text description.')
port5Description = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 3, 30), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: port5Description.setStatus('current')
if mibBuilder.loadTexts: port5Description.setDescription('Port 5 text description.')
port6Description = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 3, 31), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: port6Description.setStatus('current')
if mibBuilder.loadTexts: port6Description.setDescription('Port 6 text description.')
port7Description = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 3, 32), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: port7Description.setStatus('current')
if mibBuilder.loadTexts: port7Description.setDescription('Port 7 text description.')
port8Description = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 3, 33), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: port8Description.setStatus('current')
if mibBuilder.loadTexts: port8Description.setDescription('Port 8 text description.')
snmpTrap1 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 3, 34), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrap1.setStatus('current')
if mibBuilder.loadTexts: snmpTrap1.setDescription('SNMP Trap Address 1.')
snmpTrap2 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 3, 35), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrap2.setStatus('current')
if mibBuilder.loadTexts: snmpTrap2.setDescription('SNMP Trap Address 2.')
snmpTrap3 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 3, 36), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrap3.setStatus('current')
if mibBuilder.loadTexts: snmpTrap3.setDescription('SNMP Trap Address 3.')
snmpTrap4 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 3, 37), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrap4.setStatus('current')
if mibBuilder.loadTexts: snmpTrap4.setDescription('SNMP Trap Address 4.')
snmpTrap5 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 3, 38), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrap5.setStatus('current')
if mibBuilder.loadTexts: snmpTrap5.setDescription('SNMP Trap Address 5.')
snmpTrap6 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 3, 39), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrap6.setStatus('current')
if mibBuilder.loadTexts: snmpTrap6.setDescription('SNMP Trap Address 6.')
snmpTrap7 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 3, 40), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrap7.setStatus('current')
if mibBuilder.loadTexts: snmpTrap7.setDescription('SNMP Trap Address 7.')
snmpTrap8 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 3, 41), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrap8.setStatus('current')
if mibBuilder.loadTexts: snmpTrap8.setDescription('SNMP Trap Address 8.')
snmpTrap9 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 3, 42), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrap9.setStatus('current')
if mibBuilder.loadTexts: snmpTrap9.setDescription('SNMP Trap Address 9.')
snmpTrap10 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 3, 43), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrap10.setStatus('current')
if mibBuilder.loadTexts: snmpTrap10.setDescription('SNMP Trap Address 10.')
vlanTagEnable = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 3, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("on", 1), ("off", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanTagEnable.setStatus('current')
if mibBuilder.loadTexts: vlanTagEnable.setDescription('Enable/Disable 802.1Q VLAN tagging.P\n             (1) -- Enable Tagging.\n             (0) -- Disable Tagging.')
vlanTagId = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 3, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanTagId.setStatus('current')
if mibBuilder.loadTexts: vlanTagId.setDescription('802.1q VLAN Tag ID, 1-4094.')
port1Uplink = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 3, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("on", 1), ("off", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: port1Uplink.setStatus('current')
if mibBuilder.loadTexts: port1Uplink.setDescription('Configure Port 1 as Uplink Port.\n             (1) -- Port 1 is an uplink port.\n             (0) -- Port 1 is not an uplink port.')
port2Uplink = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 3, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("on", 1), ("off", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: port2Uplink.setStatus('current')
if mibBuilder.loadTexts: port2Uplink.setDescription('Configure Port 2 as Uplink Port.\n             (1) -- Port 2 is an uplink port.\n             (0) -- Port 2 is not an uplink port.')
port3Uplink = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 3, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("on", 1), ("off", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: port3Uplink.setStatus('current')
if mibBuilder.loadTexts: port3Uplink.setDescription('Configure Port 3 as Uplink Port.\n             (1) -- Port 3 is an uplink port.\n             (0) -- Port 3 is not an uplink port.')
port4Uplink = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 3, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("on", 1), ("off", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: port4Uplink.setStatus('current')
if mibBuilder.loadTexts: port4Uplink.setDescription('Configure Port 4 as Uplink Port.\n             (1) -- Port 4 is an uplink port.\n             (0) -- Port 4 is not an uplink port.')
port5Uplink = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 3, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("on", 1), ("off", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: port5Uplink.setStatus('current')
if mibBuilder.loadTexts: port5Uplink.setDescription('Configure Port 5 as Uplink Port.\n             (1) -- Port 5 is an uplink port.\n             (0) -- Port 5 is not an uplink port.')
port6Uplink = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 3, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("on", 1), ("off", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: port6Uplink.setStatus('current')
if mibBuilder.loadTexts: port6Uplink.setDescription('Configure Port 6 as Uplink Port.\n             (1) -- Port 6 is an uplink port.\n             (0) -- Port 6 is not an uplink port.')
port7Uplink = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 3, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("on", 1), ("off", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: port7Uplink.setStatus('current')
if mibBuilder.loadTexts: port7Uplink.setDescription('Configure Port 7 as Uplink Port.\n             (1) -- Port 7 is an uplink port.\n             (0) -- Port 7 is not an uplink port.')
port8Uplink = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 3, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("on", 1), ("off", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: port8Uplink.setStatus('current')
if mibBuilder.loadTexts: port8Uplink.setDescription('Configure Port 8 as Uplink Port.\n             (1) -- Port 8 is an uplink port.\n             (0) -- Port 8 is not an uplink port.')
rebootIfRequired = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 3, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("on", 1), ("off", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rebootIfRequired.setStatus('current')
if mibBuilder.loadTexts: rebootIfRequired.setDescription('Reboot CMM if required.\n             (1) -- Check if CMM reboot is required and do so.\n             (0) -- Do not check for reboot.')
port1VlanConf = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 3, 55), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: port1VlanConf.setStatus('current')
if mibBuilder.loadTexts: port1VlanConf.setDescription('Port 1 VLAN Port Configuration.\n             Bitmap determines which Port(s) Port 1 will egress data.\n             0 means no ports, 2 means port 2, 6 means ports 2 and 3, etc.')
port2VlanConf = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 3, 56), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: port2VlanConf.setStatus('current')
if mibBuilder.loadTexts: port2VlanConf.setDescription('Port 2 VLAN Port Configuration.\n             Bitmap determines which Port(s) Port 2 will egress data.\n             0 means no ports, 1 means port 1, 3 means ports 1 and 2, etc.')
port3VlanConf = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 3, 57), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: port3VlanConf.setStatus('current')
if mibBuilder.loadTexts: port3VlanConf.setDescription('Port 3 VLAN Port Configuration.\n             Bitmap determines which Port(s) Port 3 will egress data.\n             0 means no ports, 1 means port 1, 3 means ports 1 and 2, etc.')
port4VlanConf = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 3, 58), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: port4VlanConf.setStatus('current')
if mibBuilder.loadTexts: port4VlanConf.setDescription('Port 4 VLAN Port Configuration.\n             Bitmap determines which Port(s) Port 4 will egress data.\n             0 means no ports, 1 means port 1, 3 means ports 1 and 2, etc.')
port5VlanConf = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 3, 59), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: port5VlanConf.setStatus('current')
if mibBuilder.loadTexts: port5VlanConf.setDescription('Port 5 VLAN Port Configuration.\n             Bitmap determines which Port(s) Port 5 will egress data.\n             0 means no ports, 1 means port 1, 3 means ports 1 and 2, etc.')
port6VlanConf = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 3, 60), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: port6VlanConf.setStatus('current')
if mibBuilder.loadTexts: port6VlanConf.setDescription('Port 6 VLAN Port Configuration.\n             Bitmap determines which Port(s) Port 6 will egress data.\n             0 means no ports, 1 means port 1, 3 means ports 1 and 2, etc.')
port7VlanConf = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 3, 61), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: port7VlanConf.setStatus('current')
if mibBuilder.loadTexts: port7VlanConf.setDescription('Port 7 VLAN Port Configuration.\n             Bitmap determines which Port(s) Port 7 will egress data.\n             0 means no ports, 1 means port 1, 3 means ports 1 and 2, etc.')
port8VlanConf = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 3, 62), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: port8VlanConf.setStatus('current')
if mibBuilder.loadTexts: port8VlanConf.setDescription('Port 8 VLAN Port Configuration.\n             Bitmap determines which Port(s) Port 8 will egress data.\n             0 means no ports, 1 means port 1, 3 means ports 1 and 2, etc.')
port1PwrReset = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 3, 63), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: port1PwrReset.setStatus('current')
if mibBuilder.loadTexts: port1PwrReset.setDescription('If Port 1 is Powered, attched device will be reset when set to 1.\n             If Port 1 is Not Powered, nothing will happen.')
port2PwrReset = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 3, 64), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: port2PwrReset.setStatus('current')
if mibBuilder.loadTexts: port2PwrReset.setDescription('If Port 2 is Powered, attched device will be reset when set to 1.\n             If Port 2 is Not Powered, nothing will happen.')
port3PwrReset = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 3, 65), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: port3PwrReset.setStatus('current')
if mibBuilder.loadTexts: port3PwrReset.setDescription('If Port 3 is Powered, attched device will be reset when set to 1.\n             If Port 3 is Not Powered, nothing will happen.')
port4PwrReset = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 3, 66), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: port4PwrReset.setStatus('current')
if mibBuilder.loadTexts: port4PwrReset.setDescription('If Port 4 is Powered, attched device will be reset when set to 1.\n             If Port 4 is Not Powered, nothing will happen.')
port5PwrReset = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 3, 67), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: port5PwrReset.setStatus('current')
if mibBuilder.loadTexts: port5PwrReset.setDescription('If Port 5 is Powered, attched device will be reset when set to 1.\n             If Port 5 is Not Powered, nothing will happen.')
port6PwrReset = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 3, 68), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: port6PwrReset.setStatus('current')
if mibBuilder.loadTexts: port6PwrReset.setDescription('If Port 6 is Powered, attched device will be reset when set to 1.\n             If Port 6 is Not Powered, nothing will happen.')
port7PwrReset = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 3, 69), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: port7PwrReset.setStatus('current')
if mibBuilder.loadTexts: port7PwrReset.setDescription('If Port 7 is Powered, attched device will be reset when set to 1.\n             If Port 7 is Not Powered, nothing will happen.')
port8PwrReset = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 3, 70), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: port8PwrReset.setStatus('current')
if mibBuilder.loadTexts: port8PwrReset.setDescription('If Port 8 is Powered, attched device will be reset when set to 1.\n             If Port 8 is Not Powered, nothing will happen.')
snmpReadOnly = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 3, 71), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("readOnlyPermissions", 1), ("readWritePermissions", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpReadOnly.setStatus('current')
if mibBuilder.loadTexts: snmpReadOnly.setDescription('SNMP Permissions\n             1 - Read Only\n             0 - Read/Write.')
snmpCommunityString = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 3, 72), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpCommunityString.setStatus('current')
if mibBuilder.loadTexts: snmpCommunityString.setDescription('SNMP Community String')
snmpAccessSubnet = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 3, 73), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpAccessSubnet.setStatus('current')
if mibBuilder.loadTexts: snmpAccessSubnet.setDescription('SNMP Accessing Subnet 1.  In x.x.x.x/y form where x.x.x.x is network and y is mask length.')
snmpAccessSubnet2 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 3, 74), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpAccessSubnet2.setStatus('current')
if mibBuilder.loadTexts: snmpAccessSubnet2.setDescription('SNMP Accessing Subnet 2.  In x.x.x.x/y form where x.x.x.x is network and y is mask length.')
snmpAccessSubnet3 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 3, 75), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpAccessSubnet3.setStatus('current')
if mibBuilder.loadTexts: snmpAccessSubnet3.setDescription('SNMP Accessing Subnet 3.  In x.x.x.x/y form where x.x.x.x is network and y is mask length.')
snmpAccessSubnet4 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 3, 76), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpAccessSubnet4.setStatus('current')
if mibBuilder.loadTexts: snmpAccessSubnet4.setDescription('SNMP Accessing Subnet 4.  In x.x.x.x/y form where x.x.x.x is network and y is mask length.')
snmpAccessSubnet5 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 3, 77), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpAccessSubnet5.setStatus('current')
if mibBuilder.loadTexts: snmpAccessSubnet5.setDescription('SNMP Accessing Subnet 5.  In x.x.x.x/y form where x.x.x.x is network and y is mask length.')
snmpAccessSubnet6 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 3, 78), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpAccessSubnet6.setStatus('current')
if mibBuilder.loadTexts: snmpAccessSubnet6.setDescription('SNMP Accessing Subnet 6.  In x.x.x.x/y form where x.x.x.x is network and y is mask length.')
snmpAccessSubnet7 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 3, 79), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpAccessSubnet7.setStatus('current')
if mibBuilder.loadTexts: snmpAccessSubnet7.setDescription('SNMP Accessing Subnet 7.  In x.x.x.x/y form where x.x.x.x is network and y is mask length.')
snmpAccessSubnet8 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 3, 80), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpAccessSubnet8.setStatus('current')
if mibBuilder.loadTexts: snmpAccessSubnet8.setDescription('SNMP Accessing Subnet 8.  In x.x.x.x/y form where x.x.x.x is network and y is mask length.')
snmpAccessSubnet9 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 3, 81), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpAccessSubnet9.setStatus('current')
if mibBuilder.loadTexts: snmpAccessSubnet9.setDescription('SNMP Accessing Subnet 9.  In x.x.x.x/y form where x.x.x.x is network and y is mask length.')
snmpAccessSubnet10 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 3, 82), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpAccessSubnet10.setStatus('current')
if mibBuilder.loadTexts: snmpAccessSubnet10.setDescription('SNMP Accessing Subnet 10.  In x.x.x.x/y form where x.x.x.x is network and y is mask length.')
port1Management = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 3, 83), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("on", 1), ("off", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: port1Management.setStatus('current')
if mibBuilder.loadTexts: port1Management.setDescription('Configure Port 1 as a Management Port.\n             (1) -- Port 1 is a Management port.\n             (0) -- Port 1 is not a Management port.')
port2Management = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 3, 84), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("on", 1), ("off", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: port2Management.setStatus('current')
if mibBuilder.loadTexts: port2Management.setDescription('Configure Port 2 as a Management Port.\n             (1) -- Port 2 is a Managementport.\n             (0) -- Port 2 is not a Management port.')
port3Management = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 3, 85), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("on", 1), ("off", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: port3Management.setStatus('current')
if mibBuilder.loadTexts: port3Management.setDescription('Configure Port 3 as a Management Port.\n             (1) -- Port 3 is a Management port.\n             (0) -- Port 3 is not a Management port.')
port4Management = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 3, 86), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("on", 1), ("off", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: port4Management.setStatus('current')
if mibBuilder.loadTexts: port4Management.setDescription('Configure Port 4 as a Management Port.\n             (1) -- Port 4 is a Management port.\n             (0) -- Port 4 is not a Management port.')
port5Management = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 3, 87), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("on", 1), ("off", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: port5Management.setStatus('current')
if mibBuilder.loadTexts: port5Management.setDescription('Configure Port 5 as a Management Port.\n             (1) -- Port 5 is a Management port.\n             (0) -- Port 5 is not a Management port.')
port6Management = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 3, 88), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("on", 1), ("off", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: port6Management.setStatus('current')
if mibBuilder.loadTexts: port6Management.setDescription('Configure Port 6 as a Management Port.\n             (1) -- Port 6 is a Management port.\n             (0) -- Port 6 is not a Management port.')
port7Management = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 3, 89), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("on", 1), ("off", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: port7Management.setStatus('current')
if mibBuilder.loadTexts: port7Management.setDescription('Configure Port 7 as a Management Port.\n             (1) -- Port 7 is a Management port.\n             (0) -- Port 7 is not a Management port.')
port8Management = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 3, 90), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("on", 1), ("off", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: port8Management.setStatus('current')
if mibBuilder.loadTexts: port8Management.setDescription('Configure Port 8 as a Management Port.\n             (1) -- Port 8 is a Management port.\n             (0) -- Port 8 is not a Management port.')
sessionTimeout = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 3, 91), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sessionTimeout.setStatus('current')
if mibBuilder.loadTexts: sessionTimeout.setDescription('Timer for Telnet, Web and FTP sessions.')
siteInfoViewable = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 3, 92), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteInfoViewable.setStatus('current')
if mibBuilder.loadTexts: siteInfoViewable.setDescription('Enable non login users the ability to view Site Information')
ipAccessFilterEnable = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 3, 93), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipAccessFilterEnable.setStatus('current')
if mibBuilder.loadTexts: ipAccessFilterEnable.setDescription('To enable or disable IP access filtering to Management functions.\n            (0) - IP access will be allowed from all addresses.\n            (1) - IP access will be controlled using allowedIPAccess1-3 entries.')
allowedIPAccess1 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 3, 94), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: allowedIPAccess1.setStatus('current')
if mibBuilder.loadTexts: allowedIPAccess1.setDescription('Allow access to CMM Management from this IP.\n            0 is default setting to allow from all IPs.')
allowedIPAccess2 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 3, 95), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: allowedIPAccess2.setStatus('current')
if mibBuilder.loadTexts: allowedIPAccess2.setDescription('Allow access to CMM Management from this IP.\n            0 is default setting to allow from all IPs.')
allowedIPAccess3 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 3, 96), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: allowedIPAccess3.setStatus('current')
if mibBuilder.loadTexts: allowedIPAccess3.setDescription('Allow access to CMM Management from this IP.\n            0 is default setting to allow from all IPs.')
verifyGPSChecksum = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 3, 97), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("doNotVerifyGPSMessageChecksum", 0), ("verifyGPSMessageChecksum", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: verifyGPSChecksum.setStatus('current')
if mibBuilder.loadTexts: verifyGPSChecksum.setDescription('Enable/Disable verification of GPS message checksums.')
cmm3SnmpGPSSyncTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 3, 98), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmm3SnmpGPSSyncTrapEnable.setStatus('current')
if mibBuilder.loadTexts: cmm3SnmpGPSSyncTrapEnable.setDescription('Variable to enable/disable GPS sync/out-sync traps.')
deviceType = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 4, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceType.setStatus('current')
if mibBuilder.loadTexts: deviceType.setDescription('A textual string containing information about device type.')
pldVersion = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 4, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pldVersion.setStatus('current')
if mibBuilder.loadTexts: pldVersion.setDescription('Version of PLD code.')
softwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 4, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: softwareVersion.setStatus('current')
if mibBuilder.loadTexts: softwareVersion.setDescription('CMM-III software version. It includes the operation system\n             and software build time.')
systemTime = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 4, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemTime.setStatus('current')
if mibBuilder.loadTexts: systemTime.setDescription('The current time.')
upTime = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 4, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upTime.setStatus('current')
if mibBuilder.loadTexts: upTime.setDescription('Time since last system reboot.')
satellitesVisible = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 4, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: satellitesVisible.setStatus('current')
if mibBuilder.loadTexts: satellitesVisible.setDescription('Number of satellites the GPS should see.')
satellitesTracked = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 4, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: satellitesTracked.setStatus('current')
if mibBuilder.loadTexts: satellitesTracked.setDescription('Current number of satellites that GPS actually tracks.')
latitude = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 4, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: latitude.setStatus('current')
if mibBuilder.loadTexts: latitude.setDescription('CMM-III latitude.')
longitude = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 4, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: longitude.setStatus('current')
if mibBuilder.loadTexts: longitude.setDescription('CMM-III longitude.')
height = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 4, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: height.setStatus('current')
if mibBuilder.loadTexts: height.setDescription('The height of CMM-III unit.')
trackingMode = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 4, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trackingMode.setStatus('current')
if mibBuilder.loadTexts: trackingMode.setDescription('CMM-III GPS tracking mode.')
syncStatus = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 4, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: syncStatus.setStatus('current')
if mibBuilder.loadTexts: syncStatus.setDescription('CMM-III GPS sync pulse status.')
macAddress = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 4, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macAddress.setStatus('current')
if mibBuilder.loadTexts: macAddress.setDescription('MAC address of the unit.')
cmmPortTable = MibTable((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 4, 1), )
if mibBuilder.loadTexts: cmmPortTable.setStatus('current')
if mibBuilder.loadTexts: cmmPortTable.setDescription('A list of CMM III port entries.')
cmmPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 4, 1, 1), ).setIndexNames((0, "CMM3-MIB", "portIndex"))
if mibBuilder.loadTexts: cmmPortEntry.setStatus('current')
if mibBuilder.loadTexts: cmmPortEntry.setDescription('A CMM port entry containing objects with port status.')
portIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portIndex.setStatus('current')
if mibBuilder.loadTexts: portIndex.setDescription('A unique value for each CMM port.')
linkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("on", 1), ("off", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkStatus.setStatus('current')
if mibBuilder.loadTexts: linkStatus.setDescription('The current operational state of the port.')
linkSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("hundredBaseT", 1), ("tenBaseT", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkSpeed.setStatus('current')
if mibBuilder.loadTexts: linkSpeed.setDescription('Network connectivity, 100BaseT or 10BaseT.')
duplexStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("fullDuplex", 1), ("halfDuplex", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: duplexStatus.setStatus('current')
if mibBuilder.loadTexts: duplexStatus.setDescription('Half-duplex data transmission or Full-duplex data transmission.')
powerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("on", 1), ("off", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerStatus.setStatus('current')
if mibBuilder.loadTexts: powerStatus.setDescription('Port power status indicates power on or power off.')
uplinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("on", 1), ("off", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplinkStatus.setStatus('current')
if mibBuilder.loadTexts: uplinkStatus.setDescription('Port Uplink status indicates whether port is configred as an Uplink Port.')
managementStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("on", 1), ("off", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: managementStatus.setStatus('current')
if mibBuilder.loadTexts: managementStatus.setDescription('Management Port status indicates whether port is configred as a CMM3 Management Port.')
gpsTrackingMode = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 5, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gpsTrackingMode.setStatus('current')
if mibBuilder.loadTexts: gpsTrackingMode.setDescription('CMM-III GPS tracking mode.')
gpsTime = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 5, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gpsTime.setStatus('current')
if mibBuilder.loadTexts: gpsTime.setDescription('CMM-III GPS time.')
gpsDate = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 5, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gpsDate.setStatus('current')
if mibBuilder.loadTexts: gpsDate.setDescription('CMM-III GPS date.')
gpsSatellitesVisible = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 5, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gpsSatellitesVisible.setStatus('current')
if mibBuilder.loadTexts: gpsSatellitesVisible.setDescription('Number of satellites the GPS is supposed to see.')
gpsSatellitesTracked = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 5, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gpsSatellitesTracked.setStatus('current')
if mibBuilder.loadTexts: gpsSatellitesTracked.setDescription('Current number of satellites GPS tracked.')
gpsHeight = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 5, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gpsHeight.setStatus('current')
if mibBuilder.loadTexts: gpsHeight.setDescription('CMM height.')
gpsAntennaConnection = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 5, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gpsAntennaConnection.setStatus('current')
if mibBuilder.loadTexts: gpsAntennaConnection.setDescription('Antenna Connection status.')
gpsLatitude = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 5, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gpsLatitude.setStatus('current')
if mibBuilder.loadTexts: gpsLatitude.setDescription('CMM Latitude.')
gpsLongitude = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 5, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gpsLongitude.setStatus('current')
if mibBuilder.loadTexts: gpsLongitude.setDescription('CMM longitude.')
gpsInvalidMsg = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 5, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gpsInvalidMsg.setStatus('current')
if mibBuilder.loadTexts: gpsInvalidMsg.setDescription('Number of invalid messages.')
gpsRestartCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 5, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gpsRestartCount.setStatus('current')
if mibBuilder.loadTexts: gpsRestartCount.setDescription('Number of unit restart.')
gpsReceiverInfo = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 5, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gpsReceiverInfo.setStatus('current')
if mibBuilder.loadTexts: gpsReceiverInfo.setDescription('A textual string contains information on GPS receiver.')
gpsReInitCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 5, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gpsReInitCount.setStatus('current')
if mibBuilder.loadTexts: gpsReInitCount.setDescription('Number of times the GPS device has been completely re-initialized.')
eventLog = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 6, 1), EventString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventLog.setStatus('current')
if mibBuilder.loadTexts: eventLog.setDescription('CMM Event log.')
ntpLog = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 6, 2), EventString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpLog.setStatus('current')
if mibBuilder.loadTexts: ntpLog.setDescription('CMM3 NTP Log')
reboot = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("reboot", 1), ("finishedReboot", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reboot.setStatus('current')
if mibBuilder.loadTexts: reboot.setDescription('Setting the variable to 1 will reboot the unit. When the\n             unit finishs rebooting, it will be in finishedReboot state.')
clearEventLog = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("clear", 1), ("notClear", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clearEventLog.setStatus('current')
if mibBuilder.loadTexts: clearEventLog.setDescription('Setting the variable to 1 will clear the event log.')
cmmUserTable = MibTable((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 8), )
if mibBuilder.loadTexts: cmmUserTable.setStatus('current')
if mibBuilder.loadTexts: cmmUserTable.setDescription('User information table.')
cmmUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 8, 1), ).setIndexNames((0, "CMM3-MIB", "entryIndex"))
if mibBuilder.loadTexts: cmmUserEntry.setStatus('current')
if mibBuilder.loadTexts: cmmUserEntry.setDescription('User entry.')
entryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: entryIndex.setStatus('current')
if mibBuilder.loadTexts: entryIndex.setDescription('User information table index.')
userLoginName = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 8, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userLoginName.setStatus('current')
if mibBuilder.loadTexts: userLoginName.setDescription('User name.')
userPswd = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 8, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userPswd.setStatus('current')
if mibBuilder.loadTexts: userPswd.setDescription('User password.')
accessLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 4, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("noAdmin", 0), ("guest", 1), ("installer", 2), ("administrator", 3), ("technician", 4), ("engineering", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: accessLevel.setStatus('current')
if mibBuilder.loadTexts: accessLevel.setDescription('User access level.')
mibBuilder.exportSymbols("CMM3-MIB", satellitesTracked=satellitesTracked, lan1Ip=lan1Ip, rxSAChanges=rxSAChanges, port7Description=port7Description, cmmConfigGroup=cmmConfigGroup, port4PwrReset=port4PwrReset, port3Uplink=port3Uplink, gpsLatitude=gpsLatitude, cmmConfig=cmmConfig, rxFCSErrors=rxFCSErrors, port3Config=port3Config, port4PowerCtr=port4PowerCtr, fullAccess=fullAccess, softwareVersion=softwareVersion, port4Uplink=port4Uplink, snmpTrap6=snmpTrap6, cmmPortEntry=cmmPortEntry, port7VlanConf=port7VlanConf, snmpAccessSubnet10=snmpAccessSubnet10, linkSpeed=linkSpeed, port5PowerCtr=port5PowerCtr, gpsTrackingMode=gpsTrackingMode, entryIndex=entryIndex, txOctets=txOctets, sessionTimeout=sessionTimeout, port8Config=port8Config, rxUnicastPkts=rxUnicastPkts, displayOnlyAccess=displayOnlyAccess, port6Config=port6Config, port6Description=port6Description, gpsReceiverInfo=gpsReceiverInfo, snmpAccessSubnet3=snmpAccessSubnet3, allowedIPAccess2=allowedIPAccess2, longitude=longitude, port2PwrReset=port2PwrReset, snmpAccessSubnet7=snmpAccessSubnet7, syncStatus=syncStatus, port1Description=port1Description, cmm3SnmpGPSSyncTrapEnable=cmm3SnmpGPSSyncTrapEnable, pkts512to1023Octets=pkts512to1023Octets, port2Config=port2Config, port8PwrReset=port8PwrReset, cmmSwitchEntry=cmmSwitchEntry, port7PwrReset=port7PwrReset, cmmSwitchMirrorSrcPortsEntry=cmmSwitchMirrorSrcPortsEntry, cmmControls=cmmControls, fullAccessStatus=fullAccessStatus, port3Management=port3Management, rxFragments=rxFragments, txUnicastPkts=txUnicastPkts, rebootIfRequired=rebootIfRequired, siteInfoViewable=siteInfoViewable, port1Uplink=port1Uplink, gpsSatellitesTracked=gpsSatellitesTracked, mirSrcRxEnable=mirSrcRxEnable, port5PwrReset=port5PwrReset, port2VlanConf=port2VlanConf, port6Management=port6Management, allowedIPAccess3=allowedIPAccess3, cmmPortTable=cmmPortTable, cmmSwitchMirrorSrcPortsTable=cmmSwitchMirrorSrcPortsTable, accessLevel=accessLevel, deviceType=deviceType, port2PowerCtr=port2PowerCtr, gpsLongitude=gpsLongitude, port3VlanConf=port3VlanConf, userLoginName=userLoginName, reboot=reboot, systemTime=systemTime, port3PowerCtr=port3PowerCtr, snmpAccessSubnet8=snmpAccessSubnet8, vlanTagEnable=vlanTagEnable, port5Config=port5Config, snmpReadOnly=snmpReadOnly, txFrameInDisc=txFrameInDisc, gpsAntennaConnection=gpsAntennaConnection, port4Management=port4Management, linkStatus=linkStatus, snmpAccessSubnet=snmpAccessSubnet, port1Management=port1Management, cmmUserEntry=cmmUserEntry, port7Uplink=port7Uplink, rxMulticastPkts=rxMulticastPkts, cmmStatusGroup=cmmStatusGroup, cmmSwitchTable=cmmSwitchTable, port8Uplink=port8Uplink, snmpTrap2=snmpTrap2, cmmStatus=cmmStatus, snmpTrap10=snmpTrap10, duplexStatus=duplexStatus, gpsRestartCount=gpsRestartCount, gpsDate=gpsDate, port1Config=port1Config, cmmSwitch=cmmSwitch, snmpTrap7=snmpTrap7, port3Description=port3Description, managementStatus=managementStatus, displayOnlyStatus=displayOnlyStatus, txBroadcastPkts=txBroadcastPkts, port2Management=port2Management, port4Description=port4Description, ipAccessFilterEnable=ipAccessFilterEnable, defaultGateway=defaultGateway, lan1SubnetMask=lan1SubnetMask, mirrorCapturePort=mirrorCapturePort, latitude=latitude, powerStatus=powerStatus, port2Description=port2Description, rxSymbolErrors=rxSymbolErrors, port7Management=port7Management, rxAlignmentErrors=rxAlignmentErrors, ntpLog=ntpLog, port7Config=port7Config, snmpAccessSubnet9=snmpAccessSubnet9, port5Management=port5Management, upTime=upTime, port8Management=port8Management, rxGoodOctets=rxGoodOctets, port4VlanConf=port4VlanConf, satellitesVisible=satellitesVisible, port6PowerCtr=port6PowerCtr, snmpCommunityString=snmpCommunityString, cmmGPSGroup=cmmGPSGroup, txDropPkts=txDropPkts, port6Uplink=port6Uplink, rxExcessSizeDisc=rxExcessSizeDisc, snmpAccessSubnet2=snmpAccessSubnet2, gpsTime=gpsTime, port5VlanConf=port5VlanConf, snmpTrap1=snmpTrap1, rxOversizePkts=rxOversizePkts, txLateCollision=txLateCollision, txCollisions=txCollisions, txMulticastPkts=txMulticastPkts, port6PwrReset=port6PwrReset, uplinkStatus=uplinkStatus, txPausePkts=txPausePkts, cmmUserTable=cmmUserTable, snmpTrap3=snmpTrap3, userPswd=userPswd, webAutoUpdate=webAutoUpdate, snmpTrap4=snmpTrap4, macAddress=macAddress, port4Config=port4Config, pkts1024to1522Octets=pkts1024to1522Octets, verifyGPSChecksum=verifyGPSChecksum, rxOctets=rxOctets, rxPausePkts=rxPausePkts, portIndex=portIndex, eventLog=eventLog, pldVersion=pldVersion, port8VlanConf=port8VlanConf, txDeferredTransmit=txDeferredTransmit, txExcessiveCollision=txExcessiveCollision, height=height, port3PwrReset=port3PwrReset, gpsInvalidMsg=gpsInvalidMsg, rxJabbers=rxJabbers, portNumber=portNumber, cmmGps=cmmGps, snmpTrap9=snmpTrap9, pkts65to127Octets=pkts65to127Octets, snmpAccessSubnet5=snmpAccessSubnet5, txSingleCollision=txSingleCollision, clearEventLog=clearEventLog, txMultipleCollision=txMultipleCollision, port1VlanConf=port1VlanConf, port7PowerCtr=port7PowerCtr, vlanTagId=vlanTagId, pkts256to511Octets=pkts256to511Octets, gpsTimingPulse=gpsTimingPulse, mirSrcPortNumber=mirSrcPortNumber, cmmUserTableGroup=cmmUserTableGroup, cmmGroups=cmmGroups, cmmIIIMibModule=cmmIIIMibModule, port1PwrReset=port1PwrReset, port6VlanConf=port6VlanConf, allowedIPAccess1=allowedIPAccess1, cmmSwitchGroup=cmmSwitchGroup, port5Description=port5Description, snmpAccessSubnet4=snmpAccessSubnet4, gpsHeight=gpsHeight, rxUndersizePkts=rxUndersizePkts, port8Description=port8Description, port2Uplink=port2Uplink, port1PowerCtr=port1PowerCtr, cmmEventLog=cmmEventLog, rxBroadcastPkts=rxBroadcastPkts, gpsReInitCount=gpsReInitCount, PYSNMP_MODULE_ID=cmmIIIMibModule, mirSrcTxEnable=mirSrcTxEnable, snmpAccessSubnet6=snmpAccessSubnet6, trackingMode=trackingMode, gpsSatellitesVisible=gpsSatellitesVisible, rxDropPkts=rxDropPkts, pkts64Octets=pkts64Octets, snmpTrap5=snmpTrap5, port8PowerCtr=port8PowerCtr, portMirrorEnable=portMirrorEnable, port5Uplink=port5Uplink, snmpTrap8=snmpTrap8, pkts128to255Octets=pkts128to255Octets)
