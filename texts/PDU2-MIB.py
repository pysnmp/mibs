#
# PySNMP MIB module PDU2-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/raritan/PDU2-MIB
# Produced by pysmi-1.1.12 at Fri Nov 22 11:59:58 2024
# On host fv-az665-602 platform Linux version 6.5.0-1025-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint")
InetPortNumber, InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetPortNumber", "InetAddress", "InetAddressType")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
sysLocation, sysContact, sysName = mibBuilder.importSymbols("SNMPv2-MIB", "sysLocation", "sysContact", "sysName")
Counter64, Gauge32, MibIdentifier, IpAddress, NotificationType, ObjectIdentity, ModuleIdentity, Integer32, Bits, Unsigned32, TimeTicks, enterprises, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Gauge32", "MibIdentifier", "IpAddress", "NotificationType", "ObjectIdentity", "ModuleIdentity", "Integer32", "Bits", "Unsigned32", "TimeTicks", "enterprises", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso")
TruthValue, MacAddress, TextualConvention, DisplayString, RowPointer = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "MacAddress", "TextualConvention", "DisplayString", "RowPointer")
raritan = ModuleIdentity((1, 3, 6, 1, 4, 1, 13742))
raritan.setRevisions(('2017-11-13 00:00', '2016-12-02 00:00', '2016-02-16 00:00', '2016-02-09 00:00', '2015-10-26 00:00', '2015-09-30 00:00', '2015-02-18 00:00', '2014-06-04 00:00', '2014-01-09 00:00', '2014-01-07 00:00', '2013-11-21 00:00', '2013-09-18 00:00', '2013-08-01 00:00', '2013-07-10 00:00', '2013-07-02 00:00', '2013-05-21 00:00', '2013-04-26 00:00', '2013-03-27 00:00', '2013-03-25 10:00', '2013-03-25 00:00', '2013-03-18 00:00', '2013-02-25 00:00', '2013-02-04 00:00', '2013-01-24 00:00', '2012-11-20 00:00', '2012-11-15 00:00', '2012-10-05 00:00', '2012-10-04 00:00', '2012-09-28 00:00', '2012-09-21 00:00', '2012-09-20 00:00', '2012-09-17 00:00', '2012-09-04 00:00', '2012-06-22 00:00', '2012-06-18 00:00', '2012-06-06 00:00', '2012-05-25 00:00', '2012-05-15 00:00', '2012-03-26 00:00', '2011-12-13 00:00', '2011-11-29 00:00', '2011-10-25 00:00', '2011-06-16 00:00', '2011-03-22 00:00', '2011-02-21 00:00', '2011-02-14 00:00', '2011-02-08 00:00', '2011-02-03 00:00', '2011-01-31 00:00', '2010-12-15 00:00', '2010-12-13 11:31', '2010-12-13 00:00', '2010-12-07 00:00', '2010-10-07 00:00', '2010-10-04 00:00', '2010-09-01 00:00', '2010-08-05 00:00', '2010-07-23 00:00', '2010-07-22 00:00', '2010-07-21 00:00', '2010-07-14 00:00', '2010-07-06 00:00', '2010-07-01 00:00', '2010-06-30 00:00', '2010-06-21 00:00', '2010-06-03 00:00', '2010-05-27 00:00', '2010-05-24 00:00', '2010-04-19 00:00', '2010-04-15 00:00', '2010-04-08 00:00', '2010-03-29 00:00', '2010-03-25 00:00', '2010-03-16 00:00', '2010-03-01 00:00', '2010-01-29 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: raritan.setRevisionsDescriptions(('PX2/PX3 release 3.4.0:\n            1) Changed STATUS of inletConfigurationTable/inletRCMResidualOperatingCurrent to obsolete\n            2) Added to trapInformationGroup:\n                smartCardReaderId\n                smartCardTimestamp\n                smartCardType\n                smartCardId\n                suspectedTripCauseLabel\n            3) Added the following traps:\n                smartCardInserted\n                smartCardRemoved\n            4) Deprecated the following traps:\n                rfCodeTagConnected\n                rfCodeTagDisconnected\n            5) Revised the DESCRIPTION of all objects\n            6) SensorTypeEnumeration: Added\n                doorLockState(49)\n                doorHandleLock(50)\n            7) Added to overCurrentProtectorSensorStateChange trap:\n                suspectedTripCauseLabel', "PX2/PX3 release 3.3.10:\n            1) Added 'none(2)' to DeviceCascadeTypeEnumeration\n            2) Deprecated unitConfigurationTable/pxMACAddress\n            3) Deprecated unitConfigurationTable/networkInterfaceType\n            4) Added pduSerialNumber to the OBJECTS clause of all traps\n            5) Deprecated activeDNSServerTable/activeDNSServerAddressSource\n            6) Deprecated activeNTPServerTable/activeNTPServerAddressSource\n            7) Changed STATUS of unitConfigurationTable/useDHCPProvidedNTPServer to obsolete\n            8) Added OBJECT-GROUP obsoleteObjectsGroup\n            9) Modified DESCRPTION of the following:\n                deviceCascadeType\n                deviceCascadePosition\n                outletPowerCyclingPowerOffPeriod\n                pduPowerCyclingPowerOffPeriod\n                globalOutletPowerCyclingPowerOffPeriod\n                usbSlaveConnected\n                usbSlaveDisconnected", 'PX2/PX3 release 3.3.0:\n            1) Added inletRatedCurrent to the following traps:\n                powerMeterModified\n                powerMeterAdded\n            2) Added activeNTPServerCount to unitConfigurationTable\n            3) Added activeNTPServerTable', 'PX2/PX3 release 3.2.20:\n            1) Added the following:\n                 NetworkInterfaceTypeEnumeration,\n                 networkInterfaceType to unitConfigurationTable\n            2) Added AddressSourceEnumeration\n            3) Added activeDNS ServerCount to unitConfigurationTable\n            4) Added activeDNSServerTable', 'PX2/PX3 release 3.2.10:\n            1) Added to trapInformation:\n                phoneNumber\n            2) Added the following traps:\n                smsMessageTransmissionFailure trap', 'PX2/PX3 release 3.2.1:\n                - Support for PMC/BCM2\n                - Line and node information for component poles\n\n            1) SensorTypeEnumeration: Added\n                reactivePower(29)\n                displacementPowerFactor(35)\n            2) SensorUnitsEnumeration: Added\n                var(23)\n            3) ProductTypeEnumeration: Added\n                powerMeter(3)\n            4) Added the following enumerations:\n                PanelLayoutEnumeration\n                PanelNumberingEnumeration\n                CircuitTypeEnumeration\n                PhaseEnumeration\n                LineEnumeration\n                PowerMeterTypeEnumeration\n            5) Added the following tables:\n                inletPoleConfigurationTable\n                overCurrentProtectorPoleConfigurationTable\n                outletPoleConfigurationTable\n                transferSwitchPoleConfigurationTable\n                powerMeterConfigurationTable\n                circuitConfigurationTable\n                circuitPoleConfigurationTable\n                circuitSensorConfigurationTable\n                circuitPoleSensorConfigurationTable\n                circuitSensorLogTable\n                circuitPoleSensorLogTable\n                circuitSensorMeasurementsTable\n                circuitPoleSensorMeasurementsTable\n                circuitSensorControlTable\n            6) unitConfigurationTable: Added\n                circuitCount\n            7) inletDeviceCapabilities: Added\n                reactivePower(28)\n            8) inletPoleCapabilities: Added\n                phaseAngle(23)\n                reactivePower(28)\n                displacementPowerFactor(34)\n            9) overCurrentProtectorConfigurationTable: Added\n                overCurrentProtectorPoleCount\n            10) transferSwitchConfigurationTable: Added\n                transferSwitchPoleCount\n            11) Added the following to trapInformation:\n                circuitNumber\n                circuitPoleNumber\n            12) Added the following traps:\n                circuitSensorStateChange\n                circuitPoleSensorStateChange\n                circuitAdded\n                circuitDeleted\n                circuitModified\n                circuitSensorReset\n                powerMeterAdded\n                powerMeterDeleted\n                powerMeterModified\n            13) Revised the DESCRIPTION clauses of:\n                pduCount\n                pduId\n                inletPoleCount', 'PX2/PX3 release 3.1.0:\n                - Support absolute humidity sensors\n\n            1) SensorStateEnumeration: Added\n                nonRedundant(30)\n            2) SensorTypeEnumeration: Added\n                absoluteHumidity(28)\n            3) SensorUnitsEnumeration: Added\n                grampercubicmeter(22)\n            4) Corrected the possible states for the rcmState, operatingState and activeInlet sensors\n            5) Documented that the unitSensorResetValue object in unitSensorControlTable applies\n                only to multi-inlet PDUs\n            6) Deprecated inletRatedVA, inletRatedFrequency\n            7) inletDeviceCapabilities: Corrected bit values for residualCurrent(25)\n                and rcmState(26)', 'PX2/PX3 release 3.0.0:\n                - Support for signed sensor readings\n                - Support for unit-level power and energy sensors\n                - Send trap on peripheral device firmware update\n                - Allow peripheral device auto management to be disabled\n                - Allow front panel outlet switching to be enabled or disabled\n                - Support DX-PIR occupancy sensor\n\n            1) Changed the SYNTAX from Integer32 to Unsigned32:\n                measurementsUnitSensorValue\n            2) Added signed value, range and threshold columns to:\n                unitSensorConfigurationTable\n                unitSensorMeasurementsTable\n                pduSensorStateChange\n                inletSensorConfigurationTable\n                inletSensorMeasurementsTable\n                inletSensorLogTable\n                inletSensorStateChange\n                inletPoleSensorConfigurationTable\n                inletPoleSensorMeasurementsTable\n                inletPoleSensorLogTable\n                inletPoleSensorStateChange\n                overCurrentProtectorSensorConfigurationTable\n                overCurrentProtectorSensorMeasurementsTable\n                overCurrentProtectorSensorLogTable\n                overCurrentProtectorSensorStateChange\n                outletSensorConfigurationTable\n                outletSensorMeasurementsTable\n                outletSensorLogTable\n                outletSensorStateChange\n                outletPoleSensorConfigurationTable\n                outletPoleSensorMeasurementsTable\n                outletPoleSensorLogTable\n                outletPoleSensorStateChange\n            3) Added unsigned value, range and threshold columns to:\n                unitSensorLogTable\n                transferSwitchSensorConfigurationTable\n                transferSwitchSensorMeasurementsTable\n                transferSwitchSensorLogTable\n                transferSwitchSensorStateChange\n            4) Added UnitSensorControlTable\n            5) Added unitSensorReset and unitSensorStateChange traps\n            6) Deprecated pduSensorStateChange trap\n            7) Added to unitConfigurationTable:\n                peripheralDevicesAutoManagement\n                frontPanelOutletSwitching\n                frontPanelRCMSelfTest\n                frontPanelActuatorControl\n            8) Added to externalSensorConfigurationTable:\n                externalSensorAlarmedToNormalDelay\n            9) Deprecated:\n                wireCount in unitConfiguraionTable\n                tables for wireSensors\n                traps for wireSensors\n            10) SensorStateEnumeration: Added\n                fail(14)\n            11) ProductTypeEnumeration: Renamed\n                rackSts(2) to transferSwitch\n            12) Added:\n                PeripheralDeviceFirmwareUpdateStateEnumeration\n                peripheralDeviceFirmwareUpdateState\n                peripheralDeviceFirmwareUpdate trap\n            13) Added userName to the following traps:\n                bulkConfigurationSaved\n                bulkConfigurationCopied\n                lhxSupportChanged\n                deviceSettingsSaved\n                deviceSettingsRestored', 'PX2/PX3 release 2.6.0:\n                - Support for PX3TS transfer switches\n\n            1) SensorTypeEnumeration:\n               Removed:\n                scrOpenStatus\n                scrShortStatus\n               Added:\n                i1SmpsStatus(46)\n                i2SmpsStatus(47)\n                switchStatus(48)\n            2) SensorStateEnumeration:\n               Removed:\n                marginal\n                fail\n               Added:\n                i1OpenFault(22)\n                i1ShortFault(23)\n                i2OpenFault(24)\n                i2ShortFault(25)\n                fault(26)\n                warning(27)\n                critical(28)\n            3) unitDeviceCapabilities: Added\n                i1SmpsStatus(45)\n                i2SmpsStatus(46)\n            4) transferSwitchCapabilities: Added\n                switchStatus(47)\n            5) Added transferSwitchConfiguration table\n            6) unitSensorLogTable:\n               Removed:\n                logUnitSensorAvgValue\n                logUnitSensorMaxValue\n                logUnitSensorMinValue\n               Added:\n                logUnitSensorSignedAvgValue\n                logUnitSensorSignedMaxValue\n                logUnitSensorSignedMinValue', 'PX2/PX3 release 2.5.30:\n                - Accumulating sensors (energy counters) can be reset\n                - Sensor accuray and tolerance variables are deprecated\n\n            1) Added peripheralDevicePackagePosition and peripheralDevicePackageState\n            2) Added radiusError trap\n            3) Added serverReachabilityError trap\n            4) Deprecated the following:\n                unitSensorConfigurationTable/unitSensorAccuracy\n                unitSensorConfigurationTable/unitSensorTolerance\n                inletSensorConfigurationTable/inletSensorAccuracy\n                inletSensorConfigurationTable/inletSensorTolerance\n                inletPoleSensorConfigurationTable/inletPoleSensorAccuracy\n                inletPoleSensorConfigurationTable/inletPoleSensorTolerance\n                outletSensorConfigurationTable/outetSensorAccuracy\n                outletSensorConfigurationTable/outletSensorTolerance\n                outletPoleSensorConfigurationTable/outetPoleSensorAccuracy\n                outletPoleSensorConfigurationTable/outletPoleSensorTolerance\n                overCurrentProtectorSensorConfigurationTable/overCurrentProtectorSensorAccuracy\n                overCurrentProtectorSensorConfigurationTable/overCurrentProtectorSensorTolerance\n                externalSensorConfigurationTable/externalSensorAccuracy\n                externalSensorConfigurationTable/externalSensorTolerance\n                wireSensorConfigurationTable/wireSensorAccuracy\n                wireSensorConfigurationTable/wireSensorTolerance\n                transferSwitchSensorConfigurationTable/transferSwitchSensorAccuracy\n                transferSwitchSensorConfigurationTable/transferSwitchSensorTolerance\n            5) Added inletSensorReset and outletSensorReset traps\n            6) Added inletSensorControl and inletSensorControlTable\n            7) Added outletSensorControl and outletSensorControlTable\n            8) Added unknownPeripheralDeviceAttached trap', 'PX2/PX3 release 2.5.20:\n                - Support for residual current monitors\n                - Support for USB cascading with one IP address\n                - Support for line-neutral voltage sensors\n\n            1) SensorTypeEnumeration: Added\n                rmsVoltageLN(25)\n                residualCurrent(26)\n                rcmState(27)\n            2) SensorStateEnumeration: Added\n                warning(27)\n                critical(28)\n                selfTest(29)\n            3) inletDeviceCapabilities: Added\n                residualCurrent(26)\n                rcmState(27)\n            4) Added rmsVoltageLN(24) to inletPoleCapabilities\n            5) Added inletRCMResidualOperatingCurrent to inletConfigurationTable\n            6) Added rcmControl under control\n            7) Added rcmSelfTestTable under rcmControl\n            8) Added DeviceCascadeTypeEnumeration\n            9) Added deviceCascadeType, deviceCascadePosition to unitConfigurationTable\n            10) Added agentInetPortNumber under trapInformation\n            11) Added agentInetPortNumber as a varbind to all traps\n            12) Added peripheralDevicePackageTable containing information on peripheral\n                device packages', '1) Added serverConnectivityUnrecoverable trap', '1) Added RCBO OCP types', '1) Added externalSensorTypeDefaultThresholdsTable', '1) Added relayBehaviorOnPowerLoss to unitConfigurationTable', '1) Added inletEnableState to inletConfigurationTable\n            2) Added traps: inletEnabled and inletDisabled', '1) Added traps: webcamInserted and webcamRemoved\n            2) Added trapInformation parameters: webcamModel, webcamConnectionPort', '1) Changed outletSource to outletPowerSource in outletConfigurationTable\n            2) Changed transferSwitchSource1 and transferSwitchSource2 to\n               transferSwitchPowerSource1 and transferSwitchPowerSource2 in transferSwitchConfigurationTable\n            3) Changed overCurrentProtectorSource to overCurrentProtectorPowerSource in overCurrentProtectorConfigurationTable\n            4) Changed wireSource to wirePowerSource in wireConfigurationTable', '1) Added comments showing the possible states for each sensor type.', '1) Added outletSource to outletConfigurationTable\n            2) Added transferSwitchSource1 and transferSwitchSource2 to transferSwitchConfigurationTable\n            3) Added overCurrentProtectorSource to overCurrentProtectorConfigurationTable\n            4) Added wireSource to wireConfigurationTable', '1) Added meteringControllerCount to the unitConfigurationTable\n            2) Added meteringController to BoardTypeEnumeration', '1) Added ProductTypeEnumeration\n            2) Added productType to unitConfigurationTable', '1) Added TransferSwitchTransferReasonEnumeration\n            2) Added transferSwitchLastTransferReason to transferSwitchControlTable\n            3) Added transferSwitchLastTransferReason to transferSwitchSensorStateChange trap', '1) Added required sensor types and units', '1) Added  externalSensorIsActuator and externalSensorPosition to the externalSensorConfigurationTable\n            2) Added actuatorControlTable', '1) Removed transferSwitchOutputCapabilities from transferSwitchConfigurationTable\n            2) Removed the following tables:\n                transferSwitchOutputSensorConfigurationTable\n                transferSwitchOutputSensorLogTable\n                transferSwitchOutputSensorMeasurementsTable\n            3) Removed transferSwitchOutputSensorStateChange trap\n            4) Added transferSwitchControlTable\n            5) Removed the following entries from SensorTypeEnumeration:\n                overTemperatureFault\n                fans\n                internalFault\n                inletPhaseDeviationFault\n                overloadFault\n            6) Added the following entries to SensorTypeEnumeration:\n                overloadStatus\n                overheatStatus\n                scrOpenStatus\n                scrShortStatus\n                fanStatus\n                inletPhaseSyncAngle\n                inletPhaseSync\n            7) Added the following entries to SensorStateEnumeration:\n                inSync,\n                outOfSync\n            8) Renamed transferSwitchNoTransferIfPhaseDeviationFault to\n               transferSwitchAutoReTransferRequiresPhaseSync', '1) Modified the DESCRIPTION of the following:\n                outletSwitchControlTable\n                transferSwitchOutputSensorMeasurementsEntry\n                overCurrentProtectorSensorMeasurementsEntry\n                outletPoleSensorMeasurementsEntry\n                transferSwitchOutputSensorLogEntry\n                transferSwitchOutputSensorLogTable\n                wireSensorLogEntry\n                externalSensorNumber\n                controllerConfigurationEntry\n                SensorUnitsEnumeration\n                measurementsGroup\n                logGroup', '1) In the transferSwitchConfigurationTable,\n               replaced transferSwitchFrequencyDeviation with\n               transferSwitchLowerMarginalFrequency and transferSwitchUpperMarginalFrequency', '1) Modified the DESCRIPTION of the following:\n                bulkConfigurationCopied, userModified, userSessionTimeout', '1) Added the following traps:\n                deviceSettingsSaved, deviceSettingsRestored', '1) Added the following objects to the transferSwitchConfigurationTable:\n                transferSwitchInternalFaultType\n            2) Added transferSwitchInternalFaultType to transferSwitchSensorStateChange trap\n            3) Added marginal to SensorStateEnumeration', '1) Deprecated the following objects from the unitConfigurationTable\n                pxInetAddressType\n                pxInetIPAddress\n                pxInetNetmask\n                pxInetGateway', 'Support for transfer Switch objects and sensors\n            1) Added transferSwitchCount to unitConfigurationTable\n            2) Added the following tables:\n                transferSwitchConfigurationTable\n                transferSwitchSensorConfigurationTable\n                transferSwitchSensorLogTable\n                transferSwitchSensorMeasurementsTable\n                transferSwitchOutputSensorConfigurationTable\n                transferSwitchOutputSensorLogTable\n                transferSwitchOutputSensorMeasurementsTable\n            3) Added\n                transferSwitchSensorStateChange trap\n                transferSwitchOutputSensorStateChange trap', '1) Added surgeProtectorStatus to SensorTypeEnumeration\n            2) Added surgeProtectorStatus to inletDeviceCapabilities', '1) Added a comment before the section listing the traps.\n               The comment notes that the pxInetIPAddressType and\n               pxInetIPAddress fields are not used for IPv6 traps', 'Support for wire objects and sensors\n            1) Added wireCount to unitConfigurationTable\n            2) Added the following tables:\n                wireConfigurationTable\n                wireSensorConfigurationTable\n                wireSensorLogTable\n                wireSensorMeasurementsTable\n            3) Added wireSensorStateChange trap', '1) Added userAccepted/DeclinedRestrictedServiceAgreement traps', 'Added support for NTP servers\n            1) Added the following objects under info:\n                synchronizeWithNTPServer\n                useDHCPProvidedNTPServer\n                firstNTPServerAddressType\n                firstNTPServerAddress\n                secondNTPServerAddressType\n                secondNTPServerAddress', '1) Added lhxSupportChanged trap', '1) Added usbSlaveConnected, usbSlaveDisonnected traps', '1) Added cascadedDeviceConnected to UnitConfigurationEntryStruct', '1) Added DeviceIdentificationParameterEnumeration\n            2) Added deviceIdentificationChanged Trap\n            3) Added sysContact, sysName, sysLocation to all traps', '1) Changed DESCRIPTION of outletSequencingDelay', '1) Added rfCodeTagConnected, rfCodeTagDisconnected traps\n            2) Changed MAX-ACCESS for externalOnOffSensorSubtype to read-write', '1) Added rpm(19) to SensorUnitsEnumeration', '1) Changed 5WIRE IEC60309 enumerations from 250V to 208V', '1) Removed OnOffSensorSubtypeEnumeration\n            2) Changed SYNTAX of externalOnOffSensorSubtype to SensorTypeEnumeration\n            3) Added binary, contact, fanspeed, none to SensorTypeEnumeration\n            4) Changed outletPoleCapabilities to be the same as inletPoleCapabilities', '1) Added externalSensorSerialNumber,externalOnOffSensorSubtype, externalSensorChannelNumber\n               to the externalSensorStateChange trap.', '1) Modifed the DESCRIPTION of the powerControl trap', '1) Added dataLoggingEnableForAllSensors to logConfigurationTable', '1) Added inrushGuardDelay to unitConfigurationTable\n            2) Added outletSequenceDelay to outletConfigurationTable\n            3) Deprecated outletSequencingDelay', '1) Added externalOnOffSensorSubtype to ExternalSensorConfigurationEntryStruct\n            2) Added OnOffSensorSubtypeEnumeration\n            3) Added alarmed to SensorStateEnumeration\n            4) Removed firmwareFileDiscarded trap\n            5) Removed securityViolation trap', '1) Changed DESCRIPTION of measurementPeriod to say that the value is fixed at 1 second', '1) Added ocpFUSEPAIR(5) to OverCurrentProtectorTypeEnumeration\n            2) Changed ocpFUSE1POLE(4) to ocpFUSE(4) in OverCurrentProtectorTypeEnumeration', '1) added ocpFUSE2POLE(5) to OverCurrentProtectorTypeEnumeration\n            2) changed ocpFUSE(4) to ocpFUSE1POLE(4) in OverCurrentProtectorTypeEnumeration', '1) Removed userName from serverNotReachable and serverReachable traps', '1) Added reliabilityDataTableSequenceNumber\n            2) Changed SYNTAX of reliabilityErrorLogIndex to Integer32(1..2147483647)', '1) Moved serverCount to unitConfigurationTable', '1) Added support for the Reliability Tables\n            2) Added new group reliabilityGroup\n            3) Defined nodes reliability,reliabilityData,reliabilityErrorLog\n            4) Added reliabilityDataTable & reliabilityErrorLogTable', '1) Added plug56PA320 to PlugTypeEnumeration\n            2) Added plug56P320F to PlugTypeEnumeration', '1) Added the following traps:\n                pingServerEnabled\n                pingServerDisabled\n                serverNotReachable\n                serverReachable\n            2) Added the serverReachabilityTable', '1) Added externalSensorChannelNumber to externalSensorConfigurationTable', '1) Added outletSwitchingState to outletSwitchControlTable\n            2) Added outletSwitchingTimeStamp to outletSwitchControlTable', '1) Added switchingOperation to the powerControl trap', '1) Added support for Load shedding\n            2) Added loadShedding to the unitConfigurationTable.\n            3) Added nonCritical to the outletConfigurationTable\n            4) Added loadSheddingModeEntered & loadSheddingModeExited traps\n            5) Modified description of inletPlug in inletConfigurationTable', '1) Added plugOTHER to PlugTypeEnumeration\n            2) Added receptacleOTHER to ReceptacleTypeEnumeration\n            3) Added inletPlugDescriptor to inletConfigurationTable\n            4) Added outletReceptacleDescriptor to outletConfigurationTable', '1) Added INetAddressType and INetAddress to represent IP addresses\n            2) unitConfigurationTable: deprecated pxIpAddress\n            3) unitConfigurationTable: added\n                pxInetAddressType\n                pxInetIPAddress\n                pxInetNetmask\n                pxInetGateway\n            4) Added pxInetAddressType,pxInetIPAddress to all traps\n            5) Defined new trap deviceUpdateFailed', 'Added typeOfSensor to externalSensorStateChange trap', 'Modified the DESCRIPTION of the deviceUpdateCompleted trap', 'Modified the DESCRIPTION of all SensorStateChangeDelay parameters', 'Modified the DESCRIPTION of sensor parameters that do not apply to discrete sensors', 'Added trap ldapError', 'Changed the SYNTAX of the following objects from Integer32 to Unsigned32:\n                logInletSensorMaxValue,\n                logInletSensorMinValue,\n                logInletSensorAvgValue,\n                logInletPoleSensorMaxValue,\n                logInletPoleSensorMinValue,\n                logInletPoleSensorAvgValue,\n                logOutletSensorMaxValue,\n                logOutletSensorMinValue,\n                logOutletSensorAvgValue,\n                logOutletPoleSensorMaxValue,\n                logOutlePoletSensorMinValue,\n                logOutletPoleSensorAvgValue,\n                logOverCurrentProtectorSensorMaxValue,\n                logOverCurrentProtectorSensorMinValue,\n                logOverCurrentProtectorSensorAvgValue,\n                measurementsInletSensorValue,\n                measurementsInletPoleSensorValue,\n                measurementsOutletSensorValue,\n                measurementsOutletPoleSensorValue,\n                measurementsOverCurrentProtectorSensorValue', 'Added trap smtpMessageTransmissionFailure', 'Changed externalSensorsZCoordinateUnits to an enumeration', 'The first version of the MIB',))
if mibBuilder.loadTexts: raritan.setLastUpdated('201711130000Z')
if mibBuilder.loadTexts: raritan.setOrganization('Raritan')
if mibBuilder.loadTexts: raritan.setContactInfo('Author:       Raritan Americas, Inc.\n            postal:       Raritan Americas, Inc.\n                          400 Cottontail Lane\n                          Somerset, NJ 08873\n            email:        tech@raritan.com\n            phone:        +1 732 764 8886')
if mibBuilder.loadTexts: raritan.setDescription('This MIB describes the SNMP functions of the Raritan PX2, PX3\n            and BCM2 series power distribution units by Raritan.')
pdu2 = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6))
traps = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 0))
trapInformation = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0))
board = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 1))
environmental = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 2))
configuration = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 3))
control = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 4))
measurements = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 5))
log = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 6))
conformance = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 9))
reliability = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 10))
unit = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2))
inlets = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3))
overCurrentProtector = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4))
outlets = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5))
externalSensors = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6))
serverReachability = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 3, 7))
wires = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 3, 8))
transferSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9))
powerMeter = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 3, 10))
circuit = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11))
outletControl = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 4, 1))
externalSensorControl = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 4, 2))
transferSwitchControl = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 4, 3))
actuatorControl = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 4, 4))
rcmControl = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 4, 5))
inletSensorControl = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 4, 6))
outletSensorControl = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 4, 7))
unitSensorControl = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 4, 8))
circuitSensorControl = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 4, 9))
measurementsUnit = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 5, 1))
measurementsInlet = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 5, 2))
measurementsOverCurrentProtector = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 5, 3))
measurementsOutlet = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 5, 4))
measurementsExternalSensor = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 5, 5))
measurementsWire = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 5, 6))
measurementsTransferSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 5, 7))
measurementsCircuit = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 5, 8))
logUnit = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 6, 1))
logInlet = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 6, 2))
logOverCurrentProtector = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 6, 3))
logOutlet = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 6, 4))
logExternalSensor = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 6, 5))
logWire = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 6, 6))
logTransferSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 6, 7))
logCircuit = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 6, 8))
reliabilityData = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 10, 1))
reliabilityErrorLog = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 10, 2))
compliances = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 9, 1))
groups = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 9, 2))
complianceRev2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 13742, 6, 9, 1, 2)).setObjects(("PDU2-MIB", "configGroup"), ("PDU2-MIB", "logGroup"), ("PDU2-MIB", "measurementsGroup"), ("PDU2-MIB", "controlGroup"), ("PDU2-MIB", "trapInformationGroup"), ("PDU2-MIB", "trapsGroup"), ("PDU2-MIB", "reliabilityGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    complianceRev2 = complianceRev2.setStatus('current')
if mibBuilder.loadTexts: complianceRev2.setDescription('The requirements for conformance to the PDU2-MIB.')
complianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 13742, 6, 9, 1, 1)).setObjects(("PDU2-MIB", "ipAddressGroup"), ("PDU2-MIB", "oldConfigGroup"), ("PDU2-MIB", "oldLogGroup"), ("PDU2-MIB", "oldMeasurementsGroup"), ("PDU2-MIB", "oldTrapsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    complianceRev1 = complianceRev1.setStatus('deprecated')
if mibBuilder.loadTexts: complianceRev1.setDescription('The requirements for conformance to the PDU2-MIB.')
configGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 13742, 6, 9, 2, 1))
for _configGroup_obj in [[("PDU2-MIB", "pduCount"), ("PDU2-MIB", "pduManufacturer"), ("PDU2-MIB", "pduModel"), ("PDU2-MIB", "pduSerialNumber"), ("PDU2-MIB", "pduRatedVoltage"), ("PDU2-MIB", "pduRatedCurrent"), ("PDU2-MIB", "pduRatedFrequency"), ("PDU2-MIB", "pduRatedVA"), ("PDU2-MIB", "pduImage"), ("PDU2-MIB", "inletCount"), ("PDU2-MIB", "transferSwitchCount"), ("PDU2-MIB", "productType"), ("PDU2-MIB", "overCurrentProtectorCount"), ("PDU2-MIB", "outletCount"), ("PDU2-MIB", "inletControllerCount"), ("PDU2-MIB", "outletControllerCount"), ("PDU2-MIB", "meteringControllerCount"), ("PDU2-MIB", "externalSensorCount"), ("PDU2-MIB", "circuitCount"), ("PDU2-MIB", "utcOffset"), ("PDU2-MIB", "pduName"), ("PDU2-MIB", "boardVersion"), ("PDU2-MIB", "boardFirmwareVersion"), ("PDU2-MIB", "boardFirmwareTimeStamp"), ("PDU2-MIB", "unitSensorLogAvailable"), ("PDU2-MIB", "unitSensorUnits"), ("PDU2-MIB", "unitSensorDecimalDigits"), ("PDU2-MIB", "unitSensorResolution"), ("PDU2-MIB", "unitSensorMaximum"), ("PDU2-MIB", "unitSensorMinimum"), ("PDU2-MIB", "unitSensorHysteresis"), ("PDU2-MIB", "unitSensorStateChangeDelay"), ("PDU2-MIB", "unitSensorLowerCriticalThreshold"), ("PDU2-MIB", "unitSensorLowerWarningThreshold"), ("PDU2-MIB", "unitSensorUpperCriticalThreshold"), ("PDU2-MIB", "unitSensorUpperWarningThreshold"), ("PDU2-MIB", "unitSensorEnabledThresholds"), ("PDU2-MIB", "unitSensorSignedMaximum"), ("PDU2-MIB", "unitSensorSignedMinimum"), ("PDU2-MIB", "unitSensorSignedLowerCriticalThreshold"), ("PDU2-MIB", "unitSensorSignedLowerWarningThreshold"), ("PDU2-MIB", "unitSensorSignedUpperCriticalThreshold"), ("PDU2-MIB", "unitSensorSignedUpperWarningThreshold"), ("PDU2-MIB", "inletLabel"), ("PDU2-MIB", "inletName"), ("PDU2-MIB", "inletPlug"), ("PDU2-MIB", "inletPoleCount"), ("PDU2-MIB", "inletRatedVoltage"), ("PDU2-MIB", "inletRatedCurrent"), ("PDU2-MIB", "inletDeviceCapabilities"), ("PDU2-MIB", "inletPoleCapabilities"), ("PDU2-MIB", "inletPlugDescriptor"), ("PDU2-MIB", "inletEnableState"), ("PDU2-MIB", "inletPoleLine"), ("PDU2-MIB", "inletPoleNode"), ("PDU2-MIB", "inletSensorLogAvailable"), ("PDU2-MIB", "inletSensorUnits"), ("PDU2-MIB", "inletSensorDecimalDigits"), ("PDU2-MIB", "inletSensorResolution"), ("PDU2-MIB", "inletSensorMaximum"), ("PDU2-MIB", "inletSensorMinimum"), ("PDU2-MIB", "inletSensorHysteresis"), ("PDU2-MIB", "inletSensorStateChangeDelay"), ("PDU2-MIB", "inletSensorLowerCriticalThreshold"), ("PDU2-MIB", "inletSensorLowerWarningThreshold"), ("PDU2-MIB", "inletSensorUpperCriticalThreshold"), ("PDU2-MIB", "inletSensorUpperWarningThreshold"), ("PDU2-MIB", "inletSensorEnabledThresholds"), ("PDU2-MIB", "inletSensorSignedMaximum"), ("PDU2-MIB", "inletSensorSignedMinimum"), ("PDU2-MIB", "inletSensorSignedLowerCriticalThreshold"), ("PDU2-MIB", "inletSensorSignedLowerWarningThreshold"), ("PDU2-MIB", "inletSensorSignedUpperCriticalThreshold"), ("PDU2-MIB", "inletSensorSignedUpperWarningThreshold"), ("PDU2-MIB", "inletPoleSensorLogAvailable"), ("PDU2-MIB", "inletPoleSensorUnits"), ("PDU2-MIB", "inletPoleSensorDecimalDigits"), ("PDU2-MIB", "inletPoleSensorResolution"), ("PDU2-MIB", "inletPoleSensorMaximum"), ("PDU2-MIB", "inletPoleSensorMinimum"), ("PDU2-MIB", "inletPoleSensorHysteresis"), ("PDU2-MIB", "inletPoleSensorStateChangeDelay"), ("PDU2-MIB", "inletPoleSensorLowerCriticalThreshold"), ("PDU2-MIB", "inletPoleSensorLowerWarningThreshold"), ("PDU2-MIB", "inletPoleSensorUpperCriticalThreshold"), ("PDU2-MIB", "inletPoleSensorUpperWarningThreshold"), ("PDU2-MIB", "inletPoleSensorEnabledThresholds"), ("PDU2-MIB", "inletPoleSensorSignedMaximum"), ("PDU2-MIB", "inletPoleSensorSignedMinimum"), ("PDU2-MIB", "inletPoleSensorSignedLowerCriticalThreshold"), ("PDU2-MIB", "inletPoleSensorSignedLowerWarningThreshold"), ("PDU2-MIB", "inletPoleSensorSignedUpperCriticalThreshold"), ("PDU2-MIB", "inletPoleSensorSignedUpperWarningThreshold"), ("PDU2-MIB", "overCurrentProtectorLabel"), ("PDU2-MIB", "overCurrentProtectorName"), ("PDU2-MIB", "overCurrentProtectorType"), ("PDU2-MIB", "overCurrentProtectorRatedCurrent"), ("PDU2-MIB", "overCurrentProtectorCapabilities"), ("PDU2-MIB", "overCurrentProtectorPoleCount"), ("PDU2-MIB", "overCurrentProtectorPoleLine"), ("PDU2-MIB", "overCurrentProtectorPoleInNode"), ("PDU2-MIB", "overCurrentProtectorPoleOutNode"), ("PDU2-MIB", "overCurrentProtectorSensorLogAvailable"), ("PDU2-MIB", "overCurrentProtectorSensorUnits"), ("PDU2-MIB", "overCurrentProtectorSensorDecimalDigits"), ("PDU2-MIB", "overCurrentProtectorSensorResolution"), ("PDU2-MIB", "overCurrentProtectorSensorMaximum"), ("PDU2-MIB", "overCurrentProtectorSensorMinimum"), ("PDU2-MIB", "overCurrentProtectorSensorHysteresis"), ("PDU2-MIB", "overCurrentProtectorSensorStateChangeDelay"), ("PDU2-MIB", "overCurrentProtectorSensorLowerCriticalThreshold"), ("PDU2-MIB", "overCurrentProtectorSensorLowerWarningThreshold"), ("PDU2-MIB", "overCurrentProtectorSensorUpperCriticalThreshold"), ("PDU2-MIB", "overCurrentProtectorSensorUpperWarningThreshold"), ("PDU2-MIB", "overCurrentProtectorSensorEnabledThresholds"), ("PDU2-MIB", "overCurrentProtectorSensorSignedMaximum"), ("PDU2-MIB", "overCurrentProtectorSensorSignedMinimum"), ("PDU2-MIB", "overCurrentProtectorSensorSignedLowerCriticalThreshold"), ("PDU2-MIB", "overCurrentProtectorSensorSignedLowerWarningThreshold"), ("PDU2-MIB", "overCurrentProtectorSensorSignedUpperCriticalThreshold"), ("PDU2-MIB", "overCurrentProtectorSensorSignedUpperWarningThreshold"), ("PDU2-MIB", "overCurrentProtectorPowerSource"), ("PDU2-MIB", "outletLabel"), ("PDU2-MIB", "outletName"), ("PDU2-MIB", "outletReceptacle"), ("PDU2-MIB", "outletPoleCount"), ("PDU2-MIB", "outletRatedVoltage"), ("PDU2-MIB", "outletRatedCurrent"), ("PDU2-MIB", "outletRatedVA"), ("PDU2-MIB", "outletDeviceCapabilities"), ("PDU2-MIB", "outletPoleCapabilities"), ("PDU2-MIB", "outletPowerCyclingPowerOffPeriod"), ("PDU2-MIB", "outletStateOnStartup"), ("PDU2-MIB", "outletUseGlobalPowerCyclingPowerOffPeriod"), ("PDU2-MIB", "outletSwitchable"), ("PDU2-MIB", "outletReceptacleDescriptor"), ("PDU2-MIB", "outletNonCritical"), ("PDU2-MIB", "outletSequenceDelay"), ("PDU2-MIB", "outletPoleLine"), ("PDU2-MIB", "outletPoleNode"), ("PDU2-MIB", "outletSensorLogAvailable"), ("PDU2-MIB", "outletSensorUnits"), ("PDU2-MIB", "outletSensorDecimalDigits"), ("PDU2-MIB", "outletSensorResolution"), ("PDU2-MIB", "outletSensorMaximum"), ("PDU2-MIB", "outletSensorMinimum"), ("PDU2-MIB", "outletSensorHysteresis"), ("PDU2-MIB", "outletSensorStateChangeDelay"), ("PDU2-MIB", "outletSensorLowerCriticalThreshold"), ("PDU2-MIB", "outletSensorLowerWarningThreshold"), ("PDU2-MIB", "outletSensorUpperCriticalThreshold"), ("PDU2-MIB", "outletSensorUpperWarningThreshold"), ("PDU2-MIB", "outletSensorEnabledThresholds"), ("PDU2-MIB", "outletSensorSignedMaximum"), ("PDU2-MIB", "outletSensorSignedMinimum"), ("PDU2-MIB", "outletSensorSignedLowerCriticalThreshold"), ("PDU2-MIB", "outletSensorSignedLowerWarningThreshold"), ("PDU2-MIB", "outletSensorSignedUpperCriticalThreshold"), ("PDU2-MIB", "outletSensorSignedUpperWarningThreshold"), ("PDU2-MIB", "outletPoleSensorLogAvailable"), ("PDU2-MIB", "outletPoleSensorUnits"), ("PDU2-MIB", "outletPoleSensorDecimalDigits"), ("PDU2-MIB", "outletPoleSensorResolution"), ("PDU2-MIB", "outletPoleSensorMaximum"), ("PDU2-MIB", "outletPoleSensorMinimum"), ("PDU2-MIB", "outletPoleSensorHysteresis"), ("PDU2-MIB", "outletPoleSensorStateChangeDelay"), ("PDU2-MIB", "outletPoleSensorLowerCriticalThreshold"), ("PDU2-MIB", "outletPoleSensorLowerWarningThreshold"), ("PDU2-MIB", "outletPoleSensorUpperCriticalThreshold"), ("PDU2-MIB", "outletPoleSensorUpperWarningThreshold"), ("PDU2-MIB", "outletPoleSensorEnabledThresholds"), ("PDU2-MIB", "outletPoleSensorSignedMaximum"), ("PDU2-MIB", "outletPoleSensorSignedMinimum"), ("PDU2-MIB", "outletPoleSensorSignedLowerCriticalThreshold"), ("PDU2-MIB", "outletPoleSensorSignedLowerWarningThreshold"), ("PDU2-MIB", "outletPoleSensorSignedUpperCriticalThreshold"), ("PDU2-MIB", "outletPoleSensorSignedUpperWarningThreshold"), ("PDU2-MIB", "outletPowerSource"), ("PDU2-MIB", "externalSensorType"), ("PDU2-MIB", "externalSensorSerialNumber"), ("PDU2-MIB", "externalSensorName"), ("PDU2-MIB", "externalSensorDescription"), ("PDU2-MIB", "externalSensorXCoordinate"), ("PDU2-MIB", "externalSensorYCoordinate"), ("PDU2-MIB", "externalSensorZCoordinate"), ("PDU2-MIB", "externalSensorChannelNumber"), ("PDU2-MIB", "externalOnOffSensorSubtype"), ("PDU2-MIB", "externalSensorLogAvailable"), ("PDU2-MIB", "externalSensorUnits"), ("PDU2-MIB", "externalSensorDecimalDigits"), ("PDU2-MIB", "externalSensorResolution"), ("PDU2-MIB", "externalSensorMaximum"), ("PDU2-MIB", "externalSensorMinimum"), ("PDU2-MIB", "externalSensorHysteresis"), ("PDU2-MIB", "externalSensorStateChangeDelay"), ("PDU2-MIB", "externalSensorLowerCriticalThreshold"), ("PDU2-MIB", "externalSensorLowerWarningThreshold"), ("PDU2-MIB", "externalSensorUpperCriticalThreshold"), ("PDU2-MIB", "externalSensorUpperWarningThreshold"), ("PDU2-MIB", "externalSensorEnabledThresholds"), ("PDU2-MIB", "externalSensorsZCoordinateUnits"), ("PDU2-MIB", "externalSensorIsActuator"), ("PDU2-MIB", "externalSensorPosition"), ("PDU2-MIB", "externalSensorUseDefaultThresholds"), ("PDU2-MIB", "externalSensorTypeDefaultHysteresis"), ("PDU2-MIB", "externalSensorTypeDefaultStateChangeDelay"), ("PDU2-MIB", "externalSensorTypeDefaultLowerCriticalThreshold"), ("PDU2-MIB", "externalSensorTypeDefaultLowerWarningThreshold"), ("PDU2-MIB", "externalSensorTypeDefaultUpperCriticalThreshold"), ("PDU2-MIB", "externalSensorTypeDefaultUpperWarningThreshold"), ("PDU2-MIB", "externalSensorTypeDefaultEnabledThresholds"), ("PDU2-MIB", "measurementPeriod"), ("PDU2-MIB", "measurementsPerLogEntry"), ("PDU2-MIB", "logSize"), ("PDU2-MIB", "unitDeviceCapabilities"), ("PDU2-MIB", "globalOutletPowerCyclingPowerOffPeriod"), ("PDU2-MIB", "globalOutletStateOnStartup"), ("PDU2-MIB", "relayBehaviorOnPowerLoss"), ("PDU2-MIB", "pduPowerCyclingPowerOffPeriod"), ("PDU2-MIB", "pduDaisychainMemberType"), ("PDU2-MIB", "managedExternalSensorCount"), ("PDU2-MIB", "outletPowerupSequence"), ("PDU2-MIB", "loadShedding"), ("PDU2-MIB", "serverCount"), ("PDU2-MIB", "serverIPAddress"), ("PDU2-MIB", "serverPingEnabled"), ("PDU2-MIB", "inrushGuardDelay"), ("PDU2-MIB", "cascadedDeviceConnected"), ("PDU2-MIB", "synchronizeWithNTPServer"), ("PDU2-MIB", "firstNTPServerAddressType"), ("PDU2-MIB", "firstNTPServerAddress"), ("PDU2-MIB", "secondNTPServerAddressType"), ("PDU2-MIB", "secondNTPServerAddress"), ("PDU2-MIB", "transferSwitchLabel"), ("PDU2-MIB", "transferSwitchName"), ("PDU2-MIB", "transferSwitchPreferredInlet"), ("PDU2-MIB", "transferSwitchPoleCount"), ("PDU2-MIB", "transferSwitchAutoReTransferEnabled"), ("PDU2-MIB", "transferSwitchAutoReTransferWaitTime"), ("PDU2-MIB", "transferSwitchAutoReTransferRequiresPhaseSync"), ("PDU2-MIB", "transferSwitchFrontPanelManualTransferButtonEnabled"), ("PDU2-MIB", "transferSwitchCapabilities"), ("PDU2-MIB", "transferSwitchPoleLine"), ("PDU2-MIB", "transferSwitchPoleIn1Node"), ("PDU2-MIB", "transferSwitchPoleIn2Node"), ("PDU2-MIB", "transferSwitchPoleOutNode"), ("PDU2-MIB", "transferSwitchSensorLogAvailable"), ("PDU2-MIB", "transferSwitchSensorUnits"), ("PDU2-MIB", "transferSwitchSensorDecimalDigits"), ("PDU2-MIB", "transferSwitchSensorResolution"), ("PDU2-MIB", "transferSwitchSensorMaximum"), ("PDU2-MIB", "transferSwitchSensorMinimum"), ("PDU2-MIB", "transferSwitchSensorHysteresis"), ("PDU2-MIB", "transferSwitchSensorStateChangeDelay")], [("PDU2-MIB", "transferSwitchSensorLowerCriticalThreshold"), ("PDU2-MIB", "transferSwitchSensorLowerWarningThreshold"), ("PDU2-MIB", "transferSwitchSensorUpperCriticalThreshold"), ("PDU2-MIB", "transferSwitchSensorUpperWarningThreshold"), ("PDU2-MIB", "transferSwitchSensorEnabledThresholds"), ("PDU2-MIB", "transferSwitchSensorSignedMaximum"), ("PDU2-MIB", "transferSwitchSensorSignedMinimum"), ("PDU2-MIB", "transferSwitchSensorSignedLowerCriticalThreshold"), ("PDU2-MIB", "transferSwitchSensorSignedLowerWarningThreshold"), ("PDU2-MIB", "transferSwitchSensorSignedUpperCriticalThreshold"), ("PDU2-MIB", "transferSwitchSensorSignedUpperWarningThreshold"), ("PDU2-MIB", "transferSwitchPowerSource1"), ("PDU2-MIB", "transferSwitchPowerSource2"), ("PDU2-MIB", "peripheralDevicePackageSerialNumber"), ("PDU2-MIB", "peripheralDevicePackageModel"), ("PDU2-MIB", "peripheralDevicePackageFirmwareVersion"), ("PDU2-MIB", "peripheralDevicePackageMinFirmwareVersion"), ("PDU2-MIB", "peripheralDevicePackageFirmwareTimeStamp"), ("PDU2-MIB", "peripheralDevicePackagePosition"), ("PDU2-MIB", "peripheralDevicePackageState"), ("PDU2-MIB", "deviceCascadeType"), ("PDU2-MIB", "deviceCascadePosition"), ("PDU2-MIB", "peripheralDevicesAutoManagement"), ("PDU2-MIB", "externalSensorAlarmedToNormalDelay"), ("PDU2-MIB", "frontPanelOutletSwitching"), ("PDU2-MIB", "frontPanelRCMSelfTest"), ("PDU2-MIB", "frontPanelActuatorControl"), ("PDU2-MIB", "powerMeterPanelPositions"), ("PDU2-MIB", "powerMeterPanelLayout"), ("PDU2-MIB", "powerMeterPanelNumbering"), ("PDU2-MIB", "powerMeterPhaseCTRating"), ("PDU2-MIB", "powerMeterNeutralCTRating"), ("PDU2-MIB", "powerMeterEarthCTRating"), ("PDU2-MIB", "powerMeterBranchCount"), ("PDU2-MIB", "powerMeterType"), ("PDU2-MIB", "circuitPoleCount"), ("PDU2-MIB", "circuitName"), ("PDU2-MIB", "circuitType"), ("PDU2-MIB", "circuitRatedCurrent"), ("PDU2-MIB", "circuitCTRating"), ("PDU2-MIB", "circuitCapabilities"), ("PDU2-MIB", "circuitPoleCapabilities"), ("PDU2-MIB", "circuitPowerSource"), ("PDU2-MIB", "circuitPolePanelPosition"), ("PDU2-MIB", "circuitPoleCTNumber"), ("PDU2-MIB", "circuitPolePhase"), ("PDU2-MIB", "circuitSensorLogAvailable"), ("PDU2-MIB", "circuitSensorUnits"), ("PDU2-MIB", "circuitSensorDecimalDigits"), ("PDU2-MIB", "circuitSensorResolution"), ("PDU2-MIB", "circuitSensorMaximum"), ("PDU2-MIB", "circuitSensorMinimum"), ("PDU2-MIB", "circuitSensorHysteresis"), ("PDU2-MIB", "circuitSensorStateChangeDelay"), ("PDU2-MIB", "circuitSensorLowerCriticalThreshold"), ("PDU2-MIB", "circuitSensorLowerWarningThreshold"), ("PDU2-MIB", "circuitSensorUpperCriticalThreshold"), ("PDU2-MIB", "circuitSensorUpperWarningThreshold"), ("PDU2-MIB", "circuitSensorEnabledThresholds"), ("PDU2-MIB", "circuitSensorSignedMaximum"), ("PDU2-MIB", "circuitSensorSignedMinimum"), ("PDU2-MIB", "circuitSensorSignedLowerCriticalThreshold"), ("PDU2-MIB", "circuitSensorSignedLowerWarningThreshold"), ("PDU2-MIB", "circuitSensorSignedUpperCriticalThreshold"), ("PDU2-MIB", "circuitSensorSignedUpperWarningThreshold"), ("PDU2-MIB", "circuitPoleSensorLogAvailable"), ("PDU2-MIB", "circuitPoleSensorUnits"), ("PDU2-MIB", "circuitPoleSensorDecimalDigits"), ("PDU2-MIB", "circuitPoleSensorResolution"), ("PDU2-MIB", "circuitPoleSensorMaximum"), ("PDU2-MIB", "circuitPoleSensorMinimum"), ("PDU2-MIB", "circuitPoleSensorHysteresis"), ("PDU2-MIB", "circuitPoleSensorStateChangeDelay"), ("PDU2-MIB", "circuitPoleSensorLowerCriticalThreshold"), ("PDU2-MIB", "circuitPoleSensorLowerWarningThreshold"), ("PDU2-MIB", "circuitPoleSensorUpperCriticalThreshold"), ("PDU2-MIB", "circuitPoleSensorUpperWarningThreshold"), ("PDU2-MIB", "circuitPoleSensorEnabledThresholds"), ("PDU2-MIB", "circuitPoleSensorSignedMaximum"), ("PDU2-MIB", "circuitPoleSensorSignedMinimum"), ("PDU2-MIB", "circuitPoleSensorSignedLowerCriticalThreshold"), ("PDU2-MIB", "circuitPoleSensorSignedLowerWarningThreshold"), ("PDU2-MIB", "circuitPoleSensorSignedUpperCriticalThreshold"), ("PDU2-MIB", "circuitPoleSensorSignedUpperWarningThreshold"), ("PDU2-MIB", "activeDNSServerAddressType"), ("PDU2-MIB", "activeDNSServerAddress"), ("PDU2-MIB", "activeDNSServerCount"), ("PDU2-MIB", "activeNTPServerAddressType"), ("PDU2-MIB", "activeNTPServerAddress"), ("PDU2-MIB", "activeNTPServerCount")]]:
    if getattr(mibBuilder, 'version', 0) < (4, 4, 2):
        # WARNING: leading objects get lost here!
        configGroup = configGroup.setObjects(*_configGroup_obj)
    else:
        configGroup = configGroup.setObjects(*_configGroup_obj, **dict(append=True))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    configGroup = configGroup.setStatus('current')
if mibBuilder.loadTexts: configGroup.setDescription('A collection of objects representing configuration data.')
ipAddressGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 13742, 6, 9, 2, 12)).setObjects(("PDU2-MIB", "pxIPAddress"), ("PDU2-MIB", "netmask"), ("PDU2-MIB", "gateway"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "pxInetNetmask"), ("PDU2-MIB", "pxInetGateway"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipAddressGroup = ipAddressGroup.setStatus('deprecated')
if mibBuilder.loadTexts: ipAddressGroup.setDescription('A collection of objects representing configuration data.')
obsoleteObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 13742, 6, 9, 2, 20)).setObjects(("PDU2-MIB", "useDHCPProvidedNTPServer"), ("PDU2-MIB", "inletRCMResidualOperatingCurrent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    obsoleteObjectsGroup = obsoleteObjectsGroup.setStatus('obsolete')
if mibBuilder.loadTexts: obsoleteObjectsGroup.setDescription('A collection of obsolete objects.')
oldConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 13742, 6, 9, 2, 13)).setObjects(("PDU2-MIB", "outletSequencingDelay"), ("PDU2-MIB", "unitSensorAccuracy"), ("PDU2-MIB", "unitSensorTolerance"), ("PDU2-MIB", "inletSensorAccuracy"), ("PDU2-MIB", "inletSensorTolerance"), ("PDU2-MIB", "inletPoleSensorAccuracy"), ("PDU2-MIB", "inletPoleSensorTolerance"), ("PDU2-MIB", "outletSensorAccuracy"), ("PDU2-MIB", "outletSensorTolerance"), ("PDU2-MIB", "outletPoleSensorAccuracy"), ("PDU2-MIB", "outletPoleSensorTolerance"), ("PDU2-MIB", "overCurrentProtectorSensorAccuracy"), ("PDU2-MIB", "overCurrentProtectorSensorTolerance"), ("PDU2-MIB", "externalSensorAccuracy"), ("PDU2-MIB", "externalSensorTolerance"), ("PDU2-MIB", "wireSensorAccuracy"), ("PDU2-MIB", "wireSensorTolerance"), ("PDU2-MIB", "transferSwitchSensorAccuracy"), ("PDU2-MIB", "transferSwitchSensorTolerance"), ("PDU2-MIB", "wireCount"), ("PDU2-MIB", "wireLabel"), ("PDU2-MIB", "wireCapabilities"), ("PDU2-MIB", "wireSensorLogAvailable"), ("PDU2-MIB", "wireSensorUnits"), ("PDU2-MIB", "wireSensorDecimalDigits"), ("PDU2-MIB", "wireSensorResolution"), ("PDU2-MIB", "wireSensorMaximum"), ("PDU2-MIB", "wireSensorMinimum"), ("PDU2-MIB", "wireSensorHysteresis"), ("PDU2-MIB", "wireSensorStateChangeDelay"), ("PDU2-MIB", "wireSensorLowerCriticalThreshold"), ("PDU2-MIB", "wireSensorLowerWarningThreshold"), ("PDU2-MIB", "wireSensorUpperCriticalThreshold"), ("PDU2-MIB", "wireSensorUpperWarningThreshold"), ("PDU2-MIB", "wireSensorEnabledThresholds"), ("PDU2-MIB", "wirePowerSource"), ("PDU2-MIB", "inletRatedFrequency"), ("PDU2-MIB", "inletRatedVA"), ("PDU2-MIB", "pxMACAddress"), ("PDU2-MIB", "networkInterfaceType"), ("PDU2-MIB", "activeDNSServerAddressSource"), ("PDU2-MIB", "activeNTPServerAddressSource"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    oldConfigGroup = oldConfigGroup.setStatus('deprecated')
if mibBuilder.loadTexts: oldConfigGroup.setDescription('A collection of objects representing old (deprecated) configuration data.')
logGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 13742, 6, 9, 2, 2)).setObjects(("PDU2-MIB", "dataLogging"), ("PDU2-MIB", "oldestLogID"), ("PDU2-MIB", "newestLogID"), ("PDU2-MIB", "logTimeStamp"), ("PDU2-MIB", "dataLoggingEnableForAllSensors"), ("PDU2-MIB", "logUnitSensorDataAvailable"), ("PDU2-MIB", "logUnitSensorState"), ("PDU2-MIB", "logUnitSensorAvgValue"), ("PDU2-MIB", "logUnitSensorMaxValue"), ("PDU2-MIB", "logUnitSensorMinValue"), ("PDU2-MIB", "logUnitSensorSignedAvgValue"), ("PDU2-MIB", "logUnitSensorSignedMaxValue"), ("PDU2-MIB", "logUnitSensorSignedMinValue"), ("PDU2-MIB", "logInletSensorDataAvailable"), ("PDU2-MIB", "logInletSensorState"), ("PDU2-MIB", "logInletSensorAvgValue"), ("PDU2-MIB", "logInletSensorMaxValue"), ("PDU2-MIB", "logInletSensorMinValue"), ("PDU2-MIB", "logInletSensorSignedAvgValue"), ("PDU2-MIB", "logInletSensorSignedMaxValue"), ("PDU2-MIB", "logInletSensorSignedMinValue"), ("PDU2-MIB", "logInletPoleSensorDataAvailable"), ("PDU2-MIB", "logInletPoleSensorState"), ("PDU2-MIB", "logInletPoleSensorAvgValue"), ("PDU2-MIB", "logInletPoleSensorMaxValue"), ("PDU2-MIB", "logInletPoleSensorMinValue"), ("PDU2-MIB", "logInletPoleSensorSignedAvgValue"), ("PDU2-MIB", "logInletPoleSensorSignedMaxValue"), ("PDU2-MIB", "logInletPoleSensorSignedMinValue"), ("PDU2-MIB", "logOutletSensorDataAvailable"), ("PDU2-MIB", "logOutletSensorState"), ("PDU2-MIB", "logOutletSensorAvgValue"), ("PDU2-MIB", "logOutletSensorMaxValue"), ("PDU2-MIB", "logOutletSensorMinValue"), ("PDU2-MIB", "logOutletSensorSignedAvgValue"), ("PDU2-MIB", "logOutletSensorSignedMaxValue"), ("PDU2-MIB", "logOutletSensorSignedMinValue"), ("PDU2-MIB", "logOutletPoleSensorDataAvailable"), ("PDU2-MIB", "logOutletPoleSensorState"), ("PDU2-MIB", "logOutletPoleSensorAvgValue"), ("PDU2-MIB", "logOutletPoleSensorMaxValue"), ("PDU2-MIB", "logOutletPoleSensorMinValue"), ("PDU2-MIB", "logOutletPoleSensorSignedAvgValue"), ("PDU2-MIB", "logOutletPoleSensorSignedMaxValue"), ("PDU2-MIB", "logOutletPoleSensorSignedMinValue"), ("PDU2-MIB", "logOverCurrentProtectorSensorDataAvailable"), ("PDU2-MIB", "logOverCurrentProtectorSensorState"), ("PDU2-MIB", "logOverCurrentProtectorSensorAvgValue"), ("PDU2-MIB", "logOverCurrentProtectorSensorMaxValue"), ("PDU2-MIB", "logOverCurrentProtectorSensorMinValue"), ("PDU2-MIB", "logOverCurrentProtectorSensorSignedAvgValue"), ("PDU2-MIB", "logOverCurrentProtectorSensorSignedMaxValue"), ("PDU2-MIB", "logOverCurrentProtectorSensorSignedMinValue"), ("PDU2-MIB", "logExternalSensorDataAvailable"), ("PDU2-MIB", "logExternalSensorState"), ("PDU2-MIB", "logExternalSensorAvgValue"), ("PDU2-MIB", "logExternalSensorMaxValue"), ("PDU2-MIB", "logExternalSensorMinValue"), ("PDU2-MIB", "logTransferSwitchSensorDataAvailable"), ("PDU2-MIB", "logTransferSwitchSensorState"), ("PDU2-MIB", "logTransferSwitchSensorAvgValue"), ("PDU2-MIB", "logTransferSwitchSensorMaxValue"), ("PDU2-MIB", "logTransferSwitchSensorMinValue"), ("PDU2-MIB", "logTransferSwitchSensorSignedAvgValue"), ("PDU2-MIB", "logTransferSwitchSensorSignedMaxValue"), ("PDU2-MIB", "logTransferSwitchSensorSignedMinValue"), ("PDU2-MIB", "logCircuitSensorDataAvailable"), ("PDU2-MIB", "logCircuitSensorState"), ("PDU2-MIB", "logCircuitSensorAvgValue"), ("PDU2-MIB", "logCircuitSensorMaxValue"), ("PDU2-MIB", "logCircuitSensorMinValue"), ("PDU2-MIB", "logCircuitSensorSignedAvgValue"), ("PDU2-MIB", "logCircuitSensorSignedMaxValue"), ("PDU2-MIB", "logCircuitSensorSignedMinValue"), ("PDU2-MIB", "logCircuitPoleSensorDataAvailable"), ("PDU2-MIB", "logCircuitPoleSensorState"), ("PDU2-MIB", "logCircuitPoleSensorAvgValue"), ("PDU2-MIB", "logCircuitPoleSensorMaxValue"), ("PDU2-MIB", "logCircuitPoleSensorMinValue"), ("PDU2-MIB", "logCircuitPoleSensorSignedAvgValue"), ("PDU2-MIB", "logCircuitPoleSensorSignedMaxValue"), ("PDU2-MIB", "logCircuitPoleSensorSignedMinValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    logGroup = logGroup.setStatus('current')
if mibBuilder.loadTexts: logGroup.setDescription('A collection of objects providing logging (history of readings) capabilities\n            about the PDU.')
oldLogGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 13742, 6, 9, 2, 14)).setObjects(("PDU2-MIB", "logWireSensorDataAvailable"), ("PDU2-MIB", "logWireSensorState"), ("PDU2-MIB", "logWireSensorAvgValue"), ("PDU2-MIB", "logWireSensorMaxValue"), ("PDU2-MIB", "logWireSensorMinValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    oldLogGroup = oldLogGroup.setStatus('deprecated')
if mibBuilder.loadTexts: oldLogGroup.setDescription('A collection of objects representing old (deprecated) logging data.')
measurementsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 13742, 6, 9, 2, 3)).setObjects(("PDU2-MIB", "measurementsUnitSensorIsAvailable"), ("PDU2-MIB", "measurementsUnitSensorState"), ("PDU2-MIB", "measurementsUnitSensorValue"), ("PDU2-MIB", "measurementsUnitSensorTimeStamp"), ("PDU2-MIB", "measurementsUnitSensorSignedValue"), ("PDU2-MIB", "measurementsInletSensorIsAvailable"), ("PDU2-MIB", "measurementsInletSensorState"), ("PDU2-MIB", "measurementsInletSensorValue"), ("PDU2-MIB", "measurementsInletSensorTimeStamp"), ("PDU2-MIB", "measurementsInletSensorSignedValue"), ("PDU2-MIB", "measurementsInletPoleSensorIsAvailable"), ("PDU2-MIB", "measurementsInletPoleSensorState"), ("PDU2-MIB", "measurementsInletPoleSensorValue"), ("PDU2-MIB", "measurementsInletPoleSensorTimeStamp"), ("PDU2-MIB", "measurementsInletPoleSensorSignedValue"), ("PDU2-MIB", "measurementsOutletSensorIsAvailable"), ("PDU2-MIB", "measurementsOutletSensorState"), ("PDU2-MIB", "measurementsOutletSensorValue"), ("PDU2-MIB", "measurementsOutletSensorTimeStamp"), ("PDU2-MIB", "measurementsOutletSensorSignedValue"), ("PDU2-MIB", "measurementsOutletPoleSensorIsAvailable"), ("PDU2-MIB", "measurementsOutletPoleSensorState"), ("PDU2-MIB", "measurementsOutletPoleSensorValue"), ("PDU2-MIB", "measurementsOutletPoleSensorTimeStamp"), ("PDU2-MIB", "measurementsOutletPoleSensorSignedValue"), ("PDU2-MIB", "measurementsOverCurrentProtectorSensorIsAvailable"), ("PDU2-MIB", "measurementsOverCurrentProtectorSensorState"), ("PDU2-MIB", "measurementsOverCurrentProtectorSensorValue"), ("PDU2-MIB", "measurementsOverCurrentProtectorSensorTimeStamp"), ("PDU2-MIB", "measurementsOverCurrentProtectorSensorSignedValue"), ("PDU2-MIB", "measurementsExternalSensorIsAvailable"), ("PDU2-MIB", "measurementsExternalSensorState"), ("PDU2-MIB", "measurementsExternalSensorValue"), ("PDU2-MIB", "measurementsExternalSensorTimeStamp"), ("PDU2-MIB", "measurementsTransferSwitchSensorIsAvailable"), ("PDU2-MIB", "measurementsTransferSwitchSensorState"), ("PDU2-MIB", "measurementsTransferSwitchSensorValue"), ("PDU2-MIB", "measurementsTransferSwitchSensorTimeStamp"), ("PDU2-MIB", "measurementsTransferSwitchSensorSignedValue"), ("PDU2-MIB", "measurementsCircuitSensorIsAvailable"), ("PDU2-MIB", "measurementsCircuitSensorState"), ("PDU2-MIB", "measurementsCircuitSensorValue"), ("PDU2-MIB", "measurementsCircuitSensorTimeStamp"), ("PDU2-MIB", "measurementsCircuitSensorSignedValue"), ("PDU2-MIB", "measurementsCircuitPoleSensorIsAvailable"), ("PDU2-MIB", "measurementsCircuitPoleSensorState"), ("PDU2-MIB", "measurementsCircuitPoleSensorValue"), ("PDU2-MIB", "measurementsCircuitPoleSensorTimeStamp"), ("PDU2-MIB", "measurementsCircuitPoleSensorSignedValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    measurementsGroup = measurementsGroup.setStatus('current')
if mibBuilder.loadTexts: measurementsGroup.setDescription('A collection of objects providing measurements (most recent data) capabilities.\n            about the PDU.')
oldMeasurementsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 13742, 6, 9, 2, 15)).setObjects(("PDU2-MIB", "measurementsWireSensorIsAvailable"), ("PDU2-MIB", "measurementsWireSensorState"), ("PDU2-MIB", "measurementsWireSensorValue"), ("PDU2-MIB", "measurementsWireSensorTimeStamp"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    oldMeasurementsGroup = oldMeasurementsGroup.setStatus('deprecated')
if mibBuilder.loadTexts: oldMeasurementsGroup.setDescription('A collection of objects representing old (deprecated) measurement data.')
controlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 13742, 6, 9, 2, 4)).setObjects(("PDU2-MIB", "switchingOperation"), ("PDU2-MIB", "outletSwitchingState"), ("PDU2-MIB", "outletSwitchingTimeStamp"), ("PDU2-MIB", "transferSwitchActiveInlet"), ("PDU2-MIB", "transferSwitchTransferToInlet"), ("PDU2-MIB", "transferSwitchAlarmOverride"), ("PDU2-MIB", "transferSwitchLastTransferReason"), ("PDU2-MIB", "actuatorState"), ("PDU2-MIB", "rcmState"), ("PDU2-MIB", "inletSensorResetValue"), ("PDU2-MIB", "outletSensorResetValue"), ("PDU2-MIB", "unitSensorResetValue"), ("PDU2-MIB", "circuitSensorResetValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    controlGroup = controlGroup.setStatus('current')
if mibBuilder.loadTexts: controlGroup.setDescription('A collection of objects providing the ability to control various components\n            of a PDU.')
trapInformationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 13742, 6, 9, 2, 5)).setObjects(("PDU2-MIB", "userName"), ("PDU2-MIB", "targetUser"), ("PDU2-MIB", "imageVersion"), ("PDU2-MIB", "roleName"), ("PDU2-MIB", "oldSensorState"), ("PDU2-MIB", "pduNumber"), ("PDU2-MIB", "inletPoleNumber"), ("PDU2-MIB", "outletPoleNumber"), ("PDU2-MIB", "externalSensorNumber"), ("PDU2-MIB", "typeOfSensor"), ("PDU2-MIB", "smtpMessageRecipients"), ("PDU2-MIB", "smtpServer"), ("PDU2-MIB", "errorDescription"), ("PDU2-MIB", "deviceChangedParameter"), ("PDU2-MIB", "changedParameterNewValue"), ("PDU2-MIB", "lhxSupportEnabled"), ("PDU2-MIB", "webcamModel"), ("PDU2-MIB", "webcamConnectionPort"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "peripheralDeviceRomcode"), ("PDU2-MIB", "peripheralDeviceFirmwareUpdateState"), ("PDU2-MIB", "circuitNumber"), ("PDU2-MIB", "circuitPoleNumber"), ("PDU2-MIB", "phoneNumber"), ("PDU2-MIB", "smartCardReaderId"), ("PDU2-MIB", "smartCardTimestamp"), ("PDU2-MIB", "smartCardType"), ("PDU2-MIB", "smartCardId"), ("PDU2-MIB", "suspectedTripCauseLabel"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    trapInformationGroup = trapInformationGroup.setStatus('current')
if mibBuilder.loadTexts: trapInformationGroup.setDescription('A collection of objects providing information in the traps.')
trapsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 13742, 6, 9, 2, 9)).setObjects(("PDU2-MIB", "systemStarted"), ("PDU2-MIB", "systemReset"), ("PDU2-MIB", "userLogin"), ("PDU2-MIB", "userLogout"), ("PDU2-MIB", "userAuthenticationFailure"), ("PDU2-MIB", "userSessionTimeout"), ("PDU2-MIB", "userAdded"), ("PDU2-MIB", "userModified"), ("PDU2-MIB", "userDeleted"), ("PDU2-MIB", "roleAdded"), ("PDU2-MIB", "roleModified"), ("PDU2-MIB", "roleDeleted"), ("PDU2-MIB", "deviceUpdateStarted"), ("PDU2-MIB", "deviceUpdateCompleted"), ("PDU2-MIB", "userBlocked"), ("PDU2-MIB", "powerControl"), ("PDU2-MIB", "userPasswordChanged"), ("PDU2-MIB", "passwordSettingsChanged"), ("PDU2-MIB", "firmwareValidationFailed"), ("PDU2-MIB", "logFileCleared"), ("PDU2-MIB", "bulkConfigurationSaved"), ("PDU2-MIB", "bulkConfigurationCopied"), ("PDU2-MIB", "inletSensorStateChange"), ("PDU2-MIB", "inletPoleSensorStateChange"), ("PDU2-MIB", "outletSensorStateChange"), ("PDU2-MIB", "outletPoleSensorStateChange"), ("PDU2-MIB", "overCurrentProtectorSensorStateChange"), ("PDU2-MIB", "externalSensorStateChange"), ("PDU2-MIB", "smtpMessageTransmissionFailure"), ("PDU2-MIB", "ldapError"), ("PDU2-MIB", "deviceUpdateFailed"), ("PDU2-MIB", "loadSheddingModeEntered"), ("PDU2-MIB", "loadSheddingModeExited"), ("PDU2-MIB", "pingServerEnabled"), ("PDU2-MIB", "pingServerDisabled"), ("PDU2-MIB", "serverNotReachable"), ("PDU2-MIB", "serverReachable"), ("PDU2-MIB", "deviceIdentificationChanged"), ("PDU2-MIB", "usbSlaveConnected"), ("PDU2-MIB", "usbSlaveDisconnected"), ("PDU2-MIB", "lhxSupportChanged"), ("PDU2-MIB", "userAcceptedRestrictedServiceAgreement"), ("PDU2-MIB", "userDeclinedRestrictedServiceAgreement"), ("PDU2-MIB", "transferSwitchSensorStateChange"), ("PDU2-MIB", "deviceSettingsSaved"), ("PDU2-MIB", "deviceSettingsRestored"), ("PDU2-MIB", "webcamInserted"), ("PDU2-MIB", "webcamRemoved"), ("PDU2-MIB", "inletEnabled"), ("PDU2-MIB", "inletDisabled"), ("PDU2-MIB", "serverConnectivityUnrecoverable"), ("PDU2-MIB", "radiusError"), ("PDU2-MIB", "serverReachabilityError"), ("PDU2-MIB", "inletSensorReset"), ("PDU2-MIB", "outletSensorReset"), ("PDU2-MIB", "unitSensorReset"), ("PDU2-MIB", "circuitSensorReset"), ("PDU2-MIB", "unknownPeripheralDeviceAttached"), ("PDU2-MIB", "peripheralDeviceFirmwareUpdate"), ("PDU2-MIB", "unitSensorStateChange"), ("PDU2-MIB", "circuitSensorStateChange"), ("PDU2-MIB", "circuitPoleSensorStateChange"), ("PDU2-MIB", "circuitAdded"), ("PDU2-MIB", "circuitDeleted"), ("PDU2-MIB", "circuitModified"), ("PDU2-MIB", "powerMeterAdded"), ("PDU2-MIB", "powerMeterDeleted"), ("PDU2-MIB", "powerMeterModified"), ("PDU2-MIB", "smsMessageTransmissionFailure"), ("PDU2-MIB", "smartCardInserted"), ("PDU2-MIB", "smartCardRemoved"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    trapsGroup = trapsGroup.setStatus('current')
if mibBuilder.loadTexts: trapsGroup.setDescription('A collection of traps.')
oldTrapsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 13742, 6, 9, 2, 16)).setObjects(("PDU2-MIB", "wireSensorStateChange"), ("PDU2-MIB", "pduSensorStateChange"), ("PDU2-MIB", "rfCodeTagConnected"), ("PDU2-MIB", "rfCodeTagDisconnected"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    oldTrapsGroup = oldTrapsGroup.setStatus('deprecated')
if mibBuilder.loadTexts: oldTrapsGroup.setDescription('A collection of objects representing old (deprecated) traps.')
reliabilityGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 13742, 6, 9, 2, 10)).setObjects(("PDU2-MIB", "reliabilityId"), ("PDU2-MIB", "reliabilityDataValue"), ("PDU2-MIB", "reliabilityDataMaxPossible"), ("PDU2-MIB", "reliabilityDataWorstValue"), ("PDU2-MIB", "reliabilityDataThreshold"), ("PDU2-MIB", "reliabilityDataRawUpperBytes"), ("PDU2-MIB", "reliabilityDataRawLowerBytes"), ("PDU2-MIB", "reliabilityDataFlags"), ("PDU2-MIB", "reliabilityErrorLogId"), ("PDU2-MIB", "reliabilityErrorLogValue"), ("PDU2-MIB", "reliabilityErrorLogThreshold"), ("PDU2-MIB", "reliabilityErrorLogRawUpperBytes"), ("PDU2-MIB", "reliabilityErrorLogRawLowerBytes"), ("PDU2-MIB", "reliabilityErrorLogPOH"), ("PDU2-MIB", "reliabilityErrorLogTime"), ("PDU2-MIB", "reliabilityDataTableSequenceNumber"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    reliabilityGroup = reliabilityGroup.setStatus('current')
if mibBuilder.loadTexts: reliabilityGroup.setDescription('A collection of objects providing reliability data.')
class SensorTypeEnumeration(TextualConvention, Integer32):
    description = 'The types a sensor can be.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50))
    namedValues = NamedValues(("rmsCurrent", 1), ("peakCurrent", 2), ("unbalancedCurrent", 3), ("rmsVoltage", 4), ("activePower", 5), ("apparentPower", 6), ("powerFactor", 7), ("activeEnergy", 8), ("apparentEnergy", 9), ("temperature", 10), ("humidity", 11), ("airFlow", 12), ("airPressure", 13), ("onOff", 14), ("trip", 15), ("vibration", 16), ("waterDetection", 17), ("smokeDetection", 18), ("binary", 19), ("contact", 20), ("fanSpeed", 21), ("surgeProtectorStatus", 22), ("frequency", 23), ("phaseAngle", 24), ("rmsVoltageLN", 25), ("residualCurrent", 26), ("rcmState", 27), ("absoluteHumidity", 28), ("reactivePower", 29), ("other", 30), ("none", 31), ("powerQuality", 32), ("overloadStatus", 33), ("overheatStatus", 34), ("displacementPowerFactor", 35), ("fanStatus", 37), ("inletPhaseSyncAngle", 38), ("inletPhaseSync", 39), ("operatingState", 40), ("activeInlet", 41), ("illuminance", 42), ("doorContact", 43), ("tamperDetection", 44), ("motionDetection", 45), ("i1smpsStatus", 46), ("i2smpsStatus", 47), ("switchStatus", 48), ("doorLockState", 49), ("doorHandleLock", 50))

class SensorStateEnumeration(TextualConvention, Integer32):
    description = 'The states a sensor can be in.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30))
    namedValues = NamedValues(("unavailable", -1), ("open", 0), ("closed", 1), ("belowLowerCritical", 2), ("belowLowerWarning", 3), ("normal", 4), ("aboveUpperWarning", 5), ("aboveUpperCritical", 6), ("on", 7), ("off", 8), ("detected", 9), ("notDetected", 10), ("alarmed", 11), ("ok", 12), ("fail", 14), ("yes", 15), ("no", 16), ("standby", 17), ("one", 18), ("two", 19), ("inSync", 20), ("outOfSync", 21), ("i1OpenFault", 22), ("i1ShortFault", 23), ("i2OpenFault", 24), ("i2ShortFault", 25), ("fault", 26), ("warning", 27), ("critical", 28), ("selfTest", 29), ("nonRedundant", 30))

class PlugTypeEnumeration(TextualConvention, Integer32):
    description = 'The types of inlet plug.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49))
    namedValues = NamedValues(("plugOTHER", -1), ("plugNONE", 0), ("plug56P320", 1), ("plug56P520", 2), ("plug56P532", 3), ("plugCS8365C", 4), ("plugIEC320C14", 5), ("plugIEC320C20", 6), ("plugIEC603093WIRE250V16A", 7), ("plugIEC603093WIRE250V20A", 8), ("plugIEC603093WIRE250V30A", 9), ("plugIEC603093WIRE250V32A", 10), ("plugIEC603093WIRE250V60A", 11), ("plugIEC603093WIRE250V63A", 12), ("plugIEC603093WIRE250V100A", 13), ("plugIEC603093WIRE250V125A", 14), ("plugIEC603094WIRE250V20A", 15), ("plugIEC603094WIRE250V30A", 16), ("plugIEC603094WIRE250V60A", 17), ("plugIEC603094WIRE250V100A", 18), ("plugIEC603095WIRE208V20A", 23), ("plugIEC603095WIRE208V30A", 24), ("plugIEC603095WIRE208V60A", 25), ("plugIEC603095WIRE208V100A", 26), ("plugIEC603095WIRE415V16A", 27), ("plugIEC603095WIRE415V32A", 28), ("plugIEC603095WIRE415V63A", 29), ("plugIEC603095WIRE415V125A", 30), ("plugIEC603095WIRE480V20A", 31), ("plugIEC603095WIRE480V30A", 32), ("plugIEC603095WIRE480V60A", 33), ("plugIEC603095WIRE480V100A", 34), ("plugNEMA515P", 35), ("plugNEMAL515P", 36), ("plugNEMA520P", 37), ("plugNEMAL520P", 38), ("plugNEMAL530P", 39), ("plugNEMAL615P", 40), ("plugNEMAL620P", 41), ("plugNEMAL630P", 42), ("plugNEMAL1520P", 43), ("plugNEMAL1530P", 44), ("plugNEMAL2120P", 45), ("plugNEMAL2130P", 46), ("plugNEMAL2230P", 47), ("plug56P320F", 48), ("plug56PA320", 49))

class ReceptacleTypeEnumeration(TextualConvention, Integer32):
    description = 'The types of outlet receptacle.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48))
    namedValues = NamedValues(("receptacleOTHER", -1), ("receptacleNONE", 0), ("receptacleBS1363", 1), ("receptacle56P532", 3), ("receptacleCS8364C", 4), ("receptacleIEC320C13", 5), ("receptacleIEC320C19", 6), ("receptacleIEC603093WIRE250V16A", 7), ("receptacleIEC603093WIRE250V20A", 8), ("receptacleIEC603093WIRE250V30A", 9), ("receptacleIEC603093WIRE250V32A", 10), ("receptacleIEC603093WIRE250V60A", 11), ("receptacleIEC603093WIRE250V63A", 12), ("receptacleIEC603093WIRE250V100A", 13), ("receptacleIEC603093WIRE250V125A", 14), ("receptacleIEC603094WIRE250V20A", 15), ("receptacleIEC603094WIRE250V30A", 16), ("receptacleIEC603094WIRE250V60A", 17), ("receptacleIEC603094WIRE250V100A", 18), ("receptacleIEC603095WIRE208V20A", 23), ("receptacleIEC603095WIRE208V30A", 24), ("receptacleIEC603095WIRE208V60A", 25), ("receptacleIEC603095WIRE208V100A", 26), ("receptacleIEC603095WIRE415V16A", 27), ("receptacleIEC603095WIRE415V32A", 28), ("receptacleIEC603095WIRE415V63A", 29), ("receptacleIEC603095WIRE415V125A", 30), ("receptacleIEC603095WIRE480V20A", 31), ("receptacleIEC603095WIRE480V30A", 32), ("receptacleIEC603095WIRE480V60A", 33), ("receptacleIEC603095WIRE480V100A", 34), ("receptacleNEMA515R", 35), ("receptacleNEMAL515R", 36), ("receptacleNEMA520R", 37), ("receptacleNEMAL520R", 38), ("receptacleNEMAL530R", 39), ("receptacleNEMAL615R", 40), ("receptacleNEMAL620R", 41), ("receptacleNEMAL630R", 42), ("receptacleNEMAL1520R", 43), ("receptacleNEMAL1530R", 44), ("receptacleNEMAL2120RP", 45), ("receptacleNEMAL2130R", 46), ("receptacleSCHUKOTYPEE", 47), ("receptacleSCHUKOTYPEF", 48))

class OverCurrentProtectorTypeEnumeration(TextualConvention, Integer32):
    description = 'The types of overcurrent protectors.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("ocpBREAKER1POLE", 1), ("ocpBREAKER2POLE", 2), ("ocpBREAKER3POLE", 3), ("ocpFUSE", 4), ("ocpFUSEPAIR", 5), ("ocpRCBO2POLE", 6), ("ocpRCBO3POLE", 7), ("ocpRCBO4POLE", 8))

class BoardTypeEnumeration(TextualConvention, Integer32):
    description = 'The types of boards.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("mainController", 1), ("inletController", 2), ("outletController", 3), ("meteringController", 4))

class OutletSwitchingOperationsEnumeration(TextualConvention, Integer32):
    description = 'The switching operations on an outlet.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("off", 0), ("on", 1), ("cycle", 2))

class SensorUnitsEnumeration(TextualConvention, Integer32):
    description = 'The sensor units.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23))
    namedValues = NamedValues(("none", -1), ("other", 0), ("volt", 1), ("amp", 2), ("watt", 3), ("voltamp", 4), ("wattHour", 5), ("voltampHour", 6), ("degreeC", 7), ("hertz", 8), ("percent", 9), ("meterpersec", 10), ("pascal", 11), ("psi", 12), ("g", 13), ("degreeF", 14), ("feet", 15), ("inches", 16), ("cm", 17), ("meters", 18), ("rpm", 19), ("degrees", 20), ("lux", 21), ("grampercubicmeter", 22), ("var", 23))

class DaisychainMemberTypeEnumeration(TextualConvention, Integer32):
    description = 'The daisy chain member type.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("standalone", 0), ("master", 1), ("slave", 2))

class URL(TextualConvention, OctetString):
    description = 'A Uniform Resource Locator (URL), as defined in RFC1738.'
    status = 'current'
    displayHint = '255a'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 255)

class GlobalOutletStateOnStartupEnumeration(TextualConvention, Integer32):
    description = 'The global outlet state on device start up; can be overridden per outlet.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("off", 0), ("on", 1), ("lastKnownState", 2))

class OutletStateOnStartupEnumeration(TextualConvention, Integer32):
    description = 'The outlet state on device start up; this overrides the global value.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("off", 0), ("on", 1), ("lastKnownState", 2), ("globalOutletStateOnStartup", 3))

class ExternalSensorsZCoordinateUnitsEnumeration(TextualConvention, Integer32):
    description = 'The units of the external sensor Z coordinate.\n            rackUnits implies that the Z coordinate for all external sensors\n            is in rack units (U)\n            text implies that the Z coordinate for all external sensors\n            is a text string (label)'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("rackUnits", 0), ("text", 1))

class HundredthsOfAPercentage(TextualConvention, Unsigned32):
    description = 'Data type for reporting values in hundredths of percentage, i.e. 0.01 %.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 10000)

class DeviceIdentificationParameterEnumeration(TextualConvention, Integer32):
    description = 'The configurable parameters.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("pduName", 0), ("sysContact", 1), ("sysName", 2), ("sysLocation", 3))

class TransferSwitchTransferReasonEnumeration(TextualConvention, Integer32):
    description = 'Transfer Switch Transfer Reason'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("unknown", 0), ("startup", 1), ("manualTransfer", 2), ("automaticReTransfer", 3), ("powerFailure", 4), ("powerQuality", 5), ("overloadAlarm", 6), ("overheatAlarm", 7), ("internalFailure", 8))

class ProductTypeEnumeration(TextualConvention, Integer32):
    description = 'The product types.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("rackPdu", 0), ("bcm", 1), ("transferSwitch", 2), ("powerMeter", 3))

class RelayPowerLossBehaviorEnumeration(TextualConvention, Integer32):
    description = 'The type of relay behavior on power loss.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("nonLatching", 0), ("latching", 1))

class DeviceCascadeTypeEnumeration(TextualConvention, Integer32):
    description = 'The type of configured cascading on this device.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("bridging", 0), ("portForwarding", 1), ("none", 2))

class PeripheralDeviceFirmwareUpdateStateEnumeration(TextualConvention, Integer32):
    description = 'The state of a peripheral device firmware update.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("started", 1), ("successful", 2), ("failed", 3))

class PanelLayoutEnumeration(TextualConvention, Integer32):
    description = 'The panel circuit position layout.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(-1, 1, 2))
    namedValues = NamedValues(("invalid", -1), ("oneColumn", 1), ("twoColumns", 2))

class PanelNumberingEnumeration(TextualConvention, Integer32):
    description = 'The panel circuit position numbering scheme.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(-1, 1, 2))
    namedValues = NamedValues(("invalid", -1), ("oddEven", 1), ("sequential", 2))

class CircuitTypeEnumeration(TextualConvention, Integer32):
    description = 'The panel circuit types.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("onePhaseLL", 1), ("onePhaseLN", 2), ("onePhaseLLN", 3), ("threePhase", 4))

class PhaseEnumeration(TextualConvention, Integer32):
    description = 'The power phase.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("phaseA", 1), ("phaseB", 2), ("phaseC", 3), ("neutral", 4), ("earth", 5))

class LineEnumeration(TextualConvention, Integer32):
    description = 'The Lines: L1, L2, L3, N.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("lineL1", 1), ("lineL2", 2), ("lineL3", 3), ("lineNeutral", 4))

class PowerMeterTypeEnumeration(TextualConvention, Integer32):
    description = 'The power meter types'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("singlePhase", 1), ("splitPhase", 2), ("threePhase", 3))

class NetworkInterfaceTypeEnumeration(TextualConvention, Integer32):
    description = 'The type of network interface.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("wired", 0), ("wireless", 1))

class AddressSourceEnumeration(TextualConvention, Integer32):
    description = 'How was the address obtained?'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("static", 1), ("dhcp", 2), ("dhcpv6", 3))

pduCount = MibScalar((1, 3, 6, 1, 4, 1, 13742, 6, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduCount.setStatus('current')
if mibBuilder.loadTexts: pduCount.setDescription('The number of PDUs managed by this MIB.\n\n            For PX2, PX3 and PX3TS, pduCount is always 1\n            For BCM2, pduCount is the number of power meters plus 1 (for the main controller)')
nameplateTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 1), )
if mibBuilder.loadTexts: nameplateTable.setStatus('current')
if mibBuilder.loadTexts: nameplateTable.setDescription('A list of PDU nameplate entries. The number of\n            entries is given by the value of pduCount.')
nameplateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 1, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"))
if mibBuilder.loadTexts: nameplateEntry.setStatus('current')
if mibBuilder.loadTexts: nameplateEntry.setDescription('An entry providing PDU nameplate information.')
pduId = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256)))
if mibBuilder.loadTexts: pduId.setStatus('current')
if mibBuilder.loadTexts: pduId.setDescription('A unique value for each PDU or power meter.\n\n            For PX2, PX3 and PX3TS, pduId  is always 1\n            For BCM2, pduId can be:\n                - 0 for the main controller\n                - The meter ID (rotary switch) for power meter')
pduManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduManufacturer.setStatus('current')
if mibBuilder.loadTexts: pduManufacturer.setDescription('The PDU manufacturer.')
pduModel = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduModel.setStatus('current')
if mibBuilder.loadTexts: pduModel.setDescription('The PDU model name.')
pduSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduSerialNumber.setStatus('current')
if mibBuilder.loadTexts: pduSerialNumber.setDescription('The PDU serial number.')
pduRatedVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduRatedVoltage.setStatus('current')
if mibBuilder.loadTexts: pduRatedVoltage.setDescription('The PDU voltage rating.')
pduRatedCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduRatedCurrent.setStatus('current')
if mibBuilder.loadTexts: pduRatedCurrent.setDescription('The PDU current rating.')
pduRatedFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduRatedFrequency.setStatus('current')
if mibBuilder.loadTexts: pduRatedFrequency.setDescription('The PDU frequency rating.')
pduRatedVA = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduRatedVA.setStatus('current')
if mibBuilder.loadTexts: pduRatedVA.setDescription('The PDU VA (VoltAmps) rating.')
pduImage = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 1, 1, 9), URL()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduImage.setStatus('current')
if mibBuilder.loadTexts: pduImage.setDescription('The URL of the wiring diagram for this PDU.')
unitConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2), )
if mibBuilder.loadTexts: unitConfigurationTable.setStatus('current')
if mibBuilder.loadTexts: unitConfigurationTable.setDescription('A list of PDU configuration entries. The number of\n            entries is given by the value of pduCount.')
unitConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"))
if mibBuilder.loadTexts: unitConfigurationEntry.setStatus('current')
if mibBuilder.loadTexts: unitConfigurationEntry.setDescription('An entry containing configuration objects for a particular PDU.')
inletCount = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletCount.setStatus('current')
if mibBuilder.loadTexts: inletCount.setDescription('The number of inlets.')
overCurrentProtectorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: overCurrentProtectorCount.setStatus('current')
if mibBuilder.loadTexts: overCurrentProtectorCount.setDescription('The number of overcurrent protectors.')
outletCount = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletCount.setStatus('current')
if mibBuilder.loadTexts: outletCount.setDescription('The number of outlets.')
inletControllerCount = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletControllerCount.setStatus('current')
if mibBuilder.loadTexts: inletControllerCount.setDescription('The number of inlet controllers.')
outletControllerCount = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletControllerCount.setStatus('current')
if mibBuilder.loadTexts: outletControllerCount.setDescription('The number of outlet controllers.')
externalSensorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalSensorCount.setStatus('current')
if mibBuilder.loadTexts: externalSensorCount.setDescription('The maximum supported number of external sensors. This value is\n            fixed and does not reflect how many sensors are actually connected.')
pxIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pxIPAddress.setStatus('deprecated')
if mibBuilder.loadTexts: pxIPAddress.setDescription('The current IP address. A value of 0.0.0.0 indicates an error\n            or an unset option.')
netmask = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netmask.setStatus('deprecated')
if mibBuilder.loadTexts: netmask.setDescription('The current netmask. A value of 0.0.0.0 indicates an error\n            or an unset option.')
gateway = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 10), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gateway.setStatus('deprecated')
if mibBuilder.loadTexts: gateway.setDescription('The current gateway. A value of 0.0.0.0 indicates an error\n            or an unset option.')
pxMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 11), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pxMACAddress.setStatus('deprecated')
if mibBuilder.loadTexts: pxMACAddress.setDescription('The current MAC address.\n            If bridge interface is enabled, then equal to the MAC address of Ethernet 1\n            else if Ethernet 1 is enabled, then equal to the MAC address of Ethernet 1\n            else if Ethernet 2 is enabled, then equal to the MAC address of Ethernet 2\n            else if Wlan is enabled, then equal to the MAC address of Wlan\n            else return SNMP_ERR_NOSUCHNAME')
utcOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utcOffset.setStatus('current')
if mibBuilder.loadTexts: utcOffset.setDescription('The current UTC offset.')
pduName = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduName.setStatus('current')
if mibBuilder.loadTexts: pduName.setDescription('The user-defined name for the PDU.')
networkInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 14), NetworkInterfaceTypeEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkInterfaceType.setStatus('deprecated')
if mibBuilder.loadTexts: networkInterfaceType.setDescription('The network interface type: wired or wireless.\n            If only the Wireless interface is enabled, then equal to wireless\n            else equal to wired')
externalSensorsZCoordinateUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 34), ExternalSensorsZCoordinateUnitsEnumeration()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorsZCoordinateUnits.setStatus('current')
if mibBuilder.loadTexts: externalSensorsZCoordinateUnits.setDescription('External sensor Z coordinate units: freeform text or rack units (U)\n            Default is U.')
unitDeviceCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 35), Bits().clone(namedValues=NamedValues(("i1smpsStatus", 45), ("i2smpsStatus", 46)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitDeviceCapabilities.setStatus('current')
if mibBuilder.loadTexts: unitDeviceCapabilities.setDescription('A bit string indicating which unit sensors are available.')
outletSequencingDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 36), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletSequencingDelay.setStatus('deprecated')
if mibBuilder.loadTexts: outletSequencingDelay.setDescription('It is deprecated. This is an alias for  inrushGuardDelay')
globalOutletPowerCyclingPowerOffPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 37), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: globalOutletPowerCyclingPowerOffPeriod.setStatus('current')
if mibBuilder.loadTexts: globalOutletPowerCyclingPowerOffPeriod.setDescription('The power-off period when an outlet is cycled;\n            applies to all outlets unless overridden at the outlet level;\n            specified in seconds;\n            1 <= value <= 3600 seconds.')
globalOutletStateOnStartup = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 38), GlobalOutletStateOnStartupEnumeration()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: globalOutletStateOnStartup.setStatus('current')
if mibBuilder.loadTexts: globalOutletStateOnStartup.setDescription('The outlet state on device startup; applies to all outlets\n            unless overridden at the outlet level.\n            Note that this value is ignored if relayBehaviorOnPowerLoss is set to latching.')
outletPowerupSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 39), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletPowerupSequence.setStatus('current')
if mibBuilder.loadTexts: outletPowerupSequence.setDescription('The sequence in which will the outlets will be switched on under the following conditions.\n            1) Switch all outlets on operation is executed\n            2) Power to the PDU is cycled\n            String must consist of a comma separated sequence of the outlet numbers and\n            all outlet numbers must be included. The numbers entered must be a permutation of the numbers\n            1,2,3,-outletnumber.\n            Example for a 12 outlet PDU: 1,12,3,5,6,7,10,2,4,11,9,8.\n\n            The per outlet sequence delays are defined as outletSequenceDelay in the outletConfigurationTable')
pduPowerCyclingPowerOffPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 40), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduPowerCyclingPowerOffPeriod.setStatus('current')
if mibBuilder.loadTexts: pduPowerCyclingPowerOffPeriod.setDescription('When power to the  PX is cycled (either manually or because of a\n            temporary power loss), this number determines how many seconds the\n            PX will wait before it provides power to the outlets.\n            specified in seconds:\n            1 <= value <= 3600 seconds.\n            Note that this value is ignored if relayBehaviorOnPowerLoss is set to latching.')
pduDaisychainMemberType = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 41), DaisychainMemberTypeEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduDaisychainMemberType.setStatus('current')
if mibBuilder.loadTexts: pduDaisychainMemberType.setDescription('The daisy chain member type.')
managedExternalSensorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: managedExternalSensorCount.setStatus('current')
if mibBuilder.loadTexts: managedExternalSensorCount.setDescription('The number of managed external sensors')
pxInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 50), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pxInetAddressType.setStatus('deprecated')
if mibBuilder.loadTexts: pxInetAddressType.setDescription('The type of address format\n            This object is deprecated in favor of ipAddressTable from the IP-MIB (rfc4293).')
pxInetIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 51), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pxInetIPAddress.setStatus('deprecated')
if mibBuilder.loadTexts: pxInetIPAddress.setDescription('The current IP address. A value of 0.0.0.0 indicates an error\n            or an unset option.\n            This object is deprecated in favor of ipAddressTable from the IP-MIB (rfc4293).\n            For IPv6, its value is 0.0.0.0')
pxInetNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 52), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pxInetNetmask.setStatus('deprecated')
if mibBuilder.loadTexts: pxInetNetmask.setDescription('The current netmask. A value of 0.0.0.0 indicates an error\n            or an unset option.\n            This object is deprecated in favor of ipAddressTable from the IP-MIB (rfc4293).\n            For IPv6, its value is 0.0.0.0')
pxInetGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 53), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pxInetGateway.setStatus('deprecated')
if mibBuilder.loadTexts: pxInetGateway.setDescription('The current gateway. A value of 0.0.0.0 indicates an error\n            or an unset option.\n            This object is deprecated in favor of ipAddressTable from the IP-MIB (rfc4293).\n            For IPv6, its value is 0.0.0.0')
loadShedding = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 55), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loadShedding.setStatus('current')
if mibBuilder.loadTexts: loadShedding.setDescription('Enter/Exit Load Shedding Mode')
serverCount = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 56), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverCount.setStatus('current')
if mibBuilder.loadTexts: serverCount.setDescription('The number of servers monitored with the server reachability feature')
inrushGuardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 57), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inrushGuardDelay.setStatus('current')
if mibBuilder.loadTexts: inrushGuardDelay.setDescription('The time interval between switching on two outlets;\n            specified in milliseconds;\n            100 <= value <= 100000 milliseconds.')
cascadedDeviceConnected = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 58), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cascadedDeviceConnected.setStatus('current')
if mibBuilder.loadTexts: cascadedDeviceConnected.setDescription('Indicates whether another PX2 is connected using an USB cable to\n            the USB-A port of this PX2 in a cascaded configuration.')
synchronizeWithNTPServer = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 59), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: synchronizeWithNTPServer.setStatus('current')
if mibBuilder.loadTexts: synchronizeWithNTPServer.setDescription('Indicates whether time is synchronized with an NTP server.')
useDHCPProvidedNTPServer = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 60), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: useDHCPProvidedNTPServer.setStatus('obsolete')
if mibBuilder.loadTexts: useDHCPProvidedNTPServer.setDescription('**NOTE: This object is obsolete. Its functionality has been replaced\n            by the following:\n            - If at least one of firstNTPServerAddress and secondNTPServerAddress\n              has been configured then use the static NTP servers\n            - else use the DHCP-provided NTP servers')
firstNTPServerAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 61), InetAddressType().clone('ipv4')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: firstNTPServerAddressType.setStatus('current')
if mibBuilder.loadTexts: firstNTPServerAddressType.setDescription('Represents the type of the corresponding instance\n            of firstNTPServerAddress object. When setting this value,\n            be sure that firstNTPServerAddress is of this address type,\n            e.g. by setting both of them.')
firstNTPServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 62), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: firstNTPServerAddress.setStatus('current')
if mibBuilder.loadTexts: firstNTPServerAddress.setDescription('The address of the primary NTP server.\n            When setting this value, be sure that it\n            is of the type specified in firstNTPServerAddressType,\n            e.g. by setting both of them.')
secondNTPServerAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 63), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: secondNTPServerAddressType.setStatus('current')
if mibBuilder.loadTexts: secondNTPServerAddressType.setDescription('Represents the type of the corresponding instance\n            of secondNTPServerAddress object. When setting this value,\n            be sure that secondNTPServerAddress is of this address type,\n            e.g. by setting both of them.\n            Default is ipv4')
secondNTPServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 64), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: secondNTPServerAddress.setStatus('current')
if mibBuilder.loadTexts: secondNTPServerAddress.setDescription('The address of the second NTP server.\n            When setting this value, be sure that it\n            is of the type specified in secondNTPServerAddressType,\n            e.g. by setting both of them.')
wireCount = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 65), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wireCount.setStatus('deprecated')
if mibBuilder.loadTexts: wireCount.setDescription('The number of wire objects in the PDU topology. This feature is no\n            longer used, the returned value is always 0.')
transferSwitchCount = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 66), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: transferSwitchCount.setStatus('current')
if mibBuilder.loadTexts: transferSwitchCount.setDescription('The number of transfer switches.')
productType = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 67), ProductTypeEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productType.setStatus('current')
if mibBuilder.loadTexts: productType.setDescription('The product type (PDU, BCM, transfer switch or power meter).')
meteringControllerCount = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 68), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: meteringControllerCount.setStatus('current')
if mibBuilder.loadTexts: meteringControllerCount.setDescription('The number of metering controllers.')
relayBehaviorOnPowerLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 69), RelayPowerLossBehaviorEnumeration()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: relayBehaviorOnPowerLoss.setStatus('current')
if mibBuilder.loadTexts: relayBehaviorOnPowerLoss.setDescription('The relay behavior on power loss (latching or non-latching).')
deviceCascadeType = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 70), DeviceCascadeTypeEnumeration()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceCascadeType.setStatus('current')
if mibBuilder.loadTexts: deviceCascadeType.setDescription('The type of network cascade this device is part of (none, bridging\n            or port forwarding).')
deviceCascadePosition = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 71), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceCascadePosition.setStatus('current')
if mibBuilder.loadTexts: deviceCascadePosition.setDescription('The position of the device in the cascade chain. Only supported in\n            port forwarding mode, 0 otherwise.')
peripheralDevicesAutoManagement = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 72), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: peripheralDevicesAutoManagement.setStatus('current')
if mibBuilder.loadTexts: peripheralDevicesAutoManagement.setDescription('Defines whether newly-connected peripheral devices are automatically\n            assigned to an unused slot.')
frontPanelOutletSwitching = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 73), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frontPanelOutletSwitching.setStatus('current')
if mibBuilder.loadTexts: frontPanelOutletSwitching.setDescription('Enables/disables switching of outlets using the PDU front panel.')
frontPanelRCMSelfTest = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 74), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frontPanelRCMSelfTest.setStatus('current')
if mibBuilder.loadTexts: frontPanelRCMSelfTest.setDescription('Enables/disables front panel RCM self-test.')
frontPanelActuatorControl = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 75), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frontPanelActuatorControl.setStatus('current')
if mibBuilder.loadTexts: frontPanelActuatorControl.setDescription('Enables/disables front panel peripheral actuator control.')
circuitCount = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 76), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitCount.setStatus('current')
if mibBuilder.loadTexts: circuitCount.setDescription('The number of branch circuits in a panel.')
activeDNSServerCount = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 77), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeDNSServerCount.setStatus('current')
if mibBuilder.loadTexts: activeDNSServerCount.setDescription('The number of active DNS servers')
activeNTPServerCount = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 78), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeNTPServerCount.setStatus('current')
if mibBuilder.loadTexts: activeNTPServerCount.setDescription('The number of active NTP servers')
activeDNSServerTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 6), )
if mibBuilder.loadTexts: activeDNSServerTable.setStatus('current')
if mibBuilder.loadTexts: activeDNSServerTable.setDescription('A list of active DNS server entries. The number of rows in the table is\n            given by the value of activeDNSServerCount in unitConfigurationTable.')
activeDNSServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 6, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "activeDNSServerIndex"))
if mibBuilder.loadTexts: activeDNSServerEntry.setStatus('current')
if mibBuilder.loadTexts: activeDNSServerEntry.setDescription('An entry containing an active DNS server for a particular PDU.')
activeDNSServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: activeDNSServerIndex.setStatus('current')
if mibBuilder.loadTexts: activeDNSServerIndex.setDescription('A unique value for a DNS server. Its value ranges between 1 and activeDNSServerCount.')
activeDNSServerAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 6, 1, 3), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeDNSServerAddressType.setStatus('current')
if mibBuilder.loadTexts: activeDNSServerAddressType.setDescription('Represents the type of the corresponding instance\n            of activeDNSServerAddress object.')
activeDNSServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 6, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeDNSServerAddress.setStatus('current')
if mibBuilder.loadTexts: activeDNSServerAddress.setDescription('The address of the DNS server.')
activeDNSServerAddressSource = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 6, 1, 5), AddressSourceEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeDNSServerAddressSource.setStatus('deprecated')
if mibBuilder.loadTexts: activeDNSServerAddressSource.setDescription('How was the address obtained: static, DHCP, DHCPv6?\n            No longer used, always set to static.')
activeNTPServerTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 7), )
if mibBuilder.loadTexts: activeNTPServerTable.setStatus('current')
if mibBuilder.loadTexts: activeNTPServerTable.setDescription('A list of active NTP server entries. The number of rows in the table is\n            given by the value of activeNTPServerCount in unitConfigurationTable.')
activeNTPServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 7, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "activeNTPServerIndex"))
if mibBuilder.loadTexts: activeNTPServerEntry.setStatus('current')
if mibBuilder.loadTexts: activeNTPServerEntry.setDescription('An entry containing an active NTP server for a particular PDU.')
activeNTPServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: activeNTPServerIndex.setStatus('current')
if mibBuilder.loadTexts: activeNTPServerIndex.setDescription('A unique value for an NTP server. Its value ranges between 1 and activeNTPServerCount.')
activeNTPServerAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 7, 1, 3), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeNTPServerAddressType.setStatus('current')
if mibBuilder.loadTexts: activeNTPServerAddressType.setDescription('Represents the type of the corresponding instance\n            of activeNTPServerAddress object, e.g. IPv4, IPv6, DNS Name')
activeNTPServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 7, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeNTPServerAddress.setStatus('current')
if mibBuilder.loadTexts: activeNTPServerAddress.setDescription('The address of the NTP server.')
activeNTPServerAddressSource = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 7, 1, 5), AddressSourceEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeNTPServerAddressSource.setStatus('deprecated')
if mibBuilder.loadTexts: activeNTPServerAddressSource.setDescription('How was the address obtained: static, DHCP, DHCPv6?\n            No longer used, always set to static.')
controllerConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 3), )
if mibBuilder.loadTexts: controllerConfigurationTable.setStatus('current')
if mibBuilder.loadTexts: controllerConfigurationTable.setDescription('A list of entries for the boards in a PDU. The number of entries is\n            one more than the sum of inletControllerCount, outletControllerCount\n            and meterControllerCount.')
controllerConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 3, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "boardType"), (0, "PDU2-MIB", "boardIndex"))
if mibBuilder.loadTexts: controllerConfigurationEntry.setStatus('current')
if mibBuilder.loadTexts: controllerConfigurationEntry.setDescription('An  entry containing objects for a controller.')
boardType = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 3, 1, 1), BoardTypeEnumeration())
if mibBuilder.loadTexts: boardType.setStatus('current')
if mibBuilder.loadTexts: boardType.setDescription('The type of board.')
boardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: boardIndex.setStatus('current')
if mibBuilder.loadTexts: boardIndex.setDescription('A unique value for each controller.')
boardVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardVersion.setStatus('current')
if mibBuilder.loadTexts: boardVersion.setDescription('The board hardware version.')
boardFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardFirmwareVersion.setStatus('current')
if mibBuilder.loadTexts: boardFirmwareVersion.setDescription('The firmware version.')
boardFirmwareTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 3, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardFirmwareTimeStamp.setStatus('current')
if mibBuilder.loadTexts: boardFirmwareTimeStamp.setDescription('The time when the board firmware was updated as UNIX timestamp.\n            It is measured in seconds since January 1, 1970 (midnight UTC/GMT)')
logConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 4), )
if mibBuilder.loadTexts: logConfigurationTable.setStatus('current')
if mibBuilder.loadTexts: logConfigurationTable.setDescription('A table of parameters for the data logging feature. The number of\n            entries is given by the value of pduCount.')
logConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 4, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"))
if mibBuilder.loadTexts: logConfigurationEntry.setStatus('current')
if mibBuilder.loadTexts: logConfigurationEntry.setDescription('An entry containing data logging parameters for a particular PDU.')
dataLogging = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 4, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dataLogging.setStatus('current')
if mibBuilder.loadTexts: dataLogging.setDescription('Defines whether sensor data logging is enabled.')
measurementPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementPeriod.setStatus('current')
if mibBuilder.loadTexts: measurementPeriod.setDescription('Data collection periodicity. This is the periodicity of the data\n            collected by the PDU. This value is fixed at 1 second.')
measurementsPerLogEntry = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 4, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: measurementsPerLogEntry.setStatus('current')
if mibBuilder.loadTexts: measurementsPerLogEntry.setDescription('The number of measurements aggregated into a data log entry.')
logSize = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logSize.setStatus('current')
if mibBuilder.loadTexts: logSize.setDescription('The capacity (number of entries) of the data log.')
dataLoggingEnableForAllSensors = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 4, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dataLoggingEnableForAllSensors.setStatus('current')
if mibBuilder.loadTexts: dataLoggingEnableForAllSensors.setDescription('Operation to control data logging for all sensors:\n            - when set to true, all *SensorLogAvailable OIDs are set to true\n            - when set to false, all *SensorLogAvailable OIDs are set to false')
trapInformationTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 1), )
if mibBuilder.loadTexts: trapInformationTable.setStatus('current')
if mibBuilder.loadTexts: trapInformationTable.setDescription("A group of objects used exclusively in traps. This is a table for\n            historic reasons; it can't be queried from the SNMP agent.")
trapInformationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 1, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"))
if mibBuilder.loadTexts: trapInformationEntry.setStatus('current')
if mibBuilder.loadTexts: trapInformationEntry.setDescription('An entry containing objects used in traps.')
userName = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userName.setStatus('current')
if mibBuilder.loadTexts: userName.setDescription('The user currently logged in.')
targetUser = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: targetUser.setStatus('current')
if mibBuilder.loadTexts: targetUser.setDescription('The user added, deleted, or modified.')
imageVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imageVersion.setStatus('current')
if mibBuilder.loadTexts: imageVersion.setDescription('The version of the upgrade image.')
roleName = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: roleName.setStatus('current')
if mibBuilder.loadTexts: roleName.setDescription('The role added, deleted, or modified.')
smtpMessageRecipients = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpMessageRecipients.setStatus('current')
if mibBuilder.loadTexts: smtpMessageRecipients.setDescription('Comma separated list of SMTP message recipients')
smtpServer = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpServer.setStatus('current')
if mibBuilder.loadTexts: smtpServer.setDescription('The IP address/host name of the SMTP server')
oldSensorState = MibScalar((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 2), SensorStateEnumeration()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: oldSensorState.setStatus('current')
if mibBuilder.loadTexts: oldSensorState.setDescription('The old sensor state used in sensor state transition traps.')
pduNumber = MibScalar((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: pduNumber.setStatus('current')
if mibBuilder.loadTexts: pduNumber.setDescription('A unique value for each PDU. Its value ranges between 1 and the\n            value of pduCount.')
inletPoleNumber = MibScalar((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: inletPoleNumber.setStatus('current')
if mibBuilder.loadTexts: inletPoleNumber.setDescription('A unique value for each inlet pole. Its value ranges between 1\n            and the value of inletPoleCount.')
outletPoleNumber = MibScalar((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: outletPoleNumber.setStatus('current')
if mibBuilder.loadTexts: outletPoleNumber.setDescription('A unique value for each outlet pole. Its value ranges between 1\n            and the value of outletPoleCount.')
externalSensorNumber = MibScalar((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: externalSensorNumber.setStatus('current')
if mibBuilder.loadTexts: externalSensorNumber.setDescription('A unique value for each external sensor. Its value ranges between 1\n            and the value of externalSensorCount.')
typeOfSensor = MibScalar((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 10), SensorTypeEnumeration()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: typeOfSensor.setStatus('current')
if mibBuilder.loadTexts: typeOfSensor.setDescription('The type of sensor.')
errorDescription = MibScalar((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 11), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: errorDescription.setStatus('current')
if mibBuilder.loadTexts: errorDescription.setDescription('Description of the error')
deviceChangedParameter = MibScalar((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 12), DeviceIdentificationParameterEnumeration()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: deviceChangedParameter.setStatus('current')
if mibBuilder.loadTexts: deviceChangedParameter.setDescription('Identifies the parameter that has changed.')
changedParameterNewValue = MibScalar((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 13), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: changedParameterNewValue.setStatus('current')
if mibBuilder.loadTexts: changedParameterNewValue.setDescription('The new value of the changed parameter')
lhxSupportEnabled = MibScalar((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 14), TruthValue()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: lhxSupportEnabled.setStatus('current')
if mibBuilder.loadTexts: lhxSupportEnabled.setDescription('The new enabled state for Schroff LHX support.')
webcamModel = MibScalar((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 15), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: webcamModel.setStatus('current')
if mibBuilder.loadTexts: webcamModel.setDescription('The model of the webcam')
webcamConnectionPort = MibScalar((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 16), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: webcamConnectionPort.setStatus('current')
if mibBuilder.loadTexts: webcamConnectionPort.setDescription('The port to which the webcam is connected')
agentInetPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 18), InetPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: agentInetPortNumber.setStatus('current')
if mibBuilder.loadTexts: agentInetPortNumber.setDescription('The UDP port number used for accessing the SNMP agent on the device.\n            This is necessary to identify the slave in a port forwarding cascade.')
peripheralDeviceRomcode = MibScalar((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 19), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: peripheralDeviceRomcode.setStatus('current')
if mibBuilder.loadTexts: peripheralDeviceRomcode.setDescription('The 1-wire romcode of a peripheral device')
peripheralDeviceFirmwareUpdateState = MibScalar((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 20), PeripheralDeviceFirmwareUpdateStateEnumeration()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: peripheralDeviceFirmwareUpdateState.setStatus('current')
if mibBuilder.loadTexts: peripheralDeviceFirmwareUpdateState.setDescription('The firmware update state of a peripheral device')
circuitNumber = MibScalar((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 33000))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: circuitNumber.setStatus('current')
if mibBuilder.loadTexts: circuitNumber.setDescription('A unique value for each circuit. Defined as follows:\n                circuitNumber = 1000 * panelId + circuitPosition\n\n            Examples:\n                1045 is the the circuit on panel 1 with lowest circuit position equal to 45\n                4067 is the the circuit on panel 4 with lowest circuit position equal to 67.')
circuitPoleNumber = MibScalar((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: circuitPoleNumber.setStatus('current')
if mibBuilder.loadTexts: circuitPoleNumber.setDescription('A unique value for each circuit pole.')
phoneNumber = MibScalar((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 23), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: phoneNumber.setStatus('current')
if mibBuilder.loadTexts: phoneNumber.setDescription('The phone number of e.g. an SMS receiver.')
smartCardReaderId = MibScalar((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 24), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: smartCardReaderId.setStatus('current')
if mibBuilder.loadTexts: smartCardReaderId.setDescription('The ID of a smartcard reader.')
smartCardTimestamp = MibScalar((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 25), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: smartCardTimestamp.setStatus('current')
if mibBuilder.loadTexts: smartCardTimestamp.setDescription('The timestamp indicating when the smartcard was inserted or removed.\n            It is measured in seconds since January 1, 1970 UTC')
smartCardType = MibScalar((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 26), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: smartCardType.setStatus('current')
if mibBuilder.loadTexts: smartCardType.setDescription('The type of a smartcard.')
smartCardId = MibScalar((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 27), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: smartCardId.setStatus('current')
if mibBuilder.loadTexts: smartCardId.setDescription('The ID/serial number of a smartcard.')
suspectedTripCauseLabel = MibScalar((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 28), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: suspectedTripCauseLabel.setStatus('current')
if mibBuilder.loadTexts: suspectedTripCauseLabel.setDescription('The label of the outlet that likely caused the OCP trip,\n            if it can be determined.')
unitSensorConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 5), )
if mibBuilder.loadTexts: unitSensorConfigurationTable.setStatus('current')
if mibBuilder.loadTexts: unitSensorConfigurationTable.setDescription('A list of unit-level sensors for a PDU.')
unitSensorConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 5, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "sensorType"))
if mibBuilder.loadTexts: unitSensorConfigurationEntry.setStatus('current')
if mibBuilder.loadTexts: unitSensorConfigurationEntry.setDescription('An entry containing unit sensor parameters.')
sensorType = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 5, 1, 1), SensorTypeEnumeration())
if mibBuilder.loadTexts: sensorType.setStatus('current')
if mibBuilder.loadTexts: sensorType.setDescription('The type of sensor.')
unitSensorLogAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 5, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitSensorLogAvailable.setStatus('current')
if mibBuilder.loadTexts: unitSensorLogAvailable.setDescription('Is data logging enabled for the sensor?')
unitSensorUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 5, 1, 6), SensorUnitsEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitSensorUnits.setStatus('current')
if mibBuilder.loadTexts: unitSensorUnits.setDescription('The unit in which the sensor reading is reported.\n            This parameter does not apply to sensors without numerical reading.')
unitSensorDecimalDigits = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 5, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitSensorDecimalDigits.setStatus('current')
if mibBuilder.loadTexts: unitSensorDecimalDigits.setDescription('The number of digits displayed to the right of the decimal point.')
unitSensorAccuracy = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 5, 1, 8), HundredthsOfAPercentage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitSensorAccuracy.setStatus('deprecated')
if mibBuilder.loadTexts: unitSensorAccuracy.setDescription('The accuracy: the maximum relative difference (in percent) between\n            measurement and the actual value.\n            This parameter does not apply to sensors without numerical reading.')
unitSensorResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 5, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitSensorResolution.setStatus('current')
if mibBuilder.loadTexts: unitSensorResolution.setDescription('The resolution: the minimum difference between any two measured values\n            The value of this OID variable should be scaled by\n            unitSensorDecimalDigits.  For example, if the value is 1 and\n            unitSensorDecimalDigits is 2, then actual value is 0.01.\n            This parameter does not apply to sensors without numerical reading.')
unitSensorTolerance = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 5, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitSensorTolerance.setStatus('deprecated')
if mibBuilder.loadTexts: unitSensorTolerance.setDescription('The tolerance: the maximum difference between measurement and the\n            actual value. The value of this OID variable should be scaled by\n            (unitSensorDecimalDigits + 1).  For example, if the value is 50 and\n            unitSensorDecimalDigits is 2, then actual value is 0.05.\n            This parameter does not apply to sensors without numerical reading.')
unitSensorMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 5, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitSensorMaximum.setStatus('current')
if mibBuilder.loadTexts: unitSensorMaximum.setDescription('The largest possible reading as an unsigned integer.\n            The value of this OID variable should be scaled by\n            unitSensorDecimalDigits.  For example, if the value is 1 and\n            unitSensorDecimalDigits is 2, then actual value is 0.01.\n            The value is clamped if the scaled maximum exceeds 4294967295. It\n            is undefined for sensors which can have negative readings.\n            This parameter does not apply to sensors without numerical reading.')
unitSensorMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 5, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitSensorMinimum.setStatus('current')
if mibBuilder.loadTexts: unitSensorMinimum.setDescription('The smallest possible reading as an unsigned integer.\n            The value of this OID variable should be scaled by\n            unitSensorDecimalDigits.  For example, if the value is 1 and\n            unitSensorDecimalDigits is 2, then actual value is 0.01.\n            The value is undefined for sensors which can have negative readings.\n            This parameter does not apply to sensors without numerical reading.')
unitSensorHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 5, 1, 13), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitSensorHysteresis.setStatus('current')
if mibBuilder.loadTexts: unitSensorHysteresis.setDescription('The hysteresis used when crossing a threshold towards the normal state.\n            The value of this OID variable should be scaled by\n            unitSensorDecimalDigits.  For example, if the value is 1 and\n            unitSensorDecimalDigits is 2, then actual value is 0.01.\n            This parameter does not apply to sensors without numerical reading.')
unitSensorStateChangeDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 5, 1, 14), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitSensorStateChangeDelay.setStatus('current')
if mibBuilder.loadTexts: unitSensorStateChangeDelay.setDescription('The delay measured in samples before a state is asserted.\n            If the value is zero, then the state is asserted as soon as\n            it is detected; if it is non-zero, say n, then the assertion\n            condition must exist for n+1 consecutive samples before the\n            event is reported.\n            This parameter does not apply to sensors without numerical reading.')
unitSensorLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 5, 1, 21), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitSensorLowerCriticalThreshold.setStatus('current')
if mibBuilder.loadTexts: unitSensorLowerCriticalThreshold.setDescription('The lower critical threshold as an unsigned integer.\n            The value of this OID variable should be scaled by\n            unitSensorDecimalDigits.  For example, if the value is 1 and\n            unitSensorDecimalDigits is 2, then actual value is 0.01.\n            The value is clamped if the scaled threshold exceeds 4294967295. It\n            is undefined for sensors which can have negative readings.\n            This parameter does not apply to sensors without numerical reading.')
unitSensorLowerWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 5, 1, 22), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitSensorLowerWarningThreshold.setStatus('current')
if mibBuilder.loadTexts: unitSensorLowerWarningThreshold.setDescription('The lower warning threshold as an unsigned integer.\n            The value of this OID variable should be scaled by\n            unitSensorDecimalDigits.  For example, if the value is 1 and\n            unitSensorDecimalDigits is 2, then actual value is 0.01.\n            The value is clamped if the scaled threshold exceeds 4294967295. It\n            is undefined for sensors which can have negative readings.\n            This parameter does not apply to sensors without numerical reading.')
unitSensorUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 5, 1, 23), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitSensorUpperCriticalThreshold.setStatus('current')
if mibBuilder.loadTexts: unitSensorUpperCriticalThreshold.setDescription('The upper critical threshold as an unsigned integer.\n            The value of this OID variable should be scaled by\n            unitSensorDecimalDigits.  For example, if the value is 1 and\n            unitSensorDecimalDigits is 2, then actual value is 0.01.\n            The value is clamped if the scaled threshold exceeds 4294967295. It\n            is undefined for sensors which can have negative readings.\n            This parameter does not apply to sensors without numerical reading.')
unitSensorUpperWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 5, 1, 24), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitSensorUpperWarningThreshold.setStatus('current')
if mibBuilder.loadTexts: unitSensorUpperWarningThreshold.setDescription('The upper warning threshold as an unsigned integer.\n            The value of this OID variable should be scaled by\n            unitSensorDecimalDigits.  For example, if the value is 1 and\n            unitSensorDecimalDigits is 2, then actual value is 0.01.\n            The value is clamped if the scaled threshold exceeds 4294967295. It\n            is undefined for sensors which can have negative readings.\n            This parameter does not apply to sensors without numerical reading.')
unitSensorEnabledThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 5, 1, 25), Bits().clone(namedValues=NamedValues(("lowerCritical", 0), ("lowerWarning", 1), ("upperWarning", 2), ("upperCritical", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitSensorEnabledThresholds.setStatus('current')
if mibBuilder.loadTexts: unitSensorEnabledThresholds.setDescription('A bit string indicating which thresholds are enabled.\n            This parameter does not apply to sensors without numerical reading.')
unitSensorSignedMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 5, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitSensorSignedMaximum.setStatus('current')
if mibBuilder.loadTexts: unitSensorSignedMaximum.setDescription('The largest possible reading as a signed integer.\n            The value of this OID variable should be scaled by\n            unitSensorDecimalDigits.  For example, if the value is 1 and\n            unitSensorDecimalDigits is 2, then actual value is 0.01.\n            The value is undefined for sensors whose range exceeds the\n            Integer32 range (-2147483648 .. 2147483647).\n            This parameter does not apply to sensors without numerical reading.')
unitSensorSignedMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 5, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitSensorSignedMinimum.setStatus('current')
if mibBuilder.loadTexts: unitSensorSignedMinimum.setDescription('The smallest possible reading as a signed integer.\n            The value of this OID variable should be scaled by\n            unitSensorDecimalDigits.  For example, if the value is 1 and\n            unitSensorDecimalDigits is 2, then actual value is 0.01.\n            This value determines whether to use the signed or unsigned threshold\n            and value columns: If the minimum is below zero the sensor can have\n            negative readings and the signed columns should be used.\n            This parameter does not apply to sensors without numerical reading.')
unitSensorSignedLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 5, 1, 28), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitSensorSignedLowerCriticalThreshold.setStatus('current')
if mibBuilder.loadTexts: unitSensorSignedLowerCriticalThreshold.setDescription('The lower critical threshold as a signed integer.\n            The value of this OID variable should be scaled by\n            unitSensorDecimalDigits.  For example, if the value is 1 and\n            unitSensorDecimalDigits is 2, then actual value is 0.01.\n            The value is undefined for sensors whose range exceeds the\n            Integer32 range (-2147483648 .. 2147483647).\n            This parameter does not apply to sensors without numerical reading.')
unitSensorSignedLowerWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 5, 1, 29), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitSensorSignedLowerWarningThreshold.setStatus('current')
if mibBuilder.loadTexts: unitSensorSignedLowerWarningThreshold.setDescription('The lower warning threshold as a signed integer.\n            The value of this OID variable should be scaled by\n            unitSensorDecimalDigits.  For example, if the value is 1 and\n            unitSensorDecimalDigits is 2, then actual value is 0.01.\n            The value is undefined for sensors whose range exceeds the\n            Integer32 range (-2147483648 .. 2147483647).\n            This parameter does not apply to sensors without numerical reading.')
unitSensorSignedUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 5, 1, 30), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitSensorSignedUpperCriticalThreshold.setStatus('current')
if mibBuilder.loadTexts: unitSensorSignedUpperCriticalThreshold.setDescription('The upper critical threshold as a signed integer.\n            The value of this OID variable should be scaled by\n            unitSensorDecimalDigits.  For example, if the value is 1 and\n            unitSensorDecimalDigits is 2, then actual value is 0.01.\n            The value is undefined for sensors whose range exceeds the\n            Integer32 range (-2147483648 .. 2147483647).\n            This parameter does not apply to sensors without numerical reading.')
unitSensorSignedUpperWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 5, 1, 31), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitSensorSignedUpperWarningThreshold.setStatus('current')
if mibBuilder.loadTexts: unitSensorSignedUpperWarningThreshold.setDescription('The upper warning threshold as a signed integer.\n            The value of this OID variable should be scaled by\n            unitSensorDecimalDigits.  For example, if the value is 1 and\n            unitSensorDecimalDigits is 2, then actual value is 0.01.\n            The value is undefined for sensors whose range exceeds the\n            Integer32 range (-2147483648 .. 2147483647).\n            This parameter does not apply to sensors without numerical reading.')
inletConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 3), )
if mibBuilder.loadTexts: inletConfigurationTable.setStatus('current')
if mibBuilder.loadTexts: inletConfigurationTable.setDescription('A list of inlet configuration entries. The number of\n            entries is given by the value of inletCount for the PDU.')
inletConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 3, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "inletId"))
if mibBuilder.loadTexts: inletConfigurationEntry.setStatus('current')
if mibBuilder.loadTexts: inletConfigurationEntry.setDescription('An entry containing parametersfor a particular inlet.')
inletId = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: inletId.setStatus('current')
if mibBuilder.loadTexts: inletId.setDescription('A unique value for each inlet. Its value ranges between 1 and the\n            value of inletCount.')
inletLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletLabel.setStatus('current')
if mibBuilder.loadTexts: inletLabel.setDescription('The label on the PDU identifying the inlet.')
inletName = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 3, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletName.setStatus('current')
if mibBuilder.loadTexts: inletName.setDescription('The user-defined name.')
inletPlug = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 3, 1, 4), PlugTypeEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletPlug.setStatus('current')
if mibBuilder.loadTexts: inletPlug.setDescription('The type of plug/receptacle wired to the inlet.\n            Note: PlugTypeEnumeration is no longer updated, unlisted plugs will be\n            reported as plugOTHER. Use inletPlugDescriptor to reliably determine\n            the plug type.')
inletPoleCount = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletPoleCount.setStatus('current')
if mibBuilder.loadTexts: inletPoleCount.setDescription('The number of poles.\n            PDU:\n              2 for 1-phase circuits\n              3 for 3-phase delta-wired models\n              4 for 3-phase wye-wired models, pole 4 is neutral\n            Power Meter:\n              2 to 5 depending on the power meter type:\n                Pole 1 is Phase A\n                Pole 2 is Phase B\n                Pole 3 is Phase C\n                Pole 4 is Neutral\n                Pole 5 is Earth')
inletRatedVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletRatedVoltage.setStatus('current')
if mibBuilder.loadTexts: inletRatedVoltage.setDescription('The inlet voltage rating.')
inletRatedCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 3, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletRatedCurrent.setStatus('current')
if mibBuilder.loadTexts: inletRatedCurrent.setDescription('The inlet current rating.')
inletRatedFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 3, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletRatedFrequency.setStatus('deprecated')
if mibBuilder.loadTexts: inletRatedFrequency.setDescription('The inlet frequency rating.\n            Deprecated: use pduRatedFrequency for unit nameplate information.')
inletRatedVA = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 3, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletRatedVA.setStatus('deprecated')
if mibBuilder.loadTexts: inletRatedVA.setDescription('The inlet VA (VoltAmps) rating.\n            Deprecated: use pduRatedVA for unit nameplate information.')
inletDeviceCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 3, 1, 10), Bits().clone(namedValues=NamedValues(("rmsCurrent", 0), ("peakCurrent", 1), ("unbalancedCurrent", 2), ("rmsVoltage", 3), ("activePower", 4), ("apparentPower", 5), ("powerFactor", 6), ("activeEnergy", 7), ("apparentEnergy", 8), ("surgeProtectorStatus", 21), ("frequency", 22), ("phaseAngle", 23), ("residualCurrent", 25), ("rcmState", 26), ("reactivePower", 28), ("powerQuality", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletDeviceCapabilities.setStatus('current')
if mibBuilder.loadTexts: inletDeviceCapabilities.setDescription('A bit string indicating which inlet sensors are available.')
inletPoleCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 3, 1, 11), Bits().clone(namedValues=NamedValues(("rmsCurrent", 0), ("peakCurrent", 1), ("rmsVoltage", 3), ("activePower", 4), ("apparentPower", 5), ("powerFactor", 6), ("activeEnergy", 7), ("apparentEnergy", 8), ("phaseAngle", 23), ("rmsVoltageLN", 24), ("reactivePower", 28), ("displacementPowerFactor", 34)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletPoleCapabilities.setStatus('current')
if mibBuilder.loadTexts: inletPoleCapabilities.setDescription('A bit string indicating which inlet pole sensors are available.')
inletPlugDescriptor = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 3, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletPlugDescriptor.setStatus('current')
if mibBuilder.loadTexts: inletPlugDescriptor.setDescription('The inlet plug type as a string.')
inletEnableState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 3, 1, 13), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletEnableState.setStatus('current')
if mibBuilder.loadTexts: inletEnableState.setDescription('Enable/disable PDU operation for this inlet.\n            When PDU operation is disabled the sensors for this inlet and all\n            children will no longer be updated, and outlet switching is no longer\n            allowed. This is only meaningful for multi-inlet units if one inlet\n            is temporarily expected to be powered down.\n            Disabling the inlet of a single-inlet unit is forbidden and any\n            attempt to do so will result in an error.')
inletRCMResidualOperatingCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 3, 1, 14), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletRCMResidualOperatingCurrent.setStatus('obsolete')
if mibBuilder.loadTexts: inletRCMResidualOperatingCurrent.setDescription('**NOTE:This object is obsolete.\n            Its functionality was implemented by existing RCM sensor thresholds.\n            The Residual Operating Current (Threshold) for the RCM State sensor.\n            For inlets without an RCM, any attempt to access this OID will return\n            NoSuchInstance error. The value of this OID is in milliamps.')
inletPoleConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 5), )
if mibBuilder.loadTexts: inletPoleConfigurationTable.setStatus('current')
if mibBuilder.loadTexts: inletPoleConfigurationTable.setDescription('A list of inlet pole configuration entries. The number of\n            entries is given by the value of inletPoleCount for the inlet.')
inletPoleConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 5, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "inletId"), (0, "PDU2-MIB", "inletPoleIndex"))
if mibBuilder.loadTexts: inletPoleConfigurationEntry.setStatus('current')
if mibBuilder.loadTexts: inletPoleConfigurationEntry.setDescription('An entry containing parameters for a particular inlet pole.')
inletPoleLine = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 5, 1, 1), LineEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletPoleLine.setStatus('current')
if mibBuilder.loadTexts: inletPoleLine.setDescription('The phase for this inlet pole.')
inletPoleNode = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletPoleNode.setStatus('current')
if mibBuilder.loadTexts: inletPoleNode.setDescription('The node to which this inlet pole is connected')
inletSensorConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 4), )
if mibBuilder.loadTexts: inletSensorConfigurationTable.setStatus('current')
if mibBuilder.loadTexts: inletSensorConfigurationTable.setDescription('A list of configuration entries for an inlet sensor.')
inletSensorConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 4, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "inletId"), (0, "PDU2-MIB", "sensorType"))
if mibBuilder.loadTexts: inletSensorConfigurationEntry.setStatus('current')
if mibBuilder.loadTexts: inletSensorConfigurationEntry.setDescription('An entry containing objects for configuring an inlet sensor.')
inletSensorLogAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 4, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletSensorLogAvailable.setStatus('current')
if mibBuilder.loadTexts: inletSensorLogAvailable.setDescription('Is data logging enabled for the sensor?')
inletSensorUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 4, 1, 6), SensorUnitsEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletSensorUnits.setStatus('current')
if mibBuilder.loadTexts: inletSensorUnits.setDescription('The unit in which the sensor reading is reported.\n            This parameter does not apply to sensors without numerical reading.')
inletSensorDecimalDigits = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 4, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletSensorDecimalDigits.setStatus('current')
if mibBuilder.loadTexts: inletSensorDecimalDigits.setDescription('The number of digits displayed to the right of the decimal point.\n            This parameter does not apply to sensors without numerical reading.')
inletSensorAccuracy = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 4, 1, 8), HundredthsOfAPercentage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletSensorAccuracy.setStatus('deprecated')
if mibBuilder.loadTexts: inletSensorAccuracy.setDescription('The accuracy: the maximum relative difference (in percent) between\n            measurement and the actual value.\n            This parameter does not apply to sensors without numerical reading.')
inletSensorResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 4, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletSensorResolution.setStatus('current')
if mibBuilder.loadTexts: inletSensorResolution.setDescription('The resolution: the minimum difference between any two measured values\n            The value of this OID variable should be scaled by\n            inletSensorDecimalDigits.  For example, if the value is 1 and\n            inletSensorDecimalDigits is 2, then actual value is 0.01.\n            This parameter does not apply to sensors without numerical reading.')
inletSensorTolerance = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 4, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletSensorTolerance.setStatus('deprecated')
if mibBuilder.loadTexts: inletSensorTolerance.setDescription('The tolerance: the maximum difference between measurement and the\n            actual value. The value of this OID variable should be scaled by\n            (inletSensorDecimalDigits + 1).  For example, if the value is 50 and\n            inletSensorDecimalDigits is 2, then actual value is 0.05.\n            This parameter does not apply to sensors without numerical reading.')
inletSensorMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 4, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletSensorMaximum.setStatus('current')
if mibBuilder.loadTexts: inletSensorMaximum.setDescription('The largest possible reading as an unsigned integer.\n            The value of this OID variable should be scaled by\n            inletSensorDecimalDigits.  For example, if the value is 1 and\n            inletSensorDecimalDigits is 2, then actual value is 0.01.\n            The value is clamped if the scaled maximum exceeds 4294967295. It\n            is undefined for sensors which can have negative readings.\n            This parameter does not apply to sensors without numerical reading.')
inletSensorMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 4, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletSensorMinimum.setStatus('current')
if mibBuilder.loadTexts: inletSensorMinimum.setDescription('The smallest possible reading as an unsigned integer.\n            The value of this OID variable should be scaled by\n            inletSensorDecimalDigits.  For example, if the value is 1 and\n            inletSensorDecimalDigits is 2, then actual value is 0.01.\n            The value is undefined for sensors which can have negative readings.\n            This parameter does not apply to sensors without numerical reading.')
inletSensorHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 4, 1, 13), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletSensorHysteresis.setStatus('current')
if mibBuilder.loadTexts: inletSensorHysteresis.setDescription('The hysteresis used when crossing a threshold towards the normal state.\n            The value of this OID variable should be scaled by\n            inletSensorDecimalDigits.  For example, if the value is 1 and\n            inletSensorDecimalDigits is 2, then actual value is 0.01.\n            This parameter does not apply to sensors without numerical reading.')
inletSensorStateChangeDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 4, 1, 14), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletSensorStateChangeDelay.setStatus('current')
if mibBuilder.loadTexts: inletSensorStateChangeDelay.setDescription('The delay measured in samples before a state is asserted.\n            If the value is zero, then the state is asserted as soon as\n            it is detected; if it is non-zero, say n, then the assertion\n            condition must exist for n+1 consecutive samples before the\n            event is reported.\n            This parameter does not apply to sensors without numerical reading.')
inletSensorLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 4, 1, 21), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletSensorLowerCriticalThreshold.setStatus('current')
if mibBuilder.loadTexts: inletSensorLowerCriticalThreshold.setDescription('The lower critical threshold as an unsigned integer.\n            The value of this OID variable should be scaled by\n            inletSensorDecimalDigits.  For example, if the value is 1 and\n            inletSensorDecimalDigits is 2, then actual value is 0.01.\n            The value is clamped if the scaled threshold exceeds 4294967295. It\n            is undefined for sensors which can have negative readings.\n            This parameter does not apply to sensors without numerical reading.')
inletSensorLowerWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 4, 1, 22), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletSensorLowerWarningThreshold.setStatus('current')
if mibBuilder.loadTexts: inletSensorLowerWarningThreshold.setDescription('The lower warning threshold as an unsigned integer.\n            The value of this OID variable should be scaled by\n            inletSensorDecimalDigits.  For example, if the value is 1 and\n            inletSensorDecimalDigits is 2, then actual value is 0.01.\n            The value is clamped if the scaled threshold exceeds 4294967295. It\n            is undefined for sensors which can have negative readings.\n            This parameter does not apply to sensors without numerical reading.')
inletSensorUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 4, 1, 23), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletSensorUpperCriticalThreshold.setStatus('current')
if mibBuilder.loadTexts: inletSensorUpperCriticalThreshold.setDescription('The upper critical threshold as an unsigned integer.\n            The value of this OID variable should be scaled by\n            inletSensorDecimalDigits.  For example, if the value is 1 and\n            inletSensorDecimalDigits is 2, then actual value is 0.01.\n            The value is clamped if the scaled threshold exceeds 4294967295. It\n            is undefined for sensors which can have negative readings.\n            This parameter does not apply to sensors without numerical reading.')
inletSensorUpperWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 4, 1, 24), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletSensorUpperWarningThreshold.setStatus('current')
if mibBuilder.loadTexts: inletSensorUpperWarningThreshold.setDescription('The upper warning threshold as an unsigned integer.\n            The value of this OID variable should be scaled by\n            inletSensorDecimalDigits.  For example, if the value is 1 and\n            inletSensorDecimalDigits is 2, then actual value is 0.01.\n            The value is clamped if the scaled threshold exceeds 4294967295. It\n            is undefined for sensors which can have negative readings.\n            This parameter does not apply to sensors without numerical reading.')
inletSensorEnabledThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 4, 1, 25), Bits().clone(namedValues=NamedValues(("lowerCritical", 0), ("lowerWarning", 1), ("upperWarning", 2), ("upperCritical", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletSensorEnabledThresholds.setStatus('current')
if mibBuilder.loadTexts: inletSensorEnabledThresholds.setDescription('A bit string indicating which thresholds are enabled.\n            This parameter does not apply to sensors without numerical reading.')
inletSensorSignedMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 4, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletSensorSignedMaximum.setStatus('current')
if mibBuilder.loadTexts: inletSensorSignedMaximum.setDescription('The largest possible reading as a signed integer.\n            The value of this OID variable should be scaled by\n            inletSensorDecimalDigits.  For example, if the value is 1 and\n            inletSensorDecimalDigits is 2, then actual value is 0.01.\n            The value is undefined for sensors whose range exceeds the\n            Integer32 range (-2147483648 .. 2147483647).\n            This parameter does not apply to sensors without numerical reading.')
inletSensorSignedMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 4, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletSensorSignedMinimum.setStatus('current')
if mibBuilder.loadTexts: inletSensorSignedMinimum.setDescription('The smallest possible reading as a signed integer.\n            The value of this OID variable should be scaled by\n            inletSensorDecimalDigits.  For example, if the value is 1 and\n            inletSensorDecimalDigits is 2, then actual value is 0.01.\n            This value determines whether to use the signed or unsigned threshold\n            and value columns: If the minimum is below zero the sensor can have\n            negative readings and the signed columns should be used.\n            This parameter does not apply to sensors without numerical reading.')
inletSensorSignedLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 4, 1, 28), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletSensorSignedLowerCriticalThreshold.setStatus('current')
if mibBuilder.loadTexts: inletSensorSignedLowerCriticalThreshold.setDescription('The lower critical threshold as a signed integer.\n            The value of this OID variable should be scaled by\n            inletSensorDecimalDigits.  For example, if the value is 1 and\n            inletSensorDecimalDigits is 2, then actual value is 0.01.\n            The value is undefined for sensors whose range exceeds the\n            Integer32 range (-2147483648 .. 2147483647).\n            This parameter does not apply to sensors without numerical reading.')
inletSensorSignedLowerWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 4, 1, 29), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletSensorSignedLowerWarningThreshold.setStatus('current')
if mibBuilder.loadTexts: inletSensorSignedLowerWarningThreshold.setDescription('The lower warning threshold as a signed integer.\n            The value of this OID variable should be scaled by\n            inletSensorDecimalDigits.  For example, if the value is 1 and\n            inletSensorDecimalDigits is 2, then actual value is 0.01.\n            The value is undefined for sensors whose range exceeds the\n            Integer32 range (-2147483648 .. 2147483647).\n            This parameter does not apply to sensors without numerical reading.')
inletSensorSignedUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 4, 1, 30), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletSensorSignedUpperCriticalThreshold.setStatus('current')
if mibBuilder.loadTexts: inletSensorSignedUpperCriticalThreshold.setDescription('The upper critical threshold as a signed integer.\n            The value of this OID variable should be scaled by\n            inletSensorDecimalDigits.  For example, if the value is 1 and\n            inletSensorDecimalDigits is 2, then actual value is 0.01.\n            The value is undefined for sensors whose range exceeds the\n            Integer32 range (-2147483648 .. 2147483647).\n            This parameter does not apply to sensors without numerical reading.')
inletSensorSignedUpperWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 4, 1, 31), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletSensorSignedUpperWarningThreshold.setStatus('current')
if mibBuilder.loadTexts: inletSensorSignedUpperWarningThreshold.setDescription('The upper warning threshold as a signed integer.\n            The value of this OID variable should be scaled by\n            inletSensorDecimalDigits.  For example, if the value is 1 and\n            inletSensorDecimalDigits is 2, then actual value is 0.01.\n            The value is undefined for sensors whose range exceeds the\n            Integer32 range (-2147483648 .. 2147483647).\n            This parameter does not apply to sensors without numerical reading.')
inletPoleSensorConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 6), )
if mibBuilder.loadTexts: inletPoleSensorConfigurationTable.setStatus('current')
if mibBuilder.loadTexts: inletPoleSensorConfigurationTable.setDescription('A list of configuration entries for an inlet pole sensor.')
inletPoleSensorConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 6, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "inletId"), (0, "PDU2-MIB", "inletPoleIndex"), (0, "PDU2-MIB", "sensorType"))
if mibBuilder.loadTexts: inletPoleSensorConfigurationEntry.setStatus('current')
if mibBuilder.loadTexts: inletPoleSensorConfigurationEntry.setDescription('An entry containing objects for configuring an inlet pole sensor.')
inletPoleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: inletPoleIndex.setStatus('current')
if mibBuilder.loadTexts: inletPoleIndex.setDescription('A unique value for each inlet pole. Its value\n            ranges between 1 and the value of inletPoleCount.')
inletPoleSensorLogAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 6, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletPoleSensorLogAvailable.setStatus('current')
if mibBuilder.loadTexts: inletPoleSensorLogAvailable.setDescription('Is data logging enabled for the sensor?')
inletPoleSensorUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 6, 1, 6), SensorUnitsEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletPoleSensorUnits.setStatus('current')
if mibBuilder.loadTexts: inletPoleSensorUnits.setDescription('The unit in which the sensor reading is reported.\n            This parameter does not apply to sensors without numerical reading.')
inletPoleSensorDecimalDigits = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 6, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletPoleSensorDecimalDigits.setStatus('current')
if mibBuilder.loadTexts: inletPoleSensorDecimalDigits.setDescription('The number of digits displayed to the right of the decimal point.\n            This parameter does not apply to sensors without numerical reading.')
inletPoleSensorAccuracy = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 6, 1, 8), HundredthsOfAPercentage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletPoleSensorAccuracy.setStatus('deprecated')
if mibBuilder.loadTexts: inletPoleSensorAccuracy.setDescription('The accuracy: the maximum relative difference (in percent) between\n            measurement and the actual value.\n            This parameter does not apply to sensors without numerical reading.')
inletPoleSensorResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 6, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletPoleSensorResolution.setStatus('current')
if mibBuilder.loadTexts: inletPoleSensorResolution.setDescription('The resolution: the minimum difference between any two measured values\n            The value of this OID variable should be scaled by\n            inletPoleSensorDecimalDigits.  For example, if the value is 1 and\n            inletPoleSensorDecimalDigits is 2, then actual value is 0.01.\n            This parameter does not apply to sensors without numerical reading.')
inletPoleSensorTolerance = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 6, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletPoleSensorTolerance.setStatus('deprecated')
if mibBuilder.loadTexts: inletPoleSensorTolerance.setDescription('The tolerance: the maximum difference between measurement and the\n            actual value. The value of this OID variable should be scaled by\n            (inletPoleSensorDecimalDigits + 1).  For example, if the value is 50 and\n            inletPoleSensorDecimalDigits is 2, then actual value is 0.05.\n            This parameter does not apply to sensors without numerical reading.')
inletPoleSensorMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 6, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletPoleSensorMaximum.setStatus('current')
if mibBuilder.loadTexts: inletPoleSensorMaximum.setDescription('The largest possible reading as an unsigned integer.\n            The value of this OID variable should be scaled by\n            inletPoleSensorDecimalDigits.  For example, if the value is 1 and\n            inletPoleSensorDecimalDigits is 2, then actual value is 0.01.\n            The value is clamped if the scaled maximum exceeds 4294967295. It\n            is undefined for sensors which can have negative readings.\n            This parameter does not apply to sensors without numerical reading.')
inletPoleSensorMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 6, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletPoleSensorMinimum.setStatus('current')
if mibBuilder.loadTexts: inletPoleSensorMinimum.setDescription('The smallest possible reading as an unsigned integer.\n            The value of this OID variable should be scaled by\n            inletPoleSensorDecimalDigits.  For example, if the value is 1 and\n            inletPoleSensorDecimalDigits is 2, then actual value is 0.01.\n            The value is undefined for sensors which can have negative readings.\n            This parameter does not apply to sensors without numerical reading.')
inletPoleSensorHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 6, 1, 13), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletPoleSensorHysteresis.setStatus('current')
if mibBuilder.loadTexts: inletPoleSensorHysteresis.setDescription('The hysteresis used when crossing a threshold towards the normal state.\n            The value of this OID variable should be scaled by\n            inletPoleSensorDecimalDigits.  For example, if the value is 1 and\n            inletPoleSensorDecimalDigits is 2, then actual value is 0.01.\n            This parameter does not apply to sensors without numerical reading.')
inletPoleSensorStateChangeDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 6, 1, 14), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletPoleSensorStateChangeDelay.setStatus('current')
if mibBuilder.loadTexts: inletPoleSensorStateChangeDelay.setDescription('The delay measured in samples before a state is asserted.\n            If the value is zero, then the state is asserted as soon as\n            it is detected; if it is non-zero, say n, then the assertion\n            condition must exist for n+1 consecutive samples before the\n            event is reported.\n            This parameter does not apply to sensors without numerical reading.')
inletPoleSensorLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 6, 1, 21), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletPoleSensorLowerCriticalThreshold.setStatus('current')
if mibBuilder.loadTexts: inletPoleSensorLowerCriticalThreshold.setDescription('The lower critical threshold as an unsigned integer.\n            The value of this OID variable should be scaled by\n            inletPoleSensorDecimalDigits.  For example, if the value is 1 and\n            inletPoleSensorDecimalDigits is 2, then actual value is 0.01.\n            The value is clamped if the scaled threshold exceeds 4294967295. It\n            is undefined for sensors which can have negative readings.\n            This parameter does not apply to sensors without numerical reading.')
inletPoleSensorLowerWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 6, 1, 22), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletPoleSensorLowerWarningThreshold.setStatus('current')
if mibBuilder.loadTexts: inletPoleSensorLowerWarningThreshold.setDescription('The lower warning threshold as an unsigned integer.\n            The value of this OID variable should be scaled by\n            inletPoleSensorDecimalDigits.  For example, if the value is 1 and\n            inletPoleSensorDecimalDigits is 2, then actual value is 0.01.\n            The value is clamped if the scaled threshold exceeds 4294967295. It\n            is undefined for sensors which can have negative readings.\n            This parameter does not apply to sensors without numerical reading.')
inletPoleSensorUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 6, 1, 23), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletPoleSensorUpperCriticalThreshold.setStatus('current')
if mibBuilder.loadTexts: inletPoleSensorUpperCriticalThreshold.setDescription('The upper critical threshold as an unsigned integer.\n            The value of this OID variable should be scaled by\n            inletPoleSensorDecimalDigits.  For example, if the value is 1 and\n            inletPoleSensorDecimalDigits is 2, then actual value is 0.01.\n            The value is clamped if the scaled threshold exceeds 4294967295. It\n            is undefined for sensors which can have negative readings.\n            This parameter does not apply to sensors without numerical reading.')
inletPoleSensorUpperWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 6, 1, 24), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletPoleSensorUpperWarningThreshold.setStatus('current')
if mibBuilder.loadTexts: inletPoleSensorUpperWarningThreshold.setDescription('The upper warning threshold as an unsigned integer.\n            The value of this OID variable should be scaled by\n            inletPoleSensorDecimalDigits.  For example, if the value is 1 and\n            inletPoleSensorDecimalDigits is 2, then actual value is 0.01.\n            The value is clamped if the scaled threshold exceeds 4294967295. It\n            is undefined for sensors which can have negative readings.\n            This parameter does not apply to sensors without numerical reading.')
inletPoleSensorEnabledThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 6, 1, 25), Bits().clone(namedValues=NamedValues(("lowerCritical", 0), ("lowerWarning", 1), ("upperWarning", 2), ("upperCritical", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletPoleSensorEnabledThresholds.setStatus('current')
if mibBuilder.loadTexts: inletPoleSensorEnabledThresholds.setDescription('A bit string indicating which thresholds are enabled.\n            This parameter does not apply to sensors without numerical reading.')
inletPoleSensorSignedMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 6, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletPoleSensorSignedMaximum.setStatus('current')
if mibBuilder.loadTexts: inletPoleSensorSignedMaximum.setDescription('The largest possible reading as a signed integer.\n            The value of this OID variable should be scaled by\n            inletPoleSensorDecimalDigits.  For example, if the value is 1 and\n            inletPoleSensorDecimalDigits is 2, then actual value is 0.01.\n            The value is undefined for sensors whose range exceeds the\n            Integer32 range (-2147483648 .. 2147483647).\n            This parameter does not apply to sensors without numerical reading.')
inletPoleSensorSignedMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 6, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletPoleSensorSignedMinimum.setStatus('current')
if mibBuilder.loadTexts: inletPoleSensorSignedMinimum.setDescription('The smallest possible reading as a signed integer.\n            The value of this OID variable should be scaled by\n            inletPoleSensorDecimalDigits.  For example, if the value is 1 and\n            inletPoleSensorDecimalDigits is 2, then actual value is 0.01.\n            This value determines whether to use the signed or unsigned threshold\n            and value columns: If the minimum is below zero the sensor can have\n            negative readings and the signed columns should be used.\n            This parameter does not apply to sensors without numerical reading.')
inletPoleSensorSignedLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 6, 1, 28), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletPoleSensorSignedLowerCriticalThreshold.setStatus('current')
if mibBuilder.loadTexts: inletPoleSensorSignedLowerCriticalThreshold.setDescription('The lower critical threshold as a signed integer.\n            The value of this OID variable should be scaled by\n            inletPoleSensorDecimalDigits.  For example, if the value is 1 and\n            inletPoleSensorDecimalDigits is 2, then actual value is 0.01.\n            The value is undefined for sensors whose range exceeds the\n            Integer32 range (-2147483648 .. 2147483647).\n            This parameter does not apply to sensors without numerical reading.')
inletPoleSensorSignedLowerWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 6, 1, 29), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletPoleSensorSignedLowerWarningThreshold.setStatus('current')
if mibBuilder.loadTexts: inletPoleSensorSignedLowerWarningThreshold.setDescription('The lower warning threshold as a signed integer.\n            The value of this OID variable should be scaled by\n            inletPoleSensorDecimalDigits.  For example, if the value is 1 and\n            inletPoleSensorDecimalDigits is 2, then actual value is 0.01.\n            The value is undefined for sensors whose range exceeds the\n            Integer32 range (-2147483648 .. 2147483647).\n            This parameter does not apply to sensors without numerical reading.')
inletPoleSensorSignedUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 6, 1, 30), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletPoleSensorSignedUpperCriticalThreshold.setStatus('current')
if mibBuilder.loadTexts: inletPoleSensorSignedUpperCriticalThreshold.setDescription('The upper critical threshold as a signed integer.\n            The value of this OID variable should be scaled by\n            inletPoleSensorDecimalDigits.  For example, if the value is 1 and\n            inletPoleSensorDecimalDigits is 2, then actual value is 0.01.\n            The value is undefined for sensors whose range exceeds the\n            Integer32 range (-2147483648 .. 2147483647).\n            This parameter does not apply to sensors without numerical reading.')
inletPoleSensorSignedUpperWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 6, 1, 31), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletPoleSensorSignedUpperWarningThreshold.setStatus('current')
if mibBuilder.loadTexts: inletPoleSensorSignedUpperWarningThreshold.setDescription('The upper warning threshold as a signed integer.\n            The value of this OID variable should be scaled by\n            inletPoleSensorDecimalDigits.  For example, if the value is 1 and\n            inletPoleSensorDecimalDigits is 2, then actual value is 0.01.\n            The value is undefined for sensors whose range exceeds the\n            Integer32 range (-2147483648 .. 2147483647).\n            This parameter does not apply to sensors without numerical reading.')
overCurrentProtectorConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 3), )
if mibBuilder.loadTexts: overCurrentProtectorConfigurationTable.setStatus('current')
if mibBuilder.loadTexts: overCurrentProtectorConfigurationTable.setDescription('A list of overcurrent protector configuration entries. The number of\n            entries is given by the value of overCurrentProtectorCount for the PDU.')
overCurrentProtectorConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 3, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "overCurrentProtectorIndex"))
if mibBuilder.loadTexts: overCurrentProtectorConfigurationEntry.setStatus('current')
if mibBuilder.loadTexts: overCurrentProtectorConfigurationEntry.setDescription('An entry containing objects for a particular overcurrent protector.')
overCurrentProtectorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: overCurrentProtectorIndex.setStatus('current')
if mibBuilder.loadTexts: overCurrentProtectorIndex.setDescription('A unique value for each overcurrent protector. Its value\n            ranges between 1 and the value of overCurrentProtectorCount.')
overCurrentProtectorLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: overCurrentProtectorLabel.setStatus('current')
if mibBuilder.loadTexts: overCurrentProtectorLabel.setDescription('The label on the PDU identifying the overcurrent protector.')
overCurrentProtectorName = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 3, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: overCurrentProtectorName.setStatus('current')
if mibBuilder.loadTexts: overCurrentProtectorName.setDescription('The user-defined name.')
overCurrentProtectorType = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 3, 1, 4), OverCurrentProtectorTypeEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: overCurrentProtectorType.setStatus('current')
if mibBuilder.loadTexts: overCurrentProtectorType.setDescription('The type of overcurrent protector.')
overCurrentProtectorRatedCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: overCurrentProtectorRatedCurrent.setStatus('current')
if mibBuilder.loadTexts: overCurrentProtectorRatedCurrent.setDescription('The current rating.')
overCurrentProtectorPoleCount = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: overCurrentProtectorPoleCount.setStatus('current')
if mibBuilder.loadTexts: overCurrentProtectorPoleCount.setDescription('The number of overcurrent protector poles.')
overCurrentProtectorCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 3, 1, 9), Bits().clone(namedValues=NamedValues(("rmsCurrent", 0), ("peakCurrent", 1), ("trip", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: overCurrentProtectorCapabilities.setStatus('current')
if mibBuilder.loadTexts: overCurrentProtectorCapabilities.setDescription('A bit string indicating which overcurrent protector sensors are available.')
overCurrentProtectorPowerSource = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 3, 1, 10), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: overCurrentProtectorPowerSource.setStatus('current')
if mibBuilder.loadTexts: overCurrentProtectorPowerSource.setDescription("This object allows discovery of how the PDU is wired. It indicates the\n            overcurrent protector's power source which can be one of the following:\n             - an inlet\n             - another overcurrent protector\n             - a transfer switch\n\n            If the power source is an inlet, it contains the OID of\n            an inletLabel in the inletConfigurationTable. The indices of the OID can\n            then be used to reference other objects in the inlet tables.\n\n            If the power source is an overcurrent protector, it\n            contains the OID of an overCurrentProtectorLabel in the\n            overCurrentProtectorConfigurationTable. The indices of the OID can then be\n            used to reference other objects in the overcurrent protector tables.\n\n            If the power source is a transfer switch, it\n            contains the OID of a transferSwitchLabel in the\n            transferSwitchConfigurationTable. The indices of the OID can then be\n            used to reference other objects in the transfer switch tables.")
overCurrentProtectorPoleConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 5), )
if mibBuilder.loadTexts: overCurrentProtectorPoleConfigurationTable.setStatus('current')
if mibBuilder.loadTexts: overCurrentProtectorPoleConfigurationTable.setDescription('A list of overcurrent protector pole configuration entries. The number of\n            entries is given by the value of overCurrentProtectorPoleCount.')
overCurrentProtectorPoleConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 5, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "overCurrentProtectorIndex"), (0, "PDU2-MIB", "overCurrentProtectorPoleIndex"))
if mibBuilder.loadTexts: overCurrentProtectorPoleConfigurationEntry.setStatus('current')
if mibBuilder.loadTexts: overCurrentProtectorPoleConfigurationEntry.setDescription('An entry containing parameters for a particular overcurrent protector pole.')
overCurrentProtectorPoleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: overCurrentProtectorPoleIndex.setStatus('current')
if mibBuilder.loadTexts: overCurrentProtectorPoleIndex.setDescription('A unique value for each overcurrent protector pole. Its value\n            ranges between 1 and the value of overCurrentProtectorPoleCount.')
overCurrentProtectorPoleLine = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 5, 1, 2), LineEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: overCurrentProtectorPoleLine.setStatus('current')
if mibBuilder.loadTexts: overCurrentProtectorPoleLine.setDescription('The phase for this overcurrent protector pole.')
overCurrentProtectorPoleInNode = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: overCurrentProtectorPoleInNode.setStatus('current')
if mibBuilder.loadTexts: overCurrentProtectorPoleInNode.setDescription('The node to which this overcurrent protector pole input is connected')
overCurrentProtectorPoleOutNode = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: overCurrentProtectorPoleOutNode.setStatus('current')
if mibBuilder.loadTexts: overCurrentProtectorPoleOutNode.setDescription('The node to which this overcurrent protector pole output is connected')
overCurrentProtectorSensorConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 4), )
if mibBuilder.loadTexts: overCurrentProtectorSensorConfigurationTable.setStatus('current')
if mibBuilder.loadTexts: overCurrentProtectorSensorConfigurationTable.setDescription('A list of overcurrent protector sensor configuration entries.')
overCurrentProtectorSensorConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 4, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "overCurrentProtectorIndex"), (0, "PDU2-MIB", "sensorType"))
if mibBuilder.loadTexts: overCurrentProtectorSensorConfigurationEntry.setStatus('current')
if mibBuilder.loadTexts: overCurrentProtectorSensorConfigurationEntry.setDescription('An overcurrent protector sensor entry containing objects for a\n            particular overcurrent protector sensor.')
overCurrentProtectorSensorLogAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 4, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: overCurrentProtectorSensorLogAvailable.setStatus('current')
if mibBuilder.loadTexts: overCurrentProtectorSensorLogAvailable.setDescription('Is data logging enabled for this sensor?')
overCurrentProtectorSensorUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 4, 1, 6), SensorUnitsEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: overCurrentProtectorSensorUnits.setStatus('current')
if mibBuilder.loadTexts: overCurrentProtectorSensorUnits.setDescription('The unit in which the sensor reading is reported.\n            This parameter does not apply to sensors without numerical reading.')
overCurrentProtectorSensorDecimalDigits = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 4, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: overCurrentProtectorSensorDecimalDigits.setStatus('current')
if mibBuilder.loadTexts: overCurrentProtectorSensorDecimalDigits.setDescription('The number of digits displayed to the right of the decimal point.\n            This parameter does not apply to sensors without numerical reading.')
overCurrentProtectorSensorAccuracy = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 4, 1, 8), HundredthsOfAPercentage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: overCurrentProtectorSensorAccuracy.setStatus('deprecated')
if mibBuilder.loadTexts: overCurrentProtectorSensorAccuracy.setDescription('The accuracy: the maximum relative difference (in percent) between\n            measurement and the actual value.\n            This parameter does not apply to sensors without numerical reading.')
overCurrentProtectorSensorResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 4, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: overCurrentProtectorSensorResolution.setStatus('current')
if mibBuilder.loadTexts: overCurrentProtectorSensorResolution.setDescription('The resolution: the minimum difference between any two measured values\n            The value of this OID variable should be scaled by\n            overCurrentProtectorSensorDecimalDigits. For example, if the value is 1 and\n            overCurrentProtectorSensorDecimalDigits is 2, then actual value is 0.01.\n            This parameter does not apply to sensors without numerical reading.')
overCurrentProtectorSensorTolerance = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 4, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: overCurrentProtectorSensorTolerance.setStatus('deprecated')
if mibBuilder.loadTexts: overCurrentProtectorSensorTolerance.setDescription('The tolerance: the maximum difference between measurement and the\n            actual value. The value of this OID variable should be scaled by\n            (overCurrentProtectorSensorDecimalDigits + 1).  For example, if the value is 50 and\n            overCurrentProtectorSensorDecimalDigits is 2, then actual value is 0.05.\n            This parameter does not apply to sensors without numerical reading.')
overCurrentProtectorSensorMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 4, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: overCurrentProtectorSensorMaximum.setStatus('current')
if mibBuilder.loadTexts: overCurrentProtectorSensorMaximum.setDescription('The largest possible reading as an unsigned integer.\n            The value of this OID variable should be scaled by\n            overCurrentProtectorSensorDecimalDigits.  For example, if the value is 1 and\n            overCurrentProtectorSensorDecimalDigits is 2, then actual value is 0.01.\n            The value is clamped if the scaled maximum exceeds 4294967295. It\n            is undefined for sensors which can have negative readings.\n            This parameter does not apply to sensors without numerical reading.')
overCurrentProtectorSensorMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 4, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: overCurrentProtectorSensorMinimum.setStatus('current')
if mibBuilder.loadTexts: overCurrentProtectorSensorMinimum.setDescription('The smallest possible reading as an unsigned integer.\n            The value of this OID variable should be scaled by\n            overCurrentProtectorSensorDecimalDigits.  For example, if the value is 1 and\n            overCurrentProtectorSensorDecimalDigits is 2, then actual value is 0.01.\n            The value is undefined for sensors which can have negative readings.\n            This parameter does not apply to sensors without numerical reading.')
overCurrentProtectorSensorHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 4, 1, 13), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: overCurrentProtectorSensorHysteresis.setStatus('current')
if mibBuilder.loadTexts: overCurrentProtectorSensorHysteresis.setDescription('The hysteresis used when crossing a threshold towards the normal state.\n            The value of this OID variable should be scaled by\n            overCurrentProtectorSensorDecimalDigits.  For example, if the value is 1 and\n            overCurrentProtectorSensorDecimalDigits is 2, then actual value is 0.01.\n            This parameter does not apply to sensors without numerical reading.')
overCurrentProtectorSensorStateChangeDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 4, 1, 14), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: overCurrentProtectorSensorStateChangeDelay.setStatus('current')
if mibBuilder.loadTexts: overCurrentProtectorSensorStateChangeDelay.setDescription('The delay measured in samples before a state is asserted.\n            If the value is zero, then the state is asserted as soon as\n            it is detected; if it is non-zero, say n, then the assertion\n            condition must exist for n+1 consecutive samples before the\n            event is reported.\n            This parameter does not apply to sensors without numerical reading.')
overCurrentProtectorSensorLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 4, 1, 21), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: overCurrentProtectorSensorLowerCriticalThreshold.setStatus('current')
if mibBuilder.loadTexts: overCurrentProtectorSensorLowerCriticalThreshold.setDescription('The lower critical threshold as an unsigned integer.\n            The value of this OID variable should be scaled by\n            overCurrentProtectorSensorDecimalDigits.  For example, if the value is 1 and\n            overCurrentProtectorSensorDecimalDigits is 2, then actual value is 0.01.\n            The value is clamped if the scaled threshold exceeds 4294967295. It\n            is undefined for sensors which can have negative readings.\n            This parameter does not apply to sensors without numerical reading.')
overCurrentProtectorSensorLowerWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 4, 1, 22), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: overCurrentProtectorSensorLowerWarningThreshold.setStatus('current')
if mibBuilder.loadTexts: overCurrentProtectorSensorLowerWarningThreshold.setDescription('The lower warning threshold as an unsigned integer.\n            The value of this OID variable should be scaled by\n            overCurrentProtectorSensorDecimalDigits.  For example, if the value is 1 and\n            overCurrentProtectorSensorDecimalDigits is 2, then actual value is 0.01.\n            The value is clamped if the scaled threshold exceeds 4294967295. It\n            is undefined for sensors which can have negative readings.\n            This parameter does not apply to sensors without numerical reading.')
overCurrentProtectorSensorUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 4, 1, 23), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: overCurrentProtectorSensorUpperCriticalThreshold.setStatus('current')
if mibBuilder.loadTexts: overCurrentProtectorSensorUpperCriticalThreshold.setDescription('The upper critical threshold as an unsigned integer.\n            The value of this OID variable should be scaled by\n            overCurrentProtectorSensorDecimalDigits.  For example, if the value is 1 and\n            overCurrentProtectorSensorDecimalDigits is 2, then actual value is 0.01.\n            The value is clamped if the scaled threshold exceeds 4294967295. It\n            is undefined for sensors which can have negative readings.\n            This parameter does not apply to sensors without numerical reading.')
overCurrentProtectorSensorUpperWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 4, 1, 24), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: overCurrentProtectorSensorUpperWarningThreshold.setStatus('current')
if mibBuilder.loadTexts: overCurrentProtectorSensorUpperWarningThreshold.setDescription('The upper warning threshold as an unsigned integer.\n            The value of this OID variable should be scaled by\n            overCurrentProtectorSensorDecimalDigits.  For example, if the value is 1 and\n            overCurrentProtectorSensorDecimalDigits is 2, then actual value is 0.01.\n            The value is clamped if the scaled threshold exceeds 4294967295. It\n            is undefined for sensors which can have negative readings.\n            This parameter does not apply to sensors without numerical reading.')
overCurrentProtectorSensorEnabledThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 4, 1, 25), Bits().clone(namedValues=NamedValues(("lowerCritical", 0), ("lowerWarning", 1), ("upperWarning", 2), ("upperCritical", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: overCurrentProtectorSensorEnabledThresholds.setStatus('current')
if mibBuilder.loadTexts: overCurrentProtectorSensorEnabledThresholds.setDescription('A bit string indicating which thresholds are enabled.\n            This parameter does not apply to sensors without numerical reading.')
overCurrentProtectorSensorSignedMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 4, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: overCurrentProtectorSensorSignedMaximum.setStatus('current')
if mibBuilder.loadTexts: overCurrentProtectorSensorSignedMaximum.setDescription('The largest possible reading as a signed integer.\n            The value of this OID variable should be scaled by\n            overCurrentProtectorSensorDecimalDigits.  For example, if the value is 1 and\n            overCurrentProtectorSensorDecimalDigits is 2, then actual value is 0.01.\n            The value is undefined for sensors whose range exceeds the\n            Integer32 range (-2147483648 .. 2147483647).\n            This parameter does not apply to sensors without numerical reading.')
overCurrentProtectorSensorSignedMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 4, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: overCurrentProtectorSensorSignedMinimum.setStatus('current')
if mibBuilder.loadTexts: overCurrentProtectorSensorSignedMinimum.setDescription('The smallest possible reading as a signed integer.\n            The value of this OID variable should be scaled by\n            overCurrentProtectorSensorDecimalDigits.  For example, if the value is 1 and\n            overCurrentProtectorSensorDecimalDigits is 2, then actual value is 0.01.\n            This value determines whether to use the signed or unsigned threshold\n            and value columns: If the minimum is below zero the sensor can have\n            negative readings and the signed columns should be used.\n            This parameter does not apply to sensors without numerical reading.')
overCurrentProtectorSensorSignedLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 4, 1, 28), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: overCurrentProtectorSensorSignedLowerCriticalThreshold.setStatus('current')
if mibBuilder.loadTexts: overCurrentProtectorSensorSignedLowerCriticalThreshold.setDescription('The lower critical threshold as a signed integer.\n            The value of this OID variable should be scaled by\n            overCurrentProtectorSensorDecimalDigits.  For example, if the value is 1 and\n            overCurrentProtectorSensorDecimalDigits is 2, then actual value is 0.01.\n            The value is undefined for sensors whose range exceeds the\n            Integer32 range (-2147483648 .. 2147483647).\n            This parameter does not apply to sensors without numerical reading.')
overCurrentProtectorSensorSignedLowerWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 4, 1, 29), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: overCurrentProtectorSensorSignedLowerWarningThreshold.setStatus('current')
if mibBuilder.loadTexts: overCurrentProtectorSensorSignedLowerWarningThreshold.setDescription('The lower warning threshold as a signed integer.\n            The value of this OID variable should be scaled by\n            overCurrentProtectorSensorDecimalDigits.  For example, if the value is 1 and\n            overCurrentProtectorSensorDecimalDigits is 2, then actual value is 0.01.\n            The value is undefined for sensors whose range exceeds the\n            Integer32 range (-2147483648 .. 2147483647).\n            This parameter does not apply to sensors without numerical reading.')
overCurrentProtectorSensorSignedUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 4, 1, 30), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: overCurrentProtectorSensorSignedUpperCriticalThreshold.setStatus('current')
if mibBuilder.loadTexts: overCurrentProtectorSensorSignedUpperCriticalThreshold.setDescription('The upper critical threshold as a signed integer.\n            The value of this OID variable should be scaled by\n            overCurrentProtectorSensorDecimalDigits.  For example, if the value is 1 and\n            overCurrentProtectorSensorDecimalDigits is 2, then actual value is 0.01.\n            The value is undefined for sensors whose range exceeds the\n            Integer32 range (-2147483648 .. 2147483647).\n            This parameter does not apply to sensors without numerical reading.')
overCurrentProtectorSensorSignedUpperWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 4, 1, 31), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: overCurrentProtectorSensorSignedUpperWarningThreshold.setStatus('current')
if mibBuilder.loadTexts: overCurrentProtectorSensorSignedUpperWarningThreshold.setDescription('The upper warning threshold as a signed integer.\n            The value of this OID variable should be scaled by\n            overCurrentProtectorSensorDecimalDigits.  For example, if the value is 1 and\n            overCurrentProtectorSensorDecimalDigits is 2, then actual value is 0.01.\n            The value is undefined for sensors whose range exceeds the\n            Integer32 range (-2147483648 .. 2147483647).\n            This parameter does not apply to sensors without numerical reading.')
outletConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 3), )
if mibBuilder.loadTexts: outletConfigurationTable.setStatus('current')
if mibBuilder.loadTexts: outletConfigurationTable.setDescription('A list of outlet configuration entries. The number of\n            entries is given by the value of outletCount for the PDU.')
outletConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 3, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "outletId"))
if mibBuilder.loadTexts: outletConfigurationEntry.setStatus('current')
if mibBuilder.loadTexts: outletConfigurationEntry.setDescription('An outlet entry containing parameters for a particular outlet.')
outletId = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: outletId.setStatus('current')
if mibBuilder.loadTexts: outletId.setDescription('A unique value for each outlet. Its value\n            ranges between 1 and the value of outletCount.')
outletLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletLabel.setStatus('current')
if mibBuilder.loadTexts: outletLabel.setDescription('The label on the PDU identifying the outlet.')
outletName = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 3, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletName.setStatus('current')
if mibBuilder.loadTexts: outletName.setDescription('The user-defined name.')
outletReceptacle = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 3, 1, 4), ReceptacleTypeEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletReceptacle.setStatus('current')
if mibBuilder.loadTexts: outletReceptacle.setDescription('The receptacle type.\n            Note: ReceptacleTypeEnumeration is no longer updated, unlisted receptacles\n            will be listed as receptacleOTHER. Use outletReceptacleDescriptor to\n            reliably determine the receptacle type.')
outletPoleCount = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPoleCount.setStatus('current')
if mibBuilder.loadTexts: outletPoleCount.setDescription('The number of poles.')
outletRatedVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletRatedVoltage.setStatus('current')
if mibBuilder.loadTexts: outletRatedVoltage.setDescription('The outlet voltage rating.')
outletRatedCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 3, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletRatedCurrent.setStatus('current')
if mibBuilder.loadTexts: outletRatedCurrent.setDescription('The outlet current rating.')
outletRatedVA = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 3, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletRatedVA.setStatus('current')
if mibBuilder.loadTexts: outletRatedVA.setDescription('The outlet VA (VoltAmps) rating.')
outletDeviceCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 3, 1, 10), Bits().clone(namedValues=NamedValues(("rmsCurrent", 0), ("peakCurrent", 1), ("unbalancedCurrent", 2), ("rmsVoltage", 3), ("activePower", 4), ("apparentPower", 5), ("powerFactor", 6), ("activeEnergy", 7), ("apparentEnergy", 8), ("onOff", 13), ("frequency", 22), ("phaseAngle", 23)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletDeviceCapabilities.setStatus('current')
if mibBuilder.loadTexts: outletDeviceCapabilities.setDescription('A bit string indicating which outlet sensors are available.')
outletPoleCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 3, 1, 11), Bits().clone(namedValues=NamedValues(("rmsCurrent", 0), ("peakCurrent", 1), ("rmsVoltage", 3), ("activePower", 4), ("apparentPower", 5), ("powerFactor", 6), ("activeEnergy", 7), ("apparentEnergy", 8), ("rmsVoltageLN", 24)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPoleCapabilities.setStatus('current')
if mibBuilder.loadTexts: outletPoleCapabilities.setDescription('A bit string indicating which outlet pole sensors are available.')
outletPowerCyclingPowerOffPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 3, 1, 12), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletPowerCyclingPowerOffPeriod.setStatus('current')
if mibBuilder.loadTexts: outletPowerCyclingPowerOffPeriod.setDescription('The power-off period when an outlet is cycled.\n            Overrides the global value if outletUseGlobalPowerCyclingPowerOffPeriod\n            is false.\n            Specified in seconds, 1 <= value <= 3600.')
outletStateOnStartup = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 3, 1, 13), OutletStateOnStartupEnumeration()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletStateOnStartup.setStatus('current')
if mibBuilder.loadTexts: outletStateOnStartup.setDescription('The outlet state on device startup.\n            This value is ignored if relayBehaviorOnPowerLoss is set to latching.')
outletUseGlobalPowerCyclingPowerOffPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 3, 1, 14), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletUseGlobalPowerCyclingPowerOffPeriod.setStatus('current')
if mibBuilder.loadTexts: outletUseGlobalPowerCyclingPowerOffPeriod.setDescription('Indicates which power-off period to use when the outlet is cycled:\n             - true: use globalOutletPowerCyclingPowerOffPeriod\n             - false: use outletPowerCyclingPowerOffPeriod')
outletSwitchable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 3, 1, 28), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletSwitchable.setStatus('current')
if mibBuilder.loadTexts: outletSwitchable.setDescription('Is this outlet switchable?')
outletReceptacleDescriptor = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 3, 1, 29), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletReceptacleDescriptor.setStatus('current')
if mibBuilder.loadTexts: outletReceptacleDescriptor.setDescription('The outlet receptacle type as a string.')
outletNonCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 3, 1, 30), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletNonCritical.setStatus('current')
if mibBuilder.loadTexts: outletNonCritical.setDescription('Is this outlet non-critical? Non-critical outlets will be switched\n            off when load shedding is enabled.')
outletSequenceDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 3, 1, 32), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletSequenceDelay.setStatus('current')
if mibBuilder.loadTexts: outletSequenceDelay.setDescription('The time interval between switching on this outlet and the next outlet in the\n            outlet sequence.\n            This applies to the following operations.\n              1) Switch all outlets on operation is executed\n              2) Power to the PDU is cycled\n            It is specified in seconds, 0 <= value <= 3600 seconds.\n            The effective time interval used can never be less than the inrushGuardDelay\n            defined in the unitConfigurationTable.')
outletPowerSource = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 3, 1, 33), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPowerSource.setStatus('current')
if mibBuilder.loadTexts: outletPowerSource.setDescription("This object allows discovery of how the PDU is wired. It indicates the\n            outlet's power source which can one of the following:\n             - an inlet\n             - an overcurrent protector\n             - a transfer switch\n\n            If the power source is an inlet, it contains the OID of\n            an inletLabel in the inletConfigurationTable. The indices of the OID can\n            then be used to reference other objects in the inlet tables.\n\n            If the power source is an overcurrent protector, it\n            contains the OID of an overCurrentProtectorLabel in the\n            overCurrentProtectorConfigurationTable. The indices of the OID can then be\n            used to reference other objects in the overcurrent protector tables.\n\n            If the power source is a transfer switch, it\n            contains the OID of a transferSwitchLabel in the\n            transferSwitchConfigurationTable. The indices of the OID can then be\n            used to reference other objects in the transfer switch tables.")
outletPoleConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 5), )
if mibBuilder.loadTexts: outletPoleConfigurationTable.setStatus('current')
if mibBuilder.loadTexts: outletPoleConfigurationTable.setDescription('A list of outlet pole configuration entries. The number of\n            entries is given by the value of outletPoleCount for the PDU.')
outletPoleConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 5, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "outletId"), (0, "PDU2-MIB", "outletPoleIndex"))
if mibBuilder.loadTexts: outletPoleConfigurationEntry.setStatus('current')
if mibBuilder.loadTexts: outletPoleConfigurationEntry.setDescription('An entry containing parameters for a particular outlet pole.')
outletPoleLine = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 5, 1, 1), LineEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPoleLine.setStatus('current')
if mibBuilder.loadTexts: outletPoleLine.setDescription('The phase for this outlet pole.')
outletPoleNode = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPoleNode.setStatus('current')
if mibBuilder.loadTexts: outletPoleNode.setDescription('The node to which this outlet pole is connected')
outletSensorConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 4), )
if mibBuilder.loadTexts: outletSensorConfigurationTable.setStatus('current')
if mibBuilder.loadTexts: outletSensorConfigurationTable.setDescription('A list of outlet sensor configuration entries.')
outletSensorConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 4, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "outletId"), (0, "PDU2-MIB", "sensorType"))
if mibBuilder.loadTexts: outletSensorConfigurationEntry.setStatus('current')
if mibBuilder.loadTexts: outletSensorConfigurationEntry.setDescription('An entry containing parameters for an outlet sensor.')
outletSensorLogAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 4, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletSensorLogAvailable.setStatus('current')
if mibBuilder.loadTexts: outletSensorLogAvailable.setDescription('Is data logging enabled for this sensor?')
outletSensorUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 4, 1, 6), SensorUnitsEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletSensorUnits.setStatus('current')
if mibBuilder.loadTexts: outletSensorUnits.setDescription('The unit in which the sensor reading is reported.\n            This parameter does not apply to sensors without numerical reading.')
outletSensorDecimalDigits = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 4, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletSensorDecimalDigits.setStatus('current')
if mibBuilder.loadTexts: outletSensorDecimalDigits.setDescription('The number of digits displayed to the right of the decimal point\n            This parameter does not apply to sensors without numerical reading.')
outletSensorAccuracy = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 4, 1, 8), HundredthsOfAPercentage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletSensorAccuracy.setStatus('deprecated')
if mibBuilder.loadTexts: outletSensorAccuracy.setDescription('The accuracy: the maximum relative difference (in percent) between\n            measurement and the actual value.\n            This parameter does not apply to sensors without numerical reading.')
outletSensorResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 4, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletSensorResolution.setStatus('current')
if mibBuilder.loadTexts: outletSensorResolution.setDescription('The resolution: the minimum difference between any two measured values\n            The value of this OID variable should be scaled by\n            outletSensorDecimalDigits.  For example, if the value is 1 and\n            outletSensorDecimalDigits is 2, then actual value is 0.01.\n            This parameter does not apply to sensors without numerical reading.')
outletSensorTolerance = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 4, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletSensorTolerance.setStatus('deprecated')
if mibBuilder.loadTexts: outletSensorTolerance.setDescription('The tolerance: the maximum difference between measurement and the\n            actual value. The value of this OID variable should be scaled by\n            (outletSensorDecimalDigits + 1).  For example, if the value is 50 and\n            outletSensorDecimalDigits is 2, then actual value is 0.05.\n            This parameter does not apply to sensors without numerical reading.')
outletSensorMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 4, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletSensorMaximum.setStatus('current')
if mibBuilder.loadTexts: outletSensorMaximum.setDescription('The largest possible reading as an unsigned integer.\n            The value of this OID variable should be scaled by\n            outletSensorDecimalDigits.  For example, if the value is 1 and\n            outletSensorDecimalDigits is 2, then actual value is 0.01.\n            The value is clamped if the scaled maximum exceeds 4294967295. It\n            is undefined for sensors which can have negative readings.\n            This parameter does not apply to sensors without numerical reading.')
outletSensorMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 4, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletSensorMinimum.setStatus('current')
if mibBuilder.loadTexts: outletSensorMinimum.setDescription('The smallest possible reading as an unsigned integer.\n            The value of this OID variable should be scaled by\n            outletSensorDecimalDigits.  For example, if the value is 1 and\n            outletSensorDecimalDigits is 2, then actual value is 0.01.\n            The value is undefined for sensors which can have negative readings.\n            This parameter does not apply to sensors without numerical reading.')
outletSensorHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 4, 1, 13), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletSensorHysteresis.setStatus('current')
if mibBuilder.loadTexts: outletSensorHysteresis.setDescription('The hysteresis used when crossing a threshold towards the normal state.\n            The value of this OID variable should be scaled by\n            outletSensorDecimalDigits.  For example, if the value is 1 and\n            outletSensorDecimalDigits is 2, then actual value is 0.01.\n            This parameter does not apply to sensors without numerical reading.')
outletSensorStateChangeDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 4, 1, 14), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletSensorStateChangeDelay.setStatus('current')
if mibBuilder.loadTexts: outletSensorStateChangeDelay.setDescription('The delay measured in samples before a state is asserted.\n            If the value is zero, then the state is asserted as soon as\n            it is detected; if it is non-zero, say n, then the assertion\n            condition must exist for n+1 consecutive samples before the\n            event is reported.\n            This parameter does not apply to sensors without numerical reading.')
outletSensorLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 4, 1, 21), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletSensorLowerCriticalThreshold.setStatus('current')
if mibBuilder.loadTexts: outletSensorLowerCriticalThreshold.setDescription('The lower critical threshold as an unsigned integer.\n            The value of this OID variable should be scaled by\n            outletSensorDecimalDigits.  For example, if the value is 1 and\n            outletSensorDecimalDigits is 2, then actual value is 0.01.\n            The value is clamped if the scaled threshold exceeds 4294967295. It\n            is undefined for sensors which can have negative readings.\n            This parameter does not apply to sensors without numerical reading.')
outletSensorLowerWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 4, 1, 22), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletSensorLowerWarningThreshold.setStatus('current')
if mibBuilder.loadTexts: outletSensorLowerWarningThreshold.setDescription('The lower warning threshold as an unsigned integer.\n            The value of this OID variable should be scaled by\n            outletSensorDecimalDigits.  For example, if the value is 1 and\n            outletSensorDecimalDigits is 2, then actual value is 0.01.\n            The value is clamped if the scaled threshold exceeds 4294967295. It\n            is undefined for sensors which can have negative readings.\n            This parameter does not apply to sensors without numerical reading.')
outletSensorUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 4, 1, 23), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletSensorUpperCriticalThreshold.setStatus('current')
if mibBuilder.loadTexts: outletSensorUpperCriticalThreshold.setDescription('The upper critical threshold as an unsigned integer.\n            The value of this OID variable should be scaled by\n            outletSensorDecimalDigits.  For example, if the value is 1 and\n            outletSensorDecimalDigits is 2, then actual value is 0.01.\n            The value is clamped if the scaled threshold exceeds 4294967295. It\n            is undefined for sensors which can have negative readings.\n            This parameter does not apply to sensors without numerical reading.')
outletSensorUpperWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 4, 1, 24), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletSensorUpperWarningThreshold.setStatus('current')
if mibBuilder.loadTexts: outletSensorUpperWarningThreshold.setDescription('The upper warning threshold as an unsigned integer.\n            The value of this OID variable should be scaled by\n            outletSensorDecimalDigits.  For example, if the value is 1 and\n            outletSensorDecimalDigits is 2, then actual value is 0.01.\n            The value is clamped if the scaled threshold exceeds 4294967295. It\n            is undefined for sensors which can have negative readings.\n            This parameter does not apply to sensors without numerical reading.')
outletSensorEnabledThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 4, 1, 25), Bits().clone(namedValues=NamedValues(("lowerCritical", 0), ("lowerWarning", 1), ("upperWarning", 2), ("upperCritical", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletSensorEnabledThresholds.setStatus('current')
if mibBuilder.loadTexts: outletSensorEnabledThresholds.setDescription('A bit string indicating which thresholds are enabled.\n            This parameter does not apply to sensors without numerical reading.')
outletSensorSignedMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 4, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletSensorSignedMaximum.setStatus('current')
if mibBuilder.loadTexts: outletSensorSignedMaximum.setDescription('The largest possible reading as a signed integer.\n            The value of this OID variable should be scaled by\n            outletSensorDecimalDigits.  For example, if the value is 1 and\n            outletSensorDecimalDigits is 2, then actual value is 0.01.\n            The value is undefined for sensors whose range exceeds the\n            Integer32 range (-2147483648 .. 2147483647).\n            This parameter does not apply to sensors without numerical reading.')
outletSensorSignedMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 4, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletSensorSignedMinimum.setStatus('current')
if mibBuilder.loadTexts: outletSensorSignedMinimum.setDescription('The smallest possible reading as a signed integer.\n            The value of this OID variable should be scaled by\n            outletSensorDecimalDigits.  For example, if the value is 1 and\n            outletSensorDecimalDigits is 2, then actual value is 0.01.\n            This value determines whether to use the signed or unsigned threshold\n            and value columns: If the minimum is below zero the sensor can have\n            negative readings and the signed columns should be used.\n            This parameter does not apply to sensors without numerical reading.')
outletSensorSignedLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 4, 1, 28), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletSensorSignedLowerCriticalThreshold.setStatus('current')
if mibBuilder.loadTexts: outletSensorSignedLowerCriticalThreshold.setDescription('The lower critical threshold as a signed integer.\n            The value of this OID variable should be scaled by\n            outletSensorDecimalDigits.  For example, if the value is 1 and\n            outletSensorDecimalDigits is 2, then actual value is 0.01.\n            The value is undefined for sensors whose range exceeds the\n            Integer32 range (-2147483648 .. 2147483647).\n            This parameter does not apply to sensors without numerical reading.')
outletSensorSignedLowerWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 4, 1, 29), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletSensorSignedLowerWarningThreshold.setStatus('current')
if mibBuilder.loadTexts: outletSensorSignedLowerWarningThreshold.setDescription('The lower warning threshold as a signed integer.\n            The value of this OID variable should be scaled by\n            outletSensorDecimalDigits.  For example, if the value is 1 and\n            outletSensorDecimalDigits is 2, then actual value is 0.01.\n            The value is undefined for sensors whose range exceeds the\n            Integer32 range (-2147483648 .. 2147483647).\n            This parameter does not apply to sensors without numerical reading.')
outletSensorSignedUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 4, 1, 30), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletSensorSignedUpperCriticalThreshold.setStatus('current')
if mibBuilder.loadTexts: outletSensorSignedUpperCriticalThreshold.setDescription('The upper critical threshold as a signed integer.\n            The value of this OID variable should be scaled by\n            outletSensorDecimalDigits.  For example, if the value is 1 and\n            outletSensorDecimalDigits is 2, then actual value is 0.01.\n            The value is undefined for sensors whose range exceeds the\n            Integer32 range (-2147483648 .. 2147483647).\n            This parameter does not apply to sensors without numerical reading.')
outletSensorSignedUpperWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 4, 1, 31), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletSensorSignedUpperWarningThreshold.setStatus('current')
if mibBuilder.loadTexts: outletSensorSignedUpperWarningThreshold.setDescription('The upper warning threshold as a signed integer.\n            The value of this OID variable should be scaled by\n            outletSensorDecimalDigits.  For example, if the value is 1 and\n            outletSensorDecimalDigits is 2, then actual value is 0.01.\n            The value is undefined for sensors whose range exceeds the\n            Integer32 range (-2147483648 .. 2147483647).\n            This parameter does not apply to sensors without numerical reading.')
outletPoleSensorConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 6), )
if mibBuilder.loadTexts: outletPoleSensorConfigurationTable.setStatus('current')
if mibBuilder.loadTexts: outletPoleSensorConfigurationTable.setDescription('A list of outlet pole sensor configuration entries.')
outletPoleSensorConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 6, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "outletId"), (0, "PDU2-MIB", "outletPoleIndex"), (0, "PDU2-MIB", "sensorType"))
if mibBuilder.loadTexts: outletPoleSensorConfigurationEntry.setStatus('current')
if mibBuilder.loadTexts: outletPoleSensorConfigurationEntry.setDescription('An entry containing objects for configuring an outlet pole sensor.')
outletPoleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: outletPoleIndex.setStatus('current')
if mibBuilder.loadTexts: outletPoleIndex.setDescription('A unique value for each outlet pole. Its value\n            ranges between 1 and the value of outletPoleCount.')
outletPoleSensorLogAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 6, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletPoleSensorLogAvailable.setStatus('current')
if mibBuilder.loadTexts: outletPoleSensorLogAvailable.setDescription('Is data logging enabled for the sensor?')
outletPoleSensorUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 6, 1, 6), SensorUnitsEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPoleSensorUnits.setStatus('current')
if mibBuilder.loadTexts: outletPoleSensorUnits.setDescription('The unit in which the sensor reading is reported.\n            This parameter does not apply to sensors without numerical reading.')
outletPoleSensorDecimalDigits = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 6, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPoleSensorDecimalDigits.setStatus('current')
if mibBuilder.loadTexts: outletPoleSensorDecimalDigits.setDescription('The number of digits displayed to the right of the decimal point.\n            This parameter does not apply to sensors without numerical reading.')
outletPoleSensorAccuracy = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 6, 1, 8), HundredthsOfAPercentage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPoleSensorAccuracy.setStatus('deprecated')
if mibBuilder.loadTexts: outletPoleSensorAccuracy.setDescription('The accuracy: the maximum relative difference (in percent) between\n            measurement and the actual value.\n            This parameter does not apply to sensors without numerical reading.')
outletPoleSensorResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 6, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPoleSensorResolution.setStatus('current')
if mibBuilder.loadTexts: outletPoleSensorResolution.setDescription('The resolution: the minimum difference between any two measured values\n            The value of this OID variable should be scaled by\n            outletPoleSensorDecimalDigits.  For example, if the value is 1 and\n            outletPoleSensorDecimalDigits is 2, then actual value is 0.01.\n            This parameter does not apply to sensors without numerical reading.')
outletPoleSensorTolerance = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 6, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPoleSensorTolerance.setStatus('deprecated')
if mibBuilder.loadTexts: outletPoleSensorTolerance.setDescription('The tolerance: the maximum difference between measurement and the\n            actual value. The value of this OID variable should be scaled by\n            (outletPoleSensorDecimalDigits + 1).  For example, if the value is 50 and\n            outletPoleSensorDecimalDigits is 2, then actual value is 0.05.\n            This parameter does not apply to sensors without numerical reading.')
outletPoleSensorMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 6, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPoleSensorMaximum.setStatus('current')
if mibBuilder.loadTexts: outletPoleSensorMaximum.setDescription('The largest possible reading as an unsigned integer.\n            The value of this OID variable should be scaled by\n            outletPoleSensorDecimalDigits.  For example, if the value is 1 and\n            outletPoleSensorDecimalDigits is 2, then actual value is 0.01.\n            The value is clamped if the scaled maximum exceeds 4294967295. It\n            is undefined for sensors which can have negative readings.\n            This parameter does not apply to sensors without numerical reading.')
outletPoleSensorMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 6, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPoleSensorMinimum.setStatus('current')
if mibBuilder.loadTexts: outletPoleSensorMinimum.setDescription('The smallest possible reading as an unsigned integer.\n            The value of this OID variable should be scaled by\n            outletPoleSensorDecimalDigits.  For example, if the value is 1 and\n            outletPoleSensorDecimalDigits is 2, then actual value is 0.01.\n            The value is undefined for sensors which can have negative readings.\n            This parameter does not apply to sensors without numerical reading.')
outletPoleSensorHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 6, 1, 13), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletPoleSensorHysteresis.setStatus('current')
if mibBuilder.loadTexts: outletPoleSensorHysteresis.setDescription('The hysteresis used when crossing a threshold towards the normal state.\n            The value of this OID variable should be scaled by\n            outletPoleSensorDecimalDigits.  For example, if the value is 1 and\n            outletPoleSensorDecimalDigits is 2, then actual value is 0.01.\n            This parameter does not apply to sensors without numerical reading.')
outletPoleSensorStateChangeDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 6, 1, 14), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletPoleSensorStateChangeDelay.setStatus('current')
if mibBuilder.loadTexts: outletPoleSensorStateChangeDelay.setDescription('The delay measured in samples before a state is asserted.\n            If the value is zero, then the state is asserted as soon as\n            it is detected; if it is non-zero, say n, then the assertion\n            condition must exist for n+1 consecutive samples before the\n            event is reported.\n            This parameter does not apply to sensors without numerical reading.')
outletPoleSensorLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 6, 1, 21), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletPoleSensorLowerCriticalThreshold.setStatus('current')
if mibBuilder.loadTexts: outletPoleSensorLowerCriticalThreshold.setDescription('The lower critical threshold as an unsigned integer.\n            The value of this OID variable should be scaled by\n            outletPoleSensorDecimalDigits.  For example, if the value is 1 and\n            outletPoleSensorDecimalDigits is 2, then actual value is 0.01.\n            The value is clamped if the scaled threshold exceeds 4294967295. It\n            is undefined for sensors which can have negative readings.\n            This parameter does not apply to sensors without numerical reading.')
outletPoleSensorLowerWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 6, 1, 22), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletPoleSensorLowerWarningThreshold.setStatus('current')
if mibBuilder.loadTexts: outletPoleSensorLowerWarningThreshold.setDescription('The lower warning threshold as an unsigned integer.\n            The value of this OID variable should be scaled by\n            outletPoleSensorDecimalDigits.  For example, if the value is 1 and\n            outletPoleSensorDecimalDigits is 2, then actual value is 0.01.\n            The value is clamped if the scaled threshold exceeds 4294967295. It\n            is undefined for sensors which can have negative readings.\n            This parameter does not apply to sensors without numerical reading.')
outletPoleSensorUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 6, 1, 23), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletPoleSensorUpperCriticalThreshold.setStatus('current')
if mibBuilder.loadTexts: outletPoleSensorUpperCriticalThreshold.setDescription('The upper critical threshold as an unsigned integer.\n            The value of this OID variable should be scaled by\n            outletPoleSensorDecimalDigits.  For example, if the value is 1 and\n            outletPoleSensorDecimalDigits is 2, then actual value is 0.01.\n            The value is clamped if the scaled threshold exceeds 4294967295. It\n            is undefined for sensors which can have negative readings.\n            This parameter does not apply to sensors without numerical reading.')
outletPoleSensorUpperWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 6, 1, 24), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletPoleSensorUpperWarningThreshold.setStatus('current')
if mibBuilder.loadTexts: outletPoleSensorUpperWarningThreshold.setDescription('The upper warning threshold as an unsigned integer.\n            The value of this OID variable should be scaled by\n            outletPoleSensorDecimalDigits.  For example, if the value is 1 and\n            outletPoleSensorDecimalDigits is 2, then actual value is 0.01.\n            The value is clamped if the scaled threshold exceeds 4294967295. It\n            is undefined for sensors which can have negative readings.\n            This parameter does not apply to sensors without numerical reading.')
outletPoleSensorEnabledThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 6, 1, 25), Bits().clone(namedValues=NamedValues(("lowerCritical", 0), ("lowerWarning", 1), ("upperWarning", 2), ("upperCritical", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletPoleSensorEnabledThresholds.setStatus('current')
if mibBuilder.loadTexts: outletPoleSensorEnabledThresholds.setDescription('A bit string indicating which thresholds are enabled.\n            This parameter does not apply to sensors without numerical reading.')
outletPoleSensorSignedMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 6, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPoleSensorSignedMaximum.setStatus('current')
if mibBuilder.loadTexts: outletPoleSensorSignedMaximum.setDescription('The largest possible reading as a signed integer.\n            The value of this OID variable should be scaled by\n            outletPoleSensorDecimalDigits.  For example, if the value is 1 and\n            outletPoleSensorDecimalDigits is 2, then actual value is 0.01.\n            The value is undefined for sensors whose range exceeds the\n            Integer32 range (-2147483648 .. 2147483647).\n            This parameter does not apply to sensors without numerical reading.')
outletPoleSensorSignedMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 6, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPoleSensorSignedMinimum.setStatus('current')
if mibBuilder.loadTexts: outletPoleSensorSignedMinimum.setDescription('The smallest possible reading as a signed integer.\n            The value of this OID variable should be scaled by\n            outletPoleSensorDecimalDigits.  For example, if the value is 1 and\n            outletPoleSensorDecimalDigits is 2, then actual value is 0.01.\n            This value determines whether to use the signed or unsigned threshold\n            and value columns: If the minimum is below zero the sensor can have\n            negative readings and the signed columns should be used.\n            This parameter does not apply to sensors without numerical reading.')
outletPoleSensorSignedLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 6, 1, 28), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletPoleSensorSignedLowerCriticalThreshold.setStatus('current')
if mibBuilder.loadTexts: outletPoleSensorSignedLowerCriticalThreshold.setDescription('The lower critical threshold as a signed integer.\n            The value of this OID variable should be scaled by\n            outletPoleSensorDecimalDigits.  For example, if the value is 1 and\n            outletPoleSensorDecimalDigits is 2, then actual value is 0.01.\n            The value is undefined for sensors whose range exceeds the\n            Integer32 range (-2147483648 .. 2147483647).\n            This parameter does not apply to sensors without numerical reading.')
outletPoleSensorSignedLowerWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 6, 1, 29), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletPoleSensorSignedLowerWarningThreshold.setStatus('current')
if mibBuilder.loadTexts: outletPoleSensorSignedLowerWarningThreshold.setDescription('The lower warning threshold as a signed integer.\n            The value of this OID variable should be scaled by\n            outletPoleSensorDecimalDigits.  For example, if the value is 1 and\n            outletPoleSensorDecimalDigits is 2, then actual value is 0.01.\n            The value is undefined for sensors whose range exceeds the\n            Integer32 range (-2147483648 .. 2147483647).\n            This parameter does not apply to sensors without numerical reading.')
outletPoleSensorSignedUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 6, 1, 30), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletPoleSensorSignedUpperCriticalThreshold.setStatus('current')
if mibBuilder.loadTexts: outletPoleSensorSignedUpperCriticalThreshold.setDescription('The upper critical threshold as a signed integer.\n            The value of this OID variable should be scaled by\n            outletPoleSensorDecimalDigits.  For example, if the value is 1 and\n            outletPoleSensorDecimalDigits is 2, then actual value is 0.01.\n            The value is undefined for sensors whose range exceeds the\n            Integer32 range (-2147483648 .. 2147483647).\n            This parameter does not apply to sensors without numerical reading.')
outletPoleSensorSignedUpperWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 6, 1, 31), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletPoleSensorSignedUpperWarningThreshold.setStatus('current')
if mibBuilder.loadTexts: outletPoleSensorSignedUpperWarningThreshold.setDescription('The upper warning threshold as a signed integer.\n            The value of this OID variable should be scaled by\n            outletPoleSensorDecimalDigits.  For example, if the value is 1 and\n            outletPoleSensorDecimalDigits is 2, then actual value is 0.01.\n            The value is undefined for sensors whose range exceeds the\n            Integer32 range (-2147483648 .. 2147483647).\n            This parameter does not apply to sensors without numerical reading.')
externalSensorConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3), )
if mibBuilder.loadTexts: externalSensorConfigurationTable.setStatus('current')
if mibBuilder.loadTexts: externalSensorConfigurationTable.setDescription('A list of external sensor configuration entries. The number of\n            entries is given by the value of externalSensorCount for the PDU.')
externalSensorConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "sensorID"))
if mibBuilder.loadTexts: externalSensorConfigurationEntry.setStatus('current')
if mibBuilder.loadTexts: externalSensorConfigurationEntry.setDescription('An entry containing parameters for an external sensor.')
sensorID = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: sensorID.setStatus('current')
if mibBuilder.loadTexts: sensorID.setDescription('A unique value for each sensor. Its value\n            ranges between 1 and the value of externalSensorCount.')
externalSensorType = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 2), SensorTypeEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalSensorType.setStatus('current')
if mibBuilder.loadTexts: externalSensorType.setDescription('The type of sensor.')
externalSensorSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalSensorSerialNumber.setStatus('current')
if mibBuilder.loadTexts: externalSensorSerialNumber.setDescription('The sensor serial number.')
externalSensorName = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorName.setStatus('current')
if mibBuilder.loadTexts: externalSensorName.setDescription('The user-defined name.')
externalSensorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorDescription.setStatus('current')
if mibBuilder.loadTexts: externalSensorDescription.setDescription('The user-defined description.')
externalSensorXCoordinate = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorXCoordinate.setStatus('current')
if mibBuilder.loadTexts: externalSensorXCoordinate.setDescription('The X coordinate.')
externalSensorYCoordinate = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorYCoordinate.setStatus('current')
if mibBuilder.loadTexts: externalSensorYCoordinate.setDescription('The Y coordinate.')
externalSensorZCoordinate = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorZCoordinate.setStatus('current')
if mibBuilder.loadTexts: externalSensorZCoordinate.setDescription('The Z coordinate. The value must be a number if\n            externalSensorsZCoordinateUnits is rackUnits.')
externalSensorChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalSensorChannelNumber.setStatus('current')
if mibBuilder.loadTexts: externalSensorChannelNumber.setDescription('The channel number.\n            This applies only to contact sensors, -1 for other sensors.')
externalOnOffSensorSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 10), SensorTypeEnumeration()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalOnOffSensorSubtype.setStatus('current')
if mibBuilder.loadTexts: externalOnOffSensorSubtype.setDescription('The subtype of the binary sensor.')
externalSensorLogAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 14), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorLogAvailable.setStatus('current')
if mibBuilder.loadTexts: externalSensorLogAvailable.setDescription('Is data logging enabled for this sensor?')
externalSensorUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 16), SensorUnitsEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalSensorUnits.setStatus('current')
if mibBuilder.loadTexts: externalSensorUnits.setDescription('The unit in which the sensor reading is reported.\n            This parameter does not apply to sensors without numerical reading.')
externalSensorDecimalDigits = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalSensorDecimalDigits.setStatus('current')
if mibBuilder.loadTexts: externalSensorDecimalDigits.setDescription('The number of digits displayed to the right of the decimal point.\n            This parameter does not apply to sensors without numerical reading.')
externalSensorAccuracy = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 18), HundredthsOfAPercentage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalSensorAccuracy.setStatus('deprecated')
if mibBuilder.loadTexts: externalSensorAccuracy.setDescription('The accuracy: the maximum relative difference (in percent) between\n            measurement and the actual value.\n            This parameter does not apply to sensors without numerical reading.')
externalSensorResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalSensorResolution.setStatus('current')
if mibBuilder.loadTexts: externalSensorResolution.setDescription('The resolution: the minimum difference between any two measured values\n            The value of this OID variable should be scaled by\n            externalSensorDecimalDigits.  For example, if the value is 1 and\n            externalSensorDecimalDigits is 2, then actual value is 0.01.\n            This parameter does not apply to sensors without numerical reading.')
externalSensorTolerance = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalSensorTolerance.setStatus('deprecated')
if mibBuilder.loadTexts: externalSensorTolerance.setDescription('The tolerance: the maximum difference between measurement and the\n            actual value. The value of this OID variable should be scaled by\n            (externalSensorDecimalDigits + 1).  For example, if the value is 50 and\n            externalSensorDecimalDigits is 2, then actual value is 0.05.\n            This parameter does not apply to sensors without numerical reading.')
externalSensorMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalSensorMaximum.setStatus('current')
if mibBuilder.loadTexts: externalSensorMaximum.setDescription('The largest possible value\n            The value of this OID variable should be scaled by\n            externalSensorDecimalDigits.  For example, if the value is 1 and\n            externalSensorDecimalDigits is 2, then actual value is 0.01.\n            This parameter does not apply to sensors without numerical reading.')
externalSensorMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalSensorMinimum.setStatus('current')
if mibBuilder.loadTexts: externalSensorMinimum.setDescription('The smallest possible value\n            The value of this OID variable should be scaled by\n            externalSensorDecimalDigits.  For example, if the value is 1 and\n            externalSensorDecimalDigits is 2, then actual value is 0.01.\n            This parameter does not apply to sensors without numerical reading.')
externalSensorHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 23), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorHysteresis.setStatus('current')
if mibBuilder.loadTexts: externalSensorHysteresis.setDescription('The hysteresis used when crossing a threshold towards the normal state.\n            The value of this OID variable should be scaled by\n            externalSensorDecimalDigits.  For example, if the value is 1 and\n            externalSensorDecimalDigits is 2, then actual value is 0.01.\n            This parameter does not apply to sensors without numerical reading.')
externalSensorStateChangeDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 24), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorStateChangeDelay.setStatus('current')
if mibBuilder.loadTexts: externalSensorStateChangeDelay.setDescription('The delay measured in samples before a state is asserted.\n            If the value is zero, then the state is asserted as soon as\n            it is detected; if it is non-zero, say n, then the assertion\n            condition must exist for n+1 consecutive samples before the\n            event is reported.\n            This parameter does not apply to sensors without numerical reading.')
externalSensorLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 31), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorLowerCriticalThreshold.setStatus('current')
if mibBuilder.loadTexts: externalSensorLowerCriticalThreshold.setDescription('The lower critical threshold\n            The value of this OID variable should be scaled by\n            externalSensorDecimalDigits.  For example, if the value is 1 and\n            externalSensorDecimalDigits is 2, then actual value is 0.01.\n            This parameter does not apply to sensors without numerical reading.')
externalSensorLowerWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 32), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorLowerWarningThreshold.setStatus('current')
if mibBuilder.loadTexts: externalSensorLowerWarningThreshold.setDescription('The lower warning threshold\n            The value of this OID variable should be scaled by\n            externalSensorDecimalDigits.  For example, if the value is 1 and\n            externalSensorDecimalDigits is 2, then actual value is 0.01.\n            This parameter does not apply to sensors without numerical reading.')
externalSensorUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 33), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorUpperCriticalThreshold.setStatus('current')
if mibBuilder.loadTexts: externalSensorUpperCriticalThreshold.setDescription('The upper critical threshold\n            The value of this OID variable should be scaled by\n            externalSensorDecimalDigits.  For example, if the value is 1 and\n            externalSensorDecimalDigits is 2, then actual value is 0.01.\n            This parameter does not apply to sensors without numerical reading.')
externalSensorUpperWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 34), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorUpperWarningThreshold.setStatus('current')
if mibBuilder.loadTexts: externalSensorUpperWarningThreshold.setDescription('The upper warning threshold\n            The value of this OID variable should be scaled by\n            externalSensorDecimalDigits.  For example, if the value is 1 and\n            externalSensorDecimalDigits is 2, then actual value is 0.01.\n            This parameter does not apply to sensors without numerical reading.')
externalSensorEnabledThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 35), Bits().clone(namedValues=NamedValues(("lowerCritical", 0), ("lowerWarning", 1), ("upperWarning", 2), ("upperCritical", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorEnabledThresholds.setStatus('current')
if mibBuilder.loadTexts: externalSensorEnabledThresholds.setDescription('A bit string indicating which thresholds are enabled.\n            This parameter does not apply to sensors without numerical reading.')
externalSensorIsActuator = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 36), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalSensorIsActuator.setStatus('current')
if mibBuilder.loadTexts: externalSensorIsActuator.setDescription('Indicates whether the sensor is an actuator.')
externalSensorPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 37), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalSensorPosition.setStatus('current')
if mibBuilder.loadTexts: externalSensorPosition.setDescription('The position of the sensor in the bus topology.\n            The format is a semicolon separated list of Keyword:value pairs.\n            Keyword can be one of the following:\n                ONBOARD, DEVICE-1WIREPORT, HUBPORT, CHAIN-POSITION\n\n            Examples:\n            1) Onboard sensor\n                  ONBOARD:CC1\n            2) Old sensor connected to device 1-wire port\n                  DEVICE-1WIREPORT:2\n            3) New-style sensor connected to device 1-wire port\n                  DEVICE-1WIREPORT:2;CHAIN-POSITION:3\n            4) New-style sensor connected to hub port 3\n                  DEVICE-1WIREPORT:2;CHAIN-POSITION:1;HUBPORT:3;CHAIN-POSITION:1\n            5) Old-style sensor connected to end of new-style sensor chain\n                  DEVICE-1WIREPORT:2;')
externalSensorUseDefaultThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 38), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorUseDefaultThresholds.setStatus('current')
if mibBuilder.loadTexts: externalSensorUseDefaultThresholds.setDescription('Use default thresholds for this sensor?\n            True:  Use default thresholds from externalSensorTypeDefaultThresholdsTable\n            False: Use sensor-specific thresholds from this table')
externalSensorAlarmedToNormalDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 39), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorAlarmedToNormalDelay.setStatus('current')
if mibBuilder.loadTexts: externalSensorAlarmedToNormalDelay.setDescription('The delay (in seconds) before the sensor returns from alarmed to normal.\n            This is supported for motion detectors only. For all other sensors the\n            value is 0 and cannot be set to any other value.')
externalSensorTypeDefaultThresholdsTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 4), )
if mibBuilder.loadTexts: externalSensorTypeDefaultThresholdsTable.setStatus('current')
if mibBuilder.loadTexts: externalSensorTypeDefaultThresholdsTable.setDescription('A table listing the default thresholds for each sensor type.\n            The table contains a row for each supported type of external sensor\n            with a numeric reading.')
externalSensorTypeDefaultThresholdsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 4, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "sensorType"))
if mibBuilder.loadTexts: externalSensorTypeDefaultThresholdsEntry.setStatus('current')
if mibBuilder.loadTexts: externalSensorTypeDefaultThresholdsEntry.setDescription('An entry containing default thresholds for a sensor type.')
externalSensorTypeDefaultHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 4, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorTypeDefaultHysteresis.setStatus('current')
if mibBuilder.loadTexts: externalSensorTypeDefaultHysteresis.setDescription('The hysteresis used when crossing a threshold towards the normal state.\n            The value of this OID variable should be scaled by\n            externalSensorDecimalDigits.  For example, if the value is 1 and\n            externalSensorDecimalDigits is 2, then actual value is 0.01.')
externalSensorTypeDefaultStateChangeDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 4, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorTypeDefaultStateChangeDelay.setStatus('current')
if mibBuilder.loadTexts: externalSensorTypeDefaultStateChangeDelay.setDescription('The delay measured in samples before a state is asserted.\n            If the value is zero, then the state is asserted as soon as\n            it is detected; if it is non-zero, say n, then the assertion\n            condition must exist for n+1 consecutive samples before the\n            event is reported.')
externalSensorTypeDefaultLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 4, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorTypeDefaultLowerCriticalThreshold.setStatus('current')
if mibBuilder.loadTexts: externalSensorTypeDefaultLowerCriticalThreshold.setDescription('The lower critical threshold\n            The value of this OID variable should be scaled by\n            externalSensorDecimalDigits.  For example, if the value is 1 and\n            externalSensorDecimalDigits is 2, then actual value is 0.01.')
externalSensorTypeDefaultLowerWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 4, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorTypeDefaultLowerWarningThreshold.setStatus('current')
if mibBuilder.loadTexts: externalSensorTypeDefaultLowerWarningThreshold.setDescription('The lower warning threshold\n            The value of this OID variable should be scaled by\n            externalSensorDecimalDigits.  For example, if the value is 1 and\n            externalSensorDecimalDigits is 2, then actual value is 0.01.')
externalSensorTypeDefaultUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 4, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorTypeDefaultUpperCriticalThreshold.setStatus('current')
if mibBuilder.loadTexts: externalSensorTypeDefaultUpperCriticalThreshold.setDescription('The upper critical threshold\n            The value of this OID variable should be scaled by\n            externalSensorDecimalDigits.  For example, if the value is 1 and\n            externalSensorDecimalDigits is 2, then actual value is 0.01.')
externalSensorTypeDefaultUpperWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 4, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorTypeDefaultUpperWarningThreshold.setStatus('current')
if mibBuilder.loadTexts: externalSensorTypeDefaultUpperWarningThreshold.setDescription('The upper warning threshold\n            The value of this OID variable should be scaled by\n            externalSensorDecimalDigits.  For example, if the value is 1 and\n            externalSensorDecimalDigits is 2, then actual value is 0.01.')
externalSensorTypeDefaultEnabledThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 4, 1, 9), Bits().clone(namedValues=NamedValues(("lowerCritical", 0), ("lowerWarning", 1), ("upperWarning", 2), ("upperCritical", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorTypeDefaultEnabledThresholds.setStatus('current')
if mibBuilder.loadTexts: externalSensorTypeDefaultEnabledThresholds.setDescription('A bit string indicating which thresholds are enabled.')
serverReachabilityTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 7, 3), )
if mibBuilder.loadTexts: serverReachabilityTable.setStatus('current')
if mibBuilder.loadTexts: serverReachabilityTable.setDescription('A list of server entries. The number of\n            entries is given by the value of serverCount for the PDU.')
serverReachabilityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 7, 3, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "serverID"))
if mibBuilder.loadTexts: serverReachabilityEntry.setStatus('current')
if mibBuilder.loadTexts: serverReachabilityEntry.setDescription('An entry containing parameters for a server.')
serverID = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 7, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: serverID.setStatus('current')
if mibBuilder.loadTexts: serverID.setDescription('A unique value for each server. Its value\n            ranges between 1 and the value of serverCount for that PDU')
serverIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 7, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverIPAddress.setStatus('current')
if mibBuilder.loadTexts: serverIPAddress.setDescription('The IP Address/host name of the server')
serverPingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 7, 3, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverPingEnabled.setStatus('current')
if mibBuilder.loadTexts: serverPingEnabled.setDescription('Is ping enabled for this server?')
wireConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 8, 3), )
if mibBuilder.loadTexts: wireConfigurationTable.setStatus('deprecated')
if mibBuilder.loadTexts: wireConfigurationTable.setDescription('A list of wire configuration entries. The number of\n            entries is given by the value of wireCount for the PDU.\n            Note: This feature is no longer used, the table is always empty.')
wireConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 8, 3, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "wireId"))
if mibBuilder.loadTexts: wireConfigurationEntry.setStatus('deprecated')
if mibBuilder.loadTexts: wireConfigurationEntry.setDescription('An entry containing objects for a particular wire.')
wireId = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 8, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: wireId.setStatus('deprecated')
if mibBuilder.loadTexts: wireId.setDescription('A unique value for each wire. Its value\n            ranges between 1 and the value of wireCount.')
wireLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 8, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wireLabel.setStatus('deprecated')
if mibBuilder.loadTexts: wireLabel.setDescription('The label on the PDU identifying the wire.')
wireCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 8, 3, 1, 3), Bits().clone(namedValues=NamedValues(("rmsCurrent", 0), ("peakCurrent", 1), ("unbalancedCurrent", 2), ("rmsVoltage", 3), ("activePower", 4), ("apparentPower", 5), ("powerFactor", 6), ("activeEnergy", 7), ("apparentEnergy", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wireCapabilities.setStatus('deprecated')
if mibBuilder.loadTexts: wireCapabilities.setDescription('A bit string indicating which wire sensors are available.')
wirePowerSource = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 8, 3, 1, 4), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirePowerSource.setStatus('deprecated')
if mibBuilder.loadTexts: wirePowerSource.setDescription("This object allows discovery of how the PDU is wired. It indicates the\n            wire's power source which can one of the following:\n              - an inlet\n              - an overcurrent protector\n              - a transfer switch\n\n            If the power source is an inlet, it contains the OID of\n            an inletLabel in the inletConfigurationTable. The indices of the OID can\n            then be used to reference other objects in the inlet tables.\n\n            If the power source is an overcurrent protector, it\n            contains the OID of an overCurrentProtectorLabel in the\n            overCurrentProtectorConfigurationTable. The indices of the OID can then be\n            used to reference other objects in the overcurrent protector tables.\n\n            If the power source is a transfer switch, it\n            contains the OID of a transferSwitchLabel in the\n            transferSwitchConfigurationTable. The indices of the OID can then be\n            used to reference other objects in the transfer switch tables.")
wireSensorConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 8, 4), )
if mibBuilder.loadTexts: wireSensorConfigurationTable.setStatus('deprecated')
if mibBuilder.loadTexts: wireSensorConfigurationTable.setDescription('A list of wire sensor configuration entries.\n            Note: This feature is no longer used, the table is always empty.')
wireSensorConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 8, 4, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "wireId"), (0, "PDU2-MIB", "sensorType"))
if mibBuilder.loadTexts: wireSensorConfigurationEntry.setStatus('deprecated')
if mibBuilder.loadTexts: wireSensorConfigurationEntry.setDescription('An wireSensor entry containing objects for a particular wire Sensor.')
wireSensorLogAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 8, 4, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wireSensorLogAvailable.setStatus('deprecated')
if mibBuilder.loadTexts: wireSensorLogAvailable.setDescription('Is data logging enabled for this sensor?')
wireSensorUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 8, 4, 1, 6), SensorUnitsEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wireSensorUnits.setStatus('deprecated')
if mibBuilder.loadTexts: wireSensorUnits.setDescription('The unit in which the sensor reading is reported.\n            This parameter does not apply to sensors without numerical reading.')
wireSensorDecimalDigits = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 8, 4, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wireSensorDecimalDigits.setStatus('deprecated')
if mibBuilder.loadTexts: wireSensorDecimalDigits.setDescription('The number of digits displayed to the right of the decimal point.\n            This parameter does not apply to sensors without numerical reading.')
wireSensorAccuracy = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 8, 4, 1, 8), HundredthsOfAPercentage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wireSensorAccuracy.setStatus('deprecated')
if mibBuilder.loadTexts: wireSensorAccuracy.setDescription('The accuracy: the maximum relative difference (in percent) between\n            measurement and the actual value.\n            This parameter does not apply to sensors without numerical reading.')
wireSensorResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 8, 4, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wireSensorResolution.setStatus('deprecated')
if mibBuilder.loadTexts: wireSensorResolution.setDescription('The resolution: the minimum difference between any two measured values\n            The value of this OID variable should be scaled by\n            wireSensorDecimalDigits. For example, if the value is 1 and\n            wireSensorDecimalDigits is 2, then actual value is 0.01.\n            This parameter does not apply to sensors without numerical reading.')
wireSensorTolerance = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 8, 4, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wireSensorTolerance.setStatus('deprecated')
if mibBuilder.loadTexts: wireSensorTolerance.setDescription('The tolerance: the maximum difference between measurement and the\n            actual value. The value of this OID variable should be scaled by\n            (wireSensorDecimalDigits + 1).  For example, if the value is 50 and\n            wireSensorDecimalDigits is 2, then actual value is 0.05.\n            This parameter does not apply to sensors without numerical reading.')
wireSensorMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 8, 4, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wireSensorMaximum.setStatus('deprecated')
if mibBuilder.loadTexts: wireSensorMaximum.setDescription('The largest possible value\n            The value of this OID variable should be scaled by\n            wireSensorDecimalDigits.  For example, if the value is 1 and\n            wireSensorDecimalDigits is 2, then actual value is 0.01.\n            This parameter does not apply to sensors without numerical reading.')
wireSensorMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 8, 4, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wireSensorMinimum.setStatus('deprecated')
if mibBuilder.loadTexts: wireSensorMinimum.setDescription('The smallest possible value\n            The value of this OID variable should be scaled by\n            wireSensorDecimalDigits.  For example, if the value is 1 and\n            wireSensorDecimalDigits is 2, then actual value is 0.01.\n            This parameter does not apply to sensors without numerical reading.')
wireSensorHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 8, 4, 1, 13), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wireSensorHysteresis.setStatus('deprecated')
if mibBuilder.loadTexts: wireSensorHysteresis.setDescription('The hysteresis used when crossing a threshold towards the normal state.\n            The value of this OID variable should be scaled by\n            wireSensorDecimalDigits.  For example, if the value is 1 and\n            wireSensorDecimalDigits is 2, then actual value is 0.01.\n            This parameter does not apply to sensors without numerical reading.')
wireSensorStateChangeDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 8, 4, 1, 14), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wireSensorStateChangeDelay.setStatus('deprecated')
if mibBuilder.loadTexts: wireSensorStateChangeDelay.setDescription('The delay measured in samples before a state is asserted.\n            If the value is zero, then the state is asserted as soon as\n            it is detected; if it is non-zero, say n, then the assertion\n            condition must exist for n+1 consecutive samples before the\n            event is reported.\n            This parameter does not apply to sensors without numerical reading.')
wireSensorLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 8, 4, 1, 21), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wireSensorLowerCriticalThreshold.setStatus('deprecated')
if mibBuilder.loadTexts: wireSensorLowerCriticalThreshold.setDescription('The lower critical threshold\n            The value of this OID variable should be scaled by\n            wireSensorDecimalDigits.  For example, if the value is 1 and\n            wireSensorDecimalDigits is 2, then actual value is 0.01.\n            This parameter does not apply to sensors without numerical reading.')
wireSensorLowerWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 8, 4, 1, 22), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wireSensorLowerWarningThreshold.setStatus('deprecated')
if mibBuilder.loadTexts: wireSensorLowerWarningThreshold.setDescription('The lower non-critical (warning) threshold\n            The value of this OID variable should be scaled by\n            wireSensorDecimalDigits.  For example, if the value is 1 and\n            wireSensorDecimalDigits is 2, then actual value is 0.01.\n            This parameter does not apply to sensors without numerical reading.')
wireSensorUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 8, 4, 1, 23), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wireSensorUpperCriticalThreshold.setStatus('deprecated')
if mibBuilder.loadTexts: wireSensorUpperCriticalThreshold.setDescription('The upper critical  threshold\n            The value of this OID variable should be scaled by\n            wireSensorDecimalDigits.  For example, if the value is 1 and\n            wireSensorDecimalDigits is 2, then actual value is 0.01.\n            This parameter does not apply to sensors without numerical reading.')
wireSensorUpperWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 8, 4, 1, 24), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wireSensorUpperWarningThreshold.setStatus('deprecated')
if mibBuilder.loadTexts: wireSensorUpperWarningThreshold.setDescription('The upper non-critical (warning) threshold\n            The value of this OID variable should be scaled by\n            wireSensorDecimalDigits.  For example, if the value is 1 and\n            wireSensorDecimalDigits is 2, then actual value is 0.01.\n            This parameter does not apply to sensors without numerical reading.')
wireSensorEnabledThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 8, 4, 1, 25), Bits().clone(namedValues=NamedValues(("lowerCritical", 0), ("lowerWarning", 1), ("upperWarning", 2), ("upperCritical", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wireSensorEnabledThresholds.setStatus('deprecated')
if mibBuilder.loadTexts: wireSensorEnabledThresholds.setDescription('A bit string indicating which thresholds are enabled.\n            This parameter does not apply to sensors without numerical reading.')
transferSwitchConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 3), )
if mibBuilder.loadTexts: transferSwitchConfigurationTable.setStatus('current')
if mibBuilder.loadTexts: transferSwitchConfigurationTable.setDescription('A list of transfer switch configuration entries. The number of\n            entries is given by the value of transferSwitchCount.')
transferSwitchConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 3, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "transferSwitchId"))
if mibBuilder.loadTexts: transferSwitchConfigurationEntry.setStatus('current')
if mibBuilder.loadTexts: transferSwitchConfigurationEntry.setDescription('An entry containing objects for a particular transfer switch.')
transferSwitchId = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: transferSwitchId.setStatus('current')
if mibBuilder.loadTexts: transferSwitchId.setDescription('A unique value for each transfer switch. Its value\n            ranges between 1 and the value of transferSwitchCount.')
transferSwitchLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transferSwitchLabel.setStatus('current')
if mibBuilder.loadTexts: transferSwitchLabel.setDescription('The label on the PDU identifying the transfer switch.')
transferSwitchName = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 3, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: transferSwitchName.setStatus('current')
if mibBuilder.loadTexts: transferSwitchName.setDescription('The user-defined name of the transfer switch.')
transferSwitchPreferredInlet = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: transferSwitchPreferredInlet.setStatus('current')
if mibBuilder.loadTexts: transferSwitchPreferredInlet.setDescription('The preferred inlet. This is the inlet to be selected in case both\n            inlets have acceptable power.')
transferSwitchPoleCount = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: transferSwitchPoleCount.setStatus('current')
if mibBuilder.loadTexts: transferSwitchPoleCount.setDescription('The number of poles.')
transferSwitchAutoReTransferEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 3, 1, 20), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: transferSwitchAutoReTransferEnabled.setStatus('current')
if mibBuilder.loadTexts: transferSwitchAutoReTransferEnabled.setDescription('Enables or disables automatic retransfer from the standby inlet to\n            the preferred inlet after power has been restored.')
transferSwitchAutoReTransferWaitTime = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 3, 1, 21), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: transferSwitchAutoReTransferWaitTime.setStatus('current')
if mibBuilder.loadTexts: transferSwitchAutoReTransferWaitTime.setDescription('The delay for automatic retransfers. Retransfer occurs this many\n            seconds after the condition causing the original transfer has been\n            corrected.')
transferSwitchAutoReTransferRequiresPhaseSync = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 3, 1, 22), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: transferSwitchAutoReTransferRequiresPhaseSync.setStatus('current')
if mibBuilder.loadTexts: transferSwitchAutoReTransferRequiresPhaseSync.setDescription('Enables or disables automatic retransfer in case the two inlets are\n            not synchronized. If set to True, automatic retransfer is inhibited while\n            a phase sync alarm is present, i.e. the phase difference between the two\n            inlets is too large.')
transferSwitchFrontPanelManualTransferButtonEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 3, 1, 23), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: transferSwitchFrontPanelManualTransferButtonEnabled.setStatus('current')
if mibBuilder.loadTexts: transferSwitchFrontPanelManualTransferButtonEnabled.setDescription("Enables or disables the Manual Transfer button on the unit's front panel.")
transferSwitchCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 3, 1, 24), Bits().clone(namedValues=NamedValues(("overloadStatus", 32), ("inletPhaseSyncAngle", 37), ("inletPhaseSync", 38), ("operatingState", 39), ("activeInlet", 40), ("switchStatus", 47)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: transferSwitchCapabilities.setStatus('current')
if mibBuilder.loadTexts: transferSwitchCapabilities.setDescription('A bit string indicating which sensors are available for the transfer switch.')
transferSwitchPowerSource1 = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 3, 1, 31), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transferSwitchPowerSource1.setStatus('current')
if mibBuilder.loadTexts: transferSwitchPowerSource1.setDescription("This object allows discovery of how the PDU is wired. It indicates the\n            transfer switch's first power source, typically a fuse.\n\n            It contains the OID of an overCurrentProtectorLabel in the\n            overCurrentProtectorConfiguration Table. The indices of the OID can then be\n            used to reference other objects in the overcurrent protector tables.")
transferSwitchPowerSource2 = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 3, 1, 32), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transferSwitchPowerSource2.setStatus('current')
if mibBuilder.loadTexts: transferSwitchPowerSource2.setDescription("This object allows discovery of how the PDU is wired. It indicates the\n            transfer switch's second power source, typically a fuse.\n\n            It contains the OID of an overCurrentProtectorLabel in the\n            overCurrentProtectorConfiguration Table. The indices of the OID can then be\n            used to reference other objects in the overcurrent protector tables.")
transferSwitchPoleConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 5), )
if mibBuilder.loadTexts: transferSwitchPoleConfigurationTable.setStatus('current')
if mibBuilder.loadTexts: transferSwitchPoleConfigurationTable.setDescription('A list of transfer switch pole configuration entries. The number of\n            entries is given by the value of transferSwitchPoleCount.')
transferSwitchPoleConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 5, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "transferSwitchId"), (0, "PDU2-MIB", "transferSwitchPoleIndex"))
if mibBuilder.loadTexts: transferSwitchPoleConfigurationEntry.setStatus('current')
if mibBuilder.loadTexts: transferSwitchPoleConfigurationEntry.setDescription('An entry containing parameters for a particular transfer switch pole.')
transferSwitchPoleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: transferSwitchPoleIndex.setStatus('current')
if mibBuilder.loadTexts: transferSwitchPoleIndex.setDescription('A unique value for each transfer switch pole. Its value\n            ranges between 1 and the value of transferSwitchPoleCount.')
transferSwitchPoleLine = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 5, 1, 2), LineEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transferSwitchPoleLine.setStatus('current')
if mibBuilder.loadTexts: transferSwitchPoleLine.setDescription('The phase for this transfer switch pole.')
transferSwitchPoleIn1Node = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transferSwitchPoleIn1Node.setStatus('current')
if mibBuilder.loadTexts: transferSwitchPoleIn1Node.setDescription('The node to which this transfer switch pole input 1 is connected')
transferSwitchPoleIn2Node = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transferSwitchPoleIn2Node.setStatus('current')
if mibBuilder.loadTexts: transferSwitchPoleIn2Node.setDescription('The node to which this transfer switch pole input 2 is connected')
transferSwitchPoleOutNode = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transferSwitchPoleOutNode.setStatus('current')
if mibBuilder.loadTexts: transferSwitchPoleOutNode.setDescription('The node to which this transfer switch pole output is connected')
transferSwitchSensorConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 4), )
if mibBuilder.loadTexts: transferSwitchSensorConfigurationTable.setStatus('current')
if mibBuilder.loadTexts: transferSwitchSensorConfigurationTable.setDescription('A list of transfer switch sensor configuration entries.')
transferSwitchSensorConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 4, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "transferSwitchId"), (0, "PDU2-MIB", "sensorType"))
if mibBuilder.loadTexts: transferSwitchSensorConfigurationEntry.setStatus('current')
if mibBuilder.loadTexts: transferSwitchSensorConfigurationEntry.setDescription('An entry containing parameters for a transfer switch sensor.')
transferSwitchSensorLogAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 4, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: transferSwitchSensorLogAvailable.setStatus('current')
if mibBuilder.loadTexts: transferSwitchSensorLogAvailable.setDescription('Is data logging enabled for this sensor?')
transferSwitchSensorUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 4, 1, 6), SensorUnitsEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transferSwitchSensorUnits.setStatus('current')
if mibBuilder.loadTexts: transferSwitchSensorUnits.setDescription('The unit in which the sensor reading is reported.\n            This parameter does not apply to sensors without numerical reading.')
transferSwitchSensorDecimalDigits = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 4, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transferSwitchSensorDecimalDigits.setStatus('current')
if mibBuilder.loadTexts: transferSwitchSensorDecimalDigits.setDescription('The number of digits displayed to the right of the decimal point\n            This parameter does not apply to sensors without numerical reading.')
transferSwitchSensorAccuracy = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 4, 1, 8), HundredthsOfAPercentage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transferSwitchSensorAccuracy.setStatus('deprecated')
if mibBuilder.loadTexts: transferSwitchSensorAccuracy.setDescription('The accuracy: how close (in percent) the measurement is to the actual value\n            This parameter does not apply to sensors without numerical reading.')
transferSwitchSensorResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 4, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transferSwitchSensorResolution.setStatus('current')
if mibBuilder.loadTexts: transferSwitchSensorResolution.setDescription('The resolution: the minimum difference between any two measured values\n            The value of this OID variable should be scaled by\n            transferSwitchSensorDecimalDigits.  For example, if the value is 1 and\n            transferSwitchSensorDecimalDigits is 2, then actual value is 0.01.\n            This parameter does not apply to sensors without numerical reading.')
transferSwitchSensorTolerance = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 4, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transferSwitchSensorTolerance.setStatus('deprecated')
if mibBuilder.loadTexts: transferSwitchSensorTolerance.setDescription('The tolerance: the maximum difference between measurement and the\n            actual value. The value of this OID variable should be scaled by\n            (transferSwitchSensorDecimalDigits + 1).  For example, if the value is 50 and\n            transferSwitchSensorDecimalDigits is 2, then actual value is 0.05.\n            This parameter does not apply to sensors without numerical reading.')
transferSwitchSensorMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 4, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transferSwitchSensorMaximum.setStatus('current')
if mibBuilder.loadTexts: transferSwitchSensorMaximum.setDescription('The largest possible reading as an unsigned integer.\n            The value of this OID variable should be scaled by\n            transferSwitchSensorDecimalDigits.  For example, if the value is 1 and\n            transferSwitchSensorDecimalDigits is 2, then actual value is 0.01.\n            The value is clamped if the scaled maximum exceeds 4294967295. It\n            is undefined for sensors which can have negative readings.\n            This parameter does not apply to sensors without numerical reading.')
transferSwitchSensorMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 4, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transferSwitchSensorMinimum.setStatus('current')
if mibBuilder.loadTexts: transferSwitchSensorMinimum.setDescription('The smallest possible reading as an unsigned integer.\n            The value of this OID variable should be scaled by\n            transferSwitchSensorDecimalDigits.  For example, if the value is 1 and\n            transferSwitchSensorDecimalDigits is 2, then actual value is 0.01.\n            The value is undefined for sensors which can have negative readings.\n            This parameter does not apply to sensors without numerical reading.')
transferSwitchSensorHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 4, 1, 13), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: transferSwitchSensorHysteresis.setStatus('current')
if mibBuilder.loadTexts: transferSwitchSensorHysteresis.setDescription('The hysteresis used when crossing a threshold towards the normal state.\n            The value of this OID variable should be scaled by\n            transferSwitchSensorDecimalDigits.  For example, if the value is 1 and\n            transferSwitchSensorDecimalDigits is 2, then actual value is 0.01.\n            This parameter does not apply to sensors without numerical reading.')
transferSwitchSensorStateChangeDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 4, 1, 14), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: transferSwitchSensorStateChangeDelay.setStatus('current')
if mibBuilder.loadTexts: transferSwitchSensorStateChangeDelay.setDescription('The delay measured in samples before a state is asserted.\n            If the value is zero, then the state is asserted as soon as\n            it is detected; if it is non-zero, say n, then the assertion\n            condition must exist for n+1 consecutive samples before the\n            event is reported.\n            This parameter does not apply to sensors without numerical reading.')
transferSwitchSensorLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 4, 1, 21), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: transferSwitchSensorLowerCriticalThreshold.setStatus('current')
if mibBuilder.loadTexts: transferSwitchSensorLowerCriticalThreshold.setDescription('The lower critical threshold as an unsigned integer.\n            The value of this OID variable should be scaled by\n            transferSwitchSensorDecimalDigits.  For example, if the value is 1 and\n            transferSwitchSensorDecimalDigits is 2, then actual value is 0.01.\n            The value is clamped if the scaled threshold exceeds 4294967295. It\n            is undefined for sensors which can have negative readings.\n            This parameter does not apply to sensors without numerical reading.')
transferSwitchSensorLowerWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 4, 1, 22), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: transferSwitchSensorLowerWarningThreshold.setStatus('current')
if mibBuilder.loadTexts: transferSwitchSensorLowerWarningThreshold.setDescription('The lower warning threshold as an unsigned integer.\n            The value of this OID variable should be scaled by\n            transferSwitchSensorDecimalDigits.  For example, if the value is 1 and\n            transferSwitchSensorDecimalDigits is 2, then actual value is 0.01.\n            The value is clamped if the scaled threshold exceeds 4294967295. It\n            is undefined for sensors which can have negative readings.\n            This parameter does not apply to sensors without numerical reading.')
transferSwitchSensorUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 4, 1, 23), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: transferSwitchSensorUpperCriticalThreshold.setStatus('current')
if mibBuilder.loadTexts: transferSwitchSensorUpperCriticalThreshold.setDescription('The upper critical threshold as an unsigned integer.\n            The value of this OID variable should be scaled by\n            transferSwitchSensorDecimalDigits.  For example, if the value is 1 and\n            transferSwitchSensorDecimalDigits is 2, then actual value is 0.01.\n            The value is clamped if the scaled threshold exceeds 4294967295. It\n            is undefined for sensors which can have negative readings.\n            This parameter does not apply to sensors without numerical reading.')
transferSwitchSensorUpperWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 4, 1, 24), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: transferSwitchSensorUpperWarningThreshold.setStatus('current')
if mibBuilder.loadTexts: transferSwitchSensorUpperWarningThreshold.setDescription('The upper warning threshold as an unsigned integer.\n            The value of this OID variable should be scaled by\n            transferSwitchSensorDecimalDigits.  For example, if the value is 1 and\n            transferSwitchSensorDecimalDigits is 2, then actual value is 0.01.\n            The value is clamped if the scaled threshold exceeds 4294967295. It\n            is undefined for sensors which can have negative readings.\n            This parameter does not apply to sensors without numerical reading.')
transferSwitchSensorEnabledThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 4, 1, 25), Bits().clone(namedValues=NamedValues(("lowerCritical", 0), ("lowerWarning", 1), ("upperWarning", 2), ("upperCritical", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: transferSwitchSensorEnabledThresholds.setStatus('current')
if mibBuilder.loadTexts: transferSwitchSensorEnabledThresholds.setDescription('A bit string indicating which thresholds are enabled.\n            This parameter does not apply to sensors without numerical reading.')
transferSwitchSensorSignedMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 4, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transferSwitchSensorSignedMaximum.setStatus('current')
if mibBuilder.loadTexts: transferSwitchSensorSignedMaximum.setDescription('The largest possible reading as a signed integer.\n            The value of this OID variable should be scaled by\n            transferSwitchSensorDecimalDigits.  For example, if the value is 1 and\n            transferSwitchSensorDecimalDigits is 2, then actual value is 0.01.\n            The value is undefined for sensors whose range exceeds the\n            Integer32 range (-2147483648 .. 2147483647).\n            This parameter does not apply to sensors without numerical reading.')
transferSwitchSensorSignedMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 4, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transferSwitchSensorSignedMinimum.setStatus('current')
if mibBuilder.loadTexts: transferSwitchSensorSignedMinimum.setDescription('The smallest possible reading as a signed integer.\n            The value of this OID variable should be scaled by\n            transferSwitchSensorDecimalDigits.  For example, if the value is 1 and\n            transferSwitchSensorDecimalDigits is 2, then actual value is 0.01.\n            This value determines whether to use the signed or unsigned threshold\n            and value columns: If the minimum is below zero the sensor can have\n            negative readings and the signed columns should be used.\n            This parameter does not apply to sensors without numerical reading.')
transferSwitchSensorSignedLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 4, 1, 28), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: transferSwitchSensorSignedLowerCriticalThreshold.setStatus('current')
if mibBuilder.loadTexts: transferSwitchSensorSignedLowerCriticalThreshold.setDescription('The lower critical threshold as a signed integer.\n            The value of this OID variable should be scaled by\n            transferSwitchSensorDecimalDigits.  For example, if the value is 1 and\n            transferSwitchSensorDecimalDigits is 2, then actual value is 0.01.\n            The value is undefined for sensors whose range exceeds the\n            Integer32 range (-2147483648 .. 2147483647).\n            This parameter does not apply to sensors without numerical reading.')
transferSwitchSensorSignedLowerWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 4, 1, 29), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: transferSwitchSensorSignedLowerWarningThreshold.setStatus('current')
if mibBuilder.loadTexts: transferSwitchSensorSignedLowerWarningThreshold.setDescription('The lower warning threshold as a signed integer.\n            The value of this OID variable should be scaled by\n            transferSwitchSensorDecimalDigits.  For example, if the value is 1 and\n            transferSwitchSensorDecimalDigits is 2, then actual value is 0.01.\n            The value is undefined for sensors whose range exceeds the\n            Integer32 range (-2147483648 .. 2147483647).\n            This parameter does not apply to sensors without numerical reading.')
transferSwitchSensorSignedUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 4, 1, 30), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: transferSwitchSensorSignedUpperCriticalThreshold.setStatus('current')
if mibBuilder.loadTexts: transferSwitchSensorSignedUpperCriticalThreshold.setDescription('The upper critical threshold as a signed integer.\n            The value of this OID variable should be scaled by\n            transferSwitchSensorDecimalDigits.  For example, if the value is 1 and\n            transferSwitchSensorDecimalDigits is 2, then actual value is 0.01.\n            The value is undefined for sensors whose range exceeds the\n            Integer32 range (-2147483648 .. 2147483647).\n            This parameter does not apply to sensors without numerical reading.')
transferSwitchSensorSignedUpperWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 4, 1, 31), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: transferSwitchSensorSignedUpperWarningThreshold.setStatus('current')
if mibBuilder.loadTexts: transferSwitchSensorSignedUpperWarningThreshold.setDescription('The upper warning threshold as a signed integer.\n            The value of this OID variable should be scaled by\n            transferSwitchSensorDecimalDigits.  For example, if the value is 1 and\n            transferSwitchSensorDecimalDigits is 2, then actual value is 0.01.\n            The value is undefined for sensors whose range exceeds the\n            Integer32 range (-2147483648 .. 2147483647).\n            This parameter does not apply to sensors without numerical reading.')
powerMeterConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 10, 2), )
if mibBuilder.loadTexts: powerMeterConfigurationTable.setStatus('current')
if mibBuilder.loadTexts: powerMeterConfigurationTable.setDescription('A list of power meter and panel configuration entries.\n            Note: Also see inlet tables for settings and sensor information.')
powerMeterConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 10, 2, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"))
if mibBuilder.loadTexts: powerMeterConfigurationEntry.setStatus('current')
if mibBuilder.loadTexts: powerMeterConfigurationEntry.setDescription('An entry containing configuration objects for power meters and panels.')
powerMeterPhaseCTRating = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 10, 2, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerMeterPhaseCTRating.setStatus('current')
if mibBuilder.loadTexts: powerMeterPhaseCTRating.setDescription('The rating of the phase CT in Amps, or 0 if no CT is present.\n            At present, read-only access;\n            see MIN-ACCESS in MODULE-COMPLIANCE ModulecomplianceRev2')
powerMeterNeutralCTRating = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 10, 2, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerMeterNeutralCTRating.setStatus('current')
if mibBuilder.loadTexts: powerMeterNeutralCTRating.setDescription('The rating of the neutral CT in Amps, or 0 if no CT is present.\n            At present, read-only access;\n            see MIN-ACCESS in MODULE-COMPLIANCE ModulecomplianceRev2')
powerMeterEarthCTRating = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 10, 2, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerMeterEarthCTRating.setStatus('current')
if mibBuilder.loadTexts: powerMeterEarthCTRating.setDescription('The rating of the earth CT in Amps, or 0 if no CT is present.\n            At present, read-only access;\n            see MIN-ACCESS in MODULE-COMPLIANCE ModulecomplianceRev2')
powerMeterBranchCount = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 10, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerMeterBranchCount.setStatus('current')
if mibBuilder.loadTexts: powerMeterBranchCount.setDescription('The maximum number of circuits supported by the panel.\n\n            This can be used to distinguish between panels (>0) and power meters (0).\n            See circuitCount for the number of currently defined circuits.')
powerMeterPanelPositions = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 10, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerMeterPanelPositions.setStatus('current')
if mibBuilder.loadTexts: powerMeterPanelPositions.setDescription('The number of circuit positions in the panel.\n            Its value is specified by the user when configuring a panel')
powerMeterPanelLayout = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 10, 2, 1, 7), PanelLayoutEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerMeterPanelLayout.setStatus('current')
if mibBuilder.loadTexts: powerMeterPanelLayout.setDescription('The panel circuit position layout: one or two columns.\n            This is valid only for panels, the value is -1 for power meters.')
powerMeterPanelNumbering = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 10, 2, 1, 8), PanelNumberingEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerMeterPanelNumbering.setStatus('current')
if mibBuilder.loadTexts: powerMeterPanelNumbering.setDescription('The panel circuit position numbering scheme: odd/even or sequential.\n            This is valid only for panels, the value is -1 for power meters.')
powerMeterType = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 10, 2, 1, 9), PowerMeterTypeEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerMeterType.setStatus('current')
if mibBuilder.loadTexts: powerMeterType.setDescription('The power meter type: 3-phase, single-phase or split-phase.')
circuitConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 2), )
if mibBuilder.loadTexts: circuitConfigurationTable.setStatus('current')
if mibBuilder.loadTexts: circuitConfigurationTable.setDescription('A list of circuit configuration entries. The number of\n            entries is given by the value of panelCircuitPositionCount.')
circuitConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 2, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "circuitId"))
if mibBuilder.loadTexts: circuitConfigurationEntry.setStatus('current')
if mibBuilder.loadTexts: circuitConfigurationEntry.setDescription('An entry containing configuration objects for the circuit.')
circuitId = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: circuitId.setStatus('current')
if mibBuilder.loadTexts: circuitId.setDescription('A unique value for each circuit. Its value is the smallest panel\n            position occupied by the circuit.')
circuitPoleCount = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitPoleCount.setStatus('current')
if mibBuilder.loadTexts: circuitPoleCount.setDescription('The number of panel positions occupied by the circuit.')
circuitName = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitName.setStatus('current')
if mibBuilder.loadTexts: circuitName.setDescription('The user-defined name for the circuit.\n            At present, read-only access;\n            see MIN-ACCESS in MODULE-COMPLIANCE ModulecomplianceRev2')
circuitType = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 2, 1, 4), CircuitTypeEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitType.setStatus('current')
if mibBuilder.loadTexts: circuitType.setDescription('The circuit type: line-line, line-neutral, line-line-neutral or 3-phase')
circuitRatedCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 2, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitRatedCurrent.setStatus('current')
if mibBuilder.loadTexts: circuitRatedCurrent.setDescription('The rating of the breaker for the circuit in Amps.\n            At present, read-only access;\n            see MIN-ACCESS in MODULE-COMPLIANCE ModulecomplianceRev2')
circuitCTRating = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 2, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitCTRating.setStatus('current')
if mibBuilder.loadTexts: circuitCTRating.setDescription('The rating of the CTs metering this circuit in Amps.\n            At present, read-only access;\n            see MIN-ACCESS in MODULE-COMPLIANCE ModulecomplianceRev2')
circuitCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 2, 1, 7), Bits().clone(namedValues=NamedValues(("rmsCurrent", 0), ("peakCurrent", 1), ("unbalancedCurrent", 2), ("rmsVoltage", 3), ("activePower", 4), ("apparentPower", 5), ("powerFactor", 6), ("activeEnergy", 7), ("apparentEnergy", 8), ("surgeProtectorStatus", 21), ("frequency", 22), ("phaseAngle", 23), ("residualCurrent", 25), ("rcmState", 26), ("reactivePower", 28), ("powerQuality", 31), ("displacementPowerFactor", 34)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitCapabilities.setStatus('current')
if mibBuilder.loadTexts: circuitCapabilities.setDescription('A bit string indicating which sensors are available for the circuit.')
circuitPoleCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 2, 1, 8), Bits().clone(namedValues=NamedValues(("rmsCurrent", 0), ("peakCurrent", 1), ("rmsVoltage", 3), ("activePower", 4), ("apparentPower", 5), ("powerFactor", 6), ("activeEnergy", 7), ("apparentEnergy", 8), ("phaseAngle", 23), ("rmsVoltageLN", 24), ("reactivePower", 28), ("displacementPowerFactor", 34)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitPoleCapabilities.setStatus('current')
if mibBuilder.loadTexts: circuitPoleCapabilities.setDescription('A bit string indicating which sensors are available for each circuit pole.')
circuitPowerSource = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 2, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitPowerSource.setStatus('current')
if mibBuilder.loadTexts: circuitPowerSource.setDescription("This object allows discovery of how the circuit is wired. It indicates the\n            circuit's power source, typically an inlet.\n\n            It contains the OID of an inletLabel in the inletConfigurationTable.\n            The indices of the OID can then be used to reference other objects in the\n            inlet and power meter tables.")
circuitPoleConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 3), )
if mibBuilder.loadTexts: circuitPoleConfigurationTable.setStatus('current')
if mibBuilder.loadTexts: circuitPoleConfigurationTable.setDescription('A list of branch circuit pole configuration entries. The number of\n            entries is given by the value of circuitPoleCount for the circuit.')
circuitPoleConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 3, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "circuitId"), (0, "PDU2-MIB", "circuitPoleId"))
if mibBuilder.loadTexts: circuitPoleConfigurationEntry.setStatus('current')
if mibBuilder.loadTexts: circuitPoleConfigurationEntry.setDescription('An entry containing configuration objects for the circuit poles.')
circuitPoleId = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: circuitPoleId.setStatus('current')
if mibBuilder.loadTexts: circuitPoleId.setDescription('A unique value for each circuit pole. Its value\n            ranges between 1 and the value of circuitPoleCount.')
circuitPolePanelPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitPolePanelPosition.setStatus('current')
if mibBuilder.loadTexts: circuitPolePanelPosition.setDescription('The panel position for this pole.')
circuitPoleCTNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitPoleCTNumber.setStatus('current')
if mibBuilder.loadTexts: circuitPoleCTNumber.setDescription('The CT number for this circuit pole, or 0 if no CT is present.\n            At present, read-only access;\n            see MIN-ACCESS in MODULE-COMPLIANCE ModulecomplianceRev2')
circuitPolePhase = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 3, 1, 4), PhaseEnumeration()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitPolePhase.setStatus('current')
if mibBuilder.loadTexts: circuitPolePhase.setDescription('The phase for this circuit pole.\n            At present, read-only access;\n            see MIN-ACCESS in MODULE-COMPLIANCE ModulecomplianceRev2')
circuitSensorConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 4), )
if mibBuilder.loadTexts: circuitSensorConfigurationTable.setStatus('current')
if mibBuilder.loadTexts: circuitSensorConfigurationTable.setDescription('A list of configuration entries for branch circuit sensor.')
circuitSensorConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 4, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "circuitId"), (0, "PDU2-MIB", "sensorType"))
if mibBuilder.loadTexts: circuitSensorConfigurationEntry.setStatus('current')
if mibBuilder.loadTexts: circuitSensorConfigurationEntry.setDescription('An entry containing objects for configuring a branch circuit sensor.')
circuitSensorLogAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 4, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitSensorLogAvailable.setStatus('current')
if mibBuilder.loadTexts: circuitSensorLogAvailable.setDescription('Is data logging enabled for the sensor?')
circuitSensorUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 4, 1, 6), SensorUnitsEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitSensorUnits.setStatus('current')
if mibBuilder.loadTexts: circuitSensorUnits.setDescription('The unit in which the sensor reading is reported.\n            This parameter does not apply to sensors without numerical reading.')
circuitSensorDecimalDigits = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 4, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitSensorDecimalDigits.setStatus('current')
if mibBuilder.loadTexts: circuitSensorDecimalDigits.setDescription('The number of digits displayed to the right of the decimal point.\n            This parameter does not apply to sensors without numerical reading.')
circuitSensorResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 4, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitSensorResolution.setStatus('current')
if mibBuilder.loadTexts: circuitSensorResolution.setDescription('The resolution: the minimum difference between any two measured values\n            The value of this OID variable should be scaled by\n            inletSensorDecimalDigits.  For example, if the value is 1 and\n            inletSensorDecimalDigits is 2, then actual value is 0.01.\n            This parameter does not apply to sensors without numerical reading.')
circuitSensorMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 4, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitSensorMaximum.setStatus('current')
if mibBuilder.loadTexts: circuitSensorMaximum.setDescription('The largest possible reading as an unsigned integer.\n            The value of this OID variable should be scaled by\n            inletSensorDecimalDigits.  For example, if the value is 1 and\n            inletSensorDecimalDigits is 2, then actual value is 0.01.\n            The value is clamped if the scaled maximum exceeds 4294967295. It\n            is undefined for sensors which can have negative readings.\n            This parameter does not apply to sensors without numerical reading.')
circuitSensorMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 4, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitSensorMinimum.setStatus('current')
if mibBuilder.loadTexts: circuitSensorMinimum.setDescription('The smallest possible reading as an unsigned integer.\n            The value of this OID variable should be scaled by\n            inletSensorDecimalDigits.  For example, if the value is 1 and\n            inletSensorDecimalDigits is 2, then actual value is 0.01.\n            The value is undefined for sensors which can have negative readings.\n            This parameter does not apply to sensors without numerical reading.')
circuitSensorHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 4, 1, 13), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitSensorHysteresis.setStatus('current')
if mibBuilder.loadTexts: circuitSensorHysteresis.setDescription('The hysteresis used when crossing a threshold towards the normal state.\n            The value of this OID variable should be scaled by\n            inletSensorDecimalDigits.  For example, if the value is 1 and\n            inletSensorDecimalDigits is 2, then actual value is 0.01.\n            This parameter does not apply to sensors without numerical reading.')
circuitSensorStateChangeDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 4, 1, 14), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitSensorStateChangeDelay.setStatus('current')
if mibBuilder.loadTexts: circuitSensorStateChangeDelay.setDescription('The delay measured in samples before a state is asserted.\n            If the value is zero, then the state is asserted as soon as\n            it is detected; if it is non-zero, say n, then the assertion\n            condition must exist for n+1 consecutive samples before the\n            event is reported.\n            This parameter does not apply to sensors without numerical reading.')
circuitSensorLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 4, 1, 21), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitSensorLowerCriticalThreshold.setStatus('current')
if mibBuilder.loadTexts: circuitSensorLowerCriticalThreshold.setDescription('The lower critical threshold as an unsigned integer.\n            The value of this OID variable should be scaled by\n            inletSensorDecimalDigits.  For example, if the value is 1 and\n            inletSensorDecimalDigits is 2, then actual value is 0.01.\n            The value is clamped if the scaled threshold exceeds 4294967295. It\n            is undefined for sensors which can have negative readings.\n            This parameter does not apply to sensors without numerical reading.')
circuitSensorLowerWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 4, 1, 22), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitSensorLowerWarningThreshold.setStatus('current')
if mibBuilder.loadTexts: circuitSensorLowerWarningThreshold.setDescription('The lower warning threshold as an unsigned integer.\n            The value of this OID variable should be scaled by\n            inletSensorDecimalDigits.  For example, if the value is 1 and\n            inletSensorDecimalDigits is 2, then actual value is 0.01.\n            The value is clamped if the scaled threshold exceeds 4294967295. It\n            is undefined for sensors which can have negative readings.\n            This parameter does not apply to sensors without numerical reading.')
circuitSensorUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 4, 1, 23), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitSensorUpperCriticalThreshold.setStatus('current')
if mibBuilder.loadTexts: circuitSensorUpperCriticalThreshold.setDescription('The upper critical threshold as an unsigned integer.\n            The value of this OID variable should be scaled by\n            inletSensorDecimalDigits.  For example, if the value is 1 and\n            inletSensorDecimalDigits is 2, then actual value is 0.01.\n            The value is clamped if the scaled threshold exceeds 4294967295. It\n            is undefined for sensors which can have negative readings.\n            This parameter does not apply to sensors without numerical reading.')
circuitSensorUpperWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 4, 1, 24), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitSensorUpperWarningThreshold.setStatus('current')
if mibBuilder.loadTexts: circuitSensorUpperWarningThreshold.setDescription('The upper warning threshold as an unsigned integer.\n            The value of this OID variable should be scaled by\n            inletSensorDecimalDigits.  For example, if the value is 1 and\n            inletSensorDecimalDigits is 2, then actual value is 0.01.\n            The value is clamped if the scaled threshold exceeds 4294967295. It\n            is undefined for sensors which can have negative readings.\n            This parameter does not apply to sensors without numerical reading.')
circuitSensorEnabledThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 4, 1, 25), Bits().clone(namedValues=NamedValues(("lowerCritical", 0), ("lowerWarning", 1), ("upperWarning", 2), ("upperCritical", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitSensorEnabledThresholds.setStatus('current')
if mibBuilder.loadTexts: circuitSensorEnabledThresholds.setDescription('A bit string indicating which thresholds are enabled.\n            This parameter does not apply to sensors without numerical reading.')
circuitSensorSignedMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 4, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitSensorSignedMaximum.setStatus('current')
if mibBuilder.loadTexts: circuitSensorSignedMaximum.setDescription('The largest possible reading as a signed integer.\n            The value of this OID variable should be scaled by\n            inletSensorDecimalDigits.  For example, if the value is 1 and\n            inletSensorDecimalDigits is 2, then actual value is 0.01.\n            The value is undefined for sensors whose range exceeds the\n            Integer32 range (-2147483648 .. 2147483647).\n            This parameter does not apply to sensors without numerical reading.')
circuitSensorSignedMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 4, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitSensorSignedMinimum.setStatus('current')
if mibBuilder.loadTexts: circuitSensorSignedMinimum.setDescription('The smallest possible reading as a signed integer.\n            The value of this OID variable should be scaled by\n            inletSensorDecimalDigits.  For example, if the value is 1 and\n            inletSensorDecimalDigits is 2, then actual value is 0.01.\n            This value determines whether to use the signed or unsigned threshold\n            and value columns: If the minimum is below zero the sensor can have\n            negative readings and the signed columns should be used.\n            This parameter does not apply to sensors without numerical reading.')
circuitSensorSignedLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 4, 1, 28), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitSensorSignedLowerCriticalThreshold.setStatus('current')
if mibBuilder.loadTexts: circuitSensorSignedLowerCriticalThreshold.setDescription('The lower critical threshold as a signed integer.\n            The value of this OID variable should be scaled by\n            inletSensorDecimalDigits.  For example, if the value is 1 and\n            inletSensorDecimalDigits is 2, then actual value is 0.01.\n            The value is undefined for sensors whose range exceeds the\n            Integer32 range (-2147483648 .. 2147483647).\n            This parameter does not apply to sensors without numerical reading.')
circuitSensorSignedLowerWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 4, 1, 29), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitSensorSignedLowerWarningThreshold.setStatus('current')
if mibBuilder.loadTexts: circuitSensorSignedLowerWarningThreshold.setDescription('The lower warning threshold as a signed integer.\n            The value of this OID variable should be scaled by\n            inletSensorDecimalDigits.  For example, if the value is 1 and\n            inletSensorDecimalDigits is 2, then actual value is 0.01.\n            The value is undefined for sensors whose range exceeds the\n            Integer32 range (-2147483648 .. 2147483647).\n            This parameter does not apply to sensors without numerical reading.')
circuitSensorSignedUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 4, 1, 30), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitSensorSignedUpperCriticalThreshold.setStatus('current')
if mibBuilder.loadTexts: circuitSensorSignedUpperCriticalThreshold.setDescription('The upper critical threshold as a signed integer.\n            The value of this OID variable should be scaled by\n            inletSensorDecimalDigits.  For example, if the value is 1 and\n            inletSensorDecimalDigits is 2, then actual value is 0.01.\n            The value is undefined for sensors whose range exceeds the\n            Integer32 range (-2147483648 .. 2147483647).\n            This parameter does not apply to sensors without numerical reading.')
circuitSensorSignedUpperWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 4, 1, 31), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitSensorSignedUpperWarningThreshold.setStatus('current')
if mibBuilder.loadTexts: circuitSensorSignedUpperWarningThreshold.setDescription('The upper warning threshold as a signed integer.\n            The value of this OID variable should be scaled by\n            inletSensorDecimalDigits.  For example, if the value is 1 and\n            inletSensorDecimalDigits is 2, then actual value is 0.01.\n            The value is undefined for sensors whose range exceeds the\n            Integer32 range (-2147483648 .. 2147483647).\n            This parameter does not apply to sensors without numerical reading.')
circuitPoleSensorConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 6), )
if mibBuilder.loadTexts: circuitPoleSensorConfigurationTable.setStatus('current')
if mibBuilder.loadTexts: circuitPoleSensorConfigurationTable.setDescription("A list of configuration entries for a circuit's pole sensors.")
circuitPoleSensorConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 6, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "circuitId"), (0, "PDU2-MIB", "circuitPoleId"), (0, "PDU2-MIB", "sensorType"))
if mibBuilder.loadTexts: circuitPoleSensorConfigurationEntry.setStatus('current')
if mibBuilder.loadTexts: circuitPoleSensorConfigurationEntry.setDescription('An entry containing objects for configuring a circuit pole sensor.')
circuitPoleSensorLogAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 6, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitPoleSensorLogAvailable.setStatus('current')
if mibBuilder.loadTexts: circuitPoleSensorLogAvailable.setDescription('Is data logging enabled for the sensor?')
circuitPoleSensorUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 6, 1, 6), SensorUnitsEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitPoleSensorUnits.setStatus('current')
if mibBuilder.loadTexts: circuitPoleSensorUnits.setDescription('The unit in which the sensor reading is reported.\n            This parameter does not apply to sensors without numerical reading.')
circuitPoleSensorDecimalDigits = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 6, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitPoleSensorDecimalDigits.setStatus('current')
if mibBuilder.loadTexts: circuitPoleSensorDecimalDigits.setDescription('The number of digits displayed to the right of the decimal point.\n            This parameter does not apply to sensors without numerical reading.')
circuitPoleSensorResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 6, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitPoleSensorResolution.setStatus('current')
if mibBuilder.loadTexts: circuitPoleSensorResolution.setDescription('The resolution: the minimum difference between any two measured values\n            The value of this OID variable should be scaled by\n            inletPoleSensorDecimalDigits.  For example, if the value is 1 and\n            inletPoleSensorDecimalDigits is 2, then actual value is 0.01.\n            This parameter does not apply to sensors without numerical reading.')
circuitPoleSensorMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 6, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitPoleSensorMaximum.setStatus('current')
if mibBuilder.loadTexts: circuitPoleSensorMaximum.setDescription('The largest possible reading as an unsigned integer.\n            The value of this OID variable should be scaled by\n            inletPoleSensorDecimalDigits.  For example, if the value is 1 and\n            inletPoleSensorDecimalDigits is 2, then actual value is 0.01.\n            The value is clamped if the scaled maximum exceeds 4294967295. It\n            is undefined for sensors which can have negative readings.\n            This parameter does not apply to sensors without numerical reading.')
circuitPoleSensorMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 6, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitPoleSensorMinimum.setStatus('current')
if mibBuilder.loadTexts: circuitPoleSensorMinimum.setDescription('The smallest possible reading as an unsigned integer.\n            The value of this OID variable should be scaled by\n            inletPoleSensorDecimalDigits.  For example, if the value is 1 and\n            inletPoleSensorDecimalDigits is 2, then actual value is 0.01.\n            The value is undefined for sensors which can have negative readings.\n            This parameter does not apply to sensors without numerical reading.')
circuitPoleSensorHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 6, 1, 13), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitPoleSensorHysteresis.setStatus('current')
if mibBuilder.loadTexts: circuitPoleSensorHysteresis.setDescription('The hysteresis used when crossing a threshold towards the normal state.\n            The value of this OID variable should be scaled by\n            inletPoleSensorDecimalDigits.  For example, if the value is 1 and\n            inletPoleSensorDecimalDigits is 2, then actual value is 0.01.\n            This parameter does not apply to sensors without numerical reading.')
circuitPoleSensorStateChangeDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 6, 1, 14), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitPoleSensorStateChangeDelay.setStatus('current')
if mibBuilder.loadTexts: circuitPoleSensorStateChangeDelay.setDescription('The delay measured in samples before a state is asserted.\n            If the value is zero, then the state is asserted as soon as\n            it is detected; if it is non-zero, say n, then the assertion\n            condition must exist for n+1 consecutive samples before the\n            event is reported.\n            This parameter does not apply to sensors without numerical reading.')
circuitPoleSensorLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 6, 1, 21), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitPoleSensorLowerCriticalThreshold.setStatus('current')
if mibBuilder.loadTexts: circuitPoleSensorLowerCriticalThreshold.setDescription('The lower critical threshold as an unsigned integer.\n            The value of this OID variable should be scaled by\n            inletPoleSensorDecimalDigits.  For example, if the value is 1 and\n            inletPoleSensorDecimalDigits is 2, then actual value is 0.01.\n            The value is clamped if the scaled threshold exceeds 4294967295. It\n            is undefined for sensors which can have negative readings.\n            This parameter does not apply to sensors without numerical reading.')
circuitPoleSensorLowerWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 6, 1, 22), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitPoleSensorLowerWarningThreshold.setStatus('current')
if mibBuilder.loadTexts: circuitPoleSensorLowerWarningThreshold.setDescription('The lower warning threshold as an unsigned integer.\n            The value of this OID variable should be scaled by\n            inletPoleSensorDecimalDigits.  For example, if the value is 1 and\n            inletPoleSensorDecimalDigits is 2, then actual value is 0.01.\n            The value is clamped if the scaled threshold exceeds 4294967295. It\n            is undefined for sensors which can have negative readings.\n            This parameter does not apply to sensors without numerical reading.')
circuitPoleSensorUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 6, 1, 23), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitPoleSensorUpperCriticalThreshold.setStatus('current')
if mibBuilder.loadTexts: circuitPoleSensorUpperCriticalThreshold.setDescription('The upper critical threshold as an unsigned integer.\n            The value of this OID variable should be scaled by\n            inletPoleSensorDecimalDigits.  For example, if the value is 1 and\n            inletPoleSensorDecimalDigits is 2, then actual value is 0.01.\n            The value is clamped if the scaled threshold exceeds 4294967295. It\n            is undefined for sensors which can have negative readings.\n            This parameter does not apply to sensors without numerical reading.')
circuitPoleSensorUpperWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 6, 1, 24), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitPoleSensorUpperWarningThreshold.setStatus('current')
if mibBuilder.loadTexts: circuitPoleSensorUpperWarningThreshold.setDescription('The upper warning threshold as an unsigned integer.\n            The value of this OID variable should be scaled by\n            inletPoleSensorDecimalDigits.  For example, if the value is 1 and\n            inletPoleSensorDecimalDigits is 2, then actual value is 0.01.\n            The value is clamped if the scaled threshold exceeds 4294967295. It\n            is undefined for sensors which can have negative readings.\n            This parameter does not apply to sensors without numerical reading.')
circuitPoleSensorEnabledThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 6, 1, 25), Bits().clone(namedValues=NamedValues(("lowerCritical", 0), ("lowerWarning", 1), ("upperWarning", 2), ("upperCritical", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitPoleSensorEnabledThresholds.setStatus('current')
if mibBuilder.loadTexts: circuitPoleSensorEnabledThresholds.setDescription('A bit string indicating which thresholds are enabled.\n            This parameter does not apply to sensors without numerical reading.')
circuitPoleSensorSignedMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 6, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitPoleSensorSignedMaximum.setStatus('current')
if mibBuilder.loadTexts: circuitPoleSensorSignedMaximum.setDescription('The largest possible reading as a signed integer.\n            The value of this OID variable should be scaled by\n            inletPoleSensorDecimalDigits.  For example, if the value is 1 and\n            inletPoleSensorDecimalDigits is 2, then actual value is 0.01.\n            The value is undefined for sensors whose range exceeds the\n            Integer32 range (-2147483648 .. 2147483647).\n            This parameter does not apply to sensors without numerical reading.')
circuitPoleSensorSignedMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 6, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitPoleSensorSignedMinimum.setStatus('current')
if mibBuilder.loadTexts: circuitPoleSensorSignedMinimum.setDescription('The smallest possible reading as a signed integer.\n            The value of this OID variable should be scaled by\n            inletPoleSensorDecimalDigits.  For example, if the value is 1 and\n            inletPoleSensorDecimalDigits is 2, then actual value is 0.01.\n            This value determines whether to use the signed or unsigned threshold\n            and value columns: If the minimum is below zero the sensor can have\n            negative readings and the signed columns should be used.\n            This parameter does not apply to sensors without numerical reading.')
circuitPoleSensorSignedLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 6, 1, 28), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitPoleSensorSignedLowerCriticalThreshold.setStatus('current')
if mibBuilder.loadTexts: circuitPoleSensorSignedLowerCriticalThreshold.setDescription('The lower critical threshold as a signed integer.\n            The value of this OID variable should be scaled by\n            inletPoleSensorDecimalDigits.  For example, if the value is 1 and\n            inletPoleSensorDecimalDigits is 2, then actual value is 0.01.\n            The value is undefined for sensors whose range exceeds the\n            Integer32 range (-2147483648 .. 2147483647).\n            This parameter does not apply to sensors without numerical reading.')
circuitPoleSensorSignedLowerWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 6, 1, 29), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitPoleSensorSignedLowerWarningThreshold.setStatus('current')
if mibBuilder.loadTexts: circuitPoleSensorSignedLowerWarningThreshold.setDescription('The lower warning threshold as a signed integer.\n            The value of this OID variable should be scaled by\n            inletPoleSensorDecimalDigits.  For example, if the value is 1 and\n            inletPoleSensorDecimalDigits is 2, then actual value is 0.01.\n            The value is undefined for sensors whose range exceeds the\n            Integer32 range (-2147483648 .. 2147483647).\n            This parameter does not apply to sensors without numerical reading.')
circuitPoleSensorSignedUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 6, 1, 30), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitPoleSensorSignedUpperCriticalThreshold.setStatus('current')
if mibBuilder.loadTexts: circuitPoleSensorSignedUpperCriticalThreshold.setDescription('The upper critical threshold as a signed integer.\n            The value of this OID variable should be scaled by\n            inletPoleSensorDecimalDigits.  For example, if the value is 1 and\n            inletPoleSensorDecimalDigits is 2, then actual value is 0.01.\n            The value is undefined for sensors whose range exceeds the\n            Integer32 range (-2147483648 .. 2147483647).\n            This parameter does not apply to sensors without numerical reading.')
circuitPoleSensorSignedUpperWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 6, 1, 31), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitPoleSensorSignedUpperWarningThreshold.setStatus('current')
if mibBuilder.loadTexts: circuitPoleSensorSignedUpperWarningThreshold.setDescription('The upper warning threshold as a signed integer.\n            The value of this OID variable should be scaled by\n            inletPoleSensorDecimalDigits.  For example, if the value is 1 and\n            inletPoleSensorDecimalDigits is 2, then actual value is 0.01.\n            The value is undefined for sensors whose range exceeds the\n            Integer32 range (-2147483648 .. 2147483647).\n            This parameter does not apply to sensors without numerical reading.')
peripheralDevicePackageTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 5), )
if mibBuilder.loadTexts: peripheralDevicePackageTable.setStatus('current')
if mibBuilder.loadTexts: peripheralDevicePackageTable.setDescription('A list of entries for the peripheral device packages connected to a PDU.\n            The number of entries is given by the value of peripheralDevicePackagesCount.\n            A peripheral device package contains one or more sensors or actuators in a\n            single enclosure.')
peripheralDevicePackageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 5, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "peripheralDevicePackageId"))
if mibBuilder.loadTexts: peripheralDevicePackageEntry.setStatus('current')
if mibBuilder.loadTexts: peripheralDevicePackageEntry.setDescription('An entry containing objects for a peripheral device package.')
peripheralDevicePackageId = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: peripheralDevicePackageId.setStatus('current')
if mibBuilder.loadTexts: peripheralDevicePackageId.setDescription('A unique value for each peripheral device package.')
peripheralDevicePackageSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 5, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: peripheralDevicePackageSerialNumber.setStatus('current')
if mibBuilder.loadTexts: peripheralDevicePackageSerialNumber.setDescription('The peripheral device package serial number.')
peripheralDevicePackageModel = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 5, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: peripheralDevicePackageModel.setStatus('current')
if mibBuilder.loadTexts: peripheralDevicePackageModel.setDescription('The peripheral device package model.\n            Examples are DX-D2C6, DPX2-T1, DPX2-T1H1, DPX2-T2H1, DPX2-T3H1')
peripheralDevicePackageFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 5, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: peripheralDevicePackageFirmwareVersion.setStatus('current')
if mibBuilder.loadTexts: peripheralDevicePackageFirmwareVersion.setDescription('The peripheral device package firmware version.')
peripheralDevicePackageMinFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 5, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: peripheralDevicePackageMinFirmwareVersion.setStatus('current')
if mibBuilder.loadTexts: peripheralDevicePackageMinFirmwareVersion.setDescription('The peripheral device package minimum firmware version.\n            This field may be empty. If it is not empty, then it shall not be possible\n            to downgrade the peripheral device firmware to an older version.')
peripheralDevicePackageFirmwareTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 5, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: peripheralDevicePackageFirmwareTimeStamp.setStatus('current')
if mibBuilder.loadTexts: peripheralDevicePackageFirmwareTimeStamp.setDescription('The time when the peripheral device package firmware was last updated.\n            It is measured in seconds since January 1, 1970 (midnight UTC/GMT).')
peripheralDevicePackagePosition = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 5, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: peripheralDevicePackagePosition.setStatus('current')
if mibBuilder.loadTexts: peripheralDevicePackagePosition.setDescription('The position of the package in the bus topology.\n            The format is a semicolon separated list of Keyword:value pairs.\n            Keyword can be one of the following:\n                ONBOARD, DEVICE-1WIREPORT, HUBPORT, CHAIN-POSITION\n\n            Examples:\n            1) Onboard Sensor\n                   ONBOARD:CC1\n            2) Old sensor connected to device 1-wire port\n                   DEVICE-1WIREPORT:2\n            3) New-style sensor connected to device 1-wire port\n                   DEVICE-1WIREPORT:2;CHAIN-POSITION:3\n            4) New-style sensor connected to hub port 3\n                   DEVICE-1WIREPORT:2;CHAIN-POSITION:1;HUBPORT:3;CHAIN-POSITION:1\n            5) Old-style sensor connected to end of new-style sensor chain\n                   DEVICE-1WIREPORT:2;')
peripheralDevicePackageState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 5, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: peripheralDevicePackageState.setStatus('current')
if mibBuilder.loadTexts: peripheralDevicePackageState.setDescription('The state of the package.')
logIndexTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 6, 1, 1), )
if mibBuilder.loadTexts: logIndexTable.setStatus('current')
if mibBuilder.loadTexts: logIndexTable.setDescription('A table containing current indices for the data log buffer.')
logIndexEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 6, 1, 1, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"))
if mibBuilder.loadTexts: logIndexEntry.setStatus('current')
if mibBuilder.loadTexts: logIndexEntry.setDescription("An entry containing the current indices for a PDU's data log buffer.")
oldestLogID = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oldestLogID.setStatus('current')
if mibBuilder.loadTexts: oldestLogID.setDescription('The index of the oldest data in the buffer for this PDU.')
newestLogID = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: newestLogID.setStatus('current')
if mibBuilder.loadTexts: newestLogID.setDescription('The index of the newest data in the buffer for this PDU.')
logTimeStampTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 6, 1, 2), )
if mibBuilder.loadTexts: logTimeStampTable.setStatus('current')
if mibBuilder.loadTexts: logTimeStampTable.setDescription('A list of entries containing the timestamps of the entries in the log.')
logTimeStampEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 6, 1, 2, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "logIndex"))
if mibBuilder.loadTexts: logTimeStampEntry.setStatus('current')
if mibBuilder.loadTexts: logTimeStampEntry.setDescription('An entry containing the timestamp for log entries.')
logIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: logIndex.setStatus('current')
if mibBuilder.loadTexts: logIndex.setDescription('A unique value for each entry in the log. Its value\n            ranges between 1 and the value of logSize.')
logTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 1, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logTimeStamp.setStatus('current')
if mibBuilder.loadTexts: logTimeStamp.setDescription('The time when the data was collected. It is measured in seconds since\n            January 1, 1970 (midnight UTC/GMT).')
unitSensorLogTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 6, 1, 3), )
if mibBuilder.loadTexts: unitSensorLogTable.setStatus('current')
if mibBuilder.loadTexts: unitSensorLogTable.setDescription('A list of unit sensor entries in the log.')
unitSensorLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 6, 1, 3, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "sensorType"), (0, "PDU2-MIB", "logIndex"))
if mibBuilder.loadTexts: unitSensorLogEntry.setStatus('current')
if mibBuilder.loadTexts: unitSensorLogEntry.setDescription('An entry containing log objects for a unit sensor.')
logUnitSensorDataAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 1, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logUnitSensorDataAvailable.setStatus('current')
if mibBuilder.loadTexts: logUnitSensorDataAvailable.setDescription('Is data available for this sensor during this measurement period?')
logUnitSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 1, 3, 1, 3), SensorStateEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logUnitSensorState.setStatus('current')
if mibBuilder.loadTexts: logUnitSensorState.setDescription('The most critical sensor state during this measurement period.')
logUnitSensorAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 1, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logUnitSensorAvgValue.setStatus('current')
if mibBuilder.loadTexts: logUnitSensorAvgValue.setDescription('The average sensor reading for the log period as an unsigned integer.\n            The value of this OID variable should be scaled by\n            unitSensorDecimalDigits.  For example, if the value is 1 and\n            unitSensorDecimalDigits is 2, then actual value is 0.01.\n            This value will wrap around if the scaled sensor reading exceeds\n            4294967295. It is undefined for sensors which can have negative\n            readings.\n            This object does not apply to sensors without numerical reading.')
logUnitSensorMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 1, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logUnitSensorMaxValue.setStatus('current')
if mibBuilder.loadTexts: logUnitSensorMaxValue.setDescription('The maximum sensor reading for the log period as an unsigned integer.\n            The value of this OID variable should be scaled by\n            unitSensorDecimalDigits.  For example, if the value is 1 and\n            unitSensorDecimalDigits is 2, then actual value is 0.01.\n            This value will wrap around if the scaled sensor reading exceeds\n            4294967295. It is undefined for sensors which can have negative\n            readings.\n            This object does not apply to sensors without numerical reading.')
logUnitSensorMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 1, 3, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logUnitSensorMinValue.setStatus('current')
if mibBuilder.loadTexts: logUnitSensorMinValue.setDescription('The minimum sensor reading for the log period as an unsigned integer.\n            The value of this OID variable should be scaled by\n            unitSensorDecimalDigits.  For example, if the value is 1 and\n            unitSensorDecimalDigits is 2, then actual value is 0.01.\n            This value will wrap around if the scaled sensor reading exceeds\n            4294967295. It is undefined for sensors which can have negative\n            readings.\n            This object does not apply to sensors without numerical reading.')
logUnitSensorSignedAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 1, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logUnitSensorSignedAvgValue.setStatus('current')
if mibBuilder.loadTexts: logUnitSensorSignedAvgValue.setDescription('The average sensor reading for the log period as a signed integer.\n            The value of this OID variable should be scaled by\n            unitSensorDecimalDigits.  For example, if the value is 1 and\n            unitSensorDecimalDigits is 2, then actual value is 0.01.\n            This value is undefined for sensors whose range exceeds the\n            Integer32 range (-2147483648 .. 2147483647).\n            This object does not apply to sensors without numerical reading.')
logUnitSensorSignedMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 1, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logUnitSensorSignedMaxValue.setStatus('current')
if mibBuilder.loadTexts: logUnitSensorSignedMaxValue.setDescription('The maximum sensor reading for the log period as a signed integer.\n            The value of this OID variable should be scaled by\n            unitSensorDecimalDigits.  For example, if the value is 1 and\n            unitSensorDecimalDigits is 2, then actual value is 0.01.\n            This value is undefined for sensors whose range exceeds the\n            Integer32 range (-2147483648 .. 2147483647).\n            This object does not apply to sensors without numerical reading.')
logUnitSensorSignedMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 1, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logUnitSensorSignedMinValue.setStatus('current')
if mibBuilder.loadTexts: logUnitSensorSignedMinValue.setDescription('The minimum sensor reading for the log period as a signed integer.\n            The value of this OID variable should be scaled by\n            unitSensorDecimalDigits.  For example, if the value is 1 and\n            unitSensorDecimalDigits is 2, then actual value is 0.01.\n            This value is undefined for sensors whose range exceeds the\n            Integer32 range (-2147483648 .. 2147483647).\n            This object does not apply to sensors without numerical reading.')
inletSensorLogTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 6, 2, 3), )
if mibBuilder.loadTexts: inletSensorLogTable.setStatus('current')
if mibBuilder.loadTexts: inletSensorLogTable.setDescription('A list of inlet sensor entries in the log.')
inletSensorLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 6, 2, 3, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "inletId"), (0, "PDU2-MIB", "sensorType"), (0, "PDU2-MIB", "logIndex"))
if mibBuilder.loadTexts: inletSensorLogEntry.setStatus('current')
if mibBuilder.loadTexts: inletSensorLogEntry.setDescription('An entry containing log objects for an inlet sensor.')
logInletSensorDataAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 2, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logInletSensorDataAvailable.setStatus('current')
if mibBuilder.loadTexts: logInletSensorDataAvailable.setDescription('Is data available for this sensor during this measurement period?')
logInletSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 2, 3, 1, 3), SensorStateEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logInletSensorState.setStatus('current')
if mibBuilder.loadTexts: logInletSensorState.setDescription('The most critical sensor state during this measurement period.')
logInletSensorAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 2, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logInletSensorAvgValue.setStatus('current')
if mibBuilder.loadTexts: logInletSensorAvgValue.setDescription('The average sensor reading for the log period as an unsigned integer.\n            The value of this OID variable should be scaled by\n            inletSensorDecimalDigits.  For example, if the value is 1 and\n            inletSensorDecimalDigits is 2, then actual value is 0.01.\n            This value will wrap around if the scaled sensor reading exceeds\n            4294967295. It is undefined for sensors which can have negative\n            readings.\n            This object does not apply to sensors without numerical reading.')
logInletSensorMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 2, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logInletSensorMaxValue.setStatus('current')
if mibBuilder.loadTexts: logInletSensorMaxValue.setDescription('The maximum sensor reading for the log period as an unsigned integer.\n            The value of this OID variable should be scaled by\n            inletSensorDecimalDigits.  For example, if the value is 1 and\n            inletSensorDecimalDigits is 2, then actual value is 0.01.\n            This value will wrap around if the scaled sensor reading exceeds\n            4294967295. It is undefined for sensors which can have negative\n            readings.\n            This object does not apply to sensors without numerical reading.')
logInletSensorMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 2, 3, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logInletSensorMinValue.setStatus('current')
if mibBuilder.loadTexts: logInletSensorMinValue.setDescription('The minimum sensor reading for the log period as an unsigned integer.\n            The value of this OID variable should be scaled by\n            inletSensorDecimalDigits.  For example, if the value is 1 and\n            inletSensorDecimalDigits is 2, then actual value is 0.01.\n            This value will wrap around if the scaled sensor reading exceeds\n            4294967295. It is undefined for sensors which can have negative\n            readings.\n            This object does not apply to sensors without numerical reading.')
logInletSensorSignedAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 2, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logInletSensorSignedAvgValue.setStatus('current')
if mibBuilder.loadTexts: logInletSensorSignedAvgValue.setDescription('The average sensor reading for the log period as a signed integer.\n            The value of this OID variable should be scaled by\n            inletSensorDecimalDigits.  For example, if the value is 1 and\n            inletSensorDecimalDigits is 2, then actual value is 0.01.\n            This value is undefined for sensors whose range exceeds the\n            Integer32 range (-2147483648 .. 2147483647).\n            This object does not apply to sensors without numerical reading.')
logInletSensorSignedMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 2, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logInletSensorSignedMaxValue.setStatus('current')
if mibBuilder.loadTexts: logInletSensorSignedMaxValue.setDescription('The maximum sensor reading for the log period as a signed integer.\n            The value of this OID variable should be scaled by\n            inletSensorDecimalDigits.  For example, if the value is 1 and\n            inletSensorDecimalDigits is 2, then actual value is 0.01.\n            This value is undefined for sensors whose range exceeds the\n            Integer32 range (-2147483648 .. 2147483647).\n            This object does not apply to sensors without numerical reading.')
logInletSensorSignedMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 2, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logInletSensorSignedMinValue.setStatus('current')
if mibBuilder.loadTexts: logInletSensorSignedMinValue.setDescription('The minimum sensor reading for the log period as a signed integer.\n            The value of this OID variable should be scaled by\n            inletSensorDecimalDigits.  For example, if the value is 1 and\n            inletSensorDecimalDigits is 2, then actual value is 0.01.\n            This value is undefined for sensors whose range exceeds the\n            Integer32 range (-2147483648 .. 2147483647).\n            This object does not apply to sensors without numerical reading.')
inletPoleSensorLogTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 6, 2, 4), )
if mibBuilder.loadTexts: inletPoleSensorLogTable.setStatus('current')
if mibBuilder.loadTexts: inletPoleSensorLogTable.setDescription('A list of inletPole sensor entries in the log.')
inletPoleSensorLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 6, 2, 4, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "inletId"), (0, "PDU2-MIB", "inletPoleIndex"), (0, "PDU2-MIB", "sensorType"), (0, "PDU2-MIB", "logIndex"))
if mibBuilder.loadTexts: inletPoleSensorLogEntry.setStatus('current')
if mibBuilder.loadTexts: inletPoleSensorLogEntry.setDescription('An entry containing log objects for an inlet pole sensor.')
logInletPoleSensorDataAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 2, 4, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logInletPoleSensorDataAvailable.setStatus('current')
if mibBuilder.loadTexts: logInletPoleSensorDataAvailable.setDescription('Is data available for this sensor during this measurement period?')
logInletPoleSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 2, 4, 1, 3), SensorStateEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logInletPoleSensorState.setStatus('current')
if mibBuilder.loadTexts: logInletPoleSensorState.setDescription('The most critical sensor state during this measurement period.')
logInletPoleSensorAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 2, 4, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logInletPoleSensorAvgValue.setStatus('current')
if mibBuilder.loadTexts: logInletPoleSensorAvgValue.setDescription('The average sensor reading for the log period as an unsigned integer.\n            The value of this OID variable should be scaled by\n            inletPoleSensorDecimalDigits.  For example, if the value is 1 and\n            inletPoleSensorDecimalDigits is 2, then actual value is 0.01.\n            This value will wrap around if the scaled sensor reading exceeds\n            4294967295. It is undefined for sensors which can have negative\n            readings.\n            This object does not apply to sensors without numerical reading.')
logInletPoleSensorMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 2, 4, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logInletPoleSensorMaxValue.setStatus('current')
if mibBuilder.loadTexts: logInletPoleSensorMaxValue.setDescription('The maximum sensor reading for the log period as an unsigned integer.\n            The value of this OID variable should be scaled by\n            inletPoleSensorDecimalDigits.  For example, if the value is 1 and\n            inletPoleSensorDecimalDigits is 2, then actual value is 0.01.\n            This value will wrap around if the scaled sensor reading exceeds\n            4294967295. It is undefined for sensors which can have negative\n            readings.\n            This object does not apply to sensors without numerical reading.')
logInletPoleSensorMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 2, 4, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logInletPoleSensorMinValue.setStatus('current')
if mibBuilder.loadTexts: logInletPoleSensorMinValue.setDescription('The minimum sensor reading for the log period as an unsigned integer.\n            The value of this OID variable should be scaled by\n            inletPoleSensorDecimalDigits.  For example, if the value is 1 and\n            inletPoleSensorDecimalDigits is 2, then actual value is 0.01.\n            This value will wrap around if the scaled sensor reading exceeds\n            4294967295. It is undefined for sensors which can have negative\n            readings.\n            This object does not apply to sensors without numerical reading.')
logInletPoleSensorSignedAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 2, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logInletPoleSensorSignedAvgValue.setStatus('current')
if mibBuilder.loadTexts: logInletPoleSensorSignedAvgValue.setDescription('The average sensor reading for the log period as a signed integer.\n            The value of this OID variable should be scaled by\n            inletPoleSensorDecimalDigits.  For example, if the value is 1 and\n            inletPoleSensorDecimalDigits is 2, then actual value is 0.01.\n            This value is undefined for sensors whose range exceeds the\n            Integer32 range (-2147483648 .. 2147483647).\n            This object does not apply to sensors without numerical reading.')
logInletPoleSensorSignedMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 2, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logInletPoleSensorSignedMaxValue.setStatus('current')
if mibBuilder.loadTexts: logInletPoleSensorSignedMaxValue.setDescription('The maximum sensor reading for the log period as a signed integer.\n            The value of this OID variable should be scaled by\n            inletPoleSensorDecimalDigits.  For example, if the value is 1 and\n            inletPoleSensorDecimalDigits is 2, then actual value is 0.01.\n            This value is undefined for sensors whose range exceeds the\n            Integer32 range (-2147483648 .. 2147483647).\n            This object does not apply to sensors without numerical reading.')
logInletPoleSensorSignedMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 2, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logInletPoleSensorSignedMinValue.setStatus('current')
if mibBuilder.loadTexts: logInletPoleSensorSignedMinValue.setDescription('The minimum sensor reading for the log period as a signed integer.\n            The value of this OID variable should be scaled by\n            inletPoleSensorDecimalDigits.  For example, if the value is 1 and\n            inletPoleSensorDecimalDigits is 2, then actual value is 0.01.\n            This value is undefined for sensors whose range exceeds the\n            Integer32 range (-2147483648 .. 2147483647).\n            This object does not apply to sensors without numerical reading.')
outletSensorLogTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 6, 4, 3), )
if mibBuilder.loadTexts: outletSensorLogTable.setStatus('current')
if mibBuilder.loadTexts: outletSensorLogTable.setDescription('A list of outlet sensor entries in the log.')
outletSensorLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 6, 4, 3, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "outletId"), (0, "PDU2-MIB", "sensorType"), (0, "PDU2-MIB", "logIndex"))
if mibBuilder.loadTexts: outletSensorLogEntry.setStatus('current')
if mibBuilder.loadTexts: outletSensorLogEntry.setDescription('An entry containing log objects for an outlet sensor.')
logOutletSensorDataAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 4, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logOutletSensorDataAvailable.setStatus('current')
if mibBuilder.loadTexts: logOutletSensorDataAvailable.setDescription('Is data available for this sensor during this measurement period?')
logOutletSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 4, 3, 1, 3), SensorStateEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logOutletSensorState.setStatus('current')
if mibBuilder.loadTexts: logOutletSensorState.setDescription('The most critical sensor state during this measurement period.')
logOutletSensorAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 4, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logOutletSensorAvgValue.setStatus('current')
if mibBuilder.loadTexts: logOutletSensorAvgValue.setDescription('The average sensor reading for the log period as an unsigned integer.\n            The value of this OID variable should be scaled by\n            outletSensorDecimalDigits.  For example, if the value is 1 and\n            outletSensorDecimalDigits is 2, then actual value is 0.01.\n            This value will wrap around if the scaled sensor reading exceeds\n            4294967295. It is undefined for sensors which can have negative\n            readings.\n            This object does not apply to sensors without numerical reading.')
logOutletSensorMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 4, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logOutletSensorMaxValue.setStatus('current')
if mibBuilder.loadTexts: logOutletSensorMaxValue.setDescription('The maximum sensor reading for the log period as an unsigned integer.\n            The value of this OID variable should be scaled by\n            outletSensorDecimalDigits.  For example, if the value is 1 and\n            outletSensorDecimalDigits is 2, then actual value is 0.01.\n            This value will wrap around if the scaled sensor reading exceeds\n            4294967295. It is undefined for sensors which can have negative\n            readings.\n            This object does not apply to sensors without numerical reading.')
logOutletSensorMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 4, 3, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logOutletSensorMinValue.setStatus('current')
if mibBuilder.loadTexts: logOutletSensorMinValue.setDescription('The minimum sensor reading for the log period as an unsigned integer.\n            The value of this OID variable should be scaled by\n            outletSensorDecimalDigits.  For example, if the value is 1 and\n            outletSensorDecimalDigits is 2, then actual value is 0.01.\n            This value will wrap around if the scaled sensor reading exceeds\n            4294967295. It is undefined for sensors which can have negative\n            readings.\n            This object does not apply to sensors without numerical reading.')
logOutletSensorSignedAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 4, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logOutletSensorSignedAvgValue.setStatus('current')
if mibBuilder.loadTexts: logOutletSensorSignedAvgValue.setDescription('The average sensor reading for the log period as a signed integer.\n            The value of this OID variable should be scaled by\n            outletSensorDecimalDigits.  For example, if the value is 1 and\n            outletSensorDecimalDigits is 2, then actual value is 0.01.\n            This value is undefined for sensors whose range exceeds the\n            Integer32 range (-2147483648 .. 2147483647).\n            This object does not apply to sensors without numerical reading.')
logOutletSensorSignedMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 4, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logOutletSensorSignedMaxValue.setStatus('current')
if mibBuilder.loadTexts: logOutletSensorSignedMaxValue.setDescription('The maximum sensor reading for the log period as a signed integer.\n            The value of this OID variable should be scaled by\n            outletSensorDecimalDigits.  For example, if the value is 1 and\n            outletSensorDecimalDigits is 2, then actual value is 0.01.\n            This value is undefined for sensors whose range exceeds the\n            Integer32 range (-2147483648 .. 2147483647).\n            This object does not apply to sensors without numerical reading.')
logOutletSensorSignedMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 4, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logOutletSensorSignedMinValue.setStatus('current')
if mibBuilder.loadTexts: logOutletSensorSignedMinValue.setDescription('The minimum sensor reading for the log period as a signed integer.\n            The value of this OID variable should be scaled by\n            outletSensorDecimalDigits.  For example, if the value is 1 and\n            outletSensorDecimalDigits is 2, then actual value is 0.01.\n            This value is undefined for sensors whose range exceeds the\n            Integer32 range (-2147483648 .. 2147483647).\n            This object does not apply to sensors without numerical reading.')
outletPoleSensorLogTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 6, 4, 4), )
if mibBuilder.loadTexts: outletPoleSensorLogTable.setStatus('current')
if mibBuilder.loadTexts: outletPoleSensorLogTable.setDescription('A list of outlet pole sensor entries in the log.')
outletPoleSensorLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 6, 4, 4, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "outletId"), (0, "PDU2-MIB", "outletPoleIndex"), (0, "PDU2-MIB", "sensorType"), (0, "PDU2-MIB", "logIndex"))
if mibBuilder.loadTexts: outletPoleSensorLogEntry.setStatus('current')
if mibBuilder.loadTexts: outletPoleSensorLogEntry.setDescription('An entry containing log objects for an outlet pole sensor.')
logOutletPoleSensorDataAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 4, 4, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logOutletPoleSensorDataAvailable.setStatus('current')
if mibBuilder.loadTexts: logOutletPoleSensorDataAvailable.setDescription('Is data available for this sensor during this measurement period?')
logOutletPoleSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 4, 4, 1, 3), SensorStateEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logOutletPoleSensorState.setStatus('current')
if mibBuilder.loadTexts: logOutletPoleSensorState.setDescription('The most critical sensor state during this measurement period.')
logOutletPoleSensorAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 4, 4, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logOutletPoleSensorAvgValue.setStatus('current')
if mibBuilder.loadTexts: logOutletPoleSensorAvgValue.setDescription('The average sensor reading for the log period as an unsigned integer.\n            The value of this OID variable should be scaled by\n            outletPoleSensorDecimalDigits.  For example, if the value is 1 and\n            outletPoleSensorDecimalDigits is 2, then actual value is 0.01.\n            This value will wrap around if the scaled sensor reading exceeds\n            4294967295. It is undefined for sensors which can have negative\n            readings.\n            This object does not apply to sensors without numerical reading.')
logOutletPoleSensorMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 4, 4, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logOutletPoleSensorMaxValue.setStatus('current')
if mibBuilder.loadTexts: logOutletPoleSensorMaxValue.setDescription('The maximum sensor reading for the log period as an unsigned integer.\n            The value of this OID variable should be scaled by\n            outletPoleSensorDecimalDigits.  For example, if the value is 1 and\n            outletPoleSensorDecimalDigits is 2, then actual value is 0.01.\n            This value will wrap around if the scaled sensor reading exceeds\n            4294967295. It is undefined for sensors which can have negative\n            readings.\n            This object does not apply to sensors without numerical reading.')
logOutletPoleSensorMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 4, 4, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logOutletPoleSensorMinValue.setStatus('current')
if mibBuilder.loadTexts: logOutletPoleSensorMinValue.setDescription('The minimum sensor reading for the log period as an unsigned integer.\n            The value of this OID variable should be scaled by\n            outletPoleSensorDecimalDigits.  For example, if the value is 1 and\n            outletPoleSensorDecimalDigits is 2, then actual value is 0.01.\n            This value will wrap around if the scaled sensor reading exceeds\n            4294967295. It is undefined for sensors which can have negative\n            readings.\n            This object does not apply to sensors without numerical reading.')
logOutletPoleSensorSignedAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 4, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logOutletPoleSensorSignedAvgValue.setStatus('current')
if mibBuilder.loadTexts: logOutletPoleSensorSignedAvgValue.setDescription('The average sensor reading for the log period as a signed integer.\n            The value of this OID variable should be scaled by\n            outletPoleSensorDecimalDigits.  For example, if the value is 1 and\n            outletPoleSensorDecimalDigits is 2, then actual value is 0.01.\n            This value is undefined for sensors whose range exceeds the\n            Integer32 range (-2147483648 .. 2147483647).\n            This object does not apply to sensors without numerical reading.')
logOutletPoleSensorSignedMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 4, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logOutletPoleSensorSignedMaxValue.setStatus('current')
if mibBuilder.loadTexts: logOutletPoleSensorSignedMaxValue.setDescription('The maximum sensor reading for the log period as a signed integer.\n            The value of this OID variable should be scaled by\n            outletPoleSensorDecimalDigits.  For example, if the value is 1 and\n            outletPoleSensorDecimalDigits is 2, then actual value is 0.01.\n            This value is undefined for sensors whose range exceeds the\n            Integer32 range (-2147483648 .. 2147483647).\n            This object does not apply to sensors without numerical reading.')
logOutletPoleSensorSignedMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 4, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logOutletPoleSensorSignedMinValue.setStatus('current')
if mibBuilder.loadTexts: logOutletPoleSensorSignedMinValue.setDescription('The minimum sensor reading for the log period as a signed integer.\n            The value of this OID variable should be scaled by\n            outletPoleSensorDecimalDigits.  For example, if the value is 1 and\n            outletPoleSensorDecimalDigits is 2, then actual value is 0.01.\n            This value is undefined for sensors whose range exceeds the\n            Integer32 range (-2147483648 .. 2147483647).\n            This object does not apply to sensors without numerical reading.')
overCurrentProtectorSensorLogTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 6, 3, 3), )
if mibBuilder.loadTexts: overCurrentProtectorSensorLogTable.setStatus('current')
if mibBuilder.loadTexts: overCurrentProtectorSensorLogTable.setDescription('A list of overcurrent protector sensor entries in the log.')
overCurrentProtectorSensorLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 6, 3, 3, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "overCurrentProtectorIndex"), (0, "PDU2-MIB", "sensorType"), (0, "PDU2-MIB", "logIndex"))
if mibBuilder.loadTexts: overCurrentProtectorSensorLogEntry.setStatus('current')
if mibBuilder.loadTexts: overCurrentProtectorSensorLogEntry.setDescription('An entry containing log objects for an overcurrent protector sensor.')
logOverCurrentProtectorSensorDataAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 3, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logOverCurrentProtectorSensorDataAvailable.setStatus('current')
if mibBuilder.loadTexts: logOverCurrentProtectorSensorDataAvailable.setDescription('Is data available for this sensor during this measurement period?')
logOverCurrentProtectorSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 3, 3, 1, 3), SensorStateEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logOverCurrentProtectorSensorState.setStatus('current')
if mibBuilder.loadTexts: logOverCurrentProtectorSensorState.setDescription('The most critical sensor state during this measurement period.')
logOverCurrentProtectorSensorAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 3, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logOverCurrentProtectorSensorAvgValue.setStatus('current')
if mibBuilder.loadTexts: logOverCurrentProtectorSensorAvgValue.setDescription('The average sensor reading for the log period as an unsigned integer.\n            The value of this OID variable should be scaled by\n            overCurrentProtectorSensorDecimalDigits.  For example, if the value is 1 and\n            overCurrentProtectorSensorDecimalDigits is 2, then actual value is 0.01.\n            This value will wrap around if the scaled sensor reading exceeds\n            4294967295. It is undefined for sensors which can have negative\n            readings.\n            This object does not apply to sensors without numerical reading.')
logOverCurrentProtectorSensorMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 3, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logOverCurrentProtectorSensorMaxValue.setStatus('current')
if mibBuilder.loadTexts: logOverCurrentProtectorSensorMaxValue.setDescription('The maximum sensor reading for the log period as an unsigned integer.\n            The value of this OID variable should be scaled by\n            overCurrentProtectorSensorDecimalDigits.  For example, if the value is 1 and\n            overCurrentProtectorSensorDecimalDigits is 2, then actual value is 0.01.\n            This value will wrap around if the scaled sensor reading exceeds\n            4294967295. It is undefined for sensors which can have negative\n            readings.\n            This object does not apply to sensors without numerical reading.')
logOverCurrentProtectorSensorMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 3, 3, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logOverCurrentProtectorSensorMinValue.setStatus('current')
if mibBuilder.loadTexts: logOverCurrentProtectorSensorMinValue.setDescription('The minimum sensor reading for the log period as an unsigned integer.\n            The value of this OID variable should be scaled by\n            overCurrentProtectorSensorDecimalDigits.  For example, if the value is 1 and\n            overCurrentProtectorSensorDecimalDigits is 2, then actual value is 0.01.\n            This value will wrap around if the scaled sensor reading exceeds\n            4294967295. It is undefined for sensors which can have negative\n            readings.\n            This object does not apply to sensors without numerical reading.')
logOverCurrentProtectorSensorSignedAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 3, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logOverCurrentProtectorSensorSignedAvgValue.setStatus('current')
if mibBuilder.loadTexts: logOverCurrentProtectorSensorSignedAvgValue.setDescription('The average sensor reading for the log period as a signed integer.\n            The value of this OID variable should be scaled by\n            overCurrentProtectorSensorDecimalDigits.  For example, if the value is 1 and\n            overCurrentProtectorSensorDecimalDigits is 2, then actual value is 0.01.\n            This value is undefined for sensors whose range exceeds the\n            Integer32 range (-2147483648 .. 2147483647).\n            This object does not apply to sensors without numerical reading.')
logOverCurrentProtectorSensorSignedMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 3, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logOverCurrentProtectorSensorSignedMaxValue.setStatus('current')
if mibBuilder.loadTexts: logOverCurrentProtectorSensorSignedMaxValue.setDescription('The maximum sensor reading for the log period as a signed integer.\n            The value of this OID variable should be scaled by\n            overCurrentProtectorSensorDecimalDigits.  For example, if the value is 1 and\n            overCurrentProtectorSensorDecimalDigits is 2, then actual value is 0.01.\n            This value is undefined for sensors whose range exceeds the\n            Integer32 range (-2147483648 .. 2147483647).\n            This object does not apply to sensors without numerical reading.')
logOverCurrentProtectorSensorSignedMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 3, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logOverCurrentProtectorSensorSignedMinValue.setStatus('current')
if mibBuilder.loadTexts: logOverCurrentProtectorSensorSignedMinValue.setDescription('The minimum sensor reading for the log period as a signed integer.\n            The value of this OID variable should be scaled by\n            overCurrentProtectorSensorDecimalDigits.  For example, if the value is 1 and\n            overCurrentProtectorSensorDecimalDigits is 2, then actual value is 0.01.\n            This value is undefined for sensors whose range exceeds the\n            Integer32 range (-2147483648 .. 2147483647).\n            This object does not apply to sensors without numerical reading.')
externalSensorLogTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 6, 5, 3), )
if mibBuilder.loadTexts: externalSensorLogTable.setStatus('current')
if mibBuilder.loadTexts: externalSensorLogTable.setDescription('A list of external sensor entries in the log.')
externalSensorLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 6, 5, 3, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "sensorID"), (0, "PDU2-MIB", "logIndex"))
if mibBuilder.loadTexts: externalSensorLogEntry.setStatus('current')
if mibBuilder.loadTexts: externalSensorLogEntry.setDescription('An entry containing log objects for an external sensor.')
logExternalSensorDataAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 5, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logExternalSensorDataAvailable.setStatus('current')
if mibBuilder.loadTexts: logExternalSensorDataAvailable.setDescription('Is data available for this sensor during this measurement period?')
logExternalSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 5, 3, 1, 3), SensorStateEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logExternalSensorState.setStatus('current')
if mibBuilder.loadTexts: logExternalSensorState.setDescription('The most critical sensor state during this measurement period.')
logExternalSensorAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 5, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logExternalSensorAvgValue.setStatus('current')
if mibBuilder.loadTexts: logExternalSensorAvgValue.setDescription('The sensor reading average value.\n            The value of this OID variable should be scaled by\n            externalSensorDecimalDigits.  For example, if the value is 1 and\n            externalSensorDecimalDigits is 2, then actual value is 0.01.\n            This object does not apply to sensors without numerical reading.')
logExternalSensorMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 5, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logExternalSensorMaxValue.setStatus('current')
if mibBuilder.loadTexts: logExternalSensorMaxValue.setDescription('The sensor reading maximum value.\n            The value of this OID variable should be scaled by\n            externalSensorDecimalDigits.  For example, if the value is 1 and\n            externalSensorDecimalDigits is 2, then actual value is 0.01.\n            This object does not apply to sensors without numerical reading.')
logExternalSensorMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 5, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logExternalSensorMinValue.setStatus('current')
if mibBuilder.loadTexts: logExternalSensorMinValue.setDescription('The sensor reading minimum value.\n            The value of this OID variable should be scaled by\n            externalSensorDecimalDigits.  For example, if the value is 1 and\n            externalSensorDecimalDigits is 2, then actual value is 0.01.\n            This object does not apply to sensors without numerical reading.')
wireSensorLogTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 6, 6, 3), )
if mibBuilder.loadTexts: wireSensorLogTable.setStatus('deprecated')
if mibBuilder.loadTexts: wireSensorLogTable.setDescription('A list of wire sensor entries in the log.\n            Note: This feature is no longer used, the table is always empty.')
wireSensorLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 6, 6, 3, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "wireId"), (0, "PDU2-MIB", "sensorType"), (0, "PDU2-MIB", "logIndex"))
if mibBuilder.loadTexts: wireSensorLogEntry.setStatus('deprecated')
if mibBuilder.loadTexts: wireSensorLogEntry.setDescription('An entry containing log objects for a wire sensor.')
logWireSensorDataAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 6, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logWireSensorDataAvailable.setStatus('deprecated')
if mibBuilder.loadTexts: logWireSensorDataAvailable.setDescription('Is data available for this sensor during this measurement period?')
logWireSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 6, 3, 1, 3), SensorStateEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logWireSensorState.setStatus('deprecated')
if mibBuilder.loadTexts: logWireSensorState.setDescription('The most critical sensor state during this measurement period.')
logWireSensorAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 6, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logWireSensorAvgValue.setStatus('deprecated')
if mibBuilder.loadTexts: logWireSensorAvgValue.setDescription('The sensor reading average value.\n            The value of this OID variable should be scaled by\n            wireSensorDecimalDigits. For example, if the value is 1 and\n            wireSensorDecimalDigits is 2, then actual value is 0.01.\n            This value will wrap around if the value exceeds 4294967295.\n            This object does not apply to sensors without numerical reading.')
logWireSensorMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 6, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logWireSensorMaxValue.setStatus('deprecated')
if mibBuilder.loadTexts: logWireSensorMaxValue.setDescription('The sensor reading maximum value.\n            The value of this OID variable should be scaled by\n            wireSensorDecimalDigits. For example, if the value is 1 and\n            wireSensorDecimalDigits is 2, then actual value is 0.01.\n            This value will wrap around if the value exceeds 4294967295.\n            This object does not apply to sensors without numerical reading.')
logWireSensorMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 6, 3, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logWireSensorMinValue.setStatus('deprecated')
if mibBuilder.loadTexts: logWireSensorMinValue.setDescription('The sensor reading minimum value.\n            The value of this OID variable should be scaled by\n            wireSensorDecimalDigits. For example, if the value is 1 and\n            wireSensorDecimalDigits is 2, then actual value is 0.01.\n            This value will wrap around if the value exceeds 4294967295.\n            This object does not apply to sensors without numerical reading.')
transferSwitchSensorLogTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 6, 7, 3), )
if mibBuilder.loadTexts: transferSwitchSensorLogTable.setStatus('current')
if mibBuilder.loadTexts: transferSwitchSensorLogTable.setDescription('A list of transfer switch sensor entries in the log.')
transferSwitchSensorLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 6, 7, 3, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "transferSwitchId"), (0, "PDU2-MIB", "sensorType"), (0, "PDU2-MIB", "logIndex"))
if mibBuilder.loadTexts: transferSwitchSensorLogEntry.setStatus('current')
if mibBuilder.loadTexts: transferSwitchSensorLogEntry.setDescription('An entry containing log objects for a transfer switch sensor.')
logTransferSwitchSensorDataAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 7, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logTransferSwitchSensorDataAvailable.setStatus('current')
if mibBuilder.loadTexts: logTransferSwitchSensorDataAvailable.setDescription('Is data available for this sensor during this measurement period?')
logTransferSwitchSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 7, 3, 1, 3), SensorStateEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logTransferSwitchSensorState.setStatus('current')
if mibBuilder.loadTexts: logTransferSwitchSensorState.setDescription('The most critical sensor state during this measurement period.')
logTransferSwitchSensorAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 7, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logTransferSwitchSensorAvgValue.setStatus('current')
if mibBuilder.loadTexts: logTransferSwitchSensorAvgValue.setDescription('The average sensor reading for the log period as an unsigned integer.\n            The value of this OID variable should be scaled by\n            transferSwitchSensorDecimalDigits.  For example, if the value is 1 and\n            transferSwitchSensorDecimalDigits is 2, then actual value is 0.01.\n            This value will wrap around if the scaled sensor reading exceeds\n            4294967295. It is undefined for sensors which can have negative\n            readings.\n            This object does not apply to sensors without numerical reading.')
logTransferSwitchSensorMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 7, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logTransferSwitchSensorMaxValue.setStatus('current')
if mibBuilder.loadTexts: logTransferSwitchSensorMaxValue.setDescription('The maximum sensor reading for the log period as an unsigned integer.\n            The value of this OID variable should be scaled by\n            transferSwitchSensorDecimalDigits.  For example, if the value is 1 and\n            transferSwitchSensorDecimalDigits is 2, then actual value is 0.01.\n            This value will wrap around if the scaled sensor reading exceeds\n            4294967295. It is undefined for sensors which can have negative\n            readings.\n            This object does not apply to sensors without numerical reading.')
logTransferSwitchSensorMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 7, 3, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logTransferSwitchSensorMinValue.setStatus('current')
if mibBuilder.loadTexts: logTransferSwitchSensorMinValue.setDescription('The minimum sensor reading for the log period as an unsigned integer.\n            The value of this OID variable should be scaled by\n            transferSwitchSensorDecimalDigits.  For example, if the value is 1 and\n            transferSwitchSensorDecimalDigits is 2, then actual value is 0.01.\n            This value will wrap around if the scaled sensor reading exceeds\n            4294967295. It is undefined for sensors which can have negative\n            readings.\n            This object does not apply to sensors without numerical reading.')
logTransferSwitchSensorSignedAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 7, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logTransferSwitchSensorSignedAvgValue.setStatus('current')
if mibBuilder.loadTexts: logTransferSwitchSensorSignedAvgValue.setDescription('The average sensor reading for the log period as a signed integer.\n            The value of this OID variable should be scaled by\n            transferSwitchSensorDecimalDigits.  For example, if the value is 1 and\n            transferSwitchSensorDecimalDigits is 2, then actual value is 0.01.\n            This value is undefined for sensors whose range exceeds the\n            Integer32 range (-2147483648 .. 2147483647).\n            This object does not apply to sensors without numerical reading.')
logTransferSwitchSensorSignedMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 7, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logTransferSwitchSensorSignedMaxValue.setStatus('current')
if mibBuilder.loadTexts: logTransferSwitchSensorSignedMaxValue.setDescription('The maximum sensor reading for the log period as a signed integer.\n            The value of this OID variable should be scaled by\n            transferSwitchSensorDecimalDigits.  For example, if the value is 1 and\n            transferSwitchSensorDecimalDigits is 2, then actual value is 0.01.\n            This value is undefined for sensors whose range exceeds the\n            Integer32 range (-2147483648 .. 2147483647).\n            This object does not apply to sensors without numerical reading.')
logTransferSwitchSensorSignedMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 7, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logTransferSwitchSensorSignedMinValue.setStatus('current')
if mibBuilder.loadTexts: logTransferSwitchSensorSignedMinValue.setDescription('The minimum sensor reading for the log period as a signed integer.\n            The value of this OID variable should be scaled by\n            transferSwitchSensorDecimalDigits.  For example, if the value is 1 and\n            transferSwitchSensorDecimalDigits is 2, then actual value is 0.01.\n            This value is undefined for sensors whose range exceeds the\n            Integer32 range (-2147483648 .. 2147483647).\n            This object does not apply to sensors without numerical reading.')
circuitSensorLogTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 6, 8, 3), )
if mibBuilder.loadTexts: circuitSensorLogTable.setStatus('current')
if mibBuilder.loadTexts: circuitSensorLogTable.setDescription('A list of  circuit sensor entries in the log.')
circuitSensorLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 6, 8, 3, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "circuitId"), (0, "PDU2-MIB", "sensorType"), (0, "PDU2-MIB", "logIndex"))
if mibBuilder.loadTexts: circuitSensorLogEntry.setStatus('current')
if mibBuilder.loadTexts: circuitSensorLogEntry.setDescription('An entry containing log objects for a circuit sensor.')
logCircuitSensorDataAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 8, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logCircuitSensorDataAvailable.setStatus('current')
if mibBuilder.loadTexts: logCircuitSensorDataAvailable.setDescription('Is data available for this sensor during this measurement period?')
logCircuitSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 8, 3, 1, 3), SensorStateEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logCircuitSensorState.setStatus('current')
if mibBuilder.loadTexts: logCircuitSensorState.setDescription('The most critical sensor state during this measurement period.')
logCircuitSensorAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 8, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logCircuitSensorAvgValue.setStatus('current')
if mibBuilder.loadTexts: logCircuitSensorAvgValue.setDescription('The average sensor reading for the log period as an unsigned integer.\n            The value of this OID variable should be scaled by\n            inletSensorDecimalDigits.  For example, if the value is 1 and\n            inletSensorDecimalDigits is 2, then actual value is 0.01.\n            This value will wrap around if the scaled sensor reading exceeds\n            4294967295. It is undefined for sensors which can have negative\n            readings.\n            This object does not apply to sensors without numerical reading.')
logCircuitSensorMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 8, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logCircuitSensorMaxValue.setStatus('current')
if mibBuilder.loadTexts: logCircuitSensorMaxValue.setDescription('The maximum sensor reading for the log period as an unsigned integer.\n            The value of this OID variable should be scaled by\n            inletSensorDecimalDigits.  For example, if the value is 1 and\n            inletSensorDecimalDigits is 2, then actual value is 0.01.\n            This value will wrap around if the scaled sensor reading exceeds\n            4294967295. It is undefined for sensors which can have negative\n            readings.\n            This object does not apply to sensors without numerical reading.')
logCircuitSensorMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 8, 3, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logCircuitSensorMinValue.setStatus('current')
if mibBuilder.loadTexts: logCircuitSensorMinValue.setDescription('The minimum sensor reading for the log period as an unsigned integer.\n            The value of this OID variable should be scaled by\n            inletSensorDecimalDigits.  For example, if the value is 1 and\n            inletSensorDecimalDigits is 2, then actual value is 0.01.\n            This value will wrap around if the scaled sensor reading exceeds\n            4294967295. It is undefined for sensors which can have negative\n            readings.\n            This object does not apply to sensors without numerical reading.')
logCircuitSensorSignedAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 8, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logCircuitSensorSignedAvgValue.setStatus('current')
if mibBuilder.loadTexts: logCircuitSensorSignedAvgValue.setDescription('The average sensor reading for the log period as a signed integer.\n            The value of this OID variable should be scaled by\n            inletSensorDecimalDigits.  For example, if the value is 1 and\n            inletSensorDecimalDigits is 2, then actual value is 0.01.\n            This value is undefined for sensors whose range exceeds the\n            Integer32 range (-2147483648 .. 2147483647).\n            This object does not apply to sensors without numerical reading.')
logCircuitSensorSignedMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 8, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logCircuitSensorSignedMaxValue.setStatus('current')
if mibBuilder.loadTexts: logCircuitSensorSignedMaxValue.setDescription('The maximum sensor reading for the log period as a signed integer.\n            The value of this OID variable should be scaled by\n            inletSensorDecimalDigits.  For example, if the value is 1 and\n            inletSensorDecimalDigits is 2, then actual value is 0.01.\n            This value is undefined for sensors whose range exceeds the\n            Integer32 range (-2147483648 .. 2147483647).\n            This object does not apply to sensors without numerical reading.')
logCircuitSensorSignedMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 8, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logCircuitSensorSignedMinValue.setStatus('current')
if mibBuilder.loadTexts: logCircuitSensorSignedMinValue.setDescription('The minimum sensor reading for the log period as a signed integer.\n            The value of this OID variable should be scaled by\n            inletSensorDecimalDigits.  For example, if the value is 1 and\n            inletSensorDecimalDigits is 2, then actual value is 0.01.\n            This value is undefined for sensors whose range exceeds the\n            Integer32 range (-2147483648 .. 2147483647).\n            This object does not apply to sensors without numerical reading.')
circuitPoleSensorLogTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 6, 8, 5), )
if mibBuilder.loadTexts: circuitPoleSensorLogTable.setStatus('current')
if mibBuilder.loadTexts: circuitPoleSensorLogTable.setDescription('A list of  circuit pole sensor entries in the log.')
circuitPoleSensorLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 6, 8, 5, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "circuitId"), (0, "PDU2-MIB", "circuitPoleId"), (0, "PDU2-MIB", "sensorType"), (0, "PDU2-MIB", "logIndex"))
if mibBuilder.loadTexts: circuitPoleSensorLogEntry.setStatus('current')
if mibBuilder.loadTexts: circuitPoleSensorLogEntry.setDescription('An entry containing log objects for a circuit pole sensor.')
logCircuitPoleSensorDataAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 8, 5, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logCircuitPoleSensorDataAvailable.setStatus('current')
if mibBuilder.loadTexts: logCircuitPoleSensorDataAvailable.setDescription('Is data available for this sensor during this measurement period?')
logCircuitPoleSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 8, 5, 1, 3), SensorStateEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logCircuitPoleSensorState.setStatus('current')
if mibBuilder.loadTexts: logCircuitPoleSensorState.setDescription('The most critical sensor state during this measurement period.')
logCircuitPoleSensorAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 8, 5, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logCircuitPoleSensorAvgValue.setStatus('current')
if mibBuilder.loadTexts: logCircuitPoleSensorAvgValue.setDescription('The average sensor reading for the log period as an unsigned integer.\n            The value of this OID variable should be scaled by\n            inletSensorDecimalDigits.  For example, if the value is 1 and\n            inletSensorDecimalDigits is 2, then actual value is 0.01.\n            This value will wrap around if the scaled sensor reading exceeds\n            4294967295. It is undefined for sensors which can have negative\n            readings.\n            This object does not apply to sensors without numerical reading.')
logCircuitPoleSensorMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 8, 5, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logCircuitPoleSensorMaxValue.setStatus('current')
if mibBuilder.loadTexts: logCircuitPoleSensorMaxValue.setDescription('The maximum sensor reading for the log period as an unsigned integer.\n            The value of this OID variable should be scaled by\n            inletSensorDecimalDigits.  For example, if the value is 1 and\n            inletSensorDecimalDigits is 2, then actual value is 0.01.\n            This value will wrap around if the scaled sensor reading exceeds\n            4294967295. It is undefined for sensors which can have negative\n            readings.\n            This object does not apply to sensors without numerical reading.')
logCircuitPoleSensorMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 8, 5, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logCircuitPoleSensorMinValue.setStatus('current')
if mibBuilder.loadTexts: logCircuitPoleSensorMinValue.setDescription('The minimum sensor reading for the log period as an unsigned integer.\n            The value of this OID variable should be scaled by\n            inletSensorDecimalDigits.  For example, if the value is 1 and\n            inletSensorDecimalDigits is 2, then actual value is 0.01.\n            This value will wrap around if the scaled sensor reading exceeds\n            4294967295. It is undefined for sensors which can have negative\n            readings.\n            This object does not apply to sensors without numerical reading.')
logCircuitPoleSensorSignedAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 8, 5, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logCircuitPoleSensorSignedAvgValue.setStatus('current')
if mibBuilder.loadTexts: logCircuitPoleSensorSignedAvgValue.setDescription('The average sensor reading for the log period as a signed integer.\n            The value of this OID variable should be scaled by\n            inletSensorDecimalDigits.  For example, if the value is 1 and\n            inletSensorDecimalDigits is 2, then actual value is 0.01.\n            This value is undefined for sensors whose range exceeds the\n            Integer32 range (-2147483648 .. 2147483647).\n            This object does not apply to sensors without numerical reading.')
logCircuitPoleSensorSignedMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 8, 5, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logCircuitPoleSensorSignedMaxValue.setStatus('current')
if mibBuilder.loadTexts: logCircuitPoleSensorSignedMaxValue.setDescription('The maximum sensor reading for the log period as a signed integer.\n            The value of this OID variable should be scaled by\n            inletSensorDecimalDigits.  For example, if the value is 1 and\n            inletSensorDecimalDigits is 2, then actual value is 0.01.\n            This value is undefined for sensors whose range exceeds the\n            Integer32 range (-2147483648 .. 2147483647).\n            This object does not apply to sensors without numerical reading.')
logCircuitPoleSensorSignedMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 8, 5, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logCircuitPoleSensorSignedMinValue.setStatus('current')
if mibBuilder.loadTexts: logCircuitPoleSensorSignedMinValue.setDescription('The minimum sensor reading for the log period as a signed integer.\n            The value of this OID variable should be scaled by\n            inletSensorDecimalDigits.  For example, if the value is 1 and\n            inletSensorDecimalDigits is 2, then actual value is 0.01.\n            This value is undefined for sensors whose range exceeds the\n            Integer32 range (-2147483648 .. 2147483647).\n            This object does not apply to sensors without numerical reading.')
unitSensorMeasurementsTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 5, 1, 3), )
if mibBuilder.loadTexts: unitSensorMeasurementsTable.setStatus('current')
if mibBuilder.loadTexts: unitSensorMeasurementsTable.setDescription('A list of unit sensor entries.')
unitSensorMeasurementsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 5, 1, 3, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "sensorType"))
if mibBuilder.loadTexts: unitSensorMeasurementsEntry.setStatus('current')
if mibBuilder.loadTexts: unitSensorMeasurementsEntry.setDescription('An entry containing measurement objects for an unit sensor.')
measurementsUnitSensorIsAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 1, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsUnitSensorIsAvailable.setStatus('current')
if mibBuilder.loadTexts: measurementsUnitSensorIsAvailable.setDescription('Is the sensor available?')
measurementsUnitSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 1, 3, 1, 3), SensorStateEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsUnitSensorState.setStatus('current')
if mibBuilder.loadTexts: measurementsUnitSensorState.setDescription('The sensor state.')
measurementsUnitSensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 1, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsUnitSensorValue.setStatus('current')
if mibBuilder.loadTexts: measurementsUnitSensorValue.setDescription('The sensor reading as an unsigned integer.\n            The value of this OID variable should be scaled by\n            unitSensorDecimalDigits.  For example, if the value is 1 and\n            unitSensorDecimalDigits is 2, then actual value is 0.01.\n            This value will wrap around if the scaled sensor reading exceeds\n            4294967295. It is undefined for sensors which can have negative\n            readings.\n            This parameter does not apply to sensors without numerical reading.')
measurementsUnitSensorTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 1, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsUnitSensorTimeStamp.setStatus('current')
if mibBuilder.loadTexts: measurementsUnitSensorTimeStamp.setDescription('The timestamp.')
measurementsUnitSensorSignedValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 1, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsUnitSensorSignedValue.setStatus('current')
if mibBuilder.loadTexts: measurementsUnitSensorSignedValue.setDescription('The sensor reading as a signed integer.\n            The value of this OID variable should be scaled by\n            unitSensorDecimalDigits.  For example, if the value is 1 and\n            unitSensorDecimalDigits is 2, then actual value is 0.01.\n            This value is undefined for sensors whose range exceeds the\n            Integer32 range (-2147483648 .. 2147483647).\n            This parameter does not apply to sensors without numerical reading.')
inletSensorMeasurementsTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 5, 2, 3), )
if mibBuilder.loadTexts: inletSensorMeasurementsTable.setStatus('current')
if mibBuilder.loadTexts: inletSensorMeasurementsTable.setDescription('A list of inlet sensor entries.')
inletSensorMeasurementsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 5, 2, 3, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "inletId"), (0, "PDU2-MIB", "sensorType"))
if mibBuilder.loadTexts: inletSensorMeasurementsEntry.setStatus('current')
if mibBuilder.loadTexts: inletSensorMeasurementsEntry.setDescription('An entry containing measurement objects for an inlet sensor.')
measurementsInletSensorIsAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 2, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsInletSensorIsAvailable.setStatus('current')
if mibBuilder.loadTexts: measurementsInletSensorIsAvailable.setDescription('Is the sensor available?')
measurementsInletSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 2, 3, 1, 3), SensorStateEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsInletSensorState.setStatus('current')
if mibBuilder.loadTexts: measurementsInletSensorState.setDescription('The sensor state.')
measurementsInletSensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 2, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsInletSensorValue.setStatus('current')
if mibBuilder.loadTexts: measurementsInletSensorValue.setDescription('The sensor reading as an unsigned integer.\n            The value of this OID variable should be scaled by\n            inletSensorDecimalDigits.  For example, if the value is 1 and\n            inletSensorDecimalDigits is 2, then actual value is 0.01.\n            This value will wrap around if the scaled sensor reading exceeds\n            4294967295. It is undefined for sensors which can have negative\n            readings.\n            This parameter does not apply to sensors without numerical reading.')
measurementsInletSensorTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 2, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsInletSensorTimeStamp.setStatus('current')
if mibBuilder.loadTexts: measurementsInletSensorTimeStamp.setDescription('The timestamp.')
measurementsInletSensorSignedValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 2, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsInletSensorSignedValue.setStatus('current')
if mibBuilder.loadTexts: measurementsInletSensorSignedValue.setDescription('The sensor reading as a signed integer.\n            The value of this OID variable should be scaled by\n            inletSensorDecimalDigits.  For example, if the value is 1 and\n            inletSensorDecimalDigits is 2, then actual value is 0.01.\n            This value is undefined for sensors whose range exceeds the\n            Integer32 range (-2147483648 .. 2147483647).\n            This parameter does not apply to sensors without numerical reading.')
inletPoleSensorMeasurementsTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 5, 2, 4), )
if mibBuilder.loadTexts: inletPoleSensorMeasurementsTable.setStatus('current')
if mibBuilder.loadTexts: inletPoleSensorMeasurementsTable.setDescription('A list of inlet pole sensor entries.')
inletPoleSensorMeasurementsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 5, 2, 4, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "inletId"), (0, "PDU2-MIB", "inletPoleIndex"), (0, "PDU2-MIB", "sensorType"))
if mibBuilder.loadTexts: inletPoleSensorMeasurementsEntry.setStatus('current')
if mibBuilder.loadTexts: inletPoleSensorMeasurementsEntry.setDescription('An entry containing measurement objects for an inlet pole sensor.')
measurementsInletPoleSensorIsAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 2, 4, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsInletPoleSensorIsAvailable.setStatus('current')
if mibBuilder.loadTexts: measurementsInletPoleSensorIsAvailable.setDescription('Is the sensor available?')
measurementsInletPoleSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 2, 4, 1, 3), SensorStateEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsInletPoleSensorState.setStatus('current')
if mibBuilder.loadTexts: measurementsInletPoleSensorState.setDescription('The sensor state.')
measurementsInletPoleSensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 2, 4, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsInletPoleSensorValue.setStatus('current')
if mibBuilder.loadTexts: measurementsInletPoleSensorValue.setDescription('The sensor reading as an unsigned integer.\n            The value of this OID variable should be scaled by\n            inletPoleSensorDecimalDigits.  For example, if the value is 1 and\n            inletPoleSensorDecimalDigits is 2, then actual value is 0.01.\n            This value will wrap around if the scaled sensor reading exceeds\n            4294967295. It is undefined for sensors which can have negative\n            readings.\n            This parameter does not apply to sensors without numerical reading.')
measurementsInletPoleSensorTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 2, 4, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsInletPoleSensorTimeStamp.setStatus('current')
if mibBuilder.loadTexts: measurementsInletPoleSensorTimeStamp.setDescription('The timestamp.')
measurementsInletPoleSensorSignedValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 2, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsInletPoleSensorSignedValue.setStatus('current')
if mibBuilder.loadTexts: measurementsInletPoleSensorSignedValue.setDescription('The sensor reading as a signed integer.\n            The value of this OID variable should be scaled by\n            inletPoleSensorDecimalDigits.  For example, if the value is 1 and\n            inletPoleSensorDecimalDigits is 2, then actual value is 0.01.\n            This value is undefined for sensors whose range exceeds the\n            Integer32 range (-2147483648 .. 2147483647).\n            This parameter does not apply to sensors without numerical reading.')
outletSensorMeasurementsTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 5, 4, 3), )
if mibBuilder.loadTexts: outletSensorMeasurementsTable.setStatus('current')
if mibBuilder.loadTexts: outletSensorMeasurementsTable.setDescription('A list of outlet sensor entries.')
outletSensorMeasurementsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 5, 4, 3, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "outletId"), (0, "PDU2-MIB", "sensorType"))
if mibBuilder.loadTexts: outletSensorMeasurementsEntry.setStatus('current')
if mibBuilder.loadTexts: outletSensorMeasurementsEntry.setDescription('An entry containing measurement objects for an outlet sensor.')
measurementsOutletSensorIsAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 4, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsOutletSensorIsAvailable.setStatus('current')
if mibBuilder.loadTexts: measurementsOutletSensorIsAvailable.setDescription('Is the sensor available?')
measurementsOutletSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 4, 3, 1, 3), SensorStateEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsOutletSensorState.setStatus('current')
if mibBuilder.loadTexts: measurementsOutletSensorState.setDescription('The sensor state.')
measurementsOutletSensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 4, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsOutletSensorValue.setStatus('current')
if mibBuilder.loadTexts: measurementsOutletSensorValue.setDescription('The sensor reading as an unsigned integer.\n            The value of this OID variable should be scaled by\n            outletSensorDecimalDigits.  For example, if the value is 1 and\n            outletSensorDecimalDigits is 2, then actual value is 0.01.\n            This value will wrap around if the scaled sensor reading exceeds\n            4294967295. It is undefined for sensors which can have negative\n            readings.\n            This parameter does not apply to sensors without numerical reading.')
measurementsOutletSensorTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 4, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsOutletSensorTimeStamp.setStatus('current')
if mibBuilder.loadTexts: measurementsOutletSensorTimeStamp.setDescription('The timestamp.')
measurementsOutletSensorSignedValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 4, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsOutletSensorSignedValue.setStatus('current')
if mibBuilder.loadTexts: measurementsOutletSensorSignedValue.setDescription('The sensor reading as a signed integer.\n            The value of this OID variable should be scaled by\n            outletSensorDecimalDigits.  For example, if the value is 1 and\n            outletSensorDecimalDigits is 2, then actual value is 0.01.\n            This value is undefined for sensors whose range exceeds the\n            Integer32 range (-2147483648 .. 2147483647).\n            This parameter does not apply to sensors without numerical reading.')
outletPoleSensorMeasurementsTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 5, 4, 4), )
if mibBuilder.loadTexts: outletPoleSensorMeasurementsTable.setStatus('current')
if mibBuilder.loadTexts: outletPoleSensorMeasurementsTable.setDescription('A list of outlet pole sensor entries.')
outletPoleSensorMeasurementsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 5, 4, 4, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "outletId"), (0, "PDU2-MIB", "outletPoleIndex"), (0, "PDU2-MIB", "sensorType"))
if mibBuilder.loadTexts: outletPoleSensorMeasurementsEntry.setStatus('current')
if mibBuilder.loadTexts: outletPoleSensorMeasurementsEntry.setDescription('An entry containing measurement objects for an outlet pole sensor.')
measurementsOutletPoleSensorIsAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 4, 4, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsOutletPoleSensorIsAvailable.setStatus('current')
if mibBuilder.loadTexts: measurementsOutletPoleSensorIsAvailable.setDescription('Is the sensor available?')
measurementsOutletPoleSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 4, 4, 1, 3), SensorStateEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsOutletPoleSensorState.setStatus('current')
if mibBuilder.loadTexts: measurementsOutletPoleSensorState.setDescription('The sensor state.')
measurementsOutletPoleSensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 4, 4, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsOutletPoleSensorValue.setStatus('current')
if mibBuilder.loadTexts: measurementsOutletPoleSensorValue.setDescription('The sensor reading as an unsigned integer.\n            The value of this OID variable should be scaled by\n            outletPoleSensorDecimalDigits.  For example, if the value is 1 and\n            outletPoleSensorDecimalDigits is 2, then actual value is 0.01.\n            This value will wrap around if the scaled sensor reading exceeds\n            4294967295. It is undefined for sensors which can have negative\n            readings.\n            This parameter does not apply to sensors without numerical reading.')
measurementsOutletPoleSensorTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 4, 4, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsOutletPoleSensorTimeStamp.setStatus('current')
if mibBuilder.loadTexts: measurementsOutletPoleSensorTimeStamp.setDescription('The timestamp.')
measurementsOutletPoleSensorSignedValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 4, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsOutletPoleSensorSignedValue.setStatus('current')
if mibBuilder.loadTexts: measurementsOutletPoleSensorSignedValue.setDescription('The sensor reading as a signed integer.\n            The value of this OID variable should be scaled by\n            outletPoleSensorDecimalDigits.  For example, if the value is 1 and\n            outletPoleSensorDecimalDigits is 2, then actual value is 0.01.\n            This value is undefined for sensors whose range exceeds the\n            Integer32 range (-2147483648 .. 2147483647).\n            This parameter does not apply to sensors without numerical reading.')
overCurrentProtectorSensorMeasurementsTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 5, 3, 3), )
if mibBuilder.loadTexts: overCurrentProtectorSensorMeasurementsTable.setStatus('current')
if mibBuilder.loadTexts: overCurrentProtectorSensorMeasurementsTable.setDescription('A list of overcurrent protector sensor entries.')
overCurrentProtectorSensorMeasurementsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 5, 3, 3, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "overCurrentProtectorIndex"), (0, "PDU2-MIB", "sensorType"))
if mibBuilder.loadTexts: overCurrentProtectorSensorMeasurementsEntry.setStatus('current')
if mibBuilder.loadTexts: overCurrentProtectorSensorMeasurementsEntry.setDescription('An entry containing measurement objects for an overcurrent protector sensor.')
measurementsOverCurrentProtectorSensorIsAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 3, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsOverCurrentProtectorSensorIsAvailable.setStatus('current')
if mibBuilder.loadTexts: measurementsOverCurrentProtectorSensorIsAvailable.setDescription('Is the sensor available?')
measurementsOverCurrentProtectorSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 3, 3, 1, 3), SensorStateEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsOverCurrentProtectorSensorState.setStatus('current')
if mibBuilder.loadTexts: measurementsOverCurrentProtectorSensorState.setDescription('The sensor state.')
measurementsOverCurrentProtectorSensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 3, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsOverCurrentProtectorSensorValue.setStatus('current')
if mibBuilder.loadTexts: measurementsOverCurrentProtectorSensorValue.setDescription('The sensor reading as an unsigned integer.\n            The value of this OID variable should be scaled by\n            overCurrentProtectorSensorDecimalDigits. For example, if the value is 1 and\n            overCurrentProtectorSensorDecimalDigits is 2, then actual value is 0.01.\n            This value will wrap around if the scaled sensor reading exceeds\n            4294967295. It is undefined for sensors which can have negative\n            readings.\n            This parameter does not apply to sensors without numerical reading.')
measurementsOverCurrentProtectorSensorTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 3, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsOverCurrentProtectorSensorTimeStamp.setStatus('current')
if mibBuilder.loadTexts: measurementsOverCurrentProtectorSensorTimeStamp.setDescription('The timestamp.')
measurementsOverCurrentProtectorSensorSignedValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 3, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsOverCurrentProtectorSensorSignedValue.setStatus('current')
if mibBuilder.loadTexts: measurementsOverCurrentProtectorSensorSignedValue.setDescription('The sensor reading as a signed integer.\n            The value of this OID variable should be scaled by\n            overCurrentProtectorSensorDecimalDigits. For example, if the value is 1 and\n            overCurrentProtectorSensorDecimalDigits is 2, then actual value is 0.01.\n            This value is undefined for sensors whose range exceeds the\n            Integer32 range (-2147483648 .. 2147483647).\n            This parameter does not apply to sensors without numerical reading.')
externalSensorMeasurementsTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 5, 5, 3), )
if mibBuilder.loadTexts: externalSensorMeasurementsTable.setStatus('current')
if mibBuilder.loadTexts: externalSensorMeasurementsTable.setDescription('A list of external sensor entries. The number of\n            entries is given by the value of externalSensorCount\n            for the PDU.')
externalSensorMeasurementsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 5, 5, 3, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "sensorID"))
if mibBuilder.loadTexts: externalSensorMeasurementsEntry.setStatus('current')
if mibBuilder.loadTexts: externalSensorMeasurementsEntry.setDescription('An entry containing measurement objects for an external sensor.')
measurementsExternalSensorIsAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 5, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsExternalSensorIsAvailable.setStatus('current')
if mibBuilder.loadTexts: measurementsExternalSensorIsAvailable.setDescription('Is the sensor available?')
measurementsExternalSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 5, 3, 1, 3), SensorStateEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsExternalSensorState.setStatus('current')
if mibBuilder.loadTexts: measurementsExternalSensorState.setDescription('The sensor state.')
measurementsExternalSensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 5, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsExternalSensorValue.setStatus('current')
if mibBuilder.loadTexts: measurementsExternalSensorValue.setDescription('The sensor reading as a signed integer.\n            The value of this OID variable should be scaled by\n            externalSensorDecimalDigits.  For example, if the value is 1 and\n            externalSensorDecimalDigits is 2, then actual value is 0.01.\n            This parameter does not apply to sensors without numerical reading.')
measurementsExternalSensorTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 5, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsExternalSensorTimeStamp.setStatus('current')
if mibBuilder.loadTexts: measurementsExternalSensorTimeStamp.setDescription('The sensor reading timestamp.')
wireSensorMeasurementsTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 5, 6, 3), )
if mibBuilder.loadTexts: wireSensorMeasurementsTable.setStatus('deprecated')
if mibBuilder.loadTexts: wireSensorMeasurementsTable.setDescription('A list of wire sensor entries.\n            Note: This feature is no longer used, the table is always empty.')
wireSensorMeasurementsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 5, 6, 3, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "wireId"), (0, "PDU2-MIB", "sensorType"))
if mibBuilder.loadTexts: wireSensorMeasurementsEntry.setStatus('deprecated')
if mibBuilder.loadTexts: wireSensorMeasurementsEntry.setDescription('An entry containing measurement objects for a wire.')
measurementsWireSensorIsAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 6, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsWireSensorIsAvailable.setStatus('deprecated')
if mibBuilder.loadTexts: measurementsWireSensorIsAvailable.setDescription('Is the sensor available?')
measurementsWireSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 6, 3, 1, 3), SensorStateEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsWireSensorState.setStatus('deprecated')
if mibBuilder.loadTexts: measurementsWireSensorState.setDescription('The sensor state.')
measurementsWireSensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 6, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsWireSensorValue.setStatus('deprecated')
if mibBuilder.loadTexts: measurementsWireSensorValue.setDescription('The sensor value.\n             The value of this OID variable should be scaled by\n             wireSensorDecimalDigits. For example, if the value is 1 and\n             wireSensorDecimalDigits is 2, then actual value is 0.01.\n             This value will wrap around if the value exceeds 4294967295\n             This parameter does not apply to sensors without numerical reading.')
measurementsWireSensorTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 6, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsWireSensorTimeStamp.setStatus('deprecated')
if mibBuilder.loadTexts: measurementsWireSensorTimeStamp.setDescription('The timestamp.')
transferSwitchSensorMeasurementsTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 5, 7, 3), )
if mibBuilder.loadTexts: transferSwitchSensorMeasurementsTable.setStatus('current')
if mibBuilder.loadTexts: transferSwitchSensorMeasurementsTable.setDescription('A list of transfer switch sensor entries.')
transferSwitchSensorMeasurementsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 5, 7, 3, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "transferSwitchId"), (0, "PDU2-MIB", "sensorType"))
if mibBuilder.loadTexts: transferSwitchSensorMeasurementsEntry.setStatus('current')
if mibBuilder.loadTexts: transferSwitchSensorMeasurementsEntry.setDescription('An entry containing measurement objects for a transfer switch sensor.')
measurementsTransferSwitchSensorIsAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 7, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsTransferSwitchSensorIsAvailable.setStatus('current')
if mibBuilder.loadTexts: measurementsTransferSwitchSensorIsAvailable.setDescription('Is the sensor available?')
measurementsTransferSwitchSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 7, 3, 1, 3), SensorStateEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsTransferSwitchSensorState.setStatus('current')
if mibBuilder.loadTexts: measurementsTransferSwitchSensorState.setDescription('The sensor state.')
measurementsTransferSwitchSensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 7, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsTransferSwitchSensorValue.setStatus('current')
if mibBuilder.loadTexts: measurementsTransferSwitchSensorValue.setDescription('The sensor reading as an unsigned integer.\n            The value of this OID variable should be scaled by\n            transferSwitchSensorDecimalDigits.  For example, if the value is 1 and\n            transferSwitchSensorDecimalDigits is 2, then actual value is 0.01.\n            This value will wrap around if the scaled sensor reading exceeds\n            4294967295. It is undefined for sensors which can have negative\n            readings.\n            This parameter does not apply to sensors without numerical reading.')
measurementsTransferSwitchSensorTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 7, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsTransferSwitchSensorTimeStamp.setStatus('current')
if mibBuilder.loadTexts: measurementsTransferSwitchSensorTimeStamp.setDescription('The timestamp.')
measurementsTransferSwitchSensorSignedValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 7, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsTransferSwitchSensorSignedValue.setStatus('current')
if mibBuilder.loadTexts: measurementsTransferSwitchSensorSignedValue.setDescription('The sensor reading as a signed integer.\n            The value of this OID variable should be scaled by\n            transferSwitchSensorDecimalDigits.  For example, if the value is 1 and\n            transferSwitchSensorDecimalDigits is 2, then actual value is 0.01.\n            This value is undefined for sensors whose range exceeds the\n            Integer32 range (-2147483648 .. 2147483647).\n            This parameter does not apply to sensors without numerical reading.')
circuitSensorMeasurementsTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 5, 8, 3), )
if mibBuilder.loadTexts: circuitSensorMeasurementsTable.setStatus('current')
if mibBuilder.loadTexts: circuitSensorMeasurementsTable.setDescription('A list of circuit sensor entries.')
circuitSensorMeasurementsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 5, 8, 3, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "circuitId"), (0, "PDU2-MIB", "sensorType"))
if mibBuilder.loadTexts: circuitSensorMeasurementsEntry.setStatus('current')
if mibBuilder.loadTexts: circuitSensorMeasurementsEntry.setDescription('An entry containing measurement objects for a circuit sensor.')
measurementsCircuitSensorIsAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 8, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsCircuitSensorIsAvailable.setStatus('current')
if mibBuilder.loadTexts: measurementsCircuitSensorIsAvailable.setDescription('Is the sensor available?')
measurementsCircuitSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 8, 3, 1, 3), SensorStateEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsCircuitSensorState.setStatus('current')
if mibBuilder.loadTexts: measurementsCircuitSensorState.setDescription('The sensor state.')
measurementsCircuitSensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 8, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsCircuitSensorValue.setStatus('current')
if mibBuilder.loadTexts: measurementsCircuitSensorValue.setDescription('The sensor reading as an unsigned integer.\n            The value of this OID variable should be scaled by\n            inletSensorDecimalDigits.  For example, if the value is 1 and\n            inletSensorDecimalDigits is 2, then actual value is 0.01.\n            This value will wrap around if the scaled sensor reading exceeds\n            4294967295. It is undefined for sensors which can have negative\n            readings.\n            This parameter does not apply to sensors without numerical reading.')
measurementsCircuitSensorTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 8, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsCircuitSensorTimeStamp.setStatus('current')
if mibBuilder.loadTexts: measurementsCircuitSensorTimeStamp.setDescription('The timestamp.')
measurementsCircuitSensorSignedValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 8, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsCircuitSensorSignedValue.setStatus('current')
if mibBuilder.loadTexts: measurementsCircuitSensorSignedValue.setDescription('The sensor reading as a signed integer.\n            The value of this OID variable should be scaled by\n            inletSensorDecimalDigits.  For example, if the value is 1 and\n            inletSensorDecimalDigits is 2, then actual value is 0.01.\n            This value is undefined for sensors whose range exceeds the\n            Integer32 range (-2147483648 .. 2147483647).\n            This parameter does not apply to sensors without numerical reading.')
circuitPoleSensorMeasurementsTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 5, 8, 4), )
if mibBuilder.loadTexts: circuitPoleSensorMeasurementsTable.setStatus('current')
if mibBuilder.loadTexts: circuitPoleSensorMeasurementsTable.setDescription('A list of panel circuit pole sensor entries.')
circuitPoleSensorMeasurementsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 5, 8, 4, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "circuitId"), (0, "PDU2-MIB", "circuitPoleId"), (0, "PDU2-MIB", "sensorType"))
if mibBuilder.loadTexts: circuitPoleSensorMeasurementsEntry.setStatus('current')
if mibBuilder.loadTexts: circuitPoleSensorMeasurementsEntry.setDescription('An entry containing measurement objects for a circuit pole sensor.')
measurementsCircuitPoleSensorIsAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 8, 4, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsCircuitPoleSensorIsAvailable.setStatus('current')
if mibBuilder.loadTexts: measurementsCircuitPoleSensorIsAvailable.setDescription('Is the sensor available?')
measurementsCircuitPoleSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 8, 4, 1, 3), SensorStateEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsCircuitPoleSensorState.setStatus('current')
if mibBuilder.loadTexts: measurementsCircuitPoleSensorState.setDescription('The sensor state.')
measurementsCircuitPoleSensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 8, 4, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsCircuitPoleSensorValue.setStatus('current')
if mibBuilder.loadTexts: measurementsCircuitPoleSensorValue.setDescription('The sensor reading as an unsigned integer.\n            The value of this OID variable should be scaled by\n            inletSensorDecimalDigits.  For example, if the value is 1 and\n            inletSensorDecimalDigits is 2, then actual value is 0.01.\n            This value will wrap around if the scaled sensor reading exceeds\n            4294967295. It is undefined for sensors which can have negative\n            readings.\n            This parameter does not apply to sensors without numerical reading.')
measurementsCircuitPoleSensorTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 8, 4, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsCircuitPoleSensorTimeStamp.setStatus('current')
if mibBuilder.loadTexts: measurementsCircuitPoleSensorTimeStamp.setDescription('The timestamp.')
measurementsCircuitPoleSensorSignedValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 8, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsCircuitPoleSensorSignedValue.setStatus('current')
if mibBuilder.loadTexts: measurementsCircuitPoleSensorSignedValue.setDescription('The sensor reading as a signed integer.\n            The value of this OID variable should be scaled by\n            inletSensorDecimalDigits.  For example, if the value is 1 and\n            inletSensorDecimalDigits is 2, then actual value is 0.01.\n            This value is undefined for sensors whose range exceeds the\n            Integer32 range (-2147483648 .. 2147483647).\n            This parameter does not apply to sensors without numerical reading.')
outletSwitchControlTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 4, 1, 2), )
if mibBuilder.loadTexts: outletSwitchControlTable.setStatus('current')
if mibBuilder.loadTexts: outletSwitchControlTable.setDescription('A list of outlets for a PDU. The number of\n            entries is given by the value of outletCount.')
outletSwitchControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 4, 1, 2, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "outletId"))
if mibBuilder.loadTexts: outletSwitchControlEntry.setStatus('current')
if mibBuilder.loadTexts: outletSwitchControlEntry.setDescription('An entry for implementing switching operations on an outlet.')
switchingOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 4, 1, 2, 1, 2), OutletSwitchingOperationsEnumeration()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: switchingOperation.setStatus('current')
if mibBuilder.loadTexts: switchingOperation.setDescription('The switching operation: switch on, switch off or power-cycle.')
outletSwitchingState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 4, 1, 2, 1, 3), SensorStateEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletSwitchingState.setStatus('current')
if mibBuilder.loadTexts: outletSwitchingState.setDescription('The outlet state at present')
outletSwitchingTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 4, 1, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletSwitchingTimeStamp.setStatus('current')
if mibBuilder.loadTexts: outletSwitchingTimeStamp.setDescription('The  timestamp indicating when the outlet was last switched')
transferSwitchControlTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 4, 3, 1), )
if mibBuilder.loadTexts: transferSwitchControlTable.setStatus('current')
if mibBuilder.loadTexts: transferSwitchControlTable.setDescription('A list of transfer switches for a PDU. The number of\n            entries is given by the value of transferSwitchCount.')
transferSwitchControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 4, 3, 1, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "transferSwitchId"))
if mibBuilder.loadTexts: transferSwitchControlEntry.setStatus('current')
if mibBuilder.loadTexts: transferSwitchControlEntry.setDescription('An entry for implementing switching operations on a transfer switch.')
transferSwitchActiveInlet = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 4, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: transferSwitchActiveInlet.setStatus('current')
if mibBuilder.loadTexts: transferSwitchActiveInlet.setDescription('The index of the currently active inlet.')
transferSwitchTransferToInlet = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 4, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: transferSwitchTransferToInlet.setStatus('current')
if mibBuilder.loadTexts: transferSwitchTransferToInlet.setDescription('Select the active inlet. If the new inlet is available, it will become\n            both active and preferred, otherwise an inconsistentValue error will\n            be returned.\n            By default the switching operation will fail if the phase difference\n            between the inlets is too large. In this case the switch can be forced\n            by writing transferSwitchAlarmOverride as True in the same request.\n            This variable will always read as 0.')
transferSwitchAlarmOverride = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 4, 3, 1, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: transferSwitchAlarmOverride.setStatus('current')
if mibBuilder.loadTexts: transferSwitchAlarmOverride.setDescription('Force transfer even if the phase difference between the inlets is too\n            large.\n            This may only be written together with transferSwitchTransferToInlet,\n            otherwise an inconsistentValue error will be returned. Always reads as\n            false.')
transferSwitchLastTransferReason = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 4, 3, 1, 1, 4), TransferSwitchTransferReasonEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transferSwitchLastTransferReason.setStatus('current')
if mibBuilder.loadTexts: transferSwitchLastTransferReason.setDescription('The reason for the most recent transfer')
actuatorControlTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 4, 4, 2), )
if mibBuilder.loadTexts: actuatorControlTable.setStatus('current')
if mibBuilder.loadTexts: actuatorControlTable.setDescription('A list of actuators for a PDU. ')
actuatorControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 4, 4, 2, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "sensorID"))
if mibBuilder.loadTexts: actuatorControlEntry.setStatus('current')
if mibBuilder.loadTexts: actuatorControlEntry.setDescription('An entry for implementing user-initiated state changes for an actuator.')
actuatorState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 4, 4, 2, 1, 2), SensorStateEnumeration()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: actuatorState.setStatus('current')
if mibBuilder.loadTexts: actuatorState.setDescription('The actuator state.\n            A get operation retrieves the state of the actuator.\n            A set operation changes the state of the sensor.\n            The valid states for set operations are on(7) and off(8).\n            Attempting to set the state to any other value will generate an error.')
rcmSelfTestTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 4, 5, 2), )
if mibBuilder.loadTexts: rcmSelfTestTable.setStatus('current')
if mibBuilder.loadTexts: rcmSelfTestTable.setDescription('A list of RCMs.')
rcmSelfTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 4, 5, 2, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "inletId"))
if mibBuilder.loadTexts: rcmSelfTestEntry.setStatus('current')
if mibBuilder.loadTexts: rcmSelfTestEntry.setDescription('An entry for initiating the self test of an RCM.')
rcmState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 4, 5, 2, 1, 2), SensorStateEnumeration()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcmState.setStatus('current')
if mibBuilder.loadTexts: rcmState.setDescription('The rcm state.\n            A Get operation retrieves the state of the RCM State Sensor.\n            A Set operation changes the state of the sensor.\n            The only valid state for set operations is selfTest(29).\n            When rcmState is set to selfTest, self test of the RCM starts.\n            Attempting to set the state to any other value will generate an error.\n            If the current state is selfTest, then an attempt to set the value to selfTest\n            will be ignored.')
inletSensorControlTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 4, 6, 1), )
if mibBuilder.loadTexts: inletSensorControlTable.setStatus('current')
if mibBuilder.loadTexts: inletSensorControlTable.setDescription('A list of control entries for the inlet sensors of a PDU. The set\n            of valid indices is defined by the value of inletCount and the\n            inletDeviceCapabilities entry for the selected inlet.')
inletSensorControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 4, 6, 1, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "inletId"), (0, "PDU2-MIB", "sensorType"))
if mibBuilder.loadTexts: inletSensorControlEntry.setStatus('current')
if mibBuilder.loadTexts: inletSensorControlEntry.setDescription('An entry used for controlling an inlet sensor.')
inletSensorResetValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 4, 6, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletSensorResetValue.setStatus('current')
if mibBuilder.loadTexts: inletSensorResetValue.setDescription('Writing to this variable sets a new value for the addressed sensor. Only\n            accumulating sensors (e.g. energy counters) can be reset, and currently\n            the only supported value is 0. Writing any other value returns an error.\n            This variable will always read as 0.')
outletSensorControlTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 4, 7, 1), )
if mibBuilder.loadTexts: outletSensorControlTable.setStatus('current')
if mibBuilder.loadTexts: outletSensorControlTable.setDescription('A list of control entries for the outlet sensors of a PDU. The set\n            of valid indices is defined by the value of outletCount and the\n            outletDeviceCapabilities entry for the selected outlet.')
outletSensorControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 4, 7, 1, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "outletId"), (0, "PDU2-MIB", "sensorType"))
if mibBuilder.loadTexts: outletSensorControlEntry.setStatus('current')
if mibBuilder.loadTexts: outletSensorControlEntry.setDescription('An entry used for controlling an outlet sensor.')
outletSensorResetValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 4, 7, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletSensorResetValue.setStatus('current')
if mibBuilder.loadTexts: outletSensorResetValue.setDescription('Writing to this variable sets a new value for the addressed sensor. Only\n            accumulating sensors (e.g. energy counters) can be reset, and currently\n            the only supported value is 0. Writing any other value returns an error.\n            This variable will always read as 0.')
unitSensorControlTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 4, 8, 1), )
if mibBuilder.loadTexts: unitSensorControlTable.setStatus('current')
if mibBuilder.loadTexts: unitSensorControlTable.setDescription('A list of control entries for the global sensors of a PDU. The set\n            of valid indices is defined by the value of pduCount and the\n            pduDeviceCapabilities entry.')
unitSensorControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 4, 8, 1, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "sensorType"))
if mibBuilder.loadTexts: unitSensorControlEntry.setStatus('current')
if mibBuilder.loadTexts: unitSensorControlEntry.setDescription('An entry used for controlling an global sensor.')
unitSensorResetValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 4, 8, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitSensorResetValue.setStatus('current')
if mibBuilder.loadTexts: unitSensorResetValue.setDescription('Writing to this variable sets a new value for the addressed sensor. Only\n            accumulating sensors (e.g. energy counters) can be reset, and currently\n            the only supported value is 0. Writing any other value returns an error.\n            This variable will always read as 0.\n            This object applies only to multi-inlet PDUs.')
circuitSensorControlTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 4, 9, 1), )
if mibBuilder.loadTexts: circuitSensorControlTable.setStatus('current')
if mibBuilder.loadTexts: circuitSensorControlTable.setDescription('A list of control entries for the circuit sensors of a BCM2. The maximum\n            number of entries is given by the value of panelCircuitPositionCount.')
circuitSensorControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 4, 9, 1, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "circuitId"), (0, "PDU2-MIB", "sensorType"))
if mibBuilder.loadTexts: circuitSensorControlEntry.setStatus('current')
if mibBuilder.loadTexts: circuitSensorControlEntry.setDescription('An entry used for controlling an circuit sensor.')
circuitSensorResetValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 4, 9, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitSensorResetValue.setStatus('current')
if mibBuilder.loadTexts: circuitSensorResetValue.setDescription('Writing to this variable sets a new value for the addressed sensor. Only\n            accumulating sensors (e.g. energy counters) can be reset, and currently\n            the only supported value is 0. Writing any other value returns an error.\n            This variable will always read as 0.')
reliabilityDataTableSequenceNumber = MibScalar((1, 3, 6, 1, 4, 1, 13742, 6, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: reliabilityDataTableSequenceNumber.setStatus('current')
if mibBuilder.loadTexts: reliabilityDataTableSequenceNumber.setDescription('The sequence number for updates to the reliability data table')
reliabilityDataTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 10, 1, 2), )
if mibBuilder.loadTexts: reliabilityDataTable.setStatus('current')
if mibBuilder.loadTexts: reliabilityDataTable.setDescription('A list of PDU reliability data entries.')
reliabilityDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 10, 1, 2, 1), ).setIndexNames((0, "PDU2-MIB", "reliabilityIndex"))
if mibBuilder.loadTexts: reliabilityDataEntry.setStatus('current')
if mibBuilder.loadTexts: reliabilityDataEntry.setDescription('An entry containing reliability data for a particular PDU.')
reliabilityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 10, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096)))
if mibBuilder.loadTexts: reliabilityIndex.setStatus('current')
if mibBuilder.loadTexts: reliabilityIndex.setDescription('Index of the entry in the reliability data table.')
reliabilityId = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 10, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reliabilityId.setStatus('current')
if mibBuilder.loadTexts: reliabilityId.setDescription('Unique ID of the entry.\n            POH\n                Power on hours.\n\n            CB.<label>.TRIPCNT\n               Trip count of circuit breaker with label <label>.\n\n            CTRL.<serial>.<addr>.MASTER.CSUMERRLASTHOUR\n               Number of checksum errors in slave (controller board) to master (CPU\n               board) communication in the last hour on controller with serial\n               number <serial> and bus address <addr>.\n\n            CTRL.<serial>.<addr>.SLAVE.CSUMERRLASTHOUR\n              Number of checksum errors in master (CPU board) to slave (controller\n              board) communication in the last hour on controller with serial\n              number <serial> and bus address <addr>.\n\n            CTRL.<serial>.<addr>.TOUTLASTHOUR\n              Number of communication timeouts to controller with serial\n              number <serial> and bus address <addr> in the last hour.\n\n            CTRL.<serial>.<addr>.RLY.<num>.CYCLECNT\n              Number of cycles the relay <num> on the controller board with serial\n              number <serial> and bus address <addr> has made. A cycle is an\n              off->on followed by an on->off event later. The count is increased on\n              the off->on transition.\n\n            CTRL.<serial>.<addr>.RLY.<num>.FAILLASTHOUR\n              Number of failed switching operations on relay <num> on the controller\n              board with serial number <serial> and bus address <addr> in the last\n              hour. It depends on the specific controller board hardware  and what\n              error conditions are detected.')
reliabilityDataValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 10, 1, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reliabilityDataValue.setStatus('current')
if mibBuilder.loadTexts: reliabilityDataValue.setDescription('The normalized value')
reliabilityDataMaxPossible = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 10, 1, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reliabilityDataMaxPossible.setStatus('current')
if mibBuilder.loadTexts: reliabilityDataMaxPossible.setDescription('The maximum possible normalized value')
reliabilityDataWorstValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 10, 1, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reliabilityDataWorstValue.setStatus('current')
if mibBuilder.loadTexts: reliabilityDataWorstValue.setDescription('The worst normalized value seen so far')
reliabilityDataThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 10, 1, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reliabilityDataThreshold.setStatus('current')
if mibBuilder.loadTexts: reliabilityDataThreshold.setDescription('The normalized Threshold value ')
reliabilityDataRawUpperBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 10, 1, 2, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reliabilityDataRawUpperBytes.setStatus('current')
if mibBuilder.loadTexts: reliabilityDataRawUpperBytes.setDescription('The upper 4 bytes of the raw (not normalized) data.\n            reliabilityDataRawUpperBytes and reliabilityDataRawLowerBytes\n            should be combined and interpreted as a signed 64-bit value')
reliabilityDataRawLowerBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 10, 1, 2, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reliabilityDataRawLowerBytes.setStatus('current')
if mibBuilder.loadTexts: reliabilityDataRawLowerBytes.setDescription('The lower 4 bytes of the raw (not normalized) data.\n            reliabilityDataRawUpperBytes and reliabilityDataRawLowerBytes\n            should be combined and interpreted as a signed 64-bit value')
reliabilityDataFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 10, 1, 2, 1, 9), Bits().clone(namedValues=NamedValues(("invalidFlag", 0), ("oldValue", 1), ("criticalEntry", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: reliabilityDataFlags.setStatus('current')
if mibBuilder.loadTexts: reliabilityDataFlags.setDescription('Flags')
reliabilityErrorLogTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 10, 2, 2), )
if mibBuilder.loadTexts: reliabilityErrorLogTable.setStatus('current')
if mibBuilder.loadTexts: reliabilityErrorLogTable.setDescription('A list of PDU reliability error log entries.')
reliabilityErrorLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 10, 2, 2, 1), ).setIndexNames((0, "PDU2-MIB", "reliabilityErrorLogIndex"))
if mibBuilder.loadTexts: reliabilityErrorLogEntry.setStatus('current')
if mibBuilder.loadTexts: reliabilityErrorLogEntry.setDescription('An entry containing reliability error log data for a particular PDU.')
reliabilityErrorLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 10, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: reliabilityErrorLogIndex.setStatus('current')
if mibBuilder.loadTexts: reliabilityErrorLogIndex.setDescription('Index of the entry in the reliability error log table.')
reliabilityErrorLogId = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 10, 2, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reliabilityErrorLogId.setStatus('current')
if mibBuilder.loadTexts: reliabilityErrorLogId.setDescription('Unique ID of the entry.\n            POH\n                Power on hours.\n\n            CB.<label>.TRIPCNT\n               Trip count of circuit breaker with label <label>.\n\n            CTRL.<serial>.<addr>.MASTER.CSUMERRLASTHOUR\n               Number of checksum errors in slave (controller board) to master (CPU\n               board) communication in the last hour on controller with serial\n               number <serial> and bus address <addr>.\n\n            CTRL.<serial>.<addr>.SLAVE.CSUMERRLASTHOUR\n              Number of checksum errors in master (CPU board) to slave (controller\n              board) communication in the last hour on controller with serial\n              number <serial> and bus address <addr>.\n\n            CTRL.<serial>.<addr>.TOUTLASTHOUR\n              Number of communication timeouts to controller with serial\n              number <serial> and bus address <addr> in the last hour.\n\n            CTRL.<serial>.<addr>.RLY.<num>.CYCLECNT\n              Number of cycles the relay <num> on the controller board with serial\n              number <serial> and bus address <addr> has made. A cycle is an\n              off->on followed by an on->off event later. The count is increased on\n              the off->on transition.\n\n            CTRL.<serial>.<addr>.RLY.<num>.FAILLASTHOUR\n              Number of failed switching operations on relay <num> on the controller\n              board with serial number <serial> and bus address <addr> in the last\n              hour. It depends on the specific controller board hardware  and what\n              error conditions are detected.')
reliabilityErrorLogValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 10, 2, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reliabilityErrorLogValue.setStatus('current')
if mibBuilder.loadTexts: reliabilityErrorLogValue.setDescription('The normalized value')
reliabilityErrorLogThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 10, 2, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reliabilityErrorLogThreshold.setStatus('current')
if mibBuilder.loadTexts: reliabilityErrorLogThreshold.setDescription('The normalized threshold value')
reliabilityErrorLogRawUpperBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 10, 2, 2, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reliabilityErrorLogRawUpperBytes.setStatus('current')
if mibBuilder.loadTexts: reliabilityErrorLogRawUpperBytes.setDescription('The upper 4 bytes of the raw (not normalized) data.\n            reliabilityErrorLogRawUpperBytes and reliabilityErrorLogRawLowerBytes\n            should be combined and interpreted as a signed 64-bit value')
reliabilityErrorLogRawLowerBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 10, 2, 2, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reliabilityErrorLogRawLowerBytes.setStatus('current')
if mibBuilder.loadTexts: reliabilityErrorLogRawLowerBytes.setDescription('The lower 4 bytes of the raw (not normalized) data.\n            reliabilityErrorLogRawUpperBytes and reliabilityErrorLogRawLowerBytes\n            should be combined and interpreted as a signed 64-bit value')
reliabilityErrorLogPOH = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 10, 2, 2, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reliabilityErrorLogPOH.setStatus('current')
if mibBuilder.loadTexts: reliabilityErrorLogPOH.setDescription('The time of occurrence of the event measured from the last\n            time the PDU was powered on')
reliabilityErrorLogTime = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 10, 2, 2, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reliabilityErrorLogTime.setStatus('current')
if mibBuilder.loadTexts: reliabilityErrorLogTime.setDescription('The UTC time of occurrence of the event')
systemStarted = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 1)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: systemStarted.setStatus('current')
if mibBuilder.loadTexts: systemStarted.setDescription('The system has started.')
systemReset = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 2)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: systemReset.setStatus('current')
if mibBuilder.loadTexts: systemReset.setDescription('The system was rebooted.')
userLogin = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 3)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "pxIPAddress"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: userLogin.setStatus('current')
if mibBuilder.loadTexts: userLogin.setDescription('A user logged in.')
userLogout = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 4)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "pxIPAddress"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: userLogout.setStatus('current')
if mibBuilder.loadTexts: userLogout.setDescription('A user logged out.')
userAuthenticationFailure = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 5)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "pxIPAddress"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: userAuthenticationFailure.setStatus('current')
if mibBuilder.loadTexts: userAuthenticationFailure.setDescription('A user authentication attempt failed.')
userSessionTimeout = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 8)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "pxIPAddress"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: userSessionTimeout.setStatus('current')
if mibBuilder.loadTexts: userSessionTimeout.setDescription('A user session timed out.')
userAdded = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 11)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "targetUser"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: userAdded.setStatus('current')
if mibBuilder.loadTexts: userAdded.setDescription('A user account was added to the system.')
userModified = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 12)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "targetUser"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: userModified.setStatus('current')
if mibBuilder.loadTexts: userModified.setDescription('A user account was modified.')
userDeleted = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 13)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "targetUser"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: userDeleted.setStatus('current')
if mibBuilder.loadTexts: userDeleted.setDescription('A user account was deleted from the system.')
roleAdded = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 14)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "roleName"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: roleAdded.setStatus('current')
if mibBuilder.loadTexts: roleAdded.setDescription('A role was added to the system.')
roleModified = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 15)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "roleName"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: roleModified.setStatus('current')
if mibBuilder.loadTexts: roleModified.setDescription('A role was modified.')
roleDeleted = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 16)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "roleName"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: roleDeleted.setStatus('current')
if mibBuilder.loadTexts: roleDeleted.setDescription('A role was deleted from the system.')
deviceUpdateStarted = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 20)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "pxIPAddress"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "imageVersion"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: deviceUpdateStarted.setStatus('current')
if mibBuilder.loadTexts: deviceUpdateStarted.setDescription('The device firmware update has started.')
deviceUpdateCompleted = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 21)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "pxIPAddress"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "imageVersion"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: deviceUpdateCompleted.setStatus('current')
if mibBuilder.loadTexts: deviceUpdateCompleted.setDescription('The device firmware update has completed.')
userBlocked = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 22)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "pxIPAddress"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: userBlocked.setStatus('current')
if mibBuilder.loadTexts: userBlocked.setDescription('A blocked user tried to log in.')
powerControl = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 23)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "pxIPAddress"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "outletLabel"), ("PDU2-MIB", "measurementsOutletSensorState"), ("PDU2-MIB", "switchingOperation"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: powerControl.setStatus('current')
if mibBuilder.loadTexts: powerControl.setDescription('An outlet switching operation has been performed.\n            Note that measurementsOutletSensorState represents the state of the outlet at the time the trap was sent.\n            This may be different from the final state of the outlet. For instance,\n            if the outlet is cycled and the outlet cycle delay is 20 seconds, this variable will\n            indicate OFF although the final state of the outlet will be ON. The final state of the\n            outlet will be indicated in the outletSensorStateChange trap for the outlet onOff sensor.')
userPasswordChanged = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 24)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "targetUser"), ("PDU2-MIB", "pxIPAddress"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: userPasswordChanged.setStatus('current')
if mibBuilder.loadTexts: userPasswordChanged.setDescription('User password was changed.')
passwordSettingsChanged = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 28)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: passwordSettingsChanged.setStatus('current')
if mibBuilder.loadTexts: passwordSettingsChanged.setDescription('Strong password settings changed.')
firmwareValidationFailed = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 38)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: firmwareValidationFailed.setStatus('current')
if mibBuilder.loadTexts: firmwareValidationFailed.setDescription('Validation of an uploaded firmware image failed.')
logFileCleared = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 41)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: logFileCleared.setStatus('current')
if mibBuilder.loadTexts: logFileCleared.setDescription('The event log has been cleared.')
bulkConfigurationSaved = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 53)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "pxIPAddress"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: bulkConfigurationSaved.setStatus('current')
if mibBuilder.loadTexts: bulkConfigurationSaved.setDescription('A bulk configuration file was downloaded from the device.')
bulkConfigurationCopied = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 54)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "pxIPAddress"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: bulkConfigurationCopied.setStatus('current')
if mibBuilder.loadTexts: bulkConfigurationCopied.setDescription('A bulk configuration file was copied to the device.')
pduSensorStateChange = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 60)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "pduNumber"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "typeOfSensor"), ("PDU2-MIB", "measurementsUnitSensorTimeStamp"), ("PDU2-MIB", "measurementsUnitSensorValue"), ("PDU2-MIB", "measurementsUnitSensorState"), ("PDU2-MIB", "measurementsUnitSensorSignedValue"), ("PDU2-MIB", "oldSensorState"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: pduSensorStateChange.setStatus('deprecated')
if mibBuilder.loadTexts: pduSensorStateChange.setDescription('Unit-level sensor state change.\n            Which value field to use depends on the metadata of the sensor.\n            measurementsUnitSensorValue is undefined for sensors which can\n            have negative readings, measurementsUnitSensorSignedValue is\n            undefined for sensors whose range exceeds the Integer32 range.\n            Both fields do not apply to sensors without numerical readings.')
inletSensorStateChange = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 61)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "pduNumber"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "inletLabel"), ("PDU2-MIB", "typeOfSensor"), ("PDU2-MIB", "measurementsInletSensorTimeStamp"), ("PDU2-MIB", "measurementsInletSensorValue"), ("PDU2-MIB", "measurementsInletSensorState"), ("PDU2-MIB", "measurementsInletSensorSignedValue"), ("PDU2-MIB", "oldSensorState"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: inletSensorStateChange.setStatus('current')
if mibBuilder.loadTexts: inletSensorStateChange.setDescription('Inlet sensor state change.\n            Which value field to use depends on the metadata of the sensor.\n            measurementsInletSensorValue is undefined for sensors which can\n            have negative readings, measurementsInletSensorSignedValue is\n            undefined for sensors whose range exceeds the Integer32 range.\n            Both fields do not apply to sensors without numerical readings.\n\n            For an rcmState sensor transitioning to the fail state, the value is the residual current\n            just before the sensor transitioned to the fail state i.e.\n            if typeOfSensor = rcmState and measurementsInletSensorState = fail,\n            then measurementsInletSensorValue = the residual current just before the sensor transitioned to the fail state')
inletPoleSensorStateChange = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 62)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "pduNumber"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "inletLabel"), ("PDU2-MIB", "inletPoleNumber"), ("PDU2-MIB", "typeOfSensor"), ("PDU2-MIB", "measurementsInletPoleSensorTimeStamp"), ("PDU2-MIB", "measurementsInletPoleSensorValue"), ("PDU2-MIB", "measurementsInletPoleSensorState"), ("PDU2-MIB", "measurementsInletPoleSensorSignedValue"), ("PDU2-MIB", "oldSensorState"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: inletPoleSensorStateChange.setStatus('current')
if mibBuilder.loadTexts: inletPoleSensorStateChange.setDescription('Inlet pole sensor state change.\n            Which value field to use depends on the metadata of the sensor.\n            measurementsInletPoleSensorValue is undefined for sensors which can\n            have negative readings, measurementsInletPoleSensorSignedValue is\n            undefined for sensors whose range exceeds the Integer32 range.\n            Both fields do not apply to sensors without numerical readings.')
outletSensorStateChange = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 63)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "pduNumber"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "outletLabel"), ("PDU2-MIB", "typeOfSensor"), ("PDU2-MIB", "measurementsOutletSensorTimeStamp"), ("PDU2-MIB", "measurementsOutletSensorValue"), ("PDU2-MIB", "measurementsOutletSensorState"), ("PDU2-MIB", "measurementsOutletSensorSignedValue"), ("PDU2-MIB", "oldSensorState"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: outletSensorStateChange.setStatus('current')
if mibBuilder.loadTexts: outletSensorStateChange.setDescription('Outlet sensor state change.\n            Which value field to use depends on the metadata of the sensor.\n            measurementsOutletSensorValue is undefined for sensors which can\n            have negative readings, measurementsOutletSensorSignedValue is\n            undefined for sensors whose range exceeds the Integer32 range.\n            Both fields do not apply to sensors without numerical readings.')
outletPoleSensorStateChange = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 64)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "pduNumber"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "outletLabel"), ("PDU2-MIB", "outletPoleNumber"), ("PDU2-MIB", "typeOfSensor"), ("PDU2-MIB", "measurementsOutletPoleSensorTimeStamp"), ("PDU2-MIB", "measurementsOutletPoleSensorValue"), ("PDU2-MIB", "measurementsOutletPoleSensorState"), ("PDU2-MIB", "measurementsOutletPoleSensorSignedValue"), ("PDU2-MIB", "oldSensorState"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: outletPoleSensorStateChange.setStatus('current')
if mibBuilder.loadTexts: outletPoleSensorStateChange.setDescription('Outlet pole sensor state change.\n            Which value field to use depends on the metadata of the sensor.\n            measurementsOutletPoleSensorValue is undefined for sensors which can\n            have negative readings, measurementsOutletPoleSensorSignedValue is\n            undefined for sensors whose range exceeds the Integer32 range.\n            Both fields do not apply to sensors without numerical readings.')
overCurrentProtectorSensorStateChange = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 65)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "pduNumber"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "overCurrentProtectorLabel"), ("PDU2-MIB", "typeOfSensor"), ("PDU2-MIB", "measurementsOverCurrentProtectorSensorTimeStamp"), ("PDU2-MIB", "measurementsOverCurrentProtectorSensorValue"), ("PDU2-MIB", "measurementsOverCurrentProtectorSensorState"), ("PDU2-MIB", "measurementsOverCurrentProtectorSensorSignedValue"), ("PDU2-MIB", "oldSensorState"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("PDU2-MIB", "pduSerialNumber"), ("PDU2-MIB", "suspectedTripCauseLabel"))
if mibBuilder.loadTexts: overCurrentProtectorSensorStateChange.setStatus('current')
if mibBuilder.loadTexts: overCurrentProtectorSensorStateChange.setDescription('Overcurrent protector sensor state change.\n            Which value field to use depends on the metadata of the sensor.\n            measurementsOverCurrentProtectorSensorValue is undefined for sensors which can\n            have negative readings, measurementsOverCurrentProtectorSensorSignedValue is\n            undefined for sensors whose range exceeds the Integer32 range.\n            Both fields do not apply to sensors without numerical readings.\n            For trip sensor state changes, if a particular outlet is determined to be likely\n            to have caused the OCP trip, its label is passed in suspectedTripCauseLabel.')
externalSensorStateChange = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 66)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "pduNumber"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "externalSensorNumber"), ("PDU2-MIB", "typeOfSensor"), ("PDU2-MIB", "measurementsExternalSensorTimeStamp"), ("PDU2-MIB", "measurementsExternalSensorValue"), ("PDU2-MIB", "measurementsExternalSensorState"), ("PDU2-MIB", "oldSensorState"), ("PDU2-MIB", "externalSensorSerialNumber"), ("PDU2-MIB", "externalOnOffSensorSubtype"), ("PDU2-MIB", "externalSensorChannelNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: externalSensorStateChange.setStatus('current')
if mibBuilder.loadTexts: externalSensorStateChange.setDescription('External sensor state change.')
smtpMessageTransmissionFailure = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 67)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "smtpMessageRecipients"), ("PDU2-MIB", "smtpServer"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: smtpMessageTransmissionFailure.setStatus('current')
if mibBuilder.loadTexts: smtpMessageTransmissionFailure.setDescription('SMTP message transmission failure')
ldapError = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 68)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "errorDescription"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: ldapError.setStatus('current')
if mibBuilder.loadTexts: ldapError.setDescription('An LDAP error occurred; errorDescription describes the error')
deviceUpdateFailed = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 70)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "imageVersion"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: deviceUpdateFailed.setStatus('current')
if mibBuilder.loadTexts: deviceUpdateFailed.setDescription('The device firmware update has failed.')
loadSheddingModeEntered = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 71)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: loadSheddingModeEntered.setStatus('current')
if mibBuilder.loadTexts: loadSheddingModeEntered.setDescription('The PDU has entered load shedding mode')
loadSheddingModeExited = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 72)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: loadSheddingModeExited.setStatus('current')
if mibBuilder.loadTexts: loadSheddingModeExited.setDescription('The PDU has exited load shedding mode')
pingServerEnabled = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 73)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "serverIPAddress"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: pingServerEnabled.setStatus('current')
if mibBuilder.loadTexts: pingServerEnabled.setDescription('The ping feature has been enabled for a server.')
pingServerDisabled = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 74)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "serverIPAddress"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: pingServerDisabled.setStatus('current')
if mibBuilder.loadTexts: pingServerDisabled.setDescription('The ping feature has been disabled for a server.')
serverNotReachable = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 75)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "serverIPAddress"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: serverNotReachable.setStatus('current')
if mibBuilder.loadTexts: serverNotReachable.setDescription('A monitored server has become unreachable.')
serverReachable = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 76)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "serverIPAddress"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: serverReachable.setStatus('current')
if mibBuilder.loadTexts: serverReachable.setDescription('A monitored server has become reachable.')
rfCodeTagConnected = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 77)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: rfCodeTagConnected.setStatus('deprecated')
if mibBuilder.loadTexts: rfCodeTagConnected.setDescription('An RF-Code tag has been connected.')
rfCodeTagDisconnected = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 78)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: rfCodeTagDisconnected.setStatus('deprecated')
if mibBuilder.loadTexts: rfCodeTagDisconnected.setDescription('An RF-Code tag has been disconnected.')
deviceIdentificationChanged = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 79)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "deviceChangedParameter"), ("PDU2-MIB", "changedParameterNewValue"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: deviceIdentificationChanged.setStatus('current')
if mibBuilder.loadTexts: deviceIdentificationChanged.setDescription('A device identification parameter has been changed.')
usbSlaveConnected = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 80)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: usbSlaveConnected.setStatus('current')
if mibBuilder.loadTexts: usbSlaveConnected.setDescription('Connectivity to downstream slave has been established.\n            It applies to the following interfaces:\n                USB\n                Ethernet\n            This trap is sent only if deviceCascadeType is portForwarding')
usbSlaveDisconnected = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 81)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: usbSlaveDisconnected.setStatus('current')
if mibBuilder.loadTexts: usbSlaveDisconnected.setDescription('Connectivity to downstream slave has been lost\n            It applies to the following interfaces:\n                USB\n                Ethernet\n            This trap is sent only if deviceCascadeType is portForwarding')
lhxSupportChanged = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 82)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("PDU2-MIB", "lhxSupportEnabled"), ("PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: lhxSupportChanged.setStatus('current')
if mibBuilder.loadTexts: lhxSupportChanged.setDescription('Schroff LHX support has been enabled or disabled.')
userAcceptedRestrictedServiceAgreement = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 83)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "pxIPAddress"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: userAcceptedRestrictedServiceAgreement.setStatus('current')
if mibBuilder.loadTexts: userAcceptedRestrictedServiceAgreement.setDescription('A user accepted the Restricted Service Agreement.')
userDeclinedRestrictedServiceAgreement = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 84)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "pxIPAddress"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: userDeclinedRestrictedServiceAgreement.setStatus('current')
if mibBuilder.loadTexts: userDeclinedRestrictedServiceAgreement.setDescription('A user declined the Restricted Service Agreement.')
wireSensorStateChange = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 85)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "pduNumber"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "wireLabel"), ("PDU2-MIB", "typeOfSensor"), ("PDU2-MIB", "measurementsWireSensorTimeStamp"), ("PDU2-MIB", "measurementsWireSensorValue"), ("PDU2-MIB", "measurementsWireSensorState"), ("PDU2-MIB", "oldSensorState"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: wireSensorStateChange.setStatus('deprecated')
if mibBuilder.loadTexts: wireSensorStateChange.setDescription('Wire sensor state change.')
transferSwitchSensorStateChange = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 86)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "pduNumber"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "transferSwitchLabel"), ("PDU2-MIB", "typeOfSensor"), ("PDU2-MIB", "measurementsTransferSwitchSensorTimeStamp"), ("PDU2-MIB", "measurementsTransferSwitchSensorValue"), ("PDU2-MIB", "measurementsTransferSwitchSensorState"), ("PDU2-MIB", "measurementsTransferSwitchSensorSignedValue"), ("PDU2-MIB", "oldSensorState"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("PDU2-MIB", "transferSwitchLastTransferReason"), ("PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: transferSwitchSensorStateChange.setStatus('current')
if mibBuilder.loadTexts: transferSwitchSensorStateChange.setDescription('Transfer switch sensor state change.\n            Which value field to use depends on the metadata of the sensor.\n            measurementsTransferSwitchSensorValue is undefined for sensors which can\n            have negative readings, measurementsTransferSwitchSensorSignedValue is\n            undefined for sensors whose range exceeds the Integer32 range.\n            Both fields do not apply to sensors without numerical readings.')
deviceSettingsSaved = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 88)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "pxIPAddress"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: deviceSettingsSaved.setStatus('current')
if mibBuilder.loadTexts: deviceSettingsSaved.setDescription('A configuration backup has been downloaded from the device.')
deviceSettingsRestored = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 89)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "pxIPAddress"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: deviceSettingsRestored.setStatus('current')
if mibBuilder.loadTexts: deviceSettingsRestored.setDescription('A configuration backup has been restored to the device.')
webcamInserted = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 90)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "webcamModel"), ("PDU2-MIB", "webcamConnectionPort"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: webcamInserted.setStatus('current')
if mibBuilder.loadTexts: webcamInserted.setDescription('A webcam has been connected.')
webcamRemoved = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 91)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "webcamModel"), ("PDU2-MIB", "webcamConnectionPort"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: webcamRemoved.setStatus('current')
if mibBuilder.loadTexts: webcamRemoved.setDescription('A webcam has been disconnected.')
inletEnabled = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 92)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "inletLabel"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: inletEnabled.setStatus('current')
if mibBuilder.loadTexts: inletEnabled.setDescription('PDU operation has been enabled for an inlet')
inletDisabled = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 93)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "inletLabel"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: inletDisabled.setStatus('current')
if mibBuilder.loadTexts: inletDisabled.setDescription('PDU operation has been disabled for an inlet')
serverConnectivityUnrecoverable = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 94)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "serverIPAddress"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: serverConnectivityUnrecoverable.setStatus('current')
if mibBuilder.loadTexts: serverConnectivityUnrecoverable.setDescription('The connection to a monitored server could not be recovered.')
radiusError = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 95)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "errorDescription"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: radiusError.setStatus('current')
if mibBuilder.loadTexts: radiusError.setDescription('A Radius error occurred; errorDescription describes the error')
serverReachabilityError = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 96)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "serverIPAddress"), ("PDU2-MIB", "errorDescription"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: serverReachabilityError.setStatus('current')
if mibBuilder.loadTexts: serverReachabilityError.setDescription('Server reachability error occurred; errorDescription describes the error.\n            This trap is sent when the Error state is entered.\n            Reasons for transitioning to the Error state include the following:\n                Unable to resolve the server hostname.')
inletSensorReset = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 97)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "pduNumber"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "inletLabel"), ("PDU2-MIB", "typeOfSensor"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: inletSensorReset.setStatus('current')
if mibBuilder.loadTexts: inletSensorReset.setDescription('An inlet sensor was reset.')
outletSensorReset = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 98)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "pduNumber"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "outletLabel"), ("PDU2-MIB", "typeOfSensor"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: outletSensorReset.setStatus('current')
if mibBuilder.loadTexts: outletSensorReset.setDescription('An outlet sensor was reset.')
unknownPeripheralDeviceAttached = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 99)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "peripheralDeviceRomcode"), ("PDU2-MIB", "peripheralDevicePackagePosition"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: unknownPeripheralDeviceAttached.setStatus('current')
if mibBuilder.loadTexts: unknownPeripheralDeviceAttached.setDescription('An unsupported peripheral device was attached.')
peripheralDeviceFirmwareUpdate = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 100)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "peripheralDevicePackageSerialNumber"), ("PDU2-MIB", "peripheralDeviceFirmwareUpdateState"), ("PDU2-MIB", "peripheralDevicePackageFirmwareVersion"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: peripheralDeviceFirmwareUpdate.setStatus('current')
if mibBuilder.loadTexts: peripheralDeviceFirmwareUpdate.setDescription('The firmware update state of a peripheral device changed while\n            performing update to peripheralDevicePackageFirmwareVersion.')
unitSensorReset = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 101)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "pduNumber"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "typeOfSensor"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: unitSensorReset.setStatus('current')
if mibBuilder.loadTexts: unitSensorReset.setDescription('A unit-level sensor was reset.')
unitSensorStateChange = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 102)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "pduNumber"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "typeOfSensor"), ("PDU2-MIB", "measurementsUnitSensorTimeStamp"), ("PDU2-MIB", "measurementsUnitSensorValue"), ("PDU2-MIB", "measurementsUnitSensorState"), ("PDU2-MIB", "measurementsUnitSensorSignedValue"), ("PDU2-MIB", "oldSensorState"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: unitSensorStateChange.setStatus('current')
if mibBuilder.loadTexts: unitSensorStateChange.setDescription('Unit-level sensor state change.\n            Which value field to use depends on the metadata of the sensor.\n            measurementsUnitSensorValue is undefined for sensors which can\n            have negative readings, measurementsUnitSensorSignedValue is\n            undefined for sensors whose range exceeds the Integer32 range.\n            Both fields do not apply to sensors without numerical readings.')
circuitSensorStateChange = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 103)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "pduNumber"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "circuitNumber"), ("PDU2-MIB", "typeOfSensor"), ("PDU2-MIB", "measurementsCircuitSensorTimeStamp"), ("PDU2-MIB", "measurementsCircuitSensorValue"), ("PDU2-MIB", "measurementsCircuitSensorState"), ("PDU2-MIB", "measurementsCircuitSensorSignedValue"), ("PDU2-MIB", "oldSensorState"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: circuitSensorStateChange.setStatus('current')
if mibBuilder.loadTexts: circuitSensorStateChange.setDescription('BCM2/PMC branch circuit sensor state change.\n            Which value field to use depends on the metadata of the sensor.\n            measurementsCircuitSensorValue is undefined for sensors which can\n            have negative readings, measurementsCircuitSensorSignedValue is\n            undefined for sensors whose range exceeds the Integer32 range.\n            Both fields do not apply to sensors without numerical readings.')
circuitPoleSensorStateChange = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 104)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "pduNumber"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "circuitNumber"), ("PDU2-MIB", "circuitPoleNumber"), ("PDU2-MIB", "typeOfSensor"), ("PDU2-MIB", "measurementsCircuitPoleSensorTimeStamp"), ("PDU2-MIB", "measurementsCircuitPoleSensorValue"), ("PDU2-MIB", "measurementsCircuitPoleSensorState"), ("PDU2-MIB", "measurementsCircuitPoleSensorSignedValue"), ("PDU2-MIB", "oldSensorState"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: circuitPoleSensorStateChange.setStatus('current')
if mibBuilder.loadTexts: circuitPoleSensorStateChange.setDescription('BCM2/PMC circuit pole sensor state change.\n            Which value field to use depends on the metadata of the sensor.\n            measurementsCircuitPoleSensorValue is undefined for sensors which can\n            have negative readings, measurementsCircuitPoleSensorSignedValue is\n            undefined for sensors whose range exceeds the Integer32 range.\n            Both fields do not apply to sensors without numerical readings.')
circuitAdded = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 105)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "pduNumber"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "circuitNumber"), ("PDU2-MIB", "circuitName"), ("PDU2-MIB", "circuitType"), ("PDU2-MIB", "circuitRatedCurrent"), ("PDU2-MIB", "circuitCTRating"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: circuitAdded.setStatus('current')
if mibBuilder.loadTexts: circuitAdded.setDescription('A new branch circuit has been configured')
circuitDeleted = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 106)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "pduNumber"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "circuitNumber"), ("PDU2-MIB", "circuitName"), ("PDU2-MIB", "circuitType"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: circuitDeleted.setStatus('current')
if mibBuilder.loadTexts: circuitDeleted.setDescription('A configured branch circuit has been deleted')
circuitModified = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 107)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "pduNumber"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "circuitNumber"), ("PDU2-MIB", "circuitName"), ("PDU2-MIB", "circuitType"), ("PDU2-MIB", "circuitRatedCurrent"), ("PDU2-MIB", "circuitCTRating"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: circuitModified.setStatus('current')
if mibBuilder.loadTexts: circuitModified.setDescription('A configured branch circuit has been modified')
circuitSensorReset = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 108)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "pduNumber"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "circuitNumber"), ("PDU2-MIB", "typeOfSensor"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: circuitSensorReset.setStatus('current')
if mibBuilder.loadTexts: circuitSensorReset.setDescription('An BCM2/PMC branch circuit sensor was reset.')
powerMeterAdded = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 109)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "pduNumber"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "powerMeterPhaseCTRating"), ("PDU2-MIB", "powerMeterNeutralCTRating"), ("PDU2-MIB", "powerMeterEarthCTRating"), ("PDU2-MIB", "powerMeterPanelPositions"), ("PDU2-MIB", "powerMeterPanelLayout"), ("PDU2-MIB", "powerMeterPanelNumbering"), ("PDU2-MIB", "powerMeterType"), ("PDU2-MIB", "inletRatedCurrent"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: powerMeterAdded.setStatus('current')
if mibBuilder.loadTexts: powerMeterAdded.setDescription('A new power meter or panel has been configured')
powerMeterDeleted = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 110)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "pduNumber"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "powerMeterType"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: powerMeterDeleted.setStatus('current')
if mibBuilder.loadTexts: powerMeterDeleted.setDescription('A configured power meter has been deleted')
powerMeterModified = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 111)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "pduNumber"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "powerMeterPhaseCTRating"), ("PDU2-MIB", "powerMeterNeutralCTRating"), ("PDU2-MIB", "powerMeterEarthCTRating"), ("PDU2-MIB", "powerMeterType"), ("PDU2-MIB", "inletRatedCurrent"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: powerMeterModified.setStatus('current')
if mibBuilder.loadTexts: powerMeterModified.setDescription('A configured power meter has been modified')
smsMessageTransmissionFailure = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 112)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "phoneNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: smsMessageTransmissionFailure.setStatus('current')
if mibBuilder.loadTexts: smsMessageTransmissionFailure.setDescription('Sending an SMS message failed.')
smartCardInserted = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 113)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "smartCardReaderId"), ("PDU2-MIB", "smartCardTimestamp"), ("PDU2-MIB", "smartCardType"), ("PDU2-MIB", "smartCardId"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: smartCardInserted.setStatus('current')
if mibBuilder.loadTexts: smartCardInserted.setDescription('A smartcard was inserted into a card reader.')
smartCardRemoved = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 114)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "smartCardReaderId"), ("PDU2-MIB", "smartCardTimestamp"), ("PDU2-MIB", "smartCardType"), ("PDU2-MIB", "smartCardId"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: smartCardRemoved.setStatus('current')
if mibBuilder.loadTexts: smartCardRemoved.setDescription('A smartcard was removed from a card reader.')
mibBuilder.exportSymbols("PDU2-MIB", externalSensorTypeDefaultThresholdsEntry=externalSensorTypeDefaultThresholdsEntry, pxInetAddressType=pxInetAddressType, outletSensorConfigurationEntry=outletSensorConfigurationEntry, externalSensorConfigurationTable=externalSensorConfigurationTable, wirePowerSource=wirePowerSource, outletPoleConfigurationTable=outletPoleConfigurationTable, wireSensorTolerance=wireSensorTolerance, inletPoleSensorMeasurementsEntry=inletPoleSensorMeasurementsEntry, measurementsExternalSensorTimeStamp=measurementsExternalSensorTimeStamp, logOutletPoleSensorAvgValue=logOutletPoleSensorAvgValue, passwordSettingsChanged=passwordSettingsChanged, measurementsOutletPoleSensorTimeStamp=measurementsOutletPoleSensorTimeStamp, ProductTypeEnumeration=ProductTypeEnumeration, externalSensorLogAvailable=externalSensorLogAvailable, activeDNSServerIndex=activeDNSServerIndex, transferSwitchSensorMeasurementsEntry=transferSwitchSensorMeasurementsEntry, AddressSourceEnumeration=AddressSourceEnumeration, boardVersion=boardVersion, outletPowerupSequence=outletPowerupSequence, logExternalSensorDataAvailable=logExternalSensorDataAvailable, measurementsOutletSensorValue=measurementsOutletSensorValue, reliabilityErrorLogPOH=reliabilityErrorLogPOH, trapInformationGroup=trapInformationGroup, unitSensorEnabledThresholds=unitSensorEnabledThresholds, measurementsOverCurrentProtectorSensorTimeStamp=measurementsOverCurrentProtectorSensorTimeStamp, transferSwitchTransferToInlet=transferSwitchTransferToInlet, wireSensorMaximum=wireSensorMaximum, pduSerialNumber=pduSerialNumber, rcmState=rcmState, outletPoleIndex=outletPoleIndex, logCircuitSensorDataAvailable=logCircuitSensorDataAvailable, outletPoleCapabilities=outletPoleCapabilities, outletSensorSignedMinimum=outletSensorSignedMinimum, oldestLogID=oldestLogID, deviceIdentificationChanged=deviceIdentificationChanged, inletRatedFrequency=inletRatedFrequency, logExternalSensorMinValue=logExternalSensorMinValue, transferSwitchSensorEnabledThresholds=transferSwitchSensorEnabledThresholds, GlobalOutletStateOnStartupEnumeration=GlobalOutletStateOnStartupEnumeration, groups=groups, oldConfigGroup=oldConfigGroup, circuitPowerSource=circuitPowerSource, reliabilityDataTableSequenceNumber=reliabilityDataTableSequenceNumber, outletSensorDecimalDigits=outletSensorDecimalDigits, inletEnableState=inletEnableState, circuitPoleSensorSignedMinimum=circuitPoleSensorSignedMinimum, rcmSelfTestTable=rcmSelfTestTable, peripheralDevicePackageFirmwareVersion=peripheralDevicePackageFirmwareVersion, HundredthsOfAPercentage=HundredthsOfAPercentage, outletStateOnStartup=outletStateOnStartup, outletPoleSensorLogEntry=outletPoleSensorLogEntry, circuitPoleNumber=circuitPoleNumber, externalSensorNumber=externalSensorNumber, measurementsCircuitPoleSensorIsAvailable=measurementsCircuitPoleSensorIsAvailable, unknownPeripheralDeviceAttached=unknownPeripheralDeviceAttached, peripheralDeviceRomcode=peripheralDeviceRomcode, logInletPoleSensorSignedMaxValue=logInletPoleSensorSignedMaxValue, circuitSensorLogAvailable=circuitSensorLogAvailable, inletPoleSensorHysteresis=inletPoleSensorHysteresis, networkInterfaceType=networkInterfaceType, externalSensorLowerWarningThreshold=externalSensorLowerWarningThreshold, circuitSensorMeasurementsEntry=circuitSensorMeasurementsEntry, serverReachabilityTable=serverReachabilityTable, circuitPoleCTNumber=circuitPoleCTNumber, circuitPolePanelPosition=circuitPolePanelPosition, deviceChangedParameter=deviceChangedParameter, controllerConfigurationEntry=controllerConfigurationEntry, circuitPoleSensorUpperWarningThreshold=circuitPoleSensorUpperWarningThreshold, externalSensorUpperCriticalThreshold=externalSensorUpperCriticalThreshold, logInletSensorState=logInletSensorState, dataLoggingEnableForAllSensors=dataLoggingEnableForAllSensors, inletSensorLogAvailable=inletSensorLogAvailable, reliabilityDataMaxPossible=reliabilityDataMaxPossible, logOutletSensorSignedAvgValue=logOutletSensorSignedAvgValue, inletPoleConfigurationEntry=inletPoleConfigurationEntry, transferSwitchPowerSource2=transferSwitchPowerSource2, circuitPoleSensorResolution=circuitPoleSensorResolution, measurementsUnit=measurementsUnit, inletConfigurationTable=inletConfigurationTable, outletCount=outletCount, deviceUpdateFailed=deviceUpdateFailed, outletPoleSensorResolution=outletPoleSensorResolution, logInletPoleSensorSignedMinValue=logInletPoleSensorSignedMinValue, oldTrapsGroup=oldTrapsGroup, measurementsTransferSwitchSensorState=measurementsTransferSwitchSensorState, peripheralDevicePackageFirmwareTimeStamp=peripheralDevicePackageFirmwareTimeStamp, logCircuitSensorAvgValue=logCircuitSensorAvgValue, wireSensorMeasurementsEntry=wireSensorMeasurementsEntry, wireSensorResolution=wireSensorResolution, reliabilityErrorLogValue=reliabilityErrorLogValue, rfCodeTagConnected=rfCodeTagConnected, logFileCleared=logFileCleared, logConfigurationTable=logConfigurationTable, inletCount=inletCount, unitSensorControlTable=unitSensorControlTable, measurementsWireSensorValue=measurementsWireSensorValue, unitSensorUpperWarningThreshold=unitSensorUpperWarningThreshold, URL=URL, outletSequenceDelay=outletSequenceDelay, wireSensorStateChangeDelay=wireSensorStateChangeDelay, pduRatedVoltage=pduRatedVoltage, inletSensorControlEntry=inletSensorControlEntry, logExternalSensor=logExternalSensor, transferSwitchPoleIndex=transferSwitchPoleIndex, serverReachabilityError=serverReachabilityError, reliabilityDataTable=reliabilityDataTable, pduNumber=pduNumber, userAdded=userAdded, complianceRev2=complianceRev2, measurementsTransferSwitch=measurementsTransferSwitch, overCurrentProtectorPoleConfigurationEntry=overCurrentProtectorPoleConfigurationEntry, measurementsCircuitPoleSensorState=measurementsCircuitPoleSensorState, activeDNSServerEntry=activeDNSServerEntry, circuitCTRating=circuitCTRating, unitSensorLowerWarningThreshold=unitSensorLowerWarningThreshold, logOverCurrentProtectorSensorSignedMinValue=logOverCurrentProtectorSensorSignedMinValue, logInletPoleSensorMinValue=logInletPoleSensorMinValue, inletPoleSensorMinimum=inletPoleSensorMinimum, externalSensorTypeDefaultLowerWarningThreshold=externalSensorTypeDefaultLowerWarningThreshold, inletRatedVoltage=inletRatedVoltage, loadShedding=loadShedding, transferSwitchPoleConfigurationTable=transferSwitchPoleConfigurationTable, logExternalSensorAvgValue=logExternalSensorAvgValue, powerMeterEarthCTRating=powerMeterEarthCTRating, externalSensorYCoordinate=externalSensorYCoordinate, outletSensorLowerWarningThreshold=outletSensorLowerWarningThreshold, measurementsOutletSensorSignedValue=measurementsOutletSensorSignedValue, PhaseEnumeration=PhaseEnumeration, overCurrentProtectorRatedCurrent=overCurrentProtectorRatedCurrent, externalSensorStateChange=externalSensorStateChange, powerMeter=powerMeter, outletPoleNumber=outletPoleNumber, PeripheralDeviceFirmwareUpdateStateEnumeration=PeripheralDeviceFirmwareUpdateStateEnumeration, peripheralDevicePackageTable=peripheralDevicePackageTable, PlugTypeEnumeration=PlugTypeEnumeration, transferSwitchPoleLine=transferSwitchPoleLine, circuitName=circuitName, unitSensorControlEntry=unitSensorControlEntry, gateway=gateway, activeDNSServerTable=activeDNSServerTable, externalSensorStateChangeDelay=externalSensorStateChangeDelay, lhxSupportChanged=lhxSupportChanged, obsoleteObjectsGroup=obsoleteObjectsGroup, pduName=pduName, outletReceptacleDescriptor=outletReceptacleDescriptor, circuitSensorMinimum=circuitSensorMinimum, unitSensorReset=unitSensorReset, circuitSensorLogEntry=circuitSensorLogEntry, compliances=compliances, transferSwitchSensorSignedLowerCriticalThreshold=transferSwitchSensorSignedLowerCriticalThreshold, trapsGroup=trapsGroup, overCurrentProtectorSensorDecimalDigits=overCurrentProtectorSensorDecimalDigits, pingServerDisabled=pingServerDisabled, deviceCascadePosition=deviceCascadePosition, unitSensorDecimalDigits=unitSensorDecimalDigits, logOutletPoleSensorSignedAvgValue=logOutletPoleSensorSignedAvgValue, logOverCurrentProtector=logOverCurrentProtector, transferSwitchPoleIn2Node=transferSwitchPoleIn2Node, transferSwitchAutoReTransferRequiresPhaseSync=transferSwitchAutoReTransferRequiresPhaseSync, peripheralDeviceFirmwareUpdateState=peripheralDeviceFirmwareUpdateState, outletRatedVA=outletRatedVA, firstNTPServerAddressType=firstNTPServerAddressType, actuatorControlTable=actuatorControlTable, serverConnectivityUnrecoverable=serverConnectivityUnrecoverable, reliabilityErrorLogRawUpperBytes=reliabilityErrorLogRawUpperBytes, pduRatedVA=pduRatedVA, logOutletPoleSensorSignedMaxValue=logOutletPoleSensorSignedMaxValue, bulkConfigurationCopied=bulkConfigurationCopied, inletPoleSensorLogAvailable=inletPoleSensorLogAvailable, outletPoleSensorLowerWarningThreshold=outletPoleSensorLowerWarningThreshold, externalSensorMeasurementsEntry=externalSensorMeasurementsEntry, transferSwitchSensorConfigurationEntry=transferSwitchSensorConfigurationEntry, logCircuitPoleSensorDataAvailable=logCircuitPoleSensorDataAvailable, reliabilityErrorLogTable=reliabilityErrorLogTable, measurementsOverCurrentProtectorSensorIsAvailable=measurementsOverCurrentProtectorSensorIsAvailable, externalSensorChannelNumber=externalSensorChannelNumber, logTransferSwitchSensorDataAvailable=logTransferSwitchSensorDataAvailable, overCurrentProtectorSensorStateChangeDelay=overCurrentProtectorSensorStateChangeDelay, outletSensorUpperWarningThreshold=outletSensorUpperWarningThreshold, measurementsOutletPoleSensorState=measurementsOutletPoleSensorState, logWireSensorState=logWireSensorState, overCurrentProtectorSensorLogEntry=overCurrentProtectorSensorLogEntry, activeNTPServerCount=activeNTPServerCount, externalSensorDescription=externalSensorDescription, externalSensorTypeDefaultStateChangeDelay=externalSensorTypeDefaultStateChangeDelay, logInlet=logInlet, overCurrentProtectorPoleLine=overCurrentProtectorPoleLine, unitSensorResetValue=unitSensorResetValue, actuatorControl=actuatorControl, measurementsCircuit=measurementsCircuit, rcmSelfTestEntry=rcmSelfTestEntry, typeOfSensor=typeOfSensor, unitSensorMaximum=unitSensorMaximum, overCurrentProtectorSensorUpperWarningThreshold=overCurrentProtectorSensorUpperWarningThreshold, overCurrentProtectorType=overCurrentProtectorType, logOutletSensorState=logOutletSensorState, outletPoleSensorConfigurationTable=outletPoleSensorConfigurationTable, logOutletSensorSignedMaxValue=logOutletSensorSignedMaxValue, measurementsCircuitPoleSensorTimeStamp=measurementsCircuitPoleSensorTimeStamp, overCurrentProtectorPoleInNode=overCurrentProtectorPoleInNode, externalSensorPosition=externalSensorPosition, outletSwitchingTimeStamp=outletSwitchingTimeStamp, smartCardType=smartCardType, reliabilityErrorLogEntry=reliabilityErrorLogEntry, firmwareValidationFailed=firmwareValidationFailed, outletPoleLine=outletPoleLine, outletSensorLogAvailable=outletSensorLogAvailable, activeDNSServerAddress=activeDNSServerAddress, outletPoleSensorTolerance=outletPoleSensorTolerance, measurementsInlet=measurementsInlet, inletSensorSignedLowerCriticalThreshold=inletSensorSignedLowerCriticalThreshold, transferSwitchSensorDecimalDigits=transferSwitchSensorDecimalDigits, trapInformation=trapInformation, circuitSensorUpperWarningThreshold=circuitSensorUpperWarningThreshold, pxInetIPAddress=pxInetIPAddress, logOverCurrentProtectorSensorState=logOverCurrentProtectorSensorState, circuitPoleSensorSignedUpperCriticalThreshold=circuitPoleSensorSignedUpperCriticalThreshold, inletPoleSensorSignedLowerCriticalThreshold=inletPoleSensorSignedLowerCriticalThreshold, logWireSensorMaxValue=logWireSensorMaxValue, logInletSensorMinValue=logInletSensorMinValue, inletPoleSensorAccuracy=inletPoleSensorAccuracy, outletSensorMaximum=outletSensorMaximum, reliabilityDataRawUpperBytes=reliabilityDataRawUpperBytes, relayBehaviorOnPowerLoss=relayBehaviorOnPowerLoss, overCurrentProtectorSensorLowerWarningThreshold=overCurrentProtectorSensorLowerWarningThreshold, outletSensorControlEntry=outletSensorControlEntry, systemStarted=systemStarted, outletPoleSensorConfigurationEntry=outletPoleSensorConfigurationEntry, circuitId=circuitId, unitSensorUnits=unitSensorUnits, transferSwitchPoleOutNode=transferSwitchPoleOutNode, systemReset=systemReset, outletSensorSignedMaximum=outletSensorSignedMaximum, circuitPoleSensorConfigurationEntry=circuitPoleSensorConfigurationEntry, externalSensorZCoordinate=externalSensorZCoordinate, transferSwitchLabel=transferSwitchLabel, activeNTPServerAddressSource=activeNTPServerAddressSource, peripheralDevicePackageId=peripheralDevicePackageId, logCircuitPoleSensorAvgValue=logCircuitPoleSensorAvgValue, measurementsCircuitPoleSensorSignedValue=measurementsCircuitPoleSensorSignedValue, loadSheddingModeExited=loadSheddingModeExited, logSize=logSize, logTransferSwitchSensorMinValue=logTransferSwitchSensorMinValue, unitSensorResolution=unitSensorResolution, inletSensorResetValue=inletSensorResetValue, logWire=logWire, logOverCurrentProtectorSensorMinValue=logOverCurrentProtectorSensorMinValue, unitSensorSignedLowerWarningThreshold=unitSensorSignedLowerWarningThreshold, reliabilityErrorLogThreshold=reliabilityErrorLogThreshold, outletPoleCount=outletPoleCount, logTransferSwitchSensorSignedMinValue=logTransferSwitchSensorSignedMinValue, nameplateTable=nameplateTable, overCurrentProtectorSensorSignedLowerCriticalThreshold=overCurrentProtectorSensorSignedLowerCriticalThreshold, wireSensorUpperCriticalThreshold=wireSensorUpperCriticalThreshold)
mibBuilder.exportSymbols("PDU2-MIB", overCurrentProtectorSensorLogTable=overCurrentProtectorSensorLogTable, serverReachability=serverReachability, inletSensorMinimum=inletSensorMinimum, transferSwitchSensorLogTable=transferSwitchSensorLogTable, logCircuitPoleSensorMaxValue=logCircuitPoleSensorMaxValue, transferSwitchSensorMaximum=transferSwitchSensorMaximum, transferSwitchControlTable=transferSwitchControlTable, measurementsOverCurrentProtectorSensorState=measurementsOverCurrentProtectorSensorState, inletSensorControlTable=inletSensorControlTable, phoneNumber=phoneNumber, transferSwitchSensorStateChange=transferSwitchSensorStateChange, inletRatedCurrent=inletRatedCurrent, deviceCascadeType=deviceCascadeType, secondNTPServerAddress=secondNTPServerAddress, peripheralDevicesAutoManagement=peripheralDevicesAutoManagement, unitSensorConfigurationTable=unitSensorConfigurationTable, measurementsWireSensorIsAvailable=measurementsWireSensorIsAvailable, circuitPoleSensorLowerCriticalThreshold=circuitPoleSensorLowerCriticalThreshold, unitSensorSignedLowerCriticalThreshold=unitSensorSignedLowerCriticalThreshold, outletName=outletName, wireLabel=wireLabel, TransferSwitchTransferReasonEnumeration=TransferSwitchTransferReasonEnumeration, externalSensorAccuracy=externalSensorAccuracy, transferSwitchPowerSource1=transferSwitchPowerSource1, unitDeviceCapabilities=unitDeviceCapabilities, logInletSensorSignedAvgValue=logInletSensorSignedAvgValue, overCurrentProtectorSensorAccuracy=overCurrentProtectorSensorAccuracy, logOutletPoleSensorMaxValue=logOutletPoleSensorMaxValue, externalSensorUpperWarningThreshold=externalSensorUpperWarningThreshold, reliabilityDataFlags=reliabilityDataFlags, inletSensorStateChange=inletSensorStateChange, serverReachable=serverReachable, externalSensorIsActuator=externalSensorIsActuator, inletPoleSensorSignedMinimum=inletPoleSensorSignedMinimum, roleModified=roleModified, overCurrentProtectorSensorUpperCriticalThreshold=overCurrentProtectorSensorUpperCriticalThreshold, outletPoleNode=outletPoleNode, outletPoleConfigurationEntry=outletPoleConfigurationEntry, externalSensorControl=externalSensorControl, measurementsInletSensorIsAvailable=measurementsInletSensorIsAvailable, logIndexTable=logIndexTable, unitSensorHysteresis=unitSensorHysteresis, logCircuitPoleSensorSignedAvgValue=logCircuitPoleSensorSignedAvgValue, overCurrentProtectorSensorSignedMaximum=overCurrentProtectorSensorSignedMaximum, logUnitSensorSignedMinValue=logUnitSensorSignedMinValue, powerMeterPanelNumbering=powerMeterPanelNumbering, rfCodeTagDisconnected=rfCodeTagDisconnected, outletSensorControl=outletSensorControl, externalSensors=externalSensors, unitSensorLogEntry=unitSensorLogEntry, externalSensorTolerance=externalSensorTolerance, newestLogID=newestLogID, externalSensorSerialNumber=externalSensorSerialNumber, ldapError=ldapError, pduModel=pduModel, transferSwitch=transferSwitch, activeNTPServerAddressType=activeNTPServerAddressType, reliabilityErrorLogTime=reliabilityErrorLogTime, userLogin=userLogin, complianceRev1=complianceRev1, inletPoleSensorSignedLowerWarningThreshold=inletPoleSensorSignedLowerWarningThreshold, wireConfigurationTable=wireConfigurationTable, reliabilityDataValue=reliabilityDataValue, unitSensorStateChangeDelay=unitSensorStateChangeDelay, unitSensorLogAvailable=unitSensorLogAvailable, logCircuitSensorMinValue=logCircuitSensorMinValue, circuitSensorSignedUpperCriticalThreshold=circuitSensorSignedUpperCriticalThreshold, OutletSwitchingOperationsEnumeration=OutletSwitchingOperationsEnumeration, inlets=inlets, boardIndex=boardIndex, unit=unit, useDHCPProvidedNTPServer=useDHCPProvidedNTPServer, circuitPoleSensorUnits=circuitPoleSensorUnits, logUnitSensorMinValue=logUnitSensorMinValue, reliabilityDataThreshold=reliabilityDataThreshold, inletLabel=inletLabel, unitSensorLogTable=unitSensorLogTable, outletPoleSensorMeasurementsTable=outletPoleSensorMeasurementsTable, powerControl=powerControl, circuit=circuit, outletPoleSensorSignedUpperWarningThreshold=outletPoleSensorSignedUpperWarningThreshold, transferSwitchCount=transferSwitchCount, measurementsPerLogEntry=measurementsPerLogEntry, OverCurrentProtectorTypeEnumeration=OverCurrentProtectorTypeEnumeration, outletSwitchControlTable=outletSwitchControlTable, logCircuitPoleSensorState=logCircuitPoleSensorState, outletId=outletId, boardFirmwareTimeStamp=boardFirmwareTimeStamp, unitSensorSignedUpperCriticalThreshold=unitSensorSignedUpperCriticalThreshold, inletPoleNumber=inletPoleNumber, wireCount=wireCount, circuitPoleSensorHysteresis=circuitPoleSensorHysteresis, oldMeasurementsGroup=oldMeasurementsGroup, measurementsTransferSwitchSensorIsAvailable=measurementsTransferSwitchSensorIsAvailable, outletSensorStateChange=outletSensorStateChange, actuatorControlEntry=actuatorControlEntry, measurementsUnitSensorState=measurementsUnitSensorState, unitSensorConfigurationEntry=unitSensorConfigurationEntry, sensorID=sensorID, inletId=inletId, measurementsOverCurrentProtectorSensorValue=measurementsOverCurrentProtectorSensorValue, deviceSettingsSaved=deviceSettingsSaved, outletSensorReset=outletSensorReset, frontPanelActuatorControl=frontPanelActuatorControl, overCurrentProtectorSensorSignedLowerWarningThreshold=overCurrentProtectorSensorSignedLowerWarningThreshold, pxMACAddress=pxMACAddress, logExternalSensorState=logExternalSensorState, inletSensorDecimalDigits=inletSensorDecimalDigits, outletPoleSensorSignedMaximum=outletPoleSensorSignedMaximum, ExternalSensorsZCoordinateUnitsEnumeration=ExternalSensorsZCoordinateUnitsEnumeration, measurementsInletSensorSignedValue=measurementsInletSensorSignedValue, inletPlug=inletPlug, circuitAdded=circuitAdded, circuitSensorLogTable=circuitSensorLogTable, logTransferSwitchSensorMaxValue=logTransferSwitchSensorMaxValue, inletPoleSensorMeasurementsTable=inletPoleSensorMeasurementsTable, agentInetPortNumber=agentInetPortNumber, measurementsOutletSensorIsAvailable=measurementsOutletSensorIsAvailable, userPasswordChanged=userPasswordChanged, logExternalSensorMaxValue=logExternalSensorMaxValue, outletNonCritical=outletNonCritical, globalOutletStateOnStartup=globalOutletStateOnStartup, circuitSensorUnits=circuitSensorUnits, logOutletSensorDataAvailable=logOutletSensorDataAvailable, wireSensorLogTable=wireSensorLogTable, activeNTPServerEntry=activeNTPServerEntry, outletConfigurationTable=outletConfigurationTable, inletPoleCount=inletPoleCount, environmental=environmental, unitSensorSignedMinimum=unitSensorSignedMinimum, wireSensorDecimalDigits=wireSensorDecimalDigits, measurementsInletSensorState=measurementsInletSensorState, inletSensorHysteresis=inletSensorHysteresis, pduCount=pduCount, inletSensorReset=inletSensorReset, inletPlugDescriptor=inletPlugDescriptor, serverPingEnabled=serverPingEnabled, configuration=configuration, inletName=inletName, measurementsInletSensorValue=measurementsInletSensorValue, circuitConfigurationEntry=circuitConfigurationEntry, overCurrentProtectorCount=overCurrentProtectorCount, outletSensorConfigurationTable=outletSensorConfigurationTable, logCircuitSensorSignedMinValue=logCircuitSensorSignedMinValue, inletSensorSignedMinimum=inletSensorSignedMinimum, inletPoleSensorTolerance=inletPoleSensorTolerance, pduId=pduId, externalSensorDecimalDigits=externalSensorDecimalDigits, pduRatedFrequency=pduRatedFrequency, measurementsOverCurrentProtector=measurementsOverCurrentProtector, circuitModified=circuitModified, externalSensorAlarmedToNormalDelay=externalSensorAlarmedToNormalDelay, inletPoleSensorSignedUpperWarningThreshold=inletPoleSensorSignedUpperWarningThreshold, circuitPolePhase=circuitPolePhase, circuitPoleConfigurationTable=circuitPoleConfigurationTable, peripheralDevicePackageMinFirmwareVersion=peripheralDevicePackageMinFirmwareVersion, measurementsInletPoleSensorSignedValue=measurementsInletPoleSensorSignedValue, wireSensorHysteresis=wireSensorHysteresis, inrushGuardDelay=inrushGuardDelay, activeDNSServerCount=activeDNSServerCount, reliabilityData=reliabilityData, userAuthenticationFailure=userAuthenticationFailure, pxInetNetmask=pxInetNetmask, unitSensorSignedUpperWarningThreshold=unitSensorSignedUpperWarningThreshold, logGroup=logGroup, inletSensorUpperCriticalThreshold=inletSensorUpperCriticalThreshold, smartCardId=smartCardId, circuitSensorUpperCriticalThreshold=circuitSensorUpperCriticalThreshold, inletPoleSensorUnits=inletPoleSensorUnits, logInletSensorSignedMaxValue=logInletSensorSignedMaxValue, logWireSensorAvgValue=logWireSensorAvgValue, inletDisabled=inletDisabled, inletSensorSignedLowerWarningThreshold=inletSensorSignedLowerWarningThreshold, powerMeterModified=powerMeterModified, externalSensorsZCoordinateUnits=externalSensorsZCoordinateUnits, smtpMessageTransmissionFailure=smtpMessageTransmissionFailure, pduImage=pduImage, pxInetGateway=pxInetGateway, controllerConfigurationTable=controllerConfigurationTable, serverIPAddress=serverIPAddress, inletSensorMeasurementsEntry=inletSensorMeasurementsEntry, circuitSensorSignedLowerWarningThreshold=circuitSensorSignedLowerWarningThreshold, peripheralDevicePackagePosition=peripheralDevicePackagePosition, inletSensorStateChangeDelay=inletSensorStateChangeDelay, overCurrentProtectorSensorTolerance=overCurrentProtectorSensorTolerance, webcamInserted=webcamInserted, board=board, logTimeStampEntry=logTimeStampEntry, inletPoleCapabilities=inletPoleCapabilities, ipAddressGroup=ipAddressGroup, traps=traps, unitSensorUpperCriticalThreshold=unitSensorUpperCriticalThreshold, outletReceptacle=outletReceptacle, logOverCurrentProtectorSensorAvgValue=logOverCurrentProtectorSensorAvgValue, logOutletPoleSensorSignedMinValue=logOutletPoleSensorSignedMinValue, externalSensorLogTable=externalSensorLogTable, roleDeleted=roleDeleted, transferSwitchSensorStateChangeDelay=transferSwitchSensorStateChangeDelay, externalSensorLogEntry=externalSensorLogEntry, logOutletSensorMinValue=logOutletSensorMinValue, measurementsWireSensorTimeStamp=measurementsWireSensorTimeStamp, powerMeterType=powerMeterType, measurementsTransferSwitchSensorValue=measurementsTransferSwitchSensorValue, overCurrentProtectorPowerSource=overCurrentProtectorPowerSource, pingServerEnabled=pingServerEnabled, measurementsOutletPoleSensorIsAvailable=measurementsOutletPoleSensorIsAvailable, logInletPoleSensorSignedAvgValue=logInletPoleSensorSignedAvgValue, RelayPowerLossBehaviorEnumeration=RelayPowerLossBehaviorEnumeration, overCurrentProtectorPoleConfigurationTable=overCurrentProtectorPoleConfigurationTable, powerMeterConfigurationTable=powerMeterConfigurationTable, inletPoleLine=inletPoleLine, circuitPoleSensorStateChangeDelay=circuitPoleSensorStateChangeDelay, outletPoleSensorEnabledThresholds=outletPoleSensorEnabledThresholds, outletControllerCount=outletControllerCount, serverCount=serverCount, smartCardReaderId=smartCardReaderId, externalSensorMeasurementsTable=externalSensorMeasurementsTable, transferSwitchAlarmOverride=transferSwitchAlarmOverride, oldLogGroup=oldLogGroup, circuitSensorSignedLowerCriticalThreshold=circuitSensorSignedLowerCriticalThreshold, circuitPoleSensorSignedMaximum=circuitPoleSensorSignedMaximum, circuitPoleSensorSignedLowerCriticalThreshold=circuitPoleSensorSignedLowerCriticalThreshold, reliabilityDataEntry=reliabilityDataEntry, inletPoleNode=inletPoleNode, transferSwitchPoleIn1Node=transferSwitchPoleIn1Node, outletPowerCyclingPowerOffPeriod=outletPowerCyclingPowerOffPeriod, logOutletPoleSensorMinValue=logOutletPoleSensorMinValue, measurementsTransferSwitchSensorTimeStamp=measurementsTransferSwitchSensorTimeStamp, circuitPoleSensorLowerWarningThreshold=circuitPoleSensorLowerWarningThreshold, externalOnOffSensorSubtype=externalOnOffSensorSubtype, circuitSensorStateChange=circuitSensorStateChange, inletSensorConfigurationEntry=inletSensorConfigurationEntry, unitSensorTolerance=unitSensorTolerance, outletSensorSignedLowerWarningThreshold=outletSensorSignedLowerWarningThreshold, conformance=conformance, outletSensorLogEntry=outletSensorLogEntry, OutletStateOnStartupEnumeration=OutletStateOnStartupEnumeration, sensorType=sensorType, measurementsInletPoleSensorTimeStamp=measurementsInletPoleSensorTimeStamp, inletControllerCount=inletControllerCount, oldSensorState=oldSensorState, overCurrentProtectorSensorResolution=overCurrentProtectorSensorResolution, managedExternalSensorCount=managedExternalSensorCount, DeviceCascadeTypeEnumeration=DeviceCascadeTypeEnumeration, switchingOperation=switchingOperation, roleAdded=roleAdded, inletSensorUnits=inletSensorUnits, frontPanelRCMSelfTest=frontPanelRCMSelfTest, wireSensorLowerCriticalThreshold=wireSensorLowerCriticalThreshold, productType=productType, inletPoleSensorEnabledThresholds=inletPoleSensorEnabledThresholds, outletSensorMinimum=outletSensorMinimum, measurementsInletSensorTimeStamp=measurementsInletSensorTimeStamp, measurementsOutletSensorState=measurementsOutletSensorState)
mibBuilder.exportSymbols("PDU2-MIB", overCurrentProtectorSensorLogAvailable=overCurrentProtectorSensorLogAvailable, overCurrentProtectorPoleOutNode=overCurrentProtectorPoleOutNode, inletDeviceCapabilities=inletDeviceCapabilities, logUnitSensorSignedAvgValue=logUnitSensorSignedAvgValue, PowerMeterTypeEnumeration=PowerMeterTypeEnumeration, powerMeterBranchCount=powerMeterBranchCount, outletUseGlobalPowerCyclingPowerOffPeriod=outletUseGlobalPowerCyclingPowerOffPeriod, circuitPoleCapabilities=circuitPoleCapabilities, reliabilityErrorLogIndex=reliabilityErrorLogIndex, overCurrentProtectorPoleCount=overCurrentProtectorPoleCount, transferSwitchAutoReTransferWaitTime=transferSwitchAutoReTransferWaitTime, transferSwitchPoleCount=transferSwitchPoleCount, powerMeterPanelLayout=powerMeterPanelLayout, logOverCurrentProtectorSensorSignedAvgValue=logOverCurrentProtectorSensorSignedAvgValue, firstNTPServerAddress=firstNTPServerAddress, logTransferSwitchSensorSignedAvgValue=logTransferSwitchSensorSignedAvgValue, circuitSensorConfigurationTable=circuitSensorConfigurationTable, circuitPoleSensorLogEntry=circuitPoleSensorLogEntry, inletSensorAccuracy=inletSensorAccuracy, wires=wires, logCircuitSensorState=logCircuitSensorState, logWireSensorDataAvailable=logWireSensorDataAvailable, inletSensorSignedUpperCriticalThreshold=inletSensorSignedUpperCriticalThreshold, logOutlet=logOutlet, logCircuitSensorMaxValue=logCircuitSensorMaxValue, serverReachabilityEntry=serverReachabilityEntry, PanelLayoutEnumeration=PanelLayoutEnumeration, activeNTPServerTable=activeNTPServerTable, overCurrentProtectorSensorSignedUpperWarningThreshold=overCurrentProtectorSensorSignedUpperWarningThreshold, activeNTPServerIndex=activeNTPServerIndex, externalSensorName=externalSensorName, logOverCurrentProtectorSensorSignedMaxValue=logOverCurrentProtectorSensorSignedMaxValue, userDeleted=userDeleted, logTransferSwitchSensorSignedMaxValue=logTransferSwitchSensorSignedMaxValue, overCurrentProtectorSensorUnits=overCurrentProtectorSensorUnits, ReceptacleTypeEnumeration=ReceptacleTypeEnumeration, userAcceptedRestrictedServiceAgreement=userAcceptedRestrictedServiceAgreement, inletConfigurationEntry=inletConfigurationEntry, inletSensorSignedUpperWarningThreshold=inletSensorSignedUpperWarningThreshold, circuitSensorEnabledThresholds=circuitSensorEnabledThresholds, overCurrentProtectorSensorStateChange=overCurrentProtectorSensorStateChange, meteringControllerCount=meteringControllerCount, transferSwitchSensorTolerance=transferSwitchSensorTolerance, reliabilityIndex=reliabilityIndex, suspectedTripCauseLabel=suspectedTripCauseLabel, wireSensorStateChange=wireSensorStateChange, outletSwitchControlEntry=outletSwitchControlEntry, overCurrentProtectorSensorHysteresis=overCurrentProtectorSensorHysteresis, outletSensorAccuracy=outletSensorAccuracy, inletPoleIndex=inletPoleIndex, circuitPoleSensorLogTable=circuitPoleSensorLogTable, outletRatedCurrent=outletRatedCurrent, usbSlaveDisconnected=usbSlaveDisconnected, outletPoleSensorUpperCriticalThreshold=outletPoleSensorUpperCriticalThreshold, unitSensorSignedMaximum=unitSensorSignedMaximum, logCircuit=logCircuit, measurementPeriod=measurementPeriod, wireCapabilities=wireCapabilities, smartCardRemoved=smartCardRemoved, transferSwitchFrontPanelManualTransferButtonEnabled=transferSwitchFrontPanelManualTransferButtonEnabled, smtpMessageRecipients=smtpMessageRecipients, wireSensorConfigurationEntry=wireSensorConfigurationEntry, transferSwitchSensorLogEntry=transferSwitchSensorLogEntry, trapInformationTable=trapInformationTable, outletPoleSensorUnits=outletPoleSensorUnits, circuitSensorSignedMinimum=circuitSensorSignedMinimum, measurementsWire=measurementsWire, wireSensorConfigurationTable=wireSensorConfigurationTable, inletSensorResolution=inletSensorResolution, reliabilityErrorLog=reliabilityErrorLog, webcamConnectionPort=webcamConnectionPort, unitSensorStateChange=unitSensorStateChange, circuitSensorLowerCriticalThreshold=circuitSensorLowerCriticalThreshold, outletSensorLowerCriticalThreshold=outletSensorLowerCriticalThreshold, measurementsUnitSensorValue=measurementsUnitSensorValue, inletPoleConfigurationTable=inletPoleConfigurationTable, transferSwitchSensorHysteresis=transferSwitchSensorHysteresis, externalSensorResolution=externalSensorResolution, logIndex=logIndex, control=control, wireSensorLogEntry=wireSensorLogEntry, userLogout=userLogout, deviceUpdateStarted=deviceUpdateStarted, circuitSensorReset=circuitSensorReset, userName=userName, frontPanelOutletSwitching=frontPanelOutletSwitching, externalSensorHysteresis=externalSensorHysteresis, powerMeterPanelPositions=powerMeterPanelPositions, outletSensorUnits=outletSensorUnits, outletSensorMeasurementsEntry=outletSensorMeasurementsEntry, reliabilityErrorLogId=reliabilityErrorLogId, transferSwitchControl=transferSwitchControl, wireId=wireId, outletPoleSensorUpperWarningThreshold=outletPoleSensorUpperWarningThreshold, transferSwitchLastTransferReason=transferSwitchLastTransferReason, overCurrentProtector=overCurrentProtector, inletPoleSensorLogTable=inletPoleSensorLogTable, overCurrentProtectorSensorMeasurementsTable=overCurrentProtectorSensorMeasurementsTable, webcamRemoved=webcamRemoved, PYSNMP_MODULE_ID=raritan, overCurrentProtectorName=overCurrentProtectorName, transferSwitchSensorAccuracy=transferSwitchSensorAccuracy, wireSensorLogAvailable=wireSensorLogAvailable, measurementsOutlet=measurementsOutlet, powerMeterPhaseCTRating=powerMeterPhaseCTRating, logInletSensorAvgValue=logInletSensorAvgValue, outletRatedVoltage=outletRatedVoltage, nameplateEntry=nameplateEntry, outletPoleSensorAccuracy=outletPoleSensorAccuracy, outletControl=outletControl, reliabilityGroup=reliabilityGroup, pduSensorStateChange=pduSensorStateChange, deviceSettingsRestored=deviceSettingsRestored, circuitSensorMaximum=circuitSensorMaximum, pduDaisychainMemberType=pduDaisychainMemberType, externalSensorLowerCriticalThreshold=externalSensorLowerCriticalThreshold, overCurrentProtectorPoleIndex=overCurrentProtectorPoleIndex, transferSwitchSensorUnits=transferSwitchSensorUnits, externalSensorUnits=externalSensorUnits, unitSensorMeasurementsTable=unitSensorMeasurementsTable, circuitPoleSensorMinimum=circuitPoleSensorMinimum, pduManufacturer=pduManufacturer, webcamModel=webcamModel, logTransferSwitchSensorAvgValue=logTransferSwitchSensorAvgValue, CircuitTypeEnumeration=CircuitTypeEnumeration, logInletSensorMaxValue=logInletSensorMaxValue, logInletSensorDataAvailable=logInletSensorDataAvailable, smsMessageTransmissionFailure=smsMessageTransmissionFailure, inletSensorEnabledThresholds=inletSensorEnabledThresholds, measurementsExternalSensorIsAvailable=measurementsExternalSensorIsAvailable, outletSensorEnabledThresholds=outletSensorEnabledThresholds, externalSensorXCoordinate=externalSensorXCoordinate, logUnit=logUnit, outletSensorResetValue=outletSensorResetValue, circuitRatedCurrent=circuitRatedCurrent, measurementsOutletPoleSensorValue=measurementsOutletPoleSensorValue, externalSensorTypeDefaultUpperWarningThreshold=externalSensorTypeDefaultUpperWarningThreshold, DeviceIdentificationParameterEnumeration=DeviceIdentificationParameterEnumeration, inletPoleSensorLogEntry=inletPoleSensorLogEntry, measurementsGroup=measurementsGroup, logInletPoleSensorAvgValue=logInletPoleSensorAvgValue, outletSensorControlTable=outletSensorControlTable, roleName=roleName, SensorStateEnumeration=SensorStateEnumeration, userBlocked=userBlocked, loadSheddingModeEntered=loadSheddingModeEntered, userDeclinedRestrictedServiceAgreement=userDeclinedRestrictedServiceAgreement, outletPoleSensorHysteresis=outletPoleSensorHysteresis, measurementsExternalSensor=measurementsExternalSensor, inletSensorSignedMaximum=inletSensorSignedMaximum, transferSwitchSensorSignedMinimum=transferSwitchSensorSignedMinimum, activeNTPServerAddress=activeNTPServerAddress, externalSensorMinimum=externalSensorMinimum, inletSensorMaximum=inletSensorMaximum, peripheralDevicePackageModel=peripheralDevicePackageModel, inletPoleSensorStateChangeDelay=inletPoleSensorStateChangeDelay, overCurrentProtectorConfigurationEntry=overCurrentProtectorConfigurationEntry, circuitSensorSignedUpperWarningThreshold=circuitSensorSignedUpperWarningThreshold, transferSwitchId=transferSwitchId, measurementsUnitSensorIsAvailable=measurementsUnitSensorIsAvailable, outletLabel=outletLabel, logOverCurrentProtectorSensorDataAvailable=logOverCurrentProtectorSensorDataAvailable, inletPoleSensorConfigurationEntry=inletPoleSensorConfigurationEntry, outletSwitchingState=outletSwitchingState, overCurrentProtectorSensorMeasurementsEntry=overCurrentProtectorSensorMeasurementsEntry, NetworkInterfaceTypeEnumeration=NetworkInterfaceTypeEnumeration, circuitSensorResolution=circuitSensorResolution, inletEnabled=inletEnabled, circuitPoleSensorMeasurementsEntry=circuitPoleSensorMeasurementsEntry, inletSensorLowerWarningThreshold=inletSensorLowerWarningThreshold, outlets=outlets, overCurrentProtectorSensorEnabledThresholds=overCurrentProtectorSensorEnabledThresholds, circuitSensorControlTable=circuitSensorControlTable, transferSwitchSensorSignedMaximum=transferSwitchSensorSignedMaximum, actuatorState=actuatorState, transferSwitchSensorSignedUpperWarningThreshold=transferSwitchSensorSignedUpperWarningThreshold, wireSensorMinimum=wireSensorMinimum, utcOffset=utcOffset, logTimeStamp=logTimeStamp, unitSensorAccuracy=unitSensorAccuracy, circuitPoleSensorSignedUpperWarningThreshold=circuitPoleSensorSignedUpperWarningThreshold, reliabilityDataRawLowerBytes=reliabilityDataRawLowerBytes, DaisychainMemberTypeEnumeration=DaisychainMemberTypeEnumeration, controlGroup=controlGroup, circuitType=circuitType, inletSensorMeasurementsTable=inletSensorMeasurementsTable, outletSensorMeasurementsTable=outletSensorMeasurementsTable, transferSwitchActiveInlet=transferSwitchActiveInlet, bulkConfigurationSaved=bulkConfigurationSaved, outletSensorSignedUpperWarningThreshold=outletSensorSignedUpperWarningThreshold, pxIPAddress=pxIPAddress, circuitPoleSensorConfigurationTable=circuitPoleSensorConfigurationTable, inletPoleSensorSignedMaximum=inletPoleSensorSignedMaximum, outletPoleSensorLogTable=outletPoleSensorLogTable, outletPoleSensorStateChange=outletPoleSensorStateChange, externalSensorTypeDefaultLowerCriticalThreshold=externalSensorTypeDefaultLowerCriticalThreshold, circuitPoleConfigurationEntry=circuitPoleConfigurationEntry, externalSensorEnabledThresholds=externalSensorEnabledThresholds, logCircuitSensorSignedMaxValue=logCircuitSensorSignedMaxValue, transferSwitchSensorMeasurementsTable=transferSwitchSensorMeasurementsTable, circuitNumber=circuitNumber, externalSensorConfigurationEntry=externalSensorConfigurationEntry, logUnitSensorState=logUnitSensorState, transferSwitchSensorSignedUpperCriticalThreshold=transferSwitchSensorSignedUpperCriticalThreshold, reliabilityId=reliabilityId, inletPoleSensorDecimalDigits=inletPoleSensorDecimalDigits, BoardTypeEnumeration=BoardTypeEnumeration, circuitSensorSignedMaximum=circuitSensorSignedMaximum, SensorTypeEnumeration=SensorTypeEnumeration, overCurrentProtectorSensorMinimum=overCurrentProtectorSensorMinimum, outletPoleSensorSignedLowerCriticalThreshold=outletPoleSensorSignedLowerCriticalThreshold, inletRatedVA=inletRatedVA, transferSwitchSensorLogAvailable=transferSwitchSensorLogAvailable, overCurrentProtectorSensorSignedMinimum=overCurrentProtectorSensorSignedMinimum, logTransferSwitchSensorState=logTransferSwitchSensorState, PanelNumberingEnumeration=PanelNumberingEnumeration, outletPowerSource=outletPowerSource, transferSwitchSensorConfigurationTable=transferSwitchSensorConfigurationTable, logOutletSensorAvgValue=logOutletSensorAvgValue, measurementsExternalSensorValue=measurementsExternalSensorValue, outletPoleSensorSignedLowerWarningThreshold=outletPoleSensorSignedLowerWarningThreshold, activeDNSServerAddressSource=activeDNSServerAddressSource, logOutletSensorMaxValue=logOutletSensorMaxValue, overCurrentProtectorLabel=overCurrentProtectorLabel, outletDeviceCapabilities=outletDeviceCapabilities, logCircuitPoleSensorMinValue=logCircuitPoleSensorMinValue, inletSensorLowerCriticalThreshold=inletSensorLowerCriticalThreshold, outletSensorSignedUpperCriticalThreshold=outletSensorSignedUpperCriticalThreshold, transferSwitchSensorSignedLowerWarningThreshold=transferSwitchSensorSignedLowerWarningThreshold, targetUser=targetUser, logIndexEntry=logIndexEntry, dataLogging=dataLogging, inletSensorLogEntry=inletSensorLogEntry, smartCardInserted=smartCardInserted, powerMeterNeutralCTRating=powerMeterNeutralCTRating, measurementsInletPoleSensorIsAvailable=measurementsInletPoleSensorIsAvailable, peripheralDeviceFirmwareUpdate=peripheralDeviceFirmwareUpdate, synchronizeWithNTPServer=synchronizeWithNTPServer, inletPoleSensorLowerCriticalThreshold=inletPoleSensorLowerCriticalThreshold, inletPoleSensorUpperWarningThreshold=inletPoleSensorUpperWarningThreshold, peripheralDevicePackageEntry=peripheralDevicePackageEntry, measurementsCircuitPoleSensorValue=measurementsCircuitPoleSensorValue, transferSwitchSensorLowerCriticalThreshold=transferSwitchSensorLowerCriticalThreshold, externalSensorTypeDefaultHysteresis=externalSensorTypeDefaultHysteresis, outletConfigurationEntry=outletConfigurationEntry, unitSensorLowerCriticalThreshold=unitSensorLowerCriticalThreshold, outletPoleSensorMinimum=outletPoleSensorMinimum, transferSwitchConfigurationEntry=transferSwitchConfigurationEntry, circuitPoleId=circuitPoleId, circuitSensorConfigurationEntry=circuitSensorConfigurationEntry, circuitSensorControlEntry=circuitSensorControlEntry, powerMeterDeleted=powerMeterDeleted, circuitSensorControl=circuitSensorControl, unitConfigurationEntry=unitConfigurationEntry)
mibBuilder.exportSymbols("PDU2-MIB", outletSensorResolution=outletSensorResolution, logUnitSensorAvgValue=logUnitSensorAvgValue, measurementsTransferSwitchSensorSignedValue=measurementsTransferSwitchSensorSignedValue, deviceUpdateCompleted=deviceUpdateCompleted, activeDNSServerAddressType=activeDNSServerAddressType, log=log, usbSlaveConnected=usbSlaveConnected, circuitConfigurationTable=circuitConfigurationTable, inletPoleSensorStateChange=inletPoleSensorStateChange, inletPoleSensorMaximum=inletPoleSensorMaximum, externalSensorType=externalSensorType, logOutletPoleSensorDataAvailable=logOutletPoleSensorDataAvailable, errorDescription=errorDescription, measurementsOutletSensorTimeStamp=measurementsOutletSensorTimeStamp, outletPoleSensorSignedMinimum=outletPoleSensorSignedMinimum, wireSensorAccuracy=wireSensorAccuracy, cascadedDeviceConnected=cascadedDeviceConnected, transferSwitchSensorLowerWarningThreshold=transferSwitchSensorLowerWarningThreshold, logOutletSensorSignedMinValue=logOutletSensorSignedMinValue, externalSensorMaximum=externalSensorMaximum, trapInformationEntry=trapInformationEntry, outletSensorSignedLowerCriticalThreshold=outletSensorSignedLowerCriticalThreshold, inletSensorLogTable=inletSensorLogTable, inletPoleSensorUpperCriticalThreshold=inletPoleSensorUpperCriticalThreshold, powerMeterAdded=powerMeterAdded, overCurrentProtectorIndex=overCurrentProtectorIndex, overCurrentProtectorSensorConfigurationEntry=overCurrentProtectorSensorConfigurationEntry, outletSensorLogTable=outletSensorLogTable, wireSensorUnits=wireSensorUnits, logUnitSensorSignedMaxValue=logUnitSensorSignedMaxValue, overCurrentProtectorSensorMaximum=overCurrentProtectorSensorMaximum, pdu2=pdu2, circuitPoleSensorUpperCriticalThreshold=circuitPoleSensorUpperCriticalThreshold, measurementsOutletPoleSensorSignedValue=measurementsOutletPoleSensorSignedValue, inletSensorControl=inletSensorControl, wireSensorUpperWarningThreshold=wireSensorUpperWarningThreshold, circuitSensorDecimalDigits=circuitSensorDecimalDigits, inletSensorUpperWarningThreshold=inletSensorUpperWarningThreshold, unitSensorMinimum=unitSensorMinimum, measurementsCircuitSensorValue=measurementsCircuitSensorValue, imageVersion=imageVersion, externalSensorCount=externalSensorCount, wireSensorLowerWarningThreshold=wireSensorLowerWarningThreshold, outletPoleSensorMeasurementsEntry=outletPoleSensorMeasurementsEntry, transferSwitchSensorMinimum=transferSwitchSensorMinimum, measurementsCircuitSensorTimeStamp=measurementsCircuitSensorTimeStamp, circuitPoleSensorMeasurementsTable=circuitPoleSensorMeasurementsTable, logCircuitPoleSensorSignedMaxValue=logCircuitPoleSensorSignedMaxValue, outletSensorHysteresis=outletSensorHysteresis, measurementsUnitSensorSignedValue=measurementsUnitSensorSignedValue, circuitCount=circuitCount, wireSensorMeasurementsTable=wireSensorMeasurementsTable, circuitDeleted=circuitDeleted, LineEnumeration=LineEnumeration, measurementsCircuitSensorSignedValue=measurementsCircuitSensorSignedValue, logCircuitSensorSignedAvgValue=logCircuitSensorSignedAvgValue, radiusError=radiusError, smartCardTimestamp=smartCardTimestamp, serverNotReachable=serverNotReachable, peripheralDevicePackageSerialNumber=peripheralDevicePackageSerialNumber, outletSwitchable=outletSwitchable, outletPoleSensorLowerCriticalThreshold=outletPoleSensorLowerCriticalThreshold, circuitSensorLowerWarningThreshold=circuitSensorLowerWarningThreshold, configGroup=configGroup, wireSensorEnabledThresholds=wireSensorEnabledThresholds, measurementsCircuitSensorState=measurementsCircuitSensorState, lhxSupportEnabled=lhxSupportEnabled, inletRCMResidualOperatingCurrent=inletRCMResidualOperatingCurrent, overCurrentProtectorConfigurationTable=overCurrentProtectorConfigurationTable, circuitPoleCount=circuitPoleCount, circuitPoleSensorMaximum=circuitPoleSensorMaximum, externalSensorTypeDefaultThresholdsTable=externalSensorTypeDefaultThresholdsTable, logUnitSensorMaxValue=logUnitSensorMaxValue, logCircuitPoleSensorSignedMinValue=logCircuitPoleSensorSignedMinValue, boardType=boardType, inletPoleSensorConfigurationTable=inletPoleSensorConfigurationTable, boardFirmwareVersion=boardFirmwareVersion, logConfigurationEntry=logConfigurationEntry, overCurrentProtectorSensorLowerCriticalThreshold=overCurrentProtectorSensorLowerCriticalThreshold, logInletPoleSensorDataAvailable=logInletPoleSensorDataAvailable, logOutletPoleSensorState=logOutletPoleSensorState, outletPoleSensorLogAvailable=outletPoleSensorLogAvailable, peripheralDevicePackageState=peripheralDevicePackageState, reliability=reliability, pduRatedCurrent=pduRatedCurrent, measurementsExternalSensorState=measurementsExternalSensorState, circuitPoleSensorStateChange=circuitPoleSensorStateChange, netmask=netmask, unitSensorControl=unitSensorControl, serverID=serverID, transferSwitchName=transferSwitchName, logUnitSensorDataAvailable=logUnitSensorDataAvailable, externalSensorTypeDefaultUpperCriticalThreshold=externalSensorTypeDefaultUpperCriticalThreshold, measurementsUnitSensorTimeStamp=measurementsUnitSensorTimeStamp, circuitSensorMeasurementsTable=circuitSensorMeasurementsTable, inletSensorConfigurationTable=inletSensorConfigurationTable, transferSwitchSensorUpperWarningThreshold=transferSwitchSensorUpperWarningThreshold, logTransferSwitch=logTransferSwitch, outletSensorUpperCriticalThreshold=outletSensorUpperCriticalThreshold, overCurrentProtectorSensorConfigurationTable=overCurrentProtectorSensorConfigurationTable, logInletPoleSensorState=logInletPoleSensorState, rcmControl=rcmControl, globalOutletPowerCyclingPowerOffPeriod=globalOutletPowerCyclingPowerOffPeriod, transferSwitchPoleConfigurationEntry=transferSwitchPoleConfigurationEntry, circuitPoleSensorDecimalDigits=circuitPoleSensorDecimalDigits, powerMeterConfigurationEntry=powerMeterConfigurationEntry, measurementsCircuitSensorIsAvailable=measurementsCircuitSensorIsAvailable, transferSwitchSensorUpperCriticalThreshold=transferSwitchSensorUpperCriticalThreshold, unitConfigurationTable=unitConfigurationTable, logOverCurrentProtectorSensorMaxValue=logOverCurrentProtectorSensorMaxValue, transferSwitchAutoReTransferEnabled=transferSwitchAutoReTransferEnabled, transferSwitchCapabilities=transferSwitchCapabilities, transferSwitchControlEntry=transferSwitchControlEntry, externalSensorUseDefaultThresholds=externalSensorUseDefaultThresholds, overCurrentProtectorCapabilities=overCurrentProtectorCapabilities, logTimeStampTable=logTimeStampTable, unitSensorMeasurementsEntry=unitSensorMeasurementsEntry, transferSwitchPreferredInlet=transferSwitchPreferredInlet, circuitPoleSensorSignedLowerWarningThreshold=circuitPoleSensorSignedLowerWarningThreshold, inletPoleSensorSignedUpperCriticalThreshold=inletPoleSensorSignedUpperCriticalThreshold, circuitSensorStateChangeDelay=circuitSensorStateChangeDelay, SensorUnitsEnumeration=SensorUnitsEnumeration, circuitPoleSensorLogAvailable=circuitPoleSensorLogAvailable, changedParameterNewValue=changedParameterNewValue, measurementsWireSensorState=measurementsWireSensorState, logInletPoleSensorMaxValue=logInletPoleSensorMaxValue, pduPowerCyclingPowerOffPeriod=pduPowerCyclingPowerOffPeriod, raritan=raritan, outletPoleSensorStateChangeDelay=outletPoleSensorStateChangeDelay, circuitSensorResetValue=circuitSensorResetValue, inletPoleSensorLowerWarningThreshold=inletPoleSensorLowerWarningThreshold, outletPoleSensorDecimalDigits=outletPoleSensorDecimalDigits, measurementsInletPoleSensorState=measurementsInletPoleSensorState, externalSensorTypeDefaultEnabledThresholds=externalSensorTypeDefaultEnabledThresholds, outletPoleSensorMaximum=outletPoleSensorMaximum, userSessionTimeout=userSessionTimeout, transferSwitchConfigurationTable=transferSwitchConfigurationTable, reliabilityDataWorstValue=reliabilityDataWorstValue, overCurrentProtectorSensorSignedUpperCriticalThreshold=overCurrentProtectorSensorSignedUpperCriticalThreshold, transferSwitchSensorResolution=transferSwitchSensorResolution, circuitCapabilities=circuitCapabilities, inletSensorTolerance=inletSensorTolerance, inletPoleSensorResolution=inletPoleSensorResolution, outletSensorStateChangeDelay=outletSensorStateChangeDelay, measurements=measurements, wireConfigurationEntry=wireConfigurationEntry, logInletSensorSignedMinValue=logInletSensorSignedMinValue, outletSequencingDelay=outletSequencingDelay, smtpServer=smtpServer, outletPoleSensorSignedUpperCriticalThreshold=outletPoleSensorSignedUpperCriticalThreshold, circuitSensorHysteresis=circuitSensorHysteresis, circuitPoleSensorEnabledThresholds=circuitPoleSensorEnabledThresholds, logWireSensorMinValue=logWireSensorMinValue, reliabilityErrorLogRawLowerBytes=reliabilityErrorLogRawLowerBytes, userModified=userModified, secondNTPServerAddressType=secondNTPServerAddressType, measurementsOverCurrentProtectorSensorSignedValue=measurementsOverCurrentProtectorSensorSignedValue, outletSensorTolerance=outletSensorTolerance, measurementsInletPoleSensorValue=measurementsInletPoleSensorValue)
