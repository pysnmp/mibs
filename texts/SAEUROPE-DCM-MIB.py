#
# PySNMP MIB module SAEUROPE-DCM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/saeurope/SAEUROPE-DCM-MIB
# Produced by pysmi-1.1.12 at Wed Dec  4 21:20:24 2024
# On host fv-az585-169 platform Linux version 6.5.0-1025-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
tsProcessors, tsProcessorsMIBGroups = mibBuilder.importSymbols("SAEUROPE-ROOT-MIB", "tsProcessors", "tsProcessorsMIBGroups")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Bits, IpAddress, Counter32, ObjectIdentity, Unsigned32, TimeTicks, Gauge32, MibIdentifier, Integer32, NotificationType, iso, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Bits", "IpAddress", "Counter32", "ObjectIdentity", "Unsigned32", "TimeTicks", "Gauge32", "MibIdentifier", "Integer32", "NotificationType", "iso", "Counter64")
RowStatus, TextualConvention, TruthValue, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "TruthValue", "DisplayString")
saEuropeDcmModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 1))
saEuropeDcmModule.setRevisions(('2006-02-16 14:40', '2006-10-11 14:58', '2006-12-04 13:00', '2006-12-21 13:00', '2007-01-05 13:00', '2007-05-24 13:00', '2007-11-13 13:00', '2008-01-14 13:00', '2009-01-13 13:00', '2009-10-13 13:00', '2010-01-15 13:00', '2011-05-27 13:00', '2012-03-02 13:00', '2012-06-14 13:00', '2013-07-12 13:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: saEuropeDcmModule.setRevisionsDescriptions(('V01.00.00\n\t\t\t\tInitial version of the DCM MIB.', 'V01.00.01\n\t\t\t\tAdded dcmConfigInputTsTable, such that (board, port, UDP, IP) can\n\t\t\t\tbe converted into an input TS index with a single SNMP GETNEXT.', 'V01.00.02\n\t\t\t\tAdded dcmTrGroupPortNumber to the index of the dcmTrGroupTable.', "V01.00.03\n\t\t\t\tdcmTrGroupType is now read-create\n\t\t\t\tColumnNumbers now follow each other (various tables)\n\t\t\t\tFixed range of transrater group id's, Ts index", 'V01.00.04\n\t\t\t\tvarious changes to dpi table, improved documentation', 'V01.00.05\n\t\t\t\tsupport two new DPI modes', 'V01.00.06, DCM 5.0 release\n\t\t\t\tsupport for AutoPass feature', 'V01.00.07, DCM 5.1 release\n\t\t\t\tsupport for Fec Encoding on GbE OutputTs', 'V01.00.08, DCM 6.9 release\n\t\t\t\tsupport for Transparent loopthrough and ASI input bandwidth limitations', 'V01.00.09, DCM 8.0 release\n\t\t\t\tsupport for triggering service backup (per board or per TS) and device backup', 'V01.00.09, DCM 8.1 release\n\t\t\t\tsupport for service backup and ts backup', 'V01.00.10, DCM 9.0 release\n\t\t\t\tsupport for IPGW', 'V01.00.11, DCM 10.10 release\n\t\t\t\tsupport for 4 IPGW boards', 'V01.00.12, DCM 10.20 release\n\t\t\t\tExtended support for service backup (MFP,TC,DVBS2)', 'V01.00.13, DCM 13.0 release\n\t\t\t\tsupport for GbE port mode',))
if mibBuilder.loadTexts: saEuropeDcmModule.setLastUpdated('201206141300Z')
if mibBuilder.loadTexts: saEuropeDcmModule.setOrganization('Synamedia')
if mibBuilder.loadTexts: saEuropeDcmModule.setContactInfo('https://www.synamedia.com/video-professional-services/')
if mibBuilder.loadTexts: saEuropeDcmModule.setDescription('MIB for the DCM device.\n\t\t\t\tIn all the tables in this MIB, UNDO is not guaranteed to work on a row destruction.\n\t\t\t\ti.e. if you destroy a row and simultaneously do something else that fails, it is not guaranteed\n\t\t\t\tthat the row will be restored, and if it is restored, it might have changed.')
dcmMibGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 1482, 1, 3, 2, 2, 1))
saEuropeDcmModuleCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 1482, 1, 3, 2, 2, 1, 1)).setObjects(("SAEUROPE-DCM-MIB", "dcmMandatoryGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    saEuropeDcmModuleCompliance = saEuropeDcmModuleCompliance.setStatus('current')
if mibBuilder.loadTexts: saEuropeDcmModuleCompliance.setDescription('The compliance statement for entities which\n\t\t\t\timplement the SA Europe DCM MIB')
dcmMandatoryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1482, 1, 3, 2, 2, 1, 2)).setObjects(("SAEUROPE-DCM-MIB", "dcmInputTsBoard"), ("SAEUROPE-DCM-MIB", "dcmInputTsPort"), ("SAEUROPE-DCM-MIB", "dcmInputTsUdpPort"), ("SAEUROPE-DCM-MIB", "dcmInputTsIpAddress"), ("SAEUROPE-DCM-MIB", "dcmInputTsSrcIpAddress"), ("SAEUROPE-DCM-MIB", "dcmCfgInputTsIndex"), ("SAEUROPE-DCM-MIB", "dcmCfgInputTsSrcIpAddress"), ("SAEUROPE-DCM-MIB", "dcmCfgInputTsState"), ("SAEUROPE-DCM-MIB", "dcmOutputTsBoard"), ("SAEUROPE-DCM-MIB", "dcmOutputTsPort"), ("SAEUROPE-DCM-MIB", "dcmOutputTsUdpPort"), ("SAEUROPE-DCM-MIB", "dcmOutputTsIpAddress"), ("SAEUROPE-DCM-MIB", "dcmOutputTsTransportStreamId"), ("SAEUROPE-DCM-MIB", "dcmOutputTsOriginalNetworkId"), ("SAEUROPE-DCM-MIB", "dcmOutputTsStandard"), ("SAEUROPE-DCM-MIB", "dcmOutputTsActive"), ("SAEUROPE-DCM-MIB", "dcmOutputTsTransportStreamBitRate"), ("SAEUROPE-DCM-MIB", "dcmCfgOutputTsIndex"), ("SAEUROPE-DCM-MIB", "dcmCfgOutputTsTransportStreamId"), ("SAEUROPE-DCM-MIB", "dcmCfgOutputTsOriginalNetworkId"), ("SAEUROPE-DCM-MIB", "dcmCfgOutputTsStandard"), ("SAEUROPE-DCM-MIB", "dcmCfgOutputTsActive"), ("SAEUROPE-DCM-MIB", "dcmCfgOutputTsTransportStreamBitRate"), ("SAEUROPE-DCM-MIB", "dcmCfgOutputTsRowStatus"), ("SAEUROPE-DCM-MIB", "dcmTrGroupBitRate"), ("SAEUROPE-DCM-MIB", "dcmTrGroupType"), ("SAEUROPE-DCM-MIB", "dcmTrGroupRowStatus"), ("SAEUROPE-DCM-MIB", "dcmCfgSrvForceOutputServiceID"), ("SAEUROPE-DCM-MIB", "dcmCfgSrvOutputServiceID"), ("SAEUROPE-DCM-MIB", "dcmCfgSrvForceOutputServiceName"), ("SAEUROPE-DCM-MIB", "dcmCfgSrvOutputServiceName"), ("SAEUROPE-DCM-MIB", "dcmCfgSrvRowStatus"), ("SAEUROPE-DCM-MIB", "dcmCfgSrvState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dcmMandatoryGroup = dcmMandatoryGroup.setStatus('current')
if mibBuilder.loadTexts: dcmMandatoryGroup.setDescription('Mandatory objects for all devices implementing the\n\t\t\t\tSA Europe DCM MIB.')
dcmOptionalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1482, 1, 3, 2, 2, 1, 3)).setObjects(("SAEUROPE-DCM-MIB", "dcmCfgInputTsRowStatus"), ("SAEUROPE-DCM-MIB", "dcmTrTsGroupId"), ("SAEUROPE-DCM-MIB", "dcmTrTsRowStatus"), ("SAEUROPE-DCM-MIB", "dcmTrSrvGroupId"), ("SAEUROPE-DCM-MIB", "dcmTrSrvTypeForService"), ("SAEUROPE-DCM-MIB", "dcmTrSrvLowerLimitServiceBitRate"), ("SAEUROPE-DCM-MIB", "dcmTrSrvUpperLimitServiceBitRate"), ("SAEUROPE-DCM-MIB", "dcmTrSrvPriority"), ("SAEUROPE-DCM-MIB", "dcmTrSrvRowStatus"), ("SAEUROPE-DCM-MIB", "dcmDpiPrimaryChannelName"), ("SAEUROPE-DCM-MIB", "dcmDpiPrimaryChannelMode"), ("SAEUROPE-DCM-MIB", "dcmDpiInputTsIndex"), ("SAEUROPE-DCM-MIB", "dcmDpiInputServiceId"), ("SAEUROPE-DCM-MIB", "dcmDpiManualTrigger"), ("SAEUROPE-DCM-MIB", "dcmDpiChannelStatus"), ("SAEUROPE-DCM-MIB", "dcmDpiRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dcmOptionalGroup = dcmOptionalGroup.setStatus('current')
if mibBuilder.loadTexts: dcmOptionalGroup.setDescription('Optional objects in the SA Europe DCM MIB.')
dcmIpgwGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1482, 1, 3, 2, 2, 1, 4)).setObjects(("SAEUROPE-DCM-MIB", "dcmIpgwSdiInConfigMaxAllowedVideoFormat"), ("SAEUROPE-DCM-MIB", "dcmIpgwSdiInConfigUserName"), ("SAEUROPE-DCM-MIB", "dcmIpgwSdiInFormatFramerate"), ("SAEUROPE-DCM-MIB", "dcmIpgwSdiInFormatVideoformat"), ("SAEUROPE-DCM-MIB", "dcmIpgwSdiInFormatAspectRatio"), ("SAEUROPE-DCM-MIB", "dcmIpgwSdiInFormatNbrOfLinesPerFrame"), ("SAEUROPE-DCM-MIB", "dcmIpgwSdiInFormatFrameBuildUp"), ("SAEUROPE-DCM-MIB", "dcmIpgwSdiInStatisticsReset"), ("SAEUROPE-DCM-MIB", "dcmIpgwSdiInStatisticsCrcErrors1Min"), ("SAEUROPE-DCM-MIB", "dcmIpgwSdiInStatisticsCrcErrors1Hour"), ("SAEUROPE-DCM-MIB", "dcmIpgwSdiInStatisticsCrcErrors1Day"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpInTSMaxAllowedVideoFormat"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpInTSUsername"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpInTSIpAddress"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpInTSUdpPort"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpInTSDejitter"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpInTSVideoOffset"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpInTSRowStatus"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpInJp2kEnableState"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpInStatisticsReset"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpInStatisticsValidPackets"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpInStatisticsMissingPackets"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpInStatisticsFixedPackets"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpInStatisticsDuplicatePackets"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpInStatisticsReorderedPackets"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpInStatisticsCrcReset"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpInStatisticsCrcErrors1min"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpInStatisticsCrcErrors1Hour"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpInStatisticsCrcErrors1Day"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpInFecConfigMode"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpInFecConfigColumnIpAddress"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpInFecConfigColumnUdpPort"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpInFecConfigRowIpAddress"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpInFecConfigRowUdpPort"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpInFecStatusColumnPresent"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpInFecStatusRowPresent"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpInFecStatusFecColumnDepth"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpInFecStatusFecRowLength"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpInFecStatusColumnOverhead"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpInFecStatusRowOverhead"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpInFecStatusTotalOverhead"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpInFecStatusLatency"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpInHitlessMode"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpInHitlessWindowPackets"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpInHitlessDelay"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutTSActive"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutTSGbePortType"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutTSRowStatus"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutJp2kEnableState"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutJp2kConfigVideoRate"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutJp2kConfigMaxStreamBitRate"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutJp2kConfigChromaWeight"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutJp2kConfigVitcEnable"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutJp2kConfigViiEnable"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutJp2kConfigAfdEnable"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutJp2kConfigTeletextBEnable"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutJp2kConfigCCEnable"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutJp2kConfigEncapsulationType"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutAdvancedVlanEnable"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutAdvancedVlanId"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutAdvancedVlanPriority"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutAdvancedTtl"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutAdvancedTos"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutAdvancedSourceIpAddress"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutAdvancedSourceUdpPort"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutFecMode"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutFecSendingArrangement"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutFecRowLength"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutFecColumnDepth"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutFecOverheadColumn"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutFecOverheadRow"), ("SAEUROPE-DCM-MIB", "dcmIpgwSdiOutTSSrcRef"), ("SAEUROPE-DCM-MIB", "dcmIpgwSdiOutTSSrcPort"), ("SAEUROPE-DCM-MIB", "dcmIpgwSdiOutTSSrcBoard"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutFecDestinationColIpAddressA"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutFecDestinationColUdpPortA"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutFecDestinationRowIpAddressA"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutFecDestinationRowUdpPortA"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutFecDestinationColIpAddressB"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutFecDestinationColUdpPortB"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutFecDestinationRowIpAddressB"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutFecDestinationRowUdpPortB"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutTSDestinationIpAddressA"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutTSDestinationUdpPortA"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutTSDestinationIpAddressB"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutTSDestinationUdpPortB"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutFecOverheadTotal"), ("SAEUROPE-DCM-MIB", "dcmIpgwSdiOutTSActive"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutTSSrcBoard"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutTSSrcPort"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutAdvancedUseSourceAddress"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutJp2kConfigTrans525F2Line"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutJp2kConfigTrans525F1Line"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutJp2kConfigTrans625F2Line"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutJp2kConfigTrans625F1Line"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutJp2kConfigVPSEnable"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutTSSrcRef"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpInStatisticsOutOfRangePackets"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutJp2kAudioPair2Enable"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutJp2kAudioPair1Enable"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutJp2kAudioPair1Present"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutJp2kAudioPair6Present"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutJp2kAudioPair7Enable"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutJp2kAudioPair7Present"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutJp2kAudioPair8Enable"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutJp2kAudioPair8Present"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutJp2kAudioPair4Enable"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutJp2kAudioPair4Present"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutJp2kAudioPair5Enable"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutJp2kAudioPair5Present"), ("SAEUROPE-DCM-MIB", "dcmIpgwAsiInConfigMaxAllowedVideoFormat"), ("SAEUROPE-DCM-MIB", "dcmIpgwAsiInConfigUserName"), ("SAEUROPE-DCM-MIB", "dcmIpgwAsiInConfigVideoOffset"), ("SAEUROPE-DCM-MIB", "dcmIpgwAsiInFormatFramerate"), ("SAEUROPE-DCM-MIB", "dcmIpgwAsiInFormatVideoformat"), ("SAEUROPE-DCM-MIB", "dcmIpgwAsiInFormatAspectRatio"), ("SAEUROPE-DCM-MIB", "dcmIpgwAsiInFormatNbrOfLinesPerFrame"), ("SAEUROPE-DCM-MIB", "dcmIpgwAsiInFormatFrameBuildUp"), ("SAEUROPE-DCM-MIB", "dcmIpgwAsiInStatisticsReset"), ("SAEUROPE-DCM-MIB", "dcmIpgwAsiInStatisticsCrcErrors1Min"), ("SAEUROPE-DCM-MIB", "dcmIpgwAsiInStatisticsCrcErrors1Hour"), ("SAEUROPE-DCM-MIB", "dcmIpgwAsiInStatisticsCrcErrors1Day"), ("SAEUROPE-DCM-MIB", "dcmIpgwAsiOutTSActive"), ("SAEUROPE-DCM-MIB", "dcmIpgwASIOutJp2kConfigVideoRate"), ("SAEUROPE-DCM-MIB", "dcmIpgwASIOutJp2kConfigMaxStreamBitRate"), ("SAEUROPE-DCM-MIB", "dcmIpgwASIOutJp2kConfigChromaWeight"), ("SAEUROPE-DCM-MIB", "dcmIpgwASIOutJp2kConfigVitcEnable"), ("SAEUROPE-DCM-MIB", "dcmIpgwASIOutJp2kConfigViiEnable"), ("SAEUROPE-DCM-MIB", "dcmIpgwASIOutJp2kConfigAfdEnable"), ("SAEUROPE-DCM-MIB", "dcmIpgwASIOutJp2kConfigTeletextBEnable"), ("SAEUROPE-DCM-MIB", "dcmIpgwASIOutJp2kConfigCCEnable"), ("SAEUROPE-DCM-MIB", "dcmIpgwASIOutJp2kConfigVPSEnable"), ("SAEUROPE-DCM-MIB", "dcmIpgwASIOutJp2kConfigTrans625F1Line"), ("SAEUROPE-DCM-MIB", "dcmIpgwASIOutJp2kConfigTrans625F2Line"), ("SAEUROPE-DCM-MIB", "dcmIpgwASIOutJp2kConfigTrans525F1Line"), ("SAEUROPE-DCM-MIB", "dcmIpgwASIOutJp2kConfigTrans525F2Line"), ("SAEUROPE-DCM-MIB", "dcmIpgwASIOutJp2kAudioPair1Enable"), ("SAEUROPE-DCM-MIB", "dcmIpgwASIOutJp2kAudioPair1Present"), ("SAEUROPE-DCM-MIB", "dcmIpgwASIOutJp2kAudioPair2Enable"), ("SAEUROPE-DCM-MIB", "dcmIpgwASIOutJp2kAudioPair2Present"), ("SAEUROPE-DCM-MIB", "dcmIpgwASIOutJp2kAudioPair3Enable"), ("SAEUROPE-DCM-MIB", "dcmIpgwASIOutJp2kAudioPair3Present"), ("SAEUROPE-DCM-MIB", "dcmIpgwASIOutJp2kAudioPair4Enable"), ("SAEUROPE-DCM-MIB", "dcmIpgwASIOutJp2kAudioPair4Present"), ("SAEUROPE-DCM-MIB", "dcmIpgwASIOutJp2kAudioPair5Enable"), ("SAEUROPE-DCM-MIB", "dcmIpgwASIOutJp2kAudioPair5Present"), ("SAEUROPE-DCM-MIB", "dcmIpgwASIOutJp2kAudioPair6Enable"), ("SAEUROPE-DCM-MIB", "dcmIpgwASIOutJp2kAudioPair6Present"), ("SAEUROPE-DCM-MIB", "dcmIpgwASIOutJp2kAudioPair7Enable"), ("SAEUROPE-DCM-MIB", "dcmIpgwASIOutJp2kAudioPair7Present"), ("SAEUROPE-DCM-MIB", "dcmIpgwASIOutJp2kAudioPair8Enable"), ("SAEUROPE-DCM-MIB", "dcmIpgwASIOutJp2kAudioPair8Present"), ("SAEUROPE-DCM-MIB", "dcmIpgwSystemGenlockEnableState"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpInFormatFramerate"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpInFormatVideoformat"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpInFormatAspectRatio"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpInFormatNbrOfLinesPerFrame"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpInFormatFrameBuildUp"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutJp2kAudioPair6Enable"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutJp2kAudioPair2Present"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutJp2kAudioPair3Enable"), ("SAEUROPE-DCM-MIB", "dcmIpgwRtpOutJp2kAudioPair3Present"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dcmIpgwGroup = dcmIpgwGroup.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwGroup.setDescription('Description.')
dcmMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3))
dcmSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1))
dcmMuxSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1))
dcmInputTransportStreamTable = MibTable((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 1), )
if mibBuilder.loadTexts: dcmInputTransportStreamTable.setStatus('current')
if mibBuilder.loadTexts: dcmInputTransportStreamTable.setDescription('This table contains the transport streams present at the input\n\t\t\t\tports of the DCM.')
dcmInputTransportStreamEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 1, 1), ).setIndexNames((0, "SAEUROPE-DCM-MIB", "dcmInputTsIndex"))
if mibBuilder.loadTexts: dcmInputTransportStreamEntry.setStatus('current')
if mibBuilder.loadTexts: dcmInputTransportStreamEntry.setDescription('Conceptual row of the dcmInputTransportStreamTable.')
dcmInputTsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100000000, 999999999)))
if mibBuilder.loadTexts: dcmInputTsIndex.setStatus('current')
if mibBuilder.loadTexts: dcmInputTsIndex.setDescription('Identification of the input transport stream.')
dcmInputTsBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmInputTsBoard.setStatus('current')
if mibBuilder.loadTexts: dcmInputTsBoard.setDescription('Identification of the board where the service is coming in.')
dcmInputTsPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmInputTsPort.setStatus('current')
if mibBuilder.loadTexts: dcmInputTsPort.setDescription('Identification of the port where the service is coming in.\n\t\t\t\tFor ASI boards port numbers range from 1..10\n\t\t\t\tFor GbE boards port numbers can range from 1..4.\n\t\t\t\tOnly 1 and 3 can be used (2 and 4 are backup ports)')
dcmInputTsUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmInputTsUdpPort.setStatus('current')
if mibBuilder.loadTexts: dcmInputTsUdpPort.setDescription('For an input TS on a GbE board, this is the identification of the\n\t\t\t\tUDP port. For an input TS on an ASI board this object will be 0.')
dcmInputTsIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 1, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmInputTsIpAddress.setStatus('current')
if mibBuilder.loadTexts: dcmInputTsIpAddress.setDescription('For an input transport stream on a GbE board, this is the destination\n\t\t\t\t(multicast) IP address of the stream containing the input\n\t\t\t\tservice. For an input TS on an ASI board this object will be 0.0.0.0.')
dcmInputTsSrcIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 1, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmInputTsSrcIpAddress.setStatus('current')
if mibBuilder.loadTexts: dcmInputTsSrcIpAddress.setDescription('For an input transport stream on a GbE board, this is the\n\t\t\t\tsource IP address of the stream containing the input\n\t\t\t\tservice. If the source IP address of a GbE input transport\n\t\t\t\tstream is not known, or when the input transport stream\n\t\t\t\tarrives on an ASI board, then the IP address 0.0.0.0 will\n\t\t\t\tbe returned.')
dcmConfigInputTsTable = MibTable((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 2), )
if mibBuilder.loadTexts: dcmConfigInputTsTable.setStatus('current')
if mibBuilder.loadTexts: dcmConfigInputTsTable.setDescription('This table contains the transport streams present at the input\n\t\t\t\tports of the DCM, and allows preconfiguration of input streams.')
dcmConfigInputTsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 2, 1), ).setIndexNames((0, "SAEUROPE-DCM-MIB", "dcmCfgInputTsBoard"), (0, "SAEUROPE-DCM-MIB", "dcmCfgInputTsPort"), (0, "SAEUROPE-DCM-MIB", "dcmCfgInputTsUdpPort"), (0, "SAEUROPE-DCM-MIB", "dcmCfgInputTsIpAddress"))
if mibBuilder.loadTexts: dcmConfigInputTsEntry.setStatus('current')
if mibBuilder.loadTexts: dcmConfigInputTsEntry.setDescription('Conceptual row of the dcmConfigInputTsTable.')
dcmCfgInputTsBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: dcmCfgInputTsBoard.setStatus('current')
if mibBuilder.loadTexts: dcmCfgInputTsBoard.setDescription('Identification of the board where the service is coming in.')
dcmCfgInputTsPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)))
if mibBuilder.loadTexts: dcmCfgInputTsPort.setStatus('current')
if mibBuilder.loadTexts: dcmCfgInputTsPort.setDescription('Identification of the port where the service is coming in.\n\t\t\t\tFor ASI boards port numbers range from 1..10\n\t\t\t\tFor GbE boards port numbers can range from 1..4.\n\t\t\t\tOnly 1 and 3 can be used (2 and 4 are backup ports)')
dcmCfgInputTsUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: dcmCfgInputTsUdpPort.setStatus('current')
if mibBuilder.loadTexts: dcmCfgInputTsUdpPort.setDescription('For an input TS on a GbE board, this is the identification of the\n\t\t\t\tUDP port. For an input TS on an ASI board, specify 0.')
dcmCfgInputTsIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 2, 1, 4), IpAddress())
if mibBuilder.loadTexts: dcmCfgInputTsIpAddress.setStatus('current')
if mibBuilder.loadTexts: dcmCfgInputTsIpAddress.setDescription('For an input transport stream on a GbE board, this is the destination\n\t\t\t\t(multicast) IP address of the stream containing the input\n\t\t\t\tservice. For an input TS on an ASI board, specify 0.0.0.0.')
dcmCfgInputTsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100000000, 999999999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmCfgInputTsIndex.setStatus('current')
if mibBuilder.loadTexts: dcmCfgInputTsIndex.setDescription('Identification of the input transport stream.')
dcmCfgInputTsSrcIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 2, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmCfgInputTsSrcIpAddress.setStatus('current')
if mibBuilder.loadTexts: dcmCfgInputTsSrcIpAddress.setDescription('For an input transport stream on a GbE board, this is the\n\t\t\t\tsource IP address of the stream containing the input\n\t\t\t\tservice(s). If the source IP address of a GbE input transport\n\t\t\t\tstream is not known, or when the input transport stream\n\t\t\t\tarrives on an ASI board, then the IP address 0.0.0.0 will\n\t\t\t\tbe returned.')
dcmCfgInputTsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 2, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcmCfgInputTsRowStatus.setStatus('current')
if mibBuilder.loadTexts: dcmCfgInputTsRowStatus.setDescription('Rowstatus column that allows to preconfigure an input transport stream.\n\t\t\t\tCan only support one-shot creation and deletion (createAndGo(4)/destroy(6))\n\t\t\t\tSNMP UNDO of a destroy might fail.\n\t\t\t\t')
dcmCfgInputTsState = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("present", 1), ("notPresent", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmCfgInputTsState.setStatus('current')
if mibBuilder.loadTexts: dcmCfgInputTsState.setDescription('State of the input transport stream, based on TS-Loss alarm.')
dcmOutputTransportStreamTable = MibTable((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 3), )
if mibBuilder.loadTexts: dcmOutputTransportStreamTable.setStatus('current')
if mibBuilder.loadTexts: dcmOutputTransportStreamTable.setDescription('Table with the output transport streams. This table contains both\n\t\t\t\tactual and preconfigured transport streams.')
dcmOutputTransportStreamEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 3, 1), ).setIndexNames((0, "SAEUROPE-DCM-MIB", "dcmOutputTsIndex"))
if mibBuilder.loadTexts: dcmOutputTransportStreamEntry.setStatus('current')
if mibBuilder.loadTexts: dcmOutputTransportStreamEntry.setDescription('Conceptual row of the dcmOutputTransportStreamTable.')
dcmOutputTsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100000000, 999999999)))
if mibBuilder.loadTexts: dcmOutputTsIndex.setStatus('current')
if mibBuilder.loadTexts: dcmOutputTsIndex.setDescription('Identification of the outgoing transport stream.')
dcmOutputTsBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmOutputTsBoard.setStatus('current')
if mibBuilder.loadTexts: dcmOutputTsBoard.setDescription('Identification of the board where output transport stream is\n\t\t\t\tlocated.')
dcmOutputTsPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmOutputTsPort.setStatus('current')
if mibBuilder.loadTexts: dcmOutputTsPort.setDescription('Identification of the outgoing port.')
dcmOutputTsUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmOutputTsUdpPort.setStatus('current')
if mibBuilder.loadTexts: dcmOutputTsUdpPort.setDescription('Destination UDP port in case of a GbE stream. This object will be 0\n\t\t\t\tfor ASI streams.')
dcmOutputTsIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 3, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmOutputTsIpAddress.setStatus('current')
if mibBuilder.loadTexts: dcmOutputTsIpAddress.setDescription('Destination IP address in case of a GbE stream. This object will be\n\t\t\t\t0.0.0.0 for ASI streams.')
dcmOutputTsTransportStreamId = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmOutputTsTransportStreamId.setStatus('current')
if mibBuilder.loadTexts: dcmOutputTsTransportStreamId.setDescription('For GbE transport streams, the transport stream ID (TSID) of the\n\t\t\t\toutput transport stream. For ASI transport streams there is no\n\t\t\t\tinstance of this object.')
dcmOutputTsOriginalNetworkId = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmOutputTsOriginalNetworkId.setStatus('current')
if mibBuilder.loadTexts: dcmOutputTsOriginalNetworkId.setDescription('For GbE transport streams, the Original Network ID (ONID) of the\n\t\t\t\toutput transport stream. For ASI transport streams there is no\n\t\t\t\tinstance of this object.')
dcmOutputTsStandard = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 5, 6, 7))).clone(namedValues=NamedValues(("transparent", 1), ("forceUpLink", 5), ("forceVideo", 6), ("forceAudio3", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmOutputTsStandard.setStatus('current')
if mibBuilder.loadTexts: dcmOutputTsStandard.setDescription('Transport stream setting - PMT generation standard.\n\t\t\t\tValues between transparent and forceUpLink result in undefined behaviour.')
dcmOutputTsActive = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("notActive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmOutputTsActive.setStatus('current')
if mibBuilder.loadTexts: dcmOutputTsActive.setDescription('Transport stream active or not.')
dcmOutputTsTransportStreamBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 3, 1, 10), Integer32()).setUnits('kbit/s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmOutputTsTransportStreamBitRate.setStatus('current')
if mibBuilder.loadTexts: dcmOutputTsTransportStreamBitRate.setDescription('Transport stream bit rate.')
dcmConfigOutputTsTable = MibTable((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 4), )
if mibBuilder.loadTexts: dcmConfigOutputTsTable.setStatus('current')
if mibBuilder.loadTexts: dcmConfigOutputTsTable.setDescription('Table with the transport streams defined at the output ports of\n\t\t\t\tthe DCM device. This table contains both regular transport streams\n\t\t\t\tand preconfigured transport streams.')
dcmConfigOutputTsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 4, 1), ).setIndexNames((0, "SAEUROPE-DCM-MIB", "dcmCfgOutputTsBoard"), (0, "SAEUROPE-DCM-MIB", "dcmCfgOutputTsPort"), (0, "SAEUROPE-DCM-MIB", "dcmCfgOutputTsUdpPort"), (0, "SAEUROPE-DCM-MIB", "dcmCfgOutputTsIpAddress"))
if mibBuilder.loadTexts: dcmConfigOutputTsEntry.setStatus('current')
if mibBuilder.loadTexts: dcmConfigOutputTsEntry.setDescription('.')
dcmCfgOutputTsBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: dcmCfgOutputTsBoard.setStatus('current')
if mibBuilder.loadTexts: dcmCfgOutputTsBoard.setDescription('Identification of the board where output transportstream is\n\t\t\t\tlocated.')
dcmCfgOutputTsPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)))
if mibBuilder.loadTexts: dcmCfgOutputTsPort.setStatus('current')
if mibBuilder.loadTexts: dcmCfgOutputTsPort.setDescription('Identification of the outgoing port.')
dcmCfgOutputTsUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: dcmCfgOutputTsUdpPort.setStatus('current')
if mibBuilder.loadTexts: dcmCfgOutputTsUdpPort.setDescription('Destination UDP port in case of GbE stream, and 0 for an ASI\n\t\t\t\tstream.')
dcmCfgOutputTsIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 4, 1, 4), IpAddress())
if mibBuilder.loadTexts: dcmCfgOutputTsIpAddress.setStatus('current')
if mibBuilder.loadTexts: dcmCfgOutputTsIpAddress.setDescription('Destination IP address in case of GbE stream, and 0.0.0.0 for\n\t\t\t\tan ASI stream.')
dcmCfgOutputTsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100000000, 999999999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmCfgOutputTsIndex.setStatus('current')
if mibBuilder.loadTexts: dcmCfgOutputTsIndex.setDescription('Transport stream index of the output transport stream\n\t\t\t\t(dcmTsIndex).')
dcmCfgOutputTsTransportStreamId = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcmCfgOutputTsTransportStreamId.setStatus('current')
if mibBuilder.loadTexts: dcmCfgOutputTsTransportStreamId.setDescription('For GbE transpor streams, the transport stream ID (TSID) of the\n\t\t\t\toutput transport stream. For ASI transport streams there is no\n\t\t\t\tinstance of this object.')
dcmCfgOutputTsOriginalNetworkId = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcmCfgOutputTsOriginalNetworkId.setStatus('current')
if mibBuilder.loadTexts: dcmCfgOutputTsOriginalNetworkId.setDescription('For GbE transport streams, the Original Network ID (ONID) of the\n\t\t\t\toutput transport stream. For ASI transport streams there is no\n\t\t\t\tinstance of this object.')
dcmCfgOutputTsStandard = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("transparent", 1), ("dvb", 2), ("atsc", 3), ("motorola", 4), ("forceUpLink", 5), ("forceVideo", 6), ("forceAudio3", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcmCfgOutputTsStandard.setStatus('current')
if mibBuilder.loadTexts: dcmCfgOutputTsStandard.setDescription('Transport stream setting - PMT generation standard.')
dcmCfgOutputTsActive = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("notActive", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcmCfgOutputTsActive.setStatus('current')
if mibBuilder.loadTexts: dcmCfgOutputTsActive.setDescription('Transport stream active or not.')
dcmCfgOutputTsTransportStreamBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 4, 1, 10), Integer32()).setUnits('kbit/s').setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcmCfgOutputTsTransportStreamBitRate.setStatus('current')
if mibBuilder.loadTexts: dcmCfgOutputTsTransportStreamBitRate.setDescription('Transport stream bit rate.')
dcmCfgOutputTsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 4, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcmCfgOutputTsRowStatus.setStatus('current')
if mibBuilder.loadTexts: dcmCfgOutputTsRowStatus.setDescription("Rowstatus column to create an outgoing transport stream.\n\t\t\t\tSupports only one-shot creation and deletion (createAndGo(4)/destroy(6))\n\t\t\t\tSNMP UNDO of a destroy might fail.\n\t\t\t\tCurrent defaults for omitted columns in createAndGo:  40Mbit, notActive, transparent, ONID=TSID=1\n\t\t\t\tBut don't rely on these defaults.\n\t\t\t\t")
dcmConfigServiceTable = MibTable((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 5), )
if mibBuilder.loadTexts: dcmConfigServiceTable.setStatus('current')
if mibBuilder.loadTexts: dcmConfigServiceTable.setDescription("Table with the services routed from input to output. This table\n\t\t\t\tcontains one row for each service present at one of the DCM's\n\t\t\t\toutput ports. If the same services is passed two or more times to \n\t\t\t\tone output transport stream only the first is shown. In that case\n\t\t\t\tit will not be possible to update the configuration for that service.\n\t\t\t\t")
dcmConfigServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 5, 1), ).setIndexNames((0, "SAEUROPE-DCM-MIB", "dcmCfgSrvInputTsIndex"), (0, "SAEUROPE-DCM-MIB", "dcmCfgSrvInputServiceID"), (0, "SAEUROPE-DCM-MIB", "dcmCfgSrvOutputTsIndex"))
if mibBuilder.loadTexts: dcmConfigServiceEntry.setStatus('current')
if mibBuilder.loadTexts: dcmConfigServiceEntry.setDescription('Conceptual row of dcmConfigServiceTable')
dcmCfgSrvInputTsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100000000, 999999999)))
if mibBuilder.loadTexts: dcmCfgSrvInputTsIndex.setStatus('current')
if mibBuilder.loadTexts: dcmCfgSrvInputTsIndex.setDescription('Identification of the stream where the service is coming in.')
dcmCfgSrvInputServiceID = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: dcmCfgSrvInputServiceID.setStatus('current')
if mibBuilder.loadTexts: dcmCfgSrvInputServiceID.setDescription('The service ID (PAT programme number) of the input service.')
dcmCfgSrvOutputTsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100000000, 999999999)))
if mibBuilder.loadTexts: dcmCfgSrvOutputTsIndex.setStatus('current')
if mibBuilder.loadTexts: dcmCfgSrvOutputTsIndex.setDescription('Identification of the stream where the service is going to.')
dcmCfgSrvForceOutputServiceID = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 5, 1, 4), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcmCfgSrvForceOutputServiceID.setStatus('current')
if mibBuilder.loadTexts: dcmCfgSrvForceOutputServiceID.setDescription('Overrule the incoming service ID.')
dcmCfgSrvOutputServiceID = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcmCfgSrvOutputServiceID.setStatus('current')
if mibBuilder.loadTexts: dcmCfgSrvOutputServiceID.setDescription('Output service ID (PAT programme number) of the stream. Only settable if dcmCfgSrvForceOutputServiceID is true')
dcmCfgSrvForceOutputServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 5, 1, 6), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcmCfgSrvForceOutputServiceName.setStatus('current')
if mibBuilder.loadTexts: dcmCfgSrvForceOutputServiceName.setDescription('Overrule the incoming service name.')
dcmCfgSrvOutputServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 5, 1, 7), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcmCfgSrvOutputServiceName.setStatus('current')
if mibBuilder.loadTexts: dcmCfgSrvOutputServiceName.setDescription('Overrule the incoming service name. Only settable if dcmCfgSrvForceOutputServiceName is true. You can put here international characters and markup,\n\t\t\t\tif you use the correct DVB SI bytes (charset and so on)')
dcmCfgSrvRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 5, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcmCfgSrvRowStatus.setStatus('current')
if mibBuilder.loadTexts: dcmCfgSrvRowStatus.setDescription("Rowstatus column to create a service configuration\n\t\t\t\tCan only support one-shot creation and deletion (createAndGo(4)/destroy(6))\n\t\t\t\tSNMP UNDO of a destroy might fail.\n\t\t\t\tCurrent defaults for omitted columns in createAndGo: both Force flags false \n\t\t\t\tBut don't rely on these defaults.\n\t\t\t\t")
dcmCfgSrvState = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 5, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("present", 1), ("notPresent", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmCfgSrvState.setStatus('current')
if mibBuilder.loadTexts: dcmCfgSrvState.setDescription('State of the output service, based on Service-loss-at-output alarm.')
dcmTsAutoPassTable = MibTable((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 6), )
if mibBuilder.loadTexts: dcmTsAutoPassTable.setStatus('current')
if mibBuilder.loadTexts: dcmTsAutoPassTable.setDescription('Table with the auto pass configuration. This in an output TS feature.\n\t\t\t\tSee the DCM manual for more info on the applications and limitations of this feature.')
dcmTsAutoPassEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 6, 1), ).setIndexNames((0, "SAEUROPE-DCM-MIB", "dcmOutputTsIndex"), (0, "SAEUROPE-DCM-MIB", "dcmInputTsIndex"))
if mibBuilder.loadTexts: dcmTsAutoPassEntry.setStatus('current')
if mibBuilder.loadTexts: dcmTsAutoPassEntry.setDescription('\n\t\t\t\tConceptual row of the dcmTsAutoPassTable.\n\t\t\t\tA number of auto pass rules can be defined for an output TS (MPTS pass through), \n\t\t\t\tby creating a row with index dcmOutputTsIndex,dcmInputTsIndex.  These rules \n\t\t\t\tspecify from which input TS all Services, EMMs and/or unreferenced PIDs should \n\t\t\t\tbe passed to an output TS.\n\t\t\t\tDisclaimers:\n\t\t\t\t1) Only one AutoPass input TS is supported for a specific output TS.  If rows \n\t\t\t\tare created with the same dcmOutputTsIndex, but with different dcmInputTsIndex, \n\t\t\t\tthe behaviour is undefined.\n\t\t\t\t2) If all three flags of a dcmTsAutoPassEntry are disabled, the behaviour is undefined. \n\t\t\t\tTo remove the autopass settings for dcmTsAutoPassEntry, the row should be destroyed.\n\t\t\t\t3) If dcmInputTsIndex does not exists, it is not guaranteed that an error is returned.\n\t\t\t\t')
dcmTsAutoPassNewServices = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 6, 1, 1), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcmTsAutoPassNewServices.setStatus('current')
if mibBuilder.loadTexts: dcmTsAutoPassNewServices.setDescription('If true, any service detected in the PAT of the Input Ts\n\t\t\t\twill be automatically passed to this OutputTs.\n\t\t\t\tIf you clear this flag, any automatically passed service remains passed.\n\t\t\t\t')
dcmTsAutoPassNewEMMs = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 6, 1, 2), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcmTsAutoPassNewEMMs.setStatus('current')
if mibBuilder.loadTexts: dcmTsAutoPassNewEMMs.setDescription('If true, any emm detected in the CAT of the Input Ts  \n\t\t\t\twill be automatically passed to this OutputTs.\n\t\t\t\tIf you clear this flag, any automatically passed emm remains passed.\n\t\t\t\t')
dcmTsAutoPassUnreferencedPIDs = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 6, 1, 3), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcmTsAutoPassUnreferencedPIDs.setStatus('current')
if mibBuilder.loadTexts: dcmTsAutoPassUnreferencedPIDs.setDescription('If true, any unreferenced pid detected in the Input Ts \n\t\t\t\twill be automatically passed to this OutputTs.\n\t\t\t\tIf you clear this flag, any automatically passed unreferenced pid disappears again.\n\t\t\t\t')
dcmTsAutoPassRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 6, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcmTsAutoPassRowStatus.setStatus('current')
if mibBuilder.loadTexts: dcmTsAutoPassRowStatus.setDescription('Rowstatus column to enable AutoPass.\n\t\t\t\tSupports only one-shot creation and deletion (createAndGo(4)/destroy(6))\n\t\t\t\tSNMP UNDO of a destroy might fail.\n\t\t\t\t')
dcmConfigTransparentOutputTsTable = MibTable((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 7), )
if mibBuilder.loadTexts: dcmConfigTransparentOutputTsTable.setStatus('current')
if mibBuilder.loadTexts: dcmConfigTransparentOutputTsTable.setDescription('Table with the transparent transport streams defined at the output\n\t\t\t\tports of the DCM device. This table contains both regular transparent \n\t\t\t\ttransport streams and preconfigured transparent transport streams.')
dcmConfigTransparentOutputTsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 7, 1), ).setIndexNames((0, "SAEUROPE-DCM-MIB", "dcmCfgTransparentOutputTsBoard"), (0, "SAEUROPE-DCM-MIB", "dcmCfgTransparentOutputTsPort"), (0, "SAEUROPE-DCM-MIB", "dcmCfgTransparentOutputTsUdpPort"), (0, "SAEUROPE-DCM-MIB", "dcmCfgTransparentOutputTsIpAddress"), (0, "SAEUROPE-DCM-MIB", "dcmCfgTransparentSourceTsIndex"))
if mibBuilder.loadTexts: dcmConfigTransparentOutputTsEntry.setStatus('current')
if mibBuilder.loadTexts: dcmConfigTransparentOutputTsEntry.setDescription('.')
dcmCfgTransparentOutputTsBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: dcmCfgTransparentOutputTsBoard.setStatus('current')
if mibBuilder.loadTexts: dcmCfgTransparentOutputTsBoard.setDescription('Identification of the board where output transportstream is\n\t\t\t\tlocated.')
dcmCfgTransparentOutputTsPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)))
if mibBuilder.loadTexts: dcmCfgTransparentOutputTsPort.setStatus('current')
if mibBuilder.loadTexts: dcmCfgTransparentOutputTsPort.setDescription('Identification of the outgoing port.')
dcmCfgTransparentOutputTsUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: dcmCfgTransparentOutputTsUdpPort.setStatus('current')
if mibBuilder.loadTexts: dcmCfgTransparentOutputTsUdpPort.setDescription('Destination UDP port in case of GbE stream, and 0 for an ASI\n\t\t\t\tstream.')
dcmCfgTransparentOutputTsIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 7, 1, 4), IpAddress())
if mibBuilder.loadTexts: dcmCfgTransparentOutputTsIpAddress.setStatus('current')
if mibBuilder.loadTexts: dcmCfgTransparentOutputTsIpAddress.setDescription('Destination IP address in case of GbE stream, and 0.0.0.0 for\n\t\t\t\tan ASI stream.')
dcmCfgTransparentSourceTsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100000000, 999999999)))
if mibBuilder.loadTexts: dcmCfgTransparentSourceTsIndex.setStatus('current')
if mibBuilder.loadTexts: dcmCfgTransparentSourceTsIndex.setDescription('Transport stream index of the source transport stream\n\t\t\t\t(dcmTsIndex).')
dcmCfgTransparentOutputTsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 7, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100000000, 999999999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmCfgTransparentOutputTsIndex.setStatus('current')
if mibBuilder.loadTexts: dcmCfgTransparentOutputTsIndex.setDescription('Transport stream index of the output transport stream\n\t\t\t\t(dcmTsIndex).')
dcmCfgTransparentOutputTsActive = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("notActive", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcmCfgTransparentOutputTsActive.setStatus('current')
if mibBuilder.loadTexts: dcmCfgTransparentOutputTsActive.setDescription('Transport stream active or not.')
dcmCfgTransparentOutputTsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 7, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcmCfgTransparentOutputTsRowStatus.setStatus('current')
if mibBuilder.loadTexts: dcmCfgTransparentOutputTsRowStatus.setDescription('Rowstatus column to create an outgoing transport stream.\n\t\t\t\tSupports only one-shot creation and deletion (createAndGo(4)/destroy(6))\n\t\t\t\tSNMP UNDO of a destroy might fail.\n\t\t\t\t')
dcmServiceBackup = MibIdentifier((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 8))
dcmServiceBackupByBoardTable = MibTable((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 8, 1), )
if mibBuilder.loadTexts: dcmServiceBackupByBoardTable.setStatus('current')
if mibBuilder.loadTexts: dcmServiceBackupByBoardTable.setDescription("Trigger service backup or revert to the main service for all services on a board.\n\t\t\t\tIt is not possible to read the status: it will always return 'unknown'.")
dcmServiceBackupByBoardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 8, 1, 1), ).setIndexNames((0, "SAEUROPE-DCM-MIB", "dcmServiceBackupByBoardBoard"))
if mibBuilder.loadTexts: dcmServiceBackupByBoardEntry.setStatus('current')
if mibBuilder.loadTexts: dcmServiceBackupByBoardEntry.setDescription('.')
dcmServiceBackupByBoardBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: dcmServiceBackupByBoardBoard.setStatus('current')
if mibBuilder.loadTexts: dcmServiceBackupByBoardBoard.setDescription('Identification of the board where service backup can be activated or reverted.')
dcmServiceBackupByBoardStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("main", 2), ("backup", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmServiceBackupByBoardStatus.setStatus('current')
if mibBuilder.loadTexts: dcmServiceBackupByBoardStatus.setDescription('  Service backup mode.\n\t\t\t\t')
dcmServiceBackupByTsTable = MibTable((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 8, 2), )
if mibBuilder.loadTexts: dcmServiceBackupByTsTable.setStatus('current')
if mibBuilder.loadTexts: dcmServiceBackupByTsTable.setDescription("Trigger service backup or revert to the main service for all services in a TS.\n\t\t\t\tIt is not possible to read the status: it will always return 'unknown'.")
dcmServiceBackupByTsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 8, 2, 1), ).setIndexNames((0, "SAEUROPE-DCM-MIB", "dcmServiceBackupByTsTsIndex"))
if mibBuilder.loadTexts: dcmServiceBackupByTsEntry.setStatus('current')
if mibBuilder.loadTexts: dcmServiceBackupByTsEntry.setDescription('.')
dcmServiceBackupByTsTsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 8, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100000000, 999999999)))
if mibBuilder.loadTexts: dcmServiceBackupByTsTsIndex.setStatus('current')
if mibBuilder.loadTexts: dcmServiceBackupByTsTsIndex.setDescription('Identification of the TS where service backup can be activated or reverted.')
dcmServiceBackupByTsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 8, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("main", 2), ("backup", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmServiceBackupByTsStatus.setStatus('current')
if mibBuilder.loadTexts: dcmServiceBackupByTsStatus.setDescription('  Service backup mode.\n\t\t\t\t')
dcmServiceBackupSettingsTable = MibTable((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 8, 3), )
if mibBuilder.loadTexts: dcmServiceBackupSettingsTable.setStatus('current')
if mibBuilder.loadTexts: dcmServiceBackupSettingsTable.setDescription('Table with settings for service backup.')
dcmServiceBackupSettingsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 8, 3, 1), ).setIndexNames((0, "SAEUROPE-DCM-MIB", "dcmSrvBuSettingsTsIndex"), (0, "SAEUROPE-DCM-MIB", "dcmSrvBuSettingsServiceID"))
if mibBuilder.loadTexts: dcmServiceBackupSettingsEntry.setStatus('current')
if mibBuilder.loadTexts: dcmServiceBackupSettingsEntry.setDescription('Conceptual row of dcmServiceBackupSettingsTable')
dcmSrvBuSettingsTsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 8, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100000000, 999999999)))
if mibBuilder.loadTexts: dcmSrvBuSettingsTsIndex.setStatus('current')
if mibBuilder.loadTexts: dcmSrvBuSettingsTsIndex.setDescription('Identification of the transport stream of the output service.')
dcmSrvBuSettingsServiceID = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 8, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: dcmSrvBuSettingsServiceID.setStatus('current')
if mibBuilder.loadTexts: dcmSrvBuSettingsServiceID.setDescription('The service ID (PAT programme number) of the output service.')
dcmSrvBuSettingsBehavior = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 8, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("nonRevertive", 1), ("revertive", 2), ("floating", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmSrvBuSettingsBehavior.setStatus('current')
if mibBuilder.loadTexts: dcmSrvBuSettingsBehavior.setDescription('Behavior of the backup:\n\t\t\t\t- non revertive: when switched to lower priority backup service, \n\t\t\t\t                 manual switch is needed to return to higher priority input service.\n\t\t\t\t- revertive: when switched to lower priority backup service, \n\t\t\t\t             return to higher priority input service when one is present.\n\t\t\t\t- floating: when switched to lower priority backup service,\n\t\t\t\t            return to higher priority input service when one is present and \n\t\t\t\t            the current active input service is not present.')
dcmSrvBuSettingsToBackupDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 8, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmSrvBuSettingsToBackupDelay.setStatus('current')
if mibBuilder.loadTexts: dcmSrvBuSettingsToBackupDelay.setDescription('The delay in seconds before a lower priority backup service is chosen when\n\t\t\t\tthe active service is not present anymore.')
dcmSrvBuSettingsToMainDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 8, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmSrvBuSettingsToMainDelay.setStatus('current')
if mibBuilder.loadTexts: dcmSrvBuSettingsToMainDelay.setDescription('The delay in seconds before a higher priority backup service is chosen when:\n\t\t\t\t- revertive: a higher priority input service becomes present \n\t\t\t\t- floating: the active service is not present anymore \n\t\t\t\t            and a higher priority input service is present.')
dcmSrvBuSettingsState = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 8, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("main", 1), ("backup", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmSrvBuSettingsState.setStatus('current')
if mibBuilder.loadTexts: dcmSrvBuSettingsState.setDescription('Read out the current state and select main \n\t\t\t\t(selecting a backup service must be done in de backup service table,\n\t\t\t\t setting the value to backup will be ignored).')
dcmServiceBackupServicesTable = MibTable((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 8, 4), )
if mibBuilder.loadTexts: dcmServiceBackupServicesTable.setStatus('current')
if mibBuilder.loadTexts: dcmServiceBackupServicesTable.setDescription('Table with list of backup services, the order of the list defines the priority:\n\t\t\t\twhen the main input service is not present anymore, the first backup service will \n\t\t\t\tbe active when present.\n\t\t\t\tRemark: because snmp does not have support for merged in services and alternate\n\t\t\t\t        services, this table does not support back up for them.\n\t\t\t\tAt the moment of writing, the maximum backup services per output service\n\t\t\t\tis 1.')
dcmServiceBackupServicesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 8, 4, 1), ).setIndexNames((0, "SAEUROPE-DCM-MIB", "dcmSrvBuOutputSrvTsIndex"), (0, "SAEUROPE-DCM-MIB", "dcmSrvBuOutputSrvServiceID"), (0, "SAEUROPE-DCM-MIB", "dcmSrvBuBuSrvTsIndex"), (0, "SAEUROPE-DCM-MIB", "dcmSrvBuBuSrvServiceID"))
if mibBuilder.loadTexts: dcmServiceBackupServicesEntry.setStatus('current')
if mibBuilder.loadTexts: dcmServiceBackupServicesEntry.setDescription('Conceptual row of dcmServiceBackupSettingsTable')
dcmSrvBuOutputSrvTsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 8, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100000000, 999999999)))
if mibBuilder.loadTexts: dcmSrvBuOutputSrvTsIndex.setStatus('current')
if mibBuilder.loadTexts: dcmSrvBuOutputSrvTsIndex.setDescription('Identification of the transport stream of the output service.')
dcmSrvBuOutputSrvServiceID = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 8, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: dcmSrvBuOutputSrvServiceID.setStatus('current')
if mibBuilder.loadTexts: dcmSrvBuOutputSrvServiceID.setDescription('The service ID (PAT programme number) of the output service.')
dcmSrvBuBuSrvTsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 8, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100000000, 999999999)))
if mibBuilder.loadTexts: dcmSrvBuBuSrvTsIndex.setStatus('current')
if mibBuilder.loadTexts: dcmSrvBuBuSrvTsIndex.setDescription('Identification of the transport stream of the backup service.')
dcmSrvBuBuSrvServiceID = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 8, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: dcmSrvBuBuSrvServiceID.setStatus('current')
if mibBuilder.loadTexts: dcmSrvBuBuSrvServiceID.setDescription('The service ID (PAT programme number) of the backup service.')
dcmSrvBuBuSrvState = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 8, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("notActive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmSrvBuBuSrvState.setStatus('current')
if mibBuilder.loadTexts: dcmSrvBuBuSrvState.setDescription('Read out the current state and select the backup service by setting the\n\t\t\t\tvalue to active (setting the value to notActive will be ignored).')
dcmSrvBuRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 8, 4, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcmSrvBuRowStatus.setStatus('current')
if mibBuilder.loadTexts: dcmSrvBuRowStatus.setDescription('Adding a row creates a new backup service for the output service.\n\t\t\t\tDeleting the row removes the backup service from the output service.\n\t\t\t\tThe only way to define a higher priority backup service is to delete\n\t\t\t\tthe lower priority backup services, add the new backup services and\n\t\t\t\tadd the lower priority backup services again.')
dcmTsBackup = MibIdentifier((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 9))
dcmTsBackupSettingsTable = MibTable((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 9, 1), )
if mibBuilder.loadTexts: dcmTsBackupSettingsTable.setStatus('current')
if mibBuilder.loadTexts: dcmTsBackupSettingsTable.setDescription('Table with settings for ts backup.')
dcmTsBackupSettingsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 9, 1, 1), ).setIndexNames((0, "SAEUROPE-DCM-MIB", "dcmTsBuSettingsTsIndex"))
if mibBuilder.loadTexts: dcmTsBackupSettingsEntry.setStatus('current')
if mibBuilder.loadTexts: dcmTsBackupSettingsEntry.setDescription('Conceptual row of dcmTsBackupSettingsTable')
dcmTsBuSettingsTsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 9, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100000000, 999999999)))
if mibBuilder.loadTexts: dcmTsBuSettingsTsIndex.setStatus('current')
if mibBuilder.loadTexts: dcmTsBuSettingsTsIndex.setDescription('Identification of the input transport stream that needs \n\t\t\t\tto be backed up.')
dcmTsBuSettingsBuTsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 9, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100000000, 999999999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmTsBuSettingsBuTsIndex.setStatus('current')
if mibBuilder.loadTexts: dcmTsBuSettingsBuTsIndex.setDescription('Identification of the backup transport stream.')
dcmTsBuSettingsBehavior = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 9, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("nonRevertive", 1), ("revertive", 2), ("floating", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmTsBuSettingsBehavior.setStatus('current')
if mibBuilder.loadTexts: dcmTsBuSettingsBehavior.setDescription('Behavior of the backup:\n\t\t\t\t- non revertive: when switched to backup ts, \n\t\t\t\t                 manual switch is needed to return to main ts.\n\t\t\t\t- revertive: when switched to backup ts, \n\t\t\t\t             return to main ts when it is present.\n        - floating: when switched to other active ts,\n \t            return to original active ts when one is present and \n \t            the current active ts is not present.')
dcmTsBuSettingsToBackupDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 9, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmTsBuSettingsToBackupDelay.setStatus('current')
if mibBuilder.loadTexts: dcmTsBuSettingsToBackupDelay.setDescription('The delay in seconds before switching to backup when\n\t\t\t\tthe main ts is not present anymore.')
dcmTsBuSettingsToMainDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 9, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmTsBuSettingsToMainDelay.setStatus('current')
if mibBuilder.loadTexts: dcmTsBuSettingsToMainDelay.setDescription('The delay in seconds before switching back to main ts when:\n\t\t\t\t- revertive: main ts becomes present.')
dcmTsBuSettingsState = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 9, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("main", 1), ("backup", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmTsBuSettingsState.setStatus('current')
if mibBuilder.loadTexts: dcmTsBuSettingsState.setDescription('Read out the current state and select a new backup state.')
dcmTsBuSettingsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 9, 1, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcmTsBuSettingsRowStatus.setStatus('current')
if mibBuilder.loadTexts: dcmTsBuSettingsRowStatus.setDescription('Adding a row defines a backup transport stream for \n\t\t\t\ta main transport stream.\n\t\t\t\tDeleting a row indicates that the transport stream will not \n\t\t\t\tbe backed up')
dcmInputServiceTable = MibTable((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 10), )
if mibBuilder.loadTexts: dcmInputServiceTable.setStatus('current')
if mibBuilder.loadTexts: dcmInputServiceTable.setDescription('Table with input service state')
dcmInputServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 10, 1), ).setIndexNames((0, "SAEUROPE-DCM-MIB", "dcmInputSrvTsIndex"), (0, "SAEUROPE-DCM-MIB", "dcmInputSrvServiceID"))
if mibBuilder.loadTexts: dcmInputServiceEntry.setStatus('current')
if mibBuilder.loadTexts: dcmInputServiceEntry.setDescription('Conceptual row of dcmInputServiceTable')
dcmInputSrvTsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100000000, 999999999)))
if mibBuilder.loadTexts: dcmInputSrvTsIndex.setStatus('current')
if mibBuilder.loadTexts: dcmInputSrvTsIndex.setDescription('Identification of the transport stream of the input service.')
dcmInputSrvServiceID = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 10, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: dcmInputSrvServiceID.setStatus('current')
if mibBuilder.loadTexts: dcmInputSrvServiceID.setDescription('The service ID (PAT programme number) of the input service.')
dcmInputSrvName = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 10, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmInputSrvName.setStatus('current')
if mibBuilder.loadTexts: dcmInputSrvName.setDescription('The name of the input service: \n\t\t\t\textra information to find out the services at the input.')
dcmInputSrvState = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("present", 1), ("notPresent", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmInputSrvState.setStatus('current')
if mibBuilder.loadTexts: dcmInputSrvState.setDescription('State of the input service, based on the Service-Loss alarm.')
dcmProcessingServiceTable = MibTable((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 11), )
if mibBuilder.loadTexts: dcmProcessingServiceTable.setStatus('current')
if mibBuilder.loadTexts: dcmProcessingServiceTable.setDescription('Table with mapping of internal reference to usertag of \n\t\t\t\tprocessing services (not at input/output, e.g. for transcoding)')
dcmProcessingServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 11, 1), ).setIndexNames((0, "SAEUROPE-DCM-MIB", "dcmProcessingSrvTsIndex"), (0, "SAEUROPE-DCM-MIB", "dcmProcessingSrvServiceID"))
if mibBuilder.loadTexts: dcmProcessingServiceEntry.setStatus('current')
if mibBuilder.loadTexts: dcmProcessingServiceEntry.setDescription('Conceptual row of dcmProcessingServiceTable')
dcmProcessingSrvTsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100000000, 999999999)))
if mibBuilder.loadTexts: dcmProcessingSrvTsIndex.setStatus('current')
if mibBuilder.loadTexts: dcmProcessingSrvTsIndex.setDescription('Internal Identification of the transport stream of the Processing service.')
dcmProcessingSrvServiceID = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 11, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: dcmProcessingSrvServiceID.setStatus('current')
if mibBuilder.loadTexts: dcmProcessingSrvServiceID.setDescription('Internal service ID of the Processing service.')
dcmProcessingSrvName = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 11, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmProcessingSrvName.setStatus('current')
if mibBuilder.loadTexts: dcmProcessingSrvName.setDescription('The usertag of the Processing service: \n\t\t\t\texternal reference of the Processing service.')
dcmProcessingSrvState = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("present", 1), ("notPresent", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmProcessingSrvState.setStatus('current')
if mibBuilder.loadTexts: dcmProcessingSrvState.setDescription('State of the Processing service, based on the Service-Loss alarm.')
dcmDvbS2InputStreamTable = MibTable((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 12), )
if mibBuilder.loadTexts: dcmDvbS2InputStreamTable.setStatus('current')
if mibBuilder.loadTexts: dcmDvbS2InputStreamTable.setDescription('Table with DvbS2 input stream mapping (ISI to transport stream index)')
dcmDvbS2InputStreamEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 12, 1), ).setIndexNames((0, "SAEUROPE-DCM-MIB", "dcmDvbS2InputStreamTsIndex"))
if mibBuilder.loadTexts: dcmDvbS2InputStreamEntry.setStatus('current')
if mibBuilder.loadTexts: dcmDvbS2InputStreamEntry.setDescription('Conceptual row of dcmDvbS2InputStreamTable')
dcmDvbS2InputStreamTsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100000000, 999999999)))
if mibBuilder.loadTexts: dcmDvbS2InputStreamTsIndex.setStatus('current')
if mibBuilder.loadTexts: dcmDvbS2InputStreamTsIndex.setDescription('Identification of the transport stream of the DvbS2 input stream.')
dcmDvbS2InputStreamISI = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 1, 12, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmDvbS2InputStreamISI.setStatus('current')
if mibBuilder.loadTexts: dcmDvbS2InputStreamISI.setDescription('Input Stream Identifier in a DvbS2 multistream (65535: no multistream).')
dcmTrSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 2))
dcmTrGroupTable = MibTable((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 2, 1), )
if mibBuilder.loadTexts: dcmTrGroupTable.setStatus('current')
if mibBuilder.loadTexts: dcmTrGroupTable.setDescription('The transrater group table keeps an overview of all\n\t\t\t\tdefined transrater groups per board over a DCM.')
dcmTrGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 2, 1, 1), ).setIndexNames((0, "SAEUROPE-DCM-MIB", "dcmTrGroupBoardNumber"), (0, "SAEUROPE-DCM-MIB", "dcmTrGroupPortNumber"), (0, "SAEUROPE-DCM-MIB", "dcmTrGroupId"), (0, "SAEUROPE-DCM-MIB", "dcmTrGroupOutputTs"))
if mibBuilder.loadTexts: dcmTrGroupEntry.setStatus('current')
if mibBuilder.loadTexts: dcmTrGroupEntry.setDescription('A row of the table holds all the objects that characterize\n\t\t\t\tan MPEG program stream.')
dcmTrGroupBoardNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: dcmTrGroupBoardNumber.setStatus('current')
if mibBuilder.loadTexts: dcmTrGroupBoardNumber.setDescription('Identification of the (output) board where the transrater group is\n\t\t\t\tassociated to.')
dcmTrGroupPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)))
if mibBuilder.loadTexts: dcmTrGroupPortNumber.setStatus('current')
if mibBuilder.loadTexts: dcmTrGroupPortNumber.setDescription('Identification of the (output) port where the transrater group is\n\t\t\t\tassociated to.')
dcmTrGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 501)))
if mibBuilder.loadTexts: dcmTrGroupId.setStatus('current')
if mibBuilder.loadTexts: dcmTrGroupId.setDescription('Identification of the transrater group given board and port.')
dcmTrGroupOutputTs = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100000000, 999999999)))
if mibBuilder.loadTexts: dcmTrGroupOutputTs.setStatus('current')
if mibBuilder.loadTexts: dcmTrGroupOutputTs.setDescription('For sPTS transrating groups, set this number to 999999999. For mPTS\n\t\t\t\tand mPTSSelectiveService groups, this is the identification of\n\t\t\t\tthe output transport stream the transrater group is associated\n\t\t\t\tto.')
dcmTrGroupBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 2, 1, 1, 5), Integer32()).setUnits('kbit/s').setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcmTrGroupBitRate.setStatus('current')
if mibBuilder.loadTexts: dcmTrGroupBitRate.setDescription('Maximal transrater group bitrate')
dcmTrGroupType = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("sPTS", 1), ("mPTS", 2), ("mPTSSelectiveService", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcmTrGroupType.setStatus('current')
if mibBuilder.loadTexts: dcmTrGroupType.setDescription('Type of transrating group. A transrater group is of one of the\n\t\t\t\tfollowing types:\n\t\t\t\tsPTS: A transrating group containing zero or more MPEG-2 transport\n\t\t\t\t  streams. Each transport streams contains a single program\n\t\t\t\t  (service).\n\t\t\t\tmPTS: A transrating group containing exactly one MPEG-2 transport\n\t\t\t\t  stream. The transport stream contains zero or more programs\n\t\t\t\t  (services).\n\t\t\t\tmPTSSelectiveService: A transrating group that contains zero or\n\t\t\t\t  more programs (services). This group subordinates\n\t\t\t\t  to a transport stream.\n\t\t\t\t  ')
dcmTrGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 2, 1, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcmTrGroupRowStatus.setStatus('current')
if mibBuilder.loadTexts: dcmTrGroupRowStatus.setDescription("RowStatus to create a group\n\t\t\t\tCan only support one-shot creation and deletion (createAndGo(4)/destroy(6))         \n\t\t\t\tSNMP UNDO of a destroy might fail.\n\t\t\t\tdcmTrGroupType is mandatory\n\t\t\t\tCurrent defaults for omitted columns in createAndGo: bitrate=15Mbit\n\t\t\t\tBut don't rely on these defaults.\n\t\t\t\t")
dcmTrTransportStreamTable = MibTable((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 2, 2), )
if mibBuilder.loadTexts: dcmTrTransportStreamTable.setStatus('current')
if mibBuilder.loadTexts: dcmTrTransportStreamTable.setDescription('Table with assignments of output transport streams to transrating\n\t\t\t\tgroups.')
dcmTrTransportStreamEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 2, 2, 1), ).setIndexNames((0, "SAEUROPE-DCM-MIB", "dcmTrTsOutputTsIndex"))
if mibBuilder.loadTexts: dcmTrTransportStreamEntry.setStatus('current')
if mibBuilder.loadTexts: dcmTrTransportStreamEntry.setDescription('Conceptual row of dcmTrTransportStreamTable')
dcmTrTsOutputTsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100000000, 999999999)))
if mibBuilder.loadTexts: dcmTrTsOutputTsIndex.setStatus('current')
if mibBuilder.loadTexts: dcmTrTsOutputTsIndex.setDescription('Identification of the output transport stream. See also\n\t\t\t\tdcmTsIndex.')
dcmTrTsGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 501))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcmTrTsGroupId.setStatus('current')
if mibBuilder.loadTexts: dcmTrTsGroupId.setDescription('Identification of the transrater group.')
dcmTrTsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 2, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcmTrTsRowStatus.setStatus('current')
if mibBuilder.loadTexts: dcmTrTsRowStatus.setDescription('Rowstatus column to create a transport stream - group\n\t\t\t\tconfiguration.\n\t\t\t\tCan only support one-shot creation and deletion (createAndGo(4)/destroy(6))\n\t\t\t\tSNMP UNDO of a destroy might fail.\n\t\t\t\tdcmTrTsGroupId is mandatory\n\t\t\t\t')
dcmTrServiceConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 2, 3), )
if mibBuilder.loadTexts: dcmTrServiceConfigTable.setStatus('current')
if mibBuilder.loadTexts: dcmTrServiceConfigTable.setDescription('Table with assignments of output services to transrating groups.')
dcmTrServiceConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 2, 3, 1), ).setIndexNames((0, "SAEUROPE-DCM-MIB", "dcmTrSrvOutputTsIndex"), (0, "SAEUROPE-DCM-MIB", "dcmTrSrvOutputServiceID"))
if mibBuilder.loadTexts: dcmTrServiceConfigEntry.setStatus('current')
if mibBuilder.loadTexts: dcmTrServiceConfigEntry.setDescription('Conceptual row of dcmTrServiceConfigTable')
dcmTrSrvOutputTsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100000000, 999999999)))
if mibBuilder.loadTexts: dcmTrSrvOutputTsIndex.setStatus('current')
if mibBuilder.loadTexts: dcmTrSrvOutputTsIndex.setDescription('Identification of the output transport stream. See also\n\t\t\t\tdcmTsIndex.')
dcmTrSrvOutputServiceID = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: dcmTrSrvOutputServiceID.setStatus('current')
if mibBuilder.loadTexts: dcmTrSrvOutputServiceID.setDescription('Identification of the output service.')
dcmTrSrvGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 501))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcmTrSrvGroupId.setStatus('current')
if mibBuilder.loadTexts: dcmTrSrvGroupId.setDescription('Identification of the transrater group.')
dcmTrSrvTypeForService = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("passThrough", 1), ("statMuxed", 2), ("rateLimited", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcmTrSrvTypeForService.setStatus('current')
if mibBuilder.loadTexts: dcmTrSrvTypeForService.setDescription('Service is passed, statmuxed or rate limited.')
dcmTrSrvLowerLimitServiceBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 2, 3, 1, 5), Integer32()).setUnits('kbit/s').setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcmTrSrvLowerLimitServiceBitRate.setStatus('current')
if mibBuilder.loadTexts: dcmTrSrvLowerLimitServiceBitRate.setDescription('Lower bound on the transrating for that service. Lower and upper\n\t\t\t\tbound are always equal for rate limited services.')
dcmTrSrvUpperLimitServiceBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 2, 3, 1, 6), Integer32()).setUnits('kbit/s').setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcmTrSrvUpperLimitServiceBitRate.setStatus('current')
if mibBuilder.loadTexts: dcmTrSrvUpperLimitServiceBitRate.setDescription('Upper bound on the transrating for that service. Lower and upper\n\t\t\t\tbound are always equal for rate limited services.')
dcmTrSrvPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcmTrSrvPriority.setStatus('current')
if mibBuilder.loadTexts: dcmTrSrvPriority.setDescription('Priority of the service for bitrate assignment -- the higher this\n\t\t\t\tnumber the higher the priority for bitrate assignment.')
dcmTrSrvRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 2, 3, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcmTrSrvRowStatus.setStatus('current')
if mibBuilder.loadTexts: dcmTrSrvRowStatus.setDescription("Rowstatus column to create a service configuration.\n\t\t\t\tCan only support one-shot creation and deletion (createAndGo(4)/destroy(6))\n\t\t\t\tSNMP UNDO of a destroy might fail\n\t\t\t\tdcmTrSrvGroupId is mandatory.\n\t\t\t\tCurrent defaults for omitted columns in createAndGo: passThrough, lower=.1Mbit, upper=15Mbit, priority=5 \n\t\t\t\tBut don't rely on these defaults.         \n\t\t\t\t")
dcmDpiSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 3))
dcmDpiChannelTable = MibTable((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 3, 1), )
if mibBuilder.loadTexts: dcmDpiChannelTable.setStatus('current')
if mibBuilder.loadTexts: dcmDpiChannelTable.setDescription('Table with settings related to Digital Program Insertion (DPI),\n\t\t\t\talso known as splicing.')
dcmDpiChannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 3, 1, 1), ).setIndexNames((0, "SAEUROPE-DCM-MIB", "dcmCfgSrvOutputTsIndex"), (0, "SAEUROPE-DCM-MIB", "dcmCfgSrvOutputServiceID"))
if mibBuilder.loadTexts: dcmDpiChannelEntry.setStatus('current')
if mibBuilder.loadTexts: dcmDpiChannelEntry.setDescription('Conceptual row of dcmDpiChannelTable')
dcmDpiPrimaryChannelName = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 3, 1, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcmDpiPrimaryChannelName.setStatus('current')
if mibBuilder.loadTexts: dcmDpiPrimaryChannelName.setDescription('Name of the DPI primary channel (maximum 31 characters).\n\t\t\t\tThis name must be unique over the DCM')
dcmDpiPrimaryChannelMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("off", 1), ("scte30", 2), ("scte35", 3), ("manual", 4), ("scte35custom", 5), ("manualcustom", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcmDpiPrimaryChannelMode.setStatus('current')
if mibBuilder.loadTexts: dcmDpiPrimaryChannelMode.setDescription('How DPI is triggered:\n\t\t\t\t- off, DPI is never triggered.\n\t\t\t\t- scte30, DPI is triggered by an ad server.\n\t\t\t\t- scte35, DPI is triggered by an SCTE35 digital cue tone.\n\t\t\t\t- manual, DPI is triggered by an IDL call (e.g. using HTML GUI or dcmDpiManualTrigger).\n\t\t\t\t- scte35custom: a scte35 variant not fully configurable using SNMP.\n\t\t\t\t- manualcustom: a manual variant not fully configurable using SNMP.')
dcmDpiInputTsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100000000, 999999999))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcmDpiInputTsIndex.setStatus('current')
if mibBuilder.loadTexts: dcmDpiInputTsIndex.setDescription('Insertion channel: Reference to the input TS. 999999999 means undefined')
dcmDpiInputServiceId = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcmDpiInputServiceId.setStatus('current')
if mibBuilder.loadTexts: dcmDpiInputServiceId.setDescription('Insertion channel: Reference to the input service ID.\n\t\t\t\t-1 means undefined')
dcmDpiManualTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("undefined", 1), ("startSplice", 2), ("stopSplice", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcmDpiManualTrigger.setStatus('current')
if mibBuilder.loadTexts: dcmDpiManualTrigger.setDescription("In case of manual splicing mode: trigger to start/stop splice.\n\t\t\t\tThis object may be set to either startSplice or stopSplice. When\n\t\t\t\tperforming an SNMP get on this object, the result will be the value\n\t\t\t\t'undefined'.")
dcmDpiChannelStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primary", 1), ("ad", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmDpiChannelStatus.setStatus('current')
if mibBuilder.loadTexts: dcmDpiChannelStatus.setDescription('Show the current status of the DPI Channel: Primary Channel or Insertion Channel (ad)')
dcmDpiRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 3, 1, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcmDpiRowStatus.setStatus('current')
if mibBuilder.loadTexts: dcmDpiRowStatus.setDescription("Rowstatus column to set up a splice.\n\t\t\t\tSNMP UNDO of a destroy might fail\n\t\t\t\tCan only support one-shot creation and deletion (createAndGo(4)/destroy(6))\n\t\t\t\tCurrent defaults for omitted columns in createAndGo: off, undefined insertion channel, (no manual trigger)\n\t\t\t\tBut don't rely on these defaults.         \n\t\t\t\t")
dcmGbeSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 5))
dcmOutputTsFecTable = MibTable((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 5, 1), )
if mibBuilder.loadTexts: dcmOutputTsFecTable.setStatus('current')
if mibBuilder.loadTexts: dcmOutputTsFecTable.setDescription("Table with the FEC Encoding settings specific for an Output TS. \n\t\t\t\tSee 'Forward Error Correction' chapter in 'DCM Configuration Guide'\n\t\t\t\t")
dcmOutputTsFecEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 5, 1, 1), ).setIndexNames((0, "SAEUROPE-DCM-MIB", "dcmOutputTsIndex"))
if mibBuilder.loadTexts: dcmOutputTsFecEntry.setStatus('current')
if mibBuilder.loadTexts: dcmOutputTsFecEntry.setDescription('\n\t\t\t\tConceptual row of the dcmOutputTsFecTable.\n\t\t\t\tA row exists for every Output Ts on a GbE board, even when there is no FEC board present.\n\t\t\t\tWhen no FEC board is present, the settings have no effect.\n\t\t\t\t')
dcmOutputTsFecMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("fec1D", 2), ("fec2D", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmOutputTsFecMode.setStatus('current')
if mibBuilder.loadTexts: dcmOutputTsFecMode.setDescription('  Output mode for FEC encoder\n\t\t\t\t')
dcmOutputTsFecSendingArrangement = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pro-mpeg-cop3-annex-B", 1), ("pro-mpeg-cop3-annex-A", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmOutputTsFecSendingArrangement.setStatus('current')
if mibBuilder.loadTexts: dcmOutputTsFecSendingArrangement.setDescription('\n\t\t\t\tFEC linearity for encoder.\n\t\t\t\t')
dcmOutputTsFecRowL = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmOutputTsFecRowL.setStatus('current')
if mibBuilder.loadTexts: dcmOutputTsFecRowL.setDescription('\n\t\t\t\tFEC Row Length (L value).\n\t\t\t\tL x D must be <= 256.\n\t\t\t\tL must be >=4 for Fec2D\n\t\t\t\tD must be >L for Annex_A \n\t\t\t\t')
dcmOutputTsFecColD = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmOutputTsFecColD.setStatus('current')
if mibBuilder.loadTexts: dcmOutputTsFecColD.setDescription('\n\t\t\t\tFEC Column Depth (D value).\n\t\t\t\tL x D must be <= 256\n\t\t\t\tD must be >L for Annex_A \n\t\t\t\t')
dcmOutputTsFecColIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 5, 1, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmOutputTsFecColIp.setStatus('current')
if mibBuilder.loadTexts: dcmOutputTsFecColIp.setDescription('\n\t\t\t\tIp Address of the Column Fec Stream.\n\t\t\t\t')
dcmOutputTsFecColUdp = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmOutputTsFecColUdp.setStatus('current')
if mibBuilder.loadTexts: dcmOutputTsFecColUdp.setDescription('\n\t\t\t\tUdp port of the Column Fec Stream\n\t\t\t\t')
dcmOutputTsFecRowIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 5, 1, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmOutputTsFecRowIp.setStatus('current')
if mibBuilder.loadTexts: dcmOutputTsFecRowIp.setDescription('\n\t\t\t\tIp Address of the Row Fec Stream\n\t\t\t\tOnly applicable for 2D FEC\n\t\t\t\t')
dcmOutputTsFecRowUdp = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmOutputTsFecRowUdp.setStatus('current')
if mibBuilder.loadTexts: dcmOutputTsFecRowUdp.setDescription('\n\t\t\t\tUdp port of the Row Fec Stream\n\t\t\t\tOnly applicable for 2D FEC\n\t\t\t\t')
dcmGbePortModeTable = MibTable((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 5, 2), )
if mibBuilder.loadTexts: dcmGbePortModeTable.setStatus('current')
if mibBuilder.loadTexts: dcmGbePortModeTable.setDescription('\n                Table of GbE Port mode per board\n                pair: only one of the ports of the pair is used (manual or automatic)\n                individual: ports are still accessed per pair, \n                            but they are split up in an input and output port\n                ')
dcmGbePortModeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 5, 2, 1), ).setIndexNames((0, "SAEUROPE-DCM-MIB", "dcmGbePortModeBoardNumber"))
if mibBuilder.loadTexts: dcmGbePortModeEntry.setStatus('current')
if mibBuilder.loadTexts: dcmGbePortModeEntry.setDescription('\n\t\t\t\tConceptual row of the dcmGbePortModeTable\n\t\t\t\tA row exists for every GbE board\n\t\t\t\t')
dcmGbePortModeBoardNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: dcmGbePortModeBoardNumber.setStatus('current')
if mibBuilder.loadTexts: dcmGbePortModeBoardNumber.setDescription('Identification of the (GbE) board where the port mode is\n\t\t\t\tconfigured.')
dcmGbePortModeMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pair", 1), ("individual", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmGbePortModeMode.setStatus('current')
if mibBuilder.loadTexts: dcmGbePortModeMode.setDescription('\n\t\t\t\tMode of the ports (see dcmGbePortModeTable)\n\t\t\t\t')
dcmAsiSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 6))
dcmConfigAsiInputBandwidthLimitTable = MibTable((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 6, 1), )
if mibBuilder.loadTexts: dcmConfigAsiInputBandwidthLimitTable.setStatus('current')
if mibBuilder.loadTexts: dcmConfigAsiInputBandwidthLimitTable.setDescription('Table with the bandwidth limitation configuration. This in an ASI input TS feature.\n\t\t\t\tSee the DCM manual for more info on the applications and limitations of this feature.')
dcmConfigAsiInputBandwidthLimitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 6, 1, 1), ).setIndexNames((0, "SAEUROPE-DCM-MIB", "dcmConfigAsiInputBandwidthLimitBoard"), (0, "SAEUROPE-DCM-MIB", "dcmConfigAsiInputBandwidthLimitPort"))
if mibBuilder.loadTexts: dcmConfigAsiInputBandwidthLimitEntry.setStatus('current')
if mibBuilder.loadTexts: dcmConfigAsiInputBandwidthLimitEntry.setDescription('Conceptual row of the dcmConfigAsiInputBandwidthLimitTable.')
dcmConfigAsiInputBandwidthLimitBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: dcmConfigAsiInputBandwidthLimitBoard.setStatus('current')
if mibBuilder.loadTexts: dcmConfigAsiInputBandwidthLimitBoard.setDescription('The board number.')
dcmConfigAsiInputBandwidthLimitPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)))
if mibBuilder.loadTexts: dcmConfigAsiInputBandwidthLimitPort.setStatus('current')
if mibBuilder.loadTexts: dcmConfigAsiInputBandwidthLimitPort.setDescription('The port number.')
dcmConfigAsiInputBandwidthLimitStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcmConfigAsiInputBandwidthLimitStatus.setStatus('current')
if mibBuilder.loadTexts: dcmConfigAsiInputBandwidthLimitStatus.setDescription('If true the bitrate will be limited to dcmConfigAsiInputBandwidthLimitBitrate')
dcmConfigAsiInputBandwidthLimitBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 213000))).setUnits('kbit/s').setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcmConfigAsiInputBandwidthLimitBitrate.setStatus('current')
if mibBuilder.loadTexts: dcmConfigAsiInputBandwidthLimitBitrate.setDescription('The bitrate limit.')
dcmDeviceSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 7))
dcmDeviceBackupSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 7, 1))
dcmDeviceBackupActivateDevice = MibScalar((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("eUnknown", 1), ("eActive", 2), ("eNotActive", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmDeviceBackupActivateDevice.setStatus('current')
if mibBuilder.loadTexts: dcmDeviceBackupActivateDevice.setDescription('Instructs this device to gracefully become the active device.\n                                If the device is a main device then this will result in a manual restore operation.\n                                If the device is a backup device then this will result in a manual backup operation.\n                                Before DCM v10.10, this field was write-only, only accepting eActive (before eActivate)\n                                to activate the device and always returning eUnknown when being read.\n                                From DCM v10.10 on, this field still only accepts eActive to activate the device, but\n                                now returns the state (eActive or eNotActive) when being read.')
dcmIpgwSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8))
dcmIpgwSdiIn = MibIdentifier((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 1))
dcmIpgwSdiInConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 1, 1), )
if mibBuilder.loadTexts: dcmIpgwSdiInConfigTable.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwSdiInConfigTable.setDescription('Description.')
dcmIpgwSdiInConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 1, 1, 1), ).setIndexNames((0, "SAEUROPE-DCM-MIB", "dcmIpgwSdiInConfigBoard"), (0, "SAEUROPE-DCM-MIB", "dcmIpgwSdiInConfigPort"), (0, "SAEUROPE-DCM-MIB", "dcmIpgwSdiInConfigRef"))
if mibBuilder.loadTexts: dcmIpgwSdiInConfigEntry.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwSdiInConfigEntry.setDescription('Description.')
dcmIpgwSdiInConfigBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: dcmIpgwSdiInConfigBoard.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwSdiInConfigBoard.setDescription('Identification of the board where the SDI input port is located.')
dcmIpgwSdiInConfigPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 7)))
if mibBuilder.loadTexts: dcmIpgwSdiInConfigPort.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwSdiInConfigPort.setDescription('Identification of the SDI input port.\n\t\t\t\tSDI port numbers range from 2..7\n\t\t\t\t')
dcmIpgwSdiInConfigRef = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: dcmIpgwSdiInConfigRef.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwSdiInConfigRef.setDescription('Same as the Port. A SDI port can only have 1 stream.')
dcmIpgwSdiInConfigMaxAllowedVideoFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("eSD", 1), ("eHD", 2), ("e3G", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwSdiInConfigMaxAllowedVideoFormat.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwSdiInConfigMaxAllowedVideoFormat.setDescription('Maximum allowed bandwidth')
dcmIpgwSdiInConfigUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 1, 1, 1, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwSdiInConfigUserName.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwSdiInConfigUserName.setDescription('Description.')
dcmIpgwSdiInFormatTable = MibTable((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 1, 2), )
if mibBuilder.loadTexts: dcmIpgwSdiInFormatTable.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwSdiInFormatTable.setDescription('Description.')
dcmIpgwSdiInFormatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 1, 2, 1), ).setIndexNames((0, "SAEUROPE-DCM-MIB", "dcmIpgwSdiInFormatBoard"), (0, "SAEUROPE-DCM-MIB", "dcmIpgwSdiInFormatPort"), (0, "SAEUROPE-DCM-MIB", "dcmIpgwSdiInFormatRef"))
if mibBuilder.loadTexts: dcmIpgwSdiInFormatEntry.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwSdiInFormatEntry.setDescription('Description.')
dcmIpgwSdiInFormatBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: dcmIpgwSdiInFormatBoard.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwSdiInFormatBoard.setDescription('Identification of the board where the SDI input port is located.')
dcmIpgwSdiInFormatPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 7)))
if mibBuilder.loadTexts: dcmIpgwSdiInFormatPort.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwSdiInFormatPort.setDescription('Identification of the SDI input port.\n\t\t\t\tSDI port numbers range from 2..7\n\t\t\t\t')
dcmIpgwSdiInFormatRef = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: dcmIpgwSdiInFormatRef.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwSdiInFormatRef.setDescription('Same as the Port. A SDI port can only have 1 stream.')
dcmIpgwSdiInFormatFramerate = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("e24fps", 1), ("e25fps", 2), ("e30fps", 3), ("e50fps", 4), ("e60fps", 5), ("e2997fps", 6), ("e5994fps", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmIpgwSdiInFormatFramerate.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwSdiInFormatFramerate.setDescription('The received framerate')
dcmIpgwSdiInFormatVideoformat = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("eSD", 1), ("eHD", 2), ("e3G", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmIpgwSdiInFormatVideoformat.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwSdiInFormatVideoformat.setDescription('The received video format.')
dcmIpgwSdiInFormatAspectRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("e4n3", 1), ("e16n9", 2), ("e14n9", 3), ("eNotAvailable", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmIpgwSdiInFormatAspectRatio.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwSdiInFormatAspectRatio.setDescription('The received Aspect Ratio.')
dcmIpgwSdiInFormatNbrOfLinesPerFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 1, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmIpgwSdiInFormatNbrOfLinesPerFrame.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwSdiInFormatNbrOfLinesPerFrame.setDescription('Received number of lines per frame.')
dcmIpgwSdiInFormatFrameBuildUp = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eProgressive", 1), ("eInterlaced", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmIpgwSdiInFormatFrameBuildUp.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwSdiInFormatFrameBuildUp.setDescription('Received Frame buildup.Progressive or Interlaced.')
dcmIpgwSdiInStatisticsCrcTable = MibTable((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 1, 3), )
if mibBuilder.loadTexts: dcmIpgwSdiInStatisticsCrcTable.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwSdiInStatisticsCrcTable.setDescription('Description.')
dcmIpgwSdiInStatisticsCrcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 1, 3, 1), ).setIndexNames((0, "SAEUROPE-DCM-MIB", "dcmIpgwSdiInStatisticsBoard"), (0, "SAEUROPE-DCM-MIB", "dcmIpgwSdiInStatisticsPort"), (0, "SAEUROPE-DCM-MIB", "dcmIpgwSdiInStatisticsRef"))
if mibBuilder.loadTexts: dcmIpgwSdiInStatisticsCrcEntry.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwSdiInStatisticsCrcEntry.setDescription('Description.')
dcmIpgwSdiInStatisticsBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: dcmIpgwSdiInStatisticsBoard.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwSdiInStatisticsBoard.setDescription('Identification of the board where the SDI input port is located.')
dcmIpgwSdiInStatisticsPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 7)))
if mibBuilder.loadTexts: dcmIpgwSdiInStatisticsPort.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwSdiInStatisticsPort.setDescription('Identification of the SDI input port.\n\t\t\t\tSDI port numbers range from 2..7\n\t\t\t\t')
dcmIpgwSdiInStatisticsRef = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: dcmIpgwSdiInStatisticsRef.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwSdiInStatisticsRef.setDescription('Same as the Port. A SDI port can only have 1 stream.')
dcmIpgwSdiInStatisticsReset = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("eReset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwSdiInStatisticsReset.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwSdiInStatisticsReset.setDescription('Write-only value that resets all the CRC-counters.')
dcmIpgwSdiInStatisticsCrcErrors1Min = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 1, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmIpgwSdiInStatisticsCrcErrors1Min.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwSdiInStatisticsCrcErrors1Min.setDescription('1 min CRC counter.')
dcmIpgwSdiInStatisticsCrcErrors1Hour = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 1, 3, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmIpgwSdiInStatisticsCrcErrors1Hour.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwSdiInStatisticsCrcErrors1Hour.setDescription('1 hour CRC counter.')
dcmIpgwSdiInStatisticsCrcErrors1Day = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 1, 3, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmIpgwSdiInStatisticsCrcErrors1Day.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwSdiInStatisticsCrcErrors1Day.setDescription('1 day CRC counter.')
dcmIpgwSdiOut = MibIdentifier((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 2))
dcmIpgwSdiOutTSTable = MibTable((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 2, 1), )
if mibBuilder.loadTexts: dcmIpgwSdiOutTSTable.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwSdiOutTSTable.setDescription('Description.')
dcmIpgwSdiOutTSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 2, 1, 1), ).setIndexNames((0, "SAEUROPE-DCM-MIB", "dcmIpgwSdiOutTSBoard"), (0, "SAEUROPE-DCM-MIB", "dcmIpgwSdiOutTSPort"), (0, "SAEUROPE-DCM-MIB", "dcmIpgwSdiOutTSRef"))
if mibBuilder.loadTexts: dcmIpgwSdiOutTSEntry.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwSdiOutTSEntry.setDescription('Description.')
dcmIpgwSdiOutTSBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: dcmIpgwSdiOutTSBoard.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwSdiOutTSBoard.setDescription('Identification of the board where the SDI output port is located.')
dcmIpgwSdiOutTSPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 8)))
if mibBuilder.loadTexts: dcmIpgwSdiOutTSPort.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwSdiOutTSPort.setDescription('Identification of the SDI output port.\n\t\t\t\tSDI port numbers range from 2..7\n\t\t\t\tMonitor port is named 8')
dcmIpgwSdiOutTSRef = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: dcmIpgwSdiOutTSRef.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwSdiOutTSRef.setDescription('Same as the Port as a SDI port can only have 1 stream.')
dcmIpgwSdiOutTSSrcBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwSdiOutTSSrcBoard.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwSdiOutTSSrcBoard.setDescription('Identification of the board from where the stream is routed from.\n\t\t\t\tMust be the same board number as in dcmIpgwSdiOutTSSrcBoard.\n\t\t\t\t\n\t\t\t\tIf Board, Port, Ref is 0,0,0 it indicates that there is no Stream routed to the SDI Output port.\n\t\t\t\tTo delete a Route, write 0,0,0 to Board, Port, Ref.\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t')
dcmIpgwSdiOutTSSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(2, 7), ValueRangeConstraint(101, 106), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwSdiOutTSSrcPort.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwSdiOutTSSrcPort.setDescription('Identification of the port from where the stream is routed from.\n\t\t\t\tFor GbE board the port number is 0.\n\t\t\t\tFor SDI ports, the port number is in range 2..7.\n\t\t\t\tIt is possible to route SDI output ports to the Monito port 8.\n\t\t\t\tPort\n\t\t\t\t\n\t\t\t\tIf Board, Port, Ref is 0,0,0 it indicates that there is no Stream routed to the SDI Output port.\n\t\t\t\tTo delete a Route, write 0,0,0 to Board, Port, Ref.\n\t\t\t\t\n\t\t\t\t')
dcmIpgwSdiOutTSSrcRef = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwSdiOutTSSrcRef.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwSdiOutTSSrcRef.setDescription('If routed from the Gbe port, the Ref must also be given.\n\t\t\t\tThe Ref is listed in dcmIpgwRtpInTSRef. \n\t\t\t\tNot used is routed from a SDI port.\n\t\t\t\t\n\t\t\t\tIf Board, Port, Ref is 0,0,0 it indicates that there is no Stream routed to the SDI Output port.\n\t\t\t\tTo delete a Route, write 0,0,0 to Board, Port, Ref.\n\t\t\t\t')
dcmIpgwSdiOutTSActive = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eActive", 1), ("eNotActive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwSdiOutTSActive.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwSdiOutTSActive.setDescription('Activate or Pause the output of the SDI Port')
dcmIpgwRtpIn = MibIdentifier((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3))
dcmIpgwRtpInTSTable = MibTable((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 1), )
if mibBuilder.loadTexts: dcmIpgwRtpInTSTable.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpInTSTable.setDescription('Description.')
dcmIpgwRtpInTSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 1, 1), ).setIndexNames((0, "SAEUROPE-DCM-MIB", "dcmIpgwRtpInTsBoard"), (0, "SAEUROPE-DCM-MIB", "dcmIpgwRtpInTSPort"), (0, "SAEUROPE-DCM-MIB", "dcmIpgwRtpInTSRef"))
if mibBuilder.loadTexts: dcmIpgwRtpInTSEntry.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpInTSEntry.setDescription('Description.')
dcmIpgwRtpInTsBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: dcmIpgwRtpInTsBoard.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpInTsBoard.setDescription('Identification of the board where the RTP input stream is located.')
dcmIpgwRtpInTSPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: dcmIpgwRtpInTSPort.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpInTSPort.setDescription('Gbe A. Allways 0.')
dcmIpgwRtpInTSRef = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: dcmIpgwRtpInTSRef.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpInTSRef.setDescription('The Rtp Input reference.')
dcmIpgwRtpInTSMaxAllowedVideoFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("eSD", 1), ("eHD", 2), ("e3G", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcmIpgwRtpInTSMaxAllowedVideoFormat.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpInTSMaxAllowedVideoFormat.setDescription('Maximum allowed bandwidth')
dcmIpgwRtpInTSUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 1, 1, 5), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcmIpgwRtpInTSUsername.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpInTSUsername.setDescription('RTP input Stream Name. ')
dcmIpgwRtpInTSIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 1, 1, 6), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcmIpgwRtpInTSIpAddress.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpInTSIpAddress.setDescription('Destination (multicast) IP Address of the received RTP-Stream.')
dcmIpgwRtpInTSUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcmIpgwRtpInTSUdpPort.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpInTSUdpPort.setDescription('Destination UDP Port of the received RTP-Stream.')
dcmIpgwRtpInTSDejitter = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcmIpgwRtpInTSDejitter.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpInTSDejitter.setDescription('Dejitter in ms, range between 1 and 200 (default 25)\n\t\t\t\tFor uncompressed, the minimum value is 7.')
dcmIpgwRtpInTSVideoOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-10000, 10000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcmIpgwRtpInTSVideoOffset.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpInTSVideoOffset.setDescription('Video Phase Offset in ns.')
dcmIpgwRtpInTSRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 1, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcmIpgwRtpInTSRowStatus.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpInTSRowStatus.setDescription('Rowstatus column that allows to create a RTP input stream.\n\t\t\t\tThe dcmIpgwRtpInTsRef value will be given a new value by the IPGW.\n\t\t\t\tCan only support one-shot creation and deletion (createAndGo(4)/destroy(6))\n\t\t\t\tSNMP UNDO of a destroy might fail.\n\t\t\t\t')
dcmIpgwRtpInFormatTable = MibTable((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 2), )
if mibBuilder.loadTexts: dcmIpgwRtpInFormatTable.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpInFormatTable.setDescription('Description.')
dcmIpgwRtpInFormatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 2, 1), ).setIndexNames((0, "SAEUROPE-DCM-MIB", "dcmIpgwRtpInFormatBoard"), (0, "SAEUROPE-DCM-MIB", "dcmIpgwRtpInFormatPort"), (0, "SAEUROPE-DCM-MIB", "dcmIpgwRtpInFormatRef"))
if mibBuilder.loadTexts: dcmIpgwRtpInFormatEntry.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpInFormatEntry.setDescription('Description.')
dcmIpgwRtpInFormatBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: dcmIpgwRtpInFormatBoard.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpInFormatBoard.setDescription('Identification of the board where the RTP input stream is located.')
dcmIpgwRtpInFormatPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 7)))
if mibBuilder.loadTexts: dcmIpgwRtpInFormatPort.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpInFormatPort.setDescription('Gbe A. Allways 0.\n\t\t\t\t')
dcmIpgwRtpInFormatRef = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: dcmIpgwRtpInFormatRef.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpInFormatRef.setDescription('The Rtp Input reference in dcmIpgwRtpInTSRef.')
dcmIpgwRtpInFormatFramerate = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("e24fps", 1), ("e25fps", 2), ("e30fps", 3), ("e50fps", 4), ("e60fps", 5), ("e2997fps", 6), ("e5994fps", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmIpgwRtpInFormatFramerate.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpInFormatFramerate.setDescription('The received framerate')
dcmIpgwRtpInFormatVideoformat = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("eSD", 1), ("eHD", 2), ("e3G", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmIpgwRtpInFormatVideoformat.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpInFormatVideoformat.setDescription('The received video format.')
dcmIpgwRtpInFormatAspectRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("e4n3", 1), ("e16n9", 2), ("e14n9", 3), ("eNotAvailable", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmIpgwRtpInFormatAspectRatio.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpInFormatAspectRatio.setDescription('The received Aspect Ratio.')
dcmIpgwRtpInFormatNbrOfLinesPerFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmIpgwRtpInFormatNbrOfLinesPerFrame.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpInFormatNbrOfLinesPerFrame.setDescription('Received number of lines per frame.')
dcmIpgwRtpInFormatFrameBuildUp = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eProgressive", 1), ("eInterlaced", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmIpgwRtpInFormatFrameBuildUp.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpInFormatFrameBuildUp.setDescription('Received Frame buildup.Progressive or Interlaced.')
dcmIpgwRtpInJp2kEnableTable = MibTable((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 3), )
if mibBuilder.loadTexts: dcmIpgwRtpInJp2kEnableTable.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpInJp2kEnableTable.setDescription('Description.')
dcmIpgwRtpInJp2kEnableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 3, 1), ).setIndexNames((0, "SAEUROPE-DCM-MIB", "dcmIpgwRtpInJp2kEnableBoard"), (0, "SAEUROPE-DCM-MIB", "dcmIpgwRtpInJp2kEnablePort"), (0, "SAEUROPE-DCM-MIB", "dcmIpgwRtpInJp2kEnableRef"))
if mibBuilder.loadTexts: dcmIpgwRtpInJp2kEnableEntry.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpInJp2kEnableEntry.setDescription('Description.')
dcmIpgwRtpInJp2kEnableBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: dcmIpgwRtpInJp2kEnableBoard.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpInJp2kEnableBoard.setDescription('Identification of the board where the RTP input stream is located.')
dcmIpgwRtpInJp2kEnablePort = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: dcmIpgwRtpInJp2kEnablePort.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpInJp2kEnablePort.setDescription('Gbe A. Allways 0.')
dcmIpgwRtpInJp2kEnableRef = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: dcmIpgwRtpInJp2kEnableRef.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpInJp2kEnableRef.setDescription('The Rtp Input reference in dcmIpgwRtpInTSRef.\n\t\t\t\t')
dcmIpgwRtpInJp2kEnableState = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eActive", 1), ("eNotActive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwRtpInJp2kEnableState.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpInJp2kEnableState.setDescription('Enable or disable use of Jpeg2k compression for the Rtp-stream.')
dcmIpgwRtpInStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 4), )
if mibBuilder.loadTexts: dcmIpgwRtpInStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpInStatisticsTable.setDescription('Description.')
dcmIpgwRtpInStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 4, 1), ).setIndexNames((0, "SAEUROPE-DCM-MIB", "dcmIpgwRtpInStatisticsBoard"), (0, "SAEUROPE-DCM-MIB", "dcmIpgwRtpInStatisticsPort"), (0, "SAEUROPE-DCM-MIB", "dcmIpgwRtpInStatisticsRef"))
if mibBuilder.loadTexts: dcmIpgwRtpInStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpInStatisticsEntry.setDescription('Description.')
dcmIpgwRtpInStatisticsBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: dcmIpgwRtpInStatisticsBoard.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpInStatisticsBoard.setDescription('Identification of the board where the RTP input stream is located.')
dcmIpgwRtpInStatisticsPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: dcmIpgwRtpInStatisticsPort.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpInStatisticsPort.setDescription('Gbe A. Allways 0.')
dcmIpgwRtpInStatisticsRef = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: dcmIpgwRtpInStatisticsRef.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpInStatisticsRef.setDescription('The Rtp Input reference in dcmIpgwRtpInTSRef.')
dcmIpgwRtpInStatisticsReset = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("eReset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwRtpInStatisticsReset.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpInStatisticsReset.setDescription('Write-only value that resets all the counters.')
dcmIpgwRtpInStatisticsValidPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 4, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmIpgwRtpInStatisticsValidPackets.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpInStatisticsValidPackets.setDescription('Valid Packets counter.')
dcmIpgwRtpInStatisticsMissingPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 4, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmIpgwRtpInStatisticsMissingPackets.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpInStatisticsMissingPackets.setDescription('Missing Packets counter.')
dcmIpgwRtpInStatisticsFixedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 4, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmIpgwRtpInStatisticsFixedPackets.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpInStatisticsFixedPackets.setDescription('Fixed Packets ')
dcmIpgwRtpInStatisticsDuplicatePackets = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 4, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmIpgwRtpInStatisticsDuplicatePackets.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpInStatisticsDuplicatePackets.setDescription('Duplicate Packets counter.')
dcmIpgwRtpInStatisticsReorderedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 4, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmIpgwRtpInStatisticsReorderedPackets.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpInStatisticsReorderedPackets.setDescription('Reordered Packets counter.')
dcmIpgwRtpInStatisticsOutOfRangePackets = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 4, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmIpgwRtpInStatisticsOutOfRangePackets.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpInStatisticsOutOfRangePackets.setDescription('Out of Range Packets counter.')
dcmIpgwRtpInStatitsticsCrcTable = MibTable((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 5), )
if mibBuilder.loadTexts: dcmIpgwRtpInStatitsticsCrcTable.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpInStatitsticsCrcTable.setDescription('Description.')
dcmIpgwRtpInStatitsticsCrcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 5, 1), ).setIndexNames((0, "SAEUROPE-DCM-MIB", "dcmIpgwRtpInStatitsticsCrcBoard"), (0, "SAEUROPE-DCM-MIB", "dcmIpgwRtpInStatitsticsCrcPort"), (0, "SAEUROPE-DCM-MIB", "dcmIpgwRtpInStatitsticsCrcRef"))
if mibBuilder.loadTexts: dcmIpgwRtpInStatitsticsCrcEntry.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpInStatitsticsCrcEntry.setDescription('Description.')
dcmIpgwRtpInStatitsticsCrcBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: dcmIpgwRtpInStatitsticsCrcBoard.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpInStatitsticsCrcBoard.setDescription('Identification of the board where the RTP input stream is located.')
dcmIpgwRtpInStatitsticsCrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: dcmIpgwRtpInStatitsticsCrcPort.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpInStatitsticsCrcPort.setDescription('Gbe A. Allways 0.')
dcmIpgwRtpInStatitsticsCrcRef = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: dcmIpgwRtpInStatitsticsCrcRef.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpInStatitsticsCrcRef.setDescription('The Rtp Input reference in dcmIpgwRtpInTSRef.')
dcmIpgwRtpInStatisticsCrcReset = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("eReset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwRtpInStatisticsCrcReset.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpInStatisticsCrcReset.setDescription('Write-only value that resets all the CRC-counters.')
dcmIpgwRtpInStatisticsCrcErrors1min = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 5, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmIpgwRtpInStatisticsCrcErrors1min.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpInStatisticsCrcErrors1min.setDescription('1 min CRC counter.')
dcmIpgwRtpInStatisticsCrcErrors1Hour = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 5, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmIpgwRtpInStatisticsCrcErrors1Hour.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpInStatisticsCrcErrors1Hour.setDescription('1 hour CRC counter.')
dcmIpgwRtpInStatisticsCrcErrors1Day = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 5, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmIpgwRtpInStatisticsCrcErrors1Day.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpInStatisticsCrcErrors1Day.setDescription('1 day CRC counter.')
dcmIpgwRtpInFecConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 6), )
if mibBuilder.loadTexts: dcmIpgwRtpInFecConfigTable.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpInFecConfigTable.setDescription('Description.')
dcmIpgwRtpInFecConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 6, 1), ).setIndexNames((0, "SAEUROPE-DCM-MIB", "dcmIpgwRtpInFecConfigBoard"), (0, "SAEUROPE-DCM-MIB", "dcmIpgwRtpInFecConfigPort"), (0, "SAEUROPE-DCM-MIB", "dcmIpgwRtpInFecConfigRef"))
if mibBuilder.loadTexts: dcmIpgwRtpInFecConfigEntry.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpInFecConfigEntry.setDescription('Description.')
dcmIpgwRtpInFecConfigBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: dcmIpgwRtpInFecConfigBoard.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpInFecConfigBoard.setDescription('Identification of the board where the RTP input stream is located.')
dcmIpgwRtpInFecConfigPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: dcmIpgwRtpInFecConfigPort.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpInFecConfigPort.setDescription('Gbe A. Allway 0.')
dcmIpgwRtpInFecConfigRef = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: dcmIpgwRtpInFecConfigRef.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpInFecConfigRef.setDescription('The Rtp Input reference in dcmIpgwRtpInTSRef.')
dcmIpgwRtpInFecConfigMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("eDisable", 1), ("e1DMode", 2), ("e2DMode", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwRtpInFecConfigMode.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpInFecConfigMode.setDescription('FEC Mode.')
dcmIpgwRtpInFecConfigColumnIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 6, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwRtpInFecConfigColumnIpAddress.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpInFecConfigColumnIpAddress.setDescription('FEC Column Destination IP Address.')
dcmIpgwRtpInFecConfigColumnUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 6, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwRtpInFecConfigColumnUdpPort.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpInFecConfigColumnUdpPort.setDescription('FEC Column Destination UDP Port.')
dcmIpgwRtpInFecConfigRowIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 6, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwRtpInFecConfigRowIpAddress.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpInFecConfigRowIpAddress.setDescription('FEC Row Destination IP Address.')
dcmIpgwRtpInFecConfigRowUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 6, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwRtpInFecConfigRowUdpPort.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpInFecConfigRowUdpPort.setDescription('FEC Row Destination UDP Port.')
dcmIpgwRtpInFecStatusTable = MibTable((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 7), )
if mibBuilder.loadTexts: dcmIpgwRtpInFecStatusTable.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpInFecStatusTable.setDescription('Description.')
dcmIpgwRtpInFecStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 7, 1), ).setIndexNames((0, "SAEUROPE-DCM-MIB", "dcmIpgwRtpInFecStatusBoard"), (0, "SAEUROPE-DCM-MIB", "dcmIpgwRtpInFecStatusPort"), (0, "SAEUROPE-DCM-MIB", "dcmIpgwRtpInFecStatusRef"))
if mibBuilder.loadTexts: dcmIpgwRtpInFecStatusEntry.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpInFecStatusEntry.setDescription('Description.')
dcmIpgwRtpInFecStatusBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: dcmIpgwRtpInFecStatusBoard.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpInFecStatusBoard.setDescription('Identification of the board where the RTP input stream is located.')
dcmIpgwRtpInFecStatusPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: dcmIpgwRtpInFecStatusPort.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpInFecStatusPort.setDescription('Gbe A. Allways 0.')
dcmIpgwRtpInFecStatusRef = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: dcmIpgwRtpInFecStatusRef.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpInFecStatusRef.setDescription('The Rtp Input reference in dcmIpgwRtpInTSRef.')
dcmIpgwRtpInFecStatusColumnPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ePresent", 1), ("eNotPresent", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmIpgwRtpInFecStatusColumnPresent.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpInFecStatusColumnPresent.setDescription('Is FEC Coloumn Present.')
dcmIpgwRtpInFecStatusRowPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ePresent", 1), ("eNotPresent", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmIpgwRtpInFecStatusRowPresent.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpInFecStatusRowPresent.setDescription('Is FEC Row Present.')
dcmIpgwRtpInFecStatusFecColumnDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 7, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmIpgwRtpInFecStatusFecColumnDepth.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpInFecStatusFecColumnDepth.setDescription('FEC Column Depth.')
dcmIpgwRtpInFecStatusFecRowLength = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 7, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmIpgwRtpInFecStatusFecRowLength.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpInFecStatusFecRowLength.setDescription('FEC Row Depth.')
dcmIpgwRtpInFecStatusColumnOverhead = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 7, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmIpgwRtpInFecStatusColumnOverhead.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpInFecStatusColumnOverhead.setDescription('Column FEC Stream Overhead in percentage fixed point 2 digit (x100)')
dcmIpgwRtpInFecStatusRowOverhead = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 7, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmIpgwRtpInFecStatusRowOverhead.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpInFecStatusRowOverhead.setDescription('Row FEC Stream Overhead in percentage fixed point 2 digit (x100)')
dcmIpgwRtpInFecStatusTotalOverhead = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 7, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmIpgwRtpInFecStatusTotalOverhead.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpInFecStatusTotalOverhead.setDescription('Total FEC Stream Overhead in percentage fixed point 2 digit (x100)')
dcmIpgwRtpInFecStatusLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 7, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmIpgwRtpInFecStatusLatency.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpInFecStatusLatency.setDescription('FEC Stream Latency in ms fixed point 1 digit (x10).')
dcmIpgwRtpInHitlessTable = MibTable((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 8), )
if mibBuilder.loadTexts: dcmIpgwRtpInHitlessTable.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpInHitlessTable.setDescription('Description.')
dcmIpgwRtpInHitlessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 8, 1), ).setIndexNames((0, "SAEUROPE-DCM-MIB", "dcmIpgwRtpInHitlessBoard"), (0, "SAEUROPE-DCM-MIB", "dcmIpgwRtpInHitlessPort"), (0, "SAEUROPE-DCM-MIB", "dcmIpgwRtpInHitlessRef"))
if mibBuilder.loadTexts: dcmIpgwRtpInHitlessEntry.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpInHitlessEntry.setDescription('Description.')
dcmIpgwRtpInHitlessBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: dcmIpgwRtpInHitlessBoard.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpInHitlessBoard.setDescription('Identification of the board where the RTP input stream is located.')
dcmIpgwRtpInHitlessPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: dcmIpgwRtpInHitlessPort.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpInHitlessPort.setDescription('Gbe A. Allways 0.')
dcmIpgwRtpInHitlessRef = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: dcmIpgwRtpInHitlessRef.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpInHitlessRef.setDescription('The Rtp Input reference in dcmIpgwRtpInTSRef.')
dcmIpgwRtpInHitlessMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eEnable", 1), ("eDisable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwRtpInHitlessMode.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpInHitlessMode.setDescription('Enable/Disable Hitless Switchover.')
dcmIpgwRtpInHitlessWindowPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 8, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwRtpInHitlessWindowPackets.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpInHitlessWindowPackets.setDescription('Write only. RTP Packets window.')
dcmIpgwRtpInHitlessDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 3, 8, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmIpgwRtpInHitlessDelay.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpInHitlessDelay.setDescription('Hitless Buffer Delay in ms corresponding to RTP packet window.')
dcmIpgwRtpOut = MibIdentifier((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4))
dcmIpgwRtpOutTSTable = MibTable((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 1), )
if mibBuilder.loadTexts: dcmIpgwRtpOutTSTable.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpOutTSTable.setDescription('Description.')
dcmIpgwRtpOutTSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 1, 1), ).setIndexNames((0, "SAEUROPE-DCM-MIB", "dcmIpgwRtpOutTSBoard"), (0, "SAEUROPE-DCM-MIB", "dcmIpgwRtpOutTSPort"), (0, "SAEUROPE-DCM-MIB", "dcmIpgwRtpOutTSRef"))
if mibBuilder.loadTexts: dcmIpgwRtpOutTSEntry.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpOutTSEntry.setDescription('Description.')
dcmIpgwRtpOutTSBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: dcmIpgwRtpOutTSBoard.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpOutTSBoard.setDescription('Identification of the board where the RTP output stream is located.')
dcmIpgwRtpOutTSPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: dcmIpgwRtpOutTSPort.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpOutTSPort.setDescription('Gbe A. Allways 0.')
dcmIpgwRtpOutTSRef = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: dcmIpgwRtpOutTSRef.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpOutTSRef.setDescription('The Rtp Output reference.')
dcmIpgwRtpOutTSSrcBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcmIpgwRtpOutTSSrcBoard.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpOutTSSrcBoard.setDescription('The Board from where the stream is routed from.\n\t\t\t\tMust be the same dcmIpgwRtpOutTSSrcBoard.\n\t\t\t\t\n\t\t\t\tIf Board, Port, Ref is 0,0,0 it indicates that there is no Stream routed to the RTP Output port.\n\t\t\t\tTo delete a Route, write 0,0,0 to Board, Port, Ref.')
dcmIpgwRtpOutTSSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(2, 7), ValueRangeConstraint(101, 106), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcmIpgwRtpOutTSSrcPort.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpOutTSSrcPort.setDescription('The Port from where the stream is routed from.\n\t\t\t\t2-7 if routing a SDI input stream.\n\t\t\t\tIf Board, Port, Ref is 0,0,0 it indicates that there is no Stream routed to the RTP Output port.\n\t\t\t\tTo delete a Route, write 0,0,0 to Board, Port, Ref.')
dcmIpgwRtpOutTSSrcRef = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcmIpgwRtpOutTSSrcRef.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpOutTSSrcRef.setDescription('If routed from the Gbe port, the Ref must also be given.\n\t\t\t\tThe Ref is listed in dcmIpgwRtpInTSRef. \n\t\t\t\tNot used if routed from a SDI port.\n\t\t\t\t\n\t\t\t\tIf Board, Port, Ref is 0,0,0 it indicates that there is no Stream routed to the RTP Output port.\n\t\t\t\tTo delete a Route, write 0,0,0 to Board, Port, Ref.')
dcmIpgwRtpOutTSActive = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eActive", 1), ("eNotActive", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcmIpgwRtpOutTSActive.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpOutTSActive.setDescription('Activate or Pause the output of the RTP Stream.')
dcmIpgwRtpOutTSGbePortType = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ePairType", 1), ("eIndividualType", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcmIpgwRtpOutTSGbePortType.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpOutTSGbePortType.setDescription('Pair: All configuration values like: TTL, TOS, VLAN, srcAddr (source socket)\n\t\t\t\t  and destination socket are the same for the two GbE ports. Values configured \n\t\t\t\t  for GbE0 are also used for GbE1.\n\t\t\t\tIndividual: All configuration values as mentioned above are individual \n\t\t\t\t  for for each GbE port.\n\t\t\t\t')
dcmIpgwRtpOutTSDestinationIpAddressA = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 1, 1, 9), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcmIpgwRtpOutTSDestinationIpAddressA.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpOutTSDestinationIpAddressA.setDescription('Destination IP Address.\n\t\t\t\tIf dcmIpgwRtpOutTSGbePortType is set ePairType this\n\t\t\t\taddress is used on both the A and B port.')
dcmIpgwRtpOutTSDestinationUdpPortA = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcmIpgwRtpOutTSDestinationUdpPortA.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpOutTSDestinationUdpPortA.setDescription('Destination UDP Port.\n\t\t\t\tIf dcmIpgwRtpOutTSGbePortType is set ePairType this\n\t\t\t\tudpport is used on both the A and B port.')
dcmIpgwRtpOutTSDestinationIpAddressB = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 1, 1, 11), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcmIpgwRtpOutTSDestinationIpAddressB.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpOutTSDestinationIpAddressB.setDescription('Destination IP Address.\n\t\t\t\tIf dcmIpgwRtpOutTSGbePortType is set ePairType this\n\t\t\t\taddress is not used.')
dcmIpgwRtpOutTSDestinationUdpPortB = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcmIpgwRtpOutTSDestinationUdpPortB.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpOutTSDestinationUdpPortB.setDescription('Destination UDP Port.\n\t\t\t\tIf dcmIpgwRtpOutTSGbePortType is set ePairType this\n\t\t\t\tudpport is not used.')
dcmIpgwRtpOutTSRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 1, 1, 13), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dcmIpgwRtpOutTSRowStatus.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpOutTSRowStatus.setDescription('Rowstatus column that allows to create a RTP output stream.\n\t\t\t\tThe dcmIpgwRtpOutTsRef value will be given a new value by the IPGW.\n\t\t\t\tCan only support one-shot creation and deletion (createAndGo(4)/destroy(6))\n\t\t\t\tSNMP UNDO of a destroy might fail.\n\t\t\t\t')
dcmIpgwRtpOutJp2kEnableTable = MibTable((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 2), )
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kEnableTable.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kEnableTable.setDescription('Description.')
dcmIpgwRtpOutJp2kEnableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 2, 1), ).setIndexNames((0, "SAEUROPE-DCM-MIB", "dcmIpgwRtpOutJp2kEnableBoard"), (0, "SAEUROPE-DCM-MIB", "dcmIpgwRtpOutJp2kEnablePort"), (0, "SAEUROPE-DCM-MIB", "dcmIpgwRtpOutJp2kEnableRef"))
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kEnableEntry.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kEnableEntry.setDescription('Description.')
dcmIpgwRtpOutJp2kEnableBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kEnableBoard.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kEnableBoard.setDescription('Identification of the board where the RTP output stream is located.')
dcmIpgwRtpOutJp2kEnablePort = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kEnablePort.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kEnablePort.setDescription('Gbe A: Always 0.')
dcmIpgwRtpOutJp2kEnableRef = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kEnableRef.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kEnableRef.setDescription('The Rtp Output reference in dcmIpgwRtpOutTSRef.')
dcmIpgwRtpOutJp2kEnableState = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eActive", 1), ("eNotActive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kEnableState.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kEnableState.setDescription('Enable or disable use of Jpeg2k compression for the Rtp-stream.')
dcmIpgwRtpOutJp2k = MibIdentifier((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 3))
dcmIpgwRtpOutJp2kConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 3, 1), )
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kConfigTable.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kConfigTable.setDescription('Description.')
dcmIpgwRtpOutJp2kConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 3, 1, 1), ).setIndexNames((0, "SAEUROPE-DCM-MIB", "dcmIpgwRtpOutJp2kConfigBoard"), (0, "SAEUROPE-DCM-MIB", "dcmIpgwRtpOutJp2kConfigPort"), (0, "SAEUROPE-DCM-MIB", "dcmIpgwRtpOutJp2kConfigRef"))
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kConfigEntry.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kConfigEntry.setDescription('Description.')
dcmIpgwRtpOutJp2kConfigBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kConfigBoard.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kConfigBoard.setDescription('Identification of the board where the RTP output stream is located.')
dcmIpgwRtpOutJp2kConfigPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kConfigPort.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kConfigPort.setDescription('Gbe A: Always 0.')
dcmIpgwRtpOutJp2kConfigRef = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kConfigRef.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kConfigRef.setDescription('The Rtp output stream reference in dcmIpgwRtpOutTSRef.')
dcmIpgwRtpOutJp2kConfigVideoRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kConfigVideoRate.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kConfigVideoRate.setDescription('Actual encoded rate [bps].')
dcmIpgwRtpOutJp2kConfigMaxStreamBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20000000, 900000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kConfigMaxStreamBitRate.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kConfigMaxStreamBitRate.setDescription('Maximum bit rate of an JP2K output stream incl. audio, MXF, and RTP overhead [bps]')
dcmIpgwRtpOutJp2kConfigChromaWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kConfigChromaWeight.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kConfigChromaWeight.setDescription('Percentage of compressed bit rate used for chroma data.')
dcmIpgwRtpOutJp2kConfigVitcEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eEnable", 1), ("eDisable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kConfigVitcEnable.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kConfigVitcEnable.setDescription('Enable VITC.')
dcmIpgwRtpOutJp2kConfigViiEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eEnable", 1), ("eDisable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kConfigViiEnable.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kConfigViiEnable.setDescription('Enable VII.')
dcmIpgwRtpOutJp2kConfigAfdEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eEnable", 1), ("eDisable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kConfigAfdEnable.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kConfigAfdEnable.setDescription('Enable AFD.')
dcmIpgwRtpOutJp2kConfigTeletextBEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eEnable", 1), ("eDisable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kConfigTeletextBEnable.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kConfigTeletextBEnable.setDescription('Enable Teletext B.')
dcmIpgwRtpOutJp2kConfigCCEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eEnable", 1), ("eDisable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kConfigCCEnable.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kConfigCCEnable.setDescription('Enable Close Caption.')
dcmIpgwRtpOutJp2kConfigVPSEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 3, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eEnable", 1), ("eDisable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kConfigVPSEnable.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kConfigVPSEnable.setDescription('Enable Close Caption.')
dcmIpgwRtpOutJp2kConfigTrans625F1Line = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 3, 1, 1, 13), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kConfigTrans625F1Line.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kConfigTrans625F1Line.setDescription('The following lines is valid:\n\t\t\t\t625 Field 1: 6-22\n\t\t\t\t625 Field 2: 319-335\n\t\t\t\t525 Field 1: 10-19\n\t\t\t\t525 Field 2: 10-18\n\t\t\t\t')
dcmIpgwRtpOutJp2kConfigTrans625F2Line = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 3, 1, 1, 14), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kConfigTrans625F2Line.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kConfigTrans625F2Line.setDescription('The following lines is valid:\n\t\t\t\t625 Field 1: 6-22\n\t\t\t\t625 Field 2: 319-335\n\t\t\t\t525 Field 1: 10-19\n\t\t\t\t525 Field 2: 10-18\n\t\t\t\t')
dcmIpgwRtpOutJp2kConfigTrans525F1Line = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 3, 1, 1, 15), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kConfigTrans525F1Line.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kConfigTrans525F1Line.setDescription('The following lines is valid:\n\t\t\t\t625 Field 1: 6-22\n\t\t\t\t625 Field 2: 319-335\n\t\t\t\t525 Field 1: 10-19\n\t\t\t\t525 Field 2: 10-18\n\t\t\t\t')
dcmIpgwRtpOutJp2kConfigTrans525F2Line = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 3, 1, 1, 16), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kConfigTrans525F2Line.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kConfigTrans525F2Line.setDescription('The following lines is valid:\n\t\t\t\t625 Field 1: 6-22\n\t\t\t\t625 Field 2: 319-335\n\t\t\t\t525 Field 1: 10-19\n\t\t\t\t525 Field 2: 10-18\n\t\t\t\t')
dcmIpgwRtpOutJp2kConfigEncapsulationType = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 3, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eNative", 1), ("eSMPTE_2022_1-2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kConfigEncapsulationType.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kConfigEncapsulationType.setDescription('Ecapsulation type for Jpeg2k compression for the Rtp-stream.')
dcmIpgwRtpOutJp2kAudioTable = MibTable((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 3, 2), )
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kAudioTable.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kAudioTable.setDescription('Description.')
dcmIpgwRtpOutJp2kAudioEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 3, 2, 1), ).setIndexNames((0, "SAEUROPE-DCM-MIB", "dcmIpgwRtpOutJp2kAudioBoard"), (0, "SAEUROPE-DCM-MIB", "dcmIpgwRtpOutJp2kAudioPort"), (0, "SAEUROPE-DCM-MIB", "dcmIpgwRtpOutJp2kAudioRef"))
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kAudioEntry.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kAudioEntry.setDescription('Description.')
dcmIpgwRtpOutJp2kAudioBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kAudioBoard.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kAudioBoard.setDescription('Identification of the board where the RTP output stream is located.')
dcmIpgwRtpOutJp2kAudioPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kAudioPort.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kAudioPort.setDescription('Gbe A: Always 0.')
dcmIpgwRtpOutJp2kAudioRef = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kAudioRef.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kAudioRef.setDescription('The Rtp output stream reference in dcmIpgwRtpOutTSRef.')
dcmIpgwRtpOutJp2kAudioPair1Enable = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eEnable", 1), ("eDisable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kAudioPair1Enable.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kAudioPair1Enable.setDescription('Enable/Disable Audio pair on JP2K output.')
dcmIpgwRtpOutJp2kAudioPair1Present = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ePresent", 1), ("eNotPresent", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kAudioPair1Present.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kAudioPair1Present.setDescription('Is Audio pair is present in the stream')
dcmIpgwRtpOutJp2kAudioPair2Enable = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eEnable", 1), ("eDisable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kAudioPair2Enable.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kAudioPair2Enable.setDescription('Enable/Disable Audio pair on JP2K output.')
dcmIpgwRtpOutJp2kAudioPair2Present = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ePresent", 1), ("eNotPresent", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kAudioPair2Present.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kAudioPair2Present.setDescription('Is Audio pair is present in the stream')
dcmIpgwRtpOutJp2kAudioPair3Enable = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eEnable", 1), ("eDisable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kAudioPair3Enable.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kAudioPair3Enable.setDescription('Enable/Disable Audio pair on JP2K output.')
dcmIpgwRtpOutJp2kAudioPair3Present = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 3, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ePresent", 1), ("eNotPresent", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kAudioPair3Present.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kAudioPair3Present.setDescription('Is Audio pair is present in the stream')
dcmIpgwRtpOutJp2kAudioPair4Enable = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 3, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eEnable", 1), ("eDisable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kAudioPair4Enable.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kAudioPair4Enable.setDescription('Enable/Disable Audio pair on JP2K output.')
dcmIpgwRtpOutJp2kAudioPair4Present = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 3, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ePresent", 1), ("eNotPresent", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kAudioPair4Present.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kAudioPair4Present.setDescription('Is Audio pair is present in the stream')
dcmIpgwRtpOutJp2kAudioPair5Enable = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 3, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eEnable", 1), ("eDisable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kAudioPair5Enable.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kAudioPair5Enable.setDescription('Enable/Disable Audio pair on JP2K output.')
dcmIpgwRtpOutJp2kAudioPair5Present = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 3, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ePresent", 1), ("eNotPresent", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kAudioPair5Present.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kAudioPair5Present.setDescription('Is Audio pair is present in the stream')
dcmIpgwRtpOutJp2kAudioPair6Enable = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 3, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eEnable", 1), ("eDisable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kAudioPair6Enable.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kAudioPair6Enable.setDescription('Enable/Disable Audio pair on JP2K output.')
dcmIpgwRtpOutJp2kAudioPair6Present = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 3, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ePresent", 1), ("eNotPresent", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kAudioPair6Present.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kAudioPair6Present.setDescription('Is Audio pair is present in the stream')
dcmIpgwRtpOutJp2kAudioPair7Enable = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 3, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eEnable", 1), ("eDisable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kAudioPair7Enable.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kAudioPair7Enable.setDescription('Enable/Disable Audio pair on JP2K output.')
dcmIpgwRtpOutJp2kAudioPair7Present = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 3, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ePresent", 1), ("eNotPresent", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kAudioPair7Present.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kAudioPair7Present.setDescription('Is Audio pair is present in the stream')
dcmIpgwRtpOutJp2kAudioPair8Enable = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 3, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eEnable", 1), ("eDisable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kAudioPair8Enable.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kAudioPair8Enable.setDescription('Enable/Disable Audio pair on JP2K output.')
dcmIpgwRtpOutJp2kAudioPair8Present = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 3, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ePresent", 1), ("eNotPresent", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kAudioPair8Present.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpOutJp2kAudioPair8Present.setDescription('Is Audio pair is present in the stream')
dcmIpgwRtpOutAdvancedTable = MibTable((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 4), )
if mibBuilder.loadTexts: dcmIpgwRtpOutAdvancedTable.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpOutAdvancedTable.setDescription('Description.')
dcmIpgwRtpOutAdvancedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 4, 1), ).setIndexNames((0, "SAEUROPE-DCM-MIB", "dcmIpgwRtpOutAdvancedBoard"), (0, "SAEUROPE-DCM-MIB", "dcmIpgwRtpOutAdvancedPort"), (0, "SAEUROPE-DCM-MIB", "dcmIpgwRtpOutAdvancedRef"))
if mibBuilder.loadTexts: dcmIpgwRtpOutAdvancedEntry.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpOutAdvancedEntry.setDescription('Description.')
dcmIpgwRtpOutAdvancedBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: dcmIpgwRtpOutAdvancedBoard.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpOutAdvancedBoard.setDescription('Identification of the board where the RTP output stream is located.')
dcmIpgwRtpOutAdvancedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1)))
if mibBuilder.loadTexts: dcmIpgwRtpOutAdvancedPort.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpOutAdvancedPort.setDescription('Gbe A:  0 If dcmIpgwRtpOutTSGbePortType = eDualType.\n\t\t\t\tGbe A+B:0-1: If dcmIpgwRtpOutTSGbePortType = eIndividualType.')
dcmIpgwRtpOutAdvancedRef = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: dcmIpgwRtpOutAdvancedRef.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpOutAdvancedRef.setDescription('The Rtp output stream reference in dcmIpgwRtpOutTSRef.')
dcmIpgwRtpOutAdvancedVlanEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eVlanOn", 1), ("eVlanOff", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwRtpOutAdvancedVlanEnable.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpOutAdvancedVlanEnable.setDescription('Description.')
dcmIpgwRtpOutAdvancedVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwRtpOutAdvancedVlanId.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpOutAdvancedVlanId.setDescription('Range: 0-4094 12 bit, 0x0FFF not allowed, 0=no vlan id, only priority (ieee 802.1Q).')
dcmIpgwRtpOutAdvancedVlanPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwRtpOutAdvancedVlanPriority.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpOutAdvancedVlanPriority.setDescription('Range: 0-7  0=default 1=low 7=high (ieee 802.1D)')
dcmIpgwRtpOutAdvancedTtl = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwRtpOutAdvancedTtl.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpOutAdvancedTtl.setDescription('Time To Live value.')
dcmIpgwRtpOutAdvancedTos = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwRtpOutAdvancedTos.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpOutAdvancedTos.setDescription('TOS Value')
dcmIpgwRtpOutAdvancedUseSourceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eUsePortIp", 1), ("eUseSourceIp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwRtpOutAdvancedUseSourceAddress.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpOutAdvancedUseSourceAddress.setDescription('If this value is set to eUseSourceIp the IP address and UDP Port is used as source ')
dcmIpgwRtpOutAdvancedSourceIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 4, 1, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwRtpOutAdvancedSourceIpAddress.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpOutAdvancedSourceIpAddress.setDescription('Source IP Address.')
dcmIpgwRtpOutAdvancedSourceUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 4, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwRtpOutAdvancedSourceUdpPort.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpOutAdvancedSourceUdpPort.setDescription('Source UDP Port.')
dcmIpgwRtpOutFecTable = MibTable((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 5), )
if mibBuilder.loadTexts: dcmIpgwRtpOutFecTable.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpOutFecTable.setDescription('Description.')
dcmIpgwRtpOutFecEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 5, 1), ).setIndexNames((0, "SAEUROPE-DCM-MIB", "dcmIpgwRtpOutFecBoard"), (0, "SAEUROPE-DCM-MIB", "dcmIpgwRtpOutFecPort"), (0, "SAEUROPE-DCM-MIB", "dcmIpgwRtpOutFecRef"))
if mibBuilder.loadTexts: dcmIpgwRtpOutFecEntry.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpOutFecEntry.setDescription('Description.')
dcmIpgwRtpOutFecBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: dcmIpgwRtpOutFecBoard.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpOutFecBoard.setDescription('Identification of the board where the RTP output stream is located.')
dcmIpgwRtpOutFecPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: dcmIpgwRtpOutFecPort.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpOutFecPort.setDescription('Gbe A: Always 0.')
dcmIpgwRtpOutFecRef = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: dcmIpgwRtpOutFecRef.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpOutFecRef.setDescription('The Rtp output stream reference in dcmIpgwRtpOutTSRef.')
dcmIpgwRtpOutFecMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("eDisable", 1), ("e1DMode", 2), ("e2DMode", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwRtpOutFecMode.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpOutFecMode.setDescription('FEC Mode.')
dcmIpgwRtpOutFecSendingArrangement = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eProMpegCop3AnnexB", 1), ("eProMpegCop3AnnexA", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwRtpOutFecSendingArrangement.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpOutFecSendingArrangement.setDescription('FEC Sending Arrangement. Only eProMpegCop3AnnexB is supported.')
dcmIpgwRtpOutFecRowLength = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwRtpOutFecRowLength.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpOutFecRowLength.setDescription('FEC Row Length (L value).\n\t\t\t\tL x D must be <= 256.\n\t\t\t\tL must be >=4 for Fec2D')
dcmIpgwRtpOutFecColumnDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 5, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwRtpOutFecColumnDepth.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpOutFecColumnDepth.setDescription('FEC Column Depth (D value).\n\t\t\t\tL x D must be <= 256')
dcmIpgwRtpOutFecDestinationColIpAddressA = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 5, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwRtpOutFecDestinationColIpAddressA.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpOutFecDestinationColIpAddressA.setDescription('FEC Column Desination  IP Address.\n\t\t\t\tIf dcmIpgwRtpOutTSGbePortType is set ePairType this\n\t\t\t\taddress is used on both the A and B port.')
dcmIpgwRtpOutFecDestinationColUdpPortA = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 5, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwRtpOutFecDestinationColUdpPortA.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpOutFecDestinationColUdpPortA.setDescription('FEC Column Desination  UDP Port.\n\t\t\t\tIf dcmIpgwRtpOutTSGbePortType is set ePairType this\n\t\t\t\tudpport is used on both the A and B port.')
dcmIpgwRtpOutFecDestinationRowIpAddressA = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 5, 1, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwRtpOutFecDestinationRowIpAddressA.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpOutFecDestinationRowIpAddressA.setDescription('FEC Row Desination  IP Address.\n\t\t\t\tIf dcmIpgwRtpOutTSGbePortType is set ePairType this\n\t\t\t\taddress is used on both the A and B port.')
dcmIpgwRtpOutFecDestinationRowUdpPortA = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 5, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwRtpOutFecDestinationRowUdpPortA.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpOutFecDestinationRowUdpPortA.setDescription('FEC Row Desination UDP Port.\n\t\t\t\tIf dcmIpgwRtpOutTSGbePortType is set ePairType this\n\t\t\t\tudpport is used on both the A and B port.')
dcmIpgwRtpOutFecDestinationColIpAddressB = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 5, 1, 12), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwRtpOutFecDestinationColIpAddressB.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpOutFecDestinationColIpAddressB.setDescription('FEC Column Desination  IP Address.\n\t\t\t\tIf dcmIpgwRtpOutTSGbePortType is set ePairType this\n\t\t\t\taddress is not used.')
dcmIpgwRtpOutFecDestinationColUdpPortB = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 5, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwRtpOutFecDestinationColUdpPortB.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpOutFecDestinationColUdpPortB.setDescription('FEC Column Desination  UDP Port.\n\t\t\t\tIf dcmIpgwRtpOutTSGbePortType is set ePairType this\n\t\t\t\tudpport is not used.')
dcmIpgwRtpOutFecDestinationRowIpAddressB = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 5, 1, 14), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwRtpOutFecDestinationRowIpAddressB.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpOutFecDestinationRowIpAddressB.setDescription('FEC Row Desination  IP Address.\n\t\t\t\tIf dcmIpgwRtpOutTSGbePortType is set ePairType this\n\t\t\t\taddress is not used.')
dcmIpgwRtpOutFecDestinationRowUdpPortB = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 5, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwRtpOutFecDestinationRowUdpPortB.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpOutFecDestinationRowUdpPortB.setDescription('FEC Row Desination UDP Port.\n\t\t\t\tIf dcmIpgwRtpOutTSGbePortType is set ePairType this\n\t\t\t\tudpport is not used.')
dcmIpgwRtpOutFecOverheadTable = MibTable((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 6), )
if mibBuilder.loadTexts: dcmIpgwRtpOutFecOverheadTable.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpOutFecOverheadTable.setDescription('Description.')
dcmIpgwRtpOutFecOverheadEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 6, 1), ).setIndexNames((0, "SAEUROPE-DCM-MIB", "dcmIpgwRtpOutFecOverheadBoard"), (0, "SAEUROPE-DCM-MIB", "dcmIpgwRtpOutFecOverheadPort"), (0, "SAEUROPE-DCM-MIB", "dcmIpgwRtpOutFecOverheadRef"))
if mibBuilder.loadTexts: dcmIpgwRtpOutFecOverheadEntry.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpOutFecOverheadEntry.setDescription('Description.')
dcmIpgwRtpOutFecOverheadBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: dcmIpgwRtpOutFecOverheadBoard.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpOutFecOverheadBoard.setDescription('Identification of the board where the RTP output stream is located.')
dcmIpgwRtpOutFecOverheadPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: dcmIpgwRtpOutFecOverheadPort.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpOutFecOverheadPort.setDescription('Gbe A: Always 0.')
dcmIpgwRtpOutFecOverheadRef = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: dcmIpgwRtpOutFecOverheadRef.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpOutFecOverheadRef.setDescription('The Rtp output stream reference in dcmIpgwRtpOutTSRef.')
dcmIpgwRtpOutFecOverheadColumn = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmIpgwRtpOutFecOverheadColumn.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpOutFecOverheadColumn.setDescription('Column FEC Overhead in percentage fixed point 2 digit (x100), e.g. 10% -> 1000')
dcmIpgwRtpOutFecOverheadRow = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmIpgwRtpOutFecOverheadRow.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpOutFecOverheadRow.setDescription('Row FEC Overhead in percentage fixed point 2 digit (x100), e.g. 10% -> 1000')
dcmIpgwRtpOutFecOverheadTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 4, 6, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmIpgwRtpOutFecOverheadTotal.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwRtpOutFecOverheadTotal.setDescription('Total FEC Overhead in percentage fixed point 2 digit (x100), e.g. 10% -> 1000')
dcmIpgwAsiIn = MibIdentifier((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 5))
dcmIpgwAsiInConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 5, 1), )
if mibBuilder.loadTexts: dcmIpgwAsiInConfigTable.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwAsiInConfigTable.setDescription('Description.')
dcmIpgwAsiInConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 5, 1, 1), ).setIndexNames((0, "SAEUROPE-DCM-MIB", "dcmIpgwAsiInConfigBoard"), (0, "SAEUROPE-DCM-MIB", "dcmIpgwAsiInConfigPort"), (0, "SAEUROPE-DCM-MIB", "dcmIpgwAsiInConfigRef"))
if mibBuilder.loadTexts: dcmIpgwAsiInConfigEntry.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwAsiInConfigEntry.setDescription('Description.')
dcmIpgwAsiInConfigBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: dcmIpgwAsiInConfigBoard.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwAsiInConfigBoard.setDescription('Identification of the board where the ASI input port is located.')
dcmIpgwAsiInConfigPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 7)))
if mibBuilder.loadTexts: dcmIpgwAsiInConfigPort.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwAsiInConfigPort.setDescription('Identification of the ASI input port.\n\t\t\t\tASI port numbers range from 2..4\n\t\t\t\t')
dcmIpgwAsiInConfigRef = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: dcmIpgwAsiInConfigRef.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwAsiInConfigRef.setDescription('Same as the Port. An ASI port can only have 1 stream.')
dcmIpgwAsiInConfigMaxAllowedVideoFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("eSD", 1), ("eHD", 2), ("e3G", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwAsiInConfigMaxAllowedVideoFormat.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwAsiInConfigMaxAllowedVideoFormat.setDescription('Maximum allowed bandwidth')
dcmIpgwAsiInConfigUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 5, 1, 1, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwAsiInConfigUserName.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwAsiInConfigUserName.setDescription('Description.')
dcmIpgwAsiInConfigVideoOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-10000, 10000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwAsiInConfigVideoOffset.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwAsiInConfigVideoOffset.setDescription('Video Phase Offset in ns.')
dcmIpgwAsiInFormatTable = MibTable((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 5, 2), )
if mibBuilder.loadTexts: dcmIpgwAsiInFormatTable.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwAsiInFormatTable.setDescription('Description.')
dcmIpgwAsiInFormatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 5, 2, 1), ).setIndexNames((0, "SAEUROPE-DCM-MIB", "dcmIpgwAsiInFormatBoard"), (0, "SAEUROPE-DCM-MIB", "dcmIpgwAsiInFormatPort"), (0, "SAEUROPE-DCM-MIB", "dcmIpgwAsiInFormatRef"))
if mibBuilder.loadTexts: dcmIpgwAsiInFormatEntry.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwAsiInFormatEntry.setDescription('Description.')
dcmIpgwAsiInFormatBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: dcmIpgwAsiInFormatBoard.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwAsiInFormatBoard.setDescription('Identification of the board where the ASI input port is located.')
dcmIpgwAsiInFormatPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 7)))
if mibBuilder.loadTexts: dcmIpgwAsiInFormatPort.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwAsiInFormatPort.setDescription('Identification of the ASI input port.\n\t\t\t\tASI port numbers range from 2..4\n\t\t\t\t')
dcmIpgwAsiInFormatRef = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: dcmIpgwAsiInFormatRef.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwAsiInFormatRef.setDescription('Same as the Port. An ASI port can only have 1 stream.')
dcmIpgwAsiInFormatFramerate = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("e24fps", 1), ("e25fps", 2), ("e30fps", 3), ("e50fps", 4), ("e60fps", 5), ("e2997fps", 6), ("e5994fps", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmIpgwAsiInFormatFramerate.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwAsiInFormatFramerate.setDescription('The received framerate')
dcmIpgwAsiInFormatVideoformat = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("eSD", 1), ("eHD", 2), ("e3G", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmIpgwAsiInFormatVideoformat.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwAsiInFormatVideoformat.setDescription('The received video format.')
dcmIpgwAsiInFormatAspectRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("e4n3", 1), ("e16n9", 2), ("e14n9", 3), ("eNotAvailable", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmIpgwAsiInFormatAspectRatio.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwAsiInFormatAspectRatio.setDescription('The received Aspect Ratio.')
dcmIpgwAsiInFormatNbrOfLinesPerFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 5, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmIpgwAsiInFormatNbrOfLinesPerFrame.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwAsiInFormatNbrOfLinesPerFrame.setDescription('Received number of lines per frame.')
dcmIpgwAsiInFormatFrameBuildUp = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 5, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eProgressive", 1), ("eInterlaced", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmIpgwAsiInFormatFrameBuildUp.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwAsiInFormatFrameBuildUp.setDescription('Received Frame buildup.Progressive or Interlaced.')
dcmIpgwAsiInStatisticsCrcTable = MibTable((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 5, 3), )
if mibBuilder.loadTexts: dcmIpgwAsiInStatisticsCrcTable.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwAsiInStatisticsCrcTable.setDescription('Description.')
dcmIpgwAsiInStatisticsCrcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 5, 3, 1), ).setIndexNames((0, "SAEUROPE-DCM-MIB", "dcmIpgwAsiInStatisticsBoard"), (0, "SAEUROPE-DCM-MIB", "dcmIpgwAsiInStatisticsPort"), (0, "SAEUROPE-DCM-MIB", "dcmIpgwAsiInStatisticsRef"))
if mibBuilder.loadTexts: dcmIpgwAsiInStatisticsCrcEntry.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwAsiInStatisticsCrcEntry.setDescription('Description.')
dcmIpgwAsiInStatisticsBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: dcmIpgwAsiInStatisticsBoard.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwAsiInStatisticsBoard.setDescription('Identification of the board where the SDI input port is located.')
dcmIpgwAsiInStatisticsPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 7)))
if mibBuilder.loadTexts: dcmIpgwAsiInStatisticsPort.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwAsiInStatisticsPort.setDescription('Identification of the ASI input port.\n\t\t\t\tASI port numbers range from 2..4\n\t\t\t\t')
dcmIpgwAsiInStatisticsRef = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 5, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: dcmIpgwAsiInStatisticsRef.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwAsiInStatisticsRef.setDescription('Same as the Port. An ASI port can only have 1 stream.')
dcmIpgwAsiInStatisticsReset = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 5, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("eReset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwAsiInStatisticsReset.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwAsiInStatisticsReset.setDescription('Write-only value that resets all the CRC-counters.')
dcmIpgwAsiInStatisticsCrcErrors1Min = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 5, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmIpgwAsiInStatisticsCrcErrors1Min.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwAsiInStatisticsCrcErrors1Min.setDescription('1 min CRC counter.')
dcmIpgwAsiInStatisticsCrcErrors1Hour = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 5, 3, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmIpgwAsiInStatisticsCrcErrors1Hour.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwAsiInStatisticsCrcErrors1Hour.setDescription('1 hour CRC counter.')
dcmIpgwAsiInStatisticsCrcErrors1Day = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 5, 3, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmIpgwAsiInStatisticsCrcErrors1Day.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwAsiInStatisticsCrcErrors1Day.setDescription('1 day CRC counter.')
dcmIpgwAsiOut = MibIdentifier((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 6))
dcmIpgwAsiOutTSTable = MibTable((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 6, 1), )
if mibBuilder.loadTexts: dcmIpgwAsiOutTSTable.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwAsiOutTSTable.setDescription('Description.')
dcmIpgwAsiOutTSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 6, 1, 1), ).setIndexNames((0, "SAEUROPE-DCM-MIB", "dcmIpgwAsiOutTSBoard"), (0, "SAEUROPE-DCM-MIB", "dcmIpgwAsiOutTSPort"), (0, "SAEUROPE-DCM-MIB", "dcmIpgwAsiOutTSRef"))
if mibBuilder.loadTexts: dcmIpgwAsiOutTSEntry.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwAsiOutTSEntry.setDescription('Description.')
dcmIpgwAsiOutTSBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: dcmIpgwAsiOutTSBoard.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwAsiOutTSBoard.setDescription('Identification of the board where the ASI output port is located.')
dcmIpgwAsiOutTSPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 8)))
if mibBuilder.loadTexts: dcmIpgwAsiOutTSPort.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwAsiOutTSPort.setDescription('Identification of the ASI output port.\n\t\t\t\tSDI output ports numbers range from 5..7\n\t\t\t\tMonitor port is named 8')
dcmIpgwAsiOutTSRef = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: dcmIpgwAsiOutTSRef.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwAsiOutTSRef.setDescription('Same as the Port. An ASI port can only have 1 stream.')
dcmIpgwAsiOutTSActive = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eActive", 1), ("eNotActive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwAsiOutTSActive.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwAsiOutTSActive.setDescription('Activate or Pause the output of the ASI Port')
dcmIpgwASIOutJp2k = MibIdentifier((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 6, 2))
dcmIpgwASIOutJp2kConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 6, 2, 1), )
if mibBuilder.loadTexts: dcmIpgwASIOutJp2kConfigTable.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwASIOutJp2kConfigTable.setDescription('Description.')
dcmIpgwASIOutJp2kConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 6, 2, 1, 1), ).setIndexNames((0, "SAEUROPE-DCM-MIB", "dcmIpgwASIOutJp2kConfigBoard"), (0, "SAEUROPE-DCM-MIB", "dcmIpgwASIOutJp2kConfigPort"), (0, "SAEUROPE-DCM-MIB", "dcmIpgwASIOutJp2kConfigRef"))
if mibBuilder.loadTexts: dcmIpgwASIOutJp2kConfigEntry.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwASIOutJp2kConfigEntry.setDescription('Description.')
dcmIpgwASIOutJp2kConfigBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 6, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: dcmIpgwASIOutJp2kConfigBoard.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwASIOutJp2kConfigBoard.setDescription('Identification of the board where the ASI output port is located.')
dcmIpgwASIOutJp2kConfigPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 6, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 8)))
if mibBuilder.loadTexts: dcmIpgwASIOutJp2kConfigPort.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwASIOutJp2kConfigPort.setDescription('Identification of the ASI output port.\n\t\t\t\tSDI output ports numbers range from 5..7\n\t\t\t\tMonitor port is named 8')
dcmIpgwASIOutJp2kConfigRef = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 6, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: dcmIpgwASIOutJp2kConfigRef.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwASIOutJp2kConfigRef.setDescription('Same as the Port. An ASI port can only have 1 stream.')
dcmIpgwASIOutJp2kConfigVideoRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 6, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmIpgwASIOutJp2kConfigVideoRate.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwASIOutJp2kConfigVideoRate.setDescription('Actual encoded rate [bps].')
dcmIpgwASIOutJp2kConfigMaxStreamBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 6, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20, 900))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwASIOutJp2kConfigMaxStreamBitRate.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwASIOutJp2kConfigMaxStreamBitRate.setDescription('Maximum bit rate of an JP2K output stream incl. audio, MXF, and RTP overhead [bps]')
dcmIpgwASIOutJp2kConfigChromaWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 6, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwASIOutJp2kConfigChromaWeight.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwASIOutJp2kConfigChromaWeight.setDescription('Percentage of compressed bit rate used for chroma data.')
dcmIpgwASIOutJp2kConfigVitcEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 6, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eEnable", 1), ("eDisable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwASIOutJp2kConfigVitcEnable.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwASIOutJp2kConfigVitcEnable.setDescription('Enable VITC.')
dcmIpgwASIOutJp2kConfigViiEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 6, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eEnable", 1), ("eDisable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwASIOutJp2kConfigViiEnable.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwASIOutJp2kConfigViiEnable.setDescription('Enable VII.')
dcmIpgwASIOutJp2kConfigAfdEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 6, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eEnable", 1), ("eDisable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwASIOutJp2kConfigAfdEnable.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwASIOutJp2kConfigAfdEnable.setDescription('Enable AFD.')
dcmIpgwASIOutJp2kConfigTeletextBEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 6, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eEnable", 1), ("eDisable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwASIOutJp2kConfigTeletextBEnable.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwASIOutJp2kConfigTeletextBEnable.setDescription('Enable Teletext B.')
dcmIpgwASIOutJp2kConfigCCEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 6, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eEnable", 1), ("eDisable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwASIOutJp2kConfigCCEnable.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwASIOutJp2kConfigCCEnable.setDescription('Enable Close Caption.')
dcmIpgwASIOutJp2kConfigVPSEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 6, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eEnable", 1), ("eDisable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwASIOutJp2kConfigVPSEnable.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwASIOutJp2kConfigVPSEnable.setDescription('Enable Close Caption.')
dcmIpgwASIOutJp2kConfigTrans625F1Line = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 6, 2, 1, 1, 13), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwASIOutJp2kConfigTrans625F1Line.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwASIOutJp2kConfigTrans625F1Line.setDescription('The following lines is valid:\n\t\t\t\t625 Field 1: 6-22\n\t\t\t\t625 Field 2: 319-335\n\t\t\t\t525 Field 1: 10-19\n\t\t\t\t525 Field 2: 10-18\n\t\t\t\t')
dcmIpgwASIOutJp2kConfigTrans625F2Line = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 6, 2, 1, 1, 14), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwASIOutJp2kConfigTrans625F2Line.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwASIOutJp2kConfigTrans625F2Line.setDescription('The following lines is valid:\n\t\t\t\t625 Field 1: 6-22\n\t\t\t\t625 Field 2: 319-335\n\t\t\t\t525 Field 1: 10-19\n\t\t\t\t525 Field 2: 10-18\n\t\t\t\t')
dcmIpgwASIOutJp2kConfigTrans525F1Line = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 6, 2, 1, 1, 15), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwASIOutJp2kConfigTrans525F1Line.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwASIOutJp2kConfigTrans525F1Line.setDescription('The following lines is valid:\n\t\t\t\t625 Field 1: 6-22\n\t\t\t\t625 Field 2: 319-335\n\t\t\t\t525 Field 1: 10-19\n\t\t\t\t525 Field 2: 10-18\n\t\t\t\t')
dcmIpgwASIOutJp2kConfigTrans525F2Line = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 6, 2, 1, 1, 16), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwASIOutJp2kConfigTrans525F2Line.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwASIOutJp2kConfigTrans525F2Line.setDescription('The following lines is valid:\n\t\t\t\t625 Field 1: 6-22\n\t\t\t\t625 Field 2: 319-335\n\t\t\t\t525 Field 1: 10-19\n\t\t\t\t525 Field 2: 10-18\n\t\t\t\t')
dcmIpgwASIOutJp2kAudioTable = MibTable((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 6, 2, 2), )
if mibBuilder.loadTexts: dcmIpgwASIOutJp2kAudioTable.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwASIOutJp2kAudioTable.setDescription('Description.')
dcmIpgwASIOutJp2kAudioEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 6, 2, 2, 1), ).setIndexNames((0, "SAEUROPE-DCM-MIB", "dcmIpgwASIOutJp2kAudioBoard"), (0, "SAEUROPE-DCM-MIB", "dcmIpgwASIOutJp2kAudioPort"), (0, "SAEUROPE-DCM-MIB", "dcmIpgwASIOutJp2kAudioRef"))
if mibBuilder.loadTexts: dcmIpgwASIOutJp2kAudioEntry.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwASIOutJp2kAudioEntry.setDescription('Description.')
dcmIpgwASIOutJp2kAudioBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 6, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: dcmIpgwASIOutJp2kAudioBoard.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwASIOutJp2kAudioBoard.setDescription('Identification of the board where the ASI output stream is located.')
dcmIpgwASIOutJp2kAudioPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 6, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 8)))
if mibBuilder.loadTexts: dcmIpgwASIOutJp2kAudioPort.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwASIOutJp2kAudioPort.setDescription('Identification of the ASI output port.\n\t\t\t\tSDI output ports numbers range from 5..7\n\t\t\t\tMonitor port is named 8')
dcmIpgwASIOutJp2kAudioRef = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 6, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: dcmIpgwASIOutJp2kAudioRef.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwASIOutJp2kAudioRef.setDescription('Same as the Port. An ASI port can only have 1 stream.')
dcmIpgwASIOutJp2kAudioPair1Enable = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 6, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eEnable", 1), ("eDisable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwASIOutJp2kAudioPair1Enable.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwASIOutJp2kAudioPair1Enable.setDescription('Enable/Disable Audio pair on JP2K output.')
dcmIpgwASIOutJp2kAudioPair1Present = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 6, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ePresent", 1), ("eNotPresent", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmIpgwASIOutJp2kAudioPair1Present.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwASIOutJp2kAudioPair1Present.setDescription('Is Audio pair is present in the stream')
dcmIpgwASIOutJp2kAudioPair2Enable = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 6, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eEnable", 1), ("eDisable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwASIOutJp2kAudioPair2Enable.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwASIOutJp2kAudioPair2Enable.setDescription('Enable/Disable Audio pair on JP2K output.')
dcmIpgwASIOutJp2kAudioPair2Present = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 6, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ePresent", 1), ("eNotPresent", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmIpgwASIOutJp2kAudioPair2Present.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwASIOutJp2kAudioPair2Present.setDescription('Is Audio pair is present in the stream')
dcmIpgwASIOutJp2kAudioPair3Enable = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 6, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eEnable", 1), ("eDisable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwASIOutJp2kAudioPair3Enable.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwASIOutJp2kAudioPair3Enable.setDescription('Enable/Disable Audio pair on JP2K output.')
dcmIpgwASIOutJp2kAudioPair3Present = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 6, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ePresent", 1), ("eNotPresent", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmIpgwASIOutJp2kAudioPair3Present.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwASIOutJp2kAudioPair3Present.setDescription('Is Audio pair is present in the stream')
dcmIpgwASIOutJp2kAudioPair4Enable = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 6, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eEnable", 1), ("eDisable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwASIOutJp2kAudioPair4Enable.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwASIOutJp2kAudioPair4Enable.setDescription('Enable/Disable Audio pair on JP2K output.')
dcmIpgwASIOutJp2kAudioPair4Present = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 6, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ePresent", 1), ("eNotPresent", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmIpgwASIOutJp2kAudioPair4Present.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwASIOutJp2kAudioPair4Present.setDescription('Is Audio pair is present in the stream')
dcmIpgwASIOutJp2kAudioPair5Enable = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 6, 2, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eEnable", 1), ("eDisable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwASIOutJp2kAudioPair5Enable.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwASIOutJp2kAudioPair5Enable.setDescription('Enable/Disable Audio pair on JP2K output.')
dcmIpgwASIOutJp2kAudioPair5Present = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 6, 2, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ePresent", 1), ("eNotPresent", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmIpgwASIOutJp2kAudioPair5Present.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwASIOutJp2kAudioPair5Present.setDescription('Is Audio pair is present in the stream')
dcmIpgwASIOutJp2kAudioPair6Enable = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 6, 2, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eEnable", 1), ("eDisable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwASIOutJp2kAudioPair6Enable.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwASIOutJp2kAudioPair6Enable.setDescription('Enable/Disable Audio pair on JP2K output.')
dcmIpgwASIOutJp2kAudioPair6Present = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 6, 2, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ePresent", 1), ("eNotPresent", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmIpgwASIOutJp2kAudioPair6Present.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwASIOutJp2kAudioPair6Present.setDescription('Is Audio pair is present in the stream')
dcmIpgwASIOutJp2kAudioPair7Enable = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 6, 2, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eEnable", 1), ("eDisable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwASIOutJp2kAudioPair7Enable.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwASIOutJp2kAudioPair7Enable.setDescription('Enable/Disable Audio pair on JP2K output.')
dcmIpgwASIOutJp2kAudioPair7Present = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 6, 2, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ePresent", 1), ("eNotPresent", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmIpgwASIOutJp2kAudioPair7Present.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwASIOutJp2kAudioPair7Present.setDescription('Is Audio pair is present in the stream')
dcmIpgwASIOutJp2kAudioPair8Enable = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 6, 2, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eEnable", 1), ("eDisable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwASIOutJp2kAudioPair8Enable.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwASIOutJp2kAudioPair8Enable.setDescription('Enable/Disable Audio pair on JP2K output.')
dcmIpgwASIOutJp2kAudioPair8Present = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 6, 2, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ePresent", 1), ("eNotPresent", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmIpgwASIOutJp2kAudioPair8Present.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwASIOutJp2kAudioPair8Present.setDescription('Is Audio pair is present in the stream')
dcmIpgwSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 7))
dcmIpgwSystemGenlockEnableTable = MibTable((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 7, 1), )
if mibBuilder.loadTexts: dcmIpgwSystemGenlockEnableTable.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwSystemGenlockEnableTable.setDescription('Description.')
dcmIpgwSystemGenlockEnableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 7, 1, 1), ).setIndexNames((0, "SAEUROPE-DCM-MIB", "dcmIpgwSystemGenlockEnableBoard"), (0, "SAEUROPE-DCM-MIB", "dcmIpgwSystemGenlockEnablePort"), (0, "SAEUROPE-DCM-MIB", "dcmIpgwSystemGenlockEnableRef"))
if mibBuilder.loadTexts: dcmIpgwSystemGenlockEnableEntry.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwSystemGenlockEnableEntry.setDescription('Description.')
dcmIpgwSystemGenlockEnableBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: dcmIpgwSystemGenlockEnableBoard.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwSystemGenlockEnableBoard.setDescription('Identification of the board where the Genlock can be Enabled/Disabled.')
dcmIpgwSystemGenlockEnablePort = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: dcmIpgwSystemGenlockEnablePort.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwSystemGenlockEnablePort.setDescription('Not Used.')
dcmIpgwSystemGenlockEnableRef = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: dcmIpgwSystemGenlockEnableRef.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwSystemGenlockEnableRef.setDescription('Not used.\n\t\t\t\t')
dcmIpgwSystemGenlockEnableState = MibTableColumn((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 1, 8, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eActive", 1), ("eNotActive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmIpgwSystemGenlockEnableState.setStatus('current')
if mibBuilder.loadTexts: dcmIpgwSystemGenlockEnableState.setDescription('Enable or disable use of Genlock for the Board')
dcmMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 2))
dcmPhysVendorType = MibIdentifier((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 2, 1))
dcmDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 2, 1, 1))
dcmIoBoard = MibIdentifier((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 2, 1, 2))
dcm100BaseTPort = MibIdentifier((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 2, 1, 3))
dcmGbePort = MibIdentifier((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 2, 1, 4))
dcmAsiPort = MibIdentifier((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2, 3, 2, 1, 5))
mibBuilder.exportSymbols("SAEUROPE-DCM-MIB", dcmInputTsUdpPort=dcmInputTsUdpPort, dcmCfgOutputTsBoard=dcmCfgOutputTsBoard, dcmConfigAsiInputBandwidthLimitPort=dcmConfigAsiInputBandwidthLimitPort, dcmOptionalGroup=dcmOptionalGroup, dcmIpgwAsiOutTSPort=dcmIpgwAsiOutTSPort, dcmIpgwRtpOutJp2kAudioPair3Enable=dcmIpgwRtpOutJp2kAudioPair3Enable, dcmIpgwAsiInStatisticsRef=dcmIpgwAsiInStatisticsRef, dcmIpgwAsiInStatisticsCrcErrors1Hour=dcmIpgwAsiInStatisticsCrcErrors1Hour, dcmIpgwAsiInConfigPort=dcmIpgwAsiInConfigPort, dcmConfigAsiInputBandwidthLimitTable=dcmConfigAsiInputBandwidthLimitTable, dcmConfigOutputTsTable=dcmConfigOutputTsTable, dcmIpgwRtpInStatisticsEntry=dcmIpgwRtpInStatisticsEntry, dcmServiceBackupByBoardTable=dcmServiceBackupByBoardTable, dcmIpgwRtpInStatisticsReorderedPackets=dcmIpgwRtpInStatisticsReorderedPackets, dcmIpgwSdiInFormatPort=dcmIpgwSdiInFormatPort, dcmIpgwRtpInFormatEntry=dcmIpgwRtpInFormatEntry, dcmIpgwAsiInFormatBoard=dcmIpgwAsiInFormatBoard, dcmIpgwRtpInFecStatusTotalOverhead=dcmIpgwRtpInFecStatusTotalOverhead, dcmIpgwAsiInConfigBoard=dcmIpgwAsiInConfigBoard, dcmIpgwASIOutJp2kAudioPair8Enable=dcmIpgwASIOutJp2kAudioPair8Enable, dcmIpgwASIOutJp2kConfigCCEnable=dcmIpgwASIOutJp2kConfigCCEnable, dcmIpgwASIOutJp2kAudioPair5Present=dcmIpgwASIOutJp2kAudioPair5Present, dcmIpgwRtpInStatitsticsCrcBoard=dcmIpgwRtpInStatitsticsCrcBoard, dcmIpgwRtpOutJp2kEnableRef=dcmIpgwRtpOutJp2kEnableRef, dcmIpgwASIOutJp2kConfigAfdEnable=dcmIpgwASIOutJp2kConfigAfdEnable, dcmOutputTsStandard=dcmOutputTsStandard, dcmIpgwRtpOutFecOverheadEntry=dcmIpgwRtpOutFecOverheadEntry, dcmIpgwASIOutJp2kConfigVPSEnable=dcmIpgwASIOutJp2kConfigVPSEnable, dcmIpgwRtpOutFecOverheadRow=dcmIpgwRtpOutFecOverheadRow, dcmIpgwAsiOutTSActive=dcmIpgwAsiOutTSActive, dcmIpgwASIOutJp2kConfigBoard=dcmIpgwASIOutJp2kConfigBoard, dcmCfgInputTsPort=dcmCfgInputTsPort, dcmSrvBuBuSrvServiceID=dcmSrvBuBuSrvServiceID, dcmConfigInputTsEntry=dcmConfigInputTsEntry, dcmOutputTsFecColIp=dcmOutputTsFecColIp, dcmInputTransportStreamTable=dcmInputTransportStreamTable, dcmIpgwRtpInFecStatusBoard=dcmIpgwRtpInFecStatusBoard, dcmIpgwRtpInHitlessMode=dcmIpgwRtpInHitlessMode, dcmIpgwRtpOutJp2kConfigTrans525F1Line=dcmIpgwRtpOutJp2kConfigTrans525F1Line, dcmOutputTsIpAddress=dcmOutputTsIpAddress, dcmSettings=dcmSettings, dcmDpiSettings=dcmDpiSettings, dcmIpgwASIOutJp2kConfigEntry=dcmIpgwASIOutJp2kConfigEntry, dcmIpgwRtpOutJp2kAudioPair5Present=dcmIpgwRtpOutJp2kAudioPair5Present, dcmIpgwSdiOutTSBoard=dcmIpgwSdiOutTSBoard, dcmIpgwRtpOutAdvancedVlanId=dcmIpgwRtpOutAdvancedVlanId, dcmOutputTransportStreamTable=dcmOutputTransportStreamTable, dcmIpgwSdiOutTSActive=dcmIpgwSdiOutTSActive, dcmCfgOutputTsStandard=dcmCfgOutputTsStandard, dcmIpgwRtpOutAdvancedPort=dcmIpgwRtpOutAdvancedPort, dcmCfgTransparentOutputTsIndex=dcmCfgTransparentOutputTsIndex, dcmIpgwRtpOutJp2kAudioPair1Enable=dcmIpgwRtpOutJp2kAudioPair1Enable, dcmInputTsPort=dcmInputTsPort, dcmIpgwRtpInFecConfigTable=dcmIpgwRtpInFecConfigTable, dcmOutputTsBoard=dcmOutputTsBoard, dcmCfgOutputTsIndex=dcmCfgOutputTsIndex, dcmTrGroupPortNumber=dcmTrGroupPortNumber, dcmIpgwSdiOutTSSrcPort=dcmIpgwSdiOutTSSrcPort, dcmCfgSrvOutputServiceName=dcmCfgSrvOutputServiceName, dcmIpgwRtpOutFecOverheadTable=dcmIpgwRtpOutFecOverheadTable, dcmIpgwRtpOutJp2kAudioPair2Present=dcmIpgwRtpOutJp2kAudioPair2Present, dcmIpgwRtpInFecStatusLatency=dcmIpgwRtpInFecStatusLatency, dcmSrvBuSettingsBehavior=dcmSrvBuSettingsBehavior, dcmIpgwRtpInHitlessWindowPackets=dcmIpgwRtpInHitlessWindowPackets, dcmIpgwASIOutJp2kConfigTrans625F1Line=dcmIpgwASIOutJp2kConfigTrans625F1Line, dcmIpgwRtpInHitlessDelay=dcmIpgwRtpInHitlessDelay, dcmCfgOutputTsRowStatus=dcmCfgOutputTsRowStatus, dcmIpgwSdiOutTSPort=dcmIpgwSdiOutTSPort, dcmIpgwAsiIn=dcmIpgwAsiIn, dcmPhysVendorType=dcmPhysVendorType, dcmIpgwSdiInFormatAspectRatio=dcmIpgwSdiInFormatAspectRatio, dcmIpgwRtpInFecStatusColumnOverhead=dcmIpgwRtpInFecStatusColumnOverhead, dcmIpgwAsiInFormatFrameBuildUp=dcmIpgwAsiInFormatFrameBuildUp, dcmGbePort=dcmGbePort, dcmIpgwRtpOutFecDestinationColUdpPortA=dcmIpgwRtpOutFecDestinationColUdpPortA, dcmTrGroupTable=dcmTrGroupTable, dcmTsAutoPassNewServices=dcmTsAutoPassNewServices, dcmInputSrvState=dcmInputSrvState, dcmTsAutoPassUnreferencedPIDs=dcmTsAutoPassUnreferencedPIDs, dcmIpgwRtpOutJp2kEnableBoard=dcmIpgwRtpOutJp2kEnableBoard, dcmIpgwAsiInConfigTable=dcmIpgwAsiInConfigTable, dcmIpgwRtpOutFecDestinationRowUdpPortA=dcmIpgwRtpOutFecDestinationRowUdpPortA, dcmIpgwRtpInStatisticsCrcErrors1Day=dcmIpgwRtpInStatisticsCrcErrors1Day, dcmIpgwRtpOutFecDestinationRowIpAddressB=dcmIpgwRtpOutFecDestinationRowIpAddressB, dcmIpgwRtpOutFecDestinationColIpAddressA=dcmIpgwRtpOutFecDestinationColIpAddressA, dcmOutputTsFecRowL=dcmOutputTsFecRowL, dcmIpgwRtpInFecStatusPort=dcmIpgwRtpInFecStatusPort, dcmSrvBuSettingsToMainDelay=dcmSrvBuSettingsToMainDelay, dcmCfgTransparentOutputTsRowStatus=dcmCfgTransparentOutputTsRowStatus, dcmIpgwRtpInTSVideoOffset=dcmIpgwRtpInTSVideoOffset, dcmIpgwSdiOut=dcmIpgwSdiOut, dcmIpgwSettings=dcmIpgwSettings, dcmIpgwSdiInStatisticsCrcTable=dcmIpgwSdiInStatisticsCrcTable, dcm100BaseTPort=dcm100BaseTPort, dcmIpgwASIOutJp2kAudioRef=dcmIpgwASIOutJp2kAudioRef, dcmServiceBackupByBoardEntry=dcmServiceBackupByBoardEntry, dcmIpgwRtpInStatisticsPort=dcmIpgwRtpInStatisticsPort, dcmIpgwRtpOutJp2kConfigChromaWeight=dcmIpgwRtpOutJp2kConfigChromaWeight, dcmIpgwRtpInFecConfigColumnUdpPort=dcmIpgwRtpInFecConfigColumnUdpPort, dcmIoBoard=dcmIoBoard, dcmIpgwRtpOutTSPort=dcmIpgwRtpOutTSPort, dcmIpgwRtpOutJp2kAudioPair5Enable=dcmIpgwRtpOutJp2kAudioPair5Enable, dcmTsBackupSettingsEntry=dcmTsBackupSettingsEntry, dcmSrvBuSettingsServiceID=dcmSrvBuSettingsServiceID, dcmIpgwRtpInTSDejitter=dcmIpgwRtpInTSDejitter, dcmIpgwAsiInFormatVideoformat=dcmIpgwAsiInFormatVideoformat, dcmTrTsRowStatus=dcmTrTsRowStatus, dcmTrSrvOutputTsIndex=dcmTrSrvOutputTsIndex, dcmTrGroupType=dcmTrGroupType, dcmIpgwRtpOutFecBoard=dcmIpgwRtpOutFecBoard, dcmIpgwSdiInStatisticsCrcErrors1Hour=dcmIpgwSdiInStatisticsCrcErrors1Hour, dcmCfgOutputTsPort=dcmCfgOutputTsPort, dcmIpgwRtpInStatisticsCrcErrors1min=dcmIpgwRtpInStatisticsCrcErrors1min, dcmIpgwRtpInFecConfigColumnIpAddress=dcmIpgwRtpInFecConfigColumnIpAddress, dcmIpgwRtpOutJp2kConfigViiEnable=dcmIpgwRtpOutJp2kConfigViiEnable, dcmIpgwRtpInFormatTable=dcmIpgwRtpInFormatTable, dcmCfgInputTsRowStatus=dcmCfgInputTsRowStatus, dcmInputServiceTable=dcmInputServiceTable, dcmCfgSrvForceOutputServiceName=dcmCfgSrvForceOutputServiceName, dcmIpgwAsiInConfigRef=dcmIpgwAsiInConfigRef, dcmMuxSettings=dcmMuxSettings, dcmOutputTsActive=dcmOutputTsActive, dcmIpgwRtpOut=dcmIpgwRtpOut, dcmIpgwRtpInFecConfigRef=dcmIpgwRtpInFecConfigRef, dcmIpgwRtpInFecStatusRef=dcmIpgwRtpInFecStatusRef, dcmIpgwRtpInTSUdpPort=dcmIpgwRtpInTSUdpPort, dcmIpgwSdiInFormatBoard=dcmIpgwSdiInFormatBoard, dcmIpgwSystem=dcmIpgwSystem, dcmIpgwRtpInStatisticsDuplicatePackets=dcmIpgwRtpInStatisticsDuplicatePackets, saEuropeDcmModuleCompliance=saEuropeDcmModuleCompliance, dcmIpgwSdiInFormatNbrOfLinesPerFrame=dcmIpgwSdiInFormatNbrOfLinesPerFrame, dcmGbeSettings=dcmGbeSettings, dcmCfgInputTsIndex=dcmCfgInputTsIndex, dcmConfigOutputTsEntry=dcmConfigOutputTsEntry, dcmMibGroups=dcmMibGroups, dcmIpgwRtpInFecConfigBoard=dcmIpgwRtpInFecConfigBoard, dcmIpgwRtpOutFecDestinationRowUdpPortB=dcmIpgwRtpOutFecDestinationRowUdpPortB, dcmMIB=dcmMIB, dcmDvbS2InputStreamEntry=dcmDvbS2InputStreamEntry, dcmIpgwASIOutJp2kAudioPort=dcmIpgwASIOutJp2kAudioPort, dcmIpgwRtpOutJp2kEnableEntry=dcmIpgwRtpOutJp2kEnableEntry, dcmIpgwRtpOutTSRef=dcmIpgwRtpOutTSRef, dcmIpgwRtpInStatisticsReset=dcmIpgwRtpInStatisticsReset, dcmIpgwSdiInConfigBoard=dcmIpgwSdiInConfigBoard, dcmCfgInputTsSrcIpAddress=dcmCfgInputTsSrcIpAddress, dcmIpgwRtpOutFecSendingArrangement=dcmIpgwRtpOutFecSendingArrangement, dcmOutputTsFecMode=dcmOutputTsFecMode, dcmIpgwASIOutJp2kConfigTeletextBEnable=dcmIpgwASIOutJp2kConfigTeletextBEnable, dcmCfgSrvOutputTsIndex=dcmCfgSrvOutputTsIndex, dcmIpgwAsiInStatisticsCrcTable=dcmIpgwAsiInStatisticsCrcTable, dcmIpgwRtpInFecConfigEntry=dcmIpgwRtpInFecConfigEntry, dcmIpgwRtpOutJp2kAudioPair4Enable=dcmIpgwRtpOutJp2kAudioPair4Enable, dcmIpgwRtpOutAdvancedTtl=dcmIpgwRtpOutAdvancedTtl, dcmAsiSettings=dcmAsiSettings, dcmIpgwRtpInFecStatusFecColumnDepth=dcmIpgwRtpInFecStatusFecColumnDepth, dcmIpgwRtpOutJp2kConfigTrans525F2Line=dcmIpgwRtpOutJp2kConfigTrans525F2Line, dcmIpgwRtpOutAdvancedTos=dcmIpgwRtpOutAdvancedTos, dcmConfigInputTsTable=dcmConfigInputTsTable, dcmTrGroupRowStatus=dcmTrGroupRowStatus, dcmIpgwRtpInFecConfigRowUdpPort=dcmIpgwRtpInFecConfigRowUdpPort, dcmCfgSrvInputServiceID=dcmCfgSrvInputServiceID, dcmProcessingServiceTable=dcmProcessingServiceTable, dcmIpgwRtpOutTSDestinationIpAddressB=dcmIpgwRtpOutTSDestinationIpAddressB, dcmIpgwASIOutJp2kAudioPair1Present=dcmIpgwASIOutJp2kAudioPair1Present, dcmSrvBuOutputSrvTsIndex=dcmSrvBuOutputSrvTsIndex, dcmGbePortModeTable=dcmGbePortModeTable, dcmIpgwRtpInHitlessPort=dcmIpgwRtpInHitlessPort, dcmIpgwASIOutJp2kAudioPair7Present=dcmIpgwASIOutJp2kAudioPair7Present, dcmIpgwRtpOutAdvancedSourceUdpPort=dcmIpgwRtpOutAdvancedSourceUdpPort, dcmCfgOutputTsIpAddress=dcmCfgOutputTsIpAddress, dcmServiceBackupServicesEntry=dcmServiceBackupServicesEntry, dcmInputTransportStreamEntry=dcmInputTransportStreamEntry, dcmIpgwRtpOutTSDestinationUdpPortA=dcmIpgwRtpOutTSDestinationUdpPortA, dcmIpgwASIOutJp2kAudioPair4Present=dcmIpgwASIOutJp2kAudioPair4Present, dcmTsBuSettingsBuTsIndex=dcmTsBuSettingsBuTsIndex, dcmTrSrvUpperLimitServiceBitRate=dcmTrSrvUpperLimitServiceBitRate, dcmTsBackup=dcmTsBackup, dcmIpgwRtpOutTSEntry=dcmIpgwRtpOutTSEntry, dcmIpgwRtpOutJp2kAudioPort=dcmIpgwRtpOutJp2kAudioPort, dcmIpgwSdiInConfigEntry=dcmIpgwSdiInConfigEntry, dcmIpgwSdiOutTSSrcRef=dcmIpgwSdiOutTSSrcRef, dcmIpgwAsiInFormatAspectRatio=dcmIpgwAsiInFormatAspectRatio, dcmIpgwASIOutJp2k=dcmIpgwASIOutJp2k, dcmTrSettings=dcmTrSettings, dcmGbePortModeEntry=dcmGbePortModeEntry, dcmIpgwSdiInFormatFrameBuildUp=dcmIpgwSdiInFormatFrameBuildUp, dcmIpgwRtpOutJp2kAudioPair7Enable=dcmIpgwRtpOutJp2kAudioPair7Enable, dcmTsAutoPassTable=dcmTsAutoPassTable, dcmIpgwAsiInStatisticsBoard=dcmIpgwAsiInStatisticsBoard, dcmTrGroupId=dcmTrGroupId, dcmDpiRowStatus=dcmDpiRowStatus, dcmIpgwRtpOutFecRef=dcmIpgwRtpOutFecRef, dcmIpgwRtpInHitlessRef=dcmIpgwRtpInHitlessRef, dcmServiceBackupByTsEntry=dcmServiceBackupByTsEntry, dcmIpgwRtpInTSRowStatus=dcmIpgwRtpInTSRowStatus, dcmIpgwAsiInFormatEntry=dcmIpgwAsiInFormatEntry, dcmOutputTsOriginalNetworkId=dcmOutputTsOriginalNetworkId, dcmMibObjects=dcmMibObjects, dcmSrvBuSettingsTsIndex=dcmSrvBuSettingsTsIndex, dcmIpgwRtpInFormatFrameBuildUp=dcmIpgwRtpInFormatFrameBuildUp, dcmProcessingServiceEntry=dcmProcessingServiceEntry, dcmIpgwRtpOutJp2kAudioTable=dcmIpgwRtpOutJp2kAudioTable, dcmOutputTsIndex=dcmOutputTsIndex, dcmIpgwRtpOutJp2kAudioBoard=dcmIpgwRtpOutJp2kAudioBoard, dcmCfgSrvOutputServiceID=dcmCfgSrvOutputServiceID, dcmTsBuSettingsToBackupDelay=dcmTsBuSettingsToBackupDelay, dcmIpgwASIOutJp2kConfigPort=dcmIpgwASIOutJp2kConfigPort, dcmIpgwRtpOutJp2kAudioPair4Present=dcmIpgwRtpOutJp2kAudioPair4Present, dcmIpgwRtpOutAdvancedRef=dcmIpgwRtpOutAdvancedRef, dcmIpgwRtpOutJp2kConfigTrans625F2Line=dcmIpgwRtpOutJp2kConfigTrans625F2Line, dcmInputSrvServiceID=dcmInputSrvServiceID, dcmConfigAsiInputBandwidthLimitEntry=dcmConfigAsiInputBandwidthLimitEntry, dcmConfigServiceTable=dcmConfigServiceTable, dcmDpiInputServiceId=dcmDpiInputServiceId, dcmIpgwAsiOut=dcmIpgwAsiOut, dcmIpgwRtpInTSTable=dcmIpgwRtpInTSTable, dcmIpgwRtpOutJp2kConfigTable=dcmIpgwRtpOutJp2kConfigTable, dcmIpgwRtpOutJp2kConfigRef=dcmIpgwRtpOutJp2kConfigRef, dcmIpgwAsiOutTSRef=dcmIpgwAsiOutTSRef, dcmIpgwRtpOutJp2kConfigCCEnable=dcmIpgwRtpOutJp2kConfigCCEnable, dcmIpgwSdiOutTSEntry=dcmIpgwSdiOutTSEntry, dcmProcessingSrvName=dcmProcessingSrvName, dcmServiceBackupServicesTable=dcmServiceBackupServicesTable, dcmIpgwSystemGenlockEnableEntry=dcmIpgwSystemGenlockEnableEntry, dcmIpgwRtpInTSUsername=dcmIpgwRtpInTSUsername, dcmServiceBackup=dcmServiceBackup, dcmIpgwSdiInConfigUserName=dcmIpgwSdiInConfigUserName, dcmTrTransportStreamEntry=dcmTrTransportStreamEntry, dcmOutputTsTransportStreamId=dcmOutputTsTransportStreamId, dcmCfgTransparentSourceTsIndex=dcmCfgTransparentSourceTsIndex, dcmIpgwRtpInFecStatusFecRowLength=dcmIpgwRtpInFecStatusFecRowLength, dcmDpiManualTrigger=dcmDpiManualTrigger, dcmOutputTsFecColD=dcmOutputTsFecColD, dcmGbePortModeMode=dcmGbePortModeMode, dcmDeviceBackupSettings=dcmDeviceBackupSettings, dcmIpgwSystemGenlockEnableState=dcmIpgwSystemGenlockEnableState, dcmIpgwRtpInTSEntry=dcmIpgwRtpInTSEntry, dcmIpgwAsiInStatisticsCrcErrors1Min=dcmIpgwAsiInStatisticsCrcErrors1Min, dcmIpgwSystemGenlockEnableRef=dcmIpgwSystemGenlockEnableRef, dcmIpgwRtpOutAdvancedVlanEnable=dcmIpgwRtpOutAdvancedVlanEnable, dcmIpgwRtpOutAdvancedSourceIpAddress=dcmIpgwRtpOutAdvancedSourceIpAddress, dcmTrTsGroupId=dcmTrTsGroupId, dcmIpgwRtpInFormatFramerate=dcmIpgwRtpInFormatFramerate, dcmIpgwRtpInTSIpAddress=dcmIpgwRtpInTSIpAddress, dcmIpgwASIOutJp2kAudioPair6Enable=dcmIpgwASIOutJp2kAudioPair6Enable, dcmCfgInputTsUdpPort=dcmCfgInputTsUdpPort, dcmIpgwRtpOutTSBoard=dcmIpgwRtpOutTSBoard, dcmIpgwRtpOutJp2kEnableTable=dcmIpgwRtpOutJp2kEnableTable, dcmIpgwRtpOutJp2kAudioEntry=dcmIpgwRtpOutJp2kAudioEntry, dcmCfgSrvInputTsIndex=dcmCfgSrvInputTsIndex, dcmIpgwRtpOutFecDestinationColIpAddressB=dcmIpgwRtpOutFecDestinationColIpAddressB, dcmIpgwASIOutJp2kAudioPair5Enable=dcmIpgwASIOutJp2kAudioPair5Enable, dcmIpgwAsiInConfigEntry=dcmIpgwAsiInConfigEntry, dcmIpgwASIOutJp2kConfigTrans525F1Line=dcmIpgwASIOutJp2kConfigTrans525F1Line)
mibBuilder.exportSymbols("SAEUROPE-DCM-MIB", dcmIpgwRtpOutJp2kAudioPair8Enable=dcmIpgwRtpOutJp2kAudioPair8Enable, dcmIpgwAsiInConfigVideoOffset=dcmIpgwAsiInConfigVideoOffset, dcmIpgwRtpOutJp2kEnableState=dcmIpgwRtpOutJp2kEnableState, dcmTsBackupSettingsTable=dcmTsBackupSettingsTable, dcmTrTsOutputTsIndex=dcmTrTsOutputTsIndex, dcmIpgwASIOutJp2kConfigVideoRate=dcmIpgwASIOutJp2kConfigVideoRate, dcmIpgwRtpOutJp2kConfigPort=dcmIpgwRtpOutJp2kConfigPort, dcmInputTsSrcIpAddress=dcmInputTsSrcIpAddress, dcmDpiInputTsIndex=dcmDpiInputTsIndex, dcmDevice=dcmDevice, dcmIpgwRtpInJp2kEnableBoard=dcmIpgwRtpInJp2kEnableBoard, dcmTsBuSettingsToMainDelay=dcmTsBuSettingsToMainDelay, dcmIpgwASIOutJp2kAudioPair3Enable=dcmIpgwASIOutJp2kAudioPair3Enable, dcmIpgwRtpOutJp2kConfigTrans625F1Line=dcmIpgwRtpOutJp2kConfigTrans625F1Line, dcmIpgwASIOutJp2kAudioPair4Enable=dcmIpgwASIOutJp2kAudioPair4Enable, dcmIpgwAsiOutTSBoard=dcmIpgwAsiOutTSBoard, dcmIpgwSdiInFormatRef=dcmIpgwSdiInFormatRef, dcmIpgwRtpInStatisticsValidPackets=dcmIpgwRtpInStatisticsValidPackets, dcmIpgwRtpOutTSDestinationIpAddressA=dcmIpgwRtpOutTSDestinationIpAddressA, dcmIpgwRtpInStatisticsRef=dcmIpgwRtpInStatisticsRef, dcmServiceBackupByBoardBoard=dcmServiceBackupByBoardBoard, dcmCfgOutputTsActive=dcmCfgOutputTsActive, dcmIpgwRtpInStatisticsCrcErrors1Hour=dcmIpgwRtpInStatisticsCrcErrors1Hour, dcmIpgwRtpInFecStatusRowOverhead=dcmIpgwRtpInFecStatusRowOverhead, dcmIpgwRtpOutAdvancedUseSourceAddress=dcmIpgwRtpOutAdvancedUseSourceAddress, dcmMandatoryGroup=dcmMandatoryGroup, dcmIpgwASIOutJp2kConfigViiEnable=dcmIpgwASIOutJp2kConfigViiEnable, dcmIpgwRtpOutJp2kEnablePort=dcmIpgwRtpOutJp2kEnablePort, dcmTsBuSettingsRowStatus=dcmTsBuSettingsRowStatus, dcmConfigAsiInputBandwidthLimitBitrate=dcmConfigAsiInputBandwidthLimitBitrate, dcmIpgwRtpOutJp2kConfigEntry=dcmIpgwRtpOutJp2kConfigEntry, dcmIpgwSdiInFormatEntry=dcmIpgwSdiInFormatEntry, dcmIpgwASIOutJp2kAudioPair2Present=dcmIpgwASIOutJp2kAudioPair2Present, dcmProcessingSrvTsIndex=dcmProcessingSrvTsIndex, dcmIpgwASIOutJp2kConfigRef=dcmIpgwASIOutJp2kConfigRef, dcmIpgwRtpOutFecOverheadPort=dcmIpgwRtpOutFecOverheadPort, dcmDpiPrimaryChannelName=dcmDpiPrimaryChannelName, dcmIpgwRtpInStatisticsMissingPackets=dcmIpgwRtpInStatisticsMissingPackets, dcmIpgwAsiOutTSTable=dcmIpgwAsiOutTSTable, dcmDvbS2InputStreamISI=dcmDvbS2InputStreamISI, dcmCfgTransparentOutputTsActive=dcmCfgTransparentOutputTsActive, dcmIpgwSdiInStatisticsCrcErrors1Min=dcmIpgwSdiInStatisticsCrcErrors1Min, dcmIpgwRtpOutTSGbePortType=dcmIpgwRtpOutTSGbePortType, dcmIpgwRtpInFormatVideoformat=dcmIpgwRtpInFormatVideoformat, dcmOutputTsFecRowUdp=dcmOutputTsFecRowUdp, dcmServiceBackupSettingsTable=dcmServiceBackupSettingsTable, dcmCfgSrvState=dcmCfgSrvState, dcmIpgwRtpOutFecColumnDepth=dcmIpgwRtpOutFecColumnDepth, dcmIpgwRtpOutJp2kConfigMaxStreamBitRate=dcmIpgwRtpOutJp2kConfigMaxStreamBitRate, dcmTrSrvTypeForService=dcmTrSrvTypeForService, dcmIpgwRtpOutJp2kAudioPair2Enable=dcmIpgwRtpOutJp2kAudioPair2Enable, dcmServiceBackupSettingsEntry=dcmServiceBackupSettingsEntry, dcmOutputTsPort=dcmOutputTsPort, dcmIpgwRtpOutTSSrcRef=dcmIpgwRtpOutTSSrcRef, dcmCfgInputTsState=dcmCfgInputTsState, dcmIpgwRtpOutFecPort=dcmIpgwRtpOutFecPort, dcmIpgwRtpInJp2kEnableState=dcmIpgwRtpInJp2kEnableState, dcmIpgwSdiInFormatVideoformat=dcmIpgwSdiInFormatVideoformat, dcmIpgwRtpInStatisticsFixedPackets=dcmIpgwRtpInStatisticsFixedPackets, dcmIpgwRtpOutFecOverheadColumn=dcmIpgwRtpOutFecOverheadColumn, dcmDvbS2InputStreamTsIndex=dcmDvbS2InputStreamTsIndex, dcmOutputTsFecEntry=dcmOutputTsFecEntry, dcmConfigAsiInputBandwidthLimitBoard=dcmConfigAsiInputBandwidthLimitBoard, dcmIpgwRtpOutFecDestinationColUdpPortB=dcmIpgwRtpOutFecDestinationColUdpPortB, dcmIpgwAsiInStatisticsPort=dcmIpgwAsiInStatisticsPort, dcmOutputTsUdpPort=dcmOutputTsUdpPort, dcmIpgwAsiInFormatRef=dcmIpgwAsiInFormatRef, dcmTrSrvPriority=dcmTrSrvPriority, dcmConfigServiceEntry=dcmConfigServiceEntry, dcmTsAutoPassEntry=dcmTsAutoPassEntry, dcmIpgwRtpIn=dcmIpgwRtpIn, dcmTrSrvOutputServiceID=dcmTrSrvOutputServiceID, dcmIpgwSdiInStatisticsPort=dcmIpgwSdiInStatisticsPort, dcmIpgwRtpOutJp2k=dcmIpgwRtpOutJp2k, dcmIpgwSdiInStatisticsReset=dcmIpgwSdiInStatisticsReset, dcmIpgwSdiInStatisticsCrcErrors1Day=dcmIpgwSdiInStatisticsCrcErrors1Day, dcmAsiPort=dcmAsiPort, dcmIpgwRtpOutFecRowLength=dcmIpgwRtpOutFecRowLength, dcmIpgwRtpInStatitsticsCrcTable=dcmIpgwRtpInStatitsticsCrcTable, dcmIpgwRtpOutJp2kAudioPair3Present=dcmIpgwRtpOutJp2kAudioPair3Present, dcmTsBuSettingsBehavior=dcmTsBuSettingsBehavior, dcmDpiPrimaryChannelMode=dcmDpiPrimaryChannelMode, dcmIpgwSdiInConfigRef=dcmIpgwSdiInConfigRef, dcmIpgwASIOutJp2kAudioPair2Enable=dcmIpgwASIOutJp2kAudioPair2Enable, dcmIpgwRtpOutJp2kAudioPair7Present=dcmIpgwRtpOutJp2kAudioPair7Present, dcmOutputTsFecRowIp=dcmOutputTsFecRowIp, dcmTrGroupBoardNumber=dcmTrGroupBoardNumber, dcmIpgwSdiInConfigMaxAllowedVideoFormat=dcmIpgwSdiInConfigMaxAllowedVideoFormat, dcmCfgTransparentOutputTsIpAddress=dcmCfgTransparentOutputTsIpAddress, dcmIpgwRtpInFecConfigMode=dcmIpgwRtpInFecConfigMode, dcmServiceBackupByBoardStatus=dcmServiceBackupByBoardStatus, dcmCfgOutputTsOriginalNetworkId=dcmCfgOutputTsOriginalNetworkId, dcmDvbS2InputStreamTable=dcmDvbS2InputStreamTable, dcmCfgOutputTsUdpPort=dcmCfgOutputTsUdpPort, dcmConfigTransparentOutputTsEntry=dcmConfigTransparentOutputTsEntry, dcmIpgwSdiInFormatFramerate=dcmIpgwSdiInFormatFramerate, dcmTrSrvLowerLimitServiceBitRate=dcmTrSrvLowerLimitServiceBitRate, dcmIpgwRtpInHitlessTable=dcmIpgwRtpInHitlessTable, dcmIpgwASIOutJp2kAudioPair8Present=dcmIpgwASIOutJp2kAudioPair8Present, dcmIpgwSdiOutTSTable=dcmIpgwSdiOutTSTable, dcmIpgwRtpInFecConfigPort=dcmIpgwRtpInFecConfigPort, dcmIpgwRtpInHitlessBoard=dcmIpgwRtpInHitlessBoard, dcmIpgwRtpOutTSDestinationUdpPortB=dcmIpgwRtpOutTSDestinationUdpPortB, dcmIpgwSdiOutTSRef=dcmIpgwSdiOutTSRef, dcmIpgwRtpInTSPort=dcmIpgwRtpInTSPort, dcmIpgwRtpOutJp2kAudioPair1Present=dcmIpgwRtpOutJp2kAudioPair1Present, dcmIpgwRtpInStatitsticsCrcPort=dcmIpgwRtpInStatitsticsCrcPort, dcmIpgwSdiInConfigPort=dcmIpgwSdiInConfigPort, dcmIpgwAsiOutTSEntry=dcmIpgwAsiOutTSEntry, dcmServiceBackupByTsStatus=dcmServiceBackupByTsStatus, dcmIpgwRtpInJp2kEnablePort=dcmIpgwRtpInJp2kEnablePort, dcmSrvBuSettingsState=dcmSrvBuSettingsState, dcmIpgwASIOutJp2kConfigMaxStreamBitRate=dcmIpgwASIOutJp2kConfigMaxStreamBitRate, dcmIpgwRtpInFecStatusEntry=dcmIpgwRtpInFecStatusEntry, dcmIpgwRtpOutFecDestinationRowIpAddressA=dcmIpgwRtpOutFecDestinationRowIpAddressA, dcmIpgwRtpInJp2kEnableRef=dcmIpgwRtpInJp2kEnableRef, dcmTrSrvRowStatus=dcmTrSrvRowStatus, dcmInputTsIpAddress=dcmInputTsIpAddress, dcmIpgwAsiInStatisticsCrcEntry=dcmIpgwAsiInStatisticsCrcEntry, dcmIpgwSystemGenlockEnablePort=dcmIpgwSystemGenlockEnablePort, dcmIpgwRtpOutFecOverheadBoard=dcmIpgwRtpOutFecOverheadBoard, dcmIpgwSdiOutTSSrcBoard=dcmIpgwSdiOutTSSrcBoard, dcmIpgwAsiInFormatPort=dcmIpgwAsiInFormatPort, dcmIpgwRtpInFecStatusRowPresent=dcmIpgwRtpInFecStatusRowPresent, dcmIpgwASIOutJp2kAudioBoard=dcmIpgwASIOutJp2kAudioBoard, dcmIpgwRtpInFormatRef=dcmIpgwRtpInFormatRef, dcmServiceBackupByTsTsIndex=dcmServiceBackupByTsTsIndex, dcmCfgOutputTsTransportStreamId=dcmCfgOutputTsTransportStreamId, dcmIpgwRtpInTSMaxAllowedVideoFormat=dcmIpgwRtpInTSMaxAllowedVideoFormat, dcmCfgInputTsBoard=dcmCfgInputTsBoard, dcmIpgwRtpInFecConfigRowIpAddress=dcmIpgwRtpInFecConfigRowIpAddress, dcmIpgwASIOutJp2kConfigTrans525F2Line=dcmIpgwASIOutJp2kConfigTrans525F2Line, dcmInputSrvName=dcmInputSrvName, dcmTsAutoPassNewEMMs=dcmTsAutoPassNewEMMs, dcmIpgwASIOutJp2kConfigTable=dcmIpgwASIOutJp2kConfigTable, dcmIpgwRtpOutFecOverheadRef=dcmIpgwRtpOutFecOverheadRef, dcmCfgTransparentOutputTsPort=dcmCfgTransparentOutputTsPort, dcmCfgSrvForceOutputServiceID=dcmCfgSrvForceOutputServiceID, dcmIpgwASIOutJp2kAudioPair7Enable=dcmIpgwASIOutJp2kAudioPair7Enable, dcmIpgwRtpOutJp2kAudioRef=dcmIpgwRtpOutJp2kAudioRef, dcmIpgwRtpOutJp2kConfigVPSEnable=dcmIpgwRtpOutJp2kConfigVPSEnable, dcmIpgwAsiInConfigUserName=dcmIpgwAsiInConfigUserName, dcmIpgwRtpInTSRef=dcmIpgwRtpInTSRef, dcmIpgwAsiInStatisticsCrcErrors1Day=dcmIpgwAsiInStatisticsCrcErrors1Day, dcmCfgTransparentOutputTsUdpPort=dcmCfgTransparentOutputTsUdpPort, dcmTsAutoPassRowStatus=dcmTsAutoPassRowStatus, dcmIpgwSdiIn=dcmIpgwSdiIn, dcmConfigAsiInputBandwidthLimitStatus=dcmConfigAsiInputBandwidthLimitStatus, dcmIpgwAsiInStatisticsReset=dcmIpgwAsiInStatisticsReset, dcmDpiChannelTable=dcmDpiChannelTable, dcmIpgwRtpInFormatAspectRatio=dcmIpgwRtpInFormatAspectRatio, dcmTsBuSettingsTsIndex=dcmTsBuSettingsTsIndex, dcmIpgwRtpOutJp2kAudioPair6Present=dcmIpgwRtpOutJp2kAudioPair6Present, dcmIpgwRtpInFormatPort=dcmIpgwRtpInFormatPort, dcmSrvBuBuSrvTsIndex=dcmSrvBuBuSrvTsIndex, saEuropeDcmModule=saEuropeDcmModule, dcmTsBuSettingsState=dcmTsBuSettingsState, dcmInputServiceEntry=dcmInputServiceEntry, dcmIpgwASIOutJp2kAudioPair1Enable=dcmIpgwASIOutJp2kAudioPair1Enable, dcmCfgSrvRowStatus=dcmCfgSrvRowStatus, dcmSrvBuRowStatus=dcmSrvBuRowStatus, dcmIpgwRtpOutAdvancedVlanPriority=dcmIpgwRtpOutAdvancedVlanPriority, dcmIpgwRtpOutFecTable=dcmIpgwRtpOutFecTable, dcmTrTransportStreamTable=dcmTrTransportStreamTable, dcmSrvBuOutputSrvServiceID=dcmSrvBuOutputSrvServiceID, dcmIpgwRtpInFecStatusColumnPresent=dcmIpgwRtpInFecStatusColumnPresent, dcmIpgwASIOutJp2kConfigChromaWeight=dcmIpgwASIOutJp2kConfigChromaWeight, dcmIpgwSdiInStatisticsCrcEntry=dcmIpgwSdiInStatisticsCrcEntry, dcmIpgwRtpInStatisticsBoard=dcmIpgwRtpInStatisticsBoard, dcmIpgwSdiInFormatTable=dcmIpgwSdiInFormatTable, dcmIpgwRtpInHitlessEntry=dcmIpgwRtpInHitlessEntry, dcmIpgwRtpOutJp2kConfigAfdEnable=dcmIpgwRtpOutJp2kConfigAfdEnable, dcmSrvBuBuSrvState=dcmSrvBuBuSrvState, dcmIpgwRtpOutTSActive=dcmIpgwRtpOutTSActive, dcmIpgwRtpInStatisticsCrcReset=dcmIpgwRtpInStatisticsCrcReset, dcmIpgwRtpOutJp2kConfigVitcEnable=dcmIpgwRtpOutJp2kConfigVitcEnable, dcmIpgwRtpInJp2kEnableTable=dcmIpgwRtpInJp2kEnableTable, dcmIpgwRtpOutAdvancedTable=dcmIpgwRtpOutAdvancedTable, dcmOutputTsFecTable=dcmOutputTsFecTable, dcmIpgwASIOutJp2kAudioPair3Present=dcmIpgwASIOutJp2kAudioPair3Present, dcmTrServiceConfigTable=dcmTrServiceConfigTable, dcmIpgwRtpOutFecEntry=dcmIpgwRtpOutFecEntry, dcmCfgOutputTsTransportStreamBitRate=dcmCfgOutputTsTransportStreamBitRate, dcmIpgwRtpOutJp2kAudioPair6Enable=dcmIpgwRtpOutJp2kAudioPair6Enable, dcmTrGroupEntry=dcmTrGroupEntry, dcmIpgwASIOutJp2kAudioTable=dcmIpgwASIOutJp2kAudioTable, dcmIpgwRtpInJp2kEnableEntry=dcmIpgwRtpInJp2kEnableEntry, dcmCfgInputTsIpAddress=dcmCfgInputTsIpAddress, dcmIpgwAsiInConfigMaxAllowedVideoFormat=dcmIpgwAsiInConfigMaxAllowedVideoFormat, dcmConfigTransparentOutputTsTable=dcmConfigTransparentOutputTsTable, dcmOutputTsTransportStreamBitRate=dcmOutputTsTransportStreamBitRate, dcmIpgwASIOutJp2kAudioPair6Present=dcmIpgwASIOutJp2kAudioPair6Present, dcmIpgwSystemGenlockEnableTable=dcmIpgwSystemGenlockEnableTable, dcmIpgwASIOutJp2kAudioEntry=dcmIpgwASIOutJp2kAudioEntry, dcmIpgwRtpInStatitsticsCrcRef=dcmIpgwRtpInStatitsticsCrcRef, dcmCfgTransparentOutputTsBoard=dcmCfgTransparentOutputTsBoard, dcmIpgwAsiInFormatFramerate=dcmIpgwAsiInFormatFramerate, dcmOutputTransportStreamEntry=dcmOutputTransportStreamEntry, dcmIpgwRtpInFormatNbrOfLinesPerFrame=dcmIpgwRtpInFormatNbrOfLinesPerFrame, dcmIpgwRtpInStatisticsOutOfRangePackets=dcmIpgwRtpInStatisticsOutOfRangePackets, dcmIpgwRtpOutJp2kConfigVideoRate=dcmIpgwRtpOutJp2kConfigVideoRate, dcmIpgwRtpOutTSTable=dcmIpgwRtpOutTSTable, dcmGbePortModeBoardNumber=dcmGbePortModeBoardNumber, dcmIpgwRtpOutTSSrcBoard=dcmIpgwRtpOutTSSrcBoard, dcmIpgwRtpInStatitsticsCrcEntry=dcmIpgwRtpInStatitsticsCrcEntry, dcmIpgwRtpInStatisticsTable=dcmIpgwRtpInStatisticsTable, dcmServiceBackupByTsTable=dcmServiceBackupByTsTable, dcmOutputTsFecSendingArrangement=dcmOutputTsFecSendingArrangement, dcmIpgwRtpOutFecOverheadTotal=dcmIpgwRtpOutFecOverheadTotal, dcmDeviceBackupActivateDevice=dcmDeviceBackupActivateDevice, dcmDeviceSettings=dcmDeviceSettings, dcmIpgwSystemGenlockEnableBoard=dcmIpgwSystemGenlockEnableBoard, dcmIpgwRtpOutJp2kConfigEncapsulationType=dcmIpgwRtpOutJp2kConfigEncapsulationType, dcmIpgwASIOutJp2kConfigVitcEnable=dcmIpgwASIOutJp2kConfigVitcEnable, dcmSrvBuSettingsToBackupDelay=dcmSrvBuSettingsToBackupDelay, dcmIpgwSdiInConfigTable=dcmIpgwSdiInConfigTable, dcmInputSrvTsIndex=dcmInputSrvTsIndex, dcmDpiChannelStatus=dcmDpiChannelStatus, dcmIpgwRtpOutJp2kAudioPair8Present=dcmIpgwRtpOutJp2kAudioPair8Present, dcmIpgwRtpInTsBoard=dcmIpgwRtpInTsBoard, dcmIpgwSdiInStatisticsRef=dcmIpgwSdiInStatisticsRef, dcmIpgwRtpOutAdvancedBoard=dcmIpgwRtpOutAdvancedBoard, dcmTrGroupBitRate=dcmTrGroupBitRate, dcmTrSrvGroupId=dcmTrSrvGroupId, dcmTrGroupOutputTs=dcmTrGroupOutputTs, dcmIpgwRtpInFecStatusTable=dcmIpgwRtpInFecStatusTable, dcmIpgwRtpOutTSSrcPort=dcmIpgwRtpOutTSSrcPort, dcmIpgwRtpOutFecMode=dcmIpgwRtpOutFecMode, dcmIpgwAsiInFormatNbrOfLinesPerFrame=dcmIpgwAsiInFormatNbrOfLinesPerFrame, dcmIpgwRtpOutJp2kConfigBoard=dcmIpgwRtpOutJp2kConfigBoard, dcmProcessingSrvState=dcmProcessingSrvState, PYSNMP_MODULE_ID=saEuropeDcmModule, dcmOutputTsFecColUdp=dcmOutputTsFecColUdp, dcmIpgwSdiInStatisticsBoard=dcmIpgwSdiInStatisticsBoard, dcmIpgwRtpOutJp2kConfigTeletextBEnable=dcmIpgwRtpOutJp2kConfigTeletextBEnable, dcmIpgwRtpOutTSRowStatus=dcmIpgwRtpOutTSRowStatus, dcmIpgwRtpOutAdvancedEntry=dcmIpgwRtpOutAdvancedEntry, dcmIpgwAsiInFormatTable=dcmIpgwAsiInFormatTable, dcmIpgwRtpInFormatBoard=dcmIpgwRtpInFormatBoard, dcmProcessingSrvServiceID=dcmProcessingSrvServiceID, dcmIpgwASIOutJp2kConfigTrans625F2Line=dcmIpgwASIOutJp2kConfigTrans625F2Line, dcmIpgwGroup=dcmIpgwGroup, dcmTrServiceConfigEntry=dcmTrServiceConfigEntry, dcmInputTsIndex=dcmInputTsIndex, dcmDpiChannelEntry=dcmDpiChannelEntry, dcmInputTsBoard=dcmInputTsBoard)
