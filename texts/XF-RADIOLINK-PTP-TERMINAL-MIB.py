#
# PySNMP MIB module XF-RADIOLINK-PTP-TERMINAL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/ericsson/XF-RADIOLINK-PTP-TERMINAL-MIB
# Produced by pysmi-1.1.12 at Mon Oct  7 02:26:34 2024
# On host fv-az1986-495 platform Linux version 6.8.0-1014-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion")
entLogicalIndex, entPhysicalIndex = mibBuilder.importSymbols("ENTITY-MIB", "entLogicalIndex", "entPhysicalIndex")
HCPerfCurrentCount, = mibBuilder.importSymbols("HC-PerfHist-TC-MIB", "HCPerfCurrentCount")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
PerfIntervalCount, PerfCurrentCount = mibBuilder.importSymbols("PerfHist-TC-MIB", "PerfIntervalCount", "PerfCurrentCount")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
TimeTicks, Counter64, iso, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, Bits, Counter32, IpAddress, ObjectIdentity, NotificationType, Integer32, ModuleIdentity, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Counter64", "iso", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "Bits", "Counter32", "IpAddress", "ObjectIdentity", "NotificationType", "Integer32", "ModuleIdentity", "Unsigned32")
TextualConvention, TruthValue, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "DisplayString")
xfRadioLink, = mibBuilder.importSymbols("XF-TOP-MIB", "xfRadioLink")
xfRadioLinkPtpTerminalMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1))
xfRadioLinkPtpTerminalMIB.setRevisions(('2020-03-17 00:00', '2019-12-20 00:00', '2019-11-26 00:00', '2018-05-23 00:00', '2018-04-27 00:00', '2018-04-06 00:00', '2017-09-19 00:00', '2017-05-24 00:00', '2016-10-24 00:00', '2016-05-11 00:00', '2016-05-10 00:00', '2016-02-22 00:00', '2016-02-05 00:00', '2015-06-08 00:00', '2015-02-26 00:00', '2014-07-07 00:00', '2014-02-20 00:00', '2014-01-15 00:00', '2013-11-22 00:00', '2013-11-19 14:00', '2013-09-25 00:00', '2013-09-16 00:00', '2013-07-06 00:00', '2013-03-28 00:00', '2012-10-26 00:00', '2012-08-01 00:00', '2012-06-24 00:00', '2012-05-29 00:00', '2011-12-16 00:00', '2011-12-04 00:00', '2011-11-22 00:00', '2011-11-17 00:00', '2011-11-15 00:00', '2011-09-09 00:00', '2011-07-08 00:00', '2011-06-27 00:00', '2011-06-01 00:00', '2011-05-23 00:00', '2011-03-04 00:00', '2011-02-09 00:00', '2011-02-01 00:00', '2011-01-10 00:00', '2010-12-21 00:00', '2010-12-16 00:00', '2010-12-14 00:00', '2010-12-13 00:00', '2010-11-23 00:00', '2010-10-25 00:00', '2010-10-21 00:00', '2010-09-13 00:00', '2010-09-02 00:00', '2010-08-20 00:00', '2010-06-15 00:00', '2010-06-04 00:00', '2010-05-27 00:00', '2010-01-19 00:00', '2009-11-18 00:00', '2009-09-18 00:00', '2009-06-26 00:00', '2009-06-24 00:00', '2009-04-14 00:00', '2009-03-11 00:00', '2009-03-04 00:00', '2009-02-02 00:00', '2009-01-05 00:00', '2008-12-04 00:00', '2008-10-02 00:00', '2008-09-16 00:00', '2008-08-15 00:00', '2008-06-25 00:00', '2008-06-24 00:00', '2008-06-18 00:00', '2008-06-04 00:00', '2008-06-03 00:00', '2008-04-09 00:00', '2008-03-03 00:00', '2007-10-24 00:00', '2007-08-14 00:00', '2007-07-05 00:00', '2007-07-03 00:00', '2007-07-02 00:00', '2007-06-04 00:00', '2007-03-16 00:00', '2007-01-17 00:00', '2006-11-14 00:00', '2006-09-20 00:00', '2006-09-19 13:10', '2006-09-12 00:00', '2006-09-05 00:00', '2006-03-20 00:00', '2006-02-24 00:00', '2006-01-31 00:00', '2005-03-01 00:00', '2004-12-13 00:00', '2004-07-02 00:00', '2004-06-22 00:00', '2004-06-16 00:00', '2004-05-25 00:00', '2004-05-17 10:00', '2004-01-20 10:00', '2003-12-17 10:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: xfRadioLinkPtpTerminalMIB.setRevisionsDescriptions(('\n            Rev PBB13\n            xfRLPMCurrent15mTable: added the following MOs:\n            - xfPMCurrent15mESR\n            - xfPMCurrent15mSESR\n            - xfPMCurrent15mBBER\n\n            xfRLPMCurrent24hTable: added the following MOs:\n            - xfPMCurrent24hESR\n            - xfPMCurrent24hSESR\n            - xfPMCurrent24hBBER\n            ', '\n            Rev PBB12\n            Increased upper limit from 135 to 145 dBm and default value adjusted for following MOs:\n            - xfExtRFPMSetThreshold15mTLTM\n            - xfExtRFPMResetThreshold15mTLTM\n            - xfExtRFPMSetThreshold24hTLTM\n            ', '\n            Rev PBB11\n            Increased upper limit from 35 to 45 dBm for following MOs:\n            - xfExtRFPMTLTS1Threshold\n            - xfExtRFPMCurrent24hTLMin\n            - xfExtRFPMCurrent24hTLMax\n            - xfExtRFPMInterval24hTLMin\n            - xfExtRFPMInterval24hTLMax\n            - xfExtRFPMCurrent15mTLMin\n            - xfExtRFPMCurrent15mTLMax\n            - xfExtRFPMInterval15mTLMin\n            - xfExtRFPMInterval15mTLMax\n            ', '\n            Rev PBB10\n            Revert change of maximum and default values for Extended PM Thresholds\n            in following tables:\n            - xfRLExtRFPMConfigTable\n            - xfRLExtRFPMCurrent24hTable\n            - xfRLExtRFPMInterval24hTable\n            - xfRLExtRFPMCurrent15mTable\n            - xfRLExtRFPMInterval15mTable\n            ', '\n            Rev PBB9\n            Updated maximum values of xfPMTLTS1Thresholds.\n            ', '\n            Rev PBB8\n            Updated unit of measurement of XPI level in performance monitoring counters:\n            from dBm to dB.\n            ', '\n            Rev PBB7\n            - Type of MOs xfPMCurrent24hBBEs/xfPMInterval24hBBEs and xfPMCurrent24hBBs/xfPMInterval24hBBs\n              changed to HCPerfCurrentCount.\n            - Updated description of MO xfPMSetThreshold15mBBEs: 9000 -> 9900.\n            ', '\n            Rev PBB6\n            Introduction of new FF 60 MHz.\n            ', '\n            Rev PBB5\n            New objects in xfRLPtpTerminalXTable:\n            xfTermPacketMaxCapacity and xfTermPacketMinCapacity.\n            ', "\n            Rev PBB4\n            - 'xfTermSpectrumEfficiencyClassObsolete' MO moved to obsolete conformance group.\n            ", "\n            Rev PBB3\n            - 'Obsolete' MOs set back to 'current' status\n              in order to remove warnings.\n            ", '\n            Rev PBB2\n            - Description updated for some MOs.\n            - Readability improvements (formatting).\n            ', '\n            Rev PBB1\n            - Added tables:\n              * xfRLExtRFPMConfigTable\n              * xfRLExtRFPMCurrent24hTable\n              * xfRLExtRFPMInterval24hTable\n              * xfRLExtRFPMCurrent15mTable\n              * xfRLExtRFPMInterval15mTable\n              * xfRLExtRAUPMCurrent24hTable\n              * xfRLExtRAUPMInterval24hTable\n              * xfRLExtRAUPMCurrent15mTable\n              * xfRLExtRAUPMInterval15mTable\n            - Obsoleted the following MOs in xfRLPMConfigTable:\n              * xfPMRLTS1Threshold\n              * xfPMSetThreshold15mRLTS1\n              * xfPMResetThreshold15mRLTS1\n              * xfPMRLTS2Threshold\n              * xfPMSetThreshold15mRLTS2\n              * xfPMResetThreshold15mRLTS2\n              * xfPMSetThreshold15mRLTM\n              * xfPMResetThreshold15mRLTM\n              * xfPMTLTS1Threshold\n              * xfPMSetThreshold15mTLTS1\n              * xfPMResetThreshold15mTLTS1\n              * xfPMSetThreshold15mTLTM\n              * xfPMResetThreshold15mTLTM\n              * xfPMSetThreshold24hRLTS1\n              * xfPMSetThreshold24hRLTS2\n              * xfPMSetThreshold24hRLTM\n              * xfPMSetThreshold24hTLTS1\n              * xfPMSetThreshold24hTLTM\n            ', '\n            Rev PBA6\n            Updated description text for the following MOs:\n                    xfPMSetThreshold15mRLTM,     xfPMResetThreshold15mRLTM,\n                    xfPMSetThreshold24hRLTM,     xfPMSetThreshold15mTLTM,\n                    xfPMResetThreshold15mTLTM,   xfPMSetThreshold24hTLTM,\n                    xfPMCurrent24hMSEMin,        xfPMCurrent24hMSEMax,\n                    xfPMInterval24hMSEMin,       xfPMInterval24hMSEMax,\n                    xfPMCurrent15mMSEMin,        xfPMCurrent15mMSEMax,\n                    xfPMInterval15mMSEMin,       xfPMInterval15mMSEMax\n            ', '\n            Rev PBA5\n            Add new MIBs for improved power monitoring\n            Table xfRLPMConfigTable new MOs:\n                    xfPMRLTS1Threshold,          xfPMSetThreshold15mRLTS1,\n                    xfPMResetThreshold15mRLTS1,  xfPMRLTS2Threshold,\n                    xfPMSetThreshold15mRLTS2,    xfPMResetThreshold15mRLTS2,\n                    xfPMSetThreshold15mRLTM,     xfPMResetThreshold15mRLTM,\n                    xfPMTLTS1Threshold,          xfPMSetThreshold15mTLTS1,\n                    xfPMResetThreshold15mTLTS1,  xfPMSetThreshold15mTLTM,\n                    xfPMResetThreshold15mTLTM,   xfPMSetThreshold24hRLTS1,\n                    xfPMSetThreshold24hRLTS2,    xfPMSetThreshold24hRLTM,\n                    xfPMSetThreshold24hTLTS1,    xfPMSetThreshold24hTLTM\n            Table xfRLPMCurrent24hTable new MOs:\n                    xfPMCurrent24hRLTS1,         xfPMCurrent24hRLTS2,\n                    xfPMCurrent24hRLMin,         xfPMCurrent24hRLMax,\n                    xfPMCurrent24hTLTS1,         xfPMCurrent24hTLMin,\n                    xfPMCurrent24hTLMax,         xfPMCurrent24hMSEMin,\n                    xfPMCurrent24hMSEMax,        xfPMCurrent24hXPIMin,\n                    xfPMCurrent24hXPIMax\n            Table xfRLPMInterval24hTable New MOs:\n                    xfPMInterval24hRLTS1,        xfPMInterval24hRLTS2,\n                    xfPMInterval24hRLMin,        xfPMInterval24hRLMax,\n                    xfPMInterval24hTLTS1,        xfPMInterval24hTLMin,\n                    xfPMInterval24hTLMax,        xfPMInterval24hMSEMin,\n                    xfPMInterval24hMSEMax,       xfPMInterval24hXPIMin,\n                    xfPMInterval24hXPIMax\n            Table xfRLPMCurrent15mTable new MOs:\n                    xfPMCurrent15mRLTS1,         xfPMCurrent15mRLTS2,\n                    xfPMCurrent15mRLMin,         xfPMCurrent15mRLMax,\n                    xfPMCurrent15mTLTS1,         xfPMCurrent15mTLMin,\n                    xfPMCurrent15mTLMax,         xfPMCurrent15mMSEMin,\n                    xfPMCurrent15mMSEMax,        xfPMCurrent15mXPIMin,\n                    xfPMCurrent15mXPIMax\n            Table xfRLPMInterval15mTable new MOs:\n                    xfPMInterval15mRLTS1,        xfPMInterval15mRLTS2,\n                    xfPMInterval15mRLMin,        xfPMInterval15mRLMax,\n                    xfPMInterval15mTLTS1,        xfPMInterval15mTLMin,\n                    xfPMInterval15mTLMax,        xfPMInterval15mMSEMin,\n                    xfPMInterval15mMSEMax,       xfPMInterval15mXPIMin,\n                    xfPMInterval15mXPIMax\n            ', '\n            Rev PBA4\n            Comments adjusted.\n            ', '\n            Rev PBA3\n            Added SDC Performance tables:\n            - xfRLPMSDCGainCurrent15mTable\n            - xfRLPMSDCGainInterval15mTable\n            - xfRLPMSDCGainCurrent24hTable\n            - xfRLPMSDCGainInterval24hTable\n            - xfRLPMSDCGainConfigTable\n            ', '\n            Rev PBA2\n            xfTermChannelModeCapability object extended with values:\n            - ccdp16QAM(3)\n            - ccdp64QAM(4)\n            - ccdp128QAM(5)\n            ', '\n            Rev PBA1\n            Minor changes for removal of warnings.\n            ', '\n            Rev AZ\n            Official R-State for M14A\n            ', 'Fixed error in xfRLPtpTerminalXTable definition', 'Remoed objects in xfRLPtpTerminalXTable:\n            xfTermXpicStatus, xfTermXpiLevel, xfTermMSELevel', 'New objects in xfRLPtpTerminalXTable:\n            xfTermXpicStatus, xfTermXpiLevel, xfTermMSELevel', '\n            Rev PAV1\n            New objects in xfRLPtpTerminalXTable:\n            xfTermConfiguredBitPipeCapacity and xfTermTribCapacityConfigured', '\n            Rev PAY2\n            * New values for XfRLPMAMCurrent15mTable:  xfPMAMCurrent15m4QAMEnRLB  -> xfPMAMCurrent15m1024QAMEnRLB\n            * New values for xfRLPMAMCurrent24hTable:  xfPMAMCurrent24h4QAMEnRLB  -> xfPMAMCurrent24h1024QAMEnRLB\n            * New values for XfRLPMAMInterval15mTable: xfPMAMInterval15m4QAMEnRLB -> xfPMAMInterval15m1024QAMEnRLB\n            * New values for XfRLPMAMInterval24hTable: xfPMAMInterval24h4QAMEnRLB -> xfPMAMInterval24h1024QAMEnRLB\n            * New value  for xfRLPtpTerminalPerformanceTable: xfTermTimeElapsedEnRLBExt\n            ', '\n            Rev PAF3\n            * New value for xfTermProtection: enhancedRLB.\n            * New values of xfRLProtectionMode: enhancedRLBProtected and enhancedRLBExtended.\n            * New values for xfTermProtectionCapability: nplus1 and enhancedRLB.\n            ', '\n            Rev PAF2\n            * pdhToTdmAndSDHToSFPHAndSDHToPtP added to xfTermInterfaces\n            * Adjusted values in xfTermBerAlarmThresholdCapability\n            ', '\n            Rev PAF1\n            Added xfTermBerAlarmThresholdCapability\n            ', '\n            Rev AE\n            Changed to full revision\n            ', '\n            Rev PAE3\n            Change name of mcOneStm1OneDS1LH\n            to oneStm1OneDS1LH\n            ', '\n            Rev PAE2\n            New capacity value, mcOneStm1OneDS1LH(26)\n            New capacity value, mcOneStm1OneDS1LH(25)\n            to terminalcapacitycapability array\n            ', '\n            Rev PAE1\n            Added fftAdmodStatic(10), fftXpicAdmodStatic(11),\n            fftAdmodStaticLH(12) and fftXpicAdmodStaticLH(13)\n            to xfTermFrameFormatType\n            ', '\n            Rev AD\n            Updated to an official revision\n            ', '\n            Rev PAD4\n            Added vr150(13), vr250(14), vr300(15),\n            vr400(16) and vr450(17) license\n            ', '\n            Rev PAD3\n            New capacity value, oneStm1OneE1LH(24)\n            to terminalcapacitycapability array\n            ', '\n          Rev PAD2\n          New capacity value, oneStm1OneE1LH(25)\n          ', '\n          Rev PAD1\n          Changes for TN 5.0.\n          New objects in xfRLPtpTerminalXTable:\n           xfTermFadingRates and xfTermFadingRatesCapability.\n          ', '\n          Rev AC\n          Official R-state for TN 4.4 FP\n          ', '\n          Rev PAC11\n          Changes for Mini Link LH 1.0.\n          Added fftStaticLH(6), fftAdmodLH(7),\n                fftXpicLH(8) andfftXpicAdmodLH(9)to xfTermFrameFormatType\n          ', '\n          Rev PAC10\n          Changes for TN 4.4FP.\n          Added capability-bit terminalCapacityLicense(3) to\n          MO xfTermCapability in table xfRLPtpTerminalXTable.\n          ', '\n          Rev PAC9\n          Changes for TN 4.4FP.\n          Correction for 1024QAM.\n          ', "\n          Rev PAC8\n          Changes for TN 4.4FP.\n          Added MO xfTermCapacityLicense to\n          xfRLPtpTerminalXTable.\n          Added table xfRLPtpTerminalCapacityLicenseTable\n          and it's MOs xfTermCapacityLicenseRange\n          xfTermMaxCapacityRange and xfTermMaxTribCapacityRange\n          ", '\n          Rev PAC7\n          Changes for TN 4.4FP.\n          Added capability-bit txSwitchOverConfiguration to\n          MO xfRLProtectionCapability in table xfRLProtection.\n\n          Changed MO name from xfTermAdaptiveCapability to xfTermCapability\n          and changed the BITS name changing the supports-prefix to a adaptive-prefix\n          and added fragmentedTributaries.\n          ', '\n          Rev PAC6\n          Changes for TN 4.4FP.\n          Changed MO-name from xfRLRemoteTxSwitchOverConfiguration to xfRLTxSwitchOverConfiguration.\n          ', '\n          Rev PAC5\n          Added Describtion for TermAutoRemoveLoopEnable\n          Changed name on supportsAtpcFallbackWithAutoRestore\n          to supportsAtpcFallbackTimer.\n          Added Describtion for xfTermAdaptiveManualMode\n          ', '\n          Rev PAC4\n          Changes for TN 4.4FP.\n          Added 1024QAM.\n          ', '\n          Rev PAC3\n          Changes for TN 4.4FP.\n          Added xfRLRemoteTxSwitchOverConfiguration to xfRLProtectionTable.\n          ', '\n          Rev PAC2\n          Changes for TN 4.4FP.\n          Added xfTermCapability(22) to\n          xfRlPtpTerminalXTable and enabledAsRequest(4) to\n          xfTermAdaptiveManualMode(13)\n          ', '\n          Rev PAC1\n          Added supportsAtpcFallbackWithAutoRestore to xfTermAtpcCapability.\n          ', '\n          Rev AB\n          Changes for TN 4.4.\n          Added xfTermAutoRemoveLoopEnable(21) to\n          xfRlPtpTerminalXTable.\n          ', '\n          Rev PAB4\n          Changes for TN 4.4.\n          Added xfTermTribAllocationActual(19) and xfTermTribAllocationDesired(20) to\n          xfRlPtpTerminalXTable.\n          ', '\n          Rev PAB3\n          Changes for TN 4.4.\n          Added xfRLProtectionCapability(7) to xfRLProtectionTable.\n          ', '\n          Rev PAB2\n          Added UnprotectedSD xfTermProtection and xfRLProtectionTable\n          Added TermProtectionCapbility and TermLineProtectionCapability\n          to XfRLPtpTerminalXEntry and xfRadioLinkPtpTerminalCompleteGroup\n          ', '\n          Rev PAB\n          Added rlXfMLTNPT(6) to xfTermType\n          ', '\n          Rev AA\n          Added vr500 license\n          ', '\n          Rev Z\n          Official R-State for TN 4.3\n          ', '\n          Rev PZ2\n          Added supportsAtpcFallback to xfTermAtpcCapability.\n          ', '\n          Rev PZ\n          Added xfTermIpAddress to xfRLPtpTerminalXTable.\n          ', '\n          Rev Y\n          Updated revision history.\n          ', '\n          Rev Y\n          Official R-State for  TN 4.2\n          ', '\n          Rev PX11\n          Changes for TN 4.2\n          Spectrum Effeciency Class index values have changed.\n          Adde new Spectrum Effeciency Class/Capability values.\n          Added channelspacing chsp3500kHz(10).\n          Added validrow vr4(11).\n          ', '\n          Corrected bit fields for pmamconfig table.\n          ', '\n          Rev X\n          This is the same version as Rev PX9, with the changes below:\n          Changed name on fftAdaptive to fftAdMod.\n          ', '\n          Rev PX10\n          Added new tables:\n          - XfRLPMAMConfigTable\n          - XfRLPMAMInterval24hTable\n          - XfRLPMAMInterval15mTable\n          - XfRLPMAMCurrent24hTable\n          - XfRLPMAMCurrent15mTable\n          New type TermAdaptiveManualMode,\n          changed type xfTermAdaptiveManualMode.\n          ', '\n          Rev PX9\n          Fixed double index for xfRLPMInterval15mTable\n          ', '\n          Rev PX8\n          Changes for TN 4.1/4.2\n          xfTermBitPipeCapacity description changed from Mbit to Kbit (TR: TTNTR00022525).\n          ', '\n          Rev PX7\n          Changes for TN 4.1/4.2\n          Removed objects in xfRLPtpTerminalXTable: xfTermAdaptiveModulation\n          Changed objects in xfRLPtpTerminalXTable:\n          - from xfTermManualRowIndex to xfTermAdaptiveManualRowIndex\n          - from xfTermDCNHCapacity to xfTermDCNCapacity\n          Fixed double index issue in xfRLPtpTerminalXTable\n          ', '\n          Rev PX6\n          Changes for TN 4.1\n          New objects in xfRLPtpTerminalXTable:\n          - xfTermActualRowIndex\n          - xfTermMaxRowIndex\n          - xfTermAdaptiveModulation\n          - xfTermManualRowIndex\n          - xfTermAdaptiveManualMode\n          ', '\n          Rev PX5\n          Added rlXfMLStandalone(5) for xfTermTypes in xfRLPtpTerminalTable.\n          Fixed wrong values in xfTermFrameFormatRev for xfRlPtpTerminalCapabilityTable.\n          ', '\n          Rev PX4\n          Changes for TN 4.1\n          Changes in table: xfRlPtpTerminalCapabilityTable\n          ', '\n          Rev PX3\n          Changes for TN 4.1\n          Changes in table: xfRlPtpTerminalCapabilityTable (xfTermChannelModulation)\n          ', '\n          Rev PX2\n          Changes for TN 4.1\n          Changes in table: xfRlPtpTerminalCapabilityTable\n          ', '\n          Rev PX1\n          Changes for TN 4.1\n           New objects in xfRLPtpTerminalXTable:\n             xfTermTribCapacityActual\n             xfTermTribCapacityDesired\n             xfTermBitPipeCapacity\n             xfTermRowIndex\n\n           New table:\n             xfRlPtpTerminalCapabilityTable\n          ', '\n          Rev V\n          Ordinary revision. No other changes.\n          ', '\n          Rev PV5\n          Changes for TN4.0:\n            Default value descriptions for xfTermCapacity and xfTermModulation corrected.\n          ', "\n          Rev PV3/PV4\n          Changes for TN4.0:\n            xfTermCapacity and ...Capability extended with two new values: sixtynineDS1 and eightyDS1\n            xfRLPtpTerminalXTable added - with these MO's:\n               xfTermInterfaces\n               xfTermInterfacesCapability\n               xfTermChannelModeOperStatus (PV4)\n               xfTermXPICRestore (PV4)\n          ", '\n          Rev U\n          Ordinary revision for TN 3.3,\n          according to  1/155 19-CRH 109 625/1 Uae Rev V\n          ', '\n          Rev PU4\n          CR1045: New capacity value, oneStm1OneJ1(22)\n          ', '\n          Rev PU3\n          Correction: xfPMInterval24hUASs and xfPMInterval24hBBs shall be read-only\n          ', '\n          Rev PU2\n          New values for xfTermCapacity:\n            twentytwoE1(18),\n            thirtyfiveE1(19),\n            fortysixE1(20),\n            seventyfiveE1(21)\n\n          New values for xfTermCapacityCapability:\n            twentytwoE1(17),\n            thirtyfiveE1(18),\n            fortysixE1(19),\n            seventyfiveE1(20)\n          ', '\n          Rev PU1\n          Mib file according to IMPLEMENT. PROPOSAL 6/1594-FCP 101 4733 Uen PB5\n          New tables:\n            xfRLPMConfigTable\n            xfRLPMCurrent24hTable\n            xfRLPMInterval24hTable\n            xfRLPMCurrent15mTable\n            xfRLPMInterval15mTable\n          ', '\n          Rev T\n          Changes according to 1/15519-CRH109625/1 Uae Rev U.\n          - xfRLActiveTxRadio: Change in comment regarding relaxed access limitation.\n          - xfRLSwitchOverReset: Change in comment regarding relaxed access limitation.\n          ', '\n          Rev S\n          - xfTermTimeElapsed:\n              Corrected description field acc. to 1/15519-CRH109625/1 Uae Rev S.\n          - xfTermDCNRadioCapability:\n              Corrected literals, dcnLinexxx --> dcnRadioxxx\n          ', '\n          Rev N\n          Changes according to 1/15519-CRH109625/1 Uae Rev S\n          - xfTermCapacity: added value oneStm1oneE1at50MHz(17)\n\n          - xfTermCapacityCapability:\n              stm0(12) --> oneStm0(12)\n              stm1(13) --> oneStm1oneE1(13)\n              oneStm1oneDS1(15) added\n              oneStm1oneE1at50MHz(16) added\n\n          - xfTermLineProtection:\n              singleInterface(3) SI             --> singleInterfaceLowSlot(3) SI low slot\n                                                --> singleInterfaceHighSlot(4) SI high slot\n              opticalSplitter(4) EEP            --> opticalSplitter(5) EEP\n              equipmentAndLineProtection(5) ELP --> equipmentAndLineProtection(6) ELP\n\n          - xfRLLineProtectionMode:\n              singleInterface(3)                --> singleInterfaceLowSlot(3)\n                                                --> singleInterfaceHighSlot(4)\n              opticalSplitter(4)                --> opticalSplitter(5)\n              equipmentAndLineProtection(5)     --> equipmentAndLineProtection(6)\n          ', '\n          Rev M\n          Changes according to 1/15519-CRH109625/1 Uae Rev N\n          - xfRADIORSTable moved from XF-RADIOLINK-PTP-MODEM-MIB to this mib.\n          - xfRADIORSPerformanceTable moved from XF-RADIOLINK-PTP-MODEM-MIB to this mib.\n          ', '\n          Rev L\n          Correction: Adding MO xfRLLineProtectionMode, according to\n           1/15519-CRH109625/1 Uae Rev M\n          ', '\n          Rev K.\n          Changed object syntax to improve the display in a mib browser.\n          Changed description for object xfTermAlarmSeverity according to\n          errata for 1/15519-CRH109625/1 Uae Rev M\n          ', '\n          Rev PK5.\n          Changes according to 1/15519-CRH109625/1 Uae Rev PM1\n            New objects in xfRLPtpTerminalTable\n          Moved object descriptions to make them visible in a mib browser.\n          ', '\n          Rev PK3.\n        - Changes according to 1/15519-CRH109625/1 Uae Rev L\n        - Changed value in xfTermCapacity:\n            oneStm1(14) --> oneStm1oneE1(14)\n        - Added value in xfTermCapacity:\n            oneStm1oneDS1(16)\n        - Added value in xfTermModulation:\n            qam64(6)\n        - Added value for xfTermModulationCapability:\n            qam64(4)\n        - Added objects in xfRlPtpTerminalTable to support SDH, license-handling and\n          frame-format handling:\n            xfTermChannelMode\n            xfTermChannelModeCapability\n            xfTermTrafficAndDCN\n            xfTermFrameFormat\n            xfTermFrameFormatCapability\n        - Changed description regarding relaxed far-end restrictions for these objects:\n            xfTermId\n            xfTermProtection\n            xfTermCapacity\n            xfTermModulation\n            xfTermRemoteIdCheck\n            xfTermRemoteId\n            xfTermFadeNotificationTimer\n        - Changed description regarding functionality for the object xfTermRestore.\n        - Changed description regarding default values for xfTermCapacity and xfTermModulation\n          ', '\n          Rev. J.\n        - Changes according to 1/15519-CRH109625/1 Uae Rev K\n        - Addition of Enum values for TermCapacity, TermCapacityCapability,\n                            TermModulation, TermModulationCapability to support ANSI.\n        ', '\n          Rev. H.\n        - Access restrictions explained in the description field for each MO.\n        - Default value declarations in the description fields also includes the numerical value.\n          ', '\n          Rev. G.\n        - xfTermFadeNotificationTimer is read/write again.\n        - New value for xfRLLineProtectionStatus: rfInputThresholdProtection\n        - Object name xfEquipmentProtectionTable changed to xfTermEquipmentProtectionIndex\n        - xfTermSysName(octet string, read-only) added in xfRlPtpTerminalTable\n          ', '\n          Rev. F.\n        - Changes according to 1/15519-CRH109625/1 Uae Rev E and corrections:\n        - Enum values defined for xfRLProtectionMode in xfRLProtectionTable.\n        - MAX-ACCESS for MO xfTermFadeNotificationTimer, in xfRLPtpTerminalTable, corrected to be read-only\n        - Sequence-numbers for xfRLPtpTerminalPerformanceTable, xfRLProtectionTable and xfRLLineProtectionTable\n          adjusted to maintain compatibility.\n          ', '\n          Rev. E\n        - Changes according to 1/15519-CRH109625/1 Uae Rev D and trouble report HF38086 (see below)\n        - XfRLPtpTerminalEntry changed:\n          -- xfTermFarEndTxOn removed.\n          -- xfTermFadeNotificationTimer and xfEquipmentProtectionTable added\n        - Syntax for xfTermTrapEnable changed.\n        - xfRLPtpTerminalSwitchIfTable removed\n        - xfRLProtectionTable added\n        - xfRLLineProtectionTable added\n        - xfRadioLinkPtpTerminalCompleteGroup updated according to other changes.\n        - values for xfRLActiveTxRadio changed according to trouble report HF38086\n        - DEFVAL removed. Default value info declared in corresponding description fields.\n          ', '\n          Rev. D\n            - All ConfigAlarms are removed\n            - xfTermFarEndTxOn MO is added\n          ', '\n          Rev. C\n            - New coding of xfTermAsPort\n          ', '\n          Rev. B\n            - All config alarms are defined\n            - Alarms are updated with new names\n            - xfTermCurrentBBE now of Counter64 type\n          ', '\n          Rev. PB2\n            - Some minor changes\n          ', '\n          Rev. PB1\n          - Contact info updated with new contact person.\n          - xfTermSynchRemote, xfTermAlarm are removed.\n          - Management objects for restore, trap, remote Id check,\n          and preset are added.\n          - Some attributes in OutputPowerTable moved to RF level.\n          - xfTermCurrentAT removed.\n          ', '\n        Rev. A    This revision has Integer limits added.\n            New xfTermAsPort object in xfRLPtpTerminalTable\n            added.\n        ', '\n        Rev. PA1    Initial revision\n        ',))
if mibBuilder.loadTexts: xfRadioLinkPtpTerminalMIB.setLastUpdated('202003170000Z')
if mibBuilder.loadTexts: xfRadioLinkPtpTerminalMIB.setOrganization('Ericsson AB')
if mibBuilder.loadTexts: xfRadioLinkPtpTerminalMIB.setContactInfo('\n        Ericsson AB\n        BU Networks\n        SE-431 84  Molndal\n        Sweden\n        ')
if mibBuilder.loadTexts: xfRadioLinkPtpTerminalMIB.setDescription('\n        This MIB defines objects on terminal level\n        for point-to-point Radiolink terminals.\n        ')
class TermAdaptiveManualMode(TextualConvention, Integer32):
    description = 'Adaptive Modulation mode'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("other", 1), ("disable", 2), ("enable", 3), ("enabledAsRequest", 4))

class TermModulation(TextualConvention, Integer32):
    description = 'Channel Modulation'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))
    namedValues = NamedValues(("other", 1), ("cqpsk", 2), ("qam16", 3), ("qam128", 4), ("qam32", 5), ("qam64", 6), ("qam4", 7), ("qam8", 8), ("qam256", 9), ("qam512", 10), ("qam1024", 11))

class TermOutputPowerStatus(TextualConvention, Integer32):
    description = 'Output power mode'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("other", 1), ("rtpc", 2), ("atpc", 3), ("localControl", 4), ("ra1LocalControlRa2Rtpc", 5), ("ra1RtpcRa2LocalControl", 6))

class ChannelMode(TextualConvention, Integer32):
    description = 'Terminal channel mode'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("other", 1), ("ccdp", 2), ("accp", 3), ("acap", 4))

class TermRauSec(TextualConvention, Integer32):
    description = 'Spectrum Effeciency Class'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("other", 0), ("sec2", 1), ("sec4", 2), ("sec5b", 3))

class TermAutoRemoveLoopEnable(TextualConvention, Integer32):
    description = 'Auto Removal loops'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("other", 1), ("enable", 2), ("disable", 3))

xfRadioLinkPtpTerminalObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1))
xfRadioLinkPtpTerminalConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 2))
xfRLPtpTerminalTable = MibTable((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 1), )
if mibBuilder.loadTexts: xfRLPtpTerminalTable.setStatus('current')
if mibBuilder.loadTexts: xfRLPtpTerminalTable.setDescription('\n      Table for Radiolink point-to-point terminal managed objects.\n      The table is indexed with entLogicalIndex.\n      ')
xfRLPtpTerminalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entLogicalIndex"))
if mibBuilder.loadTexts: xfRLPtpTerminalEntry.setStatus('current')
if mibBuilder.loadTexts: xfRLPtpTerminalEntry.setDescription('An entry in the xfRLPtpTerminalTable')
xfTermId = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfTermId.setStatus('current')
if mibBuilder.loadTexts: xfTermId.setDescription('\n      Network identity for terminal.\n      Same as GNM id.\n      Note! Id TRMA, TRMB, SMMA, SMMB, AAAA and BBBB are not possible to set.\n      Default = .TRMA. (also for Far End)\n      Near end access: read-write\n      Far end access: read-write (Traffic Node), read-only (other)\n      ')
xfTermType = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("rlMLE", 2), ("rlXfMLE", 3), ("rlXfMLTN", 4), ("rlXfMLStandalone", 5), ("rlXfMLTNPT", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfTermType.setStatus('current')
if mibBuilder.loadTexts: xfTermType.setDescription('\n      Terminal type\n      - other    - Unknown\n      - rlMLE    - MLE classic\n      - rlXfMLE  - MMU2\n      - rlXfMLTN - MMU2B\n      - rlXfMLStandalone(5) - MMU2 CS\n      - rlXfMLTNPT(6) - Pt1\n      ')
xfTermProtection = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unprotected", 2), ("protectedHotStandby", 3), ("protectedWorkingStandby", 4), ("unProtectedSDC", 5), ("enhancedRLB", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfTermProtection.setStatus('current')
if mibBuilder.loadTexts: xfTermProtection.setDescription('\n      This object sets the protection mode of the terminal.\n      - other                   - Unknown\n      - unprotected             - 1+0\n      - protectedHotStandby     - 1+1 Hot\n      - protectedWorkingStandby - 1+1 Working\n      - UnProtectedSDC          - 1+0 with Space Diversity\n      - enhancedRLB             - Enhanced Radio Link Bonding (1+1 PDH and 1+1/2+0 Ethernet)\n      Default value: unprotected(2)\n      Near end access: read-write\n      Far end access: read-write (Traffic Node), read-only (other)\n      ')
xfTermCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26))).clone(namedValues=NamedValues(("other", 1), ("twoE1", 2), ("fourE1", 3), ("oneE2", 4), ("twoE2", 5), ("oneE3oneE1", 6), ("twoE3", 7), ("fourE3", 8), ("fourDS1", 9), ("eightDS1", 10), ("sixteenDS1", 11), ("seventeenDS1", 12), ("oneStm0", 13), ("oneStm1oneE1", 14), ("thirtytwoDS1", 15), ("oneStm1oneDS1", 16), ("oneStm1oneE1at50MHz", 17), ("twentytwoE1", 18), ("thirtyfiveE1", 19), ("fortysixE1", 20), ("seventyfiveE1", 21), ("oneStm1OneJ1", 22), ("sixtynineDS1", 23), ("eightyDS1", 24), ("oneStm1OneE1LH", 25), ("oneStm1OneDS1LH", 26)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfTermCapacity.setStatus('current')
if mibBuilder.loadTexts: xfTermCapacity.setDescription('\n      This object sets the capacity on the terminal\n      * other        - Unknown\n      * twoE1        - 2x2 Mbps\n      * fourE1       - 4*2 Mbps (only rlMLE)\n      * oneE2        - 8 Mbps\n      * twoE2        - 2x8 Mbps\n      * oneE3oneE1   - 34+2 Mbps\n      * twoE3        - 2x34 Mbps\n      * fourE3       - 4*34 Mbps\n      * fourDS1      - 4xDS1\n      * eightDS1     - 8xDS1\n      * sixteenDS1   - 16*DS1\n      * seventeenDS1 - 16DS1+DS1\n      * oneStm0      - STM-0\n      * oneStm1oneE1 - STM-1+2\n      * thirtytwoDS1 - 32xDS1\n      * oneStm1oneDS1 - STM-1+DS1\n      * oneStm1oneE1at50MHz - STM-1+2 Mpbs @ 50 MHz\n      * twentytwoE1   - 22xE1\n      * thirtyfiveE1  - 35xE1\n      * fortysixE1    - 46xE1\n      * seventyfiveE1 - 75xE1\n      * oneStm1OneJ1  - 1xSTM-1 + 1xJ1\n      * sixtynineDS1  - 69xDS1\n      * eightyDS1     - 80xDS1\n      * oneStm1OneE1LH  - STM-1+2 for LH\n      * oneStm1OneDS1LH - STM-1+DS1 for LH\n\n      Default value PDH CQPSK ETSI: twoE1(2)            MMU2, MMU2 B, MMU2 C\n      Default value PDH CQPSK ANSI: fourDS1(9)          MMU2 BA, MMU2 CA\n      Default value PDH QAM   ETSI: twentytwoE1(18)     MMU2 D\n      Default value PDH QAM   ANSI: sixtynineDS1(23)    MMU2 DA\n      Default value SDH       ETSI: oneStm1oneE1(14)    MMU2 E, MMU2 F\n      Default value SDH       ANSI: oneStm1oneDS1(16)   MMU2 E, MMU2 F\n\n      Near end access: read-write\n      Far end access: read-write (Traffic Node), read-only (MLE)\n\n      Note that setting far end xfTermCapacity will remove far end traffic cross connects.\n\n      oneStm1oneE1(14) and oneStm1oneE1at50MHz(17) has\n      the same capacity and modulation but at different\n      bandwidth, hence the two values.\n\n      Capacities above 2xE1 for MMU2 B OFH, MMU2 C OFH,\n      ATU and ATU B OFH are under license control.\n      ')
xfTermCapacityCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 1, 1, 5), Bits().clone(namedValues=NamedValues(("oneE1", 0), ("twoE1", 1), ("fourE1", 2), ("oneE2", 3), ("twoE2", 4), ("oneE3oneE1", 5), ("twoE3", 6), ("fourE3", 7), ("fourDS1", 8), ("eightDS1", 9), ("sixteenDS1", 10), ("seventeenDS1", 11), ("oneStm0", 12), ("oneStm1oneE1", 13), ("thirtytwoDS1", 14), ("oneStm1oneDS1", 15), ("oneStm1oneE1at50MHz", 16), ("twentytwoE1", 17), ("thirtyfiveE1", 18), ("fortysixE1", 19), ("seventyfiveE1", 20), ("oneStm1OneJ1", 21), ("sixtynineDS1", 22), ("eightyDS1", 23), ("oneStm1OneE1LH", 24), ("oneStm1OneDS1LH", 25)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfTermCapacityCapability.setStatus('current')
if mibBuilder.loadTexts: xfTermCapacityCapability.setDescription('\n      This object shows the capacity capability on the terminal.\n      Binary AND on contained modems units capabilities.\n      ')
xfTermModulation = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 1, 1, 6), TermModulation()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfTermModulation.setStatus('current')
if mibBuilder.loadTexts: xfTermModulation.setDescription('\n      This object sets the modulation method on the terminal.\n      Legal settable values are:\n      - cqpsk(2)  CQPSK\n      - qam16(3)  16-QAM\n      - qam128(4) 128-QAM\n      - qam32(5)  32-QAM\n      - qam64(6)  64-QAM\n      Default value PDH CQPSK ETSI: cqpsk(2)    MMU2, MMU2 B, MMU2 C\n      Default value PDH CQPSK ANSI: cqpsk(2)    MMU2 BA, MMU2 CA\n      Default value PDH QAM   ETSI: qam16(3)    MMU2 D\n      Default value PDH QAM   ANSI: qam128(4)   MMU2 DA\n      Default value SDH       ETSI: qam128(4)   MMU2 E, MMU2 F\n      Default value SDH       ANSI: qam128(4)   MMU2 E, MMU2 F\n      Near end access: read-write\n      Far end access: read-write (Traffic Node), read-only (other)\n      Note that setting far end xfTermModulation might remove far end traffic connections.\n      Modulation other than CQPSK for MMU2 C OFH are under license control.\n      ')
xfTermModulationCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 1, 1, 7), Bits().clone(namedValues=NamedValues(("cqpsk", 0), ("qam16", 1), ("qam128", 2), ("qam32", 3), ("qam64", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfTermModulationCapability.setStatus('current')
if mibBuilder.loadTexts: xfTermModulationCapability.setDescription('\n      This object shows the modulation capability on the terminal.\n      Binary AND on contained modems and radio units capabilities.\n      ')
xfTermRestore = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("restore", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfTermRestore.setStatus('current')
if mibBuilder.loadTexts: xfTermRestore.setDescription('\n      rlXfMLTN:\n      Restore command is clearing RF, IF and RxLoop, enable xfTermTrapEnable,\n      turn transmitter on and set protection switch mode to Auto.\n      In case of MMU2 E and MMU2 F it also clears the STM-1 Line Loop and Local Loop.\n\n      Far end rlMLE and rlXfMLE:\n      Restore command sets P-mark to off, all loops are set to off, all Test Port connections\n      are removed, Transmitter is set to On and Switch Mode is set to Auto.\n      ')
xfTermAlarmSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 1, 1, 9), Bits().clone(namedValues=NamedValues(("termSeverity0", 0), ("termSeverity1", 1), ("termSeverity2", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfTermAlarmSeverity.setStatus('current')
if mibBuilder.loadTexts: xfTermAlarmSeverity.setDescription('\n      This object shows the highest alarm severity for contained\n      units and interfaces in the terminal including E1, E2 and E3 interfaces.\n      Terminal alarm severity is indicated by 3 bits:\n      bits   012\n             000 clear\n             001 undetermined\n             010 warning\n             011 minor\n             100 major\n             101 critical\n             110 not defined\n             111 not applicable\n      ')
xfTermTrapEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("enable", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfTermTrapEnable.setStatus('current')
if mibBuilder.loadTexts: xfTermTrapEnable.setDescription('\n      Disables/enables trap sending from this terminal.\n      Note, terminals with termType = rlXfMLE will not include E1, E2 and E3 interfaces.\n      Default value: enable(2)\n      ')
xfTermAsPort = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))).clone(namedValues=NamedValues(("notAvailable", 1), ("aspX002", 2), ("aspX003", 3), ("aspX004", 4), ("aspX005", 5), ("aspX006", 6), ("aspX007", 7), ("aspX008", 8), ("aspX009", 9), ("aspX010", 10), ("aspX011", 11), ("aspX012", 12), ("aspX013", 13), ("aspX014", 14), ("aspX015", 15), ("aspX016", 16), ("aspX017", 17), ("aspX018", 18), ("aspX019", 19), ("aspX020", 20), ("aspX021", 21)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfTermAsPort.setStatus('current')
if mibBuilder.loadTexts: xfTermAsPort.setDescription('\n      rlXfMLTN: Access server port used to reach far end terminals of type rlMLE or rlXfMLE,\n      else notAvailable (1).\n      rlXfMLE: Access server port used to reach a near end terminal of type rlXfMLE.\n            aspX002      - Port 3002/4002\n               ..        - ..\n            aspX021      - Port 3021/4021\n\n            Note, Last available port differs between\n            different AMMs.\n            AMM 2p:  aspX003\n            AMM 6p:  aspX006\n            AMM 20p: aspX021\n\n      Near end access: read-only\n      Far end access: no access\n      ')
xfTermRemoteIdCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enable", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfTermRemoteIdCheck.setStatus('current')
if mibBuilder.loadTexts: xfTermRemoteIdCheck.setDescription('\n      This object sets if check of identity of remote terminal shall be performed or not.\n      Legal values are:\n      - enable(2): radio id check enabled\n      - disable(3): radio id check disabled\n      Default value: disable(3)\n      ')
xfTermRemoteId = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 1, 1, 13), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfTermRemoteId.setStatus('current')
if mibBuilder.loadTexts: xfTermRemoteId.setDescription('\n      Network identity for remote terminal. Same as GNM id.\n      Note: TRMA, TRMB, SMMA, SMMB, AAAA and BBBB are not possible to set.\n      A change of the far end value might disconnect IP DCN, but\n      internal GNM connection will not be disconnected.\n      Default value: TRMB (initial)\n      ')
xfTermPreset = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("preset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfTermPreset.setStatus('current')
if mibBuilder.loadTexts: xfTermPreset.setDescription('\n      For terminals with termType = rlXfMLE or rlMLE:\n      - Terminal is restored with factory settings.\n      - Protected terminals will be set to unprotected.\n      For terminals with termType = rlXfMLTN:\n      - Terminal is restored with default configuration.\n\n      Near end access: read-write\n      Far end access: no access\n      ')
xfTermBerAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("ber1e3", 2), ("ber1e4", 3), ("ber1e5", 4), ("ber1e6", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfTermBerAlarmThreshold.setStatus('current')
if mibBuilder.loadTexts: xfTermBerAlarmThreshold.setDescription('\n      Threshold for BER alarm.\n      Legal values:\n      - ber1e3(2): BER=1e-3 (default)\n      - ber1e4(3): BER=1e-4\n      - ber1e5(4): BER=1e-5\n      - ber1e6(5): BER=1e-6\n      ')
xfTermFadeNotificationTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfTermFadeNotificationTimer.setStatus('current')
if mibBuilder.loadTexts: xfTermFadeNotificationTimer.setDescription('\n      Notification suppression timer for protection alarms.\n      Unit: 1 sec\n      Value range: 0-1000\n      Default value: 200\n      Near end access: read-write\n      Far end access: read-only (Traffic Node)\n      ')
xfTermEquipmentProtectionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfTermEquipmentProtectionIndex.setStatus('current')
if mibBuilder.loadTexts: xfTermEquipmentProtectionIndex.setDescription('\n      Unprotected: 0\n      Protected: EntPhysicalindex of MMU in lowest slot\n      ')
xfTermSysName = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 1, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfTermSysName.setStatus('current')
if mibBuilder.loadTexts: xfTermSysName.setDescription('\n      The system name of the TN hosting the terminal.\n      Near end terminal: a zero-length string is returned as MIB-II/system/sysName should be used instead.\n      Far end terminal: the system name is returned.\n      ')
xfTermChannelMode = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 1, 1, 19), ChannelMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfTermChannelMode.setStatus('current')
if mibBuilder.loadTexts: xfTermChannelMode.setDescription('\n      Channel mode for the terminal (administrative status).\n      This is only settable according to xfTermChannelModeCapability.\n      Legal values are:\n      - ccdp(2): Co-Channel Dual Polarization (XPIC)\n      - accp(3): Adjacent Channels Co-Polarization (non-XPIC)\n      - acap(4): Adjacent Channels Alternate Polarization (non-XPIC)\n      Default value: acap(4)\n      Near end access: read-write\n      Far end access: read-write (Traffic Node only)\n      ')
xfTermChannelModeCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 1, 1, 20), Bits().clone(namedValues=NamedValues(("ccdp", 0), ("accp", 1), ("acap", 2), ("ccdp16QAM", 3), ("ccdp64QAM", 4), ("ccdp128QAM", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfTermChannelModeCapability.setStatus('current')
if mibBuilder.loadTexts: xfTermChannelModeCapability.setDescription('\n      Channel mode capability.\n      Legal values are:\n      - ccdp(0) ........ Co-Channel Dual Polarization (XPIC)\n      - accp(1) ........ Adjacent Channels Co-Polarization (non-XPIC)\n      - acap(2) ........ Adjacent Channels Alternate Polarization (non-XPIC)\n      - ccdp16QAM(3).... Co-Channel Dual Polarization (XPIC) for 16QAM only on MMU2 F\n      - ccdp64QAM(4).... Co-Channel Dual Polarization (XPIC) for 64QAM only on MMU2 F\n      - ccdp128QAM(5)... Co-Channel Dual Polarization (XPIC) for 128QAM only on MMU2 F\n      Default value: acap(2)\n      Near end access: read-write\n      Far end access: read-write (Traffic Node only)\n      ')
xfTermTrafficAndDCN = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("trafficAndDCN", 1), ("dcnOnly", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfTermTrafficAndDCN.setStatus('current')
if mibBuilder.loadTexts: xfTermTrafficAndDCN.setDescription('\n      Enable or disable traffic.\n      AIS is generated on all traffic interfaces when traffic is disabled,\n      i.e. xfTermTrafficAndDCN = DCNOnly. The hop and DCN is working, though\n      (primarily used for license handling).\n      Default value: trafficAndDCN(1)\n      Near end access: read-write\n      Far end access: read-write (Traffic Node only)\n      ')
xfTermFrameFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("version0", 2), ("version1", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfTermFrameFormat.setStatus('current')
if mibBuilder.loadTexts: xfTermFrameFormat.setDescription('\n      The frame format version used by the modem.\n      Legal values are:\n      - version0(2) only valid for MMU2 C modems\n      - version1(3) only valid for MMU2 C modem.\n      Default value: other(1)\n      Near end access: read-write\n      Far end access: read-write (Traffic Node only)\n      ')
xfTermFrameFormatCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 1, 1, 23), Bits().clone(namedValues=NamedValues(("version0", 0), ("version1", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfTermFrameFormatCapability.setStatus('current')
if mibBuilder.loadTexts: xfTermFrameFormatCapability.setDescription('\n      Frame format versions supported by the modem.\n      Bit 0: modem MMU2 C supports frame format Version 0\n      Bit 1: modem MMU2 C supports frame format Version 1 (for QAM 2xE2, E3+E1 and 2xE3)\n      ')
xfTermDCNRadioConfiguration = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("dcnRadio128kbps", 2), ("dcnRadio320kbpsDCCr", 3), ("dcnRadio320kbpsMSB", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfTermDCNRadioConfiguration.setStatus('current')
if mibBuilder.loadTexts: xfTermDCNRadioConfiguration.setDescription('\n      DCN radio capacity for terminal.\n      Legal values are:\n      - dcnRadio128kbps(2)     RFCOH channel only: all RSOH bytes pass transparently over the hop\n      - dcnRadio320kbpsDCCr(3) 128 kbps + DCCr (default)\n      - dcnRadio320kbpsMSB (4) 128 kbps + MSB\n\n      Note: Future compatibility is guaranteed if the MSB [(2,2), (3,2), (3,3)]\n            are used when 320kbpsMSB value is selected.\n\n      Near end access: read-write\n      Far end access: read-write (Traffic Node only)\n      ')
xfTermDCNRadioCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 1, 1, 25), Bits().clone(namedValues=NamedValues(("dcnRadio128kbps", 0), ("dcnRadio320kbpsDCCr", 1), ("dcnRadio320kbpsMSB", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfTermDCNRadioCapability.setStatus('current')
if mibBuilder.loadTexts: xfTermDCNRadioCapability.setDescription('\n      Binary AND on contained MMUs DCN radio configuration capability.\n        bits 210\n             000 undetermined\n             001 128kbps\n             010 320kbpsDCCr\n             100 320kbpsMSB\n             ...\n             111 128kbps & 320kbpsDCCr & 320kbpsMSB\n      ')
xfTermDCNLineConfiguration = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("transparent", 2), ("dcnLine192kbpsDCCr", 3), ("dcnLine192kbpsMSB", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfTermDCNLineConfiguration.setStatus('current')
if mibBuilder.loadTexts: xfTermDCNLineConfiguration.setDescription('\n      DCN line capacity for terminal.\n      Legal values are:\n       transparent(2)        All RSOH bytes pass transparently over the hop.\n       dcnLine192kbpsDCCr(3) (default) DCCr\n       dcnLine192kbpsMSB(4)  MSB\n\n      Note: Future compatibility is guaranteed if the MSB [(2,2), (3,2), (3,3)]\n            are used when 192kbpsMSB value is selected.\n\n      Default value: dcnLine192kbpsDCCr(3)\n      Near end access: read-write\n      Far end access: read-write (Traffic Node only)\n      ')
xfTermDCNLineCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 1, 1, 27), Bits().clone(namedValues=NamedValues(("transparent", 0), ("dcnLine192kbpsDCCr", 1), ("dcnLine192kbpsMSB", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfTermDCNLineCapability.setStatus('current')
if mibBuilder.loadTexts: xfTermDCNLineCapability.setDescription('\n      Binary AND on contained MMUs DCN line configuration.\n        bits 210\n             000 undetermined\n             001 transparent\n             010 192kbpsDCCr\n             100 192kbpsMSB\n             ...\n             111 transparent & 192kbpsDCCr & 192kbpsMSB\n      ')
xfTermFadeNotificationConfiguration = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfTermFadeNotificationConfiguration.setStatus('current')
if mibBuilder.loadTexts: xfTermFadeNotificationConfiguration.setDescription('\n      This object enables or disables the notification suppress timer for Protection alarm.\n      Default value: enabled(3),\n      Near end access: read-write\n      Far end access: read-write (Traffic Node only)\n      ')
xfTermLineProtection = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 1, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unProtected", 2), ("singleInterfaceLowSlot", 3), ("singleInterfaceHighSlot", 4), ("opticalSplitter", 5), ("equipmentAndLineProtection", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfTermLineProtection.setStatus('current')
if mibBuilder.loadTexts: xfTermLineProtection.setDescription('\n      Administrative status of the line protection for a terminal physical line\n      interface, e.g. MMU2 E and MMU2 F. Operational status is xfRLLineProtectionMode.\n      Legal values are:\n        other(1)      (Not settable)\n        unProtected(2)\n        singleInterfaceLowSlot(3) SI low slot\n        singleInterfaceHighSlot(4) SI high slot\n        opticalSplitter(5) EEP\n        equipmentAndLineProtection(6). ELP\n\n      Default value: unProtected(2)\n      Near end access: read-write\n      Far end access: read-write (Traffic Node only)\n      ')
xfRLPtpTerminalOutputPowerTable = MibTable((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 2), )
if mibBuilder.loadTexts: xfRLPtpTerminalOutputPowerTable.setStatus('current')
if mibBuilder.loadTexts: xfRLPtpTerminalOutputPowerTable.setDescription('\n      Table for Radiolink point-to-points terminal output power\n      managed objects. The tabled is indexed with entLogicalIndex.\n      ')
xfRLPtpTerminalOutputPowerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 2, 1), ).setIndexNames((0, "ENTITY-MIB", "entLogicalIndex"))
if mibBuilder.loadTexts: xfRLPtpTerminalOutputPowerEntry.setStatus('current')
if mibBuilder.loadTexts: xfRLPtpTerminalOutputPowerEntry.setDescription('An entry in the xfRLPtpTerminalOutputPowerTable')
xfTermOutputPowerOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 2, 1, 1), TermOutputPowerStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfTermOutputPowerOperStatus.setStatus('current')
if mibBuilder.loadTexts: xfTermOutputPowerOperStatus.setDescription('\n      This object shows the output power mode that is\n      running. It is necessarily not equal to configured mode.\n      ')
xfTermOutputPowerAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 2, 1, 2), TermOutputPowerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfTermOutputPowerAdminStatus.setStatus('current')
if mibBuilder.loadTexts: xfTermOutputPowerAdminStatus.setDescription('\n      This object sets the output mode of the terminal.\n      Legal values are:\n      - other(1)\n      - rtpc(2)\n      - atpc(3)\n      - localControl(4)\n      - ra1LocalControlRa2Rtpc(5)\n      - ra1RtpcRa2LocalControl(6)\n\n      Note, It is only possible to select atpc if\n      xfTermAtpcCapability = supportsAtpc for both near end\n      and far end terminal. Value other(1) not settable.\n      Default value: rtpc(2)\n      ')
xfTermAtpcCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("noAtpcSupport", 2), ("doesNotExist", 3), ("atpcCapabilityUnknown", 4), ("supportsAtpc", 5), ("supportsAtpcFallback", 6), ("supportsAtpcFallbackTimer", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfTermAtpcCapability.setStatus('current')
if mibBuilder.loadTexts: xfTermAtpcCapability.setDescription('\n      This object shows the ATPC capability for the\n      terminal, calculated as worst case capability\n      for all units contained in the terminal.\n      ')
xfRLPtpTerminalPerformanceTable = MibTable((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 4), )
if mibBuilder.loadTexts: xfRLPtpTerminalPerformanceTable.setStatus('current')
if mibBuilder.loadTexts: xfRLPtpTerminalPerformanceTable.setDescription('\n      Table for performance data. For 1+0 systems performance\n      data is calculated according to ITU-T Rec. G.826. For\n      1+1 systems - calculated as the combined performance\n      of the protected terminal.\n\n      1+0 terminals uses ifindex for RAU IF\n      1+1 terminals uses ifindex for SWITCH IF\n      ')
xfRLPtpTerminalPerformanceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: xfRLPtpTerminalPerformanceEntry.setStatus('current')
if mibBuilder.loadTexts: xfRLPtpTerminalPerformanceEntry.setDescription('An entry in the xfRLPtpTerminalPerformanceTable')
xfTermTimeElapsed = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 4, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfTermTimeElapsed.setStatus('current')
if mibBuilder.loadTexts: xfTermTimeElapsed.setDescription('\n      The number of seconds that have elapsed\n      since the beginning of the current error-measurement\n      period.\n\n      If the current interval exceeds the maximum\n      value, the agent will return the maximum\n      value.\n      ')
xfTermCurrentES = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfTermCurrentES.setStatus('current')
if mibBuilder.loadTexts: xfTermCurrentES.setDescription('\n      This object shows the error seconds.\n      ')
xfTermCurrentSES = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfTermCurrentSES.setStatus('current')
if mibBuilder.loadTexts: xfTermCurrentSES.setDescription('\n      This object shows the severely error seconds.\n      ')
xfTermCurrentBBE = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 4, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfTermCurrentBBE.setStatus('current')
if mibBuilder.loadTexts: xfTermCurrentBBE.setDescription('\n      This object shows the background block errors.\n      ')
xfTermCurrentUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfTermCurrentUAS.setStatus('current')
if mibBuilder.loadTexts: xfTermCurrentUAS.setDescription('\n      This object shows the unavailable seconds (or unavailable time).\n      ')
xfTermCurrentBB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 4, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfTermCurrentBB.setStatus('current')
if mibBuilder.loadTexts: xfTermCurrentBB.setDescription('\n      This object shows the background blocks.\n      ')
xfTermPerfReset = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("performanceReset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfTermPerfReset.setStatus('current')
if mibBuilder.loadTexts: xfTermPerfReset.setDescription("\n      This object is used to reset the performance counters.\n      It is settable also when the radio unit isn't present.\n      Near end access: read-write\n      Far end access: read-write (Traffic Node only)\n      ")
xfTermTimeElapsedEnRLBExt = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfTermTimeElapsedEnRLBExt.setStatus('current')
if mibBuilder.loadTexts: xfTermTimeElapsedEnRLBExt.setDescription('\n      The number of seconds that have elapsed\n      in Enhanced RLB Extended capacity mode\n      since RLB was enabled and the beginning of\n      the current measurement period.\n      ')
xfRLProtectionTable = MibTable((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 5), )
if mibBuilder.loadTexts: xfRLProtectionTable.setStatus('current')
if mibBuilder.loadTexts: xfRLProtectionTable.setDescription('\n      Table for control and supervision of the protection mechanism\n      ')
xfRLProtectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 5, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: xfRLProtectionEntry.setStatus('current')
if mibBuilder.loadTexts: xfRLProtectionEntry.setDescription('An entry in the xfRLProtectionTable')
xfRLProtectionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("unprotected", 2), ("protectedHotStandby", 3), ("protectedWorkingStandby", 4), ("unProtectedSDC", 5), ("enhancedRLBProtected", 7), ("enhancedRLBExtended", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRLProtectionMode.setStatus('current')
if mibBuilder.loadTexts: xfRLProtectionMode.setDescription('\n      This is the operational status of the protection mode.\n      Default: unprotected(2)\n      ')
xfRLProtectionRau1 = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRLProtectionRau1.setStatus('current')
if mibBuilder.loadTexts: xfRLProtectionRau1.setDescription('\n      entPhysicalIndex for RAU 1.\n      ')
xfRLProtectionRau2 = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRLProtectionRau2.setStatus('current')
if mibBuilder.loadTexts: xfRLProtectionRau2.setDescription('\n      entPhysicalIndex for RAU 2.\n      ')
xfRLActiveTxRadio = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("txRadio1", 1), ("txRadio2", 2), ("txRadio1andtxRadio2", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfRLActiveTxRadio.setStatus('current')
if mibBuilder.loadTexts: xfRLActiveTxRadio.setDescription('\n      Active radio setting.\n      Default value: txRadio1(1)\n      ')
xfRLSwitchOverReset = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfRLSwitchOverReset.setStatus('current')
if mibBuilder.loadTexts: xfRLSwitchOverReset.setDescription('\n      Reset of the activated external alarms Tx Switch Over and Remote Tx Switch\n      Over by resetting internal alarms.\n      ')
xfRLSwitchRevertiveTx = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("txRadio1", 1), ("txRadio2", 2), ("off", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfRLSwitchRevertiveTx.setStatus('current')
if mibBuilder.loadTexts: xfRLSwitchRevertiveTx.setDescription('\n      Preferred Tx Radio.\n      Default value: off(3)\n      Near end access: read-write\n      Far end access: read-only (Traffic Node only)\n      ')
xfRLProtectionCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 5, 1, 7), Bits().clone(namedValues=NamedValues(("revertiveSwitching", 0), ("txSwitchOverConfiguration", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRLProtectionCapability.setStatus('current')
if mibBuilder.loadTexts: xfRLProtectionCapability.setDescription('\n      This object shows the protection capabilities of the\n      traffic node.\n\n      Near end access: read-only\n      Far end access: read-only\n      ')
xfRLTxSwitchOverConfiguration = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfRLTxSwitchOverConfiguration.setStatus('current')
if mibBuilder.loadTexts: xfRLTxSwitchOverConfiguration.setDescription('\n      Indicates whether the remote Tx switching function and\n      Tx switchover alarm are enabled. When disabled, the\n      remote Tx switching function is disabled and Tx switchover\n      alarm is never raised and xfRLSwitchOverReset is never\n      needed to reset these alarms.\n      - Other (1)\n      - Disabled (2)  (default)\n      - Enabled (3)\n\n      Near end access: read-write\n      Far end access: read-write\n      ')
xfRLLineProtectionTable = MibTable((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 6), )
if mibBuilder.loadTexts: xfRLLineProtectionTable.setStatus('current')
if mibBuilder.loadTexts: xfRLLineProtectionTable.setDescription('\n      Table for line protection status.\n      ')
xfRLLineProtectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: xfRLLineProtectionEntry.setStatus('current')
if mibBuilder.loadTexts: xfRLLineProtectionEntry.setDescription('An entry in the xfRLLineProtectionTable')
xfRLLineProtectionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 6, 1, 1), Bits().clone(namedValues=NamedValues(("hitlessPhase0", 0), ("hitlessPhase1", 1), ("hitlessPhase2", 2), ("txSwitchover0", 3), ("txSwitchover1", 4), ("txSwitchover2", 5), ("remoteTxSwitchOver0", 6), ("remoteTxSwitchOver1", 7), ("remoteTxSwitchOver2", 8), ("rfInputThresholdProtection0", 9), ("rfInputThresholdProtection1", 10), ("rfInputThresholdProtection2", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRLLineProtectionStatus.setStatus('current')
if mibBuilder.loadTexts: xfRLLineProtectionStatus.setDescription('\n      Extension to xfLineProtectionStatus.\n      ')
xfRLLineProtectionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unProtected", 2), ("singleInterfaceLowSlot", 3), ("singleInterfaceHighSlot", 4), ("opticalSplitter", 5), ("equipmentAndLineProtection", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRLLineProtectionMode.setStatus('current')
if mibBuilder.loadTexts: xfRLLineProtectionMode.setDescription('\n      Operational status of the line\n      protection for a terminal physical\n      line interface, e.g. MMU2 E and\n      MMU2 F.\n      Administrative status is\n      xfTermLineProtection.\n      ')
xfRADIORSTable = MibTable((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 7), )
if mibBuilder.loadTexts: xfRADIORSTable.setStatus('current')
if mibBuilder.loadTexts: xfRADIORSTable.setDescription('\n      Traffic node extension of ifTable. The tabled is indexed with ifIndex.\n      ')
xfRADIORSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: xfRADIORSEntry.setStatus('current')
if mibBuilder.loadTexts: xfRADIORSEntry.setDescription('An entry in the xfRADIORSTable')
xfRADIORSAlarms = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 7, 1, 1), Bits().clone(namedValues=NamedValues(("timRadioSide0", 0), ("timRadioSide1", 1), ("timRadioSide2", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRADIORSAlarms.setStatus('current')
if mibBuilder.loadTexts: xfRADIORSAlarms.setDescription('\n      This object shows rau rs related alarms.\n      ')
xfRADIORSPerformanceTable = MibTable((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 8), )
if mibBuilder.loadTexts: xfRADIORSPerformanceTable.setStatus('current')
if mibBuilder.loadTexts: xfRADIORSPerformanceTable.setDescription('\n      Traffic node extension of ifTable. The tabled is indexed with\n      ifIndex.\n      ')
xfRADIORSPerformanceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 8, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: xfRADIORSPerformanceEntry.setStatus('current')
if mibBuilder.loadTexts: xfRADIORSPerformanceEntry.setDescription('An entry in the xfRADIORSPerformanceTable')
xfRADIORSPerformanceAlarms = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 8, 1, 1), Bits().clone(namedValues=NamedValues(("b1UnavailablePeriod0", 0), ("b1UnavailablePeriod1", 1), ("b1UnavailablePeriod2", 2), ("b1Es15m0", 3), ("b1Es15m1", 4), ("b1Es15m2", 5), ("b1Ses15m0", 6), ("b1Ses15m1", 7), ("b1Ses15m2", 8), ("b1Bbe15m0", 9), ("b1Bbe15m1", 10), ("b1Bbe15m2", 11), ("b1Es24h0", 12), ("b1Es24h1", 13), ("b1Es24h2", 14), ("b1Ses24h0", 15), ("b1Ses24h1", 16), ("b1Ses24h2", 17), ("b1Bbe24h0", 18), ("b1Bbe24h1", 19), ("b1Bbe24h2", 20)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfRADIORSPerformanceAlarms.setStatus('current')
if mibBuilder.loadTexts: xfRADIORSPerformanceAlarms.setDescription('\n      This object shows RAU RS related alarms.\n      ')
xfRLPMConfigTable = MibTable((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 9), )
if mibBuilder.loadTexts: xfRLPMConfigTable.setStatus('current')
if mibBuilder.loadTexts: xfRLPMConfigTable.setDescription('This table contains the alarm threshold values for RL PM')
xfRLPMConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 9, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: xfRLPMConfigEntry.setStatus('current')
if mibBuilder.loadTexts: xfRLPMConfigEntry.setDescription('Entry in the xfRLPMConfigTable.')
xfPMSetThreshold15mESs = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 9, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfPMSetThreshold15mESs.setStatus('current')
if mibBuilder.loadTexts: xfPMSetThreshold15mESs.setDescription('The 15 minute set threshold for ES.\n                Default value is 180.\n                Near end access: read-write\n                Far end access: No access\n                ')
xfPMSetThreshold15mSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 9, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfPMSetThreshold15mSESs.setStatus('current')
if mibBuilder.loadTexts: xfPMSetThreshold15mSESs.setDescription('The 15 minute set threshold for SES.\n                Default value is 15.\n                Near end access: read-write\n                Far end access: No access\n                ')
xfPMSetThreshold15mBBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 9, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfPMSetThreshold15mBBEs.setStatus('current')
if mibBuilder.loadTexts: xfPMSetThreshold15mBBEs.setDescription('The 15 minute set threshold for BBE.\n                Default value is 9900.\n                Near end access: read-write\n                Far end access: No access\n                ')
xfPMResetThreshold15mESs = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 9, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfPMResetThreshold15mESs.setStatus('current')
if mibBuilder.loadTexts: xfPMResetThreshold15mESs.setDescription('The 15 minute reset threshold for ES.\n                Default value is 20.\n                Near end access: read-write\n                Far end access: No access\n                ')
xfPMResetThreshold15mSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 9, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfPMResetThreshold15mSESs.setStatus('current')
if mibBuilder.loadTexts: xfPMResetThreshold15mSESs.setDescription('The 15 minute reset threshold for SES.\n                Default value is 1.\n                Near end access: read-write\n                Far end access: No access\n                ')
xfPMResetThreshold15mBBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 9, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfPMResetThreshold15mBBEs.setStatus('current')
if mibBuilder.loadTexts: xfPMResetThreshold15mBBEs.setDescription('The 15 minute reset threshold for BBE.\n                Default value is 200.\n                Near end access: read-write\n                Far end access: No access\n                ')
xfPMSetThreshold24hESs = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 9, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfPMSetThreshold24hESs.setStatus('current')
if mibBuilder.loadTexts: xfPMSetThreshold24hESs.setDescription('The 24 hours set threshold for ES.\n                Default value is 1500.\n                Near end access: read-write\n                Far end access: No access\n                ')
xfPMSetThreshold24hSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 9, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfPMSetThreshold24hSESs.setStatus('current')
if mibBuilder.loadTexts: xfPMSetThreshold24hSESs.setDescription('The 24 hours set threshold for SES.\n                Default value is 20.\n                Near end access: read-write\n                Far end access: No access\n                ')
xfPMSetThreshold24hBBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 9, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfPMSetThreshold24hBBEs.setStatus('current')
if mibBuilder.loadTexts: xfPMSetThreshold24hBBEs.setDescription('The 24 hours set threshold for BBE.\n                Default value is 48000.\n                Near end access: read-write\n                Far end access: No access\n                ')
xfPMView = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 9, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pmEnable", 1), ("pmDisable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfPMView.setStatus('current')
if mibBuilder.loadTexts: xfPMView.setDescription('\n                Enable/disable visibility of PM tables.\n                Default value: pmEnable(1)\n                Near end access: read-write\n                Far end access: No access\n                ')
xfPMStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 9, 1, 11), Bits().clone(namedValues=NamedValues(("unavailablePeriod0", 0), ("unavailablePeriod1", 1), ("unavailablePeriod2", 2), ("es15m0", 3), ("es15m1", 4), ("es15m2", 5), ("ses15m0", 6), ("ses15m1", 7), ("ses15m2", 8), ("bbe15m0", 9), ("bbe15m1", 10), ("bbe15m2", 11), ("es24h0", 12), ("es24h1", 13), ("es24h2", 14), ("ses24h0", 15), ("ses24h1", 16), ("ses24h2", 17), ("bbe24h0", 18), ("bbe24h1", 19), ("bbe24h2", 20), ("rlts1Counter15m0", 21), ("rlts1Counter15m1", 22), ("rlts1Counter15m2", 23), ("rlts2Counter15m0", 24), ("rlts2Counter15m1", 25), ("rlts2Counter15m2", 26), ("rltmCounter15m0", 27), ("rltmCounter15m1", 28), ("rltmCounter15m2", 29), ("tlts1Counter15m0", 30), ("tlts1Counter15m1", 31), ("tlts1Counter15m2", 32), ("tltmCounter15m0", 33), ("tltmCounter15m1", 34), ("tltmCounter15m2", 35), ("rlts1Counter24h0", 36), ("rlts1Counter24h1", 37), ("rlts1Counter24h2", 38), ("rlts2Counter24h0", 39), ("rlts2Counter24h1", 40), ("rlts2Counter24h2", 41), ("rltmCounter24h0", 42), ("rltmCounter24h1", 43), ("rltmCounter24h2", 44), ("tlts1Counter24h0", 45), ("tlts1Counter24h1", 46), ("tlts1Counter24h2", 47), ("tltmCounter24h0", 48), ("tltmCounter24h1", 49), ("tltmCounter24h2", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMStatus.setStatus('current')
if mibBuilder.loadTexts: xfPMStatus.setDescription('Threshold alarm status.\n                 Values from rlts1Counter15m0(21) to tltmCounter24h2(50)\n                 are related to obsoleted MOs.')
xfPMRLTS1Threshold = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 9, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-999, -201)).clone(-999)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfPMRLTS1Threshold.setStatus('current')
if mibBuilder.loadTexts: xfPMRLTS1Threshold.setDescription('RLTS1 Alarm Threshold for Minimum RF Input Power.\n                RF input level = value/10 dBm.\n                Domain: [-99.9 ... -20.1 dBm]\n                Valid for both 15 m & 24 h intervals.\n                If changed current interval PM data must be reset.\n                Always less than RLTS2, xfPMRLTS2Threshold.')
xfPMSetThreshold15mRLTS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 9, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 900)).clone(150)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfPMSetThreshold15mRLTS1.setStatus('current')
if mibBuilder.loadTexts: xfPMSetThreshold15mRLTS1.setDescription('Received Level 1 Threshold Second (RLTS1) 15 minute.\n                Alarm Set threshold in number of seconds that\n                RF Input Power are allowed below the\n                RLTS1 Alarm Threshold for Minimum RF Input Power\n                in current 15 minute interval.\n                Always greater than alarm Reset, xfPMResetThreshold15mRLTS1.')
xfPMResetThreshold15mRLTS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 9, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 900)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfPMResetThreshold15mRLTS1.setStatus('current')
if mibBuilder.loadTexts: xfPMResetThreshold15mRLTS1.setDescription('Received Level 1 Threshold Second (RLTS1) 15 minute.\n                Alarm Reset threshold in number of seconds that\n                RF Input Power are allowed below the\n                RLTS1 Alarm Threshold for Minimum RF Input Power\n                for entire current 15 minute interval.\n                Always less than alarm Set, xfPMSetThreshold15mRLTS1.')
xfPMRLTS2Threshold = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 9, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-998, -200)).clone(-998)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfPMRLTS2Threshold.setStatus('current')
if mibBuilder.loadTexts: xfPMRLTS2Threshold.setDescription('RLTS2 Alarm Threshold for Minimum RF Input Power.\n                RF input level = value/10 dBm.\n                Domain: [-99.8 ... -20.0 dBm]\n                Valid for both 15 m & 24 h intervals.\n                If changed current interval PM data must be reset.\n                Always greater than RLTS1, xfPMRLTS1Threshold.')
xfPMSetThreshold15mRLTS2 = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 9, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 900)).clone(180)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfPMSetThreshold15mRLTS2.setStatus('current')
if mibBuilder.loadTexts: xfPMSetThreshold15mRLTS2.setDescription('Received Level 2 Threshold Second (RLTS2) 15 minute.\n                Alarm Set threshold in number of seconds that\n                RF Input Power are allowed below the\n                RLTS2 Alarm Threshold for Minimum RF Input Power\n                in current 15 minute interval.\n                Always greater or equal to alarm Reset, xfPMResetThreshold15mRLTS2.')
xfPMResetThreshold15mRLTS2 = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 9, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 900)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfPMResetThreshold15mRLTS2.setStatus('current')
if mibBuilder.loadTexts: xfPMResetThreshold15mRLTS2.setDescription('Received Level 2 Threshold Second (RLTS2) 15 minute.\n                Alarm Reset threshold in number of seconds that\n                RF Input Power are allowed below the\n                RLTS2 Alarm Threshold for Minimum RF Input Power\n                for entire current 15 minute interval.\n                Always less or equal to alarm Set, xfPMSetThreshold15mRLTS2.')
xfPMSetThreshold15mRLTM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 9, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 800)).clone(800)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfPMSetThreshold15mRLTM.setStatus('current')
if mibBuilder.loadTexts: xfPMSetThreshold15mRLTM.setDescription('Receive Level Tide Mark (RLTM) 15 minute.\n                Alarm Set threshold for maximum allowed\n                max / min difference of RF Input Power\n                in current 15 minute interval.\n                RF input level = value/10 dB.\n                Domain: [1.0 ... 80.0 dB]\n                Always greater or equal to alarm Reset, xfPMResetThreshold15mRLTM.')
xfPMResetThreshold15mRLTM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 9, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 800)).clone(790)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfPMResetThreshold15mRLTM.setStatus('current')
if mibBuilder.loadTexts: xfPMResetThreshold15mRLTM.setDescription('Receive Level Tide Mark (RLTM) 15 minute.\n                Alarm Reset threshold for maximum allowed\n                max / min difference of RF Input Power\n                for entire current 15 minute interval.\n                RF input level = value/10 dB.\n                Domain: [1.0 ... 80.0 dB]\n                Always less or equal to alarm Set, xfPMSetThreshold15mRLTM.')
xfPMTLTS1Threshold = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 9, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 45)).clone(45)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfPMTLTS1Threshold.setStatus('current')
if mibBuilder.loadTexts: xfPMTLTS1Threshold.setDescription('TLTS1 Alarm Threshold for Maximum RF Output Power.\n                RF output level = value dBm.\n                Domain: [-100 ... 45 dBm]\n                Valid for both 15 m & 24 h intervals.\n                If changed current interval PM data must be reset.')
xfPMSetThreshold15mTLTS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 9, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 900)).clone(180)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfPMSetThreshold15mTLTS1.setStatus('current')
if mibBuilder.loadTexts: xfPMSetThreshold15mTLTS1.setDescription('Transmitted Levels 1 Threshold Second (TLTS1) 15 minute.\n                Alarm Set threshold in number of seconds that\n                RF Output Power are allowed above the\n                TLTS1 Alarm Threshold for Maximum RF Output Power\n                in current 15 minute interval.\n                Always greater or equal to alarm Reset, xfPMResetThreshold15mTLTS1.')
xfPMResetThreshold15mTLTS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 9, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 900)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfPMResetThreshold15mTLTS1.setStatus('current')
if mibBuilder.loadTexts: xfPMResetThreshold15mTLTS1.setDescription('Transmitted Levels 1 Threshold Second (TLTS1) 15 minute.\n                Alarm Reset threshold in number of seconds that\n                RF Output Power are allowed above the\n                TLTS1 Alarm Threshold for Maximum RF Output Power\n                for entire current 15 minute interval.\n                Always less or equal to alarm Set, xfPMSetThreshold15mTLTS1.')
xfPMSetThreshold15mTLTM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 9, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 145)).clone(145)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfPMSetThreshold15mTLTM.setStatus('current')
if mibBuilder.loadTexts: xfPMSetThreshold15mTLTM.setDescription('Transmitted Level Tide Mark (TLTM) 15 minute.\n                Alarm Set threshold for maximum allowed\n                max / min difference of RF Output Power\n                in current 15 minute interval.\n                RF output level = value dB.\n                Domain: [1 ... 145 dB]\n                Always greater or equal to alarm Reset, xfPMResetThreshold15mTLTM.')
xfPMResetThreshold15mTLTM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 9, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 145)).clone(144)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfPMResetThreshold15mTLTM.setStatus('current')
if mibBuilder.loadTexts: xfPMResetThreshold15mTLTM.setDescription('Transmitted Level Tide Mark (TLTM) 15 minute.\n                Alarm Reset threshold for maximum allowed\n                max / min difference of RF Output Power\n                for entire current 15 minute interval.\n                RF output level = value dB.\n                Domain: [1 ... 145 dB]\n                Always less or equal to alarm Set, xfPMSetThreshold15mTLTM.')
xfPMSetThreshold24hRLTS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 9, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 86400)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfPMSetThreshold24hRLTS1.setStatus('current')
if mibBuilder.loadTexts: xfPMSetThreshold24hRLTS1.setDescription('Received Level 1 Threshold Second (RLTS1) 24 hour.\n                Alarm Set / Reset threshold in number of seconds that\n                RF Input Power are allowed below the\n                RLTS1 Alarm Threshold for Minimum RF Input Power\n                in current 24 hour interval.')
xfPMSetThreshold24hRLTS2 = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 9, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 86400)).clone(1500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfPMSetThreshold24hRLTS2.setStatus('current')
if mibBuilder.loadTexts: xfPMSetThreshold24hRLTS2.setDescription('Received Level 2 Threshold Second (RLTS2) 24 hour.\n                Alarm Set / Reset threshold in number of seconds that\n                RF Input Power are allowed below the\n                RLTS2 Alarm Threshold for Minimum RF Input Power\n                in current 24 hour interval.')
xfPMSetThreshold24hRLTM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 9, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 800)).clone(800)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfPMSetThreshold24hRLTM.setStatus('current')
if mibBuilder.loadTexts: xfPMSetThreshold24hRLTM.setDescription('Receive Level Tide Mark (RLTM) 24 hour.\n                Alarm Set / Reset threshold for maximum allowed\n                max / min difference of RF Input Power\n                in current 24 hour interval.\n                RF input level = value/10 dB.\n                Domain: [1.0 ... 80.0 dB]')
xfPMSetThreshold24hTLTS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 9, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 86400)).clone(1500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfPMSetThreshold24hTLTS1.setStatus('current')
if mibBuilder.loadTexts: xfPMSetThreshold24hTLTS1.setDescription('Transmitted Levels 1 Threshold Second (TLTS1) 24 hour.\n                Alarm Set / Reset threshold in number of seconds that\n                RF Output Power are allowed above the\n                TLTS1 Alarm Threshold for Maximum RF Output Power\n                in current 24 hour interval.')
xfPMSetThreshold24hTLTM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 9, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 145)).clone(145)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfPMSetThreshold24hTLTM.setStatus('current')
if mibBuilder.loadTexts: xfPMSetThreshold24hTLTM.setDescription('Transmitted Level Tide Mark (TLTM) 24 hour.\n                Alarm Set / Reset threshold for maximum allowed\n                max / min difference of RF Output Power\n                in current 24 hour interval.\n                RF output level = value dB.\n                Domain: [1 ... 145 dB]')
xfRLPMCurrent24hTable = MibTable((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 10), )
if mibBuilder.loadTexts: xfRLPMCurrent24hTable.setStatus('current')
if mibBuilder.loadTexts: xfRLPMCurrent24hTable.setDescription('TBD')
xfRLPMCurrent24hEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 10, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: xfRLPMCurrent24hEntry.setStatus('current')
if mibBuilder.loadTexts: xfRLPMCurrent24hEntry.setDescription('Entry in the xfRLPMCurrent24hTable.')
xfPMCurrent24hTimeElapsed = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 10, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMCurrent24hTimeElapsed.setStatus('current')
if mibBuilder.loadTexts: xfPMCurrent24hTimeElapsed.setDescription('The number of seconds that have elapsed since the\n                beginning of the current error-measurement period.\n\n                If the current interval exceeds the maximum value,\n                the agent will return the maximum value.\n                ')
xfPMCurrent24hESs = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 10, 1, 2), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMCurrent24hESs.setStatus('current')
if mibBuilder.loadTexts: xfPMCurrent24hESs.setDescription('Errored Seconds in the current 24-hour interval.')
xfPMCurrent24hSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 10, 1, 3), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMCurrent24hSESs.setStatus('current')
if mibBuilder.loadTexts: xfPMCurrent24hSESs.setDescription('Severely Errored Seconds in the current 24-hour\n                interval.')
xfPMCurrent24hBBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 10, 1, 4), HCPerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMCurrent24hBBEs.setStatus('current')
if mibBuilder.loadTexts: xfPMCurrent24hBBEs.setDescription('Background Block Errors in the current 24 hour interval')
xfPMCurrent24hUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 10, 1, 5), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMCurrent24hUASs.setStatus('current')
if mibBuilder.loadTexts: xfPMCurrent24hUASs.setDescription('Unavailable seconds (or Unavailable Time) in the current\n                 24 hour interval.')
xfPMCurrent24hBBs = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 10, 1, 6), HCPerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMCurrent24hBBs.setStatus('current')
if mibBuilder.loadTexts: xfPMCurrent24hBBs.setDescription('The number of Background Blocks in the current 24\n                hour interval.')
xfPMCurrent24hRLTS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 10, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMCurrent24hRLTS1.setStatus('current')
if mibBuilder.loadTexts: xfPMCurrent24hRLTS1.setDescription('Received Level 1 Threshold Second (RLTS1) 24 hour.\n                Number of seconds that the RF Input Power was below the RLTS1\n                in the current 24 hour interval.\n                -1 indicates invalid value.\n                Reset by xfTermPerfReset.')
xfPMCurrent24hRLTS2 = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 10, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMCurrent24hRLTS2.setStatus('current')
if mibBuilder.loadTexts: xfPMCurrent24hRLTS2.setDescription('Received Level 2 Threshold Second (RLTS2) 24 hour.\n                Number of seconds that the RF Input Power was below the RLTS2\n                in the current 24 hour interval.\n                -1 indicates invalid value.\n                Reset by xfTermPerfReset.')
xfPMCurrent24hRLMin = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 10, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-999, -200), ValueRangeConstraint(0, 0), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMCurrent24hRLMin.setStatus('current')
if mibBuilder.loadTexts: xfPMCurrent24hRLMin.setDescription('Indicate Min RF Input level in current 24 hour interval.\n                RF input level = value/10 dBm.\n                Domain: [-99.9 ... -20.0 dBm]\n                0 (zero) indicates invalid value.\n                Reset by xfTermPerfReset.')
xfPMCurrent24hRLMax = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 10, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-999, -200), ValueRangeConstraint(0, 0), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMCurrent24hRLMax.setStatus('current')
if mibBuilder.loadTexts: xfPMCurrent24hRLMax.setDescription('Indicate Max RF Input level in current 24 hour interval.\n                RF input level = value/10 dBm.\n                Domain: [-99.9 ... -20.0 dBm]\n                0 (zero) indicates invalid value.\n                Reset by xfTermPerfReset.')
xfPMCurrent24hTLTS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 10, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMCurrent24hTLTS1.setStatus('current')
if mibBuilder.loadTexts: xfPMCurrent24hTLTS1.setDescription('Transmitted Level 1 Threshold Second (TLTS1) 24 hour.\n                Number of seconds that the RF Output Power was above the TLTS1\n                in the current 24 hour interval\n                -1 indicates invalid value.\n                Reset by xfTermPerfReset.')
xfPMCurrent24hTLMin = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 10, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-100, 45), ValueRangeConstraint(255, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMCurrent24hTLMin.setStatus('current')
if mibBuilder.loadTexts: xfPMCurrent24hTLMin.setDescription('Indicate Min RF Output level in current 24 hour interval.\n                RF output level = value dBm.\n                Domain: [-100 ... 45 dBm]\n                255 indicates invalid value.\n                Reset by xfTermPerfReset.')
xfPMCurrent24hTLMax = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 10, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-100, 45), ValueRangeConstraint(255, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMCurrent24hTLMax.setStatus('current')
if mibBuilder.loadTexts: xfPMCurrent24hTLMax.setDescription('Indicate Max RF Output level in current 24 hour interval.\n                RF output level = value dBm.\n                Domain: [-100 ... 45 dBm]\n                255 indicates invalid value.\n                Reset by xfTermPerfReset.')
xfPMCurrent24hMSEMin = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 10, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1000, 1000), ValueRangeConstraint(2000, 2000), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMCurrent24hMSEMin.setStatus('current')
if mibBuilder.loadTexts: xfPMCurrent24hMSEMin.setDescription('Indicate Min MSE level\n                in current 24 hour interval.\n                Input level = value/10 dB.\n                Domain: [-100.0 ... 100.0 dB]\n                2000 indicates invalid value.\n                Reset by xfTermPerfReset.')
xfPMCurrent24hMSEMax = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 10, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1000, 1000), ValueRangeConstraint(2000, 2000), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMCurrent24hMSEMax.setStatus('current')
if mibBuilder.loadTexts: xfPMCurrent24hMSEMax.setDescription('Indicate Max MSE level\n                in current 24 hour interval.\n                Input level = value/10 dB.\n                Domain: [-100.0 ... 100.0 dB]\n                2000 indicates invalid value.\n                Reset by xfTermPerfReset.')
xfPMCurrent24hXPIMin = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 10, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1000, 1000), ValueRangeConstraint(2000, 2000), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMCurrent24hXPIMin.setStatus('current')
if mibBuilder.loadTexts: xfPMCurrent24hXPIMin.setDescription('Indicate Min Cross-Polar Interference (XPI) level\n                in current 24 hour interval.\n                Input level = value/10 dB.\n                Domain: [-100.0 ... 100.0 dB]\n                2000 indicates invalid value.\n                Reset by xfTermPerfReset.')
xfPMCurrent24hXPIMax = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 10, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1000, 1000), ValueRangeConstraint(2000, 2000), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMCurrent24hXPIMax.setStatus('current')
if mibBuilder.loadTexts: xfPMCurrent24hXPIMax.setDescription('Indicate Max Cross-Polar Interference (XPI) level\n                in current 24 hour interval.\n                Input level = value/10 dB.\n                Domain: [-100.0 ... 100.0 dB]\n                2000 indicates invalid value.\n                Reset by xfTermPerfReset.')
xfPMCurrent24hESR = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 10, 1, 18), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMCurrent24hESR.setStatus('current')
if mibBuilder.loadTexts: xfPMCurrent24hESR.setDescription('Error Seconds Ratio in the current 24-hour interval')
xfPMCurrent24hSESR = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 10, 1, 19), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMCurrent24hSESR.setStatus('current')
if mibBuilder.loadTexts: xfPMCurrent24hSESR.setDescription('Severely Error Seconds Ratio in the current 24-hour interval')
xfPMCurrent24hBBER = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 10, 1, 20), HCPerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMCurrent24hBBER.setStatus('current')
if mibBuilder.loadTexts: xfPMCurrent24hBBER.setDescription('Background Block Errors Ratio in the current 24-hour interval')
xfRLPMInterval24hTable = MibTable((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 11), )
if mibBuilder.loadTexts: xfRLPMInterval24hTable.setStatus('current')
if mibBuilder.loadTexts: xfRLPMInterval24hTable.setDescription('TBD')
xfRLPMInterval24hEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 11, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: xfRLPMInterval24hEntry.setStatus('current')
if mibBuilder.loadTexts: xfRLPMInterval24hEntry.setDescription('Entry in the xfRLPMInterval24hTable.')
xfPMInterval24hESs = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 11, 1, 1), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMInterval24hESs.setStatus('current')
if mibBuilder.loadTexts: xfPMInterval24hESs.setDescription('The counter associated with the number of\n                Errored Seconds encountered by a SONET/SDH\n                Section in the previous 24-hour interval.')
xfPMInterval24hSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 11, 1, 2), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMInterval24hSESs.setStatus('current')
if mibBuilder.loadTexts: xfPMInterval24hSESs.setDescription('The counter associated with the number of Severely\n                Errored Seconds encountered by a SONET/SDH\n                Section in the previous 24-hour interval.')
xfPMInterval24hBBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 11, 1, 3), HCPerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMInterval24hBBEs.setStatus('current')
if mibBuilder.loadTexts: xfPMInterval24hBBEs.setDescription('The counter associated with the number of\n                Coding Violations (Errored Blocks)\n                encountered by a SONET/SDH Section in the\n                previous 24-hour interval.')
xfPMInterval24hUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 11, 1, 4), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMInterval24hUASs.setStatus('current')
if mibBuilder.loadTexts: xfPMInterval24hUASs.setDescription('The number of UnAvailable Seconds encountered by\n                a SONET/SDH Section in the previous 24 hour\n                interval.')
xfPMInterval24hBBs = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 11, 1, 5), HCPerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMInterval24hBBs.setStatus('current')
if mibBuilder.loadTexts: xfPMInterval24hBBs.setDescription('The number of Background Blocks in a\n                SONET/SDH Section in the previous\n                24 hour interval.')
xfPMInterval24hValidData = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 11, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMInterval24hValidData.setStatus('current')
if mibBuilder.loadTexts: xfPMInterval24hValidData.setDescription('This variable indicates whether the data\n                for this interval is valid.')
xfPMInterval24hRLTS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 11, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMInterval24hRLTS1.setStatus('current')
if mibBuilder.loadTexts: xfPMInterval24hRLTS1.setDescription('Received Level 1 Threshold Second (RLTS1) 24 hour.\n                Number of seconds that the RF Input Power was below the RLTS1\n                in the previous 24 hour interval.\n                -1 indicates invalid value.\n                Reset by xfTermPerfReset.')
xfPMInterval24hRLTS2 = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 11, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMInterval24hRLTS2.setStatus('current')
if mibBuilder.loadTexts: xfPMInterval24hRLTS2.setDescription('Received Level 2 Threshold Second (RLTS2) 24 hour.\n                Number of seconds that the RF Input Power was below the RLTS2\n                in the previous 24 hour interval.\n                -1 indicates invalid value.\n                Reset by xfTermPerfReset.')
xfPMInterval24hRLMin = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 11, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-999, -200), ValueRangeConstraint(0, 0), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMInterval24hRLMin.setStatus('current')
if mibBuilder.loadTexts: xfPMInterval24hRLMin.setDescription('Indicate Min RF Input level in previous 24 hour interval.\n                RF input level = value/10 dBm.\n                Domain: [-99.9 ... -20.0 dBm]\n                0 (zero) indicates invalid value.\n                Reset by xfTermPerfReset.')
xfPMInterval24hRLMax = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 11, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-999, -200), ValueRangeConstraint(0, 0), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMInterval24hRLMax.setStatus('current')
if mibBuilder.loadTexts: xfPMInterval24hRLMax.setDescription('Indicate Max RF Input level in previous 24 hour interval.\n                RF input level = value/10 dBm.\n                Domain: [-99.9 ... -20.0 dBm]\n                0 (zero) indicates invalid value.\n                Reset by xfTermPerfReset.')
xfPMInterval24hTLTS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 11, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMInterval24hTLTS1.setStatus('current')
if mibBuilder.loadTexts: xfPMInterval24hTLTS1.setDescription('Transmitted Level 1 Threshold Second (TLTS1) 24 hour.\n                Number of seconds that the RF Output Power was above the TLTS1\n                in the previous 24 hour interval\n                -1 indicates invalid value.\n                Reset by xfTermPerfReset.')
xfPMInterval24hTLMin = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 11, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-100, 45), ValueRangeConstraint(255, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMInterval24hTLMin.setStatus('current')
if mibBuilder.loadTexts: xfPMInterval24hTLMin.setDescription('Indicate Min RF Output level in previous 24 hour interval.\n                RF output level = value dBm.\n                Domain: [-100 ... 45 dBm]\n                255 indicates invalid value.\n                Reset by xfTermPerfReset.')
xfPMInterval24hTLMax = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 11, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-100, 45), ValueRangeConstraint(255, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMInterval24hTLMax.setStatus('current')
if mibBuilder.loadTexts: xfPMInterval24hTLMax.setDescription('Indicate Max RF Output level in previous 24 hour interval.\n                RF output level = value dBm.\n                Domain: [-100 ... 45 dBm]\n                255 indicates invalid value.\n                Reset by xfTermPerfReset.')
xfPMInterval24hMSEMin = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 11, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1000, 1000), ValueRangeConstraint(2000, 2000), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMInterval24hMSEMin.setStatus('current')
if mibBuilder.loadTexts: xfPMInterval24hMSEMin.setDescription('Indicate Min MSE level\n                in previous 24 hour interval.\n                Input level = value/10 dB.\n                Domain: [-100.0 ... 100.0 dB]\n                2000 indicates invalid value.\n                Reset by xfTermPerfReset.')
xfPMInterval24hMSEMax = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 11, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1000, 1000), ValueRangeConstraint(2000, 2000), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMInterval24hMSEMax.setStatus('current')
if mibBuilder.loadTexts: xfPMInterval24hMSEMax.setDescription('Indicate Max MSE level\n                in previous 24 hour interval.\n                Input level = value/10 dB.\n                Domain: [-100.0 ... 100.0 dB]\n                2000 indicates invalid value.\n                Reset by xfTermPerfReset.')
xfPMInterval24hXPIMin = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 11, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1000, 1000), ValueRangeConstraint(2000, 2000), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMInterval24hXPIMin.setStatus('current')
if mibBuilder.loadTexts: xfPMInterval24hXPIMin.setDescription('Indicate Min Cross-Polar Interference (XPI) level\n                in previous 24 hour interval.\n                Input level = value/10 dB.\n                Domain: [-100.0 ... 100.0 dB]\n                2000 indicates invalid value.\n                Reset by xfTermPerfReset.')
xfPMInterval24hXPIMax = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 11, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1000, 1000), ValueRangeConstraint(2000, 2000), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMInterval24hXPIMax.setStatus('current')
if mibBuilder.loadTexts: xfPMInterval24hXPIMax.setDescription('Indicate Max Cross-Polar Interference (XPI) level\n                in previous 24 hour interval.\n                Input level = value/10 dB.\n                Domain: [-100.0 ... 100.0 dB]\n                2000 indicates invalid value.\n                Reset by xfTermPerfReset.')
xfRLPMCurrent15mTable = MibTable((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 12), )
if mibBuilder.loadTexts: xfRLPMCurrent15mTable.setStatus('current')
if mibBuilder.loadTexts: xfRLPMCurrent15mTable.setDescription('TBD')
xfRLPMCurrent15mEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 12, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: xfRLPMCurrent15mEntry.setStatus('current')
if mibBuilder.loadTexts: xfRLPMCurrent15mEntry.setDescription('Entry in the table.')
xfPMCurrent15mElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 12, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMCurrent15mElapsedTime.setStatus('current')
if mibBuilder.loadTexts: xfPMCurrent15mElapsedTime.setDescription('The number of seconds that have elapsed since the beginning of\n                the current error-measurement period.\n                ')
xfPMCurrent15mESs = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 12, 1, 2), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMCurrent15mESs.setStatus('current')
if mibBuilder.loadTexts: xfPMCurrent15mESs.setDescription('Error seconds in the current 15 minute interval.')
xfPMCurrent15mSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 12, 1, 3), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMCurrent15mSESs.setStatus('current')
if mibBuilder.loadTexts: xfPMCurrent15mSESs.setDescription('Severely error seconds in the current 15 minute interval.')
xfPMCurrent15mBBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 12, 1, 4), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMCurrent15mBBEs.setStatus('current')
if mibBuilder.loadTexts: xfPMCurrent15mBBEs.setDescription('Background Block Errors in the current 15 minute interval.')
xfPMCurrent15mUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 12, 1, 5), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMCurrent15mUASs.setStatus('current')
if mibBuilder.loadTexts: xfPMCurrent15mUASs.setDescription('Unavailable seconds (or Unavailable Time) in the current\n                15 minute interval.')
xfPMCurrent15mBBs = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 12, 1, 6), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMCurrent15mBBs.setStatus('current')
if mibBuilder.loadTexts: xfPMCurrent15mBBs.setDescription('The number of Background Blocks encountered by a SONET/SDH\n                Section in the current 15 minute interval.')
xfPMCurrent15mRLTS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 12, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 900), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMCurrent15mRLTS1.setStatus('current')
if mibBuilder.loadTexts: xfPMCurrent15mRLTS1.setDescription('Received Level 1 Threshold Second (RLTS1) 15 minute\n                Number of seconds that the RF Input Power was below the RLTS1\n                in the current 15 minute interval.\n                -1 indicates invalid value.\n                Reset by xfTermPerfReset.')
xfPMCurrent15mRLTS2 = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 12, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 900), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMCurrent15mRLTS2.setStatus('current')
if mibBuilder.loadTexts: xfPMCurrent15mRLTS2.setDescription('Received Level 2 Threshold Second (RLTS2) 15 minute\n                Number of seconds that the RF Input Power was below the RLTS2\n                in the current 15 minute interval.\n                -1 indicates invalid value.\n                Reset by xfTermPerfReset.')
xfPMCurrent15mRLMin = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 12, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-999, -200), ValueRangeConstraint(0, 0), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMCurrent15mRLMin.setStatus('current')
if mibBuilder.loadTexts: xfPMCurrent15mRLMin.setDescription('Indicate Min RF Input level in current 15 minute interval.\n                RF input level = value/10 dBm.\n                Domain: [-99.9 ... -20.0 dBm]\n                0 (zero) indicates invalid value.\n                Reset by xfTermPerfReset.')
xfPMCurrent15mRLMax = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 12, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-999, -200), ValueRangeConstraint(0, 0), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMCurrent15mRLMax.setStatus('current')
if mibBuilder.loadTexts: xfPMCurrent15mRLMax.setDescription('Indicate Max RF Input level in current 15 minute interval.\n                RF input level = value/10 dBm.\n                Domain: [-99.9 ... -20.0 dBm]\n                0 (zero) indicates invalid value.\n                Reset by xfTermPerfReset.')
xfPMCurrent15mTLTS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 12, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 900), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMCurrent15mTLTS1.setStatus('current')
if mibBuilder.loadTexts: xfPMCurrent15mTLTS1.setDescription('Transmitted Level 1 Threshold Second (TLTS1) 15 minute\n                Number of seconds that the RF Output Power was above the TLTS1\n                in the current 15 minute interval\n                -1 indicates invalid value.\n                Reset by xfTermPerfReset.')
xfPMCurrent15mTLMin = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 12, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-100, 45), ValueRangeConstraint(255, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMCurrent15mTLMin.setStatus('current')
if mibBuilder.loadTexts: xfPMCurrent15mTLMin.setDescription('Indicate Min RF Output level in current 15 minute interval.\n                RF output level = value dBm.\n                Domain: [-100 ... 45 dBm]\n                255 indicates invalid value.\n                Reset by xfTermPerfReset.')
xfPMCurrent15mTLMax = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 12, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-100, 45), ValueRangeConstraint(255, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMCurrent15mTLMax.setStatus('current')
if mibBuilder.loadTexts: xfPMCurrent15mTLMax.setDescription('Indicate Max RF Output level in current 15 minute interval.\n                RF output level = value dBm.\n                Domain: [-100 ... 45 dBm]\n                255 indicates invalid value.\n                Reset by xfTermPerfReset.')
xfPMCurrent15mMSEMin = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 12, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1000, 1000), ValueRangeConstraint(2000, 2000), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMCurrent15mMSEMin.setStatus('current')
if mibBuilder.loadTexts: xfPMCurrent15mMSEMin.setDescription('Indicate Min MSE level\n                in current 15 minute interval.\n                Input level = value/10 dB.\n                Domain: [-100.0 ... 100.0 dB]\n                2000 indicates invalid value.\n                Reset by xfTermPerfReset.')
xfPMCurrent15mMSEMax = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 12, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1000, 1000), ValueRangeConstraint(2000, 2000), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMCurrent15mMSEMax.setStatus('current')
if mibBuilder.loadTexts: xfPMCurrent15mMSEMax.setDescription('Indicate Max MSE level\n                in current 15 minute interval.\n                Input level = value/10 dB.\n                Domain: [-100.0 ... 100.0 dB]\n                2000 indicates invalid value.\n                Reset by xfTermPerfReset.')
xfPMCurrent15mXPIMin = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 12, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1000, 1000), ValueRangeConstraint(2000, 2000), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMCurrent15mXPIMin.setStatus('current')
if mibBuilder.loadTexts: xfPMCurrent15mXPIMin.setDescription('Indicate Min Cross-Polar Interference (XPI) level\n                in current 15 minute interval.\n                Input level = value/10 dB.\n                Domain: [-100.0 ... 100.0 dB]\n                2000 indicates invalid value.\n                Reset by xfTermPerfReset.')
xfPMCurrent15mXPIMax = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 12, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1000, 1000), ValueRangeConstraint(2000, 2000), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMCurrent15mXPIMax.setStatus('current')
if mibBuilder.loadTexts: xfPMCurrent15mXPIMax.setDescription('Indicate Max Cross-Polar Interference (XPI) level\n                in current 15 minute interval.\n                Input level = value/10 dB.\n                Domain: [-100.0 ... 100.0 dB]\n                2000 indicates invalid value.\n                Reset by xfTermPerfReset.')
xfPMCurrent15mESR = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 12, 1, 18), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMCurrent15mESR.setStatus('current')
if mibBuilder.loadTexts: xfPMCurrent15mESR.setDescription('Error Seconds Ratio in the current 15 minute interval')
xfPMCurrent15mSESR = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 12, 1, 19), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMCurrent15mSESR.setStatus('current')
if mibBuilder.loadTexts: xfPMCurrent15mSESR.setDescription('Severely Error Seconds Ratio in the current 15 minute interval')
xfPMCurrent15mBBER = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 12, 1, 20), HCPerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMCurrent15mBBER.setStatus('current')
if mibBuilder.loadTexts: xfPMCurrent15mBBER.setDescription('Background Block Errors Ratio in the current 15 minute interval')
xfRLPMInterval15mTable = MibTable((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 13), )
if mibBuilder.loadTexts: xfRLPMInterval15mTable.setStatus('current')
if mibBuilder.loadTexts: xfRLPMInterval15mTable.setDescription('TBD')
xfRLPMInterval15mEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 13, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMInterval15mIntervalNumber"))
if mibBuilder.loadTexts: xfRLPMInterval15mEntry.setStatus('current')
if mibBuilder.loadTexts: xfRLPMInterval15mEntry.setDescription('Entry in the table.')
xfPMInterval15mIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMInterval15mIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: xfPMInterval15mIntervalNumber.setDescription('A number between 1 and 96, which identifies the interval for which\n                the set of statistics is available. The interval identified by 1\n                is the most recently completed 15 minute interval, and the interval\n                identified by N is the interval immediately preceding the one\n                identified by N-1.')
xfPMInterval15mESs = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 13, 1, 2), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMInterval15mESs.setStatus('current')
if mibBuilder.loadTexts: xfPMInterval15mESs.setDescription('Error seconds in the xfPMInterval15mIntervalNumber 15 minute interval')
xfPMInterval15mSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 13, 1, 3), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMInterval15mSESs.setStatus('current')
if mibBuilder.loadTexts: xfPMInterval15mSESs.setDescription('Severely error seconds in the xfPDHCompInterval15mIntervalNumber\n                15 minute interval.')
xfPMInterval15mBBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 13, 1, 4), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMInterval15mBBEs.setStatus('current')
if mibBuilder.loadTexts: xfPMInterval15mBBEs.setDescription('Background Block Errors in the xfPDHCompInterval15mIntervalNumber\n                15 minute intervall.')
xfPMInterval15mUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 13, 1, 5), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMInterval15mUASs.setStatus('current')
if mibBuilder.loadTexts: xfPMInterval15mUASs.setDescription('UnAvailable Seconds in the xfPDHCompInterval15mIntervalNumber\n                15 minute interval.')
xfPMInterval15mBBs = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 13, 1, 6), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMInterval15mBBs.setStatus('current')
if mibBuilder.loadTexts: xfPMInterval15mBBs.setDescription('Background blocks in the xfPDHCompInterval15mIntervalNumber 15 minute interval.')
xfPMInterval15mValidData = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 13, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMInterval15mValidData.setStatus('current')
if mibBuilder.loadTexts: xfPMInterval15mValidData.setDescription('This variable indicates if the data for this interval is valid.')
xfPMInterval15mRLTS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 13, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 900), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMInterval15mRLTS1.setStatus('current')
if mibBuilder.loadTexts: xfPMInterval15mRLTS1.setDescription('Received Level 1 Threshold Second (RLTS1) 15 minute\n                Number of seconds that the RF Input Power was below the RLTS1\n                in the previous 15 minute interval.\n                -1 indicates invalid value.\n                Reset by xfTermPerfReset.')
xfPMInterval15mRLTS2 = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 13, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 900), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMInterval15mRLTS2.setStatus('current')
if mibBuilder.loadTexts: xfPMInterval15mRLTS2.setDescription('Received Level 2 Threshold Second (RLTS2) 15 minute\n                Number of seconds that the RF Input Power was below the RLTS2\n                in the previous 15 minute interval.\n                -1 indicates invalid value.\n                Reset by xfTermPerfReset.')
xfPMInterval15mRLMin = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 13, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-999, -200), ValueRangeConstraint(0, 0), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMInterval15mRLMin.setStatus('current')
if mibBuilder.loadTexts: xfPMInterval15mRLMin.setDescription('Indicate Min RF Input level in previous 15 minute interval.\n                RF input level = value/10 dBm.\n                Domain: [-99.9 ... -20.0 dBm]\n                0 (zero) indicates invalid value.\n                Reset by xfTermPerfReset.')
xfPMInterval15mRLMax = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 13, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-999, -200), ValueRangeConstraint(0, 0), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMInterval15mRLMax.setStatus('current')
if mibBuilder.loadTexts: xfPMInterval15mRLMax.setDescription('Indicate Max RF Input level in previous 15 minute interval.\n                RF input level = value/10 dBm.\n                Domain: [-99.9 ... -20.0 dBm]\n                0 (zero) indicates invalid value.\n                Reset by xfTermPerfReset.')
xfPMInterval15mTLTS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 13, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 900), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMInterval15mTLTS1.setStatus('current')
if mibBuilder.loadTexts: xfPMInterval15mTLTS1.setDescription('Transmitted Level 1 Threshold Second (TLTS1) 15 minute\n                Number of seconds that the RF Output Power was above the TLTS1\n                in the previous 15 minute interval\n                -1 indicates invalid value.\n                Reset by xfTermPerfReset.')
xfPMInterval15mTLMin = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 13, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-100, 45), ValueRangeConstraint(255, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMInterval15mTLMin.setStatus('current')
if mibBuilder.loadTexts: xfPMInterval15mTLMin.setDescription('Indicate Min RF Output level in previous 15 minute interval.\n                RF output level = value dBm.\n                Domain: [-100 ... 45 dBm]\n                255 indicates invalid value.\n                Reset by xfTermPerfReset.')
xfPMInterval15mTLMax = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 13, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-100, 45), ValueRangeConstraint(255, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMInterval15mTLMax.setStatus('current')
if mibBuilder.loadTexts: xfPMInterval15mTLMax.setDescription('Indicate Max RF Output level in previous 15 minute interval.\n                RF output level = value dBm.\n                Domain: [-100 ... 45 dBm]\n                255 indicates invalid value.\n                Reset by xfTermPerfReset.')
xfPMInterval15mMSEMin = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 13, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1000, 1000), ValueRangeConstraint(2000, 2000), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMInterval15mMSEMin.setStatus('current')
if mibBuilder.loadTexts: xfPMInterval15mMSEMin.setDescription('Indicate Min MSE level\n                in previous 15 minute interval.\n                Input level = value/10 dB.\n                Domain: [-100.0 ... 100.0 dB]\n                2000 indicates invalid value.\n                Reset by xfTermPerfReset.')
xfPMInterval15mMSEMax = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 13, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1000, 1000), ValueRangeConstraint(2000, 2000), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMInterval15mMSEMax.setStatus('current')
if mibBuilder.loadTexts: xfPMInterval15mMSEMax.setDescription('Indicate Max MSE level\n                in previous 15 minute interval.\n                Input level = value/10 dB.\n                Domain: [-100.0 ... 100.0 dB]\n                2000 indicates invalid value.\n                Reset by xfTermPerfReset.')
xfPMInterval15mXPIMin = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 13, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1000, 1000), ValueRangeConstraint(2000, 2000), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMInterval15mXPIMin.setStatus('current')
if mibBuilder.loadTexts: xfPMInterval15mXPIMin.setDescription('Indicate Min Cross-Polar Interference (XPI) level\n                in previous 15 minute interval.\n                Input level = value/10 dB.\n                Domain: [-100.0 ... 100.0 dB]\n                2000 indicates invalid value.\n                Reset by xfTermPerfReset.')
xfPMInterval15mXPIMax = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 13, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1000, 1000), ValueRangeConstraint(2000, 2000), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMInterval15mXPIMax.setStatus('current')
if mibBuilder.loadTexts: xfPMInterval15mXPIMax.setDescription('Indicate Max Cross-Polar Interference (XPI) level\n                in previous 15 minute interval.\n                Input level = value/10 dB.\n                Domain: [-100.0 ... 100.0 dB]\n                2000 indicates invalid value.\n                Reset by xfTermPerfReset.')
xfRLPtpTerminalXTable = MibTable((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 14), )
if mibBuilder.loadTexts: xfRLPtpTerminalXTable.setStatus('current')
if mibBuilder.loadTexts: xfRLPtpTerminalXTable.setDescription('Extension table to xfRLPtpTerminalTable.\n             The table is indexed with entLogicalIndex.')
xfRLPtpTerminalXEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 14, 1), ).setIndexNames((0, "ENTITY-MIB", "entLogicalIndex"))
if mibBuilder.loadTexts: xfRLPtpTerminalXEntry.setStatus('current')
if mibBuilder.loadTexts: xfRLPtpTerminalXEntry.setDescription('Entry in the table')
xfTermInterfaces = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("pdhToTdmHier", 2), ("pdhToTdmFlat", 3), ("pdhToTdmFlatAndBitpipeToPtp", 4), ("pdhToTdmAndSDHToSFP", 5), ("pdhToTdmAndSDHToPtp", 6), ("pdhToTdmAndSDHToSFPHAndSDHToPtP", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfTermInterfaces.setStatus('current')
if mibBuilder.loadTexts: xfTermInterfaces.setDescription('Interface constellation for the terminal')
xfTermInterfacesCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 14, 1, 2), Bits().clone(namedValues=NamedValues(("pdhToTdmHier", 0), ("pdhToTdmFlat", 1), ("pdhToTdmFlatAndBitpipeToPtp", 2), ("pdhToTdmAndSDHToSFP", 3), ("pdhToTdmAndSDHToPtp", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfTermInterfacesCapability.setStatus('current')
if mibBuilder.loadTexts: xfTermInterfacesCapability.setDescription('Interface constellation capability for the terminal')
xfTermChannelModeOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 14, 1, 3), ChannelMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfTermChannelModeOperStatus.setStatus('current')
if mibBuilder.loadTexts: xfTermChannelModeOperStatus.setDescription('\n            Channel mode for the terminal (operational status).\n            - ccdp(2): Co-Channel Dual Polarization (XPIC)\n            - accp(3): Adjacent Channels Co-Polarization (non-XPIC)\n            - acap(4): Adjacent Channels Alternate Polarization (non-XPIC)\n            ')
xfTermXPICRestore = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 14, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("xPicRestore", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfTermXPICRestore.setStatus('current')
if mibBuilder.loadTexts: xfTermXPICRestore.setDescription('Restore XPIC')
xfTermTribCapacityActual = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 14, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfTermTribCapacityActual.setStatus('current')
if mibBuilder.loadTexts: xfTermTribCapacityActual.setDescription('Actual tributary capacity')
xfTermTribCapacityDesired = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 14, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfTermTribCapacityDesired.setStatus('current')
if mibBuilder.loadTexts: xfTermTribCapacityDesired.setDescription('Desired tributary capacity')
xfTermBitPipeCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 14, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfTermBitPipeCapacity.setStatus('current')
if mibBuilder.loadTexts: xfTermBitPipeCapacity.setDescription('Bit pipe capacity, Kbps')
xfTermRowIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 14, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfTermRowIndex.setStatus('current')
if mibBuilder.loadTexts: xfTermRowIndex.setDescription('Points to a row in xfRlPtpTerminalCapabilityTable')
xfTermCapabilitiesLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 14, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfTermCapabilitiesLastChange.setStatus('current')
if mibBuilder.loadTexts: xfTermCapabilitiesLastChange.setDescription('The value of sysUpTime at the time of the last creation or\n             deletion of an entry in the xfRLPtpTerminalCapabilityTable.\n             If the number of entries has been unchanged since the last\n             re-initialization of the local network management subsystem,\n             then this object contains a zero value.')
xfTermActualRowIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 14, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfTermActualRowIndex.setStatus('current')
if mibBuilder.loadTexts: xfTermActualRowIndex.setDescription('The actual row that is pointed out in xfRlPtpTerminalCapabilityTable')
xfTermMaxRowIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 14, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfTermMaxRowIndex.setStatus('current')
if mibBuilder.loadTexts: xfTermMaxRowIndex.setDescription('Points to a row in xfRlPtpTerminalCapabilityTable where the maximum capacity is, including license')
xfTermAdaptiveManualRowIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 14, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfTermAdaptiveManualRowIndex.setStatus('current')
if mibBuilder.loadTexts: xfTermAdaptiveManualRowIndex.setDescription('Manual row index')
xfTermAdaptiveManualMode = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 14, 1, 13), TermAdaptiveManualMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfTermAdaptiveManualMode.setStatus('current')
if mibBuilder.loadTexts: xfTermAdaptiveManualMode.setDescription('Adaptive manual mode\n            - other(1)\n            - disable(2)(default)\n            - enable(3)\n            - enabledAsRequest(4)\n            ')
xfTermSpectrumEfficiencyClass = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 14, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("other", 1), ("sec2", 2), ("sec3", 3), ("sec4L", 4), ("sec4H", 5), ("sec5A", 6), ("sec5B", 7), ("sec6A", 8), ("sec6B", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfTermSpectrumEfficiencyClass.setStatus('current')
if mibBuilder.loadTexts: xfTermSpectrumEfficiencyClass.setDescription('Spectrum Efficiency Class:\n          - other(1): unknown\n          - sec2(2): spectrum eff. Class 2\n          - sec3(3): spectrum eff. Class 3\n          - sec4L(4): spectrum eff. Class 4L\n          - sec4H(5): specturm eff. Class 4H\n          - sec5A(6): spectrum eff. Class 5A\n          - sec5B(7): spectrum eff. Class 5B\n          - sec6A(8): spectrum eff. Class 6A\n          - sec6B(9): spectrum eff. Class 6B\n          Near end access: read-write\n          Far end access: read-write (Traffic Node), read-only (other)')
xfTermSpectrumEfficiencyClassCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 14, 1, 15), Bits().clone(namedValues=NamedValues(("sec2", 0), ("sec3", 1), ("sec4L", 2), ("sec4H", 3), ("sec5A", 4), ("sec5B", 5), ("sec6A", 6), ("sec6B", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfTermSpectrumEfficiencyClassCapability.setStatus('current')
if mibBuilder.loadTexts: xfTermSpectrumEfficiencyClassCapability.setDescription('\n            Spectrum Efficiency Class Capability\n            - 0 Sec2  Spectrum eff. Class 2\n            - 1 Sec3  Specturm eff. Class 3\n            - 2 Sec4L Specturm eff. Class 4L\n            - 3 Sec4H Spectrum eff. Class 4H\n            - 4 Sec5A Spectrum eff. Class 5A\n            - 5 Sec5B Spectrum eff. Class 5B\n            - 6 Sec6A Spectrum eff. Class 6A\n            - 7 Sec6B Spectrum eff. Class 6B\n            ')
xfTermIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 14, 1, 16), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfTermIpAddress.setStatus('current')
if mibBuilder.loadTexts: xfTermIpAddress.setDescription('LAN ip address')
xfTermProtectionCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 14, 1, 17), Bits().clone(namedValues=NamedValues(("unprotected", 0), ("protectedHotStandby", 1), ("protectedWorkingStandby", 2), ("unprotectedSD", 3), ("nplus1", 4), ("enhancedRLB", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfTermProtectionCapability.setStatus('current')
if mibBuilder.loadTexts: xfTermProtectionCapability.setDescription('Terminal protection capability\n            - 0 Unprotected ............... The terminal supports 1+0\n            - 1 protectedHotStandby ....... The terminal supports 1+1 Hot Standby\n            - 2 protectedWorkingStandby ... The terminal supports 1+1 Working Standby\n            - 3 unprotectedSD ............. The terminal supports 1+0 with Space diversity\n            - 4 nplus1 .................... The terminal supports N+1 protection (through RPS board)\n            - 5 enhancedRLB ............... The terminal supports Enhanced Radio Link Bonding\n            ')
xfTermLineProtectionCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 14, 1, 18), Bits().clone(namedValues=NamedValues(("unprotected", 0), ("singleInterfaceLowSlot", 1), ("singleInterfaceHighSlot", 2), ("opticalSplitter", 3), ("equipmentAndLineProtection", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfTermLineProtectionCapability.setStatus('current')
if mibBuilder.loadTexts: xfTermLineProtectionCapability.setDescription('Terminal Line protection capability\n            - 0 unprotected .................\n            - 1 singleInterfaceLowSlot ......\n            - 2 singleInterfaceHighSlot .....\n            - 3 opticalSplitter .............\n            - 4 equipmentAndLineProtection ..\n            ')
xfTermTribAllocationActual = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 14, 1, 19), Bits().clone(namedValues=NamedValues(("firstE1", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfTermTribAllocationActual.setStatus('current')
if mibBuilder.loadTexts: xfTermTribAllocationActual.setDescription('Actual tributary allocation in a MMU2 D or MMU2 H, the rest is packet link')
xfTermTribAllocationDesired = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 14, 1, 20), Bits().clone(namedValues=NamedValues(("firstE1", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfTermTribAllocationDesired.setStatus('current')
if mibBuilder.loadTexts: xfTermTribAllocationDesired.setDescription('Desired tibutary allocation in a MMU2 D or MMU2 H, the rest is packet link')
xfTermAutoRemoveLoopEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 14, 1, 21), TermAutoRemoveLoopEnable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfTermAutoRemoveLoopEnable.setStatus('current')
if mibBuilder.loadTexts: xfTermAutoRemoveLoopEnable.setDescription('Auto Remove Loops\n            - other(1)\n            - enable(2) (default)\n            - disable(3)\n            ')
xfTermCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 14, 1, 22), Bits().clone(namedValues=NamedValues(("adaptiveManualTx", 0), ("adaptiveManualRx", 1), ("fragmentedTributaries", 2), ("terminalCapacityLicense", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfTermCapability.setStatus('current')
if mibBuilder.loadTexts: xfTermCapability.setDescription('Terminal capability')
xfTermCapacityLicense = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 14, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("vr0", 0), ("vr10", 1), ("vr25", 2), ("vr50", 3), ("vr100", 4), ("vr15", 5), ("vr30", 6), ("vr60", 7), ("vr125", 8), ("vr200", 9), ("vr350", 10), ("vr4", 11), ("vr500", 12), ("vr150", 13), ("vr250", 14), ("vr300", 15), ("vr400", 16), ("vr450", 17)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfTermCapacityLicense.setStatus('current')
if mibBuilder.loadTexts: xfTermCapacityLicense.setDescription('Licensetable')
xfTermFadingRates = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 14, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("fr50", 2), ("fr100", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfTermFadingRates.setStatus('current')
if mibBuilder.loadTexts: xfTermFadingRates.setDescription('Fading rates\n            - other(1): unknown\n            - fr50(2): 50dB/s HighTroughputMode (default)\n            - fr150(3): 100dB/s HighFadingResistanceMode\n            ')
xfTermFadingRatesCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 14, 1, 25), Bits().clone(namedValues=NamedValues(("fr50", 0), ("fr100", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfTermFadingRatesCapability.setStatus('current')
if mibBuilder.loadTexts: xfTermFadingRatesCapability.setDescription('Fading rate capability\n            - fr50(0): HighTroughputMode\n            - fr100(1): HighFadingResistanceMode')
xfTermConfiguredBitPipeCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 14, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfTermConfiguredBitPipeCapacity.setStatus('current')
if mibBuilder.loadTexts: xfTermConfiguredBitPipeCapacity.setDescription('Configured bit pipe capacity, Kbps')
xfTermTribCapacityConfigured = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 14, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfTermTribCapacityConfigured.setStatus('current')
if mibBuilder.loadTexts: xfTermTribCapacityConfigured.setDescription('Configured tributary capacity')
xfTermPacketMaxCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 14, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfTermPacketMaxCapacity.setStatus('current')
if mibBuilder.loadTexts: xfTermPacketMaxCapacity.setDescription('Packet Max Capacity')
xfTermPacketMinCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 14, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfTermPacketMinCapacity.setStatus('current')
if mibBuilder.loadTexts: xfTermPacketMinCapacity.setDescription('Packet Min Capacity')
xfRlPtpTerminalCapabilityTable = MibTable((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 15), )
if mibBuilder.loadTexts: xfRlPtpTerminalCapabilityTable.setStatus('current')
if mibBuilder.loadTexts: xfRlPtpTerminalCapabilityTable.setDescription('Table for misc. capability informatio.')
xfRlPtpTerminalCapabilityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 15, 1), ).setIndexNames((0, "ENTITY-MIB", "entLogicalIndex"), (0, "XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermRowIndex"))
if mibBuilder.loadTexts: xfRlPtpTerminalCapabilityEntry.setStatus('current')
if mibBuilder.loadTexts: xfRlPtpTerminalCapabilityEntry.setDescription('Entry in the table')
xfTermChannelSpacing = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 15, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("chspUnknown", 0), ("chsp7MHz", 1), ("chsp14MHz", 2), ("chsp20MHz", 3), ("chsp28MHz", 4), ("chsp30MHz", 5), ("chsp40MHz", 6), ("chsp50MHz", 7), ("chsp56MHz", 8), ("chsp10MHz", 9), ("chsp3500kHz", 10), ("chsp60MHz", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfTermChannelSpacing.setStatus('current')
if mibBuilder.loadTexts: xfTermChannelSpacing.setDescription('Channel spacing\n            - ETSI: 3.5, 7, 14, 28, 40, 56 MHz\n            - ANSI: 10, 20, 30, 40, 50, 60 MHz\n            ')
xfTermChannelModulation = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 15, 1, 2), TermModulation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfTermChannelModulation.setStatus('current')
if mibBuilder.loadTexts: xfTermChannelModulation.setDescription('Channel modulation\n            - cqpsk(2)    CQPSK\n            - qam16(3)    16-QAM\n            - qam128(4)   128-QAM\n            - qam32(5)    32-QAM\n            - qam64(6)    64-QAM\n            - qam4(7)     4-QAM\n            - qam8(8)     8-QAM\n            - qam256(9)   256-QAM\n            - qam512(10)  512-QAM\n            - qam1024(11) 1024-QAM\n            ')
xfTermMaxTribCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 15, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfTermMaxTribCapacity.setStatus('current')
if mibBuilder.loadTexts: xfTermMaxTribCapacity.setDescription('Max number of tributaries')
xfTermDCNCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 15, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfTermDCNCapacity.setStatus('current')
if mibBuilder.loadTexts: xfTermDCNCapacity.setDescription('DCN hop capacity')
xfTermValidRow = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 15, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("vr0", 0), ("vr10", 1), ("vr25", 2), ("vr50", 3), ("vr100", 4), ("vr15", 5), ("vr30", 6), ("vr60", 7), ("vr125", 8), ("vr200", 9), ("vr350", 10), ("vr4", 11), ("vr500", 12), ("vr150", 13), ("vr250", 14), ("vr300", 15), ("vr400", 16), ("vr450", 17)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfTermValidRow.setStatus('current')
if mibBuilder.loadTexts: xfTermValidRow.setDescription('Max capacity license\n            - vr0(0)    = invalid row\n            - vr10(1)   = 10 Mbps, no license\n            - vr25(2)   = 25 Mbps\n            - vr50(3)   = 50 Mbps\n            - vr100(4)  = 100 Mbps\n            - vr15(5)   = 15 Mbps\n            - vr30(6)   = 30 Mbps\n            - vr60(7)   = 60 Mbps\n            - vr125(8)  = 125 Mbps\n            - vr200(9)  = 200 Mbps\n            - vr350(10) = 350 Mbps\n            - vr4(11)   = 4 Mbps, no license\n            - vr500(12) = 500 Mbps\n            - vr150(13) = 150 Mbps\n            - vr250(14) = 250 Mbps\n            - vr300(15) = 300 Mbps\n            - vr400(16) = 400 Mbps\n            - vr450(17) = 450 Mbps\n            ')
xfTermMaxCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 15, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfTermMaxCapacity.setStatus('current')
if mibBuilder.loadTexts: xfTermMaxCapacity.setDescription('Max capacity')
xfTermSpectrumEfficiencyClassObsolete = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 15, 1, 7), TermRauSec()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfTermSpectrumEfficiencyClassObsolete.setStatus('obsolete')
if mibBuilder.loadTexts: xfTermSpectrumEfficiencyClassObsolete.setDescription('xfTermSpectrumEfficiencyClassObsolete')
xfTermFrameFormatType = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 15, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("fftOther", 0), ("fftStatic", 1), ("fftAdmod", 2), ("fftXpic", 3), ("fftXpicAdmod", 4), ("fftLegacy", 5), ("fftStaticLH", 6), ("fftAdmodLH", 7), ("fftXpicLH", 8), ("fftXpicAdmodLH", 9), ("fftAdmodStatic", 10), ("fftXpicAdmodStatic", 11), ("fftAdmodStaticLH", 12), ("fftXpicAdmodStaticLH", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfTermFrameFormatType.setStatus('current')
if mibBuilder.loadTexts: xfTermFrameFormatType.setDescription('Frame format type\n            - fftOther(0)\n            - fftStatic(1)\n            - fftAdmod(2)\n            - fftXpic(3)\n            - fftXpicAdmod(4)\n            - fftLegacy(5)\n            - fftStaticLH(6)\n            - fftAdmodLH(7)\n            - fftXpicLH(8)\n            - fftXpicAdmodLH(9)\n            - fftAdmodStatic(10)\n            - fftXpicAdmodStatic(11)\n            - fftAdmodStaticLH(12)\n            - fftXpicAdmodStaticLH(13)\n            ')
xfTermFrameFormatRev = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 15, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("ffOther", 1), ("ffVersion0", 2), ("ffVersion1", 3), ("ffVersion2", 4), ("ffVersion3", 5), ("ffVersion4", 6), ("ffVersion5", 7), ("ffVersion6", 8), ("ffVersion7", 9), ("ffVersion8", 10), ("ffVersion9", 11), ("ffVersion10", 12), ("ffVersion11", 13), ("ffVersion12", 14), ("ffVersion13", 15), ("ffVersion14", 16), ("ffVersion15", 17)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfTermFrameFormatRev.setStatus('current')
if mibBuilder.loadTexts: xfTermFrameFormatRev.setDescription('Frame format revision')
xfTermBerAlarmThresholdCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 15, 1, 10), Bits().clone(namedValues=NamedValues(("berThrCap1e3", 0), ("berThrCap1e4", 1), ("berThrCap1e5", 2), ("berThrCap1e6", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfTermBerAlarmThresholdCapability.setStatus('current')
if mibBuilder.loadTexts: xfTermBerAlarmThresholdCapability.setDescription('List of the allowed BER thresholds')
xfRLPMAMConfigTable = MibTable((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 16), )
if mibBuilder.loadTexts: xfRLPMAMConfigTable.setStatus('current')
if mibBuilder.loadTexts: xfRLPMAMConfigTable.setDescription('Alarm threshold values for RL PM')
xfRLPMAMConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 16, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: xfRLPMAMConfigEntry.setStatus('current')
if mibBuilder.loadTexts: xfRLPMAMConfigEntry.setDescription('Entry in the xfRLPMAMConfigTable')
xfPMAMSetThreshold15m = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 16, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfPMAMSetThreshold15m.setStatus('current')
if mibBuilder.loadTexts: xfPMAMSetThreshold15m.setDescription('The 15 minute set threshold for AdMod.\n                Near end access: read-write\n                Far end access: No access\n                ')
xfPMAMSetThreshold24h = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 16, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfPMAMSetThreshold24h.setStatus('current')
if mibBuilder.loadTexts: xfPMAMSetThreshold24h.setDescription('The 24 hour set threshold for AdMod.\n                Near end access: read-write\n                Far end access: No access\n                ')
xfPMAMResetThreshold15m = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 16, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfPMAMResetThreshold15m.setStatus('current')
if mibBuilder.loadTexts: xfPMAMResetThreshold15m.setDescription('The 15 minute reset threshold for AdMod.\n                Near end access: read-write\n                Far end access: No access\n                ')
xfPMAMStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 16, 1, 4), Bits().clone(namedValues=NamedValues(("am15m1", 0), ("am15m2", 1), ("am15m3", 2), ("am24h1", 3), ("am24h2", 4), ("am24h3", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMStatus.setStatus('current')
if mibBuilder.loadTexts: xfPMAMStatus.setDescription('Threshold alarm status')
xfPMAMValidData = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 16, 1, 5), Bits().clone(namedValues=NamedValues(("valid15m4QAM", 0), ("valid15m8QAM", 1), ("valid15m16QAM", 2), ("valid15m32QAM", 3), ("valid15m64QAM", 4), ("valid15m128QAM", 5), ("valid15m256QAM", 6), ("valid15m512QAM", 7), ("valid15m1024QAM", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMValidData.setStatus('current')
if mibBuilder.loadTexts: xfPMAMValidData.setDescription("It reports which modulation's PM data that are valid.")
xfRLPMAMCurrent24hTable = MibTable((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 17), )
if mibBuilder.loadTexts: xfRLPMAMCurrent24hTable.setStatus('current')
if mibBuilder.loadTexts: xfRLPMAMCurrent24hTable.setDescription('TBD')
xfRLPMAMCurrent24hEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 17, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: xfRLPMAMCurrent24hEntry.setStatus('current')
if mibBuilder.loadTexts: xfRLPMAMCurrent24hEntry.setDescription('Entry in the xfRLPMAMCurrent24hTable.')
xfPMAMCurrent24h4QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 17, 1, 1), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMCurrent24h4QAM.setStatus('current')
if mibBuilder.loadTexts: xfPMAMCurrent24h4QAM.setDescription('Valid time since reset')
xfPMAMCurrent24h8QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 17, 1, 2), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMCurrent24h8QAM.setStatus('current')
if mibBuilder.loadTexts: xfPMAMCurrent24h8QAM.setDescription('Valid time since reset')
xfPMAMCurrent24h16QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 17, 1, 3), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMCurrent24h16QAM.setStatus('current')
if mibBuilder.loadTexts: xfPMAMCurrent24h16QAM.setDescription('Valid time since reset')
xfPMAMCurrent24h32QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 17, 1, 4), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMCurrent24h32QAM.setStatus('current')
if mibBuilder.loadTexts: xfPMAMCurrent24h32QAM.setDescription('Valid time since reset')
xfPMAMCurrent24h64QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 17, 1, 5), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMCurrent24h64QAM.setStatus('current')
if mibBuilder.loadTexts: xfPMAMCurrent24h64QAM.setDescription('Valid time since reset')
xfPMAMCurrent24h128QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 17, 1, 6), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMCurrent24h128QAM.setStatus('current')
if mibBuilder.loadTexts: xfPMAMCurrent24h128QAM.setDescription('Valid time since reset')
xfPMAMCurrent24h256QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 17, 1, 7), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMCurrent24h256QAM.setStatus('current')
if mibBuilder.loadTexts: xfPMAMCurrent24h256QAM.setDescription('Valid time since reset')
xfPMAMCurrent24h512QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 17, 1, 8), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMCurrent24h512QAM.setStatus('current')
if mibBuilder.loadTexts: xfPMAMCurrent24h512QAM.setDescription('Valid time since reset')
xfPMAMCurrent24h1024QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 17, 1, 9), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMCurrent24h1024QAM.setStatus('current')
if mibBuilder.loadTexts: xfPMAMCurrent24h1024QAM.setDescription('Valid time since reset')
xfPMAMCurrent24h4QAMEnRLB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 17, 1, 10), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMCurrent24h4QAMEnRLB.setStatus('current')
if mibBuilder.loadTexts: xfPMAMCurrent24h4QAMEnRLB.setDescription('Valid time since reset')
xfPMAMCurrent24h8QAMEnRLB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 17, 1, 11), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMCurrent24h8QAMEnRLB.setStatus('current')
if mibBuilder.loadTexts: xfPMAMCurrent24h8QAMEnRLB.setDescription('Valid time since reset')
xfPMAMCurrent24h16QAMEnRLB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 17, 1, 12), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMCurrent24h16QAMEnRLB.setStatus('current')
if mibBuilder.loadTexts: xfPMAMCurrent24h16QAMEnRLB.setDescription('Valid time since reset')
xfPMAMCurrent24h32QAMEnRLB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 17, 1, 13), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMCurrent24h32QAMEnRLB.setStatus('current')
if mibBuilder.loadTexts: xfPMAMCurrent24h32QAMEnRLB.setDescription('Valid time since reset')
xfPMAMCurrent24h64QAMEnRLB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 17, 1, 14), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMCurrent24h64QAMEnRLB.setStatus('current')
if mibBuilder.loadTexts: xfPMAMCurrent24h64QAMEnRLB.setDescription('Valid time since reset')
xfPMAMCurrent24h128QAMEnRLB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 17, 1, 15), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMCurrent24h128QAMEnRLB.setStatus('current')
if mibBuilder.loadTexts: xfPMAMCurrent24h128QAMEnRLB.setDescription('Valid time since reset')
xfPMAMCurrent24h256QAMEnRLB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 17, 1, 16), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMCurrent24h256QAMEnRLB.setStatus('current')
if mibBuilder.loadTexts: xfPMAMCurrent24h256QAMEnRLB.setDescription('Valid time since reset')
xfPMAMCurrent24h512QAMEnRLB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 17, 1, 17), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMCurrent24h512QAMEnRLB.setStatus('current')
if mibBuilder.loadTexts: xfPMAMCurrent24h512QAMEnRLB.setDescription('Valid time since reset')
xfPMAMCurrent24h1024QAMEnRLB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 17, 1, 18), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMCurrent24h1024QAMEnRLB.setStatus('current')
if mibBuilder.loadTexts: xfPMAMCurrent24h1024QAMEnRLB.setDescription('Valid time since reset')
xfRLPMAMInterval24hTable = MibTable((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 18), )
if mibBuilder.loadTexts: xfRLPMAMInterval24hTable.setStatus('current')
if mibBuilder.loadTexts: xfRLPMAMInterval24hTable.setDescription('TBD')
xfRLPMAMInterval24hEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 18, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: xfRLPMAMInterval24hEntry.setStatus('current')
if mibBuilder.loadTexts: xfRLPMAMInterval24hEntry.setDescription('Entry in the xfRLPMAMInterval24hTable.')
xfPMAMInterval24h4QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 18, 1, 1), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMInterval24h4QAM.setStatus('current')
if mibBuilder.loadTexts: xfPMAMInterval24h4QAM.setDescription('Interval count.')
xfPMAMInterval24h8QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 18, 1, 2), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMInterval24h8QAM.setStatus('current')
if mibBuilder.loadTexts: xfPMAMInterval24h8QAM.setDescription('Interval count.')
xfPMAMInterval24h16QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 18, 1, 3), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMInterval24h16QAM.setStatus('current')
if mibBuilder.loadTexts: xfPMAMInterval24h16QAM.setDescription('Interval count.')
xfPMAMInterval24h32QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 18, 1, 4), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMInterval24h32QAM.setStatus('current')
if mibBuilder.loadTexts: xfPMAMInterval24h32QAM.setDescription('Interval count.')
xfPMAMInterval24h64QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 18, 1, 5), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMInterval24h64QAM.setStatus('current')
if mibBuilder.loadTexts: xfPMAMInterval24h64QAM.setDescription('Interval count.')
xfPMAMInterval24h128QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 18, 1, 6), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMInterval24h128QAM.setStatus('current')
if mibBuilder.loadTexts: xfPMAMInterval24h128QAM.setDescription('Interval count.')
xfPMAMInterval24h256QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 18, 1, 7), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMInterval24h256QAM.setStatus('current')
if mibBuilder.loadTexts: xfPMAMInterval24h256QAM.setDescription('Interval count.')
xfPMAMInterval24h512QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 18, 1, 8), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMInterval24h512QAM.setStatus('current')
if mibBuilder.loadTexts: xfPMAMInterval24h512QAM.setDescription('Interval count.')
xfPMAMInterval24hValidData = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 18, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMInterval24hValidData.setStatus('current')
if mibBuilder.loadTexts: xfPMAMInterval24hValidData.setDescription('This variable indicates whether the data\n                for this interval is valid.')
xfPMAMInterval24h1024QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 18, 1, 10), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMInterval24h1024QAM.setStatus('current')
if mibBuilder.loadTexts: xfPMAMInterval24h1024QAM.setDescription('Interval count.')
xfPMAMInterval24h4QAMEnRLB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 18, 1, 11), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMInterval24h4QAMEnRLB.setStatus('current')
if mibBuilder.loadTexts: xfPMAMInterval24h4QAMEnRLB.setDescription('Interval count.')
xfPMAMInterval24h8QAMEnRLB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 18, 1, 12), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMInterval24h8QAMEnRLB.setStatus('current')
if mibBuilder.loadTexts: xfPMAMInterval24h8QAMEnRLB.setDescription('Interval count.')
xfPMAMInterval24h16QAMEnRLB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 18, 1, 13), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMInterval24h16QAMEnRLB.setStatus('current')
if mibBuilder.loadTexts: xfPMAMInterval24h16QAMEnRLB.setDescription('Interval count.')
xfPMAMInterval24h32QAMEnRLB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 18, 1, 14), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMInterval24h32QAMEnRLB.setStatus('current')
if mibBuilder.loadTexts: xfPMAMInterval24h32QAMEnRLB.setDescription('Interval count.')
xfPMAMInterval24h64QAMEnRLB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 18, 1, 15), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMInterval24h64QAMEnRLB.setStatus('current')
if mibBuilder.loadTexts: xfPMAMInterval24h64QAMEnRLB.setDescription('Interval count.')
xfPMAMInterval24h128QAMEnRLB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 18, 1, 16), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMInterval24h128QAMEnRLB.setStatus('current')
if mibBuilder.loadTexts: xfPMAMInterval24h128QAMEnRLB.setDescription('Interval count.')
xfPMAMInterval24h256QAMEnRLB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 18, 1, 17), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMInterval24h256QAMEnRLB.setStatus('current')
if mibBuilder.loadTexts: xfPMAMInterval24h256QAMEnRLB.setDescription('Interval count.')
xfPMAMInterval24h512QAMEnRLB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 18, 1, 18), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMInterval24h512QAMEnRLB.setStatus('current')
if mibBuilder.loadTexts: xfPMAMInterval24h512QAMEnRLB.setDescription('Interval count.')
xfPMAMInterval24h1024QAMEnRLB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 18, 1, 19), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMInterval24h1024QAMEnRLB.setStatus('current')
if mibBuilder.loadTexts: xfPMAMInterval24h1024QAMEnRLB.setDescription('Interval count.')
xfRLPMAMCurrent15mTable = MibTable((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 19), )
if mibBuilder.loadTexts: xfRLPMAMCurrent15mTable.setStatus('current')
if mibBuilder.loadTexts: xfRLPMAMCurrent15mTable.setDescription('TBD')
xfRLPMAMCurrent15mEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 19, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: xfRLPMAMCurrent15mEntry.setStatus('current')
if mibBuilder.loadTexts: xfRLPMAMCurrent15mEntry.setDescription('Entry in the table.')
xfPMAMCurrent15m4QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 19, 1, 1), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMCurrent15m4QAM.setStatus('current')
if mibBuilder.loadTexts: xfPMAMCurrent15m4QAM.setDescription('Valid interval time since reset.\n                ')
xfPMAMCurrent15m8QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 19, 1, 2), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMCurrent15m8QAM.setStatus('current')
if mibBuilder.loadTexts: xfPMAMCurrent15m8QAM.setDescription('Valid interval time since reset.\n                ')
xfPMAMCurrent15m16QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 19, 1, 3), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMCurrent15m16QAM.setStatus('current')
if mibBuilder.loadTexts: xfPMAMCurrent15m16QAM.setDescription('Valid interval time since reset.\n                ')
xfPMAMCurrent15m32QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 19, 1, 4), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMCurrent15m32QAM.setStatus('current')
if mibBuilder.loadTexts: xfPMAMCurrent15m32QAM.setDescription('Valid interval time since reset.\n                ')
xfPMAMCurrent15m64QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 19, 1, 5), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMCurrent15m64QAM.setStatus('current')
if mibBuilder.loadTexts: xfPMAMCurrent15m64QAM.setDescription('Valid interval time since reset.\n                ')
xfPMAMCurrent15m128QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 19, 1, 6), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMCurrent15m128QAM.setStatus('current')
if mibBuilder.loadTexts: xfPMAMCurrent15m128QAM.setDescription('Valid interval time since reset.\n                ')
xfPMAMCurrent15m256QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 19, 1, 7), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMCurrent15m256QAM.setStatus('current')
if mibBuilder.loadTexts: xfPMAMCurrent15m256QAM.setDescription('Valid interval time since reset.\n                ')
xfPMAMCurrent15m512QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 19, 1, 8), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMCurrent15m512QAM.setStatus('current')
if mibBuilder.loadTexts: xfPMAMCurrent15m512QAM.setDescription('Valid interval time since reset.\n                ')
xfPMAMCurrent15m1024QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 19, 1, 9), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMCurrent15m1024QAM.setStatus('current')
if mibBuilder.loadTexts: xfPMAMCurrent15m1024QAM.setDescription('Valid interval time since reset.\n                ')
xfPMAMCurrent15m4QAMEnRLB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 19, 1, 10), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMCurrent15m4QAMEnRLB.setStatus('current')
if mibBuilder.loadTexts: xfPMAMCurrent15m4QAMEnRLB.setDescription('Valid interval time since reset.\n                ')
xfPMAMCurrent15m8QAMEnRLB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 19, 1, 11), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMCurrent15m8QAMEnRLB.setStatus('current')
if mibBuilder.loadTexts: xfPMAMCurrent15m8QAMEnRLB.setDescription('Valid interval time since reset.\n                ')
xfPMAMCurrent15m16QAMEnRLB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 19, 1, 12), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMCurrent15m16QAMEnRLB.setStatus('current')
if mibBuilder.loadTexts: xfPMAMCurrent15m16QAMEnRLB.setDescription('Valid interval time since reset.\n                ')
xfPMAMCurrent15m32QAMEnRLB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 19, 1, 13), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMCurrent15m32QAMEnRLB.setStatus('current')
if mibBuilder.loadTexts: xfPMAMCurrent15m32QAMEnRLB.setDescription('Valid interval time since reset.\n                ')
xfPMAMCurrent15m64QAMEnRLB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 19, 1, 14), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMCurrent15m64QAMEnRLB.setStatus('current')
if mibBuilder.loadTexts: xfPMAMCurrent15m64QAMEnRLB.setDescription('Valid interval time since reset.\n                ')
xfPMAMCurrent15m128QAMEnRLB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 19, 1, 15), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMCurrent15m128QAMEnRLB.setStatus('current')
if mibBuilder.loadTexts: xfPMAMCurrent15m128QAMEnRLB.setDescription('Valid interval time since reset.\n                ')
xfPMAMCurrent15m256QAMEnRLB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 19, 1, 16), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMCurrent15m256QAMEnRLB.setStatus('current')
if mibBuilder.loadTexts: xfPMAMCurrent15m256QAMEnRLB.setDescription('Valid interval time since reset.\n                ')
xfPMAMCurrent15m512QAMEnRLB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 19, 1, 17), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMCurrent15m512QAMEnRLB.setStatus('current')
if mibBuilder.loadTexts: xfPMAMCurrent15m512QAMEnRLB.setDescription('Valid interval time since reset.\n                ')
xfPMAMCurrent15m1024QAMEnRLB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 19, 1, 18), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMCurrent15m1024QAMEnRLB.setStatus('current')
if mibBuilder.loadTexts: xfPMAMCurrent15m1024QAMEnRLB.setDescription('Valid interval time since reset.\n                ')
xfRLPMAMInterval15mTable = MibTable((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 20), )
if mibBuilder.loadTexts: xfRLPMAMInterval15mTable.setStatus('current')
if mibBuilder.loadTexts: xfRLPMAMInterval15mTable.setDescription('TBD')
xfRLPMAMInterval15mEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 20, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMInterval15mIntervalNumber"))
if mibBuilder.loadTexts: xfRLPMAMInterval15mEntry.setStatus('current')
if mibBuilder.loadTexts: xfRLPMAMInterval15mEntry.setDescription('Entry in the table.')
xfPMAMInterval15mIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 20, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMInterval15mIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: xfPMAMInterval15mIntervalNumber.setDescription('A number between 1 and 96, which identifies the interval for which\n                the set of statistics is available. The interval identified by 1\n                is the most recently completed 15 minute interval, and the interval\n                identified by N is the interval immediately preceding the one\n                identified by N-1.')
xfPMAMInterval15m4QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 20, 1, 2), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMInterval15m4QAM.setStatus('current')
if mibBuilder.loadTexts: xfPMAMInterval15m4QAM.setDescription('Interval count.')
xfPMAMInterval15m8QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 20, 1, 3), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMInterval15m8QAM.setStatus('current')
if mibBuilder.loadTexts: xfPMAMInterval15m8QAM.setDescription('Interval count.')
xfPMAMInterval15m16QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 20, 1, 4), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMInterval15m16QAM.setStatus('current')
if mibBuilder.loadTexts: xfPMAMInterval15m16QAM.setDescription('Interval count.')
xfPMAMInterval15m32QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 20, 1, 5), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMInterval15m32QAM.setStatus('current')
if mibBuilder.loadTexts: xfPMAMInterval15m32QAM.setDescription('Interval count.')
xfPMAMInterval15m64QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 20, 1, 6), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMInterval15m64QAM.setStatus('current')
if mibBuilder.loadTexts: xfPMAMInterval15m64QAM.setDescription('Interval count.')
xfPMAMInterval15m128QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 20, 1, 7), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMInterval15m128QAM.setStatus('current')
if mibBuilder.loadTexts: xfPMAMInterval15m128QAM.setDescription('Interval count.')
xfPMAMInterval15m256QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 20, 1, 8), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMInterval15m256QAM.setStatus('current')
if mibBuilder.loadTexts: xfPMAMInterval15m256QAM.setDescription('Interval count.')
xfPMAMInterval15m512QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 20, 1, 9), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMInterval15m512QAM.setStatus('current')
if mibBuilder.loadTexts: xfPMAMInterval15m512QAM.setDescription('Interval count.')
xfPMAMInterval15mValidData = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 20, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMInterval15mValidData.setStatus('current')
if mibBuilder.loadTexts: xfPMAMInterval15mValidData.setDescription('This variable indicates whether the data\n                for this interval is valid.')
xfPMAMInterval15m1024QAM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 20, 1, 11), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMInterval15m1024QAM.setStatus('current')
if mibBuilder.loadTexts: xfPMAMInterval15m1024QAM.setDescription('Interval count.')
xfPMAMInterval15m4QAMEnRLB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 20, 1, 12), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMInterval15m4QAMEnRLB.setStatus('current')
if mibBuilder.loadTexts: xfPMAMInterval15m4QAMEnRLB.setDescription('Interval count.')
xfPMAMInterval15m8QAMEnRLB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 20, 1, 13), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMInterval15m8QAMEnRLB.setStatus('current')
if mibBuilder.loadTexts: xfPMAMInterval15m8QAMEnRLB.setDescription('Interval count.')
xfPMAMInterval15m16QAMEnRLB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 20, 1, 14), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMInterval15m16QAMEnRLB.setStatus('current')
if mibBuilder.loadTexts: xfPMAMInterval15m16QAMEnRLB.setDescription('Interval count.')
xfPMAMInterval15m32QAMEnRLB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 20, 1, 15), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMInterval15m32QAMEnRLB.setStatus('current')
if mibBuilder.loadTexts: xfPMAMInterval15m32QAMEnRLB.setDescription('Interval count.')
xfPMAMInterval15m64QAMEnRLB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 20, 1, 16), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMInterval15m64QAMEnRLB.setStatus('current')
if mibBuilder.loadTexts: xfPMAMInterval15m64QAMEnRLB.setDescription('Interval count.')
xfPMAMInterval15m128QAMEnRLB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 20, 1, 17), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMInterval15m128QAMEnRLB.setStatus('current')
if mibBuilder.loadTexts: xfPMAMInterval15m128QAMEnRLB.setDescription('Interval count.')
xfPMAMInterval15m256QAMEnRLB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 20, 1, 18), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMInterval15m256QAMEnRLB.setStatus('current')
if mibBuilder.loadTexts: xfPMAMInterval15m256QAMEnRLB.setDescription('Interval count.')
xfPMAMInterval15m512QAMEnRLB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 20, 1, 19), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMInterval15m512QAMEnRLB.setStatus('current')
if mibBuilder.loadTexts: xfPMAMInterval15m512QAMEnRLB.setDescription('Interval count.')
xfPMAMInterval15m1024QAMEnRLB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 20, 1, 20), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMAMInterval15m1024QAMEnRLB.setStatus('current')
if mibBuilder.loadTexts: xfPMAMInterval15m1024QAMEnRLB.setDescription('Interval count.')
xfRLPtpTerminalCapacityLicenseTable = MibTable((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 21), )
if mibBuilder.loadTexts: xfRLPtpTerminalCapacityLicenseTable.setStatus('current')
if mibBuilder.loadTexts: xfRLPtpTerminalCapacityLicenseTable.setDescription('TBD')
xfRLPtpTerminalCapacityLicenseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 21, 1), ).setIndexNames((0, "ENTITY-MIB", "entLogicalIndex"), (0, "XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermRowIndex"))
if mibBuilder.loadTexts: xfRLPtpTerminalCapacityLicenseEntry.setStatus('current')
if mibBuilder.loadTexts: xfRLPtpTerminalCapacityLicenseEntry.setDescription('Entry in the table.')
xfTermCapacityLicenseRange = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 21, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("vr0", 0), ("vr10", 1), ("vr25", 2), ("vr50", 3), ("vr100", 4), ("vr15", 5), ("vr30", 6), ("vr60", 7), ("vr125", 8), ("vr200", 9), ("vr350", 10), ("vr4", 11), ("vr500", 12), ("vr150", 13), ("vr250", 14), ("vr300", 15), ("vr400", 16), ("vr450", 17)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfTermCapacityLicenseRange.setStatus('current')
if mibBuilder.loadTexts: xfTermCapacityLicenseRange.setDescription('xfTermCapacityLicenseRange')
xfTermMaxCapacityRange = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 21, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfTermMaxCapacityRange.setStatus('current')
if mibBuilder.loadTexts: xfTermMaxCapacityRange.setDescription('TermMaxCapacityRange')
xfTermMaxTribCapacityRange = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 21, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfTermMaxTribCapacityRange.setStatus('current')
if mibBuilder.loadTexts: xfTermMaxTribCapacityRange.setDescription('xfTermMaxTribCapacityRange')
xfRLPMSDCGainCurrent15mTable = MibTable((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 22), )
if mibBuilder.loadTexts: xfRLPMSDCGainCurrent15mTable.setStatus('current')
if mibBuilder.loadTexts: xfRLPMSDCGainCurrent15mTable.setDescription('\n      This table monitors the time spent in each SDC gain value in the current 15 minute period.\n      ')
xfRLPMSDCGainCurrent15mEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 22, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: xfRLPMSDCGainCurrent15mEntry.setStatus('current')
if mibBuilder.loadTexts: xfRLPMSDCGainCurrent15mEntry.setDescription('\n      Entry in xfRLPMSDCGainCurrent15mTable.\n      ')
xfPMSDCGainCurrent15m0005dB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 22, 1, 1), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMSDCGainCurrent15m0005dB.setStatus('current')
if mibBuilder.loadTexts: xfPMSDCGainCurrent15m0005dB.setDescription('\n      The number of seconds the SDC gain has been in the range: (0.0 <= SdcGain < 0.5) dB.\n      ')
xfPMSDCGainCurrent15m0510dB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 22, 1, 2), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMSDCGainCurrent15m0510dB.setStatus('current')
if mibBuilder.loadTexts: xfPMSDCGainCurrent15m0510dB.setDescription('\n      The number of seconds the SDC gain has been in the range: (0.5 <= SdcGain < 1.0) dB.\n      ')
xfPMSDCGainCurrent15m1015dB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 22, 1, 3), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMSDCGainCurrent15m1015dB.setStatus('current')
if mibBuilder.loadTexts: xfPMSDCGainCurrent15m1015dB.setDescription('\n      The number of seconds the SDC gain has been in the range: (1.0 <= SdcGain < 1.5) dB.\n      ')
xfPMSDCGainCurrent15m1520dB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 22, 1, 4), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMSDCGainCurrent15m1520dB.setStatus('current')
if mibBuilder.loadTexts: xfPMSDCGainCurrent15m1520dB.setDescription('\n      The number of seconds the SDC gain has been in the range: (1.5 <= SdcGain < 2.0) dB.\n      ')
xfPMSDCGainCurrent15m2025dB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 22, 1, 5), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMSDCGainCurrent15m2025dB.setStatus('current')
if mibBuilder.loadTexts: xfPMSDCGainCurrent15m2025dB.setDescription('\n      The number of seconds the SDC gain has been in the range: (2.0 <= SdcGain < 2.5) dB.\n      ')
xfPMSDCGainCurrent15m2530dB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 22, 1, 6), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMSDCGainCurrent15m2530dB.setStatus('current')
if mibBuilder.loadTexts: xfPMSDCGainCurrent15m2530dB.setDescription('\n      The number of seconds the SDC gain has been in the range: (2.5 <= SdcGain < 3.0) dB.\n      ')
xfRLPMSDCGainInterval15mTable = MibTable((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 23), )
if mibBuilder.loadTexts: xfRLPMSDCGainInterval15mTable.setStatus('current')
if mibBuilder.loadTexts: xfRLPMSDCGainInterval15mTable.setDescription('\n      This table collects the time spent in each SDC gain value for the 15 minute intervals.\n      ')
xfRLPMSDCGainInterval15mEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 23, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMSDCGainInterval15mIntervalNumber"))
if mibBuilder.loadTexts: xfRLPMSDCGainInterval15mEntry.setStatus('current')
if mibBuilder.loadTexts: xfRLPMSDCGainInterval15mEntry.setDescription('\n      Entry in xfRLPMSDCGainInterval15mTable.\n      ')
xfPMSDCGainInterval15mIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 23, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMSDCGainInterval15mIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: xfPMSDCGainInterval15mIntervalNumber.setDescription('\n      A number between 1 and 96, which identifies the interval for which the set of statistics is available.\n      The interval identified by 1 is the most recently completed 15 minute interval, and the interval\n      identified by N is the interval immediately preceding the one identified by N-1.\n      ')
xfPMSDCGainInterval15m0005dB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 23, 1, 2), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMSDCGainInterval15m0005dB.setStatus('current')
if mibBuilder.loadTexts: xfPMSDCGainInterval15m0005dB.setDescription('\n      The number of seconds the SDC gain has been in the range: (0.0 <= SdcGain < 0.5) dB.\n      ')
xfPMSDCGainInterval15m0510dB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 23, 1, 3), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMSDCGainInterval15m0510dB.setStatus('current')
if mibBuilder.loadTexts: xfPMSDCGainInterval15m0510dB.setDescription('\n      The number of seconds the SDC gain has been in the range: (0.5 <= SdcGain < 1.0) dB.\n      ')
xfPMSDCGainInterval15m1015dB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 23, 1, 4), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMSDCGainInterval15m1015dB.setStatus('current')
if mibBuilder.loadTexts: xfPMSDCGainInterval15m1015dB.setDescription('\n      The number of seconds the SDC gain has been in the range: (1.0 <= SdcGain < 1.5) dB.\n      ')
xfPMSDCGainInterval15m1520dB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 23, 1, 5), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMSDCGainInterval15m1520dB.setStatus('current')
if mibBuilder.loadTexts: xfPMSDCGainInterval15m1520dB.setDescription('\n      The number of seconds the SDC gain has been in the range: (1.5 <= SdcGain < 2.0) dB.\n      ')
xfPMSDCGainInterval15m2025dB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 23, 1, 6), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMSDCGainInterval15m2025dB.setStatus('current')
if mibBuilder.loadTexts: xfPMSDCGainInterval15m2025dB.setDescription('\n      The number of seconds the SDC gain has been in the range: (2.0 <= SdcGain < 2.5) dB.\n      ')
xfPMSDCGainInterval15m2530dB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 23, 1, 7), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMSDCGainInterval15m2530dB.setStatus('current')
if mibBuilder.loadTexts: xfPMSDCGainInterval15m2530dB.setDescription('\n      The number of seconds the SDC gain has been in the range: (2.5 <= SdcGain < 3.0) dB.\n      ')
xfRLPMSDCGainCurrent24hTable = MibTable((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 24), )
if mibBuilder.loadTexts: xfRLPMSDCGainCurrent24hTable.setStatus('current')
if mibBuilder.loadTexts: xfRLPMSDCGainCurrent24hTable.setDescription('\n      This table monitors the time spent in each SDC gain value in the current 24 hours period.\n      ')
xfRLPMSDCGainCurrent24hEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 24, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: xfRLPMSDCGainCurrent24hEntry.setStatus('current')
if mibBuilder.loadTexts: xfRLPMSDCGainCurrent24hEntry.setDescription('\n      Entry in xfRLPMSDCGainCurrent24hTable.\n      ')
xfPMSDCGainCurrent24h0005dB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 24, 1, 1), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMSDCGainCurrent24h0005dB.setStatus('current')
if mibBuilder.loadTexts: xfPMSDCGainCurrent24h0005dB.setDescription('\n      The number of seconds the SDC gain has been in the range: (0.0 <= SdcGain < 0.5) dB.\n      ')
xfPMSDCGainCurrent24h0510dB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 24, 1, 2), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMSDCGainCurrent24h0510dB.setStatus('current')
if mibBuilder.loadTexts: xfPMSDCGainCurrent24h0510dB.setDescription('\n      The number of seconds the SDC gain has been in the range: (0.5 <= SdcGain < 1.0) dB.\n      ')
xfPMSDCGainCurrent24h1015dB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 24, 1, 3), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMSDCGainCurrent24h1015dB.setStatus('current')
if mibBuilder.loadTexts: xfPMSDCGainCurrent24h1015dB.setDescription('\n      The number of seconds the SDC gain has been in the range: (1.0 <= SdcGain < 1.5) dB.\n      ')
xfPMSDCGainCurrent24h1520dB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 24, 1, 4), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMSDCGainCurrent24h1520dB.setStatus('current')
if mibBuilder.loadTexts: xfPMSDCGainCurrent24h1520dB.setDescription('\n      The number of seconds the SDC gain has been in the range: (1.5 <= SdcGain < 2.0) dB.\n      ')
xfPMSDCGainCurrent24h2025dB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 24, 1, 5), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMSDCGainCurrent24h2025dB.setStatus('current')
if mibBuilder.loadTexts: xfPMSDCGainCurrent24h2025dB.setDescription('\n      The number of seconds the SDC gain has been in the range: (2.0 <= SdcGain < 2.5) dB.\n      ')
xfPMSDCGainCurrent24h2530dB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 24, 1, 6), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMSDCGainCurrent24h2530dB.setStatus('current')
if mibBuilder.loadTexts: xfPMSDCGainCurrent24h2530dB.setDescription('\n      The number of seconds the SDC gain has been in the range: (2.5 <= SdcGain < 3.0) dB.\n      ')
xfRLPMSDCGainInterval24hTable = MibTable((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 25), )
if mibBuilder.loadTexts: xfRLPMSDCGainInterval24hTable.setStatus('current')
if mibBuilder.loadTexts: xfRLPMSDCGainInterval24hTable.setDescription('\n      This table collects the time spent in each SDC gain value for the 24 hours interval.\n      ')
xfRLPMSDCGainInterval24hEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 25, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: xfRLPMSDCGainInterval24hEntry.setStatus('current')
if mibBuilder.loadTexts: xfRLPMSDCGainInterval24hEntry.setDescription('\n      Entry in xfRLPMSDCGainInterval24hTable.\n      ')
xfPMSDCGainInterval24h0005dB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 25, 1, 1), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMSDCGainInterval24h0005dB.setStatus('current')
if mibBuilder.loadTexts: xfPMSDCGainInterval24h0005dB.setDescription('\n      The number of seconds the SDC gain has been in the range: (0.0 <= SdcGain < 0.5) dB.\n      ')
xfPMSDCGainInterval24h0510dB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 25, 1, 2), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMSDCGainInterval24h0510dB.setStatus('current')
if mibBuilder.loadTexts: xfPMSDCGainInterval24h0510dB.setDescription('\n      The number of seconds the SDC gain has been in the range: (0.5 <= SdcGain < 1.0) dB.\n      ')
xfPMSDCGainInterval24h1015dB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 25, 1, 3), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMSDCGainInterval24h1015dB.setStatus('current')
if mibBuilder.loadTexts: xfPMSDCGainInterval24h1015dB.setDescription('\n      The number of seconds the SDC gain has been in the range: (1.0 <= SdcGain < 1.5) dB.\n      ')
xfPMSDCGainInterval24h1520dB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 25, 1, 4), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMSDCGainInterval24h1520dB.setStatus('current')
if mibBuilder.loadTexts: xfPMSDCGainInterval24h1520dB.setDescription('\n      The number of seconds the SDC gain has been in the range: (1.5 <= SdcGain < 2.0) dB.\n      ')
xfPMSDCGainInterval24h2025dB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 25, 1, 5), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMSDCGainInterval24h2025dB.setStatus('current')
if mibBuilder.loadTexts: xfPMSDCGainInterval24h2025dB.setDescription('\n      The number of seconds the SDC gain has been in the range: (2.0 <= SdcGain < 2.5) dB.\n      ')
xfPMSDCGainInterval24h2530dB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 25, 1, 6), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMSDCGainInterval24h2530dB.setStatus('current')
if mibBuilder.loadTexts: xfPMSDCGainInterval24h2530dB.setDescription('\n      The number of seconds the SDC gain has been in the range: (2.5 <= SdcGain < 3.0) dB.\n      ')
xfRLPMSDCGainConfigTable = MibTable((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 26), )
if mibBuilder.loadTexts: xfRLPMSDCGainConfigTable.setStatus('current')
if mibBuilder.loadTexts: xfRLPMSDCGainConfigTable.setDescription('\n      xfRLPMSDCGainConfigTable contains thresholds for setting and resetting alarms for SDC Gain PM data in SDC current and interval tables.\n      ')
xfRLPMSDCGainConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 26, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: xfRLPMSDCGainConfigEntry.setStatus('current')
if mibBuilder.loadTexts: xfRLPMSDCGainConfigEntry.setDescription('\n      Entry in xfRLPMSDCGainConfigTable.\n      ')
xfPMSDCGainSetThreshold15m = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 26, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfPMSDCGainSetThreshold15m.setStatus('current')
if mibBuilder.loadTexts: xfPMSDCGainSetThreshold15m.setDescription('\n      The 15 minute set threshold for the lowest SDC Gain interval: 0 - 0.5 dB.\n      Default value is 180.\n      ')
xfPMSDCGainSetThreshold24h = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 26, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfPMSDCGainSetThreshold24h.setStatus('current')
if mibBuilder.loadTexts: xfPMSDCGainSetThreshold24h.setDescription('\n      The 24 hour set threshold for the lowest SDC Gain interval: 0 - 0.5 dB.\n      Default value is 1500.\n      ')
xfPMSDCGainResetThreshold15m = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 26, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfPMSDCGainResetThreshold15m.setStatus('current')
if mibBuilder.loadTexts: xfPMSDCGainResetThreshold15m.setDescription('\n      The 15 minute reset threshold for the lowest SDC Gain interval: 0 - 0.5 dB.\n      Default value is 20.\n      ')
xfPMSDCGainStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 26, 1, 4), Bits().clone(namedValues=NamedValues(("sdcGain15m", 0), ("sdcGain24h", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfPMSDCGainStatus.setStatus('current')
if mibBuilder.loadTexts: xfPMSDCGainStatus.setDescription('\n      Threshold crossing SDC alarm status.\n      ')
xfRLExtRFPMConfigTable = MibTable((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 27), )
if mibBuilder.loadTexts: xfRLExtRFPMConfigTable.setStatus('current')
if mibBuilder.loadTexts: xfRLExtRFPMConfigTable.setDescription('This table contains the alarm threshold values for RL Extended RF PM.\n                 Its index id the RF IF ifIndex.')
xfRLExtRFPMConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 27, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: xfRLExtRFPMConfigEntry.setStatus('current')
if mibBuilder.loadTexts: xfRLExtRFPMConfigEntry.setDescription('Entry in the xfRLExtRFPMConfigTable.')
xfExtRFPMRLTS1Threshold = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 27, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-999, -201)).clone(-999)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfExtRFPMRLTS1Threshold.setStatus('current')
if mibBuilder.loadTexts: xfExtRFPMRLTS1Threshold.setDescription('RLTS1 Alarm Threshold for Minimum RF Input Power.\n                RF input level = value/10 dBm.\n                Domain: [-99.9 ... -20.1 dBm]\n                Valid for both 15 m & 24 h intervals.\n                If changed current interval PM data must be reset.\n                Always less than RLTS2, xfExtRFPMRLTS2Threshold.')
xfExtRFPMSetThreshold15mRLTS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 27, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 900)).clone(150)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfExtRFPMSetThreshold15mRLTS1.setStatus('current')
if mibBuilder.loadTexts: xfExtRFPMSetThreshold15mRLTS1.setDescription('Received Level 1 Threshold Second (RLTS1) 15 minute.\n                Alarm Set threshold in number of seconds that\n                RF Input Power are allowed below the\n                RLTS1 Alarm Threshold for Minimum RF Input Power\n                in current 15 minute interval.\n                Always greater than alarm Reset, xfExtRFPMResetThreshold15mRLTS1.')
xfExtRFPMResetThreshold15mRLTS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 27, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 900)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfExtRFPMResetThreshold15mRLTS1.setStatus('current')
if mibBuilder.loadTexts: xfExtRFPMResetThreshold15mRLTS1.setDescription('Received Level 1 Threshold Second (RLTS1) 15 minute.\n                Alarm Reset threshold in number of seconds that\n                RF Input Power are allowed below the\n                RLTS1 Alarm Threshold for Minimum RF Input Power\n                for entire current 15 minute interval.\n                Always less than alarm Set, xfPMSetThreshold15mRLTS1.')
xfExtRFPMRLTS2Threshold = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 27, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-998, -200)).clone(-998)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfExtRFPMRLTS2Threshold.setStatus('current')
if mibBuilder.loadTexts: xfExtRFPMRLTS2Threshold.setDescription('RLTS2 Alarm Threshold for Minimum RF Input Power.\n                RF input level = value/10 dBm.\n                Domain: [-99.8 ... -20.0 dBm]\n                Valid for both 15 m & 24 h intervals.\n                If changed current interval PM data must be reset.\n                Always greater than RLTS1, xfExtRFPMRLTS1Threshold.')
xfExtRFPMSetThreshold15mRLTS2 = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 27, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 900)).clone(180)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfExtRFPMSetThreshold15mRLTS2.setStatus('current')
if mibBuilder.loadTexts: xfExtRFPMSetThreshold15mRLTS2.setDescription('Received Level 2 Threshold Second (RLTS2) 15 minute.\n                Alarm Set threshold in number of seconds that\n                RF Input Power are allowed below the\n                RLTS2 Alarm Threshold for Minimum RF Input Power\n                in current 15 minute interval.\n                Always greater or equal to alarm Reset, xfExtRFPMResetThreshold15mRLTS2.')
xfExtRFPMResetThreshold15mRLTS2 = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 27, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 900)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfExtRFPMResetThreshold15mRLTS2.setStatus('current')
if mibBuilder.loadTexts: xfExtRFPMResetThreshold15mRLTS2.setDescription('Received Level 2 Threshold Second (RLTS2) 15 minute.\n                Alarm Reset threshold in number of seconds that\n                RF Input Power are allowed below the\n                RLTS2 Alarm Threshold for Minimum RF Input Power\n                for entire current 15 minute interval.\n                Always less or equal to alarm Set, xfExtRFPMSetThreshold15mRLTS2.')
xfExtRFPMSetThreshold15mRLTM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 27, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 800)).clone(800)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfExtRFPMSetThreshold15mRLTM.setStatus('current')
if mibBuilder.loadTexts: xfExtRFPMSetThreshold15mRLTM.setDescription('Receive Level Tide Mark (RLTM) 15 minute.\n                Alarm Set threshold for maximum allowed\n                max / min difference of RF Input Power\n                in current 15 minute interval.\n                RF input level = value/10 dB.\n                Domain: [1.0 ... 80.0 dB]\n                Always greater or equal to alarm Reset, xfExtRFPMResetThreshold15mRLTM.')
xfExtRFPMResetThreshold15mRLTM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 27, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 800)).clone(790)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfExtRFPMResetThreshold15mRLTM.setStatus('current')
if mibBuilder.loadTexts: xfExtRFPMResetThreshold15mRLTM.setDescription('Receive Level Tide Mark (RLTM) 15 minute.\n                Alarm Reset threshold for maximum allowed\n                max / min difference of RF Input Power\n                for entire current 15 minute interval.\n                RF input level = value/10 dB.\n                Domain: [1.0 ... 80.0 dB]\n                Always less or equal to alarm Set, xfExtRFPMSetThreshold15mRLTM.')
xfExtRFPMTLTS1Threshold = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 27, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 45)).clone(45)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfExtRFPMTLTS1Threshold.setStatus('current')
if mibBuilder.loadTexts: xfExtRFPMTLTS1Threshold.setDescription('TLTS1 Alarm Threshold for Maximum RF Output Power.\n                RF output level = value dBm.\n                Domain: [-100 ... 45 dBm]\n                Valid for both 15 m & 24 h intervals.\n                If changed current interval PM data must be reset.')
xfExtRFPMSetThreshold15mTLTS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 27, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 900)).clone(180)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfExtRFPMSetThreshold15mTLTS1.setStatus('current')
if mibBuilder.loadTexts: xfExtRFPMSetThreshold15mTLTS1.setDescription('Transmitted Levels 1 Threshold Second (TLTS1) 15 minute.\n                Alarm Set threshold in number of seconds that\n                RF Output Power are allowed above the\n                TLTS1 Alarm Threshold for Maximum RF Output Power\n                in current 15 minute interval.\n                Always greater or equal to alarm Reset, xfExtRFPMResetThreshold15mTLTS1.')
xfExtRFPMResetThreshold15mTLTS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 27, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 900)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfExtRFPMResetThreshold15mTLTS1.setStatus('current')
if mibBuilder.loadTexts: xfExtRFPMResetThreshold15mTLTS1.setDescription('Transmitted Levels 1 Threshold Second (TLTS1) 15 minute.\n                Alarm Reset threshold in number of seconds that\n                RF Output Power are allowed above the\n                TLTS1 Alarm Threshold for Maximum RF Output Power\n                for entire current 15 minute interval.\n                Always less or equal to alarm Set, xfExtRFPMSetThreshold15mTLTS1.')
xfExtRFPMSetThreshold15mTLTM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 27, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 145)).clone(145)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfExtRFPMSetThreshold15mTLTM.setStatus('current')
if mibBuilder.loadTexts: xfExtRFPMSetThreshold15mTLTM.setDescription('Transmitted Level Tide Mark (TLTM) 15 minute.\n                Alarm Set threshold for maximum allowed\n                max / min difference of RF Output Power\n                in current 15 minute interval.\n                RF output level = value dB.\n                Domain: [1 ... 145 dB]\n                Always greater or equal to alarm Reset, xfExtRFPMResetThreshold15mTLTM.')
xfExtRFPMResetThreshold15mTLTM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 27, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 145)).clone(144)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfExtRFPMResetThreshold15mTLTM.setStatus('current')
if mibBuilder.loadTexts: xfExtRFPMResetThreshold15mTLTM.setDescription('Transmitted Level Tide Mark (TLTM) 15 minute.\n                Alarm Reset threshold for maximum allowed\n                max / min difference of RF Output Power\n                for entire current 15 minute interval.\n                RF output level = value dB.\n                Domain: [1 ... 145 dB]\n                Always less or equal to alarm Set, xfExtRFPMSetThreshold15mTLTM.')
xfExtRFPMSetThreshold24hRLTS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 27, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 86400)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfExtRFPMSetThreshold24hRLTS1.setStatus('current')
if mibBuilder.loadTexts: xfExtRFPMSetThreshold24hRLTS1.setDescription('Received Level 1 Threshold Second (RLTS1) 24 hour.\n                Alarm Set / Reset threshold in number of seconds that\n                RF Input Power are allowed below the\n                RLTS1 Alarm Threshold for Minimum RF Input Power\n                in current 24 hour interval.')
xfExtRFPMSetThreshold24hRLTS2 = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 27, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 86400)).clone(1500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfExtRFPMSetThreshold24hRLTS2.setStatus('current')
if mibBuilder.loadTexts: xfExtRFPMSetThreshold24hRLTS2.setDescription('Received Level 2 Threshold Second (RLTS2) 24 hour.\n                Alarm Set / Reset threshold in number of seconds that\n                RF Input Power are allowed below the\n                RLTS2 Alarm Threshold for Minimum RF Input Power\n                in current 24 hour interval.')
xfExtRFPMSetThreshold24hRLTM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 27, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 800)).clone(800)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfExtRFPMSetThreshold24hRLTM.setStatus('current')
if mibBuilder.loadTexts: xfExtRFPMSetThreshold24hRLTM.setDescription('Receive Level Tide Mark (RLTM) 24 hour.\n                Alarm Set / Reset threshold for maximum allowed\n                max / min difference of RF Input Power\n                in current 24 hour interval.\n                RF input level = value/10 dB.\n                Domain: [1.0 ... 80.0 dB]')
xfExtRFPMSetThreshold24hTLTS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 27, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 86400)).clone(1500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfExtRFPMSetThreshold24hTLTS1.setStatus('current')
if mibBuilder.loadTexts: xfExtRFPMSetThreshold24hTLTS1.setDescription('Transmitted Levels 1 Threshold Second (TLTS1) 24 hour.\n                Alarm Set / Reset threshold in number of seconds that\n                RF Output Power are allowed above the\n                TLTS1 Alarm Threshold for Maximum RF Output Power\n                in current 24 hour interval.')
xfExtRFPMSetThreshold24hTLTM = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 27, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 145)).clone(145)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfExtRFPMSetThreshold24hTLTM.setStatus('current')
if mibBuilder.loadTexts: xfExtRFPMSetThreshold24hTLTM.setDescription('Transmitted Level Tide Mark (TLTM) 24 hour.\n                Alarm Set / Reset threshold for maximum allowed\n                max / min difference of RF Output Power\n                in current 24 hour interval.\n                RF output level = value dB.\n                Domain: [1 ... 145 dB]')
xfExtRFPMStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 27, 1, 19), Bits().clone(namedValues=NamedValues(("rlts1Counter15m0", 0), ("rlts1Counter15m1", 1), ("rlts1Counter15m2", 2), ("rlts2Counter15m0", 3), ("rlts2Counter15m1", 4), ("rlts2Counter15m2", 5), ("rltmCounter15m0", 6), ("rltmCounter15m1", 7), ("rltmCounter15m2", 8), ("tlts1Counter15m0", 9), ("tlts1Counter15m1", 10), ("tlts1Counter15m2", 11), ("tltmCounter15m0", 12), ("tltmCounter15m1", 13), ("tltmCounter15m2", 14), ("rlts1Counter24h0", 15), ("rlts1Counter24h1", 16), ("rlts1Counter24h2", 17), ("rlts2Counter24h0", 18), ("rlts2Counter24h1", 19), ("rlts2Counter24h2", 20), ("rltmCounter24h0", 21), ("rltmCounter24h1", 22), ("rltmCounter24h2", 23), ("tlts1Counter24h0", 24), ("tlts1Counter24h1", 25), ("tlts1Counter24h2", 26), ("tltmCounter24h0", 27), ("tltmCounter24h1", 28), ("tltmCounter24h2", 29)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfExtRFPMStatus.setStatus('current')
if mibBuilder.loadTexts: xfExtRFPMStatus.setDescription('Threshold alarm status')
xfExtRFPMView = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 27, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("extPmEnable", 1), ("extPmDisable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xfExtRFPMView.setStatus('current')
if mibBuilder.loadTexts: xfExtRFPMView.setDescription('\n                Enable/disable visibility of PM tables.\n                Default value: extPmEnable(1)\n                Near end access: read-write\n                Far end access: No access\n                ')
xfRLExtRFPMCurrent24hTable = MibTable((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 28), )
if mibBuilder.loadTexts: xfRLExtRFPMCurrent24hTable.setStatus('current')
if mibBuilder.loadTexts: xfRLExtRFPMCurrent24hTable.setDescription('Current 24h Extended RF PM table.\n                Its index is RF IF ifIndex')
xfRLExtRFPMCurrent24hEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 28, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: xfRLExtRFPMCurrent24hEntry.setStatus('current')
if mibBuilder.loadTexts: xfRLExtRFPMCurrent24hEntry.setDescription('Entry in the xfRLExtRFPMCurrent24hTable.')
xfExtRFPMCurrent24hElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 28, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfExtRFPMCurrent24hElapsedTime.setStatus('current')
if mibBuilder.loadTexts: xfExtRFPMCurrent24hElapsedTime.setDescription('The number of seconds that have elapsed since the\n                beginning of the current error-measurement period.\n\n                If the current interval exceeds the maximum value,\n                the agent will return the maximum value.\n                ')
xfExtRFPMCurrent24hRLTS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 28, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 86400), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfExtRFPMCurrent24hRLTS1.setStatus('current')
if mibBuilder.loadTexts: xfExtRFPMCurrent24hRLTS1.setDescription('Received Level 1 Threshold Second (RLTS1) 24 hour.\n                Number of seconds that the RF Input Power was below the RLTS1\n                in the current 24 hour interval.\n                -1 indicates invalid value.\n                The instances are reset by:\n                  * xfTermPerfReset in xfRLPtpTerminalPerformanceTable for MMU2 X / MMU3 X\n                  * xfPMPerfReset in xfRLPMContinuousCounterTable for MMU4 / MMU1002')
xfExtRFPMCurrent24hRLTS2 = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 28, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 86400), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfExtRFPMCurrent24hRLTS2.setStatus('current')
if mibBuilder.loadTexts: xfExtRFPMCurrent24hRLTS2.setDescription('Received Level 2 Threshold Second (RLTS2) 24 hour.\n                Number of seconds that the RF Input Power was below the RLTS2\n                in the current 24 hour interval.\n                -1 indicates invalid value.\n                The instances are reset by:\n                  * xfTermPerfReset in xfRLPtpTerminalPerformanceTable for MMU2 X / MMU3 X\n                  * xfPMPerfReset in xfRLPMContinuousCounterTable for MMU4 / MMU1002')
xfExtRFPMCurrent24hRLMin = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 28, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-999, -200), ValueRangeConstraint(0, 0), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfExtRFPMCurrent24hRLMin.setStatus('current')
if mibBuilder.loadTexts: xfExtRFPMCurrent24hRLMin.setDescription('Indicate Min RF Input level in current 24 hour interval.\n                RF input level = value/10 dBm.\n                Domain: [-99.9 ... -20.0 dBm]\n                0 (zero) indicates invalid value.\n                 The instances are reset by:\n                  * xfTermPerfReset in xfRLPtpTerminalPerformanceTable for MMU2 X / MMU3 X\n                  * xfPMPerfReset in xfRLPMContinuousCounterTable for MMU4 / MMU1002')
xfExtRFPMCurrent24hRLMax = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 28, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-999, -200), ValueRangeConstraint(0, 0), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfExtRFPMCurrent24hRLMax.setStatus('current')
if mibBuilder.loadTexts: xfExtRFPMCurrent24hRLMax.setDescription('Indicate Max RF Input level in current 24 hour interval.\n                RF input level = value/10 dBm.\n                Domain: [-99.9 ... -20.0 dBm]\n                0 (zero) indicates invalid value.\n                The instances are reset by:\n                  * xfTermPerfReset in xfRLPtpTerminalPerformanceTable for MMU2 X / MMU3 X\n                  * xfPMPerfReset in xfRLPMContinuousCounterTable for MMU4 / MMU1002')
xfExtRFPMCurrent24hTLTS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 28, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 86400), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfExtRFPMCurrent24hTLTS1.setStatus('current')
if mibBuilder.loadTexts: xfExtRFPMCurrent24hTLTS1.setDescription('Transmitted Level 1 Threshold Second (TLTS1) 24 hour.\n                Number of seconds that the RF Output Power was above the TLTS1\n                in the current 24 hour interval\n                -1 indicates invalid value.\n                The instances are reset by:\n                  * xfTermPerfReset in xfRLPtpTerminalPerformanceTable for MMU2 X / MMU3 X\n                  * xfPMPerfReset in xfRLPMContinuousCounterTable for MMU4 / MMU1002')
xfExtRFPMCurrent24hTLMin = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 28, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-100, 45), ValueRangeConstraint(255, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfExtRFPMCurrent24hTLMin.setStatus('current')
if mibBuilder.loadTexts: xfExtRFPMCurrent24hTLMin.setDescription('Indicate Min RF Output level in current 24 hour interval.\n                RF output level = value dBm.\n                Domain: [-100 ... 45 dBm]\n                255 indicates invalid value.\n                The instances are reset by:\n                  * xfTermPerfReset in xfRLPtpTerminalPerformanceTable for MMU2 X / MMU3 X\n                  * xfPMPerfReset in xfRLPMContinuousCounterTable for MMU4 / MMU1002')
xfExtRFPMCurrent24hTLMax = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 28, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-100, 45), ValueRangeConstraint(255, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfExtRFPMCurrent24hTLMax.setStatus('current')
if mibBuilder.loadTexts: xfExtRFPMCurrent24hTLMax.setDescription('Indicate Max RF Output level in current 24 hour interval.\n                RF output level = value dBm.\n                Domain: [-100 ... 45 dBm]\n                255 indicates invalid value.\n                The instances are reset by:\n                  * xfTermPerfReset in xfRLPtpTerminalPerformanceTable for MMU2 X / MMU3 X\n                  * xfPMPerfReset in xfRLPMContinuousCounterTable for MMU4 / MMU1002')
xfRLExtRFPMInterval24hTable = MibTable((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 29), )
if mibBuilder.loadTexts: xfRLExtRFPMInterval24hTable.setStatus('current')
if mibBuilder.loadTexts: xfRLExtRFPMInterval24hTable.setDescription('Interval 24h Extended RF PM table.\n                Its index is RF IF ifIndex')
xfRLExtRFPMInterval24hEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 29, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: xfRLExtRFPMInterval24hEntry.setStatus('current')
if mibBuilder.loadTexts: xfRLExtRFPMInterval24hEntry.setDescription('Entry in the xfRLExtRFPMInterval24hTable.')
xfExtRFPMInterval24hRLTS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 29, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 86400), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfExtRFPMInterval24hRLTS1.setStatus('current')
if mibBuilder.loadTexts: xfExtRFPMInterval24hRLTS1.setDescription('Received Level 1 Threshold Second (RLTS1) 24 hour.\n                Number of seconds that the RF Input Power was below the RLTS1\n                in the previous 24 hour interval.\n                -1 indicates invalid value.\n                The instances are reset by:\n                  * xfTermPerfReset in xfRLPtpTerminalPerformanceTable for MMU2 X / MMU3 X\n                  * xfPMPerfReset in xfRLPMContinuousCounterTable for MMU4 / MMU1002')
xfExtRFPMInterval24hRLTS2 = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 29, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 86400), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfExtRFPMInterval24hRLTS2.setStatus('current')
if mibBuilder.loadTexts: xfExtRFPMInterval24hRLTS2.setDescription('Received Level 2 Threshold Second (RLTS2) 24 hour.\n                Number of seconds that the RF Input Power was below the RLTS2\n                in the previous 24 hour interval.\n                -1 indicates invalid value.\n                The instances are reset by:\n                  * xfTermPerfReset in xfRLPtpTerminalPerformanceTable for MMU2 X / MMU3 X\n                  * xfPMPerfReset in xfRLPMContinuousCounterTable for MMU4 / MMU1002')
xfExtRFPMInterval24hRLMin = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 29, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-999, -200), ValueRangeConstraint(0, 0), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfExtRFPMInterval24hRLMin.setStatus('current')
if mibBuilder.loadTexts: xfExtRFPMInterval24hRLMin.setDescription('Indicate Min RF Input level in previous 24 hour interval.\n                RF input level = value/10 dBm.\n                Domain: [-99.9 ... -20.0 dBm]\n                0 (zero) indicates invalid value.\n                The instances are reset by:\n                  * xfTermPerfReset in xfRLPtpTerminalPerformanceTable for MMU2 X / MMU3 X\n                  * xfPMPerfReset in xfRLPMContinuousCounterTable for MMU4 / MMU1002')
xfExtRFPMInterval24hRLMax = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 29, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-999, -200), ValueRangeConstraint(0, 0), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfExtRFPMInterval24hRLMax.setStatus('current')
if mibBuilder.loadTexts: xfExtRFPMInterval24hRLMax.setDescription('Indicate Max RF Input level in previous 24 hour interval.\n                RF input level = value/10 dBm.\n                Domain: [-99.9 ... -20.0 dBm]\n                0 (zero) indicates invalid value.\n                The instances are reset by:\n                  * xfTermPerfReset in xfRLPtpTerminalPerformanceTable for MMU2 X / MMU3 X\n                  * xfPMPerfReset in xfRLPMContinuousCounterTable for MMU4 / MMU1002')
xfExtRFPMInterval24hTLTS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 29, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 86400), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfExtRFPMInterval24hTLTS1.setStatus('current')
if mibBuilder.loadTexts: xfExtRFPMInterval24hTLTS1.setDescription('Transmitted Level 1 Threshold Second (TLTS1) 24 hour.\n                Number of seconds that the RF Output Power was above the TLTS1\n                in the previous 24 hour interval\n                -1 indicates invalid value.\n                The instances are reset by:\n                  * xfTermPerfReset in xfRLPtpTerminalPerformanceTable for MMU2 X / MMU3 X\n                  * xfPMPerfReset in xfRLPMContinuousCounterTable for MMU4 / MMU1002')
xfExtRFPMInterval24hTLMin = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 29, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-100, 45), ValueRangeConstraint(255, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfExtRFPMInterval24hTLMin.setStatus('current')
if mibBuilder.loadTexts: xfExtRFPMInterval24hTLMin.setDescription('Indicate Min RF Output level in previous 24 hour interval.\n                RF output level = value dBm.\n                Domain: [-100 ... 45 dBm]\n                255 indicates invalid value.\n                The instances are reset by:\n                  * xfTermPerfReset in xfRLPtpTerminalPerformanceTable for MMU2 X / MMU3 X\n                  * xfPMPerfReset in xfRLPMContinuousCounterTable for MMU4 / MMU1002')
xfExtRFPMInterval24hTLMax = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 29, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-100, 45), ValueRangeConstraint(255, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfExtRFPMInterval24hTLMax.setStatus('current')
if mibBuilder.loadTexts: xfExtRFPMInterval24hTLMax.setDescription('Indicate Max RF Output level in previous 24 hour interval.\n                RF output level = value dBm.\n                Domain: [-100 ... 45 dBm]\n                255 indicates invalid value.\n                The instances are reset by:\n                  * xfTermPerfReset in xfRLPtpTerminalPerformanceTable for MMU2 X / MMU3 X\n                  * xfPMPerfReset in xfRLPMContinuousCounterTable for MMU4 / MMU1002')
xfExtRFPMInterval24hValidData = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 29, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfExtRFPMInterval24hValidData.setStatus('current')
if mibBuilder.loadTexts: xfExtRFPMInterval24hValidData.setDescription('This variable indicates whether the data\n                for this interval is valid.')
xfRLExtRFPMCurrent15mTable = MibTable((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 30), )
if mibBuilder.loadTexts: xfRLExtRFPMCurrent15mTable.setStatus('current')
if mibBuilder.loadTexts: xfRLExtRFPMCurrent15mTable.setDescription('Current 15m Extended RF PM table.\n                Its index is RF IF ifIndex')
xfRLExtRFPMCurrent15mEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 30, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: xfRLExtRFPMCurrent15mEntry.setStatus('current')
if mibBuilder.loadTexts: xfRLExtRFPMCurrent15mEntry.setDescription('Entry in the table.')
xfExtRFPMCurrent15mElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 30, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfExtRFPMCurrent15mElapsedTime.setStatus('current')
if mibBuilder.loadTexts: xfExtRFPMCurrent15mElapsedTime.setDescription('The number of seconds that have elapsed since the beginning of\n                the current error-measurement period.\n                ')
xfExtRFPMCurrent15mRLTS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 30, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 900), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfExtRFPMCurrent15mRLTS1.setStatus('current')
if mibBuilder.loadTexts: xfExtRFPMCurrent15mRLTS1.setDescription('Received Level 1 Threshold Second (RLTS1) 15 minute\n                Number of seconds that the RF Input Power was below the RLTS1\n                in the current 15 minute interval.\n                -1 indicates invalid value.\n                The instances are reset by:\n                  * xfTermPerfReset in xfRLPtpTerminalPerformanceTable for MMU2 X / MMU3 X\n                  * xfPMPerfReset in xfRLPMContinuousCounterTable for MMU4 / MMU1002')
xfExtRFPMCurrent15mRLTS2 = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 30, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 900), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfExtRFPMCurrent15mRLTS2.setStatus('current')
if mibBuilder.loadTexts: xfExtRFPMCurrent15mRLTS2.setDescription('Received Level 2 Threshold Second (RLTS2) 15 minute\n                Number of seconds that the RF Input Power was below the RLTS2\n                in the current 15 minute interval.\n                -1 indicates invalid value.\n                The instances are reset by:\n                  * xfTermPerfReset in xfRLPtpTerminalPerformanceTable for MMU2 X / MMU3 X\n                  * xfPMPerfReset in xfRLPMContinuousCounterTable for MMU4 / MMU1002')
xfExtRFPMCurrent15mRLMin = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 30, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-999, -200), ValueRangeConstraint(0, 0), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfExtRFPMCurrent15mRLMin.setStatus('current')
if mibBuilder.loadTexts: xfExtRFPMCurrent15mRLMin.setDescription('Indicate Min RF Input level in current 15 minute interval.\n                RF input level = value/10 dBm.\n                Domain: [-99.9 ... -20.0 dBm]\n                0 (zero) indicates invalid value.\n                The instances are reset by:\n                  * xfTermPerfReset in xfRLPtpTerminalPerformanceTable for MMU2 X / MMU3 X\n                  * xfPMPerfReset in xfRLPMContinuousCounterTable for MMU4 / MMU1002')
xfExtRFPMCurrent15mRLMax = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 30, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-999, -200), ValueRangeConstraint(0, 0), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfExtRFPMCurrent15mRLMax.setStatus('current')
if mibBuilder.loadTexts: xfExtRFPMCurrent15mRLMax.setDescription('Indicate Max RF Input level in current 15 minute interval.\n                RF input level = value/10 dBm.\n                Domain: [-99.9 ... -20.0 dBm]\n                0 (zero) indicates invalid value.\n                The instances are reset by:\n                  * xfTermPerfReset in xfRLPtpTerminalPerformanceTable for MMU2 X / MMU3 X\n                  * xfPMPerfReset in xfRLPMContinuousCounterTable for MMU4 / MMU1002')
xfExtRFPMCurrent15mTLTS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 30, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 900), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfExtRFPMCurrent15mTLTS1.setStatus('current')
if mibBuilder.loadTexts: xfExtRFPMCurrent15mTLTS1.setDescription('Transmitted Level 1 Threshold Second (TLTS1) 15 minute\n                Number of seconds that the RF Output Power was above the TLTS1\n                in the current 15 minute interval\n                -1 indicates invalid value.\n                The instances are reset by:\n                  * xfTermPerfReset in xfRLPtpTerminalPerformanceTable for MMU2 X / MMU3 X\n                  * xfPMPerfReset in xfRLPMContinuousCounterTable for MMU4 / MMU1002')
xfExtRFPMCurrent15mTLMin = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 30, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-100, 45), ValueRangeConstraint(255, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfExtRFPMCurrent15mTLMin.setStatus('current')
if mibBuilder.loadTexts: xfExtRFPMCurrent15mTLMin.setDescription('Indicate Min RF Output level in current 15 minute interval.\n                RF output level = value dBm.\n                Domain: [-100 ... 45 dBm]\n                255 indicates invalid value.\n                The instances are reset by:\n                  * xfTermPerfReset in xfRLPtpTerminalPerformanceTable for MMU2 X / MMU3 X\n                  * xfPMPerfReset in xfRLPMContinuousCounterTable for MMU4 / MMU1002')
xfExtRFPMCurrent15mTLMax = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 30, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-100, 45), ValueRangeConstraint(255, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfExtRFPMCurrent15mTLMax.setStatus('current')
if mibBuilder.loadTexts: xfExtRFPMCurrent15mTLMax.setDescription('Indicate Max RF Output level in current 15 minute interval.\n                RF output level = value dBm.\n                Domain: [-100 ... 45 dBm]\n                255 indicates invalid value.\n                The instances are reset by:\n                  * xfTermPerfReset in xfRLPtpTerminalPerformanceTable for MMU2 X / MMU3 X\n                  * xfPMPerfReset in xfRLPMContinuousCounterTable for MMU4 / MMU1002')
xfRLExtRFPMInterval15mTable = MibTable((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 31), )
if mibBuilder.loadTexts: xfRLExtRFPMInterval15mTable.setStatus('current')
if mibBuilder.loadTexts: xfRLExtRFPMInterval15mTable.setDescription('Interval 15m Extended RF PM table.\n                Its index is RF IF ifIndex')
xfRLExtRFPMInterval15mEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 31, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRFPMInterval15mIntervalNumber"))
if mibBuilder.loadTexts: xfRLExtRFPMInterval15mEntry.setStatus('current')
if mibBuilder.loadTexts: xfRLExtRFPMInterval15mEntry.setDescription('Entry in the table.')
xfExtRFPMInterval15mIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 31, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfExtRFPMInterval15mIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: xfExtRFPMInterval15mIntervalNumber.setDescription('A number between 1 and 96, which identifies the interval for which\n                the set of statistics is available. The interval identified by 1\n                is the most recently completed 15 minute interval, and the interval\n                identified by N is the interval immediately preceding the one\n                identified by N-1.')
xfExtRFPMInterval15mRLTS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 31, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 900), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfExtRFPMInterval15mRLTS1.setStatus('current')
if mibBuilder.loadTexts: xfExtRFPMInterval15mRLTS1.setDescription('Received Level 1 Threshold Second (RLTS1) 15 minute\n                Number of seconds that the RF Input Power was below the RLTS1\n                in the previous 15 minute interval.\n                -1 indicates invalid value.\n                The instances are reset by:\n                  * xfTermPerfReset in xfRLPtpTerminalPerformanceTable for MMU2 X / MMU3 X\n                  * xfPMPerfReset in xfRLPMContinuousCounterTable for MMU4 / MMU1002')
xfExtRFPMInterval15mRLTS2 = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 31, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 900), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfExtRFPMInterval15mRLTS2.setStatus('current')
if mibBuilder.loadTexts: xfExtRFPMInterval15mRLTS2.setDescription('Received Level 2 Threshold Second (RLTS2) 15 minute\n                Number of seconds that the RF Input Power was below the RLTS2\n                in the previous 15 minute interval.\n                -1 indicates invalid value.\n                The instances are reset by:\n                  * xfTermPerfReset in xfRLPtpTerminalPerformanceTable for MMU2 X / MMU3 X\n                  * xfPMPerfReset in xfRLPMContinuousCounterTable for MMU4 / MMU1002')
xfExtRFPMInterval15mRLMin = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 31, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-999, -200), ValueRangeConstraint(0, 0), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfExtRFPMInterval15mRLMin.setStatus('current')
if mibBuilder.loadTexts: xfExtRFPMInterval15mRLMin.setDescription('Indicate Min RF Input level in previous 15 minute interval.\n                RF input level = value/10 dBm.\n                Domain: [-99.9 ... -20.0 dBm]\n                0 (zero) indicates invalid value.\n                The instances are reset by:\n                  * xfTermPerfReset in xfRLPtpTerminalPerformanceTable for MMU2 X / MMU3 X\n                  * xfPMPerfReset in xfRLPMContinuousCounterTable for MMU4 / MMU1002')
xfExtRFPMInterval15mRLMax = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 31, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-999, -200), ValueRangeConstraint(0, 0), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfExtRFPMInterval15mRLMax.setStatus('current')
if mibBuilder.loadTexts: xfExtRFPMInterval15mRLMax.setDescription('Indicate Max RF Input level in previous 15 minute interval.\n                RF input level = value/10 dBm.\n                Domain: [-99.9 ... -20.0 dBm]\n                0 (zero) indicates invalid value.\n                The instances are reset by:\n                  * xfTermPerfReset in xfRLPtpTerminalPerformanceTable for MMU2 X / MMU3 X\n                  * xfPMPerfReset in xfRLPMContinuousCounterTable for MMU4 / MMU1002')
xfExtRFPMInterval15mTLTS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 31, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 900), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfExtRFPMInterval15mTLTS1.setStatus('current')
if mibBuilder.loadTexts: xfExtRFPMInterval15mTLTS1.setDescription('Transmitted Level 1 Threshold Second (TLTS1) 15 minute\n                Number of seconds that the RF Output Power was above the TLTS1\n                in the previous 15 minute interval\n                -1 indicates invalid value.\n                The instances are reset by:\n                  * xfTermPerfReset in xfRLPtpTerminalPerformanceTable for MMU2 X / MMU3 X\n                  * xfPMPerfReset in xfRLPMContinuousCounterTable for MMU4 / MMU1002')
xfExtRFPMInterval15mTLMin = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 31, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-100, 45), ValueRangeConstraint(255, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfExtRFPMInterval15mTLMin.setStatus('current')
if mibBuilder.loadTexts: xfExtRFPMInterval15mTLMin.setDescription('Indicate Min RF Output level in previous 15 minute interval.\n                RF output level = value dBm.\n                Domain: [-100 ... 45 dBm]\n                255 indicates invalid value.\n                The instances are reset by:\n                  * xfTermPerfReset in xfRLPtpTerminalPerformanceTable for MMU2 X / MMU3 X\n                  * xfPMPerfReset in xfRLPMContinuousCounterTable for MMU4 / MMU1002')
xfExtRFPMInterval15mTLMax = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 31, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-100, 45), ValueRangeConstraint(255, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfExtRFPMInterval15mTLMax.setStatus('current')
if mibBuilder.loadTexts: xfExtRFPMInterval15mTLMax.setDescription('Indicate Max RF Output level in previous 15 minute interval.\n                RF output level = value dBm.\n                Domain: [-100 ... 45 dBm]\n                255 indicates invalid value.\n                The instances are reset by:\n                  * xfTermPerfReset in xfRLPtpTerminalPerformanceTable for MMU2 X / MMU3 X\n                  * xfPMPerfReset in xfRLPMContinuousCounterTable for MMU4 / MMU1002')
xfExtRFPMInterval15mValidData = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 31, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfExtRFPMInterval15mValidData.setStatus('current')
if mibBuilder.loadTexts: xfExtRFPMInterval15mValidData.setDescription('This variable indicates if the data for this interval is valid.')
xfRLExtRAUPMCurrent24hTable = MibTable((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 32), )
if mibBuilder.loadTexts: xfRLExtRAUPMCurrent24hTable.setStatus('current')
if mibBuilder.loadTexts: xfRLExtRAUPMCurrent24hTable.setDescription('Current 24h Extended RAU PM table.\n                Its index is RAU IF ifIndex')
xfRLExtRAUPMCurrent24hEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 32, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: xfRLExtRAUPMCurrent24hEntry.setStatus('current')
if mibBuilder.loadTexts: xfRLExtRAUPMCurrent24hEntry.setDescription('Entry in the xfRLExtRAUPMCurrent24hTable.')
xfExtRAUPMCurrent24hElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 32, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfExtRAUPMCurrent24hElapsedTime.setStatus('current')
if mibBuilder.loadTexts: xfExtRAUPMCurrent24hElapsedTime.setDescription('The number of seconds that have elapsed since the\n                beginning of the current error-measurement period.\n\n                If the current interval exceeds the maximum value,\n                the agent will return the maximum value.\n                ')
xfExtRAUPMCurrent24hMSEMin = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 32, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1000, 1000), ValueRangeConstraint(2000, 2000), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfExtRAUPMCurrent24hMSEMin.setStatus('current')
if mibBuilder.loadTexts: xfExtRAUPMCurrent24hMSEMin.setDescription('Indicate Min MSE level\n                in current 24 hour interval.\n                Input level = value/10 dB.\n                Domain: [-100.0 ... 100.0 dB]\n                2000 indicates invalid value.\n                The instances are reset by:\n                  * xfTermPerfReset in xfRLPtpTerminalPerformanceTable for MMU2 X / MMU3 X\n                  * xfPMPerfReset in xfRLPMContinuousCounterTable for MMU4 / MMU1002')
xfExtRAUPMCurrent24hMSEMax = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 32, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1000, 1000), ValueRangeConstraint(2000, 2000), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfExtRAUPMCurrent24hMSEMax.setStatus('current')
if mibBuilder.loadTexts: xfExtRAUPMCurrent24hMSEMax.setDescription('Indicate Max MSE level\n                in current 24 hour interval.\n                Input level = value/10 dB.\n                Domain: [-100.0 ... 100.0 dB]\n                2000 indicates invalid value.\n                The instances are reset by:\n                  * xfTermPerfReset in xfRLPtpTerminalPerformanceTable for MMU2 X / MMU3 X\n                  * xfPMPerfReset in xfRLPMContinuousCounterTable for MMU4 / MMU1002')
xfExtRAUPMCurrent24hXPIMin = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 32, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1000, 1000), ValueRangeConstraint(2000, 2000), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfExtRAUPMCurrent24hXPIMin.setStatus('current')
if mibBuilder.loadTexts: xfExtRAUPMCurrent24hXPIMin.setDescription('Indicate Min Cross-Polar Interference (XPI) level\n                in current 24 hour interval.\n                Input level = value/10 dB.\n                Domain: [-100.0 ... 100.0 dB]\n                2000 indicates invalid value.\n                The instances are reset by:\n                  * xfTermPerfReset in xfRLPtpTerminalPerformanceTable for MMU2 X / MMU3 X\n                  * xfPMPerfReset in xfRLPMContinuousCounterTable for MMU4 / MMU1002')
xfExtRAUPMCurrent24hXPIMax = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 32, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1000, 1000), ValueRangeConstraint(2000, 2000), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfExtRAUPMCurrent24hXPIMax.setStatus('current')
if mibBuilder.loadTexts: xfExtRAUPMCurrent24hXPIMax.setDescription('Indicate Max Cross-Polar Interference (XPI) level\n                in current 24 hour interval.\n                Input level = value/10 dB.\n                Domain: [-100.0 ... 100.0 dB]\n                2000 indicates invalid value.\n                The instances are reset by:\n                  * xfTermPerfReset in xfRLPtpTerminalPerformanceTable for MMU2 X / MMU3 X\n                  * xfPMPerfReset in xfRLPMContinuousCounterTable for MMU4 / MMU1002')
xfRLExtRAUPMInterval24hTable = MibTable((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 33), )
if mibBuilder.loadTexts: xfRLExtRAUPMInterval24hTable.setStatus('current')
if mibBuilder.loadTexts: xfRLExtRAUPMInterval24hTable.setDescription('Interval 24h Extended RAU PM table.\n                Its index is RAU IF ifIndex')
xfRLExtRAUPMInterval24hEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 33, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: xfRLExtRAUPMInterval24hEntry.setStatus('current')
if mibBuilder.loadTexts: xfRLExtRAUPMInterval24hEntry.setDescription('Entry in the xfRLExtRAUPMInterval24hTable.')
xfExtRAUPMInterval24hMSEMin = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 33, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1000, 1000), ValueRangeConstraint(2000, 2000), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfExtRAUPMInterval24hMSEMin.setStatus('current')
if mibBuilder.loadTexts: xfExtRAUPMInterval24hMSEMin.setDescription('Indicate Min MSE level\n                in previous 24 hour interval.\n                Input level = value/10 dB.\n                Domain: [-100.0 ... 100.0 dB]\n                2000 indicates invalid value.\n                The instances are reset by:\n                  * xfTermPerfReset in xfRLPtpTerminalPerformanceTable for MMU2 X / MMU3 X\n                  * xfPMPerfReset in xfRLPMContinuousCounterTable for MMU4 / MMU1002')
xfExtRAUPMInterval24hMSEMax = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 33, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1000, 1000), ValueRangeConstraint(2000, 2000), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfExtRAUPMInterval24hMSEMax.setStatus('current')
if mibBuilder.loadTexts: xfExtRAUPMInterval24hMSEMax.setDescription('Indicate Max MSE level\n                in previous 24 hour interval.\n                Input level = value/10 dB.\n                Domain: [-100.0 ... 100.0 dB]\n                2000 indicates invalid value.\n                The instances are reset by:\n                  * xfTermPerfReset in xfRLPtpTerminalPerformanceTable for MMU2 X / MMU3 X\n                  * xfPMPerfReset in xfRLPMContinuousCounterTable for MMU4 / MMU1002')
xfExtRAUPMInterval24hXPIMin = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 33, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1000, 1000), ValueRangeConstraint(2000, 2000), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfExtRAUPMInterval24hXPIMin.setStatus('current')
if mibBuilder.loadTexts: xfExtRAUPMInterval24hXPIMin.setDescription('Indicate Min Cross-Polar Interference (XPI) level\n                in previous 24 hour interval.\n                Input level = value/10 dB.\n                Domain: [-100.0 ... 100.0 dB]\n                2000 indicates invalid value.\n                The instances are reset by:\n                  * xfTermPerfReset in xfRLPtpTerminalPerformanceTable for MMU2 X / MMU3 X\n                  * xfPMPerfReset in xfRLPMContinuousCounterTable for MMU4 / MMU1002')
xfExtRAUPMInterval24hXPIMax = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 33, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1000, 1000), ValueRangeConstraint(2000, 2000), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfExtRAUPMInterval24hXPIMax.setStatus('current')
if mibBuilder.loadTexts: xfExtRAUPMInterval24hXPIMax.setDescription('Indicate Max Cross-Polar Interference (XPI) level\n                in previous 24 hour interval.\n                Input level = value/10 dB.\n                Domain: [-100.0 ... 100.0 dB]\n                2000 indicates invalid value.\n                The instances are reset by:\n                  * xfTermPerfReset in xfRLPtpTerminalPerformanceTable for MMU2 X / MMU3 X\n                  * xfPMPerfReset in xfRLPMContinuousCounterTable for MMU4 / MMU1002')
xfExtRAUPMInterval24hValidData = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 33, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfExtRAUPMInterval24hValidData.setStatus('current')
if mibBuilder.loadTexts: xfExtRAUPMInterval24hValidData.setDescription('This variable indicates whether the data\n                for this interval is valid.')
xfRLExtRAUPMCurrent15mTable = MibTable((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 34), )
if mibBuilder.loadTexts: xfRLExtRAUPMCurrent15mTable.setStatus('current')
if mibBuilder.loadTexts: xfRLExtRAUPMCurrent15mTable.setDescription('Current 15m Extended RAU PM table.\n                Its index is RF IF ifIndex')
xfRLExtRAUPMCurrent15mEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 34, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: xfRLExtRAUPMCurrent15mEntry.setStatus('current')
if mibBuilder.loadTexts: xfRLExtRAUPMCurrent15mEntry.setDescription('Entry in the xfRLExtRAUPMCurrent15mTable.')
xfExtRAUPMCurrent15mElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 34, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfExtRAUPMCurrent15mElapsedTime.setStatus('current')
if mibBuilder.loadTexts: xfExtRAUPMCurrent15mElapsedTime.setDescription('The number of seconds that have elapsed since the\n                beginning of the current error-measurement period.\n\n                If the current interval exceeds the maximum value,\n                the agent will return the maximum value.\n                ')
xfExtRAUPMCurrent15mMSEMin = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 34, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1000, 1000), ValueRangeConstraint(2000, 2000), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfExtRAUPMCurrent15mMSEMin.setStatus('current')
if mibBuilder.loadTexts: xfExtRAUPMCurrent15mMSEMin.setDescription('Indicate Min MSE level\n                in current 15 mimute interval.\n                Input level = value/10 dB.\n                Domain: [-100.0 ... 100.0 dB]\n                2000 indicates invalid value.\n                The instances are reset by:\n                  * xfTermPerfReset in xfRLPtpTerminalPerformanceTable for MMU2 X / MMU3 X\n                  * xfPMPerfReset in xfRLPMContinuousCounterTable for MMU4 / MMU1002')
xfExtRAUPMCurrent15mMSEMax = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 34, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1000, 1000), ValueRangeConstraint(2000, 2000), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfExtRAUPMCurrent15mMSEMax.setStatus('current')
if mibBuilder.loadTexts: xfExtRAUPMCurrent15mMSEMax.setDescription('Indicate Max MSE level\n                in current 15 mimute interval.\n                Input level = value/10 dB.\n                Domain: [-100.0 ... 100.0 dB]\n                2000 indicates invalid value.\n                The instances are reset by:\n                  * xfTermPerfReset in xfRLPtpTerminalPerformanceTable for MMU2 X / MMU3 X\n                  * xfPMPerfReset in xfRLPMContinuousCounterTable for MMU4 / MMU1002')
xfExtRAUPMCurrent15mXPIMin = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 34, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1000, 1000), ValueRangeConstraint(2000, 2000), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfExtRAUPMCurrent15mXPIMin.setStatus('current')
if mibBuilder.loadTexts: xfExtRAUPMCurrent15mXPIMin.setDescription('Indicate Min Cross-Polar Interference (XPI) level\n                in current 15 mimute interval.\n                Input level = value/10 dB.\n                Domain: [-100.0 ... 100.0 dB]\n                2000 indicates invalid value.\n                The instances are reset by:\n                  * xfTermPerfReset in xfRLPtpTerminalPerformanceTable for MMU2 X / MMU3 X\n                  * xfPMPerfReset in xfRLPMContinuousCounterTable for MMU4 / MMU1002')
xfExtRAUPMCurrent15mXPIMax = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 34, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1000, 1000), ValueRangeConstraint(2000, 2000), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfExtRAUPMCurrent15mXPIMax.setStatus('current')
if mibBuilder.loadTexts: xfExtRAUPMCurrent15mXPIMax.setDescription('Indicate Max Cross-Polar Interference (XPI) level\n                in current 15 mimute interval.\n                Input level = value/10 dB.\n                Domain: [-100.0 ... 100.0 dB]\n                2000 indicates invalid value.\n                The instances are reset by:\n                  * xfTermPerfReset in xfRLPtpTerminalPerformanceTable for MMU2 X / MMU3 X\n                  * xfPMPerfReset in xfRLPMContinuousCounterTable for MMU4 / MMU1002')
xfRLExtRAUPMInterval15mTable = MibTable((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 35), )
if mibBuilder.loadTexts: xfRLExtRAUPMInterval15mTable.setStatus('current')
if mibBuilder.loadTexts: xfRLExtRAUPMInterval15mTable.setDescription('Interval 15 Extended RAU PM table.\n                Its index is RAU IF ifIndex')
xfRLExtRAUPMInterval15mEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 35, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRAUPMInterval15mIntervalNumber"))
if mibBuilder.loadTexts: xfRLExtRAUPMInterval15mEntry.setStatus('current')
if mibBuilder.loadTexts: xfRLExtRAUPMInterval15mEntry.setDescription('Entry in the xfRLExtRAUPMInterval15mTable.')
xfExtRAUPMInterval15mIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 35, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfExtRAUPMInterval15mIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: xfExtRAUPMInterval15mIntervalNumber.setDescription('A number between 1 and 96, which identifies the interval for which\n                the set of statistics is available. The interval identified by 1\n                is the most recently completed 15 minute interval, and the interval\n                identified by N is the interval immediately preceding the one\n                identified by N-1.')
xfExtRAUPMInterval15mMSEMin = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 35, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1000, 1000), ValueRangeConstraint(2000, 2000), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfExtRAUPMInterval15mMSEMin.setStatus('current')
if mibBuilder.loadTexts: xfExtRAUPMInterval15mMSEMin.setDescription('Indicate Min MSE level\n                in previous 15 minute interval.\n                Input level = value/10 dB.\n                Domain: [-100.0 ... 100.0 dB]\n                2000 indicates invalid value.\n                The instances are reset by:\n                  * xfTermPerfReset in xfRLPtpTerminalPerformanceTable for MMU2 X / MMU3 X\n                  * xfPMPerfReset in xfRLPMContinuousCounterTable for MMU4 / MMU1002')
xfExtRAUPMInterval15mMSEMax = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 35, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1000, 1000), ValueRangeConstraint(2000, 2000), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfExtRAUPMInterval15mMSEMax.setStatus('current')
if mibBuilder.loadTexts: xfExtRAUPMInterval15mMSEMax.setDescription('Indicate Max MSE level\n                in previous 15 minute interval.\n                Input level = value/10 dB.\n                Domain: [-100.0 ... 100.0 dB]\n                2000 indicates invalid value.\n                The instances are reset by:\n                  * xfTermPerfReset in xfRLPtpTerminalPerformanceTable for MMU2 X / MMU3 X\n                  * xfPMPerfReset in xfRLPMContinuousCounterTable for MMU4 / MMU1002')
xfExtRAUPMInterval15mXPIMin = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 35, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1000, 1000), ValueRangeConstraint(2000, 2000), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfExtRAUPMInterval15mXPIMin.setStatus('current')
if mibBuilder.loadTexts: xfExtRAUPMInterval15mXPIMin.setDescription('Indicate Min Cross-Polar Interference (XPI) level\n                in previous 15 minute interval.\n                Input level = value/10 dB.\n                Domain: [-100.0 ... 100.0 dB]\n                2000 indicates invalid value.\n                The instances are reset by:\n                  * xfTermPerfReset in xfRLPtpTerminalPerformanceTable for MMU2 X / MMU3 X\n                  * xfPMPerfReset in xfRLPMContinuousCounterTable for MMU4 / MMU1002')
xfExtRAUPMInterval15mXPIMax = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 35, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1000, 1000), ValueRangeConstraint(2000, 2000), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfExtRAUPMInterval15mXPIMax.setStatus('current')
if mibBuilder.loadTexts: xfExtRAUPMInterval15mXPIMax.setDescription('Indicate Max Cross-Polar Interference (XPI) level\n                in previous 15 minute interval.\n                Input level = value/10 dB.\n                Domain: [-100.0 ... 100.0 dB]\n                2000 indicates invalid value.\n                The instances are reset by:\n                  * xfTermPerfReset in xfRLPtpTerminalPerformanceTable for MMU2 X / MMU3 X\n                  * xfPMPerfReset in xfRLPMContinuousCounterTable for MMU4 / MMU1002')
xfExtRAUPMInterval15mValidData = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 1, 35, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfExtRAUPMInterval15mValidData.setStatus('current')
if mibBuilder.loadTexts: xfExtRAUPMInterval15mValidData.setDescription('This variable indicates whether the data\n                for this interval is valid.')
xfRadioLinkPtpTerminalCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 2, 1))
xfRadioLinkPtpTerminalGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 2, 2))
xfRadioLinkPtpTerminalFullCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 2, 1, 1)).setObjects(("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfRadioLinkPtpTerminalCompleteGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xfRadioLinkPtpTerminalFullCompliance = xfRadioLinkPtpTerminalFullCompliance.setStatus('current')
if mibBuilder.loadTexts: xfRadioLinkPtpTerminalFullCompliance.setDescription('The compliance statement for SNMP entities which implement everything.')
xfRadioLinkPtpTerminalCompleteGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 2, 2, 1))
for _xfRadioLinkPtpTerminalCompleteGroup_obj in [[("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermId"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermType"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermProtection"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermCapacity"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermCapacityCapability"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermModulation"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermModulationCapability"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermRestore"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermAlarmSeverity"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermTrapEnable"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermAsPort"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermRemoteIdCheck"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermRemoteId"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermPreset"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermBerAlarmThreshold"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermFadeNotificationTimer"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermEquipmentProtectionIndex"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermSysName"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermChannelMode"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermChannelModeCapability"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermTrafficAndDCN"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermFrameFormat"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermFrameFormatCapability"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermDCNRadioConfiguration"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermDCNRadioCapability"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermDCNLineConfiguration"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermDCNLineCapability"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermFadeNotificationConfiguration"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermLineProtection"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermOutputPowerOperStatus"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermOutputPowerAdminStatus"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermAtpcCapability"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermTimeElapsed"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermCurrentES"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermCurrentSES"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermCurrentBBE"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermCurrentUAS"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermCurrentBB"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermPerfReset"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermTimeElapsedEnRLBExt"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfRLProtectionMode"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfRLProtectionRau1"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfRLProtectionRau2"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfRLActiveTxRadio"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfRLSwitchOverReset"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfRLSwitchRevertiveTx"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfRLProtectionCapability"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfRLTxSwitchOverConfiguration"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfRLLineProtectionStatus"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfRLLineProtectionMode"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfRADIORSAlarms"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfRADIORSPerformanceAlarms"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMSetThreshold15mESs"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMSetThreshold15mSESs"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMSetThreshold15mBBEs"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMResetThreshold15mESs"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMResetThreshold15mSESs"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMResetThreshold15mBBEs"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMSetThreshold24hESs"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMSetThreshold24hSESs"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMSetThreshold24hBBEs"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMView"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMStatus"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMCurrent24hTimeElapsed"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMCurrent24hESs"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMCurrent24hSESs"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMCurrent24hBBEs"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMCurrent24hUASs"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMCurrent24hBBs"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMInterval24hESs"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMInterval24hSESs"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMInterval24hBBEs"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMInterval24hUASs"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMInterval24hBBs"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMInterval24hRLTS1"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMInterval24hRLTS2"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMInterval24hRLMin"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMInterval24hRLMax"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMInterval24hTLTS1"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMInterval24hTLMin"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMInterval24hTLMax"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMInterval24hMSEMin"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMInterval24hMSEMax"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMInterval24hXPIMin"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMInterval24hXPIMax"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMInterval24hValidData"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMCurrent15mElapsedTime"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMCurrent15mESs"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMCurrent15mSESs"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMCurrent15mBBEs"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMCurrent15mUASs"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMCurrent15mBBs"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMInterval15mIntervalNumber"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMInterval15mESs"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMInterval15mSESs"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMInterval15mBBEs"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMInterval15mUASs"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMInterval15mBBs"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMInterval15mRLTS1"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMInterval15mRLTS2"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMInterval15mRLMin"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMInterval15mRLMax"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMInterval15mTLTS1"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMInterval15mTLMin"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMInterval15mTLMax"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMInterval15mMSEMin"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMInterval15mMSEMax"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMInterval15mXPIMin"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMInterval15mXPIMax"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMInterval15mValidData"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermInterfaces"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermInterfacesCapability"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermChannelModeOperStatus"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermXPICRestore"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermTribCapacityActual"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermTribCapacityDesired"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermBitPipeCapacity"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermRowIndex"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermCapabilitiesLastChange"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermActualRowIndex"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermMaxRowIndex"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermAdaptiveManualRowIndex"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermAdaptiveManualMode"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermSpectrumEfficiencyClass"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermSpectrumEfficiencyClassCapability"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermChannelSpacing"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermChannelModulation"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermMaxTribCapacity"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermDCNCapacity"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermValidRow"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermMaxCapacity"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermFrameFormatType"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermFrameFormatRev"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermBerAlarmThresholdCapability"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMSetThreshold15m"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMSetThreshold24h"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMResetThreshold15m"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMStatus"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMValidData"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMCurrent24h4QAM"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMCurrent24h8QAM"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMCurrent24h16QAM"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMCurrent24h32QAM"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMCurrent24h64QAM"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMCurrent24h128QAM"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMCurrent24h256QAM"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMCurrent24h512QAM"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMCurrent24h1024QAM"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMInterval24h4QAM"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMInterval24h8QAM"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMInterval24h16QAM"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMInterval24h32QAM"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMInterval24h64QAM"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMInterval24h128QAM"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMInterval24h256QAM"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMInterval24h512QAM"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMInterval24hValidData"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMInterval24h1024QAM"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMCurrent15m4QAM"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMCurrent15m8QAM"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMCurrent15m16QAM"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMCurrent15m32QAM"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMCurrent15m64QAM"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMCurrent15m128QAM"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMCurrent15m256QAM"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMCurrent15m512QAM"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMCurrent15m1024QAM"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMInterval15mIntervalNumber"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMInterval15m4QAM"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMInterval15m8QAM"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMInterval15m16QAM"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMInterval15m32QAM"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMInterval15m64QAM"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMInterval15m128QAM"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMInterval15m256QAM"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMInterval15m512QAM"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMInterval15mValidData"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMInterval15m1024QAM"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMCurrent24h4QAMEnRLB"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMCurrent24h8QAMEnRLB"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMCurrent24h16QAMEnRLB"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMCurrent24h32QAMEnRLB"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMCurrent24h64QAMEnRLB"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMCurrent24h128QAMEnRLB"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMCurrent24h256QAMEnRLB"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMCurrent24h512QAMEnRLB"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMCurrent24h1024QAMEnRLB"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMInterval24h4QAMEnRLB"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMInterval24h8QAMEnRLB"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMInterval24h16QAMEnRLB"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMInterval24h32QAMEnRLB"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMInterval24h64QAMEnRLB"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMInterval24h128QAMEnRLB"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMInterval24h256QAMEnRLB"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMInterval24h512QAMEnRLB"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMInterval24h1024QAMEnRLB"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMCurrent15m4QAMEnRLB"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMCurrent15m8QAMEnRLB"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMCurrent15m16QAMEnRLB"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMCurrent15m32QAMEnRLB"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMCurrent15m64QAMEnRLB"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMCurrent15m128QAMEnRLB"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMCurrent15m256QAMEnRLB"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMCurrent15m512QAMEnRLB"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMCurrent15m1024QAMEnRLB"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMInterval15m4QAMEnRLB"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMInterval15m8QAMEnRLB"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMInterval15m16QAMEnRLB"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMInterval15m32QAMEnRLB"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMInterval15m64QAMEnRLB"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMInterval15m128QAMEnRLB"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMInterval15m256QAMEnRLB"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMInterval15m512QAMEnRLB"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMAMInterval15m1024QAMEnRLB"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermIpAddress"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermProtectionCapability"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermLineProtectionCapability"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermTribAllocationActual"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermTribAllocationDesired"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermAutoRemoveLoopEnable"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermCapability"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermCapacityLicense"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermCapacityLicenseRange"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermMaxCapacityRange"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermMaxTribCapacityRange"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermFadingRates"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermFadingRatesCapability"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermConfiguredBitPipeCapacity"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermTribCapacityConfigured"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermPacketMaxCapacity"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermPacketMinCapacity"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMSDCGainCurrent15m0005dB"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMSDCGainCurrent15m0510dB"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMSDCGainCurrent15m1015dB"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMSDCGainCurrent15m1520dB"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMSDCGainCurrent15m2025dB"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMSDCGainCurrent15m2530dB"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMSDCGainInterval15mIntervalNumber"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMSDCGainInterval15m0005dB"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMSDCGainInterval15m0510dB"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMSDCGainInterval15m1015dB"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMSDCGainInterval15m1520dB"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMSDCGainInterval15m2025dB"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMSDCGainInterval15m2530dB"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMSDCGainCurrent24h0005dB"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMSDCGainCurrent24h0510dB"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMSDCGainCurrent24h1015dB"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMSDCGainCurrent24h1520dB"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMSDCGainCurrent24h2025dB"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMSDCGainCurrent24h2530dB"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMSDCGainInterval24h0005dB"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMSDCGainInterval24h0510dB"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMSDCGainInterval24h1015dB"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMSDCGainInterval24h1520dB"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMSDCGainInterval24h2025dB")], [("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMSDCGainInterval24h2530dB"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMSDCGainSetThreshold15m"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMSDCGainSetThreshold24h"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMSDCGainResetThreshold15m"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMSDCGainStatus"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMRLTS1Threshold"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMSetThreshold15mRLTS1"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMResetThreshold15mRLTS1"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMRLTS2Threshold"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMSetThreshold15mRLTS2"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMResetThreshold15mRLTS2"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMSetThreshold15mRLTM"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMResetThreshold15mRLTM"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMTLTS1Threshold"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMSetThreshold15mTLTS1"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMResetThreshold15mTLTS1"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMSetThreshold15mTLTM"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMResetThreshold15mTLTM"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMSetThreshold24hRLTS1"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMSetThreshold24hRLTS2"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMSetThreshold24hRLTM"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMSetThreshold24hTLTS1"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMSetThreshold24hTLTM"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMCurrent24hRLTS1"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMCurrent24hRLTS2"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMCurrent24hRLMin"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMCurrent24hRLMax"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMCurrent24hTLTS1"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMCurrent24hTLMin"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMCurrent24hTLMax"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMCurrent24hMSEMin"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMCurrent24hMSEMax"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMCurrent24hXPIMin"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMCurrent24hXPIMax"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMCurrent15mRLTS1"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMCurrent15mRLTS2"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMCurrent15mRLMin"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMCurrent15mRLMax"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMCurrent15mTLTS1"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMCurrent15mTLMin"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMCurrent15mTLMax"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMCurrent15mMSEMin"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMCurrent15mMSEMax"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMCurrent15mXPIMin"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMCurrent15mXPIMax"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMCurrent15mESR"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMCurrent15mSESR"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMCurrent15mBBER"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMCurrent24hESR"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMCurrent24hSESR"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfPMCurrent24hBBER"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRFPMRLTS1Threshold"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRFPMSetThreshold15mRLTS1"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRFPMResetThreshold15mRLTS1"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRFPMRLTS2Threshold"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRFPMSetThreshold15mRLTS2"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRFPMResetThreshold15mRLTS2"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRFPMSetThreshold15mRLTM"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRFPMResetThreshold15mRLTM"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRFPMTLTS1Threshold"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRFPMSetThreshold15mTLTS1"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRFPMResetThreshold15mTLTS1"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRFPMSetThreshold15mTLTM"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRFPMResetThreshold15mTLTM"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRFPMSetThreshold24hRLTS1"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRFPMSetThreshold24hRLTS2"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRFPMSetThreshold24hRLTM"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRFPMSetThreshold24hTLTS1"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRFPMSetThreshold24hTLTM"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRFPMStatus"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRFPMView"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRFPMCurrent24hElapsedTime"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRFPMCurrent24hRLTS1"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRFPMCurrent24hRLTS2"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRFPMCurrent24hRLMin"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRFPMCurrent24hRLMax"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRFPMCurrent24hTLTS1"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRFPMCurrent24hTLMin"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRFPMCurrent24hTLMax"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRFPMInterval24hRLTS1"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRFPMInterval24hRLTS2"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRFPMInterval24hRLMin"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRFPMInterval24hRLMax"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRFPMInterval24hTLTS1"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRFPMInterval24hTLMin"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRFPMInterval24hTLMax"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRFPMInterval24hValidData"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRFPMCurrent15mElapsedTime"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRFPMCurrent15mRLTS1"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRFPMCurrent15mRLTS2"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRFPMCurrent15mRLMin"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRFPMCurrent15mRLMax"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRFPMCurrent15mTLTS1"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRFPMCurrent15mTLMin"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRFPMCurrent15mTLMax"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRFPMInterval15mIntervalNumber"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRFPMInterval15mRLTS1"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRFPMInterval15mRLTS2"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRFPMInterval15mRLMin"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRFPMInterval15mRLMax"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRFPMInterval15mTLTS1"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRFPMInterval15mTLMin"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRFPMInterval15mTLMax"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRFPMInterval15mValidData"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRAUPMCurrent24hElapsedTime"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRAUPMCurrent24hMSEMin"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRAUPMCurrent24hMSEMax"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRAUPMCurrent24hXPIMin"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRAUPMCurrent24hXPIMax"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRAUPMInterval24hMSEMin"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRAUPMInterval24hMSEMax"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRAUPMInterval24hXPIMin"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRAUPMInterval24hXPIMax"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRAUPMInterval24hValidData"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRAUPMCurrent15mElapsedTime"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRAUPMCurrent15mMSEMin"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRAUPMCurrent15mMSEMax"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRAUPMCurrent15mXPIMin"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRAUPMCurrent15mXPIMax"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRAUPMInterval15mIntervalNumber"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRAUPMInterval15mMSEMin"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRAUPMInterval15mMSEMax"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRAUPMInterval15mXPIMin"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRAUPMInterval15mXPIMax"), ("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfExtRAUPMInterval15mValidData")]]:
    if getattr(mibBuilder, 'version', 0) < (4, 4, 2):
        # WARNING: leading objects get lost here!
        xfRadioLinkPtpTerminalCompleteGroup = xfRadioLinkPtpTerminalCompleteGroup.setObjects(*_xfRadioLinkPtpTerminalCompleteGroup_obj)
    else:
        xfRadioLinkPtpTerminalCompleteGroup = xfRadioLinkPtpTerminalCompleteGroup.setObjects(*_xfRadioLinkPtpTerminalCompleteGroup_obj, **dict(append=True))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xfRadioLinkPtpTerminalCompleteGroup = xfRadioLinkPtpTerminalCompleteGroup.setStatus('current')
if mibBuilder.loadTexts: xfRadioLinkPtpTerminalCompleteGroup.setDescription('A collection of all current objects in this MIB module.')
xfRadioLinkPtpTerminalObsoleteGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 193, 81, 3, 4, 1, 2, 2, 2)).setObjects(("XF-RADIOLINK-PTP-TERMINAL-MIB", "xfTermSpectrumEfficiencyClassObsolete"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xfRadioLinkPtpTerminalObsoleteGroup = xfRadioLinkPtpTerminalObsoleteGroup.setStatus('obsolete')
if mibBuilder.loadTexts: xfRadioLinkPtpTerminalObsoleteGroup.setDescription('A collection of all obsolete objects in this MIB module.')
mibBuilder.exportSymbols("XF-RADIOLINK-PTP-TERMINAL-MIB", xfExtRAUPMInterval15mValidData=xfExtRAUPMInterval15mValidData, xfRLPtpTerminalXEntry=xfRLPtpTerminalXEntry, xfPMInterval24hRLMax=xfPMInterval24hRLMax, xfPMSDCGainInterval24h1015dB=xfPMSDCGainInterval24h1015dB, xfPMSDCGainCurrent24h2025dB=xfPMSDCGainCurrent24h2025dB, xfRLExtRAUPMInterval24hEntry=xfRLExtRAUPMInterval24hEntry, xfRADIORSPerformanceAlarms=xfRADIORSPerformanceAlarms, xfTermFadingRatesCapability=xfTermFadingRatesCapability, xfTermFrameFormat=xfTermFrameFormat, xfRLPMAMConfigTable=xfRLPMAMConfigTable, xfPMAMInterval24h32QAMEnRLB=xfPMAMInterval24h32QAMEnRLB, xfRLPMAMInterval15mEntry=xfRLPMAMInterval15mEntry, TermOutputPowerStatus=TermOutputPowerStatus, xfRLExtRFPMCurrent24hEntry=xfRLExtRFPMCurrent24hEntry, xfPMInterval24hBBs=xfPMInterval24hBBs, xfTermTimeElapsed=xfTermTimeElapsed, xfRLPMCurrent15mTable=xfRLPMCurrent15mTable, xfPMAMInterval15m16QAM=xfPMAMInterval15m16QAM, xfPMCurrent15mElapsedTime=xfPMCurrent15mElapsedTime, xfExtRFPMCurrent15mRLTS1=xfExtRFPMCurrent15mRLTS1, xfPMResetThreshold15mTLTS1=xfPMResetThreshold15mTLTS1, xfExtRAUPMInterval24hXPIMin=xfExtRAUPMInterval24hXPIMin, xfTermChannelMode=xfTermChannelMode, xfPMCurrent24hRLMax=xfPMCurrent24hRLMax, xfPMAMInterval15m4QAM=xfPMAMInterval15m4QAM, xfExtRAUPMCurrent15mMSEMin=xfExtRAUPMCurrent15mMSEMin, xfPMAMCurrent15m256QAM=xfPMAMCurrent15m256QAM, xfPMSetThreshold15mTLTS1=xfPMSetThreshold15mTLTS1, xfPMSDCGainInterval24h1520dB=xfPMSDCGainInterval24h1520dB, xfPMRLTS2Threshold=xfPMRLTS2Threshold, xfPMAMCurrent24h128QAMEnRLB=xfPMAMCurrent24h128QAMEnRLB, xfPMAMCurrent15m64QAM=xfPMAMCurrent15m64QAM, xfTermCapability=xfTermCapability, xfExtRFPMCurrent24hRLTS2=xfExtRFPMCurrent24hRLTS2, xfPMCurrent24hRLTS1=xfPMCurrent24hRLTS1, xfTermCapacityCapability=xfTermCapacityCapability, xfExtRAUPMCurrent15mElapsedTime=xfExtRAUPMCurrent15mElapsedTime, xfPMResetThreshold15mRLTS1=xfPMResetThreshold15mRLTS1, PYSNMP_MODULE_ID=xfRadioLinkPtpTerminalMIB, xfExtRFPMInterval15mTLMin=xfExtRFPMInterval15mTLMin, xfPMInterval24hMSEMin=xfPMInterval24hMSEMin, xfPMCurrent15mRLTS1=xfPMCurrent15mRLTS1, xfRLPMConfigTable=xfRLPMConfigTable, xfRLExtRFPMCurrent24hTable=xfRLExtRFPMCurrent24hTable, xfPMCurrent24hMSEMin=xfPMCurrent24hMSEMin, xfPMSetThreshold15mRLTM=xfPMSetThreshold15mRLTM, xfTermSpectrumEfficiencyClass=xfTermSpectrumEfficiencyClass, xfRLLineProtectionTable=xfRLLineProtectionTable, xfTermMaxRowIndex=xfTermMaxRowIndex, xfExtRFPMResetThreshold15mTLTM=xfExtRFPMResetThreshold15mTLTM, xfExtRFPMCurrent24hTLTS1=xfExtRFPMCurrent24hTLTS1, xfPMAMCurrent24h4QAM=xfPMAMCurrent24h4QAM, xfExtRAUPMCurrent15mXPIMin=xfExtRAUPMCurrent15mXPIMin, xfTermCurrentBB=xfTermCurrentBB, xfTermDCNRadioConfiguration=xfTermDCNRadioConfiguration, xfTermProtection=xfTermProtection, xfTermCurrentSES=xfTermCurrentSES, xfTermRowIndex=xfTermRowIndex, xfPMInterval15mTLTS1=xfPMInterval15mTLTS1, xfPMCurrent24hBBEs=xfPMCurrent24hBBEs, TermRauSec=TermRauSec, xfTermOutputPowerOperStatus=xfTermOutputPowerOperStatus, xfRLPMAMInterval24hEntry=xfRLPMAMInterval24hEntry, xfExtRFPMCurrent24hTLMax=xfExtRFPMCurrent24hTLMax, xfRLPtpTerminalTable=xfRLPtpTerminalTable, xfExtRFPMCurrent24hElapsedTime=xfExtRFPMCurrent24hElapsedTime, xfPMCurrent24hXPIMin=xfPMCurrent24hXPIMin, xfPMAMCurrent15m128QAM=xfPMAMCurrent15m128QAM, xfRLProtectionMode=xfRLProtectionMode, xfPMSDCGainInterval15m0510dB=xfPMSDCGainInterval15m0510dB, xfPMSDCGainResetThreshold15m=xfPMSDCGainResetThreshold15m, xfPMSetThreshold15mESs=xfPMSetThreshold15mESs, xfPMAMCurrent24h1024QAM=xfPMAMCurrent24h1024QAM, xfTermDCNLineCapability=xfTermDCNLineCapability, xfRLSwitchOverReset=xfRLSwitchOverReset, xfPMAMInterval24hValidData=xfPMAMInterval24hValidData, xfPMSDCGainCurrent24h0510dB=xfPMSDCGainCurrent24h0510dB, xfTermPerfReset=xfTermPerfReset, xfExtRFPMSetThreshold24hRLTS1=xfExtRFPMSetThreshold24hRLTS1, xfExtRAUPMInterval15mXPIMin=xfExtRAUPMInterval15mXPIMin, xfPMInterval15mRLTS1=xfPMInterval15mRLTS1, xfRLExtRAUPMInterval15mEntry=xfRLExtRAUPMInterval15mEntry, xfPMAMCurrent15m4QAMEnRLB=xfPMAMCurrent15m4QAMEnRLB, xfRLPMAMCurrent15mTable=xfRLPMAMCurrent15mTable, xfRLPMSDCGainConfigEntry=xfRLPMSDCGainConfigEntry, xfRLPMSDCGainInterval15mEntry=xfRLPMSDCGainInterval15mEntry, xfTermRemoteIdCheck=xfTermRemoteIdCheck, xfPMAMInterval24h8QAMEnRLB=xfPMAMInterval24h8QAMEnRLB, xfPMCurrent15mSESs=xfPMCurrent15mSESs, xfTermFadeNotificationConfiguration=xfTermFadeNotificationConfiguration, xfTermAdaptiveManualRowIndex=xfTermAdaptiveManualRowIndex, xfPMAMInterval24h512QAM=xfPMAMInterval24h512QAM, xfRLProtectionEntry=xfRLProtectionEntry, xfTermId=xfTermId, xfExtRFPMInterval24hTLMax=xfExtRFPMInterval24hTLMax, xfPMInterval24hMSEMax=xfPMInterval24hMSEMax, xfRLPtpTerminalOutputPowerEntry=xfRLPtpTerminalOutputPowerEntry, xfPMInterval24hSESs=xfPMInterval24hSESs, xfRadioLinkPtpTerminalObjects=xfRadioLinkPtpTerminalObjects, xfPMCurrent15mMSEMin=xfPMCurrent15mMSEMin, xfPMInterval24hESs=xfPMInterval24hESs, xfRLPtpTerminalPerformanceEntry=xfRLPtpTerminalPerformanceEntry, xfPMInterval24hXPIMax=xfPMInterval24hXPIMax, xfPMSDCGainInterval24h2025dB=xfPMSDCGainInterval24h2025dB, xfTermTribAllocationActual=xfTermTribAllocationActual, ChannelMode=ChannelMode, xfExtRFPMCurrent15mRLTS2=xfExtRFPMCurrent15mRLTS2, xfPMAMInterval24h32QAM=xfPMAMInterval24h32QAM, xfPMInterval15mXPIMin=xfPMInterval15mXPIMin, xfPMInterval24hXPIMin=xfPMInterval24hXPIMin, xfPMInterval15mRLMax=xfPMInterval15mRLMax, xfPMAMInterval24h64QAM=xfPMAMInterval24h64QAM, xfPMAMCurrent15m32QAMEnRLB=xfPMAMCurrent15m32QAMEnRLB, xfPMAMValidData=xfPMAMValidData, xfPMCurrent24hESs=xfPMCurrent24hESs, xfRLProtectionTable=xfRLProtectionTable, xfRLExtRFPMInterval15mTable=xfRLExtRFPMInterval15mTable, xfExtRFPMInterval24hRLMin=xfExtRFPMInterval24hRLMin, xfPMSDCGainStatus=xfPMSDCGainStatus, xfRLExtRAUPMInterval15mTable=xfRLExtRAUPMInterval15mTable, xfPMAMInterval24h256QAMEnRLB=xfPMAMInterval24h256QAMEnRLB, xfTermDCNLineConfiguration=xfTermDCNLineConfiguration, xfExtRFPMInterval24hRLTS2=xfExtRFPMInterval24hRLTS2, xfExtRFPMSetThreshold15mTLTS1=xfExtRFPMSetThreshold15mTLTS1, xfPMCurrent15mESR=xfPMCurrent15mESR, xfPMSetThreshold24hBBEs=xfPMSetThreshold24hBBEs, xfRADIORSTable=xfRADIORSTable, xfExtRFPMInterval15mValidData=xfExtRFPMInterval15mValidData, xfExtRFPMSetThreshold15mRLTS1=xfExtRFPMSetThreshold15mRLTS1, xfRLPtpTerminalEntry=xfRLPtpTerminalEntry, xfRLExtRFPMInterval15mEntry=xfRLExtRFPMInterval15mEntry, xfPMCurrent15mBBEs=xfPMCurrent15mBBEs, xfPMAMInterval24h128QAM=xfPMAMInterval24h128QAM, xfExtRFPMInterval15mRLMin=xfExtRFPMInterval15mRLMin, xfPMInterval24hBBEs=xfPMInterval24hBBEs, xfExtRFPMStatus=xfExtRFPMStatus, xfPMResetThreshold15mRLTM=xfPMResetThreshold15mRLTM, xfTermValidRow=xfTermValidRow, xfRLPMAMCurrent24hEntry=xfRLPMAMCurrent24hEntry, xfExtRAUPMInterval15mIntervalNumber=xfExtRAUPMInterval15mIntervalNumber, xfExtRFPMInterval24hTLMin=xfExtRFPMInterval24hTLMin, xfPMAMInterval24h16QAMEnRLB=xfPMAMInterval24h16QAMEnRLB, xfExtRFPMRLTS1Threshold=xfExtRFPMRLTS1Threshold, xfTermInterfaces=xfTermInterfaces, xfPMCurrent24hTLMax=xfPMCurrent24hTLMax, xfPMAMInterval24h64QAMEnRLB=xfPMAMInterval24h64QAMEnRLB, xfExtRFPMCurrent15mTLMax=xfExtRFPMCurrent15mTLMax, xfExtRAUPMCurrent15mMSEMax=xfExtRAUPMCurrent15mMSEMax, xfExtRAUPMInterval15mXPIMax=xfExtRAUPMInterval15mXPIMax, xfRLPMAMInterval24hTable=xfRLPMAMInterval24hTable, xfExtRAUPMCurrent24hXPIMin=xfExtRAUPMCurrent24hXPIMin, xfPMCurrent24hUASs=xfPMCurrent24hUASs, xfPMSDCGainInterval24h2530dB=xfPMSDCGainInterval24h2530dB, xfPMAMInterval15m64QAMEnRLB=xfPMAMInterval15m64QAMEnRLB, xfPMInterval15mRLMin=xfPMInterval15mRLMin, xfExtRFPMTLTS1Threshold=xfExtRFPMTLTS1Threshold, xfTermTribCapacityActual=xfTermTribCapacityActual, xfExtRAUPMInterval24hMSEMin=xfExtRAUPMInterval24hMSEMin, xfPMAMInterval15mValidData=xfPMAMInterval15mValidData, xfExtRFPMResetThreshold15mRLTS1=xfExtRFPMResetThreshold15mRLTS1, xfRLLineProtectionMode=xfRLLineProtectionMode, xfPMCurrent15mBBER=xfPMCurrent15mBBER, xfExtRAUPMInterval24hValidData=xfExtRAUPMInterval24hValidData, xfExtRFPMInterval15mTLTS1=xfExtRFPMInterval15mTLTS1, xfPMInterval15mTLMin=xfPMInterval15mTLMin, xfRLExtRFPMConfigEntry=xfRLExtRFPMConfigEntry, xfPMCurrent24hXPIMax=xfPMCurrent24hXPIMax, xfPMAMCurrent24h32QAMEnRLB=xfPMAMCurrent24h32QAMEnRLB, xfPMCurrent24hSESs=xfPMCurrent24hSESs, xfExtRFPMInterval15mIntervalNumber=xfExtRFPMInterval15mIntervalNumber, xfPMCurrent24hESR=xfPMCurrent24hESR, xfTermProtectionCapability=xfTermProtectionCapability, xfPMCurrent24hBBs=xfPMCurrent24hBBs, xfPMInterval15mXPIMax=xfPMInterval15mXPIMax, xfRLSwitchRevertiveTx=xfRLSwitchRevertiveTx, xfPMCurrent24hSESR=xfPMCurrent24hSESR, xfPMSDCGainSetThreshold15m=xfPMSDCGainSetThreshold15m, xfRlPtpTerminalCapabilityTable=xfRlPtpTerminalCapabilityTable, xfPMInterval24hRLMin=xfPMInterval24hRLMin, xfPMAMCurrent24h8QAM=xfPMAMCurrent24h8QAM, xfExtRFPMResetThreshold15mRLTM=xfExtRFPMResetThreshold15mRLTM, xfRLPtpTerminalCapacityLicenseTable=xfRLPtpTerminalCapacityLicenseTable, xfPMAMInterval15m8QAM=xfPMAMInterval15m8QAM, xfPMSDCGainInterval24h0005dB=xfPMSDCGainInterval24h0005dB, xfPMAMInterval15m16QAMEnRLB=xfPMAMInterval15m16QAMEnRLB, xfExtRFPMCurrent15mRLMax=xfExtRFPMCurrent15mRLMax, xfRLExtRAUPMCurrent24hTable=xfRLExtRAUPMCurrent24hTable, xfRLPMInterval24hEntry=xfRLPMInterval24hEntry, xfExtRFPMSetThreshold24hRLTS2=xfExtRFPMSetThreshold24hRLTS2, xfRadioLinkPtpTerminalCompleteGroup=xfRadioLinkPtpTerminalCompleteGroup, xfTermType=xfTermType, xfPMAMInterval15m32QAM=xfPMAMInterval15m32QAM, xfTermInterfacesCapability=xfTermInterfacesCapability, xfPMAMCurrent24h4QAMEnRLB=xfPMAMCurrent24h4QAMEnRLB, xfRLExtRFPMInterval24hEntry=xfRLExtRFPMInterval24hEntry, xfTermCapacityLicense=xfTermCapacityLicense, xfPMAMInterval15m512QAMEnRLB=xfPMAMInterval15m512QAMEnRLB, xfPMAMCurrent24h16QAMEnRLB=xfPMAMCurrent24h16QAMEnRLB, xfRLProtectionRau2=xfRLProtectionRau2, xfPMSDCGainCurrent15m2530dB=xfPMSDCGainCurrent15m2530dB, xfPMAMInterval15m256QAMEnRLB=xfPMAMInterval15m256QAMEnRLB, xfRADIORSEntry=xfRADIORSEntry, xfRLPMInterval15mEntry=xfRLPMInterval15mEntry, TermModulation=TermModulation, xfPMAMCurrent15m16QAMEnRLB=xfPMAMCurrent15m16QAMEnRLB, xfPMSDCGainCurrent15m2025dB=xfPMSDCGainCurrent15m2025dB, xfTermActualRowIndex=xfTermActualRowIndex, xfPMInterval24hTLTS1=xfPMInterval24hTLTS1, TermAdaptiveManualMode=TermAdaptiveManualMode, xfTermPacketMaxCapacity=xfTermPacketMaxCapacity, xfTermDCNCapacity=xfTermDCNCapacity, TermAutoRemoveLoopEnable=TermAutoRemoveLoopEnable, xfExtRFPMInterval15mRLTS2=xfExtRFPMInterval15mRLTS2, xfRLPtpTerminalXTable=xfRLPtpTerminalXTable, xfExtRFPMSetThreshold24hTLTM=xfExtRFPMSetThreshold24hTLTM, xfPMAMCurrent15m8QAMEnRLB=xfPMAMCurrent15m8QAMEnRLB, xfTermAlarmSeverity=xfTermAlarmSeverity, xfPMCurrent15mRLMax=xfPMCurrent15mRLMax, xfTermOutputPowerAdminStatus=xfTermOutputPowerAdminStatus, xfPMInterval15mIntervalNumber=xfPMInterval15mIntervalNumber, xfTermBerAlarmThresholdCapability=xfTermBerAlarmThresholdCapability, xfPMRLTS1Threshold=xfPMRLTS1Threshold, xfPMSetThreshold24hESs=xfPMSetThreshold24hESs, xfExtRFPMSetThreshold15mRLTS2=xfExtRFPMSetThreshold15mRLTS2, xfRLPtpTerminalCapacityLicenseEntry=xfRLPtpTerminalCapacityLicenseEntry, xfPMCurrent15mRLMin=xfPMCurrent15mRLMin, xfPMSetThreshold15mTLTM=xfPMSetThreshold15mTLTM, xfPMSetThreshold24hRLTS1=xfPMSetThreshold24hRLTS1, xfRLExtRFPMInterval24hTable=xfRLExtRFPMInterval24hTable, xfPMSDCGainInterval15mIntervalNumber=xfPMSDCGainInterval15mIntervalNumber, xfRLPMInterval24hTable=xfRLPMInterval24hTable, xfPMAMCurrent15m128QAMEnRLB=xfPMAMCurrent15m128QAMEnRLB, xfPMAMCurrent24h256QAM=xfPMAMCurrent24h256QAM, xfPMInterval15mMSEMin=xfPMInterval15mMSEMin, xfRLPMSDCGainInterval24hEntry=xfRLPMSDCGainInterval24hEntry, xfRLExtRAUPMInterval24hTable=xfRLExtRAUPMInterval24hTable, xfRadioLinkPtpTerminalConformance=xfRadioLinkPtpTerminalConformance, xfTermTribAllocationDesired=xfTermTribAllocationDesired, xfPMCurrent24hRLMin=xfPMCurrent24hRLMin, xfPMAMCurrent15m64QAMEnRLB=xfPMAMCurrent15m64QAMEnRLB, xfPMResetThreshold15mESs=xfPMResetThreshold15mESs, xfPMSetThreshold15mBBEs=xfPMSetThreshold15mBBEs, xfPMSetThreshold24hSESs=xfPMSetThreshold24hSESs, xfTermAsPort=xfTermAsPort, xfTermCurrentUAS=xfTermCurrentUAS, xfPMAMInterval24h4QAMEnRLB=xfPMAMInterval24h4QAMEnRLB, xfExtRAUPMInterval24hMSEMax=xfExtRAUPMInterval24hMSEMax, xfExtRFPMSetThreshold24hTLTS1=xfExtRFPMSetThreshold24hTLTS1, xfRlPtpTerminalCapabilityEntry=xfRlPtpTerminalCapabilityEntry, xfPMAMCurrent24h512QAMEnRLB=xfPMAMCurrent24h512QAMEnRLB, xfPMCurrent24hTimeElapsed=xfPMCurrent24hTimeElapsed, xfExtRFPMCurrent24hRLMin=xfExtRFPMCurrent24hRLMin, xfPMCurrent24hBBER=xfPMCurrent24hBBER, xfExtRFPMCurrent24hRLTS1=xfExtRFPMCurrent24hRLTS1)
mibBuilder.exportSymbols("XF-RADIOLINK-PTP-TERMINAL-MIB", xfPMSDCGainInterval15m1520dB=xfPMSDCGainInterval15m1520dB, xfPMStatus=xfPMStatus, xfPMCurrent15mESs=xfPMCurrent15mESs, xfPMCurrent15mUASs=xfPMCurrent15mUASs, xfPMAMCurrent15m1024QAMEnRLB=xfPMAMCurrent15m1024QAMEnRLB, xfExtRFPMResetThreshold15mTLTS1=xfExtRFPMResetThreshold15mTLTS1, xfTermPacketMinCapacity=xfTermPacketMinCapacity, xfPMCurrent15mSESR=xfPMCurrent15mSESR, xfTermBitPipeCapacity=xfTermBitPipeCapacity, xfPMAMCurrent24h8QAMEnRLB=xfPMAMCurrent24h8QAMEnRLB, xfTermChannelModeOperStatus=xfTermChannelModeOperStatus, xfRLPMSDCGainInterval24hTable=xfRLPMSDCGainInterval24hTable, xfRLExtRFPMCurrent15mTable=xfRLExtRFPMCurrent15mTable, xfPMAMInterval15mIntervalNumber=xfPMAMInterval15mIntervalNumber, xfRLPMAMInterval15mTable=xfRLPMAMInterval15mTable, xfPMAMCurrent24h16QAM=xfPMAMCurrent24h16QAM, xfPMInterval15mBBEs=xfPMInterval15mBBEs, xfPMAMInterval15m256QAM=xfPMAMInterval15m256QAM, xfPMSDCGainInterval15m1015dB=xfPMSDCGainInterval15m1015dB, xfTermMaxTribCapacity=xfTermMaxTribCapacity, xfRADIORSPerformanceEntry=xfRADIORSPerformanceEntry, xfPMAMInterval24h256QAM=xfPMAMInterval24h256QAM, xfTermPreset=xfTermPreset, xfRLPMAMCurrent15mEntry=xfRLPMAMCurrent15mEntry, xfRLLineProtectionEntry=xfRLLineProtectionEntry, xfTermTrapEnable=xfTermTrapEnable, xfTermEquipmentProtectionIndex=xfTermEquipmentProtectionIndex, xfRLPMSDCGainCurrent15mEntry=xfRLPMSDCGainCurrent15mEntry, xfTermChannelSpacing=xfTermChannelSpacing, xfPMCurrent15mMSEMax=xfPMCurrent15mMSEMax, xfPMCurrent15mBBs=xfPMCurrent15mBBs, xfPMResetThreshold15mRLTS2=xfPMResetThreshold15mRLTS2, xfPMInterval24hTLMin=xfPMInterval24hTLMin, xfPMSetThreshold24hRLTS2=xfPMSetThreshold24hRLTS2, xfExtRFPMRLTS2Threshold=xfExtRFPMRLTS2Threshold, xfTermTimeElapsedEnRLBExt=xfTermTimeElapsedEnRLBExt, xfExtRFPMSetThreshold15mTLTM=xfExtRFPMSetThreshold15mTLTM, xfExtRAUPMCurrent24hMSEMax=xfExtRAUPMCurrent24hMSEMax, xfPMResetThreshold15mTLTM=xfPMResetThreshold15mTLTM, xfExtRFPMCurrent24hTLMin=xfExtRFPMCurrent24hTLMin, xfExtRFPMSetThreshold24hRLTM=xfExtRFPMSetThreshold24hRLTM, xfPMSDCGainInterval15m2025dB=xfPMSDCGainInterval15m2025dB, xfPMSDCGainCurrent24h1015dB=xfPMSDCGainCurrent24h1015dB, xfPMSDCGainCurrent15m1015dB=xfPMSDCGainCurrent15m1015dB, xfExtRAUPMInterval24hXPIMax=xfExtRAUPMInterval24hXPIMax, xfPMSetThreshold15mSESs=xfPMSetThreshold15mSESs, xfTermIpAddress=xfTermIpAddress, xfPMAMInterval15m128QAMEnRLB=xfPMAMInterval15m128QAMEnRLB, xfExtRAUPMCurrent15mXPIMax=xfExtRAUPMCurrent15mXPIMax, xfPMAMResetThreshold15m=xfPMAMResetThreshold15m, xfTermModulationCapability=xfTermModulationCapability, xfPMSDCGainCurrent24h0005dB=xfPMSDCGainCurrent24h0005dB, xfTermRemoteId=xfTermRemoteId, xfPMCurrent24hTLTS1=xfPMCurrent24hTLTS1, xfExtRFPMSetThreshold15mRLTM=xfExtRFPMSetThreshold15mRLTM, xfRLPtpTerminalOutputPowerTable=xfRLPtpTerminalOutputPowerTable, xfExtRAUPMCurrent24hMSEMin=xfExtRAUPMCurrent24hMSEMin, xfTermCapacity=xfTermCapacity, xfTermLineProtection=xfTermLineProtection, xfTermTrafficAndDCN=xfTermTrafficAndDCN, xfRLPMConfigEntry=xfRLPMConfigEntry, xfTermLineProtectionCapability=xfTermLineProtectionCapability, xfPMSDCGainInterval24h0510dB=xfPMSDCGainInterval24h0510dB, xfPMAMCurrent24h64QAMEnRLB=xfPMAMCurrent24h64QAMEnRLB, xfPMInterval24hUASs=xfPMInterval24hUASs, xfTermConfiguredBitPipeCapacity=xfTermConfiguredBitPipeCapacity, xfPMAMInterval15m1024QAM=xfPMAMInterval15m1024QAM, xfPMInterval15mSESs=xfPMInterval15mSESs, xfPMAMCurrent15m256QAMEnRLB=xfPMAMCurrent15m256QAMEnRLB, xfTermSpectrumEfficiencyClassCapability=xfTermSpectrumEfficiencyClassCapability, xfPMAMCurrent24h128QAM=xfPMAMCurrent24h128QAM, xfPMSDCGainCurrent24h2530dB=xfPMSDCGainCurrent24h2530dB, xfTermTribCapacityDesired=xfTermTribCapacityDesired, xfRadioLinkPtpTerminalFullCompliance=xfRadioLinkPtpTerminalFullCompliance, xfPMSDCGainCurrent15m1520dB=xfPMSDCGainCurrent15m1520dB, xfRLPtpTerminalPerformanceTable=xfRLPtpTerminalPerformanceTable, xfRLExtRAUPMCurrent15mTable=xfRLExtRAUPMCurrent15mTable, xfRadioLinkPtpTerminalCompliances=xfRadioLinkPtpTerminalCompliances, xfPMInterval24hTLMax=xfPMInterval24hTLMax, xfExtRFPMCurrent15mTLTS1=xfExtRFPMCurrent15mTLTS1, xfPMAMInterval15m8QAMEnRLB=xfPMAMInterval15m8QAMEnRLB, xfPMAMInterval15m512QAM=xfPMAMInterval15m512QAM, xfPMResetThreshold15mSESs=xfPMResetThreshold15mSESs, xfTermMaxTribCapacityRange=xfTermMaxTribCapacityRange, xfPMCurrent15mXPIMax=xfPMCurrent15mXPIMax, xfExtRFPMInterval24hTLTS1=xfExtRFPMInterval24hTLTS1, xfPMAMInterval15m128QAM=xfPMAMInterval15m128QAM, xfPMAMCurrent24h256QAMEnRLB=xfPMAMCurrent24h256QAMEnRLB, xfTermChannelModeCapability=xfTermChannelModeCapability, xfExtRFPMInterval24hValidData=xfExtRFPMInterval24hValidData, xfPMAMInterval24h1024QAM=xfPMAMInterval24h1024QAM, xfExtRAUPMCurrent24hXPIMax=xfExtRAUPMCurrent24hXPIMax, xfPMAMInterval15m32QAMEnRLB=xfPMAMInterval15m32QAMEnRLB, xfTermFrameFormatType=xfTermFrameFormatType, xfPMSDCGainInterval15m0005dB=xfPMSDCGainInterval15m0005dB, xfTermChannelModulation=xfTermChannelModulation, xfExtRAUPMInterval15mMSEMax=xfExtRAUPMInterval15mMSEMax, xfPMAMCurrent24h32QAM=xfPMAMCurrent24h32QAM, xfExtRFPMCurrent15mTLMin=xfExtRFPMCurrent15mTLMin, xfTermBerAlarmThreshold=xfTermBerAlarmThreshold, xfPMInterval15mMSEMax=xfPMInterval15mMSEMax, xfTermCurrentBBE=xfTermCurrentBBE, xfExtRFPMCurrent15mElapsedTime=xfExtRFPMCurrent15mElapsedTime, xfExtRFPMInterval24hRLTS1=xfExtRFPMInterval24hRLTS1, xfTermMaxCapacity=xfTermMaxCapacity, xfPMAMInterval15m4QAMEnRLB=xfPMAMInterval15m4QAMEnRLB, xfPMSDCGainCurrent15m0005dB=xfPMSDCGainCurrent15m0005dB, xfRLExtRAUPMCurrent15mEntry=xfRLExtRAUPMCurrent15mEntry, xfPMCurrent15mTLMin=xfPMCurrent15mTLMin, xfPMAMCurrent24h1024QAMEnRLB=xfPMAMCurrent24h1024QAMEnRLB, xfExtRAUPMCurrent24hElapsedTime=xfExtRAUPMCurrent24hElapsedTime, xfPMInterval15mValidData=xfPMInterval15mValidData, xfRadioLinkPtpTerminalObsoleteGroup=xfRadioLinkPtpTerminalObsoleteGroup, xfPMTLTS1Threshold=xfPMTLTS1Threshold, xfPMInterval15mBBs=xfPMInterval15mBBs, xfRLPMCurrent15mEntry=xfRLPMCurrent15mEntry, xfExtRFPMInterval15mTLMax=xfExtRFPMInterval15mTLMax, xfPMCurrent15mRLTS2=xfPMCurrent15mRLTS2, xfRLPMCurrent24hTable=xfRLPMCurrent24hTable, xfPMInterval24hRLTS2=xfPMInterval24hRLTS2, xfRLExtRFPMConfigTable=xfRLExtRFPMConfigTable, xfRADIORSAlarms=xfRADIORSAlarms, xfRADIORSPerformanceTable=xfRADIORSPerformanceTable, xfTermCapacityLicenseRange=xfTermCapacityLicenseRange, xfTermMaxCapacityRange=xfTermMaxCapacityRange, xfPMAMInterval24h4QAM=xfPMAMInterval24h4QAM, xfTermSpectrumEfficiencyClassObsolete=xfTermSpectrumEfficiencyClassObsolete, xfPMAMSetThreshold15m=xfPMAMSetThreshold15m, xfPMCurrent15mXPIMin=xfPMCurrent15mXPIMin, xfPMAMInterval15m64QAM=xfPMAMInterval15m64QAM, xfPMAMSetThreshold24h=xfPMAMSetThreshold24h, xfRLPMSDCGainInterval15mTable=xfRLPMSDCGainInterval15mTable, xfPMSDCGainInterval15m2530dB=xfPMSDCGainInterval15m2530dB, xfPMAMInterval15m1024QAMEnRLB=xfPMAMInterval15m1024QAMEnRLB, xfPMSDCGainCurrent24h1520dB=xfPMSDCGainCurrent24h1520dB, xfRLExtRFPMCurrent15mEntry=xfRLExtRFPMCurrent15mEntry, xfPMSetThreshold15mRLTS1=xfPMSetThreshold15mRLTS1, xfPMInterval15mUASs=xfPMInterval15mUASs, xfPMSetThreshold24hTLTM=xfPMSetThreshold24hTLTM, xfPMAMCurrent15m4QAM=xfPMAMCurrent15m4QAM, xfPMInterval15mRLTS2=xfPMInterval15mRLTS2, xfTermAdaptiveManualMode=xfTermAdaptiveManualMode, xfPMAMInterval24h8QAM=xfPMAMInterval24h8QAM, xfTermAtpcCapability=xfTermAtpcCapability, xfPMCurrent15mTLTS1=xfPMCurrent15mTLTS1, xfRLLineProtectionStatus=xfRLLineProtectionStatus, xfPMSDCGainSetThreshold24h=xfPMSDCGainSetThreshold24h, xfRLPMAMCurrent24hTable=xfRLPMAMCurrent24hTable, xfPMAMInterval24h16QAM=xfPMAMInterval24h16QAM, xfPMAMCurrent15m8QAM=xfPMAMCurrent15m8QAM, xfPMInterval24hValidData=xfPMInterval24hValidData, xfPMView=xfPMView, xfTermSysName=xfTermSysName, xfRLActiveTxRadio=xfRLActiveTxRadio, xfRLPMAMConfigEntry=xfRLPMAMConfigEntry, xfPMCurrent24hMSEMax=xfPMCurrent24hMSEMax, xfTermCapabilitiesLastChange=xfTermCapabilitiesLastChange, xfPMAMCurrent24h64QAM=xfPMAMCurrent24h64QAM, xfPMAMCurrent15m16QAM=xfPMAMCurrent15m16QAM, xfPMAMCurrent15m512QAM=xfPMAMCurrent15m512QAM, xfRLPMSDCGainCurrent24hTable=xfRLPMSDCGainCurrent24hTable, xfRLPMSDCGainCurrent15mTable=xfRLPMSDCGainCurrent15mTable, xfTermFadingRates=xfTermFadingRates, xfTermAutoRemoveLoopEnable=xfTermAutoRemoveLoopEnable, xfPMInterval15mESs=xfPMInterval15mESs, xfExtRFPMInterval15mRLMax=xfExtRFPMInterval15mRLMax, xfExtRFPMCurrent24hRLMax=xfExtRFPMCurrent24hRLMax, xfPMSetThreshold24hTLTS1=xfPMSetThreshold24hTLTS1, xfExtRFPMInterval24hRLMax=xfExtRFPMInterval24hRLMax, xfExtRFPMResetThreshold15mRLTS2=xfExtRFPMResetThreshold15mRLTS2, xfTermCurrentES=xfTermCurrentES, xfRadioLinkPtpTerminalMIB=xfRadioLinkPtpTerminalMIB, xfRLExtRAUPMCurrent24hEntry=xfRLExtRAUPMCurrent24hEntry, xfTermModulation=xfTermModulation, xfPMAMCurrent15m32QAM=xfPMAMCurrent15m32QAM, xfRLPMSDCGainCurrent24hEntry=xfRLPMSDCGainCurrent24hEntry, xfRadioLinkPtpTerminalGroups=xfRadioLinkPtpTerminalGroups, xfRLProtectionRau1=xfRLProtectionRau1, xfExtRAUPMInterval15mMSEMin=xfExtRAUPMInterval15mMSEMin, xfPMAMCurrent15m512QAMEnRLB=xfPMAMCurrent15m512QAMEnRLB, xfTermDCNRadioCapability=xfTermDCNRadioCapability, xfTermRestore=xfTermRestore, xfPMAMInterval24h512QAMEnRLB=xfPMAMInterval24h512QAMEnRLB, xfTermFrameFormatRev=xfTermFrameFormatRev, xfPMAMInterval24h1024QAMEnRLB=xfPMAMInterval24h1024QAMEnRLB, xfExtRFPMInterval15mRLTS1=xfExtRFPMInterval15mRLTS1, xfPMInterval24hRLTS1=xfPMInterval24hRLTS1, xfTermFrameFormatCapability=xfTermFrameFormatCapability, xfPMResetThreshold15mBBEs=xfPMResetThreshold15mBBEs, xfTermFadeNotificationTimer=xfTermFadeNotificationTimer, xfPMCurrent24hTLMin=xfPMCurrent24hTLMin, xfRLPMSDCGainConfigTable=xfRLPMSDCGainConfigTable, xfPMCurrent15mTLMax=xfPMCurrent15mTLMax, xfPMSetThreshold24hRLTM=xfPMSetThreshold24hRLTM, xfRLPMInterval15mTable=xfRLPMInterval15mTable, xfPMSetThreshold15mRLTS2=xfPMSetThreshold15mRLTS2, xfRLTxSwitchOverConfiguration=xfRLTxSwitchOverConfiguration, xfPMAMInterval24h128QAMEnRLB=xfPMAMInterval24h128QAMEnRLB, xfPMInterval15mTLMax=xfPMInterval15mTLMax, xfPMAMCurrent24h512QAM=xfPMAMCurrent24h512QAM, xfPMAMStatus=xfPMAMStatus, xfRLPMCurrent24hEntry=xfRLPMCurrent24hEntry, xfPMAMCurrent15m1024QAM=xfPMAMCurrent15m1024QAM, xfRLProtectionCapability=xfRLProtectionCapability, xfTermTribCapacityConfigured=xfTermTribCapacityConfigured, xfExtRFPMCurrent15mRLMin=xfExtRFPMCurrent15mRLMin, xfExtRFPMView=xfExtRFPMView, xfPMSDCGainCurrent15m0510dB=xfPMSDCGainCurrent15m0510dB, xfTermXPICRestore=xfTermXPICRestore, xfPMCurrent24hRLTS2=xfPMCurrent24hRLTS2)
