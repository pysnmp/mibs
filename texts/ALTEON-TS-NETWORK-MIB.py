#
# PySNMP MIB module ALTEON-TS-NETWORK-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/alteonos/ALTEON-TS-NETWORK-MIB
# Produced by pysmi-1.1.12 at Wed May 29 06:41:27 2024
# On host fv-az1019-850 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
switch, = mibBuilder.importSymbols("ALTEON-ROOT-MIB", "switch")
stats, operCmds, information = mibBuilder.importSymbols("ALTEON-TIGON-SWITCH-MIB", "stats", "operCmds", "information")
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibIdentifier, IpAddress, iso, Integer32, Counter64, TimeTicks, Counter32, ObjectIdentity, Unsigned32, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, ModuleIdentity, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "IpAddress", "iso", "Integer32", "Counter64", "TimeTicks", "Counter32", "ObjectIdentity", "Unsigned32", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "ModuleIdentity", "Bits")
DisplayString, TextualConvention, PhysAddress = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "PhysAddress")
iprouting = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3))
vrrp = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15))
ripStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 1))
arpStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 3))
routeStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 4))
dnsStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 5))
vrrpStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 9))
ospfStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22))
ip_info = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 3)).setLabel("ip-info")
vrrp_info = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 4)).setLabel("vrrp-info")
ospfinfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 5))
vrrpOper = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 14, 5))
ipInterfaceTableMax = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipInterfaceTableMax.setStatus('mandatory')
if mibBuilder.loadTexts: ipInterfaceTableMax.setDescription('The maximum number of rows in the IP interface table.')
ipCurCfgIntfTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 2), )
if mibBuilder.loadTexts: ipCurCfgIntfTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipCurCfgIntfTable.setDescription('The table of IP interface configuration.')
ipCurCfgIntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 2, 1), ).setIndexNames((0, "ALTEON-TS-NETWORK-MIB", "ipCurCfgIntfIndex"))
if mibBuilder.loadTexts: ipCurCfgIntfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipCurCfgIntfEntry.setDescription('A row in the Ip interface table')
ipCurCfgIntfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgIntfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ipCurCfgIntfIndex.setDescription('The interface number for which the IP information is related.')
ipCurCfgIntfAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgIntfAddr.setStatus('mandatory')
if mibBuilder.loadTexts: ipCurCfgIntfAddr.setDescription('The IP address of the interface.')
ipCurCfgIntfMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgIntfMask.setStatus('mandatory')
if mibBuilder.loadTexts: ipCurCfgIntfMask.setDescription('The subnet mask of the interface.')
ipCurCfgIntfBroadcast = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 2, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgIntfBroadcast.setStatus('mandatory')
if mibBuilder.loadTexts: ipCurCfgIntfBroadcast.setDescription('The broadcast address of the interface.')
ipCurCfgIntfVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgIntfVlan.setStatus('mandatory')
if mibBuilder.loadTexts: ipCurCfgIntfVlan.setDescription('The VLAN associated with the interface.')
ipCurCfgIntfState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgIntfState.setStatus('mandatory')
if mibBuilder.loadTexts: ipCurCfgIntfState.setDescription('The state of the interface.')
ipCurCfgIntfBootpRelay = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgIntfBootpRelay.setStatus('mandatory')
if mibBuilder.loadTexts: ipCurCfgIntfBootpRelay.setDescription('Enable/disable BOOTP relay.')
ipNewCfgIntfTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 3), )
if mibBuilder.loadTexts: ipNewCfgIntfTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipNewCfgIntfTable.setDescription('The table of interface configuration in the New Configuration Block.')
ipNewCfgIntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 3, 1), ).setIndexNames((0, "ALTEON-TS-NETWORK-MIB", "ipNewCfgIntfIndex"))
if mibBuilder.loadTexts: ipNewCfgIntfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipNewCfgIntfEntry.setDescription('A row in the Ip interface table')
ipNewCfgIntfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipNewCfgIntfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ipNewCfgIntfIndex.setDescription('The interface number for which the IP information is related.')
ipNewCfgIntfAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 3, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNewCfgIntfAddr.setStatus('mandatory')
if mibBuilder.loadTexts: ipNewCfgIntfAddr.setDescription('The IP address of the interface.')
ipNewCfgIntfMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 3, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNewCfgIntfMask.setStatus('mandatory')
if mibBuilder.loadTexts: ipNewCfgIntfMask.setDescription('The subnet mask of the interface.')
ipNewCfgIntfBroadcast = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 3, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNewCfgIntfBroadcast.setStatus('mandatory')
if mibBuilder.loadTexts: ipNewCfgIntfBroadcast.setDescription('The broadcast address of the interface.')
ipNewCfgIntfVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNewCfgIntfVlan.setStatus('mandatory')
if mibBuilder.loadTexts: ipNewCfgIntfVlan.setDescription('The VLAN associated with the interface.')
ipNewCfgIntfState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNewCfgIntfState.setStatus('mandatory')
if mibBuilder.loadTexts: ipNewCfgIntfState.setDescription('The state of the interface.')
ipNewCfgIntfDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNewCfgIntfDelete.setStatus('mandatory')
if mibBuilder.loadTexts: ipNewCfgIntfDelete.setDescription('When set to the value of 2 (delete), the entire row is deleted. \n         When read, other(1) is returned. Setting the value to anything \n         other than 2(delete) has no effect on the state of the row.')
ipNewCfgIntfBootpRelay = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNewCfgIntfBootpRelay.setStatus('mandatory')
if mibBuilder.loadTexts: ipNewCfgIntfBootpRelay.setDescription('Enable/disable BOOTP relay.')
ipGatewayTableMax = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipGatewayTableMax.setStatus('mandatory')
if mibBuilder.loadTexts: ipGatewayTableMax.setDescription('The maximum number of rows in the IP gateway table.')
ipCurCfgGwTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 5), )
if mibBuilder.loadTexts: ipCurCfgGwTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipCurCfgGwTable.setDescription('The table of gateways  in the Current configuration Block.')
ipCurCfgGwEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 5, 1), ).setIndexNames((0, "ALTEON-TS-NETWORK-MIB", "ipCurCfgGwIndex"))
if mibBuilder.loadTexts: ipCurCfgGwEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipCurCfgGwEntry.setDescription('A row in the Ip gateway table')
ipCurCfgGwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgGwIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ipCurCfgGwIndex.setDescription('The gateway number for which the information is related.')
ipCurCfgGwAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 5, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgGwAddr.setStatus('mandatory')
if mibBuilder.loadTexts: ipCurCfgGwAddr.setDescription('The IP address of the default gateway.')
ipCurCfgGwInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgGwInterval.setStatus('mandatory')
if mibBuilder.loadTexts: ipCurCfgGwInterval.setDescription('The interval between ping attempts.')
ipCurCfgGwRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgGwRetry.setStatus('mandatory')
if mibBuilder.loadTexts: ipCurCfgGwRetry.setDescription('The number of failed attempts to declare the default gateway DOWN.')
ipCurCfgGwState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgGwState.setStatus('mandatory')
if mibBuilder.loadTexts: ipCurCfgGwState.setDescription('The state of the default gateway.')
ipCurCfgGwArp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgGwArp.setStatus('mandatory')
if mibBuilder.loadTexts: ipCurCfgGwArp.setDescription('The state of ARP only health checks.')
ipNewCfgGwTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 6), )
if mibBuilder.loadTexts: ipNewCfgGwTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipNewCfgGwTable.setDescription('The table of gateway configuration in the new configuration block.')
ipCurCfgGwVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 5, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgGwVlan.setStatus('mandatory')
if mibBuilder.loadTexts: ipCurCfgGwVlan.setDescription('The VLAN number for this gateway. The first 4 entries in the table \n         are only used for default gateway load balancing hence the VLAN \n         cannot be specified for the first 4 entries.')
ipNewCfgGwEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 6, 1), ).setIndexNames((0, "ALTEON-TS-NETWORK-MIB", "ipNewCfgGwIndex"))
if mibBuilder.loadTexts: ipNewCfgGwEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipNewCfgGwEntry.setDescription('A row in the Ip default gateway table')
ipNewCfgGwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipNewCfgGwIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ipNewCfgGwIndex.setDescription('The gateway number for which the information is related.')
ipNewCfgGwAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 6, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNewCfgGwAddr.setStatus('mandatory')
if mibBuilder.loadTexts: ipNewCfgGwAddr.setDescription('The IP address of the default gateway.')
ipNewCfgGwInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNewCfgGwInterval.setStatus('mandatory')
if mibBuilder.loadTexts: ipNewCfgGwInterval.setDescription('The interval in seconds between ping attempts.')
ipNewCfgGwRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNewCfgGwRetry.setStatus('mandatory')
if mibBuilder.loadTexts: ipNewCfgGwRetry.setDescription('The number of failed attempts to declare the default gateway DOWN.')
ipNewCfgGwState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNewCfgGwState.setStatus('mandatory')
if mibBuilder.loadTexts: ipNewCfgGwState.setDescription('The state of the default gateway.')
ipNewCfgGwDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNewCfgGwDelete.setStatus('mandatory')
if mibBuilder.loadTexts: ipNewCfgGwDelete.setDescription('When set to the value of 2 (delete), the entire row is deleted. \n         When read, other is returned. Setting the value to anything other \n         than 2(delete) has no effect on the state of the row.')
ipNewCfgGwArp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNewCfgGwArp.setStatus('mandatory')
if mibBuilder.loadTexts: ipNewCfgGwArp.setDescription('The state of the ARP only health checks.')
ipNewCfgGwVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 6, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNewCfgGwVlan.setStatus('mandatory')
if mibBuilder.loadTexts: ipNewCfgGwVlan.setDescription('The VLAN number for this gateway. The first 4 entries in the table \n         are only used for default gateway load balancing hence the VLAN \n         cannot be specified for the first 4 entries.')
ipCurCfgStaticRouteTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 7), )
if mibBuilder.loadTexts: ipCurCfgStaticRouteTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipCurCfgStaticRouteTable.setDescription('The table of static routes in the current configuration block.')
ipCurCfgStaticRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 7, 1), ).setIndexNames((0, "ALTEON-TS-NETWORK-MIB", "ipCurCfgStaticRouteIndx"))
if mibBuilder.loadTexts: ipCurCfgStaticRouteEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipCurCfgStaticRouteEntry.setDescription('A row in the static IP route table')
ipCurCfgStaticRouteIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgStaticRouteIndx.setStatus('mandatory')
if mibBuilder.loadTexts: ipCurCfgStaticRouteIndx.setDescription('The index of the static routing table.')
ipCurCfgStaticRouteDestIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 7, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgStaticRouteDestIp.setStatus('mandatory')
if mibBuilder.loadTexts: ipCurCfgStaticRouteDestIp.setDescription('The destination IP address of this route.')
ipCurCfgStaticRouteMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 7, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgStaticRouteMask.setStatus('mandatory')
if mibBuilder.loadTexts: ipCurCfgStaticRouteMask.setDescription('The destination IP address of this route.')
ipCurCfgStaticRouteGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 7, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgStaticRouteGateway.setStatus('mandatory')
if mibBuilder.loadTexts: ipCurCfgStaticRouteGateway.setDescription('The destination IP address of this route.')
ipCurCfgStaticRouteInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 7, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgStaticRouteInterface.setStatus('mandatory')
if mibBuilder.loadTexts: ipCurCfgStaticRouteInterface.setDescription('The IP interface of this route.  The IP address of the specified \n         interface shall be use as source IP when performs routing.')
ipNewCfgStaticRouteTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 8), )
if mibBuilder.loadTexts: ipNewCfgStaticRouteTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipNewCfgStaticRouteTable.setDescription('The table of static routes in the new configuration block.')
ipNewCfgStaticRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 8, 1), ).setIndexNames((0, "ALTEON-TS-NETWORK-MIB", "ipNewCfgStaticRouteIndx"))
if mibBuilder.loadTexts: ipNewCfgStaticRouteEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipNewCfgStaticRouteEntry.setDescription('A row in the static IP route table')
ipNewCfgStaticRouteIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipNewCfgStaticRouteIndx.setStatus('mandatory')
if mibBuilder.loadTexts: ipNewCfgStaticRouteIndx.setDescription('The index of the static routing table.')
ipNewCfgStaticRouteDestIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 8, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNewCfgStaticRouteDestIp.setStatus('mandatory')
if mibBuilder.loadTexts: ipNewCfgStaticRouteDestIp.setDescription('The destination IP address of this route.')
ipNewCfgStaticRouteMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 8, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNewCfgStaticRouteMask.setStatus('mandatory')
if mibBuilder.loadTexts: ipNewCfgStaticRouteMask.setDescription('The subnet mask of this route.')
ipNewCfgStaticRouteGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 8, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNewCfgStaticRouteGateway.setStatus('mandatory')
if mibBuilder.loadTexts: ipNewCfgStaticRouteGateway.setDescription('The IP address of the gateway for this route.')
ipNewCfgStaticRouteAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNewCfgStaticRouteAction.setStatus('mandatory')
if mibBuilder.loadTexts: ipNewCfgStaticRouteAction.setDescription('When set to the value of 2 (delete), the entire row is deleted. \n         When read, other is returned. Setting the value to anything other \n         than 2(delete) has no effect on the state of the row.')
ipNewCfgStaticRouteInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 8, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNewCfgStaticRouteInterface.setStatus('mandatory')
if mibBuilder.loadTexts: ipNewCfgStaticRouteInterface.setDescription('The IP interface of this route.  The IP address of the specified \n         interface shall be use as source IP when performs routing.')
ipForward = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9))
ripConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 1))
ripCurCfgSupply = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripCurCfgSupply.setStatus('mandatory')
if mibBuilder.loadTexts: ripCurCfgSupply.setDescription('Enable or disable supplying route updates.')
ripNewCfgSupply = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripNewCfgSupply.setStatus('mandatory')
if mibBuilder.loadTexts: ripNewCfgSupply.setDescription('Enable or disable supplying route updates.')
ripCurCfgListen = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripCurCfgListen.setStatus('mandatory')
if mibBuilder.loadTexts: ripCurCfgListen.setDescription('Enable or disable listening to route updates.')
ripNewCfgListen = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripNewCfgListen.setStatus('mandatory')
if mibBuilder.loadTexts: ripNewCfgListen.setDescription('Enable or disable listening to route updates.')
ripCurCfgDefListen = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripCurCfgDefListen.setStatus('mandatory')
if mibBuilder.loadTexts: ripCurCfgDefListen.setDescription('Enable or disable listening to default routes.')
ripNewCfgDefListen = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripNewCfgDefListen.setStatus('mandatory')
if mibBuilder.loadTexts: ripNewCfgDefListen.setDescription('Enable or disable listening to default routes.')
ripCurCfgStaticSupply = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripCurCfgStaticSupply.setStatus('mandatory')
if mibBuilder.loadTexts: ripCurCfgStaticSupply.setDescription('Enable or disable supplying static route updates.')
ripNewCfgStaticSupply = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripNewCfgStaticSupply.setStatus('mandatory')
if mibBuilder.loadTexts: ripNewCfgStaticSupply.setDescription('Enable or disable supplying static route updates.')
ripCurCfgUpdatePeriod = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripCurCfgUpdatePeriod.setStatus('mandatory')
if mibBuilder.loadTexts: ripCurCfgUpdatePeriod.setDescription('Update Period in seconds.')
ripNewCfgUpdatePeriod = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripNewCfgUpdatePeriod.setStatus('mandatory')
if mibBuilder.loadTexts: ripNewCfgUpdatePeriod.setDescription('Update period in seconds.')
ripCurCfgState = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("on", 2), ("off", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripCurCfgState.setStatus('mandatory')
if mibBuilder.loadTexts: ripCurCfgState.setDescription('RIP global state.')
ripNewCfgState = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("on", 2), ("off", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripNewCfgState.setStatus('mandatory')
if mibBuilder.loadTexts: ripNewCfgState.setDescription('Globally turn RIP on or off.')
ripCurCfgPoisonReverse = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripCurCfgPoisonReverse.setStatus('mandatory')
if mibBuilder.loadTexts: ripCurCfgPoisonReverse.setDescription('RIP poison reverse.')
ripNewCfgPoisonReverse = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripNewCfgPoisonReverse.setStatus('mandatory')
if mibBuilder.loadTexts: ripNewCfgPoisonReverse.setDescription('RIP poison reverse.')
ripCurCfgVip = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripCurCfgVip.setStatus('mandatory')
if mibBuilder.loadTexts: ripCurCfgVip.setDescription('Advertise VIP Host Routes.')
ripNewCfgVip = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripNewCfgVip.setStatus('mandatory')
if mibBuilder.loadTexts: ripNewCfgVip.setDescription('Advertise VIP Host Routes.')
ipFwdCurCfgPortTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 2), )
if mibBuilder.loadTexts: ipFwdCurCfgPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipFwdCurCfgPortTable.setDescription('The table of ports and their forwarding states')
ipFwdCurCfgPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 2, 1), ).setIndexNames((0, "ALTEON-TS-NETWORK-MIB", "ipFwdCurCfgPortIndex"))
if mibBuilder.loadTexts: ipFwdCurCfgPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipFwdCurCfgPortEntry.setDescription('A row in the ipFwdCurCfgPortTable ')
ipFwdCurCfgPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipFwdCurCfgPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ipFwdCurCfgPortIndex.setDescription('The port number for which the forwarding state information pertains.')
ipFwdCurCfgPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipFwdCurCfgPortState.setStatus('mandatory')
if mibBuilder.loadTexts: ipFwdCurCfgPortState.setDescription('The forwarding state of the port.')
ipFwdNewCfgPortTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 3), )
if mibBuilder.loadTexts: ipFwdNewCfgPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipFwdNewCfgPortTable.setDescription('The table of ports and their forwarding states')
ipFwdNewCfgPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 3, 1), ).setIndexNames((0, "ALTEON-TS-NETWORK-MIB", "ipFwdNewCfgPortIndex"))
if mibBuilder.loadTexts: ipFwdNewCfgPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipFwdNewCfgPortEntry.setDescription('A row in the ipFwdNewCfgPortTable ')
ipFwdNewCfgPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipFwdNewCfgPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ipFwdNewCfgPortIndex.setDescription('The port number for which the forwarding state information pertains.')
ipFwdNewCfgPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipFwdNewCfgPortState.setStatus('mandatory')
if mibBuilder.loadTexts: ipFwdNewCfgPortState.setDescription('The forwarding state of the port.')
ipFwdCurCfgLocalTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 14), )
if mibBuilder.loadTexts: ipFwdCurCfgLocalTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipFwdCurCfgLocalTable.setDescription('The table of local network definition.')
ipFwdCurCfgLocalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 14, 1), ).setIndexNames((0, "ALTEON-TS-NETWORK-MIB", "ipFwdCurCfgLocalIndex"))
if mibBuilder.loadTexts: ipFwdCurCfgLocalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipFwdCurCfgLocalEntry.setDescription('A row in the ipFwdCurCfgLocalTable ')
ipFwdCurCfgLocalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 14, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipFwdCurCfgLocalIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ipFwdCurCfgLocalIndex.setDescription('The index of ipFwdCurCfgLocalTable.')
ipFwdCurCfgLocalSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 14, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipFwdCurCfgLocalSubnet.setStatus('mandatory')
if mibBuilder.loadTexts: ipFwdCurCfgLocalSubnet.setDescription('The current local IP subnet.')
ipFwdCurCfgLocalMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 14, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipFwdCurCfgLocalMask.setStatus('mandatory')
if mibBuilder.loadTexts: ipFwdCurCfgLocalMask.setDescription('The current local IP subnet mask.')
ipFwdNewCfgLocalTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 15), )
if mibBuilder.loadTexts: ipFwdNewCfgLocalTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipFwdNewCfgLocalTable.setDescription('The table of local network definition.')
ipFwdNewCfgLocalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 15, 1), ).setIndexNames((0, "ALTEON-TS-NETWORK-MIB", "ipFwdNewCfgLocalIndex"))
if mibBuilder.loadTexts: ipFwdNewCfgLocalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipFwdNewCfgLocalEntry.setDescription('A row in the ipFwdNewCfgLocalTable ')
ipFwdNewCfgLocalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 15, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipFwdNewCfgLocalIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ipFwdNewCfgLocalIndex.setDescription('The index of ipFwdNewCfgLocalTable.')
ipFwdNewCfgLocalSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 15, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipFwdNewCfgLocalSubnet.setStatus('mandatory')
if mibBuilder.loadTexts: ipFwdNewCfgLocalSubnet.setDescription('The new local IP subnet.')
ipFwdNewCfgLocalMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 15, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipFwdNewCfgLocalMask.setStatus('mandatory')
if mibBuilder.loadTexts: ipFwdNewCfgLocalMask.setDescription('The new local IP subnet mask.')
ipFwdNewCfgLocalDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 15, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipFwdNewCfgLocalDelete.setStatus('mandatory')
if mibBuilder.loadTexts: ipFwdNewCfgLocalDelete.setDescription('When set to the value of 2 (delete), the entire row is deleted. \n         When read, other(1) is returned. Setting the value to anything \n         other than 2(delete) has no effect on the state of the row.')
ipFwdCurCfgState = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("on", 2), ("off", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipFwdCurCfgState.setStatus('mandatory')
if mibBuilder.loadTexts: ipFwdCurCfgState.setDescription('IP forwarding global state.')
ipFwdNewCfgState = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("on", 2), ("off", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipFwdNewCfgState.setStatus('mandatory')
if mibBuilder.loadTexts: ipFwdNewCfgState.setDescription('IP forwarding global state.')
ipFwdCurCfgDirectedBcast = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipFwdCurCfgDirectedBcast.setStatus('mandatory')
if mibBuilder.loadTexts: ipFwdCurCfgDirectedBcast.setDescription('Enable or disable forwarding directed broadcasts.')
ipFwdNewCfgDirectedBcast = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipFwdNewCfgDirectedBcast.setStatus('mandatory')
if mibBuilder.loadTexts: ipFwdNewCfgDirectedBcast.setDescription('Enable or disable forwarding directed broadcasts.')
ipFwdPortTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipFwdPortTableMaxSize.setStatus('mandatory')
if mibBuilder.loadTexts: ipFwdPortTableMaxSize.setDescription('The maximum number of rows in the IP Port table.')
ipFwdLocalTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipFwdLocalTableMaxSize.setStatus('mandatory')
if mibBuilder.loadTexts: ipFwdLocalTableMaxSize.setDescription('The maximum number of rows in the Local table.')
arpCurCfgReARPPeriod = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 120))).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpCurCfgReARPPeriod.setStatus('mandatory')
if mibBuilder.loadTexts: arpCurCfgReARPPeriod.setDescription('Re-ARP Period in seconds.')
arpNewCfgReARPPeriod = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: arpNewCfgReARPPeriod.setStatus('mandatory')
if mibBuilder.loadTexts: arpNewCfgReARPPeriod.setDescription('Re-ARP Period in seconds.')
ipCurCfgGwMetric = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("strict", 1), ("roundrobin", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgGwMetric.setStatus('mandatory')
if mibBuilder.loadTexts: ipCurCfgGwMetric.setDescription('The default gateway metric.')
ipNewCfgGwMetric = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("strict", 1), ("roundrobin", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNewCfgGwMetric.setStatus('mandatory')
if mibBuilder.loadTexts: ipNewCfgGwMetric.setDescription('The default gateway metric.')
ipCurCfgBootpAddr = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 14), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgBootpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: ipCurCfgBootpAddr.setDescription('The IP address of BOOTP server.')
ipNewCfgBootpAddr = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 15), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNewCfgBootpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: ipNewCfgBootpAddr.setDescription('The IP address of BOOTP server.')
ipCurCfgBootpAddr2 = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 16), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgBootpAddr2.setStatus('mandatory')
if mibBuilder.loadTexts: ipCurCfgBootpAddr2.setDescription('The IP address of second BOOTP server.')
ipNewCfgBootpAddr2 = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 17), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNewCfgBootpAddr2.setStatus('mandatory')
if mibBuilder.loadTexts: ipNewCfgBootpAddr2.setDescription('The IP address of second BOOTP server.')
ipCurCfgBootpState = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgBootpState.setStatus('mandatory')
if mibBuilder.loadTexts: ipCurCfgBootpState.setDescription('The state of BOOTP relay.')
ipNewCfgBootpState = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNewCfgBootpState.setStatus('mandatory')
if mibBuilder.loadTexts: ipNewCfgBootpState.setDescription('The state of BOOTP relay.')
ipStaticRouteTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipStaticRouteTableMaxSize.setStatus('mandatory')
if mibBuilder.loadTexts: ipStaticRouteTableMaxSize.setDescription('The maximum number of rows in the Static Route table.')
vrrpGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 1))
vrrpCurCfgGenState = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgGenState.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpCurCfgGenState.setDescription('Enable or disable VRRP operation globally.')
vrrpNewCfgGenState = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgGenState.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpNewCfgGenState.setDescription('Enable or disable VRRP operation globally.')
vrrpCurCfgGenTckVirtRtrInc = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgGenTckVirtRtrInc.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpCurCfgGenTckVirtRtrInc.setDescription('The increment of VRRP virtual router priority. The priority is \n         adjusted by tracking the state of other virtual routers.')
vrrpNewCfgGenTckVirtRtrInc = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgGenTckVirtRtrInc.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpNewCfgGenTckVirtRtrInc.setDescription('The increment of VRRP virtual router priority. The priority is \n         adjusted by tracking the state of other virtual routers.')
vrrpCurCfgGenTckIpIntfInc = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgGenTckIpIntfInc.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpCurCfgGenTckIpIntfInc.setDescription('The increment of VRRP virtual router priority. The priority is \n         adjusted by tracking the state of other router interfaces.')
vrrpNewCfgGenTckIpIntfInc = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgGenTckIpIntfInc.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpNewCfgGenTckIpIntfInc.setDescription('The increment of VRRP virtual router priority. The priority is \n         adjusted by tracking the state of other router interfaces.')
vrrpCurCfgGenTckVlanPortInc = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgGenTckVlanPortInc.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpCurCfgGenTckVlanPortInc.setDescription('The increment of VRRP virtual router priority. The priority is \n         adjusted by tracking the port state of ports that belongs to the \n         same virtual LAN as the virtual router.')
vrrpNewCfgGenTckVlanPortInc = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgGenTckVlanPortInc.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpNewCfgGenTckVlanPortInc.setDescription('The increment of VRRP virtual router priority. The priority is \n         adjusted by tracking the port state of ports that belongs to the \n         same virtual LAN as the virtual router.')
vrrpCurCfgGenTckL4PortInc = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgGenTckL4PortInc.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpCurCfgGenTckL4PortInc.setDescription('The increment of VRRP virtual router priority. The priority is \n         adjusted by tracking the Layer 4 port states. This is valid when \n         virtual server is configured as a VRRP virtual router.')
vrrpNewCfgGenTckL4PortInc = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgGenTckL4PortInc.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpNewCfgGenTckL4PortInc.setDescription('The increment of VRRP virtual router priority. The priority is \n         adjusted by tracking the Layer 4 port states. This is valid when \n         virtual server is configured as a VRRP virtual router.')
vrrpCurCfgGenTckRServerInc = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgGenTckRServerInc.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpCurCfgGenTckRServerInc.setDescription('The increment of VRRP virtual router priority. The priority is \n         adjusted by tracking the state of real servers under the virtual \n         server which is configured as a VRRP virtual router.')
vrrpNewCfgGenTckRServerInc = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgGenTckRServerInc.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpNewCfgGenTckRServerInc.setDescription('The increment of VRRP virtual router priority. The priority is \n         adjusted by tracking the state of real servers under the virtual \n         server which is configured as a VRRP virtual router.')
vrrpCurCfgGenTckHsrpInc = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgGenTckHsrpInc.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpCurCfgGenTckHsrpInc.setDescription('The increment of VRRP virtual router priority.  The\n\t priority is adjusted by tracking the HSRP advertisements.')
vrrpNewCfgGenTckHsrpInc = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgGenTckHsrpInc.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpNewCfgGenTckHsrpInc.setDescription('The increment of VRRP virtual router priority.  The\n         priority is adjusted by tracking the HSRP advertisements.')
vrrpCurCfgGenHotstandby = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgGenHotstandby.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpCurCfgGenHotstandby.setDescription('Enable or disable hotstandby processing.')
vrrpNewCfgGenHotstandby = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgGenHotstandby.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpNewCfgGenHotstandby.setDescription('Enable or disable hotstandby processing.')
vrrpCurCfgGenTckHsrvInc = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgGenTckHsrvInc.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpCurCfgGenTckHsrvInc.setDescription('The increment of VRRP virtual router priority.  The\n                 priority is adjusted by tracking the HSRP advertisements\n                 by VLAN.')
vrrpNewCfgGenTckHsrvInc = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgGenTckHsrvInc.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpNewCfgGenTckHsrvInc.setDescription('The increment of VRRP virtual router priority.  The\n                 priority is adjusted by tracking the HSRP advertisements\n                 by VLAN.')
vrrpCurCfgVirtRtrTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 2), )
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrTable.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrTable.setDescription('The table of VRRP virtual routers configuration in current_config.')
vrrpCurCfgVirtRtrTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 2, 1), ).setIndexNames((0, "ALTEON-TS-NETWORK-MIB", "vrrpCurCfgVirtRtrIndx"))
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrTableEntry.setDescription('Information about a VRRP virtual router.')
vrrpCurCfgVirtRtrIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrIndx.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrIndx.setDescription('The VRRP virtual router table index.')
vrrpCurCfgVirtRtrID = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrID.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrID.setDescription('The VRRP virtual router identifier.')
vrrpCurCfgVirtRtrAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrAddr.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrAddr.setDescription('The VRRP virtual router IP address.')
vrrpCurCfgVirtRtrIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrIfIndex.setDescription('The IfIndex that the VRRP virtual router is representing.')
vrrpCurCfgVirtRtrInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrInterval.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrInterval.setDescription('The time interval between VRRP advertisements in seconds.')
vrrpCurCfgVirtRtrPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrPriority.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrPriority.setDescription('The priority value to be used by the specified VRRP virtual routers.')
vrrpCurCfgVirtRtrPreempt = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrPreempt.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrPreempt.setDescription('This is for controlling whether a higher priority Backup\n          VRRP virtual router preempts a low priority Master.\n\n          enabled(1)  - allow preemption\n          disabled(2) - prohibit preemption')
vrrpCurCfgVirtRtrState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrState.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrState.setDescription('Enable or disable the VRRP virtual router.')
vrrpCurCfgVirtRtrSharing = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrSharing.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrSharing.setDescription('Enable or disable load sharing of non-master virtual router.')
vrrpCurCfgVirtRtrTckVirtRtr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrTckVirtRtr.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrTckVirtRtr.setDescription('Enable or disable tracking other virtual routers for priority \n         adjustment. The priority increment is defined \n         in vrrpCurCfgGenTckVirtRtrInc.')
vrrpCurCfgVirtRtrTckIpIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrTckIpIntf.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrTckIpIntf.setDescription('Enable or disable tracking other router interfaces for \n\t priority adjustment. The priority increment is defined \n\t in vrrpCurCfgGenTckIpIntfInc.')
vrrpCurCfgVirtRtrTckVlanPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrTckVlanPort.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrTckVlanPort.setDescription('Enable or disable tracking port state of VLAN ports \n\t for priority adjustment. The priority increment is \n\t defined in vrrpCurCfgGenTckVlanPortInc.')
vrrpCurCfgVirtRtrTckL4Port = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrTckL4Port.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrTckL4Port.setDescription('Enable or disable tracking Layer 4 port states for \n\t priority adjustment.  the priority increment is defined \n\t in vrrpCurCfgGenTckL4PortInc.  This is applied when \n\t virtual server is configured as a VRRP virtual router.')
vrrpCurCfgVirtRtrTckRServer = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrTckRServer.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrTckRServer.setDescription('Enable or disable tracking real server states for \n\t priority adjustment.  the priority increment is defined \n\t in vrrpCurCfgGenTckRServerInc.  This is applied when \n\t virtual server is configured as a VRRP virtual router.')
vrrpCurCfgVirtRtrTckHsrp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrTckHsrp.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrTckHsrp.setDescription('Enable or disable tracking HSRP advertisements for \n\t priority adjustment.  the priority increment is defined \n\t in vrrpCurCfgGenTckHsrpInc.  This is applied when \n\t virtual server is configured as a VRRP virtual router.')
vrrpCurCfgVirtRtrTckHsrv = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrTckHsrv.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrTckHsrv.setDescription('Enable or disable tracking HSRP advertisements by VLAN for\n                 priority adjustment.  The priority increment is defined\n                 in vrrpCurCfgGenTckHsrvInc.  This is applied when\n                 virtual server is configured as a VRRP virtual router.')
vrrpNewCfgVirtRtrTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 3), )
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrTable.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrTable.setDescription('The table of VRRP virtual routers configuration in current_config.')
vrrpNewCfgVirtRtrTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 3, 1), ).setIndexNames((0, "ALTEON-TS-NETWORK-MIB", "vrrpNewCfgVirtRtrIndx"))
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrTableEntry.setDescription('Information about a VRRP virtual router.')
vrrpNewCfgVirtRtrIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrIndx.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrIndx.setDescription('The VRRP virtual router table index.')
vrrpNewCfgVirtRtrID = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrID.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrID.setDescription('The VRRP virtual router identifier.')
vrrpNewCfgVirtRtrAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 3, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrAddr.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrAddr.setDescription('The VRRP virtual router IP address.')
vrrpNewCfgVirtRtrIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrIfIndex.setDescription('The IfIndex that the VRRP virtual router is representing.')
vrrpNewCfgVirtRtrInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrInterval.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrInterval.setDescription('The time interval between VRRP advertisements in seconds.')
vrrpNewCfgVirtRtrPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrPriority.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrPriority.setDescription('The priority value to be used by the specified VRRP virtual router.')
vrrpNewCfgVirtRtrPreempt = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrPreempt.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrPreempt.setDescription('This is for controlling whether a higher priority Backup\n         VRRP virtual router preempts a low priority Master.\n\n         enabled(1)  - allow preemption\n         disabled(2) - prohibit preemption')
vrrpNewCfgVirtRtrState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrState.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrState.setDescription('Enable or disable the VRRP virtual router.')
vrrpNewCfgVirtRtrDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrDelete.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrDelete.setDescription('When set to the value of 2 (delete), the entire row is deleted. \n         When read, other(1) is returned. Setting the value to anything \n         other than delete(2) has no effect on the state of the row.')
vrrpNewCfgVirtRtrSharing = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrSharing.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrSharing.setDescription('Enable or disable load sharing of non-master virtual router.')
vrrpNewCfgVirtRtrTckVirtRtr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrTckVirtRtr.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrTckVirtRtr.setDescription('Enable or disable tracking other virtual routers for \n\t priority adjustment.  the priority increment is defined \n\t in vrrpNewCfgGenTckVirtRtrInc.')
vrrpNewCfgVirtRtrTckIpIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrTckIpIntf.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrTckIpIntf.setDescription('Enable or disable tracking other router interfaces for \n\t  priority adjustment.  the priority increment is defined \n\t  in vrrpNewCfgGenTckIpIntfInc.')
vrrpNewCfgVirtRtrTckVlanPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrTckVlanPort.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrTckVlanPort.setDescription('Enable or disable tracking port state of VLAN ports \n\t for priority adjustment.  the priority increment is \n\t defined in vrrpNewCfgGenTckVlanPortInc.')
vrrpNewCfgVirtRtrTckL4Port = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrTckL4Port.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrTckL4Port.setDescription('Enable or disable tracking Layer 4 port states for \n\t  priority adjustment.  the priority increment is defined \n\t  in vrrpNewCfgGenTckL4PortInc.  This is applied when \n\t  virtual server is configured as a VRRP virtual router.')
vrrpNewCfgVirtRtrTckRServer = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrTckRServer.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrTckRServer.setDescription('Enable or disable tracking real server states for \n\t priority adjustment.  the priority increment is defined \n\t in vrrpNewCfgGenTckRServerInc.  This is applied when \n\t virtual server is configured as a VRRP virtual router.')
vrrpNewCfgVirtRtrTckHsrp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrTckHsrp.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrTckHsrp.setDescription('Enable or disable tracking HSRP advertisements for \n\t priority adjustment.  the priority increment is defined \n\t in vrrpNewCfgGenTckHsrpInc.  This is applied when \n\t virtual server is configured as a VRRP virtual router.')
vrrpNewCfgVirtRtrTckHsrv = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrTckHsrv.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrTckHsrv.setDescription('Enable or disable tracking HSRP by VLAN advertisements for\n                 priority adjustment.  The priority increment is defined\n                 in vrrpNewCfgGenTckHsrvInc.  This is applied when\n                 virtual server is configured as a VRRP virtual router.')
vrrpCurCfgIfTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 4), )
if mibBuilder.loadTexts: vrrpCurCfgIfTable.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpCurCfgIfTable.setDescription('The table of VRRP interface configuration in current_config.')
vrrpCurCfgIfTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 4, 1), ).setIndexNames((0, "ALTEON-TS-NETWORK-MIB", "vrrpCurCfgIfIndx"))
if mibBuilder.loadTexts: vrrpCurCfgIfTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpCurCfgIfTableEntry.setDescription('Information about a VRRP interface.')
vrrpCurCfgIfIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgIfIndx.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpCurCfgIfIndx.setDescription('The VRRP interface index.  This is eqivalent to IfIndex.')
vrrpCurCfgIfAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("simple-text-password", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgIfAuthType.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpCurCfgIfAuthType.setDescription('Type of authentication being used.\n\t none(1) - no authentication\n\t simple-text-password(2) - use password specified in \n         vrrpCurCfgIfPasswd for authentication.')
vrrpCurCfgIfPasswd = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgIfPasswd.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpCurCfgIfPasswd.setDescription('The password for authentication.')
vrrpNewCfgIfTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 5), )
if mibBuilder.loadTexts: vrrpNewCfgIfTable.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpNewCfgIfTable.setDescription('The table of VRRP interface configuration in current_config.')
vrrpNewCfgIfTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 5, 1), ).setIndexNames((0, "ALTEON-TS-NETWORK-MIB", "vrrpNewCfgIfIndx"))
if mibBuilder.loadTexts: vrrpNewCfgIfTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpNewCfgIfTableEntry.setDescription('Information about a VRRP interface.')
vrrpNewCfgIfIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpNewCfgIfIndx.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpNewCfgIfIndx.setDescription('The VRRP interface index.  This is eqivalent to IfIndex.')
vrrpNewCfgIfAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("simple-text-password", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgIfAuthType.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpNewCfgIfAuthType.setDescription('Type of authentication being used.\n\t none(1) - no authentication\n\t simple-text-password(2) - use password specified in \n         vrrpNewCfgIfPasswd for authentication.')
vrrpNewCfgIfPasswd = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 5, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgIfPasswd.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpNewCfgIfPasswd.setDescription('The password for authentication.')
vrrpNewCfgIfDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgIfDelete.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpNewCfgIfDelete.setDescription('When set to the value of 2 (delete), the entire row is deleted. \n         When read, other(1) is returned. Setting the value to anything \n         other than delete(2) has no effect on the state of the row.')
vrrpCurCfgVirtRtrGrpTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 6), )
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpTable.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpTable.setDescription('The table of VRRP virtual router group in current_config.')
vrrpCurCfgVirtRtrGrpTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 6, 1), ).setIndexNames((0, "ALTEON-TS-NETWORK-MIB", "vrrpCurCfgVirtRtrGrpIndx"))
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpTableEntry.setDescription('Information about a VRRP failover virtual router.')
vrrpCurCfgVirtRtrGrpIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpIndx.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpIndx.setDescription('The VRRP virtual router table index.')
vrrpCurCfgVirtRtrGrpID = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpID.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpID.setDescription('The VRRP virtual router identifier.')
vrrpCurCfgVirtRtrGrpIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpIfIndex.setDescription('The IfIndex that the VRRP virtual router is representing.')
vrrpCurCfgVirtRtrGrpInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpInterval.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpInterval.setDescription('The time interval between VRRP advertisements in seconds.')
vrrpCurCfgVirtRtrGrpPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpPriority.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpPriority.setDescription('The priority value to be used by the specified VRRP virtual routers.')
vrrpCurCfgVirtRtrGrpPreempt = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpPreempt.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpPreempt.setDescription('This is for controlling whether a higher priority Backup\n         VRRP virtual router preempts a low priority Master.\n\n         enabled(1)  - allow preemption\n         disabled(2) - prohibit preemption')
vrrpCurCfgVirtRtrGrpState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpState.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpState.setDescription('Enable or disable the VRRP virtual router.')
vrrpCurCfgVirtRtrGrpSharing = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 6, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpSharing.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpSharing.setDescription('Enable or disable load sharing of non-master virtual router.')
vrrpCurCfgVirtRtrGrpTckVirtRtr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 6, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpTckVirtRtr.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpTckVirtRtr.setDescription('Enable or disable tracking other virtual routers for\n         priority adjustment.  the priority increment is defined\n         in vrrpCurCfgGenTckVirtRtrInc.')
vrrpCurCfgVirtRtrGrpTckIpIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 6, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpTckIpIntf.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpTckIpIntf.setDescription('Enable or disable tracking other router interfaces for\n         priority adjustment.  the priority increment is defined\n         in vrrpCurCfgGenTckIpIntfInc.')
vrrpCurCfgVirtRtrGrpTckVlanPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 6, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpTckVlanPort.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpTckVlanPort.setDescription('Enable or disable tracking port state of VLAN ports\n         for priority adjustment.  the priority increment is\n         defined in vrrpCurCfgGenTckVlanPortInc.')
vrrpCurCfgVirtRtrGrpTckL4Port = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 6, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpTckL4Port.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpTckL4Port.setDescription('Enable or disable tracking Layer 4 port states for\n         priority adjustment.  the priority increment is defined\n         in vrrpCurCfgGenTckL4PortInc.  This is applied when\n         virtual server is configured as a VRRP virtual router.')
vrrpCurCfgVirtRtrGrpTckRServer = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 6, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpTckRServer.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpTckRServer.setDescription('Enable or disable tracking real server states for\n         priority adjustment.  the priority increment is defined\n         in vrrpCurCfgGenTckRServerInc.  This is applied when\n         virtual server is configured as a VRRP virtual router.')
vrrpCurCfgVirtRtrGrpTckHsrp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 6, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpTckHsrp.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpTckHsrp.setDescription('Enable or disable tracking HSRP advertisements for\n         priority adjustment.  the priority increment is defined\n         in vrrpCurCfgGenTckHsrpInc.  This is applied when\n         virtual server is configured as a VRRP virtual router.')
vrrpCurCfgVirtRtrGrpTckHsrv = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 6, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpTckHsrv.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpTckHsrv.setDescription('Enable or disable tracking HSRP by VLAN advertisements for\n                 priority adjustment.  The priority increment is defined\n                 in vrrpCurCfgGenTckHsrvInc.  This is applied when\n                 virtual server is configured as a VRRP virtual router.')
vrrpNewCfgVirtRtrGrpTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 7), )
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpTable.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpTable.setDescription('The table of VRRP virtual router group configuration in new_config.')
vrrpNewCfgVirtRtrGrpTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 7, 1), ).setIndexNames((0, "ALTEON-TS-NETWORK-MIB", "vrrpNewCfgVirtRtrGrpIndx"))
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpTableEntry.setDescription('Information about a VRRP failover virtual router.')
vrrpNewCfgVirtRtrGrpIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpIndx.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpIndx.setDescription('The VRRP virtual router table index.')
vrrpNewCfgVirtRtrGrpID = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpID.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpID.setDescription('The VRRP virtual router identifier.')
vrrpNewCfgVirtRtrGrpIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 7, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpIfIndex.setDescription('The IfIndex that the VRRP virtual router is representing.')
vrrpNewCfgVirtRtrGrpInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpInterval.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpInterval.setDescription('The time interval between VRRP advertisements in seconds.')
vrrpNewCfgVirtRtrGrpPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpPriority.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpPriority.setDescription('The priority value to be used by the specified VRRP virtual router.')
vrrpNewCfgVirtRtrGrpPreempt = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpPreempt.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpPreempt.setDescription('This is for controlling whether a higher priority Backup\n         VRRP virtual router preempts a low priority Master.\n\n         enabled(1)  - allow preemption\n         disabled(2) - prohibit preemption')
vrrpNewCfgVirtRtrGrpState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpState.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpState.setDescription('Enable or disable the VRRP virtual router.')
vrrpNewCfgVirtRtrGrpDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 7, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpDelete.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpDelete.setDescription('When set to the value of 2 (delete), the entire row is deleted. \n         When read, other(1) is returned. Setting the value to anything \n         other than delete(2) has no effect on the state of the row.')
vrrpNewCfgVirtRtrGrpSharing = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 7, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpSharing.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpSharing.setDescription('Enable or disable load sharing of non-master virtual router.')
vrrpNewCfgVirtRtrGrpTckVirtRtr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 7, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpTckVirtRtr.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpTckVirtRtr.setDescription('Enable or disable tracking other virtual routers for\n         priority adjustment.  the priority increment is defined\n         in vrrpNewCfgGenTckVirtRtrInc.')
vrrpNewCfgVirtRtrGrpTckIpIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 7, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpTckIpIntf.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpTckIpIntf.setDescription('Enable or disable tracking other router interfaces for\n         priority adjustment.  the priority increment is defined\n         in vrrpNewCfgGenTckIpIntfInc.')
vrrpNewCfgVirtRtrGrpTckVlanPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 7, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpTckVlanPort.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpTckVlanPort.setDescription('Enable or disable tracking port state of VLAN ports\n         for priority adjustment.  the priority increment is\n         defined in vrrpNewCfgGenTckVlanPortInc.')
vrrpNewCfgVirtRtrGrpTckL4Port = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 7, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpTckL4Port.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpTckL4Port.setDescription('Enable or disable tracking Layer 4 port states for\n         priority adjustment.  the priority increment is defined\n         in vrrpNewCfgGenTckL4PortInc.  This is applied when\n         virtual server is configured as a VRRP virtual router.')
vrrpNewCfgVirtRtrGrpTckRServer = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 7, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpTckRServer.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpTckRServer.setDescription('Enable or disable tracking real server states for\n         priority adjustment.  the priority increment is defined\n         in vrrpNewCfgGenTckRServerInc.  This is applied when\n         virtual server is configured as a VRRP virtual router.')
vrrpNewCfgVirtRtrGrpTckHsrp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 7, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpTckHsrp.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpTckHsrp.setDescription('Enable or disable tracking HSRP advertisements for\n         priority adjustment.  the priority increment is defined\n         in vrrpNewCfgGenTckHsrpInc.  This is applied when\n         virtual server is configured as a VRRP virtual router.')
vrrpNewCfgVirtRtrGrpTckHsrv = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 7, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpTckHsrv.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpTckHsrv.setDescription('Enable or disable tracking HSRP by VLAN advertisements for\n                 priority adjustment.  The priority increment is defined\n                 in vrrpNewCfgGenTckHsrvInc.  This is applied when\n                 virtual server is configured as a VRRP virtual router.')
vrrpVirtRtrTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpVirtRtrTableMaxSize.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpVirtRtrTableMaxSize.setDescription('The maximum number of entries in VRRP virtual router table.')
vrrpIfTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpIfTableMaxSize.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpIfTableMaxSize.setDescription('The maximum number of entries in VRRP interface table.')
vrrpVirtRtrGrpTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpVirtRtrGrpTableMaxSize.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpVirtRtrGrpTableMaxSize.setDescription('The maximum number of entries in VRRP Group table.')
ripStatInPkts = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripStatInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: ripStatInPkts.setDescription('The total number of good RIP packets recieved.')
ripStatOutPkts = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripStatOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: ripStatOutPkts.setDescription('The total number of RIP packets transmitted.')
ripStatInErrorPkts = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripStatInErrorPkts.setStatus('mandatory')
if mibBuilder.loadTexts: ripStatInErrorPkts.setDescription('The total number of error RIP packets recieved.')
ripStatRoutesAgedOut = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripStatRoutesAgedOut.setStatus('mandatory')
if mibBuilder.loadTexts: ripStatRoutesAgedOut.setDescription('The total number of RIP routes which have aged out.')
arpStatEntries = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 3, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpStatEntries.setStatus('mandatory')
if mibBuilder.loadTexts: arpStatEntries.setDescription('The current number of ARP entries.')
arpStatHighWater = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 3, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpStatHighWater.setStatus('mandatory')
if mibBuilder.loadTexts: arpStatHighWater.setDescription('The highest number of ARP entries.')
arpStatMaxEntries = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 3, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpStatMaxEntries.setStatus('mandatory')
if mibBuilder.loadTexts: arpStatMaxEntries.setDescription('The maximum number of ARP entries.')
routeStatEntries = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 4, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routeStatEntries.setStatus('mandatory')
if mibBuilder.loadTexts: routeStatEntries.setDescription('The current number of IP routes.')
routeStatHighWater = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 4, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routeStatHighWater.setStatus('mandatory')
if mibBuilder.loadTexts: routeStatHighWater.setDescription('The highest number of IP routes.')
routeStatMaxEntries = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 4, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routeStatMaxEntries.setStatus('mandatory')
if mibBuilder.loadTexts: routeStatMaxEntries.setDescription('The maximum number of IP routes.')
dnsStatInGoodDnsRequests = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 5, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsStatInGoodDnsRequests.setStatus('mandatory')
if mibBuilder.loadTexts: dnsStatInGoodDnsRequests.setDescription('The number of good DNS requests which are received.')
dnsStatInBadDnsRequests = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 5, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsStatInBadDnsRequests.setStatus('mandatory')
if mibBuilder.loadTexts: dnsStatInBadDnsRequests.setDescription('The number of bad DNS requests which are received.')
vrrpStatInAdvers = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 9, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpStatInAdvers.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpStatInAdvers.setDescription('The number of good VRRP advertisements which are received.')
vrrpStatOutAdvers = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 9, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpStatOutAdvers.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpStatOutAdvers.setDescription('The number of good VRRP advertisements which are transmitted.')
vrrpStatOutBadAdvers = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 9, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpStatOutBadAdvers.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpStatOutBadAdvers.setDescription('The number of bad VRRP advertisements which are received.')
ipRouteInfoTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 3, 1), )
if mibBuilder.loadTexts: ipRouteInfoTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipRouteInfoTable.setDescription('The table of run-time IP routes.')
ipRouteInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 3, 1, 1), ).setIndexNames((0, "ALTEON-TS-NETWORK-MIB", "ipRouteInfoIndx"))
if mibBuilder.loadTexts: ipRouteInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipRouteInfoEntry.setDescription('A row in the run-time IP route table')
ipRouteInfoIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRouteInfoIndx.setStatus('mandatory')
if mibBuilder.loadTexts: ipRouteInfoIndx.setDescription('The index of this route table.')
ipRouteInfoDestIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 3, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRouteInfoDestIp.setStatus('mandatory')
if mibBuilder.loadTexts: ipRouteInfoDestIp.setDescription('The destination IP address of this route.')
ipRouteInfoMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 3, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRouteInfoMask.setStatus('mandatory')
if mibBuilder.loadTexts: ipRouteInfoMask.setDescription('The destination IP mask of this route.')
ipRouteInfoGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 3, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRouteInfoGateway.setStatus('mandatory')
if mibBuilder.loadTexts: ipRouteInfoGateway.setDescription('The next-hop router address for this route.')
ipRouteInfoTag = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("fixed", 1), ("icmp", 2), ("static", 3), ("snmp", 4), ("addr", 5), ("rip", 6), ("broadcast", 7), ("martian", 8), ("multicast", 9), ("vip", 10), ("bgp", 11), ("none", 12), ("ospf", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRouteInfoTag.setStatus('mandatory')
if mibBuilder.loadTexts: ipRouteInfoTag.setDescription('The tag-type for this route.')
ipRouteInfoType = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("indirect", 1), ("direct", 2), ("local", 3), ("broadcast", 4), ("martian", 5), ("multicast", 6), ("other", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRouteInfoType.setStatus('mandatory')
if mibBuilder.loadTexts: ipRouteInfoType.setDescription('The type of the route.')
ipRouteInfoInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 3, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRouteInfoInterface.setStatus('mandatory')
if mibBuilder.loadTexts: ipRouteInfoInterface.setDescription('The interface number for which the destination\taddress is applicable.')
ospfCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 21))
ospfGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 21, 1))
ospfCurCfgDefaultRouteMetric = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 21, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgDefaultRouteMetric.setStatus('mandatory')
if mibBuilder.loadTexts: ospfCurCfgDefaultRouteMetric.setDescription('Specify the metric to be assigned.')
ospfNewCfgDefaultRouteMetric = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 21, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfNewCfgDefaultRouteMetric.setStatus('mandatory')
if mibBuilder.loadTexts: ospfNewCfgDefaultRouteMetric.setDescription('Specify the metric to be assigned.')
ospfCurCfgDefaultRouteMetricType = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 21, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("type1", 2), ("type2", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgDefaultRouteMetricType.setStatus('mandatory')
if mibBuilder.loadTexts: ospfCurCfgDefaultRouteMetricType.setDescription('Specify the AS External metric type to be assigned.')
ospfNewCfgDefaultRouteMetricType = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 21, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("type1", 2), ("type2", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfNewCfgDefaultRouteMetricType.setStatus('mandatory')
if mibBuilder.loadTexts: ospfNewCfgDefaultRouteMetricType.setDescription('Specify the AS External metric type to be assigned.')
ospfIntfTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 21, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfTableMaxSize.setStatus('mandatory')
if mibBuilder.loadTexts: ospfIntfTableMaxSize.setDescription('The maximum number of rows in the OSPF Interface table.')
ospfAreaTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 21, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaTableMaxSize.setStatus('mandatory')
if mibBuilder.loadTexts: ospfAreaTableMaxSize.setDescription('The maximum number of rows in the OSPF Area table.')
ospfRangeTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 21, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfRangeTableMaxSize.setStatus('mandatory')
if mibBuilder.loadTexts: ospfRangeTableMaxSize.setDescription('The maximum number of rows in the OSPF Range table.')
ospfVirtIntfTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 21, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfVirtIntfTableMaxSize.setStatus('mandatory')
if mibBuilder.loadTexts: ospfVirtIntfTableMaxSize.setDescription('The maximum number of rows in the OSPF Virtual Interface\n         table.')
ospfHostTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 21, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfHostTableMaxSize.setStatus('mandatory')
if mibBuilder.loadTexts: ospfHostTableMaxSize.setDescription('The maximum number of rows in the OSPF Host table.')
ospfCurCfgAreaTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 21, 2), )
if mibBuilder.loadTexts: ospfCurCfgAreaTable.setStatus('mandatory')
if mibBuilder.loadTexts: ospfCurCfgAreaTable.setDescription('The table of OSPF Area configuration in the current_config.')
ospfCurCfgAreaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 21, 2, 1), ).setIndexNames((0, "ALTEON-TS-NETWORK-MIB", "ospfCurCfgAreaIndex"), (0, "ALTEON-TS-NETWORK-MIB", "ospfCurCfgAreaId"))
if mibBuilder.loadTexts: ospfCurCfgAreaEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ospfCurCfgAreaEntry.setDescription('Information about a OSPF area.')
ospfCurCfgAreaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 21, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgAreaIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ospfCurCfgAreaIndex.setDescription('The OSPF area number for which the OSPF area table is related.')
ospfCurCfgAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 21, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgAreaId.setStatus('mandatory')
if mibBuilder.loadTexts: ospfCurCfgAreaId.setDescription('The IP Address of the OSPF area.')
ospfCurCfgAreaSpfInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 21, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgAreaSpfInterval.setStatus('mandatory')
if mibBuilder.loadTexts: ospfCurCfgAreaSpfInterval.setDescription('The SPF interval for the OSPF area.')
ospfCurCfgAreaAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 21, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("password", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgAreaAuthType.setStatus('mandatory')
if mibBuilder.loadTexts: ospfCurCfgAreaAuthType.setDescription('Type of authentication being used.\n\t none(1) - no authentication\n\t password(2) - use password.')
ospfNewCfgAreaTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 21, 3), )
if mibBuilder.loadTexts: ospfNewCfgAreaTable.setStatus('mandatory')
if mibBuilder.loadTexts: ospfNewCfgAreaTable.setDescription('The table of OSPF Area configuration in the new_config.')
ospfNewCfgAreaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 21, 3, 1), ).setIndexNames((0, "ALTEON-TS-NETWORK-MIB", "ospfNewCfgAreaIndex"), (0, "ALTEON-TS-NETWORK-MIB", "ospfNewCfgAreaId"))
if mibBuilder.loadTexts: ospfNewCfgAreaEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ospfNewCfgAreaEntry.setDescription('Information about a OSPF area.')
ospfNewCfgAreaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 21, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfNewCfgAreaIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ospfNewCfgAreaIndex.setDescription('The OSPF area number for which the OSPF area table is related.')
ospfNewCfgAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 21, 3, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfNewCfgAreaId.setStatus('mandatory')
if mibBuilder.loadTexts: ospfNewCfgAreaId.setDescription('The IP Address of the OSPF area.')
ospfNewCfgAreaSpfInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 21, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfNewCfgAreaSpfInterval.setStatus('mandatory')
if mibBuilder.loadTexts: ospfNewCfgAreaSpfInterval.setDescription('The SPF interval for the OSPF area.')
ospfNewCfgAreaAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 21, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("password", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfNewCfgAreaAuthType.setStatus('mandatory')
if mibBuilder.loadTexts: ospfNewCfgAreaAuthType.setDescription('Type of authentication being used.\n\t none(1) - no authentication\n\t password(2) - use password.')
ospfGeneralStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 1))
ospfCumRxTxStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 1, 1))
ospfCumNbrChangeStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 1, 2))
ospfCumIntfChangeStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 1, 3))
ospfTimersKickOffStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 1, 4))
ospfArea = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 2))
ospfAreaRxTxStats = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 2, 1), )
if mibBuilder.loadTexts: ospfAreaRxTxStats.setStatus('mandatory')
if mibBuilder.loadTexts: ospfAreaRxTxStats.setDescription('The table of OSPF Area Rx/Tx Statistics.')
ospfAreaRxTxStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 2, 1, 1), ).setIndexNames((0, "ALTEON-TS-NETWORK-MIB", "ospfAreaRxTxIndex"))
if mibBuilder.loadTexts: ospfAreaRxTxStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ospfAreaRxTxStatsEntry.setDescription('Rx Tx packet Statistics about a OSPF area.')
ospfAreaRxTxIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaRxTxIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ospfAreaRxTxIndex.setDescription('The index of the ospf Area for which these statistics apply.')
ospfAreaRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaRxPkts.setStatus('mandatory')
if mibBuilder.loadTexts: ospfAreaRxPkts.setDescription('The total number of OSPF packets received in this OSPF area.')
ospfAreaTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaTxPkts.setStatus('mandatory')
if mibBuilder.loadTexts: ospfAreaTxPkts.setDescription('The total number of OSPF packets transmitted in this OSPF area.')
ospfAreaRxHello = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaRxHello.setStatus('mandatory')
if mibBuilder.loadTexts: ospfAreaRxHello.setDescription('The total number of Hello packets received in this OSPF area.')
ospfAreaTxHello = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaTxHello.setStatus('mandatory')
if mibBuilder.loadTexts: ospfAreaTxHello.setDescription('The total number of Hello packets transmitted in this OSPF\n         area.')
ospfAreaRxDatabase = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaRxDatabase.setStatus('mandatory')
if mibBuilder.loadTexts: ospfAreaRxDatabase.setDescription('The total number of Database Description packets transmitted \n         for this OSPF area.')
ospfAreaTxDatabase = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaTxDatabase.setStatus('mandatory')
if mibBuilder.loadTexts: ospfAreaTxDatabase.setDescription('The total number of Database Description packets transmitted \n         for this OSPF area.')
ospfAreaRxlsReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaRxlsReqs.setStatus('mandatory')
if mibBuilder.loadTexts: ospfAreaRxlsReqs.setDescription('The total number of Link State Request packets received for \n         this OSPF area.')
ospfAreaTxlsReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaTxlsReqs.setStatus('mandatory')
if mibBuilder.loadTexts: ospfAreaTxlsReqs.setDescription('The total number of Link State Request packets transmitted for \n         this OSPF area.')
ospfAreaRxlsAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaRxlsAcks.setStatus('mandatory')
if mibBuilder.loadTexts: ospfAreaRxlsAcks.setDescription('The total number of Link State Acknowledgement packets received for \n         this OSPF area.')
ospfAreaTxlsAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaTxlsAcks.setStatus('mandatory')
if mibBuilder.loadTexts: ospfAreaTxlsAcks.setDescription('The total number of Link State Acknowledgement packets transmitted\n         for this OSPF area.')
ospfAreaRxlsUpdates = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaRxlsUpdates.setStatus('mandatory')
if mibBuilder.loadTexts: ospfAreaRxlsUpdates.setDescription('The total number of Link State Update packets received for \n         this OSPF area.')
ospfAreaTxlsUpdates = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaTxlsUpdates.setStatus('mandatory')
if mibBuilder.loadTexts: ospfAreaTxlsUpdates.setDescription('The total number of Link State Update packets transmitted for \n         this OSPF area.')
ospfAreaNbrChangeStats = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 2, 2), )
if mibBuilder.loadTexts: ospfAreaNbrChangeStats.setStatus('mandatory')
if mibBuilder.loadTexts: ospfAreaNbrChangeStats.setDescription('The table of OSPF Area Neighbour Statistics.')
ospfAreaNbrChangeStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 2, 2, 1), ).setIndexNames((0, "ALTEON-TS-NETWORK-MIB", "ospfAreaNbrIndex"))
if mibBuilder.loadTexts: ospfAreaNbrChangeStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ospfAreaNbrChangeStatsEntry.setDescription('Area Neighbour Change Statistics about a OSPF area.')
ospfAreaNbrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaNbrIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ospfAreaNbrIndex.setDescription('The index of the ospf Area for which these statistics apply.')
ospfAreaNbrhello = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 2, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaNbrhello.setStatus('mandatory')
if mibBuilder.loadTexts: ospfAreaNbrhello.setDescription('The total number of Hello packets received from neighbours\n         in this OSPF area.')
ospfAreaNbrStart = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 2, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaNbrStart.setStatus('mandatory')
if mibBuilder.loadTexts: ospfAreaNbrStart.setDescription('The total number of neighbours in this state (i.e. an indication\n         that  Hello packets should now be sent to the neighbour at intervals\n         of HelloInterval seconds.) in this OSPF area.')
ospfAreaNbrAdjointOk = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 2, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaNbrAdjointOk.setStatus('mandatory')
if mibBuilder.loadTexts: ospfAreaNbrAdjointOk.setDescription('The total number of decisions to be made (again) as to whether\n         an adjacency should be established/maintained with the neighbour.\n         for this OSPF area.')
ospfAreaNbrNegotiationDone = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 2, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaNbrNegotiationDone.setStatus('mandatory')
if mibBuilder.loadTexts: ospfAreaNbrNegotiationDone.setDescription('The total number of neighbours in this state wherein the \n         Master/slave relationship has been negotiated, and sequence\n         numbers have been exchanged, for this OSPF area.')
ospfAreaNbrExchangeDone = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaNbrExchangeDone.setStatus('mandatory')
if mibBuilder.loadTexts: ospfAreaNbrExchangeDone.setDescription("The total number of neighbours in this state (i.e. in an\n         adjacency's final state) having transimitted a full sequence \n         of Database Description packets, for this OSPF area.")
ospfAreaNbrBadRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaNbrBadRequests.setStatus('mandatory')
if mibBuilder.loadTexts: ospfAreaNbrBadRequests.setDescription('The sum total number of Link State Requests which have been received\n         for a link state advertisement not contained in the database across\n         this OSPF area.')
ospfAreaNbrBadSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 2, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaNbrBadSequence.setStatus('mandatory')
if mibBuilder.loadTexts: ospfAreaNbrBadSequence.setDescription('The total number of Database Description packets which have been\n         received that either \n         a) has an unexpected DD sequence number\n         b) Unexpectedly has the init bit set\n         c) Has an options field differing from the last Options field\n            received in a Database Description packet.\n         Any of these conditions indicate that some error has occured during\n         adjacency establishment for this OSPF area.')
ospfAreaNbrLoadingDone = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 2, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaNbrLoadingDone.setStatus('mandatory')
if mibBuilder.loadTexts: ospfAreaNbrLoadingDone.setDescription('The total number of link state updates received for all \n         out-of-date portions of the database in this OSPF area.')
ospfAreaNbrN1way = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 2, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaNbrN1way.setStatus('mandatory')
if mibBuilder.loadTexts: ospfAreaNbrN1way.setDescription('The total number of Hello packets received from neighbours, in\n         which this router is not mentioned in this OSPF area.')
ospfAreaNbrRstAd = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 2, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaNbrRstAd.setStatus('mandatory')
if mibBuilder.loadTexts: ospfAreaNbrRstAd.setDescription('The total number of times the Neighbour adjacency has been reset\n         across this OPSF area.')
ospfAreaNbrDown = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 2, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaNbrDown.setStatus('mandatory')
if mibBuilder.loadTexts: ospfAreaNbrDown.setDescription('The total number of Neighbouring routers down (i.e. in the initial\n         state of a neighbour conversation.) in this OSPF area.')
ospfAreaChangeStats = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 2, 3), )
if mibBuilder.loadTexts: ospfAreaChangeStats.setStatus('mandatory')
if mibBuilder.loadTexts: ospfAreaChangeStats.setDescription('The table of OSPF Area Change Statistics.')
ospfAreaChangeStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 2, 3, 1), ).setIndexNames((0, "ALTEON-TS-NETWORK-MIB", "ospfAreaIntfIndex"))
if mibBuilder.loadTexts: ospfAreaChangeStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ospfAreaChangeStatsEntry.setDescription('Area  Change Statistics about a OSPF area.')
ospfAreaIntfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaIntfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ospfAreaIntfIndex.setDescription('The index of the OSPF Area for which these statistics apply.')
ospfAreaIntfHello = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 2, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaIntfHello.setStatus('mandatory')
if mibBuilder.loadTexts: ospfAreaIntfHello.setDescription('The total number of Hello packets sent on this OSPF area.')
ospfAreaIntfDown = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 2, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaIntfDown.setStatus('mandatory')
if mibBuilder.loadTexts: ospfAreaIntfDown.setDescription('The total number of interfaces down in this OSPF area.')
ospfAreaIntfLoop = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 2, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaIntfLoop.setStatus('mandatory')
if mibBuilder.loadTexts: ospfAreaIntfLoop.setDescription('The total number of interfaces no longer connected to \n         the attatched network in this OSPF area.')
ospfAreaIntfUnloop = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 2, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaIntfUnloop.setStatus('mandatory')
if mibBuilder.loadTexts: ospfAreaIntfUnloop.setDescription('The total number of interfaces connected to the attatched\n\t network in this OSPF area..')
ospfAreaIntfWaitTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 2, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaIntfWaitTimer.setStatus('mandatory')
if mibBuilder.loadTexts: ospfAreaIntfWaitTimer.setDescription('The total number of times the Wait Timer has been fired,\n         (indicating the end of the waiting period that is required\n          before electing a (Backup) Designated Router) for this \n          OSPF area.')
ospfAreaIntfBackup = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 2, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaIntfBackup.setStatus('mandatory')
if mibBuilder.loadTexts: ospfAreaIntfBackup.setDescription('The total number of Backup Designated Routers on the attatched\n         network for this OSPF area.')
ospfAreaIntfNbrChange = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 2, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaIntfNbrChange.setStatus('mandatory')
if mibBuilder.loadTexts: ospfAreaIntfNbrChange.setDescription('The total number of changes in the set of bidirectional neighbours\n         associated with the interface in this OSPF area.')
ospfInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 3))
ospfIntfRxTxStats = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 3, 1), )
if mibBuilder.loadTexts: ospfIntfRxTxStats.setStatus('mandatory')
if mibBuilder.loadTexts: ospfIntfRxTxStats.setDescription('The table of OSPF Interface Rx/Tx packet Statistics.')
ospfIntfRxTxStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 3, 1, 1), ).setIndexNames((0, "ALTEON-TS-NETWORK-MIB", "ospfIntfRxTxIndex"))
if mibBuilder.loadTexts: ospfIntfRxTxStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ospfIntfRxTxStatsEntry.setDescription('OSPF interface Rx/Tx packet statistics.')
ospfIntfRxTxIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfRxTxIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ospfIntfRxTxIndex.setDescription('The OSPF interface for which these statistics apply.')
ospfIntfRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 3, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfRxPkts.setStatus('mandatory')
if mibBuilder.loadTexts: ospfIntfRxPkts.setDescription('The total number of OSPF packets received for this OSPF interface.')
ospfIntfTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 3, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfTxPkts.setStatus('mandatory')
if mibBuilder.loadTexts: ospfIntfTxPkts.setDescription('The total number of OSPF packets transmitted for this OSPF interface.')
ospfIntfRxHello = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfRxHello.setStatus('mandatory')
if mibBuilder.loadTexts: ospfIntfRxHello.setDescription('The total number of Hello packets received \n         for this OSPF interface.')
ospfIntfTxHello = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfTxHello.setStatus('mandatory')
if mibBuilder.loadTexts: ospfIntfTxHello.setDescription('The total number of Hello packets transmitted \n         for this OSPF interface.')
ospfIntfRxDatabase = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfRxDatabase.setStatus('mandatory')
if mibBuilder.loadTexts: ospfIntfRxDatabase.setDescription('The total number of Database Description packets received \n         for this OSPF interface.')
ospfIntfTxDatabase = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 3, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfTxDatabase.setStatus('mandatory')
if mibBuilder.loadTexts: ospfIntfTxDatabase.setDescription('The total number of Database Description packets transmitted \n         for this OSPF interface.')
ospfIntfRxlsReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfRxlsReqs.setStatus('mandatory')
if mibBuilder.loadTexts: ospfIntfRxlsReqs.setDescription('The total number of Link State Request packets received\n         for this OSPF interface.')
ospfIntfTxlsReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 3, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfTxlsReqs.setStatus('mandatory')
if mibBuilder.loadTexts: ospfIntfTxlsReqs.setDescription('The total number of Link State Request packets transmitted\n         for this OSPF interface.')
ospfIntfRxlsAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 3, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfRxlsAcks.setStatus('mandatory')
if mibBuilder.loadTexts: ospfIntfRxlsAcks.setDescription('The total number of Link State Acknowledgement packets received\n         for this OSPF interface.')
ospfIntfTxlsAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 3, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfTxlsAcks.setStatus('mandatory')
if mibBuilder.loadTexts: ospfIntfTxlsAcks.setDescription('The total number of Link State Acknowledgement packets transmitted\n         for this OSPF interface.')
ospfIntfRxlsUpdates = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 3, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfRxlsUpdates.setStatus('mandatory')
if mibBuilder.loadTexts: ospfIntfRxlsUpdates.setDescription('The total number of Link State Update packets received for \n         this OSPF interface.')
ospfIntfTxlsUpdates = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 3, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfTxlsUpdates.setStatus('mandatory')
if mibBuilder.loadTexts: ospfIntfTxlsUpdates.setDescription('The total number of Link State Update packets transmitted for \n         this OSPF interface.')
ospfIntfNbrChangeStats = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 3, 2), )
if mibBuilder.loadTexts: ospfIntfNbrChangeStats.setStatus('mandatory')
if mibBuilder.loadTexts: ospfIntfNbrChangeStats.setDescription('The table of OSPF Interface Neighbour change Statistics.')
ospfIntfNbrChangeStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 3, 2, 1), ).setIndexNames((0, "ALTEON-TS-NETWORK-MIB", "ospfIntfNbrIndex"))
if mibBuilder.loadTexts: ospfIntfNbrChangeStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ospfIntfNbrChangeStatsEntry.setDescription('OSPF interface Neighbour Change statistics.')
ospfIntfNbrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfNbrIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ospfIntfNbrIndex.setDescription('The index of the OSPF Interface for which these statistics apply.')
ospfIntfNbrhello = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 3, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfNbrhello.setStatus('mandatory')
if mibBuilder.loadTexts: ospfIntfNbrhello.setDescription('The total number of Hello packets received from neighbours\n         in this OSPF interface.')
ospfIntfNbrStart = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 3, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfNbrStart.setStatus('mandatory')
if mibBuilder.loadTexts: ospfIntfNbrStart.setDescription('The total number of neighbours in this state (i.e. an indication\n         that  Hello packets should now be sent to the neighbour at intervals\n         of HelloInterval seconds.) in this OSPF interface.')
ospfIntfNbrAdjointOk = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 3, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfNbrAdjointOk.setStatus('mandatory')
if mibBuilder.loadTexts: ospfIntfNbrAdjointOk.setDescription('The total number of decisions to be made (again) as to whether\n         an adjacency should be established/maintained with the neighbour.\n         for this OSPF interface.')
ospfIntfNbrNegotiationDone = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 3, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfNbrNegotiationDone.setStatus('mandatory')
if mibBuilder.loadTexts: ospfIntfNbrNegotiationDone.setDescription('The total number of neighbours in this state wherein the \n         Master/slave relationship has been negotiated, and sequence\n         numbers have been exchanged, for this OSPF interface.')
ospfIntfNbrExchangeDone = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 3, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfNbrExchangeDone.setStatus('mandatory')
if mibBuilder.loadTexts: ospfIntfNbrExchangeDone.setDescription("The total number of neighbours in this state (i.e. in an\n         adjacency's final state) having transimitted a full sequence \n         of Database Description packets, for this OSPF interface.")
ospfIntfNbrBadRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 3, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfNbrBadRequests.setStatus('mandatory')
if mibBuilder.loadTexts: ospfIntfNbrBadRequests.setDescription('The total number of Link State Requests which have been received\n         for a link state advertisement not contained in the database for\n         this interface.')
ospfIntfNbrBadSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 3, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfNbrBadSequence.setStatus('mandatory')
if mibBuilder.loadTexts: ospfIntfNbrBadSequence.setDescription('The total number of Database Description packets which have been\n         received that either \n         a) has an unexpected DD sequence number\n         b) Unexpectedly has the init bit set\n         c) Has an options field differing from the last Options field\n            received in a Database Description packet.\n         Any of these conditions indicate that some error has occured during\n         adjacency establishment for this interface.')
ospfIntfNbrLoadingDone = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 3, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfNbrLoadingDone.setStatus('mandatory')
if mibBuilder.loadTexts: ospfIntfNbrLoadingDone.setDescription('The total number of link state updates received for all \n         out-of-date portions of the database for this OSPF interface.')
ospfIntfNbrN1way = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 3, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfNbrN1way.setStatus('mandatory')
if mibBuilder.loadTexts: ospfIntfNbrN1way.setDescription('The total number of Hello packets received from neighbours, in\n         which this router is not mentioned for this OSPF interface.')
ospfIntfNbrRstAd = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 3, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfNbrRstAd.setStatus('mandatory')
if mibBuilder.loadTexts: ospfIntfNbrRstAd.setDescription('The sum total number of times the Neighbour adjacency has been reset\n         on this interface.')
ospfIntfNbrDown = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 3, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfNbrDown.setStatus('mandatory')
if mibBuilder.loadTexts: ospfIntfNbrDown.setDescription('The total number of Neighbouring routers down (i.e. in the initial\n         state of a neighbour conversation.) for this interface.')
ospfIntfChangeStats = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 3, 3), )
if mibBuilder.loadTexts: ospfIntfChangeStats.setStatus('mandatory')
if mibBuilder.loadTexts: ospfIntfChangeStats.setDescription('The table of OSPF Interface change Statistics.')
ospfIntfChangeStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 3, 3, 1), ).setIndexNames((0, "ALTEON-TS-NETWORK-MIB", "ospfIntfIndex"))
if mibBuilder.loadTexts: ospfIntfChangeStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ospfIntfChangeStatsEntry.setDescription('OSPF interface Change statistics.')
ospfIntfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ospfIntfIndex.setDescription('The index of the OSPF Interface for which these statistics apply.')
ospfIntfHello = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 3, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfHello.setStatus('mandatory')
if mibBuilder.loadTexts: ospfIntfHello.setDescription('The total number of Hello packets sent by this interface.')
ospfIntfDown = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 3, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfDown.setStatus('mandatory')
if mibBuilder.loadTexts: ospfIntfDown.setDescription('The total number of times the interface was down.')
ospfIntfLoop = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 3, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfLoop.setStatus('mandatory')
if mibBuilder.loadTexts: ospfIntfLoop.setDescription('The total number of times the interface was no longer connected to \n         the attatched network.')
ospfIntfUnloop = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 3, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfUnloop.setStatus('mandatory')
if mibBuilder.loadTexts: ospfIntfUnloop.setDescription('The total number of times the interface, connected back to\n         the attatched network.')
ospfIntfWaitTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 3, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfWaitTimer.setStatus('mandatory')
if mibBuilder.loadTexts: ospfIntfWaitTimer.setDescription('The total number of times the Wait Timer has been fired,\n         (indicating the end of the waiting period that is required\n          before electing a (Backup) Designated Router) for this \n          OSPF interface.')
ospfIntfBackup = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 3, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfBackup.setStatus('mandatory')
if mibBuilder.loadTexts: ospfIntfBackup.setDescription('The total number of Backup Designated Routers on the attatched\n         network for this OSPF interface.')
ospfIntfNbrChange = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 3, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfNbrChange.setStatus('mandatory')
if mibBuilder.loadTexts: ospfIntfNbrChange.setDescription('The total number of changes in the set of bidirectional neighbours\n         associated with the interface for this OSPF interface.')
ospfCumRxPkts = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumRxPkts.setStatus('mandatory')
if mibBuilder.loadTexts: ospfCumRxPkts.setDescription('The sum total of all OSPF packets received on all OSPF areas\n         and interfaces.')
ospfCumTxPkts = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumTxPkts.setStatus('mandatory')
if mibBuilder.loadTexts: ospfCumTxPkts.setDescription('The sum total of all OSPF packets transmitted on all OSPF areas\n         and interfaces.')
ospfCumRxHello = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumRxHello.setStatus('mandatory')
if mibBuilder.loadTexts: ospfCumRxHello.setDescription('The sum total of all Hello packets received on all OSPF areas\n         and interfaces.')
ospfCumTxHello = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumTxHello.setStatus('mandatory')
if mibBuilder.loadTexts: ospfCumTxHello.setDescription('The sum total of all Hello packets transmitted on all OSPF areas\n         and interfaces.')
ospfCumRxDatabase = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumRxDatabase.setStatus('mandatory')
if mibBuilder.loadTexts: ospfCumRxDatabase.setDescription('The sum total of all Database Description packets received on\n         all OSPF areas and interfaces.')
ospfCumTxDatabase = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumTxDatabase.setStatus('mandatory')
if mibBuilder.loadTexts: ospfCumTxDatabase.setDescription('The sum total of all Database Description packets transmitted on\n         all OSPF areas and interfaces.')
ospfCumRxlsReqs = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumRxlsReqs.setStatus('mandatory')
if mibBuilder.loadTexts: ospfCumRxlsReqs.setDescription('The sum total of all Link State Request packets received on\n         all OSPF areas and interfaces.')
ospfCumTxlsReqs = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumTxlsReqs.setStatus('mandatory')
if mibBuilder.loadTexts: ospfCumTxlsReqs.setDescription('The sum total of all Link State Request packets transmitted on\n         all OSPF areas and interfaces.')
ospfCumRxlsAcks = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumRxlsAcks.setStatus('mandatory')
if mibBuilder.loadTexts: ospfCumRxlsAcks.setDescription('The sum total of all Link State Acknowledgement packets received\n         on all OSPF areas and interfaces.')
ospfCumTxlsAcks = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumTxlsAcks.setStatus('mandatory')
if mibBuilder.loadTexts: ospfCumTxlsAcks.setDescription('The sum total of all Link State Acknowledgement packets transmitted\n         on all OSPF areas and interfaces.')
ospfCumRxlsUpdates = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumRxlsUpdates.setStatus('mandatory')
if mibBuilder.loadTexts: ospfCumRxlsUpdates.setDescription('The sum total of all Link State Update packets received\n         on all OSPF areas and interfaces.')
ospfCumTxlsUpdates = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumTxlsUpdates.setStatus('mandatory')
if mibBuilder.loadTexts: ospfCumTxlsUpdates.setDescription('The sum total of all Link State Update packets transmitted\n         on all OSPF areas and interfaces.')
ospfCumNbrhello = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 1, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumNbrhello.setStatus('mandatory')
if mibBuilder.loadTexts: ospfCumNbrhello.setDescription('The sum total of all Hello packets received from neighbours\n         on all OSPF areas and interfaces.')
ospfCumNbrStart = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 1, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumNbrStart.setStatus('mandatory')
if mibBuilder.loadTexts: ospfCumNbrStart.setDescription('The sum total number of neighbours in this state (i.e. an indication\n         that  Hello packets should now be sent to the neighbour at intervals\n         of HelloInterval seconds.) across all OSPF areas and interfaces.')
ospfCumNbrAdjointOk = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 1, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumNbrAdjointOk.setStatus('mandatory')
if mibBuilder.loadTexts: ospfCumNbrAdjointOk.setDescription('The sum total number of decisions to be made (again) as to whether\n         an adjacency should be established/maintained with the neighbour\n         across all OSPF areas and interfaces.')
ospfCumNbrNegotiationDone = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 1, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumNbrNegotiationDone.setStatus('mandatory')
if mibBuilder.loadTexts: ospfCumNbrNegotiationDone.setDescription('The sum total number of neighbours in this state wherein the \n         Master/slave relationship has been negotiated, and sequence\n         numbers have been exchanged, across all OSPF areas and \n         interfaces.')
ospfCumNbrExchangeDone = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 1, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumNbrExchangeDone.setStatus('mandatory')
if mibBuilder.loadTexts: ospfCumNbrExchangeDone.setDescription("The sum total number of neighbours in this state (i.e. in an\n         adjacency's final state) having transimitted a full sequence \n         of Database Description packets, across all OSPF areas\n         and interfaces.")
ospfCumNbrBadRequests = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 1, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumNbrBadRequests.setStatus('mandatory')
if mibBuilder.loadTexts: ospfCumNbrBadRequests.setDescription('The sum total number of Link State Requests which have been received\n         for a link state advertisement not contained in the database across\n         all interfaces and OSPF areas.')
ospfCumNbrBadSequence = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 1, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumNbrBadSequence.setStatus('mandatory')
if mibBuilder.loadTexts: ospfCumNbrBadSequence.setDescription('The sum total number of Database Description packets which have been\n         received that either \n         a) has an unexpected DD sequence number\n         b) Unexpectedly has the init bit set\n         c) Has an options field differing from the last Options field\n            received in a Database Description packet.\n         Any of these conditions indicate that some error has occured during\n         adjacency establishment for all OSPF areas and interfaces.')
ospfCumNbrLoadingDone = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 1, 2, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumNbrLoadingDone.setStatus('mandatory')
if mibBuilder.loadTexts: ospfCumNbrLoadingDone.setDescription('The sum total number of link state updates received for all \n         out-of-date portions of the database across all OSPF areas\n         and interfaces.')
ospfCumNbrN1way = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 1, 2, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumNbrN1way.setStatus('mandatory')
if mibBuilder.loadTexts: ospfCumNbrN1way.setDescription('The sum total number of Hello packets received from neighbours, in\n         which this router is not mentioned across all OSPF interfaces\n         and areas.')
ospfCumNbrRstAd = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 1, 2, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumNbrRstAd.setStatus('mandatory')
if mibBuilder.loadTexts: ospfCumNbrRstAd.setDescription('The sum total number of times the Neighbour adjacency has been reset\n         across all OPSF areas and interfaces.')
ospfCumNbrDown = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 1, 2, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumNbrDown.setStatus('mandatory')
if mibBuilder.loadTexts: ospfCumNbrDown.setDescription('The total number of Neighbouring routers down (i.e. in the initial\n         state of a neighbour conversation.) across all OSPF areas and \n         interfaces.')
ospfCumIntfHello = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 1, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumIntfHello.setStatus('mandatory')
if mibBuilder.loadTexts: ospfCumIntfHello.setDescription('The sum total number of Hello packets sent on all interfaces \n         and areas')
ospfCumIntfDown = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 1, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumIntfDown.setStatus('mandatory')
if mibBuilder.loadTexts: ospfCumIntfDown.setDescription('The sum total number of interfaces down in all OSPF areas.')
ospfCumIntfLoop = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 1, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumIntfLoop.setStatus('mandatory')
if mibBuilder.loadTexts: ospfCumIntfLoop.setDescription('The sum total of interfaces no longer connected to \n         the attatched network across all OSPF areas and interfaces.')
ospfCumIntfUnloop = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 1, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumIntfUnloop.setStatus('mandatory')
if mibBuilder.loadTexts: ospfCumIntfUnloop.setDescription('The sum total number of interfaces, connected to\n         the attatched network in all OSPF areas.')
ospfCumIntfWaitTimer = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 1, 3, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumIntfWaitTimer.setStatus('mandatory')
if mibBuilder.loadTexts: ospfCumIntfWaitTimer.setDescription('The sum total number of times the Wait Timer has been fired,\n         (indicating the end of the waiting period that is required\n          before electing a (Backup) Designated Router) across all \n          OSPF areas and interfaces.')
ospfCumIntfBackup = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 1, 3, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumIntfBackup.setStatus('mandatory')
if mibBuilder.loadTexts: ospfCumIntfBackup.setDescription('The sum total number of Backup Designated Routers on the attatched\n         network for all OSPF areas and interfaces.')
ospfCumIntfNbrChange = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 1, 3, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumIntfNbrChange.setStatus('mandatory')
if mibBuilder.loadTexts: ospfCumIntfNbrChange.setDescription('The sum total number of changes in the set of bidirectional\n         neighbours associated with any interface across all OSPF areas.')
ospfTmrsKckOffHello = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 1, 4, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfTmrsKckOffHello.setStatus('mandatory')
if mibBuilder.loadTexts: ospfTmrsKckOffHello.setDescription('The sum total number of times the Hello timer has been fired\n         (which triggers the send of a Hello packet) across all OPSF \n         areas and interfaces.')
ospfTmrsKckOffRetransmit = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 1, 4, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfTmrsKckOffRetransmit.setStatus('mandatory')
if mibBuilder.loadTexts: ospfTmrsKckOffRetransmit.setDescription('The sum total number of times the Retransmit timer has been\n         fired across all OPSF areas and interfaces.')
ospfTmrsKckOffLsaLock = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 1, 4, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfTmrsKckOffLsaLock.setStatus('mandatory')
if mibBuilder.loadTexts: ospfTmrsKckOffLsaLock.setDescription('The sum total number of times the Lsa Lock timer has been \n         fired across all OSPF areas and interfaces.')
ospfTmrsKckOffLsaAck = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 1, 4, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfTmrsKckOffLsaAck.setStatus('mandatory')
if mibBuilder.loadTexts: ospfTmrsKckOffLsaAck.setDescription('The sum total number of times the Lsa Ack timer has been \n         fired across all ospf areas and interfaces.')
ospfTmrsKckOffDbage = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 1, 4, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfTmrsKckOffDbage.setStatus('mandatory')
if mibBuilder.loadTexts: ospfTmrsKckOffDbage.setDescription('The total number of times the Dbage has been fired.')
ospfTmrsKckOffSummary = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 1, 4, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfTmrsKckOffSummary.setStatus('mandatory')
if mibBuilder.loadTexts: ospfTmrsKckOffSummary.setDescription('The total number of times the Summary timer has been fired.')
ospfTmrsKckOffAseExport = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 22, 1, 4, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfTmrsKckOffAseExport.setStatus('mandatory')
if mibBuilder.loadTexts: ospfTmrsKckOffAseExport.setDescription('The total number of times the ASE Export timer has been fired.')
ospfGeneralInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 5, 1))
ospfStartTime = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfStartTime.setStatus('mandatory')
if mibBuilder.loadTexts: ospfStartTime.setDescription('The time when ospf has been started.')
ospfProcessUptime = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 5, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfProcessUptime.setStatus('mandatory')
if mibBuilder.loadTexts: ospfProcessUptime.setDescription('The time since ospf has been started.')
ospfLsTypesSupported = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfLsTypesSupported.setStatus('mandatory')
if mibBuilder.loadTexts: ospfLsTypesSupported.setDescription('The Link State Types that are supported.')
ospfIntfCountForRouter = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfCountForRouter.setStatus('mandatory')
if mibBuilder.loadTexts: ospfIntfCountForRouter.setDescription('The number of interfaces for this router.')
ospfVlinkCountForRouter = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfVlinkCountForRouter.setStatus('mandatory')
if mibBuilder.loadTexts: ospfVlinkCountForRouter.setDescription('The number of virtual links for this router.')
ospfTotalNeighbours = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfTotalNeighbours.setStatus('mandatory')
if mibBuilder.loadTexts: ospfTotalNeighbours.setDescription('The total number of OSPF neighbours.')
ospfNbrInInitState = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 5, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfNbrInInitState.setStatus('mandatory')
if mibBuilder.loadTexts: ospfNbrInInitState.setDescription('The number of neighbours in the initial state of exchange.')
ospfNbrInExchState = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 5, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfNbrInExchState.setStatus('mandatory')
if mibBuilder.loadTexts: ospfNbrInExchState.setDescription('The number of neighbours in the exchange state.')
ospfNbrInFullState = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 5, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfNbrInFullState.setStatus('mandatory')
if mibBuilder.loadTexts: ospfNbrInFullState.setDescription('The number of neighbours in the Full state of exchange.')
ospfTotalAreas = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 5, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfTotalAreas.setStatus('mandatory')
if mibBuilder.loadTexts: ospfTotalAreas.setDescription('The Total number of areas.')
ospfTotalTransitAreas = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 5, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfTotalTransitAreas.setStatus('mandatory')
if mibBuilder.loadTexts: ospfTotalTransitAreas.setDescription('The Total number of Transit areas.')
ospfTotalNssaAreas = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 5, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfTotalNssaAreas.setStatus('mandatory')
if mibBuilder.loadTexts: ospfTotalNssaAreas.setDescription('The Total number of NSSA areas.')
ospfAreaInfoTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 5, 2), )
if mibBuilder.loadTexts: ospfAreaInfoTable.setStatus('mandatory')
if mibBuilder.loadTexts: ospfAreaInfoTable.setDescription('The table of OSPF Area information.')
ospfAreaInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 5, 2, 1), ).setIndexNames((0, "ALTEON-TS-NETWORK-MIB", "ospfAreaInfoIndex"))
if mibBuilder.loadTexts: ospfAreaInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ospfAreaInfoEntry.setDescription('Information about a OSPF area.')
ospfAreaInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaInfoIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ospfAreaInfoIndex.setDescription('The OSPF area number for which the OSPF info table is related.')
ospfTotalNumberOfInterfaces = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 5, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfTotalNumberOfInterfaces.setStatus('mandatory')
if mibBuilder.loadTexts: ospfTotalNumberOfInterfaces.setDescription('The total number of interfaces for this OSPF area.')
ospfNumberOfInterfacesUp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 5, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfNumberOfInterfacesUp.setStatus('mandatory')
if mibBuilder.loadTexts: ospfNumberOfInterfacesUp.setDescription('The number of interfaces UP in area.')
ospfNumberOfLsdbEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 5, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfNumberOfLsdbEntries.setStatus('mandatory')
if mibBuilder.loadTexts: ospfNumberOfLsdbEntries.setDescription('The number of Link State Database entries for this OSPF area.')
ospfAreaInfoId = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 5, 2, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaInfoId.setStatus('mandatory')
if mibBuilder.loadTexts: ospfAreaInfoId.setDescription('The IP address of the OSPF area.')
ospfIntfInfoTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 5, 3), )
if mibBuilder.loadTexts: ospfIntfInfoTable.setStatus('mandatory')
if mibBuilder.loadTexts: ospfIntfInfoTable.setDescription('The table of OSPF Interface information.')
ospfIntfInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 5, 3, 1), ).setIndexNames((0, "ALTEON-TS-NETWORK-MIB", "ospfIfInfoIndex"))
if mibBuilder.loadTexts: ospfIntfInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ospfIntfInfoEntry.setDescription('Information about a OSPF interface.')
ospfIfInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 5, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIfInfoIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ospfIfInfoIndex.setDescription('The OSPF interface number for which the OSPF info table is related.')
ospfIfDesignatedRouterIP = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 5, 3, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIfDesignatedRouterIP.setStatus('mandatory')
if mibBuilder.loadTexts: ospfIfDesignatedRouterIP.setDescription('The OSPF Designated Router ID (IP Address) for this OSPF interface.')
ospfIfBackupDesignatedRouterIP = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 5, 3, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIfBackupDesignatedRouterIP.setStatus('mandatory')
if mibBuilder.loadTexts: ospfIfBackupDesignatedRouterIP.setDescription('The OSPF Backup Designated Router ID (IP Address) for this OSPF\n         interface.')
ospfIfWaitInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 5, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIfWaitInterval.setStatus('mandatory')
if mibBuilder.loadTexts: ospfIfWaitInterval.setDescription('The OSPF Wait interval for this OSPF interface.')
ospfIfTotalNeighbours = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 5, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIfTotalNeighbours.setStatus('mandatory')
if mibBuilder.loadTexts: ospfIfTotalNeighbours.setDescription('The Total number of neighbours for this OSPF interface.')
ospfIfInfoIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 5, 3, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIfInfoIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: ospfIfInfoIpAddress.setDescription('The IP address of the OSPF interface.')
ospfRouterLSAInfoTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 5, 4), )
if mibBuilder.loadTexts: ospfRouterLSAInfoTable.setStatus('mandatory')
if mibBuilder.loadTexts: ospfRouterLSAInfoTable.setDescription('The table of OSPF Router LSA information.')
ospfRouterLSAInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 5, 4, 1), ).setIndexNames((0, "ALTEON-TS-NETWORK-MIB", "routerLSAAreaIndex"), (0, "ALTEON-TS-NETWORK-MIB", "routerLSALinkIndex"), (0, "ALTEON-TS-NETWORK-MIB", "routerLSAId"))
if mibBuilder.loadTexts: ospfRouterLSAInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ospfRouterLSAInfoEntry.setDescription('A row in the Router LSA Table indexed by area, routerlink and routerId.')
routerLSAAreaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 5, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerLSAAreaIndex.setStatus('mandatory')
if mibBuilder.loadTexts: routerLSAAreaIndex.setDescription('The OSPF AreaID for which the OSPF Router LSA info table is related.')
routerLSALinkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 5, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerLSALinkIndex.setStatus('mandatory')
if mibBuilder.loadTexts: routerLSALinkIndex.setDescription('The OSPF Link ID for which the OSPF Router LSA info table is related.')
routerLSAId = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 5, 4, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerLSAId.setStatus('mandatory')
if mibBuilder.loadTexts: routerLSAId.setDescription('The OSPF RouterID for which the OSPF Router LSA info table is related.')
routerLSALinkID = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 5, 4, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerLSALinkID.setStatus('mandatory')
if mibBuilder.loadTexts: routerLSALinkID.setDescription("Identifes the object that this router link connects to. Value\n\t depends on the link's type.")
routerLSALinkData = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 5, 4, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerLSALinkData.setStatus('mandatory')
if mibBuilder.loadTexts: routerLSALinkData.setDescription("This value depends on the link's Type field. For connections\n\t to stub networks, Link Data specifies the network's IP address\n\t mask. For unnumbered point-to-point connections, it specifies\n         the interface's MIB-II ifIndex value and the value of Link Data\n         is redundant. For the other link types it specifies the router\n         interface's IP address.")
routerLSALinkIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 5, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerLSALinkIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: routerLSALinkIfIndex.setDescription("For unnumbered point-to-point connections, LinkIfIndex specifies\n         the interface's MIB-II ifIndex value.")
routerLSANoOfTOSMetrics = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 5, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerLSANoOfTOSMetrics.setStatus('mandatory')
if mibBuilder.loadTexts: routerLSANoOfTOSMetrics.setDescription('The number of different TOS metrics given for this link, \n         not counting the required link metric(referred to as the TOS 0\n         metric).')
routerLSANoOfTOSZeroMetrics = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 5, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerLSANoOfTOSZeroMetrics.setStatus('mandatory')
if mibBuilder.loadTexts: routerLSANoOfTOSZeroMetrics.setDescription('The number of Zero TOS metrics given for this link.')
arpInfoTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 3, 2), )
if mibBuilder.loadTexts: arpInfoTable.setStatus('mandatory')
if mibBuilder.loadTexts: arpInfoTable.setDescription('The table of ARP entries.')
arpInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 3, 2, 1), ).setIndexNames((0, "ALTEON-TS-NETWORK-MIB", "arpInfoDestIp"))
if mibBuilder.loadTexts: arpInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: arpInfoEntry.setDescription('A row in the ARP table')
arpInfoDestIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 3, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpInfoDestIp.setStatus('mandatory')
if mibBuilder.loadTexts: arpInfoDestIp.setDescription('The destination IP address of the ARP entry.')
arpInfoMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 3, 2, 1, 2), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpInfoMacAddr.setStatus('mandatory')
if mibBuilder.loadTexts: arpInfoMacAddr.setDescription('The MAC address for the ARP entry.')
arpInfoVLAN = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpInfoVLAN.setStatus('mandatory')
if mibBuilder.loadTexts: arpInfoVLAN.setDescription('The VLAN identifier for the ARP entry.')
arpInfoSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpInfoSrcPort.setStatus('mandatory')
if mibBuilder.loadTexts: arpInfoSrcPort.setDescription("The  port number on which this entry's equivalence is effective.")
arpInfoRefPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 3, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpInfoRefPorts.setStatus('mandatory')
if mibBuilder.loadTexts: arpInfoRefPorts.setDescription('The rference ports associated with this ARP entry.')
arpInfoFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("clear", 1), ("unresolved", 2), ("permanent", 3), ("indirect", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpInfoFlag.setStatus('mandatory')
if mibBuilder.loadTexts: arpInfoFlag.setDescription('The flag associated with this ARP entry.')
vrrpInfoVirtRtrTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 4, 1), )
if mibBuilder.loadTexts: vrrpInfoVirtRtrTable.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpInfoVirtRtrTable.setDescription('The table of VRRP virtual router run-time information.')
vrrpInfoVirtRtrTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 4, 1, 1), ).setIndexNames((0, "ALTEON-TS-NETWORK-MIB", "vrrpInfoVirtRtrIndex"))
if mibBuilder.loadTexts: vrrpInfoVirtRtrTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpInfoVirtRtrTableEntry.setDescription('The run-time information about a VRRP virtual router.')
vrrpInfoVirtRtrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpInfoVirtRtrIndex.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpInfoVirtRtrIndex.setDescription('The VRRP virtual router index.')
vrrpInfoVirtRtrState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("init", 1), ("master", 2), ("backup", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpInfoVirtRtrState.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpInfoVirtRtrState.setDescription('The VRRP virtual router state.')
vrrpInfoVirtRtrOwnership = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("owner", 1), ("renter", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpInfoVirtRtrOwnership.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpInfoVirtRtrOwnership.setDescription('The VRRP virtual router ownership status.')
vrrpInfoVirtRtrServer = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpInfoVirtRtrServer.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpInfoVirtRtrServer.setDescription('The VRRP server state identifies virtual routers that support \n         Layer 4 services.')
vrrpInfoVirtRtrProxy = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpInfoVirtRtrProxy.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpInfoVirtRtrProxy.setDescription('The VRRP proxy state identifies virtual proxy routers.')
vrrpOperVirtRtrTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 14, 5, 1), )
if mibBuilder.loadTexts: vrrpOperVirtRtrTable.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpOperVirtRtrTable.setDescription('An entry in the table of virtual routers.')
vrrpOperVirtRtrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 14, 5, 1, 1), ).setIndexNames((0, "ALTEON-TS-NETWORK-MIB", "vrrpOperVirtRtrIndex"))
if mibBuilder.loadTexts: vrrpOperVirtRtrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpOperVirtRtrEntry.setDescription('A row in the vrrpOperVirtRtrTable ')
vrrpOperVirtRtrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 14, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpOperVirtRtrIndex.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpOperVirtRtrIndex.setDescription('The index for the  VRRP virtual router.')
vrrpOperVirtRtrBackup = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 14, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("backup", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpOperVirtRtrBackup.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpOperVirtRtrBackup.setDescription("When set to a value of 'backup(2)' it forces the specified \n         master virtual router into backup mode.\n         'ok(1)' is returned when the object os read.")
vrrpOperVirtRtrGroupBackup = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 14, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("backup", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpOperVirtRtrGroupBackup.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpOperVirtRtrGroupBackup.setDescription("When set to a value of 'backup(2)' it forces the specified \n         master virtual router group into backup mode.\n         'ok(1)' is returned when the object os read.")
mibBuilder.exportSymbols("ALTEON-TS-NETWORK-MIB", ospfTmrsKckOffLsaAck=ospfTmrsKckOffLsaAck, ospfCumRxlsUpdates=ospfCumRxlsUpdates, ipRouteInfoTag=ipRouteInfoTag, ospfIntfNbrStart=ospfIntfNbrStart, ospfAreaIntfNbrChange=ospfAreaIntfNbrChange, ipNewCfgIntfDelete=ipNewCfgIntfDelete, ospfAreaTxlsAcks=ospfAreaTxlsAcks, vrrpNewCfgVirtRtrGrpTckVirtRtr=vrrpNewCfgVirtRtrGrpTckVirtRtr, ospfStats=ospfStats, vrrpStatOutBadAdvers=vrrpStatOutBadAdvers, ospfGeneralStats=ospfGeneralStats, ospfIntfDown=ospfIntfDown, ospfCurCfgAreaId=ospfCurCfgAreaId, ripConfig=ripConfig, ospfCumIntfBackup=ospfCumIntfBackup, vrrpInfoVirtRtrState=vrrpInfoVirtRtrState, vrrpCurCfgVirtRtrTckHsrv=vrrpCurCfgVirtRtrTckHsrv, ipNewCfgGwArp=ipNewCfgGwArp, routerLSANoOfTOSZeroMetrics=routerLSANoOfTOSZeroMetrics, vrrpCurCfgGenTckHsrvInc=vrrpCurCfgGenTckHsrvInc, routerLSAId=routerLSAId, routeStatEntries=routeStatEntries, vrrpCurCfgVirtRtrTableEntry=vrrpCurCfgVirtRtrTableEntry, vrrpNewCfgVirtRtrGrpPriority=vrrpNewCfgVirtRtrGrpPriority, ospfIntfTableMaxSize=ospfIntfTableMaxSize, arpInfoMacAddr=arpInfoMacAddr, ospfAreaNbrDown=ospfAreaNbrDown, ospfIntfIndex=ospfIntfIndex, vrrpNewCfgIfDelete=vrrpNewCfgIfDelete, ospfNewCfgAreaId=ospfNewCfgAreaId, ipCurCfgStaticRouteGateway=ipCurCfgStaticRouteGateway, ipFwdLocalTableMaxSize=ipFwdLocalTableMaxSize, ospfIfInfoIndex=ospfIfInfoIndex, ospfAreaRxHello=ospfAreaRxHello, vrrpNewCfgIfTableEntry=vrrpNewCfgIfTableEntry, vrrpCurCfgVirtRtrSharing=vrrpCurCfgVirtRtrSharing, ipCurCfgStaticRouteIndx=ipCurCfgStaticRouteIndx, ospfCumRxHello=ospfCumRxHello, vrrpNewCfgIfPasswd=vrrpNewCfgIfPasswd, vrrpOperVirtRtrGroupBackup=vrrpOperVirtRtrGroupBackup, ripCurCfgDefListen=ripCurCfgDefListen, ipCurCfgGwEntry=ipCurCfgGwEntry, ipRouteInfoMask=ipRouteInfoMask, ospfIfBackupDesignatedRouterIP=ospfIfBackupDesignatedRouterIP, ospfGeneralInfo=ospfGeneralInfo, vrrpNewCfgVirtRtrTable=vrrpNewCfgVirtRtrTable, vrrpNewCfgGenTckHsrvInc=vrrpNewCfgGenTckHsrvInc, ospfIntfNbrExchangeDone=ospfIntfNbrExchangeDone, ospfCumTxlsUpdates=ospfCumTxlsUpdates, vrrpNewCfgGenTckVlanPortInc=vrrpNewCfgGenTckVlanPortInc, ipNewCfgBootpState=ipNewCfgBootpState, ospfAreaNbrChangeStats=ospfAreaNbrChangeStats, vrrpStatOutAdvers=vrrpStatOutAdvers, ipCurCfgGwIndex=ipCurCfgGwIndex, ospfCumIntfWaitTimer=ospfCumIntfWaitTimer, ipRouteInfoTable=ipRouteInfoTable, ospfTimersKickOffStats=ospfTimersKickOffStats, ripNewCfgState=ripNewCfgState, ospfInterface=ospfInterface, arpInfoTable=arpInfoTable, vrrpCurCfgVirtRtrGrpTckRServer=vrrpCurCfgVirtRtrGrpTckRServer, ospfAreaNbrhello=ospfAreaNbrhello, vrrpCurCfgVirtRtrGrpPreempt=vrrpCurCfgVirtRtrGrpPreempt, vrrpCurCfgVirtRtrTckVlanPort=vrrpCurCfgVirtRtrTckVlanPort, ipNewCfgStaticRouteTable=ipNewCfgStaticRouteTable, ospfIntfRxPkts=ospfIntfRxPkts, ospfCumRxTxStats=ospfCumRxTxStats, ipForward=ipForward, vrrpCurCfgVirtRtrGrpTckL4Port=vrrpCurCfgVirtRtrGrpTckL4Port, ospfIfInfoIpAddress=ospfIfInfoIpAddress, vrrpCurCfgVirtRtrGrpSharing=vrrpCurCfgVirtRtrGrpSharing, ospfAreaTxlsUpdates=ospfAreaTxlsUpdates, ospfIntfNbrRstAd=ospfIntfNbrRstAd, ospfIntfNbrChangeStatsEntry=ospfIntfNbrChangeStatsEntry, ipCurCfgStaticRouteEntry=ipCurCfgStaticRouteEntry, ospfIfDesignatedRouterIP=ospfIfDesignatedRouterIP, ospfCumNbrNegotiationDone=ospfCumNbrNegotiationDone, ipRouteInfoGateway=ipRouteInfoGateway, ipNewCfgGwInterval=ipNewCfgGwInterval, vrrpNewCfgVirtRtrPreempt=vrrpNewCfgVirtRtrPreempt, ripStatRoutesAgedOut=ripStatRoutesAgedOut, routerLSALinkIfIndex=routerLSALinkIfIndex, ospfCumRxlsReqs=ospfCumRxlsReqs, ipFwdPortTableMaxSize=ipFwdPortTableMaxSize, ipNewCfgGwRetry=ipNewCfgGwRetry, ripNewCfgStaticSupply=ripNewCfgStaticSupply, ipRouteInfoEntry=ipRouteInfoEntry, ospfTotalAreas=ospfTotalAreas, routerLSAAreaIndex=routerLSAAreaIndex, dnsStatInBadDnsRequests=dnsStatInBadDnsRequests, ospfArea=ospfArea, ospfNewCfgAreaAuthType=ospfNewCfgAreaAuthType, ospfIntfNbrChangeStats=ospfIntfNbrChangeStats, ipCurCfgStaticRouteInterface=ipCurCfgStaticRouteInterface, ipNewCfgGwMetric=ipNewCfgGwMetric, ipCurCfgGwState=ipCurCfgGwState, vrrp_info=vrrp_info, arpInfoSrcPort=arpInfoSrcPort, ipNewCfgStaticRouteIndx=ipNewCfgStaticRouteIndx, ipFwdNewCfgPortTable=ipFwdNewCfgPortTable, ospfIntfTxlsReqs=ospfIntfTxlsReqs, ipFwdCurCfgPortEntry=ipFwdCurCfgPortEntry, ospfAreaRxPkts=ospfAreaRxPkts, ipNewCfgIntfAddr=ipNewCfgIntfAddr, vrrpCurCfgVirtRtrGrpInterval=vrrpCurCfgVirtRtrGrpInterval, ospfAreaIntfUnloop=ospfAreaIntfUnloop, ospfCumNbrN1way=ospfCumNbrN1way, ipNewCfgIntfIndex=ipNewCfgIntfIndex, ospfAreaRxTxIndex=ospfAreaRxTxIndex, vrrpCurCfgVirtRtrPreempt=vrrpCurCfgVirtRtrPreempt, vrrpCurCfgVirtRtrIndx=vrrpCurCfgVirtRtrIndx, ospfVlinkCountForRouter=ospfVlinkCountForRouter, ospfAreaIntfDown=ospfAreaIntfDown, ipNewCfgStaticRouteAction=ipNewCfgStaticRouteAction, vrrpNewCfgVirtRtrTableEntry=vrrpNewCfgVirtRtrTableEntry, ripStatInErrorPkts=ripStatInErrorPkts, ospfAreaInfoId=ospfAreaInfoId, ospfCumIntfDown=ospfCumIntfDown, ipFwdCurCfgPortTable=ipFwdCurCfgPortTable, ospfCumIntfUnloop=ospfCumIntfUnloop, ipNewCfgGwAddr=ipNewCfgGwAddr, ospfCurCfgDefaultRouteMetric=ospfCurCfgDefaultRouteMetric, ospfIntfInfoTable=ospfIntfInfoTable, vrrpCurCfgIfTable=vrrpCurCfgIfTable, ospfAreaRxlsUpdates=ospfAreaRxlsUpdates, ospfAreaNbrNegotiationDone=ospfAreaNbrNegotiationDone, ripNewCfgDefListen=ripNewCfgDefListen, vrrpCurCfgGenState=vrrpCurCfgGenState, ripCurCfgListen=ripCurCfgListen, vrrpVirtRtrGrpTableMaxSize=vrrpVirtRtrGrpTableMaxSize, ipCurCfgGwMetric=ipCurCfgGwMetric, ospfIntfTxlsUpdates=ospfIntfTxlsUpdates, ospfTotalNumberOfInterfaces=ospfTotalNumberOfInterfaces, ospfAreaIntfWaitTimer=ospfAreaIntfWaitTimer, vrrpCurCfgVirtRtrState=vrrpCurCfgVirtRtrState, ospfCumTxDatabase=ospfCumTxDatabase, vrrpNewCfgGenTckL4PortInc=vrrpNewCfgGenTckL4PortInc, vrrp=vrrp, dnsStatInGoodDnsRequests=dnsStatInGoodDnsRequests, vrrpNewCfgVirtRtrGrpTableEntry=vrrpNewCfgVirtRtrGrpTableEntry, routeStatMaxEntries=routeStatMaxEntries, ospfIntfRxlsReqs=ospfIntfRxlsReqs, ipCurCfgIntfBroadcast=ipCurCfgIntfBroadcast, vrrpCurCfgGenTckRServerInc=vrrpCurCfgGenTckRServerInc, ospfAreaIntfLoop=ospfAreaIntfLoop, ospfNumberOfLsdbEntries=ospfNumberOfLsdbEntries, ospfIntfNbrBadSequence=ospfIntfNbrBadSequence, ospfTmrsKckOffAseExport=ospfTmrsKckOffAseExport, vrrpNewCfgVirtRtrGrpInterval=vrrpNewCfgVirtRtrGrpInterval, vrrpNewCfgVirtRtrGrpID=vrrpNewCfgVirtRtrGrpID, ospfAreaChangeStatsEntry=ospfAreaChangeStatsEntry, vrrpNewCfgVirtRtrGrpIfIndex=vrrpNewCfgVirtRtrGrpIfIndex, vrrpNewCfgVirtRtrGrpTckVlanPort=vrrpNewCfgVirtRtrGrpTckVlanPort, ripNewCfgListen=ripNewCfgListen, ipFwdNewCfgLocalIndex=ipFwdNewCfgLocalIndex, vrrpNewCfgVirtRtrGrpTable=vrrpNewCfgVirtRtrGrpTable, ospfAreaRxTxStatsEntry=ospfAreaRxTxStatsEntry, vrrpInfoVirtRtrIndex=vrrpInfoVirtRtrIndex, ipFwdNewCfgLocalMask=ipFwdNewCfgLocalMask, ospfCumNbrBadRequests=ospfCumNbrBadRequests, ospfCumNbrRstAd=ospfCumNbrRstAd, dnsStats=dnsStats, vrrpInfoVirtRtrProxy=vrrpInfoVirtRtrProxy, arpInfoDestIp=arpInfoDestIp, vrrpNewCfgVirtRtrGrpDelete=vrrpNewCfgVirtRtrGrpDelete, ospfIntfRxTxStats=ospfIntfRxTxStats, vrrpCurCfgVirtRtrAddr=vrrpCurCfgVirtRtrAddr, ipNewCfgStaticRouteEntry=ipNewCfgStaticRouteEntry, ospfTotalNeighbours=ospfTotalNeighbours, ospfAreaNbrStart=ospfAreaNbrStart, ipFwdCurCfgLocalIndex=ipFwdCurCfgLocalIndex, arpStats=arpStats, vrrpNewCfgVirtRtrGrpTckIpIntf=vrrpNewCfgVirtRtrGrpTckIpIntf, ripCurCfgPoisonReverse=ripCurCfgPoisonReverse, vrrpCurCfgIfAuthType=vrrpCurCfgIfAuthType, vrrpCurCfgIfPasswd=vrrpCurCfgIfPasswd, ospfNbrInInitState=ospfNbrInInitState, ipCurCfgStaticRouteMask=ipCurCfgStaticRouteMask, vrrpNewCfgIfTable=vrrpNewCfgIfTable, ospfNewCfgDefaultRouteMetric=ospfNewCfgDefaultRouteMetric, ipFwdNewCfgLocalDelete=ipFwdNewCfgLocalDelete, vrrpOperVirtRtrTable=vrrpOperVirtRtrTable, arpInfoEntry=arpInfoEntry, ospfCumTxPkts=ospfCumTxPkts, ipFwdNewCfgPortEntry=ipFwdNewCfgPortEntry, ripNewCfgSupply=ripNewCfgSupply, ospfAreaIntfHello=ospfAreaIntfHello, ospfAreaNbrBadRequests=ospfAreaNbrBadRequests, vrrpOperVirtRtrIndex=vrrpOperVirtRtrIndex, arpInfoRefPorts=arpInfoRefPorts, ipNewCfgGwTable=ipNewCfgGwTable, ospfVirtIntfTableMaxSize=ospfVirtIntfTableMaxSize, ospfIfWaitInterval=ospfIfWaitInterval, ospfAreaTableMaxSize=ospfAreaTableMaxSize, ospfIfTotalNeighbours=ospfIfTotalNeighbours, vrrpCurCfgVirtRtrPriority=vrrpCurCfgVirtRtrPriority, ospfAreaRxTxStats=ospfAreaRxTxStats, ipInterfaceTableMax=ipInterfaceTableMax, vrrpStatInAdvers=vrrpStatInAdvers, ipCurCfgIntfAddr=ipCurCfgIntfAddr, vrrpCurCfgVirtRtrID=vrrpCurCfgVirtRtrID, ospfIntfUnloop=ospfIntfUnloop, vrrpGeneral=vrrpGeneral, ipCurCfgGwRetry=ipCurCfgGwRetry, ospfCumNbrStart=ospfCumNbrStart, vrrpInfoVirtRtrTableEntry=vrrpInfoVirtRtrTableEntry, ospfNumberOfInterfacesUp=ospfNumberOfInterfacesUp, vrrpNewCfgVirtRtrGrpState=vrrpNewCfgVirtRtrGrpState, vrrpCurCfgVirtRtrIfIndex=vrrpCurCfgVirtRtrIfIndex, ospfAreaNbrChangeStatsEntry=ospfAreaNbrChangeStatsEntry, vrrpIfTableMaxSize=vrrpIfTableMaxSize, ospfCumRxlsAcks=ospfCumRxlsAcks, vrrpNewCfgVirtRtrTckHsrv=vrrpNewCfgVirtRtrTckHsrv, arpInfoVLAN=arpInfoVLAN, ospfAreaChangeStats=ospfAreaChangeStats, ipFwdCurCfgLocalSubnet=ipFwdCurCfgLocalSubnet, vrrpNewCfgVirtRtrTckHsrp=vrrpNewCfgVirtRtrTckHsrp, ipNewCfgStaticRouteInterface=ipNewCfgStaticRouteInterface, ospfIntfNbrNegotiationDone=ospfIntfNbrNegotiationDone, vrrpNewCfgVirtRtrGrpTckHsrv=vrrpNewCfgVirtRtrGrpTckHsrv, ospfIntfTxDatabase=ospfIntfTxDatabase, iprouting=iprouting, vrrpNewCfgIfAuthType=vrrpNewCfgIfAuthType, vrrpStats=vrrpStats, ospfTmrsKckOffHello=ospfTmrsKckOffHello, vrrpNewCfgVirtRtrID=vrrpNewCfgVirtRtrID, ipNewCfgIntfVlan=ipNewCfgIntfVlan, ipNewCfgGwIndex=ipNewCfgGwIndex, ipRouteInfoDestIp=ipRouteInfoDestIp, ospfCumNbrDown=ospfCumNbrDown, ipCurCfgGwVlan=ipCurCfgGwVlan, ospfIntfNbrLoadingDone=ospfIntfNbrLoadingDone, routerLSANoOfTOSMetrics=routerLSANoOfTOSMetrics, arpStatHighWater=arpStatHighWater, ipFwdCurCfgLocalTable=ipFwdCurCfgLocalTable, ospfTmrsKckOffSummary=ospfTmrsKckOffSummary, vrrpNewCfgVirtRtrPriority=vrrpNewCfgVirtRtrPriority, ospfIntfInfoEntry=ospfIntfInfoEntry, vrrpNewCfgVirtRtrSharing=vrrpNewCfgVirtRtrSharing, ipCurCfgIntfTable=ipCurCfgIntfTable, ipNewCfgIntfBootpRelay=ipNewCfgIntfBootpRelay, ospfCurCfgAreaAuthType=ospfCurCfgAreaAuthType, ospfIntfRxTxStatsEntry=ospfIntfRxTxStatsEntry, ospfAreaNbrLoadingDone=ospfAreaNbrLoadingDone, vrrpNewCfgVirtRtrGrpPreempt=vrrpNewCfgVirtRtrGrpPreempt, ospfProcessUptime=ospfProcessUptime, ipCurCfgStaticRouteDestIp=ipCurCfgStaticRouteDestIp, ripStatOutPkts=ripStatOutPkts, ospfCumIntfNbrChange=ospfCumIntfNbrChange, ripStats=ripStats, ospfNewCfgAreaEntry=ospfNewCfgAreaEntry, ripCurCfgVip=ripCurCfgVip, ospfCumNbrAdjointOk=ospfCumNbrAdjointOk, ospfCumIntfHello=ospfCumIntfHello)
mibBuilder.exportSymbols("ALTEON-TS-NETWORK-MIB", ipFwdCurCfgDirectedBcast=ipFwdCurCfgDirectedBcast, ipCurCfgIntfIndex=ipCurCfgIntfIndex, ipRouteInfoInterface=ipRouteInfoInterface, ospfTmrsKckOffDbage=ospfTmrsKckOffDbage, ospfIntfNbrhello=ospfIntfNbrhello, ospfIntfNbrAdjointOk=ospfIntfNbrAdjointOk, routeStats=routeStats, routerLSALinkIndex=routerLSALinkIndex, ospfRangeTableMaxSize=ospfRangeTableMaxSize, vrrpCurCfgVirtRtrInterval=vrrpCurCfgVirtRtrInterval, ospfIntfRxTxIndex=ospfIntfRxTxIndex, ipFwdCurCfgPortState=ipFwdCurCfgPortState, ospfIntfRxlsUpdates=ospfIntfRxlsUpdates, vrrpInfoVirtRtrOwnership=vrrpInfoVirtRtrOwnership, ipFwdNewCfgPortIndex=ipFwdNewCfgPortIndex, vrrpCurCfgVirtRtrTckRServer=vrrpCurCfgVirtRtrTckRServer, ipNewCfgGwState=ipNewCfgGwState, vrrpNewCfgGenTckRServerInc=vrrpNewCfgGenTckRServerInc, ipFwdCurCfgState=ipFwdCurCfgState, vrrpNewCfgGenTckIpIntfInc=vrrpNewCfgGenTckIpIntfInc, ospfCumNbrhello=ospfCumNbrhello, ipFwdCurCfgLocalMask=ipFwdCurCfgLocalMask, ospfAreaNbrIndex=ospfAreaNbrIndex, vrrpCurCfgVirtRtrGrpTckVirtRtr=vrrpCurCfgVirtRtrGrpTckVirtRtr, ospfIntfNbrIndex=ospfIntfNbrIndex, ospfIntfHello=ospfIntfHello, ipCurCfgGwArp=ipCurCfgGwArp, vrrpCurCfgVirtRtrGrpTableEntry=vrrpCurCfgVirtRtrGrpTableEntry, ripStatInPkts=ripStatInPkts, ipNewCfgGwEntry=ipNewCfgGwEntry, ospfCumTxHello=ospfCumTxHello, ipNewCfgIntfBroadcast=ipNewCfgIntfBroadcast, routerLSALinkData=routerLSALinkData, ospfNbrInFullState=ospfNbrInFullState, vrrpOper=vrrpOper, ripCurCfgState=ripCurCfgState, ipNewCfgBootpAddr2=ipNewCfgBootpAddr2, ipNewCfgStaticRouteGateway=ipNewCfgStaticRouteGateway, ospfNewCfgAreaIndex=ospfNewCfgAreaIndex, vrrpCurCfgVirtRtrGrpState=vrrpCurCfgVirtRtrGrpState, ospfIntfCountForRouter=ospfIntfCountForRouter, vrrpCurCfgIfTableEntry=vrrpCurCfgIfTableEntry, ospfTotalTransitAreas=ospfTotalTransitAreas, ospfAreaTxlsReqs=ospfAreaTxlsReqs, ipFwdNewCfgLocalEntry=ipFwdNewCfgLocalEntry, vrrpNewCfgGenHotstandby=vrrpNewCfgGenHotstandby, ospfNewCfgAreaSpfInterval=ospfNewCfgAreaSpfInterval, vrrpNewCfgVirtRtrInterval=vrrpNewCfgVirtRtrInterval, ospfIntfLoop=ospfIntfLoop, vrrpCurCfgVirtRtrGrpPriority=vrrpCurCfgVirtRtrGrpPriority, ipRouteInfoIndx=ipRouteInfoIndx, ospfTotalNssaAreas=ospfTotalNssaAreas, ospfCurCfgDefaultRouteMetricType=ospfCurCfgDefaultRouteMetricType, ipNewCfgIntfState=ipNewCfgIntfState, routeStatHighWater=routeStatHighWater, ospfAreaRxlsReqs=ospfAreaRxlsReqs, vrrpCurCfgGenHotstandby=vrrpCurCfgGenHotstandby, arpStatMaxEntries=arpStatMaxEntries, arpInfoFlag=arpInfoFlag, ospfStartTime=ospfStartTime, ospfAreaTxPkts=ospfAreaTxPkts, vrrpNewCfgVirtRtrGrpIndx=vrrpNewCfgVirtRtrGrpIndx, vrrpCurCfgVirtRtrTckIpIntf=vrrpCurCfgVirtRtrTckIpIntf, ospfAreaIntfIndex=ospfAreaIntfIndex, ospfGeneral=ospfGeneral, vrrpCurCfgVirtRtrGrpTckHsrv=vrrpCurCfgVirtRtrGrpTckHsrv, vrrpOperVirtRtrEntry=vrrpOperVirtRtrEntry, ospfIntfWaitTimer=ospfIntfWaitTimer, ospfIntfBackup=ospfIntfBackup, ospfIntfTxHello=ospfIntfTxHello, ospfIntfNbrDown=ospfIntfNbrDown, ipNewCfgStaticRouteMask=ipNewCfgStaticRouteMask, ospfTmrsKckOffRetransmit=ospfTmrsKckOffRetransmit, ipCurCfgBootpState=ipCurCfgBootpState, ospfAreaNbrBadSequence=ospfAreaNbrBadSequence, ripNewCfgUpdatePeriod=ripNewCfgUpdatePeriod, ipStaticRouteTableMaxSize=ipStaticRouteTableMaxSize, vrrpCurCfgGenTckHsrpInc=vrrpCurCfgGenTckHsrpInc, vrrpNewCfgVirtRtrTckVlanPort=vrrpNewCfgVirtRtrTckVlanPort, ipCurCfgIntfBootpRelay=ipCurCfgIntfBootpRelay, ipNewCfgIntfTable=ipNewCfgIntfTable, ipNewCfgIntfEntry=ipNewCfgIntfEntry, ipCurCfgBootpAddr=ipCurCfgBootpAddr, ospfIntfNbrN1way=ospfIntfNbrN1way, ospfCumNbrLoadingDone=ospfCumNbrLoadingDone, ospfCurCfgAreaEntry=ospfCurCfgAreaEntry, ipCurCfgGwInterval=ipCurCfgGwInterval, ospfCurCfgAreaIndex=ospfCurCfgAreaIndex, ospfIntfTxPkts=ospfIntfTxPkts, ospfCumTxlsAcks=ospfCumTxlsAcks, ospfHostTableMaxSize=ospfHostTableMaxSize, vrrpCurCfgGenTckIpIntfInc=vrrpCurCfgGenTckIpIntfInc, ospfRouterLSAInfoEntry=ospfRouterLSAInfoEntry, ipNewCfgStaticRouteDestIp=ipNewCfgStaticRouteDestIp, ospfCumNbrChangeStats=ospfCumNbrChangeStats, vrrpNewCfgVirtRtrIfIndex=vrrpNewCfgVirtRtrIfIndex, ospfAreaInfoIndex=ospfAreaInfoIndex, ipCurCfgGwTable=ipCurCfgGwTable, vrrpCurCfgVirtRtrGrpTckIpIntf=vrrpCurCfgVirtRtrGrpTckIpIntf, ospfIntfTxlsAcks=ospfIntfTxlsAcks, vrrpCurCfgVirtRtrGrpIfIndex=vrrpCurCfgVirtRtrGrpIfIndex, vrrpNewCfgVirtRtrState=vrrpNewCfgVirtRtrState, vrrpNewCfgVirtRtrGrpTckL4Port=vrrpNewCfgVirtRtrGrpTckL4Port, ipCurCfgIntfVlan=ipCurCfgIntfVlan, vrrpNewCfgVirtRtrTckIpIntf=vrrpNewCfgVirtRtrTckIpIntf, ospfAreaRxDatabase=ospfAreaRxDatabase, ipFwdNewCfgDirectedBcast=ipFwdNewCfgDirectedBcast, ospfCurCfgAreaTable=ospfCurCfgAreaTable, ipFwdNewCfgPortState=ipFwdNewCfgPortState, ospfAreaTxHello=ospfAreaTxHello, ip_info=ip_info, ospfCurCfgAreaSpfInterval=ospfCurCfgAreaSpfInterval, vrrpCurCfgVirtRtrTckL4Port=vrrpCurCfgVirtRtrTckL4Port, vrrpVirtRtrTableMaxSize=vrrpVirtRtrTableMaxSize, vrrpNewCfgVirtRtrTckRServer=vrrpNewCfgVirtRtrTckRServer, ripNewCfgPoisonReverse=ripNewCfgPoisonReverse, ospfCumIntfChangeStats=ospfCumIntfChangeStats, ospfAreaTxDatabase=ospfAreaTxDatabase, ospfIntfRxHello=ospfIntfRxHello, ospfCumNbrExchangeDone=ospfCumNbrExchangeDone, ospfAreaNbrExchangeDone=ospfAreaNbrExchangeDone, ipFwdCurCfgLocalEntry=ipFwdCurCfgLocalEntry, ipGatewayTableMax=ipGatewayTableMax, vrrpCurCfgVirtRtrTable=vrrpCurCfgVirtRtrTable, arpStatEntries=arpStatEntries, ospfAreaNbrAdjointOk=ospfAreaNbrAdjointOk, ipRouteInfoType=ipRouteInfoType, vrrpCurCfgGenTckVlanPortInc=vrrpCurCfgGenTckVlanPortInc, ipCurCfgIntfState=ipCurCfgIntfState, ospfAreaInfoEntry=ospfAreaInfoEntry, vrrpCurCfgGenTckVirtRtrInc=vrrpCurCfgGenTckVirtRtrInc, vrrpCurCfgVirtRtrGrpTable=vrrpCurCfgVirtRtrGrpTable, ipCurCfgIntfMask=ipCurCfgIntfMask, ospfIntfNbrBadRequests=ospfIntfNbrBadRequests, vrrpCurCfgVirtRtrGrpID=vrrpCurCfgVirtRtrGrpID, ospfIntfChangeStats=ospfIntfChangeStats, ospfAreaNbrN1way=ospfAreaNbrN1way, vrrpNewCfgVirtRtrIndx=vrrpNewCfgVirtRtrIndx, vrrpNewCfgVirtRtrGrpTckRServer=vrrpNewCfgVirtRtrGrpTckRServer, vrrpNewCfgVirtRtrTckL4Port=vrrpNewCfgVirtRtrTckL4Port, ospfIntfRxDatabase=ospfIntfRxDatabase, routerLSALinkID=routerLSALinkID, vrrpNewCfgVirtRtrGrpSharing=vrrpNewCfgVirtRtrGrpSharing, vrrpInfoVirtRtrServer=vrrpInfoVirtRtrServer, vrrpNewCfgGenTckHsrpInc=vrrpNewCfgGenTckHsrpInc, vrrpCurCfgVirtRtrTckVirtRtr=vrrpCurCfgVirtRtrTckVirtRtr, ipCurCfgIntfEntry=ipCurCfgIntfEntry, ospfTmrsKckOffLsaLock=ospfTmrsKckOffLsaLock, vrrpCurCfgIfIndx=vrrpCurCfgIfIndx, vrrpNewCfgVirtRtrAddr=vrrpNewCfgVirtRtrAddr, ospfRouterLSAInfoTable=ospfRouterLSAInfoTable, vrrpCurCfgGenTckL4PortInc=vrrpCurCfgGenTckL4PortInc, ospfLsTypesSupported=ospfLsTypesSupported, vrrpCurCfgVirtRtrTckHsrp=vrrpCurCfgVirtRtrTckHsrp, ospfNewCfgAreaTable=ospfNewCfgAreaTable, ripCurCfgStaticSupply=ripCurCfgStaticSupply, vrrpCurCfgVirtRtrGrpIndx=vrrpCurCfgVirtRtrGrpIndx, vrrpNewCfgGenTckVirtRtrInc=vrrpNewCfgGenTckVirtRtrInc, ipNewCfgGwVlan=ipNewCfgGwVlan, ospfinfo=ospfinfo, ospfIntfChangeStatsEntry=ospfIntfChangeStatsEntry, ospfCumRxPkts=ospfCumRxPkts, ipCurCfgStaticRouteTable=ipCurCfgStaticRouteTable, ospfNewCfgDefaultRouteMetricType=ospfNewCfgDefaultRouteMetricType, vrrpCurCfgVirtRtrGrpTckVlanPort=vrrpCurCfgVirtRtrGrpTckVlanPort, vrrpNewCfgIfIndx=vrrpNewCfgIfIndx, ospfAreaIntfBackup=ospfAreaIntfBackup, ipFwdNewCfgState=ipFwdNewCfgState, vrrpNewCfgVirtRtrDelete=vrrpNewCfgVirtRtrDelete, vrrpNewCfgVirtRtrGrpTckHsrp=vrrpNewCfgVirtRtrGrpTckHsrp, ipCurCfgGwAddr=ipCurCfgGwAddr, ospfAreaNbrRstAd=ospfAreaNbrRstAd, ospfAreaInfoTable=ospfAreaInfoTable, ipFwdNewCfgLocalTable=ipFwdNewCfgLocalTable, vrrpInfoVirtRtrTable=vrrpInfoVirtRtrTable, ipNewCfgBootpAddr=ipNewCfgBootpAddr, ospfIntfRxlsAcks=ospfIntfRxlsAcks, ospfCumTxlsReqs=ospfCumTxlsReqs, ospfCumNbrBadSequence=ospfCumNbrBadSequence, arpCurCfgReARPPeriod=arpCurCfgReARPPeriod, ripNewCfgVip=ripNewCfgVip, arpNewCfgReARPPeriod=arpNewCfgReARPPeriod, vrrpNewCfgVirtRtrTckVirtRtr=vrrpNewCfgVirtRtrTckVirtRtr, ripCurCfgUpdatePeriod=ripCurCfgUpdatePeriod, ipFwdNewCfgLocalSubnet=ipFwdNewCfgLocalSubnet, ipNewCfgGwDelete=ipNewCfgGwDelete, ospfAreaRxlsAcks=ospfAreaRxlsAcks, ipNewCfgIntfMask=ipNewCfgIntfMask, ospfCfg=ospfCfg, vrrpCurCfgVirtRtrGrpTckHsrp=vrrpCurCfgVirtRtrGrpTckHsrp, ospfCumIntfLoop=ospfCumIntfLoop, vrrpNewCfgGenState=vrrpNewCfgGenState, ospfNbrInExchState=ospfNbrInExchState, ipFwdCurCfgPortIndex=ipFwdCurCfgPortIndex, ospfIntfNbrChange=ospfIntfNbrChange, ospfCumRxDatabase=ospfCumRxDatabase, ripCurCfgSupply=ripCurCfgSupply, vrrpOperVirtRtrBackup=vrrpOperVirtRtrBackup, ipCurCfgBootpAddr2=ipCurCfgBootpAddr2)
