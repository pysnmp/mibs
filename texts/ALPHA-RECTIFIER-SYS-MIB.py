#
# PySNMP MIB module ALPHA-RECTIFIER-SYS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/alpha/ALPHA-RECTIFIER-SYS-MIB
# Produced by pysmi-1.1.12 at Wed Jul  3 09:07:58 2024
# On host fv-az2021-432 platform Linux version 6.5.0-1022-azure by user runner
# Using Python version 3.10.14 (main, Jun 20 2024, 15:20:03) [GCC 11.4.0]
#
ScaledNumber, simple = mibBuilder.importSymbols("ALPHA-RESOURCE-MIB", "ScaledNumber", "simple")
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Counter64, ObjectIdentity, Counter32, Integer32, Gauge32, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, iso, TimeTicks, Unsigned32, ModuleIdentity, IpAddress, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "ObjectIdentity", "Counter32", "Integer32", "Gauge32", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "iso", "TimeTicks", "Unsigned32", "ModuleIdentity", "IpAddress", "MibIdentifier")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
rectifierSystem = ModuleIdentity((1, 3, 6, 1, 4, 1, 7309, 5, 3, 1))
rectifierSystem.setRevisions(('2019-12-12 00:00', '2017-04-06 00:00', '2015-07-28 00:00', '2015-07-23 00:00', '2015-06-23 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: rectifierSystem.setRevisionsDescriptions(('\n\t\t\tAdded fields for statistic counters for various rectifier states.\n\t\t\tTested with SimpleWeb: http://www.simpleweb.org      \n\t\t\tPassed highest level of compliance.  (level 6)\n\t\t\t', '\n\t\t\tAdded fields for power save and some battery fields.\n\t\t\tTested with SimpleWeb: http://www.simpleweb.org      \n\t\t\tPassed highest level of compliance.  (level 6)\n\t\t\t', '\n\t\t\tUpdated to follow MIB structure conformance rules.  Tested with \n\t\t\tSimpleWeb: http://www.simpleweb.org      \n\t\t\tPassed highest level of compliance.  (level 6)\n\t\t\t', 'Fixed MIB syntax warnings.', 'General revision.',))
if mibBuilder.loadTexts: rectifierSystem.setLastUpdated('201912120000Z')
if mibBuilder.loadTexts: rectifierSystem.setOrganization('Alpha Technologies Ltd.')
if mibBuilder.loadTexts: rectifierSystem.setContactInfo('Alpha Technologies Ltd.\n\t\t\t  7700 Riverfront Gate\n\t\t\t  Burnaby, BC  V5J 5M4\n\t\t\t  Canada\n\n\t\t\t  Tel: 1-604-436-5900\n\t\t\t  Fax: 1-604-436-1233')
if mibBuilder.loadTexts: rectifierSystem.setDescription('This MIB defines the notification block(s) available in system controllers.')
rectSysTotalOutputCurrent = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 3, 1, 1), ScaledNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectSysTotalOutputCurrent.setStatus('current')
if mibBuilder.loadTexts: rectSysTotalOutputCurrent.setDescription('\n               Total accumulated output current of all the rectifiers associated with the current system.\n               ')
rectSysTotalOutputPower = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 3, 1, 2), ScaledNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectSysTotalOutputPower.setStatus('current')
if mibBuilder.loadTexts: rectSysTotalOutputPower.setDescription('Total output current of all system rectifiers.')
rectSysTotalCapacityInstalledAmps = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 3, 1, 3), ScaledNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectSysTotalCapacityInstalledAmps.setStatus('current')
if mibBuilder.loadTexts: rectSysTotalCapacityInstalledAmps.setDescription('A rectifier output current multiplied by the number of rectifiers installed.')
rectSysTotalCapacityInstalledPower = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 3, 1, 4), ScaledNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectSysTotalCapacityInstalledPower.setStatus('current')
if mibBuilder.loadTexts: rectSysTotalCapacityInstalledPower.setDescription('A rectifier output power multiplied by the number of rectifiers installed.')
rectSysAverageRectifierOutputVoltage = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 3, 1, 5), ScaledNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectSysAverageRectifierOutputVoltage.setStatus('current')
if mibBuilder.loadTexts: rectSysAverageRectifierOutputVoltage.setDescription('Average rectifier output voltage.')
rectSysAverageRectifierACInputVoltage = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 3, 1, 6), ScaledNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectSysAverageRectifierACInputVoltage.setStatus('current')
if mibBuilder.loadTexts: rectSysAverageRectifierACInputVoltage.setDescription('Average rectifier input voltage.')
rectSysAveragePhase1Voltage = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 3, 1, 7), ScaledNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectSysAveragePhase1Voltage.setStatus('current')
if mibBuilder.loadTexts: rectSysAveragePhase1Voltage.setDescription('Average output voltage of rectifiers in Phase 1.')
rectSysAveragePhase2Voltage = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 3, 1, 8), ScaledNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectSysAveragePhase2Voltage.setStatus('current')
if mibBuilder.loadTexts: rectSysAveragePhase2Voltage.setDescription('Average output voltage of rectifiers in Phase 2.')
rectSysAveragePhase3Voltage = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 3, 1, 9), ScaledNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectSysAveragePhase3Voltage.setStatus('current')
if mibBuilder.loadTexts: rectSysAveragePhase3Voltage.setDescription('Average output voltage of rectifiers in Phase 3.')
rectSysSystemVoltage = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 3, 1, 10), ScaledNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectSysSystemVoltage.setStatus('current')
if mibBuilder.loadTexts: rectSysSystemVoltage.setDescription('System voltage.')
rectSysTotalLoadCurrent = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 3, 1, 11), ScaledNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectSysTotalLoadCurrent.setStatus('current')
if mibBuilder.loadTexts: rectSysTotalLoadCurrent.setDescription('Total load current.')
rectSysBatteryVoltage = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 3, 1, 12), ScaledNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectSysBatteryVoltage.setStatus('current')
if mibBuilder.loadTexts: rectSysBatteryVoltage.setDescription('Battery voltage.')
rectSysBatteryCurrent = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 3, 1, 13), ScaledNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectSysBatteryCurrent.setStatus('current')
if mibBuilder.loadTexts: rectSysBatteryCurrent.setDescription('Battery current.')
rectSysBatteryTemperature = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 3, 1, 14), ScaledNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectSysBatteryTemperature.setStatus('current')
if mibBuilder.loadTexts: rectSysBatteryTemperature.setDescription('Battery temperature.')
rectSysSystemNumber = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 3, 1, 15), ScaledNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectSysSystemNumber.setStatus('current')
if mibBuilder.loadTexts: rectSysSystemNumber.setDescription('Snmp ID# assigned to the system.')
rectSysEstimatedRequiredCapacityInWatts = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 3, 1, 16), ScaledNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectSysEstimatedRequiredCapacityInWatts.setStatus('current')
if mibBuilder.loadTexts: rectSysEstimatedRequiredCapacityInWatts.setDescription('Estimated required capacity needed in watts.')
rectSysEstimatedRequiredCapacityInAmps = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 3, 1, 17), ScaledNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectSysEstimatedRequiredCapacityInAmps.setStatus('current')
if mibBuilder.loadTexts: rectSysEstimatedRequiredCapacityInAmps.setDescription('Estimated required capacity needed in amps.')
rectSysEstimatedAvailableCapacityInWatts = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 3, 1, 18), ScaledNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectSysEstimatedAvailableCapacityInWatts.setStatus('current')
if mibBuilder.loadTexts: rectSysEstimatedAvailableCapacityInWatts.setDescription('Estimated available capacity needed in watts.')
rectSysEstimatedAvailableCapacityInAmps = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 3, 1, 19), ScaledNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectSysEstimatedAvailableCapacityInAmps.setStatus('current')
if mibBuilder.loadTexts: rectSysEstimatedAvailableCapacityInAmps.setDescription('Estimated available capacity needed in amps.')
rectSysEstimatedRedundantCapacityInWatts = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 3, 1, 20), ScaledNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectSysEstimatedRedundantCapacityInWatts.setStatus('current')
if mibBuilder.loadTexts: rectSysEstimatedRedundantCapacityInWatts.setDescription('Estimated redundant capacity needed in watts.')
rectSysEstimatedRedundantCapacityInAmps = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 3, 1, 21), ScaledNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectSysEstimatedRedundantCapacityInAmps.setStatus('current')
if mibBuilder.loadTexts: rectSysEstimatedRedundantCapacityInAmps.setDescription('Estimated redundant capacity needed in amps.')
rectSysEstimatedStandbyCapacityInWatts = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 3, 1, 22), ScaledNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectSysEstimatedStandbyCapacityInWatts.setStatus('current')
if mibBuilder.loadTexts: rectSysEstimatedStandbyCapacityInWatts.setDescription('Estimated standby capacity needed in watts.')
rectSysEstimatedStandbyCapacityInAmps = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 3, 1, 23), ScaledNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectSysEstimatedStandbyCapacityInAmps.setStatus('current')
if mibBuilder.loadTexts: rectSysEstimatedStandbyCapacityInAmps.setDescription('Estimated standby capacity needed in amps.')
rectSysPowerAveragePower = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 3, 1, 24), ScaledNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectSysPowerAveragePower.setStatus('current')
if mibBuilder.loadTexts: rectSysPowerAveragePower.setDescription('The average power of all modules supplying power for Power Save in percentage.')
rectSysModulesSupplyingPower = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 3, 1, 25), ScaledNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectSysModulesSupplyingPower.setStatus('current')
if mibBuilder.loadTexts: rectSysModulesSupplyingPower.setDescription('Number of modules supplying power.')
rectSysModulesInStandby = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 3, 1, 26), ScaledNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectSysModulesInStandby.setStatus('current')
if mibBuilder.loadTexts: rectSysModulesInStandby.setDescription('Number of modules in standby.')
rectSysEstimatedCapacityRemainingCurrent = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 3, 1, 28), ScaledNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectSysEstimatedCapacityRemainingCurrent.setStatus('current')
if mibBuilder.loadTexts: rectSysEstimatedCapacityRemainingCurrent.setDescription('Estimated capacity remaining in amps.')
rectSysEstimatedCapacityRemainingPower = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 3, 1, 29), ScaledNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectSysEstimatedCapacityRemainingPower.setStatus('current')
if mibBuilder.loadTexts: rectSysEstimatedCapacityRemainingPower.setDescription('Estimated capacity remaining in watts.')
rectSysEstimatedSOCPercent = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 3, 1, 30), ScaledNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectSysEstimatedSOCPercent.setStatus('current')
if mibBuilder.loadTexts: rectSysEstimatedSOCPercent.setDescription('Estimated state of charge percent remaining.')
rectSysEstimatedBatteryRuntime = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 3, 1, 31), ScaledNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectSysEstimatedBatteryRuntime.setStatus('current')
if mibBuilder.loadTexts: rectSysEstimatedBatteryRuntime.setDescription('Estimated battery runtime remaining in hours.')
rectSysEstimatedBatteryHealthPercent = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 3, 1, 32), ScaledNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectSysEstimatedBatteryHealthPercent.setStatus('current')
if mibBuilder.loadTexts: rectSysEstimatedBatteryHealthPercent.setDescription('Estimated battery health percentage.')
rectNumberOfAcquiredRectifiers = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 3, 1, 33), ScaledNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectNumberOfAcquiredRectifiers.setStatus('current')
if mibBuilder.loadTexts: rectNumberOfAcquiredRectifiers.setDescription('Number of Acquired Rectifiers.')
rectNumberOfSourcingRectifiers = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 3, 1, 34), ScaledNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectNumberOfSourcingRectifiers.setStatus('current')
if mibBuilder.loadTexts: rectNumberOfSourcingRectifiers.setDescription('Number of Sourcing Rectifiers.')
rectNumberOfFailedRectifiers = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 3, 1, 35), ScaledNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectNumberOfFailedRectifiers.setStatus('current')
if mibBuilder.loadTexts: rectNumberOfFailedRectifiers.setDescription('Number of Failed Rectifiers.')
rectNumberOfMinorAlertRectifiers = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 3, 1, 36), ScaledNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectNumberOfMinorAlertRectifiers.setStatus('current')
if mibBuilder.loadTexts: rectNumberOfMinorAlertRectifiers.setDescription('Number of Rectifiers with Minor Alerts.')
rectNumberOfCommsLostRectifiers = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 3, 1, 37), ScaledNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectNumberOfCommsLostRectifiers.setStatus('current')
if mibBuilder.loadTexts: rectNumberOfCommsLostRectifiers.setDescription('Number of Rectifiers in Comms Lost.')
rectNumberOfCommsNormalRectifiers = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 3, 1, 38), ScaledNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectNumberOfCommsNormalRectifiers.setStatus('current')
if mibBuilder.loadTexts: rectNumberOfCommsNormalRectifiers.setDescription('Number of Rectifiers in Comms Normal.')
rectNumberOfACFailedRectifiers = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 3, 1, 39), ScaledNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectNumberOfACFailedRectifiers.setStatus('current')
if mibBuilder.loadTexts: rectNumberOfACFailedRectifiers.setDescription('Number of Rectifiers with AC Failed.')
rectNumberOfRectifiersWithConfigError = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 3, 1, 40), ScaledNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectNumberOfRectifiersWithConfigError.setStatus('current')
if mibBuilder.loadTexts: rectNumberOfRectifiersWithConfigError.setDescription('Number of Rectifiers with Configuration Error.')
rectNumberOfRectifiersInPowerLimit = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 3, 1, 41), ScaledNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectNumberOfRectifiersInPowerLimit.setStatus('current')
if mibBuilder.loadTexts: rectNumberOfRectifiersInPowerLimit.setDescription('Number of Rectifiers in Power Limit.')
rectNumberOfRectifiersInCurrentLimit = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 3, 1, 42), ScaledNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectNumberOfRectifiersInCurrentLimit.setStatus('current')
if mibBuilder.loadTexts: rectNumberOfRectifiersInCurrentLimit.setDescription('Number of Rectifiers in Current Limit.')
rectNumberOfFanFailRectifiers = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 3, 1, 43), ScaledNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectNumberOfFanFailRectifiers.setStatus('current')
if mibBuilder.loadTexts: rectNumberOfFanFailRectifiers.setDescription('Number of Rectifiers with Fan Failed.')
rectNumberOfRectifiersInBootloader = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 3, 1, 44), ScaledNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectNumberOfRectifiersInBootloader.setStatus('current')
if mibBuilder.loadTexts: rectNumberOfRectifiersInBootloader.setDescription('Number of Rectifiers in Boot Loader.')
rectMaxRectifierAmbientTemperature = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 3, 1, 45), ScaledNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectMaxRectifierAmbientTemperature.setStatus('current')
if mibBuilder.loadTexts: rectMaxRectifierAmbientTemperature.setDescription('Maximum Rectifier Ambient Temperature.')
conformance = MibIdentifier((1, 3, 6, 1, 4, 1, 7309, 5, 3, 1, 100))
compliances = MibIdentifier((1, 3, 6, 1, 4, 1, 7309, 5, 3, 1, 100, 1))
compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 7309, 5, 3, 1, 100, 1, 1)).setObjects(("ALPHA-RECTIFIER-SYS-MIB", "rectifierGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    compliance = compliance.setStatus('current')
if mibBuilder.loadTexts: compliance.setDescription('The compliance statement for systems supporting\n\t          the alpha MIB.')
rectifierGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 7309, 5, 3, 1, 100, 2))
rectifierGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 7309, 5, 3, 1, 100, 2, 1)).setObjects(("ALPHA-RECTIFIER-SYS-MIB", "rectSysTotalOutputCurrent"), ("ALPHA-RECTIFIER-SYS-MIB", "rectSysTotalOutputPower"), ("ALPHA-RECTIFIER-SYS-MIB", "rectSysTotalCapacityInstalledAmps"), ("ALPHA-RECTIFIER-SYS-MIB", "rectSysTotalCapacityInstalledPower"), ("ALPHA-RECTIFIER-SYS-MIB", "rectSysAverageRectifierOutputVoltage"), ("ALPHA-RECTIFIER-SYS-MIB", "rectSysAverageRectifierACInputVoltage"), ("ALPHA-RECTIFIER-SYS-MIB", "rectSysAveragePhase1Voltage"), ("ALPHA-RECTIFIER-SYS-MIB", "rectSysAveragePhase2Voltage"), ("ALPHA-RECTIFIER-SYS-MIB", "rectSysAveragePhase3Voltage"), ("ALPHA-RECTIFIER-SYS-MIB", "rectSysSystemVoltage"), ("ALPHA-RECTIFIER-SYS-MIB", "rectSysTotalLoadCurrent"), ("ALPHA-RECTIFIER-SYS-MIB", "rectSysBatteryVoltage"), ("ALPHA-RECTIFIER-SYS-MIB", "rectSysBatteryCurrent"), ("ALPHA-RECTIFIER-SYS-MIB", "rectSysBatteryTemperature"), ("ALPHA-RECTIFIER-SYS-MIB", "rectSysSystemNumber"), ("ALPHA-RECTIFIER-SYS-MIB", "rectSysEstimatedRequiredCapacityInWatts"), ("ALPHA-RECTIFIER-SYS-MIB", "rectSysEstimatedRequiredCapacityInAmps"), ("ALPHA-RECTIFIER-SYS-MIB", "rectSysEstimatedAvailableCapacityInWatts"), ("ALPHA-RECTIFIER-SYS-MIB", "rectSysEstimatedAvailableCapacityInAmps"), ("ALPHA-RECTIFIER-SYS-MIB", "rectSysEstimatedRedundantCapacityInWatts"), ("ALPHA-RECTIFIER-SYS-MIB", "rectSysEstimatedRedundantCapacityInAmps"), ("ALPHA-RECTIFIER-SYS-MIB", "rectSysEstimatedStandbyCapacityInWatts"), ("ALPHA-RECTIFIER-SYS-MIB", "rectSysEstimatedStandbyCapacityInAmps"), ("ALPHA-RECTIFIER-SYS-MIB", "rectSysPowerAveragePower"), ("ALPHA-RECTIFIER-SYS-MIB", "rectSysModulesSupplyingPower"), ("ALPHA-RECTIFIER-SYS-MIB", "rectSysModulesInStandby"), ("ALPHA-RECTIFIER-SYS-MIB", "rectSysEstimatedCapacityRemainingCurrent"), ("ALPHA-RECTIFIER-SYS-MIB", "rectSysEstimatedCapacityRemainingPower"), ("ALPHA-RECTIFIER-SYS-MIB", "rectSysEstimatedSOCPercent"), ("ALPHA-RECTIFIER-SYS-MIB", "rectSysEstimatedBatteryRuntime"), ("ALPHA-RECTIFIER-SYS-MIB", "rectSysEstimatedBatteryHealthPercent"), ("ALPHA-RECTIFIER-SYS-MIB", "rectNumberOfAcquiredRectifiers"), ("ALPHA-RECTIFIER-SYS-MIB", "rectNumberOfSourcingRectifiers"), ("ALPHA-RECTIFIER-SYS-MIB", "rectNumberOfFailedRectifiers"), ("ALPHA-RECTIFIER-SYS-MIB", "rectNumberOfMinorAlertRectifiers"), ("ALPHA-RECTIFIER-SYS-MIB", "rectNumberOfCommsLostRectifiers"), ("ALPHA-RECTIFIER-SYS-MIB", "rectNumberOfCommsNormalRectifiers"), ("ALPHA-RECTIFIER-SYS-MIB", "rectNumberOfACFailedRectifiers"), ("ALPHA-RECTIFIER-SYS-MIB", "rectNumberOfRectifiersWithConfigError"), ("ALPHA-RECTIFIER-SYS-MIB", "rectNumberOfRectifiersInPowerLimit"), ("ALPHA-RECTIFIER-SYS-MIB", "rectNumberOfRectifiersInCurrentLimit"), ("ALPHA-RECTIFIER-SYS-MIB", "rectNumberOfFanFailRectifiers"), ("ALPHA-RECTIFIER-SYS-MIB", "rectNumberOfRectifiersInBootloader"), ("ALPHA-RECTIFIER-SYS-MIB", "rectMaxRectifierAmbientTemperature"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rectifierGroup = rectifierGroup.setStatus('current')
if mibBuilder.loadTexts: rectifierGroup.setDescription('Alpha Rectifier System data list group.')
mibBuilder.exportSymbols("ALPHA-RECTIFIER-SYS-MIB", rectSysAveragePhase1Voltage=rectSysAveragePhase1Voltage, rectNumberOfFanFailRectifiers=rectNumberOfFanFailRectifiers, rectNumberOfSourcingRectifiers=rectNumberOfSourcingRectifiers, rectSysModulesInStandby=rectSysModulesInStandby, rectSysEstimatedSOCPercent=rectSysEstimatedSOCPercent, rectNumberOfRectifiersInPowerLimit=rectNumberOfRectifiersInPowerLimit, rectSysSystemVoltage=rectSysSystemVoltage, PYSNMP_MODULE_ID=rectifierSystem, rectSysSystemNumber=rectSysSystemNumber, rectSysBatteryVoltage=rectSysBatteryVoltage, rectifierGroups=rectifierGroups, rectSysEstimatedRequiredCapacityInAmps=rectSysEstimatedRequiredCapacityInAmps, rectSysEstimatedRedundantCapacityInAmps=rectSysEstimatedRedundantCapacityInAmps, rectSysEstimatedStandbyCapacityInAmps=rectSysEstimatedStandbyCapacityInAmps, rectSysEstimatedCapacityRemainingCurrent=rectSysEstimatedCapacityRemainingCurrent, rectMaxRectifierAmbientTemperature=rectMaxRectifierAmbientTemperature, rectSysAverageRectifierACInputVoltage=rectSysAverageRectifierACInputVoltage, rectNumberOfRectifiersInCurrentLimit=rectNumberOfRectifiersInCurrentLimit, conformance=conformance, compliance=compliance, rectNumberOfAcquiredRectifiers=rectNumberOfAcquiredRectifiers, rectSysTotalCapacityInstalledPower=rectSysTotalCapacityInstalledPower, rectSysBatteryTemperature=rectSysBatteryTemperature, rectSysTotalCapacityInstalledAmps=rectSysTotalCapacityInstalledAmps, rectNumberOfCommsLostRectifiers=rectNumberOfCommsLostRectifiers, rectSysEstimatedRedundantCapacityInWatts=rectSysEstimatedRedundantCapacityInWatts, rectSysEstimatedCapacityRemainingPower=rectSysEstimatedCapacityRemainingPower, rectNumberOfCommsNormalRectifiers=rectNumberOfCommsNormalRectifiers, rectSysAverageRectifierOutputVoltage=rectSysAverageRectifierOutputVoltage, rectNumberOfRectifiersInBootloader=rectNumberOfRectifiersInBootloader, rectSysEstimatedStandbyCapacityInWatts=rectSysEstimatedStandbyCapacityInWatts, rectSysBatteryCurrent=rectSysBatteryCurrent, rectSysTotalOutputCurrent=rectSysTotalOutputCurrent, rectSysEstimatedRequiredCapacityInWatts=rectSysEstimatedRequiredCapacityInWatts, rectNumberOfMinorAlertRectifiers=rectNumberOfMinorAlertRectifiers, rectSysEstimatedBatteryHealthPercent=rectSysEstimatedBatteryHealthPercent, rectSysEstimatedBatteryRuntime=rectSysEstimatedBatteryRuntime, rectNumberOfRectifiersWithConfigError=rectNumberOfRectifiersWithConfigError, rectSysPowerAveragePower=rectSysPowerAveragePower, rectifierGroup=rectifierGroup, rectSysModulesSupplyingPower=rectSysModulesSupplyingPower, rectSysEstimatedAvailableCapacityInWatts=rectSysEstimatedAvailableCapacityInWatts, rectSysTotalLoadCurrent=rectSysTotalLoadCurrent, rectNumberOfACFailedRectifiers=rectNumberOfACFailedRectifiers, compliances=compliances, rectSysAveragePhase3Voltage=rectSysAveragePhase3Voltage, rectifierSystem=rectifierSystem, rectSysEstimatedAvailableCapacityInAmps=rectSysEstimatedAvailableCapacityInAmps, rectNumberOfFailedRectifiers=rectNumberOfFailedRectifiers, rectSysAveragePhase2Voltage=rectSysAveragePhase2Voltage, rectSysTotalOutputPower=rectSysTotalOutputPower)
