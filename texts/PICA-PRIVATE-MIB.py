#
# PySNMP MIB module PICA-PRIVATE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/picos/PICA-PRIVATE-MIB
# Produced by pysmi-1.1.12 at Wed May 29 02:47:47 2024
# On host fv-az569-426 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
IANAifType, = mibBuilder.importSymbols("IANAifType-MIB", "IANAifType")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
snmpTraps, = mibBuilder.importSymbols("SNMPv2-MIB", "snmpTraps")
MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, IpAddress, enterprises, mib_2, NotificationType, Integer32, ModuleIdentity, iso, Bits, ObjectIdentity, Counter64, Unsigned32, Gauge32, MibIdentifier, snmpModules, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "IpAddress", "enterprises", "mib-2", "NotificationType", "Integer32", "ModuleIdentity", "iso", "Bits", "ObjectIdentity", "Counter64", "Unsigned32", "Gauge32", "MibIdentifier", "snmpModules", "Counter32")
RowStatus, TruthValue, PhysAddress, AutonomousType, DisplayString, TestAndIncr, TimeStamp, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TruthValue", "PhysAddress", "AutonomousType", "DisplayString", "TestAndIncr", "TimeStamp", "TextualConvention")
picaPrivateMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 35098))
picaPrivateMib.setRevisions(('2011-04-28 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: picaPrivateMib.setRevisionsDescriptions(('The Pica8 Private MIB, Initial Version.\nAuthor: Robin Wan.',))
if mibBuilder.loadTexts: picaPrivateMib.setLastUpdated('201104280000Z')
if mibBuilder.loadTexts: picaPrivateMib.setOrganization('Pica8 Inc.')
if mibBuilder.loadTexts: picaPrivateMib.setContactInfo(' Customer Support\nE-Mail: support@pica8.com\nWWW: http://www.pica8.com')
if mibBuilder.loadTexts: picaPrivateMib.setDescription("The MIB module to manage Pica8's Pronto product.")
hostStatusGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 35098, 1))
cpuUsage = MibScalar((1, 3, 6, 1, 4, 1, 35098, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuUsage.setStatus('current')
if mibBuilder.loadTexts: cpuUsage.setDescription('The usage of CPU, the output format is integer.')
totalPhyMemory = MibScalar((1, 3, 6, 1, 4, 1, 35098, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalPhyMemory.setStatus('current')
if mibBuilder.loadTexts: totalPhyMemory.setDescription('The total physical memory size, the output format is string.')
usedPhyMemory = MibScalar((1, 3, 6, 1, 4, 1, 35098, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usedPhyMemory.setStatus('current')
if mibBuilder.loadTexts: usedPhyMemory.setDescription('The used physical memory size, the output format is string.')
freePhyMemory = MibScalar((1, 3, 6, 1, 4, 1, 35098, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: freePhyMemory.setStatus('current')
if mibBuilder.loadTexts: freePhyMemory.setDescription('The free physical memory size, the output format is string.')
switchTemperature = MibScalar((1, 3, 6, 1, 4, 1, 35098, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchTemperature.setStatus('current')
if mibBuilder.loadTexts: switchTemperature.setDescription('The temperature of switch, the output format is integer.')
cpuTemperature = MibScalar((1, 3, 6, 1, 4, 1, 35098, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuTemperature.setStatus('current')
if mibBuilder.loadTexts: cpuTemperature.setDescription('The teperature of CPU, the output format is integer.')
switchChipTemperature = MibScalar((1, 3, 6, 1, 4, 1, 35098, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchChipTemperature.setStatus('current')
if mibBuilder.loadTexts: switchChipTemperature.setDescription('The teperature of switch chip.')
switchFanSpeed = MibScalar((1, 3, 6, 1, 4, 1, 35098, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchFanSpeed.setStatus('current')
if mibBuilder.loadTexts: switchFanSpeed.setDescription('The fan speed of switch chip.')
switchPWM = MibScalar((1, 3, 6, 1, 4, 1, 35098, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchPWM.setStatus('current')
if mibBuilder.loadTexts: switchPWM.setDescription('Pulse Width Modulation(PWM) of switch chip.')
sfpstatusTable = MibTable((1, 3, 6, 1, 4, 1, 35098, 1, 10), )
if mibBuilder.loadTexts: sfpstatusTable.setStatus('current')
if mibBuilder.loadTexts: sfpstatusTable.setDescription('A list of sfp moudule status entries.')
sfpstatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35098, 1, 10, 1), ).setIndexNames((0, "PICA-PRIVATE-MIB", "sfpIndex"))
if mibBuilder.loadTexts: sfpstatusEntry.setStatus('current')
if mibBuilder.loadTexts: sfpstatusEntry.setDescription('An entry containing all sfp module stauts')
sfpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 35098, 1, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpIndex.setStatus('current')
if mibBuilder.loadTexts: sfpIndex.setDescription('The port number of interface.')
sfpVendorName = MibTableColumn((1, 3, 6, 1, 4, 1, 35098, 1, 10, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpVendorName.setStatus('current')
if mibBuilder.loadTexts: sfpVendorName.setDescription('The vendor name of sfp ransceiver transfer.')
sfpSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 35098, 1, 10, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpSerialNumber.setStatus('current')
if mibBuilder.loadTexts: sfpSerialNumber.setDescription('The serial number of sfp ransceiver transfer.')
sfpTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 35098, 1, 10, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpTemp.setStatus('current')
if mibBuilder.loadTexts: sfpTemp.setDescription('The temperature of sfp ransceiver transfer.')
sfpVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 35098, 1, 10, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpVoltage.setStatus('current')
if mibBuilder.loadTexts: sfpVoltage.setDescription('The voltage of sfp ransceiver transfer.')
sfpBias = MibTableColumn((1, 3, 6, 1, 4, 1, 35098, 1, 10, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpBias.setStatus('current')
if mibBuilder.loadTexts: sfpBias.setDescription('The bias current of sfp ransceiver transfer.')
sfpTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 35098, 1, 10, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpTxPower.setStatus('current')
if mibBuilder.loadTexts: sfpTxPower.setDescription('The Tx power of sfp ransceiver transfer(dBm).')
sfpRxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 35098, 1, 10, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpRxPower.setStatus('current')
if mibBuilder.loadTexts: sfpRxPower.setDescription('The Rx power of sfp ransceiver transfer(dBm).')
sfpType = MibTableColumn((1, 3, 6, 1, 4, 1, 35098, 1, 10, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpType.setStatus('current')
if mibBuilder.loadTexts: sfpType.setDescription('The type of sfp ransceiver transfer(dBm).')
rpsustatusTable = MibTable((1, 3, 6, 1, 4, 1, 35098, 1, 11), )
if mibBuilder.loadTexts: rpsustatusTable.setStatus('current')
if mibBuilder.loadTexts: rpsustatusTable.setDescription('A list of Redundancy power supply unit(RPSU) status entries.')
rpsustatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35098, 1, 11, 1), ).setIndexNames((0, "PICA-PRIVATE-MIB", "rpsuIndex"))
if mibBuilder.loadTexts: rpsustatusEntry.setStatus('current')
if mibBuilder.loadTexts: rpsustatusEntry.setDescription('An entry containing all Redundancy power supply unit(RPSU) stauts.')
rpsuIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 35098, 1, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpsuIndex.setStatus('current')
if mibBuilder.loadTexts: rpsuIndex.setDescription('The slot number Redundancy power supply unit(RPSU).')
serialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 35098, 1, 11, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialNumber.setStatus('current')
if mibBuilder.loadTexts: serialNumber.setDescription('The serial number Redundancy power supply unit(RPSU).')
rpsuStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 35098, 1, 11, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpsuStatus.setStatus('current')
if mibBuilder.loadTexts: rpsuStatus.setDescription('The status of Redundancy power supply unit(RPSU).\n1: The Redundancy power supply unit(RPSU) power on.\n0: The Redundancy power supply unit(RPSU) power off.')
rpsuTemprature = MibTableColumn((1, 3, 6, 1, 4, 1, 35098, 1, 11, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpsuTemprature.setStatus('current')
if mibBuilder.loadTexts: rpsuTemprature.setDescription('Temprature of the Redundancy power supply unit(RPSU).')
rpsuFanSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 35098, 1, 11, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpsuFanSpeed.setStatus('current')
if mibBuilder.loadTexts: rpsuFanSpeed.setDescription('Fan speed of the Redundancy power supply unit(RPSU).')
rpsuPWM = MibTableColumn((1, 3, 6, 1, 4, 1, 35098, 1, 11, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpsuPWM.setStatus('current')
if mibBuilder.loadTexts: rpsuPWM.setDescription('Pulse Width Modulation(PWM) of the Redundancy power supply unit(RPSU).')
switchConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 35098, 2))
tftpConfigFilePath = MibScalar((1, 3, 6, 1, 4, 1, 35098, 2, 0), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpConfigFilePath.setStatus('current')
if mibBuilder.loadTexts: tftpConfigFilePath.setDescription('If the tftp path of defined config file is set, the configurations\nincluded in the config file are also applied meanwhile. ')
tftpBatchFilePath = MibScalar((1, 3, 6, 1, 4, 1, 35098, 2, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpBatchFilePath.setStatus('current')
if mibBuilder.loadTexts: tftpBatchFilePath.setDescription('If the tftp path of a command batch file is set, the present configurations\nwill changed depending on the execution of the command in the batch file.')
picaConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 35098, 20))
picaGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 35098, 20, 1))
picaCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 35098, 20, 2))
picaBasicGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 35098, 20, 1, 1)).setObjects(("PICA-PRIVATE-MIB", "cpuUsage"), ("PICA-PRIVATE-MIB", "totalPhyMemory"), ("PICA-PRIVATE-MIB", "usedPhyMemory"), ("PICA-PRIVATE-MIB", "freePhyMemory"), ("PICA-PRIVATE-MIB", "switchTemperature"), ("PICA-PRIVATE-MIB", "cpuTemperature"), ("PICA-PRIVATE-MIB", "switchChipTemperature"), ("PICA-PRIVATE-MIB", "switchFanSpeed"), ("PICA-PRIVATE-MIB", "switchPWM"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    picaBasicGroup = picaBasicGroup.setStatus('current')
if mibBuilder.loadTexts: picaBasicGroup.setDescription('These objects are required for pica private mib.')
picasfpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 35098, 20, 1, 2)).setObjects(("PICA-PRIVATE-MIB", "sfpIndex"), ("PICA-PRIVATE-MIB", "sfpVendorName"), ("PICA-PRIVATE-MIB", "sfpSerialNumber"), ("PICA-PRIVATE-MIB", "sfpTemp"), ("PICA-PRIVATE-MIB", "sfpVoltage"), ("PICA-PRIVATE-MIB", "sfpBias"), ("PICA-PRIVATE-MIB", "sfpTxPower"), ("PICA-PRIVATE-MIB", "sfpRxPower"), ("PICA-PRIVATE-MIB", "sfpType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    picasfpGroup = picasfpGroup.setStatus('current')
if mibBuilder.loadTexts: picasfpGroup.setDescription('These objects are required for pica private mib.')
picarpsuGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 35098, 20, 1, 3)).setObjects(("PICA-PRIVATE-MIB", "rpsuIndex"), ("PICA-PRIVATE-MIB", "serialNumber"), ("PICA-PRIVATE-MIB", "rpsuStatus"), ("PICA-PRIVATE-MIB", "rpsuTemprature"), ("PICA-PRIVATE-MIB", "rpsuFanSpeed"), ("PICA-PRIVATE-MIB", "rpsuPWM"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    picarpsuGroup = picarpsuGroup.setStatus('current')
if mibBuilder.loadTexts: picarpsuGroup.setDescription(' These objects are required for pica private mib.')
picaConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 35098, 20, 1, 4)).setObjects(("PICA-PRIVATE-MIB", "tftpConfigFilePath"), ("PICA-PRIVATE-MIB", "tftpBatchFilePath"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    picaConfigGroup = picaConfigGroup.setStatus('current')
if mibBuilder.loadTexts: picaConfigGroup.setDescription(' These objects are required for pica private mib.')
picaCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 35098, 20, 2, 1)).setObjects(("PICA-PRIVATE-MIB", "picaBasicGroup"), ("PICA-PRIVATE-MIB", "picasfpGroup"), ("PICA-PRIVATE-MIB", "picarpsuGroup"), ("PICA-PRIVATE-MIB", "picaConfigGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    picaCompliance = picaCompliance.setStatus('current')
if mibBuilder.loadTexts: picaCompliance.setDescription('The compliance statement ')
mibBuilder.exportSymbols("PICA-PRIVATE-MIB", sfpSerialNumber=sfpSerialNumber, sfpType=sfpType, picaCompliance=picaCompliance, sfpVendorName=sfpVendorName, sfpIndex=sfpIndex, hostStatusGroup=hostStatusGroup, switchPWM=switchPWM, sfpstatusTable=sfpstatusTable, sfpstatusEntry=sfpstatusEntry, sfpBias=sfpBias, sfpTemp=sfpTemp, rpsuIndex=rpsuIndex, sfpVoltage=sfpVoltage, picaPrivateMib=picaPrivateMib, picasfpGroup=picasfpGroup, cpuUsage=cpuUsage, serialNumber=serialNumber, rpsuPWM=rpsuPWM, usedPhyMemory=usedPhyMemory, rpsuFanSpeed=rpsuFanSpeed, picaConfigGroup=picaConfigGroup, tftpConfigFilePath=tftpConfigFilePath, picaGroups=picaGroups, switchFanSpeed=switchFanSpeed, sfpRxPower=sfpRxPower, switchConfigGroup=switchConfigGroup, rpsustatusTable=rpsustatusTable, cpuTemperature=cpuTemperature, picaCompliances=picaCompliances, picaConformance=picaConformance, rpsuTemprature=rpsuTemprature, switchChipTemperature=switchChipTemperature, switchTemperature=switchTemperature, rpsustatusEntry=rpsustatusEntry, sfpTxPower=sfpTxPower, picaBasicGroup=picaBasicGroup, PYSNMP_MODULE_ID=picaPrivateMib, freePhyMemory=freePhyMemory, totalPhyMemory=totalPhyMemory, picarpsuGroup=picarpsuGroup, rpsuStatus=rpsuStatus, tftpBatchFilePath=tftpBatchFilePath)
