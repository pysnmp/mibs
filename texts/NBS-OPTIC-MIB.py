#
# PySNMP MIB module NBS-OPTIC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/mrv/NBS-OPTIC-MIB
# Produced by pysmi-1.1.12 at Tue Sep 17 10:03:28 2024
# On host fv-az1427-100 platform Linux version 6.5.0-1025-azure by user runner
# Using Python version 3.10.14 (main, Jul 16 2024, 19:03:10) [GCC 11.4.0]
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
nbs, = mibBuilder.importSymbols("NBS-MIB", "nbs")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
iso, IpAddress, ModuleIdentity, TimeTicks, Counter32, Counter64, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Unsigned32, MibIdentifier, Integer32, Bits, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "IpAddress", "ModuleIdentity", "TimeTicks", "Counter32", "Counter64", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Unsigned32", "MibIdentifier", "Integer32", "Bits", "ObjectIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
nbsOpticMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 629, 213))
if mibBuilder.loadTexts: nbsOpticMib.setLastUpdated('201209260000Z')
if mibBuilder.loadTexts: nbsOpticMib.setOrganization('NBS')
if mibBuilder.loadTexts: nbsOpticMib.setContactInfo('For technical support, please contact your service channel')
if mibBuilder.loadTexts: nbsOpticMib.setDescription('Information Base for common fiber optic features.')
nbsOpticPortGrp = ObjectIdentity((1, 3, 6, 1, 4, 1, 629, 213, 1))
if mibBuilder.loadTexts: nbsOpticPortGrp.setStatus('current')
if mibBuilder.loadTexts: nbsOpticPortGrp.setDescription('For describing fiber optic ports.')
nbsOpticPortTableSize = MibScalar((1, 3, 6, 1, 4, 1, 629, 213, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOpticPortTableSize.setStatus('current')
if mibBuilder.loadTexts: nbsOpticPortTableSize.setDescription('The number of fiber optic ports in this system.')
nbsOpticPortTable = MibTable((1, 3, 6, 1, 4, 1, 629, 213, 1, 2), )
if mibBuilder.loadTexts: nbsOpticPortTable.setStatus('current')
if mibBuilder.loadTexts: nbsOpticPortTable.setDescription('List of all fiber optic ports in this system.')
nbsOpticPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 213, 1, 2, 1), ).setIndexNames((0, "NBS-OPTIC-MIB", "nbsOpticPortNdx"))
if mibBuilder.loadTexts: nbsOpticPortEntry.setStatus('current')
if mibBuilder.loadTexts: nbsOpticPortEntry.setDescription('A particular fiber optic port.')
nbsOpticPortNdx = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 213, 1, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: nbsOpticPortNdx.setStatus('current')
if mibBuilder.loadTexts: nbsOpticPortNdx.setDescription('ifIndex-like unique id of this port.')
nbsOpticPortTxStatusAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 213, 1, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notSupported", 1), ("outOfService", 2), ("inService", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsOpticPortTxStatusAdmin.setStatus('current')
if mibBuilder.loadTexts: nbsOpticPortTxStatusAdmin.setDescription('Persistent. This object is used to administratively disable or\n        enable the Transmitter of this port.  It is an alias to the\n        nbsCmmcPortEnableAdmin object.\n\n        If the transmitter cannot be disabled by user, this object is\n        notSupported(1).\n\n        If the user wishes to disable this transmitter, the user should\n        set this to outOfService(2). This is equivalent to setting\n        nbsCmmcPortEnableAdmin to disable(2).  This action should cause\n        the mib2 object ifAdminStatus to go down(2).\n\n        If the user wishes to enable this transmitter, the user should\n        set this to inService(3). If nothing else remains disabled,\n        this should return the mib2 object ifAdminStatus to up(1).')
nbsOpticPortTxStatusOper = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 213, 1, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notSupported", 1), ("outOfService", 2), ("inService", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOpticPortTxStatusOper.setStatus('current')
if mibBuilder.loadTexts: nbsOpticPortTxStatusOper.setDescription("This object indicates whether this port's transmitter is\n        currently enabled or disabled.  It is an alias to the object\n        nbsCmmcPortEnableOper.\n\n        If the transmitter cannot be independently disabled, this\n        object is notSupported(1).\n\n        If the transmitter is currently disabled, this value will be\n        outOfService(2).\n\n        If the transmitter is currently enabled, this value will be\n        inService(3).")
nbsOpticPortRxStatusAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 213, 1, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notSupported", 1), ("outOfService", 2), ("inService", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsOpticPortRxStatusAdmin.setStatus('current')
if mibBuilder.loadTexts: nbsOpticPortRxStatusAdmin.setDescription('Persistent. This object is used to administratively disable or\n        enable the receiver of this port.\n\n        If the receiver cannot be selectively disabled by user, this\n        object is notSupported(1).\n\n        If the user wishes to disable this receiver, the user should\n        set this to outOfService(2). This action should also set the\n        mib2 object ifAdminStatus to down(2).\n\n        If the user wishes to enable this receiver, the user should\n        set this to inService(3). If nothing else remains disabled,\n        this should return the mib2 object ifAdminStatus to up(1).')
nbsOpticPortRxStatusOper = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 213, 1, 2, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notSupported", 1), ("outOfService", 2), ("inService", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOpticPortRxStatusOper.setStatus('current')
if mibBuilder.loadTexts: nbsOpticPortRxStatusOper.setDescription("This object indicates whether this port's receiver is\n        currently enabled or disabled.\n\n        If the receiver cannot be independently disabled, this\n        object is notSupported(1).\n\n        If the receiver is currently disabled, this value will be\n        outOfService(2).\n\n        If the receiver is currently enabled, this value will be\n        inService(3).")
nbsOpticPortConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 213, 1, 2, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOpticPortConnector.setStatus('current')
if mibBuilder.loadTexts: nbsOpticPortConnector.setDescription('This object indicates the physical connector to the port.  It\n        is an alias to the object nbsCmmcPortConnector, and the list of\n        connector types is enumerated there.')
nbsOpticPortPolish = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 213, 1, 2, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notSupported", 1), ("pc", 2), ("upc", 3), ("apc", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOpticPortPolish.setStatus('current')
if mibBuilder.loadTexts: nbsOpticPortPolish.setDescription('This object indicates the terminal polish.')
nbsOpticPortFiberMode = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 213, 1, 2, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notSupported", 1), ("reserved2", 2), ("reserved3", 3), ("singleMode", 4), ("multiMode", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOpticPortFiberMode.setStatus('current')
if mibBuilder.loadTexts: nbsOpticPortFiberMode.setDescription('This object indicates the modality of the fiber.  It is an\n        alias of nbsCmmcPortMedium')
mibBuilder.exportSymbols("NBS-OPTIC-MIB", nbsOpticPortRxStatusAdmin=nbsOpticPortRxStatusAdmin, nbsOpticPortConnector=nbsOpticPortConnector, nbsOpticPortTxStatusAdmin=nbsOpticPortTxStatusAdmin, nbsOpticPortEntry=nbsOpticPortEntry, nbsOpticPortNdx=nbsOpticPortNdx, nbsOpticPortRxStatusOper=nbsOpticPortRxStatusOper, nbsOpticPortPolish=nbsOpticPortPolish, nbsOpticPortTable=nbsOpticPortTable, nbsOpticPortFiberMode=nbsOpticPortFiberMode, nbsOpticPortGrp=nbsOpticPortGrp, nbsOpticPortTxStatusOper=nbsOpticPortTxStatusOper, nbsOpticPortTableSize=nbsOpticPortTableSize, nbsOpticMib=nbsOpticMib, PYSNMP_MODULE_ID=nbsOpticMib)
