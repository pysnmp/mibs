#
# PySNMP MIB module A10-AX-NOTIFICATIONS (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/a10/A10-AX-NOTIFICATIONS
# Produced by pysmi-1.1.12 at Tue Jun  4 08:26:01 2024
# On host fv-az1117-967 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
axNotification, axLogging = mibBuilder.importSymbols("A10-AX-MIB", "axNotification", "axLogging")
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint")
InetAddressType, = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Unsigned32, Gauge32, Integer32, Bits, Counter64, iso, Counter32, ObjectIdentity, IpAddress, TimeTicks, NotificationType, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Gauge32", "Integer32", "Bits", "Counter64", "iso", "Counter32", "ObjectIdentity", "IpAddress", "TimeTicks", "NotificationType", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier")
DisplayString, PhysAddress, TextualConvention, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "PhysAddress", "TextualConvention", "DateAndTime")
axNotificationObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 1))
axNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2))
axSystemNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 1))
axAppNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 2))
axNetworkNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 3))
axGslbNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 5))
axSlbNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 6))
axNotificationMsg = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNotificationMsg.setStatus('current')
if mibBuilder.loadTexts: axNotificationMsg.setDescription('The information about the related notification.')
axNotificationSLBServer = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNotificationSLBServer.setStatus('current')
if mibBuilder.loadTexts: axNotificationSLBServer.setDescription('The address or host name of the server.')
axNotificationSLBPort = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNotificationSLBPort.setStatus('current')
if mibBuilder.loadTexts: axNotificationSLBPort.setDescription('The service port.')
axNotificationSLBCurConns = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNotificationSLBCurConns.setStatus('current')
if mibBuilder.loadTexts: axNotificationSLBCurConns.setDescription('The current total of connections.')
axNotificationVirtualServer = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNotificationVirtualServer.setStatus('current')
if mibBuilder.loadTexts: axNotificationVirtualServer.setDescription('The address or host name of the virtual server.')
axNotificationVirtualServerPort = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNotificationVirtualServerPort.setStatus('current')
if mibBuilder.loadTexts: axNotificationVirtualServerPort.setDescription('The virtual server port.')
axNotificationVirtualServerPortType = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 8, 9, 10, 12, 14, 15, 16, 17, 11, 19, 18, 5))).clone(namedValues=NamedValues(("firewall", 1), ("tcp", 2), ("udp", 3), ("rtsp", 8), ("ftp", 9), ("mms", 10), ("fastHTTP", 12), ("http", 14), ("https", 15), ("sslProxy", 16), ("smtp", 17), ("sip", 11), ("sips", 19), ("sip-TCP", 18), ("others", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNotificationVirtualServerPortType.setStatus('current')
if mibBuilder.loadTexts: axNotificationVirtualServerPortType.setDescription('The virtual server port type.')
axNotificationDroppedPackets = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNotificationDroppedPackets.setStatus('current')
if mibBuilder.loadTexts: axNotificationDroppedPackets.setDescription('The number of dropped packets when the event happened.')
axNotificationConfiguredThreshold = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNotificationConfiguredThreshold.setStatus('current')
if mibBuilder.loadTexts: axNotificationConfiguredThreshold.setDescription('The configured threshold value.')
axNotificationCurrentUsage = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNotificationCurrentUsage.setStatus('current')
if mibBuilder.loadTexts: axNotificationCurrentUsage.setDescription('The current usage value.')
axNotificationConnLimit = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNotificationConnLimit.setStatus('current')
if mibBuilder.loadTexts: axNotificationConnLimit.setDescription('The conn-limit.')
axNotificationTrunkID = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNotificationTrunkID.setStatus('current')
if mibBuilder.loadTexts: axNotificationTrunkID.setDescription('The trunk ID')
axNotificationPortThreshold = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNotificationPortThreshold.setStatus('current')
if mibBuilder.loadTexts: axNotificationPortThreshold.setDescription('The port threshold')
axNotificationCurrentUpPorts = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNotificationCurrentUpPorts.setStatus('current')
if mibBuilder.loadTexts: axNotificationCurrentUpPorts.setDescription('The current up ports')
axNotificationFanName = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNotificationFanName.setStatus('current')
if mibBuilder.loadTexts: axNotificationFanName.setDescription('The system fan name.')
axNotificationPowerSupplyName = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNotificationPowerSupplyName.setStatus('current')
if mibBuilder.loadTexts: axNotificationPowerSupplyName.setDescription('The system power supply name.')
axNotificationHAGroup = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNotificationHAGroup.setStatus('current')
if mibBuilder.loadTexts: axNotificationHAGroup.setDescription('The HA group ID.')
axNotificationSLBServiceGroupName = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNotificationSLBServiceGroupName.setStatus('current')
if mibBuilder.loadTexts: axNotificationSLBServiceGroupName.setDescription('The service group name.')
axNotificationPartitionId = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNotificationPartitionId.setStatus('current')
if mibBuilder.loadTexts: axNotificationPartitionId.setDescription('The application partition identifier.')
axNotificationVrid = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNotificationVrid.setStatus('current')
if mibBuilder.loadTexts: axNotificationVrid.setDescription('The VRRP identifier.')
axNotificationPartitionName = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNotificationPartitionName.setStatus('current')
if mibBuilder.loadTexts: axNotificationPartitionName.setDescription('The application partition name.')
axNotificationGslbSiteName = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 1, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNotificationGslbSiteName.setStatus('current')
if mibBuilder.loadTexts: axNotificationGslbSiteName.setDescription('The GSLB site name.')
axNotificationGslbSiteSlbDeviceName = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 1, 23), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNotificationGslbSiteSlbDeviceName.setStatus('current')
if mibBuilder.loadTexts: axNotificationGslbSiteSlbDeviceName.setDescription('The GSLB device name inside a site.')
axNotificationGslbSiteIpServerAddr = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 1, 24), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNotificationGslbSiteIpServerAddr.setStatus('current')
if mibBuilder.loadTexts: axNotificationGslbSiteIpServerAddr.setDescription('The GSLB IP server address.')
axNotificationGslbServiceIpName = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 1, 25), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNotificationGslbServiceIpName.setStatus('current')
if mibBuilder.loadTexts: axNotificationGslbServiceIpName.setDescription('The GSLB service IP name.')
axNotificationGslbServiceIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 1, 26), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNotificationGslbServiceIpAddr.setStatus('current')
if mibBuilder.loadTexts: axNotificationGslbServiceIpAddr.setDescription('The GSLB service IP name.')
axNotificationGslbServiceIpPortType = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 1, 27), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNotificationGslbServiceIpPortType.setStatus('current')
if mibBuilder.loadTexts: axNotificationGslbServiceIpPortType.setDescription('The GSLB service IP port type.')
axNotificationGslbZoneName = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 1, 28), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNotificationGslbZoneName.setStatus('current')
if mibBuilder.loadTexts: axNotificationGslbZoneName.setDescription('The GSLB zone name.')
axNotificationGslbZoneServiceProto = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 1, 29), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNotificationGslbZoneServiceProto.setStatus('current')
if mibBuilder.loadTexts: axNotificationGslbZoneServiceProto.setDescription('The GSLB zone service protocol name.')
axNotificationGslbZoneServiceName = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 1, 30), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNotificationGslbZoneServiceName.setStatus('current')
if mibBuilder.loadTexts: axNotificationGslbZoneServiceName.setDescription('The GSLB zone service name.')
axNotificationGslbGroupName = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 1, 31), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNotificationGslbGroupName.setStatus('current')
if mibBuilder.loadTexts: axNotificationGslbGroupName.setDescription('The GSLB group name.')
axNotificationGslbGroupEntity = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 1, 32), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNotificationGslbGroupEntity.setStatus('current')
if mibBuilder.loadTexts: axNotificationGslbGroupEntity.setDescription('The GSLB group entity (either group member or group master) IP address or local.')
axNotificationLicensedModuleName = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 1, 33), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNotificationLicensedModuleName.setStatus('current')
if mibBuilder.loadTexts: axNotificationLicensedModuleName.setDescription('The licensed module name.')
axNotificationShutdownReason = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tooHighSystemTemperature", 1), ("insufficientPowerSupply", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNotificationShutdownReason.setStatus('current')
if mibBuilder.loadTexts: axNotificationShutdownReason.setDescription('The reason for the system shut-down.')
axNotificationIpAddressType = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 1, 35), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNotificationIpAddressType.setStatus('current')
if mibBuilder.loadTexts: axNotificationIpAddressType.setDescription('The type of IP address.')
axNotificationLicenseDisableDuration = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 1, 36), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNotificationLicenseDisableDuration.setStatus('current')
if mibBuilder.loadTexts: axNotificationLicenseDisableDuration.setDescription('The license has been disabled for given seconds.')
axNotificationSslServerCertificateErrCounter = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 1, 37), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNotificationSslServerCertificateErrCounter.setStatus('current')
if mibBuilder.loadTexts: axNotificationSslServerCertificateErrCounter.setDescription('The counter for the SSL server certificate errors.')
axNotificationServerSelectionFailureReason = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 1, 38), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNotificationServerSelectionFailureReason.setStatus('current')
if mibBuilder.loadTexts: axNotificationServerSelectionFailureReason.setDescription('The reason of server selection failure.')
axNotificationConnectionTypeName = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 1, 39), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNotificationConnectionTypeName.setStatus('current')
if mibBuilder.loadTexts: axNotificationConnectionTypeName.setDescription('The name of the type.')
axNotificationSlbObjectChange = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("create", 1), ("delete", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNotificationSlbObjectChange.setStatus('current')
if mibBuilder.loadTexts: axNotificationSlbObjectChange.setDescription('The type of create/delete.')
axNotificationCertificateName = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 1, 41), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNotificationCertificateName.setStatus('current')
if mibBuilder.loadTexts: axNotificationCertificateName.setDescription('The name of the certificate.')
axNotificationDateTime = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 1, 42), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNotificationDateTime.setStatus('current')
if mibBuilder.loadTexts: axNotificationDateTime.setDescription('Time the event is going to occuer, expired.')
axNotificationSLBServerPortType = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("tcp", 2), ("udp", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNotificationSLBServerPortType.setStatus('current')
if mibBuilder.loadTexts: axNotificationSLBServerPortType.setDescription('The server port type of create/delete.')
axNotificationPartitionResourceName = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 1, 44), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNotificationPartitionResourceName.setStatus('current')
if mibBuilder.loadTexts: axNotificationPartitionResourceName.setDescription('The partition resource name.')
axNotificationPartitionResourceUsageLevel = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("below", 1), ("above", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNotificationPartitionResourceUsageLevel.setStatus('current')
if mibBuilder.loadTexts: axNotificationPartitionResourceUsageLevel.setDescription('The partition resource usage level.')
axNotificationTacasServerHost = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 1, 46), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNotificationTacasServerHost.setStatus('current')
if mibBuilder.loadTexts: axNotificationTacasServerHost.setDescription('The TACACS server host.')
axNotificationUpDown = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 1, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNotificationUpDown.setStatus('current')
if mibBuilder.loadTexts: axNotificationUpDown.setDescription('The type of up or down.')
axNotificationTrueFalse = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNotificationTrueFalse.setStatus('current')
if mibBuilder.loadTexts: axNotificationTrueFalse.setDescription('The effective of the notification.')
axNotificationLsnIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 1, 50), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNotificationLsnIpAddress.setStatus('current')
if mibBuilder.loadTexts: axNotificationLsnIpAddress.setDescription('The LSN IP address string (IPv4/6).')
axNotificationLsnProtoType = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("tcp", 2), ("udp", 3), ("icmp", 4), ("icmpV6", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNotificationLsnProtoType.setStatus('current')
if mibBuilder.loadTexts: axNotificationLsnProtoType.setDescription('The LSN protocol type.')
axNotificationLsnCurrentUsage = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 1, 52), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNotificationLsnCurrentUsage.setStatus('current')
if mibBuilder.loadTexts: axNotificationLsnCurrentUsage.setDescription('The LSN current usage.')
axNotificationLsnPoolName = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 1, 53), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNotificationLsnPoolName.setStatus('current')
if mibBuilder.loadTexts: axNotificationLsnPoolName.setDescription('The NAT pool name.')
axNotificationLsnExceededTimes = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 1, 54), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNotificationLsnExceededTimes.setStatus('current')
if mibBuilder.loadTexts: axNotificationLsnExceededTimes.setDescription('The exceeded times.')
axNotificationLsnFixedNatPortMappingFileName = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 1, 55), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNotificationLsnFixedNatPortMappingFileName.setStatus('current')
if mibBuilder.loadTexts: axNotificationLsnFixedNatPortMappingFileName.setDescription('The fixed nat port mapping file name.')
axNotificationLsnFixedNatPortMappingFileChangeType = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 1, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("create", 1), ("delete", 2), ("reconfigure", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNotificationLsnFixedNatPortMappingFileChangeType.setStatus('current')
if mibBuilder.loadTexts: axNotificationLsnFixedNatPortMappingFileChangeType.setDescription('The change type of fixed nat port mapping file.')
axNotificationOldVcsState = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 1, 57), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("vmasterCandidate", 0), ("activatingSlave", 1), ("vBlade", 2), ("vMaster", 3), ("vMasterTakeover", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNotificationOldVcsState.setStatus('current')
if mibBuilder.loadTexts: axNotificationOldVcsState.setDescription('The old state of VCS.')
axNotificationNewVcsState = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 1, 58), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("vmasterCandidate", 0), ("activatingSlave", 1), ("vBlade", 2), ("vMaster", 3), ("vMasterTakeover", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNotificationNewVcsState.setStatus('current')
if mibBuilder.loadTexts: axNotificationNewVcsState.setDescription('The new state of VCS.')
axSystemStart = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 1, 1))
if mibBuilder.loadTexts: axSystemStart.setStatus('current')
if mibBuilder.loadTexts: axSystemStart.setDescription('Notify that the system has started running.')
axSystemShutdown = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 1, 2))
if mibBuilder.loadTexts: axSystemShutdown.setStatus('current')
if mibBuilder.loadTexts: axSystemShutdown.setDescription('Notify that the system is in the process of being shut down.')
axSystemTempHigh = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 1, 3)).setObjects(("A10-AX-NOTIFICATIONS", "axNotificationConfiguredThreshold"), ("A10-AX-NOTIFICATIONS", "axNotificationCurrentUsage"))
if mibBuilder.loadTexts: axSystemTempHigh.setStatus('current')
if mibBuilder.loadTexts: axSystemTempHigh.setDescription('The system tempature is high.')
axFan1Failure = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 1, 4))
if mibBuilder.loadTexts: axFan1Failure.setStatus('deprecated')
if mibBuilder.loadTexts: axFan1Failure.setDescription('The system fan1 is failed.')
axFan2Failure = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 1, 5))
if mibBuilder.loadTexts: axFan2Failure.setStatus('deprecated')
if mibBuilder.loadTexts: axFan2Failure.setDescription('The system fan2 is failed.')
axFan3Failure = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 1, 6))
if mibBuilder.loadTexts: axFan3Failure.setStatus('deprecated')
if mibBuilder.loadTexts: axFan3Failure.setDescription('The system fan3 is failed.')
axUpperPowerSupplyFailure = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 1, 9))
if mibBuilder.loadTexts: axUpperPowerSupplyFailure.setStatus('deprecated')
if mibBuilder.loadTexts: axUpperPowerSupplyFailure.setDescription('The system upper power supply is failed.')
axLowerPowerSupplyFailure = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 1, 10))
if mibBuilder.loadTexts: axLowerPowerSupplyFailure.setStatus('deprecated')
if mibBuilder.loadTexts: axLowerPowerSupplyFailure.setDescription('The system lower power supply is failed.')
axPrimaryHardDiskFailure = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 1, 11))
if mibBuilder.loadTexts: axPrimaryHardDiskFailure.setStatus('current')
if mibBuilder.loadTexts: axPrimaryHardDiskFailure.setDescription('The primary hard disk is failed.')
axSecondaryHardDiskFailure = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 1, 12))
if mibBuilder.loadTexts: axSecondaryHardDiskFailure.setStatus('current')
if mibBuilder.loadTexts: axSecondaryHardDiskFailure.setDescription('The secondary hard disk is failed.')
axHardDiskUsageHigh = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 1, 13))
if mibBuilder.loadTexts: axHardDiskUsageHigh.setStatus('current')
if mibBuilder.loadTexts: axHardDiskUsageHigh.setDescription('The hard disk usage is high.')
axMemoryUsageHigh = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 1, 14))
if mibBuilder.loadTexts: axMemoryUsageHigh.setStatus('current')
if mibBuilder.loadTexts: axMemoryUsageHigh.setDescription('The memory usage is high.')
axSystemRestart = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 1, 15))
if mibBuilder.loadTexts: axSystemRestart.setStatus('current')
if mibBuilder.loadTexts: axSystemRestart.setDescription('Notify that the agent has been restarted.')
axSystemDropPacketEvent = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 1, 16)).setObjects(("A10-AX-NOTIFICATIONS", "axNotificationDroppedPackets"))
if mibBuilder.loadTexts: axSystemDropPacketEvent.setStatus('current')
if mibBuilder.loadTexts: axSystemDropPacketEvent.setDescription('The AX experiences the packet dropped of axNotificationDroppedPackets.')
axSystemRelieveDropPacketEvent = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 1, 17)).setObjects(("A10-AX-NOTIFICATIONS", "axNotificationDroppedPackets"))
if mibBuilder.loadTexts: axSystemRelieveDropPacketEvent.setStatus('current')
if mibBuilder.loadTexts: axSystemRelieveDropPacketEvent.setDescription('The AX recovers from the packet dropped before.')
axSystemControlCpuHigh = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 1, 18)).setObjects(("A10-AX-NOTIFICATIONS", "axNotificationConfiguredThreshold"), ("A10-AX-NOTIFICATIONS", "axNotificationCurrentUsage"))
if mibBuilder.loadTexts: axSystemControlCpuHigh.setStatus('current')
if mibBuilder.loadTexts: axSystemControlCpuHigh.setDescription('The AX control CPU usage is high.')
axSystemDataCpuHigh = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 1, 19)).setObjects(("A10-AX-NOTIFICATIONS", "axNotificationConfiguredThreshold"), ("A10-AX-NOTIFICATIONS", "axNotificationCurrentUsage"))
if mibBuilder.loadTexts: axSystemDataCpuHigh.setStatus('current')
if mibBuilder.loadTexts: axSystemDataCpuHigh.setDescription('The AX data CPU usage is high.')
axSystemFanFailure = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 1, 20)).setObjects(("A10-AX-NOTIFICATIONS", "axNotificationFanName"))
if mibBuilder.loadTexts: axSystemFanFailure.setStatus('current')
if mibBuilder.loadTexts: axSystemFanFailure.setDescription('The system fan is failed.')
axSystemPowerSupplyFailure = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 1, 21)).setObjects(("A10-AX-NOTIFICATIONS", "axNotificationPowerSupplyName"))
if mibBuilder.loadTexts: axSystemPowerSupplyFailure.setStatus('current')
if mibBuilder.loadTexts: axSystemPowerSupplyFailure.setDescription('The system power supply is failed.')
axSystemLicenseRequired = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 1, 22)).setObjects(("A10-AX-NOTIFICATIONS", "axNotificationLicensedModuleName"))
if mibBuilder.loadTexts: axSystemLicenseRequired.setStatus('current')
if mibBuilder.loadTexts: axSystemLicenseRequired.setDescription('The system requires the valid license for specific module.')
axSystemLicenseLoadSuccessful = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 1, 23)).setObjects(("A10-AX-NOTIFICATIONS", "axNotificationLicensedModuleName"))
if mibBuilder.loadTexts: axSystemLicenseLoadSuccessful.setStatus('current')
if mibBuilder.loadTexts: axSystemLicenseLoadSuccessful.setDescription('The system loads the license for specific module successfully.')
axSystemLicenseExpired = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 1, 24)).setObjects(("A10-AX-NOTIFICATIONS", "axNotificationLicensedModuleName"))
if mibBuilder.loadTexts: axSystemLicenseExpired.setStatus('current')
if mibBuilder.loadTexts: axSystemLicenseExpired.setDescription('The module license is expired.')
axSystemShutdownForReason = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 1, 25)).setObjects(("A10-AX-NOTIFICATIONS", "axNotificationShutdownReason"))
if mibBuilder.loadTexts: axSystemShutdownForReason.setStatus('current')
if mibBuilder.loadTexts: axSystemShutdownForReason.setDescription('The AX system is mandatorily shut down.')
axFileSystemBecomeReadOnly = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 1, 26))
if mibBuilder.loadTexts: axFileSystemBecomeReadOnly.setStatus('current')
if mibBuilder.loadTexts: axFileSystemBecomeReadOnly.setDescription('The file system is becoming the read-only.')
axSystemLicensedModuleDisabledForDuration = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 1, 27)).setObjects(("A10-AX-NOTIFICATIONS", "axNotificationLicensedModuleName"), ("A10-AX-NOTIFICATIONS", "axNotificationLicenseDisableDuration"))
if mibBuilder.loadTexts: axSystemLicensedModuleDisabledForDuration.setStatus('current')
if mibBuilder.loadTexts: axSystemLicensedModuleDisabledForDuration.setDescription('The system disables the specific licensed module for the past duration seconds.')
axSystemControlCpuBecomeNormal = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 1, 28)).setObjects(("A10-AX-NOTIFICATIONS", "axNotificationConfiguredThreshold"), ("A10-AX-NOTIFICATIONS", "axNotificationCurrentUsage"))
if mibBuilder.loadTexts: axSystemControlCpuBecomeNormal.setStatus('current')
if mibBuilder.loadTexts: axSystemControlCpuBecomeNormal.setDescription('The AX control CPU usage is back to normal.')
axSystemDataCpuBecomeNormal = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 1, 29)).setObjects(("A10-AX-NOTIFICATIONS", "axNotificationConfiguredThreshold"), ("A10-AX-NOTIFICATIONS", "axNotificationCurrentUsage"))
if mibBuilder.loadTexts: axSystemDataCpuBecomeNormal.setStatus('current')
if mibBuilder.loadTexts: axSystemDataCpuBecomeNormal.setDescription('The AX data CPU usage is back to normal.')
axSystemTempBecomeNormal = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 1, 30)).setObjects(("A10-AX-NOTIFICATIONS", "axNotificationConfiguredThreshold"), ("A10-AX-NOTIFICATIONS", "axNotificationCurrentUsage"))
if mibBuilder.loadTexts: axSystemTempBecomeNormal.setStatus('current')
if mibBuilder.loadTexts: axSystemTempBecomeNormal.setDescription('The system tempature is back to normal.')
axHardDiskUsageBecomeNormal = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 1, 31))
if mibBuilder.loadTexts: axHardDiskUsageBecomeNormal.setStatus('current')
if mibBuilder.loadTexts: axHardDiskUsageBecomeNormal.setDescription('The hard disk usage is back to normal.')
axMemoryUsageBecomeNormal = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 1, 32))
if mibBuilder.loadTexts: axMemoryUsageBecomeNormal.setStatus('current')
if mibBuilder.loadTexts: axMemoryUsageBecomeNormal.setDescription('The memory usage is back to normal.')
axSystemFanRecover = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 1, 33)).setObjects(("A10-AX-NOTIFICATIONS", "axNotificationFanName"))
if mibBuilder.loadTexts: axSystemFanRecover.setStatus('current')
if mibBuilder.loadTexts: axSystemFanRecover.setDescription('The system fan is recover.')
axSystemPowerSupplyRecover = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 1, 34)).setObjects(("A10-AX-NOTIFICATIONS", "axNotificationPowerSupplyName"))
if mibBuilder.loadTexts: axSystemPowerSupplyRecover.setStatus('current')
if mibBuilder.loadTexts: axSystemPowerSupplyRecover.setDescription('The system power supply is recover.')
axSystemConnectionResourceHigh = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 1, 35)).setObjects(("A10-AX-NOTIFICATIONS", "axNotificationConnectionTypeName"), ("A10-AX-NOTIFICATIONS", "axNotificationConfiguredThreshold"), ("A10-AX-NOTIFICATIONS", "axNotificationCurrentUsage"))
if mibBuilder.loadTexts: axSystemConnectionResourceHigh.setStatus('current')
if mibBuilder.loadTexts: axSystemConnectionResourceHigh.setDescription('The system connection is high.')
axSystemConnectionResourceBecomeNormal = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 1, 36)).setObjects(("A10-AX-NOTIFICATIONS", "axNotificationConnectionTypeName"), ("A10-AX-NOTIFICATIONS", "axNotificationConfiguredThreshold"), ("A10-AX-NOTIFICATIONS", "axNotificationCurrentUsage"))
if mibBuilder.loadTexts: axSystemConnectionResourceBecomeNormal.setStatus('current')
if mibBuilder.loadTexts: axSystemConnectionResourceBecomeNormal.setDescription('The system connection is back to normal.')
axSystemSmpResourceHigh = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 1, 37)).setObjects(("A10-AX-NOTIFICATIONS", "axNotificationConnectionTypeName"), ("A10-AX-NOTIFICATIONS", "axNotificationConfiguredThreshold"), ("A10-AX-NOTIFICATIONS", "axNotificationCurrentUsage"))
if mibBuilder.loadTexts: axSystemSmpResourceHigh.setStatus('current')
if mibBuilder.loadTexts: axSystemSmpResourceHigh.setDescription('The system SMP is high.')
axSystemSmpResourceBecomeNormal = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 1, 38)).setObjects(("A10-AX-NOTIFICATIONS", "axNotificationConnectionTypeName"), ("A10-AX-NOTIFICATIONS", "axNotificationConfiguredThreshold"), ("A10-AX-NOTIFICATIONS", "axNotificationCurrentUsage"))
if mibBuilder.loadTexts: axSystemSmpResourceBecomeNormal.setStatus('current')
if mibBuilder.loadTexts: axSystemSmpResourceBecomeNormal.setDescription('The SMP is back to normal.')
axTacacsMonitorServerUpDown = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 1, 39)).setObjects(("A10-AX-NOTIFICATIONS", "axNotificationMsg"), ("A10-AX-NOTIFICATIONS", "axNotificationTacasServerHost"), ("A10-AX-NOTIFICATIONS", "axNotificationUpDown"))
if mibBuilder.loadTexts: axTacacsMonitorServerUpDown.setStatus('current')
if mibBuilder.loadTexts: axTacacsMonitorServerUpDown.setDescription('The AX Tacacs Monitor Server is up/down.')
axHighPrioritySyslog = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 1, 41)).setObjects(("A10-AX-NOTIFICATIONS", "axNotificationMsg"))
if mibBuilder.loadTexts: axHighPrioritySyslog.setStatus('current')
if mibBuilder.loadTexts: axHighPrioritySyslog.setDescription('The high severity issue such as hardware failure.')
axHAStandby = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 2, 1)).setObjects(("A10-AX-NOTIFICATIONS", "axNotificationMsg"), ("A10-AX-NOTIFICATIONS", "axNotificationHAGroup"))
if mibBuilder.loadTexts: axHAStandby.setStatus('current')
if mibBuilder.loadTexts: axHAStandby.setDescription('The system is going into standby mode.')
axHAActive = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 2, 2)).setObjects(("A10-AX-NOTIFICATIONS", "axNotificationMsg"), ("A10-AX-NOTIFICATIONS", "axNotificationHAGroup"))
if mibBuilder.loadTexts: axHAActive.setStatus('current')
if mibBuilder.loadTexts: axHAActive.setDescription('The system is going into active mode.')
axHAActiveActive = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 2, 3)).setObjects(("A10-AX-NOTIFICATIONS", "axNotificationMsg"), ("A10-AX-NOTIFICATIONS", "axNotificationHAGroup"))
if mibBuilder.loadTexts: axHAActiveActive.setStatus('deprecated')
if mibBuilder.loadTexts: axHAActiveActive.setDescription('The system is going into active-active mode.')
axServiceDown = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 2, 4)).setObjects(("A10-AX-NOTIFICATIONS", "axNotificationMsg"), ("A10-AX-NOTIFICATIONS", "axNotificationSLBServer"), ("A10-AX-NOTIFICATIONS", "axNotificationSLBPort"))
if mibBuilder.loadTexts: axServiceDown.setStatus('current')
if mibBuilder.loadTexts: axServiceDown.setDescription('A service is detected DOWN.')
axServiceUp = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 2, 5)).setObjects(("A10-AX-NOTIFICATIONS", "axNotificationMsg"), ("A10-AX-NOTIFICATIONS", "axNotificationSLBServer"), ("A10-AX-NOTIFICATIONS", "axNotificationSLBPort"))
if mibBuilder.loadTexts: axServiceUp.setStatus('current')
if mibBuilder.loadTexts: axServiceUp.setDescription('A SLB service is up.')
axServerDown = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 2, 6)).setObjects(("A10-AX-NOTIFICATIONS", "axNotificationMsg"), ("A10-AX-NOTIFICATIONS", "axNotificationSLBServer"))
if mibBuilder.loadTexts: axServerDown.setStatus('current')
if mibBuilder.loadTexts: axServerDown.setDescription('A SLB server is down.')
axServerUp = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 2, 7)).setObjects(("A10-AX-NOTIFICATIONS", "axNotificationMsg"), ("A10-AX-NOTIFICATIONS", "axNotificationSLBServer"))
if mibBuilder.loadTexts: axServerUp.setStatus('current')
if mibBuilder.loadTexts: axServerUp.setDescription('A SLB server is up.')
axServerConnLimit = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 2, 8)).setObjects(("A10-AX-NOTIFICATIONS", "axNotificationMsg"), ("A10-AX-NOTIFICATIONS", "axNotificationSLBServer"), ("A10-AX-NOTIFICATIONS", "axNotificationSLBCurConns"))
if mibBuilder.loadTexts: axServerConnLimit.setStatus('current')
if mibBuilder.loadTexts: axServerConnLimit.setDescription('A SLB server has reached the configured connection limits.')
axServerConnResume = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 2, 9)).setObjects(("A10-AX-NOTIFICATIONS", "axNotificationMsg"), ("A10-AX-NOTIFICATIONS", "axNotificationSLBServer"), ("A10-AX-NOTIFICATIONS", "axNotificationSLBCurConns"))
if mibBuilder.loadTexts: axServerConnResume.setStatus('current')
if mibBuilder.loadTexts: axServerConnResume.setDescription('A SLB server has reached the configured connection-resume value.')
axServiceConnLimit = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 2, 10)).setObjects(("A10-AX-NOTIFICATIONS", "axNotificationMsg"), ("A10-AX-NOTIFICATIONS", "axNotificationSLBServer"), ("A10-AX-NOTIFICATIONS", "axNotificationSLBPort"), ("A10-AX-NOTIFICATIONS", "axNotificationSLBCurConns"))
if mibBuilder.loadTexts: axServiceConnLimit.setStatus('current')
if mibBuilder.loadTexts: axServiceConnLimit.setDescription('A SLB service has reached the configured connection limits.')
axServiceConnResume = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 2, 11)).setObjects(("A10-AX-NOTIFICATIONS", "axNotificationMsg"), ("A10-AX-NOTIFICATIONS", "axNotificationSLBServer"), ("A10-AX-NOTIFICATIONS", "axNotificationSLBPort"), ("A10-AX-NOTIFICATIONS", "axNotificationSLBCurConns"))
if mibBuilder.loadTexts: axServiceConnResume.setStatus('current')
if mibBuilder.loadTexts: axServiceConnResume.setDescription('A SLB service has reached the configured connection-resume value.')
axVirtualServerPortDown = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 2, 12)).setObjects(("A10-AX-NOTIFICATIONS", "axNotificationMsg"), ("A10-AX-NOTIFICATIONS", "axNotificationVirtualServer"), ("A10-AX-NOTIFICATIONS", "axNotificationVirtualServerPort"), ("A10-AX-NOTIFICATIONS", "axNotificationVirtualServerPortType"))
if mibBuilder.loadTexts: axVirtualServerPortDown.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerPortDown.setDescription('A SLB virtual server port is down.')
axVirtualServerPortUp = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 2, 13)).setObjects(("A10-AX-NOTIFICATIONS", "axNotificationMsg"), ("A10-AX-NOTIFICATIONS", "axNotificationVirtualServer"), ("A10-AX-NOTIFICATIONS", "axNotificationVirtualServerPort"), ("A10-AX-NOTIFICATIONS", "axNotificationVirtualServerPortType"))
if mibBuilder.loadTexts: axVirtualServerPortUp.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerPortUp.setDescription('A SLB virtual server port is up.')
axApplicationBufferReachLimit = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 2, 14)).setObjects(("A10-AX-NOTIFICATIONS", "axNotificationConfiguredThreshold"), ("A10-AX-NOTIFICATIONS", "axNotificationCurrentUsage"))
if mibBuilder.loadTexts: axApplicationBufferReachLimit.setStatus('current')
if mibBuilder.loadTexts: axApplicationBufferReachLimit.setDescription('The AX SLB application buffer usage execeeded the configured threshold.')
axVirtualServerPortReachConnLimit = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 2, 15)).setObjects(("A10-AX-NOTIFICATIONS", "axNotificationMsg"), ("A10-AX-NOTIFICATIONS", "axNotificationSLBServer"), ("A10-AX-NOTIFICATIONS", "axNotificationSLBPort"), ("A10-AX-NOTIFICATIONS", "axNotificationConnLimit"))
if mibBuilder.loadTexts: axVirtualServerPortReachConnLimit.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerPortReachConnLimit.setDescription('A virtual service port has reached the configured connection limits.')
axVirtualServerPortReachConnRateLimit = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 2, 16)).setObjects(("A10-AX-NOTIFICATIONS", "axNotificationMsg"), ("A10-AX-NOTIFICATIONS", "axNotificationSLBServer"), ("A10-AX-NOTIFICATIONS", "axNotificationSLBPort"), ("A10-AX-NOTIFICATIONS", "axNotificationConnLimit"))
if mibBuilder.loadTexts: axVirtualServerPortReachConnRateLimit.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerPortReachConnRateLimit.setDescription('A virtual service port has reached the configured connection rate-limits.')
axVirtualServerReachConnLimit = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 2, 17)).setObjects(("A10-AX-NOTIFICATIONS", "axNotificationMsg"), ("A10-AX-NOTIFICATIONS", "axNotificationSLBServer"), ("A10-AX-NOTIFICATIONS", "axNotificationConnLimit"))
if mibBuilder.loadTexts: axVirtualServerReachConnLimit.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerReachConnLimit.setDescription('A virtual server has reached the configured connection limits.')
axVirtualServerReachConnRateLimit = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 2, 18)).setObjects(("A10-AX-NOTIFICATIONS", "axNotificationMsg"), ("A10-AX-NOTIFICATIONS", "axNotificationSLBServer"), ("A10-AX-NOTIFICATIONS", "axNotificationConnLimit"))
if mibBuilder.loadTexts: axVirtualServerReachConnRateLimit.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerReachConnRateLimit.setDescription('A virtual server has reached the configured connection rate-limits.')
axServerConnRateLimit = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 2, 19)).setObjects(("A10-AX-NOTIFICATIONS", "axNotificationMsg"), ("A10-AX-NOTIFICATIONS", "axNotificationSLBServer"), ("A10-AX-NOTIFICATIONS", "axNotificationSLBCurConns"))
if mibBuilder.loadTexts: axServerConnRateLimit.setStatus('current')
if mibBuilder.loadTexts: axServerConnRateLimit.setDescription('A SLB server has reached the configured conn-rate-limits.')
axServiceConnRateLimit = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 2, 20)).setObjects(("A10-AX-NOTIFICATIONS", "axNotificationMsg"), ("A10-AX-NOTIFICATIONS", "axNotificationSLBServer"), ("A10-AX-NOTIFICATIONS", "axNotificationSLBPort"), ("A10-AX-NOTIFICATIONS", "axNotificationSLBCurConns"))
if mibBuilder.loadTexts: axServiceConnRateLimit.setStatus('current')
if mibBuilder.loadTexts: axServiceConnRateLimit.setDescription('A SLB service group member has reached the configured conn-rate-limits.')
axServiceGroupMemberEnabledForNewConn = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 2, 21)).setObjects(("A10-AX-NOTIFICATIONS", "axNotificationMsg"), ("A10-AX-NOTIFICATIONS", "axNotificationSLBServer"), ("A10-AX-NOTIFICATIONS", "axNotificationSLBPort"), ("A10-AX-NOTIFICATIONS", "axNotificationSLBServiceGroupName"))
if mibBuilder.loadTexts: axServiceGroupMemberEnabledForNewConn.setStatus('current')
if mibBuilder.loadTexts: axServiceGroupMemberEnabledForNewConn.setDescription('A SLB service group member is enabled to accept the new connection, when the current connections of group members exceed the conn-limit.')
axServiceGroupMemberDisabledForNewConn = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 2, 22)).setObjects(("A10-AX-NOTIFICATIONS", "axNotificationMsg"), ("A10-AX-NOTIFICATIONS", "axNotificationSLBServiceGroupName"), ("A10-AX-NOTIFICATIONS", "axNotificationSLBPort"))
if mibBuilder.loadTexts: axServiceGroupMemberDisabledForNewConn.setStatus('current')
if mibBuilder.loadTexts: axServiceGroupMemberDisabledForNewConn.setDescription('A SLB service group member is disabled, when the current connections of group members are reduced to the conn-resume.')
axVrrpActive = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 2, 23)).setObjects(("A10-AX-NOTIFICATIONS", "axNotificationMsg"), ("A10-AX-NOTIFICATIONS", "axNotificationPartitionName"), ("A10-AX-NOTIFICATIONS", "axNotificationVrid"))
if mibBuilder.loadTexts: axVrrpActive.setStatus('current')
if mibBuilder.loadTexts: axVrrpActive.setDescription('The vrid, axNotificationVrid, in the specific partition becomes the Active state.')
axVrrpStandby = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 2, 24)).setObjects(("A10-AX-NOTIFICATIONS", "axNotificationMsg"), ("A10-AX-NOTIFICATIONS", "axNotificationPartitionName"), ("A10-AX-NOTIFICATIONS", "axNotificationVrid"))
if mibBuilder.loadTexts: axVrrpStandby.setStatus('current')
if mibBuilder.loadTexts: axVrrpStandby.setDescription('The vrid, axNotificationVrid, in the specific partition becomes the Standby state.')
axSslServerCertificateErr = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 2, 25)).setObjects(("A10-AX-NOTIFICATIONS", "axNotificationMsg"), ("A10-AX-NOTIFICATIONS", "axNotificationSLBServer"), ("A10-AX-NOTIFICATIONS", "axNotificationSslServerCertificateErrCounter"))
if mibBuilder.loadTexts: axSslServerCertificateErr.setStatus('current')
if mibBuilder.loadTexts: axSslServerCertificateErr.setDescription('The SSL server certificate error is detected.')
axServerSelectionFailure = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 2, 26)).setObjects(("A10-AX-NOTIFICATIONS", "axNotificationMsg"), ("A10-AX-NOTIFICATIONS", "axNotificationSLBServer"), ("A10-AX-NOTIFICATIONS", "axNotificationSLBPort"), ("A10-AX-NOTIFICATIONS", "axNotificationServerSelectionFailureReason"))
if mibBuilder.loadTexts: axServerSelectionFailure.setStatus('current')
if mibBuilder.loadTexts: axServerSelectionFailure.setDescription('A SLB server has got a server selection failure.')
axVirtualServerUp = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 2, 27)).setObjects(("A10-AX-NOTIFICATIONS", "axNotificationMsg"), ("A10-AX-NOTIFICATIONS", "axNotificationVirtualServer"), ("A10-AX-NOTIFICATIONS", "axNotificationPartitionName"))
if mibBuilder.loadTexts: axVirtualServerUp.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerUp.setDescription('Slb virtual server is up.')
axVirtualServerDown = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 2, 28)).setObjects(("A10-AX-NOTIFICATIONS", "axNotificationMsg"), ("A10-AX-NOTIFICATIONS", "axNotificationVirtualServer"), ("A10-AX-NOTIFICATIONS", "axNotificationPartitionName"))
if mibBuilder.loadTexts: axVirtualServerDown.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerDown.setDescription('Slb virtual server is down.')
axServerDisabled = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 2, 29)).setObjects(("A10-AX-NOTIFICATIONS", "axNotificationMsg"), ("A10-AX-NOTIFICATIONS", "axNotificationSLBServer"), ("A10-AX-NOTIFICATIONS", "axNotificationTrueFalse"), ("A10-AX-NOTIFICATIONS", "axNotificationPartitionName"))
if mibBuilder.loadTexts: axServerDisabled.setStatus('current')
if mibBuilder.loadTexts: axServerDisabled.setDescription('A SLB server is disabled.')
axServiceGroupUp = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 2, 30)).setObjects(("A10-AX-NOTIFICATIONS", "axNotificationMsg"), ("A10-AX-NOTIFICATIONS", "axNotificationSLBServiceGroupName"), ("A10-AX-NOTIFICATIONS", "axNotificationSLBServerPortType"), ("A10-AX-NOTIFICATIONS", "axNotificationPartitionName"))
if mibBuilder.loadTexts: axServiceGroupUp.setStatus('current')
if mibBuilder.loadTexts: axServiceGroupUp.setDescription('A SLB service group is Up.')
axServiceGroupDown = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 2, 31)).setObjects(("A10-AX-NOTIFICATIONS", "axNotificationMsg"), ("A10-AX-NOTIFICATIONS", "axNotificationSLBServiceGroupName"), ("A10-AX-NOTIFICATIONS", "axNotificationSLBServerPortType"), ("A10-AX-NOTIFICATIONS", "axNotificationPartitionName"))
if mibBuilder.loadTexts: axServiceGroupDown.setStatus('current')
if mibBuilder.loadTexts: axServiceGroupDown.setDescription('A SLB service group is down.')
axServiceGroupMemberUp = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 2, 32)).setObjects(("A10-AX-NOTIFICATIONS", "axNotificationMsg"), ("A10-AX-NOTIFICATIONS", "axNotificationSLBServiceGroupName"), ("A10-AX-NOTIFICATIONS", "axNotificationSLBServer"), ("A10-AX-NOTIFICATIONS", "axNotificationSLBPort"), ("A10-AX-NOTIFICATIONS", "axNotificationPartitionName"))
if mibBuilder.loadTexts: axServiceGroupMemberUp.setStatus('current')
if mibBuilder.loadTexts: axServiceGroupMemberUp.setDescription('A SLB service group member is up.')
axServiceGroupMemberDown = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 2, 33)).setObjects(("A10-AX-NOTIFICATIONS", "axNotificationMsg"), ("A10-AX-NOTIFICATIONS", "axNotificationSLBServiceGroupName"), ("A10-AX-NOTIFICATIONS", "axNotificationSLBServer"), ("A10-AX-NOTIFICATIONS", "axNotificationSLBPort"), ("A10-AX-NOTIFICATIONS", "axNotificationPartitionName"))
if mibBuilder.loadTexts: axServiceGroupMemberDown.setStatus('current')
if mibBuilder.loadTexts: axServiceGroupMemberDown.setDescription('A SLB service group member is down.')
axVcsStateChange = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 2, 34)).setObjects(("A10-AX-NOTIFICATIONS", "axNotificationMsg"), ("A10-AX-NOTIFICATIONS", "axNotificationOldVcsState"), ("A10-AX-NOTIFICATIONS", "axNotificationNewVcsState"))
if mibBuilder.loadTexts: axVcsStateChange.setStatus('current')
if mibBuilder.loadTexts: axVcsStateChange.setDescription('A VCS state change notification.')
axGatewayUp = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 2, 35)).setObjects(("A10-AX-NOTIFICATIONS", "axNotificationMsg"), ("A10-AX-NOTIFICATIONS", "axNotificationSLBServer"), ("A10-AX-NOTIFICATIONS", "axNotificationPartitionName"))
if mibBuilder.loadTexts: axGatewayUp.setStatus('current')
if mibBuilder.loadTexts: axGatewayUp.setDescription('A gateway server is up.')
axGatewayDown = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 2, 36)).setObjects(("A10-AX-NOTIFICATIONS", "axNotificationMsg"), ("A10-AX-NOTIFICATIONS", "axNotificationSLBServer"), ("A10-AX-NOTIFICATIONS", "axNotificationPartitionName"))
if mibBuilder.loadTexts: axGatewayDown.setStatus('current')
if mibBuilder.loadTexts: axGatewayDown.setDescription('A gateway server is down.')
axNetworkTrunkPortsThreshold = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 3, 1)).setObjects(("A10-AX-NOTIFICATIONS", "axNotificationTrunkID"), ("A10-AX-NOTIFICATIONS", "axNotificationPortThreshold"), ("A10-AX-NOTIFICATIONS", "axNotificationCurrentUpPorts"))
if mibBuilder.loadTexts: axNetworkTrunkPortsThreshold.setStatus('current')
if mibBuilder.loadTexts: axNetworkTrunkPortsThreshold.setDescription('The trunk ports threshold trap.')
axSyslogTrapPrefix = ObjectIdentity((1, 3, 6, 1, 4, 1, 22610, 2, 4, 2, 100))
if mibBuilder.loadTexts: axSyslogTrapPrefix.setStatus('current')
if mibBuilder.loadTexts: axSyslogTrapPrefix.setDescription('prefix of A10 logging traps')
axSyslogTrap = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 2, 100, 1)).setObjects(("A10-AX-NOTIFICATIONS", "axSyslogModuleName"), ("A10-AX-NOTIFICATIONS", "axSyslogPriority"), ("A10-AX-NOTIFICATIONS", "axSyslogMsg"))
if mibBuilder.loadTexts: axSyslogTrap.setStatus('current')
if mibBuilder.loadTexts: axSyslogTrap.setDescription('the syslog messages sent through snmp trap')
axSyslogTrapObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 22610, 2, 4, 2, 101))
if mibBuilder.loadTexts: axSyslogTrapObjects.setStatus('current')
if mibBuilder.loadTexts: axSyslogTrapObjects.setDescription('Objects of AX syslog trap')
axSyslogModuleName = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 2, 101, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: axSyslogModuleName.setStatus('current')
if mibBuilder.loadTexts: axSyslogModuleName.setDescription('The module name sent the syslog message.')
axSyslogPriority = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 2, 101, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: axSyslogPriority.setStatus('current')
if mibBuilder.loadTexts: axSyslogPriority.setDescription('The syslog message priority.')
axSyslogMsg = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 2, 101, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1023))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: axSyslogMsg.setStatus('current')
if mibBuilder.loadTexts: axSyslogMsg.setDescription('The syslog message.')
axGslbSiteAdminEnabled = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 5, 1)).setObjects(("A10-AX-NOTIFICATIONS", "axNotificationMsg"), ("A10-AX-NOTIFICATIONS", "axNotificationGslbSiteName"), ("A10-AX-NOTIFICATIONS", "axNotificationPartitionName"))
if mibBuilder.loadTexts: axGslbSiteAdminEnabled.setStatus('current')
if mibBuilder.loadTexts: axGslbSiteAdminEnabled.setDescription('The GSLB site is administratively enabled.')
axGslbSiteAdminDisabled = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 5, 2)).setObjects(("A10-AX-NOTIFICATIONS", "axNotificationMsg"), ("A10-AX-NOTIFICATIONS", "axNotificationGslbSiteName"), ("A10-AX-NOTIFICATIONS", "axNotificationPartitionName"))
if mibBuilder.loadTexts: axGslbSiteAdminDisabled.setStatus('current')
if mibBuilder.loadTexts: axGslbSiteAdminDisabled.setDescription('The GSLB site is administratively disabled.')
axGslbSiteOperationalStateUp = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 5, 3)).setObjects(("A10-AX-NOTIFICATIONS", "axNotificationMsg"), ("A10-AX-NOTIFICATIONS", "axNotificationGslbSiteName"), ("A10-AX-NOTIFICATIONS", "axNotificationPartitionName"))
if mibBuilder.loadTexts: axGslbSiteOperationalStateUp.setStatus('current')
if mibBuilder.loadTexts: axGslbSiteOperationalStateUp.setDescription('The GSLB site is operational up.')
axGslbSiteOperationalStateDown = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 5, 4)).setObjects(("A10-AX-NOTIFICATIONS", "axNotificationMsg"), ("A10-AX-NOTIFICATIONS", "axNotificationGslbSiteName"), ("A10-AX-NOTIFICATIONS", "axNotificationPartitionName"))
if mibBuilder.loadTexts: axGslbSiteOperationalStateDown.setStatus('current')
if mibBuilder.loadTexts: axGslbSiteOperationalStateDown.setDescription('The GSLB site is operational down.')
axGslbSiteSlbDeviceStateUp = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 5, 5)).setObjects(("A10-AX-NOTIFICATIONS", "axNotificationMsg"), ("A10-AX-NOTIFICATIONS", "axNotificationGslbSiteName"), ("A10-AX-NOTIFICATIONS", "axNotificationGslbSiteSlbDeviceName"), ("A10-AX-NOTIFICATIONS", "axNotificationPartitionName"))
if mibBuilder.loadTexts: axGslbSiteSlbDeviceStateUp.setStatus('current')
if mibBuilder.loadTexts: axGslbSiteSlbDeviceStateUp.setDescription('The GSLB site SLB device status is changed to up.')
axGslbSiteSlbDeviceStateDown = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 5, 6)).setObjects(("A10-AX-NOTIFICATIONS", "axNotificationMsg"), ("A10-AX-NOTIFICATIONS", "axNotificationGslbSiteName"), ("A10-AX-NOTIFICATIONS", "axNotificationGslbSiteSlbDeviceName"), ("A10-AX-NOTIFICATIONS", "axNotificationPartitionName"))
if mibBuilder.loadTexts: axGslbSiteSlbDeviceStateDown.setStatus('current')
if mibBuilder.loadTexts: axGslbSiteSlbDeviceStateDown.setDescription('The GSLB site SLB device status is changed to down.')
axGslbServiceIpAdminEnabled = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 5, 9)).setObjects(("A10-AX-NOTIFICATIONS", "axNotificationMsg"), ("A10-AX-NOTIFICATIONS", "axNotificationGslbServiceIpName"), ("A10-AX-NOTIFICATIONS", "axNotificationGslbServiceIpAddr"), ("A10-AX-NOTIFICATIONS", "axNotificationPartitionName"))
if mibBuilder.loadTexts: axGslbServiceIpAdminEnabled.setStatus('current')
if mibBuilder.loadTexts: axGslbServiceIpAdminEnabled.setDescription('The GSLB service IP is administratively enabled.')
axGslbServiceIpAdminDisabled = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 5, 10)).setObjects(("A10-AX-NOTIFICATIONS", "axNotificationMsg"), ("A10-AX-NOTIFICATIONS", "axNotificationGslbServiceIpName"), ("A10-AX-NOTIFICATIONS", "axNotificationGslbServiceIpAddr"), ("A10-AX-NOTIFICATIONS", "axNotificationPartitionName"))
if mibBuilder.loadTexts: axGslbServiceIpAdminDisabled.setStatus('current')
if mibBuilder.loadTexts: axGslbServiceIpAdminDisabled.setDescription('The GSLB service IP is administratively disabled.')
axGslbServiceIpOperationalStateUp = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 5, 11)).setObjects(("A10-AX-NOTIFICATIONS", "axNotificationMsg"), ("A10-AX-NOTIFICATIONS", "axNotificationGslbServiceIpName"), ("A10-AX-NOTIFICATIONS", "axNotificationGslbServiceIpAddr"), ("A10-AX-NOTIFICATIONS", "axNotificationPartitionName"))
if mibBuilder.loadTexts: axGslbServiceIpOperationalStateUp.setStatus('current')
if mibBuilder.loadTexts: axGslbServiceIpOperationalStateUp.setDescription('The GSLB service IP is operational up.')
axGslbServiceIpOperationalStateDown = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 5, 12)).setObjects(("A10-AX-NOTIFICATIONS", "axNotificationMsg"), ("A10-AX-NOTIFICATIONS", "axNotificationGslbServiceIpName"), ("A10-AX-NOTIFICATIONS", "axNotificationGslbServiceIpAddr"), ("A10-AX-NOTIFICATIONS", "axNotificationPartitionName"))
if mibBuilder.loadTexts: axGslbServiceIpOperationalStateDown.setStatus('current')
if mibBuilder.loadTexts: axGslbServiceIpOperationalStateDown.setDescription('The GSLB service IP is operational down.')
axGslbServiceIpPortStateUp = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 5, 13)).setObjects(("A10-AX-NOTIFICATIONS", "axNotificationMsg"), ("A10-AX-NOTIFICATIONS", "axNotificationGslbServiceIpName"), ("A10-AX-NOTIFICATIONS", "axNotificationGslbServiceIpAddr"), ("A10-AX-NOTIFICATIONS", "axNotificationGslbServiceIpPortType"), ("A10-AX-NOTIFICATIONS", "axNotificationPartitionName"))
if mibBuilder.loadTexts: axGslbServiceIpPortStateUp.setStatus('current')
if mibBuilder.loadTexts: axGslbServiceIpPortStateUp.setDescription('The GSLB service IP port status is changed to up.')
axGslbServiceIpPortStateDown = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 5, 14)).setObjects(("A10-AX-NOTIFICATIONS", "axNotificationMsg"), ("A10-AX-NOTIFICATIONS", "axNotificationGslbServiceIpName"), ("A10-AX-NOTIFICATIONS", "axNotificationGslbServiceIpAddr"), ("A10-AX-NOTIFICATIONS", "axNotificationGslbServiceIpPortType"), ("A10-AX-NOTIFICATIONS", "axNotificationPartitionName"))
if mibBuilder.loadTexts: axGslbServiceIpPortStateDown.setStatus('current')
if mibBuilder.loadTexts: axGslbServiceIpPortStateDown.setDescription('The GSLB service IP port status is changed to down.')
axGslbZoneAdminEnabled = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 5, 15)).setObjects(("A10-AX-NOTIFICATIONS", "axNotificationMsg"), ("A10-AX-NOTIFICATIONS", "axNotificationGslbZoneName"), ("A10-AX-NOTIFICATIONS", "axNotificationPartitionName"))
if mibBuilder.loadTexts: axGslbZoneAdminEnabled.setStatus('current')
if mibBuilder.loadTexts: axGslbZoneAdminEnabled.setDescription('The GSLB zone status is administratively enabled.')
axGslbZoneAdminDisabled = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 5, 16)).setObjects(("A10-AX-NOTIFICATIONS", "axNotificationMsg"), ("A10-AX-NOTIFICATIONS", "axNotificationGslbZoneName"), ("A10-AX-NOTIFICATIONS", "axNotificationPartitionName"))
if mibBuilder.loadTexts: axGslbZoneAdminDisabled.setStatus('current')
if mibBuilder.loadTexts: axGslbZoneAdminDisabled.setDescription('The GSLB zone status is administratively disabled.')
axGslbZoneOperationalStateUp = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 5, 17)).setObjects(("A10-AX-NOTIFICATIONS", "axNotificationMsg"), ("A10-AX-NOTIFICATIONS", "axNotificationGslbZoneName"), ("A10-AX-NOTIFICATIONS", "axNotificationPartitionName"))
if mibBuilder.loadTexts: axGslbZoneOperationalStateUp.setStatus('current')
if mibBuilder.loadTexts: axGslbZoneOperationalStateUp.setDescription('The GSLB zone is operational up.')
axGslbZoneOperationalStateDown = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 5, 18)).setObjects(("A10-AX-NOTIFICATIONS", "axNotificationMsg"), ("A10-AX-NOTIFICATIONS", "axNotificationGslbZoneName"), ("A10-AX-NOTIFICATIONS", "axNotificationPartitionName"))
if mibBuilder.loadTexts: axGslbZoneOperationalStateDown.setStatus('current')
if mibBuilder.loadTexts: axGslbZoneOperationalStateDown.setDescription('The GSLB zone is operational down.')
axGslbZoneServiceAdminEnabled = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 5, 19)).setObjects(("A10-AX-NOTIFICATIONS", "axNotificationMsg"), ("A10-AX-NOTIFICATIONS", "axNotificationGslbZoneName"), ("A10-AX-NOTIFICATIONS", "axNotificationGslbZoneServiceProto"), ("A10-AX-NOTIFICATIONS", "axNotificationGslbZoneServiceName"), ("A10-AX-NOTIFICATIONS", "axNotificationPartitionName"))
if mibBuilder.loadTexts: axGslbZoneServiceAdminEnabled.setStatus('current')
if mibBuilder.loadTexts: axGslbZoneServiceAdminEnabled.setDescription('The GSLB zone service is administratively enabled.')
axGslbZoneServiceAdminDisabled = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 5, 20)).setObjects(("A10-AX-NOTIFICATIONS", "axNotificationMsg"), ("A10-AX-NOTIFICATIONS", "axNotificationGslbZoneName"), ("A10-AX-NOTIFICATIONS", "axNotificationGslbZoneServiceProto"), ("A10-AX-NOTIFICATIONS", "axNotificationGslbZoneServiceName"), ("A10-AX-NOTIFICATIONS", "axNotificationPartitionName"))
if mibBuilder.loadTexts: axGslbZoneServiceAdminDisabled.setStatus('current')
if mibBuilder.loadTexts: axGslbZoneServiceAdminDisabled.setDescription('The GSLB zone service is administratively disabled.')
axGslbZoneServiceOperationalStateUp = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 5, 21)).setObjects(("A10-AX-NOTIFICATIONS", "axNotificationMsg"), ("A10-AX-NOTIFICATIONS", "axNotificationGslbZoneName"), ("A10-AX-NOTIFICATIONS", "axNotificationGslbZoneServiceProto"), ("A10-AX-NOTIFICATIONS", "axNotificationGslbZoneServiceName"), ("A10-AX-NOTIFICATIONS", "axNotificationPartitionName"))
if mibBuilder.loadTexts: axGslbZoneServiceOperationalStateUp.setStatus('current')
if mibBuilder.loadTexts: axGslbZoneServiceOperationalStateUp.setDescription('The GSLB zone service is operational up.')
axGslbZoneServiceOperationalStateDown = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 5, 22)).setObjects(("A10-AX-NOTIFICATIONS", "axNotificationMsg"), ("A10-AX-NOTIFICATIONS", "axNotificationGslbZoneName"), ("A10-AX-NOTIFICATIONS", "axNotificationGslbZoneServiceProto"), ("A10-AX-NOTIFICATIONS", "axNotificationGslbZoneServiceName"), ("A10-AX-NOTIFICATIONS", "axNotificationPartitionName"))
if mibBuilder.loadTexts: axGslbZoneServiceOperationalStateDown.setStatus('current')
if mibBuilder.loadTexts: axGslbZoneServiceOperationalStateDown.setDescription('The GSLB zone service is operational down.')
axGslbGroupBecomeMaster = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 5, 23)).setObjects(("A10-AX-NOTIFICATIONS", "axNotificationMsg"), ("A10-AX-NOTIFICATIONS", "axNotificationGslbGroupName"), ("A10-AX-NOTIFICATIONS", "axNotificationGslbGroupEntity"))
if mibBuilder.loadTexts: axGslbGroupBecomeMaster.setStatus('current')
if mibBuilder.loadTexts: axGslbGroupBecomeMaster.setDescription('The GSLB group becomes the Master.')
axGslbGroupRemovedMaster = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 5, 24)).setObjects(("A10-AX-NOTIFICATIONS", "axNotificationMsg"), ("A10-AX-NOTIFICATIONS", "axNotificationGslbGroupName"), ("A10-AX-NOTIFICATIONS", "axNotificationGslbGroupEntity"))
if mibBuilder.loadTexts: axGslbGroupRemovedMaster.setStatus('current')
if mibBuilder.loadTexts: axGslbGroupRemovedMaster.setDescription('The GSLB group is removed from the Master.')
axGslbGroupMemberJoinGroup = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 5, 25)).setObjects(("A10-AX-NOTIFICATIONS", "axNotificationMsg"), ("A10-AX-NOTIFICATIONS", "axNotificationGslbGroupName"), ("A10-AX-NOTIFICATIONS", "axNotificationGslbGroupEntity"))
if mibBuilder.loadTexts: axGslbGroupMemberJoinGroup.setStatus('current')
if mibBuilder.loadTexts: axGslbGroupMemberJoinGroup.setDescription('The GSLB group member is joining a group.')
axGslbGroupMemberLeaveGroup = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 5, 26)).setObjects(("A10-AX-NOTIFICATIONS", "axNotificationMsg"), ("A10-AX-NOTIFICATIONS", "axNotificationGslbGroupName"), ("A10-AX-NOTIFICATIONS", "axNotificationGslbGroupEntity"))
if mibBuilder.loadTexts: axGslbGroupMemberLeaveGroup.setStatus('current')
if mibBuilder.loadTexts: axGslbGroupMemberLeaveGroup.setDescription('The GSLB group member is leaving a group.')
axVirtualServerCreateDelete = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 6, 1)).setObjects(("A10-AX-NOTIFICATIONS", "axNotificationMsg"), ("A10-AX-NOTIFICATIONS", "axNotificationVirtualServer"), ("A10-AX-NOTIFICATIONS", "axNotificationPartitionName"), ("A10-AX-NOTIFICATIONS", "axNotificationSlbObjectChange"))
if mibBuilder.loadTexts: axVirtualServerCreateDelete.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerCreateDelete.setDescription('Slb virtual server is added or deleted.')
axVirtualServerPortCreateDelete = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 6, 2)).setObjects(("A10-AX-NOTIFICATIONS", "axNotificationMsg"), ("A10-AX-NOTIFICATIONS", "axNotificationVirtualServer"), ("A10-AX-NOTIFICATIONS", "axNotificationVirtualServerPort"), ("A10-AX-NOTIFICATIONS", "axNotificationVirtualServerPortType"), ("A10-AX-NOTIFICATIONS", "axNotificationPartitionName"), ("A10-AX-NOTIFICATIONS", "axNotificationSlbObjectChange"))
if mibBuilder.loadTexts: axVirtualServerPortCreateDelete.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerPortCreateDelete.setDescription('Slb virtual server port is addeded or deleted.')
axServerCreateDelete = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 6, 3)).setObjects(("A10-AX-NOTIFICATIONS", "axNotificationMsg"), ("A10-AX-NOTIFICATIONS", "axNotificationSLBServer"), ("A10-AX-NOTIFICATIONS", "axNotificationPartitionName"), ("A10-AX-NOTIFICATIONS", "axNotificationSlbObjectChange"))
if mibBuilder.loadTexts: axServerCreateDelete.setStatus('current')
if mibBuilder.loadTexts: axServerCreateDelete.setDescription('Slb server is added or deleted.')
axServerPortCreateDelete = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 6, 4)).setObjects(("A10-AX-NOTIFICATIONS", "axNotificationMsg"), ("A10-AX-NOTIFICATIONS", "axNotificationSLBServer"), ("A10-AX-NOTIFICATIONS", "axNotificationSLBPort"), ("A10-AX-NOTIFICATIONS", "axNotificationSLBServerPortType"), ("A10-AX-NOTIFICATIONS", "axNotificationPartitionName"), ("A10-AX-NOTIFICATIONS", "axNotificationSlbObjectChange"))
if mibBuilder.loadTexts: axServerPortCreateDelete.setStatus('current')
if mibBuilder.loadTexts: axServerPortCreateDelete.setDescription('Slb server port is added or delete.')
axSslCertificateCreateDelete = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 6, 5)).setObjects(("A10-AX-NOTIFICATIONS", "axNotificationMsg"), ("A10-AX-NOTIFICATIONS", "axNotificationCertificateName"), ("A10-AX-NOTIFICATIONS", "axNotificationPartitionName"), ("A10-AX-NOTIFICATIONS", "axNotificationSlbObjectChange"))
if mibBuilder.loadTexts: axSslCertificateCreateDelete.setStatus('current')
if mibBuilder.loadTexts: axSslCertificateCreateDelete.setDescription('Ssl certification is create or delete.')
axSslCertificateExpiring = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 6, 6)).setObjects(("A10-AX-NOTIFICATIONS", "axNotificationMsg"), ("A10-AX-NOTIFICATIONS", "axNotificationCertificateName"), ("A10-AX-NOTIFICATIONS", "axNotificationPartitionName"), ("A10-AX-NOTIFICATIONS", "axNotificationDateTime"))
if mibBuilder.loadTexts: axSslCertificateExpiring.setStatus('current')
if mibBuilder.loadTexts: axSslCertificateExpiring.setDescription('The certification is going to be expired.')
axPartitionResourceUsageWarning = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 6, 7)).setObjects(("A10-AX-NOTIFICATIONS", "axNotificationMsg"), ("A10-AX-NOTIFICATIONS", "axNotificationPartitionResourceName"), ("A10-AX-NOTIFICATIONS", "axNotificationPartitionResourceUsageLevel"), ("A10-AX-NOTIFICATIONS", "axNotificationPartitionName"))
if mibBuilder.loadTexts: axPartitionResourceUsageWarning.setStatus('current')
if mibBuilder.loadTexts: axPartitionResourceUsageWarning.setDescription('The partition resource usage becomes above/below the configured limitation.')
mibBuilder.exportSymbols("A10-AX-NOTIFICATIONS", axGslbZoneOperationalStateDown=axGslbZoneOperationalStateDown, axServerDisabled=axServerDisabled, axSystemConnectionResourceHigh=axSystemConnectionResourceHigh, axServiceGroupMemberDown=axServiceGroupMemberDown, axServerConnRateLimit=axServerConnRateLimit, axNotificationGslbSiteName=axNotificationGslbSiteName, axNotificationHAGroup=axNotificationHAGroup, axAppNotifications=axAppNotifications, axSystemControlCpuHigh=axSystemControlCpuHigh, axNotificationGslbGroupName=axNotificationGslbGroupName, axSystemPowerSupplyFailure=axSystemPowerSupplyFailure, axGslbServiceIpPortStateUp=axGslbServiceIpPortStateUp, axSslCertificateCreateDelete=axSslCertificateCreateDelete, axSecondaryHardDiskFailure=axSecondaryHardDiskFailure, axNotificationFanName=axNotificationFanName, axServiceGroupMemberUp=axServiceGroupMemberUp, axSyslogTrapObjects=axSyslogTrapObjects, axSystemLicenseRequired=axSystemLicenseRequired, axNotificationPortThreshold=axNotificationPortThreshold, axGslbGroupRemovedMaster=axGslbGroupRemovedMaster, axSystemTempHigh=axSystemTempHigh, axGslbZoneServiceAdminDisabled=axGslbZoneServiceAdminDisabled, axGslbZoneAdminDisabled=axGslbZoneAdminDisabled, axNotificationLsnFixedNatPortMappingFileChangeType=axNotificationLsnFixedNatPortMappingFileChangeType, axGslbZoneServiceAdminEnabled=axGslbZoneServiceAdminEnabled, axSystemConnectionResourceBecomeNormal=axSystemConnectionResourceBecomeNormal, axNotificationLsnIpAddress=axNotificationLsnIpAddress, axNotificationLsnCurrentUsage=axNotificationLsnCurrentUsage, axSystemSmpResourceHigh=axSystemSmpResourceHigh, axNotificationLsnProtoType=axNotificationLsnProtoType, axNotificationSLBServerPortType=axNotificationSLBServerPortType, axVcsStateChange=axVcsStateChange, axNotificationConnLimit=axNotificationConnLimit, axGslbZoneOperationalStateUp=axGslbZoneOperationalStateUp, axNotificationOldVcsState=axNotificationOldVcsState, axHAActiveActive=axHAActiveActive, axServiceGroupUp=axServiceGroupUp, axGatewayDown=axGatewayDown, axGslbSiteAdminEnabled=axGslbSiteAdminEnabled, axGslbZoneServiceOperationalStateDown=axGslbZoneServiceOperationalStateDown, axNotificationLsnFixedNatPortMappingFileName=axNotificationLsnFixedNatPortMappingFileName, axNotificationGslbServiceIpAddr=axNotificationGslbServiceIpAddr, axServiceGroupMemberEnabledForNewConn=axServiceGroupMemberEnabledForNewConn, axSyslogTrap=axSyslogTrap, axSystemPowerSupplyRecover=axSystemPowerSupplyRecover, axGslbServiceIpOperationalStateDown=axGslbServiceIpOperationalStateDown, axNotificationDateTime=axNotificationDateTime, axServiceGroupDown=axServiceGroupDown, axServiceGroupMemberDisabledForNewConn=axServiceGroupMemberDisabledForNewConn, axNotificationVrid=axNotificationVrid, axNotificationVirtualServerPortType=axNotificationVirtualServerPortType, axTacacsMonitorServerUpDown=axTacacsMonitorServerUpDown, axServiceConnRateLimit=axServiceConnRateLimit, axNotificationServerSelectionFailureReason=axNotificationServerSelectionFailureReason, axSystemDropPacketEvent=axSystemDropPacketEvent, axServerUp=axServerUp, axGslbServiceIpAdminEnabled=axGslbServiceIpAdminEnabled, axVirtualServerCreateDelete=axVirtualServerCreateDelete, axNotificationTrueFalse=axNotificationTrueFalse, axNotificationCurrentUpPorts=axNotificationCurrentUpPorts, axHardDiskUsageHigh=axHardDiskUsageHigh, axFan2Failure=axFan2Failure, axNotificationPartitionName=axNotificationPartitionName, axNotificationGslbSiteSlbDeviceName=axNotificationGslbSiteSlbDeviceName, axLowerPowerSupplyFailure=axLowerPowerSupplyFailure, axSslCertificateExpiring=axSslCertificateExpiring, axNotificationSLBServiceGroupName=axNotificationSLBServiceGroupName, axGslbNotifications=axGslbNotifications, axNotificationTrunkID=axNotificationTrunkID, axFileSystemBecomeReadOnly=axFileSystemBecomeReadOnly, axNotificationPartitionResourceUsageLevel=axNotificationPartitionResourceUsageLevel, axVrrpActive=axVrrpActive, axSystemShutdownForReason=axSystemShutdownForReason, axGslbServiceIpAdminDisabled=axGslbServiceIpAdminDisabled, axGslbZoneAdminEnabled=axGslbZoneAdminEnabled, axSystemLicenseLoadSuccessful=axSystemLicenseLoadSuccessful, axNetworkTrunkPortsThreshold=axNetworkTrunkPortsThreshold, axNotificationPowerSupplyName=axNotificationPowerSupplyName, axNotificationVirtualServerPort=axNotificationVirtualServerPort, axNotificationTacasServerHost=axNotificationTacasServerHost, axNotificationGslbServiceIpPortType=axNotificationGslbServiceIpPortType, axSyslogModuleName=axSyslogModuleName, axVrrpStandby=axVrrpStandby, axGslbGroupMemberJoinGroup=axGslbGroupMemberJoinGroup, axNotificationLicensedModuleName=axNotificationLicensedModuleName, axSystemShutdown=axSystemShutdown, axSystemRestart=axSystemRestart, axVirtualServerPortReachConnLimit=axVirtualServerPortReachConnLimit, axVirtualServerPortReachConnRateLimit=axVirtualServerPortReachConnRateLimit, axServiceDown=axServiceDown, axServerConnLimit=axServerConnLimit, axHAActive=axHAActive, axSyslogPriority=axSyslogPriority, axPartitionResourceUsageWarning=axPartitionResourceUsageWarning, axGslbSiteAdminDisabled=axGslbSiteAdminDisabled, axFan1Failure=axFan1Failure, axSystemSmpResourceBecomeNormal=axSystemSmpResourceBecomeNormal, axMemoryUsageBecomeNormal=axMemoryUsageBecomeNormal, axGslbSiteOperationalStateUp=axGslbSiteOperationalStateUp, axVirtualServerPortCreateDelete=axVirtualServerPortCreateDelete, axPrimaryHardDiskFailure=axPrimaryHardDiskFailure, axSystemFanRecover=axSystemFanRecover, axNotificationUpDown=axNotificationUpDown, axNotificationDroppedPackets=axNotificationDroppedPackets, axSystemTempBecomeNormal=axSystemTempBecomeNormal, axMemoryUsageHigh=axMemoryUsageHigh, axNotifications=axNotifications, axGatewayUp=axGatewayUp, axApplicationBufferReachLimit=axApplicationBufferReachLimit, axSystemControlCpuBecomeNormal=axSystemControlCpuBecomeNormal, axNotificationSLBPort=axNotificationSLBPort, axServiceUp=axServiceUp, axSlbNotifications=axSlbNotifications, axGslbZoneServiceOperationalStateUp=axGslbZoneServiceOperationalStateUp, axSystemLicenseExpired=axSystemLicenseExpired, axSystemRelieveDropPacketEvent=axSystemRelieveDropPacketEvent, axNotificationGslbZoneName=axNotificationGslbZoneName, axGslbSiteSlbDeviceStateUp=axGslbSiteSlbDeviceStateUp, axNotificationPartitionResourceName=axNotificationPartitionResourceName, axSystemDataCpuBecomeNormal=axSystemDataCpuBecomeNormal, axSystemFanFailure=axSystemFanFailure, axNotificationGslbServiceIpName=axNotificationGslbServiceIpName, axServiceConnLimit=axServiceConnLimit, axGslbSiteOperationalStateDown=axGslbSiteOperationalStateDown, axVirtualServerDown=axVirtualServerDown, axNotificationShutdownReason=axNotificationShutdownReason, axSyslogTrapPrefix=axSyslogTrapPrefix, axGslbGroupMemberLeaveGroup=axGslbGroupMemberLeaveGroup, axServerPortCreateDelete=axServerPortCreateDelete, axNotificationNewVcsState=axNotificationNewVcsState, axNotificationConnectionTypeName=axNotificationConnectionTypeName, axSslServerCertificateErr=axSslServerCertificateErr, axServerDown=axServerDown, axSystemDataCpuHigh=axSystemDataCpuHigh, axGslbGroupBecomeMaster=axGslbGroupBecomeMaster, axNotificationLsnExceededTimes=axNotificationLsnExceededTimes, axGslbServiceIpPortStateDown=axGslbServiceIpPortStateDown, axSystemNotifications=axSystemNotifications, axGslbServiceIpOperationalStateUp=axGslbServiceIpOperationalStateUp, axNotificationObjects=axNotificationObjects, axNotificationLsnPoolName=axNotificationLsnPoolName, axVirtualServerPortDown=axVirtualServerPortDown, axSystemStart=axSystemStart, axHighPrioritySyslog=axHighPrioritySyslog, axNotificationCertificateName=axNotificationCertificateName, axNetworkNotifications=axNetworkNotifications, axNotificationCurrentUsage=axNotificationCurrentUsage, axNotificationVirtualServer=axNotificationVirtualServer, axFan3Failure=axFan3Failure, axNotificationGslbZoneServiceProto=axNotificationGslbZoneServiceProto, axNotificationGslbGroupEntity=axNotificationGslbGroupEntity, axVirtualServerPortUp=axVirtualServerPortUp, axVirtualServerReachConnRateLimit=axVirtualServerReachConnRateLimit, axVirtualServerUp=axVirtualServerUp, axGslbSiteSlbDeviceStateDown=axGslbSiteSlbDeviceStateDown, axSyslogMsg=axSyslogMsg, axNotificationConfiguredThreshold=axNotificationConfiguredThreshold, axNotificationGslbSiteIpServerAddr=axNotificationGslbSiteIpServerAddr, axNotificationSlbObjectChange=axNotificationSlbObjectChange, axUpperPowerSupplyFailure=axUpperPowerSupplyFailure, axNotificationLicenseDisableDuration=axNotificationLicenseDisableDuration, axSystemLicensedModuleDisabledForDuration=axSystemLicensedModuleDisabledForDuration, axServerSelectionFailure=axServerSelectionFailure, axServiceConnResume=axServiceConnResume, axNotificationGslbZoneServiceName=axNotificationGslbZoneServiceName, axNotificationPartitionId=axNotificationPartitionId, axHardDiskUsageBecomeNormal=axHardDiskUsageBecomeNormal, axNotificationMsg=axNotificationMsg, axHAStandby=axHAStandby, axNotificationSslServerCertificateErrCounter=axNotificationSslServerCertificateErrCounter, axVirtualServerReachConnLimit=axVirtualServerReachConnLimit, axNotificationIpAddressType=axNotificationIpAddressType, axNotificationSLBServer=axNotificationSLBServer, axServerConnResume=axServerConnResume, axServerCreateDelete=axServerCreateDelete, axNotificationSLBCurConns=axNotificationSLBCurConns)
