#
# PySNMP MIB module LLDP-V2-TC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/standard/iee/LLDP-V2-TC-MIB
# Produced by pysmi-1.1.12 at Fri Jul 19 13:01:06 2024
# On host fv-az1532-428 platform Linux version 6.5.0-1023-azure by user runner
# Using Python version 3.10.14 (main, Jun 20 2024, 15:20:03) [GCC 11.4.0]
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, MibIdentifier, Gauge32, Integer32, Counter64, NotificationType, IpAddress, Unsigned32, Counter32, org, iso, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "MibIdentifier", "Gauge32", "Integer32", "Counter64", "NotificationType", "IpAddress", "Unsigned32", "Counter32", "org", "iso", "TimeTicks")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
lldpV2TcMIB = ModuleIdentity((1, 3, 111, 2, 802, 1, 1, 12))
lldpV2TcMIB.setRevisions(('2009-06-08 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: lldpV2TcMIB.setRevisionsDescriptions(('Published as part of IEEE Std 802.1AB-2009 revision.',))
if mibBuilder.loadTexts: lldpV2TcMIB.setLastUpdated('200906080000Z')
if mibBuilder.loadTexts: lldpV2TcMIB.setOrganization('IEEE 802.1 Working Group')
if mibBuilder.loadTexts: lldpV2TcMIB.setContactInfo('WG-URL: http://grouper.ieee.org/groups/802/1/index.html\n             WG-EMail: STDS-802-1-L@LISTSERV.IEEE.ORG\n\n             Contact: Tony Jeffree\n             Postal:  11a Poplar Grove\n                      Sale \n                      Cheshire M33 3AX\n                      UK\n             Tel:     +44-161-973-4278\n             E-mail:  tony@jeffree.co.uk')
if mibBuilder.loadTexts: lldpV2TcMIB.setDescription('Textual conventions used throughout the IEEE Std 802.1AB\n            version 2 and later MIB modules.\n\n            Unless otherwise indicated, the references in this\n            MIB module are to IEEE 802.1AB-2009.\n\n            The TCs in this MIB are taken from the original LLDP-MIB,\n            LLDP-EXT-DOT1-MIB, and LLDP-EXT-DOT3-MIB published in\n            IEEE Std 802-1D-2005, with the addition of TCs to support\n            the management address table. They have been made available\n            as a separate TC MIB module to facilitate referencing from\n            other MIB modules.\n\n            Copyright (C) IEEE (2009). This version of this MIB module\n            is published as subclause 11.5.1 of IEEE Std 802.1AB-2009;\n            see the standard itself for full legal notices.')
ieee802dot1mibs = MibIdentifier((1, 3, 111, 2, 802, 1, 1))
class LldpV2ChassisIdSubtype(TextualConvention, Integer32):
    description = "This TC describes the source of a chassis identifier.\n\n            The enumeration 'chassisComponent(1)' represents a chassis\n            identifier based on the value of entPhysicalAlias object\n            (defined in IETF RFC 4133) for a chassis component (i.e.,\n            an entPhysicalClass value of 'chassis(3)').\n\n            The enumeration 'interfaceAlias(2)' represents a chassis\n            identifier based on the value of ifAlias object (defined in\n            IETF RFC 2863) for an interface on the containing chassis.\n\n            The enumeration 'portComponent(3)' represents a chassis\n            identifier based on the value of entPhysicalAlias object\n            (defined in IETF RFC 4133) for a port or backplane\n            component (i.e., entPhysicalClass value of 'port(10)' or\n            'backplane(4)'), within the containing chassis.\n\n            The enumeration 'macAddress(4)' represents a chassis\n            identifier based on the value of a unicast source address\n            (encoded in network byte order and IEEE 802.3 canonical bit\n            order), of a port on the containing chassis as defined in\n            IEEE Std 802.\n\n            The enumeration 'networkAddress(5)' represents a chassis\n            identifier based on a network address, associated with\n            a particular chassis. The encoded address is actually\n            composed of two fields. The first field is a single octet,\n            representing the IANA AddressFamilyNumbers value for the\n            specific address type, and the second field is the network\n            address value.\n\n            The enumeration 'interfaceName(6)' represents a chassis\n            identifier based on the value of ifName object (defined in\n            IETF RFC 2863) for an interface on the containing chassis.\n\n            The enumeration 'local(7)' represents a chassis identifier\n            based on a locally defined value."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("chassisComponent", 1), ("interfaceAlias", 2), ("portComponent", 3), ("macAddress", 4), ("networkAddress", 5), ("interfaceName", 6), ("local", 7))

class LldpV2ChassisId(TextualConvention, OctetString):
    description = "This TC describes the format of a chassis identifier string.\n            Objects of this type are always used with an associated\n            LldpChassisIdSubtype object, which identifies the format of\n            the particular LldpChassisId object instance.\n\n            If the associated LldpChassisIdSubtype object has a value of\n            'chassisComponent(1)', then the octet string identifies\n            a particular instance of the entPhysicalAlias object\n            (defined in IETF RFC 4133) for a chassis component (i.e.,\n            an entPhysicalClass value of 'chassis(3)').\n\n            If the associated LldpChassisIdSubtype object has a value\n            of 'interfaceAlias(2)', then the octet string identifies\n            a particular instance of the ifAlias object (defined in\n            IETF RFC 2863) for an interface on the containing chassis.\n            If the particular ifAlias object does not contain any values,\n            another chassis identifier type should be used.\n\n            If the associated LldpChassisIdSubtype object has a value\n            of 'portComponent(3)', then the octet string identifies a\n            particular instance of the entPhysicalAlias object (defined\n            in IETF RFC 4133) for a port or backplane component within\n            the containing chassis.\n\n            If the associated LldpChassisIdSubtype object has a value of\n            'macAddress(4)', then this string identifies a particular\n            unicast source address (encoded in network byte order and\n            IEEE 802.3 canonical bit order), of a port on the containing\n            chassis as defined in IEEE Std 802.\n\n            If the associated LldpChassisIdSubtype object has a value of\n            'networkAddress(5)', then this string identifies a particular\n            network address, encoded in network byte order, associated\n            with one or more ports on the containing chassis. The first\n            octet contains the IANA Address Family Numbers enumeration\n            value for the specific address type, and octets 2 through\n            N contain the network address value in network byte order.\n\n            If the associated LldpChassisIdSubtype object has a value\n            of 'interfaceName(6)', then the octet string identifies\n            a particular instance of the ifName object (defined in\n            IETF RFC 2863) for an interface on the containing chassis.\n            If the particular ifName object does not contain any values,\n            another chassis identifier type should be used.\n\n            If the associated LldpChassisIdSubtype object has a value of\n            'local(7)', then this string identifies a locally assigned\n            Chassis ID."
    status = 'current'
    displayHint = '1x:'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 255)

class LldpV2PortIdSubtype(TextualConvention, Integer32):
    description = "This TC describes the source of a particular type of port\n            identifier used in the LLDP MIB.\n\n            The enumeration 'interfaceAlias(1)' represents a port\n            identifier based on the ifAlias MIB object, defined in IETF\n            RFC 2863.\n\n            The enumeration 'portComponent(2)' represents a port\n            identifier based on the value of entPhysicalAlias (defined in\n            IETF RFC 4133) for a port component (i.e., entPhysicalClass\n            value of 'port(10)'), within the containing chassis.\n\n            The enumeration 'macAddress(3)' represents a port identifier\n            based on a unicast source address (encoded in network\n            byte order and IEEE 802.3 canonical bit order), which has\n            been detected by the agent and associated with a particular\n            port (IEEE Std 802).\n\n            The enumeration 'networkAddress(4)' represents a port\n            identifier based on a network address, detected by the agent\n            and associated with a particular port.\n\n            The enumeration 'interfaceName(5)' represents a port\n            identifier based on the ifName MIB object, defined in IETF\n            RFC 2863.\n\n            The enumeration 'agentCircuitId(6)' represents a port\n            identifier based on the agent-local identifier of the circuit\n            (defined in RFC 3046), detected by the agent and associated\n            with a particular port.\n\n            The enumeration 'local(7)' represents a port identifier\n            based on a value locally assigned."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("interfaceAlias", 1), ("portComponent", 2), ("macAddress", 3), ("networkAddress", 4), ("interfaceName", 5), ("agentCircuitId", 6), ("local", 7))

class LldpV2PortId(TextualConvention, OctetString):
    description = "This TC describes the format of a port identifier string.\n            Objects of this type are always used with an associated\n            LldpPortIdSubtype object, which identifies the format of the\n            particular LldpPortId object instance.\n\n            If the associated LldpPortIdSubtype object has a value of\n            'interfaceAlias(1)', then the octet string identifies a\n            particular instance of the ifAlias object (defined in IETF\n            RFC 2863). If the particular ifAlias object does not contain\n            any values, another port identifier type should be used.\n\n            If the associated LldpPortIdSubtype object has a value of\n            'portComponent(2)', then the octet string identifies a\n            particular instance of the entPhysicalAlias object (defined\n            in IETF RFC 4133) for a port or backplane component.\n\n            If the associated LldpPortIdSubtype object has a value of\n            'macAddress(3)', then this string identifies a particular\n            unicast source address (encoded in network byte order\n            and IEEE 802.3 canonical bit order) associated with the port\n            (IEEE Std 802).\n\n            If the associated LldpPortIdSubtype object has a value of\n            'networkAddress(4)', then this string identifies a network\n            address associated with the port. The first octet contains\n            the IANA AddressFamilyNumbers enumeration value for the\n            specific address type, and octets 2 through N contain the\n            networkAddress address value in network byte order.\n\n            If the associated LldpPortIdSubtype object has a value of\n            'interfaceName(5)', then the octet string identifies a\n            particular instance of the ifName object (defined in IETF\n            RFC 2863). If the particular ifName object does not contain\n            any values, another port identifier type should be used.\n\n            If the associated LldpPortIdSubtype object has a value of\n            'agentCircuitId(6)', then this string identifies a agent-local\n            identifier of the circuit (defined in RFC 3046).\n\n            If the associated LldpPortIdSubtype object has a value of\n            'local(7)', then this string identifies a locally\n            assigned port ID."
    status = 'current'
    displayHint = '1x:'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 255)

class LldpV2ManAddrIfSubtype(TextualConvention, Integer32):
    reference = '8.5.9.5'
    description = "This TC defines an enumeration value that identifies\n            the interface numbering method used for defining the\n            interface number associated with a management address.\n            An object with this syntax defines the format of an\n            interface number object.\n\n            The enumeration 'unknown(1)' represents the case where the\n            interface is not known. In this case, the corresponding \n            interface number is of zero length.\n\n            The enumeration 'ifIndex(2)' represents interface identifier\n            based on the ifIndex MIB object.\n\n            The enumeration 'systemPortNumber(3)' represents interface\n            identifier based on the system port numbering convention."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("unknown", 1), ("ifIndex", 2), ("systemPortNumber", 3))

class LldpV2ManAddress(TextualConvention, OctetString):
    description = 'The value of a management address associated with the LLDP\n            agent that may be used to reach higher layer entities to\n            assist discovery by network management.\n\n            It should be noted that appropriate security credentials,\n            such as SNMP engineId, may be required to access the LLDP\n            agent using a management address. These necessary credentials\n            should be known by the network management and the objects\n            associated with the credentials are not included in the\n            LLDP agent.'
    status = 'current'
    displayHint = '1x:'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 31)

class LldpV2SystemCapabilitiesMap(TextualConvention, Bits):
    description = "This TC describes the system capabilities.\n\n            The bit 'other(0)' indicates that the system has capabilities\n            other than those listed below.\n\n            The bit 'repeater(1)' indicates that the system has repeater\n            capability.\n\n            The bit 'bridge(2)' indicates that the system has bridge\n            capability.\n\n            The bit 'wlanAccessPoint(3)' indicates that the system has \n            WLAN access point capability.\n\n            The bit 'router(4)' indicates that the system has router\n            capability.\n\n            The bit 'telephone(5)' indicates that the system has telephone\n            capability.\n\n            The bit 'docsisCableDevice(6)' indicates that the system has\n            DOCSIS Cable Device capability (IETF RFC 4639 & 2670).\n\n            The bit 'stationOnly(7)' indicates that the system has only\n            station capability and nothing else.\n\n            The bit 'cVLANComponent(8)' indicates that the system has\n            C-VLAN component functionality.\n\n            The bit 'sVLANComponent(8)' indicates that the system  has\n            S-VLAN component functionality.\n\n            The bit 'twoPortMACRelay(10)' indicates that the system has\n            Two-port MAC Relay (TPMR) functionality."
    status = 'current'
    namedValues = NamedValues(("other", 0), ("repeater", 1), ("bridge", 2), ("wlanAccessPoint", 3), ("router", 4), ("telephone", 5), ("docsisCableDevice", 6), ("stationOnly", 7), ("cVLANComponent", 8), ("sVLANComponent", 9), ("twoPortMACRelay", 10))

class LldpV2DestAddressTableIndex(TextualConvention, Unsigned32):
    description = 'An index value, used as the index to the table of destination\n            MAC addresses used both as the destination addresses on\n            transmitted LLDPDUs and on received LLDPDUs. This index value\n            is also used as a secondary index value in tables indexed\n            by fields of type  ifIndex, in order to associate \n            a destination address with each row of the table.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 4096)

class LldpV2LinkAggStatusMap(TextualConvention, Bits):
    description = "This TC describes the link aggregation status.\n\n            The bit 'aggCapable(0)' indicates the link is capable of being\n            aggregated. \n\n            The bit 'aggEnabled(1)' indicates the link is currently in\n            aggregation."
    status = 'current'
    namedValues = NamedValues(("aggCapable", 0), ("aggEnabled", 1))

class LldpV2PowerPortClass(TextualConvention, Integer32):
    description = 'This TC describes the Power over Ethernet (PoE) port class.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("pClassPSE", 1), ("pClassPD", 2))

mibBuilder.exportSymbols("LLDP-V2-TC-MIB", PYSNMP_MODULE_ID=lldpV2TcMIB, lldpV2TcMIB=lldpV2TcMIB, LldpV2PortIdSubtype=LldpV2PortIdSubtype, LldpV2ManAddress=LldpV2ManAddress, LldpV2ChassisIdSubtype=LldpV2ChassisIdSubtype, LldpV2SystemCapabilitiesMap=LldpV2SystemCapabilitiesMap, LldpV2LinkAggStatusMap=LldpV2LinkAggStatusMap, ieee802dot1mibs=ieee802dot1mibs, LldpV2PortId=LldpV2PortId, LldpV2ManAddrIfSubtype=LldpV2ManAddrIfSubtype, LldpV2DestAddressTableIndex=LldpV2DestAddressTableIndex, LldpV2PowerPortClass=LldpV2PowerPortClass, LldpV2ChassisId=LldpV2ChassisId)
