#
# PySNMP MIB module ATS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/ats/ATS-MIB
# Produced by pysmi-1.1.12 at Tue Sep 17 12:54:21 2024
# On host fv-az1215-438 platform Linux version 6.5.0-1025-azure by user runner
# Using Python version 3.10.14 (main, Jul 16 2024, 19:03:10) [GCC 11.4.0]
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
TimeTicks, enterprises, ModuleIdentity, Counter64, Gauge32, IpAddress, NotificationType, ObjectIdentity, iso, MibIdentifier, Unsigned32, NotificationType, Counter32, Bits, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "enterprises", "ModuleIdentity", "Counter64", "Gauge32", "IpAddress", "NotificationType", "ObjectIdentity", "iso", "MibIdentifier", "Unsigned32", "NotificationType", "Counter32", "Bits", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
NonNegativeInteger, PositiveInteger = mibBuilder.importSymbols("UPS-MIB", "NonNegativeInteger", "PositiveInteger")
ats = MibIdentifier((1, 3, 6, 1, 4, 1, 37662))
product = MibIdentifier((1, 3, 6, 1, 4, 1, 37662, 1))
webAppliance = MibIdentifier((1, 3, 6, 1, 4, 1, 37662, 1, 2))
atsAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2))
single = MibIdentifier((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1))
atsObjectGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1))
atsTrapGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 2))
atsIdentGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 1))
atsInputGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 2))
atsOutputGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 3))
atsHmiSwitchGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 4))
atsMiscellaneousGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 5))
atsControlGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 6))
agentConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 7))
emdStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 8))
emdConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 9))
atsIdentGroupModel = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsIdentGroupModel.setStatus('mandatory')
if mibBuilder.loadTexts: atsIdentGroupModel.setDescription('The device model name.')
atsIdentGroupSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsIdentGroupSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: atsIdentGroupSerialNumber.setDescription('The device serial number.')
atsIdentGroupManufacturer = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsIdentGroupManufacturer.setStatus('mandatory')
if mibBuilder.loadTexts: atsIdentGroupManufacturer.setDescription('The device manufacturer name.')
atsIdentGroupFirmwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsIdentGroupFirmwareRevision.setStatus('mandatory')
if mibBuilder.loadTexts: atsIdentGroupFirmwareRevision.setDescription('The device firmware revision.')
atsIdentGroupAgentFirmwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsIdentGroupAgentFirmwareRevision.setStatus('mandatory')
if mibBuilder.loadTexts: atsIdentGroupAgentFirmwareRevision.setDescription('The agent firmware revision.')
atsInputGroupPreference = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 2, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsInputGroupPreference.setStatus('mandatory')
if mibBuilder.loadTexts: atsInputGroupPreference.setDescription('This shows the Output Source Priority by Source A or Source B.')
atsInputGroupSourceAstatus = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fail", 1), ("ok", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsInputGroupSourceAstatus.setStatus('mandatory')
if mibBuilder.loadTexts: atsInputGroupSourceAstatus.setDescription("This field shows the status of the source A. Status included? 'OK','Fail'. 'OK' mean frequency and voltage of Source A are normal.")
atsInputGroupSourceAinputVoltage = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsInputGroupSourceAinputVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: atsInputGroupSourceAinputVoltage.setDescription('The source A input voltage  of the ATS input in volts.')
atsInputGroupSourceAinputFrequency = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsInputGroupSourceAinputFrequency.setStatus('mandatory')
if mibBuilder.loadTexts: atsInputGroupSourceAinputFrequency.setDescription('The source A input frequency of the ATS input in 0.1 Hz.')
atsInputGroupSourceBstatus = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fail", 1), ("ok", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsInputGroupSourceBstatus.setStatus('mandatory')
if mibBuilder.loadTexts: atsInputGroupSourceBstatus.setDescription("This field shows the status of the source B. Status included? 'OK','Fail'. 'OK' mean frequency and voltage of Source B are normal.")
atsInputGroupSourceBinputVoltage = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsInputGroupSourceBinputVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: atsInputGroupSourceBinputVoltage.setDescription('The source B input voltage  of the ATS input in volts.')
atsInputGroupSourceBinputFrequency = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsInputGroupSourceBinputFrequency.setStatus('mandatory')
if mibBuilder.loadTexts: atsInputGroupSourceBinputFrequency.setDescription('The source B input frequency of the ATS input in 0.1 Hz.')
atsInputGroupSourceAvoltageUpperLimit = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsInputGroupSourceAvoltageUpperLimit.setStatus('mandatory')
if mibBuilder.loadTexts: atsInputGroupSourceAvoltageUpperLimit.setDescription('The source A voltage upper limit  of the ATS input in volts.')
atsInputGroupSourceAvoltageLowerLimit = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 2, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsInputGroupSourceAvoltageLowerLimit.setStatus('mandatory')
if mibBuilder.loadTexts: atsInputGroupSourceAvoltageLowerLimit.setDescription('The source A voltage lower limit of the ATS input in volts.')
atsInputGroupSourceAfrequencyUpperLimit = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 2, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsInputGroupSourceAfrequencyUpperLimit.setStatus('mandatory')
if mibBuilder.loadTexts: atsInputGroupSourceAfrequencyUpperLimit.setDescription('The source A frequency upper limit of the ATS input in 0.1 Hz.')
atsInputGroupSourceAfrequencyLowerLimit = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 2, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsInputGroupSourceAfrequencyLowerLimit.setStatus('mandatory')
if mibBuilder.loadTexts: atsInputGroupSourceAfrequencyLowerLimit.setDescription('The source A frequency lower limit of the ATS input in 0.1 Hz.')
atsInputGroupSourceBvoltageUpperLimit = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 2, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsInputGroupSourceBvoltageUpperLimit.setStatus('mandatory')
if mibBuilder.loadTexts: atsInputGroupSourceBvoltageUpperLimit.setDescription('The source B voltage upper limit  of the ATS input in volts.')
atsInputGroupSourceBvoltageLowerLimit = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 2, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsInputGroupSourceBvoltageLowerLimit.setStatus('mandatory')
if mibBuilder.loadTexts: atsInputGroupSourceBvoltageLowerLimit.setDescription('The source B voltage lower limit of the ATS input in volts.')
atsInputGroupSourceBfrequencyUpperLimit = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 2, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsInputGroupSourceBfrequencyUpperLimit.setStatus('mandatory')
if mibBuilder.loadTexts: atsInputGroupSourceBfrequencyUpperLimit.setDescription('The source B frequency upper limit of the ATS input in 0.1 Hz.')
atsInputGroupSourceBfrequencyLowerLimit = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 2, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsInputGroupSourceBfrequencyLowerLimit.setStatus('mandatory')
if mibBuilder.loadTexts: atsInputGroupSourceBfrequencyLowerLimit.setDescription('The source B frequency lower limit of the ATS input in 0.1 Hz.')
atsOutputGroupOutputSource = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 3, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsOutputGroupOutputSource.setStatus('mandatory')
if mibBuilder.loadTexts: atsOutputGroupOutputSource.setDescription("Output source is supply by Source A or Source B. Status included? 'Source A','Source B'.")
atsOutputGroupOutputVoltage = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 3, 2), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsOutputGroupOutputVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: atsOutputGroupOutputVoltage.setDescription('The Output Voltage in volts.')
atsOutputGroupOutputFequency = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 3, 3), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsOutputGroupOutputFequency.setStatus('mandatory')
if mibBuilder.loadTexts: atsOutputGroupOutputFequency.setDescription('The output fequency in 0.1 Hz.')
atsOutputGroupOutputCurrent = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 3, 4), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsOutputGroupOutputCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: atsOutputGroupOutputCurrent.setDescription('The output current  in 0.1 A.')
atsOutputGroupLoad = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 3, 5), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsOutputGroupLoad.setStatus('mandatory')
if mibBuilder.loadTexts: atsOutputGroupLoad.setDescription('The load in %.')
atsHmiSwitchGroupBuzzer = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("buzzerDisabled", 1), ("buzzerEnabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsHmiSwitchGroupBuzzer.setStatus('mandatory')
if mibBuilder.loadTexts: atsHmiSwitchGroupBuzzer.setDescription("This field shows the status of the buzzer. Status included? 'Enable','Disable'. ")
atsHmiSwitchGroupAtsAlarm = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nothing", 1), ("atsOccurAlarm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsHmiSwitchGroupAtsAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: atsHmiSwitchGroupAtsAlarm.setDescription('This shows the alarm occured.')
atsHmiSwitchGroupAutoReturn = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsHmiSwitchGroupAutoReturn.setStatus('mandatory')
if mibBuilder.loadTexts: atsHmiSwitchGroupAutoReturn.setDescription('Auto recover to that setting value when two input source normal.')
atsHmiSwitchGroupSourceTransferByLoad = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsHmiSwitchGroupSourceTransferByLoad.setStatus('mandatory')
if mibBuilder.loadTexts: atsHmiSwitchGroupSourceTransferByLoad.setDescription('On: If overload timeout occurred , ATS will tranfer to another source automaticlly. Off:If overload timeout occurred , ATS will turn off the output source.')
atsHmiSwitchGroupSourceTransferByPhase = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsHmiSwitchGroupSourceTransferByPhase.setStatus('mandatory')
if mibBuilder.loadTexts: atsHmiSwitchGroupSourceTransferByPhase.setDescription('On: when the transfer of output source occur, the transfer can active if differernce of phase less than setting value Off: Switch transfer immed... whatever difference of phase.')
atsMiscellaneousGroupAtsSystemTemperture = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsMiscellaneousGroupAtsSystemTemperture.setStatus('mandatory')
if mibBuilder.loadTexts: atsMiscellaneousGroupAtsSystemTemperture.setDescription('The ATS system temperture in degree C.')
atsMiscellaneousGroupSystemMaxCurrent = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsMiscellaneousGroupSystemMaxCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: atsMiscellaneousGroupSystemMaxCurrent.setDescription('The system max current int 0.1 Amp.')
atsControlGroupBuzzerAlarmControl = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("buzzerOff", 1), ("buzzerOn", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atsControlGroupBuzzerAlarmControl.setStatus('mandatory')
if mibBuilder.loadTexts: atsControlGroupBuzzerAlarmControl.setDescription('The buzzer alarm control.')
atsControlGroupManualTransfer = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 6, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atsControlGroupManualTransfer.setStatus('mandatory')
if mibBuilder.loadTexts: atsControlGroupManualTransfer.setDescription('User can click this bottom to decide output source supply is Source A or Source B.')
agentConfigIpaddress = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 7, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentConfigIpaddress.setStatus('mandatory')
if mibBuilder.loadTexts: agentConfigIpaddress.setDescription(' The ip address that NMS can identify the managed\n                device')
agentConfigGateway = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 7, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentConfigGateway.setStatus('mandatory')
if mibBuilder.loadTexts: agentConfigGateway.setDescription(' The default gateway that allow device managed\n                through routers ')
agentConfigSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 7, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentConfigSubnetMask.setStatus('mandatory')
if mibBuilder.loadTexts: agentConfigSubnetMask.setDescription(' Internet address subnet mask')
agentConfigDate = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 7, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(10, 10)).setFixedLength(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentConfigDate.setStatus('mandatory')
if mibBuilder.loadTexts: agentConfigDate.setDescription('The date in agent, format is (dd/mm/yyyy)')
agentConfigTime = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 7, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentConfigTime.setStatus('mandatory')
if mibBuilder.loadTexts: agentConfigTime.setDescription('The time in agent, format is (hh:mm:ss)')
agentConfigHistoryLogFrequency = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 7, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 28800))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentConfigHistoryLogFrequency.setStatus('mandatory')
if mibBuilder.loadTexts: agentConfigHistoryLogFrequency.setDescription('The frequency of the updation of the history log. The value\n                 is in seconds')
agentConfigExtHistoryLogFrequency = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 7, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10080))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentConfigExtHistoryLogFrequency.setStatus('mandatory')
if mibBuilder.loadTexts: agentConfigExtHistoryLogFrequency.setDescription('The ups parameters are sampled at the rate governed by the\n                  mconfigHistroyLogFrequency. These sampled values are further\n                  conslidated over period of time which is determined by this\n                  object.')
agentConfigPollRate = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 7, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentConfigPollRate.setStatus('mandatory')
if mibBuilder.loadTexts: agentConfigPollRate.setDescription(' The frequency that proxy agent polls the connected\n                UPS in JBUS protocol. (unit : second)')
agentConfigBaudRate = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 7, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentConfigBaudRate.setStatus('mandatory')
if mibBuilder.loadTexts: agentConfigBaudRate.setDescription('The serial port communication speed. only 9600 allowed')
agentConfigDhcpStatue = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 7, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentConfigDhcpStatue.setStatus('mandatory')
if mibBuilder.loadTexts: agentConfigDhcpStatue.setDescription('Enable or disable DHCP/BootP capability')
agentConfigTelnetStatue = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 7, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentConfigTelnetStatue.setStatus('mandatory')
if mibBuilder.loadTexts: agentConfigTelnetStatue.setDescription('Enable or disable telnet access')
agentConfigTftpStatue = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 7, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentConfigTftpStatue.setStatus('mandatory')
if mibBuilder.loadTexts: agentConfigTftpStatue.setDescription('Enable or disable network upgrade capability')
agentConfigResetToDefault = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 7, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("nothing", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentConfigResetToDefault.setStatus('mandatory')
if mibBuilder.loadTexts: agentConfigResetToDefault.setDescription('Reset all parameters of ATS to default value')
agentConfigRestart = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 7, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("restart", 1), ("nothing", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentConfigRestart.setStatus('mandatory')
if mibBuilder.loadTexts: agentConfigRestart.setDescription('Restart ATS')
agentConfigClearAgentLog = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 7, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clear", 1), ("nothing", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentConfigClearAgentLog.setStatus('mandatory')
if mibBuilder.loadTexts: agentConfigClearAgentLog.setDescription('Clear agent log data')
agentConfigClearEventLog = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 7, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clear", 1), ("nothing", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentConfigClearEventLog.setStatus('mandatory')
if mibBuilder.loadTexts: agentConfigClearEventLog.setDescription('Clear event log data')
agentConfigClearExtHistoryLog = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 7, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clear", 1), ("nothing", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentConfigClearExtHistoryLog.setStatus('mandatory')
if mibBuilder.loadTexts: agentConfigClearExtHistoryLog.setDescription('Clear extented history log data')
agentConfigClearHistoryLog = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 7, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clear", 1), ("nothing", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentConfigClearHistoryLog.setStatus('mandatory')
if mibBuilder.loadTexts: agentConfigClearHistoryLog.setDescription('Clear history log data')
agentConfigTrapRetryCount = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 7, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentConfigTrapRetryCount.setStatus('mandatory')
if mibBuilder.loadTexts: agentConfigTrapRetryCount.setDescription('The count of repeat traps to send to NMS before trap\n                 acknowledge received.')
agentConfigTrapRetryTime = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 7, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentConfigTrapRetryTime.setStatus('mandatory')
if mibBuilder.loadTexts: agentConfigTrapRetryTime.setDescription('The time between retry traps sned to NMS.')
agentConfigTrapAckSignature = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 7, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentConfigTrapAckSignature.setStatus('mandatory')
if mibBuilder.loadTexts: agentConfigTrapAckSignature.setDescription('The signature of trap acknowledge.')
agentConfigMibVersion = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 7, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentConfigMibVersion.setStatus('mandatory')
if mibBuilder.loadTexts: agentConfigMibVersion.setDescription('The version of MIB spec.')
agentConfigTrapsReceiversTable = MibTable((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 7, 23), )
if mibBuilder.loadTexts: agentConfigTrapsReceiversTable.setStatus('mandatory')
if mibBuilder.loadTexts: agentConfigTrapsReceiversTable.setDescription('A list of managers to send traps to.  The number of\n                 entries is given by the value of agentConfigNumTrapReceivers')
agentConfigTrapsReceiversEntry = MibTableRow((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 7, 23, 1), ).setIndexNames((0, "ATS-MIB", "trapsIndex"))
if mibBuilder.loadTexts: agentConfigTrapsReceiversEntry.setStatus('mandatory')
if mibBuilder.loadTexts: agentConfigTrapsReceiversEntry.setDescription('The managers to send traps to.')
trapsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 7, 23, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapsIndex.setStatus('mandatory')
if mibBuilder.loadTexts: trapsIndex.setDescription('The index to a trap receiver entry.')
trapsReceiverAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 7, 23, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapsReceiverAddr.setStatus('mandatory')
if mibBuilder.loadTexts: trapsReceiverAddr.setDescription('The IP address of the manager to send a trap to.')
receiverCommunityString = MibTableColumn((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 7, 23, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 19))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: receiverCommunityString.setStatus('mandatory')
if mibBuilder.loadTexts: receiverCommunityString.setDescription('The community name to use in the trap when\n                 sent to the manager.')
receiverNmsType = MibTableColumn((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 7, 23, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("ats-trap", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: receiverNmsType.setStatus('mandatory')
if mibBuilder.loadTexts: receiverNmsType.setDescription('The trap group that NMS desired.')
receiverSeverityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 7, 23, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("informational", 1), ("warning", 2), ("severe", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: receiverSeverityLevel.setStatus('mandatory')
if mibBuilder.loadTexts: receiverSeverityLevel.setDescription('The severity level of traps to be received by this manager.')
receiverDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 7, 23, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: receiverDescription.setStatus('mandatory')
if mibBuilder.loadTexts: receiverDescription.setDescription('Description of trap receivers')
agentConfigAccessControlTable = MibTable((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 7, 24), )
if mibBuilder.loadTexts: agentConfigAccessControlTable.setStatus('mandatory')
if mibBuilder.loadTexts: agentConfigAccessControlTable.setDescription('A list of managers which can access ATS with private\n                community string.')
agentConfigAccessControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 7, 24, 1), ).setIndexNames((0, "ATS-MIB", "trapsIndex"))
if mibBuilder.loadTexts: agentConfigAccessControlEntry.setStatus('mandatory')
if mibBuilder.loadTexts: agentConfigAccessControlEntry.setDescription('The managers.')
accessIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 7, 24, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accessIndex.setStatus('mandatory')
if mibBuilder.loadTexts: accessIndex.setDescription('The index to a access control entry.')
accessControlAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 7, 24, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessControlAddr.setStatus('mandatory')
if mibBuilder.loadTexts: accessControlAddr.setDescription('The IP address of the manager to access ATS')
accessCommunityString = MibTableColumn((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 7, 24, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 19))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessCommunityString.setStatus('mandatory')
if mibBuilder.loadTexts: accessCommunityString.setDescription('The community name to use in the manager when\n                 access ATS')
accessControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 7, 24, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("readOnly", 1), ("readWrite", 2), ("notAccess", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessControlMode.setStatus('mandatory')
if mibBuilder.loadTexts: accessControlMode.setDescription('Access type, only read/Write access type can change parameter\n                 of ATS')
agentConfigDefaultLanguage = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 7, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("auto", 1), ("english", 2), ("traditionalChinese", 3), ("simplifiedChinese", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentConfigDefaultLanguage.setStatus('mandatory')
if mibBuilder.loadTexts: agentConfigDefaultLanguage.setDescription('The default languauge for browser, when set to auto(1)\n                         ATS will send page in the language depends on the\n                         request language of browser.')
agentConfigIPv6AddrStatus = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 7, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2), ("manualConfiguration", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentConfigIPv6AddrStatus.setStatus('mandatory')
if mibBuilder.loadTexts: agentConfigIPv6AddrStatus.setDescription('The status of IPv6 global address. When the auto-configuration\n                         of IPv6 address is disabled, it shows manual configuration(3).\n                         Otherwise, it shows valid(2) for auto-configured successfully,\n                         or shows invalid(1) for the failure in auto-configured.')
agentConfigIPv6AddrAutoConfig = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 7, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentConfigIPv6AddrAutoConfig.setStatus('mandatory')
if mibBuilder.loadTexts: agentConfigIPv6AddrAutoConfig.setDescription('The state of IPv6 address auto-configuration. If set to enable(1),\n                         ATS will try to get a valid global/site-local address from IPv6\n                         router or DHCPv6 server on the same link.')
agentConfigIPv6LinkLocalAddr = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 7, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentConfigIPv6LinkLocalAddr.setStatus('mandatory')
if mibBuilder.loadTexts: agentConfigIPv6LinkLocalAddr.setDescription('The IPv6 link-local address of ATS. It is auto-configured based on\n                         MAC address of ATS.')
agentConfigIPv6GlobalAddr = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 7, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentConfigIPv6GlobalAddr.setStatus('mandatory')
if mibBuilder.loadTexts: agentConfigIPv6GlobalAddr.setDescription('The IPv6 global/site-local address of ATS. If change it manually,\n                         the agentConfigIPv6AddrStatus and agentConfigIPv6AddrAutoConfig will\n                         be changed to manual configuration and disabled respectively.')
agentConfigIPv6PrefixlLength = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 7, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentConfigIPv6PrefixlLength.setStatus('mandatory')
if mibBuilder.loadTexts: agentConfigIPv6PrefixlLength.setDescription('The prefix length of IPv6 global/site-local address.If change it manually,\n                         the agentConfigIPv6AddrStatus and agentConfigIPv6AddrAutoConfig will\n                         be changed to manual configuration and disabled respectively.')
agentConfigIPv6DefaultRouter = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 7, 31), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentConfigIPv6DefaultRouter.setStatus('mandatory')
if mibBuilder.loadTexts: agentConfigIPv6DefaultRouter.setDescription('The address of IPv6 default router. If change it manually,\n                         the agentConfigIPv6AddrStatus and agentConfigIPv6AddrAutoConfig will\n                         be changed to manual configuration and disabled respectively.')
emdSatatusEmdType = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("disabled", 2), ("emdHT", 3), ("emdT", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: emdSatatusEmdType.setStatus('mandatory')
if mibBuilder.loadTexts: emdSatatusEmdType.setDescription('The type of EMD plugged into the port.')
emdSatatusTemperature = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 8, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emdSatatusTemperature.setStatus('mandatory')
if mibBuilder.loadTexts: emdSatatusTemperature.setDescription('The measurement of EMD temperature, in 0.1 degree')
emdSatatusHumidity = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 8, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emdSatatusHumidity.setStatus('mandatory')
if mibBuilder.loadTexts: emdSatatusHumidity.setDescription('The measurement of EMD humidity, in 0.1 degree')
emdSatatusAlarm1 = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 8, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknow", 1), ("disabled", 2), ("active", 3), ("inactive", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: emdSatatusAlarm1.setStatus('mandatory')
if mibBuilder.loadTexts: emdSatatusAlarm1.setDescription('The EMD alarm-1 status')
emdSatatusAlarm2 = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 8, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknow", 1), ("disabled", 2), ("active", 3), ("inactive", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: emdSatatusAlarm2.setStatus('mandatory')
if mibBuilder.loadTexts: emdSatatusAlarm2.setDescription('The EMD alarm-2 status')
usahEmdConfigEmdConfig = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("auto", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usahEmdConfigEmdConfig.setStatus('mandatory')
if mibBuilder.loadTexts: usahEmdConfigEmdConfig.setDescription('Enable or disable to detect presence of EMD')
emdConfigEmdName = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 9, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emdConfigEmdName.setStatus('mandatory')
if mibBuilder.loadTexts: emdConfigEmdName.setDescription('Description of EMD')
emdConfigTemperature = MibIdentifier((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 9, 3))
emdConfigTempName = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 9, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emdConfigTempName.setStatus('mandatory')
if mibBuilder.loadTexts: emdConfigTempName.setDescription('Description of EMD temperature sensor')
emdConfigTempHighSetPoint = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 9, 3, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emdConfigTempHighSetPoint.setStatus('mandatory')
if mibBuilder.loadTexts: emdConfigTempHighSetPoint.setDescription('The set point for high temperature warning, in degrees')
emdConfigTempHighStatus = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 9, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emdConfigTempHighStatus.setStatus('mandatory')
if mibBuilder.loadTexts: emdConfigTempHighStatus.setDescription('To enable/disable high set point check with emd temperature.')
emdConfigTempLowSetPoint = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 9, 3, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emdConfigTempLowSetPoint.setStatus('mandatory')
if mibBuilder.loadTexts: emdConfigTempLowSetPoint.setDescription('The set point for low temperature warning, in degrees')
emdConfigTempLowStatus = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 9, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emdConfigTempLowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: emdConfigTempLowStatus.setDescription('To enable/disable low set point check with emd temperature.')
emdConfigTempOffset = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 9, 3, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emdConfigTempOffset.setStatus('mandatory')
if mibBuilder.loadTexts: emdConfigTempOffset.setDescription('The offset to calibrate temperature of EMD, in degrees')
emdConfigHumidity = MibIdentifier((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 9, 4))
emdConfigHumidityName = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 9, 4, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emdConfigHumidityName.setStatus('mandatory')
if mibBuilder.loadTexts: emdConfigHumidityName.setDescription('Description of EMD humidity sensor')
emdConfigHumidityHighSetPoint = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 9, 4, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emdConfigHumidityHighSetPoint.setStatus('mandatory')
if mibBuilder.loadTexts: emdConfigHumidityHighSetPoint.setDescription('The set point for high humidity warning, in %')
emdConfigHumidityHighStatus = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 9, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emdConfigHumidityHighStatus.setStatus('mandatory')
if mibBuilder.loadTexts: emdConfigHumidityHighStatus.setDescription('To enable/disable high set point check with emd humidity.')
emdConfigHumidityLowSetPoint = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 9, 4, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emdConfigHumidityLowSetPoint.setStatus('mandatory')
if mibBuilder.loadTexts: emdConfigHumidityLowSetPoint.setDescription('The set point for low humidity warning, in %')
emdConfigHumidityLowStatus = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 9, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emdConfigHumidityLowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: emdConfigHumidityLowStatus.setDescription('To enable/disable low set point check with emd humidity.')
emdConfigHumidityOffset = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 9, 4, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emdConfigHumidityOffset.setStatus('mandatory')
if mibBuilder.loadTexts: emdConfigHumidityOffset.setDescription('The offset to calibrate humidity of EMD, in %')
emdConfigAlarm1 = MibIdentifier((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 9, 5))
emdConfigAlarm1Name = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 9, 5, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emdConfigAlarm1Name.setStatus('mandatory')
if mibBuilder.loadTexts: emdConfigAlarm1Name.setDescription('Description of EMD alarm-1')
emdConfigAlarm1Type = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 9, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("nomralOpen", 2), ("normalClose", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emdConfigAlarm1Type.setStatus('mandatory')
if mibBuilder.loadTexts: emdConfigAlarm1Type.setDescription('The alarm-1 operation type')
emdConfigAlarm2 = MibIdentifier((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 9, 6))
emdConfigAlarm2Name = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 9, 6, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emdConfigAlarm2Name.setStatus('mandatory')
if mibBuilder.loadTexts: emdConfigAlarm2Name.setDescription('Description of EMD alarm-2')
emdConfigAlarm2Type = MibScalar((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 1, 9, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("nomralOpen", 2), ("normalClose", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emdConfigAlarm2Type.setStatus('mandatory')
if mibBuilder.loadTexts: emdConfigAlarm2Type.setDescription('The alarm-1 operation type')
atsAtsAlarm = NotificationType((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 2) + (0,1))
if mibBuilder.loadTexts: atsAtsAlarm.setDescription('WARNING: ATS Alarm.')
atsSourceAvoltageAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 2) + (0,2))
if mibBuilder.loadTexts: atsSourceAvoltageAbnormal.setDescription('WARNING: Source A voltage abnormal.')
atsSourceBvoltageAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 2) + (0,3))
if mibBuilder.loadTexts: atsSourceBvoltageAbnormal.setDescription('WARNING: Source B voltage abnormal.')
atsSourceAfrequencyAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 2) + (0,4))
if mibBuilder.loadTexts: atsSourceAfrequencyAbnormal.setDescription('WARNING: Source A frequency abnormal.')
atsSourceBfrequencyAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 2) + (0,5))
if mibBuilder.loadTexts: atsSourceBfrequencyAbnormal.setDescription('WARNING: Source B frequency abnormal.')
atsOutputOverLoad = NotificationType((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 2) + (0,6))
if mibBuilder.loadTexts: atsOutputOverLoad.setDescription('SEVERE: Output over load.')
atsWorkPowerAabnormal = NotificationType((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 2) + (0,7))
if mibBuilder.loadTexts: atsWorkPowerAabnormal.setDescription('SEVERE: Unit fault (Working power A abnormal).')
atsWorkPowerBabnormal = NotificationType((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 2) + (0,8))
if mibBuilder.loadTexts: atsWorkPowerBabnormal.setDescription('SEVERE: Unit fault (Working power B abnormal).')
atsOverTemperature = NotificationType((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 2) + (0,9))
if mibBuilder.loadTexts: atsOverTemperature.setDescription('WARNING: Cabinet over temperature.')
atsDcOffsetAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 2) + (0,10))
if mibBuilder.loadTexts: atsDcOffsetAbnormal.setDescription('SEVERE: Unit fault (Sensor circuit abnormal).')
atsEepromAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 2) + (0,11))
if mibBuilder.loadTexts: atsEepromAbnormal.setDescription('SEVERE: Unit fault (EEPROM data abnormal)')
atsLcdNotConnect = NotificationType((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 2) + (0,12))
if mibBuilder.loadTexts: atsLcdNotConnect.setDescription('SEVERE: LCD panel connection abnormal.')
atsOutputExceedsOverloadTime = NotificationType((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 2) + (0,13))
if mibBuilder.loadTexts: atsOutputExceedsOverloadTime.setDescription('SEVERE: Overload time out, Output off, Reset needed.')
atsInputPhaseDifference = NotificationType((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 2) + (0,14))
if mibBuilder.loadTexts: atsInputPhaseDifference.setDescription('SEVERE: Phase difference between resources exceed user defined value, Output off, Reset needed.')
atsUserSetOverLoad = NotificationType((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 2) + (0,15))
if mibBuilder.loadTexts: atsUserSetOverLoad.setDescription('WARNING: User defined load pre-alarm.')
atsAtsAlarmToNormal = NotificationType((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 2) + (0,16))
if mibBuilder.loadTexts: atsAtsAlarmToNormal.setDescription('INFORMATION: ATS Alarm Normal.')
atsSourceAvoltageAbnormalToNormal = NotificationType((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 2) + (0,17))
if mibBuilder.loadTexts: atsSourceAvoltageAbnormalToNormal.setDescription('INFORMATION: Source A Voltage Normal.')
atsSourceBvoltageAbnormalToNormal = NotificationType((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 2) + (0,18))
if mibBuilder.loadTexts: atsSourceBvoltageAbnormalToNormal.setDescription('INFORMATION: Source B Voltage Normal.')
atsSourceAfrequencyAbnormalToNormal = NotificationType((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 2) + (0,19))
if mibBuilder.loadTexts: atsSourceAfrequencyAbnormalToNormal.setDescription('INFORMATION: Source A Frequency Normal.')
atsSourceBfrequencyAbnormalToNormal = NotificationType((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 2) + (0,20))
if mibBuilder.loadTexts: atsSourceBfrequencyAbnormalToNormal.setDescription('INFORMATION: Source B Frequency Normal.')
atsOutputOverLoadToNormal = NotificationType((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 2) + (0,21))
if mibBuilder.loadTexts: atsOutputOverLoadToNormal.setDescription('INFORMATION: Output Load Normal.')
atsWorkPowerAabnormalToNormal = NotificationType((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 2) + (0,22))
if mibBuilder.loadTexts: atsWorkPowerAabnormalToNormal.setDescription('INFORMATION: Unit Normal (Working power A normal).')
atsWorkPowerBabnormalToNormal = NotificationType((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 2) + (0,23))
if mibBuilder.loadTexts: atsWorkPowerBabnormalToNormal.setDescription('INFORMATION: Unit Normal (Working power B normal).')
atsOverTemperatureToNormal = NotificationType((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 2) + (0,24))
if mibBuilder.loadTexts: atsOverTemperatureToNormal.setDescription('INFORMATION: Cabinet temperature Normal.')
atsDcOffsetAbnormalToNormal = NotificationType((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 2) + (0,25))
if mibBuilder.loadTexts: atsDcOffsetAbnormalToNormal.setDescription('INFORMATION: Unit Normal (Sensor circuit normal).')
atsEepromAbnormalToNormal = NotificationType((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 2) + (0,26))
if mibBuilder.loadTexts: atsEepromAbnormalToNormal.setDescription('INFORMATION: Unit normal (EEPROM data normal)')
atsLcdNotConnectToNormal = NotificationType((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 2) + (0,27))
if mibBuilder.loadTexts: atsLcdNotConnectToNormal.setDescription('INFORMATION: LCD panel connection normal.')
atsOutputExceedsOverloadTimeToNormal = NotificationType((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 2) + (0,28))
if mibBuilder.loadTexts: atsOutputExceedsOverloadTimeToNormal.setDescription('INFORMATION: Output Load Normal.')
atsInputPhaseDifferenceToNormal = NotificationType((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 2) + (0,29))
if mibBuilder.loadTexts: atsInputPhaseDifferenceToNormal.setDescription('INFORMATION: Input sources return to normal phase.')
atsUserSetOverLoadToNormal = NotificationType((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 2) + (0,30))
if mibBuilder.loadTexts: atsUserSetOverLoadToNormal.setDescription('INFORMATION: User defined load return to Normal.')
atsCommunicationLost = NotificationType((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 2) + (0,31))
if mibBuilder.loadTexts: atsCommunicationLost.setDescription('SEVERE: Communication to the ATS has been lost.  Steps\n                  to reestablish communication are in progress.')
atsCommunicationEstablished = NotificationType((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 2) + (0,32))
if mibBuilder.loadTexts: atsCommunicationEstablished.setDescription('INFORMATION: Communication with the ATS has been\n                 established.')
emdTemperatureNotHigh = NotificationType((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 2) + (0,33)).setObjects(("ATS-MIB", "emdSatatusTemperature"), ("ATS-MIB", "emdConfigTempHighSetPoint"), ("ATS-MIB", "emdConfigTempName"))
if mibBuilder.loadTexts: emdTemperatureNotHigh.setDescription('INFORMATION: The temperature of EMD back to normal from high warning.')
emdTemperatureTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 2) + (0,34)).setObjects(("ATS-MIB", "emdSatatusTemperature"), ("ATS-MIB", "emdConfigTempHighSetPoint"), ("ATS-MIB", "emdConfigTempName"))
if mibBuilder.loadTexts: emdTemperatureTooHigh.setDescription('WARNING: The temperature of EMD higher than set point.')
emdTemperatureNotLow = NotificationType((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 2) + (0,35)).setObjects(("ATS-MIB", "emdSatatusTemperature"), ("ATS-MIB", "emdConfigTempLowSetPoint"), ("ATS-MIB", "emdConfigTempName"))
if mibBuilder.loadTexts: emdTemperatureNotLow.setDescription('INFORMATION: The temperature of EMD back to normal from low warning.')
emdTemperatureTooLow = NotificationType((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 2) + (0,36)).setObjects(("ATS-MIB", "emdSatatusTemperature"), ("ATS-MIB", "emdConfigTempLowSetPoint"), ("ATS-MIB", "emdConfigTempName"))
if mibBuilder.loadTexts: emdTemperatureTooLow.setDescription('WARNING: The temperature of EMD lower than set point.')
emdHumidityNotHigh = NotificationType((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 2) + (0,37)).setObjects(("ATS-MIB", "emdSatatusHumidity"), ("ATS-MIB", "emdConfigHumidityHighSetPoint"), ("ATS-MIB", "emdConfigHumidityName"))
if mibBuilder.loadTexts: emdHumidityNotHigh.setDescription('INFORMATION: The humidity of EMD back to normal from high warning.')
emdHumidityTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 2) + (0,38)).setObjects(("ATS-MIB", "emdSatatusHumidity"), ("ATS-MIB", "emdConfigHumidityHighSetPoint"), ("ATS-MIB", "emdConfigHumidityName"))
if mibBuilder.loadTexts: emdHumidityTooHigh.setDescription('WARNING: The humidity of EMD higher than set point.')
emdHumidityNotLow = NotificationType((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 2) + (0,39)).setObjects(("ATS-MIB", "emdSatatusHumidity"), ("ATS-MIB", "emdConfigHumidityLowSetPoint"), ("ATS-MIB", "emdConfigHumidityName"))
if mibBuilder.loadTexts: emdHumidityNotLow.setDescription('INFORMATION: The humidity of EMD back to normal from low warning.')
emdHumidityTooLow = NotificationType((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 2) + (0,40)).setObjects(("ATS-MIB", "emdSatatusHumidity"), ("ATS-MIB", "emdConfigHumidityLowSetPoint"), ("ATS-MIB", "emdConfigHumidityName"))
if mibBuilder.loadTexts: emdHumidityTooLow.setDescription('WARNING: The humidity of EMD lower than set point.')
emdAlarm1Normal = NotificationType((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 2) + (0,41)).setObjects(("ATS-MIB", "emdConfigAlarm1Type"), ("ATS-MIB", "emdConfigAlarm1Name"))
if mibBuilder.loadTexts: emdAlarm1Normal.setDescription('INFORMATION: The status of emd alarm-1 back to normal from active.')
emdAlarm1Active = NotificationType((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 2) + (0,42)).setObjects(("ATS-MIB", "emdConfigAlarm1Type"), ("ATS-MIB", "emdConfigAlarm1Name"))
if mibBuilder.loadTexts: emdAlarm1Active.setDescription('WARNING: The status of emd alarm-1 activated.')
emdAlarm2Normal = NotificationType((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 2) + (0,43)).setObjects(("ATS-MIB", "emdConfigAlarm2Type"), ("ATS-MIB", "emdConfigAlarm2Name"))
if mibBuilder.loadTexts: emdAlarm2Normal.setDescription('INFORMATION: The status of emd alarm-2 back to normal from active.')
emdAlarm2Active = NotificationType((1, 3, 6, 1, 4, 1, 37662, 1, 2, 2, 1, 2) + (0,44)).setObjects(("ATS-MIB", "emdConfigAlarm2Type"), ("ATS-MIB", "emdConfigAlarm2Name"))
if mibBuilder.loadTexts: emdAlarm2Active.setDescription('WARNING: The status of emd alarm-2 activated.')
mibBuilder.exportSymbols("ATS-MIB", atsInputGroupSourceBfrequencyLowerLimit=atsInputGroupSourceBfrequencyLowerLimit, agentConfigIPv6PrefixlLength=agentConfigIPv6PrefixlLength, atsTrapGroup=atsTrapGroup, atsWorkPowerBabnormal=atsWorkPowerBabnormal, atsInputGroupSourceAfrequencyLowerLimit=atsInputGroupSourceAfrequencyLowerLimit, agentConfigIPv6AddrAutoConfig=agentConfigIPv6AddrAutoConfig, atsInputGroupSourceBinputFrequency=atsInputGroupSourceBinputFrequency, accessControlMode=accessControlMode, emdConfigTempName=emdConfigTempName, agentConfigClearHistoryLog=agentConfigClearHistoryLog, atsInputGroupSourceBinputVoltage=atsInputGroupSourceBinputVoltage, emdConfigAlarm1Name=emdConfigAlarm1Name, agentConfigTrapRetryCount=agentConfigTrapRetryCount, atsInputGroupSourceBfrequencyUpperLimit=atsInputGroupSourceBfrequencyUpperLimit, atsSourceAfrequencyAbnormalToNormal=atsSourceAfrequencyAbnormalToNormal, agentConfigTelnetStatue=agentConfigTelnetStatue, emdSatatusAlarm2=emdSatatusAlarm2, emdTemperatureTooLow=emdTemperatureTooLow, agentConfig=agentConfig, emdTemperatureNotLow=emdTemperatureNotLow, atsInputPhaseDifferenceToNormal=atsInputPhaseDifferenceToNormal, agentConfigGateway=agentConfigGateway, atsOutputGroupOutputFequency=atsOutputGroupOutputFequency, atsIdentGroupManufacturer=atsIdentGroupManufacturer, atsHmiSwitchGroupSourceTransferByLoad=atsHmiSwitchGroupSourceTransferByLoad, atsOutputExceedsOverloadTimeToNormal=atsOutputExceedsOverloadTimeToNormal, atsInputGroupSourceBstatus=atsInputGroupSourceBstatus, agentConfigClearAgentLog=agentConfigClearAgentLog, receiverCommunityString=receiverCommunityString, agentConfigIpaddress=agentConfigIpaddress, emdConfigHumidityHighSetPoint=emdConfigHumidityHighSetPoint, emdAlarm1Active=emdAlarm1Active, agentConfigTrapsReceiversEntry=agentConfigTrapsReceiversEntry, agentConfigTrapAckSignature=agentConfigTrapAckSignature, atsAtsAlarm=atsAtsAlarm, atsControlGroupBuzzerAlarmControl=atsControlGroupBuzzerAlarmControl, atsControlGroup=atsControlGroup, atsHmiSwitchGroupSourceTransferByPhase=atsHmiSwitchGroupSourceTransferByPhase, atsSourceBfrequencyAbnormalToNormal=atsSourceBfrequencyAbnormalToNormal, atsMiscellaneousGroup=atsMiscellaneousGroup, atsIdentGroupFirmwareRevision=atsIdentGroupFirmwareRevision, agentConfigResetToDefault=agentConfigResetToDefault, atsInputGroupPreference=atsInputGroupPreference, emdConfigTempLowStatus=emdConfigTempLowStatus, atsEepromAbnormal=atsEepromAbnormal, emdConfigTempHighSetPoint=emdConfigTempHighSetPoint, atsOverTemperatureToNormal=atsOverTemperatureToNormal, agentConfigTftpStatue=agentConfigTftpStatue, emdSatatusTemperature=emdSatatusTemperature, emdSatatusEmdType=emdSatatusEmdType, emdConfigHumidity=emdConfigHumidity, agentConfigHistoryLogFrequency=agentConfigHistoryLogFrequency, atsOutputOverLoad=atsOutputOverLoad, atsInputGroupSourceAstatus=atsInputGroupSourceAstatus, webAppliance=webAppliance, emdConfigEmdName=emdConfigEmdName, agentConfigIPv6AddrStatus=agentConfigIPv6AddrStatus, agentConfigClearEventLog=agentConfigClearEventLog, emdAlarm2Active=emdAlarm2Active, atsInputGroupSourceBvoltageUpperLimit=atsInputGroupSourceBvoltageUpperLimit, atsOutputGroupOutputSource=atsOutputGroupOutputSource, atsHmiSwitchGroupBuzzer=atsHmiSwitchGroupBuzzer, accessIndex=accessIndex, emdAlarm1Normal=emdAlarm1Normal, atsLcdNotConnectToNormal=atsLcdNotConnectToNormal, receiverNmsType=receiverNmsType, accessControlAddr=accessControlAddr, agentConfigBaudRate=agentConfigBaudRate, emdConfigAlarm1=emdConfigAlarm1, receiverDescription=receiverDescription, emdConfigTempOffset=emdConfigTempOffset, single=single, atsInputGroup=atsInputGroup, agentConfigTrapRetryTime=agentConfigTrapRetryTime, usahEmdConfigEmdConfig=usahEmdConfigEmdConfig, atsSourceAvoltageAbnormal=atsSourceAvoltageAbnormal, emdHumidityNotHigh=emdHumidityNotHigh, emdConfigHumidityName=emdConfigHumidityName, atsInputGroupSourceAvoltageLowerLimit=atsInputGroupSourceAvoltageLowerLimit, trapsIndex=trapsIndex, atsOutputGroup=atsOutputGroup, emdConfigHumidityOffset=emdConfigHumidityOffset, atsSourceBvoltageAbnormalToNormal=atsSourceBvoltageAbnormalToNormal, emdHumidityNotLow=emdHumidityNotLow, emdAlarm2Normal=emdAlarm2Normal, agentConfigSubnetMask=agentConfigSubnetMask, atsWorkPowerBabnormalToNormal=atsWorkPowerBabnormalToNormal, atsObjectGroup=atsObjectGroup, emdConfigAlarm2Name=emdConfigAlarm2Name, emdConfigTempHighStatus=emdConfigTempHighStatus, emdConfigTempLowSetPoint=emdConfigTempLowSetPoint, atsSourceBvoltageAbnormal=atsSourceBvoltageAbnormal, emdStatus=emdStatus, emdConfigHumidityLowSetPoint=emdConfigHumidityLowSetPoint, receiverSeverityLevel=receiverSeverityLevel, atsSourceAfrequencyAbnormal=atsSourceAfrequencyAbnormal, agentConfigClearExtHistoryLog=agentConfigClearExtHistoryLog, atsMiscellaneousGroupAtsSystemTemperture=atsMiscellaneousGroupAtsSystemTemperture, ats=ats, atsUserSetOverLoadToNormal=atsUserSetOverLoadToNormal, atsCommunicationEstablished=atsCommunicationEstablished, atsInputGroupSourceAvoltageUpperLimit=atsInputGroupSourceAvoltageUpperLimit, agentConfigMibVersion=agentConfigMibVersion, atsDcOffsetAbnormalToNormal=atsDcOffsetAbnormalToNormal, emdConfig=emdConfig, agentConfigAccessControlTable=agentConfigAccessControlTable, atsWorkPowerAabnormal=atsWorkPowerAabnormal, atsOverTemperature=atsOverTemperature, atsDcOffsetAbnormal=atsDcOffsetAbnormal, emdSatatusHumidity=emdSatatusHumidity, emdConfigTemperature=emdConfigTemperature, agentConfigTrapsReceiversTable=agentConfigTrapsReceiversTable, atsIdentGroupSerialNumber=atsIdentGroupSerialNumber, atsInputGroupSourceAinputFrequency=atsInputGroupSourceAinputFrequency, atsLcdNotConnect=atsLcdNotConnect, atsOutputExceedsOverloadTime=atsOutputExceedsOverloadTime, atsInputPhaseDifference=atsInputPhaseDifference, atsOutputOverLoadToNormal=atsOutputOverLoadToNormal, agentConfigDhcpStatue=agentConfigDhcpStatue, atsIdentGroupAgentFirmwareRevision=atsIdentGroupAgentFirmwareRevision, atsEepromAbnormalToNormal=atsEepromAbnormalToNormal, emdTemperatureNotHigh=emdTemperatureNotHigh, atsControlGroupManualTransfer=atsControlGroupManualTransfer, atsInputGroupSourceAfrequencyUpperLimit=atsInputGroupSourceAfrequencyUpperLimit, agentConfigDefaultLanguage=agentConfigDefaultLanguage, agentConfigIPv6DefaultRouter=agentConfigIPv6DefaultRouter, emdTemperatureTooHigh=emdTemperatureTooHigh, atsCommunicationLost=atsCommunicationLost, atsWorkPowerAabnormalToNormal=atsWorkPowerAabnormalToNormal, atsHmiSwitchGroup=atsHmiSwitchGroup, emdHumidityTooHigh=emdHumidityTooHigh, atsSourceAvoltageAbnormalToNormal=atsSourceAvoltageAbnormalToNormal, atsInputGroupSourceAinputVoltage=atsInputGroupSourceAinputVoltage, emdHumidityTooLow=emdHumidityTooLow, agentConfigPollRate=agentConfigPollRate, atsHmiSwitchGroupAutoReturn=atsHmiSwitchGroupAutoReturn, product=product, emdConfigHumidityHighStatus=emdConfigHumidityHighStatus, agentConfigRestart=agentConfigRestart, trapsReceiverAddr=trapsReceiverAddr, accessCommunityString=accessCommunityString, emdConfigAlarm1Type=emdConfigAlarm1Type, atsOutputGroupOutputVoltage=atsOutputGroupOutputVoltage, agentConfigIPv6LinkLocalAddr=agentConfigIPv6LinkLocalAddr, agentConfigExtHistoryLogFrequency=agentConfigExtHistoryLogFrequency, agentConfigAccessControlEntry=agentConfigAccessControlEntry, atsMiscellaneousGroupSystemMaxCurrent=atsMiscellaneousGroupSystemMaxCurrent, atsSourceBfrequencyAbnormal=atsSourceBfrequencyAbnormal, emdConfigAlarm2=emdConfigAlarm2, agentConfigDate=agentConfigDate, atsAgent=atsAgent, emdConfigAlarm2Type=emdConfigAlarm2Type, atsHmiSwitchGroupAtsAlarm=atsHmiSwitchGroupAtsAlarm, emdSatatusAlarm1=emdSatatusAlarm1, atsIdentGroupModel=atsIdentGroupModel, atsOutputGroupLoad=atsOutputGroupLoad, atsIdentGroup=atsIdentGroup, atsOutputGroupOutputCurrent=atsOutputGroupOutputCurrent, atsAtsAlarmToNormal=atsAtsAlarmToNormal, emdConfigHumidityLowStatus=emdConfigHumidityLowStatus, atsInputGroupSourceBvoltageLowerLimit=atsInputGroupSourceBvoltageLowerLimit, atsUserSetOverLoad=atsUserSetOverLoad, agentConfigTime=agentConfigTime, agentConfigIPv6GlobalAddr=agentConfigIPv6GlobalAddr)
