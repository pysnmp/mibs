#
# PySNMP MIB module NBS-COHERENT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/mrv/NBS-COHERENT-MIB
# Produced by pysmi-1.1.12 at Tue May 28 13:11:58 2024
# On host fv-az1789-536 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
nbs, = mibBuilder.importSymbols("NBS-MIB", "nbs")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Bits, TimeTicks, MibIdentifier, ModuleIdentity, Counter64, IpAddress, NotificationType, Unsigned32, iso, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Integer32, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "TimeTicks", "MibIdentifier", "ModuleIdentity", "Counter64", "IpAddress", "NotificationType", "Unsigned32", "iso", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Integer32", "Counter32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
nbsCoherentMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 629, 242))
if mibBuilder.loadTexts: nbsCoherentMib.setLastUpdated('201509150000Z')
if mibBuilder.loadTexts: nbsCoherentMib.setOrganization('MRV')
if mibBuilder.loadTexts: nbsCoherentMib.setContactInfo('For technical support, please contact your service channel')
if mibBuilder.loadTexts: nbsCoherentMib.setDescription('Coherent CFP information.')
nbsCoherentCfgGrp = ObjectIdentity((1, 3, 6, 1, 4, 1, 629, 242, 10))
if mibBuilder.loadTexts: nbsCoherentCfgGrp.setStatus('current')
if mibBuilder.loadTexts: nbsCoherentCfgGrp.setDescription('Configurable coherent features')
nbsCohpmThresholdsGrp = ObjectIdentity((1, 3, 6, 1, 4, 1, 629, 242, 21))
if mibBuilder.loadTexts: nbsCohpmThresholdsGrp.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmThresholdsGrp.setDescription('Maximum considered safe by user')
nbsCohpmCurrentGrp = ObjectIdentity((1, 3, 6, 1, 4, 1, 629, 242, 22))
if mibBuilder.loadTexts: nbsCohpmCurrentGrp.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmCurrentGrp.setDescription('Subtotals and statistics for sample now underway')
nbsCohpmHistoricGrp = ObjectIdentity((1, 3, 6, 1, 4, 1, 629, 242, 23))
if mibBuilder.loadTexts: nbsCohpmHistoricGrp.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmHistoricGrp.setDescription('Totals and final statistics for a previous sample')
nbsCohpmRunningGrp = ObjectIdentity((1, 3, 6, 1, 4, 1, 629, 242, 24))
if mibBuilder.loadTexts: nbsCohpmRunningGrp.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmRunningGrp.setDescription('Totals and statistics since (boot-up) protocol configuration')
nbsCoherentStatsGrp = ObjectIdentity((1, 3, 6, 1, 4, 1, 629, 242, 90))
if mibBuilder.loadTexts: nbsCoherentStatsGrp.setStatus('current')
if mibBuilder.loadTexts: nbsCoherentStatsGrp.setDescription('Coherent operating information and statistics')
nbsCohpmEventsGrp = ObjectIdentity((1, 3, 6, 1, 4, 1, 629, 242, 100))
if mibBuilder.loadTexts: nbsCohpmEventsGrp.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmEventsGrp.setDescription('Threshold crossing events')
nbsCoherentCfgTable = MibTable((1, 3, 6, 1, 4, 1, 629, 242, 10, 2), )
if mibBuilder.loadTexts: nbsCoherentCfgTable.setStatus('current')
if mibBuilder.loadTexts: nbsCoherentCfgTable.setDescription('Configurable coherent parameters.')
nbsCoherentCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 242, 10, 2, 1), ).setIndexNames((0, "NBS-COHERENT-MIB", "nbsCoherentCfgIfIndex"))
if mibBuilder.loadTexts: nbsCoherentCfgEntry.setStatus('current')
if mibBuilder.loadTexts: nbsCoherentCfgEntry.setDescription('User-controlled Coherent operating information and statistics for a\n        specific port/interface.')
nbsCoherentCfgIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 10, 2, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCoherentCfgIfIndex.setStatus('current')
if mibBuilder.loadTexts: nbsCoherentCfgIfIndex.setDescription('The MIB2 ifIndex')
nbsCoherentCfgCDmodeCaps = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 10, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCoherentCfgCDmodeCaps.setStatus('current')
if mibBuilder.loadTexts: nbsCoherentCfgCDmodeCaps.setDescription('This bitmask indicates which configurable codes this port supports for\n        nbsCoherentCfgCDmodeAdmin.\n\n        Bit 0, 1 are reserved.\n\n        Subsequent bits refer to the CD modes enumerated list; bits are\n        numbered per enumeration value.  Bit 2 corresponds to disable(2), Bit 3\n        to auto(3), etc.  A bit is set (1) if that CD\n        mode is appropriate for this module, cleared (0) if unavailable.\n\n        OCTET STRING bitmasks count the leftmost bit (MSB) as 0.')
nbsCoherentCfgCDmodeAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 10, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notSupported", 1), ("disable", 2), ("auto", 3), ("fixed", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsCoherentCfgCDmodeAdmin.setStatus('current')
if mibBuilder.loadTexts: nbsCoherentCfgCDmodeAdmin.setDescription('Desired administrative chromatic dispersion (CD) mode setting:\n\n        disable(2) --\n\n        auto(3) -- apply the objects nbsCoherentCfgCDautolAdmin and\n            nbsCoherentCfgCDautohAdmin\n\n        fixed(4) -- apply the object nbsCoherentCfgCDfixedAdmin')
nbsCoherentCfgCDmodeOper = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 10, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notSupported", 1), ("disable", 2), ("auto", 3), ("fixed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCoherentCfgCDmodeOper.setStatus('current')
if mibBuilder.loadTexts: nbsCoherentCfgCDmodeOper.setDescription('Current operational chromatic dispersion (CD) mode setting:\n\n        notSupported(1) --\n\n        disable(2) --\n\n        auto(3) -- the objects nbsCoherentCfgCDautolAdmin and\n            nbsCoherentCfgCDautohAdmin apply\n\n        fixed(4) -- the object nbsCoherentCfgCDfixedAdmin applies')
nbsCoherentCfgCDautolAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 10, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100000, 100000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsCoherentCfgCDautolAdmin.setStatus('current')
if mibBuilder.loadTexts: nbsCoherentCfgCDautolAdmin.setDescription('Desired administrative setting for the low search value for an automatic\n        find of the chromatic dispersion (CD); applies only for auto(3).\n        Unit measurement: 1 ps/nm')
nbsCoherentCfgCDautolOper = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 10, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100000, 100000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCoherentCfgCDautolOper.setStatus('current')
if mibBuilder.loadTexts: nbsCoherentCfgCDautolOper.setDescription('Current operational setting for the low search value for an automatic\n        find of the chromatic dispersion (CD); applies only for auto(3).\n        Unit measurement: 1 ps/nm')
nbsCoherentCfgCDautohAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 10, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100000, 100000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsCoherentCfgCDautohAdmin.setStatus('current')
if mibBuilder.loadTexts: nbsCoherentCfgCDautohAdmin.setDescription('Desired administrative setting for the high search value for an automatic\n        find of the chromatic dispersion (CD); applies only for auto(3).\n        Unit measurement: 1 ps/nm')
nbsCoherentCfgCDautohOper = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 10, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100000, 100000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCoherentCfgCDautohOper.setStatus('current')
if mibBuilder.loadTexts: nbsCoherentCfgCDautohOper.setDescription('Current operational setting for the high search value for an automatic\n        find of the chromatic dispersion (CD); applies only for auto(3).\n        Unit measurement: 1 ps/nm')
nbsCoherentCfgCDfixedAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 10, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100000, 100000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsCoherentCfgCDfixedAdmin.setStatus('current')
if mibBuilder.loadTexts: nbsCoherentCfgCDfixedAdmin.setDescription('Desired administrative setting for a fixed chromatic dispersion (CD);\n        applies only for fixed(4).\n        Unit measurement: 1 ps/nm')
nbsCoherentCfgCDfixedOper = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 10, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100000, 100000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCoherentCfgCDfixedOper.setStatus('current')
if mibBuilder.loadTexts: nbsCoherentCfgCDfixedOper.setDescription('Current operational setting for a fixed chromatic dispersion (CD);\n        applies only for fixed(4).\n        Unit measurement: 1 ps/nm')
nbsCoherentCfgSOPmodeAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 10, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notSupported", 1), ("standard", 2), ("enhanced", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsCoherentCfgSOPmodeAdmin.setStatus('current')
if mibBuilder.loadTexts: nbsCoherentCfgSOPmodeAdmin.setDescription('Desired administrative setting for state of polarization (SOP) mode')
nbsCoherentCfgSOPmodeOper = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 10, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notSupported", 1), ("standard", 2), ("enhanced", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCoherentCfgSOPmodeOper.setStatus('current')
if mibBuilder.loadTexts: nbsCoherentCfgSOPmodeOper.setDescription('Operational setting for state of polarization (SOP) mode')
nbsCohpmThresholdsTable = MibTable((1, 3, 6, 1, 4, 1, 629, 242, 21, 1), )
if mibBuilder.loadTexts: nbsCohpmThresholdsTable.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmThresholdsTable.setDescription('Coherent Performance Monitoring thresholds')
nbsCohpmThresholdsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 242, 21, 1, 1), ).setIndexNames((0, "NBS-COHERENT-MIB", "nbsCohpmThresholdsIfIndex"), (0, "NBS-COHERENT-MIB", "nbsCohpmThresholdsInterval"))
if mibBuilder.loadTexts: nbsCohpmThresholdsEntry.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmThresholdsEntry.setDescription('Performance monitoring thresholds for a particular interface')
nbsCohpmThresholdsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 21, 1, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCohpmThresholdsIfIndex.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmThresholdsIfIndex.setDescription('The MIB2 ifIndex')
nbsCohpmThresholdsInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 21, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("quarterHour", 1), ("twentyfourHour", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCohpmThresholdsInterval.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmThresholdsInterval.setDescription('Indicates the interval monitored to which these thresholds apply')
nbsCohpmThresholdsAveNetBERsig = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 21, 1, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsCohpmThresholdsAveNetBERsig.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmThresholdsAveNetBERsig.setDescription('Persistent. The significand of the average network Bit Error Rate (BER)\n        threshold, which is calculated by:\n           nbsCohpmThresholdsAveNetBERsig x 10^nbsCohpmThresholdsAveNetBERexp\n\n        The first time the average BER meets/exceeds this threshold during\n        a current interval triggers the nbsCohpmTrapsAveBER notification.\n\n        The reserved value 0 disables notifications for this event.')
nbsCohpmThresholdsAveNetBERexp = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 21, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsCohpmThresholdsAveNetBERexp.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmThresholdsAveNetBERexp.setDescription('Persistent. The exponent of the average network Bit Error Rate (BER)\n        threshold, see nbsCohpmThresholdsAveNetBERsig.\n\n        Not supported value: 0x80000000')
nbsCohpmThresholdsMinNetBERsig = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 21, 1, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsCohpmThresholdsMinNetBERsig.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmThresholdsMinNetBERsig.setDescription('Persistent. The significand of the minimum network Bit Error Rate (BER)\n        threshold, which is calculated by:\n           nbsCohpmThresholdsMinNetBERsig x 10^nbsCohpmThresholdsMinNetBERexp\n\n        The first time the minimum BER meets/is below this threshold during\n        a current interval triggers the nbsCohpmTrapsMinBER notification.\n\n        The reserved value 0 disables notifications for this event.')
nbsCohpmThresholdsMinNetBERexp = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 21, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsCohpmThresholdsMinNetBERexp.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmThresholdsMinNetBERexp.setDescription('Persistent. The exponent of the minimum network Bit Error Rate (BER)\n        threshold, see nbsCohpmThresholdsMinNetBERsig.\n\n        Not supported value: 0x80000000')
nbsCohpmThresholdsMaxNetBERsig = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 21, 1, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsCohpmThresholdsMaxNetBERsig.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmThresholdsMaxNetBERsig.setDescription('Persistent. The significand of the maximum network Bit Error Rate (BER)\n        threshold, which is calculated by:\n           nbsCohpmThresholdsMaxNetBERsig x 10^nbsCohpmThresholdsMaxNetBERexp\n\n        The first time the maximum BER meets/exceeds this threshold during\n        a current interval triggers the nbsCohpmTrapsMaxBER notification.\n\n        The reserved value 0 disables notifications for this event.')
nbsCohpmThresholdsMaxNetBERexp = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 21, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsCohpmThresholdsMaxNetBERexp.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmThresholdsMaxNetBERexp.setDescription('Persistent. The exponent of the maximum network Bit Error Rate (BER)\n        threshold, see nbsCohpmThresholdsMaxNetBERsig.\n\n        Not supported value: 0x80000000')
nbsCohpmThresholdsAveCD = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 21, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsCohpmThresholdsAveCD.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmThresholdsAveCD.setDescription('Persistent. The average chromatic dispersion (CD) threshold.\n        Unit measurement: 1 ps/nm\n\n        The first time nbsCohpmCurrentAveCD meets/exceeds this threshold\n        during a given current interval triggers nbsCohpmTrapsAveCD.\n\n        Not supported value: 0x80000000')
nbsCohpmThresholdsMinCD = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 21, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsCohpmThresholdsMinCD.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmThresholdsMinCD.setDescription('Persistent. The minimum chromatic dispersion (CD) threshold.\n        Unit measurement: 1 ps/nm\n\n        The first time nbsCohpmCurrentMinCD meets/is below this threshold\n        during a given current interval triggers nbsCohpmTrapsMinCD.\n\n        Not supported value: 0x80000000')
nbsCohpmThresholdsMaxCD = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 21, 1, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsCohpmThresholdsMaxCD.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmThresholdsMaxCD.setDescription('Persistent. The maximum chromatic dispersion (CD) threshold.\n        Unit measurement: 1 ps/nm\n\n        The first time nbsCohpmCurrentMaxCD meets/exceeds this threshold\n        during a given current interval triggers nbsCohpmTrapsMaxCD.\n\n        Not supported value: 0x80000000')
nbsCohpmThresholdsAveDGD = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 21, 1, 1, 30), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsCohpmThresholdsAveDGD.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmThresholdsAveDGD.setDescription('Persistent. The average differential group delay (DGD) threshold.\n        Unit measurement: 1 ps\n\n        The first time nbsCohpmCurrentAveDGD meets/exceeds this threshold\n        during a given current interval triggers nbsCohpmTrapsAveDGD.\n\n        The reserved value 0xFFFFFFFF disables notifications for this event.')
nbsCohpmThresholdsMinDGD = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 21, 1, 1, 33), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsCohpmThresholdsMinDGD.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmThresholdsMinDGD.setDescription('Persistent. The minimum differential group delay (DGD) threshold.\n        Unit measurement: 1 ps\n\n        The first time nbsCohpmCurrentMinDGD meets/is below this threshold\n        during a given current interval triggers nbsCohpmTrapsMinDGD.\n\n        The reserved value 0xFFFFFFFF disables notifications for this event.')
nbsCohpmThresholdsMaxDGD = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 21, 1, 1, 36), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsCohpmThresholdsMaxDGD.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmThresholdsMaxDGD.setDescription('Persistent. The maximum differential group delay (DGD) threshold.\n        Unit measurement: 1 ps\n\n        The first time nbsCohpmCurrentMaxDGD meets/exceeds this threshold\n        during a given current interval triggers nbsCohpmTrapsMaxDGD.\n\n        The reserved value 0xFFFFFFFF disables notifications for this event.')
nbsCohpmThresholdsAveQ = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 21, 1, 1, 40), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsCohpmThresholdsAveQ.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmThresholdsAveQ.setDescription('Persistent. The average Q threshold.\n        Unit measurement: 0.1 dB\n\n        The first time nbsCohpmCurrentAveQ meets/exceeds this threshold\n        during a given current interval triggers nbsCohpmTrapsAveQ.\n\n        The reserved value 0xFFFFFFFF disables notifications for this event.')
nbsCohpmThresholdsMinQ = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 21, 1, 1, 43), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsCohpmThresholdsMinQ.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmThresholdsMinQ.setDescription('Persistent. The minimum Q threshold.\n        Unit measurement: 0.1 dB\n\n        The first time nbsCohpmCurrentMinQ meets/is below this threshold\n        during a given current interval triggers nbsCohpmTrapsMinQ.\n\n        The reserved value 0xFFFFFFFF disables notifications for this event.')
nbsCohpmThresholdsMaxQ = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 21, 1, 1, 46), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsCohpmThresholdsMaxQ.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmThresholdsMaxQ.setDescription('Persistent. The maximum Q threshold.\n        Unit measurement: 0.1 dB\n\n        The first time nbsCohpmCurrentMaxQ meets/exceeds this threshold\n        during a given current interval triggers nbsCohpmTrapsMaxQ.\n\n        The reserved value 0xFFFFFFFF disables notifications for this event.')
nbsCohpmThresholdsAveCFO = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 21, 1, 1, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsCohpmThresholdsAveCFO.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmThresholdsAveCFO.setDescription('Persistent. The average carrier frequency offset (CFO) threshold.\n        Unit measurement: 1 MHz\n\n        The first time nbsCohpmCurrentAveCFO meets/exceeds this threshold\n        during a given current interval triggers nbsCohpmTrapsAveCFO.\n\n        Not supported value: 0x80000000')
nbsCohpmThresholdsMinCFO = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 21, 1, 1, 53), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsCohpmThresholdsMinCFO.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmThresholdsMinCFO.setDescription('Persistent. The minimum carrier frequency offset (CFO) threshold.\n        Unit measurement: 1 MHz\n\n        The first time nbsCohpmCurrentMinCFO meets/is below this threshold\n        during a given current interval triggers nbsCohpmTrapsMinCFO.\n\n        Not supported value: 0x80000000')
nbsCohpmThresholdsMaxCFO = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 21, 1, 1, 56), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsCohpmThresholdsMaxCFO.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmThresholdsMaxCFO.setDescription('Persistent. The maximum carrier frequency offset (CFO) threshold.\n        Unit measurement: 1 MHz\n\n        The first time nbsCohpmCurrentMaxCFO meets/exceeds this threshold\n        during a given current interval triggers nbsCohpmTrapsMaxCFO.\n\n        Not supported value: 0x80000000')
nbsCohpmThresholdsAveOSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 21, 1, 1, 60), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsCohpmThresholdsAveOSNR.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmThresholdsAveOSNR.setDescription('Persistent. The average optical signal-to-noise ratio (OSNR) threshold.\n        Unit measurement: 0.1 dB\n\n        The first time nbsCohpmCurrentAveOSNR meets/exceeds this threshold\n        during a given current interval triggers nbsCohpmTrapsAveOSNR.\n\n        The reserved value 0xFFFFFFFF disables notifications for this event.')
nbsCohpmThresholdsMinOSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 21, 1, 1, 63), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsCohpmThresholdsMinOSNR.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmThresholdsMinOSNR.setDescription('Persistent. The minimum optical signal-to-noise ratio (OSNR) threshold.\n        Unit measurement: 0.1 dB\n\n        The first time nbsCohpmCurrentMinOSNR meets/is below this threshold\n        during a given current interval triggers nbsCohpmTrapsMinOSNR.\n\n        The reserved value 0xFFFFFFFF disables notifications for this event.')
nbsCohpmThresholdsMaxOSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 21, 1, 1, 66), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsCohpmThresholdsMaxOSNR.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmThresholdsMaxOSNR.setDescription('Persistent. The maximum optical signal-to-noise ratio (OSNR) threshold.\n        Unit measurement: 0.1 dB\n\n        The first time nbsCohpmCurrentMaxOSNR meets/exceeds this threshold\n        during a given current interval triggers nbsCohpmTrapsMaxOSNR.\n\n        The reserved value 0xFFFFFFFF disables notifications for this event.')
nbsCohpmThresholdsAveSNRx = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 21, 1, 1, 70), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsCohpmThresholdsAveSNRx.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmThresholdsAveSNRx.setDescription('Persistent. The average signal-to-noise ratio of X Polarization (SNRx)\n        threshold. Unit measurement: 0.1 dB\n\n        The first time nbsCohpmCurrentAveSNRx meets/exceeds this threshold\n        during a given current interval triggers nbsCohpmTrapsAveSNRx.\n\n        The reserved value 0xFFFFFFFF disables notifications for this event.')
nbsCohpmThresholdsMinSNRx = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 21, 1, 1, 73), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsCohpmThresholdsMinSNRx.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmThresholdsMinSNRx.setDescription('Persistent. The minimum signal-to-noise ratio of X Polarization (SNRx)\n        threshold. Unit measurement: 0.1 dB\n\n        The first time nbsCohpmCurrentMinSNRx meets/is below this threshold\n        during a given current interval triggers nbsCohpmTrapsMinSNRx.\n\n        The reserved value 0xFFFFFFFF disables notifications for this event.')
nbsCohpmThresholdsMaxSNRx = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 21, 1, 1, 76), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsCohpmThresholdsMaxSNRx.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmThresholdsMaxSNRx.setDescription('Persistent. The maximum signal-to-noise ratio of X Polarization (SNRx)\n        threshold. Unit measurement: 0.1 dB\n\n        The first time nbsCohpmCurrentMaxSNRx meets/exceeds this threshold\n        during a given current interval triggers nbsCohpmTrapsMaxSNRx.\n\n        The reserved value 0xFFFFFFFF disables notifications for this event.')
nbsCohpmThresholdsAveSNRy = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 21, 1, 1, 80), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsCohpmThresholdsAveSNRy.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmThresholdsAveSNRy.setDescription('Persistent. The average signal-to-noise ratio of Y Polarization (SNRy)\n        threshold. Unit measurement: 0.1 dB\n\n        The first time nbsCohpmCurrentAveSNRy meets/exceeds this threshold\n        during a given current interval triggers nbsCohpmTrapsAveSNRy.\n\n        The reserved value 0xFFFFFFFF disables notifications for this event.')
nbsCohpmThresholdsMinSNRy = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 21, 1, 1, 83), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsCohpmThresholdsMinSNRy.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmThresholdsMinSNRy.setDescription('Persistent. The minimum signal-to-noise ratio of Y Polarization (SNRy)\n        threshold. Unit measurement: 0.1 dB\n\n        The first time nbsCohpmCurrentMinSNRy meets/is below this threshold\n        during a given current interval triggers nbsCohpmTrapsMinSNRy.\n\n        The reserved value 0xFFFFFFFF disables notifications for this event.')
nbsCohpmThresholdsMaxSNRy = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 21, 1, 1, 86), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsCohpmThresholdsMaxSNRy.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmThresholdsMaxSNRy.setDescription('Persistent. The maximum signal-to-noise ratio of Y Polarization (SNRy)\n        threshold. Unit measurement: 0.1 dB\n\n        The first time nbsCohpmCurrentMaxSNRy meets/exceeds this threshold\n        during a given current interval triggers nbsCohpmTrapsMaxSNRy.\n\n        The reserved value 0xFFFFFFFF disables notifications for this event.')
nbsCohpmThresholdsAvePDL = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 21, 1, 1, 90), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsCohpmThresholdsAvePDL.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmThresholdsAvePDL.setDescription('Persistent. The average polarization dependent loss (PDL) threshold.\n        Unit measurement: 0.1 dB\n\n        The first time nbsCohpmCurrentAvePDL meets/exceeds this threshold\n        during a given current interval triggers nbsCohpmTrapsAvePDL.\n\n        The reserved value 0xFFFFFFFF disables notifications for this event.')
nbsCohpmThresholdsMinPDL = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 21, 1, 1, 93), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsCohpmThresholdsMinPDL.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmThresholdsMinPDL.setDescription('Persistent. The minimum polarization dependent loss (PDL) threshold.\n        Unit measurement: 0.1 dB\n\n        The first time nbsCohpmCurrentMinPDL meets/is below this threshold\n        during a given current interval triggers nbsCohpmTrapsMinPDL.\n\n        The reserved value 0xFFFFFFFF disables notifications for this event.')
nbsCohpmThresholdsMaxPDL = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 21, 1, 1, 96), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsCohpmThresholdsMaxPDL.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmThresholdsMaxPDL.setDescription('Persistent. The maximum polarization dependent loss (PDL) threshold.\n        Unit measurement: 0.1 dB\n\n        The first time nbsCohpmCurrentMaxPDL meets/exceeds this threshold\n        during a given current interval triggers nbsCohpmTrapsMaxPDL.\n\n        The reserved value 0xFFFFFFFF disables notifications for this event.')
nbsCohpmThresholdsAveSOP = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 21, 1, 1, 100), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsCohpmThresholdsAveSOP.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmThresholdsAveSOP.setDescription('Persistent. The average state of polarization (SOP) threshold.\n        Unit measurement: 1 rad/s\n\n        The first time nbsCohpmCurrentAveSOP meets/exceeds this threshold\n        during a given current interval triggers nbsCohpmTrapsAveSOP.\n\n        The reserved value 0xFFFFFFFF disables notifications for this event.')
nbsCohpmThresholdsMinSOP = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 21, 1, 1, 103), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsCohpmThresholdsMinSOP.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmThresholdsMinSOP.setDescription('Persistent. The minimum state of polarization (SOP) threshold.\n        Unit measurement: 1 rad/s\n\n        The first time nbsCohpmCurrentMinSOP meets/is below this threshold\n        during a given current interval triggers nbsCohpmTrapsMinSOP.\n\n        The reserved value 0xFFFFFFFF disables notifications for this event.')
nbsCohpmThresholdsMaxSOP = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 21, 1, 1, 106), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsCohpmThresholdsMaxSOP.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmThresholdsMaxSOP.setDescription('Persistent. The maximum state of polarization (SOP) threshold.\n        Unit measurement: 1 rad/s\n\n        The first time nbsCohpmCurrentMaxSOP meets/exceeds this threshold\n        during a given current interval triggers nbsCohpmTrapsMaxSOP.\n\n        The reserved value 0xFFFFFFFF disables notifications for this event.')
nbsCohpmCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 629, 242, 22, 3), )
if mibBuilder.loadTexts: nbsCohpmCurrentTable.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmCurrentTable.setDescription('All Coherent Performance Monitoring statistics for the\n        nbsCohpmCurrentInterval now underway.')
nbsCohpmCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 242, 22, 3, 1), ).setIndexNames((0, "NBS-COHERENT-MIB", "nbsCohpmCurrentIfIndex"), (0, "NBS-COHERENT-MIB", "nbsCohpmCurrentInterval"))
if mibBuilder.loadTexts: nbsCohpmCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmCurrentEntry.setDescription('Coherent Performance Monitoring statistics for a specific port/\n        interface and nbsCohpmCurrentInterval.')
nbsCohpmCurrentIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 22, 3, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCohpmCurrentIfIndex.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmCurrentIfIndex.setDescription('The MIB2 ifIndex')
nbsCohpmCurrentInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 22, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("quarterHour", 1), ("twentyfourHour", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCohpmCurrentInterval.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmCurrentInterval.setDescription('Indicates the interval monitored')
nbsCohpmCurrentDate = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 22, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCohpmCurrentDate.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmCurrentDate.setDescription('The date (UTC) interval began, represented by an eight\n        digit decimal number: yyyymmdd')
nbsCohpmCurrentTime = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 22, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCohpmCurrentTime.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmCurrentTime.setDescription('The time (UTC) interval began, represented by a six\n        digit decimal number: hhmmss')
nbsCohpmCurrentAveNetBERsig = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 22, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCohpmCurrentAveNetBERsig.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmCurrentAveNetBERsig.setDescription('The significand of the average network Bit Error Rate (BER),\n        which is calculated by:\n           nbsCohpmCurrentAveNetBERsig x 10^nbsCohpmCurrentAveNetBERexp')
nbsCohpmCurrentAveNetBERexp = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 22, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCohpmCurrentAveNetBERexp.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmCurrentAveNetBERexp.setDescription('The exponent of the average network Bit Error Rate (BER),\n        see nbsCohpmCurrentAveNetBERsig.\n\n        Not supported value: 0x80000000')
nbsCohpmCurrentMinNetBERsig = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 22, 3, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCohpmCurrentMinNetBERsig.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmCurrentMinNetBERsig.setDescription('The significand of the minimum network Bit Error Rate (BER),\n        which is calculated by:\n           nbsCohpmCurrentMinNetBERsig x 10^nbsCohpmCurrentMinNetBERexp')
nbsCohpmCurrentMinNetBERexp = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 22, 3, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCohpmCurrentMinNetBERexp.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmCurrentMinNetBERexp.setDescription('The exponent of the minimum network Bit Error Rate (BER),\n        see nbsCohpmCurrentMinNetBERsig.\n\n        Not supported value: 0x80000000')
nbsCohpmCurrentMaxNetBERsig = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 22, 3, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCohpmCurrentMaxNetBERsig.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmCurrentMaxNetBERsig.setDescription('The significand of the maximum network Bit Error Rate (BER),\n        which is calculated by:\n           nbsCohpmCurrentMaxNetBERsig x 10^nbsCohpmCurrentMaxNetBERexp')
nbsCohpmCurrentMaxNetBERexp = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 22, 3, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCohpmCurrentMaxNetBERexp.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmCurrentMaxNetBERexp.setDescription('The exponent of the maximum network Bit Error Rate (BER),\n        see nbsCohpmCurrentMaxNetBERsig.\n\n        Not supported value: 0x80000000')
nbsCohpmCurrentAveCD = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 22, 3, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCohpmCurrentAveCD.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmCurrentAveCD.setDescription('Average chromatic dispersion (CD) seen in the current interval.\n        Unit measurement: 1 ps/nm\n\n        Not supported value: 0x80000000')
nbsCohpmCurrentMinCD = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 22, 3, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCohpmCurrentMinCD.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmCurrentMinCD.setDescription('Minimum chromatic dispersion (CD) seen in the current interval.\n        Unit measurement: 1 ps/nm\n\n        Not supported value: 0x80000000')
nbsCohpmCurrentMaxCD = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 22, 3, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCohpmCurrentMaxCD.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmCurrentMaxCD.setDescription('Maximum chromatic dispersion (CD) seen in the current interval.\n        Unit measurement: 1 ps/nm\n\n        Not supported value: 0x80000000')
nbsCohpmCurrentAveDGD = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 22, 3, 1, 30), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCohpmCurrentAveDGD.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmCurrentAveDGD.setDescription('Average differential group delay (DGD) seen in the current interval.\n        Unit measurement: 1 ps\n\n        Not supported value: 0xFFFFFFFF')
nbsCohpmCurrentMinDGD = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 22, 3, 1, 33), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCohpmCurrentMinDGD.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmCurrentMinDGD.setDescription('Minimum differential group delay (DGD) seen in the current interval.\n        Unit measurement: 1 ps\n\n        Not supported value: 0xFFFFFFFF')
nbsCohpmCurrentMaxDGD = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 22, 3, 1, 36), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCohpmCurrentMaxDGD.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmCurrentMaxDGD.setDescription('Maximum differential group delay (DGD) seen in the current interval.\n        Unit measurement: 1 ps\n\n        Not supported value: 0xFFFFFFFF')
nbsCohpmCurrentAveQ = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 22, 3, 1, 40), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCohpmCurrentAveQ.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmCurrentAveQ.setDescription('Average Q seen in the current interval.\n        Unit measurement: 0.1 dB\n\n        Not supported value: 0xFFFFFFFF')
nbsCohpmCurrentMinQ = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 22, 3, 1, 43), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCohpmCurrentMinQ.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmCurrentMinQ.setDescription('Minimum Q seen in the current interval.\n        Unit measurement: 0.1 dB\n\n        Not supported value: 0xFFFFFFFF')
nbsCohpmCurrentMaxQ = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 22, 3, 1, 46), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCohpmCurrentMaxQ.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmCurrentMaxQ.setDescription('Maximum Q seen in the current interval.\n        Unit measurement: 0.1 dB\n\n        Not supported value: 0xFFFFFFFF')
nbsCohpmCurrentAveCFO = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 22, 3, 1, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCohpmCurrentAveCFO.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmCurrentAveCFO.setDescription('Average carrier frequency offset (CFO) seen in the current interval.\n        Unit measurement: 1 MHz\n\n        Not supported value: 0x80000000')
nbsCohpmCurrentMinCFO = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 22, 3, 1, 53), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCohpmCurrentMinCFO.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmCurrentMinCFO.setDescription('Minimum carrier frequency offset (CFO) seen in the current interval.\n        Unit measurement: 1 MHz\n\n        Not supported value: 0x80000000')
nbsCohpmCurrentMaxCFO = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 22, 3, 1, 56), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCohpmCurrentMaxCFO.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmCurrentMaxCFO.setDescription('Maximum carrier frequency offset (CFO) seen in the current interval.\n        Unit measurement: 1 MHz\n\n        Not supported value: 0x80000000')
nbsCohpmCurrentAveOSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 22, 3, 1, 60), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCohpmCurrentAveOSNR.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmCurrentAveOSNR.setDescription('Average optical signal-to-noise ratio (OSNR) seen in the current interval.\n        Unit measurement: 0.1 dB\n\n        Not supported value: 0xFFFFFFFF')
nbsCohpmCurrentMinOSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 22, 3, 1, 63), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCohpmCurrentMinOSNR.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmCurrentMinOSNR.setDescription('Minimum optical signal-to-noise ratio (OSNR) seen in the current interval.\n        Unit measurement: 0.1 dB\n\n        Not supported value: 0xFFFFFFFF')
nbsCohpmCurrentMaxOSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 22, 3, 1, 66), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCohpmCurrentMaxOSNR.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmCurrentMaxOSNR.setDescription('Maximum optical signal-to-noise ratio (OSNR) seen in the current interval.\n        Unit measurement: 0.1 dB\n\n        Not supported value: 0xFFFFFFFF')
nbsCohpmCurrentAveSNRx = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 22, 3, 1, 70), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCohpmCurrentAveSNRx.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmCurrentAveSNRx.setDescription('Average signal-to-noise ratio of X Polarization (SNRx) seen in the\n        current interval.\n        Unit measurement: 0.1 dB\n\n        Not supported value: 0xFFFFFFFF')
nbsCohpmCurrentMinSNRx = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 22, 3, 1, 73), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCohpmCurrentMinSNRx.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmCurrentMinSNRx.setDescription('Minimum signal-to-noise ratio of X Polarization (SNRx) seen in the\n        current interval.\n        Unit measurement: 0.1 dB\n\n        Not supported value: 0xFFFFFFFF')
nbsCohpmCurrentMaxSNRx = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 22, 3, 1, 76), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCohpmCurrentMaxSNRx.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmCurrentMaxSNRx.setDescription('Maximum signal-to-noise ratio of X Polarization (SNRx) seen in the\n        current interval.\n        Unit measurement: 0.1 dB\n\n        Not supported value: 0xFFFFFFFF')
nbsCohpmCurrentAveSNRy = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 22, 3, 1, 80), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCohpmCurrentAveSNRy.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmCurrentAveSNRy.setDescription('Average signal-to-noise ratio of Y Polarization (SNRy) seen in the\n        current interval.\n        Unit measurement: 0.1 dB\n\n        Not supported value: 0xFFFFFFFF')
nbsCohpmCurrentMinSNRy = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 22, 3, 1, 83), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCohpmCurrentMinSNRy.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmCurrentMinSNRy.setDescription('Minimum signal-to-noise ratio of Y Polarization (SNRy) seen in the\n        current interval.\n        Unit measurement: 0.1 dB\n\n        Not supported value: 0xFFFFFFFF')
nbsCohpmCurrentMaxSNRy = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 22, 3, 1, 86), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCohpmCurrentMaxSNRy.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmCurrentMaxSNRy.setDescription('Maximum signal-to-noise ratio of Y Polarization (SNRy) seen in the\n        current interval.\n        Unit measurement: 0.1 dB\n\n        Not supported value: 0xFFFFFFFF')
nbsCohpmCurrentAvePDL = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 22, 3, 1, 90), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCohpmCurrentAvePDL.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmCurrentAvePDL.setDescription('Average polarization dependent loss (PDL) seen in the current interval.\n        Unit measurement: 0.1 dB\n\n        Not supported value: 0xFFFFFFFF')
nbsCohpmCurrentMinPDL = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 22, 3, 1, 93), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCohpmCurrentMinPDL.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmCurrentMinPDL.setDescription('Minimum polarization dependent loss (PDL) seen in the current interval.\n        Unit measurement: 0.1 dB\n\n        Not supported value: 0xFFFFFFFF')
nbsCohpmCurrentMaxPDL = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 22, 3, 1, 96), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCohpmCurrentMaxPDL.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmCurrentMaxPDL.setDescription('Maximum polarization dependent loss (PDL) seen in the current interval.\n        Unit measurement: 0.1 dB\n\n        Not supported value: 0xFFFFFFFF')
nbsCohpmCurrentAveSOP = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 22, 3, 1, 100), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCohpmCurrentAveSOP.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmCurrentAveSOP.setDescription('Average state of polarization (SOP) seen in the current interval.\n        Unit measurement: 1 rad/s\n\n        Not supported value: 0xFFFFFFFF')
nbsCohpmCurrentMinSOP = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 22, 3, 1, 103), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCohpmCurrentMinSOP.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmCurrentMinSOP.setDescription('Minimum state of polarization (SOP) seen in the current interval.\n        Unit measurement: 1 rad/s\n\n        Not supported value: 0xFFFFFFFF')
nbsCohpmCurrentMaxSOP = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 22, 3, 1, 106), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCohpmCurrentMaxSOP.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmCurrentMaxSOP.setDescription('Maximum state of polarization (SOP) seen in the current interval.\n        Unit measurement: 1 rad/s\n\n        Not supported value: 0xFFFFFFFF')
nbsCohpmHistoricTable = MibTable((1, 3, 6, 1, 4, 1, 629, 242, 23, 3), )
if mibBuilder.loadTexts: nbsCohpmHistoricTable.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmHistoricTable.setDescription('All Coherent Performance Monitoring statistics for past\n        nbsCohpmHistoricInterval periods.')
nbsCohpmHistoricEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 242, 23, 3, 1), ).setIndexNames((0, "NBS-COHERENT-MIB", "nbsCohpmHistoricIfIndex"), (0, "NBS-COHERENT-MIB", "nbsCohpmHistoricInterval"), (0, "NBS-COHERENT-MIB", "nbsCohpmHistoricSample"))
if mibBuilder.loadTexts: nbsCohpmHistoricEntry.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmHistoricEntry.setDescription('Coherent Performance Monitoring statistics for a specific port/\n        interface and nbsCohpmHistoricInterval.')
nbsCohpmHistoricIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 23, 3, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCohpmHistoricIfIndex.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmHistoricIfIndex.setDescription('The MIB2 ifIndex')
nbsCohpmHistoricInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 23, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("quarterHour", 1), ("twentyfourHour", 2))))
if mibBuilder.loadTexts: nbsCohpmHistoricInterval.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmHistoricInterval.setDescription('Indicates the interval monitored')
nbsCohpmHistoricSample = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 23, 3, 1, 4), Integer32())
if mibBuilder.loadTexts: nbsCohpmHistoricSample.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmHistoricSample.setDescription('Indicates the sample number of this statistic.  The most\n        recent sample is numbered 1, the next previous 2, and so on\n        until the oldest sample.')
nbsCohpmHistoricDate = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 23, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCohpmHistoricDate.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmHistoricDate.setDescription('The date (UTC) interval began, represented by an eight\n        digit decimal number: yyyymmdd')
nbsCohpmHistoricTime = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 23, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCohpmHistoricTime.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmHistoricTime.setDescription('The time (UTC) interval began, represented by a six\n        digit decimal number: hhmmss')
nbsCohpmHistoricAveNetBERsig = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 23, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCohpmHistoricAveNetBERsig.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmHistoricAveNetBERsig.setDescription('The significand of the average network Bit Error Rate (BER),\n        which is calculated by:\n           nbsCohpmHistoricAveNetBERsig x 10^nbsCohpmHistoricAveNetBERexp')
nbsCohpmHistoricAveNetBERexp = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 23, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCohpmHistoricAveNetBERexp.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmHistoricAveNetBERexp.setDescription('The exponent of the average network Bit Error Rate (BER),\n        see nbsCohpmHistoricAveNetBERsig.\n\n        Not supported value: 0x80000000')
nbsCohpmHistoricMinNetBERsig = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 23, 3, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCohpmHistoricMinNetBERsig.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmHistoricMinNetBERsig.setDescription('The significand of the minimum network Bit Error Rate (BER),\n        which is calculated by:\n           nbsCohpmHistoricMinNetBERsig x 10^nbsCohpmHistoricMinNetBERexp')
nbsCohpmHistoricMinNetBERexp = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 23, 3, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCohpmHistoricMinNetBERexp.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmHistoricMinNetBERexp.setDescription('The exponent of the minimum network Bit Error Rate (BER),\n        see nbsCohpmHistoricMinNetBERsig.\n\n        Not supported value: 0x80000000')
nbsCohpmHistoricMaxNetBERsig = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 23, 3, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCohpmHistoricMaxNetBERsig.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmHistoricMaxNetBERsig.setDescription('The significand of the maximum network Bit Error Rate (BER),\n        which is calculated by:\n           nbsCohpmHistoricMaxNetBERsig x 10^nbsCohpmHistoricMaxNetBERexp')
nbsCohpmHistoricMaxNetBERexp = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 23, 3, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCohpmHistoricMaxNetBERexp.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmHistoricMaxNetBERexp.setDescription('The exponent of the maximum network Bit Error Rate (BER),\n        see nbsCohpmHistoricMaxNetBERsig.\n\n        Not supported value: 0x80000000')
nbsCohpmHistoricAveCD = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 23, 3, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCohpmHistoricAveCD.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmHistoricAveCD.setDescription('Average chromatic dispersion (CD) for the historic interval.\n        Unit measurement: 1 ps/nm\n\n        Not supported value: 0x80000000')
nbsCohpmHistoricMinCD = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 23, 3, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCohpmHistoricMinCD.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmHistoricMinCD.setDescription('Minimum chromatic dispersion (CD) for the historic interval.\n        Unit measurement: 1 ps/nm\n\n        Not supported value: 0x80000000')
nbsCohpmHistoricMaxCD = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 23, 3, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCohpmHistoricMaxCD.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmHistoricMaxCD.setDescription('Maximum chromatic dispersion (CD) for the historic interval.\n        Unit measurement: 1 ps/nm\n\n        Not supported value: 0x80000000')
nbsCohpmHistoricAveDGD = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 23, 3, 1, 30), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCohpmHistoricAveDGD.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmHistoricAveDGD.setDescription('Average differential group delay (DGD) for the historic interval.\n        Unit measurement: 1 ps\n\n        Not supported value: 0xFFFFFFFF')
nbsCohpmHistoricMinDGD = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 23, 3, 1, 33), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCohpmHistoricMinDGD.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmHistoricMinDGD.setDescription('Minimum differential group delay (DGD) for the historic interval.\n        Unit measurement: 1 ps\n\n        Not supported value: 0xFFFFFFFF')
nbsCohpmHistoricMaxDGD = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 23, 3, 1, 36), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCohpmHistoricMaxDGD.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmHistoricMaxDGD.setDescription('Maximum differential group delay (DGD) for the historic interval.\n        Unit measurement: 1 ps\n\n        Not supported value: 0xFFFFFFFF')
nbsCohpmHistoricAveQ = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 23, 3, 1, 40), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCohpmHistoricAveQ.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmHistoricAveQ.setDescription('Average Q for the historic interval.\n        Unit measurement: 0.1 dB\n\n        Not supported value: 0xFFFFFFFF')
nbsCohpmHistoricMinQ = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 23, 3, 1, 43), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCohpmHistoricMinQ.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmHistoricMinQ.setDescription('Minimum Q for the historic interval.\n        Unit measurement: 0.1 dB\n\n        Not supported value: 0xFFFFFFFF')
nbsCohpmHistoricMaxQ = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 23, 3, 1, 46), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCohpmHistoricMaxQ.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmHistoricMaxQ.setDescription('Maximum Q for the historic interval.\n        Unit measurement: 0.1 dB\n\n        Not supported value: 0xFFFFFFFF')
nbsCohpmHistoricAveCFO = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 23, 3, 1, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCohpmHistoricAveCFO.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmHistoricAveCFO.setDescription('Average carrier frequency offset (CFO) for the historic interval.\n        Unit measurement: 1 MHz\n\n        Not supported value: 0x80000000')
nbsCohpmHistoricMinCFO = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 23, 3, 1, 53), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCohpmHistoricMinCFO.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmHistoricMinCFO.setDescription('Minimum carrier frequency offset (CFO) for the historic interval.\n        Unit measurement: 1 MHz\n\n        Not supported value: 0x80000000')
nbsCohpmHistoricMaxCFO = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 23, 3, 1, 56), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCohpmHistoricMaxCFO.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmHistoricMaxCFO.setDescription('Maximum carrier frequency offset (CFO) for the historic interval.\n        Unit measurement: 1 MHz\n\n        Not supported value: 0x80000000')
nbsCohpmHistoricAveOSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 23, 3, 1, 60), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCohpmHistoricAveOSNR.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmHistoricAveOSNR.setDescription('Average optical signal-to-noise ratio (OSNR) for the historic interval.\n        Unit measurement: 0.1 dB\n\n        Not supported value: 0xFFFFFFFF')
nbsCohpmHistoricMinOSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 23, 3, 1, 63), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCohpmHistoricMinOSNR.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmHistoricMinOSNR.setDescription('Minimum optical signal-to-noise ratio (OSNR) for the historic interval.\n        Unit measurement: 0.1 dB\n\n        Not supported value: 0xFFFFFFFF')
nbsCohpmHistoricMaxOSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 23, 3, 1, 66), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCohpmHistoricMaxOSNR.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmHistoricMaxOSNR.setDescription('Maximum optical signal-to-noise ratio (OSNR) for the historic interval.\n        Unit measurement: 0.1 dB\n\n        Not supported value: 0xFFFFFFFF')
nbsCohpmHistoricAveSNRx = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 23, 3, 1, 70), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCohpmHistoricAveSNRx.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmHistoricAveSNRx.setDescription('Average signal-to-noise ratio of X Polarization (SNRx) for the\n        historic interval.\n        Unit measurement: 0.1 dB\n\n        Not supported value: 0xFFFFFFFF')
nbsCohpmHistoricMinSNRx = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 23, 3, 1, 73), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCohpmHistoricMinSNRx.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmHistoricMinSNRx.setDescription('Minimum signal-to-noise ratio of X Polarization (SNRx) for the\n        historic interval.\n        Unit measurement: 0.1 dB\n\n        Not supported value: 0xFFFFFFFF')
nbsCohpmHistoricMaxSNRx = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 23, 3, 1, 76), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCohpmHistoricMaxSNRx.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmHistoricMaxSNRx.setDescription('Maximum signal-to-noise ratio of X Polarization (SNRx) for the\n        historic interval.\n        Unit measurement: 0.1 dB\n\n        Not supported value: 0xFFFFFFFF')
nbsCohpmHistoricAveSNRy = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 23, 3, 1, 80), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCohpmHistoricAveSNRy.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmHistoricAveSNRy.setDescription('Average signal-to-noise ratio of Y Polarization (SNRy) for the\n        historic interval.\n        Unit measurement: 0.1 dB\n\n        Not supported value: 0xFFFFFFFF')
nbsCohpmHistoricMinSNRy = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 23, 3, 1, 83), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCohpmHistoricMinSNRy.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmHistoricMinSNRy.setDescription('Minimum signal-to-noise ratio of Y Polarization (SNRy) for the\n        historic interval.\n        Unit measurement: 0.1 dB\n\n        Not supported value: 0xFFFFFFFF')
nbsCohpmHistoricMaxSNRy = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 23, 3, 1, 86), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCohpmHistoricMaxSNRy.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmHistoricMaxSNRy.setDescription('Maximum signal-to-noise ratio of Y Polarization (SNRy) for the\n        historic interval.\n        Unit measurement: 0.1 dB\n\n        Not supported value: 0xFFFFFFFF')
nbsCohpmHistoricAvePDL = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 23, 3, 1, 90), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCohpmHistoricAvePDL.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmHistoricAvePDL.setDescription('Average Polarization Dependent Loss (PDL) for the historic interval.\n        Unit measurement: 0.1 dB\n\n        Not supported value: 0xFFFFFFFF')
nbsCohpmHistoricMinPDL = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 23, 3, 1, 93), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCohpmHistoricMinPDL.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmHistoricMinPDL.setDescription('Minimum polarization dependent loss (PDL) for the historic interval.\n        Unit measurement: 0.1 dB\n\n        Not supported value: 0xFFFFFFFF')
nbsCohpmHistoricMaxPDL = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 23, 3, 1, 96), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCohpmHistoricMaxPDL.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmHistoricMaxPDL.setDescription('Maximum polarization dependent loss (PDL) for the historic interval.\n        Unit measurement: 0.1 dB\n\n        Not supported value: 0xFFFFFFFF')
nbsCohpmHistoricAveSOP = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 23, 3, 1, 100), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCohpmHistoricAveSOP.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmHistoricAveSOP.setDescription('Average state of polarization (SOP) for the historic interval.\n        Unit measurement: 1 rad/s\n\n        Not supported value: 0xFFFFFFFF')
nbsCohpmHistoricMinSOP = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 23, 3, 1, 103), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCohpmHistoricMinSOP.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmHistoricMinSOP.setDescription('Minimum state of polarization (SOP) for the historic interval.\n        Unit measurement: 1 rad/s\n\n        Not supported value: 0xFFFFFFFF')
nbsCohpmHistoricMaxSOP = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 23, 3, 1, 106), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCohpmHistoricMaxSOP.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmHistoricMaxSOP.setDescription('Maximum state of polarization (SOP) for the historic interval.\n        Unit measurement: 1 rad/s\n\n        Not supported value: 0xFFFFFFFF')
nbsCohpmRunningTable = MibTable((1, 3, 6, 1, 4, 1, 629, 242, 24, 3), )
if mibBuilder.loadTexts: nbsCohpmRunningTable.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmRunningTable.setDescription('All Coherent Performance Monitoring running statistics since port\n        configuration, i.e. boot-up or protocol/FEC/preference change.')
nbsCohpmRunningEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 242, 24, 3, 1), ).setIndexNames((0, "NBS-COHERENT-MIB", "nbsCohpmRunningIfIndex"))
if mibBuilder.loadTexts: nbsCohpmRunningEntry.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmRunningEntry.setDescription('Coherent Performance Monitoring running statistics for a specific\n        port/interface.')
nbsCohpmRunningIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 24, 3, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCohpmRunningIfIndex.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmRunningIfIndex.setDescription('The MIB2 ifIndex')
nbsCohpmRunningDate = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 24, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCohpmRunningDate.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmRunningDate.setDescription('The date (UTC) of port configuration, represented by an\n        eight digit decimal number: yyyymmdd')
nbsCohpmRunningTime = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 24, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCohpmRunningTime.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmRunningTime.setDescription('The time (UTC) of port configuration, represented by a\n        six digit decimal number: hhmmss')
nbsCohpmRunningAveNetBERsig = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 24, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCohpmRunningAveNetBERsig.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmRunningAveNetBERsig.setDescription('The significand of the average network Bit Error Rate (BER),\n        which is calculated by:\n           nbsCohpmRunningAveNetBERsig x 10^nbsCohpmRunningAveNetBERexp')
nbsCohpmRunningAveNetBERexp = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 24, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCohpmRunningAveNetBERexp.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmRunningAveNetBERexp.setDescription('The exponent of the average network Bit Error Rate (BER),\n        see nbsCohpmRunningAveNetBERsig.\n\n        Not supported value: 0x80000000')
nbsCohpmRunningMinNetBERsig = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 24, 3, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCohpmRunningMinNetBERsig.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmRunningMinNetBERsig.setDescription('The significand of the minimum network Bit Error Rate (BER),\n        which is calculated by:\n           nbsCohpmRunningMinNetBERsig x 10^nbsCohpmRunningMinNetBERexp')
nbsCohpmRunningMinNetBERexp = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 24, 3, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCohpmRunningMinNetBERexp.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmRunningMinNetBERexp.setDescription('The exponent of the minimum network Bit Error Rate (BER),\n        see nbsCohpmRunningMinNetBERsig.\n\n        Not supported value: 0x80000000')
nbsCohpmRunningMaxNetBERsig = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 24, 3, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCohpmRunningMaxNetBERsig.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmRunningMaxNetBERsig.setDescription('The significand of the maximum network Bit Error Rate (BER),\n        which is calculated by:\n           nbsCohpmRunningMaxNetBERsig x 10^nbsCohpmRunningMaxNetBERexp')
nbsCohpmRunningMaxNetBERexp = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 24, 3, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCohpmRunningMaxNetBERexp.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmRunningMaxNetBERexp.setDescription('The exponent of the maximum network Bit Error Rate (BER),\n        see nbsCohpmRunningMaxNetBERsig.\n\n        Not supported value: 0x80000000')
nbsCohpmRunningAveCD = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 24, 3, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCohpmRunningAveCD.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmRunningAveCD.setDescription('Average chromatic dispersion (CD) since port configuration.\n        Unit measurement: 1 ps/nm\n\n        Not supported value: 0x80000000')
nbsCohpmRunningMinCD = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 24, 3, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCohpmRunningMinCD.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmRunningMinCD.setDescription('Minimum chromatic dispersion (CD) since port configuration.\n        Unit measurement: 1 ps/nm\n\n        Not supported value: 0x80000000')
nbsCohpmRunningMaxCD = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 24, 3, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCohpmRunningMaxCD.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmRunningMaxCD.setDescription('Maximum chromatic dispersion (CD) since port configuration.\n        Unit measurement: 1 ps/nm\n\n        Not supported value: 0x80000000')
nbsCohpmRunningAveDGD = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 24, 3, 1, 30), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCohpmRunningAveDGD.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmRunningAveDGD.setDescription('Average differential group delay (DGD) since port configuration.\n        Unit measurement: 1 ps\n\n        Not supported value: 0xFFFFFFFF')
nbsCohpmRunningMinDGD = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 24, 3, 1, 33), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCohpmRunningMinDGD.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmRunningMinDGD.setDescription('Minimum differential group delay (DGD) since port configuration.\n        Unit measurement: 1 ps\n\n        Not supported value: 0xFFFFFFFF')
nbsCohpmRunningMaxDGD = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 24, 3, 1, 36), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCohpmRunningMaxDGD.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmRunningMaxDGD.setDescription('Maximum differential group delay (DGD) since port configuration.\n        Unit measurement: 1 ps\n\n        Not supported value: 0xFFFFFFFF')
nbsCohpmRunningAveQ = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 24, 3, 1, 40), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCohpmRunningAveQ.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmRunningAveQ.setDescription('Average Q since port configuration.\n        Unit measurement: 0.1 dB\n\n        Not supported value: 0xFFFFFFFF')
nbsCohpmRunningMinQ = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 24, 3, 1, 43), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCohpmRunningMinQ.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmRunningMinQ.setDescription('Minimum Q since port configuration.\n        Unit measurement: 0.1 dB\n\n        Not supported value: 0xFFFFFFFF')
nbsCohpmRunningMaxQ = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 24, 3, 1, 46), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCohpmRunningMaxQ.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmRunningMaxQ.setDescription('Maximum Q since port configuration.\n        Unit measurement: 0.1 dB\n\n        Not supported value: 0xFFFFFFFF')
nbsCohpmRunningAveCFO = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 24, 3, 1, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCohpmRunningAveCFO.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmRunningAveCFO.setDescription('Average carrier frequency offset (CFO) since port configuration.\n        Unit measurement: 1 MHz\n\n        Not supported value: 0x80000000')
nbsCohpmRunningMinCFO = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 24, 3, 1, 53), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCohpmRunningMinCFO.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmRunningMinCFO.setDescription('Minimum carrier frequency offset (CFO) since port configuration.\n        Unit measurement: 1 MHz\n\n        Not supported value: 0x80000000')
nbsCohpmRunningMaxCFO = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 24, 3, 1, 56), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCohpmRunningMaxCFO.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmRunningMaxCFO.setDescription('Maximum carrier frequency offset (CFO) since port configuration.\n        Unit measurement: 1 MHz\n\n        Not supported value: 0x80000000')
nbsCohpmRunningAveOSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 24, 3, 1, 60), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCohpmRunningAveOSNR.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmRunningAveOSNR.setDescription('Average optical signal-to-noise ratio (OSNR) since port configuration.\n        Unit measurement: 0.1 dB\n\n        Not supported value: 0xFFFFFFFF')
nbsCohpmRunningMinOSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 24, 3, 1, 63), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCohpmRunningMinOSNR.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmRunningMinOSNR.setDescription('Minimum optical signal-to-noise ratio (OSNR) since port configuration.\n        Unit measurement: 0.1 dB\n\n        Not supported value: 0xFFFFFFFF')
nbsCohpmRunningMaxOSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 24, 3, 1, 66), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCohpmRunningMaxOSNR.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmRunningMaxOSNR.setDescription('Maximum optical signal-to-noise ratio (OSNR) since port configuration.\n        Unit measurement: 0.1 dB\n\n        Not supported value: 0xFFFFFFFF')
nbsCohpmRunningAveSNRx = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 24, 3, 1, 70), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCohpmRunningAveSNRx.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmRunningAveSNRx.setDescription('Average signal-to-noise ratio of X Polarization (SNRx) since\n        port configuration.\n        Unit measurement: 0.1 dB\n\n        Not supported value: 0xFFFFFFFF')
nbsCohpmRunningMinSNRx = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 24, 3, 1, 73), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCohpmRunningMinSNRx.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmRunningMinSNRx.setDescription('Minimum signal-to-noise ratio of X Polarization (SNRx) since\n        port configuration.\n        Unit measurement: 0.1 dB\n\n        Not supported value: 0xFFFFFFFF')
nbsCohpmRunningMaxSNRx = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 24, 3, 1, 76), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCohpmRunningMaxSNRx.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmRunningMaxSNRx.setDescription('Maximum signal-to-noise ratio of X Polarization (SNRx) since\n        port configuration.\n        Unit measurement: 0.1 dB\n\n        Not supported value: 0xFFFFFFFF')
nbsCohpmRunningAveSNRy = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 24, 3, 1, 80), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCohpmRunningAveSNRy.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmRunningAveSNRy.setDescription('Average signal-to-noise ratio of Y Polarization (SNRy) since\n        port configuration.\n        Unit measurement: 0.1 dB\n\n        Not supported value: 0xFFFFFFFF')
nbsCohpmRunningMinSNRy = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 24, 3, 1, 83), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCohpmRunningMinSNRy.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmRunningMinSNRy.setDescription('Minimum signal-to-noise ratio of Y Polarization (SNRy) since\n        port configuration.\n        Unit measurement: 0.1 dB\n\n        Not supported value: 0xFFFFFFFF')
nbsCohpmRunningMaxSNRy = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 24, 3, 1, 86), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCohpmRunningMaxSNRy.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmRunningMaxSNRy.setDescription('Maximum signal-to-noise ratio of Y Polarization (SNRy) since\n        port configuration.\n        Unit measurement: 0.1 dB\n\n        Not supported value: 0xFFFFFFFF')
nbsCohpmRunningAvePDL = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 24, 3, 1, 90), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCohpmRunningAvePDL.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmRunningAvePDL.setDescription('Average polarization dependent loss (PDL) since port configuration.\n        Unit measurement: 0.1 dB\n\n        Not supported value: 0xFFFFFFFF')
nbsCohpmRunningMinPDL = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 24, 3, 1, 93), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCohpmRunningMinPDL.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmRunningMinPDL.setDescription('Minimum polarization dependent loss (PDL) since port configuration.\n        Unit measurement: 0.1 dB\n\n        Not supported value: 0xFFFFFFFF')
nbsCohpmRunningMaxPDL = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 24, 3, 1, 96), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCohpmRunningMaxPDL.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmRunningMaxPDL.setDescription('Maximum polarization dependent loss (PDL) since port configuration.\n        Unit measurement: 0.1 dB\n\n        Not supported value: 0xFFFFFFFF')
nbsCohpmRunningAveSOP = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 24, 3, 1, 100), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCohpmRunningAveSOP.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmRunningAveSOP.setDescription('Average state of polarization (SOP) since port configuration.\n        Unit measurement: 1 rad/s\n\n        Not supported value: 0xFFFFFFFF')
nbsCohpmRunningMinSOP = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 24, 3, 1, 103), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCohpmRunningMinSOP.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmRunningMinSOP.setDescription('Minimum state of polarization (SOP) since port configuration.\n        Unit measurement: 1 rad/s\n\n        Not supported value: 0xFFFFFFFF')
nbsCohpmRunningMaxSOP = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 24, 3, 1, 106), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCohpmRunningMaxSOP.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmRunningMaxSOP.setDescription('Maximum state of polarization (SOP) since port configuration.\n        Unit measurement: 1 rad/s\n\n        Not supported value: 0xFFFFFFFF')
nbsCoherentStatsTable = MibTable((1, 3, 6, 1, 4, 1, 629, 242, 90, 2), )
if mibBuilder.loadTexts: nbsCoherentStatsTable.setStatus('current')
if mibBuilder.loadTexts: nbsCoherentStatsTable.setDescription('Coherent operating information and statistics managed per user\n        discretion. This monitoring may be started, stopped, and cleared as\n        desired without affecting the normal performance monitoring activity.')
nbsCoherentStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 242, 90, 2, 1), ).setIndexNames((0, "NBS-COHERENT-MIB", "nbsCoherentStatsIfIndex"))
if mibBuilder.loadTexts: nbsCoherentStatsEntry.setStatus('current')
if mibBuilder.loadTexts: nbsCoherentStatsEntry.setDescription('User-controlled Coherent operating information and statistics for a\n        specific port/interface.')
nbsCoherentStatsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 90, 2, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCoherentStatsIfIndex.setStatus('current')
if mibBuilder.loadTexts: nbsCoherentStatsIfIndex.setDescription('The MIB2 ifIndex')
nbsCoherentStatsDate = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 90, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCoherentStatsDate.setStatus('current')
if mibBuilder.loadTexts: nbsCoherentStatsDate.setDescription('The date (UTC) Coherent statistics collection began (was cleared),\n        represented by an eight digit decimal number: yyyymmdd')
nbsCoherentStatsTime = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 90, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCoherentStatsTime.setStatus('current')
if mibBuilder.loadTexts: nbsCoherentStatsTime.setDescription('The time (UTC) Coherent statistics collection began (was cleared),\n        represented by a six digit decimal number: hhmmss')
nbsCoherentStatsSpan = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 90, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCoherentStatsSpan.setStatus('current')
if mibBuilder.loadTexts: nbsCoherentStatsSpan.setDescription('The amount of time Coherent statistics collection has been underway\n        since nbsCoherentStatsDate and nbsCoherentStatsTime, or if stopped,\n        the duration of the prior collection.\n        Unit measurement: 0.1 s')
nbsCoherentStatsState = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 90, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notSupported", 1), ("counting", 2), ("clearing", 3), ("stopped", 4), ("resumed", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsCoherentStatsState.setStatus('current')
if mibBuilder.loadTexts: nbsCoherentStatsState.setDescription("Writing 'stopped' to this object stops (pauses) Coherent statistics\n        collection. Removing the Coherent optic from this port automatically\n        sets this object to 'stopped'.\n\n        Writing 'counting' to this object starts (resumes) Coherent statistics\n        collection if a Coherent optic is inserted in this port.\n\n        Writing 'clearing' to this object clears all statistical counters.")
nbsCoherentStatsAveNetBERsig = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 90, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCoherentStatsAveNetBERsig.setStatus('current')
if mibBuilder.loadTexts: nbsCoherentStatsAveNetBERsig.setDescription('The significand of the average network Bit Error Rate (BER),\n        which is calculated by:\n           nbsCoherentStatsAveNetBERsig x 10^nbsCoherentStatsAveNetBERexp')
nbsCoherentStatsAveNetBERexp = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 90, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCoherentStatsAveNetBERexp.setStatus('current')
if mibBuilder.loadTexts: nbsCoherentStatsAveNetBERexp.setDescription('The exponent of the average network Bit Error Rate (BER),\n        see nbsCoherentStatsAveNetBERsig.\n\n        Not supported value: 0x80000000')
nbsCoherentStatsMinNetBERsig = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 90, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCoherentStatsMinNetBERsig.setStatus('current')
if mibBuilder.loadTexts: nbsCoherentStatsMinNetBERsig.setDescription('The significand of the minimum network Bit Error Rate (BER),\n        which is calculated by:\n           nbsCoherentStatsMinNetBERsig x 10^nbsCoherentStatsMinNetBERexp')
nbsCoherentStatsMinNetBERexp = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 90, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCoherentStatsMinNetBERexp.setStatus('current')
if mibBuilder.loadTexts: nbsCoherentStatsMinNetBERexp.setDescription('The exponent of the minimum network Bit Error Rate (BER),\n        see nbsCoherentStatsMinNetBERsig.\n\n        Not supported value: 0x80000000')
nbsCoherentStatsMaxNetBERsig = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 90, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCoherentStatsMaxNetBERsig.setStatus('current')
if mibBuilder.loadTexts: nbsCoherentStatsMaxNetBERsig.setDescription('The significand of the maximum network Bit Error Rate (BER),\n        which is calculated by:\n           nbsCoherentStatsMaxNetBERsig x 10^nbsCoherentStatsMaxNetBERexp')
nbsCoherentStatsMaxNetBERexp = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 90, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCoherentStatsMaxNetBERexp.setStatus('current')
if mibBuilder.loadTexts: nbsCoherentStatsMaxNetBERexp.setDescription('The exponent of the maximum network Bit Error Rate (BER),\n        see nbsCoherentStatsMaxNetBERsig.\n\n        Not supported value: 0x80000000')
nbsCoherentStatsAveCD = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 90, 2, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCoherentStatsAveCD.setStatus('current')
if mibBuilder.loadTexts: nbsCoherentStatsAveCD.setDescription('Average chromatic dispersion (CD) observed.\n        Unit measurement: 1 ps/nm\n\n        Not supported value: 0x80000000')
nbsCoherentStatsMinCD = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 90, 2, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCoherentStatsMinCD.setStatus('current')
if mibBuilder.loadTexts: nbsCoherentStatsMinCD.setDescription('Minimum chromatic dispersion (CD) observed.\n        Unit measurement: 1 ps/nm\n\n        Not supported value: 0x80000000')
nbsCoherentStatsMaxCD = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 90, 2, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCoherentStatsMaxCD.setStatus('current')
if mibBuilder.loadTexts: nbsCoherentStatsMaxCD.setDescription('Maximum chromatic dispersion (CD) observed.\n        Unit measurement: 1 ps/nm\n\n        Not supported value: 0x80000000')
nbsCoherentStatsAveDGD = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 90, 2, 1, 30), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCoherentStatsAveDGD.setStatus('current')
if mibBuilder.loadTexts: nbsCoherentStatsAveDGD.setDescription('Average differential group delay (DGD) observed.\n        Unit measurement: 1 ps\n\n        Not supported value: 0xFFFFFFFF')
nbsCoherentStatsMinDGD = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 90, 2, 1, 33), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCoherentStatsMinDGD.setStatus('current')
if mibBuilder.loadTexts: nbsCoherentStatsMinDGD.setDescription('Minimum differential group delay (DGD) observed.\n        Unit measurement: 1 ps\n\n        Not supported value: 0xFFFFFFFF')
nbsCoherentStatsMaxDGD = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 90, 2, 1, 36), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCoherentStatsMaxDGD.setStatus('current')
if mibBuilder.loadTexts: nbsCoherentStatsMaxDGD.setDescription('Maximum differential group delay (DGD) observed.\n        Unit measurement: 1 ps\n\n        Not supported value: 0xFFFFFFFF')
nbsCoherentStatsAveQ = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 90, 2, 1, 40), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCoherentStatsAveQ.setStatus('current')
if mibBuilder.loadTexts: nbsCoherentStatsAveQ.setDescription('Average Q observed.\n        Unit measurement: 0.1 dB\n\n        Not supported value: 0xFFFFFFFF')
nbsCoherentStatsMinQ = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 90, 2, 1, 43), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCoherentStatsMinQ.setStatus('current')
if mibBuilder.loadTexts: nbsCoherentStatsMinQ.setDescription('Minimum Q observed.\n        Unit measurement: 0.1 dB\n\n        Not supported value: 0xFFFFFFFF')
nbsCoherentStatsMaxQ = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 90, 2, 1, 46), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCoherentStatsMaxQ.setStatus('current')
if mibBuilder.loadTexts: nbsCoherentStatsMaxQ.setDescription('Maximum Q observed.\n        Unit measurement: 0.1 dB\n\n        Not supported value: 0xFFFFFFFF')
nbsCoherentStatsAveCFO = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 90, 2, 1, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCoherentStatsAveCFO.setStatus('current')
if mibBuilder.loadTexts: nbsCoherentStatsAveCFO.setDescription('Average carrier frequency offset (CFO) observed.\n        Unit measurement: 1 MHz\n\n        Not supported value: 0x80000000')
nbsCoherentStatsMinCFO = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 90, 2, 1, 53), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCoherentStatsMinCFO.setStatus('current')
if mibBuilder.loadTexts: nbsCoherentStatsMinCFO.setDescription('Minimum carrier frequency offset (CFO) observed.\n        Unit measurement: 1 MHz\n\n        Not supported value: 0x80000000')
nbsCoherentStatsMaxCFO = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 90, 2, 1, 56), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCoherentStatsMaxCFO.setStatus('current')
if mibBuilder.loadTexts: nbsCoherentStatsMaxCFO.setDescription('Maximum carrier frequency offset (CFO) observed.\n        Unit measurement: 1 MHz\n\n        Not supported value: 0x80000000')
nbsCoherentStatsAveOSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 90, 2, 1, 60), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCoherentStatsAveOSNR.setStatus('current')
if mibBuilder.loadTexts: nbsCoherentStatsAveOSNR.setDescription('Average optical signal-to-noise ratio (OSNR) observed.\n        Unit measurement: 0.1 dB\n\n        Not supported value: 0xFFFFFFFF')
nbsCoherentStatsMinOSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 90, 2, 1, 63), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCoherentStatsMinOSNR.setStatus('current')
if mibBuilder.loadTexts: nbsCoherentStatsMinOSNR.setDescription('Minimum optical signal-to-noise ratio (OSNR) observed.\n        Unit measurement: 0.1 dB\n\n        Not supported value: 0xFFFFFFFF')
nbsCoherentStatsMaxOSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 90, 2, 1, 66), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCoherentStatsMaxOSNR.setStatus('current')
if mibBuilder.loadTexts: nbsCoherentStatsMaxOSNR.setDescription('Maximum optical signal-to-noise ratio (OSNR) observed.\n        Unit measurement: 0.1 dB\n\n        Not supported value: 0xFFFFFFFF')
nbsCoherentStatsAveSNRx = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 90, 2, 1, 70), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCoherentStatsAveSNRx.setStatus('current')
if mibBuilder.loadTexts: nbsCoherentStatsAveSNRx.setDescription('Average signal-to-noise ratio of X Polarization (SNRx) observed.\n        Unit measurement: 0.1 dB\n\n        Not supported value: 0xFFFFFFFF')
nbsCoherentStatsMinSNRx = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 90, 2, 1, 73), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCoherentStatsMinSNRx.setStatus('current')
if mibBuilder.loadTexts: nbsCoherentStatsMinSNRx.setDescription('Minimum signal-to-noise ratio of X Polarization (SNRx) observed.\n        Unit measurement: 0.1 dB\n\n        Not supported value: 0xFFFFFFFF')
nbsCoherentStatsMaxSNRx = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 90, 2, 1, 76), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCoherentStatsMaxSNRx.setStatus('current')
if mibBuilder.loadTexts: nbsCoherentStatsMaxSNRx.setDescription('Maximum signal-to-noise ratio of X Polarization (SNRx) observed.\n        Unit measurement: 0.1 dB\n\n        Not supported value: 0xFFFFFFFF')
nbsCoherentStatsAveSNRy = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 90, 2, 1, 80), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCoherentStatsAveSNRy.setStatus('current')
if mibBuilder.loadTexts: nbsCoherentStatsAveSNRy.setDescription('Average signal-to-noise ratio of Y Polarization (SNRy) observed.\n        Unit measurement: 0.1 dB\n\n        Not supported value: 0xFFFFFFFF')
nbsCoherentStatsMinSNRy = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 90, 2, 1, 83), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCoherentStatsMinSNRy.setStatus('current')
if mibBuilder.loadTexts: nbsCoherentStatsMinSNRy.setDescription('Minimum signal-to-noise ratio of Y Polarization (SNRy) observed.\n        Unit measurement: 0.1 dB\n\n        Not supported value: 0xFFFFFFFF')
nbsCoherentStatsMaxSNRy = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 90, 2, 1, 86), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCoherentStatsMaxSNRy.setStatus('current')
if mibBuilder.loadTexts: nbsCoherentStatsMaxSNRy.setDescription('Maximum signal-to-noise ratio of Y Polarization (SNRy) observed.\n        Unit measurement: 0.1 dB\n\n        Not supported value: 0xFFFFFFFF')
nbsCoherentStatsAvePDL = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 90, 2, 1, 90), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCoherentStatsAvePDL.setStatus('current')
if mibBuilder.loadTexts: nbsCoherentStatsAvePDL.setDescription('Average polarization dependent loss (PDL) observed.\n        Unit measurement: 0.1 dB\n\n        Not supported value: 0xFFFFFFFF')
nbsCoherentStatsMinPDL = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 90, 2, 1, 93), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCoherentStatsMinPDL.setStatus('current')
if mibBuilder.loadTexts: nbsCoherentStatsMinPDL.setDescription('Minimum polarization dependent loss (PDL) observed.\n        Unit measurement: 0.1 dB\n\n        Not supported value: 0xFFFFFFFF')
nbsCoherentStatsMaxPDL = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 90, 2, 1, 96), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCoherentStatsMaxPDL.setStatus('current')
if mibBuilder.loadTexts: nbsCoherentStatsMaxPDL.setDescription('Maximum polarization dependent loss (PDL) observed.\n        Unit measurement: 0.1 dB\n\n        Not supported value: 0xFFFFFFFF')
nbsCoherentStatsAveSOP = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 90, 2, 1, 100), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCoherentStatsAveSOP.setStatus('current')
if mibBuilder.loadTexts: nbsCoherentStatsAveSOP.setDescription('Average state of polarization (SOP) observed.\n        Unit measurement: 1 rad/s\n\n        Not supported value: 0xFFFFFFFF')
nbsCoherentStatsMinSOP = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 90, 2, 1, 103), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCoherentStatsMinSOP.setStatus('current')
if mibBuilder.loadTexts: nbsCoherentStatsMinSOP.setDescription('Minimum state of polarization (SOP) observed.\n        Unit measurement: 1 rad/s\n\n        Not supported value: 0xFFFFFFFF')
nbsCoherentStatsMaxSOP = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 242, 90, 2, 1, 106), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCoherentStatsMaxSOP.setStatus('current')
if mibBuilder.loadTexts: nbsCoherentStatsMaxSOP.setDescription('Maximum state of polarization (SOP) observed.\n        Unit measurement: 1 rad/s\n\n        Not supported value: 0xFFFFFFFF')
nbsCohpmTraps = ObjectIdentity((1, 3, 6, 1, 4, 1, 629, 242, 100, 0))
if mibBuilder.loadTexts: nbsCohpmTraps.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmTraps.setDescription('Threshold crossing Traps or Notifications')
nbsCohpmTrapsAveBER = NotificationType((1, 3, 6, 1, 4, 1, 629, 242, 100, 0, 11)).setObjects(("NBS-COHERENT-MIB", "nbsCohpmCurrentIfIndex"), ("NBS-COHERENT-MIB", "nbsCohpmCurrentInterval"), ("NBS-COHERENT-MIB", "nbsCohpmCurrentAveNetBERsig"), ("NBS-COHERENT-MIB", "nbsCohpmCurrentAveNetBERexp"))
if mibBuilder.loadTexts: nbsCohpmTrapsAveBER.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmTrapsAveBER.setDescription('Sent on the first occurrence in a current interval when the average\n        bit error rate (BER) meets/exceeds its defined threshold\n        (nbsCohpmThresholdsAveNetBERsig, nbsCohpmCurrentAveNetBERexp).')
nbsCohpmTrapsMinBER = NotificationType((1, 3, 6, 1, 4, 1, 629, 242, 100, 0, 14)).setObjects(("NBS-COHERENT-MIB", "nbsCohpmCurrentIfIndex"), ("NBS-COHERENT-MIB", "nbsCohpmCurrentInterval"), ("NBS-COHERENT-MIB", "nbsCohpmCurrentMinNetBERsig"), ("NBS-COHERENT-MIB", "nbsCohpmCurrentMinNetBERexp"))
if mibBuilder.loadTexts: nbsCohpmTrapsMinBER.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmTrapsMinBER.setDescription('Sent on the first occurrence in a current interval when the minimum\n        bit error rate (BER) meets/is below its defined threshold\n        (nbsCohpmThresholdsMinNetBERsig, nbsCohpmCurrentMinNetBERexp).')
nbsCohpmTrapsMaxBER = NotificationType((1, 3, 6, 1, 4, 1, 629, 242, 100, 0, 17)).setObjects(("NBS-COHERENT-MIB", "nbsCohpmCurrentIfIndex"), ("NBS-COHERENT-MIB", "nbsCohpmCurrentInterval"), ("NBS-COHERENT-MIB", "nbsCohpmCurrentMaxNetBERsig"), ("NBS-COHERENT-MIB", "nbsCohpmCurrentMaxNetBERexp"))
if mibBuilder.loadTexts: nbsCohpmTrapsMaxBER.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmTrapsMaxBER.setDescription('Sent on the first occurrence in a current interval when the maximum\n        bit error rate (BER) meets/exceeds its defined threshold\n        (nbsCohpmThresholdsMaxNetBERsig, nbsCohpmCurrentMaxNetBERexp).')
nbsCohpmTrapsAveCD = NotificationType((1, 3, 6, 1, 4, 1, 629, 242, 100, 0, 20)).setObjects(("NBS-COHERENT-MIB", "nbsCohpmCurrentIfIndex"), ("NBS-COHERENT-MIB", "nbsCohpmCurrentInterval"), ("NBS-COHERENT-MIB", "nbsCohpmCurrentAveCD"))
if mibBuilder.loadTexts: nbsCohpmTrapsAveCD.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmTrapsAveCD.setDescription('Sent on the first occurrence in a current interval when the average\n        chromatic dispersion (CD) meets/exceeds its defined threshold\n        (nbsCohpmThresholdsAveCD).')
nbsCohpmTrapsMinCD = NotificationType((1, 3, 6, 1, 4, 1, 629, 242, 100, 0, 23)).setObjects(("NBS-COHERENT-MIB", "nbsCohpmCurrentIfIndex"), ("NBS-COHERENT-MIB", "nbsCohpmCurrentInterval"), ("NBS-COHERENT-MIB", "nbsCohpmCurrentMinCD"))
if mibBuilder.loadTexts: nbsCohpmTrapsMinCD.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmTrapsMinCD.setDescription('Sent on the first occurrence in a current interval when the minimum\n        chromatic dispersion (CD) meets/is below its defined threshold\n        (nbsCohpmThresholdsMinCD).')
nbsCohpmTrapsMaxCD = NotificationType((1, 3, 6, 1, 4, 1, 629, 242, 100, 0, 26)).setObjects(("NBS-COHERENT-MIB", "nbsCohpmCurrentIfIndex"), ("NBS-COHERENT-MIB", "nbsCohpmCurrentInterval"), ("NBS-COHERENT-MIB", "nbsCohpmCurrentMaxCD"))
if mibBuilder.loadTexts: nbsCohpmTrapsMaxCD.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmTrapsMaxCD.setDescription('Sent on the first occurrence in a current interval when the maximum\n        chromatic dispersion (CD) meets/exceeds its defined threshold\n        (nbsCohpmThresholdsMaxCD).')
nbsCohpmTrapsAveDGD = NotificationType((1, 3, 6, 1, 4, 1, 629, 242, 100, 0, 30)).setObjects(("NBS-COHERENT-MIB", "nbsCohpmCurrentIfIndex"), ("NBS-COHERENT-MIB", "nbsCohpmCurrentInterval"), ("NBS-COHERENT-MIB", "nbsCohpmCurrentAveDGD"))
if mibBuilder.loadTexts: nbsCohpmTrapsAveDGD.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmTrapsAveDGD.setDescription('Sent on the first occurrence in a current interval when the average\n        differential group delay (DGD) meets/exceeds its defined threshold\n        (nbsCohpmThresholdsAveDGD).')
nbsCohpmTrapsMinDGD = NotificationType((1, 3, 6, 1, 4, 1, 629, 242, 100, 0, 33)).setObjects(("NBS-COHERENT-MIB", "nbsCohpmCurrentIfIndex"), ("NBS-COHERENT-MIB", "nbsCohpmCurrentInterval"), ("NBS-COHERENT-MIB", "nbsCohpmCurrentMinDGD"))
if mibBuilder.loadTexts: nbsCohpmTrapsMinDGD.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmTrapsMinDGD.setDescription('Sent on the first occurrence in a current interval when the minimum\n        differential group delay (DGD) meets/is below its defined threshold\n        (nbsCohpmThresholdsMinDGD).')
nbsCohpmTrapsMaxDGD = NotificationType((1, 3, 6, 1, 4, 1, 629, 242, 100, 0, 36)).setObjects(("NBS-COHERENT-MIB", "nbsCohpmCurrentIfIndex"), ("NBS-COHERENT-MIB", "nbsCohpmCurrentInterval"), ("NBS-COHERENT-MIB", "nbsCohpmCurrentMaxDGD"))
if mibBuilder.loadTexts: nbsCohpmTrapsMaxDGD.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmTrapsMaxDGD.setDescription('Sent on the first occurrence in a current interval when the maximum\n        differential group delay (DGD) meets/exceeds its defined threshold\n        (nbsCohpmThresholdsMaxDGD).')
nbsCohpmTrapsAveQ = NotificationType((1, 3, 6, 1, 4, 1, 629, 242, 100, 0, 40)).setObjects(("NBS-COHERENT-MIB", "nbsCohpmCurrentIfIndex"), ("NBS-COHERENT-MIB", "nbsCohpmCurrentInterval"), ("NBS-COHERENT-MIB", "nbsCohpmCurrentAveQ"))
if mibBuilder.loadTexts: nbsCohpmTrapsAveQ.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmTrapsAveQ.setDescription('Sent on the first occurrence in a current interval when the average\n        Q meets/exceeds its defined threshold (nbsCohpmThresholdsAveQ).')
nbsCohpmTrapsMinQ = NotificationType((1, 3, 6, 1, 4, 1, 629, 242, 100, 0, 43)).setObjects(("NBS-COHERENT-MIB", "nbsCohpmCurrentIfIndex"), ("NBS-COHERENT-MIB", "nbsCohpmCurrentInterval"), ("NBS-COHERENT-MIB", "nbsCohpmCurrentMinQ"))
if mibBuilder.loadTexts: nbsCohpmTrapsMinQ.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmTrapsMinQ.setDescription('Sent on the first occurrence in a current interval when the minimum\n        Q meets/is below its defined threshold (nbsCohpmThresholdsMinQ).')
nbsCohpmTrapsMaxQ = NotificationType((1, 3, 6, 1, 4, 1, 629, 242, 100, 0, 46)).setObjects(("NBS-COHERENT-MIB", "nbsCohpmCurrentIfIndex"), ("NBS-COHERENT-MIB", "nbsCohpmCurrentInterval"), ("NBS-COHERENT-MIB", "nbsCohpmCurrentMaxQ"))
if mibBuilder.loadTexts: nbsCohpmTrapsMaxQ.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmTrapsMaxQ.setDescription('Sent on the first occurrence in a current interval when the maximum\n        Q meets/exceeds its defined threshold (nbsCohpmThresholdsMaxQ).')
nbsCohpmTrapsAveCFO = NotificationType((1, 3, 6, 1, 4, 1, 629, 242, 100, 0, 50)).setObjects(("NBS-COHERENT-MIB", "nbsCohpmCurrentIfIndex"), ("NBS-COHERENT-MIB", "nbsCohpmCurrentInterval"), ("NBS-COHERENT-MIB", "nbsCohpmCurrentAveCFO"))
if mibBuilder.loadTexts: nbsCohpmTrapsAveCFO.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmTrapsAveCFO.setDescription('Sent on the first occurrence in a current interval when the average\n        carrier frequency offset (CFO) meets/exceeds its defined threshold\n        (nbsCohpmThresholdsAveCFO).')
nbsCohpmTrapsMinCFO = NotificationType((1, 3, 6, 1, 4, 1, 629, 242, 100, 0, 53)).setObjects(("NBS-COHERENT-MIB", "nbsCohpmCurrentIfIndex"), ("NBS-COHERENT-MIB", "nbsCohpmCurrentInterval"), ("NBS-COHERENT-MIB", "nbsCohpmCurrentMinCFO"))
if mibBuilder.loadTexts: nbsCohpmTrapsMinCFO.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmTrapsMinCFO.setDescription('Sent on the first occurrence in a current interval when the minimum\n        carrier frequency offset (CFO) meets/is below its defined threshold\n        (nbsCohpmThresholdsMinCFO).')
nbsCohpmTrapsMaxCFO = NotificationType((1, 3, 6, 1, 4, 1, 629, 242, 100, 0, 56)).setObjects(("NBS-COHERENT-MIB", "nbsCohpmCurrentIfIndex"), ("NBS-COHERENT-MIB", "nbsCohpmCurrentInterval"), ("NBS-COHERENT-MIB", "nbsCohpmCurrentMaxCFO"))
if mibBuilder.loadTexts: nbsCohpmTrapsMaxCFO.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmTrapsMaxCFO.setDescription('Sent on the first occurrence in a current interval when the maximum\n        carrier frequency offset (CFO) meets/exceeds its defined threshold\n        (nbsCohpmThresholdsMaxCFO).')
nbsCohpmTrapsAveOSNR = NotificationType((1, 3, 6, 1, 4, 1, 629, 242, 100, 0, 60)).setObjects(("NBS-COHERENT-MIB", "nbsCohpmCurrentIfIndex"), ("NBS-COHERENT-MIB", "nbsCohpmCurrentInterval"), ("NBS-COHERENT-MIB", "nbsCohpmCurrentAveOSNR"))
if mibBuilder.loadTexts: nbsCohpmTrapsAveOSNR.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmTrapsAveOSNR.setDescription('Sent on the first occurrence in a current interval when the average\n        optical signal-to-noise ratio (OSNR) meets/exceeds its defined\n        threshold (nbsCohpmThresholdsAveOSNR).')
nbsCohpmTrapsMinOSNR = NotificationType((1, 3, 6, 1, 4, 1, 629, 242, 100, 0, 63)).setObjects(("NBS-COHERENT-MIB", "nbsCohpmCurrentIfIndex"), ("NBS-COHERENT-MIB", "nbsCohpmCurrentInterval"), ("NBS-COHERENT-MIB", "nbsCohpmCurrentMinOSNR"))
if mibBuilder.loadTexts: nbsCohpmTrapsMinOSNR.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmTrapsMinOSNR.setDescription('Sent on the first occurrence in a current interval when the minimum\n        optical signal-to-noise ratio (OSNR) meets/is below its defined\n        threshold (nbsCohpmThresholdsMinOSNR).')
nbsCohpmTrapsMaxOSNR = NotificationType((1, 3, 6, 1, 4, 1, 629, 242, 100, 0, 66)).setObjects(("NBS-COHERENT-MIB", "nbsCohpmCurrentIfIndex"), ("NBS-COHERENT-MIB", "nbsCohpmCurrentInterval"), ("NBS-COHERENT-MIB", "nbsCohpmCurrentMaxOSNR"))
if mibBuilder.loadTexts: nbsCohpmTrapsMaxOSNR.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmTrapsMaxOSNR.setDescription('Sent on the first occurrence in a current interval when the maximum\n        optical signal-to-noise ratio (OSNR) meets/exceeds its defined\n        threshold (nbsCohpmThresholdsMaxOSNR).')
nbsCohpmTrapsAveSNRx = NotificationType((1, 3, 6, 1, 4, 1, 629, 242, 100, 0, 70)).setObjects(("NBS-COHERENT-MIB", "nbsCohpmCurrentIfIndex"), ("NBS-COHERENT-MIB", "nbsCohpmCurrentInterval"), ("NBS-COHERENT-MIB", "nbsCohpmCurrentAveSNRx"))
if mibBuilder.loadTexts: nbsCohpmTrapsAveSNRx.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmTrapsAveSNRx.setDescription('Sent on the first occurrence in a current interval when the average\n        signal-to-noise ratio of X Polarization (SNRx) meets/exceeds its\n        defined threshold (nbsCohpmThresholdsAveSNRx).')
nbsCohpmTrapsMinSNRx = NotificationType((1, 3, 6, 1, 4, 1, 629, 242, 100, 0, 73)).setObjects(("NBS-COHERENT-MIB", "nbsCohpmCurrentIfIndex"), ("NBS-COHERENT-MIB", "nbsCohpmCurrentInterval"), ("NBS-COHERENT-MIB", "nbsCohpmCurrentMinSNRx"))
if mibBuilder.loadTexts: nbsCohpmTrapsMinSNRx.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmTrapsMinSNRx.setDescription('Sent on the first occurrence in a current interval when the minimum\n        signal-to-noise ratio of X Polarization (SNRx) meets/is below its\n        defined threshold (nbsCohpmThresholdsMinSNRx).')
nbsCohpmTrapsMaxSNRx = NotificationType((1, 3, 6, 1, 4, 1, 629, 242, 100, 0, 76)).setObjects(("NBS-COHERENT-MIB", "nbsCohpmCurrentIfIndex"), ("NBS-COHERENT-MIB", "nbsCohpmCurrentInterval"), ("NBS-COHERENT-MIB", "nbsCohpmCurrentMaxSNRx"))
if mibBuilder.loadTexts: nbsCohpmTrapsMaxSNRx.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmTrapsMaxSNRx.setDescription('Sent on the first occurrence in a current interval when the maximum\n        signal-to-noise ratio of X Polarization (SNRx) meets/exceeds its\n        defined threshold (nbsCohpmThresholdsMaxSNRx).')
nbsCohpmTrapsAveSNRy = NotificationType((1, 3, 6, 1, 4, 1, 629, 242, 100, 0, 80)).setObjects(("NBS-COHERENT-MIB", "nbsCohpmCurrentIfIndex"), ("NBS-COHERENT-MIB", "nbsCohpmCurrentInterval"), ("NBS-COHERENT-MIB", "nbsCohpmCurrentAveSNRy"))
if mibBuilder.loadTexts: nbsCohpmTrapsAveSNRy.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmTrapsAveSNRy.setDescription('Sent on the first occurrence in a current interval when the average\n        signal-to-noise ratio of Y Polarization (SNRy) meets/exceeds its\n        defined threshold (nbsCohpmThresholdsAveSNRy).')
nbsCohpmTrapsMinSNRy = NotificationType((1, 3, 6, 1, 4, 1, 629, 242, 100, 0, 83)).setObjects(("NBS-COHERENT-MIB", "nbsCohpmCurrentIfIndex"), ("NBS-COHERENT-MIB", "nbsCohpmCurrentInterval"), ("NBS-COHERENT-MIB", "nbsCohpmCurrentMinSNRy"))
if mibBuilder.loadTexts: nbsCohpmTrapsMinSNRy.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmTrapsMinSNRy.setDescription('Sent on the first occurrence in a current interval when the minimum\n        signal-to-noise ratio of Y Polarization (SNRy) meets/is below its\n        defined threshold (nbsCohpmThresholdsMinSNRy).')
nbsCohpmTrapsMaxSNRy = NotificationType((1, 3, 6, 1, 4, 1, 629, 242, 100, 0, 86)).setObjects(("NBS-COHERENT-MIB", "nbsCohpmCurrentIfIndex"), ("NBS-COHERENT-MIB", "nbsCohpmCurrentInterval"), ("NBS-COHERENT-MIB", "nbsCohpmCurrentMaxSNRy"))
if mibBuilder.loadTexts: nbsCohpmTrapsMaxSNRy.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmTrapsMaxSNRy.setDescription('Sent on the first occurrence in a current interval when the maximum\n        signal-to-noise ratio of Y Polarization (SNRy) meets/exceeds its\n        defined threshold (nbsCohpmThresholdsMaxSNRy).')
nbsCohpmTrapsAvePDL = NotificationType((1, 3, 6, 1, 4, 1, 629, 242, 100, 0, 90)).setObjects(("NBS-COHERENT-MIB", "nbsCohpmCurrentIfIndex"), ("NBS-COHERENT-MIB", "nbsCohpmCurrentInterval"), ("NBS-COHERENT-MIB", "nbsCohpmCurrentAvePDL"))
if mibBuilder.loadTexts: nbsCohpmTrapsAvePDL.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmTrapsAvePDL.setDescription('Sent on the first occurrence in a current interval when the average\n        polarization dependent loss (PDL) meets/exceeds its defined threshold\n        (nbsCohpmThresholdsAvePDL).')
nbsCohpmTrapsMinPDL = NotificationType((1, 3, 6, 1, 4, 1, 629, 242, 100, 0, 93)).setObjects(("NBS-COHERENT-MIB", "nbsCohpmCurrentIfIndex"), ("NBS-COHERENT-MIB", "nbsCohpmCurrentInterval"), ("NBS-COHERENT-MIB", "nbsCohpmCurrentMinPDL"))
if mibBuilder.loadTexts: nbsCohpmTrapsMinPDL.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmTrapsMinPDL.setDescription('Sent on the first occurrence in a current interval when the minimum\n        polarization dependent loss (PDL) meets/is below its defined threshold\n        (nbsCohpmThresholdsMinPDL).')
nbsCohpmTrapsMaxPDL = NotificationType((1, 3, 6, 1, 4, 1, 629, 242, 100, 0, 96)).setObjects(("NBS-COHERENT-MIB", "nbsCohpmCurrentIfIndex"), ("NBS-COHERENT-MIB", "nbsCohpmCurrentInterval"), ("NBS-COHERENT-MIB", "nbsCohpmCurrentMaxPDL"))
if mibBuilder.loadTexts: nbsCohpmTrapsMaxPDL.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmTrapsMaxPDL.setDescription('Sent on the first occurrence in a current interval when the maximum\n        polarization dependent loss (PDL) meets/exceeds its defined threshold\n        (nbsCohpmThresholdsMaxPDL).')
nbsCohpmTrapsAveSOP = NotificationType((1, 3, 6, 1, 4, 1, 629, 242, 100, 0, 100)).setObjects(("NBS-COHERENT-MIB", "nbsCohpmCurrentIfIndex"), ("NBS-COHERENT-MIB", "nbsCohpmCurrentInterval"), ("NBS-COHERENT-MIB", "nbsCohpmCurrentAveSOP"))
if mibBuilder.loadTexts: nbsCohpmTrapsAveSOP.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmTrapsAveSOP.setDescription('Sent on the first occurrence in a current interval when the average\n        state of polarization (SOP) meets/exceeds its defined threshold\n        (nbsCohpmThresholdsAveSOP).')
nbsCohpmTrapsMinSOP = NotificationType((1, 3, 6, 1, 4, 1, 629, 242, 100, 0, 103)).setObjects(("NBS-COHERENT-MIB", "nbsCohpmCurrentIfIndex"), ("NBS-COHERENT-MIB", "nbsCohpmCurrentInterval"), ("NBS-COHERENT-MIB", "nbsCohpmCurrentMinSOP"))
if mibBuilder.loadTexts: nbsCohpmTrapsMinSOP.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmTrapsMinSOP.setDescription('Sent on the first occurrence in a current interval when the minimum\n        state of polarization (SOP) meets/is below its defined threshold\n        (nbsCohpmThresholdsMinSOP).')
nbsCohpmTrapsMaxSOP = NotificationType((1, 3, 6, 1, 4, 1, 629, 242, 100, 0, 106)).setObjects(("NBS-COHERENT-MIB", "nbsCohpmCurrentIfIndex"), ("NBS-COHERENT-MIB", "nbsCohpmCurrentInterval"), ("NBS-COHERENT-MIB", "nbsCohpmCurrentMaxSOP"))
if mibBuilder.loadTexts: nbsCohpmTrapsMaxSOP.setStatus('current')
if mibBuilder.loadTexts: nbsCohpmTrapsMaxSOP.setDescription('Sent on the first occurrence in a current interval when the maximum\n        state of polarization (SOP) meets/exceeds its defined threshold\n        (nbsCohpmThresholdsMaxSOP).')
mibBuilder.exportSymbols("NBS-COHERENT-MIB", nbsCohpmThresholdsAveOSNR=nbsCohpmThresholdsAveOSNR, nbsCoherentStatsAvePDL=nbsCoherentStatsAvePDL, nbsCohpmCurrentMinCD=nbsCohpmCurrentMinCD, nbsCoherentStatsMaxQ=nbsCoherentStatsMaxQ, nbsCohpmRunningGrp=nbsCohpmRunningGrp, nbsCohpmThresholdsMinSNRx=nbsCohpmThresholdsMinSNRx, nbsCoherentStatsIfIndex=nbsCoherentStatsIfIndex, nbsCoherentStatsAveCFO=nbsCoherentStatsAveCFO, nbsCohpmTraps=nbsCohpmTraps, nbsCohpmTrapsMinQ=nbsCohpmTrapsMinQ, nbsCohpmThresholdsMinSOP=nbsCohpmThresholdsMinSOP, nbsCoherentStatsMaxDGD=nbsCoherentStatsMaxDGD, nbsCoherentStatsMinSOP=nbsCoherentStatsMinSOP, nbsCoherentStatsMinNetBERsig=nbsCoherentStatsMinNetBERsig, nbsCohpmThresholdsMaxSOP=nbsCohpmThresholdsMaxSOP, nbsCohpmCurrentEntry=nbsCohpmCurrentEntry, nbsCohpmHistoricMinSNRx=nbsCohpmHistoricMinSNRx, nbsCoherentStatsAveNetBERsig=nbsCoherentStatsAveNetBERsig, nbsCoherentStatsMinNetBERexp=nbsCoherentStatsMinNetBERexp, nbsCohpmCurrentAveOSNR=nbsCohpmCurrentAveOSNR, nbsCohpmThresholdsIfIndex=nbsCohpmThresholdsIfIndex, nbsCohpmThresholdsAveCD=nbsCohpmThresholdsAveCD, nbsCohpmHistoricMinQ=nbsCohpmHistoricMinQ, nbsCohpmHistoricSample=nbsCohpmHistoricSample, nbsCohpmRunningMaxNetBERsig=nbsCohpmRunningMaxNetBERsig, nbsCohpmHistoricMinCD=nbsCohpmHistoricMinCD, nbsCoherentStatsAveSNRy=nbsCoherentStatsAveSNRy, nbsCohpmTrapsAveBER=nbsCohpmTrapsAveBER, nbsCoherentStatsMaxOSNR=nbsCoherentStatsMaxOSNR, nbsCohpmTrapsMinDGD=nbsCohpmTrapsMinDGD, nbsCohpmThresholdsMinSNRy=nbsCohpmThresholdsMinSNRy, nbsCohpmThresholdsTable=nbsCohpmThresholdsTable, nbsCohpmThresholdsMaxCD=nbsCohpmThresholdsMaxCD, nbsCohpmRunningMinSOP=nbsCohpmRunningMinSOP, nbsCoherentStatsDate=nbsCoherentStatsDate, nbsCohpmHistoricAveDGD=nbsCohpmHistoricAveDGD, nbsCohpmRunningMinOSNR=nbsCohpmRunningMinOSNR, nbsCohpmHistoricMinSOP=nbsCohpmHistoricMinSOP, nbsCoherentStatsMinDGD=nbsCoherentStatsMinDGD, nbsCohpmCurrentAveNetBERsig=nbsCohpmCurrentAveNetBERsig, nbsCohpmThresholdsMinNetBERsig=nbsCohpmThresholdsMinNetBERsig, nbsCohpmRunningAveCFO=nbsCohpmRunningAveCFO, nbsCohpmCurrentMaxDGD=nbsCohpmCurrentMaxDGD, nbsCoherentCfgCDautohAdmin=nbsCoherentCfgCDautohAdmin, nbsCohpmThresholdsMaxPDL=nbsCohpmThresholdsMaxPDL, nbsCohpmHistoricAveSNRx=nbsCohpmHistoricAveSNRx, nbsCohpmRunningMaxSNRy=nbsCohpmRunningMaxSNRy, nbsCohpmHistoricMaxCFO=nbsCohpmHistoricMaxCFO, nbsCohpmEventsGrp=nbsCohpmEventsGrp, nbsCohpmThresholdsInterval=nbsCohpmThresholdsInterval, nbsCohpmThresholdsMaxSNRx=nbsCohpmThresholdsMaxSNRx, nbsCohpmHistoricAveCFO=nbsCohpmHistoricAveCFO, nbsCohpmRunningAveNetBERexp=nbsCohpmRunningAveNetBERexp, nbsCohpmTrapsAveSOP=nbsCohpmTrapsAveSOP, nbsCohpmCurrentMaxPDL=nbsCohpmCurrentMaxPDL, nbsCohpmRunningMaxCFO=nbsCohpmRunningMaxCFO, nbsCohpmRunningMinCFO=nbsCohpmRunningMinCFO, nbsCoherentStatsMaxSNRx=nbsCoherentStatsMaxSNRx, nbsCoherentStatsMaxCD=nbsCoherentStatsMaxCD, nbsCohpmCurrentMinDGD=nbsCohpmCurrentMinDGD, nbsCohpmHistoricMaxQ=nbsCohpmHistoricMaxQ, nbsCoherentCfgCDautohOper=nbsCoherentCfgCDautohOper, nbsCohpmTrapsMaxOSNR=nbsCohpmTrapsMaxOSNR, nbsCohpmRunningTime=nbsCohpmRunningTime, nbsCohpmRunningAveNetBERsig=nbsCohpmRunningAveNetBERsig, nbsCohpmHistoricMinSNRy=nbsCohpmHistoricMinSNRy, nbsCohpmHistoricIfIndex=nbsCohpmHistoricIfIndex, nbsCohpmCurrentMinPDL=nbsCohpmCurrentMinPDL, nbsCohpmRunningDate=nbsCohpmRunningDate, nbsCohpmRunningAveOSNR=nbsCohpmRunningAveOSNR, nbsCoherentStatsAveOSNR=nbsCoherentStatsAveOSNR, nbsCohpmHistoricMaxCD=nbsCohpmHistoricMaxCD, nbsCohpmCurrentIfIndex=nbsCohpmCurrentIfIndex, nbsCohpmRunningAveSOP=nbsCohpmRunningAveSOP, nbsCohpmHistoricMinDGD=nbsCohpmHistoricMinDGD, nbsCoherentStatsMinQ=nbsCoherentStatsMinQ, nbsCohpmTrapsMinBER=nbsCohpmTrapsMinBER, nbsCohpmThresholdsEntry=nbsCohpmThresholdsEntry, nbsCohpmHistoricAveCD=nbsCohpmHistoricAveCD, nbsCohpmCurrentTime=nbsCohpmCurrentTime, nbsCohpmHistoricMinNetBERexp=nbsCohpmHistoricMinNetBERexp, nbsCoherentStatsSpan=nbsCoherentStatsSpan, nbsCohpmHistoricAveQ=nbsCohpmHistoricAveQ, nbsCohpmThresholdsAveNetBERexp=nbsCohpmThresholdsAveNetBERexp, nbsCohpmCurrentMaxOSNR=nbsCohpmCurrentMaxOSNR, nbsCoherentCfgCDfixedAdmin=nbsCoherentCfgCDfixedAdmin, nbsCohpmRunningTable=nbsCohpmRunningTable, nbsCohpmCurrentAveDGD=nbsCohpmCurrentAveDGD, nbsCohpmThresholdsAveSOP=nbsCohpmThresholdsAveSOP, nbsCohpmRunningMinDGD=nbsCohpmRunningMinDGD, nbsCohpmThresholdsAveNetBERsig=nbsCohpmThresholdsAveNetBERsig, nbsCoherentStatsMaxCFO=nbsCoherentStatsMaxCFO, nbsCohpmThresholdsMaxOSNR=nbsCohpmThresholdsMaxOSNR, nbsCohpmCurrentMaxCFO=nbsCohpmCurrentMaxCFO, nbsCohpmCurrentAvePDL=nbsCohpmCurrentAvePDL, nbsCohpmCurrentAveCFO=nbsCohpmCurrentAveCFO, nbsCoherentCfgCDautolAdmin=nbsCoherentCfgCDautolAdmin, nbsCohpmRunningMaxOSNR=nbsCohpmRunningMaxOSNR, nbsCoherentStatsMinCFO=nbsCoherentStatsMinCFO, nbsCohpmCurrentMaxNetBERexp=nbsCohpmCurrentMaxNetBERexp, nbsCohpmRunningMinCD=nbsCohpmRunningMinCD, nbsCoherentStatsAveNetBERexp=nbsCoherentStatsAveNetBERexp, nbsCohpmThresholdsMaxNetBERsig=nbsCohpmThresholdsMaxNetBERsig, PYSNMP_MODULE_ID=nbsCoherentMib, nbsCohpmRunningMinPDL=nbsCohpmRunningMinPDL, nbsCohpmTrapsMaxCD=nbsCohpmTrapsMaxCD, nbsCohpmHistoricAvePDL=nbsCohpmHistoricAvePDL, nbsCohpmThresholdsMaxQ=nbsCohpmThresholdsMaxQ, nbsCoherentStatsMinCD=nbsCoherentStatsMinCD, nbsCohpmThresholdsAveCFO=nbsCohpmThresholdsAveCFO, nbsCohpmCurrentMinNetBERexp=nbsCohpmCurrentMinNetBERexp, nbsCohpmHistoricAveNetBERsig=nbsCohpmHistoricAveNetBERsig, nbsCoherentStatsTable=nbsCoherentStatsTable, nbsCoherentStatsMaxPDL=nbsCoherentStatsMaxPDL, nbsCohpmRunningEntry=nbsCohpmRunningEntry, nbsCohpmHistoricAveNetBERexp=nbsCohpmHistoricAveNetBERexp, nbsCohpmTrapsAveQ=nbsCohpmTrapsAveQ, nbsCoherentStatsMinSNRx=nbsCoherentStatsMinSNRx, nbsCohpmTrapsAveCFO=nbsCohpmTrapsAveCFO, nbsCohpmCurrentMaxNetBERsig=nbsCohpmCurrentMaxNetBERsig, nbsCohpmThresholdsMinCD=nbsCohpmThresholdsMinCD, nbsCohpmRunningMinNetBERsig=nbsCohpmRunningMinNetBERsig, nbsCohpmHistoricTable=nbsCohpmHistoricTable, nbsCohpmRunningIfIndex=nbsCohpmRunningIfIndex, nbsCohpmHistoricMaxSNRx=nbsCohpmHistoricMaxSNRx, nbsCoherentStatsAveCD=nbsCoherentStatsAveCD, nbsCoherentCfgEntry=nbsCoherentCfgEntry, nbsCohpmTrapsAveDGD=nbsCohpmTrapsAveDGD, nbsCoherentCfgSOPmodeOper=nbsCoherentCfgSOPmodeOper, nbsCohpmRunningAveQ=nbsCohpmRunningAveQ, nbsCohpmRunningAveDGD=nbsCohpmRunningAveDGD, nbsCohpmTrapsAveSNRx=nbsCohpmTrapsAveSNRx, nbsCohpmThresholdsMinQ=nbsCohpmThresholdsMinQ, nbsCohpmHistoricAveSOP=nbsCohpmHistoricAveSOP, nbsCohpmTrapsMinCFO=nbsCohpmTrapsMinCFO, nbsCohpmRunningMaxSOP=nbsCohpmRunningMaxSOP, nbsCohpmRunningAveCD=nbsCohpmRunningAveCD, nbsCohpmRunningMaxCD=nbsCohpmRunningMaxCD, nbsCohpmCurrentAveSNRx=nbsCohpmCurrentAveSNRx, nbsCoherentStatsState=nbsCoherentStatsState, nbsCoherentStatsMinOSNR=nbsCoherentStatsMinOSNR, nbsCoherentCfgIfIndex=nbsCoherentCfgIfIndex, nbsCohpmThresholdsMaxNetBERexp=nbsCohpmThresholdsMaxNetBERexp, nbsCohpmCurrentMinOSNR=nbsCohpmCurrentMinOSNR, nbsCoherentStatsAveSOP=nbsCoherentStatsAveSOP, nbsCohpmHistoricAveSNRy=nbsCohpmHistoricAveSNRy, nbsCohpmTrapsMaxSNRx=nbsCohpmTrapsMaxSNRx, nbsCohpmRunningMaxNetBERexp=nbsCohpmRunningMaxNetBERexp, nbsCohpmThresholdsAveQ=nbsCohpmThresholdsAveQ, nbsCohpmHistoricMaxSNRy=nbsCohpmHistoricMaxSNRy, nbsCohpmThresholdsMaxDGD=nbsCohpmThresholdsMaxDGD, nbsCohpmRunningMinNetBERexp=nbsCohpmRunningMinNetBERexp, nbsCoherentStatsAveSNRx=nbsCoherentStatsAveSNRx, nbsCoherentCfgCDmodeOper=nbsCoherentCfgCDmodeOper, nbsCohpmHistoricTime=nbsCohpmHistoricTime, nbsCohpmTrapsAvePDL=nbsCohpmTrapsAvePDL, nbsCohpmRunningAveSNRx=nbsCohpmRunningAveSNRx, nbsCoherentCfgGrp=nbsCoherentCfgGrp, nbsCohpmCurrentMaxQ=nbsCohpmCurrentMaxQ, nbsCohpmHistoricMaxNetBERsig=nbsCohpmHistoricMaxNetBERsig, nbsCohpmCurrentInterval=nbsCohpmCurrentInterval, nbsCohpmHistoricMaxSOP=nbsCohpmHistoricMaxSOP, nbsCohpmCurrentMaxSNRx=nbsCohpmCurrentMaxSNRx, nbsCoherentStatsAveDGD=nbsCoherentStatsAveDGD, nbsCoherentCfgCDfixedOper=nbsCoherentCfgCDfixedOper, nbsCohpmCurrentMinSNRx=nbsCohpmCurrentMinSNRx, nbsCohpmThresholdsMinCFO=nbsCohpmThresholdsMinCFO, nbsCoherentStatsMinPDL=nbsCoherentStatsMinPDL, nbsCohpmHistoricGrp=nbsCohpmHistoricGrp, nbsCohpmRunningMaxSNRx=nbsCohpmRunningMaxSNRx, nbsCohpmRunningMaxPDL=nbsCohpmRunningMaxPDL, nbsCohpmRunningAveSNRy=nbsCohpmRunningAveSNRy, nbsCohpmThresholdsMinDGD=nbsCohpmThresholdsMinDGD, nbsCohpmTrapsMaxQ=nbsCohpmTrapsMaxQ, nbsCohpmHistoricInterval=nbsCohpmHistoricInterval, nbsCohpmHistoricMinNetBERsig=nbsCohpmHistoricMinNetBERsig, nbsCoherentStatsMaxSOP=nbsCoherentStatsMaxSOP, nbsCohpmHistoricMaxPDL=nbsCohpmHistoricMaxPDL, nbsCohpmTrapsMaxDGD=nbsCohpmTrapsMaxDGD, nbsCoherentStatsAveQ=nbsCoherentStatsAveQ, nbsCohpmTrapsMinSNRx=nbsCohpmTrapsMinSNRx, nbsCohpmCurrentMinNetBERsig=nbsCohpmCurrentMinNetBERsig, nbsCohpmTrapsMaxSOP=nbsCohpmTrapsMaxSOP, nbsCoherentCfgCDautolOper=nbsCoherentCfgCDautolOper, nbsCoherentCfgTable=nbsCoherentCfgTable, nbsCohpmRunningAvePDL=nbsCohpmRunningAvePDL, nbsCohpmCurrentMaxCD=nbsCohpmCurrentMaxCD, nbsCohpmThresholdsAveDGD=nbsCohpmThresholdsAveDGD, nbsCohpmRunningMaxDGD=nbsCohpmRunningMaxDGD, nbsCohpmRunningMinQ=nbsCohpmRunningMinQ, nbsCohpmThresholdsMinPDL=nbsCohpmThresholdsMinPDL, nbsCohpmCurrentAveSNRy=nbsCohpmCurrentAveSNRy, nbsCohpmThresholdsMaxCFO=nbsCohpmThresholdsMaxCFO, nbsCohpmHistoricMaxNetBERexp=nbsCohpmHistoricMaxNetBERexp, nbsCohpmThresholdsMinOSNR=nbsCohpmThresholdsMinOSNR, nbsCoherentStatsEntry=nbsCoherentStatsEntry, nbsCohpmHistoricDate=nbsCohpmHistoricDate, nbsCohpmRunningMaxQ=nbsCohpmRunningMaxQ, nbsCohpmTrapsMinOSNR=nbsCohpmTrapsMinOSNR, nbsCoherentStatsMaxNetBERsig=nbsCoherentStatsMaxNetBERsig, nbsCohpmRunningMinSNRx=nbsCohpmRunningMinSNRx, nbsCohpmCurrentAveQ=nbsCohpmCurrentAveQ, nbsCohpmTrapsMinSNRy=nbsCohpmTrapsMinSNRy, nbsCohpmHistoricMaxOSNR=nbsCohpmHistoricMaxOSNR, nbsCohpmCurrentMinSNRy=nbsCohpmCurrentMinSNRy, nbsCohpmCurrentMinQ=nbsCohpmCurrentMinQ, nbsCohpmCurrentAveSOP=nbsCohpmCurrentAveSOP, nbsCohpmCurrentMinSOP=nbsCohpmCurrentMinSOP, nbsCohpmTrapsAveOSNR=nbsCohpmTrapsAveOSNR, nbsCohpmTrapsMaxSNRy=nbsCohpmTrapsMaxSNRy, nbsCohpmTrapsMinSOP=nbsCohpmTrapsMinSOP, nbsCohpmThresholdsAvePDL=nbsCohpmThresholdsAvePDL, nbsCohpmRunningMinSNRy=nbsCohpmRunningMinSNRy, nbsCohpmHistoricMaxDGD=nbsCohpmHistoricMaxDGD, nbsCoherentMib=nbsCoherentMib, nbsCohpmTrapsMinPDL=nbsCohpmTrapsMinPDL, nbsCohpmTrapsAveSNRy=nbsCohpmTrapsAveSNRy, nbsCohpmCurrentAveCD=nbsCohpmCurrentAveCD, nbsCohpmThresholdsMaxSNRy=nbsCohpmThresholdsMaxSNRy, nbsCohpmHistoricEntry=nbsCohpmHistoricEntry, nbsCohpmHistoricAveOSNR=nbsCohpmHistoricAveOSNR, nbsCohpmCurrentMaxSOP=nbsCohpmCurrentMaxSOP, nbsCoherentStatsMaxNetBERexp=nbsCoherentStatsMaxNetBERexp, nbsCohpmThresholdsGrp=nbsCohpmThresholdsGrp, nbsCoherentStatsGrp=nbsCoherentStatsGrp, nbsCoherentStatsMaxSNRy=nbsCoherentStatsMaxSNRy, nbsCohpmTrapsMinCD=nbsCohpmTrapsMinCD, nbsCohpmThresholdsAveSNRy=nbsCohpmThresholdsAveSNRy, nbsCohpmCurrentAveNetBERexp=nbsCohpmCurrentAveNetBERexp, nbsCohpmHistoricMinPDL=nbsCohpmHistoricMinPDL, nbsCohpmTrapsAveCD=nbsCohpmTrapsAveCD, nbsCoherentStatsMinSNRy=nbsCoherentStatsMinSNRy, nbsCohpmThresholdsAveSNRx=nbsCohpmThresholdsAveSNRx, nbsCohpmTrapsMaxPDL=nbsCohpmTrapsMaxPDL, nbsCohpmCurrentMinCFO=nbsCohpmCurrentMinCFO, nbsCohpmThresholdsMinNetBERexp=nbsCohpmThresholdsMinNetBERexp, nbsCohpmCurrentDate=nbsCohpmCurrentDate, nbsCoherentCfgCDmodeCaps=nbsCoherentCfgCDmodeCaps, nbsCoherentStatsTime=nbsCoherentStatsTime, nbsCoherentCfgCDmodeAdmin=nbsCoherentCfgCDmodeAdmin, nbsCohpmTrapsMaxCFO=nbsCohpmTrapsMaxCFO, nbsCohpmTrapsMaxBER=nbsCohpmTrapsMaxBER, nbsCohpmHistoricMinOSNR=nbsCohpmHistoricMinOSNR, nbsCohpmHistoricMinCFO=nbsCohpmHistoricMinCFO, nbsCohpmCurrentTable=nbsCohpmCurrentTable, nbsCoherentCfgSOPmodeAdmin=nbsCoherentCfgSOPmodeAdmin, nbsCohpmCurrentGrp=nbsCohpmCurrentGrp, nbsCohpmCurrentMaxSNRy=nbsCohpmCurrentMaxSNRy)
