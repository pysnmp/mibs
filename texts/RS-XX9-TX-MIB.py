#
# PySNMP MIB module RS-XX9-TX-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/rs/RS-XX9-TX-MIB
# Produced by pysmi-1.1.12 at Mon Oct  7 02:58:10 2024
# On host fv-az775-99 platform Linux version 6.8.0-1014-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
commonNotificationAlarmClass, = mibBuilder.importSymbols("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass")
rsXx9Tx, rsXx9MibModule = mibBuilder.importSymbols("RS-XX9-SMI-MIB", "rsXx9Tx", "rsXx9MibModule")
NotificationPriority, IndexTransmitter, NotificationMask, IndexAB, SwitchOnOff, NotificationClass, NotificationState, Trigger, Xx9ModulationMode = mibBuilder.importSymbols("RS-XX9-TC-MIB", "NotificationPriority", "IndexTransmitter", "NotificationMask", "IndexAB", "SwitchOnOff", "NotificationClass", "NotificationState", "Trigger", "Xx9ModulationMode")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
MibIdentifier, Gauge32, ModuleIdentity, iso, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Counter32, ObjectIdentity, IpAddress, Bits, Unsigned32, NotificationType, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Gauge32", "ModuleIdentity", "iso", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Counter32", "ObjectIdentity", "IpAddress", "Bits", "Unsigned32", "NotificationType", "Counter64")
DisplayString, TextualConvention, TruthValue, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "TruthValue", "DateAndTime")
rsXx9TxMibModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 2566, 149, 1, 216, 3))
rsXx9TxMibModule.setRevisions(('2016-05-04 15:00', '2016-04-05 15:00', '2016-03-08 09:00', '2016-01-28 11:00', '2015-11-30 08:00', '2015-11-26 18:00', '2015-10-19 16:00', '2015-07-02 12:00', '2014-12-22 16:00', '2014-10-09 14:00', '2014-04-30 16:00', '2014-02-04 17:00', '2013-11-18 13:00', '2013-03-18 08:00', '2011-08-19 08:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: rsXx9TxMibModule.setRevisionsDescriptions(('added txTransCmdWarnOnDohertyMismatch\n                extended range for txPmxDohertyActive and txPhxDohertyActive\n                added txRfLimitForwardAddUpperFail, txRfLimitForwardAddUpperWarn', 'added txPrecorrMerState notification\n                added txPrecorrSigQualTable\n                added txIpFeedLinkStatus\n                ', 'added txExcCmdOperationMode', 'txObjsPHx902 is also valid for PHU903', 'added edi options to txInpGsInputSource \n                ', 'added txInpIfSatStreamTsIdMatch, txSatStreamCurrentTsId, txSatStreamExpectedTsId\n                changed txSatLnbFreqLowBand, txSatLnbFreqHighBand, txSatLnbFreqCBand to read-only and add writable 32bit values instead', 'added txObjsPMU905 group\n                obsoleted txPrecorrNonLinSetupSignalLimit \n                added more fine grained groups for linear precorrection, nonlinear precorrection and crest factor reduction\n                added txExcCmdLoopControl\n                extend txSatFeedServiceIdx to 0..32, extend txSatFeedDecryptionServiceIdx to 0..16, change access-level of txSatFeedInputServiceDecryption to read-write\n                added more objects to txInputSatFeed subtree\n                extended range of PrecorrectionState\n                ', 'increased range of txRfStReflectedVSWR with invalid value\n                updated description texts\n                move txSfnStateTimestampState into dvbt2-only group\n                added Tlx Objects, including txAmplifierTlxTable\n                make Objects in txObjsSFN1 group available for ATSC\n                updated txInputSat description texts\n                added statistical information to txInputIfFeedTable\n                updated txSfnSetupSFN desciption text\n                added txInpAutoFailDetection\n                ', 'added txRfIdentify, txRfCalibrate, txRfUncalibrate, txRfSensorCalibrated\n                fixed value range of tfRfLimitReflectedVswrFail, txRfLimitReflectedVswrWarn\n                changed ObjectGroup of txInpAutoDetectLostPackets to txObjsNonAnalog\n                obsoleted txSatBtsRegionalization\n                extended range of txAmpNotificationAmpIdx to 1..72 (for 6 racks)\n                added txAmpBlocking, txTransCmdReflectionCheck, txTransCmdPrgOnAfterSumFault\n                added ranges for txSatBtsPliTablePid, txSatBtsNullPacketLaPid, txSatBtsNullPacketLbPid, txSatBtsNullPacketLcPid\n                updated description texts', 'added txInpAutoTransparentTs\n                added txRfSensors subtree\n                added txRfSensorLinkStatus\n                fixed NotificationIdx ranges\n                added txSfnStateTimestampState\n                added txSatTunerIntermediateFreq, txSatTunerLinkMargin, txSatLnbBand, txSatLnbFreqCBand, txSatLnb22kHzSignal, txInpIfSatBtsStatus\n                fixed txInpIfSat notification bindings\n                added Description texts to txInputSat elements\n                added txInputSatFeedDecryptionServiceTable, txInputSatFeedBtsTable\n                change txSatCamBissInjectedId, txSatCamBissEncryptedSession, txSatCamBissClearSession: can not read encrypted content, write still possible\n                added txFrqRegStateCurrentControllerMode\n                re-enabled txInpAutoDelayInput1To2 (changed status from obsolete to current)\n                change access of txSatFeedInputServiceDecryption to read-only\n                reduce range of txSatFeedServiceIdx and txSatFeedDecryptionServiceIdx to 8 (was 16 before)\n                obsoleted txSatFeedInputServiceDecryptedAt\n                obsoleted txSatBtsDecompEnable', 'update txSummary value range: off not possible anymore\n                added Preset\n                txPmfFanFail now indicating FanFail with warning(4) instead of fault(3)\n                added txInputSatFeedGeneralTable\n                added MultiStandard nodes: txTransStPrimaryModMode, txTransStSecondaryModMode, txTransCmdChangeModulation\n                added txTransStPaEfficiency\n                changed access of txSatCamBissEncryptedSession to read-write\n                added biss1 to txSatCamBissMode\n                ', 'obsoleted txInpAutoMaxDelayInput1To2 and txInpAutoDelayInput1To2\n                added txInpIfLogDatarateBufferUnderrun and txInpIfLogDatarateBufferOverflow\n                added ActiveReserve notifications, status and settings\n                added txExciterAutomaticSummary notification\n                added txInpAutoDetectLostPackets\n                added sat1 and sat2 as options for txInpGsInputSource\n                added sat receiver notifications, status and settings\n                extended value range of txSfnStateSFN\n                changes regarding txAmplifier section and txAmpXXX Notifications: \n                  - obsoleted txAmpDriverFail\n                  - obsoleted txPmxAirFilterFail\n                  - obsoleted txAmpStVReg\n                  - obsoleted txPmxvRefPowerMax\n                  - added txAmpOn notification\n                  - fixes regarding validity of amplifier parameters for certain configurations\n                  - updated description texts\n                  - updated Unit scales in description texts\n                  - added txPmxDohertyActive and txPhxDohertyActive\n                ', 'updated release with Switchless Combiner. \n                Switchless Combiner Tables are only filled, if a Switchless Combiner is configured. \n                updated FreqID for Pmx and Phx amplifiers: now using OCTET STRING syntax', 'Initial release.', 'Preliminary release.',))
if mibBuilder.loadTexts: rsXx9TxMibModule.setLastUpdated('201605041500Z')
if mibBuilder.loadTexts: rsXx9TxMibModule.setOrganization('Rohde&Schwarz GmbH & Co. KG')
if mibBuilder.loadTexts: rsXx9TxMibModule.setContactInfo('Rohde & Schwarz GmbH & Co. KG\n                Broadcasting Division\n                \n                Muehldorfstrasse 15\n                81671 Munich\n                Germany\n                \n                customersupport@rohde-schwarz.com')
if mibBuilder.loadTexts: rsXx9TxMibModule.setDescription('This MIB defines transmitter specific objects of\n                XX9000 transmitting systems from Rohde & Schwarz\n                that are independent of modulation mode.\n                \n                Use this MIB for things all transmitters support via SNMP.\n                \n                The following MIBs are related to this:\n                - RS-COMMON-MIB         - mandatory for this MIB.\n                - RS-XX9-SMI-MIB        - mandatory for this MIB.\n                - RS-XX9-TC-MIB         - mandatory for this MIB.\n                - RS-XX9-COMMON-MIB     - mandatory for this MIB.')
class PrecorrectionState(TextualConvention, Integer32):
    description = 'idle(1)        - precorrector not active\n                acquisition(2) - precorrector collects new measured values\n                calculation(3) - precorrector calculates new curve\n                checkResult(4) - precorrector checks result for plausibility\n                \n                '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("idle", 1), ("acquisition", 2), ("calculation", 3), ("checkResult", 4))

class PrecorrectionSignalLevel(TextualConvention, Integer32):
    description = 'State of RF input level:\n                ok(2)      - level is within operation area\n                tooLow(3)  - level is too low\n                tooHigh(4) - level is too high\n                noInput(5) - no input for run mode'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("undefined", 1), ("ok", 2), ("tooLow", 3), ("tooHigh", 4), ("noInput", 5))

class PrecorrectionOperationMode(TextualConvention, Integer32):
    description = 'bypass(1) - precorrector is deactivated,\n                            input signal is not modified\n                stop(2)   - automatic precorrection is deactivated,\n                            input signal is modified from a constant curve\n                run(4)    - automatic precorrection is active'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4))
    namedValues = NamedValues(("bypass", 1), ("stop", 2), ("run", 4))

class AutomaticMode(TextualConvention, Integer32):
    description = 'Determines behaviour after successful switching:\n                severalTimes(1) - automatic switches back autonomously to the\n                                  preselected exciter if the reserve exciter is faulty\n                                  and the preselected exciter is ready\n                singleShot(2)   - '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("severalTimes", 1), ("singleShot", 2))

class SatSignalType(TextualConvention, Integer32):
    description = 'Description.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("undefinedType", 1), ("dvbs", 2), ("dvbs2", 3), ("dss", 4), ("auto", 5))

class ControllerMode(TextualConvention, Integer32):
    description = 'Description.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("standard", 1), ("jitter", 2))

class DohertyActive(TextualConvention, Integer32):
    description = 'Description.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4))
    namedValues = NamedValues(("true", 1), ("false", 2), ("warning", 4))

rsXx9TxNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 0))
txSummary = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 0, 1)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-TX-MIB", "txTransmitterNotificationPriority"), ("RS-XX9-TX-MIB", "txTransmitterNotificationState"))
if mibBuilder.loadTexts: txSummary.setStatus('current')
if mibBuilder.loadTexts: txSummary.setDescription('Transmitter summary state.\n                \n                Possible values:\n                fault(3)\n                warning(4)\n                ok(5)\n                \n                Notification class: fault')
txRF = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 0, 2)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-TX-MIB", "txTransmitterNotificationPriority"), ("RS-XX9-TX-MIB", "txTransmitterNotificationState"))
if mibBuilder.loadTexts: txRF.setStatus('current')
if mibBuilder.loadTexts: txRF.setDescription('indicates a warning/fault if RF power falls below the adjusted warning/fault limit. \n                \n                Possible values:\n                off(2)\n                fault(3)\n                warning(4)\n                ok(5)\n                \n                Notification class: fault')
txReflection = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 0, 3)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-TX-MIB", "txTransmitterNotificationPriority"), ("RS-XX9-TX-MIB", "txTransmitterNotificationState"))
if mibBuilder.loadTexts: txReflection.setStatus('current')
if mibBuilder.loadTexts: txReflection.setDescription('The reflected RF is above warning or fault limit. \n                \n                Possible values:\n                off(2)\n                fault(3)\n                warning(4)\n                ok(5)\n                \n                Notification class: fault')
txRfSensorSummary = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 0, 4)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-TX-MIB", "txTransmitterNotificationPriority"), ("RS-XX9-TX-MIB", "txTransmitterNotificationState"))
if mibBuilder.loadTexts: txRfSensorSummary.setStatus('current')
if mibBuilder.loadTexts: txRfSensorSummary.setDescription('RF sensor summary state.\n                \n                Possible values:\n                off(2)\n                fault(3)\n                warning(4)\n                ok(5)\n                \n                Notification class: fault')
txLocal = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 0, 5)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-TX-MIB", "txTransmitterNotificationPriority"), ("RS-XX9-TX-MIB", "txTransmitterNotificationState"))
if mibBuilder.loadTexts: txLocal.setStatus('current')
if mibBuilder.loadTexts: txLocal.setDescription('local/remote state of transmitter.\n                \n                Possible values:\n                off(2)   - remote\n                ok(5)    - local\n                \n                Notification class: info')
txExciterAutomaticOn = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 0, 6)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-TX-MIB", "txTransmitterNotificationPriority"), ("RS-XX9-TX-MIB", "txTransmitterNotificationState"))
if mibBuilder.loadTexts: txExciterAutomaticOn.setStatus('current')
if mibBuilder.loadTexts: txExciterAutomaticOn.setDescription('Shows whether the exciter automatic is activated.\n                \n                Possible values:\n                off(2) - not activated\n                ok(5)  - activated\n                \n                Notification class: info')
txExciterAutomaticReady = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 0, 7)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-TX-MIB", "txTransmitterNotificationPriority"), ("RS-XX9-TX-MIB", "txTransmitterNotificationState"))
if mibBuilder.loadTexts: txExciterAutomaticReady.setStatus('current')
if mibBuilder.loadTexts: txExciterAutomaticReady.setDescription('Indicates whether the automatic exciter switchover function is \n                ready. \n                \n                off(2) - not ready: The standby exciter is not operational, the \n                transmitter is switched off, the automatic switchover function \n                already switched over or there is a defect in the exciter switch.\n                ok(5)  - ready: The automatic switchover function is operational. \n                \n                Notification class: info\n                ')
txExciterAutomaticSwitchedOver = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 0, 8)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-TX-MIB", "txTransmitterNotificationPriority"), ("RS-XX9-TX-MIB", "txTransmitterNotificationState"))
if mibBuilder.loadTexts: txExciterAutomaticSwitchedOver.setStatus('current')
if mibBuilder.loadTexts: txExciterAutomaticSwitchedOver.setDescription('Indicates whether the exciter automatic switched\n                to a reserve exciter.\n                \n                Possible values:\n                off(2)     - not switched\n                warning(4) - switched\n                \n                Notification class: warning')
txExciterAutomaticRfSwitchSummary = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 0, 9)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-TX-MIB", "txTransmitterNotificationPriority"), ("RS-XX9-TX-MIB", "txTransmitterNotificationState"))
if mibBuilder.loadTexts: txExciterAutomaticRfSwitchSummary.setStatus('current')
if mibBuilder.loadTexts: txExciterAutomaticRfSwitchSummary.setDescription('RF switch summary state.\n                Indicates that the exciter switch does not work properly. \n                Check the two CAN-bus cables between exciter switch \n                and TCE900-Exciter A and B. Whether the cabling is ok \n                the exciter switch has to be replaced.\n                \n                Possible values:\n                ok(5)\n                ')
txExciterAutomaticSummary = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 0, 10))
if mibBuilder.loadTexts: txExciterAutomaticSummary.setStatus('current')
if mibBuilder.loadTexts: txExciterAutomaticSummary.setDescription('the sum state of the exciter automatic\n                \n                Possible values:\n                off(2) - automatic off\n                fault(3) - automatic fail or RfSwitch not connected\n                warning(4) - switchover occurred\n                ok(5) - ready\n                \n                Notification class: warning')
txActiveReserveExcAutoOn = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 0, 1000))
if mibBuilder.loadTexts: txActiveReserveExcAutoOn.setStatus('current')
if mibBuilder.loadTexts: txActiveReserveExcAutoOn.setDescription('Description.')
txActiveReserveExcAutoReady = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 0, 1001)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-TX-MIB", "txTransmitterNotificationPriority"), ("RS-XX9-TX-MIB", "txTransmitterNotificationState"))
if mibBuilder.loadTexts: txActiveReserveExcAutoReady.setStatus('current')
if mibBuilder.loadTexts: txActiveReserveExcAutoReady.setDescription('Indicates whether the automatic exciter switchover function is \n                ready. \n                \n                ok(5) - Ready: The automatic switchover function is operational. \n                off(2) - Not Ready: The standby exciter is not operational, the \n                transmitter is switched off, the automatic switchover function \n                already switched over or there is a defect in the exciter switch.\n                ')
txActiveReserveExcAutoSwitchedOver = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 0, 1002)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-TX-MIB", "txTransmitterNotificationPriority"), ("RS-XX9-TX-MIB", "txTransmitterNotificationState"))
if mibBuilder.loadTexts: txActiveReserveExcAutoSwitchedOver.setStatus('current')
if mibBuilder.loadTexts: txActiveReserveExcAutoSwitchedOver.setDescription('Description.')
txActiveReserveExcAutoRfSwitchSummary = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 0, 1003)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-TX-MIB", "txTransmitterNotificationPriority"), ("RS-XX9-TX-MIB", "txTransmitterNotificationState"))
if mibBuilder.loadTexts: txActiveReserveExcAutoRfSwitchSummary.setStatus('current')
if mibBuilder.loadTexts: txActiveReserveExcAutoRfSwitchSummary.setDescription('Indicates whether the exciter switch is working. If a switchover to \n                the standby exciter fails, an error is displayed.\n                ')
txActiveReserveExcAutoSummary = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 0, 1004)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-TX-MIB", "txTransmitterNotificationPriority"), ("RS-XX9-TX-MIB", "txTransmitterNotificationState"))
if mibBuilder.loadTexts: txActiveReserveExcAutoSummary.setStatus('current')
if mibBuilder.loadTexts: txActiveReserveExcAutoSummary.setDescription('Description.')
txActiveReserveOstAutoOn = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 0, 1500))
if mibBuilder.loadTexts: txActiveReserveOstAutoOn.setStatus('current')
if mibBuilder.loadTexts: txActiveReserveOstAutoOn.setDescription('Description.')
txActiveReserveOstAutoReady = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 0, 1501)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-TX-MIB", "txTransmitterNotificationPriority"), ("RS-XX9-TX-MIB", "txTransmitterNotificationState"))
if mibBuilder.loadTexts: txActiveReserveOstAutoReady.setStatus('current')
if mibBuilder.loadTexts: txActiveReserveOstAutoReady.setDescription('Description.')
txActiveReserveOstAutoSwitchedOver = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 0, 1502)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-TX-MIB", "txTransmitterNotificationPriority"), ("RS-XX9-TX-MIB", "txTransmitterNotificationState"))
if mibBuilder.loadTexts: txActiveReserveOstAutoSwitchedOver.setStatus('current')
if mibBuilder.loadTexts: txActiveReserveOstAutoSwitchedOver.setDescription('Description.')
txActiveReserveOstAutoRfSwitchSummary = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 0, 1503)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-TX-MIB", "txTransmitterNotificationPriority"), ("RS-XX9-TX-MIB", "txTransmitterNotificationState"))
if mibBuilder.loadTexts: txActiveReserveOstAutoRfSwitchSummary.setStatus('current')
if mibBuilder.loadTexts: txActiveReserveOstAutoRfSwitchSummary.setDescription('Description.')
txActiveReserveOstAutoSummary = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 0, 1504)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-TX-MIB", "txTransmitterNotificationPriority"), ("RS-XX9-TX-MIB", "txTransmitterNotificationState"))
if mibBuilder.loadTexts: txActiveReserveOstAutoSummary.setStatus('current')
if mibBuilder.loadTexts: txActiveReserveOstAutoSummary.setDescription('Description.')
txExciterSummary = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 0, 2000)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-TX-MIB", "txExciterNotificationPriority"), ("RS-XX9-TX-MIB", "txExciterNotificationState"))
if mibBuilder.loadTexts: txExciterSummary.setStatus('current')
if mibBuilder.loadTexts: txExciterSummary.setDescription('Exciter summary state.\n                \n                Possible values:\n                off(2)\n                fault(3)\n                warning(4)\n                ok(5)\n                \n                Notification class: fault')
txExciterLoop = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 0, 2001)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-TX-MIB", "txExciterNotificationPriority"), ("RS-XX9-TX-MIB", "txExciterNotificationState"))
if mibBuilder.loadTexts: txExciterLoop.setStatus('current')
if mibBuilder.loadTexts: txExciterLoop.setDescription('Indicates whether the protection loop is open.\n                \n                Possible values:\n                warning(4) - loop is open\n                ok(5)      - loop is closed\n                \n                Notification class: warning')
txExciterMute = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 0, 2002)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-TX-MIB", "txExciterNotificationPriority"), ("RS-XX9-TX-MIB", "txExciterNotificationState"))
if mibBuilder.loadTexts: txExciterMute.setStatus('current')
if mibBuilder.loadTexts: txExciterMute.setDescription('Indicates whether the RF output of the exciter is muted.\n                \n                Possible values:\n                warning(4) - mute\n                ok(5)      - no mute\n                \n                Notification class: warning')
txExciterOutputConnect = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 0, 2003)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-TX-MIB", "txExciterNotificationPriority"), ("RS-XX9-TX-MIB", "txExciterNotificationState"))
if mibBuilder.loadTexts: txExciterOutputConnect.setStatus('current')
if mibBuilder.loadTexts: txExciterOutputConnect.setDescription('Indicates whether a RF connection between\n                exciter output and amplifier input exists.\n                \n                Possible values:\n                fault(3) - no connection\n                ok(5)\n                \n                Notification class: fault')
txExciterRfState = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 0, 2004)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-TX-MIB", "txExciterNotificationPriority"), ("RS-XX9-TX-MIB", "txExciterNotificationState"))
if mibBuilder.loadTexts: txExciterRfState.setStatus('current')
if mibBuilder.loadTexts: txExciterRfState.setDescription('Indicates whether a RF signal with sufficient\n                level is output.\n                \n                Possible values:\n                off(2)     - no signal\n                fault(3)   - signal level lower fault limit\n                warning(4) - signal level lower warning limit\n                ok(5)      - signal level ok\n                \n                Notification class: fault')
txInpIfLogState = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 0, 3000)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-TX-MIB", "txInpIfNotificationPriority"), ("RS-XX9-TX-MIB", "txInpIfNotificationState"))
if mibBuilder.loadTexts: txInpIfLogState.setStatus('current')
if mibBuilder.loadTexts: txInpIfLogState.setDescription('State of logical input.\n                Indicates whether a valid serial data stream is being fed to the transmitter.\n                \n                Possible values:\n                off(2)     - no signal\n                fault(3)\n                warning(4)\n                ok(5)\n                \n                Notification class: fault')
txInpIfLogInfoPacket = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 0, 3001)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-TX-MIB", "txInpIfNotificationPriority"), ("RS-XX9-TX-MIB", "txInpIfNotificationState"))
if mibBuilder.loadTexts: txInpIfLogInfoPacket.setStatus('current')
if mibBuilder.loadTexts: txInpIfLogInfoPacket.setDescription('state of the information packet \n                (MIP, IIP or TCP: depends on transmitting standard).\n                \n                Possible values:\n                off(2)     - \n                fault(3)\n                warning(4)\n                ok(5)\n                \n                Notification class: fault')
txInpIfLogPacketLength = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 0, 3002)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-TX-MIB", "txInpIfNotificationPriority"), ("RS-XX9-TX-MIB", "txInpIfNotificationState"))
if mibBuilder.loadTexts: txInpIfLogPacketLength.setStatus('current')
if mibBuilder.loadTexts: txInpIfLogPacketLength.setDescription('Indicates whether the detected packet length can be used.\n                \n                Possible values:\n                off(2)\n                warning(4)\n                ok(5)\n                \n                Notification class: warning')
txInpIfIpState = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 0, 3003)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-TX-MIB", "txInpIfNotificationPriority"), ("RS-XX9-TX-MIB", "txInpIfNotificationState"))
if mibBuilder.loadTexts: txInpIfIpState.setStatus('current')
if mibBuilder.loadTexts: txInpIfIpState.setDescription('Indicates whether a valid data stream is fed\n                to the transmitter via the IP feed.\n                If an error is indicated, check the settings of the IP stream and the Ethernet interface.\n                \n                Possible values:\n                off(2)     - no stream\n                fault(3)\n                warning(4)\n                ok(5)\n                \n                Notification class: warning')
txInpIfIpInfoPacket = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 0, 3004)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-TX-MIB", "txInpIfNotificationPriority"), ("RS-XX9-TX-MIB", "txInpIfNotificationState"))
if mibBuilder.loadTexts: txInpIfIpInfoPacket.setStatus('current')
if mibBuilder.loadTexts: txInpIfIpInfoPacket.setDescription('Indicates the state of the information packet.\n                \n                Possible values:\n                off(2)     - \n                fault(3)\n                warning(4)\n                ok(5)\n                \n                Notification class: warning')
txInpIfIpPacketLength = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 0, 3005)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-TX-MIB", "txInpIfNotificationPriority"), ("RS-XX9-TX-MIB", "txInpIfNotificationState"))
if mibBuilder.loadTexts: txInpIfIpPacketLength.setStatus('current')
if mibBuilder.loadTexts: txInpIfIpPacketLength.setDescription('Indicates whether the detected packet length can be used.\n                \n                Possible values:\n                warning(4)\n                ok(5)\n                \n                Notification class: warning')
txInpIfTsState = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 0, 3006)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-TX-MIB", "txInpIfNotificationPriority"), ("RS-XX9-TX-MIB", "txInpIfNotificationState"))
if mibBuilder.loadTexts: txInpIfTsState.setStatus('current')
if mibBuilder.loadTexts: txInpIfTsState.setDescription('Indicates whether a valid serial data stream is fed\n                to the transmitter via TS1/2 IN (X20/X21).\n                If an error is displayed here, first check the setting of the TS type (ASI/SMPTE).\n                \n                Possible values:\n                off(2)     - no stream\n                fault(3)\n                warning(4)\n                ok(5)\n                \n                Notification class: warning')
txInpIfTsInfoPacket = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 0, 3007)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-TX-MIB", "txInpIfNotificationPriority"), ("RS-XX9-TX-MIB", "txInpIfNotificationState"))
if mibBuilder.loadTexts: txInpIfTsInfoPacket.setStatus('current')
if mibBuilder.loadTexts: txInpIfTsInfoPacket.setDescription('Indicates whether the control information required for SFN mode is \n                contained in the data stream. The displayed name depends on the \n                modulation standard. An error can also be displayed in MFN mode \n                if the coder settings are to be controlled automatically via the \n                transport stream.\n                \n                Possible values:\n                off(2)     - not required\n                fault(3)\n                warning(4)\n                ok(5)\n                \n                Notification class: warning')
txInpIfTsPacketLength = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 0, 3008)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-TX-MIB", "txInpIfNotificationPriority"), ("RS-XX9-TX-MIB", "txInpIfNotificationState"))
if mibBuilder.loadTexts: txInpIfTsPacketLength.setStatus('current')
if mibBuilder.loadTexts: txInpIfTsPacketLength.setDescription('Indicates whether the detected packet length cannot be used.\n                \n                Possible values:\n                warning(4)\n                ok(5)\n                \n                Notification class: warning')
txInpIfLogDatarateBufferUnderrun = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 0, 3009)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-TX-MIB", "txInpIfNotificationPriority"), ("RS-XX9-TX-MIB", "txInpIfNotificationState"))
if mibBuilder.loadTexts: txInpIfLogDatarateBufferUnderrun.setStatus('current')
if mibBuilder.loadTexts: txInpIfLogDatarateBufferUnderrun.setDescription('Indicates a too low datarate at this Input. In \n                SFNs the datarate is defined by the coder \n                settings. In MFNs the Input datarate might \n                be lower, but must not exceed the minimum \n                defined datarate by coder settings over a \n                longer period.\n                \n                Possible values:\n                off(2)\n                warning(4)\n                ok(5)\n                \n                Notification class: warning')
txInpIfLogDatarateBufferOverflow = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 0, 3010)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-TX-MIB", "txInpIfNotificationPriority"), ("RS-XX9-TX-MIB", "txInpIfNotificationState"))
if mibBuilder.loadTexts: txInpIfLogDatarateBufferOverflow.setStatus('current')
if mibBuilder.loadTexts: txInpIfLogDatarateBufferOverflow.setDescription('Indicates a too high datarate at this Input. In \n                SFNs the datarate is defined by the coder \n                settings. In MFNs the Input datarate must \n                not exceed the maximum defined datarate \n                by coder settings over a longer period.\n                \n                Possible values:\n                off(2)\n                warning(4)\n                ok(5)\n                \n                Notification class: warning')
txInpIfSatInputState = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 0, 3011)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-TX-MIB", "txInpIfNotificationPriority"), ("RS-XX9-TX-MIB", "txInpIfNotificationState"))
if mibBuilder.loadTexts: txInpIfSatInputState.setStatus('current')
if mibBuilder.loadTexts: txInpIfSatInputState.setDescription('Indicates whether a valid data stream is fed to the transmitter via the SAT feed. \n                \n                Possible values:\n                off(2) - no stream\n                fault(3)\n                warning(4)\n                ok(5)')
txInpIfSatInfoPacket = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 0, 3012)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-TX-MIB", "txInpIfNotificationPriority"), ("RS-XX9-TX-MIB", "txInpIfNotificationState"))
if mibBuilder.loadTexts: txInpIfSatInfoPacket.setStatus('current')
if mibBuilder.loadTexts: txInpIfSatInfoPacket.setDescription('Indicates the state of the information packet.\n                \n                Possible values:\n                off(2) - not required\n                fault(3)\n                warning(4)\n                ok(5)')
txInpIfSatPacketLength = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 0, 3013)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-TX-MIB", "txInpIfNotificationPriority"), ("RS-XX9-TX-MIB", "txInpIfNotificationState"))
if mibBuilder.loadTexts: txInpIfSatPacketLength.setStatus('current')
if mibBuilder.loadTexts: txInpIfSatPacketLength.setDescription('Indicates whether the detected packet length cannot be used.\n                \n                Possible values:\n                warning(4)\n                ok(5)')
txInpIfSatTransponderLocked = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 0, 3014)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-TX-MIB", "txInpIfNotificationPriority"), ("RS-XX9-TX-MIB", "txInpIfNotificationState"))
if mibBuilder.loadTexts: txInpIfSatTransponderLocked.setStatus('current')
if mibBuilder.loadTexts: txInpIfSatTransponderLocked.setDescription('Indicates if the DVB-S/S2 Receiver has locked to a signal.\n                \n                Possible values:\n                warning(4)\n                ok(5)')
txInpIfSatIpOutput = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 0, 3015)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-TX-MIB", "txInpIfNotificationPriority"), ("RS-XX9-TX-MIB", "txInpIfNotificationState"))
if mibBuilder.loadTexts: txInpIfSatIpOutput.setStatus('current')
if mibBuilder.loadTexts: txInpIfSatIpOutput.setDescription('Description.')
txInpIfSatReceiverState = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 0, 3016)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-TX-MIB", "txInpIfNotificationPriority"), ("RS-XX9-TX-MIB", "txInpIfNotificationState"))
if mibBuilder.loadTexts: txInpIfSatReceiverState.setStatus('current')
if mibBuilder.loadTexts: txInpIfSatReceiverState.setDescription('Description.\n                \n                Possible values:\n                off(2)\n                fault(3)\n                warning(4)\n                ok(5)')
txInpIfSatBtsStatus = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 0, 3017)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-TX-MIB", "txInpIfNotificationPriority"), ("RS-XX9-TX-MIB", "txInpIfNotificationState"))
if mibBuilder.loadTexts: txInpIfSatBtsStatus.setStatus('current')
if mibBuilder.loadTexts: txInpIfSatBtsStatus.setDescription('Description.\n                \n                Possible values:\n                off(2)\n                fault(3)\n                option not installed(4)\n                ok(5)\n                \n                Notification class: info')
txInpIfSatDriftStatus = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 0, 3018)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-TX-MIB", "txInpIfNotificationPriority"), ("RS-XX9-TX-MIB", "txInpIfNotificationState"))
if mibBuilder.loadTexts: txInpIfSatDriftStatus.setStatus('current')
if mibBuilder.loadTexts: txInpIfSatDriftStatus.setDescription('Indicates a warning when the difference between transponder frequency \n                and receive frequency (tuner frequency) is too high.\n                \n                Possible values:\n                off(2)\n                warning(4)\n                ok(5)\n                ')
txInpIfSatLinkMarginStatus = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 0, 3019)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-TX-MIB", "txInpIfNotificationPriority"), ("RS-XX9-TX-MIB", "txInpIfNotificationState"))
if mibBuilder.loadTexts: txInpIfSatLinkMarginStatus.setStatus('current')
if mibBuilder.loadTexts: txInpIfSatLinkMarginStatus.setDescription('Indicates whether the attenuation is low enough for failure-free operation. \n                The thresholds for generating a warning or a fault can be adjusted.\n                \n                Possible values:\n                off(2)\n                fault(3)\n                warning(4)\n                ok(5)\n                ')
txInpIfSatCarrierNoiseStatus = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 0, 3020)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-TX-MIB", "txInpIfNotificationPriority"), ("RS-XX9-TX-MIB", "txInpIfNotificationState"))
if mibBuilder.loadTexts: txInpIfSatCarrierNoiseStatus.setStatus('current')
if mibBuilder.loadTexts: txInpIfSatCarrierNoiseStatus.setDescription('Indicates whether the current carrier to noise ratio is below the warning limit. \n                \n                Possible values:\n                off(2)\n                fault(3)\n                warning(4)\n                ok(5)\n                ')
txInpIfSatStreamTsIdMatch = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 0, 3021)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-TX-MIB", "txTransmitterNotificationPriority"), ("RS-XX9-TX-MIB", "txTransmitterNotificationState"))
if mibBuilder.loadTexts: txInpIfSatStreamTsIdMatch.setStatus('current')
if mibBuilder.loadTexts: txInpIfSatStreamTsIdMatch.setDescription('Indicates whether the current TS ID is equal to the expected TS ID.\n                Changing the ID in transport stream leads to a warning. \n                Setting the expected TS ID to zero suppresses a warning.  \n                \n                ')
txInpAuto1Active = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 0, 4000)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-TX-MIB", "txInpAutoNotificationPriority"), ("RS-XX9-TX-MIB", "txInpAutoNotificationState"))
if mibBuilder.loadTexts: txInpAuto1Active.setStatus('current')
if mibBuilder.loadTexts: txInpAuto1Active.setDescription('Shows whether input1 or input2 is used for RF modulation.\n                \n                Possible values:\n                off(2) - input2 is active\n                ok(5)  - input1 is active\n                \n                Notification class: info')
txInpAutoState = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 0, 4001)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-TX-MIB", "txInpAutoNotificationPriority"), ("RS-XX9-TX-MIB", "txInpAutoNotificationState"))
if mibBuilder.loadTexts: txInpAutoState.setStatus('current')
if mibBuilder.loadTexts: txInpAutoState.setDescription('Indicates the state of the automatic input signal\n                switchover function.\n                \n                Possible values:\n                off(2)       - The automatic switchover function is not enabled.\n                warning(4)   - The automatic switchover function has switched over\n                               from the preferred input to the standby input.\n                ok(5)        - The automatic switchover function is ready to switch\n                               the current input over to the input currently not in\n                               use as soon as the input signal of the current input fails. \n                \n                Notification class: warning')
txFrqRegSummary = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 0, 5000)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-TX-MIB", "txFrqRegNotificationPriority"), ("RS-XX9-TX-MIB", "txFrqRegNotificationState"))
if mibBuilder.loadTexts: txFrqRegSummary.setStatus('current')
if mibBuilder.loadTexts: txFrqRegSummary.setDescription('Indicates the state of the reference used.\n                In single-frequency networks, a failure of the reference\n                can cause a malfunction and thus replacement of the exciter.\n                \n                Possible values:\n                off(2)     - txFrqRegSetupSource is manual(1)\n                fault(3)\n                warning(4)\n                ok(5)\n                \n                Notification class: warning')
txFrqRegCurrentSource = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 0, 5001)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-TX-MIB", "txFrqRegNotificationPriority"), ("RS-XX9-TX-MIB", "txFrqRegNotificationState"))
if mibBuilder.loadTexts: txFrqRegCurrentSource.setStatus('current')
if mibBuilder.loadTexts: txFrqRegCurrentSource.setDescription('Quality of current reference source.\n                \n                Possible values:\n                off(2)     - no signal\n                fault(3)  - missing\n                warning(4) - inaccurate\n                ok(5)      - good\n                \n                Notification class: warning')
txFrqRegSourceExtRef = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 0, 5002)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-TX-MIB", "txFrqRegNotificationPriority"), ("RS-XX9-TX-MIB", "txFrqRegNotificationState"))
if mibBuilder.loadTexts: txFrqRegSourceExtRef.setStatus('current')
if mibBuilder.loadTexts: txFrqRegSourceExtRef.setDescription('Indicates whether a reference signal is present\n                at the REF_IN (X64) jack at the TCE.\n                \n                Possible values:\n                off(2)     - no signal\n                fault(3)  - missing\n                warning(4) - inaccurate\n                ok(5)      - good\n                \n                Notification class: warning')
txFrqRegSourceExtPPS = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 0, 5003)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-TX-MIB", "txFrqRegNotificationPriority"), ("RS-XX9-TX-MIB", "txFrqRegNotificationState"))
if mibBuilder.loadTexts: txFrqRegSourceExtPPS.setStatus('current')
if mibBuilder.loadTexts: txFrqRegSourceExtPPS.setDescription('Indicates whether a seconds pulse is present\n                at the 1PPS_IN (X23) jack at the TCE.\n                \n                Possible values:\n                off(2)     - no signal\n                fault(3)  - missing\n                warning(4) - inaccurate\n                ok(5)      - good\n                \n                Notification class: warning')
txFrqRegSourceIntGPS = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 0, 5004)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-TX-MIB", "txFrqRegNotificationPriority"), ("RS-XX9-TX-MIB", "txFrqRegNotificationState"))
if mibBuilder.loadTexts: txFrqRegSourceIntGPS.setStatus('current')
if mibBuilder.loadTexts: txFrqRegSourceIntGPS.setDescription('Quality of the internal GPS reference source.\n                \n                Possible values:\n                off(2)     - no signal\n                fault(3)  - missing\n                warning(4) - inaccurate\n                ok(5)      - good\n                \n                Notification class: warning')
txSfnSummary = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 0, 6000)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-TX-MIB", "txSfnNotificationPriority"), ("RS-XX9-TX-MIB", "txSfnNotificationState"))
if mibBuilder.loadTexts: txSfnSummary.setStatus('current')
if mibBuilder.loadTexts: txSfnSummary.setDescription('Time synchronization summary.\n                Contains: time reference, time information, mode state\n                \n                Possible values:\n                off(2)\n                warning(4)\n                ok(5)      - on\n                \n                Notification class: warning')
txPrecorrLinSummary = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 0, 8000)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-TX-MIB", "txPrecorrNotificationPriority"), ("RS-XX9-TX-MIB", "txPrecorrNotificationState"))
if mibBuilder.loadTexts: txPrecorrLinSummary.setStatus('current')
if mibBuilder.loadTexts: txPrecorrLinSummary.setDescription('Linear precorrection summary state.\n                \n                Possible values:\n                off(2)\n                warning(4)\n                ok(5)\n                \n                Notification class: warning')
txPrecorrNonLinSummary = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 0, 8001)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-TX-MIB", "txPrecorrNotificationPriority"), ("RS-XX9-TX-MIB", "txPrecorrNotificationState"))
if mibBuilder.loadTexts: txPrecorrNonLinSummary.setStatus('current')
if mibBuilder.loadTexts: txPrecorrNonLinSummary.setDescription('Non linear precorrection summary state.\n                \n                Possible values:\n                off(2)\n                warning(4)\n                ok(5)\n                \n                Notification class: warning')
txPrecorrMerState = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 0, 8002)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-TX-MIB", "txPrecorrNotificationPriority"), ("RS-XX9-TX-MIB", "txPrecorrNotificationState"))
if mibBuilder.loadTexts: txPrecorrMerState.setStatus('current')
if mibBuilder.loadTexts: txPrecorrMerState.setDescription('Description.')
txOstSummary = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 0, 9000)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-TX-MIB", "txOstNotificationPriority"), ("RS-XX9-TX-MIB", "txOstNotificationState"))
if mibBuilder.loadTexts: txOstSummary.setStatus('current')
if mibBuilder.loadTexts: txOstSummary.setDescription('Output stage summary state.\n                \n                Possible values:\n                off(2)\n                fault(3)\n                warning(4)\n                ok(5)\n                \n                Notification class: fault')
txAmpSummary = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 0, 10000)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-TX-MIB", "txAmpNotificationPriority"), ("RS-XX9-TX-MIB", "txAmpNotificationState"))
if mibBuilder.loadTexts: txAmpSummary.setStatus('current')
if mibBuilder.loadTexts: txAmpSummary.setDescription('Amplifier summary state.\n                \n                Possible values:\n                off(2)\n                fault(3)\n                warning(4)\n                ok(5)\n                \n                Notification class: fault')
txAmpRfPowerFail = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 0, 10001)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-TX-MIB", "txAmpNotificationPriority"), ("RS-XX9-TX-MIB", "txAmpNotificationState"))
if mibBuilder.loadTexts: txAmpRfPowerFail.setStatus('current')
if mibBuilder.loadTexts: txAmpRfPowerFail.setDescription(' Indicates that the output power of the amplifier is more than \n                3 dB below the reference value.\n                \n                Possible values:\n                off(2)   - RF power ok\n                fault(3) - the output power of the amplifier is more than\n                           3 dB below the reference value.\n                \n                Notification class: fault')
txAmpReflection = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 0, 10002)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-TX-MIB", "txAmpNotificationPriority"), ("RS-XX9-TX-MIB", "txAmpNotificationState"))
if mibBuilder.loadTexts: txAmpReflection.setStatus('current')
if mibBuilder.loadTexts: txAmpReflection.setDescription('Indicates whether reflection at the RF output is becoming too great. \n                In this case, the antenna as well as the link between the amplifiers \n                and the antenna via the combiners and output-stage switches \n                (if present) must be checked.\n                \n                Possible values:\n                off(2)\n                warning(4) - reflection at the RF output is too great\n                \n                Notification class: warning')
txAmpSupplyFail = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 0, 10003)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-TX-MIB", "txAmpNotificationPriority"), ("RS-XX9-TX-MIB", "txAmpNotificationState"))
if mibBuilder.loadTexts: txAmpSupplyFail.setStatus('current')
if mibBuilder.loadTexts: txAmpSupplyFail.setDescription('Indicates whether the internal power supply units are functioning correctly. \n                \n                Possible values:\n                off(2)   - internal power supply units are functioning correctly\n                fault(3)\n                \n                Notification class: fault')
txAmpRfInFail = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 0, 10004)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-TX-MIB", "txAmpNotificationPriority"), ("RS-XX9-TX-MIB", "txAmpNotificationState"))
if mibBuilder.loadTexts: txAmpRfInFail.setStatus('current')
if mibBuilder.loadTexts: txAmpRfInFail.setDescription('Indicates that the amplifier is receiving an input signal, \n                the level of which is too low. \n                \n                - If this message occurs at all amplifiers at the same time, \n                  the fault is located at the exciter switch, splitter or exciter. \n                - If this fault occurs at only some of the amplifiers, the \n                  output level of the exciters and splitter must be checked. \n                - If the fault occurs at only one amplifier, the self-engaging \n                  connector of the RF signal on the rear panel of the amplifier \n                  must be checked for mechanical damage.\n                \n                Possible values:\n                off(2)\n                warning(4) - the amplifier is receiving an input signal,\n                             the level of which is too low\n                \n                Notification class: warning')
txAmpMute = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 0, 10005)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-TX-MIB", "txAmpNotificationPriority"), ("RS-XX9-TX-MIB", "txAmpNotificationState"))
if mibBuilder.loadTexts: txAmpMute.setStatus('current')
if mibBuilder.loadTexts: txAmpMute.setDescription('Indicates that the amplifier is suppressing its output signal. \n                This indicator appears in the following cases: \n                - No input signal \n                - During bias adjustment \n                - An external absorber signals that it is overheating.\n                \n                Possible values:\n                off(2)\n                warning(4) - the amplifier is suppressing its output signal\n                \n                Notification class: warning')
txAmpTemperatureFail = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 0, 10006)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-TX-MIB", "txAmpNotificationPriority"), ("RS-XX9-TX-MIB", "txAmpNotificationState"))
if mibBuilder.loadTexts: txAmpTemperatureFail.setStatus('current')
if mibBuilder.loadTexts: txAmpTemperatureFail.setDescription('Indicates that the amplifier is overheating internally. \n                - With liquid-cooled amplifiers, this fault can occur if \n                  the stop valves have been closed inadvertently. \n                - With air-cooled amplifiers, it must be checked whether \n                  the air inflow or outflow is obstructed or the inflow air \n                  temperature is too high.\n                \n                Possible values:\n                off(2)\n                fault(3) - the amplifier is overheating internally\n                \n                Notification class: fault')
txAmpTransistorFail = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 0, 10007)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-TX-MIB", "txAmpNotificationPriority"), ("RS-XX9-TX-MIB", "txAmpNotificationState"))
if mibBuilder.loadTexts: txAmpTransistorFail.setStatus('current')
if mibBuilder.loadTexts: txAmpTransistorFail.setDescription('Indicates that one or more driver or power transistors are defective. \n                Only personnel with the relevant special service training are \n                permitted to change the transistors.\n                \n                Possible values:\n                off(2)\n                fault(3) - one or more driver or power transistors are defective\n                \n                Notification class: fault')
txAmpRegulationFail = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 0, 10008)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-TX-MIB", "txAmpNotificationPriority"), ("RS-XX9-TX-MIB", "txAmpNotificationState"))
if mibBuilder.loadTexts: txAmpRegulationFail.setStatus('current')
if mibBuilder.loadTexts: txAmpRegulationFail.setDescription('This error occurs if the internal power regulation of the amplifier \n                reaches the limit of its control range. This indicates one or more \n                defective power transistors.\n                \n                Possible values:\n                off(2)\n                fault(3) - the internal power regulation of the amplifier\n                           reaches the limit of its control range\n                \n                Notification class: fault')
txAmpAcFail = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 0, 10009)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-TX-MIB", "txAmpNotificationPriority"), ("RS-XX9-TX-MIB", "txAmpNotificationState"))
if mibBuilder.loadTexts: txAmpAcFail.setStatus('current')
if mibBuilder.loadTexts: txAmpAcFail.setDescription('indicates if one of the power supplies are faulty. \n                A fault can only be indicated if the RF of transmitter \n                is switched on (Program=On).\n                \n                Possible values:\n                off(2)\n                warning(4) - one of the power supplies is faulty\n                \n                Notification class: warning')
txAmpDcFail = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 0, 10010)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-TX-MIB", "txAmpNotificationPriority"), ("RS-XX9-TX-MIB", "txAmpNotificationState"))
if mibBuilder.loadTexts: txAmpDcFail.setStatus('current')
if mibBuilder.loadTexts: txAmpDcFail.setDescription('Indicates whether one of the internal power supply units of the amplifier \n                is faulty (e.g. no DC voltage is being delivered). Detection of a fault is \n                only possible if the RF of the transmitter has been switched on (Program=On).\n                \n                Possible values:\n                off(2)\n                fault(3) - one of the internal power supply units of the amplifier is faulty\n                \n                Notification class: fault')
txAmpDriverFail = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 0, 10011)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-TX-MIB", "txAmpNotificationPriority"), ("RS-XX9-TX-MIB", "txAmpNotificationState"))
if mibBuilder.loadTexts: txAmpDriverFail.setStatus('obsolete')
if mibBuilder.loadTexts: txAmpDriverFail.setDescription('indicates that the driver transistors are damaged. \n                If this error occurs the amplifier has to be repaired \n                by trained service personnel\n                \n                Possible values:\n                off(2)\n                fault(3) - the driver transistors are damaged\n                \n                Notification class: fault')
txAmpLink = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 0, 10012)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-TX-MIB", "txAmpNotificationPriority"), ("RS-XX9-TX-MIB", "txAmpNotificationState"))
if mibBuilder.loadTexts: txAmpLink.setStatus('current')
if mibBuilder.loadTexts: txAmpLink.setDescription('status of the communication link to the TCE900. \n                \n                Possible values:\n                warning(4) - communication link is not ok \n                ok(5)      - communication link is ok\n                \n                Notification class: warning')
txAmpBiasFail = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 0, 10013)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-TX-MIB", "txAmpNotificationPriority"), ("RS-XX9-TX-MIB", "txAmpNotificationState"))
if mibBuilder.loadTexts: txAmpBiasFail.setStatus('current')
if mibBuilder.loadTexts: txAmpBiasFail.setDescription('Indicates a fault if the quiescent current of one or more transistors\n                cannot be adjusted.\n                \n                Possible values:\n                off(2)     - Amplifier error: There is a technical fault in the amplifier;\n                             the amplifier should be replaced.\n                fault(3)   - Adjustment has been aborted because a constant temperature has not\n                             settled in the amplifier. In this case, adjustment should be started\n                             again immediately after the fault has occurred.\n                warning(4) - Adjust error: There is a technical fault in the amplifier;\n                             the amplifier should be replaced.\n                ok(5)      - Automatic quiescent current adjustment has been performed properly.\n                \n                Notification class: warning')
txAmpInitFail = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 0, 10014)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-TX-MIB", "txAmpNotificationPriority"), ("RS-XX9-TX-MIB", "txAmpNotificationState"))
if mibBuilder.loadTexts: txAmpInitFail.setStatus('current')
if mibBuilder.loadTexts: txAmpInitFail.setDescription('Indicates a fault if the amplifier detects an internal fault at power ON. \n                If other faults are indicated at the same time, the cause of these \n                faults must be rectified first. If the InitFail fault still exists after \n                other faults have been rectified, the amplifier must be replaced. \n                \n                Possible values:\n                off(2)\n                fault(3) -  the amplifier detects an internal fault at power ON\n                \n                Notification class: warning')
txAmpAbsorberFail = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 0, 10015)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-TX-MIB", "txAmpNotificationPriority"), ("RS-XX9-TX-MIB", "txAmpNotificationState"))
if mibBuilder.loadTexts: txAmpAbsorberFail.setStatus('current')
if mibBuilder.loadTexts: txAmpAbsorberFail.setDescription('This warning is shown if overheating of a rack absorber is detected. \n                Normally, this warning is signaled by all amplifiers of a transmitter \n                simultaneously. If the warning is signaled by only one amplifier, \n                check the rack wiring.\n                \n                Possible values:\n                off(2)\n                warning(4) -  overheating of a rack absorber is detected\n                \n                Notification class: warning')
txAmpOn = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 0, 10016)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-TX-MIB", "txAmpNotificationPriority"), ("RS-XX9-TX-MIB", "txAmpNotificationState"))
if mibBuilder.loadTexts: txAmpOn.setStatus('current')
if mibBuilder.loadTexts: txAmpOn.setDescription('Indicates whether the amplifier has been switched on or off.\n                \n                Possible values:\n                off(2)\n                ok(5)\n                \n                Notification class: fault')
txAmpBlocking = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 0, 10017)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-TX-MIB", "txAmpNotificationPriority"), ("RS-XX9-TX-MIB", "txAmpNotificationState"))
if mibBuilder.loadTexts: txAmpBlocking.setStatus('current')
if mibBuilder.loadTexts: txAmpBlocking.setDescription('\n                \n                Possible values:\n                off(2)\n                fault(3)\n                \n                Notification class: fault')
txSwiCoSummary = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 0, 11000)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-TX-MIB", "txSwiCoNotificationPriority"), ("RS-XX9-TX-MIB", "txSwiCoNotificationState"))
if mibBuilder.loadTexts: txSwiCoSummary.setStatus('current')
if mibBuilder.loadTexts: txSwiCoSummary.setDescription('shows state of Switchless Combiner\n                Possible values:\n                off(2)\n                warn(4)\n                ok(5)\n                \n                Notification class: fault')
txSwiCoHwLink = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 0, 11001))
if mibBuilder.loadTexts: txSwiCoHwLink.setStatus('current')
if mibBuilder.loadTexts: txSwiCoHwLink.setDescription('Indicates whether there are data communications between the \n                transmitter and switchless combiner.\n                \n                Possible values:\n                off(2) - no connection to RCB\n                warn(4) - no connection to potentiometer\n                ok(5) - OK\n                \n                Notification class: warning')
txSwiCoHwWarn = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 0, 11002))
if mibBuilder.loadTexts: txSwiCoHwWarn.setStatus('current')
if mibBuilder.loadTexts: txSwiCoHwWarn.setDescription('Indicates whether the switchless combiner signals a warning. This \n                indication is identical to the indication on the control panel of the \n                switchless combiner.\n                \n                Possible values:\n                off(2) - no connection to RCB\n                warn(4) - no connection to potentiometer\n                ok(5) - OK\n                \n                Notification class: warning')
txSwiCoHwFault = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 0, 11003))
if mibBuilder.loadTexts: txSwiCoHwFault.setStatus('current')
if mibBuilder.loadTexts: txSwiCoHwFault.setDescription('Indicates whether the switchless combiner signals an error. This \n                indication is identical to the indication on the control panel of the \n                switchless combiner.\n                \n                Possible values:\n                off(2) - no connection to RCB\n                warn(4) - no connection to potentiometer\n                ok(5) - OK\n                \n                Notification class: warning')
txSwiCoHwLocal = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 0, 11004))
if mibBuilder.loadTexts: txSwiCoHwLocal.setStatus('current')
if mibBuilder.loadTexts: txSwiCoHwLocal.setDescription('Indicates whether the switchless combiner is in Local mode or Remote mode. \n                For the control to work, the switchless combiner has to be in Remote mode. \n                \n                Possible values:\n                off(2) - no connection to RCB\n                warn(4) - switchless combiner in local state\n                ok(5) - OK, switchless combiner in remote state\n                \n                Notification class: warning')
txSwiCoRcbFail = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 0, 11005)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-TX-MIB", "txSwiCoNotificationPriority"), ("RS-XX9-TX-MIB", "txSwiCoNotificationState"))
if mibBuilder.loadTexts: txSwiCoRcbFail.setStatus('current')
if mibBuilder.loadTexts: txSwiCoRcbFail.setDescription('Indicates whether the redundancy control board in the TCE900 system \n                control functions without errors.\n                \n                Possible values:\n                fault(3)\n                warning(4)\n                ok(5)\n                \n                Notification class: warning')
txSwiCoRfProbeFail = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 0, 11006)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-TX-MIB", "txSwiCoNotificationPriority"), ("RS-XX9-TX-MIB", "txSwiCoNotificationState"))
if mibBuilder.loadTexts: txSwiCoRfProbeFail.setStatus('current')
if mibBuilder.loadTexts: txSwiCoRfProbeFail.setDescription('Indicates whether the test point at the antenna output functions.\n                \n                Possible values:\n                fault(3)\n                warning(4) - warning or no link\n                ok(5)\n                \n                Notification class: warning')
txSwiCoRegulationSummary = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 0, 11007)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-TX-MIB", "txSwiCoNotificationPriority"), ("RS-XX9-TX-MIB", "txSwiCoNotificationState"))
if mibBuilder.loadTexts: txSwiCoRegulationSummary.setStatus('current')
if mibBuilder.loadTexts: txSwiCoRegulationSummary.setDescription('shows the regulation state of Switchless Combiner\n                Possible values:\n                fault(3)\n                warning(4) - warning or no link\n                ok(5)\n                \n                Notification class: warning')
txRfSensorLinkStatus = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 0, 12000)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-TX-MIB", "txTransmitterNotificationPriority"), ("RS-XX9-TX-MIB", "txTransmitterNotificationState"))
if mibBuilder.loadTexts: txRfSensorLinkStatus.setStatus('current')
if mibBuilder.loadTexts: txRfSensorLinkStatus.setDescription('A communication fault to RF Sensor is detected. \n                The CAN bus connection between sensor and \n                TCE900 should be checked.\n                \n                Possible values:\n                fault(3) - not connected\n                ok(5) - ok\n                \n                Notification class: warning')
txRfSensorCalibrated = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 0, 12001))
if mibBuilder.loadTexts: txRfSensorCalibrated.setStatus('current')
if mibBuilder.loadTexts: txRfSensorCalibrated.setDescription('The RF sensor is not calibrated. In multi-standard transmitters \n                the rf sensor has to be calibrated for each tv standard seperately')
rsXx9TxObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1))
txTransmitter = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 1))
txTransmitterNotificationTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 1, 1), )
if mibBuilder.loadTexts: txTransmitterNotificationTable.setStatus('current')
if mibBuilder.loadTexts: txTransmitterNotificationTable.setDescription('The context information/configuration for the\n                general transmitter status notifications.')
txTransmitterNotificationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 1, 1, 1), ).setIndexNames((0, "RS-XX9-TX-MIB", "txTransmitterNotificationTxIdx"), (0, "RS-XX9-TX-MIB", "txTransmitterNotificationIdx"))
if mibBuilder.loadTexts: txTransmitterNotificationEntry.setStatus('current')
if mibBuilder.loadTexts: txTransmitterNotificationEntry.setDescription('An entry in the txGeneralNotificationTable.')
txTransmitterNotificationTxIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 1, 1, 1, 1), IndexTransmitter())
if mibBuilder.loadTexts: txTransmitterNotificationTxIdx.setStatus('current')
if mibBuilder.loadTexts: txTransmitterNotificationTxIdx.setDescription('The transmitter index.')
txTransmitterNotificationIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 1, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 10), ValueRangeConstraint(1000, 1004), ValueRangeConstraint(1500, 1504), )))
if mibBuilder.loadTexts: txTransmitterNotificationIdx.setStatus('current')
if mibBuilder.loadTexts: txTransmitterNotificationIdx.setDescription('The notification number as below rsXx9TxNotifications.\n                This is a helper column and therefore not-accessible.')
txTransmitterNotificationName = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1000, 1001, 1002, 1003, 1004, 1500, 1501, 1502, 1503, 1504))).clone(namedValues=NamedValues(("txSummary", 1), ("txRF", 2), ("txReflection", 3), ("txRfSensorSummary", 4), ("txLocal", 5), ("txExciterAutomaticOn", 6), ("txExciterAutomaticReady", 7), ("txExciterAutomaticSwitchedOver", 8), ("txExciterAutomaticRfSwitchSummary", 9), ("txExciterAutomaticSummary", 10), ("txActiveReserveExcAutoOn", 1000), ("txActiveReserveExcAutoReady", 1001), ("txActiveReserveExcAutoSwitchedOver", 1002), ("txActiveReserveExcAutoRfSwitchSummary", 1003), ("txActiveReserveExcAutoSummary", 1004), ("txActiveReserveOstAutoOn", 1500), ("txActiveReserveOstAutoReady", 1501), ("txActiveReserveOstAutoSwitchedOver", 1502), ("txActiveReserveOstAutoRfSwitchSummary", 1503), ("txActiveReserveOstAutoSummary", 1504)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: txTransmitterNotificationName.setStatus('current')
if mibBuilder.loadTexts: txTransmitterNotificationName.setDescription('The notification number as an enumeration.\n                The enumeration correlates with the notifications under rsXx9TxNotifications.')
txTransmitterNotificationMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 1, 1, 1, 4), NotificationMask()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txTransmitterNotificationMask.setStatus('current')
if mibBuilder.loadTexts: txTransmitterNotificationMask.setDescription('See textual convention for details.')
txTransmitterNotificationPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 1, 1, 1, 5), NotificationPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txTransmitterNotificationPriority.setStatus('current')
if mibBuilder.loadTexts: txTransmitterNotificationPriority.setDescription('See textual convention for details.')
txTransmitterNotificationState = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 1, 1, 1, 6), NotificationState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txTransmitterNotificationState.setStatus('current')
if mibBuilder.loadTexts: txTransmitterNotificationState.setDescription('See textual convention for details.')
txTransmitterCommandsTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 1, 2), )
if mibBuilder.loadTexts: txTransmitterCommandsTable.setStatus('current')
if mibBuilder.loadTexts: txTransmitterCommandsTable.setDescription('General transmitter settings.')
txTransmitterCommandsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 1, 2, 1), ).setIndexNames((0, "RS-XX9-TX-MIB", "txTransmitterNotificationTxIdx"))
if mibBuilder.loadTexts: txTransmitterCommandsEntry.setStatus('current')
if mibBuilder.loadTexts: txTransmitterCommandsEntry.setDescription('An entry in the txGeneralCommandsTable table.')
txTransCmdReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 1, 2, 1, 1), Trigger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txTransCmdReset.setStatus('current')
if mibBuilder.loadTexts: txTransCmdReset.setDescription('Switch used to reset all faults stored in the transmitter. \n                Stored faults are: Reflection Fail. Resetting stored faults can cause \n                automatic redundancy functions, which are currently in the \n                switched-over state, to switch back to their original preselected state.\n                ')
txTransCmdOperationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 1, 2, 1, 2), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txTransCmdOperationMode.setStatus('current')
if mibBuilder.loadTexts: txTransCmdOperationMode.setDescription('Switch used to switch the components in the program path of the \n                transmitter on and off.\n                ')
txTransCmdNominalPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 1, 2, 1, 3), Unsigned32()).setUnits('milli W').setMaxAccess("readwrite")
if mibBuilder.loadTexts: txTransCmdNominalPower.setStatus('current')
if mibBuilder.loadTexts: txTransCmdNominalPower.setDescription('The nominal power of the transmitter must be set here. \n                The nominal power is defined by the number and type of \n                amplifiers as well as by the used TV standard.\n                ')
txTransCmdReserveOpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 1, 2, 1, 4), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txTransCmdReserveOpMode.setStatus('current')
if mibBuilder.loadTexts: txTransCmdReserveOpMode.setDescription("Switch used to switch all components in the standby path of the \n                transmitter on and off. \n                (standby exciter with 'dual drive' redundancy concept and standby \n                output stage with 'active PA Reserve' redundancy concept).\n                ")
txTransCmdChangeModulation = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 1, 2, 1, 5), Xx9ModulationMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txTransCmdChangeModulation.setStatus('current')
if mibBuilder.loadTexts: txTransCmdChangeModulation.setDescription('Changes the modulation mode of the transmitter (without rebootint).\n                Get requests will return none(2). \n                A Set request with the desired modulation mode does trigger a modulation mode switch.\n                A modulation mode switch does only happen, if the mode is switching to one of the\n                preconfigured modulation modes (txTransStPrimaryModMode or txTransStPrimaryModMode). ')
txTransCmdReflectionCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("keepRfOff", 1), ("checkThreeTimes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txTransCmdReflectionCheck.setStatus('current')
if mibBuilder.loadTexts: txTransCmdReflectionCheck.setDescription('Description.')
txTransCmdPrgOnAfterSumFault = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 1, 2, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txTransCmdPrgOnAfterSumFault.setStatus('current')
if mibBuilder.loadTexts: txTransCmdPrgOnAfterSumFault.setDescription('Description.')
txTransCmdWarnOnDohertyMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 1, 2, 1, 8), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txTransCmdWarnOnDohertyMismatch.setStatus('current')
if mibBuilder.loadTexts: txTransCmdWarnOnDohertyMismatch.setDescription('Description.\n                \n                only has an effect on transmitters with doherty amplifiers.')
txTransmitterStateTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 1, 3), )
if mibBuilder.loadTexts: txTransmitterStateTable.setStatus('current')
if mibBuilder.loadTexts: txTransmitterStateTable.setDescription('General transmitter status.')
txTransmitterStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 1, 3, 1), ).setIndexNames((0, "RS-XX9-TX-MIB", "txTransmitterNotificationTxIdx"))
if mibBuilder.loadTexts: txTransmitterStateEntry.setStatus('current')
if mibBuilder.loadTexts: txTransmitterStateEntry.setDescription('An entry in the txTransmitterStateTable.')
txTransStForwardPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 1, 3, 1, 1), Unsigned32()).setUnits('milli W').setMaxAccess("readonly")
if mibBuilder.loadTexts: txTransStForwardPower.setStatus('current')
if mibBuilder.loadTexts: txTransStForwardPower.setDescription('Forward power of the transmitter.')
txTransStReflectedPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 1, 3, 1, 2), Unsigned32()).setUnits('milli W').setMaxAccess("readonly")
if mibBuilder.loadTexts: txTransStReflectedPower.setStatus('current')
if mibBuilder.loadTexts: txTransStReflectedPower.setDescription('Reflected power of the transmitter.')
txTransStModulationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 1, 3, 1, 3), Xx9ModulationMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txTransStModulationMode.setStatus('current')
if mibBuilder.loadTexts: txTransStModulationMode.setDescription('Modulation mode of the transmitter.')
txTransStPrimaryModMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 1, 3, 1, 4), Xx9ModulationMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txTransStPrimaryModMode.setStatus('current')
if mibBuilder.loadTexts: txTransStPrimaryModMode.setDescription('Configured primary modulation mode of the transmitter.')
txTransStSecondaryModMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 1, 3, 1, 5), Xx9ModulationMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txTransStSecondaryModMode.setStatus('current')
if mibBuilder.loadTexts: txTransStSecondaryModMode.setDescription('Configured secondary modulation mode of the transmitter.')
txTransStPaEfficiency = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-999, 999))).setUnits('per mille').setMaxAccess("readonly")
if mibBuilder.loadTexts: txTransStPaEfficiency.setStatus('current')
if mibBuilder.loadTexts: txTransStPaEfficiency.setDescription('Shows efficiency of all amplifiers \n                (including loss of combiners \n                but without power consumption of \n                TCE900 and cooling system)\n                \n                values <0 are invalid, because \n                PA-efficiency could not be calculated')
txExciterAutomaticTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 1, 4), )
if mibBuilder.loadTexts: txExciterAutomaticTable.setStatus('current')
if mibBuilder.loadTexts: txExciterAutomaticTable.setDescription('Exciter automatic configuration and status.')
txExciterAutomaticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 1, 4, 1), ).setIndexNames((0, "RS-XX9-TX-MIB", "txTransmitterNotificationTxIdx"))
if mibBuilder.loadTexts: txExciterAutomaticEntry.setStatus('current')
if mibBuilder.loadTexts: txExciterAutomaticEntry.setDescription('An entry in the txExciterAutomaticTable.')
txExcAutoOperationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 1, 4, 1, 1), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txExcAutoOperationMode.setStatus('current')
if mibBuilder.loadTexts: txExcAutoOperationMode.setDescription('Switches the automatic exciter switchover on and off. ')
txExciterAutomaticMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 1, 4, 1, 2), AutomaticMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txExciterAutomaticMode.setStatus('current')
if mibBuilder.loadTexts: txExciterAutomaticMode.setDescription("Determines the behavior after successfully switching over to a \n                standby exciter. \n                \n                singleShot(2)   - The selector of the automatic exciter switchover \n                remains fixed on the standby exciter until either the preselection \n                of the exciter is pressed again or the 'Reset Faults Transmitter' \n                button is pressed. \n                severalTimes(1) - The automatic switchover automatically switches \n                back to the preselected exciter as soon as the standby exciter \n                signals an error and the preselected exciter is operational again.\n                ")
txExcAutoGuardTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 1, 4, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setUnits('second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: txExcAutoGuardTime.setStatus('current')
if mibBuilder.loadTexts: txExcAutoGuardTime.setDescription("Indicates the configured checkout time which must elapse before \n                being able to switch to another exciter. This can be used to make \n                sure that short-term errors do not immediately cause a switchover. \n                The Guard Time is also effective for switching over to the \n                preselected exciter in the 'Multiple Switch' switch mode. The \n                setting can be changed here.\n                ")
txExcAutoPreselectExcA = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 1, 4, 1, 4), Trigger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txExcAutoPreselectExcA.setStatus('current')
if mibBuilder.loadTexts: txExcAutoPreselectExcA.setDescription('Preselect exciter A.')
txExcAutoPreselectExcB = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 1, 4, 1, 5), Trigger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txExcAutoPreselectExcB.setStatus('current')
if mibBuilder.loadTexts: txExcAutoPreselectExcB.setDescription('Preselect exciter B.')
txExcAutoPreselected = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 1, 4, 1, 6), IndexAB()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txExcAutoPreselected.setStatus('current')
if mibBuilder.loadTexts: txExcAutoPreselected.setDescription("The preselected exciter.\n                \n                Indicates which exciter has been preselected for operation. \n                If the 'Switch Mode' of the automatic switchover function is \n                configured to 'Single Switch' and the exciter switched over, \n                the switchover can be undone by selecting the preselected \n                exciter again.\n                ")
txExcAutoRfSwitchPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 1, 4, 1, 7), IndexAB()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txExcAutoRfSwitchPosition.setStatus('current')
if mibBuilder.loadTexts: txExcAutoRfSwitchPosition.setDescription('The active exciter.')
txActiveReserve = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 1, 5))
txActiveReserveExciterTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 1, 5, 1), )
if mibBuilder.loadTexts: txActiveReserveExciterTable.setStatus('current')
if mibBuilder.loadTexts: txActiveReserveExciterTable.setDescription('Description.')
txActiveReserveExciterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 1, 5, 1, 1), ).setIndexNames((0, "RS-XX9-TX-MIB", "txTransmitterNotificationTxIdx"))
if mibBuilder.loadTexts: txActiveReserveExciterEntry.setStatus('current')
if mibBuilder.loadTexts: txActiveReserveExciterEntry.setDescription('Description.')
txArExcAutomaticOperationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 1, 5, 1, 1, 1), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txArExcAutomaticOperationMode.setStatus('current')
if mibBuilder.loadTexts: txArExcAutomaticOperationMode.setDescription('Switches the automatic exciter switchover on and off. ')
txArExcAutomaticMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 1, 5, 1, 1, 2), AutomaticMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txArExcAutomaticMode.setStatus('current')
if mibBuilder.loadTexts: txArExcAutomaticMode.setDescription("Determines the behavior after successfully switching over to a \n                standby exciter. \n                \n                singleShot(2)   - The automatic exciter switchover selector remains \n                fixed to the standby exciter until the 'Recommend Selection' button \n                is pressed. \n                severalTimes(1) - The automatic switchover automatically switches \n                back to the preselected exciter as soon as the standby exciter \n                signals an error and the preselected exciter is operational again.\n                ")
txArExcAutomaticGuardTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 1, 5, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setUnits('second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: txArExcAutomaticGuardTime.setStatus('current')
if mibBuilder.loadTexts: txArExcAutomaticGuardTime.setDescription("Indicates the configured checkout time which must elapse before \n                being able to switch to another exciter. This can be used to make \n                sure that short-term errors do not immediately cause a switchover. \n                The Guard Time is also effective for switching over to the preselected \n                exciter in the 'Multiple Switch' switch mode. The setting can be \n                changed here.")
txArPreselectExcA = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 1, 5, 1, 1, 4), Trigger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txArPreselectExcA.setStatus('current')
if mibBuilder.loadTexts: txArPreselectExcA.setDescription('Description.')
txArPreselectExcB = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 1, 5, 1, 1, 5), Trigger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txArPreselectExcB.setStatus('current')
if mibBuilder.loadTexts: txArPreselectExcB.setDescription('Description.')
txArExcPreselected = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 1, 5, 1, 1, 6), IndexAB()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txArExcPreselected.setStatus('current')
if mibBuilder.loadTexts: txArExcPreselected.setDescription("Indicates which exciter has been preselected for operation. \n                The setting can be changed here. If the 'Switch Mode' of the \n                automatic switchover function is configured to 'Single Switch' \n                and the exciter switched over, the switchover can be undone \n                by selecting the preselected exciter again.\n                ")
txArExcSelected = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 1, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("exciterA", 1), ("exciterB", 2), ("undefined", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: txArExcSelected.setStatus('current')
if mibBuilder.loadTexts: txArExcSelected.setDescription('Indicates which exciter is currently active, i.e. is working on the \n                antenna depending on the switch state of the automatic exciter \n                switchover.\n                ')
txActiveReserveOstTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 1, 5, 2), )
if mibBuilder.loadTexts: txActiveReserveOstTable.setStatus('current')
if mibBuilder.loadTexts: txActiveReserveOstTable.setDescription('Description.')
txActiveReserveOstEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 1, 5, 2, 1), ).setIndexNames((0, "RS-XX9-TX-MIB", "txTransmitterNotificationTxIdx"))
if mibBuilder.loadTexts: txActiveReserveOstEntry.setStatus('current')
if mibBuilder.loadTexts: txActiveReserveOstEntry.setDescription('Description.')
txArOstAutomaticOperationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 1, 5, 2, 1, 1), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txArOstAutomaticOperationMode.setStatus('current')
if mibBuilder.loadTexts: txArOstAutomaticOperationMode.setDescription('Switches on and off the output-stage switchover function. ')
txArOstAutomaticMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 1, 5, 2, 1, 2), AutomaticMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txArOstAutomaticMode.setStatus('current')
if mibBuilder.loadTexts: txArOstAutomaticMode.setDescription("Determines the behavior after successfully removing an output \n                stage from the signal path. \n                \n                singleShot(2)   - The output stage switch remains permanently fixed \n                in the new position until either the configuration of the output stage \n                is reset or until the 'Reset Faults Transmitter' button is pressed. \n                severalTimes(1) - The automatic switchover function automatically \n                switches the formerly defective output stage back into the signal path.\n                ")
txArOstAutomaticGuardTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 1, 5, 2, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setUnits('second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: txArOstAutomaticGuardTime.setStatus('current')
if mibBuilder.loadTexts: txArOstAutomaticGuardTime.setDescription("Indicates the configured checkout time which must elapse \n                before an output stage is removed from the signal path. \n                This can be used to make sure that short-term errors do \n                not cause toggling. The Guard Time is also effective in the \n                'Multiple Switch' switch mode for switching over to the \n                preselected configuration of the output stages. The setting \n                can be changed here.\n                ")
txArPreselectOstAOstBtoAnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 1, 5, 2, 1, 4), Trigger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txArPreselectOstAOstBtoAnt.setStatus('current')
if mibBuilder.loadTexts: txArPreselectOstAOstBtoAnt.setDescription('Description.')
txArPreselectOstAOstBtoDl = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 1, 5, 2, 1, 5), Trigger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txArPreselectOstAOstBtoDl.setStatus('current')
if mibBuilder.loadTexts: txArPreselectOstAOstBtoDl.setDescription('Description.')
txArPreselectOstAtoAntOstBtoDl = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 1, 5, 2, 1, 6), Trigger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txArPreselectOstAtoAntOstBtoDl.setStatus('current')
if mibBuilder.loadTexts: txArPreselectOstAtoAntOstBtoDl.setDescription('Description.')
txArPreselectOstAtoDlOstBtoAnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 1, 5, 2, 1, 7), Trigger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txArPreselectOstAtoDlOstBtoAnt.setStatus('current')
if mibBuilder.loadTexts: txArPreselectOstAtoDlOstBtoAnt.setDescription('Description.')
txArOstPreselected = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 1, 5, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ostAandOstBtoAntenna", 1), ("ostAandOstBtoDummyload", 2), ("ostAtoAntennaAndOstBtoDummyload", 3), ("ostAtoDummyloadAndOstBtoAntenna", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: txArOstPreselected.setStatus('current')
if mibBuilder.loadTexts: txArOstPreselected.setDescription('Indicates how the two Output Stages A and B are to be \n                interconnected to each other.')
txArOstSelected = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 1, 5, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ostAandOstBtoAntenna", 1), ("ostAandOstBtoDummyload", 2), ("ostAtoAntennaAndOstBtoDummyload", 3), ("ostAtoDummyloadAndOstBtoAntenna", 4), ("undefined", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: txArOstSelected.setStatus('current')
if mibBuilder.loadTexts: txArOstSelected.setDescription('\n                5=Undefined, \n                1=Ost A+B->Ant, \n                2=A+B->DL, \n                3=A->Ant /B->DL, \n                4=B->Ant /A->DL\n                ')
txExciter = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 2))
txExciterNotificationTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 2, 1), )
if mibBuilder.loadTexts: txExciterNotificationTable.setStatus('current')
if mibBuilder.loadTexts: txExciterNotificationTable.setDescription('The context information/configuration for the\n                exciter status notifications.')
txExciterNotificationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 2, 1, 1), ).setIndexNames((0, "RS-XX9-TX-MIB", "txExciterNotificationTxIdx"), (0, "RS-XX9-TX-MIB", "txExciterNotificationExcIdx"), (0, "RS-XX9-TX-MIB", "txExciterNotificationIdx"))
if mibBuilder.loadTexts: txExciterNotificationEntry.setStatus('current')
if mibBuilder.loadTexts: txExciterNotificationEntry.setDescription('An entry in the txExciterNotificationTable.')
txExciterNotificationTxIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 2, 1, 1, 1), IndexTransmitter())
if mibBuilder.loadTexts: txExciterNotificationTxIdx.setStatus('current')
if mibBuilder.loadTexts: txExciterNotificationTxIdx.setDescription('The transmitter index.')
txExciterNotificationExcIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 2, 1, 1, 2), IndexAB())
if mibBuilder.loadTexts: txExciterNotificationExcIdx.setStatus('current')
if mibBuilder.loadTexts: txExciterNotificationExcIdx.setDescription('This index distinguishes the exiters.\n                Necessary if you have dual drive transmitters.')
txExciterNotificationIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 2, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2000, 2004)))
if mibBuilder.loadTexts: txExciterNotificationIdx.setStatus('current')
if mibBuilder.loadTexts: txExciterNotificationIdx.setDescription('The notification number as below rsXx9TxNotifications.\n                This is a helper column and therefore not-accessible.')
txExciterNotificationName = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2000, 2001, 2002, 2003, 2004))).clone(namedValues=NamedValues(("txExciterSummary", 2000), ("txExciterLoop", 2001), ("txExciterMute", 2002), ("txExciterOutputConnect", 2003), ("txExciterRfState", 2004)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: txExciterNotificationName.setStatus('current')
if mibBuilder.loadTexts: txExciterNotificationName.setDescription('The notification number as an enumeration.\n                The enumeration correlates with the notifications under rsXx9TxNotifications.')
txExciterNotificationMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 2, 1, 1, 5), NotificationMask()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txExciterNotificationMask.setStatus('current')
if mibBuilder.loadTexts: txExciterNotificationMask.setDescription('See textual convention for details.')
txExciterNotificationPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 2, 1, 1, 6), NotificationPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txExciterNotificationPriority.setStatus('current')
if mibBuilder.loadTexts: txExciterNotificationPriority.setDescription('See textual convention for details.')
txExciterNotificationState = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 2, 1, 1, 7), NotificationState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txExciterNotificationState.setStatus('current')
if mibBuilder.loadTexts: txExciterNotificationState.setDescription('See textual convention for details.')
txExciterCommandsTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 2, 2), )
if mibBuilder.loadTexts: txExciterCommandsTable.setStatus('current')
if mibBuilder.loadTexts: txExciterCommandsTable.setDescription('Exciter settings.')
txExciterCommandsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 2, 2, 1), ).setIndexNames((0, "RS-XX9-TX-MIB", "txExciterNotificationTxIdx"), (0, "RS-XX9-TX-MIB", "txExciterNotificationExcIdx"))
if mibBuilder.loadTexts: txExciterCommandsEntry.setStatus('current')
if mibBuilder.loadTexts: txExciterCommandsEntry.setDescription('An entry in the txExciterCommandsTable.')
txExcCmdFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 2, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(87500000, 108000000), ValueRangeConstraint(160000000, 870000000), ))).setUnits('Hz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: txExcCmdFrequency.setStatus('current')
if mibBuilder.loadTexts: txExcCmdFrequency.setDescription('The transmitter frequency.\n                Its interpretation is modulation dependent:\n                DVB-T, DVB-T2, DTMB, DAB, ISDB-T - channel center frequency\n                ATSC - pilot carrier frequency\n                ATV  - video carrier frequency\n                FM   - carrier frequency\n                \n                For band II transmitters the range is 87500000 - 108000000 Hz.\n                For all other transmitters the range is 160000000 - 870000000 Hz.')
txExcCmdModulationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 2, 2, 1, 2), Xx9ModulationMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txExcCmdModulationMode.setStatus('current')
if mibBuilder.loadTexts: txExcCmdModulationMode.setDescription('Modulation mode of the exciter.')
txExcCmdRfSlope = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-20, 20))).setUnits('centi Bel').setMaxAccess("readwrite")
if mibBuilder.loadTexts: txExcCmdRfSlope.setStatus('current')
if mibBuilder.loadTexts: txExcCmdRfSlope.setDescription('Corrects a slope in amplitude spectrum.\n                \n                Not for band 2.')
txExcCmdOutputAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("dB0", 1), ("dB3", 2), ("dB6", 3), ("dB9", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txExcCmdOutputAttenuation.setStatus('current')
if mibBuilder.loadTexts: txExcCmdOutputAttenuation.setDescription('Used to attenuate the RF level of exciter up to 9dB:\n                dB0(1) - 0 dB\n                dB3(2) - 3 dB\n                dB6(3) - 6 dB\n                dB9(4) - 9 dB')
txExcCmdLoopControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("limited", 1), ("full", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txExcCmdLoopControl.setStatus('current')
if mibBuilder.loadTexts: txExcCmdLoopControl.setDescription('Description.')
txExcCmdOperationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 2, 2, 1, 6), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txExcCmdOperationMode.setStatus('current')
if mibBuilder.loadTexts: txExcCmdOperationMode.setDescription('Switch used to switch the exciter on and off.\n                Directly affects the output of the exciter.\n                Use this command only in exciter-only configuration (no TxControl available).\n                misuse might lead to hardware damage.\n                For changing the operationMode of an exciter within a transmitter,\n                always prefer txTransCmdOperationMode over txExcCmdOperationMode.\n                ')
txExciterStateTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 2, 3), )
if mibBuilder.loadTexts: txExciterStateTable.setStatus('current')
if mibBuilder.loadTexts: txExciterStateTable.setDescription('Exciter status.')
txExciterStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 2, 3, 1), ).setIndexNames((0, "RS-XX9-TX-MIB", "txExciterNotificationTxIdx"), (0, "RS-XX9-TX-MIB", "txExciterNotificationExcIdx"))
if mibBuilder.loadTexts: txExciterStateEntry.setStatus('current')
if mibBuilder.loadTexts: txExciterStateEntry.setDescription('An entry in the txExciterStateTable.')
txExcStOperationOn = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 2, 3, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txExcStOperationOn.setStatus('current')
if mibBuilder.loadTexts: txExcStOperationOn.setDescription('State of exciter operation mode:\n                true(1)  - on\n                false(2) - off')
txInputInterfaces = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3))
txInpIfNotificationTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 1), )
if mibBuilder.loadTexts: txInpIfNotificationTable.setStatus('current')
if mibBuilder.loadTexts: txInpIfNotificationTable.setDescription('The context information/configuration for the\n                input interface status notifications.')
txInpIfNotificationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 1, 1), ).setIndexNames((0, "RS-XX9-TX-MIB", "txInpIfNotificationTxIdx"), (0, "RS-XX9-TX-MIB", "txInpIfNotificationExcIdx"), (0, "RS-XX9-TX-MIB", "txInpIfNotificationInputIdx"), (0, "RS-XX9-TX-MIB", "txInpIfNotificationIdx"))
if mibBuilder.loadTexts: txInpIfNotificationEntry.setStatus('current')
if mibBuilder.loadTexts: txInpIfNotificationEntry.setDescription('An entry in the txInpIfNotificationTable.')
txInpIfNotificationTxIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 1, 1, 1), IndexTransmitter())
if mibBuilder.loadTexts: txInpIfNotificationTxIdx.setStatus('current')
if mibBuilder.loadTexts: txInpIfNotificationTxIdx.setDescription('The transmitter index.')
txInpIfNotificationExcIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 1, 1, 2), IndexAB())
if mibBuilder.loadTexts: txInpIfNotificationExcIdx.setStatus('current')
if mibBuilder.loadTexts: txInpIfNotificationExcIdx.setDescription('This index distinguishes the exiters.\n                Necessary if you have dual drive transmitters.')
txInpIfNotificationInputIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("input1", 1), ("input2", 2))))
if mibBuilder.loadTexts: txInpIfNotificationInputIdx.setStatus('current')
if mibBuilder.loadTexts: txInpIfNotificationInputIdx.setDescription('Input index.\n                For txInpIfState(4000) it names the logical input,\n                for the others the physical input.')
txInpIfNotificationIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(3000, 3021)))
if mibBuilder.loadTexts: txInpIfNotificationIdx.setStatus('current')
if mibBuilder.loadTexts: txInpIfNotificationIdx.setDescription('The notification number as below rsXx9TxNotifications.\n                This is a helper column and therefore not-accessible.')
txInpIfNotificationName = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3000, 3001, 3002, 3003, 3004, 3005, 3006, 3007, 3008, 3009, 3010, 3011, 3012, 3013, 3014, 3015, 3016, 3017, 3018, 3019, 3020, 3021))).clone(namedValues=NamedValues(("txInpIfLogState", 3000), ("txInpIfLogInfoPacket", 3001), ("txInpIfLogPacketLength", 3002), ("txInpIfIpState", 3003), ("txInpIfIpInfoPacket", 3004), ("txInpIfIpPacketLength", 3005), ("txInpIfTsState", 3006), ("txInpIfTsInfoPacket", 3007), ("txInpIfTsPacketLength", 3008), ("txInpIfLogDatarateBufferUnderrun", 3009), ("txInpIfLogDatarateBufferOverflow", 3010), ("txInpIfSatInputState", 3011), ("txInpIfSatInfoPacket", 3012), ("txInpIfSatPacketLength", 3013), ("txInpIfSatTransponderLocked", 3014), ("txInpIfSatIpOutput", 3015), ("txInpIfSatReceiverState", 3016), ("txInpIfSatBtsStatus", 3017), ("txInpIfSatDriftStatus", 3018), ("txInpIfSatLinkMarginStatus", 3019), ("txInpIfSatCarrierNoiseStatus", 3020), ("txInpIfSatStreamTsIdMatch", 3021)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: txInpIfNotificationName.setStatus('current')
if mibBuilder.loadTexts: txInpIfNotificationName.setDescription('The notification number as an enumeration.\n                The enumeration correlates with the notifications under rsXx9TxNotifications.')
txInpIfNotificationMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 1, 1, 6), NotificationMask()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txInpIfNotificationMask.setStatus('current')
if mibBuilder.loadTexts: txInpIfNotificationMask.setDescription('See textual convention for details.')
txInpIfNotificationPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 1, 1, 7), NotificationPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txInpIfNotificationPriority.setStatus('current')
if mibBuilder.loadTexts: txInpIfNotificationPriority.setDescription('See textual convention for details.')
txInpIfNotificationState = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 1, 1, 8), NotificationState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txInpIfNotificationState.setStatus('current')
if mibBuilder.loadTexts: txInpIfNotificationState.setDescription('See textual convention for details.')
txInpGeneralSetupTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 2), )
if mibBuilder.loadTexts: txInpGeneralSetupTable.setStatus('current')
if mibBuilder.loadTexts: txInpGeneralSetupTable.setDescription('General input settings.')
txInpGeneralSetupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 2, 1), ).setIndexNames((0, "RS-XX9-TX-MIB", "txInpIfNotificationTxIdx"), (0, "RS-XX9-TX-MIB", "txInpIfNotificationExcIdx"), (0, "RS-XX9-TX-MIB", "txInpIfNotificationInputIdx"))
if mibBuilder.loadTexts: txInpGeneralSetupEntry.setStatus('current')
if mibBuilder.loadTexts: txInpGeneralSetupEntry.setDescription('An entry in the txInpGeneralSetupTable.')
txInpGsInputSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("ts1", 1), ("ts2", 2), ("ip1", 3), ("ip2", 4), ("rx", 5), ("eti1", 6), ("eti2", 7), ("sat1", 8), ("sat2", 9), ("edi1", 10), ("edi2", 11)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txInpGsInputSource.setStatus('current')
if mibBuilder.loadTexts: txInpGsInputSource.setDescription('Determines which physical input interface is used for\n                the logical input.\n                \n                Only available physical input interfaces may be chosen.\n                If the physical input is not available or a required option key\n                is missing, the chosen phyiscal input interface may not work. \n                This is especially important for devices with a very limited \n                number of inputs (e.g. TLx Basic Variant). \n                ')
txInpGsMultiplexName = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 2, 1, 2), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txInpGsMultiplexName.setStatus('current')
if mibBuilder.loadTexts: txInpGsMultiplexName.setDescription('An arbitrary user defined name for the multiplex\n                in input stream.')
txInpMonitorTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 3), )
if mibBuilder.loadTexts: txInpMonitorTable.setStatus('current')
if mibBuilder.loadTexts: txInpMonitorTable.setDescription('Input monitor settings.')
txInpMonitorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 3, 1), ).setIndexNames((0, "RS-XX9-TX-MIB", "txInpIfNotificationTxIdx"), (0, "RS-XX9-TX-MIB", "txInpIfNotificationExcIdx"))
if mibBuilder.loadTexts: txInpMonitorEntry.setStatus('current')
if mibBuilder.loadTexts: txInpMonitorEntry.setDescription('An entry in the txInpMonitorTable.')
txInpMonitorOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("undefined", 1), ("off", 2), ("activeInput", 3), ("logicalInput1", 4), ("logicalInput2", 5), ("testSignal", 6), ("fctZeroPulse", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txInpMonitorOut.setStatus('current')
if mibBuilder.loadTexts: txInpMonitorOut.setDescription('Selects an input signal to relay to the monitor out connector (X22).\n                undefined(1) must not be set.\n                \n                The admissible choices are determined by the installed input interface\n                and option keys. testSignal(6) is not allowed for ISDB-T transmitters. ')
txInputIpFeedTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 4), )
if mibBuilder.loadTexts: txInputIpFeedTable.setStatus('current')
if mibBuilder.loadTexts: txInputIpFeedTable.setDescription('IP feed parameters.')
txInputIpFeedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 4, 1), ).setIndexNames((0, "RS-XX9-TX-MIB", "txInpIfNotificationTxIdx"), (0, "RS-XX9-TX-MIB", "txInpIfNotificationExcIdx"), (0, "RS-XX9-TX-MIB", "txInpIfNotificationInputIdx"))
if mibBuilder.loadTexts: txInputIpFeedEntry.setStatus('current')
if mibBuilder.loadTexts: txInputIpFeedEntry.setDescription('An entry in the txInputIpFeedTable.')
txIpFeedDatarate = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 4, 1, 1), Unsigned32()).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: txIpFeedDatarate.setStatus('current')
if mibBuilder.loadTexts: txIpFeedDatarate.setDescription('Indicates the total data rate (gross data rate) on the IP feed.')
txIpFeedConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tsLan1", 1), ("tsLan2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txIpFeedConnector.setStatus('current')
if mibBuilder.loadTexts: txIpFeedConnector.setDescription('Used to define the physical network interface to which the logical IP stream \n                is bound. Normally, the TS LAN 1 socket (X30) is coupled to IP stream 1 and \n                the TS LAN 2 socket (X31) to IP stream 2. This allows you to use multiple \n                redundant servers that can be selected automatically using the automatic \n                input signal switchover. However, it is also possible to feed several \n                multicast streams via the same physical Ethernet socket. In this case, too, \n                the automatic input signal switchover function can toggle automatically \n                between two data streams.\n                ')
txIpFeedStreamingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("uniCast", 1), ("multiCast", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txIpFeedStreamingMode.setStatus('current')
if mibBuilder.loadTexts: txIpFeedStreamingMode.setDescription('Determines the streaming mode.')
txIpFeedStreamAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 4, 1, 4), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txIpFeedStreamAddressType.setStatus('current')
if mibBuilder.loadTexts: txIpFeedStreamAddressType.setDescription('Specifies the accepted internet address type for ipStreamAddress.')
txIpFeedStreamAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 4, 1, 5), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txIpFeedStreamAddress.setStatus('current')
if mibBuilder.loadTexts: txIpFeedStreamAddress.setDescription('If ipStreamMode is unicast(1) this object is read-only and shows the IP address\n                on the physical connector.\n                If ipStreamMode is multicast(2) this object is read-write for configuration\n                of the multicast source the IP address.\n                ')
txIpFeedStreamPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 4, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txIpFeedStreamPort.setStatus('current')
if mibBuilder.loadTexts: txIpFeedStreamPort.setDescription('The port of the logical input stream.')
txIpFeedStreamProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("auto", 1), ("udp", 2), ("rtp", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txIpFeedStreamProtocol.setStatus('current')
if mibBuilder.loadTexts: txIpFeedStreamProtocol.setDescription('The protocol of the logical input stream.')
txIpFeedPacketsTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 4, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txIpFeedPacketsTotal.setStatus('current')
if mibBuilder.loadTexts: txIpFeedPacketsTotal.setDescription('Total count of all received TSoverIP packets.')
txIpFeedPacketsMissing = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 4, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txIpFeedPacketsMissing.setStatus('current')
if mibBuilder.loadTexts: txIpFeedPacketsMissing.setDescription('Count of all missing packets.')
txIpFeedPacketsFixed = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 4, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txIpFeedPacketsFixed.setStatus('current')
if mibBuilder.loadTexts: txIpFeedPacketsFixed.setDescription('Count of all packets, which were reconstructed via FEC. ')
txIpFeedPacketsDuplicate = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 4, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txIpFeedPacketsDuplicate.setStatus('current')
if mibBuilder.loadTexts: txIpFeedPacketsDuplicate.setDescription('Cound of packets, which were received multiple times.')
txIpFeedPacketsReordered = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 4, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txIpFeedPacketsReordered.setStatus('current')
if mibBuilder.loadTexts: txIpFeedPacketsReordered.setDescription('Count of packets, which had to be sorted into the correct order.')
txIpFeedPacketsOutOfRange = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 4, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txIpFeedPacketsOutOfRange.setStatus('current')
if mibBuilder.loadTexts: txIpFeedPacketsOutOfRange.setDescription('Cound of all packets, which were not in the current processing window. ')
txIpFeedLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 4, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("undefined", 1), ("notPresent", 2), ("present", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: txIpFeedLinkStatus.setStatus('current')
if mibBuilder.loadTexts: txIpFeedLinkStatus.setDescription('Description.')
txInputTsFeedTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 5), )
if mibBuilder.loadTexts: txInputTsFeedTable.setStatus('current')
if mibBuilder.loadTexts: txInputTsFeedTable.setDescription('TS feed parameters.')
txInputTsFeedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 5, 1), ).setIndexNames((0, "RS-XX9-TX-MIB", "txInpIfNotificationTxIdx"), (0, "RS-XX9-TX-MIB", "txInpIfNotificationExcIdx"), (0, "RS-XX9-TX-MIB", "txInpIfNotificationInputIdx"))
if mibBuilder.loadTexts: txInputTsFeedEntry.setStatus('current')
if mibBuilder.loadTexts: txInputTsFeedEntry.setDescription('An entry in the txInputTsFeedTable.')
txTsFeedBruttoDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 5, 1, 1), Unsigned32()).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: txTsFeedBruttoDataRate.setStatus('current')
if mibBuilder.loadTexts: txTsFeedBruttoDataRate.setDescription('Gross data rate of the TS stream.')
txTsFeedNettoDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 5, 1, 2), Unsigned32()).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: txTsFeedNettoDataRate.setStatus('current')
if mibBuilder.loadTexts: txTsFeedNettoDataRate.setDescription('Net data rate (without stuffing bytes) of the TS stream.\n                This value is available only when txSfnTimeSyncSFN is off(2).')
txTsFeedPacketLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 5, 1, 3), Unsigned32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: txTsFeedPacketLength.setStatus('current')
if mibBuilder.loadTexts: txTsFeedPacketLength.setDescription('Dectected packet length of TS stream.')
txTsFeedType = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("auto", 1), ("asi", 2), ("smpte", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txTsFeedType.setStatus('current')
if mibBuilder.loadTexts: txTsFeedType.setDescription('Used to set the data format for the data streams at X20 and X21.\n                auto(1)  - Data format is detected automatically\n                asi(2)   - Manual setting for an ASI transport stream\n                smpte(3) - Manual setting for an SMPTE transport stream')
txInputSatFeed = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 6))
txInputSatFeedTunerTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 6, 1), )
if mibBuilder.loadTexts: txInputSatFeedTunerTable.setStatus('current')
if mibBuilder.loadTexts: txInputSatFeedTunerTable.setDescription('SAT tuner parameters.')
txInputSatFeedTunerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 6, 1, 1), ).setIndexNames((0, "RS-XX9-TX-MIB", "txInpIfNotificationTxIdx"), (0, "RS-XX9-TX-MIB", "txInpIfNotificationExcIdx"), (0, "RS-XX9-TX-MIB", "txInpIfNotificationInputIdx"))
if mibBuilder.loadTexts: txInputSatFeedTunerEntry.setStatus('current')
if mibBuilder.loadTexts: txInputSatFeedTunerEntry.setDescription('An entry in the txInputSatFeedTunerTable')
txSatTunerTransponderFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 6, 1, 1, 1), Counter64()).setUnits('Hz').setMaxAccess("readonly")
if mibBuilder.loadTexts: txSatTunerTransponderFreq.setStatus('current')
if mibBuilder.loadTexts: txSatTunerTransponderFreq.setDescription('Description.\n                \n                range: 950000000 - 12750000000 [Hz] (equals 950 MHz - 12.75 GHz)')
txSatTunerSignalType = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 6, 1, 1, 2), SatSignalType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txSatTunerSignalType.setStatus('current')
if mibBuilder.loadTexts: txSatTunerSignalType.setDescription('Expected signal type that shall be received.')
txSatTunerSymbolRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 6, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 50000000))).setUnits('Sps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: txSatTunerSymbolRate.setStatus('current')
if mibBuilder.loadTexts: txSatTunerSymbolRate.setDescription('Expected symbol rate of the signal that shall \n                be received in kSymb/s. If 0 is entered here,\n                 the DVB-S/S2 receiver will perform a Blind \n                Search and try to detected all signal parameters\n                automatically.')
txSatTunerModulation = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("undefinedMode", 1), ("qpsk", 2), ("psk8", 3), ("psk16", 4), ("psk32", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: txSatTunerModulation.setStatus('current')
if mibBuilder.loadTexts: txSatTunerModulation.setDescription('The detected modulation of the received signal')
txSatTunerCoderate = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 6, 1, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: txSatTunerCoderate.setStatus('current')
if mibBuilder.loadTexts: txSatTunerCoderate.setDescription('The current FEC code rate of the received signal')
txSatTunerSignalStandard = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 6, 1, 1, 6), SatSignalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txSatTunerSignalStandard.setStatus('current')
if mibBuilder.loadTexts: txSatTunerSignalStandard.setDescription('The detected signal standard of the received signal')
txSatTunerRxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 6, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-9000, 0))).setUnits('0.01dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: txSatTunerRxPower.setStatus('current')
if mibBuilder.loadTexts: txSatTunerRxPower.setDescription('The current received power in 0.01 dBm')
txSatTunerMeasuredTsDatarate = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 6, 1, 1, 8), Unsigned32()).setUnits('bps').setMaxAccess("readonly")
if mibBuilder.loadTexts: txSatTunerMeasuredTsDatarate.setStatus('current')
if mibBuilder.loadTexts: txSatTunerMeasuredTsDatarate.setDescription('The measured data rate of the transport stream in Bit/s')
txSatTunerBitErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 6, 1, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txSatTunerBitErrorRate.setStatus('current')
if mibBuilder.loadTexts: txSatTunerBitErrorRate.setDescription('The current bit error rate.')
txSatTunerCarrierNoiseRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 6, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-300, 20000))).setUnits('0.01dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: txSatTunerCarrierNoiseRatio.setStatus('current')
if mibBuilder.loadTexts: txSatTunerCarrierNoiseRatio.setDescription('The current carrier-to-noise ratio in 0.01 dB.')
txSatTunerTsSymbolRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 6, 1, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 50000000))).setUnits('Sps').setMaxAccess("readonly")
if mibBuilder.loadTexts: txSatTunerTsSymbolRate.setStatus('current')
if mibBuilder.loadTexts: txSatTunerTsSymbolRate.setDescription('The current symbol rate of the received signal \n                in Symb/s (including the SR offset)')
txSatTunerIntermediateFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 6, 1, 1, 12), Counter64()).setUnits('Hz').setMaxAccess("readonly")
if mibBuilder.loadTexts: txSatTunerIntermediateFreq.setStatus('current')
if mibBuilder.loadTexts: txSatTunerIntermediateFreq.setDescription('The intermediate frequency is calculated from the LNB\n                Frequency and the selected Transponder Frequency.')
txSatTunerLinkMargin = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 6, 1, 1, 13), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: txSatTunerLinkMargin.setStatus('current')
if mibBuilder.loadTexts: txSatTunerLinkMargin.setDescription("The difference between the receiver's sensitivity \n                (i.e., the received power at which the receiver will \n                stop working) and the actual received power.")
txSatTunerLinkMarginWarnLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 6, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2000))).setUnits('0.01dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: txSatTunerLinkMarginWarnLimit.setStatus('current')
if mibBuilder.loadTexts: txSatTunerLinkMarginWarnLimit.setDescription('Indicates the threshold for a link margin warning. ')
txSatTunerLinkMarginFaultLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 6, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2000))).setUnits('0.01dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: txSatTunerLinkMarginFaultLimit.setStatus('current')
if mibBuilder.loadTexts: txSatTunerLinkMarginFaultLimit.setDescription('Indicates the threshold for a link margin fault.')
txSatTunerCarrierNoiseWarnLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 6, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2000))).setUnits('0.01dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: txSatTunerCarrierNoiseWarnLimit.setStatus('current')
if mibBuilder.loadTexts: txSatTunerCarrierNoiseWarnLimit.setDescription('When the C/N drops below this limit a warning is indicated.\n                ')
txSatTunerCarrierNoiseFaultLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 6, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2000))).setUnits('0.01dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: txSatTunerCarrierNoiseFaultLimit.setStatus('current')
if mibBuilder.loadTexts: txSatTunerCarrierNoiseFaultLimit.setDescription('When the C/N drops below this limit a fault is indicated.\n                ')
txSatTunerTransponderFreqUpper32 = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 6, 1, 1, 18), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txSatTunerTransponderFreqUpper32.setStatus('current')
if mibBuilder.loadTexts: txSatTunerTransponderFreqUpper32.setDescription('Description.\n                these are the upper 32bits of a 64bit value\n                \n                range: 950000000 - 12750000000 [Hz] (equals 950 MHz - 12.75 GHz)')
txSatTunerTransponderFreqLower32 = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 6, 1, 1, 19), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txSatTunerTransponderFreqLower32.setStatus('current')
if mibBuilder.loadTexts: txSatTunerTransponderFreqLower32.setDescription('Description.\n                these are the lower 32bits of a 64bit value\n                \n                range: 950000000 - 12750000000 [Hz] (equals 950 MHz - 12.75 GHz)')
txInputSatFeedLnbTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 6, 2), )
if mibBuilder.loadTexts: txInputSatFeedLnbTable.setStatus('current')
if mibBuilder.loadTexts: txInputSatFeedLnbTable.setDescription('SAT LNB parameters.')
txInputSatFeedLnbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 6, 2, 1), ).setIndexNames((0, "RS-XX9-TX-MIB", "txInpIfNotificationTxIdx"), (0, "RS-XX9-TX-MIB", "txInpIfNotificationExcIdx"), (0, "RS-XX9-TX-MIB", "txInpIfNotificationInputIdx"))
if mibBuilder.loadTexts: txInputSatFeedLnbEntry.setStatus('current')
if mibBuilder.loadTexts: txInputSatFeedLnbEntry.setDescription('An entry in the txInputSatFeedLnbTable')
txSatLnbPolarization = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("horizontal", 1), ("vertical", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txSatLnbPolarization.setStatus('current')
if mibBuilder.loadTexts: txSatLnbPolarization.setDescription('The polarisation that shall be selected by the LNB. \n                If horizontal polarisation is selected, the LNB \n                supply voltage will be increased from 13V/14V to \n                18V/19V. This parameter has no effect if the LNB \n                Voltage is set to Off.')
txSatLnbFreqLowBand = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 6, 2, 1, 2), Counter64()).setUnits('Hz').setMaxAccess("readonly")
if mibBuilder.loadTexts: txSatLnbFreqLowBand.setStatus('current')
if mibBuilder.loadTexts: txSatLnbFreqLowBand.setDescription('Frequency of the local oscillator of the LNB in the \n                low band in MHz (Ku-Band only). The software \n                calculates if the selected transponder frequency \n                falls into the low or high band of the LNB.\n                \n                range: 9300000000 - 10200000000 [Hz] (equals 9.3GHz - 10.2 GHz)\n                ')
txSatLnbFreqHighBand = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 6, 2, 1, 3), Counter64()).setUnits('Hz').setMaxAccess("readonly")
if mibBuilder.loadTexts: txSatLnbFreqHighBand.setStatus('current')
if mibBuilder.loadTexts: txSatLnbFreqHighBand.setDescription('Frequency of the local oscillator of the LNB in the \n                high band in MHz (Ku-Band only).\n                The software calculates if the selected transponder \n                frequency falls into the low or high band of the LNB.\n                If the high band shall be used a 22kHz tone will be \n                automatically transmitted to the LNB.\n                \n                range: 10200000000 - 11000000000 [Hz] (equals 10.2GHz - 11.00 GHz)\n                ')
txSatLnbVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("vert13VandHori18V", 2), ("vert14VandHori19V", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txSatLnbVoltage.setStatus('current')
if mibBuilder.loadTexts: txSatLnbVoltage.setDescription('Selects the LNB supply voltage. The voltage supplied \n                to the LNB can be increased by about 1V to cope with\n                losses due to the resistance of the RF cable.')
txSatLnbBand = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 6, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("kuBand", 1), ("cBand", 2), ("manual", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txSatLnbBand.setStatus('current')
if mibBuilder.loadTexts: txSatLnbBand.setDescription('This parameter determines how the selected IF \n                of the DVB-S/S2 Tuner is calculated.\n                - In C-Band Mode only one LNB frequency is \n                used and the 22kHz tonecan be switched on or \n                off manually.\n                - In Ku-Band Mode two LNB frequencies (high \n                and low) have to be entered. The device \n                automatically selects the matching frequency \n                band and switches the 22kHz tone on if the \n                high band should be selected.\n                - In Manual Mode you can directly enter the \n                intermediate frequency (IF) which the Tuner\n                shall attempt to receive.\n                ')
txSatLnbFreqCBand = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 6, 2, 1, 6), Counter64()).setUnits('Hz').setMaxAccess("readonly")
if mibBuilder.loadTexts: txSatLnbFreqCBand.setStatus('current')
if mibBuilder.loadTexts: txSatLnbFreqCBand.setDescription('Frequency of the local oscillator of the LNB in Hz (C-Band only).\n                \n                range: 3 000 000 000 - 6 000 000 000 [Hz] (equals 3GHz - 6.00 GHz)')
txSatLnb22kHzSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 6, 2, 1, 7), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txSatLnb22kHzSignal.setStatus('current')
if mibBuilder.loadTexts: txSatLnb22kHzSignal.setDescription('Manually controls the 22kHz tone transmitted to the \n                LNB (only relevant in LNB Modes C-Band and Manual).')
txSatLnbDriftWarnLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 6, 2, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setUnits('Hz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: txSatLnbDriftWarnLimit.setStatus('current')
if mibBuilder.loadTexts: txSatLnbDriftWarnLimit.setDescription('When the difference between receive frequency and transponder \n                frequency rises above this limit a warning is indicated.\n                ')
txSatLnbDrift = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 6, 2, 1, 9), Integer32()).setUnits('kHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: txSatLnbDrift.setStatus('current')
if mibBuilder.loadTexts: txSatLnbDrift.setDescription('Indicates a warning when the difference between transponder frequency \n                and receive frequency (tuner frequency) is too high. ')
txSatLnbFreqLowBandUpper32 = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 6, 2, 1, 10), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txSatLnbFreqLowBandUpper32.setStatus('current')
if mibBuilder.loadTexts: txSatLnbFreqLowBandUpper32.setDescription('Frequency of the local oscillator of the LNB in the \n                low band in MHz (Ku-Band only). The software \n                calculates if the selected transponder frequency \n                falls into the low or high band of the LNB.\n                these are the upper 32bits of a 64bit value\n                \n                range: 9300000000 - 10200000000 [Hz] (equals 9.3GHz - 10.2 GHz)\n                ')
txSatLnbFreqLowBandLower32 = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 6, 2, 1, 11), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txSatLnbFreqLowBandLower32.setStatus('current')
if mibBuilder.loadTexts: txSatLnbFreqLowBandLower32.setDescription('Frequency of the local oscillator of the LNB in the \n                low band in MHz (Ku-Band only). The software \n                calculates if the selected transponder frequency \n                falls into the low or high band of the LNB.\n                these are the lower 32bits of a 64bit value\n                \n                range: 9300000000 - 10200000000 [Hz] (equals 9.3GHz - 10.2 GHz)\n                ')
txSatLnbFreqHighBandUpper32 = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 6, 2, 1, 12), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txSatLnbFreqHighBandUpper32.setStatus('current')
if mibBuilder.loadTexts: txSatLnbFreqHighBandUpper32.setDescription('Frequency of the local oscillator of the LNB in the \n                high band in MHz (Ku-Band only).\n                The software calculates if the selected transponder \n                frequency falls into the low or high band of the LNB.\n                If the high band shall be used a 22kHz tone will be \n                automatically transmitted to the LNB.\n                these are the upper 32bits of a 64bit value\n                \n                range: 10200000000 - 11000000000 [Hz] (equals 10.2GHz - 11.00 GHz)\n                ')
txSatLnbFreqHighBandLower32 = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 6, 2, 1, 13), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txSatLnbFreqHighBandLower32.setStatus('current')
if mibBuilder.loadTexts: txSatLnbFreqHighBandLower32.setDescription('Frequency of the local oscillator of the LNB in the \n                high band in MHz (Ku-Band only).\n                The software calculates if the selected transponder \n                frequency falls into the low or high band of the LNB.\n                If the high band shall be used a 22kHz tone will be \n                automatically transmitted to the LNB.\n                these are the lower 32bits of a 64bit value\n                \n                range: 10200000000 - 11000000000 [Hz] (equals 10.2GHz - 11.00 GHz)\n                ')
txSatLnbFreqCBandUpper32 = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 6, 2, 1, 14), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txSatLnbFreqCBandUpper32.setStatus('current')
if mibBuilder.loadTexts: txSatLnbFreqCBandUpper32.setDescription('Frequency of the local oscillator of the LNB in Hz (C-Band only).\n                these are the upper 32bits of a 64bit value\n                \n                range: 3 000 000 000 - 6 000 000 000 [Hz] (equals 3GHz - 6.00 GHz)')
txSatLnbFreqCBandLower32 = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 6, 2, 1, 15), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txSatLnbFreqCBandLower32.setStatus('current')
if mibBuilder.loadTexts: txSatLnbFreqCBandLower32.setDescription('Frequency of the local oscillator of the LNB in Hz (C-Band only).\n                these are the lower 32bits of a 64bit value\n                \n                range: 3 000 000 000 - 6 000 000 000 [Hz] (equals 3GHz - 6.00 GHz)')
txInputSatFeedCamTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 6, 3), )
if mibBuilder.loadTexts: txInputSatFeedCamTable.setStatus('current')
if mibBuilder.loadTexts: txInputSatFeedCamTable.setDescription('SAT CAM parameters.')
txInputSatFeedCamEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 6, 3, 1), ).setIndexNames((0, "RS-XX9-TX-MIB", "txInpIfNotificationTxIdx"), (0, "RS-XX9-TX-MIB", "txInpIfNotificationExcIdx"), (0, "RS-XX9-TX-MIB", "txInpIfNotificationInputIdx"))
if mibBuilder.loadTexts: txInputSatFeedCamEntry.setStatus('current')
if mibBuilder.loadTexts: txInputSatFeedCamEntry.setDescription('An entry in the txInputSatFeedCamTable')
txSatCamInserted = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 6, 3, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txSatCamInserted.setStatus('current')
if mibBuilder.loadTexts: txSatCamInserted.setDescription('Indicates whether a CAM is installed. CAM=Conditional Access Module\n                ')
txSatCamStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 6, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("noModule", 3), ("noSignal", 4), ("noKey", 5), ("needMMI", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: txSatCamStatus.setStatus('current')
if mibBuilder.loadTexts: txSatCamStatus.setDescription('Status of the Condtional Access Module. ')
txSatCamManufacturerName = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 6, 3, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: txSatCamManufacturerName.setStatus('current')
if mibBuilder.loadTexts: txSatCamManufacturerName.setDescription('The manufacturer of the CA module.')
txSatCamModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 6, 3, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: txSatCamModuleName.setStatus('current')
if mibBuilder.loadTexts: txSatCamModuleName.setDescription('The name of the CA module.')
txSatCamTsInput = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 6, 3, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txSatCamTsInput.setStatus('current')
if mibBuilder.loadTexts: txSatCamTsInput.setDescription('Description.')
txSatCamTsOutput = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 6, 3, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txSatCamTsOutput.setStatus('current')
if mibBuilder.loadTexts: txSatCamTsOutput.setDescription('Indicates whether a transport stream has been detected at the \n                output of the conditional access module.')
txSatCamConfigurationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 6, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("undefinedCam", 1), ("off", 2), ("ci", 3), ("biss", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txSatCamConfigurationMode.setStatus('current')
if mibBuilder.loadTexts: txSatCamConfigurationMode.setDescription('Selects the operation mode of CAM 1/2. You can use \n                the internal BISS-E core or an additional CA Module \n                in Common Interface Slot 1/2 for descrambling a\n                Transport Stream.\n                ')
txSatCamBissMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 6, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("undefinedMode", 1), ("bissE", 2), ("biss1", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txSatCamBissMode.setStatus('current')
if mibBuilder.loadTexts: txSatCamBissMode.setDescription('Operation Mode of the BISS core.')
txSatCamBissInjectedId = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 6, 3, 1, 9), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txSatCamBissInjectedId.setStatus('current')
if mibBuilder.loadTexts: txSatCamBissInjectedId.setDescription('Enter the default 14 character Injected Identifier used \n                for BISS-E here.')
txSatCamBissEncryptedSession = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 6, 3, 1, 10), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txSatCamBissEncryptedSession.setStatus('current')
if mibBuilder.loadTexts: txSatCamBissEncryptedSession.setDescription('Enter the default 16 character Encrypted Session \n                Word used for BISS-E here.')
txSatCamBissClearSession = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 6, 3, 1, 11), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txSatCamBissClearSession.setStatus('current')
if mibBuilder.loadTexts: txSatCamBissClearSession.setDescription('Enter the default 12 character Clear Session Word \n                used for BISS-1 here.')
txSatCamScInserted = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 6, 3, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txSatCamScInserted.setStatus('current')
if mibBuilder.loadTexts: txSatCamScInserted.setDescription('Indicates whether a Smartcard is installed.')
txSatCamScManufacturerName = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 6, 3, 1, 13), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: txSatCamScManufacturerName.setStatus('current')
if mibBuilder.loadTexts: txSatCamScManufacturerName.setDescription('Shows the manufacturer name of the Smartcard.')
txSatCamScExpirationDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 6, 3, 1, 14), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txSatCamScExpirationDate.setStatus('current')
if mibBuilder.loadTexts: txSatCamScExpirationDate.setDescription('Indicates the expiraton date of Smartcard.')
txSatCamResetMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 6, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("manual", 1), ("auto", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txSatCamResetMode.setStatus('current')
if mibBuilder.loadTexts: txSatCamResetMode.setDescription('Indicates whether the conditional access module is reset automatically \n                in case of  malfunction. ')
txSatCamReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 6, 3, 1, 16), Trigger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txSatCamReset.setStatus('current')
if mibBuilder.loadTexts: txSatCamReset.setDescription('Resets the conditional access module manually.\n                ')
txInputSatFeedIpOutputTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 6, 4), )
if mibBuilder.loadTexts: txInputSatFeedIpOutputTable.setStatus('current')
if mibBuilder.loadTexts: txInputSatFeedIpOutputTable.setDescription('SAT IP output parameters.')
txInputSatFeedIpOutputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 6, 4, 1), ).setIndexNames((0, "RS-XX9-TX-MIB", "txInpIfNotificationTxIdx"), (0, "RS-XX9-TX-MIB", "txInpIfNotificationExcIdx"), (0, "RS-XX9-TX-MIB", "txInpIfNotificationInputIdx"))
if mibBuilder.loadTexts: txInputSatFeedIpOutputEntry.setStatus('current')
if mibBuilder.loadTexts: txInputSatFeedIpOutputEntry.setDescription('An entry in the txInputSatFeedIpOutputTable')
txSatIpOutMulticastAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 6, 4, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txSatIpOutMulticastAddrType.setStatus('current')
if mibBuilder.loadTexts: txSatIpOutMulticastAddrType.setDescription('Specifies the accepted internet address type for txSatIpOutMulticastAddr.')
txSatIpOutPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 6, 4, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txSatIpOutPort.setStatus('current')
if mibBuilder.loadTexts: txSatIpOutPort.setDescription('Description.')
txSatIpOutMulticastAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 6, 4, 1, 3), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txSatIpOutMulticastAddr.setStatus('current')
if mibBuilder.loadTexts: txSatIpOutMulticastAddr.setDescription('Description.')
txSatIpOutFecRow = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 6, 4, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txSatIpOutFecRow.setStatus('current')
if mibBuilder.loadTexts: txSatIpOutFecRow.setDescription('Description.')
txSatIpOutFecCol = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 6, 4, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txSatIpOutFecCol.setStatus('current')
if mibBuilder.loadTexts: txSatIpOutFecCol.setDescription('Description.')
txSatIpOutLocalIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 6, 4, 1, 6), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txSatIpOutLocalIpAddrType.setStatus('current')
if mibBuilder.loadTexts: txSatIpOutLocalIpAddrType.setDescription('Specifies the accepted internet address type for txSatIpOutLocalIpAddrType.')
txSatIpOutLocalIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 6, 4, 1, 7), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txSatIpOutLocalIpAddr.setStatus('current')
if mibBuilder.loadTexts: txSatIpOutLocalIpAddr.setDescription('Description.')
txSatIpOutLocalNetmaskAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 6, 4, 1, 8), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txSatIpOutLocalNetmaskAddrType.setStatus('current')
if mibBuilder.loadTexts: txSatIpOutLocalNetmaskAddrType.setDescription('Specifies the accepted internet address type for txSatIpOutLocalNetmask.')
txSatIpOutLocalNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 6, 4, 1, 9), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txSatIpOutLocalNetmask.setStatus('current')
if mibBuilder.loadTexts: txSatIpOutLocalNetmask.setDescription('Description.')
txSatIpOutMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 6, 4, 1, 10), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: txSatIpOutMacAddr.setStatus('current')
if mibBuilder.loadTexts: txSatIpOutMacAddr.setDescription('Description.')
txInputSatFeedInputServiceTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 6, 5), )
if mibBuilder.loadTexts: txInputSatFeedInputServiceTable.setStatus('current')
if mibBuilder.loadTexts: txInputSatFeedInputServiceTable.setDescription('SAT input service parameters.')
txInputSatFeedInputServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 6, 5, 1), ).setIndexNames((0, "RS-XX9-TX-MIB", "txInpIfNotificationTxIdx"), (0, "RS-XX9-TX-MIB", "txInpIfNotificationExcIdx"), (0, "RS-XX9-TX-MIB", "txInpIfNotificationInputIdx"), (0, "RS-XX9-TX-MIB", "txSatFeedServiceIdx"))
if mibBuilder.loadTexts: txInputSatFeedInputServiceEntry.setStatus('current')
if mibBuilder.loadTexts: txInputSatFeedInputServiceEntry.setDescription('An entry in the txInputSatFeedInputServiceTable')
txSatFeedServiceIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 6, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)))
if mibBuilder.loadTexts: txSatFeedServiceIdx.setStatus('current')
if mibBuilder.loadTexts: txSatFeedServiceIdx.setDescription('The input service index. \n                ')
txSatFeedInputServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 6, 5, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: txSatFeedInputServiceName.setStatus('current')
if mibBuilder.loadTexts: txSatFeedInputServiceName.setDescription('The name of the service (from SDT)')
txSatFeedInputServiceID = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 6, 5, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: txSatFeedInputServiceID.setStatus('current')
if mibBuilder.loadTexts: txSatFeedInputServiceID.setDescription('The Service ID (from PAT)')
txSatFeedInputServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 6, 5, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: txSatFeedInputServiceType.setStatus('current')
if mibBuilder.loadTexts: txSatFeedInputServiceType.setDescription('The service type as decimal value (from SDT)')
txSatFeedInputServiceElementaryStreams = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 6, 5, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txSatFeedInputServiceElementaryStreams.setStatus('current')
if mibBuilder.loadTexts: txSatFeedInputServiceElementaryStreams.setDescription('The number of elementary streams (ES) in this \n                service (from PMT)')
txSatFeedInputServiceDecryption = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 6, 5, 1, 6), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txSatFeedInputServiceDecryption.setStatus('current')
if mibBuilder.loadTexts: txSatFeedInputServiceDecryption.setDescription('The decryption is enabled')
txSatFeedInputServiceEncrypted = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 6, 5, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txSatFeedInputServiceEncrypted.setStatus('current')
if mibBuilder.loadTexts: txSatFeedInputServiceEncrypted.setDescription('is true(1) if the service is encrypted (from SDT)')
txSatFeedInputServiceDecryptionState = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 6, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 5))).clone(namedValues=NamedValues(("undefinedStatus", 1), ("no", 2), ("error", 3), ("ok", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: txSatFeedInputServiceDecryptionState.setStatus('current')
if mibBuilder.loadTexts: txSatFeedInputServiceDecryptionState.setDescription('The status of the decryption process\n                ')
txSatFeedInputServiceDecryptedAt = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 6, 5, 1, 9), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txSatFeedInputServiceDecryptedAt.setStatus('obsolete')
if mibBuilder.loadTexts: txSatFeedInputServiceDecryptedAt.setDescription('obsolete')
txSatFeedInputServicePmtPid = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 6, 5, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readonly")
if mibBuilder.loadTexts: txSatFeedInputServicePmtPid.setStatus('current')
if mibBuilder.loadTexts: txSatFeedInputServicePmtPid.setDescription('Indicates the ID of the service from the program map table (PMT). ')
txInputSatFeedGeneralTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 6, 6), )
if mibBuilder.loadTexts: txInputSatFeedGeneralTable.setStatus('current')
if mibBuilder.loadTexts: txInputSatFeedGeneralTable.setDescription('Description.')
txInputSatFeedGeneralEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 6, 6, 1), ).setIndexNames((0, "RS-XX9-TX-MIB", "txInpIfNotificationTxIdx"), (0, "RS-XX9-TX-MIB", "txInpIfNotificationExcIdx"))
if mibBuilder.loadTexts: txInputSatFeedGeneralEntry.setStatus('current')
if mibBuilder.loadTexts: txInputSatFeedGeneralEntry.setDescription('Description.')
txSatGeneralAsiOutput = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 6, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("sat1", 2), ("sat2", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txSatGeneralAsiOutput.setStatus('current')
if mibBuilder.loadTexts: txSatGeneralAsiOutput.setDescription('Indicates which of the two SAT receiver streams is switched to the ASI \n                output (X25) of SAT receiver board. The setting can be changed here. \n                This parameter is available if at least one logical input is configured as \n                SAT-input.\n                ')
txInputSatFeedDecryptionServiceTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 6, 7), )
if mibBuilder.loadTexts: txInputSatFeedDecryptionServiceTable.setStatus('current')
if mibBuilder.loadTexts: txInputSatFeedDecryptionServiceTable.setDescription('SAT input service decryption parameters.')
txInputSatFeedDecryptionServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 6, 7, 1), ).setIndexNames((0, "RS-XX9-TX-MIB", "txInpIfNotificationTxIdx"), (0, "RS-XX9-TX-MIB", "txInpIfNotificationExcIdx"), (0, "RS-XX9-TX-MIB", "txInpIfNotificationInputIdx"), (0, "RS-XX9-TX-MIB", "txSatFeedDecryptionServiceIdx"))
if mibBuilder.loadTexts: txInputSatFeedDecryptionServiceEntry.setStatus('current')
if mibBuilder.loadTexts: txInputSatFeedDecryptionServiceEntry.setDescription('An entry in the txInputSatFeedDecryptionServiceTable.')
txSatFeedDecryptionServiceIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 6, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: txSatFeedDecryptionServiceIdx.setStatus('current')
if mibBuilder.loadTexts: txSatFeedDecryptionServiceIdx.setDescription('The input service decryption index. \n                ')
txSatFeedDecryptionServiceID = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 6, 7, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txSatFeedDecryptionServiceID.setStatus('current')
if mibBuilder.loadTexts: txSatFeedDecryptionServiceID.setDescription('Enable the decryption for this services')
txInputSatFeedBtsTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 6, 8), )
if mibBuilder.loadTexts: txInputSatFeedBtsTable.setStatus('current')
if mibBuilder.loadTexts: txInputSatFeedBtsTable.setDescription('Description.')
txInputSatFeedBtsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 6, 8, 1), ).setIndexNames((0, "RS-XX9-TX-MIB", "txInpIfNotificationTxIdx"), (0, "RS-XX9-TX-MIB", "txInpIfNotificationExcIdx"), (0, "RS-XX9-TX-MIB", "txInpIfNotificationInputIdx"))
if mibBuilder.loadTexts: txInputSatFeedBtsEntry.setStatus('current')
if mibBuilder.loadTexts: txInputSatFeedBtsEntry.setDescription('Description.')
txSatBtsDecompEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 6, 8, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txSatBtsDecompEnable.setStatus('obsolete')
if mibBuilder.loadTexts: txSatBtsDecompEnable.setDescription('obsolete')
txSatBtsRegionalization = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 6, 8, 1, 2), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txSatBtsRegionalization.setStatus('obsolete')
if mibBuilder.loadTexts: txSatBtsRegionalization.setDescription('obsolete.\n                replaced by isdbtNitRestampingTable')
txSatBtsPliTablePid = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 6, 8, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 8191))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txSatBtsPliTablePid.setStatus('current')
if mibBuilder.loadTexts: txSatBtsPliTablePid.setDescription('Indicates the packet id which contains the PLI table in the \n                DVB-S/S2 stream. The setting can be changed here.\n                ')
txSatBtsNullPacketLaPid = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 6, 8, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 8191))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txSatBtsNullPacketLaPid.setStatus('current')
if mibBuilder.loadTexts: txSatBtsNullPacketLaPid.setDescription('Indicates the packet id which contains the payload for layer A. \n                The setting can be changed here.\n                ')
txSatBtsNullPacketLbPid = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 6, 8, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 8191))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txSatBtsNullPacketLbPid.setStatus('current')
if mibBuilder.loadTexts: txSatBtsNullPacketLbPid.setDescription('Indicates the packet id which contains the payload for layer B. \n                The setting can be changed here.\n                ')
txSatBtsNullPacketLcPid = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 6, 8, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 8191))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txSatBtsNullPacketLcPid.setStatus('current')
if mibBuilder.loadTexts: txSatBtsNullPacketLcPid.setDescription('Indicates the packet id which contains the payload for layer C. \n                The setting can be changed here.\n                ')
txInputSatFeedExtrasTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 6, 9), )
if mibBuilder.loadTexts: txInputSatFeedExtrasTable.setStatus('current')
if mibBuilder.loadTexts: txInputSatFeedExtrasTable.setDescription('Description.')
txInputSatFeedExtrasEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 6, 9, 1), ).setIndexNames((0, "RS-XX9-TX-MIB", "txInpIfNotificationTxIdx"), (0, "RS-XX9-TX-MIB", "txInpIfNotificationExcIdx"), (0, "RS-XX9-TX-MIB", "txInpIfNotificationInputIdx"))
if mibBuilder.loadTexts: txInputSatFeedExtrasEntry.setStatus('current')
if mibBuilder.loadTexts: txInputSatFeedExtrasEntry.setDescription('Description.')
txSatMultiStreamStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 6, 9, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notFound", 1), ("available", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: txSatMultiStreamStatus.setStatus('current')
if mibBuilder.loadTexts: txSatMultiStreamStatus.setDescription("Indicates, whether the sat receiver is locked to the stream \n                with the 'Used Stream ID'.\n                ")
txSatMultiStreamUsedStreamId = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 6, 9, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txSatMultiStreamUsedStreamId.setStatus('current')
if mibBuilder.loadTexts: txSatMultiStreamUsedStreamId.setDescription('Indicates which datastream shall be used. \n                The stream id can be changed here.\n                ')
txSatPlScrambling = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 6, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("gold", 1), ("root", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txSatPlScrambling.setStatus('current')
if mibBuilder.loadTexts: txSatPlScrambling.setDescription("Indicates the method how the polynomial to descramble the \n                datastream is calculated. The setting can be changed here. \n                Physical Layer Scrambling is disabled when PL Scrambling \n                is set to 'Gold' and Code is set to '0'\n                ")
txSatPlsCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 6, 9, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 262143))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txSatPlsCode.setStatus('current')
if mibBuilder.loadTexts: txSatPlsCode.setDescription('Indicates the decryption code. \n                This code and the method how the polynomial is calculated must \n                be identical to the settings of scrambler in playout. Up to three \n                different codes can be used. If Loop is enabled all codes will be \n                checked automatically. \n                To avoid copying the decryption code always the value -1 is \n                displayed. \n                ')
txSatPlsCode2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 6, 9, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 262143))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txSatPlsCode2.setStatus('current')
if mibBuilder.loadTexts: txSatPlsCode2.setDescription('Indicates the decryption code. \n                This code and the method how the polynomial is calculated must \n                be identical to the settings of scrambler in playout. Up to three \n                different codes can be used. If Loop is enabled all codes will be \n                checked automatically. \n                To avoid copying the decryption code always the value -1 is \n                displayed. \n                ')
txSatPlsCode3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 6, 9, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 262143))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txSatPlsCode3.setStatus('current')
if mibBuilder.loadTexts: txSatPlsCode3.setDescription('Indicates the decryption code. \n                This code and the method how the polynomial is calculated must \n                be identical to the settings of scrambler in playout. Up to three \n                different codes can be used. If Loop is enabled all codes will be \n                checked automatically. \n                To avoid copying the decryption code always the value -1 is \n                displayed. \n                ')
txSatCodeLoop = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 6, 9, 1, 10), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txSatCodeLoop.setStatus('current')
if mibBuilder.loadTexts: txSatCodeLoop.setDescription('Indicates whether the automatic pls code scanning is active. \n                Up to three different pls codes can be used to decode the \n                transport stream. \n                ')
txSatPlsSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 6, 9, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("code1", 1), ("code2", 2), ("code3", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txSatPlsSelect.setStatus('current')
if mibBuilder.loadTexts: txSatPlsSelect.setDescription('When automatic loop is disabled one of up to three stored\n                pls codes can be selected manually. ')
txSatPlsActive = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 6, 9, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("code1", 1), ("code2", 2), ("code3", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: txSatPlsActive.setStatus('current')
if mibBuilder.loadTexts: txSatPlsActive.setDescription('Indicates the used PLS code. ')
txSatStreamCurrentTsId = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 6, 9, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txSatStreamCurrentTsId.setStatus('current')
if mibBuilder.loadTexts: txSatStreamCurrentTsId.setDescription('Indicates the ID of currently used transport stream.\n                In multistream configurations the multistream number defines the active \n                transport stream.\n                ')
txSatStreamExpectedTsId = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 6, 9, 1, 14), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txSatStreamExpectedTsId.setStatus('current')
if mibBuilder.loadTexts: txSatStreamExpectedTsId.setDescription('Indicates which transport stream is expected. \n                Changing the transport stream will lead to a warning. \n                Setting the expected TS ID to zero suppresses a warning.\n                ')
txInputExgineStateTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 7), )
if mibBuilder.loadTexts: txInputExgineStateTable.setStatus('current')
if mibBuilder.loadTexts: txInputExgineStateTable.setDescription('Exgine device status information.')
txInputExgineStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 7, 1), ).setIndexNames((0, "RS-XX9-TX-MIB", "txInpIfNotificationTxIdx"), (0, "RS-XX9-TX-MIB", "txInpIfNotificationExcIdx"))
if mibBuilder.loadTexts: txInputExgineStateEntry.setStatus('current')
if mibBuilder.loadTexts: txInputExgineStateEntry.setDescription('An entry in the txInputExgineStateTable.')
txExgineMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("undefined", 1), ("fmOnly", 2), ("hybrid", 3), ("extendedHybrid", 4), ("fullDigital", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: txExgineMode.setStatus('current')
if mibBuilder.loadTexts: txExgineMode.setDescription('Description.')
txExgineStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 7, 1, 2), NotificationState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txExgineStatus.setStatus('current')
if mibBuilder.loadTexts: txExgineStatus.setDescription('Description.')
txExgineMute = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 7, 1, 3), NotificationState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txExgineMute.setStatus('current')
if mibBuilder.loadTexts: txExgineMute.setDescription('Description.')
txExgineSyncInputSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("undefined", 1), ("internalGps", 2), ("externalReference", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: txExgineSyncInputSrc.setStatus('current')
if mibBuilder.loadTexts: txExgineSyncInputSrc.setDescription('Description.')
txExgineSyncInputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 7, 1, 5), NotificationState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txExgineSyncInputStatus.setStatus('current')
if mibBuilder.loadTexts: txExgineSyncInputStatus.setDescription('Description.')
txExgineMpxInput = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 7, 1, 6), NotificationState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txExgineMpxInput.setStatus('current')
if mibBuilder.loadTexts: txExgineMpxInput.setDescription('Description.')
txExgineE2xInput = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 7, 1, 7), NotificationState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txExgineE2xInput.setStatus('current')
if mibBuilder.loadTexts: txExgineE2xInput.setDescription('Description.')
txExgineSupply1Status = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 7, 1, 8), NotificationState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txExgineSupply1Status.setStatus('current')
if mibBuilder.loadTexts: txExgineSupply1Status.setDescription('Description.')
txExgineSupply2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 3, 7, 1, 9), NotificationState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txExgineSupply2Status.setStatus('current')
if mibBuilder.loadTexts: txExgineSupply2Status.setDescription('Description.')
txInputAutomatic = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 4))
txInpAutoNotificationTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 4, 1), )
if mibBuilder.loadTexts: txInpAutoNotificationTable.setStatus('current')
if mibBuilder.loadTexts: txInpAutoNotificationTable.setDescription('The context information/configuration for the\n                input automatic status notifications.')
txInpAutoNotificationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 4, 1, 1), ).setIndexNames((0, "RS-XX9-TX-MIB", "txInpAutoNotificationTxIdx"), (0, "RS-XX9-TX-MIB", "txInpAutoNotificationExcIdx"), (0, "RS-XX9-TX-MIB", "txInpAutoNotificationIdx"))
if mibBuilder.loadTexts: txInpAutoNotificationEntry.setStatus('current')
if mibBuilder.loadTexts: txInpAutoNotificationEntry.setDescription('An entry in the txInpAutoNotificationTable.')
txInpAutoNotificationTxIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 4, 1, 1, 1), IndexTransmitter())
if mibBuilder.loadTexts: txInpAutoNotificationTxIdx.setStatus('current')
if mibBuilder.loadTexts: txInpAutoNotificationTxIdx.setDescription('The transmitter index.')
txInpAutoNotificationExcIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 4, 1, 1, 2), IndexAB())
if mibBuilder.loadTexts: txInpAutoNotificationExcIdx.setStatus('current')
if mibBuilder.loadTexts: txInpAutoNotificationExcIdx.setDescription('This index distinguishes the exiters.\n                Necessary if you have dual drive transmitters.')
txInpAutoNotificationIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 4, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4000, 4001)))
if mibBuilder.loadTexts: txInpAutoNotificationIdx.setStatus('current')
if mibBuilder.loadTexts: txInpAutoNotificationIdx.setDescription('The notification number as below rsXx9TxNotifications.\n                This is a helper column and therefore not-accessible.')
txInpAutoNotificationName = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4000, 4001))).clone(namedValues=NamedValues(("txInpAuto1Active", 4000), ("txInpAutoState", 4001)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: txInpAutoNotificationName.setStatus('current')
if mibBuilder.loadTexts: txInpAutoNotificationName.setDescription('The notification number as an enumeration.\n                The enumeration correlates with the notifications under rsXx9TxNotifications.')
txInpAutoNotificationMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 4, 1, 1, 5), NotificationMask()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txInpAutoNotificationMask.setStatus('current')
if mibBuilder.loadTexts: txInpAutoNotificationMask.setDescription('See textual convention for details.')
txInpAutoNotificationPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 4, 1, 1, 6), NotificationPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txInpAutoNotificationPriority.setStatus('current')
if mibBuilder.loadTexts: txInpAutoNotificationPriority.setDescription('See textual convention for details.')
txInpAutoNotificationState = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 4, 1, 1, 7), NotificationState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txInpAutoNotificationState.setStatus('current')
if mibBuilder.loadTexts: txInpAutoNotificationState.setDescription('See textual convention for details.')
txInpAutoConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 4, 2), )
if mibBuilder.loadTexts: txInpAutoConfigurationTable.setStatus('current')
if mibBuilder.loadTexts: txInpAutoConfigurationTable.setDescription('Input automatic settings.')
txInpAutoConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 4, 2, 1), ).setIndexNames((0, "RS-XX9-TX-MIB", "txInpAutoNotificationTxIdx"), (0, "RS-XX9-TX-MIB", "txInpAutoNotificationExcIdx"))
if mibBuilder.loadTexts: txInpAutoConfigurationEntry.setStatus('current')
if mibBuilder.loadTexts: txInpAutoConfigurationEntry.setDescription('An entry in the txInpAutoConfigurationTable.')
txInpAutoOperationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 4, 2, 1, 1), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txInpAutoOperationMode.setStatus('current')
if mibBuilder.loadTexts: txInpAutoOperationMode.setDescription('Switches the input automatic on or off.')
txInpAutoPreferredInput = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("input1", 1), ("noPreference", 2), ("input2", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txInpAutoPreferredInput.setStatus('current')
if mibBuilder.loadTexts: txInpAutoPreferredInput.setDescription('Selects the preferred input for the input automatic.\n                \n                Not for FM.')
txInpAutoActiveInput = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("input1", 2), ("input2", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txInpAutoActiveInput.setStatus('current')
if mibBuilder.loadTexts: txInpAutoActiveInput.setDescription('Used to select the active input if the automatic input signal\n                switchover function is switched off.\n                If the automatic switchover function is switched on,\n                the input can only be switched over using this switch\n                if txInpAutoPreferredInput is set to noPreference(3)\n                or a switchover to the standby input has taken place.\n                (The latter not for FM.)')
txInpAutoDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("toReserveAndBack", 1), ("toReserveOnly", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txInpAutoDirection.setStatus('current')
if mibBuilder.loadTexts: txInpAutoDirection.setDescription("Used to set the operational response of the automatic switchover function:\n                toReserveAndBack(1) - Following successful switchover to the standby input,\n                    the automatic switchover function can also switch back automatically\n                    if the signal at the standby input fails.\n                toReserveOnly(2)    - The automatic switchover function switches over once\n                    from the preferred input to the standby input and then assumes the\n                    'not ready' state. Switching the active input over manually to the\n                    preferred input reactivates the automatic switchover function.")
txInpAutoGuardTimeToReserve = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 4, 2, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: txInpAutoGuardTimeToReserve.setStatus('current')
if mibBuilder.loadTexts: txInpAutoGuardTimeToReserve.setDescription('Used to set a guard time which must elapse before the\n                automatic switchover function switches over to the\n                standby input if the input signal at the preferred input fails.\n                The set guard time has no effect if seamless switching is possible.\n                In this case, the switchover always takes place immediately without\n                interruption (i.e. seamlessly).')
txInpAutoGuardTimeBack = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 4, 2, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: txInpAutoGuardTimeBack.setStatus('current')
if mibBuilder.loadTexts: txInpAutoGuardTimeBack.setDescription('Used to set a guard time which must elapse before the\n                automatic switchover function switches back to the\n                preferred input if the input signal at the standby input fails.\n                If seamless switching is possible, switchover always takes place\n                immediately without interruption regardless of the set guard time.\n                If toReserveOnly(1) was selected for txInpAutoDirection,\n                the set guard time has no effect.')
txInpAutoSeamlessPossible = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 4, 2, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txInpAutoSeamlessPossible.setStatus('current')
if mibBuilder.loadTexts: txInpAutoSeamlessPossible.setDescription('Indicates whether seamless switching of the input signal is possible.\n                false(2) (not possible) always appears if only one input signal is\n                supplied or in cases where two different data streams are present at\n                the two inputs.\n                If seamless switching is possible, it always takes place immediately\n                when required, regardless of whether txInpAutoGuardTimeToReserve or\n                txInpAutoGuardTimeBack has been set.')
txInpAutoSeamlessOpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 4, 2, 1, 8), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txInpAutoSeamlessOpMode.setStatus('current')
if mibBuilder.loadTexts: txInpAutoSeamlessOpMode.setDescription('Activates/deactivates seamless switchover of the input signal.')
txInpAutoMaxDelayInput1To2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 4, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2000))).setUnits('milli second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: txInpAutoMaxDelayInput1To2.setStatus('obsolete')
if mibBuilder.loadTexts: txInpAutoMaxDelayInput1To2.setDescription('Absolute maximum delay between logical input 1 and logical input 2.')
txInpAutoDelayInput1To2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 4, 2, 1, 10), Integer32()).setUnits('milli second').setMaxAccess("readonly")
if mibBuilder.loadTexts: txInpAutoDelayInput1To2.setStatus('current')
if mibBuilder.loadTexts: txInpAutoDelayInput1To2.setDescription('The current delay between logical input 1 and logical input 2.\n                ')
txInpAutoInputFailDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 4, 2, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setUnits('second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: txInpAutoInputFailDelay.setStatus('current')
if mibBuilder.loadTexts: txInpAutoInputFailDelay.setDescription('The length of the checkout time which must expire after detection\n                of an input signal fault before the exciter displays a fault.\n                If a short checkout time is set, the system can quickly switch over\n                to a standby exciter if all input signals of the exciter fail.\n                If a long checkout time is set, there will be enough time in the event\n                of a fault to switch to an alternative feed path so that the exciter is\n                prevented from switching over to a redundancy component.\n                \n                Not for band II.')
txInpAutoIfReseveFails = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 4, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nothing", 1), ("warn", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txInpAutoIfReseveFails.setStatus('current')
if mibBuilder.loadTexts: txInpAutoIfReseveFails.setDescription('Determine whether the signal at the standby input is to be monitored.\n                If the transmitter is operated with only one input signal or the\n                standby input is connected only temporarily,\n                nothing(1) must be selected to not generate a warning.\n                If two redundant input signals are normally supplied to the transmitter,\n                warn(2) must be selected.')
txInpAutoForceExciterChangeover = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 4, 2, 1, 13), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txInpAutoForceExciterChangeover.setStatus('current')
if mibBuilder.loadTexts: txInpAutoForceExciterChangeover.setDescription('Determine whether switchover to another redundant exciter is to take place\n                if the input signal fails.\n                This function is available for all redundancy systems (dual drive,\n                backup exciter and n+1).\n                on(1)  - an exciter fault is signaled to the higher-level redundancy\n                         control unit which decides whether to switch over to another\n                         exciter or transmitter.\n                off(2) - no switchover takes place.')
txInpAutoMuteOnInputFail = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 4, 2, 1, 14), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txInpAutoMuteOnInputFail.setStatus('current')
if mibBuilder.loadTexts: txInpAutoMuteOnInputFail.setDescription("Determine whether the output signal of the exciter is to be shut down\n                if the input signal of all available inputs fails, or whether\n                'null packets' are to be sent.\n                This switch is available in multiple-frequency networks (MFN) only.\n                In single-frequency networks (SFN) and using TV standard ISDB-T,\n                the exciter will always mute if no decodable input signal is fed.\n                \n                Not for FM.")
txInpAutoDetectLostPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 4, 2, 1, 15), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txInpAutoDetectLostPackets.setStatus('current')
if mibBuilder.loadTexts: txInpAutoDetectLostPackets.setDescription('Description.')
txInpAutoTransparentTs = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 4, 2, 1, 16), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txInpAutoTransparentTs.setStatus('current')
if mibBuilder.loadTexts: txInpAutoTransparentTs.setDescription('Description.')
txInpAutoFailDetection = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 4, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("fast", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txInpAutoFailDetection.setStatus('current')
if mibBuilder.loadTexts: txInpAutoFailDetection.setDescription('Indicates how quick the exciter input reacts on missing data packets. \n                \n                normal(1): bursts in transport stream are processed without error indication \n                  (recommended for IP feed). \n                fast(2): this setting decreases the reaction time in case of a loss of input signal. \n                  It can be used when a continous datastream at the exciter input is guaranteed.\n                ')
txFrequencyRegulation = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 5))
txFrqRegNotificationTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 5, 1), )
if mibBuilder.loadTexts: txFrqRegNotificationTable.setStatus('current')
if mibBuilder.loadTexts: txFrqRegNotificationTable.setDescription('The context information/configuration for the\n                SFN status notifications.')
txFrqRegNotificationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 5, 1, 1), ).setIndexNames((0, "RS-XX9-TX-MIB", "txFrqRegNotificationTxIdx"), (0, "RS-XX9-TX-MIB", "txFrqRegNotificationExcIdx"), (0, "RS-XX9-TX-MIB", "txFrqRegNotificationIdx"))
if mibBuilder.loadTexts: txFrqRegNotificationEntry.setStatus('current')
if mibBuilder.loadTexts: txFrqRegNotificationEntry.setDescription('An entry in the txSfnNotificationTable.')
txFrqRegNotificationTxIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 5, 1, 1, 1), IndexTransmitter())
if mibBuilder.loadTexts: txFrqRegNotificationTxIdx.setStatus('current')
if mibBuilder.loadTexts: txFrqRegNotificationTxIdx.setDescription('The transmitter index.')
txFrqRegNotificationExcIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 5, 1, 1, 2), IndexAB())
if mibBuilder.loadTexts: txFrqRegNotificationExcIdx.setStatus('current')
if mibBuilder.loadTexts: txFrqRegNotificationExcIdx.setDescription('This index distinguishes the exiters.\n                Necessary if you have dual drive transmitters.')
txFrqRegNotificationIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 5, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(5000, 5004)))
if mibBuilder.loadTexts: txFrqRegNotificationIdx.setStatus('current')
if mibBuilder.loadTexts: txFrqRegNotificationIdx.setDescription('The notification number as below rsXx9TxNotifications.\n                This is a helper column and therefore not-accessible.')
txFrqRegNotificationName = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5000, 5001, 5002, 5003, 5004))).clone(namedValues=NamedValues(("txFrqRegSummary", 5000), ("txFrqRegCurrentSource", 5001), ("txFrqRegSourceExtRef", 5002), ("txFrqRegSourceExtPPS", 5003), ("txFrqRegSourceIntGPS", 5004)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: txFrqRegNotificationName.setStatus('current')
if mibBuilder.loadTexts: txFrqRegNotificationName.setDescription('The notification number as an enumeration.\n                The enumeration correlates with the notifications under rsXx9TxNotifications.')
txFrqRegNotificationMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 5, 1, 1, 5), NotificationMask()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txFrqRegNotificationMask.setStatus('current')
if mibBuilder.loadTexts: txFrqRegNotificationMask.setDescription('See textual convention for details.')
txFrqRegNotificationPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 5, 1, 1, 6), NotificationPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txFrqRegNotificationPriority.setStatus('current')
if mibBuilder.loadTexts: txFrqRegNotificationPriority.setDescription('See textual convention for details.')
txFrqRegNotificationState = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 5, 1, 1, 7), NotificationState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txFrqRegNotificationState.setStatus('current')
if mibBuilder.loadTexts: txFrqRegNotificationState.setDescription('See textual convention for details.')
txFrqRegStateTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 5, 2), )
if mibBuilder.loadTexts: txFrqRegStateTable.setStatus('current')
if mibBuilder.loadTexts: txFrqRegStateTable.setDescription('Frequency regulation status.')
txFrqRegStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 5, 2, 1), ).setIndexNames((0, "RS-XX9-TX-MIB", "txFrqRegNotificationTxIdx"), (0, "RS-XX9-TX-MIB", "txFrqRegNotificationExcIdx"))
if mibBuilder.loadTexts: txFrqRegStateEntry.setStatus('current')
if mibBuilder.loadTexts: txFrqRegStateEntry.setDescription('An entry in the txSfnFreqRegulationTable.')
txFrqRegStateCurrentSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("manual", 1), ("external5MHz", 2), ("external10MHz", 3), ("externalPPS", 4), ("internalGPS", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: txFrqRegStateCurrentSource.setStatus('current')
if mibBuilder.loadTexts: txFrqRegStateCurrentSource.setDescription('The current source for frequency synchronization.')
txFrqRegStateController = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("inaccurate", 2), ("good", 3), ("standsGuardTime", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: txFrqRegStateController.setStatus('current')
if mibBuilder.loadTexts: txFrqRegStateController.setDescription('The precision of frequency regulation.')
txFrqRegStateCurrentControllerMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 5, 2, 1, 3), ControllerMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txFrqRegStateCurrentControllerMode.setStatus('current')
if mibBuilder.loadTexts: txFrqRegStateCurrentControllerMode.setDescription('Description.')
txFrqRegSetupTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 5, 3), )
if mibBuilder.loadTexts: txFrqRegSetupTable.setStatus('current')
if mibBuilder.loadTexts: txFrqRegSetupTable.setDescription('Frequency regulation configuration.')
txFrqRegSetupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 5, 3, 1), ).setIndexNames((0, "RS-XX9-TX-MIB", "txFrqRegNotificationTxIdx"), (0, "RS-XX9-TX-MIB", "txFrqRegNotificationExcIdx"))
if mibBuilder.loadTexts: txFrqRegSetupEntry.setStatus('current')
if mibBuilder.loadTexts: txFrqRegSetupEntry.setDescription('An entry in the txFrqRegSetupTable.')
txFrqRegSetupSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("manual", 1), ("external5MHz", 2), ("external10MHz", 3), ("externalPPS", 4), ("internalGPS", 5), ("auto", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txFrqRegSetupSource.setStatus('current')
if mibBuilder.loadTexts: txFrqRegSetupSource.setDescription('The appropriate signal source for the reference frequency\n                may be determined automatically or defined by this value.\n                If auto(6) is choosen and several signal sources are available,\n                an external reference will be preferred over internal GPS.\n                If manual(1) is choosen the OCXO may be set with\n                txSfnFreqRegManualOcxoAdjust.')
txFrqRegSetupControllerMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 5, 3, 1, 2), ControllerMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txFrqRegSetupControllerMode.setStatus('current')
if mibBuilder.loadTexts: txFrqRegSetupControllerMode.setDescription("When using an external 1PPS reference source with high \n                jitter, activating this function can provide better frequency \n                stability. For 'good' reference signals, this function should be \n                disabled, as the regulator takes significantly longer to attain its \n                maximum frequency stability.\n                ")
txFrqRegSetupRefFailPermissionTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 5, 3, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 24))).setUnits('hour').setMaxAccess("readwrite")
if mibBuilder.loadTexts: txFrqRegSetupRefFailPermissionTime.setStatus('current')
if mibBuilder.loadTexts: txFrqRegSetupRefFailPermissionTime.setDescription('Defines how many hours after loss of reference\n                signal processing will go on.')
txFrqRegSetupMuteOnFail = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 5, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("never", 1), ("onlyAtStartup", 2), ("ifGuardTimeExpires", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txFrqRegSetupMuteOnFail.setStatus('current')
if mibBuilder.loadTexts: txFrqRegSetupMuteOnFail.setDescription('Determines performance in case of reference loss.\n                never(1) - muting is never done\n                onlyAtStartup(2) - \n                ifGuardTimeExpires(3) - muting is done if reference loss lasts more\n                                        than txSfnFreqRegRefFailPermissionTime')
txFrqRegSetupManualOcxoAdjust = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 5, 3, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txFrqRegSetupManualOcxoAdjust.setStatus('current')
if mibBuilder.loadTexts: txFrqRegSetupManualOcxoAdjust.setDescription('Enables adjustment of the internal crystal oszillator.')
txFrqRegSetupMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 5, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("off", 1), ("internal5MHz", 2), ("internal10MHz", 3), ("internal1PPS", 4), ("internalGPS", 5), ("currentSource", 6), ("cofdmSync", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txFrqRegSetupMonitor.setStatus('current')
if mibBuilder.loadTexts: txFrqRegSetupMonitor.setDescription('Selects the signal for the monitor out connector (X24).\n                \n                cofdmSync(7) - a synchronous signal at start of a DAB COFDM frame')
txSFN = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 6))
txSfnNotificationTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 6, 1), )
if mibBuilder.loadTexts: txSfnNotificationTable.setStatus('current')
if mibBuilder.loadTexts: txSfnNotificationTable.setDescription('The context information/configuration for the\n                SFN status notifications.')
txSfnNotificationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 6, 1, 1), ).setIndexNames((0, "RS-XX9-TX-MIB", "txSfnNotificationTxIdx"), (0, "RS-XX9-TX-MIB", "txSfnNotificationExcIdx"), (0, "RS-XX9-TX-MIB", "txSfnNotificationIdx"))
if mibBuilder.loadTexts: txSfnNotificationEntry.setStatus('current')
if mibBuilder.loadTexts: txSfnNotificationEntry.setDescription('An entry in the txSfnNotificationTable.')
txSfnNotificationTxIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 6, 1, 1, 1), IndexTransmitter())
if mibBuilder.loadTexts: txSfnNotificationTxIdx.setStatus('current')
if mibBuilder.loadTexts: txSfnNotificationTxIdx.setDescription('The transmitter index.')
txSfnNotificationExcIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 6, 1, 1, 2), IndexAB())
if mibBuilder.loadTexts: txSfnNotificationExcIdx.setStatus('current')
if mibBuilder.loadTexts: txSfnNotificationExcIdx.setDescription('This index distinguishes the exiters.\n                Necessary if you have dual drive transmitters.')
txSfnNotificationIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 6, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(6000, 6000)))
if mibBuilder.loadTexts: txSfnNotificationIdx.setStatus('current')
if mibBuilder.loadTexts: txSfnNotificationIdx.setDescription('The notification number as below rsXx9TxNotifications.\n                This is a helper column and therefore not-accessible.')
txSfnNotificationName = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(6000))).clone(namedValues=NamedValues(("txSfnSummary", 6000)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: txSfnNotificationName.setStatus('current')
if mibBuilder.loadTexts: txSfnNotificationName.setDescription('The notification number as an enumeration.\n                The enumeration correlates with the notifications under rsXx9TxNotifications.')
txSfnNotificationMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 6, 1, 1, 5), NotificationMask()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txSfnNotificationMask.setStatus('current')
if mibBuilder.loadTexts: txSfnNotificationMask.setDescription('See textual convention for details.')
txSfnNotificationPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 6, 1, 1, 6), NotificationPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txSfnNotificationPriority.setStatus('current')
if mibBuilder.loadTexts: txSfnNotificationPriority.setDescription('See textual convention for details.')
txSfnNotificationState = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 6, 1, 1, 7), NotificationState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txSfnNotificationState.setStatus('current')
if mibBuilder.loadTexts: txSfnNotificationState.setDescription('See textual convention for details.')
txSfnStateTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 6, 2), )
if mibBuilder.loadTexts: txSfnStateTable.setStatus('current')
if mibBuilder.loadTexts: txSfnStateTable.setDescription('Time synchronization status.')
txSfnStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 6, 2, 1), ).setIndexNames((0, "RS-XX9-TX-MIB", "txSfnNotificationTxIdx"), (0, "RS-XX9-TX-MIB", "txSfnNotificationExcIdx"))
if mibBuilder.loadTexts: txSfnStateEntry.setStatus('current')
if mibBuilder.loadTexts: txSfnStateEntry.setDescription('An entry in the txSfnTimeSyncTable.')
txSfnStateInternalPpsValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 6, 2, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txSfnStateInternalPpsValid.setStatus('current')
if mibBuilder.loadTexts: txSfnStateInternalPpsValid.setDescription('Shows whether the internal generated PPS is\n                phase synchronous to frequency regulation.')
txSfnStateTransmissionInTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 4, 5))).clone(namedValues=NamedValues(("unknown", 2), ("outOfTime", 4), ("inTime", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: txSfnStateTransmissionInTime.setStatus('current')
if mibBuilder.loadTexts: txSfnStateTransmissionInTime.setDescription('Indicates whether or not the fed signal can be transmitted in a \n                time-synchronous manner. If an error message is displayed, \n                check the reference feed of the Time Synchronization and the \n                Frequency Regulation.')
txSfnStateNetworkDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 6, 2, 1, 3), Unsigned32()).setUnits('1/10 micro second').setMaxAccess("readonly")
if mibBuilder.loadTexts: txSfnStateNetworkDelay.setStatus('current')
if mibBuilder.loadTexts: txSfnStateNetworkDelay.setDescription('Delivery time of signal from SFN adapter till transmitter input.\n                \n                For DVB-T, ISDB-T, DTMB, ATSC only.')
txSfnStateProcessingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 6, 2, 1, 4), Unsigned32()).setUnits('1/10 micro second').setMaxAccess("readonly")
if mibBuilder.loadTexts: txSfnStateProcessingTime.setStatus('current')
if mibBuilder.loadTexts: txSfnStateProcessingTime.setDescription('Time used for internal signal processing.\n                \n                \n                For DAB, this indicates the minimal transit time of the signal through \n                the transmitter. The transit time is determined by the signal \n                processing in the Channel Encoder (COFDM) and is depending on the \n                set DAB mode.\n                ')
txSfnStateDynamicDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 6, 2, 1, 5), Unsigned32()).setUnits('1/10 micro second').setMaxAccess("readonly")
if mibBuilder.loadTexts: txSfnStateDynamicDelay.setStatus('current')
if mibBuilder.loadTexts: txSfnStateDynamicDelay.setDescription('SFN controlled time delay for matching\n                transmitting point in time exactly.')
txSfnStateTotalDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 6, 2, 1, 6), Unsigned32()).setUnits('1/10 micro second').setMaxAccess("readonly")
if mibBuilder.loadTexts: txSfnStateTotalDelay.setStatus('current')
if mibBuilder.loadTexts: txSfnStateTotalDelay.setDescription('Overall retention time through transmitter:\n                sum of txSfnTimeSyncProcessingTime and txSfnTimeSyncDynamicDelay')
txSfnStateMaximumDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 6, 2, 1, 7), Unsigned32()).setUnits('1/10 micro second').setMaxAccess("readonly")
if mibBuilder.loadTexts: txSfnStateMaximumDelay.setStatus('current')
if mibBuilder.loadTexts: txSfnStateMaximumDelay.setDescription('Time taken for the signal to travel from the play-out center\n                to the transmitter antenna for regular transmission.\n                This delay is set in the SFN adapter and is the default\n                for all transmitters in a dynamic SFN.\n                \n                For DVB-T, ISDB-T, DTMB, ATSC only.')
txSfnStateDispatchTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 6, 2, 1, 8), Unsigned32()).setUnits('1/10 micro second').setMaxAccess("readonly")
if mibBuilder.loadTexts: txSfnStateDispatchTime.setStatus('current')
if mibBuilder.loadTexts: txSfnStateDispatchTime.setDescription('Time taken for the signal to travel from the play-out center\n                to the transmitter antenna for real transmission.\n                This delay corresponds to the default Maximum Delay for all transmitters\n                in a SFN plus tranmitter specific Static Delay Offset\n                plus Tx Time Offset (if available).\n                \n                For DVB-T, ISDB-T, DTMB, ATSC only.')
txSfnStatePPS = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 6, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notStated", 1), ("missing", 2), ("holdoverExpired", 3), ("holdover", 4), ("ok", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: txSfnStatePPS.setStatus('current')
if mibBuilder.loadTexts: txSfnStatePPS.setDescription('Description.')
txSfnStateSFN = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 6, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("notStated", 1), ("sfnResync", 2), ("noTimeReference", 3), ("inTime", 4), ("noTimeInformation", 5), ("wrongSfnTimeSetup", 6), ("wrongFreqRefSource", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: txSfnStateSFN.setStatus('current')
if mibBuilder.loadTexts: txSfnStateSFN.setDescription('Shows whether the fed signal may be transmitted time synchronous.\n                ')
txSfnStateTimestampState = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 6, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("off", 1), ("none", 2), ("null", 3), ("relative", 4), ("absolute", 5), ("multiple", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: txSfnStateTimestampState.setStatus('current')
if mibBuilder.loadTexts: txSfnStateTimestampState.setDescription('Description.')
txSfnSetupTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 6, 3), )
if mibBuilder.loadTexts: txSfnSetupTable.setStatus('current')
if mibBuilder.loadTexts: txSfnSetupTable.setDescription('Time synchronization configuration.')
txSfnSetupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 6, 3, 1), ).setIndexNames((0, "RS-XX9-TX-MIB", "txSfnNotificationTxIdx"), (0, "RS-XX9-TX-MIB", "txSfnNotificationExcIdx"))
if mibBuilder.loadTexts: txSfnSetupEntry.setStatus('current')
if mibBuilder.loadTexts: txSfnSetupEntry.setDescription('An entry in the txSfnSetupTable.')
txSfnSetupSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 6, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 5))).clone(namedValues=NamedValues(("externalPPS", 4), ("internalGPS", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txSfnSetupSource.setStatus('current')
if mibBuilder.loadTexts: txSfnSetupSource.setDescription('The suitable signal source for synchronizing the time of transmission.')
txSfnSetupSFN = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 6, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("undefined", 1), ("off", 2), ("on", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txSfnSetupSFN.setStatus('current')
if mibBuilder.loadTexts: txSfnSetupSFN.setDescription('Selects mode of time synchronization:\n                off(2) - MFN\n                on(3)  - SFN\n                \n                for ISDB-T, please use isdbtCfgNetworkMode instead\n                for DTMB, please use dtmbConfigurationNetworkMode instead\n                for DAB, please use dabSetupSfnSync instead')
txSfnSetupMaxDeviation = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 6, 3, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setUnits('1/10 micro second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: txSfnSetupMaxDeviation.setStatus('current')
if mibBuilder.loadTexts: txSfnSetupMaxDeviation.setDescription('Maximum admissible deviation for transmitting point in time.')
txSfnSetupStaticDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 6, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100000000, 100000000))).setUnits('1/10 micro second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: txSfnSetupStaticDelay.setStatus('current')
if mibBuilder.loadTexts: txSfnSetupStaticDelay.setDescription('Positive or negative offset transferred in the MIP (DVB-T) respectively \n                in IIP (ISDB-T) for the individual transmitter location of the time of \n                transmission relative to the regular time of transmission preset by \n                the Maximum Delay. This delay is only displayed and activated if the \n                Tx automatic function (DVB-T) respectively Equipment Control (ISDB-T) \n                is active. If Tx Offset Delay and Static Delay are present at the same \n                time, their effects are added together.\n                ')
txGPS = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 7))
txPrecorrection = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 8))
txPrecorrNotificationTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 8, 1), )
if mibBuilder.loadTexts: txPrecorrNotificationTable.setStatus('current')
if mibBuilder.loadTexts: txPrecorrNotificationTable.setDescription('The context information/configuration for the\n                precorrection status notifications.')
txPrecorrNotificationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 8, 1, 1), ).setIndexNames((0, "RS-XX9-TX-MIB", "txPrecorrNotificationTxIdx"), (0, "RS-XX9-TX-MIB", "txPrecorrNotificationExcIdx"), (0, "RS-XX9-TX-MIB", "txPrecorrNotificationIdx"))
if mibBuilder.loadTexts: txPrecorrNotificationEntry.setStatus('current')
if mibBuilder.loadTexts: txPrecorrNotificationEntry.setDescription('An entry in the txPrecorrNotificationTable.')
txPrecorrNotificationTxIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 8, 1, 1, 1), IndexTransmitter())
if mibBuilder.loadTexts: txPrecorrNotificationTxIdx.setStatus('current')
if mibBuilder.loadTexts: txPrecorrNotificationTxIdx.setDescription('The transmitter index.')
txPrecorrNotificationExcIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 8, 1, 1, 2), IndexAB())
if mibBuilder.loadTexts: txPrecorrNotificationExcIdx.setStatus('current')
if mibBuilder.loadTexts: txPrecorrNotificationExcIdx.setDescription('This index distinguishes the exiters.\n                Necessary if you have dual drive transmitters.')
txPrecorrNotificationIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 8, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(8000, 8002)))
if mibBuilder.loadTexts: txPrecorrNotificationIdx.setStatus('current')
if mibBuilder.loadTexts: txPrecorrNotificationIdx.setDescription('The notification number as below rsXx9TxNotifications.\n                This is a helper column and therefore not-accessible.')
txPrecorrNotificationName = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 8, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(8000, 8001, 8002))).clone(namedValues=NamedValues(("txPrecorrLinSummary", 8000), ("txPrecorrNonLinSummary", 8001), ("txPrecorrMerState", 8002)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: txPrecorrNotificationName.setStatus('current')
if mibBuilder.loadTexts: txPrecorrNotificationName.setDescription('The notification number as an enumeration.\n                The enumeration correlates with the notifications under rsXx9TxNotifications.')
txPrecorrNotificationMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 8, 1, 1, 5), NotificationMask()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txPrecorrNotificationMask.setStatus('current')
if mibBuilder.loadTexts: txPrecorrNotificationMask.setDescription('See textual convention for details.')
txPrecorrNotificationPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 8, 1, 1, 6), NotificationPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txPrecorrNotificationPriority.setStatus('current')
if mibBuilder.loadTexts: txPrecorrNotificationPriority.setDescription('See textual convention for details.')
txPrecorrNotificationState = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 8, 1, 1, 7), NotificationState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txPrecorrNotificationState.setStatus('current')
if mibBuilder.loadTexts: txPrecorrNotificationState.setDescription('See textual convention for details.')
txPrecorrectionLinear = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 8, 2))
txPrecorrLinStateTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 8, 2, 1), )
if mibBuilder.loadTexts: txPrecorrLinStateTable.setStatus('current')
if mibBuilder.loadTexts: txPrecorrLinStateTable.setDescription('Linear precorrection state information.')
txPrecorrLinStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 8, 2, 1, 1), ).setIndexNames((0, "RS-XX9-TX-MIB", "txPrecorrLinStateTxIdx"), (0, "RS-XX9-TX-MIB", "txPrecorrLinStateExcIdx"))
if mibBuilder.loadTexts: txPrecorrLinStateEntry.setStatus('current')
if mibBuilder.loadTexts: txPrecorrLinStateEntry.setDescription('An entry in the txPrecorrLinStateTable.')
txPrecorrLinStateTxIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 8, 2, 1, 1, 1), IndexTransmitter())
if mibBuilder.loadTexts: txPrecorrLinStateTxIdx.setStatus('current')
if mibBuilder.loadTexts: txPrecorrLinStateTxIdx.setDescription('The transmitter index.')
txPrecorrLinStateExcIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 8, 2, 1, 1, 2), IndexAB())
if mibBuilder.loadTexts: txPrecorrLinStateExcIdx.setStatus('current')
if mibBuilder.loadTexts: txPrecorrLinStateExcIdx.setDescription('This index distinguishes the exiters.\n                Necessary if you have dual drive transmitters.')
txPrecorrLinStateStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 8, 2, 1, 1, 3), PrecorrectionState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txPrecorrLinStateStatus.setStatus('current')
if mibBuilder.loadTexts: txPrecorrLinStateStatus.setDescription('Linear precorrection state.\n                see textual convention')
txPrecorrLinStateSignalLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 8, 2, 1, 1, 4), PrecorrectionSignalLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txPrecorrLinStateSignalLevel.setStatus('current')
if mibBuilder.loadTexts: txPrecorrLinStateSignalLevel.setDescription('see textual convention')
txPrecorrLinStateAmplitudeRipple = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 8, 2, 1, 1, 5), Integer32()).setUnits('milli Bel').setMaxAccess("readonly")
if mibBuilder.loadTexts: txPrecorrLinStateAmplitudeRipple.setStatus('current')
if mibBuilder.loadTexts: txPrecorrLinStateAmplitudeRipple.setDescription('achieved residual ripple for amplitude')
txPrecorrLinStateGroupDelayRipple = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 8, 2, 1, 1, 6), Integer32()).setUnits('1/10 nano second').setMaxAccess("readonly")
if mibBuilder.loadTexts: txPrecorrLinStateGroupDelayRipple.setStatus('current')
if mibBuilder.loadTexts: txPrecorrLinStateGroupDelayRipple.setDescription('achieved residual ripple for group delay')
txPrecorrLinStateAmplitudeRippleLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 8, 2, 1, 1, 7), NotificationState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txPrecorrLinStateAmplitudeRippleLimit.setStatus('current')
if mibBuilder.loadTexts: txPrecorrLinStateAmplitudeRippleLimit.setDescription('off(2)     - precorrection with this limit was successful\n                             or limit is not checked\n                warning(4) - limit is not reachable')
txPrecorrLinStateGroupDelayRippleLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 8, 2, 1, 1, 8), NotificationState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txPrecorrLinStateGroupDelayRippleLimit.setStatus('current')
if mibBuilder.loadTexts: txPrecorrLinStateGroupDelayRippleLimit.setDescription('off(2)     - precorrection with this limit was successful\n                             or limit is not checked\n                warning(4) - limit is not reachable')
txPrecorrLinSetupTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 8, 2, 2), )
if mibBuilder.loadTexts: txPrecorrLinSetupTable.setStatus('current')
if mibBuilder.loadTexts: txPrecorrLinSetupTable.setDescription('Linear precorrection settings.')
txPrecorrLinSetupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 8, 2, 2, 1), )
txPrecorrLinStateEntry.registerAugmentions(("RS-XX9-TX-MIB", "txPrecorrLinSetupEntry"))
txPrecorrLinSetupEntry.setIndexNames(*txPrecorrLinStateEntry.getIndexNames())
if mibBuilder.loadTexts: txPrecorrLinSetupEntry.setStatus('current')
if mibBuilder.loadTexts: txPrecorrLinSetupEntry.setDescription('An entry in the txPrecorrLinSetupTable.')
txPrecorrLinSetupOpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 8, 2, 2, 1, 1), PrecorrectionOperationMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txPrecorrLinSetupOpMode.setStatus('current')
if mibBuilder.loadTexts: txPrecorrLinSetupOpMode.setDescription('see textual convention')
txPrecorrLinSetupReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 8, 2, 2, 1, 2), Trigger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txPrecorrLinSetupReset.setStatus('current')
if mibBuilder.loadTexts: txPrecorrLinSetupReset.setDescription('Reset of predistorter leads to recalculation of\n                precorrection curve. Meanwhile precorrection is not active.')
txPrecorrLinSetupAmplitudeRippleLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 8, 2, 2, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setUnits('centi Bel').setMaxAccess("readwrite")
if mibBuilder.loadTexts: txPrecorrLinSetupAmplitudeRippleLimit.setStatus('current')
if mibBuilder.loadTexts: txPrecorrLinSetupAmplitudeRippleLimit.setDescription('Desired maximal amplitude ripple on filter output.')
txPrecorrLinSetupGroupDelayRippleLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 8, 2, 2, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 500))).setUnits('nano second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: txPrecorrLinSetupGroupDelayRippleLimit.setStatus('current')
if mibBuilder.loadTexts: txPrecorrLinSetupGroupDelayRippleLimit.setDescription('Desired maximal group delay ripple on filter output.')
txPrecorrLinSetupEquipmentSlope = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 8, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 100))).setUnits('milli Bel').setMaxAccess("readwrite")
if mibBuilder.loadTexts: txPrecorrLinSetupEquipmentSlope.setStatus('current')
if mibBuilder.loadTexts: txPrecorrLinSetupEquipmentSlope.setDescription('Description')
txPrecorrectionNonLinear = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 8, 3))
txPrecorrNonLinStateTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 8, 3, 1), )
if mibBuilder.loadTexts: txPrecorrNonLinStateTable.setStatus('current')
if mibBuilder.loadTexts: txPrecorrNonLinStateTable.setDescription('Non linear precorrection state information.')
txPrecorrNonLinStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 8, 3, 1, 1), ).setIndexNames((0, "RS-XX9-TX-MIB", "txPrecorrNonLinStateTxIdx"), (0, "RS-XX9-TX-MIB", "txPrecorrNonLinStateExcIdx"))
if mibBuilder.loadTexts: txPrecorrNonLinStateEntry.setStatus('current')
if mibBuilder.loadTexts: txPrecorrNonLinStateEntry.setDescription('An entry in the txPrecorrNonLinStateTable.')
txPrecorrNonLinStateTxIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 8, 3, 1, 1, 1), IndexTransmitter())
if mibBuilder.loadTexts: txPrecorrNonLinStateTxIdx.setStatus('current')
if mibBuilder.loadTexts: txPrecorrNonLinStateTxIdx.setDescription('The transmitter index.')
txPrecorrNonLinStateExcIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 8, 3, 1, 1, 2), IndexAB())
if mibBuilder.loadTexts: txPrecorrNonLinStateExcIdx.setStatus('current')
if mibBuilder.loadTexts: txPrecorrNonLinStateExcIdx.setDescription('This index distinguishes the exiters.\n                Necessary if you have dual drive transmitters.')
txPrecorrNonLinStateStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 8, 3, 1, 1, 3), PrecorrectionState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txPrecorrNonLinStateStatus.setStatus('current')
if mibBuilder.loadTexts: txPrecorrNonLinStateStatus.setDescription('Nonlinear precorrection state.\n                see textual convention')
txPrecorrNonLinStateSignalLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 8, 3, 1, 1, 4), PrecorrectionSignalLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txPrecorrNonLinStateSignalLevel.setStatus('current')
if mibBuilder.loadTexts: txPrecorrNonLinStateSignalLevel.setDescription('see textual convention')
txPrecorrNonLinStateShoulderLeft = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 8, 3, 1, 1, 5), Integer32()).setUnits('centi Bel').setMaxAccess("readonly")
if mibBuilder.loadTexts: txPrecorrNonLinStateShoulderLeft.setStatus('current')
if mibBuilder.loadTexts: txPrecorrNonLinStateShoulderLeft.setDescription('achieved shoulder distance in the left area of signal spectrum')
txPrecorrNonLinStateShoulderRight = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 8, 3, 1, 1, 6), Integer32()).setUnits('centi Bel').setMaxAccess("readonly")
if mibBuilder.loadTexts: txPrecorrNonLinStateShoulderRight.setStatus('current')
if mibBuilder.loadTexts: txPrecorrNonLinStateShoulderRight.setDescription('achieved shoulder distance in the right area of signal spectrum')
txPrecorrNonLinSetupTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 8, 3, 2), )
if mibBuilder.loadTexts: txPrecorrNonLinSetupTable.setStatus('current')
if mibBuilder.loadTexts: txPrecorrNonLinSetupTable.setDescription('Non linear precorrection settings.')
txPrecorrNonLinSetupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 8, 3, 2, 1), )
txPrecorrNonLinStateEntry.registerAugmentions(("RS-XX9-TX-MIB", "txPrecorrNonLinSetupEntry"))
txPrecorrNonLinSetupEntry.setIndexNames(*txPrecorrNonLinStateEntry.getIndexNames())
if mibBuilder.loadTexts: txPrecorrNonLinSetupEntry.setStatus('current')
if mibBuilder.loadTexts: txPrecorrNonLinSetupEntry.setDescription('An entry in the txPrecorrNonLinSetupTable.')
txPrecorrNonLinSetupOpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 8, 3, 2, 1, 1), PrecorrectionOperationMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txPrecorrNonLinSetupOpMode.setStatus('current')
if mibBuilder.loadTexts: txPrecorrNonLinSetupOpMode.setDescription('see textual convention')
txPrecorrNonLinSetupReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 8, 3, 2, 1, 2), Trigger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txPrecorrNonLinSetupReset.setStatus('current')
if mibBuilder.loadTexts: txPrecorrNonLinSetupReset.setDescription('Reset of predistorter leads to recalculation of\n                precorrection curve. Meanwhile precorrection is not active.')
txPrecorrNonLinSetupShoulderDistance = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 8, 3, 2, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(30, 45))).setUnits('dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: txPrecorrNonLinSetupShoulderDistance.setStatus('current')
if mibBuilder.loadTexts: txPrecorrNonLinSetupShoulderDistance.setDescription('Desired shoulder distance of the output signal.')
txPrecorrNonLinSetupSignalLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 8, 3, 2, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(60, 120))).setUnits('centi Bel').setMaxAccess("readwrite")
if mibBuilder.loadTexts: txPrecorrNonLinSetupSignalLimit.setStatus('obsolete')
if mibBuilder.loadTexts: txPrecorrNonLinSetupSignalLimit.setDescription('Limits the signal on input\n                of the nonlinear precorrector.\n                obsolete')
txPrecorrectionCfrTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 8, 4), )
if mibBuilder.loadTexts: txPrecorrectionCfrTable.setStatus('current')
if mibBuilder.loadTexts: txPrecorrectionCfrTable.setDescription('crest factor reduction parameters')
txPrecorrectionCfrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 8, 4, 1), ).setIndexNames((0, "RS-XX9-TX-MIB", "txPrecorrNotificationTxIdx"), (0, "RS-XX9-TX-MIB", "txPrecorrNotificationExcIdx"))
if mibBuilder.loadTexts: txPrecorrectionCfrEntry.setStatus('current')
if mibBuilder.loadTexts: txPrecorrectionCfrEntry.setDescription('An entry in the txPrecorrectionCfrTable.')
txPrecorrCfrEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 8, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("bypass", 1), ("manual", 2), ("auto", 3), ("run", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txPrecorrCfrEnable.setStatus('current')
if mibBuilder.loadTexts: txPrecorrCfrEnable.setDescription('Description.')
txPrecorrCfrLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 8, 4, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(50, 150))).setUnits('centi Bel').setMaxAccess("readwrite")
if mibBuilder.loadTexts: txPrecorrCfrLevel.setStatus('current')
if mibBuilder.loadTexts: txPrecorrCfrLevel.setDescription('Description.')
txPrecorrCfrInbandNoise = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 8, 4, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: txPrecorrCfrInbandNoise.setStatus('current')
if mibBuilder.loadTexts: txPrecorrCfrInbandNoise.setDescription('Description.')
txPrecorrCfrOutbandNoise = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 8, 4, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: txPrecorrCfrOutbandNoise.setStatus('current')
if mibBuilder.loadTexts: txPrecorrCfrOutbandNoise.setDescription('Description.')
txPrecorrSigQualTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 8, 5), )
if mibBuilder.loadTexts: txPrecorrSigQualTable.setStatus('current')
if mibBuilder.loadTexts: txPrecorrSigQualTable.setDescription('signal quality parameters')
txPrecorrSigQualEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 8, 5, 1), ).setIndexNames((0, "RS-XX9-TX-MIB", "txPrecorrSigQualTxIdx"), (0, "RS-XX9-TX-MIB", "txPrecorrSigQualExcIdx"))
if mibBuilder.loadTexts: txPrecorrSigQualEntry.setStatus('current')
if mibBuilder.loadTexts: txPrecorrSigQualEntry.setDescription('An entry in the txPrecorrSigQualTable')
txPrecorrSigQualTxIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 8, 5, 1, 1), IndexTransmitter())
if mibBuilder.loadTexts: txPrecorrSigQualTxIdx.setStatus('current')
if mibBuilder.loadTexts: txPrecorrSigQualTxIdx.setDescription('Description.')
txPrecorrSigQualExcIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 8, 5, 1, 2), IndexAB())
if mibBuilder.loadTexts: txPrecorrSigQualExcIdx.setStatus('current')
if mibBuilder.loadTexts: txPrecorrSigQualExcIdx.setDescription('Description.')
txPrecorrSigQualPapr = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 8, 5, 1, 3), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: txPrecorrSigQualPapr.setStatus('current')
if mibBuilder.loadTexts: txPrecorrSigQualPapr.setDescription('The Peak to Average Power Ratio indicates the proportion \n                between peak and average in-band power.\n                ')
txPrecorrSigQualMer = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 8, 5, 1, 4), Integer32()).setUnits('0.1 db').setMaxAccess("readonly")
if mibBuilder.loadTexts: txPrecorrSigQualMer.setStatus('current')
if mibBuilder.loadTexts: txPrecorrSigQualMer.setDescription('The Modulation Error Rate indicates the signal quality. A bad MER can \n                be seen in a constellation diagram as a cloud of constellation points. A \n                high MER let look the constellation points sharper. When the MER is \n                too low a receiver can not differ between distinct constellation points an \n                produces errors. \n                ')
txPrecorrSigQualMerWarnLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 8, 5, 1, 5), Integer32()).setUnits('0.1 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: txPrecorrSigQualMerWarnLimit.setStatus('current')
if mibBuilder.loadTexts: txPrecorrSigQualMerWarnLimit.setDescription('Description.')
txOutputStage = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 9))
txOstNotificationTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 9, 1), )
if mibBuilder.loadTexts: txOstNotificationTable.setStatus('current')
if mibBuilder.loadTexts: txOstNotificationTable.setDescription('The context information/configuration for the\n                output stage status notifications.')
txOstNotificationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 9, 1, 1), ).setIndexNames((0, "RS-XX9-TX-MIB", "txOstNotificationTxIdx"), (0, "RS-XX9-TX-MIB", "txOstNotificationOstIdx"), (0, "RS-XX9-TX-MIB", "txOstNotificationIdx"))
if mibBuilder.loadTexts: txOstNotificationEntry.setStatus('current')
if mibBuilder.loadTexts: txOstNotificationEntry.setDescription('An entry in the txOstNotificationTable.')
txOstNotificationTxIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 9, 1, 1, 1), IndexTransmitter())
if mibBuilder.loadTexts: txOstNotificationTxIdx.setStatus('current')
if mibBuilder.loadTexts: txOstNotificationTxIdx.setDescription('The transmitter index.')
txOstNotificationOstIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 9, 1, 1, 2), IndexAB())
if mibBuilder.loadTexts: txOstNotificationOstIdx.setStatus('current')
if mibBuilder.loadTexts: txOstNotificationOstIdx.setDescription('This index distinguishes the output stages.\n                Necessary if you have power reserve transmitters.')
txOstNotificationIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 9, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(9000, 9000)))
if mibBuilder.loadTexts: txOstNotificationIdx.setStatus('current')
if mibBuilder.loadTexts: txOstNotificationIdx.setDescription('The notification number as below rsXx9TxNotifications.\n                This is a helper column and therefore not-accessible.')
txOstNotificationName = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 9, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(9000))).clone(namedValues=NamedValues(("txOstSummary", 9000)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: txOstNotificationName.setStatus('current')
if mibBuilder.loadTexts: txOstNotificationName.setDescription('The notification number as an enumeration.\n                The enumeration correlates with the notifications under rsXx9TxNotifications.')
txOstNotificationMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 9, 1, 1, 5), NotificationMask()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txOstNotificationMask.setStatus('current')
if mibBuilder.loadTexts: txOstNotificationMask.setDescription('See textual convention for details.')
txOstNotificationPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 9, 1, 1, 6), NotificationPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txOstNotificationPriority.setStatus('current')
if mibBuilder.loadTexts: txOstNotificationPriority.setDescription('See textual convention for details.')
txOstNotificationState = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 9, 1, 1, 7), NotificationState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txOstNotificationState.setStatus('current')
if mibBuilder.loadTexts: txOstNotificationState.setDescription('See textual convention for details.')
txOstStateTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 9, 2), )
if mibBuilder.loadTexts: txOstStateTable.setStatus('current')
if mibBuilder.loadTexts: txOstStateTable.setDescription('Output stage state information.')
txOstStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 9, 2, 1), ).setIndexNames((0, "RS-XX9-TX-MIB", "txOstNotificationTxIdx"), (0, "RS-XX9-TX-MIB", "txOstNotificationOstIdx"))
if mibBuilder.loadTexts: txOstStateEntry.setStatus('current')
if mibBuilder.loadTexts: txOstStateEntry.setDescription('An entry in the txOstStateTable.')
txOstStateRfOnHours = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 9, 2, 1, 3), Unsigned32()).setUnits('h').setMaxAccess("readonly")
if mibBuilder.loadTexts: txOstStateRfOnHours.setStatus('current')
if mibBuilder.loadTexts: txOstStateRfOnHours.setDescription('Shows how many hours this output stage generated a\n                RF signal with a level above the fault threshold.')
txOstCommandsTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 9, 3), )
if mibBuilder.loadTexts: txOstCommandsTable.setStatus('current')
if mibBuilder.loadTexts: txOstCommandsTable.setDescription('Output stage settings.')
txOstCommandsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 9, 3, 1), ).setIndexNames((0, "RS-XX9-TX-MIB", "txOstNotificationTxIdx"), (0, "RS-XX9-TX-MIB", "txOstNotificationOstIdx"))
if mibBuilder.loadTexts: txOstCommandsEntry.setStatus('current')
if mibBuilder.loadTexts: txOstCommandsEntry.setDescription('An entry in the txOstCommandsTable.')
txOstCmdPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 9, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1300))).setUnits('per thousand').setMaxAccess("readwrite")
if mibBuilder.loadTexts: txOstCmdPower.setStatus('current')
if mibBuilder.loadTexts: txOstCmdPower.setDescription('Output power of the output stage.\n                About 800 o/oo correlate to the nominal power of the output stage.\n                If the RF sensors are calibrated, the value adjusted here\n                should determine the txOstForwardPower.\n                \n                The range for band II amplifiers is 0 - 1000.')
txOstCmdDcControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 9, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4800, 11000))).setUnits('1/100 percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: txOstCmdDcControl.setStatus('current')
if mibBuilder.loadTexts: txOstCmdDcControl.setDescription('The range for TV amplifiers is    5000 - 11000.\n                The range for band II amplifiers is 5000 - 10000.\n                (DC Control for FM is only available in ConstantGain \n                mode or for FM-HD)')
txAmplifier = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 10))
txAmpNotificationTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 10, 1), )
if mibBuilder.loadTexts: txAmpNotificationTable.setStatus('current')
if mibBuilder.loadTexts: txAmpNotificationTable.setDescription('The context information/configuration for the\n                amplifier status notifications.')
txAmpNotificationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 10, 1, 1), ).setIndexNames((0, "RS-XX9-TX-MIB", "txAmpNotificationTxIdx"), (0, "RS-XX9-TX-MIB", "txAmpNotificationOstIdx"), (0, "RS-XX9-TX-MIB", "txAmpNotificationAmpIdx"), (0, "RS-XX9-TX-MIB", "txAmpNotificationIdx"))
if mibBuilder.loadTexts: txAmpNotificationEntry.setStatus('current')
if mibBuilder.loadTexts: txAmpNotificationEntry.setDescription('An entry in the txAmpNotificationTable.')
txAmpNotificationTxIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 10, 1, 1, 1), IndexTransmitter())
if mibBuilder.loadTexts: txAmpNotificationTxIdx.setStatus('current')
if mibBuilder.loadTexts: txAmpNotificationTxIdx.setDescription('The transmitter index.')
txAmpNotificationOstIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 10, 1, 1, 2), IndexAB())
if mibBuilder.loadTexts: txAmpNotificationOstIdx.setStatus('current')
if mibBuilder.loadTexts: txAmpNotificationOstIdx.setDescription('This index distinguishes the output stages.\n                Necessary if you have power reserve transmitters.')
txAmpNotificationAmpIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 10, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 72)))
if mibBuilder.loadTexts: txAmpNotificationAmpIdx.setStatus('current')
if mibBuilder.loadTexts: txAmpNotificationAmpIdx.setDescription('This index distinguishes amplifiers in an output stage.')
txAmpNotificationIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 10, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10000, 10017)))
if mibBuilder.loadTexts: txAmpNotificationIdx.setStatus('current')
if mibBuilder.loadTexts: txAmpNotificationIdx.setDescription('The notification number as below rsXx9TxNotifications.\n                This is a helper column and therefore not-accessible.')
txAmpNotificationName = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 10, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(10000, 10001, 10002, 10003, 10004, 10005, 10006, 10007, 10008, 10009, 10010, 10011, 10012, 10013, 10014, 10015, 10016, 10017))).clone(namedValues=NamedValues(("txAmpSummary", 10000), ("txAmpRfPowerFail", 10001), ("txAmpReflection", 10002), ("txAmpSupplyFail", 10003), ("txAmpRfInFail", 10004), ("txAmpMute", 10005), ("txAmpTemperatureFail", 10006), ("txAmpTransistorFail", 10007), ("txAmpRegulationFail", 10008), ("txAmpAcFail", 10009), ("txAmpDcFail", 10010), ("txAmpDriverFail", 10011), ("txAmpLink", 10012), ("txAmpBiasFail", 10013), ("txAmpInitFail", 10014), ("txAmpAbsorberFail", 10015), ("txAmpOn", 10016), ("txAmpBlocking", 10017)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: txAmpNotificationName.setStatus('current')
if mibBuilder.loadTexts: txAmpNotificationName.setDescription('The notification number as an enumeration.\n                The enumeration correlates with the notifications under rsXx9TxNotifications.')
txAmpNotificationMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 10, 1, 1, 6), NotificationMask()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txAmpNotificationMask.setStatus('current')
if mibBuilder.loadTexts: txAmpNotificationMask.setDescription('See textual convention for details.')
txAmpNotificationPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 10, 1, 1, 7), NotificationPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txAmpNotificationPriority.setStatus('current')
if mibBuilder.loadTexts: txAmpNotificationPriority.setDescription('See textual convention for details.')
txAmpNotificationState = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 10, 1, 1, 8), NotificationState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txAmpNotificationState.setStatus('current')
if mibBuilder.loadTexts: txAmpNotificationState.setDescription('See textual convention for details.')
txAmplifierStateTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 10, 2), )
if mibBuilder.loadTexts: txAmplifierStateTable.setStatus('current')
if mibBuilder.loadTexts: txAmplifierStateTable.setDescription('General amplifier state information.')
txAmplifierStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 10, 2, 1), ).setIndexNames((0, "RS-XX9-TX-MIB", "txAmpNotificationTxIdx"), (0, "RS-XX9-TX-MIB", "txAmpNotificationOstIdx"), (0, "RS-XX9-TX-MIB", "txAmpNotificationAmpIdx"))
if mibBuilder.loadTexts: txAmplifierStateEntry.setStatus('current')
if mibBuilder.loadTexts: txAmplifierStateEntry.setDescription('An entry in the txAmplifierStateTable.')
txAmpStI1A = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 10, 2, 1, 1), Unsigned32()).setUnits('1/100 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: txAmpStI1A.setStatus('current')
if mibBuilder.loadTexts: txAmpStI1A.setDescription('Current flowing through transistors V14 and V15 (PHU901)\n                and V500 (PMU901) in transistor block A.')
txAmpStI2A = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 10, 2, 1, 2), Unsigned32()).setUnits('1/100 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: txAmpStI2A.setStatus('current')
if mibBuilder.loadTexts: txAmpStI2A.setDescription('Current flowing through transistors V16 and V17 (PHU901)\n                and V1500 (PMU901) in transistor block A.')
txAmpStI3A = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 10, 2, 1, 3), Unsigned32()).setUnits('1/100 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: txAmpStI3A.setStatus('current')
if mibBuilder.loadTexts: txAmpStI3A.setDescription('Current flowing through transistors V18 and V19 (PHU901)\n                and V2500 (PMU901) in transistor block A.\n                \n                only for PHU901, PHU902 and PMU901')
txAmpStI1B = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 10, 2, 1, 4), Unsigned32()).setUnits('1/100 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: txAmpStI1B.setStatus('current')
if mibBuilder.loadTexts: txAmpStI1B.setDescription('Current flowing through transistors V24 and V25 (PHU901)\n                and V600 (PMU901) in transistor block B.')
txAmpStI2B = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 10, 2, 1, 5), Unsigned32()).setUnits('1/100 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: txAmpStI2B.setStatus('current')
if mibBuilder.loadTexts: txAmpStI2B.setDescription('Current flowing through transistors V26 and V27 (PHU901)\n                and V1600 (PMU901) in transistor block B.')
txAmpStI3B = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 10, 2, 1, 6), Unsigned32()).setUnits('1/100 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: txAmpStI3B.setStatus('current')
if mibBuilder.loadTexts: txAmpStI3B.setDescription('Current flowing through transistors V28 and V29 (PHU901)\n                and V2600 (PMU901) in transistor block B.\n                \n                only for PHU901, PHU902 and PMU901')
txAmpStIDrv = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 10, 2, 1, 7), Unsigned32()).setUnits('1/100 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: txAmpStIDrv.setStatus('current')
if mibBuilder.loadTexts: txAmpStIDrv.setDescription('Current flowing through the transistors of the driver module. ')
txAmpStIPre = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 10, 2, 1, 8), Unsigned32()).setUnits('1/100 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: txAmpStIPre.setStatus('current')
if mibBuilder.loadTexts: txAmpStIPre.setDescription('Current flowing through transistors of the preamplifier module.')
txAmpStPwrA = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 10, 2, 1, 9), Unsigned32()).setUnits('1/100 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: txAmpStPwrA.setStatus('current')
if mibBuilder.loadTexts: txAmpStPwrA.setDescription('Measured voltage of the RF detector\n                in transistor block A.\n                \n                not for PMU901')
txAmpStPwrB = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 10, 2, 1, 10), Unsigned32()).setUnits('1/100 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: txAmpStPwrB.setStatus('current')
if mibBuilder.loadTexts: txAmpStPwrB.setDescription('Measured voltage of the RF detector\n                in transistor block B.\n                \n                not for PMU901')
txAmpStPwrOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 10, 2, 1, 11), Unsigned32()).setUnits('1/100 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: txAmpStPwrOut.setStatus('current')
if mibBuilder.loadTexts: txAmpStPwrOut.setDescription('Measured voltage of the RF detector\n                at the output of the amplifier.')
txAmpStReflOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 10, 2, 1, 12), Unsigned32()).setUnits('1/100 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: txAmpStReflOut.setStatus('current')
if mibBuilder.loadTexts: txAmpStReflOut.setDescription('Measured voltage of the RF detector\n                for the reflected power.')
txAmpStVRefPwr = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 10, 2, 1, 13), Unsigned32()).setUnits('1/100 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: txAmpStVRefPwr.setStatus('current')
if mibBuilder.loadTexts: txAmpStVRefPwr.setDescription('Nominal value predefined by theTCE900 for internal \n                control of the output power. \n                - With DVB and ATV signals, a value of 4 V roughly \n                  corresponds to the nominal power of the amplifier. \n                - With ATV, a value of 4.18 V roughly corresponds to \n                  the nominal power of the amplifier. \n                - With ATSC, a value of 4.56 volts roughly corresponds \n                  to the nominal power of the amplifier.')
txAmpStVReg = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 10, 2, 1, 14), Unsigned32()).setUnits('1/10 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: txAmpStVReg.setStatus('obsolete')
if mibBuilder.loadTexts: txAmpStVReg.setDescription('Adjustment value for internal control of the output power.')
txAmpStVPlusMon = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 10, 2, 1, 15), Unsigned32()).setUnits('1/10 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: txAmpStVPlusMon.setStatus('current')
if mibBuilder.loadTexts: txAmpStVPlusMon.setDescription('Displays the voltage supplied to the transistor blocks by \n                the power supply unit. With PMU9, the displayed voltage \n                should be approx. 44 V. With PHU9, the displayed \n                voltage varies during adjustment between approx. 35 V \n                and approx. 50 V. If the displayed voltage is 0 V, either \n                the power supply unit is faulty or the amplifier has not \n                been switched on.\n                ')
txAmpStIDc = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 10, 2, 1, 16), Unsigned32()).setUnits('1/10 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: txAmpStIDc.setStatus('current')
if mibBuilder.loadTexts: txAmpStIDc.setDescription('Total current which is supplied by the internal power supply units. \n                If the displayed current is 0 A, the amplifier has not been switched \n                on by the TCE900 or one of the following faults \n                has occurred: \n                - RF In Fail \n                - Temperature Fail \n                - DC Fail\n                ')
txAmpStVPreMon = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 10, 2, 1, 17), Unsigned32()).setUnits('1/10 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: txAmpStVPreMon.setStatus('current')
if mibBuilder.loadTexts: txAmpStVPreMon.setDescription('Supply voltage of the preamplifier. In the ON state, it \n                is approx. 20 V and is generated on the preamplifier \n                board. The displayed voltage is 0 V if the amplifier \n                has been switched off by the TCE900. \n                If no voltage is indicated in the ON state, the automatic \n                circuit breakers of the energy distribution and the \n                self-engaging contacts on the rear panel of the amplifier \n                should be checked first of all. If no fault can be found in \n                the energy feed, the amplifier must be replaced.\n                \n                not for PMV901')
txAmpStVAuxIn = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 10, 2, 1, 18), Unsigned32()).setUnits('1/10 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: txAmpStVAuxIn.setStatus('current')
if mibBuilder.loadTexts: txAmpStVAuxIn.setDescription('Supply voltage of the amplifier control board. This auxiliary \n                voltage is generated directly by the power supply unit and \n                is fed to the amplifier control board via the preamplifier \n                board. This voltage should be present at the amplifier control \n                board even if the amplifier has been switched off by the \n                TCE900. If no voltage is displayed, the automatic circuit \n                breakers of the power distribution as well as the self-engaging \n                contacts on the rear panel of the amplifier should be checked \n                first of all. If no fault can be found in the energy feed, \n                the amplifier must be replaced.\n                ')
txAmpStV12Mon = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 10, 2, 1, 19), Unsigned32()).setUnits('1/10 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: txAmpStV12Mon.setStatus('current')
if mibBuilder.loadTexts: txAmpStV12Mon.setDescription('12 V auxiliary voltage which is generated on the preamplifier \n                board from the 20 V supply voltage (txAmpStVPreMon). If the \n                amplifier has not been switched on by the TCE900, the voltage \n                is approx. 8 V.\n                ')
txAmpStV5Acb = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 10, 2, 1, 20), Unsigned32()).setUnits('1/100 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: txAmpStV5Acb.setStatus('current')
if mibBuilder.loadTexts: txAmpStV5Acb.setDescription('5 V auxiliary voltage which is generated on the amplifier control \n                board from the auxiliary voltage (txAmpStVAuxIn) of the power \n                supply unit. If no voltage is indicated, the automatic circuit \n                breakers of the energy distribution and also the self-engaging \n                contacts on the rear panel of the amplifier should be checked \n                first of all. If no fault can be found in the energy feed, the amplifier \n                must be replaced.\n                ')
txAmpStV3V5 = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 10, 2, 1, 21), Unsigned32()).setUnits('1/100 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: txAmpStV3V5.setStatus('current')
if mibBuilder.loadTexts: txAmpStV3V5.setDescription('3.5 V auxiliary voltage which is generated on the amplifier \n                control board from the auxiliary voltage (txAmpStVAuxIn) of \n                the power supply unit. If no voltage is indicated, the automatic \n                circuit breakers of the energy distribution and also the \n                self-engaging contacts on the rear panel of the amplifier \n                should be checked first of all. If no fault can be found in the \n                energy feed, the amplifier must be replaced. \n                ')
txAmpStTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 10, 2, 1, 22), Integer32()).setUnits('1/10 degree celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: txAmpStTemperature.setStatus('current')
if mibBuilder.loadTexts: txAmpStTemperature.setDescription('Amplifier temperature;\n                usually a few degrees higher than the coolant temperature.\n                If the difference is greater than 15 deg C, either the stop valves \n                are closed or the coolant flow is too low.')
txAmpStRfMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 10, 2, 1, 23), Integer32()).setUnits('milli Bel').setMaxAccess("readonly")
if mibBuilder.loadTexts: txAmpStRfMonitor.setStatus('current')
if mibBuilder.loadTexts: txAmpStRfMonitor.setDescription("Coupling attenuation of the 'RF monitor' test point\n                at 650 MHz.")
txAmplifierPmxTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 10, 3), )
if mibBuilder.loadTexts: txAmplifierPmxTable.setStatus('current')
if mibBuilder.loadTexts: txAmplifierPmxTable.setDescription('Specific parameters for PMU and PMV amplifiers.')
txAmplifierPmxEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 10, 3, 1), ).setIndexNames((0, "RS-XX9-TX-MIB", "txAmpNotificationTxIdx"), (0, "RS-XX9-TX-MIB", "txAmpNotificationOstIdx"), (0, "RS-XX9-TX-MIB", "txAmpNotificationAmpIdx"))
if mibBuilder.loadTexts: txAmplifierPmxEntry.setStatus('current')
if mibBuilder.loadTexts: txAmplifierPmxEntry.setDescription('An entry in the txAmplifierPmxTable.')
txPmxFanFail = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 10, 3, 1, 1), NotificationState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txPmxFanFail.setStatus('current')
if mibBuilder.loadTexts: txPmxFanFail.setDescription('Indicates whether the fans used to dissipate heat from the\n                amplifier module are functioning.\n                \n                off(2)   - fans are functioning correctly\n                warning(4) ')
txPmxAirFilterFail = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 10, 3, 1, 2), NotificationState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txPmxAirFilterFail.setStatus('obsolete')
if mibBuilder.loadTexts: txPmxAirFilterFail.setDescription('off(2)\n                warning(4) - High difference between inlet and outlet air temperature.\n                             Air filter probably clogged.')
txPmxFrequencyFail = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 10, 3, 1, 3), NotificationState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txPmxFrequencyFail.setStatus('current')
if mibBuilder.loadTexts: txPmxFrequencyFail.setDescription("This fault occurs if the tunit (tuning unit) used in the amplifier \n                is not suitable for the RF of the exciter. The tunit is a plug-in \n                module and is on the top side of the amplifier. Please check \n                that the used tunit is suitable for the frequency which is set in \n                the Output menu of the exciter, and whether it has been \n                installed in the amplifier in the 'Doherty' or 'Broadband' \n                position corresponding to the setting in the 'Basic Config' \n                menu in the GUI.\n                \n                off(2)   - \n                fault(3) - The tuning unit in the amplifier is not suitable\n                           for the RF of the exciter.\n                \n                for PMU901 only")
txPmxFreqID = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 10, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txPmxFreqID.setStatus('obsolete')
if mibBuilder.loadTexts: txPmxFreqID.setDescription('ID that the tuning unit in amplifier must have\n                for the intended frequency.\n                Obsoleted - see txPmxFreqIDString for a replacement. ')
txPmxInletAirTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 10, 3, 1, 5), Integer32()).setUnits('1/10 degree celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: txPmxInletAirTemperature.setStatus('current')
if mibBuilder.loadTexts: txPmxInletAirTemperature.setDescription('Inlet air temperature of the amplifier module. \n                It should always be in the range +1 degree C to +45 \n                degrees celsius.')
txPmxOutletAirTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 10, 3, 1, 6), Integer32()).setUnits('1/10 degree celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: txPmxOutletAirTemperature.setStatus('current')
if mibBuilder.loadTexts: txPmxOutletAirTemperature.setDescription('Outlet air temperature of the amplifier module.')
txPmxvRefPowerMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 10, 3, 1, 7), Unsigned32()).setUnits('mV').setMaxAccess("readonly")
if mibBuilder.loadTexts: txPmxvRefPowerMax.setStatus('obsolete')
if mibBuilder.loadTexts: txPmxvRefPowerMax.setDescription('maximal admissible reference voltage')
txPmxFreqIDString = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 10, 3, 1, 8), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txPmxFreqIDString.setStatus('current')
if mibBuilder.loadTexts: txPmxFreqIDString.setDescription('ID of the frequency range in Doherty mode\n                ')
txPmxDohertyActive = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 10, 3, 1, 9), DohertyActive()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txPmxDohertyActive.setStatus('current')
if mibBuilder.loadTexts: txPmxDohertyActive.setDescription('Indicates whether the Doherty mode of the amplifier is active or not.\n                \n                for PMV901 only\n                ')
txAmplifierPhr901Table = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 10, 4), )
if mibBuilder.loadTexts: txAmplifierPhr901Table.setStatus('current')
if mibBuilder.loadTexts: txAmplifierPhr901Table.setDescription('specific PHR901 parameters.')
txAmplifierPhr901Entry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 10, 4, 1), ).setIndexNames((0, "RS-XX9-TX-MIB", "txAmpNotificationTxIdx"), (0, "RS-XX9-TX-MIB", "txAmpNotificationOstIdx"), (0, "RS-XX9-TX-MIB", "txAmpNotificationAmpIdx"))
if mibBuilder.loadTexts: txAmplifierPhr901Entry.setStatus('current')
if mibBuilder.loadTexts: txAmplifierPhr901Entry.setDescription('An entry in the txAmplifierPhr901Table.')
txPhr901PwrA = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 10, 4, 1, 1), Unsigned32()).setUnits('mW').setMaxAccess("readonly")
if mibBuilder.loadTexts: txPhr901PwrA.setStatus('obsolete')
if mibBuilder.loadTexts: txPhr901PwrA.setDescription('The measured power of the RF detector in transistor block A.')
txPhr901PwrB = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 10, 4, 1, 2), Unsigned32()).setUnits('mW').setMaxAccess("readonly")
if mibBuilder.loadTexts: txPhr901PwrB.setStatus('obsolete')
if mibBuilder.loadTexts: txPhr901PwrB.setDescription('The measured power of the RF detector in transistor block B.')
txPhr901PwrOutAv = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 10, 4, 1, 3), Unsigned32()).setUnits('mW').setMaxAccess("readonly")
if mibBuilder.loadTexts: txPhr901PwrOutAv.setStatus('obsolete')
if mibBuilder.loadTexts: txPhr901PwrOutAv.setDescription('The measured forward power at the output of the amplifier.')
txPhr901ReflOutAv = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 10, 4, 1, 4), Unsigned32()).setUnits('mW').setMaxAccess("readonly")
if mibBuilder.loadTexts: txPhr901ReflOutAv.setStatus('obsolete')
if mibBuilder.loadTexts: txPhr901ReflOutAv.setDescription('The measured reflected power at the output of  the amplifier.')
txPhr901PwrAbs = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 10, 4, 1, 5), Unsigned32()).setUnits('mW').setMaxAccess("readonly")
if mibBuilder.loadTexts: txPhr901PwrAbs.setStatus('obsolete')
if mibBuilder.loadTexts: txPhr901PwrAbs.setDescription('The measured power on the final absorber of the amplifier.')
txPhr901PwrIn = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 10, 4, 1, 6), Unsigned32()).setUnits('1/100 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: txPhr901PwrIn.setStatus('current')
if mibBuilder.loadTexts: txPhr901PwrIn.setDescription('The measured power at the input of the amplifier.')
txPhr901PwrDrv = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 10, 4, 1, 7), Unsigned32()).setUnits('1/100 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: txPhr901PwrDrv.setStatus('current')
if mibBuilder.loadTexts: txPhr901PwrDrv.setDescription('The measured power of the driver stage of the amplifier.')
txPhr901I12 = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 10, 4, 1, 8), Unsigned32()).setUnits('1/100 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: txPhr901I12.setStatus('current')
if mibBuilder.loadTexts: txPhr901I12.setDescription('The sum of measured currents of transistors T101 and T102.')
txPhr901I34 = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 10, 4, 1, 9), Unsigned32()).setUnits('1/100 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: txPhr901I34.setStatus('current')
if mibBuilder.loadTexts: txPhr901I34.setDescription('The sum of measured currents of transistors T103 and T104.')
txPhr901I56 = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 10, 4, 1, 10), Unsigned32()).setUnits('1/100 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: txPhr901I56.setStatus('current')
if mibBuilder.loadTexts: txPhr901I56.setDescription('The sum of measured currents of transistors T105 and T106.')
txPhr901I78 = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 10, 4, 1, 11), Unsigned32()).setUnits('1/100 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: txPhr901I78.setStatus('current')
if mibBuilder.loadTexts: txPhr901I78.setDescription('The sum of measured currents of transistors T107 and T108.')
txAmplifierPhxTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 10, 5), )
if mibBuilder.loadTexts: txAmplifierPhxTable.setStatus('current')
if mibBuilder.loadTexts: txAmplifierPhxTable.setDescription('Specific parameters for PHU and PHV amplifiers.')
txAmplifierPhxEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 10, 5, 1), ).setIndexNames((0, "RS-XX9-TX-MIB", "txAmpNotificationTxIdx"), (0, "RS-XX9-TX-MIB", "txAmpNotificationOstIdx"), (0, "RS-XX9-TX-MIB", "txAmpNotificationAmpIdx"))
if mibBuilder.loadTexts: txAmplifierPhxEntry.setStatus('current')
if mibBuilder.loadTexts: txAmplifierPhxEntry.setDescription('An entry in the txAmplifierPhxTable.')
txPhxFreqID = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 10, 5, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txPhxFreqID.setStatus('obsolete')
if mibBuilder.loadTexts: txPhxFreqID.setDescription('ID that the tuning unit in amplifier must have\n                for the intended frequency.\n                Obsoleted - see txPhxFreqIDString for a replacement.')
txPhxFreqIDString = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 10, 5, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txPhxFreqIDString.setStatus('current')
if mibBuilder.loadTexts: txPhxFreqIDString.setDescription('ID of the frequency range in Doherty mode\n                \n                for PHU902 and PHV902 only')
txPhxDohertyActive = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 10, 5, 1, 3), DohertyActive()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txPhxDohertyActive.setStatus('current')
if mibBuilder.loadTexts: txPhxDohertyActive.setDescription('Indicates whether the Doherty mode of the amplifier is active or not.\n                \n                for PHU902 and PHV902 only')
txAmplifierTlxTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 10, 6), )
if mibBuilder.loadTexts: txAmplifierTlxTable.setStatus('current')
if mibBuilder.loadTexts: txAmplifierTlxTable.setDescription('Specific parameters for TLx amplifiers.')
txAmplifierTlxEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 10, 6, 1), ).setIndexNames((0, "RS-XX9-TX-MIB", "txAmpNotificationTxIdx"), (0, "RS-XX9-TX-MIB", "txAmpNotificationOstIdx"), (0, "RS-XX9-TX-MIB", "txAmpNotificationAmpIdx"))
if mibBuilder.loadTexts: txAmplifierTlxEntry.setStatus('current')
if mibBuilder.loadTexts: txAmplifierTlxEntry.setDescription('An entry in the txAmplifierTlxTable,')
txAmpTlxFanFail = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 10, 6, 1, 1), NotificationState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txAmpTlxFanFail.setStatus('current')
if mibBuilder.loadTexts: txAmpTlxFanFail.setDescription('Description.')
txAmpTlxV12Mon = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 10, 6, 1, 2), Unsigned32()).setUnits('1/100V').setMaxAccess("readonly")
if mibBuilder.loadTexts: txAmpTlxV12Mon.setStatus('current')
if mibBuilder.loadTexts: txAmpTlxV12Mon.setDescription('Description.')
txAmpTlxSupplyFail = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 10, 6, 1, 3), NotificationState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txAmpTlxSupplyFail.setStatus('current')
if mibBuilder.loadTexts: txAmpTlxSupplyFail.setDescription('Description.')
txSwitchlessCombiner = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 11))
txSwiCoNotificationTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 11, 1), )
if mibBuilder.loadTexts: txSwiCoNotificationTable.setStatus('current')
if mibBuilder.loadTexts: txSwiCoNotificationTable.setDescription('The context information/configuration for the\n                Switchless Combiner status notifications.\n                Only available if Switchless Combiner is configured. ')
txSwiCoNotificationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 11, 1, 1), ).setIndexNames((0, "RS-XX9-TX-MIB", "txSwiCoNotificationTxIdx"), (0, "RS-XX9-TX-MIB", "txSwiCoNotificationSwiCoIdx"), (0, "RS-XX9-TX-MIB", "txSwiCoNotificationIdx"))
if mibBuilder.loadTexts: txSwiCoNotificationEntry.setStatus('current')
if mibBuilder.loadTexts: txSwiCoNotificationEntry.setDescription('An entry in the txSwiCoNotificationTable.')
txSwiCoNotificationTxIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 11, 1, 1, 1), IndexTransmitter())
if mibBuilder.loadTexts: txSwiCoNotificationTxIdx.setStatus('current')
if mibBuilder.loadTexts: txSwiCoNotificationTxIdx.setDescription('The transmitter index.')
txSwiCoNotificationSwiCoIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 11, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: txSwiCoNotificationSwiCoIdx.setStatus('current')
if mibBuilder.loadTexts: txSwiCoNotificationSwiCoIdx.setDescription('This index distinguishes Switchless Combiners.')
txSwiCoNotificationIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 11, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(11000, 11008)))
if mibBuilder.loadTexts: txSwiCoNotificationIdx.setStatus('current')
if mibBuilder.loadTexts: txSwiCoNotificationIdx.setDescription('The notification number as below rsXx9TxNotifications.\n                This is a helper column and therefore not-accessible.')
txSwiCoNotificationName = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 11, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(11000, 11001, 11002, 11003, 11004, 11005, 11006, 11007))).clone(namedValues=NamedValues(("txSwiCoSummary", 11000), ("txSwiCoHwLink", 11001), ("txSwiCoHwWarn", 11002), ("txSwiCoHwFault", 11003), ("txSwiCoHwLocal", 11004), ("txSwiCoRcbFail", 11005), ("txSwiCoRfProbeFail", 11006), ("txSwiCoRegulationSummary", 11007)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: txSwiCoNotificationName.setStatus('current')
if mibBuilder.loadTexts: txSwiCoNotificationName.setDescription('The notification number as an enumeration.\n                The enumeration correlates with the notifications under rsXx9TxNotifications.')
txSwiCoNotificationMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 11, 1, 1, 5), NotificationMask()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txSwiCoNotificationMask.setStatus('current')
if mibBuilder.loadTexts: txSwiCoNotificationMask.setDescription('See textual convention for details.')
txSwiCoNotificationPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 11, 1, 1, 6), NotificationPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txSwiCoNotificationPriority.setStatus('current')
if mibBuilder.loadTexts: txSwiCoNotificationPriority.setDescription('See textual convention for details.')
txSwiCoNotificationState = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 11, 1, 1, 7), NotificationState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txSwiCoNotificationState.setStatus('current')
if mibBuilder.loadTexts: txSwiCoNotificationState.setDescription('See textual convention for details.')
txSwiCoStateTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 11, 2), )
if mibBuilder.loadTexts: txSwiCoStateTable.setStatus('current')
if mibBuilder.loadTexts: txSwiCoStateTable.setDescription('General Switchless Combiner state information.\n                Only available is Switchless Combiner is configured. ')
txSwiCoStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 11, 2, 1), ).setIndexNames((0, "RS-XX9-TX-MIB", "txSwiCoNotificationTxIdx"), (0, "RS-XX9-TX-MIB", "txSwiCoNotificationSwiCoIdx"))
if mibBuilder.loadTexts: txSwiCoStateEntry.setStatus('current')
if mibBuilder.loadTexts: txSwiCoStateEntry.setDescription('An entry in the txSwiCoStateTable.')
txSwiCoStRegulationState = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 11, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("stablePosition", 1), ("increasingPhaseAngle", 2), ("decreasingPhaseAngle", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: txSwiCoStRegulationState.setStatus('current')
if mibBuilder.loadTexts: txSwiCoStRegulationState.setDescription('Indicates whether the control is currently working. \n                Hold: The phase angle is constant. \n                Phase decreasing/Phase increasing: The phase angle is currently being changed.\n                ')
txSwiCoStCalibrationState = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 11, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("calibrated", 1), ("notCalibrated", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: txSwiCoStCalibrationState.setStatus('current')
if mibBuilder.loadTexts: txSwiCoStCalibrationState.setDescription('Indicates whether the switchless combiner has been calibrated for the \n                current transmitter frequency. \n                OK: The switchless combiner is calibrated. \n                Warning: The switchless combiner has not yet been calibrated.\n                ')
txSwiCoStPosGraded = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 11, 2, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: txSwiCoStPosGraded.setStatus('current')
if mibBuilder.loadTexts: txSwiCoStPosGraded.setDescription('Shows the position of Switchless Combiner in these steps:\n                0: < 0deg\n                1: 0deg\n                2: between 0deg and 90 deg (2 and 4 racks) or 110deg (3 racks)\n                3: 90deg (2 and 4 racks) or 110deg (3 racks)\n                4: between 90deg (2 and 4 racks) or 110deg (3 racks) and 180deg\n                5: > 180deg')
txSwiCoStPosDegree = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 11, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: txSwiCoStPosDegree.setStatus('current')
if mibBuilder.loadTexts: txSwiCoStPosDegree.setDescription('Indicates the current effective phase angle between the two inputs. \n                If the coupling is symmetric, the phase angle is 90 degrees. If the \n                switchless combiner has not yet been calibrated for the current \n                transmitter frequency, the display shows a %.\n                ')
txSwiCoStPosPermil = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 11, 2, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: txSwiCoStPosPermil.setStatus('current')
if mibBuilder.loadTexts: txSwiCoStPosPermil.setDescription('Indicates the current effective phase angle between the two inputs. If the coupling \n                is symmetric, the phase angle is 90 degrees. If the switchless combiner has not \n                yet been calibrated for the current transmitter frequency, the display shows a %.\n                ')
txSwiCoCommandsTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 11, 3), )
if mibBuilder.loadTexts: txSwiCoCommandsTable.setStatus('current')
if mibBuilder.loadTexts: txSwiCoCommandsTable.setDescription('Switchless Cominer settings. \n                Only available is Switchless Combiner is configured. ')
txSwiCoCommandsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 11, 3, 1), ).setIndexNames((0, "RS-XX9-TX-MIB", "txSwiCoNotificationTxIdx"), (0, "RS-XX9-TX-MIB", "txSwiCoNotificationSwiCoIdx"))
if mibBuilder.loadTexts: txSwiCoCommandsEntry.setStatus('current')
if mibBuilder.loadTexts: txSwiCoCommandsEntry.setDescription('An entry in the txSwiCoCommandsTable.')
txSwiCoCmdAutomatic = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 11, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("manual", 1), ("automatic", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txSwiCoCmdAutomatic.setStatus('current')
if mibBuilder.loadTexts: txSwiCoCmdAutomatic.setDescription('Switches the automatic power control of the rack combiner on and off.\n                ')
txSwiCoCmdManualPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 11, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("undefinedPosition", 1), ("position1", 2), ("position2", 3), ("position1and2", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txSwiCoCmdManualPosition.setStatus('current')
if mibBuilder.loadTexts: txSwiCoCmdManualPosition.setDescription('Indicates which input was switched to the antenna when automatic ^\n                is switched off. The setting can be changed here.\n                ')
txSwiCoCmdActivationThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 11, 3, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setUnits('0.01-dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: txSwiCoCmdActivationThreshold.setStatus('current')
if mibBuilder.loadTexts: txSwiCoCmdActivationThreshold.setDescription('If the output power is below the nominal power minus this activation threshold value, the Switchless Combiner Automatic will react.')
txPresets = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 12))
txPresetCommandsTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 12, 2), )
if mibBuilder.loadTexts: txPresetCommandsTable.setStatus('current')
if mibBuilder.loadTexts: txPresetCommandsTable.setDescription('Description.')
txPresetCommandsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 12, 2, 1), ).setIndexNames((0, "RS-XX9-TX-MIB", "txPresetCmdTxIdx"))
if mibBuilder.loadTexts: txPresetCommandsEntry.setStatus('current')
if mibBuilder.loadTexts: txPresetCommandsEntry.setDescription('Description.')
txPresetCmdTxIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 12, 2, 1, 1), IndexTransmitter())
if mibBuilder.loadTexts: txPresetCmdTxIdx.setStatus('current')
if mibBuilder.loadTexts: txPresetCmdTxIdx.setDescription('Description.')
txPresetCmdLoadPreset1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 12, 2, 1, 2), Trigger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txPresetCmdLoadPreset1.setStatus('current')
if mibBuilder.loadTexts: txPresetCmdLoadPreset1.setDescription("Activates one of up to four previously saved sets of program and feed \n                setting values. If a name is assigned to a preset, this name appears \n                on the button. 'Load Preset' is only available for used memory locations.\n                ")
txPresetCmdLoadPreset2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 12, 2, 1, 3), Trigger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txPresetCmdLoadPreset2.setStatus('current')
if mibBuilder.loadTexts: txPresetCmdLoadPreset2.setDescription("Activates one of up to four previously saved sets of program and feed \n                setting values. If a name is assigned to a preset, this name appears \n                on the button. 'Load Preset' is only available for used memory locations.\n                ")
txPresetCmdLoadPreset3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 12, 2, 1, 4), Trigger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txPresetCmdLoadPreset3.setStatus('current')
if mibBuilder.loadTexts: txPresetCmdLoadPreset3.setDescription("Activates one of up to four previously saved sets of program and feed \n                setting values. If a name is assigned to a preset, this name appears \n                on the button. 'Load Preset' is only available for used memory locations.\n                ")
txPresetCmdLoadPreset4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 12, 2, 1, 5), Trigger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txPresetCmdLoadPreset4.setStatus('current')
if mibBuilder.loadTexts: txPresetCmdLoadPreset4.setDescription("Activates one of up to four previously saved sets of program and feed \n                setting values. If a name is assigned to a preset, this name appears \n                on the button. 'Load Preset' is only available for used memory locations.\n                ")
txPresetCmdSavePreset1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 12, 2, 1, 6), Trigger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txPresetCmdSavePreset1.setStatus('current')
if mibBuilder.loadTexts: txPresetCmdSavePreset1.setDescription("Saves all currently active program and feed settings to one of four memory \n                locations. Previously saved settings are overwritten. If a name is assigned \n                to a preset, this name appears on the button. 'Save Preset' is only available \n                if all components of the transmitter are operating correctly.\n                ")
txPresetCmdSavePreset2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 12, 2, 1, 7), Trigger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txPresetCmdSavePreset2.setStatus('current')
if mibBuilder.loadTexts: txPresetCmdSavePreset2.setDescription("Saves all currently active program and feed settings to one of four memory \n                locations. Previously saved settings are overwritten. If a name is assigned \n                to a preset, this name appears on the button. 'Save Preset' is only available \n                if all components of the transmitter are operating correctly.\n                ")
txPresetCmdSavePreset3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 12, 2, 1, 8), Trigger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txPresetCmdSavePreset3.setStatus('current')
if mibBuilder.loadTexts: txPresetCmdSavePreset3.setDescription("Saves all currently active program and feed settings to one of four memory \n                locations. Previously saved settings are overwritten. If a name is assigned \n                to a preset, this name appears on the button. 'Save Preset' is only available \n                if all components of the transmitter are operating correctly.\n                ")
txPresetCmdSavePreset4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 12, 2, 1, 9), Trigger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txPresetCmdSavePreset4.setStatus('current')
if mibBuilder.loadTexts: txPresetCmdSavePreset4.setDescription("Saves all currently active program and feed settings to one of four memory \n                locations. Previously saved settings are overwritten. If a name is assigned \n                to a preset, this name appears on the button. 'Save Preset' is only available \n                if all components of the transmitter are operating correctly.\n                ")
txPresetStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 12, 3), )
if mibBuilder.loadTexts: txPresetStatusTable.setStatus('current')
if mibBuilder.loadTexts: txPresetStatusTable.setDescription('Description.')
txPresetStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 12, 3, 1), ).setIndexNames((0, "RS-XX9-TX-MIB", "txPresetCmdTxIdx"))
if mibBuilder.loadTexts: txPresetStatusEntry.setStatus('current')
if mibBuilder.loadTexts: txPresetStatusEntry.setDescription('Description.')
txPresetStActivePreset = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 12, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("notActive", 0), ("preset1", 1), ("preset2", 2), ("preset3", 3), ("preset4", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: txPresetStActivePreset.setStatus('current')
if mibBuilder.loadTexts: txPresetStActivePreset.setDescription("Indicates which settings are currently active. If a preset has not yet been \n                loaded, 'Not Active' is displayed.")
txPresetStProgramSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 12, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("undefined", 1), ("notSaved", 2), ("saved", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: txPresetStProgramSettings.setStatus('current')
if mibBuilder.loadTexts: txPresetStProgramSettings.setDescription("Shows a warning if, after a preset is loaded, the currently active settings have \n                been changed but not yet saved again in a preset. In this case, data will be \n                lost if the preset is switched over to a different preset. If all memory locations \n                are empty, 'Presets not Used' appears. ")
txRfSensors = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 13))
txRfSensorsNotificationTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 13, 1), )
if mibBuilder.loadTexts: txRfSensorsNotificationTable.setStatus('current')
if mibBuilder.loadTexts: txRfSensorsNotificationTable.setDescription('The context information/configuration for the\n                Switchless Combiner status notifications.')
txRfSensorsNotificationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 13, 1, 1), ).setIndexNames((0, "RS-XX9-TX-MIB", "txRfSensorsNotificationTxIdx"), (0, "RS-XX9-TX-MIB", "txRfSensorsNotificationSensorIdx"), (0, "RS-XX9-TX-MIB", "txRfSensorsNotificationIdx"))
if mibBuilder.loadTexts: txRfSensorsNotificationEntry.setStatus('current')
if mibBuilder.loadTexts: txRfSensorsNotificationEntry.setDescription('An entry in the txRfSensorsNotificationTable.')
txRfSensorsNotificationTxIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 13, 1, 1, 1), IndexTransmitter())
if mibBuilder.loadTexts: txRfSensorsNotificationTxIdx.setStatus('current')
if mibBuilder.loadTexts: txRfSensorsNotificationTxIdx.setDescription('The transmitter index.')
txRfSensorsNotificationSensorIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 13, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 6)))
if mibBuilder.loadTexts: txRfSensorsNotificationSensorIdx.setStatus('current')
if mibBuilder.loadTexts: txRfSensorsNotificationSensorIdx.setDescription("This index distinguishes Rf sensors. \n                \n                Rf sensor 1 of a Tx is the Tx's antenna sensor. \n                Rf sensor 2 of a Tx is the Tx's lower antenna sensor (in half antenna configuration).\n                Rf sensor 3 of a Tx is the Tx's upper antenna sensor (in half antenna configuration).\n                \n                ")
txRfSensorsNotificationIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 13, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(12000, 12001)))
if mibBuilder.loadTexts: txRfSensorsNotificationIdx.setStatus('current')
if mibBuilder.loadTexts: txRfSensorsNotificationIdx.setDescription('The notification number as below rsXx9TxNotifications.\n                This is a helper column and therefore not-accessible.')
txRfSensorsNotificationName = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 13, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(12000, 12001))).clone(namedValues=NamedValues(("txRfSensorLinkStatus", 12000), ("txRfSensorCalibrated", 12001)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: txRfSensorsNotificationName.setStatus('current')
if mibBuilder.loadTexts: txRfSensorsNotificationName.setDescription('The notification number as an enumeration.\n                The enumeration correlates with the notifications under rsXx9TxNotifications.')
txRfSensorsNotificationMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 13, 1, 1, 5), NotificationMask()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txRfSensorsNotificationMask.setStatus('current')
if mibBuilder.loadTexts: txRfSensorsNotificationMask.setDescription('See textual convention for details.')
txRfSensorsNotificationPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 13, 1, 1, 6), NotificationPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txRfSensorsNotificationPriority.setStatus('current')
if mibBuilder.loadTexts: txRfSensorsNotificationPriority.setDescription('See textual convention for details.')
txRfSensorsNotificationState = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 13, 1, 1, 7), NotificationState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txRfSensorsNotificationState.setStatus('current')
if mibBuilder.loadTexts: txRfSensorsNotificationState.setDescription('See textual convention for details.')
txRfSensorsTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 13, 2), )
if mibBuilder.loadTexts: txRfSensorsTable.setStatus('current')
if mibBuilder.loadTexts: txRfSensorsTable.setDescription('Transmitter Antenna Rf threshold configuration and status.')
txRfSensorsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 13, 2, 1), ).setIndexNames((0, "RS-XX9-TX-MIB", "txRfSensorsNotificationTxIdx"), (0, "RS-XX9-TX-MIB", "txRfSensorsNotificationSensorIdx"))
if mibBuilder.loadTexts: txRfSensorsEntry.setStatus('current')
if mibBuilder.loadTexts: txRfSensorsEntry.setDescription('An entry in the txRfSensorsTable.')
txRfLimitForwardFail = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 13, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-4000, 0))).setUnits('0.01 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: txRfLimitForwardFail.setStatus('current')
if mibBuilder.loadTexts: txRfLimitForwardFail.setDescription('Description.')
txRfLimitForwardWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 13, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-4000, 0))).setUnits('0.01 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: txRfLimitForwardWarn.setStatus('current')
if mibBuilder.loadTexts: txRfLimitForwardWarn.setDescription('Description.')
txRfLimitReflectedFail = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 13, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1700, -600))).setUnits('0.01 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: txRfLimitReflectedFail.setStatus('current')
if mibBuilder.loadTexts: txRfLimitReflectedFail.setDescription('Description.')
txRfLimitReflectedWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 13, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2800, -1700))).setUnits('0.01 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: txRfLimitReflectedWarn.setStatus('current')
if mibBuilder.loadTexts: txRfLimitReflectedWarn.setDescription('Description.')
txRfLimitForwardPercentFailUpper = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 13, 2, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setUnits('0.1 %').setMaxAccess("readwrite")
if mibBuilder.loadTexts: txRfLimitForwardPercentFailUpper.setStatus('current')
if mibBuilder.loadTexts: txRfLimitForwardPercentFailUpper.setDescription('Description.\n                \n                only valid for antennaRfProbe')
txRfLimitForwardPercentFailLower = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 13, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-990, 1))).setUnits('0.1 %').setMaxAccess("readwrite")
if mibBuilder.loadTexts: txRfLimitForwardPercentFailLower.setStatus('current')
if mibBuilder.loadTexts: txRfLimitForwardPercentFailLower.setDescription('Description.\n                \n                only valid for antennaRfProbe')
txRfLimitForwardPercentWarnUpper = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 13, 2, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('0.1 %').setMaxAccess("readwrite")
if mibBuilder.loadTexts: txRfLimitForwardPercentWarnUpper.setStatus('current')
if mibBuilder.loadTexts: txRfLimitForwardPercentWarnUpper.setDescription('Description.\n                \n                only valid for antennaRfProbe')
txRfLimitForwardPercentWarnLower = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 13, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-990, 1))).setUnits('0.1 %').setMaxAccess("readwrite")
if mibBuilder.loadTexts: txRfLimitForwardPercentWarnLower.setStatus('current')
if mibBuilder.loadTexts: txRfLimitForwardPercentWarnLower.setDescription('Description.\n                \n                only valid for antennaRfProbe')
txRfLimitReflectedVswrFail = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 13, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1330, 3000))).setUnits('0.001 VSWR').setMaxAccess("readwrite")
if mibBuilder.loadTexts: txRfLimitReflectedVswrFail.setStatus('current')
if mibBuilder.loadTexts: txRfLimitReflectedVswrFail.setDescription('Description.\n                \n                only valid for antennaRfProbe')
txRfLimitReflectedVswrWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 13, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1080, 1330))).setUnits('0.001 VSWR').setMaxAccess("readwrite")
if mibBuilder.loadTexts: txRfLimitReflectedVswrWarn.setStatus('current')
if mibBuilder.loadTexts: txRfLimitReflectedVswrWarn.setDescription('Description.\n                \n                only valid for antennaRfProbe')
txRfCmdForwardFailTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 13, 2, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: txRfCmdForwardFailTimeout.setStatus('current')
if mibBuilder.loadTexts: txRfCmdForwardFailTimeout.setDescription('Description.')
txRfStForwardPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 13, 2, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2000))).setUnits('0.1 %').setMaxAccess("readonly")
if mibBuilder.loadTexts: txRfStForwardPercent.setStatus('current')
if mibBuilder.loadTexts: txRfStForwardPercent.setDescription('Description.\n                \n                only valid for antennaRfProbe')
txRfStReflectedVswr = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 13, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(100, 1000), ))).setUnits('0.001 VSWR').setMaxAccess("readonly")
if mibBuilder.loadTexts: txRfStReflectedVswr.setStatus('current')
if mibBuilder.loadTexts: txRfStReflectedVswr.setDescription('Description.\n                \n                A value of 0 means: invalid\n                only valid for antennaRfProbe')
txRfStForward = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 13, 2, 1, 14), Unsigned32()).setUnits('milli W').setMaxAccess("readonly")
if mibBuilder.loadTexts: txRfStForward.setStatus('current')
if mibBuilder.loadTexts: txRfStForward.setDescription('Description.')
txRfStReflected = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 13, 2, 1, 15), Unsigned32()).setUnits('milli W').setMaxAccess("readonly")
if mibBuilder.loadTexts: txRfStReflected.setStatus('current')
if mibBuilder.loadTexts: txRfStReflected.setDescription('Description.')
txRfIdentify = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 13, 2, 1, 16), Trigger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txRfIdentify.setStatus('current')
if mibBuilder.loadTexts: txRfIdentify.setDescription('Identifies the power sensor to which a calibrated power meter has to be connected.\n                When this button is pushed, a green LED on the power sensor will start flashing.\n                Looking into the rack from the reverse, the flashing LED will mark the position of \n                the power sensor. The LED automatically stops blinking after thirty seconds.\n                ')
txRfCalibrate = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 13, 2, 1, 17), Trigger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txRfCalibrate.setStatus('current')
if mibBuilder.loadTexts: txRfCalibrate.setDescription('Description.')
txRfUncalibrate = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 13, 2, 1, 18), Trigger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txRfUncalibrate.setStatus('current')
if mibBuilder.loadTexts: txRfUncalibrate.setDescription('Description.')
txRfLimitForwardAddUpperFail = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 13, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1000, 1000))).setUnits('0.01 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: txRfLimitForwardAddUpperFail.setStatus('current')
if mibBuilder.loadTexts: txRfLimitForwardAddUpperFail.setDescription('Description.\n                \n                only valid for additional probes.')
txRfLimitForwardAddUpperWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 1, 13, 2, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2000, 1000))).setUnits('0.01 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: txRfLimitForwardAddUpperWarn.setStatus('current')
if mibBuilder.loadTexts: txRfLimitForwardAddUpperWarn.setDescription('Description.\n                \n                only valid for additional probes.')
rsXx9TxConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 2))
rsXx9TxCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 2, 1))
txBasicCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 2, 1, 1)).setObjects(("RS-XX9-TX-MIB", "txObjsExciter"), ("RS-XX9-TX-MIB", "txObjsSFN"), ("RS-XX9-TX-MIB", "txObjsInputInterfaces"), ("RS-XX9-TX-MIB", "txObjsInputAutomatic"), ("RS-XX9-TX-MIB", "txNotifySFN"), ("RS-XX9-TX-MIB", "txNotifyInputInterfaces"), ("RS-XX9-TX-MIB", "txObjsPrecorrection"), ("RS-XX9-TX-MIB", "txNotifyInputAutomatic"), ("RS-XX9-TX-MIB", "txObjsOutputStage"), ("RS-XX9-TX-MIB", "txNotifyAmplifier"), ("RS-XX9-TX-MIB", "txObjsAmplifier"), ("RS-XX9-TX-MIB", "txNotifyOutputStage"), ("RS-XX9-TX-MIB", "txNotifyPrecorrection"), ("RS-XX9-TX-MIB", "txNotifyFrequencyRegulation"), ("RS-XX9-TX-MIB", "txObjsFrequencyRegulation"), ("RS-XX9-TX-MIB", "txObjsNonBand2"), ("RS-XX9-TX-MIB", "txObjsNonFM"), ("RS-XX9-TX-MIB", "txNotifyExciter"), ("RS-XX9-TX-MIB", "txObjsTransmitter"), ("RS-XX9-TX-MIB", "txNotifyTransmitter"), ("RS-XX9-TX-MIB", "txObjsExciterAutomatic"), ("RS-XX9-TX-MIB", "txNotifyExciterAutomatic"), ("RS-XX9-TX-MIB", "txObjsDualDrive"), ("RS-XX9-TX-MIB", "txObjsSFN1"), ("RS-XX9-TX-MIB", "txObjsPMx"), ("RS-XX9-TX-MIB", "txObjsSFN2"), ("RS-XX9-TX-MIB", "txObjsInputTsFeed"), ("RS-XX9-TX-MIB", "txNotifyInputTsFeed"), ("RS-XX9-TX-MIB", "txObjsPHx902"), ("RS-XX9-TX-MIB", "txObjsPMU901"), ("RS-XX9-TX-MIB", "txObjsPMV901"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    txBasicCompliance = txBasicCompliance.setStatus('current')
if mibBuilder.loadTexts: txBasicCompliance.setDescription('The compliance statement for XX9000 TV transmitters.')
txBand2Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 2, 1, 2)).setObjects(("RS-XX9-TX-MIB", "txObjsExciter"), ("RS-XX9-TX-MIB", "txObjsInputAutomatic"), ("RS-XX9-TX-MIB", "txNotifyInputAutomatic"), ("RS-XX9-TX-MIB", "txObjsOutputStage"), ("RS-XX9-TX-MIB", "txNotifyAmplifier"), ("RS-XX9-TX-MIB", "txObjsAmplifier"), ("RS-XX9-TX-MIB", "txNotifyOutputStage"), ("RS-XX9-TX-MIB", "txObjsPHR901"), ("RS-XX9-TX-MIB", "txNotifyFrequencyRegulation"), ("RS-XX9-TX-MIB", "txObjsFrequencyRegulation"), ("RS-XX9-TX-MIB", "txNotifyExciter"), ("RS-XX9-TX-MIB", "txObjsTransmitter"), ("RS-XX9-TX-MIB", "txNotifyTransmitter"), ("RS-XX9-TX-MIB", "txObjsExciterAutomatic"), ("RS-XX9-TX-MIB", "txNotifyExciterAutomatic"), ("RS-XX9-TX-MIB", "txObjsDualDrive"), ("RS-XX9-TX-MIB", "txObjsNonFM"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    txBand2Compliance = txBand2Compliance.setStatus('current')
if mibBuilder.loadTexts: txBand2Compliance.setDescription('The compliance statement for XX9000 band II transmitters.')
rsXx9TxGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 2, 2))
txObjsTransmitter = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 2, 2, 1)).setObjects(("RS-XX9-TX-MIB", "txTransmitterNotificationName"), ("RS-XX9-TX-MIB", "txTransmitterNotificationMask"), ("RS-XX9-TX-MIB", "txTransmitterNotificationPriority"), ("RS-XX9-TX-MIB", "txTransmitterNotificationState"), ("RS-XX9-TX-MIB", "txTransCmdReset"), ("RS-XX9-TX-MIB", "txTransCmdOperationMode"), ("RS-XX9-TX-MIB", "txTransCmdNominalPower"), ("RS-XX9-TX-MIB", "txTransStForwardPower"), ("RS-XX9-TX-MIB", "txTransStReflectedPower"), ("RS-XX9-TX-MIB", "txTransStModulationMode"), ("RS-XX9-TX-MIB", "txTransStPrimaryModMode"), ("RS-XX9-TX-MIB", "txTransCmdPrgOnAfterSumFault"), ("RS-XX9-TX-MIB", "txTransCmdReflectionCheck"), ("RS-XX9-TX-MIB", "txTransCmdWarnOnDohertyMismatch"), ("RS-XX9-TX-MIB", "txTransStSecondaryModMode"), ("RS-XX9-TX-MIB", "txTransCmdChangeModulation"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    txObjsTransmitter = txObjsTransmitter.setStatus('current')
if mibBuilder.loadTexts: txObjsTransmitter.setDescription('General transmitter objects group.')
txObjsExciter = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 2, 2, 2)).setObjects(("RS-XX9-TX-MIB", "txExcCmdModulationMode"), ("RS-XX9-TX-MIB", "txExcCmdOutputAttenuation"), ("RS-XX9-TX-MIB", "txExcStOperationOn"), ("RS-XX9-TX-MIB", "txExcCmdLoopControl"), ("RS-XX9-TX-MIB", "txExcCmdOperationMode"), ("RS-XX9-TX-MIB", "txExcCmdFrequency"), ("RS-XX9-TX-MIB", "txExciterNotificationName"), ("RS-XX9-TX-MIB", "txExciterNotificationMask"), ("RS-XX9-TX-MIB", "txExciterNotificationPriority"), ("RS-XX9-TX-MIB", "txExciterNotificationState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    txObjsExciter = txObjsExciter.setStatus('current')
if mibBuilder.loadTexts: txObjsExciter.setDescription('Exciter objects group.')
txObjsInputInterfaces = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 2, 2, 3)).setObjects(("RS-XX9-TX-MIB", "txIpFeedStreamProtocol"), ("RS-XX9-TX-MIB", "txIpFeedStreamPort"), ("RS-XX9-TX-MIB", "txIpFeedStreamAddress"), ("RS-XX9-TX-MIB", "txIpFeedStreamAddressType"), ("RS-XX9-TX-MIB", "txIpFeedStreamingMode"), ("RS-XX9-TX-MIB", "txIpFeedConnector"), ("RS-XX9-TX-MIB", "txInpGsMultiplexName"), ("RS-XX9-TX-MIB", "txInpGsInputSource"), ("RS-XX9-TX-MIB", "txInpMonitorOut"), ("RS-XX9-TX-MIB", "txIpFeedPacketsOutOfRange"), ("RS-XX9-TX-MIB", "txIpFeedPacketsReordered"), ("RS-XX9-TX-MIB", "txIpFeedPacketsDuplicate"), ("RS-XX9-TX-MIB", "txIpFeedPacketsFixed"), ("RS-XX9-TX-MIB", "txIpFeedPacketsMissing"), ("RS-XX9-TX-MIB", "txIpFeedPacketsTotal"), ("RS-XX9-TX-MIB", "txIpFeedLinkStatus"), ("RS-XX9-TX-MIB", "txIpFeedDatarate"), ("RS-XX9-TX-MIB", "txInpIfNotificationName"), ("RS-XX9-TX-MIB", "txInpIfNotificationMask"), ("RS-XX9-TX-MIB", "txInpIfNotificationPriority"), ("RS-XX9-TX-MIB", "txInpIfNotificationState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    txObjsInputInterfaces = txObjsInputInterfaces.setStatus('current')
if mibBuilder.loadTexts: txObjsInputInterfaces.setDescription('Input interface objects group.\n                in case of a missing physical input connector or \n                missing option key, changes to objects in this \n                group might be ignored. ')
txObjsInputTsFeed = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 2, 2, 4)).setObjects(("RS-XX9-TX-MIB", "txTsFeedBruttoDataRate"), ("RS-XX9-TX-MIB", "txTsFeedNettoDataRate"), ("RS-XX9-TX-MIB", "txTsFeedPacketLength"), ("RS-XX9-TX-MIB", "txTsFeedType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    txObjsInputTsFeed = txObjsInputTsFeed.setStatus('current')
if mibBuilder.loadTexts: txObjsInputTsFeed.setDescription('Input TS feed objects group.\n                in case of a missing physical input connector or \n                missing option key, changes to objects in this \n                group might be ignored. ')
txObjsInputAutomatic = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 2, 2, 5)).setObjects(("RS-XX9-TX-MIB", "txInpAutoNotificationName"), ("RS-XX9-TX-MIB", "txInpAutoNotificationMask"), ("RS-XX9-TX-MIB", "txInpAutoNotificationPriority"), ("RS-XX9-TX-MIB", "txInpAutoNotificationState"), ("RS-XX9-TX-MIB", "txInpAutoOperationMode"), ("RS-XX9-TX-MIB", "txInpAutoGuardTimeToReserve"), ("RS-XX9-TX-MIB", "txInpAutoIfReseveFails"), ("RS-XX9-TX-MIB", "txInpAutoForceExciterChangeover"), ("RS-XX9-TX-MIB", "txInpAutoActiveInput"), ("RS-XX9-TX-MIB", "txInpAutoDelayInput1To2"), ("RS-XX9-TX-MIB", "txInpAutoGuardTimeBack"), ("RS-XX9-TX-MIB", "txInpAutoDirection"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    txObjsInputAutomatic = txObjsInputAutomatic.setStatus('current')
if mibBuilder.loadTexts: txObjsInputAutomatic.setDescription('Input automatic objects group.')
txObjsFrequencyRegulation = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 2, 2, 6)).setObjects(("RS-XX9-TX-MIB", "txFrqRegSetupSource"), ("RS-XX9-TX-MIB", "txFrqRegSetupControllerMode"), ("RS-XX9-TX-MIB", "txFrqRegSetupRefFailPermissionTime"), ("RS-XX9-TX-MIB", "txFrqRegSetupMuteOnFail"), ("RS-XX9-TX-MIB", "txFrqRegSetupManualOcxoAdjust"), ("RS-XX9-TX-MIB", "txFrqRegSetupMonitor"), ("RS-XX9-TX-MIB", "txFrqRegNotificationName"), ("RS-XX9-TX-MIB", "txFrqRegStateController"), ("RS-XX9-TX-MIB", "txFrqRegStateCurrentSource"), ("RS-XX9-TX-MIB", "txFrqRegNotificationState"), ("RS-XX9-TX-MIB", "txFrqRegStateCurrentControllerMode"), ("RS-XX9-TX-MIB", "txFrqRegNotificationPriority"), ("RS-XX9-TX-MIB", "txFrqRegNotificationMask"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    txObjsFrequencyRegulation = txObjsFrequencyRegulation.setStatus('current')
if mibBuilder.loadTexts: txObjsFrequencyRegulation.setDescription('Frequency regulation objects group.')
txObjsSFN = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 2, 2, 7)).setObjects(("RS-XX9-TX-MIB", "txSfnNotificationName"), ("RS-XX9-TX-MIB", "txSfnNotificationMask"), ("RS-XX9-TX-MIB", "txSfnNotificationPriority"), ("RS-XX9-TX-MIB", "txSfnNotificationState"), ("RS-XX9-TX-MIB", "txSfnStateInternalPpsValid"), ("RS-XX9-TX-MIB", "txSfnStateProcessingTime"), ("RS-XX9-TX-MIB", "txSfnStateDynamicDelay"), ("RS-XX9-TX-MIB", "txSfnStateTotalDelay"), ("RS-XX9-TX-MIB", "txSfnSetupSource"), ("RS-XX9-TX-MIB", "txSfnSetupMaxDeviation"), ("RS-XX9-TX-MIB", "txSfnStatePPS"), ("RS-XX9-TX-MIB", "txSfnStateSFN"), ("RS-XX9-TX-MIB", "txSfnSetupStaticDelay"), ("RS-XX9-TX-MIB", "txSfnStateTransmissionInTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    txObjsSFN = txObjsSFN.setStatus('current')
if mibBuilder.loadTexts: txObjsSFN.setDescription('SFN objects group.')
txObjsPrecorrection = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 2, 2, 8)).setObjects(("RS-XX9-TX-MIB", "txPrecorrNotificationName"), ("RS-XX9-TX-MIB", "txPrecorrNotificationMask"), ("RS-XX9-TX-MIB", "txPrecorrNotificationPriority"), ("RS-XX9-TX-MIB", "txPrecorrNotificationState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    txObjsPrecorrection = txObjsPrecorrection.setStatus('current')
if mibBuilder.loadTexts: txObjsPrecorrection.setDescription('Precorrection objects group.\n                also see txObjsLinPrecorrection, txObjsNonLinPrecorrection and txObjsPrecorrectionCfr objects groups. ')
txObjsOutputStage = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 2, 2, 9)).setObjects(("RS-XX9-TX-MIB", "txOstNotificationName"), ("RS-XX9-TX-MIB", "txOstNotificationMask"), ("RS-XX9-TX-MIB", "txOstNotificationPriority"), ("RS-XX9-TX-MIB", "txOstNotificationState"), ("RS-XX9-TX-MIB", "txOstStateRfOnHours"), ("RS-XX9-TX-MIB", "txOstCmdPower"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    txObjsOutputStage = txObjsOutputStage.setStatus('current')
if mibBuilder.loadTexts: txObjsOutputStage.setDescription('Output stage objects group.')
txObjsAmplifier = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 2, 2, 10)).setObjects(("RS-XX9-TX-MIB", "txAmpNotificationName"), ("RS-XX9-TX-MIB", "txAmpNotificationMask"), ("RS-XX9-TX-MIB", "txAmpNotificationPriority"), ("RS-XX9-TX-MIB", "txAmpNotificationState"), ("RS-XX9-TX-MIB", "txAmpStIDrv"), ("RS-XX9-TX-MIB", "txAmpStIPre"), ("RS-XX9-TX-MIB", "txAmpStVRefPwr"), ("RS-XX9-TX-MIB", "txAmpStVPlusMon"), ("RS-XX9-TX-MIB", "txAmpStIDc"), ("RS-XX9-TX-MIB", "txAmpStVPreMon"), ("RS-XX9-TX-MIB", "txAmpStVAuxIn"), ("RS-XX9-TX-MIB", "txAmpStV12Mon"), ("RS-XX9-TX-MIB", "txAmpStV5Acb"), ("RS-XX9-TX-MIB", "txAmpStV3V5"), ("RS-XX9-TX-MIB", "txAmpStTemperature"), ("RS-XX9-TX-MIB", "txAmpStRfMonitor"), ("RS-XX9-TX-MIB", "txAmpStPwrA"), ("RS-XX9-TX-MIB", "txAmpStPwrB"), ("RS-XX9-TX-MIB", "txAmpStPwrOut"), ("RS-XX9-TX-MIB", "txAmpStReflOut"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    txObjsAmplifier = txObjsAmplifier.setStatus('current')
if mibBuilder.loadTexts: txObjsAmplifier.setDescription('Common high-power (PHx) and medium-power (PMx) \n                amplifier objects group.\n                ')
txObjsSwitchlessCombiner = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 2, 2, 11)).setObjects(("RS-XX9-TX-MIB", "txSwiCoNotificationName"), ("RS-XX9-TX-MIB", "txSwiCoNotificationMask"), ("RS-XX9-TX-MIB", "txSwiCoNotificationPriority"), ("RS-XX9-TX-MIB", "txSwiCoNotificationState"), ("RS-XX9-TX-MIB", "txSwiCoStPosGraded"), ("RS-XX9-TX-MIB", "txSwiCoStPosDegree"), ("RS-XX9-TX-MIB", "txSwiCoStRegulationState"), ("RS-XX9-TX-MIB", "txSwiCoCmdAutomatic"), ("RS-XX9-TX-MIB", "txSwiCoCmdManualPosition"), ("RS-XX9-TX-MIB", "txSwiCoCmdActivationThreshold"), ("RS-XX9-TX-MIB", "txSwiCoStCalibrationState"), ("RS-XX9-TX-MIB", "txSwiCoStPosPermil"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    txObjsSwitchlessCombiner = txObjsSwitchlessCombiner.setStatus('current')
if mibBuilder.loadTexts: txObjsSwitchlessCombiner.setDescription('Common switchless combiner objects group.')
txObjsActiveReserve = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 2, 2, 12)).setObjects(("RS-XX9-TX-MIB", "txArExcAutomaticOperationMode"), ("RS-XX9-TX-MIB", "txArExcAutomaticMode"), ("RS-XX9-TX-MIB", "txArExcAutomaticGuardTime"), ("RS-XX9-TX-MIB", "txArPreselectExcA"), ("RS-XX9-TX-MIB", "txArPreselectExcB"), ("RS-XX9-TX-MIB", "txArExcPreselected"), ("RS-XX9-TX-MIB", "txArExcSelected"), ("RS-XX9-TX-MIB", "txArOstAutomaticOperationMode"), ("RS-XX9-TX-MIB", "txArOstAutomaticMode"), ("RS-XX9-TX-MIB", "txArOstAutomaticGuardTime"), ("RS-XX9-TX-MIB", "txArOstPreselected"), ("RS-XX9-TX-MIB", "txArOstSelected"), ("RS-XX9-TX-MIB", "txArPreselectOstAtoDlOstBtoAnt"), ("RS-XX9-TX-MIB", "txArPreselectOstAtoAntOstBtoDl"), ("RS-XX9-TX-MIB", "txArPreselectOstAOstBtoDl"), ("RS-XX9-TX-MIB", "txArPreselectOstAOstBtoAnt"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    txObjsActiveReserve = txObjsActiveReserve.setStatus('current')
if mibBuilder.loadTexts: txObjsActiveReserve.setDescription('Common active reserve objects group.')
txObjsInputSatFeed = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 2, 2, 13)).setObjects(("RS-XX9-TX-MIB", "txSatTunerTransponderFreq"), ("RS-XX9-TX-MIB", "txSatTunerSignalType"), ("RS-XX9-TX-MIB", "txSatTunerSymbolRate"), ("RS-XX9-TX-MIB", "txSatTunerModulation"), ("RS-XX9-TX-MIB", "txSatTunerCoderate"), ("RS-XX9-TX-MIB", "txSatTunerSignalStandard"), ("RS-XX9-TX-MIB", "txSatTunerRxPower"), ("RS-XX9-TX-MIB", "txSatTunerMeasuredTsDatarate"), ("RS-XX9-TX-MIB", "txSatTunerBitErrorRate"), ("RS-XX9-TX-MIB", "txSatTunerCarrierNoiseRatio"), ("RS-XX9-TX-MIB", "txSatTunerTsSymbolRate"), ("RS-XX9-TX-MIB", "txSatLnbPolarization"), ("RS-XX9-TX-MIB", "txSatLnbFreqLowBand"), ("RS-XX9-TX-MIB", "txSatLnbFreqHighBand"), ("RS-XX9-TX-MIB", "txSatLnbVoltage"), ("RS-XX9-TX-MIB", "txSatCamInserted"), ("RS-XX9-TX-MIB", "txSatCamStatus"), ("RS-XX9-TX-MIB", "txSatCamManufacturerName"), ("RS-XX9-TX-MIB", "txSatCamModuleName"), ("RS-XX9-TX-MIB", "txSatCamTsInput"), ("RS-XX9-TX-MIB", "txSatCamTsOutput"), ("RS-XX9-TX-MIB", "txSatCamConfigurationMode"), ("RS-XX9-TX-MIB", "txSatCamBissMode"), ("RS-XX9-TX-MIB", "txSatCamBissInjectedId"), ("RS-XX9-TX-MIB", "txSatCamBissEncryptedSession"), ("RS-XX9-TX-MIB", "txSatCamBissClearSession"), ("RS-XX9-TX-MIB", "txSatFeedInputServiceName"), ("RS-XX9-TX-MIB", "txSatFeedInputServiceID"), ("RS-XX9-TX-MIB", "txSatFeedInputServiceType"), ("RS-XX9-TX-MIB", "txSatFeedInputServiceElementaryStreams"), ("RS-XX9-TX-MIB", "txSatFeedInputServiceDecryption"), ("RS-XX9-TX-MIB", "txSatFeedInputServiceEncrypted"), ("RS-XX9-TX-MIB", "txSatFeedInputServiceDecryptionState"), ("RS-XX9-TX-MIB", "txSatIpOutMulticastAddrType"), ("RS-XX9-TX-MIB", "txSatGeneralAsiOutput"), ("RS-XX9-TX-MIB", "txSatLnb22kHzSignal"), ("RS-XX9-TX-MIB", "txSatLnbFreqCBand"), ("RS-XX9-TX-MIB", "txSatLnbBand"), ("RS-XX9-TX-MIB", "txSatTunerIntermediateFreq"), ("RS-XX9-TX-MIB", "txSatFeedDecryptionServiceID"), ("RS-XX9-TX-MIB", "txSatBtsNullPacketLcPid"), ("RS-XX9-TX-MIB", "txSatBtsNullPacketLbPid"), ("RS-XX9-TX-MIB", "txSatBtsNullPacketLaPid"), ("RS-XX9-TX-MIB", "txSatBtsPliTablePid"), ("RS-XX9-TX-MIB", "txSatTunerLinkMargin"), ("RS-XX9-TX-MIB", "txSatMultiStreamUsedStreamId"), ("RS-XX9-TX-MIB", "txSatMultiStreamStatus"), ("RS-XX9-TX-MIB", "txSatCamScExpirationDate"), ("RS-XX9-TX-MIB", "txSatCamScManufacturerName"), ("RS-XX9-TX-MIB", "txSatCamScInserted"), ("RS-XX9-TX-MIB", "txSatLnbDriftWarnLimit"), ("RS-XX9-TX-MIB", "txSatTunerCarrierNoiseWarnLimit"), ("RS-XX9-TX-MIB", "txSatTunerLinkMarginFaultLimit"), ("RS-XX9-TX-MIB", "txSatTunerLinkMarginWarnLimit"), ("RS-XX9-TX-MIB", "txSatCamReset"), ("RS-XX9-TX-MIB", "txSatCamResetMode"), ("RS-XX9-TX-MIB", "txSatPlsActive"), ("RS-XX9-TX-MIB", "txSatPlsSelect"), ("RS-XX9-TX-MIB", "txSatCodeLoop"), ("RS-XX9-TX-MIB", "txSatPlsCode3"), ("RS-XX9-TX-MIB", "txSatPlsCode2"), ("RS-XX9-TX-MIB", "txSatLnbDrift"), ("RS-XX9-TX-MIB", "txSatTunerCarrierNoiseFaultLimit"), ("RS-XX9-TX-MIB", "txSatFeedInputServicePmtPid"), ("RS-XX9-TX-MIB", "txSatStreamExpectedTsId"), ("RS-XX9-TX-MIB", "txSatStreamCurrentTsId"), ("RS-XX9-TX-MIB", "txSatLnbFreqCBandLower32"), ("RS-XX9-TX-MIB", "txSatLnbFreqCBandUpper32"), ("RS-XX9-TX-MIB", "txSatLnbFreqHighBandLower32"), ("RS-XX9-TX-MIB", "txSatLnbFreqHighBandUpper32"), ("RS-XX9-TX-MIB", "txSatLnbFreqLowBandLower32"), ("RS-XX9-TX-MIB", "txSatLnbFreqLowBandUpper32"), ("RS-XX9-TX-MIB", "txSatTunerTransponderFreqLower32"), ("RS-XX9-TX-MIB", "txSatTunerTransponderFreqUpper32"), ("RS-XX9-TX-MIB", "txSatIpOutMulticastAddr"), ("RS-XX9-TX-MIB", "txSatIpOutPort"), ("RS-XX9-TX-MIB", "txSatIpOutFecRow"), ("RS-XX9-TX-MIB", "txSatIpOutFecCol"), ("RS-XX9-TX-MIB", "txSatIpOutLocalIpAddrType"), ("RS-XX9-TX-MIB", "txSatIpOutLocalIpAddr"), ("RS-XX9-TX-MIB", "txSatIpOutLocalNetmaskAddrType"), ("RS-XX9-TX-MIB", "txSatIpOutLocalNetmask"), ("RS-XX9-TX-MIB", "txSatIpOutMacAddr"), ("RS-XX9-TX-MIB", "txSatPlScrambling"), ("RS-XX9-TX-MIB", "txSatPlsCode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    txObjsInputSatFeed = txObjsInputSatFeed.setStatus('current')
if mibBuilder.loadTexts: txObjsInputSatFeed.setDescription('Common SAT receiver objects group.')
txObjsPreset = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 2, 2, 14)).setObjects(("RS-XX9-TX-MIB", "txPresetStProgramSettings"), ("RS-XX9-TX-MIB", "txPresetStActivePreset"), ("RS-XX9-TX-MIB", "txPresetCmdSavePreset4"), ("RS-XX9-TX-MIB", "txPresetCmdSavePreset3"), ("RS-XX9-TX-MIB", "txPresetCmdSavePreset2"), ("RS-XX9-TX-MIB", "txPresetCmdSavePreset1"), ("RS-XX9-TX-MIB", "txPresetCmdLoadPreset4"), ("RS-XX9-TX-MIB", "txPresetCmdLoadPreset3"), ("RS-XX9-TX-MIB", "txPresetCmdLoadPreset2"), ("RS-XX9-TX-MIB", "txPresetCmdLoadPreset1"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    txObjsPreset = txObjsPreset.setStatus('current')
if mibBuilder.loadTexts: txObjsPreset.setDescription('Preset related objects.')
txObjsRfSensors = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 2, 2, 15)).setObjects(("RS-XX9-TX-MIB", "txRfLimitForwardFail"), ("RS-XX9-TX-MIB", "txRfLimitForwardWarn"), ("RS-XX9-TX-MIB", "txRfLimitReflectedFail"), ("RS-XX9-TX-MIB", "txRfLimitReflectedWarn"), ("RS-XX9-TX-MIB", "txRfLimitForwardPercentFailUpper"), ("RS-XX9-TX-MIB", "txRfLimitForwardPercentFailLower"), ("RS-XX9-TX-MIB", "txRfLimitForwardPercentWarnUpper"), ("RS-XX9-TX-MIB", "txRfLimitForwardPercentWarnLower"), ("RS-XX9-TX-MIB", "txRfLimitReflectedVswrFail"), ("RS-XX9-TX-MIB", "txRfLimitReflectedVswrWarn"), ("RS-XX9-TX-MIB", "txRfCmdForwardFailTimeout"), ("RS-XX9-TX-MIB", "txRfStForwardPercent"), ("RS-XX9-TX-MIB", "txRfStReflected"), ("RS-XX9-TX-MIB", "txRfStForward"), ("RS-XX9-TX-MIB", "txRfUncalibrate"), ("RS-XX9-TX-MIB", "txRfCalibrate"), ("RS-XX9-TX-MIB", "txRfIdentify"), ("RS-XX9-TX-MIB", "txRfStReflectedVswr"), ("RS-XX9-TX-MIB", "txRfSensorsNotificationName"), ("RS-XX9-TX-MIB", "txRfSensorsNotificationMask"), ("RS-XX9-TX-MIB", "txRfSensorsNotificationPriority"), ("RS-XX9-TX-MIB", "txRfSensorsNotificationState"), ("RS-XX9-TX-MIB", "txRfLimitForwardAddUpperFail"), ("RS-XX9-TX-MIB", "txRfLimitForwardAddUpperWarn"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    txObjsRfSensors = txObjsRfSensors.setStatus('current')
if mibBuilder.loadTexts: txObjsRfSensors.setDescription('RF Sensor objects')
txNotifyTransmitter = NotificationGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 2, 2, 101)).setObjects(("RS-XX9-TX-MIB", "txSummary"), ("RS-XX9-TX-MIB", "txRfSensorSummary"), ("RS-XX9-TX-MIB", "txLocal"), ("RS-XX9-TX-MIB", "txRF"), ("RS-XX9-TX-MIB", "txReflection"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    txNotifyTransmitter = txNotifyTransmitter.setStatus('current')
if mibBuilder.loadTexts: txNotifyTransmitter.setDescription('General transmitter notifications group.')
txNotifyExciter = NotificationGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 2, 2, 102)).setObjects(("RS-XX9-TX-MIB", "txExciterSummary"), ("RS-XX9-TX-MIB", "txExciterLoop"), ("RS-XX9-TX-MIB", "txExciterMute"), ("RS-XX9-TX-MIB", "txExciterOutputConnect"), ("RS-XX9-TX-MIB", "txExciterRfState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    txNotifyExciter = txNotifyExciter.setStatus('current')
if mibBuilder.loadTexts: txNotifyExciter.setDescription('Exciter notifications group.')
txNotifyInputInterfaces = NotificationGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 2, 2, 103)).setObjects(("RS-XX9-TX-MIB", "txInpIfLogDatarateBufferOverflow"), ("RS-XX9-TX-MIB", "txInpIfLogDatarateBufferUnderrun"), ("RS-XX9-TX-MIB", "txInpIfIpState"), ("RS-XX9-TX-MIB", "txInpIfLogState"), ("RS-XX9-TX-MIB", "txInpIfLogInfoPacket"), ("RS-XX9-TX-MIB", "txInpIfLogPacketLength"), ("RS-XX9-TX-MIB", "txInpIfIpInfoPacket"), ("RS-XX9-TX-MIB", "txInpIfIpPacketLength"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    txNotifyInputInterfaces = txNotifyInputInterfaces.setStatus('current')
if mibBuilder.loadTexts: txNotifyInputInterfaces.setDescription('Input interface notifications group.')
txNotifyInputTsFeed = NotificationGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 2, 2, 104)).setObjects(("RS-XX9-TX-MIB", "txInpIfTsState"), ("RS-XX9-TX-MIB", "txInpIfTsInfoPacket"), ("RS-XX9-TX-MIB", "txInpIfTsPacketLength"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    txNotifyInputTsFeed = txNotifyInputTsFeed.setStatus('current')
if mibBuilder.loadTexts: txNotifyInputTsFeed.setDescription('Input TS feed notifications group.')
txNotifyInputAutomatic = NotificationGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 2, 2, 105)).setObjects(("RS-XX9-TX-MIB", "txInpAuto1Active"), ("RS-XX9-TX-MIB", "txInpAutoState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    txNotifyInputAutomatic = txNotifyInputAutomatic.setStatus('current')
if mibBuilder.loadTexts: txNotifyInputAutomatic.setDescription('Input automatic notifications group.')
txNotifyFrequencyRegulation = NotificationGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 2, 2, 106)).setObjects(("RS-XX9-TX-MIB", "txFrqRegSummary"), ("RS-XX9-TX-MIB", "txFrqRegCurrentSource"), ("RS-XX9-TX-MIB", "txFrqRegSourceExtRef"), ("RS-XX9-TX-MIB", "txFrqRegSourceExtPPS"), ("RS-XX9-TX-MIB", "txFrqRegSourceIntGPS"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    txNotifyFrequencyRegulation = txNotifyFrequencyRegulation.setStatus('current')
if mibBuilder.loadTexts: txNotifyFrequencyRegulation.setDescription('Frequency regulation notifications group.')
txNotifySFN = NotificationGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 2, 2, 107)).setObjects(("RS-XX9-TX-MIB", "txSfnSummary"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    txNotifySFN = txNotifySFN.setStatus('current')
if mibBuilder.loadTexts: txNotifySFN.setDescription('SFN notifications group.')
txNotifyPrecorrection = NotificationGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 2, 2, 108)).setObjects(("RS-XX9-TX-MIB", "txPrecorrLinSummary"), ("RS-XX9-TX-MIB", "txPrecorrNonLinSummary"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    txNotifyPrecorrection = txNotifyPrecorrection.setStatus('current')
if mibBuilder.loadTexts: txNotifyPrecorrection.setDescription('Precorrection notifications group.\n                obsoleted.\n                check txNotifyLinPrecorrection and txNotifyNonLinPrecorrection notifications groups instead. ')
txNotifyOutputStage = NotificationGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 2, 2, 109)).setObjects(("RS-XX9-TX-MIB", "txOstSummary"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    txNotifyOutputStage = txNotifyOutputStage.setStatus('current')
if mibBuilder.loadTexts: txNotifyOutputStage.setDescription('Output stage notifications group.')
txNotifyAmplifier = NotificationGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 2, 2, 110)).setObjects(("RS-XX9-TX-MIB", "txAmpSummary"), ("RS-XX9-TX-MIB", "txAmpRfPowerFail"), ("RS-XX9-TX-MIB", "txAmpReflection"), ("RS-XX9-TX-MIB", "txAmpSupplyFail"), ("RS-XX9-TX-MIB", "txAmpRfInFail"), ("RS-XX9-TX-MIB", "txAmpMute"), ("RS-XX9-TX-MIB", "txAmpTemperatureFail"), ("RS-XX9-TX-MIB", "txAmpTransistorFail"), ("RS-XX9-TX-MIB", "txAmpRegulationFail"), ("RS-XX9-TX-MIB", "txAmpAcFail"), ("RS-XX9-TX-MIB", "txAmpDcFail"), ("RS-XX9-TX-MIB", "txAmpLink"), ("RS-XX9-TX-MIB", "txAmpBiasFail"), ("RS-XX9-TX-MIB", "txAmpInitFail"), ("RS-XX9-TX-MIB", "txAmpAbsorberFail"), ("RS-XX9-TX-MIB", "txAmpOn"), ("RS-XX9-TX-MIB", "txAmpBlocking"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    txNotifyAmplifier = txNotifyAmplifier.setStatus('current')
if mibBuilder.loadTexts: txNotifyAmplifier.setDescription('High-power (PHx) and medium-power (PMx) \n                amplifier notifications group.')
txNotifySwitchlessCombiner = NotificationGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 2, 2, 111)).setObjects(("RS-XX9-TX-MIB", "txSwiCoSummary"), ("RS-XX9-TX-MIB", "txSwiCoRegulationSummary"), ("RS-XX9-TX-MIB", "txSwiCoRfProbeFail"), ("RS-XX9-TX-MIB", "txSwiCoRcbFail"), ("RS-XX9-TX-MIB", "txSwiCoHwLocal"), ("RS-XX9-TX-MIB", "txSwiCoHwLink"), ("RS-XX9-TX-MIB", "txSwiCoHwWarn"), ("RS-XX9-TX-MIB", "txSwiCoHwFault"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    txNotifySwitchlessCombiner = txNotifySwitchlessCombiner.setStatus('current')
if mibBuilder.loadTexts: txNotifySwitchlessCombiner.setDescription('Switchless Combiner notifications group.')
txNotifyActiveReserve = NotificationGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 2, 2, 112)).setObjects(("RS-XX9-TX-MIB", "txActiveReserveExcAutoSummary"), ("RS-XX9-TX-MIB", "txActiveReserveExcAutoReady"), ("RS-XX9-TX-MIB", "txActiveReserveExcAutoSwitchedOver"), ("RS-XX9-TX-MIB", "txActiveReserveExcAutoRfSwitchSummary"), ("RS-XX9-TX-MIB", "txActiveReserveOstAutoSummary"), ("RS-XX9-TX-MIB", "txActiveReserveOstAutoReady"), ("RS-XX9-TX-MIB", "txActiveReserveOstAutoSwitchedOver"), ("RS-XX9-TX-MIB", "txActiveReserveOstAutoRfSwitchSummary"), ("RS-XX9-TX-MIB", "txActiveReserveExcAutoOn"), ("RS-XX9-TX-MIB", "txActiveReserveOstAutoOn"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    txNotifyActiveReserve = txNotifyActiveReserve.setStatus('current')
if mibBuilder.loadTexts: txNotifyActiveReserve.setDescription('Active Reserve notifications group.')
txNotifyInputSatFeed = NotificationGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 2, 2, 113)).setObjects(("RS-XX9-TX-MIB", "txInpIfSatInfoPacket"), ("RS-XX9-TX-MIB", "txInpIfSatPacketLength"), ("RS-XX9-TX-MIB", "txInpIfSatTransponderLocked"), ("RS-XX9-TX-MIB", "txInpIfSatIpOutput"), ("RS-XX9-TX-MIB", "txInpIfSatBtsStatus"), ("RS-XX9-TX-MIB", "txInpIfSatCarrierNoiseStatus"), ("RS-XX9-TX-MIB", "txInpIfSatLinkMarginStatus"), ("RS-XX9-TX-MIB", "txInpIfSatDriftStatus"), ("RS-XX9-TX-MIB", "txInpIfSatStreamTsIdMatch"), ("RS-XX9-TX-MIB", "txInpIfSatReceiverState"), ("RS-XX9-TX-MIB", "txInpIfSatInputState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    txNotifyInputSatFeed = txNotifyInputSatFeed.setStatus('current')
if mibBuilder.loadTexts: txNotifyInputSatFeed.setDescription('SAT receiver notifications group.')
txNotifyRfSensors = NotificationGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 2, 2, 114)).setObjects(("RS-XX9-TX-MIB", "txRfSensorLinkStatus"), ("RS-XX9-TX-MIB", "txRfSensorCalibrated"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    txNotifyRfSensors = txNotifyRfSensors.setStatus('current')
if mibBuilder.loadTexts: txNotifyRfSensors.setDescription('Rf sensor notifications group.')
txNotifyPaTLx = NotificationGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 2, 2, 115)).setObjects(("RS-XX9-TX-MIB", "txAmpSummary"), ("RS-XX9-TX-MIB", "txAmpOn"), ("RS-XX9-TX-MIB", "txAmpMute"), ("RS-XX9-TX-MIB", "txAmpTemperatureFail"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    txNotifyPaTLx = txNotifyPaTLx.setStatus('current')
if mibBuilder.loadTexts: txNotifyPaTLx.setDescription('Tlx power amplifier notifications group.')
txObjsExciterAutomatic = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 2, 2, 201)).setObjects(("RS-XX9-TX-MIB", "txTransCmdReserveOpMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    txObjsExciterAutomatic = txObjsExciterAutomatic.setStatus('current')
if mibBuilder.loadTexts: txObjsExciterAutomatic.setDescription('Exciter automatic objects group.')
txObjsDualDrive = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 2, 2, 202)).setObjects(("RS-XX9-TX-MIB", "txExcAutoPreselectExcA"), ("RS-XX9-TX-MIB", "txExcAutoPreselectExcB"), ("RS-XX9-TX-MIB", "txExcAutoOperationMode"), ("RS-XX9-TX-MIB", "txExciterAutomaticMode"), ("RS-XX9-TX-MIB", "txExcAutoGuardTime"), ("RS-XX9-TX-MIB", "txExcAutoPreselected"), ("RS-XX9-TX-MIB", "txExcAutoRfSwitchPosition"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    txObjsDualDrive = txObjsDualDrive.setStatus('current')
if mibBuilder.loadTexts: txObjsDualDrive.setDescription('DualDrive and BackupDrive configuration objects.')
txObjsSFN1 = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 2, 2, 203)).setObjects(("RS-XX9-TX-MIB", "txSfnStateNetworkDelay"), ("RS-XX9-TX-MIB", "txSfnStateMaximumDelay"), ("RS-XX9-TX-MIB", "txSfnStateDispatchTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    txObjsSFN1 = txObjsSFN1.setStatus('current')
if mibBuilder.loadTexts: txObjsSFN1.setDescription('SFN objects for DVB-T, ISDB-T, DTMB, ATSC only.')
txObjsSFN2 = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 2, 2, 204)).setObjects(("RS-XX9-TX-MIB", "txSfnSetupSFN"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    txObjsSFN2 = txObjsSFN2.setStatus('current')
if mibBuilder.loadTexts: txObjsSFN2.setDescription('SFN objects not for ISDB-T.')
txObjsPMx = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 2, 2, 205)).setObjects(("RS-XX9-TX-MIB", "txPmxFanFail"), ("RS-XX9-TX-MIB", "txPmxInletAirTemperature"), ("RS-XX9-TX-MIB", "txPmxOutletAirTemperature"), ("RS-XX9-TX-MIB", "txPmxFreqIDString"), ("RS-XX9-TX-MIB", "txAmpStI1A"), ("RS-XX9-TX-MIB", "txAmpStI2A"), ("RS-XX9-TX-MIB", "txAmpStI3A"), ("RS-XX9-TX-MIB", "txAmpStI1B"), ("RS-XX9-TX-MIB", "txAmpStI2B"), ("RS-XX9-TX-MIB", "txAmpStI3B"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    txObjsPMx = txObjsPMx.setStatus('current')
if mibBuilder.loadTexts: txObjsPMx.setDescription('PMU and PMV specific objects')
txObjsNonFM = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 2, 2, 207)).setObjects(("RS-XX9-TX-MIB", "txInpAutoPreferredInput"), ("RS-XX9-TX-MIB", "txInpAutoMuteOnInputFail"), ("RS-XX9-TX-MIB", "txInpAutoFailDetection"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    txObjsNonFM = txObjsNonFM.setStatus('current')
if mibBuilder.loadTexts: txObjsNonFM.setDescription('Objects for all modulation modes except FM.')
txObjsPHR901 = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 2, 2, 208)).setObjects(("RS-XX9-TX-MIB", "txPhr901PwrIn"), ("RS-XX9-TX-MIB", "txPhr901PwrDrv"), ("RS-XX9-TX-MIB", "txPhr901I12"), ("RS-XX9-TX-MIB", "txPhr901I34"), ("RS-XX9-TX-MIB", "txPhr901I56"), ("RS-XX9-TX-MIB", "txPhr901I78"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    txObjsPHR901 = txObjsPHR901.setStatus('current')
if mibBuilder.loadTexts: txObjsPHR901.setDescription('PHR901 specific objects')
txObjsNonBand2 = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 2, 2, 209)).setObjects(("RS-XX9-TX-MIB", "txInpAutoInputFailDelay"), ("RS-XX9-TX-MIB", "txInpAutoSeamlessOpMode"), ("RS-XX9-TX-MIB", "txInpAutoSeamlessPossible"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    txObjsNonBand2 = txObjsNonBand2.setStatus('current')
if mibBuilder.loadTexts: txObjsNonBand2.setDescription('Non band II objects.')
txObjsPMV901 = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 2, 2, 210)).setObjects(("RS-XX9-TX-MIB", "txPmxDohertyActive"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    txObjsPMV901 = txObjsPMV901.setStatus('current')
if mibBuilder.loadTexts: txObjsPMV901.setDescription('PMV901 specific objects')
txObjsPMU901 = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 2, 2, 211)).setObjects(("RS-XX9-TX-MIB", "txPmxFrequencyFail"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    txObjsPMU901 = txObjsPMU901.setStatus('current')
if mibBuilder.loadTexts: txObjsPMU901.setDescription('PMU901 specific objects')
txObjsPHx902 = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 2, 2, 212)).setObjects(("RS-XX9-TX-MIB", "txAmpStI3B"), ("RS-XX9-TX-MIB", "txAmpStI2B"), ("RS-XX9-TX-MIB", "txAmpStI1B"), ("RS-XX9-TX-MIB", "txAmpStI3A"), ("RS-XX9-TX-MIB", "txAmpStI2A"), ("RS-XX9-TX-MIB", "txAmpStI1A"), ("RS-XX9-TX-MIB", "txPhxDohertyActive"), ("RS-XX9-TX-MIB", "txPhxFreqIDString"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    txObjsPHx902 = txObjsPHx902.setStatus('current')
if mibBuilder.loadTexts: txObjsPHx902.setDescription('PHU902, PHU903 and PHV902 specific objects')
txObjsNonAtv = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 2, 2, 213)).setObjects(("RS-XX9-TX-MIB", "txTransStPaEfficiency"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    txObjsNonAtv = txObjsNonAtv.setStatus('current')
if mibBuilder.loadTexts: txObjsNonAtv.setDescription('Non ATV objects.')
txObjsTransparentTs = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 2, 2, 214)).setObjects(("RS-XX9-TX-MIB", "txInpAutoTransparentTs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    txObjsTransparentTs = txObjsTransparentTs.setStatus('current')
if mibBuilder.loadTexts: txObjsTransparentTs.setDescription('Transparent TS objects. (DVB-T only)')
txObjsNonAnalog = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 2, 2, 215)).setObjects(("RS-XX9-TX-MIB", "txInpAutoDetectLostPackets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    txObjsNonAnalog = txObjsNonAnalog.setStatus('current')
if mibBuilder.loadTexts: txObjsNonAnalog.setDescription('Non FM or ATV objects.')
txObjsDvbt2 = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 2, 2, 216)).setObjects(("RS-XX9-TX-MIB", "txSfnStateTimestampState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    txObjsDvbt2 = txObjsDvbt2.setStatus('current')
if mibBuilder.loadTexts: txObjsDvbt2.setDescription('DVB-T2 specific objects.')
txObjsPaTlx = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 2, 2, 217)).setObjects(("RS-XX9-TX-MIB", "txAmpNotificationName"), ("RS-XX9-TX-MIB", "txAmpNotificationMask"), ("RS-XX9-TX-MIB", "txAmpNotificationPriority"), ("RS-XX9-TX-MIB", "txAmpNotificationState"), ("RS-XX9-TX-MIB", "txAmpStPwrOut"), ("RS-XX9-TX-MIB", "txAmpStReflOut"), ("RS-XX9-TX-MIB", "txAmpStVPlusMon"), ("RS-XX9-TX-MIB", "txAmpTlxFanFail"), ("RS-XX9-TX-MIB", "txAmpStTemperature"), ("RS-XX9-TX-MIB", "txAmpTlxV12Mon"), ("RS-XX9-TX-MIB", "txAmpTlxSupplyFail"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    txObjsPaTlx = txObjsPaTlx.setStatus('current')
if mibBuilder.loadTexts: txObjsPaTlx.setDescription('TLx power amplifier specific objects.')
txObjsPHU901 = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 2, 2, 218)).setObjects(("RS-XX9-TX-MIB", "txAmpStI1A"), ("RS-XX9-TX-MIB", "txAmpStI2A"), ("RS-XX9-TX-MIB", "txAmpStI3A"), ("RS-XX9-TX-MIB", "txAmpStI1B"), ("RS-XX9-TX-MIB", "txAmpStI2B"), ("RS-XX9-TX-MIB", "txAmpStI3B"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    txObjsPHU901 = txObjsPHU901.setStatus('current')
if mibBuilder.loadTexts: txObjsPHU901.setDescription('PHU901 specific objects.')
txObjsPMU905 = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 2, 2, 219)).setObjects(("RS-XX9-TX-MIB", "txPmxDohertyActive"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    txObjsPMU905 = txObjsPMU905.setStatus('current')
if mibBuilder.loadTexts: txObjsPMU905.setDescription('PMU905 specific objects')
txObjsLinPrecorrection = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 2, 2, 220)).setObjects(("RS-XX9-TX-MIB", "txPrecorrLinStateStatus"), ("RS-XX9-TX-MIB", "txPrecorrLinStateSignalLevel"), ("RS-XX9-TX-MIB", "txPrecorrLinStateAmplitudeRipple"), ("RS-XX9-TX-MIB", "txPrecorrLinStateGroupDelayRipple"), ("RS-XX9-TX-MIB", "txPrecorrLinStateAmplitudeRippleLimit"), ("RS-XX9-TX-MIB", "txPrecorrLinStateGroupDelayRippleLimit"), ("RS-XX9-TX-MIB", "txPrecorrLinSetupOpMode"), ("RS-XX9-TX-MIB", "txPrecorrLinSetupReset"), ("RS-XX9-TX-MIB", "txPrecorrLinSetupAmplitudeRippleLimit"), ("RS-XX9-TX-MIB", "txPrecorrLinSetupGroupDelayRippleLimit"), ("RS-XX9-TX-MIB", "txPrecorrLinSetupEquipmentSlope"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    txObjsLinPrecorrection = txObjsLinPrecorrection.setStatus('current')
if mibBuilder.loadTexts: txObjsLinPrecorrection.setDescription('Linear precorrection objects group.')
txObjsNonLinPrecorrection = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 2, 2, 221)).setObjects(("RS-XX9-TX-MIB", "txPrecorrNonLinStateStatus"), ("RS-XX9-TX-MIB", "txPrecorrNonLinStateSignalLevel"), ("RS-XX9-TX-MIB", "txPrecorrNonLinStateShoulderLeft"), ("RS-XX9-TX-MIB", "txPrecorrNonLinStateShoulderRight"), ("RS-XX9-TX-MIB", "txPrecorrNonLinSetupOpMode"), ("RS-XX9-TX-MIB", "txPrecorrNonLinSetupReset"), ("RS-XX9-TX-MIB", "txPrecorrNonLinSetupShoulderDistance"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    txObjsNonLinPrecorrection = txObjsNonLinPrecorrection.setStatus('current')
if mibBuilder.loadTexts: txObjsNonLinPrecorrection.setDescription('Nonlinear precorrection objects group.')
txObjsPrecorrectionCfr = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 2, 2, 222)).setObjects(("RS-XX9-TX-MIB", "txPrecorrCfrEnable"), ("RS-XX9-TX-MIB", "txPrecorrCfrLevel"), ("RS-XX9-TX-MIB", "txPrecorrCfrInbandNoise"), ("RS-XX9-TX-MIB", "txPrecorrCfrOutbandNoise"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    txObjsPrecorrectionCfr = txObjsPrecorrectionCfr.setStatus('current')
if mibBuilder.loadTexts: txObjsPrecorrectionCfr.setDescription('Crest factor reduction objects group.')
txObjsInputExgine = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 2, 2, 223)).setObjects(("RS-XX9-TX-MIB", "txExgineMode"), ("RS-XX9-TX-MIB", "txExgineStatus"), ("RS-XX9-TX-MIB", "txExgineMute"), ("RS-XX9-TX-MIB", "txExgineSyncInputSrc"), ("RS-XX9-TX-MIB", "txExgineSyncInputStatus"), ("RS-XX9-TX-MIB", "txExgineMpxInput"), ("RS-XX9-TX-MIB", "txExgineE2xInput"), ("RS-XX9-TX-MIB", "txExgineSupply1Status"), ("RS-XX9-TX-MIB", "txExgineSupply2Status"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    txObjsInputExgine = txObjsInputExgine.setStatus('current')
if mibBuilder.loadTexts: txObjsInputExgine.setDescription('Description.')
txObjsSignalQuality = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 2, 2, 224)).setObjects(("RS-XX9-TX-MIB", "txPrecorrSigQualPapr"), ("RS-XX9-TX-MIB", "txPrecorrSigQualMer"), ("RS-XX9-TX-MIB", "txPrecorrSigQualMerWarnLimit"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    txObjsSignalQuality = txObjsSignalQuality.setStatus('current')
if mibBuilder.loadTexts: txObjsSignalQuality.setDescription('Signal Quality objects group.')
txObjsDigitalHighPower = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 2, 2, 225)).setObjects(("RS-XX9-TX-MIB", "txExcCmdRfSlope"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    txObjsDigitalHighPower = txObjsDigitalHighPower.setStatus('current')
if mibBuilder.loadTexts: txObjsDigitalHighPower.setDescription('Non TLx objects (THx, TMx) and non Band-II.')
txObjsOutputStageNonTlx = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 2, 2, 226)).setObjects(("RS-XX9-TX-MIB", "txOstCmdDcControl"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    txObjsOutputStageNonTlx = txObjsOutputStageNonTlx.setStatus('current')
if mibBuilder.loadTexts: txObjsOutputStageNonTlx.setDescription('Output stage objects group for medium and high power.')
txNotifyExciterAutomatic = NotificationGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 2, 2, 300)).setObjects(("RS-XX9-TX-MIB", "txExciterAutomaticSwitchedOver"), ("RS-XX9-TX-MIB", "txExciterAutomaticRfSwitchSummary"), ("RS-XX9-TX-MIB", "txExciterAutomaticSummary"), ("RS-XX9-TX-MIB", "txExciterAutomaticReady"), ("RS-XX9-TX-MIB", "txExciterAutomaticOn"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    txNotifyExciterAutomatic = txNotifyExciterAutomatic.setStatus('current')
if mibBuilder.loadTexts: txNotifyExciterAutomatic.setDescription('Exciter automatic notifications group.')
txNotifyLinPrecorrection = NotificationGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 2, 2, 301)).setObjects(("RS-XX9-TX-MIB", "txPrecorrLinSummary"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    txNotifyLinPrecorrection = txNotifyLinPrecorrection.setStatus('current')
if mibBuilder.loadTexts: txNotifyLinPrecorrection.setDescription('Linear precorrection notifications group.')
txNotifyNonLinPrecorrection = NotificationGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 2, 2, 302)).setObjects(("RS-XX9-TX-MIB", "txPrecorrNonLinSummary"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    txNotifyNonLinPrecorrection = txNotifyNonLinPrecorrection.setStatus('current')
if mibBuilder.loadTexts: txNotifyNonLinPrecorrection.setDescription('Nonlinear precorrection notifications group.')
txNotifySignalQuality = NotificationGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 2, 2, 303)).setObjects(("RS-XX9-TX-MIB", "txPrecorrMerState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    txNotifySignalQuality = txNotifySignalQuality.setStatus('current')
if mibBuilder.loadTexts: txNotifySignalQuality.setDescription('Signal quality notifications group.')
txObjsPMxObsoleted = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 2, 2, 400)).setObjects(("RS-XX9-TX-MIB", "txPmxFreqID"), ("RS-XX9-TX-MIB", "txPmxvRefPowerMax"), ("RS-XX9-TX-MIB", "txPmxAirFilterFail"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    txObjsPMxObsoleted = txObjsPMxObsoleted.setStatus('obsolete')
if mibBuilder.loadTexts: txObjsPMxObsoleted.setDescription('obsolete PMU and PMV specific objects')
txObjsPHxObsoleted = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 2, 2, 401)).setObjects(("RS-XX9-TX-MIB", "txPhxFreqID"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    txObjsPHxObsoleted = txObjsPHxObsoleted.setStatus('obsolete')
if mibBuilder.loadTexts: txObjsPHxObsoleted.setDescription('obsolete PHU and PHV specific objects')
txObjsInputAutomaticObsoleted = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 2, 2, 402)).setObjects(("RS-XX9-TX-MIB", "txInpAutoMaxDelayInput1To2"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    txObjsInputAutomaticObsoleted = txObjsInputAutomaticObsoleted.setStatus('obsolete')
if mibBuilder.loadTexts: txObjsInputAutomaticObsoleted.setDescription('obsolete Input automatic objects group.')
txObjsAmplifierObsoleted = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 2, 2, 403)).setObjects(("RS-XX9-TX-MIB", "txAmpStVReg"), ("RS-XX9-TX-MIB", "txPhr901PwrA"), ("RS-XX9-TX-MIB", "txPhr901PwrB"), ("RS-XX9-TX-MIB", "txPhr901PwrOutAv"), ("RS-XX9-TX-MIB", "txPhr901ReflOutAv"), ("RS-XX9-TX-MIB", "txPhr901PwrAbs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    txObjsAmplifierObsoleted = txObjsAmplifierObsoleted.setStatus('obsolete')
if mibBuilder.loadTexts: txObjsAmplifierObsoleted.setDescription('obsolete common amplifier objects group.')
txObjsInputSatFeedObsoleted = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 2, 2, 404)).setObjects(("RS-XX9-TX-MIB", "txSatFeedInputServiceDecryptedAt"), ("RS-XX9-TX-MIB", "txSatBtsDecompEnable"), ("RS-XX9-TX-MIB", "txSatBtsRegionalization"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    txObjsInputSatFeedObsoleted = txObjsInputSatFeedObsoleted.setStatus('obsolete')
if mibBuilder.loadTexts: txObjsInputSatFeedObsoleted.setDescription('obsoleted SAT receiver notifications group.')
txObjsPrecorrectionObsoleted = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 2, 2, 405)).setObjects(("RS-XX9-TX-MIB", "txPrecorrNonLinSetupSignalLimit"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    txObjsPrecorrectionObsoleted = txObjsPrecorrectionObsoleted.setStatus('obsolete')
if mibBuilder.loadTexts: txObjsPrecorrectionObsoleted.setDescription('Obsoleted precorrection objects group.')
txNotifyAmplifierObsoleted = NotificationGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 3, 2, 2, 500)).setObjects(("RS-XX9-TX-MIB", "txAmpDriverFail"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    txNotifyAmplifierObsoleted = txNotifyAmplifierObsoleted.setStatus('obsolete')
if mibBuilder.loadTexts: txNotifyAmplifierObsoleted.setDescription('obsolete Amplifier Notification group.')
mibBuilder.exportSymbols("RS-XX9-TX-MIB", txRfSensorsNotificationTxIdx=txRfSensorsNotificationTxIdx, txInpIfTsInfoPacket=txInpIfTsInfoPacket, txTransStPaEfficiency=txTransStPaEfficiency, txSfnNotificationPriority=txSfnNotificationPriority, txRfSensorsNotificationPriority=txRfSensorsNotificationPriority, txArPreselectExcA=txArPreselectExcA, txOstNotificationTxIdx=txOstNotificationTxIdx, txSatIpOutPort=txSatIpOutPort, txObjsSignalQuality=txObjsSignalQuality, txAmpTlxFanFail=txAmpTlxFanFail, txInpIfNotificationInputIdx=txInpIfNotificationInputIdx, txAmpNotificationTxIdx=txAmpNotificationTxIdx, txSatFeedServiceIdx=txSatFeedServiceIdx, txAmplifierPhxTable=txAmplifierPhxTable, txInpAutoNotificationName=txInpAutoNotificationName, txPrecorrLinStateSignalLevel=txPrecorrLinStateSignalLevel, txSwiCoNotificationTxIdx=txSwiCoNotificationTxIdx, txSatCamModuleName=txSatCamModuleName, txObjsOutputStage=txObjsOutputStage, txInputSatFeedIpOutputEntry=txInputSatFeedIpOutputEntry, txArOstAutomaticGuardTime=txArOstAutomaticGuardTime, txPrecorrCfrOutbandNoise=txPrecorrCfrOutbandNoise, txIpFeedDatarate=txIpFeedDatarate, txOstCmdPower=txOstCmdPower, txAmpNotificationEntry=txAmpNotificationEntry, txRfLimitReflectedFail=txRfLimitReflectedFail, txInpGeneralSetupTable=txInpGeneralSetupTable, txInputAutomatic=txInputAutomatic, txObjsNonBand2=txObjsNonBand2, txObjsInputSatFeedObsoleted=txObjsInputSatFeedObsoleted, txTransStForwardPower=txTransStForwardPower, txArExcSelected=txArExcSelected, txInpIfNotificationState=txInpIfNotificationState, txInpAutoDirection=txInpAutoDirection, txAmpStReflOut=txAmpStReflOut, txRfStForward=txRfStForward, txTsFeedNettoDataRate=txTsFeedNettoDataRate, txAmpStVPlusMon=txAmpStVPlusMon, txExcAutoOperationMode=txExcAutoOperationMode, PrecorrectionOperationMode=PrecorrectionOperationMode, txSwiCoNotificationEntry=txSwiCoNotificationEntry, txObjsFrequencyRegulation=txObjsFrequencyRegulation, txFrqRegSourceIntGPS=txFrqRegSourceIntGPS, txActiveReserveExciterEntry=txActiveReserveExciterEntry, txInpIfSatDriftStatus=txInpIfSatDriftStatus, txIpFeedStreamingMode=txIpFeedStreamingMode, txAmpAbsorberFail=txAmpAbsorberFail, txSatIpOutLocalIpAddrType=txSatIpOutLocalIpAddrType, txInpMonitorOut=txInpMonitorOut, txInpIfNotificationName=txInpIfNotificationName, txOstNotificationIdx=txOstNotificationIdx, txOstStateTable=txOstStateTable, txIpFeedStreamAddressType=txIpFeedStreamAddressType, txSwiCoHwFault=txSwiCoHwFault, txSFN=txSFN, txSwiCoStCalibrationState=txSwiCoStCalibrationState, txNotifyActiveReserve=txNotifyActiveReserve, txInpIfNotificationIdx=txInpIfNotificationIdx, txTransCmdOperationMode=txTransCmdOperationMode, txTsFeedPacketLength=txTsFeedPacketLength, txInpAutoNotificationPriority=txInpAutoNotificationPriority, txAmpNotificationPriority=txAmpNotificationPriority, txSatBtsDecompEnable=txSatBtsDecompEnable, txSfnStateTransmissionInTime=txSfnStateTransmissionInTime, txAmpStPwrB=txAmpStPwrB, txObjsLinPrecorrection=txObjsLinPrecorrection, txPrecorrCfrInbandNoise=txPrecorrCfrInbandNoise, txBasicCompliance=txBasicCompliance, txInpAuto1Active=txInpAuto1Active, txInpAutoActiveInput=txInpAutoActiveInput, txNotifyPaTLx=txNotifyPaTLx, txActiveReserveOstAutoReady=txActiveReserveOstAutoReady, txExciterNotificationTxIdx=txExciterNotificationTxIdx, txObjsExciterAutomatic=txObjsExciterAutomatic, txPhxFreqIDString=txPhxFreqIDString, txPresetCmdLoadPreset4=txPresetCmdLoadPreset4, txSatCamConfigurationMode=txSatCamConfigurationMode, txNotifyAmplifier=txNotifyAmplifier, txTransCmdWarnOnDohertyMismatch=txTransCmdWarnOnDohertyMismatch, txAmplifierTlxEntry=txAmplifierTlxEntry, txInputSatFeedCamEntry=txInputSatFeedCamEntry, txSatCamReset=txSatCamReset, txPhr901PwrA=txPhr901PwrA, txPresetStatusTable=txPresetStatusTable, txObjsNonAtv=txObjsNonAtv, txExcCmdModulationMode=txExcCmdModulationMode, txActiveReserveOstAutoOn=txActiveReserveOstAutoOn, txPrecorrectionLinear=txPrecorrectionLinear, txPhr901I12=txPhr901I12, txInpAutoMaxDelayInput1To2=txInpAutoMaxDelayInput1To2, txAmplifierPhxEntry=txAmplifierPhxEntry, txObjsSFN2=txObjsSFN2, txActiveReserveOstAutoRfSwitchSummary=txActiveReserveOstAutoRfSwitchSummary, txArPreselectExcB=txArPreselectExcB, txObjsInputTsFeed=txObjsInputTsFeed, txSatLnbFreqCBandUpper32=txSatLnbFreqCBandUpper32, txSfnSetupSource=txSfnSetupSource, txAmpStI1B=txAmpStI1B, txExcStOperationOn=txExcStOperationOn, txSatBtsNullPacketLbPid=txSatBtsNullPacketLbPid, txNotifySignalQuality=txNotifySignalQuality, txPrecorrNonLinStateEntry=txPrecorrNonLinStateEntry, txExciterLoop=txExciterLoop, txInpIfTsState=txInpIfTsState, txExciterNotificationEntry=txExciterNotificationEntry, txInpAutoIfReseveFails=txInpAutoIfReseveFails, txRfUncalibrate=txRfUncalibrate, txInpAutoConfigurationTable=txInpAutoConfigurationTable, txFrqRegNotificationName=txFrqRegNotificationName, txSwiCoCmdManualPosition=txSwiCoCmdManualPosition, txSatPlsCode2=txSatPlsCode2, txPrecorrSigQualTxIdx=txPrecorrSigQualTxIdx, txPrecorrectionNonLinear=txPrecorrectionNonLinear, txSatTunerLinkMargin=txSatTunerLinkMargin, txPrecorrNonLinSummary=txPrecorrNonLinSummary, txPhr901PwrDrv=txPhr901PwrDrv, SatSignalType=SatSignalType, txPrecorrLinSummary=txPrecorrLinSummary, txTransmitterNotificationTxIdx=txTransmitterNotificationTxIdx, txGPS=txGPS, txAmpStIDrv=txAmpStIDrv, txObjsPrecorrection=txObjsPrecorrection, txExciterNotificationTable=txExciterNotificationTable, ControllerMode=ControllerMode, txSatLnbBand=txSatLnbBand, txSwiCoSummary=txSwiCoSummary, txExciterNotificationIdx=txExciterNotificationIdx, txTransCmdReset=txTransCmdReset, txSfnStateTimestampState=txSfnStateTimestampState, txInpIfSatReceiverState=txInpIfSatReceiverState, txFrqRegSetupMonitor=txFrqRegSetupMonitor, txInpAutoMuteOnInputFail=txInpAutoMuteOnInputFail, txRfLimitReflectedWarn=txRfLimitReflectedWarn, txInpAutoOperationMode=txInpAutoOperationMode, txPhr901PwrOutAv=txPhr901PwrOutAv, txArExcAutomaticMode=txArExcAutomaticMode, rsXx9TxMibModule=rsXx9TxMibModule, txExcCmdLoopControl=txExcCmdLoopControl, txActiveReserveExcAutoSwitchedOver=txActiveReserveExcAutoSwitchedOver, txInpAutoForceExciterChangeover=txInpAutoForceExciterChangeover, txInpIfIpPacketLength=txInpIfIpPacketLength, txInputSatFeedDecryptionServiceTable=txInputSatFeedDecryptionServiceTable, txInputIpFeedTable=txInputIpFeedTable, txTransmitterNotificationName=txTransmitterNotificationName, txSatLnbFreqLowBandLower32=txSatLnbFreqLowBandLower32, txSfnStateMaximumDelay=txSfnStateMaximumDelay, txTsFeedType=txTsFeedType, txOstStateEntry=txOstStateEntry, txSfnNotificationName=txSfnNotificationName, txActiveReserveOstAutoSwitchedOver=txActiveReserveOstAutoSwitchedOver, txFrqRegSetupControllerMode=txFrqRegSetupControllerMode, txIpFeedLinkStatus=txIpFeedLinkStatus, txRfSensorCalibrated=txRfSensorCalibrated, txIpFeedPacketsDuplicate=txIpFeedPacketsDuplicate, txArPreselectOstAOstBtoAnt=txArPreselectOstAOstBtoAnt, txInpAutoSeamlessPossible=txInpAutoSeamlessPossible, txObjsTransmitter=txObjsTransmitter, txAmplifierPmxTable=txAmplifierPmxTable, txPresetStActivePreset=txPresetStActivePreset, txSatIpOutMulticastAddrType=txSatIpOutMulticastAddrType, txTransmitterNotificationTable=txTransmitterNotificationTable, txPmxFreqID=txPmxFreqID, txSwiCoCommandsTable=txSwiCoCommandsTable, txPrecorrNotificationState=txPrecorrNotificationState, txRfSensorsTable=txRfSensorsTable, txSatFeedInputServiceID=txSatFeedInputServiceID, txNotifyExciterAutomatic=txNotifyExciterAutomatic, txInputSatFeedExtrasTable=txInputSatFeedExtrasTable, txObjsNonFM=txObjsNonFM, txSfnNotificationTable=txSfnNotificationTable, txObjsPHx902=txObjsPHx902, txSatTunerSignalType=txSatTunerSignalType, txInpAutoInputFailDelay=txInpAutoInputFailDelay, txSwiCoNotificationState=txSwiCoNotificationState, txArPreselectOstAtoAntOstBtoDl=txArPreselectOstAtoAntOstBtoDl, txInpIfSatStreamTsIdMatch=txInpIfSatStreamTsIdMatch, txPmxFanFail=txPmxFanFail, txSatTunerModulation=txSatTunerModulation, txSatIpOutLocalNetmaskAddrType=txSatIpOutLocalNetmaskAddrType, txObjsDualDrive=txObjsDualDrive, txOstNotificationTable=txOstNotificationTable, txAmpStVReg=txAmpStVReg, txExgineStatus=txExgineStatus, rsXx9TxConformance=rsXx9TxConformance, txSatBtsPliTablePid=txSatBtsPliTablePid, txPrecorrSigQualPapr=txPrecorrSigQualPapr, txAmpStVRefPwr=txAmpStVRefPwr, txObjsInputSatFeed=txObjsInputSatFeed, txTransmitterNotificationMask=txTransmitterNotificationMask, txAmpStRfMonitor=txAmpStRfMonitor, txInpAutoNotificationTable=txInpAutoNotificationTable, txPresetCmdSavePreset1=txPresetCmdSavePreset1, txSatTunerRxPower=txSatTunerRxPower, txFrqRegNotificationExcIdx=txFrqRegNotificationExcIdx, txSatLnbFreqHighBand=txSatLnbFreqHighBand, txSatIpOutMacAddr=txSatIpOutMacAddr, txSatIpOutMulticastAddr=txSatIpOutMulticastAddr, txExcCmdOperationMode=txExcCmdOperationMode, txSatCamTsOutput=txSatCamTsOutput, txExciterCommandsEntry=txExciterCommandsEntry, txFrqRegNotificationMask=txFrqRegNotificationMask, txSwiCoHwLocal=txSwiCoHwLocal, txInpAutoState=txInpAutoState, txAmpStIPre=txAmpStIPre, txAmpAcFail=txAmpAcFail, txPrecorrNonLinStateSignalLevel=txPrecorrNonLinStateSignalLevel, txAmpNotificationTable=txAmpNotificationTable, txInpIfSatTransponderLocked=txInpIfSatTransponderLocked, txNotifyPrecorrection=txNotifyPrecorrection, txObjsSFN1=txObjsSFN1, txSfnSetupStaticDelay=txSfnSetupStaticDelay, txExciterAutomaticReady=txExciterAutomaticReady, txPhr901PwrIn=txPhr901PwrIn, txSatLnbDriftWarnLimit=txSatLnbDriftWarnLimit, txActiveReserveExcAutoRfSwitchSummary=txActiveReserveExcAutoRfSwitchSummary, txExgineMode=txExgineMode, DohertyActive=DohertyActive, txAmpTlxSupplyFail=txAmpTlxSupplyFail, txPrecorrNonLinSetupEntry=txPrecorrNonLinSetupEntry, txInpIfSatLinkMarginStatus=txInpIfSatLinkMarginStatus, txAmpStPwrA=txAmpStPwrA, txPrecorrNotificationEntry=txPrecorrNotificationEntry, txAmplifierPmxEntry=txAmplifierPmxEntry, txObjsPMV901=txObjsPMV901, txFrqRegStateCurrentSource=txFrqRegStateCurrentSource, txSatFeedInputServicePmtPid=txSatFeedInputServicePmtPid, txSwiCoStPosDegree=txSwiCoStPosDegree, txAmpStI2A=txAmpStI2A, txExciterSummary=txExciterSummary, txInpIfSatIpOutput=txInpIfSatIpOutput, txAmpNotificationIdx=txAmpNotificationIdx, txOstSummary=txOstSummary, txObjsNonAnalog=txObjsNonAnalog, txObjsRfSensors=txObjsRfSensors, txAmpNotificationAmpIdx=txAmpNotificationAmpIdx, txRfSensorLinkStatus=txRfSensorLinkStatus, txRfLimitReflectedVswrWarn=txRfLimitReflectedVswrWarn, txSatIpOutFecCol=txSatIpOutFecCol, txExciterOutputConnect=txExciterOutputConnect, txInputSatFeedCamTable=txInputSatFeedCamTable, txPrecorrLinSetupOpMode=txPrecorrLinSetupOpMode, txTransCmdReserveOpMode=txTransCmdReserveOpMode, txInpGsInputSource=txInpGsInputSource, txRfSensorsNotificationIdx=txRfSensorsNotificationIdx, txSatLnbFreqHighBandUpper32=txSatLnbFreqHighBandUpper32, txPrecorrLinSetupEquipmentSlope=txPrecorrLinSetupEquipmentSlope, txIpFeedPacketsMissing=txIpFeedPacketsMissing, txSatFeedInputServiceEncrypted=txSatFeedInputServiceEncrypted, txRfStReflected=txRfStReflected, txPrecorrNotificationMask=txPrecorrNotificationMask, txPrecorrNonLinStateTable=txPrecorrNonLinStateTable, txSatTunerMeasuredTsDatarate=txSatTunerMeasuredTsDatarate, txSatCamBissInjectedId=txSatCamBissInjectedId, txRfSensorsNotificationTable=txRfSensorsNotificationTable)
mibBuilder.exportSymbols("RS-XX9-TX-MIB", txExciterRfState=txExciterRfState, txPrecorrLinStateStatus=txPrecorrLinStateStatus, txExciterStateTable=txExciterStateTable, txPhr901I78=txPhr901I78, txObjsPMx=txObjsPMx, txPrecorrNonLinStateShoulderRight=txPrecorrNonLinStateShoulderRight, txSatTunerTsSymbolRate=txSatTunerTsSymbolRate, txFrqRegNotificationState=txFrqRegNotificationState, txSwiCoStateEntry=txSwiCoStateEntry, txInpAutoFailDetection=txInpAutoFailDetection, txInpAutoSeamlessOpMode=txInpAutoSeamlessOpMode, PYSNMP_MODULE_ID=rsXx9TxMibModule, txPrecorrectionCfrEntry=txPrecorrectionCfrEntry, txPrecorrLinStateExcIdx=txPrecorrLinStateExcIdx, txNotifySwitchlessCombiner=txNotifySwitchlessCombiner, txRfSensorsNotificationEntry=txRfSensorsNotificationEntry, txObjsInputAutomatic=txObjsInputAutomatic, txSwiCoStPosGraded=txSwiCoStPosGraded, txInpIfSatInputState=txInpIfSatInputState, txAmpOn=txAmpOn, txObjsPMU905=txObjsPMU905, txAmpStV12Mon=txAmpStV12Mon, txInputSatFeedGeneralTable=txInputSatFeedGeneralTable, txAmpStV3V5=txAmpStV3V5, txTransStReflectedPower=txTransStReflectedPower, txNotifyInputSatFeed=txNotifyInputSatFeed, txInpAutoConfigurationEntry=txInpAutoConfigurationEntry, txPrecorrSigQualMer=txPrecorrSigQualMer, txSatLnbFreqLowBandUpper32=txSatLnbFreqLowBandUpper32, txPmxFrequencyFail=txPmxFrequencyFail, txSatTunerTransponderFreqLower32=txSatTunerTransponderFreqLower32, txSfnStateDynamicDelay=txSfnStateDynamicDelay, txPresetCommandsEntry=txPresetCommandsEntry, txExciterAutomaticMode=txExciterAutomaticMode, txPrecorrection=txPrecorrection, txSatCamManufacturerName=txSatCamManufacturerName, txSwiCoNotificationMask=txSwiCoNotificationMask, txActiveReserveOstAutoSummary=txActiveReserveOstAutoSummary, txInputSatFeedLnbEntry=txInputSatFeedLnbEntry, txSatBtsRegionalization=txSatBtsRegionalization, txSfnSetupMaxDeviation=txSfnSetupMaxDeviation, txArExcAutomaticOperationMode=txArExcAutomaticOperationMode, txSatBtsNullPacketLcPid=txSatBtsNullPacketLcPid, txOstStateRfOnHours=txOstStateRfOnHours, txInpIfSatInfoPacket=txInpIfSatInfoPacket, txSatCamResetMode=txSatCamResetMode, txAmpRfPowerFail=txAmpRfPowerFail, txArOstAutomaticOperationMode=txArOstAutomaticOperationMode, txOstNotificationState=txOstNotificationState, txInputInterfaces=txInputInterfaces, txPmxInletAirTemperature=txPmxInletAirTemperature, txInpIfIpInfoPacket=txInpIfIpInfoPacket, txInpIfNotificationEntry=txInpIfNotificationEntry, txPrecorrLinSetupAmplitudeRippleLimit=txPrecorrLinSetupAmplitudeRippleLimit, txRfLimitForwardFail=txRfLimitForwardFail, txInpGsMultiplexName=txInpGsMultiplexName, txIpFeedPacketsOutOfRange=txIpFeedPacketsOutOfRange, txTransStPrimaryModMode=txTransStPrimaryModMode, txPrecorrLinSetupTable=txPrecorrLinSetupTable, txRfLimitForwardPercentFailLower=txRfLimitForwardPercentFailLower, txSatTunerSymbolRate=txSatTunerSymbolRate, txSatTunerCoderate=txSatTunerCoderate, txSatLnbFreqHighBandLower32=txSatLnbFreqHighBandLower32, txPrecorrLinSetupEntry=txPrecorrLinSetupEntry, txExgineE2xInput=txExgineE2xInput, txPmxFreqIDString=txPmxFreqIDString, txPrecorrNonLinStateTxIdx=txPrecorrNonLinStateTxIdx, txInpIfNotificationExcIdx=txInpIfNotificationExcIdx, txRfLimitForwardPercentWarnUpper=txRfLimitForwardPercentWarnUpper, txAmpStV5Acb=txAmpStV5Acb, txExciterAutomaticEntry=txExciterAutomaticEntry, txNotifyLinPrecorrection=txNotifyLinPrecorrection, txInputSatFeedIpOutputTable=txInputSatFeedIpOutputTable, txSwiCoCmdAutomatic=txSwiCoCmdAutomatic, txInpIfSatPacketLength=txInpIfSatPacketLength, txFrqRegSetupEntry=txFrqRegSetupEntry, txSfnSetupTable=txSfnSetupTable, txOstNotificationName=txOstNotificationName, txPresetCmdSavePreset2=txPresetCmdSavePreset2, txAmpNotificationOstIdx=txAmpNotificationOstIdx, txSatGeneralAsiOutput=txSatGeneralAsiOutput, txPhr901PwrB=txPhr901PwrB, txSfnStateTable=txSfnStateTable, txInpIfNotificationMask=txInpIfNotificationMask, txPrecorrNotificationPriority=txPrecorrNotificationPriority, txSfnNotificationExcIdx=txSfnNotificationExcIdx, txObjsActiveReserve=txObjsActiveReserve, txSatPlScrambling=txSatPlScrambling, txFrqRegNotificationTable=txFrqRegNotificationTable, txObjsNonLinPrecorrection=txObjsNonLinPrecorrection, txArExcPreselected=txArExcPreselected, txInpAutoPreferredInput=txInpAutoPreferredInput, txObjsPrecorrectionCfr=txObjsPrecorrectionCfr, txInpIfSatCarrierNoiseStatus=txInpIfSatCarrierNoiseStatus, txPrecorrSigQualMerWarnLimit=txPrecorrSigQualMerWarnLimit, txSatTunerIntermediateFreq=txSatTunerIntermediateFreq, txRfSensors=txRfSensors, txTransStSecondaryModMode=txTransStSecondaryModMode, txSfnStateInternalPpsValid=txSfnStateInternalPpsValid, txTransCmdReflectionCheck=txTransCmdReflectionCheck, txSatCodeLoop=txSatCodeLoop, txSatTunerTransponderFreq=txSatTunerTransponderFreq, txAmpInitFail=txAmpInitFail, txSatTunerCarrierNoiseFaultLimit=txSatTunerCarrierNoiseFaultLimit, txAmpStVAuxIn=txAmpStVAuxIn, txObjsPHR901=txObjsPHR901, txPrecorrNotificationTable=txPrecorrNotificationTable, txSfnSummary=txSfnSummary, txSatTunerLinkMarginFaultLimit=txSatTunerLinkMarginFaultLimit, txSwiCoNotificationName=txSwiCoNotificationName, txRfLimitForwardPercentFailUpper=txRfLimitForwardPercentFailUpper, txPresets=txPresets, txSatFeedInputServiceDecryptedAt=txSatFeedInputServiceDecryptedAt, txSatLnbDrift=txSatLnbDrift, txSwiCoStPosPermil=txSwiCoStPosPermil, txAmpRfInFail=txAmpRfInFail, txObjsInputInterfaces=txObjsInputInterfaces, txInputSatFeedDecryptionServiceEntry=txInputSatFeedDecryptionServiceEntry, txSatBtsNullPacketLaPid=txSatBtsNullPacketLaPid, txAmpDcFail=txAmpDcFail, txSfnSetupSFN=txSfnSetupSFN, txInputSatFeedExtrasEntry=txInputSatFeedExtrasEntry, txPrecorrLinStateGroupDelayRippleLimit=txPrecorrLinStateGroupDelayRippleLimit, txInpAutoNotificationExcIdx=txInpAutoNotificationExcIdx, txSummary=txSummary, rsXx9TxCompliances=rsXx9TxCompliances, txObjsAmplifier=txObjsAmplifier, txPrecorrectionCfrTable=txPrecorrectionCfrTable, txInpAutoNotificationIdx=txInpAutoNotificationIdx, txExciterAutomaticTable=txExciterAutomaticTable, txExciterNotificationMask=txExciterNotificationMask, txSatPlsCode3=txSatPlsCode3, txPrecorrNotificationName=txPrecorrNotificationName, txInputSatFeedBtsEntry=txInputSatFeedBtsEntry, txSatLnbVoltage=txSatLnbVoltage, txSwiCoNotificationPriority=txSwiCoNotificationPriority, txAmpStIDc=txAmpStIDc, txRfStForwardPercent=txRfStForwardPercent, txRfStReflectedVswr=txRfStReflectedVswr, txSatLnbFreqLowBand=txSatLnbFreqLowBand, txSatPlsCode=txSatPlsCode, txSfnNotificationState=txSfnNotificationState, txSwiCoRcbFail=txSwiCoRcbFail, txSatCamBissClearSession=txSatCamBissClearSession, txPrecorrNotificationExcIdx=txPrecorrNotificationExcIdx, txFrqRegStateEntry=txFrqRegStateEntry, txPmxvRefPowerMax=txPmxvRefPowerMax, txAmpStI3A=txAmpStI3A, txFrqRegSetupMuteOnFail=txFrqRegSetupMuteOnFail, txPrecorrLinSetupGroupDelayRippleLimit=txPrecorrLinSetupGroupDelayRippleLimit, txExciterAutomaticSummary=txExciterAutomaticSummary, txExciterMute=txExciterMute, txPresetCmdSavePreset4=txPresetCmdSavePreset4, txReflection=txReflection, txAmpRegulationFail=txAmpRegulationFail, txTransCmdNominalPower=txTransCmdNominalPower, txArOstAutomaticMode=txArOstAutomaticMode, txIpFeedPacketsReordered=txIpFeedPacketsReordered, txNotifyRfSensors=txNotifyRfSensors, txActiveReserveExcAutoOn=txActiveReserveExcAutoOn, txPrecorrCfrEnable=txPrecorrCfrEnable, txSatFeedDecryptionServiceIdx=txSatFeedDecryptionServiceIdx, txAmplifierTlxTable=txAmplifierTlxTable, txPrecorrLinStateAmplitudeRippleLimit=txPrecorrLinStateAmplitudeRippleLimit, rsXx9TxGroups=rsXx9TxGroups, txSwiCoHwWarn=txSwiCoHwWarn, txNotifyInputTsFeed=txNotifyInputTsFeed, txSfnStateSFN=txSfnStateSFN, txFrqRegSummary=txFrqRegSummary, txAmpDriverFail=txAmpDriverFail, txRfLimitReflectedVswrFail=txRfLimitReflectedVswrFail, txTransmitterCommandsEntry=txTransmitterCommandsEntry, txInputTsFeedTable=txInputTsFeedTable, txAmpStTemperature=txAmpStTemperature, txFrqRegSetupManualOcxoAdjust=txFrqRegSetupManualOcxoAdjust, txPrecorrNonLinSetupReset=txPrecorrNonLinSetupReset, txPhxDohertyActive=txPhxDohertyActive, txExgineSupply1Status=txExgineSupply1Status, txInputExgineStateTable=txInputExgineStateTable, txPrecorrLinStateGroupDelayRipple=txPrecorrLinStateGroupDelayRipple, txPrecorrNonLinSetupTable=txPrecorrNonLinSetupTable, txSwiCoNotificationTable=txSwiCoNotificationTable, txRfLimitForwardAddUpperWarn=txRfLimitForwardAddUpperWarn, txObjsTransparentTs=txObjsTransparentTs, txObjsPrecorrectionObsoleted=txObjsPrecorrectionObsoleted, txSatCamTsInput=txSatCamTsInput, txAmplifier=txAmplifier, txPhr901ReflOutAv=txPhr901ReflOutAv, txSwitchlessCombiner=txSwitchlessCombiner, txPrecorrSigQualEntry=txPrecorrSigQualEntry, txPmxDohertyActive=txPmxDohertyActive, txAmpNotificationMask=txAmpNotificationMask, txFrequencyRegulation=txFrequencyRegulation, txRfCalibrate=txRfCalibrate, txOstCommandsEntry=txOstCommandsEntry, txInpAutoGuardTimeBack=txInpAutoGuardTimeBack, txObjsPHU901=txObjsPHU901, txPrecorrNotificationIdx=txPrecorrNotificationIdx, txIpFeedStreamProtocol=txIpFeedStreamProtocol, txSatCamScExpirationDate=txSatCamScExpirationDate, txSatMultiStreamStatus=txSatMultiStreamStatus, txAmplifierStateTable=txAmplifierStateTable, txIpFeedPacketsFixed=txIpFeedPacketsFixed, txInpIfLogPacketLength=txInpIfLogPacketLength, txInputSatFeedGeneralEntry=txInputSatFeedGeneralEntry, txPresetCmdLoadPreset3=txPresetCmdLoadPreset3, txFrqRegSetupTable=txFrqRegSetupTable, txSatFeedInputServiceElementaryStreams=txSatFeedInputServiceElementaryStreams, txExciterCommandsTable=txExciterCommandsTable, txAmpBiasFail=txAmpBiasFail, txAmpLink=txAmpLink, txOstNotificationOstIdx=txOstNotificationOstIdx, txExgineSupply2Status=txExgineSupply2Status, txInputIpFeedEntry=txInputIpFeedEntry, txInpIfLogInfoPacket=txInpIfLogInfoPacket, txObjsExciter=txObjsExciter, txInpIfTsPacketLength=txInpIfTsPacketLength, txExcCmdRfSlope=txExcCmdRfSlope, txActiveReserveExcAutoReady=txActiveReserveExcAutoReady, txSwiCoRegulationSummary=txSwiCoRegulationSummary, txSwiCoNotificationIdx=txSwiCoNotificationIdx, txPrecorrNotificationTxIdx=txPrecorrNotificationTxIdx, txArPreselectOstAtoDlOstBtoAnt=txArPreselectOstAtoDlOstBtoAnt, txPrecorrSigQualExcIdx=txPrecorrSigQualExcIdx, txSwiCoNotificationSwiCoIdx=txSwiCoNotificationSwiCoIdx, txExciterStateEntry=txExciterStateEntry, rsXx9TxNotifications=rsXx9TxNotifications, txFrqRegStateTable=txFrqRegStateTable, txPrecorrLinSetupReset=txPrecorrLinSetupReset, txOutputStage=txOutputStage, txTransmitterStateTable=txTransmitterStateTable, txRfCmdForwardFailTimeout=txRfCmdForwardFailTimeout, txPrecorrNonLinStateExcIdx=txPrecorrNonLinStateExcIdx, txExciterNotificationExcIdx=txExciterNotificationExcIdx, txOstCmdDcControl=txOstCmdDcControl, txArExcAutomaticGuardTime=txArExcAutomaticGuardTime, txPrecorrLinStateTable=txPrecorrLinStateTable, txExciterNotificationPriority=txExciterNotificationPriority, txExciterNotificationName=txExciterNotificationName, txObjsSwitchlessCombiner=txObjsSwitchlessCombiner, txSatCamBissMode=txSatCamBissMode, txPhxFreqID=txPhxFreqID, txExciterAutomaticOn=txExciterAutomaticOn, txPrecorrNonLinStateShoulderLeft=txPrecorrNonLinStateShoulderLeft, txSatTunerBitErrorRate=txSatTunerBitErrorRate, txSatCamScInserted=txSatCamScInserted, txObjsDvbt2=txObjsDvbt2, txSwiCoRfProbeFail=txSwiCoRfProbeFail, txActiveReserveExcAutoSummary=txActiveReserveExcAutoSummary, txRfSensorsNotificationSensorIdx=txRfSensorsNotificationSensorIdx, txSatLnbPolarization=txSatLnbPolarization, txNotifyFrequencyRegulation=txNotifyFrequencyRegulation, txSatLnbFreqCBand=txSatLnbFreqCBand, txInpAutoTransparentTs=txInpAutoTransparentTs)
mibBuilder.exportSymbols("RS-XX9-TX-MIB", txFrqRegStateCurrentControllerMode=txFrqRegStateCurrentControllerMode, txSfnNotificationMask=txSfnNotificationMask, txExgineMpxInput=txExgineMpxInput, txSatFeedInputServiceDecryption=txSatFeedInputServiceDecryption, txTransmitter=txTransmitter, txFrqRegSourceExtRef=txFrqRegSourceExtRef, txTransmitterNotificationPriority=txTransmitterNotificationPriority, txNotifyTransmitter=txNotifyTransmitter, txPrecorrMerState=txPrecorrMerState, txInpAutoNotificationEntry=txInpAutoNotificationEntry, txBand2Compliance=txBand2Compliance, txNotifyOutputStage=txNotifyOutputStage, txPresetStProgramSettings=txPresetStProgramSettings, txPresetCmdTxIdx=txPresetCmdTxIdx, txFrqRegSetupRefFailPermissionTime=txFrqRegSetupRefFailPermissionTime, txAmpNotificationName=txAmpNotificationName, txArOstSelected=txArOstSelected, txObjsPreset=txObjsPreset, txInpIfNotificationPriority=txInpIfNotificationPriority, txTransmitterNotificationIdx=txTransmitterNotificationIdx, txObjsPMU901=txObjsPMU901, txSfnStateEntry=txSfnStateEntry, txNotifyNonLinPrecorrection=txNotifyNonLinPrecorrection, txInpAutoDelayInput1To2=txInpAutoDelayInput1To2, txSatLnb22kHzSignal=txSatLnb22kHzSignal, txTransmitterStateEntry=txTransmitterStateEntry, txAmpStI2B=txAmpStI2B, txSatCamScManufacturerName=txSatCamScManufacturerName, txObjsOutputStageNonTlx=txObjsOutputStageNonTlx, txExcAutoPreselectExcA=txExcAutoPreselectExcA, txIpFeedStreamAddress=txIpFeedStreamAddress, txAmpStVPreMon=txAmpStVPreMon, txFrqRegSetupSource=txFrqRegSetupSource, txTransCmdChangeModulation=txTransCmdChangeModulation, txInpMonitorTable=txInpMonitorTable, txPresetCmdLoadPreset1=txPresetCmdLoadPreset1, txExcAutoPreselectExcB=txExcAutoPreselectExcB, txSatStreamExpectedTsId=txSatStreamExpectedTsId, txSatTunerLinkMarginWarnLimit=txSatTunerLinkMarginWarnLimit, txSatLnbFreqCBandLower32=txSatLnbFreqCBandLower32, txPrecorrNonLinSetupOpMode=txPrecorrNonLinSetupOpMode, txPrecorrNonLinSetupSignalLimit=txPrecorrNonLinSetupSignalLimit, txNotifyExciter=txNotifyExciter, txObjsInputExgine=txObjsInputExgine, PrecorrectionState=PrecorrectionState, txExgineSyncInputSrc=txExgineSyncInputSrc, txPrecorrNonLinSetupShoulderDistance=txPrecorrNonLinSetupShoulderDistance, txSwiCoStateTable=txSwiCoStateTable, txExcAutoGuardTime=txExcAutoGuardTime, txSatFeedInputServiceName=txSatFeedInputServiceName, rsXx9TxObjects=rsXx9TxObjects, txIpFeedPacketsTotal=txIpFeedPacketsTotal, txFrqRegNotificationPriority=txFrqRegNotificationPriority, txSwiCoCommandsEntry=txSwiCoCommandsEntry, txObjsInputAutomaticObsoleted=txObjsInputAutomaticObsoleted, txAmpSupplyFail=txAmpSupplyFail, txSfnNotificationTxIdx=txSfnNotificationTxIdx, txRfSensorSummary=txRfSensorSummary, txIpFeedConnector=txIpFeedConnector, txSfnSetupEntry=txSfnSetupEntry, txAmplifierPhr901Table=txAmplifierPhr901Table, txNotifySFN=txNotifySFN, txSwiCoHwLink=txSwiCoHwLink, txActiveReserve=txActiveReserve, txAmpTransistorFail=txAmpTransistorFail, txInpIfNotificationTxIdx=txInpIfNotificationTxIdx, txInpGeneralSetupEntry=txInpGeneralSetupEntry, txInpIfLogDatarateBufferUnderrun=txInpIfLogDatarateBufferUnderrun, txInputSatFeedInputServiceTable=txInputSatFeedInputServiceTable, txInputExgineStateEntry=txInputExgineStateEntry, txSwiCoCmdActivationThreshold=txSwiCoCmdActivationThreshold, txSatPlsSelect=txSatPlsSelect, txAmpStI1A=txAmpStI1A, txRfLimitForwardWarn=txRfLimitForwardWarn, txAmpStI3B=txAmpStI3B, txObjsDigitalHighPower=txObjsDigitalHighPower, txActiveReserveExciterTable=txActiveReserveExciterTable, txInpAutoGuardTimeToReserve=txInpAutoGuardTimeToReserve, txFrqRegSourceExtPPS=txFrqRegSourceExtPPS, txInputSatFeedTunerTable=txInputSatFeedTunerTable, txSfnStateNetworkDelay=txSfnStateNetworkDelay, txRfLimitForwardPercentWarnLower=txRfLimitForwardPercentWarnLower, AutomaticMode=AutomaticMode, txPresetStatusEntry=txPresetStatusEntry, txTransCmdPrgOnAfterSumFault=txTransCmdPrgOnAfterSumFault, txExcCmdFrequency=txExcCmdFrequency, txAmpTlxV12Mon=txAmpTlxV12Mon, txPresetCommandsTable=txPresetCommandsTable, txRF=txRF, txSatFeedInputServiceDecryptionState=txSatFeedInputServiceDecryptionState, txSatFeedInputServiceType=txSatFeedInputServiceType, txRfSensorsNotificationName=txRfSensorsNotificationName, txFrqRegNotificationTxIdx=txFrqRegNotificationTxIdx, txSatTunerSignalStandard=txSatTunerSignalStandard, txInputSatFeedTunerEntry=txInputSatFeedTunerEntry, txSfnNotificationEntry=txSfnNotificationEntry, txActiveReserveOstEntry=txActiveReserveOstEntry, txPmxAirFilterFail=txPmxAirFilterFail, txSatIpOutFecRow=txSatIpOutFecRow, txExciterNotificationState=txExciterNotificationState, txTransStModulationMode=txTransStModulationMode, txInpAutoDetectLostPackets=txInpAutoDetectLostPackets, txSatTunerTransponderFreqUpper32=txSatTunerTransponderFreqUpper32, txInpIfNotificationTable=txInpIfNotificationTable, txSfnStateProcessingTime=txSfnStateProcessingTime, txInputSatFeed=txInputSatFeed, txInpIfSatBtsStatus=txInpIfSatBtsStatus, txRfSensorsEntry=txRfSensorsEntry, txNotifyAmplifierObsoleted=txNotifyAmplifierObsoleted, txExciterAutomaticSwitchedOver=txExciterAutomaticSwitchedOver, txAmpNotificationState=txAmpNotificationState, txSfnNotificationIdx=txSfnNotificationIdx, txPresetCmdLoadPreset2=txPresetCmdLoadPreset2, txExgineSyncInputStatus=txExgineSyncInputStatus, PrecorrectionSignalLevel=PrecorrectionSignalLevel, txPhr901I56=txPhr901I56, txSatCamBissEncryptedSession=txSatCamBissEncryptedSession, txIpFeedStreamPort=txIpFeedStreamPort, txInputTsFeedEntry=txInputTsFeedEntry, txInpAutoNotificationState=txInpAutoNotificationState, txAmpReflection=txAmpReflection, txExcAutoRfSwitchPosition=txExcAutoRfSwitchPosition, txOstNotificationPriority=txOstNotificationPriority, txInpIfIpState=txInpIfIpState, txExcAutoPreselected=txExcAutoPreselected, txAmplifierPhr901Entry=txAmplifierPhr901Entry, txObjsAmplifierObsoleted=txObjsAmplifierObsoleted, txNotifyInputInterfaces=txNotifyInputInterfaces, txOstNotificationEntry=txOstNotificationEntry, txArPreselectOstAOstBtoDl=txArPreselectOstAOstBtoDl, txLocal=txLocal, txExcCmdOutputAttenuation=txExcCmdOutputAttenuation, txSatTunerCarrierNoiseRatio=txSatTunerCarrierNoiseRatio, txSfnStateTotalDelay=txSfnStateTotalDelay, txPrecorrLinStateAmplitudeRipple=txPrecorrLinStateAmplitudeRipple, txSatTunerCarrierNoiseWarnLimit=txSatTunerCarrierNoiseWarnLimit, txAmpSummary=txAmpSummary, txSwiCoStRegulationState=txSwiCoStRegulationState, txInpIfLogState=txInpIfLogState, txSatIpOutLocalIpAddr=txSatIpOutLocalIpAddr, txObjsPMxObsoleted=txObjsPMxObsoleted, txAmpTemperatureFail=txAmpTemperatureFail, txInpMonitorEntry=txInpMonitorEntry, txFrqRegCurrentSource=txFrqRegCurrentSource, txFrqRegStateController=txFrqRegStateController, txInpIfLogDatarateBufferOverflow=txInpIfLogDatarateBufferOverflow, txSfnStateDispatchTime=txSfnStateDispatchTime, txObjsPHxObsoleted=txObjsPHxObsoleted, txPrecorrCfrLevel=txPrecorrCfrLevel, txPrecorrSigQualTable=txPrecorrSigQualTable, txTransmitterNotificationState=txTransmitterNotificationState, txRfLimitForwardAddUpperFail=txRfLimitForwardAddUpperFail, txTransmitterNotificationEntry=txTransmitterNotificationEntry, txAmpBlocking=txAmpBlocking, txSatCamStatus=txSatCamStatus, txRfSensorsNotificationMask=txRfSensorsNotificationMask, txPrecorrNonLinStateStatus=txPrecorrNonLinStateStatus, txSatIpOutLocalNetmask=txSatIpOutLocalNetmask, txFrqRegNotificationIdx=txFrqRegNotificationIdx, txPmxOutletAirTemperature=txPmxOutletAirTemperature, txTsFeedBruttoDataRate=txTsFeedBruttoDataRate, txNotifyInputAutomatic=txNotifyInputAutomatic, txInputSatFeedLnbTable=txInputSatFeedLnbTable, txObjsSFN=txObjsSFN, txInputSatFeedInputServiceEntry=txInputSatFeedInputServiceEntry, txObjsPaTlx=txObjsPaTlx, txInpAutoNotificationTxIdx=txInpAutoNotificationTxIdx, txSatPlsActive=txSatPlsActive, txSfnStatePPS=txSfnStatePPS, txPrecorrLinStateEntry=txPrecorrLinStateEntry, txPrecorrLinStateTxIdx=txPrecorrLinStateTxIdx, txExciter=txExciter, txInputSatFeedBtsTable=txInputSatFeedBtsTable, txPhr901I34=txPhr901I34, txAmplifierStateEntry=txAmplifierStateEntry, txPhr901PwrAbs=txPhr901PwrAbs, txAmpStPwrOut=txAmpStPwrOut, txSatStreamCurrentTsId=txSatStreamCurrentTsId, txPresetCmdSavePreset3=txPresetCmdSavePreset3, txAmpMute=txAmpMute, txOstCommandsTable=txOstCommandsTable, txTransmitterCommandsTable=txTransmitterCommandsTable, txRfIdentify=txRfIdentify, txOstNotificationMask=txOstNotificationMask, txSatFeedDecryptionServiceID=txSatFeedDecryptionServiceID, txSatMultiStreamUsedStreamId=txSatMultiStreamUsedStreamId, txActiveReserveOstTable=txActiveReserveOstTable, txRfSensorsNotificationState=txRfSensorsNotificationState, txArOstPreselected=txArOstPreselected, txFrqRegNotificationEntry=txFrqRegNotificationEntry, txExgineMute=txExgineMute, txExciterAutomaticRfSwitchSummary=txExciterAutomaticRfSwitchSummary, txSatCamInserted=txSatCamInserted, txInpAutoNotificationMask=txInpAutoNotificationMask)
