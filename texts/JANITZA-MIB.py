#
# PySNMP MIB module JANITZA-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/janitza/JANITZA-MIB
# Produced by pysmi-1.1.12 at Wed Jul  3 13:31:34 2024
# On host fv-az693-695 platform Linux version 6.5.0-1022-azure by user runner
# Using Python version 3.10.14 (main, Jun 20 2024, 15:20:03) [GCC 11.4.0]
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
sysUpTime, = mibBuilder.importSymbols("SNMPv2-MIB", "sysUpTime")
MibIdentifier, enterprises, iso, Integer32, Counter32, NotificationType, Gauge32, Unsigned32, ObjectIdentity, TimeTicks, Bits, ModuleIdentity, IpAddress, mib_2, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "enterprises", "iso", "Integer32", "Counter32", "NotificationType", "Gauge32", "Unsigned32", "ObjectIdentity", "TimeTicks", "Bits", "ModuleIdentity", "IpAddress", "mib-2", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
system = MibIdentifier((1, 3, 6, 1, 2, 1, 1))
snmp = MibIdentifier((1, 3, 6, 1, 2, 1, 11))
sysDescr = MibScalar((1, 3, 6, 1, 2, 1, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDescr.setStatus('current')
if mibBuilder.loadTexts: sysDescr.setDescription("A textual description of the entity.  This value should\n            include the full name and version identification of\n            the system's hardware type, software operating-system,\n            and networking software.")
sysObjectID = MibScalar((1, 3, 6, 1, 2, 1, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysObjectID.setStatus('current')
if mibBuilder.loadTexts: sysObjectID.setDescription("The vendor's authoritative identification of the\n            network management subsystem contained in the entity.\n            This value is allocated within the SMI enterprises\n            subtree (1.3.6.1.4.1) and provides an easy and\n            unambiguous means for determining `what kind of box' is\n            being managed.  For example, if vendor `Flintstones,\n            Inc.' was assigned the subtree 1.3.6.1.4.1.424242,\n            it could assign the identifier 1.3.6.1.4.1.424242.1.1\n            to its `Fred Router'.")
sysUpTime = MibScalar((1, 3, 6, 1, 2, 1, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysUpTime.setStatus('current')
if mibBuilder.loadTexts: sysUpTime.setDescription('The time (in hundredths of a second) since the\n            network management portion of the system was last\n            re-initialized.')
sysName = MibScalar((1, 3, 6, 1, 2, 1, 1, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysName.setStatus('current')
if mibBuilder.loadTexts: sysName.setDescription("An administratively-assigned name for this managed\n            node.  By convention, this is the node's fully-qualified\n            domain name.  If the name is unknown, the value is\n            the zero-length string.")
sysLocation = MibScalar((1, 3, 6, 1, 2, 1, 1, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLocation.setStatus('current')
if mibBuilder.loadTexts: sysLocation.setDescription("The physical location of this node (e.g., 'telephone\n            closet, 3rd floor').  If the location is unknown, the\n            value is the zero-length string.")
sysServices = MibScalar((1, 3, 6, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServices.setStatus('current')
if mibBuilder.loadTexts: sysServices.setDescription('A value which indicates the set of services that this\n            entity may potentially offer.  The value is a sum.\n\n            This sum initially takes the value zero. Then, for\n            each layer, L, in the range 1 through 7, that this node\n            performs transactions for, 2 raised to (L - 1) is added\n            to the sum.  For example, a node which performs only\n            routing functions would have a value of 4 (2^(3-1)).\n            In contrast, a node which is a host offering application\n            services would have a value of 72 (2^(4-1) + 2^(7-1)).\n            Note that in the context of the Internet suite of\n            protocols, values should be calculated accordingly:\n\n                 layer      functionality\n                   1        physical (e.g., repeaters)\n                   2        datalink/subnetwork (e.g., bridges)\n                   3        internet (e.g., supports the IP)\n                   4        end-to-end  (e.g., supports the TCP)\n                   7        applications (e.g., supports the SMTP)\n\n            For systems including OSI protocols, layers 5 and 6\n            may also be counted.')
janitza = MibIdentifier((1, 3, 6, 1, 4, 1, 34278))
rmsPhase = MibIdentifier((1, 3, 6, 1, 4, 1, 34278, 1))
uLN1 = MibScalar((1, 3, 6, 1, 4, 1, 34278, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uLN1.setStatus('mandatory')
if mibBuilder.loadTexts: uLN1.setDescription('Voltage Phase L1 in 100mV')
uLN2 = MibScalar((1, 3, 6, 1, 4, 1, 34278, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uLN2.setStatus('mandatory')
if mibBuilder.loadTexts: uLN2.setDescription('Voltage Phase L2 in 100mV')
uLN3 = MibScalar((1, 3, 6, 1, 4, 1, 34278, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uLN3.setStatus('mandatory')
if mibBuilder.loadTexts: uLN3.setDescription('Voltage Phase L3 in 100mV')
uLN4 = MibScalar((1, 3, 6, 1, 4, 1, 34278, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uLN4.setStatus('mandatory')
if mibBuilder.loadTexts: uLN4.setDescription('Voltage Pahse L4 in 100mV')
uL1L2 = MibScalar((1, 3, 6, 1, 4, 1, 34278, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uL1L2.setStatus('mandatory')
if mibBuilder.loadTexts: uL1L2.setDescription('Voltage Phase L1-L2 in 100mV')
uL2L3 = MibScalar((1, 3, 6, 1, 4, 1, 34278, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uL2L3.setStatus('mandatory')
if mibBuilder.loadTexts: uL2L3.setDescription('Voltage Phase L2-L3 in 100mV')
uL3L1 = MibScalar((1, 3, 6, 1, 4, 1, 34278, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uL3L1.setStatus('mandatory')
if mibBuilder.loadTexts: uL3L1.setDescription('Voltage Phase L3-L1 in 100mV')
iL1 = MibScalar((1, 3, 6, 1, 4, 1, 34278, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iL1.setStatus('mandatory')
if mibBuilder.loadTexts: iL1.setDescription('Current Phase L1  in 1mA')
iL2 = MibScalar((1, 3, 6, 1, 4, 1, 34278, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iL2.setStatus('mandatory')
if mibBuilder.loadTexts: iL2.setDescription('Current Phase L2  in 1mA')
iL3 = MibScalar((1, 3, 6, 1, 4, 1, 34278, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iL3.setStatus('mandatory')
if mibBuilder.loadTexts: iL3.setDescription('Current Phase L3  in 1mA')
iL4 = MibScalar((1, 3, 6, 1, 4, 1, 34278, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iL4.setStatus('mandatory')
if mibBuilder.loadTexts: iL4.setDescription('Current Phase L4  in 1mA')
pL1 = MibScalar((1, 3, 6, 1, 4, 1, 34278, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pL1.setStatus('mandatory')
if mibBuilder.loadTexts: pL1.setDescription('Real Power L1  in Watt')
pL2 = MibScalar((1, 3, 6, 1, 4, 1, 34278, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pL2.setStatus('mandatory')
if mibBuilder.loadTexts: pL2.setDescription('Real Power L2  in Watt')
pL3 = MibScalar((1, 3, 6, 1, 4, 1, 34278, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pL3.setStatus('mandatory')
if mibBuilder.loadTexts: pL3.setDescription('Real Power L3  in Watt')
pL4 = MibScalar((1, 3, 6, 1, 4, 1, 34278, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pL4.setStatus('mandatory')
if mibBuilder.loadTexts: pL4.setDescription('Real Power L4  in Watt')
qL1 = MibScalar((1, 3, 6, 1, 4, 1, 34278, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qL1.setStatus('mandatory')
if mibBuilder.loadTexts: qL1.setDescription('Reaktiv Power L1  in VAr')
qL2 = MibScalar((1, 3, 6, 1, 4, 1, 34278, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qL2.setStatus('mandatory')
if mibBuilder.loadTexts: qL2.setDescription('Reaktiv Power L2  in VAr')
qL3 = MibScalar((1, 3, 6, 1, 4, 1, 34278, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qL3.setStatus('mandatory')
if mibBuilder.loadTexts: qL3.setDescription('Reaktiv Power L3  in VAr')
qL4 = MibScalar((1, 3, 6, 1, 4, 1, 34278, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qL4.setStatus('mandatory')
if mibBuilder.loadTexts: qL4.setDescription('Reaktiv Power L4  in VAr')
sL1 = MibScalar((1, 3, 6, 1, 4, 1, 34278, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sL1.setStatus('mandatory')
if mibBuilder.loadTexts: sL1.setDescription('Power L1  in VA')
sL2 = MibScalar((1, 3, 6, 1, 4, 1, 34278, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sL2.setStatus('mandatory')
if mibBuilder.loadTexts: sL2.setDescription('Power L2  in VA')
sL3 = MibScalar((1, 3, 6, 1, 4, 1, 34278, 1, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sL3.setStatus('mandatory')
if mibBuilder.loadTexts: sL3.setDescription('Power L3  in VA')
sL4 = MibScalar((1, 3, 6, 1, 4, 1, 34278, 1, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sL4.setStatus('mandatory')
if mibBuilder.loadTexts: sL4.setDescription('Power L4  in VA')
cosPL1 = MibScalar((1, 3, 6, 1, 4, 1, 34278, 1, 24), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cosPL1.setStatus('mandatory')
if mibBuilder.loadTexts: cosPL1.setDescription('Cos(Phi) L1 * 0.001')
cosPL2 = MibScalar((1, 3, 6, 1, 4, 1, 34278, 1, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cosPL2.setStatus('mandatory')
if mibBuilder.loadTexts: cosPL2.setDescription('Cos(Phi) L2 * 0.001')
cosPL3 = MibScalar((1, 3, 6, 1, 4, 1, 34278, 1, 26), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cosPL3.setStatus('mandatory')
if mibBuilder.loadTexts: cosPL3.setDescription('Cos(Phi) L3 * 0.001')
cosPL4 = MibScalar((1, 3, 6, 1, 4, 1, 34278, 1, 27), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cosPL4.setStatus('mandatory')
if mibBuilder.loadTexts: cosPL4.setDescription('Cos(Phi) L4 * 0.001')
rmsSumme3 = MibIdentifier((1, 3, 6, 1, 4, 1, 34278, 2))
p3 = MibScalar((1, 3, 6, 1, 4, 1, 34278, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: p3.setStatus('mandatory')
if mibBuilder.loadTexts: p3.setDescription('Real Power Summe L1..L3  in Watt')
q3 = MibScalar((1, 3, 6, 1, 4, 1, 34278, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: q3.setStatus('mandatory')
if mibBuilder.loadTexts: q3.setDescription('Reaktiv Power Summe L1..L3  in Watt')
s3 = MibScalar((1, 3, 6, 1, 4, 1, 34278, 2, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s3.setStatus('mandatory')
if mibBuilder.loadTexts: s3.setDescription('Power Summe L1..L3  in Watt')
cosP3 = MibScalar((1, 3, 6, 1, 4, 1, 34278, 2, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cosP3.setStatus('mandatory')
if mibBuilder.loadTexts: cosP3.setDescription('COS(Phi) Summe L1..L3  *0.001')
rmsSumme4 = MibIdentifier((1, 3, 6, 1, 4, 1, 34278, 3))
p4 = MibScalar((1, 3, 6, 1, 4, 1, 34278, 3, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: p4.setStatus('mandatory')
if mibBuilder.loadTexts: p4.setDescription('Real Power Summe L1..L4  in Watt')
q4 = MibScalar((1, 3, 6, 1, 4, 1, 34278, 3, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: q4.setStatus('mandatory')
if mibBuilder.loadTexts: q4.setDescription('Reaktiv Power Summe L1..L4  in Watt')
s4 = MibScalar((1, 3, 6, 1, 4, 1, 34278, 3, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s4.setStatus('mandatory')
if mibBuilder.loadTexts: s4.setDescription('Power Summe L1..L4  in Watt')
cosP4 = MibScalar((1, 3, 6, 1, 4, 1, 34278, 3, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cosP4.setStatus('mandatory')
if mibBuilder.loadTexts: cosP4.setDescription('COS(Phi) Summe L1..L4  *0.001')
energiePhase = MibIdentifier((1, 3, 6, 1, 4, 1, 34278, 4))
whL1 = MibScalar((1, 3, 6, 1, 4, 1, 34278, 4, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: whL1.setStatus('mandatory')
if mibBuilder.loadTexts: whL1.setDescription('Active Energie  Phase L1 in 0.1 KWh')
whL2 = MibScalar((1, 3, 6, 1, 4, 1, 34278, 4, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: whL2.setStatus('mandatory')
if mibBuilder.loadTexts: whL2.setDescription('Active Energie  Phase L2 in 0.1 KWh')
whL3 = MibScalar((1, 3, 6, 1, 4, 1, 34278, 4, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: whL3.setStatus('mandatory')
if mibBuilder.loadTexts: whL3.setDescription('Active Energie  Phase L3 in 0.1 KWh')
whL4 = MibScalar((1, 3, 6, 1, 4, 1, 34278, 4, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: whL4.setStatus('mandatory')
if mibBuilder.loadTexts: whL4.setDescription('Active Energie  Phase L4 in 0.1 KWh')
qhL1 = MibScalar((1, 3, 6, 1, 4, 1, 34278, 4, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qhL1.setStatus('mandatory')
if mibBuilder.loadTexts: qhL1.setDescription('Reaktive Energie  Phase L1 in 0.1 KVArh')
qhL2 = MibScalar((1, 3, 6, 1, 4, 1, 34278, 4, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qhL2.setStatus('mandatory')
if mibBuilder.loadTexts: qhL2.setDescription('Reaktive Energie  Phase L2 in 0.1 KVArh')
qhL3 = MibScalar((1, 3, 6, 1, 4, 1, 34278, 4, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qhL3.setStatus('mandatory')
if mibBuilder.loadTexts: qhL3.setDescription('Reaktive Energie  Phase L3 in 0.1 KVArh')
qhL4 = MibScalar((1, 3, 6, 1, 4, 1, 34278, 4, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qhL4.setStatus('mandatory')
if mibBuilder.loadTexts: qhL4.setDescription('Reaktive Energie  Phase L4 in 0.1 KVArh')
energieSumme3 = MibIdentifier((1, 3, 6, 1, 4, 1, 34278, 5))
wh3 = MibScalar((1, 3, 6, 1, 4, 1, 34278, 5, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wh3.setStatus('mandatory')
if mibBuilder.loadTexts: wh3.setDescription('Active Energie  Summe L1..L3 in 0.1 KWh')
qh3 = MibScalar((1, 3, 6, 1, 4, 1, 34278, 5, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qh3.setStatus('mandatory')
if mibBuilder.loadTexts: qh3.setDescription('Reaktive Energie  Summe L1..L3 in 0.1 KWh')
energieSumme4 = MibIdentifier((1, 3, 6, 1, 4, 1, 34278, 6))
wh4 = MibScalar((1, 3, 6, 1, 4, 1, 34278, 6, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wh4.setStatus('mandatory')
if mibBuilder.loadTexts: wh4.setDescription('Active Energie  Summe L1..L4 in 0.1 KWh')
qh4 = MibScalar((1, 3, 6, 1, 4, 1, 34278, 6, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qh4.setStatus('mandatory')
if mibBuilder.loadTexts: qh4.setDescription('Reaktive Energie  Summe L1..L4 in 0.1 KWh')
thd = MibIdentifier((1, 3, 6, 1, 4, 1, 34278, 7))
thdULN1 = MibScalar((1, 3, 6, 1, 4, 1, 34278, 7, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thdULN1.setStatus('mandatory')
if mibBuilder.loadTexts: thdULN1.setDescription('Total Harmonic Distortion Voltage Phase L1 * 0.1%')
thdULN2 = MibScalar((1, 3, 6, 1, 4, 1, 34278, 7, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thdULN2.setStatus('mandatory')
if mibBuilder.loadTexts: thdULN2.setDescription('Total Harmonic Distortion Voltage Phase L2 * 0.1%')
thdULN3 = MibScalar((1, 3, 6, 1, 4, 1, 34278, 7, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thdULN3.setStatus('mandatory')
if mibBuilder.loadTexts: thdULN3.setDescription('Total Harmonic Distortion Voltage Phase L3 * 0.1%')
thdULN4 = MibScalar((1, 3, 6, 1, 4, 1, 34278, 7, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thdULN4.setStatus('mandatory')
if mibBuilder.loadTexts: thdULN4.setDescription('Total Harmonic Distortion Voltage Phase L4 * 0.1%')
thdIL1 = MibScalar((1, 3, 6, 1, 4, 1, 34278, 7, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thdIL1.setStatus('mandatory')
if mibBuilder.loadTexts: thdIL1.setDescription('Total Harmonic Distortion Current Phase L1 * 0.1%')
thdIL2 = MibScalar((1, 3, 6, 1, 4, 1, 34278, 7, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thdIL2.setStatus('mandatory')
if mibBuilder.loadTexts: thdIL2.setDescription('Total Harmonic Distortion Current Phase L2 * 0.1%')
thdIL3 = MibScalar((1, 3, 6, 1, 4, 1, 34278, 7, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thdIL3.setStatus('mandatory')
if mibBuilder.loadTexts: thdIL3.setDescription('Total Harmonic Distortion Current Phase L3 * 0.1%')
thdIL4 = MibScalar((1, 3, 6, 1, 4, 1, 34278, 7, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thdIL4.setStatus('mandatory')
if mibBuilder.loadTexts: thdIL4.setDescription('Total Harmonic Distortion Current Phase L4 * 0.1%')
misc = MibIdentifier((1, 3, 6, 1, 4, 1, 34278, 8))
frequenz = MibScalar((1, 3, 6, 1, 4, 1, 34278, 8, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frequenz.setStatus('mandatory')
if mibBuilder.loadTexts: frequenz.setDescription('Frequenz* 0.01 Hz')
user = MibIdentifier((1, 3, 6, 1, 4, 1, 34278, 9))
jasicVAR1 = MibScalar((1, 3, 6, 1, 4, 1, 34278, 9, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jasicVAR1.setStatus('mandatory')
if mibBuilder.loadTexts: jasicVAR1.setDescription('Jasic User Variable  to user for Jasic :_snmp_uservar[0]')
jasicVAR2 = MibScalar((1, 3, 6, 1, 4, 1, 34278, 9, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jasicVAR2.setStatus('mandatory')
if mibBuilder.loadTexts: jasicVAR2.setDescription('Jasic User Variable  to user for Jasic :_snmp_uservar[1]')
jasicVAR3 = MibScalar((1, 3, 6, 1, 4, 1, 34278, 9, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jasicVAR3.setStatus('mandatory')
if mibBuilder.loadTexts: jasicVAR3.setDescription('Jasic User Variable  to user for Jasic :_snmp_uservar[2]')
jasicVAR4 = MibScalar((1, 3, 6, 1, 4, 1, 34278, 9, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jasicVAR4.setStatus('mandatory')
if mibBuilder.loadTexts: jasicVAR4.setDescription('Jasic User Variable  to user for Jasic :_snmp_uservar[3]')
jasicVAR5 = MibScalar((1, 3, 6, 1, 4, 1, 34278, 9, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jasicVAR5.setStatus('mandatory')
if mibBuilder.loadTexts: jasicVAR5.setDescription('Jasic User Variable  to user for Jasic :_snmp_uservar[4]')
jasicVAR6 = MibScalar((1, 3, 6, 1, 4, 1, 34278, 9, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jasicVAR6.setStatus('mandatory')
if mibBuilder.loadTexts: jasicVAR6.setDescription('Jasic User Variable  to user for Jasic :_snmp_uservar[5]')
jasicVAR7 = MibScalar((1, 3, 6, 1, 4, 1, 34278, 9, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jasicVAR7.setStatus('mandatory')
if mibBuilder.loadTexts: jasicVAR7.setDescription('Jasic User Variable  to user for Jasic :_snmp_uservar[6]')
jasicVAR8 = MibScalar((1, 3, 6, 1, 4, 1, 34278, 9, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jasicVAR8.setStatus('mandatory')
if mibBuilder.loadTexts: jasicVAR8.setDescription('Jasic User Variable  to user for Jasic :_snmp_uservar[7]')
jasicVAR9 = MibScalar((1, 3, 6, 1, 4, 1, 34278, 9, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jasicVAR9.setStatus('mandatory')
if mibBuilder.loadTexts: jasicVAR9.setDescription('Jasic User Variable  to user for Jasic :_snmp_uservar[8]')
jasicVAR10 = MibScalar((1, 3, 6, 1, 4, 1, 34278, 9, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jasicVAR10.setStatus('mandatory')
if mibBuilder.loadTexts: jasicVAR10.setDescription('Jasic User Variable  to user for Jasic :_snmp_uservar[9]')
jasicVAR11 = MibScalar((1, 3, 6, 1, 4, 1, 34278, 9, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jasicVAR11.setStatus('mandatory')
if mibBuilder.loadTexts: jasicVAR11.setDescription('Jasic User Variable  to user for Jasic :_snmp_uservar[10]')
jasicVAR12 = MibScalar((1, 3, 6, 1, 4, 1, 34278, 9, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jasicVAR12.setStatus('mandatory')
if mibBuilder.loadTexts: jasicVAR12.setDescription('Jasic User Variable  to user for Jasic :_snmp_uservar[11]')
jasicVAR13 = MibScalar((1, 3, 6, 1, 4, 1, 34278, 9, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jasicVAR13.setStatus('mandatory')
if mibBuilder.loadTexts: jasicVAR13.setDescription('Jasic User Variable  to user for Jasic :_snmp_uservar[12]')
jasicVAR14 = MibScalar((1, 3, 6, 1, 4, 1, 34278, 9, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jasicVAR14.setStatus('mandatory')
if mibBuilder.loadTexts: jasicVAR14.setDescription('Jasic User Variable  to user for Jasic :_snmp_uservar[13]')
jasicVAR15 = MibScalar((1, 3, 6, 1, 4, 1, 34278, 9, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jasicVAR15.setStatus('mandatory')
if mibBuilder.loadTexts: jasicVAR15.setDescription('Jasic User Variable  to user for Jasic :_snmp_uservar[14]')
jasicVAR16 = MibScalar((1, 3, 6, 1, 4, 1, 34278, 9, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jasicVAR16.setStatus('mandatory')
if mibBuilder.loadTexts: jasicVAR16.setDescription('Jasic User Variable  to user for Jasic :_snmp_uservar[15]')
coldStart = NotificationType((1, 3, 6, 1, 2, 1, 11) + (0,0))
if mibBuilder.loadTexts: coldStart.setDescription("A coldStart trap signifies that the sending\n                          protocol entity is reinitializing itself such\n                          that the agent's configuration or the rotocol\n                          entity implementation may be altered.")
warmStart = NotificationType((1, 3, 6, 1, 2, 1, 11) + (0,1))
if mibBuilder.loadTexts: warmStart.setDescription('A warmStart trap signifies that the sending\n                          protocol entity is reinitializing itself such\n                          that neither the agent configuration nor the\n                          protocol entity implementation is altered.')
userTrap1 = NotificationType((1, 3, 6, 1, 4, 1, 34278) + (0,6))
if mibBuilder.loadTexts: userTrap1.setDescription('Jasic Trap  : use type=6 , subtype = 6')
userTrap2 = NotificationType((1, 3, 6, 1, 4, 1, 34278) + (0,7))
if mibBuilder.loadTexts: userTrap2.setDescription('Jasic Trap  : use type=6 , subtype = 7')
userTrap3 = NotificationType((1, 3, 6, 1, 4, 1, 34278) + (0,8))
if mibBuilder.loadTexts: userTrap3.setDescription('Jasic Trap  : use type=6 , subtype = 8')
userTrap4 = NotificationType((1, 3, 6, 1, 4, 1, 34278) + (0,9))
if mibBuilder.loadTexts: userTrap4.setDescription('Jasic Trap  : use type=6 , subtype = 9')
userTrap5 = NotificationType((1, 3, 6, 1, 4, 1, 34278) + (0,10))
if mibBuilder.loadTexts: userTrap5.setDescription('Jasic Trap  : use type=6 , subtype = 10')
userTrap6 = NotificationType((1, 3, 6, 1, 4, 1, 34278) + (0,11))
if mibBuilder.loadTexts: userTrap6.setDescription('Jasic Trap  : use type=6 , subtype = 11')
userTrap7 = NotificationType((1, 3, 6, 1, 4, 1, 34278) + (0,12))
if mibBuilder.loadTexts: userTrap7.setDescription('Jasic Trap  : use type=6 , subtype = 12')
userTrap8 = NotificationType((1, 3, 6, 1, 4, 1, 34278) + (0,13))
if mibBuilder.loadTexts: userTrap8.setDescription('Jasic Trap  : use type=6 , subtype = 13')
userTrap9 = NotificationType((1, 3, 6, 1, 4, 1, 34278) + (0,14))
if mibBuilder.loadTexts: userTrap9.setDescription('Jasic Trap  : use type=6 , subtype = 14')
userTrap10 = NotificationType((1, 3, 6, 1, 4, 1, 34278) + (0,15))
if mibBuilder.loadTexts: userTrap10.setDescription('Jasic Trap  : use type=6 , subtype = 15')
userTrap11 = NotificationType((1, 3, 6, 1, 4, 1, 34278) + (0,16))
if mibBuilder.loadTexts: userTrap11.setDescription('Jasic Trap  : use type=6 , subtype = 16')
userTrap12 = NotificationType((1, 3, 6, 1, 4, 1, 34278) + (0,17))
if mibBuilder.loadTexts: userTrap12.setDescription('Jasic Trap  : use type=6 , subtype = 17')
userTrap13 = NotificationType((1, 3, 6, 1, 4, 1, 34278) + (0,18))
if mibBuilder.loadTexts: userTrap13.setDescription('Jasic Trap  : use type=6 , subtype = 18')
userTrap14 = NotificationType((1, 3, 6, 1, 4, 1, 34278) + (0,19))
if mibBuilder.loadTexts: userTrap14.setDescription('Jasic Trap  : use type=6 , subtype = 19')
userTrap15 = NotificationType((1, 3, 6, 1, 4, 1, 34278) + (0,20))
if mibBuilder.loadTexts: userTrap15.setDescription('Jasic Trap  : use type=6 , subtype = 20')
userTrap16 = NotificationType((1, 3, 6, 1, 4, 1, 34278) + (0,21))
if mibBuilder.loadTexts: userTrap16.setDescription('Jasic Trap  : use type=6 , subtype = 21')
mibBuilder.exportSymbols("JANITZA-MIB", userTrap16=userTrap16, p4=p4, cosPL1=cosPL1, jasicVAR11=jasicVAR11, userTrap10=userTrap10, system=system, sysServices=sysServices, cosP4=cosP4, thdIL3=thdIL3, jasicVAR12=jasicVAR12, qL2=qL2, whL2=whL2, frequenz=frequenz, userTrap2=userTrap2, uLN1=uLN1, jasicVAR2=jasicVAR2, userTrap4=userTrap4, q4=q4, uL1L2=uL1L2, qhL2=qhL2, jasicVAR14=jasicVAR14, jasicVAR8=jasicVAR8, userTrap6=userTrap6, iL3=iL3, jasicVAR15=jasicVAR15, s3=s3, whL3=whL3, jasicVAR9=jasicVAR9, q3=q3, thd=thd, janitza=janitza, thdIL4=thdIL4, coldStart=coldStart, thdIL1=thdIL1, snmp=snmp, userTrap14=userTrap14, iL2=iL2, energieSumme3=energieSumme3, qh4=qh4, uLN2=uLN2, sL3=sL3, thdULN3=thdULN3, userTrap12=userTrap12, thdULN1=thdULN1, uLN3=uLN3, userTrap5=userTrap5, qhL4=qhL4, sysName=sysName, pL2=pL2, userTrap8=userTrap8, cosP3=cosP3, sL4=sL4, uLN4=uLN4, qhL1=qhL1, sysLocation=sysLocation, pL4=pL4, jasicVAR16=jasicVAR16, userTrap1=userTrap1, rmsSumme3=rmsSumme3, energieSumme4=energieSumme4, sysUpTime=sysUpTime, jasicVAR1=jasicVAR1, wh3=wh3, cosPL3=cosPL3, sysObjectID=sysObjectID, s4=s4, qL3=qL3, user=user, pL1=pL1, jasicVAR3=jasicVAR3, wh4=wh4, userTrap7=userTrap7, qL4=qL4, uL3L1=uL3L1, qL1=qL1, jasicVAR4=jasicVAR4, uL2L3=uL2L3, userTrap9=userTrap9, cosPL4=cosPL4, qh3=qh3, sysDescr=sysDescr, userTrap11=userTrap11, rmsSumme4=rmsSumme4, thdULN4=thdULN4, jasicVAR6=jasicVAR6, whL4=whL4, cosPL2=cosPL2, jasicVAR13=jasicVAR13, thdIL2=thdIL2, userTrap15=userTrap15, p3=p3, rmsPhase=rmsPhase, userTrap13=userTrap13, jasicVAR5=jasicVAR5, jasicVAR10=jasicVAR10, energiePhase=energiePhase, sL1=sL1, whL1=whL1, sL2=sL2, jasicVAR7=jasicVAR7, iL4=iL4, pL3=pL3, thdULN2=thdULN2, misc=misc, warmStart=warmStart, qhL3=qhL3, iL1=iL1, userTrap3=userTrap3)
