#
# PySNMP MIB module GAMATRONIC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/gamatronic/GAMATRONIC-MIB
# Produced by pysmi-1.1.12 at Mon Jun  3 13:08:14 2024
# On host fv-az883-299 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Bits, Unsigned32, Counter64, iso, Integer32, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, enterprises, NotificationType, IpAddress, TimeTicks, Counter32, ModuleIdentity, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Unsigned32", "Counter64", "iso", "Integer32", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "enterprises", "NotificationType", "IpAddress", "TimeTicks", "Counter32", "ModuleIdentity", "MibIdentifier")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
gamatronicLTD = ModuleIdentity((1, 3, 6, 1, 4, 1, 6050))
if mibBuilder.loadTexts: gamatronicLTD.setLastUpdated('0005150000Z')
if mibBuilder.loadTexts: gamatronicLTD.setOrganization(' GAMATRONIC Ltd.')
if mibBuilder.loadTexts: gamatronicLTD.setContactInfo(' \t\t\tAsher Avisar\n              Postal: \n              Tel: \t+972-2-588-8222\n              Fax:     \t+972-2-582-8875\n              E-mail: \taavissar@gamatronic.co.il')
if mibBuilder.loadTexts: gamatronicLTD.setDescription('This is the GAMATRONIC POWER SUPPLY PRIVATE  MIB module')
psMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 6050, 1))
class PsAlarmSeverity(TextualConvention, Integer32):
    description = "The value of this object identifies the severity of an alarm, including 'cleared'."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("critical", 1), ("major", 2), ("minor", 3), ("warning", 4))

psUnit = MibIdentifier((1, 3, 6, 1, 4, 1, 6050, 1, 1))
psBattery = MibIdentifier((1, 3, 6, 1, 4, 1, 6050, 1, 2))
psPSU = MibIdentifier((1, 3, 6, 1, 4, 1, 6050, 1, 3))
psINU = MibIdentifier((1, 3, 6, 1, 4, 1, 6050, 1, 4))
psACInput = MibIdentifier((1, 3, 6, 1, 4, 1, 6050, 1, 5))
psDCOutput = MibIdentifier((1, 3, 6, 1, 4, 1, 6050, 1, 6))
psContuctor = MibIdentifier((1, 3, 6, 1, 4, 1, 6050, 1, 7))
psConfNominal = MibIdentifier((1, 3, 6, 1, 4, 1, 6050, 1, 8))
psStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 6050, 1, 9))
psStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 6050, 1, 10))
psLog = MibIdentifier((1, 3, 6, 1, 4, 1, 6050, 1, 11))
psTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 6050, 1, 12))
psAlarmSet = MibIdentifier((1, 3, 6, 1, 4, 1, 6050, 1, 13))
psSecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 6050, 1, 14))
psCommand = MibIdentifier((1, 3, 6, 1, 4, 1, 6050, 1, 15))
psSeverityMap = MibIdentifier((1, 3, 6, 1, 4, 1, 6050, 1, 16))
psSpare = MibIdentifier((1, 3, 6, 1, 4, 1, 6050, 1, 17))
psDial = MibIdentifier((1, 3, 6, 1, 4, 1, 6050, 1, 18))
psPowerPlus = MibIdentifier((1, 3, 6, 1, 4, 1, 6050, 1, 19))
psBatteryNumber = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psBatteryNumber.setStatus('current')
if mibBuilder.loadTexts: psBatteryNumber.setDescription(' Number of Battery supported ')
psBatteryVoltage = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psBatteryVoltage.setStatus('current')
if mibBuilder.loadTexts: psBatteryVoltage.setDescription('Battery Voltage  present in 0.1V ')
psBatteryTestStatus = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psBatteryTestStatus.setStatus('current')
if mibBuilder.loadTexts: psBatteryTestStatus.setDescription(' The Test status of the battery. Automatically set to 0 when test is completed.')
psBatteryNominalCapacity = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 2, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psBatteryNominalCapacity.setStatus('current')
if mibBuilder.loadTexts: psBatteryNominalCapacity.setDescription(' The Battery Nominal Capacity.')
psBatteryActualCapacity = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psBatteryActualCapacity.setStatus('current')
if mibBuilder.loadTexts: psBatteryActualCapacity.setDescription(' The Battery Actual Capacity.')
psBatteryTestTime = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psBatteryTestTime.setStatus('current')
if mibBuilder.loadTexts: psBatteryTestTime.setDescription(' The Battery Test time in seconds .')
psBatteryLoadTime = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psBatteryLoadTime.setStatus('current')
if mibBuilder.loadTexts: psBatteryLoadTime.setDescription(' The Battery Load time in seconds .')
psBatteryNearestTestMonth = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 2, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psBatteryNearestTestMonth.setStatus('current')
if mibBuilder.loadTexts: psBatteryNearestTestMonth.setDescription(' The Battery nearest Test time - Month .')
psBatteryNearestTestDay = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 2, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psBatteryNearestTestDay.setStatus('current')
if mibBuilder.loadTexts: psBatteryNearestTestDay.setDescription(' The Battery nearest Test time - Day .')
psBatteryNearestTestHour = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 2, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psBatteryNearestTestHour.setStatus('current')
if mibBuilder.loadTexts: psBatteryNearestTestHour.setDescription(' The Battery nearest Test time - Hour.')
psBatteryNearestTestMinute = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 2, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psBatteryNearestTestMinute.setStatus('current')
if mibBuilder.loadTexts: psBatteryNearestTestMinute.setDescription(' The Battery nearest Test time - Minute .')
psBatteryChargeMode = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("floating", 0), ("equalizes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psBatteryChargeMode.setStatus('current')
if mibBuilder.loadTexts: psBatteryChargeMode.setDescription(' The Battery Charge mode  0 = Floating 1 = Equalized ')
psBatteryEqRunTimeHours = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 2, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psBatteryEqRunTimeHours.setStatus('current')
if mibBuilder.loadTexts: psBatteryEqRunTimeHours.setDescription(' Equalizer Run Time Hours ')
psBatteryEqRunTimeMinutes = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 2, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psBatteryEqRunTimeMinutes.setStatus('current')
if mibBuilder.loadTexts: psBatteryEqRunTimeMinutes.setDescription(' Equalizer Run Time Minutes ')
psBatterySpareRead1 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 2, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psBatterySpareRead1.setStatus('current')
if mibBuilder.loadTexts: psBatterySpareRead1.setDescription(' Spare ')
psBatterySpareRead2 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 2, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psBatterySpareRead2.setStatus('current')
if mibBuilder.loadTexts: psBatterySpareRead2.setDescription(' Spare ')
psBatterySpareRead3 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 2, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psBatterySpareRead3.setStatus('current')
if mibBuilder.loadTexts: psBatterySpareRead3.setDescription(' Spare ')
psBatterySpareWrite1 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 2, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psBatterySpareWrite1.setStatus('current')
if mibBuilder.loadTexts: psBatterySpareWrite1.setDescription(' Spare ')
psBatterySpareWrite2 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 2, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psBatterySpareWrite2.setStatus('current')
if mibBuilder.loadTexts: psBatterySpareWrite2.setDescription(' Spare ')
psBatterySpareWrite3 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 2, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psBatterySpareWrite3.setStatus('current')
if mibBuilder.loadTexts: psBatterySpareWrite3.setDescription(' Spare ')
psBatterySpareWrite4 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 2, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psBatterySpareWrite4.setStatus('current')
if mibBuilder.loadTexts: psBatterySpareWrite4.setDescription(' Spare ')
psBatterySpareWrite5 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 2, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psBatterySpareWrite5.setStatus('current')
if mibBuilder.loadTexts: psBatterySpareWrite5.setDescription(' Spare ')
psBatterySpareWrite6 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 2, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psBatterySpareWrite6.setStatus('current')
if mibBuilder.loadTexts: psBatterySpareWrite6.setDescription(' Spare ')
psBatterySpareWrite7 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 2, 24), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psBatterySpareWrite7.setStatus('current')
if mibBuilder.loadTexts: psBatterySpareWrite7.setDescription(' Spare ')
psBatterySpareWrite8 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 2, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psBatterySpareWrite8.setStatus('current')
if mibBuilder.loadTexts: psBatterySpareWrite8.setDescription(' Spare ')
psBatteryTable = MibTable((1, 3, 6, 1, 4, 1, 6050, 1, 2, 26), )
if mibBuilder.loadTexts: psBatteryTable.setStatus('current')
if mibBuilder.loadTexts: psBatteryTable.setDescription('The PS Battery  Information table.')
psBatteryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6050, 1, 2, 26, 1), ).setIndexNames((0, "GAMATRONIC-MIB", "psBatteryIndex"))
if mibBuilder.loadTexts: psBatteryEntry.setStatus('current')
if mibBuilder.loadTexts: psBatteryEntry.setDescription('An entry in this table defines for each Information for each PS. The entry is indexed by the psBatteryIndex. ')
psBatteryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 2, 26, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psBatteryIndex.setStatus('current')
if mibBuilder.loadTexts: psBatteryIndex.setDescription(' The PS table index.')
psBatteryCurrentDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 2, 26, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psBatteryCurrentDirection.setStatus('current')
if mibBuilder.loadTexts: psBatteryCurrentDirection.setDescription('The PS Battery current Direction.  0= Charge. ')
psBatteryCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 2, 26, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psBatteryCurrent.setStatus('current')
if mibBuilder.loadTexts: psBatteryCurrent.setDescription('Battery Current presents in units of 0.1A . ')
psBatteryTemperatureSign = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 2, 26, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("positive", 0), ("negative", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psBatteryTemperatureSign.setStatus('current')
if mibBuilder.loadTexts: psBatteryTemperatureSign.setDescription('Battery Sign of the Temerature- Positive = 0 Negative = 1.')
psBatteryTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 2, 26, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psBatteryTemperature.setStatus('current')
if mibBuilder.loadTexts: psBatteryTemperature.setDescription('Battery Temperature giving in Celsius. ')
psBatteryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 2, 26, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("passed", 0), ("failed", 1), ("low", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psBatteryStatus.setStatus('current')
if mibBuilder.loadTexts: psBatteryStatus.setDescription(' The Status of the Battery 0 = Passed, 1 = Failed 2 = Low.')
psBatteryFuseStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 2, 26, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("bad", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psBatteryFuseStatus.setStatus('current')
if mibBuilder.loadTexts: psBatteryFuseStatus.setDescription(' The status of the battery fuse. 0 = OK, 1 = BAD.')
psBatteryInstalationYear = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 2, 26, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psBatteryInstalationYear.setStatus('current')
if mibBuilder.loadTexts: psBatteryInstalationYear.setDescription(' The Battery Installation date -Year .')
psBatteryInstalationMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 2, 26, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psBatteryInstalationMonth.setStatus('current')
if mibBuilder.loadTexts: psBatteryInstalationMonth.setDescription(' The Battery Installation date -Month .')
psBatteryInstalationDay = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 2, 26, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psBatteryInstalationDay.setStatus('current')
if mibBuilder.loadTexts: psBatteryInstalationDay.setDescription(' The Battery Installation date -Day .')
psPSUNumber = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psPSUNumber.setStatus('current')
if mibBuilder.loadTexts: psPSUNumber.setDescription(' Number of Power Supplies supported ')
psPSUTable = MibTable((1, 3, 6, 1, 4, 1, 6050, 1, 3, 2), )
if mibBuilder.loadTexts: psPSUTable.setStatus('current')
if mibBuilder.loadTexts: psPSUTable.setDescription('The PS Power Supply  Information table.')
psPSUEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6050, 1, 3, 2, 1), ).setIndexNames((0, "GAMATRONIC-MIB", "psPSUIndex"))
if mibBuilder.loadTexts: psPSUEntry.setStatus('current')
if mibBuilder.loadTexts: psPSUEntry.setDescription('An entry in this table defines for each Information for each PS. The entry is indexed by the psPSUIndex. ')
psPSUIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psPSUIndex.setStatus('current')
if mibBuilder.loadTexts: psPSUIndex.setDescription(' The PSU table index.')
psPSUVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psPSUVoltage.setStatus('current')
if mibBuilder.loadTexts: psPSUVoltage.setDescription('PSU Voltage  present in 0.1V ')
psPSUCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psPSUCurrent.setStatus('current')
if mibBuilder.loadTexts: psPSUCurrent.setDescription('PSU Current presents in units of 0.1A . ')
psPSUTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psPSUTemperature.setStatus('current')
if mibBuilder.loadTexts: psPSUTemperature.setDescription('PSU Temperature giving in Celsius. ')
psPSUActivity = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psPSUActivity.setStatus('current')
if mibBuilder.loadTexts: psPSUActivity.setDescription('PSU Activity  0 = off  1= on ')
psPSUPsType = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 3, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psPSUPsType.setStatus('current')
if mibBuilder.loadTexts: psPSUPsType.setDescription('PSU TYPE\n\n01 - HPSu24-100   24V 100A\n02 - HPSu50-50    50V 50A Vertical Construction\n03 - HPSu50-50    50V 50A Horizontal  Construction\n04 - HPSu50-75    50V 75A Vertical Construction\n05 - HPSu50-16    50V 16A Regular\n06 HPSu50-16U   50V 16A Universal ')
psPSUStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 3, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psPSUStatus.setStatus('current')
if mibBuilder.loadTexts: psPSUStatus.setDescription(' PS STATUS  The  next are bits taken from this status ')
psPSUPsOK = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("notok", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psPSUPsOK.setStatus('current')
if mibBuilder.loadTexts: psPSUPsOK.setDescription('Ps Ok status ')
psPSUNotRespond = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 3, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("bad", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psPSUNotRespond.setStatus('current')
if mibBuilder.loadTexts: psPSUNotRespond.setDescription('PSU Not Responding\n ')
psPSUNOOut = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 3, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psPSUNOOut.setStatus('current')
if mibBuilder.loadTexts: psPSUNOOut.setDescription(' PS No Out ')
psPSUPSpareBit = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 3, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("notok", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psPSUPSpareBit.setStatus('current')
if mibBuilder.loadTexts: psPSUPSpareBit.setDescription(' PS Spare Bits ')
psPSUBadSharing = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 3, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("notok", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psPSUBadSharing.setStatus('current')
if mibBuilder.loadTexts: psPSUBadSharing.setDescription(' PS Bad Sharing ')
psPSUReserve1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 3, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psPSUReserve1.setStatus('current')
if mibBuilder.loadTexts: psPSUReserve1.setDescription(' RESERVE ')
psPSUReserve2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 3, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psPSUReserve2.setStatus('current')
if mibBuilder.loadTexts: psPSUReserve2.setDescription(' RESERVE ')
psPSUReserve3 = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 3, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psPSUReserve3.setStatus('current')
if mibBuilder.loadTexts: psPSUReserve3.setDescription(' RESERVE ')
psPSUShutInstruction = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 3, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psPSUShutInstruction.setStatus('current')
if mibBuilder.loadTexts: psPSUShutInstruction.setDescription(' Shut by instruction status ')
psPSUTestStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 3, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notintest", 0), ("inprogress", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psPSUTestStatus.setStatus('current')
if mibBuilder.loadTexts: psPSUTestStatus.setDescription(' Test In progress status 0= not in progress 1 = test in progress ')
psPSUCurrentLimitDecreased = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 3, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psPSUCurrentLimitDecreased.setStatus('current')
if mibBuilder.loadTexts: psPSUCurrentLimitDecreased.setDescription(' Is Current limit decreased due to temperature ')
psPSUACInputOK = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 3, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("notok", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psPSUACInputOK.setStatus('current')
if mibBuilder.loadTexts: psPSUACInputOK.setDescription(' AC  Input status')
psPSUSelfTestPass = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 3, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("notok", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psPSUSelfTestPass.setStatus('current')
if mibBuilder.loadTexts: psPSUSelfTestPass.setDescription(' Self Test status ')
psPSUCurrentLimitExceed = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 3, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psPSUCurrentLimitExceed.setStatus('current')
if mibBuilder.loadTexts: psPSUCurrentLimitExceed.setDescription(' Current limit excedded')
psPSUShutHighTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 3, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psPSUShutHighTemp.setStatus('current')
if mibBuilder.loadTexts: psPSUShutHighTemp.setDescription(' Shut down high temperature')
psPSUShutHighVolt = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 3, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psPSUShutHighVolt.setStatus('current')
if mibBuilder.loadTexts: psPSUShutHighVolt.setDescription(' Shut down high Voltage')
psPSURemoteMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 3, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psPSURemoteMode.setStatus('current')
if mibBuilder.loadTexts: psPSURemoteMode.setDescription(' PS in Remote Mode')
psPSUFloatingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 3, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psPSUFloatingMode.setStatus('current')
if mibBuilder.loadTexts: psPSUFloatingMode.setDescription(' PS in Floating Mode')
psPSUEqualizeMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 3, 2, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psPSUEqualizeMode.setStatus('current')
if mibBuilder.loadTexts: psPSUEqualizeMode.setDescription(' PS in EqualizeMode')
psPSUFanStataus = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 3, 2, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("bad", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psPSUFanStataus.setStatus('current')
if mibBuilder.loadTexts: psPSUFanStataus.setDescription(' PS FAN STATUS')
psPSUIndication = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 3, 2, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3))).clone(namedValues=NamedValues(("pscurrent", 0), ("voltage", 1), ("temperature", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psPSUIndication.setStatus('current')
if mibBuilder.loadTexts: psPSUIndication.setDescription(' PS in EqualizeMode')
psINUNumber = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psINUNumber.setStatus('current')
if mibBuilder.loadTexts: psINUNumber.setDescription(' Number of Power Supplies supported ')
psINUTable = MibTable((1, 3, 6, 1, 4, 1, 6050, 1, 4, 2), )
if mibBuilder.loadTexts: psINUTable.setStatus('current')
if mibBuilder.loadTexts: psINUTable.setDescription('The PS Power Supply  Information table.')
psINUEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6050, 1, 4, 2, 1), ).setIndexNames((0, "GAMATRONIC-MIB", "psINUIndex"))
if mibBuilder.loadTexts: psINUEntry.setStatus('current')
if mibBuilder.loadTexts: psINUEntry.setDescription('An entry in this table defines for each Information for each PS. The entry is indexed by the psINUIndex. ')
psINUIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psINUIndex.setStatus('current')
if mibBuilder.loadTexts: psINUIndex.setDescription(' The INU table index.')
psINUVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 4, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psINUVoltage.setStatus('current')
if mibBuilder.loadTexts: psINUVoltage.setDescription('INU Voltage  present in 0.1V ')
psINUCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 4, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psINUCurrent.setStatus('current')
if mibBuilder.loadTexts: psINUCurrent.setDescription('INU Current presents in units of 0.1A . ')
psINUTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 4, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psINUTemperature.setStatus('current')
if mibBuilder.loadTexts: psINUTemperature.setDescription('INU Temperature giving in Celsius. ')
psINUActivity = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psINUActivity.setStatus('current')
if mibBuilder.loadTexts: psINUActivity.setDescription('INU Activity  0 = off  1= on ')
psINUPsType = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 4, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psINUPsType.setStatus('current')
if mibBuilder.loadTexts: psINUPsType.setDescription('INU TYPE\n\n0xA0\tHPSu50-50 - H\t\n0x91\tHPSu50-16U\t\n0x90\tHPSu50-16\t\n0x85\tINV50-24\t\n0x84\tHPSu50-42\t\n0x83\tHPSu50-100\t\n0x82\tHPSu50-75\t\n0x81\tHPSu50-50\t\n0x80\tHPSu24-100\t\n\n\n ')
psINUStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 4, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psINUStatus.setStatus('current')
if mibBuilder.loadTexts: psINUStatus.setDescription(' PS STATUS  The  next are bits taken from this status ')
psINUPsOK = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 4, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("notok", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psINUPsOK.setStatus('current')
if mibBuilder.loadTexts: psINUPsOK.setDescription('Ps Ok status ')
psINUNotRespond = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 4, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("bad", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psINUNotRespond.setStatus('current')
if mibBuilder.loadTexts: psINUNotRespond.setDescription('INU Not Responding\n ')
psINUNOOut = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 4, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psINUNOOut.setStatus('current')
if mibBuilder.loadTexts: psINUNOOut.setDescription(' INU No Out ')
psINUPSpareBit = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 4, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("notok", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psINUPSpareBit.setStatus('current')
if mibBuilder.loadTexts: psINUPSpareBit.setDescription(' INUSpare Bits ')
psINUBadSharing = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 4, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("notok", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psINUBadSharing.setStatus('current')
if mibBuilder.loadTexts: psINUBadSharing.setDescription(' INU  Bad Sharing ')
psINUReserve1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 4, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psINUReserve1.setStatus('current')
if mibBuilder.loadTexts: psINUReserve1.setDescription(' RESERVE ')
psINUReserve2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 4, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psINUReserve2.setStatus('current')
if mibBuilder.loadTexts: psINUReserve2.setDescription(' RESERVE ')
psINUReserve3 = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 4, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psINUReserve3.setStatus('current')
if mibBuilder.loadTexts: psINUReserve3.setDescription(' RESERVE ')
psINUShutInstruction = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 4, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psINUShutInstruction.setStatus('current')
if mibBuilder.loadTexts: psINUShutInstruction.setDescription(' Shut by instruction status ')
psINUReserve7 = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 4, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psINUReserve7.setStatus('current')
if mibBuilder.loadTexts: psINUReserve7.setDescription(' Reserve ')
psINUCurrentLimitDecreased = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 4, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psINUCurrentLimitDecreased.setStatus('current')
if mibBuilder.loadTexts: psINUCurrentLimitDecreased.setDescription(' Is Current limit decreased due to temperature ')
psINUReserve8 = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 4, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psINUReserve8.setStatus('current')
if mibBuilder.loadTexts: psINUReserve8.setDescription(' Reserve ')
psINUSelfTestPass = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 4, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("notok", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psINUSelfTestPass.setStatus('current')
if mibBuilder.loadTexts: psINUSelfTestPass.setDescription(' Self Test status ')
psINUCurrentLimitExceed = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 4, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psINUCurrentLimitExceed.setStatus('current')
if mibBuilder.loadTexts: psINUCurrentLimitExceed.setDescription(' Current limit excedded')
psINUShutHighTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 4, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psINUShutHighTemp.setStatus('current')
if mibBuilder.loadTexts: psINUShutHighTemp.setDescription(' Shut down high temperature')
psINUShutHighVolt = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 4, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psINUShutHighVolt.setStatus('current')
if mibBuilder.loadTexts: psINUShutHighVolt.setDescription(' Shut down high Voltage')
psINURemoteMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 4, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psINURemoteMode.setStatus('current')
if mibBuilder.loadTexts: psINURemoteMode.setDescription(' PS in Remote Mode')
psINUReserve9 = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 4, 2, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psINUReserve9.setStatus('current')
if mibBuilder.loadTexts: psINUReserve9.setDescription(' Reserve ')
psINUReserve10 = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 4, 2, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psINUReserve10.setStatus('current')
if mibBuilder.loadTexts: psINUReserve10.setDescription(' Reserve ')
psINUFanStataus = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 4, 2, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("bad", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psINUFanStataus.setStatus('current')
if mibBuilder.loadTexts: psINUFanStataus.setDescription(' PS FAN STATUS')
psINUIndication = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 4, 2, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3))).clone(namedValues=NamedValues(("pscurrent", 0), ("voltage", 1), ("temperature", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psINUIndication.setStatus('current')
if mibBuilder.loadTexts: psINUIndication.setDescription(' PS in EqualizeMode')
psACInputVoltage1 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psACInputVoltage1.setStatus('current')
if mibBuilder.loadTexts: psACInputVoltage1.setDescription('ACInput Voltage  present in 0.1V ')
psACInputVoltage2 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psACInputVoltage2.setStatus('current')
if mibBuilder.loadTexts: psACInputVoltage2.setDescription('ACInput Voltage  present in 0.1V ')
psACInputVoltage3 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psACInputVoltage3.setStatus('current')
if mibBuilder.loadTexts: psACInputVoltage3.setDescription('ACInput Voltage  present in 0.1V ')
psACInputCurrent1 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 5, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psACInputCurrent1.setStatus('current')
if mibBuilder.loadTexts: psACInputCurrent1.setDescription('ACInput Current presents in units of 0.1A . ')
psACInputCurrent2 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 5, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psACInputCurrent2.setStatus('current')
if mibBuilder.loadTexts: psACInputCurrent2.setDescription('ACInput Current presents in units of 0.1A . ')
psACInputCurrent3 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 5, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psACInputCurrent3.setStatus('current')
if mibBuilder.loadTexts: psACInputCurrent3.setDescription('ACInput Current presents in units of 0.1A . ')
psACInputFrequency = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 5, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psACInputFrequency.setStatus('current')
if mibBuilder.loadTexts: psACInputFrequency.setDescription('ACInput Frequency giving in 0.01HZ. ')
psACInputACStatus = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 5, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("notok", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psACInputACStatus.setStatus('current')
if mibBuilder.loadTexts: psACInputACStatus.setDescription('ACInput AC Status  0 = OK  1= Not OK ')
psACInputSurgeStatus = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 5, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("notok", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psACInputSurgeStatus.setStatus('current')
if mibBuilder.loadTexts: psACInputSurgeStatus.setDescription(' The Status of the ACInput Surge 0 = OK, 1 = Not OK.')
psACInputSpareInp0 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 5, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psACInputSpareInp0.setStatus('current')
if mibBuilder.loadTexts: psACInputSpareInp0.setDescription(' Spare')
psACInputSpareInp1 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 5, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psACInputSpareInp1.setStatus('current')
if mibBuilder.loadTexts: psACInputSpareInp1.setDescription(' Spare')
psACInputSpareInp2 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 5, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psACInputSpareInp2.setStatus('current')
if mibBuilder.loadTexts: psACInputSpareInp2.setDescription(' Spare')
psACInputSpareInp3 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 5, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psACInputSpareInp3.setStatus('current')
if mibBuilder.loadTexts: psACInputSpareInp3.setDescription(' Spare')
psACInputSpareInp4 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 5, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psACInputSpareInp4.setStatus('current')
if mibBuilder.loadTexts: psACInputSpareInp4.setDescription(' Spare')
psACInputSpareInp5 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 5, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psACInputSpareInp5.setStatus('current')
if mibBuilder.loadTexts: psACInputSpareInp5.setDescription(' Spare')
psACInputSpareInp6 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 5, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psACInputSpareInp6.setStatus('current')
if mibBuilder.loadTexts: psACInputSpareInp6.setDescription(' Spare')
psDCoutputVoltage = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psDCoutputVoltage.setStatus('current')
if mibBuilder.loadTexts: psDCoutputVoltage.setDescription('DCoutput Voltage  present in 0.1V ')
psDCoutputCurrent1 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psDCoutputCurrent1.setStatus('current')
if mibBuilder.loadTexts: psDCoutputCurrent1.setDescription('DCoutput Current presents in units of 0.1A . ')
psDCoutputCurrent2 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 6, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psDCoutputCurrent2.setStatus('current')
if mibBuilder.loadTexts: psDCoutputCurrent2.setDescription('DCoutput Current presents in units of 0.1A . ')
psDCoutputCurrent3 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 6, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psDCoutputCurrent3.setStatus('current')
if mibBuilder.loadTexts: psDCoutputCurrent3.setDescription('DCoutput Current presents in units of 0.1A . ')
psDCoutputCurrent4 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 6, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psDCoutputCurrent4.setStatus('current')
if mibBuilder.loadTexts: psDCoutputCurrent4.setDescription('DCoutput Current presents in units of 0.1A . ')
psDCoutputCurrent5 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 6, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psDCoutputCurrent5.setStatus('current')
if mibBuilder.loadTexts: psDCoutputCurrent5.setDescription('DCoutput Current presents in units of 0.1A . ')
psDCoutputDCStatus = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 6, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("ok", 0), ("overvoltage", 1), ("undervoltage", 2), ("disconnected", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psDCoutputDCStatus.setStatus('current')
if mibBuilder.loadTexts: psDCoutputDCStatus.setDescription('DCoutput DC Status  0 = OK  1= OverVoltage 2 = UnderVoltage 3 = Disconnected ')
psDCoutputSurgeStatus = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 6, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("notok", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psDCoutputSurgeStatus.setStatus('current')
if mibBuilder.loadTexts: psDCoutputSurgeStatus.setDescription(' The Status of the DCoutput Surge 0 = OK, 1 = Not OK.')
psDCoutputInvertorVoltage = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 6, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psDCoutputInvertorVoltage.setStatus('current')
if mibBuilder.loadTexts: psDCoutputInvertorVoltage.setDescription('DCoutput Invertor Voltage  present in 0.1V ')
psDCOutputDCOutput = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 6, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("ok", 0), ("overvoltage", 1), ("undervoltage", 2), ("disconnect", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psDCOutputDCOutput.setStatus('current')
if mibBuilder.loadTexts: psDCOutputDCOutput.setDescription('  0=OK  \n1= OverVoltage\n2 = Undervoltage.\n3 = Disconnected.')
psDCoutputSpare1 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 6, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psDCoutputSpare1.setStatus('current')
if mibBuilder.loadTexts: psDCoutputSpare1.setDescription('DCoutput Spare ')
psDCoutputSpare2 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 6, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psDCoutputSpare2.setStatus('current')
if mibBuilder.loadTexts: psDCoutputSpare2.setDescription('DCoutput Spare ')
psDCoutputSpare3 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 6, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psDCoutputSpare3.setStatus('current')
if mibBuilder.loadTexts: psDCoutputSpare3.setDescription('DCoutput Spare ')
psDCoutputSpare4 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 6, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psDCoutputSpare4.setStatus('current')
if mibBuilder.loadTexts: psDCoutputSpare4.setDescription('DCoutput Spare ')
psDCoutputSpare5 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 6, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psDCoutputSpare5.setStatus('current')
if mibBuilder.loadTexts: psDCoutputSpare5.setDescription('DCoutput Spare ')
psDCoutputSpare6 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 6, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psDCoutputSpare6.setStatus('current')
if mibBuilder.loadTexts: psDCoutputSpare6.setDescription('DCoutput Spare ')
psContuctor1 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("open", 0), ("close", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psContuctor1.setStatus('current')
if mibBuilder.loadTexts: psContuctor1.setDescription(' Contuctor 1 in Battery Circuit ')
psContuctor2 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("open", 0), ("close", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psContuctor2.setStatus('current')
if mibBuilder.loadTexts: psContuctor2.setDescription(' Contuctor 2 in Battery Circuit ')
psContuctor3 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 7, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("open", 0), ("close", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psContuctor3.setStatus('current')
if mibBuilder.loadTexts: psContuctor3.setDescription(' Contuctor 3 in Battery Circuit ')
psContuctor4 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 7, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("open", 0), ("close", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psContuctor4.setStatus('current')
if mibBuilder.loadTexts: psContuctor4.setDescription(' Contuctor 4 in Battery Circuit ')
psContuctor5 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 7, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("open", 0), ("close", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psContuctor5.setStatus('current')
if mibBuilder.loadTexts: psContuctor5.setDescription(' Contuctor 5 in Load Circuit ')
psContuctor6 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 7, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("open", 0), ("close", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psContuctor6.setStatus('current')
if mibBuilder.loadTexts: psContuctor6.setDescription(' Contuctor 6 in Load Circuit ')
psContuctor7 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 7, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("open", 0), ("close", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psContuctor7.setStatus('current')
if mibBuilder.loadTexts: psContuctor7.setDescription(' Contuctor 7 in Load Circuit ')
psContuctor8 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 7, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("open", 0), ("close", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psContuctor8.setStatus('current')
if mibBuilder.loadTexts: psContuctor8.setDescription(' Contuctor 8 in Load Circuit ')
psContuctor9 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 7, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("open", 0), ("close", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psContuctor9.setStatus('current')
if mibBuilder.loadTexts: psContuctor9.setDescription(' Contuctor 9 in Load Circuit ')
psContuctor10 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 7, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("open", 0), ("close", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psContuctor10.setStatus('current')
if mibBuilder.loadTexts: psContuctor10.setDescription(' Contuctor 10 in Load Circuit ')
psDryContactTable = MibTable((1, 3, 6, 1, 4, 1, 6050, 1, 7, 11), )
if mibBuilder.loadTexts: psDryContactTable.setStatus('current')
if mibBuilder.loadTexts: psDryContactTable.setDescription('The Dry Contactor alarm table.')
psDryContactorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6050, 1, 7, 11, 1), ).setIndexNames((0, "GAMATRONIC-MIB", "psDryContactorIndex"))
if mibBuilder.loadTexts: psDryContactorEntry.setStatus('current')
if mibBuilder.loadTexts: psDryContactorEntry.setDescription('An entry in this table defines for each Dry Contactor the Alarm vector')
psDryContactorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 7, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psDryContactorIndex.setStatus('current')
if mibBuilder.loadTexts: psDryContactorIndex.setDescription(' The DRY  Contact table index.')
psDryContactorAlarm1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 7, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("set", 1), ("notset", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psDryContactorAlarm1.setStatus('current')
if mibBuilder.loadTexts: psDryContactorAlarm1.setDescription(' The Dry Contactor Alarm 1.')
psDryContactorAlarm2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 7, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("set", 1), ("notset", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psDryContactorAlarm2.setStatus('current')
if mibBuilder.loadTexts: psDryContactorAlarm2.setDescription(' The Dry Contactor Alarm 2.')
psDryContactorAlarm3 = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 7, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("set", 1), ("notset", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psDryContactorAlarm3.setStatus('current')
if mibBuilder.loadTexts: psDryContactorAlarm3.setDescription(' The Dry Contactor Alarm 3.')
psDryContactorAlarm4 = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 7, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("set", 1), ("notset", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psDryContactorAlarm4.setStatus('current')
if mibBuilder.loadTexts: psDryContactorAlarm4.setDescription(' The Dry Contactor Alarm 4.')
psDryContactorAlarm5 = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 7, 11, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("set", 1), ("notset", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psDryContactorAlarm5.setStatus('current')
if mibBuilder.loadTexts: psDryContactorAlarm5.setDescription(' The Dry Contactor Alarm 5.')
psDryContactorAlarm6 = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 7, 11, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("set", 1), ("notset", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psDryContactorAlarm6.setStatus('current')
if mibBuilder.loadTexts: psDryContactorAlarm6.setDescription(' The Dry Contactor Alarm 6.')
psDryContactorAlarm7 = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 7, 11, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("set", 1), ("notset", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psDryContactorAlarm7.setStatus('current')
if mibBuilder.loadTexts: psDryContactorAlarm7.setDescription(' The Dry Contactor Alarm 7.')
psDryContactorAlarm8 = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 7, 11, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("set", 1), ("notset", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psDryContactorAlarm8.setStatus('current')
if mibBuilder.loadTexts: psDryContactorAlarm8.setDescription(' The Dry Contactor Alarm 8.')
psDryContactorAlarm9 = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 7, 11, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("set", 1), ("notset", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psDryContactorAlarm9.setStatus('current')
if mibBuilder.loadTexts: psDryContactorAlarm9.setDescription(' The Dry Contactor Alarm 9.')
psDryContactorAlarm10 = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 7, 11, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("set", 1), ("notset", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psDryContactorAlarm10.setStatus('current')
if mibBuilder.loadTexts: psDryContactorAlarm10.setDescription(' The Dry Contactor Alarm 10.')
psDryContactorAlarm11 = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 7, 11, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("set", 1), ("notset", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psDryContactorAlarm11.setStatus('current')
if mibBuilder.loadTexts: psDryContactorAlarm11.setDescription(' The Dry Contactor Alarm 11.')
psDryContactorAlarm12 = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 7, 11, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("set", 1), ("notset", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psDryContactorAlarm12.setStatus('current')
if mibBuilder.loadTexts: psDryContactorAlarm12.setDescription(' The Dry Contactor Alarm 12.')
psDryContactorAlarm13 = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 7, 11, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("set", 1), ("notset", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psDryContactorAlarm13.setStatus('current')
if mibBuilder.loadTexts: psDryContactorAlarm13.setDescription(' The Dry Contactor Alarm 13.')
psDryContactorAlarm14 = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 7, 11, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("set", 1), ("notset", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psDryContactorAlarm14.setStatus('current')
if mibBuilder.loadTexts: psDryContactorAlarm14.setDescription(' The Dry Contactor Alarm 14.')
psDryContactorAlarm15 = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 7, 11, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("set", 1), ("notset", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psDryContactorAlarm15.setStatus('current')
if mibBuilder.loadTexts: psDryContactorAlarm15.setDescription(' The Dry Contactor Alarm 15.')
psDryContactorAlarm16 = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 7, 11, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("set", 1), ("notset", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psDryContactorAlarm16.setStatus('current')
if mibBuilder.loadTexts: psDryContactorAlarm16.setDescription(' The Dry Contactor Alarm 16.')
psDryContactorAlarm17 = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 7, 11, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("set", 1), ("notset", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psDryContactorAlarm17.setStatus('current')
if mibBuilder.loadTexts: psDryContactorAlarm17.setDescription(' The Dry Contactor Alarm 17.')
psDryContactorAlarm18 = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 7, 11, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("set", 1), ("notset", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psDryContactorAlarm18.setStatus('current')
if mibBuilder.loadTexts: psDryContactorAlarm18.setDescription(' The Dry Contactor Alarm 18.')
psDryContactorAlarm19 = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 7, 11, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("set", 1), ("notset", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psDryContactorAlarm19.setStatus('current')
if mibBuilder.loadTexts: psDryContactorAlarm19.setDescription(' The Dry Contactor Alarm 19.')
psDryContactorAlarm20 = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 7, 11, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("set", 1), ("notset", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psDryContactorAlarm20.setStatus('current')
if mibBuilder.loadTexts: psDryContactorAlarm20.setDescription(' The Dry Contactor Alarm 20.')
psDryContactorAlarm21 = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 7, 11, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("set", 1), ("notset", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psDryContactorAlarm21.setStatus('current')
if mibBuilder.loadTexts: psDryContactorAlarm21.setDescription(' The Dry Contactor Alarm 21.')
psDryContactorAlarm22 = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 7, 11, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("set", 1), ("notset", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psDryContactorAlarm22.setStatus('current')
if mibBuilder.loadTexts: psDryContactorAlarm22.setDescription(' The Dry Contactor Alarm 22.')
psDryContactorAlarm23 = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 7, 11, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("set", 1), ("notset", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psDryContactorAlarm23.setStatus('current')
if mibBuilder.loadTexts: psDryContactorAlarm23.setDescription(' The Dry Contactor Alarm 23.')
psDryContactorAlarm24 = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 7, 11, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("set", 1), ("notset", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psDryContactorAlarm24.setStatus('current')
if mibBuilder.loadTexts: psDryContactorAlarm24.setDescription(' The Dry Contactor Alarm 24.')
psDryContactorAlarm25 = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 7, 11, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("set", 1), ("notset", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psDryContactorAlarm25.setStatus('current')
if mibBuilder.loadTexts: psDryContactorAlarm25.setDescription(' The Dry Contactor Alarm 25.')
psDryContactorAlarm26 = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 7, 11, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("set", 1), ("notset", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psDryContactorAlarm26.setStatus('current')
if mibBuilder.loadTexts: psDryContactorAlarm26.setDescription(' The Dry Contactor Alarm 26.')
psDryContactorAlarm27 = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 7, 11, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("set", 1), ("notset", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psDryContactorAlarm27.setStatus('current')
if mibBuilder.loadTexts: psDryContactorAlarm27.setDescription(' The Dry Contactor Alarm 27.')
psDryContactorAlarm28 = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 7, 11, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("set", 1), ("notset", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psDryContactorAlarm28.setStatus('current')
if mibBuilder.loadTexts: psDryContactorAlarm28.setDescription(' The Dry Contactor Alarm 28.')
psDryContactorAlarm29 = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 7, 11, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("set", 1), ("notset", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psDryContactorAlarm29.setStatus('current')
if mibBuilder.loadTexts: psDryContactorAlarm29.setDescription(' The Dry Contactor Alarm 29.')
psDryContactorAlarm30 = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 7, 11, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("set", 1), ("notset", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psDryContactorAlarm30.setStatus('current')
if mibBuilder.loadTexts: psDryContactorAlarm30.setDescription(' The Dry Contactor Alarm 30.')
psDryContactorAlarm31 = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 7, 11, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("set", 1), ("notset", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psDryContactorAlarm31.setStatus('current')
if mibBuilder.loadTexts: psDryContactorAlarm31.setDescription(' The Dry Contactor Alarm 31.')
psDryContactorAlarm32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 7, 11, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("set", 1), ("notset", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psDryContactorAlarm32.setStatus('current')
if mibBuilder.loadTexts: psDryContactorAlarm32.setDescription(' The Dry Contactor Alarm 32.')
psDryContactStatus = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 7, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psDryContactStatus.setStatus('current')
if mibBuilder.loadTexts: psDryContactStatus.setDescription(' Dry contactor alarm status ')
psDryContact1Table = MibTable((1, 3, 6, 1, 4, 1, 6050, 1, 7, 13), )
if mibBuilder.loadTexts: psDryContact1Table.setStatus('current')
if mibBuilder.loadTexts: psDryContact1Table.setDescription('The Dry Contactor alarm table.')
psDryContactor1Entry = MibTableRow((1, 3, 6, 1, 4, 1, 6050, 1, 7, 13, 1), ).setIndexNames((0, "GAMATRONIC-MIB", "psDryContactor1Index"))
if mibBuilder.loadTexts: psDryContactor1Entry.setStatus('current')
if mibBuilder.loadTexts: psDryContactor1Entry.setDescription('An entry in this table defines for each Dry Contactor the Alarm vector')
psDryContactor1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 7, 13, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psDryContactor1Index.setStatus('current')
if mibBuilder.loadTexts: psDryContactor1Index.setDescription(' The DRY  Contact table index.')
psDryContactor1Alarm1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 7, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("set", 1), ("notset", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psDryContactor1Alarm1.setStatus('current')
if mibBuilder.loadTexts: psDryContactor1Alarm1.setDescription(' The Dry Contactor Alarm 1.')
psDryContactor1Alarm2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 7, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("set", 1), ("notset", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psDryContactor1Alarm2.setStatus('current')
if mibBuilder.loadTexts: psDryContactor1Alarm2.setDescription(' The Dry Contactor Alarm 2.')
psDryContactor1Alarm3 = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 7, 13, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("set", 1), ("notset", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psDryContactor1Alarm3.setStatus('current')
if mibBuilder.loadTexts: psDryContactor1Alarm3.setDescription(' The Dry Contactor Alarm 3.')
psDryContactor1Alarm4 = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 7, 13, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("set", 1), ("notset", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psDryContactor1Alarm4.setStatus('current')
if mibBuilder.loadTexts: psDryContactor1Alarm4.setDescription(' The Dry Contactor Alarm 4.')
psDryContactor1Alarm5 = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 7, 13, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("set", 1), ("notset", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psDryContactor1Alarm5.setStatus('current')
if mibBuilder.loadTexts: psDryContactor1Alarm5.setDescription(' The Dry Contactor Alarm 5.')
psDryContactor1Alarm6 = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 7, 13, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("set", 1), ("notset", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psDryContactor1Alarm6.setStatus('current')
if mibBuilder.loadTexts: psDryContactor1Alarm6.setDescription(' The Dry Contactor Alarm 6.')
psDryContactor1Alarm7 = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 7, 13, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("set", 1), ("notset", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psDryContactor1Alarm7.setStatus('current')
if mibBuilder.loadTexts: psDryContactor1Alarm7.setDescription(' The Dry Contactor Alarm 7.')
psDryContactor1Alarm8 = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 7, 13, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("set", 1), ("notset", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psDryContactor1Alarm8.setStatus('current')
if mibBuilder.loadTexts: psDryContactor1Alarm8.setDescription(' The Dry Contactor Alarm 8.')
psDryContactor1Alarm9 = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 7, 13, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("set", 1), ("notset", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psDryContactor1Alarm9.setStatus('current')
if mibBuilder.loadTexts: psDryContactor1Alarm9.setDescription(' The Dry Contactor Alarm 9.')
psDryContactor1Alarm10 = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 7, 13, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("set", 1), ("notset", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psDryContactor1Alarm10.setStatus('current')
if mibBuilder.loadTexts: psDryContactor1Alarm10.setDescription(' The Dry Contactor Alarm 10.')
psDryContactor1Alarm11 = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 7, 13, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("set", 1), ("notset", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psDryContactor1Alarm11.setStatus('current')
if mibBuilder.loadTexts: psDryContactor1Alarm11.setDescription(' The Dry Contactor Alarm 11.')
psDryContactor1Alarm12 = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 7, 13, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("set", 1), ("notset", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psDryContactor1Alarm12.setStatus('current')
if mibBuilder.loadTexts: psDryContactor1Alarm12.setDescription(' The Dry Contactor Alarm 12.')
psDryContactor1Alarm13 = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 7, 13, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("set", 1), ("notset", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psDryContactor1Alarm13.setStatus('current')
if mibBuilder.loadTexts: psDryContactor1Alarm13.setDescription(' The Dry Contactor Alarm 13.')
psDryContactor1Alarm14 = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 7, 13, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("set", 1), ("notset", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psDryContactor1Alarm14.setStatus('current')
if mibBuilder.loadTexts: psDryContactor1Alarm14.setDescription(' The Dry Contactor Alarm 14.')
psDryContactor1Alarm15 = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 7, 13, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("set", 1), ("notset", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psDryContactor1Alarm15.setStatus('current')
if mibBuilder.loadTexts: psDryContactor1Alarm15.setDescription(' The Dry Contactor Alarm 15.')
psDryContactor1Alarm16 = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 7, 13, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("set", 1), ("notset", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psDryContactor1Alarm16.setStatus('current')
if mibBuilder.loadTexts: psDryContactor1Alarm16.setDescription(' The Dry Contactor Alarm 16.')
psDryContactor1Alarm17 = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 7, 13, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("set", 1), ("notset", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psDryContactor1Alarm17.setStatus('current')
if mibBuilder.loadTexts: psDryContactor1Alarm17.setDescription(' The Dry Contactor Alarm 17.')
psDryContactor1Alarm18 = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 7, 13, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("set", 1), ("notset", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psDryContactor1Alarm18.setStatus('current')
if mibBuilder.loadTexts: psDryContactor1Alarm18.setDescription(' The Dry Contactor Alarm 18.')
psDryContactor1Alarm19 = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 7, 13, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("set", 1), ("notset", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psDryContactor1Alarm19.setStatus('current')
if mibBuilder.loadTexts: psDryContactor1Alarm19.setDescription(' The Dry Contactor Alarm 19.')
psDryContactor1Alarm20 = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 7, 13, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("set", 1), ("notset", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psDryContactor1Alarm20.setStatus('current')
if mibBuilder.loadTexts: psDryContactor1Alarm20.setDescription(' The Dry Contactor Alarm 20.')
psDryContactor1Alarm21 = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 7, 13, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("set", 1), ("notset", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psDryContactor1Alarm21.setStatus('current')
if mibBuilder.loadTexts: psDryContactor1Alarm21.setDescription(' The Dry Contactor Alarm 21.')
psDryContactor1Alarm22 = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 7, 13, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("set", 1), ("notset", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psDryContactor1Alarm22.setStatus('current')
if mibBuilder.loadTexts: psDryContactor1Alarm22.setDescription(' The Dry Contactor Alarm 22.')
psDryContactor1Alarm23 = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 7, 13, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("set", 1), ("notset", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psDryContactor1Alarm23.setStatus('current')
if mibBuilder.loadTexts: psDryContactor1Alarm23.setDescription(' The Dry Contactor Alarm 23.')
psDryContactor1Alarm24 = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 7, 13, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("set", 1), ("notset", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psDryContactor1Alarm24.setStatus('current')
if mibBuilder.loadTexts: psDryContactor1Alarm24.setDescription(' The Dry Contactor Alarm 24.')
psDryContactor1Alarm25 = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 7, 13, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("set", 1), ("notset", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psDryContactor1Alarm25.setStatus('current')
if mibBuilder.loadTexts: psDryContactor1Alarm25.setDescription(' The Dry Contactor Alarm 25.')
psDryContactor1Alarm26 = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 7, 13, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("set", 1), ("notset", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psDryContactor1Alarm26.setStatus('current')
if mibBuilder.loadTexts: psDryContactor1Alarm26.setDescription(' The Dry Contactor Alarm 26.')
psDryContactor1Alarm27 = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 7, 13, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("set", 1), ("notset", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psDryContactor1Alarm27.setStatus('current')
if mibBuilder.loadTexts: psDryContactor1Alarm27.setDescription(' The Dry Contactor Alarm 27.')
psDryContactor1Alarm28 = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 7, 13, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("set", 1), ("notset", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psDryContactor1Alarm28.setStatus('current')
if mibBuilder.loadTexts: psDryContactor1Alarm28.setDescription(' The Dry Contactor Alarm 28.')
psDryContactor1Alarm29 = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 7, 13, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("set", 1), ("notset", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psDryContactor1Alarm29.setStatus('current')
if mibBuilder.loadTexts: psDryContactor1Alarm29.setDescription(' The Dry Contactor Alarm 29.')
psDryContactor1Alarm30 = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 7, 13, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("set", 1), ("notset", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psDryContactor1Alarm30.setStatus('current')
if mibBuilder.loadTexts: psDryContactor1Alarm30.setDescription(' The Dry Contactor Alarm 30.')
psDryContactor1Alarm31 = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 7, 13, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("set", 1), ("notset", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psDryContactor1Alarm31.setStatus('current')
if mibBuilder.loadTexts: psDryContactor1Alarm31.setDescription(' The Dry Contactor Alarm 31.')
psDryContactor1Alarm32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 7, 13, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("set", 1), ("notset", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psDryContactor1Alarm32.setStatus('current')
if mibBuilder.loadTexts: psDryContactor1Alarm32.setDescription(' The Dry Contactor Alarm 32.')
psDryContact1Status = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 7, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psDryContact1Status.setStatus('current')
if mibBuilder.loadTexts: psDryContact1Status.setDescription(' Dry contactor alarm status ')
psDryContact2Table = MibTable((1, 3, 6, 1, 4, 1, 6050, 1, 7, 15), )
if mibBuilder.loadTexts: psDryContact2Table.setStatus('current')
if mibBuilder.loadTexts: psDryContact2Table.setDescription('The Dry Contactor alarm table.')
psDryContactor2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 6050, 1, 7, 15, 1), ).setIndexNames((0, "GAMATRONIC-MIB", "psDryContactor2Index"))
if mibBuilder.loadTexts: psDryContactor2Entry.setStatus('current')
if mibBuilder.loadTexts: psDryContactor2Entry.setDescription('An entry in this table defines for each Dry Contactor the Alarm vector')
psDryContactor2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 7, 15, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psDryContactor2Index.setStatus('current')
if mibBuilder.loadTexts: psDryContactor2Index.setDescription(' The DRY  Contact table index.')
psDryContactor2Alarm1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 7, 15, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("set", 1), ("notset", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psDryContactor2Alarm1.setStatus('current')
if mibBuilder.loadTexts: psDryContactor2Alarm1.setDescription(' The Dry Contactor Alarm 1.')
psDryContactor2Alarm2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 7, 15, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("set", 1), ("notset", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psDryContactor2Alarm2.setStatus('current')
if mibBuilder.loadTexts: psDryContactor2Alarm2.setDescription(' The Dry Contactor Alarm 2.')
psDryContactor2Alarm3 = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 7, 15, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("set", 1), ("notset", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psDryContactor2Alarm3.setStatus('current')
if mibBuilder.loadTexts: psDryContactor2Alarm3.setDescription(' The Dry Contactor Alarm 3.')
psDryContactor2Alarm4 = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 7, 15, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("set", 1), ("notset", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psDryContactor2Alarm4.setStatus('current')
if mibBuilder.loadTexts: psDryContactor2Alarm4.setDescription(' The Dry Contactor Alarm 4.')
psDryContactor2Alarm5 = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 7, 15, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("set", 1), ("notset", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psDryContactor2Alarm5.setStatus('current')
if mibBuilder.loadTexts: psDryContactor2Alarm5.setDescription(' The Dry Contactor Alarm 5.')
psDryContactor2Alarm6 = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 7, 15, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("set", 1), ("notset", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psDryContactor2Alarm6.setStatus('current')
if mibBuilder.loadTexts: psDryContactor2Alarm6.setDescription(' The Dry Contactor Alarm 6.')
psDryContactor2Alarm7 = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 7, 15, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("set", 1), ("notset", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psDryContactor2Alarm7.setStatus('current')
if mibBuilder.loadTexts: psDryContactor2Alarm7.setDescription(' The Dry Contactor Alarm 7.')
psDryContactor2Alarm8 = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 7, 15, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("set", 1), ("notset", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psDryContactor2Alarm8.setStatus('current')
if mibBuilder.loadTexts: psDryContactor2Alarm8.setDescription(' The Dry Contactor Alarm 8.')
psDryContactor2Alarm9 = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 7, 15, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("set", 1), ("notset", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psDryContactor2Alarm9.setStatus('current')
if mibBuilder.loadTexts: psDryContactor2Alarm9.setDescription(' The Dry Contactor Alarm 9.')
psDryContactor2Alarm10 = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 7, 15, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("set", 1), ("notset", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psDryContactor2Alarm10.setStatus('current')
if mibBuilder.loadTexts: psDryContactor2Alarm10.setDescription(' The Dry Contactor Alarm 10.')
psDryContactor2Alarm11 = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 7, 15, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("set", 1), ("notset", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psDryContactor2Alarm11.setStatus('current')
if mibBuilder.loadTexts: psDryContactor2Alarm11.setDescription(' The Dry Contactor Alarm 11.')
psDryContactor2Alarm12 = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 7, 15, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("set", 1), ("notset", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psDryContactor2Alarm12.setStatus('current')
if mibBuilder.loadTexts: psDryContactor2Alarm12.setDescription(' The Dry Contactor Alarm 12.')
psDryContactor2Alarm13 = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 7, 15, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("set", 1), ("notset", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psDryContactor2Alarm13.setStatus('current')
if mibBuilder.loadTexts: psDryContactor2Alarm13.setDescription(' The Dry Contactor Alarm 13.')
psDryContactor2Alarm14 = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 7, 15, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("set", 1), ("notset", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psDryContactor2Alarm14.setStatus('current')
if mibBuilder.loadTexts: psDryContactor2Alarm14.setDescription(' The Dry Contactor Alarm 14.')
psDryContactor2Alarm15 = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 7, 15, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("set", 1), ("notset", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psDryContactor2Alarm15.setStatus('current')
if mibBuilder.loadTexts: psDryContactor2Alarm15.setDescription(' The Dry Contactor Alarm 15.')
psDryContactor2Alarm16 = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 7, 15, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("set", 1), ("notset", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psDryContactor2Alarm16.setStatus('current')
if mibBuilder.loadTexts: psDryContactor2Alarm16.setDescription(' The Dry Contactor Alarm 16.')
psDryContactor2Alarm17 = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 7, 15, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("set", 1), ("notset", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psDryContactor2Alarm17.setStatus('current')
if mibBuilder.loadTexts: psDryContactor2Alarm17.setDescription(' The Dry Contactor Alarm 17.')
psDryContactor2Alarm18 = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 7, 15, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("set", 1), ("notset", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psDryContactor2Alarm18.setStatus('current')
if mibBuilder.loadTexts: psDryContactor2Alarm18.setDescription(' The Dry Contactor Alarm 18.')
psDryContactor2Alarm19 = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 7, 15, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("set", 1), ("notset", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psDryContactor2Alarm19.setStatus('current')
if mibBuilder.loadTexts: psDryContactor2Alarm19.setDescription(' The Dry Contactor Alarm 19.')
psDryContactor2Alarm20 = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 7, 15, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("set", 1), ("notset", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psDryContactor2Alarm20.setStatus('current')
if mibBuilder.loadTexts: psDryContactor2Alarm20.setDescription(' The Dry Contactor Alarm 20.')
psDryContactor2Alarm21 = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 7, 15, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("set", 1), ("notset", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psDryContactor2Alarm21.setStatus('current')
if mibBuilder.loadTexts: psDryContactor2Alarm21.setDescription(' The Dry Contactor Alarm 21.')
psDryContactor2Alarm22 = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 7, 15, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("set", 1), ("notset", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psDryContactor2Alarm22.setStatus('current')
if mibBuilder.loadTexts: psDryContactor2Alarm22.setDescription(' The Dry Contactor Alarm 22.')
psDryContactor2Alarm23 = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 7, 15, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("set", 1), ("notset", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psDryContactor2Alarm23.setStatus('current')
if mibBuilder.loadTexts: psDryContactor2Alarm23.setDescription(' The Dry Contactor Alarm 23.')
psDryContactor2Alarm24 = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 7, 15, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("set", 1), ("notset", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psDryContactor2Alarm24.setStatus('current')
if mibBuilder.loadTexts: psDryContactor2Alarm24.setDescription(' The Dry Contactor Alarm 24.')
psDryContactor2Alarm25 = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 7, 15, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("set", 1), ("notset", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psDryContactor2Alarm25.setStatus('current')
if mibBuilder.loadTexts: psDryContactor2Alarm25.setDescription(' The Dry Contactor Alarm 25.')
psDryContactor2Alarm26 = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 7, 15, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("set", 1), ("notset", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psDryContactor2Alarm26.setStatus('current')
if mibBuilder.loadTexts: psDryContactor2Alarm26.setDescription(' The Dry Contactor Alarm 26.')
psDryContactor2Alarm27 = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 7, 15, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("set", 1), ("notset", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psDryContactor2Alarm27.setStatus('current')
if mibBuilder.loadTexts: psDryContactor2Alarm27.setDescription(' The Dry Contactor Alarm 27.')
psDryContactor2Alarm28 = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 7, 15, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("set", 1), ("notset", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psDryContactor2Alarm28.setStatus('current')
if mibBuilder.loadTexts: psDryContactor2Alarm28.setDescription(' The Dry Contactor Alarm 28.')
psDryContactor2Alarm29 = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 7, 15, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("set", 1), ("notset", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psDryContactor2Alarm29.setStatus('current')
if mibBuilder.loadTexts: psDryContactor2Alarm29.setDescription(' The Dry Contactor Alarm 29.')
psDryContactor2Alarm30 = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 7, 15, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("set", 1), ("notset", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psDryContactor2Alarm30.setStatus('current')
if mibBuilder.loadTexts: psDryContactor2Alarm30.setDescription(' The Dry Contactor Alarm 30.')
psDryContactor2Alarm31 = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 7, 15, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("set", 1), ("notset", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psDryContactor2Alarm31.setStatus('current')
if mibBuilder.loadTexts: psDryContactor2Alarm31.setDescription(' The Dry Contactor Alarm 31.')
psDryContactor2Alarm32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 7, 15, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("set", 1), ("notset", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psDryContactor2Alarm32.setStatus('current')
if mibBuilder.loadTexts: psDryContactor2Alarm32.setDescription(' The Dry Contactor Alarm 32.')
psDryContact2Status = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 7, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psDryContact2Status.setStatus('current')
if mibBuilder.loadTexts: psDryContact2Status.setDescription(' Dry contactor alarm status ')
psSeverityMapTable = MibTable((1, 3, 6, 1, 4, 1, 6050, 1, 16, 1), )
if mibBuilder.loadTexts: psSeverityMapTable.setStatus('current')
if mibBuilder.loadTexts: psSeverityMapTable.setDescription('The PS Severity  table.')
psSeverityMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6050, 1, 16, 1, 1), ).setIndexNames((0, "GAMATRONIC-MIB", "psSeverityMapIndex"))
if mibBuilder.loadTexts: psSeverityMapEntry.setStatus('current')
if mibBuilder.loadTexts: psSeverityMapEntry.setDescription('An entry in this table defines Severity per Alarm  psSeverityIndex 1 = Critical and 4 = worning . ')
psSeverityMapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 16, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psSeverityMapIndex.setStatus('current')
if mibBuilder.loadTexts: psSeverityMapIndex.setDescription(' The PS table index 1=  critical , 4 = worning .')
psSeverityMapAlarm1to32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 16, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psSeverityMapAlarm1to32.setStatus('current')
if mibBuilder.loadTexts: psSeverityMapAlarm1to32.setDescription(' Alarm 1 to 32.')
psSeverityMapAlarm33to64 = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 16, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psSeverityMapAlarm33to64.setStatus('current')
if mibBuilder.loadTexts: psSeverityMapAlarm33to64.setDescription(' Alarm 33 to 64.')
psSeverityMapAlarm65to96 = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 16, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psSeverityMapAlarm65to96.setStatus('current')
if mibBuilder.loadTexts: psSeverityMapAlarm65to96.setDescription(' Alarm 65 to 96.')
psConfEnableCurrentLimit = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psConfEnableCurrentLimit.setStatus('current')
if mibBuilder.loadTexts: psConfEnableCurrentLimit.setDescription(' Enable Current Limit ')
psConfEnablePeriodicEqualize = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psConfEnablePeriodicEqualize.setStatus('current')
if mibBuilder.loadTexts: psConfEnablePeriodicEqualize.setDescription(' Enable   Periodic   Equalize')
psConfGHighTempAlarm = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 8, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psConfGHighTempAlarm.setStatus('current')
if mibBuilder.loadTexts: psConfGHighTempAlarm.setDescription(' High Temprature Alarm Giving in Celsious ')
psConfLowTempAlarmSign = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 8, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("positive", 0), ("negative", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psConfLowTempAlarmSign.setStatus('current')
if mibBuilder.loadTexts: psConfLowTempAlarmSign.setDescription(' Low Temperature Alarm Sign ')
psConfLowTempAlarm = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 8, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psConfLowTempAlarm.setStatus('current')
if mibBuilder.loadTexts: psConfLowTempAlarm.setDescription(' Low Temprature Alarm Giving in Celsious ')
psConfTemperatureCoefficient = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 8, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psConfTemperatureCoefficient.setStatus('current')
if mibBuilder.loadTexts: psConfTemperatureCoefficient.setDescription(' Temperature     Coefficient    0.01V/C')
psConfNumOfInvertors = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 8, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psConfNumOfInvertors.setStatus('current')
if mibBuilder.loadTexts: psConfNumOfInvertors.setDescription(' Number Of Invertors ')
psConfNumOfRectifiers = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 8, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psConfNumOfRectifiers.setStatus('current')
if mibBuilder.loadTexts: psConfNumOfRectifiers.setDescription(" Number Of Psu's ")
psConfACHigh = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 8, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psConfACHigh.setStatus('current')
if mibBuilder.loadTexts: psConfACHigh.setDescription(' AC High Voltage Alarm')
psConfACLow = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 8, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psConfACLow.setStatus('current')
if mibBuilder.loadTexts: psConfACLow.setDescription(' AC Low Voltage Alarm')
psConfCurrentLimit = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 8, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psConfCurrentLimit.setStatus('current')
if mibBuilder.loadTexts: psConfCurrentLimit.setDescription(' Current Limit ')
psConfHIA = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 8, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psConfHIA.setStatus('current')
if mibBuilder.loadTexts: psConfHIA.setDescription(' HI_A ')
psConfBDOC = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 8, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psConfBDOC.setStatus('current')
if mibBuilder.loadTexts: psConfBDOC.setDescription(' BDOC ')
psConfBatteryNominalCapacity = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 8, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psConfBatteryNominalCapacity.setStatus('current')
if mibBuilder.loadTexts: psConfBatteryNominalCapacity.setDescription(' Battery   Nominal   Capacity')
psConfEqualStopTime = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 8, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psConfEqualStopTime.setStatus('current')
if mibBuilder.loadTexts: psConfEqualStopTime.setDescription(' Equal  Stop Time ')
psConfEqualStopCurrent = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 8, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psConfEqualStopCurrent.setStatus('current')
if mibBuilder.loadTexts: psConfEqualStopCurrent.setDescription(' Equal  Stop Current ')
psConfEqualPeriod = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 8, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psConfEqualPeriod.setStatus('current')
if mibBuilder.loadTexts: psConfEqualPeriod.setDescription(' Equal Period ')
psConfEqualStartCurrent = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 8, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psConfEqualStartCurrent.setStatus('current')
if mibBuilder.loadTexts: psConfEqualStartCurrent.setDescription(' Equal  Start  Current ')
psConfMajorLowVoltage1 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 8, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psConfMajorLowVoltage1.setStatus('current')
if mibBuilder.loadTexts: psConfMajorLowVoltage1.setDescription(' Major Low Voltage for  MAJ_LV1 Alarm giving in units of 0.01V ')
psConfMajorLowVoltage = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 8, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psConfMajorLowVoltage.setStatus('current')
if mibBuilder.loadTexts: psConfMajorLowVoltage.setDescription(' Major Low Voltage for  MAJ_LV Alarm giving in units of 0.01V ')
psConfMinorLowVoltage = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 8, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psConfMinorLowVoltage.setStatus('current')
if mibBuilder.loadTexts: psConfMinorLowVoltage.setDescription(' Minor Low Voltage for  MIN_LV Alarm giving in units of 0.01V ')
psConfMinorHighVoltage = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 8, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psConfMinorHighVoltage.setStatus('current')
if mibBuilder.loadTexts: psConfMinorHighVoltage.setDescription(' Minor High Voltage for  MIN_HV Alarm giving in units of 0.01V ')
psConfMajorHighVoltage = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 8, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psConfMajorHighVoltage.setStatus('current')
if mibBuilder.loadTexts: psConfMajorHighVoltage.setDescription(' Major High Voltage for  MAJ_HV Alarm giving in units of 0.01V ')
psConfFloatingVoltage = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 8, 24), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psConfFloatingVoltage.setStatus('current')
if mibBuilder.loadTexts: psConfFloatingVoltage.setDescription(' Floating Voltage set giving in units of 0.01V ')
psConfEqualizingVoltage = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 8, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psConfEqualizingVoltage.setStatus('current')
if mibBuilder.loadTexts: psConfEqualizingVoltage.setDescription(' Equalizing Voltage set giving in units of 0.01V ')
psConfNumberOfBattery = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 8, 26), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psConfNumberOfBattery.setStatus('current')
if mibBuilder.loadTexts: psConfNumberOfBattery.setDescription(' Number Of Batteries ')
psConfEnableTempComp = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 8, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psConfEnableTempComp.setStatus('current')
if mibBuilder.loadTexts: psConfEnableTempComp.setDescription(' Enable Temperature Comp. ')
psConfNumberOfLVD = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 8, 28), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psConfNumberOfLVD.setStatus('current')
if mibBuilder.loadTexts: psConfNumberOfLVD.setDescription(' Number Of Contacts ')
psConfEqMajorLowVoltageLV1 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 8, 29), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psConfEqMajorLowVoltageLV1.setStatus('current')
if mibBuilder.loadTexts: psConfEqMajorLowVoltageLV1.setDescription(' Major Low Voltage for  MAJ_LV Alarm giving in units of 0.01V ')
psConfEqMajorLowVoltageLv = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 8, 30), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psConfEqMajorLowVoltageLv.setStatus('current')
if mibBuilder.loadTexts: psConfEqMajorLowVoltageLv.setDescription(' Minor Low Voltage for  MIN_LV Alarm giving in units of 0.01V ')
psConfEqMinorLowVoltageLV = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 8, 31), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psConfEqMinorLowVoltageLV.setStatus('current')
if mibBuilder.loadTexts: psConfEqMinorLowVoltageLV.setDescription(' Minor Lowh Voltage for  MIN_LV Alarm giving in units of 0.01V ')
psConfEqMinorHighVoltageHV = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 8, 32), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psConfEqMinorHighVoltageHV.setStatus('current')
if mibBuilder.loadTexts: psConfEqMinorHighVoltageHV.setDescription(' Mainor High Voltage for  MAJ_HV Alarm giving in units of 0.01V ')
psConfEqMajorHighVoltageHV = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 8, 33), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psConfEqMajorHighVoltageHV.setStatus('current')
if mibBuilder.loadTexts: psConfEqMajorHighVoltageHV.setDescription(' Major High  Voltage  HV set giving in units of 0.01V ')
psConfInvertorVoltage = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 8, 34), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psConfInvertorVoltage.setStatus('current')
if mibBuilder.loadTexts: psConfInvertorVoltage.setDescription(' DC Volt Set ')
psConfInvertorHighVoltage = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 8, 35), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psConfInvertorHighVoltage.setStatus('current')
if mibBuilder.loadTexts: psConfInvertorHighVoltage.setDescription(' High Voltage Alarm  0.01 V')
psConfInvertorLowVoltage = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 8, 36), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psConfInvertorLowVoltage.setStatus('current')
if mibBuilder.loadTexts: psConfInvertorLowVoltage.setDescription(' Low Voltage Alarm  0.01V')
psConfLVDDisconnectTime = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 8, 37), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psConfLVDDisconnectTime.setStatus('current')
if mibBuilder.loadTexts: psConfLVDDisconnectTime.setDescription(' Top time LVD to disconnect upon failure - in hours ')
psConfNomSpare0 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 8, 38), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psConfNomSpare0.setStatus('current')
if mibBuilder.loadTexts: psConfNomSpare0.setDescription(' Spare ')
psConfNomSpare1 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 8, 39), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psConfNomSpare1.setStatus('current')
if mibBuilder.loadTexts: psConfNomSpare1.setDescription(' Spare ')
psConfNomSpare2 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 8, 40), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psConfNomSpare2.setStatus('current')
if mibBuilder.loadTexts: psConfNomSpare2.setDescription(' Spare ')
psConfNomSpare3 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 8, 41), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psConfNomSpare3.setStatus('current')
if mibBuilder.loadTexts: psConfNomSpare3.setDescription(' Spare ')
psConfNomSpare4 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 8, 42), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psConfNomSpare4.setStatus('current')
if mibBuilder.loadTexts: psConfNomSpare4.setDescription(' Spare ')
psConfNomSpare5 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 8, 43), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psConfNomSpare5.setStatus('current')
if mibBuilder.loadTexts: psConfNomSpare5.setDescription(' Spare ')
psConfNomSpare6 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 8, 44), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psConfNomSpare6.setStatus('current')
if mibBuilder.loadTexts: psConfNomSpare6.setDescription(' Spare ')
psConfNomSpare7 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 8, 45), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psConfNomSpare7.setStatus('current')
if mibBuilder.loadTexts: psConfNomSpare7.setDescription(' Spare ')
psConfNomSpare8 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 8, 46), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psConfNomSpare8.setStatus('current')
if mibBuilder.loadTexts: psConfNomSpare8.setDescription(' Spare ')
psConfNomSpare9 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 8, 47), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psConfNomSpare9.setStatus('current')
if mibBuilder.loadTexts: psConfNomSpare9.setDescription(' Spare ')
psConfNomSpare10 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 8, 48), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psConfNomSpare10.setStatus('current')
if mibBuilder.loadTexts: psConfNomSpare10.setDescription(' Spare ')
psStatusAlarm1 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 3, 2, 1))).clone(namedValues=NamedValues(("notactive", 0), ("warning", 4), ("minor", 3), ("major", 2), ("critical", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psStatusAlarm1.setStatus('current')
if mibBuilder.loadTexts: psStatusAlarm1.setDescription(' More Then one rectifier is bad ')
psStatusAlarm2 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 9, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 3, 2, 1))).clone(namedValues=NamedValues(("notactive", 0), ("warning", 4), ("minor", 3), ("major", 2), ("critical", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psStatusAlarm2.setStatus('current')
if mibBuilder.loadTexts: psStatusAlarm2.setDescription(' One Rectifier is bad ')
psStatusAlarm3 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 9, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 3, 2, 1))).clone(namedValues=NamedValues(("notactive", 0), ("warning", 4), ("minor", 3), ("major", 2), ("critical", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psStatusAlarm3.setStatus('current')
if mibBuilder.loadTexts: psStatusAlarm3.setDescription(' AC Line Failure')
psStatusAlarm4 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 9, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 3, 2, 1))).clone(namedValues=NamedValues(("notactive", 0), ("warning", 4), ("minor", 3), ("major", 2), ("critical", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psStatusAlarm4.setStatus('current')
if mibBuilder.loadTexts: psStatusAlarm4.setDescription(' Controler Internal Supply is bad')
psStatusAlarm5 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 9, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 3, 2, 1))).clone(namedValues=NamedValues(("notactive", 0), ("warning", 4), ("minor", 3), ("major", 2), ("critical", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psStatusAlarm5.setStatus('current')
if mibBuilder.loadTexts: psStatusAlarm5.setDescription(' AC Line Too High')
psStatusAlarm6 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 9, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 3, 2, 1))).clone(namedValues=NamedValues(("notactive", 0), ("warning", 4), ("minor", 3), ("major", 2), ("critical", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psStatusAlarm6.setStatus('current')
if mibBuilder.loadTexts: psStatusAlarm6.setDescription(' AC Line Too Low')
psStatusAlarm7 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 9, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 3, 2, 1))).clone(namedValues=NamedValues(("notactive", 0), ("warning", 4), ("minor", 3), ("major", 2), ("critical", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psStatusAlarm7.setStatus('current')
if mibBuilder.loadTexts: psStatusAlarm7.setDescription(' System Over Temperature ')
psStatusAlarm8 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 9, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 3, 2, 1))).clone(namedValues=NamedValues(("notactive", 0), ("warning", 4), ("minor", 3), ("major", 2), ("critical", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psStatusAlarm8.setStatus('current')
if mibBuilder.loadTexts: psStatusAlarm8.setDescription(' BDOCA ')
psStatusAlarm9 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 9, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 3, 2, 1))).clone(namedValues=NamedValues(("notactive", 0), ("warning", 4), ("minor", 3), ("major", 2), ("critical", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psStatusAlarm9.setStatus('current')
if mibBuilder.loadTexts: psStatusAlarm9.setDescription(' DC Too High Rectifier is off ')
psStatusAlarm10 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 9, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 3, 2, 1))).clone(namedValues=NamedValues(("notactive", 0), ("warning", 4), ("minor", 3), ("major", 2), ("critical", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psStatusAlarm10.setStatus('current')
if mibBuilder.loadTexts: psStatusAlarm10.setDescription(' DC High Worning ')
psStatusAlarm11 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 9, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 3, 2, 1))).clone(namedValues=NamedValues(("notactive", 0), ("warning", 4), ("minor", 3), ("major", 2), ("critical", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psStatusAlarm11.setStatus('current')
if mibBuilder.loadTexts: psStatusAlarm11.setDescription(' DC Too LOw Lvd Disconnect ')
psStatusAlarm12 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 9, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 3, 2, 1))).clone(namedValues=NamedValues(("notactive", 0), ("warning", 4), ("minor", 3), ("major", 2), ("critical", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psStatusAlarm12.setStatus('current')
if mibBuilder.loadTexts: psStatusAlarm12.setDescription(' DC Low Worning ')
psStatusAlarm13 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 9, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 3, 2, 1))).clone(namedValues=NamedValues(("notactive", 0), ("warning", 4), ("minor", 3), ("major", 2), ("critical", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psStatusAlarm13.setStatus('current')
if mibBuilder.loadTexts: psStatusAlarm13.setDescription(' LVD Contact Open ')
psStatusAlarm14 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 9, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 3, 2, 1))).clone(namedValues=NamedValues(("notactive", 0), ("warning", 4), ("minor", 3), ("major", 2), ("critical", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psStatusAlarm14.setStatus('current')
if mibBuilder.loadTexts: psStatusAlarm14.setDescription(' Load Breaker Open ')
psStatusAlarm15 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 9, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 3, 2, 1))).clone(namedValues=NamedValues(("notactive", 0), ("warning", 4), ("minor", 3), ("major", 2), ("critical", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psStatusAlarm15.setStatus('current')
if mibBuilder.loadTexts: psStatusAlarm15.setDescription(' System Running in Equalizing ')
psStatusAlarm16 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 9, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 3, 2, 1))).clone(namedValues=NamedValues(("notactive", 0), ("warning", 4), ("minor", 3), ("major", 2), ("critical", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psStatusAlarm16.setStatus('current')
if mibBuilder.loadTexts: psStatusAlarm16.setDescription(' Last Battery Test Fail ')
psStatusAlarm17 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 9, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 3, 2, 1))).clone(namedValues=NamedValues(("notactive", 0), ("warning", 4), ("minor", 3), ("major", 2), ("critical", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psStatusAlarm17.setStatus('current')
if mibBuilder.loadTexts: psStatusAlarm17.setDescription(' Reserve  ')
psStatusAlarm18 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 9, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 3, 2, 1))).clone(namedValues=NamedValues(("notactive", 0), ("warning", 4), ("minor", 3), ("major", 2), ("critical", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psStatusAlarm18.setStatus('current')
if mibBuilder.loadTexts: psStatusAlarm18.setDescription(' Reserve ')
psStatusAlarm19 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 9, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 3, 2, 1))).clone(namedValues=NamedValues(("notactive", 0), ("warning", 4), ("minor", 3), ("major", 2), ("critical", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psStatusAlarm19.setStatus('current')
if mibBuilder.loadTexts: psStatusAlarm19.setDescription(' Reserve ')
psStatusAlarm20 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 9, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 3, 2, 1))).clone(namedValues=NamedValues(("notactive", 0), ("warning", 4), ("minor", 3), ("major", 2), ("critical", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psStatusAlarm20.setStatus('current')
if mibBuilder.loadTexts: psStatusAlarm20.setDescription(' Reserver ')
psStatusAlarm21 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 9, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 3, 2, 1))).clone(namedValues=NamedValues(("notactive", 0), ("warning", 4), ("minor", 3), ("major", 2), ("critical", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psStatusAlarm21.setStatus('current')
if mibBuilder.loadTexts: psStatusAlarm21.setDescription(' PD Not Responding ')
psStatusAlarm22 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 9, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 3, 2, 1))).clone(namedValues=NamedValues(("notactive", 0), ("warning", 4), ("minor", 3), ("major", 2), ("critical", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psStatusAlarm22.setStatus('current')
if mibBuilder.loadTexts: psStatusAlarm22.setDescription(' Invertor Not Responding ')
psStatusAlarm23 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 9, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 3, 2, 1))).clone(namedValues=NamedValues(("notactive", 0), ("warning", 4), ("minor", 3), ("major", 2), ("critical", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psStatusAlarm23.setStatus('current')
if mibBuilder.loadTexts: psStatusAlarm23.setDescription(' Rectifier Not Responding ')
psStatusAlarm24 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 9, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 3, 2, 1))).clone(namedValues=NamedValues(("notactive", 0), ("warning", 4), ("minor", 3), ("major", 2), ("critical", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psStatusAlarm24.setStatus('current')
if mibBuilder.loadTexts: psStatusAlarm24.setDescription(' Last Self Test Failed ')
psStatusAlarm25 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 9, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 3, 2, 1))).clone(namedValues=NamedValues(("notactive", 0), ("warning", 4), ("minor", 3), ("major", 2), ("critical", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psStatusAlarm25.setStatus('current')
if mibBuilder.loadTexts: psStatusAlarm25.setDescription(' Bad Fuse ')
psStatusAlarm26 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 9, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 3, 2, 1))).clone(namedValues=NamedValues(("notactive", 0), ("warning", 4), ("minor", 3), ("major", 2), ("critical", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psStatusAlarm26.setStatus('current')
if mibBuilder.loadTexts: psStatusAlarm26.setDescription(' Bad Current Sharing in Rectifier ')
psStatusAlarm27 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 9, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 3, 2, 1))).clone(namedValues=NamedValues(("notactive", 0), ("warning", 4), ("minor", 3), ("major", 2), ("critical", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psStatusAlarm27.setStatus('current')
if mibBuilder.loadTexts: psStatusAlarm27.setDescription(' Bad Output in Rectifier ')
psStatusAlarm28 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 9, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 3, 2, 1))).clone(namedValues=NamedValues(("notactive", 0), ("warning", 4), ("minor", 3), ("major", 2), ("critical", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psStatusAlarm28.setStatus('current')
if mibBuilder.loadTexts: psStatusAlarm28.setDescription(' Bad Relay Board ')
psStatusAlarm29 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 9, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 3, 2, 1))).clone(namedValues=NamedValues(("notactive", 0), ("warning", 4), ("minor", 3), ("major", 2), ("critical", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psStatusAlarm29.setStatus('current')
if mibBuilder.loadTexts: psStatusAlarm29.setDescription(' Load Current too High ')
psStatusAlarm30 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 9, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 3, 2, 1))).clone(namedValues=NamedValues(("notactive", 0), ("warning", 4), ("minor", 3), ("major", 2), ("critical", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psStatusAlarm30.setStatus('current')
if mibBuilder.loadTexts: psStatusAlarm30.setDescription(' Serge Blown ')
psStatusAlarm31 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 9, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 3, 2, 1))).clone(namedValues=NamedValues(("notactive", 0), ("warning", 4), ("minor", 3), ("major", 2), ("critical", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psStatusAlarm31.setStatus('current')
if mibBuilder.loadTexts: psStatusAlarm31.setDescription(' Gets Set at Start Up ')
psStatusAlarm32 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 9, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 3, 2, 1))).clone(namedValues=NamedValues(("notactive", 0), ("warning", 4), ("minor", 3), ("major", 2), ("critical", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psStatusAlarm32.setStatus('current')
if mibBuilder.loadTexts: psStatusAlarm32.setDescription(' Misc Alarm ')
psStatusAlarm33 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 9, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 3, 2, 1))).clone(namedValues=NamedValues(("notactive", 0), ("warning", 4), ("minor", 3), ("major", 2), ("critical", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psStatusAlarm33.setStatus('current')
if mibBuilder.loadTexts: psStatusAlarm33.setDescription(' Spare ')
psStatusAlarm34 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 9, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 3, 2, 1))).clone(namedValues=NamedValues(("notactive", 0), ("warning", 4), ("minor", 3), ("major", 2), ("critical", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psStatusAlarm34.setStatus('current')
if mibBuilder.loadTexts: psStatusAlarm34.setDescription(' Spare ')
psStatusAlarm35 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 9, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 3, 2, 1))).clone(namedValues=NamedValues(("notactive", 0), ("warning", 4), ("minor", 3), ("major", 2), ("critical", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psStatusAlarm35.setStatus('current')
if mibBuilder.loadTexts: psStatusAlarm35.setDescription(' Spare ')
psStatusAlarm36 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 9, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 3, 2, 1))).clone(namedValues=NamedValues(("notactive", 0), ("warning", 4), ("minor", 3), ("major", 2), ("critical", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psStatusAlarm36.setStatus('current')
if mibBuilder.loadTexts: psStatusAlarm36.setDescription(' Spare ')
psStatusAlarm37 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 9, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 3, 2, 1))).clone(namedValues=NamedValues(("notactive", 0), ("warning", 4), ("minor", 3), ("major", 2), ("critical", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psStatusAlarm37.setStatus('current')
if mibBuilder.loadTexts: psStatusAlarm37.setDescription(' Spare ')
psStatusAlarm38 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 9, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 3, 2, 1))).clone(namedValues=NamedValues(("notactive", 0), ("warning", 4), ("minor", 3), ("major", 2), ("critical", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psStatusAlarm38.setStatus('current')
if mibBuilder.loadTexts: psStatusAlarm38.setDescription(' Spare ')
psStatusAlarm39 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 9, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 3, 2, 1))).clone(namedValues=NamedValues(("notactive", 0), ("warning", 4), ("minor", 3), ("major", 2), ("critical", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psStatusAlarm39.setStatus('current')
if mibBuilder.loadTexts: psStatusAlarm39.setDescription(' Spare ')
psStatusAlarm40 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 9, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 3, 2, 1))).clone(namedValues=NamedValues(("notactive", 0), ("warning", 4), ("minor", 3), ("major", 2), ("critical", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psStatusAlarm40.setStatus('current')
if mibBuilder.loadTexts: psStatusAlarm40.setDescription(' Spare ')
psStatusAlarm41 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 9, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 3, 2, 1))).clone(namedValues=NamedValues(("notactive", 0), ("warning", 4), ("minor", 3), ("major", 2), ("critical", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psStatusAlarm41.setStatus('current')
if mibBuilder.loadTexts: psStatusAlarm41.setDescription(' Spare ')
psStatusAlarm42 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 9, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 3, 2, 1))).clone(namedValues=NamedValues(("notactive", 0), ("warning", 4), ("minor", 3), ("major", 2), ("critical", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psStatusAlarm42.setStatus('current')
if mibBuilder.loadTexts: psStatusAlarm42.setDescription(' Spare ')
psStatusAlarm43 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 9, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 3, 2, 1))).clone(namedValues=NamedValues(("notactive", 0), ("warning", 4), ("minor", 3), ("major", 2), ("critical", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psStatusAlarm43.setStatus('current')
if mibBuilder.loadTexts: psStatusAlarm43.setDescription(' Spare ')
psStatusAlarm44 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 9, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 3, 2, 1))).clone(namedValues=NamedValues(("notactive", 0), ("warning", 4), ("minor", 3), ("major", 2), ("critical", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psStatusAlarm44.setStatus('current')
if mibBuilder.loadTexts: psStatusAlarm44.setDescription(' Spare ')
psStatusAlarm45 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 9, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 3, 2, 1))).clone(namedValues=NamedValues(("notactive", 0), ("warning", 4), ("minor", 3), ("major", 2), ("critical", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psStatusAlarm45.setStatus('current')
if mibBuilder.loadTexts: psStatusAlarm45.setDescription(' Spare ')
psStatusAlarm46 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 9, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 3, 2, 1))).clone(namedValues=NamedValues(("notactive", 0), ("warning", 4), ("minor", 3), ("major", 2), ("critical", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psStatusAlarm46.setStatus('current')
if mibBuilder.loadTexts: psStatusAlarm46.setDescription(' Spare ')
psStatusAlarm47 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 9, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 3, 2, 1))).clone(namedValues=NamedValues(("notactive", 0), ("warning", 4), ("minor", 3), ("major", 2), ("critical", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psStatusAlarm47.setStatus('current')
if mibBuilder.loadTexts: psStatusAlarm47.setDescription(' Spare ')
psStatusAlarm48 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 9, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 3, 2, 1))).clone(namedValues=NamedValues(("notactive", 0), ("warning", 4), ("minor", 3), ("major", 2), ("critical", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psStatusAlarm48.setStatus('current')
if mibBuilder.loadTexts: psStatusAlarm48.setDescription(' Spare ')
psStatusAlarm49 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 9, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 3, 2, 1))).clone(namedValues=NamedValues(("notactive", 0), ("warning", 4), ("minor", 3), ("major", 2), ("critical", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psStatusAlarm49.setStatus('current')
if mibBuilder.loadTexts: psStatusAlarm49.setDescription(' Spare ')
psStatusAlarm50 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 9, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 3, 2, 1))).clone(namedValues=NamedValues(("notactive", 0), ("warning", 4), ("minor", 3), ("major", 2), ("critical", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psStatusAlarm50.setStatus('current')
if mibBuilder.loadTexts: psStatusAlarm50.setDescription(' Spare ')
psStatusAlarm51 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 9, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 3, 2, 1))).clone(namedValues=NamedValues(("notactive", 0), ("warning", 4), ("minor", 3), ("major", 2), ("critical", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psStatusAlarm51.setStatus('current')
if mibBuilder.loadTexts: psStatusAlarm51.setDescription(' Spare ')
psStatusAlarm52 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 9, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 3, 2, 1))).clone(namedValues=NamedValues(("notactive", 0), ("warning", 4), ("minor", 3), ("major", 2), ("critical", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psStatusAlarm52.setStatus('current')
if mibBuilder.loadTexts: psStatusAlarm52.setDescription(' Spare ')
psStatusAlarm53 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 9, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 3, 2, 1))).clone(namedValues=NamedValues(("notactive", 0), ("warning", 4), ("minor", 3), ("major", 2), ("critical", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psStatusAlarm53.setStatus('current')
if mibBuilder.loadTexts: psStatusAlarm53.setDescription(' Spare ')
psStatusAlarm54 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 9, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 3, 2, 1))).clone(namedValues=NamedValues(("notactive", 0), ("warning", 4), ("minor", 3), ("major", 2), ("critical", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psStatusAlarm54.setStatus('current')
if mibBuilder.loadTexts: psStatusAlarm54.setDescription(' Spare ')
psStatusAlarm55 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 9, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 3, 2, 1))).clone(namedValues=NamedValues(("notactive", 0), ("warning", 4), ("minor", 3), ("major", 2), ("critical", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psStatusAlarm55.setStatus('current')
if mibBuilder.loadTexts: psStatusAlarm55.setDescription(' Spare ')
psStatusAlarm56 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 9, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 3, 2, 1))).clone(namedValues=NamedValues(("notactive", 0), ("warning", 4), ("minor", 3), ("major", 2), ("critical", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psStatusAlarm56.setStatus('current')
if mibBuilder.loadTexts: psStatusAlarm56.setDescription(' Spare ')
psStatusAlarm57 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 9, 57), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 3, 2, 1))).clone(namedValues=NamedValues(("notactive", 0), ("warning", 4), ("minor", 3), ("major", 2), ("critical", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psStatusAlarm57.setStatus('current')
if mibBuilder.loadTexts: psStatusAlarm57.setDescription(' Spare ')
psStatusAlarm58 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 9, 58), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 3, 2, 1))).clone(namedValues=NamedValues(("notactive", 0), ("warning", 4), ("minor", 3), ("major", 2), ("critical", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psStatusAlarm58.setStatus('current')
if mibBuilder.loadTexts: psStatusAlarm58.setDescription(' Spare ')
psStatusAlarm59 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 9, 59), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 3, 2, 1))).clone(namedValues=NamedValues(("notactive", 0), ("warning", 4), ("minor", 3), ("major", 2), ("critical", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psStatusAlarm59.setStatus('current')
if mibBuilder.loadTexts: psStatusAlarm59.setDescription(' Spare ')
psStatusAlarm60 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 9, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 3, 2, 1))).clone(namedValues=NamedValues(("notactive", 0), ("warning", 4), ("minor", 3), ("major", 2), ("critical", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psStatusAlarm60.setStatus('current')
if mibBuilder.loadTexts: psStatusAlarm60.setDescription(' Spare ')
psStatusAlarm61 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 9, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 3, 2, 1))).clone(namedValues=NamedValues(("notactive", 0), ("warning", 4), ("minor", 3), ("major", 2), ("critical", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psStatusAlarm61.setStatus('current')
if mibBuilder.loadTexts: psStatusAlarm61.setDescription(' Spare ')
psStatusAlarm62 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 9, 62), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 3, 2, 1))).clone(namedValues=NamedValues(("notactive", 0), ("warning", 4), ("minor", 3), ("major", 2), ("critical", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psStatusAlarm62.setStatus('current')
if mibBuilder.loadTexts: psStatusAlarm62.setDescription(' Spare ')
psStatusAlarm63 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 9, 63), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 3, 2, 1))).clone(namedValues=NamedValues(("notactive", 0), ("warning", 4), ("minor", 3), ("major", 2), ("critical", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psStatusAlarm63.setStatus('current')
if mibBuilder.loadTexts: psStatusAlarm63.setDescription(' Spare ')
psStatusAlarm64 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 9, 64), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 3, 2, 1))).clone(namedValues=NamedValues(("notactive", 0), ("warning", 4), ("minor", 3), ("major", 2), ("critical", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psStatusAlarm64.setStatus('current')
if mibBuilder.loadTexts: psStatusAlarm64.setDescription(' Spare ')
psStatusAlarm65 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 9, 65), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 3, 2, 1))).clone(namedValues=NamedValues(("notactive", 0), ("warning", 4), ("minor", 3), ("major", 2), ("critical", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psStatusAlarm65.setStatus('current')
if mibBuilder.loadTexts: psStatusAlarm65.setDescription(' Spare ')
psStatusAlarm66 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 9, 66), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 3, 2, 1))).clone(namedValues=NamedValues(("notactive", 0), ("warning", 4), ("minor", 3), ("major", 2), ("critical", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psStatusAlarm66.setStatus('current')
if mibBuilder.loadTexts: psStatusAlarm66.setDescription(' Spare ')
psStatusAlarm67 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 9, 67), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 3, 2, 1))).clone(namedValues=NamedValues(("notactive", 0), ("warning", 4), ("minor", 3), ("major", 2), ("critical", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psStatusAlarm67.setStatus('current')
if mibBuilder.loadTexts: psStatusAlarm67.setDescription(' Spare ')
psStatusAlarm68 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 9, 68), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 3, 2, 1))).clone(namedValues=NamedValues(("notactive", 0), ("warning", 4), ("minor", 3), ("major", 2), ("critical", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psStatusAlarm68.setStatus('current')
if mibBuilder.loadTexts: psStatusAlarm68.setDescription(' Spare ')
psStatusAlarm69 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 9, 69), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 3, 2, 1))).clone(namedValues=NamedValues(("notactive", 0), ("warning", 4), ("minor", 3), ("major", 2), ("critical", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psStatusAlarm69.setStatus('current')
if mibBuilder.loadTexts: psStatusAlarm69.setDescription(' Spare ')
psStatusAlarm70 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 9, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 3, 2, 1))).clone(namedValues=NamedValues(("notactive", 0), ("warning", 4), ("minor", 3), ("major", 2), ("critical", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psStatusAlarm70.setStatus('current')
if mibBuilder.loadTexts: psStatusAlarm70.setDescription(' Spare ')
psStatusAlarm71 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 9, 71), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 3, 2, 1))).clone(namedValues=NamedValues(("notactive", 0), ("warning", 4), ("minor", 3), ("major", 2), ("critical", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psStatusAlarm71.setStatus('current')
if mibBuilder.loadTexts: psStatusAlarm71.setDescription(' Spare ')
psStatusAlarm72 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 9, 72), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 3, 2, 1))).clone(namedValues=NamedValues(("notactive", 0), ("warning", 4), ("minor", 3), ("major", 2), ("critical", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psStatusAlarm72.setStatus('current')
if mibBuilder.loadTexts: psStatusAlarm72.setDescription(' Spare ')
psStatusAlarm73 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 9, 73), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 3, 2, 1))).clone(namedValues=NamedValues(("notactive", 0), ("warning", 4), ("minor", 3), ("major", 2), ("critical", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psStatusAlarm73.setStatus('current')
if mibBuilder.loadTexts: psStatusAlarm73.setDescription(' Spare ')
psStatusAlarm74 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 9, 74), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 3, 2, 1))).clone(namedValues=NamedValues(("notactive", 0), ("warning", 4), ("minor", 3), ("major", 2), ("critical", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psStatusAlarm74.setStatus('current')
if mibBuilder.loadTexts: psStatusAlarm74.setDescription(' Spare ')
psStatusAlarm75 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 9, 75), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 3, 2, 1))).clone(namedValues=NamedValues(("notactive", 0), ("warning", 4), ("minor", 3), ("major", 2), ("critical", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psStatusAlarm75.setStatus('current')
if mibBuilder.loadTexts: psStatusAlarm75.setDescription(' Spare ')
psStatusAlarm76 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 9, 76), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 3, 2, 1))).clone(namedValues=NamedValues(("notactive", 0), ("warning", 4), ("minor", 3), ("major", 2), ("critical", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psStatusAlarm76.setStatus('current')
if mibBuilder.loadTexts: psStatusAlarm76.setDescription(' Spare ')
psStatusAlarm77 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 9, 77), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 3, 2, 1))).clone(namedValues=NamedValues(("notactive", 0), ("warning", 4), ("minor", 3), ("major", 2), ("critical", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psStatusAlarm77.setStatus('current')
if mibBuilder.loadTexts: psStatusAlarm77.setDescription(' Spare ')
psStatusAlarm78 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 9, 78), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 3, 2, 1))).clone(namedValues=NamedValues(("notactive", 0), ("warning", 4), ("minor", 3), ("major", 2), ("critical", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psStatusAlarm78.setStatus('current')
if mibBuilder.loadTexts: psStatusAlarm78.setDescription(' Spare ')
psStatusAlarm79 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 9, 79), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 3, 2, 1))).clone(namedValues=NamedValues(("notactive", 0), ("warning", 4), ("minor", 3), ("major", 2), ("critical", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psStatusAlarm79.setStatus('current')
if mibBuilder.loadTexts: psStatusAlarm79.setDescription(' Spare ')
psStatusAlarm80 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 9, 80), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 3, 2, 1))).clone(namedValues=NamedValues(("notactive", 0), ("warning", 4), ("minor", 3), ("major", 2), ("critical", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psStatusAlarm80.setStatus('current')
if mibBuilder.loadTexts: psStatusAlarm80.setDescription(' Spare ')
psStatusAlarm81 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 9, 81), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 3, 2, 1))).clone(namedValues=NamedValues(("notactive", 0), ("warning", 4), ("minor", 3), ("major", 2), ("critical", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psStatusAlarm81.setStatus('current')
if mibBuilder.loadTexts: psStatusAlarm81.setDescription(' Spare ')
psStatusAlarm82 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 9, 82), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 3, 2, 1))).clone(namedValues=NamedValues(("notactive", 0), ("warning", 4), ("minor", 3), ("major", 2), ("critical", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psStatusAlarm82.setStatus('current')
if mibBuilder.loadTexts: psStatusAlarm82.setDescription(' Spare ')
psStatusAlarm83 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 9, 83), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 3, 2, 1))).clone(namedValues=NamedValues(("notactive", 0), ("warning", 4), ("minor", 3), ("major", 2), ("critical", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psStatusAlarm83.setStatus('current')
if mibBuilder.loadTexts: psStatusAlarm83.setDescription(' Spare ')
psStatusAlarm84 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 9, 84), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 3, 2, 1))).clone(namedValues=NamedValues(("notactive", 0), ("warning", 4), ("minor", 3), ("major", 2), ("critical", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psStatusAlarm84.setStatus('current')
if mibBuilder.loadTexts: psStatusAlarm84.setDescription(' Spare ')
psStatusAlarm85 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 9, 85), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 3, 2, 1))).clone(namedValues=NamedValues(("notactive", 0), ("warning", 4), ("minor", 3), ("major", 2), ("critical", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psStatusAlarm85.setStatus('current')
if mibBuilder.loadTexts: psStatusAlarm85.setDescription(' Spare ')
psStatusAlarm86 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 9, 86), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 3, 2, 1))).clone(namedValues=NamedValues(("notactive", 0), ("warning", 4), ("minor", 3), ("major", 2), ("critical", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psStatusAlarm86.setStatus('current')
if mibBuilder.loadTexts: psStatusAlarm86.setDescription(' Spare ')
psStatusAlarm87 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 9, 87), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 3, 2, 1))).clone(namedValues=NamedValues(("notactive", 0), ("warning", 4), ("minor", 3), ("major", 2), ("critical", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psStatusAlarm87.setStatus('current')
if mibBuilder.loadTexts: psStatusAlarm87.setDescription(' Spare ')
psStatusAlarm88 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 9, 88), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 3, 2, 1))).clone(namedValues=NamedValues(("notactive", 0), ("warning", 4), ("minor", 3), ("major", 2), ("critical", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psStatusAlarm88.setStatus('current')
if mibBuilder.loadTexts: psStatusAlarm88.setDescription(' Spare ')
psStatusAlarm89 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 9, 89), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 3, 2, 1))).clone(namedValues=NamedValues(("notactive", 0), ("warning", 4), ("minor", 3), ("major", 2), ("critical", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psStatusAlarm89.setStatus('current')
if mibBuilder.loadTexts: psStatusAlarm89.setDescription(' Spare ')
psStatusAlarm90 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 9, 90), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 3, 2, 1))).clone(namedValues=NamedValues(("notactive", 0), ("warning", 4), ("minor", 3), ("major", 2), ("critical", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psStatusAlarm90.setStatus('current')
if mibBuilder.loadTexts: psStatusAlarm90.setDescription(' Spare ')
psStatusAlarm91 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 9, 91), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 3, 2, 1))).clone(namedValues=NamedValues(("notactive", 0), ("warning", 4), ("minor", 3), ("major", 2), ("critical", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psStatusAlarm91.setStatus('current')
if mibBuilder.loadTexts: psStatusAlarm91.setDescription(' Spare ')
psStatusAlarm92 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 9, 92), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 3, 2, 1))).clone(namedValues=NamedValues(("notactive", 0), ("warning", 4), ("minor", 3), ("major", 2), ("critical", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psStatusAlarm92.setStatus('current')
if mibBuilder.loadTexts: psStatusAlarm92.setDescription(' Spare ')
psStatusAlarm93 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 9, 93), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 3, 2, 1))).clone(namedValues=NamedValues(("notactive", 0), ("warning", 4), ("minor", 3), ("major", 2), ("critical", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psStatusAlarm93.setStatus('current')
if mibBuilder.loadTexts: psStatusAlarm93.setDescription(' Spare ')
psStatusAlarm94 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 9, 94), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 3, 2, 1))).clone(namedValues=NamedValues(("notactive", 0), ("warning", 4), ("minor", 3), ("major", 2), ("critical", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psStatusAlarm94.setStatus('current')
if mibBuilder.loadTexts: psStatusAlarm94.setDescription(' Spare ')
psStatusAlarm95 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 9, 95), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 3, 2, 1))).clone(namedValues=NamedValues(("notactive", 0), ("warning", 4), ("minor", 3), ("major", 2), ("critical", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psStatusAlarm95.setStatus('current')
if mibBuilder.loadTexts: psStatusAlarm95.setDescription(' Spare ')
psStatusAlarm96 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 9, 96), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 3, 2, 1))).clone(namedValues=NamedValues(("notactive", 0), ("warning", 4), ("minor", 3), ("major", 2), ("critical", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psStatusAlarm96.setStatus('current')
if mibBuilder.loadTexts: psStatusAlarm96.setDescription(' Spare ')
psStatusAlarmStruct = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 9, 97), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psStatusAlarmStruct.setStatus('current')
if mibBuilder.loadTexts: psStatusAlarmStruct.setDescription(' The Alarm 32 bit integer  struct ')
psStatusAlarmStruct1 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 9, 98), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psStatusAlarmStruct1.setStatus('current')
if mibBuilder.loadTexts: psStatusAlarmStruct1.setDescription(' The Alarm 32 bit integer  struct ')
psStatusAlarmStruct2 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 9, 99), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psStatusAlarmStruct2.setStatus('current')
if mibBuilder.loadTexts: psStatusAlarmStruct2.setDescription(' The Alarm 32 bit integer  struct ')
psUnitSysName = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psUnitSysName.setStatus('current')
if mibBuilder.loadTexts: psUnitSysName.setDescription(' Name of the system ')
psUnitManufacture = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psUnitManufacture.setStatus('current')
if mibBuilder.loadTexts: psUnitManufacture.setDescription(' Name of Manufacture ')
psUnitBatteryType = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psUnitBatteryType.setStatus('current')
if mibBuilder.loadTexts: psUnitBatteryType.setDescription(' Type of battery ')
psUnitPSType = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psUnitPSType.setStatus('current')
if mibBuilder.loadTexts: psUnitPSType.setDescription(' Type of power supply ')
psUnitControllerType = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psUnitControllerType.setStatus('current')
if mibBuilder.loadTexts: psUnitControllerType.setDescription(' Type of Controller ')
psUnitSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psUnitSoftwareVersion.setStatus('current')
if mibBuilder.loadTexts: psUnitSoftwareVersion.setDescription(' Software Version ')
psUnitComProtocolVersion = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psUnitComProtocolVersion.setStatus('current')
if mibBuilder.loadTexts: psUnitComProtocolVersion.setDescription(' Communication protocol version ')
psUnitSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psUnitSerialNumber.setStatus('current')
if mibBuilder.loadTexts: psUnitSerialNumber.setDescription(' System Serial Number ')
psUnitRTCDay = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psUnitRTCDay.setStatus('current')
if mibBuilder.loadTexts: psUnitRTCDay.setDescription(' System Real Time Clock Day ')
psUnitRTCMonth = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psUnitRTCMonth.setStatus('current')
if mibBuilder.loadTexts: psUnitRTCMonth.setDescription(' System Real Time Clock Month ')
psUnitRTCYear = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psUnitRTCYear.setStatus('current')
if mibBuilder.loadTexts: psUnitRTCYear.setDescription(' System Real Time Clock Year ')
psUnitRTCHour = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psUnitRTCHour.setStatus('current')
if mibBuilder.loadTexts: psUnitRTCHour.setDescription(' System Real Time Clock Hour ')
psUnitRTCMinute = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psUnitRTCMinute.setStatus('current')
if mibBuilder.loadTexts: psUnitRTCMinute.setDescription(' System Real Time Clock Minutes ')
psUnitRTCSecond = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psUnitRTCSecond.setStatus('current')
if mibBuilder.loadTexts: psUnitRTCSecond.setDescription(' System Real Time Clock Seconds ')
psWorkingTime = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psWorkingTime.setStatus('current')
if mibBuilder.loadTexts: psWorkingTime.setDescription(' Hours of Working Time')
psScreenShot = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 1, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(160, 160)).setFixedLength(160)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psScreenShot.setStatus('current')
if mibBuilder.loadTexts: psScreenShot.setDescription(' Display Led Image')
psSpareIde0 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psSpareIde0.setStatus('current')
if mibBuilder.loadTexts: psSpareIde0.setDescription(' Spare IDE')
psSpareIde1 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psSpareIde1.setStatus('current')
if mibBuilder.loadTexts: psSpareIde1.setDescription(' Spare IDE')
psSpareIde2 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psSpareIde2.setStatus('current')
if mibBuilder.loadTexts: psSpareIde2.setDescription(' Spare IDE')
psSpareIde3 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psSpareIde3.setStatus('current')
if mibBuilder.loadTexts: psSpareIde3.setDescription(' Spare IDE')
psSpareIde4 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psSpareIde4.setStatus('current')
if mibBuilder.loadTexts: psSpareIde4.setDescription(' Spare IDE')
psSpareIde5 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 1, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psSpareIde5.setStatus('current')
if mibBuilder.loadTexts: psSpareIde5.setDescription(' Spare IDE')
psSpareIde6 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 1, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psSpareIde6.setStatus('current')
if mibBuilder.loadTexts: psSpareIde6.setDescription(' Spare IDE')
psSpareIde7 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 1, 24), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psSpareIde7.setStatus('current')
if mibBuilder.loadTexts: psSpareIde7.setDescription(' Spare IDE')
psHourlyTable = MibTable((1, 3, 6, 1, 4, 1, 6050, 1, 10, 1), )
if mibBuilder.loadTexts: psHourlyTable.setStatus('current')
if mibBuilder.loadTexts: psHourlyTable.setDescription('The PS Hourly  Information table.')
psHourlyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6050, 1, 10, 1, 1), ).setIndexNames((0, "GAMATRONIC-MIB", "psHourlyIndex"))
if mibBuilder.loadTexts: psHourlyEntry.setStatus('current')
if mibBuilder.loadTexts: psHourlyEntry.setDescription('An entry in this table defines statistics  per hour. The entry is indexed by the psHorlyIndex. ')
psHourlyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 10, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psHourlyIndex.setStatus('current')
if mibBuilder.loadTexts: psHourlyIndex.setDescription(' The Hourlytable index.')
psHourlyMaxVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 10, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psHourlyMaxVoltage.setStatus('current')
if mibBuilder.loadTexts: psHourlyMaxVoltage.setDescription('Maximum Voltage  present in 0.01V ')
psHourlyMinVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 10, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psHourlyMinVoltage.setStatus('current')
if mibBuilder.loadTexts: psHourlyMinVoltage.setDescription('Miniimum Voltage  present in 0.01V ')
psHourlyAvrVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 10, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psHourlyAvrVoltage.setStatus('current')
if mibBuilder.loadTexts: psHourlyAvrVoltage.setDescription('Average Voltage  present in 0.01V ')
psHourlyMinCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 10, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psHourlyMinCurrent.setStatus('current')
if mibBuilder.loadTexts: psHourlyMinCurrent.setDescription('Minimum current  present in 0.1A ')
psHourlyMaxCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 10, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psHourlyMaxCurrent.setStatus('current')
if mibBuilder.loadTexts: psHourlyMaxCurrent.setDescription('Maximum current  present in 0.1A ')
psHourlyAvrCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 10, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psHourlyAvrCurrent.setStatus('current')
if mibBuilder.loadTexts: psHourlyAvrCurrent.setDescription('Average current  present in 0.1A ')
psHourlyEndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 10, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psHourlyEndTime.setStatus('current')
if mibBuilder.loadTexts: psHourlyEndTime.setDescription(' End Time of hour interval . Between 00 to 23 ')
psDailyTable = MibTable((1, 3, 6, 1, 4, 1, 6050, 1, 10, 2), )
if mibBuilder.loadTexts: psDailyTable.setStatus('current')
if mibBuilder.loadTexts: psDailyTable.setDescription('The PS Daily  Information table.')
psDailyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6050, 1, 10, 2, 1), ).setIndexNames((0, "GAMATRONIC-MIB", "psDailyIndex"))
if mibBuilder.loadTexts: psDailyEntry.setStatus('current')
if mibBuilder.loadTexts: psDailyEntry.setDescription('An entry in this table defines statistics  per hour. The entry is indexed by the psHorlyIndex. ')
psDailyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 10, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psDailyIndex.setStatus('current')
if mibBuilder.loadTexts: psDailyIndex.setDescription(' The Dailytable index.')
psDailyMaxVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 10, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psDailyMaxVoltage.setStatus('current')
if mibBuilder.loadTexts: psDailyMaxVoltage.setDescription('Maximum Voltage  present in 0.01V ')
psDailyMinVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 10, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psDailyMinVoltage.setStatus('current')
if mibBuilder.loadTexts: psDailyMinVoltage.setDescription('Miniimum Voltage  present in 0.01V ')
psDailyAvrVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 10, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psDailyAvrVoltage.setStatus('current')
if mibBuilder.loadTexts: psDailyAvrVoltage.setDescription('Average Voltage  present in 0.01V ')
psDailyMinCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 10, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psDailyMinCurrent.setStatus('current')
if mibBuilder.loadTexts: psDailyMinCurrent.setDescription('Minimum current  present in 0.1A ')
psDailyMaxCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 10, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psDailyMaxCurrent.setStatus('current')
if mibBuilder.loadTexts: psDailyMaxCurrent.setDescription('Maximum current  present in 0.1A ')
psDailyAvrCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 10, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psDailyAvrCurrent.setStatus('current')
if mibBuilder.loadTexts: psDailyAvrCurrent.setDescription('Average current  present in 0.1A ')
psDailyDayOfMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 10, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psDailyDayOfMonth.setStatus('current')
if mibBuilder.loadTexts: psDailyDayOfMonth.setDescription('Day of Month Between 1 to 31 ')
psMonthlyTable = MibTable((1, 3, 6, 1, 4, 1, 6050, 1, 10, 3), )
if mibBuilder.loadTexts: psMonthlyTable.setStatus('current')
if mibBuilder.loadTexts: psMonthlyTable.setDescription('The PS Monthly  Information table.')
psMonthlyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6050, 1, 10, 3, 1), ).setIndexNames((0, "GAMATRONIC-MIB", "psMonthlyIndex"))
if mibBuilder.loadTexts: psMonthlyEntry.setStatus('current')
if mibBuilder.loadTexts: psMonthlyEntry.setDescription('An entry in this table defines statistics  per hour. The entry is indexed by the psHorlyIndex. ')
psMonthlyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 10, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psMonthlyIndex.setStatus('current')
if mibBuilder.loadTexts: psMonthlyIndex.setDescription(' The Monthlytable index.')
psMonthlyMaxVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 10, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psMonthlyMaxVoltage.setStatus('current')
if mibBuilder.loadTexts: psMonthlyMaxVoltage.setDescription('Maximum Voltage  present in 0.01V ')
psMonthlyMinVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 10, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psMonthlyMinVoltage.setStatus('current')
if mibBuilder.loadTexts: psMonthlyMinVoltage.setDescription('Miniimum Voltage  present in 0.01V ')
psMonthlyAvrVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 10, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psMonthlyAvrVoltage.setStatus('current')
if mibBuilder.loadTexts: psMonthlyAvrVoltage.setDescription('Average Voltage  present in 0.01V ')
psMonthlyMinCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 10, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psMonthlyMinCurrent.setStatus('current')
if mibBuilder.loadTexts: psMonthlyMinCurrent.setDescription('Minimum current  present in 0.1A ')
psMonthlyMaxCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 10, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psMonthlyMaxCurrent.setStatus('current')
if mibBuilder.loadTexts: psMonthlyMaxCurrent.setDescription('Maximum current  present in 0.1A ')
psMonthlyAvrCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 10, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psMonthlyAvrCurrent.setStatus('current')
if mibBuilder.loadTexts: psMonthlyAvrCurrent.setDescription('Average current  present in 0.1A ')
psMonthlyMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 10, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psMonthlyMonth.setStatus('current')
if mibBuilder.loadTexts: psMonthlyMonth.setDescription(' Month Between 1 to 12 ')
psHourlyFirst = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 10, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psHourlyFirst.setStatus('current')
if mibBuilder.loadTexts: psHourlyFirst.setDescription(' The first in Hourlytable index.')
psHourlyLast = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 10, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psHourlyLast.setStatus('current')
if mibBuilder.loadTexts: psHourlyLast.setDescription(' The Last in Hourlytable index.')
psDailyFirst = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 10, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psDailyFirst.setStatus('current')
if mibBuilder.loadTexts: psDailyFirst.setDescription(' The first in Daily table index.')
psDailyLast = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 10, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psDailyLast.setStatus('current')
if mibBuilder.loadTexts: psDailyLast.setDescription(' The Last in Daily table index.')
psMonthlyFirst = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 10, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psMonthlyFirst.setStatus('current')
if mibBuilder.loadTexts: psMonthlyFirst.setDescription(' The first in Monthly table index.')
psMonthlyLast = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 10, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psMonthlyLast.setStatus('current')
if mibBuilder.loadTexts: psMonthlyLast.setDescription(' The Last in Monthlytable index.')
psLogTable = MibTable((1, 3, 6, 1, 4, 1, 6050, 1, 11, 1), )
if mibBuilder.loadTexts: psLogTable.setStatus('current')
if mibBuilder.loadTexts: psLogTable.setDescription('The PS Hourly  Information table.')
psLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6050, 1, 11, 1, 1), ).setIndexNames((0, "GAMATRONIC-MIB", "psLogIndex"))
if mibBuilder.loadTexts: psLogEntry.setStatus('current')
if mibBuilder.loadTexts: psLogEntry.setDescription('An entry in this table defines statistics  per hour. The entry is indexed by the psHorlyIndex. ')
psLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 11, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psLogIndex.setStatus('current')
if mibBuilder.loadTexts: psLogIndex.setDescription(' TheLog  index.')
psLogDateYear = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 11, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psLogDateYear.setStatus('current')
if mibBuilder.loadTexts: psLogDateYear.setDescription('Log Date and Time  Year')
psLogDateMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 11, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psLogDateMonth.setStatus('current')
if mibBuilder.loadTexts: psLogDateMonth.setDescription('Log Date and Time  Month')
psLogDateDay = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 11, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psLogDateDay.setStatus('current')
if mibBuilder.loadTexts: psLogDateDay.setDescription('Log Date and Time  Day')
psLogDateHour = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 11, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psLogDateHour.setStatus('current')
if mibBuilder.loadTexts: psLogDateHour.setDescription('Log Date and Time  Hour')
psLogDateMinute = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 11, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psLogDateMinute.setStatus('current')
if mibBuilder.loadTexts: psLogDateMinute.setDescription('Log Date and Time  Minute')
psLogDateSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 11, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psLogDateSecond.setStatus('current')
if mibBuilder.loadTexts: psLogDateSecond.setDescription('Log Date and Time  Second')
psLogDCVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 11, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psLogDCVoltage.setStatus('current')
if mibBuilder.loadTexts: psLogDCVoltage.setDescription('Log DC Voltage ')
psLogStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 11, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psLogStatus.setStatus('current')
if mibBuilder.loadTexts: psLogStatus.setDescription('Contactor Status ')
psLogAlarmCode = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 11, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psLogAlarmCode.setStatus('current')
if mibBuilder.loadTexts: psLogAlarmCode.setDescription(' The Alarm Code ')
psLogDateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 11, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psLogDateTime.setStatus('current')
if mibBuilder.loadTexts: psLogDateTime.setDescription(' date time year 7 bits ,  month 4 bits , day 5 bits, hours 5 bits,minutes 6 bits, seconds/2  5 bits   ')
psLogGeneral = MibTableColumn((1, 3, 6, 1, 4, 1, 6050, 1, 11, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psLogGeneral.setStatus('current')
if mibBuilder.loadTexts: psLogGeneral.setDescription(' General bit strin Information. It is deferent between various PS types   ')
psLogFirst = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 11, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psLogFirst.setStatus('current')
if mibBuilder.loadTexts: psLogFirst.setDescription(' The First sequence in log entry ')
psLogLast = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 11, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psLogLast.setStatus('current')
if mibBuilder.loadTexts: psLogLast.setDescription(' The Last sequence in log entry ')
psTrapSeverity = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 12, 1), PsAlarmSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psTrapSeverity.setStatus('current')
if mibBuilder.loadTexts: psTrapSeverity.setDescription('The PS alarm Sevirity.')
psTrapStatus = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 12, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psTrapStatus.setStatus('current')
if mibBuilder.loadTexts: psTrapStatus.setDescription('The PS alarm status.')
psTrapActivation = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 12, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psTrapActivation.setStatus('current')
if mibBuilder.loadTexts: psTrapActivation.setDescription('The PS Trap Activation.')
psAlarm1006 = MibIdentifier((1, 3, 6, 1, 4, 1, 6050, 1, 12, 10))
psTrapPrefix1006 = MibIdentifier((1, 3, 6, 1, 4, 1, 6050, 1, 12, 10, 0))
psTrap1006ACLow = NotificationType((1, 3, 6, 1, 4, 1, 6050, 1, 12, 10, 0, 1)).setObjects(("GAMATRONIC-MIB", "psTrapStatus"))
if mibBuilder.loadTexts: psTrap1006ACLow.setStatus('current')
if mibBuilder.loadTexts: psTrap1006ACLow.setDescription('AC LOW')
psTrap1006Battery2TestFault = NotificationType((1, 3, 6, 1, 4, 1, 6050, 1, 12, 10, 0, 2)).setObjects(("GAMATRONIC-MIB", "psTrapStatus"))
if mibBuilder.loadTexts: psTrap1006Battery2TestFault.setStatus('current')
if mibBuilder.loadTexts: psTrap1006Battery2TestFault.setDescription('BATTERY No 2 TEST FAULT\t\n')
psTrap1006Battery1TestFault = NotificationType((1, 3, 6, 1, 4, 1, 6050, 1, 12, 10, 0, 3)).setObjects(("GAMATRONIC-MIB", "psTrapStatus"))
if mibBuilder.loadTexts: psTrap1006Battery1TestFault.setStatus('current')
if mibBuilder.loadTexts: psTrap1006Battery1TestFault.setDescription('BATTERY No 1 TEST FAULT\t\n')
psTrap1006LVD2Open = NotificationType((1, 3, 6, 1, 4, 1, 6050, 1, 12, 10, 0, 4)).setObjects(("GAMATRONIC-MIB", "psTrapStatus"))
if mibBuilder.loadTexts: psTrap1006LVD2Open.setStatus('current')
if mibBuilder.loadTexts: psTrap1006LVD2Open.setDescription('LVD2 DRIVEN OPEN (not physically sensed)\t\n')
psTrap1006LVD1Open = NotificationType((1, 3, 6, 1, 4, 1, 6050, 1, 12, 10, 0, 5)).setObjects(("GAMATRONIC-MIB", "psTrapStatus"))
if mibBuilder.loadTexts: psTrap1006LVD1Open.setStatus('current')
if mibBuilder.loadTexts: psTrap1006LVD1Open.setDescription('LVD1 DRIVEN OPEN (not physically sensed)\t\n')
psTrap1006AUXContactOpen = NotificationType((1, 3, 6, 1, 4, 1, 6050, 1, 12, 10, 0, 6)).setObjects(("GAMATRONIC-MIB", "psTrapStatus"))
if mibBuilder.loadTexts: psTrap1006AUXContactOpen.setStatus('current')
if mibBuilder.loadTexts: psTrap1006AUXContactOpen.setDescription('AUXILLIARY CONTACT OPEN')
psTrap1006AUXBreakerOpen = NotificationType((1, 3, 6, 1, 4, 1, 6050, 1, 12, 10, 0, 7)).setObjects(("GAMATRONIC-MIB", "psTrapStatus"))
if mibBuilder.loadTexts: psTrap1006AUXBreakerOpen.setStatus('current')
if mibBuilder.loadTexts: psTrap1006AUXBreakerOpen.setDescription('AUXILLIARY BREAKER OPEN')
psTrap1006BatteryBreakerOpen = NotificationType((1, 3, 6, 1, 4, 1, 6050, 1, 12, 10, 0, 8)).setObjects(("GAMATRONIC-MIB", "psTrapStatus"))
if mibBuilder.loadTexts: psTrap1006BatteryBreakerOpen.setStatus('current')
if mibBuilder.loadTexts: psTrap1006BatteryBreakerOpen.setDescription('BATTERY BREAKER OPEN')
psTrap1006LoadBreakerOpen = NotificationType((1, 3, 6, 1, 4, 1, 6050, 1, 12, 10, 0, 9)).setObjects(("GAMATRONIC-MIB", "psTrapStatus"))
if mibBuilder.loadTexts: psTrap1006LoadBreakerOpen.setStatus('current')
if mibBuilder.loadTexts: psTrap1006LoadBreakerOpen.setDescription('LOAD BREAKER OPEN')
psTrap1006DCLOWLow = NotificationType((1, 3, 6, 1, 4, 1, 6050, 1, 12, 10, 0, 10)).setObjects(("GAMATRONIC-MIB", "psTrapStatus"))
if mibBuilder.loadTexts: psTrap1006DCLOWLow.setStatus('current')
if mibBuilder.loadTexts: psTrap1006DCLOWLow.setDescription('DC LOWLOW')
psTrap1006Rectifier = NotificationType((1, 3, 6, 1, 4, 1, 6050, 1, 12, 10, 0, 11)).setObjects(("GAMATRONIC-MIB", "psTrapStatus"))
if mibBuilder.loadTexts: psTrap1006Rectifier.setStatus('current')
if mibBuilder.loadTexts: psTrap1006Rectifier.setDescription('RECTIFIER (one or more)')
psTrap1006OverTemptature = NotificationType((1, 3, 6, 1, 4, 1, 6050, 1, 12, 10, 0, 12)).setObjects(("GAMATRONIC-MIB", "psTrapStatus"))
if mibBuilder.loadTexts: psTrap1006OverTemptature.setStatus('current')
if mibBuilder.loadTexts: psTrap1006OverTemptature.setDescription('OVER TEMPERATURE')
psTrap1006LVDBypassOpen = NotificationType((1, 3, 6, 1, 4, 1, 6050, 1, 12, 10, 0, 13)).setObjects(("GAMATRONIC-MIB", "psTrapStatus"))
if mibBuilder.loadTexts: psTrap1006LVDBypassOpen.setStatus('current')
if mibBuilder.loadTexts: psTrap1006LVDBypassOpen.setDescription('LVD bypass OPEN (one or both) ')
psTrap1006DCHigh = NotificationType((1, 3, 6, 1, 4, 1, 6050, 1, 12, 10, 0, 14)).setObjects(("GAMATRONIC-MIB", "psTrapStatus"))
if mibBuilder.loadTexts: psTrap1006DCHigh.setStatus('current')
if mibBuilder.loadTexts: psTrap1006DCHigh.setDescription('DC HIGH ')
psTrap1006DCLow = NotificationType((1, 3, 6, 1, 4, 1, 6050, 1, 12, 10, 0, 15)).setObjects(("GAMATRONIC-MIB", "psTrapStatus"))
if mibBuilder.loadTexts: psTrap1006DCLow.setStatus('current')
if mibBuilder.loadTexts: psTrap1006DCLow.setDescription('DC Low ')
psTrap1006ACHigh = NotificationType((1, 3, 6, 1, 4, 1, 6050, 1, 12, 10, 0, 16)).setObjects(("GAMATRONIC-MIB", "psTrapStatus"))
if mibBuilder.loadTexts: psTrap1006ACHigh.setStatus('current')
if mibBuilder.loadTexts: psTrap1006ACHigh.setDescription('AC HIGH')
psAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 6050, 1, 12, 11))
psTrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 6050, 1, 12, 11, 0))
psTrapRFAMAJ = NotificationType((1, 3, 6, 1, 4, 1, 6050, 1, 12, 11, 0, 1)).setObjects(("GAMATRONIC-MIB", "psTrapSeverity"), ("GAMATRONIC-MIB", "psTrapStatus"))
if mibBuilder.loadTexts: psTrapRFAMAJ.setStatus('current')
if mibBuilder.loadTexts: psTrapRFAMAJ.setDescription('More than 1 rectifier faulty ')
psTrapRFAMIN = NotificationType((1, 3, 6, 1, 4, 1, 6050, 1, 12, 11, 0, 2)).setObjects(("GAMATRONIC-MIB", "psTrapSeverity"), ("GAMATRONIC-MIB", "psTrapStatus"))
if mibBuilder.loadTexts: psTrapRFAMIN.setStatus('current')
if mibBuilder.loadTexts: psTrapRFAMIN.setDescription('1 rectifier faulty ')
psTrapACFAIL = NotificationType((1, 3, 6, 1, 4, 1, 6050, 1, 12, 11, 0, 3)).setObjects(("GAMATRONIC-MIB", "psTrapSeverity"), ("GAMATRONIC-MIB", "psTrapStatus"))
if mibBuilder.loadTexts: psTrapACFAIL.setStatus('current')
if mibBuilder.loadTexts: psTrapACFAIL.setDescription('AC input is abnormal (low high & fail) ')
psTrapLVDX2 = NotificationType((1, 3, 6, 1, 4, 1, 6050, 1, 12, 11, 0, 4)).setObjects(("GAMATRONIC-MIB", "psTrapSeverity"), ("GAMATRONIC-MIB", "psTrapStatus"))
if mibBuilder.loadTexts: psTrapLVDX2.setStatus('current')
if mibBuilder.loadTexts: psTrapLVDX2.setDescription('Both LVDs are open ')
psTrapSYSOT = NotificationType((1, 3, 6, 1, 4, 1, 6050, 1, 12, 11, 0, 5)).setObjects(("GAMATRONIC-MIB", "psTrapSeverity"), ("GAMATRONIC-MIB", "psTrapStatus"))
if mibBuilder.loadTexts: psTrapSYSOT.setStatus('current')
if mibBuilder.loadTexts: psTrapSYSOT.setDescription('system over temperature')
psTrapLVDX1 = NotificationType((1, 3, 6, 1, 4, 1, 6050, 1, 12, 11, 0, 6)).setObjects(("GAMATRONIC-MIB", "psTrapSeverity"), ("GAMATRONIC-MIB", "psTrapStatus"))
if mibBuilder.loadTexts: psTrapLVDX1.setStatus('current')
if mibBuilder.loadTexts: psTrapLVDX1.setDescription('One LVD is open')
psTrapCBOPEN = NotificationType((1, 3, 6, 1, 4, 1, 6050, 1, 12, 11, 0, 7)).setObjects(("GAMATRONIC-MIB", "psTrapSeverity"), ("GAMATRONIC-MIB", "psTrapStatus"))
if mibBuilder.loadTexts: psTrapCBOPEN.setStatus('current')
if mibBuilder.loadTexts: psTrapCBOPEN.setDescription('load breaker open( min 1 of all load c.b)')
psTrapEQHST = NotificationType((1, 3, 6, 1, 4, 1, 6050, 1, 12, 11, 0, 8)).setObjects(("GAMATRONIC-MIB", "psTrapSeverity"), ("GAMATRONIC-MIB", "psTrapStatus"))
if mibBuilder.loadTexts: psTrapEQHST.setStatus('current')
if mibBuilder.loadTexts: psTrapEQHST.setDescription('Equalizing mode')
psTrapBATTST = NotificationType((1, 3, 6, 1, 4, 1, 6050, 1, 12, 11, 0, 9)).setObjects(("GAMATRONIC-MIB", "psTrapSeverity"), ("GAMATRONIC-MIB", "psTrapStatus"))
if mibBuilder.loadTexts: psTrapBATTST.setStatus('current')
if mibBuilder.loadTexts: psTrapBATTST.setDescription('Last battery test fail')
psTrapINUBAD = NotificationType((1, 3, 6, 1, 4, 1, 6050, 1, 12, 11, 0, 10)).setObjects(("GAMATRONIC-MIB", "psTrapSeverity"), ("GAMATRONIC-MIB", "psTrapStatus"))
if mibBuilder.loadTexts: psTrapINUBAD.setStatus('current')
if mibBuilder.loadTexts: psTrapINUBAD.setDescription('1 or more inverter/s faulty')
psTrapUNIVPD = NotificationType((1, 3, 6, 1, 4, 1, 6050, 1, 12, 11, 0, 11)).setObjects(("GAMATRONIC-MIB", "psTrapSeverity"), ("GAMATRONIC-MIB", "psTrapStatus"))
if mibBuilder.loadTexts: psTrapUNIVPD.setStatus('current')
if mibBuilder.loadTexts: psTrapUNIVPD.setDescription('universal PD not responding')
psTrapIBADIN = NotificationType((1, 3, 6, 1, 4, 1, 6050, 1, 12, 11, 0, 12)).setObjects(("GAMATRONIC-MIB", "psTrapSeverity"), ("GAMATRONIC-MIB", "psTrapStatus"))
if mibBuilder.loadTexts: psTrapIBADIN.setStatus('current')
if mibBuilder.loadTexts: psTrapIBADIN.setDescription('an inverter/s not responding on PD bus')
psTrapRBADIN = NotificationType((1, 3, 6, 1, 4, 1, 6050, 1, 12, 11, 0, 13)).setObjects(("GAMATRONIC-MIB", "psTrapSeverity"), ("GAMATRONIC-MIB", "psTrapStatus"))
if mibBuilder.loadTexts: psTrapRBADIN.setStatus('current')
if mibBuilder.loadTexts: psTrapRBADIN.setDescription('a rectifier/s not responding on PD bus')
psTrapSLFTST = NotificationType((1, 3, 6, 1, 4, 1, 6050, 1, 12, 11, 0, 14)).setObjects(("GAMATRONIC-MIB", "psTrapSeverity"), ("GAMATRONIC-MIB", "psTrapStatus"))
if mibBuilder.loadTexts: psTrapSLFTST.setStatus('current')
if mibBuilder.loadTexts: psTrapSLFTST.setDescription('last self test failed')
psTrapFUSEBD = NotificationType((1, 3, 6, 1, 4, 1, 6050, 1, 12, 11, 0, 15)).setObjects(("GAMATRONIC-MIB", "psTrapSeverity"), ("GAMATRONIC-MIB", "psTrapStatus"))
if mibBuilder.loadTexts: psTrapFUSEBD.setStatus('current')
if mibBuilder.loadTexts: psTrapFUSEBD.setDescription(' battery fuse fault')
psTrapLOADHI = NotificationType((1, 3, 6, 1, 4, 1, 6050, 1, 12, 11, 0, 16)).setObjects(("GAMATRONIC-MIB", "psTrapSeverity"), ("GAMATRONIC-MIB", "psTrapStatus"))
if mibBuilder.loadTexts: psTrapLOADHI.setStatus('current')
if mibBuilder.loadTexts: psTrapLOADHI.setDescription(' Load current high')
psTrapSURGBD = NotificationType((1, 3, 6, 1, 4, 1, 6050, 1, 12, 11, 0, 17)).setObjects(("GAMATRONIC-MIB", "psTrapSeverity"), ("GAMATRONIC-MIB", "psTrapStatus"))
if mibBuilder.loadTexts: psTrapSURGBD.setStatus('current')
if mibBuilder.loadTexts: psTrapSURGBD.setDescription(' Surge fault')
psTrapEQLONG = NotificationType((1, 3, 6, 1, 4, 1, 6050, 1, 12, 11, 0, 18)).setObjects(("GAMATRONIC-MIB", "psTrapSeverity"), ("GAMATRONIC-MIB", "psTrapStatus"))
if mibBuilder.loadTexts: psTrapEQLONG.setStatus('current')
if mibBuilder.loadTexts: psTrapEQLONG.setDescription(' equalizing running more than 60 hours')
psTrapFUSE24 = NotificationType((1, 3, 6, 1, 4, 1, 6050, 1, 12, 11, 0, 19)).setObjects(("GAMATRONIC-MIB", "psTrapSeverity"), ("GAMATRONIC-MIB", "psTrapStatus"))
if mibBuilder.loadTexts: psTrapFUSE24.setStatus('current')
if mibBuilder.loadTexts: psTrapFUSE24.setDescription(' 24V Fuse fault')
psTrapFUSE48 = NotificationType((1, 3, 6, 1, 4, 1, 6050, 1, 12, 11, 0, 20)).setObjects(("GAMATRONIC-MIB", "psTrapSeverity"), ("GAMATRONIC-MIB", "psTrapStatus"))
if mibBuilder.loadTexts: psTrapFUSE48.setStatus('current')
if mibBuilder.loadTexts: psTrapFUSE48.setDescription(' 48V Fuse fault')
psTrapBYPS2 = NotificationType((1, 3, 6, 1, 4, 1, 6050, 1, 12, 11, 0, 21)).setObjects(("GAMATRONIC-MIB", "psTrapSeverity"), ("GAMATRONIC-MIB", "psTrapStatus"))
if mibBuilder.loadTexts: psTrapBYPS2.setStatus('current')
if mibBuilder.loadTexts: psTrapBYPS2.setDescription('ByPass LVD2 is ON')
psTrapBYPS1 = NotificationType((1, 3, 6, 1, 4, 1, 6050, 1, 12, 11, 0, 22)).setObjects(("GAMATRONIC-MIB", "psTrapSeverity"), ("GAMATRONIC-MIB", "psTrapStatus"))
if mibBuilder.loadTexts: psTrapBYPS1.setStatus('current')
if mibBuilder.loadTexts: psTrapBYPS1.setDescription('ByPass LVD1 is ON')
psTrapCB24CR = NotificationType((1, 3, 6, 1, 4, 1, 6050, 1, 12, 11, 0, 23)).setObjects(("GAMATRONIC-MIB", "psTrapSeverity"), ("GAMATRONIC-MIB", "psTrapStatus"))
if mibBuilder.loadTexts: psTrapCB24CR.setStatus('current')
if mibBuilder.loadTexts: psTrapCB24CR.setDescription('24V breaker critical')
psTrapCB48CR = NotificationType((1, 3, 6, 1, 4, 1, 6050, 1, 12, 11, 0, 24)).setObjects(("GAMATRONIC-MIB", "psTrapSeverity"), ("GAMATRONIC-MIB", "psTrapStatus"))
if mibBuilder.loadTexts: psTrapCB48CR.setStatus('current')
if mibBuilder.loadTexts: psTrapCB48CR.setDescription('48V breaker critical')
psTrapBATOT = NotificationType((1, 3, 6, 1, 4, 1, 6050, 1, 12, 11, 0, 25)).setObjects(("GAMATRONIC-MIB", "psTrapSeverity"), ("GAMATRONIC-MIB", "psTrapStatus"))
if mibBuilder.loadTexts: psTrapBATOT.setStatus('current')
if mibBuilder.loadTexts: psTrapBATOT.setDescription('battery over temperature')
psAlarmSet1 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 13, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psAlarmSet1.setStatus('current')
if mibBuilder.loadTexts: psAlarmSet1.setDescription(' More Then one rectifier is bad ')
psAlarmSet2 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 13, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psAlarmSet2.setStatus('current')
if mibBuilder.loadTexts: psAlarmSet2.setDescription(' One Rectifier is bad ')
psAlarmSet3 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 13, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psAlarmSet3.setStatus('current')
if mibBuilder.loadTexts: psAlarmSet3.setDescription(' AC Line Failure')
psAlarmSet4 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 13, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psAlarmSet4.setStatus('current')
if mibBuilder.loadTexts: psAlarmSet4.setDescription(' Controler Internal Supply is bad')
psAlarmSet5 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 13, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psAlarmSet5.setStatus('current')
if mibBuilder.loadTexts: psAlarmSet5.setDescription(' AC Line Too High')
psAlarmSet6 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 13, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psAlarmSet6.setStatus('current')
if mibBuilder.loadTexts: psAlarmSet6.setDescription(' AC Line Too Low')
psAlarmSet7 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 13, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psAlarmSet7.setStatus('current')
if mibBuilder.loadTexts: psAlarmSet7.setDescription(' System Over Temperature ')
psAlarmSet8 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 13, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psAlarmSet8.setStatus('current')
if mibBuilder.loadTexts: psAlarmSet8.setDescription(' BDOCA ')
psAlarmSet9 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 13, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psAlarmSet9.setStatus('current')
if mibBuilder.loadTexts: psAlarmSet9.setDescription(' DC Too High Rectifier is off ')
psAlarmSet10 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 13, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psAlarmSet10.setStatus('current')
if mibBuilder.loadTexts: psAlarmSet10.setDescription(' DC High Worning ')
psAlarmSet11 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 13, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psAlarmSet11.setStatus('current')
if mibBuilder.loadTexts: psAlarmSet11.setDescription(' DC Too LOw Lvd Disconnect ')
psAlarmSet12 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 13, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psAlarmSet12.setStatus('current')
if mibBuilder.loadTexts: psAlarmSet12.setDescription(' DC Low Worning ')
psAlarmSet13 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 13, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psAlarmSet13.setStatus('current')
if mibBuilder.loadTexts: psAlarmSet13.setDescription(' LVD Contact Open ')
psAlarmSet14 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 13, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psAlarmSet14.setStatus('current')
if mibBuilder.loadTexts: psAlarmSet14.setDescription(' Load Breaker Open ')
psAlarmSet15 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 13, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psAlarmSet15.setStatus('current')
if mibBuilder.loadTexts: psAlarmSet15.setDescription(' System Running in Equalizing ')
psAlarmSet16 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 13, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psAlarmSet16.setStatus('current')
if mibBuilder.loadTexts: psAlarmSet16.setDescription(' Last Battery Test Fail ')
psAlarmSet17 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 13, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psAlarmSet17.setStatus('current')
if mibBuilder.loadTexts: psAlarmSet17.setDescription(' Reserve  ')
psAlarmSet18 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 13, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psAlarmSet18.setStatus('current')
if mibBuilder.loadTexts: psAlarmSet18.setDescription(' Reserve ')
psAlarmSet19 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 13, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psAlarmSet19.setStatus('current')
if mibBuilder.loadTexts: psAlarmSet19.setDescription(' Reserve ')
psAlarmSet20 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 13, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psAlarmSet20.setStatus('current')
if mibBuilder.loadTexts: psAlarmSet20.setDescription(' Reserver ')
psAlarmSet21 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 13, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psAlarmSet21.setStatus('current')
if mibBuilder.loadTexts: psAlarmSet21.setDescription(' PD Not Responding ')
psAlarmSet22 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 13, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psAlarmSet22.setStatus('current')
if mibBuilder.loadTexts: psAlarmSet22.setDescription(' Invertor Not Responding ')
psAlarmSet23 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 13, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psAlarmSet23.setStatus('current')
if mibBuilder.loadTexts: psAlarmSet23.setDescription(' Rectifier Not Responding ')
psAlarmSet24 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 13, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psAlarmSet24.setStatus('current')
if mibBuilder.loadTexts: psAlarmSet24.setDescription(' Last Self Test Failed ')
psAlarmSet25 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 13, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psAlarmSet25.setStatus('current')
if mibBuilder.loadTexts: psAlarmSet25.setDescription(' Bad Fuse ')
psAlarmSet26 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 13, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psAlarmSet26.setStatus('current')
if mibBuilder.loadTexts: psAlarmSet26.setDescription(' Bad Current Sharing in Rectifier ')
psAlarmSet27 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 13, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psAlarmSet27.setStatus('current')
if mibBuilder.loadTexts: psAlarmSet27.setDescription(' Bad Output in Rectifier ')
psAlarmSet28 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 13, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psAlarmSet28.setStatus('current')
if mibBuilder.loadTexts: psAlarmSet28.setDescription(' Bad Relay Board ')
psAlarmSet29 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 13, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psAlarmSet29.setStatus('current')
if mibBuilder.loadTexts: psAlarmSet29.setDescription(' Load Current too High ')
psAlarmSet30 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 13, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psAlarmSet30.setStatus('current')
if mibBuilder.loadTexts: psAlarmSet30.setDescription(' Serge Blown ')
psAlarmSet31 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 13, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psAlarmSet31.setStatus('current')
if mibBuilder.loadTexts: psAlarmSet31.setDescription(' Gets Set at Start Up ')
psAlarmSet32 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 13, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psAlarmSet32.setStatus('current')
if mibBuilder.loadTexts: psAlarmSet32.setDescription(' Misc Alarm ')
psAlarmSet33 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 13, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psAlarmSet33.setStatus('current')
if mibBuilder.loadTexts: psAlarmSet33.setDescription(' Spare ')
psAlarmSet34 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 13, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psAlarmSet34.setStatus('current')
if mibBuilder.loadTexts: psAlarmSet34.setDescription(' Spare ')
psAlarmSet35 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 13, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psAlarmSet35.setStatus('current')
if mibBuilder.loadTexts: psAlarmSet35.setDescription(' Spare ')
psAlarmSet36 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 13, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psAlarmSet36.setStatus('current')
if mibBuilder.loadTexts: psAlarmSet36.setDescription(' Spare ')
psAlarmSet37 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 13, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psAlarmSet37.setStatus('current')
if mibBuilder.loadTexts: psAlarmSet37.setDescription(' Spare ')
psAlarmSet38 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 13, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psAlarmSet38.setStatus('current')
if mibBuilder.loadTexts: psAlarmSet38.setDescription(' Spare ')
psAlarmSet39 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 13, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psAlarmSet39.setStatus('current')
if mibBuilder.loadTexts: psAlarmSet39.setDescription(' Spare ')
psAlarmSet40 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 13, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psAlarmSet40.setStatus('current')
if mibBuilder.loadTexts: psAlarmSet40.setDescription(' Spare ')
psAlarmSet41 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 13, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psAlarmSet41.setStatus('current')
if mibBuilder.loadTexts: psAlarmSet41.setDescription(' Spare ')
psAlarmSet42 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 13, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psAlarmSet42.setStatus('current')
if mibBuilder.loadTexts: psAlarmSet42.setDescription(' Spare ')
psAlarmSet43 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 13, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psAlarmSet43.setStatus('current')
if mibBuilder.loadTexts: psAlarmSet43.setDescription(' Spare ')
psAlarmSet44 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 13, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psAlarmSet44.setStatus('current')
if mibBuilder.loadTexts: psAlarmSet44.setDescription(' Spare ')
psAlarmSet45 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 13, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psAlarmSet45.setStatus('current')
if mibBuilder.loadTexts: psAlarmSet45.setDescription(' Spare ')
psAlarmSet46 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 13, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psAlarmSet46.setStatus('current')
if mibBuilder.loadTexts: psAlarmSet46.setDescription(' Spare ')
psAlarmSet47 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 13, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psAlarmSet47.setStatus('current')
if mibBuilder.loadTexts: psAlarmSet47.setDescription(' Spare ')
psAlarmSet48 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 13, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psAlarmSet48.setStatus('current')
if mibBuilder.loadTexts: psAlarmSet48.setDescription(' Spare ')
psAlarmSet49 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 13, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psAlarmSet49.setStatus('current')
if mibBuilder.loadTexts: psAlarmSet49.setDescription(' Spare ')
psAlarmSet50 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 13, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psAlarmSet50.setStatus('current')
if mibBuilder.loadTexts: psAlarmSet50.setDescription(' Spare ')
psAlarmSet51 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 13, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psAlarmSet51.setStatus('current')
if mibBuilder.loadTexts: psAlarmSet51.setDescription(' Spare ')
psAlarmSet52 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 13, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psAlarmSet52.setStatus('current')
if mibBuilder.loadTexts: psAlarmSet52.setDescription(' Spare ')
psAlarmSet53 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 13, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psAlarmSet53.setStatus('current')
if mibBuilder.loadTexts: psAlarmSet53.setDescription(' Spare ')
psAlarmSet54 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 13, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psAlarmSet54.setStatus('current')
if mibBuilder.loadTexts: psAlarmSet54.setDescription(' Spare ')
psAlarmSet55 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 13, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psAlarmSet55.setStatus('current')
if mibBuilder.loadTexts: psAlarmSet55.setDescription(' Spare ')
psAlarmSet56 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 13, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psAlarmSet56.setStatus('current')
if mibBuilder.loadTexts: psAlarmSet56.setDescription(' Spare ')
psAlarmSet57 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 13, 57), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psAlarmSet57.setStatus('current')
if mibBuilder.loadTexts: psAlarmSet57.setDescription(' Spare ')
psAlarmSet58 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 13, 58), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psAlarmSet58.setStatus('current')
if mibBuilder.loadTexts: psAlarmSet58.setDescription(' Spare ')
psAlarmSet59 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 13, 59), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psAlarmSet59.setStatus('current')
if mibBuilder.loadTexts: psAlarmSet59.setDescription(' Spare ')
psAlarmSet60 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 13, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psAlarmSet60.setStatus('current')
if mibBuilder.loadTexts: psAlarmSet60.setDescription(' Spare ')
psAlarmSet61 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 13, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psAlarmSet61.setStatus('current')
if mibBuilder.loadTexts: psAlarmSet61.setDescription(' Spare ')
psAlarmSet62 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 13, 62), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psAlarmSet62.setStatus('current')
if mibBuilder.loadTexts: psAlarmSet62.setDescription(' Spare ')
psAlarmSet63 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 13, 63), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psAlarmSet63.setStatus('current')
if mibBuilder.loadTexts: psAlarmSet63.setDescription(' Spare ')
psAlarmSet64 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 13, 64), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psAlarmSet64.setStatus('current')
if mibBuilder.loadTexts: psAlarmSet64.setDescription(' Spare ')
psAlarmSet65 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 13, 65), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psAlarmSet65.setStatus('current')
if mibBuilder.loadTexts: psAlarmSet65.setDescription(' Spare ')
psAlarmSet66 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 13, 66), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psAlarmSet66.setStatus('current')
if mibBuilder.loadTexts: psAlarmSet66.setDescription(' Spare ')
psAlarmSet67 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 13, 67), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psAlarmSet67.setStatus('current')
if mibBuilder.loadTexts: psAlarmSet67.setDescription(' Spare ')
psAlarmSet68 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 13, 68), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psAlarmSet68.setStatus('current')
if mibBuilder.loadTexts: psAlarmSet68.setDescription(' Spare ')
psAlarmSet69 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 13, 69), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psAlarmSet69.setStatus('current')
if mibBuilder.loadTexts: psAlarmSet69.setDescription(' Spare ')
psAlarmSet70 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 13, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psAlarmSet70.setStatus('current')
if mibBuilder.loadTexts: psAlarmSet70.setDescription(' Spare ')
psAlarmSet71 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 13, 71), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psAlarmSet71.setStatus('current')
if mibBuilder.loadTexts: psAlarmSet71.setDescription(' Spare ')
psAlarmSet72 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 13, 72), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psAlarmSet72.setStatus('current')
if mibBuilder.loadTexts: psAlarmSet72.setDescription(' Spare ')
psAlarmSet73 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 13, 73), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psAlarmSet73.setStatus('current')
if mibBuilder.loadTexts: psAlarmSet73.setDescription(' Spare ')
psAlarmSet74 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 13, 74), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psAlarmSet74.setStatus('current')
if mibBuilder.loadTexts: psAlarmSet74.setDescription(' Spare ')
psAlarmSet75 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 13, 75), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psAlarmSet75.setStatus('current')
if mibBuilder.loadTexts: psAlarmSet75.setDescription(' Spare ')
psAlarmSet76 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 13, 76), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psAlarmSet76.setStatus('current')
if mibBuilder.loadTexts: psAlarmSet76.setDescription(' Spare ')
psAlarmSet77 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 13, 77), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psAlarmSet77.setStatus('current')
if mibBuilder.loadTexts: psAlarmSet77.setDescription(' Spare ')
psAlarmSet78 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 13, 78), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psAlarmSet78.setStatus('current')
if mibBuilder.loadTexts: psAlarmSet78.setDescription(' Spare ')
psAlarmSet79 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 13, 79), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psAlarmSet79.setStatus('current')
if mibBuilder.loadTexts: psAlarmSet79.setDescription(' Spare ')
psAlarmSet80 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 13, 80), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psAlarmSet80.setStatus('current')
if mibBuilder.loadTexts: psAlarmSet80.setDescription(' Spare ')
psAlarmSet81 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 13, 81), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psAlarmSet81.setStatus('current')
if mibBuilder.loadTexts: psAlarmSet81.setDescription(' Spare ')
psAlarmSet82 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 13, 82), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psAlarmSet82.setStatus('current')
if mibBuilder.loadTexts: psAlarmSet82.setDescription(' Spare ')
psAlarmSet83 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 13, 83), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psAlarmSet83.setStatus('current')
if mibBuilder.loadTexts: psAlarmSet83.setDescription(' Spare ')
psAlarmSet84 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 13, 84), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psAlarmSet84.setStatus('current')
if mibBuilder.loadTexts: psAlarmSet84.setDescription(' Spare ')
psAlarmSet85 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 13, 85), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psAlarmSet85.setStatus('current')
if mibBuilder.loadTexts: psAlarmSet85.setDescription(' Spare ')
psAlarmSet86 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 13, 86), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psAlarmSet86.setStatus('current')
if mibBuilder.loadTexts: psAlarmSet86.setDescription(' Spare ')
psAlarmSet87 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 13, 87), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psAlarmSet87.setStatus('current')
if mibBuilder.loadTexts: psAlarmSet87.setDescription(' Spare ')
psAlarmSet88 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 13, 88), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psAlarmSet88.setStatus('current')
if mibBuilder.loadTexts: psAlarmSet88.setDescription(' Spare ')
psAlarmSet89 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 13, 89), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psAlarmSet89.setStatus('current')
if mibBuilder.loadTexts: psAlarmSet89.setDescription(' Spare ')
psAlarmSet90 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 13, 90), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psAlarmSet90.setStatus('current')
if mibBuilder.loadTexts: psAlarmSet90.setDescription(' Spare ')
psAlarmSet91 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 13, 91), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psAlarmSet91.setStatus('current')
if mibBuilder.loadTexts: psAlarmSet91.setDescription(' Spare ')
psAlarmSet92 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 13, 92), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psAlarmSet92.setStatus('current')
if mibBuilder.loadTexts: psAlarmSet92.setDescription(' Spare ')
psAlarmSet93 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 13, 93), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psAlarmSet93.setStatus('current')
if mibBuilder.loadTexts: psAlarmSet93.setDescription(' Spare ')
psAlarmSet94 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 13, 94), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psAlarmSet94.setStatus('current')
if mibBuilder.loadTexts: psAlarmSet94.setDescription(' Spare ')
psAlarmSet95 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 13, 95), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psAlarmSet95.setStatus('current')
if mibBuilder.loadTexts: psAlarmSet95.setDescription(' Spare ')
psAlarmSet96 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 13, 96), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psAlarmSet96.setStatus('current')
if mibBuilder.loadTexts: psAlarmSet96.setDescription(' Spare ')
psSecurityComunity1 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 14, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psSecurityComunity1.setStatus('current')
if mibBuilder.loadTexts: psSecurityComunity1.setDescription(' Configure comunity ')
psSecurityComunity2 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 14, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psSecurityComunity2.setStatus('current')
if mibBuilder.loadTexts: psSecurityComunity2.setDescription(' Configure comunity ')
psSecurityComunity3 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 14, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psSecurityComunity3.setStatus('current')
if mibBuilder.loadTexts: psSecurityComunity3.setDescription(' Configure comunity ')
psSecurityPasswordComunity = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 14, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psSecurityPasswordComunity.setStatus('current')
if mibBuilder.loadTexts: psSecurityPasswordComunity.setDescription(' Configure password  for get only comunity  comunity ')
psSecurityPasswordSet = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 14, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psSecurityPasswordSet.setStatus('current')
if mibBuilder.loadTexts: psSecurityPasswordSet.setDescription(' Password for SNMP  set  Command')
psSecuritySetGetPassword = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 14, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psSecuritySetGetPassword.setStatus('current')
if mibBuilder.loadTexts: psSecuritySetGetPassword.setDescription(' Set  or Get Password     -----   Must match the password set or get  in order to use SNMP Set or get Commands')
psSecurityErasePassword = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 14, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("reset", 1), ("dont", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psSecurityErasePassword.setStatus('current')
if mibBuilder.loadTexts: psSecurityErasePassword.setDescription(' Erase Password ')
psSecurityTrapIp1 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 14, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psSecurityTrapIp1.setStatus('current')
if mibBuilder.loadTexts: psSecurityTrapIp1.setDescription(' IP Address For Trap ')
psSecurityTrapIp2 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 14, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psSecurityTrapIp2.setStatus('current')
if mibBuilder.loadTexts: psSecurityTrapIp2.setDescription(' IP Address For Trap ')
psSecurityTrapIp3 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 14, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psSecurityTrapIp3.setStatus('current')
if mibBuilder.loadTexts: psSecurityTrapIp3.setDescription(' IP Address For Trap ')
psSecurityTrapIp4 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 14, 11), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psSecurityTrapIp4.setStatus('current')
if mibBuilder.loadTexts: psSecurityTrapIp4.setDescription(' IP Address For Trap ')
psSecurityInterfaceIP = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 14, 12), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psSecurityInterfaceIP.setStatus('current')
if mibBuilder.loadTexts: psSecurityInterfaceIP.setDescription(' New IP for Interface ')
psSecurityInterfaceNetMask = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 14, 13), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psSecurityInterfaceNetMask.setStatus('current')
if mibBuilder.loadTexts: psSecurityInterfaceNetMask.setDescription(' The Net Mask ')
psSecurityInterfaceGateWay = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 14, 14), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psSecurityInterfaceGateWay.setStatus('current')
if mibBuilder.loadTexts: psSecurityInterfaceGateWay.setDescription(' IP Address For The Gateway ')
psSecurityInterfaceActivate = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 14, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("donot", 0), ("activate", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psSecurityInterfaceActivate.setStatus('current')
if mibBuilder.loadTexts: psSecurityInterfaceActivate.setDescription(' Activate the New IP')
psCommandGoFloat = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 15, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psCommandGoFloat.setStatus('current')
if mibBuilder.loadTexts: psCommandGoFloat.setDescription(' Go Float ')
psCommandGoEqualizing = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 15, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 72))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psCommandGoEqualizing.setStatus('current')
if mibBuilder.loadTexts: psCommandGoEqualizing.setDescription(' Go Equalizing in hours')
psCommandDoSelfTest = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 15, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psCommandDoSelfTest.setStatus('current')
if mibBuilder.loadTexts: psCommandDoSelfTest.setDescription(' Fo Self Test')
psCommandRunFlash1 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 15, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("activate", 1), ("dontactivate", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psCommandRunFlash1.setStatus('current')
if mibBuilder.loadTexts: psCommandRunFlash1.setDescription(' Activate Flash 1 software')
psCommandRunFlash2 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 15, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("activate", 1), ("dontactivate", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psCommandRunFlash2.setStatus('current')
if mibBuilder.loadTexts: psCommandRunFlash2.setDescription(' Activate Flash 2')
psCommandTestBatteryAll = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 15, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psCommandTestBatteryAll.setStatus('current')
if mibBuilder.loadTexts: psCommandTestBatteryAll.setDescription(' Test All Battery in hours')
psCommandDoBoot = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 15, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("do", 1), ("dont", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psCommandDoBoot.setStatus('current')
if mibBuilder.loadTexts: psCommandDoBoot.setDescription(' Re Boot the system')
psCommandLoadDefault = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 15, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("load", 1), ("dontload", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psCommandLoadDefault.setStatus('current')
if mibBuilder.loadTexts: psCommandLoadDefault.setDescription(' Load default ')
psCommandProgramNonActiveFlash = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 15, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("load", 1), ("dontload", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psCommandProgramNonActiveFlash.setStatus('current')
if mibBuilder.loadTexts: psCommandProgramNonActiveFlash.setDescription(' Copy the down loaded file to non active flash')
psCommandNonActiveFlash = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 15, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psCommandNonActiveFlash.setStatus('current')
if mibBuilder.loadTexts: psCommandNonActiveFlash.setDescription(' Get The non active Flash 1 or 2 ')
psCommandNonActiveStatus = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 15, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psCommandNonActiveStatus.setStatus('current')
if mibBuilder.loadTexts: psCommandNonActiveStatus.setDescription(' Get The Non Active Flash Status')
psCommandDownLoadSoftware = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 15, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("activate", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psCommandDownLoadSoftware.setStatus('current')
if mibBuilder.loadTexts: psCommandDownLoadSoftware.setDescription(' Down Load File')
psCommandDownLoadCheck = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 15, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("completeok", 0), ("inprogress", 1), ("notok1", 2), ("notok2", 3), ("notok3", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psCommandDownLoadCheck.setStatus('current')
if mibBuilder.loadTexts: psCommandDownLoadCheck.setDescription('  Check if down load completed OK')
psCommandFileName = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 15, 14), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psCommandFileName.setStatus('current')
if mibBuilder.loadTexts: psCommandFileName.setDescription('  File Name to load')
psCommandIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 15, 15), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psCommandIpAddress.setStatus('current')
if mibBuilder.loadTexts: psCommandIpAddress.setDescription('  Ip Address of the server from which to load the file')
psCommandAbortBatTest = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 15, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("abort", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psCommandAbortBatTest.setStatus('current')
if mibBuilder.loadTexts: psCommandAbortBatTest.setDescription(' Abort battery test')
psCommandEraseTotalTime = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 15, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("erase", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psCommandEraseTotalTime.setStatus('current')
if mibBuilder.loadTexts: psCommandEraseTotalTime.setDescription(' Erase Total Time ')
psCommandAbortProgramFlash = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 15, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("activate", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psCommandAbortProgramFlash.setStatus('current')
if mibBuilder.loadTexts: psCommandAbortProgramFlash.setDescription(' User Define Command ')
psCommandUserDefine2 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 15, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("activate", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psCommandUserDefine2.setStatus('current')
if mibBuilder.loadTexts: psCommandUserDefine2.setDescription(' User Define Command ')
psCommandUserDefine3 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 15, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("activate", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psCommandUserDefine3.setStatus('current')
if mibBuilder.loadTexts: psCommandUserDefine3.setDescription(' User Define Command ')
psCommandUserDefine4 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 15, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("activate", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psCommandUserDefine4.setStatus('current')
if mibBuilder.loadTexts: psCommandUserDefine4.setDescription(' User Define Command ')
psCommandUserDefine5 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 15, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("activate", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psCommandUserDefine5.setStatus('current')
if mibBuilder.loadTexts: psCommandUserDefine5.setDescription(' User Define Command ')
psCommandFlash1Protect = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 15, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psCommandFlash1Protect.setStatus('current')
if mibBuilder.loadTexts: psCommandFlash1Protect.setDescription(' 1 means that  flash   1 is read only ')
psCommandFlash2Protect = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 15, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psCommandFlash2Protect.setStatus('current')
if mibBuilder.loadTexts: psCommandFlash2Protect.setDescription(' 1 means that  flash  2 is read only ')
psCommandFlashFix = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 15, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psCommandFlashFix.setStatus('current')
if mibBuilder.loadTexts: psCommandFlashFix.setDescription(' 1 means that flash is fix ')
psCommandFlashFixNumber = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 15, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psCommandFlashFixNumber.setStatus('current')
if mibBuilder.loadTexts: psCommandFlashFixNumber.setDescription(' 1Telling wich flah is FIX one or Two ')
psCommandRemoteTest = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 15, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psCommandRemoteTest.setStatus('current')
if mibBuilder.loadTexts: psCommandRemoteTest.setDescription(' 1 means that Conatctors remote test is active')
psCommandControlerStatus = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 15, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psCommandControlerStatus.setStatus('current')
if mibBuilder.loadTexts: psCommandControlerStatus.setDescription(' 1 means that The controler is active ')
psCommandFirmwareRev = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 15, 29), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: psCommandFirmwareRev.setStatus('current')
if mibBuilder.loadTexts: psCommandFirmwareRev.setDescription(' firmware revision ')
psCommandFlash2SWRev = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 15, 30), OctetString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readonly")
if mibBuilder.loadTexts: psCommandFlash2SWRev.setStatus('current')
if mibBuilder.loadTexts: psCommandFlash2SWRev.setDescription(' Flash 2 softwre revision  ')
psCommandFlash1SWRev = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 15, 31), OctetString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readonly")
if mibBuilder.loadTexts: psCommandFlash1SWRev.setStatus('current')
if mibBuilder.loadTexts: psCommandFlash1SWRev.setDescription(' Flash 1 softwre revision  ')
psCommandMBXSWRev = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 15, 32), OctetString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readonly")
if mibBuilder.loadTexts: psCommandMBXSWRev.setStatus('current')
if mibBuilder.loadTexts: psCommandMBXSWRev.setDescription(' MBX  softwre revision  ')
psCommandLeds = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 15, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psCommandLeds.setStatus('current')
if mibBuilder.loadTexts: psCommandLeds.setDescription(' Leds -MSB-0 0 0 0 0 0 0 0 23 22 21 20 19 18 17 10 9 1 2 3 4 5 6 7 8 16 15 14 13 12 11 24-LSB  ')
psCommandProgramingInProcess = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 15, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psCommandProgramingInProcess.setStatus('current')
if mibBuilder.loadTexts: psCommandProgramingInProcess.setDescription(' Programing progress status ')
psCommandLoadUserDefaults = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 15, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("activate", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psCommandLoadUserDefaults.setStatus('current')
if mibBuilder.loadTexts: psCommandLoadUserDefaults.setDescription(' 1 means Load Default')
psCommandStoreUserDefaults = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 15, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("activate", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psCommandStoreUserDefaults.setStatus('current')
if mibBuilder.loadTexts: psCommandStoreUserDefaults.setDescription(' 1 means Store Default')
psCommandLoadUserParameters = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 15, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("activate", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psCommandLoadUserParameters.setStatus('current')
if mibBuilder.loadTexts: psCommandLoadUserParameters.setDescription(' 1 means Load Parameters')
psCommandStoreUserParameters = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 15, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("activate", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psCommandStoreUserParameters.setStatus('current')
if mibBuilder.loadTexts: psCommandStoreUserParameters.setDescription(' 1 means Store Parameters')
psCommandDryInStatus = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 15, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psCommandDryInStatus.setStatus('current')
if mibBuilder.loadTexts: psCommandDryInStatus.setDescription(' Dry In Status     \nbit\tProperty\t\n32..11\tReserved\t\n10\tLoad Critical\t\n09\tLoad 24V\t\n08\tLVD #2\t\n07\tUser 4\t\n06\tUser 3\t\n05\tUser 2\t\n04\tUser 1\t\n03\tLoad 48V\t\n02\tSurge\t\n01\tBatt Fuse\t\n00\tLVD #1\t\n\n ')
psCommandSpareR0 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 15, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psCommandSpareR0.setStatus('current')
if mibBuilder.loadTexts: psCommandSpareR0.setDescription(' Spare Command')
psCommandSpareR1 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 15, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psCommandSpareR1.setStatus('current')
if mibBuilder.loadTexts: psCommandSpareR1.setDescription(' Spare Command')
psCommandSpareR2 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 15, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psCommandSpareR2.setStatus('current')
if mibBuilder.loadTexts: psCommandSpareR2.setDescription(' Spare Command')
psCommandSpareR3 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 15, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psCommandSpareR3.setStatus('current')
if mibBuilder.loadTexts: psCommandSpareR3.setDescription(' Spare Command')
psCommandSpareR4 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 15, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psCommandSpareR4.setStatus('current')
if mibBuilder.loadTexts: psCommandSpareR4.setDescription(' Spare Command')
psCommandSpareR5 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 15, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psCommandSpareR5.setStatus('current')
if mibBuilder.loadTexts: psCommandSpareR5.setDescription(' Spare Command')
psCommandSpareR6 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 15, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psCommandSpareR6.setStatus('current')
if mibBuilder.loadTexts: psCommandSpareR6.setDescription(' Spare Command')
psCommandSpareR7 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 15, 47), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psCommandSpareR7.setStatus('current')
if mibBuilder.loadTexts: psCommandSpareR7.setDescription(' Spare Command')
psCommandSpareR8 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 15, 48), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psCommandSpareR8.setStatus('current')
if mibBuilder.loadTexts: psCommandSpareR8.setDescription(' Spare Command')
psCommandSpareR9 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 15, 49), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psCommandSpareR9.setStatus('current')
if mibBuilder.loadTexts: psCommandSpareR9.setDescription(' Spare Command')
psCommandSpareR10 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 15, 50), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psCommandSpareR10.setStatus('current')
if mibBuilder.loadTexts: psCommandSpareR10.setDescription(' Spare Command')
psCommandSpareW0 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 15, 51), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psCommandSpareW0.setStatus('current')
if mibBuilder.loadTexts: psCommandSpareW0.setDescription(' Spare Command')
psCommandSpareW1 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 15, 52), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psCommandSpareW1.setStatus('current')
if mibBuilder.loadTexts: psCommandSpareW1.setDescription(' Spare Command')
psCommandSpareW2 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 15, 53), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psCommandSpareW2.setStatus('current')
if mibBuilder.loadTexts: psCommandSpareW2.setDescription(' Spare Command')
psCommandSpareW3 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 15, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psCommandSpareW3.setStatus('current')
if mibBuilder.loadTexts: psCommandSpareW3.setDescription(' Spare Command')
psCommandSpareW4 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 15, 55), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psCommandSpareW4.setStatus('current')
if mibBuilder.loadTexts: psCommandSpareW4.setDescription(' Spare Command')
psCommandSpareW5 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 15, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psCommandSpareW5.setStatus('current')
if mibBuilder.loadTexts: psCommandSpareW5.setDescription(' Spare Command')
psCommandSpareW6 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 15, 57), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psCommandSpareW6.setStatus('current')
if mibBuilder.loadTexts: psCommandSpareW6.setDescription(' Spare Command')
psCommandSpareW7 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 15, 58), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psCommandSpareW7.setStatus('current')
if mibBuilder.loadTexts: psCommandSpareW7.setDescription(' Spare Command')
psCommandSpareW8 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 15, 59), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psCommandSpareW8.setStatus('current')
if mibBuilder.loadTexts: psCommandSpareW8.setDescription(' Spare Command')
psCommandSpareW9 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 15, 60), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psCommandSpareW9.setStatus('current')
if mibBuilder.loadTexts: psCommandSpareW9.setDescription(' Spare Command')
psCommandSpareW10 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 15, 61), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psCommandSpareW10.setStatus('current')
if mibBuilder.loadTexts: psCommandSpareW10.setDescription(' Spare Command')
psCommandSpareW11 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 15, 62), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psCommandSpareW11.setStatus('current')
if mibBuilder.loadTexts: psCommandSpareW11.setDescription(' Spare Command')
psCommandSpareW12 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 15, 63), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psCommandSpareW12.setStatus('current')
if mibBuilder.loadTexts: psCommandSpareW12.setDescription(' Spare Command')
psSpare1 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 17, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psSpare1.setStatus('current')
if mibBuilder.loadTexts: psSpare1.setDescription(' Spare MIB ')
psSpare2 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 17, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psSpare2.setStatus('current')
if mibBuilder.loadTexts: psSpare2.setDescription(' Spare MIB ')
psSpare3 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 17, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psSpare3.setStatus('current')
if mibBuilder.loadTexts: psSpare3.setDescription(' Spare MIB ')
psSpare4 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 17, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psSpare4.setStatus('current')
if mibBuilder.loadTexts: psSpare4.setDescription(' Spare MIB ')
psSpare5 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 17, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psSpare5.setStatus('current')
if mibBuilder.loadTexts: psSpare5.setDescription(' Spare MIB ')
psSpare6 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 17, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psSpare6.setStatus('current')
if mibBuilder.loadTexts: psSpare6.setDescription(' Spare MIB ')
psSpare7 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 17, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psSpare7.setStatus('current')
if mibBuilder.loadTexts: psSpare7.setDescription(' Spare MIB ')
psSpare8 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 17, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psSpare8.setStatus('current')
if mibBuilder.loadTexts: psSpare8.setDescription(' Spare MIB ')
psSpare9 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 17, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psSpare9.setStatus('current')
if mibBuilder.loadTexts: psSpare9.setDescription(' Spare MIB ')
psSpare10 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 17, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psSpare10.setStatus('current')
if mibBuilder.loadTexts: psSpare10.setDescription(' Spare MIB ')
psSpare11 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 17, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psSpare11.setStatus('current')
if mibBuilder.loadTexts: psSpare11.setDescription(' Spare MIB ')
psSpare12 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 17, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psSpare12.setStatus('current')
if mibBuilder.loadTexts: psSpare12.setDescription(' Spare MIB ')
psSpare13 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 17, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psSpare13.setStatus('current')
if mibBuilder.loadTexts: psSpare13.setDescription(' Spare MIB ')
psSpare14 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 17, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psSpare14.setStatus('current')
if mibBuilder.loadTexts: psSpare14.setDescription(' Spare MIB ')
psSpare15 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 17, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psSpare15.setStatus('current')
if mibBuilder.loadTexts: psSpare15.setDescription(' Spare MIB ')
psSpare16 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 17, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psSpare16.setStatus('current')
if mibBuilder.loadTexts: psSpare16.setDescription(' Spare MIB ')
psSpare17 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 17, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psSpare17.setStatus('current')
if mibBuilder.loadTexts: psSpare17.setDescription(' Spare MIB ')
psSpare18 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 17, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psSpare18.setStatus('current')
if mibBuilder.loadTexts: psSpare18.setDescription(' Spare MIB ')
psSpare19 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 17, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psSpare19.setStatus('current')
if mibBuilder.loadTexts: psSpare19.setDescription(' Spare MIB ')
psSpare20 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 17, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psSpare20.setStatus('current')
if mibBuilder.loadTexts: psSpare20.setDescription(' Spare MIB ')
psSpare21 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 17, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psSpare21.setStatus('current')
if mibBuilder.loadTexts: psSpare21.setDescription(' Spare MIB ')
psSpare22 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 17, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psSpare22.setStatus('current')
if mibBuilder.loadTexts: psSpare22.setDescription(' Spare MIB ')
psSpare23 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 17, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psSpare23.setStatus('current')
if mibBuilder.loadTexts: psSpare23.setDescription(' Spare MIB ')
psSpare24 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 17, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psSpare24.setStatus('current')
if mibBuilder.loadTexts: psSpare24.setDescription(' Spare MIB ')
psSpare25 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 17, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psSpare25.setStatus('current')
if mibBuilder.loadTexts: psSpare25.setDescription(' Spare MIB ')
psSpare26 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 17, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psSpare26.setStatus('current')
if mibBuilder.loadTexts: psSpare26.setDescription(' Spare MIB ')
psSpare27 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 17, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psSpare27.setStatus('current')
if mibBuilder.loadTexts: psSpare27.setDescription(' Spare MIB ')
psSpare28 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 17, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psSpare28.setStatus('current')
if mibBuilder.loadTexts: psSpare28.setDescription(' Spare MIB ')
psSpare29 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 17, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psSpare29.setStatus('current')
if mibBuilder.loadTexts: psSpare29.setDescription(' Spare MIB ')
psSpare30 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 17, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psSpare30.setStatus('current')
if mibBuilder.loadTexts: psSpare30.setDescription(' Spare MIB ')
psSpare31 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 17, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psSpare31.setStatus('current')
if mibBuilder.loadTexts: psSpare31.setDescription(' Spare MIB ')
psSpare32 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 17, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psSpare32.setStatus('current')
if mibBuilder.loadTexts: psSpare32.setDescription(' Spare MIB ')
psDialATDModemSetUp = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 18, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psDialATDModemSetUp.setStatus('current')
if mibBuilder.loadTexts: psDialATDModemSetUp.setDescription(' ATD COMMAND For MODEM SET UP\n        Example :\n   This is default for Cellolar Modem\n       ATZ\\x0d ATS0=1\\x0d AT&D0\\x0d AT+IPR=9600\\x0d\\x00\n      \n')
psDialATDDialOut = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 18, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psDialATDDialOut.setStatus('current')
if mibBuilder.loadTexts: psDialATDDialOut.setDescription(' ATD COMMAND For Dial Out\n        \n      \n')
psDialOutFlag = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 18, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nodialout", 0), ("dialout", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psDialOutFlag.setStatus('current')
if mibBuilder.loadTexts: psDialOutFlag.setDescription(' Dial Out flag\n   1 =dial out        \n      \n')
psDialOutNumRetries = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 18, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psDialOutNumRetries.setStatus('current')
if mibBuilder.loadTexts: psDialOutNumRetries.setDescription(' Number of retries if dial failed        \n      \n')
psDialOutNumRetriesActual = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 18, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psDialOutNumRetriesActual.setStatus('current')
if mibBuilder.loadTexts: psDialOutNumRetriesActual.setDescription(' Number of actual  retries done if dial failed        \n      \n')
psDialTimeOutBetweenRetries = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 18, 6), Integer32()).setUnits('10 Seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: psDialTimeOutBetweenRetries.setStatus('current')
if mibBuilder.loadTexts: psDialTimeOutBetweenRetries.setDescription('Time out between retries in 10 Seconds units        \n      \n')
psDialTimeOutAfterLastSuccess = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 18, 7), Integer32()).setUnits('10 Seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: psDialTimeOutAfterLastSuccess.setStatus('current')
if mibBuilder.loadTexts: psDialTimeOutAfterLastSuccess.setDescription('Time out After last success  when we have new alarm in Minutes units        \n      \n')
psDialTimeOutAfterLastRetryFailed = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 18, 8), Integer32()).setUnits('Minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: psDialTimeOutAfterLastRetryFailed.setStatus('current')
if mibBuilder.loadTexts: psDialTimeOutAfterLastRetryFailed.setDescription('Time out After last retry failed  when we have new alarm in Minutes  units        \n      \n')
psPowerPlus1 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 19, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(128, 128)).setFixedLength(128)).setMaxAccess("readonly")
if mibBuilder.loadTexts: psPowerPlus1.setStatus('current')
if mibBuilder.loadTexts: psPowerPlus1.setDescription(' Power Plus  String 1\n      \n')
psPowerPlus2 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 19, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(128, 128)).setFixedLength(128)).setMaxAccess("readonly")
if mibBuilder.loadTexts: psPowerPlus2.setStatus('current')
if mibBuilder.loadTexts: psPowerPlus2.setDescription(' Power Plus  String 2\n      \n')
psPowerPlus3 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 19, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(128, 128)).setFixedLength(128)).setMaxAccess("readonly")
if mibBuilder.loadTexts: psPowerPlus3.setStatus('current')
if mibBuilder.loadTexts: psPowerPlus3.setDescription(' Power Plus  String 3\n      \n')
psPowerPlus4 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 19, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(128, 128)).setFixedLength(128)).setMaxAccess("readonly")
if mibBuilder.loadTexts: psPowerPlus4.setStatus('current')
if mibBuilder.loadTexts: psPowerPlus4.setDescription(' Power Plus  String 4\n      \n')
psPowerPlus5 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 19, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(128, 128)).setFixedLength(128)).setMaxAccess("readonly")
if mibBuilder.loadTexts: psPowerPlus5.setStatus('current')
if mibBuilder.loadTexts: psPowerPlus5.setDescription(' Power Plus  String 5\n      \n')
psPowerPlus6 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 19, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(128, 128)).setFixedLength(128)).setMaxAccess("readonly")
if mibBuilder.loadTexts: psPowerPlus6.setStatus('current')
if mibBuilder.loadTexts: psPowerPlus6.setDescription(' Power Plus  String 6\n      \n')
psPowerPlus7 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 19, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(128, 128)).setFixedLength(128)).setMaxAccess("readonly")
if mibBuilder.loadTexts: psPowerPlus7.setStatus('current')
if mibBuilder.loadTexts: psPowerPlus7.setDescription(' Power Plus  String 7\n      \n')
psPowerPlus8 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 19, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(128, 128)).setFixedLength(128)).setMaxAccess("readonly")
if mibBuilder.loadTexts: psPowerPlus8.setStatus('current')
if mibBuilder.loadTexts: psPowerPlus8.setDescription(' Power Plus  String 8\n      \n')
psPowerPlus9 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 19, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(128, 128)).setFixedLength(128)).setMaxAccess("readonly")
if mibBuilder.loadTexts: psPowerPlus9.setStatus('current')
if mibBuilder.loadTexts: psPowerPlus9.setDescription(' Power Plus  String 9\n      \n')
psPowerPlus10 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 19, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(128, 128)).setFixedLength(128)).setMaxAccess("readonly")
if mibBuilder.loadTexts: psPowerPlus10.setStatus('current')
if mibBuilder.loadTexts: psPowerPlus10.setDescription(' Power Plus  String 10\n      \n')
psPowerPlus11 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 19, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(128, 128)).setFixedLength(128)).setMaxAccess("readonly")
if mibBuilder.loadTexts: psPowerPlus11.setStatus('current')
if mibBuilder.loadTexts: psPowerPlus11.setDescription(' Power Plus  String 11\n      \n')
psPowerPlus12 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 19, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(128, 128)).setFixedLength(128)).setMaxAccess("readonly")
if mibBuilder.loadTexts: psPowerPlus12.setStatus('current')
if mibBuilder.loadTexts: psPowerPlus12.setDescription(' Power Plus  String 12\n      \n')
psPowerPlus13 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 19, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(128, 128)).setFixedLength(128)).setMaxAccess("readonly")
if mibBuilder.loadTexts: psPowerPlus13.setStatus('current')
if mibBuilder.loadTexts: psPowerPlus13.setDescription(' Power Plus  String 13\n      \n')
psPowerPlus14 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 19, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(128, 128)).setFixedLength(128)).setMaxAccess("readonly")
if mibBuilder.loadTexts: psPowerPlus14.setStatus('current')
if mibBuilder.loadTexts: psPowerPlus14.setDescription(' Power Plus  String 14\n      \n')
psPowerPlus15 = MibScalar((1, 3, 6, 1, 4, 1, 6050, 1, 19, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(128, 128)).setFixedLength(128)).setMaxAccess("readonly")
if mibBuilder.loadTexts: psPowerPlus15.setStatus('current')
if mibBuilder.loadTexts: psPowerPlus15.setDescription(' Power Plus  String 15\n      \n')
mibBuilder.exportSymbols("GAMATRONIC-MIB", psConfCurrentLimit=psConfCurrentLimit, psCommandDoSelfTest=psCommandDoSelfTest, psMonthlyAvrCurrent=psMonthlyAvrCurrent, psAlarmSet54=psAlarmSet54, psTrap1006AUXBreakerOpen=psTrap1006AUXBreakerOpen, psAlarmSet64=psAlarmSet64, psConfNomSpare9=psConfNomSpare9, psStatusAlarm78=psStatusAlarm78, psDryContactor1Alarm3=psDryContactor1Alarm3, psTrapCB48CR=psTrapCB48CR, psStatusAlarm82=psStatusAlarm82, psCommandSpareW2=psCommandSpareW2, psAlarmSet57=psAlarmSet57, psDryContactorAlarm23=psDryContactorAlarm23, psMonthlyMonth=psMonthlyMonth, psSecurityErasePassword=psSecurityErasePassword, psConfNomSpare6=psConfNomSpare6, psDCoutputSpare1=psDCoutputSpare1, psStatusAlarm16=psStatusAlarm16, psContuctor9=psContuctor9, psStatusAlarm52=psStatusAlarm52, psAlarmSet18=psAlarmSet18, psPSUReserve3=psPSUReserve3, psConfNomSpare0=psConfNomSpare0, psMonthlyTable=psMonthlyTable, psAlarmSet44=psAlarmSet44, psACInputSurgeStatus=psACInputSurgeStatus, psStatusAlarm30=psStatusAlarm30, psCommandEraseTotalTime=psCommandEraseTotalTime, psDialTimeOutAfterLastSuccess=psDialTimeOutAfterLastSuccess, psCommandSpareR6=psCommandSpareR6, psAlarmSet60=psAlarmSet60, psSpare=psSpare, psUnitRTCYear=psUnitRTCYear, psCommandRunFlash1=psCommandRunFlash1, psConfEqualStopCurrent=psConfEqualStopCurrent, psDryContactorAlarm30=psDryContactorAlarm30, psHourlyMinVoltage=psHourlyMinVoltage, psBatterySpareWrite8=psBatterySpareWrite8, psDryContactor2Alarm7=psDryContactor2Alarm7, psTrap1006BatteryBreakerOpen=psTrap1006BatteryBreakerOpen, psDryContactorAlarm20=psDryContactorAlarm20, psDryContactor2Alarm6=psDryContactor2Alarm6, psDryContactorAlarm31=psDryContactorAlarm31, psConfEnablePeriodicEqualize=psConfEnablePeriodicEqualize, psDailyAvrVoltage=psDailyAvrVoltage, psAlarmSet24=psAlarmSet24, psStatusAlarm56=psStatusAlarm56, psBatterySpareWrite7=psBatterySpareWrite7, psINUPsOK=psINUPsOK, psCommandLoadUserParameters=psCommandLoadUserParameters, psCommandLeds=psCommandLeds, psSpare31=psSpare31, psBatteryNearestTestDay=psBatteryNearestTestDay, psAlarmSet4=psAlarmSet4, psDryContactStatus=psDryContactStatus, psStatusAlarm60=psStatusAlarm60, psSpare32=psSpare32, psDryContactorAlarm28=psDryContactorAlarm28, psHourlyFirst=psHourlyFirst, psAlarmSet84=psAlarmSet84, psBattery=psBattery, psINUSelfTestPass=psINUSelfTestPass, psMonthlyMinCurrent=psMonthlyMinCurrent, psAlarmSet49=psAlarmSet49, psBatteryEqRunTimeHours=psBatteryEqRunTimeHours, psDryContactor2Alarm32=psDryContactor2Alarm32, psBatteryEqRunTimeMinutes=psBatteryEqRunTimeMinutes, psConfEqMajorHighVoltageHV=psConfEqMajorHighVoltageHV, psStatusAlarm34=psStatusAlarm34, psStatusAlarm23=psStatusAlarm23, psDailyMaxVoltage=psDailyMaxVoltage, psDCOutputDCOutput=psDCOutputDCOutput, psCommandAbortProgramFlash=psCommandAbortProgramFlash, psAlarmSet77=psAlarmSet77, psBatteryTemperature=psBatteryTemperature, psStatusAlarm72=psStatusAlarm72, psDCoutputCurrent2=psDCoutputCurrent2, psDailyFirst=psDailyFirst, psAlarmSet19=psAlarmSet19, psMonthlyIndex=psMonthlyIndex, psINUNumber=psINUNumber, psUnitSoftwareVersion=psUnitSoftwareVersion, psACInputVoltage1=psACInputVoltage1, psLogIndex=psLogIndex, psDryContactor1Alarm1=psDryContactor1Alarm1, psINUIndex=psINUIndex, psAlarmSet20=psAlarmSet20, psAlarmSet11=psAlarmSet11, psSecuritySetGetPassword=psSecuritySetGetPassword, psTrapSURGBD=psTrapSURGBD, psDialTimeOutAfterLastRetryFailed=psDialTimeOutAfterLastRetryFailed, psCommandSpareR8=psCommandSpareR8, psAlarmSet3=psAlarmSet3, psStatusAlarm1=psStatusAlarm1, psAlarmSet81=psAlarmSet81, psStatusAlarm63=psStatusAlarm63, psDCoutputCurrent5=psDCoutputCurrent5, psUnitRTCDay=psUnitRTCDay, psAlarmSet90=psAlarmSet90, psStatusAlarm38=psStatusAlarm38, psUnitSerialNumber=psUnitSerialNumber, psTrapFUSEBD=psTrapFUSEBD, psBatterySpareWrite5=psBatterySpareWrite5, psDryContactor2Alarm22=psDryContactor2Alarm22, psACInputVoltage3=psACInputVoltage3, psTrap1006AUXContactOpen=psTrap1006AUXContactOpen, psAlarmSet85=psAlarmSet85, psTrap1006Battery1TestFault=psTrap1006Battery1TestFault, psStatusAlarm57=psStatusAlarm57, psCommandFlash1SWRev=psCommandFlash1SWRev, psBatterySpareRead3=psBatterySpareRead3, psCommandNonActiveStatus=psCommandNonActiveStatus, psTrapBYPS2=psTrapBYPS2, psAlarmSet=psAlarmSet, psConfNumberOfBattery=psConfNumberOfBattery, psCommand=psCommand, psSpare25=psSpare25, psDCoutputInvertorVoltage=psDCoutputInvertorVoltage, psTrap1006Rectifier=psTrap1006Rectifier, psDryContactor2Alarm24=psDryContactor2Alarm24, psDryContactor1Alarm32=psDryContactor1Alarm32, psCommandSpareR2=psCommandSpareR2, psHourlyAvrVoltage=psHourlyAvrVoltage, psBatteryNearestTestHour=psBatteryNearestTestHour, psINUReserve3=psINUReserve3, psPSUCurrentLimitExceed=psPSUCurrentLimitExceed, psBatteryNearestTestMinute=psBatteryNearestTestMinute, psSpare28=psSpare28, psPSUActivity=psPSUActivity, psStatusAlarm70=psStatusAlarm70, psCommandSpareR5=psCommandSpareR5, psStatusAlarm91=psStatusAlarm91, psDryContactor2Alarm30=psDryContactor2Alarm30, psDCoutputCurrent3=psDCoutputCurrent3, psACInput=psACInput, psAlarmSet42=psAlarmSet42, psAlarmSet89=psAlarmSet89, psAlarmSet80=psAlarmSet80, psCommandStoreUserParameters=psCommandStoreUserParameters, psPowerPlus1=psPowerPlus1, psTrapCBOPEN=psTrapCBOPEN, psStatusAlarm4=psStatusAlarm4, psConfNumOfInvertors=psConfNumOfInvertors, psDryContactorAlarm9=psDryContactorAlarm9, psStatusAlarm76=psStatusAlarm76, psACInputCurrent1=psACInputCurrent1, psDryContactor2Alarm4=psDryContactor2Alarm4, psStatusAlarm74=psStatusAlarm74, psPowerPlus13=psPowerPlus13, psConfLVDDisconnectTime=psConfLVDDisconnectTime, psBatteryInstalationMonth=psBatteryInstalationMonth, psTrapRFAMIN=psTrapRFAMIN, psTrapStatus=psTrapStatus, psStatusAlarm22=psStatusAlarm22, psBatteryNearestTestMonth=psBatteryNearestTestMonth, psStatusAlarm68=psStatusAlarm68, psStatusAlarm83=psStatusAlarm83, psINUShutHighTemp=psINUShutHighTemp, psStatusAlarm32=psStatusAlarm32, psBatteryLoadTime=psBatteryLoadTime, psAlarmSet73=psAlarmSet73, psHourlyEntry=psHourlyEntry, psWorkingTime=psWorkingTime, psStatusAlarm61=psStatusAlarm61, psPSUIndication=psPSUIndication, psCommandSpareW5=psCommandSpareW5, psStatusAlarm14=psStatusAlarm14, psTrap1006LVD1Open=psTrap1006LVD1Open, psDryContactorAlarm29=psDryContactorAlarm29, psBatteryTemperatureSign=psBatteryTemperatureSign, psCommandIpAddress=psCommandIpAddress, psDryContactorAlarm17=psDryContactorAlarm17, psDryContactor1Alarm4=psDryContactor1Alarm4, psDryContactor2Alarm26=psDryContactor2Alarm26, psCommandAbortBatTest=psCommandAbortBatTest, psAlarmSet87=psAlarmSet87, psBatteryTestTime=psBatteryTestTime, psINUShutHighVolt=psINUShutHighVolt, psCommandGoEqualizing=psCommandGoEqualizing, psBatterySpareRead1=psBatterySpareRead1, psDryContactorAlarm8=psDryContactorAlarm8, psAlarmSet34=psAlarmSet34, psAlarmSet21=psAlarmSet21, psAlarmSet27=psAlarmSet27, psINUIndication=psINUIndication, psSecurityComunity3=psSecurityComunity3, psAlarmSet28=psAlarmSet28, psSecurityTrapIp4=psSecurityTrapIp4, psSpare20=psSpare20, psCommandSpareR7=psCommandSpareR7, psAlarmSet95=psAlarmSet95, psDryContactor2Alarm31=psDryContactor2Alarm31, psPSUFanStataus=psPSUFanStataus, psAlarmSet76=psAlarmSet76, psAlarmSet8=psAlarmSet8, psSpare6=psSpare6, psCommandFlash2SWRev=psCommandFlash2SWRev, psDryContactor1Alarm22=psDryContactor1Alarm22, psPSUEntry=psPSUEntry, psDryContactor1Alarm24=psDryContactor1Alarm24, psStatusAlarm77=psStatusAlarm77, psHourlyTable=psHourlyTable, psDryContactor2Alarm5=psDryContactor2Alarm5, psDryContact1Status=psDryContact1Status, psConfNumOfRectifiers=psConfNumOfRectifiers, psAlarmSet63=psAlarmSet63, psStatusAlarm44=psStatusAlarm44, psACInputCurrent3=psACInputCurrent3, psINUReserve8=psINUReserve8, psStatusAlarm55=psStatusAlarm55, psDryContactorAlarm24=psDryContactorAlarm24, psUnitPSType=psUnitPSType, psStatusAlarm58=psStatusAlarm58, psTrapUNIVPD=psTrapUNIVPD, psStatusAlarm8=psStatusAlarm8, psTrapCB24CR=psTrapCB24CR, psAlarmSet51=psAlarmSet51, psAlarmSet69=psAlarmSet69, psSpare12=psSpare12, psDryContactor1Alarm19=psDryContactor1Alarm19, psTrapRFAMAJ=psTrapRFAMAJ, psStatusAlarm53=psStatusAlarm53, psStatusAlarm28=psStatusAlarm28, psAlarmSet43=psAlarmSet43, psCommandSpareR0=psCommandSpareR0, psTrapBATOT=psTrapBATOT, psMonthlyLast=psMonthlyLast, psConfEqMinorLowVoltageLV=psConfEqMinorLowVoltageLV, psConfNomSpare1=psConfNomSpare1, psPowerPlus6=psPowerPlus6, psPowerPlus7=psPowerPlus7, psDryContactor1Alarm6=psDryContactor1Alarm6, psStatusAlarm65=psStatusAlarm65, psPowerPlus=psPowerPlus, psSpareIde6=psSpareIde6, gamatronicLTD=gamatronicLTD, psPSUEqualizeMode=psPSUEqualizeMode, psLogStatus=psLogStatus, psTrapPrefix=psTrapPrefix, psCommandRemoteTest=psCommandRemoteTest, psSpare1=psSpare1, psAlarmSet30=psAlarmSet30, psDCoutputSpare3=psDCoutputSpare3, psDryContactorAlarm32=psDryContactorAlarm32, psCommandFlashFix=psCommandFlashFix, psBatteryInstalationYear=psBatteryInstalationYear, psDryContactor1Alarm28=psDryContactor1Alarm28, psDryContactor1Alarm16=psDryContactor1Alarm16, psCommandDownLoadSoftware=psCommandDownLoadSoftware, psAlarmSet25=psAlarmSet25, psLogAlarmCode=psLogAlarmCode, psConfTemperatureCoefficient=psConfTemperatureCoefficient, psCommandSpareW3=psCommandSpareW3)
mibBuilder.exportSymbols("GAMATRONIC-MIB", psSpare22=psSpare22, psBatteryStatus=psBatteryStatus, psDryContactor1Alarm21=psDryContactor1Alarm21, psSpareIde5=psSpareIde5, psCommandLoadUserDefaults=psCommandLoadUserDefaults, psStatusAlarm9=psStatusAlarm9, psDryContactor1Index=psDryContactor1Index, psConfNomSpare2=psConfNomSpare2, psStatusAlarm24=psStatusAlarm24, psAlarmSet74=psAlarmSet74, psPSUShutHighVolt=psPSUShutHighVolt, psCommandSpareW8=psCommandSpareW8, psDryContactor2Alarm2=psDryContactor2Alarm2, psStatusAlarm18=psStatusAlarm18, psDialATDDialOut=psDialATDDialOut, psINUNOOut=psINUNOOut, psSeverityMapEntry=psSeverityMapEntry, psStatusAlarm12=psStatusAlarm12, psUnitRTCMonth=psUnitRTCMonth, psDryContactor2Alarm13=psDryContactor2Alarm13, psINUFanStataus=psINUFanStataus, psTrap1006DCLOWLow=psTrap1006DCLOWLow, psAlarmSet96=psAlarmSet96, psSecurityPasswordSet=psSecurityPasswordSet, psAlarmSet93=psAlarmSet93, psDryContactor2Alarm19=psDryContactor2Alarm19, psTrap1006LoadBreakerOpen=psTrap1006LoadBreakerOpen, psBatteryNominalCapacity=psBatteryNominalCapacity, psCommandSpareR4=psCommandSpareR4, psBatteryVoltage=psBatteryVoltage, psACInputCurrent2=psACInputCurrent2, psSpare5=psSpare5, psTrapEQHST=psTrapEQHST, psDryContactorAlarm22=psDryContactorAlarm22, psSpare8=psSpare8, psAlarmSet32=psAlarmSet32, psDailyMinVoltage=psDailyMinVoltage, psConfNomSpare7=psConfNomSpare7, psACInputSpareInp5=psACInputSpareInp5, psDryContactor2Alarm8=psDryContactor2Alarm8, psDryContactor2Alarm23=psDryContactor2Alarm23, psAlarmSet2=psAlarmSet2, psDryContactor1Alarm25=psDryContactor1Alarm25, psStatusAlarm3=psStatusAlarm3, psACInputSpareInp6=psACInputSpareInp6, psBatteryFuseStatus=psBatteryFuseStatus, psPSUVoltage=psPSUVoltage, psDial=psDial, psPSUTestStatus=psPSUTestStatus, psPSUACInputOK=psPSUACInputOK, psStatus=psStatus, psAlarmSet79=psAlarmSet79, psStatusAlarm39=psStatusAlarm39, psPSUCurrent=psPSUCurrent, psDailyTable=psDailyTable, psPSUFloatingMode=psPSUFloatingMode, psSpare4=psSpare4, psDryContactorAlarm16=psDryContactorAlarm16, PYSNMP_MODULE_ID=gamatronicLTD, psAlarmSet56=psAlarmSet56, psLogDateMonth=psLogDateMonth, psCommandDownLoadCheck=psCommandDownLoadCheck, psDryContactorAlarm25=psDryContactorAlarm25, psStatusAlarm79=psStatusAlarm79, psStatusAlarm11=psStatusAlarm11, psBatteryCurrent=psBatteryCurrent, psDryContact2Status=psDryContact2Status, psINUPsType=psINUPsType, psStatusAlarm33=psStatusAlarm33, psSpare14=psSpare14, psPSUReserve2=psPSUReserve2, psCommandRunFlash2=psCommandRunFlash2, psSeverityMapTable=psSeverityMapTable, psINUCurrent=psINUCurrent, psStatusAlarm93=psStatusAlarm93, psDryContactor1Alarm31=psDryContactor1Alarm31, psAlarmSet9=psAlarmSet9, psAlarmSet70=psAlarmSet70, psTrapBATTST=psTrapBATTST, psDryContactor1Alarm29=psDryContactor1Alarm29, psUnitSysName=psUnitSysName, psSpare15=psSpare15, psStatusAlarm40=psStatusAlarm40, psPSU=psPSU, psSpare3=psSpare3, psStatusAlarm15=psStatusAlarm15, psPSUShutHighTemp=psPSUShutHighTemp, psTrapIBADIN=psTrapIBADIN, psSecurityComunity2=psSecurityComunity2, psINUVoltage=psINUVoltage, psPowerPlus11=psPowerPlus11, psSpare2=psSpare2, psDCoutputVoltage=psDCoutputVoltage, psAlarmSet68=psAlarmSet68, psSecurityPasswordComunity=psSecurityPasswordComunity, psStatusAlarm81=psStatusAlarm81, psUnitControllerType=psUnitControllerType, psTrapEQLONG=psTrapEQLONG, psDryContactor1Alarm13=psDryContactor1Alarm13, psTrap1006Battery2TestFault=psTrap1006Battery2TestFault, psTrap1006ACHigh=psTrap1006ACHigh, psDialOutNumRetriesActual=psDialOutNumRetriesActual, psDailyIndex=psDailyIndex, psDryContactor1Alarm8=psDryContactor1Alarm8, psBatteryCurrentDirection=psBatteryCurrentDirection, psCommandTestBatteryAll=psCommandTestBatteryAll, psHourlyMinCurrent=psHourlyMinCurrent, psDCoutputCurrent1=psDCoutputCurrent1, psStatistics=psStatistics, psBatterySpareRead2=psBatterySpareRead2, psACInputSpareInp4=psACInputSpareInp4, psAlarmSet38=psAlarmSet38, psCommandProgramNonActiveFlash=psCommandProgramNonActiveFlash, psINUReserve9=psINUReserve9, psStatusAlarm90=psStatusAlarm90, PsAlarmSeverity=PsAlarmSeverity, psDryContactor2Alarm20=psDryContactor2Alarm20, psConfEqMajorLowVoltageLV1=psConfEqMajorLowVoltageLV1, psDryContactorIndex=psDryContactorIndex, psTrap1006ACLow=psTrap1006ACLow, psAlarm=psAlarm, psAlarmSet10=psAlarmSet10, psAlarmSet58=psAlarmSet58, psSpare19=psSpare19, psContuctor4=psContuctor4, psDryContactor1Alarm20=psDryContactor1Alarm20, psConfBDOC=psConfBDOC, psStatusAlarm20=psStatusAlarm20, psDryContactor1Alarm11=psDryContactor1Alarm11, psTrap=psTrap, psCommandSpareR10=psCommandSpareR10, psSecurityInterfaceGateWay=psSecurityInterfaceGateWay, psCommandControlerStatus=psCommandControlerStatus, psDryContactor1Alarm15=psDryContactor1Alarm15, psBatteryActualCapacity=psBatteryActualCapacity, psINUEntry=psINUEntry, psMonthlyMinVoltage=psMonthlyMinVoltage, psCommandSpareW11=psCommandSpareW11, psConfInvertorHighVoltage=psConfInvertorHighVoltage, psSecurityInterfaceActivate=psSecurityInterfaceActivate, psDryContactor2Alarm27=psDryContactor2Alarm27, psSpare10=psSpare10, psStatusAlarm59=psStatusAlarm59, psINU=psINU, psStatusAlarm45=psStatusAlarm45, psCommandNonActiveFlash=psCommandNonActiveFlash, psSpareIde7=psSpareIde7, psHourlyMaxCurrent=psHourlyMaxCurrent, psAlarmSet72=psAlarmSet72, psMonthlyAvrVoltage=psMonthlyAvrVoltage, psPSUSelfTestPass=psPSUSelfTestPass, psPowerPlus3=psPowerPlus3, psDryContactor2Alarm10=psDryContactor2Alarm10, psLogDateDay=psLogDateDay, psCommandUserDefine5=psCommandUserDefine5, psConfEnableTempComp=psConfEnableTempComp, psDCoutputSpare2=psDCoutputSpare2, psStatusAlarmStruct2=psStatusAlarmStruct2, psDailyMaxCurrent=psDailyMaxCurrent, psDryContactorAlarm13=psDryContactorAlarm13, psCommandDoBoot=psCommandDoBoot, psContuctor8=psContuctor8, psTrapSLFTST=psTrapSLFTST, psUnitManufacture=psUnitManufacture, psAlarmSet48=psAlarmSet48, psDryContactor1Entry=psDryContactor1Entry, psDryContactorAlarm10=psDryContactorAlarm10, psStatusAlarmStruct=psStatusAlarmStruct, psBatterySpareWrite1=psBatterySpareWrite1, psLogLast=psLogLast, psCommandFlash1Protect=psCommandFlash1Protect, psSpareIde1=psSpareIde1, psDCoutputSpare4=psDCoutputSpare4, psCommandSpareR1=psCommandSpareR1, psStatusAlarm7=psStatusAlarm7, psTrapActivation=psTrapActivation, psINUReserve10=psINUReserve10, psDryContactor2Alarm18=psDryContactor2Alarm18, psSecurity=psSecurity, psConfEnableCurrentLimit=psConfEnableCurrentLimit, psAlarmSet23=psAlarmSet23, psUnitBatteryType=psUnitBatteryType, psTrapACFAIL=psTrapACFAIL, psAlarmSet33=psAlarmSet33, psLogDateMinute=psLogDateMinute, psSeverityMapIndex=psSeverityMapIndex, psMonthlyFirst=psMonthlyFirst, psConfMajorLowVoltage=psConfMajorLowVoltage, psINUCurrentLimitDecreased=psINUCurrentLimitDecreased, psPSUNOOut=psPSUNOOut, psDailyEntry=psDailyEntry, psCommandDryInStatus=psCommandDryInStatus, psSpareIde3=psSpareIde3, psStatusAlarm26=psStatusAlarm26, psAlarmSet75=psAlarmSet75, psDryContactor2Alarm3=psDryContactor2Alarm3, psCommandStoreUserDefaults=psCommandStoreUserDefaults, psDCOutput=psDCOutput, psConfEqualStartCurrent=psConfEqualStartCurrent, psPSUBadSharing=psPSUBadSharing, psAlarmSet31=psAlarmSet31, psAlarmSet59=psAlarmSet59, psDCoutputSpare5=psDCoutputSpare5, psConfEqualStopTime=psConfEqualStopTime, psStatusAlarm6=psStatusAlarm6, psUnitRTCSecond=psUnitRTCSecond, psSpare17=psSpare17, psDryContactorAlarm18=psDryContactorAlarm18, psConfHIA=psConfHIA, psStatusAlarm41=psStatusAlarm41, psACInputACStatus=psACInputACStatus, psLogDateHour=psLogDateHour, psAlarmSet92=psAlarmSet92, psStatusAlarm89=psStatusAlarm89, psCommandSpareW7=psCommandSpareW7, psCommandSpareW9=psCommandSpareW9, psStatusAlarm25=psStatusAlarm25, psAlarmSet86=psAlarmSet86, psTrapSYSOT=psTrapSYSOT, psDryContactorAlarm1=psDryContactorAlarm1, psDryContactor2Alarm28=psDryContactor2Alarm28, psAlarmSet29=psAlarmSet29, psDryContactorAlarm14=psDryContactorAlarm14, psCommandFlash2Protect=psCommandFlash2Protect, psDialTimeOutBetweenRetries=psDialTimeOutBetweenRetries, psDryContactor1Alarm23=psDryContactor1Alarm23, psStatusAlarm46=psStatusAlarm46, psPowerPlus15=psPowerPlus15, psDryContact1Table=psDryContact1Table, psTrap1006OverTemptature=psTrap1006OverTemptature, psAlarmSet83=psAlarmSet83, psAlarmSet36=psAlarmSet36, psStatusAlarm29=psStatusAlarm29, psINUShutInstruction=psINUShutInstruction, psStatusAlarm95=psStatusAlarm95, psBatteryIndex=psBatteryIndex, psINUNotRespond=psINUNotRespond, psSpare9=psSpare9, psStatusAlarm5=psStatusAlarm5, psSeverityMapAlarm1to32=psSeverityMapAlarm1to32, psDryContactorAlarm26=psDryContactorAlarm26, psSpare11=psSpare11, psTrapLOADHI=psTrapLOADHI, psSeverityMap=psSeverityMap, psTrapINUBAD=psTrapINUBAD, psConfLowTempAlarmSign=psConfLowTempAlarmSign, psStatusAlarm69=psStatusAlarm69, psDryContactorAlarm19=psDryContactorAlarm19, psAlarmSet67=psAlarmSet67, psStatusAlarm87=psStatusAlarm87, psContuctor10=psContuctor10, psConfNominal=psConfNominal, psINUStatus=psINUStatus, psStatusAlarm75=psStatusAlarm75)
mibBuilder.exportSymbols("GAMATRONIC-MIB", psAlarm1006=psAlarm1006, psAlarmSet52=psAlarmSet52, psINUReserve1=psINUReserve1, psCommandUserDefine3=psCommandUserDefine3, psContuctor6=psContuctor6, psContuctor=psContuctor, psStatusAlarm27=psStatusAlarm27, psINUBadSharing=psINUBadSharing, psMonthlyMaxVoltage=psMonthlyMaxVoltage, psLogGeneral=psLogGeneral, psConfFloatingVoltage=psConfFloatingVoltage, psStatusAlarm17=psStatusAlarm17, psConfBatteryNominalCapacity=psConfBatteryNominalCapacity, psDryContactor2Alarm15=psDryContactor2Alarm15, psStatusAlarm71=psStatusAlarm71, psACInputFrequency=psACInputFrequency, psContuctor5=psContuctor5, psMonthlyEntry=psMonthlyEntry, psBatteryNumber=psBatteryNumber, psAlarmSet17=psAlarmSet17, psAlarmSet26=psAlarmSet26, psSpare27=psSpare27, psStatusAlarm2=psStatusAlarm2, psSpare21=psSpare21, psDailyMinCurrent=psDailyMinCurrent, psCommandSpareW1=psCommandSpareW1, psDryContactor1Alarm5=psDryContactor1Alarm5, psAlarmSet6=psAlarmSet6, psMonthlyMaxCurrent=psMonthlyMaxCurrent, psPSUStatus=psPSUStatus, psTrapLVDX2=psTrapLVDX2, psAlarmSet5=psAlarmSet5, psConfACLow=psConfACLow, psCommandFileName=psCommandFileName, psPSUPsType=psPSUPsType, psTrap1006LVDBypassOpen=psTrap1006LVDBypassOpen, psHourlyLast=psHourlyLast, psTrapPrefix1006=psTrapPrefix1006, psDailyLast=psDailyLast, psDryContactor1Alarm26=psDryContactor1Alarm26, psConfACHigh=psConfACHigh, psPowerPlus14=psPowerPlus14, psDryContactTable=psDryContactTable, psDryContactor1Alarm2=psDryContactor1Alarm2, psLogDateTime=psLogDateTime, psTrap1006DCLow=psTrap1006DCLow, psDryContactor1Alarm27=psDryContactor1Alarm27, psCommandSpareW10=psCommandSpareW10, psStatusAlarm10=psStatusAlarm10, psSpare13=psSpare13, psSeverityMapAlarm33to64=psSeverityMapAlarm33to64, psBatteryEntry=psBatteryEntry, psConfEqMajorLowVoltageLv=psConfEqMajorLowVoltageLv, psACInputSpareInp0=psACInputSpareInp0, psBatterySpareWrite6=psBatterySpareWrite6, psAlarmSet37=psAlarmSet37, psDialATDModemSetUp=psDialATDModemSetUp, psDryContactor2Alarm12=psDryContactor2Alarm12, psCommandSpareW0=psCommandSpareW0, psStatusAlarm47=psStatusAlarm47, psSpare16=psSpare16, psBatteryTable=psBatteryTable, psPSUTemperature=psPSUTemperature, psDryContactor2Alarm17=psDryContactor2Alarm17, psConfLowTempAlarm=psConfLowTempAlarm, psUnitComProtocolVersion=psUnitComProtocolVersion, psDialOutFlag=psDialOutFlag, psDCoutputCurrent4=psDCoutputCurrent4, psDryContactorAlarm21=psDryContactorAlarm21, psStatusAlarm50=psStatusAlarm50, psSecurityInterfaceIP=psSecurityInterfaceIP, psDCoutputDCStatus=psDCoutputDCStatus, psDryContactorAlarm7=psDryContactorAlarm7, psDryContactorAlarm15=psDryContactorAlarm15, psConfNomSpare3=psConfNomSpare3, psSpare29=psSpare29, psAlarmSet94=psAlarmSet94, psPowerPlus4=psPowerPlus4, psDialOutNumRetries=psDialOutNumRetries, psCommandLoadDefault=psCommandLoadDefault, psConfMinorLowVoltage=psConfMinorLowVoltage, psHourlyAvrCurrent=psHourlyAvrCurrent, psDryContactor1Alarm7=psDryContactor1Alarm7, psTrapBYPS1=psTrapBYPS1, psMIB=psMIB, psPSURemoteMode=psPSURemoteMode, psDryContactor2Entry=psDryContactor2Entry, psDryContactor1Alarm9=psDryContactor1Alarm9, psTrapSeverity=psTrapSeverity, psStatusAlarm80=psStatusAlarm80, psConfGHighTempAlarm=psConfGHighTempAlarm, psAlarmSet39=psAlarmSet39, psDryContactor1Alarm17=psDryContactor1Alarm17, psDryContactorAlarm6=psDryContactorAlarm6, psConfMajorHighVoltage=psConfMajorHighVoltage, psLogFirst=psLogFirst, psTrapFUSE48=psTrapFUSE48, psSecurityTrapIp3=psSecurityTrapIp3, psConfNomSpare8=psConfNomSpare8, psINUCurrentLimitExceed=psINUCurrentLimitExceed, psINUReserve7=psINUReserve7, psHourlyIndex=psHourlyIndex, psSpare7=psSpare7, psTrapFUSE24=psTrapFUSE24, psDryContactor1Alarm30=psDryContactor1Alarm30, psStatusAlarm43=psStatusAlarm43, psStatusAlarm66=psStatusAlarm66, psHourlyMaxVoltage=psHourlyMaxVoltage, psSecurityInterfaceNetMask=psSecurityInterfaceNetMask, psPowerPlus12=psPowerPlus12, psAlarmSet12=psAlarmSet12, psPSUShutInstruction=psPSUShutInstruction, psAlarmSet45=psAlarmSet45, psContuctor1=psContuctor1, psBatteryInstalationDay=psBatteryInstalationDay, psAlarmSet40=psAlarmSet40, psAlarmSet53=psAlarmSet53, psDryContactorAlarm5=psDryContactorAlarm5, psStatusAlarmStruct1=psStatusAlarmStruct1, psStatusAlarm51=psStatusAlarm51, psDCoutputSpare6=psDCoutputSpare6, psINUActivity=psINUActivity, psStatusAlarm35=psStatusAlarm35, psDryContactor2Alarm16=psDryContactor2Alarm16, psDryContactor2Index=psDryContactor2Index, psConfNomSpare4=psConfNomSpare4, psStatusAlarm42=psStatusAlarm42, psStatusAlarm54=psStatusAlarm54, psAlarmSet7=psAlarmSet7, psStatusAlarm86=psStatusAlarm86, psAlarmSet61=psAlarmSet61, psBatterySpareWrite3=psBatterySpareWrite3, psConfEqualizingVoltage=psConfEqualizingVoltage, psConfMinorHighVoltage=psConfMinorHighVoltage, psCommandSpareR3=psCommandSpareR3, psAlarmSet14=psAlarmSet14, psSpareIde4=psSpareIde4, psAlarmSet1=psAlarmSet1, psUnitRTCMinute=psUnitRTCMinute, psDryContact2Table=psDryContact2Table, psStatusAlarm96=psStatusAlarm96, psLogTable=psLogTable, psAlarmSet13=psAlarmSet13, psStatusAlarm92=psStatusAlarm92, psAlarmSet15=psAlarmSet15, psPowerPlus10=psPowerPlus10, psStatusAlarm85=psStatusAlarm85, psSpareIde2=psSpareIde2, psSpare30=psSpare30, psDryContactorAlarm4=psDryContactorAlarm4, psTrap1006LVD2Open=psTrap1006LVD2Open, psDryContactorAlarm2=psDryContactorAlarm2, psACInputSpareInp2=psACInputSpareInp2, psDryContactor1Alarm14=psDryContactor1Alarm14, psAlarmSet35=psAlarmSet35, psConfNomSpare10=psConfNomSpare10, psConfNomSpare5=psConfNomSpare5, psAlarmSet16=psAlarmSet16, psCommandSpareW4=psCommandSpareW4, psDryContactorAlarm27=psDryContactorAlarm27, psINUTemperature=psINUTemperature, psCommandUserDefine4=psCommandUserDefine4, psAlarmSet22=psAlarmSet22, psPSUReserve1=psPSUReserve1, psLogDateSecond=psLogDateSecond, psSpare18=psSpare18, psStatusAlarm94=psStatusAlarm94, psCommandSpareR9=psCommandSpareR9, psDailyDayOfMonth=psDailyDayOfMonth, psCommandGoFloat=psCommandGoFloat, psDryContactor1Alarm12=psDryContactor1Alarm12, psCommandProgramingInProcess=psCommandProgramingInProcess, psBatterySpareWrite2=psBatterySpareWrite2, psDryContactor2Alarm29=psDryContactor2Alarm29, psINUPSpareBit=psINUPSpareBit, psDryContactorAlarm11=psDryContactorAlarm11, psDryContactor1Alarm10=psDryContactor1Alarm10, psDryContactor2Alarm1=psDryContactor2Alarm1, psPSUTable=psPSUTable, psACInputVoltage2=psACInputVoltage2, psHourlyEndTime=psHourlyEndTime, psAlarmSet66=psAlarmSet66, psStatusAlarm21=psStatusAlarm21, psDryContactor2Alarm14=psDryContactor2Alarm14, psStatusAlarm36=psStatusAlarm36, psCommandUserDefine2=psCommandUserDefine2, psAlarmSet71=psAlarmSet71, psCommandMBXSWRev=psCommandMBXSWRev, psAlarmSet62=psAlarmSet62, psStatusAlarm88=psStatusAlarm88, psTrapLVDX1=psTrapLVDX1, psSecurityComunity1=psSecurityComunity1, psContuctor7=psContuctor7, psAlarmSet78=psAlarmSet78, psStatusAlarm49=psStatusAlarm49, psPowerPlus5=psPowerPlus5, psContuctor3=psContuctor3, psSecurityTrapIp1=psSecurityTrapIp1, psStatusAlarm48=psStatusAlarm48, psConfInvertorLowVoltage=psConfInvertorLowVoltage, psPowerPlus8=psPowerPlus8, psSpare26=psSpare26, psStatusAlarm13=psStatusAlarm13, psConfNumberOfLVD=psConfNumberOfLVD, psSpare24=psSpare24, psACInputSpareInp1=psACInputSpareInp1, psINUReserve2=psINUReserve2, psDryContactorEntry=psDryContactorEntry, psDryContactor2Alarm25=psDryContactor2Alarm25, psLogEntry=psLogEntry, psTrapRBADIN=psTrapRBADIN, psStatusAlarm62=psStatusAlarm62, psBatteryTestStatus=psBatteryTestStatus, psDryContactor2Alarm21=psDryContactor2Alarm21, psINUTable=psINUTable, psCommandSpareW6=psCommandSpareW6, psCommandFlashFixNumber=psCommandFlashFixNumber, psConfEqualPeriod=psConfEqualPeriod, psStatusAlarm64=psStatusAlarm64, psDCoutputSurgeStatus=psDCoutputSurgeStatus, psStatusAlarm67=psStatusAlarm67, psPowerPlus9=psPowerPlus9, psBatterySpareWrite4=psBatterySpareWrite4, psDryContactor1Alarm18=psDryContactor1Alarm18, psPSUNumber=psPSUNumber, psDryContactorAlarm12=psDryContactorAlarm12, psConfEqMinorHighVoltageHV=psConfEqMinorHighVoltageHV, psLogDCVoltage=psLogDCVoltage, psAlarmSet46=psAlarmSet46, psDailyAvrCurrent=psDailyAvrCurrent, psAlarmSet47=psAlarmSet47, psAlarmSet55=psAlarmSet55, psAlarmSet65=psAlarmSet65, psContuctor2=psContuctor2, psAlarmSet50=psAlarmSet50, psLog=psLog, psLogDateYear=psLogDateYear, psConfMajorLowVoltage1=psConfMajorLowVoltage1, psUnit=psUnit, psDryContactor2Alarm11=psDryContactor2Alarm11, psAlarmSet82=psAlarmSet82, psAlarmSet88=psAlarmSet88, psCommandSpareW12=psCommandSpareW12, psSecurityTrapIp2=psSecurityTrapIp2, psPowerPlus2=psPowerPlus2, psSeverityMapAlarm65to96=psSeverityMapAlarm65to96, psDryContactorAlarm3=psDryContactorAlarm3, psINURemoteMode=psINURemoteMode, psDryContactor2Alarm9=psDryContactor2Alarm9, psAlarmSet91=psAlarmSet91, psPSUPsOK=psPSUPsOK, psPSUNotRespond=psPSUNotRespond, psACInputSpareInp3=psACInputSpareInp3, psCommandFirmwareRev=psCommandFirmwareRev)
mibBuilder.exportSymbols("GAMATRONIC-MIB", psUnitRTCHour=psUnitRTCHour, psStatusAlarm31=psStatusAlarm31, psPSUIndex=psPSUIndex, psStatusAlarm84=psStatusAlarm84, psStatusAlarm19=psStatusAlarm19, psAlarmSet41=psAlarmSet41, psStatusAlarm37=psStatusAlarm37, psScreenShot=psScreenShot, psSpareIde0=psSpareIde0, psPSUPSpareBit=psPSUPSpareBit, psSpare23=psSpare23, psPSUCurrentLimitDecreased=psPSUCurrentLimitDecreased, psBatteryChargeMode=psBatteryChargeMode, psConfInvertorVoltage=psConfInvertorVoltage, psTrap1006DCHigh=psTrap1006DCHigh, psStatusAlarm73=psStatusAlarm73)
