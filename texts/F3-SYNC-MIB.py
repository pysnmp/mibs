#
# PySNMP MIB module F3-SYNC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/adva/F3-SYNC-MIB
# Produced by pysmi-1.1.12 at Tue Sep 17 12:18:55 2024
# On host fv-az1019-803 platform Linux version 6.5.0-1025-azure by user runner
# Using Python version 3.10.14 (main, Jul 16 2024, 19:03:10) [GCC 11.4.0]
#
fsp150cm, = mibBuilder.importSymbols("ADVA-MIB", "fsp150cm")
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint")
AdminState, RestartType, F3DisplayString, OperationalState, SecondaryState = mibBuilder.importSymbols("CM-COMMON-MIB", "AdminState", "RestartType", "F3DisplayString", "OperationalState", "SecondaryState")
slotIndex, shelfIndex, neIndex = mibBuilder.importSymbols("CM-ENTITY-MIB", "slotIndex", "shelfIndex", "neIndex")
CmGenPgSwitchoverReason, = mibBuilder.importSymbols("CM-REDUNDANCY-MIB", "CmGenPgSwitchoverReason")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, MibIdentifier, ObjectIdentity, Unsigned32, Counter64, ModuleIdentity, NotificationType, Integer32, Counter32, iso, Bits, Gauge32, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "MibIdentifier", "ObjectIdentity", "Unsigned32", "Counter64", "ModuleIdentity", "NotificationType", "Integer32", "Counter32", "iso", "Bits", "Gauge32", "IpAddress")
StorageType, RowStatus, TruthValue, TextualConvention, DisplayString, DateAndTime, VariablePointer = mibBuilder.importSymbols("SNMPv2-TC", "StorageType", "RowStatus", "TruthValue", "TextualConvention", "DisplayString", "DateAndTime", "VariablePointer")
f3SyncMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12))
if mibBuilder.loadTexts: f3SyncMIB.setLastUpdated('202001150000Z')
if mibBuilder.loadTexts: f3SyncMIB.setOrganization('ADVA Optical Networking SE')
if mibBuilder.loadTexts: f3SyncMIB.setContactInfo('Web URL: http://adva.com/\n        E-mail:  support@adva.com\n        Postal:  ADVA Optical Networking SE\n             Campus Martinsried\n             Fraunhoferstrasse 9a\n             82152 Martinsried/Munich\n             Germany\n        Phone: +49 089 89 06 65 0\n        Fax:  +49 089 89 06 65 199 ')
if mibBuilder.loadTexts: f3SyncMIB.setDescription('\n\n        Notes from release 202001150000Z\n          (1) Added f3TimeClockPhaseAdjust\n\n        Notes from release 201909110000Z,\n          (1) New textual conventions: \n                ClkSignalType\n\t\n        Notes from release 201907080000Z,\n           (1) Added f3TimeClockAtoiCurrentOffset, f3TimeClockAtoiJumpSeconds, \n                     f3TimeClockAtoiTimeOfNextJump, f3TimeClockAtoiDisplayName\n\n        Notes from release 201901230000Z,\n          (1) Added table indices: \n                f3SyncProtGroupIndex in f3SyncProtMemberEntry, \n                f3TimeClockProtGroupIndex in f3TimeClockProtMemberEntry \n          \n        Notes from release 201807300000Z,\n          (1) New tables: \n                f3SyncProtGroupTable, f3SyncProtMemberTable, \n                f3TimeClockProtGroupTable, f3TimeClockProtMemberTable \n        \n    Notes from release 201901070000Z\n          (1) Added f3TimeClockTimeHoldoverTimeout\n          (2) Added f3TimeClockTimeInHoldover\n\n\n      \n        Notes from release 201802210000Z,\n          (1) Added table: f3PrcTable\n          (2) New textual conventions: \n                SsmMode and AcknowledgeType\n        \n        Notes from release 201304240000Z,\n          (1) New tables: f3TimeClockTable, f3TimeClockRefTable\n        \n        Notes from release 201003250000Z,\n          (1)f3SyncTable has new objects\n               f3SyncSelectionMode,\n               f3SyncWaitToRestoreTime, f3SyncOperationSyncRef,\n               f3SyncOperationType,\n          (2)f3SyncRefTable has new object\n               f3SyncRefOperationType\n        \n        Notes from release 201002120000Z,\n          (1)f3SyncTable has new objects f3SyncAlias, f3SyncDomain\n          (2)f3SyncRefTable has new objects\n               f3SyncRefAlias, f3SyncRefEffectiveQL\n        \n        Notes from release 200903190000Z,\n          (1)MIB version ready for release of FSP150CC devices GE101 and GE206.')
f3SyncObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12, 1))
f3SyncConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12, 2))
class NetworkClockType(TextualConvention, Integer32):
    description = 'Enumerations for Network Clock Type.\n        option1 - represents an SDH regional clock type,\n        option2 - represents a SONET regional clock type.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("option1", 1), ("option2", 2))

class ClockMode(TextualConvention, Integer32):
    description = 'Enumerations for Clock Mode.\n        freerun    - Free Run,\n        holdover   - Hold over,\n        tracking   - Tracking,\n        lossoflock - Loss of Lock,\n        locked     - Locked,\n        bypass     - the frequency entity is not functioning and is being bypassed. One of its frequency inputs is externally selected to be used directly as the frequency output.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("notAvailable", 0), ("freerun", 1), ("holdover", 2), ("tracking", 3), ("lossoflock", 4), ("locked", 5), ("bypass", 6))

class SSMQualityLevel(TextualConvention, Integer32):
    description = 'Enumerations for Sync Status Messages Quality Level'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34))
    namedValues = NamedValues(("not-applicable", 0), ("ql-dnu", 1), ("ql-eec1", 2), ("ql-eec2", 3), ("ql-inv", 4), ("ql-inv0", 5), ("ql-inv1", 6), ("ql-inv2", 7), ("ql-inv3", 8), ("ql-inv5", 9), ("ql-inv7", 10), ("ql-inv8", 11), ("ql-inv9", 12), ("ql-inv10", 13), ("ql-inv11", 14), ("ql-inv12", 15), ("ql-none", 16), ("ql-nsupp", 17), ("ql-prc", 18), ("ql-prov", 19), ("ql-prs", 20), ("ql-smc", 21), ("ql-ssu-a", 22), ("ql-ssu-b", 23), ("ql-st2", 24), ("ql-st3e", 25), ("ql-stu", 26), ("ql-tnc", 27), ("ql-unc", 28), ("ql-failed", 29), ("ql-inv6", 30), ("ql-inv13", 31), ("ql-inv14", 32), ("ql-dus", 33), ("ql-na", 34))

class SyncRefStatus(TextualConvention, Integer32):
    description = 'Enumerations for Sync Reference status,\n        ref-ok,\n        ref-failed.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("not-applicable", 0), ("ref-ok", 1), ("ref-failed", 2), ("ref-freq-ok", 3))

class SyncRefState(TextualConvention, Integer32):
    description = 'Enumerations for Sync Reference state,\n        active,\n        standby,\n        unavailable.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("not-applicable", 0), ("active", 1), ("standby", 2), ("unavailable", 3), ("lockedout", 4))

class SyncDomainType(TextualConvention, Integer32):
    description = 'Enumerations for Sync Domain type,\n        chassis,\n        linecard.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("chassis", 1), ("linecard", 2))

class SyncOperationType(TextualConvention, Integer32):
    description = 'Enumerations for Sync Operation Type,\n        none         - No action,\n        forcedswitch - can be used to override the currently selected reference, assuming\n        the the chosen reference is not locked out.  A forced switch\n        overrides a manual switch and subsequent forced switch preempts\n        a previous forced switch.  A forced switch request to a reference\n        which is in SF state or has a QL of DL-DNU when QL mode=Enabled\n        will result in the clock selector entering holdover.\n        manualswitch - can be used to switch to a reference, overriding the currently\n        selected reference assuming a forced switch is not active\n        on a reference other than chosen reference; it is not locked out,\n        not in SF state, has a QL not QL-DNU and has the highest\n        available QL. A manual switch request can only be used to\n        override the assigned reference priorities.\n        A manual switch request overrides a previous manual switch.\n        lockout      - sets the state of reference to locked-out, it is no longer\n        considered available by the selection process,\n        clearwtr     - causes any active Wait to Restore timer for the reference,\n        clearlockout - causes the reference to be considered available again by\n        the selection process,\n        clearswitch.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("none", 1), ("forcedswitch", 2), ("manualswitch", 3), ("lockout", 4), ("clearwtr", 5), ("clearlockout", 6), ("clearswitch", 7))

class SyncSelectionMode(TextualConvention, Integer32):
    description = 'Enumerations for Sync Selection Mode,\n        ql-mode,\n        priority-mode.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("ql-mode", 1), ("priority-mode", 2))

class TimeScale(TextualConvention, Integer32):
    description = 'Enumerations for Time Scale,\n        ptp,\n        arb.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("ptp", 1), ("arb", 2))

class TODSource(TextualConvention, Integer32):
    description = 'Enumerations for ARB ToD Source,\n        na,\n    system-tod,\n        manual.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("na", 1), ("system-tod", 2), ("manual", 3))

class SquelchControl(TextualConvention, Integer32):
    description = 'Describes the Squelch Control of the PTP ports.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("never", 1), ("holdover", 2), ("lock", 3), ("squelch-ql", 4))

class TimeClockMode(TextualConvention, Integer32):
    description = 'Enumerations for Time Clock Mode.\n        freerun    - Free Run,\n        warmup     - Warm Up,\n        tracking   - Tracking,\n        transition - Transition,\n        holdover   - Holdover,\n        locked     - Locked.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("freerun", 1), ("warmup", 2), ("tracking", 3), ("transition", 4), ("holdover", 5), ("locked", 6))

class TimeTraceAbilityStatus(TextualConvention, Integer32):
    description = 'Describes the time trace ability status.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("notTraceAble", 1), ("timeLocked", 2), ("timeFreqLock", 3), ("timeHoldover", 4))

class HoldoverAccuracy(TextualConvention, Integer32):
    description = ''
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("time-500ns", 1), ("time-1000ns", 2), ("time-1500ns", 3), ("time-5000ns", 4), ("time-10000ns", 5))

class TimeHoldoverPerformance(TextualConvention, Integer32):
    description = ''
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("time-500ns", 1), ("time-1000ns", 2), ("time-1500ns", 3), ("time-5000ns", 4), ("time-10000ns", 5), ("time-0ns", 6), ("time-100ns", 7), ("na", 8))

class TimeSource(TextualConvention, Integer32):
    description = 'Enumerations for Time Source,\n        atomic, gps, ptp,\n        internal, other.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("atomic", 1), ("gps", 2), ("ptp", 3), ("internal", 4), ("other", 5))

class PLLBw(TextualConvention, Integer32):
    description = 'Enumerations for Clock PLL Bandwidth,\n        eec,\n        ssu.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("eec", 1), ("ssu", 2))

class SsmMode(TextualConvention, Integer32):
    description = 'Enumerations for SSM Mode,\n        enabled or disabled.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("enabled", 1), ("disbled", 2))

class AcknowledgeType(TextualConvention, Integer32):
    description = 'Enumerations for Acknowledgement Type.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("no-action", 1), ("accuracy-adjust", 2))

class ClkSignalType(TextualConvention, Integer32):
    description = 'Enumerations for Clk Signal Type,\n        10mhz,\n        2048khz.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("not-applicable", 0), ("freq-10mhz", 1), ("freq-2048khz", 2))

f3SyncTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12, 1, 1), )
if mibBuilder.loadTexts: f3SyncTable.setStatus('current')
if mibBuilder.loadTexts: f3SyncTable.setDescription('A list of entries corresponding to the Sync entities.')
f3SyncEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12, 1, 1, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "F3-SYNC-MIB", "f3SyncIndex"))
if mibBuilder.loadTexts: f3SyncEntry.setStatus('current')
if mibBuilder.loadTexts: f3SyncEntry.setDescription('An entry containing information applicable to a particular\n        Sync Entity.')
f3SyncIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncIndex.setStatus('current')
if mibBuilder.loadTexts: f3SyncIndex.setDescription('Unique index value associated with the Synchronization Entity.')
f3SyncAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12, 1, 1, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SyncAdminState.setStatus('current')
if mibBuilder.loadTexts: f3SyncAdminState.setDescription('This object represents the Administrative State of the Sync\n        Entity.')
f3SyncOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12, 1, 1, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncOperationalState.setStatus('current')
if mibBuilder.loadTexts: f3SyncOperationalState.setDescription('This object represents the Operational State of the Sync\n        Entity.')
f3SyncSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12, 1, 1, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncSecondaryState.setStatus('current')
if mibBuilder.loadTexts: f3SyncSecondaryState.setDescription('This object represents the Secondary State of the Sync\n        Entity.')
f3SyncNetworkClockType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12, 1, 1, 1, 5), NetworkClockType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SyncNetworkClockType.setStatus('current')
if mibBuilder.loadTexts: f3SyncNetworkClockType.setDescription('This object represents the regional clock type for\n        the system.  This object determines which QL codes are\n        supported.')
f3SyncSelectedReference = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12, 1, 1, 1, 6), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncSelectedReference.setStatus('current')
if mibBuilder.loadTexts: f3SyncSelectedReference.setDescription('This object provides the source of the currently selected\n        Sync reference. This would be the OID of the actual entity (bits port,\n        traffic port etc.).\n        An OID value of {0 0} represents internal clock.')
f3SyncClockMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12, 1, 1, 1, 7), ClockMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncClockMode.setStatus('current')
if mibBuilder.loadTexts: f3SyncClockMode.setDescription('This object provides the system clock mode.')
f3SyncQL = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12, 1, 1, 1, 8), SSMQualityLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncQL.setStatus('current')
if mibBuilder.loadTexts: f3SyncQL.setDescription("This object provides the QL of the system reference.\n        This is the value for each external reference's Transmit \n        QL attribute unless it should be transmitting QL-DNU.")
f3SyncAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12, 1, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3SyncAlias.setStatus('current')
if mibBuilder.loadTexts: f3SyncAlias.setDescription('This object allows SNMP management entities to provide an\n        alias to the Sync entity.')
f3SyncDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12, 1, 1, 1, 10), SyncDomainType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SyncDomain.setStatus('current')
if mibBuilder.loadTexts: f3SyncDomain.setDescription("This object represents the Sync entity's domain type. A Sync entity can be in\n        chassis (system) domain (applicable for HUB shelf and Aggregation shelf)\n        or  line card domain (applicable for HUB shelf, Aggregation shelf as well as\n        NIDs).")
f3SyncSelectionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12, 1, 1, 1, 11), SyncSelectionMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SyncSelectionMode.setStatus('current')
if mibBuilder.loadTexts: f3SyncSelectionMode.setDescription("This object represents the Sync entity's selection mode.\n        If this mode is configured as ql-mode, the selection of\n        which reference should be used shall be based upon the\n        reference's Quality Level.  The highest received\n        Quality Level shall be the selected reference.  The priority\n        shall only be used to distinguish between references with the\n        same received QL.  When multiple references have the same QL\n        and same priority, the behavior of selection process within\n        the group is non-revertive.\n        If this mode is configued as priority-mode, the selection\n        of which reference should be used shall be based upon\n        the reference's priority (i.e. QL is disabled).  When\n        multiple references have the same priority, the behavior of\n        selection process within the group is non-revertive.")
f3SyncWaitToRestoreTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SyncWaitToRestoreTime.setStatus('current')
if mibBuilder.loadTexts: f3SyncWaitToRestoreTime.setDescription("This object allows configuration of the Sync entity's wait-to-restore\n        time (in minutes).  A value of 0 disables WTR timers for all references.")
f3SyncOperationSyncRef = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12, 1, 1, 1, 13), VariablePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SyncOperationSyncRef.setStatus('current')
if mibBuilder.loadTexts: f3SyncOperationSyncRef.setDescription('This object allows configuration of the Object Identifier of the\n        Sync Reference Entity on which the f3SyncOperationType is performed.\n        A value of 0.0 denotes no sync reference is chosen for operation.')
f3SyncOperationType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12, 1, 1, 1, 14), SyncOperationType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SyncOperationType.setStatus('current')
if mibBuilder.loadTexts: f3SyncOperationType.setDescription('This object allows to perform the specified operation on the Sync Reference\n        specified by f3SyncOperationSyncRef.')
f3SyncPLLBw = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12, 1, 1, 1, 15), PLLBw()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SyncPLLBw.setStatus('current')
if mibBuilder.loadTexts: f3SyncPLLBw.setDescription("This object allows configuration of the Sync entity's Clock PLL Bandwidth.")
f3SyncRefTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12, 1, 2), )
if mibBuilder.loadTexts: f3SyncRefTable.setStatus('current')
if mibBuilder.loadTexts: f3SyncRefTable.setDescription('A list of entries corresponding to the Sync Reference entities.')
f3SyncRefEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12, 1, 2, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "F3-SYNC-MIB", "f3SyncIndex"), (0, "F3-SYNC-MIB", "f3SyncRefIndex"))
if mibBuilder.loadTexts: f3SyncRefEntry.setStatus('current')
if mibBuilder.loadTexts: f3SyncRefEntry.setDescription('An entry containing information applicable to a particular\n        Sync Reference Entity.')
f3SyncRefIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncRefIndex.setStatus('current')
if mibBuilder.loadTexts: f3SyncRefIndex.setDescription('Unique index value associated with the Sync Reference Entity.')
f3SyncRefReference = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12, 1, 2, 1, 2), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3SyncRefReference.setStatus('current')
if mibBuilder.loadTexts: f3SyncRefReference.setDescription('This object represents the external sync reference to be\n        used as system clock reference source.')
f3SyncRefPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3SyncRefPriority.setStatus('current')
if mibBuilder.loadTexts: f3SyncRefPriority.setDescription('This object represents the priority of the external sync reference\n        to be used as system clock reference source.  This value is\n        not mandatory when a single clock reference source is supported.\n        Lower priority value indicates higher priority.')
f3SyncRefStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12, 1, 2, 1, 4), SyncRefStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncRefStatus.setStatus('current')
if mibBuilder.loadTexts: f3SyncRefStatus.setDescription('This object provides the sync reference status.')
f3SyncRefState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12, 1, 2, 1, 5), SyncRefState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncRefState.setStatus('current')
if mibBuilder.loadTexts: f3SyncRefState.setDescription('This object provides the sync reference state.')
f3SyncRefReceivedQL = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12, 1, 2, 1, 6), SSMQualityLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncRefReceivedQL.setStatus('current')
if mibBuilder.loadTexts: f3SyncRefReceivedQL.setDescription('This object provides the sync reference received QL.')
f3SyncRefStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12, 1, 2, 1, 7), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3SyncRefStorageType.setStatus('current')
if mibBuilder.loadTexts: f3SyncRefStorageType.setDescription('The type of storage configured for this entry.')
f3SyncRefRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12, 1, 2, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3SyncRefRowStatus.setStatus('current')
if mibBuilder.loadTexts: f3SyncRefRowStatus.setDescription('The status of this row.  An entry MUST NOT exist in the\n        active state unless all objects in the entry have an\n        appropriate value, as described\n        in the description clause for each writable object.\n        \n        The values of f3SyncRefRowStatus supported are\n        createAndGo(4) and destroy(6).  All mandatory attributes\n        must be specified in a single SNMP SET request with\n        f3SyncRefRowStatus value as createAndGo(4).\n        Upon successful row creation, this object has a\n        value of active(1).\n        \n        The f3SyncRefRowStatus object may be modified if\n        the associated instance of this object is equal to active(1).')
f3SyncRefAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12, 1, 2, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3SyncRefAlias.setStatus('current')
if mibBuilder.loadTexts: f3SyncRefAlias.setDescription('This object allows SNMP management entities to provide an\n        alias to the Sync Reference entity.')
f3SyncRefEffectiveQL = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12, 1, 2, 1, 10), SSMQualityLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncRefEffectiveQL.setStatus('current')
if mibBuilder.loadTexts: f3SyncRefEffectiveQL.setDescription('This object provides the sync reference effective QL.')
f3SyncRefOperationType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12, 1, 2, 1, 11), SyncOperationType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncRefOperationType.setStatus('current')
if mibBuilder.loadTexts: f3SyncRefOperationType.setDescription('This object provides information on the current/active operation\n        on this sync reference.')
f3TimeClockTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12, 1, 3), )
if mibBuilder.loadTexts: f3TimeClockTable.setStatus('current')
if mibBuilder.loadTexts: f3TimeClockTable.setDescription('A list of entries corresponding to the Time Clock entities.')
f3TimeClockEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12, 1, 3, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "F3-SYNC-MIB", "f3TimeClockIndex"))
if mibBuilder.loadTexts: f3TimeClockEntry.setStatus('current')
if mibBuilder.loadTexts: f3TimeClockEntry.setDescription('An entry containing information applicable to a particular\n        Time Clock Entity.')
f3TimeClockIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12, 1, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: f3TimeClockIndex.setStatus('current')
if mibBuilder.loadTexts: f3TimeClockIndex.setDescription('Unique index value associated with the Time Clock Entity.')
f3TimeClockAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12, 1, 3, 1, 2), F3DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3TimeClockAlias.setStatus('current')
if mibBuilder.loadTexts: f3TimeClockAlias.setDescription('This object allows SNMP management entities to provide an\n        alias to the Time Clock entity.')
f3TimeClockAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12, 1, 3, 1, 3), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3TimeClockAdminState.setStatus('current')
if mibBuilder.loadTexts: f3TimeClockAdminState.setDescription('This object represents the Administrative State of the Time Clock\n        Entity.')
f3TimeClockOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12, 1, 3, 1, 4), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TimeClockOperationalState.setStatus('current')
if mibBuilder.loadTexts: f3TimeClockOperationalState.setDescription('This object represents the Operational State of the Time Clock\n        Entity.')
f3TimeClockSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12, 1, 3, 1, 5), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TimeClockSecondaryState.setStatus('current')
if mibBuilder.loadTexts: f3TimeClockSecondaryState.setDescription('This object represents the Secondary State of the Time Clock\n        Entity.')
f3TimeClockSelectedReference = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12, 1, 3, 1, 6), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TimeClockSelectedReference.setStatus('current')
if mibBuilder.loadTexts: f3TimeClockSelectedReference.setDescription('This object provides the source of the currently selected\n        Time Clock reference. This would be the OID of the actual entity (GPS port, PPS port etc.).\n        An OID value of {0 0} represents internal clock.')
f3TimeClockClockMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12, 1, 3, 1, 7), TimeClockMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TimeClockClockMode.setStatus('current')
if mibBuilder.loadTexts: f3TimeClockClockMode.setDescription('This object provides the Time Clock mode.')
f3TimeClockClockClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12, 1, 3, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TimeClockClockClass.setStatus('deprecated')
if mibBuilder.loadTexts: f3TimeClockClockClass.setDescription('This object provides the Time Clock Clock Class')
f3TimeClockSelectionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12, 1, 3, 1, 9), SyncSelectionMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3TimeClockSelectionMode.setStatus('current')
if mibBuilder.loadTexts: f3TimeClockSelectionMode.setDescription("!! Currently Only Priority Mode is supported !!\n        This object represents the Time Clock entity's selection mode.\n        If this mode is configured as ql-mode, the selection of\n        which reference should be used shall be based upon the\n        reference's Quality Level.  The highest received\n        Quality Level shall be the selected reference.  The priority\n        shall only be used to distinguish between references with the\n        same received QL.  When multiple references have the same QL\n        and same priority, the behavior of selection process within\n        the group is non-revertive.\n        If this mode is configued as priority-mode, the selection\n        of which reference should be used shall be based upon\n        the reference's priority (i.e. QL is disabled).  When\n        multiple references have the same priority, the behavior of\n        selection process within the group is non-revertive.")
f3TimeClockWaitToRestoreTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12, 1, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3TimeClockWaitToRestoreTime.setStatus('current')
if mibBuilder.loadTexts: f3TimeClockWaitToRestoreTime.setDescription("This object allows configuration of the Time Clock entity's wait-to-restore\n        time (in minutes).  A value of 0 disables WTR timers for all references.")
f3TimeClockOperationTimeClockRef = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12, 1, 3, 1, 11), VariablePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3TimeClockOperationTimeClockRef.setStatus('current')
if mibBuilder.loadTexts: f3TimeClockOperationTimeClockRef.setDescription('This object allows configuration of the Object Identifier of the\n        TimeClock Reference Entity on which the f3TimeClockOperationType is performed.\n        A value of 0.0 denotes no Time Clock reference is chosen for operation.')
f3TimeClockOperationType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12, 1, 3, 1, 12), SyncOperationType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3TimeClockOperationType.setStatus('current')
if mibBuilder.loadTexts: f3TimeClockOperationType.setDescription('This object allows to perform the specified operation on the Time Clock Reference\n        specified by f3TimeClockOperationTimeClockRef.')
f3TimeClockLeap59 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12, 1, 3, 1, 13), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TimeClockLeap59.setStatus('current')
if mibBuilder.loadTexts: f3TimeClockLeap59.setDescription('True if last minute of current UTC day contains 59 seconds, else false')
f3TimeClockLeap61 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12, 1, 3, 1, 14), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TimeClockLeap61.setStatus('current')
if mibBuilder.loadTexts: f3TimeClockLeap61.setDescription('True if last minute of current UTC day contains 61 seconds, else false')
f3TimeClockTimeTraceAbilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12, 1, 3, 1, 15), TimeTraceAbilityStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TimeClockTimeTraceAbilityStatus.setStatus('current')
if mibBuilder.loadTexts: f3TimeClockTimeTraceAbilityStatus.setDescription('This object describe the trace ability status.')
f3TimeClockExpectedQL = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12, 1, 3, 1, 16), SSMQualityLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3TimeClockExpectedQL.setStatus('current')
if mibBuilder.loadTexts: f3TimeClockExpectedQL.setDescription('This object describe the expected quality level.')
f3TimeClockCurrentQL = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12, 1, 3, 1, 17), SSMQualityLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TimeClockCurrentQL.setStatus('current')
if mibBuilder.loadTexts: f3TimeClockCurrentQL.setDescription('This object describe the current quality level.')
f3TimeClockSyncRefCandidate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12, 1, 3, 1, 18), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3TimeClockSyncRefCandidate.setStatus('current')
if mibBuilder.loadTexts: f3TimeClockSyncRefCandidate.setDescription('This object describe whether it is sync reference candiddate.')
f3TimeClockTimeHoldoverPerformance = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12, 1, 3, 1, 19), TimeHoldoverPerformance()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3TimeClockTimeHoldoverPerformance.setStatus('current')
if mibBuilder.loadTexts: f3TimeClockTimeHoldoverPerformance.setDescription('This object describe the Holdover performance.')
f3TimeClockUtcOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12, 1, 3, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TimeClockUtcOffset.setStatus('current')
if mibBuilder.loadTexts: f3TimeClockUtcOffset.setDescription('This object describe the UTC offset.')
f3TimeClockCurrentTimeOfDay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12, 1, 3, 1, 21), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TimeClockCurrentTimeOfDay.setStatus('current')
if mibBuilder.loadTexts: f3TimeClockCurrentTimeOfDay.setDescription('This object allows specification of the Time Clock Current\n        Time of Day.')
f3TimeClockFrequencyReference = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12, 1, 3, 1, 22), VariablePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3TimeClockFrequencyReference.setStatus('current')
if mibBuilder.loadTexts: f3TimeClockFrequencyReference.setDescription('This object provides the source of the currently selected frequency source for the Time Clock.\n        This would be the OID of the actual entity (GNSS Receiver port, Input Frquency Port, Sync object).\n        An OID value of {0.0} represents a state where the Time Clock does not use a dedicated frequency input.')
f3TimeClockFrequencyClockMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12, 1, 3, 1, 23), ClockMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TimeClockFrequencyClockMode.setStatus('current')
if mibBuilder.loadTexts: f3TimeClockFrequencyClockMode.setDescription("This object provides the Frequency Clock mode determined according to the used f3TimeClockFrequencyReference.\n        In Case the f3TimeClockFrequencyReference is not selected (0.0), a 'notAvailable' value shall be used here")
f3TimeClockTimeScale = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12, 1, 3, 1, 24), TimeScale()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3TimeClockTimeScale.setStatus('current')
if mibBuilder.loadTexts: f3TimeClockTimeScale.setDescription("This object allows configuration of the Sync entity's Time Scale. Only PTP or ARB values are allowed.\n    In PTP mode, phase is recovered from time reference source. In ARB mode phase is taken from Linux time and locked on chosen reference.")
f3TimeClockTODSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12, 1, 3, 1, 25), TODSource()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TimeClockTODSource.setStatus('current')
if mibBuilder.loadTexts: f3TimeClockTODSource.setDescription('This object provides the ARB TOD Source. The value decided according to the Time Scale parameter.\n    Can be NA or System TOD.')
f3TimeClockEPRTCModeEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12, 1, 3, 1, 26), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3TimeClockEPRTCModeEnabled.setStatus('current')
if mibBuilder.loadTexts: f3TimeClockEPRTCModeEnabled.setDescription('This object describe whether it is EPRTC Mode Enabled.\n    When enabled, the time clock combines the stable frequency input, such as a Cesium Clock, to extend the holdover capability to meet the e-PRTC holdover standards. \n    Before configuring this setting, ensure that you activate the e-PRTC license.\n    Note: This setting is applicable for Rb/HQ++ oscillators only.')
f3TimeClockTimeHoldoverTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12, 1, 3, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3TimeClockTimeHoldoverTimeout.setStatus('current')
if mibBuilder.loadTexts: f3TimeClockTimeHoldoverTimeout.setDescription('Configurable Holdover time\n                    The time (0..3000000 seconds) that the OCXO is expected to maintain the\n                    required accuracy and maintain Holdover-within-limits. Default is 0.')
f3TimeClockTimeInHoldover = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12, 1, 3, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TimeClockTimeInHoldover.setStatus('current')
if mibBuilder.loadTexts: f3TimeClockTimeInHoldover.setDescription('Time (seconds) in Holdover.')
f3TimeClockAtoiCurrentOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12, 1, 3, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TimeClockAtoiCurrentOffset.setReference('IEC61588 16.3.3.4')
if mibBuilder.loadTexts: f3TimeClockAtoiCurrentOffset.setStatus('current')
if mibBuilder.loadTexts: f3TimeClockAtoiCurrentOffset.setDescription('The value of currentOffset (offset of the alternate time, in seconds, from\n            the time of this node). The alternate time is the sum of this value and the time of\n            the node, which is TAI if the PTP time scale is used.')
f3TimeClockAtoiJumpSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12, 1, 3, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TimeClockAtoiJumpSeconds.setReference('IEC61588 16.3.3.5')
if mibBuilder.loadTexts: f3TimeClockAtoiJumpSeconds.setStatus('current')
if mibBuilder.loadTexts: f3TimeClockAtoiJumpSeconds.setDescription('The value of jumpSeconds (size of the next discontinuity, in seconds, of the\n            alternate time). A value of zero indicates that no discontinuity is expected. A\n            positive value indicates that the discontinuity\n            will cause the currentOffset of the alternate time to increase.')
f3TimeClockAtoiTimeOfNextJump = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12, 1, 3, 1, 31), Counter64()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TimeClockAtoiTimeOfNextJump.setReference('IEC61588 16.3.3.6')
if mibBuilder.loadTexts: f3TimeClockAtoiTimeOfNextJump.setStatus('current')
if mibBuilder.loadTexts: f3TimeClockAtoiTimeOfNextJump.setDescription('The value of timeOfNextJump (value of the seconds portion of the time of the\n            transmitting node at the time that the next discontinuity will occur). The\n            discontinuity occurs at the start of the second indicated\n            by the value of timeOfNextJump.')
f3TimeClockAtoiDisplayName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12, 1, 3, 1, 32), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TimeClockAtoiDisplayName.setReference('IEC61588 16.3.3.6')
if mibBuilder.loadTexts: f3TimeClockAtoiDisplayName.setStatus('current')
if mibBuilder.loadTexts: f3TimeClockAtoiDisplayName.setDescription('The value of displayName (text name of the alternate timescale in ASCII-8).\n            It represent the time zone, e.g. CET;\n            a leading character of * indicates that daylight saving time is in effect.')
f3TimeClockPhaseAdjust = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12, 1, 3, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 250000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3TimeClockPhaseAdjust.setStatus('current')
if mibBuilder.loadTexts: f3TimeClockPhaseAdjust.setDescription('Configurable Phase Adjust (0..250000 nSec) .')
f3TimeClockRefTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12, 1, 4), )
if mibBuilder.loadTexts: f3TimeClockRefTable.setStatus('current')
if mibBuilder.loadTexts: f3TimeClockRefTable.setDescription('A list of entries corresponding to the Time Clock Reference entities.')
f3TimeClockRefEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12, 1, 4, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "F3-SYNC-MIB", "f3TimeClockIndex"), (0, "F3-SYNC-MIB", "f3TimeClockRefIndex"))
if mibBuilder.loadTexts: f3TimeClockRefEntry.setStatus('current')
if mibBuilder.loadTexts: f3TimeClockRefEntry.setDescription('An entry containing information applicable to a particular\n        Time Clock Reference Entity.')
f3TimeClockRefIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12, 1, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: f3TimeClockRefIndex.setStatus('current')
if mibBuilder.loadTexts: f3TimeClockRefIndex.setDescription('Unique index value associated with the Time Clock Reference Entity.')
f3TimeClockRefAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12, 1, 4, 1, 2), F3DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3TimeClockRefAlias.setStatus('current')
if mibBuilder.loadTexts: f3TimeClockRefAlias.setDescription('This object allows SNMP management entities to provide an\n        alias to the Time Clock Reference entity.')
f3TimeClockRefReference = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12, 1, 4, 1, 3), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3TimeClockRefReference.setStatus('current')
if mibBuilder.loadTexts: f3TimeClockRefReference.setDescription('This object represents the external reference to be\n        used as system clock reference source.')
f3TimeClockRefPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3TimeClockRefPriority.setStatus('current')
if mibBuilder.loadTexts: f3TimeClockRefPriority.setDescription('This object represents the priority of the external reference\n        to be used as Time clock reference source.  This value is\n        not mandatory when a single clock reference source is supported.\n        Lower priority value indicates higher priority.')
f3TimeClockRefStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12, 1, 4, 1, 5), SyncRefStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TimeClockRefStatus.setStatus('current')
if mibBuilder.loadTexts: f3TimeClockRefStatus.setDescription('This object provides the Time Clock reference status.')
f3TimeClockRefState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12, 1, 4, 1, 6), SyncRefState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TimeClockRefState.setStatus('current')
if mibBuilder.loadTexts: f3TimeClockRefState.setDescription('This object provides the Time Clock reference state.')
f3TimeClockRefOperationType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12, 1, 4, 1, 7), SyncOperationType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TimeClockRefOperationType.setStatus('current')
if mibBuilder.loadTexts: f3TimeClockRefOperationType.setDescription('This object provides information on the current/active operation\n        on this Time Clock reference.')
f3TimeClockRefStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12, 1, 4, 1, 8), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3TimeClockRefStorageType.setStatus('current')
if mibBuilder.loadTexts: f3TimeClockRefStorageType.setDescription('The type of storage configured for this entry.')
f3TimeClockRefRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12, 1, 4, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3TimeClockRefRowStatus.setStatus('current')
if mibBuilder.loadTexts: f3TimeClockRefRowStatus.setDescription('The status of this row.  An entry MUST NOT exist in the\n        active state unless all objects in the entry have an\n        appropriate value, as described\n        in the description clause for each writable object.\n        \n        The values of f3TimeClockRefRowStatus supported are\n        createAndGo(4) and destroy(6).  All mandatory attributes\n        must be specified in a single SNMP SET request with\n        f3TimeClockRefRowStatus value as createAndGo(4).\n        Upon successful row creation, this object has a\n        value of active(1).\n        \n        The f3TimeClockRefRowStatus object may be modified if\n        the associated instance of this object is equal to active(1).')
f3PrcTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12, 1, 5), )
if mibBuilder.loadTexts: f3PrcTable.setStatus('current')
if mibBuilder.loadTexts: f3PrcTable.setDescription('A list of entries corresponding to the Primary Reference Clock (PRC) entities.')
f3PrcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12, 1, 5, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "F3-SYNC-MIB", "f3PrcIndex"))
if mibBuilder.loadTexts: f3PrcEntry.setStatus('current')
if mibBuilder.loadTexts: f3PrcEntry.setDescription('An entry containing information applicable to a particular\n        Primary Reference Clock Entity.')
f3PrcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647)))
if mibBuilder.loadTexts: f3PrcIndex.setStatus('current')
if mibBuilder.loadTexts: f3PrcIndex.setDescription('Unique index value associated with the Primary Reference Clock Entity.')
f3PrcAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12, 1, 5, 1, 2), F3DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PrcAlias.setStatus('current')
if mibBuilder.loadTexts: f3PrcAlias.setDescription('This object allows SNMP management entities to provide an\n        alias to the Primary Reference Clock entity.')
f3PrcAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12, 1, 5, 1, 3), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PrcAdminState.setStatus('current')
if mibBuilder.loadTexts: f3PrcAdminState.setDescription('This object represents the Administrative State of the Primary Reference Clock\n        Entity.')
f3PrcOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12, 1, 5, 1, 4), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PrcOperationalState.setStatus('current')
if mibBuilder.loadTexts: f3PrcOperationalState.setDescription('This object represents the Operational State of the Primary Reference Clock\n        Entity.')
f3PrcSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12, 1, 5, 1, 5), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PrcSecondaryState.setStatus('current')
if mibBuilder.loadTexts: f3PrcSecondaryState.setDescription('This object represents the Secondary State of the Primary Reference Clock\n        Entity.')
f3PrcSsmMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12, 1, 5, 1, 6), SsmMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PrcSsmMode.setStatus('current')
if mibBuilder.loadTexts: f3PrcSsmMode.setDescription('This object provides the PRC SSM mode. It determines whether or not the SSM\n        is given to the BITS-OUT Ports.')
f3PrcClockMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12, 1, 5, 1, 7), TimeClockMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PrcClockMode.setStatus('current')
if mibBuilder.loadTexts: f3PrcClockMode.setDescription('This object provides the PRC Clock Mode.')
f3PrcAccuracyAdjustement = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12, 1, 5, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1000000, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PrcAccuracyAdjustement.setStatus('current')
if mibBuilder.loadTexts: f3PrcAccuracyAdjustement.setDescription('This object allows to adjust an internal frequency to optimize\n        the PRC accuracy. This is typically done only once after the Prc has been\n        tested. The value is a relative frequency with unit value of 10e-15.')
f3PrcCurrentQL = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12, 1, 5, 1, 9), SSMQualityLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PrcCurrentQL.setStatus('current')
if mibBuilder.loadTexts: f3PrcCurrentQL.setDescription('This object describe the current quality level.')
f3PrcAcknowledgeAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12, 1, 5, 1, 10), AcknowledgeType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PrcAcknowledgeAction.setStatus('current')
if mibBuilder.loadTexts: f3PrcAcknowledgeAction.setDescription('Allows to acknowledge the alarm that raises when \n        f3AccuracyAdjustement value is changed.')
f3PrcRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12, 1, 5, 1, 11), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PrcRestartAction.setStatus('current')
if mibBuilder.loadTexts: f3PrcRestartAction.setDescription('Allows to perform specified warm restart action on the PRC Clock.\n        Cold restart is refused by the equipment')
f3SyncProtGroupTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12, 1, 6), )
if mibBuilder.loadTexts: f3SyncProtGroupTable.setStatus('current')
if mibBuilder.loadTexts: f3SyncProtGroupTable.setDescription('A list of entries corresponding to the Sync Protection Groups.\n             ')
f3SyncProtGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12, 1, 6, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-SYNC-MIB", "f3SyncProtGroupIndex"))
if mibBuilder.loadTexts: f3SyncProtGroupEntry.setStatus('current')
if mibBuilder.loadTexts: f3SyncProtGroupEntry.setDescription('An entry containing information applicable to a Sync\n             Protection Group.')
f3SyncProtGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12, 1, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncProtGroupIndex.setStatus('current')
if mibBuilder.loadTexts: f3SyncProtGroupIndex.setDescription('Unique index value associated with the Sync Protection Group\n          entity.')
f3SyncProtGroupAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12, 1, 6, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SyncProtGroupAdminState.setStatus('current')
if mibBuilder.loadTexts: f3SyncProtGroupAdminState.setDescription('This object represents the Administrative State of the Sync\n          Protection Group.')
f3SyncProtGroupActiveMember = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12, 1, 6, 1, 3), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncProtGroupActiveMember.setStatus('current')
if mibBuilder.loadTexts: f3SyncProtGroupActiveMember.setDescription('The corresponding OID of the Active Member in the Sync Protection Group.')
f3SyncProtGroupLastSwitchOverTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12, 1, 6, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncProtGroupLastSwitchOverTime.setStatus('current')
if mibBuilder.loadTexts: f3SyncProtGroupLastSwitchOverTime.setDescription('The value of sysUpTime when last switch over occurred.')
f3SyncProtGroupLastSwitchOverReason = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12, 1, 6, 1, 5), CmGenPgSwitchoverReason()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SyncProtGroupLastSwitchOverReason.setStatus('current')
if mibBuilder.loadTexts: f3SyncProtGroupLastSwitchOverReason.setDescription('The reason for last switch over in the Sync Protection Group.')
f3SyncProtGroupStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12, 1, 6, 1, 6), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3SyncProtGroupStorageType.setStatus('current')
if mibBuilder.loadTexts: f3SyncProtGroupStorageType.setDescription('The type of storage configured for this entry.')
f3SyncProtGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12, 1, 6, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3SyncProtGroupRowStatus.setStatus('current')
if mibBuilder.loadTexts: f3SyncProtGroupRowStatus.setDescription('The status of this row.  An entry MUST NOT exist in the \n            active state unless all objects in the entry have an \n            appropriate value, as described\n            in the description clause for each writable object.\n\n            The values of f3SyncProtGroupRowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            f3SyncProtGroupRowStatus value as createAndGo(4).\n            Upon successful row creation, this object has a\n            value of active(1).\n\n            The f3SyncProtGroupRowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
f3SyncProtMemberTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12, 1, 7), )
if mibBuilder.loadTexts: f3SyncProtMemberTable.setStatus('current')
if mibBuilder.loadTexts: f3SyncProtMemberTable.setDescription('A list of entries for the Sync Protection Group Members.')
f3SyncProtMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12, 1, 7, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-SYNC-MIB", "f3SyncProtGroupIndex"), (0, "F3-SYNC-MIB", "f3SyncProtMemberObject"))
if mibBuilder.loadTexts: f3SyncProtMemberEntry.setStatus('current')
if mibBuilder.loadTexts: f3SyncProtMemberEntry.setDescription('A conceptual row in the f3SyncProtMemberTable.')
f3SyncProtMemberObject = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12, 1, 7, 1, 1), VariablePointer())
if mibBuilder.loadTexts: f3SyncProtMemberObject.setStatus('current')
if mibBuilder.loadTexts: f3SyncProtMemberObject.setDescription('This object points to the Protection Group Member.')
f3SyncProtMemberStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12, 1, 7, 1, 2), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3SyncProtMemberStorageType.setStatus('current')
if mibBuilder.loadTexts: f3SyncProtMemberStorageType.setDescription('The type of storage configured for this entry.')
f3SyncProtMemberRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12, 1, 7, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3SyncProtMemberRowStatus.setStatus('current')
if mibBuilder.loadTexts: f3SyncProtMemberRowStatus.setDescription('The status of this row.\n            An entry MUST NOT exist in the active state unless all\n            objects in the entry have an appropriate value, as described\n            in the description clause for each writable object.\n    \n            The values of f3SyncProtMemberRowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            f3SyncProtMemberRowStatus value as createAndGo(4).\n            Upon successful row creation, this object has a\n            value of active(1).\n    \n            The f3SyncProtMemberRowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
f3TimeClockProtGroupTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12, 1, 8), )
if mibBuilder.loadTexts: f3TimeClockProtGroupTable.setStatus('current')
if mibBuilder.loadTexts: f3TimeClockProtGroupTable.setDescription('A list of entries corresponding to the Time Clock Protection Groups.\n             ')
f3TimeClockProtGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12, 1, 8, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-SYNC-MIB", "f3TimeClockProtGroupIndex"))
if mibBuilder.loadTexts: f3TimeClockProtGroupEntry.setStatus('current')
if mibBuilder.loadTexts: f3TimeClockProtGroupEntry.setDescription('An entry containing information applicable to a Time Clock\n             Protection Group.')
f3TimeClockProtGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12, 1, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TimeClockProtGroupIndex.setStatus('current')
if mibBuilder.loadTexts: f3TimeClockProtGroupIndex.setDescription('Unique index value associated with the Time Clock Protection Group\n          entity.')
f3TimeClockProtGroupAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12, 1, 8, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3TimeClockProtGroupAdminState.setStatus('current')
if mibBuilder.loadTexts: f3TimeClockProtGroupAdminState.setDescription('This object represents the Administrative State of the\n          Time Clock Protection Group.')
f3TimeClockProtGroupActiveMember = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12, 1, 8, 1, 3), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TimeClockProtGroupActiveMember.setStatus('current')
if mibBuilder.loadTexts: f3TimeClockProtGroupActiveMember.setDescription('The corresponding OID of the Active Member in the Time Clock Protection Group.')
f3TimeClockProtGroupLastSwitchOverTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12, 1, 8, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TimeClockProtGroupLastSwitchOverTime.setStatus('current')
if mibBuilder.loadTexts: f3TimeClockProtGroupLastSwitchOverTime.setDescription('The value of sysUpTime when last switch over occurred.')
f3TimeClockProtGroupLastSwitchOverReason = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12, 1, 8, 1, 5), CmGenPgSwitchoverReason()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TimeClockProtGroupLastSwitchOverReason.setStatus('current')
if mibBuilder.loadTexts: f3TimeClockProtGroupLastSwitchOverReason.setDescription('The reason for last switch over in the Time Clock Redundancy Group.')
f3TimeClockProtGroupStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12, 1, 8, 1, 6), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3TimeClockProtGroupStorageType.setStatus('current')
if mibBuilder.loadTexts: f3TimeClockProtGroupStorageType.setDescription('The type of storage configured for this entry.')
f3TimeClockProtGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12, 1, 8, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3TimeClockProtGroupRowStatus.setStatus('current')
if mibBuilder.loadTexts: f3TimeClockProtGroupRowStatus.setDescription('The status of this row.  An entry MUST NOT exist in the \n            active state unless all objects in the entry have an \n            appropriate value, as described\n            in the description clause for each writable object.\n\n            The values of f3TimeClockProtGroupRowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            f3TimeClockProtGroupRowStatus value as createAndGo(4).\n            Upon successful row creation, this object has a\n            value of active(1).\n\n            The f3TimeClockProtGroupRowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
f3TimeClockProtMemberTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12, 1, 9), )
if mibBuilder.loadTexts: f3TimeClockProtMemberTable.setStatus('current')
if mibBuilder.loadTexts: f3TimeClockProtMemberTable.setDescription('A list of entries for the Time Clock Protection Group Members.')
f3TimeClockProtMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12, 1, 9, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-SYNC-MIB", "f3TimeClockProtGroupIndex"), (0, "F3-SYNC-MIB", "f3TimeClockProtMemberObject"))
if mibBuilder.loadTexts: f3TimeClockProtMemberEntry.setStatus('current')
if mibBuilder.loadTexts: f3TimeClockProtMemberEntry.setDescription('A conceptual row in the f3TimeClockProtMemberTable.')
f3TimeClockProtMemberObject = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12, 1, 9, 1, 1), VariablePointer())
if mibBuilder.loadTexts: f3TimeClockProtMemberObject.setStatus('current')
if mibBuilder.loadTexts: f3TimeClockProtMemberObject.setDescription('This object points to the Protection Group Member.')
f3TimeClockProtMemberStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12, 1, 9, 1, 2), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3TimeClockProtMemberStorageType.setStatus('current')
if mibBuilder.loadTexts: f3TimeClockProtMemberStorageType.setDescription('The type of storage configured for this entry.')
f3TimeClockProtMemberRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12, 1, 9, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3TimeClockProtMemberRowStatus.setStatus('current')
if mibBuilder.loadTexts: f3TimeClockProtMemberRowStatus.setDescription('The status of this row.\n            An entry MUST NOT exist in the active state unless all\n            objects in the entry have an appropriate value, as described\n            in the description clause for each writable object.\n    \n            The values of f3TimeClockProtMemberRowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            f3TimeClockProtMemberRowStatus value as createAndGo(4).\n            Upon successful row creation, this object has a\n            value of active(1).\n    \n            The f3TimeClockProtMemberRowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
f3SyncCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12, 2, 1))
f3SyncGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12, 2, 2))
f3SyncCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12, 2, 1, 1)).setObjects(("F3-SYNC-MIB", "f3SyncObjectGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3SyncCompliance = f3SyncCompliance.setStatus('current')
if mibBuilder.loadTexts: f3SyncCompliance.setDescription('Describes the requirements for conformance to the F3 Sync\n        group.')
f3SyncObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12, 2, 2, 1)).setObjects(("F3-SYNC-MIB", "f3SyncIndex"), ("F3-SYNC-MIB", "f3SyncAdminState"), ("F3-SYNC-MIB", "f3SyncOperationalState"), ("F3-SYNC-MIB", "f3SyncSecondaryState"), ("F3-SYNC-MIB", "f3SyncNetworkClockType"), ("F3-SYNC-MIB", "f3SyncSelectedReference"), ("F3-SYNC-MIB", "f3SyncClockMode"), ("F3-SYNC-MIB", "f3SyncQL"), ("F3-SYNC-MIB", "f3SyncAlias"), ("F3-SYNC-MIB", "f3SyncDomain"), ("F3-SYNC-MIB", "f3SyncSelectionMode"), ("F3-SYNC-MIB", "f3SyncWaitToRestoreTime"), ("F3-SYNC-MIB", "f3SyncOperationSyncRef"), ("F3-SYNC-MIB", "f3SyncOperationType"), ("F3-SYNC-MIB", "f3SyncPLLBw"), ("F3-SYNC-MIB", "f3SyncRefIndex"), ("F3-SYNC-MIB", "f3SyncRefReference"), ("F3-SYNC-MIB", "f3SyncRefPriority"), ("F3-SYNC-MIB", "f3SyncRefStatus"), ("F3-SYNC-MIB", "f3SyncRefState"), ("F3-SYNC-MIB", "f3SyncRefReceivedQL"), ("F3-SYNC-MIB", "f3SyncRefStorageType"), ("F3-SYNC-MIB", "f3SyncRefRowStatus"), ("F3-SYNC-MIB", "f3SyncRefAlias"), ("F3-SYNC-MIB", "f3SyncRefEffectiveQL"), ("F3-SYNC-MIB", "f3SyncRefOperationType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3SyncObjectGroup = f3SyncObjectGroup.setStatus('current')
if mibBuilder.loadTexts: f3SyncObjectGroup.setDescription('A collection of objects used to manage the F3 Sync Object group.')
f3TimeClockObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12, 2, 2, 2)).setObjects(("F3-SYNC-MIB", "f3TimeClockIndex"), ("F3-SYNC-MIB", "f3TimeClockAlias"), ("F3-SYNC-MIB", "f3TimeClockAdminState"), ("F3-SYNC-MIB", "f3TimeClockOperationalState"), ("F3-SYNC-MIB", "f3TimeClockSecondaryState"), ("F3-SYNC-MIB", "f3TimeClockSelectedReference"), ("F3-SYNC-MIB", "f3TimeClockClockMode"), ("F3-SYNC-MIB", "f3TimeClockClockClass"), ("F3-SYNC-MIB", "f3TimeClockSelectionMode"), ("F3-SYNC-MIB", "f3TimeClockWaitToRestoreTime"), ("F3-SYNC-MIB", "f3TimeClockOperationTimeClockRef"), ("F3-SYNC-MIB", "f3TimeClockOperationType"), ("F3-SYNC-MIB", "f3TimeClockLeap59"), ("F3-SYNC-MIB", "f3TimeClockLeap61"), ("F3-SYNC-MIB", "f3TimeClockTimeTraceAbilityStatus"), ("F3-SYNC-MIB", "f3TimeClockExpectedQL"), ("F3-SYNC-MIB", "f3TimeClockCurrentQL"), ("F3-SYNC-MIB", "f3TimeClockSyncRefCandidate"), ("F3-SYNC-MIB", "f3TimeClockTimeHoldoverPerformance"), ("F3-SYNC-MIB", "f3TimeClockUtcOffset"), ("F3-SYNC-MIB", "f3TimeClockCurrentTimeOfDay"), ("F3-SYNC-MIB", "f3TimeClockFrequencyReference"), ("F3-SYNC-MIB", "f3TimeClockFrequencyClockMode"), ("F3-SYNC-MIB", "f3TimeClockTimeScale"), ("F3-SYNC-MIB", "f3TimeClockTODSource"), ("F3-SYNC-MIB", "f3TimeClockEPRTCModeEnabled"), ("F3-SYNC-MIB", "f3TimeClockTimeHoldoverTimeout"), ("F3-SYNC-MIB", "f3TimeClockTimeInHoldover"), ("F3-SYNC-MIB", "f3TimeClockAtoiCurrentOffset"), ("F3-SYNC-MIB", "f3TimeClockAtoiJumpSeconds"), ("F3-SYNC-MIB", "f3TimeClockAtoiTimeOfNextJump"), ("F3-SYNC-MIB", "f3TimeClockAtoiDisplayName"), ("F3-SYNC-MIB", "f3TimeClockPhaseAdjust"), ("F3-SYNC-MIB", "f3TimeClockRefIndex"), ("F3-SYNC-MIB", "f3TimeClockRefAlias"), ("F3-SYNC-MIB", "f3TimeClockRefReference"), ("F3-SYNC-MIB", "f3TimeClockRefPriority"), ("F3-SYNC-MIB", "f3TimeClockRefStatus"), ("F3-SYNC-MIB", "f3TimeClockRefState"), ("F3-SYNC-MIB", "f3TimeClockRefOperationType"), ("F3-SYNC-MIB", "f3TimeClockRefStorageType"), ("F3-SYNC-MIB", "f3TimeClockRefRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3TimeClockObjectGroup = f3TimeClockObjectGroup.setStatus('current')
if mibBuilder.loadTexts: f3TimeClockObjectGroup.setDescription('A collection of objects used to manage the F3 TimeClock Object group.')
f3PrcObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12, 2, 2, 3)).setObjects(("F3-SYNC-MIB", "f3PrcIndex"), ("F3-SYNC-MIB", "f3PrcAlias"), ("F3-SYNC-MIB", "f3PrcAdminState"), ("F3-SYNC-MIB", "f3PrcOperationalState"), ("F3-SYNC-MIB", "f3PrcSecondaryState"), ("F3-SYNC-MIB", "f3PrcClockMode"), ("F3-SYNC-MIB", "f3PrcSsmMode"), ("F3-SYNC-MIB", "f3PrcAccuracyAdjustement"), ("F3-SYNC-MIB", "f3PrcCurrentQL"), ("F3-SYNC-MIB", "f3PrcAcknowledgeAction"), ("F3-SYNC-MIB", "f3PrcRestartAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3PrcObjectGroup = f3PrcObjectGroup.setStatus('current')
if mibBuilder.loadTexts: f3PrcObjectGroup.setDescription('A collection of objects used to manage the F3 Primary Reference Clock Object group.')
f3ProtObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 12, 2, 2, 4)).setObjects(("F3-SYNC-MIB", "f3SyncProtGroupIndex"), ("F3-SYNC-MIB", "f3SyncProtGroupAdminState"), ("F3-SYNC-MIB", "f3SyncProtGroupActiveMember"), ("F3-SYNC-MIB", "f3SyncProtGroupLastSwitchOverTime"), ("F3-SYNC-MIB", "f3SyncProtGroupLastSwitchOverReason"), ("F3-SYNC-MIB", "f3SyncProtGroupStorageType"), ("F3-SYNC-MIB", "f3SyncProtGroupRowStatus"), ("F3-SYNC-MIB", "f3SyncProtMemberObject"), ("F3-SYNC-MIB", "f3SyncProtMemberStorageType"), ("F3-SYNC-MIB", "f3SyncProtMemberRowStatus"), ("F3-SYNC-MIB", "f3TimeClockProtGroupIndex"), ("F3-SYNC-MIB", "f3TimeClockProtGroupAdminState"), ("F3-SYNC-MIB", "f3TimeClockProtGroupActiveMember"), ("F3-SYNC-MIB", "f3TimeClockProtGroupLastSwitchOverTime"), ("F3-SYNC-MIB", "f3TimeClockProtGroupLastSwitchOverReason"), ("F3-SYNC-MIB", "f3TimeClockProtGroupStorageType"), ("F3-SYNC-MIB", "f3TimeClockProtGroupRowStatus"), ("F3-SYNC-MIB", "f3TimeClockProtMemberObject"), ("F3-SYNC-MIB", "f3TimeClockProtMemberStorageType"), ("F3-SYNC-MIB", "f3TimeClockProtMemberRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3ProtObjectGroup = f3ProtObjectGroup.setStatus('current')
if mibBuilder.loadTexts: f3ProtObjectGroup.setDescription('A collection of objects used to manage the Protection Object group.')
mibBuilder.exportSymbols("F3-SYNC-MIB", f3TimeClockRefTable=f3TimeClockRefTable, f3TimeClockFrequencyClockMode=f3TimeClockFrequencyClockMode, f3SyncCompliances=f3SyncCompliances, SsmMode=SsmMode, ClkSignalType=ClkSignalType, f3SyncMIB=f3SyncMIB, TimeSource=TimeSource, SyncRefStatus=SyncRefStatus, f3SyncRefReceivedQL=f3SyncRefReceivedQL, f3SyncRefAlias=f3SyncRefAlias, f3SyncRefEffectiveQL=f3SyncRefEffectiveQL, f3TimeClockOperationalState=f3TimeClockOperationalState, f3SyncProtGroupIndex=f3SyncProtGroupIndex, TimeTraceAbilityStatus=TimeTraceAbilityStatus, f3TimeClockOperationTimeClockRef=f3TimeClockOperationTimeClockRef, f3SyncClockMode=f3SyncClockMode, f3TimeClockAtoiJumpSeconds=f3TimeClockAtoiJumpSeconds, f3TimeClockAlias=f3TimeClockAlias, f3SyncRefState=f3SyncRefState, f3SyncDomain=f3SyncDomain, f3TimeClockSecondaryState=f3TimeClockSecondaryState, f3SyncEntry=f3SyncEntry, f3SyncAdminState=f3SyncAdminState, f3SyncTable=f3SyncTable, f3SyncRefOperationType=f3SyncRefOperationType, f3TimeClockTimeTraceAbilityStatus=f3TimeClockTimeTraceAbilityStatus, f3TimeClockRefEntry=f3TimeClockRefEntry, f3PrcAcknowledgeAction=f3PrcAcknowledgeAction, f3TimeClockProtMemberTable=f3TimeClockProtMemberTable, f3TimeClockProtGroupStorageType=f3TimeClockProtGroupStorageType, f3TimeClockProtGroupEntry=f3TimeClockProtGroupEntry, f3SyncProtGroupEntry=f3SyncProtGroupEntry, f3ProtObjectGroup=f3ProtObjectGroup, f3TimeClockRefRowStatus=f3TimeClockRefRowStatus, f3TimeClockRefState=f3TimeClockRefState, f3SyncRefTable=f3SyncRefTable, TimeScale=TimeScale, f3TimeClockPhaseAdjust=f3TimeClockPhaseAdjust, TimeClockMode=TimeClockMode, f3TimeClockTimeHoldoverTimeout=f3TimeClockTimeHoldoverTimeout, f3PrcOperationalState=f3PrcOperationalState, f3TimeClockProtMemberRowStatus=f3TimeClockProtMemberRowStatus, f3PrcIndex=f3PrcIndex, f3PrcRestartAction=f3PrcRestartAction, f3SyncSelectionMode=f3SyncSelectionMode, f3SyncIndex=f3SyncIndex, PYSNMP_MODULE_ID=f3SyncMIB, f3TimeClockProtGroupAdminState=f3TimeClockProtGroupAdminState, ClockMode=ClockMode, f3PrcSecondaryState=f3PrcSecondaryState, f3TimeClockProtGroupIndex=f3TimeClockProtGroupIndex, f3SyncAlias=f3SyncAlias, f3SyncRefPriority=f3SyncRefPriority, f3TimeClockOperationType=f3TimeClockOperationType, f3TimeClockEntry=f3TimeClockEntry, f3TimeClockSelectedReference=f3TimeClockSelectedReference, f3PrcEntry=f3PrcEntry, f3PrcCurrentQL=f3PrcCurrentQL, f3TimeClockProtGroupRowStatus=f3TimeClockProtGroupRowStatus, f3SyncSelectedReference=f3SyncSelectedReference, f3TimeClockTimeInHoldover=f3TimeClockTimeInHoldover, f3TimeClockRefAlias=f3TimeClockRefAlias, f3TimeClockLeap61=f3TimeClockLeap61, f3TimeClockTable=f3TimeClockTable, f3SyncCompliance=f3SyncCompliance, f3TimeClockTimeHoldoverPerformance=f3TimeClockTimeHoldoverPerformance, SyncDomainType=SyncDomainType, f3TimeClockRefIndex=f3TimeClockRefIndex, f3SyncProtGroupAdminState=f3SyncProtGroupAdminState, SquelchControl=SquelchControl, f3TimeClockProtMemberStorageType=f3TimeClockProtMemberStorageType, f3SyncProtGroupRowStatus=f3SyncProtGroupRowStatus, SSMQualityLevel=SSMQualityLevel, f3TimeClockProtGroupActiveMember=f3TimeClockProtGroupActiveMember, f3TimeClockRefStatus=f3TimeClockRefStatus, f3TimeClockRefPriority=f3TimeClockRefPriority, f3SyncProtMemberEntry=f3SyncProtMemberEntry, f3SyncProtMemberTable=f3SyncProtMemberTable, f3TimeClockEPRTCModeEnabled=f3TimeClockEPRTCModeEnabled, f3TimeClockExpectedQL=f3TimeClockExpectedQL, f3SyncProtMemberRowStatus=f3SyncProtMemberRowStatus, f3TimeClockProtGroupLastSwitchOverTime=f3TimeClockProtGroupLastSwitchOverTime, f3SyncProtMemberStorageType=f3SyncProtMemberStorageType, f3TimeClockClockClass=f3TimeClockClockClass, f3SyncRefRowStatus=f3SyncRefRowStatus, f3PrcSsmMode=f3PrcSsmMode, f3SyncOperationType=f3SyncOperationType, f3TimeClockProtMemberEntry=f3TimeClockProtMemberEntry, f3TimeClockProtGroupLastSwitchOverReason=f3TimeClockProtGroupLastSwitchOverReason, SyncOperationType=SyncOperationType, f3PrcAlias=f3PrcAlias, HoldoverAccuracy=HoldoverAccuracy, f3TimeClockIndex=f3TimeClockIndex, f3PrcObjectGroup=f3PrcObjectGroup, PLLBw=PLLBw, f3TimeClockFrequencyReference=f3TimeClockFrequencyReference, f3SyncObjectGroup=f3SyncObjectGroup, NetworkClockType=NetworkClockType, f3TimeClockAdminState=f3TimeClockAdminState, f3SyncQL=f3SyncQL, f3SyncRefStatus=f3SyncRefStatus, AcknowledgeType=AcknowledgeType, TimeHoldoverPerformance=TimeHoldoverPerformance, f3SyncWaitToRestoreTime=f3SyncWaitToRestoreTime, f3PrcTable=f3PrcTable, f3SyncOperationSyncRef=f3SyncOperationSyncRef, f3SyncRefIndex=f3SyncRefIndex, f3TimeClockCurrentQL=f3TimeClockCurrentQL, f3TimeClockRefReference=f3TimeClockRefReference, f3SyncOperationalState=f3SyncOperationalState, f3TimeClockProtGroupTable=f3TimeClockProtGroupTable, f3TimeClockWaitToRestoreTime=f3TimeClockWaitToRestoreTime, f3SyncPLLBw=f3SyncPLLBw, f3SyncProtMemberObject=f3SyncProtMemberObject, f3SyncProtGroupActiveMember=f3SyncProtGroupActiveMember, f3SyncProtGroupStorageType=f3SyncProtGroupStorageType, f3PrcClockMode=f3PrcClockMode, f3TimeClockProtMemberObject=f3TimeClockProtMemberObject, f3TimeClockRefStorageType=f3TimeClockRefStorageType, SyncRefState=SyncRefState, TODSource=TODSource, f3SyncProtGroupTable=f3SyncProtGroupTable, f3TimeClockAtoiTimeOfNextJump=f3TimeClockAtoiTimeOfNextJump, f3SyncRefReference=f3SyncRefReference, f3PrcAdminState=f3PrcAdminState, f3PrcAccuracyAdjustement=f3PrcAccuracyAdjustement, f3TimeClockObjectGroup=f3TimeClockObjectGroup, f3TimeClockSelectionMode=f3TimeClockSelectionMode, f3SyncConformance=f3SyncConformance, f3SyncSecondaryState=f3SyncSecondaryState, f3TimeClockClockMode=f3TimeClockClockMode, SyncSelectionMode=SyncSelectionMode, f3TimeClockAtoiDisplayName=f3TimeClockAtoiDisplayName, f3SyncProtGroupLastSwitchOverReason=f3SyncProtGroupLastSwitchOverReason, f3TimeClockLeap59=f3TimeClockLeap59, f3SyncNetworkClockType=f3SyncNetworkClockType, f3SyncObjects=f3SyncObjects, f3TimeClockSyncRefCandidate=f3TimeClockSyncRefCandidate, f3SyncGroups=f3SyncGroups, f3TimeClockUtcOffset=f3TimeClockUtcOffset, f3TimeClockAtoiCurrentOffset=f3TimeClockAtoiCurrentOffset, f3SyncProtGroupLastSwitchOverTime=f3SyncProtGroupLastSwitchOverTime, f3TimeClockTODSource=f3TimeClockTODSource, f3TimeClockRefOperationType=f3TimeClockRefOperationType, f3TimeClockCurrentTimeOfDay=f3TimeClockCurrentTimeOfDay, f3TimeClockTimeScale=f3TimeClockTimeScale, f3SyncRefStorageType=f3SyncRefStorageType, f3SyncRefEntry=f3SyncRefEntry)
