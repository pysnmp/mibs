#
# PySNMP MIB module VMWARE-VMINFO-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/vmware/VMWARE-VMINFO-MIB
# Produced by pysmi-1.1.12 at Mon Jul  1 09:18:45 2024
# On host fv-az532-988 platform Linux version 6.5.0-1022-azure by user runner
# Using Python version 3.10.14 (main, Jun 20 2024, 15:20:03) [GCC 11.4.0]
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, Counter64, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Gauge32, ObjectIdentity, Counter32, Bits, iso, Unsigned32, NotificationType, IpAddress, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Counter64", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Gauge32", "ObjectIdentity", "Counter32", "Bits", "iso", "Unsigned32", "NotificationType", "IpAddress", "MibIdentifier")
TextualConvention, DisplayString, PhysAddress = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "PhysAddress")
vmwESXNotifications, = mibBuilder.importSymbols("VMWARE-ENV-MIB", "vmwESXNotifications")
vmwVirtMachines, vmwTraps = mibBuilder.importSymbols("VMWARE-ROOT-MIB", "vmwVirtMachines", "vmwTraps")
VmwConnectedState, = mibBuilder.importSymbols("VMWARE-TC-MIB", "VmwConnectedState")
vmwVmInfoMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6876, 2, 10))
vmwVmInfoMIB.setRevisions(('2011-09-17 00:00', '2010-06-22 00:00', '2008-10-23 00:00', '2007-12-27 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: vmwVmInfoMIB.setRevisionsDescriptions(('Remove vmwVmID as it duplicates vmwVmID.', 'Add managed object vmwVmUUID to vmTable to allow management applications \n     to identify a VM uniquely over a set of ESX systems. This value is useful when \n     VMs may move between systems.', 'Add to comments the Managed Object Browser (MOB) URLs which provide \n     data this MIB module exposes.\n     Handle cases in reporting string for managed objects in this mib\n     where the values depend on additional operator configuration.\n     Instead of returning an empty string, an error message of the form:\n          W|E: error description\n     Add vmNumCpus to vmwVmTable to better report on VSMP virtual machines.\n     Add vmwVmNetConnected and vmwVmMAC to vmwVmNetTable\n     VIM Virtual Devices index range values are documented based on ESX 3/4 \n     implementation, they may change in the future releases.\n     Update comments to note that CDROM also lists DVDROM virtual devices.', 'This is the first revision in SMIv2 format. Prior version was published as SMIv1.\n     Notifications found here were formerly in the VMWARE-TRAPS-MIB module.',))
if mibBuilder.loadTexts: vmwVmInfoMIB.setLastUpdated('201109170000Z')
if mibBuilder.loadTexts: vmwVmInfoMIB.setOrganization('VMware, Inc')
if mibBuilder.loadTexts: vmwVmInfoMIB.setContactInfo('VMware, Inc\n    3401 Hillview Ave\n    Palo Alto, CA 94304\n    Tel: 1-877-486-9273 or 650-427-5000\n    Fax: 650-427-5001\n    Web: http://communities.vmware.com/community/developer/forums/managementapi\n    ')
if mibBuilder.loadTexts: vmwVmInfoMIB.setDescription('This MIB module provides for monitoring of inventory and state via polling\n      and notifications of state changes for virtual machines residing on\n      this host system.  This MIB module also provides a mapping beween SMI\n      managed objects defined here and their corresponding VMware Virtual\n      Infrastructure Management (VIM) API properties.')
vmwVmTable = MibTable((1, 3, 6, 1, 4, 1, 6876, 2, 1), )
if mibBuilder.loadTexts: vmwVmTable.setStatus('current')
if mibBuilder.loadTexts: vmwVmTable.setDescription('A table containing information on virtual machines that have been \n                configured on the system.')
vmwVmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6876, 2, 1, 1), ).setIndexNames((0, "VMWARE-VMINFO-MIB", "vmwVmIdx"))
if mibBuilder.loadTexts: vmwVmEntry.setStatus('current')
if mibBuilder.loadTexts: vmwVmEntry.setDescription('Identifies a registered VM on this ESX system.')
vmwVmIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 6876, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: vmwVmIdx.setStatus('current')
if mibBuilder.loadTexts: vmwVmIdx.setDescription('An operational identifier given the VM when registered on this ESX system.\n                 The value is not unique across ESX systems and may change upon reboot.\n                 VIM property: ha-vm-folder\n                 MOB: https://esx.example.com/mob/?moid=ha%2dfolder%2dvm\n                 A given Virtual Machine Instance can be queried using this URL:\n                 MOB: https://esx.example.com/mob/?moid=vmwVmIdx')
vmwVmDisplayName = MibTableColumn((1, 3, 6, 1, 4, 1, 6876, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmwVmDisplayName.setStatus('current')
if mibBuilder.loadTexts: vmwVmDisplayName.setDescription('Name by which this vm is displayed. It is not guaranteed to be unique.\n                 MOB: https://esx.example.com/mob/?moid=vmwVmIdx&doPath=summary%2eguest')
vmwVmConfigFile = MibTableColumn((1, 3, 6, 1, 4, 1, 6876, 2, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmwVmConfigFile.setStatus('current')
if mibBuilder.loadTexts: vmwVmConfigFile.setDescription('Path to the configuration file for this vm expressed as a fully\n                 qualified path name in POSIX or DOS extended format\n                 VM Config file File name:\n                 MOB: https://esx.example.com/mob/?moid=vmwVmIdx&doPath=config%2efiles\n                 VM Datastore containing the filename:\n                 MOB: https://esx.example.com/mob/?moid=vmwVmIdx&doPath=config%2edatastoreUrl')
vmwVmGuestOS = MibTableColumn((1, 3, 6, 1, 4, 1, 6876, 2, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmwVmGuestOS.setStatus('current')
if mibBuilder.loadTexts: vmwVmGuestOS.setDescription("Operating system running on this vm. This value corresponds to the\n                 value specified when creating the VM and unless set correctly may differ\n                 from the actual OS running. Will return one of the values if set in order:\n                   Vim.Vm.GuestInfo.guestFullName\n                   Vim.Vm.GuestInfo.guestId\n                   Vim.Vm.GuestInfo.guestFamily\n                 MOB: https://esx.example.com/mob/?moid=vmwVmIdx&doPath=guest \n                      where moid = vmwVmIdx.\n                 If VMware Tools is not running, value will be of form 'E: error message'")
vmwVmMemSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6876, 2, 1, 1, 5), Integer32()).setUnits('megabytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: vmwVmMemSize.setStatus('current')
if mibBuilder.loadTexts: vmwVmMemSize.setDescription('Memory configured for this virtual machine. \n                 Memory > MAX Integer32 is reported as max integer32.\n                VIM Property: memoryMB\n                MOB: https://esx.example.com/mob/?moid=vmwVmIdx&doPath=config%2ehardware')
vmwVmState = MibTableColumn((1, 3, 6, 1, 4, 1, 6876, 2, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmwVmState.setStatus('current')
if mibBuilder.loadTexts: vmwVmState.setDescription('Power state of the virtual machine.\n                VIM Property: powerState\n                MOB: https://esx.example.com/mob/?moid=vmwVmIdx&doPath=summary%2eruntime')
vmwVmVMID = MibTableColumn((1, 3, 6, 1, 4, 1, 6876, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmwVmVMID.setStatus('obsolete')
if mibBuilder.loadTexts: vmwVmVMID.setDescription('No longer provided, use vmwVmIdx. See vmwVmUUID for cross system, \n                 unique, persistent identifier.')
vmwVmGuestState = MibTableColumn((1, 3, 6, 1, 4, 1, 6876, 2, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmwVmGuestState.setStatus('current')
if mibBuilder.loadTexts: vmwVmGuestState.setDescription('Operation mode of guest operating system. Values include:\n                  running  - Guest is running normally.\n                  shuttingdown - Guest has a pending shutdown command.\n                  resetting - Guest has a pending reset command.\n                  standby - Guest has a pending standby command.\n                  notrunning - Guest is not running.\n                  unknown - Guest information is not available.\n                VIM Property: guestState\n                MOB: https://esx.example.com/mob/?moid=vmwVmIdx&doPath=guest')
vmwVmCpus = MibTableColumn((1, 3, 6, 1, 4, 1, 6876, 2, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmwVmCpus.setStatus('current')
if mibBuilder.loadTexts: vmwVmCpus.setDescription('Number of virtual CPUs assigned to this virtual machine.\n                VIM Property: numCPU \n                MOB: https://esx.example.com/mob/?moid=vmwVmIdx&doPath=config%2ehardware')
vmwVmUUID = MibTableColumn((1, 3, 6, 1, 4, 1, 6876, 2, 1, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(36, 72))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmwVmUUID.setStatus('current')
if mibBuilder.loadTexts: vmwVmUUID.setDescription('A unique identifier for this VM. Must be unique across a set of ESX systems\n\t         managed by an instance of vSphere Center. \n                 Example value: 564d95d4-bff7-31fd-f20f-db2d808a8b32\n                 VIM Property: uuid \n                 MOB: https://esx.example.com/mob/?moid=vmwVmIdx&doPath=config')
vmwVmHbaTable = MibTable((1, 3, 6, 1, 4, 1, 6876, 2, 2), )
if mibBuilder.loadTexts: vmwVmHbaTable.setStatus('current')
if mibBuilder.loadTexts: vmwVmHbaTable.setDescription('Table of host bus adapters (hba) for all vms in vmwVmTable.')
vmwVmHbaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6876, 2, 2, 1), ).setIndexNames((0, "VMWARE-VMINFO-MIB", "vmwHbaVmIdx"), (0, "VMWARE-VMINFO-MIB", "vmwVmHbaIdx"))
if mibBuilder.loadTexts: vmwVmHbaEntry.setStatus('current')
if mibBuilder.loadTexts: vmwVmHbaEntry.setDescription('Uniquely identifies a given virtual machine host bus adapter.')
vmwHbaVmIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 6876, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: vmwHbaVmIdx.setStatus('current')
if mibBuilder.loadTexts: vmwHbaVmIdx.setDescription('This number corresponds to the vmwVmIdx in vmwVmTable.')
vmwVmHbaIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 6876, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: vmwVmHbaIdx.setStatus('current')
if mibBuilder.loadTexts: vmwVmHbaIdx.setDescription('Uniquely identifies a given Host Bus adapter in this VM. May \n                 change across system reboots.')
vmwHbaNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6876, 2, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmwHbaNum.setStatus('current')
if mibBuilder.loadTexts: vmwHbaNum.setDescription('The name of the hba as it appears in the VM Settings.\n                 VIM Property: Virtual Device index of 200-299.\n                 MOB: https://esx.example.com/mob/?moid=vmwVmIdx&doPath=config%2ehardware')
vmwHbaVirtDev = MibTableColumn((1, 3, 6, 1, 4, 1, 6876, 2, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmwHbaVirtDev.setStatus('current')
if mibBuilder.loadTexts: vmwHbaVirtDev.setDescription('The oem host bus adapter hardware being emulated to the Guest OS.\n                 MOB: Not visible.')
vmwHbaTgtTable = MibTable((1, 3, 6, 1, 4, 1, 6876, 2, 3), )
if mibBuilder.loadTexts: vmwHbaTgtTable.setStatus('current')
if mibBuilder.loadTexts: vmwHbaTgtTable.setDescription('Table of all virtual disks configured for vms in vmwVmTable.')
vmwHbaTgtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6876, 2, 3, 1), ).setIndexNames((0, "VMWARE-VMINFO-MIB", "vmwHbaTgtVmIdx"), (0, "VMWARE-VMINFO-MIB", "vmwHbaTgtIdx"))
if mibBuilder.loadTexts: vmwHbaTgtEntry.setStatus('current')
if mibBuilder.loadTexts: vmwHbaTgtEntry.setDescription('Identifies a specific storage disk. Index may change across reboots.')
vmwHbaTgtVmIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 6876, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: vmwHbaTgtVmIdx.setStatus('current')
if mibBuilder.loadTexts: vmwHbaTgtVmIdx.setDescription('This number corresponds to vmwVmIdx in vmwVmTable.')
vmwHbaTgtIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 6876, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: vmwHbaTgtIdx.setStatus('current')
if mibBuilder.loadTexts: vmwHbaTgtIdx.setDescription('This value identifies a particular disk.')
vmwHbaTgtNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6876, 2, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmwHbaTgtNum.setStatus('current')
if mibBuilder.loadTexts: vmwHbaTgtNum.setDescription("Identifies the disk as seen from the host bus controller\n                 VIM Property: Virtual Device's with index of 2000-2999,3000-3999.\n                 MOB: https://esx.example.com/mob/?moid=vmwVmIdx&doPath=config%2ehardware")
vmwVmNetTable = MibTable((1, 3, 6, 1, 4, 1, 6876, 2, 4), )
if mibBuilder.loadTexts: vmwVmNetTable.setStatus('current')
if mibBuilder.loadTexts: vmwVmNetTable.setDescription('Table of network adapters (nic) for all vms in vmwVmTable.')
vmwVmNetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6876, 2, 4, 1), ).setIndexNames((0, "VMWARE-VMINFO-MIB", "vmwVmNetVmIdx"), (0, "VMWARE-VMINFO-MIB", "vmwVmNetIdx"))
if mibBuilder.loadTexts: vmwVmNetEntry.setStatus('current')
if mibBuilder.loadTexts: vmwVmNetEntry.setDescription('Identifies a particular nic for the specified vmwVmIdx')
vmwVmNetVmIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 6876, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: vmwVmNetVmIdx.setStatus('current')
if mibBuilder.loadTexts: vmwVmNetVmIdx.setDescription('This number corresponds to vmwVmIdx in vmwVmTable.')
vmwVmNetIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 6876, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: vmwVmNetIdx.setStatus('current')
if mibBuilder.loadTexts: vmwVmNetIdx.setDescription('Identifies a unique network adapter in this table.\n                 Not guaranteed to be the same across system reboots.')
vmwVmNetNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6876, 2, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmwVmNetNum.setStatus('current')
if mibBuilder.loadTexts: vmwVmNetNum.setDescription("The name of the device as it appears in the VM Settings.\n                 VIM Property: Virtual Device's with index of 4000-4999. \n                 MOB: https://esx.example.com/mob/?moid=vmwVmIdx&doPath=config%2ehardware")
vmwVmNetName = MibTableColumn((1, 3, 6, 1, 4, 1, 6876, 2, 4, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmwVmNetName.setStatus('current')
if mibBuilder.loadTexts: vmwVmNetName.setDescription("What this virutal nic is connected to such as a virtual switch portgroup identifier.\n                 VIM Property: Virtual Device's with index of 4000-4999. \n                 MOB: https://esx.example.com/mob/?moid=vmwVmIdx&doPath=config%2ehardware\n                 then select property 'backing' to how this nic connects.\n                 If no backing was defined by operator, string will start with W:\n                 If unavailable, string will start with E:")
vmwVmNetConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 6876, 2, 4, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmwVmNetConnType.setStatus('obsolete')
if mibBuilder.loadTexts: vmwVmNetConnType.setDescription('Do not use this value, and should an agent return it discard it.')
vmwVmNetConnected = MibTableColumn((1, 3, 6, 1, 4, 1, 6876, 2, 4, 1, 6), VmwConnectedState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmwVmNetConnected.setStatus('current')
if mibBuilder.loadTexts: vmwVmNetConnected.setDescription("Reports 'true' if the ethernet virtual device is connected to the virtual machine.")
vmwVmMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 6876, 2, 4, 1, 7), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmwVmMAC.setStatus('current')
if mibBuilder.loadTexts: vmwVmMAC.setDescription("Reports the configured virtual hardware MAC address.  If VMware\n                 Tools is not running, or VM has not yet been powered on for the\n                 first time and mac is to be generated by VM then the value is\n                 zero'd out/empty.  VIM Property: Virtual Device's with index of\n                 4000-4999.  MOB:\n                 https://esx.example.com/mob/?moid=vmwVmIdx&doPath=config%2ehardware")
vmwFloppyTable = MibTable((1, 3, 6, 1, 4, 1, 6876, 2, 5), )
if mibBuilder.loadTexts: vmwFloppyTable.setStatus('current')
if mibBuilder.loadTexts: vmwFloppyTable.setDescription('Table of floppy drives for all vms in vmwVmTable.')
vmwFloppyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6876, 2, 5, 1), ).setIndexNames((0, "VMWARE-VMINFO-MIB", "vmwFdVmIdx"), (0, "VMWARE-VMINFO-MIB", "vmwFdIdx"))
if mibBuilder.loadTexts: vmwFloppyEntry.setStatus('current')
if mibBuilder.loadTexts: vmwFloppyEntry.setDescription('Identifies one specific floppy device. May change across system reboots.')
vmwFdVmIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 6876, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: vmwFdVmIdx.setStatus('current')
if mibBuilder.loadTexts: vmwFdVmIdx.setDescription('This number corresponds to vmwVmIdx in vmwVmTable.')
vmwFdIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 6876, 2, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: vmwFdIdx.setStatus('current')
if mibBuilder.loadTexts: vmwFdIdx.setDescription('Identifies one specific virtual floppy device.')
vmwFdName = MibTableColumn((1, 3, 6, 1, 4, 1, 6876, 2, 5, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmwFdName.setStatus('current')
if mibBuilder.loadTexts: vmwFdName.setDescription("File or Device that this device is connected to, example /dev/fd0.\n                 VIM Property: Virtual Device's with index of 8000-8999. \n                 MOB: https://esx.example.com/mob/?moid=vmwVmIdx&doPath=config%2ehardware\n                 If no backing was defined by operator, string will start with W:\n                 If unavailable, string will start with E:")
vmwFdConnected = MibTableColumn((1, 3, 6, 1, 4, 1, 6876, 2, 5, 1, 4), VmwConnectedState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmwFdConnected.setStatus('current')
if mibBuilder.loadTexts: vmwFdConnected.setDescription("Reports 'true' if the floppy drive virtual device is connected to the virtual machine.")
vmwCdromTable = MibTable((1, 3, 6, 1, 4, 1, 6876, 2, 6), )
if mibBuilder.loadTexts: vmwCdromTable.setStatus('current')
if mibBuilder.loadTexts: vmwCdromTable.setDescription('Table of DVD or CDROM drives for all vms in vmwVmTable.')
vmwCdromEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6876, 2, 6, 1), ).setIndexNames((0, "VMWARE-VMINFO-MIB", "vmwCdVmIdx"), (0, "VMWARE-VMINFO-MIB", "vmwCdromIdx"))
if mibBuilder.loadTexts: vmwCdromEntry.setStatus('current')
if mibBuilder.loadTexts: vmwCdromEntry.setDescription('Identifies a specific DVD or CDROM drive. Value may change across system reboots.')
vmwCdVmIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 6876, 2, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: vmwCdVmIdx.setStatus('current')
if mibBuilder.loadTexts: vmwCdVmIdx.setDescription('This number corresponds to the vmwVmIdx the vmwVmTable.')
vmwCdromIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 6876, 2, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: vmwCdromIdx.setStatus('current')
if mibBuilder.loadTexts: vmwCdromIdx.setDescription('Identifies the specific DVD or CDROM drive.')
vmwCdromName = MibTableColumn((1, 3, 6, 1, 4, 1, 6876, 2, 6, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmwCdromName.setStatus('current')
if mibBuilder.loadTexts: vmwCdromName.setDescription("Reports the iso or device this virtual drive has been configured to use\n                 VIM Property: Virtual Device's with index of 3000-3999 (same as disks)\n                 MOB: https://esx.example.com/mob/?moid=vmwVmIdx&doPath=config%2ehardware\n                 then select property 'backing' to how this cdrom connects.\n                 If no backing was defined by operator, string will start with W:\n                 If unavailable, string will start with E:")
vmwCdromConnected = MibTableColumn((1, 3, 6, 1, 4, 1, 6876, 2, 6, 1, 4), VmwConnectedState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmwCdromConnected.setStatus('current')
if mibBuilder.loadTexts: vmwCdromConnected.setDescription('Reports true if the dvd/cdrom is connected to the virtual machine.')
vmwVmID = MibScalar((1, 3, 6, 1, 4, 1, 6876, 50, 101), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: vmwVmID.setStatus('current')
if mibBuilder.loadTexts: vmwVmID.setDescription('This holds the same value as vmwVmVMID of the affected vm generating the trap.\n         to allow polling of the affected vm in vmwVmTable.')
vmwVmConfigFilePath = MibScalar((1, 3, 6, 1, 4, 1, 6876, 50, 102), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: vmwVmConfigFilePath.setStatus('current')
if mibBuilder.loadTexts: vmwVmConfigFilePath.setDescription('This is the path to the config file of the affected vm generating the trap \n         and is same as vmwVmTable vmwVmConfigFile. It is expressed as POSIX pathname.')
vmwVmPoweredOn = NotificationType((1, 3, 6, 1, 4, 1, 6876, 4, 1, 0, 1)).setObjects(("VMWARE-VMINFO-MIB", "vmwVmID"), ("VMWARE-VMINFO-MIB", "vmwVmConfigFilePath"), ("VMWARE-VMINFO-MIB", "vmwVmDisplayName"))
if mibBuilder.loadTexts: vmwVmPoweredOn.setStatus('current')
if mibBuilder.loadTexts: vmwVmPoweredOn.setDescription('This trap is sent when a virtual machine is powered on from a suspended \n     or a powered off state. The origin of this event can be several:\n     for instance may be operator initiated, existing vmx process reconnects to control subsystem. \n     NOTE: vms powered up due to VMotion are not reported. Upon receiving this notification client applications should\n     poll the vmwVmTable to obtain current status.')
vmwVmPoweredOff = NotificationType((1, 3, 6, 1, 4, 1, 6876, 4, 1, 0, 2)).setObjects(("VMWARE-VMINFO-MIB", "vmwVmID"), ("VMWARE-VMINFO-MIB", "vmwVmConfigFilePath"), ("VMWARE-VMINFO-MIB", "vmwVmDisplayName"))
if mibBuilder.loadTexts: vmwVmPoweredOff.setStatus('current')
if mibBuilder.loadTexts: vmwVmPoweredOff.setDescription('This trap is sent when a virtual machine is powered off. The origin of this event can be several:\n     for instance may be operator initiated, vmx process terminating abnormally. NOTE: vms powered down due\n     to VMotion are not reported. Upon receiving this notification client applications should\n     poll the vmwVmTable to obtain current status.')
vmwVmHBLost = NotificationType((1, 3, 6, 1, 4, 1, 6876, 4, 1, 0, 3)).setObjects(("VMWARE-VMINFO-MIB", "vmwVmID"), ("VMWARE-VMINFO-MIB", "vmwVmConfigFilePath"), ("VMWARE-VMINFO-MIB", "vmwVmDisplayName"))
if mibBuilder.loadTexts: vmwVmHBLost.setStatus('current')
if mibBuilder.loadTexts: vmwVmHBLost.setDescription('This trap is sent when a virtual machine detects a loss in guest heartbeat. The Guest heartbeat\n     is only sent if VMware Tools are installed in the Guest OS. Control process will send this event whenever it \n     determines the number of guest heartbeats for a given period of time have not been received. \n     Upon receiving this notification client applications should\n     poll the vmwVmTable to obtain current status.')
vmwVmHBDetected = NotificationType((1, 3, 6, 1, 4, 1, 6876, 4, 1, 0, 4)).setObjects(("VMWARE-VMINFO-MIB", "vmwVmID"), ("VMWARE-VMINFO-MIB", "vmwVmConfigFilePath"), ("VMWARE-VMINFO-MIB", "vmwVmDisplayName"))
if mibBuilder.loadTexts: vmwVmHBDetected.setStatus('current')
if mibBuilder.loadTexts: vmwVmHBDetected.setDescription('This trap is sent when a virtual machine detects or regains the required number of guest heartbeats\n     for a given period of time. This is only sent if VMware tools are installed in the Guest OS.\n     Upon receiving this notification client applications should\n     poll the vmwVmTable to obtain current status.')
vmwVmSuspended = NotificationType((1, 3, 6, 1, 4, 1, 6876, 4, 1, 0, 5)).setObjects(("VMWARE-VMINFO-MIB", "vmwVmID"), ("VMWARE-VMINFO-MIB", "vmwVmConfigFilePath"), ("VMWARE-VMINFO-MIB", "vmwVmDisplayName"))
if mibBuilder.loadTexts: vmwVmSuspended.setStatus('current')
if mibBuilder.loadTexts: vmwVmSuspended.setDescription('This trap is sent when a virtual machine is suspended. The origin of this event may be several: operator\n     initiated, by software api clients, and by other means.\n     Upon receiving this notification client applications should\n     poll the vmwVmTable to obtain current status.')
vmwVmInfoMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6876, 2, 10, 2))
vmwVmInfoMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6876, 2, 10, 2, 1))
vmwVmInfoMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6876, 2, 10, 2, 2))
vmwResMIBBasicCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6876, 2, 10, 2, 1, 2)).setObjects(("VMWARE-VMINFO-MIB", "vmwVmInfoGroup"), ("VMWARE-VMINFO-MIB", "vmwVmInfoNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vmwResMIBBasicCompliance = vmwResMIBBasicCompliance.setStatus('current')
if mibBuilder.loadTexts: vmwResMIBBasicCompliance.setDescription('The compliance statement for entities which implement the \n    VMWARE-RESOURCE-MIB.')
vmwVmInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6876, 2, 10, 2, 2, 1)).setObjects(("VMWARE-VMINFO-MIB", "vmwVmDisplayName"), ("VMWARE-VMINFO-MIB", "vmwVmConfigFile"), ("VMWARE-VMINFO-MIB", "vmwVmGuestOS"), ("VMWARE-VMINFO-MIB", "vmwVmMemSize"), ("VMWARE-VMINFO-MIB", "vmwVmState"), ("VMWARE-VMINFO-MIB", "vmwVmGuestState"), ("VMWARE-VMINFO-MIB", "vmwHbaNum"), ("VMWARE-VMINFO-MIB", "vmwHbaVirtDev"), ("VMWARE-VMINFO-MIB", "vmwHbaTgtNum"), ("VMWARE-VMINFO-MIB", "vmwVmNetNum"), ("VMWARE-VMINFO-MIB", "vmwVmNetName"), ("VMWARE-VMINFO-MIB", "vmwVmNetConnected"), ("VMWARE-VMINFO-MIB", "vmwVmMAC"), ("VMWARE-VMINFO-MIB", "vmwFdName"), ("VMWARE-VMINFO-MIB", "vmwFdConnected"), ("VMWARE-VMINFO-MIB", "vmwCdromName"), ("VMWARE-VMINFO-MIB", "vmwCdromConnected"), ("VMWARE-VMINFO-MIB", "vmwVmID"), ("VMWARE-VMINFO-MIB", "vmwVmConfigFilePath"), ("VMWARE-VMINFO-MIB", "vmwVmCpus"), ("VMWARE-VMINFO-MIB", "vmwVmUUID"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vmwVmInfoGroup = vmwVmInfoGroup.setStatus('current')
if mibBuilder.loadTexts: vmwVmInfoGroup.setDescription('These objects provide virtual machine details.')
vmwVmInfoNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6876, 2, 10, 2, 2, 2)).setObjects(("VMWARE-VMINFO-MIB", "vmwVmPoweredOn"), ("VMWARE-VMINFO-MIB", "vmwVmPoweredOff"), ("VMWARE-VMINFO-MIB", "vmwVmHBLost"), ("VMWARE-VMINFO-MIB", "vmwVmHBDetected"), ("VMWARE-VMINFO-MIB", "vmwVmSuspended"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vmwVmInfoNotificationGroup = vmwVmInfoNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: vmwVmInfoNotificationGroup.setDescription('Group of objects describing notifications (traps).')
vmwVmObsoleteGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6876, 2, 10, 2, 2, 3)).setObjects(("VMWARE-VMINFO-MIB", "vmwVmVMID"), ("VMWARE-VMINFO-MIB", "vmwVmNetConnType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vmwVmObsoleteGroup = vmwVmObsoleteGroup.setStatus('obsolete')
if mibBuilder.loadTexts: vmwVmObsoleteGroup.setDescription('Managed objects that should not be used.')
mibBuilder.exportSymbols("VMWARE-VMINFO-MIB", vmwVmHbaIdx=vmwVmHbaIdx, vmwVmNetVmIdx=vmwVmNetVmIdx, vmwVmInfoNotificationGroup=vmwVmInfoNotificationGroup, vmwHbaTgtTable=vmwHbaTgtTable, vmwVmGuestState=vmwVmGuestState, vmwVmHBDetected=vmwVmHBDetected, vmwVmTable=vmwVmTable, vmwVmInfoGroup=vmwVmInfoGroup, vmwVmHBLost=vmwVmHBLost, vmwVmConfigFile=vmwVmConfigFile, vmwVmGuestOS=vmwVmGuestOS, vmwVmMAC=vmwVmMAC, vmwVmInfoMIBConformance=vmwVmInfoMIBConformance, vmwVmNetNum=vmwVmNetNum, vmwCdromEntry=vmwCdromEntry, vmwVmPoweredOn=vmwVmPoweredOn, vmwVmVMID=vmwVmVMID, vmwVmCpus=vmwVmCpus, vmwHbaTgtVmIdx=vmwHbaTgtVmIdx, vmwFdVmIdx=vmwFdVmIdx, vmwCdromTable=vmwCdromTable, vmwCdVmIdx=vmwCdVmIdx, vmwVmNetName=vmwVmNetName, vmwVmInfoMIBGroups=vmwVmInfoMIBGroups, vmwVmMemSize=vmwVmMemSize, vmwHbaVmIdx=vmwHbaVmIdx, vmwVmID=vmwVmID, vmwVmInfoMIBCompliances=vmwVmInfoMIBCompliances, vmwVmNetTable=vmwVmNetTable, vmwVmState=vmwVmState, vmwVmNetConnected=vmwVmNetConnected, vmwVmHbaEntry=vmwVmHbaEntry, vmwHbaNum=vmwHbaNum, vmwFdConnected=vmwFdConnected, vmwResMIBBasicCompliance=vmwResMIBBasicCompliance, vmwCdromName=vmwCdromName, vmwVmInfoMIB=vmwVmInfoMIB, vmwFloppyTable=vmwFloppyTable, vmwVmDisplayName=vmwVmDisplayName, vmwVmHbaTable=vmwVmHbaTable, vmwVmNetConnType=vmwVmNetConnType, vmwHbaTgtEntry=vmwHbaTgtEntry, vmwFloppyEntry=vmwFloppyEntry, vmwVmIdx=vmwVmIdx, PYSNMP_MODULE_ID=vmwVmInfoMIB, vmwVmEntry=vmwVmEntry, vmwVmConfigFilePath=vmwVmConfigFilePath, vmwHbaTgtNum=vmwHbaTgtNum, vmwCdromConnected=vmwCdromConnected, vmwVmNetEntry=vmwVmNetEntry, vmwHbaTgtIdx=vmwHbaTgtIdx, vmwVmNetIdx=vmwVmNetIdx, vmwHbaVirtDev=vmwHbaVirtDev, vmwVmObsoleteGroup=vmwVmObsoleteGroup, vmwFdIdx=vmwFdIdx, vmwFdName=vmwFdName, vmwVmPoweredOff=vmwVmPoweredOff, vmwVmSuspended=vmwVmSuspended, vmwCdromIdx=vmwCdromIdx, vmwVmUUID=vmwVmUUID)
