#
# PySNMP MIB module EQLSTORAGECONTAINER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/equallogic/EQLSTORAGECONTAINER-MIB
# Produced by pysmi-1.1.12 at Mon Jun  3 11:15:03 2024
# On host fv-az525-771 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
UTFString, = mibBuilder.importSymbols("EQLGROUP-MIB", "UTFString")
eqlStoragePoolIndex, = mibBuilder.importSymbols("EQLSTORAGEPOOL-MIB", "eqlStoragePoolIndex")
eqliscsiLocalMemberId, EQL2PartRowPointerStr = mibBuilder.importSymbols("EQLVOLUME-MIB", "eqliscsiLocalMemberId", "EQL2PartRowPointerStr")
equalLogic, = mibBuilder.importSymbols("EQUALLOGIC-SMI", "equalLogic")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Gauge32, NotificationType, ObjectIdentity, Counter32, Counter64, Integer32, Bits, Unsigned32, enterprises, ModuleIdentity, TimeTicks, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "NotificationType", "ObjectIdentity", "Counter32", "Counter64", "Integer32", "Bits", "Unsigned32", "enterprises", "ModuleIdentity", "TimeTicks", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "iso")
TextualConvention, DateAndTime, TruthValue, RowPointer, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DateAndTime", "TruthValue", "RowPointer", "RowStatus", "DisplayString")
eqlStorageContainerModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 12740, 25))
eqlStorageContainerModule.setRevisions(('2012-06-20 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: eqlStorageContainerModule.setRevisionsDescriptions(('Initial revision',))
if mibBuilder.loadTexts: eqlStorageContainerModule.setLastUpdated('201503171528Z')
if mibBuilder.loadTexts: eqlStorageContainerModule.setOrganization('EqualLogic Inc.')
if mibBuilder.loadTexts: eqlStorageContainerModule.setContactInfo('Contact: Customer Support\n         Postal:  Dell Inc\n                  300 Innovative Way, Suite 301, Nashua, NH 03062\n         Tel:     +1 603-579-9762\n         E-mail:  US-NH-CS-TechnicalSupport@dell.com\n         WEB:     www.equallogic.com')
if mibBuilder.loadTexts: eqlStorageContainerModule.setDescription('Storage Array Storage Container information \n\n        Copyright (c) 2012 by Dell, Inc. \n        \n        All rights reserved.  This software may not be copied, disclosed, \n        transferred, or used except in accordance with a license granted \n        by Dell, Inc.  This software embodies proprietary information \n        and trade secrets of Dell, Inc. \n        ')
eqlStorageContainerObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 12740, 25, 1))
eqlStorageContainerNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 12740, 25, 2))
eqlStorageContainerConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 12740, 25, 3))
class Unsigned64(TextualConvention, Counter64):
    description = 'A non-negative 64-bit bit integer, without counter\n            semantics.'
    status = 'current'

eqlStorageContainerTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 25, 1, 1), )
if mibBuilder.loadTexts: eqlStorageContainerTable.setStatus('current')
if mibBuilder.loadTexts: eqlStorageContainerTable.setDescription('EqualLogic-Persistent StorageContainerTable.\n                     This table contains a list of Storage Containers in a group and their attributes.\n                     TimeoutCreate:60 TimeoutDelete:60')
eqlStorageContainerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 25, 1, 1, 1), ).setIndexNames((0, "EQLVOLUME-MIB", "eqliscsiLocalMemberId"), (0, "EQLSTORAGECONTAINER-MIB", "eqlStorageContainerIndex"))
if mibBuilder.loadTexts: eqlStorageContainerEntry.setStatus('current')
if mibBuilder.loadTexts: eqlStorageContainerEntry.setDescription('An entry (row) containing Storage Container info.')
eqlStorageContainerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 25, 1, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: eqlStorageContainerIndex.setStatus('current')
if mibBuilder.loadTexts: eqlStorageContainerIndex.setDescription('This field specifies a unique index for identifying a Storage Container.')
eqlStorageContainerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 25, 1, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlStorageContainerRowStatus.setStatus('current')
if mibBuilder.loadTexts: eqlStorageContainerRowStatus.setDescription('This field is used to indicate the status of the entry i.e. whether the entry is active or not.')
eqlStorageContainerUuid = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 25, 1, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStorageContainerUuid.setStatus('current')
if mibBuilder.loadTexts: eqlStorageContainerUuid.setDescription('EQL-SECONDARY-KEY\n                     This field is for internal use only.It stores the UUID for the storage container. \n                     The UUID is generated by the system.')
eqlStorageContainerName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 25, 1, 1, 1, 4), UTFString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlStorageContainerName.setStatus('current')
if mibBuilder.loadTexts: eqlStorageContainerName.setDescription('This field specifies a user friendly name for a Storage Container.\n                     The name must be unique within a group.\n                     The name must not contain spaces or special characters.\n                     The name can be up to 64 characters in length. There is no default.')
eqlStorageContainerLookupName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 25, 1, 1, 1, 5), UTFString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStorageContainerLookupName.setStatus('current')
if mibBuilder.loadTexts: eqlStorageContainerLookupName.setDescription('EQL-SECONDARY-KEY\n                     This field specifies a string-prepped version of the Storage Container name, used for lookups.\n                     The name must be unique within a group.\n                     The name must not contain spaces or special characters.\n                     The name can be up to 64 characters in length. There is no default.')
eqlStorageContainerDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 25, 1, 1, 1, 6), UTFString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlStorageContainerDescription.setStatus('current')
if mibBuilder.loadTexts: eqlStorageContainerDescription.setDescription('This field specifies a descriptive string that provides details about the storage container.\n                     The description can be up to 128 characters. There is no default value.')
eqlStorageContainerLogicalLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 25, 1, 1, 1, 7), Unsigned64().clone(8589934592)).setUnits('MB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlStorageContainerLogicalLimit.setStatus('current')
if mibBuilder.loadTexts: eqlStorageContainerLogicalLimit.setDescription('This field specifies the Storage Container *logical* limit in MB. There is no default.\n                     It should be larger than the physical size, as configured for this Storage Container.')
eqlStorageContainerStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 25, 1, 2), )
if mibBuilder.loadTexts: eqlStorageContainerStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: eqlStorageContainerStatisticsTable.setDescription('EqualLogic-Dynamic StorageContainerStatisticsTable.\n                     This table contains the statistics of the storage containers within an EQL group.')
eqlStorageContainerStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 25, 1, 2, 1), )
eqlStorageContainerEntry.registerAugmentions(("EQLSTORAGECONTAINER-MIB", "eqlStorageContainerStatisticsEntry"))
eqlStorageContainerStatisticsEntry.setIndexNames(*eqlStorageContainerEntry.getIndexNames())
if mibBuilder.loadTexts: eqlStorageContainerStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: eqlStorageContainerStatisticsEntry.setDescription('An entry (row) containing Storage Container statistics.')
eqlStorageContainerStatisticsLogicalUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 25, 1, 2, 1, 1), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStorageContainerStatisticsLogicalUsed.setStatus('current')
if mibBuilder.loadTexts: eqlStorageContainerStatisticsLogicalUsed.setDescription('This field specifies how many MB of Logical Space is \n                     is allocated from this Storage Container.\n                     This is a dynamic value, it is not Administrator settable.')
eqlStorageContainerStatisticsLogicalFree = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 25, 1, 2, 1, 2), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStorageContainerStatisticsLogicalFree.setStatus('current')
if mibBuilder.loadTexts: eqlStorageContainerStatisticsLogicalFree.setDescription('This field specifies how many MB of Logical Space \n                     is free within this Storage Container.\n                     This is a dynamic value, it is not Administrator settable.')
eqlStorageContainerStatisticsPhysicalUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 25, 1, 2, 1, 3), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStorageContainerStatisticsPhysicalUsed.setStatus('current')
if mibBuilder.loadTexts: eqlStorageContainerStatisticsPhysicalUsed.setDescription('This field specifies how many MB of Physical Space \n                     is allocated from this Storage Container.\n                     This is a dynamic value, it is not Administrator settable.')
eqlStorageContainerStatisticsPhysicalFree = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 25, 1, 2, 1, 4), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStorageContainerStatisticsPhysicalFree.setStatus('current')
if mibBuilder.loadTexts: eqlStorageContainerStatisticsPhysicalFree.setDescription('This field specifies how many MB of Physical Space \n                     is free within this Storage Container.\n                     This is a dynamic value, it is not Administrator settable.')
eqlStorageContainerStatisticsThinProvFree = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 25, 1, 2, 1, 5), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStorageContainerStatisticsThinProvFree.setStatus('current')
if mibBuilder.loadTexts: eqlStorageContainerStatisticsThinProvFree.setDescription('This field specifies how many MB of the Thin Provision Reserved \n                     Physical Space is free within this Storage Container.\n                     This is a dynamic value, it is not Administrator setable.')
eqlStorageContainerStatisticsVvolsBound = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 25, 1, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStorageContainerStatisticsVvolsBound.setStatus('current')
if mibBuilder.loadTexts: eqlStorageContainerStatisticsVvolsBound.setDescription('The value of this object represents number of vvols within\n                     the storage container that are bound.')
eqlStorageContainerStatisticsSVCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 25, 1, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStorageContainerStatisticsSVCount.setStatus('current')
if mibBuilder.loadTexts: eqlStorageContainerStatisticsSVCount.setDescription('The value of this object represents number of shared \n                     volumes for this storage container.')
eqlStorageContainerStatisticsSVSCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 25, 1, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStorageContainerStatisticsSVSCount.setStatus('current')
if mibBuilder.loadTexts: eqlStorageContainerStatisticsSVSCount.setDescription('The value of this object represents number of shared\n                     volume sets for this storage container.')
eqlStorageContainerStatisticsThinProvisioned = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 25, 1, 2, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStorageContainerStatisticsThinProvisioned.setStatus('current')
if mibBuilder.loadTexts: eqlStorageContainerStatisticsThinProvisioned.setDescription('Are the buckets in this Storage Container thin-provisioned.')
eqlStorageContainerStatisticsVvolsOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 25, 1, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStorageContainerStatisticsVvolsOnline.setStatus('current')
if mibBuilder.loadTexts: eqlStorageContainerStatisticsVvolsOnline.setDescription('The value of this object represents number of vvols within\n                     the storage container that are online.')
eqlStorageBucketTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 25, 1, 3), )
if mibBuilder.loadTexts: eqlStorageBucketTable.setStatus('current')
if mibBuilder.loadTexts: eqlStorageBucketTable.setDescription('EqualLogic-Persistent StorageBucket Table.\n                     This table contains a list of Storage Buckets in a group and their attributes.\n                     TimeoutCreate:60 TimeoutDelete:60')
eqlStorageBucketEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 25, 1, 3, 1), ).setIndexNames((0, "EQLVOLUME-MIB", "eqliscsiLocalMemberId"), (0, "EQLSTORAGECONTAINER-MIB", "eqlStorageBucketIndex"))
if mibBuilder.loadTexts: eqlStorageBucketEntry.setStatus('current')
if mibBuilder.loadTexts: eqlStorageBucketEntry.setDescription('An entry (row) containing Storage Bucket info.')
eqlStorageBucketIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 25, 1, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: eqlStorageBucketIndex.setStatus('current')
if mibBuilder.loadTexts: eqlStorageBucketIndex.setDescription('This field specifies a unique index for identifying a Storage Bucket.')
eqlStorageBucketRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 25, 1, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlStorageBucketRowStatus.setStatus('current')
if mibBuilder.loadTexts: eqlStorageBucketRowStatus.setDescription('This field is used to indicate the status of this entry i.e. whether the entry is active or not.')
eqlStorageBucketName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 25, 1, 3, 1, 3), UTFString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlStorageBucketName.setStatus('current')
if mibBuilder.loadTexts: eqlStorageBucketName.setDescription('This field specifies a user friendly name for a Storage Bucket.\n                     The name must be unique within a group.\n                     The name must not contain spaces or special characters.\n                     The name can be up to 64 characters in length. There is no default.')
eqlStorageBucketLookupName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 25, 1, 3, 1, 4), UTFString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStorageBucketLookupName.setStatus('current')
if mibBuilder.loadTexts: eqlStorageBucketLookupName.setDescription('EQL-SECONDARY-KEY\n                     This field specifies a string-prepped version of the Storage Bucket name, used for lookups.\n                     The name must be unique within a group.\n                     The name must not contain spaces or special characters.\n                     The name can be up to 64 characters in length. There is no default.')
eqlStorageBucketUuid = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 25, 1, 3, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStorageBucketUuid.setStatus('current')
if mibBuilder.loadTexts: eqlStorageBucketUuid.setDescription('This is the unique identifier for the Storage Bucket, used in interacting with IOM.')
eqlStorageBucketPhysicalSize = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 25, 1, 3, 1, 6), Unsigned64()).setUnits('MB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlStorageBucketPhysicalSize.setStatus('current')
if mibBuilder.loadTexts: eqlStorageBucketPhysicalSize.setDescription('This field specifies the Storage Bucket *physical* size in MB. There is no default.\n                     It will be rounded up to the nearest increment of one page (15MB).  \n                     It should be smaller than the logical size, as configured for this Storage Bucket.')
eqlStorageBucketThinProvision = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 25, 1, 3, 1, 7), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlStorageBucketThinProvision.setStatus('current')
if mibBuilder.loadTexts: eqlStorageBucketThinProvision.setDescription('This field specifies if the StorageBucket is enabled for Thin Provisioning.')
eqlStorageBucketThinMinReserve = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 25, 1, 3, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlStorageBucketThinMinReserve.setStatus('current')
if mibBuilder.loadTexts: eqlStorageBucketThinMinReserve.setDescription('This field specifies the amount of pool free space that is currently reserved \n                     for this Thin Provisioned StorageBucket configured as a percentage of eqlStorageBucketPhysicalSize.')
eqlStorageBucketThinMaxGrow = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 25, 1, 3, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(100)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlStorageBucketThinMaxGrow.setStatus('current')
if mibBuilder.loadTexts: eqlStorageBucketThinMaxGrow.setDescription('This field specifies the amount of pool space that the storage bucket can grow to within the pool.  \n                     This field is configured as a percentage of eqlStorageBucketPhysicalSize.')
eqlStorageBucketFreeWarnPercentage = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 25, 1, 3, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlStorageBucketFreeWarnPercentage.setStatus('current')
if mibBuilder.loadTexts: eqlStorageBucketFreeWarnPercentage.setDescription("This field is configured as a percentage of the eqlStorageBucketPhysicalSize for thick \n                     provisioned volumes, but as a percentage of eqlStorageBucketThinMaxGrow for thin provisioned\n                     volumes.  It is expected that IOM will raise a warning when the bucket's free space reaches this\n                     value.  For thin provisioned volumes, it is expected that if the bucket's containing pool \n                     reaches this threshold (in terms of free pages) the warning will also be issued.")
eqlParentStorageContainerPointer = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 25, 1, 3, 1, 11), EQL2PartRowPointerStr()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlParentStorageContainerPointer.setStatus('current')
if mibBuilder.loadTexts: eqlParentStorageContainerPointer.setDescription('This field specifies the row in the Storage Container table of the parent\n                     Storage Container for this Storage Bucket.  If this value is null then the \n                     Storage Bucket is unassigned.')
eqlParentStoragePoolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 25, 1, 3, 1, 12), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlParentStoragePoolIndex.setStatus('current')
if mibBuilder.loadTexts: eqlParentStoragePoolIndex.setDescription('This field specifies the index of the Storage Pool in which the bucket is placed.')
eqlStorageBucketDynamicConfigTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 25, 1, 4), )
if mibBuilder.loadTexts: eqlStorageBucketDynamicConfigTable.setStatus('current')
if mibBuilder.loadTexts: eqlStorageBucketDynamicConfigTable.setDescription('EqualLogic-Persistent Table for storing in database the Storage Bucket attributes that can \n                     independently change.  This table is owned by MgmtExec, and is read/written upon request of IOM.')
eqlStorageBucketDynamicConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 25, 1, 4, 1), ).setIndexNames((0, "EQLVOLUME-MIB", "eqliscsiLocalMemberId"), (0, "EQLSTORAGECONTAINER-MIB", "eqlStorageBucketIndex"))
if mibBuilder.loadTexts: eqlStorageBucketDynamicConfigEntry.setStatus('current')
if mibBuilder.loadTexts: eqlStorageBucketDynamicConfigEntry.setDescription('An entry (row) containing status for Storage Bucket dynamic config. The values in this \n                    table are not user configurable.')
eqlStorageBucketDynamicReservePages = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 25, 1, 4, 1, 1), Counter64()).setUnits('pages').setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStorageBucketDynamicReservePages.setStatus('current')
if mibBuilder.loadTexts: eqlStorageBucketDynamicReservePages.setDescription('This field specifies the amount of pool space that is currently reserved \n                     for this Storage Bucket. It is valid for both thick and thin provisioned buckets.')
eqlStorageBucketFreeWarnInUsePageCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 25, 1, 4, 1, 2), Counter64()).setUnits('pages').setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStorageBucketFreeWarnInUsePageCount.setStatus('current')
if mibBuilder.loadTexts: eqlStorageBucketFreeWarnInUsePageCount.setDescription('This field specifies the number of Storage Bucket pages that were in use when the\n                     last free-warn event for the bucket was received from IOM. It is valid for both thick \n                     and thin provisioned buckets.')
eqlStorageBucketMaxResvInUsePageCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 25, 1, 4, 1, 3), Counter64()).setUnits('pages').setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStorageBucketMaxResvInUsePageCount.setStatus('current')
if mibBuilder.loadTexts: eqlStorageBucketMaxResvInUsePageCount.setDescription('This field specifies the number of Storage Bucket pages that were in use when the\n                     last max-resv event for the bucket was received from IOM. It is valid for both thick \n                     and thin provisioned buckets.')
eqlStorageBucketFreeWarnThresholdPageCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 25, 1, 4, 1, 4), Counter64()).setUnits('pages').setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStorageBucketFreeWarnThresholdPageCount.setStatus('current')
if mibBuilder.loadTexts: eqlStorageBucketFreeWarnThresholdPageCount.setDescription('This field holds the value of the free-warn-threshold page count as it was set when\n                     the last free-warn event for the bucket was received from IOM. It is valid for both thick \n                     and thin provisioned buckets.')
eqlStorageBucketStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 25, 1, 5), )
if mibBuilder.loadTexts: eqlStorageBucketStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: eqlStorageBucketStatisticsTable.setDescription('EqualLogic-Dynamic Storage StorageBucketStatisticsTable.\n                     This table contains the statistics of the storage buckets within a group.')
eqlStorageBucketStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 25, 1, 5, 1), )
eqlStorageBucketEntry.registerAugmentions(("EQLSTORAGECONTAINER-MIB", "eqlStorageBucketStatisticsEntry"))
eqlStorageBucketStatisticsEntry.setIndexNames(*eqlStorageBucketEntry.getIndexNames())
if mibBuilder.loadTexts: eqlStorageBucketStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: eqlStorageBucketStatisticsEntry.setDescription('An entry (row) containing Storage Bucket statistics.')
eqlStorageBucketStatisticsPhysicalUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 25, 1, 5, 1, 1), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStorageBucketStatisticsPhysicalUsed.setStatus('current')
if mibBuilder.loadTexts: eqlStorageBucketStatisticsPhysicalUsed.setDescription('This field specifies how many MB of Physical Space \n                     is allocated from this Storage Bucket.\n                     This is a dynamic value, it is not Administrator settable.')
eqlStorageBucketStatisticsPhysicalFree = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 25, 1, 5, 1, 2), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStorageBucketStatisticsPhysicalFree.setStatus('current')
if mibBuilder.loadTexts: eqlStorageBucketStatisticsPhysicalFree.setDescription('This field specifies how many MB of Physical Space \n                     is free within this Storage Bucket.\n                     This is a dynamic value, it is not Administrator settable.')
eqlStorageBucketStatisticsThinProvFree = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 25, 1, 5, 1, 3), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStorageBucketStatisticsThinProvFree.setStatus('current')
if mibBuilder.loadTexts: eqlStorageBucketStatisticsThinProvFree.setDescription('This field specifies how many MB of the Thin Provision Minimum Reserve \n                     Physical Space is free within this Storage Bucket.\n                     This is a dynamic value, it is not Administrator settable.')
eqlStorageBucketStatisticsVvolsBound = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 25, 1, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStorageBucketStatisticsVvolsBound.setStatus('current')
if mibBuilder.loadTexts: eqlStorageBucketStatisticsVvolsBound.setDescription('The value of this object represents number of vvols within\n                     the storage container that are bound.')
eqlStorageBucketStatisticsSVCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 25, 1, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStorageBucketStatisticsSVCount.setStatus('current')
if mibBuilder.loadTexts: eqlStorageBucketStatisticsSVCount.setDescription('The value of this object represents number of shared \n                     volumes for this storage bucket.')
eqlStorageBucketStatisticsSVSCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 25, 1, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStorageBucketStatisticsSVSCount.setStatus('current')
if mibBuilder.loadTexts: eqlStorageBucketStatisticsSVSCount.setDescription('The value of this object represents number of shared\n                     volume sets for this storage bucket.')
eqlStorageBucketStatisticsVvolsOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 25, 1, 5, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStorageBucketStatisticsVvolsOnline.setStatus('current')
if mibBuilder.loadTexts: eqlStorageBucketStatisticsVvolsOnline.setDescription('The value of this object represents number of vvols within\n                     the storage container that are online.')
mibBuilder.exportSymbols("EQLSTORAGECONTAINER-MIB", eqlStorageBucketFreeWarnInUsePageCount=eqlStorageBucketFreeWarnInUsePageCount, eqlStorageContainerStatisticsVvolsOnline=eqlStorageContainerStatisticsVvolsOnline, eqlStorageContainerStatisticsThinProvFree=eqlStorageContainerStatisticsThinProvFree, eqlStorageContainerStatisticsVvolsBound=eqlStorageContainerStatisticsVvolsBound, eqlStorageContainerLookupName=eqlStorageContainerLookupName, eqlStorageBucketStatisticsSVCount=eqlStorageBucketStatisticsSVCount, eqlStorageContainerStatisticsTable=eqlStorageContainerStatisticsTable, eqlStorageContainerStatisticsPhysicalFree=eqlStorageContainerStatisticsPhysicalFree, eqlStorageBucketFreeWarnPercentage=eqlStorageBucketFreeWarnPercentage, eqlStorageContainerModule=eqlStorageContainerModule, eqlParentStorageContainerPointer=eqlParentStorageContainerPointer, eqlStorageBucketName=eqlStorageBucketName, eqlStorageBucketDynamicConfigEntry=eqlStorageBucketDynamicConfigEntry, eqlStorageBucketStatisticsThinProvFree=eqlStorageBucketStatisticsThinProvFree, eqlStorageBucketStatisticsPhysicalUsed=eqlStorageBucketStatisticsPhysicalUsed, eqlStorageBucketIndex=eqlStorageBucketIndex, eqlStorageContainerRowStatus=eqlStorageContainerRowStatus, eqlStorageContainerNotifications=eqlStorageContainerNotifications, eqlStorageBucketLookupName=eqlStorageBucketLookupName, eqlParentStoragePoolIndex=eqlParentStoragePoolIndex, eqlStorageContainerTable=eqlStorageContainerTable, eqlStorageContainerStatisticsLogicalFree=eqlStorageContainerStatisticsLogicalFree, eqlStorageContainerStatisticsThinProvisioned=eqlStorageContainerStatisticsThinProvisioned, eqlStorageContainerObjects=eqlStorageContainerObjects, eqlStorageContainerStatisticsSVSCount=eqlStorageContainerStatisticsSVSCount, eqlStorageBucketDynamicConfigTable=eqlStorageBucketDynamicConfigTable, eqlStorageBucketPhysicalSize=eqlStorageBucketPhysicalSize, eqlStorageContainerStatisticsSVCount=eqlStorageContainerStatisticsSVCount, eqlStorageBucketThinMaxGrow=eqlStorageBucketThinMaxGrow, eqlStorageBucketStatisticsTable=eqlStorageBucketStatisticsTable, eqlStorageContainerUuid=eqlStorageContainerUuid, eqlStorageContainerDescription=eqlStorageContainerDescription, eqlStorageBucketRowStatus=eqlStorageBucketRowStatus, eqlStorageBucketStatisticsPhysicalFree=eqlStorageBucketStatisticsPhysicalFree, eqlStorageBucketMaxResvInUsePageCount=eqlStorageBucketMaxResvInUsePageCount, eqlStorageBucketStatisticsVvolsOnline=eqlStorageBucketStatisticsVvolsOnline, eqlStorageBucketThinMinReserve=eqlStorageBucketThinMinReserve, eqlStorageBucketFreeWarnThresholdPageCount=eqlStorageBucketFreeWarnThresholdPageCount, eqlStorageBucketUuid=eqlStorageBucketUuid, eqlStorageContainerStatisticsEntry=eqlStorageContainerStatisticsEntry, eqlStorageContainerName=eqlStorageContainerName, eqlStorageContainerStatisticsLogicalUsed=eqlStorageContainerStatisticsLogicalUsed, eqlStorageBucketDynamicReservePages=eqlStorageBucketDynamicReservePages, eqlStorageContainerConformance=eqlStorageContainerConformance, eqlStorageBucketTable=eqlStorageBucketTable, eqlStorageContainerIndex=eqlStorageContainerIndex, eqlStorageBucketStatisticsEntry=eqlStorageBucketStatisticsEntry, eqlStorageBucketEntry=eqlStorageBucketEntry, eqlStorageBucketStatisticsVvolsBound=eqlStorageBucketStatisticsVvolsBound, Unsigned64=Unsigned64, eqlStorageContainerEntry=eqlStorageContainerEntry, PYSNMP_MODULE_ID=eqlStorageContainerModule, eqlStorageBucketStatisticsSVSCount=eqlStorageBucketStatisticsSVSCount, eqlStorageContainerStatisticsPhysicalUsed=eqlStorageContainerStatisticsPhysicalUsed, eqlStorageContainerLogicalLimit=eqlStorageContainerLogicalLimit, eqlStorageBucketThinProvision=eqlStorageBucketThinProvision)
