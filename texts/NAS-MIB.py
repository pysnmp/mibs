#
# PySNMP MIB module NAS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/qnap/NAS-MIB
# Produced by pysmi-1.1.12 at Tue Dec  3 12:20:00 2024
# On host fv-az573-178 platform Linux version 6.5.0-1025-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, ObjectIdentity, IpAddress, MibIdentifier, Counter64, Counter32, Unsigned32, iso, enterprises, NotificationType, Gauge32, TimeTicks, ModuleIdentity, Integer32, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "ObjectIdentity", "IpAddress", "MibIdentifier", "Counter64", "Counter32", "Unsigned32", "iso", "enterprises", "NotificationType", "Gauge32", "TimeTicks", "ModuleIdentity", "Integer32", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class DisplayString(OctetString):
    pass

storage = MibIdentifier((1, 3, 6, 1, 4, 1, 24681))
storageSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 24681, 1))
systemEventMsg = MibIdentifier((1, 3, 6, 1, 4, 1, 24681, 1, 1))
eventInformMsg = MibScalar((1, 3, 6, 1, 4, 1, 24681, 1, 1, 101), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventInformMsg.setStatus('current')
if mibBuilder.loadTexts: eventInformMsg.setDescription('Information event of NAS system.')
eventWarningMsg = MibScalar((1, 3, 6, 1, 4, 1, 24681, 1, 1, 102), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventWarningMsg.setStatus('current')
if mibBuilder.loadTexts: eventWarningMsg.setDescription('Warning event of NAS system.')
eventErrorMsg = MibScalar((1, 3, 6, 1, 4, 1, 24681, 1, 1, 103), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventErrorMsg.setStatus('current')
if mibBuilder.loadTexts: eventErrorMsg.setDescription('Error event of NAS system.')
systemTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 24681, 1, 10))
eventInform = NotificationType((1, 3, 6, 1, 4, 1, 24681, 1, 10) + (0,1)).setObjects(("NAS-MIB", "eventInformMsg"))
if mibBuilder.loadTexts: eventInform.setDescription('Info: %s')
eventWarning = NotificationType((1, 3, 6, 1, 4, 1, 24681, 1, 10) + (0,2)).setObjects(("NAS-MIB", "eventWarningMsg"))
if mibBuilder.loadTexts: eventWarning.setDescription('Warn: %s')
eventError = NotificationType((1, 3, 6, 1, 4, 1, 24681, 1, 10) + (0,4)).setObjects(("NAS-MIB", "eventErrorMsg"))
if mibBuilder.loadTexts: eventError.setDescription('Error: %s')
systemInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 24681, 1, 2))
systemCPU_Usage = MibScalar((1, 3, 6, 1, 4, 1, 24681, 1, 2, 1), DisplayString()).setLabel("systemCPU-Usage").setMaxAccess("readonly")
if mibBuilder.loadTexts: systemCPU_Usage.setStatus('current')
if mibBuilder.loadTexts: systemCPU_Usage.setDescription('System CPU usage')
systemTotalMem = MibScalar((1, 3, 6, 1, 4, 1, 24681, 1, 2, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemTotalMem.setStatus('current')
if mibBuilder.loadTexts: systemTotalMem.setDescription('System total memory')
systemFreeMem = MibScalar((1, 3, 6, 1, 4, 1, 24681, 1, 2, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemFreeMem.setStatus('current')
if mibBuilder.loadTexts: systemFreeMem.setDescription('System free memory')
systemUptime = MibScalar((1, 3, 6, 1, 4, 1, 24681, 1, 2, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemUptime.setStatus('current')
if mibBuilder.loadTexts: systemUptime.setDescription('The amount of time since this host was last\n         initialized.  Note that this is different from\n         sysUpTime in the SNMPv2-MIB [RFC1907] because\n         sysUpTime is the uptime of the network management\n         portion of the system.')
cpu_Temperature = MibScalar((1, 3, 6, 1, 4, 1, 24681, 1, 2, 5), DisplayString()).setLabel("cpu-Temperature").setMaxAccess("readonly")
if mibBuilder.loadTexts: cpu_Temperature.setStatus('current')
if mibBuilder.loadTexts: cpu_Temperature.setDescription('CPU temperature')
systemTemperature = MibScalar((1, 3, 6, 1, 4, 1, 24681, 1, 2, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemTemperature.setStatus('current')
if mibBuilder.loadTexts: systemTemperature.setDescription('System temperature')
ifNumber = MibScalar((1, 3, 6, 1, 4, 1, 24681, 1, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifNumber.setStatus('mandatory')
if mibBuilder.loadTexts: ifNumber.setDescription('The number of network interfaces (regardless of\n         their current state) present on this system.')
systemIfTable = MibTable((1, 3, 6, 1, 4, 1, 24681, 1, 2, 9), )
if mibBuilder.loadTexts: systemIfTable.setStatus('mandatory')
if mibBuilder.loadTexts: systemIfTable.setDescription('A list of interface entries.  The number of\n         entries is given by the value of IfNumber.')
ifEntry = MibTableRow((1, 3, 6, 1, 4, 1, 24681, 1, 2, 9, 1), ).setIndexNames((0, "NAS-MIB", "ifIndex"))
if mibBuilder.loadTexts: ifEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ifEntry.setDescription('An interface entry containing objects at the\n         subnetwork layer and below for a particular\n         interface.')
ifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 2, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ifIndex.setDescription("A unique value for each interface.  Its value\n         ranges between 1 and the value of IfNumber.  The\n         value for each interface must remain constant at\n         least from one re-initialization of the entity's\n         network management system to the next re-\n         initialization.")
ifDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 2, 9, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifDescr.setStatus('mandatory')
if mibBuilder.loadTexts: ifDescr.setDescription('A textual string containing information about the\n         interface.  This string should include the name of\n         the manufacturer, the product name and the version\n         of the hardware interface.')
ifPacketsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 2, 9, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifPacketsReceived.setStatus('mandatory')
if mibBuilder.loadTexts: ifPacketsReceived.setDescription('System packets received.')
ifPacketsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 2, 9, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifPacketsSent.setStatus('mandatory')
if mibBuilder.loadTexts: ifPacketsSent.setDescription('System packets sent.')
ifErrorPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 2, 9, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifErrorPackets.setStatus('mandatory')
if mibBuilder.loadTexts: ifErrorPackets.setDescription('System error packets.')
hdNumber = MibScalar((1, 3, 6, 1, 4, 1, 24681, 1, 2, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdNumber.setStatus('mandatory')
if mibBuilder.loadTexts: hdNumber.setDescription('The number of hard drive slots.')
systemHdTable = MibTable((1, 3, 6, 1, 4, 1, 24681, 1, 2, 11), )
if mibBuilder.loadTexts: systemHdTable.setStatus('mandatory')
if mibBuilder.loadTexts: systemHdTable.setDescription('A list of interface entries.  The number of\n         entries is given by the value of HdNumber.')
hdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 24681, 1, 2, 11, 1), ).setIndexNames((0, "NAS-MIB", "hdIndex"))
if mibBuilder.loadTexts: hdEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hdEntry.setDescription('An interface entry containing objects at the\n         subnetwork layer and below for a particular\n         interface.')
hdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 2, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdIndex.setStatus('mandatory')
if mibBuilder.loadTexts: hdIndex.setDescription("A unique value for each hard disk.  Its value\n         ranges between 1 and the value of IfNumber.  The\n         value for each interface must remain constant at\n         least from one re-initialization of the entity's\n         network management system to the next re-\n         initialization.")
hdDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 2, 11, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdDescr.setStatus('mandatory')
if mibBuilder.loadTexts: hdDescr.setDescription('A textual string containing information about the\n         interface.  This string should include the name of\n         the manufacturer, the product name and the version\n         of the hardware interface.')
hdTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 2, 11, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdTemperature.setStatus('mandatory')
if mibBuilder.loadTexts: hdTemperature.setDescription('Hard disk temperature.')
hdStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 2, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, -5, -6, -9, -4))).clone(namedValues=NamedValues(("ready", 0), ("noDisk", -5), ("invalid", -6), ("rwError", -9), ("unknown", -4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdStatus.setStatus('mandatory')
if mibBuilder.loadTexts: hdStatus.setDescription('HDD status. 0:not availible, 1:availible.')
hdModel = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 2, 11, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdModel.setStatus('mandatory')
if mibBuilder.loadTexts: hdModel.setDescription('Hard disk model.')
hdCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 2, 11, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdCapacity.setStatus('mandatory')
if mibBuilder.loadTexts: hdCapacity.setDescription('Hard disk capacity.')
hdSmartInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 2, 11, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdSmartInfo.setStatus('mandatory')
if mibBuilder.loadTexts: hdSmartInfo.setDescription('Hard disk SMART information.')
modelName = MibScalar((1, 3, 6, 1, 4, 1, 24681, 1, 2, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modelName.setStatus('current')
if mibBuilder.loadTexts: modelName.setDescription('Model name')
hostName = MibScalar((1, 3, 6, 1, 4, 1, 24681, 1, 2, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostName.setStatus('current')
if mibBuilder.loadTexts: hostName.setDescription('Model name')
sysFanNumber = MibScalar((1, 3, 6, 1, 4, 1, 24681, 1, 2, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFanNumber.setStatus('mandatory')
if mibBuilder.loadTexts: sysFanNumber.setDescription('The number of system fan (regardless of\n         their current state) present on this system.')
systemFanTable = MibTable((1, 3, 6, 1, 4, 1, 24681, 1, 2, 15), )
if mibBuilder.loadTexts: systemFanTable.setStatus('mandatory')
if mibBuilder.loadTexts: systemFanTable.setDescription('A list of interface entries.  The number of\n         entries is given by the value of SysFanNumber.')
sysFanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 24681, 1, 2, 15, 1), ).setIndexNames((0, "NAS-MIB", "sysFanIndex"))
if mibBuilder.loadTexts: sysFanEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sysFanEntry.setDescription('An system fan entry containing objects at the\n         subnetwork layer and below for a particular\n         interface.')
sysFanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 2, 15, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFanIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sysFanIndex.setDescription("A unique value for each system fan. Its value\n         ranges between 1 and the value of SysFanNumber.  The\n         value for each interface must remain constant at\n         least from one re-initialization of the entity's\n         network management system to the next re-\n         initialization.")
sysFanDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 2, 15, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFanDescr.setStatus('mandatory')
if mibBuilder.loadTexts: sysFanDescr.setDescription('A textual string containing information about the\n         interface.  This string should include the name of\n         the manufacturer, the product name and the version\n         of the hardware interface.')
sysFanSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 2, 15, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFanSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: sysFanSpeed.setDescription('System fan speed.')
sysVolumeNumber = MibScalar((1, 3, 6, 1, 4, 1, 24681, 1, 2, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVolumeNumber.setStatus('mandatory')
if mibBuilder.loadTexts: sysVolumeNumber.setDescription('The number of system volumes (regardless of\n         their current state) present on this system.')
systemVolumeTable = MibTable((1, 3, 6, 1, 4, 1, 24681, 1, 2, 17), )
if mibBuilder.loadTexts: systemVolumeTable.setStatus('mandatory')
if mibBuilder.loadTexts: systemVolumeTable.setDescription('A list of volume entries.  The number of\n         entries is given by the value of SysVolumeNumber.')
sysVolumeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 24681, 1, 2, 17, 1), ).setIndexNames((0, "NAS-MIB", "sysVolumeIndex"))
if mibBuilder.loadTexts: sysVolumeEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sysVolumeEntry.setDescription('An system volume entry')
sysVolumeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 2, 17, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVolumeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sysVolumeIndex.setDescription("A unique value for each system volume. Its value\n         ranges between 1 and the value of SysVolumeNumber.  The\n         value for each volume must remain constant at\n         least from one re-initialization of the entity's\n         volume system to the next re-initialization.")
sysVolumeDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 2, 17, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVolumeDescr.setStatus('mandatory')
if mibBuilder.loadTexts: sysVolumeDescr.setDescription('A textual string containing information about the volume.')
sysVolumeFS = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 2, 17, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVolumeFS.setStatus('mandatory')
if mibBuilder.loadTexts: sysVolumeFS.setDescription('System Volume file system.')
sysVolumeTotalSize = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 2, 17, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVolumeTotalSize.setStatus('mandatory')
if mibBuilder.loadTexts: sysVolumeTotalSize.setDescription('System Volume total size.')
sysVolumeFreeSize = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 2, 17, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVolumeFreeSize.setStatus('mandatory')
if mibBuilder.loadTexts: sysVolumeFreeSize.setDescription('System Volume free size.')
sysVolumeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 2, 17, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVolumeStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sysVolumeStatus.setDescription('System Volume status.')
jBODInfo = MibScalar((1, 3, 6, 1, 4, 1, 24681, 1, 2, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jBODInfo.setStatus('mandatory')
if mibBuilder.loadTexts: jBODInfo.setDescription('The bitmap  of JBOD (regardless of\n         their current state) present on this system.')
jBODBitmap = MibScalar((1, 3, 6, 1, 4, 1, 24681, 1, 2, 18, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jBODBitmap.setStatus('mandatory')
if mibBuilder.loadTexts: jBODBitmap.setDescription('The bitmap  of JBOD (regardless of\n         their current state) present on this system.')
jBODInfos = MibTable((1, 3, 6, 1, 4, 1, 24681, 1, 2, 18, 2), )
if mibBuilder.loadTexts: jBODInfos.setStatus('mandatory')
if mibBuilder.loadTexts: jBODInfos.setDescription('A list of interface entries.  The number of\n         entries is given by the value of IfNumber.')
jBODInfosEntry = MibTableRow((1, 3, 6, 1, 4, 1, 24681, 1, 2, 18, 2, 1), ).setIndexNames((0, "NAS-MIB", "jBODid"))
if mibBuilder.loadTexts: jBODInfosEntry.setStatus('mandatory')
if mibBuilder.loadTexts: jBODInfosEntry.setDescription('An interface entry containing objects at the\n         subnetwork layer and below for a particular\n         interface.')
jBODid = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 2, 18, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jBODid.setStatus('mandatory')
if mibBuilder.loadTexts: jBODid.setDescription("A unique value for each JBOD. Its value\n         ranges between 1 and the value of IfNumber.  The\n         value for each interface must remain constant at\n         least from one re-initialization of the entity's\n         network management system to the next re-\n         initialization.")
jBODHdNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 2, 18, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jBODHdNumber.setStatus('mandatory')
if mibBuilder.loadTexts: jBODHdNumber.setDescription('JBOD Disk port.')
jBODHdTable1 = MibTable((1, 3, 6, 1, 4, 1, 24681, 1, 2, 18, 3), )
if mibBuilder.loadTexts: jBODHdTable1.setStatus('mandatory')
if mibBuilder.loadTexts: jBODHdTable1.setDescription('A list of interface entries.  The number of\n         entries is given by the value of IfNumber.')
jBODHdEntry1 = MibTableRow((1, 3, 6, 1, 4, 1, 24681, 1, 2, 18, 3, 1), ).setIndexNames((0, "NAS-MIB", "jBODHdIndex1"))
if mibBuilder.loadTexts: jBODHdEntry1.setStatus('mandatory')
if mibBuilder.loadTexts: jBODHdEntry1.setDescription('An interface entry containing objects at the\n         subnetwork layer and below for a particular\n         interface.')
jBODHdIndex1 = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 2, 18, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jBODHdIndex1.setStatus('mandatory')
if mibBuilder.loadTexts: jBODHdIndex1.setDescription("A unique value for each hard disk.  Its value\n         ranges between 1 and the value of IfNumber.  The\n         value for each interface must remain constant at\n         least from one re-initialization of the entity's\n         network management system to the next re-\n         initialization.")
jBODHdDescr1 = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 2, 18, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jBODHdDescr1.setStatus('mandatory')
if mibBuilder.loadTexts: jBODHdDescr1.setDescription('A textual string containing information about the\n         interface.  This string should include the name of\n         the manufacturer, the product name and the version\n         of the hardware interface.')
jBODHdTemperature1 = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 2, 18, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jBODHdTemperature1.setStatus('mandatory')
if mibBuilder.loadTexts: jBODHdTemperature1.setDescription('Hard disk temperature.')
jBODHdStatus1 = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 2, 18, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, -5, -6, -9, -4))).clone(namedValues=NamedValues(("ready", 0), ("noDisk", -5), ("invalid", -6), ("rwError", -9), ("unknown", -4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jBODHdStatus1.setStatus('mandatory')
if mibBuilder.loadTexts: jBODHdStatus1.setDescription('HDD status. 0:not availible, 1:availible.')
jBODHdModel1 = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 2, 18, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jBODHdModel1.setStatus('mandatory')
if mibBuilder.loadTexts: jBODHdModel1.setDescription('Hard disk model.')
jBODHdCapacity1 = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 2, 18, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jBODHdCapacity1.setStatus('mandatory')
if mibBuilder.loadTexts: jBODHdCapacity1.setDescription('Hard disk capacity.')
jBODHdSmartInfo1 = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 2, 18, 3, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jBODHdSmartInfo1.setStatus('mandatory')
if mibBuilder.loadTexts: jBODHdSmartInfo1.setDescription('Hard disk SMART information.')
jBODHdTable2 = MibTable((1, 3, 6, 1, 4, 1, 24681, 1, 2, 18, 4), )
if mibBuilder.loadTexts: jBODHdTable2.setStatus('mandatory')
if mibBuilder.loadTexts: jBODHdTable2.setDescription('A list of interface entries.  The number of\n         entries is given by the value of IfNumber.')
jBODHdEntry2 = MibTableRow((1, 3, 6, 1, 4, 1, 24681, 1, 2, 18, 4, 1), ).setIndexNames((0, "NAS-MIB", "jBODHdIndex2"))
if mibBuilder.loadTexts: jBODHdEntry2.setStatus('mandatory')
if mibBuilder.loadTexts: jBODHdEntry2.setDescription('An interface entry containing objects at the\n         subnetwork layer and below for a particular\n         interface.')
jBODHdIndex2 = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 2, 18, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jBODHdIndex2.setStatus('mandatory')
if mibBuilder.loadTexts: jBODHdIndex2.setDescription("A unique value for each hard disk.  Its value\n         ranges between 1 and the value of IfNumber.  The\n         value for each interface must remain constant at\n         least from one re-initialization of the entity's\n         network management system to the next re-\n         initialization.")
jBODHdDescr2 = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 2, 18, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jBODHdDescr2.setStatus('mandatory')
if mibBuilder.loadTexts: jBODHdDescr2.setDescription('A textual string containing information about the\n         interface.  This string should include the name of\n         the manufacturer, the product name and the version\n         of the hardware interface.')
jBODHdTemperature2 = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 2, 18, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jBODHdTemperature2.setStatus('mandatory')
if mibBuilder.loadTexts: jBODHdTemperature2.setDescription('Hard disk temperature.')
jBODHdStatus2 = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 2, 18, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, -5, -6, -9, -4))).clone(namedValues=NamedValues(("ready", 0), ("noDisk", -5), ("invalid", -6), ("rwError", -9), ("unknown", -4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jBODHdStatus2.setStatus('mandatory')
if mibBuilder.loadTexts: jBODHdStatus2.setDescription('HDD status. 0:not availible, 1:availible.')
jBODHdModel2 = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 2, 18, 4, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jBODHdModel2.setStatus('mandatory')
if mibBuilder.loadTexts: jBODHdModel2.setDescription('Hard disk model.')
jBODHdCapacity2 = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 2, 18, 4, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jBODHdCapacity2.setStatus('mandatory')
if mibBuilder.loadTexts: jBODHdCapacity2.setDescription('Hard disk capacity.')
jBODHdSmartInfo2 = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 2, 18, 4, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jBODHdSmartInfo2.setStatus('mandatory')
if mibBuilder.loadTexts: jBODHdSmartInfo2.setDescription('Hard disk SMART information.')
jBODHdTable3 = MibTable((1, 3, 6, 1, 4, 1, 24681, 1, 2, 18, 5), )
if mibBuilder.loadTexts: jBODHdTable3.setStatus('mandatory')
if mibBuilder.loadTexts: jBODHdTable3.setDescription('A list of interface entries.  The number of\n         entries is given by the value of IfNumber.')
jBODHdEntry3 = MibTableRow((1, 3, 6, 1, 4, 1, 24681, 1, 2, 18, 5, 1), ).setIndexNames((0, "NAS-MIB", "jBODHdIndex3"))
if mibBuilder.loadTexts: jBODHdEntry3.setStatus('mandatory')
if mibBuilder.loadTexts: jBODHdEntry3.setDescription('An interface entry containing objects at the\n         subnetwork layer and below for a particular\n         interface.')
jBODHdIndex3 = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 2, 18, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jBODHdIndex3.setStatus('mandatory')
if mibBuilder.loadTexts: jBODHdIndex3.setDescription("A unique value for each hard disk.  Its value\n         ranges between 1 and the value of IfNumber.  The\n         value for each interface must remain constant at\n         least from one re-initialization of the entity's\n         network management system to the next re-\n         initialization.")
jBODHdDescr3 = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 2, 18, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jBODHdDescr3.setStatus('mandatory')
if mibBuilder.loadTexts: jBODHdDescr3.setDescription('A textual string containing information about the\n         interface.  This string should include the name of\n         the manufacturer, the product name and the version\n         of the hardware interface.')
jBODHdTemperature3 = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 2, 18, 5, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jBODHdTemperature3.setStatus('mandatory')
if mibBuilder.loadTexts: jBODHdTemperature3.setDescription('Hard disk temperature.')
jBODHdStatus3 = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 2, 18, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, -5, -6, -9, -4))).clone(namedValues=NamedValues(("ready", 0), ("noDisk", -5), ("invalid", -6), ("rwError", -9), ("unknown", -4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jBODHdStatus3.setStatus('mandatory')
if mibBuilder.loadTexts: jBODHdStatus3.setDescription('HDD status. 0:not availible, 1:availible.')
jBODHdModel3 = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 2, 18, 5, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jBODHdModel3.setStatus('mandatory')
if mibBuilder.loadTexts: jBODHdModel3.setDescription('Hard disk model.')
jBODHdCapacity3 = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 2, 18, 5, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jBODHdCapacity3.setStatus('mandatory')
if mibBuilder.loadTexts: jBODHdCapacity3.setDescription('Hard disk capacity.')
jBODHdSmartInfo3 = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 2, 18, 5, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jBODHdSmartInfo3.setStatus('mandatory')
if mibBuilder.loadTexts: jBODHdSmartInfo3.setDescription('Hard disk SMART information.')
jBODHdTable4 = MibTable((1, 3, 6, 1, 4, 1, 24681, 1, 2, 18, 6), )
if mibBuilder.loadTexts: jBODHdTable4.setStatus('mandatory')
if mibBuilder.loadTexts: jBODHdTable4.setDescription('A list of interface entries.  The number of\n         entries is given by the value of IfNumber.')
jBODHdEntry4 = MibTableRow((1, 3, 6, 1, 4, 1, 24681, 1, 2, 18, 6, 1), ).setIndexNames((0, "NAS-MIB", "jBODHdIndex4"))
if mibBuilder.loadTexts: jBODHdEntry4.setStatus('mandatory')
if mibBuilder.loadTexts: jBODHdEntry4.setDescription('An interface entry containing objects at the\n         subnetwork layer and below for a particular\n         interface.')
jBODHdIndex4 = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 2, 18, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jBODHdIndex4.setStatus('mandatory')
if mibBuilder.loadTexts: jBODHdIndex4.setDescription("A unique value for each hard disk.  Its value\n         ranges between 1 and the value of IfNumber.  The\n         value for each interface must remain constant at\n         least from one re-initialization of the entity's\n         network management system to the next re-\n         initialization.")
jBODHdDescr4 = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 2, 18, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jBODHdDescr4.setStatus('mandatory')
if mibBuilder.loadTexts: jBODHdDescr4.setDescription('A textual string containing information about the\n         interface.  This string should include the name of\n         the manufacturer, the product name and the version\n         of the hardware interface.')
jBODHdTemperature4 = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 2, 18, 6, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jBODHdTemperature4.setStatus('mandatory')
if mibBuilder.loadTexts: jBODHdTemperature4.setDescription('Hard disk temperature.')
jBODHdStatus4 = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 2, 18, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, -5, -6, -9, -4))).clone(namedValues=NamedValues(("ready", 0), ("noDisk", -5), ("invalid", -6), ("rwError", -9), ("unknown", -4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jBODHdStatus4.setStatus('mandatory')
if mibBuilder.loadTexts: jBODHdStatus4.setDescription('HDD status. 0:not availible, 1:availible.')
jBODHdModel4 = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 2, 18, 6, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jBODHdModel4.setStatus('mandatory')
if mibBuilder.loadTexts: jBODHdModel4.setDescription('Hard disk model.')
jBODHdCapacity4 = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 2, 18, 6, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jBODHdCapacity4.setStatus('mandatory')
if mibBuilder.loadTexts: jBODHdCapacity4.setDescription('Hard disk capacity.')
jBODHdSmartInfo4 = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 2, 18, 6, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jBODHdSmartInfo4.setStatus('mandatory')
if mibBuilder.loadTexts: jBODHdSmartInfo4.setDescription('Hard disk SMART information.')
jBODHdTable5 = MibTable((1, 3, 6, 1, 4, 1, 24681, 1, 2, 18, 7), )
if mibBuilder.loadTexts: jBODHdTable5.setStatus('mandatory')
if mibBuilder.loadTexts: jBODHdTable5.setDescription('A list of interface entries.  The number of\n         entries is given by the value of IfNumber.')
jBODHdEntry5 = MibTableRow((1, 3, 6, 1, 4, 1, 24681, 1, 2, 18, 7, 1), ).setIndexNames((0, "NAS-MIB", "jBODHdIndex5"))
if mibBuilder.loadTexts: jBODHdEntry5.setStatus('mandatory')
if mibBuilder.loadTexts: jBODHdEntry5.setDescription('An interface entry containing objects at the\n         subnetwork layer and below for a particular\n         interface.')
jBODHdIndex5 = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 2, 18, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jBODHdIndex5.setStatus('mandatory')
if mibBuilder.loadTexts: jBODHdIndex5.setDescription("A unique value for each hard disk.  Its value\n         ranges between 1 and the value of IfNumber.  The\n         value for each interface must remain constant at\n         least from one re-initialization of the entity's\n         network management system to the next re-\n         initialization.")
jBODHdDescr5 = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 2, 18, 7, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jBODHdDescr5.setStatus('mandatory')
if mibBuilder.loadTexts: jBODHdDescr5.setDescription('A textual string containing information about the\n         interface.  This string should include the name of\n         the manufacturer, the product name and the version\n         of the hardware interface.')
jBODHdTemperature5 = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 2, 18, 7, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jBODHdTemperature5.setStatus('mandatory')
if mibBuilder.loadTexts: jBODHdTemperature5.setDescription('Hard disk temperature.')
jBODHdStatus5 = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 2, 18, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, -5, -6, -9, -4))).clone(namedValues=NamedValues(("ready", 0), ("noDisk", -5), ("invalid", -6), ("rwError", -9), ("unknown", -4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jBODHdStatus5.setStatus('mandatory')
if mibBuilder.loadTexts: jBODHdStatus5.setDescription('HDD status. 0:not availible, 1:availible.')
jBODHdModel5 = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 2, 18, 7, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jBODHdModel5.setStatus('mandatory')
if mibBuilder.loadTexts: jBODHdModel5.setDescription('Hard disk model.')
jBODHdCapacity5 = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 2, 18, 7, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jBODHdCapacity5.setStatus('mandatory')
if mibBuilder.loadTexts: jBODHdCapacity5.setDescription('Hard disk capacity.')
jBODHdSmartInfo5 = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 2, 18, 7, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jBODHdSmartInfo5.setStatus('mandatory')
if mibBuilder.loadTexts: jBODHdSmartInfo5.setDescription('Hard disk SMART information.')
jBODHdTable6 = MibTable((1, 3, 6, 1, 4, 1, 24681, 1, 2, 18, 8), )
if mibBuilder.loadTexts: jBODHdTable6.setStatus('mandatory')
if mibBuilder.loadTexts: jBODHdTable6.setDescription('A list of interface entries.  The number of\n         entries is given by the value of IfNumber.')
jBODHdEntry6 = MibTableRow((1, 3, 6, 1, 4, 1, 24681, 1, 2, 18, 8, 1), ).setIndexNames((0, "NAS-MIB", "jBODHdIndex6"))
if mibBuilder.loadTexts: jBODHdEntry6.setStatus('mandatory')
if mibBuilder.loadTexts: jBODHdEntry6.setDescription('An interface entry containing objects at the\n         subnetwork layer and below for a particular\n         interface.')
jBODHdIndex6 = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 2, 18, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jBODHdIndex6.setStatus('mandatory')
if mibBuilder.loadTexts: jBODHdIndex6.setDescription("A unique value for each hard disk.  Its value\n         ranges between 1 and the value of IfNumber.  The\n         value for each interface must remain constant at\n         least from one re-initialization of the entity's\n         network management system to the next re-\n         initialization.")
jBODHdDescr6 = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 2, 18, 8, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jBODHdDescr6.setStatus('mandatory')
if mibBuilder.loadTexts: jBODHdDescr6.setDescription('A textual string containing information about the\n         interface.  This string should include the name of\n         the manufacturer, the product name and the version\n         of the hardware interface.')
jBODHdTemperature6 = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 2, 18, 8, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jBODHdTemperature6.setStatus('mandatory')
if mibBuilder.loadTexts: jBODHdTemperature6.setDescription('Hard disk temperature.')
jBODHdStatus6 = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 2, 18, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, -5, -6, -9, -4))).clone(namedValues=NamedValues(("ready", 0), ("noDisk", -5), ("invalid", -6), ("rwError", -9), ("unknown", -4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jBODHdStatus6.setStatus('mandatory')
if mibBuilder.loadTexts: jBODHdStatus6.setDescription('HDD status. 0:not availible, 1:availible.')
jBODHdModel6 = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 2, 18, 8, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jBODHdModel6.setStatus('mandatory')
if mibBuilder.loadTexts: jBODHdModel6.setDescription('Hard disk model.')
jBODHdCapacity6 = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 2, 18, 8, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jBODHdCapacity6.setStatus('mandatory')
if mibBuilder.loadTexts: jBODHdCapacity6.setDescription('Hard disk capacity.')
jBODHdSmartInfo6 = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 2, 18, 8, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jBODHdSmartInfo6.setStatus('mandatory')
if mibBuilder.loadTexts: jBODHdSmartInfo6.setDescription('Hard disk SMART information.')
jBODHdTable7 = MibTable((1, 3, 6, 1, 4, 1, 24681, 1, 2, 18, 9), )
if mibBuilder.loadTexts: jBODHdTable7.setStatus('mandatory')
if mibBuilder.loadTexts: jBODHdTable7.setDescription('A list of interface entries.  The number of\n         entries is given by the value of IfNumber.')
jBODHdEntry7 = MibTableRow((1, 3, 6, 1, 4, 1, 24681, 1, 2, 18, 9, 1), ).setIndexNames((0, "NAS-MIB", "jBODHdIndex7"))
if mibBuilder.loadTexts: jBODHdEntry7.setStatus('mandatory')
if mibBuilder.loadTexts: jBODHdEntry7.setDescription('An interface entry containing objects at the\n         subnetwork layer and below for a particular\n         interface.')
jBODHdIndex7 = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 2, 18, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jBODHdIndex7.setStatus('mandatory')
if mibBuilder.loadTexts: jBODHdIndex7.setDescription("A unique value for each hard disk.  Its value\n         ranges between 1 and the value of IfNumber.  The\n         value for each interface must remain constant at\n         least from one re-initialization of the entity's\n         network management system to the next re-\n         initialization.")
jBODHdDescr7 = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 2, 18, 9, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jBODHdDescr7.setStatus('mandatory')
if mibBuilder.loadTexts: jBODHdDescr7.setDescription('A textual string containing information about the\n         interface.  This string should include the name of\n         the manufacturer, the product name and the version\n         of the hardware interface.')
jBODHdTemperature7 = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 2, 18, 9, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jBODHdTemperature7.setStatus('mandatory')
if mibBuilder.loadTexts: jBODHdTemperature7.setDescription('Hard disk temperature.')
jBODHdStatus7 = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 2, 18, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, -5, -6, -9, -4))).clone(namedValues=NamedValues(("ready", 0), ("noDisk", -5), ("invalid", -6), ("rwError", -9), ("unknown", -4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jBODHdStatus7.setStatus('mandatory')
if mibBuilder.loadTexts: jBODHdStatus7.setDescription('HDD status. 0:not availible, 1:availible.')
jBODHdModel7 = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 2, 18, 9, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jBODHdModel7.setStatus('mandatory')
if mibBuilder.loadTexts: jBODHdModel7.setDescription('Hard disk model.')
jBODHdCapacity7 = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 2, 18, 9, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jBODHdCapacity7.setStatus('mandatory')
if mibBuilder.loadTexts: jBODHdCapacity7.setDescription('Hard disk capacity.')
jBODHdSmartInfo7 = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 2, 18, 9, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jBODHdSmartInfo7.setStatus('mandatory')
if mibBuilder.loadTexts: jBODHdSmartInfo7.setDescription('Hard disk SMART information.')
jBODHdTable8 = MibTable((1, 3, 6, 1, 4, 1, 24681, 1, 2, 18, 10), )
if mibBuilder.loadTexts: jBODHdTable8.setStatus('mandatory')
if mibBuilder.loadTexts: jBODHdTable8.setDescription('A list of interface entries.  The number of\n         entries is given by the value of IfNumber.')
jBODHdEntry8 = MibTableRow((1, 3, 6, 1, 4, 1, 24681, 1, 2, 18, 10, 1), ).setIndexNames((0, "NAS-MIB", "jBODHdIndex8"))
if mibBuilder.loadTexts: jBODHdEntry8.setStatus('mandatory')
if mibBuilder.loadTexts: jBODHdEntry8.setDescription('An interface entry containing objects at the\n         subnetwork layer and below for a particular\n         interface.')
jBODHdIndex8 = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 2, 18, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jBODHdIndex8.setStatus('mandatory')
if mibBuilder.loadTexts: jBODHdIndex8.setDescription("A unique value for each hard disk.  Its value\n         ranges between 1 and the value of IfNumber.  The\n         value for each interface must remain constant at\n         least from one re-initialization of the entity's\n         network management system to the next re-\n         initialization.")
jBODHdDescr8 = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 2, 18, 10, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jBODHdDescr8.setStatus('mandatory')
if mibBuilder.loadTexts: jBODHdDescr8.setDescription('A textual string containing information about the\n         interface.  This string should include the name of\n         the manufacturer, the product name and the version\n         of the hardware interface.')
jBODHdTemperature8 = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 2, 18, 10, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jBODHdTemperature8.setStatus('mandatory')
if mibBuilder.loadTexts: jBODHdTemperature8.setDescription('Hard disk temperature.')
jBODHdStatus8 = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 2, 18, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, -5, -6, -9, -4))).clone(namedValues=NamedValues(("ready", 0), ("noDisk", -5), ("invalid", -6), ("rwError", -9), ("unknown", -4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jBODHdStatus8.setStatus('mandatory')
if mibBuilder.loadTexts: jBODHdStatus8.setDescription('HDD status. 0:not availible, 1:availible.')
jBODHdModel8 = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 2, 18, 10, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jBODHdModel8.setStatus('mandatory')
if mibBuilder.loadTexts: jBODHdModel8.setDescription('Hard disk model.')
jBODHdCapacity8 = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 2, 18, 10, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jBODHdCapacity8.setStatus('mandatory')
if mibBuilder.loadTexts: jBODHdCapacity8.setDescription('Hard disk capacity.')
jBODHdSmartInfo8 = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 2, 18, 10, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jBODHdSmartInfo8.setStatus('mandatory')
if mibBuilder.loadTexts: jBODHdSmartInfo8.setDescription('Hard disk SMART information.')
systemInfoEx = MibIdentifier((1, 3, 6, 1, 4, 1, 24681, 1, 3))
systemCPU_UsageEX = MibScalar((1, 3, 6, 1, 4, 1, 24681, 1, 3, 1), Integer32()).setLabel("systemCPU-UsageEX").setMaxAccess("readonly")
if mibBuilder.loadTexts: systemCPU_UsageEX.setStatus('current')
if mibBuilder.loadTexts: systemCPU_UsageEX.setDescription('system CPU usage')
systemTotalMemEX = MibScalar((1, 3, 6, 1, 4, 1, 24681, 1, 3, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemTotalMemEX.setStatus('current')
if mibBuilder.loadTexts: systemTotalMemEX.setDescription('System total memory in byte')
systemFreeMemEX = MibScalar((1, 3, 6, 1, 4, 1, 24681, 1, 3, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemFreeMemEX.setStatus('current')
if mibBuilder.loadTexts: systemFreeMemEX.setDescription('System free memory in byte')
systemUptimeEX = MibScalar((1, 3, 6, 1, 4, 1, 24681, 1, 3, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemUptimeEX.setStatus('current')
if mibBuilder.loadTexts: systemUptimeEX.setDescription('The amount of time since this host was last\n         initialized.  Note that this is different from\n         sysUpTime in the SNMPv2-MIB [RFC1907] because\n         sysUpTime is the uptime of the network management\n         portion of the system.')
cpu_TemperatureEX = MibScalar((1, 3, 6, 1, 4, 1, 24681, 1, 3, 5), Integer32()).setLabel("cpu-TemperatureEX").setMaxAccess("readonly")
if mibBuilder.loadTexts: cpu_TemperatureEX.setStatus('current')
if mibBuilder.loadTexts: cpu_TemperatureEX.setDescription('CPU temperature in centigrade')
systemTemperatureEX = MibScalar((1, 3, 6, 1, 4, 1, 24681, 1, 3, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemTemperatureEX.setStatus('current')
if mibBuilder.loadTexts: systemTemperatureEX.setDescription('System temperature in centigrade')
ifNumberEX = MibScalar((1, 3, 6, 1, 4, 1, 24681, 1, 3, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifNumberEX.setStatus('mandatory')
if mibBuilder.loadTexts: ifNumberEX.setDescription('The number of network interfaces (regardless of\n         their current state) present on this system.')
systemIfTableEx = MibTable((1, 3, 6, 1, 4, 1, 24681, 1, 3, 9), )
if mibBuilder.loadTexts: systemIfTableEx.setStatus('mandatory')
if mibBuilder.loadTexts: systemIfTableEx.setDescription('A list of interface entries.  The number of\n         entries is given by the value of IfNumber.')
ifEntryEx = MibTableRow((1, 3, 6, 1, 4, 1, 24681, 1, 3, 9, 1), ).setIndexNames((0, "NAS-MIB", "ifIndexEX"))
if mibBuilder.loadTexts: ifEntryEx.setStatus('mandatory')
if mibBuilder.loadTexts: ifEntryEx.setDescription('An interface entry containing objects at the\n         subnetwork layer and below for a particular\n         interface.')
ifIndexEX = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 3, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifIndexEX.setStatus('mandatory')
if mibBuilder.loadTexts: ifIndexEX.setDescription("A unique value for each interface.  Its value\n         ranges between 1 and the value of IfNumber.  The\n         value for each interface must remain constant at\n         least from one re-initialization of the entity's\n         network management system to the next re-\n         initialization.")
ifDescrEX = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 3, 9, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifDescrEX.setStatus('mandatory')
if mibBuilder.loadTexts: ifDescrEX.setDescription('A textual string containing information about the\n         interface.  This string should include the name of\n         the manufacturer, the product name and the version\n         of the hardware interface.')
ifPacketsReceivedEX = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 3, 9, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifPacketsReceivedEX.setStatus('mandatory')
if mibBuilder.loadTexts: ifPacketsReceivedEX.setDescription('System packets received.')
ifPacketsSentEX = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 3, 9, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifPacketsSentEX.setStatus('mandatory')
if mibBuilder.loadTexts: ifPacketsSentEX.setDescription('System packets sent.')
ifErrorPacketsEX = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 3, 9, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifErrorPacketsEX.setStatus('mandatory')
if mibBuilder.loadTexts: ifErrorPacketsEX.setDescription('System error packets.')
hdNumberEX = MibScalar((1, 3, 6, 1, 4, 1, 24681, 1, 3, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdNumberEX.setStatus('mandatory')
if mibBuilder.loadTexts: hdNumberEX.setDescription('The number of hard drive slots.')
systemHdTableEX = MibTable((1, 3, 6, 1, 4, 1, 24681, 1, 3, 11), )
if mibBuilder.loadTexts: systemHdTableEX.setStatus('mandatory')
if mibBuilder.loadTexts: systemHdTableEX.setDescription('A list of interface entries.  The number of\n         entries is given by the value of HdNumber.')
hdEntryEx = MibTableRow((1, 3, 6, 1, 4, 1, 24681, 1, 3, 11, 1), ).setIndexNames((0, "NAS-MIB", "hdIndex"))
if mibBuilder.loadTexts: hdEntryEx.setStatus('mandatory')
if mibBuilder.loadTexts: hdEntryEx.setDescription('An interface entry containing objects at the\n         subnetwork layer and below for a particular\n         interface.')
hdIndexEX = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 3, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdIndexEX.setStatus('mandatory')
if mibBuilder.loadTexts: hdIndexEX.setDescription("A unique value for each hard disk.  Its value\n         ranges between 1 and the value of IfNumber.  The\n         value for each interface must remain constant at\n         least from one re-initialization of the entity's\n         network management system to the next re-\n         initialization.")
hdDescrEX = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 3, 11, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdDescrEX.setStatus('mandatory')
if mibBuilder.loadTexts: hdDescrEX.setDescription('A textual string containing information about the\n         interface.  This string should include the name of\n         the manufacturer, the product name and the version\n         of the hardware interface.')
hdTemperatureEX = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 3, 11, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdTemperatureEX.setStatus('mandatory')
if mibBuilder.loadTexts: hdTemperatureEX.setDescription('Hard disk temperature in centigrade.')
hdStatusEX = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 3, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, -5, -6, -9, -4))).clone(namedValues=NamedValues(("ready", 0), ("noDisk", -5), ("invalid", -6), ("rwError", -9), ("unknown", -4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdStatusEX.setStatus('mandatory')
if mibBuilder.loadTexts: hdStatusEX.setDescription('HDD status. 0:not availible, 1:availible.')
hdModelEX = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 3, 11, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdModelEX.setStatus('mandatory')
if mibBuilder.loadTexts: hdModelEX.setDescription('Hard disk model.')
hdCapacityEX = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 3, 11, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdCapacityEX.setStatus('mandatory')
if mibBuilder.loadTexts: hdCapacityEX.setDescription('Hard disk capacity in byte.')
hdSmartInfoEX = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 3, 11, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdSmartInfoEX.setStatus('mandatory')
if mibBuilder.loadTexts: hdSmartInfoEX.setDescription('Hard disk SMART information.')
modelNameEX = MibScalar((1, 3, 6, 1, 4, 1, 24681, 1, 3, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modelNameEX.setStatus('current')
if mibBuilder.loadTexts: modelNameEX.setDescription('Model name')
hostNameEX = MibScalar((1, 3, 6, 1, 4, 1, 24681, 1, 3, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostNameEX.setStatus('current')
if mibBuilder.loadTexts: hostNameEX.setDescription('Model name')
sysFanNumberEX = MibScalar((1, 3, 6, 1, 4, 1, 24681, 1, 3, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFanNumberEX.setStatus('mandatory')
if mibBuilder.loadTexts: sysFanNumberEX.setDescription('The number of system fan (regardless of\n         their current state) present on this system.')
systemFanTableEx = MibTable((1, 3, 6, 1, 4, 1, 24681, 1, 3, 15), )
if mibBuilder.loadTexts: systemFanTableEx.setStatus('mandatory')
if mibBuilder.loadTexts: systemFanTableEx.setDescription('A list of interface entries.  The number of\n         entries is given by the value of SysFanNumber.')
sysFanEntryEx = MibTableRow((1, 3, 6, 1, 4, 1, 24681, 1, 3, 15, 1), ).setIndexNames((0, "NAS-MIB", "sysFanIndexEX"))
if mibBuilder.loadTexts: sysFanEntryEx.setStatus('mandatory')
if mibBuilder.loadTexts: sysFanEntryEx.setDescription('An system fan entry containing objects at the\n         subnetwork layer and below for a particular\n         interface.')
sysFanIndexEX = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 3, 15, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFanIndexEX.setStatus('mandatory')
if mibBuilder.loadTexts: sysFanIndexEX.setDescription("A unique value for each system fan. Its value\n         ranges between 1 and the value of SysFanNumber.  The\n         value for each interface must remain constant at\n         least from one re-initialization of the entity's\n         network management system to the next re-\n         initialization.")
sysFanDescrEX = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 3, 15, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFanDescrEX.setStatus('mandatory')
if mibBuilder.loadTexts: sysFanDescrEX.setDescription('A textual string containing information about the\n         interface.  This string should include the name of\n         the manufacturer, the product name and the version\n         of the hardware interface.')
sysFanSpeedEX = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 3, 15, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFanSpeedEX.setStatus('mandatory')
if mibBuilder.loadTexts: sysFanSpeedEX.setDescription('System fan speed (RPM).')
sysVolumeNumberEX = MibScalar((1, 3, 6, 1, 4, 1, 24681, 1, 3, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVolumeNumberEX.setStatus('mandatory')
if mibBuilder.loadTexts: sysVolumeNumberEX.setDescription('The number of system volumes (regardless of\n         their current state) present on this system.')
systemVolumeTableEx = MibTable((1, 3, 6, 1, 4, 1, 24681, 1, 3, 17), )
if mibBuilder.loadTexts: systemVolumeTableEx.setStatus('mandatory')
if mibBuilder.loadTexts: systemVolumeTableEx.setDescription('A list of volume entries.  The number of\n         entries is given by the value of SysVolumeNumber.')
sysVolumeEntryEx = MibTableRow((1, 3, 6, 1, 4, 1, 24681, 1, 3, 17, 1), ).setIndexNames((0, "NAS-MIB", "sysVolumeIndexEX"))
if mibBuilder.loadTexts: sysVolumeEntryEx.setStatus('mandatory')
if mibBuilder.loadTexts: sysVolumeEntryEx.setDescription('An system volume entry')
sysVolumeIndexEX = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 3, 17, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVolumeIndexEX.setStatus('mandatory')
if mibBuilder.loadTexts: sysVolumeIndexEX.setDescription("A unique value for each system volume. Its value\n         ranges between 1 and the value of SysVolumeNumber.  The\n         value for each volume must remain constant at\n         least from one re-initialization of the entity's\n         volume system to the next re-initialization.")
sysVolumeDescrEX = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 3, 17, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVolumeDescrEX.setStatus('mandatory')
if mibBuilder.loadTexts: sysVolumeDescrEX.setDescription('A textual string containing information about the volume.')
sysVolumeFSEX = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 3, 17, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVolumeFSEX.setStatus('mandatory')
if mibBuilder.loadTexts: sysVolumeFSEX.setDescription('System Volume file system.')
sysVolumeTotalSizeEX = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 3, 17, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVolumeTotalSizeEX.setStatus('mandatory')
if mibBuilder.loadTexts: sysVolumeTotalSizeEX.setDescription('System Volume total size in byte.')
sysVolumeFreeSizeEX = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 3, 17, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVolumeFreeSizeEX.setStatus('mandatory')
if mibBuilder.loadTexts: sysVolumeFreeSizeEX.setDescription('System Volume free size in byte.')
sysVolumeStatusEX = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 3, 17, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVolumeStatusEX.setStatus('mandatory')
if mibBuilder.loadTexts: sysVolumeStatusEX.setDescription('System Volume status.')
storageSystemEx = MibIdentifier((1, 3, 6, 1, 4, 1, 24681, 1, 4))
systemSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1))
storageManager = MibIdentifier((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1))
systemStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 11))
nasStorage = MibIdentifier((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 1))
components = MibIdentifier((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 1, 1))
enclosure = MibIdentifier((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 1, 1, 1))
systemFan = MibIdentifier((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 1, 1, 2))
systemPower = MibIdentifier((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 1, 1, 3))
cpu = MibIdentifier((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 1, 1, 4))
disk = MibIdentifier((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 1, 1, 5))
msataDisk = MibIdentifier((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 1, 1, 6))
storageSpace = MibIdentifier((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 1, 2))
raid = MibIdentifier((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 1, 2, 1))
pool = MibIdentifier((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 1, 2, 2))
volume = MibIdentifier((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 1, 2, 3))
cacheAcceleration = MibIdentifier((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 1, 3))
iSCSI = MibIdentifier((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 2))
iSCSIStorage = MibIdentifier((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 2, 1))
lun = MibIdentifier((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 2, 1, 10))
target = MibIdentifier((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 2, 1, 11))
resourceMonitor = MibIdentifier((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 11, 5))
diskPerformance = MibIdentifier((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 11, 5, 6))
iSCSIService = MibScalar((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iSCSIService.setStatus('mandatory')
if mibBuilder.loadTexts: iSCSIService.setDescription('iSCSI Service.')
iSCSIServicePort = MibScalar((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iSCSIServicePort.setStatus('mandatory')
if mibBuilder.loadTexts: iSCSIServicePort.setDescription('iSCSI ServicePort.')
iSNSService = MibScalar((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iSNSService.setStatus('mandatory')
if mibBuilder.loadTexts: iSNSService.setDescription('iSNS Service.')
iSNSIP = MibScalar((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 2, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iSNSIP.setStatus('mandatory')
if mibBuilder.loadTexts: iSNSIP.setDescription('iSNS IP.')
lunNumber = MibScalar((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 2, 1, 10, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunNumber.setStatus('current')
if mibBuilder.loadTexts: lunNumber.setDescription('The number of LUNs (regardless of\n         their current state) present on this system.')
lunTable = MibTable((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 2, 1, 10, 2), )
if mibBuilder.loadTexts: lunTable.setStatus('mandatory')
if mibBuilder.loadTexts: lunTable.setDescription('A list of LUN entries. The number of\n         entries is given by the value of LUNNumber.')
lunTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 2, 1, 10, 2, 1), ).setIndexNames((0, "NAS-MIB", "lunIndex"))
if mibBuilder.loadTexts: lunTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lunTableEntry.setDescription('An LUN entry.')
lunIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 2, 1, 10, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lunIndex.setDescription('LUNIndex.')
lunID = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 2, 1, 10, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunID.setStatus('mandatory')
if mibBuilder.loadTexts: lunID.setDescription('LUNID.')
lunCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 2, 1, 10, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunCapacity.setStatus('mandatory')
if mibBuilder.loadTexts: lunCapacity.setDescription('LUN capacity in byte.')
lunUsedPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 2, 1, 10, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunUsedPercent.setStatus('mandatory')
if mibBuilder.loadTexts: lunUsedPercent.setDescription('LUN used percent.')
lunStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 2, 1, 10, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lunStatus.setDescription('LUN status.')
lunName = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 2, 1, 10, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunName.setStatus('mandatory')
if mibBuilder.loadTexts: lunName.setDescription('LUN name.')
lunBackupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 2, 1, 10, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("backup", 1), ("restore", 2), ("snapshot", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunBackupStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lunBackupStatus.setDescription('LUN backup status.')
lunIsMap = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 2, 1, 10, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("unmapped", 0), ("mapped", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunIsMap.setStatus('mandatory')
if mibBuilder.loadTexts: lunIsMap.setDescription('LUN is Mapped.')
targetNumber = MibScalar((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 2, 1, 11, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: targetNumber.setStatus('current')
if mibBuilder.loadTexts: targetNumber.setDescription('The number of Targets (regardless of\n         their current state) present on this system.')
targeTable = MibTable((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 2, 1, 11, 2), )
if mibBuilder.loadTexts: targeTable.setStatus('mandatory')
if mibBuilder.loadTexts: targeTable.setDescription('A list of Target entries.  The number of\n         entries is given by the value of TargetNumber.')
targeTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 2, 1, 11, 2, 1), ).setIndexNames((0, "NAS-MIB", "targetIndex"))
if mibBuilder.loadTexts: targeTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: targeTableEntry.setDescription('A target entry.')
targetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 2, 1, 11, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: targetIndex.setStatus('mandatory')
if mibBuilder.loadTexts: targetIndex.setDescription('TargetIndex.')
targetID = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 2, 1, 11, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: targetID.setStatus('mandatory')
if mibBuilder.loadTexts: targetID.setDescription('TargetID.')
targetName = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 2, 1, 11, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: targetName.setStatus('mandatory')
if mibBuilder.loadTexts: targetName.setDescription('Target name.')
targetIQN = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 2, 1, 11, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: targetIQN.setStatus('mandatory')
if mibBuilder.loadTexts: targetIQN.setDescription('TargetIQN.')
targetStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 2, 1, 11, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1))).clone(namedValues=NamedValues(("offline", -1), ("ready", 0), ("connected", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: targetStatus.setStatus('mandatory')
if mibBuilder.loadTexts: targetStatus.setDescription('Target status.')
volumeNumber = MibScalar((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 1, 2, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volumeNumber.setStatus('current')
if mibBuilder.loadTexts: volumeNumber.setDescription('The number of volumes (regardless of\n         their current state) present on this system.')
volumeTable = MibTable((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 1, 2, 3, 2), )
if mibBuilder.loadTexts: volumeTable.setStatus('current')
if mibBuilder.loadTexts: volumeTable.setDescription('A list of volume entries.  The number of\n         entries is given by the value of VolumeNumber.')
volumeTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 1, 2, 3, 2, 1), ).setIndexNames((0, "NAS-MIB", "volumeIndex"))
if mibBuilder.loadTexts: volumeTableEntry.setStatus('current')
if mibBuilder.loadTexts: volumeTableEntry.setDescription('An volume entry.')
volumeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 1, 2, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volumeIndex.setStatus('current')
if mibBuilder.loadTexts: volumeIndex.setDescription('VolumeIndex.')
volumeID = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 1, 2, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volumeID.setStatus('current')
if mibBuilder.loadTexts: volumeID.setDescription('VolumeID.')
volumeCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 1, 2, 3, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volumeCapacity.setStatus('current')
if mibBuilder.loadTexts: volumeCapacity.setDescription('Volume capacity in byte.')
volumeFreeSize = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 1, 2, 3, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volumeFreeSize.setStatus('current')
if mibBuilder.loadTexts: volumeFreeSize.setDescription('Volume freesize in byte.')
volumeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 1, 2, 3, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: volumeStatus.setStatus('current')
if mibBuilder.loadTexts: volumeStatus.setDescription('Volume status')
volumeSSDCache = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 1, 2, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: volumeSSDCache.setStatus('current')
if mibBuilder.loadTexts: volumeSSDCache.setDescription('If volume enable SSDCache acceleration.')
volumeThin = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 1, 2, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: volumeThin.setStatus('current')
if mibBuilder.loadTexts: volumeThin.setDescription('If volume is thin type.')
volumeName = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 1, 2, 3, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: volumeName.setStatus('current')
if mibBuilder.loadTexts: volumeName.setDescription('Volume alias name.')
poolNumber = MibScalar((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 1, 2, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolNumber.setStatus('current')
if mibBuilder.loadTexts: poolNumber.setDescription('The number of pools (regardless of\n         their current state) present on this system.')
poolTable = MibTable((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 1, 2, 2, 2), )
if mibBuilder.loadTexts: poolTable.setStatus('mandatory')
if mibBuilder.loadTexts: poolTable.setDescription('A list of pool entries. The number of entries is given by the value of PoolNumber.')
poolTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 1, 2, 2, 2, 1), ).setIndexNames((0, "NAS-MIB", "poolIndex"))
if mibBuilder.loadTexts: poolTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: poolTableEntry.setDescription('An pool entry.')
poolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 1, 2, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolIndex.setStatus('mandatory')
if mibBuilder.loadTexts: poolIndex.setDescription('PoolIndex.')
poolID = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 1, 2, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolID.setStatus('mandatory')
if mibBuilder.loadTexts: poolID.setDescription('PoolID.')
poolCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 1, 2, 2, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolCapacity.setStatus('mandatory')
if mibBuilder.loadTexts: poolCapacity.setDescription('Pool capacity in byte.')
poolFreeSize = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 1, 2, 2, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolFreeSize.setStatus('mandatory')
if mibBuilder.loadTexts: poolFreeSize.setDescription('Pool freesize in byte.')
poolStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 1, 2, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, -1, -2, -3))).clone(namedValues=NamedValues(("ready", 0), ("warning", -1), ("notReady", -2), ("error", -3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolStatus.setStatus('mandatory')
if mibBuilder.loadTexts: poolStatus.setDescription('Pool status.')
raidNumber = MibScalar((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidNumber.setStatus('current')
if mibBuilder.loadTexts: raidNumber.setDescription('The number of RAIDs (regardless of\n         their current state) present on this system.')
raidGroupTable = MibTable((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 1, 2, 1, 2), )
if mibBuilder.loadTexts: raidGroupTable.setStatus('mandatory')
if mibBuilder.loadTexts: raidGroupTable.setDescription('A list of RAID entries. The number of \n          entries is given by the value of RAIDNumber.')
raidGroupTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 1, 2, 1, 2, 1), ).setIndexNames((0, "NAS-MIB", "raidIndex"))
if mibBuilder.loadTexts: raidGroupTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: raidGroupTableEntry.setDescription('An RAID entry.')
raidIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 1, 2, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidIndex.setStatus('mandatory')
if mibBuilder.loadTexts: raidIndex.setDescription('RAIDIndex.')
raidID = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 1, 2, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidID.setStatus('mandatory')
if mibBuilder.loadTexts: raidID.setDescription('RAIDID.')
raidCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 1, 2, 1, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidCapacity.setStatus('mandatory')
if mibBuilder.loadTexts: raidCapacity.setDescription('RAID capacity  in byte.')
raidFreeSize = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 1, 2, 1, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidFreeSize.setStatus('mandatory')
if mibBuilder.loadTexts: raidFreeSize.setDescription('RAID freesize in byte.')
raidStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 1, 2, 1, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidStatus.setStatus('mandatory')
if mibBuilder.loadTexts: raidStatus.setDescription('RAID status.')
raidBitmap = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 1, 2, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidBitmap.setStatus('mandatory')
if mibBuilder.loadTexts: raidBitmap.setDescription('RAID bitmap.')
raidLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 1, 2, 1, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidLevel.setStatus('mandatory')
if mibBuilder.loadTexts: raidLevel.setDescription('RAID level.')
service = MibScalar((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: service.setStatus('current')
if mibBuilder.loadTexts: service.setDescription('If service of cache is enabled.')
availablePercent = MibScalar((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 1, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: availablePercent.setStatus('current')
if mibBuilder.loadTexts: availablePercent.setDescription('Available percent of cache.')
readHitRate = MibScalar((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 1, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: readHitRate.setStatus('current')
if mibBuilder.loadTexts: readHitRate.setDescription('Read hit rate percent of cache.')
writeHitRate = MibScalar((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 1, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: writeHitRate.setStatus('current')
if mibBuilder.loadTexts: writeHitRate.setDescription('Write hit rate percent of cache.')
status = MibScalar((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 1, 3, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: status.setStatus('current')
if mibBuilder.loadTexts: status.setDescription('Status of cache.')
diskNumber = MibScalar((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 1, 1, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskNumber.setStatus('current')
if mibBuilder.loadTexts: diskNumber.setDescription('The number of disks (regardless of\n         their current state) present on this system.')
diskTable = MibTable((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 1, 1, 5, 2), )
if mibBuilder.loadTexts: diskTable.setStatus('mandatory')
if mibBuilder.loadTexts: diskTable.setDescription('A list of disks.  The number of\n         entries is given by the value of DiskNumber.')
diskTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 1, 1, 5, 2, 1), ).setIndexNames((0, "NAS-MIB", "diskIndex"))
if mibBuilder.loadTexts: diskTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: diskTableEntry.setDescription('A disk entry.')
diskIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 1, 1, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskIndex.setStatus('mandatory')
if mibBuilder.loadTexts: diskIndex.setDescription('DiskIndex.')
diskID = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 1, 1, 5, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskID.setStatus('mandatory')
if mibBuilder.loadTexts: diskID.setDescription('DiskID.')
diskEnclosureID = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 1, 1, 5, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskEnclosureID.setStatus('mandatory')
if mibBuilder.loadTexts: diskEnclosureID.setDescription('disk EnclosureID.')
diskSummary = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 1, 1, 5, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskSummary.setStatus('mandatory')
if mibBuilder.loadTexts: diskSummary.setDescription("DiskSummary. 'Good',''Warning','Abnormal'")
diskSmartInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 1, 1, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1, 0, -1))).clone(namedValues=NamedValues(("abnormal", 2), ("warning", 1), ("good", 0), ("error", -1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskSmartInfo.setStatus('mandatory')
if mibBuilder.loadTexts: diskSmartInfo.setDescription('DiskSmartInfo.')
diskTemperture = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 1, 1, 5, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskTemperture.setStatus('mandatory')
if mibBuilder.loadTexts: diskTemperture.setDescription('DiskTemperture.')
diskGlobalSpare = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 1, 1, 5, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskGlobalSpare.setStatus('mandatory')
if mibBuilder.loadTexts: diskGlobalSpare.setDescription('DiskGlobalSpare.')
diskModel = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 1, 1, 5, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskModel.setStatus('mandatory')
if mibBuilder.loadTexts: diskModel.setDescription('DiskModel.')
diskCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 1, 1, 5, 2, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskCapacity.setStatus('mandatory')
if mibBuilder.loadTexts: diskCapacity.setDescription('DiskCapacity.')
msataDiskNumber = MibScalar((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 1, 1, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msataDiskNumber.setStatus('current')
if mibBuilder.loadTexts: msataDiskNumber.setDescription('The number of msatadisks (regardless of\n         their current state) present on this system.')
msataDiskTable = MibTable((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 1, 1, 6, 2), )
if mibBuilder.loadTexts: msataDiskTable.setStatus('mandatory')
if mibBuilder.loadTexts: msataDiskTable.setDescription('A list of msatadisks.  The number of\n         entries is given by the value of msataDiskNumber.')
msataDiskTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 1, 1, 6, 2, 1), ).setIndexNames((0, "NAS-MIB", "msataDiskIndex"))
if mibBuilder.loadTexts: msataDiskTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: msataDiskTableEntry.setDescription('A disk entry.')
msataDiskIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 1, 1, 6, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msataDiskIndex.setStatus('mandatory')
if mibBuilder.loadTexts: msataDiskIndex.setDescription('DiskIndex.')
msataDiskID = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 1, 1, 6, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msataDiskID.setStatus('mandatory')
if mibBuilder.loadTexts: msataDiskID.setDescription('DiskID.')
msataDiskEnclosureID = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 1, 1, 6, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msataDiskEnclosureID.setStatus('mandatory')
if mibBuilder.loadTexts: msataDiskEnclosureID.setDescription('disk EnclosureID.')
msataDiskSummary = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 1, 1, 6, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msataDiskSummary.setStatus('mandatory')
if mibBuilder.loadTexts: msataDiskSummary.setDescription("DiskSummary. 'Good',''Warning','Abnormal'")
msataDiskSmartInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 1, 1, 6, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1, 0, -1))).clone(namedValues=NamedValues(("abnormal", 2), ("warning", 1), ("good", 0), ("error", -1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msataDiskSmartInfo.setStatus('mandatory')
if mibBuilder.loadTexts: msataDiskSmartInfo.setDescription('DiskSmartInfo.')
msataDiskTemperture = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 1, 1, 6, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msataDiskTemperture.setStatus('mandatory')
if mibBuilder.loadTexts: msataDiskTemperture.setDescription('DiskTemperture.')
msataDiskGlobalSpare = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 1, 1, 6, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msataDiskGlobalSpare.setStatus('mandatory')
if mibBuilder.loadTexts: msataDiskGlobalSpare.setDescription('DiskGlobalSpare.')
msataDiskModel = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 1, 1, 6, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msataDiskModel.setStatus('mandatory')
if mibBuilder.loadTexts: msataDiskModel.setDescription('DiskModel.')
msataDiskCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 1, 1, 6, 2, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msataDiskCapacity.setStatus('mandatory')
if mibBuilder.loadTexts: msataDiskCapacity.setDescription('DiskCapacity.')
enclosurelNumber = MibScalar((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosurelNumber.setStatus('current')
if mibBuilder.loadTexts: enclosurelNumber.setDescription('The number of Enclosures (regardless of\n         their current state) present on this system.')
enclosureTable = MibTable((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 1, 1, 1, 2), )
if mibBuilder.loadTexts: enclosureTable.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureTable.setDescription('A list of enclosures.  The number of\n         entries is given by the value of EnclosureNumber.')
enclosureTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 1, 1, 1, 2, 1), ).setIndexNames((0, "NAS-MIB", "enclosureIndex"))
if mibBuilder.loadTexts: enclosureTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureTableEntry.setDescription('An enclosure entry.')
enclosureIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 1, 1, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureIndex.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureIndex.setDescription('EnclosureIndex.')
enclosureID = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 1, 1, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureID.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureID.setDescription('enclosureID.')
enclosureModel = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 1, 1, 1, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureModel.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureModel.setDescription('EnclosureModel.')
enclosureSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 1, 1, 1, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureSerialNum.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureSerialNum.setDescription('EnclosureSerialNum.')
enclosureSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 1, 1, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureSlot.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureSlot.setDescription('EnclosureSlot.')
enclosureName = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 1, 1, 1, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureName.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureName.setDescription('Enclosure Name.')
enclosureSystemTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 1, 1, 1, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureSystemTemp.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureSystemTemp.setDescription('Enclosure System temperature in centigrade.')
systemFanNumber = MibScalar((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 1, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemFanNumber.setStatus('current')
if mibBuilder.loadTexts: systemFanNumber.setDescription('The number of systemfans (regardless of\n         their current state) present on this system.')
systemFan2Table = MibTable((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 1, 1, 2, 2), )
if mibBuilder.loadTexts: systemFan2Table.setStatus('mandatory')
if mibBuilder.loadTexts: systemFan2Table.setDescription('A list of systemfans.  The number of\n         entries is given by the value of SystemFanNumber.')
systemFan2TableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 1, 1, 2, 2, 1), ).setIndexNames((0, "NAS-MIB", "systemFanIndex"))
if mibBuilder.loadTexts: systemFan2TableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: systemFan2TableEntry.setDescription('An system fan entry.')
systemFanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 1, 1, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemFanIndex.setStatus('mandatory')
if mibBuilder.loadTexts: systemFanIndex.setDescription('SystemFanIndex.')
systemFanID = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 1, 1, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemFanID.setStatus('mandatory')
if mibBuilder.loadTexts: systemFanID.setDescription('SystemFanID.')
systemFanEnclosureID = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 1, 1, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemFanEnclosureID.setStatus('mandatory')
if mibBuilder.loadTexts: systemFanEnclosureID.setDescription('SystemFanEnclosureID.')
systemFanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 1, 1, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, -1))).clone(namedValues=NamedValues(("ok", 0), ("fail", -1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemFanStatus.setStatus('mandatory')
if mibBuilder.loadTexts: systemFanStatus.setDescription('Systemfan status.')
systemFanSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 1, 1, 2, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemFanSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: systemFanSpeed.setDescription('Systemfan speed.')
systemPowerNumber = MibScalar((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 1, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemPowerNumber.setStatus('current')
if mibBuilder.loadTexts: systemPowerNumber.setDescription('The number of systemfans (regardless of\n         their current state) present on this system.')
systemPowerTable = MibTable((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 1, 1, 3, 2), )
if mibBuilder.loadTexts: systemPowerTable.setStatus('mandatory')
if mibBuilder.loadTexts: systemPowerTable.setDescription('A list of systemfans.  The number of\n         entries is given by the value of SystemPowerNumber.')
systemPowerTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 1, 1, 3, 2, 1), ).setIndexNames((0, "NAS-MIB", "systemPowerIndex"))
if mibBuilder.loadTexts: systemPowerTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: systemPowerTableEntry.setDescription('An system fan entry.')
systemPowerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 1, 1, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemPowerIndex.setStatus('mandatory')
if mibBuilder.loadTexts: systemPowerIndex.setDescription('SystemPowerIndex.')
systemPowerID = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 1, 1, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemPowerID.setStatus('mandatory')
if mibBuilder.loadTexts: systemPowerID.setDescription('SystemPowerID.')
systemPowerEnclosureID = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 1, 1, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemPowerEnclosureID.setStatus('mandatory')
if mibBuilder.loadTexts: systemPowerEnclosureID.setDescription('SystemPowerEnclosureID.')
systemPowerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 1, 1, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, -1))).clone(namedValues=NamedValues(("ok", 0), ("fail", -1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemPowerStatus.setStatus('mandatory')
if mibBuilder.loadTexts: systemPowerStatus.setDescription('Systemfan status.')
systemPowerFanSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 1, 1, 3, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemPowerFanSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: systemPowerFanSpeed.setDescription('SystemPower speed.')
systemPowerTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 1, 1, 3, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemPowerTemp.setStatus('mandatory')
if mibBuilder.loadTexts: systemPowerTemp.setDescription('SystemPower temperature in centigrade.')
cpuNumber = MibScalar((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 1, 1, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuNumber.setStatus('current')
if mibBuilder.loadTexts: cpuNumber.setDescription('The number of CPUs (regardless of\n         their current state) present on this system.')
cpuTemp = MibScalar((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 1, 1, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuTemp.setStatus('current')
if mibBuilder.loadTexts: cpuTemp.setDescription('CPU temperature in centigrade.')
cpuTable = MibTable((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 1, 1, 4, 3), )
if mibBuilder.loadTexts: cpuTable.setStatus('mandatory')
if mibBuilder.loadTexts: cpuTable.setDescription('A list of CPUs.  The number of\n         entries is given by the value of CPUNumber.')
cpuTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 1, 1, 4, 3, 1), ).setIndexNames((0, "NAS-MIB", "cpuIndex"))
if mibBuilder.loadTexts: cpuTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cpuTableEntry.setDescription('A CPU entry.')
cpuIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 1, 1, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cpuIndex.setDescription('CPUIndex.')
cpuID = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 1, 1, 4, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuID.setStatus('mandatory')
if mibBuilder.loadTexts: cpuID.setDescription('CPUID.')
cpuUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 1, 1, 1, 4, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuUsage.setStatus('mandatory')
if mibBuilder.loadTexts: cpuUsage.setDescription('CPUUsage.')
diskPerformanceNumber = MibScalar((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 11, 5, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskPerformanceNumber.setStatus('current')
if mibBuilder.loadTexts: diskPerformanceNumber.setDescription('The number of Devices (regardless of\n         their current state) for monitor perfrmance present on this system.')
diskPerformanceTable = MibTable((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 11, 5, 6, 2), )
if mibBuilder.loadTexts: diskPerformanceTable.setStatus('mandatory')
if mibBuilder.loadTexts: diskPerformanceTable.setDescription('A list of interface entries.  The number of\n         entries is given by the value of VolumeNumber.')
diskPerformanceTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 11, 5, 6, 2, 1), ).setIndexNames((0, "NAS-MIB", "diskPerformanceIndex"))
if mibBuilder.loadTexts: diskPerformanceTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: diskPerformanceTableEntry.setDescription('An system fan entry containing objects at the\n         subnetwork layer and below for a particular\n         interface.')
diskPerformanceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 11, 5, 6, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskPerformanceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: diskPerformanceIndex.setDescription('DiskPerformanceIndex.')
blvID = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 11, 5, 6, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: blvID.setStatus('mandatory')
if mibBuilder.loadTexts: blvID.setDescription('BLVID.')
iops = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 11, 5, 6, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iops.setStatus('mandatory')
if mibBuilder.loadTexts: iops.setDescription('IOPS.')
latency = MibTableColumn((1, 3, 6, 1, 4, 1, 24681, 1, 4, 1, 11, 5, 6, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: latency.setStatus('mandatory')
if mibBuilder.loadTexts: latency.setDescription('Latency.')
mibBuilder.exportSymbols("NAS-MIB", cpuTableEntry=cpuTableEntry, sysVolumeFSEX=sysVolumeFSEX, systemTemperature=systemTemperature, lunName=lunName, hdDescr=hdDescr, jBODHdTable4=jBODHdTable4, msataDiskSmartInfo=msataDiskSmartInfo, jBODHdDescr1=jBODHdDescr1, cpuIndex=cpuIndex, jBODHdDescr8=jBODHdDescr8, raidIndex=raidIndex, jBODHdIndex4=jBODHdIndex4, targeTable=targeTable, jBODHdTemperature4=jBODHdTemperature4, enclosureModel=enclosureModel, readHitRate=readHitRate, jBODHdDescr4=jBODHdDescr4, msataDiskModel=msataDiskModel, msataDiskSummary=msataDiskSummary, raidFreeSize=raidFreeSize, poolTableEntry=poolTableEntry, enclosureID=enclosureID, systemFanNumber=systemFanNumber, sysVolumeFS=sysVolumeFS, sysFanNumberEX=sysFanNumberEX, sysVolumeFreeSize=sysVolumeFreeSize, ifPacketsSent=ifPacketsSent, hostName=hostName, storageManager=storageManager, msataDiskID=msataDiskID, jBODHdCapacity5=jBODHdCapacity5, jBODHdStatus7=jBODHdStatus7, eventWarningMsg=eventWarningMsg, diskPerformanceTable=diskPerformanceTable, cpuTemp=cpuTemp, jBODHdEntry6=jBODHdEntry6, volumeID=volumeID, jBODHdEntry2=jBODHdEntry2, msataDiskNumber=msataDiskNumber, jBODHdStatus6=jBODHdStatus6, jBODHdTemperature3=jBODHdTemperature3, eventInform=eventInform, raidNumber=raidNumber, diskPerformance=diskPerformance, latency=latency, hdCapacityEX=hdCapacityEX, lunTable=lunTable, enclosureTableEntry=enclosureTableEntry, cpu_Temperature=cpu_Temperature, volume=volume, resourceMonitor=resourceMonitor, systemFan2TableEntry=systemFan2TableEntry, iSCSIService=iSCSIService, ifDescrEX=ifDescrEX, jBODHdIndex2=jBODHdIndex2, sysVolumeEntryEx=sysVolumeEntryEx, target=target, systemPowerTemp=systemPowerTemp, msataDiskIndex=msataDiskIndex, jBODHdStatus3=jBODHdStatus3, jBODHdModel6=jBODHdModel6, jBODHdTemperature5=jBODHdTemperature5, jBODInfosEntry=jBODInfosEntry, ifDescr=ifDescr, msataDiskEnclosureID=msataDiskEnclosureID, jBODHdNumber=jBODHdNumber, jBODHdSmartInfo3=jBODHdSmartInfo3, lunStatus=lunStatus, jBODInfos=jBODInfos, jBODHdStatus2=jBODHdStatus2, sysVolumeNumberEX=sysVolumeNumberEX, jBODHdModel3=jBODHdModel3, lunNumber=lunNumber, iSNSIP=iSNSIP, systemPowerStatus=systemPowerStatus, hostNameEX=hostNameEX, enclosureSystemTemp=enclosureSystemTemp, diskEnclosureID=diskEnclosureID, systemPowerIndex=systemPowerIndex, hdTemperatureEX=hdTemperatureEX, diskSummary=diskSummary, systemPower=systemPower, service=service, jBODHdTemperature2=jBODHdTemperature2, diskModel=diskModel, jBODHdModel5=jBODHdModel5, nasStorage=nasStorage, poolNumber=poolNumber, raidGroupTable=raidGroupTable, DisplayString=DisplayString, ifEntryEx=ifEntryEx, ifNumberEX=ifNumberEX, diskID=diskID, poolCapacity=poolCapacity, cpu=cpu, jBODHdSmartInfo4=jBODHdSmartInfo4, poolTable=poolTable, systemTraps=systemTraps, systemUptime=systemUptime, sysFanSpeed=sysFanSpeed, jBODHdEntry4=jBODHdEntry4, lun=lun, jBODBitmap=jBODBitmap, eventErrorMsg=eventErrorMsg, systemInfoEx=systemInfoEx, sysVolumeEntry=sysVolumeEntry, jBODHdTemperature6=jBODHdTemperature6, storage=storage, systemFanEnclosureID=systemFanEnclosureID, jBODHdTemperature7=jBODHdTemperature7, diskNumber=diskNumber, raidLevel=raidLevel, msataDiskTable=msataDiskTable, raidCapacity=raidCapacity, msataDiskTableEntry=msataDiskTableEntry, jBODHdCapacity8=jBODHdCapacity8, raidGroupTableEntry=raidGroupTableEntry, ifIndex=ifIndex, lunCapacity=lunCapacity, poolID=poolID, jBODHdModel1=jBODHdModel1, jBODHdSmartInfo8=jBODHdSmartInfo8, ifIndexEX=ifIndexEX, systemPowerEnclosureID=systemPowerEnclosureID, writeHitRate=writeHitRate, iSCSIStorage=iSCSIStorage, sysFanSpeedEX=sysFanSpeedEX, cpuUsage=cpuUsage, hdEntryEx=hdEntryEx, diskTemperture=diskTemperture, msataDisk=msataDisk, jBODHdEntry5=jBODHdEntry5, jBODHdIndex8=jBODHdIndex8, hdDescrEX=hdDescrEX, targetStatus=targetStatus, jBODHdCapacity1=jBODHdCapacity1, systemCPU_UsageEX=systemCPU_UsageEX, jBODHdModel2=jBODHdModel2, diskGlobalSpare=diskGlobalSpare, systemFanTableEx=systemFanTableEx, ifPacketsReceivedEX=ifPacketsReceivedEX, sysVolumeFreeSizeEX=sysVolumeFreeSizeEX, lunIndex=lunIndex, jBODHdTemperature1=jBODHdTemperature1, jBODHdCapacity7=jBODHdCapacity7, systemEventMsg=systemEventMsg, enclosureName=enclosureName, cacheAcceleration=cacheAcceleration, pool=pool, systemPowerTable=systemPowerTable, diskPerformanceNumber=diskPerformanceNumber, cpuID=cpuID, volumeFreeSize=volumeFreeSize, sysFanEntryEx=sysFanEntryEx, jBODHdSmartInfo6=jBODHdSmartInfo6, systemHdTable=systemHdTable, systemTotalMemEX=systemTotalMemEX, eventInformMsg=eventInformMsg, hdStatusEX=hdStatusEX, targetNumber=targetNumber, volumeThin=volumeThin, jBODHdSmartInfo2=jBODHdSmartInfo2, jBODHdDescr5=jBODHdDescr5, msataDiskCapacity=msataDiskCapacity, systemIfTable=systemIfTable, jBODHdCapacity6=jBODHdCapacity6, sysFanNumber=sysFanNumber, sysVolumeIndex=sysVolumeIndex, eventError=eventError, jBODHdCapacity4=jBODHdCapacity4, raid=raid, hdSmartInfo=hdSmartInfo, jBODHdTable7=jBODHdTable7, volumeTableEntry=volumeTableEntry, jBODHdEntry8=jBODHdEntry8, jBODHdIndex7=jBODHdIndex7, lunIsMap=lunIsMap, eventWarning=eventWarning, diskSmartInfo=diskSmartInfo, systemPowerNumber=systemPowerNumber, systemPowerID=systemPowerID, hdNumberEX=hdNumberEX, raidStatus=raidStatus, modelName=modelName, systemFan=systemFan, hdNumber=hdNumber, systemPowerFanSpeed=systemPowerFanSpeed, jBODid=jBODid, jBODHdDescr6=jBODHdDescr6, jBODHdSmartInfo7=jBODHdSmartInfo7, diskTableEntry=diskTableEntry, sysVolumeStatus=sysVolumeStatus, lunTableEntry=lunTableEntry, msataDiskTemperture=msataDiskTemperture, volumeIndex=volumeIndex, availablePercent=availablePercent, jBODHdStatus4=jBODHdStatus4, hdEntry=hdEntry, poolFreeSize=poolFreeSize, hdModelEX=hdModelEX, hdModel=hdModel, diskIndex=diskIndex, targetIQN=targetIQN, enclosureSlot=enclosureSlot, targeTableEntry=targeTableEntry, systemIfTableEx=systemIfTableEx, systemHdTableEX=systemHdTableEX, jBODHdIndex1=jBODHdIndex1, jBODHdStatus5=jBODHdStatus5, sysVolumeDescrEX=sysVolumeDescrEX, jBODHdDescr7=jBODHdDescr7, systemInfo=systemInfo, jBODHdEntry3=jBODHdEntry3, iSCSI=iSCSI, ifErrorPackets=ifErrorPackets, jBODInfo=jBODInfo, jBODHdTemperature8=jBODHdTemperature8, lunUsedPercent=lunUsedPercent, systemTemperatureEX=systemTemperatureEX, jBODHdCapacity2=jBODHdCapacity2, diskPerformanceIndex=diskPerformanceIndex, sysVolumeDescr=sysVolumeDescr, systemFanTable=systemFanTable, volumeNumber=volumeNumber, iSNSService=iSNSService, jBODHdTable3=jBODHdTable3, jBODHdEntry1=jBODHdEntry1, poolStatus=poolStatus, systemStatus=systemStatus, jBODHdTable2=jBODHdTable2, jBODHdIndex3=jBODHdIndex3, jBODHdDescr3=jBODHdDescr3, systemFanStatus=systemFanStatus, volumeSSDCache=volumeSSDCache, systemUptimeEX=systemUptimeEX, hdStatus=hdStatus, hdSmartInfoEX=hdSmartInfoEX, systemFreeMemEX=systemFreeMemEX, sysVolumeTotalSize=sysVolumeTotalSize, targetIndex=targetIndex, jBODHdIndex5=jBODHdIndex5, targetID=targetID, hdIndex=hdIndex, jBODHdDescr2=jBODHdDescr2, systemCPU_Usage=systemCPU_Usage, volumeCapacity=volumeCapacity, cpuTable=cpuTable, ifPacketsReceived=ifPacketsReceived, enclosurelNumber=enclosurelNumber, jBODHdTable5=jBODHdTable5, systemPowerTableEntry=systemPowerTableEntry, blvID=blvID, sysVolumeStatusEX=sysVolumeStatusEX, jBODHdTable1=jBODHdTable1)
mibBuilder.exportSymbols("NAS-MIB", systemTotalMem=systemTotalMem, jBODHdCapacity3=jBODHdCapacity3, msataDiskGlobalSpare=msataDiskGlobalSpare, systemVolumeTable=systemVolumeTable, raidBitmap=raidBitmap, volumeStatus=volumeStatus, enclosureIndex=enclosureIndex, iops=iops, jBODHdStatus1=jBODHdStatus1, cpu_TemperatureEX=cpu_TemperatureEX, cpuNumber=cpuNumber, ifPacketsSentEX=ifPacketsSentEX, targetName=targetName, ifEntry=ifEntry, sysFanEntry=sysFanEntry, enclosureTable=enclosureTable, storageSpace=storageSpace, enclosure=enclosure, storageSystem=storageSystem, storageSystemEx=storageSystemEx, hdTemperature=hdTemperature, sysVolumeNumber=sysVolumeNumber, jBODHdSmartInfo1=jBODHdSmartInfo1, lunBackupStatus=lunBackupStatus, jBODHdModel8=jBODHdModel8, sysVolumeIndexEX=sysVolumeIndexEX, volumeTable=volumeTable, systemFanID=systemFanID, diskTable=diskTable, ifNumber=ifNumber, diskCapacity=diskCapacity, iSCSIServicePort=iSCSIServicePort, sysFanDescr=sysFanDescr, sysFanIndexEX=sysFanIndexEX, systemFan2Table=systemFan2Table, components=components, jBODHdModel7=jBODHdModel7, jBODHdModel4=jBODHdModel4, raidID=raidID, volumeName=volumeName, jBODHdStatus8=jBODHdStatus8, systemFanSpeed=systemFanSpeed, hdIndexEX=hdIndexEX, systemSettings=systemSettings, systemVolumeTableEx=systemVolumeTableEx, disk=disk, jBODHdSmartInfo5=jBODHdSmartInfo5, sysFanIndex=sysFanIndex, sysFanDescrEX=sysFanDescrEX, jBODHdEntry7=jBODHdEntry7, systemFreeMem=systemFreeMem, jBODHdIndex6=jBODHdIndex6, ifErrorPacketsEX=ifErrorPacketsEX, jBODHdTable6=jBODHdTable6, lunID=lunID, hdCapacity=hdCapacity, diskPerformanceTableEntry=diskPerformanceTableEntry, enclosureSerialNum=enclosureSerialNum, sysVolumeTotalSizeEX=sysVolumeTotalSizeEX, poolIndex=poolIndex, status=status, modelNameEX=modelNameEX, jBODHdTable8=jBODHdTable8, systemFanIndex=systemFanIndex)
