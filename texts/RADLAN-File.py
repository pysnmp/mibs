#
# PySNMP MIB module RADLAN-File (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/radlan/RADLAN-File
# Produced by pysmi-1.1.12 at Mon Jul  1 10:58:40 2024
# On host fv-az665-510 platform Linux version 6.5.0-1022-azure by user runner
# Using Python version 3.10.14 (main, Jun 20 2024, 15:20:03) [GCC 11.4.0]
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint")
rlFile, = mibBuilder.importSymbols("RADLAN-MIB", "rlFile")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, Counter32, Counter64, Unsigned32, Integer32, Gauge32, ModuleIdentity, TimeTicks, Bits, IpAddress, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "Counter32", "Counter64", "Unsigned32", "Integer32", "Gauge32", "ModuleIdentity", "TimeTicks", "Bits", "IpAddress", "ObjectIdentity")
RowStatus, TextualConvention, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "DisplayString", "TruthValue")
rlFileMibVersion = MibScalar((1, 3, 6, 1, 4, 1, 89, 96, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlFileMibVersion.setStatus('current')
if mibBuilder.loadTexts: rlFileMibVersion.setDescription('Indicates the File System MIB version. The current version is 1.')
rlFileTable = MibTable((1, 3, 6, 1, 4, 1, 89, 96, 2), )
if mibBuilder.loadTexts: rlFileTable.setStatus('current')
if mibBuilder.loadTexts: rlFileTable.setDescription(' The (conceptual) table listing all the files\n          of the flash file system.')
rlFileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 96, 2, 1), ).setIndexNames((0, "RADLAN-File", "rlFileName"))
if mibBuilder.loadTexts: rlFileEntry.setStatus('current')
if mibBuilder.loadTexts: rlFileEntry.setDescription(' An entry (conceptual row) in the FileTable.')
rlFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 96, 2, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlFileName.setStatus('current')
if mibBuilder.loadTexts: rlFileName.setDescription('The name of the file.')
rlFilePermission = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 96, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("read", 1), ("write", 2), ("readWrite", 3), ("noReadNoWrite", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlFilePermission.setStatus('current')
if mibBuilder.loadTexts: rlFilePermission.setDescription('Specifies the permission level in which this file can be accessed. ')
rlFileSize = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 96, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlFileSize.setStatus('current')
if mibBuilder.loadTexts: rlFileSize.setDescription('The size of the file in bytes (actual size).')
rlFileModificationDate = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 96, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlFileModificationDate.setStatus('current')
if mibBuilder.loadTexts: rlFileModificationDate.setDescription('The time-stamp indicating the date of creation or last\n         modification of this file. The format of the time-stamp is\n         dd-mmm-yyyy')
rlFileModificationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 96, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlFileModificationTime.setStatus('current')
if mibBuilder.loadTexts: rlFileModificationTime.setDescription('The time-stamp indicating the time of creation or last\n         modification of this file. The format of the time-stamp is\n         hh:mm:ss')
rlFileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 96, 2, 1, 6), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlFileRowStatus.setStatus('current')
if mibBuilder.loadTexts: rlFileRowStatus.setDescription('It is used just to delete an entry')
rlFileFlashSize = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 96, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlFileFlashSize.setStatus('current')
if mibBuilder.loadTexts: rlFileFlashSize.setDescription('The size allocated for the file in bytes (allocated size).')
rlFileActionTable = MibTable((1, 3, 6, 1, 4, 1, 89, 96, 3), )
if mibBuilder.loadTexts: rlFileActionTable.setStatus('current')
if mibBuilder.loadTexts: rlFileActionTable.setDescription(' The (conceptual) table listing only one entry at a time\n          with parameters needed for performing an action on a file.')
rlFileActionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 96, 3, 1), ).setIndexNames((0, "RADLAN-File", "rlFileActionName"))
if mibBuilder.loadTexts: rlFileActionEntry.setStatus('current')
if mibBuilder.loadTexts: rlFileActionEntry.setDescription(' An entry (conceptual row) in the FileActionTable.')
rlFileActionName = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 96, 3, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlFileActionName.setStatus('current')
if mibBuilder.loadTexts: rlFileActionName.setDescription('The name of the file.')
rlFileActionNewName = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 96, 3, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlFileActionNewName.setStatus('current')
if mibBuilder.loadTexts: rlFileActionNewName.setDescription('The new name for the file (in case of action rename).')
rlFileActionRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 96, 3, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlFileActionRowStatus.setStatus('current')
if mibBuilder.loadTexts: rlFileActionRowStatus.setDescription('It is used to create an entry')
rlFileActionCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 96, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("rename", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlFileActionCommand.setStatus('current')
if mibBuilder.loadTexts: rlFileActionCommand.setDescription('Perform an action on the file.')
rlFileTotalSizeOfFlash = MibScalar((1, 3, 6, 1, 4, 1, 89, 96, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlFileTotalSizeOfFlash.setStatus('current')
if mibBuilder.loadTexts: rlFileTotalSizeOfFlash.setDescription('Indicates the total size of the flash in bytes.')
rlFileFreeSizeOfFlash = MibScalar((1, 3, 6, 1, 4, 1, 89, 96, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlFileFreeSizeOfFlash.setStatus('current')
if mibBuilder.loadTexts: rlFileFreeSizeOfFlash.setDescription('Indicates the number of free bytes in the flash.')
rlFileAuditingEnable = MibScalar((1, 3, 6, 1, 4, 1, 89, 96, 6), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlFileAuditingEnable.setStatus('current')
if mibBuilder.loadTexts: rlFileAuditingEnable.setDescription('Controls whether SysLog messages\n         should be issued on file rename/delete events')
mibBuilder.exportSymbols("RADLAN-File", rlFileActionRowStatus=rlFileActionRowStatus, rlFileActionName=rlFileActionName, rlFileSize=rlFileSize, rlFileFreeSizeOfFlash=rlFileFreeSizeOfFlash, rlFileMibVersion=rlFileMibVersion, rlFileTable=rlFileTable, rlFileActionNewName=rlFileActionNewName, rlFileModificationDate=rlFileModificationDate, rlFileRowStatus=rlFileRowStatus, rlFileActionEntry=rlFileActionEntry, rlFileTotalSizeOfFlash=rlFileTotalSizeOfFlash, rlFileFlashSize=rlFileFlashSize, rlFileEntry=rlFileEntry, rlFileActionCommand=rlFileActionCommand, rlFileModificationTime=rlFileModificationTime, rlFileAuditingEnable=rlFileAuditingEnable, rlFileActionTable=rlFileActionTable, rlFileName=rlFileName, rlFilePermission=rlFilePermission)
