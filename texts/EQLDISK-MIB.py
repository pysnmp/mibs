#
# PySNMP MIB module EQLDISK-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/equallogic/EQLDISK-MIB
# Produced by pysmi-1.1.12 at Wed May 29 02:43:12 2024
# On host fv-az569-426 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
eqlGroupId, = mibBuilder.importSymbols("EQLGROUP-MIB", "eqlGroupId")
eqlMemberIndex, = mibBuilder.importSymbols("EQLMEMBER-MIB", "eqlMemberIndex")
equalLogic, = mibBuilder.importSymbols("EQUALLOGIC-SMI", "equalLogic")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
TimeTicks, Gauge32, Counter32, enterprises, Bits, NotificationType, Counter64, iso, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, ModuleIdentity, Integer32, MibIdentifier, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Gauge32", "Counter32", "enterprises", "Bits", "NotificationType", "Counter64", "iso", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "ModuleIdentity", "Integer32", "MibIdentifier", "IpAddress")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
eqldiskModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 12740, 3))
eqldiskModule.setRevisions(('2002-09-06 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: eqldiskModule.setRevisionsDescriptions(('Initial revision',))
if mibBuilder.loadTexts: eqldiskModule.setLastUpdated('201503171528Z')
if mibBuilder.loadTexts: eqldiskModule.setOrganization('EqualLogic Inc.')
if mibBuilder.loadTexts: eqldiskModule.setContactInfo('Contact: Customer Support\n         Postal:  Dell Inc\n                  300 Innovative Way, Suite 301, Nashua, NH 03062\n         Tel:     +1 603-579-9762\n         E-mail:  US-NH-CS-TechnicalSupport@dell.com\n         WEB:     www.equallogic.com')
if mibBuilder.loadTexts: eqldiskModule.setDescription('Equallogic Inc Peer Storage Array disk table information \n\n         Copyright (c) 2002-2009 by Dell, Inc.\n\n         All rights reserved.  This software may not be copied, disclosed,\n         transferred, or used except in accordance with a license granted\n         by Dell, Inc.  This software embodies proprietary information\n         and trade secrets of Dell, Inc.\n        ')
eqldiskObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 12740, 3, 1))
eqldiskNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 12740, 3, 2))
eqldiskConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 12740, 3, 3))
eqlDiskTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 3, 1, 1), )
if mibBuilder.loadTexts: eqlDiskTable.setStatus('current')
if mibBuilder.loadTexts: eqlDiskTable.setDescription('EqualLogic-Dynamic Member Disk Table. \n                     This table contains disk status information. \n                     One table entry per disk. It is indexed by disk slot number. \n                     The number of entries is equal to the number of disks that are present in the system.')
eqlDiskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 3, 1, 1, 1), ).setIndexNames((0, "EQLGROUP-MIB", "eqlGroupId"), (0, "EQLMEMBER-MIB", "eqlMemberIndex"), (0, "EQLDISK-MIB", "eqlDiskIndex"))
if mibBuilder.loadTexts: eqlDiskEntry.setStatus('current')
if mibBuilder.loadTexts: eqlDiskEntry.setDescription('An entry (row) containing a list of disk status parameters.')
eqlDiskIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 3, 1, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: eqlDiskIndex.setStatus('current')
if mibBuilder.loadTexts: eqlDiskIndex.setDescription('The index value that uniquely identifies the disk.\n                     It is equal to the disk slot number plus one.')
eqlDiskType = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 3, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64)).clone('unknown disk type')).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDiskType.setStatus('current')
if mibBuilder.loadTexts: eqlDiskType.setDescription('This variable specifies the disk type.')
eqlDiskModelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 3, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40)).clone('unknown disk model')).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDiskModelNumber.setStatus('current')
if mibBuilder.loadTexts: eqlDiskModelNumber.setDescription('This variable specifies the disk model.')
eqlDiskRevisionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 3, 1, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8)).clone('?firmrev')).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDiskRevisionNumber.setStatus('current')
if mibBuilder.loadTexts: eqlDiskRevisionNumber.setDescription('This variable specifies the disk revision number.')
eqlDiskSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 3, 1, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20)).clone('unknown serial#')).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDiskSerialNumber.setStatus('current')
if mibBuilder.loadTexts: eqlDiskSerialNumber.setDescription('This variable specifies the disk serial number.')
eqlDiskSize = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 3, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDiskSize.setStatus('current')
if mibBuilder.loadTexts: eqlDiskSize.setDescription('This variable specifies the disk size in MB.')
eqlDiskAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 3, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("set-disk-on-line", 1), ("set-disk-off-line", 2), ("set-disk-spare", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlDiskAdminStatus.setStatus('current')
if mibBuilder.loadTexts: eqlDiskAdminStatus.setDescription('Command to take the disk off line or put it on line.\n                     This command is used in manual operation by the operator.')
eqlDiskStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 3, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("on-line", 1), ("spare", 2), ("failed", 3), ("off-line", 4), ("alt-sig", 5), ("too-small", 6), ("history-of-failures", 7), ("unsupported-version", 8), ("unhealthy", 9), ("replacement", 10), ("encrypted", 11), ("notApproved", 12), ("preempt-failed", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDiskStatus.setStatus('current')
if mibBuilder.loadTexts: eqlDiskStatus.setDescription("Disk status will be on-line when the disk is being used in the raid set. \n                     Disk status will be spare when the disk is not currently being used by raid configuration \n                       but may be used when status of a currently on-line disk changes. \n                     Disk status will be failed when either it is faulted or when there is no power. \n                     Disk status will be offline when the disk doesn't fall into any of these other categories.\n                     Disk status will be alt-sig (foreign) when the disk belongs to a RAIDset from another\n                       EqualLogic system. The disk can be converted to a spare.\n                     Disk status will be too-small if drive is too small to be used. The drive cannot be converted to spare.\n                     Disk status will be history-of-failures if drive has a history of failures. The drive can be converted to spare.\n                     Disk status will be unsupported-version if drive label is from a later release. The drive can be converted to spare.\n                     Disk status will be unhealthy if drive is unhealthy.\n                     Disk status will be replacement if drive is a replacement drive.\n                     Disk status will be encrypted if the drive is encrypted and cannot be decrypted.\n                     Disk status will be notApproved if the drive is not DELL approved.\n                     Disk status will be preempt-failed if the drive is off-line due to excessive errors. ")
eqlDiskErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 3, 1, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDiskErrors.setStatus('current')
if mibBuilder.loadTexts: eqlDiskErrors.setDescription('This variable specifies the number of disk errors since drive power on.')
eqlDiskId = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 3, 1, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDiskId.setStatus('current')
if mibBuilder.loadTexts: eqlDiskId.setDescription('This variable specifies the disk id as specified by the subsystem.')
eqlDiskSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 3, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 13))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDiskSlot.setStatus('current')
if mibBuilder.loadTexts: eqlDiskSlot.setDescription('The zero-based slot number for the physical location of this disk, as marked on the back panel.')
eqlDiskTypeEnum = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 3, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 0), ("sata", 1), ("sas", 2), ("sata-ssd", 3), ("sas-ssd", 4), ("sas-sed-hdd", 5), ("sas-sed-ssd", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDiskTypeEnum.setStatus('current')
if mibBuilder.loadTexts: eqlDiskTypeEnum.setDescription('Type of this disk.')
eqlDiskRPM = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 3, 1, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDiskRPM.setStatus('current')
if mibBuilder.loadTexts: eqlDiskRPM.setDescription('This variable specifies the disk RPM(Revolutions per Minute) as specified by the manufacturer not measured.\n\t              if 0, disk RPM is unknown,\n                      if 1, disk is non-rotating media - SSD(Solid State Disk)\n                      otherwise this is the disk RPM.')
eqlDiskSectorSize = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 3, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("sector-size-512-bytes", 0), ("sector-size-4096-bytes", 1), ("sector-size-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDiskSectorSize.setStatus('current')
if mibBuilder.loadTexts: eqlDiskSectorSize.setDescription('This variable specifies the disk sector size as specified by the manufacturer.\n\t              if 0, disk sector size is 512 bytes,\n                      if 1, disk sector size is 4096 bytes')
eqlDiskManufacturingInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 3, 1, 1, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20)).clone('mfginfo?')).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDiskManufacturingInfo.setStatus('current')
if mibBuilder.loadTexts: eqlDiskManufacturingInfo.setDescription('This variable specifies manufacturing data for the drive.')
eqlDiskPI = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 3, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("pi-disabled", 0), ("pi-enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDiskPI.setStatus('current')
if mibBuilder.loadTexts: eqlDiskPI.setDescription('This variable specifies whether Protection Information (PI) is enabled on the drive.')
eqlDiskHealth = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 3, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("smart-status-not-available", 0), ("smart-ok", 1), ("smart-tripped", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDiskHealth.setStatus('current')
if mibBuilder.loadTexts: eqlDiskHealth.setDescription('Disk status will be smart-status-not-available when the disk is offline or failed.\n                     Disk status will be smart-ok when the disk does not report itself to have exceeded its internal\n                       SMART threshold for errors.\n                     Disk status will be smart-tripped when the disk reports itself to have exceeded its internal\n                       SMART threshold for errors.')
eqlDiskStatusTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 3, 1, 2), )
if mibBuilder.loadTexts: eqlDiskStatusTable.setStatus('current')
if mibBuilder.loadTexts: eqlDiskStatusTable.setDescription('EqualLogic-Dynamic Disk Status Table. \n                     This table contains disk status information. \n                     One table entry per disk. It is indexed by disk slot number. \n                     The number of entries is equal to the number of disks that are present in the system.')
eqlDiskStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 3, 1, 2, 1), )
eqlDiskEntry.registerAugmentions(("EQLDISK-MIB", "eqlDiskStatusEntry"))
eqlDiskStatusEntry.setIndexNames(*eqlDiskEntry.getIndexNames())
if mibBuilder.loadTexts: eqlDiskStatusEntry.setStatus('current')
if mibBuilder.loadTexts: eqlDiskStatusEntry.setDescription('An entry (row) containing a list of disk status parameters.')
eqlDiskStatusXfers = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 3, 1, 2, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDiskStatusXfers.setStatus('current')
if mibBuilder.loadTexts: eqlDiskStatusXfers.setDescription('Total number of succesfull transfers')
eqlDiskStatusBytesRead = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 3, 1, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDiskStatusBytesRead.setStatus('current')
if mibBuilder.loadTexts: eqlDiskStatusBytesRead.setDescription('This variable specifies total number of Mbytes read.')
eqlDiskStatusBytesWritten = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 3, 1, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDiskStatusBytesWritten.setStatus('current')
if mibBuilder.loadTexts: eqlDiskStatusBytesWritten.setDescription('This variable specifies total number of Mbytes written.')
eqlDiskStatusBusyTime = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 3, 1, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDiskStatusBusyTime.setStatus('current')
if mibBuilder.loadTexts: eqlDiskStatusBusyTime.setDescription('This variable specifies total time in seconds spent busy.')
eqlDiskStatusNumIOs = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 3, 1, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDiskStatusNumIOs.setStatus('current')
if mibBuilder.loadTexts: eqlDiskStatusNumIOs.setDescription('This variable specifies number of IO operations\n                     currently outstanding.')
eqlDiskStatusFailXfers = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 3, 1, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDiskStatusFailXfers.setStatus('current')
if mibBuilder.loadTexts: eqlDiskStatusFailXfers.setDescription('This variable specifies number of failed transfers.')
eqlDiskStatusNumResets = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 3, 1, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDiskStatusNumResets.setStatus('current')
if mibBuilder.loadTexts: eqlDiskStatusNumResets.setDescription('This variable specifies total SATA reset count.')
eqlDiskStatusTotalQD = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 3, 1, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDiskStatusTotalQD.setStatus('current')
if mibBuilder.loadTexts: eqlDiskStatusTotalQD.setDescription('This variable serves as a continuous counter for disk queue depth.')
eqlDiskStatusLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 3, 1, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDiskStatusLifetime.setStatus('current')
if mibBuilder.loadTexts: eqlDiskStatusLifetime.setDescription('This variable specifies remaining life on SSD drives which report it.')
eqlDiskErrorTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 3, 1, 3), )
if mibBuilder.loadTexts: eqlDiskErrorTable.setStatus('current')
if mibBuilder.loadTexts: eqlDiskErrorTable.setDescription('EqualLogic-Dynamic Disk Error Table. \n                     This table contains disk error information. \n                     One table entry per disk. It is indexed by disk slot number. \n                     The number of entries is equal to the number of disks that are present in the system.')
eqlDiskErrorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 3, 1, 3, 1), )
eqlDiskEntry.registerAugmentions(("EQLDISK-MIB", "eqlDiskErrorEntry"))
eqlDiskErrorEntry.setIndexNames(*eqlDiskEntry.getIndexNames())
if mibBuilder.loadTexts: eqlDiskErrorEntry.setStatus('current')
if mibBuilder.loadTexts: eqlDiskErrorEntry.setDescription('An entry (row) containing a list of disk error parameters.')
eqlDiskErrorPhyReady = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 3, 1, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDiskErrorPhyReady.setStatus('current')
if mibBuilder.loadTexts: eqlDiskErrorPhyReady.setDescription('PhyREady changed count.')
eqlDiskErrorPhyInternal = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 3, 1, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDiskErrorPhyInternal.setStatus('current')
if mibBuilder.loadTexts: eqlDiskErrorPhyInternal.setDescription('This variable specifies total number of Phy internal errors.')
eqlDiskErrorCommWake = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 3, 1, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDiskErrorCommWake.setStatus('current')
if mibBuilder.loadTexts: eqlDiskErrorCommWake.setDescription('This variable specifies Comm wake count.')
eqlDiskErrorDecode10b8b = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 3, 1, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDiskErrorDecode10b8b.setStatus('current')
if mibBuilder.loadTexts: eqlDiskErrorDecode10b8b.setDescription('This variable specifies 10b to 8b decode error count.')
eqlDiskErrorDisparity = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 3, 1, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDiskErrorDisparity.setStatus('current')
if mibBuilder.loadTexts: eqlDiskErrorDisparity.setDescription('This variable specifies disparity error count.')
eqlDiskErrorCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 3, 1, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDiskErrorCRC.setStatus('current')
if mibBuilder.loadTexts: eqlDiskErrorCRC.setDescription('This variable specifies CRC error count.')
eqlDiskErrorHandShake = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 3, 1, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDiskErrorHandShake.setStatus('current')
if mibBuilder.loadTexts: eqlDiskErrorHandShake.setDescription('This variable specifies handshake error count.')
eqlDiskErrorLinkSeq = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 3, 1, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDiskErrorLinkSeq.setStatus('current')
if mibBuilder.loadTexts: eqlDiskErrorLinkSeq.setDescription('This variable specifies Link Sequence error count.')
eqlDiskErrorTransportState = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 3, 1, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDiskErrorTransportState.setStatus('current')
if mibBuilder.loadTexts: eqlDiskErrorTransportState.setDescription('This variable specifies Transport State Transitions error count.')
eqlDiskErrorUnrecFIS = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 3, 1, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDiskErrorUnrecFIS.setStatus('current')
if mibBuilder.loadTexts: eqlDiskErrorUnrecFIS.setDescription('This variable specifies Unrecognised FIS type error count.')
eqlDiskSmartInfoTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 3, 1, 4), )
if mibBuilder.loadTexts: eqlDiskSmartInfoTable.setStatus('current')
if mibBuilder.loadTexts: eqlDiskSmartInfoTable.setDescription('EqualLogic-Dynamic Disk SMART Info Table. \n                    This table contains the SMART info for each disk. It is indexed by disk \n\t\t\t\t\tslot number. The number of entries is equal to the number of disks that \n\t\t\t\t\tare present in the system.')
eqlDiskSmartInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 3, 1, 4, 1), )
eqlDiskEntry.registerAugmentions(("EQLDISK-MIB", "eqlDiskSmartInfoEntry"))
eqlDiskSmartInfoEntry.setIndexNames(*eqlDiskEntry.getIndexNames())
if mibBuilder.loadTexts: eqlDiskSmartInfoEntry.setStatus('current')
if mibBuilder.loadTexts: eqlDiskSmartInfoEntry.setDescription('An entry (row) containing a list of disk SMART info parameters.')
eqlDiskSmartInfoRawReadErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 3, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDiskSmartInfoRawReadErrorRate.setStatus('current')
if mibBuilder.loadTexts: eqlDiskSmartInfoRawReadErrorRate.setDescription('')
eqlDiskSmartInfoRawReadErrorRateWorst = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 3, 1, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDiskSmartInfoRawReadErrorRateWorst.setStatus('current')
if mibBuilder.loadTexts: eqlDiskSmartInfoRawReadErrorRateWorst.setDescription('')
eqlDiskSmartInfoThroughputPerformance = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 3, 1, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDiskSmartInfoThroughputPerformance.setStatus('current')
if mibBuilder.loadTexts: eqlDiskSmartInfoThroughputPerformance.setDescription('')
eqlDiskSmartInfoThroughputPerformanceWorst = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 3, 1, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDiskSmartInfoThroughputPerformanceWorst.setStatus('current')
if mibBuilder.loadTexts: eqlDiskSmartInfoThroughputPerformanceWorst.setDescription('')
eqlDiskSmartInfoSpinUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 3, 1, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDiskSmartInfoSpinUpTime.setStatus('current')
if mibBuilder.loadTexts: eqlDiskSmartInfoSpinUpTime.setDescription('')
eqlDiskSmartInfoSpinUpTimeWorst = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 3, 1, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDiskSmartInfoSpinUpTimeWorst.setStatus('current')
if mibBuilder.loadTexts: eqlDiskSmartInfoSpinUpTimeWorst.setDescription('')
eqlDiskSmartInfoStartStopCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 3, 1, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDiskSmartInfoStartStopCount.setStatus('current')
if mibBuilder.loadTexts: eqlDiskSmartInfoStartStopCount.setDescription('')
eqlDiskSmartInfoStartStopCountWorst = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 3, 1, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDiskSmartInfoStartStopCountWorst.setStatus('current')
if mibBuilder.loadTexts: eqlDiskSmartInfoStartStopCountWorst.setDescription('')
eqlDiskSmartInfoReallocatedSectorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 3, 1, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDiskSmartInfoReallocatedSectorCount.setStatus('current')
if mibBuilder.loadTexts: eqlDiskSmartInfoReallocatedSectorCount.setDescription('')
eqlDiskSmartInfoReallocatedSectorCountWorst = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 3, 1, 4, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDiskSmartInfoReallocatedSectorCountWorst.setStatus('current')
if mibBuilder.loadTexts: eqlDiskSmartInfoReallocatedSectorCountWorst.setDescription('')
eqlDiskSmartInfoReadChannelMargin = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 3, 1, 4, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDiskSmartInfoReadChannelMargin.setStatus('current')
if mibBuilder.loadTexts: eqlDiskSmartInfoReadChannelMargin.setDescription('')
eqlDiskSmartInfoReadChannelMarginWorst = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 3, 1, 4, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDiskSmartInfoReadChannelMarginWorst.setStatus('current')
if mibBuilder.loadTexts: eqlDiskSmartInfoReadChannelMarginWorst.setDescription('')
eqlDiskSmartInfoSeekErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 3, 1, 4, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDiskSmartInfoSeekErrorRate.setStatus('current')
if mibBuilder.loadTexts: eqlDiskSmartInfoSeekErrorRate.setDescription('')
eqlDiskSmartInfoSeekErrorRateWorst = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 3, 1, 4, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDiskSmartInfoSeekErrorRateWorst.setStatus('current')
if mibBuilder.loadTexts: eqlDiskSmartInfoSeekErrorRateWorst.setDescription('')
eqlDiskSmartInfoSeekPerformance = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 3, 1, 4, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDiskSmartInfoSeekPerformance.setStatus('current')
if mibBuilder.loadTexts: eqlDiskSmartInfoSeekPerformance.setDescription('')
eqlDiskSmartInfoSeekPerformanceWorst = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 3, 1, 4, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDiskSmartInfoSeekPerformanceWorst.setStatus('current')
if mibBuilder.loadTexts: eqlDiskSmartInfoSeekPerformanceWorst.setDescription('')
eqlDiskSmartInfoPowerOnHours = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 3, 1, 4, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDiskSmartInfoPowerOnHours.setStatus('current')
if mibBuilder.loadTexts: eqlDiskSmartInfoPowerOnHours.setDescription('')
eqlDiskSmartInfoPowerOnHoursWorst = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 3, 1, 4, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDiskSmartInfoPowerOnHoursWorst.setStatus('current')
if mibBuilder.loadTexts: eqlDiskSmartInfoPowerOnHoursWorst.setDescription('')
eqlDiskSmartInfoSpinupRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 3, 1, 4, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDiskSmartInfoSpinupRetries.setStatus('current')
if mibBuilder.loadTexts: eqlDiskSmartInfoSpinupRetries.setDescription('')
eqlDiskSmartInfoSpinupRetriesWorst = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 3, 1, 4, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDiskSmartInfoSpinupRetriesWorst.setStatus('current')
if mibBuilder.loadTexts: eqlDiskSmartInfoSpinupRetriesWorst.setDescription('')
eqlDiskSmartInfoDriveRecalibRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 3, 1, 4, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDiskSmartInfoDriveRecalibRetryCount.setStatus('current')
if mibBuilder.loadTexts: eqlDiskSmartInfoDriveRecalibRetryCount.setDescription('')
eqlDiskSmartInfoDriveRecalibRetryCountWorst = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 3, 1, 4, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDiskSmartInfoDriveRecalibRetryCountWorst.setStatus('current')
if mibBuilder.loadTexts: eqlDiskSmartInfoDriveRecalibRetryCountWorst.setDescription('')
eqlDiskSmartInfoPowerCycleCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 3, 1, 4, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDiskSmartInfoPowerCycleCount.setStatus('current')
if mibBuilder.loadTexts: eqlDiskSmartInfoPowerCycleCount.setDescription('')
eqlDiskSmartInfoPowerCycleCountWorst = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 3, 1, 4, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDiskSmartInfoPowerCycleCountWorst.setStatus('current')
if mibBuilder.loadTexts: eqlDiskSmartInfoPowerCycleCountWorst.setDescription('')
eqlDiskSmartInfoReadSoftErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 3, 1, 4, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDiskSmartInfoReadSoftErrorRate.setStatus('current')
if mibBuilder.loadTexts: eqlDiskSmartInfoReadSoftErrorRate.setDescription('')
eqlDiskSmartInfoReadSoftErrorRateWorst = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 3, 1, 4, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDiskSmartInfoReadSoftErrorRateWorst.setStatus('current')
if mibBuilder.loadTexts: eqlDiskSmartInfoReadSoftErrorRateWorst.setDescription('')
eqlDiskSmartInfoEmergencyRetractCycles = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 3, 1, 4, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDiskSmartInfoEmergencyRetractCycles.setStatus('current')
if mibBuilder.loadTexts: eqlDiskSmartInfoEmergencyRetractCycles.setDescription('')
eqlDiskSmartInfoEmergencyRetractCyclesWorst = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 3, 1, 4, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDiskSmartInfoEmergencyRetractCyclesWorst.setStatus('current')
if mibBuilder.loadTexts: eqlDiskSmartInfoEmergencyRetractCyclesWorst.setDescription('')
eqlDiskSmartInfoLoadUnloadCycles = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 3, 1, 4, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDiskSmartInfoLoadUnloadCycles.setStatus('current')
if mibBuilder.loadTexts: eqlDiskSmartInfoLoadUnloadCycles.setDescription('')
eqlDiskSmartInfoLoadUnloadCyclesWorst = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 3, 1, 4, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDiskSmartInfoLoadUnloadCyclesWorst.setStatus('current')
if mibBuilder.loadTexts: eqlDiskSmartInfoLoadUnloadCyclesWorst.setDescription('')
eqlDiskSmartInfoHDDTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 3, 1, 4, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDiskSmartInfoHDDTemp.setStatus('current')
if mibBuilder.loadTexts: eqlDiskSmartInfoHDDTemp.setDescription('')
eqlDiskSmartInfoHDDTempWorst = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 3, 1, 4, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDiskSmartInfoHDDTempWorst.setStatus('current')
if mibBuilder.loadTexts: eqlDiskSmartInfoHDDTempWorst.setDescription('')
eqlDiskSmartInfoOnTheFlyErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 3, 1, 4, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDiskSmartInfoOnTheFlyErrorRate.setStatus('current')
if mibBuilder.loadTexts: eqlDiskSmartInfoOnTheFlyErrorRate.setDescription('')
eqlDiskSmartInfoOnTheFlyErrorRateWorst = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 3, 1, 4, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDiskSmartInfoOnTheFlyErrorRateWorst.setStatus('current')
if mibBuilder.loadTexts: eqlDiskSmartInfoOnTheFlyErrorRateWorst.setDescription('')
eqlDiskSmartInfoSelfTestReallocSectors = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 3, 1, 4, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDiskSmartInfoSelfTestReallocSectors.setStatus('current')
if mibBuilder.loadTexts: eqlDiskSmartInfoSelfTestReallocSectors.setDescription('')
eqlDiskSmartInfoSelfTestReallocSectorsWorst = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 3, 1, 4, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDiskSmartInfoSelfTestReallocSectorsWorst.setStatus('current')
if mibBuilder.loadTexts: eqlDiskSmartInfoSelfTestReallocSectorsWorst.setDescription('')
eqlDiskSmartInfoPendingDefects = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 3, 1, 4, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDiskSmartInfoPendingDefects.setStatus('current')
if mibBuilder.loadTexts: eqlDiskSmartInfoPendingDefects.setDescription('')
eqlDiskSmartInfoPendingDefectsWorst = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 3, 1, 4, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDiskSmartInfoPendingDefectsWorst.setStatus('current')
if mibBuilder.loadTexts: eqlDiskSmartInfoPendingDefectsWorst.setDescription('')
eqlDiskSmartInfoOfflineSurfaceScan = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 3, 1, 4, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDiskSmartInfoOfflineSurfaceScan.setStatus('current')
if mibBuilder.loadTexts: eqlDiskSmartInfoOfflineSurfaceScan.setDescription('')
eqlDiskSmartInfoOfflineSurfaceScanWorst = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 3, 1, 4, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDiskSmartInfoOfflineSurfaceScanWorst.setStatus('current')
if mibBuilder.loadTexts: eqlDiskSmartInfoOfflineSurfaceScanWorst.setDescription('')
eqlDiskSmartInfoUltraDMACRCErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 3, 1, 4, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDiskSmartInfoUltraDMACRCErrorRate.setStatus('current')
if mibBuilder.loadTexts: eqlDiskSmartInfoUltraDMACRCErrorRate.setDescription('')
eqlDiskSmartInfoUltraDMACRCErrorRateWorst = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 3, 1, 4, 1, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDiskSmartInfoUltraDMACRCErrorRateWorst.setStatus('current')
if mibBuilder.loadTexts: eqlDiskSmartInfoUltraDMACRCErrorRateWorst.setDescription('')
eqlDiskSmartInfoWritePreampErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 3, 1, 4, 1, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDiskSmartInfoWritePreampErrors.setStatus('current')
if mibBuilder.loadTexts: eqlDiskSmartInfoWritePreampErrors.setDescription('')
eqlDiskSmartInfoWritePreampErrorsWorst = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 3, 1, 4, 1, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDiskSmartInfoWritePreampErrorsWorst.setStatus('current')
if mibBuilder.loadTexts: eqlDiskSmartInfoWritePreampErrorsWorst.setDescription('')
eqlDiskSmartInfoOffTrackErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 3, 1, 4, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDiskSmartInfoOffTrackErrors.setStatus('current')
if mibBuilder.loadTexts: eqlDiskSmartInfoOffTrackErrors.setDescription('')
eqlDiskSmartInfoOffTrackErrorsWorst = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 3, 1, 4, 1, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDiskSmartInfoOffTrackErrorsWorst.setStatus('current')
if mibBuilder.loadTexts: eqlDiskSmartInfoOffTrackErrorsWorst.setDescription('')
eqlDiskSmartInfoDAMErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 3, 1, 4, 1, 47), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDiskSmartInfoDAMErrorRate.setStatus('current')
if mibBuilder.loadTexts: eqlDiskSmartInfoDAMErrorRate.setDescription('')
eqlDiskSmartInfoDAMErrorRateWorst = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 3, 1, 4, 1, 48), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDiskSmartInfoDAMErrorRateWorst.setStatus('current')
if mibBuilder.loadTexts: eqlDiskSmartInfoDAMErrorRateWorst.setDescription('')
eqlDiskSmartInfoECCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 3, 1, 4, 1, 49), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDiskSmartInfoECCErrors.setStatus('current')
if mibBuilder.loadTexts: eqlDiskSmartInfoECCErrors.setDescription('')
eqlDiskSmartInfoECCErrorsWorst = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 3, 1, 4, 1, 50), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDiskSmartInfoECCErrorsWorst.setStatus('current')
if mibBuilder.loadTexts: eqlDiskSmartInfoECCErrorsWorst.setDescription('')
eqlDiskSmartInfoSoftECCCorrection = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 3, 1, 4, 1, 51), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDiskSmartInfoSoftECCCorrection.setStatus('current')
if mibBuilder.loadTexts: eqlDiskSmartInfoSoftECCCorrection.setDescription('')
eqlDiskSmartInfoSoftECCCorrectionWorst = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 3, 1, 4, 1, 52), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDiskSmartInfoSoftECCCorrectionWorst.setStatus('current')
if mibBuilder.loadTexts: eqlDiskSmartInfoSoftECCCorrectionWorst.setDescription('')
eqlDiskSmartInfoThermalAsperityRate = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 3, 1, 4, 1, 53), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDiskSmartInfoThermalAsperityRate.setStatus('current')
if mibBuilder.loadTexts: eqlDiskSmartInfoThermalAsperityRate.setDescription('')
eqlDiskSmartInfoThermalAsperityRateWorst = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 3, 1, 4, 1, 54), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDiskSmartInfoThermalAsperityRateWorst.setStatus('current')
if mibBuilder.loadTexts: eqlDiskSmartInfoThermalAsperityRateWorst.setDescription('')
eqlDiskSmartInfoSpinHighCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 3, 1, 4, 1, 55), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDiskSmartInfoSpinHighCount.setStatus('current')
if mibBuilder.loadTexts: eqlDiskSmartInfoSpinHighCount.setDescription('')
eqlDiskSmartInfoSpinHighCountWorst = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 3, 1, 4, 1, 56), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDiskSmartInfoSpinHighCountWorst.setStatus('current')
if mibBuilder.loadTexts: eqlDiskSmartInfoSpinHighCountWorst.setDescription('')
eqlDiskSmartInfoSpinBuzz = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 3, 1, 4, 1, 57), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDiskSmartInfoSpinBuzz.setStatus('current')
if mibBuilder.loadTexts: eqlDiskSmartInfoSpinBuzz.setDescription('')
eqlDiskSmartInfoSpinBuzzWorst = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 3, 1, 4, 1, 58), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDiskSmartInfoSpinBuzzWorst.setStatus('current')
if mibBuilder.loadTexts: eqlDiskSmartInfoSpinBuzzWorst.setDescription('')
eqlDiskSmartInfoOfflineSeekPerformance = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 3, 1, 4, 1, 59), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDiskSmartInfoOfflineSeekPerformance.setStatus('current')
if mibBuilder.loadTexts: eqlDiskSmartInfoOfflineSeekPerformance.setDescription('')
eqlDiskSmartInfoOfflineSeekPerformanceWorst = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 3, 1, 4, 1, 60), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDiskSmartInfoOfflineSeekPerformanceWorst.setStatus('current')
if mibBuilder.loadTexts: eqlDiskSmartInfoOfflineSeekPerformanceWorst.setDescription('')
eqlDiskSmartInfoThresholdExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 3, 1, 4, 1, 61), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDiskSmartInfoThresholdExceeded.setStatus('current')
if mibBuilder.loadTexts: eqlDiskSmartInfoThresholdExceeded.setDescription('')
eqldiskMgmtNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 12740, 3, 2, 1))
eqlDiskStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 12740, 3, 2, 1, 1)).setObjects(("EQLDISK-MIB", "eqlDiskStatus"), ("EQLDISK-MIB", "eqlDiskSlot"))
if mibBuilder.loadTexts: eqlDiskStatusChange.setStatus('current')
if mibBuilder.loadTexts: eqlDiskStatusChange.setDescription('Sent when eqlDiskStatus changes from one state to another state')
mibBuilder.exportSymbols("EQLDISK-MIB", eqlDiskSmartInfoPendingDefects=eqlDiskSmartInfoPendingDefects, eqlDiskErrors=eqlDiskErrors, eqldiskConformance=eqldiskConformance, eqlDiskErrorTransportState=eqlDiskErrorTransportState, eqlDiskSmartInfoEntry=eqlDiskSmartInfoEntry, eqlDiskSmartInfoSpinHighCountWorst=eqlDiskSmartInfoSpinHighCountWorst, eqlDiskErrorCRC=eqlDiskErrorCRC, eqlDiskSmartInfoSeekPerformanceWorst=eqlDiskSmartInfoSeekPerformanceWorst, eqlDiskErrorLinkSeq=eqlDiskErrorLinkSeq, eqlDiskErrorDisparity=eqlDiskErrorDisparity, eqlDiskHealth=eqlDiskHealth, eqlDiskSmartInfoReallocatedSectorCount=eqlDiskSmartInfoReallocatedSectorCount, eqlDiskSmartInfoLoadUnloadCyclesWorst=eqlDiskSmartInfoLoadUnloadCyclesWorst, eqlDiskErrorUnrecFIS=eqlDiskErrorUnrecFIS, eqlDiskSmartInfoReadChannelMarginWorst=eqlDiskSmartInfoReadChannelMarginWorst, PYSNMP_MODULE_ID=eqldiskModule, eqlDiskSmartInfoReallocatedSectorCountWorst=eqlDiskSmartInfoReallocatedSectorCountWorst, eqlDiskSmartInfoDAMErrorRate=eqlDiskSmartInfoDAMErrorRate, eqlDiskSmartInfoDAMErrorRateWorst=eqlDiskSmartInfoDAMErrorRateWorst, eqlDiskSmartInfoThresholdExceeded=eqlDiskSmartInfoThresholdExceeded, eqlDiskSmartInfoUltraDMACRCErrorRate=eqlDiskSmartInfoUltraDMACRCErrorRate, eqlDiskStatusBusyTime=eqlDiskStatusBusyTime, eqlDiskSmartInfoSoftECCCorrection=eqlDiskSmartInfoSoftECCCorrection, eqlDiskSmartInfoStartStopCount=eqlDiskSmartInfoStartStopCount, eqlDiskSmartInfoSpinBuzzWorst=eqlDiskSmartInfoSpinBuzzWorst, eqlDiskSmartInfoOfflineSeekPerformanceWorst=eqlDiskSmartInfoOfflineSeekPerformanceWorst, eqlDiskIndex=eqlDiskIndex, eqlDiskErrorTable=eqlDiskErrorTable, eqlDiskEntry=eqlDiskEntry, eqlDiskSmartInfoSpinupRetriesWorst=eqlDiskSmartInfoSpinupRetriesWorst, eqlDiskSmartInfoStartStopCountWorst=eqlDiskSmartInfoStartStopCountWorst, eqlDiskErrorCommWake=eqlDiskErrorCommWake, eqlDiskSmartInfoSelfTestReallocSectorsWorst=eqlDiskSmartInfoSelfTestReallocSectorsWorst, eqlDiskStatusXfers=eqlDiskStatusXfers, eqlDiskRevisionNumber=eqlDiskRevisionNumber, eqlDiskErrorPhyReady=eqlDiskErrorPhyReady, eqlDiskSmartInfoTable=eqlDiskSmartInfoTable, eqlDiskStatusBytesWritten=eqlDiskStatusBytesWritten, eqlDiskSmartInfoSeekPerformance=eqlDiskSmartInfoSeekPerformance, eqlDiskStatusFailXfers=eqlDiskStatusFailXfers, eqlDiskSmartInfoPowerOnHoursWorst=eqlDiskSmartInfoPowerOnHoursWorst, eqlDiskSmartInfoReadSoftErrorRateWorst=eqlDiskSmartInfoReadSoftErrorRateWorst, eqlDiskSmartInfoPendingDefectsWorst=eqlDiskSmartInfoPendingDefectsWorst, eqlDiskSmartInfoSpinUpTimeWorst=eqlDiskSmartInfoSpinUpTimeWorst, eqlDiskSmartInfoPowerCycleCountWorst=eqlDiskSmartInfoPowerCycleCountWorst, eqlDiskSmartInfoDriveRecalibRetryCountWorst=eqlDiskSmartInfoDriveRecalibRetryCountWorst, eqlDiskSmartInfoEmergencyRetractCycles=eqlDiskSmartInfoEmergencyRetractCycles, eqlDiskStatusEntry=eqlDiskStatusEntry, eqlDiskSmartInfoRawReadErrorRate=eqlDiskSmartInfoRawReadErrorRate, eqlDiskSerialNumber=eqlDiskSerialNumber, eqlDiskStatusTotalQD=eqlDiskStatusTotalQD, eqlDiskErrorPhyInternal=eqlDiskErrorPhyInternal, eqlDiskSmartInfoOfflineSeekPerformance=eqlDiskSmartInfoOfflineSeekPerformance, eqlDiskSmartInfoReadChannelMargin=eqlDiskSmartInfoReadChannelMargin, eqlDiskSmartInfoSoftECCCorrectionWorst=eqlDiskSmartInfoSoftECCCorrectionWorst, eqlDiskSmartInfoDriveRecalibRetryCount=eqlDiskSmartInfoDriveRecalibRetryCount, eqlDiskId=eqlDiskId, eqlDiskSmartInfoThroughputPerformance=eqlDiskSmartInfoThroughputPerformance, eqlDiskSmartInfoUltraDMACRCErrorRateWorst=eqlDiskSmartInfoUltraDMACRCErrorRateWorst, eqlDiskSmartInfoOnTheFlyErrorRate=eqlDiskSmartInfoOnTheFlyErrorRate, eqlDiskErrorHandShake=eqlDiskErrorHandShake, eqldiskNotifications=eqldiskNotifications, eqlDiskSmartInfoSpinBuzz=eqlDiskSmartInfoSpinBuzz, eqlDiskTypeEnum=eqlDiskTypeEnum, eqlDiskSmartInfoECCErrorsWorst=eqlDiskSmartInfoECCErrorsWorst, eqlDiskStatusChange=eqlDiskStatusChange, eqlDiskSmartInfoWritePreampErrors=eqlDiskSmartInfoWritePreampErrors, eqlDiskStatusBytesRead=eqlDiskStatusBytesRead, eqlDiskSmartInfoWritePreampErrorsWorst=eqlDiskSmartInfoWritePreampErrorsWorst, eqlDiskSmartInfoHDDTemp=eqlDiskSmartInfoHDDTemp, eqldiskModule=eqldiskModule, eqlDiskSmartInfoReadSoftErrorRate=eqlDiskSmartInfoReadSoftErrorRate, eqlDiskSmartInfoOnTheFlyErrorRateWorst=eqlDiskSmartInfoOnTheFlyErrorRateWorst, eqlDiskSmartInfoLoadUnloadCycles=eqlDiskSmartInfoLoadUnloadCycles, eqlDiskManufacturingInfo=eqlDiskManufacturingInfo, eqlDiskStatusNumIOs=eqlDiskStatusNumIOs, eqlDiskRPM=eqlDiskRPM, eqlDiskSmartInfoThroughputPerformanceWorst=eqlDiskSmartInfoThroughputPerformanceWorst, eqlDiskSlot=eqlDiskSlot, eqlDiskAdminStatus=eqlDiskAdminStatus, eqlDiskSmartInfoRawReadErrorRateWorst=eqlDiskSmartInfoRawReadErrorRateWorst, eqlDiskSmartInfoECCErrors=eqlDiskSmartInfoECCErrors, eqlDiskSmartInfoOfflineSurfaceScanWorst=eqlDiskSmartInfoOfflineSurfaceScanWorst, eqlDiskSmartInfoSpinHighCount=eqlDiskSmartInfoSpinHighCount, eqlDiskStatusTable=eqlDiskStatusTable, eqlDiskType=eqlDiskType, eqlDiskPI=eqlDiskPI, eqlDiskStatusNumResets=eqlDiskStatusNumResets, eqlDiskSmartInfoThermalAsperityRate=eqlDiskSmartInfoThermalAsperityRate, eqlDiskSmartInfoEmergencyRetractCyclesWorst=eqlDiskSmartInfoEmergencyRetractCyclesWorst, eqlDiskStatusLifetime=eqlDiskStatusLifetime, eqlDiskSmartInfoPowerOnHours=eqlDiskSmartInfoPowerOnHours, eqlDiskErrorEntry=eqlDiskErrorEntry, eqlDiskSmartInfoOffTrackErrorsWorst=eqlDiskSmartInfoOffTrackErrorsWorst, eqlDiskSectorSize=eqlDiskSectorSize, eqlDiskErrorDecode10b8b=eqlDiskErrorDecode10b8b, eqlDiskSmartInfoHDDTempWorst=eqlDiskSmartInfoHDDTempWorst, eqlDiskSmartInfoSpinupRetries=eqlDiskSmartInfoSpinupRetries, eqlDiskTable=eqlDiskTable, eqlDiskModelNumber=eqlDiskModelNumber, eqlDiskSmartInfoSpinUpTime=eqlDiskSmartInfoSpinUpTime, eqldiskMgmtNotifications=eqldiskMgmtNotifications, eqldiskObjects=eqldiskObjects, eqlDiskStatus=eqlDiskStatus, eqlDiskSmartInfoSeekErrorRateWorst=eqlDiskSmartInfoSeekErrorRateWorst, eqlDiskSmartInfoSelfTestReallocSectors=eqlDiskSmartInfoSelfTestReallocSectors, eqlDiskSmartInfoSeekErrorRate=eqlDiskSmartInfoSeekErrorRate, eqlDiskSmartInfoThermalAsperityRateWorst=eqlDiskSmartInfoThermalAsperityRateWorst, eqlDiskSize=eqlDiskSize, eqlDiskSmartInfoPowerCycleCount=eqlDiskSmartInfoPowerCycleCount, eqlDiskSmartInfoOfflineSurfaceScan=eqlDiskSmartInfoOfflineSurfaceScan, eqlDiskSmartInfoOffTrackErrors=eqlDiskSmartInfoOffTrackErrors)
