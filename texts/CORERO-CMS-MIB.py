#
# PySNMP MIB module CORERO-CMS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/corero/CORERO-CMS-MIB
# Produced by pysmi-1.1.12 at Thu May 30 02:14:11 2024
# On host fv-az1567-87 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
Counter32, iso, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, TimeTicks, IpAddress, Integer32, Gauge32, Unsigned32, MibIdentifier, ObjectIdentity, enterprises, ModuleIdentity, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "iso", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "TimeTicks", "IpAddress", "Integer32", "Gauge32", "Unsigned32", "MibIdentifier", "ObjectIdentity", "enterprises", "ModuleIdentity", "Counter64")
DisplayString, RowStatus, TextualConvention, TestAndIncr, TimeStamp, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "TextualConvention", "TestAndIncr", "TimeStamp", "TruthValue")
coreroCMSMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 41036, 4))
coreroCMSMIB.setRevisions(('2017-06-16 00:00', '2016-01-28 00:00', '2014-04-24 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: coreroCMSMIB.setRevisionsDescriptions(('Added interface error counts.', 'Added Protection Group Interface statistics.', 'First version.',))
if mibBuilder.loadTexts: coreroCMSMIB.setLastUpdated('201706160000Z')
if mibBuilder.loadTexts: coreroCMSMIB.setOrganization('Corero Network Security')
if mibBuilder.loadTexts: coreroCMSMIB.setContactInfo('       Corero Support\n             E-mail: support.portal@corero.com')
if mibBuilder.loadTexts: coreroCMSMIB.setDescription('Corero Management Server MIB.')
corero = MibIdentifier((1, 3, 6, 1, 4, 1, 41036))
coreroCMSMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 41036, 4, 1))
coreroCMSMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 41036, 4, 2))
class UnsignedShort(TextualConvention, Unsigned32):
    description = 'xs:unsignedShort'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 65535)

class ConfdString(TextualConvention, OctetString):
    description = 'xs: and confd: types mapped to strings'
    status = 'current'
    displayHint = '1t'

class String(TextualConvention, OctetString):
    description = 'xs:string'
    status = 'current'
    displayHint = '1t'

class TYPE_CMS_MODULE_STATE(String):
    description = ''
    status = 'current'

defense = MibIdentifier((1, 3, 6, 1, 4, 1, 41036, 4, 1, 1))
defenseStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 41036, 4, 1, 1, 1))
defenseStatusThreatAwareness = MibIdentifier((1, 3, 6, 1, 4, 1, 41036, 4, 1, 1, 1, 1))
excessivePacketsFromBadClients = MibScalar((1, 3, 6, 1, 4, 1, 41036, 4, 1, 1, 1, 1, 1), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: excessivePacketsFromBadClients.setStatus('current')
if mibBuilder.loadTexts: excessivePacketsFromBadClients.setDescription('Awareness indication for this type of threat.')
excessiveProxySetupRate = MibScalar((1, 3, 6, 1, 4, 1, 41036, 4, 1, 1, 1, 1, 2), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: excessiveProxySetupRate.setStatus('obsolete')
if mibBuilder.loadTexts: excessiveProxySetupRate.setDescription('Proxy is no longer supported in the system.')
excessiveNewIpAddresses = MibScalar((1, 3, 6, 1, 4, 1, 41036, 4, 1, 1, 1, 1, 3), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: excessiveNewIpAddresses.setStatus('current')
if mibBuilder.loadTexts: excessiveNewIpAddresses.setDescription('Awareness indication for this type of threat.')
excessiveAddressTableUsage = MibScalar((1, 3, 6, 1, 4, 1, 41036, 4, 1, 1, 1, 1, 4), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: excessiveAddressTableUsage.setStatus('current')
if mibBuilder.loadTexts: excessiveAddressTableUsage.setDescription('Awareness indication for this type of threat.')
excessiveTcpSetupRate = MibScalar((1, 3, 6, 1, 4, 1, 41036, 4, 1, 1, 1, 1, 5), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: excessiveTcpSetupRate.setStatus('current')
if mibBuilder.loadTexts: excessiveTcpSetupRate.setDescription('Awareness indication for this type of threat.')
excessiveNonTcpSetupRate = MibScalar((1, 3, 6, 1, 4, 1, 41036, 4, 1, 1, 1, 1, 6), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: excessiveNonTcpSetupRate.setStatus('current')
if mibBuilder.loadTexts: excessiveNonTcpSetupRate.setDescription('Awareness indication for this type of threat.')
excessiveFailedProxyRate = MibScalar((1, 3, 6, 1, 4, 1, 41036, 4, 1, 1, 1, 1, 7), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: excessiveFailedProxyRate.setStatus('obsolete')
if mibBuilder.loadTexts: excessiveFailedProxyRate.setDescription('Proxy is no longer supported in the system.')
defenseStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 41036, 4, 1, 1, 2))
defenseBlockRateStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 41036, 4, 1, 1, 2, 1))
allRulesBlockRate = MibScalar((1, 3, 6, 1, 4, 1, 41036, 4, 1, 1, 2, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: allRulesBlockRate.setStatus('current')
if mibBuilder.loadTexts: allRulesBlockRate.setDescription('All rules block rate (packets/sec)')
systemIssueBlockRate = MibScalar((1, 3, 6, 1, 4, 1, 41036, 4, 1, 1, 2, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemIssueBlockRate.setStatus('obsolete')
if mibBuilder.loadTexts: systemIssueBlockRate.setDescription('System isues rules block rate is not longer supported in the system')
networkAccessRestrictionBlockRate = MibScalar((1, 3, 6, 1, 4, 1, 41036, 4, 1, 1, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkAccessRestrictionBlockRate.setStatus('obsolete')
if mibBuilder.loadTexts: networkAccessRestrictionBlockRate.setDescription('Network threat access restriction rules block rate is not longer supported in the system')
networkRateLimitBlockRate = MibScalar((1, 3, 6, 1, 4, 1, 41036, 4, 1, 1, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkRateLimitBlockRate.setStatus('obsolete')
if mibBuilder.loadTexts: networkRateLimitBlockRate.setDescription('Network thread rate limit rules block rate is not longer supported in the system')
networkProtocolValidationBlockRate = MibScalar((1, 3, 6, 1, 4, 1, 41036, 4, 1, 1, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkProtocolValidationBlockRate.setStatus('obsolete')
if mibBuilder.loadTexts: networkProtocolValidationBlockRate.setDescription('Network threat protocol validation rules block rate is not longer supported in the system')
networkIntegrityAnalysisBlockRate = MibScalar((1, 3, 6, 1, 4, 1, 41036, 4, 1, 1, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkIntegrityAnalysisBlockRate.setStatus('obsolete')
if mibBuilder.loadTexts: networkIntegrityAnalysisBlockRate.setDescription('Network threat integrity analysis rules block rate is not longer supported in the system')
applicationAccessRestrictionBlockRate = MibScalar((1, 3, 6, 1, 4, 1, 41036, 4, 1, 1, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applicationAccessRestrictionBlockRate.setStatus('obsolete')
if mibBuilder.loadTexts: applicationAccessRestrictionBlockRate.setDescription('Application threat access restriction rules block rate is not longer supported in the system')
applicationRateLimitBlockRate = MibScalar((1, 3, 6, 1, 4, 1, 41036, 4, 1, 1, 2, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applicationRateLimitBlockRate.setStatus('obsolete')
if mibBuilder.loadTexts: applicationRateLimitBlockRate.setDescription('Application threat rate limit rules block rate is not longer supported in the system')
applicationProtocolValidationBlockRate = MibScalar((1, 3, 6, 1, 4, 1, 41036, 4, 1, 1, 2, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applicationProtocolValidationBlockRate.setStatus('obsolete')
if mibBuilder.loadTexts: applicationProtocolValidationBlockRate.setDescription('Application threat protocol validation rules block rate is not longer supported in the system')
applicationIntegrityAnalysisBlockRate = MibScalar((1, 3, 6, 1, 4, 1, 41036, 4, 1, 1, 2, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applicationIntegrityAnalysisBlockRate.setStatus('obsolete')
if mibBuilder.loadTexts: applicationIntegrityAnalysisBlockRate.setDescription('Application integrity analysis rules block rate is not longer supported in the system')
defenseSetupRateStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 41036, 4, 1, 1, 2, 2))
tcpSetupRate = MibScalar((1, 3, 6, 1, 4, 1, 41036, 4, 1, 1, 2, 2, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpSetupRate.setStatus('current')
if mibBuilder.loadTexts: tcpSetupRate.setDescription('TCP protocol flow setup rate (packets/sec)')
nonTcpSetupRate = MibScalar((1, 3, 6, 1, 4, 1, 41036, 4, 1, 1, 2, 2, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nonTcpSetupRate.setStatus('current')
if mibBuilder.loadTexts: nonTcpSetupRate.setDescription('Non-TCP protocol aggregate flow setup rate (packets/sec)')
udpSetupRate = MibScalar((1, 3, 6, 1, 4, 1, 41036, 4, 1, 1, 2, 2, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpSetupRate.setStatus('current')
if mibBuilder.loadTexts: udpSetupRate.setDescription('UDP protocol flow setup rate (packets/sec)')
icmpSetupRate = MibScalar((1, 3, 6, 1, 4, 1, 41036, 4, 1, 1, 2, 2, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpSetupRate.setStatus('current')
if mibBuilder.loadTexts: icmpSetupRate.setDescription('ICMP protocol flow setup rate (packets/sec)')
otherIpSetupRate = MibScalar((1, 3, 6, 1, 4, 1, 41036, 4, 1, 1, 2, 2, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otherIpSetupRate.setStatus('current')
if mibBuilder.loadTexts: otherIpSetupRate.setDescription('IP protocols other than TCP and UDP flow setup rate (packets/sec)')
defenseUsageStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 41036, 4, 1, 1, 2, 3))
inUseFlows = MibScalar((1, 3, 6, 1, 4, 1, 41036, 4, 1, 1, 2, 3, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inUseFlows.setStatus('current')
if mibBuilder.loadTexts: inUseFlows.setDescription('Total number of flows in use across the devices')
inUseTcpFlows = MibScalar((1, 3, 6, 1, 4, 1, 41036, 4, 1, 1, 2, 3, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inUseTcpFlows.setStatus('current')
if mibBuilder.loadTexts: inUseTcpFlows.setDescription('Total number of TCP flows in use across the devices')
inUseUdpFlows = MibScalar((1, 3, 6, 1, 4, 1, 41036, 4, 1, 1, 2, 3, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inUseUdpFlows.setStatus('current')
if mibBuilder.loadTexts: inUseUdpFlows.setDescription('Total number of UDP flows in use across the devices')
inUseIcmpFlows = MibScalar((1, 3, 6, 1, 4, 1, 41036, 4, 1, 1, 2, 3, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inUseIcmpFlows.setStatus('current')
if mibBuilder.loadTexts: inUseIcmpFlows.setDescription('Total number of ICMP flows in use across the devices')
inUseOtherFlows = MibScalar((1, 3, 6, 1, 4, 1, 41036, 4, 1, 1, 2, 3, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inUseOtherFlows.setStatus('current')
if mibBuilder.loadTexts: inUseOtherFlows.setDescription('Total number of non-TCP, non-UDP, non-ICMP flows in use across the devices')
totalProxySetups = MibScalar((1, 3, 6, 1, 4, 1, 41036, 4, 1, 1, 2, 3, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalProxySetups.setStatus('obsolete')
if mibBuilder.loadTexts: totalProxySetups.setDescription('Proxy is no longer supported in the system')
totalProxyFailedSetups = MibScalar((1, 3, 6, 1, 4, 1, 41036, 4, 1, 1, 2, 3, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalProxyFailedSetups.setStatus('obsolete')
if mibBuilder.loadTexts: totalProxyFailedSetups.setDescription('Proxy is no longer supported in the system')
defenseInterfaceStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 41036, 4, 1, 1, 2, 4))
externalPortPacketReceiveRate = MibScalar((1, 3, 6, 1, 4, 1, 41036, 4, 1, 1, 2, 4, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalPortPacketReceiveRate.setStatus('current')
if mibBuilder.loadTexts: externalPortPacketReceiveRate.setDescription('Receive rate on external ports (packets per second)')
externalPortBitReceiveRate = MibScalar((1, 3, 6, 1, 4, 1, 41036, 4, 1, 1, 2, 4, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalPortBitReceiveRate.setStatus('current')
if mibBuilder.loadTexts: externalPortBitReceiveRate.setDescription('Receive rate on external ports (Mbits per second)')
externalPortPacketTransmitRate = MibScalar((1, 3, 6, 1, 4, 1, 41036, 4, 1, 1, 2, 4, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalPortPacketTransmitRate.setStatus('current')
if mibBuilder.loadTexts: externalPortPacketTransmitRate.setDescription('Transmit rate on external ports (packets per second)')
externalPortBitTransmitRate = MibScalar((1, 3, 6, 1, 4, 1, 41036, 4, 1, 1, 2, 4, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalPortBitTransmitRate.setStatus('current')
if mibBuilder.loadTexts: externalPortBitTransmitRate.setDescription('Transmit rate on external ports (Mbits per second)')
internalPortPacketReceiveRate = MibScalar((1, 3, 6, 1, 4, 1, 41036, 4, 1, 1, 2, 4, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: internalPortPacketReceiveRate.setStatus('current')
if mibBuilder.loadTexts: internalPortPacketReceiveRate.setDescription('Receive rate on internal ports (packets per second)')
internalPortBitReceiveRate = MibScalar((1, 3, 6, 1, 4, 1, 41036, 4, 1, 1, 2, 4, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: internalPortBitReceiveRate.setStatus('current')
if mibBuilder.loadTexts: internalPortBitReceiveRate.setDescription('Receive rate on internal ports (Mbits per second)')
internalPortPacketTransmitRate = MibScalar((1, 3, 6, 1, 4, 1, 41036, 4, 1, 1, 2, 4, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: internalPortPacketTransmitRate.setStatus('current')
if mibBuilder.loadTexts: internalPortPacketTransmitRate.setDescription('Transmit rate on internal ports (packets per second)')
internalPortBitTransmitRate = MibScalar((1, 3, 6, 1, 4, 1, 41036, 4, 1, 1, 2, 4, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: internalPortBitTransmitRate.setStatus('current')
if mibBuilder.loadTexts: internalPortBitTransmitRate.setDescription('Transmit rate on internal ports (Mbits per second)')
externalPortReceivedPackets = MibScalar((1, 3, 6, 1, 4, 1, 41036, 4, 1, 1, 2, 4, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalPortReceivedPackets.setStatus('current')
if mibBuilder.loadTexts: externalPortReceivedPackets.setDescription('Number of packets received to the external port')
externalPortTransmittedPackets = MibScalar((1, 3, 6, 1, 4, 1, 41036, 4, 1, 1, 2, 4, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalPortTransmittedPackets.setStatus('current')
if mibBuilder.loadTexts: externalPortTransmittedPackets.setDescription('Number of packets transmitted from the external port')
externalPortReceivedBytes = MibScalar((1, 3, 6, 1, 4, 1, 41036, 4, 1, 1, 2, 4, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalPortReceivedBytes.setStatus('current')
if mibBuilder.loadTexts: externalPortReceivedBytes.setDescription('Number of bytes received to the external port')
externalPortTransmittedBytes = MibScalar((1, 3, 6, 1, 4, 1, 41036, 4, 1, 1, 2, 4, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalPortTransmittedBytes.setStatus('current')
if mibBuilder.loadTexts: externalPortTransmittedBytes.setDescription('Number of bytes transmitted from external port')
internalPortReceivedPackets = MibScalar((1, 3, 6, 1, 4, 1, 41036, 4, 1, 1, 2, 4, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: internalPortReceivedPackets.setStatus('current')
if mibBuilder.loadTexts: internalPortReceivedPackets.setDescription('Number of packets received to the internal port')
internalPortTransmittedPackets = MibScalar((1, 3, 6, 1, 4, 1, 41036, 4, 1, 1, 2, 4, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: internalPortTransmittedPackets.setStatus('current')
if mibBuilder.loadTexts: internalPortTransmittedPackets.setDescription('Number of packets transmitted from the internal port')
internalPortReceivedBytes = MibScalar((1, 3, 6, 1, 4, 1, 41036, 4, 1, 1, 2, 4, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: internalPortReceivedBytes.setStatus('current')
if mibBuilder.loadTexts: internalPortReceivedBytes.setDescription('Number of bytes received to the internal port')
internalPortTransmittedBytes = MibScalar((1, 3, 6, 1, 4, 1, 41036, 4, 1, 1, 2, 4, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: internalPortTransmittedBytes.setStatus('current')
if mibBuilder.loadTexts: internalPortTransmittedBytes.setDescription('Number of bytes transmitted from the internal port')
externalPortReceivedBadCrcPackets = MibScalar((1, 3, 6, 1, 4, 1, 41036, 4, 1, 1, 2, 4, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalPortReceivedBadCrcPackets.setStatus('current')
if mibBuilder.loadTexts: externalPortReceivedBadCrcPackets.setDescription('Number of packets received to the external port with an invalid CRC')
internalPortReceivedBadCrcPackets = MibScalar((1, 3, 6, 1, 4, 1, 41036, 4, 1, 1, 2, 4, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: internalPortReceivedBadCrcPackets.setStatus('current')
if mibBuilder.loadTexts: internalPortReceivedBadCrcPackets.setDescription('Number of packets received to the internal port with an invalid CRC')
externalPortReceivedOversizedPackets = MibScalar((1, 3, 6, 1, 4, 1, 41036, 4, 1, 1, 2, 4, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalPortReceivedOversizedPackets.setStatus('current')
if mibBuilder.loadTexts: externalPortReceivedOversizedPackets.setDescription('Number of oversized packets received to the external port')
internalPortReceivedOversizedPackets = MibScalar((1, 3, 6, 1, 4, 1, 41036, 4, 1, 1, 2, 4, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: internalPortReceivedOversizedPackets.setStatus('current')
if mibBuilder.loadTexts: internalPortReceivedOversizedPackets.setDescription('Number of oversized packets received to the internal port')
externalPortReceivedJabberPackets = MibScalar((1, 3, 6, 1, 4, 1, 41036, 4, 1, 1, 2, 4, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalPortReceivedJabberPackets.setStatus('current')
if mibBuilder.loadTexts: externalPortReceivedJabberPackets.setDescription('Number of jabber packets received to the external port')
internalPortReceivedJabberPackets = MibScalar((1, 3, 6, 1, 4, 1, 41036, 4, 1, 1, 2, 4, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: internalPortReceivedJabberPackets.setStatus('current')
if mibBuilder.loadTexts: internalPortReceivedJabberPackets.setDescription('Number of jabber packets received to the internal port')
externalPortTransmitErrorPackets = MibScalar((1, 3, 6, 1, 4, 1, 41036, 4, 1, 1, 2, 4, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalPortTransmitErrorPackets.setStatus('current')
if mibBuilder.loadTexts: externalPortTransmitErrorPackets.setDescription('Number of errors transmitting packets from the external port')
internalPortTransmitErrorPackets = MibScalar((1, 3, 6, 1, 4, 1, 41036, 4, 1, 1, 2, 4, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: internalPortTransmitErrorPackets.setStatus('current')
if mibBuilder.loadTexts: internalPortTransmitErrorPackets.setDescription('Number of errors transmitting packets from the internal port')
defenseIpAddressStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 41036, 4, 1, 1, 2, 5))
inUseAddresses = MibScalar((1, 3, 6, 1, 4, 1, 41036, 4, 1, 1, 2, 5, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inUseAddresses.setStatus('current')
if mibBuilder.loadTexts: inUseAddresses.setDescription('Total number of IP table entries across the devices')
inUseTrustedAddresses = MibScalar((1, 3, 6, 1, 4, 1, 41036, 4, 1, 1, 2, 5, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inUseTrustedAddresses.setStatus('current')
if mibBuilder.loadTexts: inUseTrustedAddresses.setDescription('Total number of trusted IP addresses across the devices')
inUseSuspiciousAddresses = MibScalar((1, 3, 6, 1, 4, 1, 41036, 4, 1, 1, 2, 5, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inUseSuspiciousAddresses.setStatus('current')
if mibBuilder.loadTexts: inUseSuspiciousAddresses.setDescription('Total number of suspicious IP addresses across the devices')
inUseMaliciousAddresses = MibScalar((1, 3, 6, 1, 4, 1, 41036, 4, 1, 1, 2, 5, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inUseMaliciousAddresses.setStatus('current')
if mibBuilder.loadTexts: inUseMaliciousAddresses.setDescription('Total number of malicious IP addresses across the devices')
inUseUnclassifiedAddresses = MibScalar((1, 3, 6, 1, 4, 1, 41036, 4, 1, 1, 2, 5, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inUseUnclassifiedAddresses.setStatus('current')
if mibBuilder.loadTexts: inUseUnclassifiedAddresses.setDescription('Total number of unclassified IP addresses across the devices')
protectionGroupStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 41036, 4, 1, 1, 3))
protectionGroupTable = MibTable((1, 3, 6, 1, 4, 1, 41036, 4, 1, 1, 3, 1), )
if mibBuilder.loadTexts: protectionGroupTable.setStatus('current')
if mibBuilder.loadTexts: protectionGroupTable.setDescription('Table containing interface statistics for the Protection Group')
protectionGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 41036, 4, 1, 1, 3, 1, 1), ).setIndexNames((0, "CORERO-CMS-MIB", "pgName"))
if mibBuilder.loadTexts: protectionGroupEntry.setStatus('current')
if mibBuilder.loadTexts: protectionGroupEntry.setDescription('Port Statistic')
pgName = MibTableColumn((1, 3, 6, 1, 4, 1, 41036, 4, 1, 1, 3, 1, 1, 1), OctetString())
if mibBuilder.loadTexts: pgName.setStatus('current')
if mibBuilder.loadTexts: pgName.setDescription('Protection group name as an Index')
pgExternalPortReceivedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 41036, 4, 1, 1, 3, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgExternalPortReceivedPackets.setStatus('current')
if mibBuilder.loadTexts: pgExternalPortReceivedPackets.setDescription('Number of packets received to the external port')
pgExternalPortTransmittedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 41036, 4, 1, 1, 3, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgExternalPortTransmittedPackets.setStatus('current')
if mibBuilder.loadTexts: pgExternalPortTransmittedPackets.setDescription('Number of packets transmitted from the external port')
pgExternalPortReceivedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 41036, 4, 1, 1, 3, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgExternalPortReceivedBytes.setStatus('current')
if mibBuilder.loadTexts: pgExternalPortReceivedBytes.setDescription('Number of bytes received to the external port')
pgExternalPortTransmittedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 41036, 4, 1, 1, 3, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgExternalPortTransmittedBytes.setStatus('current')
if mibBuilder.loadTexts: pgExternalPortTransmittedBytes.setDescription('Number of bytes transmitted from external port')
pgInternalPortReceivedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 41036, 4, 1, 1, 3, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgInternalPortReceivedPackets.setStatus('current')
if mibBuilder.loadTexts: pgInternalPortReceivedPackets.setDescription('Number of packets received to the internal port')
pgInternalPortTransmittedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 41036, 4, 1, 1, 3, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgInternalPortTransmittedPackets.setStatus('current')
if mibBuilder.loadTexts: pgInternalPortTransmittedPackets.setDescription('Number of packets transmitted from the internal port')
pgInternalPortReceivedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 41036, 4, 1, 1, 3, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgInternalPortReceivedBytes.setStatus('current')
if mibBuilder.loadTexts: pgInternalPortReceivedBytes.setDescription('Number of bytes received to the internal port')
pgInternalPortTransmittedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 41036, 4, 1, 1, 3, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgInternalPortTransmittedBytes.setStatus('current')
if mibBuilder.loadTexts: pgInternalPortTransmittedBytes.setDescription('Number of bytes transmitted from the internal port')
pgExternalPortReceivedBadCrcPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 41036, 4, 1, 1, 3, 1, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgExternalPortReceivedBadCrcPackets.setStatus('current')
if mibBuilder.loadTexts: pgExternalPortReceivedBadCrcPackets.setDescription('Number of packets received to the external port with an invalid CRC')
pgInternalPortReceivedBadCrcPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 41036, 4, 1, 1, 3, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgInternalPortReceivedBadCrcPackets.setStatus('current')
if mibBuilder.loadTexts: pgInternalPortReceivedBadCrcPackets.setDescription('Number of packets received to the internal port with an invalid CRC')
pgExternalPortReceivedOversizedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 41036, 4, 1, 1, 3, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgExternalPortReceivedOversizedPackets.setStatus('current')
if mibBuilder.loadTexts: pgExternalPortReceivedOversizedPackets.setDescription('Number of oversized packets received to the external port')
pgInternalPortReceivedOversizedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 41036, 4, 1, 1, 3, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgInternalPortReceivedOversizedPackets.setStatus('current')
if mibBuilder.loadTexts: pgInternalPortReceivedOversizedPackets.setDescription('Number of oversized packets received to the internal port')
pgExternalPortReceivedJabberPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 41036, 4, 1, 1, 3, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgExternalPortReceivedJabberPackets.setStatus('current')
if mibBuilder.loadTexts: pgExternalPortReceivedJabberPackets.setDescription('Number of jabber packets received to the external port')
pgInternalPortReceivedJabberPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 41036, 4, 1, 1, 3, 1, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgInternalPortReceivedJabberPackets.setStatus('current')
if mibBuilder.loadTexts: pgInternalPortReceivedJabberPackets.setDescription('Number of jabber packets received to the internal port')
pgExternalPortTransmitErrorPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 41036, 4, 1, 1, 3, 1, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgExternalPortTransmitErrorPackets.setStatus('current')
if mibBuilder.loadTexts: pgExternalPortTransmitErrorPackets.setDescription('Number of errors transmitting packets from the external port')
pgInternalPortTransmitErrorPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 41036, 4, 1, 1, 3, 1, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgInternalPortTransmitErrorPackets.setStatus('current')
if mibBuilder.loadTexts: pgInternalPortTransmitErrorPackets.setDescription('Number of errors transmitting packets from the internal port')
coreroCMSMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 41036, 4, 2, 1))
coreroCMSMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 41036, 4, 2, 2))
coreroCMSMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 41036, 4, 2, 1, 2)).setObjects(("CORERO-CMS-MIB", "defenseGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    coreroCMSMIBCompliance = coreroCMSMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: coreroCMSMIBCompliance.setDescription('The compliance statement for SNMPv2 entities which\n            implement the SNMPv2 MIB.')
defenseGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 41036, 4, 2, 2, 1)).setObjects(("CORERO-CMS-MIB", "defenseStatus"), ("CORERO-CMS-MIB", "defenseStatistics"), ("CORERO-CMS-MIB", "protectionGroupStatistics"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    defenseGroup = defenseGroup.setStatus('current')
if mibBuilder.loadTexts: defenseGroup.setDescription('A collection of objects providing status and statistics for the site.')
mibBuilder.exportSymbols("CORERO-CMS-MIB", inUseSuspiciousAddresses=inUseSuspiciousAddresses, internalPortReceivedOversizedPackets=internalPortReceivedOversizedPackets, networkIntegrityAnalysisBlockRate=networkIntegrityAnalysisBlockRate, icmpSetupRate=icmpSetupRate, externalPortBitTransmitRate=externalPortBitTransmitRate, excessivePacketsFromBadClients=excessivePacketsFromBadClients, excessiveProxySetupRate=excessiveProxySetupRate, defenseStatusThreatAwareness=defenseStatusThreatAwareness, pgExternalPortReceivedBadCrcPackets=pgExternalPortReceivedBadCrcPackets, coreroCMSMIBCompliances=coreroCMSMIBCompliances, internalPortBitReceiveRate=internalPortBitReceiveRate, externalPortBitReceiveRate=externalPortBitReceiveRate, networkProtocolValidationBlockRate=networkProtocolValidationBlockRate, pgExternalPortReceivedJabberPackets=pgExternalPortReceivedJabberPackets, pgExternalPortReceivedBytes=pgExternalPortReceivedBytes, inUseTrustedAddresses=inUseTrustedAddresses, pgInternalPortTransmitErrorPackets=pgInternalPortTransmitErrorPackets, excessiveAddressTableUsage=excessiveAddressTableUsage, String=String, defenseInterfaceStatistics=defenseInterfaceStatistics, ConfdString=ConfdString, inUseIcmpFlows=inUseIcmpFlows, inUseMaliciousAddresses=inUseMaliciousAddresses, excessiveFailedProxyRate=excessiveFailedProxyRate, internalPortBitTransmitRate=internalPortBitTransmitRate, internalPortTransmittedPackets=internalPortTransmittedPackets, externalPortTransmitErrorPackets=externalPortTransmitErrorPackets, defense=defense, internalPortReceivedJabberPackets=internalPortReceivedJabberPackets, defenseBlockRateStatistics=defenseBlockRateStatistics, applicationRateLimitBlockRate=applicationRateLimitBlockRate, excessiveTcpSetupRate=excessiveTcpSetupRate, externalPortTransmittedBytes=externalPortTransmittedBytes, nonTcpSetupRate=nonTcpSetupRate, coreroCMSMIBConformance=coreroCMSMIBConformance, protectionGroupTable=protectionGroupTable, pgInternalPortReceivedBytes=pgInternalPortReceivedBytes, pgInternalPortReceivedPackets=pgInternalPortReceivedPackets, protectionGroupEntry=protectionGroupEntry, tcpSetupRate=tcpSetupRate, inUseOtherFlows=inUseOtherFlows, UnsignedShort=UnsignedShort, defenseStatistics=defenseStatistics, internalPortReceivedBadCrcPackets=internalPortReceivedBadCrcPackets, applicationAccessRestrictionBlockRate=applicationAccessRestrictionBlockRate, pgInternalPortTransmittedPackets=pgInternalPortTransmittedPackets, applicationProtocolValidationBlockRate=applicationProtocolValidationBlockRate, coreroCMSMIB=coreroCMSMIB, inUseFlows=inUseFlows, internalPortTransmittedBytes=internalPortTransmittedBytes, totalProxySetups=totalProxySetups, pgInternalPortReceivedJabberPackets=pgInternalPortReceivedJabberPackets, defenseUsageStatistics=defenseUsageStatistics, inUseAddresses=inUseAddresses, PYSNMP_MODULE_ID=coreroCMSMIB, pgInternalPortReceivedBadCrcPackets=pgInternalPortReceivedBadCrcPackets, internalPortReceivedPackets=internalPortReceivedPackets, inUseUnclassifiedAddresses=inUseUnclassifiedAddresses, inUseTcpFlows=inUseTcpFlows, externalPortTransmittedPackets=externalPortTransmittedPackets, networkRateLimitBlockRate=networkRateLimitBlockRate, coreroCMSMIBCompliance=coreroCMSMIBCompliance, pgExternalPortTransmitErrorPackets=pgExternalPortTransmitErrorPackets, coreroCMSMIBGroups=coreroCMSMIBGroups, externalPortReceivedBadCrcPackets=externalPortReceivedBadCrcPackets, udpSetupRate=udpSetupRate, pgExternalPortReceivedPackets=pgExternalPortReceivedPackets, applicationIntegrityAnalysisBlockRate=applicationIntegrityAnalysisBlockRate, externalPortPacketReceiveRate=externalPortPacketReceiveRate, defenseGroup=defenseGroup, excessiveNonTcpSetupRate=excessiveNonTcpSetupRate, externalPortReceivedOversizedPackets=externalPortReceivedOversizedPackets, externalPortReceivedBytes=externalPortReceivedBytes, internalPortPacketTransmitRate=internalPortPacketTransmitRate, pgInternalPortTransmittedBytes=pgInternalPortTransmittedBytes, defenseSetupRateStatistics=defenseSetupRateStatistics, coreroCMSMIBObjects=coreroCMSMIBObjects, corero=corero, defenseIpAddressStatistics=defenseIpAddressStatistics, internalPortTransmitErrorPackets=internalPortTransmitErrorPackets, externalPortPacketTransmitRate=externalPortPacketTransmitRate, networkAccessRestrictionBlockRate=networkAccessRestrictionBlockRate, internalPortPacketReceiveRate=internalPortPacketReceiveRate, pgExternalPortReceivedOversizedPackets=pgExternalPortReceivedOversizedPackets, TYPE_CMS_MODULE_STATE=TYPE_CMS_MODULE_STATE, defenseStatus=defenseStatus, externalPortReceivedPackets=externalPortReceivedPackets, externalPortReceivedJabberPackets=externalPortReceivedJabberPackets, pgExternalPortTransmittedPackets=pgExternalPortTransmittedPackets, totalProxyFailedSetups=totalProxyFailedSetups, protectionGroupStatistics=protectionGroupStatistics, otherIpSetupRate=otherIpSetupRate, systemIssueBlockRate=systemIssueBlockRate, internalPortReceivedBytes=internalPortReceivedBytes, pgExternalPortTransmittedBytes=pgExternalPortTransmittedBytes, allRulesBlockRate=allRulesBlockRate, excessiveNewIpAddresses=excessiveNewIpAddresses, pgName=pgName, pgInternalPortReceivedOversizedPackets=pgInternalPortReceivedOversizedPackets, inUseUdpFlows=inUseUdpFlows)
