#
# PySNMP MIB module CTRON-SFPS-BASE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/enterasys/CTRON-SFPS-BASE-MIB
# Produced by pysmi-1.1.12 at Tue Jun  4 08:29:38 2024
# On host fv-az1117-967 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint")
sfpsATalkAMRVLANControl, sfpsBlockSourceOnly, sfpsServiceCenter, sfpsBlockSource, sfpsCSPControl, sfpsBlockSourceAPI, sfpsBlockSourceStats, sfpsDHCPServerVLAN, sfpsBlockSourceExclude, sfpsBlockSourcePort, sfpsCPResources = mibBuilder.importSymbols("CTRON-SFPS-INCLUDE-MIB", "sfpsATalkAMRVLANControl", "sfpsBlockSourceOnly", "sfpsServiceCenter", "sfpsBlockSource", "sfpsCSPControl", "sfpsBlockSourceAPI", "sfpsBlockSourceStats", "sfpsDHCPServerVLAN", "sfpsBlockSourceExclude", "sfpsBlockSourcePort", "sfpsCPResources")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
IpAddress, NotificationType, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, TimeTicks, ObjectIdentity, Bits, Unsigned32, iso, Counter32, ModuleIdentity, Gauge32, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "NotificationType", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "TimeTicks", "ObjectIdentity", "Bits", "Unsigned32", "iso", "Counter32", "ModuleIdentity", "Gauge32", "Counter64")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class HexInteger(Integer32):
    pass

class SfpsAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

sfpsCPResourcesTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 3, 1), )
if mibBuilder.loadTexts: sfpsCPResourcesTable.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsCPResourcesTable.setDescription('This table contains all Call Processors registered with the\n                 CPResources Table and is indexed by the Call Processor id.')
sfpsCPResourcesTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 3, 1, 1), ).setIndexNames((0, "CTRON-SFPS-BASE-MIB", "sfpsCPResourcesTableId"))
if mibBuilder.loadTexts: sfpsCPResourcesTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsCPResourcesTableEntry.setDescription('Each entry contains information pertaining to a Call Processor.')
sfpsCPResourcesTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCPResourcesTableId.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsCPResourcesTableId.setDescription('Call Processor id used to index into the table.')
sfpsCPResourcesTableName = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCPResourcesTableName.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsCPResourcesTableName.setDescription('The name of the associated Call Processor.')
sfpsCPResourcesTableOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("kStatusRunning", 1), ("kStatusHalted", 2), ("kStatusPending", 3), ("kStatusFaulted", 4), ("kStatusNotStarted", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCPResourcesTableOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsCPResourcesTableOperStatus.setDescription('Operational state of entry.')
sfpsCPResourcesTableAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCPResourcesTableAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsCPResourcesTableAdminStatus.setDescription('This value represents the current administration status of the\n                associated Call Processor. When enabled(3) the Call Processor\n                is still allowed to call process packets.\n\n                When this value is disabled(2) the call processor will not\n                process any packets.')
sfpsCPResourcesTableStateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 3, 1, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCPResourcesTableStateTime.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsCPResourcesTableStateTime.setDescription('The last time that this Call Processor has changed states.')
sfpsCPResourcesTablePtsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCPResourcesTablePtsIn.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsCPResourcesTablePtsIn.setDescription('The number of packets that have been sent to this Call\n                Processor to be handled.')
sfpsCPResourcesTablePtsUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 3, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCPResourcesTablePtsUsed.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsCPResourcesTablePtsUsed.setDescription('The number of packets that have been sent to this Call\n                Processor and accepted for the purpose of processing.')
sfpsCPResourcesTablePolicyFlood = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 3, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCPResourcesTablePolicyFlood.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsCPResourcesTablePolicyFlood.setDescription('Number of packets flooded due to Policy.')
sfpsCPResourcesResolveFlood = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 3, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCPResourcesResolveFlood.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsCPResourcesResolveFlood.setDescription('Number of packets flooded due to not able to Resolve.')
sfpsCPResourcesConnectOK = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 3, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCPResourcesConnectOK.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsCPResourcesConnectOK.setDescription('Number of packets that caused a successful connect.')
sfpsCPResourcesDuplicate = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 3, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCPResourcesDuplicate.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsCPResourcesDuplicate.setDescription('Number of packets that were duplicates of an existing call.')
sfpsCPResourcesDiscoverOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 3, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCPResourcesDiscoverOnly.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsCPResourcesDiscoverOnly.setDescription('Number of packets that the switch only discovered information.')
sfpsCPResourcesDiscoverError = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 3, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCPResourcesDiscoverError.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsCPResourcesDiscoverError.setDescription('Number of packets that the switch could not discover\n                 information. Something was wrong with the packet.')
sfpsCPResourcesResolveFail = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 3, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCPResourcesResolveFail.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsCPResourcesResolveFail.setDescription('Number of packets which caused the Resolve to fail. The fail\n                is due to no vlan information was returned.')
sfpsCPResourcesResolveError = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 3, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCPResourcesResolveError.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsCPResourcesResolveError.setDescription('Number of packets which caused the Resolve to return an error.\n                An error could be caused by a bad packet.')
sfpsCPResourcesPolicyFail = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 3, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCPResourcesPolicyFail.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsCPResourcesPolicyFail.setDescription('Number of packets which caused the Policy to fail. The fail\n                is caused because the switch has no information on the vlan(s)\n                returned by Resolve.')
sfpsCPResourcesPolicyError = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 3, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCPResourcesPolicyError.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsCPResourcesPolicyError.setDescription('Number of packets which caused the Policy to return an error.\n                An error could be caused by a bad packet.')
sfpsCPResourcesConnectFail = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 3, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCPResourcesConnectFail.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsCPResourcesConnectFail.setDescription('Number of packets that caused the Connect to fail.')
sfpsCPResourcesConnectFlood = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 3, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCPResourcesConnectFlood.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsCPResourcesConnectFlood.setDescription('Number of packets that caused the Connect to flood.')
sfpsCPResourcesConnectError = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 3, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCPResourcesConnectError.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsCPResourcesConnectError.setDescription('Number of packets that caused the Connect to return an error.')
sfpsCPResourcesConfigTime = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 3, 1, 1, 21), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCPResourcesConfigTime.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsCPResourcesConfigTime.setDescription('Number of time ticks since the last configuration change.')
sfpsCPResourcesNeedFlood = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 3, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCPResourcesNeedFlood.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsCPResourcesNeedFlood.setDescription('Set to enabled(1)/disabled(0) if the BaseNeedFlood attribute\n                is desired. If disabled, then an attempt to resolve is\n                performed.')
sfpsCPResourcesNeedResolve = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 3, 1, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCPResourcesNeedResolve.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsCPResourcesNeedResolve.setDescription('Set to enabled(1)/disabled(0) if the Resoolve attribute \n                is desired.')
sfpsCPResourcesNeedDiscover = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 3, 1, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCPResourcesNeedDiscover.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsCPResourcesNeedDiscover.setDescription('Set to enabled(1)/disabled(0) if the Discover attribute\n                is desired.')
sfpsCPResourcesDiscoverAll = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 3, 1, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCPResourcesDiscoverAll.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsCPResourcesDiscoverAll.setDescription('Set to enabled(1)/disabled(0) if the DiscoverAll attribute\n                is desired.')
sfpsCPResourcesNeedProxyOut = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 3, 1, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCPResourcesNeedProxyOut.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsCPResourcesNeedProxyOut.setDescription('Set to enabled(1)/disabled(0) if the Proxy Forward attribute\n                is desired.')
sfpsCPResourcesNeedProxyIn = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 3, 1, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCPResourcesNeedProxyIn.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsCPResourcesNeedProxyIn.setDescription('Set to enabled(1)/disabled(0) if the Proxy Back attribute\n                is desired.')
sfpsCPResourcesNeedFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 3, 1, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCPResourcesNeedFilter.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsCPResourcesNeedFilter.setDescription('Set to enabled(1)/disabled(0) if the Filter attribute\n                is desired.')
sfpsCPResourcesAcceptRate = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 3, 1, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCPResourcesAcceptRate.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsCPResourcesAcceptRate.setDescription('The number of packets per second that have been sent to this\n                 Call Processor to be handled and accepted for processing.')
sfpsCPResourcesTotalRate = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 3, 1, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCPResourcesTotalRate.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsCPResourcesTotalRate.setDescription('The number of packets per second that have been sent to this\n                 Call Processor to be handled.')
sfpsCPResourcesSingleFlood = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 3, 1, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCPResourcesSingleFlood.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsCPResourcesSingleFlood.setDescription('Number of packets that were unicast (single) flooded.')
sfpsCPResourcesNeedValidNet = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 3, 1, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCPResourcesNeedValidNet.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsCPResourcesNeedValidNet.setDescription('Number of packets that were unicast (single) flooded.')
sfpsCPResourcesInvalidNetDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 3, 1, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCPResourcesInvalidNetDrops.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsCPResourcesInvalidNetDrops.setDescription('')
sfpsCPResourcesPersistMask = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 3, 1, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCPResourcesPersistMask.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsCPResourcesPersistMask.setDescription('')
sfpsCPResourcesAPI = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 3, 2))
sfpsCPResourcesAPIID = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 3, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsCPResourcesAPIID.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsCPResourcesAPIID.setDescription('Identifier for the call processor.')
sfpsCPResourcesAPIAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 3, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsCPResourcesAPIAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsCPResourcesAPIAdminStatus.setDescription('Administrative status of the call processor.')
sfpsCPResourcesAPIAttribute = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 3, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("none", 1), ("noFlood", 2), ("flood", 3), ("noResolve", 4), ("resolve", 5), ("noDiscover", 6), ("discover", 7), ("noDiscoverAll", 8), ("discoverAll", 9), ("noProxyIn", 10), ("proxyIn", 11), ("noProxyOut", 12), ("proxyOut", 13), ("nofilter", 14), ("filter", 15), ("noValidateNet", 16), ("validNet", 17)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsCPResourcesAPIAttribute.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsCPResourcesAPIAttribute.setDescription('Call processor attribute/features.')
sfpsCPResourcesAPIScope = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 3, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("switch", 1), ("port", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsCPResourcesAPIScope.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsCPResourcesAPIScope.setDescription('Scope this attribute to switch or port.')
sfpsCPResourcesAPIPersistance = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 3, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("persistOther", 1), ("persistDisabled", 2), ("persistEnabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsCPResourcesAPIPersistance.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsCPResourcesAPIPersistance.setDescription('Parameter to make persistent on switch reset.')
sfpsCPResourcesAPIVerb = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 3, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("set", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsCPResourcesAPIVerb.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsCPResourcesAPIVerb.setDescription('Action to perform.')
sfpsCSPControlTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 5, 1), )
if mibBuilder.loadTexts: sfpsCSPControlTable.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsCSPControlTable.setDescription('Cabletron Switch Protocol Control statistics')
sfpsCSPControlTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 5, 1, 1), ).setIndexNames((0, "CTRON-SFPS-BASE-MIB", "sfpsCSPControlTableIndex"))
if mibBuilder.loadTexts: sfpsCSPControlTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsCSPControlTableEntry.setDescription('')
sfpsCSPControlTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCSPControlTableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsCSPControlTableIndex.setDescription('')
sfpsCSPControlTableCSPType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 5, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCSPControlTableCSPType.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsCSPControlTableCSPType.setDescription('')
sfpsCSPControlTableCSPName = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 5, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCSPControlTableCSPName.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsCSPControlTableCSPName.setDescription('')
sfpsCSPControlTableAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsCSPControlTableAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsCSPControlTableAdminStatus.setDescription('')
sfpsCSPControlTableSwitchToCallProc = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCSPControlTableSwitchToCallProc.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsCSPControlTableSwitchToCallProc.setDescription('')
sfpsCSPControlTablePktsProcessed = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 5, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCSPControlTablePktsProcessed.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsCSPControlTablePktsProcessed.setDescription('')
sfpsCSPControlTablePktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 5, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCSPControlTablePktRate.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsCSPControlTablePktRate.setDescription('')
sfpsServiceCenterFacilityTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 9), )
if mibBuilder.loadTexts: sfpsServiceCenterFacilityTable.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsServiceCenterFacilityTable.setDescription('This table gives facility semantics to call processing.')
sfpsServiceCenterFacilityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 9, 1), ).setIndexNames((0, "CTRON-SFPS-BASE-MIB", "sfpsServiceCenterFacilityHashLeaf"))
if mibBuilder.loadTexts: sfpsServiceCenterFacilityEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsServiceCenterFacilityEntry.setDescription('Each entry contains the configuration of the Facility Entry.')
sfpsServiceCenterFacilityHashLeaf = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 9, 1, 1), HexInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsServiceCenterFacilityHashLeaf.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsServiceCenterFacilityHashLeaf.setDescription('Server hash, part of instance key.')
sfpsServiceCenterFacilityMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 9, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsServiceCenterFacilityMetric.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsServiceCenterFacilityMetric.setDescription('Defines order servers are called low to high.')
sfpsServiceCenterFacilityName = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 9, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsServiceCenterFacilityName.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsServiceCenterFacilityName.setDescription('Server name.')
sfpsServiceCenterFacilityOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("kStatusRunning", 1), ("kStatusHalted", 2), ("kStatusPending", 3), ("kStatusFaulted", 4), ("kStatusNotStarted", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsServiceCenterFacilityOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsServiceCenterFacilityOperStatus.setDescription('Operational state of entry.')
sfpsServiceCenterFacilityAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsServiceCenterFacilityAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsServiceCenterFacilityAdminStatus.setDescription('Administrative State of Entry.')
sfpsServiceCenterFacilityStatusTime = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 9, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsServiceCenterFacilityStatusTime.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsServiceCenterFacilityStatusTime.setDescription('Time Tick of last operStatus change.')
sfpsServiceCenterFacilityRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 9, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsServiceCenterFacilityRequests.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsServiceCenterFacilityRequests.setDescription('Requests made to server.')
sfpsServiceCenterFacilityReply = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 9, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsServiceCenterFacilityReply.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsServiceCenterFacilityReply.setDescription('GOOD replies by server.')
sfpsBlockSourceTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 1, 1), )
if mibBuilder.loadTexts: sfpsBlockSourceTable.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsBlockSourceTable.setDescription('The SourceBlocker table lists all nodes (MAC addresses) that\n                 have been heard locally on the switch. Only a certain subset\n                 (if any) of the nodes in this table are blocked.')
sfpsBlockSourceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 1, 1, 1), ).setIndexNames((0, "CTRON-SFPS-BASE-MIB", "sfpsBlockSourceIndex"))
if mibBuilder.loadTexts: sfpsBlockSourceEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsBlockSourceEntry.setDescription('Entry in the SourceBlocker table indexed by a counter.')
sfpsBlockSourceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsBlockSourceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsBlockSourceIndex.setDescription('The index into the table')
sfpsBlockSourceMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 1, 1, 1, 2), SfpsAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsBlockSourceMAC.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsBlockSourceMAC.setDescription('The MAC address of the node.')
sfpsBlockSourceElapTimeShort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 1, 1, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsBlockSourceElapTimeShort.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsBlockSourceElapTimeShort.setDescription('The elapsed time (seconds) in the current short-threshold\n                 period.')
sfpsBlockSourceNumCallsShort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsBlockSourceNumCallsShort.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsBlockSourceNumCallsShort.setDescription('The number of packets seen from the node during the elapsed\n                 time for the short-threshold.')
sfpsBlockSourceElapTimeLong = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 1, 1, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsBlockSourceElapTimeLong.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsBlockSourceElapTimeLong.setDescription('The elapsed time (seconds) in the current long-threshold \n                period.')
sfpsBlockSourceNumCallLong = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsBlockSourceNumCallLong.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsBlockSourceNumCallLong.setDescription('The number of packets seen from the node during the elapsed\n                 time for the long-threshold.')
sfpsBlockSourceBlockFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("blocked", 1), ("wouldBeBlocked", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsBlockSourceBlockFlag.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsBlockSourceBlockFlag.setDescription('Describes whether the node is blocked or not. There are three\n                 possible integer values for this field: 0-notBlocked,\n                 1-Blocked, 2-WouldBeBlocked. The WouldBeBlocked value is used\n                 to represent a node that would be in the blocked state if the\n                 SourceBlocker was enabled. A node can get into this state only\n                 if the blocker is disabled. If the blocker is enabled at this\n                 point, the node will be blocked, and a connection filter will\n                 be put in place when the next packet is received from this\n                 node.')
sfpsBlockSourceUnBlockableFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("unblockable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsBlockSourceUnBlockableFlag.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsBlockSourceUnBlockableFlag.setDescription('Flags a node as either Blockable(0) or Unblockable(1). When a\n                 node is unblockable, it will never be blocked regardless of the\n                 number of packets it sends. The default setting is blockable.\n                 Any node can be changed to unblockable via the Source Blocker\n                 API (SBAPI).')
sfpsBlockSourceFilterPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 1, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsBlockSourceFilterPresent.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsBlockSourceFilterPresent.setDescription(' Flags whether or not a connection filter is in place for the\n                 given node. (This attribute cannot be changed on its own and is\n                 therefore used only for diagnostic purposes. It is used\n                 internally so that only one filter connection will be mapped\n                 per node.)')
sfpsBlockSourceNext = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 1, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsBlockSourceNext.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsBlockSourceNext.setDescription('If this node entry (instance) is part of a hash chain, the \n                NEXT leaf will contain the index to the next node entry in \n                the chain. Otherwise, it will contain -1.')
sfpsBlockSourceBlocksOnlyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 1, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsBlockSourceBlocksOnlyIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsBlockSourceBlocksOnlyIndex.setDescription("Contains the index into the BlockSourceOnly table or the\n                 UnblockableOnly table depending on the entry flags. If the\n                 'blocked flag' is set, this value represents the index into\n                 the BlockSourceOnly table. If the 'unblockable' flag is set,\n                 this value represents the index into the UnblockableOnly\n                 table. Otherwise, this value is set to -1 (representing that\n                 it is not used.)")
sfpsBlockSourceOnlyTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 2, 1), )
if mibBuilder.loadTexts: sfpsBlockSourceOnlyTable.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsBlockSourceOnlyTable.setDescription("The format of the BlockSourceOnly Table is exactly the same as the\n                 SourceBlocker Table. The only difference is that the entries in\n                 this table are only a subset of the entries in the SourceBlocker\n                 Table. Only the entries that have a BLOCKFLAG set to 'blocked' or\n                 'would-be-blocked' will reside in this table.")
sfpsBlockSourceOnlyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 2, 1, 1), ).setIndexNames((0, "CTRON-SFPS-BASE-MIB", "sfpsBlockSourceOnlyIndex"))
if mibBuilder.loadTexts: sfpsBlockSourceOnlyEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsBlockSourceOnlyEntry.setDescription('Entry in the BlockSourceOnly table indexed by a counter.')
sfpsBlockSourceOnlyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsBlockSourceOnlyIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsBlockSourceOnlyIndex.setDescription('The index into the table')
sfpsBlockSourceOnlyMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 2, 1, 1, 2), SfpsAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsBlockSourceOnlyMAC.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsBlockSourceOnlyMAC.setDescription('The MAC address of the node.')
sfpsBlockSourceOnlyElapTimeShort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 2, 1, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsBlockSourceOnlyElapTimeShort.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsBlockSourceOnlyElapTimeShort.setDescription('The elapsed time (seconds) in the current short-threshold\n                 period.')
sfpsBlockSourceOnlyNumCallsShort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsBlockSourceOnlyNumCallsShort.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsBlockSourceOnlyNumCallsShort.setDescription('The number of packets seen from the node during the elapsed\n                 time for the short-threshold.')
sfpsBlockSourceOnlyElapTimeLong = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 2, 1, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsBlockSourceOnlyElapTimeLong.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsBlockSourceOnlyElapTimeLong.setDescription('The elapsed time (seconds) in the current long-threshold \n                period.')
sfpsBlockSourceOnlyNumCallLong = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsBlockSourceOnlyNumCallLong.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsBlockSourceOnlyNumCallLong.setDescription('The number of packets seen from the node during the elapsed\n                 time for the long-threshold.')
sfpsBlockSourceOnlyBlockFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("blocked", 1), ("wouldBeBlocked", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsBlockSourceOnlyBlockFlag.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsBlockSourceOnlyBlockFlag.setDescription('Describes whether the node is blocked or not. There are three\n                 possible integer values for this field: 0-notBlocked,\n                 1-Blocked, 2-WouldBeBlocked. The WouldBeBlocked value is used\n                 to represent a node that would be in the blocked state if the\n                 SourceBlocker was enabled. A node can get into this state only\n                 if the blocker is disabled. If the blocker is enabled at this\n                 point, the node will be blocked, and a connection filter will\n                 be put in place when the next packet is received from this\n                 node.')
sfpsBlockSourceOnlyUnBlockableFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("unblockable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsBlockSourceOnlyUnBlockableFlag.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsBlockSourceOnlyUnBlockableFlag.setDescription(' Flags a node as either Blockable(0) or Unblockable(1). When a\n                 node is unblockable, it will never be blocked regardless of the\n                 number of packets it sends. The default setting is blockable.\n                 Any node can be changed to unblockable via the Source Blocker\n                 API (SBAPI).')
sfpsBlockSourceOnlyFilterPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 2, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsBlockSourceOnlyFilterPresent.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsBlockSourceOnlyFilterPresent.setDescription(' Flags whether or not a connection filter is in place for the\n                 given node. (This attribute cannot be changed on its own and is\n                 therefore used only for diagnostic purposes. It is used\n                 internally so that only one filter connection will be mapped\n                 per node.)')
sfpsBlockSourceOnlyNext = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 2, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsBlockSourceOnlyNext.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsBlockSourceOnlyNext.setDescription('If this node entry (instance) is part of a hash chain, the \n                NEXT leaf will contain the index to the next node entry in \n                the chain. Otherwise, it will contain -1.')
sfpsBlockSourceOnlyBlocksOnlyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 2, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsBlockSourceOnlyBlocksOnlyIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsBlockSourceOnlyBlocksOnlyIndex.setDescription("Contains the index into the BlockSourceOnly table or the\n                 UnblockableOnly table depending on the entry flags. If the\n                 'blocked' flag is set, this value represents the index into\n                 the BlockSourceOnly table. If the 'unblockable' flag is set,\n                 this value represents the index into the UnblockableOnly\n                 table. Otherwise, this value is set to -1 (representing that\n                 it is not used.)")
sfpsBlockSourcePortTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 3, 1), )
if mibBuilder.loadTexts: sfpsBlockSourcePortTable.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsBlockSourcePortTable.setDescription(" The SourceBlock API allows for administratively selecting a port and\n                 flagging it as 'unblockable'. The BlockSourcePort table shows which\n                 ports are set to 'unblockable' and which ones remain set to the default\n                 'blockable' setting.")
sfpsBlockSourcePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 3, 1, 1), ).setIndexNames((0, "CTRON-SFPS-BASE-MIB", "sfpsBlockSourcePortPort"))
if mibBuilder.loadTexts: sfpsBlockSourcePortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsBlockSourcePortEntry.setDescription(' Entry into the BlockSourcePort Table')
sfpsBlockSourcePortPort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsBlockSourcePortPort.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsBlockSourcePortPort.setDescription('This is the instance part of the table. There will be as many\n                 instances as there are logical ports in the device. The attributes \n                represented in subsequent leaves all pertain to this port instance.')
sfpsBlockSourcePortBlockability = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("unblockable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsBlockSourcePortBlockability.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsBlockSourcePortBlockability.setDescription('This leaf contains either 0-blockable or 1-unblockable, depending on \n                whether nodes on this port are allowed to be blocked or not.')
sfpsBlockSourceAPIVerb = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("other", 1), ("switchToLearning", 2), ("switchToBlocking", 3), ("setShortThreshold", 4), ("setShortPeriod", 5), ("setLongThreshold", 6), ("setLongPeriod", 7), ("clearAll", 8), ("blockMac", 9), ("unblockMac", 10), ("setMacUnblockable", 11), ("setMacBlockable", 12), ("setPortUnblockable", 13), ("setPortBlockable", 14), ("setReapUserCnx", 15)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsBlockSourceAPIVerb.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsBlockSourceAPIVerb.setDescription("Other -- N/A\n                Disable -- disable the source blocker (nodes that are currently \n                 blocked will remain blocked, but no additional nodes will be blocked)\n                Enable -- enable the source blocker (allow it to start blocking nodes)\n                ClearAll -- clear the entire block table (this does not remove any \n                 connection filters, and should only be used as a diagnostic tool.)\n                BlockMac -- administratively block a node (The node's MAC address\n                 must be previously set in the MAC leaf.)\n                UnblockMac -- administratively unblock a node (The node's MAC address\n                 must be previously set in the MAC leaf.)\n                SetMacUnblockable -- administratively mark a node as 'unblockable' \n                 so that it cannot be blocked. (The node's MAC must be previously set \n                 in the MAC leaf.) If the relevant node is blocked at the time the \n                SetMacUnblockable command is issued, the node will automatically be\n                 'unblocked' first.\n                SetMacBlockable -- administratively mark a node as 'blockable' so that \n                 it can be blocked. (The node's MAC must be previously set in the MAC\n                 leaf.)\n                SetPortUnblockable -- administratively mark a port as 'unblockable' so\n                 that any nodes on that port cannot be blocked. (The port number must\n                 be previously set in the Port leaf.)\n                SetPortBlockable -- administratively mark a port as 'blockable' so that\n                 all nodes on that port can be blocked. (The port number must be\n                 previously set in the Port leaf.)\n                SetReapUserCnx -- administratively mark a port as 'blocked' so that administratively\n                 mark a port as 'blockable' so that.)")
sfpsBlockSourceAPIInputValue = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 4, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsBlockSourceAPIInputValue.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsBlockSourceAPIInputValue.setDescription('Set the input value to enter')
sfpsBlockSourceAPIPort = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 4, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsBlockSourceAPIPort.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsBlockSourceAPIPort.setDescription('Read/Write leaf used in conjunction with SetPortUnblockable and\n                 SetPortBlockable. (values of 1 through numLogicalPorts are valid.')
sfpsBlockSourceAPIMAC = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 4, 4), SfpsAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsBlockSourceAPIMAC.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsBlockSourceAPIMAC.setDescription('Leaf used to set the MAC address that will be operated on with one\n                 of the above verbs.')
sfpsBlockSourceAPIBlockStatus = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("learning", 2), ("blocking", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsBlockSourceAPIBlockStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsBlockSourceAPIBlockStatus.setDescription("Status of the blocker object (enabled/disabled.) Additional nodes \n                will be blocked only when this status leaf is in the 'enabled' state.")
sfpsBlockSourceAPIShortThreshold = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 4, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsBlockSourceAPIShortThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsBlockSourceAPIShortThreshold.setDescription('The number of packets per a SHORTPERIOD that will result in a node\n                 being blocked. This can be changed by writing directly to this leaf.\n                 The only limit imposed on this value is that it has to be positive \n                (greater than zero.) There is no upper bound except for what is \n                implied by the size of an integer.')
sfpsBlockSourceAPIShortPeriod = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 4, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsBlockSourceAPIShortPeriod.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsBlockSourceAPIShortPeriod.setDescription('The sample period to use for determining if any given node has \n                exceeded the SHORTTHRESHOLD. See SHORTTHRESHOLD for bounds checking \n                for this value')
sfpsBlockSourceAPILongThreshold = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 4, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsBlockSourceAPILongThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsBlockSourceAPILongThreshold.setDescription('The number of packets per a LONGPERIOD that will result in a node\n                 being blocked. See SHORTTHRESHOLD for bounds checking for this value.')
sfpsBlockSourceAPILongPeriod = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 4, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsBlockSourceAPILongPeriod.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsBlockSourceAPILongPeriod.setDescription('The sample period to use for determining if any given node has\n                 exceeded the LONGTHRESHOLD. See SHORTTHRESHOLD for bounds checking\n                 for this value.')
sfpsBlockSourceAPIReapUserCnxs = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 4, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsBlockSourceAPIReapUserCnxs.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsBlockSourceAPIReapUserCnxs.setDescription('The sample period to use for determining if any given node has\n                 exceeded the LONGTHRESHOLD. See SHORTTHRESHOLD for bounds checking\n                 for this value.')
sfpsBlockSourceExcludeTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 5, 1), )
if mibBuilder.loadTexts: sfpsBlockSourceExcludeTable.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsBlockSourceExcludeTable.setDescription("The format of the UnblockableOnly Table is exactly the same as the\n                 SourceBlocker Table. The only difference is that the entries in this\n                 table are only a subset of the entries in the SourceBlocker Table. \n                Only the entries that have an UNBLOCKABLEFLAG set to 'unblockable'\n                 will show up in this table.")
sfpsBlockSourceExcludeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 5, 1, 1), ).setIndexNames((0, "CTRON-SFPS-BASE-MIB", "sfpsBlockSourceExcludeIndex"))
if mibBuilder.loadTexts: sfpsBlockSourceExcludeEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsBlockSourceExcludeEntry.setDescription(' Entry in the BlockSourceOnly table indexed by a counter.')
sfpsBlockSourceExcludeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsBlockSourceExcludeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsBlockSourceExcludeIndex.setDescription(' The index into the table')
sfpsBlockSourceExcludeMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 5, 1, 1, 2), SfpsAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsBlockSourceExcludeMAC.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsBlockSourceExcludeMAC.setDescription('The MAC address of the node.')
sfpsBlockSourceExcludeElapTimeShort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 5, 1, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsBlockSourceExcludeElapTimeShort.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsBlockSourceExcludeElapTimeShort.setDescription('The elapsed time (seconds) in the current short-threshold\n                 period.')
sfpsBlockSourceExcludeNumCallsShort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 5, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsBlockSourceExcludeNumCallsShort.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsBlockSourceExcludeNumCallsShort.setDescription('The number of packets seen from the node during the elapsed\n                 time for the short-threshold')
sfpsBlockSourceExcludeElapTimeLong = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 5, 1, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsBlockSourceExcludeElapTimeLong.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsBlockSourceExcludeElapTimeLong.setDescription('The elapsed time (seconds) in the current long-threshold \n                period')
sfpsBlockSourceExcludeNumCallLong = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 5, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsBlockSourceExcludeNumCallLong.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsBlockSourceExcludeNumCallLong.setDescription('The number of packets seen from the node during the elapsed\n                 time for the long-threshold.')
sfpsBlockSourceExcludeBlockFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("blocked", 1), ("wouldBeBlocked", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsBlockSourceExcludeBlockFlag.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsBlockSourceExcludeBlockFlag.setDescription('Describes whether the node is blocked or not. There are three\n                 possible integer values for this field: 0-notBlocked,\n                 1-Blocked, 2-WouldBeBlocked. The WouldBeBlocked value is used\n                 to represent a node that would be in the blocked state if the\n                 SourceBlocker was enabled. A node can get into this state only\n                 if the blocker is disabled. If the blocker is enabled at this\n                 point, the node will be blocked, and a connection filter will\n                 be put in place when the next packet is received from this\n                 node')
sfpsBlockSourceExcludeUnBlockableFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("unblockable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsBlockSourceExcludeUnBlockableFlag.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsBlockSourceExcludeUnBlockableFlag.setDescription('Flags a node as either Blockable(0) or Unblockable(1). When a\n                 node is unblockable, it will never be blocked regardless of the\n                 number of packets it sends. The default setting is blockable.\n                 Any node can be changed to unblockable via the Source Blocker\n                 API (SBAPI).')
sfpsBlockSourceExcludeFilterPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 5, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsBlockSourceExcludeFilterPresent.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsBlockSourceExcludeFilterPresent.setDescription(' Flags whether or not a connection filter is in place for the\n                 given node. (This attribute cannot be changed on its own and is\n                 therefore used only for diagnostic purposes. It is used\n                 internally so that only one filter connection will be mapped\n                 per node.)')
sfpsBlockSourceExcludeNext = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 5, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsBlockSourceExcludeNext.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsBlockSourceExcludeNext.setDescription('If this node entry (instance) is part of a hash chain, the \n                NEXT leaf will contain the index to the next node entry in \n                the chain. Otherwise, it will contain -1')
sfpsBlockSourceExcludeBlockSourceOnlyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 5, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsBlockSourceExcludeBlockSourceOnlyIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsBlockSourceExcludeBlockSourceOnlyIndex.setDescription("Contains the index into the BlockSourceOnly table or the\n                 UnblockableOnly table depending on the entry flags. If the\n                 'blocked' flag is set, this value represents the index into\n                 the BlockSourceOnly table. If the 'unblockable' flag is set,\n                 this value represents the index into the UnblockableOnly\n                 table. Otherwise, this value is set to -1 (representing that\n                 it is not used")
sfpsBlockSourceStatsNumBlocks = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsBlockSourceStatsNumBlocks.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsBlockSourceStatsNumBlocks.setDescription('')
sfpsBlockSourceStatsNumCollisions = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsBlockSourceStatsNumCollisions.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsBlockSourceStatsNumCollisions.setDescription('The number of hash collisions resulting in a chain of nodes. \n                (diagnostic only.)')
sfpsBlockSourceStatsLongestChain = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 6, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsBlockSourceStatsLongestChain.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsBlockSourceStatsLongestChain.setDescription('The maximum number of nodes in a linked list chain \n                (including the hash bucket itself) due to hashing collisions. \n                (diagnostic only.)')
sfpsBlockSourceStatsNumEntries = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 6, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsBlockSourceStatsNumEntries.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsBlockSourceStatsNumEntries.setDescription('The number of entries in the SourceBlocker table. \n                (Each new node that is heard has its own entry.')
sfpsBlockSourceStatsMaxNumEntries = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 6, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsBlockSourceStatsMaxNumEntries.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsBlockSourceStatsMaxNumEntries.setDescription(" The maximum number of entries that can fit in the SourceBlocker Table. \n                (This currently mirrors the size of the Directory's NodeTable.)")
sfpsBlockSourceStatsSizeOfObj = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 6, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsBlockSourceStatsSizeOfObj.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsBlockSourceStatsSizeOfObj.setDescription('The size of the SourceBlocker object itself (in bytes.)')
sfpsBlockSourceStatsHashModValue = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 6, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsBlockSourceStatsHashModValue.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsBlockSourceStatsHashModValue.setDescription('The value that is used for the modulus operation in the \n                hashing algorythm.')
sfpsBlockSourceStatsHashSlotsSize = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 6, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsBlockSourceStatsHashSlotsSize.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsBlockSourceStatsHashSlotsSize.setDescription('The amount of storage used for the hash buckets (in bytes.)')
sfpsBlockSourceStatsTableSize = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 6, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsBlockSourceStatsTableSize.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsBlockSourceStatsTableSize.setDescription('The amount of storage used for the SourceBlocker Table (in bytes.)')
sfpsBlockSourceStatsBlockSourceOnlySize = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 6, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsBlockSourceStatsBlockSourceOnlySize.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsBlockSourceStatsBlockSourceOnlySize.setDescription('The amount of storage used for the Blocks-Only index array (in bytes.)')
sfpsBlockSourceStatsUnblockableSize = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 6, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsBlockSourceStatsUnblockableSize.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsBlockSourceStatsUnblockableSize.setDescription('The amount of storage used for the Unblockable-Only index array \n                (in bytes.)')
sfpsBlockSourceStatsPortMaskSize = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 6, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsBlockSourceStatsPortMaskSize.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsBlockSourceStatsPortMaskSize.setDescription('The amount of storage used for the port mask object (in bytes.)')
sfpsBlockSourceStatsTotalHeapBytes = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 14, 6, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsBlockSourceStatsTotalHeapBytes.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsBlockSourceStatsTotalHeapBytes.setDescription('The total amount of heap memory used for all data storage (above) \n                including the SourceBlocker object itself (in bytes.)')
sfpsDHCPServerVLANName = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 15, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsDHCPServerVLANName.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDHCPServerVLANName.setDescription('')
sfpsDHCPServerVLANSingleFloodStatus = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 15, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsDHCPServerVLANSingleFloodStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDHCPServerVLANSingleFloodStatus.setDescription('')
sfpsDHCPServerVLANVersion = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 15, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDHCPServerVLANVersion.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDHCPServerVLANVersion.setDescription('')
sfpsATalkAMRVLANControlName = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 16, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsATalkAMRVLANControlName.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsATalkAMRVLANControlName.setDescription('')
sfpsATalkAMRVLANControlVersion = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 16, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsATalkAMRVLANControlVersion.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsATalkAMRVLANControlVersion.setDescription('')
mibBuilder.exportSymbols("CTRON-SFPS-BASE-MIB", sfpsServiceCenterFacilityAdminStatus=sfpsServiceCenterFacilityAdminStatus, sfpsBlockSourceExcludeElapTimeLong=sfpsBlockSourceExcludeElapTimeLong, sfpsCPResourcesConnectOK=sfpsCPResourcesConnectOK, sfpsCPResourcesSingleFlood=sfpsCPResourcesSingleFlood, sfpsCPResourcesResolveError=sfpsCPResourcesResolveError, sfpsCSPControlTablePktsProcessed=sfpsCSPControlTablePktsProcessed, sfpsCSPControlTableSwitchToCallProc=sfpsCSPControlTableSwitchToCallProc, sfpsCPResourcesTableAdminStatus=sfpsCPResourcesTableAdminStatus, sfpsServiceCenterFacilityMetric=sfpsServiceCenterFacilityMetric, sfpsBlockSourceIndex=sfpsBlockSourceIndex, sfpsBlockSourcePortBlockability=sfpsBlockSourcePortBlockability, sfpsCPResourcesTotalRate=sfpsCPResourcesTotalRate, sfpsBlockSourceStatsNumEntries=sfpsBlockSourceStatsNumEntries, sfpsBlockSourceNext=sfpsBlockSourceNext, sfpsBlockSourceEntry=sfpsBlockSourceEntry, sfpsBlockSourceStatsTableSize=sfpsBlockSourceStatsTableSize, sfpsCPResourcesTableName=sfpsCPResourcesTableName, SfpsAddress=SfpsAddress, sfpsBlockSourceOnlyUnBlockableFlag=sfpsBlockSourceOnlyUnBlockableFlag, sfpsServiceCenterFacilityStatusTime=sfpsServiceCenterFacilityStatusTime, sfpsBlockSourceOnlyElapTimeLong=sfpsBlockSourceOnlyElapTimeLong, sfpsCSPControlTable=sfpsCSPControlTable, sfpsServiceCenterFacilityRequests=sfpsServiceCenterFacilityRequests, sfpsBlockSourceStatsBlockSourceOnlySize=sfpsBlockSourceStatsBlockSourceOnlySize, sfpsDHCPServerVLANName=sfpsDHCPServerVLANName, sfpsCPResourcesNeedProxyIn=sfpsCPResourcesNeedProxyIn, sfpsCPResourcesDuplicate=sfpsCPResourcesDuplicate, sfpsBlockSourceExcludeIndex=sfpsBlockSourceExcludeIndex, sfpsBlockSourceStatsPortMaskSize=sfpsBlockSourceStatsPortMaskSize, sfpsCPResourcesPersistMask=sfpsCPResourcesPersistMask, sfpsATalkAMRVLANControlVersion=sfpsATalkAMRVLANControlVersion, sfpsBlockSourceAPIBlockStatus=sfpsBlockSourceAPIBlockStatus, sfpsBlockSourceAPIShortThreshold=sfpsBlockSourceAPIShortThreshold, sfpsServiceCenterFacilityTable=sfpsServiceCenterFacilityTable, sfpsCSPControlTableCSPName=sfpsCSPControlTableCSPName, sfpsCPResourcesAPI=sfpsCPResourcesAPI, sfpsBlockSourceAPIMAC=sfpsBlockSourceAPIMAC, sfpsBlockSourceElapTimeLong=sfpsBlockSourceElapTimeLong, sfpsBlockSourceAPILongThreshold=sfpsBlockSourceAPILongThreshold, sfpsBlockSourceExcludeFilterPresent=sfpsBlockSourceExcludeFilterPresent, sfpsBlockSourceStatsNumBlocks=sfpsBlockSourceStatsNumBlocks, sfpsBlockSourceAPIPort=sfpsBlockSourceAPIPort, sfpsDHCPServerVLANSingleFloodStatus=sfpsDHCPServerVLANSingleFloodStatus, sfpsCPResourcesTableEntry=sfpsCPResourcesTableEntry, sfpsCPResourcesAPIAttribute=sfpsCPResourcesAPIAttribute, sfpsCPResourcesConfigTime=sfpsCPResourcesConfigTime, sfpsCPResourcesNeedValidNet=sfpsCPResourcesNeedValidNet, sfpsServiceCenterFacilityEntry=sfpsServiceCenterFacilityEntry, sfpsCPResourcesInvalidNetDrops=sfpsCPResourcesInvalidNetDrops, sfpsCPResourcesDiscoverError=sfpsCPResourcesDiscoverError, sfpsCPResourcesPolicyError=sfpsCPResourcesPolicyError, sfpsBlockSourceMAC=sfpsBlockSourceMAC, sfpsCPResourcesConnectFail=sfpsCPResourcesConnectFail, sfpsBlockSourcePortTable=sfpsBlockSourcePortTable, sfpsBlockSourceAPIInputValue=sfpsBlockSourceAPIInputValue, sfpsBlockSourceAPILongPeriod=sfpsBlockSourceAPILongPeriod, sfpsCPResourcesConnectError=sfpsCPResourcesConnectError, sfpsBlockSourceBlocksOnlyIndex=sfpsBlockSourceBlocksOnlyIndex, sfpsBlockSourceNumCallLong=sfpsBlockSourceNumCallLong, sfpsBlockSourceExcludeElapTimeShort=sfpsBlockSourceExcludeElapTimeShort, sfpsServiceCenterFacilityReply=sfpsServiceCenterFacilityReply, sfpsCPResourcesTableStateTime=sfpsCPResourcesTableStateTime, sfpsCSPControlTableEntry=sfpsCSPControlTableEntry, sfpsBlockSourceOnlyIndex=sfpsBlockSourceOnlyIndex, HexInteger=HexInteger, sfpsBlockSourceStatsUnblockableSize=sfpsBlockSourceStatsUnblockableSize, sfpsCPResourcesNeedFlood=sfpsCPResourcesNeedFlood, sfpsBlockSourceOnlyBlocksOnlyIndex=sfpsBlockSourceOnlyBlocksOnlyIndex, sfpsBlockSourceTable=sfpsBlockSourceTable, sfpsBlockSourceExcludeNext=sfpsBlockSourceExcludeNext, sfpsATalkAMRVLANControlName=sfpsATalkAMRVLANControlName, sfpsBlockSourceUnBlockableFlag=sfpsBlockSourceUnBlockableFlag, sfpsServiceCenterFacilityHashLeaf=sfpsServiceCenterFacilityHashLeaf, sfpsBlockSourceStatsTotalHeapBytes=sfpsBlockSourceStatsTotalHeapBytes, sfpsCPResourcesNeedDiscover=sfpsCPResourcesNeedDiscover, sfpsCPResourcesNeedResolve=sfpsCPResourcesNeedResolve, sfpsBlockSourceExcludeEntry=sfpsBlockSourceExcludeEntry, sfpsBlockSourceAPIVerb=sfpsBlockSourceAPIVerb, sfpsBlockSourcePortPort=sfpsBlockSourcePortPort, sfpsBlockSourceExcludeBlockSourceOnlyIndex=sfpsBlockSourceExcludeBlockSourceOnlyIndex, sfpsBlockSourceStatsMaxNumEntries=sfpsBlockSourceStatsMaxNumEntries, sfpsCPResourcesResolveFlood=sfpsCPResourcesResolveFlood, sfpsBlockSourceElapTimeShort=sfpsBlockSourceElapTimeShort, sfpsBlockSourceStatsHashSlotsSize=sfpsBlockSourceStatsHashSlotsSize, sfpsBlockSourceExcludeNumCallsShort=sfpsBlockSourceExcludeNumCallsShort, sfpsCPResourcesAPIVerb=sfpsCPResourcesAPIVerb, sfpsBlockSourceOnlyNumCallLong=sfpsBlockSourceOnlyNumCallLong, sfpsCSPControlTablePktRate=sfpsCSPControlTablePktRate, sfpsCPResourcesAcceptRate=sfpsCPResourcesAcceptRate, sfpsCPResourcesResolveFail=sfpsCPResourcesResolveFail, sfpsBlockSourceExcludeTable=sfpsBlockSourceExcludeTable, sfpsBlockSourceStatsLongestChain=sfpsBlockSourceStatsLongestChain, sfpsBlockSourceExcludeUnBlockableFlag=sfpsBlockSourceExcludeUnBlockableFlag, sfpsCPResourcesTablePtsIn=sfpsCPResourcesTablePtsIn, sfpsDHCPServerVLANVersion=sfpsDHCPServerVLANVersion, sfpsCPResourcesAPIAdminStatus=sfpsCPResourcesAPIAdminStatus, sfpsBlockSourceOnlyTable=sfpsBlockSourceOnlyTable, sfpsBlockSourceExcludeMAC=sfpsBlockSourceExcludeMAC, sfpsCPResourcesTableId=sfpsCPResourcesTableId, sfpsServiceCenterFacilityOperStatus=sfpsServiceCenterFacilityOperStatus, sfpsBlockSourceStatsHashModValue=sfpsBlockSourceStatsHashModValue, sfpsCPResourcesConnectFlood=sfpsCPResourcesConnectFlood, sfpsCPResourcesTablePolicyFlood=sfpsCPResourcesTablePolicyFlood, sfpsCSPControlTableCSPType=sfpsCSPControlTableCSPType, sfpsBlockSourceOnlyFilterPresent=sfpsBlockSourceOnlyFilterPresent, sfpsCPResourcesAPIID=sfpsCPResourcesAPIID, sfpsBlockSourceBlockFlag=sfpsBlockSourceBlockFlag, sfpsBlockSourceOnlyNumCallsShort=sfpsBlockSourceOnlyNumCallsShort, sfpsCPResourcesPolicyFail=sfpsCPResourcesPolicyFail, sfpsCPResourcesDiscoverOnly=sfpsCPResourcesDiscoverOnly, sfpsCPResourcesTable=sfpsCPResourcesTable, sfpsBlockSourceOnlyEntry=sfpsBlockSourceOnlyEntry, sfpsCPResourcesAPIPersistance=sfpsCPResourcesAPIPersistance, sfpsBlockSourceOnlyBlockFlag=sfpsBlockSourceOnlyBlockFlag, sfpsCPResourcesTablePtsUsed=sfpsCPResourcesTablePtsUsed, sfpsCPResourcesDiscoverAll=sfpsCPResourcesDiscoverAll, sfpsBlockSourceStatsSizeOfObj=sfpsBlockSourceStatsSizeOfObj, sfpsBlockSourcePortEntry=sfpsBlockSourcePortEntry, sfpsBlockSourceNumCallsShort=sfpsBlockSourceNumCallsShort, sfpsBlockSourceOnlyMAC=sfpsBlockSourceOnlyMAC, sfpsBlockSourceExcludeBlockFlag=sfpsBlockSourceExcludeBlockFlag, sfpsBlockSourceOnlyNext=sfpsBlockSourceOnlyNext, sfpsBlockSourceExcludeNumCallLong=sfpsBlockSourceExcludeNumCallLong, sfpsCPResourcesNeedProxyOut=sfpsCPResourcesNeedProxyOut, sfpsCPResourcesAPIScope=sfpsCPResourcesAPIScope, sfpsCPResourcesTableOperStatus=sfpsCPResourcesTableOperStatus, sfpsCSPControlTableIndex=sfpsCSPControlTableIndex, sfpsServiceCenterFacilityName=sfpsServiceCenterFacilityName, sfpsCPResourcesNeedFilter=sfpsCPResourcesNeedFilter, sfpsBlockSourceStatsNumCollisions=sfpsBlockSourceStatsNumCollisions, sfpsBlockSourceFilterPresent=sfpsBlockSourceFilterPresent, sfpsBlockSourceOnlyElapTimeShort=sfpsBlockSourceOnlyElapTimeShort, sfpsBlockSourceAPIShortPeriod=sfpsBlockSourceAPIShortPeriod, sfpsBlockSourceAPIReapUserCnxs=sfpsBlockSourceAPIReapUserCnxs, sfpsCSPControlTableAdminStatus=sfpsCSPControlTableAdminStatus)
