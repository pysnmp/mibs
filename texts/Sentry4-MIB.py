#
# PySNMP MIB module Sentry4-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/sentry/Sentry4-MIB
# Produced by pysmi-1.1.12 at Tue Jun  4 08:58:42 2024
# On host fv-az2028-26 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Gauge32, Counter64, enterprises, iso, ObjectIdentity, ModuleIdentity, Counter32, NotificationType, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, MibIdentifier, IpAddress, TimeTicks, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Counter64", "enterprises", "iso", "ObjectIdentity", "ModuleIdentity", "Counter32", "NotificationType", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "MibIdentifier", "IpAddress", "TimeTicks", "Unsigned32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
sentry4 = ModuleIdentity((1, 3, 6, 1, 4, 1, 1718, 4))
sentry4.setRevisions(('2017-06-15 18:30', '2016-11-18 23:40', '2016-09-21 23:00', '2016-04-25 21:40', '2015-02-19 10:00', '2014-12-23 11:30',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: sentry4.setRevisionsDescriptions(('Added support for fan sensors, including objects for installed\n             count, identification, speed and status monitoring, threshold\n             and hysteresis configuration, and a notification for events.\n             Added the st4UnitOutletDisplayOrder object.', 'Added the st4UnitProductMfrDate object.  Adjusted the upper\n             limit of voltage objects to 600 Volts.', 'Fixed the st4InputCordOutOfBalanceEvent notification\n             definition to include the correct objects.', 'Added support for the PRO1 product series.  Added the\n             st4SystemProductSeries and st4InputCordNominalPowerFactor\n             objects.  Adjusted the upper limit of cord and line current\n             objects to 600 Amps.  Adjusted the lower limit of nominal\n             voltage objects to 0 Volts.  Corrected the lower limit of\n             several configuration objects from -1 to 0.', 'Corrected the UNITS and value range of temperature sensor\n             threshold objects.', 'Initial release.',))
if mibBuilder.loadTexts: sentry4.setLastUpdated('201706151830Z')
if mibBuilder.loadTexts: sentry4.setOrganization('Server Technology, Inc.')
if mibBuilder.loadTexts: sentry4.setContactInfo('Server Technology, Inc.\n             1040 Sandhill Road\n             Reno, NV 89521\n             Tel: (775) 284-2000\n             Fax: (775) 284-2065\n             Email: mibmaster@servertech.com')
if mibBuilder.loadTexts: sentry4.setDescription('This is the MIB module for the fourth generation of the\n             Sentry product family.  This includes the PRO1 and PRO2\n             series of Smart and Switched Cabinet Distribution Unit (CDU)\n             and Power Distribution Unit (PDU) products.')
serverTech = MibIdentifier((1, 3, 6, 1, 4, 1, 1718))
class DeviceStatus(TextualConvention, Integer32):
    description = 'Status returned by devices.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23))
    namedValues = NamedValues(("normal", 0), ("disabled", 1), ("purged", 2), ("reading", 5), ("settle", 6), ("notFound", 7), ("lost", 8), ("readError", 9), ("noComm", 10), ("pwrError", 11), ("breakerTripped", 12), ("fuseBlown", 13), ("lowAlarm", 14), ("lowWarning", 15), ("highWarning", 16), ("highAlarm", 17), ("alarm", 18), ("underLimit", 19), ("overLimit", 20), ("nvmFail", 21), ("profileError", 22), ("conflict", 23))

class DeviceState(TextualConvention, Integer32):
    description = 'On or off state of devices.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("unknown", 0), ("on", 1), ("off", 2))

class EventNotificationMethods(TextualConvention, Bits):
    description = 'Bits to enable event notification methods.'
    status = 'current'
    namedValues = NamedValues(("snmpTrap", 0), ("email", 1))

st4Objects = MibIdentifier((1, 3, 6, 1, 4, 1, 1718, 4, 1))
st4System = MibIdentifier((1, 3, 6, 1, 4, 1, 1718, 4, 1, 1))
st4SystemConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 1718, 4, 1, 1, 1))
st4SystemProductName = MibScalar((1, 3, 6, 1, 4, 1, 1718, 4, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: st4SystemProductName.setStatus('current')
if mibBuilder.loadTexts: st4SystemProductName.setDescription('The product name.')
st4SystemLocation = MibScalar((1, 3, 6, 1, 4, 1, 1718, 4, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: st4SystemLocation.setStatus('current')
if mibBuilder.loadTexts: st4SystemLocation.setDescription('The location of the system.')
st4SystemFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 1718, 4, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: st4SystemFirmwareVersion.setStatus('current')
if mibBuilder.loadTexts: st4SystemFirmwareVersion.setDescription('The firmware version.')
st4SystemFirmwareBuildInfo = MibScalar((1, 3, 6, 1, 4, 1, 1718, 4, 1, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: st4SystemFirmwareBuildInfo.setStatus('current')
if mibBuilder.loadTexts: st4SystemFirmwareBuildInfo.setDescription('The firmware build information.')
st4SystemNICSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 1718, 4, 1, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: st4SystemNICSerialNumber.setStatus('current')
if mibBuilder.loadTexts: st4SystemNICSerialNumber.setDescription('The serial number of the network interface card.')
st4SystemNICHardwareInfo = MibScalar((1, 3, 6, 1, 4, 1, 1718, 4, 1, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: st4SystemNICHardwareInfo.setStatus('current')
if mibBuilder.loadTexts: st4SystemNICHardwareInfo.setDescription('Hardware information about the network interface card.')
st4SystemProductSeries = MibScalar((1, 3, 6, 1, 4, 1, 1718, 4, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("pro1", 0), ("pro2", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: st4SystemProductSeries.setStatus('current')
if mibBuilder.loadTexts: st4SystemProductSeries.setDescription('The product series.')
st4SystemFeatures = MibScalar((1, 3, 6, 1, 4, 1, 1718, 4, 1, 1, 1, 10), Bits().clone(namedValues=NamedValues(("smartLoadShedding", 0), ("reserved", 1), ("outletControlInhibit", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: st4SystemFeatures.setStatus('current')
if mibBuilder.loadTexts: st4SystemFeatures.setDescription('The key-activated features enabled in the system.')
st4SystemFeatureKey = MibScalar((1, 3, 6, 1, 4, 1, 1718, 4, 1, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 19))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: st4SystemFeatureKey.setStatus('current')
if mibBuilder.loadTexts: st4SystemFeatureKey.setDescription('A valid feature key written to this object will enable a\n             feature in the system.  A valid feature key is in the form\n             xxxx-xxxx-xxxx-xxxx.  A read of this object returns an\n             empty string.')
st4SystemConfigModifiedCount = MibScalar((1, 3, 6, 1, 4, 1, 1718, 4, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: st4SystemConfigModifiedCount.setStatus('current')
if mibBuilder.loadTexts: st4SystemConfigModifiedCount.setDescription('The total number of times the system configuration has changed.')
st4SystemUnitCount = MibScalar((1, 3, 6, 1, 4, 1, 1718, 4, 1, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: st4SystemUnitCount.setStatus('current')
if mibBuilder.loadTexts: st4SystemUnitCount.setDescription('The number of units in the system.')
st4Units = MibIdentifier((1, 3, 6, 1, 4, 1, 1718, 4, 1, 2))
st4UnitCommonConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 1718, 4, 1, 2, 1))
st4UnitConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1718, 4, 1, 2, 2), )
if mibBuilder.loadTexts: st4UnitConfigTable.setStatus('current')
if mibBuilder.loadTexts: st4UnitConfigTable.setDescription('Unit configuration table.')
st4UnitConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1718, 4, 1, 2, 2, 1), ).setIndexNames((0, "Sentry4-MIB", "st4UnitIndex"))
if mibBuilder.loadTexts: st4UnitConfigEntry.setStatus('current')
if mibBuilder.loadTexts: st4UnitConfigEntry.setDescription('Configuration objects for a particular unit.')
st4UnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6)))
if mibBuilder.loadTexts: st4UnitIndex.setStatus('current')
if mibBuilder.loadTexts: st4UnitIndex.setDescription('Unit index.  A=1, B=2, C=3, D=4, E=5, F=6.')
st4UnitID = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 2, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: st4UnitID.setStatus('current')
if mibBuilder.loadTexts: st4UnitID.setDescription('The internal ID of the unit.  Format=A.')
st4UnitName = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 2, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: st4UnitName.setStatus('current')
if mibBuilder.loadTexts: st4UnitName.setDescription('The name of the unit.')
st4UnitProductSN = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 2, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: st4UnitProductSN.setStatus('current')
if mibBuilder.loadTexts: st4UnitProductSN.setDescription('The product serial number of the unit.')
st4UnitModel = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 2, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: st4UnitModel.setStatus('current')
if mibBuilder.loadTexts: st4UnitModel.setDescription('The model of the unit.')
st4UnitAssetTag = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 2, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: st4UnitAssetTag.setStatus('current')
if mibBuilder.loadTexts: st4UnitAssetTag.setDescription('The asset tag of the unit.')
st4UnitType = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("masterPdu", 0), ("linkPdu", 1), ("controller", 2), ("emcu", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: st4UnitType.setStatus('current')
if mibBuilder.loadTexts: st4UnitType.setDescription('The type of the unit.')
st4UnitCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 2, 2, 1, 8), Bits().clone(namedValues=NamedValues(("dc", 0), ("phase3", 1), ("wye", 2), ("delta", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: st4UnitCapabilities.setStatus('current')
if mibBuilder.loadTexts: st4UnitCapabilities.setDescription('The capabilities of the unit.')
st4UnitProductMfrDate = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 2, 2, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: st4UnitProductMfrDate.setStatus('current')
if mibBuilder.loadTexts: st4UnitProductMfrDate.setDescription('The product manufacture date in YYYY-MM-DD (ISO 8601 format) of\n             the unit.')
st4UnitDisplayOrientation = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 2, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("normal", 0), ("inverted", 1), ("auto", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: st4UnitDisplayOrientation.setStatus('current')
if mibBuilder.loadTexts: st4UnitDisplayOrientation.setDescription('The orientation of all displays in the unit.')
st4UnitOutletSequenceOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 2, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("reversed", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: st4UnitOutletSequenceOrder.setStatus('current')
if mibBuilder.loadTexts: st4UnitOutletSequenceOrder.setDescription('The sequencing order of all outlets in the unit.')
st4UnitOutletDisplayOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 2, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("reversed", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: st4UnitOutletDisplayOrder.setStatus('current')
if mibBuilder.loadTexts: st4UnitOutletDisplayOrder.setDescription('The display order in the user interfaces of all outlets in the\n             unit.')
st4UnitInputCordCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 2, 2, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: st4UnitInputCordCount.setStatus('current')
if mibBuilder.loadTexts: st4UnitInputCordCount.setDescription('The number of power input cords into the unit.')
st4UnitTempSensorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 2, 2, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: st4UnitTempSensorCount.setStatus('current')
if mibBuilder.loadTexts: st4UnitTempSensorCount.setDescription('The number of external temperature sensors supported by the unit.')
st4UnitHumidSensorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 2, 2, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: st4UnitHumidSensorCount.setStatus('current')
if mibBuilder.loadTexts: st4UnitHumidSensorCount.setDescription('The number of external humidity sensors supported by the unit.')
st4UnitWaterSensorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 2, 2, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: st4UnitWaterSensorCount.setStatus('current')
if mibBuilder.loadTexts: st4UnitWaterSensorCount.setDescription('The number of external water sensors supported by the unit.')
st4UnitCcSensorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 2, 2, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: st4UnitCcSensorCount.setStatus('current')
if mibBuilder.loadTexts: st4UnitCcSensorCount.setDescription('The number of external contact closure sensors supported by the\n             unit.')
st4UnitAdcSensorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 2, 2, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: st4UnitAdcSensorCount.setStatus('current')
if mibBuilder.loadTexts: st4UnitAdcSensorCount.setDescription('The number of analog-to-digital converter sensors supported by the\n             unit.')
st4UnitFanSensorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 2, 2, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: st4UnitFanSensorCount.setStatus('current')
if mibBuilder.loadTexts: st4UnitFanSensorCount.setDescription('The number of fan sensors supported by the unit.')
st4UnitMonitorTable = MibTable((1, 3, 6, 1, 4, 1, 1718, 4, 1, 2, 3), )
if mibBuilder.loadTexts: st4UnitMonitorTable.setStatus('current')
if mibBuilder.loadTexts: st4UnitMonitorTable.setDescription('Unit monitor table.')
st4UnitMonitorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1718, 4, 1, 2, 3, 1), ).setIndexNames((0, "Sentry4-MIB", "st4UnitIndex"))
if mibBuilder.loadTexts: st4UnitMonitorEntry.setStatus('current')
if mibBuilder.loadTexts: st4UnitMonitorEntry.setDescription('Objects to monitor for a particular unit.')
st4UnitStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 2, 3, 1, 1), DeviceStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st4UnitStatus.setStatus('current')
if mibBuilder.loadTexts: st4UnitStatus.setDescription('The status of the unit.')
st4UnitEventConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1718, 4, 1, 2, 4), )
if mibBuilder.loadTexts: st4UnitEventConfigTable.setStatus('current')
if mibBuilder.loadTexts: st4UnitEventConfigTable.setDescription('Unit event configuration table.')
st4UnitEventConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1718, 4, 1, 2, 4, 1), ).setIndexNames((0, "Sentry4-MIB", "st4UnitIndex"))
if mibBuilder.loadTexts: st4UnitEventConfigEntry.setStatus('current')
if mibBuilder.loadTexts: st4UnitEventConfigEntry.setDescription('Event configuration objects for a particular unit.')
st4UnitNotifications = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 2, 4, 1, 1), EventNotificationMethods()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: st4UnitNotifications.setStatus('current')
if mibBuilder.loadTexts: st4UnitNotifications.setDescription('The notification methods enabled for unit events.')
st4InputCords = MibIdentifier((1, 3, 6, 1, 4, 1, 1718, 4, 1, 3))
st4InputCordCommonConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 1718, 4, 1, 3, 1))
st4InputCordActivePowerHysteresis = MibScalar((1, 3, 6, 1, 4, 1, 1718, 4, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setUnits('Watts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: st4InputCordActivePowerHysteresis.setStatus('current')
if mibBuilder.loadTexts: st4InputCordActivePowerHysteresis.setDescription('The active power hysteresis of the input cord in Watts.')
st4InputCordApparentPowerHysteresis = MibScalar((1, 3, 6, 1, 4, 1, 1718, 4, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setUnits('Volt-Amps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: st4InputCordApparentPowerHysteresis.setStatus('current')
if mibBuilder.loadTexts: st4InputCordApparentPowerHysteresis.setDescription('The apparent power hysteresis of the input cord in Volt-Amps.')
st4InputCordPowerFactorHysteresis = MibScalar((1, 3, 6, 1, 4, 1, 1718, 4, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20))).setUnits('hundredths').setMaxAccess("readwrite")
if mibBuilder.loadTexts: st4InputCordPowerFactorHysteresis.setStatus('current')
if mibBuilder.loadTexts: st4InputCordPowerFactorHysteresis.setDescription('The power factor hysteresis of the input cord in hundredths.')
st4InputCordOutOfBalanceHysteresis = MibScalar((1, 3, 6, 1, 4, 1, 1718, 4, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: st4InputCordOutOfBalanceHysteresis.setStatus('current')
if mibBuilder.loadTexts: st4InputCordOutOfBalanceHysteresis.setDescription('The 3 phase out-of-balance hysteresis of the input cord in\n             percent.')
st4InputCordConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1718, 4, 1, 3, 2), )
if mibBuilder.loadTexts: st4InputCordConfigTable.setStatus('current')
if mibBuilder.loadTexts: st4InputCordConfigTable.setDescription('Input cord configuration table.')
st4InputCordConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1718, 4, 1, 3, 2, 1), ).setIndexNames((0, "Sentry4-MIB", "st4UnitIndex"), (0, "Sentry4-MIB", "st4InputCordIndex"))
if mibBuilder.loadTexts: st4InputCordConfigEntry.setStatus('current')
if mibBuilder.loadTexts: st4InputCordConfigEntry.setDescription('Configuration objects for a particular input cord.')
st4InputCordIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: st4InputCordIndex.setStatus('current')
if mibBuilder.loadTexts: st4InputCordIndex.setDescription('Input cord index.  A=1, B=2, C=3, D=4.')
st4InputCordID = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 3, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: st4InputCordID.setStatus('current')
if mibBuilder.loadTexts: st4InputCordID.setDescription('The internal ID of the input cord.  Format=AA.')
st4InputCordName = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 3, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: st4InputCordName.setStatus('current')
if mibBuilder.loadTexts: st4InputCordName.setDescription('The name of the input cord.')
st4InputCordInletType = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 3, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: st4InputCordInletType.setStatus('current')
if mibBuilder.loadTexts: st4InputCordInletType.setDescription('The type of plug on the input cord, or socket for the input cord.')
st4InputCordNominalVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6000))).setUnits('tenth Volts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: st4InputCordNominalVoltage.setStatus('current')
if mibBuilder.loadTexts: st4InputCordNominalVoltage.setDescription('The user-configured nominal voltage of the input cord in tenth\n             Volts.')
st4InputCordNominalVoltageMin = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setUnits('Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: st4InputCordNominalVoltageMin.setStatus('current')
if mibBuilder.loadTexts: st4InputCordNominalVoltageMin.setDescription('The factory-set minimum allowed for the user-configured nominal\n             voltage of the input cord in Volts.')
st4InputCordNominalVoltageMax = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 3, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setUnits('Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: st4InputCordNominalVoltageMax.setStatus('current')
if mibBuilder.loadTexts: st4InputCordNominalVoltageMax.setDescription('The factory-set maximum allowed for the user-configured nominal\n             voltage of the input cord in Volts.')
st4InputCordCurrentCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 3, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setUnits('Amps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: st4InputCordCurrentCapacity.setStatus('current')
if mibBuilder.loadTexts: st4InputCordCurrentCapacity.setDescription('The user-configured current capacity of the input cord in Amps.')
st4InputCordCurrentCapacityMax = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 3, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setUnits('Amps').setMaxAccess("readonly")
if mibBuilder.loadTexts: st4InputCordCurrentCapacityMax.setStatus('current')
if mibBuilder.loadTexts: st4InputCordCurrentCapacityMax.setDescription('The factory-set maximum allowed for the user-configured current\n             capacity of the input cord in Amps.')
st4InputCordPowerCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 3, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 50000))).setUnits('Volt-Amps').setMaxAccess("readonly")
if mibBuilder.loadTexts: st4InputCordPowerCapacity.setStatus('current')
if mibBuilder.loadTexts: st4InputCordPowerCapacity.setDescription('The power capacity of the input cord in Volt-Amps.  For DC\n             products, this is identical to power capacity in Watts.')
st4InputCordNominalPowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 3, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('hundredths').setMaxAccess("readwrite")
if mibBuilder.loadTexts: st4InputCordNominalPowerFactor.setStatus('current')
if mibBuilder.loadTexts: st4InputCordNominalPowerFactor.setDescription('The user-configured estimated nominal power factor of the input\n             cord in hundredths.')
st4InputCordLineCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 3, 2, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: st4InputCordLineCount.setStatus('current')
if mibBuilder.loadTexts: st4InputCordLineCount.setDescription('The number of current-carrying lines in the input cord.')
st4InputCordPhaseCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 3, 2, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: st4InputCordPhaseCount.setStatus('current')
if mibBuilder.loadTexts: st4InputCordPhaseCount.setDescription('The number of active phases from the lines in the input cord.')
st4InputCordOcpCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 3, 2, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: st4InputCordOcpCount.setStatus('current')
if mibBuilder.loadTexts: st4InputCordOcpCount.setDescription('The number of over-current protectors downstream from the input\n             cord.')
st4InputCordBranchCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 3, 2, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: st4InputCordBranchCount.setStatus('current')
if mibBuilder.loadTexts: st4InputCordBranchCount.setDescription('The number of branches downstream from the input cord.')
st4InputCordOutletCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 3, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: st4InputCordOutletCount.setStatus('current')
if mibBuilder.loadTexts: st4InputCordOutletCount.setDescription('The number of outlets powered from the input cord.')
st4InputCordMonitorTable = MibTable((1, 3, 6, 1, 4, 1, 1718, 4, 1, 3, 3), )
if mibBuilder.loadTexts: st4InputCordMonitorTable.setStatus('current')
if mibBuilder.loadTexts: st4InputCordMonitorTable.setDescription('Input cord monitor table.')
st4InputCordMonitorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1718, 4, 1, 3, 3, 1), ).setIndexNames((0, "Sentry4-MIB", "st4UnitIndex"), (0, "Sentry4-MIB", "st4InputCordIndex"))
if mibBuilder.loadTexts: st4InputCordMonitorEntry.setStatus('current')
if mibBuilder.loadTexts: st4InputCordMonitorEntry.setDescription('Objects to monitor for a particular input cord.')
st4InputCordState = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 3, 3, 1, 1), DeviceState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st4InputCordState.setStatus('current')
if mibBuilder.loadTexts: st4InputCordState.setDescription('The on/off state of the input cord.')
st4InputCordStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 3, 3, 1, 2), DeviceStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st4InputCordStatus.setStatus('current')
if mibBuilder.loadTexts: st4InputCordStatus.setDescription('The status of the input cord.')
st4InputCordActivePower = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 50000))).setUnits('Watts').setMaxAccess("readonly")
if mibBuilder.loadTexts: st4InputCordActivePower.setStatus('current')
if mibBuilder.loadTexts: st4InputCordActivePower.setDescription('The measured active power of the input cord in Watts.')
st4InputCordActivePowerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 3, 3, 1, 4), DeviceStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st4InputCordActivePowerStatus.setStatus('current')
if mibBuilder.loadTexts: st4InputCordActivePowerStatus.setDescription('The status of the measured active power of the input cord.')
st4InputCordApparentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 50000))).setUnits('Volt-Amps').setMaxAccess("readonly")
if mibBuilder.loadTexts: st4InputCordApparentPower.setStatus('current')
if mibBuilder.loadTexts: st4InputCordApparentPower.setDescription('The measured apparent power of the input cord in Volt-Amps.')
st4InputCordApparentPowerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 3, 3, 1, 6), DeviceStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st4InputCordApparentPowerStatus.setStatus('current')
if mibBuilder.loadTexts: st4InputCordApparentPowerStatus.setDescription('The status of the measured apparent power of the input cord.')
st4InputCordPowerUtilized = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 3, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 1200))).setUnits('tenth percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: st4InputCordPowerUtilized.setStatus('current')
if mibBuilder.loadTexts: st4InputCordPowerUtilized.setDescription('The amount of the input cord power capacity used in tenth percent.\n             For AC products, this is the ratio of the apparent power to the\n             power capacity.  For DC products, this is the ratio of the active\n             power to the power capacity.')
st4InputCordPowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 3, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setUnits('hundredths').setMaxAccess("readonly")
if mibBuilder.loadTexts: st4InputCordPowerFactor.setStatus('current')
if mibBuilder.loadTexts: st4InputCordPowerFactor.setDescription('The measured power factor of the input cord in hundredths.')
st4InputCordPowerFactorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 3, 3, 1, 9), DeviceStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st4InputCordPowerFactorStatus.setStatus('current')
if mibBuilder.loadTexts: st4InputCordPowerFactorStatus.setDescription('The status of the measured power factor of the input cord.')
st4InputCordEnergy = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 3, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setUnits('tenth Kilowatt-Hours').setMaxAccess("readonly")
if mibBuilder.loadTexts: st4InputCordEnergy.setStatus('current')
if mibBuilder.loadTexts: st4InputCordEnergy.setDescription('The total energy consumption of loads through the input cord in\n             tenth Kilowatt-Hours.')
st4InputCordFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 3, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 1000))).setUnits('tenth Hertz').setMaxAccess("readonly")
if mibBuilder.loadTexts: st4InputCordFrequency.setStatus('current')
if mibBuilder.loadTexts: st4InputCordFrequency.setDescription('The frequency of the input cord voltage in tenth Hertz.')
st4InputCordOutOfBalance = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 3, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2000))).setUnits('tenth percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: st4InputCordOutOfBalance.setStatus('current')
if mibBuilder.loadTexts: st4InputCordOutOfBalance.setDescription('The current imbalance on the lines of the input cord in tenth\n             percent.')
st4InputCordOutOfBalanceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 3, 3, 1, 13), DeviceStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st4InputCordOutOfBalanceStatus.setStatus('current')
if mibBuilder.loadTexts: st4InputCordOutOfBalanceStatus.setDescription('The status of the current imbalance on the lines of the input\n             cord.')
st4InputCordEventConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1718, 4, 1, 3, 4), )
if mibBuilder.loadTexts: st4InputCordEventConfigTable.setStatus('current')
if mibBuilder.loadTexts: st4InputCordEventConfigTable.setDescription('Input cord event configuration table.')
st4InputCordEventConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1718, 4, 1, 3, 4, 1), ).setIndexNames((0, "Sentry4-MIB", "st4UnitIndex"), (0, "Sentry4-MIB", "st4InputCordIndex"))
if mibBuilder.loadTexts: st4InputCordEventConfigEntry.setStatus('current')
if mibBuilder.loadTexts: st4InputCordEventConfigEntry.setDescription('Event configuration objects for a particular input cord.')
st4InputCordNotifications = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 3, 4, 1, 1), EventNotificationMethods()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: st4InputCordNotifications.setStatus('current')
if mibBuilder.loadTexts: st4InputCordNotifications.setDescription('The notification methods enabled for input cord events.')
st4InputCordActivePowerLowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 50000))).setUnits('Watts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: st4InputCordActivePowerLowAlarm.setStatus('current')
if mibBuilder.loadTexts: st4InputCordActivePowerLowAlarm.setDescription('The active power low alarm threshold of the input cord in Watts.')
st4InputCordActivePowerLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 50000))).setUnits('Watts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: st4InputCordActivePowerLowWarning.setStatus('current')
if mibBuilder.loadTexts: st4InputCordActivePowerLowWarning.setDescription('The active power low warning threshold of the input cord in\n             Watts.')
st4InputCordActivePowerHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 50000))).setUnits('Watts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: st4InputCordActivePowerHighWarning.setStatus('current')
if mibBuilder.loadTexts: st4InputCordActivePowerHighWarning.setDescription('The active power high warning threshold of the input cord in\n             Watts.')
st4InputCordActivePowerHighAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 3, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 50000))).setUnits('Watts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: st4InputCordActivePowerHighAlarm.setStatus('current')
if mibBuilder.loadTexts: st4InputCordActivePowerHighAlarm.setDescription('The active power high alarm threshold of the input cord in Watts.')
st4InputCordApparentPowerLowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 3, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 50000))).setUnits('Volt-Amps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: st4InputCordApparentPowerLowAlarm.setStatus('current')
if mibBuilder.loadTexts: st4InputCordApparentPowerLowAlarm.setDescription('The apparent power low alarm threshold of the input cord in\n             Volt-Amps.')
st4InputCordApparentPowerLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 3, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 50000))).setUnits('Volt-Amps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: st4InputCordApparentPowerLowWarning.setStatus('current')
if mibBuilder.loadTexts: st4InputCordApparentPowerLowWarning.setDescription('The apparent power low warning threshold of the input cord in\n             Volt-Amps.')
st4InputCordApparentPowerHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 3, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 50000))).setUnits('Volt-Amps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: st4InputCordApparentPowerHighWarning.setStatus('current')
if mibBuilder.loadTexts: st4InputCordApparentPowerHighWarning.setDescription('The apparent power high warning threshold of the input cord in\n             Volt-Amps.')
st4InputCordApparentPowerHighAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 3, 4, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 50000))).setUnits('Volt-Amps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: st4InputCordApparentPowerHighAlarm.setStatus('current')
if mibBuilder.loadTexts: st4InputCordApparentPowerHighAlarm.setDescription('The apparent power high alarm threshold of the input cord in\n             Volt-Amps.')
st4InputCordPowerFactorLowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 3, 4, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('hundredths').setMaxAccess("readwrite")
if mibBuilder.loadTexts: st4InputCordPowerFactorLowAlarm.setStatus('current')
if mibBuilder.loadTexts: st4InputCordPowerFactorLowAlarm.setDescription('The power factor low alarm threshold of the input cord in\n             hundredths.')
st4InputCordPowerFactorLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 3, 4, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('hundredths').setMaxAccess("readwrite")
if mibBuilder.loadTexts: st4InputCordPowerFactorLowWarning.setStatus('current')
if mibBuilder.loadTexts: st4InputCordPowerFactorLowWarning.setDescription('The power factor low warning threshold of the input cord in\n             hundredths.')
st4InputCordOutOfBalanceHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 3, 4, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: st4InputCordOutOfBalanceHighWarning.setStatus('current')
if mibBuilder.loadTexts: st4InputCordOutOfBalanceHighWarning.setDescription('The 3 phase out-of-balance high warning threshold of the input\n             cord in percent.')
st4InputCordOutOfBalanceHighAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 3, 4, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: st4InputCordOutOfBalanceHighAlarm.setStatus('current')
if mibBuilder.loadTexts: st4InputCordOutOfBalanceHighAlarm.setDescription('The 3 phase out-of-balance high alarm threshold of the input cord\n             in percent.')
st4Lines = MibIdentifier((1, 3, 6, 1, 4, 1, 1718, 4, 1, 4))
st4LineCommonConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 1718, 4, 1, 4, 1))
st4LineCurrentHysteresis = MibScalar((1, 3, 6, 1, 4, 1, 1718, 4, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('tenth Amps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: st4LineCurrentHysteresis.setStatus('current')
if mibBuilder.loadTexts: st4LineCurrentHysteresis.setDescription('The current hysteresis of the line in tenth Amps.')
st4LineConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1718, 4, 1, 4, 2), )
if mibBuilder.loadTexts: st4LineConfigTable.setStatus('current')
if mibBuilder.loadTexts: st4LineConfigTable.setDescription('Line configuration table.')
st4LineConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1718, 4, 1, 4, 2, 1), ).setIndexNames((0, "Sentry4-MIB", "st4UnitIndex"), (0, "Sentry4-MIB", "st4InputCordIndex"), (0, "Sentry4-MIB", "st4LineIndex"))
if mibBuilder.loadTexts: st4LineConfigEntry.setStatus('current')
if mibBuilder.loadTexts: st4LineConfigEntry.setDescription('Configuration objects for a particular line.')
st4LineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: st4LineIndex.setStatus('current')
if mibBuilder.loadTexts: st4LineIndex.setDescription('Line index.  L1=1, L2=2, L3=3, N=4.')
st4LineID = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 4, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: st4LineID.setStatus('current')
if mibBuilder.loadTexts: st4LineID.setDescription('The internal ID of the line.  Format=AAN.')
st4LineLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 4, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: st4LineLabel.setStatus('current')
if mibBuilder.loadTexts: st4LineLabel.setDescription('The system label assigned to the line for identification.')
st4LineCurrentCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setUnits('Amps').setMaxAccess("readonly")
if mibBuilder.loadTexts: st4LineCurrentCapacity.setStatus('current')
if mibBuilder.loadTexts: st4LineCurrentCapacity.setDescription('The current capacity of the line in Amps.')
st4LineMonitorTable = MibTable((1, 3, 6, 1, 4, 1, 1718, 4, 1, 4, 3), )
if mibBuilder.loadTexts: st4LineMonitorTable.setStatus('current')
if mibBuilder.loadTexts: st4LineMonitorTable.setDescription('Line monitor table.')
st4LineMonitorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1718, 4, 1, 4, 3, 1), ).setIndexNames((0, "Sentry4-MIB", "st4UnitIndex"), (0, "Sentry4-MIB", "st4InputCordIndex"), (0, "Sentry4-MIB", "st4LineIndex"))
if mibBuilder.loadTexts: st4LineMonitorEntry.setStatus('current')
if mibBuilder.loadTexts: st4LineMonitorEntry.setDescription('Objects to monitor for a particular line.')
st4LineState = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 4, 3, 1, 1), DeviceState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st4LineState.setStatus('current')
if mibBuilder.loadTexts: st4LineState.setDescription('The on/off state of the line.')
st4LineStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 4, 3, 1, 2), DeviceStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st4LineStatus.setStatus('current')
if mibBuilder.loadTexts: st4LineStatus.setDescription('The status of the line.')
st4LineCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 60000))).setUnits('hundredth Amps').setMaxAccess("readonly")
if mibBuilder.loadTexts: st4LineCurrent.setStatus('current')
if mibBuilder.loadTexts: st4LineCurrent.setDescription('The measured current on the line in hundredth Amps.')
st4LineCurrentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 4, 3, 1, 4), DeviceStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st4LineCurrentStatus.setStatus('current')
if mibBuilder.loadTexts: st4LineCurrentStatus.setDescription('The status of the measured current on the line.')
st4LineCurrentUtilized = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 4, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 1200))).setUnits('tenth percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: st4LineCurrentUtilized.setStatus('current')
if mibBuilder.loadTexts: st4LineCurrentUtilized.setDescription('The amount of the line current capacity used in tenth percent.')
st4LineEventConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1718, 4, 1, 4, 4), )
if mibBuilder.loadTexts: st4LineEventConfigTable.setStatus('current')
if mibBuilder.loadTexts: st4LineEventConfigTable.setDescription('Line event configuration table.')
st4LineEventConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1718, 4, 1, 4, 4, 1), ).setIndexNames((0, "Sentry4-MIB", "st4UnitIndex"), (0, "Sentry4-MIB", "st4InputCordIndex"), (0, "Sentry4-MIB", "st4LineIndex"))
if mibBuilder.loadTexts: st4LineEventConfigEntry.setStatus('current')
if mibBuilder.loadTexts: st4LineEventConfigEntry.setDescription('Event configuration objects for a particular line.')
st4LineNotifications = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 4, 4, 1, 1), EventNotificationMethods()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: st4LineNotifications.setStatus('current')
if mibBuilder.loadTexts: st4LineNotifications.setDescription('The notification methods enabled for line events.')
st4LineCurrentLowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 4, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6000))).setUnits('tenth Amps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: st4LineCurrentLowAlarm.setStatus('current')
if mibBuilder.loadTexts: st4LineCurrentLowAlarm.setDescription('The current low alarm threshold of the line in tenth Amps.')
st4LineCurrentLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 4, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6000))).setUnits('tenth Amps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: st4LineCurrentLowWarning.setStatus('current')
if mibBuilder.loadTexts: st4LineCurrentLowWarning.setDescription('The current low warning threshold of the line in tenth Amps.')
st4LineCurrentHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 4, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6000))).setUnits('tenth Amps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: st4LineCurrentHighWarning.setStatus('current')
if mibBuilder.loadTexts: st4LineCurrentHighWarning.setDescription('The current high warning threshold of the line in tenth Amps.')
st4LineCurrentHighAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 4, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6000))).setUnits('tenth Amps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: st4LineCurrentHighAlarm.setStatus('current')
if mibBuilder.loadTexts: st4LineCurrentHighAlarm.setDescription('The current high alarm threshold of the line in tenth Amps.')
st4Phases = MibIdentifier((1, 3, 6, 1, 4, 1, 1718, 4, 1, 5))
st4PhaseCommonConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 1718, 4, 1, 5, 1))
st4PhaseVoltageHysteresis = MibScalar((1, 3, 6, 1, 4, 1, 1718, 4, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setUnits('tenth Volts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: st4PhaseVoltageHysteresis.setStatus('current')
if mibBuilder.loadTexts: st4PhaseVoltageHysteresis.setDescription('The voltage hysteresis of the phase in tenth Volts.')
st4PhasePowerFactorHysteresis = MibScalar((1, 3, 6, 1, 4, 1, 1718, 4, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20))).setUnits('hundredths').setMaxAccess("readwrite")
if mibBuilder.loadTexts: st4PhasePowerFactorHysteresis.setStatus('current')
if mibBuilder.loadTexts: st4PhasePowerFactorHysteresis.setDescription('The power factor hysteresis of the phase in hundredths.')
st4PhaseConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1718, 4, 1, 5, 2), )
if mibBuilder.loadTexts: st4PhaseConfigTable.setStatus('current')
if mibBuilder.loadTexts: st4PhaseConfigTable.setDescription('Phase configuration table.')
st4PhaseConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1718, 4, 1, 5, 2, 1), ).setIndexNames((0, "Sentry4-MIB", "st4UnitIndex"), (0, "Sentry4-MIB", "st4InputCordIndex"), (0, "Sentry4-MIB", "st4PhaseIndex"))
if mibBuilder.loadTexts: st4PhaseConfigEntry.setStatus('current')
if mibBuilder.loadTexts: st4PhaseConfigEntry.setDescription('Configuration objects for a particular phase.')
st4PhaseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6)))
if mibBuilder.loadTexts: st4PhaseIndex.setStatus('current')
if mibBuilder.loadTexts: st4PhaseIndex.setDescription('Phase index.  Three-phase AC Wye: L1-N=1, L2-N=2, L3-N=3;\n             Three-phase AC Delta: L1-L2=1, L2-L3=2, L3-L1=3; Single Phase:\n             L1-R=1; DC: L1-R=1; Three-phase AC Wye & Delta: L1-N=1, L2-N=2,\n             L3-N=3, L1-L2=4, L2-L3=5; L3-L1=6.')
st4PhaseID = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 5, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: st4PhaseID.setStatus('current')
if mibBuilder.loadTexts: st4PhaseID.setDescription('The internal ID of the phase.  Format=AAN.')
st4PhaseLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 5, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: st4PhaseLabel.setStatus('current')
if mibBuilder.loadTexts: st4PhaseLabel.setDescription('The system label assigned to the phase for identification.')
st4PhaseNominalVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6000))).setUnits('tenth Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: st4PhaseNominalVoltage.setStatus('current')
if mibBuilder.loadTexts: st4PhaseNominalVoltage.setDescription('The nominal voltage of the phase in tenth Volts.')
st4PhaseBranchCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 5, 2, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: st4PhaseBranchCount.setStatus('current')
if mibBuilder.loadTexts: st4PhaseBranchCount.setDescription('The number of branches downstream from the phase.')
st4PhaseOutletCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 5, 2, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: st4PhaseOutletCount.setStatus('current')
if mibBuilder.loadTexts: st4PhaseOutletCount.setDescription('The number of outlets powered from the phase.')
st4PhaseMonitorTable = MibTable((1, 3, 6, 1, 4, 1, 1718, 4, 1, 5, 3), )
if mibBuilder.loadTexts: st4PhaseMonitorTable.setStatus('current')
if mibBuilder.loadTexts: st4PhaseMonitorTable.setDescription('Phase monitor table.')
st4PhaseMonitorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1718, 4, 1, 5, 3, 1), ).setIndexNames((0, "Sentry4-MIB", "st4UnitIndex"), (0, "Sentry4-MIB", "st4InputCordIndex"), (0, "Sentry4-MIB", "st4PhaseIndex"))
if mibBuilder.loadTexts: st4PhaseMonitorEntry.setStatus('current')
if mibBuilder.loadTexts: st4PhaseMonitorEntry.setDescription('Objects to monitor for a particular phase.')
st4PhaseState = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 5, 3, 1, 1), DeviceState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st4PhaseState.setStatus('current')
if mibBuilder.loadTexts: st4PhaseState.setDescription('The on/off state of the phase.')
st4PhaseStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 5, 3, 1, 2), DeviceStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st4PhaseStatus.setStatus('current')
if mibBuilder.loadTexts: st4PhaseStatus.setDescription('The status of the phase.')
st4PhaseVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 5, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 6000))).setUnits('tenth Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: st4PhaseVoltage.setStatus('current')
if mibBuilder.loadTexts: st4PhaseVoltage.setDescription('The measured voltage on the phase in tenth Volts.')
st4PhaseVoltageStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 5, 3, 1, 4), DeviceStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st4PhaseVoltageStatus.setStatus('current')
if mibBuilder.loadTexts: st4PhaseVoltageStatus.setDescription('The status of the measured voltage on the phase.')
st4PhaseVoltageDeviation = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 5, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1000, 1000))).setUnits('tenth percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: st4PhaseVoltageDeviation.setStatus('current')
if mibBuilder.loadTexts: st4PhaseVoltageDeviation.setDescription('The deviation from the nominal voltage on the phase in tenth\n             percent.')
st4PhaseCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 5, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 30000))).setUnits('hundredth Amps').setMaxAccess("readonly")
if mibBuilder.loadTexts: st4PhaseCurrent.setStatus('current')
if mibBuilder.loadTexts: st4PhaseCurrent.setDescription('The measured current on the phase in hundredth Amps.')
st4PhaseCurrentCrestFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 5, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 250))).setUnits('tenths').setMaxAccess("readonly")
if mibBuilder.loadTexts: st4PhaseCurrentCrestFactor.setStatus('current')
if mibBuilder.loadTexts: st4PhaseCurrentCrestFactor.setDescription('The measured crest factor of the current waveform on the phase in\n             tenths.')
st4PhaseActivePower = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 5, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 25000))).setUnits('Watts').setMaxAccess("readonly")
if mibBuilder.loadTexts: st4PhaseActivePower.setStatus('current')
if mibBuilder.loadTexts: st4PhaseActivePower.setDescription('The measured active power on the phase in Watts.')
st4PhaseApparentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 5, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 25000))).setUnits('Volt-Amps').setMaxAccess("readonly")
if mibBuilder.loadTexts: st4PhaseApparentPower.setStatus('current')
if mibBuilder.loadTexts: st4PhaseApparentPower.setDescription('The measured apparent power on the phase in Volt-Amps.')
st4PhasePowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 5, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setUnits('hundredths').setMaxAccess("readonly")
if mibBuilder.loadTexts: st4PhasePowerFactor.setStatus('current')
if mibBuilder.loadTexts: st4PhasePowerFactor.setDescription('The measured power factor on the phase in hundredths.')
st4PhasePowerFactorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 5, 3, 1, 11), DeviceStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st4PhasePowerFactorStatus.setStatus('current')
if mibBuilder.loadTexts: st4PhasePowerFactorStatus.setDescription('The status of the measured power factor on the phase.')
st4PhaseReactance = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 5, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("capacitive", 1), ("inductive", 2), ("resistive", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: st4PhaseReactance.setStatus('current')
if mibBuilder.loadTexts: st4PhaseReactance.setDescription('The status of the measured reactance of the phase.')
st4PhaseEnergy = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 5, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setUnits('tenth Kilowatt-Hours').setMaxAccess("readonly")
if mibBuilder.loadTexts: st4PhaseEnergy.setStatus('current')
if mibBuilder.loadTexts: st4PhaseEnergy.setDescription('The total energy consumption of loads through the phase in tenth\n             Kilowatt-Hours.')
st4PhaseEventConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1718, 4, 1, 5, 4), )
if mibBuilder.loadTexts: st4PhaseEventConfigTable.setStatus('current')
if mibBuilder.loadTexts: st4PhaseEventConfigTable.setDescription('Phase event configuration table.')
st4PhaseEventConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1718, 4, 1, 5, 4, 1), ).setIndexNames((0, "Sentry4-MIB", "st4UnitIndex"), (0, "Sentry4-MIB", "st4InputCordIndex"), (0, "Sentry4-MIB", "st4PhaseIndex"))
if mibBuilder.loadTexts: st4PhaseEventConfigEntry.setStatus('current')
if mibBuilder.loadTexts: st4PhaseEventConfigEntry.setDescription('Event configuration objects for a particular phase.')
st4PhaseNotifications = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 5, 4, 1, 1), EventNotificationMethods()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: st4PhaseNotifications.setStatus('current')
if mibBuilder.loadTexts: st4PhaseNotifications.setDescription('The notification methods enabled for phase events.')
st4PhaseVoltageLowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 5, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6000))).setUnits('tenth Volts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: st4PhaseVoltageLowAlarm.setStatus('current')
if mibBuilder.loadTexts: st4PhaseVoltageLowAlarm.setDescription('The current low alarm threshold of the phase in tenth Volts.')
st4PhaseVoltageLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 5, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6000))).setUnits('tenth Volts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: st4PhaseVoltageLowWarning.setStatus('current')
if mibBuilder.loadTexts: st4PhaseVoltageLowWarning.setDescription('The current low warning threshold of the phase in tenth Volts.')
st4PhaseVoltageHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 5, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6000))).setUnits('tenth Volts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: st4PhaseVoltageHighWarning.setStatus('current')
if mibBuilder.loadTexts: st4PhaseVoltageHighWarning.setDescription('The current high warning threshold of the phase in tenth Volts.')
st4PhaseVoltageHighAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 5, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6000))).setUnits('tenth Volts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: st4PhaseVoltageHighAlarm.setStatus('current')
if mibBuilder.loadTexts: st4PhaseVoltageHighAlarm.setDescription('The current high alarm threshold of the phase in tenth Volts.')
st4PhasePowerFactorLowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 5, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('hundredths').setMaxAccess("readwrite")
if mibBuilder.loadTexts: st4PhasePowerFactorLowAlarm.setStatus('current')
if mibBuilder.loadTexts: st4PhasePowerFactorLowAlarm.setDescription('The low power factor alarm threshold of the phase in hundredths.')
st4PhasePowerFactorLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 5, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('hundredths').setMaxAccess("readwrite")
if mibBuilder.loadTexts: st4PhasePowerFactorLowWarning.setStatus('current')
if mibBuilder.loadTexts: st4PhasePowerFactorLowWarning.setDescription('The low power factor warning threshold of the phase in\n             hundredths.')
st4OverCurrentProtectors = MibIdentifier((1, 3, 6, 1, 4, 1, 1718, 4, 1, 6))
st4OcpCommonConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 1718, 4, 1, 6, 1))
st4OcpConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1718, 4, 1, 6, 2), )
if mibBuilder.loadTexts: st4OcpConfigTable.setStatus('current')
if mibBuilder.loadTexts: st4OcpConfigTable.setDescription('Over-current protector configuration table.')
st4OcpConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1718, 4, 1, 6, 2, 1), ).setIndexNames((0, "Sentry4-MIB", "st4UnitIndex"), (0, "Sentry4-MIB", "st4InputCordIndex"), (0, "Sentry4-MIB", "st4OcpIndex"))
if mibBuilder.loadTexts: st4OcpConfigEntry.setStatus('current')
if mibBuilder.loadTexts: st4OcpConfigEntry.setDescription('Configuration objects for a particular over-current protector.')
st4OcpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)))
if mibBuilder.loadTexts: st4OcpIndex.setStatus('current')
if mibBuilder.loadTexts: st4OcpIndex.setDescription('Over-current protector index.')
st4OcpID = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 6, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: st4OcpID.setStatus('current')
if mibBuilder.loadTexts: st4OcpID.setDescription('The internal ID of the over-current protector.  Format=AAN[N].')
st4OcpLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 6, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: st4OcpLabel.setStatus('current')
if mibBuilder.loadTexts: st4OcpLabel.setDescription('The system label assigned to the over-current protector for\n             identification.')
st4OcpType = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 6, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("fuse", 0), ("breaker", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: st4OcpType.setStatus('current')
if mibBuilder.loadTexts: st4OcpType.setDescription('The type of over-current protector.')
st4OcpCurrentCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 6, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 125))).setUnits('Amps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: st4OcpCurrentCapacity.setStatus('current')
if mibBuilder.loadTexts: st4OcpCurrentCapacity.setDescription('The user-configured current capacity of the over-current protector\n             in Amps.')
st4OcpCurrentCapacityMax = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 6, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 125))).setUnits('Amps').setMaxAccess("readonly")
if mibBuilder.loadTexts: st4OcpCurrentCapacityMax.setStatus('current')
if mibBuilder.loadTexts: st4OcpCurrentCapacityMax.setDescription('The factory-set maximum allowed for the user-configured current\n             capacity of the over-current protector in Amps.')
st4OcpBranchCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 6, 2, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: st4OcpBranchCount.setStatus('current')
if mibBuilder.loadTexts: st4OcpBranchCount.setDescription('The number of branches downstream from the over-current\n             protector.')
st4OcpOutletCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 6, 2, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: st4OcpOutletCount.setStatus('current')
if mibBuilder.loadTexts: st4OcpOutletCount.setDescription('The number of outlets powered from the over-current protector.')
st4OcpMonitorTable = MibTable((1, 3, 6, 1, 4, 1, 1718, 4, 1, 6, 3), )
if mibBuilder.loadTexts: st4OcpMonitorTable.setStatus('current')
if mibBuilder.loadTexts: st4OcpMonitorTable.setDescription('Over-current protector monitor table.')
st4OcpMonitorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1718, 4, 1, 6, 3, 1), ).setIndexNames((0, "Sentry4-MIB", "st4UnitIndex"), (0, "Sentry4-MIB", "st4InputCordIndex"), (0, "Sentry4-MIB", "st4OcpIndex"))
if mibBuilder.loadTexts: st4OcpMonitorEntry.setStatus('current')
if mibBuilder.loadTexts: st4OcpMonitorEntry.setDescription('Objects to monitor for a particular over-current protector.')
st4OcpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 6, 3, 1, 1), DeviceStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st4OcpStatus.setStatus('current')
if mibBuilder.loadTexts: st4OcpStatus.setDescription('The status of the over-current protector.')
st4OcpEventConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1718, 4, 1, 6, 4), )
if mibBuilder.loadTexts: st4OcpEventConfigTable.setStatus('current')
if mibBuilder.loadTexts: st4OcpEventConfigTable.setDescription('Over-current protector event configuration table.')
st4OcpEventConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1718, 4, 1, 6, 4, 1), ).setIndexNames((0, "Sentry4-MIB", "st4UnitIndex"), (0, "Sentry4-MIB", "st4InputCordIndex"), (0, "Sentry4-MIB", "st4OcpIndex"))
if mibBuilder.loadTexts: st4OcpEventConfigEntry.setStatus('current')
if mibBuilder.loadTexts: st4OcpEventConfigEntry.setDescription('Event configuration objects for a particular over-current\n             protector.')
st4OcpNotifications = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 6, 4, 1, 1), EventNotificationMethods()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: st4OcpNotifications.setStatus('current')
if mibBuilder.loadTexts: st4OcpNotifications.setDescription('The notification methods enabled for over-current protector\n             events.')
st4Branches = MibIdentifier((1, 3, 6, 1, 4, 1, 1718, 4, 1, 7))
st4BranchCommonConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 1718, 4, 1, 7, 1))
st4BranchCurrentHysteresis = MibScalar((1, 3, 6, 1, 4, 1, 1718, 4, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('tenth Amps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: st4BranchCurrentHysteresis.setStatus('current')
if mibBuilder.loadTexts: st4BranchCurrentHysteresis.setDescription('The current hysteresis of the branch in tenth Amps.')
st4BranchConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1718, 4, 1, 7, 2), )
if mibBuilder.loadTexts: st4BranchConfigTable.setStatus('current')
if mibBuilder.loadTexts: st4BranchConfigTable.setDescription('Branch configuration table.')
st4BranchConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1718, 4, 1, 7, 2, 1), ).setIndexNames((0, "Sentry4-MIB", "st4UnitIndex"), (0, "Sentry4-MIB", "st4InputCordIndex"), (0, "Sentry4-MIB", "st4BranchIndex"))
if mibBuilder.loadTexts: st4BranchConfigEntry.setStatus('current')
if mibBuilder.loadTexts: st4BranchConfigEntry.setDescription('Configuration objects for a particular branch.')
st4BranchIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)))
if mibBuilder.loadTexts: st4BranchIndex.setStatus('current')
if mibBuilder.loadTexts: st4BranchIndex.setDescription('Branch index.')
st4BranchID = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 7, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: st4BranchID.setStatus('current')
if mibBuilder.loadTexts: st4BranchID.setDescription('The internal ID of the branch.  Format=AAN[N].')
st4BranchLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 7, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: st4BranchLabel.setStatus('current')
if mibBuilder.loadTexts: st4BranchLabel.setDescription('The system label assigned to the branch for identification.')
st4BranchCurrentCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 7, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 125))).setUnits('Amps').setMaxAccess("readonly")
if mibBuilder.loadTexts: st4BranchCurrentCapacity.setStatus('current')
if mibBuilder.loadTexts: st4BranchCurrentCapacity.setDescription('The current capacity of the branch in Amps.')
st4BranchPhaseID = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 7, 2, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: st4BranchPhaseID.setStatus('current')
if mibBuilder.loadTexts: st4BranchPhaseID.setDescription('The internal ID of the phase powering this branch.\n             Format=AAN.')
st4BranchOcpID = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 7, 2, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: st4BranchOcpID.setStatus('current')
if mibBuilder.loadTexts: st4BranchOcpID.setDescription('The internal ID of the over-current protector powering this\n             outlet.  Format=AAN[N].')
st4BranchOutletCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 7, 2, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: st4BranchOutletCount.setStatus('current')
if mibBuilder.loadTexts: st4BranchOutletCount.setDescription('The number of outlets powered from the branch.')
st4BranchMonitorTable = MibTable((1, 3, 6, 1, 4, 1, 1718, 4, 1, 7, 3), )
if mibBuilder.loadTexts: st4BranchMonitorTable.setStatus('current')
if mibBuilder.loadTexts: st4BranchMonitorTable.setDescription('Branch monitor table.')
st4BranchMonitorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1718, 4, 1, 7, 3, 1), ).setIndexNames((0, "Sentry4-MIB", "st4UnitIndex"), (0, "Sentry4-MIB", "st4InputCordIndex"), (0, "Sentry4-MIB", "st4BranchIndex"))
if mibBuilder.loadTexts: st4BranchMonitorEntry.setStatus('current')
if mibBuilder.loadTexts: st4BranchMonitorEntry.setDescription('Objects to monitor for a particular branch.')
st4BranchState = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 7, 3, 1, 1), DeviceState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st4BranchState.setStatus('current')
if mibBuilder.loadTexts: st4BranchState.setDescription('The on/off state of the branch.')
st4BranchStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 7, 3, 1, 2), DeviceStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st4BranchStatus.setStatus('current')
if mibBuilder.loadTexts: st4BranchStatus.setDescription('The status of the branch.')
st4BranchCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 7, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 12500))).setUnits('hundredth Amps').setMaxAccess("readonly")
if mibBuilder.loadTexts: st4BranchCurrent.setStatus('current')
if mibBuilder.loadTexts: st4BranchCurrent.setDescription('The measured current on the branch in hundredth Amps.')
st4BranchCurrentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 7, 3, 1, 4), DeviceStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st4BranchCurrentStatus.setStatus('current')
if mibBuilder.loadTexts: st4BranchCurrentStatus.setDescription('The status of the measured current on the branch.')
st4BranchCurrentUtilized = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 7, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 1200))).setUnits('tenth percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: st4BranchCurrentUtilized.setStatus('current')
if mibBuilder.loadTexts: st4BranchCurrentUtilized.setDescription('The amount of the branch current capacity used in tenth percent.')
st4BranchEventConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1718, 4, 1, 7, 4), )
if mibBuilder.loadTexts: st4BranchEventConfigTable.setStatus('current')
if mibBuilder.loadTexts: st4BranchEventConfigTable.setDescription('Branch event configuration table.')
st4BranchEventConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1718, 4, 1, 7, 4, 1), ).setIndexNames((0, "Sentry4-MIB", "st4UnitIndex"), (0, "Sentry4-MIB", "st4InputCordIndex"), (0, "Sentry4-MIB", "st4BranchIndex"))
if mibBuilder.loadTexts: st4BranchEventConfigEntry.setStatus('current')
if mibBuilder.loadTexts: st4BranchEventConfigEntry.setDescription('Event configuration objects for a particular branch.')
st4BranchNotifications = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 7, 4, 1, 1), EventNotificationMethods()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: st4BranchNotifications.setStatus('current')
if mibBuilder.loadTexts: st4BranchNotifications.setDescription('The notification methods enabled for branch events.')
st4BranchCurrentLowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 7, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1250))).setUnits('tenth Amps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: st4BranchCurrentLowAlarm.setStatus('current')
if mibBuilder.loadTexts: st4BranchCurrentLowAlarm.setDescription('The current low alarm threshold of the branch in tenth Amps.')
st4BranchCurrentLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 7, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1250))).setUnits('tenth Amps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: st4BranchCurrentLowWarning.setStatus('current')
if mibBuilder.loadTexts: st4BranchCurrentLowWarning.setDescription('The current low warning threshold of the branch in tenth Amps.')
st4BranchCurrentHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 7, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1250))).setUnits('tenth Amps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: st4BranchCurrentHighWarning.setStatus('current')
if mibBuilder.loadTexts: st4BranchCurrentHighWarning.setDescription('The current high warning threshold of the branch in tenth Amps.')
st4BranchCurrentHighAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 7, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1250))).setUnits('tenth Amps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: st4BranchCurrentHighAlarm.setStatus('current')
if mibBuilder.loadTexts: st4BranchCurrentHighAlarm.setDescription('The current high alarm threshold of the branch in tenth Amps.')
st4Outlets = MibIdentifier((1, 3, 6, 1, 4, 1, 1718, 4, 1, 8))
st4OutletCommonConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 1718, 4, 1, 8, 1))
st4OutletCurrentHysteresis = MibScalar((1, 3, 6, 1, 4, 1, 1718, 4, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('tenth Amps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: st4OutletCurrentHysteresis.setStatus('current')
if mibBuilder.loadTexts: st4OutletCurrentHysteresis.setDescription('The current hysteresis of the outlet in tenth Amps.')
st4OutletActivePowerHysteresis = MibScalar((1, 3, 6, 1, 4, 1, 1718, 4, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setUnits('Watts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: st4OutletActivePowerHysteresis.setStatus('current')
if mibBuilder.loadTexts: st4OutletActivePowerHysteresis.setDescription('The power hysteresis of the outlet in Watts.')
st4OutletPowerFactorHysteresis = MibScalar((1, 3, 6, 1, 4, 1, 1718, 4, 1, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20))).setUnits('hundredths').setMaxAccess("readwrite")
if mibBuilder.loadTexts: st4OutletPowerFactorHysteresis.setStatus('current')
if mibBuilder.loadTexts: st4OutletPowerFactorHysteresis.setDescription('The power factor hysteresis of the outlet in hundredths.')
st4OutletSequenceInterval = MibScalar((1, 3, 6, 1, 4, 1, 1718, 4, 1, 8, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: st4OutletSequenceInterval.setStatus('current')
if mibBuilder.loadTexts: st4OutletSequenceInterval.setDescription('The power-on sequencing interval for all outlets in seconds.')
st4OutletRebootDelay = MibScalar((1, 3, 6, 1, 4, 1, 1718, 4, 1, 8, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 600))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: st4OutletRebootDelay.setStatus('current')
if mibBuilder.loadTexts: st4OutletRebootDelay.setDescription('The reboot delay for all outlets in seconds.')
st4OutletStateChangeLogging = MibScalar((1, 3, 6, 1, 4, 1, 1718, 4, 1, 8, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: st4OutletStateChangeLogging.setStatus('current')
if mibBuilder.loadTexts: st4OutletStateChangeLogging.setDescription('Enables or disables informational Outlet State Change event\n             logging.')
st4OutletConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1718, 4, 1, 8, 2), )
if mibBuilder.loadTexts: st4OutletConfigTable.setStatus('current')
if mibBuilder.loadTexts: st4OutletConfigTable.setDescription('Outlet configuration table.')
st4OutletConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1718, 4, 1, 8, 2, 1), ).setIndexNames((0, "Sentry4-MIB", "st4UnitIndex"), (0, "Sentry4-MIB", "st4InputCordIndex"), (0, "Sentry4-MIB", "st4OutletIndex"))
if mibBuilder.loadTexts: st4OutletConfigEntry.setStatus('current')
if mibBuilder.loadTexts: st4OutletConfigEntry.setDescription('Configuration objects for a particular outlet.')
st4OutletIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 8, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128)))
if mibBuilder.loadTexts: st4OutletIndex.setStatus('current')
if mibBuilder.loadTexts: st4OutletIndex.setDescription('Outlet index.')
st4OutletID = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 8, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: st4OutletID.setStatus('current')
if mibBuilder.loadTexts: st4OutletID.setDescription('The internal ID of the outlet.  Format=AAN[N[N]].')
st4OutletName = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 8, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: st4OutletName.setStatus('current')
if mibBuilder.loadTexts: st4OutletName.setDescription('The name of the outlet.')
st4OutletCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 8, 2, 1, 5), Bits().clone(namedValues=NamedValues(("switched", 0), ("pops", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: st4OutletCapabilities.setStatus('current')
if mibBuilder.loadTexts: st4OutletCapabilities.setDescription('The capabilities of the outlet.')
st4OutletSocketType = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 8, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: st4OutletSocketType.setStatus('current')
if mibBuilder.loadTexts: st4OutletSocketType.setDescription('The socket type of the outlet.')
st4OutletCurrentCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 8, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 125))).setUnits('Amps').setMaxAccess("readonly")
if mibBuilder.loadTexts: st4OutletCurrentCapacity.setStatus('current')
if mibBuilder.loadTexts: st4OutletCurrentCapacity.setDescription('The current capacity of the outlet in Amps.')
st4OutletPowerCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 8, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setUnits('Volt-Amps').setMaxAccess("readonly")
if mibBuilder.loadTexts: st4OutletPowerCapacity.setStatus('current')
if mibBuilder.loadTexts: st4OutletPowerCapacity.setDescription('The power capacity of the outlet in Volt-Amps.  For DC products,\n             this is identical to power capacity in Watts.')
st4OutletWakeupState = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 8, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("on", 0), ("off", 1), ("last", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: st4OutletWakeupState.setStatus('current')
if mibBuilder.loadTexts: st4OutletWakeupState.setDescription('The wakeup state of the outlet.')
st4OutletPostOnDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 8, 2, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 900))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: st4OutletPostOnDelay.setStatus('current')
if mibBuilder.loadTexts: st4OutletPostOnDelay.setDescription('The post-on delay of the outlet in seconds.')
st4OutletPhaseID = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 8, 2, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: st4OutletPhaseID.setStatus('current')
if mibBuilder.loadTexts: st4OutletPhaseID.setDescription('The internal ID of the phase powering this outlet.\n             Format=AAN.')
st4OutletOcpID = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 8, 2, 1, 31), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: st4OutletOcpID.setStatus('current')
if mibBuilder.loadTexts: st4OutletOcpID.setDescription('The internal ID of the over-current protector powering this\n             outlet.  Format=AAN[N].')
st4OutletBranchID = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 8, 2, 1, 32), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: st4OutletBranchID.setStatus('current')
if mibBuilder.loadTexts: st4OutletBranchID.setDescription('The internal ID of the branch powering this outlet.\n             Format=AAN[N].')
st4OutletMonitorTable = MibTable((1, 3, 6, 1, 4, 1, 1718, 4, 1, 8, 3), )
if mibBuilder.loadTexts: st4OutletMonitorTable.setStatus('current')
if mibBuilder.loadTexts: st4OutletMonitorTable.setDescription('Outlet monitor table.')
st4OutletMonitorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1718, 4, 1, 8, 3, 1), ).setIndexNames((0, "Sentry4-MIB", "st4UnitIndex"), (0, "Sentry4-MIB", "st4InputCordIndex"), (0, "Sentry4-MIB", "st4OutletIndex"))
if mibBuilder.loadTexts: st4OutletMonitorEntry.setStatus('current')
if mibBuilder.loadTexts: st4OutletMonitorEntry.setDescription('Objects to monitor for a particular outlet.')
st4OutletState = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 8, 3, 1, 1), DeviceState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st4OutletState.setStatus('current')
if mibBuilder.loadTexts: st4OutletState.setDescription('The on/off state of the outlet.')
st4OutletStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 8, 3, 1, 2), DeviceStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st4OutletStatus.setStatus('current')
if mibBuilder.loadTexts: st4OutletStatus.setDescription('The status of the outlet.')
st4OutletCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 8, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 12500))).setUnits('hundredth Amps').setMaxAccess("readonly")
if mibBuilder.loadTexts: st4OutletCurrent.setStatus('current')
if mibBuilder.loadTexts: st4OutletCurrent.setDescription('The measured current on the outlet in hundredth Amps.')
st4OutletCurrentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 8, 3, 1, 4), DeviceStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st4OutletCurrentStatus.setStatus('current')
if mibBuilder.loadTexts: st4OutletCurrentStatus.setDescription('The status of the measured current on the outlet.')
st4OutletCurrentUtilized = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 8, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 1200))).setUnits('tenth percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: st4OutletCurrentUtilized.setStatus('current')
if mibBuilder.loadTexts: st4OutletCurrentUtilized.setDescription('The amount of the outlet current capacity used in tenth percent.')
st4OutletVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 8, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 6000))).setUnits('tenth Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: st4OutletVoltage.setStatus('current')
if mibBuilder.loadTexts: st4OutletVoltage.setDescription('The measured voltage of the outlet in tenth Volts.')
st4OutletActivePower = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 8, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 10000))).setUnits('Watts').setMaxAccess("readonly")
if mibBuilder.loadTexts: st4OutletActivePower.setStatus('current')
if mibBuilder.loadTexts: st4OutletActivePower.setDescription('The measured active power of the outlet in Watts.')
st4OutletActivePowerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 8, 3, 1, 8), DeviceStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st4OutletActivePowerStatus.setStatus('current')
if mibBuilder.loadTexts: st4OutletActivePowerStatus.setDescription('The status of the measured active power of the outlet.')
st4OutletApparentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 8, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 10000))).setUnits('Volt-Amps').setMaxAccess("readonly")
if mibBuilder.loadTexts: st4OutletApparentPower.setStatus('current')
if mibBuilder.loadTexts: st4OutletApparentPower.setDescription('The measured apparent power of the outlet in Volt-Amps.')
st4OutletPowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 8, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setUnits('hundredths').setMaxAccess("readonly")
if mibBuilder.loadTexts: st4OutletPowerFactor.setStatus('current')
if mibBuilder.loadTexts: st4OutletPowerFactor.setDescription('The measured power factor of the outlet in hundredths.')
st4OutletPowerFactorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 8, 3, 1, 11), DeviceStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st4OutletPowerFactorStatus.setStatus('current')
if mibBuilder.loadTexts: st4OutletPowerFactorStatus.setDescription('The status of the measured power factor of the outlet.')
st4OutletCurrentCrestFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 8, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 250))).setUnits('tenths').setMaxAccess("readonly")
if mibBuilder.loadTexts: st4OutletCurrentCrestFactor.setStatus('current')
if mibBuilder.loadTexts: st4OutletCurrentCrestFactor.setDescription('The measured crest factor of the outlet in tenths.')
st4OutletReactance = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 8, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("capacitive", 1), ("inductive", 2), ("resistive", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: st4OutletReactance.setStatus('current')
if mibBuilder.loadTexts: st4OutletReactance.setDescription('The status of the measured reactance of the outlet.')
st4OutletEnergy = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 8, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setUnits('Watt-Hours').setMaxAccess("readonly")
if mibBuilder.loadTexts: st4OutletEnergy.setStatus('current')
if mibBuilder.loadTexts: st4OutletEnergy.setDescription('The total energy consumption of the device plugged into the outlet\n             in Watt-Hours.')
st4OutletEventConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1718, 4, 1, 8, 4), )
if mibBuilder.loadTexts: st4OutletEventConfigTable.setStatus('current')
if mibBuilder.loadTexts: st4OutletEventConfigTable.setDescription('Outlet event configuration table.')
st4OutletEventConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1718, 4, 1, 8, 4, 1), ).setIndexNames((0, "Sentry4-MIB", "st4UnitIndex"), (0, "Sentry4-MIB", "st4InputCordIndex"), (0, "Sentry4-MIB", "st4OutletIndex"))
if mibBuilder.loadTexts: st4OutletEventConfigEntry.setStatus('current')
if mibBuilder.loadTexts: st4OutletEventConfigEntry.setDescription('Event configuration objects for a particular outlet.')
st4OutletNotifications = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 8, 4, 1, 1), EventNotificationMethods()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: st4OutletNotifications.setStatus('current')
if mibBuilder.loadTexts: st4OutletNotifications.setDescription('The notification methods enabled for outlet events.')
st4OutletCurrentLowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 8, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1250))).setUnits('tenth Amps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: st4OutletCurrentLowAlarm.setStatus('current')
if mibBuilder.loadTexts: st4OutletCurrentLowAlarm.setDescription('The current low alarm threshold of the outlet in tenth Amps.')
st4OutletCurrentLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 8, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1250))).setUnits('tenth Amps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: st4OutletCurrentLowWarning.setStatus('current')
if mibBuilder.loadTexts: st4OutletCurrentLowWarning.setDescription('The current low warning threshold of the outlet in tenth Amps.')
st4OutletCurrentHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 8, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1250))).setUnits('tenth Amps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: st4OutletCurrentHighWarning.setStatus('current')
if mibBuilder.loadTexts: st4OutletCurrentHighWarning.setDescription('The current high warning threshold of the outlet in tenth Amps.')
st4OutletCurrentHighAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 8, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1250))).setUnits('tenth Amps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: st4OutletCurrentHighAlarm.setStatus('current')
if mibBuilder.loadTexts: st4OutletCurrentHighAlarm.setDescription('The current high alarm threshold of the outlet in tenth Amps.')
st4OutletActivePowerLowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 8, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setUnits('Watts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: st4OutletActivePowerLowAlarm.setStatus('current')
if mibBuilder.loadTexts: st4OutletActivePowerLowAlarm.setDescription('The active power low alarm threshold of the outlet in Watts.')
st4OutletActivePowerLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 8, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setUnits('Watts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: st4OutletActivePowerLowWarning.setStatus('current')
if mibBuilder.loadTexts: st4OutletActivePowerLowWarning.setDescription('The active power low warning threshold of the outlet in Watts.')
st4OutletActivePowerHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 8, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setUnits('Watts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: st4OutletActivePowerHighWarning.setStatus('current')
if mibBuilder.loadTexts: st4OutletActivePowerHighWarning.setDescription('The active power high warning threshold of the outlet in Watts.')
st4OutletActivePowerHighAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 8, 4, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setUnits('Watts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: st4OutletActivePowerHighAlarm.setStatus('current')
if mibBuilder.loadTexts: st4OutletActivePowerHighAlarm.setDescription('The active power high alarm threshold of the outlet in Watts.')
st4OutletPowerFactorLowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 8, 4, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('hundredths').setMaxAccess("readwrite")
if mibBuilder.loadTexts: st4OutletPowerFactorLowAlarm.setStatus('current')
if mibBuilder.loadTexts: st4OutletPowerFactorLowAlarm.setDescription('The low power factor alarm threshold of the outlet in hundredths.')
st4OutletPowerFactorLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 8, 4, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('hundredths').setMaxAccess("readwrite")
if mibBuilder.loadTexts: st4OutletPowerFactorLowWarning.setStatus('current')
if mibBuilder.loadTexts: st4OutletPowerFactorLowWarning.setDescription('The low power factor warning threshold of the outlet in\n             hundredths.')
st4OutletControlTable = MibTable((1, 3, 6, 1, 4, 1, 1718, 4, 1, 8, 5), )
if mibBuilder.loadTexts: st4OutletControlTable.setStatus('current')
if mibBuilder.loadTexts: st4OutletControlTable.setDescription('Outlet control table.')
st4OutletControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1718, 4, 1, 8, 5, 1), ).setIndexNames((0, "Sentry4-MIB", "st4UnitIndex"), (0, "Sentry4-MIB", "st4InputCordIndex"), (0, "Sentry4-MIB", "st4OutletIndex"))
if mibBuilder.loadTexts: st4OutletControlEntry.setStatus('current')
if mibBuilder.loadTexts: st4OutletControlEntry.setDescription('Objects for control of a particular outlet.')
st4OutletControlState = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 8, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("notSet", 0), ("fixedOn", 1), ("idleOff", 2), ("idleOn", 3), ("wakeOff", 4), ("wakeOn", 5), ("ocpOff", 6), ("ocpOn", 7), ("pendOn", 8), ("pendOff", 9), ("off", 10), ("on", 11), ("reboot", 12), ("shutdown", 13), ("lockedOff", 14), ("lockedOn", 15), ("eventOff", 16), ("eventOn", 17), ("eventReboot", 18), ("eventShutdown", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: st4OutletControlState.setStatus('current')
if mibBuilder.loadTexts: st4OutletControlState.setDescription('The control state of the outlet.')
st4OutletControlAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 8, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 0), ("on", 1), ("off", 2), ("reboot", 3), ("queueOn", 4), ("queueOff", 5), ("queueReboot", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: st4OutletControlAction.setStatus('current')
if mibBuilder.loadTexts: st4OutletControlAction.setDescription('An action to change the control state of the outlet, or to queue\n             an action.')
st4OutletCommonControl = MibIdentifier((1, 3, 6, 1, 4, 1, 1718, 4, 1, 8, 6))
st4OutletQueueControl = MibScalar((1, 3, 6, 1, 4, 1, 1718, 4, 1, 8, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("clear", 0), ("commit", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: st4OutletQueueControl.setStatus('current')
if mibBuilder.loadTexts: st4OutletQueueControl.setDescription('An action to clear or commit queued outlet control actions.  A\n             read of this object returns clear(0) if queue is empty, and\n             commit(1) if the queue is not empty.')
st4TemperatureSensors = MibIdentifier((1, 3, 6, 1, 4, 1, 1718, 4, 1, 9))
st4TempSensorCommonConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 1718, 4, 1, 9, 1))
st4TempSensorHysteresis = MibScalar((1, 3, 6, 1, 4, 1, 1718, 4, 1, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 54))).setUnits('degrees').setMaxAccess("readwrite")
if mibBuilder.loadTexts: st4TempSensorHysteresis.setStatus('current')
if mibBuilder.loadTexts: st4TempSensorHysteresis.setDescription('The temperature hysteresis of the sensor in degrees, using the\n             scale selected by st4TempSensorScale.')
st4TempSensorScale = MibScalar((1, 3, 6, 1, 4, 1, 1718, 4, 1, 9, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("celsius", 0), ("fahrenheit", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: st4TempSensorScale.setStatus('current')
if mibBuilder.loadTexts: st4TempSensorScale.setDescription('The current scale used for all temperature values.')
st4TempSensorConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1718, 4, 1, 9, 2), )
if mibBuilder.loadTexts: st4TempSensorConfigTable.setStatus('current')
if mibBuilder.loadTexts: st4TempSensorConfigTable.setDescription('Temperature sensor configuration table.')
st4TempSensorConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1718, 4, 1, 9, 2, 1), ).setIndexNames((0, "Sentry4-MIB", "st4UnitIndex"), (0, "Sentry4-MIB", "st4TempSensorIndex"))
if mibBuilder.loadTexts: st4TempSensorConfigEntry.setStatus('current')
if mibBuilder.loadTexts: st4TempSensorConfigEntry.setDescription('Configuration objects for a particular temperature sensor.')
st4TempSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 9, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: st4TempSensorIndex.setStatus('current')
if mibBuilder.loadTexts: st4TempSensorIndex.setDescription('Temperature sensor index.')
st4TempSensorID = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 9, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: st4TempSensorID.setStatus('current')
if mibBuilder.loadTexts: st4TempSensorID.setDescription('The internal ID of the temperature sensor.  Format=AN.')
st4TempSensorName = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 9, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: st4TempSensorName.setStatus('current')
if mibBuilder.loadTexts: st4TempSensorName.setDescription('The name of the temperature sensor.')
st4TempSensorValueMin = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 9, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 253))).setUnits('degrees').setMaxAccess("readonly")
if mibBuilder.loadTexts: st4TempSensorValueMin.setStatus('current')
if mibBuilder.loadTexts: st4TempSensorValueMin.setDescription('The minimum temperature limit of the sensor in degrees, using the\n             scale selected by st4TempSensorScale.')
st4TempSensorValueMax = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 9, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 253))).setUnits('degrees').setMaxAccess("readonly")
if mibBuilder.loadTexts: st4TempSensorValueMax.setStatus('current')
if mibBuilder.loadTexts: st4TempSensorValueMax.setDescription('The maximum temperature limit of the sensor in degrees, using the\n             scale selected by st4TempSensorScale.')
st4TempSensorMonitorTable = MibTable((1, 3, 6, 1, 4, 1, 1718, 4, 1, 9, 3), )
if mibBuilder.loadTexts: st4TempSensorMonitorTable.setStatus('current')
if mibBuilder.loadTexts: st4TempSensorMonitorTable.setDescription('Temperature sensor monitor table.')
st4TempSensorMonitorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1718, 4, 1, 9, 3, 1), ).setIndexNames((0, "Sentry4-MIB", "st4UnitIndex"), (0, "Sentry4-MIB", "st4TempSensorIndex"))
if mibBuilder.loadTexts: st4TempSensorMonitorEntry.setStatus('current')
if mibBuilder.loadTexts: st4TempSensorMonitorEntry.setDescription('Objects to monitor for a particular temperature sensor.')
st4TempSensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 9, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-410, 2540))).setUnits('tenth degrees').setMaxAccess("readonly")
if mibBuilder.loadTexts: st4TempSensorValue.setStatus('current')
if mibBuilder.loadTexts: st4TempSensorValue.setDescription('The measured temperature on the sensor in tenth degrees using the\n             scale selected by st4TempSensorScale. -410 means the temperature\n             reading is invalid.')
st4TempSensorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 9, 3, 1, 2), DeviceStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st4TempSensorStatus.setStatus('current')
if mibBuilder.loadTexts: st4TempSensorStatus.setDescription('The status of the temperature sensor.')
st4TempSensorEventConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1718, 4, 1, 9, 4), )
if mibBuilder.loadTexts: st4TempSensorEventConfigTable.setStatus('current')
if mibBuilder.loadTexts: st4TempSensorEventConfigTable.setDescription('Temperature sensor event configuration table.')
st4TempSensorEventConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1718, 4, 1, 9, 4, 1), ).setIndexNames((0, "Sentry4-MIB", "st4UnitIndex"), (0, "Sentry4-MIB", "st4TempSensorIndex"))
if mibBuilder.loadTexts: st4TempSensorEventConfigEntry.setStatus('current')
if mibBuilder.loadTexts: st4TempSensorEventConfigEntry.setDescription('Event configuration objects for a particular temperature sensor.')
st4TempSensorNotifications = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 9, 4, 1, 1), EventNotificationMethods()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: st4TempSensorNotifications.setStatus('current')
if mibBuilder.loadTexts: st4TempSensorNotifications.setDescription('The notification methods enabled for temperature sensor events.')
st4TempSensorLowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 9, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 253))).setUnits('degrees').setMaxAccess("readwrite")
if mibBuilder.loadTexts: st4TempSensorLowAlarm.setStatus('current')
if mibBuilder.loadTexts: st4TempSensorLowAlarm.setDescription('The low alarm threshold of the temperature sensor in degrees.')
st4TempSensorLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 9, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 253))).setUnits('degrees').setMaxAccess("readwrite")
if mibBuilder.loadTexts: st4TempSensorLowWarning.setStatus('current')
if mibBuilder.loadTexts: st4TempSensorLowWarning.setDescription('The low warning threshold of the temperature sensor in degrees.')
st4TempSensorHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 9, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 253))).setUnits('degrees').setMaxAccess("readwrite")
if mibBuilder.loadTexts: st4TempSensorHighWarning.setStatus('current')
if mibBuilder.loadTexts: st4TempSensorHighWarning.setDescription('The high warning threshold of the temperature sensor in degrees.')
st4TempSensorHighAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 9, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 253))).setUnits('degrees').setMaxAccess("readwrite")
if mibBuilder.loadTexts: st4TempSensorHighAlarm.setStatus('current')
if mibBuilder.loadTexts: st4TempSensorHighAlarm.setDescription('The high alarm threshold of the temperature sensor in degrees.')
st4HumiditySensors = MibIdentifier((1, 3, 6, 1, 4, 1, 1718, 4, 1, 10))
st4HumidSensorCommonConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 1718, 4, 1, 10, 1))
st4HumidSensorHysteresis = MibScalar((1, 3, 6, 1, 4, 1, 1718, 4, 1, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20))).setUnits('percentage relative humidity').setMaxAccess("readwrite")
if mibBuilder.loadTexts: st4HumidSensorHysteresis.setStatus('current')
if mibBuilder.loadTexts: st4HumidSensorHysteresis.setDescription('The humidity hysteresis of the sensor in percent relative\n             humidity.')
st4HumidSensorConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1718, 4, 1, 10, 2), )
if mibBuilder.loadTexts: st4HumidSensorConfigTable.setStatus('current')
if mibBuilder.loadTexts: st4HumidSensorConfigTable.setDescription('Humidity sensor configuration table.')
st4HumidSensorConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1718, 4, 1, 10, 2, 1), ).setIndexNames((0, "Sentry4-MIB", "st4UnitIndex"), (0, "Sentry4-MIB", "st4HumidSensorIndex"))
if mibBuilder.loadTexts: st4HumidSensorConfigEntry.setStatus('current')
if mibBuilder.loadTexts: st4HumidSensorConfigEntry.setDescription('Configuration objects for a particular humidity sensor.')
st4HumidSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 10, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: st4HumidSensorIndex.setStatus('current')
if mibBuilder.loadTexts: st4HumidSensorIndex.setDescription('Humidity sensor index.')
st4HumidSensorID = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 10, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: st4HumidSensorID.setStatus('current')
if mibBuilder.loadTexts: st4HumidSensorID.setDescription('The internal ID of the humidity sensor.  Format=AN.')
st4HumidSensorName = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 10, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: st4HumidSensorName.setStatus('current')
if mibBuilder.loadTexts: st4HumidSensorName.setDescription('The name of the humidity sensor.')
st4HumidSensorMonitorTable = MibTable((1, 3, 6, 1, 4, 1, 1718, 4, 1, 10, 3), )
if mibBuilder.loadTexts: st4HumidSensorMonitorTable.setStatus('current')
if mibBuilder.loadTexts: st4HumidSensorMonitorTable.setDescription('Humidity sensor monitor table.')
st4HumidSensorMonitorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1718, 4, 1, 10, 3, 1), ).setIndexNames((0, "Sentry4-MIB", "st4UnitIndex"), (0, "Sentry4-MIB", "st4HumidSensorIndex"))
if mibBuilder.loadTexts: st4HumidSensorMonitorEntry.setStatus('current')
if mibBuilder.loadTexts: st4HumidSensorMonitorEntry.setDescription('Objects to monitor for a particular humidity sensor.')
st4HumidSensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 10, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setUnits('percentage relative humidity').setMaxAccess("readonly")
if mibBuilder.loadTexts: st4HumidSensorValue.setStatus('current')
if mibBuilder.loadTexts: st4HumidSensorValue.setDescription('The measured humidity on the sensor in percentage relative\n             humidity.')
st4HumidSensorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 10, 3, 1, 2), DeviceStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st4HumidSensorStatus.setStatus('current')
if mibBuilder.loadTexts: st4HumidSensorStatus.setDescription('The status of the humidity sensor.')
st4HumidSensorEventConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1718, 4, 1, 10, 4), )
if mibBuilder.loadTexts: st4HumidSensorEventConfigTable.setStatus('current')
if mibBuilder.loadTexts: st4HumidSensorEventConfigTable.setDescription('Humidity sensor event configuration table.')
st4HumidSensorEventConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1718, 4, 1, 10, 4, 1), ).setIndexNames((0, "Sentry4-MIB", "st4UnitIndex"), (0, "Sentry4-MIB", "st4HumidSensorIndex"))
if mibBuilder.loadTexts: st4HumidSensorEventConfigEntry.setStatus('current')
if mibBuilder.loadTexts: st4HumidSensorEventConfigEntry.setDescription('Event configuration objects for a particular humidity sensor.')
st4HumidSensorNotifications = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 10, 4, 1, 1), EventNotificationMethods()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: st4HumidSensorNotifications.setStatus('current')
if mibBuilder.loadTexts: st4HumidSensorNotifications.setDescription('The notification methods enabled for humidity sensor events.')
st4HumidSensorLowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 10, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percentage relative humidity').setMaxAccess("readwrite")
if mibBuilder.loadTexts: st4HumidSensorLowAlarm.setStatus('current')
if mibBuilder.loadTexts: st4HumidSensorLowAlarm.setDescription('The low alarm threshold of the humidity sensor in percentage\n             relative humidity.')
st4HumidSensorLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 10, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percentage relative humidity').setMaxAccess("readwrite")
if mibBuilder.loadTexts: st4HumidSensorLowWarning.setStatus('current')
if mibBuilder.loadTexts: st4HumidSensorLowWarning.setDescription('The low warning threshold of the humidity sensor in percentage\n             relative humidity.')
st4HumidSensorHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 10, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percentage relative humidity').setMaxAccess("readwrite")
if mibBuilder.loadTexts: st4HumidSensorHighWarning.setStatus('current')
if mibBuilder.loadTexts: st4HumidSensorHighWarning.setDescription('The high warning threshold of the humidity sensor in percentage\n             relative humidity.')
st4HumidSensorHighAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 10, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percentage relative humidity').setMaxAccess("readwrite")
if mibBuilder.loadTexts: st4HumidSensorHighAlarm.setStatus('current')
if mibBuilder.loadTexts: st4HumidSensorHighAlarm.setDescription('The high alarm threshold of the humidity sensor in percentage\n             relative humidity.')
st4WaterSensors = MibIdentifier((1, 3, 6, 1, 4, 1, 1718, 4, 1, 11))
st4WaterSensorCommonConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 1718, 4, 1, 11, 1))
st4WaterSensorConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1718, 4, 1, 11, 2), )
if mibBuilder.loadTexts: st4WaterSensorConfigTable.setStatus('current')
if mibBuilder.loadTexts: st4WaterSensorConfigTable.setDescription('Water sensor configuration table.')
st4WaterSensorConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1718, 4, 1, 11, 2, 1), ).setIndexNames((0, "Sentry4-MIB", "st4UnitIndex"), (0, "Sentry4-MIB", "st4WaterSensorIndex"))
if mibBuilder.loadTexts: st4WaterSensorConfigEntry.setStatus('current')
if mibBuilder.loadTexts: st4WaterSensorConfigEntry.setDescription('Configuration objects for a particular water sensor.')
st4WaterSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 11, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1)))
if mibBuilder.loadTexts: st4WaterSensorIndex.setStatus('current')
if mibBuilder.loadTexts: st4WaterSensorIndex.setDescription('Water sensor index.')
st4WaterSensorID = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 11, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: st4WaterSensorID.setStatus('current')
if mibBuilder.loadTexts: st4WaterSensorID.setDescription('The internal ID of the water sensor.  Format=AN.')
st4WaterSensorName = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 11, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: st4WaterSensorName.setStatus('current')
if mibBuilder.loadTexts: st4WaterSensorName.setDescription('The name of the water sensor.')
st4WaterSensorMonitorTable = MibTable((1, 3, 6, 1, 4, 1, 1718, 4, 1, 11, 3), )
if mibBuilder.loadTexts: st4WaterSensorMonitorTable.setStatus('current')
if mibBuilder.loadTexts: st4WaterSensorMonitorTable.setDescription('Water sensor monitor table.')
st4WaterSensorMonitorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1718, 4, 1, 11, 3, 1), ).setIndexNames((0, "Sentry4-MIB", "st4UnitIndex"), (0, "Sentry4-MIB", "st4WaterSensorIndex"))
if mibBuilder.loadTexts: st4WaterSensorMonitorEntry.setStatus('current')
if mibBuilder.loadTexts: st4WaterSensorMonitorEntry.setDescription('Objects to monitor for a particular water sensor.')
st4WaterSensorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 11, 3, 1, 1), DeviceStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st4WaterSensorStatus.setStatus('current')
if mibBuilder.loadTexts: st4WaterSensorStatus.setDescription('The status of the water sensor.')
st4WaterSensorEventConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1718, 4, 1, 11, 4), )
if mibBuilder.loadTexts: st4WaterSensorEventConfigTable.setStatus('current')
if mibBuilder.loadTexts: st4WaterSensorEventConfigTable.setDescription('Water sensor event configuration table.')
st4WaterSensorEventConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1718, 4, 1, 11, 4, 1), ).setIndexNames((0, "Sentry4-MIB", "st4UnitIndex"), (0, "Sentry4-MIB", "st4WaterSensorIndex"))
if mibBuilder.loadTexts: st4WaterSensorEventConfigEntry.setStatus('current')
if mibBuilder.loadTexts: st4WaterSensorEventConfigEntry.setDescription('Event configuration objects for a particular water sensor.')
st4WaterSensorNotifications = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 11, 4, 1, 1), EventNotificationMethods()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: st4WaterSensorNotifications.setStatus('current')
if mibBuilder.loadTexts: st4WaterSensorNotifications.setDescription('The notification methods enabled for water sensor events.')
st4ContactClosureSensors = MibIdentifier((1, 3, 6, 1, 4, 1, 1718, 4, 1, 12))
st4CcSensorCommonConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 1718, 4, 1, 12, 1))
st4CcSensorConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1718, 4, 1, 12, 2), )
if mibBuilder.loadTexts: st4CcSensorConfigTable.setStatus('current')
if mibBuilder.loadTexts: st4CcSensorConfigTable.setDescription('Contact closure sensor configuration table.')
st4CcSensorConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1718, 4, 1, 12, 2, 1), ).setIndexNames((0, "Sentry4-MIB", "st4UnitIndex"), (0, "Sentry4-MIB", "st4CcSensorIndex"))
if mibBuilder.loadTexts: st4CcSensorConfigEntry.setStatus('current')
if mibBuilder.loadTexts: st4CcSensorConfigEntry.setDescription('Configuration objects for a particular contact closure sensor.')
st4CcSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 12, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4)))
if mibBuilder.loadTexts: st4CcSensorIndex.setStatus('current')
if mibBuilder.loadTexts: st4CcSensorIndex.setDescription('Contact closure sensor index.')
st4CcSensorID = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 12, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: st4CcSensorID.setStatus('current')
if mibBuilder.loadTexts: st4CcSensorID.setDescription('The internal ID of the contact closure sensor.  Format=AN.')
st4CcSensorName = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 12, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: st4CcSensorName.setStatus('current')
if mibBuilder.loadTexts: st4CcSensorName.setDescription('The name of the contact closure sensor.')
st4CcSensorMonitorTable = MibTable((1, 3, 6, 1, 4, 1, 1718, 4, 1, 12, 3), )
if mibBuilder.loadTexts: st4CcSensorMonitorTable.setStatus('current')
if mibBuilder.loadTexts: st4CcSensorMonitorTable.setDescription('Contact closure sensor monitor table.')
st4CcSensorMonitorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1718, 4, 1, 12, 3, 1), ).setIndexNames((0, "Sentry4-MIB", "st4UnitIndex"), (0, "Sentry4-MIB", "st4CcSensorIndex"))
if mibBuilder.loadTexts: st4CcSensorMonitorEntry.setStatus('current')
if mibBuilder.loadTexts: st4CcSensorMonitorEntry.setDescription('Objects to monitor for a particular contact closure sensor.')
st4CcSensorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 12, 3, 1, 1), DeviceStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st4CcSensorStatus.setStatus('current')
if mibBuilder.loadTexts: st4CcSensorStatus.setDescription('The status of the contact closure.')
st4CcSensorEventConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1718, 4, 1, 12, 4), )
if mibBuilder.loadTexts: st4CcSensorEventConfigTable.setStatus('current')
if mibBuilder.loadTexts: st4CcSensorEventConfigTable.setDescription('Contact closure sensor event configuration table.')
st4CcSensorEventConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1718, 4, 1, 12, 4, 1), ).setIndexNames((0, "Sentry4-MIB", "st4UnitIndex"), (0, "Sentry4-MIB", "st4CcSensorIndex"))
if mibBuilder.loadTexts: st4CcSensorEventConfigEntry.setStatus('current')
if mibBuilder.loadTexts: st4CcSensorEventConfigEntry.setDescription('Event configuration objects for a particular contact closure\n             sensor.')
st4CcSensorNotifications = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 12, 4, 1, 1), EventNotificationMethods()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: st4CcSensorNotifications.setStatus('current')
if mibBuilder.loadTexts: st4CcSensorNotifications.setDescription('The notification methods enabled for contact closure sensor\n             events.')
st4AnalogToDigitalConvSensors = MibIdentifier((1, 3, 6, 1, 4, 1, 1718, 4, 1, 13))
st4AdcSensorCommonConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 1718, 4, 1, 13, 1))
st4AdcSensorHysteresis = MibScalar((1, 3, 6, 1, 4, 1, 1718, 4, 1, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: st4AdcSensorHysteresis.setStatus('current')
if mibBuilder.loadTexts: st4AdcSensorHysteresis.setDescription('The 8-bit count hysteresis of the analog-to-digital converter\n             sensor.')
st4AdcSensorConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1718, 4, 1, 13, 2), )
if mibBuilder.loadTexts: st4AdcSensorConfigTable.setStatus('current')
if mibBuilder.loadTexts: st4AdcSensorConfigTable.setDescription('Analog-to-digital converter sensor configuration table.')
st4AdcSensorConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1718, 4, 1, 13, 2, 1), ).setIndexNames((0, "Sentry4-MIB", "st4UnitIndex"), (0, "Sentry4-MIB", "st4AdcSensorIndex"))
if mibBuilder.loadTexts: st4AdcSensorConfigEntry.setStatus('current')
if mibBuilder.loadTexts: st4AdcSensorConfigEntry.setDescription('Configuration objects for a particular analog-to-digital\n             converter sensor.')
st4AdcSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 13, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1)))
if mibBuilder.loadTexts: st4AdcSensorIndex.setStatus('current')
if mibBuilder.loadTexts: st4AdcSensorIndex.setDescription('Analog-to-digital converter sensor index.')
st4AdcSensorID = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 13, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: st4AdcSensorID.setStatus('current')
if mibBuilder.loadTexts: st4AdcSensorID.setDescription('The internal ID of the analog-to-digital converter sensor.\n             Format=AN.')
st4AdcSensorName = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 13, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: st4AdcSensorName.setStatus('current')
if mibBuilder.loadTexts: st4AdcSensorName.setDescription('The name of the analog-to-digital converter sensor.')
st4AdcSensorMonitorTable = MibTable((1, 3, 6, 1, 4, 1, 1718, 4, 1, 13, 3), )
if mibBuilder.loadTexts: st4AdcSensorMonitorTable.setStatus('current')
if mibBuilder.loadTexts: st4AdcSensorMonitorTable.setDescription('Analog-to-digital converter sensor monitor table.')
st4AdcSensorMonitorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1718, 4, 1, 13, 3, 1), ).setIndexNames((0, "Sentry4-MIB", "st4UnitIndex"), (0, "Sentry4-MIB", "st4AdcSensorIndex"))
if mibBuilder.loadTexts: st4AdcSensorMonitorEntry.setStatus('current')
if mibBuilder.loadTexts: st4AdcSensorMonitorEntry.setDescription('Objects to monitor for a particular analog-to-digital converter\n             sensor.')
st4AdcSensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 13, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: st4AdcSensorValue.setStatus('current')
if mibBuilder.loadTexts: st4AdcSensorValue.setDescription('The 8-bit value from the analog-to-digital converter sensor.')
st4AdcSensorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 13, 3, 1, 2), DeviceStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st4AdcSensorStatus.setStatus('current')
if mibBuilder.loadTexts: st4AdcSensorStatus.setDescription('The status of the analog-to-digital converter sensor.')
st4AdcSensorEventConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1718, 4, 1, 13, 4), )
if mibBuilder.loadTexts: st4AdcSensorEventConfigTable.setStatus('current')
if mibBuilder.loadTexts: st4AdcSensorEventConfigTable.setDescription('Analog-to-digital converter sensor event configuration table.')
st4AdcSensorEventConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1718, 4, 1, 13, 4, 1), ).setIndexNames((0, "Sentry4-MIB", "st4UnitIndex"), (0, "Sentry4-MIB", "st4AdcSensorIndex"))
if mibBuilder.loadTexts: st4AdcSensorEventConfigEntry.setStatus('current')
if mibBuilder.loadTexts: st4AdcSensorEventConfigEntry.setDescription('Event configuration objects for a particular\n             analog-to-digital converter sensor.')
st4AdcSensorNotifications = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 13, 4, 1, 1), EventNotificationMethods()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: st4AdcSensorNotifications.setStatus('current')
if mibBuilder.loadTexts: st4AdcSensorNotifications.setDescription('The notification methods enabled for analog-to-digital converter\n             sensor events.')
st4AdcSensorLowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 13, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: st4AdcSensorLowAlarm.setStatus('current')
if mibBuilder.loadTexts: st4AdcSensorLowAlarm.setDescription('The 8-bit value for the low alarm threshold of the\n             analog-to-digital converter sensor.')
st4AdcSensorLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 13, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: st4AdcSensorLowWarning.setStatus('current')
if mibBuilder.loadTexts: st4AdcSensorLowWarning.setDescription('The 8-bit value for the low warning threshold of the\n             analog-to-digital converter sensor.')
st4AdcSensorHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 13, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: st4AdcSensorHighWarning.setStatus('current')
if mibBuilder.loadTexts: st4AdcSensorHighWarning.setDescription('The 8-bit value for the high warning threshold of the\n             analog-to-digital converter sensor.')
st4AdcSensorHighAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 13, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: st4AdcSensorHighAlarm.setStatus('current')
if mibBuilder.loadTexts: st4AdcSensorHighAlarm.setDescription('The 8-bit value for the high alarm threshold of the\n             analog-to-digital converter sensor.')
st4FanSensors = MibIdentifier((1, 3, 6, 1, 4, 1, 1718, 4, 1, 14))
st4FanSensorCommonConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 1718, 4, 1, 14, 1))
st4FanSensorHysteresis = MibScalar((1, 3, 6, 1, 4, 1, 1718, 4, 1, 14, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1200))).setUnits('rotations per minute').setMaxAccess("readwrite")
if mibBuilder.loadTexts: st4FanSensorHysteresis.setStatus('current')
if mibBuilder.loadTexts: st4FanSensorHysteresis.setDescription('The fan speed hysteresis of the sensor in rotations per minute.')
st4FanSensorConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1718, 4, 1, 14, 2), )
if mibBuilder.loadTexts: st4FanSensorConfigTable.setStatus('current')
if mibBuilder.loadTexts: st4FanSensorConfigTable.setDescription('Fan sensor configuration table.')
st4FanSensorConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1718, 4, 1, 14, 2, 1), ).setIndexNames((0, "Sentry4-MIB", "st4UnitIndex"), (0, "Sentry4-MIB", "st4FanSensorIndex"))
if mibBuilder.loadTexts: st4FanSensorConfigEntry.setStatus('current')
if mibBuilder.loadTexts: st4FanSensorConfigEntry.setDescription('Configuration objects for a particular fan sensor.')
st4FanSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 14, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4)))
if mibBuilder.loadTexts: st4FanSensorIndex.setStatus('current')
if mibBuilder.loadTexts: st4FanSensorIndex.setDescription('Fan sensor index.')
st4FanSensorID = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 14, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: st4FanSensorID.setStatus('current')
if mibBuilder.loadTexts: st4FanSensorID.setDescription('The internal ID of the fan sensor.  Format=AN.')
st4FanSensorName = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 14, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: st4FanSensorName.setStatus('current')
if mibBuilder.loadTexts: st4FanSensorName.setDescription('The name of the fan sensor.')
st4FanSensorMonitorTable = MibTable((1, 3, 6, 1, 4, 1, 1718, 4, 1, 14, 3), )
if mibBuilder.loadTexts: st4FanSensorMonitorTable.setStatus('current')
if mibBuilder.loadTexts: st4FanSensorMonitorTable.setDescription('Fan sensor monitor table.')
st4FanSensorMonitorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1718, 4, 1, 14, 3, 1), ).setIndexNames((0, "Sentry4-MIB", "st4UnitIndex"), (0, "Sentry4-MIB", "st4FanSensorIndex"))
if mibBuilder.loadTexts: st4FanSensorMonitorEntry.setStatus('current')
if mibBuilder.loadTexts: st4FanSensorMonitorEntry.setDescription('Objects to monitor for a particular fan sensor.')
st4FanSensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 14, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 15300))).setUnits('rotations per minute').setMaxAccess("readonly")
if mibBuilder.loadTexts: st4FanSensorValue.setStatus('current')
if mibBuilder.loadTexts: st4FanSensorValue.setDescription('The measured fan speed of the sensor in rotations per minute.')
st4FanSensorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 14, 3, 1, 2), DeviceStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st4FanSensorStatus.setStatus('current')
if mibBuilder.loadTexts: st4FanSensorStatus.setDescription('The status of the fan sensor.')
st4FanSensorEventConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1718, 4, 1, 14, 4), )
if mibBuilder.loadTexts: st4FanSensorEventConfigTable.setStatus('current')
if mibBuilder.loadTexts: st4FanSensorEventConfigTable.setDescription('Fan sensor event configuration table.')
st4FanSensorEventConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1718, 4, 1, 14, 4, 1), ).setIndexNames((0, "Sentry4-MIB", "st4UnitIndex"), (0, "Sentry4-MIB", "st4FanSensorIndex"))
if mibBuilder.loadTexts: st4FanSensorEventConfigEntry.setStatus('current')
if mibBuilder.loadTexts: st4FanSensorEventConfigEntry.setDescription('Event configuration objects for a particular fan sensor.')
st4FanSensorNotifications = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 14, 4, 1, 1), EventNotificationMethods()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: st4FanSensorNotifications.setStatus('current')
if mibBuilder.loadTexts: st4FanSensorNotifications.setDescription('The notification methods enabled for fan sensor events.')
st4FanSensorLowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 14, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15300))).setUnits('rotations per minute').setMaxAccess("readwrite")
if mibBuilder.loadTexts: st4FanSensorLowAlarm.setStatus('current')
if mibBuilder.loadTexts: st4FanSensorLowAlarm.setDescription('The low alarm threshold of the fan sensor in rotations per\n             minute.')
st4FanSensorLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 14, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15300))).setUnits('rotations per minute').setMaxAccess("readwrite")
if mibBuilder.loadTexts: st4FanSensorLowWarning.setStatus('current')
if mibBuilder.loadTexts: st4FanSensorLowWarning.setDescription('The low warning threshold of the fan sensor in rotations per\n             minute.')
st4FanSensorHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 14, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15300))).setUnits('rotations per minute').setMaxAccess("readwrite")
if mibBuilder.loadTexts: st4FanSensorHighWarning.setStatus('current')
if mibBuilder.loadTexts: st4FanSensorHighWarning.setDescription('The high warning threshold of the fan sensor in rotations per\n             minute.')
st4FanSensorHighAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 4, 1, 14, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15300))).setUnits('rotations per minute').setMaxAccess("readwrite")
if mibBuilder.loadTexts: st4FanSensorHighAlarm.setStatus('current')
if mibBuilder.loadTexts: st4FanSensorHighAlarm.setDescription('The high alarm threshold of the fan sensor in rotations per\n             minute.')
st4EventInformation = MibIdentifier((1, 3, 6, 1, 4, 1, 1718, 4, 1, 99))
st4EventStatusText = MibScalar((1, 3, 6, 1, 4, 1, 1718, 4, 1, 99, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: st4EventStatusText.setStatus('current')
if mibBuilder.loadTexts: st4EventStatusText.setDescription('The text representation of the enumerated integer value of\n             the most-relevant status or state object included in a trap.\n             The value of this object is set only when sent with a trap.\n             A read of this object will return a NULL string.')
st4EventStatusCondition = MibScalar((1, 3, 6, 1, 4, 1, 1718, 4, 1, 99, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nonError", 0), ("error", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: st4EventStatusCondition.setStatus('current')
if mibBuilder.loadTexts: st4EventStatusCondition.setDescription('The condition of the enumerated integer value of the status\n             object included in a trap.  The value of this object is set\n             only when sent with a trap.  A read of this object will\n             return zero.')
st4Notifications = MibIdentifier((1, 3, 6, 1, 4, 1, 1718, 4, 100))
st4Events = MibIdentifier((1, 3, 6, 1, 4, 1, 1718, 4, 100, 0))
st4UnitStatusEvent = NotificationType((1, 3, 6, 1, 4, 1, 1718, 4, 100, 0, 1)).setObjects(("Sentry4-MIB", "st4SystemLocation"), ("Sentry4-MIB", "st4UnitID"), ("Sentry4-MIB", "st4UnitName"), ("Sentry4-MIB", "st4UnitStatus"), ("Sentry4-MIB", "st4EventStatusText"), ("Sentry4-MIB", "st4EventStatusCondition"))
if mibBuilder.loadTexts: st4UnitStatusEvent.setStatus('current')
if mibBuilder.loadTexts: st4UnitStatusEvent.setDescription('Unit status event.')
st4InputCordStatusEvent = NotificationType((1, 3, 6, 1, 4, 1, 1718, 4, 100, 0, 2)).setObjects(("Sentry4-MIB", "st4SystemLocation"), ("Sentry4-MIB", "st4InputCordID"), ("Sentry4-MIB", "st4InputCordName"), ("Sentry4-MIB", "st4InputCordState"), ("Sentry4-MIB", "st4InputCordStatus"), ("Sentry4-MIB", "st4EventStatusText"), ("Sentry4-MIB", "st4EventStatusCondition"))
if mibBuilder.loadTexts: st4InputCordStatusEvent.setStatus('current')
if mibBuilder.loadTexts: st4InputCordStatusEvent.setDescription('Input cord status event.')
st4InputCordActivePowerEvent = NotificationType((1, 3, 6, 1, 4, 1, 1718, 4, 100, 0, 3)).setObjects(("Sentry4-MIB", "st4SystemLocation"), ("Sentry4-MIB", "st4InputCordID"), ("Sentry4-MIB", "st4InputCordName"), ("Sentry4-MIB", "st4InputCordActivePower"), ("Sentry4-MIB", "st4InputCordActivePowerStatus"), ("Sentry4-MIB", "st4EventStatusText"), ("Sentry4-MIB", "st4EventStatusCondition"))
if mibBuilder.loadTexts: st4InputCordActivePowerEvent.setStatus('current')
if mibBuilder.loadTexts: st4InputCordActivePowerEvent.setDescription('Input cord active power event.')
st4InputCordApparentPowerEvent = NotificationType((1, 3, 6, 1, 4, 1, 1718, 4, 100, 0, 4)).setObjects(("Sentry4-MIB", "st4SystemLocation"), ("Sentry4-MIB", "st4InputCordID"), ("Sentry4-MIB", "st4InputCordName"), ("Sentry4-MIB", "st4InputCordApparentPower"), ("Sentry4-MIB", "st4InputCordApparentPowerStatus"), ("Sentry4-MIB", "st4EventStatusText"), ("Sentry4-MIB", "st4EventStatusCondition"))
if mibBuilder.loadTexts: st4InputCordApparentPowerEvent.setStatus('current')
if mibBuilder.loadTexts: st4InputCordApparentPowerEvent.setDescription('Input cord apparent power event.')
st4InputCordPowerFactorEvent = NotificationType((1, 3, 6, 1, 4, 1, 1718, 4, 100, 0, 5)).setObjects(("Sentry4-MIB", "st4SystemLocation"), ("Sentry4-MIB", "st4InputCordID"), ("Sentry4-MIB", "st4InputCordName"), ("Sentry4-MIB", "st4InputCordPowerFactor"), ("Sentry4-MIB", "st4InputCordPowerFactorStatus"), ("Sentry4-MIB", "st4EventStatusText"), ("Sentry4-MIB", "st4EventStatusCondition"))
if mibBuilder.loadTexts: st4InputCordPowerFactorEvent.setStatus('current')
if mibBuilder.loadTexts: st4InputCordPowerFactorEvent.setDescription('Input cord power factor event.')
st4InputCordOutOfBalanceEvent = NotificationType((1, 3, 6, 1, 4, 1, 1718, 4, 100, 0, 6)).setObjects(("Sentry4-MIB", "st4SystemLocation"), ("Sentry4-MIB", "st4InputCordID"), ("Sentry4-MIB", "st4InputCordName"), ("Sentry4-MIB", "st4InputCordOutOfBalance"), ("Sentry4-MIB", "st4InputCordOutOfBalanceStatus"), ("Sentry4-MIB", "st4EventStatusText"), ("Sentry4-MIB", "st4EventStatusCondition"))
if mibBuilder.loadTexts: st4InputCordOutOfBalanceEvent.setStatus('current')
if mibBuilder.loadTexts: st4InputCordOutOfBalanceEvent.setDescription('Input cord out-of-balance event.')
st4LineStatusEvent = NotificationType((1, 3, 6, 1, 4, 1, 1718, 4, 100, 0, 7)).setObjects(("Sentry4-MIB", "st4SystemLocation"), ("Sentry4-MIB", "st4LineID"), ("Sentry4-MIB", "st4LineLabel"), ("Sentry4-MIB", "st4LineState"), ("Sentry4-MIB", "st4LineStatus"), ("Sentry4-MIB", "st4EventStatusText"), ("Sentry4-MIB", "st4EventStatusCondition"))
if mibBuilder.loadTexts: st4LineStatusEvent.setStatus('current')
if mibBuilder.loadTexts: st4LineStatusEvent.setDescription('Line status event.')
st4LineCurrentEvent = NotificationType((1, 3, 6, 1, 4, 1, 1718, 4, 100, 0, 8)).setObjects(("Sentry4-MIB", "st4SystemLocation"), ("Sentry4-MIB", "st4LineID"), ("Sentry4-MIB", "st4LineLabel"), ("Sentry4-MIB", "st4LineCurrent"), ("Sentry4-MIB", "st4LineCurrentStatus"), ("Sentry4-MIB", "st4EventStatusText"), ("Sentry4-MIB", "st4EventStatusCondition"))
if mibBuilder.loadTexts: st4LineCurrentEvent.setStatus('current')
if mibBuilder.loadTexts: st4LineCurrentEvent.setDescription('Line current event.')
st4PhaseStatusEvent = NotificationType((1, 3, 6, 1, 4, 1, 1718, 4, 100, 0, 9)).setObjects(("Sentry4-MIB", "st4SystemLocation"), ("Sentry4-MIB", "st4PhaseID"), ("Sentry4-MIB", "st4PhaseLabel"), ("Sentry4-MIB", "st4PhaseState"), ("Sentry4-MIB", "st4PhaseStatus"), ("Sentry4-MIB", "st4EventStatusText"), ("Sentry4-MIB", "st4EventStatusCondition"))
if mibBuilder.loadTexts: st4PhaseStatusEvent.setStatus('current')
if mibBuilder.loadTexts: st4PhaseStatusEvent.setDescription('Phase status event.')
st4PhaseVoltageEvent = NotificationType((1, 3, 6, 1, 4, 1, 1718, 4, 100, 0, 10)).setObjects(("Sentry4-MIB", "st4SystemLocation"), ("Sentry4-MIB", "st4PhaseID"), ("Sentry4-MIB", "st4PhaseLabel"), ("Sentry4-MIB", "st4PhaseVoltage"), ("Sentry4-MIB", "st4PhaseVoltageStatus"), ("Sentry4-MIB", "st4EventStatusText"), ("Sentry4-MIB", "st4EventStatusCondition"))
if mibBuilder.loadTexts: st4PhaseVoltageEvent.setStatus('current')
if mibBuilder.loadTexts: st4PhaseVoltageEvent.setDescription('Phase voltage event.')
st4PhasePowerFactorEvent = NotificationType((1, 3, 6, 1, 4, 1, 1718, 4, 100, 0, 11)).setObjects(("Sentry4-MIB", "st4SystemLocation"), ("Sentry4-MIB", "st4PhaseID"), ("Sentry4-MIB", "st4PhaseLabel"), ("Sentry4-MIB", "st4PhasePowerFactor"), ("Sentry4-MIB", "st4PhasePowerFactorStatus"), ("Sentry4-MIB", "st4EventStatusText"), ("Sentry4-MIB", "st4EventStatusCondition"))
if mibBuilder.loadTexts: st4PhasePowerFactorEvent.setStatus('current')
if mibBuilder.loadTexts: st4PhasePowerFactorEvent.setDescription('Phase voltage event.')
st4OcpStatusEvent = NotificationType((1, 3, 6, 1, 4, 1, 1718, 4, 100, 0, 12)).setObjects(("Sentry4-MIB", "st4SystemLocation"), ("Sentry4-MIB", "st4OcpID"), ("Sentry4-MIB", "st4OcpLabel"), ("Sentry4-MIB", "st4OcpStatus"), ("Sentry4-MIB", "st4EventStatusText"), ("Sentry4-MIB", "st4EventStatusCondition"))
if mibBuilder.loadTexts: st4OcpStatusEvent.setStatus('current')
if mibBuilder.loadTexts: st4OcpStatusEvent.setDescription('Over-current protector status event.')
st4BranchStatusEvent = NotificationType((1, 3, 6, 1, 4, 1, 1718, 4, 100, 0, 13)).setObjects(("Sentry4-MIB", "st4SystemLocation"), ("Sentry4-MIB", "st4BranchID"), ("Sentry4-MIB", "st4BranchLabel"), ("Sentry4-MIB", "st4BranchState"), ("Sentry4-MIB", "st4BranchStatus"), ("Sentry4-MIB", "st4EventStatusText"), ("Sentry4-MIB", "st4EventStatusCondition"))
if mibBuilder.loadTexts: st4BranchStatusEvent.setStatus('current')
if mibBuilder.loadTexts: st4BranchStatusEvent.setDescription('Branch status event.')
st4BranchCurrentEvent = NotificationType((1, 3, 6, 1, 4, 1, 1718, 4, 100, 0, 14)).setObjects(("Sentry4-MIB", "st4SystemLocation"), ("Sentry4-MIB", "st4BranchID"), ("Sentry4-MIB", "st4BranchLabel"), ("Sentry4-MIB", "st4BranchCurrent"), ("Sentry4-MIB", "st4BranchCurrentStatus"), ("Sentry4-MIB", "st4EventStatusText"), ("Sentry4-MIB", "st4EventStatusCondition"))
if mibBuilder.loadTexts: st4BranchCurrentEvent.setStatus('current')
if mibBuilder.loadTexts: st4BranchCurrentEvent.setDescription('Branch current event.')
st4OutletStatusEvent = NotificationType((1, 3, 6, 1, 4, 1, 1718, 4, 100, 0, 15)).setObjects(("Sentry4-MIB", "st4SystemLocation"), ("Sentry4-MIB", "st4OutletID"), ("Sentry4-MIB", "st4OutletName"), ("Sentry4-MIB", "st4OutletState"), ("Sentry4-MIB", "st4OutletStatus"), ("Sentry4-MIB", "st4OutletControlState"), ("Sentry4-MIB", "st4EventStatusText"), ("Sentry4-MIB", "st4EventStatusCondition"))
if mibBuilder.loadTexts: st4OutletStatusEvent.setStatus('current')
if mibBuilder.loadTexts: st4OutletStatusEvent.setDescription('Outlet status event.')
st4OutletStateChangeEvent = NotificationType((1, 3, 6, 1, 4, 1, 1718, 4, 100, 0, 16)).setObjects(("Sentry4-MIB", "st4SystemLocation"), ("Sentry4-MIB", "st4OutletID"), ("Sentry4-MIB", "st4OutletName"), ("Sentry4-MIB", "st4OutletState"), ("Sentry4-MIB", "st4OutletStatus"), ("Sentry4-MIB", "st4OutletControlState"), ("Sentry4-MIB", "st4EventStatusText"), ("Sentry4-MIB", "st4EventStatusCondition"))
if mibBuilder.loadTexts: st4OutletStateChangeEvent.setStatus('current')
if mibBuilder.loadTexts: st4OutletStateChangeEvent.setDescription('Outlet state change event.')
st4OutletCurrentEvent = NotificationType((1, 3, 6, 1, 4, 1, 1718, 4, 100, 0, 17)).setObjects(("Sentry4-MIB", "st4SystemLocation"), ("Sentry4-MIB", "st4OutletID"), ("Sentry4-MIB", "st4OutletName"), ("Sentry4-MIB", "st4OutletCurrent"), ("Sentry4-MIB", "st4OutletCurrentStatus"), ("Sentry4-MIB", "st4EventStatusText"), ("Sentry4-MIB", "st4EventStatusCondition"))
if mibBuilder.loadTexts: st4OutletCurrentEvent.setStatus('current')
if mibBuilder.loadTexts: st4OutletCurrentEvent.setDescription('Outlet current event.')
st4OutletActivePowerEvent = NotificationType((1, 3, 6, 1, 4, 1, 1718, 4, 100, 0, 18)).setObjects(("Sentry4-MIB", "st4SystemLocation"), ("Sentry4-MIB", "st4OutletID"), ("Sentry4-MIB", "st4OutletName"), ("Sentry4-MIB", "st4OutletActivePower"), ("Sentry4-MIB", "st4OutletActivePowerStatus"), ("Sentry4-MIB", "st4EventStatusText"), ("Sentry4-MIB", "st4EventStatusCondition"))
if mibBuilder.loadTexts: st4OutletActivePowerEvent.setStatus('current')
if mibBuilder.loadTexts: st4OutletActivePowerEvent.setDescription('Outlet active power event.')
st4OutletPowerFactorEvent = NotificationType((1, 3, 6, 1, 4, 1, 1718, 4, 100, 0, 19)).setObjects(("Sentry4-MIB", "st4SystemLocation"), ("Sentry4-MIB", "st4OutletID"), ("Sentry4-MIB", "st4OutletName"), ("Sentry4-MIB", "st4OutletPowerFactor"), ("Sentry4-MIB", "st4OutletPowerFactorStatus"), ("Sentry4-MIB", "st4EventStatusText"), ("Sentry4-MIB", "st4EventStatusCondition"))
if mibBuilder.loadTexts: st4OutletPowerFactorEvent.setStatus('current')
if mibBuilder.loadTexts: st4OutletPowerFactorEvent.setDescription('Outlet power factor event.')
st4TempSensorEvent = NotificationType((1, 3, 6, 1, 4, 1, 1718, 4, 100, 0, 20)).setObjects(("Sentry4-MIB", "st4SystemLocation"), ("Sentry4-MIB", "st4TempSensorID"), ("Sentry4-MIB", "st4TempSensorName"), ("Sentry4-MIB", "st4TempSensorValue"), ("Sentry4-MIB", "st4TempSensorStatus"), ("Sentry4-MIB", "st4TempSensorScale"), ("Sentry4-MIB", "st4EventStatusText"), ("Sentry4-MIB", "st4EventStatusCondition"))
if mibBuilder.loadTexts: st4TempSensorEvent.setStatus('current')
if mibBuilder.loadTexts: st4TempSensorEvent.setDescription('Temperature sensor event.')
st4HumidSensorEvent = NotificationType((1, 3, 6, 1, 4, 1, 1718, 4, 100, 0, 21)).setObjects(("Sentry4-MIB", "st4SystemLocation"), ("Sentry4-MIB", "st4HumidSensorID"), ("Sentry4-MIB", "st4HumidSensorName"), ("Sentry4-MIB", "st4HumidSensorValue"), ("Sentry4-MIB", "st4HumidSensorStatus"), ("Sentry4-MIB", "st4EventStatusText"), ("Sentry4-MIB", "st4EventStatusCondition"))
if mibBuilder.loadTexts: st4HumidSensorEvent.setStatus('current')
if mibBuilder.loadTexts: st4HumidSensorEvent.setDescription('Humidity sensor event.')
st4WaterSensorStatusEvent = NotificationType((1, 3, 6, 1, 4, 1, 1718, 4, 100, 0, 22)).setObjects(("Sentry4-MIB", "st4SystemLocation"), ("Sentry4-MIB", "st4WaterSensorID"), ("Sentry4-MIB", "st4WaterSensorName"), ("Sentry4-MIB", "st4WaterSensorStatus"), ("Sentry4-MIB", "st4EventStatusText"), ("Sentry4-MIB", "st4EventStatusCondition"))
if mibBuilder.loadTexts: st4WaterSensorStatusEvent.setStatus('current')
if mibBuilder.loadTexts: st4WaterSensorStatusEvent.setDescription('Water sensor status event.')
st4CcSensorStatusEvent = NotificationType((1, 3, 6, 1, 4, 1, 1718, 4, 100, 0, 23)).setObjects(("Sentry4-MIB", "st4SystemLocation"), ("Sentry4-MIB", "st4CcSensorID"), ("Sentry4-MIB", "st4CcSensorName"), ("Sentry4-MIB", "st4CcSensorStatus"), ("Sentry4-MIB", "st4EventStatusText"), ("Sentry4-MIB", "st4EventStatusCondition"))
if mibBuilder.loadTexts: st4CcSensorStatusEvent.setStatus('current')
if mibBuilder.loadTexts: st4CcSensorStatusEvent.setDescription('Contact closure sensor status event.')
st4AdcSensorEvent = NotificationType((1, 3, 6, 1, 4, 1, 1718, 4, 100, 0, 24)).setObjects(("Sentry4-MIB", "st4SystemLocation"), ("Sentry4-MIB", "st4AdcSensorID"), ("Sentry4-MIB", "st4AdcSensorName"), ("Sentry4-MIB", "st4AdcSensorValue"), ("Sentry4-MIB", "st4AdcSensorStatus"), ("Sentry4-MIB", "st4EventStatusText"), ("Sentry4-MIB", "st4EventStatusCondition"))
if mibBuilder.loadTexts: st4AdcSensorEvent.setStatus('current')
if mibBuilder.loadTexts: st4AdcSensorEvent.setDescription('Analog-to-digital converter sensor event.')
st4FanSensorEvent = NotificationType((1, 3, 6, 1, 4, 1, 1718, 4, 100, 0, 25)).setObjects(("Sentry4-MIB", "st4SystemLocation"), ("Sentry4-MIB", "st4FanSensorID"), ("Sentry4-MIB", "st4FanSensorName"), ("Sentry4-MIB", "st4FanSensorValue"), ("Sentry4-MIB", "st4FanSensorStatus"), ("Sentry4-MIB", "st4EventStatusText"), ("Sentry4-MIB", "st4EventStatusCondition"))
if mibBuilder.loadTexts: st4FanSensorEvent.setStatus('current')
if mibBuilder.loadTexts: st4FanSensorEvent.setDescription('Fan sensor event.')
st4Conformance = MibIdentifier((1, 3, 6, 1, 4, 1, 1718, 4, 200))
st4Groups = MibIdentifier((1, 3, 6, 1, 4, 1, 1718, 4, 200, 1))
st4SystemObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1718, 4, 200, 1, 1)).setObjects(("Sentry4-MIB", "st4SystemProductName"), ("Sentry4-MIB", "st4SystemLocation"), ("Sentry4-MIB", "st4SystemFirmwareVersion"), ("Sentry4-MIB", "st4SystemFirmwareBuildInfo"), ("Sentry4-MIB", "st4SystemNICSerialNumber"), ("Sentry4-MIB", "st4SystemNICHardwareInfo"), ("Sentry4-MIB", "st4SystemProductSeries"), ("Sentry4-MIB", "st4SystemFeatures"), ("Sentry4-MIB", "st4SystemFeatureKey"), ("Sentry4-MIB", "st4SystemConfigModifiedCount"), ("Sentry4-MIB", "st4SystemUnitCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    st4SystemObjectsGroup = st4SystemObjectsGroup.setStatus('current')
if mibBuilder.loadTexts: st4SystemObjectsGroup.setDescription('System objects group.')
st4UnitObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1718, 4, 200, 1, 2)).setObjects(("Sentry4-MIB", "st4UnitID"), ("Sentry4-MIB", "st4UnitName"), ("Sentry4-MIB", "st4UnitProductSN"), ("Sentry4-MIB", "st4UnitModel"), ("Sentry4-MIB", "st4UnitAssetTag"), ("Sentry4-MIB", "st4UnitType"), ("Sentry4-MIB", "st4UnitCapabilities"), ("Sentry4-MIB", "st4UnitProductMfrDate"), ("Sentry4-MIB", "st4UnitDisplayOrientation"), ("Sentry4-MIB", "st4UnitOutletSequenceOrder"), ("Sentry4-MIB", "st4UnitOutletDisplayOrder"), ("Sentry4-MIB", "st4UnitInputCordCount"), ("Sentry4-MIB", "st4UnitTempSensorCount"), ("Sentry4-MIB", "st4UnitHumidSensorCount"), ("Sentry4-MIB", "st4UnitWaterSensorCount"), ("Sentry4-MIB", "st4UnitCcSensorCount"), ("Sentry4-MIB", "st4UnitAdcSensorCount"), ("Sentry4-MIB", "st4UnitFanSensorCount"), ("Sentry4-MIB", "st4UnitStatus"), ("Sentry4-MIB", "st4UnitNotifications"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    st4UnitObjectsGroup = st4UnitObjectsGroup.setStatus('current')
if mibBuilder.loadTexts: st4UnitObjectsGroup.setDescription('Unit objects group.')
st4InputCordObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1718, 4, 200, 1, 3)).setObjects(("Sentry4-MIB", "st4InputCordActivePowerHysteresis"), ("Sentry4-MIB", "st4InputCordApparentPowerHysteresis"), ("Sentry4-MIB", "st4InputCordPowerFactorHysteresis"), ("Sentry4-MIB", "st4InputCordOutOfBalanceHysteresis"), ("Sentry4-MIB", "st4InputCordID"), ("Sentry4-MIB", "st4InputCordName"), ("Sentry4-MIB", "st4InputCordInletType"), ("Sentry4-MIB", "st4InputCordNominalVoltage"), ("Sentry4-MIB", "st4InputCordNominalVoltageMin"), ("Sentry4-MIB", "st4InputCordNominalVoltageMax"), ("Sentry4-MIB", "st4InputCordCurrentCapacity"), ("Sentry4-MIB", "st4InputCordCurrentCapacityMax"), ("Sentry4-MIB", "st4InputCordPowerCapacity"), ("Sentry4-MIB", "st4InputCordNominalPowerFactor"), ("Sentry4-MIB", "st4InputCordLineCount"), ("Sentry4-MIB", "st4InputCordPhaseCount"), ("Sentry4-MIB", "st4InputCordOcpCount"), ("Sentry4-MIB", "st4InputCordBranchCount"), ("Sentry4-MIB", "st4InputCordOutletCount"), ("Sentry4-MIB", "st4InputCordState"), ("Sentry4-MIB", "st4InputCordStatus"), ("Sentry4-MIB", "st4InputCordActivePower"), ("Sentry4-MIB", "st4InputCordActivePowerStatus"), ("Sentry4-MIB", "st4InputCordApparentPower"), ("Sentry4-MIB", "st4InputCordApparentPowerStatus"), ("Sentry4-MIB", "st4InputCordPowerUtilized"), ("Sentry4-MIB", "st4InputCordPowerFactor"), ("Sentry4-MIB", "st4InputCordPowerFactorStatus"), ("Sentry4-MIB", "st4InputCordEnergy"), ("Sentry4-MIB", "st4InputCordFrequency"), ("Sentry4-MIB", "st4InputCordOutOfBalance"), ("Sentry4-MIB", "st4InputCordOutOfBalanceStatus"), ("Sentry4-MIB", "st4InputCordNotifications"), ("Sentry4-MIB", "st4InputCordActivePowerLowAlarm"), ("Sentry4-MIB", "st4InputCordActivePowerLowWarning"), ("Sentry4-MIB", "st4InputCordActivePowerHighWarning"), ("Sentry4-MIB", "st4InputCordActivePowerHighAlarm"), ("Sentry4-MIB", "st4InputCordApparentPowerLowAlarm"), ("Sentry4-MIB", "st4InputCordApparentPowerLowWarning"), ("Sentry4-MIB", "st4InputCordApparentPowerHighWarning"), ("Sentry4-MIB", "st4InputCordApparentPowerHighAlarm"), ("Sentry4-MIB", "st4InputCordPowerFactorLowAlarm"), ("Sentry4-MIB", "st4InputCordPowerFactorLowWarning"), ("Sentry4-MIB", "st4InputCordOutOfBalanceHighWarning"), ("Sentry4-MIB", "st4InputCordOutOfBalanceHighAlarm"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    st4InputCordObjectsGroup = st4InputCordObjectsGroup.setStatus('current')
if mibBuilder.loadTexts: st4InputCordObjectsGroup.setDescription('Input cord objects group.')
st4LineObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1718, 4, 200, 1, 4)).setObjects(("Sentry4-MIB", "st4LineCurrentHysteresis"), ("Sentry4-MIB", "st4LineID"), ("Sentry4-MIB", "st4LineLabel"), ("Sentry4-MIB", "st4LineCurrentCapacity"), ("Sentry4-MIB", "st4LineState"), ("Sentry4-MIB", "st4LineStatus"), ("Sentry4-MIB", "st4LineCurrent"), ("Sentry4-MIB", "st4LineCurrentStatus"), ("Sentry4-MIB", "st4LineCurrentUtilized"), ("Sentry4-MIB", "st4LineNotifications"), ("Sentry4-MIB", "st4LineCurrentLowAlarm"), ("Sentry4-MIB", "st4LineCurrentLowWarning"), ("Sentry4-MIB", "st4LineCurrentHighWarning"), ("Sentry4-MIB", "st4LineCurrentHighAlarm"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    st4LineObjectsGroup = st4LineObjectsGroup.setStatus('current')
if mibBuilder.loadTexts: st4LineObjectsGroup.setDescription('Line objects group.')
st4PhaseObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1718, 4, 200, 1, 5)).setObjects(("Sentry4-MIB", "st4PhaseVoltageHysteresis"), ("Sentry4-MIB", "st4PhasePowerFactorHysteresis"), ("Sentry4-MIB", "st4PhaseID"), ("Sentry4-MIB", "st4PhaseLabel"), ("Sentry4-MIB", "st4PhaseNominalVoltage"), ("Sentry4-MIB", "st4PhaseBranchCount"), ("Sentry4-MIB", "st4PhaseOutletCount"), ("Sentry4-MIB", "st4PhaseState"), ("Sentry4-MIB", "st4PhaseStatus"), ("Sentry4-MIB", "st4PhaseVoltage"), ("Sentry4-MIB", "st4PhaseVoltageStatus"), ("Sentry4-MIB", "st4PhaseVoltageDeviation"), ("Sentry4-MIB", "st4PhaseCurrent"), ("Sentry4-MIB", "st4PhaseCurrentCrestFactor"), ("Sentry4-MIB", "st4PhaseActivePower"), ("Sentry4-MIB", "st4PhaseApparentPower"), ("Sentry4-MIB", "st4PhasePowerFactor"), ("Sentry4-MIB", "st4PhasePowerFactorStatus"), ("Sentry4-MIB", "st4PhaseReactance"), ("Sentry4-MIB", "st4PhaseEnergy"), ("Sentry4-MIB", "st4PhaseNotifications"), ("Sentry4-MIB", "st4PhaseVoltageLowAlarm"), ("Sentry4-MIB", "st4PhaseVoltageLowWarning"), ("Sentry4-MIB", "st4PhaseVoltageHighWarning"), ("Sentry4-MIB", "st4PhaseVoltageHighAlarm"), ("Sentry4-MIB", "st4PhasePowerFactorLowAlarm"), ("Sentry4-MIB", "st4PhasePowerFactorLowWarning"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    st4PhaseObjectsGroup = st4PhaseObjectsGroup.setStatus('current')
if mibBuilder.loadTexts: st4PhaseObjectsGroup.setDescription('Phase objects group.')
st4OcpObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1718, 4, 200, 1, 6)).setObjects(("Sentry4-MIB", "st4OcpID"), ("Sentry4-MIB", "st4OcpLabel"), ("Sentry4-MIB", "st4OcpType"), ("Sentry4-MIB", "st4OcpCurrentCapacity"), ("Sentry4-MIB", "st4OcpCurrentCapacityMax"), ("Sentry4-MIB", "st4OcpBranchCount"), ("Sentry4-MIB", "st4OcpOutletCount"), ("Sentry4-MIB", "st4OcpStatus"), ("Sentry4-MIB", "st4OcpNotifications"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    st4OcpObjectsGroup = st4OcpObjectsGroup.setStatus('current')
if mibBuilder.loadTexts: st4OcpObjectsGroup.setDescription('Over-current protector objects group.')
st4BranchObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1718, 4, 200, 1, 7)).setObjects(("Sentry4-MIB", "st4BranchCurrentHysteresis"), ("Sentry4-MIB", "st4BranchID"), ("Sentry4-MIB", "st4BranchLabel"), ("Sentry4-MIB", "st4BranchCurrentCapacity"), ("Sentry4-MIB", "st4BranchPhaseID"), ("Sentry4-MIB", "st4BranchOcpID"), ("Sentry4-MIB", "st4BranchOutletCount"), ("Sentry4-MIB", "st4BranchState"), ("Sentry4-MIB", "st4BranchStatus"), ("Sentry4-MIB", "st4BranchCurrent"), ("Sentry4-MIB", "st4BranchCurrentStatus"), ("Sentry4-MIB", "st4BranchCurrentUtilized"), ("Sentry4-MIB", "st4BranchNotifications"), ("Sentry4-MIB", "st4BranchCurrentLowAlarm"), ("Sentry4-MIB", "st4BranchCurrentLowWarning"), ("Sentry4-MIB", "st4BranchCurrentHighWarning"), ("Sentry4-MIB", "st4BranchCurrentHighAlarm"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    st4BranchObjectsGroup = st4BranchObjectsGroup.setStatus('current')
if mibBuilder.loadTexts: st4BranchObjectsGroup.setDescription('Branch objects group.')
st4OutletObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1718, 4, 200, 1, 8)).setObjects(("Sentry4-MIB", "st4OutletCurrentHysteresis"), ("Sentry4-MIB", "st4OutletActivePowerHysteresis"), ("Sentry4-MIB", "st4OutletPowerFactorHysteresis"), ("Sentry4-MIB", "st4OutletSequenceInterval"), ("Sentry4-MIB", "st4OutletRebootDelay"), ("Sentry4-MIB", "st4OutletStateChangeLogging"), ("Sentry4-MIB", "st4OutletID"), ("Sentry4-MIB", "st4OutletName"), ("Sentry4-MIB", "st4OutletCapabilities"), ("Sentry4-MIB", "st4OutletSocketType"), ("Sentry4-MIB", "st4OutletCurrentCapacity"), ("Sentry4-MIB", "st4OutletPowerCapacity"), ("Sentry4-MIB", "st4OutletWakeupState"), ("Sentry4-MIB", "st4OutletPostOnDelay"), ("Sentry4-MIB", "st4OutletPhaseID"), ("Sentry4-MIB", "st4OutletOcpID"), ("Sentry4-MIB", "st4OutletBranchID"), ("Sentry4-MIB", "st4OutletState"), ("Sentry4-MIB", "st4OutletStatus"), ("Sentry4-MIB", "st4OutletCurrent"), ("Sentry4-MIB", "st4OutletCurrentStatus"), ("Sentry4-MIB", "st4OutletCurrentUtilized"), ("Sentry4-MIB", "st4OutletVoltage"), ("Sentry4-MIB", "st4OutletActivePower"), ("Sentry4-MIB", "st4OutletActivePowerStatus"), ("Sentry4-MIB", "st4OutletApparentPower"), ("Sentry4-MIB", "st4OutletPowerFactor"), ("Sentry4-MIB", "st4OutletPowerFactorStatus"), ("Sentry4-MIB", "st4OutletCurrentCrestFactor"), ("Sentry4-MIB", "st4OutletReactance"), ("Sentry4-MIB", "st4OutletEnergy"), ("Sentry4-MIB", "st4OutletNotifications"), ("Sentry4-MIB", "st4OutletCurrentLowAlarm"), ("Sentry4-MIB", "st4OutletCurrentLowWarning"), ("Sentry4-MIB", "st4OutletCurrentHighWarning"), ("Sentry4-MIB", "st4OutletCurrentHighAlarm"), ("Sentry4-MIB", "st4OutletActivePowerLowAlarm"), ("Sentry4-MIB", "st4OutletActivePowerLowWarning"), ("Sentry4-MIB", "st4OutletActivePowerHighWarning"), ("Sentry4-MIB", "st4OutletActivePowerHighAlarm"), ("Sentry4-MIB", "st4OutletPowerFactorLowAlarm"), ("Sentry4-MIB", "st4OutletPowerFactorLowWarning"), ("Sentry4-MIB", "st4OutletControlState"), ("Sentry4-MIB", "st4OutletControlAction"), ("Sentry4-MIB", "st4OutletQueueControl"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    st4OutletObjectsGroup = st4OutletObjectsGroup.setStatus('current')
if mibBuilder.loadTexts: st4OutletObjectsGroup.setDescription('Outlet objects group.')
st4TempSensorObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1718, 4, 200, 1, 9)).setObjects(("Sentry4-MIB", "st4TempSensorHysteresis"), ("Sentry4-MIB", "st4TempSensorScale"), ("Sentry4-MIB", "st4TempSensorID"), ("Sentry4-MIB", "st4TempSensorName"), ("Sentry4-MIB", "st4TempSensorValueMin"), ("Sentry4-MIB", "st4TempSensorValueMax"), ("Sentry4-MIB", "st4TempSensorValue"), ("Sentry4-MIB", "st4TempSensorStatus"), ("Sentry4-MIB", "st4TempSensorNotifications"), ("Sentry4-MIB", "st4TempSensorLowAlarm"), ("Sentry4-MIB", "st4TempSensorLowWarning"), ("Sentry4-MIB", "st4TempSensorHighWarning"), ("Sentry4-MIB", "st4TempSensorHighAlarm"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    st4TempSensorObjectsGroup = st4TempSensorObjectsGroup.setStatus('current')
if mibBuilder.loadTexts: st4TempSensorObjectsGroup.setDescription('Temperature sensor objects group.')
st4HumidSensorObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1718, 4, 200, 1, 10)).setObjects(("Sentry4-MIB", "st4HumidSensorHysteresis"), ("Sentry4-MIB", "st4HumidSensorID"), ("Sentry4-MIB", "st4HumidSensorName"), ("Sentry4-MIB", "st4HumidSensorValue"), ("Sentry4-MIB", "st4HumidSensorStatus"), ("Sentry4-MIB", "st4HumidSensorNotifications"), ("Sentry4-MIB", "st4HumidSensorLowAlarm"), ("Sentry4-MIB", "st4HumidSensorLowWarning"), ("Sentry4-MIB", "st4HumidSensorHighWarning"), ("Sentry4-MIB", "st4HumidSensorHighAlarm"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    st4HumidSensorObjectsGroup = st4HumidSensorObjectsGroup.setStatus('current')
if mibBuilder.loadTexts: st4HumidSensorObjectsGroup.setDescription('Humidity sensor objects group.')
st4WaterSensorObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1718, 4, 200, 1, 11)).setObjects(("Sentry4-MIB", "st4WaterSensorID"), ("Sentry4-MIB", "st4WaterSensorName"), ("Sentry4-MIB", "st4WaterSensorStatus"), ("Sentry4-MIB", "st4WaterSensorNotifications"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    st4WaterSensorObjectsGroup = st4WaterSensorObjectsGroup.setStatus('current')
if mibBuilder.loadTexts: st4WaterSensorObjectsGroup.setDescription('Water sensor objects group.')
st4CcSensorObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1718, 4, 200, 1, 12)).setObjects(("Sentry4-MIB", "st4CcSensorID"), ("Sentry4-MIB", "st4CcSensorName"), ("Sentry4-MIB", "st4CcSensorStatus"), ("Sentry4-MIB", "st4CcSensorNotifications"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    st4CcSensorObjectsGroup = st4CcSensorObjectsGroup.setStatus('current')
if mibBuilder.loadTexts: st4CcSensorObjectsGroup.setDescription('Contact closure sensor objects group.')
st4AdcSensorObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1718, 4, 200, 1, 13)).setObjects(("Sentry4-MIB", "st4AdcSensorHysteresis"), ("Sentry4-MIB", "st4AdcSensorID"), ("Sentry4-MIB", "st4AdcSensorName"), ("Sentry4-MIB", "st4AdcSensorValue"), ("Sentry4-MIB", "st4AdcSensorStatus"), ("Sentry4-MIB", "st4AdcSensorNotifications"), ("Sentry4-MIB", "st4AdcSensorLowAlarm"), ("Sentry4-MIB", "st4AdcSensorLowWarning"), ("Sentry4-MIB", "st4AdcSensorHighWarning"), ("Sentry4-MIB", "st4AdcSensorHighAlarm"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    st4AdcSensorObjectsGroup = st4AdcSensorObjectsGroup.setStatus('current')
if mibBuilder.loadTexts: st4AdcSensorObjectsGroup.setDescription('Analog-to-digital converter sensor objects group.')
st4FanSensorObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1718, 4, 200, 1, 14)).setObjects(("Sentry4-MIB", "st4FanSensorHysteresis"), ("Sentry4-MIB", "st4FanSensorID"), ("Sentry4-MIB", "st4FanSensorName"), ("Sentry4-MIB", "st4FanSensorValue"), ("Sentry4-MIB", "st4FanSensorStatus"), ("Sentry4-MIB", "st4FanSensorNotifications"), ("Sentry4-MIB", "st4FanSensorLowAlarm"), ("Sentry4-MIB", "st4FanSensorLowWarning"), ("Sentry4-MIB", "st4FanSensorHighWarning"), ("Sentry4-MIB", "st4FanSensorHighAlarm"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    st4FanSensorObjectsGroup = st4FanSensorObjectsGroup.setStatus('current')
if mibBuilder.loadTexts: st4FanSensorObjectsGroup.setDescription('Fan sensor objects group.')
st4EventInfoObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1718, 4, 200, 1, 99)).setObjects(("Sentry4-MIB", "st4EventStatusText"), ("Sentry4-MIB", "st4EventStatusCondition"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    st4EventInfoObjectsGroup = st4EventInfoObjectsGroup.setStatus('current')
if mibBuilder.loadTexts: st4EventInfoObjectsGroup.setDescription('Event information objects group.')
st4EventNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 1718, 4, 200, 1, 100)).setObjects(("Sentry4-MIB", "st4UnitStatusEvent"), ("Sentry4-MIB", "st4InputCordStatusEvent"), ("Sentry4-MIB", "st4InputCordActivePowerEvent"), ("Sentry4-MIB", "st4InputCordApparentPowerEvent"), ("Sentry4-MIB", "st4InputCordPowerFactorEvent"), ("Sentry4-MIB", "st4InputCordOutOfBalanceEvent"), ("Sentry4-MIB", "st4LineStatusEvent"), ("Sentry4-MIB", "st4LineCurrentEvent"), ("Sentry4-MIB", "st4PhaseStatusEvent"), ("Sentry4-MIB", "st4PhaseVoltageEvent"), ("Sentry4-MIB", "st4PhasePowerFactorEvent"), ("Sentry4-MIB", "st4OcpStatusEvent"), ("Sentry4-MIB", "st4BranchStatusEvent"), ("Sentry4-MIB", "st4BranchCurrentEvent"), ("Sentry4-MIB", "st4OutletStatusEvent"), ("Sentry4-MIB", "st4OutletStateChangeEvent"), ("Sentry4-MIB", "st4OutletCurrentEvent"), ("Sentry4-MIB", "st4OutletActivePowerEvent"), ("Sentry4-MIB", "st4OutletPowerFactorEvent"), ("Sentry4-MIB", "st4TempSensorEvent"), ("Sentry4-MIB", "st4HumidSensorEvent"), ("Sentry4-MIB", "st4WaterSensorStatusEvent"), ("Sentry4-MIB", "st4CcSensorStatusEvent"), ("Sentry4-MIB", "st4AdcSensorEvent"), ("Sentry4-MIB", "st4FanSensorEvent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    st4EventNotificationsGroup = st4EventNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: st4EventNotificationsGroup.setDescription('Event notifications group.')
st4Compliances = MibIdentifier((1, 3, 6, 1, 4, 1, 1718, 4, 200, 2))
st4ModuleCompliances = ModuleCompliance((1, 3, 6, 1, 4, 1, 1718, 4, 200, 2, 1)).setObjects(("Sentry4-MIB", "st4SystemObjectsGroup"), ("Sentry4-MIB", "st4UnitObjectsGroup"), ("Sentry4-MIB", "st4InputCordObjectsGroup"), ("Sentry4-MIB", "st4LineObjectsGroup"), ("Sentry4-MIB", "st4PhaseObjectsGroup"), ("Sentry4-MIB", "st4OcpObjectsGroup"), ("Sentry4-MIB", "st4BranchObjectsGroup"), ("Sentry4-MIB", "st4OutletObjectsGroup"), ("Sentry4-MIB", "st4TempSensorObjectsGroup"), ("Sentry4-MIB", "st4HumidSensorObjectsGroup"), ("Sentry4-MIB", "st4WaterSensorObjectsGroup"), ("Sentry4-MIB", "st4CcSensorObjectsGroup"), ("Sentry4-MIB", "st4AdcSensorObjectsGroup"), ("Sentry4-MIB", "st4FanSensorObjectsGroup"), ("Sentry4-MIB", "st4EventInfoObjectsGroup"), ("Sentry4-MIB", "st4EventNotificationsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    st4ModuleCompliances = st4ModuleCompliances.setStatus('current')
if mibBuilder.loadTexts: st4ModuleCompliances.setDescription('The requirements for conformance to the Sentry4-MIB.')
mibBuilder.exportSymbols("Sentry4-MIB", st4OutletName=st4OutletName, st4OutletQueueControl=st4OutletQueueControl, st4OutletActivePowerHighAlarm=st4OutletActivePowerHighAlarm, st4OutletStateChangeLogging=st4OutletStateChangeLogging, st4OutletRebootDelay=st4OutletRebootDelay, st4CcSensorEventConfigEntry=st4CcSensorEventConfigEntry, st4OutletCurrentCrestFactor=st4OutletCurrentCrestFactor, st4HumidSensorObjectsGroup=st4HumidSensorObjectsGroup, st4BranchCurrentHysteresis=st4BranchCurrentHysteresis, st4CcSensorName=st4CcSensorName, st4InputCordEventConfigEntry=st4InputCordEventConfigEntry, st4OutletWakeupState=st4OutletWakeupState, st4SystemConfig=st4SystemConfig, st4UnitEventConfigEntry=st4UnitEventConfigEntry, st4InputCordFrequency=st4InputCordFrequency, st4PhaseConfigTable=st4PhaseConfigTable, st4OutletMonitorEntry=st4OutletMonitorEntry, st4TempSensorObjectsGroup=st4TempSensorObjectsGroup, st4BranchIndex=st4BranchIndex, st4LineCurrentUtilized=st4LineCurrentUtilized, st4LineCurrentLowWarning=st4LineCurrentLowWarning, st4BranchState=st4BranchState, st4InputCordOutOfBalanceHighWarning=st4InputCordOutOfBalanceHighWarning, st4TempSensorNotifications=st4TempSensorNotifications, st4OutletPhaseID=st4OutletPhaseID, st4HumidSensorValue=st4HumidSensorValue, st4OutletPostOnDelay=st4OutletPostOnDelay, st4OutletControlEntry=st4OutletControlEntry, st4InputCordApparentPowerEvent=st4InputCordApparentPowerEvent, st4BranchPhaseID=st4BranchPhaseID, st4InputCordEnergy=st4InputCordEnergy, st4WaterSensorEventConfigEntry=st4WaterSensorEventConfigEntry, st4InputCordActivePowerLowWarning=st4InputCordActivePowerLowWarning, st4InputCordOutletCount=st4InputCordOutletCount, st4InputCordApparentPowerHysteresis=st4InputCordApparentPowerHysteresis, st4ModuleCompliances=st4ModuleCompliances, st4InputCordPowerFactorLowAlarm=st4InputCordPowerFactorLowAlarm, st4BranchEventConfigTable=st4BranchEventConfigTable, st4EventInformation=st4EventInformation, st4OutletEnergy=st4OutletEnergy, st4OutletConfigTable=st4OutletConfigTable, st4HumidSensorIndex=st4HumidSensorIndex, st4AdcSensorNotifications=st4AdcSensorNotifications, st4FanSensorLowWarning=st4FanSensorLowWarning, st4BranchMonitorTable=st4BranchMonitorTable, st4OutletActivePowerLowAlarm=st4OutletActivePowerLowAlarm, st4InputCordActivePowerEvent=st4InputCordActivePowerEvent, st4PhaseNominalVoltage=st4PhaseNominalVoltage, st4FanSensorEventConfigEntry=st4FanSensorEventConfigEntry, st4LineLabel=st4LineLabel, st4BranchConfigEntry=st4BranchConfigEntry, st4Conformance=st4Conformance, st4BranchCurrentUtilized=st4BranchCurrentUtilized, st4OutletState=st4OutletState, st4InputCordNominalPowerFactor=st4InputCordNominalPowerFactor, st4OutletPowerCapacity=st4OutletPowerCapacity, st4OutletVoltage=st4OutletVoltage, st4InputCordIndex=st4InputCordIndex, st4TempSensorMonitorTable=st4TempSensorMonitorTable, st4WaterSensorCommonConfig=st4WaterSensorCommonConfig, st4PhaseStatusEvent=st4PhaseStatusEvent, st4OutletCurrentEvent=st4OutletCurrentEvent, st4InputCordCommonConfig=st4InputCordCommonConfig, st4UnitObjectsGroup=st4UnitObjectsGroup, st4InputCords=st4InputCords, st4InputCordApparentPowerLowAlarm=st4InputCordApparentPowerLowAlarm, st4FanSensorCommonConfig=st4FanSensorCommonConfig, st4PhaseID=st4PhaseID, st4UnitCapabilities=st4UnitCapabilities, st4Notifications=st4Notifications, st4InputCordActivePowerHysteresis=st4InputCordActivePowerHysteresis, st4PhasePowerFactorLowWarning=st4PhasePowerFactorLowWarning, st4AdcSensorConfigTable=st4AdcSensorConfigTable, st4OcpCurrentCapacity=st4OcpCurrentCapacity, st4PhaseVoltageHysteresis=st4PhaseVoltageHysteresis, st4BranchMonitorEntry=st4BranchMonitorEntry, st4AdcSensorMonitorTable=st4AdcSensorMonitorTable, st4UnitOutletSequenceOrder=st4UnitOutletSequenceOrder, st4BranchCurrentCapacity=st4BranchCurrentCapacity, st4HumidSensorID=st4HumidSensorID, st4TempSensorCommonConfig=st4TempSensorCommonConfig, st4HumidSensorLowWarning=st4HumidSensorLowWarning, st4HumidSensorHighAlarm=st4HumidSensorHighAlarm, st4WaterSensorIndex=st4WaterSensorIndex, st4PhaseVoltage=st4PhaseVoltage, st4OutletCurrentLowWarning=st4OutletCurrentLowWarning, st4BranchEventConfigEntry=st4BranchEventConfigEntry, st4HumidSensorName=st4HumidSensorName, st4WaterSensorMonitorTable=st4WaterSensorMonitorTable, st4PhaseConfigEntry=st4PhaseConfigEntry, st4FanSensorID=st4FanSensorID, st4InputCordPowerFactorStatus=st4InputCordPowerFactorStatus, st4InputCordLineCount=st4InputCordLineCount, st4OutletActivePower=st4OutletActivePower, st4BranchCurrentStatus=st4BranchCurrentStatus, st4SystemObjectsGroup=st4SystemObjectsGroup, st4OutletBranchID=st4OutletBranchID, st4InputCordState=st4InputCordState, st4PhaseActivePower=st4PhaseActivePower, st4PhaseLabel=st4PhaseLabel, st4OcpMonitorTable=st4OcpMonitorTable, st4AdcSensorLowWarning=st4AdcSensorLowWarning, st4OcpBranchCount=st4OcpBranchCount, st4CcSensorConfigEntry=st4CcSensorConfigEntry, st4SystemFirmwareBuildInfo=st4SystemFirmwareBuildInfo, st4AdcSensorCommonConfig=st4AdcSensorCommonConfig, st4System=st4System, st4InputCordBranchCount=st4InputCordBranchCount, st4AdcSensorHighWarning=st4AdcSensorHighWarning, st4InputCordNominalVoltageMin=st4InputCordNominalVoltageMin, st4HumidSensorEventConfigTable=st4HumidSensorEventConfigTable, st4OcpOutletCount=st4OcpOutletCount, st4OutletMonitorTable=st4OutletMonitorTable, st4CcSensorObjectsGroup=st4CcSensorObjectsGroup, st4InputCordConfigEntry=st4InputCordConfigEntry, st4Lines=st4Lines, st4AdcSensorEventConfigEntry=st4AdcSensorEventConfigEntry, st4OcpIndex=st4OcpIndex, st4BranchCurrentHighAlarm=st4BranchCurrentHighAlarm, st4FanSensorIndex=st4FanSensorIndex, st4HumidSensorHysteresis=st4HumidSensorHysteresis, st4AdcSensorID=st4AdcSensorID, st4BranchObjectsGroup=st4BranchObjectsGroup, st4FanSensorLowAlarm=st4FanSensorLowAlarm, st4InputCordInletType=st4InputCordInletType, st4SystemProductName=st4SystemProductName, st4SystemLocation=st4SystemLocation, st4OutletEventConfigEntry=st4OutletEventConfigEntry, st4CcSensorID=st4CcSensorID, st4LineObjectsGroup=st4LineObjectsGroup, st4FanSensorObjectsGroup=st4FanSensorObjectsGroup, st4PhaseMonitorTable=st4PhaseMonitorTable, st4PhaseVoltageDeviation=st4PhaseVoltageDeviation, st4TempSensorHysteresis=st4TempSensorHysteresis, PYSNMP_MODULE_ID=sentry4, st4PhaseObjectsGroup=st4PhaseObjectsGroup, st4WaterSensorObjectsGroup=st4WaterSensorObjectsGroup, st4AnalogToDigitalConvSensors=st4AnalogToDigitalConvSensors, st4TempSensorLowWarning=st4TempSensorLowWarning, st4AdcSensorHysteresis=st4AdcSensorHysteresis, st4Units=st4Units, st4TempSensorEventConfigEntry=st4TempSensorEventConfigEntry, st4InputCordPowerFactor=st4InputCordPowerFactor, st4HumidSensorMonitorTable=st4HumidSensorMonitorTable, st4LineCurrentHysteresis=st4LineCurrentHysteresis, st4LineMonitorEntry=st4LineMonitorEntry, st4InputCordCurrentCapacity=st4InputCordCurrentCapacity, st4OutletStateChangeEvent=st4OutletStateChangeEvent, st4OutletActivePowerLowWarning=st4OutletActivePowerLowWarning, st4OutletReactance=st4OutletReactance, st4SystemUnitCount=st4SystemUnitCount, st4PhaseCommonConfig=st4PhaseCommonConfig, st4OutletCurrentLowAlarm=st4OutletCurrentLowAlarm, st4OutletPowerFactorLowWarning=st4OutletPowerFactorLowWarning, st4UnitCcSensorCount=st4UnitCcSensorCount, EventNotificationMethods=EventNotificationMethods, st4LineEventConfigTable=st4LineEventConfigTable, st4UnitCommonConfig=st4UnitCommonConfig, st4BranchStatusEvent=st4BranchStatusEvent, st4PhaseNotifications=st4PhaseNotifications, st4OutletPowerFactorStatus=st4OutletPowerFactorStatus, st4FanSensors=st4FanSensors, st4InputCordConfigTable=st4InputCordConfigTable, st4PhasePowerFactorEvent=st4PhasePowerFactorEvent, st4OutletActivePowerEvent=st4OutletActivePowerEvent, st4InputCordApparentPowerLowWarning=st4InputCordApparentPowerLowWarning, st4OutletSocketType=st4OutletSocketType, st4HumidSensorHighWarning=st4HumidSensorHighWarning, st4OcpConfigEntry=st4OcpConfigEntry, st4UnitNotifications=st4UnitNotifications, st4OutletEventConfigTable=st4OutletEventConfigTable, st4AdcSensorConfigEntry=st4AdcSensorConfigEntry, st4OcpNotifications=st4OcpNotifications, st4UnitMonitorTable=st4UnitMonitorTable, st4OutletCapabilities=st4OutletCapabilities, st4BranchCurrentEvent=st4BranchCurrentEvent, st4PhaseBranchCount=st4PhaseBranchCount, st4AdcSensorObjectsGroup=st4AdcSensorObjectsGroup, st4OcpStatusEvent=st4OcpStatusEvent, st4AdcSensorIndex=st4AdcSensorIndex, st4InputCordPowerFactorLowWarning=st4InputCordPowerFactorLowWarning, st4AdcSensorMonitorEntry=st4AdcSensorMonitorEntry, st4HumidSensorConfigTable=st4HumidSensorConfigTable, st4LineConfigEntry=st4LineConfigEntry, st4SystemFeatureKey=st4SystemFeatureKey, st4OcpObjectsGroup=st4OcpObjectsGroup, st4ContactClosureSensors=st4ContactClosureSensors, st4PhaseVoltageHighWarning=st4PhaseVoltageHighWarning, st4OutletCurrentUtilized=st4OutletCurrentUtilized, st4UnitConfigTable=st4UnitConfigTable, st4OutletNotifications=st4OutletNotifications, st4PhaseVoltageEvent=st4PhaseVoltageEvent, st4BranchStatus=st4BranchStatus, st4InputCordMonitorTable=st4InputCordMonitorTable, st4InputCordOutOfBalanceStatus=st4InputCordOutOfBalanceStatus, st4OutletCurrentHysteresis=st4OutletCurrentHysteresis, st4LineCurrentHighAlarm=st4LineCurrentHighAlarm, st4OcpConfigTable=st4OcpConfigTable, st4FanSensorName=st4FanSensorName, st4PhasePowerFactor=st4PhasePowerFactor, st4UnitIndex=st4UnitIndex, st4PhaseMonitorEntry=st4PhaseMonitorEntry, st4TempSensorStatus=st4TempSensorStatus, st4WaterSensorStatusEvent=st4WaterSensorStatusEvent, st4BranchCurrentLowWarning=st4BranchCurrentLowWarning, st4LineCurrentEvent=st4LineCurrentEvent, st4FanSensorHighWarning=st4FanSensorHighWarning, st4InputCordApparentPowerHighWarning=st4InputCordApparentPowerHighWarning, st4OcpEventConfigTable=st4OcpEventConfigTable, st4OutletStatusEvent=st4OutletStatusEvent, st4LineID=st4LineID, st4OutletStatus=st4OutletStatus, st4OutletCurrentCapacity=st4OutletCurrentCapacity, st4InputCordApparentPower=st4InputCordApparentPower, st4InputCordPowerUtilized=st4InputCordPowerUtilized, st4OcpMonitorEntry=st4OcpMonitorEntry, st4OutletActivePowerHighWarning=st4OutletActivePowerHighWarning, st4OutletControlAction=st4OutletControlAction, st4PhaseEventConfigTable=st4PhaseEventConfigTable, st4InputCordName=st4InputCordName, st4LineCurrentHighWarning=st4LineCurrentHighWarning, st4OcpLabel=st4OcpLabel, st4CcSensorStatusEvent=st4CcSensorStatusEvent, st4UnitProductMfrDate=st4UnitProductMfrDate, st4BranchCommonConfig=st4BranchCommonConfig, st4TempSensorLowAlarm=st4TempSensorLowAlarm, st4TempSensorValue=st4TempSensorValue, st4WaterSensors=st4WaterSensors, st4PhaseVoltageStatus=st4PhaseVoltageStatus, st4OutletObjectsGroup=st4OutletObjectsGroup, st4UnitWaterSensorCount=st4UnitWaterSensorCount, st4LineCurrentStatus=st4LineCurrentStatus, st4LineEventConfigEntry=st4LineEventConfigEntry, st4BranchCurrentLowAlarm=st4BranchCurrentLowAlarm, st4LineMonitorTable=st4LineMonitorTable, st4InputCordNominalVoltage=st4InputCordNominalVoltage, st4FanSensorConfigEntry=st4FanSensorConfigEntry, st4InputCordPowerFactorEvent=st4InputCordPowerFactorEvent, st4InputCordActivePowerLowAlarm=st4InputCordActivePowerLowAlarm, st4TempSensorName=st4TempSensorName, st4HumidSensorConfigEntry=st4HumidSensorConfigEntry, st4InputCordOutOfBalanceHysteresis=st4InputCordOutOfBalanceHysteresis, st4InputCordActivePower=st4InputCordActivePower, st4InputCordActivePowerStatus=st4InputCordActivePowerStatus, st4UnitInputCordCount=st4UnitInputCordCount, st4EventInfoObjectsGroup=st4EventInfoObjectsGroup, st4Outlets=st4Outlets, st4BranchCurrent=st4BranchCurrent, st4AdcSensorName=st4AdcSensorName, st4InputCordCurrentCapacityMax=st4InputCordCurrentCapacityMax, st4OcpCurrentCapacityMax=st4OcpCurrentCapacityMax, st4OutletCommonControl=st4OutletCommonControl, st4WaterSensorEventConfigTable=st4WaterSensorEventConfigTable, st4UnitID=st4UnitID)
mibBuilder.exportSymbols("Sentry4-MIB", st4OcpStatus=st4OcpStatus, st4InputCordID=st4InputCordID, st4OutletOcpID=st4OutletOcpID, st4TempSensorHighAlarm=st4TempSensorHighAlarm, st4LineStatus=st4LineStatus, st4PhaseIndex=st4PhaseIndex, st4PhaseCurrent=st4PhaseCurrent, st4InputCordOutOfBalanceEvent=st4InputCordOutOfBalanceEvent, st4FanSensorStatus=st4FanSensorStatus, st4FanSensorEventConfigTable=st4FanSensorEventConfigTable, st4Groups=st4Groups, st4HumidSensorCommonConfig=st4HumidSensorCommonConfig, st4UnitStatusEvent=st4UnitStatusEvent, st4InputCordObjectsGroup=st4InputCordObjectsGroup, st4FanSensorMonitorTable=st4FanSensorMonitorTable, st4OcpID=st4OcpID, st4TempSensorValueMax=st4TempSensorValueMax, st4TempSensorEventConfigTable=st4TempSensorEventConfigTable, st4InputCordActivePowerHighAlarm=st4InputCordActivePowerHighAlarm, st4UnitEventConfigTable=st4UnitEventConfigTable, st4WaterSensorID=st4WaterSensorID, st4WaterSensorNotifications=st4WaterSensorNotifications, st4InputCordOutOfBalance=st4InputCordOutOfBalance, st4TempSensorValueMin=st4TempSensorValueMin, st4BranchNotifications=st4BranchNotifications, st4UnitTempSensorCount=st4UnitTempSensorCount, st4PhaseReactance=st4PhaseReactance, st4PhasePowerFactorLowAlarm=st4PhasePowerFactorLowAlarm, st4FanSensorHysteresis=st4FanSensorHysteresis, st4UnitName=st4UnitName, st4PhaseVoltageHighAlarm=st4PhaseVoltageHighAlarm, st4OutletPowerFactor=st4OutletPowerFactor, st4BranchCurrentHighWarning=st4BranchCurrentHighWarning, st4UnitConfigEntry=st4UnitConfigEntry, st4Phases=st4Phases, st4EventStatusText=st4EventStatusText, st4InputCordOutOfBalanceHighAlarm=st4InputCordOutOfBalanceHighAlarm, st4HumidSensorEvent=st4HumidSensorEvent, st4InputCordNotifications=st4InputCordNotifications, st4UnitFanSensorCount=st4UnitFanSensorCount, st4LineState=st4LineState, st4OutletConfigEntry=st4OutletConfigEntry, st4OcpType=st4OcpType, st4PhaseEnergy=st4PhaseEnergy, st4TempSensorConfigEntry=st4TempSensorConfigEntry, st4OutletCurrent=st4OutletCurrent, st4UnitProductSN=st4UnitProductSN, st4BranchOcpID=st4BranchOcpID, st4UnitStatus=st4UnitStatus, st4PhaseState=st4PhaseState, st4TempSensorConfigTable=st4TempSensorConfigTable, st4SystemProductSeries=st4SystemProductSeries, st4CcSensorStatus=st4CcSensorStatus, st4OutletCommonConfig=st4OutletCommonConfig, st4InputCordNominalVoltageMax=st4InputCordNominalVoltageMax, st4TempSensorScale=st4TempSensorScale, st4HumidSensorStatus=st4HumidSensorStatus, st4HumiditySensors=st4HumiditySensors, st4HumidSensorNotifications=st4HumidSensorNotifications, st4InputCordOcpCount=st4InputCordOcpCount, st4InputCordApparentPowerStatus=st4InputCordApparentPowerStatus, st4AdcSensorHighAlarm=st4AdcSensorHighAlarm, st4InputCordStatus=st4InputCordStatus, st4OcpCommonConfig=st4OcpCommonConfig, st4WaterSensorStatus=st4WaterSensorStatus, st4CcSensorMonitorEntry=st4CcSensorMonitorEntry, st4CcSensorEventConfigTable=st4CcSensorEventConfigTable, st4FanSensorMonitorEntry=st4FanSensorMonitorEntry, st4OutletSequenceInterval=st4OutletSequenceInterval, st4InputCordEventConfigTable=st4InputCordEventConfigTable, st4InputCordStatusEvent=st4InputCordStatusEvent, st4InputCordPhaseCount=st4InputCordPhaseCount, st4FanSensorHighAlarm=st4FanSensorHighAlarm, st4PhaseStatus=st4PhaseStatus, st4LineConfigTable=st4LineConfigTable, st4InputCordPowerFactorHysteresis=st4InputCordPowerFactorHysteresis, st4BranchOutletCount=st4BranchOutletCount, serverTech=serverTech, st4LineCommonConfig=st4LineCommonConfig, st4UnitAssetTag=st4UnitAssetTag, st4FanSensorConfigTable=st4FanSensorConfigTable, st4BranchLabel=st4BranchLabel, st4OutletPowerFactorEvent=st4OutletPowerFactorEvent, st4OutletCurrentHighAlarm=st4OutletCurrentHighAlarm, st4TempSensorID=st4TempSensorID, st4SystemFirmwareVersion=st4SystemFirmwareVersion, st4PhasePowerFactorHysteresis=st4PhasePowerFactorHysteresis, st4PhaseOutletCount=st4PhaseOutletCount, st4AdcSensorEventConfigTable=st4AdcSensorEventConfigTable, st4CcSensorCommonConfig=st4CcSensorCommonConfig, st4FanSensorEvent=st4FanSensorEvent, st4FanSensorValue=st4FanSensorValue, st4FanSensorNotifications=st4FanSensorNotifications, st4AdcSensorLowAlarm=st4AdcSensorLowAlarm, st4PhasePowerFactorStatus=st4PhasePowerFactorStatus, st4WaterSensorName=st4WaterSensorName, DeviceStatus=DeviceStatus, st4AdcSensorEvent=st4AdcSensorEvent, st4UnitOutletDisplayOrder=st4UnitOutletDisplayOrder, st4AdcSensorStatus=st4AdcSensorStatus, st4PhaseEventConfigEntry=st4PhaseEventConfigEntry, st4OutletIndex=st4OutletIndex, st4OutletCurrentStatus=st4OutletCurrentStatus, st4InputCordActivePowerHighWarning=st4InputCordActivePowerHighWarning, st4PhaseVoltageLowWarning=st4PhaseVoltageLowWarning, st4InputCordPowerCapacity=st4InputCordPowerCapacity, st4OutletCurrentHighWarning=st4OutletCurrentHighWarning, st4UnitAdcSensorCount=st4UnitAdcSensorCount, st4OutletID=st4OutletID, st4LineIndex=st4LineIndex, st4TemperatureSensors=st4TemperatureSensors, st4WaterSensorConfigEntry=st4WaterSensorConfigEntry, st4TempSensorHighWarning=st4TempSensorHighWarning, st4UnitModel=st4UnitModel, st4HumidSensorLowAlarm=st4HumidSensorLowAlarm, st4WaterSensorConfigTable=st4WaterSensorConfigTable, st4OcpEventConfigEntry=st4OcpEventConfigEntry, st4CcSensorConfigTable=st4CcSensorConfigTable, st4PhaseApparentPower=st4PhaseApparentPower, st4TempSensorMonitorEntry=st4TempSensorMonitorEntry, st4LineCurrentCapacity=st4LineCurrentCapacity, st4LineNotifications=st4LineNotifications, st4OverCurrentProtectors=st4OverCurrentProtectors, st4Branches=st4Branches, st4CcSensorMonitorTable=st4CcSensorMonitorTable, st4SystemFeatures=st4SystemFeatures, st4SystemNICSerialNumber=st4SystemNICSerialNumber, st4TempSensorEvent=st4TempSensorEvent, st4TempSensorIndex=st4TempSensorIndex, st4PhaseVoltageLowAlarm=st4PhaseVoltageLowAlarm, st4PhaseCurrentCrestFactor=st4PhaseCurrentCrestFactor, st4LineCurrent=st4LineCurrent, st4HumidSensorMonitorEntry=st4HumidSensorMonitorEntry, st4InputCordMonitorEntry=st4InputCordMonitorEntry, st4UnitHumidSensorCount=st4UnitHumidSensorCount, st4EventNotificationsGroup=st4EventNotificationsGroup, DeviceState=DeviceState, sentry4=sentry4, st4OutletPowerFactorHysteresis=st4OutletPowerFactorHysteresis, st4Events=st4Events, st4BranchConfigTable=st4BranchConfigTable, st4OutletControlTable=st4OutletControlTable, st4UnitDisplayOrientation=st4UnitDisplayOrientation, st4CcSensorIndex=st4CcSensorIndex, st4EventStatusCondition=st4EventStatusCondition, st4UnitType=st4UnitType, st4SystemConfigModifiedCount=st4SystemConfigModifiedCount, st4UnitMonitorEntry=st4UnitMonitorEntry, st4HumidSensorEventConfigEntry=st4HumidSensorEventConfigEntry, st4OutletPowerFactorLowAlarm=st4OutletPowerFactorLowAlarm, st4OutletControlState=st4OutletControlState, st4SystemNICHardwareInfo=st4SystemNICHardwareInfo, st4CcSensorNotifications=st4CcSensorNotifications, st4InputCordApparentPowerHighAlarm=st4InputCordApparentPowerHighAlarm, st4OutletActivePowerHysteresis=st4OutletActivePowerHysteresis, st4LineStatusEvent=st4LineStatusEvent, st4LineCurrentLowAlarm=st4LineCurrentLowAlarm, st4Objects=st4Objects, st4Compliances=st4Compliances, st4OutletApparentPower=st4OutletApparentPower, st4BranchID=st4BranchID, st4AdcSensorValue=st4AdcSensorValue, st4WaterSensorMonitorEntry=st4WaterSensorMonitorEntry, st4OutletActivePowerStatus=st4OutletActivePowerStatus)
