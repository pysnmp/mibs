#
# PySNMP MIB module LLDP-V2-MIB (http://snmplabs.com/pysmi)
# ASN.1 source https://pysnmp.github.io:443/mibs/asn1/LLDP-V2-MIB
# Produced by pysmi-1.1.12 at Fri Nov 22 11:52:09 2024
# On host fv-az665-602 platform Linux version 6.5.0-1025-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion")
AddressFamilyNumbers, = mibBuilder.importSymbols("IANA-ADDRESS-FAMILY-NUMBERS-MIB", "AddressFamilyNumbers")
ifGeneralInformationGroup, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "ifGeneralInformationGroup", "InterfaceIndex")
LldpV2ChassisId, LldpV2PortId, ieee802dot1mibs, LldpV2ManAddrIfSubtype, LldpV2ChassisIdSubtype, LldpV2DestAddressTableIndex, LldpV2SystemCapabilitiesMap, LldpV2PortIdSubtype, LldpV2ManAddress = mibBuilder.importSymbols("LLDP-V2-TC-MIB", "LldpV2ChassisId", "LldpV2PortId", "ieee802dot1mibs", "LldpV2ManAddrIfSubtype", "LldpV2ChassisIdSubtype", "LldpV2DestAddressTableIndex", "LldpV2SystemCapabilitiesMap", "LldpV2PortIdSubtype", "LldpV2ManAddress")
ZeroBasedCounter32, TimeFilter = mibBuilder.importSymbols("RMON2-MIB", "ZeroBasedCounter32", "TimeFilter")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, MibIdentifier, Bits, TimeTicks, ObjectIdentity, NotificationType, ModuleIdentity, iso, Counter32, IpAddress, Gauge32, Counter64, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "MibIdentifier", "Bits", "TimeTicks", "ObjectIdentity", "NotificationType", "ModuleIdentity", "iso", "Counter32", "IpAddress", "Gauge32", "Counter64", "Integer32")
TimeStamp, TextualConvention, DisplayString, MacAddress, TruthValue, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TimeStamp", "TextualConvention", "DisplayString", "MacAddress", "TruthValue", "RowStatus")
lldpV2MIB = ModuleIdentity((1, 3, 111, 2, 802, 1, 1, 13))
lldpV2MIB.setRevisions(('2009-06-08 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: lldpV2MIB.setRevisionsDescriptions(('Published as part of IEEE Std 802.1AB-2009 revision.\n            This revision incorporated changes to the MIB to\n            support the use of LLDP with multiple destination MAC\n            addresses.',))
if mibBuilder.loadTexts: lldpV2MIB.setLastUpdated('200906080000Z')
if mibBuilder.loadTexts: lldpV2MIB.setOrganization('IEEE 802.1 Working Group')
if mibBuilder.loadTexts: lldpV2MIB.setContactInfo('WG-URL: http://grouper.ieee.org/groups/802/1/index.html\n             WG-EMail: stds-802-1@ieee.org\n\n            Contact: Tony Jeffree\n            Postal:  11a Poplar Grove\n                     Sale \n                     Cheshire M33 3AX\n                     UK\n            Tel:     +44-161-973-4278\n            E-mail:  tony@jeffree.co.uk')
if mibBuilder.loadTexts: lldpV2MIB.setDescription('Management Information Base module for LLDP configuration,\n            statistics, local system data and remote systems data\n            components.\n\n            This MIB module supports the architecture described in\n            Clause 6, where multiple LLDP agents can be associated with\n            a single Port, each supporting transmission by means of a\n            different MAC address.\n\n            Unless otherwise indicated, the references in this\n            MIB module are to IEEE 802.1AB-2009.\n\n            Copyright (C) IEEE (2009). This version of this MIB module\n            is published as subclause 11.5.2 of IEEE Std 802.1AB-2009;\n            see the standard itself for full legal notices.')
lldpV2Notifications = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 13, 0))
lldpV2Objects = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 13, 1))
lldpV2Conformance = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 13, 2))
lldpV2Configuration = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 13, 1, 1))
lldpV2Statistics = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 13, 1, 2))
lldpV2LocalSystemData = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 13, 1, 3))
lldpV2RemoteSystemsData = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 13, 1, 4))
lldpV2Extensions = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 13, 1, 5))
lldpV2MessageTxInterval = MibScalar((1, 3, 111, 2, 802, 1, 1, 13, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(5, 32768)).clone(30)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpV2MessageTxInterval.setReference('9.2.5.7')
if mibBuilder.loadTexts: lldpV2MessageTxInterval.setStatus('current')
if mibBuilder.loadTexts: lldpV2MessageTxInterval.setDescription('The interval at which LLDP frames are transmitted on\n            behalf of this LLDP agent.\n\n            The default value for lldpV2MessageTxInterval object is\n            30 seconds.\n\n            The value of this object is restored from non-volatile\n            storage after a re-initialization of the management system.')
lldpV2MessageTxHoldMultiplier = MibScalar((1, 3, 111, 2, 802, 1, 1, 13, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 10)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpV2MessageTxHoldMultiplier.setReference('9.2.5.6')
if mibBuilder.loadTexts: lldpV2MessageTxHoldMultiplier.setStatus('current')
if mibBuilder.loadTexts: lldpV2MessageTxHoldMultiplier.setDescription("The time-to-live value expressed as a multiple of the\n            lldpV2MessageTxInterval object. The actual time-to-live value\n            used in LLDP frames, transmitted on behalf of this LLDP agent,\n            can be expressed by the following formula: TTL = min(65535,\n            (lldpV2MessageTxInterval * lldpV2MessageTxHoldMultiplier)) For\n            example, if the value of lldpV2MessageTxInterval is '30', and\n            the value of lldpV2MessageTxHoldMultiplier is '4', then the\n            value '120' is encoded in the TTL field in the LLDP header.\n\n            The default value for lldpV2MessageTxHoldMultiplier object is 4.\n\n            The value of this object is restored from non-volatile\n            storage after a re-initialization of the management system.")
lldpV2ReinitDelay = MibScalar((1, 3, 111, 2, 802, 1, 1, 13, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(2)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpV2ReinitDelay.setReference('9.2.5.10')
if mibBuilder.loadTexts: lldpV2ReinitDelay.setStatus('current')
if mibBuilder.loadTexts: lldpV2ReinitDelay.setDescription("The lldpV2ReinitDelay indicates the delay (in units of\n            seconds) from when lldpPortConfigAdminStatus object of a\n            particular port becomes 'disabled' until re-initialization\n            is attempted.\n\n            The default value for lldpV2ReinitDelay is two seconds.\n\n            The value of this object is restored from non-volatile\n            storage after a re-initialization of the management system.")
lldpV2NotificationInterval = MibScalar((1, 3, 111, 2, 802, 1, 1, 13, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(5, 3600)).clone(30)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpV2NotificationInterval.setStatus('current')
if mibBuilder.loadTexts: lldpV2NotificationInterval.setDescription('This object controls the interval between transmission of\n            LLDP notifications during normal transmission periods.\n\n            The value of this object is restored from non-volatile\n            storage after a re-initialization of the management system.')
lldpV2TxCreditMax = MibScalar((1, 3, 111, 2, 802, 1, 1, 13, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(5)).setUnits('PDUs').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpV2TxCreditMax.setReference('9.2.5.17')
if mibBuilder.loadTexts: lldpV2TxCreditMax.setStatus('current')
if mibBuilder.loadTexts: lldpV2TxCreditMax.setDescription('The maximum number of consecutive LLDPDUs that can be\n            transmitted at any time.\n\n            The default value for lldpV2TxCreditMax object is 5 PDUs.\n            The value of this object is restored from non-volatile\n            storage after a re-initialization of the management system.')
lldpV2MessageFastTx = MibScalar((1, 3, 111, 2, 802, 1, 1, 13, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600)).clone(1)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpV2MessageFastTx.setReference('9.2.5.5')
if mibBuilder.loadTexts: lldpV2MessageFastTx.setStatus('current')
if mibBuilder.loadTexts: lldpV2MessageFastTx.setDescription('The interval at which LLDP frames are transmitted on\n                behalf of this LLDP agent during fast transmission period\n                (e.g. when a new neighbor is detected).\n                The default value for lldpV2MessageFastTx object is\n                1 second.\n                The value of this object is restored from non-volatile\n                storage after a re-initialization of the management system.')
lldpV2TxFastInit = MibScalar((1, 3, 111, 2, 802, 1, 1, 13, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpV2TxFastInit.setReference('9.2.5.19')
if mibBuilder.loadTexts: lldpV2TxFastInit.setStatus('current')
if mibBuilder.loadTexts: lldpV2TxFastInit.setDescription('The initial value used to initialize the txFast variable\n                which determines the number of transmissions that are\n                made in fast transmission mode.\n                The default value for lldpV2TxFastInit object is\n                4.\n                The value of this object is restored from non-volatile\n                storage after a re-initialization of the management system.')
lldpV2PortConfigTable = MibTable((1, 3, 111, 2, 802, 1, 1, 13, 1, 1, 8), )
if mibBuilder.loadTexts: lldpV2PortConfigTable.setStatus('current')
if mibBuilder.loadTexts: lldpV2PortConfigTable.setDescription('The table that controls LLDP frame transmission on individual\n            ports and using particular destination MAC addresses.')
lldpV2PortConfigEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 13, 1, 1, 8, 1), ).setIndexNames((0, "LLDP-V2-MIB", "lldpV2PortConfigIfIndex"), (0, "LLDP-V2-MIB", "lldpV2PortConfigDestAddressIndex"))
if mibBuilder.loadTexts: lldpV2PortConfigEntry.setStatus('current')
if mibBuilder.loadTexts: lldpV2PortConfigEntry.setDescription('LLDP configuration information for a particular port and\n            destination MAC address.\n\n            This configuration parameter controls the transmission and\n            the reception of LLDP frames on those interface/address \n            combinations whose rows are created in this table.\n\n            Rows in this table can only be created for MAC addresses\n            that can validly be used in association with the type of \n            interface concerned, as defined by table 8-2.\n\n            The contents of this table is persistent across\n            re-initializations or re-boots.')
lldpV2PortConfigIfIndex = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 1, 8, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: lldpV2PortConfigIfIndex.setStatus('current')
if mibBuilder.loadTexts: lldpV2PortConfigIfIndex.setDescription('The interface index value used to identify the port\n            associated with this entry. Its value is an index into\n            the interfaces MIB.\n\n            The value of this object is used as an index to the\n            lldpV2PortConfigTable.')
lldpV2PortConfigDestAddressIndex = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 1, 8, 1, 2), LldpV2DestAddressTableIndex())
if mibBuilder.loadTexts: lldpV2PortConfigDestAddressIndex.setStatus('current')
if mibBuilder.loadTexts: lldpV2PortConfigDestAddressIndex.setDescription('The index value used to identify the destination\n            MAC address associated with this entry. Its value identifies\n            the row in the lldpV2DestAddressTable where the MAC address\n            can be found.\n\n            The value of this object is used as an index to the\n            lldpV2PortConfigTable.')
lldpV2PortConfigAdminStatus = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 1, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("txOnly", 1), ("rxOnly", 2), ("txAndRx", 3), ("disabled", 4))).clone('txAndRx')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpV2PortConfigAdminStatus.setReference('9.2.5.1')
if mibBuilder.loadTexts: lldpV2PortConfigAdminStatus.setStatus('current')
if mibBuilder.loadTexts: lldpV2PortConfigAdminStatus.setDescription("The administratively desired status of the local LLDP agent.\n\n            If the associated lldpV2PortConfigAdminStatus object is\n            set to a value of 'txOnly(1)', then LLDP agent transmits\n            LLDPframes on this port and it does not store any\n            information about the remote systems connected.\n         \n            If the associated lldpV2PortConfigAdminStatus object is \n            set to a value of 'rxOnly(2)', then the LLDP agent\n            receives, but it does not transmit LLDP frames on this port.\n\n            If the associated lldpV2PortConfigAdminStatus object is set\n            to a value of 'txAndRx(3)', then the LLDP agent transmits\n            and receives LLDP frames on this port.\n\n            If the associated lldpV2PortConfigAdminStatus object is set\n            to a value of 'disabled(4)', then LLDP agent does not\n            transmit or receive LLDP frames on this port. If there is\n            remote systems information which is received on this port\n            and stored in other tables, before the port's\n            lldpV2PortConfigAdminStatus becomes disabled, then that\n            information is deleted.")
lldpV2PortConfigNotificationEnable = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 1, 8, 1, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpV2PortConfigNotificationEnable.setStatus('current')
if mibBuilder.loadTexts: lldpV2PortConfigNotificationEnable.setDescription('The lldpV2PortConfigNotificationEnable controls, on a per\n            agent basis, whether or not notifications from the agent\n            are enabled. The value true(1) means that notifications are\n            enabled; the value false(2) means that they are not.')
lldpV2PortConfigTLVsTxEnable = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 1, 8, 1, 5), Bits().clone(namedValues=NamedValues(("portDesc", 0), ("sysName", 1), ("sysDesc", 2), ("sysCap", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpV2PortConfigTLVsTxEnable.setReference('9.1.2.1')
if mibBuilder.loadTexts: lldpV2PortConfigTLVsTxEnable.setStatus('current')
if mibBuilder.loadTexts: lldpV2PortConfigTLVsTxEnable.setDescription("The lldpV2PortConfigTLVsTxEnable, defined as a bitmap,\n            includes the basic set of LLDP TLVs whose transmission is\n            allowed on the local LLDP agent by the network management.\n            Each bit in the bitmap corresponds to a TLV type associated\n            with a specific optional TLV.\n\n            It should be noted that the organizationally-specific TLVs\n            are excluded from the lldpV2PortConfigTLVsTxEnable bitmap.\n            \n            LLDP Organization Specific Information Extension MIBs should\n            have similar configuration object to control transmission\n            of their organizationally defined TLVs.\n\n            The bit 'portDesc(0)' indicates that LLDP agent should\n            transmit 'Port Description TLV'.\n\n            The bit 'sysName(1)' indicates that LLDP agent should transmit\n            'System Name TLV'.\n\n            The bit 'sysDesc(2)' indicates that LLDP agent should transmit\n            'System Description TLV'.\n\n            The bit 'sysCap(3)' indicates that LLDP agent should transmit\n            'System Capabilities TLV'.\n\n            There is no bit reserved for the management address TLV type\n            since transmission of management address TLVs are controlled\n            by another object, lldpV2ConfigManAddrTable.\n\n            The default value for lldpV2PortConfigTLVsTxEnable object is\n            empty set, which means no enumerated values are set.\n\n            The value of this object is restored from non-volatile\n            storage after a re-initialization of the management system.")
lldpV2DestAddressTable = MibTable((1, 3, 111, 2, 802, 1, 1, 13, 1, 1, 9), )
if mibBuilder.loadTexts: lldpV2DestAddressTable.setStatus('current')
if mibBuilder.loadTexts: lldpV2DestAddressTable.setDescription('The table that contains the set of MAC addresses used\n            by LLDP for transmission and reception of LLDPDUs.')
lldpV2DestAddressTableEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 13, 1, 1, 9, 1), ).setIndexNames((0, "LLDP-V2-MIB", "lldpV2AddressTableIndex"))
if mibBuilder.loadTexts: lldpV2DestAddressTableEntry.setStatus('current')
if mibBuilder.loadTexts: lldpV2DestAddressTableEntry.setDescription('Destination MAC address information for LLDP.\n\n            This configuration parameter identifies a MAC address\n            corresponding to a LldpV2DestAddressTableIndex value.\n\n            Rows in this table are created as necessary, to support\n            MAC addresses needed by other tables in the MIB that\n            are indexed by MAC address.\n\n            A given row in this table cannot be deleted if the MAC\n            address table index value is in use in any other table\n            in the MIB.\n\n            The contents of this table is persistent aacross\n            re-initializations or re-boots.')
lldpV2AddressTableIndex = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 1, 9, 1, 1), LldpV2DestAddressTableIndex())
if mibBuilder.loadTexts: lldpV2AddressTableIndex.setStatus('current')
if mibBuilder.loadTexts: lldpV2AddressTableIndex.setDescription('The index value used to identify the destination\n            MAC address associated with this entry.\n\n            The value of this object is used as an index to the\n            lldpV2DestAddressTable.')
lldpV2DestMacAddress = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 1, 9, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2DestMacAddress.setStatus('current')
if mibBuilder.loadTexts: lldpV2DestMacAddress.setDescription('The MAC address associated with this entry.\n\n            The octet string identifies an individual or a group\n            MAC address that is in use by LLDP as a destination\n            MAC address.\n            The MAC address is encoded in the octet string in\n            canonical format (see IEEE Std 802).')
lldpV2ManAddrConfigTxPortsTable = MibTable((1, 3, 111, 2, 802, 1, 1, 13, 1, 1, 10), )
if mibBuilder.loadTexts: lldpV2ManAddrConfigTxPortsTable.setStatus('current')
if mibBuilder.loadTexts: lldpV2ManAddrConfigTxPortsTable.setDescription('The table that controls selection of LLDP management address\n            TLV instances to be transmitted on individual port/\n            destination address pairs.')
lldpV2ManAddrConfigTxPortsEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 13, 1, 1, 10, 1), ).setIndexNames((0, "LLDP-V2-MIB", "lldpV2ManAddrConfigIfIndex"), (0, "LLDP-V2-MIB", "lldpV2ManAddrConfigDestAddressIndex"), (0, "LLDP-V2-MIB", "lldpV2ManAddrConfigLocManAddrSubtype"), (0, "LLDP-V2-MIB", "lldpV2ManAddrConfigLocManAddr"))
if mibBuilder.loadTexts: lldpV2ManAddrConfigTxPortsEntry.setStatus('current')
if mibBuilder.loadTexts: lldpV2ManAddrConfigTxPortsEntry.setDescription('LLDP configuration information that specifies the set\n            of port/destination address pairs on which the local\n            system management address instance is transmitted.\n\n            Each active lldpManAddrConfigTxPortsTableV2Entry is \n            restored from non-volatile storage and re-created \n            after a re-initialization of the management system.')
lldpV2ManAddrConfigIfIndex = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 1, 10, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: lldpV2ManAddrConfigIfIndex.setStatus('current')
if mibBuilder.loadTexts: lldpV2ManAddrConfigIfIndex.setDescription('The interface index value used to identify the port\n            associated with this entry. Its value is an index into\n            the interfaces MIB.\n\n            The value of this object is used as an index to the\n            lldpV2PortConfigTable.\n            The value in this column of the table MUST match\n            the IfIndex value specified in the BridgePort table.')
lldpV2ManAddrConfigDestAddressIndex = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 1, 10, 1, 2), LldpV2DestAddressTableIndex())
if mibBuilder.loadTexts: lldpV2ManAddrConfigDestAddressIndex.setStatus('current')
if mibBuilder.loadTexts: lldpV2ManAddrConfigDestAddressIndex.setDescription('The index value used to identify the destination\n            MAC address associated with this entry. Its value identifies\n            the row in the lldpV2DestAddressTable where the MAC address\n            can be found.\n\n            The value of this object is used as an index to the\n            lldpV2PortConfigTable.')
lldpV2ManAddrConfigLocManAddrSubtype = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 1, 10, 1, 3), AddressFamilyNumbers())
if mibBuilder.loadTexts: lldpV2ManAddrConfigLocManAddrSubtype.setReference('8.5.9.3')
if mibBuilder.loadTexts: lldpV2ManAddrConfigLocManAddrSubtype.setStatus('current')
if mibBuilder.loadTexts: lldpV2ManAddrConfigLocManAddrSubtype.setDescription("The type of management address identifier encoding used in\n            the associated 'lldpLocManagmentAddr' object.\n\n            It should be noted that only a subset of the possible\n            address encodings enumerated in AddressFamilyNumbers\n            are appropriate for use as a LLDP management\n            address, either because some are just not apliccable or \n            because the maximum size of a LldpV2ManAddress octet string\n            would prevent the use of some address identifier encodings.")
lldpV2ManAddrConfigLocManAddr = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 1, 10, 1, 4), LldpV2ManAddress())
if mibBuilder.loadTexts: lldpV2ManAddrConfigLocManAddr.setReference('8.5.9.4')
if mibBuilder.loadTexts: lldpV2ManAddrConfigLocManAddr.setStatus('current')
if mibBuilder.loadTexts: lldpV2ManAddrConfigLocManAddr.setDescription('The string value used to identify the management address\n            component associated with the local system. The purpose of\n            this address is to contact the management entity.')
lldpV2ManAddrConfigTxEnable = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 1, 10, 1, 5), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lldpV2ManAddrConfigTxEnable.setReference('9.1.2.1')
if mibBuilder.loadTexts: lldpV2ManAddrConfigTxEnable.setStatus('current')
if mibBuilder.loadTexts: lldpV2ManAddrConfigTxEnable.setDescription("A boolean controlling the transmission of system\n             management address instance for the specified port,\n             destination, subtype and MAN address used to index\n             this table. If set to the default value of false,\n             no transmission occurs. If set to true, the\n             appropriate information is transmitted out of the\n             port specified in the row's index.")
lldpV2ManAddrConfigRowStatus = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 1, 10, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lldpV2ManAddrConfigRowStatus.setStatus('current')
if mibBuilder.loadTexts: lldpV2ManAddrConfigRowStatus.setDescription('Indicates the status of an entry in this table, and is used\n        to create/delete entries.\n        The corresponding instances of the following objects\n        must be set before this object can be made active(1):\n           lldpV2ManAddrConfigDestAddressIndex\n           lldpV2ManAddrConfigLocManAddrSubtype\n           lldpV2ManAddrConfigLocManAddr \n           lldpV2ManAddrConfigTxEnable\n\n        The corresponding instances of the following objects\n        may not be changed while this object is active(1):\n           lldpV2ManAddrConfigDestAddressIndex\n           lldpV2ManAddrConfigLocManAddrSubtype\n           lldpV2ManAddrConfigLocManAddr ')
lldpV2StatsRemTablesLastChangeTime = MibScalar((1, 3, 111, 2, 802, 1, 1, 13, 1, 2, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2StatsRemTablesLastChangeTime.setStatus('current')
if mibBuilder.loadTexts: lldpV2StatsRemTablesLastChangeTime.setDescription('The value of sysUpTime object (defined in IETF RFC 3418)\n            at the time an entry is created, modified, or deleted in the\n            in tables associated with the lldpV2RemoteSystemsData objects\n            and all LLDP extension objects associated with remote systems.\n\n            An NMS can use this object to reduce polling of the\n            lldpV2RemoteSystemsData objects.')
lldpV2StatsRemTablesInserts = MibScalar((1, 3, 111, 2, 802, 1, 1, 13, 1, 2, 2), ZeroBasedCounter32()).setUnits('table entries').setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2StatsRemTablesInserts.setStatus('current')
if mibBuilder.loadTexts: lldpV2StatsRemTablesInserts.setDescription('The number of times the complete set of information\n            advertised by a particular MSAP has been inserted into tables\n            contained in lldpV2RemoteSystemsData and lldpV2Extensions objects.\n\n            The complete set of information received from a particular\n            MSAP should be inserted into related tables. If partial\n            information cannot be inserted for a reason such as lack\n            of resources, all of the complete set of information should\n            be removed.\n\n            This counter should be incremented only once after the\n            complete set of information is successfully recorded\n            in all related tables. Any failures during inserting\n            information set which result in deletion of previously\n            inserted information should not trigger any changes in\n            lldpV2StatsRemTablesInserts since the insert is not completed\n            yet or in lldpStatsRemTablesDeletes, since the deletion\n            would only be a partial deletion. If the failure was the\n            result of lack of resources, the lldpStatsRemTablesDrops\n            counter should be incremented once.')
lldpV2StatsRemTablesDeletes = MibScalar((1, 3, 111, 2, 802, 1, 1, 13, 1, 2, 3), ZeroBasedCounter32()).setUnits('table entries').setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2StatsRemTablesDeletes.setStatus('current')
if mibBuilder.loadTexts: lldpV2StatsRemTablesDeletes.setDescription('The number of times the complete set of information\n            advertised by a particular MSAP has been deleted from\n            tables contained in lldpV2RemoteSystemsData and lldpV2Extensions\n            objects.\n\n            This counter should be incremented only once when the\n            complete set of information is completely deleted from all\n            related tables. Partial deletions, such as deletion of\n            rows associated with a particular MSAP from some tables,\n            but not from all tables are not allowed, thus should not\n            change the value of this counter.')
lldpV2StatsRemTablesDrops = MibScalar((1, 3, 111, 2, 802, 1, 1, 13, 1, 2, 4), ZeroBasedCounter32()).setUnits('table entries').setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2StatsRemTablesDrops.setStatus('current')
if mibBuilder.loadTexts: lldpV2StatsRemTablesDrops.setDescription('The number of times the complete set of information\n            advertised by a particular MSAP could not be entered into\n            tables contained in lldpV2RemoteSystemsData and lldpV2Extensions\n            objects because of insufficient resources.')
lldpV2StatsRemTablesAgeouts = MibScalar((1, 3, 111, 2, 802, 1, 1, 13, 1, 2, 5), ZeroBasedCounter32()).setUnits('table entries').setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2StatsRemTablesAgeouts.setStatus('current')
if mibBuilder.loadTexts: lldpV2StatsRemTablesAgeouts.setDescription('The number of times the complete set of information\n            advertised by a particular MSAP has been deleted from tables\n            contained in lldpV2RemoteSystemsData and lldpV2Extensions objects\n            because the information timeliness interval has expired.\n\n            This counter should be incremented only once when the complete\n            set of information is completely invalidated (aged out)\n            from all related tables. Partial ageing, similar to deletion\n            case, is not allowed, and thus, should not change the value\n            of this counter.')
lldpV2StatsTxPortTable = MibTable((1, 3, 111, 2, 802, 1, 1, 13, 1, 2, 6), )
if mibBuilder.loadTexts: lldpV2StatsTxPortTable.setStatus('current')
if mibBuilder.loadTexts: lldpV2StatsTxPortTable.setDescription("A table containing LLDP transmission statistics for\n            individual port/destination address combinations. \n            Entries are not required to exist in\n            this table while the lldpPortConfigEntry object is equal to\n            'disabled(4)'.")
lldpV2StatsTxPortEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 13, 1, 2, 6, 1), ).setIndexNames((0, "LLDP-V2-MIB", "lldpV2StatsTxIfIndex"), (0, "LLDP-V2-MIB", "lldpV2StatsTxDestMACAddress"))
if mibBuilder.loadTexts: lldpV2StatsTxPortEntry.setStatus('current')
if mibBuilder.loadTexts: lldpV2StatsTxPortEntry.setDescription('LLDP frame transmission statistics for a particular port\n             and destination MAC address. \n             The port is contained in the same chassis as the\n             LLDP agent.\n            \n             All counter values in a particular entry shall be\n             maintained on a continuing basis and shall not be deleted\n             upon expiration of rxInfoTTL timing counters in the LLDP\n             remote systems MIB of the receipt of a shutdown frame from\n             a remote LLDP agent.\n\n             All statistical counters associated with a particular\n             port on the local LLDP agent become frozen whenever the\n             adminStatus is disabled for the same port.\n\n             Rows in this table can only be created for MAC addresses\n             that can validly be used in association with the type of \n             interface concerned, as defined by table 8-2.')
lldpV2StatsTxIfIndex = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 2, 6, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: lldpV2StatsTxIfIndex.setStatus('current')
if mibBuilder.loadTexts: lldpV2StatsTxIfIndex.setDescription('The interface index value used to identify the port\n            associated with this entry. Its value is an index\n            into the interfaces MIB\n\n            The value of this object is used as an index to the\n            lldpV2StatsTxPortTable.')
lldpV2StatsTxDestMACAddress = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 2, 6, 1, 2), LldpV2DestAddressTableIndex())
if mibBuilder.loadTexts: lldpV2StatsTxDestMACAddress.setStatus('current')
if mibBuilder.loadTexts: lldpV2StatsTxDestMACAddress.setDescription('The index value used to identify the destination\n            MAC address associated with this entry. Its value identifies\n            the row in the lldpV2DestAddressTable where the MAC address\n            can be found.\n\n            The value of this object is used as an index to the\n            lldpV2StatsTxPortTable.')
lldpV2StatsTxPortFramesTotal = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 2, 6, 1, 3), Counter32()).setUnits('LLDP frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2StatsTxPortFramesTotal.setReference('9.2.6.5')
if mibBuilder.loadTexts: lldpV2StatsTxPortFramesTotal.setStatus('current')
if mibBuilder.loadTexts: lldpV2StatsTxPortFramesTotal.setDescription('The number of LLDP frames transmitted by this LLDP agent\n            on the indicated port to the destination MAC address\n            associated with this row of the table.')
lldpV2StatsTxLLDPDULengthErrors = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 2, 6, 1, 4), Counter32()).setUnits('LLDP frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2StatsTxLLDPDULengthErrors.setReference('9.2.6.8')
if mibBuilder.loadTexts: lldpV2StatsTxLLDPDULengthErrors.setStatus('current')
if mibBuilder.loadTexts: lldpV2StatsTxLLDPDULengthErrors.setDescription('The number of LLDPDU Length Errors recorded for the Port.')
lldpV2StatsRxPortTable = MibTable((1, 3, 111, 2, 802, 1, 1, 13, 1, 2, 7), )
if mibBuilder.loadTexts: lldpV2StatsRxPortTable.setStatus('current')
if mibBuilder.loadTexts: lldpV2StatsRxPortTable.setDescription("A table containing LLDP reception statistics for individual\n            ports and destination MAC addresses. \n            Entries are not required to exist in this table while\n            the lldpPortConfigEntry object is equal to 'disabled(4)'.")
lldpV2StatsRxPortEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 13, 1, 2, 7, 1), ).setIndexNames((0, "LLDP-V2-MIB", "lldpV2StatsRxDestIfIndex"), (0, "LLDP-V2-MIB", "lldpV2StatsRxDestMACAddress"))
if mibBuilder.loadTexts: lldpV2StatsRxPortEntry.setStatus('current')
if mibBuilder.loadTexts: lldpV2StatsRxPortEntry.setDescription('LLDP frame reception statistics for a particular port.\n             The port is contained in the same chassis as the\n             LLDP agent.\n            \n             All counter values in a particular entry shall be\n             maintained on a continuing basis and shall not be deleted\n             upon expiration of rxInfoTTL timing counters in the LLDP\n             remote systems MIB of the receipt of a shutdown frame from\n             a remote LLDP agent.\n\n             All statistical counters associated with a particular\n             port on the local LLDP agent become frozen whenever the\n             adminStatus is disabled for the same port.\n\n             Rows in this table can only be created for MAC addresses\n             that can validly be used in association with the type of \n             interface concerned, as defined by table 8-2.\n\n             The contents of this table is persistent across\n             re-initializations or re-boots.')
lldpV2StatsRxDestIfIndex = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 2, 7, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: lldpV2StatsRxDestIfIndex.setStatus('current')
if mibBuilder.loadTexts: lldpV2StatsRxDestIfIndex.setDescription('The interface index value used to identify the port\n            associated with this entry. Its value is an index\n            into the interfaces MIB\n\n            The value of this object is used as an index to the\n            lldpStatsRxPortV2Table.')
lldpV2StatsRxDestMACAddress = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 2, 7, 1, 2), LldpV2DestAddressTableIndex())
if mibBuilder.loadTexts: lldpV2StatsRxDestMACAddress.setStatus('current')
if mibBuilder.loadTexts: lldpV2StatsRxDestMACAddress.setDescription('The index value used to identify the destination\n            MAC address associated with this entry. Its value identifies\n            the row in the lldpV2DestAddressTable where the MAC address\n            can be found.\n\n            The value of this object is used as an index to the\n            lldpStatsRxPortV2Table.')
lldpV2StatsRxPortFramesDiscardedTotal = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 2, 7, 1, 3), Counter32()).setUnits('LLDP frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2StatsRxPortFramesDiscardedTotal.setReference('9.2.6.2')
if mibBuilder.loadTexts: lldpV2StatsRxPortFramesDiscardedTotal.setStatus('current')
if mibBuilder.loadTexts: lldpV2StatsRxPortFramesDiscardedTotal.setDescription('The number of LLDP frames received by this LLDP agent on\n            the indicated port, and then discarded for any reason.\n            This counter can provide an indication that LLDP header\n            formatting problems may exist with the local LLDP agent in\n            the sending system or that LLDPDU validation problems may\n            exist with the local LLDP agent in the receiving system.')
lldpV2StatsRxPortFramesErrors = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 2, 7, 1, 4), Counter32()).setUnits('LLDP frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2StatsRxPortFramesErrors.setReference('9.2.6.3')
if mibBuilder.loadTexts: lldpV2StatsRxPortFramesErrors.setStatus('current')
if mibBuilder.loadTexts: lldpV2StatsRxPortFramesErrors.setDescription('The number of invalid LLDP frames received by this LLDP\n            agent on the indicated port, while this LLDP agent is enabled.')
lldpV2StatsRxPortFramesTotal = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 2, 7, 1, 5), Counter32()).setUnits('LLDP frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2StatsRxPortFramesTotal.setReference('9.2.6.4')
if mibBuilder.loadTexts: lldpV2StatsRxPortFramesTotal.setStatus('current')
if mibBuilder.loadTexts: lldpV2StatsRxPortFramesTotal.setDescription('The number of valid LLDP frames received by this LLDP agent\n            on the indicated port, while this LLDP agent is enabled.')
lldpV2StatsRxPortTLVsDiscardedTotal = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 2, 7, 1, 6), Counter32()).setUnits('TLVs').setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2StatsRxPortTLVsDiscardedTotal.setReference('9.2.6.6')
if mibBuilder.loadTexts: lldpV2StatsRxPortTLVsDiscardedTotal.setStatus('current')
if mibBuilder.loadTexts: lldpV2StatsRxPortTLVsDiscardedTotal.setDescription('The number of LLDP TLVs discarded for any reason by this LLDP\n            agent on the indicated port.')
lldpV2StatsRxPortTLVsUnrecognizedTotal = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 2, 7, 1, 7), Counter32()).setUnits('TLVs').setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2StatsRxPortTLVsUnrecognizedTotal.setReference('9.2.6.7')
if mibBuilder.loadTexts: lldpV2StatsRxPortTLVsUnrecognizedTotal.setStatus('current')
if mibBuilder.loadTexts: lldpV2StatsRxPortTLVsUnrecognizedTotal.setDescription('The number of LLDP TLVs received on the given port that\n            are not recognized by this LLDP agent on the indicated port.\n            \n            An unrecognized TLV is referred to as the TLV whose type value\n            is in the range of reserved TLV types (000 1001 - 111 1110)\n            in Table 9.1 of IEEE Std 802.1AB-2004. An unrecognized\n            TLV may be a basic management TLV from a later LLDP version.')
lldpV2StatsRxPortAgeoutsTotal = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 2, 7, 1, 8), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2StatsRxPortAgeoutsTotal.setReference('9.2.6.1')
if mibBuilder.loadTexts: lldpV2StatsRxPortAgeoutsTotal.setStatus('current')
if mibBuilder.loadTexts: lldpV2StatsRxPortAgeoutsTotal.setDescription('The counter that represents the number of age-outs that\n            occurred on a given port. An age-out is the number of\n            times the complete set of information advertised by a\n            particular MSAP has been deleted from tables contained in\n            lldpV2RemoteSystemsData and lldpV2Extensions objects because\n            the information timeliness interval has expired.\n\n            This counter is similar to lldpV2StatsRemTablesAgeouts, except\n            that the counter is on a per port basis. This enables NMS to\n            poll tables associated with the lldpV2RemoteSystemsData objects\n            and all LLDP extension objects associated with remote systems\n            on the indicated port only.\n\n            This counter is set to zero during agent initialization\n            and its value should not be saved in non-volatile storage.\n\n            This counter is incremented only once when the\n            complete set of information is invalidated (aged out) from\n            all related tables on a particular port. Partial ageing\n            is not allowed.')
lldpV2LocChassisIdSubtype = MibScalar((1, 3, 111, 2, 802, 1, 1, 13, 1, 3, 1), LldpV2ChassisIdSubtype()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2LocChassisIdSubtype.setReference('8.5.2.2')
if mibBuilder.loadTexts: lldpV2LocChassisIdSubtype.setStatus('current')
if mibBuilder.loadTexts: lldpV2LocChassisIdSubtype.setDescription('The type of encoding used to identify the chassis\n            associated with the local system.')
lldpV2LocChassisId = MibScalar((1, 3, 111, 2, 802, 1, 1, 13, 1, 3, 2), LldpV2ChassisId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2LocChassisId.setReference('8.5.2.3')
if mibBuilder.loadTexts: lldpV2LocChassisId.setStatus('current')
if mibBuilder.loadTexts: lldpV2LocChassisId.setDescription('The string value used to identify the chassis component\n            associated with the local system.')
lldpV2LocSysName = MibScalar((1, 3, 111, 2, 802, 1, 1, 13, 1, 3, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2LocSysName.setReference('8.5.6.2')
if mibBuilder.loadTexts: lldpV2LocSysName.setStatus('current')
if mibBuilder.loadTexts: lldpV2LocSysName.setDescription('The string value used to identify the system name of the\n            local system. If the local agent supports IETF RFC 3418,\n            lldpLocSysName object should have the same value of sysName\n            object.')
lldpV2LocSysDesc = MibScalar((1, 3, 111, 2, 802, 1, 1, 13, 1, 3, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2LocSysDesc.setReference('8.5.7.2')
if mibBuilder.loadTexts: lldpV2LocSysDesc.setStatus('current')
if mibBuilder.loadTexts: lldpV2LocSysDesc.setDescription('The string value used to identify the system description\n            of the local system. If the local agent supports IETF RFC 3418,\n            lldpLocSysDesc object should have the same value of sysDesc\n            object.')
lldpV2LocSysCapSupported = MibScalar((1, 3, 111, 2, 802, 1, 1, 13, 1, 3, 5), LldpV2SystemCapabilitiesMap()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2LocSysCapSupported.setReference('8.5.8.1')
if mibBuilder.loadTexts: lldpV2LocSysCapSupported.setStatus('current')
if mibBuilder.loadTexts: lldpV2LocSysCapSupported.setDescription('The bitmap value used to identify which system capabilities\n            are supported on the local system.')
lldpV2LocSysCapEnabled = MibScalar((1, 3, 111, 2, 802, 1, 1, 13, 1, 3, 6), LldpV2SystemCapabilitiesMap()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2LocSysCapEnabled.setReference('8.5.8.2')
if mibBuilder.loadTexts: lldpV2LocSysCapEnabled.setStatus('current')
if mibBuilder.loadTexts: lldpV2LocSysCapEnabled.setDescription('The bitmap value used to identify which system capabilities\n            are enabled on the local system.')
lldpV2LocPortTable = MibTable((1, 3, 111, 2, 802, 1, 1, 13, 1, 3, 7), )
if mibBuilder.loadTexts: lldpV2LocPortTable.setStatus('current')
if mibBuilder.loadTexts: lldpV2LocPortTable.setDescription('This table contains one row per port\n            of information associated with the local\n            system known to this agent.')
lldpV2LocPortEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 13, 1, 3, 7, 1), ).setIndexNames((0, "LLDP-V2-MIB", "lldpV2LocPortIfIndex"))
if mibBuilder.loadTexts: lldpV2LocPortEntry.setStatus('current')
if mibBuilder.loadTexts: lldpV2LocPortEntry.setDescription('Information about a particular port component.\n\n            Entries may be created and deleted in this table by the\n            agent.\n\n            Rows in this table can only be created for MAC addresses\n            that can validly be used in association with the type of \n            interface concerned, as defined by table 8-2.\n\n            The contents of this table is persistent across\n            re-initializations or re-boots.')
lldpV2LocPortIfIndex = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 3, 7, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: lldpV2LocPortIfIndex.setStatus('current')
if mibBuilder.loadTexts: lldpV2LocPortIfIndex.setDescription('The interface index value used to identify the port\n            associated with this entry. Its value is an index\n            into the interfaces MIB\n\n            The value of this object is used as an index to the\n            lldpV2LocPortTable.')
lldpV2LocPortIdSubtype = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 3, 7, 1, 2), LldpV2PortIdSubtype()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2LocPortIdSubtype.setReference('8.5.3.2')
if mibBuilder.loadTexts: lldpV2LocPortIdSubtype.setStatus('current')
if mibBuilder.loadTexts: lldpV2LocPortIdSubtype.setDescription("The type of port identifier encoding used in the associated\n            'lldpLocPortId' object.")
lldpV2LocPortId = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 3, 7, 1, 3), LldpV2PortId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2LocPortId.setReference('8.5.3.3')
if mibBuilder.loadTexts: lldpV2LocPortId.setStatus('current')
if mibBuilder.loadTexts: lldpV2LocPortId.setDescription('The string value used to identify the port component\n            associated with a given port in the local system.')
lldpV2LocPortDesc = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 3, 7, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2LocPortDesc.setReference('8.5.5.2')
if mibBuilder.loadTexts: lldpV2LocPortDesc.setStatus('current')
if mibBuilder.loadTexts: lldpV2LocPortDesc.setDescription("The string value used to identify the IEEE 802 LAN station's port\n            description associated with the local system. If the local\n            agent supports IETF RFC 2863, lldpLocPortDesc object should\n            have the same value of ifDescr object.")
lldpV2LocManAddrTable = MibTable((1, 3, 111, 2, 802, 1, 1, 13, 1, 3, 8), )
if mibBuilder.loadTexts: lldpV2LocManAddrTable.setStatus('current')
if mibBuilder.loadTexts: lldpV2LocManAddrTable.setDescription('This table contains management address information on the\n            local system known to this agent.')
lldpV2LocManAddrEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 13, 1, 3, 8, 1), ).setIndexNames((0, "LLDP-V2-MIB", "lldpV2LocManAddrSubtype"), (0, "LLDP-V2-MIB", "lldpV2LocManAddr"))
if mibBuilder.loadTexts: lldpV2LocManAddrEntry.setStatus('current')
if mibBuilder.loadTexts: lldpV2LocManAddrEntry.setDescription("Management address information about a particular chassis\n            component. There may be multiple management addresses\n            configured on the system identified by a particular\n            lldpLocChassisId. Each management address should have\n            distinct 'management address type' (lldpV2LocManAddrSubtype) and\n            'management address' (lldpLocManAddr.)\n\n            Entries may be created and deleted in this table by the\n            agent.\n            Since a variable length octetstring is used as an index\n            in a table, the address length is encoded as part of the OID\n            (as per IETF RFC 2578).")
lldpV2LocManAddrSubtype = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 3, 8, 1, 1), AddressFamilyNumbers())
if mibBuilder.loadTexts: lldpV2LocManAddrSubtype.setReference('8.5.9.3')
if mibBuilder.loadTexts: lldpV2LocManAddrSubtype.setStatus('current')
if mibBuilder.loadTexts: lldpV2LocManAddrSubtype.setDescription("The type of management address identifier encoding used in\n            the associated 'lldpLocManagmentAddr' object.\n\n            It should be noted that only a subset of the possible\n            address encodings enumerated in AddressFamilyNumbers\n            are appropriate for use as a LLDP management\n            address, either because some are just not apliccable or \n            because the maximum size of a LldpV2ManAddress octet string\n            would prevent the use of some address identifier encodings.")
lldpV2LocManAddr = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 3, 8, 1, 2), LldpV2ManAddress())
if mibBuilder.loadTexts: lldpV2LocManAddr.setReference('8.5.9.4')
if mibBuilder.loadTexts: lldpV2LocManAddr.setStatus('current')
if mibBuilder.loadTexts: lldpV2LocManAddr.setDescription('The string value used to identify the management address\n            component associated with the local system. The purpose of\n            this address is to contact the management entity.')
lldpV2LocManAddrLen = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 3, 8, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2LocManAddrLen.setReference('8.5.9.2')
if mibBuilder.loadTexts: lldpV2LocManAddrLen.setStatus('current')
if mibBuilder.loadTexts: lldpV2LocManAddrLen.setDescription('The total length of the management address subtype and the\n            management address fields in LLDPDUs transmitted by the\n            local LLDP agent.\n\n            The management address length field is needed so that the\n            receiving systems that do not implement SNMP are not\n            required to implement an iana family numbers/address length\n            equivalency table in order to decode the management address.')
lldpV2LocManAddrIfSubtype = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 3, 8, 1, 4), LldpV2ManAddrIfSubtype()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2LocManAddrIfSubtype.setReference('8.5.9.5')
if mibBuilder.loadTexts: lldpV2LocManAddrIfSubtype.setStatus('current')
if mibBuilder.loadTexts: lldpV2LocManAddrIfSubtype.setDescription('The enumeration value that identifies the interface numbering\n            method used for defining the interface number\n            (lldpV2LocManAddrIfId), associated with the local system.')
lldpV2LocManAddrIfId = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 3, 8, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2LocManAddrIfId.setReference('8.5.9.6')
if mibBuilder.loadTexts: lldpV2LocManAddrIfId.setStatus('current')
if mibBuilder.loadTexts: lldpV2LocManAddrIfId.setDescription('The integer value used to identify the interface number\n            regarding the management address component associated with\n            the local system.')
lldpV2LocManAddrOID = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 3, 8, 1, 6), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2LocManAddrOID.setReference('8.5.9.8')
if mibBuilder.loadTexts: lldpV2LocManAddrOID.setStatus('current')
if mibBuilder.loadTexts: lldpV2LocManAddrOID.setDescription('The OID value used to identify the type of hardware component\n            or protocol entity associated with the management address\n            advertised by the local system agent.')
lldpV2RemTable = MibTable((1, 3, 111, 2, 802, 1, 1, 13, 1, 4, 1), )
if mibBuilder.loadTexts: lldpV2RemTable.setStatus('current')
if mibBuilder.loadTexts: lldpV2RemTable.setDescription('This table contains one or more rows per physical network\n            connection known to this agent. The agent may wish to ensure\n            that only one lldpRemEntry is present for each local port\n            and destination MAC address,\n            or it may choose to maintain multiple lldpRemEntries for\n            the same local port and destination MAC address.\n\n            The following procedure may be used to retrieve remote\n            systems information updates from an LLDP agent:\n\n               1. NMS polls all tables associated with remote systems\n                  and keeps a local copy of the information retrieved.\n                  NMS polls periodically the values of the following\n                  objects:\n                     a. lldpV2StatsRemTablesInserts\n                     b. lldpV2StatsRemTablesDeletes\n                     c. lldpV2StatsRemTablesDrops\n                     d. lldpV2StatsRemTablesAgeouts\n                     e. lldpV2StatsRxPortAgeoutsTotal for all ports.\n\n               2. LLDP agent updates remote systems MIB objects, and\n                  sends out notifications to a list of notification\n                  destinations.\n\n               3. NMS receives the notifications and compares the new\n                  values of objects listed in step 1. \n\n                  Periodically, NMS should poll the object\n                  lldpV2StatsRemTablesLastChangeTime to find out if anything\n                  has changed since the last poll. if something has\n                  changed, NMS polls the objects listed in step 1 to\n                  figure out what kind of changes occurred in the tables.\n\n                  if value of lldpV2StatsRemTablesInserts has changed,\n                  then NMS walks all tables by employing TimeFilter\n                  with the last-polled time value. This request\n                  returns new objects or objects whose values have been\n                  updated since the last poll.\n\n                  if value of lldpV2StatsRemTablesAgeouts has changed,\n                  then NMS walks the lldpStatsRxPortAgeoutsTotal and\n                  compares the new values with previously recorded ones.\n                  For ports whose lldpStatsRxPortAgeoutsTotal value is\n                  greater than the recorded value, NMS can\n                  retrieve objects associated with those ports from\n                  table(s) without employing a TimeFilter (which is\n                  performed by specifying 0 for the TimeFilter.)\n\n                  lldpV2StatsRemTablesDeletes and lldpV2StatsRemTablesDrops\n                  objects are provided for informational purposes.')
lldpV2RemEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 13, 1, 4, 1, 1), ).setIndexNames((0, "LLDP-V2-MIB", "lldpV2RemTimeMark"), (0, "LLDP-V2-MIB", "lldpV2RemLocalIfIndex"), (0, "LLDP-V2-MIB", "lldpV2RemLocalDestMACAddress"), (0, "LLDP-V2-MIB", "lldpV2RemIndex"))
if mibBuilder.loadTexts: lldpV2RemEntry.setStatus('current')
if mibBuilder.loadTexts: lldpV2RemEntry.setDescription('Information about a particular physical network connection.\n            Entries may be created and deleted in this table by the agent,\n            if a physical topology discovery process is active.\n\n            Rows in this table can only be created for MAC addresses\n            that can validly be used in association with the type of \n            interface concerned, as defined by table 8-2.\n\n            The contents of this table is persistent across\n            re-initializations or re-boots.')
lldpV2RemTimeMark = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 4, 1, 1, 1), TimeFilter())
if mibBuilder.loadTexts: lldpV2RemTimeMark.setReference('IETF RFC 4502 section 6')
if mibBuilder.loadTexts: lldpV2RemTimeMark.setStatus('current')
if mibBuilder.loadTexts: lldpV2RemTimeMark.setDescription('A TimeFilter for this entry. See the TimeFilter textual\n            convention in IETF RFC 4502 and \n            http://www.ietf.org/IESG/Implementations/RFC2021-Implementation.txt\n            to see how TimeFilter works.')
lldpV2RemLocalIfIndex = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 4, 1, 1, 2), InterfaceIndex())
if mibBuilder.loadTexts: lldpV2RemLocalIfIndex.setStatus('current')
if mibBuilder.loadTexts: lldpV2RemLocalIfIndex.setDescription('The interface index value used to identify the port\n            associated with this entry. Its value is an index\n            into the interfaces MIB\n\n            The value of this object is used as an index to the\n            lldpV2RemTable.')
lldpV2RemLocalDestMACAddress = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 4, 1, 1, 3), LldpV2DestAddressTableIndex())
if mibBuilder.loadTexts: lldpV2RemLocalDestMACAddress.setStatus('current')
if mibBuilder.loadTexts: lldpV2RemLocalDestMACAddress.setDescription('The index value used to identify the destination\n            MAC address associated with this entry. Its value identifies\n            the row in the lldpV2DestAddressTable where the MAC address\n            can be found.\n\n            The value of this object is used as an index to the\n            lldpV2RemTable.')
lldpV2RemIndex = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 4, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: lldpV2RemIndex.setStatus('current')
if mibBuilder.loadTexts: lldpV2RemIndex.setDescription('This object represents an arbitrary local integer value used\n            by this agent to identify a particular connection instance,\n            unique only for the indicated remote system.\n\n            An agent is encouraged to assign monotonically increasing\n            index values to new entries, starting with one, after each\n            reboot. It is considered unlikely that the lldpRemIndex\n            can wrap between reboots.')
lldpV2RemChassisIdSubtype = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 4, 1, 1, 5), LldpV2ChassisIdSubtype()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2RemChassisIdSubtype.setReference('8.5.2.2')
if mibBuilder.loadTexts: lldpV2RemChassisIdSubtype.setStatus('current')
if mibBuilder.loadTexts: lldpV2RemChassisIdSubtype.setDescription('The type of encoding used to identify the chassis associated\n            with the remote system.')
lldpV2RemChassisId = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 4, 1, 1, 6), LldpV2ChassisId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2RemChassisId.setReference('8.5.2.3')
if mibBuilder.loadTexts: lldpV2RemChassisId.setStatus('current')
if mibBuilder.loadTexts: lldpV2RemChassisId.setDescription('The string value used to identify the chassis component\n            associated with the remote system.')
lldpV2RemPortIdSubtype = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 4, 1, 1, 7), LldpV2PortIdSubtype()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2RemPortIdSubtype.setReference('8.5.3.2')
if mibBuilder.loadTexts: lldpV2RemPortIdSubtype.setStatus('current')
if mibBuilder.loadTexts: lldpV2RemPortIdSubtype.setDescription("The type of port identifier encoding used in the associated\n            'lldpRemPortId' object.")
lldpV2RemPortId = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 4, 1, 1, 8), LldpV2PortId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2RemPortId.setReference('8.5.3.3')
if mibBuilder.loadTexts: lldpV2RemPortId.setStatus('current')
if mibBuilder.loadTexts: lldpV2RemPortId.setDescription('The string value used to identify the port component\n            associated with the remote system.')
lldpV2RemPortDesc = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 4, 1, 1, 9), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2RemPortDesc.setReference('8.5.5.2')
if mibBuilder.loadTexts: lldpV2RemPortDesc.setStatus('current')
if mibBuilder.loadTexts: lldpV2RemPortDesc.setDescription('The string value used to identify the description of\n            the given port associated with the remote system.')
lldpV2RemSysName = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 4, 1, 1, 10), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2RemSysName.setReference('8.5.6.2')
if mibBuilder.loadTexts: lldpV2RemSysName.setStatus('current')
if mibBuilder.loadTexts: lldpV2RemSysName.setDescription('The string value used to identify the system name of the\n            remote system.')
lldpV2RemSysDesc = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 4, 1, 1, 11), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2RemSysDesc.setReference('8.5.7.2')
if mibBuilder.loadTexts: lldpV2RemSysDesc.setStatus('current')
if mibBuilder.loadTexts: lldpV2RemSysDesc.setDescription('The string value used to identify the system description\n            of the remote system.')
lldpV2RemSysCapSupported = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 4, 1, 1, 12), LldpV2SystemCapabilitiesMap()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2RemSysCapSupported.setReference('8.5.8.1')
if mibBuilder.loadTexts: lldpV2RemSysCapSupported.setStatus('current')
if mibBuilder.loadTexts: lldpV2RemSysCapSupported.setDescription('The bitmap value used to identify which system capabilities\n            are supported on the remote system.')
lldpV2RemSysCapEnabled = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 4, 1, 1, 13), LldpV2SystemCapabilitiesMap()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2RemSysCapEnabled.setReference('8.5.8.2')
if mibBuilder.loadTexts: lldpV2RemSysCapEnabled.setStatus('current')
if mibBuilder.loadTexts: lldpV2RemSysCapEnabled.setDescription('The bitmap value used to identify which system capabilities\n            are enabled on the remote system.')
lldpV2RemRemoteChanges = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 4, 1, 1, 14), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2RemRemoteChanges.setReference('9.2.5.11')
if mibBuilder.loadTexts: lldpV2RemRemoteChanges.setStatus('current')
if mibBuilder.loadTexts: lldpV2RemRemoteChanges.setDescription('Indicates that there are chances in the remote systems\n            MIB, as determined by the variable remoteChanges.')
lldpV2RemTooManyNeighbors = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 4, 1, 1, 15), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2RemTooManyNeighbors.setReference('9.2.5.15')
if mibBuilder.loadTexts: lldpV2RemTooManyNeighbors.setStatus('current')
if mibBuilder.loadTexts: lldpV2RemTooManyNeighbors.setDescription('Indicates that there are too many neighbors\n             as determined by the variable tooManyNeighbors.')
lldpV2RemManAddrTable = MibTable((1, 3, 111, 2, 802, 1, 1, 13, 1, 4, 2), )
if mibBuilder.loadTexts: lldpV2RemManAddrTable.setStatus('current')
if mibBuilder.loadTexts: lldpV2RemManAddrTable.setDescription('This table contains one or more rows per management address\n            information on the remote system learned on a particular port\n            contained in the local chassis known to this agent.')
lldpV2RemManAddrEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 13, 1, 4, 2, 1), ).setIndexNames((0, "LLDP-V2-MIB", "lldpV2RemTimeMark"), (0, "LLDP-V2-MIB", "lldpV2RemLocalIfIndex"), (0, "LLDP-V2-MIB", "lldpV2RemLocalDestMACAddress"), (0, "LLDP-V2-MIB", "lldpV2RemIndex"), (0, "LLDP-V2-MIB", "lldpV2RemManAddrSubtype"), (0, "LLDP-V2-MIB", "lldpV2RemManAddr"))
if mibBuilder.loadTexts: lldpV2RemManAddrEntry.setStatus('current')
if mibBuilder.loadTexts: lldpV2RemManAddrEntry.setDescription("Management address information about a particular chassis\n            component. There may be multiple management addresses\n            configured on the remote system identified by a particular\n            lldpRemIndex whose information is received on\n            an interface of the local system and a given destination\n            MAC address. Each management\n            address should have distinct 'management address\n            type' (lldpRemManAddrSubtype) and 'management address'\n            (lldpRemManAddr.)\n\n            Entries may be created and deleted in this table by the\n            agent.\n            Since a variable length octetstring is used as an index\n            in a table, theaddress length is encoded as part of the OID\n            (as per IETF RFC 2578).")
lldpV2RemManAddrSubtype = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 4, 2, 1, 1), AddressFamilyNumbers())
if mibBuilder.loadTexts: lldpV2RemManAddrSubtype.setReference('8.5.9.3')
if mibBuilder.loadTexts: lldpV2RemManAddrSubtype.setStatus('current')
if mibBuilder.loadTexts: lldpV2RemManAddrSubtype.setDescription("The type of management address identifier encoding used in\n            the associated 'lldpRemManagmentAddr' object.\n\n            It should be noted that only a subset of the possible\n            address encodings enumerated in AddressFamilyNumbers\n            are appropriate for use as a LLDP management\n            address, either because some are just not apliccable or \n            because the maximum size of a LldpV2ManAddress octet string\n            would prevent the use of some address identifier encodings.")
lldpV2RemManAddr = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 4, 2, 1, 2), LldpV2ManAddress())
if mibBuilder.loadTexts: lldpV2RemManAddr.setReference('8.5.9.4')
if mibBuilder.loadTexts: lldpV2RemManAddr.setStatus('current')
if mibBuilder.loadTexts: lldpV2RemManAddr.setDescription('The string value used to identify the management address\n            component associated with the remote system. The purpose\n            of this address is to contact the management entity.')
lldpV2RemManAddrIfSubtype = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 4, 2, 1, 3), LldpV2ManAddrIfSubtype()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2RemManAddrIfSubtype.setReference('8.5.9.5')
if mibBuilder.loadTexts: lldpV2RemManAddrIfSubtype.setStatus('current')
if mibBuilder.loadTexts: lldpV2RemManAddrIfSubtype.setDescription('The enumeration value that identifies the interface numbering\n            method used for defining the interface number, associated\n            with the remote system.')
lldpV2RemManAddrIfId = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 4, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2RemManAddrIfId.setReference('8.5.9.6')
if mibBuilder.loadTexts: lldpV2RemManAddrIfId.setStatus('current')
if mibBuilder.loadTexts: lldpV2RemManAddrIfId.setDescription('The integer value used to identify the interface number\n            regarding the management address component associated with\n            the remote system. The value depends upon the value of the\n            lldpV2RemManAddrIfSubtype for the table row.')
lldpV2RemManAddrOID = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 4, 2, 1, 5), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2RemManAddrOID.setReference('8.5.9.8')
if mibBuilder.loadTexts: lldpV2RemManAddrOID.setStatus('current')
if mibBuilder.loadTexts: lldpV2RemManAddrOID.setDescription('The OID value used to identify the type of hardware component\n            or protocol entity associated with the management address\n            advertised by the remote system agent.')
lldpV2RemUnknownTLVTable = MibTable((1, 3, 111, 2, 802, 1, 1, 13, 1, 4, 3), )
if mibBuilder.loadTexts: lldpV2RemUnknownTLVTable.setReference('9.2.7.7.1')
if mibBuilder.loadTexts: lldpV2RemUnknownTLVTable.setStatus('current')
if mibBuilder.loadTexts: lldpV2RemUnknownTLVTable.setDescription('This table contains information about an incoming TLV which\n            is not recognized by the receiving LLDP agent. The TLV may\n            be from a later version of the basic management set.\n\n            This table should only contain TLVs that are found in\n            a single LLDP frame. Entries in this table, associated\n            with an MAC service access point (MSAP, the access point\n            for MAC services provided to the LCC sublayer, defined\n            in IEEE 100, which is also identified with a particular\n            lldpRemLocalPortNum, lldpRemIndex pair) are overwritten with\n            most recently received unrecognized TLV from the same MSAP,\n            or they naturally age out when the rxInfoTTL timer\n            (associated with the MSAP) expires.')
lldpV2RemUnknownTLVEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 13, 1, 4, 3, 1), ).setIndexNames((0, "LLDP-V2-MIB", "lldpV2RemTimeMark"), (0, "LLDP-V2-MIB", "lldpV2RemLocalIfIndex"), (0, "LLDP-V2-MIB", "lldpV2RemLocalDestMACAddress"), (0, "LLDP-V2-MIB", "lldpV2RemIndex"), (0, "LLDP-V2-MIB", "lldpV2RemUnknownTLVType"))
if mibBuilder.loadTexts: lldpV2RemUnknownTLVEntry.setStatus('current')
if mibBuilder.loadTexts: lldpV2RemUnknownTLVEntry.setDescription('Information about an unrecognized TLV received from a\n            physical network connection. Entries may be created and\n            deleted in this table by the agent, if a physical topology\n            discovery process is active.')
lldpV2RemUnknownTLVType = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 4, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(9, 126)))
if mibBuilder.loadTexts: lldpV2RemUnknownTLVType.setReference('9.2.7.7.1')
if mibBuilder.loadTexts: lldpV2RemUnknownTLVType.setStatus('current')
if mibBuilder.loadTexts: lldpV2RemUnknownTLVType.setDescription('This object represents the value extracted from the type\n            field of the TLV.')
lldpV2RemUnknownTLVInfo = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 4, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 511))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2RemUnknownTLVInfo.setReference('9.2.7.7.1')
if mibBuilder.loadTexts: lldpV2RemUnknownTLVInfo.setStatus('current')
if mibBuilder.loadTexts: lldpV2RemUnknownTLVInfo.setDescription('This object represents the value extracted from the value\n            field of the TLV.')
lldpV2RemOrgDefInfoTable = MibTable((1, 3, 111, 2, 802, 1, 1, 13, 1, 4, 4), )
if mibBuilder.loadTexts: lldpV2RemOrgDefInfoTable.setStatus('current')
if mibBuilder.loadTexts: lldpV2RemOrgDefInfoTable.setDescription('This table contains one or more rows per physical network\n            connection which advertises the organizationally defined\n            information.\n\n            Note that this table contains one or more rows of\n            organizationally defined information that is not recognized\n            by the local agent.\n\n            If the local system is capable of recognizing any\n            organizationally defined information, appropriate extension\n            MIBs from the organization should be used for information\n            retrieval.')
lldpV2RemOrgDefInfoEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 13, 1, 4, 4, 1), ).setIndexNames((0, "LLDP-V2-MIB", "lldpV2RemTimeMark"), (0, "LLDP-V2-MIB", "lldpV2RemLocalIfIndex"), (0, "LLDP-V2-MIB", "lldpV2RemLocalDestMACAddress"), (0, "LLDP-V2-MIB", "lldpV2RemIndex"), (0, "LLDP-V2-MIB", "lldpV2RemOrgDefInfoOUI"), (0, "LLDP-V2-MIB", "lldpV2RemOrgDefInfoSubtype"), (0, "LLDP-V2-MIB", "lldpV2RemOrgDefInfoIndex"))
if mibBuilder.loadTexts: lldpV2RemOrgDefInfoEntry.setStatus('current')
if mibBuilder.loadTexts: lldpV2RemOrgDefInfoEntry.setDescription('Information about the unrecognized organizationally\n            defined information advertised by the remote system.\n            The lldpRemTimeMark, lldpRemLocalPortNum, lldpRemIndex,\n            lldpRemOrgDefInfoOUI, lldpRemOrgDefInfoSubtype, and\n            lldpRemOrgDefInfoIndex are indexes to this table. If there is\n            an lldpRemOrgDefInfoEntry associated with a particular remote\n            system identified by the lldpRemLocalPortNum and lldpRemIndex,\n            then there is an lldpRemEntry associated with the same\n            instance (i.e, using same indexes.) When the lldpRemEntry\n            for the same index is removed from the lldpRemTable, the\n            associated lldpRemOrgDefInfoEntry is removed from\n            the lldpRemOrgDefInfoTable.\n\n            Entries may be created and deleted in this table by the\n            agent.')
lldpV2RemOrgDefInfoOUI = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 4, 4, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3))
if mibBuilder.loadTexts: lldpV2RemOrgDefInfoOUI.setReference('8.6.1.3')
if mibBuilder.loadTexts: lldpV2RemOrgDefInfoOUI.setStatus('current')
if mibBuilder.loadTexts: lldpV2RemOrgDefInfoOUI.setDescription('The Organizationally Unique Identifier (OUI), as defined\n            in IEEE Std 802, is a 24 bit (three octets) globally\n            unique assigned number referenced by various standards,\n            of the information received from the remote system.')
lldpV2RemOrgDefInfoSubtype = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 4, 4, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: lldpV2RemOrgDefInfoSubtype.setReference('8.6.1.4')
if mibBuilder.loadTexts: lldpV2RemOrgDefInfoSubtype.setStatus('current')
if mibBuilder.loadTexts: lldpV2RemOrgDefInfoSubtype.setDescription('The integer value used to identify the subtype of the\n            organizationally defined information received from the\n            remote system.\n\n            The subtype value is required to identify different instances\n            of organizationally defined information that could not be\n            retrieved without a unique identifier that indicates the\n            particular type of information contained in the information\n            string.')
lldpV2RemOrgDefInfoIndex = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 4, 4, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: lldpV2RemOrgDefInfoIndex.setStatus('current')
if mibBuilder.loadTexts: lldpV2RemOrgDefInfoIndex.setDescription('This object represents an arbitrary local integer value\n            used by this agent to identify a particular unrecognized\n            organizationally defined information instance, unique only\n            for the lldpRemOrgDefInfoOUI and lldpRemOrgDefInfoSubtype\n            from the same remote system.\n\n            An agent is encouraged to assign monotonically increasing\n            index values to new entries, starting with one, after each\n            reboot. It is considered unlikely that the\n            lldpRemOrgDefInfoIndex can wrap between reboots.')
lldpV2RemOrgDefInfo = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 13, 1, 4, 4, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 507))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2RemOrgDefInfo.setReference('8.6.1.5')
if mibBuilder.loadTexts: lldpV2RemOrgDefInfo.setStatus('current')
if mibBuilder.loadTexts: lldpV2RemOrgDefInfo.setDescription('The string value used to identify the organizationally\n            defined information of the remote system. The encoding for\n            this object should be as defined for SnmpAdminString TC.')
lldpV2NotificationPrefix = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 13, 0, 0))
lldpV2RemTablesChange = NotificationType((1, 3, 111, 2, 802, 1, 1, 13, 0, 0, 1)).setObjects(("LLDP-V2-MIB", "lldpV2StatsRemTablesInserts"), ("LLDP-V2-MIB", "lldpV2StatsRemTablesDeletes"), ("LLDP-V2-MIB", "lldpV2StatsRemTablesDrops"), ("LLDP-V2-MIB", "lldpV2StatsRemTablesAgeouts"))
if mibBuilder.loadTexts: lldpV2RemTablesChange.setStatus('current')
if mibBuilder.loadTexts: lldpV2RemTablesChange.setDescription("A lldpV2RemTablesChange notification is sent when the value\n            of lldpV2StatsRemTablesLastChangeTime changes. It can be\n            utilized by an NMS to trigger LLDP remote systems table\n            maintenance polls.\n\n            Note that transmission of lldpV2RemTablesChange\n            notifications are throttled by the agent, as specified by the\n            'lldpV2NotificationInterval' object.")
lldpV2Compliances = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 13, 2, 1))
lldpV2Groups = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 13, 2, 2))
lldpV2TxRxCompliance = ModuleCompliance((1, 3, 111, 2, 802, 1, 1, 13, 2, 1, 1)).setObjects(("LLDP-V2-MIB", "lldpV2ConfigGroup"), ("IF-MIB", "ifGeneralInformationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lldpV2TxRxCompliance = lldpV2TxRxCompliance.setStatus('current')
if mibBuilder.loadTexts: lldpV2TxRxCompliance.setDescription('A compliance statement for all SNMP entities that \n            implement the LLDP MIB as either a transmitter or \n            a receiver of LLDPDUs.\n\n            This version defines compliance requirements for\n            V2 of the LLDP MIB module.')
lldpV2TxCompliance = ModuleCompliance((1, 3, 111, 2, 802, 1, 1, 13, 2, 1, 2)).setObjects(("LLDP-V2-MIB", "lldpV2ConfigTxGroup"), ("LLDP-V2-MIB", "lldpV2StatsTxGroup"), ("LLDP-V2-MIB", "lldpV2LocSysGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lldpV2TxCompliance = lldpV2TxCompliance.setStatus('current')
if mibBuilder.loadTexts: lldpV2TxCompliance.setDescription('A compliance statement for SNMP entities that implement\n            the LLDP MIB and have the capability of transmitting\n            LLDP frames.\n\n            This version defines compliance requirements for\n            V2 of the LLDP MIB module.')
lldpV2RxCompliance = ModuleCompliance((1, 3, 111, 2, 802, 1, 1, 13, 2, 1, 3)).setObjects(("LLDP-V2-MIB", "lldpV2ConfigRxGroup"), ("LLDP-V2-MIB", "lldpV2StatsRxGroup"), ("LLDP-V2-MIB", "lldpV2RemSysGroup"), ("LLDP-V2-MIB", "lldpV2NotificationsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lldpV2RxCompliance = lldpV2RxCompliance.setStatus('current')
if mibBuilder.loadTexts: lldpV2RxCompliance.setDescription('The compliance statement for SNMP entities that implement\n            the LLDP MIB.\n\n            This version defines compliance requirements for\n            V2 of the LLDP MIB module.')
lldpV2ConfigGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 13, 2, 2, 1)).setObjects(("LLDP-V2-MIB", "lldpV2PortConfigAdminStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lldpV2ConfigGroup = lldpV2ConfigGroup.setStatus('current')
if mibBuilder.loadTexts: lldpV2ConfigGroup.setDescription('The collection of objects which are used to configure the\n            LLDP implementation behavior.')
lldpV2ConfigRxGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 13, 2, 2, 2)).setObjects(("LLDP-V2-MIB", "lldpV2NotificationInterval"), ("LLDP-V2-MIB", "lldpV2PortConfigNotificationEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lldpV2ConfigRxGroup = lldpV2ConfigRxGroup.setStatus('current')
if mibBuilder.loadTexts: lldpV2ConfigRxGroup.setDescription('The collection of objects which are used to configure the\n            LLDP implementation behavior.')
lldpV2ConfigTxGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 13, 2, 2, 3)).setObjects(("LLDP-V2-MIB", "lldpV2MessageTxInterval"), ("LLDP-V2-MIB", "lldpV2MessageTxHoldMultiplier"), ("LLDP-V2-MIB", "lldpV2ReinitDelay"), ("LLDP-V2-MIB", "lldpV2PortConfigTLVsTxEnable"), ("LLDP-V2-MIB", "lldpV2ManAddrConfigTxEnable"), ("LLDP-V2-MIB", "lldpV2ManAddrConfigRowStatus"), ("LLDP-V2-MIB", "lldpV2TxCreditMax"), ("LLDP-V2-MIB", "lldpV2MessageFastTx"), ("LLDP-V2-MIB", "lldpV2TxFastInit"), ("LLDP-V2-MIB", "lldpV2DestMacAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lldpV2ConfigTxGroup = lldpV2ConfigTxGroup.setStatus('current')
if mibBuilder.loadTexts: lldpV2ConfigTxGroup.setDescription('The collection of objects which are used to configure the\n            LLDP implementation behavior.')
lldpV2StatsRxGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 13, 2, 2, 4)).setObjects(("LLDP-V2-MIB", "lldpV2StatsRemTablesLastChangeTime"), ("LLDP-V2-MIB", "lldpV2StatsRemTablesInserts"), ("LLDP-V2-MIB", "lldpV2StatsRemTablesDeletes"), ("LLDP-V2-MIB", "lldpV2StatsRemTablesDrops"), ("LLDP-V2-MIB", "lldpV2StatsRemTablesAgeouts"), ("LLDP-V2-MIB", "lldpV2StatsRxPortFramesDiscardedTotal"), ("LLDP-V2-MIB", "lldpV2StatsRxPortFramesErrors"), ("LLDP-V2-MIB", "lldpV2StatsRxPortFramesTotal"), ("LLDP-V2-MIB", "lldpV2StatsRxPortTLVsDiscardedTotal"), ("LLDP-V2-MIB", "lldpV2StatsRxPortTLVsUnrecognizedTotal"), ("LLDP-V2-MIB", "lldpV2StatsRxPortAgeoutsTotal"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lldpV2StatsRxGroup = lldpV2StatsRxGroup.setStatus('current')
if mibBuilder.loadTexts: lldpV2StatsRxGroup.setDescription('The collection of objects which are used to represent LLDP\n            reception statistics.')
lldpV2StatsTxGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 13, 2, 2, 5)).setObjects(("LLDP-V2-MIB", "lldpV2StatsTxPortFramesTotal"), ("LLDP-V2-MIB", "lldpV2StatsTxLLDPDULengthErrors"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lldpV2StatsTxGroup = lldpV2StatsTxGroup.setStatus('current')
if mibBuilder.loadTexts: lldpV2StatsTxGroup.setDescription('The collection of objects which are used to represent LLDP\n            transmission statistics.')
lldpV2LocSysGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 13, 2, 2, 6)).setObjects(("LLDP-V2-MIB", "lldpV2LocChassisIdSubtype"), ("LLDP-V2-MIB", "lldpV2LocChassisId"), ("LLDP-V2-MIB", "lldpV2LocPortIdSubtype"), ("LLDP-V2-MIB", "lldpV2LocPortId"), ("LLDP-V2-MIB", "lldpV2LocPortDesc"), ("LLDP-V2-MIB", "lldpV2LocSysDesc"), ("LLDP-V2-MIB", "lldpV2LocSysName"), ("LLDP-V2-MIB", "lldpV2LocSysCapSupported"), ("LLDP-V2-MIB", "lldpV2LocSysCapEnabled"), ("LLDP-V2-MIB", "lldpV2LocManAddrLen"), ("LLDP-V2-MIB", "lldpV2LocManAddrIfSubtype"), ("LLDP-V2-MIB", "lldpV2LocManAddrIfId"), ("LLDP-V2-MIB", "lldpV2LocManAddrOID"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lldpV2LocSysGroup = lldpV2LocSysGroup.setStatus('current')
if mibBuilder.loadTexts: lldpV2LocSysGroup.setDescription('The collection of objects which are used to represent LLDP\n            Local System Information.')
lldpV2RemSysGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 13, 2, 2, 7)).setObjects(("LLDP-V2-MIB", "lldpV2RemChassisIdSubtype"), ("LLDP-V2-MIB", "lldpV2RemChassisId"), ("LLDP-V2-MIB", "lldpV2RemPortIdSubtype"), ("LLDP-V2-MIB", "lldpV2RemPortId"), ("LLDP-V2-MIB", "lldpV2RemPortDesc"), ("LLDP-V2-MIB", "lldpV2RemSysName"), ("LLDP-V2-MIB", "lldpV2RemSysDesc"), ("LLDP-V2-MIB", "lldpV2RemSysCapSupported"), ("LLDP-V2-MIB", "lldpV2RemSysCapEnabled"), ("LLDP-V2-MIB", "lldpV2RemRemoteChanges"), ("LLDP-V2-MIB", "lldpV2RemTooManyNeighbors"), ("LLDP-V2-MIB", "lldpV2RemManAddrIfSubtype"), ("LLDP-V2-MIB", "lldpV2RemManAddrIfId"), ("LLDP-V2-MIB", "lldpV2RemManAddrOID"), ("LLDP-V2-MIB", "lldpV2RemUnknownTLVInfo"), ("LLDP-V2-MIB", "lldpV2RemOrgDefInfo"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lldpV2RemSysGroup = lldpV2RemSysGroup.setStatus('current')
if mibBuilder.loadTexts: lldpV2RemSysGroup.setDescription("The collection of objects which are used to represent\n            LLDP Remote Systems Information. The objects represent the\n            information associated with the basic TLV set. Please note\n            that even the agent doesn't implement some of the optional\n            TLVs, it shall recognize all the optional TLV information\n            that the remote system may advertise.")
lldpV2NotificationsGroup = NotificationGroup((1, 3, 111, 2, 802, 1, 1, 13, 2, 2, 8)).setObjects(("LLDP-V2-MIB", "lldpV2RemTablesChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lldpV2NotificationsGroup = lldpV2NotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: lldpV2NotificationsGroup.setDescription('The collection of notifications used to indicate LLDP MIB\n            data consistency and general status information.')
mibBuilder.exportSymbols("LLDP-V2-MIB", lldpV2RemPortId=lldpV2RemPortId, lldpV2ManAddrConfigTxPortsEntry=lldpV2ManAddrConfigTxPortsEntry, lldpV2NotificationInterval=lldpV2NotificationInterval, lldpV2LocPortEntry=lldpV2LocPortEntry, lldpV2RemManAddrTable=lldpV2RemManAddrTable, lldpV2RemOrgDefInfoTable=lldpV2RemOrgDefInfoTable, lldpV2RemOrgDefInfoEntry=lldpV2RemOrgDefInfoEntry, lldpV2StatsRemTablesLastChangeTime=lldpV2StatsRemTablesLastChangeTime, lldpV2RemTooManyNeighbors=lldpV2RemTooManyNeighbors, lldpV2TxCompliance=lldpV2TxCompliance, lldpV2DestMacAddress=lldpV2DestMacAddress, lldpV2RemUnknownTLVTable=lldpV2RemUnknownTLVTable, lldpV2Extensions=lldpV2Extensions, lldpV2RemUnknownTLVEntry=lldpV2RemUnknownTLVEntry, lldpV2LocChassisIdSubtype=lldpV2LocChassisIdSubtype, lldpV2StatsRxDestMACAddress=lldpV2StatsRxDestMACAddress, lldpV2PortConfigTable=lldpV2PortConfigTable, lldpV2StatsTxIfIndex=lldpV2StatsTxIfIndex, lldpV2StatsRxPortTLVsDiscardedTotal=lldpV2StatsRxPortTLVsDiscardedTotal, lldpV2MessageTxInterval=lldpV2MessageTxInterval, lldpV2RemSysCapSupported=lldpV2RemSysCapSupported, lldpV2Objects=lldpV2Objects, lldpV2RemOrgDefInfoOUI=lldpV2RemOrgDefInfoOUI, lldpV2ManAddrConfigTxPortsTable=lldpV2ManAddrConfigTxPortsTable, lldpV2MIB=lldpV2MIB, lldpV2NotificationPrefix=lldpV2NotificationPrefix, lldpV2StatsRemTablesAgeouts=lldpV2StatsRemTablesAgeouts, lldpV2ManAddrConfigRowStatus=lldpV2ManAddrConfigRowStatus, lldpV2MessageFastTx=lldpV2MessageFastTx, lldpV2RemSysCapEnabled=lldpV2RemSysCapEnabled, lldpV2Conformance=lldpV2Conformance, lldpV2LocalSystemData=lldpV2LocalSystemData, lldpV2LocManAddrEntry=lldpV2LocManAddrEntry, lldpV2RemSysName=lldpV2RemSysName, lldpV2RemRemoteChanges=lldpV2RemRemoteChanges, lldpV2RemEntry=lldpV2RemEntry, lldpV2LocPortId=lldpV2LocPortId, lldpV2StatsRxPortFramesDiscardedTotal=lldpV2StatsRxPortFramesDiscardedTotal, lldpV2StatsRxPortEntry=lldpV2StatsRxPortEntry, lldpV2ManAddrConfigDestAddressIndex=lldpV2ManAddrConfigDestAddressIndex, lldpV2PortConfigDestAddressIndex=lldpV2PortConfigDestAddressIndex, lldpV2StatsRxPortFramesErrors=lldpV2StatsRxPortFramesErrors, lldpV2RemOrgDefInfoSubtype=lldpV2RemOrgDefInfoSubtype, lldpV2RemManAddrOID=lldpV2RemManAddrOID, lldpV2StatsRemTablesInserts=lldpV2StatsRemTablesInserts, lldpV2LocChassisId=lldpV2LocChassisId, lldpV2LocPortTable=lldpV2LocPortTable, lldpV2DestAddressTableEntry=lldpV2DestAddressTableEntry, lldpV2NotificationsGroup=lldpV2NotificationsGroup, lldpV2RemManAddrIfSubtype=lldpV2RemManAddrIfSubtype, lldpV2RemChassisIdSubtype=lldpV2RemChassisIdSubtype, lldpV2RemoteSystemsData=lldpV2RemoteSystemsData, lldpV2PortConfigAdminStatus=lldpV2PortConfigAdminStatus, lldpV2RemTablesChange=lldpV2RemTablesChange, lldpV2RemManAddrSubtype=lldpV2RemManAddrSubtype, lldpV2StatsTxPortTable=lldpV2StatsTxPortTable, lldpV2ConfigTxGroup=lldpV2ConfigTxGroup, lldpV2RemPortIdSubtype=lldpV2RemPortIdSubtype, lldpV2LocSysDesc=lldpV2LocSysDesc, lldpV2StatsTxGroup=lldpV2StatsTxGroup, lldpV2StatsRemTablesDeletes=lldpV2StatsRemTablesDeletes, lldpV2LocSysCapEnabled=lldpV2LocSysCapEnabled, lldpV2RxCompliance=lldpV2RxCompliance, lldpV2LocManAddrTable=lldpV2LocManAddrTable, lldpV2LocPortIfIndex=lldpV2LocPortIfIndex, lldpV2TxFastInit=lldpV2TxFastInit, lldpV2StatsTxDestMACAddress=lldpV2StatsTxDestMACAddress, lldpV2Compliances=lldpV2Compliances, lldpV2TxRxCompliance=lldpV2TxRxCompliance, lldpV2ManAddrConfigLocManAddr=lldpV2ManAddrConfigLocManAddr, lldpV2StatsRxDestIfIndex=lldpV2StatsRxDestIfIndex, lldpV2ConfigRxGroup=lldpV2ConfigRxGroup, lldpV2ManAddrConfigIfIndex=lldpV2ManAddrConfigIfIndex, lldpV2RemManAddrEntry=lldpV2RemManAddrEntry, lldpV2LocSysCapSupported=lldpV2LocSysCapSupported, lldpV2StatsRxGroup=lldpV2StatsRxGroup, lldpV2RemManAddrIfId=lldpV2RemManAddrIfId, lldpV2LocPortDesc=lldpV2LocPortDesc, lldpV2RemManAddr=lldpV2RemManAddr, lldpV2ConfigGroup=lldpV2ConfigGroup, lldpV2RemTable=lldpV2RemTable, lldpV2ReinitDelay=lldpV2ReinitDelay, lldpV2TxCreditMax=lldpV2TxCreditMax, lldpV2StatsTxPortFramesTotal=lldpV2StatsTxPortFramesTotal, lldpV2RemPortDesc=lldpV2RemPortDesc, lldpV2StatsRxPortTable=lldpV2StatsRxPortTable, lldpV2StatsRxPortTLVsUnrecognizedTotal=lldpV2StatsRxPortTLVsUnrecognizedTotal, lldpV2RemUnknownTLVType=lldpV2RemUnknownTLVType, lldpV2PortConfigEntry=lldpV2PortConfigEntry, lldpV2StatsRxPortFramesTotal=lldpV2StatsRxPortFramesTotal, lldpV2Groups=lldpV2Groups, lldpV2Notifications=lldpV2Notifications, lldpV2Statistics=lldpV2Statistics, lldpV2StatsRemTablesDrops=lldpV2StatsRemTablesDrops, lldpV2LocPortIdSubtype=lldpV2LocPortIdSubtype, lldpV2PortConfigTLVsTxEnable=lldpV2PortConfigTLVsTxEnable, lldpV2RemLocalIfIndex=lldpV2RemLocalIfIndex, lldpV2RemUnknownTLVInfo=lldpV2RemUnknownTLVInfo, lldpV2PortConfigNotificationEnable=lldpV2PortConfigNotificationEnable, PYSNMP_MODULE_ID=lldpV2MIB, lldpV2LocManAddrLen=lldpV2LocManAddrLen, lldpV2Configuration=lldpV2Configuration, lldpV2StatsTxPortEntry=lldpV2StatsTxPortEntry, lldpV2ManAddrConfigLocManAddrSubtype=lldpV2ManAddrConfigLocManAddrSubtype, lldpV2LocManAddrIfId=lldpV2LocManAddrIfId, lldpV2MessageTxHoldMultiplier=lldpV2MessageTxHoldMultiplier, lldpV2LocManAddrIfSubtype=lldpV2LocManAddrIfSubtype, lldpV2LocSysName=lldpV2LocSysName, lldpV2RemSysGroup=lldpV2RemSysGroup, lldpV2RemSysDesc=lldpV2RemSysDesc, lldpV2ManAddrConfigTxEnable=lldpV2ManAddrConfigTxEnable, lldpV2LocManAddrOID=lldpV2LocManAddrOID, lldpV2LocManAddrSubtype=lldpV2LocManAddrSubtype, lldpV2RemIndex=lldpV2RemIndex, lldpV2LocManAddr=lldpV2LocManAddr, lldpV2RemChassisId=lldpV2RemChassisId, lldpV2LocSysGroup=lldpV2LocSysGroup, lldpV2StatsTxLLDPDULengthErrors=lldpV2StatsTxLLDPDULengthErrors, lldpV2RemLocalDestMACAddress=lldpV2RemLocalDestMACAddress, lldpV2PortConfigIfIndex=lldpV2PortConfigIfIndex, lldpV2RemTimeMark=lldpV2RemTimeMark, lldpV2RemOrgDefInfoIndex=lldpV2RemOrgDefInfoIndex, lldpV2RemOrgDefInfo=lldpV2RemOrgDefInfo, lldpV2DestAddressTable=lldpV2DestAddressTable, lldpV2AddressTableIndex=lldpV2AddressTableIndex, lldpV2StatsRxPortAgeoutsTotal=lldpV2StatsRxPortAgeoutsTotal)
