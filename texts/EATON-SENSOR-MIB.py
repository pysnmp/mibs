#
# PySNMP MIB module EATON-SENSOR-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/eaton/EATON-SENSOR-MIB
# Produced by pysmi-1.1.12 at Tue Jun  4 13:02:01 2024
# On host fv-az1108-994 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint")
sensorAgent, = mibBuilder.importSymbols("EATON-OIDS", "sensorAgent")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Integer32, NotificationType, Counter32, iso, IpAddress, TimeTicks, Gauge32, Unsigned32, ModuleIdentity, Counter64, MibIdentifier, Bits, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "NotificationType", "Counter32", "iso", "IpAddress", "TimeTicks", "Gauge32", "Unsigned32", "ModuleIdentity", "Counter64", "MibIdentifier", "Bits", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
eatonSensor = ModuleIdentity((1, 3, 6, 1, 4, 1, 534, 6, 8, 1))
eatonSensor.setRevisions(('2018-12-17 12:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: eatonSensor.setRevisionsDescriptions(('Initial release.',))
if mibBuilder.loadTexts: eatonSensor.setLastUpdated('201812171200Z')
if mibBuilder.loadTexts: eatonSensor.setOrganization('Eaton Corporation')
if mibBuilder.loadTexts: eatonSensor.setContactInfo('http://powerquality.eaton.com')
if mibBuilder.loadTexts: eatonSensor.setDescription('The MIB module for Eaton Sensors.')
sensor = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 1))
temperature = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 2))
humidity = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 3))
digitalInput = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 4))
conformance = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 10))
class UnixTimeStamp(TextualConvention, Counter32):
    description = 'Unix time stamp. Measured in seconds since January 1, 1970.'
    status = 'current'
    displayHint = 'dddddddddd'

class PositionType(TextualConvention, Integer32):
    description = 'Describes the position by reference to the data center aisle.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("undefined", 0), ("other", 1), ("rackRear", 2), ("rackFront", 3), ("batteryRoom", 4))

class ElevationType(TextualConvention, Integer32):
    description = 'Describes the elevation in the rack.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("undefined", 0), ("other", 1), ("bottom", 2), ("middle", 3), ("top", 4))

class CommunicationStatus(TextualConvention, Integer32):
    description = 'Describes the communication sensor status or probe status.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 2, 3))
    namedValues = NamedValues(("unknown", 0), ("communicationOK", 2), ("communicationLost", 3))

class ProbeConnectionType(TextualConvention, Integer32):
    description = 'Describes the probe connection to the sensor or probe.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("undefined", 0), ("internal", 1), ("wired", 2), ("wireless", 3))

class EnableType(TextualConvention, Integer32):
    description = 'Describes enable/disable.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("disabled", 0), ("enabled", 1))

class AlarmType(TextualConvention, Integer32):
    description = 'Describes the alarm according to a measured value by reference to the triggers.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("good", 0), ("lowWarning", 1), ("lowCritical", 2), ("highWarning", 3), ("highCritical", 4))

class ResetCommandType(TextualConvention, Integer32):
    description = 'Commands a reset.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("none", 0), ("reset", 1))

class PolarityType(TextualConvention, Integer32):
    description = 'Describes the polarity configuration.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("normallyOpened", 0), ("normallyClosed", 1))

class AlarmSeverityType(TextualConvention, Integer32):
    description = 'Describes the alarm severity.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("informationnal", 1), ("warning", 2), ("critical", 3))

class AlarmLevelType(TextualConvention, Integer32):
    description = 'Describes the alarm level.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("good", 0), ("informationnal", 1), ("warning", 2), ("critical", 3))

class StateType(TextualConvention, Integer32):
    description = 'Describes the state of a digital input that depends on its measure\n                 and the polrity configuration.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("inactive", 0), ("active", 1))

class TemperatureUnitType(TextualConvention, Integer32):
    description = 'Describes the temperature unit used to read/write the temperature data.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("tenthOfDegKelvin", 0), ("tenthOfDegCelsius", 1), ("tenthOfDegFarhenheit", 2))

sensorCount = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorCount.setStatus('current')
if mibBuilder.loadTexts: sensorCount.setDescription('Number of sensor managed on this device.')
sensorIdentificationTable = MibTable((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 1, 2), )
if mibBuilder.loadTexts: sensorIdentificationTable.setStatus('current')
if mibBuilder.loadTexts: sensorIdentificationTable.setDescription('A list of sensor devices identification data.\n         The number of entries is given by sensorCount.')
sensorIdentificationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 1, 2, 1), ).setIndexNames((0, "EATON-SENSOR-MIB", "sensorIndex"))
if mibBuilder.loadTexts: sensorIdentificationEntry.setStatus('current')
if mibBuilder.loadTexts: sensorIdentificationEntry.setDescription('An entry for a sensor device identification.')
sensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: sensorIndex.setStatus('current')
if mibBuilder.loadTexts: sensorIndex.setDescription('A unique value for each sensor device.  Its value\n         ranges from 1 to sensorCount.')
sensorUuid = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 1, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorUuid.setStatus('current')
if mibBuilder.loadTexts: sensorUuid.setDescription('A unique uuid value for each sensor device.')
sensorConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 1, 2, 1, 3), ProbeConnectionType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorConnectionType.setStatus('current')
if mibBuilder.loadTexts: sensorConnectionType.setDescription('Sensor connection type with the device that monitors it.')
sensorAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 1, 2, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorAddress.setStatus('current')
if mibBuilder.loadTexts: sensorAddress.setDescription('Depending of the connection implementation : Modbus Slave Id, BT Mac address, ...')
sensorMonitoredBy = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 1, 2, 1, 5), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorMonitoredBy.setStatus('current')
if mibBuilder.loadTexts: sensorMonitoredBy.setDescription('Parent oid device where the sensor is connected to and monitored by.')
sensorManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 1, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorManufacturer.setStatus('current')
if mibBuilder.loadTexts: sensorManufacturer.setDescription('The vendor name of the sensor device.')
sensorModel = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 1, 2, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorModel.setStatus('current')
if mibBuilder.loadTexts: sensorModel.setDescription('The model name of the sensor device.')
sensorPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 1, 2, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorPartNumber.setStatus('current')
if mibBuilder.loadTexts: sensorPartNumber.setDescription('The catalog part number of the sensor device.')
sensorSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 1, 2, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorSerialNumber.setStatus('current')
if mibBuilder.loadTexts: sensorSerialNumber.setDescription('The serial number of the sensor device.')
sensorFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 1, 2, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorFirmwareVersion.setStatus('current')
if mibBuilder.loadTexts: sensorFirmwareVersion.setDescription('The firmware version of the sensor device.')
sensorConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 1, 3), )
if mibBuilder.loadTexts: sensorConfigurationTable.setStatus('current')
if mibBuilder.loadTexts: sensorConfigurationTable.setDescription('A list of sensor devices configuration data.\n         The number of entries is given by sensorCount.')
sensorConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 1, 3, 1), ).setIndexNames((0, "EATON-SENSOR-MIB", "sensorIndex"))
if mibBuilder.loadTexts: sensorConfigurationEntry.setStatus('current')
if mibBuilder.loadTexts: sensorConfigurationEntry.setDescription('An entry for a sensor device configuration.')
sensorName = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 1, 3, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorName.setStatus('current')
if mibBuilder.loadTexts: sensorName.setDescription('The friendly name of the sensor device.')
sensorLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 1, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorLocation.setStatus('current')
if mibBuilder.loadTexts: sensorLocation.setDescription('The location of the sensor device.')
sensorPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 1, 3, 1, 3), PositionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorPosition.setStatus('current')
if mibBuilder.loadTexts: sensorPosition.setDescription('The Position by reference to the data center aisle.')
sensorElevation = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 1, 3, 1, 4), ElevationType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorElevation.setStatus('current')
if mibBuilder.loadTexts: sensorElevation.setDescription('The Elevation in the rack.')
sensorUElevation = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 1, 3, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorUElevation.setStatus('current')
if mibBuilder.loadTexts: sensorUElevation.setDescription('The elevation in the rack in count of U position from the bottom.')
sensorMonitoringTable = MibTable((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 1, 4), )
if mibBuilder.loadTexts: sensorMonitoringTable.setStatus('current')
if mibBuilder.loadTexts: sensorMonitoringTable.setDescription('A list of sensor devices monitoring data.\n         The number of entries is given by sensorCount.')
sensorMonitoringEntry = MibTableRow((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 1, 4, 1), ).setIndexNames((0, "EATON-SENSOR-MIB", "sensorIndex"))
if mibBuilder.loadTexts: sensorMonitoringEntry.setStatus('current')
if mibBuilder.loadTexts: sensorMonitoringEntry.setDescription('An entry for a sensor device monitoring.')
sensorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 1, 4, 1, 1), CommunicationStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorStatus.setStatus('current')
if mibBuilder.loadTexts: sensorStatus.setDescription('Indicates how the sensor is communicating or not.')
sensorStatusSince = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 1, 4, 1, 2), UnixTimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorStatusSince.setStatus('current')
if mibBuilder.loadTexts: sensorStatusSince.setDescription('UTC time in seconds since 1970/01/01 dating the sensor status last change.')
sensorTemperatureCount = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 1, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorTemperatureCount.setStatus('current')
if mibBuilder.loadTexts: sensorTemperatureCount.setDescription('Number of temperature probes managed by the sensor device.')
sensorHumidityCount = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 1, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorHumidityCount.setStatus('current')
if mibBuilder.loadTexts: sensorHumidityCount.setDescription('Number of humidity probes managed by the sensor device.')
sensorDigitalInputCount = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 1, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorDigitalInputCount.setStatus('current')
if mibBuilder.loadTexts: sensorDigitalInputCount.setDescription('Number of digital input probes managed by the sensor device.')
sensorAnalogInputCount = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 1, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorAnalogInputCount.setStatus('current')
if mibBuilder.loadTexts: sensorAnalogInputCount.setDescription('Number of analog input probes managed by the sensor device.')
sensorNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 1, 0))
notifySensorCount = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 1, 0, 1)).setObjects(("EATON-SENSOR-MIB", "sensorCount"))
if mibBuilder.loadTexts: notifySensorCount.setStatus('current')
if mibBuilder.loadTexts: notifySensorCount.setDescription('Sent whenever the sensor count changes after a discovery or removing \n         from the UI.')
notifySensorStatus = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 1, 0, 2)).setObjects(("EATON-SENSOR-MIB", "sensorIndex"), ("EATON-SENSOR-MIB", "sensorUuid"), ("EATON-SENSOR-MIB", "sensorStatus"), ("EATON-SENSOR-MIB", "sensorStatusSince"))
if mibBuilder.loadTexts: notifySensorStatus.setStatus('current')
if mibBuilder.loadTexts: notifySensorStatus.setDescription('Sent whenever the sensor status changes.')
temperatureIdentificationTable = MibTable((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 2, 1), )
if mibBuilder.loadTexts: temperatureIdentificationTable.setStatus('current')
if mibBuilder.loadTexts: temperatureIdentificationTable.setDescription('A list of temperature probe measurements. the number of entries\n         is given by the temperature count.')
temperatureIdentificationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 2, 1, 1), ).setIndexNames((0, "EATON-SENSOR-MIB", "sensorIndex"), (0, "EATON-SENSOR-MIB", "temperatureIndex"))
if mibBuilder.loadTexts: temperatureIdentificationEntry.setStatus('current')
if mibBuilder.loadTexts: temperatureIdentificationEntry.setDescription('An entry for a temperature probe identification.')
temperatureIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: temperatureIndex.setStatus('current')
if mibBuilder.loadTexts: temperatureIndex.setDescription('A unique value for each temperature probe measurement.  Its value\n              ranges from 1 to sensorTemperatureCount.')
temperatureUuid = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 2, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureUuid.setStatus('current')
if mibBuilder.loadTexts: temperatureUuid.setDescription('A unique uuid value for each temperature.')
temperatureConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 2, 1, 1, 3), ProbeConnectionType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureConnectionType.setStatus('current')
if mibBuilder.loadTexts: temperatureConnectionType.setDescription('Probe connection type with the sensor that monitors it.')
temperatureConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 2, 2), )
if mibBuilder.loadTexts: temperatureConfigurationTable.setStatus('current')
if mibBuilder.loadTexts: temperatureConfigurationTable.setDescription('A list of temperature probe configuration.  The number of entries is\n              given by sensorTemperatureCount.')
temperatureConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 2, 2, 1), ).setIndexNames((0, "EATON-SENSOR-MIB", "sensorIndex"), (0, "EATON-SENSOR-MIB", "temperatureIndex"))
if mibBuilder.loadTexts: temperatureConfigurationEntry.setStatus('current')
if mibBuilder.loadTexts: temperatureConfigurationEntry.setDescription('An entry for a temperature probe configuration.')
temperatureName = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 2, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureName.setStatus('current')
if mibBuilder.loadTexts: temperatureName.setDescription('The friendly name of the sensor temperature probe.')
temperatureEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 2, 2, 1, 2), EnableType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureEnable.setStatus('current')
if mibBuilder.loadTexts: temperatureEnable.setDescription('Configure the temperature acquired or not.\n         0:disabled, 1:enabled')
temperatureOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 2, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureOffset.setStatus('current')
if mibBuilder.loadTexts: temperatureOffset.setDescription('Configure the offset (Minus or Plus) to be added to the acquired value\n         in order to correct the probe measurement error.\n         See temperatureUnit data for the units.')
temperatureAlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 2, 2, 1, 4), EnableType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureAlarmEnable.setStatus('current')
if mibBuilder.loadTexts: temperatureAlarmEnable.setDescription('Configure the temperature alarm depending on the thresholds evaluated or not.\n         0:disabled, 1:enabled')
temperatureThresholdLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 2, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureThresholdLowWarning.setStatus('current')
if mibBuilder.loadTexts: temperatureThresholdLowWarning.setDescription('Low warning temperature threshold.\n         See temperatureUnit data for the units.')
temperatureThresholdLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 2, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureThresholdLowCritical.setStatus('current')
if mibBuilder.loadTexts: temperatureThresholdLowCritical.setDescription('Low critical temperature threshold.\n         See temperatureUnit data for the units.')
temperatureThresholdHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 2, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureThresholdHighWarning.setStatus('current')
if mibBuilder.loadTexts: temperatureThresholdHighWarning.setDescription('High warning temperature threshold.\n         See temperatureUnit data for the units.')
temperatureThresholdHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 2, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureThresholdHighCritical.setStatus('current')
if mibBuilder.loadTexts: temperatureThresholdHighCritical.setDescription('High critical temperature threshold.\n         See temperatureUnit data for the units.')
temperatureThresholdHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 2, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureThresholdHysteresis.setStatus('current')
if mibBuilder.loadTexts: temperatureThresholdHysteresis.setDescription('Temperature threshold hysteresis.\n         See temperatureUnit data for the units.')
temperatureAlarmGracePeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureAlarmGracePeriod.setStatus('current')
if mibBuilder.loadTexts: temperatureAlarmGracePeriod.setDescription('The grace period the alarm triggers after the acquired value crosses\n         a trigger value (in seconds).')
temperatureMonitoringTable = MibTable((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 2, 3), )
if mibBuilder.loadTexts: temperatureMonitoringTable.setStatus('current')
if mibBuilder.loadTexts: temperatureMonitoringTable.setDescription('A list of temperature probe monitoring.  The number of entries is\n         given by sensorTemperatureCount.')
temperatureMonitoringEntry = MibTableRow((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 2, 3, 1), ).setIndexNames((0, "EATON-SENSOR-MIB", "sensorIndex"), (0, "EATON-SENSOR-MIB", "temperatureIndex"))
if mibBuilder.loadTexts: temperatureMonitoringEntry.setStatus('current')
if mibBuilder.loadTexts: temperatureMonitoringEntry.setDescription('An entry for a temperature probe monitoring.')
temperatureAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 2, 3, 1, 1), AlarmType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureAlarm.setStatus('current')
if mibBuilder.loadTexts: temperatureAlarm.setDescription('Alarm set according to the realtime measure compared to the thresholds.')
temperatureAlarmChangeSince = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 2, 3, 1, 2), UnixTimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureAlarmChangeSince.setStatus('current')
if mibBuilder.loadTexts: temperatureAlarmChangeSince.setDescription('UTC time in seconds since 1970/01/01 dating the temperature alarm last change.')
temperatureValue = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 2, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureValue.setStatus('current')
if mibBuilder.loadTexts: temperatureValue.setDescription('Realtime measured value after correction with the offset.\n         See temperatureUnit data for the units.')
temperatureCommunicationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 2, 3, 1, 4), CommunicationStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureCommunicationStatus.setStatus('current')
if mibBuilder.loadTexts: temperatureCommunicationStatus.setDescription('Indicates how the temperature probe is communicating or not.')
temperatureCommunicationStatusSince = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 2, 3, 1, 5), UnixTimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureCommunicationStatusSince.setStatus('current')
if mibBuilder.loadTexts: temperatureCommunicationStatusSince.setDescription('UTC time in seconds since 1970/01/01 dating the temperature communication status last change.')
temperatureMonitoringMinMaxTable = MibTable((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 2, 4), )
if mibBuilder.loadTexts: temperatureMonitoringMinMaxTable.setStatus('current')
if mibBuilder.loadTexts: temperatureMonitoringMinMaxTable.setDescription('A list of temperature probe monitoring Min and Max.  The number of entries is\n         given by sensorTemperatureCount.')
temperatureMonitoringMinMaxEntry = MibTableRow((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 2, 4, 1), ).setIndexNames((0, "EATON-SENSOR-MIB", "sensorIndex"), (0, "EATON-SENSOR-MIB", "temperatureIndex"))
if mibBuilder.loadTexts: temperatureMonitoringMinMaxEntry.setStatus('current')
if mibBuilder.loadTexts: temperatureMonitoringMinMaxEntry.setDescription('An entry for a temperature probe monitoring Min and Max.')
temperatureMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureMinValue.setStatus('current')
if mibBuilder.loadTexts: temperatureMinValue.setDescription('Minimum value registered since the 1st connection of the sensor or the last reset.\n         See temperatureUnit data for the units.')
temperatureMinValueSince = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 2, 4, 1, 2), UnixTimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureMinValueSince.setStatus('current')
if mibBuilder.loadTexts: temperatureMinValueSince.setDescription('UTC time in seconds since 1970/01/01 dating the temperature min value last change.')
temperatureMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 2, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureMaxValue.setStatus('current')
if mibBuilder.loadTexts: temperatureMaxValue.setDescription('Maximum value registered since the 1st connection of the sensor or the last reset.\n         See temperatureUnit data for the units.')
temperatureMaxValueSince = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 2, 4, 1, 4), UnixTimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureMaxValueSince.setStatus('current')
if mibBuilder.loadTexts: temperatureMaxValueSince.setDescription('UTC time in seconds since 1970/01/01 dating the temperature max value last change.')
temperatureResetMinMax = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 2, 4, 1, 5), ResetCommandType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureResetMinMax.setStatus('current')
if mibBuilder.loadTexts: temperatureResetMinMax.setDescription('Command that resets the min and max data with the current measure.\n         0:None, 1:Reset')
temperatureUnit = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 2, 5), TemperatureUnitType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureUnit.setStatus('current')
if mibBuilder.loadTexts: temperatureUnit.setDescription('Temperature unit configuration. It is a global setting for all the v1\n         and  v3 SNMP client. It does not involve the temperature unit of data\n         stored and managed in the card. But it does configure the unit the temperatures\n         data are red and written in this Mib.\n         The possible values are tenthOfDegCelsius(0), tenthOfDegFarhenheit(1),\n         tenthOfDegKelvin(2).')
temperatureNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 2, 0))
notifyTemperatureAlarm = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 2, 0, 1)).setObjects(("EATON-SENSOR-MIB", "sensorIndex"), ("EATON-SENSOR-MIB", "temperatureIndex"), ("EATON-SENSOR-MIB", "temperatureUuid"), ("EATON-SENSOR-MIB", "temperatureAlarm"), ("EATON-SENSOR-MIB", "temperatureAlarmChangeSince"), ("EATON-SENSOR-MIB", "temperatureValue"))
if mibBuilder.loadTexts: notifyTemperatureAlarm.setStatus('current')
if mibBuilder.loadTexts: notifyTemperatureAlarm.setDescription('Sent whenever the temperature alarm changes.')
notifyTemperatureCommunicationStatus = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 2, 0, 2)).setObjects(("EATON-SENSOR-MIB", "sensorIndex"), ("EATON-SENSOR-MIB", "temperatureIndex"), ("EATON-SENSOR-MIB", "temperatureUuid"), ("EATON-SENSOR-MIB", "temperatureCommunicationStatus"), ("EATON-SENSOR-MIB", "temperatureCommunicationStatusSince"))
if mibBuilder.loadTexts: notifyTemperatureCommunicationStatus.setStatus('current')
if mibBuilder.loadTexts: notifyTemperatureCommunicationStatus.setDescription('Sent whenever the temperature communication status changes.\n         Is not implemented when the probe is internal (see temperatureConnectionType).')
humidityIdentificationTable = MibTable((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 3, 1), )
if mibBuilder.loadTexts: humidityIdentificationTable.setStatus('current')
if mibBuilder.loadTexts: humidityIdentificationTable.setDescription('A list of humidity probe measurements. the number of entries\n         is given by the humidity count.')
humidityIdentificationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 3, 1, 1), ).setIndexNames((0, "EATON-SENSOR-MIB", "sensorIndex"), (0, "EATON-SENSOR-MIB", "humidityIndex"))
if mibBuilder.loadTexts: humidityIdentificationEntry.setStatus('current')
if mibBuilder.loadTexts: humidityIdentificationEntry.setDescription('An entry for a humidity probe identification.')
humidityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: humidityIndex.setStatus('current')
if mibBuilder.loadTexts: humidityIndex.setDescription('A unique value for each humidity probe measurement.  Its value\n              ranges from 1 to sensorhumidityCount.')
humidityUuid = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 3, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: humidityUuid.setStatus('current')
if mibBuilder.loadTexts: humidityUuid.setDescription('A unique uuid value for each humidity.')
humidityConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 3, 1, 1, 3), ProbeConnectionType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: humidityConnectionType.setStatus('current')
if mibBuilder.loadTexts: humidityConnectionType.setDescription('Probe connection type with the sensor that monitors it.')
humidityConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 3, 2), )
if mibBuilder.loadTexts: humidityConfigurationTable.setStatus('current')
if mibBuilder.loadTexts: humidityConfigurationTable.setDescription('A list of humidity probe configuration.  The number of entries is\n              given by sensorhumidityCount.')
humidityConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 3, 2, 1), ).setIndexNames((0, "EATON-SENSOR-MIB", "sensorIndex"), (0, "EATON-SENSOR-MIB", "humidityIndex"))
if mibBuilder.loadTexts: humidityConfigurationEntry.setStatus('current')
if mibBuilder.loadTexts: humidityConfigurationEntry.setDescription('An entry for a humidity probe configuration.')
humidityName = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 3, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humidityName.setStatus('current')
if mibBuilder.loadTexts: humidityName.setDescription('The friendly name of the sensor humidity probe.')
humidityEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 3, 2, 1, 2), EnableType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humidityEnable.setStatus('current')
if mibBuilder.loadTexts: humidityEnable.setDescription('Configure the humidity acquired or not.\n         0:disabled, 1:enabled')
humidityOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 3, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humidityOffset.setStatus('current')
if mibBuilder.loadTexts: humidityOffset.setDescription('Configure the offset (Minus or Plus) to be added to the acquired value\n         in order to correct the probe measurement error. in tenth of % units.')
humidityAlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 3, 2, 1, 4), EnableType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humidityAlarmEnable.setStatus('current')
if mibBuilder.loadTexts: humidityAlarmEnable.setDescription('Configure the humidity alarm depending on the thresholds evaluated or not.\n         0:disabled, 1:enabled')
humidityThresholdLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 3, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humidityThresholdLowWarning.setStatus('current')
if mibBuilder.loadTexts: humidityThresholdLowWarning.setDescription('Low warning humidity threshold in tenth of % units.')
humidityThresholdLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 3, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humidityThresholdLowCritical.setStatus('current')
if mibBuilder.loadTexts: humidityThresholdLowCritical.setDescription('Low critical humidity threshold in tenth of % units.')
humidityThresholdHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 3, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humidityThresholdHighWarning.setStatus('current')
if mibBuilder.loadTexts: humidityThresholdHighWarning.setDescription('High warning humidity threshold in tenth of % units.')
humidityThresholdHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 3, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humidityThresholdHighCritical.setStatus('current')
if mibBuilder.loadTexts: humidityThresholdHighCritical.setDescription('High critical humidity threshold in tenth of % units.')
humidityThresholdHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 3, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humidityThresholdHysteresis.setStatus('current')
if mibBuilder.loadTexts: humidityThresholdHysteresis.setDescription('humidity threshold hysteresis in tenth of % units.')
humidityAlarmGracePeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 3, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humidityAlarmGracePeriod.setStatus('current')
if mibBuilder.loadTexts: humidityAlarmGracePeriod.setDescription('The grace period the alarm triggers after the acquired value crosses\n         a trigger value (in seconds).')
humidityMonitoringTable = MibTable((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 3, 3), )
if mibBuilder.loadTexts: humidityMonitoringTable.setStatus('current')
if mibBuilder.loadTexts: humidityMonitoringTable.setDescription('A list of humidity probe monitoring.  The number of entries is\n         given by sensorhumidityCount.')
humidityMonitoringEntry = MibTableRow((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 3, 3, 1), ).setIndexNames((0, "EATON-SENSOR-MIB", "sensorIndex"), (0, "EATON-SENSOR-MIB", "humidityIndex"))
if mibBuilder.loadTexts: humidityMonitoringEntry.setStatus('current')
if mibBuilder.loadTexts: humidityMonitoringEntry.setDescription('An entry for a humidity probe monitoring.')
humidityAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 3, 3, 1, 1), AlarmType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: humidityAlarm.setStatus('current')
if mibBuilder.loadTexts: humidityAlarm.setDescription('Alarm set according to the realtime measure compared to the thresholds.')
humidityAlarmChangeSince = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 3, 3, 1, 2), UnixTimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: humidityAlarmChangeSince.setStatus('current')
if mibBuilder.loadTexts: humidityAlarmChangeSince.setDescription('UTC time in seconds since 1970/01/01 dating the humidity alarm last change.')
humidityValue = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 3, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: humidityValue.setStatus('current')
if mibBuilder.loadTexts: humidityValue.setDescription('Realtime measured value after correction with the offset. in tenth of % units.')
humidityCommunicationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 3, 3, 1, 4), CommunicationStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: humidityCommunicationStatus.setStatus('current')
if mibBuilder.loadTexts: humidityCommunicationStatus.setDescription('Indicates how the humidity probe is communicating or not.')
humidityCommunicationStatusSince = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 3, 3, 1, 5), UnixTimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: humidityCommunicationStatusSince.setStatus('current')
if mibBuilder.loadTexts: humidityCommunicationStatusSince.setDescription('UTC time in seconds since 1970/01/01 dating the humidity communication status last change.')
humidityMonitoringMinMaxTable = MibTable((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 3, 4), )
if mibBuilder.loadTexts: humidityMonitoringMinMaxTable.setStatus('current')
if mibBuilder.loadTexts: humidityMonitoringMinMaxTable.setDescription('A list of humidity probe monitoring Min and Max.  The number of entries is\n         given by sensorhumidityCount.')
humidityMonitoringMinMaxEntry = MibTableRow((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 3, 4, 1), ).setIndexNames((0, "EATON-SENSOR-MIB", "sensorIndex"), (0, "EATON-SENSOR-MIB", "humidityIndex"))
if mibBuilder.loadTexts: humidityMonitoringMinMaxEntry.setStatus('current')
if mibBuilder.loadTexts: humidityMonitoringMinMaxEntry.setDescription('An entry for a humidity probe monitoring Min and Max.')
humidityMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 3, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: humidityMinValue.setStatus('current')
if mibBuilder.loadTexts: humidityMinValue.setDescription('Minimum value registered since the 1st connection of the sensor or the last reset.\n         in tenth of % units.')
humidityMinValueSince = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 3, 4, 1, 2), UnixTimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: humidityMinValueSince.setStatus('current')
if mibBuilder.loadTexts: humidityMinValueSince.setDescription('UTC time in seconds since 1970/01/01 dating the humidity min value last change.')
humidityMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 3, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: humidityMaxValue.setStatus('current')
if mibBuilder.loadTexts: humidityMaxValue.setDescription('Maximum value registered since the 1st connection of the sensor or the last reset.\n         in tenth of % units.')
humidityMaxValueSince = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 3, 4, 1, 4), UnixTimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: humidityMaxValueSince.setStatus('current')
if mibBuilder.loadTexts: humidityMaxValueSince.setDescription('UTC time in seconds since 1970/01/01 dating the humidity max value last change.')
humidityResetMinMax = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 3, 4, 1, 5), ResetCommandType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humidityResetMinMax.setStatus('current')
if mibBuilder.loadTexts: humidityResetMinMax.setDescription('Command that resets the min and max data with the current measure.\n         0:None, 1:Reset')
humidityNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 3, 0))
notifyHumidityAlarm = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 3, 0, 1)).setObjects(("EATON-SENSOR-MIB", "sensorIndex"), ("EATON-SENSOR-MIB", "humidityIndex"), ("EATON-SENSOR-MIB", "humidityUuid"), ("EATON-SENSOR-MIB", "humidityAlarm"), ("EATON-SENSOR-MIB", "humidityAlarmChangeSince"), ("EATON-SENSOR-MIB", "humidityValue"))
if mibBuilder.loadTexts: notifyHumidityAlarm.setStatus('current')
if mibBuilder.loadTexts: notifyHumidityAlarm.setDescription('Sent whenever the humidity alarm changes.')
notifyHumidityCommunicationStatus = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 3, 0, 2)).setObjects(("EATON-SENSOR-MIB", "sensorIndex"), ("EATON-SENSOR-MIB", "humidityIndex"), ("EATON-SENSOR-MIB", "humidityUuid"), ("EATON-SENSOR-MIB", "humidityCommunicationStatus"), ("EATON-SENSOR-MIB", "humidityCommunicationStatusSince"))
if mibBuilder.loadTexts: notifyHumidityCommunicationStatus.setStatus('current')
if mibBuilder.loadTexts: notifyHumidityCommunicationStatus.setDescription('Sent whenever the humidity communication status changes.\n         Is not implemented when the probe is internal (see humidityConnectionType).')
digitalInputIdentificationTable = MibTable((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 4, 1), )
if mibBuilder.loadTexts: digitalInputIdentificationTable.setStatus('current')
if mibBuilder.loadTexts: digitalInputIdentificationTable.setDescription('A list of digital input probe measurements.  The number of entries is\n              given by sensorDigitalInputCount.')
digitalInputIdentificationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 4, 1, 1), ).setIndexNames((0, "EATON-SENSOR-MIB", "sensorIndex"), (0, "EATON-SENSOR-MIB", "digitalInputIndex"))
if mibBuilder.loadTexts: digitalInputIdentificationEntry.setStatus('current')
if mibBuilder.loadTexts: digitalInputIdentificationEntry.setDescription('An entry for a digital input identification.')
digitalInputIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: digitalInputIndex.setStatus('current')
if mibBuilder.loadTexts: digitalInputIndex.setDescription('A unique value for each digital input probe measurement.  Its value\n              ranges from 1 to sensorDigitalInputCount.')
digitalInputUuid = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 4, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: digitalInputUuid.setStatus('current')
if mibBuilder.loadTexts: digitalInputUuid.setDescription('A unique uuid value for each digital Input.')
digitalInputConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 4, 1, 1, 3), ProbeConnectionType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: digitalInputConnectionType.setStatus('current')
if mibBuilder.loadTexts: digitalInputConnectionType.setDescription('Probe connection type with the sensor that monitors it.')
digitalInputConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 4, 2), )
if mibBuilder.loadTexts: digitalInputConfigurationTable.setStatus('current')
if mibBuilder.loadTexts: digitalInputConfigurationTable.setDescription('A list of digital input probe configuration.  The number of entries is\n              given by sensorDigitalInputCount.')
digitalInputConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 4, 2, 1), ).setIndexNames((0, "EATON-SENSOR-MIB", "sensorIndex"), (0, "EATON-SENSOR-MIB", "digitalInputIndex"))
if mibBuilder.loadTexts: digitalInputConfigurationEntry.setStatus('current')
if mibBuilder.loadTexts: digitalInputConfigurationEntry.setDescription('An entry for a digital input probe configuration.')
digitalInputName = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 4, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: digitalInputName.setStatus('current')
if mibBuilder.loadTexts: digitalInputName.setDescription('The friendly name of the digital input probe.')
digitalInputEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 4, 2, 1, 2), EnableType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: digitalInputEnable.setStatus('current')
if mibBuilder.loadTexts: digitalInputEnable.setDescription('Configure the digital input acquired or not.\n         0:disabled, 1:enabled')
digitalInputPolarity = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 4, 2, 1, 3), PolarityType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: digitalInputPolarity.setStatus('current')
if mibBuilder.loadTexts: digitalInputPolarity.setDescription('Configure the digitalInput polarity.\n        0 : Normally opened, 1 : Normally closed')
digitalInputAlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 4, 2, 1, 4), EnableType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: digitalInputAlarmEnable.setStatus('current')
if mibBuilder.loadTexts: digitalInputAlarmEnable.setDescription('Configure the digitalInput alarm depending on the polarity evaluated or not.\n         0:disabled, 1:enabled')
digitalInputAlarmSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 4, 2, 1, 5), AlarmSeverityType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: digitalInputAlarmSeverity.setStatus('current')
if mibBuilder.loadTexts: digitalInputAlarmSeverity.setDescription('Configure the alarm severity.')
digitalInputAlarmGracePeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: digitalInputAlarmGracePeriod.setStatus('current')
if mibBuilder.loadTexts: digitalInputAlarmGracePeriod.setDescription('The delay the alarm triggers when the state change event occurs (in seconds).')
digitalInputMonitoringTable = MibTable((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 4, 3), )
if mibBuilder.loadTexts: digitalInputMonitoringTable.setStatus('current')
if mibBuilder.loadTexts: digitalInputMonitoringTable.setDescription('A list of digital input probee monitoring.  The number of entries is\n         given by sensorDigitalInputCount.')
digitalInputMonitoringEntry = MibTableRow((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 4, 3, 1), ).setIndexNames((0, "EATON-SENSOR-MIB", "sensorIndex"), (0, "EATON-SENSOR-MIB", "digitalInputIndex"))
if mibBuilder.loadTexts: digitalInputMonitoringEntry.setStatus('current')
if mibBuilder.loadTexts: digitalInputMonitoringEntry.setDescription('An entry for a digital Input probe.')
digitalInputAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 4, 3, 1, 1), AlarmLevelType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: digitalInputAlarm.setStatus('current')
if mibBuilder.loadTexts: digitalInputAlarm.setDescription('Alarm set according to the polarity and alarm severity configuration.')
digitalInputAlarmChangeSince = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 4, 3, 1, 2), UnixTimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: digitalInputAlarmChangeSince.setStatus('current')
if mibBuilder.loadTexts: digitalInputAlarmChangeSince.setDescription('UTC time in seconds since 1970/01/01 dating the digital input alarm last change.')
digitalInputState = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 4, 3, 1, 3), StateType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: digitalInputState.setStatus('current')
if mibBuilder.loadTexts: digitalInputState.setDescription('Measure of the digital input after applying the polarity configured.\n         0 : Inactive, 1 : Active')
digitalInputStateSince = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 4, 3, 1, 4), UnixTimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: digitalInputStateSince.setStatus('current')
if mibBuilder.loadTexts: digitalInputStateSince.setDescription('UTC time in seconds since 1970/01/01 dating the digital input state last change.')
digitalInputCommunicationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 4, 3, 1, 5), CommunicationStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: digitalInputCommunicationStatus.setStatus('current')
if mibBuilder.loadTexts: digitalInputCommunicationStatus.setDescription('Indicates how the digital input is communicating or not.')
digitalInputCommunicationStatusSince = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 4, 3, 1, 6), UnixTimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: digitalInputCommunicationStatusSince.setStatus('current')
if mibBuilder.loadTexts: digitalInputCommunicationStatusSince.setDescription('UTC time in seconds since 1970/01/01 dating the digital input communication status last change.')
digitalInputNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 4, 0))
notifyDigitalInputAlarm = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 4, 0, 1)).setObjects(("EATON-SENSOR-MIB", "sensorIndex"), ("EATON-SENSOR-MIB", "digitalInputIndex"), ("EATON-SENSOR-MIB", "digitalInputUuid"), ("EATON-SENSOR-MIB", "digitalInputAlarm"), ("EATON-SENSOR-MIB", "digitalInputAlarmChangeSince"), ("EATON-SENSOR-MIB", "digitalInputState"), ("EATON-SENSOR-MIB", "digitalInputStateSince"))
if mibBuilder.loadTexts: notifyDigitalInputAlarm.setStatus('current')
if mibBuilder.loadTexts: notifyDigitalInputAlarm.setDescription('Sent whenever the digital input alarm changes.')
notifydigitalInputCommunicationStatus = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 4, 0, 2)).setObjects(("EATON-SENSOR-MIB", "sensorIndex"), ("EATON-SENSOR-MIB", "digitalInputIndex"), ("EATON-SENSOR-MIB", "digitalInputUuid"), ("EATON-SENSOR-MIB", "digitalInputCommunicationStatus"), ("EATON-SENSOR-MIB", "digitalInputCommunicationStatusSince"))
if mibBuilder.loadTexts: notifydigitalInputCommunicationStatus.setStatus('current')
if mibBuilder.loadTexts: notifydigitalInputCommunicationStatus.setDescription('Sent whenever the digital input communication status changes.\n         Is not implemented when the probe is internal (see digitalInputConnectionType).')
eatonSensorCompliances = ModuleCompliance((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 10, 1)).setObjects(("EATON-SENSOR-MIB", "sensorRequiredGroup"), ("EATON-SENSOR-MIB", "sensorOptionalGroup"), ("EATON-SENSOR-MIB", "sensorNotifyGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    eatonSensorCompliances = eatonSensorCompliances.setStatus('current')
if mibBuilder.loadTexts: eatonSensorCompliances.setDescription('The requirements for conforming to the Sensor MIB.')
objectGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 10, 2))
sensorRequiredGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 10, 2, 1)).setObjects(("EATON-SENSOR-MIB", "sensorCount"), ("EATON-SENSOR-MIB", "sensorIndex"), ("EATON-SENSOR-MIB", "sensorManufacturer"), ("EATON-SENSOR-MIB", "sensorModel"), ("EATON-SENSOR-MIB", "sensorPartNumber"), ("EATON-SENSOR-MIB", "sensorSerialNumber"), ("EATON-SENSOR-MIB", "sensorFirmwareVersion"), ("EATON-SENSOR-MIB", "sensorName"), ("EATON-SENSOR-MIB", "sensorStatus"), ("EATON-SENSOR-MIB", "sensorStatusSince"), ("EATON-SENSOR-MIB", "sensorTemperatureCount"), ("EATON-SENSOR-MIB", "sensorHumidityCount"), ("EATON-SENSOR-MIB", "sensorDigitalInputCount"), ("EATON-SENSOR-MIB", "temperatureIndex"), ("EATON-SENSOR-MIB", "temperatureName"), ("EATON-SENSOR-MIB", "temperatureValue"), ("EATON-SENSOR-MIB", "temperatureUnit"), ("EATON-SENSOR-MIB", "humidityIndex"), ("EATON-SENSOR-MIB", "humidityName"), ("EATON-SENSOR-MIB", "humidityValue"), ("EATON-SENSOR-MIB", "digitalInputIndex"), ("EATON-SENSOR-MIB", "digitalInputName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sensorRequiredGroup = sensorRequiredGroup.setStatus('current')
if mibBuilder.loadTexts: sensorRequiredGroup.setDescription('These objects are required to conform to this MIB.')
sensorOptionalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 10, 2, 2)).setObjects(("EATON-SENSOR-MIB", "sensorUuid"), ("EATON-SENSOR-MIB", "sensorConnectionType"), ("EATON-SENSOR-MIB", "sensorAddress"), ("EATON-SENSOR-MIB", "sensorMonitoredBy"), ("EATON-SENSOR-MIB", "sensorLocation"), ("EATON-SENSOR-MIB", "sensorPosition"), ("EATON-SENSOR-MIB", "sensorElevation"), ("EATON-SENSOR-MIB", "sensorUElevation"), ("EATON-SENSOR-MIB", "sensorAnalogInputCount"), ("EATON-SENSOR-MIB", "temperatureUuid"), ("EATON-SENSOR-MIB", "temperatureConnectionType"), ("EATON-SENSOR-MIB", "temperatureEnable"), ("EATON-SENSOR-MIB", "temperatureOffset"), ("EATON-SENSOR-MIB", "temperatureAlarmEnable"), ("EATON-SENSOR-MIB", "temperatureThresholdLowWarning"), ("EATON-SENSOR-MIB", "temperatureThresholdLowCritical"), ("EATON-SENSOR-MIB", "temperatureThresholdHighWarning"), ("EATON-SENSOR-MIB", "temperatureThresholdHighCritical"), ("EATON-SENSOR-MIB", "temperatureThresholdHysteresis"), ("EATON-SENSOR-MIB", "temperatureAlarmGracePeriod"), ("EATON-SENSOR-MIB", "temperatureAlarm"), ("EATON-SENSOR-MIB", "temperatureAlarmChangeSince"), ("EATON-SENSOR-MIB", "temperatureCommunicationStatus"), ("EATON-SENSOR-MIB", "temperatureCommunicationStatusSince"), ("EATON-SENSOR-MIB", "temperatureMinValue"), ("EATON-SENSOR-MIB", "temperatureMinValueSince"), ("EATON-SENSOR-MIB", "temperatureMaxValue"), ("EATON-SENSOR-MIB", "temperatureMaxValueSince"), ("EATON-SENSOR-MIB", "temperatureResetMinMax"), ("EATON-SENSOR-MIB", "humidityUuid"), ("EATON-SENSOR-MIB", "humidityConnectionType"), ("EATON-SENSOR-MIB", "humidityEnable"), ("EATON-SENSOR-MIB", "humidityOffset"), ("EATON-SENSOR-MIB", "humidityAlarmEnable"), ("EATON-SENSOR-MIB", "humidityThresholdLowWarning"), ("EATON-SENSOR-MIB", "humidityThresholdLowCritical"), ("EATON-SENSOR-MIB", "humidityThresholdHighWarning"), ("EATON-SENSOR-MIB", "humidityThresholdHighCritical"), ("EATON-SENSOR-MIB", "humidityThresholdHysteresis"), ("EATON-SENSOR-MIB", "humidityAlarmGracePeriod"), ("EATON-SENSOR-MIB", "humidityAlarm"), ("EATON-SENSOR-MIB", "humidityAlarmChangeSince"), ("EATON-SENSOR-MIB", "humidityCommunicationStatus"), ("EATON-SENSOR-MIB", "humidityCommunicationStatusSince"), ("EATON-SENSOR-MIB", "humidityMinValue"), ("EATON-SENSOR-MIB", "humidityMinValueSince"), ("EATON-SENSOR-MIB", "humidityMaxValue"), ("EATON-SENSOR-MIB", "humidityMaxValueSince"), ("EATON-SENSOR-MIB", "humidityResetMinMax"), ("EATON-SENSOR-MIB", "digitalInputUuid"), ("EATON-SENSOR-MIB", "digitalInputConnectionType"), ("EATON-SENSOR-MIB", "digitalInputEnable"), ("EATON-SENSOR-MIB", "digitalInputPolarity"), ("EATON-SENSOR-MIB", "digitalInputAlarmEnable"), ("EATON-SENSOR-MIB", "digitalInputAlarmSeverity"), ("EATON-SENSOR-MIB", "digitalInputAlarmGracePeriod"), ("EATON-SENSOR-MIB", "digitalInputState"), ("EATON-SENSOR-MIB", "digitalInputStateSince"), ("EATON-SENSOR-MIB", "digitalInputAlarm"), ("EATON-SENSOR-MIB", "digitalInputAlarmChangeSince"), ("EATON-SENSOR-MIB", "digitalInputCommunicationStatus"), ("EATON-SENSOR-MIB", "digitalInputCommunicationStatusSince"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sensorOptionalGroup = sensorOptionalGroup.setStatus('current')
if mibBuilder.loadTexts: sensorOptionalGroup.setDescription('These objects in this MIB are optional.')
sensorNotifyGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 534, 6, 8, 1, 10, 2, 3)).setObjects(("EATON-SENSOR-MIB", "notifySensorStatus"), ("EATON-SENSOR-MIB", "notifySensorCount"), ("EATON-SENSOR-MIB", "notifyTemperatureAlarm"), ("EATON-SENSOR-MIB", "notifyTemperatureCommunicationStatus"), ("EATON-SENSOR-MIB", "notifyHumidityAlarm"), ("EATON-SENSOR-MIB", "notifyHumidityCommunicationStatus"), ("EATON-SENSOR-MIB", "notifyDigitalInputAlarm"), ("EATON-SENSOR-MIB", "notifydigitalInputCommunicationStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sensorNotifyGroup = sensorNotifyGroup.setStatus('current')
if mibBuilder.loadTexts: sensorNotifyGroup.setDescription('These notifications will be supported depending on the features of the sensor.')
mibBuilder.exportSymbols("EATON-SENSOR-MIB", sensorMonitoringEntry=sensorMonitoringEntry, digitalInputStateSince=digitalInputStateSince, digitalInputIdentificationTable=digitalInputIdentificationTable, temperatureOffset=temperatureOffset, temperatureThresholdLowCritical=temperatureThresholdLowCritical, temperatureMonitoringMinMaxEntry=temperatureMonitoringMinMaxEntry, humidityMaxValueSince=humidityMaxValueSince, TemperatureUnitType=TemperatureUnitType, sensorHumidityCount=sensorHumidityCount, humidityThresholdLowWarning=humidityThresholdLowWarning, digitalInputAlarmGracePeriod=digitalInputAlarmGracePeriod, sensorOptionalGroup=sensorOptionalGroup, digitalInputState=digitalInputState, temperatureAlarm=temperatureAlarm, humidityAlarm=humidityAlarm, sensorName=sensorName, digitalInputCommunicationStatusSince=digitalInputCommunicationStatusSince, EnableType=EnableType, digitalInputEnable=digitalInputEnable, humidityEnable=humidityEnable, humidity=humidity, digitalInputIndex=digitalInputIndex, temperatureMaxValue=temperatureMaxValue, eatonSensorCompliances=eatonSensorCompliances, temperatureMonitoringMinMaxTable=temperatureMonitoringMinMaxTable, digitalInputName=digitalInputName, sensorDigitalInputCount=sensorDigitalInputCount, humidityMonitoringEntry=humidityMonitoringEntry, sensorConfigurationTable=sensorConfigurationTable, temperatureThresholdLowWarning=temperatureThresholdLowWarning, sensorUElevation=sensorUElevation, humidityThresholdHighWarning=humidityThresholdHighWarning, sensorTemperatureCount=sensorTemperatureCount, sensorIndex=sensorIndex, CommunicationStatus=CommunicationStatus, sensorStatus=sensorStatus, sensorRequiredGroup=sensorRequiredGroup, temperatureConfigurationTable=temperatureConfigurationTable, digitalInputMonitoringEntry=digitalInputMonitoringEntry, humidityMaxValue=humidityMaxValue, sensorAnalogInputCount=sensorAnalogInputCount, humidityCommunicationStatus=humidityCommunicationStatus, sensor=sensor, temperatureMinValueSince=temperatureMinValueSince, ResetCommandType=ResetCommandType, notifydigitalInputCommunicationStatus=notifydigitalInputCommunicationStatus, humidityConnectionType=humidityConnectionType, temperatureUnit=temperatureUnit, humidityNotification=humidityNotification, digitalInputIdentificationEntry=digitalInputIdentificationEntry, sensorConnectionType=sensorConnectionType, temperatureThresholdHighWarning=temperatureThresholdHighWarning, temperatureThresholdHighCritical=temperatureThresholdHighCritical, digitalInputAlarm=digitalInputAlarm, conformance=conformance, notifyTemperatureAlarm=notifyTemperatureAlarm, humidityName=humidityName, humidityMinValue=humidityMinValue, temperatureAlarmEnable=temperatureAlarmEnable, humidityOffset=humidityOffset, humidityAlarmGracePeriod=humidityAlarmGracePeriod, sensorAddress=sensorAddress, sensorPosition=sensorPosition, PositionType=PositionType, sensorSerialNumber=sensorSerialNumber, sensorStatusSince=sensorStatusSince, digitalInputConfigurationEntry=digitalInputConfigurationEntry, humidityAlarmChangeSince=humidityAlarmChangeSince, temperatureConnectionType=temperatureConnectionType, humidityMonitoringMinMaxEntry=humidityMonitoringMinMaxEntry, notifyTemperatureCommunicationStatus=notifyTemperatureCommunicationStatus, digitalInputUuid=digitalInputUuid, notifySensorCount=notifySensorCount, temperatureValue=temperatureValue, temperatureIdentificationEntry=temperatureIdentificationEntry, humidityValue=humidityValue, AlarmSeverityType=AlarmSeverityType, temperatureMinValue=temperatureMinValue, sensorIdentificationTable=sensorIdentificationTable, humidityCommunicationStatusSince=humidityCommunicationStatusSince, sensorMonitoringTable=sensorMonitoringTable, humidityConfigurationEntry=humidityConfigurationEntry, humidityThresholdLowCritical=humidityThresholdLowCritical, sensorIdentificationEntry=sensorIdentificationEntry, humidityThresholdHighCritical=humidityThresholdHighCritical, temperatureMaxValueSince=temperatureMaxValueSince, humidityMinValueSince=humidityMinValueSince, humidityIdentificationEntry=humidityIdentificationEntry, temperatureConfigurationEntry=temperatureConfigurationEntry, humidityMonitoringMinMaxTable=humidityMonitoringMinMaxTable, sensorFirmwareVersion=sensorFirmwareVersion, digitalInputCommunicationStatus=digitalInputCommunicationStatus, sensorNotification=sensorNotification, digitalInputAlarmSeverity=digitalInputAlarmSeverity, temperatureMonitoringTable=temperatureMonitoringTable, sensorElevation=sensorElevation, temperatureMonitoringEntry=temperatureMonitoringEntry, humidityMonitoringTable=humidityMonitoringTable, temperatureCommunicationStatus=temperatureCommunicationStatus, sensorManufacturer=sensorManufacturer, humidityConfigurationTable=humidityConfigurationTable, humidityAlarmEnable=humidityAlarmEnable, PolarityType=PolarityType, temperatureAlarmGracePeriod=temperatureAlarmGracePeriod, humidityUuid=humidityUuid, notifyHumidityCommunicationStatus=notifyHumidityCommunicationStatus, humidityThresholdHysteresis=humidityThresholdHysteresis, notifyDigitalInputAlarm=notifyDigitalInputAlarm, temperatureResetMinMax=temperatureResetMinMax, PYSNMP_MODULE_ID=eatonSensor, digitalInputConnectionType=digitalInputConnectionType, sensorLocation=sensorLocation, sensorConfigurationEntry=sensorConfigurationEntry, ProbeConnectionType=ProbeConnectionType, temperatureIndex=temperatureIndex, temperatureIdentificationTable=temperatureIdentificationTable, temperature=temperature, humidityIndex=humidityIndex, digitalInputConfigurationTable=digitalInputConfigurationTable, digitalInputAlarmChangeSince=digitalInputAlarmChangeSince, eatonSensor=eatonSensor, temperatureUuid=temperatureUuid, ElevationType=ElevationType, objectGroups=objectGroups, sensorModel=sensorModel, sensorUuid=sensorUuid, sensorMonitoredBy=sensorMonitoredBy, notifyHumidityAlarm=notifyHumidityAlarm, humidityResetMinMax=humidityResetMinMax, sensorPartNumber=sensorPartNumber, sensorCount=sensorCount, temperatureThresholdHysteresis=temperatureThresholdHysteresis, temperatureName=temperatureName, notifySensorStatus=notifySensorStatus, sensorNotifyGroup=sensorNotifyGroup, StateType=StateType, digitalInputNotification=digitalInputNotification, humidityIdentificationTable=humidityIdentificationTable, AlarmLevelType=AlarmLevelType, digitalInputAlarmEnable=digitalInputAlarmEnable, AlarmType=AlarmType, digitalInputMonitoringTable=digitalInputMonitoringTable, temperatureNotification=temperatureNotification, digitalInputPolarity=digitalInputPolarity, temperatureAlarmChangeSince=temperatureAlarmChangeSince, temperatureCommunicationStatusSince=temperatureCommunicationStatusSince, UnixTimeStamp=UnixTimeStamp, temperatureEnable=temperatureEnable, digitalInput=digitalInput)
