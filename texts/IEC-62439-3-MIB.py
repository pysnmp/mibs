#
# PySNMP MIB module IEC-62439-3-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/standard/iec/IEC-62439-3-MIB
# Produced by pysmi-1.1.12 at Wed Jul  3 13:01:33 2024
# On host fv-az1249-950 platform Linux version 6.5.0-1022-azure by user runner
# Using Python version 3.10.14 (main, Jun 20 2024, 15:20:03) [GCC 11.4.0]
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Unsigned32, ObjectIdentity, NotificationType, IpAddress, Integer32, Bits, Counter32, MibIdentifier, Counter64, iso, Gauge32, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Unsigned32", "ObjectIdentity", "NotificationType", "IpAddress", "Integer32", "Bits", "Counter32", "MibIdentifier", "Counter64", "iso", "Gauge32", "ModuleIdentity")
RowStatus, TruthValue, MacAddress, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TruthValue", "MacAddress", "DisplayString", "TextualConvention")
iec62439 = ModuleIdentity((1, 0, 62439))
iec62439.setRevisions(('2014-05-22 00:00', '2012-02-17 00:00', '2011-08-26 00:00', '2008-11-10 00:00', '2006-12-16 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: iec62439.setRevisionsDescriptions(('added reference to ptp MIB and lreDupListResideMaxTime and type SecondFraction', 'Consistency brought into line to mrp, crp, brp MIBs', 'This MIB is aligned with the changes to PRP and HSR as defined in the Amendment to IEC 62439-3', 'Separation of IEC 62439 into a suite of documents.\n        This MIB applies to IEC 62439-3, added HSR functionality', 'Initial version of the Network Management interface for the Parallel Redundancy Protocol',))
if mibBuilder.loadTexts: iec62439.setLastUpdated('201405220000Z')
if mibBuilder.loadTexts: iec62439.setOrganization('IEC/SC 65C')
if mibBuilder.loadTexts: iec62439.setContactInfo('International Electrotechnical Commission IEC Central Office\n            3, rue de Varembe\n            P.O. Box 131\n            1211 GENEVA 20 Switzerland\n            Phone: +41 22 919 02 11 \n            Fax: +41 22 919 03 00\n            email: info@iec.ch')
if mibBuilder.loadTexts: iec62439.setDescription('This MIB module defines the Network Management interfaces for the redundancy protocols defined by the IEC 62439 suite. This MIB exposes the IEC62439-3 objects (PRP + HSR)')
mrp = MibIdentifier((1, 0, 62439, 1))
prp = MibIdentifier((1, 0, 62439, 2))
crp = MibIdentifier((1, 0, 62439, 3))
brp = MibIdentifier((1, 0, 62439, 4))
drp = MibIdentifier((1, 0, 62439, 5))
rrp = MibIdentifier((1, 0, 62439, 6))
ptp = MibIdentifier((1, 0, 62439, 7))
class SecondFraction(TextualConvention, Integer32):
    reference = 'IEC 62439-3'
    description = 'time interval expressed in multiple of 2**-16 = 15,7 microseconds\n        this corresponds to the fraction of seconds in the NTP time representation \n        the minimum time is 0 microseconds, the maximum 18 hours'
    status = 'current'
    displayHint = 'd'

linkRedundancyEntityNotifications = MibIdentifier((1, 0, 62439, 2, 20))
linkRedundancyEntityObjects = MibIdentifier((1, 0, 62439, 2, 21))
linkRedundancyEntityConformance = MibIdentifier((1, 0, 62439, 2, 22))
lreConfiguration = MibIdentifier((1, 0, 62439, 2, 21, 0))
lreStatistics = MibIdentifier((1, 0, 62439, 2, 21, 1))
lreConfigurationGeneralGroup = MibIdentifier((1, 0, 62439, 2, 21, 0, 0))
lreConfigurationInterfaceGroup = MibIdentifier((1, 0, 62439, 2, 21, 0, 1))
lreStatisticsInterfaceGroup = MibIdentifier((1, 0, 62439, 2, 21, 1, 1))
lreManufacturerName = MibScalar((1, 0, 62439, 2, 21, 0, 0, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lreManufacturerName.setStatus('current')
if mibBuilder.loadTexts: lreManufacturerName.setDescription('specifies the name of the LRE device manufacturer')
lreInterfaceCount = MibScalar((1, 0, 62439, 2, 21, 0, 0, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lreInterfaceCount.setStatus('current')
if mibBuilder.loadTexts: lreInterfaceCount.setDescription('total number of LREs present in this system.')
lreConfigurationInterfaces = MibIdentifier((1, 0, 62439, 2, 21, 0, 1, 0))
lreInterfaceConfigTable = MibTable((1, 0, 62439, 2, 21, 0, 1, 0, 1), )
if mibBuilder.loadTexts: lreInterfaceConfigTable.setStatus('current')
if mibBuilder.loadTexts: lreInterfaceConfigTable.setDescription('list of PRP/HSR LREs. Each entry corresponds to one PRP/HSR Link Redundancy \n         Entity (LRE), each representing a pair of LAN ports A and B. Basic devices \n         supporting PRP/HSR may have only one LRE and thus one entry in the table, \n         while more complex\n        devices may have several entries for multiple LREs.')
lreInterfaceConfigEntry = MibTableRow((1, 0, 62439, 2, 21, 0, 1, 0, 1, 1), ).setIndexNames((0, "IEC-62439-3-MIB", "lreInterfaceConfigIndex"))
if mibBuilder.loadTexts: lreInterfaceConfigEntry.setStatus('current')
if mibBuilder.loadTexts: lreInterfaceConfigEntry.setDescription('each entry contains management information applicable to a particular LRE.')
lreInterfaceConfigIndex = MibTableColumn((1, 0, 62439, 2, 21, 0, 1, 0, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: lreInterfaceConfigIndex.setStatus('current')
if mibBuilder.loadTexts: lreInterfaceConfigIndex.setDescription('A unique value for each LRE.')
lreRowStatus = MibTableColumn((1, 0, 62439, 2, 21, 0, 1, 0, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lreRowStatus.setStatus('current')
if mibBuilder.loadTexts: lreRowStatus.setDescription('indicates the status of the LRE table entry')
lreNodeType = MibTableColumn((1, 0, 62439, 2, 21, 0, 1, 0, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("prpmode1", 1), ("hsr", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lreNodeType.setStatus('current')
if mibBuilder.loadTexts: lreNodeType.setDescription('specifies the operation mode of the LRE:PRP mode 1(1), HSR mode(2)\n        Note: PRP mode 0 is considered deprecated and is not supported by this revision \n        of the MIB')
lreNodeName = MibTableColumn((1, 0, 62439, 2, 21, 0, 1, 0, 1, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lreNodeName.setStatus('current')
if mibBuilder.loadTexts: lreNodeName.setDescription("specifies this LRE's node name")
lreVersionName = MibTableColumn((1, 0, 62439, 2, 21, 0, 1, 0, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lreVersionName.setStatus('current')
if mibBuilder.loadTexts: lreVersionName.setDescription("specifies the version of this LRE's software")
lreMacAddress = MibTableColumn((1, 0, 62439, 2, 21, 0, 1, 0, 1, 1, 6), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lreMacAddress.setStatus('current')
if mibBuilder.loadTexts: lreMacAddress.setDescription('Specified the MAC address to be used by this LRE, MAC addresses are\n        identical for all ports of a single LRE')
lrePortAdminStateA = MibTableColumn((1, 0, 62439, 2, 21, 0, 1, 0, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notActive", 1), ("active", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lrePortAdminStateA.setStatus('current')
if mibBuilder.loadTexts: lrePortAdminStateA.setDescription('Specifies whether the port A shall be active or not Active\n        through administrative action (Default: active).')
lrePortAdminStateB = MibTableColumn((1, 0, 62439, 2, 21, 0, 1, 0, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notActive", 1), ("active", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lrePortAdminStateB.setStatus('current')
if mibBuilder.loadTexts: lrePortAdminStateB.setDescription('Specifies whether the port B shall be active or not Active  \n        through administrative action (Default: active).')
lreLinkStatusA = MibTableColumn((1, 0, 62439, 2, 21, 0, 1, 0, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lreLinkStatusA.setStatus('current')
if mibBuilder.loadTexts: lreLinkStatusA.setDescription("shows the actual link status of the LRE's port A")
lreLinkStatusB = MibTableColumn((1, 0, 62439, 2, 21, 0, 1, 0, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lreLinkStatusB.setStatus('current')
if mibBuilder.loadTexts: lreLinkStatusB.setDescription("shows the actual link status of the LRE's port B")
lreDuplicateDiscard = MibTableColumn((1, 0, 62439, 2, 21, 0, 1, 0, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("doNotDiscard", 1), ("discard", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lreDuplicateDiscard.setStatus('current')
if mibBuilder.loadTexts: lreDuplicateDiscard.setDescription('specifies whether a duplicate discard algorithm is used at \n         reception (Default: discard).')
lreTransparentReception = MibTableColumn((1, 0, 62439, 2, 21, 0, 1, 0, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("removeRCT", 1), ("passRCT", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lreTransparentReception.setStatus('current')
if mibBuilder.loadTexts: lreTransparentReception.setDescription('if removeRCT is configured, the RCT is removed when \n        forwarding to the upper \n        layers, only applicable for PRP LRE (Default: removeRCT).')
lreHsrLREMode = MibTableColumn((1, 0, 62439, 2, 21, 0, 1, 0, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("modeh", 1), ("moden", 2), ("modet", 3), ("modeu", 4), ("modem", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lreHsrLREMode.setStatus('current')
if mibBuilder.loadTexts: lreHsrLREMode.setDescription('This enumeration is only applicable if the LRE is an HSR bridging node or RedBox.\n        It shows the mode of the HSR LRE:\n        (1) Default mode: The HSR LRE is in mode h and bridges tagged HSR traffic\n        (2) Optional mode: The HSR LRE is in mode n and bridging between its HSR ports\n        Is disabled.\n        Traffic is HSR tagged.\n        (3) Optional mode: The HSR LRE is in mode t and bridges non-tagged HSR traffic between its HSR ports\n        (4) Optional mode: The HSR LRE is in mode u and behaves like in mode h, except it does not remove unicast messages\n        (5) Optional mode: The HSR LRE is configured in mixed mode. HSR frames are handled\n        according to mode h. Non-HSR frames are handled according to\n        802.1D bridging rules.')
lreSwitchingEndNode = MibTableColumn((1, 0, 62439, 2, 21, 0, 1, 0, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("nonbridgingnode", 1), ("bridgingunspecified", 2), ("prpnode", 3), ("hsrredboxsan", 4), ("hsrnode", 5), ("hsrredboxhsr", 6), ("hsrredboxprpa", 7), ("hsrredboxprpb", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lreSwitchingEndNode.setStatus('current')
if mibBuilder.loadTexts: lreSwitchingEndNode.setDescription('This enumeration shows which feature is enabled in this\n        particular LRE:\n        (1): an unspecified non-bridging node, e.g. SRP.\n        (2): an unspecified bridging node, e.g. RSTP.\n        (3): a PRP node/RedBox.\n        (4): an HSR RedBox with regular Ethernet traffic on its interlink. \n        (5): an HSR switching node.\n        (6): an HSR RedBox with HSR tagged traffic on its interlink.\n        (7): an HSR RedBox with PRP traffic for LAN A on its interlink. \n        (8): an HSR RedBox with PRP traffic for LAN B on its interlink.')
lreRedBoxIdentity = MibTableColumn((1, 0, 62439, 2, 21, 0, 1, 0, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("id1a", 2), ("id1b", 3), ("id2a", 4), ("id2b", 5), ("id3a", 6), ("id3b", 7), ("id4a", 8), ("id4b", 9), ("id5a", 10), ("id5b", 11), ("id6a", 12), ("id6b", 13), ("id7a", 14), ("id7b", 15)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lreRedBoxIdentity.setStatus('current')
if mibBuilder.loadTexts: lreRedBoxIdentity.setDescription('Applicable to RedBox HSR-PRP A and RedBox HSR-PRP B. One ID\n        is used by\n        one pair of RedBoxes (one configured to A and one configured to B) \n        coupling an HSR ring to a PRP network. The integer value states the value \n        of the path field a RedBox inserts into each frame it receives from its \n        interlink and injects into the HSR ring. When interpreted as binary values, \n        the LSB denotes the configuration of the RedBox (A or B), and the following \n        3 bits denote the identifier of a RedBox pair.')
lreEvaluateSupervision = MibTableColumn((1, 0, 62439, 2, 21, 0, 1, 0, 1, 1, 16), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lreEvaluateSupervision.setStatus('current')
if mibBuilder.loadTexts: lreEvaluateSupervision.setDescription('True if the LRE evaluates received supervision frames. False if it\n        drops the supervision frames without evaluating. Note: LREs are required\n        to send supervision frames, but reception is optional. \n        Default value is dependent on implementation.')
lreNodesTableClear = MibTableColumn((1, 0, 62439, 2, 21, 0, 1, 0, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noOp", 0), ("clearNodeTable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lreNodesTableClear.setStatus('current')
if mibBuilder.loadTexts: lreNodesTableClear.setDescription('specifies that the Node Table is to be cleared')
lreProxyNodeTableClear = MibTableColumn((1, 0, 62439, 2, 21, 0, 1, 0, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noOp", 0), ("clearProxyNodeTable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lreProxyNodeTableClear.setStatus('current')
if mibBuilder.loadTexts: lreProxyNodeTableClear.setDescription('specifies that the Proxy Node Table is to be cleared')
lreDupListResideMaxTime = MibTableColumn((1, 0, 62439, 2, 21, 0, 1, 0, 1, 1, 19), SecondFraction().clone(26214)).setUnits('binaryFractionOfSecond').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lreDupListResideMaxTime.setStatus('current')
if mibBuilder.loadTexts: lreDupListResideMaxTime.setDescription('the longest time an entry may reside in the duplicates list, \n         expressed as the number of seconds multiplied by 65536;\n         the default value is 26214 x 15 us, or 400 ms; too low a value can \n         cause broadcast storms')
lreStatisticsInterfaces = MibIdentifier((1, 0, 62439, 2, 21, 1, 1, 0))
lreInterfaceStatsTable = MibTable((1, 0, 62439, 2, 21, 1, 1, 0, 1), )
if mibBuilder.loadTexts: lreInterfaceStatsTable.setStatus('current')
if mibBuilder.loadTexts: lreInterfaceStatsTable.setDescription('list of PRP/HSR LREs. Each entry corresponds\n        to one PRP/HSR Link Redundancy Entity (LRE), each representing a\n        pair of LAN ports A and B and a port C towards the application/interlink. Basic devices supporting PRP/HSR may have only one LRE and thus one entry in\n        the table, while more complex devices may have several entries for multiple LREs.')
lreInterfaceStatsEntry = MibTableRow((1, 0, 62439, 2, 21, 1, 1, 0, 1, 1), ).setIndexNames((0, "IEC-62439-3-MIB", "lreInterfaceStatsIndex"))
if mibBuilder.loadTexts: lreInterfaceStatsEntry.setStatus('current')
if mibBuilder.loadTexts: lreInterfaceStatsEntry.setDescription('An entry containing management information applicable to a particular LRE.')
lreInterfaceStatsIndex = MibTableColumn((1, 0, 62439, 2, 21, 1, 1, 0, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: lreInterfaceStatsIndex.setStatus('current')
if mibBuilder.loadTexts: lreInterfaceStatsIndex.setDescription('A unique value for each LRE.')
lreCntTxA = MibTableColumn((1, 0, 62439, 2, 21, 1, 1, 0, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lreCntTxA.setStatus('current')
if mibBuilder.loadTexts: lreCntTxA.setDescription('number of frames sent over port A that are HSR tagged or\n        fitted with a PRP\n        Redundancy Control Trailer.\n        Only frames that are HSR tagged or do have a PRP RCT are counted. \n        A frame aborted during the transmission is not counted.\n        Initial value = 0.')
lreCntTxB = MibTableColumn((1, 0, 62439, 2, 21, 1, 1, 0, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lreCntTxB.setStatus('current')
if mibBuilder.loadTexts: lreCntTxB.setDescription('number of frames sent over port B that are HSR tagged or\n        fitted with a PRP\n        Redundancy Control Trailer.\n        Only frames that are HSR tagged or do have a PRP RCT are counted. \n        A frame aborted during the transmission is not counted.\n        Initial value = 0.')
lreCntTxC = MibTableColumn((1, 0, 62439, 2, 21, 1, 1, 0, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lreCntTxC.setStatus('current')
if mibBuilder.loadTexts: lreCntTxC.setDescription('number of frames sent towards the application interface of\n        the DANP or DANH\n        or over the interlink of the RedBox. Frames with and without PRP RCT or HSR \n        tag are counted, but not link-local frames.\n        A frame aborted during the transmission is not counted.\n        Initial value = 0.')
lreCntErrWrongLanA = MibTableColumn((1, 0, 62439, 2, 21, 1, 1, 0, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lreCntErrWrongLanA.setStatus('current')
if mibBuilder.loadTexts: lreCntErrWrongLanA.setDescription('number of frames with the wrong LAN identifier received on LRE port A.\n        Initial value = 0. Only applicable to PRP ports.')
lreCntErrWrongLanB = MibTableColumn((1, 0, 62439, 2, 21, 1, 1, 0, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lreCntErrWrongLanB.setStatus('current')
if mibBuilder.loadTexts: lreCntErrWrongLanB.setDescription('number of frames with the wrong LAN identifier received on LRE port B.\n        Initial value = 0. Only applicable to PRP ports.')
lreCntErrWrongLanC = MibTableColumn((1, 0, 62439, 2, 21, 1, 1, 0, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lreCntErrWrongLanC.setStatus('current')
if mibBuilder.loadTexts: lreCntErrWrongLanC.setDescription('number of frames with the wrong LAN identifier received on the interlink of\n        a RedBox. Only applicable to HSR RedBoxes in HSR-PRP configuration \n        (hsrredboxprpa and hsrredboxprpb).')
lreCntRxA = MibTableColumn((1, 0, 62439, 2, 21, 1, 1, 0, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lreCntRxA.setStatus('current')
if mibBuilder.loadTexts: lreCntRxA.setDescription('number of frames received on a LRE port A. Only frames that\n        are HSR tagged\n        or fitted with a PRP Redundancy Control Trailer are counted. \n        Frames that are not forwarded anywhere (e.g. because the sender of the frame \n        is in the proxy node table) are counted, too. Only frames received completely \n        and without error are counted.\n        Initial value = 0.')
lreCntRxB = MibTableColumn((1, 0, 62439, 2, 21, 1, 1, 0, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lreCntRxB.setStatus('current')
if mibBuilder.loadTexts: lreCntRxB.setDescription('number of frames received on a LRE port B. Only frames that\n        are HSR tagged\n        or fitted with a PRP Redundancy Control Trailer are counted. Frames that are \n        not forwarded anywhere (e.g. because the sender of the frame is in the proxy \n        node table) are counted, too. Only frames received completely and without \n        error are counted.\n        Initial value = 0.')
lreCntRxC = MibTableColumn((1, 0, 62439, 2, 21, 1, 1, 0, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lreCntRxC.setStatus('current')
if mibBuilder.loadTexts: lreCntRxC.setDescription('number of frames received from the application interface of a\n        DANP or DANH or\n        the number of number of frames received on the interlink of a RedBox. Frames \n        with and without PRP RCT or HSR tag are counted, but not link-local frames. \n        Only frames received completely and without error are counted.\n        Initial value = 0.')
lreCntErrorsA = MibTableColumn((1, 0, 62439, 2, 21, 1, 1, 0, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lreCntErrorsA.setStatus('current')
if mibBuilder.loadTexts: lreCntErrorsA.setDescription('number of frames with errors received on this LRE port A. Initial value 0.')
lreCntErrorsB = MibTableColumn((1, 0, 62439, 2, 21, 1, 1, 0, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lreCntErrorsB.setStatus('current')
if mibBuilder.loadTexts: lreCntErrorsB.setDescription('number of frames with errors received on this LRE port B. Initial value = 0.')
lreCntErrorsC = MibTableColumn((1, 0, 62439, 2, 21, 1, 1, 0, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lreCntErrorsC.setStatus('current')
if mibBuilder.loadTexts: lreCntErrorsC.setDescription('number of frames with errors received on the application interface of a DANP\n        or DANH or on the interlink of a RedBox. Initial value = 0.')
lreCntNodes = MibTableColumn((1, 0, 62439, 2, 21, 1, 1, 0, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lreCntNodes.setStatus('current')
if mibBuilder.loadTexts: lreCntNodes.setDescription('number of nodes in the Nodes Table.')
lreCntProxyNodes = MibTableColumn((1, 0, 62439, 2, 21, 1, 1, 0, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lreCntProxyNodes.setStatus('current')
if mibBuilder.loadTexts: lreCntProxyNodes.setDescription('number of nodes in the Proxy Node Table. Only applicable to \n         RedBox. Initial value = 0.')
lreCntUniqueA = MibTableColumn((1, 0, 62439, 2, 21, 1, 1, 0, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lreCntUniqueA.setStatus('current')
if mibBuilder.loadTexts: lreCntUniqueA.setDescription('number of entries in the duplicate detection mechanism on\n        port A for which no duplicate was received.\n        Initial value = 0.')
lreCntUniqueB = MibTableColumn((1, 0, 62439, 2, 21, 1, 1, 0, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lreCntUniqueB.setStatus('current')
if mibBuilder.loadTexts: lreCntUniqueB.setDescription('number of entries in the duplicate detection mechanism on port B for which\n        no duplicate was received.\n        Initial value = 0.')
lreCntUniqueC = MibTableColumn((1, 0, 62439, 2, 21, 1, 1, 0, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lreCntUniqueC.setStatus('current')
if mibBuilder.loadTexts: lreCntUniqueC.setDescription('number of entries in the duplicate detection mechanism on the \n        application interface \n        of the DAN or the interlink of the RedBox for which no duplicate was received.\n        Initial value = 0.')
lreCntDuplicateA = MibTableColumn((1, 0, 62439, 2, 21, 1, 1, 0, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lreCntDuplicateA.setStatus('current')
if mibBuilder.loadTexts: lreCntDuplicateA.setDescription('number of entries in the duplicate detection mechanism on port A for which\n        one single duplicate was received. Initial value 0.')
lreCntDuplicateB = MibTableColumn((1, 0, 62439, 2, 21, 1, 1, 0, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lreCntDuplicateB.setStatus('current')
if mibBuilder.loadTexts: lreCntDuplicateB.setDescription('number of entries in the duplicate detection mechanism on port B for which\n        one single duplicate was received. Initial value 0.')
lreCntDuplicateC = MibTableColumn((1, 0, 62439, 2, 21, 1, 1, 0, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lreCntDuplicateC.setStatus('current')
if mibBuilder.loadTexts: lreCntDuplicateC.setDescription('number of entries in the duplicate detection mechanism on the application interface \n         of the DAN or the interlink of the RedBox for which one single duplicate was received. \n         Initial value 0.')
lreCntMultiA = MibTableColumn((1, 0, 62439, 2, 21, 1, 1, 0, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lreCntMultiA.setStatus('current')
if mibBuilder.loadTexts: lreCntMultiA.setDescription('number of entries in the duplicate detection mechanism on port A for which\n        more than one duplicate was received. Initial value 0.')
lreCntMultiB = MibTableColumn((1, 0, 62439, 2, 21, 1, 1, 0, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lreCntMultiB.setStatus('current')
if mibBuilder.loadTexts: lreCntMultiB.setDescription('number of entries in the duplicate detection mechanism on port B for which\n        more than one duplicate was received. Initial value 0.')
lreCntMultiC = MibTableColumn((1, 0, 62439, 2, 21, 1, 1, 0, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lreCntMultiC.setStatus('current')
if mibBuilder.loadTexts: lreCntMultiC.setDescription('number of entries in the duplicate detection mechanism on the application interface\n        of the DAN or the interlink of the RedBox for which more than one duplicate was received.\n        Initial value = 0.')
lreCntOwnRxA = MibTableColumn((1, 0, 62439, 2, 21, 1, 1, 0, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lreCntOwnRxA.setStatus('current')
if mibBuilder.loadTexts: lreCntOwnRxA.setDescription('number of HSR tagged frames received on Port A that originated from this\n        device. Frames originate from this device if the source MAC matches the \n        MAC of the LRE, or if the source MAC appears in the proxy node table (if \n        implemented). Applicable only to HSR.\n        Initial value 0.')
lreCntOwnRxB = MibTableColumn((1, 0, 62439, 2, 21, 1, 1, 0, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lreCntOwnRxB.setStatus('current')
if mibBuilder.loadTexts: lreCntOwnRxB.setDescription('number of HSR tagged frames received on Port B that originated from this\n        device. Frames originate from this device if the source MAC matches the \n        MAC of the LRE, or if the source MAC appears in the proxy node table (if \n        implemented). Applicable only to HSR.\n        Initial value 0.')
lreNodesTable = MibTable((1, 0, 62439, 2, 21, 1, 1, 0, 2), )
if mibBuilder.loadTexts: lreNodesTable.setStatus('current')
if mibBuilder.loadTexts: lreNodesTable.setDescription('The node table (if it exists on that node) contains information about \n         all remote LRE, which advertised themselves through supervision frames')
lreNodesEntry = MibTableRow((1, 0, 62439, 2, 21, 1, 1, 0, 2, 1), ).setIndexNames((0, "IEC-62439-3-MIB", "lreInterfaceStatsIndex"), (0, "IEC-62439-3-MIB", "lreNodesIndex"))
if mibBuilder.loadTexts: lreNodesEntry.setStatus('current')
if mibBuilder.loadTexts: lreNodesEntry.setDescription('Each entry in the node table (if it exists) contains information about\n        a particular remote LRE registered in the node table, which advertised itself \n        through supervision frames.')
lreNodesIndex = MibTableColumn((1, 0, 62439, 2, 21, 1, 1, 0, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: lreNodesIndex.setStatus('current')
if mibBuilder.loadTexts: lreNodesIndex.setDescription('Unique value for each node in the LRE node table.')
lreNodesMacAddress = MibTableColumn((1, 0, 62439, 2, 21, 1, 1, 0, 2, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lreNodesMacAddress.setStatus('current')
if mibBuilder.loadTexts: lreNodesMacAddress.setDescription('Each MAC address corresponds to a single Doubly Attached Node')
lreTimeLastSeenA = MibTableColumn((1, 0, 62439, 2, 21, 1, 1, 0, 2, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lreTimeLastSeenA.setStatus('current')
if mibBuilder.loadTexts: lreTimeLastSeenA.setDescription('Time in TimeTicks (1/100s) since the last frame from this remote LRE was\n         received over LAN A. Initialized with a value of 0 upon node registration \n         in the node table.')
lreTimeLastSeenB = MibTableColumn((1, 0, 62439, 2, 21, 1, 1, 0, 2, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lreTimeLastSeenB.setStatus('current')
if mibBuilder.loadTexts: lreTimeLastSeenB.setDescription('Time in TimeTicks (1/100s) since the last frame from this remote LRE was\n        received over LAN B. Initialized with a value of 0 upon node registration \n        in the node table.')
lreRemNodeType = MibTableColumn((1, 0, 62439, 2, 21, 1, 1, 0, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("danp", 0), ("redboxp", 1), ("vdanp", 2), ("danh", 3), ("redboxh", 4), ("vdanh", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lreRemNodeType.setStatus('current')
if mibBuilder.loadTexts: lreRemNodeType.setDescription('DAN type, as indicated in the received supervision frame.')
lreProxyNodeTable = MibTable((1, 0, 62439, 2, 21, 1, 1, 0, 3), )
if mibBuilder.loadTexts: lreProxyNodeTable.setStatus('current')
if mibBuilder.loadTexts: lreProxyNodeTable.setDescription('The proxy node table (if implemented) contains information about all \n         nodes, for which the LRE acts as a connection to the HSR/PRP network.')
lreProxyNodeEntry = MibTableRow((1, 0, 62439, 2, 21, 1, 1, 0, 3, 1), ).setIndexNames((0, "IEC-62439-3-MIB", "lreInterfaceStatsIndex"), (0, "IEC-62439-3-MIB", "lreProxyNodeIndex"))
if mibBuilder.loadTexts: lreProxyNodeEntry.setStatus('current')
if mibBuilder.loadTexts: lreProxyNodeEntry.setDescription('Each entry in the proxy node table contains information about\n        a particular node for which the LRE acts as a connection to the HSR or PRP network.')
lreProxyNodeIndex = MibTableColumn((1, 0, 62439, 2, 21, 1, 1, 0, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: lreProxyNodeIndex.setStatus('current')
if mibBuilder.loadTexts: lreProxyNodeIndex.setDescription('A unique value for each node in the LRE proxy node table.')
lreProxyNodeMacAddress = MibTableColumn((1, 0, 62439, 2, 21, 1, 1, 0, 3, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lreProxyNodeMacAddress.setStatus('current')
if mibBuilder.loadTexts: lreProxyNodeMacAddress.setDescription('Each entry contains information about a particular node \n         for which the LRE acts as a proxy for the HSR PRP network.')
linkRedundancyConformance = MibIdentifier((1, 0, 62439, 2, 22, 1))
lreGroups = MibIdentifier((1, 0, 62439, 2, 22, 1, 1))
lreDefaultGrp = ObjectGroup((1, 0, 62439, 2, 22, 1, 1, 1)).setObjects(("IEC-62439-3-MIB", "lreManufacturerName"), ("IEC-62439-3-MIB", "lreInterfaceCount"), ("IEC-62439-3-MIB", "lreRowStatus"), ("IEC-62439-3-MIB", "lreNodeType"), ("IEC-62439-3-MIB", "lreNodeName"), ("IEC-62439-3-MIB", "lreVersionName"), ("IEC-62439-3-MIB", "lreMacAddress"), ("IEC-62439-3-MIB", "lrePortAdminStateA"), ("IEC-62439-3-MIB", "lrePortAdminStateB"), ("IEC-62439-3-MIB", "lreLinkStatusA"), ("IEC-62439-3-MIB", "lreLinkStatusB"), ("IEC-62439-3-MIB", "lreDuplicateDiscard"), ("IEC-62439-3-MIB", "lreTransparentReception"), ("IEC-62439-3-MIB", "lreHsrLREMode"), ("IEC-62439-3-MIB", "lreSwitchingEndNode"), ("IEC-62439-3-MIB", "lreRedBoxIdentity"), ("IEC-62439-3-MIB", "lreEvaluateSupervision"), ("IEC-62439-3-MIB", "lreNodesTableClear"), ("IEC-62439-3-MIB", "lreProxyNodeTableClear"), ("IEC-62439-3-MIB", "lreDupListResideMaxTime"), ("IEC-62439-3-MIB", "lreCntTxA"), ("IEC-62439-3-MIB", "lreCntTxB"), ("IEC-62439-3-MIB", "lreCntTxC"), ("IEC-62439-3-MIB", "lreCntErrWrongLanA"), ("IEC-62439-3-MIB", "lreCntErrWrongLanB"), ("IEC-62439-3-MIB", "lreCntErrWrongLanC"), ("IEC-62439-3-MIB", "lreCntRxA"), ("IEC-62439-3-MIB", "lreCntRxB"), ("IEC-62439-3-MIB", "lreCntRxC"), ("IEC-62439-3-MIB", "lreCntErrorsA"), ("IEC-62439-3-MIB", "lreCntErrorsB"), ("IEC-62439-3-MIB", "lreCntErrorsC"), ("IEC-62439-3-MIB", "lreCntNodes"), ("IEC-62439-3-MIB", "lreCntProxyNodes"), ("IEC-62439-3-MIB", "lreCntUniqueA"), ("IEC-62439-3-MIB", "lreCntUniqueB"), ("IEC-62439-3-MIB", "lreCntUniqueC"), ("IEC-62439-3-MIB", "lreCntDuplicateA"), ("IEC-62439-3-MIB", "lreCntDuplicateB"), ("IEC-62439-3-MIB", "lreCntDuplicateC"), ("IEC-62439-3-MIB", "lreCntMultiA"), ("IEC-62439-3-MIB", "lreCntMultiB"), ("IEC-62439-3-MIB", "lreCntMultiC"), ("IEC-62439-3-MIB", "lreCntOwnRxA"), ("IEC-62439-3-MIB", "lreCntOwnRxB"), ("IEC-62439-3-MIB", "lreNodesMacAddress"), ("IEC-62439-3-MIB", "lreTimeLastSeenA"), ("IEC-62439-3-MIB", "lreTimeLastSeenB"), ("IEC-62439-3-MIB", "lreRemNodeType"), ("IEC-62439-3-MIB", "lreProxyNodeMacAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lreDefaultGrp = lreDefaultGrp.setStatus('current')
if mibBuilder.loadTexts: lreDefaultGrp.setDescription('Objects in the default group')
linkRedundancyCompliances = MibIdentifier((1, 0, 62439, 2, 22, 2))
linkRedundancyCompliance = ModuleCompliance((1, 0, 62439, 2, 22, 2, 1)).setObjects(("IEC-62439-3-MIB", "lreDefaultGrp"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    linkRedundancyCompliance = linkRedundancyCompliance.setStatus('current')
if mibBuilder.loadTexts: linkRedundancyCompliance.setDescription('Compliance for support by IEC 62439-3 module')
mibBuilder.exportSymbols("IEC-62439-3-MIB", lreConfigurationInterfaceGroup=lreConfigurationInterfaceGroup, lreCntTxC=lreCntTxC, linkRedundancyEntityObjects=linkRedundancyEntityObjects, lreCntOwnRxA=lreCntOwnRxA, linkRedundancyCompliance=linkRedundancyCompliance, lreConfigurationGeneralGroup=lreConfigurationGeneralGroup, lreStatistics=lreStatistics, lreInterfaceCount=lreInterfaceCount, rrp=rrp, drp=drp, lreCntErrorsB=lreCntErrorsB, lreNodesEntry=lreNodesEntry, lreLinkStatusB=lreLinkStatusB, lreCntErrWrongLanC=lreCntErrWrongLanC, lreCntUniqueC=lreCntUniqueC, lreNodesIndex=lreNodesIndex, crp=crp, lreProxyNodeTableClear=lreProxyNodeTableClear, lreProxyNodeEntry=lreProxyNodeEntry, linkRedundancyEntityNotifications=linkRedundancyEntityNotifications, lreCntProxyNodes=lreCntProxyNodes, lreLinkStatusA=lreLinkStatusA, lreCntNodes=lreCntNodes, PYSNMP_MODULE_ID=iec62439, lreStatisticsInterfaceGroup=lreStatisticsInterfaceGroup, lreDefaultGrp=lreDefaultGrp, lreCntUniqueA=lreCntUniqueA, lreRowStatus=lreRowStatus, lreCntUniqueB=lreCntUniqueB, lreCntRxB=lreCntRxB, mrp=mrp, lreRedBoxIdentity=lreRedBoxIdentity, lreInterfaceConfigEntry=lreInterfaceConfigEntry, lreCntMultiA=lreCntMultiA, lreInterfaceStatsEntry=lreInterfaceStatsEntry, lreVersionName=lreVersionName, prp=prp, lreRemNodeType=lreRemNodeType, lreDuplicateDiscard=lreDuplicateDiscard, lreSwitchingEndNode=lreSwitchingEndNode, lreCntMultiC=lreCntMultiC, lreHsrLREMode=lreHsrLREMode, lrePortAdminStateA=lrePortAdminStateA, lreCntRxC=lreCntRxC, lreEvaluateSupervision=lreEvaluateSupervision, lreCntDuplicateB=lreCntDuplicateB, lreProxyNodeMacAddress=lreProxyNodeMacAddress, ptp=ptp, lreConfiguration=lreConfiguration, lreConfigurationInterfaces=lreConfigurationInterfaces, lreManufacturerName=lreManufacturerName, lreCntRxA=lreCntRxA, lreCntErrWrongLanA=lreCntErrWrongLanA, lreTimeLastSeenA=lreTimeLastSeenA, lreCntOwnRxB=lreCntOwnRxB, lreNodesTable=lreNodesTable, linkRedundancyCompliances=linkRedundancyCompliances, lreGroups=lreGroups, lreNodeName=lreNodeName, lreTransparentReception=lreTransparentReception, lreDupListResideMaxTime=lreDupListResideMaxTime, lreMacAddress=lreMacAddress, lreNodesTableClear=lreNodesTableClear, lreCntDuplicateA=lreCntDuplicateA, lreInterfaceConfigIndex=lreInterfaceConfigIndex, SecondFraction=SecondFraction, lreTimeLastSeenB=lreTimeLastSeenB, lrePortAdminStateB=lrePortAdminStateB, brp=brp, lreCntTxB=lreCntTxB, lreStatisticsInterfaces=lreStatisticsInterfaces, lreCntTxA=lreCntTxA, lreProxyNodeTable=lreProxyNodeTable, linkRedundancyConformance=linkRedundancyConformance, lreProxyNodeIndex=lreProxyNodeIndex, lreNodeType=lreNodeType, lreCntDuplicateC=lreCntDuplicateC, lreCntErrorsA=lreCntErrorsA, linkRedundancyEntityConformance=linkRedundancyEntityConformance, lreCntErrWrongLanB=lreCntErrWrongLanB, lreInterfaceStatsIndex=lreInterfaceStatsIndex, lreNodesMacAddress=lreNodesMacAddress, lreCntMultiB=lreCntMultiB, iec62439=iec62439, lreCntErrorsC=lreCntErrorsC, lreInterfaceConfigTable=lreInterfaceConfigTable, lreInterfaceStatsTable=lreInterfaceStatsTable)
