#
# PySNMP MIB module WISI-GTSETTINGS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/wisi/WISI-GTSETTINGS-MIB
# Produced by pysmi-1.1.12 at Tue Jun  4 08:36:01 2024
# On host fv-az1117-967 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
IpAddress, Counter32, NotificationType, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, MibIdentifier, Unsigned32, Gauge32, Integer32, ObjectIdentity, iso, ModuleIdentity, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Counter32", "NotificationType", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "MibIdentifier", "Unsigned32", "Gauge32", "Integer32", "ObjectIdentity", "iso", "ModuleIdentity", "Counter64")
PhysAddress, DisplayString, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "PhysAddress", "DisplayString", "RowStatus", "TextualConvention")
gtModule, = mibBuilder.importSymbols("WISI-GTMODULES-MIB", "gtModule")
gtUnit, = mibBuilder.importSymbols("WISI-TANGRAM-MIB", "gtUnit")
gtSettingsMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5))
gtSettingsMIB.setRevisions(('2016-09-08 00:00', '2015-07-02 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: gtSettingsMIB.setRevisionsDescriptions(("Fixed parse errors and warnings and incorrect string sizes.\n\t\tAdded object to control if an interface should use its VLAN\n\t\tsettings. Added the ability to modify several objects regarding\n\t\tinterfaces, HMS, time, NTP, SNMP and module redundancy\n\t\tsettings. Added object to enable/disable user authentication\n\t\tfor modules and to create and upload/download individual\n\t\tsettings backups for modules. Added value to update a module's\n\t\tentitlements. Updated contact information.", 'Initial version.',))
if mibBuilder.loadTexts: gtSettingsMIB.setLastUpdated('201609080000Z')
if mibBuilder.loadTexts: gtSettingsMIB.setOrganization('WISI Communications GmbH & Co. KG')
if mibBuilder.loadTexts: gtSettingsMIB.setContactInfo('https://wisiconnect.tv/')
if mibBuilder.loadTexts: gtSettingsMIB.setDescription('This MIB module represents the modules within a system (rack\n\t\tunit) of a WISI next-generation headend. It provides general\n\t\tmodule information and settings.')
gtSettingsNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 0))
gtSettingsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1))
gtSettingsConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 2))
gtGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 1))
gtSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 2))
gtNetworking = MibIdentifier((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 3))
gtHeadendSystemManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 4))
gtDateAndTime = MibIdentifier((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 5))
gtSNMP = MibIdentifier((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 6))
gtUser = MibIdentifier((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 7))
gtServices = MibIdentifier((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 8))
gtModuleBackup = MibIdentifier((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 9))
gtModuleUpdate = MibIdentifier((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 10))
gtSettingsCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 2, 1))
gtSettingsGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 2, 2))
gtSettingsNotifyWebChanged = NotificationType((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 0, 1)).setObjects(("WISI-GTSETTINGS-MIB", "gtWebEnable"), ("WISI-GTSETTINGS-MIB", "gtWebAuth"), ("WISI-GTSETTINGS-MIB", "gtWebProtocol"))
if mibBuilder.loadTexts: gtSettingsNotifyWebChanged.setStatus('current')
if mibBuilder.loadTexts: gtSettingsNotifyWebChanged.setDescription('The gtSettingsNotifyWebChanged indicates that the web\n\t\tserver status has changed')
gtSettingsNotifyInterfaceChanged = NotificationType((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 0, 2)).setObjects(("WISI-GTSETTINGS-MIB", "gtInterfaceName"), ("WISI-GTSETTINGS-MIB", "gtInterfaceVLAN"), ("WISI-GTSETTINGS-MIB", "gtInterfaceIPv4"), ("WISI-GTSETTINGS-MIB", "gtInterfaceIPv4Mask"), ("WISI-GTSETTINGS-MIB", "gtInterfaceIPv4Gateway"), ("WISI-GTSETTINGS-MIB", "gtInterfaceVLAN"), ("WISI-GTSETTINGS-MIB", "gtInterfaceIGMP"), ("WISI-GTSETTINGS-MIB", "gtInterfaceDHCPState"), ("WISI-GTSETTINGS-MIB", "gtInterfaceWebMgt"), ("WISI-GTSETTINGS-MIB", "gtInterfaceSNMP"), ("WISI-GTSETTINGS-MIB", "gtInterfaceSimulcrypt"), ("WISI-GTSETTINGS-MIB", "gtInterfaceStreaming"), ("WISI-GTSETTINGS-MIB", "gtInterfaceCLI"), ("WISI-GTSETTINGS-MIB", "gtInterfaceUseVLAN"), ("WISI-GTSETTINGS-MIB", "gtInterfaceIfIndex"), ("WISI-GTSETTINGS-MIB", "gtInterfaceRowStatus"))
if mibBuilder.loadTexts: gtSettingsNotifyInterfaceChanged.setStatus('current')
if mibBuilder.loadTexts: gtSettingsNotifyInterfaceChanged.setDescription("The gtSettingsNotifyInterfaceChanged indicates that an\n\t\tinterface's global settings has changed")
gtSWOptionsTable = MibTable((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 1, 1), )
if mibBuilder.loadTexts: gtSWOptionsTable.setStatus('current')
if mibBuilder.loadTexts: gtSWOptionsTable.setDescription('The gtSWOptionsTable table contains a list of all\n\t\tsoftware options of a SFM/MFM module within the GT01/GN50 rack unit.')
gtSWOptionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 1, 1, 1), ).setIndexNames((0, "WISI-GTMODULES-MIB", "gtModule"), (0, "WISI-GTSETTINGS-MIB", "gtSWOptionsIdx"))
if mibBuilder.loadTexts: gtSWOptionsEntry.setStatus('current')
if mibBuilder.loadTexts: gtSWOptionsEntry.setDescription('The gtSWOptionsEntry table entry represents a software \n\t\toption of a SFM/MFM module within the GT01/GN50 rack unit.')
gtSWOptionsIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 1, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: gtSWOptionsIdx.setStatus('current')
if mibBuilder.loadTexts: gtSWOptionsIdx.setDescription('The gtSWOptionsIdx entity represents the numeric index\n\t\tof a software option of a SFM/MFM module within the \n\t\tGT01/GN50 rack unit.')
gtSWOption = MibTableColumn((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtSWOption.setStatus('current')
if mibBuilder.loadTexts: gtSWOption.setDescription('The gtSWOption entity represents the software option\n\t\tof a SFM/MFM module within the GT01/GN50 rack unit.')
gtSLATable = MibTable((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 1, 2), )
if mibBuilder.loadTexts: gtSLATable.setStatus('current')
if mibBuilder.loadTexts: gtSLATable.setDescription('The gtSLATable table contains a list of all Service License Agreements \n\t\twithin the GT01/GN50 rack unit.')
gtSLAEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 1, 2, 1), ).setIndexNames((0, "WISI-GTMODULES-MIB", "gtModule"))
if mibBuilder.loadTexts: gtSLAEntry.setStatus('current')
if mibBuilder.loadTexts: gtSLAEntry.setDescription('The gtSLAEntry table entry represents a SFM/MFM module \n\t\twithin the GT01/GN50 rack unit.')
gtSLARegistered = MibTableColumn((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtSLARegistered.setStatus('current')
if mibBuilder.loadTexts: gtSLARegistered.setDescription('The gtSLARegistered entity represents the Service License \n\t\tAgreement Registration of a SFM/MFM module within the \n\t\tGT01/GN50 rack unit.')
gtSLAExpires = MibTableColumn((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtSLAExpires.setStatus('current')
if mibBuilder.loadTexts: gtSLAExpires.setDescription('The gtSLAExpires entity represents the Service License \n\t\tAgreement expire date of a SFM/MFM module within the \n\t\tGT01/GN50 rack unit.')
gtSyslogTable = MibTable((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 1, 3), )
if mibBuilder.loadTexts: gtSyslogTable.setStatus('current')
if mibBuilder.loadTexts: gtSyslogTable.setDescription('The gtSyslogTable table contains a list of all syslog servers\n\t\twithin the GT01/GN50 rack unit.')
gtSyslogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 1, 3, 1), ).setIndexNames((0, "WISI-GTMODULES-MIB", "gtModule"))
if mibBuilder.loadTexts: gtSyslogEntry.setStatus('current')
if mibBuilder.loadTexts: gtSyslogEntry.setDescription('The gtPortsEntry table entry represents a syslog server\n\t\twithin the GT01/GN50 rack unit.')
gtSyslogState = MibTableColumn((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gtSyslogState.setStatus('current')
if mibBuilder.loadTexts: gtSyslogState.setDescription('The gtSyslogState represents the syslog state \n\t\tof a SFM/MFM module within the GT01/GN50 rack unit.')
gtSyslogIP = MibTableColumn((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 1, 3, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gtSyslogIP.setStatus('current')
if mibBuilder.loadTexts: gtSyslogIP.setDescription('The gtSyslogIP represents the syslog IP address \n\t\tof a SFM/MFM module within the GT01/GN50 rack unit.')
gtNetworkTable = MibTable((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 2, 1), )
if mibBuilder.loadTexts: gtNetworkTable.setStatus('current')
if mibBuilder.loadTexts: gtNetworkTable.setDescription('The gtNetworkTable table contains a list of all\n\t\tnetworks within the GT01/GN50 rack unit.')
gtNetworkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 2, 1, 1), ).setIndexNames((0, "WISI-GTSETTINGS-MIB", "gtNetworkVLAN"))
if mibBuilder.loadTexts: gtNetworkEntry.setStatus('current')
if mibBuilder.loadTexts: gtNetworkEntry.setDescription('The gtNetworkEntry table entry represents a network \n\t\twithin the GT01/GN50 rack unit.')
gtNetworkVLAN = MibTableColumn((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 2, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095)))
if mibBuilder.loadTexts: gtNetworkVLAN.setStatus('current')
if mibBuilder.loadTexts: gtNetworkVLAN.setDescription('The gtNetworkVLAN represents the network VLAN ID \n\t\twithin the GT01/GN50 rack unit.')
gtNetworkName = MibTableColumn((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtNetworkName.setStatus('current')
if mibBuilder.loadTexts: gtNetworkName.setDescription('The gtNetworkName entity represents the network  \n\t\tname within the GT01/GN50 rack unit.')
gtNetworkIGMPQuerierState = MibTableColumn((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("off", 0), ("forced", 1), ("auto", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtNetworkIGMPQuerierState.setStatus('current')
if mibBuilder.loadTexts: gtNetworkIGMPQuerierState.setDescription('The gtNetworkIGMPQuerierState represents the network IGMP \n\t\tquerier state within the GT01/GN50 rack unit.')
gtNetworkIGMPQuerierIP = MibTableColumn((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 2, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtNetworkIGMPQuerierIP.setStatus('current')
if mibBuilder.loadTexts: gtNetworkIGMPQuerierIP.setDescription('The gtNetworkIGMPQuerierIP represents the network IGMP querier \n\t\tIP address within the GT01/GN50 rack unit.')
gtNetworkIGMPSnoopingState = MibTableColumn((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("blockMulticast", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtNetworkIGMPSnoopingState.setStatus('current')
if mibBuilder.loadTexts: gtNetworkIGMPSnoopingState.setDescription('The gtNetworkIGMPSnoopingState represents the network IGMP snooping \n\t\tstate within the GT01/GN50 rack unit.')
gtNetworkPortsTable = MibTable((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 2, 2), )
if mibBuilder.loadTexts: gtNetworkPortsTable.setStatus('current')
if mibBuilder.loadTexts: gtNetworkPortsTable.setDescription('The gtNetworkTable table contains a list of all\n\t\tnetwork ports within the GT01/GN50 rack unit. ')
gtNetworkPortsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 2, 2, 1), ).setIndexNames((0, "WISI-GTSETTINGS-MIB", "gtNetworkPortVLAN"), (0, "WISI-GTSETTINGS-MIB", "gtNetworkPortNumber"))
if mibBuilder.loadTexts: gtNetworkPortsEntry.setStatus('current')
if mibBuilder.loadTexts: gtNetworkPortsEntry.setDescription('The gtNetworkPortsEntry table entry represents a network \n\t\twithin the GT01/GN50 rack unit. ')
gtNetworkPortVLAN = MibTableColumn((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 2, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095)))
if mibBuilder.loadTexts: gtNetworkPortVLAN.setStatus('current')
if mibBuilder.loadTexts: gtNetworkPortVLAN.setDescription('The gtNetworkPortVLAN represents the network VLAN ID within\n\t\tthe GT01/GN50 rack unit.')
gtNetworkPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 2, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: gtNetworkPortNumber.setStatus('current')
if mibBuilder.loadTexts: gtNetworkPortNumber.setDescription('The gtNetworkPortNumber entity represents the numeric index\n\t\tof a network port within the GT01/GN50 rack unit.')
gtNetworkPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 2, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(255, 255)).setFixedLength(255)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtNetworkPortName.setStatus('current')
if mibBuilder.loadTexts: gtNetworkPortName.setDescription('The gtNetworkPortName entity represents the name\n\t\tof a network port within the GT01/GN50 rack unit.')
gtNetworkPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notMember", 0), ("untagged", 1), ("tagged", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtNetworkPortState.setStatus('current')
if mibBuilder.loadTexts: gtNetworkPortState.setDescription('The gtNetworkPortState represents the state of a network port \n\t\twithin the GT01/GN50 rack unit.')
gtPortsTable = MibTable((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 2, 3), )
if mibBuilder.loadTexts: gtPortsTable.setStatus('current')
if mibBuilder.loadTexts: gtPortsTable.setDescription('The gtPortsTable table contains a list of all network ports \n\t\twithin the GT01/GN50 rack unit.')
gtPortsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 2, 3, 1), ).setIndexNames((0, "WISI-GTSETTINGS-MIB", "gtPortsNumber"))
if mibBuilder.loadTexts: gtPortsEntry.setStatus('current')
if mibBuilder.loadTexts: gtPortsEntry.setDescription('The gtPortsEntry table entry represents a network port\n\t\twithin the GT01/GN50 rack unit.')
gtPortsNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 2, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: gtPortsNumber.setStatus('current')
if mibBuilder.loadTexts: gtPortsNumber.setDescription('The gtPortsNumber entity represents the numeric index of a \n\t\tnetwork port within the GT01/GN50 rack unit.')
gtPortsName = MibTableColumn((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 2, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtPortsName.setStatus('current')
if mibBuilder.loadTexts: gtPortsName.setDescription('The gtPortsName entity represents the network port name\n\t\twithin the GT01/GN50 rack unit.')
gtPortsFloodMulticast = MibTableColumn((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtPortsFloodMulticast.setStatus('current')
if mibBuilder.loadTexts: gtPortsFloodMulticast.setDescription('The gtPortsFloodMulticast represents the flood multicast setting\t\t\n\t\tof the specific network port within the GT01/GN50 rack unit.')
gtPortsBitrateReceive = MibTableColumn((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 2, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtPortsBitrateReceive.setStatus('current')
if mibBuilder.loadTexts: gtPortsBitrateReceive.setDescription('The gtPortsBitrateReceive entity represents the receiving bitrate \n\t\tof the specific network port within the GT01/GN50 rack unit.\n\t\tThe gtPortsBitrateReceive value is displayed in bits/sec.')
gtPortsBitrateTransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 2, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtPortsBitrateTransmit.setStatus('current')
if mibBuilder.loadTexts: gtPortsBitrateTransmit.setDescription('The gtPortsBitrateTransmit entity represents the transmitting bitrate \n\t\tof the specific network port within the GT01/GN50 rack unit.\n\t\tThe gtPortsBitrateTransmit value is displayed in bits/sec.')
gtPortsLinkup = MibTableColumn((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disconnected", 0), ("connected", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtPortsLinkup.setStatus('current')
if mibBuilder.loadTexts: gtPortsLinkup.setDescription('The gtPortsLinkup entity represents the link state \n\t\tof the specific network port within the GT01/GN50 rack unit.')
gtIGMPQuerierVersion = MibScalar((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("igmpv1", 1), ("igmpv2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gtIGMPQuerierVersion.setStatus('current')
if mibBuilder.loadTexts: gtIGMPQuerierVersion.setDescription('The gtIGMPQuerierVersion represents the IGMP querier version \n\t\tof a SFM/MFM module within the GT01/GN50 rack unit.')
gtIGMPQuerierRobustness = MibScalar((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 2, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gtIGMPQuerierRobustness.setStatus('current')
if mibBuilder.loadTexts: gtIGMPQuerierRobustness.setDescription('The gtIGMPQuerierRobustness represents the IGMP querier robustness \n\t\tof a SFM/MFM module within the GT01/GN50 rack unit.')
gtIGMPQueryInterval = MibScalar((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 2, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gtIGMPQueryInterval.setStatus('current')
if mibBuilder.loadTexts: gtIGMPQueryInterval.setDescription('The gtIGMPQueryInterval represents the IGMP query interval \n\t\tof a SFM/MFM module within the GT01/GN50 rack unit.')
gtIGMPQueryStartupInterval = MibScalar((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 2, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gtIGMPQueryStartupInterval.setStatus('current')
if mibBuilder.loadTexts: gtIGMPQueryStartupInterval.setDescription('The gtIGMPQueryStartupInterval represents the IGMP startup \n\t\tquery interval of a SFM/MFM module within the GT01/GN50 rack unit.')
gtIGMPQueryStartupCount = MibScalar((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 2, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gtIGMPQueryStartupCount.setStatus('current')
if mibBuilder.loadTexts: gtIGMPQueryStartupCount.setDescription('The gtIGMPQueryStartupCount represents the IGMP startup query count \n\t\tof a SFM/MFM module within the GT01/GN50 rack unit.')
gtIGMPLastMemberQueryInterval = MibScalar((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 2, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gtIGMPLastMemberQueryInterval.setStatus('current')
if mibBuilder.loadTexts: gtIGMPLastMemberQueryInterval.setDescription('The gtIGMPLastMemberQueryInterval represents the last member \n\t\tquery interval of a SFM/MFM module within the GT01/GN50 rack unit.\n\t\tThe gtIGMPLastMemberQueryInterval value is displayed in ms.')
gtIGMPLastMemberQueryCount = MibScalar((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 2, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gtIGMPLastMemberQueryCount.setStatus('current')
if mibBuilder.loadTexts: gtIGMPLastMemberQueryCount.setDescription('The gtIGMPLastMemberQueryCount represents the last member query \n\t\tcount of a SFM/MFM module within the GT01/GN50 rack unit.')
gtIGMPQuerierResponseTime = MibScalar((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 2, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gtIGMPQuerierResponseTime.setStatus('current')
if mibBuilder.loadTexts: gtIGMPQuerierResponseTime.setDescription('The gtIGMPQuerierResponseTime represents the IGMP querier response \n\t\ttime of a SFM/MFM module within the GT01/GN50 rack unit.\n\t\tThe gtIGMPQuerierResponseTime value is displayed in ms.')
gtNumSFP = MibScalar((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 2, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtNumSFP.setStatus('current')
if mibBuilder.loadTexts: gtNumSFP.setDescription('The gtNumSFP entity represents the number of SFP ports \n\t\twithin the GT01/GN50 rack unit.\n\t\tThe related entries are provided by gtSFPTable.')
gtSFPTable = MibTable((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 2, 13), )
if mibBuilder.loadTexts: gtSFPTable.setStatus('current')
if mibBuilder.loadTexts: gtSFPTable.setDescription('The gtSFPTable table contains a list of all SFP ports \n\t\twithin the GT01/GN50 rack unit.\n\t\tThe number of entries is provided by gtNumSFP.')
gtSFPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 2, 13, 1), ).setIndexNames((0, "WISI-GTSETTINGS-MIB", "gtSFPNumber"))
if mibBuilder.loadTexts: gtSFPEntry.setStatus('current')
if mibBuilder.loadTexts: gtSFPEntry.setDescription('The gtSFPEntry table entry represents a SFP port\n\t\twithin the GT01/GN50 rack unit.\n\t\tThe number of entries is provided by gtNumSFP.')
gtSFPNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 2, 13, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4, 4)))
if mibBuilder.loadTexts: gtSFPNumber.setStatus('current')
if mibBuilder.loadTexts: gtSFPNumber.setDescription('The gtSFPNumber entity represents the numeric index of a \n\t\tSFP port within the GT01/GN50 rack unit.')
gtSFPPlugged = MibTableColumn((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 2, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notAttached", 0), ("attached", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtSFPPlugged.setStatus('current')
if mibBuilder.loadTexts: gtSFPPlugged.setDescription('The gtSFPPlugged entity represents the SFP  \n\t\tplugged state within the GT01/GN50 rack unit.')
gtSFPLink = MibTableColumn((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 2, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("down", 0), ("up", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtSFPLink.setStatus('current')
if mibBuilder.loadTexts: gtSFPLink.setDescription('The gtSFPPlugged entity represents the SFP  \n\t\tlink state within the GT01/GN50 rack unit.')
gtSFPType = MibTableColumn((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 2, 13, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("copper", 0), ("fiber", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtSFPType.setStatus('current')
if mibBuilder.loadTexts: gtSFPType.setDescription('The gtSFPType entity represents the SFP  \n\t\ttype within the GT01/GN50 rack unit.')
gtSFPSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 2, 13, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('Mbit/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: gtSFPSpeed.setStatus('current')
if mibBuilder.loadTexts: gtSFPSpeed.setDescription('The gtSFPSpeed entity represents the SFP  \n\t\tspeed within the GT01/GN50 rack unit.')
gtDNSTable = MibTable((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 3, 1), )
if mibBuilder.loadTexts: gtDNSTable.setStatus('current')
if mibBuilder.loadTexts: gtDNSTable.setDescription('The gtDNSTable table contains a list of all DNS settings\n\t\twithin the GT01/GN50 rack unit.')
gtDNSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 3, 1, 1), ).setIndexNames((0, "WISI-GTMODULES-MIB", "gtModule"), (0, "WISI-GTSETTINGS-MIB", "gtDNSNumber"))
if mibBuilder.loadTexts: gtDNSEntry.setStatus('current')
if mibBuilder.loadTexts: gtDNSEntry.setDescription(' The gtDNSEntry table entry represents a\n\t\tSFM/MFM module within the GT01/GN50 rack unit.')
gtDNSNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 3, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setUnits('slot')
if mibBuilder.loadTexts: gtDNSNumber.setStatus('current')
if mibBuilder.loadTexts: gtDNSNumber.setDescription('The gtDNSNumber entity represents the numeric index\n\t\tof a SFM/MFM module within the GT01/GN50 rack unit.')
gtDNSServerIP = MibTableColumn((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 3, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtDNSServerIP.setStatus('current')
if mibBuilder.loadTexts: gtDNSServerIP.setDescription('The gtDNSServerIP represents the primary DNS IP address \n\t\tof a SFM/MFM module within the GT01/GN50 rack unit.')
gtInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 3, 2), )
if mibBuilder.loadTexts: gtInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: gtInterfaceTable.setDescription('The gtInterfaceTable table contains a list of all\n\t\tnetwork interfaces of a SFM/MFM module.')
gtInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 3, 2, 1), ).setIndexNames((0, "WISI-GTMODULES-MIB", "gtModule"), (0, "WISI-GTSETTINGS-MIB", "gtInterfaceNumber"))
if mibBuilder.loadTexts: gtInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: gtInterfaceEntry.setDescription('The gtInterfaceEntry table entry represents a network interface \n\t\tof a SFM/MFM module.')
gtInterfaceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 3, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: gtInterfaceNumber.setStatus('current')
if mibBuilder.loadTexts: gtInterfaceNumber.setDescription('The gtInterfaceNumber entity represents the numeric index\n\t\tof a network interface of a SFM/MFM module.')
gtInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 3, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gtInterfaceName.setStatus('current')
if mibBuilder.loadTexts: gtInterfaceName.setDescription('The gtInterfaceName entity represents the network interface \n\t\tname of a SFM/MFM module.')
gtInterfaceMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 3, 2, 1, 3), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtInterfaceMAC.setStatus('current')
if mibBuilder.loadTexts: gtInterfaceMAC.setDescription('The gtInterfaceMAC entity represents the MAC address \n\t\tof a SFM/MFM module within the GT01/GN50 rack unit.')
gtInterfaceState = MibTableColumn((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disconnected", 0), ("connected", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtInterfaceState.setStatus('current')
if mibBuilder.loadTexts: gtInterfaceState.setDescription('The gtInterfaceState entity represents the network state \n\t\tof a SFM/MFM module within the GT01/GN50 rack unit.')
gtInterfaceIPv4 = MibTableColumn((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 3, 2, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gtInterfaceIPv4.setStatus('current')
if mibBuilder.loadTexts: gtInterfaceIPv4.setDescription('The gtInterfaceIPv4 represents the network interface IP address \n\t\tof a SFM/MFM module.')
gtInterfaceIPv4Mask = MibTableColumn((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 3, 2, 1, 6), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gtInterfaceIPv4Mask.setStatus('current')
if mibBuilder.loadTexts: gtInterfaceIPv4Mask.setDescription('The gtInterfaceIPv4Mask represents the network interface netmask\n\t\tof a SFM/MFM module.')
gtInterfaceIPv4Gateway = MibTableColumn((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 3, 2, 1, 7), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gtInterfaceIPv4Gateway.setStatus('current')
if mibBuilder.loadTexts: gtInterfaceIPv4Gateway.setDescription('The gtInterfaceIPv4Gateway represents the network interface gateway\n\t\tof a SFM/MFM module.')
gtInterfaceVLAN = MibTableColumn((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 3, 2, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gtInterfaceVLAN.setStatus('current')
if mibBuilder.loadTexts: gtInterfaceVLAN.setDescription('The gtInterfaceVLAN represents the network interface VLAN ID \n\t\tof a SFM/MFM module.')
gtInterfaceIGMP = MibTableColumn((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 3, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("igmpv2", 2), ("igmpv3", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gtInterfaceIGMP.setStatus('current')
if mibBuilder.loadTexts: gtInterfaceIGMP.setDescription('The gtInterfaceIGMP represents the network interface IGMP version \n\t\tof a SFM/MFM module.')
gtInterfaceDHCPState = MibTableColumn((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 3, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gtInterfaceDHCPState.setStatus('current')
if mibBuilder.loadTexts: gtInterfaceDHCPState.setDescription('The gtInterfaceDHCPState represents the network interface \n\t\tDHCP state of a SFM/MFM module.')
gtInterfaceWebMgt = MibTableColumn((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 3, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gtInterfaceWebMgt.setStatus('current')
if mibBuilder.loadTexts: gtInterfaceWebMgt.setDescription('The gtInterfaceWebMgt represents the network interface web \n\t\tmanagement capability of a SFM/MFM module.')
gtInterfaceSNMP = MibTableColumn((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 3, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gtInterfaceSNMP.setStatus('current')
if mibBuilder.loadTexts: gtInterfaceSNMP.setDescription('The gtInterfaceSNMP represents the network interface SNMP capability\n\t\tof a SFM/MFM module.')
gtInterfaceSimulcrypt = MibTableColumn((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 3, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gtInterfaceSimulcrypt.setStatus('current')
if mibBuilder.loadTexts: gtInterfaceSimulcrypt.setDescription('The gtInterfaceSimulcrypt represents the network interface \n\t\tsimulcrypt capability of a SFM/MFM module.')
gtInterfaceStreaming = MibTableColumn((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 3, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gtInterfaceStreaming.setStatus('current')
if mibBuilder.loadTexts: gtInterfaceStreaming.setDescription('The gtInterfaceStreaming represents the network interface streaming \n\t\tcapability of a SFM/MFM module.')
gtInterfaceCLI = MibTableColumn((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 3, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gtInterfaceCLI.setStatus('current')
if mibBuilder.loadTexts: gtInterfaceCLI.setDescription('The gtInterfaceCLI represents the network interface CLI capability\n\t\tof a SFM/MFM module.')
gtInterfaceUseVLAN = MibTableColumn((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 3, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gtInterfaceUseVLAN.setStatus('current')
if mibBuilder.loadTexts: gtInterfaceUseVLAN.setDescription('The gtInterfaceUseVLAN entity represents whether or not\n\t\tnetwork packages on an SFM/MFM module should be tagged with the\n\t\tVLAN ID set in the gtInterfaceVLAN entity.')
gtInterfaceIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 3, 2, 1, 17), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gtInterfaceIfIndex.setStatus('current')
if mibBuilder.loadTexts: gtInterfaceIfIndex.setDescription('The ifIndex of the physical interface on which this virtual\n\t\tinterface exists, as stored in the IF-MIB::ifTable.')
gtInterfaceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 3, 2, 1, 18), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gtInterfaceRowStatus.setStatus('current')
if mibBuilder.loadTexts: gtInterfaceRowStatus.setDescription('The status of this virtual network interface table conceptual\n\t\trow.\n\n\t\tOnly the following actions and values are supported:\n\t\t * active(1)\n\t\t * createAndGo(4)\n\t\t * destroy(6)\n\n\t\tIf a row exists, it will always be in the active(1) state, even\n\t\tif the interface is not set up in a way that allows it to\n\t\tcommunicate over the network. In order for the new interface to\n\t\twork, the gtInterfaceIfIndex must be set to an existing,\n\t\tphysical interface - not the ifIndex of a VLAN.\n\t\t\n\t\tIn order to create a new row, at least one other columnar value\n\t\tthan the row status must be set in the same PDU.')
gtHMSTable = MibTable((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 4, 4), )
if mibBuilder.loadTexts: gtHMSTable.setStatus('current')
if mibBuilder.loadTexts: gtHMSTable.setDescription('The gtHMSTable table contains a list of all headend \n\t\tsystem management settings within the GT01/GN50 rack unit.')
gtHMSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 4, 4, 1), ).setIndexNames((0, "WISI-GTMODULES-MIB", "gtModule"))
if mibBuilder.loadTexts: gtHMSEntry.setStatus('current')
if mibBuilder.loadTexts: gtHMSEntry.setDescription('The gtHMSEntry table entry represents a\n\t\tSFM/MFM module within the GT01/GN50 rack unit.')
gtHMSGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 4, 4, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gtHMSGroupName.setStatus('current')
if mibBuilder.loadTexts: gtHMSGroupName.setDescription('The gtHMSGroupName entity represents the group name of a SFM/MFM module.')
gtHMSComMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 4, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtHMSComMethod.setStatus('current')
if mibBuilder.loadTexts: gtHMSComMethod.setDescription('The gtHMSComMethod entity represents the communication method within \n\t\tthe group of a SFM/MFM module.')
gtHMSNumMembers = MibTableColumn((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 4, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtHMSNumMembers.setStatus('current')
if mibBuilder.loadTexts: gtHMSNumMembers.setDescription('The gtHMSNumMembers represents the number of members within the group \n\t\tof a SFM/MFM module.')
gtHMSNumAvailModules = MibTableColumn((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 4, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtHMSNumAvailModules.setStatus('current')
if mibBuilder.loadTexts: gtHMSNumAvailModules.setDescription('The gtHMSNumAvailModules represents the number of available modules \n\t\tfor a SFM/MFM module.')
gtDateAndTimeTable = MibTable((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 5, 1), )
if mibBuilder.loadTexts: gtDateAndTimeTable.setStatus('current')
if mibBuilder.loadTexts: gtDateAndTimeTable.setDescription('The gtDateAndTimeTable table contains a list of all \n\t\tdate and time settings within the GT01/GN50 rack unit.')
gtDateAndTimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 5, 1, 1), ).setIndexNames((0, "WISI-GTMODULES-MIB", "gtModule"))
if mibBuilder.loadTexts: gtDateAndTimeEntry.setStatus('current')
if mibBuilder.loadTexts: gtDateAndTimeEntry.setDescription('The gtDateAndTimeEntry table entry represents a\n\t\tSFM/MFM module within the GT01/GN50 rack unit.')
gtCurrentTimeSource = MibTableColumn((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 5, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtCurrentTimeSource.setStatus('current')
if mibBuilder.loadTexts: gtCurrentTimeSource.setDescription('The gtCurrentTimeSource entity represents the current time \n\t\tsource of a SFM/MFM module within the GT01/GN50 rack unit.')
gtTimeUTC = MibTableColumn((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 5, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtTimeUTC.setStatus('current')
if mibBuilder.loadTexts: gtTimeUTC.setDescription('The gtTimeUTC entity represents the UTC time of a SFM/MFM \n\t\tmodule within the GT01/GN50 rack unit.')
gtTimeLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 5, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtTimeLocal.setStatus('current')
if mibBuilder.loadTexts: gtTimeLocal.setDescription('The gtTimeLocal entity represents the local time of a SFM/MFM \n\t\tmodule within the GT01/GN50 rack unit.')
gtTimeZone = MibTableColumn((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 5, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gtTimeZone.setStatus('current')
if mibBuilder.loadTexts: gtTimeZone.setDescription('The gtTimeZone entity represents the time zone of a SFM/MFM\n\t\tmodule within the GT01/GN50 rack unit in POSIX time zone\n\t\tformat, which also allows you to specify the daylight savings\n\t\ttime to use.')
gtDaylightAdjustment = MibTableColumn((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gtDaylightAdjustment.setStatus('current')
if mibBuilder.loadTexts: gtDaylightAdjustment.setDescription('The gtDaylightAdjustment entity controls whether or not an\n\t\tSFM/MFM module within the GT01/GN50 rack unit will switch to\n\t\tdaylight savings time automatically. The daylight savings time\n\t\tsettings to use is specified in the gtTimeZone entity.')
gtNTPServerTable = MibTable((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 5, 2), )
if mibBuilder.loadTexts: gtNTPServerTable.setStatus('current')
if mibBuilder.loadTexts: gtNTPServerTable.setDescription('The gtNTPServerTable table contains a list of all\n\t\tNTP servers of a SFM/MFM module within the GT01/GN50 rack unit.')
gtNTPServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 5, 2, 1), ).setIndexNames((0, "WISI-GTMODULES-MIB", "gtModule"), (0, "WISI-GTSETTINGS-MIB", "gtNTPServerNumber"))
if mibBuilder.loadTexts: gtNTPServerEntry.setStatus('current')
if mibBuilder.loadTexts: gtNTPServerEntry.setDescription('The gtNTPServerEntry table entry represents a NTP server \n\t\tof a SFM/MFM module within the GT01/GN50 rack unit.')
gtNTPServerNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 5, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: gtNTPServerNumber.setStatus('current')
if mibBuilder.loadTexts: gtNTPServerNumber.setDescription('The gtNTPServerNumber entity represents the numeric index\n\t\tof a NTP server of a SFM/MFM module within the \n\t\tGT01/GN50 rack unit.')
gtNTPServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 5, 2, 1, 2), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gtNTPServerAddress.setStatus('current')
if mibBuilder.loadTexts: gtNTPServerAddress.setDescription('The gtNTPServerAddress entity represents an NTP server address\n\t\tused by an SFM/MFM module within the GT01/GN50 rack unit.')
gtNTPServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 5, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gtNTPServerRowStatus.setStatus('current')
if mibBuilder.loadTexts: gtNTPServerRowStatus.setDescription('The status of this NTP server table conceptual row.\n\n\t\tOnly the following actions and values are supported:\n\t\t * active(1)\n\t\t * createAndGo(4)\n\t\t * destroy(6)\n\n\t\tIf a row exists, it will always be in the active(1) state. In\n\t\torder to create a new row, at least one other columnar value\n\t\tthan the row status must be set in the same PDU.')
gtSNMPTable = MibTable((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 6, 1), )
if mibBuilder.loadTexts: gtSNMPTable.setStatus('current')
if mibBuilder.loadTexts: gtSNMPTable.setDescription('The gtSNMPTable table contains a list of all SNMP  \n\t\tconfigurations of a SFM/MFM module within the GT01/GN50 rack unit.')
gtSNMPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 6, 1, 1), ).setIndexNames((0, "WISI-GTMODULES-MIB", "gtModule"))
if mibBuilder.loadTexts: gtSNMPEntry.setStatus('current')
if mibBuilder.loadTexts: gtSNMPEntry.setDescription('The gtSNMPEntry table entry represents a SNMP configuration\n\t\tof a SFM/MFM module within the GT01/GN50 rack unit.')
gtAgentState = MibTableColumn((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtAgentState.setStatus('current')
if mibBuilder.loadTexts: gtAgentState.setDescription('The gtAgentState entity represents the SNMP agent state of \n\t\ta SFM/MFM module within the GT01/GN50 rack unit.')
gtAgentPort = MibTableColumn((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 6, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtAgentPort.setStatus('current')
if mibBuilder.loadTexts: gtAgentPort.setDescription('The gtAgentPort represents the SNMP agent port\tof a \n\t\tSFM/MFM module within the GT01/GN50 rack unit.')
gtAgentSecurityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAuthenticationOrEncryption", 1), ("authenticationNoEncryption", 2), ("authenticationAndEncryption", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtAgentSecurityLevel.setStatus('current')
if mibBuilder.loadTexts: gtAgentSecurityLevel.setDescription('The gtAgentSecurityLevel entity represents the SNMP agent \n\t\tsecurity level of a SFM/MFM module within the GT01/GN50 rack unit.')
gtAgentComReadString = MibTableColumn((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 6, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gtAgentComReadString.setStatus('current')
if mibBuilder.loadTexts: gtAgentComReadString.setDescription('The gtAgentComReadString entity represents the SNMP agent community \n\t\tread string of an SFM/MFM module within the GT01/GN50 rack unit.')
gtAgentComWriteString = MibTableColumn((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 6, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gtAgentComWriteString.setStatus('current')
if mibBuilder.loadTexts: gtAgentComWriteString.setDescription('The gtAgentComWriteString entity represents the SNMP agent community \n\t\twrite string of an SFM/MFM module within the GT01/GN50 rack unit.')
gtTrapState = MibTableColumn((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gtTrapState.setStatus('current')
if mibBuilder.loadTexts: gtTrapState.setDescription('The gtTrapState tells you if SNMP traps are enabled on an\n\t\tSFM/MFM module within the GT01/GN50 rack unit.')
gtTrapSNMPVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 6, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3))).clone(namedValues=NamedValues(("version1", 0), ("version2c", 1), ("version3", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gtTrapSNMPVersion.setStatus('current')
if mibBuilder.loadTexts: gtTrapSNMPVersion.setDescription('The gtTrapSNMPVersion represents the SNMP protocol version\n\t\tthat will be used to send SNMP traps from an SFM/MFM module\n\t\twithin the GT01/GN50 rack unit.')
gtTrapUser = MibTableColumn((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 6, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(40, 40)).setFixedLength(40)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtTrapUser.setStatus('current')
if mibBuilder.loadTexts: gtTrapUser.setDescription('The gtTrapUser entity represents the SNMP trap user for SNMPv3 \n\t\tof a SFM/MFM module within the GT01/GN50 rack unit.')
gtTrapSecurityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 6, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAuthenticationOrEncryption", 1), ("authenticationNoEncryption", 2), ("authenticationAndEncryption", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtTrapSecurityLevel.setStatus('current')
if mibBuilder.loadTexts: gtTrapSecurityLevel.setDescription('The gtTrapSecurityLevel entity represents the SNMP trap security \n\t\tlevel of a SFM/MFM module within the GT01/GN50 rack unit.')
gtTrapComString = MibTableColumn((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 6, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gtTrapComString.setStatus('current')
if mibBuilder.loadTexts: gtTrapComString.setDescription('The gtTrapComString entity represents the SNMP trap community \n\t\tstring of a SFM/MFM module within the GT01/GN50 rack unit.')
gtTrapPDU = MibTableColumn((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 6, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(164, 166, 167))).clone(namedValues=NamedValues(("v1Trap", 164), ("inform", 166), ("v2Trap", 167)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtTrapPDU.setStatus('current')
if mibBuilder.loadTexts: gtTrapPDU.setDescription('The gtTrapPDU entity represents the SNMP trap PDU of a SFM/MFM \n\t\tmodule within the GT01/GN50 rack unit.')
gtTrapDestTable = MibTable((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 6, 2), )
if mibBuilder.loadTexts: gtTrapDestTable.setStatus('current')
if mibBuilder.loadTexts: gtTrapDestTable.setDescription('The gtTrapDestTable table contains a list of all SNMP trap\n\t\tdestinations of an SFM/MFM module within the GT01/GN50 rack\n\t\tunit.')
gtTrapDestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 6, 2, 1), ).setIndexNames((0, "WISI-GTMODULES-MIB", "gtModule"), (0, "WISI-GTSETTINGS-MIB", "gtTrapDestNumber"))
if mibBuilder.loadTexts: gtTrapDestEntry.setStatus('current')
if mibBuilder.loadTexts: gtTrapDestEntry.setDescription('The gtTrapDestEntry table entry represents an SNMP trap\n\t\tdestination of an SFM/MFM module within the GT01/GN50 rack\n\t\tunit.')
gtTrapDestNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 6, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: gtTrapDestNumber.setStatus('current')
if mibBuilder.loadTexts: gtTrapDestNumber.setDescription('The gtTrapDestNumber entity represents the numeric index of an\n\t\tSNMP trap destination of an SFM/MFM module within the GT01/GN50\n\t\track unit.')
gtTrapDestIP = MibTableColumn((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 6, 2, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gtTrapDestIP.setStatus('current')
if mibBuilder.loadTexts: gtTrapDestIP.setDescription('The gtTrapDestIP represents an IP address to which an SFM/MFM\n\t\tmodule within the GT01/GN50 rack unit should send SNMP traps.')
gtTrapDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 6, 2, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gtTrapDestPort.setStatus('current')
if mibBuilder.loadTexts: gtTrapDestPort.setDescription('The gtTrapDestPort represents the UDP port to which an SFM/MFM\n\t\tmodule within the GT01/GN50 rack unit should send SNMP traps\n\t\tdestined for this target IP.')
gtTrapDestRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 6, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gtTrapDestRowStatus.setStatus('current')
if mibBuilder.loadTexts: gtTrapDestRowStatus.setDescription('The status of this trap destination table conceptual row.\n\n\t\tOnly the following actions and values are supported:\n\t\t * active(1)\n\t\t * createAndGo(4)\n\t\t * destroy(6)\n\n\t\tIf a row exists, it will always be in the active(1) state. In\n\t\torder to create a new row, at least one other columnar value\n\t\tthan the row status must be set in the same PDU.')
gtUserTable = MibTable((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 7, 1), )
if mibBuilder.loadTexts: gtUserTable.setStatus('current')
if mibBuilder.loadTexts: gtUserTable.setDescription('The gtUserTable table contains a list of all users within the \n\t\tGT01/GN50 rack unit.')
gtUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 7, 1, 1), ).setIndexNames((0, "WISI-GTMODULES-MIB", "gtModule"), (0, "WISI-GTSETTINGS-MIB", "gtUserIdx"), (0, "WISI-GTSETTINGS-MIB", "gtUserParamIdx"))
if mibBuilder.loadTexts: gtUserEntry.setStatus('current')
if mibBuilder.loadTexts: gtUserEntry.setDescription('The gtUserEntry table entry represents a user within the \n\t\tGT01/GN50 rack unit.')
gtUserIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 7, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: gtUserIdx.setStatus('current')
if mibBuilder.loadTexts: gtUserIdx.setDescription('The gtUserIdx entity represents the numeric index of a \n\t\tuser within the GT01/GN50 rack unit.')
gtUserParamIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 7, 1, 1, 2), Unsigned32())
if mibBuilder.loadTexts: gtUserParamIdx.setStatus('current')
if mibBuilder.loadTexts: gtUserParamIdx.setDescription('The gtUserIdx entity represents the numeric index of a \n\t\tuser parameter within the GT01/GN50 rack unit.')
gtUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 7, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gtUserName.setStatus('current')
if mibBuilder.loadTexts: gtUserName.setDescription('The gtUserName entity represents the user  \n\t\tname within the GT01/GN50 rack unit.')
gtUserPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 7, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gtUserPassword.setStatus('current')
if mibBuilder.loadTexts: gtUserPassword.setDescription('The gtUserPassword entity can be used to set\n\t\tthe user password within the GT01/GN50 rack unit.')
gtUserGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 7, 1, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gtUserGroup.setStatus('current')
if mibBuilder.loadTexts: gtUserGroup.setDescription('The gtUserGroup entity represents the user  \n\t\tgroup within the GT01/GN50 rack unit.')
gtUserAccesslist = MibTableColumn((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 7, 1, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gtUserAccesslist.setStatus('current')
if mibBuilder.loadTexts: gtUserAccesslist.setDescription('The gtUserAccesslist entity represents the user  \n\t\taccesslist within the GT01/GN50 rack unit.')
gtUserRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 7, 1, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gtUserRowStatus.setStatus('current')
if mibBuilder.loadTexts: gtUserRowStatus.setDescription('The status of this user table conceptual row.\n\n\t\tOnly the following actions and values are supported:\n\t\t * active(1)\n\t\t * createAndGo(4)\n\t\t * destroy(6)\n\n\t\tIf a row exists, it will always be in the active(1) state. In\n\t\torder to create a new row, at least one other columnar value\n\t\tthan the row status must be set in the same PDU.')
gtGroupTable = MibTable((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 7, 2), )
if mibBuilder.loadTexts: gtGroupTable.setStatus('current')
if mibBuilder.loadTexts: gtGroupTable.setDescription('The gtGroupTable table contains a list of all groups within the \n\t\tGT01/GN50 rack unit.')
gtGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 7, 2, 1), ).setIndexNames((0, "WISI-GTMODULES-MIB", "gtModule"), (0, "WISI-GTSETTINGS-MIB", "gtGroupIdx"), (0, "WISI-GTSETTINGS-MIB", "gtGroupParamIdx"))
if mibBuilder.loadTexts: gtGroupEntry.setStatus('current')
if mibBuilder.loadTexts: gtGroupEntry.setDescription('The gtGroupEntry table entry represents a group within the \n\t\tGT01/GN50 rack unit.')
gtGroupIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 7, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: gtGroupIdx.setStatus('current')
if mibBuilder.loadTexts: gtGroupIdx.setDescription('The gtGroupIdx entity represents the numeric index of a \n\t\tgroup within the GT01/GN50 rack unit.')
gtGroupParamIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 7, 2, 1, 2), Unsigned32())
if mibBuilder.loadTexts: gtGroupParamIdx.setStatus('current')
if mibBuilder.loadTexts: gtGroupParamIdx.setDescription('The gtGroupParamIdx entity represents the numeric index of a \n\t\tgroup parameter within the GT01/GN50 rack unit.')
gtGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 7, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gtGroupName.setStatus('current')
if mibBuilder.loadTexts: gtGroupName.setDescription('The gtGroupName entity represents the group  \n\t\tname within the GT01/GN50 rack unit.')
gtGroupRights = MibTableColumn((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 7, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gtGroupRights.setStatus('current')
if mibBuilder.loadTexts: gtGroupRights.setDescription('The gtGroupRights entity represents the group rights  \n\t\twithin the GT01/GN50 rack unit.\n                \n                Is a sum of the following values where every part of \n                the sum is a right for the group.\n                \n                1 - read\n                2 - write\n                4 - execute')
gtGroupAccesslist = MibTableColumn((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 7, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gtGroupAccesslist.setStatus('current')
if mibBuilder.loadTexts: gtGroupAccesslist.setDescription('The gtGroupAccesslist entity represents the group  \n\t\taccesslist within the GT01/GN50 rack unit.')
gtAccesslistTable = MibTable((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 7, 3), )
if mibBuilder.loadTexts: gtAccesslistTable.setStatus('current')
if mibBuilder.loadTexts: gtAccesslistTable.setDescription('The gtAccesslistTable table contains a list of all accesslists within the \n\t\tGT01/GN50 rack unit.')
gtAccesslistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 7, 3, 1), ).setIndexNames((0, "WISI-GTMODULES-MIB", "gtModule"), (0, "WISI-GTSETTINGS-MIB", "gtAccesslistIdx"), (0, "WISI-GTSETTINGS-MIB", "gtAccesslistParamIdx"))
if mibBuilder.loadTexts: gtAccesslistEntry.setStatus('current')
if mibBuilder.loadTexts: gtAccesslistEntry.setDescription('The gtAccesslistEntry table entry represents a accesslist within the \n\t\tGT01/GN50 rack unit.')
gtAccesslistIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 7, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: gtAccesslistIdx.setStatus('current')
if mibBuilder.loadTexts: gtAccesslistIdx.setDescription('The gtAccesslistIdx entity represents the numeric index of a \n\t\taccesslist within the GT01/GN50 rack unit.')
gtAccesslistParamIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 7, 3, 1, 2), Unsigned32())
if mibBuilder.loadTexts: gtAccesslistParamIdx.setStatus('current')
if mibBuilder.loadTexts: gtAccesslistParamIdx.setDescription('The gtAccesslistParamIdx entity represents the numeric index of a \n\t\taccesslist parameter within the GT01/GN50 rack unit.')
gtAccesslistName = MibTableColumn((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 7, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gtAccesslistName.setStatus('current')
if mibBuilder.loadTexts: gtAccesslistName.setDescription('The gtAccesslistName entity represents the accesslist  \n\t\tname within the GT01/GN50 rack unit.')
gtAccesslistIPRange = MibTableColumn((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 7, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gtAccesslistIPRange.setStatus('current')
if mibBuilder.loadTexts: gtAccesslistIPRange.setDescription('The gtAccesslistIPRange entity represents the accesslist IP range\n\t\twithin the GT01/GN50 rack unit.')
gtCurrentUserName = MibScalar((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 7, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtCurrentUserName.setStatus('current')
if mibBuilder.loadTexts: gtCurrentUserName.setDescription('The gtUserName entity represents the current user  \n\t\tname within the GT01/GN50 rack unit.')
gtCurrentUserPassword = MibScalar((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 7, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gtCurrentUserPassword.setStatus('current')
if mibBuilder.loadTexts: gtCurrentUserPassword.setDescription('The gtUserPassword entity can be used to set\n\t\tthe password for the current user within the GT01/GN50 rack unit.')
gtUserAuthTable = MibTable((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 7, 6), )
if mibBuilder.loadTexts: gtUserAuthTable.setStatus('current')
if mibBuilder.loadTexts: gtUserAuthTable.setDescription('The gtUserAuthTable controls whether or not user authentication\n\t\twill be used on the modules within the GT01/GN50 rack unit.')
gtUserAuthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 7, 6, 1), ).setIndexNames((0, "WISI-GTMODULES-MIB", "gtModule"))
if mibBuilder.loadTexts: gtUserAuthEntry.setStatus('current')
if mibBuilder.loadTexts: gtUserAuthEntry.setDescription('The gtUserAuthEntry table entry controls whether or not user\n\t\tauthentication will be used on a module within the GT01/GN50\n\t\track unit.')
gtUserAuthEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 7, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gtUserAuthEnabled.setStatus('current')
if mibBuilder.loadTexts: gtUserAuthEnabled.setDescription('The gtUserAuthEnabled entity allows you to control whether or\n\t\tnot authentication will be used on a module within the\n\t\tGT01/GN50 rack unit. If it is disabled a user does not have to\n\t\tgive a username/password in order to access data.')
gtServicesTable = MibTable((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 8, 1), )
if mibBuilder.loadTexts: gtServicesTable.setStatus('current')
if mibBuilder.loadTexts: gtServicesTable.setDescription('The gtServicesTable table contains a list of \n\t\tservices settings within the GT01/GN50 rack unit.')
gtServicesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 8, 1, 1), ).setIndexNames((0, "WISI-GTMODULES-MIB", "gtModule"))
if mibBuilder.loadTexts: gtServicesEntry.setStatus('current')
if mibBuilder.loadTexts: gtServicesEntry.setDescription('The gtServicesEntry table entry represents a\n\t\tSFM/MFM module within the GT01/GN50 rack unit.')
gtWebEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gtWebEnable.setStatus('current')
if mibBuilder.loadTexts: gtWebEnable.setDescription('The gtWebAuth represents the user interface state\n\t\twithin the GT01/GN50 rack unit.')
gtWebAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gtWebAuth.setStatus('current')
if mibBuilder.loadTexts: gtWebAuth.setDescription('The gtWebAuth represents the user interface authentication \n\t\twithin the GT01/GN50 rack unit.')
gtWebProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("http", 0), ("https", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gtWebProtocol.setStatus('current')
if mibBuilder.loadTexts: gtWebProtocol.setDescription('The gtWebProtocol represents the user interface protocol \n\t\twithin the GT01/GN50 rack unit.')
gtChassisRedundancy = MibScalar((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gtChassisRedundancy.setStatus('current')
if mibBuilder.loadTexts: gtChassisRedundancy.setDescription('The gtChassisRedundancy represents the chassis redundancy  \n\t\tof a SFM/MFM module within the GT01/GN50 rack unit.')
gtModuleBackupTable = MibTable((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 9, 2), )
if mibBuilder.loadTexts: gtModuleBackupTable.setStatus('current')
if mibBuilder.loadTexts: gtModuleBackupTable.setDescription('The gtModuleBackupTable table contains a list of \n\t\tbackup and redundancy settings within the GT01/GN50 rack unit.')
gtModuleBackupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 9, 2, 1), ).setIndexNames((0, "WISI-GTMODULES-MIB", "gtModule"))
if mibBuilder.loadTexts: gtModuleBackupEntry.setStatus('current')
if mibBuilder.loadTexts: gtModuleBackupEntry.setDescription('The gtModuleBackupEntry table entry represents a\n\t\tSFM/MFM module within the GT01/GN50 rack unit.')
gtModuleBackupDate = MibTableColumn((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 9, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(30, 30)).setFixedLength(30)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtModuleBackupDate.setStatus('current')
if mibBuilder.loadTexts: gtModuleBackupDate.setDescription('The gtModuleBackupDate entity represents the date of the last backup\n\t\tof a SFM/MFM module within the GT01/GN50 rack unit.')
gtModuleRedundancyGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 9, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gtModuleRedundancyGroup.setStatus('current')
if mibBuilder.loadTexts: gtModuleRedundancyGroup.setDescription('The gtModuleRedundancyGroup entity represents the redundancy group\n\t\tof a SFM/MFM module within the GT01/GN50 rack unit.')
gtModuleRedundancyMode = MibTableColumn((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 9, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("operational", 1), ("backup", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gtModuleRedundancyMode.setStatus('current')
if mibBuilder.loadTexts: gtModuleRedundancyMode.setDescription('The gtModuleRedundancyMode entity represents the redundancy mode\n\t\tof a SFM/MFM module within the GT01/GN50 rack unit.')
gtModuleBackupControl = MibTableColumn((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 9, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 0), ("backup", 1), ("restore", 2), ("factoryReset", 3), ("downloadBackup", 4), ("uploadBackup", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gtModuleBackupControl.setStatus('current')
if mibBuilder.loadTexts: gtModuleBackupControl.setDescription("The gtModuleBackupControl entity allows you to backup, restore\n\t\tor reset the settings of an SFM/MFM module within the GT01/GN50\n\t\track unit to factory defaults, or to download or upload its\n\t\tcurrent settings backup file from/to a server using SFTP. This\n\t\tentity is used as a command, reading its value will return the\n\t\tlast command run for the given module since the GT01/GN50\n\t\tbooted or none(0) if no command has been run since it booted\n\t\tup. The commands are:\n\n\t\t  backup(1) - Create a backup of the module's settings and save\n\t\t  it to the GT01/GN50.\n\n\t\t  restore(2) - Restore a module's settings from the backup that\n\t\t  is stored on the GT01/GN50.\n\n\t\t  factoryReset(3) - Reset all settings on the module to the\n\t\t  factory defaults.\n\n\t\t  downloadBackup(4) - Download a settings backup file from an\n\t\t  SFTP server to the GT01/GN50. The settings from this backup\n\t\t  can then be applied to the module using the restore(2)\n\t\t  command.\n\n\t\t  uploadBackup(5) - Upload a settings backup from the GT01/GN50\n\t\t  to an SFTP server.\n\t\t\n\t\tThe downloadBackup(4) and uploadBackup(5) commands use the\n\t\tgtBackupSFTP* settings to down-/upload the module's backup file\n\t\tfrom/to an SFTP server.")
gtModuleBackupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 9, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("commandRunning", 1), ("commandSucceeded", 2), ("commandFailed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtModuleBackupStatus.setStatus('current')
if mibBuilder.loadTexts: gtModuleBackupStatus.setDescription('The gtModuleBackupStatus entity shows the status of the last\n\t\toperation initiated by gtModuleBackupControl for an SFM/MFM\n\t\tmodule within the GT01/GN50 rack unit. If no module backup\n\t\tcommand has been run since the GT01/GN50 booted up, the state\n\t\twill be none(0).')
gtBackupControl = MibScalar((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 9, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("downloadPrivateKey", 1), ("createBackup", 2), ("deletePrivateKey", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gtBackupControl.setStatus('current')
if mibBuilder.loadTexts: gtBackupControl.setDescription('The gtBackupControl controls the module backup process.\n\t\tThe gtBackupControl can be set to downloadPrivateKey(1) to  \n\t\tdownload the private key given by gtFilename from the \n\t\tSFTP server. There can be only one private key file stored\n\t\tat the same time. \n\t\tThe gtBackupControl can be set to createBackup(2) to create a \n\t\tbackup from all modules available in the chassis and upload it to\n\t\tthe SFTP server given. The Upload will overwrite the existing \n\t\tbackup file.\n\t\tThe gtBackupControl can be set to deletePrivateKey(3) to delete \n\t\tthe stored private key.')
gtBackupStatus = MibScalar((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 9, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("downloading", 1), ("downloadSuccessful", 2), ("downloadFailed", 3), ("createBackups", 4), ("uploading", 5), ("uploadSuccessful", 6), ("uploadFailed", 7), ("deletePrivateKeySuccessful", 8), ("deletePrivateKeyFailed", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtBackupStatus.setStatus('current')
if mibBuilder.loadTexts: gtBackupStatus.setDescription('The gtBackupStatus reports the different stages of the \n\t\tmodule backup process.')
gtBackupPrivateKeyFilename = MibScalar((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 9, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gtBackupPrivateKeyFilename.setStatus('current')
if mibBuilder.loadTexts: gtBackupPrivateKeyFilename.setDescription('The gtBackupPrivateKeyFilename defines the private key filename \n\t\tto download from the SFTP server. The download is started \n\t\tby gtBackupControl.')
gtBackupSFTPServer = MibScalar((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 9, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gtBackupSFTPServer.setStatus('current')
if mibBuilder.loadTexts: gtBackupSFTPServer.setDescription('The gtBackupSFTPServer defines the SFTP server address,\n\t\tincluding the URL scheme. So to upload a file to my.server.com,\n\t\tset gtBackupSFTPServer to sftp://my.server.com')
gtBackupSFTPPort = MibScalar((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 9, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gtBackupSFTPPort.setStatus('current')
if mibBuilder.loadTexts: gtBackupSFTPPort.setDescription('The gtBackupSFTPPort defines the SFTP server port.')
gtBackupSFTPUsername = MibScalar((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 9, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gtBackupSFTPUsername.setStatus('current')
if mibBuilder.loadTexts: gtBackupSFTPUsername.setDescription('The gtBackupSFTPUsername defines the SFTP server username.')
gtBackupSFTPPassword = MibScalar((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 9, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gtBackupSFTPPassword.setStatus('current')
if mibBuilder.loadTexts: gtBackupSFTPPassword.setDescription('The gtBackupSFTPPassword defines the SFTP server password. \n\t\tA SNMP get retrieves always an empty string.')
gtBackupSFTPHostPublicKeyMD5 = MibScalar((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 9, 10), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(32, 32), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gtBackupSFTPHostPublicKeyMD5.setStatus('current')
if mibBuilder.loadTexts: gtBackupSFTPHostPublicKeyMD5.setDescription('The gtBackupSFTPHostPublicKeyMD5 defines the public key MD5 of the \n\t\tSFTP server to validate the correctness of the server. \n\t\tIf left empty all servers are valid.')
gtBackupSFTPFilename = MibScalar((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 9, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gtBackupSFTPFilename.setStatus('current')
if mibBuilder.loadTexts: gtBackupSFTPFilename.setDescription("The gtBackupSFTPFilename object specifies the name of the\n\t\tremote backup file on the server. This is the name of the file\n\t\tthat will be created on the SFTP server by setting\n\t\tgtBackupControl to createBackup(2) - for creating a backup of\n\t\tall the GT01/GN50 rack unit's modules' settings - or by setting\n\t\tgtModuleBackupControl to uploadBackup(5) - to upload the\n\t\texisting backup of a single module's settings from the\n\t\tGT01/GN50. This is also used as the name of the remote file\n\t\tthat will be downloaded from the SFTP server by setting\n\t\tgtModuleBackupControl to downloadBackup(4) - to download the\n\t\tbackup of a single module's settings to the GT01/GN50.\n\n\t\tThe filename should contain the full path of the remote file.\n\t\tIf it starts with a slash ('/') it will be interpreted as an\n\t\tabsolute path. If it starts with any other character, it will\n\t\tbe interpreted as a relative path from the user's home\n\t\tdirectory on the server.")
gtUpdateControl = MibScalar((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("downloadFirmware", 1), ("updateModules", 2), ("updateSwitch", 3), ("deleteAllFirmwareFiles", 4), ("deletePrivateKey", 5), ("updateEntitlements", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gtUpdateControl.setStatus('current')
if mibBuilder.loadTexts: gtUpdateControl.setDescription("The gtUpdateControl controls the module update process.\n\t\tThe gtUpdateControl can be set to the following values:\n\t\t\n\t\t  downloadFirmware(1) - download the firmware, entitlement or\n\t\t  private key file given by gtFirmwareFilename from the SFTP\n\t\t  server. There can be only one firmware per module type stored\n\t\t  at a time, only one entitlement file per module and only one\n\t\t  single private key. If you download a new firmware file for a\n\t\t  type that already exists on the rack unit, the old firmware is\n\t\t  deleted.\n\t\t  Firmware file names must start with the module type, e.g.,\n\t\t  'GT11_firmware_vXX.bin' or 'gt22-firmware.bin'. Entitlement\n\t\t  files must have a file name of 'xxxxxxxxxxxxxxxx.ent', where\n\t\t  xxxxxxxxxxxxxxxx is the serial number of the target module, as\n\t\t  a 16 digit hexadecimal number.  Private key file names must\n\t\t  end in '.ppk'.\n\n\t\t  updateModules(2) - update all modules in the chassis with the\n\t\t  firmware previously downloaded, corresponding to their module\n\t\t  types.\n\n\t\t  updateSwitch(3) - update the GT11 with the firmware downloaded\n\t\t  previously.\n\n\t\t  deleteAllFirmwareFiles(4) - delete all previously stored\n\t\t  firmware and entitlement files.\n\n\t\t  deletePrivateKey(5) - delete the stored private key.\n\n\t\t  updateEntitlements(6) - update all modules and the GT11 using\n\t\t  the entitlement files with their respective IDs that were\n\t\t  previously downloaded.")
gtUpdateStatus = MibScalar((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 10, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("downloading", 1), ("downloadSuccessful", 2), ("downloadFailed", 3), ("updating", 4), ("updateSuccessful", 5), ("updateFailed", 6), ("deleteAllFirmwareFilesSuccessful", 7), ("deleteAllFirmwareFilesFailed", 8), ("deletePrivateKeySuccessful", 9), ("deletePrivateKeyFailed", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtUpdateStatus.setStatus('current')
if mibBuilder.loadTexts: gtUpdateStatus.setDescription('The gtUpdateStatus reports the different stages of the \n\t\tfirmware update.')
gtFilename = MibScalar((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 10, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gtFilename.setStatus('current')
if mibBuilder.loadTexts: gtFilename.setDescription('The gtFilename defines the module firmware or private key filename \n\t\tto download from the SFTP server. The download is started \n\t\tby gtUpdateControl.')
gtSFTPServer = MibScalar((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 10, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gtSFTPServer.setStatus('current')
if mibBuilder.loadTexts: gtSFTPServer.setDescription('The gtSFTPServer defines the SFTP server address.')
gtSFTPPort = MibScalar((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 10, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gtSFTPPort.setStatus('current')
if mibBuilder.loadTexts: gtSFTPPort.setDescription('The gtSFTPPort defines the SFTP server port.')
gtSFTPUsername = MibScalar((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 10, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gtSFTPUsername.setStatus('current')
if mibBuilder.loadTexts: gtSFTPUsername.setDescription('The gtSFTPUsername defines the SFTP server username.')
gtSFTPPassword = MibScalar((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 10, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gtSFTPPassword.setStatus('current')
if mibBuilder.loadTexts: gtSFTPPassword.setDescription('The gtSFTPPassword defines the SFTP server password. \n\t\tA SNMP get retrieves always an empty string.')
gtSFTPHostPublicKeyMD5 = MibScalar((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 10, 8), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(32, 32), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gtSFTPHostPublicKeyMD5.setStatus('current')
if mibBuilder.loadTexts: gtSFTPHostPublicKeyMD5.setDescription('The gtSFTPHostPublicKeyMD5 defines the public key MD5 of the \n\t\tSFTP server to validate the correctness of the server. \n\t\tIf left empty all servers are valid.')
gtUpdateFilesTable = MibTable((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 10, 9), )
if mibBuilder.loadTexts: gtUpdateFilesTable.setStatus('current')
if mibBuilder.loadTexts: gtUpdateFilesTable.setDescription('The gtUpdateFilesTable table contains a list of all\n\t\tfiles available for update.')
gtUpdateFilesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 10, 9, 1), ).setIndexNames((0, "WISI-GTSETTINGS-MIB", "gtUpdateFilesTableIdx"))
if mibBuilder.loadTexts: gtUpdateFilesEntry.setStatus('current')
if mibBuilder.loadTexts: gtUpdateFilesEntry.setDescription('The gtUpdateFilesEntry table entry represents a\n\t\tfile available for update.')
gtUpdateFilesTableIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 10, 9, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: gtUpdateFilesTableIdx.setStatus('current')
if mibBuilder.loadTexts: gtUpdateFilesTableIdx.setDescription('The gtUpdateFilesTableIdx entity represents the numeric index\n\t\tof the update files.')
gtUpdateFile = MibTableColumn((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 5, 1, 10, 9, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtUpdateFile.setStatus('current')
if mibBuilder.loadTexts: gtUpdateFile.setDescription('The gtUpdateFile reports an update file available for update.')
mibBuilder.exportSymbols("WISI-GTSETTINGS-MIB", gtUserParamIdx=gtUserParamIdx, gtDateAndTimeTable=gtDateAndTimeTable, gtAgentComWriteString=gtAgentComWriteString, gtSyslogEntry=gtSyslogEntry, gtAccesslistEntry=gtAccesslistEntry, gtUpdateControl=gtUpdateControl, gtUserTable=gtUserTable, gtHeadendSystemManagement=gtHeadendSystemManagement, gtSWOptionsIdx=gtSWOptionsIdx, gtPortsTable=gtPortsTable, gtSLATable=gtSLATable, gtWebAuth=gtWebAuth, gtSettingsNotifyInterfaceChanged=gtSettingsNotifyInterfaceChanged, gtDNSTable=gtDNSTable, gtTimeZone=gtTimeZone, gtPortsFloodMulticast=gtPortsFloodMulticast, gtAccesslistIPRange=gtAccesslistIPRange, gtSettingsNotifications=gtSettingsNotifications, gtGroupName=gtGroupName, gtTrapState=gtTrapState, gtNetworkName=gtNetworkName, gtGroupParamIdx=gtGroupParamIdx, gtAccesslistName=gtAccesslistName, gtSettingsCompliances=gtSettingsCompliances, gtNetworkIGMPQuerierIP=gtNetworkIGMPQuerierIP, gtBackupControl=gtBackupControl, gtIGMPLastMemberQueryCount=gtIGMPLastMemberQueryCount, gtInterfaceIPv4Gateway=gtInterfaceIPv4Gateway, gtAgentPort=gtAgentPort, gtTrapDestIP=gtTrapDestIP, gtSFPSpeed=gtSFPSpeed, gtServicesEntry=gtServicesEntry, gtTrapDestTable=gtTrapDestTable, gtGroupEntry=gtGroupEntry, gtTimeLocal=gtTimeLocal, gtPortsBitrateTransmit=gtPortsBitrateTransmit, gtServices=gtServices, gtSFTPPassword=gtSFTPPassword, gtSettingsMIB=gtSettingsMIB, gtUpdateStatus=gtUpdateStatus, gtNTPServerNumber=gtNTPServerNumber, gtHMSNumMembers=gtHMSNumMembers, gtGroupAccesslist=gtGroupAccesslist, gtModuleRedundancyGroup=gtModuleRedundancyGroup, gtWebProtocol=gtWebProtocol, gtSettingsObjects=gtSettingsObjects, gtTrapDestPort=gtTrapDestPort, gtPortsNumber=gtPortsNumber, gtTrapSecurityLevel=gtTrapSecurityLevel, gtSFPType=gtSFPType, gtTimeUTC=gtTimeUTC, gtAccesslistParamIdx=gtAccesslistParamIdx, gtInterfaceIPv4Mask=gtInterfaceIPv4Mask, gtInterfaceUseVLAN=gtInterfaceUseVLAN, gtCurrentUserPassword=gtCurrentUserPassword, gtCurrentTimeSource=gtCurrentTimeSource, gtNetworkTable=gtNetworkTable, gtInterfaceVLAN=gtInterfaceVLAN, gtIGMPQueryStartupInterval=gtIGMPQueryStartupInterval, gtBackupSFTPPassword=gtBackupSFTPPassword, gtWebEnable=gtWebEnable, gtIGMPQuerierVersion=gtIGMPQuerierVersion, gtGeneral=gtGeneral, gtInterfaceStreaming=gtInterfaceStreaming, gtSettingsGroups=gtSettingsGroups, gtNetworkPortsEntry=gtNetworkPortsEntry, gtNTPServerRowStatus=gtNTPServerRowStatus, gtInterfaceIfIndex=gtInterfaceIfIndex, gtCurrentUserName=gtCurrentUserName, gtModuleBackupStatus=gtModuleBackupStatus, gtBackupSFTPFilename=gtBackupSFTPFilename, gtAccesslistIdx=gtAccesslistIdx, gtDNSNumber=gtDNSNumber, gtSettingsConformance=gtSettingsConformance, gtServicesTable=gtServicesTable, gtUpdateFilesEntry=gtUpdateFilesEntry, gtHMSGroupName=gtHMSGroupName, gtInterfaceRowStatus=gtInterfaceRowStatus, gtSLARegistered=gtSLARegistered, gtInterfaceName=gtInterfaceName, gtUserAuthEnabled=gtUserAuthEnabled, gtInterfaceIPv4=gtInterfaceIPv4, gtSwitch=gtSwitch, gtModuleBackupControl=gtModuleBackupControl, gtNetworkVLAN=gtNetworkVLAN, gtInterfaceIGMP=gtInterfaceIGMP, gtAccesslistTable=gtAccesslistTable, gtModuleBackupTable=gtModuleBackupTable, gtHMSNumAvailModules=gtHMSNumAvailModules, PYSNMP_MODULE_ID=gtSettingsMIB, gtTrapPDU=gtTrapPDU, gtInterfaceMAC=gtInterfaceMAC, gtAgentState=gtAgentState, gtSWOptionsTable=gtSWOptionsTable, gtSLAEntry=gtSLAEntry, gtUserName=gtUserName, gtGroupIdx=gtGroupIdx, gtInterfaceSNMP=gtInterfaceSNMP, gtAgentComReadString=gtAgentComReadString, gtDNSEntry=gtDNSEntry, gtFilename=gtFilename, gtHMSComMethod=gtHMSComMethod, gtTrapSNMPVersion=gtTrapSNMPVersion, gtTrapDestRowStatus=gtTrapDestRowStatus, gtModuleRedundancyMode=gtModuleRedundancyMode, gtPortsEntry=gtPortsEntry, gtSyslogState=gtSyslogState, gtSNMPEntry=gtSNMPEntry, gtIGMPLastMemberQueryInterval=gtIGMPLastMemberQueryInterval, gtNetworking=gtNetworking, gtNetworkEntry=gtNetworkEntry, gtIGMPQuerierRobustness=gtIGMPQuerierRobustness, gtIGMPQueryInterval=gtIGMPQueryInterval, gtDNSServerIP=gtDNSServerIP, gtUserAccesslist=gtUserAccesslist, gtPortsLinkup=gtPortsLinkup, gtUpdateFile=gtUpdateFile, gtChassisRedundancy=gtChassisRedundancy, gtSWOptionsEntry=gtSWOptionsEntry, gtSFTPPort=gtSFTPPort, gtDaylightAdjustment=gtDaylightAdjustment, gtIGMPQuerierResponseTime=gtIGMPQuerierResponseTime, gtSFTPUsername=gtSFTPUsername, gtInterfaceState=gtInterfaceState, gtNetworkPortState=gtNetworkPortState, gtInterfaceSimulcrypt=gtInterfaceSimulcrypt, gtTrapUser=gtTrapUser, gtUserEntry=gtUserEntry, gtSFPLink=gtSFPLink, gtUserRowStatus=gtUserRowStatus, gtBackupSFTPHostPublicKeyMD5=gtBackupSFTPHostPublicKeyMD5, gtNetworkPortVLAN=gtNetworkPortVLAN, gtInterfaceDHCPState=gtInterfaceDHCPState, gtSettingsNotifyWebChanged=gtSettingsNotifyWebChanged, gtUserIdx=gtUserIdx, gtHMSEntry=gtHMSEntry, gtUpdateFilesTableIdx=gtUpdateFilesTableIdx, gtSFPNumber=gtSFPNumber, gtSNMPTable=gtSNMPTable, gtSyslogTable=gtSyslogTable, gtNTPServerTable=gtNTPServerTable, gtTrapDestEntry=gtTrapDestEntry, gtBackupSFTPUsername=gtBackupSFTPUsername, gtInterfaceTable=gtInterfaceTable, gtPortsName=gtPortsName, gtInterfaceWebMgt=gtInterfaceWebMgt, gtSLAExpires=gtSLAExpires, gtTrapDestNumber=gtTrapDestNumber, gtNTPServerEntry=gtNTPServerEntry, gtSFTPHostPublicKeyMD5=gtSFTPHostPublicKeyMD5, gtPortsBitrateReceive=gtPortsBitrateReceive, gtSWOption=gtSWOption, gtGroupRights=gtGroupRights, gtSyslogIP=gtSyslogIP, gtSFTPServer=gtSFTPServer, gtModuleBackupEntry=gtModuleBackupEntry, gtSFPEntry=gtSFPEntry, gtNetworkPortsTable=gtNetworkPortsTable, gtModuleBackupDate=gtModuleBackupDate, gtInterfaceEntry=gtInterfaceEntry, gtSNMP=gtSNMP, gtInterfaceCLI=gtInterfaceCLI, gtUserAuthTable=gtUserAuthTable, gtSFPPlugged=gtSFPPlugged, gtNetworkIGMPSnoopingState=gtNetworkIGMPSnoopingState, gtAgentSecurityLevel=gtAgentSecurityLevel, gtUserGroup=gtUserGroup, gtBackupPrivateKeyFilename=gtBackupPrivateKeyFilename, gtUser=gtUser, gtNumSFP=gtNumSFP, gtBackupSFTPPort=gtBackupSFTPPort, gtBackupSFTPServer=gtBackupSFTPServer, gtModuleBackup=gtModuleBackup, gtDateAndTimeEntry=gtDateAndTimeEntry, gtUserAuthEntry=gtUserAuthEntry, gtTrapComString=gtTrapComString, gtIGMPQueryStartupCount=gtIGMPQueryStartupCount, gtDateAndTime=gtDateAndTime, gtSFPTable=gtSFPTable, gtInterfaceNumber=gtInterfaceNumber, gtHMSTable=gtHMSTable, gtNetworkPortName=gtNetworkPortName, gtUserPassword=gtUserPassword, gtGroupTable=gtGroupTable, gtNTPServerAddress=gtNTPServerAddress, gtUpdateFilesTable=gtUpdateFilesTable, gtNetworkPortNumber=gtNetworkPortNumber, gtModuleUpdate=gtModuleUpdate, gtNetworkIGMPQuerierState=gtNetworkIGMPQuerierState, gtBackupStatus=gtBackupStatus)
