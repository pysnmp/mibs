#
# PySNMP MIB module BENU-SYSLOG-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/benuos/BENU-SYSLOG-MIB
# Produced by pysmi-1.1.12 at Tue Jun  4 10:06:06 2024
# On host fv-az801-864 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
benuPlatform, = mibBuilder.importSymbols("BENU-PLATFORM-MIB", "benuPlatform")
InetPortNumber, = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetPortNumber")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
TimeTicks, NotificationType, MibIdentifier, Counter32, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Bits, ModuleIdentity, Counter64, Unsigned32, ObjectIdentity, Integer32, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "NotificationType", "MibIdentifier", "Counter32", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Bits", "ModuleIdentity", "Counter64", "Unsigned32", "ObjectIdentity", "Integer32", "IpAddress")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
benuSyslog = ModuleIdentity((1, 3, 6, 1, 4, 1, 39406, 1, 3))
benuSyslog.setRevisions(('2015-01-09 00:00', '2014-11-06 00:00', '2013-11-22 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: benuSyslog.setRevisionsDescriptions(('Added a branch for notifications', 'Removed bSyslogTrapSeverity and bSyslogSeverityTrap', 'Data types are corrected and removed an unwanted IMPORT',))
if mibBuilder.loadTexts: benuSyslog.setLastUpdated('201501090000Z')
if mibBuilder.loadTexts: benuSyslog.setOrganization('Benu Networks')
if mibBuilder.loadTexts: benuSyslog.setContactInfo('Benu Networks Inc,\n      300 Concord Road,\n      Billerca MA 01821\n      Email: support@benunets.com')
if mibBuilder.loadTexts: benuSyslog.setDescription('Initial creation\n        MIB module for Benu Networks Chassis.\n        Copyright (C) 2001, 2008 by Benu Networks, Inc.\n        All rights reserved.')
bSyslogNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 39406, 1, 3, 0))
bSyslogSize = MibScalar((1, 3, 6, 1, 4, 1, 39406, 1, 3, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bSyslogSize.setStatus('current')
if mibBuilder.loadTexts: bSyslogSize.setDescription('Current size in bytes of the syslog file.')
bSyslogMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 39406, 1, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4096, 5242880)).clone(4096)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bSyslogMaxSize.setStatus('current')
if mibBuilder.loadTexts: bSyslogMaxSize.setDescription('Maximum size in bytes of the syslog file.')
bSyslogServerEnable = MibScalar((1, 3, 6, 1, 4, 1, 39406, 1, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bSyslogServerEnable.setStatus('current')
if mibBuilder.loadTexts: bSyslogServerEnable.setDescription('Enable or disable logging to remote syslog\n                            servers.')
bSyslogServerTable = MibTable((1, 3, 6, 1, 4, 1, 39406, 1, 3, 4), )
if mibBuilder.loadTexts: bSyslogServerTable.setStatus('current')
if mibBuilder.loadTexts: bSyslogServerTable.setDescription('Table of remote syslog servers, of which\n\t\t\t    there can be at most 3 entries.')
bSyslogServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39406, 1, 3, 4, 1), ).setIndexNames((0, "BENU-SYSLOG-MIB", "bSyslogServerIndex"))
if mibBuilder.loadTexts: bSyslogServerEntry.setStatus('current')
if mibBuilder.loadTexts: bSyslogServerEntry.setDescription('syslog table entry.')
bSyslogServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 1, 3, 4, 1, 1), Unsigned32())
if mibBuilder.loadTexts: bSyslogServerIndex.setStatus('current')
if mibBuilder.loadTexts: bSyslogServerIndex.setDescription('Index into the remote syslog server table.')
bSyslogServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 1, 3, 4, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bSyslogServerAddress.setStatus('current')
if mibBuilder.loadTexts: bSyslogServerAddress.setDescription('The IP address of this syslog server.')
bSyslogServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 1, 3, 4, 1, 3), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bSyslogServerPort.setStatus('current')
if mibBuilder.loadTexts: bSyslogServerPort.setDescription('The port number of this syslog server.')
bSyslogSeverity = MibScalar((1, 3, 6, 1, 4, 1, 39406, 1, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("emergencies", 0), ("alerts", 1), ("critical", 2), ("errors", 3), ("warnings", 4), ("notifications", 5), ("informational", 6), ("debugging", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bSyslogSeverity.setStatus('current')
if mibBuilder.loadTexts: bSyslogSeverity.setDescription('Severity of syslog messages reported/sent to a\n\t\t\t\t\t\t   remote syslog server.')
bSyslogConsoleSeverity = MibScalar((1, 3, 6, 1, 4, 1, 39406, 1, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("emergencies", 0), ("alerts", 1), ("critical", 2), ("errors", 3), ("warnings", 4), ("notifications", 5), ("informational", 6), ("debugging", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bSyslogConsoleSeverity.setStatus('current')
if mibBuilder.loadTexts: bSyslogConsoleSeverity.setDescription('Severity of syslog messages reported/sent to a\n\t\t\t\t\t\t   console.')
bSyslogClear = MibScalar((1, 3, 6, 1, 4, 1, 39406, 1, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bSyslogClear.setStatus('current')
if mibBuilder.loadTexts: bSyslogClear.setDescription('Indicates whether syslog file contains syslog\n\t\t\t    messages. This value is FALSE if syslog contains\n\t\t\t    syslog messages, TRUE otherwise. Set to TRUE to\n\t\t\t    clear all messages from the syslog file.')
mibBuilder.exportSymbols("BENU-SYSLOG-MIB", bSyslogServerEnable=bSyslogServerEnable, bSyslogServerEntry=bSyslogServerEntry, bSyslogServerPort=bSyslogServerPort, bSyslogSeverity=bSyslogSeverity, bSyslogServerAddress=bSyslogServerAddress, benuSyslog=benuSyslog, bSyslogNotifications=bSyslogNotifications, bSyslogClear=bSyslogClear, bSyslogMaxSize=bSyslogMaxSize, bSyslogSize=bSyslogSize, bSyslogServerIndex=bSyslogServerIndex, bSyslogConsoleSeverity=bSyslogConsoleSeverity, PYSNMP_MODULE_ID=benuSyslog, bSyslogServerTable=bSyslogServerTable)
