#
# PySNMP MIB module TELESTE-LUMINATO-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/teleste/TELESTE-LUMINATO-MIB
# Produced by pysmi-1.1.12 at Tue Jun  4 13:08:24 2024
# On host fv-az1108-994 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, ObjectIdentity, IpAddress, iso, Bits, TimeTicks, Integer32, Counter32, ModuleIdentity, Gauge32, Unsigned32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "ObjectIdentity", "IpAddress", "iso", "Bits", "TimeTicks", "Integer32", "Counter32", "ModuleIdentity", "Gauge32", "Unsigned32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
luminato, = mibBuilder.importSymbols("TELESTE-ROOT-MIB", "luminato")
Float, = mibBuilder.importSymbols("UCD-SNMP-MIB", "Float")
general = MibIdentifier((1, 3, 6, 1, 4, 1, 3715, 17, 1))
deviceName = MibScalar((1, 3, 6, 1, 4, 1, 3715, 17, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceName.setStatus('current')
if mibBuilder.loadTexts: deviceName.setDescription("The identification name ('aliasname') of the device")
generalStatus = MibScalar((1, 3, 6, 1, 4, 1, 3715, 17, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("statusAlert", 1), ("statusCritical", 2), ("statusError", 3), ("statusWarning", 4), ("statusNotice", 5), ("statusInformational", 6), ("statusDebug", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: generalStatus.setStatus('current')
if mibBuilder.loadTexts: generalStatus.setDescription('General status of device')
redundancyStatus = MibScalar((1, 3, 6, 1, 4, 1, 3715, 17, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 16, 24, 32, 40, 64))).clone(namedValues=NamedValues(("redundancyStandalone", 1), ("redundancyMaster", 16), ("redundancyMasterHandover", 24), ("redundancyBackup", 32), ("redundancyBackupHandover", 40), ("redundancyError", 64)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: redundancyStatus.setStatus('optional')
if mibBuilder.loadTexts: redundancyStatus.setDescription('Status of device in 1+1 backup operation mode')
hwSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 3715, 17, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSerialNumber.setStatus('current')
if mibBuilder.loadTexts: hwSerialNumber.setDescription('Device serial number')
hwType = MibScalar((1, 3, 6, 1, 4, 1, 3715, 17, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwType.setStatus('current')
if mibBuilder.loadTexts: hwType.setDescription('The hardware type name of the device')
hwVersion = MibScalar((1, 3, 6, 1, 4, 1, 3715, 17, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVersion.setStatus('current')
if mibBuilder.loadTexts: hwVersion.setDescription('Device hardware version')
swVersion = MibScalar((1, 3, 6, 1, 4, 1, 3715, 17, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swVersion.setStatus('current')
if mibBuilder.loadTexts: swVersion.setDescription('Device running software version')
upTime = MibScalar((1, 3, 6, 1, 4, 1, 3715, 17, 1, 14), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upTime.setStatus('current')
if mibBuilder.loadTexts: upTime.setDescription('Device uptime')
cumulativeUptime = MibScalar((1, 3, 6, 1, 4, 1, 3715, 17, 1, 15), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cumulativeUptime.setStatus('current')
if mibBuilder.loadTexts: cumulativeUptime.setDescription('Device cummulative uptime')
statusCode = MibIdentifier((1, 3, 6, 1, 4, 1, 3715, 17, 2))
interfaceTypeTable = MibTable((1, 3, 6, 1, 4, 1, 3715, 17, 2, 1), )
if mibBuilder.loadTexts: interfaceTypeTable.setStatus('current')
if mibBuilder.loadTexts: interfaceTypeTable.setDescription('InterfaceTypeTable lists possible interface types in the system.')
interfaceTypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3715, 17, 2, 1, 1), ).setIndexNames((0, "TELESTE-LUMINATO-MIB", "interfaceTypeId"))
if mibBuilder.loadTexts: interfaceTypeEntry.setStatus('current')
if mibBuilder.loadTexts: interfaceTypeEntry.setDescription('Each InterfaceTypeEntry describes type of the interface.')
interfaceTypeId = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("input", 1), ("output", 2))))
if mibBuilder.loadTexts: interfaceTypeId.setStatus('current')
if mibBuilder.loadTexts: interfaceTypeId.setDescription('Interfacetype Id has two values input(1) and output(2). Values are used in other tables as index.')
statusCodeDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 3715, 17, 2, 2), )
if mibBuilder.loadTexts: statusCodeDeviceTable.setStatus('current')
if mibBuilder.loadTexts: statusCodeDeviceTable.setDescription('This table describes monitorable objects of the device.\n\t\t\t\tThe objects may represents real objects or classes.\n\t\t\t\tThe monitoring system or user shall not poll this table to detect device state.\n\t\t\t\t\n\t\t\t\tInstead - user shall wait for traps or poll currentAlarmTable(1.3.6.1.4.1.5591.1.1.2) from SCTE-HMS-PROPERTY-MIB.\n\t\t\t\tIn this case statusCodeDeviceTable shall be used to obtains text definition of alarm.')
statusCodeDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3715, 17, 2, 2, 1), ).setIndexNames((0, "TELESTE-LUMINATO-MIB", "scdObjectId"))
if mibBuilder.loadTexts: statusCodeDeviceEntry.setStatus('current')
if mibBuilder.loadTexts: statusCodeDeviceEntry.setDescription(' ')
scdObjectId = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 2, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scdObjectId.setStatus('current')
if mibBuilder.loadTexts: scdObjectId.setDescription('Unique identifier of the monitorable object.\n\t\t\t\t')
scdObjectValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scdObjectValue.setStatus('current')
if mibBuilder.loadTexts: scdObjectValue.setDescription('Value of the monitorable object.\n\t\t\t\tThe scdObjectDescriptor tells name, scale and unit of the object.')
scdObjectDescriptor = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 2, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scdObjectDescriptor.setStatus('current')
if mibBuilder.loadTexts: scdObjectDescriptor.setDescription("Description of the monitorable object.\n\t\t\t\t\n\t\t\t\tFree text if object has two states\n\t\t\t\t\n\t\t\t\tor\n\t\t\t\t\n\t\t\t\tFormat:\n\t\t\t\tName, Scale, Unit, [optional text]\n\t\t\t\t\n\t\t\t\t------------------------------------\n\t\t\t\t\n\t\t\t\tExample 1 (Analogue object):\n\t\t\t\t\n\t\t\t\t'MainVoltage, 0.01, V'\n\t\t\t\t\n\t\t\t\tUsage:\n\t\t\t\tscdObjectId:7 (example)\n\t\t\t\tscdObjectValue:2399\n\t\t\t\tscdObjectDescriptor:'MainVoltage, 0.01, V'\n\t\t\t\t\n\t\t\t\tmeans\n\t\t\t\t\n\t\t\t\tMain voltage is 23.99 V\n\t\t\t\t\n\t\t\t\t------------------------------------\n\t\t\t\t\n\t\t\t\tExample 2 (Discrete object):\n\t\t\t\t\n\t\t\t\t'TemperatureHigh, 1, high(2)/nominal(1), Alarm state of the temperature'\n\t\t\t\t\n\t\t\t\tUsage:\n\t\t\t\tscdObjectId:12 (example)\n\t\t\t\tscdObjectValue:2\n\t\t\t\t\n\t\t\t\tmeans\n\t\t\t\t\n\t\t\t\tTemperature is in high alarm state.\n\t\t\t\t\n\t\t\t\t------------------------------------\n\t\t\t\t")
scdObjectAlarmValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scdObjectAlarmValue.setStatus('current')
if mibBuilder.loadTexts: scdObjectAlarmValue.setDescription('When the object has this value it is in the alarm state.\n\t\t\t\tOne object id can have only one alarm state.\n\t\t\t\tIf more alarm states exist then new associated object needs to be created.\n\t\t\t\tNote that alarm state value can have only discrete values.\n\t\t\t\tIf the value is zero then there is no alarm for this object.\n\t\t\t\t\n\t\t\t\tExample:\n\t\t\t\t\n\t\t\t\tTemperatureHigh object can have values high(2) or nominal(1).\n\t\t\t\tAlarm monitoring for this object is triggered by setting dmObjectAlarmValue \n\t\t\t\tto value 2 meaning high(2).\n\t\t\t\t \n\t\t\t\tHow the alarm processing is done is out of scope of this MIB.\n\t\t\t\t')
statusCodeModuleTable = MibTable((1, 3, 6, 1, 4, 1, 3715, 17, 2, 3), )
if mibBuilder.loadTexts: statusCodeModuleTable.setStatus('current')
if mibBuilder.loadTexts: statusCodeModuleTable.setDescription('This table describes monitorable objects per module inside the device.\n\t\t\t\tThe objects may represents real objects or classes.\n\t\t\t\tThe monitoring system or user shall not poll this table to detect device state.\n\t\t\t\t\n\t\t\t\tInstead - user shall wait for traps or poll currentAlarmTable(1.3.6.1.4.1.5591.1.1.2) from SCTE-HMS-PROPERTY-MIB.\n\t\t\t\tIn this case statusCodeModuleTable shall be used to obtains text definition of alarm.')
statusCodeModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3715, 17, 2, 3, 1), ).setIndexNames((0, "TELESTE-LUMINATO-MIB", "scmModuleId"), (0, "TELESTE-LUMINATO-MIB", "scmObjectId"))
if mibBuilder.loadTexts: statusCodeModuleEntry.setStatus('current')
if mibBuilder.loadTexts: statusCodeModuleEntry.setDescription(' ')
scmModuleId = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmModuleId.setStatus('current')
if mibBuilder.loadTexts: scmModuleId.setDescription('Module Id within the device (usually slot number).')
scmObjectId = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 2, 3, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmObjectId.setStatus('current')
if mibBuilder.loadTexts: scmObjectId.setDescription('Unique identifier of the monitorable object within the module.')
scmObjectValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 2, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmObjectValue.setStatus('current')
if mibBuilder.loadTexts: scmObjectValue.setDescription('Value of the monitorable object.\n\t\t\t\tThe scmObjectDescriptor tells name, scale and unit of the object.')
scmObjectDescriptor = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 2, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmObjectDescriptor.setStatus('current')
if mibBuilder.loadTexts: scmObjectDescriptor.setDescription('Description of the monitorable object.\n\t\t\t\tSee scdObjectDescriptor for format, example and usage.\n\t\t\t\t\n\t\t\t\t')
scmObjectAlarmValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 2, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmObjectAlarmValue.setStatus('current')
if mibBuilder.loadTexts: scmObjectAlarmValue.setDescription('See scdObjectAlarmValue for format, example and usage.\n\t\t\t\t\n\t\t\t\t')
statusCodeInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 3715, 17, 2, 4), )
if mibBuilder.loadTexts: statusCodeInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: statusCodeInterfaceTable.setDescription('This table describes monitorable objects per interface per module.\n\t\t\t\tThe objects may represents real objects or classes.\n\t\t\t\tThe monitoring system or user shall not poll this table to detect device state.\n\t\t\t\t\n\t\t\t\tInstead - user shall wait for traps or poll currentAlarmTable(1.3.6.1.4.1.5591.1.1.2) from SCTE-HMS-PROPERTY-MIB.\n\t\t\t\tIn this case statusCodeInterfaceTable shall be used to obtains text definition of alarm.')
statusCodeInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3715, 17, 2, 4, 1), ).setIndexNames((0, "TELESTE-LUMINATO-MIB", "interfaceTypeId"), (0, "TELESTE-LUMINATO-MIB", "scmModuleId"), (0, "TELESTE-LUMINATO-MIB", "sciInterfaceId"), (0, "TELESTE-LUMINATO-MIB", "sciObjectId"))
if mibBuilder.loadTexts: statusCodeInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: statusCodeInterfaceEntry.setDescription(' ')
sciInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sciInterfaceId.setStatus('current')
if mibBuilder.loadTexts: sciInterfaceId.setDescription('Unique interface Id within the module (e.g. RF connector number).')
sciObjectId = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 2, 4, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sciObjectId.setStatus('current')
if mibBuilder.loadTexts: sciObjectId.setDescription('Unique identifier of the monitorable object within the interface.')
sciObjectValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 2, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sciObjectValue.setStatus('current')
if mibBuilder.loadTexts: sciObjectValue.setDescription('Value of the monitorable object.\n\t\t\t\tThe sciObjectDescriptor tells name, scale and unit of the object.')
sciObjectDescriptor = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 2, 4, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sciObjectDescriptor.setStatus('current')
if mibBuilder.loadTexts: sciObjectDescriptor.setDescription('Description of the monitorable object.\n\t\t\t\tSee scdObjectDescriptor for format, example and usage.\n\t\t\t\t\n\t\t\t\t')
sciObjectAlarmValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 2, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sciObjectAlarmValue.setStatus('current')
if mibBuilder.loadTexts: sciObjectAlarmValue.setDescription('See dmObjectAlarmValue for format, example and usage.\n\t\t\t\t\n\t\t\t\t')
statusCodeTransportStreamTable = MibTable((1, 3, 6, 1, 4, 1, 3715, 17, 2, 5), )
if mibBuilder.loadTexts: statusCodeTransportStreamTable.setStatus('current')
if mibBuilder.loadTexts: statusCodeTransportStreamTable.setDescription('This table describes monitorable objects of each transport stream.\n\t\t\t\tThe objects may represents real objects or classes.\n\t\t\t\tThe monitoring system or user shall not poll this table to detect device state.\n\t\t\t\t\n\t\t\t\tInstead - user shall wait for traps or poll currentAlarmTable(1.3.6.1.4.1.5591.1.1.2) from SCTE-HMS-PROPERTY-MIB.\n\t\t\t\tIn this case statusCodeTransportStreamTable shall be used to obtains text definition of alarm.')
statusCodeTransportStreamEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3715, 17, 2, 5, 1), ).setIndexNames((0, "TELESTE-LUMINATO-MIB", "interfaceTypeId"), (0, "TELESTE-LUMINATO-MIB", "scmModuleId"), (0, "TELESTE-LUMINATO-MIB", "sciInterfaceId"), (0, "TELESTE-LUMINATO-MIB", "sctsTransportStreamId"), (0, "TELESTE-LUMINATO-MIB", "sctsObjectId"))
if mibBuilder.loadTexts: statusCodeTransportStreamEntry.setStatus('current')
if mibBuilder.loadTexts: statusCodeTransportStreamEntry.setDescription(' ')
sctsTransportStreamId = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8192))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sctsTransportStreamId.setStatus('current')
if mibBuilder.loadTexts: sctsTransportStreamId.setDescription('Unique transport stream id inside the interface.')
sctsObjectId = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 2, 5, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sctsObjectId.setStatus('current')
if mibBuilder.loadTexts: sctsObjectId.setDescription('Unique identifier of the monitorable object.')
sctsObjectValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 2, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sctsObjectValue.setStatus('current')
if mibBuilder.loadTexts: sctsObjectValue.setDescription('Value of the monitorable object.\n\t\t\t\tThe sctsObjectDescriptor tells name, scale and unit of the object.')
sctsObjectDescriptor = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 2, 5, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sctsObjectDescriptor.setStatus('current')
if mibBuilder.loadTexts: sctsObjectDescriptor.setDescription('Description of the monitorable object.\n\t\t\t\tSee dmObjectDescriptor for format, example and usage.\n\t\t\t\t\n\t\t\t\t')
sctsObjectAlarmValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 2, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sctsObjectAlarmValue.setStatus('current')
if mibBuilder.loadTexts: sctsObjectAlarmValue.setDescription('See scdObjectAlarmValue for format, example and usage.\n\t\t\t\t\n\t\t\t\t')
statusCodeServiceTable = MibTable((1, 3, 6, 1, 4, 1, 3715, 17, 2, 6), )
if mibBuilder.loadTexts: statusCodeServiceTable.setStatus('current')
if mibBuilder.loadTexts: statusCodeServiceTable.setDescription('This table describes monitorable objects of each service.\n\t\t\t\tThe objects may represents real objects or classes.\n\t\t\t\tThe monitoring system or user shall not poll this table to detect device state.\n\t\t\t\t\n\t\t\t\tInstead - user shall wait for traps or poll currentAlarmTable(1.3.6.1.4.1.5591.1.1.2) from SCTE-HMS-PROPERTY-MIB.\n\t\t\t\tIn this case statusCodeServiceTable shall be used to obtains text definition of alarm.')
statusCodeServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3715, 17, 2, 6, 1), ).setIndexNames((0, "TELESTE-LUMINATO-MIB", "interfaceTypeId"), (0, "TELESTE-LUMINATO-MIB", "scmModuleId"), (0, "TELESTE-LUMINATO-MIB", "sciInterfaceId"), (0, "TELESTE-LUMINATO-MIB", "sctsTransportStreamId"), (0, "TELESTE-LUMINATO-MIB", "scsSID"), (0, "TELESTE-LUMINATO-MIB", "scsObjectId"))
if mibBuilder.loadTexts: statusCodeServiceEntry.setStatus('current')
if mibBuilder.loadTexts: statusCodeServiceEntry.setDescription(' ')
scsSID = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 2, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsSID.setStatus('current')
if mibBuilder.loadTexts: scsSID.setDescription('Unique service id number inside the transport stream.')
scsObjectId = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 2, 6, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsObjectId.setStatus('current')
if mibBuilder.loadTexts: scsObjectId.setDescription('Unique identifier of the monitorable object.')
scsObjectValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 2, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsObjectValue.setStatus('current')
if mibBuilder.loadTexts: scsObjectValue.setDescription('Value of the monitorable object.\n\t\t\t\tThe scsObjectDescriptor tells name, scale and unit of the object.')
scsObjectDescriptor = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 2, 6, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsObjectDescriptor.setStatus('current')
if mibBuilder.loadTexts: scsObjectDescriptor.setDescription('Description of the monitorable object.\n\t\t\t\tSee scdObjectDescriptor for format, example and usage.\n\t\t\t\t\n\t\t\t\t')
scsServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 2, 6, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsServiceName.setStatus('current')
if mibBuilder.loadTexts: scsServiceName.setDescription('The name of the service.')
scsObjectAlarmValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 2, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsObjectAlarmValue.setStatus('current')
if mibBuilder.loadTexts: scsObjectAlarmValue.setDescription('See scdObjectAlarmValue for format, example and usage.\n\t\t\t\t\n\t\t\t\t')
statusCodePidTable = MibTable((1, 3, 6, 1, 4, 1, 3715, 17, 2, 7), )
if mibBuilder.loadTexts: statusCodePidTable.setStatus('current')
if mibBuilder.loadTexts: statusCodePidTable.setDescription('This table lists monitorable objects of each PID.\n\t\t\t\tThe objects may represents real objects or classes.\n\t\t\t\tThe monitoring system or user shall not poll this table to detect device state.\n\t\t\t\t\n\t\t\t\tInstead - user shall wait for traps or poll currentAlarmTable(1.3.6.1.4.1.5591.1.1.2) from SCTE-HMS-PROPERTY-MIB.\n\t\t\t\tIn this case statusCodePidTable shall be used to obtains text definition of alarm.')
statusCodePidEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3715, 17, 2, 7, 1), ).setIndexNames((0, "TELESTE-LUMINATO-MIB", "interfaceTypeId"), (0, "TELESTE-LUMINATO-MIB", "scmModuleId"), (0, "TELESTE-LUMINATO-MIB", "sciInterfaceId"), (0, "TELESTE-LUMINATO-MIB", "sctsTransportStreamId"), (0, "TELESTE-LUMINATO-MIB", "scpPID"), (0, "TELESTE-LUMINATO-MIB", "scpObjectId"))
if mibBuilder.loadTexts: statusCodePidEntry.setStatus('current')
if mibBuilder.loadTexts: statusCodePidEntry.setDescription(' ')
scpPID = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 2, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8191))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scpPID.setStatus('current')
if mibBuilder.loadTexts: scpPID.setDescription('Unique PID value inside the transport stream.')
scpObjectId = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 2, 7, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scpObjectId.setStatus('current')
if mibBuilder.loadTexts: scpObjectId.setDescription('Unique identifier of the monitorable object.')
scpObjectValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 2, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scpObjectValue.setStatus('current')
if mibBuilder.loadTexts: scpObjectValue.setDescription('Value of the monitorable object.\n\t\t\t\tThe scpObjectDescriptor tells name, scale and unit of the object.')
scpObjectDescriptor = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 2, 7, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scpObjectDescriptor.setStatus('current')
if mibBuilder.loadTexts: scpObjectDescriptor.setDescription('Description of the monitorable object.\n\t\t\t\tSee scdObjectDescriptor for format, example and usage.\n\t\t\t\t\n\t\t\t\t')
scpObjectAlarmValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 2, 7, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scpObjectAlarmValue.setStatus('current')
if mibBuilder.loadTexts: scpObjectAlarmValue.setDescription('See scdObjectAlarmValue for format, example and usage.\n\t\t\t\t\n\t\t\t\t')
interface = MibIdentifier((1, 3, 6, 1, 4, 1, 3715, 17, 3))
ifExtTable = MibTable((1, 3, 6, 1, 4, 1, 3715, 17, 3, 1), )
if mibBuilder.loadTexts: ifExtTable.setStatus('current')
if mibBuilder.loadTexts: ifExtTable.setDescription('')
pysmiFakeCol1000 = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 3, 1, 1) + (1000, ), Integer32())
ifExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3715, 17, 3, 1, 1), ).setIndexNames((0, "TELESTE-LUMINATO-MIB", "pysmiFakeCol1000"))
if mibBuilder.loadTexts: ifExtEntry.setStatus('current')
if mibBuilder.loadTexts: ifExtEntry.setDescription('')
ifExtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 3, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: ifExtIndex.setStatus('current')
if mibBuilder.loadTexts: ifExtIndex.setDescription('A unique index for an interface.\n\t\t\t\tThe index is of following format: SDPPVVVV, where:\n\t\t\t\t - S    = Slot number\n\t\t\t\t - D    = input(1) / output(2)\n\t\t\t\t - PP   = Physical interface number\n\t\t\t\t - VVVV = Virtual interface number')
ifExtName = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifExtName.setStatus('current')
if mibBuilder.loadTexts: ifExtName.setDescription('Description for the interface.')
ifExtModule = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifExtModule.setStatus('current')
if mibBuilder.loadTexts: ifExtModule.setDescription('Number of the physical module or slot housing the interface.')
ifExtPhysInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifExtPhysInterface.setStatus('current')
if mibBuilder.loadTexts: ifExtPhysInterface.setDescription('Physical interface number.')
ifExtLogiInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifExtLogiInterface.setStatus('current')
if mibBuilder.loadTexts: ifExtLogiInterface.setDescription('Logical interface number.')
ifExtDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("input", 1), ("output", 2), ("both", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifExtDirection.setStatus('current')
if mibBuilder.loadTexts: ifExtDirection.setDescription('Direction for the data going through the interface.')
signalPhysTable = MibTable((1, 3, 6, 1, 4, 1, 3715, 17, 3, 2), )
if mibBuilder.loadTexts: signalPhysTable.setStatus('current')
if mibBuilder.loadTexts: signalPhysTable.setDescription('')
signalPhysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3715, 17, 3, 2, 1), ).setIndexNames((0, "TELESTE-LUMINATO-MIB", "ifExtIndex"))
if mibBuilder.loadTexts: signalPhysEntry.setStatus('current')
if mibBuilder.loadTexts: signalPhysEntry.setDescription('')
signalSnr = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: signalSnr.setStatus('current')
if mibBuilder.loadTexts: signalSnr.setDescription('Recent signal to noise ratio in 1/10th of dB.')
signalSnrMin = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 3, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: signalSnrMin.setStatus('current')
if mibBuilder.loadTexts: signalSnrMin.setDescription('Lowest measured SNR value since last device startup or last counter reset.')
signalSnrMax = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 3, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: signalSnrMax.setStatus('current')
if mibBuilder.loadTexts: signalSnrMax.setDescription('Highest measured SNR value since last device startup or last counter reset.')
signalCcErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 3, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: signalCcErrors.setStatus('current')
if mibBuilder.loadTexts: signalCcErrors.setDescription('The number of continuity errors since last device startup or last counter reset.')
signalBer = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 3, 2, 1, 6), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: signalBer.setStatus('current')
if mibBuilder.loadTexts: signalBer.setDescription('Calculated bit error ratio of the signal.')
signalVber = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 3, 2, 1, 7), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: signalVber.setStatus('current')
if mibBuilder.loadTexts: signalVber.setDescription('Calculated Viterbi bit error ratio of the signal.')
transferTable = MibTable((1, 3, 6, 1, 4, 1, 3715, 17, 3, 3), )
if mibBuilder.loadTexts: transferTable.setStatus('current')
if mibBuilder.loadTexts: transferTable.setDescription('')
transferEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3715, 17, 3, 3, 1), ).setIndexNames((0, "TELESTE-LUMINATO-MIB", "ifExtIndex"))
if mibBuilder.loadTexts: transferEntry.setStatus('current')
if mibBuilder.loadTexts: transferEntry.setDescription('')
transBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 3, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transBitrate.setStatus('current')
if mibBuilder.loadTexts: transBitrate.setDescription('Recent measured bitrate of the interface in kilobits per second.')
transBitrateMin = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 3, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: transBitrateMin.setStatus('current')
if mibBuilder.loadTexts: transBitrateMin.setDescription('Lowest measured bitrate since last device startup or last counter reset.\n\t\t\t\tWriting clears the counter.')
transBitrateMax = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 3, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: transBitrateMax.setStatus('current')
if mibBuilder.loadTexts: transBitrateMax.setDescription('Highest measured bitrate since last device startup or last counter reset.\n\t\t\t\tWriting clears the counter.')
proMpegFecTable = MibTable((1, 3, 6, 1, 4, 1, 3715, 17, 3, 20), )
if mibBuilder.loadTexts: proMpegFecTable.setStatus('current')
if mibBuilder.loadTexts: proMpegFecTable.setDescription('')
proMpegFecEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3715, 17, 3, 20, 1), ).setIndexNames((0, "TELESTE-LUMINATO-MIB", "ifExtIndex"))
if mibBuilder.loadTexts: proMpegFecEntry.setStatus('current')
if mibBuilder.loadTexts: proMpegFecEntry.setDescription('')
fecValidPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 3, 20, 1, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fecValidPkts.setStatus('current')
if mibBuilder.loadTexts: fecValidPkts.setDescription('Number of media stream packets received.\n\t\t\t\tWriting any value in this oid will clear all ProMpegFec related counters on\n\t\t\t\tthe current interface.')
fecUncorrectedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 3, 20, 1, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fecUncorrectedPkts.setStatus('current')
if mibBuilder.loadTexts: fecUncorrectedPkts.setDescription('Number of missing media stream packets after FEC decoding.\n\t\t\t\tWriting any value in this oid will clear all ProMpegFec related counters on\n\t\t\t\tthe current interface.')
fecCorrectedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 3, 20, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fecCorrectedPkts.setStatus('current')
if mibBuilder.loadTexts: fecCorrectedPkts.setDescription('Number of corrected packets after FEC decoding.\n\t\t\t\tWriting any value in this oid will clear all ProMpegFec related counters on\n\t\t\t\tthe current interface.')
fecDuplicatePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 3, 20, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fecDuplicatePkts.setStatus('current')
if mibBuilder.loadTexts: fecDuplicatePkts.setDescription('Number of duplicate packets received. Defined as a received packet with \n\t\t\t\tthe same RTP sequence number as any of the packets already in the decoding \n\t\t\t\tbuffer. All duplicate packets are automatically discarded and do not cause \n\t\t\t\tmissing packets or duplicates to the output stream.\n\t\t\t\tWriting any value in this oid will clear all ProMpegFec related counters on\n\t\t\t\tthe current interface.')
fecReorderedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 3, 20, 1, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fecReorderedPkts.setStatus('current')
if mibBuilder.loadTexts: fecReorderedPkts.setDescription('Number of reordered packets received. Defined as a received packet which \n\t\t\t\tRTP sequence number is smaller than the highest RTP sequence number already \n\t\t\t\treceived, excluding duplicate packets and packets which are out of the \n\t\t\t\tdecoding buffer range. These packets will be re-ordered and do not cause \n\t\t\t\tmissing packets to the output stream. \n\t\t\t\tWriting any value in this oid will clear all ProMpegFec related counters on\n\t\t\t\tthe current interface.')
fecIncorrectSeqNumbers = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 3, 20, 1, 6), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fecIncorrectSeqNumbers.setStatus('current')
if mibBuilder.loadTexts: fecIncorrectSeqNumbers.setDescription('Number of received media packets that have RTP sequence number out of \n\t\t\t\tdecoding buffer range. All these packet are discarded. If 10 consecutive \n\t\t\t\tpackets are out of range then decoding buffer is flushed and re-initialised \n\t\t\t\ti.e. all packets in the buffer are discarded. Incorrect sequence numbers \n\t\t\t\tcounter will not be incremented if decoding buffer has been flushed.\n\t\t\t\tWriting any value in this oid will clear all ProMpegFec related counters on\n\t\t\t\tthe current interface.')
fecDiscontinuities = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 3, 20, 1, 7), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fecDiscontinuities.setStatus('current')
if mibBuilder.loadTexts: fecDiscontinuities.setDescription('Number of RTP sequence number discontinuities after FEC decoding. Discontinuity\n\t\t\t\tis detected when the sequence number of received RTP packet (after decoding) is \n\t\t\t\tnot equal to sequence number of previous packet. Discontinuities are typically \n\t\t\t\tdetected when there are uncorrected packets in the stream, or when there are \n\t\t\t\tbrief interruptions in the stream (in range of about 1-20 seconds). Also abrupt \n\t\t\t\tchange of stream source will be counted as discontinuity because of jump in RTP \n\t\t\t\tsequence numbers.\n\t\t\t\tWriting any value in this oid will clear all ProMpegFec related counters on\n\t\t\t\tthe current interface.')
notifications = MibIdentifier((1, 3, 6, 1, 4, 1, 3715, 17, 4))
statusFlags = MibIdentifier((1, 3, 6, 1, 4, 1, 3715, 17, 5))
moduleStatusTable = MibTable((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2), )
if mibBuilder.loadTexts: moduleStatusTable.setStatus('current')
if mibBuilder.loadTexts: moduleStatusTable.setDescription(' ')
moduleStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1), ).setIndexNames((0, "TELESTE-LUMINATO-MIB", "moduleId"))
if mibBuilder.loadTexts: moduleStatusEntry.setStatus('current')
if mibBuilder.loadTexts: moduleStatusEntry.setDescription(' ')
moduleId = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: moduleId.setStatus('current')
if mibBuilder.loadTexts: moduleId.setDescription('Module identifier')
modulePidConflictStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pidOk", 1), ("pidConflict", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modulePidConflictStatus.setStatus('current')
if mibBuilder.loadTexts: modulePidConflictStatus.setDescription('PID conflict status')
moduleTemperatureHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("temperatureNominal", 1), ("temperatureHigh", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleTemperatureHigh.setStatus('current')
if mibBuilder.loadTexts: moduleTemperatureHigh.setDescription('High temperature status')
moduleTemperatureLow = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("temperatureNominal", 1), ("temperatureLow", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleTemperatureLow.setStatus('current')
if mibBuilder.loadTexts: moduleTemperatureLow.setDescription('Low temperature status')
modulePidCapaStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4104), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("capacityNominal", 1), ("capacityExceeded", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modulePidCapaStatus.setStatus('current')
if mibBuilder.loadTexts: modulePidCapaStatus.setDescription('Module PID capacity status')
modulePsisiCaptureCapaStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4105), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("capacityNominal", 1), ("capacityExceeded", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modulePsisiCaptureCapaStatus.setStatus('current')
if mibBuilder.loadTexts: modulePsisiCaptureCapaStatus.setDescription('Module PSI/SI table capture capacity status')
moduleSidAllocStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4106), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sidAllocOk", 1), ("sidAllocCapaExceeded", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleSidAllocStatus.setStatus('current')
if mibBuilder.loadTexts: moduleSidAllocStatus.setDescription('Module service ID allocation capacity status')
moduleCaDetectStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4108), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("moduleOk", 1), ("moduleMissing", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleCaDetectStatus.setStatus('current')
if mibBuilder.loadTexts: moduleCaDetectStatus.setDescription('CA module detection status')
moduleDetectStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4111), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("moduleOk", 1), ("moduleUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDetectStatus.setStatus('current')
if mibBuilder.loadTexts: moduleDetectStatus.setDescription('Module detection status')
moduleVoltageHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4112), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("voltageNominal", 1), ("voltageHigh", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleVoltageHigh.setStatus('current')
if mibBuilder.loadTexts: moduleVoltageHigh.setDescription('High voltage status')
moduleVoltageLow = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4113), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("voltageNominal", 1), ("voltageLow", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleVoltageLow.setStatus('current')
if mibBuilder.loadTexts: moduleVoltageLow.setDescription('Low voltage status')
moduleCurrentHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4114), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("currentNominal", 1), ("currentHigh", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleCurrentHigh.setStatus('current')
if mibBuilder.loadTexts: moduleCurrentHigh.setDescription('High current status')
moduleCurrentLow = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4115), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("currentNominal", 1), ("currentLow", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleCurrentLow.setStatus('current')
if mibBuilder.loadTexts: moduleCurrentLow.setDescription('Low current status')
moduleDaemonInitStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4127), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("daemonNominal", 1), ("daemonInitFailed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDaemonInitStatus.setStatus('current')
if mibBuilder.loadTexts: moduleDaemonInitStatus.setDescription('Module daemon initialization status')
moduleDriverStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4129), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("driverNominal", 1), ("driverFailure", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDriverStatus.setStatus('current')
if mibBuilder.loadTexts: moduleDriverStatus.setDescription('Module device driver status')
moduleHwStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4130), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hwNominal", 1), ("hwFailure", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleHwStatus.setStatus('current')
if mibBuilder.loadTexts: moduleHwStatus.setDescription('Module hardware status')
moduleFanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4131), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fanNominal", 1), ("fanFailure", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleFanStatus.setStatus('current')
if mibBuilder.loadTexts: moduleFanStatus.setDescription('Fan status')
modulePowerSourceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4132), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("runningOnMainPower", 1), ("runningOnBackupPower", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modulePowerSourceStatus.setStatus('current')
if mibBuilder.loadTexts: modulePowerSourceStatus.setDescription('Power source status')
modulePsuOverloadStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4133), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("psuNominal", 1), ("psuOverloaded", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modulePsuOverloadStatus.setStatus('current')
if mibBuilder.loadTexts: modulePsuOverloadStatus.setDescription('Power supply overload status')
moduleBootupProgressStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4134), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("moduleNominal", 1), ("moduleBootingUp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleBootupProgressStatus.setStatus('current')
if mibBuilder.loadTexts: moduleBootupProgressStatus.setDescription('Module bootup progress')
moduleBootupRetryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4135), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("moduleNominal", 1), ("moduleBootingRetrying", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleBootupRetryStatus.setStatus('current')
if mibBuilder.loadTexts: moduleBootupRetryStatus.setDescription('Module bootup retry status')
moduleBootupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4136), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("moduleNominal", 1), ("moduleBootFailure", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleBootupStatus.setStatus('current')
if mibBuilder.loadTexts: moduleBootupStatus.setDescription('Module bootup status')
moduleShutdownProgressStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4137), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("moduleNominal", 1), ("moduleShuttingDown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleShutdownProgressStatus.setStatus('current')
if mibBuilder.loadTexts: moduleShutdownProgressStatus.setDescription('Module shutdown progress')
moduleConnStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4138), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("connectionNominal", 1), ("connectionLost", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleConnStatus.setStatus('current')
if mibBuilder.loadTexts: moduleConnStatus.setDescription('Module connection status')
moduleCompatStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4139), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("moduleNominal", 1), ("moduleIncompatible", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleCompatStatus.setStatus('current')
if mibBuilder.loadTexts: moduleCompatStatus.setDescription('Module compatibility status')
moduleUpcPowerLow = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4147), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ucpPowerNominal", 1), ("ucpPowerLow", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleUpcPowerLow.setStatus('current')
if mibBuilder.loadTexts: moduleUpcPowerLow.setDescription('Module UPC input power low status')
moduleUpcPowerHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4148), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ucpPowerNominal", 1), ("ucpPowerHigh", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleUpcPowerHigh.setStatus('current')
if mibBuilder.loadTexts: moduleUpcPowerHigh.setDescription('Module UPC input power high status')
moduleCalibrDataStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4149), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("calibrationDataNominal", 1), ("calibrationDataMissing", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleCalibrDataStatus.setStatus('current')
if mibBuilder.loadTexts: moduleCalibrDataStatus.setDescription('Module calibration data status')
moduleCalibrDataCheckStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4150), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("checkOk", 1), ("checkSkipped", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleCalibrDataCheckStatus.setStatus('current')
if mibBuilder.loadTexts: moduleCalibrDataCheckStatus.setDescription('Module calibration data check status')
moduleDescrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4151), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("descramblingOk", 1), ("descramblingFailure", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDescrStatus.setStatus('current')
if mibBuilder.loadTexts: moduleDescrStatus.setDescription('Module descrambling status')
moduleBackupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4153), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("moduleNominal", 1), ("moduleSwitchedToBackup", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleBackupStatus.setStatus('current')
if mibBuilder.loadTexts: moduleBackupStatus.setDescription('Module backup status')
moduleNitOutputsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4154), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nitOutputsNominal", 1), ("noSupportedNitOutputs", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleNitOutputsStatus.setStatus('current')
if mibBuilder.loadTexts: moduleNitOutputsStatus.setDescription('Supported Nit output module status')
moduleNitSelectionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4155), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nitSelectionNominal", 1), ("noSelectedNitOutputs", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleNitSelectionStatus.setStatus('current')
if mibBuilder.loadTexts: moduleNitSelectionStatus.setDescription('Nit output selection status')
moduleNitConfChangeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4156), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nitConfNominal", 1), ("nitConfChanged", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleNitConfChangeStatus.setStatus('current')
if mibBuilder.loadTexts: moduleNitConfChangeStatus.setDescription('Nit configuration change status')
moduleNitDataQueryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4157), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nitDataQueryNominal", 1), ("nitDataQueryFailure", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleNitDataQueryStatus.setStatus('current')
if mibBuilder.loadTexts: moduleNitDataQueryStatus.setDescription('Nit data query status')
moduleNitWizardStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4158), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nitWizardNominal", 1), ("nitWizardFailure", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleNitWizardStatus.setStatus('current')
if mibBuilder.loadTexts: moduleNitWizardStatus.setDescription('Nit wizard status')
moduleQamFreqStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4159), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("qamFreqUnique", 1), ("qamFreqDuplicate", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleQamFreqStatus.setStatus('current')
if mibBuilder.loadTexts: moduleQamFreqStatus.setDescription('QAM output unique frequency status')
moduleOutputSidStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4173), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sidOk", 1), ("sidConflict", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleOutputSidStatus.setStatus('current')
if mibBuilder.loadTexts: moduleOutputSidStatus.setDescription('Module output SID status')
moduleConfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4175), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("configurationOk", 1), ("configurationUnsupported", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleConfStatus.setStatus('current')
if mibBuilder.loadTexts: moduleConfStatus.setDescription('Module configuration status')
moduleFreqStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4176), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("freqOk", 1), ("freqOutOfRange", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleFreqStatus.setStatus('current')
if mibBuilder.loadTexts: moduleFreqStatus.setDescription('Module frequency configuration range status')
moduleOutputPowerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4177), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("powerOk", 1), ("powerOutOfRange", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleOutputPowerStatus.setStatus('current')
if mibBuilder.loadTexts: moduleOutputPowerStatus.setDescription('Module output power status')
moduleSymrateStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4178), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("symbolRateOk", 1), ("symbolRateOutOfRange", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleSymrateStatus.setStatus('current')
if mibBuilder.loadTexts: moduleSymrateStatus.setDescription('Module symbol rate configuration status')
moduleChanDistStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4179), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("chanDistOk", 1), ("chanDistTooNarrow", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleChanDistStatus.setStatus('current')
if mibBuilder.loadTexts: moduleChanDistStatus.setDescription('Module channel distance configuration status')
moduleLnbVoltStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4180), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lnbVoltageOk", 1), ("lnbVoltageInvalid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleLnbVoltStatus.setStatus('current')
if mibBuilder.loadTexts: moduleLnbVoltStatus.setDescription('Module LNB voltage configuration status')
moduleFecRateStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4181), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fecRateOk", 1), ("fecRateInvalid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleFecRateStatus.setStatus('current')
if mibBuilder.loadTexts: moduleFecRateStatus.setDescription('Module FEC rate configuration vs modulation status')
moduleLnbCurrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4182), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lnbCurrentOk", 1), ("lnbCurrentInvalid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleLnbCurrStatus.setStatus('current')
if mibBuilder.loadTexts: moduleLnbCurrStatus.setDescription('Module LNB current status')
moduleFreqOffsetStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4183), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("freqOffsetOk", 1), ("freqOffsetInvalid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleFreqOffsetStatus.setStatus('current')
if mibBuilder.loadTexts: moduleFreqOffsetStatus.setDescription('Module frequency offset configuration status')
moduleDescrRestartStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4185), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("descramblingNominal", 1), ("descramblingRestarting", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDescrRestartStatus.setStatus('current')
if mibBuilder.loadTexts: moduleDescrRestartStatus.setDescription('Module descrambling restart status')
moduleCamRestartStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4186), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("camNominal", 1), ("camRestarting", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleCamRestartStatus.setStatus('current')
if mibBuilder.loadTexts: moduleCamRestartStatus.setDescription('Module CAM restart status')
moduleEcmgStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4187), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ecmgNominal", 1), ("ecmgFailure", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleEcmgStatus.setStatus('current')
if mibBuilder.loadTexts: moduleEcmgStatus.setDescription('Ecmg status')
moduleEcmStreamStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4188), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ecmStreamNominal", 1), ("ecmStreamFailure", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleEcmStreamStatus.setStatus('current')
if mibBuilder.loadTexts: moduleEcmStreamStatus.setDescription('Ecm stream status')
moduleEmmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4189), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("emmNominal", 1), ("emmFailure", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleEmmStatus.setStatus('current')
if mibBuilder.loadTexts: moduleEmmStatus.setDescription('Emm status')
moduleEmmStreamStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4190), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("emmStreamNominal", 1), ("emmStreamFailure", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleEmmStreamStatus.setStatus('current')
if mibBuilder.loadTexts: moduleEmmStreamStatus.setDescription('Emm stream status')
moduleEcmgConnStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4191), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ecmgConnNominal", 1), ("ecmgNotConnected", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleEcmgConnStatus.setStatus('current')
if mibBuilder.loadTexts: moduleEcmgConnStatus.setDescription('Ecmg connection status')
moduleEmmConnStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4192), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("emmConnNominal", 1), ("emmNotConnected", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleEmmConnStatus.setStatus('current')
if mibBuilder.loadTexts: moduleEmmConnStatus.setDescription('Emm connection status')
moduleEcmgSpareStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4194), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ecmgNominal", 1), ("ecmgSwitchedToSpare", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleEcmgSpareStatus.setStatus('current')
if mibBuilder.loadTexts: moduleEcmgSpareStatus.setDescription('Ecmg spare connection status')
moduleBootloaderAvailStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4195), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bootloaderOk", 1), ("bootloaderObsolete", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleBootloaderAvailStatus.setStatus('current')
if mibBuilder.loadTexts: moduleBootloaderAvailStatus.setDescription('Module bootloader availability status')
moduleBl1UpdateProgStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4196), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bootloaderNominal", 1), ("bootloaderUpdating", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleBl1UpdateProgStatus.setStatus('current')
if mibBuilder.loadTexts: moduleBl1UpdateProgStatus.setDescription('Module bootloader update progress')
moduleBl2UpdateProgStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4197), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bootloaderNominal", 1), ("bootloaderUpdating", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleBl2UpdateProgStatus.setStatus('current')
if mibBuilder.loadTexts: moduleBl2UpdateProgStatus.setDescription('Module bootloader update progress')
moduleBl1UpdateStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4198), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bootloaderNominal", 1), ("bootloaderUpdateFailure", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleBl1UpdateStatus.setStatus('current')
if mibBuilder.loadTexts: moduleBl1UpdateStatus.setDescription('Module bootloader update status')
moduleBl2UpdateStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4199), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bootloaderNominal", 1), ("bootloaderUpdateFailure", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleBl2UpdateStatus.setStatus('current')
if mibBuilder.loadTexts: moduleBl2UpdateStatus.setDescription('Module bootloader update status')
moduleActiveBackupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4203), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("backupPassive", 1), ("backupActive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleActiveBackupStatus.setStatus('current')
if mibBuilder.loadTexts: moduleActiveBackupStatus.setDescription('Backup module status')
moduleConfProgressStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4205), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("moduleNominal", 1), ("moduleConfiguring", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleConfProgressStatus.setStatus('current')
if mibBuilder.loadTexts: moduleConfProgressStatus.setDescription('Module configuration progress')
modulePresenceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4206), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("moduleNominal", 1), ("noModule", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modulePresenceStatus.setStatus('current')
if mibBuilder.loadTexts: modulePresenceStatus.setDescription('Module presence progress')
moduleProcessRestartStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4208), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("processesNominal", 1), ("processRestarted", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleProcessRestartStatus.setStatus('current')
if mibBuilder.loadTexts: moduleProcessRestartStatus.setDescription('Process restart status')
moduleBackupLicenseStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4209), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("licenseOk", 1), ("notLicensed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleBackupLicenseStatus.setStatus('current')
if mibBuilder.loadTexts: moduleBackupLicenseStatus.setDescription('Backup license status')
modulePsisiEditorLicenseStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4210), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("licenseOk", 1), ("notLicensed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modulePsisiEditorLicenseStatus.setStatus('current')
if mibBuilder.loadTexts: modulePsisiEditorLicenseStatus.setDescription('PSI/SI editor license status')
moduleMuxLicenseStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4211), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("licenseOk", 1), ("notLicensed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleMuxLicenseStatus.setStatus('current')
if mibBuilder.loadTexts: moduleMuxLicenseStatus.setDescription('Multiplexing license status')
moduleDemuxLicenseStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4212), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("licenseOk", 1), ("notLicensed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDemuxLicenseStatus.setStatus('current')
if mibBuilder.loadTexts: moduleDemuxLicenseStatus.setDescription('Demultiplexing license status')
moduleDvbLicenseStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4213), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("licenseOk", 1), ("notLicensed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDvbLicenseStatus.setStatus('current')
if mibBuilder.loadTexts: moduleDvbLicenseStatus.setDescription('DVB processing license status')
moduleMsdLicenseStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4214), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("licenseOk", 1), ("notLicensed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleMsdLicenseStatus.setStatus('current')
if mibBuilder.loadTexts: moduleMsdLicenseStatus.setDescription('MSD license status')
moduleDvbs2LicenseStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4215), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("licenseOk", 1), ("notLicensed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDvbs2LicenseStatus.setStatus('current')
if mibBuilder.loadTexts: moduleDvbs2LicenseStatus.setDescription('DVB-S2 processing license status')
moduleDvbt2LicenseStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4216), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("licenseOk", 1), ("notLicensed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDvbt2LicenseStatus.setStatus('current')
if mibBuilder.loadTexts: moduleDvbt2LicenseStatus.setDescription('DVB-T2 processing license status')
moduleScsLicenseStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4217), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("licenseValid", 1), ("notLicensed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleScsLicenseStatus.setStatus('current')
if mibBuilder.loadTexts: moduleScsLicenseStatus.setDescription('Scs license status')
moduleCliLoginStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4218), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cliNotLoggedIn", 1), ("cliLoggedIn", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleCliLoginStatus.setStatus('current')
if mibBuilder.loadTexts: moduleCliLoginStatus.setDescription('CLI login status')
moduleRedunActivationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4222), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("redundancyPassive", 1), ("redundancyActivated", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleRedunActivationStatus.setStatus('current')
if mibBuilder.loadTexts: moduleRedunActivationStatus.setDescription('Redundancy activation status')
moduleExtioPinSignalingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4223), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("extioPinNominal", 1), ("extioPinSignaled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleExtioPinSignalingStatus.setStatus('current')
if mibBuilder.loadTexts: moduleExtioPinSignalingStatus.setDescription('EXT-IO pin status')
moduleBackupPsuStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4224), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("backupPsuNominal", 1), ("backupPsuFailure", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleBackupPsuStatus.setStatus('current')
if mibBuilder.loadTexts: moduleBackupPsuStatus.setDescription('Backup power supply status')
moduleIntrusionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4225), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("intrusionNominal", 1), ("intrusionDetected", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleIntrusionStatus.setStatus('current')
if mibBuilder.loadTexts: moduleIntrusionStatus.setDescription('Intrusion detection status')
moduleRedunStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4227), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("redundancyOk", 1), ("redundancyFailure", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleRedunStatus.setStatus('current')
if mibBuilder.loadTexts: moduleRedunStatus.setDescription('Redundancy status')
moduleBackupHwStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4230), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("backupHwOk", 1), ("backupHwNotSupported", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleBackupHwStatus.setStatus('current')
if mibBuilder.loadTexts: moduleBackupHwStatus.setDescription('Hardware backup support status')
moduleSwUpdateProgress = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4231), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("swUpdateInactive", 1), ("swUpdateInProgress", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleSwUpdateProgress.setStatus('current')
if mibBuilder.loadTexts: moduleSwUpdateProgress.setDescription('Software update progress')
moduleSwUpdateStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4233), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("swNominal", 1), ("swUpdateFailure", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleSwUpdateStatus.setStatus('current')
if mibBuilder.loadTexts: moduleSwUpdateStatus.setDescription('Software update status')
moduleEitLicenseStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4235), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("licenseValid", 1), ("notLicensed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleEitLicenseStatus.setStatus('current')
if mibBuilder.loadTexts: moduleEitLicenseStatus.setDescription('EIT license status')
moduleDescramblingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4237), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("descramblingNominal", 1), ("descramblingFailure", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDescramblingStatus.setStatus('current')
if mibBuilder.loadTexts: moduleDescramblingStatus.setDescription('Descrambling status')
moduleDvbTimeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4243), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dvbTimeNominal", 1), ("dvbTimeMissing", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDvbTimeStatus.setStatus('current')
if mibBuilder.loadTexts: moduleDvbTimeStatus.setDescription('DVB time detection status')
moduleTunerDcFeedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4245), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("currentNominal", 1), ("currentOutOfRange", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleTunerDcFeedStatus.setStatus('current')
if mibBuilder.loadTexts: moduleTunerDcFeedStatus.setDescription('Tuner DC feed current status')
moduleTunerPlpSelectionReqStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4247), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("plpSelectionOk", 1), ("plpSelectionRequired", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleTunerPlpSelectionReqStatus.setStatus('current')
if mibBuilder.loadTexts: moduleTunerPlpSelectionReqStatus.setDescription('Tuner data PLP ID requirement status')
moduleTunerPlpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4248), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("plpSelectionValid", 1), ("plpSelectionNotValid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleTunerPlpStatus.setStatus('current')
if mibBuilder.loadTexts: moduleTunerPlpStatus.setDescription('Tuner data PLP ID validity status')
moduleTunerHierarchyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4249), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hierarchyOk", 1), ("hierarchyInvalid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleTunerHierarchyStatus.setStatus('current')
if mibBuilder.loadTexts: moduleTunerHierarchyStatus.setDescription('Status of transmission hierarchy')
moduleEcmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4250), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ecmNominal", 1), ("ecmMissing", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleEcmStatus.setStatus('current')
if mibBuilder.loadTexts: moduleEcmStatus.setDescription('ECM stream connection status')
moduleScramConflictStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4251), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("scramblingNominal", 1), ("scramblingConflict", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleScramConflictStatus.setStatus('current')
if mibBuilder.loadTexts: moduleScramConflictStatus.setDescription('Module scrambling shared component conflict status')
moduleScramSharedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4252), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("scramblingNominal", 1), ("scramblingSharedComponent", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleScramSharedStatus.setStatus('current')
if mibBuilder.loadTexts: moduleScramSharedStatus.setDescription('Module scrambling shared component status')
moduleBackupVoltageHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4253), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("voltageNominal", 1), ("voltageHigh", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleBackupVoltageHigh.setStatus('current')
if mibBuilder.loadTexts: moduleBackupVoltageHigh.setDescription('Backup high voltage status')
moduleBackupVoltageLow = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4254), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("voltageNominal", 1), ("voltageLow", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleBackupVoltageLow.setStatus('current')
if mibBuilder.loadTexts: moduleBackupVoltageLow.setDescription('Backup low voltage status')
moduleSdtTableStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4255), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sdtTableOk", 1), ("invalidSdtTableTemplate", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleSdtTableStatus.setStatus('current')
if mibBuilder.loadTexts: moduleSdtTableStatus.setDescription('Sdt table template status')
moduleDescramblingRestart = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4256), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("descramblingNominal", 1), ("descramblingRestarting", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDescramblingRestart.setStatus('current')
if mibBuilder.loadTexts: moduleDescramblingRestart.setDescription('Descrambling restart status')
moduleCaModuleRestart = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4257), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("caModuleNominal", 1), ("caModuleRestarting", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleCaModuleRestart.setStatus('current')
if mibBuilder.loadTexts: moduleCaModuleRestart.setDescription('CA module restart status')
moduleCaMenuStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4258), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("caMenuNominal", 1), ("caMenuOpen", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleCaMenuStatus.setStatus('current')
if mibBuilder.loadTexts: moduleCaMenuStatus.setDescription('CA menu access status')
moduleInvalidCamRouting = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4259), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("camRoutingNominal", 1), ("camRoutingInvalid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleInvalidCamRouting.setStatus('current')
if mibBuilder.loadTexts: moduleInvalidCamRouting.setDescription('CAM routing status')
moduleNitSidConflict = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4260), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nitSidNominal", 1), ("nitSidConflict", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleNitSidConflict.setStatus('current')
if mibBuilder.loadTexts: moduleNitSidConflict.setDescription('Nit / Sid conflict status')
moduleLicenseMissingFEC = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4262), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("licenseOk", 1), ("licenseMissing", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleLicenseMissingFEC.setStatus('current')
if mibBuilder.loadTexts: moduleLicenseMissingFEC.setDescription('FEC license status')
moduleFecCorrectionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4263), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("correctionNominal", 1), ("correctionOverload", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleFecCorrectionStatus.setStatus('current')
if mibBuilder.loadTexts: moduleFecCorrectionStatus.setDescription('Fec packet correction status. Correction overload (2) is result of too many simultaneous missing packets.')
moduleFecPacketDropStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4264), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("packetsNominal", 1), ("packetsDropped", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleFecPacketDropStatus.setStatus('current')
if mibBuilder.loadTexts: moduleFecPacketDropStatus.setDescription('FEC packet discarding status. Packet discarding (2) is resulted by too high bitrate.')
moduleFecMediaPktsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4265), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("packetsNominal", 1), ("packetsDiscarded", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleFecMediaPktsStatus.setStatus('current')
if mibBuilder.loadTexts: moduleFecMediaPktsStatus.setDescription('Fec media packet discarding status. Packet discarding (2) is resulted by too high bitrate.')
moduleSfpLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4269), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sfpLinkNominal", 1), ("sfpLinkDown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleSfpLinkStatus.setStatus('current')
if mibBuilder.loadTexts: moduleSfpLinkStatus.setDescription('SFP link status')
moduleBackupSyncModeOff = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4272), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("modeNominal", 1), ("modeOff", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleBackupSyncModeOff.setStatus('current')
if mibBuilder.loadTexts: moduleBackupSyncModeOff.setDescription('Backup sync mode off status flag')
moduleBackupSyncModeManual = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4273), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("modeNominal", 1), ("modeManual", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleBackupSyncModeManual.setStatus('current')
if mibBuilder.loadTexts: moduleBackupSyncModeManual.setDescription('Backup sync mode manual status flag')
moduleBackupSyncModeAuto = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4274), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("modeNominal", 1), ("modeAuto", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleBackupSyncModeAuto.setStatus('current')
if mibBuilder.loadTexts: moduleBackupSyncModeAuto.setDescription('Backup sync mode automatic status flag')
moduleBackupSyncConfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4275), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("configurationNominal", 1), ("configurationChanged", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleBackupSyncConfStatus.setStatus('current')
if mibBuilder.loadTexts: moduleBackupSyncConfStatus.setDescription('Backup sync configuration change status')
moduleBackupSyncStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4276), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("syncNominal", 1), ("synchronizing", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleBackupSyncStatus.setStatus('current')
if mibBuilder.loadTexts: moduleBackupSyncStatus.setDescription('Backup configuration synchronization status')
moduleBackupSyncSwCompatibility = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4278), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("swCompatible", 1), ("swIncompatible", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleBackupSyncSwCompatibility.setStatus('current')
if mibBuilder.loadTexts: moduleBackupSyncSwCompatibility.setDescription('Software version compatibility for backup sync')
moduleBackupSyncHwCompatibility = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4279), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hwCompatible", 1), ("hwIncompatible", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleBackupSyncHwCompatibility.setStatus('current')
if mibBuilder.loadTexts: moduleBackupSyncHwCompatibility.setDescription('Hardware version compatibility for backup sync')
moduleBackupSyncConfFaultStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4280), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("configurationNominal", 1), ("configurationFault", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleBackupSyncConfFaultStatus.setStatus('current')
if mibBuilder.loadTexts: moduleBackupSyncConfFaultStatus.setDescription('Backup sync configuration fault status')
moduleBackupSyncConnectionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4281), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("connectionNominal", 1), ("connectionLost", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleBackupSyncConnectionStatus.setStatus('current')
if mibBuilder.loadTexts: moduleBackupSyncConnectionStatus.setDescription('Backup sync connection status')
moduleBackupSyncFromBackupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4283), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("syncNominal", 1), ("syncNotPossible", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleBackupSyncFromBackupStatus.setStatus('current')
if mibBuilder.loadTexts: moduleBackupSyncFromBackupStatus.setDescription('Status flag for backup autosync from backup to main')
moduleBackupSyncRebootStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4284), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pairDevNominal", 1), ("pairDevRebooting", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleBackupSyncRebootStatus.setStatus('current')
if mibBuilder.loadTexts: moduleBackupSyncRebootStatus.setDescription('Status flag for rebooting pair device to new configuration')
moduleBackupSyncLicenseCompatStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4285), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("licensesCompatible", 1), ("licensesIncompatible", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleBackupSyncLicenseCompatStatus.setStatus('current')
if mibBuilder.loadTexts: moduleBackupSyncLicenseCompatStatus.setDescription('License compatibility status flag for backup sync')
moduleBackupSyncLicenseCompareStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4286), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("licenseNominal", 1), ("licenseComparing", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleBackupSyncLicenseCompareStatus.setStatus('current')
if mibBuilder.loadTexts: moduleBackupSyncLicenseCompareStatus.setDescription('Backup sync license comparing status')
moduleDeviceFirstBootStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4288), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("firstBootNominal", 1), ("firstBootInProgress", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDeviceFirstBootStatus.setStatus('current')
if mibBuilder.loadTexts: moduleDeviceFirstBootStatus.setDescription('Status flag for device first boot operations')
modulePartitionConfigurationBackup = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4289), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("configurationNominal", 1), ("configurationBackupInProgress", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modulePartitionConfigurationBackup.setStatus('current')
if mibBuilder.loadTexts: modulePartitionConfigurationBackup.setDescription('Status flag for partition configuration backup operation')
modulePartitionConfigurationRestore = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4290), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("configurationNominal", 1), ("configurationRestoreInProgress", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modulePartitionConfigurationRestore.setStatus('current')
if mibBuilder.loadTexts: modulePartitionConfigurationRestore.setDescription('Status flag for partition configuration restore operation')
moduleSwRevertStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4291), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("swNominal", 1), ("swRevertInProgress", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleSwRevertStatus.setStatus('current')
if mibBuilder.loadTexts: moduleSwRevertStatus.setDescription('Software revertion status')
moduleMaxOutputPidsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4292), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pidsNominal", 1), ("maxPidsUsed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleMaxOutputPidsStatus.setStatus('current')
if mibBuilder.loadTexts: moduleMaxOutputPidsStatus.setDescription('Status flag for maximum number of Pid allocations')
moduleUserRebootStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4293), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("moduleNominal", 1), ("moduleRebootedByUser", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleUserRebootStatus.setStatus('current')
if mibBuilder.loadTexts: moduleUserRebootStatus.setDescription('Status flag for user initiated reboot')
moduleRemovalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4294), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("moduleNominal", 1), ("moduleRemoved", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleRemovalStatus.setStatus('current')
if mibBuilder.loadTexts: moduleRemovalStatus.setDescription('Status flag for module removal')
moduleInsertionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4295), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("moduleNominal", 1), ("moduleInserted", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleInsertionStatus.setStatus('current')
if mibBuilder.loadTexts: moduleInsertionStatus.setDescription('Status flag for module insertion')
moduleSptsInputConfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 2, 1, 4296), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sptsInputNominal", 1), ("inputNotSpts", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleSptsInputConfStatus.setStatus('current')
if mibBuilder.loadTexts: moduleSptsInputConfStatus.setDescription('Status flag for input spts misconfiguration')
ifStatusTable = MibTable((1, 3, 6, 1, 4, 1, 3715, 17, 5, 3), )
if mibBuilder.loadTexts: ifStatusTable.setStatus('current')
if mibBuilder.loadTexts: ifStatusTable.setDescription(' ')
ifStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3715, 17, 5, 3, 1), ).setIndexNames((0, "TELESTE-LUMINATO-MIB", "moduleId"), (0, "TELESTE-LUMINATO-MIB", "ifDirection"), (0, "TELESTE-LUMINATO-MIB", "ifId"))
if mibBuilder.loadTexts: ifStatusEntry.setStatus('current')
if mibBuilder.loadTexts: ifStatusEntry.setDescription(' ')
ifId = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: ifId.setStatus('current')
if mibBuilder.loadTexts: ifId.setDescription('Interface identifier')
ifDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("input", 1), ("output", 2), ("both", 3))))
if mibBuilder.loadTexts: ifDirection.setStatus('current')
if mibBuilder.loadTexts: ifDirection.setDescription('Interface data direction')
ifSignalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 3, 1, 4097), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("signalOk", 1), ("signalMissing", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifSignalStatus.setStatus('current')
if mibBuilder.loadTexts: ifSignalStatus.setDescription('Interface signal status')
ifAsiLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 3, 1, 4102), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("linkOk", 1), ("linkDown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifAsiLinkStatus.setStatus('current')
if mibBuilder.loadTexts: ifAsiLinkStatus.setDescription('ASI link status')
ifLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 3, 1, 4226), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("linkOk", 1), ("linkDown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifLinkStatus.setStatus('current')
if mibBuilder.loadTexts: ifLinkStatus.setDescription('Interface link status')
tsStatusTable = MibTable((1, 3, 6, 1, 4, 1, 3715, 17, 5, 4), )
if mibBuilder.loadTexts: tsStatusTable.setStatus('current')
if mibBuilder.loadTexts: tsStatusTable.setDescription(' ')
tsStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3715, 17, 5, 4, 1), ).setIndexNames((0, "TELESTE-LUMINATO-MIB", "moduleId"), (0, "TELESTE-LUMINATO-MIB", "ifDirection"), (0, "TELESTE-LUMINATO-MIB", "ifId"))
if mibBuilder.loadTexts: tsStatusEntry.setStatus('current')
if mibBuilder.loadTexts: tsStatusEntry.setDescription(' ')
tsPidRemappingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pidNominal", 1), ("pidRemapped", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsPidRemappingStatus.setStatus('current')
if mibBuilder.loadTexts: tsPidRemappingStatus.setDescription('TS PID remapping status')
tsManualTableInsertStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("insertOk", 1), ("insertFailure", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsManualTableInsertStatus.setStatus('current')
if mibBuilder.loadTexts: tsManualTableInsertStatus.setDescription('TS manual table insertion status')
tsPassthruDupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("servicesNominal", 1), ("servicesBlocked", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsPassthruDupStatus.setStatus('current')
if mibBuilder.loadTexts: tsPassthruDupStatus.setDescription('TS output service passthrough duplication status')
tsSyncStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 4, 1, 4098), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("syncOk", 1), ("noSync", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsSyncStatus.setStatus('current')
if mibBuilder.loadTexts: tsSyncStatus.setDescription('TS sync status')
tsRxStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 4, 1, 4099), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rxNominal", 1), ("rxErrors", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsRxStatus.setStatus('current')
if mibBuilder.loadTexts: tsRxStatus.setDescription('TS Rx error status')
tsInputBufferStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 4, 1, 4100), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bufferNominal", 1), ("bufferOverflow", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsInputBufferStatus.setStatus('current')
if mibBuilder.loadTexts: tsInputBufferStatus.setDescription('TS input buffer status')
tsNetworkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 4, 1, 4103), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("netOk", 1), ("netForbidden", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsNetworkStatus.setStatus('current')
if mibBuilder.loadTexts: tsNetworkStatus.setDescription('TS network ID status')
tsPsisiCapaStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 4, 1, 4109), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("capacityNominal", 1), ("capacityExceeded", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsPsisiCapaStatus.setStatus('current')
if mibBuilder.loadTexts: tsPsisiCapaStatus.setDescription('TS PSI/SI insertion capacity status')
tsMultiplexDiscardStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 4, 1, 4110), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("muxNominal", 1), ("muxPacketsDiscarded", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsMultiplexDiscardStatus.setStatus('current')
if mibBuilder.loadTexts: tsMultiplexDiscardStatus.setDescription('TS multiplex packet discard status')
tsMultiplexDelayStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 4, 1, 4228), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("muxNominal", 1), ("muxPacketsDelayed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsMultiplexDelayStatus.setStatus('current')
if mibBuilder.loadTexts: tsMultiplexDelayStatus.setDescription('TS multiplex packet delay status')
tsCbrOversubscriptionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 4, 1, 4229), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cbrNominal", 1), ("cbrOversubscription", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsCbrOversubscriptionStatus.setStatus('current')
if mibBuilder.loadTexts: tsCbrOversubscriptionStatus.setDescription('TS CBR oversubscription status')
tsCbrDiscardStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 4, 1, 4236), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cbrNominal", 1), ("cbrPacketsDiscarded", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsCbrDiscardStatus.setStatus('current')
if mibBuilder.loadTexts: tsCbrDiscardStatus.setDescription('TS CBR packet discard due to oversubscription status')
tsIpInputCapaStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 4, 1, 4238), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("capacityNominal", 1), ("capacityExceeded", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsIpInputCapaStatus.setStatus('current')
if mibBuilder.loadTexts: tsIpInputCapaStatus.setDescription('TS IP input capacity status')
tsEitReinsertCapaStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 4, 1, 4239), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("capacityNominal", 1), ("capacityExceeded", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsEitReinsertCapaStatus.setStatus('current')
if mibBuilder.loadTexts: tsEitReinsertCapaStatus.setDescription('TS EIT reinsert capacity status')
tsSectionCapaStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 4, 1, 4240), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("capacityNominal", 1), ("capacityExceeded", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsSectionCapaStatus.setStatus('current')
if mibBuilder.loadTexts: tsSectionCapaStatus.setDescription('TS section processing capacity status')
tsRtpInputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 4, 1, 4241), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inputOk", 1), ("inputPacketsDropped", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsRtpInputStatus.setStatus('current')
if mibBuilder.loadTexts: tsRtpInputStatus.setDescription('TS RTP input packet droip status')
tsRtpSeqStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 4, 1, 4242), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("seqOk", 1), ("seqAnomalies", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsRtpSeqStatus.setStatus('current')
if mibBuilder.loadTexts: tsRtpSeqStatus.setDescription('TS RTP input packet sequence anomaly status')
tsTdtTotGenStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 4, 1, 4246), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tdtTotOk", 1), ("tdtTotNotGenerated", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsTdtTotGenStatus.setStatus('current')
if mibBuilder.loadTexts: tsTdtTotGenStatus.setDescription('TS output TDT/TOT table generation status')
tsSttGenStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 4, 1, 4261), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sttOk", 1), ("sttNotGenerated", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsSttGenStatus.setStatus('current')
if mibBuilder.loadTexts: tsSttGenStatus.setDescription('TS output STT table generation status')
tsFecPacketCorrectionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 4, 1, 4266), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("packetsNominal", 1), ("fecCorrectedPackets", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsFecPacketCorrectionStatus.setStatus('current')
if mibBuilder.loadTexts: tsFecPacketCorrectionStatus.setDescription('Status flag for FEC correcting packets')
tsFecInputAnomalyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 4, 1, 4267), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fecInputNominal", 1), ("fecInputAnomalies", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsFecInputAnomalyStatus.setStatus('current')
if mibBuilder.loadTexts: tsFecInputAnomalyStatus.setDescription('Status flag for FEC input anomaly detection')
tsFecCorrectionCapacityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 4, 1, 4268), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("correctionCapacityNominal", 1), ("correctionCapacityExceeded", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsFecCorrectionCapacityStatus.setStatus('current')
if mibBuilder.loadTexts: tsFecCorrectionCapacityStatus.setDescription('Fec input packets correction capacity status')
tsIpMirrorOutputPacketLossStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 4, 1, 4297), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipOutputNominal", 1), ("ipOutputPacketsDiscarded", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsIpMirrorOutputPacketLossStatus.setStatus('current')
if mibBuilder.loadTexts: tsIpMirrorOutputPacketLossStatus.setDescription('Status flag for IP mirror output packet discarding')
serviceStatusTable = MibTable((1, 3, 6, 1, 4, 1, 3715, 17, 5, 5), )
if mibBuilder.loadTexts: serviceStatusTable.setStatus('current')
if mibBuilder.loadTexts: serviceStatusTable.setDescription(' ')
serviceStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3715, 17, 5, 5, 1), ).setIndexNames((0, "TELESTE-LUMINATO-MIB", "moduleId"), (0, "TELESTE-LUMINATO-MIB", "ifDirection"), (0, "TELESTE-LUMINATO-MIB", "ifId"), (0, "TELESTE-LUMINATO-MIB", "serviceId"))
if mibBuilder.loadTexts: serviceStatusEntry.setStatus('current')
if mibBuilder.loadTexts: serviceStatusEntry.setDescription(' ')
serviceId = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 5, 1, 1), Integer32())
if mibBuilder.loadTexts: serviceId.setStatus('current')
if mibBuilder.loadTexts: serviceId.setDescription('Service identifier')
serviceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("servicePresent", 1), ("serviceMissing", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serviceStatus.setStatus('current')
if mibBuilder.loadTexts: serviceStatus.setDescription('Service status')
pidStatusTable = MibTable((1, 3, 6, 1, 4, 1, 3715, 17, 5, 6), )
if mibBuilder.loadTexts: pidStatusTable.setStatus('current')
if mibBuilder.loadTexts: pidStatusTable.setDescription(' ')
pidStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3715, 17, 5, 6, 1), ).setIndexNames((0, "TELESTE-LUMINATO-MIB", "moduleId"), (0, "TELESTE-LUMINATO-MIB", "ifDirection"), (0, "TELESTE-LUMINATO-MIB", "ifId"), (0, "TELESTE-LUMINATO-MIB", "pId"))
if mibBuilder.loadTexts: pidStatusEntry.setStatus('current')
if mibBuilder.loadTexts: pidStatusEntry.setDescription(' ')
pId = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: pId.setStatus('current')
if mibBuilder.loadTexts: pId.setDescription('Program Identifier')
pidStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3715, 17, 5, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pidPresent", 1), ("pidMissing", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pidStatus.setStatus('current')
if mibBuilder.loadTexts: pidStatus.setDescription('PID status')
mibBuilder.exportSymbols("TELESTE-LUMINATO-MIB", tsPassthruDupStatus=tsPassthruDupStatus, tsStatusEntry=tsStatusEntry, statusCodePidEntry=statusCodePidEntry, moduleDeviceFirstBootStatus=moduleDeviceFirstBootStatus, moduleInsertionStatus=moduleInsertionStatus, statusCodeDeviceEntry=statusCodeDeviceEntry, ifExtIndex=ifExtIndex, moduleCalibrDataStatus=moduleCalibrDataStatus, moduleSfpLinkStatus=moduleSfpLinkStatus, moduleNitWizardStatus=moduleNitWizardStatus, moduleRemovalStatus=moduleRemovalStatus, moduleBackupSyncModeOff=moduleBackupSyncModeOff, statusCodeModuleTable=statusCodeModuleTable, tsTdtTotGenStatus=tsTdtTotGenStatus, moduleBackupVoltageHigh=moduleBackupVoltageHigh, scsObjectValue=scsObjectValue, moduleNitSidConflict=moduleNitSidConflict, scmObjectId=scmObjectId, tsInputBufferStatus=tsInputBufferStatus, moduleDescrStatus=moduleDescrStatus, moduleDescrRestartStatus=moduleDescrRestartStatus, pidStatusEntry=pidStatusEntry, statusCode=statusCode, moduleBl1UpdateProgStatus=moduleBl1UpdateProgStatus, ifAsiLinkStatus=ifAsiLinkStatus, serviceId=serviceId, modulePsuOverloadStatus=modulePsuOverloadStatus, statusCodePidTable=statusCodePidTable, tsPidRemappingStatus=tsPidRemappingStatus, tsSectionCapaStatus=tsSectionCapaStatus, ifExtModule=ifExtModule, transBitrateMin=transBitrateMin, moduleSwUpdateStatus=moduleSwUpdateStatus, modulePsisiCaptureCapaStatus=modulePsisiCaptureCapaStatus, moduleChanDistStatus=moduleChanDistStatus, deviceName=deviceName, signalSnr=signalSnr, moduleNitOutputsStatus=moduleNitOutputsStatus, moduleEcmgStatus=moduleEcmgStatus, moduleBackupLicenseStatus=moduleBackupLicenseStatus, serviceStatusTable=serviceStatusTable, moduleConfStatus=moduleConfStatus, sciObjectAlarmValue=sciObjectAlarmValue, moduleBackupSyncStatus=moduleBackupSyncStatus, scdObjectAlarmValue=scdObjectAlarmValue, statusCodeInterfaceTable=statusCodeInterfaceTable, ifStatusEntry=ifStatusEntry, scpPID=scpPID, fecUncorrectedPkts=fecUncorrectedPkts, moduleSwUpdateProgress=moduleSwUpdateProgress, moduleSwRevertStatus=moduleSwRevertStatus, scdObjectValue=scdObjectValue, moduleCompatStatus=moduleCompatStatus, moduleNitConfChangeStatus=moduleNitConfChangeStatus, moduleBackupSyncRebootStatus=moduleBackupSyncRebootStatus, swVersion=swVersion, scsSID=scsSID, moduleDriverStatus=moduleDriverStatus, ifExtLogiInterface=ifExtLogiInterface, scmModuleId=scmModuleId, statusCodeDeviceTable=statusCodeDeviceTable, scpObjectValue=scpObjectValue, moduleBl1UpdateStatus=moduleBl1UpdateStatus, moduleCliLoginStatus=moduleCliLoginStatus, modulePidCapaStatus=modulePidCapaStatus, scdObjectId=scdObjectId, moduleBackupVoltageLow=moduleBackupVoltageLow, scmObjectValue=scmObjectValue, tsCbrOversubscriptionStatus=tsCbrOversubscriptionStatus, moduleEitLicenseStatus=moduleEitLicenseStatus, transferTable=transferTable, tsPsisiCapaStatus=tsPsisiCapaStatus, sctsObjectValue=sctsObjectValue, moduleDvbLicenseStatus=moduleDvbLicenseStatus, modulePowerSourceStatus=modulePowerSourceStatus, tsIpInputCapaStatus=tsIpInputCapaStatus, moduleDescramblingRestart=moduleDescramblingRestart, moduleBackupSyncModeManual=moduleBackupSyncModeManual, moduleId=moduleId, moduleBootupStatus=moduleBootupStatus, moduleTunerPlpSelectionReqStatus=moduleTunerPlpSelectionReqStatus, moduleMsdLicenseStatus=moduleMsdLicenseStatus, moduleCalibrDataCheckStatus=moduleCalibrDataCheckStatus, tsStatusTable=tsStatusTable, moduleBackupPsuStatus=moduleBackupPsuStatus, moduleDetectStatus=moduleDetectStatus, moduleBl2UpdateStatus=moduleBl2UpdateStatus, moduleStatusTable=moduleStatusTable, moduleRedunStatus=moduleRedunStatus, ifLinkStatus=ifLinkStatus, moduleBackupSyncConfFaultStatus=moduleBackupSyncConfFaultStatus, tsSttGenStatus=tsSttGenStatus, moduleFreqStatus=moduleFreqStatus, ifExtDirection=ifExtDirection, moduleScramSharedStatus=moduleScramSharedStatus, scsObjectId=scsObjectId, signalPhysTable=signalPhysTable, moduleDvbs2LicenseStatus=moduleDvbs2LicenseStatus, moduleRedunActivationStatus=moduleRedunActivationStatus, sciObjectId=sciObjectId, sctsTransportStreamId=sctsTransportStreamId, moduleBackupStatus=moduleBackupStatus, scmObjectDescriptor=scmObjectDescriptor, tsCbrDiscardStatus=tsCbrDiscardStatus, moduleQamFreqStatus=moduleQamFreqStatus, scdObjectDescriptor=scdObjectDescriptor, moduleBackupSyncSwCompatibility=moduleBackupSyncSwCompatibility, serviceStatusEntry=serviceStatusEntry, tsIpMirrorOutputPacketLossStatus=tsIpMirrorOutputPacketLossStatus, moduleFanStatus=moduleFanStatus, modulePsisiEditorLicenseStatus=modulePsisiEditorLicenseStatus, tsRxStatus=tsRxStatus, moduleBootloaderAvailStatus=moduleBootloaderAvailStatus, tsNetworkStatus=tsNetworkStatus, statusCodeTransportStreamTable=statusCodeTransportStreamTable, moduleTunerPlpStatus=moduleTunerPlpStatus, interfaceTypeId=interfaceTypeId, moduleOutputPowerStatus=moduleOutputPowerStatus, moduleEmmStreamStatus=moduleEmmStreamStatus, hwVersion=hwVersion, scsServiceName=scsServiceName, signalPhysEntry=signalPhysEntry, moduleEcmgConnStatus=moduleEcmgConnStatus, ifId=ifId, moduleEmmStatus=moduleEmmStatus, moduleProcessRestartStatus=moduleProcessRestartStatus, ifExtPhysInterface=ifExtPhysInterface, moduleCamRestartStatus=moduleCamRestartStatus, scsObjectAlarmValue=scsObjectAlarmValue, tsFecCorrectionCapacityStatus=tsFecCorrectionCapacityStatus, modulePidConflictStatus=modulePidConflictStatus, statusCodeServiceEntry=statusCodeServiceEntry, generalStatus=generalStatus, moduleBackupSyncLicenseCompatStatus=moduleBackupSyncLicenseCompatStatus, moduleDvbTimeStatus=moduleDvbTimeStatus, moduleSdtTableStatus=moduleSdtTableStatus, fecDiscontinuities=fecDiscontinuities, moduleCurrentHigh=moduleCurrentHigh, moduleBackupSyncModeAuto=moduleBackupSyncModeAuto, statusCodeServiceTable=statusCodeServiceTable, tsRtpSeqStatus=tsRtpSeqStatus, pidStatus=pidStatus, proMpegFecTable=proMpegFecTable, fecCorrectedPkts=fecCorrectedPkts, moduleSymrateStatus=moduleSymrateStatus, moduleCaModuleRestart=moduleCaModuleRestart, ifExtName=ifExtName, moduleStatusEntry=moduleStatusEntry, moduleFreqOffsetStatus=moduleFreqOffsetStatus, ifExtEntry=ifExtEntry, sciObjectValue=sciObjectValue, interfaceTypeEntry=interfaceTypeEntry, ifExtTable=ifExtTable, moduleShutdownProgressStatus=moduleShutdownProgressStatus, scpObjectDescriptor=scpObjectDescriptor, scpObjectAlarmValue=scpObjectAlarmValue, general=general, moduleLnbCurrStatus=moduleLnbCurrStatus, signalVber=signalVber, moduleIntrusionStatus=moduleIntrusionStatus, ifStatusTable=ifStatusTable, moduleCaDetectStatus=moduleCaDetectStatus, pidStatusTable=pidStatusTable, moduleFecCorrectionStatus=moduleFecCorrectionStatus, moduleBackupSyncFromBackupStatus=moduleBackupSyncFromBackupStatus, tsMultiplexDiscardStatus=tsMultiplexDiscardStatus, statusCodeModuleEntry=statusCodeModuleEntry, notifications=notifications, moduleHwStatus=moduleHwStatus, moduleEcmgSpareStatus=moduleEcmgSpareStatus, tsEitReinsertCapaStatus=tsEitReinsertCapaStatus, moduleInvalidCamRouting=moduleInvalidCamRouting, tsRtpInputStatus=tsRtpInputStatus, scsObjectDescriptor=scsObjectDescriptor, moduleMaxOutputPidsStatus=moduleMaxOutputPidsStatus, fecDuplicatePkts=fecDuplicatePkts, moduleExtioPinSignalingStatus=moduleExtioPinSignalingStatus, moduleActiveBackupStatus=moduleActiveBackupStatus, scpObjectId=scpObjectId, fecIncorrectSeqNumbers=fecIncorrectSeqNumbers, sctsObjectAlarmValue=sctsObjectAlarmValue, signalBer=signalBer, moduleBackupHwStatus=moduleBackupHwStatus, moduleUpcPowerHigh=moduleUpcPowerHigh, sciObjectDescriptor=sciObjectDescriptor, scmObjectAlarmValue=scmObjectAlarmValue, pysmiFakeCol1000=pysmiFakeCol1000, moduleEcmStatus=moduleEcmStatus, moduleSidAllocStatus=moduleSidAllocStatus, statusCodeInterfaceEntry=statusCodeInterfaceEntry, fecReorderedPkts=fecReorderedPkts, moduleBl2UpdateProgStatus=moduleBl2UpdateProgStatus, moduleTunerDcFeedStatus=moduleTunerDcFeedStatus, moduleLnbVoltStatus=moduleLnbVoltStatus, pId=pId, redundancyStatus=redundancyStatus, moduleBackupSyncLicenseCompareStatus=moduleBackupSyncLicenseCompareStatus, statusCodeTransportStreamEntry=statusCodeTransportStreamEntry, proMpegFecEntry=proMpegFecEntry, moduleOutputSidStatus=moduleOutputSidStatus, ifDirection=ifDirection, moduleBootupProgressStatus=moduleBootupProgressStatus, tsFecInputAnomalyStatus=tsFecInputAnomalyStatus, moduleVoltageLow=moduleVoltageLow, moduleDvbt2LicenseStatus=moduleDvbt2LicenseStatus, moduleConnStatus=moduleConnStatus, tsSyncStatus=tsSyncStatus, statusFlags=statusFlags, moduleMuxLicenseStatus=moduleMuxLicenseStatus, moduleVoltageHigh=moduleVoltageHigh, moduleScsLicenseStatus=moduleScsLicenseStatus, sctsObjectId=sctsObjectId, transBitrate=transBitrate, ifSignalStatus=ifSignalStatus, fecValidPkts=fecValidPkts, modulePartitionConfigurationBackup=modulePartitionConfigurationBackup, interfaceTypeTable=interfaceTypeTable, sciInterfaceId=sciInterfaceId, modulePresenceStatus=modulePresenceStatus, moduleFecMediaPktsStatus=moduleFecMediaPktsStatus, tsFecPacketCorrectionStatus=tsFecPacketCorrectionStatus, moduleCaMenuStatus=moduleCaMenuStatus, moduleUpcPowerLow=moduleUpcPowerLow, moduleDemuxLicenseStatus=moduleDemuxLicenseStatus, signalSnrMax=signalSnrMax, moduleLicenseMissingFEC=moduleLicenseMissingFEC, moduleFecPacketDropStatus=moduleFecPacketDropStatus, moduleNitSelectionStatus=moduleNitSelectionStatus, signalSnrMin=signalSnrMin, moduleFecRateStatus=moduleFecRateStatus, moduleBackupSyncConnectionStatus=moduleBackupSyncConnectionStatus, modulePartitionConfigurationRestore=modulePartitionConfigurationRestore, transferEntry=transferEntry, moduleTemperatureHigh=moduleTemperatureHigh, moduleSptsInputConfStatus=moduleSptsInputConfStatus, hwSerialNumber=hwSerialNumber, moduleConfProgressStatus=moduleConfProgressStatus, transBitrateMax=transBitrateMax, moduleNitDataQueryStatus=moduleNitDataQueryStatus, moduleBootupRetryStatus=moduleBootupRetryStatus, moduleScramConflictStatus=moduleScramConflictStatus, moduleDaemonInitStatus=moduleDaemonInitStatus, moduleBackupSyncConfStatus=moduleBackupSyncConfStatus, tsManualTableInsertStatus=tsManualTableInsertStatus, moduleDescramblingStatus=moduleDescramblingStatus, sctsObjectDescriptor=sctsObjectDescriptor, moduleCurrentLow=moduleCurrentLow, moduleTunerHierarchyStatus=moduleTunerHierarchyStatus, upTime=upTime, cumulativeUptime=cumulativeUptime, moduleEmmConnStatus=moduleEmmConnStatus, moduleTemperatureLow=moduleTemperatureLow, tsMultiplexDelayStatus=tsMultiplexDelayStatus, moduleBackupSyncHwCompatibility=moduleBackupSyncHwCompatibility)
mibBuilder.exportSymbols("TELESTE-LUMINATO-MIB", serviceStatus=serviceStatus, signalCcErrors=signalCcErrors, interface=interface, moduleUserRebootStatus=moduleUserRebootStatus, moduleEcmStreamStatus=moduleEcmStreamStatus, hwType=hwType)
