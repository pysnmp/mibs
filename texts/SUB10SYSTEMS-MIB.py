#
# PySNMP MIB module SUB10SYSTEMS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/sub10/SUB10SYSTEMS-MIB
# Produced by pysmi-1.1.12 at Tue Jun  4 12:26:21 2024
# On host fv-az1789-327 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
NotificationType, Counter32, Gauge32, ObjectIdentity, IpAddress, MibIdentifier, Integer32, Unsigned32, enterprises, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Bits, iso, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Counter32", "Gauge32", "ObjectIdentity", "IpAddress", "MibIdentifier", "Integer32", "Unsigned32", "enterprises", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Bits", "iso", "Counter64")
DateAndTime, TextualConvention, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "TextualConvention", "RowStatus", "DisplayString")
sub10Systems = ModuleIdentity((1, 3, 6, 1, 4, 1, 39003))
sub10Systems.setRevisions(('2015-06-03 00:00', '2015-04-07 00:00', '2015-03-30 00:00', '2015-03-26 00:00', '2015-03-06 00:00', '2015-03-05 00:00', '2015-02-27 00:00', '2014-12-18 00:00', '2014-11-19 00:00', '2014-04-07 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: sub10Systems.setRevisionsDescriptions(('-  Airside maximum data rate\n                    -  Removed Eth Link Status from Sub10MeasuredObject', '-  Multi-Ethernet port MIB.\n                    -  Stats History Time objects read-only', '-  Default Alarm Severities changed\n                    -  Updated descriptions', '-  Firmware Upload and Copy control', '-  Rx and Tx Modulation Mode included in Alarm Management.', '-  Reset Action for Alarm Configuration.\n                    -  Modulation Mode Timers in radio stats.', '-  VLAN filtering and QoS not per ethernet port\n                    -  SNMPv3 Configuration\n                    -  QosState default changed to disabled.\n                    -  Sub10NotificationName type changed to Sub10AlarmName.\n                    -  Added Measured Object Value to Alarm Management and Alarm Notifications.\n                    -  Changed QoSState to QoSActiveState.\n                    -  Added new default Alarm State stateUnknown.\n                    -  Extended Alarm table sub10UnitMgmtAlarmTable to accomodate 64 Fixed and 64 User Defined alarms.\n                    -  Alarm thresholds now Float64 translated as Octetstring\n                    -  SNMP Trap option to Alarm Management.\n                    -  Removed UAS, SES, BBE and ES counters.\n                    -  Added Air Frame Error Ratio (AFER) objects to Radio\n                    -  Rx / Tx Mbps throughput added to ethernet stats and Alarm measured object\n                    -  Remote unit stats added to radio and ethernet current stats\n                    -  Stats history counters make Counter64 where required', '-  Added Modulation Mode Change counters\n                    -  Radio Link state enum change\n                    -  Snmpv3 control removed till later release', '-  SyncE configuration moved from sub10EthernetMgmt to sub10UnitMgmt\n                    -  TxPower now TxPowerLimit and change in enumerations\n                    -  Added textual conventions Sub10RadioDataRate, Sub10TxPowerLimit,\n                    -  Sub10MWUType, Sub10AlarmOperation, Sub10AlarmState.\n                    -  Sub10DateTime\n                    -  Notication Alarms now restricted to three types sub10UnitAlarm, sub10EthernetAlarm and sub10RadioAlarm.\n                    -  sub10UnitLclType and sub10UnitLclId changed to sub10UnitLclUnitType and sub10UnitLclUnitId\n                    -  Some DisplayString based objects now Octet String with defined sizes.\n                    -  sub10UnitLclTranceiverTemp and sub10RmtUnitTranceiverTemp removed\n                    -  sub10UnitLclActiveAlarmTable changed to sub10UnitLclAlarmStateTable and all table objects changed name.\n                    -  sub10UnitLclAlarmStateTable simplified to contain only alarm state and alarm time and\n                    -  the sub10UnitLclAlarmStateIndex maps to the same index in the sub10UnitMgmtAlarmTable.\n                    -  Added sub10UnitLclRadioDataRate, sub10UnitLclMWUType.\n                    -  Names of sub10RmtUnitxxx changed to sub10UnitRmtxxx to be consistent with local equivelents.\n                    -  sub10UnitMgmtAlarmTable upgraded to support flexibale configurable monitoring interval, raise and clear\n                    -  operational behaviour, raise and clear intervals. The sub10UnitMgmtAlarmIndex now maps to\n                    -  sub10UnitLclAlarmStateIndex for indication of the state of each configurable alarm.\n                    -  sub10EthMgmtVlan configuration upgrade. Added sub10EthMgmtVlanFiltering, sub10EthMgmtVlanDefaultEnabled,\n                    -  sub10EthMgmtVlanDefaultId, sub10EthMgmtVlanDefaultPriority, sub10EthMgmtVlanDefaultDEI, sub10EthMgmtVlanIngressAction,\n                    -  sub10EthMgmtVlanEgressAction (both currently fixed) and sub10EthMgmtVlanAllowedTable.\n                    -  Removed sub10EthMgmtVlanTrafficAllow, sub10EthMgmtVlanNumber and sub10EthMgmtVlanTable.\n                    -  Added sub10EthStats15mHistTime, sub10RadioStats1mHistTime, sub10RAdioStats15mHistTime, sub10RAdioStats1dHistTime.\n                    -  Added sub10RadioLclAlignmentMode, sub10RadioLclDataRate, sub10RadioLclMWUType, sub10RadioRmtAlignmentMode.\n                    -  sub10RadioMgmtTxPower changed to sub10RadioMgmtTxPowerLimit.\n                    -  Added sub10RadioMgmtTxRxFreq.\n                    -  sub10RadioMgmtAtpc changed to sub10RadioMgmtAPCMode to support Auto Power Control.\n                    -  Added sub10RadioMgmtMWUChannelWidth\n                    -  Added sub10RadioMgmtStats1dPersist.\n                    -  Removed sub10RadioMgmtOperationMode now sub10RadioLclAlignmentMode.\n                    -  Removed sub10RadioStatsGdot826HistoryTable and moved ES, SES, BE and UAS counters into\n                    -  sub10RadioStats1mHistTable, sub10RadioStats1dHistTable and sub10RadioStats1dHistTable.\n                    -  Added sub10UnitMgmtActions for commit / rollback based configuration\n                    -  Firmware Objects\n                    -  Stats status table', 'The MIB module for all Sub10 Systems Radio products.\n                    Some of the objects within this MIB may only be\n                    supported by certain types of product. In these\n                    cases the object description will state product compliance.\n                    \n                    Note : This MIB does not include the v320-liberator MIB\n                    for the Sub10 Systems v320 legacy product. Please refer\n                    to the liberator-v320 MIB. Some products may\n                    be backwards compatible and provide support for the\n                    liberator-v320 MIB.\n                    \n                    Copyright (C) Sub10Systems (2014).',))
if mibBuilder.loadTexts: sub10Systems.setLastUpdated('201506030000Z')
if mibBuilder.loadTexts: sub10Systems.setOrganization('Sub10 Systems Ltd')
if mibBuilder.loadTexts: sub10Systems.setContactInfo('support@sub10systems.com')
if mibBuilder.loadTexts: sub10Systems.setDescription('Sub10 Systems MIB')
class Sub10EthInterfaceIndex(TextualConvention, Unsigned32):
    description = 'A unique value, greater than zero, for each ethernet type interface.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 2)

class Sub10EntryStatus(TextualConvention, Integer32):
    description = 'A general configuration type to indicate if a table row is in use or not in use.\n                    This differs from RowStatus which is a settable object used to create the existence\n                    of a row in a configurable table. Sub10EntryStatus is intended to be read-only\n                    and is set internally by the Agent when a table row is populated with valid data.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("entryInUse", 1), ("entryNotInUse", 2))

class Sub10State(TextualConvention, Integer32):
    description = 'A general configuration type to indicate enabled or disabled.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("stateDisabled", 0), ("stateEnabled", 1))

class Sub10UnitType(TextualConvention, Integer32):
    description = 'Sub10Systems unit type.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))
    namedValues = NamedValues(("baseband100A", 0), ("baseband100B", 1), ("baseband1000A", 2), ("baseband1000B", 3), ("v100ROWA", 4), ("v100ROWB", 5), ("v100FCCA", 6), ("v100FCCB", 7), ("v1000ROWA", 8), ("v1000ROWB", 9), ("v1000FCCA", 10), ("v1000FCCB2", 11), ("e1000ROWA", 12), ("e1000ROWB", 13), ("e1000FCCA", 14), ("e1000FCCB", 15))

class Sub10TerminalType(TextualConvention, Integer32):
    description = "Sub10Systems terminal type. A link must\n                    have an 'A' end terminal and a 'B' end terminal."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("terminalA", 0), ("terminalB", 1))

class Sub10Availability(TextualConvention, Integer32):
    description = 'Availability selects RSSI thresholds for modulation changes.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("availabilityHigh", 0), ("availabilityMedium", 1), ("availabilityLow", 2))

class Sub10AlignmentMode(TextualConvention, Integer32):
    description = 'Alignment mode is modeAlignment(1) if the alignment / reset cap\n                    has been removed for > 5sec otherwise modeNormal(0). The alignment\n                    mode is managed using sub10RadioMgmtAlignmentMode.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("modeNormal", 0), ("modeAlignment", 1))

class Sub10AlignmentModeLock(TextualConvention, Integer32):
    description = 'If locked, the unit will not go into alignment mode when the\n                    alignment cap is removed.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("modeUnlocked", 0), ("modeLocked", 1))

class Sub10OperStatus(TextualConvention, Integer32):
    description = 'The status of the ethernet link, this maps directly to ifOperStatus.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("opStatusUp", 1), ("opStatusDown", 2), ("opStatusTesting", 3), ("opStatusUnknown", 4), ("opStatusDormant", 5), ("opStatusNotPresent", 6), ("opStatusLowerLayerDown", 7))

class Sub10Duplex(TextualConvention, Integer32):
    description = 'The operation of a duplex link link'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("halfDuplex", 1), ("fullDuplex", 2), ("unknownDuplex", 3))

class Sub10MDIType(TextualConvention, Integer32):
    description = "The operation of a duplex link link.\n                    The setting of 'auto' is used only\n                    for configuration puprposes."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("mdi", 1), ("mdix", 2), ("mdiUnknown", 3))

class Sub10RadioLinkState(TextualConvention, Integer32):
    description = 'The status of the radio link'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("radioLinkStateDown", 0), ("radioLinkStateUp", 1), ("radioLinkStateUnknown", 2))

class Sub10AlarmName(TextualConvention, OctetString):
    description = 'Name convention for all notification types.'
    status = 'current'
    displayHint = '32a'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 32)

class Sub10MacAddress(TextualConvention, OctetString):
    description = 'MAC Address in readable string format.'
    status = 'current'
    displayHint = '17a'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(11, 17)

class Sub10AlarmState(TextualConvention, Integer32):
    description = 'Alarm state.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("cleared", 1), ("raised", 2), ("stateUnknown", 3))

class Sub10DateTime(TextualConvention, OctetString):
    description = 'The generic Sub10 format for a date time string.\n                    Format is YYYY-MM-DD HH:MM:SS e.g. 2014-05-26 13:30:15'
    status = 'current'
    displayHint = '19a'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(19, 19)
    fixedLength = 19

class Sub10AlarmIndex(TextualConvention, Unsigned32):
    description = 'The MIB index used to define the range of indexing and size of the Alarm tables\n                    sub10UnitLclAlarmStateTable and sub10UnitMgmtAlarmTable.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 128)

class Sub10MeasuredObject(TextualConvention, Integer32):
    description = 'A MIB object that may be measured by Alarm Management or any other sub-system.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 140, 141, 142, 143, 144, 145, 146, 147, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335))
    namedValues = NamedValues(("sub10UnitLclMWUTemperature", 1), ("sub10RadioLclRxPower", 2), ("sub10RadioLclVectErr", 3), ("sub10RadioLclLnkLoss", 4), ("sub10RadioLclTxPower", 5), ("sub10RadioMgmtTxRxFreq", 6), ("sub10RadioMgmtAPCMode", 7), ("sub10RadioMgmtModulationMode", 8), ("sub10RadioMgmtAlignmentMode", 9), ("sub10RadioLclLinkStatus", 10), ("sub10RadioLclRxModulationMode", 11), ("sub10RadioLclTxModulationMode", 12), ("sub10RadioStatsCurrTxPowerMin", 20), ("sub10RadioStatsCurrTxPowerMax", 21), ("sub10RadioStatsCurrTxPowerAvg", 22), ("sub10RadioStatsCurrRxPowerMin", 23), ("sub10RadioStatsCurrRxPowerMax", 24), ("sub10RadioStatsCurrRxPowerAvg", 25), ("sub10RadioStatsCurrVectErrMin", 26), ("sub10RadioStatsCurrVectErrMax", 27), ("sub10RadioStatsCurrVectErrAvg", 28), ("sub10RadioStatsCurrLnkLossMin", 29), ("sub10RadioStatsCurrLnkLossMax", 30), ("sub10RadioStatsCurrLnkLossAvg", 31), ("sub10RadioStatsCurrMWUTempMin", 32), ("sub10RadioStatsCurrMWUTempMax", 33), ("sub10RadioStatsCurrMWUTempAvg", 34), ("sub10RadioStatsCurrAFERMin", 35), ("sub10RadioStatsCurrAFERMax", 36), ("sub10RadioStatsCurrAFERAvg", 37), ("sub10RadioStats1mHistTxPowerMin", 50), ("sub10RadioStats1mHistTxPowerMax", 51), ("sub10RadioStats1mHistTxPowerAvg", 52), ("sub10RadioStats1mHistRxPowerMin", 53), ("sub10RadioStats1mHistRxPowerMax", 54), ("sub10RadioStats1mHistRxPowerAvg", 55), ("sub10RadioStats1mHistVectErrMin", 56), ("sub10RadioStats1mHistVectErrMax", 57), ("sub10RadioStats1mHistVectErrAvg", 58), ("sub10RadioStats1mHistLnkLossMin", 59), ("sub10RadioStats1mHistLnkLossMax", 60), ("sub10RadioStats1mHistLnkLossAvg", 61), ("sub10RadioStats1mHistMWUTempMin", 62), ("sub10RadioStats1mHistMWUTempMax", 63), ("sub10RadioStats1mHistMWUTempAvg", 64), ("sub10RadioStats1mHistAFERMin", 65), ("sub10RadioStats1mHistAFERMax", 66), ("sub10RadioStats1mHistAFERAvg", 67), ("sub10RadioStats1mHistRxPkts", 68), ("sub10RadioStats1mHistTxPkts", 69), ("sub10RadioStats1mHistRxMgmtPkts", 70), ("sub10RadioStats1mHistTxMgmtPkts", 71), ("sub10RadioStats1mHistRxBadFrms", 72), ("sub10RadioStats1mHistQPSKTo8PSK", 73), ("sub10RadioStats1mHist8PSKToQPSK", 74), ("sub10RadioStats1mHistRxQPSK", 75), ("sub10RadioStats1mHistRx8PSK", 76), ("sub10RadioStats1mHistTxQPSK", 77), ("sub10RadioStats1mHistTx8PSK", 78), ("sub10RadioStats15mHistTxPowerMin", 90), ("sub10RadioStats15mHistTxPowerMax", 91), ("sub10RadioStats15mHistTxPowerAvg", 92), ("sub10RadioStats15mHistRxPowerMin", 93), ("sub10RadioStats15mHistRxPowerMax", 94), ("sub10RadioStats15mHistRxPowerAvg", 95), ("sub10RadioStats15mHistVectErrMin", 96), ("sub10RadioStats15mHistVectErrMax", 97), ("sub10RadioStats15mHistVectErrAvg", 98), ("sub10RadioStats15mHistLnkLossMin", 99), ("sub10RadioStats15mHistLnkLossMax", 100), ("sub10RadioStats15mHistLnkLossAvg", 101), ("sub10RadioStats15mHistMWUTempMin", 102), ("sub10RadioStats15mHistMWUTempMax", 103), ("sub10RadioStats15mHistMWUTempAvg", 104), ("sub10RadioStats15mHistAFERMin", 105), ("sub10RadioStats15mHistAFERMax", 106), ("sub10RadioStats15mHistAFERAvg", 107), ("sub10RadioStats15mHistRxPkts", 108), ("sub10RadioStats15mHistTxPkts", 109), ("sub10RadioStats15mHistRxMgmtPkts", 110), ("sub10RadioStats15mHistTxMgmtPkts", 111), ("sub10RadioStats15mHistRxBadFrms", 112), ("sub10RadioStats15mHistQPSKTo8PSK", 113), ("sub10RadioStats15mHist8PSKToQPSK", 114), ("sub10RadioStats15mHistRxQPSK", 115), ("sub10RadioStats15mHistRx8PSK", 116), ("sub10RadioStats15mHistTxQPSK", 117), ("sub10RadioStats15mHistTx8PSK", 118), ("sub10EthStatsCurrRxMbps", 140), ("sub10EthStatsCurrTxMbps", 141), ("sub10EthStatsCurrRxMbpsMin", 142), ("sub10EthStatsCurrRxMbpsMax", 143), ("sub10EthStatsCurrRxMbpsAvg", 144), ("sub10EthStatsCurrTxMbpsMin", 145), ("sub10EthStatsCurrTxMbpsMax", 146), ("sub10EthStatsCurrTxMbpsAvg", 147), ("sub10EthStats1mHistRxOctets", 160), ("sub10EthStats1mHistRxGoodFrms", 161), ("sub10EthStats1mHistRxBcastFrms", 162), ("sub10EthStats1mHistRxMcastFrms", 163), ("sub10EthStats1mHistRxPauseFrms", 164), ("sub10EthStats1mHistRxCRCErrs", 165), ("sub10EthStats1mHistRxAlignErrs", 166), ("sub10EthStats1mHistRxOversized", 167), ("sub10EthStats1mHistRxJabberFrms", 168), ("sub10EthStats1mHistRxUndersized", 169), ("sub10EthStats1mHistRxFragments", 170), ("sub10EthStats1mHistRxSOFOvrns", 171), ("sub10EthStats1mHistTxOctets", 172), ("sub10EthStats1mHistTxGoodFrms", 173), ("sub10EthStats1mHistTxBcastFrms", 174), ("sub10EthStats1mHistTxMcastFrms", 175), ("sub10EthStats1mHistTxPauseFrms", 176), ("sub10EthStats1mHistTxDeferred", 177), ("sub10EthStats1mHistTxCollsn", 178), ("sub10EthStats1mHistTxSnglCollsn", 179), ("sub10EthStats1mHistTxMlplCollsn", 180), ("sub10EthStats1mHistTxExsvCollsn", 181), ("sub10EthStats1mHistTxLtCollsn", 182), ("sub10EthStats1mHistTxCSenseErrs", 183), ("sub10EthStats1mHistPkts64Octets", 184), ("sub10EthStats1mHistPkts65T127", 185), ("sub10EthStats1mHistPkts128T255", 186), ("sub10EthStats1mHistPkts256T511", 187), ("sub10EthStats1mHistPkts512T1023", 188), ("sub10EthStats1mHistPkts1024TMax", 189), ("sub10EthStats1mHistRxMbpsMin", 190), ("sub10EthStats1mHistRxMbpsMax", 191), ("sub10EthStats1mHistRxMbpsAvg", 192), ("sub10EthStats1mHistTxMbpsMin", 193), ("sub10EthStats1mHistTxMbpsMax", 194), ("sub10EthStats1mHistTxMbpsAvg", 195), ("sub10EthStats15mHistRxOctets", 210), ("sub10EthStats15mHistRxGoodFrms", 211), ("sub10EthStats15mHistRxBcastFrms", 212), ("sub10EthStats15mHistRxMcastFrms", 213), ("sub10EthStats15mHistRxPauseFrms", 214), ("sub10EthStats15mHistRxCRCErrs", 215), ("sub10EthStats15mHistRxAlignErrs", 216), ("sub10EthStats15mHistRxOversized", 217), ("sub10EthStats15mHistRxJabberFrms", 218), ("sub10EthStats15mHistRxUndersized", 219), ("sub10EthStats15mHistRxFragments", 220), ("sub10EthStats15mHistRxSOFOvrns", 221), ("sub10EthStats15mHistTxOctets", 222), ("sub10EthStats15mHistTxGoodFrms", 223), ("sub10EthStats15mHistTxBcastFrms", 224), ("sub10EthStats15mHistTxMcastFrms", 225), ("sub10EthStats15mHistTxPauseFrms", 226), ("sub10EthStats15mHistTxDeferred", 227), ("sub10EthStats15mHistTxCollsn", 228), ("sub10EthStats15mHistTxSnglCollsn", 229), ("sub10EthStats15mHistTxMlplCollsn", 230), ("sub10EthStats15mHistTxExsvCollsn", 231), ("sub10EthStats15mHistTxLtCollsn", 232), ("sub10EthStats15mHistTxCSenseErrs", 233), ("sub10EthStats15mHistPkts64Octets", 234), ("sub10EthStats15mHistPkts65T127", 235), ("sub10EthStats15mHistPkts128T255", 236), ("sub10EthStats15mHistPkts256T511", 237), ("sub10EthStats15mHistPkts512T1023", 238), ("sub10EthStats15mHistPkts1024TMax", 239), ("sub10EthStats15mHistRxMbpsMin", 240), ("sub10EthStats15mHistRxMbpsMax", 241), ("sub10EthStats15mHistRxMbpsAvg", 242), ("sub10EthStats15mHistTxMbpsMin", 243), ("sub10EthStats15mHistTxMbpsMax", 244), ("sub10EthStats15mHistTxMbpsAvg", 245), ("sub10RadioStats1dHistTxPowerMin", 260), ("sub10RadioStats1dHistTxPowerMax", 261), ("sub10RadioStats1dHistTxPowerAvg", 262), ("sub10RadioStats1dHistRxPowerMin", 263), ("sub10RadioStats1dHistRxPowerMax", 264), ("sub10RadioStats1dHistRxPowerAvg", 265), ("sub10RadioStats1dHistVectErrMin", 266), ("sub10RadioStats1dHistVectErrMax", 267), ("sub10RadioStats1dHistVectErrAvg", 268), ("sub10RadioStats1dHistLnkLossMin", 269), ("sub10RadioStats1dHistLnkLossMax", 270), ("sub10RadioStats1dHistLnkLossAvg", 271), ("sub10RadioStats1dHistMWUTempMin", 272), ("sub10RadioStats1dHistMWUTempMax", 273), ("sub10RadioStats1dHistMWUTempAvg", 274), ("sub10RadioStats1dHistAFERMin", 275), ("sub10RadioStats1dHistAFERMax", 276), ("sub10RadioStats1dHistAFERAvg", 277), ("sub10RadioStats1dHistRxPkts", 278), ("sub10RadioStats1dHistTxPkts", 279), ("sub10RadioStats1dHistRxMgmtPkts", 280), ("sub10RadioStats1dHistTxMgmtPkts", 281), ("sub10RadioStats1dHistRxBadFrms", 282), ("sub10RadioStats1dHistQPSKTo8PSK", 283), ("sub10RadioStats1dHist8PSKToQPSK", 284), ("sub10RadioStats1dHistRxQPSK", 285), ("sub10RadioStats1dHistRx8PSK", 286), ("sub10RadioStats1dHistTxQPSK", 287), ("sub10RadioStats1dHistTx8PSK", 288), ("sub10EthStats1dHistRxOctets", 300), ("sub10EthStats1dHistRxGoodFrms", 301), ("sub10EthStats1dHistRxBcastFrms", 302), ("sub10EthStats1dHistRxMcastFrms", 303), ("sub10EthStats1dHistRxPauseFrms", 304), ("sub10EthStats1dHistRxCRCErrs", 305), ("sub10EthStats1dHistRxAlignErrs", 306), ("sub10EthStats1dHistRxOversized", 307), ("sub10EthStats1dHistRxJabberFrms", 308), ("sub10EthStats1dHistRxUndersized", 309), ("sub10EthStats1dHistRxFragments", 310), ("sub10EthStats1dHistRxSOFOvrns", 311), ("sub10EthStats1dHistTxOctets", 312), ("sub10EthStats1dHistTxGoodFrms", 313), ("sub10EthStats1dHistTxBcastFrms", 314), ("sub10EthStats1dHistTxMcastFrms", 315), ("sub10EthStats1dHistTxPauseFrms", 316), ("sub10EthStats1dHistTxDeferred", 317), ("sub10EthStats1dHistTxCollsn", 318), ("sub10EthStats1dHistTxSnglCollsn", 319), ("sub10EthStats1dHistTxMlplCollsn", 320), ("sub10EthStats1dHistTxExsvCollsn", 321), ("sub10EthStats1dHistTxLtCollsn", 322), ("sub10EthStats1dHistTxCSenseErrs", 323), ("sub10EthStats1dHistPkts64Octets", 324), ("sub10EthStats1dHistPkts65T127", 325), ("sub10EthStats1dHistPkts128T255", 326), ("sub10EthStats1dHistPkts256T511", 327), ("sub10EthStats1dHistPkts512T1023", 328), ("sub10EthStats1dHistPkts1024TMax", 329), ("sub10EthStats1dHistRxMbpsMin", 330), ("sub10EthStats1dHistRxMbpsMax", 331), ("sub10EthStats1dHistRxMbpsAvg", 332), ("sub10EthStats1dHistTxMbpsMin", 333), ("sub10EthStats1dHistTxMbpsMax", 334), ("sub10EthStats1dHistTxMbpsAvg", 335))

class Sub10AlarmSeverity(TextualConvention, Integer32):
    description = 'Severity for notifications of type alarm'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("critical", 1), ("major", 2), ("minor", 3), ("warning", 4))

class Sub10AlarmOperation(TextualConvention, Integer32):
    description = 'The operation that is used to compare a measured value with\n                    a configured alarm threshold which controls the raising\n                    and clearing of alarms.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("lessThan", 1), ("greaterThan", 2), ("lessThanOrEqual", 3), ("greaterThanOrEqual", 4), ("equal", 5), ("notEqual", 6))

class Sub10AlarmType(TextualConvention, Integer32):
    description = 'The type of the alarm and defines the type of notification (trap) used\n                    to inform management entities.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("sub10UnitAlarm", 1), ("sub10EthernetAlarm", 2), ("sub10RadioAlarm", 3))

class Sub10NTPSyncStatus(TextualConvention, Integer32):
    description = 'The indication that the systems clock is synchronised with the\n                    NTP server.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("ntpOutOfSync", 0), ("ntpInSync", 1))

class Sub10VlanId(TextualConvention, Unsigned32):
    description = 'A VLAN Id (12 bits in the TCF part of an ethernet frame).'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 4095)

class Sub10VlanTagAction(TextualConvention, Integer32):
    description = 'Used in Vlan Mgmt to support Vlan tag manipulaton on the Ethernet interface.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("tagActionNone", 0), ("untag", 1), ("tag", 2), ("drop", 3))

class Sub10VlanPriority(TextualConvention, Unsigned32):
    description = 'A VLAN Priority or PCP bits (3 bits in the TCF\n                    part of an ethernet frame). The priority PCP\n                    bits are based on 802.1p where 0 is the lowest\n                    and 7 is the highest.\n                    \n                    Priority  Acronym  Traffic Types\n                    0       BK      Background\n                    1       BE      Best Effort\n                    2       EE      Excellent Effort\n                    3       CA      Critical Applications\n                    4       VI      Video, 100 ms latency and jitter\n                    5       VO      Voice, 10 ms latency and jitter\n                    6       IC      Internetwork Control\n                    7       NC      Network Control.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 7)

class Sub10QoSQueue(TextualConvention, Unsigned32):
    description = 'Identifies the QoS queue number for up to 8 queues.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 7)

class Sub10TxPowerLimit(TextualConvention, Integer32):
    description = 'The settings for Transmit Power limit on the Radio interface.\n                    A value of txPowerLimitNone means the TxPower is not limited\n                    by the radio.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("txPowerLimitNone", 0), ("txPowerLimitMinus3", 1), ("txPowerLimitMinus6", 2), ("txPowerLimitMinus9", 3), ("txPowerLimitMinus12", 4), ("txPowerLimitMinus15", 5))

class Sub10RadioDataRate(TextualConvention, Integer32):
    description = 'The maximum data rate of the Airside interface.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("radioDataRate1000", 0), ("radioDataRate700", 1), ("radioDataRate500", 2), ("radioDataRate300", 3), ("radioDataRate100", 4))

class Sub10UserGroup(TextualConvention, Integer32):
    description = 'The user group types. A user is assigned to a group where each group\n                    has specific access privileges.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("operation", 1), ("administration", 2), ("maintenance", 3), ("engineer", 4))

class Sub10Snmpv3SecurityLevel(TextualConvention, Integer32):
    description = 'The SNMPv3 security level assigned to a group of SNMPv3 users.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("noAuthNoPriv", 1), ("authNoPriv", 2), ("authPriv", 3))

class Sub10Snmpv3AuthProtocol(TextualConvention, Integer32):
    description = 'The SNMPv3 authentication protocol assigned to a group of SNMPv3 users.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("noAuth", 1), ("md5", 2), ("sha1", 3))

class Sub10Snmpv3PrivProtocol(TextualConvention, Integer32):
    description = 'The SNMPv3 privacy protocol assigned to a group of SNMPv3 users.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("noPriv", 1), ("des", 2), ("aes", 3))

class Sub10MWUType(TextualConvention, Integer32):
    description = 'The type of MWU.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("mwuTypeNone", 0), ("mwuTypeVBand", 1), ("mwuTypeEBand", 2))

class Sub10FirmwareBank(TextualConvention, Unsigned32):
    description = 'Identifies the firmware bank number.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 3)

class Sub10StatsGroup(TextualConvention, Integer32):
    description = 'The type of stats.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))
    namedValues = NamedValues(("statsGroupNone", 1), ("statsGroupAll", 2), ("statsGroupRadioCurr", 3), ("statsGroupRadio1s", 4), ("statsGroupRadio1m", 5), ("statsGroupRadio15m", 6), ("statsGroupRadio1d", 7), ("statsGroupEthernetCurr", 8), ("statsGroupEthernet1s", 9), ("statsGroupEthernet1m", 10), ("statsGroupEthernet15m", 11), ("statsGroupEthernet1d", 12), ("statsGroupRadioCurr60s", 13))

class Sub10ThroughputMbps(TextualConvention, OctetString):
    description = 'Throughput in Mbps (MegaBits per second).'
    status = 'current'
    displayHint = '32a'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 32)

class Sub10ModulationMode(TextualConvention, Integer32):
    description = 'Radio Modulation Mode.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("modebpsk", 0), ("modeqpsk", 1), ("mode8psk", 2))

sub10Notifications = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 0))
sub10Unit = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 3))
sub10UnitStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 3, 1))
sub10UnitLocalStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 3, 1, 1))
sub10UnitRemoteStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 3, 1, 2))
sub10UnitMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 3, 2))
sub10UnitMgmtSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 3, 2, 1))
sub10UnitMgmtIp = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 3, 2, 2))
sub10UnitMgmtVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 3, 2, 3))
sub10UnitMgmtUsers = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 3, 2, 4))
sub10UnitMgmtTime = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 3, 2, 5))
sub10UnitMgmtAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 3, 2, 6))
sub10UnitMgmtSnmp = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 3, 2, 7))
sub10UnitMgmtSmtp = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 3, 2, 8))
sub10UnitMgmtFirmware = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 3, 2, 9))
sub10UnitMgmtDNS = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 3, 2, 10))
sub10UnitMgmtEncryption = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 3, 2, 11))
sub10UnitMgmtLicense = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 3, 2, 12))
sub10UnitMgmtSyncE = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 3, 2, 13))
sub10UnitMgmtActions = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 3, 2, 20))
sub10Ethernet = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 4))
sub10EthernetStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 4, 1))
sub10EthernetLocalStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 4, 1, 1))
sub10EthernetRemoteStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 4, 1, 2))
sub10EthernetMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 4, 2))
sub10EthMgmtPhy = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 4, 2, 1))
sub10EthMgmtVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 4, 2, 2))
sub10EthMgmtQoS = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 4, 2, 3))
sub10EthMgmtStats = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 4, 2, 4))
sub10EthernetStats = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 4, 3))
sub10EthernetStatsCurrent = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 4, 3, 2))
sub10EthernetStatsHistory = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3))
sub10EthernetStats15mHistory = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 1))
sub10EthStats1dHistory = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 2))
sub10Radio = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 5))
sub10RadioStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 5, 1))
sub10RadioLocalStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 5, 1, 1))
sub10RadioRemoteStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 5, 1, 2))
sub10RadioMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 5, 2))
sub10RadioMgmtStats = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 5, 2, 9))
sub10RadioStats = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 5, 3))
sub10RadioStatsCurrent = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 5, 3, 2))
sub10RadioStatsHistory = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3))
sub10RadioStats1mHistory = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 1))
sub10RadioStats15mHistory = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 2))
sub10RadioStats1dHistory = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 3))
sub10MIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 20))
sub10MIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 20, 1))
sub10MIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 20, 2))
sub10UnitAlarm = NotificationType((1, 3, 6, 1, 4, 1, 39003, 0, 1)).setObjects(("SUB10SYSTEMS-MIB", "sub10UnitMgmtAlarmName"), ("SUB10SYSTEMS-MIB", "sub10UnitLclAlarmState"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtAlarmSeverity"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtAlarmMeasObject"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtAlarmMeasObjectVal"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtAlarmRaiseOper"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtAlarmRaiseThresh"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtAlarmClearOper"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtAlarmClearThresh"))
if mibBuilder.loadTexts: sub10UnitAlarm.setStatus('current')
if mibBuilder.loadTexts: sub10UnitAlarm.setDescription('A measured object relating the Unit subsystem has been raised or cleared according\n                    to the configured thresholds. For alarm configuration see sub10UnitMgmtAlarmTable.')
sub10EthernetAlarm = NotificationType((1, 3, 6, 1, 4, 1, 39003, 0, 2)).setObjects(("SUB10SYSTEMS-MIB", "sub10UnitMgmtAlarmName"), ("SUB10SYSTEMS-MIB", "sub10UnitLclAlarmState"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtAlarmSeverity"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtAlarmMeasObject"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtAlarmMeasObjectVal"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtAlarmRaiseOper"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtAlarmRaiseThresh"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtAlarmClearOper"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtAlarmClearThresh"))
if mibBuilder.loadTexts: sub10EthernetAlarm.setStatus('current')
if mibBuilder.loadTexts: sub10EthernetAlarm.setDescription('A measured object relating the Ethernet subsystem has been raised or cleared according\n                    to the configured thresholds. For alarm configuration see sub10UnitMgmtAlarmTable.')
sub10RadioAlarm = NotificationType((1, 3, 6, 1, 4, 1, 39003, 0, 3)).setObjects(("SUB10SYSTEMS-MIB", "sub10UnitMgmtAlarmName"), ("SUB10SYSTEMS-MIB", "sub10UnitLclAlarmState"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtAlarmSeverity"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtAlarmMeasObject"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtAlarmMeasObjectVal"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtAlarmRaiseOper"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtAlarmRaiseThresh"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtAlarmClearOper"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtAlarmClearThresh"))
if mibBuilder.loadTexts: sub10RadioAlarm.setStatus('current')
if mibBuilder.loadTexts: sub10RadioAlarm.setDescription('A measured object relating the Radio subsystem has been raised or cleared according\n                    to the configured thresholds. For alarm configuration see sub10UnitMgmtAlarmTable.')
sub10UnitLclTime = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 1, 1, 1), Sub10DateTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10UnitLclTime.setStatus('current')
if mibBuilder.loadTexts: sub10UnitLclTime.setDescription('The local system time as a display string in the format:-\n                    YYYY-MM-DD,HH:MM:SS e.g. 2014-5-26,13:30:15')
sub10UnitLclUnitType = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 1, 1, 2), Sub10UnitType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10UnitLclUnitType.setStatus('current')
if mibBuilder.loadTexts: sub10UnitLclUnitType.setDescription('Uniquely identifies the local unit product type')
sub10UnitLclDescription = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10UnitLclDescription.setStatus('current')
if mibBuilder.loadTexts: sub10UnitLclDescription.setDescription('The description of the local unit.\n                    This is synonymous with MIB-II sysDescr.')
sub10UnitLclHWSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 18))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10UnitLclHWSerialNumber.setStatus('current')
if mibBuilder.loadTexts: sub10UnitLclHWSerialNumber.setDescription('The hardware serial number of the Local Unit.\n                    This also identifies whether the unit is a V-band or E-band product.\n                    See sub10UnitLclMWUType.')
sub10UnitLclTerminalName = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10UnitLclTerminalName.setStatus('current')
if mibBuilder.loadTexts: sub10UnitLclTerminalName.setDescription('The administratively assigned name for the unit.\n                    This is synonymous with MIB-II sysName and can be\n                    administratively set via either sysName or sub10UnitMgmtTerminalName.')
sub10UnitLclTerminalType = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 1, 1, 6), Sub10TerminalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10UnitLclTerminalType.setStatus('current')
if mibBuilder.loadTexts: sub10UnitLclTerminalType.setDescription('Uniquely identifies the local terminal type A or B.')
sub10UnitLclLinkName = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10UnitLclLinkName.setStatus('current')
if mibBuilder.loadTexts: sub10UnitLclLinkName.setDescription('The administratively assigned name for the radio link between\n                    the local and remote units. This generally identifies geographically\n                    the two ends or a radio link within a site or location.\n                    This is synonymous with MIB-II sysLocation and can be\n                    administratively set via either sysLocation or sub10UnitMgmtLinkName.')
sub10UnitLclLinkId = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 1, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10UnitLclLinkId.setStatus('current')
if mibBuilder.loadTexts: sub10UnitLclLinkId.setDescription('The administratively assigned identifier for the radio link between\n                    the local and remote units. The LinkId must be the same value on\n                    both local and remote units.')
sub10UnitLclSiteName = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10UnitLclSiteName.setStatus('current')
if mibBuilder.loadTexts: sub10UnitLclSiteName.setDescription('The administratively assigned physical location of the local unit.')
sub10UnitLclFirmwareLoadedBank = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 1, 1, 10), Sub10FirmwareBank()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10UnitLclFirmwareLoadedBank.setStatus('current')
if mibBuilder.loadTexts: sub10UnitLclFirmwareLoadedBank.setDescription('Currently loaded bank. The firmware version running in this bank is\n                    defined by sub10UnitLclFirmwareVersion.')
sub10UnitLclFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 1, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10UnitLclFirmwareVersion.setStatus('current')
if mibBuilder.loadTexts: sub10UnitLclFirmwareVersion.setDescription('The firmware version currently running on the local unit.\n                    This is by definition the firmware loaded into the bank\n                    number defined in sub10UnitLclFirmwareLoadedBank.')
sub10UnitLclIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 1, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(7, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10UnitLclIpAddress.setStatus('current')
if mibBuilder.loadTexts: sub10UnitLclIpAddress.setDescription('The IP address of the local ethernet interface.')
sub10UnitLclMWUTemperature = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10UnitLclMWUTemperature.setStatus('current')
if mibBuilder.loadTexts: sub10UnitLclMWUTemperature.setDescription('The modem temperature on the local unit in degrees celsius.')
sub10UnitLclNTPSyncStatus = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 1, 1, 14), Sub10NTPSyncStatus().clone('ntpOutOfSync')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10UnitLclNTPSyncStatus.setStatus('current')
if mibBuilder.loadTexts: sub10UnitLclNTPSyncStatus.setDescription('The indication that the systems clock is synchronised with the\n                    NTP server.')
sub10UnitLclAlarmStateTable = MibTable((1, 3, 6, 1, 4, 1, 39003, 3, 1, 1, 15), )
if mibBuilder.loadTexts: sub10UnitLclAlarmStateTable.setStatus('current')
if mibBuilder.loadTexts: sub10UnitLclAlarmStateTable.setDescription("The table listing the each active alarm the local unit.\n                    An active alarm is where the alarm state is 'raised' at the\n                    specific severity level.\n                    \n                    The entries in the table correspond to the configured entries in\n                    sub10UnitMgmtAlarmTable.\n                    \n                    This table has a single entry per alarm where the index to the table is\n                    the same index as the associated Alarm configuration\n                    table sub10UnitMgmtAlarmTable.")
sub10UnitLclAlarmStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39003, 3, 1, 1, 15, 1), ).setIndexNames((0, "SUB10SYSTEMS-MIB", "sub10UnitLclAlarmStateIndex"))
if mibBuilder.loadTexts: sub10UnitLclAlarmStateEntry.setStatus('current')
if mibBuilder.loadTexts: sub10UnitLclAlarmStateEntry.setDescription('An entry (row) in the sub10UnitLclAlarmStateTable.')
sub10UnitLclAlarmStateIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 3, 1, 1, 15, 1, 1), Sub10AlarmIndex())
if mibBuilder.loadTexts: sub10UnitLclAlarmStateIndex.setStatus('current')
if mibBuilder.loadTexts: sub10UnitLclAlarmStateIndex.setDescription('The sub10UnitLclAlarmStateTable index.\n                    The index represents the same index as used in sub10UnitMgmtAlarmTable.\n                    The entries in the table correspond to the configured entries in\n                    sub10UnitMgmtAlarmTable.')
sub10UnitLclAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 3, 1, 1, 15, 1, 2), Sub10AlarmState().clone('stateUnknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10UnitLclAlarmState.setStatus('current')
if mibBuilder.loadTexts: sub10UnitLclAlarmState.setDescription('Internal object to indicate if this alarm is currently in the\n                    raised or cleared state.')
sub10UnitLclAlarmStateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 3, 1, 1, 15, 1, 3), Sub10DateTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10UnitLclAlarmStateTime.setStatus('current')
if mibBuilder.loadTexts: sub10UnitLclAlarmStateTime.setDescription('The local date and time when the last Alarm State\n                    transition occurred.\n                    \n                    This object facilitates retrieving all instances of\n                    alarms that have been raised or have changed state\n                    since a given point in time.\n                    \n                    Implementations MUST include the offset from UTC,\n                    if available.  Implementation in environments in which\n                    the UTC offset is not available is NOT RECOMMENDED.')
sub10UnitLclRadioDataRate = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 1, 1, 16), Sub10RadioDataRate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10UnitLclRadioDataRate.setStatus('current')
if mibBuilder.loadTexts: sub10UnitLclRadioDataRate.setDescription('The maximum data rate of the Airside interface. This has the same\n                    value as sub10RadioLclDataRate.')
sub10UnitLclMWUType = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 1, 1, 17), Sub10MWUType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10UnitLclMWUType.setStatus('current')
if mibBuilder.loadTexts: sub10UnitLclMWUType.setDescription('The local MWU type')
sub10UnitLclFPGAVersion = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 1, 1, 18), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10UnitLclFPGAVersion.setStatus('current')
if mibBuilder.loadTexts: sub10UnitLclFPGAVersion.setDescription('The FPGA Version.')
sub10UnitRmtUnitType = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 1, 2, 1), Sub10UnitType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10UnitRmtUnitType.setStatus('current')
if mibBuilder.loadTexts: sub10UnitRmtUnitType.setDescription('Uniquely identifies the remote unit product type')
sub10UnitRmtTime = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 1, 2, 2), Sub10DateTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10UnitRmtTime.setStatus('current')
if mibBuilder.loadTexts: sub10UnitRmtTime.setDescription('The remote unit local system time as a display string in the format:-\n                    YYYY-MM-DD,HH:MM:SS e.g. 2014-5-26,13:30:15')
sub10UnitRmtTerminalName = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 1, 2, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10UnitRmtTerminalName.setStatus('current')
if mibBuilder.loadTexts: sub10UnitRmtTerminalName.setDescription('The administratively assigned name for the remote unit.\n                    This is synonymous with MIB-II sysName.')
sub10UnitRmtTerminalType = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 1, 2, 4), Sub10TerminalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10UnitRmtTerminalType.setStatus('current')
if mibBuilder.loadTexts: sub10UnitRmtTerminalType.setDescription('Uniquely identifies the remote terminal type A or B.')
sub10UnitRmtLinkName = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 1, 2, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10UnitRmtLinkName.setStatus('current')
if mibBuilder.loadTexts: sub10UnitRmtLinkName.setDescription('The administratively assigned name on the remote unit for the radio link between\n                    the local and remote units. This generally identifies geographically\n                    the two ends or a radio link within a site or location.')
sub10UnitRmtLinkId = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 1, 2, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10UnitRmtLinkId.setStatus('current')
if mibBuilder.loadTexts: sub10UnitRmtLinkId.setDescription('The administratively assigned identifier on the remote unit for the radio link between\n                    the local and remote units. The LinkId must be the same value on\n                    both local and remote units.')
sub10UnitRmtHWSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 1, 2, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 18))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10UnitRmtHWSerialNumber.setStatus('current')
if mibBuilder.loadTexts: sub10UnitRmtHWSerialNumber.setDescription('The hardware serial number of the Remote Unit.\n                    This also identifies whether the unit is a V-band or E-band product.')
sub10UnitRmtFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 1, 2, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10UnitRmtFirmwareVersion.setStatus('current')
if mibBuilder.loadTexts: sub10UnitRmtFirmwareVersion.setDescription('The firmware version currently running on the remote unit.\n                    This is by definition the firmware loaded into the bank\n                    currently used for boot. See sub10UnitMgmtFirmware.')
sub10UnitRmtIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 1, 2, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(7, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10UnitRmtIpAddress.setStatus('current')
if mibBuilder.loadTexts: sub10UnitRmtIpAddress.setDescription('The IP address of the remote ethernet interface.')
sub10UnitRmtMWUTemperature = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 1, 2, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10UnitRmtMWUTemperature.setStatus('current')
if mibBuilder.loadTexts: sub10UnitRmtMWUTemperature.setDescription('The modem temperature on the local unit in degrees celsius.')
sub10UnitMgmtTerminalName = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10UnitMgmtTerminalName.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtTerminalName.setDescription('The administratively assigned name for the unit.\n                    This is synonymous with MIB-II sysName and sub10UnitLocalStatus\n                    sub10UnitLclTerminalName.')
sub10UnitMgmtLinkName = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10UnitMgmtLinkName.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtLinkName.setDescription('The administratively assigned name for the radio link between\n                    the local and remote units. This generally identifies geographically\n                    the two ends or a radio link within a site or location. This is\n                    synonymous with sub10UnitLocalStatus sub10UnitLclLinkName')
sub10UnitMgmtLinkId = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10UnitMgmtLinkId.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtLinkId.setDescription('The administratively assigned identifier for the radio link between\n                    the local and remote units. The LinkId must be the same value on\n                    both local and remote units. This is synonymous with sub10UnitLocalStatus\n                    sub10UnitLclLinkId.\n                    \n                    IMPORTANT: This object is controlled by transaction management.\n                    Any changes to this object must be transactionally acknowledged\n                    following a successful set thus protecting against loss of\n                    communication with the unit. To acknowledge the transaction\n                    set the object sub10UnitMgmtTransaction to transactionCommit(2).')
sub10UnitMgmtSiteName = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 2, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10UnitMgmtSiteName.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtSiteName.setDescription('The administratively assigned physical location of the unit.\n                    This is synonymous with MIB-II sysLocation and sub10UnitLocalStatus\n                    sub10UnitLclSiteName.')
sub10UnitMgmtContactName = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 2, 1, 5), DisplayString().clone('support@sub10systems.com')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10UnitMgmtContactName.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtContactName.setDescription('The administratively assigned contact for support of the unit.\n                    This is synonymous with MIB-II sysContact and sub10UnitLocalStatus\n                    sub10UnitLclContactName.')
sub10UnitMgmtIpMode = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 2, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2), ("dhcp", 3))).clone('ipv4')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10UnitMgmtIpMode.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtIpMode.setDescription('IP Address configuration is either manually set as ipv4 or ipv6\n                    type addreessing or alternatively can be dynamically assigned\n                    automatically using the Dynamic Host Control Protocol (DHCP).\n                    \n                    IMPORTANT: This object is controlled by transaction management.\n                    Any changes to this object must be transactionally acknowledged\n                    following a successful set thus protecting against loss of\n                    communication with the unit. To acknowledge the transaction\n                    set the object sub10UnitMgmtTransaction to transactionCommit(2).')
sub10UnitMgmtIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 2, 2, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(7, 15)).clone('192.168.0.22')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10UnitMgmtIpAddress.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtIpAddress.setDescription('The administratively assigned IP Address for the management\n                    channel. This is reflected in the MIB-II ipAddrTable.\n                    \n                    IMPORTANT: This object is controlled by transaction management.\n                    Any changes to this object must be transactionally acknowledged\n                    following a successful set thus protecting against loss of\n                    communication with the unit. To acknowledge the transaction\n                    set the object sub10UnitMgmtTransaction to transactionCommit(2).')
sub10UnitMgmtIpSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 2, 2, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(7, 15)).clone('255.255.255.0')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10UnitMgmtIpSubnetMask.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtIpSubnetMask.setDescription('The administratively assigned sub-net mask for the management\n                    channel. This is reflected in the MIB-II ipAddrTable.\n                    \n                    IMPORTANT: This object is controlled by transaction management.\n                    Any changes to this object must be transactionally acknowledged\n                    following a successful set thus protecting against loss of\n                    communication with the unit. To acknowledge the transaction\n                    set the object sub10UnitMgmtTransaction to transactionCommit(2).')
sub10UnitMgmtIpDefGateway = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 2, 2, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(7, 15)).clone('192.168.0.1')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10UnitMgmtIpDefGateway.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtIpDefGateway.setDescription('The administratively assigned default gateway for the management\n                    channel.\n                    \n                    IMPORTANT: This object is controlled by transaction management.\n                    Any changes to this object must be transactionally acknowledged\n                    following a successful set thus protecting against loss of\n                    communication with the unit. To acknowledge the transaction\n                    set the object sub10UnitMgmtTransaction to transactionCommit(2).')
sub10UnitMgmtIpDHCP = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 2, 2, 5), Sub10State().clone('stateDisabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10UnitMgmtIpDHCP.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtIpDHCP.setDescription('Dynamic Host Control Protocol (DHCP) is enabled or disabled.\n                    IMPORTANT: This object is controlled by transaction management.\n                    Any changes to this object must be transactionally acknowledged\n                    following a successful set thus protecting against loss of\n                    communication with the unit. To acknowledge the transaction\n                    set the object sub10UnitMgmtTransaction to transactionCommit(2).')
sub10UnitMgmtVlanState = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 2, 3, 1), Sub10State().clone('stateDisabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10UnitMgmtVlanState.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtVlanState.setDescription('Enable VLAN for Management traffic.           .')
sub10UnitMgmtVlanId = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 2, 3, 2), Sub10VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10UnitMgmtVlanId.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtVlanId.setDescription('The VLAN Id used to carry management traffic. Only valid\n                    when the object is set to a non-zero value.\n                    \n                    IMPORTANT: This object is controlled by transaction management.\n                    Any changes to this object must be transactionally acknowledged\n                    following a successful set thus protecting against loss of\n                    communication with the unit. To acknowledge the transaction\n                    set the object sub10UnitMgmtTransaction to transactionCommit(2).')
sub10UnitMgmtVlanPriority = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 2, 3, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10UnitMgmtVlanPriority.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtVlanPriority.setDescription('The VLAN priority inserted into the ethernet frame for all\n                    management traffic. Only valid when the object\n                    sub10UnitMgmtVlanId is set to non zero.\n                    \n                    IMPORTANT: This object is controlled by transaction management.\n                    Any changes to this object must be transactionally acknowledged\n                    following a successful set thus protecting against loss of\n                    communication with the unit. To acknowledge the transaction\n                    set the object sub10UnitMgmtTransaction to transactionCommit(2).')
sub10UnitMgmtVlanDSCP = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 2, 3, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10UnitMgmtVlanDSCP.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtVlanDSCP.setDescription('The Differentiated Services Code Point priority inserted\n                    into the IP header of all management traffic.\n                    \n                    IMPORTANT: This object is controlled by transaction management.\n                    Any changes to this object must be transactionally acknowledged\n                    following a successful set thus protecting against loss of\n                    communication with the unit. To acknowledge the transaction\n                    set the object sub10UnitMgmtTransaction to transactionCommit(2).')
sub10UnitMgmtVlanDEI = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 2, 3, 5), Sub10State().clone('stateDisabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10UnitMgmtVlanDEI.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtVlanDEI.setDescription('Set the Drop Eligible Indicator inserted into the ethernet frame for all\n                    management traffic. Only valid when the object sub10UnitMgmtVlanId is set to non zero.\n                    The DEI bit is set into the tag control information (TCI)\n                    field of each management frame. The DEI is a 1 bit field immediately\n                    following the PCP bits (3 bit field)\n                    \n                    IMPORTANT: This object is controlled by transaction management.\n                    Any changes to this object must be transactionally acknowledged\n                    following a successful set thus protecting against loss of\n                    communication with the unit. To acknowledge the transaction\n                    set the object sub10UnitMgmtTransaction to transactionCommit(2).')
sub10UnitMgmtUsersNumber = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 2, 4, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10UnitMgmtUsersNumber.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtUsersNumber.setDescription('The number of valid sub10UnitMgmtUsersTable table entries present on this system.')
sub10UnitMgmtUserTable = MibTable((1, 3, 6, 1, 4, 1, 39003, 3, 2, 4, 2), )
if mibBuilder.loadTexts: sub10UnitMgmtUserTable.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtUserTable.setDescription("The table listing the users configured on the unit.\n                    The number of user entries is sub10UnitMgmtUsersNumber.\n                    \n                    This table is indexed by user name (sub10UnitMgmtUserName).\n                    Multiple entries with the same sub10UnitMgmtUserName are not possible.\n                    \n                    NB. As part of SNMPv3 support this table will be superceded by 'usmUserTable'.")
sub10UnitMgmtUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39003, 3, 2, 4, 2, 1), ).setIndexNames((0, "SUB10SYSTEMS-MIB", "sub10UnitMgmtUserIndex"))
if mibBuilder.loadTexts: sub10UnitMgmtUserEntry.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtUserEntry.setDescription('An entry (row) in the sub10UnitMgmtUserTable.\n                    If the rowStatus is set to notInService(2) then\n                    the entry is not valid and no columnar objects are returned.\n                    Usage is as follows:\n                    \n                    active(1)       - Entry is created and in use. Any attempt\n                    to set this value will first check for\n                    consistent objects. If objects are found\n                    to be inconsistent then the entry will not\n                    be created and an error will be returned.\n                    \n                    notInService(2) - Entry is not created and not in use. Any attempt\n                    to set this value will result in the the entry\n                    remaining created but not accessible and not used.\n                    \n                    notReady(3)     - Entry is created but has inconsistent objects, these\n                    must be set to correct values before the object can\n                    be set to active(1).\n                    \n                    createAndGo(4)  - Set this to create a new entry and attempt to make\n                    the entry active(1). If the entry has inconsistent objects\n                    then this will set the entry to notReady(3) and an error\n                    will be returned.\n                    \n                    createAndWait(5)- Set this to create a new entry.\n                    This will set rowStatus = notReady(3). Related\n                    objects can then be set to consistent values\n                    before row_status can be set to active(1).\n                    \n                    destroy(6)      - Set this to delete an entry.')
sub10UnitMgmtUserIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 3, 2, 4, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: sub10UnitMgmtUserIndex.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtUserIndex.setDescription('The sub10UnitMgmtUserTable index.')
sub10UnitMgmtUserRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 3, 2, 4, 2, 1, 2), RowStatus().clone('notInService')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sub10UnitMgmtUserRowStatus.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtUserRowStatus.setDescription('The row status of this row.\n                    All table rows are fixed in size\n                    and as such do not require conceptual row\n                    creation. Instead the RowStatus is set to\n                    active(1) or notInService(2) which indicates\n                    that the row is operationally in use or not.\n                    The default value is notInService(2) meaning the\n                    entry is not used by default. To make\n                    the entry valid this object must be set\n                    to enabled(1), createAndGo(4) or createAndWait(5).\n                    To delete the row set this to destroy(6).')
sub10UnitMgmtUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 3, 2, 4, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10UnitMgmtUserName.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtUserName.setDescription('The unique user name provided by the system administrator.')
sub10UnitMgmtUserGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 3, 2, 4, 2, 1, 4), Sub10UserGroup().clone('operation')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10UnitMgmtUserGroup.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtUserGroup.setDescription('The user group provided by the system administrator. This\n                    restricts a user to certain key functions on the web GUI.')
sub10UnitMgmtUserPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 3, 2, 4, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10UnitMgmtUserPassword.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtUserPassword.setDescription('The unique user password provided by the system administrator.\n                    This object can be set but is not visible when read.')
sub10UnitMgmtUserPasswordVerify = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 3, 2, 4, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10UnitMgmtUserPasswordVerify.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtUserPasswordVerify.setDescription('The unique user password provided by the system administrator\n                    use to verify the setting of sub10UnitMgmtUserPassword.\n                    This object can be set but is not visible when read.')
sub10UnitMgmtTimeLocal = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 2, 5, 1), Sub10DateTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10UnitMgmtTimeLocal.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtTimeLocal.setDescription('The administratively assigned system time defined\n                    as a display string in the format:-\n                    \n                    YYYY-MM-DD HH:MM:SS e.g. 2014-05-26 13:30:15')
sub10UnitMgmtTimeNTPEnabled = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 2, 5, 2), Sub10State().clone('stateDisabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10UnitMgmtTimeNTPEnabled.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtTimeNTPEnabled.setDescription('The administratively assigned state to enable or disable NTP.\n                    system cloack assignment automatically using the\n                    Network Time Protocol (NTP).')
sub10UnitMgmtTimeNTPServer1 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 2, 5, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10UnitMgmtTimeNTPServer1.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtTimeNTPServer1.setDescription('The administratively assigned primary NTP Server name.')
sub10UnitMgmtTimeNTPServer2 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 2, 5, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10UnitMgmtTimeNTPServer2.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtTimeNTPServer2.setDescription('The administratively assigned secondary NTP Server name to\n                    be used when the primary server is not responding.')
sub10UnitMgmtTimeNTPPort = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 2, 5, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(123)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10UnitMgmtTimeNTPPort.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtTimeNTPPort.setDescription('The administratively assigned NTP Port number name to\n                    be used when contacting the NTP server.')
sub10UnitMgmtTimeNTPSyncStatus = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 2, 5, 6), Sub10NTPSyncStatus().clone('ntpOutOfSync')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10UnitMgmtTimeNTPSyncStatus.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtTimeNTPSyncStatus.setDescription('The indication that the systems clock is synchronised with the\n                    NTP server.')
sub10UnitMgmtDateTime = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 2, 5, 7), DateAndTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10UnitMgmtDateTime.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtDateTime.setDescription("The administratively assigned system defined\n                    as a standard date-time specification.\n                    \n                    field  octets  contents                  range\n                    -----  ------  --------                  -----\n                    1      1-2   year*                     0..65536\n                    2       3    month                     1..12\n                    3       4    day                       1..31\n                    4       5    hour                      0..23\n                    5       6    minutes                   0..59\n                    6       7    seconds                   0..60\n                    (use 60 for leap-second)\n                    7       8    deci-seconds              0..9\n                    8       9    direction from UTC        '+' / '-'\n                    9      10    hours from UTC*           0..13\n                    10      11    minutes from UTC          0..59\n                    \n                    * Notes:\n                    - the value of year is in network-byte order\n                    - daylight saving time in New Zealand is +13\n                    \n                    For example, Tuesday May 26, 1992 at 1:30:15 PM EDT would be\n                    displayed as:\n                    \n                    1992-5-26,13:30:15.0,-4:0\n                    \n                    Note that if only local time is known, then timezone\n                    information (fields 8-10) is not present.")
sub10UnitMgmtAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 39003, 3, 2, 6, 1), )
if mibBuilder.loadTexts: sub10UnitMgmtAlarmTable.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtAlarmTable.setDescription("The sub10UnitMgmtAlarmTable defines the alarm configuration.\n                    The first 'N' rows of the table is reserved for fixed alarms\n                    defined by the manufacturer. Fixed alarms cannot be deleted or their\n                    names changed, other attributes of a fixed alarm may be modified.\n                    \n                    The remainder of rows are available for user defined alarms which\n                    can be created and deleted. The index value 'N' is defined by\n                    'sub10UnitMgmtAlarmsUserDefStart'. Any attempt to create or delete a row\n                    in the table with an index less than value of 'sub10UnitMgmtAlarmsUserDefStart'\n                    will be rejected.\n                    \n                    This table is indexed by alarm index a number ranging from 1\n                    to the maximum number of entries in the alarm table.\n                    User defined alarm name and and alarm severity are configurable allowing multiple\n                    entries for the same alarm to be raised at different severity levels\n                    according to different threshold levels. A user defined alarm can be created\n                    with the same name as a fixed alarm if required. For example the fixed alarm\n                    'Rx Power Low' monitors the radio receive power and raises an alarm if the\n                    value is less than a certain threshold. A user defined alarm may be created\n                    with the same name but a less stringent threshold and a lower seveirty level.\n                    This allows same alarms to be raised at increasing severity as the condition\n                    causing the alarm worsens.\n                    \n                    This table allows configuration of threshold passing behavior,\n                    threshold values for both raising and clearing the alarms and\n                    the perceived severity. The alarm forwarding mechanisms can\n                    be defined for example SNMP trap, syslog and SMTP.\n                    \n                    No validation of thresholds across different entries of the table\n                    therefore the administrator must ensure that thresholds are correctly\n                    set accordingly for the severity of each alarm. This is particularly\n                    important where a single alarm name is configured to be raised at\n                    different severity levels.")
sub10UnitMgmtAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39003, 3, 2, 6, 1, 1), ).setIndexNames((0, "SUB10SYSTEMS-MIB", "sub10UnitMgmtAlarmIndex"))
if mibBuilder.loadTexts: sub10UnitMgmtAlarmEntry.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtAlarmEntry.setDescription('An entry (row) in the sub10UnitMgmtAlarmTable.\n                    If the rowStatus is set to notInService(2) then\n                    the entry is not valid and no columnar objects are returned.')
sub10UnitMgmtAlarmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 3, 2, 6, 1, 1, 1), Sub10AlarmIndex())
if mibBuilder.loadTexts: sub10UnitMgmtAlarmIndex.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtAlarmIndex.setDescription('The sub10UnitMgmtAlarmTable index.')
sub10UnitMgmtAlarmRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 3, 2, 6, 1, 1, 2), RowStatus().clone('notInService')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sub10UnitMgmtAlarmRowStatus.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtAlarmRowStatus.setDescription('The row status of this row.\n                    All table rows are fixed in size\n                    and as such do not require conceptual row\n                    creation. Instead the RowStatus is set to\n                    active(1) or notInService(2) which indicates\n                    that the row is operationally in use or not.\n                    The default value is notInService(2) meaning the\n                    entry is not used by default. To make\n                    the entry valid this object must be set\n                    to enabled(1), createAndGo(4) or createAndWait(5).\n                    To delete the row set this to destroy(6).')
sub10UnitMgmtAlarmName = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 3, 2, 6, 1, 1, 3), Sub10AlarmName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10UnitMgmtAlarmName.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtAlarmName.setDescription("The alarm name. This is a short descriptive name for the alarm.\n                    Alarm names can be duplicated across entries in order to define\n                    the same alarm to be raised and cleared according to different\n                    thresholds and different severity levels. If the user defines mutiple alarms\n                    with the same name it important to correctly configure severity and\n                    thresholds to avoid multiple alarms being generated for the same condition.\n                    Fixed alarm names cannot be modified. Fixed alarms are populated\n                    automatically in rows 1 to ('sub10UnitMgmtAlarmsUserDefStart'-1)")
sub10UnitMgmtAlarmSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 3, 2, 6, 1, 1, 4), Sub10AlarmSeverity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10UnitMgmtAlarmSeverity.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtAlarmSeverity.setDescription('The alarm severity. This is added to each alarm as a parameter.')
sub10UnitMgmtAlarmMeasObject = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 3, 2, 6, 1, 1, 5), Sub10MeasuredObject()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10UnitMgmtAlarmMeasObject.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtAlarmMeasObject.setDescription('The measured object. This is the object name of the\n                    object in the MIB with which the alarm is associated and\n                    which the configured thresholds are compared with when\n                    deriving the state of the alarm.\n                    \n                    It is not neccessary for all alarm measurement values to\n                    be identified in the MIB since a single alarm may be dependant\n                    on checks against entities or objects which are not present\n                    in the MIB and therefore do not have an associated OID.\n                    \n                    In general where an alarm and its thresholds relate to the\n                    monitoring of the value of a single MIB object then the OID of\n                    that object will be defined here otherwise the value\n                    is set to empty string.')
sub10UnitMgmtAlarmMonitorIntvl = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 3, 2, 6, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 86400)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10UnitMgmtAlarmMonitorIntvl.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtAlarmMonitorIntvl.setDescription('The interval in seconds when the measured object is to be read and compared with\n                    the raise and clear thresholds.\n                    An alarm cannot be raised or cleared quicker than the configured interval.\n                    Please also see related sub10UnitMgmtAlarmRaiseIntvls and sub10UnitMgmtAlarmClearIntvls\n                    objects which also affect when alarms are raised and cleared. This object\n                    should be set appropriately for the measured object to be monitored (see\n                    sub10UnitMgmtAlarmRaiseMeasObject) and the resulting alarm to be raised and cleared\n                    (see sub10UnitMgmtAlarmName). This also affects the forwarding of alarms for example as\n                    SNMP notifications.\n                    \n                    Higher severity alarms may have a shorter interval than those at a lower severity.\n                    The correct setting of sub10UnitMgmtAlarmMonitorIntvl and related objects\n                    sub10UnitMgmtAlarmRaiseIntvls and sub10UnitMgmtAlarmClearIntvls are important to avoid\n                    potential network loading caused by alarm storms.')
sub10UnitMgmtAlarmRaiseOper = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 3, 2, 6, 1, 1, 7), Sub10AlarmOperation().clone('greaterThanOrEqual')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10UnitMgmtAlarmRaiseOper.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtAlarmRaiseOper.setDescription('Type of operation which determines when an alarm\n                    is to be raised.\n                    \n                    Definition of each type is as follows:\n                    \n                    lt - Measured objects value is less than raise threshold\n                    gt - Measured objects value is greater than raise threshold\n                    le - Measured objects value is less than or equal to raise threshold\n                    ge - Measured objects value is greater than or equal to raise threshold\n                    eq - Measured objects value is equal to raise threshold\n                    neq - Measured objects value is not equal to raise threshold\n                    \n                    The alarm operation defines how to apply the configured\n                    thresholds when raising the alarm. This defines\n                    whether the alarm is raised when the measured object value\n                    crosses the threshold from low to high or from high to low or\n                    if the measured value hits a certain value or not.\n                    \n                    Example:\n                    \n                    Alarm Name                Alarm Threshold Raise Operation\n                    High Temperature               70              gt\n                    Low Temperature               -30              le\n                    \n                    High Temperature Alarm is raised when the measured temperature\n                    is above 70 and Low Temperature raised when the measured temperature\n                    is lower than or equal to -30.')
sub10UnitMgmtAlarmRaiseThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 3, 2, 6, 1, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('0')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10UnitMgmtAlarmRaiseThresh.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtAlarmRaiseThresh.setDescription("The threshold value which the measured object's value\n                    crosses causes the alarm to be raised. The behaviour of a\n                    measured value and alarm threshold comparison is\n                    defined by the object sub10UnitMgmtAlarmThreshType.")
sub10UnitMgmtAlarmClearOper = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 3, 2, 6, 1, 1, 9), Sub10AlarmOperation().clone('lessThan')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10UnitMgmtAlarmClearOper.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtAlarmClearOper.setDescription('Type of operation which determines when an alarm\n                    is to be cleared.\n                    \n                    Definition of each type is as follows:\n                    \n                    lt - Measured objects value is less than clear threshold\n                    gt - Measured objects value is greater than clear threshold\n                    le - Measured objects value is less than or equal to clear threshold\n                    ge - Measured objects value is greater than or equal to clear threshold\n                    eq - Measured objects value is equal to clear threshold\n                    neq - Measured objects value is not equal to clear threshold\n                    \n                    The alarm operation defines how to apply the configured\n                    thresholds when clearing the alarm. This defines\n                    whether the alarm is cleared when the measured object value\n                    crosses the threshold from low to high or from high to low or\n                    if the measured value hits a certain value or not.\n                    \n                    Example:\n                    \n                    Alarm Name                Alarm Threshold Clear Operation\n                    High Temperature               60              le\n                    Low Temperature               -30              gt\n                    \n                    Low Temperature Alarm is cleared when the measured temperature\n                    is lower or equal to 60 and Low Temperature cleared when the\n                    measured temperature is greater than -30.')
sub10UnitMgmtAlarmClearThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 3, 2, 6, 1, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('0')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10UnitMgmtAlarmClearThresh.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtAlarmClearThresh.setDescription("The threshold value which the measured object's value\n                    crosses causes the alarm to be cleared. The behaviour of a\n                    measured value and alarm threshold comparison is\n                    defined by the object sub10UnitMgmtAlarmThreshType.\n                    \n                    The sub10UnitMgmtAlarmClearThresh value may be different\n                    to the sub10UnitMgmtAlarmRaiseThresh allowing some hysteresis\n                    bewteen raising and clearing of alarms thus avoiding an alarm\n                    being continually raised and cleared if the measured value\n                    is changing frequently around the threshold.\n                    If different raise and clear thresholds are not required then the\n                    sub10UnitMgmtAlarmClearThresh and sub10UnitMgmtAlarmRaiseThresh\n                    should be set to the same value.")
sub10UnitMgmtAlarmRaiseIntvls = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 3, 2, 6, 1, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10UnitMgmtAlarmRaiseIntvls.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtAlarmRaiseIntvls.setDescription('The number of continuous monitoring intervals (see sub10UnitMgmtAlarmMonitorIntvl)\n                    where the measured object has crossed the raise threshold before the\n                    alarm state is set to raised. This is intended to reduce the number of\n                    alarm state transitions when the measured object value\n                    is rapidly changing close to the configured raise threshold.')
sub10UnitMgmtAlarmClearIntvls = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 3, 2, 6, 1, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10UnitMgmtAlarmClearIntvls.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtAlarmClearIntvls.setDescription('The number of continuous monitoring intervals (see sub10UnitMgmtAlarmMonitorIntvl)\n                    where the measured object has crossed the clear threshold before the\n                    alarm state is set to cleared. This is intended to reduce the number\n                    of alarm state transitions when the measured object value\n                    is rapidly changing close to the configured clear threshold.')
sub10UnitMgmtAlarmType = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 3, 2, 6, 1, 1, 13), Sub10AlarmType().clone('sub10UnitAlarm')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10UnitMgmtAlarmType.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtAlarmType.setDescription('The type of the alarm and defines the type of notification (trap) used\n                    to inform management entities.')
sub10UnitMgmtAlarmSmtpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 3, 2, 6, 1, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10UnitMgmtAlarmSmtpAddress.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtAlarmSmtpAddress.setDescription('The smtp mail address. If set the alarm\n                    is suitable formatted and sent to the given\n                    mail address.')
sub10UnitMgmtAlarmToSyslog = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 3, 2, 6, 1, 1, 15), Sub10State().clone('stateEnabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10UnitMgmtAlarmToSyslog.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtAlarmToSyslog.setDescription("If set to 'enabled' the alarm is suitably formatted\n                    and sent to syslog.")
sub10UnitMgmtAlarmEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 3, 2, 6, 1, 1, 16), Sub10State().clone('stateDisabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10UnitMgmtAlarmEnabled.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtAlarmEnabled.setDescription("If set to 'enabled' the alarm is enabled.")
sub10UnitMgmtAlarmMeasObjectVal = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 3, 2, 6, 1, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10UnitMgmtAlarmMeasObjectVal.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtAlarmMeasObjectVal.setDescription('The value of sub10UnitMgmtAlarmMeasObject formatted as a displayString which when\n                    measured by the alarm subsystem caused an alarm to be either raised or cleared.\n                    This is therefore the value of the object which was compared with and found to have\n                    crossed the configured threshold causing the alarm to change state.\n                    The value is not the current value of the measured object it is the observed value\n                    which caused the change in alarm state.')
sub10UnitMgmtAlarmToSNMP = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 3, 2, 6, 1, 1, 18), Sub10State().clone('stateDisabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10UnitMgmtAlarmToSNMP.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtAlarmToSNMP.setDescription("If set to 'enabled' the alarm is forwarded as an SNMP notification / trap.")
sub10UnitMgmtAlarmMeasObjIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 3, 2, 6, 1, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10UnitMgmtAlarmMeasObjIndex.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtAlarmMeasObjIndex.setDescription("The measured object's index which is a value from 1 and is the\n                    instance of the measured object to be monitored. For scalar\n                    objects this value is 0 and for non-scalar (or column)\n                    objects this value must be 0 or greater and must match\n                    the index value defined for the object where the object is\n                    defined as a column in a table and the table has an index\n                    defined in a certain range.")
sub10UnitMgmtAlarmsUserDefStart = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 2, 6, 2), Sub10AlarmIndex().clone(65)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10UnitMgmtAlarmsUserDefStart.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtAlarmsUserDefStart.setDescription('This defines the row index from which point rows in the sub10UnitMgmtAlarmTable can be\n                    created and deleted and therefore where user defined alarms start.\n                    Any attempt to create or delete a row in the sub10UnitMgmtAlarmTable with an index\n                    below this value will fail.')
sub10UnitMgmtSnmpAgent = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 2, 7, 1), Sub10State().clone('stateDisabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10UnitMgmtSnmpAgent.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtSnmpAgent.setDescription("If set to 'enabled' the agent will respond to valid v1/2c SNMP requests\n                    for GET/SET/GET-NEXT of supported MIB objects. If this object and the\n                    object sub10UnitMgmtSnmpv3 are both set to disabled then the unit\n                    will no longer respond to SNMP requests. If this object is set to\n                    enabled and sub10UnitMgmtSnmpv3 is set to enabled then the agent will respond\n                    to both both v1/2c and v3 SNMP requests.\n                    \n                    !! IMPORTANT !!\n                    If this object and sub10UnitMgmtSnmpv3 is set to disabled then the Agent\n                    will no longer respond therefore it will not be possible to re-enable the agent using\n                    SNMP. The agent can be re-enabled using the web GUI only.\n                    \n                    If this object is disabled then traps will not be forwarded by the unit.")
sub10UnitMgmtSnmpTraps = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 2, 7, 2), Sub10State().clone('stateDisabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10UnitMgmtSnmpTraps.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtSnmpTraps.setDescription("If set to 'enabled' the agent will forward traps to all configured\n                    trap destinations. If disabled traps are discarded.\n                    Traps are not sent if sub10UnitMgmtSnmpAgent is 'disabled(2)'\n                    regardless of the setting of this object.")
sub10UnitMgmtSnmpv320Mib = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 2, 7, 3), Sub10State().clone('stateDisabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10UnitMgmtSnmpv320Mib.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtSnmpv320Mib.setDescription("If set to 'enabled' the agent will support the Sub10 Systems\n                    v320 legacy MIB (LIBERATOR-MIB) objects and traps.")
sub10UnitMgmtSnmpv3 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 2, 7, 4), Sub10State().clone('stateDisabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10UnitMgmtSnmpv3.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtSnmpv3.setDescription("If set to 'enabled' the agent will support SNMPv3\n                    PDUs and the SNMPv3 MIB configuration. This can be set to enabled or\n                    disabled independently of the object sub10UnitMgmtSnmpAgent which\n                    enables or disables the v1/2c agent.\n                    \n                    IMPORTANT: This object is controlled by transaction management.\n                    Any changes to this object must be transactionally acknowledged\n                    following a successful set thus protecting against loss of\n                    communication with the unit. To acknowledge the transaction\n                    set the object sub10UnitMgmtTransaction to transactionCommit(2).")
sub10UnitMgmtSnmpTrpDstTable = MibTable((1, 3, 6, 1, 4, 1, 39003, 3, 2, 7, 5), )
if mibBuilder.loadTexts: sub10UnitMgmtSnmpTrpDstTable.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtSnmpTrpDstTable.setDescription('The table listing the each trap destination the local unit.\n                    Each trap destination has an IpAddress and a trap community string')
sub10UnitMgmtSnmpTrpDstEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39003, 3, 2, 7, 5, 1), ).setIndexNames((0, "SUB10SYSTEMS-MIB", "sub10UnitMgmtSnmpTrpDstIndex"))
if mibBuilder.loadTexts: sub10UnitMgmtSnmpTrpDstEntry.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtSnmpTrpDstEntry.setDescription('An entry (row) in the sub10UnitMgmtSnmpTrpDstTable.\n                    If the rowStatus is set to notInService(2) then the entry\n                    is not valid and no columnar objects are returned.')
sub10UnitMgmtSnmpTrpDstIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 3, 2, 7, 5, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)))
if mibBuilder.loadTexts: sub10UnitMgmtSnmpTrpDstIndex.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtSnmpTrpDstIndex.setDescription('The sub10UnitMgmtSnmpTrpDstTable index.\n                    If the rowStatus is not set to enabled(1) then\n                    the entry is not valid and no columnar objects are returned\n                    except for the rowStatus object itself.')
sub10UnitMgmtSnmpTrpDstRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 3, 2, 7, 5, 1, 2), RowStatus().clone('notInService')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sub10UnitMgmtSnmpTrpDstRowStatus.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtSnmpTrpDstRowStatus.setDescription('The row status of this row.\n                    All table rows are fixed in size\n                    and as such do not require conceptual row\n                    creation. Instead the RowStatus is set to\n                    active(1) or notInService(2) which indicates\n                    that the row is operationally in use or not.\n                    The default value is notInService(2) meaning the\n                    entry is not used by default. To make\n                    the entry valid this object must be set\n                    to enabled(1), createAndGo(4) or createAndWait(5).\n                    To delete the row set this to destroy(6).')
sub10UnitMgmtSnmpTrpDstIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 3, 2, 7, 5, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10UnitMgmtSnmpTrpDstIpAddr.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtSnmpTrpDstIpAddr.setDescription('The administratively assigned SNMP Trap Destination IP.')
sub10UnitMgmtSnmpTrpDstCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 3, 2, 7, 5, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10UnitMgmtSnmpTrpDstCommunity.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtSnmpTrpDstCommunity.setDescription('The trap community name sent with each trap to this trap destination.\n                    The trap community allows for some security in the target management terminal')
sub10UnitMgmtSnmpEngineIdFormat = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 2, 7, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("v4IpAddress", 1), ("v6IpAddress", 2), ("macAddress", 3), ("textString", 4))).clone('textString')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10UnitMgmtSnmpEngineIdFormat.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtSnmpEngineIdFormat.setDescription("The format of this SNMP v3 agent's engine id. The engine id is administratively\n                    defined and is between 5 and 32 characters long and can be based on a number\n                    of formats defined here.")
sub10UnitMgmtSnmpEngineIdText = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 2, 7, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 25)).clone('Sub10Systems')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10UnitMgmtSnmpEngineIdText.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtSnmpEngineIdText.setDescription("When sub10UnitMgmtSnmpEngineIdFormat='textString(4)' this object contains the administratively defined\n                    string used to build the SNMP v3 engine id in sub10UnitMgmtSnmpEngineId.")
sub10UnitMgmtSnmpEngineId = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 2, 7, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(5, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10UnitMgmtSnmpEngineId.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtSnmpEngineId.setDescription('The  administratively assigned SNMP v3 engine id. The construction of the\n                    engine id is dependant on the setting of sub10UnitMgmtSnmpEngineIdFormat and\n                    must be unique to the unit.')
sub10UnitMgmtSnmpOperAuthProto = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 2, 7, 9), Sub10Snmpv3AuthProtocol().clone('noAuth')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10UnitMgmtSnmpOperAuthProto.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtSnmpOperAuthProto.setDescription('The authentication protocol currently assigned to users of group type operation.')
sub10UnitMgmtSnmpOperPrivProto = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 2, 7, 10), Sub10Snmpv3PrivProtocol().clone('noPriv')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10UnitMgmtSnmpOperPrivProto.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtSnmpOperPrivProto.setDescription('The privacy protocol currently assigned to users of group type operation.')
sub10UnitMgmtSnmpAdminAuthProto = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 2, 7, 11), Sub10Snmpv3AuthProtocol().clone('md5')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10UnitMgmtSnmpAdminAuthProto.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtSnmpAdminAuthProto.setDescription('The authentication protocol currently assigned to users of group type administration.')
sub10UnitMgmtSnmpAdminPrivProto = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 2, 7, 12), Sub10Snmpv3PrivProtocol().clone('noPriv')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10UnitMgmtSnmpAdminPrivProto.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtSnmpAdminPrivProto.setDescription('The privacy protocol currently assigned to users of group type administration.')
sub10UnitMgmtSnmpMaintAuthProto = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 2, 7, 13), Sub10Snmpv3AuthProtocol().clone('md5')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10UnitMgmtSnmpMaintAuthProto.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtSnmpMaintAuthProto.setDescription('The authentication protocol currently assigned to users of group type maintenance.')
sub10UnitMgmtSnmpMaintPrivProto = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 2, 7, 14), Sub10Snmpv3PrivProtocol().clone('des')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10UnitMgmtSnmpMaintPrivProto.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtSnmpMaintPrivProto.setDescription('The privacy protocol currently assigned to users of group type maintenance.')
sub10UnitMgmtSnmpUserTable = MibTable((1, 3, 6, 1, 4, 1, 39003, 3, 2, 7, 15), )
if mibBuilder.loadTexts: sub10UnitMgmtSnmpUserTable.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtSnmpUserTable.setDescription('The table of SNMPv3 User configuration.')
sub10UnitMgmtSnmpUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39003, 3, 2, 7, 15, 1), ).setIndexNames((0, "SUB10SYSTEMS-MIB", "sub10UnitMgmtSnmpUserIndex"))
if mibBuilder.loadTexts: sub10UnitMgmtSnmpUserEntry.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtSnmpUserEntry.setDescription('An entry (row) in the sub10UnitMgmtSnmpUserTable.\n                    If the rowStatus is set to notInService(2) then the entry\n                    is not valid and no columnar objects are returned.')
sub10UnitMgmtSnmpUserIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 3, 2, 7, 15, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)))
if mibBuilder.loadTexts: sub10UnitMgmtSnmpUserIndex.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtSnmpUserIndex.setDescription('The sub10UnitMgmtSnmpUserTable index.\n                    If the rowStatus is not set to enabled(1) then\n                    the entry is not valid and no columnar objects are returned\n                    except for the rowStatus object itself.')
sub10UnitMgmtSnmpUserRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 3, 2, 7, 15, 1, 2), RowStatus().clone('notInService')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sub10UnitMgmtSnmpUserRowStatus.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtSnmpUserRowStatus.setDescription('The row status of this row.\n                    All table rows are fixed in size\n                    and as such do not require conceptual row\n                    creation. Instead the RowStatus is set to\n                    active(1) or notInService(2) which indicates\n                    that the row is operationally in use or not.\n                    The default value is notInService(2) meaning the\n                    entry is not used by default. To make\n                    the entry valid this object must be set\n                    to enabled(1), createAndGo(4) or createAndWait(5).\n                    To delete the row set this to destroy(6).')
sub10UnitMgmtSnmpUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 3, 2, 7, 15, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10UnitMgmtSnmpUserName.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtSnmpUserName.setDescription('The administratively assigned SNMPv3 User name.')
sub10UnitMgmtSnmpUserGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 3, 2, 7, 15, 1, 4), Sub10UserGroup().clone('operation')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10UnitMgmtSnmpUserGroup.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtSnmpUserGroup.setDescription('The user group type. Authentication and Privacy policies are assigned to a\n                    user group and not individual users.')
sub10UnitMgmtSnmpUserAuthPwd = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 3, 2, 7, 15, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10UnitMgmtSnmpUserAuthPwd.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtSnmpUserAuthPwd.setDescription('The unique SNMPv3 authentication protocol password provided by the system administrator.\n                    This object can be set but is not visible when read.')
sub10UnitMgmtSnmpUserAuthPwdChk = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 3, 2, 7, 15, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10UnitMgmtSnmpUserAuthPwdChk.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtSnmpUserAuthPwdChk.setDescription('The unique SNMPv3 authentication protocol password provided by the system administrator\n                    used to verify the setting of sub10UnitMgmtSnmpUserAuthPassword.\n                    This object can be set but is not visible when read.')
sub10UnitMgmtSnmpUserPrivPwd = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 3, 2, 7, 15, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10UnitMgmtSnmpUserPrivPwd.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtSnmpUserPrivPwd.setDescription('The unique SNMPv3 privacy protocol password provided by the system administrator.\n                    This object can be set but is not visible when read.')
sub10UnitMgmtSnmpUserPrivPwdChk = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 3, 2, 7, 15, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10UnitMgmtSnmpUserPrivPwdChk.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtSnmpUserPrivPwdChk.setDescription('The unique SNMPv3 privacy protocol password provided by the system administrator\n                    used to verify the setting of sub10UnitMgmtSnmpUserPrivPassword.\n                    This object can be set but is not visible when read.')
sub10UnitMgmtSnmpAccessTable = MibTable((1, 3, 6, 1, 4, 1, 39003, 3, 2, 7, 16), )
if mibBuilder.loadTexts: sub10UnitMgmtSnmpAccessTable.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtSnmpAccessTable.setDescription('The table of SNMPv3 Access configuration.')
sub10UnitMgmtSnmpAccessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39003, 3, 2, 7, 16, 1), ).setIndexNames((0, "SUB10SYSTEMS-MIB", "sub10UnitMgmtSnmpAccessIndex"))
if mibBuilder.loadTexts: sub10UnitMgmtSnmpAccessEntry.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtSnmpAccessEntry.setDescription('An entry (row) in the sub10UnitMgmtSnmpAccessTable.\n                    If the rowStatus is set to notInService(2) then the entry\n                    is not valid and no columnar objects are returned.')
sub10UnitMgmtSnmpAccessIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 3, 2, 7, 16, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)))
if mibBuilder.loadTexts: sub10UnitMgmtSnmpAccessIndex.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtSnmpAccessIndex.setDescription('The sub10UnitMgmtSnmpAccessTable index.\n                    If the rowStatus is not set to enabled(1) then\n                    the entry is not valid and no columnar objects are returned\n                    except for the rowStatus object itself.')
sub10UnitMgmtSnmpAccessRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 3, 2, 7, 16, 1, 2), RowStatus().clone('notInService')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sub10UnitMgmtSnmpAccessRowStatus.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtSnmpAccessRowStatus.setDescription('The row status of this row.\n                    All table rows are fixed in size\n                    and as such do not require conceptual row\n                    creation. Instead the RowStatus is set to\n                    active(1) or notInService(2) which indicates\n                    that the row is operationally in use or not.\n                    The default value is notInService(2) meaning the\n                    entry is not used by default. To make\n                    the entry valid this object must be set\n                    to enabled(1), createAndGo(4) or createAndWait(5).\n                    To delete the row set this to destroy(6).')
sub10UnitMgmtSnmpAccessName = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 3, 2, 7, 16, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10UnitMgmtSnmpAccessName.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtSnmpAccessName.setDescription('The administratively assigned SNMPv3 access name. This is used as an alias for the\n                    access address for purposes of identification. The name is not used in the SNMP protocol.')
sub10UnitMgmtSnmpAccessIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 3, 2, 7, 16, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10UnitMgmtSnmpAccessIpAddr.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtSnmpAccessIpAddr.setDescription('The administratively assigned SNMP access IP address. Only SNMP requests from this\n                    address will be serviced by the SNMP agent.')
sub10UnitMgmtSnmpTargetTable = MibTable((1, 3, 6, 1, 4, 1, 39003, 3, 2, 7, 17), )
if mibBuilder.loadTexts: sub10UnitMgmtSnmpTargetTable.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtSnmpTargetTable.setDescription('The table of SNMPv3 Target configuration.\n                    This table defines the addresses of target SNMPv3 managers to send\n                    Notifications.')
sub10UnitMgmtSnmpTargetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39003, 3, 2, 7, 17, 1), ).setIndexNames((0, "SUB10SYSTEMS-MIB", "sub10UnitMgmtSnmpTargetIndex"))
if mibBuilder.loadTexts: sub10UnitMgmtSnmpTargetEntry.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtSnmpTargetEntry.setDescription('An entry (row) in the sub10UnitMgmtSnmpTargetTable.\n                    If the rowStatus is set to notInService(2) then the entry\n                    is not valid and no columnar objects are returned.')
sub10UnitMgmtSnmpTargetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 3, 2, 7, 17, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)))
if mibBuilder.loadTexts: sub10UnitMgmtSnmpTargetIndex.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtSnmpTargetIndex.setDescription('The sub10UnitMgmtSnmpTargetTable index.\n                    If the rowStatus is not set to enabled(1) then\n                    the entry is not valid and no columnar objects are returned\n                    except for the rowStatus object itself.')
sub10UnitMgmtSnmpTargetRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 3, 2, 7, 17, 1, 2), RowStatus().clone('notInService')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sub10UnitMgmtSnmpTargetRowStatus.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtSnmpTargetRowStatus.setDescription('The row status of this row.\n                    All table rows are fixed in size\n                    and as such do not require conceptual row\n                    creation. Instead the RowStatus is set to\n                    active(1) or notInService(2) which indicates\n                    that the row is operationally in use or not.\n                    The default value is notInService(2) meaning the\n                    entry is not used by default. To make\n                    the entry valid this object must be set\n                    to enabled(1), createAndGo(4) or createAndWait(5).\n                    To delete the row set this to destroy(6).')
sub10UnitMgmtSnmpTargetName = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 3, 2, 7, 17, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10UnitMgmtSnmpTargetName.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtSnmpTargetName.setDescription('The administratively assigned SNMPv3 target name.')
sub10UnitMgmtSnmpTargetIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 3, 2, 7, 17, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10UnitMgmtSnmpTargetIpAddr.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtSnmpTargetIpAddr.setDescription('The administratively assigned SNMP target IP address. When enabled SNMPv3 Notifications\n                    are sent to this address.')
sub10UnitMgmtSnmpTargetUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 3, 2, 7, 17, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10UnitMgmtSnmpTargetUserName.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtSnmpTargetUserName.setDescription('The administratively assigned SNMPv3 target user name.\n                    The security model configured for this user is used when sending\n                    notifications to the target address.')
sub10UnitMgmtFirmwareSelectBank = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 2, 9, 1), Sub10FirmwareBank()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10UnitMgmtFirmwareSelectBank.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtFirmwareSelectBank.setDescription('Currently selected bank which unit uses to boot.')
sub10UnitMgmtFirmwareLoadedBank = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 2, 9, 2), Sub10FirmwareBank()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10UnitMgmtFirmwareLoadedBank.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtFirmwareLoadedBank.setDescription('Currently loaded bank. The firmware version number running in this bank is\n                    defined by sub10UnitMgmtFirmwareVersion.')
sub10UnitMgmtFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 2, 9, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10UnitMgmtFirmwareVersion.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtFirmwareVersion.setDescription('The firmware version currently running on the local unit.\n                    This is the version of the firmware loaded into the bank\n                    number defined in sub10UnitMgmtFirmwareLoadedBank.')
sub10UnitMgmtFirmwareBootVersion = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 2, 9, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10UnitMgmtFirmwareBootVersion.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtFirmwareBootVersion.setDescription('The firmware boot version currently running on the local unit.\n                    This is the boot version of the firmware loaded into the bank\n                    number defined in sub10UnitMgmtFirmwareLoadedBank.')
sub10UnitMgmtFirmwareAction = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 2, 9, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("fmwNone", 1), ("fmwReboot", 2), ("fmwCopyInactiveBank", 3), ("fmwUploadInactiveBank", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10UnitMgmtFirmwareAction.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtFirmwareAction.setDescription("The firmware bank action object is used to perform certain\n                    actions on a firmware bank. Using this it is possible to reboot the\n                    unit, copy banks and upload software to the currently inactive bank.\n                    \n                    After a Set of this object it's value is always reset to fmwNone(1).\n                    \n                    The progress of the action may be monitored using a get of the objects\n                    'sub10UnitMgmtFirmwareActStatus' and 'sub10UnitMgmtFirmwareActProgress'.\n                    \n                    fmwNone(1) -\n                    Perform no firmware action  unit.\n                    \n                    fmwReboot(2) -\n                    Perform immediate unit reboot of the unit and start the\n                    firmware currently loaded in 'sub10UnitMgmtFirmwareSelectBank'.\n                    \n                    fmwCopyInactiveBank(3) -\n                    Copy the firmware currently loaded in 'sub10UnitMgmtFirmwareLoadedBank'\n                    to the inactive bank.\n                    \n                    fmwUploadInactiveBank(4) -\n                    Upload the firmware image named by 'sub10UnitMgmtFirmwareUplImage' from the\n                    server address 'sub10UnitFirmwareUplServerIp' and load\n                    to the inactive bank.")
sub10UnitMgmtFirmwareBankTable = MibTable((1, 3, 6, 1, 4, 1, 39003, 3, 2, 9, 6), )
if mibBuilder.loadTexts: sub10UnitMgmtFirmwareBankTable.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtFirmwareBankTable.setDescription('This tables contains information regarding the firmware banks.')
sub10UnitMgmtFirmwareBankEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39003, 3, 2, 9, 6, 1), ).setIndexNames((0, "SUB10SYSTEMS-MIB", "sub10UnitMgmtFirmwareBankIndex"))
if mibBuilder.loadTexts: sub10UnitMgmtFirmwareBankEntry.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtFirmwareBankEntry.setDescription('An entry (row) in the sub10UnitMgmtFirmwareBankTable.')
sub10UnitMgmtFirmwareBankIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 3, 2, 9, 6, 1, 1), Sub10FirmwareBank())
if mibBuilder.loadTexts: sub10UnitMgmtFirmwareBankIndex.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtFirmwareBankIndex.setDescription('The sub10UnitMgmtFirmwareBankTable index.')
sub10UnitMgmtFirmwareBankVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 3, 2, 9, 6, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10UnitMgmtFirmwareBankVersion.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtFirmwareBankVersion.setDescription('The firmware version currently installed in this bank.')
sub10UnitMgmtFirmwareBankImage = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 3, 2, 9, 6, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10UnitMgmtFirmwareBankImage.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtFirmwareBankImage.setDescription('The firmware image name currently installed in this bank.')
sub10UnitMgmtFirmwareUplImage = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 2, 9, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10UnitMgmtFirmwareUplImage.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtFirmwareUplImage.setDescription("The firmware image name to be uploaded from the server\n                    defined by 'sub10UnitFirmwareUplServerIp' using the firmware action\n                    'sub10UnitFirmwareAction=fmwUpload(4)'.")
sub10UnitMgmtFirmwareUplSvrIp = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 2, 9, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(7, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10UnitMgmtFirmwareUplSvrIp.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtFirmwareUplSvrIp.setDescription('The IP address of the  server used to upload the firmware image\n                    defined by sub10UnitMgmtFirmwareUplImage.')
sub10UnitMgmtFirmwareFromBank = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 2, 9, 9), Sub10FirmwareBank()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10UnitMgmtFirmwareFromBank.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtFirmwareFromBank.setDescription('The bank currently being copied from by the Firmware action sub10UnitMgmtFirmwareAction = fmwCopyInactiveBank(4).')
sub10UnitMgmtFirmwareToBank = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 2, 9, 10), Sub10FirmwareBank()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10UnitMgmtFirmwareToBank.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtFirmwareToBank.setDescription('The bank currently being uploaded or copied to by the Firmware actions sub10UnitMgmtFirmwareAction = fmwUploadInactiveBank(4)\n                    or sub10UnitMgmtFirmwareAction = fmwCopyInactiveBank(4).')
sub10UnitMgmtFirmwareActStatus = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 2, 9, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("fmwUploadSuccess", 1), ("fmwUploadFailed", 2), ("fmwUploadTimeout", 3), ("fmwUploadFileNotFound", 4), ("fmwUploadInvalid", 5), ("fmwUploadingImage", 6), ("fmwUploadingImageComplete", 7), ("fmwUploadWritingBank", 8), ("fmwUploadWritingBankComplete", 9), ("fmwValidatingImage", 10), ("fmwImageValidateSuccess", 11), ("fmwImageValidateFailed", 12), ("fmwCopyingBank", 13), ("fmwCopyingBankComplete", 14), ("fmwCopyBankFailed", 15), ("fmwCopyBankSuccess", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10UnitMgmtFirmwareActStatus.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtFirmwareActStatus.setDescription('The status of the firmware bank action which\n                    can be repeatedly read using a Get to report the progress of the\n                    the action and verify that it has either succeeded or failed.  The\n                    value is left in the final state after the Firmware Action has completed.')
sub10UnitMgmtFirmwareActProgress = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 2, 9, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10UnitMgmtFirmwareActProgress.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtFirmwareActProgress.setDescription('The % progress of firmware action when loading the firmware image\n                    to a firmware bank or copying a firmware image from on1 bank to another bank.')
sub10UnitMgmtDNSTable = MibTable((1, 3, 6, 1, 4, 1, 39003, 3, 2, 10, 1), )
if mibBuilder.loadTexts: sub10UnitMgmtDNSTable.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtDNSTable.setDescription('This tables defines the Domain Name Servers.')
sub10UnitMgmtDNSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39003, 3, 2, 10, 1, 1), ).setIndexNames((0, "SUB10SYSTEMS-MIB", "sub10UnitMgmtDNSIndex"))
if mibBuilder.loadTexts: sub10UnitMgmtDNSEntry.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtDNSEntry.setDescription('An entry (row) in the sub10UnitMgmtDNSTable.')
sub10UnitMgmtDNSIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 3, 2, 10, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: sub10UnitMgmtDNSIndex.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtDNSIndex.setDescription('The sub10UnitMgmtDNSTable index.')
sub10UnitMgmtDNServer = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 3, 2, 10, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(7, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10UnitMgmtDNServer.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtDNServer.setDescription('The administratively assigned DNS server IP for the unit.\n                    IMPORTANT: This object is controlled by transaction management.\n                    Any changes to this object must be transactionally acknowledged\n                    following a successful set thus protecting against loss of\n                    communication with the unit. To acknowledge the transaction\n                    set the object sub10UnitMgmtTransaction to transactionCommit(2).')
sub10UnitMgmtEncryptMode = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 2, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("encryptNone", 0), ("encryptAES128", 1), ("encryptAES192", 2), ("encryptAES256", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10UnitMgmtEncryptMode.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtEncryptMode.setDescription('The administratively assigned License key for the unit.\n                    The license key enables capabilities within the unit.\n                    The capabilities currently available by the configured\n                    license key are readable objects.')
sub10UnitMgmtEncryptKey = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 2, 11, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10UnitMgmtEncryptKey.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtEncryptKey.setDescription('The administratively assigned Encryption key.')
sub10UnitMgmtLicenseKey = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 2, 12, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10UnitMgmtLicenseKey.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtLicenseKey.setDescription('The administratively assigned License key for the unit.\n                    The license key enables capabilities within the unit.\n                    The capabilities currently available by the configured\n                    license key are readable objects.')
sub10UnitMgmtLicenseAES = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 2, 12, 2), Sub10State().clone('stateDisabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10UnitMgmtLicenseAES.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtLicenseAES.setDescription('Indication if AES encryption is included in the current license key.')
sub10UnitMgmtSyncEMode = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 2, 13, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("syncENone", 0), ("syncEProvider", 1), ("syncEConsumer", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10UnitMgmtSyncEMode.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtSyncEMode.setDescription('The SyncE Mode. Setting this to syncEProvider(1) configures the unit as\n                    a Slave clock. In this case the unit at the other end of the\n                    link should be set to syncEConsumer(2).\n                    \n                    IMPORTANT: This object is controlled by transaction management.\n                    Any changes to this object must be transactionally acknowledged\n                    following a successful set thus protecting against loss of\n                    communication with the unit. To acknowledge the transaction\n                    set the object sub10UnitMgmtTransaction to transactionCommit(2).')
sub10UnitMgmtTransaction = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 2, 20, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("transactionNone", 1), ("transactionCommit", 2), ("transactionRollback", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10UnitMgmtTransaction.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtTransaction.setDescription("This is used to commit or rollback the setting of object configuration.\n                    It only applies where the objects are subject to transactional requirements.\n                    For example the setting of the Unit's IP Address requires that a transaction\n                    be committed. If the transaction is not committed after a rollback timeout then\n                    the unit will automatically action a rollback to the previous value.\n                    \n                    The rollback timeout is configurable 'sub10UnitMgmtRollbackTimeout'")
sub10UnitMgmtTransactionStatus = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 2, 20, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("transStatusNone", 1), ("transStatusActive", 2), ("transStatusCommitted", 3), ("transStatusRollback", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10UnitMgmtTransactionStatus.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtTransactionStatus.setDescription('This indicates either a transaction is currently in progress or\n                    if the last transaction was committed successfully or was rolled\n                    back.')
sub10UnitMgmtRollbackTimeout = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 2, 20, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(30, 300)).clone(180)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10UnitMgmtRollbackTimeout.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtRollbackTimeout.setDescription('The timeout in seconds after which uncommitted Sets\n                    will be rolled back to their previous values.\n                    A rollback only affects those objects which are\n                    subject to transactions.')
sub10UnitMgmtTransactionMode = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 2, 20, 4), Sub10State().clone('stateEnabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10UnitMgmtTransactionMode.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtTransactionMode.setDescription('Enables and Disables transactions. If sub10UnitMgmTransactionMode is\n                    stateDisabled(0) then no objects are subject to commit and rollback.')
sub10UnitMgmtResetAction = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 2, 20, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("resetNone", 1), ("resetFactoryDefaults", 2), ("resetFactoryDefaultsNoSave", 3), ("resetStatistics", 4), ("resetAlarmConfig", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10UnitMgmtResetAction.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtResetAction.setDescription("This is used to reset unit configuration and stats.\n                    resetFactoryDefaults(2)\n                    - Resets all configuration to Factory Defaults, requires a reboot.\n                    \n                    resetStatistics(3)\n                    - Resets according to setting of sub10UnitMgmtResetStatsGroup\n                    For reset of all stats sub10UnitMgmtResetStatsGroup = 'statsGroupAll'.\n                    \n                    resetAlarmConfig(4)\n                    - Resets according to setting of sub10UnitMgmtResetAlarmsType\n                    For reset of all alarms sub10UnitMgmtResetAlarmsType = 'resetAlarmTypeAll'.")
sub10UnitMgmtResetStatsGroup = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 2, 20, 6), Sub10StatsGroup()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10UnitMgmtResetStatsGroup.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtResetStatsGroup.setDescription("This is used to reset specific statistics when set prior to submitting\n                    sub10UnitMgmtResetAction = resetStatistics(4).\n                    \n                    For reset of all stats sub10UnitMgmtResetStatsGroup = 'statsGroupAll'.")
sub10UnitMgmtResetAlarmsType = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 2, 20, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("resetAlarmTypeAll", 1), ("resetAlarmTypeFixed", 2), ("resetAlarmTypeUser", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10UnitMgmtResetAlarmsType.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtResetAlarmsType.setDescription('This is used to reset specific alarm configuration when set prior to submitting\n                    sub10UnitMgmtResetAction = resetAlarmConfig(5).\n                    \n                    For reset of all alarms sub10UnitMgmtResetAlarmsType = resetAlarmTypeAll(1).')
sub10EthLclStatusTable = MibTable((1, 3, 6, 1, 4, 1, 39003, 4, 1, 1, 1), )
if mibBuilder.loadTexts: sub10EthLclStatusTable.setStatus('current')
if mibBuilder.loadTexts: sub10EthLclStatusTable.setDescription('This table defines the local status objects of the ethernet interface.')
sub10EthLclStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39003, 4, 1, 1, 1, 1), ).setIndexNames((0, "SUB10SYSTEMS-MIB", "sub10EthIfIndex"))
if mibBuilder.loadTexts: sub10EthLclStatusEntry.setStatus('current')
if mibBuilder.loadTexts: sub10EthLclStatusEntry.setDescription('An entry (row) in the sub10EthLclStatusTable.')
sub10EthLclLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 1, 1, 1, 1, 1), Sub10OperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthLclLinkStatus.setStatus('current')
if mibBuilder.loadTexts: sub10EthLclLinkStatus.setDescription('The status of the ethernet link. Synonymous with interfaces OperState')
sub10EthLclMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 1, 1, 1, 1, 2), Sub10MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthLclMacAddress.setStatus('current')
if mibBuilder.loadTexts: sub10EthLclMacAddress.setDescription('The MAC address of the local ethernet interface. Synonymous with interfaces ifPhysAddress')
sub10EthLclSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 1, 1, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthLclSpeed.setStatus('current')
if mibBuilder.loadTexts: sub10EthLclSpeed.setDescription('The estimated speed of the local ethernet interface in bits per second. Synonymous with interfaces ifSpeed')
sub10EthLclDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 1, 1, 1, 1, 4), Sub10Duplex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthLclDuplex.setStatus('current')
if mibBuilder.loadTexts: sub10EthLclDuplex.setDescription('The duplex operation of the local ethernet interface')
sub10EthLclMDI = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 1, 1, 1, 1, 5), Sub10MDIType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthLclMDI.setStatus('current')
if mibBuilder.loadTexts: sub10EthLclMDI.setDescription('The MDI/MDIX state of the local ethernet interface')
sub10EthIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 1, 1, 1, 1, 6), Sub10EthInterfaceIndex())
if mibBuilder.loadTexts: sub10EthIfIndex.setStatus('current')
if mibBuilder.loadTexts: sub10EthIfIndex.setDescription('A unique value, greater than zero, for each ethernet interface.  It\n                    is recommended that values are assigned contiguously\n                    starting from 1. This is used as an index to the ethernet based\n                    enterprise MIB tables and will reflect the number of physical\n                    ethernet ports.')
sub10EthRmtStatusTable = MibTable((1, 3, 6, 1, 4, 1, 39003, 4, 1, 2, 1), )
if mibBuilder.loadTexts: sub10EthRmtStatusTable.setStatus('current')
if mibBuilder.loadTexts: sub10EthRmtStatusTable.setDescription('This table defines the remote status objects of the ethernet interface.')
sub10EthRmtStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39003, 4, 1, 2, 1, 1), ).setIndexNames((0, "SUB10SYSTEMS-MIB", "sub10EthIfIndex"))
if mibBuilder.loadTexts: sub10EthRmtStatusEntry.setStatus('current')
if mibBuilder.loadTexts: sub10EthRmtStatusEntry.setDescription('An entry (row) in the sub10EthRmtStatusTable.')
sub10EthRmtLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 1, 2, 1, 1, 1), Sub10OperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthRmtLinkStatus.setStatus('current')
if mibBuilder.loadTexts: sub10EthRmtLinkStatus.setDescription('The status of the remote ethernet interface. Synonymous but\n                    not identical with interfaces OperState on the remote unit')
sub10EthRmtMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 1, 2, 1, 1, 2), Sub10MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthRmtMacAddress.setStatus('current')
if mibBuilder.loadTexts: sub10EthRmtMacAddress.setDescription('The MAC address of the remote ethernet interface. Synonymous\n                    with interfaces ifPhysAddress on the remote unit.')
sub10EthRmtSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 1, 2, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthRmtSpeed.setStatus('current')
if mibBuilder.loadTexts: sub10EthRmtSpeed.setDescription('The estimated speed of the remote ethernet interface in\n                    bits per second. Synonymous with interfaces ifSpeed on the remote unit')
sub10EthRmtDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 1, 2, 1, 1, 4), Sub10Duplex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthRmtDuplex.setStatus('current')
if mibBuilder.loadTexts: sub10EthRmtDuplex.setDescription('The duplex operation of the remote ethernet interface')
sub10EthRmtMDI = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 1, 2, 1, 1, 5), Sub10MDIType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthRmtMDI.setStatus('current')
if mibBuilder.loadTexts: sub10EthRmtMDI.setDescription('The MDI/MDIX state of the remote ethernet interface')
sub10EthMgmtPhyTable = MibTable((1, 3, 6, 1, 4, 1, 39003, 4, 2, 1, 1), )
if mibBuilder.loadTexts: sub10EthMgmtPhyTable.setStatus('current')
if mibBuilder.loadTexts: sub10EthMgmtPhyTable.setDescription('This table defines the status objects of the ethernet interface.')
sub10EthMgmtPhyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39003, 4, 2, 1, 1, 1), ).setIndexNames((0, "SUB10SYSTEMS-MIB", "sub10EthIfIndex"))
if mibBuilder.loadTexts: sub10EthMgmtPhyEntry.setStatus('current')
if mibBuilder.loadTexts: sub10EthMgmtPhyEntry.setDescription('An entry (row) in the sub10EthMgmtPhyTable.')
sub10EthMgmtPhyAutoNeg = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 2, 1, 1, 1, 1), Sub10State().clone('stateDisabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10EthMgmtPhyAutoNeg.setStatus('current')
if mibBuilder.loadTexts: sub10EthMgmtPhyAutoNeg.setDescription('Auto-negotiation of ethernet interface parameters.')
sub10EthMgmtPhySpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 2, 1, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10EthMgmtPhySpeed.setStatus('current')
if mibBuilder.loadTexts: sub10EthMgmtPhySpeed.setDescription('Speed of the ethernet interface in bits per second used\n                    only when sub10UnitMgmtPhyAutoNeg=disabled.')
sub10EthMgmtPhyDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 2, 1, 1, 1, 3), Sub10Duplex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10EthMgmtPhyDuplex.setStatus('current')
if mibBuilder.loadTexts: sub10EthMgmtPhyDuplex.setDescription('The duplex operation of the ethernet interface used\n                    only when sub10UnitMgmtPhyAutoNeg=disabled.')
sub10EthMgmtPhyMDI = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 2, 1, 1, 1, 4), Sub10MDIType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10EthMgmtPhyMDI.setStatus('current')
if mibBuilder.loadTexts: sub10EthMgmtPhyMDI.setDescription('The duplex operation of the ethernet interface used\n                    only when sub10UnitMgmtPhyAutoNeg=disabled.')
sub10EthMgmtVlanFiltering = MibScalar((1, 3, 6, 1, 4, 1, 39003, 4, 2, 2, 1), Sub10State().clone('stateDisabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10EthMgmtVlanFiltering.setStatus('current')
if mibBuilder.loadTexts: sub10EthMgmtVlanFiltering.setDescription('VLAN filtering on the ethernet interface.\n                    This applies to user traffic only not management traffic however\n                    to enable VLAN filtering a Unit Management VLAN configuration\n                    must be set. See sub10UnitMgmtVlan.\n                    \n                    IMPORTANT: This object is controlled by transaction management.\n                    Any changes to this object must be transactionally acknowledged\n                    following a successful set thus protecting against loss of\n                    communication with the unit. To acknowledge the transaction\n                    set the object sub10UnitMgmtTransaction to transactionCommit(2).')
sub10EthMgmtVlanDefaultEnabled = MibScalar((1, 3, 6, 1, 4, 1, 39003, 4, 2, 2, 2), Sub10State().clone('stateDisabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10EthMgmtVlanDefaultEnabled.setStatus('current')
if mibBuilder.loadTexts: sub10EthMgmtVlanDefaultEnabled.setDescription('Enable Default VLAN tagging and untagging on the ethernet interface.\n                    Only valid when sub10EthMgmtVlanFiltering is enabled.\n                    \n                    Default VAN tagging allows manipulation of untagged traffic ingressing\n                    the interface by applying the specified Default VLAN Id, priority and\n                    DEI and manipulation of traffic egressing the ethernet interface that\n                    is tagged with the Default VLAN by stripping off the VLAN and transmitting\n                    as untagged traffic.\n                    \n                    IMPORTANT: This object is controlled by transaction management.\n                    Any changes to this object must be transactionally acknowledged\n                    following a successful set thus protecting against loss of\n                    communication with the unit. To acknowledge the transaction\n                    set the object sub10UnitMgmtTransaction to transactionCommit(2).')
sub10EthMgmtVlanDefaultId = MibScalar((1, 3, 6, 1, 4, 1, 39003, 4, 2, 2, 3), Sub10VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10EthMgmtVlanDefaultId.setStatus('current')
if mibBuilder.loadTexts: sub10EthMgmtVlanDefaultId.setDescription('The default vlan id which is tagged to all incoming untagged\n                    user traffic ingressing the ethernet interface. The default VLAN\n                    is also untagged from all user traffic egressing the ethernet\n                    interface.\n                    \n                    The default VLAN must be present in the allowed VLAN table\n                    sub10EthMgmtVlanAllowedTable and is only valid when\n                    sub10EthMgmtVlanDefaultEnabled and sub10EthMgmtVlanFiltering are enabled.\n                    \n                    IMPORTANT: This object is controlled by transaction management.\n                    Any changes to this object must be transactionally acknowledged\n                    following a successful set thus protecting against loss of\n                    communication with the unit. To acknowledge the transaction\n                    set the object sub10UnitMgmtTransaction to transactionCommit(2).')
sub10EthMgmtVlanDefaultPriority = MibScalar((1, 3, 6, 1, 4, 1, 39003, 4, 2, 2, 4), Sub10VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10EthMgmtVlanDefaultPriority.setStatus('current')
if mibBuilder.loadTexts: sub10EthMgmtVlanDefaultPriority.setDescription('The default vlan priority used when tagging the default VLAN\n                    to all incoming untagged user traffic ingressing the ethernet interface.\n                    \n                    Only valid when sub10EthMgmtVlanDefaultEnabled and sub10EthMgmtVlanFiltering are enabled.\n                    \n                    IMPORTANT: This object is controlled by transaction management.\n                    Any changes to this object must be transactionally acknowledged\n                    following a successful set thus protecting against loss of\n                    communication with the unit. To acknowledge the transaction\n                    set the object sub10UnitMgmtTransaction to transactionCommit(2).')
sub10EthMgmtVlanDefaultDEI = MibScalar((1, 3, 6, 1, 4, 1, 39003, 4, 2, 2, 5), Sub10State().clone('stateDisabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10EthMgmtVlanDefaultDEI.setStatus('current')
if mibBuilder.loadTexts: sub10EthMgmtVlanDefaultDEI.setDescription('The default vlan drop eligible indicator used when tagging the default VLAN\n                    to all incoming untagged user traffic ingressing the ethernet interface.\n                    \n                    Only valid when sub10EthMgmtVlanDefaultEnabled and sub10EthMgmtVlanFiltering are enabled.\n                    \n                    IMPORTANT: This object is controlled by transaction management.\n                    Any changes to this object must be transactionally acknowledged\n                    following a successful set thus protecting against loss of\n                    communication with the unit. To acknowledge the transaction\n                    set the object sub10UnitMgmtTransaction to transactionCommit(2).')
sub10EthMgmtVlanIngressAction = MibScalar((1, 3, 6, 1, 4, 1, 39003, 4, 2, 2, 6), Sub10VlanTagAction().clone('tag')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthMgmtVlanIngressAction.setStatus('current')
if mibBuilder.loadTexts: sub10EthMgmtVlanIngressAction.setDescription('The manipulation action used for all ethernet frames\n                    being received (ingress) in from the ethernet interface.\n                    Only if the default VLAN is set sub10EthMgmtVlanDefaultVlanId > 0\n                    and sub10EthMgmtVlanFiltering is enabled.\n                    \n                    untag      - untag all incoming frames that are tagged with sub10EthMgmtVlanDefaultVlanId.\n                    tag        - tag all incoming untagged frames with sub10EthMgmtVlanDefaultVlanId,\n                    ,sub10EthMgmtVlanDefaultPriority and sub10EthMgmtVlanDefaultDEI.\n                    and priority sub10EthMgmtTagWithVlanPriority.\n                    drop       - discard the frame, do not forward.\n                    \n                    This is currently fixed to tag all ingressing traffic\n                    if a default VLAN is set sub10EthMgmtVlanDefaultVlanId > 0.')
sub10EthMgmtVlanEgressAction = MibScalar((1, 3, 6, 1, 4, 1, 39003, 4, 2, 2, 7), Sub10VlanTagAction().clone('untag')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthMgmtVlanEgressAction.setStatus('current')
if mibBuilder.loadTexts: sub10EthMgmtVlanEgressAction.setDescription('The manipulation action used for all ethernet frames\n                    being transmitted (egress) out of the ethernet interface.\n                    Only if the default VLAN is set sub10EthMgmtVlanDefaultVlanId > 0\n                    and sub10EthMgmtVlanFiltering is enabled.\n                    \n                    untag      - untag all outgoing frames that are tagged with sub10EthMgmtVlanDefaultVlanId.\n                    tag        - tag all outgoing untagged frames with sub10EthMgmtVlanDefaultVlanId,\n                    ,sub10EthMgmtVlanDefaultPriority and sub10EthMgmtVlanDefaultDEI.\n                    and priority sub10EthMgmtTagWithVlanPriority.\n                    drop       - discard the frame, do not forward.\n                    \n                    This is currently fixed to untag all egressing traffic.')
sub10EthMgmtVlanAllowedTable = MibTable((1, 3, 6, 1, 4, 1, 39003, 4, 2, 2, 8), )
if mibBuilder.loadTexts: sub10EthMgmtVlanAllowedTable.setStatus('current')
if mibBuilder.loadTexts: sub10EthMgmtVlanAllowedTable.setDescription('This tables defines the VLANs that are allowed to pass through the ethernet\n                    interface. The table is only used when the value of sub10EthMgmtVlanFiltering is enabled.\n                    \n                    The table only contains an entry if the specific vlan is to be allowed to flow through the interface.\n                    If a VLAN is not in the table then the ethernet frame is dropped.\n                    \n                    If sub10EthMgmtVlanFiltering is enabled this table must contain at least 1 VLAN.\n                    \n                    IMPORTANT: This object is controlled by transaction management.\n                    Any changes to this object must be transactionally acknowledged\n                    following a successful set thus protecting against loss of\n                    communication with the unit. To acknowledge the transaction\n                    set the object sub10UnitMgmtTransaction to transactionCommit(2).')
sub10EthMgmtVlanAllowedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39003, 4, 2, 2, 8, 1), ).setIndexNames((0, "SUB10SYSTEMS-MIB", "sub10EthMgmtVlanAllowedIndex"))
if mibBuilder.loadTexts: sub10EthMgmtVlanAllowedEntry.setStatus('current')
if mibBuilder.loadTexts: sub10EthMgmtVlanAllowedEntry.setDescription('An entry (row) in the sub10UnitMgmtVlanTable.\n                    If the rowStatus is set to notInService(2) then\n                    the entry is not valid and no columnar objects are returned.')
sub10EthMgmtVlanAllowedIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 2, 2, 8, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)))
if mibBuilder.loadTexts: sub10EthMgmtVlanAllowedIndex.setStatus('current')
if mibBuilder.loadTexts: sub10EthMgmtVlanAllowedIndex.setDescription('The sub10EthMgmtVlanTable index.')
sub10EthMgmtVlanAllowedRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 2, 2, 8, 1, 2), RowStatus().clone('notInService')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sub10EthMgmtVlanAllowedRowStatus.setStatus('current')
if mibBuilder.loadTexts: sub10EthMgmtVlanAllowedRowStatus.setDescription("The row status of this row.\n                    All table rows are fixed in size\n                    and as such do not require conceptual row\n                    creation. Instead the RowStatus is set to\n                    active(1) or notInService(2) which indicates\n                    that the row is operationally in use or not.\n                    The default value is notInService(2) meaning\n                    the entry is not used by default. To make\n                    the entry valid with already consistent row\n                    objects this object must be set to active(1).\n                    If row objects are not yet set to consistent\n                    values the row status must first be set to\n                    createAndWait(5) after which the row status is\n                    set to 'notReady(3)'. When in the 'notReady(3)'\n                    state row objects can then be set to consistent\n                    values before row status can be set to active(1).\n                    To delete the row set this to destroy(6).")
sub10EthMgmtVlanAllowedId = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 2, 2, 8, 1, 3), Sub10VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10EthMgmtVlanAllowedId.setStatus('current')
if mibBuilder.loadTexts: sub10EthMgmtVlanAllowedId.setDescription("The vlan id which is allowed to pass through the ethernet interface.\n                    Duplicate vlan ids in multiple entries of the table with RowStatus 'active(1)\n                    are not allowed and any attempt to set a duplicate active entry will be rejected.\n                    \n                    IMPORTANT: This object is controlled by transaction management.\n                    Any changes to this object must be transactionally acknowledged\n                    following a successful set thus protecting against loss of\n                    communication with the unit. To acknowledge the transaction\n                    set the object sub10UnitMgmtTransaction to transactionCommit(2).")
sub10EthMgmtQoSActiveState = MibScalar((1, 3, 6, 1, 4, 1, 39003, 4, 2, 3, 1), Sub10State().clone('stateDisabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10EthMgmtQoSActiveState.setStatus('current')
if mibBuilder.loadTexts: sub10EthMgmtQoSActiveState.setDescription('This defines if QoS is enabled or disabled.')
sub10EthMgmtQoSMode = MibScalar((1, 3, 6, 1, 4, 1, 39003, 4, 2, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("qosEthernet", 1), ("qosIPMPLS", 2))).clone('qosEthernet')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10EthMgmtQoSMode.setStatus('current')
if mibBuilder.loadTexts: sub10EthMgmtQoSMode.setDescription('Defines the mode of QoS action to be applied to\n                    the QoS queues.\n                    \n                    qosEthernet:\n                    \n                    - Traffic is mapped to QoS queues\n                    - based on Ethernet protocol\n                    - VLANId and/or PCP Bits.\n                    - See sub10EthMgmtQoSVlanMappingTable\n                    - and sub10EthMgmtQoSPCPMappingTable.\n                    \n                    qosIPMPLS:\n                    \n                    - Traffic is mapped to QoS queues\n                    - based on IP protocol\n                    - DSCP markings and/or MPLS traffic\n                    - classes.\n                    \n                    See sub10EthMgmtQoSDSCPMappingTable and sub10EthMgmtQoSMPLSMappingTable.')
sub10EthMgmtQoSUntaggedQueue = MibScalar((1, 3, 6, 1, 4, 1, 39003, 4, 2, 3, 3), Sub10QoSQueue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10EthMgmtQoSUntaggedQueue.setStatus('current')
if mibBuilder.loadTexts: sub10EthMgmtQoSUntaggedQueue.setDescription("This defines the QoS queue where all untagged\n                    ethernet frames are placed.\n                    \n                    Only valid when sub10EthMgmtQoSQType = 'qosEthernet'\n                    \n                    For tagged frames see sub10EthMgmtQoSVlanMappingTable\n                    and sub10EthMgmtQoSPCPMappingTable.")
sub10EthMgmtQoSQTable = MibTable((1, 3, 6, 1, 4, 1, 39003, 4, 2, 3, 4), )
if mibBuilder.loadTexts: sub10EthMgmtQoSQTable.setStatus('current')
if mibBuilder.loadTexts: sub10EthMgmtQoSQTable.setDescription('This table configures the characteristics of a Quality of\n                    Service queue. There are a fixed number of 8 queues in total\n                    and therefore 8 entries in this table indexed 1 thru 8.\n                    \n                    The number of queue entries in the table is given by the value\n                    of sub10EthMgmtQoSQNumber.')
sub10EthMgmtQoSQEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39003, 4, 2, 3, 4, 1), ).setIndexNames((0, "SUB10SYSTEMS-MIB", "sub10EthMgmtQoSQIndex"))
if mibBuilder.loadTexts: sub10EthMgmtQoSQEntry.setStatus('current')
if mibBuilder.loadTexts: sub10EthMgmtQoSQEntry.setDescription('An entry (row) in the sub10EthMgmtQoSQTable.')
sub10EthMgmtQoSQIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 2, 3, 4, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: sub10EthMgmtQoSQIndex.setStatus('current')
if mibBuilder.loadTexts: sub10EthMgmtQoSQIndex.setDescription('The queue number used as an index, fixed to\n                    8 standard queues.')
sub10EthMgmtQoSQSchedulingType = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 2, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("qosSPQ", 1), ("qosDWRR", 2))).clone('qosSPQ')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10EthMgmtQoSQSchedulingType.setStatus('current')
if mibBuilder.loadTexts: sub10EthMgmtQoSQSchedulingType.setDescription('The scheduling discipline applied to the\n                    queue.\n                    \n                    qosSPQ - Strict Priority Queueing\n                    \n                    Queues are serviced in strict priority\n                    order. Packets on the queue are servicedd\n                    and transmitted until either the queue is empty\n                    or a packet is found in a higher queue,\n                    in the latter case the higher priority queue\n                    take precedence.\n                    \n                    Individual PCP (CoS) bits or DSCP markings in each\n                    packet are not observed within the\n                    queue and are not therefore transmitted first\n                    according to their relative priority. Instead\n                    it is possible to map certain VLANs, PCP bits\n                    and DSCP marking to certain queues to achieve\n                    priority transmission.\n                    \n                    The mapping of VLAN, PCP bits or DSCP markings\n                    to a specific queue are managed using\n                    tables :\n                    \n                    sub10EthMgmtQoSVlanTable\n                    sub10EthMgmtQoSPCPTable\n                    sub10EthMgmtQoSDSCPTable\n                    \n                    qosDWRR - Deficit Weighted Round Robin\n                    \n                    A weighting is allocated to each queue\n                    which defines the number of bytes\n                    that can be transmitted from that\n                    queue in a single visit of the\n                    scheduler. This is used to calculate\n                    a quantum which is the number of bytes\n                    that can always be transmitted in each visit\n                    of the scheduler.\n                    \n                    A deficit counter is also maintained across\n                    visits from the scheduler, at each visit\n                    the quantum is added to the deficit. This\n                    ensures that on average a queue that is not\n                    loaded to its intended capacity will utilise\n                    the calculated deficit at times when the queue\n                    is busy. At startup Deficit counter is initialised\n                    to zero.\n                    \n                    On each visit of the scheduler packets are\n                    transmitted according to the following\n                    rules...\n                    \n                    Deficit = Quantum + Deficit.\n                    \n                    while (Queue not empty and PktLength <= Deficit)\n                    Transmit Pkt\n                    Deficit = Deficit - PktLength\n                    \n                    Remaining Deficit is carried forward to the\n                    next visit of the scheduler.\n                    \n                    Effective behaviour of DWRR is as follows:\n                    \n                    1. Available bandwidth is shared fairly when queues\n                    are not saturated\n                    2. Lower priority saturated queues will transmit\n                    at their allocated service rate.\n                    3. Any remaining bandwidth is shared amongst\n                    unsaturated queues.\n                    \n                    NB. In a mixed configuration where some queues are\n                    configured as Strict Priority (SP) and some configured\n                    as Deficit Weighted Round Robin (DWRR), then queues configured\n                    as SP should all be higher in scheduling priority than those\n                    configured as DWRR. This is to avoid the lower priority queues\n                    having transmission precedence over higher priority queues.')
sub10EthMgmtQoSQDWRRWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 2, 3, 4, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10EthMgmtQoSQDWRRWeight.setStatus('current')
if mibBuilder.loadTexts: sub10EthMgmtQoSQDWRRWeight.setDescription("A percentage weighting factor used to calculate\n                    the quantum value used to calculate the starting\n                    transmission credit at each visit of the queue\n                    scheduler. Only for scheduling type  Deficit\n                    Weighted Round Robin.\n                    sub10EthMgmtQoSQSchedulingType = 'qosDWRR'\n                    \n                    The weighting is calculated as the ratio of the\n                    transmit rate configured as a percentage. The\n                    internal implementation of DWRR will calculate\n                    the correct quantum based on total bandwidth\n                    available.")
sub10EthMgmtQoSQCongestionPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 2, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("qosTailDrop", 1))).clone('qosTailDrop')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10EthMgmtQoSQCongestionPolicy.setStatus('current')
if mibBuilder.loadTexts: sub10EthMgmtQoSQCongestionPolicy.setDescription('The policy used when a queue is congested.')
sub10EthMgmtQoSQSizeMax = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 2, 3, 4, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)).clone(100)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthMgmtQoSQSizeMax.setStatus('current')
if mibBuilder.loadTexts: sub10EthMgmtQoSQSizeMax.setDescription('The maximum size of the queue expressed in packets.')
sub10EthMgmtQoSQLen = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 2, 3, 4, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthMgmtQoSQLen.setStatus('current')
if mibBuilder.loadTexts: sub10EthMgmtQoSQLen.setDescription('The current length of the queue expressed in packets.')
sub10EthMgmtQoSVlanMappingNumber = MibScalar((1, 3, 6, 1, 4, 1, 39003, 4, 2, 3, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthMgmtQoSVlanMappingNumber.setStatus('current')
if mibBuilder.loadTexts: sub10EthMgmtQoSVlanMappingNumber.setDescription('The number of sub10EthMgmtQoSVlanMappingTable table entries present\n                    on this system.')
sub10EthMgmtQoSVlanTable = MibTable((1, 3, 6, 1, 4, 1, 39003, 4, 2, 3, 6), )
if mibBuilder.loadTexts: sub10EthMgmtQoSVlanTable.setStatus('current')
if mibBuilder.loadTexts: sub10EthMgmtQoSVlanTable.setDescription('This table configures the Quality of Service\n                    Vlan to queue mapping.\n                    \n                    Multiple Vlans may be mapped to any queue. On egress of the\n                    ethernet interface all pkts tagged with the specific Vlan Id\n                    are inserted onto the specified queue.\n                    \n                    See sub10EthMgmtQoSQTable for more information on QoS\n                    queueing.\n                    \n                    The number of entries in the table is given by the value\n                    of sub10EthMgmtQoSVlanNumber.')
sub10EthMgmtQoSVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39003, 4, 2, 3, 6, 1), ).setIndexNames((0, "SUB10SYSTEMS-MIB", "sub10EthMgmtQoSVlanIndex"))
if mibBuilder.loadTexts: sub10EthMgmtQoSVlanEntry.setStatus('current')
if mibBuilder.loadTexts: sub10EthMgmtQoSVlanEntry.setDescription('An entry (row) in the sub10EthMgmtQoSVlanMappingTable.')
sub10EthMgmtQoSVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 2, 3, 6, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: sub10EthMgmtQoSVlanIndex.setStatus('current')
if mibBuilder.loadTexts: sub10EthMgmtQoSVlanIndex.setDescription('The sub10EthMgmtQoSVlanMappingTable index.')
sub10EthMgmtQoSVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 2, 3, 6, 1, 2), Sub10VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10EthMgmtQoSVlanId.setStatus('current')
if mibBuilder.loadTexts: sub10EthMgmtQoSVlanId.setDescription('The vlan id used as an index to the table and which\n                    is egressing through the ethernet interface and which\n                    should be placed on the queue specified by\n                    sub10EthMgmtQoSVlanQueueIndex.')
sub10EthMgmtQoSVlanQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 2, 3, 6, 1, 3), Sub10QoSQueue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10EthMgmtQoSVlanQueue.setStatus('current')
if mibBuilder.loadTexts: sub10EthMgmtQoSVlanQueue.setDescription('The queue number which identifies the specific queue where the packets\n                    that are tagged with the Vlan Id specified in sub10EthMgmtQoSVlanId\n                    are inserted.')
sub10EthMgmtQoSPCPTable = MibTable((1, 3, 6, 1, 4, 1, 39003, 4, 2, 3, 8), )
if mibBuilder.loadTexts: sub10EthMgmtQoSPCPTable.setStatus('current')
if mibBuilder.loadTexts: sub10EthMgmtQoSPCPTable.setDescription('This table configures the Quality of Service Priority\n                    Code Point (PCP) or Pbits to queue mapping.\n                    \n                    Multiple PCPs may be mapped to the same queue but the same\n                    PCP cannot be mapped to more than one queue. This table\n                    has a maximum size of 8 entries with exactly 1 entry per\n                    PCP bit.\n                    \n                    On egress of the ethernet interface all pkts tagged with the\n                    specific PCP bit (irrespective of its Vlan Id) is inserted\n                    on the specified queue.\n                    \n                    See sub10EthMgmtQoSQTable for more information on QoS\n                    queueing.\n                    \n                    The number of entries in the table is given by the value\n                    of sub10EthMgmtQoSPCPMappingNumber (maximum 8).')
sub10EthMgmtQoSPCPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39003, 4, 2, 3, 8, 1), ).setIndexNames((0, "SUB10SYSTEMS-MIB", "sub10EthMgmtQoSPCPIndex"))
if mibBuilder.loadTexts: sub10EthMgmtQoSPCPEntry.setStatus('current')
if mibBuilder.loadTexts: sub10EthMgmtQoSPCPEntry.setDescription('An entry (row) in the sub10EthMgmtQoSPCPMappingTable.')
sub10EthMgmtQoSPCPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 2, 3, 8, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: sub10EthMgmtQoSPCPIndex.setStatus('current')
if mibBuilder.loadTexts: sub10EthMgmtQoSPCPIndex.setDescription('The sub10EthMgmtQoSPCPTable index.\n                    This represents the PCP bits priority\n                    value.\n                    \n                    sub10EthMgmtQoSPCPIndex(1)=PCPBit(0)\n                    sub10EthMgmtQoSPCPIndex(2)=PCPBit(1)\n                    sub10EthMgmtQoSPCPIndex(3)=PCPBit(2)\n                    sub10EthMgmtQoSPCPIndex(4)=PCPBit(3)\n                    sub10EthMgmtQoSPCPIndex(5)=PCPBit(4)\n                    sub10EthMgmtQoSPCPIndex(6)=PCPBit(5)\n                    sub10EthMgmtQoSPCPIndex(7)=PCPBit(6)\n                    sub10EthMgmtQoSPCPIndex(8)=PCPBit(7)')
sub10EthMgmtQoSPCPQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 2, 3, 8, 1, 2), Sub10QoSQueue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10EthMgmtQoSPCPQueue.setStatus('current')
if mibBuilder.loadTexts: sub10EthMgmtQoSPCPQueue.setDescription('The queue number in the sub10EthMgmtQoSQTable\n                    which identifies the specific queue where the packets\n                    tagged with the specific PCP bit sub10EthMgmtQoSPCPIndex\n                    are inserted. There are up to 8 queues.')
sub10EthMgmtQoSDSCPMappingNumber = MibScalar((1, 3, 6, 1, 4, 1, 39003, 4, 2, 3, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthMgmtQoSDSCPMappingNumber.setStatus('current')
if mibBuilder.loadTexts: sub10EthMgmtQoSDSCPMappingNumber.setDescription('The number of sub10EthMgmtQoSDSCPMappingTable table entries present\n                    on this system.')
sub10EthMgmtQoSDSCPTable = MibTable((1, 3, 6, 1, 4, 1, 39003, 4, 2, 3, 10), )
if mibBuilder.loadTexts: sub10EthMgmtQoSDSCPTable.setStatus('current')
if mibBuilder.loadTexts: sub10EthMgmtQoSDSCPTable.setDescription('This table configures the Quality of Service Differentiated\n                    Services Code Point (DSCP) to queue mapping.\n                    \n                    Multiple DSCPs may be mapped to the same queue but the same\n                    DSCP cannot be mapped to more than one queue. This table has\n                    a maximum size of 64 with 1 entry per DSCP value.\n                    \n                    On egress of the ethernet interface all pkts tagged with the\n                    specific DSCP marking in the IP header will be inserted\n                    onto the specified queue.\n                    \n                    See sub10EthMgmtQoSQTable for more information on QoS\n                    queueing.\n                    \n                    The number of entries in the table is given by the value\n                    of sub10EthMgmtQoSDSCPMappingNumber (maximum 64).')
sub10EthMgmtQoSDSCPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39003, 4, 2, 3, 10, 1), ).setIndexNames((0, "SUB10SYSTEMS-MIB", "sub10EthMgmtQoSDSCPIndex"))
if mibBuilder.loadTexts: sub10EthMgmtQoSDSCPEntry.setStatus('current')
if mibBuilder.loadTexts: sub10EthMgmtQoSDSCPEntry.setDescription('An entry (row) in the sub10EthMgmtQoSDSCPMappingTable.')
sub10EthMgmtQoSDSCPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 2, 3, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)))
if mibBuilder.loadTexts: sub10EthMgmtQoSDSCPIndex.setStatus('current')
if mibBuilder.loadTexts: sub10EthMgmtQoSDSCPIndex.setDescription('The sub10EthMgmtQoSDSCPTable index.')
sub10EthMgmtQoSDSCPMarking = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 2, 3, 10, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10EthMgmtQoSDSCPMarking.setStatus('current')
if mibBuilder.loadTexts: sub10EthMgmtQoSDSCPMarking.setDescription('The DSCP value used as an index to the table. This defines\n                    the DSCP value which when egressing through the ethernet\n                    interface is placed on the queue specified by\n                    sub10EthMgmtQoSVlanQueueIndex.')
sub10EthMgmtQoSDSCPQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 2, 3, 10, 1, 3), Sub10QoSQueue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10EthMgmtQoSDSCPQueue.setStatus('current')
if mibBuilder.loadTexts: sub10EthMgmtQoSDSCPQueue.setDescription('The queue number in the sub10EthMgmtQoSQTable\n                    which identifies the specific queue where the packets\n                    tagged with the specific DSCP marking sub10EthMgmtQoSDSCP\n                    are inserted.')
sub10EthMgmtQoSMPLSMappingNumber = MibScalar((1, 3, 6, 1, 4, 1, 39003, 4, 2, 3, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthMgmtQoSMPLSMappingNumber.setStatus('current')
if mibBuilder.loadTexts: sub10EthMgmtQoSMPLSMappingNumber.setDescription('The number of sub10EthMgmtQoSMPLSMappingTable table entries present\n                    on this system.This is equivelent to the number of MPLS Traffic\n                    classes')
sub10EthMgmtQoSMPLSTable = MibTable((1, 3, 6, 1, 4, 1, 39003, 4, 2, 3, 12), )
if mibBuilder.loadTexts: sub10EthMgmtQoSMPLSTable.setStatus('current')
if mibBuilder.loadTexts: sub10EthMgmtQoSMPLSTable.setDescription('This table configures the Quality of Service Multi-Protocol\n                    Label Switching protocol (MPLS) Traffic Class (TC) to queue mapping.\n                    \n                    Multiple MPLS TCs may be mapped to the same queue but the same\n                    MPLS TC cannot be mapped to more than one queue. This table has\n                    a maximum size of 64 with 1 entry per MPLS TC value.\n                    \n                    On egress of the ethernet interface all pkts tagged with the\n                    specific MPLS TC in the IP header will be inserted\n                    onto the specified queue.\n                    \n                    See sub10EthMgmtQoSQTable for more information on QoS\n                    queueing.\n                    \n                    The number of entries in the table is given by the value\n                    of sub10EthMgmtQoSMPLSMappingNumber (maximum 8).')
sub10EthMgmtQoSMPLSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39003, 4, 2, 3, 12, 1), ).setIndexNames((0, "SUB10SYSTEMS-MIB", "sub10EthMgmtQoSMPLSIndex"))
if mibBuilder.loadTexts: sub10EthMgmtQoSMPLSEntry.setStatus('current')
if mibBuilder.loadTexts: sub10EthMgmtQoSMPLSEntry.setDescription('An entry (row) in the sub10EthMgmtQoSMPLSMappingTable.')
sub10EthMgmtQoSMPLSIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 2, 3, 12, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: sub10EthMgmtQoSMPLSIndex.setStatus('current')
if mibBuilder.loadTexts: sub10EthMgmtQoSMPLSIndex.setDescription('The sub10EthMgmtQoSMPLSMappingTable index.')
sub10EthMgmtQoSMPLSTrafficClass = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 2, 3, 12, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10EthMgmtQoSMPLSTrafficClass.setStatus('current')
if mibBuilder.loadTexts: sub10EthMgmtQoSMPLSTrafficClass.setDescription('The MPLS Traffic Class value used as an index to the table.\n                    This defines the MPLS TC value which when egressing through\n                    the ethernet interface is placed on the queue specified by\n                    sub10EthMgmtQoSVlanQueueIndex.')
sub10EthMgmtQoSMPLSQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 2, 3, 12, 1, 3), Sub10QoSQueue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10EthMgmtQoSMPLSQueue.setStatus('current')
if mibBuilder.loadTexts: sub10EthMgmtQoSMPLSQueue.setDescription('The queue number in the sub10EthMgmtQoSQTable\n                    which identifies the specific queue where the packets\n                    tagged with the specific MPLS Traffic Class\n                    sub10EthMgmtQoSMPLSTrafficClass are inserted.')
sub10EthMgmtStatsActiveTable = MibTable((1, 3, 6, 1, 4, 1, 39003, 4, 2, 4, 1), )
if mibBuilder.loadTexts: sub10EthMgmtStatsActiveTable.setStatus('current')
if mibBuilder.loadTexts: sub10EthMgmtStatsActiveTable.setDescription('This table maintains an entry for each Ethernet\n                    statistic that is enabled and active.')
sub10EthMgmtStatsActiveEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39003, 4, 2, 4, 1, 1), ).setIndexNames((0, "SUB10SYSTEMS-MIB", "sub10EthMgmtStatsActiveIndex"))
if mibBuilder.loadTexts: sub10EthMgmtStatsActiveEntry.setStatus('current')
if mibBuilder.loadTexts: sub10EthMgmtStatsActiveEntry.setDescription("An entry in the sub10EthMgmtStatsActiveTable.\n                    Each entry represents an object instance of ethernet\n                    stats and it's current state.")
sub10EthMgmtStatsActiveIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 2, 4, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 30)))
if mibBuilder.loadTexts: sub10EthMgmtStatsActiveIndex.setStatus('current')
if mibBuilder.loadTexts: sub10EthMgmtStatsActiveIndex.setDescription('The number of ethernet stats objects\n                    used as an index to this table.')
sub10EthMgmtStatsActiveName = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 2, 4, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthMgmtStatsActiveName.setStatus('current')
if mibBuilder.loadTexts: sub10EthMgmtStatsActiveName.setDescription('The stats object name. This is the name of the\n                    ethernet stats object in the sub10EthernetStatsCurrent\n                    group.')
sub10EthMgmtStatsActiveState = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 2, 4, 1, 1, 3), Sub10State().clone('stateEnabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10EthMgmtStatsActiveState.setStatus('current')
if mibBuilder.loadTexts: sub10EthMgmtStatsActiveState.setDescription("If set to 'enabled' the statistic is active.")
sub10EthStatsTimeElapsed = MibScalar((1, 3, 6, 1, 4, 1, 39003, 4, 3, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStatsTimeElapsed.setStatus('current')
if mibBuilder.loadTexts: sub10EthStatsTimeElapsed.setDescription("The time that has elapsed from the beginning\n                    of the statistical measurement period.\n                    \n                    This is normally time from just after the last reboot time\n                    when the statistics module begins it's calculations.\n                    \n                    If, for some reason, such as an adjustment in the\n                    system's time-of-day clock, the current interval\n                    exceeds the maximum value, the agent will return\n                    the maximum value.")
sub10EthernetStatsCurrTable = MibTable((1, 3, 6, 1, 4, 1, 39003, 4, 3, 2, 1), )
if mibBuilder.loadTexts: sub10EthernetStatsCurrTable.setStatus('current')
if mibBuilder.loadTexts: sub10EthernetStatsCurrTable.setDescription('This table defines the current stats objects of the ethernet interface.')
sub10EthernetStatsCurrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39003, 4, 3, 2, 1, 1), ).setIndexNames((0, "SUB10SYSTEMS-MIB", "sub10EthIfIndex"))
if mibBuilder.loadTexts: sub10EthernetStatsCurrEntry.setStatus('current')
if mibBuilder.loadTexts: sub10EthernetStatsCurrEntry.setDescription('An entry (row) in the sub10EthernetStatsCurrTable.')
sub10EthStatsCurrRxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 2, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStatsCurrRxOctets.setStatus('current')
if mibBuilder.loadTexts: sub10EthStatsCurrRxOctets.setDescription("The number of octets received over the Ethernet interface\n                    since the last power cycle / reset of the unit.\n                    \n                    For more information refer to online techical documentation at\n                    http://www.ti.com. Product c667xDSP 'Gigabit Ethernet\n                    Switch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStatsCurrRxGoodFrms = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStatsCurrRxGoodFrms.setStatus('current')
if mibBuilder.loadTexts: sub10EthStatsCurrRxGoodFrms.setDescription("The number of good frames received over the Ethernet interface\n                    since the last power cycle / reset of the unit.\n                    \n                    For more information refer to online techical documentation at\n                    http://www.ti.com. Product c667xDSP 'Gigabit Ethernet\n                    Switch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStatsCurrRxBcastFrms = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStatsCurrRxBcastFrms.setStatus('current')
if mibBuilder.loadTexts: sub10EthStatsCurrRxBcastFrms.setDescription("The number of broadcast frames received over the Ethernet interface\n                    since the last power cycle / reset of the unit.\n                    \n                    For more information refer to online techical documentation at\n                    http://www.ti.com. Product c667xDSP 'Gigabit Ethernet\n                    Switch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStatsCurrRxMcastFrms = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStatsCurrRxMcastFrms.setStatus('current')
if mibBuilder.loadTexts: sub10EthStatsCurrRxMcastFrms.setDescription("The number of multicast frames received over the Ethernet interface\n                    since the last power cycle / reset of the unit.\n                    \n                    For more information refer to online techical documentation at\n                    http://www.ti.com. Product c667xDSP 'Gigabit Ethernet\n                    Switch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStatsCurrRxPauseFrms = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStatsCurrRxPauseFrms.setStatus('current')
if mibBuilder.loadTexts: sub10EthStatsCurrRxPauseFrms.setDescription("The number of Pause frames received over the Ethernet interface\n                    since the last power cycle / reset of the unit.\n                    \n                    For more information refer to online techical documentation at\n                    http://www.ti.com. Product c667xDSP 'Gigabit Ethernet\n                    Switch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStatsCurrRxCRCErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStatsCurrRxCRCErrs.setStatus('current')
if mibBuilder.loadTexts: sub10EthStatsCurrRxCRCErrs.setDescription("The number of CRC errors received over the Ethernet interface\n                    since the last power cycle / reset of the unit.\n                    \n                    For more information refer to online techical documentation at\n                    http://www.ti.com. Product c667xDSP 'Gigabit Ethernet\n                    Switch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStatsCurrRxAlignErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStatsCurrRxAlignErrs.setStatus('current')
if mibBuilder.loadTexts: sub10EthStatsCurrRxAlignErrs.setDescription("The number of Alignment coding errors received over the Ethernet interface\n                    since the last power cycle / reset of the unit.\n                    \n                    For more information refer to online techical documentation at\n                    http://www.ti.com. Product c667xDSP 'Gigabit Ethernet\n                    Switch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStatsCurrRxOversized = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStatsCurrRxOversized.setStatus('current')
if mibBuilder.loadTexts: sub10EthStatsCurrRxOversized.setDescription("The number of Oversized frames received over the Ethernet interface\n                    since the last power cycle / reset of the unit.\n                    \n                    For more information refer to online techical documentation at\n                    http://www.ti.com. Product c667xDSP 'Gigabit Ethernet\n                    Switch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStatsCurrRxJabberFrms = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStatsCurrRxJabberFrms.setStatus('current')
if mibBuilder.loadTexts: sub10EthStatsCurrRxJabberFrms.setDescription("The number of Jabber frames received over the Ethernet interface\n                    since the last power cycle / reset of the unit.\n                    \n                    For more information refer to online techical documentation at\n                    http://www.ti.com. Product c667xDSP 'Gigabit Ethernet\n                    Switch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStatsCurrRxUndersized = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStatsCurrRxUndersized.setStatus('current')
if mibBuilder.loadTexts: sub10EthStatsCurrRxUndersized.setDescription("The number of Undersized frames received over the Ethernet interface\n                    since the last power cycle / reset of the unit.\n                    \n                    For more information refer to online techical documentation at\n                    http://www.ti.com. Product c667xDSP 'Gigabit Ethernet\n                    Switch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStatsCurrRxFragments = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStatsCurrRxFragments.setStatus('current')
if mibBuilder.loadTexts: sub10EthStatsCurrRxFragments.setDescription("The number of frame fragments received over the Ethernet interface\n                    since the last power cycle / reset of the unit.\n                    \n                    For more information refer to online techical documentation at\n                    http://www.ti.com. Product c667xDSP 'Gigabit Ethernet\n                    Switch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStatsCurrRxSOFOvrns = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStatsCurrRxSOFOvrns.setStatus('current')
if mibBuilder.loadTexts: sub10EthStatsCurrRxSOFOvrns.setDescription("The number of frames with Start of Frame (SOF) Overruns\n                    received over the Ethernet interface or were dropped due to\n                    FIFO resource limitations since the last power cycle / reset of the unit.\n                    \n                    For more information refer to online techical documentation at\n                    http://www.ti.com. Product c667xDSP 'Gigabit Ethernet\n                    Switch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStatsCurrTxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStatsCurrTxOctets.setStatus('current')
if mibBuilder.loadTexts: sub10EthStatsCurrTxOctets.setDescription("The number of octets transmitted over the Ethernet interface\n                    since the last power cycle / reset of the unit.\n                    \n                    For more information refer to online techical documentation at\n                    http://www.ti.com. Product c667xDSP 'Gigabit Ethernet\n                    Switch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStatsCurrTxGoodFrms = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 2, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStatsCurrTxGoodFrms.setStatus('current')
if mibBuilder.loadTexts: sub10EthStatsCurrTxGoodFrms.setDescription("The number of ethernet frames transmitted over the Ethernet interface\n                    since the last power cycle / reset of the unit.\n                    \n                    For more information refer to online techical documentation at\n                    http://www.ti.com. Product c667xDSP 'Gigabit Ethernet\n                    Switch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStatsCurrTxBcastFrms = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 2, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStatsCurrTxBcastFrms.setStatus('current')
if mibBuilder.loadTexts: sub10EthStatsCurrTxBcastFrms.setDescription("The number of broadcast frames transmitted over the Ethernet interface\n                    since the last power cycle / reset of the unit.\n                    \n                    For more information refer to online techical documentation at\n                    http://www.ti.com. Product c667xDSP 'Gigabit Ethernet\n                    Switch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStatsCurrTxMcastFrms = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 2, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStatsCurrTxMcastFrms.setStatus('current')
if mibBuilder.loadTexts: sub10EthStatsCurrTxMcastFrms.setDescription("The number of multicast frames transmitted over the Ethernet interface\n                    since the last power cycle / reset of the unit.\n                    \n                    For more information refer to online techical documentation at\n                    http://www.ti.com. Product c667xDSP 'Gigabit Ethernet\n                    Switch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStatsCurrTxPauseFrms = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 2, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStatsCurrTxPauseFrms.setStatus('current')
if mibBuilder.loadTexts: sub10EthStatsCurrTxPauseFrms.setDescription("The number of Pause frames transmitted over the Ethernet interface\n                    since the last power cycle / reset of the unit.\n                    \n                    For more information refer to online techical documentation at\n                    http://www.ti.com. Product c667xDSP 'Gigabit Ethernet\n                    Switch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStatsCurrTxDeferred = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 2, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStatsCurrTxDeferred.setStatus('current')
if mibBuilder.loadTexts: sub10EthStatsCurrTxDeferred.setDescription("The number of Deferred frames transmitted over the Ethernet interface\n                    since the last power cycle / reset of the unit.\n                    \n                    For more information refer to online techical documentation at\n                    http://www.ti.com. Product c667xDSP 'Gigabit Ethernet\n                    Switch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStatsCurrTxCollsn = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 2, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStatsCurrTxCollsn.setStatus('current')
if mibBuilder.loadTexts: sub10EthStatsCurrTxCollsn.setDescription("The number of Collision frames transmitted over the Ethernet interface\n                    since the last power cycle / reset of the unit.\n                    \n                    For more information refer to online techical documentation at\n                    http://www.ti.com. Product c667xDSP 'Gigabit Ethernet\n                    Switch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStatsCurrTxSnglCollsn = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 2, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStatsCurrTxSnglCollsn.setStatus('current')
if mibBuilder.loadTexts: sub10EthStatsCurrTxSnglCollsn.setDescription("The number of Single Collision frames transmitted over the Ethernet interface\n                    since the last power cycle / reset of the unit.\n                    \n                    For more information refer to online techical documentation at\n                    http://www.ti.com. Product c667xDSP 'Gigabit Ethernet\n                    Switch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStatsCurrTxMlplCollsn = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 2, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStatsCurrTxMlplCollsn.setStatus('current')
if mibBuilder.loadTexts: sub10EthStatsCurrTxMlplCollsn.setDescription("The number of Multiple Collision frames transmitted over the Ethernet interface\n                    since the last power cycle / reset of the unit.\n                    \n                    For more information refer to online techical documentation at\n                    http://www.ti.com. Product c667xDSP 'Gigabit Ethernet\n                    Switch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStatsCurrTxExsvCollsn = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 2, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStatsCurrTxExsvCollsn.setStatus('current')
if mibBuilder.loadTexts: sub10EthStatsCurrTxExsvCollsn.setDescription("The number of Excessive Collision for which transmission was\n                    abandoned over the Ethernet interface since the last power\n                    cycle / reset of the unit.\n                    \n                    For more information refer to online techical documentation at\n                    http://www.ti.com. Product c667xDSP 'Gigabit Ethernet\n                    Switch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStatsCurrTxLtCollsn = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 2, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStatsCurrTxLtCollsn.setStatus('current')
if mibBuilder.loadTexts: sub10EthStatsCurrTxLtCollsn.setDescription("The number of Late Collision for which transmission was\n                    abandoned over the Ethernet interface since the last power\n                    cycle / reset of the unit.\n                    \n                    For more information refer to online techical documentation at\n                    http://www.ti.com. Product c667xDSP 'Gigabit Ethernet\n                    Switch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStatsCurrTxCSenseErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 2, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStatsCurrTxCSenseErrs.setStatus('current')
if mibBuilder.loadTexts: sub10EthStatsCurrTxCSenseErrs.setDescription("The number of Carrier Sense Errored frames transmitted over the\n                    Ethernet interface since the last power cycle / reset of the unit.\n                    \n                    For more information refer to online techical documentation at\n                    http://www.ti.com. Product c667xDSP 'Gigabit Ethernet\n                    Switch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStatsCurrPkts64Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 2, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStatsCurrPkts64Octets.setStatus('current')
if mibBuilder.loadTexts: sub10EthStatsCurrPkts64Octets.setDescription("The total number of 64-byte frames received and transmitted on the\n                    Ethernet interface since the last power cycle / reset of the unit.\n                    \n                    For more information refer to online techical documentation at\n                    http://www.ti.com. Product c667xDSP 'Gigabit Ethernet\n                    Switch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStatsCurrPkts65T127 = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 2, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStatsCurrPkts65T127.setStatus('current')
if mibBuilder.loadTexts: sub10EthStatsCurrPkts65T127.setDescription("The total number of frames of size 65 to 127 bytes received\n                    and transmitted on the Ethernet interface since the last\n                    power cycle / reset of the unit.\n                    \n                    For more information refer to online techical documentation at\n                    http://www.ti.com. Product c667xDSP 'Gigabit Ethernet\n                    Switch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStatsCurrPkts128T255 = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 2, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStatsCurrPkts128T255.setStatus('current')
if mibBuilder.loadTexts: sub10EthStatsCurrPkts128T255.setDescription("The total number of frames of size 128 to 255 bytes received\n                    and transmitted on the Ethernet interface since the last\n                    power cycle / reset of the unit.\n                    \n                    For more information refer to online techical documentation at\n                    http://www.ti.com. Product c667xDSP 'Gigabit Ethernet\n                    Switch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStatsCurrPkts256T511 = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 2, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStatsCurrPkts256T511.setStatus('current')
if mibBuilder.loadTexts: sub10EthStatsCurrPkts256T511.setDescription("The total number of frames of size 256 to 511 bytes received\n                    and transmitted on the Ethernet interface since the last power\n                    cycle / reset of the unit.\n                    \n                    For more information refer to online techical documentation at\n                    http://www.ti.com. Product c667xDSP 'Gigabit Ethernet\n                    Switch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStatsCurrPkts512T1023 = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 2, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStatsCurrPkts512T1023.setStatus('current')
if mibBuilder.loadTexts: sub10EthStatsCurrPkts512T1023.setDescription("The total number of frames of size 512 to 1023 bytes received\n                    and transmitted on the Ethernet interface since the last power\n                    cycle / reset of the unit.\n                    \n                    For more information refer to online techical documentation at\n                    http://www.ti.com. Product c667xDSP 'Gigabit Ethernet\n                    Switch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStatsCurrPkts1024TMax = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 2, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStatsCurrPkts1024TMax.setStatus('current')
if mibBuilder.loadTexts: sub10EthStatsCurrPkts1024TMax.setDescription("The total number of frames of size  1024 to RX_MAXLEN bytes for\n                    receive or 1024 up for transmit on the Ethernet interface\n                    since the last power cycle / reset of the unit.\n                    \n                    For more information refer to online techical documentation at\n                    http://www.ti.com. Product c667xDSP 'Gigabit Ethernet\n                    Switch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStatsCurrRxMbps = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 2, 1, 1, 31), Sub10ThroughputMbps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStatsCurrRxMbps.setStatus('current')
if mibBuilder.loadTexts: sub10EthStatsCurrRxMbps.setDescription('The Rx throughput in Mbps in this second.')
sub10EthStatsCurrTxMbps = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 2, 1, 1, 32), Sub10ThroughputMbps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStatsCurrTxMbps.setStatus('current')
if mibBuilder.loadTexts: sub10EthStatsCurrTxMbps.setDescription('The Tx throughput in Mbps in this second.')
sub10EthStatsCurrRxMbpsMin = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 2, 1, 1, 33), Sub10ThroughputMbps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStatsCurrRxMbpsMin.setStatus('current')
if mibBuilder.loadTexts: sub10EthStatsCurrRxMbpsMin.setDescription('The minimum Rx throughput in Mbps in the last rolling minute.')
sub10EthStatsCurrRxMbpsMax = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 2, 1, 1, 34), Sub10ThroughputMbps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStatsCurrRxMbpsMax.setStatus('current')
if mibBuilder.loadTexts: sub10EthStatsCurrRxMbpsMax.setDescription('The maximum Rx throughput in Mbps in the last rolling minute.')
sub10EthStatsCurrRxMbpsAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 2, 1, 1, 35), Sub10ThroughputMbps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStatsCurrRxMbpsAvg.setStatus('current')
if mibBuilder.loadTexts: sub10EthStatsCurrRxMbpsAvg.setDescription('The average Rx throughput in Mbps in the last rolling minute.')
sub10EthStatsCurrTxMbpsMin = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 2, 1, 1, 36), Sub10ThroughputMbps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStatsCurrTxMbpsMin.setStatus('current')
if mibBuilder.loadTexts: sub10EthStatsCurrTxMbpsMin.setDescription('The minimum Tx throughput in Mbps in the last rolling minute.')
sub10EthStatsCurrTxMbpsMax = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 2, 1, 1, 37), Sub10ThroughputMbps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStatsCurrTxMbpsMax.setStatus('current')
if mibBuilder.loadTexts: sub10EthStatsCurrTxMbpsMax.setDescription('The maximum Tx throughput in Mbps in the last rolling minute.')
sub10EthStatsCurrTxMbpsAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 2, 1, 1, 38), Sub10ThroughputMbps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStatsCurrTxMbpsAvg.setStatus('current')
if mibBuilder.loadTexts: sub10EthStatsCurrTxMbpsAvg.setDescription('The average Tx throughput in Mbps in the last rolling minute.')
sub10EthStatsCurrRmtRxMbpsAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 2, 1, 1, 39), Sub10ThroughputMbps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStatsCurrRmtRxMbpsAvg.setStatus('current')
if mibBuilder.loadTexts: sub10EthStatsCurrRmtRxMbpsAvg.setDescription('The average Rx throughput of the remote unit in Mbps in the last rolling minute.')
sub10EthStatsCurrRmtTxMbpsAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 2, 1, 1, 40), Sub10ThroughputMbps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStatsCurrRmtTxMbpsAvg.setStatus('current')
if mibBuilder.loadTexts: sub10EthStatsCurrRmtTxMbpsAvg.setDescription('The average Tx throughput of the remote unit in Mbps in the last rolling minute.')
sub10EthStats15mHistIntvls = MibScalar((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats15mHistIntvls.setStatus('current')
if mibBuilder.loadTexts: sub10EthStats15mHistIntvls.setDescription('The number of valid table entries in sub10EthStats15mHistTable\n                    on this system. There is one entry per 15 minute interval.\n                    If the unit has been running for a minimum of 24 hours\n                    and collecting valid data then the number of entries will be 96,\n                    this represents a total maximum of 24 hours worth of data.')
sub10EthStats15mHistTable = MibTable((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 1, 2), )
if mibBuilder.loadTexts: sub10EthStats15mHistTable.setStatus('current')
if mibBuilder.loadTexts: sub10EthStats15mHistTable.setDescription("This table maintains a history of Ethernet statistics\n                    based on 15 minute intervals. There are a maximum\n                    of 96 intervals which represent 24 hours of data.\n                    \n                    This table along with the 1m and 1d tables provide a\n                    history of the performance of the radio interface. This\n                    information may then be post processed and used as a\n                    troubleshooting tool.\n                    \n                    An entry in the table represents a 15 minute interval\n                    where each interval is synchronised to the clock on the\n                    hour. There are up to 96 intervals starting at 1. The\n                    number of valid entries in the table is given by the value\n                    of sub10EthStats15mHistIntvls of which the minimum\n                    is 0 and the maximum is 96 therefore providing\n                    up to a maximum of 24 hours of 15 minute interval data.\n                    \n                    The first entry indexed by 1 represents the most recent\n                    completed 15 minute interval. At the end of each interval\n                    all entries of 'index' are copied into entry 'index+1'. If the\n                    number of valid intervals is 96 then the least recent interval\n                    entry is summarised into 24 hour stats and then discarded.")
sub10EthStats15mHistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 1, 2, 1), ).setIndexNames((0, "SUB10SYSTEMS-MIB", "sub10EthIfIndex"), (0, "SUB10SYSTEMS-MIB", "sub10EthStats15mHistIntvl"))
if mibBuilder.loadTexts: sub10EthStats15mHistEntry.setStatus('current')
if mibBuilder.loadTexts: sub10EthStats15mHistEntry.setDescription('An entry in the sub10EthStats15mHistTable.\n                    Each entry represents 15 minute of performance\n                    management data where the first entry with index=1\n                    is the most recent 15 minute interval and the last\n                    entry with index=n (up to 96) is the least recent\n                    15 minute interval. The number of valid intervals\n                    is sub10EthStats15mHistIntvls.')
sub10EthStats15mHistIntvl = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 1, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: sub10EthStats15mHistIntvl.setStatus('current')
if mibBuilder.loadTexts: sub10EthStats15mHistIntvl.setDescription('The interval number used as an index to this\n                    table. Interval numbers start at 1 (the most\n                    recent 15 minute interval) and have a maximum value of 96\n                    (the least recent 15 minute interval).')
sub10EthStats15mHistTime = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 1, 2, 1, 2), Sub10DateTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats15mHistTime.setStatus('current')
if mibBuilder.loadTexts: sub10EthStats15mHistTime.setDescription('The local system time when this 15m history entry was created.\n                    This represents the end of the 15 minute interval for which the\n                    associated stats with the same sub10EthStats15mHistIntvl\n                    table index are relevant.')
sub10EthStats15mHistRxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 1, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats15mHistRxOctets.setStatus('current')
if mibBuilder.loadTexts: sub10EthStats15mHistRxOctets.setDescription("The number of octets received over the Ethernet interface\n                    in this 15m interval.\n                    \n                    For more information refer to online techical documentation at\n                    http://www.ti.com. Product c667xDSP 'Gigabit Ethernet\n                    Switch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStats15mHistRxGoodFrms = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 1, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats15mHistRxGoodFrms.setStatus('current')
if mibBuilder.loadTexts: sub10EthStats15mHistRxGoodFrms.setDescription("The number of good frames received over the Ethernet interface\n                    in this 15m interval.\n                    \n                    For more information refer to online techical documentation at\n                    http://www.ti.com. Product c667xDSP 'Gigabit Ethernet\n                    Switch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStats15mHistRxBcastFrms = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 1, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats15mHistRxBcastFrms.setStatus('current')
if mibBuilder.loadTexts: sub10EthStats15mHistRxBcastFrms.setDescription("The number of broadcast frames received over the Ethernet interface\n                    in this 15m interval.\n                    \n                    For more information refer to online techical documentation at\n                    http://www.ti.com. Product c667xDSP 'Gigabit Ethernet\n                    Switch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStats15mHistRxMcastFrms = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 1, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats15mHistRxMcastFrms.setStatus('current')
if mibBuilder.loadTexts: sub10EthStats15mHistRxMcastFrms.setDescription("The number of multicast frames received over the Ethernet interface\n                    in this 15m interval.\n                    \n                    For more information refer to online techical documentation at\n                    http://www.ti.com. Product c667xDSP 'Gigabit Ethernet\n                    Switch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStats15mHistRxPauseFrms = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 1, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats15mHistRxPauseFrms.setStatus('current')
if mibBuilder.loadTexts: sub10EthStats15mHistRxPauseFrms.setDescription("The number of Pause frames received over the Ethernet interface\n                    in this 15m interval.\n                    \n                    For more information refer to online techical documentation at\n                    http://www.ti.com. Product c667xDSP 'Gigabit Ethernet\n                    Switch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStats15mHistRxCRCErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 1, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats15mHistRxCRCErrs.setStatus('current')
if mibBuilder.loadTexts: sub10EthStats15mHistRxCRCErrs.setDescription("The number of CRC errors received over the Ethernet interface\n                    in this 15m interval.\n                    \n                    For more information refer to online techical documentation at\n                    http://www.ti.com. Product c667xDSP 'Gigabit Ethernet\n                    Switch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStats15mHistRxAlignErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 1, 2, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats15mHistRxAlignErrs.setStatus('current')
if mibBuilder.loadTexts: sub10EthStats15mHistRxAlignErrs.setDescription("The number of Alignment coding errors received over the Ethernet interface\n                    in this 15m interval.\n                    \n                    For more information refer to online techical documentation at\n                    http://www.ti.com. Product c667xDSP 'Gigabit Ethernet\n                    Switch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStats15mHistRxOversized = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 1, 2, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats15mHistRxOversized.setStatus('current')
if mibBuilder.loadTexts: sub10EthStats15mHistRxOversized.setDescription("The number of Oversized frames received over the Ethernet interface\n                    in this 15m interval.\n                    \n                    For more information refer to online techical documentation at\n                    http://www.ti.com. Product c667xDSP 'Gigabit Ethernet\n                    Switch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStats15mHistRxJabberFrms = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 1, 2, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats15mHistRxJabberFrms.setStatus('current')
if mibBuilder.loadTexts: sub10EthStats15mHistRxJabberFrms.setDescription("The number of Jabber frames received over the Ethernet interface\n                    in this 15m interval.\n                    \n                    For more information refer to online techical documentation at\n                    http://www.ti.com. Product c667xDSP 'Gigabit Ethernet\n                    Switch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStats15mHistRxUndersized = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 1, 2, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats15mHistRxUndersized.setStatus('current')
if mibBuilder.loadTexts: sub10EthStats15mHistRxUndersized.setDescription("The number of Undersized frames received over the Ethernet interface\n                    in this 15m interval.\n                    \n                    For more information refer to online techical documentation at\n                    http://www.ti.com. Product c667xDSP 'Gigabit Ethernet\n                    Switch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStats15mHistRxFragments = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 1, 2, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats15mHistRxFragments.setStatus('current')
if mibBuilder.loadTexts: sub10EthStats15mHistRxFragments.setDescription("The number of frame fragments received over the Ethernet interface\n                    in this 15m interval.\n                    \n                    For more information refer to online techical documentation at\n                    http://www.ti.com. Product c667xDSP 'Gigabit Ethernet\n                    Switch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStats15mHistRxSOFOvrns = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 1, 2, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats15mHistRxSOFOvrns.setStatus('current')
if mibBuilder.loadTexts: sub10EthStats15mHistRxSOFOvrns.setDescription("The number of frames with Start of Frame (SOF) Overruns\n                    received over the Ethernet interface or were dropped due to\n                    FIFO resource limitations in this 15m interval.\n                    \n                    For more information refer to online techical documentation at\n                    http://www.ti.com. Product c667xDSP 'Gigabit Ethernet\n                    Switch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStats15mHistTxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 1, 2, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats15mHistTxOctets.setStatus('current')
if mibBuilder.loadTexts: sub10EthStats15mHistTxOctets.setDescription("The number of octets transmitted over the Ethernet interface\n                    in this 15m interval.\n                    \n                    For more information refer to online techical documentation at\n                    http://www.ti.com. Product c667xDSP 'Gigabit Ethernet\n                    Switch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStats15mHistTxGoodFrms = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 1, 2, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats15mHistTxGoodFrms.setStatus('current')
if mibBuilder.loadTexts: sub10EthStats15mHistTxGoodFrms.setDescription("The number of ethernet frames transmitted over the Ethernet interface\n                    in this 15m interval.\n                    \n                    For more information refer to online techical documentation at\n                    http://www.ti.com. Product c667xDSP 'Gigabit Ethernet\n                    Switch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStats15mHistTxBcastFrms = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 1, 2, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats15mHistTxBcastFrms.setStatus('current')
if mibBuilder.loadTexts: sub10EthStats15mHistTxBcastFrms.setDescription("The number of broadcast frames transmitted over the Ethernet interface\n                    in this 15m interval.\n                    \n                    For more information refer to online techical documentation at\n                    http://www.ti.com. Product c667xDSP 'Gigabit Ethernet\n                    Switch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStats15mHistTxMcastFrms = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 1, 2, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats15mHistTxMcastFrms.setStatus('current')
if mibBuilder.loadTexts: sub10EthStats15mHistTxMcastFrms.setDescription("The number of multicast frames transmitted over the Ethernet interface\n                    in this 15m interval.\n                    \n                    For more information refer to online techical documentation at\n                    http://www.ti.com. Product c667xDSP 'Gigabit Ethernet\n                    Switch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStats15mHistTxPauseFrms = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 1, 2, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats15mHistTxPauseFrms.setStatus('current')
if mibBuilder.loadTexts: sub10EthStats15mHistTxPauseFrms.setDescription("The number of Pause frames transmitted over the Ethernet interface\n                    in this 15m interval.\n                    \n                    For more information refer to online techical documentation at\n                    http://www.ti.com. Product c667xDSP 'Gigabit Ethernet\n                    Switch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStats15mHistTxDeferred = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 1, 2, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats15mHistTxDeferred.setStatus('current')
if mibBuilder.loadTexts: sub10EthStats15mHistTxDeferred.setDescription("The number of Deferred frames transmitted over the Ethernet interface\n                    in this 15m interval.\n                    \n                    For more information refer to online techical documentation at\n                    http://www.ti.com. Product c667xDSP 'Gigabit Ethernet\n                    Switch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStats15mHistTxCollsn = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 1, 2, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats15mHistTxCollsn.setStatus('current')
if mibBuilder.loadTexts: sub10EthStats15mHistTxCollsn.setDescription("The number of Collision frames transmitted over the Ethernet interface\n                    in this 15m interval.\n                    \n                    For more information refer to online techical documentation at\n                    http://www.ti.com. Product c667xDSP 'Gigabit Ethernet\n                    Switch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStats15mHistTxSnglCollsn = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 1, 2, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats15mHistTxSnglCollsn.setStatus('current')
if mibBuilder.loadTexts: sub10EthStats15mHistTxSnglCollsn.setDescription("The number of Single Collision frames transmitted over the Ethernet interface\n                    in this 15m interval.\n                    \n                    For more information refer to online techical documentation at\n                    http://www.ti.com. Product c667xDSP 'Gigabit Ethernet\n                    Switch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStats15mHistTxMlplCollsn = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 1, 2, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats15mHistTxMlplCollsn.setStatus('current')
if mibBuilder.loadTexts: sub10EthStats15mHistTxMlplCollsn.setDescription("The number of Multiple Collision frames transmitted over the Ethernet interface\n                    in this 15m interval.\n                    \n                    For more information refer to online techical documentation at\n                    http://www.ti.com. Product c667xDSP 'Gigabit Ethernet\n                    Switch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStats15mHistTxExsvCollsn = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 1, 2, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats15mHistTxExsvCollsn.setStatus('current')
if mibBuilder.loadTexts: sub10EthStats15mHistTxExsvCollsn.setDescription("The number of Excessive Collision for which transmission was\n                    abandoned over the Ethernet interface in this 1 minute interval.\n                    5\n                    For more information refer to online techical documentation at\n                    http://www.ti.com. Product c667xDSP 'Gigabit Ethernet\n                    Switch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStats15mHistTxLtCollsn = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 1, 2, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats15mHistTxLtCollsn.setStatus('current')
if mibBuilder.loadTexts: sub10EthStats15mHistTxLtCollsn.setDescription("The number of Late Collision for which transmission was\n                    abandoned over the Ethernet interface in this 15 minute interval.\n                    \n                    For more information refer to online techical documentation at\n                    http://www.ti.com. Product c667xDSP 'Gigabit Ethernet\n                    Switch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStats15mHistTxCSenseErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 1, 2, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats15mHistTxCSenseErrs.setStatus('current')
if mibBuilder.loadTexts: sub10EthStats15mHistTxCSenseErrs.setDescription("The number of Carrier Sense Errored frames transmitted over the\n                    Ethernet interface in this 15m interval.\n                    \n                    For more information refer to online techical documentation at\n                    http://www.ti.com. Product c667xDSP 'Gigabit Ethernet\n                    Switch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStats15mHistPkts64Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 1, 2, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats15mHistPkts64Octets.setStatus('current')
if mibBuilder.loadTexts: sub10EthStats15mHistPkts64Octets.setDescription("The total number of 64-byte frames received and transmitted on the\n                    Ethernet interface in this 15m interval.\n                    \n                    For more information refer to online techical documentation at\n                    http://www.ti.com. Product c667xDSP 'Gigabit Ethernet\n                    Switch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStats15mHistPkts65T127 = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 1, 2, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats15mHistPkts65T127.setStatus('current')
if mibBuilder.loadTexts: sub10EthStats15mHistPkts65T127.setDescription("The total number of frames of size 65 to 127 bytes received\n                    and transmitted on the Ethernet interface in this 15 minute interval.\n                    \n                    For more information refer to online techical documentation at\n                    http://www.ti.com. Product c667xDSP 'Gigabit Ethernet\n                    Switch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStats15mHistPkts128T255 = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 1, 2, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats15mHistPkts128T255.setStatus('current')
if mibBuilder.loadTexts: sub10EthStats15mHistPkts128T255.setDescription("The total number of frames of size 128 to 255 bytes received\n                    and transmitted on the Ethernet interface in this 15 minute interval.\n                    \n                    For more information refer to online techical documentation at\n                    http://www.ti.com. Product c667xDSP 'Gigabit Ethernet\n                    Switch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStats15mHistPkts256T511 = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 1, 2, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats15mHistPkts256T511.setStatus('current')
if mibBuilder.loadTexts: sub10EthStats15mHistPkts256T511.setDescription("The total number of frames of size 256 to 511 bytes received\n                    and transmitted on the Ethernet interface in this 15 minute interval.\n                    \n                    For more information refer to online techical documentation at\n                    http://www.ti.com. Product c667xDSP 'Gigabit Ethernet\n                    Switch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStats15mHistPkts512T1023 = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 1, 2, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats15mHistPkts512T1023.setStatus('current')
if mibBuilder.loadTexts: sub10EthStats15mHistPkts512T1023.setDescription("The total number of frames of size 512 to 1023 bytes received\n                    and transmitted on the Ethernet interface in this 15 minute interval.\n                    \n                    For more information refer to online techical documentation at\n                    http://www.ti.com. Product c667xDSP 'Gigabit Ethernet\n                    Switch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStats15mHistPkts1024TMax = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 1, 2, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats15mHistPkts1024TMax.setStatus('current')
if mibBuilder.loadTexts: sub10EthStats15mHistPkts1024TMax.setDescription("The total number of frames of size  1024 to RX_MAXLEN bytes for\n                    receive or 1024 up for transmit on the Ethernet interface\n                    in this 15m interval.\n                    \n                    For more information refer to online techical documentation at\n                    http://www.ti.com. Product c667xDSP 'Gigabit Ethernet\n                    Switch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStats15mHistRxMbpsMin = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 1, 2, 1, 33), Sub10ThroughputMbps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats15mHistRxMbpsMin.setStatus('current')
if mibBuilder.loadTexts: sub10EthStats15mHistRxMbpsMin.setDescription('The minimum Rx throughput in Mbps in this 15 minute interval.')
sub10EthStats15mHistRxMbpsMax = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 1, 2, 1, 34), Sub10ThroughputMbps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats15mHistRxMbpsMax.setStatus('current')
if mibBuilder.loadTexts: sub10EthStats15mHistRxMbpsMax.setDescription('The maximum Rx throughput in Mbps in this 15 minute interval.')
sub10EthStats15mHistRxMbpsAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 1, 2, 1, 35), Sub10ThroughputMbps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats15mHistRxMbpsAvg.setStatus('current')
if mibBuilder.loadTexts: sub10EthStats15mHistRxMbpsAvg.setDescription('The average Rx throughput in Mbps in this 15 minute interval.')
sub10EthStats15mHistTxMbpsMin = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 1, 2, 1, 36), Sub10ThroughputMbps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats15mHistTxMbpsMin.setStatus('current')
if mibBuilder.loadTexts: sub10EthStats15mHistTxMbpsMin.setDescription('The minimum Tx throughput in Mbps in this 15 minute interval.')
sub10EthStats15mHistTxMbpsMax = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 1, 2, 1, 37), Sub10ThroughputMbps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats15mHistTxMbpsMax.setStatus('current')
if mibBuilder.loadTexts: sub10EthStats15mHistTxMbpsMax.setDescription('The maximum Tx throughput in Mbps in this 15 minute interval.')
sub10EthStats15mHistTxMbpsAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 1, 2, 1, 38), Sub10ThroughputMbps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats15mHistTxMbpsAvg.setStatus('current')
if mibBuilder.loadTexts: sub10EthStats15mHistTxMbpsAvg.setDescription('The average Tx throughput in Mbps in this 15 minute interval.')
sub10EthStats1dHistIntvls = MibScalar((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 2, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats1dHistIntvls.setStatus('current')
if mibBuilder.loadTexts: sub10EthStats1dHistIntvls.setDescription('The number of valid table entries in sub10EthStats1dHistTable\n                    on this system. There is one entry per 1 day interval.\n                    \n                    If the unit has been running for a minimum  of 30 days\n                    and collecting valid data then the number of entries will be 30,\n                    this represents a total maximum of 30 days worth of data.')
sub10EthStats1dHistTable = MibTable((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 2, 2), )
if mibBuilder.loadTexts: sub10EthStats1dHistTable.setStatus('current')
if mibBuilder.loadTexts: sub10EthStats1dHistTable.setDescription("This table maintains a history of Radio statistics\n                    based on 1 day intervals. There are a maximum\n                    of 30 intervals which represent 30 days of data.\n                    \n                    This table along with the 1m and 15m tables provide a\n                    history of the performance of the radio interface. This\n                    information may then be post processed and used as a\n                    troubleshooting tool.\n                    \n                    An entry in the table represents a 1 day interval\n                    where each interval is synchronised to the clock on the\n                    hour. There are up to 30 intervals starting at 1. The\n                    number of valid entries in the table is given by the value\n                    of sub10EthStats1dHistIntvls of which the minimum\n                    is 0 and the maximum is 30 therefore providing\n                    up to a maximum of 30 days of 1 day interval data.\n                    \n                    The first entry indexed by 1 represents the most recent\n                    completed 1 day interval. At the end of each interval\n                    all entries of 'index' are copied into entry 'index+1'. If the\n                    number of valid intervals is 30 then the least recent interval\n                    entry is discarded.")
sub10EthStats1dHistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 2, 2, 1), ).setIndexNames((0, "SUB10SYSTEMS-MIB", "sub10EthIfIndex"), (0, "SUB10SYSTEMS-MIB", "sub10EthStats1dHistIntvl"))
if mibBuilder.loadTexts: sub10EthStats1dHistEntry.setStatus('current')
if mibBuilder.loadTexts: sub10EthStats1dHistEntry.setDescription('An entry in the sub10EthStats1dHistTable.\n                    Each entry represents 1 day of performance\n                    management data where the first entry with index=1\n                    is the most recent 1 day interval and the last\n                    entry with index=n (up to 30) is the least recent\n                    1 day interval.\n                    \n                    The number of valid intervals is given by the\n                    value of sub10EthStats1dHistIntvls.')
sub10EthStats1dHistIntvl = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 2, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 30)))
if mibBuilder.loadTexts: sub10EthStats1dHistIntvl.setStatus('current')
if mibBuilder.loadTexts: sub10EthStats1dHistIntvl.setDescription('The interval number used as an index to this\n                    table. Interval numbers start at 1 (the most\n                    recent 1 day interval) and have a maximum value of 30\n                    (the least recent 1 day interval).')
sub10EthStats1dHistTime = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 2, 2, 1, 2), Sub10DateTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats1dHistTime.setStatus('current')
if mibBuilder.loadTexts: sub10EthStats1dHistTime.setDescription('The local system time when this 1d history entry was created.\n                    This represents the end of the 1 day interval for which the\n                    associated stats with the same sub10EthStats1dHistIntvl\n                    table index are relevant.')
sub10EthStats1dHistRxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 2, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats1dHistRxOctets.setStatus('current')
if mibBuilder.loadTexts: sub10EthStats1dHistRxOctets.setDescription("The number of octets received over the Ethernet interface\n                    in this 1 day interval.\n                    \n                    For more information refer to online techical documentation at\n                    http://www.ti.com. Product c667xDSP 'Gigabit Ethernet\n                    Switch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStats1dHistRxGoodFrms = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 2, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats1dHistRxGoodFrms.setStatus('current')
if mibBuilder.loadTexts: sub10EthStats1dHistRxGoodFrms.setDescription("The number of good frames received over the Ethernet interface\n                    in this 1 day interval.\n                    \n                    For more information refer to online techical documentation at\n                    http://www.ti.com. Product c667xDSP 'Gigabit Ethernet\n                    Switch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStats1dHistRxBcastFrms = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 2, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats1dHistRxBcastFrms.setStatus('current')
if mibBuilder.loadTexts: sub10EthStats1dHistRxBcastFrms.setDescription("The number of broadcast frames received over the Ethernet interface\n                    in this 1 day interval.\n                    \n                    For more information refer to online techical documentation at\n                    http://www.ti.com. Product c667xDSP 'Gigabit Ethernet\n                    Switch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStats1dHistRxMcastFrms = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 2, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats1dHistRxMcastFrms.setStatus('current')
if mibBuilder.loadTexts: sub10EthStats1dHistRxMcastFrms.setDescription("The number of multicast frames received over the Ethernet interface\n                    in this 1 day interval.\n                    \n                    For more information refer to online techical documentation at\n                    http://www.ti.com. Product c667xDSP 'Gigabit Ethernet\n                    Switch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStats1dHistRxPauseFrms = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 2, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats1dHistRxPauseFrms.setStatus('current')
if mibBuilder.loadTexts: sub10EthStats1dHistRxPauseFrms.setDescription("The number of Pause frames received over the Ethernet interface\n                    in this 1 day interval.\n                    \n                    For more information refer to online techical documentation at\n                    http://www.ti.com. Product c667xDSP 'Gigabit Ethernet\n                    Switch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStats1dHistRxCRCErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 2, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats1dHistRxCRCErrs.setStatus('current')
if mibBuilder.loadTexts: sub10EthStats1dHistRxCRCErrs.setDescription("The number of CRC errors received over the Ethernet interface\n                    in this 1 day interval.\n                    \n                    For more information refer to online techical documentation at\n                    http://www.ti.com. Product c667xDSP 'Gigabit Ethernet\n                    Switch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStats1dHistRxAlignErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 2, 2, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats1dHistRxAlignErrs.setStatus('current')
if mibBuilder.loadTexts: sub10EthStats1dHistRxAlignErrs.setDescription("The number of Alignment coding errors received over the Ethernet interface\n                    in this 1 day interval.\n                    \n                    For more information refer to online techical documentation at\n                    http://www.ti.com. Product c667xDSP 'Gigabit Ethernet\n                    Switch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStats1dHistRxOversized = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 2, 2, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats1dHistRxOversized.setStatus('current')
if mibBuilder.loadTexts: sub10EthStats1dHistRxOversized.setDescription("The number of Oversized frames received over the Ethernet interface\n                    in this 1 day interval.\n                    \n                    For more information refer to online techical documentation at\n                    http://www.ti.com. Product c667xDSP 'Gigabit Ethernet\n                    Switch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStats1dHistRxJabberFrms = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 2, 2, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats1dHistRxJabberFrms.setStatus('current')
if mibBuilder.loadTexts: sub10EthStats1dHistRxJabberFrms.setDescription("The number of Jabber frames received over the Ethernet interface\n                    in this 1 day interval.\n                    \n                    For more information refer to online techical documentation at\n                    http://www.ti.com. Product c667xDSP 'Gigabit Ethernet\n                    Switch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStats1dHistRxUndersized = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 2, 2, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats1dHistRxUndersized.setStatus('current')
if mibBuilder.loadTexts: sub10EthStats1dHistRxUndersized.setDescription("The number of Undersized frames received over the Ethernet interface\n                    in this 1 day interval.\n                    \n                    For more information refer to online techical documentation at\n                    http://www.ti.com. Product c667xDSP 'Gigabit Ethernet\n                    Switch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStats1dHistRxFragments = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 2, 2, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats1dHistRxFragments.setStatus('current')
if mibBuilder.loadTexts: sub10EthStats1dHistRxFragments.setDescription("The number of frame fragments received over the Ethernet interface\n                    in this 1 day interval.\n                    \n                    For more information refer to online techical documentation at\n                    http://www.ti.com. Product c667xDSP 'Gigabit Ethernet\n                    Switch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStats1dHistRxSOFOvrns = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 2, 2, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats1dHistRxSOFOvrns.setStatus('current')
if mibBuilder.loadTexts: sub10EthStats1dHistRxSOFOvrns.setDescription("The number of frames with Start of Frame (SOF) Overruns\n                    received over the Ethernet interface or were dropped due to\n                    FIFO resource limitations in this 1 day interval.\n                    \n                    For more information refer to online techical documentation at\n                    http://www.ti.com. Product c667xDSP 'Gigabit Ethernet\n                    Switch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStats1dHistTxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 2, 2, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats1dHistTxOctets.setStatus('current')
if mibBuilder.loadTexts: sub10EthStats1dHistTxOctets.setDescription("The number of octets transmitted over the Ethernet interface\n                    in this 1 day interval.\n                    \n                    For more information refer to online techical documentation at\n                    http://www.ti.com. Product c667xDSP 'Gigabit Ethernet\n                    Switch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStats1dHistTxGoodFrms = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 2, 2, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats1dHistTxGoodFrms.setStatus('current')
if mibBuilder.loadTexts: sub10EthStats1dHistTxGoodFrms.setDescription("The number of ethernet frames transmitted over the Ethernet interface\n                    in this 1 day interval.\n                    \n                    For more information refer to online techical documentation at\n                    http://www.ti.com. Product c667xDSP 'Gigabit Ethernet\n                    Switch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStats1dHistTxBcastFrms = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 2, 2, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats1dHistTxBcastFrms.setStatus('current')
if mibBuilder.loadTexts: sub10EthStats1dHistTxBcastFrms.setDescription("The number of broadcast frames transmitted over the Ethernet interface\n                    in this 1 day interval.\n                    \n                    For more information refer to online techical documentation at\n                    http://www.ti.com. Product c667xDSP 'Gigabit Ethernet\n                    Switch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStats1dHistTxMcastFrms = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 2, 2, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats1dHistTxMcastFrms.setStatus('current')
if mibBuilder.loadTexts: sub10EthStats1dHistTxMcastFrms.setDescription("The number of multicast frames transmitted over the Ethernet interface\n                    in this 1 day interval.\n                    \n                    For more information refer to online techical documentation at\n                    http://www.ti.com. Product c667xDSP 'Gigabit Ethernet\n                    Switch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStats1dHistTxPauseFrms = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 2, 2, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats1dHistTxPauseFrms.setStatus('current')
if mibBuilder.loadTexts: sub10EthStats1dHistTxPauseFrms.setDescription("The number of Pause frames transmitted over the Ethernet interface\n                    in this 1 day interval.\n                    \n                    For more information refer to online techical documentation at\n                    http://www.ti.com. Product c667xDSP 'Gigabit Ethernet\n                    Switch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStats1dHistTxDeferred = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 2, 2, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats1dHistTxDeferred.setStatus('current')
if mibBuilder.loadTexts: sub10EthStats1dHistTxDeferred.setDescription("The number of Deferred frames transmitted over the Ethernet interface\n                    in this 1 day interval.\n                    \n                    For more information refer to online techical documentation at\n                    http://www.ti.com. Product c667xDSP 'Gigabit Ethernet\n                    Switch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStats1dHistTxCollsn = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 2, 2, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats1dHistTxCollsn.setStatus('current')
if mibBuilder.loadTexts: sub10EthStats1dHistTxCollsn.setDescription("The number of Collision frames transmitted over the Ethernet interface\n                    in this 1 day interval.\n                    \n                    For more information refer to online techical documentation at\n                    http://www.ti.com. Product c667xDSP 'Gigabit Ethernet\n                    Switch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStats1dHistTxSnglCollsn = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 2, 2, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats1dHistTxSnglCollsn.setStatus('current')
if mibBuilder.loadTexts: sub10EthStats1dHistTxSnglCollsn.setDescription("The number of Single Collision frames transmitted over the Ethernet interface\n                    in this 1 day interval.\n                    \n                    For more information refer to online techical documentation at\n                    http://www.ti.com. Product c667xDSP 'Gigabit Ethernet\n                    Switch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStats1dHistTxMlplCollsn = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 2, 2, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats1dHistTxMlplCollsn.setStatus('current')
if mibBuilder.loadTexts: sub10EthStats1dHistTxMlplCollsn.setDescription("The number of Multiple Collision frames transmitted over the Ethernet interface\n                    in this 1 day interval.\n                    \n                    For more information refer to online techical documentation at\n                    http://www.ti.com. Product c667xDSP 'Gigabit Ethernet\n                    Switch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStats1dHistTxExsvCollsn = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 2, 2, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats1dHistTxExsvCollsn.setStatus('current')
if mibBuilder.loadTexts: sub10EthStats1dHistTxExsvCollsn.setDescription("The number of Excessive Collision for which transmission was\n                    abandoned over the Ethernet interface in this 1 day interval.\n                    \n                    For more information refer to online techical documentation at\n                    http://www.ti.com. Product c667xDSP 'Gigabit Ethernet\n                    Switch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStats1dHistTxLtCollsn = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 2, 2, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats1dHistTxLtCollsn.setStatus('current')
if mibBuilder.loadTexts: sub10EthStats1dHistTxLtCollsn.setDescription("The number of Late Collision for which transmission was\n                    abandoned over the Ethernet interface in this 1 day interval.\n                    \n                    For more information refer to online techical documentation at\n                    http://www.ti.com. Product c667xDSP 'Gigabit Ethernet\n                    Switch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStats1dHistTxCSenseErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 2, 2, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats1dHistTxCSenseErrs.setStatus('current')
if mibBuilder.loadTexts: sub10EthStats1dHistTxCSenseErrs.setDescription("The number of Carrier Sense Errored frames transmitted over the\n                    Ethernet interface in this 1 day interval.\n                    \n                    For more information refer to online techical documentation at\n                    http://www.ti.com. Product c667xDSP 'Gigabit Ethernet\n                    Switch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStats1dHistPkts64Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 2, 2, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats1dHistPkts64Octets.setStatus('current')
if mibBuilder.loadTexts: sub10EthStats1dHistPkts64Octets.setDescription("The total number of 64-byte frames received and transmitted on the\n                    Ethernet interface in this 1 day interval.\n                    \n                    For more information refer to online techical documentation at\n                    http://www.ti.com. Product c667xDSP 'Gigabit Ethernet\n                    Switch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStats1dHistPkts65T127 = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 2, 2, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats1dHistPkts65T127.setStatus('current')
if mibBuilder.loadTexts: sub10EthStats1dHistPkts65T127.setDescription("The total number of frames of size 65 to 127 bytes received\n                    and transmitted on the Ethernet interface in this 1 day interval.\n                    \n                    For more information refer to online techical documentation at\n                    http://www.ti.com. Product c667xDSP 'Gigabit Ethernet\n                    Switch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStats1dHistPkts128T255 = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 2, 2, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats1dHistPkts128T255.setStatus('current')
if mibBuilder.loadTexts: sub10EthStats1dHistPkts128T255.setDescription("The total number of frames of size 128 to 255 bytes received\n                    and transmitted on the Ethernet interface in this 1 day interval.\n                    \n                    For more information refer to online techical documentation at\n                    http://www.ti.com. Product c667xDSP 'Gigabit Ethernet\n                    Switch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStats1dHistPkts256T511 = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 2, 2, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats1dHistPkts256T511.setStatus('current')
if mibBuilder.loadTexts: sub10EthStats1dHistPkts256T511.setDescription("The total number of frames of size 256 to 511 bytes received\n                    and transmitted on the Ethernet interface in this 1 day interval.\n                    \n                    For more information refer to online techical documentation at\n                    http://www.ti.com. Product c667xDSP 'Gigabit Ethernet\n                    Switch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStats1dHistPkts512T1023 = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 2, 2, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats1dHistPkts512T1023.setStatus('current')
if mibBuilder.loadTexts: sub10EthStats1dHistPkts512T1023.setDescription("The total number of frames of size 512 to 1023 bytes received\n                    and transmitted on the Ethernet interface in this 1 day interval.\n                    \n                    For more information refer to online techical documentation at\n                    http://www.ti.com. Product c667xDSP 'Gigabit Ethernet\n                    Switch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStats1dHistPkts1024TMax = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 2, 2, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats1dHistPkts1024TMax.setStatus('current')
if mibBuilder.loadTexts: sub10EthStats1dHistPkts1024TMax.setDescription("The total number of frames of size  1024 to RX_MAXLEN bytes for\n                    receive or 1024 up for transmit on the Ethernet interface\n                    in this 1 day interval.\n                    \n                    For more information refer to online techical documentation at\n                    http://www.ti.com. Product c667xDSP 'Gigabit Ethernet\n                    Switch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStats1dHistRxMbpsMin = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 2, 2, 1, 33), Sub10ThroughputMbps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats1dHistRxMbpsMin.setStatus('current')
if mibBuilder.loadTexts: sub10EthStats1dHistRxMbpsMin.setDescription('The minimum Rx throughput in Mbps in this 15 minute interval.')
sub10EthStats1dHistRxMbpsMax = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 2, 2, 1, 34), Sub10ThroughputMbps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats1dHistRxMbpsMax.setStatus('current')
if mibBuilder.loadTexts: sub10EthStats1dHistRxMbpsMax.setDescription('The maximum Rx throughput in Mbps in this 15 minute interval.')
sub10EthStats1dHistRxMbpsAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 2, 2, 1, 35), Sub10ThroughputMbps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats1dHistRxMbpsAvg.setStatus('current')
if mibBuilder.loadTexts: sub10EthStats1dHistRxMbpsAvg.setDescription('The average Rx throughput in Mbps in this 1 day interval.')
sub10EthStats1dHistTxMbpsMin = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 2, 2, 1, 36), Sub10ThroughputMbps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats1dHistTxMbpsMin.setStatus('current')
if mibBuilder.loadTexts: sub10EthStats1dHistTxMbpsMin.setDescription('The minimum Tx throughput in Mbps in this 1 day interval.')
sub10EthStats1dHistTxMbpsMax = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 2, 2, 1, 37), Sub10ThroughputMbps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats1dHistTxMbpsMax.setStatus('current')
if mibBuilder.loadTexts: sub10EthStats1dHistTxMbpsMax.setDescription('The maximum Tx throughput in Mbps in this 1 day interval.')
sub10EthStats1dHistTxMbpsAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 2, 2, 1, 38), Sub10ThroughputMbps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats1dHistTxMbpsAvg.setStatus('current')
if mibBuilder.loadTexts: sub10EthStats1dHistTxMbpsAvg.setDescription('The average Tx throughput in Mbps in this 1 day interval.')
sub10RadioLclLinkStatus = MibScalar((1, 3, 6, 1, 4, 1, 39003, 5, 1, 1, 1), Sub10RadioLinkState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioLclLinkStatus.setStatus('current')
if mibBuilder.loadTexts: sub10RadioLclLinkStatus.setDescription('The status of the local radio link.')
sub10RadioLclTxPower = MibScalar((1, 3, 6, 1, 4, 1, 39003, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-30, 30))).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioLclTxPower.setStatus('current')
if mibBuilder.loadTexts: sub10RadioLclTxPower.setDescription('The current transmit power of the local radio link,\n                    measured in dBm.')
sub10RadioLclRxPower = MibScalar((1, 3, 6, 1, 4, 1, 39003, 5, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('0')).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioLclRxPower.setStatus('current')
if mibBuilder.loadTexts: sub10RadioLclRxPower.setDescription('The current receive power of the local radio link,\n                    measured in dBm.')
sub10RadioLclVectErr = MibScalar((1, 3, 6, 1, 4, 1, 39003, 5, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('0')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioLclVectErr.setStatus('current')
if mibBuilder.loadTexts: sub10RadioLclVectErr.setDescription('The current vector error of the local radio link,\n                    measured in dB.')
sub10RadioLclLnkLoss = MibScalar((1, 3, 6, 1, 4, 1, 39003, 5, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('0')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioLclLnkLoss.setStatus('current')
if mibBuilder.loadTexts: sub10RadioLclLnkLoss.setDescription('The current link loss of the local radio link,\n                    measured in dB.')
sub10RadioLclAlignmentMode = MibScalar((1, 3, 6, 1, 4, 1, 39003, 5, 1, 1, 6), Sub10AlignmentMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioLclAlignmentMode.setStatus('current')
if mibBuilder.loadTexts: sub10RadioLclAlignmentMode.setDescription('Alignment mode is modeAlignment(1) if the alignment / reset cap\n                    has been removed for > 5sec otherwise modeNormal(0). The alignment\n                    mode is managed using sub10RadioMgmtAlignmentMode.')
sub10RadioLclDataRate = MibScalar((1, 3, 6, 1, 4, 1, 39003, 5, 1, 1, 7), Sub10RadioDataRate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioLclDataRate.setStatus('current')
if mibBuilder.loadTexts: sub10RadioLclDataRate.setDescription('The maximum data rate of the Airside interface.')
sub10RadioLclMWUType = MibScalar((1, 3, 6, 1, 4, 1, 39003, 5, 1, 1, 8), Sub10MWUType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioLclMWUType.setStatus('current')
if mibBuilder.loadTexts: sub10RadioLclMWUType.setDescription('The local MWU type')
sub10RadioLclAFER = MibScalar((1, 3, 6, 1, 4, 1, 39003, 5, 1, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioLclAFER.setStatus('current')
if mibBuilder.loadTexts: sub10RadioLclAFER.setDescription('The Air Frame Error Ratio in the last second. This\n                    is the % of lost air frames based on the UFEC count in\n                    the previous second divided by the\n                    expected Air Frame Rate(AFR) in 1 second.')
sub10RadioLclRxModulationMode = MibScalar((1, 3, 6, 1, 4, 1, 39003, 5, 1, 1, 10), Sub10ModulationMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioLclRxModulationMode.setStatus('current')
if mibBuilder.loadTexts: sub10RadioLclRxModulationMode.setDescription('The current Receive Modulation Mode on the local unit.')
sub10RadioLclTxModulationMode = MibScalar((1, 3, 6, 1, 4, 1, 39003, 5, 1, 1, 11), Sub10ModulationMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioLclTxModulationMode.setStatus('current')
if mibBuilder.loadTexts: sub10RadioLclTxModulationMode.setDescription('The current Transmit Modulation Mode on the local unit.')
sub10RadioRmtLinkStatus = MibScalar((1, 3, 6, 1, 4, 1, 39003, 5, 1, 2, 1), Sub10RadioLinkState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioRmtLinkStatus.setStatus('current')
if mibBuilder.loadTexts: sub10RadioRmtLinkStatus.setDescription('The status of the remote radio link.')
sub10RadioRmtTxPower = MibScalar((1, 3, 6, 1, 4, 1, 39003, 5, 1, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 100))).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioRmtTxPower.setStatus('current')
if mibBuilder.loadTexts: sub10RadioRmtTxPower.setDescription('The current transmit power of the remote radio link,\n                    measured in dBm.')
sub10RadioRmtRxPower = MibScalar((1, 3, 6, 1, 4, 1, 39003, 5, 1, 2, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('0')).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioRmtRxPower.setStatus('current')
if mibBuilder.loadTexts: sub10RadioRmtRxPower.setDescription('The current receive power of the remote radio link,\n                    measured in dBm.')
sub10RadioRmtVectErr = MibScalar((1, 3, 6, 1, 4, 1, 39003, 5, 1, 2, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('0')).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioRmtVectErr.setStatus('current')
if mibBuilder.loadTexts: sub10RadioRmtVectErr.setDescription('The current vector error of the remote radio link,\n                    measured in dB.')
sub10RadioRmtLnkLoss = MibScalar((1, 3, 6, 1, 4, 1, 39003, 5, 1, 2, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('0')).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioRmtLnkLoss.setStatus('current')
if mibBuilder.loadTexts: sub10RadioRmtLnkLoss.setDescription('The current link loss of the remote radio link,\n                    measured in dB.')
sub10RadioRmtAlignmentMode = MibScalar((1, 3, 6, 1, 4, 1, 39003, 5, 1, 2, 7), Sub10AlignmentMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioRmtAlignmentMode.setStatus('current')
if mibBuilder.loadTexts: sub10RadioRmtAlignmentMode.setDescription("The remote radio unit's Alignment mode.\n                    Alignment mode is modeAlignment(1) if the alignment / reset cap\n                    has been removed for > 5sec otherwise modeNormal(0).")
sub10RadioRmtAFER = MibScalar((1, 3, 6, 1, 4, 1, 39003, 5, 1, 2, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioRmtAFER.setStatus('current')
if mibBuilder.loadTexts: sub10RadioRmtAFER.setDescription('The remote unit Air Frame Error Ratio in this second. This\n                    is the % of lost air frames based on the UFEC count in\n                    the previous second divided by the\n                    expected Air Frame Rate(AFR) in 1 second.')
sub10RadioMgmtTxPowerLimit = MibScalar((1, 3, 6, 1, 4, 1, 39003, 5, 2, 1), Sub10TxPowerLimit().clone('txPowerLimitNone')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10RadioMgmtTxPowerLimit.setStatus('current')
if mibBuilder.loadTexts: sub10RadioMgmtTxPowerLimit.setDescription('The configured transmit power of radio link.\n                    IMPORTANT: This object is controlled by transaction management.\n                    Any changes to this object must be transactionally acknowledged\n                    following a successful set thus protecting against loss of\n                    communication with the unit. To acknowledge the transaction\n                    set the object sub10UnitMgmtTransaction to transactionCommit(2).')
sub10RadioMgmtTxRxFreq = MibScalar((1, 3, 6, 1, 4, 1, 39003, 5, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37))).clone(namedValues=NamedValues(("e250Tx71250Rx81250", 0), ("e250Tx71500Rx81500", 1), ("e250Tx71750Rx81750", 2), ("e250Tx72000Rx82000", 3), ("e250Tx72250Rx82250", 4), ("e250Tx72500Rx82500", 5), ("e250Tx72750Rx82750", 6), ("e250Tx73000Rx83000", 7), ("e250Tx73250Rx83250", 8), ("e250Tx73500Rx83500", 9), ("e250Tx73750Rx83750", 10), ("e250Tx74000Rx84000", 11), ("e250Tx74250Rx84250", 12), ("e250Tx74500Rx84500", 13), ("e250Tx74750Rx84750", 14), ("e250Tx75000Rx85000", 15), ("e250Tx75250Rx85250", 16), ("e250Tx75500Rx85500", 17), ("e250Tx75750Rx85750", 18), ("e500Tx72375Rx82375", 19), ("e500Tx72625Rx82625", 20), ("e500Tx72875Rx82875", 21), ("e500Tx73125Rx83125", 22), ("e500Tx73375Rx83375", 23), ("e500Tx73625Rx83625", 24), ("e500Tx73875Rx83875", 25), ("e500Tx74125Rx84125", 26), ("e500Tx74375Rx84375", 27), ("e500Tx74625Rx84625", 28), ("v500Tx58500Rx61500", 29), ("v500Tx58500Rx62000", 30), ("v500Tx58500Rx62500", 31), ("v500Tx59000Rx61500", 32), ("v500Tx59000Rx62000", 33), ("v500Tx59000Rx62500", 34), ("v500Tx59500Rx61500", 35), ("v500Tx59500Rx62000", 36), ("v500Tx59500Rx62500", 37))).clone('v500Tx59500Rx62000')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10RadioMgmtTxRxFreq.setStatus('current')
if mibBuilder.loadTexts: sub10RadioMgmtTxRxFreq.setDescription('The configured TX/RX frequency pairs of radio link. Each enumerated option\n                    represents the TX and RX frequency pair settings in MHz.\n                    Options are available for E-Band at channel width 250MHz and 500MHz\n                    and E-Band channel width 500MHz.\n                    \n                    IMPORTANT: This object is controlled by transaction management.\n                    Any changes to this object must be transactionally acknowledged\n                    following a successful set thus protecting against loss of\n                    communication with the unit. To acknowledge the transaction\n                    set the object sub10UnitMgmtTransaction to transactionCommit(2).')
sub10RadioMgmtAPCMode = MibScalar((1, 3, 6, 1, 4, 1, 39003, 5, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("apcModeDisabled", 0), ("apcModeVariable", 1), ("apcModeFixed", 2))).clone('apcModeDisabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10RadioMgmtAPCMode.setStatus('current')
if mibBuilder.loadTexts: sub10RadioMgmtAPCMode.setDescription('Automatic Transmit Power Control. The initial setting of transmit\n                    power used is defined by sub10RadioMgmtTxPower. If sub10RadioMgmtAPCMode\n                    is enabled then the transmit power may then vary according to the\n                    RSSI measured from the remote end of the link. The actual transmit power is\n                    readable in sub10RadioLclTxPower at the local end and sub10RadioRmtTxPower\n                    at the remote end of the link.\n                    \n                    IMPORTANT: This object is controlled by transaction management.\n                    Any changes to this object must be transactionally acknowledged\n                    following a successful set thus protecting against loss of\n                    communication with the unit. To acknowledge the transaction\n                    set the object sub10UnitMgmtTransaction to transactionCommit(2).')
sub10RadioMgmtModulationMode = MibScalar((1, 3, 6, 1, 4, 1, 39003, 5, 2, 4), Sub10ModulationMode().clone('mode8psk')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10RadioMgmtModulationMode.setStatus('current')
if mibBuilder.loadTexts: sub10RadioMgmtModulationMode.setDescription('Set the highest order Modulation Mode attempted by Adaptive Modulation.\n                    IMPORTANT: This object is controlled by transaction management.\n                    Any changes to this object must be transactionally acknowledged\n                    following a successful set thus protecting against loss of\n                    communication with the unit. To acknowledge the transaction\n                    set the object sub10UnitMgmtTransaction to transactionCommit(2).')
sub10RadioMgmtAmod = MibScalar((1, 3, 6, 1, 4, 1, 39003, 5, 2, 5), Sub10State().clone('stateDisabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10RadioMgmtAmod.setStatus('current')
if mibBuilder.loadTexts: sub10RadioMgmtAmod.setDescription('Adaptive Modulation mode.')
sub10RadioMgmtAlignmentMode = MibScalar((1, 3, 6, 1, 4, 1, 39003, 5, 2, 6), Sub10AlignmentMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10RadioMgmtAlignmentMode.setStatus('current')
if mibBuilder.loadTexts: sub10RadioMgmtAlignmentMode.setDescription('Alignment mode is modeAlignment(1) if the alignment / reset cap\n                    has been removed for > 5sec otherwise modeNormal(0). The alignment\n                    mode can be manually changed by setting this object.')
sub10RadioMgmtMWUChannelWidth = MibScalar((1, 3, 6, 1, 4, 1, 39003, 5, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("channelWidth250", 0), ("channelWidth500", 1))).clone('channelWidth500')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10RadioMgmtMWUChannelWidth.setStatus('current')
if mibBuilder.loadTexts: sub10RadioMgmtMWUChannelWidth.setDescription('MWU Channel width.\n                    IMPORTANT: This object is controlled by transaction management.\n                    Any changes to this object must be transactionally acknowledged\n                    following a successful set thus protecting against loss of\n                    communication with the unit. To acknowledge the transaction\n                    set the object sub10UnitMgmtTransaction to transactionCommit(2).')
sub10RadioMgmtDataRate = MibScalar((1, 3, 6, 1, 4, 1, 39003, 5, 2, 10), Sub10RadioDataRate()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10RadioMgmtDataRate.setStatus('current')
if mibBuilder.loadTexts: sub10RadioMgmtDataRate.setDescription('The maximum data rate of the Airside interface up to the licensed value.')
sub10RadioMgmtStats1dPersist = MibScalar((1, 3, 6, 1, 4, 1, 39003, 5, 2, 9, 1), Sub10State().clone('stateEnabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10RadioMgmtStats1dPersist.setStatus('current')
if mibBuilder.loadTexts: sub10RadioMgmtStats1dPersist.setDescription("If set to 'stateEnabled(1) the sub10RadioStats1dHistTable objects\n                    are stored and read in on startup. This makes the history\n                    non-volatile across unit resets.")
sub10RadioMgmtStatsActiveTable = MibTable((1, 3, 6, 1, 4, 1, 39003, 5, 2, 9, 4), )
if mibBuilder.loadTexts: sub10RadioMgmtStatsActiveTable.setStatus('current')
if mibBuilder.loadTexts: sub10RadioMgmtStatsActiveTable.setDescription('This table maintains an entry for each Radio\n                    statistic that is enabled and active.')
sub10RadioMgmtStatsActiveEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39003, 5, 2, 9, 4, 1), ).setIndexNames((0, "SUB10SYSTEMS-MIB", "sub10RadioMgmtStatsActiveIndex"))
if mibBuilder.loadTexts: sub10RadioMgmtStatsActiveEntry.setStatus('current')
if mibBuilder.loadTexts: sub10RadioMgmtStatsActiveEntry.setDescription("An entry in the sub10RadioMgmtStatsActiveTable.\n                    Each entry represents an object instance of Radio\n                    stats and it's current state.")
sub10RadioMgmtStatsActiveIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 2, 9, 4, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 29)))
if mibBuilder.loadTexts: sub10RadioMgmtStatsActiveIndex.setStatus('current')
if mibBuilder.loadTexts: sub10RadioMgmtStatsActiveIndex.setDescription('The number of Radio stats objects\n                    used as an index to this table.')
sub10RadioMgmtStatsActiveName = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 2, 9, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 22))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioMgmtStatsActiveName.setStatus('current')
if mibBuilder.loadTexts: sub10RadioMgmtStatsActiveName.setDescription('The stats object name. This is the name of the\n                    ethernet stats object in the sub10RadioStatsCurrent\n                    group.')
sub10RadioMgmtStatsActiveState = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 2, 9, 4, 1, 3), Sub10State().clone('stateEnabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10RadioMgmtStatsActiveState.setStatus('current')
if mibBuilder.loadTexts: sub10RadioMgmtStatsActiveState.setDescription("If set to 'enabled' the statistic is active.")
sub10RadioStatsTimeElapsed = MibScalar((1, 3, 6, 1, 4, 1, 39003, 5, 3, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStatsTimeElapsed.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStatsTimeElapsed.setDescription("The time that has elapsed from the beginning\n                    of the statistical measurement period.\n                    \n                    This is normally time from just after the last reboot time\n                    when the statistics module begins it's calculations.\n                    \n                    If, for some reason, such as an adjustment in the\n                    system's time-of-day clock, the current interval\n                    exceeds the maximum value, the agent will return\n                    the maximum value.")
sub10RadioStatsCurrTxPowerMin = MibScalar((1, 3, 6, 1, 4, 1, 39003, 5, 3, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 100))).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStatsCurrTxPowerMin.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStatsCurrTxPowerMin.setDescription('The minimum value that the transmit power of the local radio\n                    link measured over the previous rolling 60 seconds.')
sub10RadioStatsCurrTxPowerMax = MibScalar((1, 3, 6, 1, 4, 1, 39003, 5, 3, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 100))).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStatsCurrTxPowerMax.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStatsCurrTxPowerMax.setDescription('The maximum value that the transmit power of the local radio\n                    link measured over the previous rolling 60 seconds.')
sub10RadioStatsCurrTxPowerAvg = MibScalar((1, 3, 6, 1, 4, 1, 39003, 5, 3, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 100))).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStatsCurrTxPowerAvg.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStatsCurrTxPowerAvg.setDescription('The average value of the transmit power of the local radio\n                    link measured over the previous rolling 60 seconds.')
sub10RadioStatsCurrRxPowerMin = MibScalar((1, 3, 6, 1, 4, 1, 39003, 5, 3, 2, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('0')).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStatsCurrRxPowerMin.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStatsCurrRxPowerMin.setDescription('The minimum value that the receive power of the local radio\n                    link measured over the previous rolling 60 seconds.')
sub10RadioStatsCurrRxPowerMax = MibScalar((1, 3, 6, 1, 4, 1, 39003, 5, 3, 2, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('0')).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStatsCurrRxPowerMax.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStatsCurrRxPowerMax.setDescription('The maximum value that the receive power of the local radio\n                    link measured over the previous rolling 60 seconds.')
sub10RadioStatsCurrRxPowerAvg = MibScalar((1, 3, 6, 1, 4, 1, 39003, 5, 3, 2, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('0')).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStatsCurrRxPowerAvg.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStatsCurrRxPowerAvg.setDescription('The average value of the receive power of the local radio\n                    link measured over the previous rolling 60 seconds.')
sub10RadioStatsCurrVectErrMin = MibScalar((1, 3, 6, 1, 4, 1, 39003, 5, 3, 2, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('0')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStatsCurrVectErrMin.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStatsCurrVectErrMin.setDescription('The minimum value that the vector error of the local radio\n                    link measured over the previous rolling 60 seconds.')
sub10RadioStatsCurrVectErrMax = MibScalar((1, 3, 6, 1, 4, 1, 39003, 5, 3, 2, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('0')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStatsCurrVectErrMax.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStatsCurrVectErrMax.setDescription('The maximum value that the vector error of the local radio\n                    link measured over the previous rolling 60 seconds.')
sub10RadioStatsCurrVectErrAvg = MibScalar((1, 3, 6, 1, 4, 1, 39003, 5, 3, 2, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('0')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStatsCurrVectErrAvg.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStatsCurrVectErrAvg.setDescription('The average value of the vector error of the local radio\n                    link measured over the previous rolling 60 seconds.')
sub10RadioStatsCurrLnkLossMin = MibScalar((1, 3, 6, 1, 4, 1, 39003, 5, 3, 2, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStatsCurrLnkLossMin.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStatsCurrLnkLossMin.setDescription('The minimum value that the link loss of the local radio\n                    link measured over the previous rolling 60 seconds.')
sub10RadioStatsCurrLnkLossMax = MibScalar((1, 3, 6, 1, 4, 1, 39003, 5, 3, 2, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStatsCurrLnkLossMax.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStatsCurrLnkLossMax.setDescription('The maximum value that the link loss of the local radio\n                    link measured over the previous rolling 60 seconds.')
sub10RadioStatsCurrLnkLossAvg = MibScalar((1, 3, 6, 1, 4, 1, 39003, 5, 3, 2, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStatsCurrLnkLossAvg.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStatsCurrLnkLossAvg.setDescription('The average value of the link loss of the local radio\n                    link measured over the previous rolling 60 seconds.')
sub10RadioStatsCurrRxFrms = MibScalar((1, 3, 6, 1, 4, 1, 39003, 5, 3, 2, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStatsCurrRxFrms.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStatsCurrRxFrms.setDescription('The number of Airside frames received over the Radio interface.\n                    This is irrespective of whether the Airside frame transmitted contained\n                    any ethernet data.\n                    \n                    Set to zero on unit reset.')
sub10RadioStatsCurrTxFrms = MibScalar((1, 3, 6, 1, 4, 1, 39003, 5, 3, 2, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStatsCurrTxFrms.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStatsCurrTxFrms.setDescription('The number of Airside frames transmitted over the Radio interface.\n                    This is irrespective of whether the Airside frame transmitted contained\n                    any ethernet data.\n                    \n                    Set to zero on unit reset.')
sub10RadioStatsCurrRxPkts = MibScalar((1, 3, 6, 1, 4, 1, 39003, 5, 3, 2, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStatsCurrRxPkts.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStatsCurrRxPkts.setDescription('The number of Ethernet packets received over the Radio interface.\n                    This includes all packets whether destined for the management\n                    sub-system on this unit or to be sent direct to the Ethernet interface.\n                    \n                    Set to zero on unit reset.')
sub10RadioStatsCurrTxPkts = MibScalar((1, 3, 6, 1, 4, 1, 39003, 5, 3, 2, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStatsCurrTxPkts.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStatsCurrTxPkts.setDescription('The number of Ethernet packets transmitted over the Radio interface\n                    which originated from the Ethernet interface. This does not include\n                    packets originating from the management sub-system.\n                    \n                    Set to zero on unit reset.')
sub10RadioStatsCurrRxMgmtPkts = MibScalar((1, 3, 6, 1, 4, 1, 39003, 5, 3, 2, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStatsCurrRxMgmtPkts.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStatsCurrRxMgmtPkts.setDescription('The number of Ethernet packets received over the Radio interface\n                    and which are destined for the management sub-system on this unit.\n                    \n                    Set to zero on unit reset.')
sub10RadioStatsCurrTxMgmtPkts = MibScalar((1, 3, 6, 1, 4, 1, 39003, 5, 3, 2, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStatsCurrTxMgmtPkts.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStatsCurrTxMgmtPkts.setDescription('The number of Ethernet packets transmitted over the Radio interface\n                    which originated from the management sub-system. This does not include\n                    packets originating from the Ethernet interface.\n                    \n                    Set to zero on unit reset.')
sub10RadioStatsCurrRxBadFrms = MibScalar((1, 3, 6, 1, 4, 1, 39003, 5, 3, 2, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStatsCurrRxBadFrms.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStatsCurrRxBadFrms.setDescription('The count of bad frames detected on the\n                    receive side of the Radio interface. A bad\n                    frame could be caused by any one of the following\n                    detected errors:\n                    \n                    UFEC Error\n                    Header CRC Error\n                    Frame CRC Error\n                    Bad header\n                    \n                    Set to zero on unit reset.')
sub10RadioStatsCurrMWUTempMin = MibScalar((1, 3, 6, 1, 4, 1, 39003, 5, 3, 2, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStatsCurrMWUTempMin.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStatsCurrMWUTempMin.setDescription('The minimum MWU temperature measured over the previous rolling 60 seconds.')
sub10RadioStatsCurrMWUTempMax = MibScalar((1, 3, 6, 1, 4, 1, 39003, 5, 3, 2, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStatsCurrMWUTempMax.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStatsCurrMWUTempMax.setDescription('The maximum MWU temperature measured over the previous rolling 60 seconds.')
sub10RadioStatsCurrMWUTempAvg = MibScalar((1, 3, 6, 1, 4, 1, 39003, 5, 3, 2, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStatsCurrMWUTempAvg.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStatsCurrMWUTempAvg.setDescription('The average MWU temperature measured over the previous rolling 60 seconds.')
sub10RadioStatsCurrQPSKTo8PSK = MibScalar((1, 3, 6, 1, 4, 1, 39003, 5, 3, 2, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStatsCurrQPSKTo8PSK.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStatsCurrQPSKTo8PSK.setDescription('The number transitions of Modulation Mode configuration\n                    from QPSK to 8PSK since unit reboot.')
sub10RadioStatsCurr8PSKToQPSK = MibScalar((1, 3, 6, 1, 4, 1, 39003, 5, 3, 2, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStatsCurr8PSKToQPSK.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStatsCurr8PSKToQPSK.setDescription('The number transitions of Modulation Mode configuration\n                    from 8PSK to QPSK since unit reboot.')
sub10RadioStatsCurrAFERMin = MibScalar((1, 3, 6, 1, 4, 1, 39003, 5, 3, 2, 29), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStatsCurrAFERMin.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStatsCurrAFERMin.setDescription('The minimum AFER (Air Frame Error Ratio) in the previous rolling 60 seconds.\n                    See sub10RadioLclAFER.')
sub10RadioStatsCurrAFERMax = MibScalar((1, 3, 6, 1, 4, 1, 39003, 5, 3, 2, 30), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStatsCurrAFERMax.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStatsCurrAFERMax.setDescription('The maximum AFER (Air Frame Error Ratio) in the previous rolling 60 seconds.\n                    See sub10RadioLclAFER.')
sub10RadioStatsCurrAFERAvg = MibScalar((1, 3, 6, 1, 4, 1, 39003, 5, 3, 2, 31), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStatsCurrAFERAvg.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStatsCurrAFERAvg.setDescription('The average AFER (Air Frame Error Ratio) in the previous rolling 60 seconds.\n                    See sub10RadioLclAFER.')
sub10RadioStatsCurrRmtTxPowerAvg = MibScalar((1, 3, 6, 1, 4, 1, 39003, 5, 3, 2, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 100))).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStatsCurrRmtTxPowerAvg.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStatsCurrRmtTxPowerAvg.setDescription('The average value of the transmit power of the remote radio\n                    link measured over the previous rolling 60 seconds.')
sub10RadioStatsCurrRmtRxPowerAvg = MibScalar((1, 3, 6, 1, 4, 1, 39003, 5, 3, 2, 33), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('0')).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStatsCurrRmtRxPowerAvg.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStatsCurrRmtRxPowerAvg.setDescription('The average value of the receive power of the remote radio\n                    link measured over the previous rolling 60 seconds.')
sub10RadioStatsCurrRmtVectErrAvg = MibScalar((1, 3, 6, 1, 4, 1, 39003, 5, 3, 2, 34), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('0')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStatsCurrRmtVectErrAvg.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStatsCurrRmtVectErrAvg.setDescription('The average value of the vector error of the remote radio\n                    link measured over the previous rolling 60 seconds.')
sub10RadioStatsCurrRmtLnkLossAvg = MibScalar((1, 3, 6, 1, 4, 1, 39003, 5, 3, 2, 35), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStatsCurrRmtLnkLossAvg.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStatsCurrRmtLnkLossAvg.setDescription('The average value of the link loss of the remote radio\n                    link measured over the previous rolling 60 seconds.')
sub10RadioStatsCurrRmtMWUTempAvg = MibScalar((1, 3, 6, 1, 4, 1, 39003, 5, 3, 2, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStatsCurrRmtMWUTempAvg.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStatsCurrRmtMWUTempAvg.setDescription('The average MWU temperature of the remote unit measured over the previous rolling 60 seconds.')
sub10RadioStatsCurrRmtAFERAvg = MibScalar((1, 3, 6, 1, 4, 1, 39003, 5, 3, 2, 37), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStatsCurrRmtAFERAvg.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStatsCurrRmtAFERAvg.setDescription('The average AFER (Air Frame Error Ratio) of the remote unit in the previous rolling 60 seconds.')
sub10RadioStatsCurrRxQPSK = MibScalar((1, 3, 6, 1, 4, 1, 39003, 5, 3, 2, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStatsCurrRxQPSK.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStatsCurrRxQPSK.setDescription('The time in seconds that Rx modulation mode has been in QPSK since last reboot.')
sub10RadioStatsCurrRx8PSK = MibScalar((1, 3, 6, 1, 4, 1, 39003, 5, 3, 2, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStatsCurrRx8PSK.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStatsCurrRx8PSK.setDescription('The time in seconds that Rx modulation mode has been in 8PSK since last reboot.')
sub10RadioStatsCurrTxQPSK = MibScalar((1, 3, 6, 1, 4, 1, 39003, 5, 3, 2, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStatsCurrTxQPSK.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStatsCurrTxQPSK.setDescription('The time in seconds that Txmodulation mode has been in QPSK since last reboot.')
sub10RadioStatsCurrTx8PSK = MibScalar((1, 3, 6, 1, 4, 1, 39003, 5, 3, 2, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStatsCurrTx8PSK.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStatsCurrTx8PSK.setDescription('The time in seconds that Tx modulation mode has been in 8PSK since last reboot.')
sub10RadioStats1mHistIntvls = MibScalar((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats1mHistIntvls.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStats1mHistIntvls.setDescription('The number of valid table entries in sub10RadioStats1mHistTable\n                    on this system. There is one entry per 1 minute interval.\n                    If the unit has been running for a minimum of 15 minutes\n                    and collecting valid data then the number of entries will be 15,\n                    this represents a total maximum of 5 minutes worth of data.')
sub10RadioStats1mHistTable = MibTable((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 1, 2), )
if mibBuilder.loadTexts: sub10RadioStats1mHistTable.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStats1mHistTable.setDescription("This table maintains a history of Radio statistics\n                    based on 1 minute intervals. There are a maximum\n                    of 60 intervals which represent 1 hour of data.\n                    \n                    This table along with the 15m and 1d tables provide a\n                    history of the performance of the radio interface. This\n                    information may then be post processed and used as a\n                    troubleshooting tool.\n                    \n                    An entry in the table represents a 1 minute interval\n                    where each interval is synchronised to the clock on the\n                    hour. There are up to 60 intervals starting at 1. The\n                    number of valid entries in the table is given by the value\n                    of sub10RadioStats1mHistIntvls of which the minimum\n                    is 0 and the maximum is 60 therefore providing\n                    up to a maximum of 60 minutes of 1 minute interval data.\n                    \n                    The first entry indexed by 1 represents the most recent\n                    completed 1 minute interval. At the end of each interval\n                    all entries of 'index' are copied into entry 'index+1'. If the\n                    number of valid intervals is at least 15 then these 15 intervals\n                    are summarised into 15 minutes stats. At the end of a 60 minute\n                    period the least recent interval is discarded to accomodate\n                    the next minute interval.")
sub10RadioStats1mHistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 1, 2, 1), ).setIndexNames((0, "SUB10SYSTEMS-MIB", "sub10RadioStats1mHistIntvl"))
if mibBuilder.loadTexts: sub10RadioStats1mHistEntry.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStats1mHistEntry.setDescription('An entry in the sub10RadioStats1mHistTable.\n                    Each entry represents 1 minute of performance\n                    management data where the first entry with index=1\n                    is the most recent 1 minute interval and the last\n                    entry with index=n (up to 60) is the least recent\n                    1 minute interval.\n                    \n                    The number of valid intervals is given by the\n                    value of sub10RadioStats1mHistIntvls.')
sub10RadioStats1mHistIntvl = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 1, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)))
if mibBuilder.loadTexts: sub10RadioStats1mHistIntvl.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStats1mHistIntvl.setDescription('The interval number used as an index to this\n                    table. Interval numbers start at 1 (the most\n                    recent 1 minute interval) and have a maximum value of 60\n                    (the least recent 1 minute interval).')
sub10RadioStats1mHistTime = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 1, 2, 1, 2), Sub10DateTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats1mHistTime.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStats1mHistTime.setDescription('The local system time when this 1m history entry was created.\n                    This represents the end of the 1 minute interval for which the\n                    associated stats with the same sub10RadioStats1mHistIntvl\n                    table index are relevant.')
sub10RadioStats1mHistTxPowerMin = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 100))).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats1mHistTxPowerMin.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStats1mHistTxPowerMin.setDescription('The minimum value that the transmit power of the local radio\n                    link has reached in this minute interval, measured in dBm.')
sub10RadioStats1mHistTxPowerMax = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 100))).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats1mHistTxPowerMax.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStats1mHistTxPowerMax.setDescription('The maximum value that the transmit power of the local radio\n                    link has reached in this minute interval, measured in dBm.')
sub10RadioStats1mHistTxPowerAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 100))).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats1mHistTxPowerAvg.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStats1mHistTxPowerAvg.setDescription('The average value that the transmit power of the local radio\n                    link has reached in this minute interval, measured in dBm.')
sub10RadioStats1mHistRxPowerMin = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 1, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('0')).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats1mHistRxPowerMin.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStats1mHistRxPowerMin.setDescription('The minimum value that the receive power of the local radio\n                    link has reached in this minute interval, measured in dBm.')
sub10RadioStats1mHistRxPowerMax = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 1, 2, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('0')).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats1mHistRxPowerMax.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStats1mHistRxPowerMax.setDescription('The maximum value that the receive power of the local radio\n                    link has reached in this minute interval, measured in dBm.')
sub10RadioStats1mHistRxPowerAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 1, 2, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('0')).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats1mHistRxPowerAvg.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStats1mHistRxPowerAvg.setDescription('The average value that the receive power of the local radio\n                    link has reached in this minute interval, measured in dBm.')
sub10RadioStats1mHistVectErrMin = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 1, 2, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('0')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats1mHistVectErrMin.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStats1mHistVectErrMin.setDescription('The minimum value that the vector error of the local radio\n                    link has reached in this minute interval, measured in dB.')
sub10RadioStats1mHistVectErrMax = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 1, 2, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('0')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats1mHistVectErrMax.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStats1mHistVectErrMax.setDescription('The maximum value that the vector error of the local radio\n                    link has reached in this minute interval, measured in dB.')
sub10RadioStats1mHistVectErrAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 1, 2, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('0')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats1mHistVectErrAvg.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStats1mHistVectErrAvg.setDescription('The average value that the vector error of the local radio\n                    link has reached in this minute interval, measured in dB.')
sub10RadioStats1mHistLnkLossMin = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 1, 2, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats1mHistLnkLossMin.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStats1mHistLnkLossMin.setDescription('The minimum value that the link loss of the local radio\n                    link has reached in this minute interval, measured in dB.')
sub10RadioStats1mHistLnkLossMax = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 1, 2, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats1mHistLnkLossMax.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStats1mHistLnkLossMax.setDescription('The maximum value that the link loss of the local radio\n                    link has reached in this minute interval, measured in dB.')
sub10RadioStats1mHistLnkLossAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 1, 2, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats1mHistLnkLossAvg.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStats1mHistLnkLossAvg.setDescription('The average value that the link loss of the local radio\n                    link has reached in this minute interval, measured in dB.')
sub10RadioStats1mHistMWUTempMin = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 1, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats1mHistMWUTempMin.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStats1mHistMWUTempMin.setDescription('The minimum MWU temperature measured in this minute interval.')
sub10RadioStats1mHistMWUTempMax = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 1, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats1mHistMWUTempMax.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStats1mHistMWUTempMax.setDescription('The maximum MWU temperature measured in this minute interval.')
sub10RadioStats1mHistMWUTempAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 1, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats1mHistMWUTempAvg.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStats1mHistMWUTempAvg.setDescription('The average MWU temperature measured in this minute interval.')
sub10RadioStats1mHistRxFrms = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 1, 2, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats1mHistRxFrms.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStats1mHistRxFrms.setDescription('The number of Airside frames received over the Radio interface in this minute.\n                    This is irrespective of whether the Airside frame transmitted contained\n                    any ethernet data.')
sub10RadioStats1mHistTxFrms = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 1, 2, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats1mHistTxFrms.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStats1mHistTxFrms.setDescription('The number of Airside frames transmitted over the Radio interface in this minute.\n                    This is irrespective of whether the Airside frame transmitted contained\n                    any ethernet data.')
sub10RadioStats1mHistRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 1, 2, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats1mHistRxPkts.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStats1mHistRxPkts.setDescription('The number of Ethernet packets received over the Radio interface in this minute.\n                    This includes all packets whether destined for the management\n                    sub-system on this unit or to be sent direct to the Ethernet interface.')
sub10RadioStats1mHistTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 1, 2, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats1mHistTxPkts.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStats1mHistTxPkts.setDescription('The number of Ethernet packets transmitted over the Radio interface\n                    which originated from the Ethernet interface in this minute. This does not include\n                    packets originating from the management sub-system.')
sub10RadioStats1mHistRxMgmtPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 1, 2, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats1mHistRxMgmtPkts.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStats1mHistRxMgmtPkts.setDescription('The number of Ethernet packets received over the Radio interface  in this minute\n                    and which are destined for the management sub-system on this unit.')
sub10RadioStats1mHistTxMgmtPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 1, 2, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats1mHistTxMgmtPkts.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStats1mHistTxMgmtPkts.setDescription('The number of Ethernet packets transmitted over the Radio interface\n                    which originated from the management sub-system  in this minute.\n                    This does not include packets originating from the Ethernet interface.')
sub10RadioStats1mHistRxBadFrms = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 1, 2, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats1mHistRxBadFrms.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStats1mHistRxBadFrms.setDescription('The count of bad frames detected on the\n                    receive side of the Radio interface in this minute.')
sub10RadioStats1mHistQPSKTo8PSK = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 1, 2, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats1mHistQPSKTo8PSK.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStats1mHistQPSKTo8PSK.setDescription('The number transitions of Modulation Mode configuration\n                    from QPSK to 8PSK in this 1 minute interval.')
sub10RadioStats1mHist8PSKToQPSK = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 1, 2, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats1mHist8PSKToQPSK.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStats1mHist8PSKToQPSK.setDescription('The number transitions of Modulation Mode configuration\n                    from 8PSK to QPSK in this 1 minute interval.')
sub10RadioStats1mHistAFERMin = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 1, 2, 1, 31), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats1mHistAFERMin.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStats1mHistAFERMin.setDescription('The minimum AFER (Air Frame Error Ratio) in this minute.\n                    See sub10RadioLclAFER.')
sub10RadioStats1mHistAFERMax = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 1, 2, 1, 32), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats1mHistAFERMax.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStats1mHistAFERMax.setDescription('The maximum AFER (Air Frame Error Ratio) in this minute.\n                    See sub10RadioLclAFER.')
sub10RadioStats1mHistAFERAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 1, 2, 1, 33), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats1mHistAFERAvg.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStats1mHistAFERAvg.setDescription('The average AFER (Air Frame Error Ratio) in this minute.\n                    See sub10RadioLclAFER.')
sub10RadioStats1mHistRxQPSK = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 1, 2, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats1mHistRxQPSK.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStats1mHistRxQPSK.setDescription('The time in seconds that  the Rx Modulation Mode was QPSK\n                    in this 1 minute interval.')
sub10RadioStats1mHistRx8PSK = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 1, 2, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats1mHistRx8PSK.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStats1mHistRx8PSK.setDescription('The time in seconds that the Rx Modulation Mode was 8PSK\n                    in this 1 minute interval.')
sub10RadioStats1mHistTxQPSK = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 1, 2, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats1mHistTxQPSK.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStats1mHistTxQPSK.setDescription('The time in seconds that the Tx Modulation Mode was QPSK\n                    in this 1 minute interval.')
sub10RadioStats1mHistTx8PSK = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 1, 2, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats1mHistTx8PSK.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStats1mHistTx8PSK.setDescription('The time in seconds that the Tx Modulation Mode was 8PSK\n                    in this 1 minute interval.')
sub10RadioStats15mHistIntvls = MibScalar((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 2, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats15mHistIntvls.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStats15mHistIntvls.setDescription('The number of valid table entries in sub10RadioStats15mHistTable\n                    on this system. There is one entry per 15 minute interval.\n                    If the unit has been running for a minimum of 24 hours\n                    and collecting valid data then the number of entries will be 96,\n                    this represents a total maximum of 24 hours worth of data.')
sub10RadioStats15mHistTable = MibTable((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 2, 2), )
if mibBuilder.loadTexts: sub10RadioStats15mHistTable.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStats15mHistTable.setDescription("This table maintains a history of Radio statistics\n                    based on 15 minute intervals. There are a maximum\n                    of 96 intervals which represent 24 hours of data.\n                    \n                    This table along with the 1m and 1d tables provide a\n                    history of the performance of the radio interface. This\n                    information may then be post processed and used as a\n                    troubleshooting tool.\n                    \n                    An entry in the table represents a 15 minute interval\n                    where each interval is synchronised to the clock on the\n                    hour. There are up to 96 intervals starting at 1. The\n                    number of valid entries in the table is given by the value\n                    of sub10RadioStats15mHistIntvls of which the minimum\n                    is 0 and the maximum is 96 therefore providing\n                    up to a maximum of 24 hours of 15 minute interval data.\n                    \n                    The first entry indexed by 1 represents the most recent\n                    completed 15 minute interval. At the end of each interval\n                    all entries of 'index' are copied into entry 'index+1'. If the\n                    number of valid intervals is 96 then the least recent interval\n                    entry is summarised into 24 hour stats and then discarded.")
sub10RadioStats15mHistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 2, 2, 1), ).setIndexNames((0, "SUB10SYSTEMS-MIB", "sub10RadioStats15mHistIntvl"))
if mibBuilder.loadTexts: sub10RadioStats15mHistEntry.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStats15mHistEntry.setDescription('An entry in the sub10RadioStats15mHistTable.\n                    Each entry represents 15 minutes performance\n                    management data where the first entry with index=1\n                    is the most recent 15 minute interval and the last\n                    entry with index=n (up to 96) is the least recent\n                    15 minute interval. The number of valid intervals\n                    is sub10RadioStats15mHistIntvls.')
sub10RadioStats15mHistIntvl = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 2, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: sub10RadioStats15mHistIntvl.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStats15mHistIntvl.setDescription('The interval number used as an index to this\n                    table. Interval numbers start at 1 (the most\n                    recent 15 minute interval) and have a maximum value of 96\n                    (the least recent 15 minute interval).')
sub10RadioStats15mHistTime = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 2, 2, 1, 2), Sub10DateTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats15mHistTime.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStats15mHistTime.setDescription('The local system time when this 15m history entry was created.\n                    This represents the end of the 15 minute interval for which the\n                    associated stats with the same sub10RadioStats15mHistIntvl\n                    table index are relevant.')
sub10RadioStats15mHistTxPowerMin = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 100))).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats15mHistTxPowerMin.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStats15mHistTxPowerMin.setDescription('The minimum value that the transmit power of the local radio\n                    link has reached in this 15 minute interval, measured in dBm.')
sub10RadioStats15mHistTxPowerMax = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 100))).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats15mHistTxPowerMax.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStats15mHistTxPowerMax.setDescription('The maximum value that the transmit power of the local radio\n                    link has reached in this 15 minute interval, measured in dBm.')
sub10RadioStats15mHistTxPowerAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 100))).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats15mHistTxPowerAvg.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStats15mHistTxPowerAvg.setDescription('The average value that the transmit power of the local radio\n                    link has reached in this 15 minute interval, measured in dBm.')
sub10RadioStats15mHistRxPowerMin = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 2, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('0')).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats15mHistRxPowerMin.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStats15mHistRxPowerMin.setDescription('The minimum value that the receive power of the local radio\n                    link has reached in this 15 minute interval, measured in dBm.')
sub10RadioStats15mHistRxPowerMax = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 2, 2, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('0')).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats15mHistRxPowerMax.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStats15mHistRxPowerMax.setDescription('The maximum value that the receive power of the local radio\n                    link has reached in this 15 minute interval, measured in dBm.')
sub10RadioStats15mHistRxPowerAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 2, 2, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('0')).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats15mHistRxPowerAvg.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStats15mHistRxPowerAvg.setDescription('The average value that the receive power of the local radio\n                    link has reached in this 15 minute interval, measured in dBm.')
sub10RadioStats15mHistVectErrMin = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 2, 2, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('0')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats15mHistVectErrMin.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStats15mHistVectErrMin.setDescription('The minimum value that the vector error of the local radio\n                    link has reached in this 15 minute interval, measured in dB.')
sub10RadioStats15mHistVectErrMax = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 2, 2, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('0')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats15mHistVectErrMax.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStats15mHistVectErrMax.setDescription('The maximum value that the vector error of the local radio\n                    link has reached in this 15 minute interval, measured in dB.')
sub10RadioStats15mHistVectErrAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 2, 2, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('0')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats15mHistVectErrAvg.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStats15mHistVectErrAvg.setDescription('The average value that the vector error of the local radio\n                    link has reached in this 15 minute interval, measured in dB.')
sub10RadioStats15mHistLnkLossMin = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 2, 2, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats15mHistLnkLossMin.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStats15mHistLnkLossMin.setDescription('The minimum value that the link loss of the local radio\n                    link has reached in this 15 minute interval, measured in dB.')
sub10RadioStats15mHistLnkLossMax = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 2, 2, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats15mHistLnkLossMax.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStats15mHistLnkLossMax.setDescription('The maximum value that the link loss of the local radio\n                    link has reached in this 15 minute interval, measured in dB.')
sub10RadioStats15mHistLnkLossAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 2, 2, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats15mHistLnkLossAvg.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStats15mHistLnkLossAvg.setDescription('The average value that the link loss of the local radio\n                    link has reached in this 15 minute interval, measured in dB.')
sub10RadioStats15mHistMWUTempMin = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 2, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats15mHistMWUTempMin.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStats15mHistMWUTempMin.setDescription('The minimum MWU temperature measured in this 15 minute interval.')
sub10RadioStats15mHistMWUTempMax = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 2, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats15mHistMWUTempMax.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStats15mHistMWUTempMax.setDescription('The maximum MWU temperature measured in this 15 minute interval.')
sub10RadioStats15mHistMWUTempAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 2, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats15mHistMWUTempAvg.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStats15mHistMWUTempAvg.setDescription('The average MWU temperature measured in this 15 minute interval.')
sub10RadioStats15mHistRxFrms = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 2, 2, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats15mHistRxFrms.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStats15mHistRxFrms.setDescription('The number of Airside frames received over the Radio interface in this 15 minutes.\n                    This is irrespective of whether the Airside frame transmitted contained\n                    any ethernet data.')
sub10RadioStats15mHistTxFrms = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 2, 2, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats15mHistTxFrms.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStats15mHistTxFrms.setDescription('The number of Airside frames transmitted over the Radio interface in this 15 minutes.\n                    This is irrespective of whether the Airside frame transmitted contained\n                    any ethernet data.')
sub10RadioStats15mHistRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 2, 2, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats15mHistRxPkts.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStats15mHistRxPkts.setDescription('The number of Ethernet packets received over the Radio interface in this 15 minutes.\n                    This includes all packets whether destined for the management\n                    sub-system on this unit or to be sent direct to the Ethernet interface.')
sub10RadioStats15mHistTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 2, 2, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats15mHistTxPkts.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStats15mHistTxPkts.setDescription('The number of Ethernet packets transmitted over the Radio interface\n                    which originated from the Ethernet interface in this 15 minutes. This does not include\n                    packets originating from the management sub-system.')
sub10RadioStats15mHistRxMgmtPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 2, 2, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats15mHistRxMgmtPkts.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStats15mHistRxMgmtPkts.setDescription('The number of Ethernet packets received over the Radio interface  in this 15 minutes\n                    and which are destined for the management sub-system on this unit.')
sub10RadioStats15mHistTxMgmtPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 2, 2, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats15mHistTxMgmtPkts.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStats15mHistTxMgmtPkts.setDescription('The number of Ethernet packets transmitted over the Radio interface\n                    which originated from the management sub-system  in this 15 minutes.\n                    This does not include packets originating from the Ethernet interface.')
sub10RadioStats15mHistRxBadFrms = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 2, 2, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats15mHistRxBadFrms.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStats15mHistRxBadFrms.setDescription('The count of bad frames detected on the\n                    receive side of the Radio interface in this 15 minutes.')
sub10RadioStats15mHistQPSKTo8PSK = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 2, 2, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats15mHistQPSKTo8PSK.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStats15mHistQPSKTo8PSK.setDescription('The number transitions of Modulation Mode configuration\n                    from QPSK to 8PSK in this 15 minute interval.')
sub10RadioStats15mHist8PSKToQPSK = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 2, 2, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats15mHist8PSKToQPSK.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStats15mHist8PSKToQPSK.setDescription('The number transitions of Modulation Mode configuration\n                    from 8PSK to QPSK in this 15 minute interval.')
sub10RadioStats15mHistAFERMin = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 2, 2, 1, 31), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats15mHistAFERMin.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStats15mHistAFERMin.setDescription('The minimum AFER (Air Frame Error Ratio) in this 15 minute interval.\n                    See sub10RadioLclAFER.')
sub10RadioStats15mHistAFERMax = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 2, 2, 1, 32), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats15mHistAFERMax.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStats15mHistAFERMax.setDescription('The maximum AFER (Air Frame Error Ratio) in this 15 minute interval.\n                    See sub10RadioLclAFER.')
sub10RadioStats15mHistAFERAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 2, 2, 1, 33), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats15mHistAFERAvg.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStats15mHistAFERAvg.setDescription('The average AFER (Air Frame Error Ratio) in this 15 minute interval.\n                    See sub10RadioLclAFER.')
sub10RadioStats15mHistRxQPSK = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 2, 2, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats15mHistRxQPSK.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStats15mHistRxQPSK.setDescription('The time in seconds that  the Rx Modulation Mode was QPSK\n                    in this 15 minute interval.')
sub10RadioStats15mHistRx8PSK = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 2, 2, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats15mHistRx8PSK.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStats15mHistRx8PSK.setDescription('The time in seconds that the Rx Modulation Mode was 8PSK\n                    in this 15 minute interval.')
sub10RadioStats15mHistTxQPSK = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 2, 2, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats15mHistTxQPSK.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStats15mHistTxQPSK.setDescription('The time in seconds that the Tx Modulation Mode was QPSK\n                    in this 15 minute interval.')
sub10RadioStats15mHistTx8PSK = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 2, 2, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats15mHistTx8PSK.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStats15mHistTx8PSK.setDescription('The time in seconds that the Tx Modulation Mode was 8PSK\n                    in this 15 minute interval.')
sub10RadioStats1dHistIntvls = MibScalar((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 3, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats1dHistIntvls.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStats1dHistIntvls.setDescription('The number of valid table entries in sub10RadioStats1dHistTable\n                    on this system. There is one entry per 1 day interval.\n                    \n                    If the unit has been running for a minimum  of 30 days\n                    and collecting valid data then the number of entries will be 30,\n                    this represents a total maximum of 30 days worth of data.')
sub10RadioStats1dHistTable = MibTable((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 3, 2), )
if mibBuilder.loadTexts: sub10RadioStats1dHistTable.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStats1dHistTable.setDescription("This table maintains a history of Radio statistics\n                    based on 1 day intervals. There are a maximum\n                    of 30 intervals which represent 30 days of data.\n                    \n                    This table along with the 1m and 15m tables provide a\n                    history of the performance of the radio interface. This\n                    information may then be post processed and used as a\n                    troubleshooting tool.\n                    \n                    An entry in the table represents a 1 day interval\n                    where each interval is synchronised to the clock on the\n                    hour. There are up to 30 intervals starting at 1. The\n                    number of valid entries in the table is given by the value\n                    of sub10RadioStats1dHistIntvls of which the minimum\n                    is 0 and the maximum is 30 therefore providing\n                    up to a maximum of 30 days of 1 day interval data.\n                    \n                    The first entry indexed by 1 represents the most recent\n                    completed 1 day interval. At the end of each interval\n                    all entries of 'index' are copied into entry 'index+1'. If the\n                    number of valid intervals is 30 then the least recent interval\n                    entry is discarded.")
sub10RadioStats1dHistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 3, 2, 1), ).setIndexNames((0, "SUB10SYSTEMS-MIB", "sub10RadioStats1dHistIntvl"))
if mibBuilder.loadTexts: sub10RadioStats1dHistEntry.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStats1dHistEntry.setDescription('An entry in the sub10RadioStats1dHistTable.\n                    Each entry represents 1 day of performance\n                    management data where the first entry with index=1\n                    is the most recent 1 day interval and the last\n                    entry with index=n (up to 30) is the least recent\n                    1 day interval.\n                    \n                    The number of valid intervals is given by the\n                    value of sub10RadioStats1dHistIntvls.')
sub10RadioStats1dHistIntvl = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 3, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 30)))
if mibBuilder.loadTexts: sub10RadioStats1dHistIntvl.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStats1dHistIntvl.setDescription('The interval number used as an index to this\n                    table. Interval numbers start at 1 (the most\n                    recent 1 day interval) and have a maximum value of 24\n                    (the least recent 1 day interval).')
sub10RadioStats1dHistTime = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 3, 2, 1, 2), Sub10DateTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats1dHistTime.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStats1dHistTime.setDescription('The local system time when this 1d history entry was created.\n                    This represents the end of the 1 day interval for which the\n                    associated stats with the same sub10RadioStats1dHistIntvl\n                    table index are relevant.')
sub10RadioStats1dHistTxPowerMin = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 100))).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats1dHistTxPowerMin.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStats1dHistTxPowerMin.setDescription('The minimum value that the transmit power of the local radio\n                    link has reached in this day interval, measured in dBm.')
sub10RadioStats1dHistTxPowerMax = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 100))).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats1dHistTxPowerMax.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStats1dHistTxPowerMax.setDescription('The maximum value that the transmit power of the local radio\n                    link has reached in this day interval, measured in dBm.')
sub10RadioStats1dHistTxPowerAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 100))).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats1dHistTxPowerAvg.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStats1dHistTxPowerAvg.setDescription('The average value that the transmit power of the local radio\n                    link has reached in this day interval, measured in dBm.')
sub10RadioStats1dHistRxPowerMin = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 3, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('0')).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats1dHistRxPowerMin.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStats1dHistRxPowerMin.setDescription('The minimum value that the receive power of the local radio\n                    link has reached in this day interval, measured in dBm.')
sub10RadioStats1dHistRxPowerMax = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 3, 2, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('0')).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats1dHistRxPowerMax.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStats1dHistRxPowerMax.setDescription('The maximum value that the receive power of the local radio\n                    link has reached in this day interval, measured in dBm.')
sub10RadioStats1dHistRxPowerAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 3, 2, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('0')).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats1dHistRxPowerAvg.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStats1dHistRxPowerAvg.setDescription('The average value that the receive power of the local radio\n                    link has reached in this day interval, measured in dBm.')
sub10RadioStats1dHistVectErrMin = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 3, 2, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('0')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats1dHistVectErrMin.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStats1dHistVectErrMin.setDescription('The minimum value that the vector error of the local radio\n                    link has reached in this day interval, measured in dB.')
sub10RadioStats1dHistVectErrMax = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 3, 2, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('0')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats1dHistVectErrMax.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStats1dHistVectErrMax.setDescription('The maximum value that the vector error of the local radio\n                    link has reached in this day interval, measured in dB.')
sub10RadioStats1dHistVectErrAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 3, 2, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('0')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats1dHistVectErrAvg.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStats1dHistVectErrAvg.setDescription('The average value that the vector error of the local radio\n                    link has reached in this day interval, measured in dB.')
sub10RadioStats1dHistLnkLossMin = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 3, 2, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats1dHistLnkLossMin.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStats1dHistLnkLossMin.setDescription('The minimum value that the link loss of the local radio\n                    link has reached in this day interval, measured in dB.')
sub10RadioStats1dHistLnkLossMax = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 3, 2, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats1dHistLnkLossMax.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStats1dHistLnkLossMax.setDescription('The maximum value that the link loss of the local radio\n                    link has reached in this day interval, measured in dB.')
sub10RadioStats1dHistLnkLossAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 3, 2, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats1dHistLnkLossAvg.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStats1dHistLnkLossAvg.setDescription('The average value that the link loss of the local radio\n                    link has reached in this day interval, measured in dB.')
sub10RadioStats1dHistMWUTempMin = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 3, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats1dHistMWUTempMin.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStats1dHistMWUTempMin.setDescription('The minimum MWU temperature measured in this day interval.')
sub10RadioStats1dHistMWUTempMax = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 3, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats1dHistMWUTempMax.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStats1dHistMWUTempMax.setDescription('The maximum MWU temperature measured in this day interval.')
sub10RadioStats1dHistMWUTempAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 3, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats1dHistMWUTempAvg.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStats1dHistMWUTempAvg.setDescription('The average MWU temperature measured in this day interval.')
sub10RadioStats1dHistRxFrms = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 3, 2, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats1dHistRxFrms.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStats1dHistRxFrms.setDescription('The number of Airside frames received over the Radio interface in this day interval.\n                    This is irrespective of whether the Airside frame transmitted contained\n                    any ethernet data.')
sub10RadioStats1dHistTxFrms = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 3, 2, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats1dHistTxFrms.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStats1dHistTxFrms.setDescription('The number of Airside frames transmitted over the Radio interface in this day interval.\n                    This is irrespective of whether the Airside frame transmitted contained\n                    any ethernet data.')
sub10RadioStats1dHistRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 3, 2, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats1dHistRxPkts.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStats1dHistRxPkts.setDescription('The number of Ethernet packets received over the Radio interface in this day interval.\n                    This includes all packets whether destined for the management\n                    sub-system on this unit or to be sent direct to the Ethernet interface.')
sub10RadioStats1dHistTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 3, 2, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats1dHistTxPkts.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStats1dHistTxPkts.setDescription('The number of Ethernet packets transmitted over the Radio interface\n                    which originated from the Ethernet interface in this day interval. This does not include\n                    packets originating from the management sub-system.')
sub10RadioStats1dHistRxMgmtPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 3, 2, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats1dHistRxMgmtPkts.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStats1dHistRxMgmtPkts.setDescription('The number of Ethernet packets received over the Radio interface  in this day interval\n                    and which are destined for the management sub-system on this unit.')
sub10RadioStats1dHistTxMgmtPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 3, 2, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats1dHistTxMgmtPkts.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStats1dHistTxMgmtPkts.setDescription('The number of Ethernet packets transmitted over the Radio interface\n                    which originated from the management sub-system  in this day interval.\n                    This does not include packets originating from the Ethernet interface.')
sub10RadioStats1dHistRxBadFrms = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 3, 2, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats1dHistRxBadFrms.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStats1dHistRxBadFrms.setDescription('The count of bad frames detected on the\n                    receive side of the Radio interface in this day interval.')
sub10RadioStats1dHistQPSKTo8PSK = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 3, 2, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats1dHistQPSKTo8PSK.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStats1dHistQPSKTo8PSK.setDescription('The number transitions of Modulation Mode configuration\n                    from QPSK to 8PSK in this 1 day interval.')
sub10RadioStats1dHist8PSKToQPSK = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 3, 2, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats1dHist8PSKToQPSK.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStats1dHist8PSKToQPSK.setDescription('The number transitions of Modulation Mode configuration\n                    from 8PSK to QPSK in this 1 day interval.')
sub10RadioStats1dHistAFERMin = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 3, 2, 1, 31), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats1dHistAFERMin.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStats1dHistAFERMin.setDescription('The minimum AFER (Air Frame Error Ratio) in this 1 day interval.\n                    See sub10RadioLclAFER.')
sub10RadioStats1dHistAFERMax = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 3, 2, 1, 32), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats1dHistAFERMax.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStats1dHistAFERMax.setDescription('The maximum AFER (Air Frame Error Ratio) in this 1 day interval.\n                    See sub10RadioLclAFER.')
sub10RadioStats1dHistAFERAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 3, 2, 1, 33), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats1dHistAFERAvg.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStats1dHistAFERAvg.setDescription('The average AFER (Air Frame Error Ratio) in this 1 day interval.\n                    See sub10RadioLclAFER.')
sub10RadioStats1dHistRxQPSK = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 3, 2, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats1dHistRxQPSK.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStats1dHistRxQPSK.setDescription('The time in seconds that  the Rx Modulation Mode was QPSK\n                    in this 1 day interval.')
sub10RadioStats1dHistRx8PSK = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 3, 2, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats1dHistRx8PSK.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStats1dHistRx8PSK.setDescription('The time in seconds that the Rx Modulation Mode was 8PSK\n                    in this 1 day interval.')
sub10RadioStats1dHistTxQPSK = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 3, 2, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats1dHistTxQPSK.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStats1dHistTxQPSK.setDescription('The time in seconds that the Tx Modulation Mode was QPSK\n                    in this 1 day interval.')
sub10RadioStats1dHistTx8PSK = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 3, 2, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats1dHistTx8PSK.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStats1dHistTx8PSK.setDescription('The time in seconds that the Tx Modulation Mode was 8PSK\n                    in this 1 day interval.')
sub10Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 39003, 20, 1, 1)).setObjects(("SUB10SYSTEMS-MIB", "sub10NotificationsGrp"), ("SUB10SYSTEMS-MIB", "sub10UnitLocalStatusGrp"), ("SUB10SYSTEMS-MIB", "sub10UnitLclAlarmStateEntryGrp"), ("SUB10SYSTEMS-MIB", "sub10UnitRemoteStatusGrp"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtSystemGrp"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtIpGrp"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtVlanGrp"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtUsersGrp"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtUserEntryGrp"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtTimeGrp"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtAlarmEntryGrp"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtAlarmsGrp"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtSnmpGrp"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtSnmpTrpDstEntryGrp"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtSnmpUserEntryGrp"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtSnmpAccessEntryGrp"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtSnmpTargetEntryGrp"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtFirmwareGrp"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtFirmwareBankEntryGrp"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtDNSEntryGrp"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtEncryptionGrp"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtLicenseGrp"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtSyncEGrp"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtActionsGrp"), ("SUB10SYSTEMS-MIB", "sub10EthLclStatusEntryGrp"), ("SUB10SYSTEMS-MIB", "sub10EthRmtStatusEntryGrp"), ("SUB10SYSTEMS-MIB", "sub10EthMgmtPhyEntryGrp"), ("SUB10SYSTEMS-MIB", "sub10EthMgmtVlanGrp"), ("SUB10SYSTEMS-MIB", "sub10EthMgmtVlanAllowedEntryGrp"), ("SUB10SYSTEMS-MIB", "sub10EthMgmtQoSGrp"), ("SUB10SYSTEMS-MIB", "sub10EthMgmtQoSQEntryGrp"), ("SUB10SYSTEMS-MIB", "sub10EthMgmtQoSVlanEntryGrp"), ("SUB10SYSTEMS-MIB", "sub10EthMgmtQoSPCPEntryGrp"), ("SUB10SYSTEMS-MIB", "sub10EthMgmtQoSDSCPEntryGrp"), ("SUB10SYSTEMS-MIB", "sub10EthMgmtQoSMPLSEntryGrp"), ("SUB10SYSTEMS-MIB", "sub10EthMgmtStatsActiveEntryGrp"), ("SUB10SYSTEMS-MIB", "sub10EthernetStatsGrp"), ("SUB10SYSTEMS-MIB", "sub10EthernetStatsCurrEntryGrp"), ("SUB10SYSTEMS-MIB", "sub10EthernetStats15mHistoryGrp"), ("SUB10SYSTEMS-MIB", "sub10EthStats15mHistEntryGrp"), ("SUB10SYSTEMS-MIB", "sub10EthStats1dHistoryGrp"), ("SUB10SYSTEMS-MIB", "sub10EthStats1dHistEntryGrp"), ("SUB10SYSTEMS-MIB", "sub10RadioLocalStatusGrp"), ("SUB10SYSTEMS-MIB", "sub10RadioRemoteStatusGrp"), ("SUB10SYSTEMS-MIB", "sub10RadioMgmtGrp"), ("SUB10SYSTEMS-MIB", "sub10RadioMgmtStatsGrp"), ("SUB10SYSTEMS-MIB", "sub10RadioMgmtStatsActiveEntryGrp"), ("SUB10SYSTEMS-MIB", "sub10RadioStatsGrp"), ("SUB10SYSTEMS-MIB", "sub10RadioStatsCurrentGrp"), ("SUB10SYSTEMS-MIB", "sub10RadioStats1mHistoryGrp"), ("SUB10SYSTEMS-MIB", "sub10RadioStats1mHistEntryGrp"), ("SUB10SYSTEMS-MIB", "sub10RadioStats15mHistoryGrp"), ("SUB10SYSTEMS-MIB", "sub10RadioStats15mHistEntryGrp"), ("SUB10SYSTEMS-MIB", "sub10RadioStats1dHistoryGrp"), ("SUB10SYSTEMS-MIB", "sub10RadioStats1dHistEntryGrp"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sub10Compliance = sub10Compliance.setStatus('current')
if mibBuilder.loadTexts: sub10Compliance.setDescription('The compliance statement for Sub10 entities which implement the SUB10SYSTEMS-MIB.')
sub10NotificationsGrp = NotificationGroup((1, 3, 6, 1, 4, 1, 39003, 20, 2, 1)).setObjects(("SUB10SYSTEMS-MIB", "sub10UnitAlarm"), ("SUB10SYSTEMS-MIB", "sub10EthernetAlarm"), ("SUB10SYSTEMS-MIB", "sub10RadioAlarm"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sub10NotificationsGrp = sub10NotificationsGrp.setStatus('current')
if mibBuilder.loadTexts: sub10NotificationsGrp.setDescription('This group defines objects that are members of the sub10NotificationsGrp group')
sub10UnitLocalStatusGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 39003, 20, 2, 2)).setObjects(("SUB10SYSTEMS-MIB", "sub10UnitLclTime"), ("SUB10SYSTEMS-MIB", "sub10UnitLclUnitType"), ("SUB10SYSTEMS-MIB", "sub10UnitLclDescription"), ("SUB10SYSTEMS-MIB", "sub10UnitLclHWSerialNumber"), ("SUB10SYSTEMS-MIB", "sub10UnitLclTerminalName"), ("SUB10SYSTEMS-MIB", "sub10UnitLclTerminalType"), ("SUB10SYSTEMS-MIB", "sub10UnitLclLinkName"), ("SUB10SYSTEMS-MIB", "sub10UnitLclLinkId"), ("SUB10SYSTEMS-MIB", "sub10UnitLclSiteName"), ("SUB10SYSTEMS-MIB", "sub10UnitLclFirmwareLoadedBank"), ("SUB10SYSTEMS-MIB", "sub10UnitLclFirmwareVersion"), ("SUB10SYSTEMS-MIB", "sub10UnitLclIpAddress"), ("SUB10SYSTEMS-MIB", "sub10UnitLclMWUTemperature"), ("SUB10SYSTEMS-MIB", "sub10UnitLclNTPSyncStatus"), ("SUB10SYSTEMS-MIB", "sub10UnitLclRadioDataRate"), ("SUB10SYSTEMS-MIB", "sub10UnitLclMWUType"), ("SUB10SYSTEMS-MIB", "sub10UnitLclFPGAVersion"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sub10UnitLocalStatusGrp = sub10UnitLocalStatusGrp.setStatus('current')
if mibBuilder.loadTexts: sub10UnitLocalStatusGrp.setDescription('This group defines objects that are members of the sub10UnitLocalStatusGrp group')
sub10UnitLclAlarmStateEntryGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 39003, 20, 2, 3)).setObjects(("SUB10SYSTEMS-MIB", "sub10UnitLclAlarmState"), ("SUB10SYSTEMS-MIB", "sub10UnitLclAlarmStateTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sub10UnitLclAlarmStateEntryGrp = sub10UnitLclAlarmStateEntryGrp.setStatus('current')
if mibBuilder.loadTexts: sub10UnitLclAlarmStateEntryGrp.setDescription('This group defines objects that are members of the sub10UnitLclAlarmStateEntryGrp group')
sub10UnitRemoteStatusGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 39003, 20, 2, 4)).setObjects(("SUB10SYSTEMS-MIB", "sub10UnitRmtUnitType"), ("SUB10SYSTEMS-MIB", "sub10UnitRmtTime"), ("SUB10SYSTEMS-MIB", "sub10UnitRmtTerminalName"), ("SUB10SYSTEMS-MIB", "sub10UnitRmtTerminalType"), ("SUB10SYSTEMS-MIB", "sub10UnitRmtLinkName"), ("SUB10SYSTEMS-MIB", "sub10UnitRmtLinkId"), ("SUB10SYSTEMS-MIB", "sub10UnitRmtHWSerialNumber"), ("SUB10SYSTEMS-MIB", "sub10UnitRmtFirmwareVersion"), ("SUB10SYSTEMS-MIB", "sub10UnitRmtIpAddress"), ("SUB10SYSTEMS-MIB", "sub10UnitRmtMWUTemperature"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sub10UnitRemoteStatusGrp = sub10UnitRemoteStatusGrp.setStatus('current')
if mibBuilder.loadTexts: sub10UnitRemoteStatusGrp.setDescription('This group defines objects that are members of the sub10UnitRemoteStatusGrp group')
sub10UnitMgmtSystemGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 39003, 20, 2, 5)).setObjects(("SUB10SYSTEMS-MIB", "sub10UnitMgmtTerminalName"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtLinkName"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtLinkId"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtSiteName"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtContactName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sub10UnitMgmtSystemGrp = sub10UnitMgmtSystemGrp.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtSystemGrp.setDescription('This group defines objects that are members of the sub10UnitMgmtSystemGrp group')
sub10UnitMgmtIpGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 39003, 20, 2, 6)).setObjects(("SUB10SYSTEMS-MIB", "sub10UnitMgmtIpMode"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtIpAddress"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtIpSubnetMask"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtIpDefGateway"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtIpDHCP"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sub10UnitMgmtIpGrp = sub10UnitMgmtIpGrp.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtIpGrp.setDescription('This group defines objects that are members of the sub10UnitMgmtIpGrp group')
sub10UnitMgmtVlanGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 39003, 20, 2, 7)).setObjects(("SUB10SYSTEMS-MIB", "sub10UnitMgmtVlanState"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtVlanId"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtVlanPriority"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtVlanDSCP"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtVlanDEI"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sub10UnitMgmtVlanGrp = sub10UnitMgmtVlanGrp.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtVlanGrp.setDescription('This group defines objects that are members of the sub10UnitMgmtVlanGrp group')
sub10UnitMgmtUsersGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 39003, 20, 2, 8)).setObjects(("SUB10SYSTEMS-MIB", "sub10UnitMgmtUsersNumber"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sub10UnitMgmtUsersGrp = sub10UnitMgmtUsersGrp.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtUsersGrp.setDescription('This group defines objects that are members of the sub10UnitMgmtUsersGrp group')
sub10UnitMgmtUserEntryGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 39003, 20, 2, 9)).setObjects(("SUB10SYSTEMS-MIB", "sub10UnitMgmtUserRowStatus"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtUserName"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtUserGroup"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtUserPassword"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtUserPasswordVerify"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sub10UnitMgmtUserEntryGrp = sub10UnitMgmtUserEntryGrp.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtUserEntryGrp.setDescription('This group defines objects that are members of the sub10UnitMgmtUserEntryGrp group')
sub10UnitMgmtTimeGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 39003, 20, 2, 10)).setObjects(("SUB10SYSTEMS-MIB", "sub10UnitMgmtTimeLocal"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtTimeNTPEnabled"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtTimeNTPServer1"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtTimeNTPServer2"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtTimeNTPPort"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtTimeNTPSyncStatus"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtDateTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sub10UnitMgmtTimeGrp = sub10UnitMgmtTimeGrp.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtTimeGrp.setDescription('This group defines objects that are members of the sub10UnitMgmtTimeGrp group')
sub10UnitMgmtAlarmEntryGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 39003, 20, 2, 11)).setObjects(("SUB10SYSTEMS-MIB", "sub10UnitMgmtAlarmRowStatus"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtAlarmName"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtAlarmSeverity"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtAlarmMeasObject"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtAlarmMonitorIntvl"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtAlarmRaiseOper"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtAlarmRaiseThresh"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtAlarmClearOper"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtAlarmClearThresh"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtAlarmRaiseIntvls"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtAlarmClearIntvls"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtAlarmType"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtAlarmSmtpAddress"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtAlarmToSyslog"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtAlarmEnabled"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtAlarmMeasObjectVal"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtAlarmToSNMP"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtAlarmMeasObjIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sub10UnitMgmtAlarmEntryGrp = sub10UnitMgmtAlarmEntryGrp.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtAlarmEntryGrp.setDescription('This group defines objects that are members of the sub10UnitMgmtAlarmEntryGrp group')
sub10UnitMgmtAlarmsGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 39003, 20, 2, 12)).setObjects(("SUB10SYSTEMS-MIB", "sub10UnitMgmtAlarmsUserDefStart"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sub10UnitMgmtAlarmsGrp = sub10UnitMgmtAlarmsGrp.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtAlarmsGrp.setDescription('This group defines objects that are members of the sub10UnitMgmtAlarmsGrp group')
sub10UnitMgmtSnmpGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 39003, 20, 2, 13)).setObjects(("SUB10SYSTEMS-MIB", "sub10UnitMgmtSnmpAgent"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtSnmpTraps"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtSnmpv320Mib"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtSnmpv3"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtSnmpEngineIdFormat"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtSnmpEngineIdText"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtSnmpEngineId"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtSnmpOperAuthProto"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtSnmpOperPrivProto"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtSnmpAdminAuthProto"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtSnmpAdminPrivProto"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtSnmpMaintAuthProto"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtSnmpMaintPrivProto"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sub10UnitMgmtSnmpGrp = sub10UnitMgmtSnmpGrp.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtSnmpGrp.setDescription('This group defines objects that are members of the sub10UnitMgmtSnmpGrp group')
sub10UnitMgmtSnmpTrpDstEntryGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 39003, 20, 2, 14)).setObjects(("SUB10SYSTEMS-MIB", "sub10UnitMgmtSnmpTrpDstRowStatus"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtSnmpTrpDstIpAddr"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtSnmpTrpDstCommunity"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sub10UnitMgmtSnmpTrpDstEntryGrp = sub10UnitMgmtSnmpTrpDstEntryGrp.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtSnmpTrpDstEntryGrp.setDescription('This group defines objects that are members of the sub10UnitMgmtSnmpTrpDstEntryGrp group')
sub10UnitMgmtSnmpUserEntryGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 39003, 20, 2, 15)).setObjects(("SUB10SYSTEMS-MIB", "sub10UnitMgmtSnmpUserRowStatus"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtSnmpUserName"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtSnmpUserGroup"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtSnmpUserAuthPwd"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtSnmpUserAuthPwdChk"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtSnmpUserPrivPwd"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtSnmpUserPrivPwdChk"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sub10UnitMgmtSnmpUserEntryGrp = sub10UnitMgmtSnmpUserEntryGrp.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtSnmpUserEntryGrp.setDescription('This group defines objects that are members of the sub10UnitMgmtSnmpUserEntryGrp group')
sub10UnitMgmtSnmpAccessEntryGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 39003, 20, 2, 16)).setObjects(("SUB10SYSTEMS-MIB", "sub10UnitMgmtSnmpAccessRowStatus"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtSnmpAccessName"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtSnmpAccessIpAddr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sub10UnitMgmtSnmpAccessEntryGrp = sub10UnitMgmtSnmpAccessEntryGrp.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtSnmpAccessEntryGrp.setDescription('This group defines objects that are members of the sub10UnitMgmtSnmpAccessEntryGrp group')
sub10UnitMgmtSnmpTargetEntryGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 39003, 20, 2, 17)).setObjects(("SUB10SYSTEMS-MIB", "sub10UnitMgmtSnmpTargetRowStatus"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtSnmpTargetName"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtSnmpTargetIpAddr"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtSnmpTargetUserName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sub10UnitMgmtSnmpTargetEntryGrp = sub10UnitMgmtSnmpTargetEntryGrp.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtSnmpTargetEntryGrp.setDescription('This group defines objects that are members of the sub10UnitMgmtSnmpTargetEntryGrp group')
sub10UnitMgmtFirmwareGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 39003, 20, 2, 18)).setObjects(("SUB10SYSTEMS-MIB", "sub10UnitMgmtFirmwareSelectBank"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtFirmwareLoadedBank"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtFirmwareVersion"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtFirmwareBootVersion"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtFirmwareAction"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtFirmwareUplImage"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtFirmwareUplSvrIp"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtFirmwareFromBank"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtFirmwareToBank"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtFirmwareActStatus"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtFirmwareActProgress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sub10UnitMgmtFirmwareGrp = sub10UnitMgmtFirmwareGrp.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtFirmwareGrp.setDescription('This group defines objects that are members of the sub10UnitMgmtFirmwareGrp group')
sub10UnitMgmtFirmwareBankEntryGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 39003, 20, 2, 19)).setObjects(("SUB10SYSTEMS-MIB", "sub10UnitMgmtFirmwareBankVersion"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtFirmwareBankImage"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sub10UnitMgmtFirmwareBankEntryGrp = sub10UnitMgmtFirmwareBankEntryGrp.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtFirmwareBankEntryGrp.setDescription('This group defines objects that are members of the sub10UnitMgmtFirmwareBankEntryGrp group')
sub10UnitMgmtDNSEntryGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 39003, 20, 2, 20)).setObjects(("SUB10SYSTEMS-MIB", "sub10UnitMgmtDNServer"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sub10UnitMgmtDNSEntryGrp = sub10UnitMgmtDNSEntryGrp.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtDNSEntryGrp.setDescription('This group defines objects that are members of the sub10UnitMgmtDNSEntryGrp group')
sub10UnitMgmtEncryptionGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 39003, 20, 2, 21)).setObjects(("SUB10SYSTEMS-MIB", "sub10UnitMgmtEncryptMode"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtEncryptKey"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sub10UnitMgmtEncryptionGrp = sub10UnitMgmtEncryptionGrp.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtEncryptionGrp.setDescription('This group defines objects that are members of the sub10UnitMgmtEncryptionGrp group')
sub10UnitMgmtLicenseGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 39003, 20, 2, 22)).setObjects(("SUB10SYSTEMS-MIB", "sub10UnitMgmtLicenseKey"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtLicenseAES"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sub10UnitMgmtLicenseGrp = sub10UnitMgmtLicenseGrp.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtLicenseGrp.setDescription('This group defines objects that are members of the sub10UnitMgmtLicenseGrp group')
sub10UnitMgmtSyncEGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 39003, 20, 2, 23)).setObjects(("SUB10SYSTEMS-MIB", "sub10UnitMgmtSyncEMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sub10UnitMgmtSyncEGrp = sub10UnitMgmtSyncEGrp.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtSyncEGrp.setDescription('This group defines objects that are members of the sub10UnitMgmtSyncEGrp group')
sub10UnitMgmtActionsGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 39003, 20, 2, 24)).setObjects(("SUB10SYSTEMS-MIB", "sub10UnitMgmtTransaction"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtTransactionStatus"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtRollbackTimeout"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtTransactionMode"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtResetAction"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtResetStatsGroup"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtResetAlarmsType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sub10UnitMgmtActionsGrp = sub10UnitMgmtActionsGrp.setStatus('current')
if mibBuilder.loadTexts: sub10UnitMgmtActionsGrp.setDescription('This group defines objects that are members of the sub10UnitMgmtActionsGrp group')
sub10EthLclStatusEntryGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 39003, 20, 2, 25)).setObjects(("SUB10SYSTEMS-MIB", "sub10EthLclLinkStatus"), ("SUB10SYSTEMS-MIB", "sub10EthLclMacAddress"), ("SUB10SYSTEMS-MIB", "sub10EthLclSpeed"), ("SUB10SYSTEMS-MIB", "sub10EthLclDuplex"), ("SUB10SYSTEMS-MIB", "sub10EthLclMDI"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sub10EthLclStatusEntryGrp = sub10EthLclStatusEntryGrp.setStatus('current')
if mibBuilder.loadTexts: sub10EthLclStatusEntryGrp.setDescription('This group defines objects that are members of the sub10EthLclStatusEntryGrp group')
sub10EthRmtStatusEntryGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 39003, 20, 2, 26)).setObjects(("SUB10SYSTEMS-MIB", "sub10EthRmtLinkStatus"), ("SUB10SYSTEMS-MIB", "sub10EthRmtMacAddress"), ("SUB10SYSTEMS-MIB", "sub10EthRmtSpeed"), ("SUB10SYSTEMS-MIB", "sub10EthRmtDuplex"), ("SUB10SYSTEMS-MIB", "sub10EthRmtMDI"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sub10EthRmtStatusEntryGrp = sub10EthRmtStatusEntryGrp.setStatus('current')
if mibBuilder.loadTexts: sub10EthRmtStatusEntryGrp.setDescription('This group defines objects that are members of the sub10EthRmtStatusEntryGrp group')
sub10EthMgmtPhyEntryGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 39003, 20, 2, 27)).setObjects(("SUB10SYSTEMS-MIB", "sub10EthMgmtPhyAutoNeg"), ("SUB10SYSTEMS-MIB", "sub10EthMgmtPhySpeed"), ("SUB10SYSTEMS-MIB", "sub10EthMgmtPhyDuplex"), ("SUB10SYSTEMS-MIB", "sub10EthMgmtPhyMDI"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sub10EthMgmtPhyEntryGrp = sub10EthMgmtPhyEntryGrp.setStatus('current')
if mibBuilder.loadTexts: sub10EthMgmtPhyEntryGrp.setDescription('This group defines objects that are members of the sub10EthMgmtPhyEntryGrp group')
sub10EthMgmtVlanGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 39003, 20, 2, 28)).setObjects(("SUB10SYSTEMS-MIB", "sub10EthMgmtVlanFiltering"), ("SUB10SYSTEMS-MIB", "sub10EthMgmtVlanDefaultEnabled"), ("SUB10SYSTEMS-MIB", "sub10EthMgmtVlanDefaultId"), ("SUB10SYSTEMS-MIB", "sub10EthMgmtVlanDefaultPriority"), ("SUB10SYSTEMS-MIB", "sub10EthMgmtVlanDefaultDEI"), ("SUB10SYSTEMS-MIB", "sub10EthMgmtVlanIngressAction"), ("SUB10SYSTEMS-MIB", "sub10EthMgmtVlanEgressAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sub10EthMgmtVlanGrp = sub10EthMgmtVlanGrp.setStatus('current')
if mibBuilder.loadTexts: sub10EthMgmtVlanGrp.setDescription('This group defines objects that are members of the sub10EthMgmtVlanGrp group')
sub10EthMgmtVlanAllowedEntryGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 39003, 20, 2, 29)).setObjects(("SUB10SYSTEMS-MIB", "sub10EthMgmtVlanAllowedRowStatus"), ("SUB10SYSTEMS-MIB", "sub10EthMgmtVlanAllowedId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sub10EthMgmtVlanAllowedEntryGrp = sub10EthMgmtVlanAllowedEntryGrp.setStatus('current')
if mibBuilder.loadTexts: sub10EthMgmtVlanAllowedEntryGrp.setDescription('This group defines objects that are members of the sub10EthMgmtVlanAllowedEntryGrp group')
sub10EthMgmtQoSGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 39003, 20, 2, 30)).setObjects(("SUB10SYSTEMS-MIB", "sub10EthMgmtQoSActiveState"), ("SUB10SYSTEMS-MIB", "sub10EthMgmtQoSMode"), ("SUB10SYSTEMS-MIB", "sub10EthMgmtQoSUntaggedQueue"), ("SUB10SYSTEMS-MIB", "sub10EthMgmtQoSVlanMappingNumber"), ("SUB10SYSTEMS-MIB", "sub10EthMgmtQoSDSCPMappingNumber"), ("SUB10SYSTEMS-MIB", "sub10EthMgmtQoSMPLSMappingNumber"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sub10EthMgmtQoSGrp = sub10EthMgmtQoSGrp.setStatus('current')
if mibBuilder.loadTexts: sub10EthMgmtQoSGrp.setDescription('This group defines objects that are members of the sub10EthMgmtQoSGrp group')
sub10EthMgmtQoSQEntryGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 39003, 20, 2, 31)).setObjects(("SUB10SYSTEMS-MIB", "sub10EthMgmtQoSQSchedulingType"), ("SUB10SYSTEMS-MIB", "sub10EthMgmtQoSQDWRRWeight"), ("SUB10SYSTEMS-MIB", "sub10EthMgmtQoSQCongestionPolicy"), ("SUB10SYSTEMS-MIB", "sub10EthMgmtQoSQSizeMax"), ("SUB10SYSTEMS-MIB", "sub10EthMgmtQoSQLen"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sub10EthMgmtQoSQEntryGrp = sub10EthMgmtQoSQEntryGrp.setStatus('current')
if mibBuilder.loadTexts: sub10EthMgmtQoSQEntryGrp.setDescription('This group defines objects that are members of the sub10EthMgmtQoSQEntryGrp group')
sub10EthMgmtQoSVlanEntryGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 39003, 20, 2, 32)).setObjects(("SUB10SYSTEMS-MIB", "sub10EthMgmtQoSVlanId"), ("SUB10SYSTEMS-MIB", "sub10EthMgmtQoSVlanQueue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sub10EthMgmtQoSVlanEntryGrp = sub10EthMgmtQoSVlanEntryGrp.setStatus('current')
if mibBuilder.loadTexts: sub10EthMgmtQoSVlanEntryGrp.setDescription('This group defines objects that are members of the sub10EthMgmtQoSVlanEntryGrp group')
sub10EthMgmtQoSPCPEntryGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 39003, 20, 2, 33)).setObjects(("SUB10SYSTEMS-MIB", "sub10EthMgmtQoSPCPQueue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sub10EthMgmtQoSPCPEntryGrp = sub10EthMgmtQoSPCPEntryGrp.setStatus('current')
if mibBuilder.loadTexts: sub10EthMgmtQoSPCPEntryGrp.setDescription('This group defines objects that are members of the sub10EthMgmtQoSPCPEntryGrp group')
sub10EthMgmtQoSDSCPEntryGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 39003, 20, 2, 34)).setObjects(("SUB10SYSTEMS-MIB", "sub10EthMgmtQoSDSCPMarking"), ("SUB10SYSTEMS-MIB", "sub10EthMgmtQoSDSCPQueue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sub10EthMgmtQoSDSCPEntryGrp = sub10EthMgmtQoSDSCPEntryGrp.setStatus('current')
if mibBuilder.loadTexts: sub10EthMgmtQoSDSCPEntryGrp.setDescription('This group defines objects that are members of the sub10EthMgmtQoSDSCPEntryGrp group')
sub10EthMgmtQoSMPLSEntryGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 39003, 20, 2, 35)).setObjects(("SUB10SYSTEMS-MIB", "sub10EthMgmtQoSMPLSTrafficClass"), ("SUB10SYSTEMS-MIB", "sub10EthMgmtQoSMPLSQueue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sub10EthMgmtQoSMPLSEntryGrp = sub10EthMgmtQoSMPLSEntryGrp.setStatus('current')
if mibBuilder.loadTexts: sub10EthMgmtQoSMPLSEntryGrp.setDescription('This group defines objects that are members of the sub10EthMgmtQoSMPLSEntryGrp group')
sub10EthMgmtStatsActiveEntryGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 39003, 20, 2, 36)).setObjects(("SUB10SYSTEMS-MIB", "sub10EthMgmtStatsActiveName"), ("SUB10SYSTEMS-MIB", "sub10EthMgmtStatsActiveState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sub10EthMgmtStatsActiveEntryGrp = sub10EthMgmtStatsActiveEntryGrp.setStatus('current')
if mibBuilder.loadTexts: sub10EthMgmtStatsActiveEntryGrp.setDescription('This group defines objects that are members of the sub10EthMgmtStatsActiveEntryGrp group')
sub10EthernetStatsGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 39003, 20, 2, 37)).setObjects(("SUB10SYSTEMS-MIB", "sub10EthStatsTimeElapsed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sub10EthernetStatsGrp = sub10EthernetStatsGrp.setStatus('current')
if mibBuilder.loadTexts: sub10EthernetStatsGrp.setDescription('This group defines objects that are members of the sub10EthernetStatsGrp group')
sub10EthernetStatsCurrEntryGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 39003, 20, 2, 38)).setObjects(("SUB10SYSTEMS-MIB", "sub10EthStatsCurrRxOctets"), ("SUB10SYSTEMS-MIB", "sub10EthStatsCurrRxGoodFrms"), ("SUB10SYSTEMS-MIB", "sub10EthStatsCurrRxBcastFrms"), ("SUB10SYSTEMS-MIB", "sub10EthStatsCurrRxMcastFrms"), ("SUB10SYSTEMS-MIB", "sub10EthStatsCurrRxPauseFrms"), ("SUB10SYSTEMS-MIB", "sub10EthStatsCurrRxCRCErrs"), ("SUB10SYSTEMS-MIB", "sub10EthStatsCurrRxAlignErrs"), ("SUB10SYSTEMS-MIB", "sub10EthStatsCurrRxOversized"), ("SUB10SYSTEMS-MIB", "sub10EthStatsCurrRxJabberFrms"), ("SUB10SYSTEMS-MIB", "sub10EthStatsCurrRxUndersized"), ("SUB10SYSTEMS-MIB", "sub10EthStatsCurrRxFragments"), ("SUB10SYSTEMS-MIB", "sub10EthStatsCurrRxSOFOvrns"), ("SUB10SYSTEMS-MIB", "sub10EthStatsCurrTxOctets"), ("SUB10SYSTEMS-MIB", "sub10EthStatsCurrTxGoodFrms"), ("SUB10SYSTEMS-MIB", "sub10EthStatsCurrTxBcastFrms"), ("SUB10SYSTEMS-MIB", "sub10EthStatsCurrTxMcastFrms"), ("SUB10SYSTEMS-MIB", "sub10EthStatsCurrTxPauseFrms"), ("SUB10SYSTEMS-MIB", "sub10EthStatsCurrTxDeferred"), ("SUB10SYSTEMS-MIB", "sub10EthStatsCurrTxCollsn"), ("SUB10SYSTEMS-MIB", "sub10EthStatsCurrTxSnglCollsn"), ("SUB10SYSTEMS-MIB", "sub10EthStatsCurrTxMlplCollsn"), ("SUB10SYSTEMS-MIB", "sub10EthStatsCurrTxExsvCollsn"), ("SUB10SYSTEMS-MIB", "sub10EthStatsCurrTxLtCollsn"), ("SUB10SYSTEMS-MIB", "sub10EthStatsCurrTxCSenseErrs"), ("SUB10SYSTEMS-MIB", "sub10EthStatsCurrPkts64Octets"), ("SUB10SYSTEMS-MIB", "sub10EthStatsCurrPkts65T127"), ("SUB10SYSTEMS-MIB", "sub10EthStatsCurrPkts128T255"), ("SUB10SYSTEMS-MIB", "sub10EthStatsCurrPkts256T511"), ("SUB10SYSTEMS-MIB", "sub10EthStatsCurrPkts512T1023"), ("SUB10SYSTEMS-MIB", "sub10EthStatsCurrPkts1024TMax"), ("SUB10SYSTEMS-MIB", "sub10EthStatsCurrRxMbps"), ("SUB10SYSTEMS-MIB", "sub10EthStatsCurrTxMbps"), ("SUB10SYSTEMS-MIB", "sub10EthStatsCurrRxMbpsMin"), ("SUB10SYSTEMS-MIB", "sub10EthStatsCurrRxMbpsMax"), ("SUB10SYSTEMS-MIB", "sub10EthStatsCurrRxMbpsAvg"), ("SUB10SYSTEMS-MIB", "sub10EthStatsCurrTxMbpsMin"), ("SUB10SYSTEMS-MIB", "sub10EthStatsCurrTxMbpsMax"), ("SUB10SYSTEMS-MIB", "sub10EthStatsCurrTxMbpsAvg"), ("SUB10SYSTEMS-MIB", "sub10EthStatsCurrRmtRxMbpsAvg"), ("SUB10SYSTEMS-MIB", "sub10EthStatsCurrRmtTxMbpsAvg"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sub10EthernetStatsCurrEntryGrp = sub10EthernetStatsCurrEntryGrp.setStatus('current')
if mibBuilder.loadTexts: sub10EthernetStatsCurrEntryGrp.setDescription('This group defines objects that are members of the sub10EthernetStatsCurrEntryGrp group')
sub10EthernetStats15mHistoryGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 39003, 20, 2, 39)).setObjects(("SUB10SYSTEMS-MIB", "sub10EthStats15mHistIntvls"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sub10EthernetStats15mHistoryGrp = sub10EthernetStats15mHistoryGrp.setStatus('current')
if mibBuilder.loadTexts: sub10EthernetStats15mHistoryGrp.setDescription('This group defines objects that are members of the sub10EthernetStats15mHistoryGrp group')
sub10EthStats15mHistEntryGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 39003, 20, 2, 40)).setObjects(("SUB10SYSTEMS-MIB", "sub10EthStats15mHistTime"), ("SUB10SYSTEMS-MIB", "sub10EthStats15mHistRxOctets"), ("SUB10SYSTEMS-MIB", "sub10EthStats15mHistRxGoodFrms"), ("SUB10SYSTEMS-MIB", "sub10EthStats15mHistRxBcastFrms"), ("SUB10SYSTEMS-MIB", "sub10EthStats15mHistRxMcastFrms"), ("SUB10SYSTEMS-MIB", "sub10EthStats15mHistRxPauseFrms"), ("SUB10SYSTEMS-MIB", "sub10EthStats15mHistRxCRCErrs"), ("SUB10SYSTEMS-MIB", "sub10EthStats15mHistRxAlignErrs"), ("SUB10SYSTEMS-MIB", "sub10EthStats15mHistRxOversized"), ("SUB10SYSTEMS-MIB", "sub10EthStats15mHistRxJabberFrms"), ("SUB10SYSTEMS-MIB", "sub10EthStats15mHistRxUndersized"), ("SUB10SYSTEMS-MIB", "sub10EthStats15mHistRxFragments"), ("SUB10SYSTEMS-MIB", "sub10EthStats15mHistRxSOFOvrns"), ("SUB10SYSTEMS-MIB", "sub10EthStats15mHistTxOctets"), ("SUB10SYSTEMS-MIB", "sub10EthStats15mHistTxGoodFrms"), ("SUB10SYSTEMS-MIB", "sub10EthStats15mHistTxBcastFrms"), ("SUB10SYSTEMS-MIB", "sub10EthStats15mHistTxMcastFrms"), ("SUB10SYSTEMS-MIB", "sub10EthStats15mHistTxPauseFrms"), ("SUB10SYSTEMS-MIB", "sub10EthStats15mHistTxDeferred"), ("SUB10SYSTEMS-MIB", "sub10EthStats15mHistTxCollsn"), ("SUB10SYSTEMS-MIB", "sub10EthStats15mHistTxSnglCollsn"), ("SUB10SYSTEMS-MIB", "sub10EthStats15mHistTxMlplCollsn"), ("SUB10SYSTEMS-MIB", "sub10EthStats15mHistTxExsvCollsn"), ("SUB10SYSTEMS-MIB", "sub10EthStats15mHistTxLtCollsn"), ("SUB10SYSTEMS-MIB", "sub10EthStats15mHistTxCSenseErrs"), ("SUB10SYSTEMS-MIB", "sub10EthStats15mHistPkts64Octets"), ("SUB10SYSTEMS-MIB", "sub10EthStats15mHistPkts65T127"), ("SUB10SYSTEMS-MIB", "sub10EthStats15mHistPkts128T255"), ("SUB10SYSTEMS-MIB", "sub10EthStats15mHistPkts256T511"), ("SUB10SYSTEMS-MIB", "sub10EthStats15mHistPkts512T1023"), ("SUB10SYSTEMS-MIB", "sub10EthStats15mHistPkts1024TMax"), ("SUB10SYSTEMS-MIB", "sub10EthStats15mHistRxMbpsMin"), ("SUB10SYSTEMS-MIB", "sub10EthStats15mHistRxMbpsMax"), ("SUB10SYSTEMS-MIB", "sub10EthStats15mHistRxMbpsAvg"), ("SUB10SYSTEMS-MIB", "sub10EthStats15mHistTxMbpsMin"), ("SUB10SYSTEMS-MIB", "sub10EthStats15mHistTxMbpsMax"), ("SUB10SYSTEMS-MIB", "sub10EthStats15mHistTxMbpsAvg"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sub10EthStats15mHistEntryGrp = sub10EthStats15mHistEntryGrp.setStatus('current')
if mibBuilder.loadTexts: sub10EthStats15mHistEntryGrp.setDescription('This group defines objects that are members of the sub10EthStats15mHistEntryGrp group')
sub10EthStats1dHistoryGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 39003, 20, 2, 41)).setObjects(("SUB10SYSTEMS-MIB", "sub10EthStats1dHistIntvls"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sub10EthStats1dHistoryGrp = sub10EthStats1dHistoryGrp.setStatus('current')
if mibBuilder.loadTexts: sub10EthStats1dHistoryGrp.setDescription('This group defines objects that are members of the sub10EthStats1dHistoryGrp group')
sub10EthStats1dHistEntryGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 39003, 20, 2, 42)).setObjects(("SUB10SYSTEMS-MIB", "sub10EthStats1dHistTime"), ("SUB10SYSTEMS-MIB", "sub10EthStats1dHistRxOctets"), ("SUB10SYSTEMS-MIB", "sub10EthStats1dHistRxGoodFrms"), ("SUB10SYSTEMS-MIB", "sub10EthStats1dHistRxBcastFrms"), ("SUB10SYSTEMS-MIB", "sub10EthStats1dHistRxMcastFrms"), ("SUB10SYSTEMS-MIB", "sub10EthStats1dHistRxPauseFrms"), ("SUB10SYSTEMS-MIB", "sub10EthStats1dHistRxCRCErrs"), ("SUB10SYSTEMS-MIB", "sub10EthStats1dHistRxAlignErrs"), ("SUB10SYSTEMS-MIB", "sub10EthStats1dHistRxOversized"), ("SUB10SYSTEMS-MIB", "sub10EthStats1dHistRxJabberFrms"), ("SUB10SYSTEMS-MIB", "sub10EthStats1dHistRxUndersized"), ("SUB10SYSTEMS-MIB", "sub10EthStats1dHistRxFragments"), ("SUB10SYSTEMS-MIB", "sub10EthStats1dHistRxSOFOvrns"), ("SUB10SYSTEMS-MIB", "sub10EthStats1dHistTxOctets"), ("SUB10SYSTEMS-MIB", "sub10EthStats1dHistTxGoodFrms"), ("SUB10SYSTEMS-MIB", "sub10EthStats1dHistTxBcastFrms"), ("SUB10SYSTEMS-MIB", "sub10EthStats1dHistTxMcastFrms"), ("SUB10SYSTEMS-MIB", "sub10EthStats1dHistTxPauseFrms"), ("SUB10SYSTEMS-MIB", "sub10EthStats1dHistTxDeferred"), ("SUB10SYSTEMS-MIB", "sub10EthStats1dHistTxCollsn"), ("SUB10SYSTEMS-MIB", "sub10EthStats1dHistTxSnglCollsn"), ("SUB10SYSTEMS-MIB", "sub10EthStats1dHistTxMlplCollsn"), ("SUB10SYSTEMS-MIB", "sub10EthStats1dHistTxExsvCollsn"), ("SUB10SYSTEMS-MIB", "sub10EthStats1dHistTxLtCollsn"), ("SUB10SYSTEMS-MIB", "sub10EthStats1dHistTxCSenseErrs"), ("SUB10SYSTEMS-MIB", "sub10EthStats1dHistPkts64Octets"), ("SUB10SYSTEMS-MIB", "sub10EthStats1dHistPkts65T127"), ("SUB10SYSTEMS-MIB", "sub10EthStats1dHistPkts128T255"), ("SUB10SYSTEMS-MIB", "sub10EthStats1dHistPkts256T511"), ("SUB10SYSTEMS-MIB", "sub10EthStats1dHistPkts512T1023"), ("SUB10SYSTEMS-MIB", "sub10EthStats1dHistPkts1024TMax"), ("SUB10SYSTEMS-MIB", "sub10EthStats1dHistRxMbpsMin"), ("SUB10SYSTEMS-MIB", "sub10EthStats1dHistRxMbpsMax"), ("SUB10SYSTEMS-MIB", "sub10EthStats1dHistRxMbpsAvg"), ("SUB10SYSTEMS-MIB", "sub10EthStats1dHistTxMbpsMin"), ("SUB10SYSTEMS-MIB", "sub10EthStats1dHistTxMbpsMax"), ("SUB10SYSTEMS-MIB", "sub10EthStats1dHistTxMbpsAvg"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sub10EthStats1dHistEntryGrp = sub10EthStats1dHistEntryGrp.setStatus('current')
if mibBuilder.loadTexts: sub10EthStats1dHistEntryGrp.setDescription('This group defines objects that are members of the sub10EthStats1dHistEntryGrp group')
sub10RadioLocalStatusGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 39003, 20, 2, 43)).setObjects(("SUB10SYSTEMS-MIB", "sub10RadioLclLinkStatus"), ("SUB10SYSTEMS-MIB", "sub10RadioLclTxPower"), ("SUB10SYSTEMS-MIB", "sub10RadioLclRxPower"), ("SUB10SYSTEMS-MIB", "sub10RadioLclVectErr"), ("SUB10SYSTEMS-MIB", "sub10RadioLclLnkLoss"), ("SUB10SYSTEMS-MIB", "sub10RadioLclAlignmentMode"), ("SUB10SYSTEMS-MIB", "sub10RadioLclDataRate"), ("SUB10SYSTEMS-MIB", "sub10RadioLclMWUType"), ("SUB10SYSTEMS-MIB", "sub10RadioLclAFER"), ("SUB10SYSTEMS-MIB", "sub10RadioLclRxModulationMode"), ("SUB10SYSTEMS-MIB", "sub10RadioLclTxModulationMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sub10RadioLocalStatusGrp = sub10RadioLocalStatusGrp.setStatus('current')
if mibBuilder.loadTexts: sub10RadioLocalStatusGrp.setDescription('This group defines objects that are members of the sub10RadioLocalStatusGrp group')
sub10RadioRemoteStatusGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 39003, 20, 2, 44)).setObjects(("SUB10SYSTEMS-MIB", "sub10RadioRmtLinkStatus"), ("SUB10SYSTEMS-MIB", "sub10RadioRmtTxPower"), ("SUB10SYSTEMS-MIB", "sub10RadioRmtRxPower"), ("SUB10SYSTEMS-MIB", "sub10RadioRmtVectErr"), ("SUB10SYSTEMS-MIB", "sub10RadioRmtLnkLoss"), ("SUB10SYSTEMS-MIB", "sub10RadioRmtAlignmentMode"), ("SUB10SYSTEMS-MIB", "sub10RadioRmtAFER"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sub10RadioRemoteStatusGrp = sub10RadioRemoteStatusGrp.setStatus('current')
if mibBuilder.loadTexts: sub10RadioRemoteStatusGrp.setDescription('This group defines objects that are members of the sub10RadioRemoteStatusGrp group')
sub10RadioMgmtGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 39003, 20, 2, 45)).setObjects(("SUB10SYSTEMS-MIB", "sub10RadioMgmtTxPowerLimit"), ("SUB10SYSTEMS-MIB", "sub10RadioMgmtTxRxFreq"), ("SUB10SYSTEMS-MIB", "sub10RadioMgmtAPCMode"), ("SUB10SYSTEMS-MIB", "sub10RadioMgmtModulationMode"), ("SUB10SYSTEMS-MIB", "sub10RadioMgmtAmod"), ("SUB10SYSTEMS-MIB", "sub10RadioMgmtAlignmentMode"), ("SUB10SYSTEMS-MIB", "sub10RadioMgmtMWUChannelWidth"), ("SUB10SYSTEMS-MIB", "sub10RadioMgmtDataRate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sub10RadioMgmtGrp = sub10RadioMgmtGrp.setStatus('current')
if mibBuilder.loadTexts: sub10RadioMgmtGrp.setDescription('This group defines objects that are members of the sub10RadioMgmtGrp group')
sub10RadioMgmtStatsGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 39003, 20, 2, 46)).setObjects(("SUB10SYSTEMS-MIB", "sub10RadioMgmtStats1dPersist"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sub10RadioMgmtStatsGrp = sub10RadioMgmtStatsGrp.setStatus('current')
if mibBuilder.loadTexts: sub10RadioMgmtStatsGrp.setDescription('This group defines objects that are members of the sub10RadioMgmtStatsGrp group')
sub10RadioMgmtStatsActiveEntryGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 39003, 20, 2, 47)).setObjects(("SUB10SYSTEMS-MIB", "sub10RadioMgmtStatsActiveName"), ("SUB10SYSTEMS-MIB", "sub10RadioMgmtStatsActiveState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sub10RadioMgmtStatsActiveEntryGrp = sub10RadioMgmtStatsActiveEntryGrp.setStatus('current')
if mibBuilder.loadTexts: sub10RadioMgmtStatsActiveEntryGrp.setDescription('This group defines objects that are members of the sub10RadioMgmtStatsActiveEntryGrp group')
sub10RadioStatsGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 39003, 20, 2, 48)).setObjects(("SUB10SYSTEMS-MIB", "sub10RadioStatsTimeElapsed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sub10RadioStatsGrp = sub10RadioStatsGrp.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStatsGrp.setDescription('This group defines objects that are members of the sub10RadioStatsGrp group')
sub10RadioStatsCurrentGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 39003, 20, 2, 49)).setObjects(("SUB10SYSTEMS-MIB", "sub10RadioStatsCurrTxPowerMin"), ("SUB10SYSTEMS-MIB", "sub10RadioStatsCurrTxPowerMax"), ("SUB10SYSTEMS-MIB", "sub10RadioStatsCurrTxPowerAvg"), ("SUB10SYSTEMS-MIB", "sub10RadioStatsCurrRxPowerMin"), ("SUB10SYSTEMS-MIB", "sub10RadioStatsCurrRxPowerMax"), ("SUB10SYSTEMS-MIB", "sub10RadioStatsCurrRxPowerAvg"), ("SUB10SYSTEMS-MIB", "sub10RadioStatsCurrVectErrMin"), ("SUB10SYSTEMS-MIB", "sub10RadioStatsCurrVectErrMax"), ("SUB10SYSTEMS-MIB", "sub10RadioStatsCurrVectErrAvg"), ("SUB10SYSTEMS-MIB", "sub10RadioStatsCurrLnkLossMin"), ("SUB10SYSTEMS-MIB", "sub10RadioStatsCurrLnkLossMax"), ("SUB10SYSTEMS-MIB", "sub10RadioStatsCurrLnkLossAvg"), ("SUB10SYSTEMS-MIB", "sub10RadioStatsCurrRxFrms"), ("SUB10SYSTEMS-MIB", "sub10RadioStatsCurrTxFrms"), ("SUB10SYSTEMS-MIB", "sub10RadioStatsCurrRxPkts"), ("SUB10SYSTEMS-MIB", "sub10RadioStatsCurrTxPkts"), ("SUB10SYSTEMS-MIB", "sub10RadioStatsCurrRxMgmtPkts"), ("SUB10SYSTEMS-MIB", "sub10RadioStatsCurrTxMgmtPkts"), ("SUB10SYSTEMS-MIB", "sub10RadioStatsCurrRxBadFrms"), ("SUB10SYSTEMS-MIB", "sub10RadioStatsCurrMWUTempMin"), ("SUB10SYSTEMS-MIB", "sub10RadioStatsCurrMWUTempMax"), ("SUB10SYSTEMS-MIB", "sub10RadioStatsCurrMWUTempAvg"), ("SUB10SYSTEMS-MIB", "sub10RadioStatsCurrQPSKTo8PSK"), ("SUB10SYSTEMS-MIB", "sub10RadioStatsCurr8PSKToQPSK"), ("SUB10SYSTEMS-MIB", "sub10RadioStatsCurrAFERMin"), ("SUB10SYSTEMS-MIB", "sub10RadioStatsCurrAFERMax"), ("SUB10SYSTEMS-MIB", "sub10RadioStatsCurrAFERAvg"), ("SUB10SYSTEMS-MIB", "sub10RadioStatsCurrRmtTxPowerAvg"), ("SUB10SYSTEMS-MIB", "sub10RadioStatsCurrRmtRxPowerAvg"), ("SUB10SYSTEMS-MIB", "sub10RadioStatsCurrRmtVectErrAvg"), ("SUB10SYSTEMS-MIB", "sub10RadioStatsCurrRmtLnkLossAvg"), ("SUB10SYSTEMS-MIB", "sub10RadioStatsCurrRmtMWUTempAvg"), ("SUB10SYSTEMS-MIB", "sub10RadioStatsCurrRmtAFERAvg"), ("SUB10SYSTEMS-MIB", "sub10RadioStatsCurrRxQPSK"), ("SUB10SYSTEMS-MIB", "sub10RadioStatsCurrRx8PSK"), ("SUB10SYSTEMS-MIB", "sub10RadioStatsCurrTxQPSK"), ("SUB10SYSTEMS-MIB", "sub10RadioStatsCurrTx8PSK"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sub10RadioStatsCurrentGrp = sub10RadioStatsCurrentGrp.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStatsCurrentGrp.setDescription('This group defines objects that are members of the sub10RadioStatsCurrentGrp group')
sub10RadioStats1mHistoryGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 39003, 20, 2, 50)).setObjects(("SUB10SYSTEMS-MIB", "sub10RadioStats1mHistIntvls"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sub10RadioStats1mHistoryGrp = sub10RadioStats1mHistoryGrp.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStats1mHistoryGrp.setDescription('This group defines objects that are members of the sub10RadioStats1mHistoryGrp group')
sub10RadioStats1mHistEntryGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 39003, 20, 2, 51)).setObjects(("SUB10SYSTEMS-MIB", "sub10RadioStats1mHistTime"), ("SUB10SYSTEMS-MIB", "sub10RadioStats1mHistTxPowerMin"), ("SUB10SYSTEMS-MIB", "sub10RadioStats1mHistTxPowerMax"), ("SUB10SYSTEMS-MIB", "sub10RadioStats1mHistTxPowerAvg"), ("SUB10SYSTEMS-MIB", "sub10RadioStats1mHistRxPowerMin"), ("SUB10SYSTEMS-MIB", "sub10RadioStats1mHistRxPowerMax"), ("SUB10SYSTEMS-MIB", "sub10RadioStats1mHistRxPowerAvg"), ("SUB10SYSTEMS-MIB", "sub10RadioStats1mHistVectErrMin"), ("SUB10SYSTEMS-MIB", "sub10RadioStats1mHistVectErrMax"), ("SUB10SYSTEMS-MIB", "sub10RadioStats1mHistVectErrAvg"), ("SUB10SYSTEMS-MIB", "sub10RadioStats1mHistLnkLossMin"), ("SUB10SYSTEMS-MIB", "sub10RadioStats1mHistLnkLossMax"), ("SUB10SYSTEMS-MIB", "sub10RadioStats1mHistLnkLossAvg"), ("SUB10SYSTEMS-MIB", "sub10RadioStats1mHistMWUTempMin"), ("SUB10SYSTEMS-MIB", "sub10RadioStats1mHistMWUTempMax"), ("SUB10SYSTEMS-MIB", "sub10RadioStats1mHistMWUTempAvg"), ("SUB10SYSTEMS-MIB", "sub10RadioStats1mHistRxFrms"), ("SUB10SYSTEMS-MIB", "sub10RadioStats1mHistTxFrms"), ("SUB10SYSTEMS-MIB", "sub10RadioStats1mHistRxPkts"), ("SUB10SYSTEMS-MIB", "sub10RadioStats1mHistTxPkts"), ("SUB10SYSTEMS-MIB", "sub10RadioStats1mHistRxMgmtPkts"), ("SUB10SYSTEMS-MIB", "sub10RadioStats1mHistTxMgmtPkts"), ("SUB10SYSTEMS-MIB", "sub10RadioStats1mHistRxBadFrms"), ("SUB10SYSTEMS-MIB", "sub10RadioStats1mHistQPSKTo8PSK"), ("SUB10SYSTEMS-MIB", "sub10RadioStats1mHist8PSKToQPSK"), ("SUB10SYSTEMS-MIB", "sub10RadioStats1mHistAFERMin"), ("SUB10SYSTEMS-MIB", "sub10RadioStats1mHistAFERMax"), ("SUB10SYSTEMS-MIB", "sub10RadioStats1mHistAFERAvg"), ("SUB10SYSTEMS-MIB", "sub10RadioStats1mHistRxQPSK"), ("SUB10SYSTEMS-MIB", "sub10RadioStats1mHistRx8PSK"), ("SUB10SYSTEMS-MIB", "sub10RadioStats1mHistTxQPSK"), ("SUB10SYSTEMS-MIB", "sub10RadioStats1mHistTx8PSK"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sub10RadioStats1mHistEntryGrp = sub10RadioStats1mHistEntryGrp.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStats1mHistEntryGrp.setDescription('This group defines objects that are members of the sub10RadioStats1mHistEntryGrp group')
sub10RadioStats15mHistoryGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 39003, 20, 2, 52)).setObjects(("SUB10SYSTEMS-MIB", "sub10RadioStats15mHistIntvls"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sub10RadioStats15mHistoryGrp = sub10RadioStats15mHistoryGrp.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStats15mHistoryGrp.setDescription('This group defines objects that are members of the sub10RadioStats15mHistoryGrp group')
sub10RadioStats15mHistEntryGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 39003, 20, 2, 53)).setObjects(("SUB10SYSTEMS-MIB", "sub10RadioStats15mHistTime"), ("SUB10SYSTEMS-MIB", "sub10RadioStats15mHistTxPowerMin"), ("SUB10SYSTEMS-MIB", "sub10RadioStats15mHistTxPowerMax"), ("SUB10SYSTEMS-MIB", "sub10RadioStats15mHistTxPowerAvg"), ("SUB10SYSTEMS-MIB", "sub10RadioStats15mHistRxPowerMin"), ("SUB10SYSTEMS-MIB", "sub10RadioStats15mHistRxPowerMax"), ("SUB10SYSTEMS-MIB", "sub10RadioStats15mHistRxPowerAvg"), ("SUB10SYSTEMS-MIB", "sub10RadioStats15mHistVectErrMin"), ("SUB10SYSTEMS-MIB", "sub10RadioStats15mHistVectErrMax"), ("SUB10SYSTEMS-MIB", "sub10RadioStats15mHistVectErrAvg"), ("SUB10SYSTEMS-MIB", "sub10RadioStats15mHistLnkLossMin"), ("SUB10SYSTEMS-MIB", "sub10RadioStats15mHistLnkLossMax"), ("SUB10SYSTEMS-MIB", "sub10RadioStats15mHistLnkLossAvg"), ("SUB10SYSTEMS-MIB", "sub10RadioStats15mHistMWUTempMin"), ("SUB10SYSTEMS-MIB", "sub10RadioStats15mHistMWUTempMax"), ("SUB10SYSTEMS-MIB", "sub10RadioStats15mHistMWUTempAvg"), ("SUB10SYSTEMS-MIB", "sub10RadioStats15mHistRxFrms"), ("SUB10SYSTEMS-MIB", "sub10RadioStats15mHistTxFrms"), ("SUB10SYSTEMS-MIB", "sub10RadioStats15mHistRxPkts"), ("SUB10SYSTEMS-MIB", "sub10RadioStats15mHistTxPkts"), ("SUB10SYSTEMS-MIB", "sub10RadioStats15mHistRxMgmtPkts"), ("SUB10SYSTEMS-MIB", "sub10RadioStats15mHistTxMgmtPkts"), ("SUB10SYSTEMS-MIB", "sub10RadioStats15mHistRxBadFrms"), ("SUB10SYSTEMS-MIB", "sub10RadioStats15mHistQPSKTo8PSK"), ("SUB10SYSTEMS-MIB", "sub10RadioStats15mHist8PSKToQPSK"), ("SUB10SYSTEMS-MIB", "sub10RadioStats15mHistAFERMin"), ("SUB10SYSTEMS-MIB", "sub10RadioStats15mHistAFERMax"), ("SUB10SYSTEMS-MIB", "sub10RadioStats15mHistAFERAvg"), ("SUB10SYSTEMS-MIB", "sub10RadioStats15mHistRxQPSK"), ("SUB10SYSTEMS-MIB", "sub10RadioStats15mHistRx8PSK"), ("SUB10SYSTEMS-MIB", "sub10RadioStats15mHistTxQPSK"), ("SUB10SYSTEMS-MIB", "sub10RadioStats15mHistTx8PSK"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sub10RadioStats15mHistEntryGrp = sub10RadioStats15mHistEntryGrp.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStats15mHistEntryGrp.setDescription('This group defines objects that are members of the sub10RadioStats15mHistEntryGrp group')
sub10RadioStats1dHistoryGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 39003, 20, 2, 54)).setObjects(("SUB10SYSTEMS-MIB", "sub10RadioStats1dHistIntvls"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sub10RadioStats1dHistoryGrp = sub10RadioStats1dHistoryGrp.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStats1dHistoryGrp.setDescription('This group defines objects that are members of the sub10RadioStats1dHistoryGrp group')
sub10RadioStats1dHistEntryGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 39003, 20, 2, 55)).setObjects(("SUB10SYSTEMS-MIB", "sub10RadioStats1dHistTime"), ("SUB10SYSTEMS-MIB", "sub10RadioStats1dHistTxPowerMin"), ("SUB10SYSTEMS-MIB", "sub10RadioStats1dHistTxPowerMax"), ("SUB10SYSTEMS-MIB", "sub10RadioStats1dHistTxPowerAvg"), ("SUB10SYSTEMS-MIB", "sub10RadioStats1dHistRxPowerMin"), ("SUB10SYSTEMS-MIB", "sub10RadioStats1dHistRxPowerMax"), ("SUB10SYSTEMS-MIB", "sub10RadioStats1dHistRxPowerAvg"), ("SUB10SYSTEMS-MIB", "sub10RadioStats1dHistVectErrMin"), ("SUB10SYSTEMS-MIB", "sub10RadioStats1dHistVectErrMax"), ("SUB10SYSTEMS-MIB", "sub10RadioStats1dHistVectErrAvg"), ("SUB10SYSTEMS-MIB", "sub10RadioStats1dHistLnkLossMin"), ("SUB10SYSTEMS-MIB", "sub10RadioStats1dHistLnkLossMax"), ("SUB10SYSTEMS-MIB", "sub10RadioStats1dHistLnkLossAvg"), ("SUB10SYSTEMS-MIB", "sub10RadioStats1dHistMWUTempMin"), ("SUB10SYSTEMS-MIB", "sub10RadioStats1dHistMWUTempMax"), ("SUB10SYSTEMS-MIB", "sub10RadioStats1dHistMWUTempAvg"), ("SUB10SYSTEMS-MIB", "sub10RadioStats1dHistRxFrms"), ("SUB10SYSTEMS-MIB", "sub10RadioStats1dHistTxFrms"), ("SUB10SYSTEMS-MIB", "sub10RadioStats1dHistRxPkts"), ("SUB10SYSTEMS-MIB", "sub10RadioStats1dHistTxPkts"), ("SUB10SYSTEMS-MIB", "sub10RadioStats1dHistRxMgmtPkts"), ("SUB10SYSTEMS-MIB", "sub10RadioStats1dHistTxMgmtPkts"), ("SUB10SYSTEMS-MIB", "sub10RadioStats1dHistRxBadFrms"), ("SUB10SYSTEMS-MIB", "sub10RadioStats1dHistQPSKTo8PSK"), ("SUB10SYSTEMS-MIB", "sub10RadioStats1dHist8PSKToQPSK"), ("SUB10SYSTEMS-MIB", "sub10RadioStats1dHistAFERMin"), ("SUB10SYSTEMS-MIB", "sub10RadioStats1dHistAFERMax"), ("SUB10SYSTEMS-MIB", "sub10RadioStats1dHistAFERAvg"), ("SUB10SYSTEMS-MIB", "sub10RadioStats1dHistRxQPSK"), ("SUB10SYSTEMS-MIB", "sub10RadioStats1dHistRx8PSK"), ("SUB10SYSTEMS-MIB", "sub10RadioStats1dHistTxQPSK"), ("SUB10SYSTEMS-MIB", "sub10RadioStats1dHistTx8PSK"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sub10RadioStats1dHistEntryGrp = sub10RadioStats1dHistEntryGrp.setStatus('current')
if mibBuilder.loadTexts: sub10RadioStats1dHistEntryGrp.setDescription('This group defines objects that are members of the sub10RadioStats1dHistEntryGrp group')
mibBuilder.exportSymbols("SUB10SYSTEMS-MIB", sub10UnitMgmtIpSubnetMask=sub10UnitMgmtIpSubnetMask, Sub10Availability=Sub10Availability, sub10RadioMgmtTxRxFreq=sub10RadioMgmtTxRxFreq, sub10UnitMgmtTimeNTPServer1=sub10UnitMgmtTimeNTPServer1, sub10RadioStatus=sub10RadioStatus, sub10RadioStats1dHistRxFrms=sub10RadioStats1dHistRxFrms, Sub10AlarmState=Sub10AlarmState, sub10RadioLclMWUType=sub10RadioLclMWUType, sub10UnitMgmtVlan=sub10UnitMgmtVlan, sub10RadioStats1dHistRxPowerAvg=sub10RadioStats1dHistRxPowerAvg, sub10RadioMgmtStats1dPersist=sub10RadioMgmtStats1dPersist, sub10RadioStats1mHistIntvls=sub10RadioStats1mHistIntvls, sub10RadioStats1dHistEntry=sub10RadioStats1dHistEntry, sub10EthStats15mHistRxOversized=sub10EthStats15mHistRxOversized, sub10UnitMgmtSnmpUserAuthPwdChk=sub10UnitMgmtSnmpUserAuthPwdChk, sub10NotificationsGrp=sub10NotificationsGrp, sub10RadioStats15mHistMWUTempAvg=sub10RadioStats15mHistMWUTempAvg, sub10RadioStats1dHistLnkLossAvg=sub10RadioStats1dHistLnkLossAvg, sub10RadioStats1dHistRxPkts=sub10RadioStats1dHistRxPkts, sub10UnitMgmtIpGrp=sub10UnitMgmtIpGrp, sub10UnitMgmtAlarmEnabled=sub10UnitMgmtAlarmEnabled, sub10UnitMgmtSnmpUserIndex=sub10UnitMgmtSnmpUserIndex, Sub10UnitType=Sub10UnitType, sub10RadioStats15mHistQPSKTo8PSK=sub10RadioStats15mHistQPSKTo8PSK, Sub10TxPowerLimit=Sub10TxPowerLimit, sub10EthStatsCurrRmtTxMbpsAvg=sub10EthStatsCurrRmtTxMbpsAvg, sub10RadioMgmtStatsGrp=sub10RadioMgmtStatsGrp, sub10EthStatsCurrRxMbps=sub10EthStatsCurrRxMbps, sub10EthStats15mHistTxExsvCollsn=sub10EthStats15mHistTxExsvCollsn, sub10UnitLclTime=sub10UnitLclTime, sub10EthMgmtQoSQTable=sub10EthMgmtQoSQTable, sub10RadioStats1dHistMWUTempAvg=sub10RadioStats1dHistMWUTempAvg, sub10EthStats15mHistPkts64Octets=sub10EthStats15mHistPkts64Octets, sub10UnitMgmtSnmpMaintPrivProto=sub10UnitMgmtSnmpMaintPrivProto, sub10UnitMgmtSnmpAccessEntryGrp=sub10UnitMgmtSnmpAccessEntryGrp, sub10UnitMgmtSnmpUserRowStatus=sub10UnitMgmtSnmpUserRowStatus, sub10EthStatsCurrTxMbpsMax=sub10EthStatsCurrTxMbpsMax, sub10EthStats15mHistRxJabberFrms=sub10EthStats15mHistRxJabberFrms, sub10UnitLclMWUType=sub10UnitLclMWUType, sub10UnitMgmtSnmpTrpDstEntry=sub10UnitMgmtSnmpTrpDstEntry, sub10UnitMgmtSnmpTargetTable=sub10UnitMgmtSnmpTargetTable, sub10EthMgmtQoSPCPEntryGrp=sub10EthMgmtQoSPCPEntryGrp, sub10RadioAlarm=sub10RadioAlarm, sub10UnitLclTerminalType=sub10UnitLclTerminalType, sub10RadioStats15mHistLnkLossMin=sub10RadioStats15mHistLnkLossMin, sub10EthStats1dHistRxMbpsMin=sub10EthStats1dHistRxMbpsMin, sub10EthStatsCurrTxLtCollsn=sub10EthStatsCurrTxLtCollsn, sub10EthStats1dHistTxGoodFrms=sub10EthStats1dHistTxGoodFrms, Sub10AlarmType=Sub10AlarmType, sub10EthStats15mHistIntvls=sub10EthStats15mHistIntvls, sub10UnitMgmtSystemGrp=sub10UnitMgmtSystemGrp, sub10UnitLclAlarmStateEntry=sub10UnitLclAlarmStateEntry, sub10UnitMgmtLicenseAES=sub10UnitMgmtLicenseAES, sub10UnitMgmtSnmpMaintAuthProto=sub10UnitMgmtSnmpMaintAuthProto, sub10EthStatsCurrTxMcastFrms=sub10EthStatsCurrTxMcastFrms, sub10RadioStats1mHistLnkLossMin=sub10RadioStats1mHistLnkLossMin, sub10EthMgmtQoSDSCPTable=sub10EthMgmtQoSDSCPTable, sub10UnitMgmtAlarmClearIntvls=sub10UnitMgmtAlarmClearIntvls, Sub10RadioDataRate=Sub10RadioDataRate, sub10RadioStatsCurrRxMgmtPkts=sub10RadioStatsCurrRxMgmtPkts, sub10RadioMgmtDataRate=sub10RadioMgmtDataRate, sub10Systems=sub10Systems, sub10UnitMgmtResetAction=sub10UnitMgmtResetAction, sub10EthStatsCurrTxMbpsAvg=sub10EthStatsCurrTxMbpsAvg, sub10RadioStatsHistory=sub10RadioStatsHistory, sub10UnitMgmtTime=sub10UnitMgmtTime, sub10UnitMgmtDNSTable=sub10UnitMgmtDNSTable, sub10EthStats1dHistPkts1024TMax=sub10EthStats1dHistPkts1024TMax, sub10EthStats1dHistRxAlignErrs=sub10EthStats1dHistRxAlignErrs, sub10EthRmtStatusEntryGrp=sub10EthRmtStatusEntryGrp, sub10UnitMgmtEncryptMode=sub10UnitMgmtEncryptMode, sub10EthMgmtQoSMPLSTrafficClass=sub10EthMgmtQoSMPLSTrafficClass, sub10EthStats1dHistTxMbpsMin=sub10EthStats1dHistTxMbpsMin, sub10EthStats15mHistTxOctets=sub10EthStats15mHistTxOctets, sub10EthStats1dHistTxMbpsMax=sub10EthStats1dHistTxMbpsMax, Sub10StatsGroup=Sub10StatsGroup, sub10UnitMgmtUserPasswordVerify=sub10UnitMgmtUserPasswordVerify, sub10EthMgmtQoSQEntry=sub10EthMgmtQoSQEntry, sub10RadioMgmtModulationMode=sub10RadioMgmtModulationMode, sub10UnitStatus=sub10UnitStatus, sub10EthStatsCurrRxSOFOvrns=sub10EthStatsCurrRxSOFOvrns, sub10UnitMgmtSnmpAccessTable=sub10UnitMgmtSnmpAccessTable, sub10RadioStatsCurrMWUTempMax=sub10RadioStatsCurrMWUTempMax, sub10RadioStats1dHistTxPowerAvg=sub10RadioStats1dHistTxPowerAvg, sub10EthMgmtQoSVlanId=sub10EthMgmtQoSVlanId, sub10UnitMgmtSnmpOperAuthProto=sub10UnitMgmtSnmpOperAuthProto, sub10UnitMgmtSnmpUserPrivPwdChk=sub10UnitMgmtSnmpUserPrivPwdChk, sub10EthStats15mHistPkts256T511=sub10EthStats15mHistPkts256T511, sub10RadioStatsCurrLnkLossAvg=sub10RadioStatsCurrLnkLossAvg, sub10RadioStatsCurrVectErrMax=sub10RadioStatsCurrVectErrMax, sub10EthMgmtVlanAllowedRowStatus=sub10EthMgmtVlanAllowedRowStatus, sub10EthernetStatsCurrEntry=sub10EthernetStatsCurrEntry, sub10RadioStatsCurrLnkLossMax=sub10RadioStatsCurrLnkLossMax, sub10EthStats1dHistoryGrp=sub10EthStats1dHistoryGrp, sub10EthStats1dHistRxBcastFrms=sub10EthStats1dHistRxBcastFrms, sub10UnitMgmtAlarmName=sub10UnitMgmtAlarmName, sub10EthMgmtQoSDSCPIndex=sub10EthMgmtQoSDSCPIndex, sub10RadioStatsCurrTxQPSK=sub10RadioStatsCurrTxQPSK, sub10RadioStats1dHistTime=sub10RadioStats1dHistTime, sub10UnitMgmtFirmwareLoadedBank=sub10UnitMgmtFirmwareLoadedBank, sub10RadioStats15mHistTx8PSK=sub10RadioStats15mHistTx8PSK, sub10EthStats1dHistTxMlplCollsn=sub10EthStats1dHistTxMlplCollsn, sub10UnitMgmtSnmpEngineId=sub10UnitMgmtSnmpEngineId, sub10RadioStats1mHistTxPowerMin=sub10RadioStats1mHistTxPowerMin, sub10RadioStats1dHistRx8PSK=sub10RadioStats1dHistRx8PSK, sub10UnitLclAlarmStateIndex=sub10UnitLclAlarmStateIndex, sub10RadioLclAFER=sub10RadioLclAFER, sub10EthMgmtStats=sub10EthMgmtStats, sub10EthStats1dHistIntvls=sub10EthStats1dHistIntvls, sub10EthStats1dHistRxPauseFrms=sub10EthStats1dHistRxPauseFrms, sub10UnitMgmtAlarmSmtpAddress=sub10UnitMgmtAlarmSmtpAddress, sub10RadioStats1dHistIntvl=sub10RadioStats1dHistIntvl, sub10RadioStats1dHistRxPowerMin=sub10RadioStats1dHistRxPowerMin, sub10EthernetStatsCurrent=sub10EthernetStatsCurrent, sub10UnitMgmtAlarmEntry=sub10UnitMgmtAlarmEntry, sub10RadioStatsGrp=sub10RadioStatsGrp, sub10EthStats1dHistRxJabberFrms=sub10EthStats1dHistRxJabberFrms, sub10EthStats1dHistEntry=sub10EthStats1dHistEntry, sub10EthernetStatsCurrEntryGrp=sub10EthernetStatsCurrEntryGrp, sub10UnitMgmtTimeNTPSyncStatus=sub10UnitMgmtTimeNTPSyncStatus, sub10EthStats15mHistRxPauseFrms=sub10EthStats15mHistRxPauseFrms, sub10UnitLclIpAddress=sub10UnitLclIpAddress, sub10RadioMgmtAmod=sub10RadioMgmtAmod, sub10RadioStats1mHistTxPkts=sub10RadioStats1mHistTxPkts, sub10EthStats1dHistRxOctets=sub10EthStats1dHistRxOctets, sub10EthLclDuplex=sub10EthLclDuplex, sub10EthStats15mHistRxMbpsAvg=sub10EthStats15mHistRxMbpsAvg, sub10RadioLclLinkStatus=sub10RadioLclLinkStatus, sub10UnitMgmtSnmpEngineIdText=sub10UnitMgmtSnmpEngineIdText, sub10EthMgmtQoSActiveState=sub10EthMgmtQoSActiveState, sub10RadioStats15mHistVectErrAvg=sub10RadioStats15mHistVectErrAvg, sub10EthStatsCurrPkts65T127=sub10EthStatsCurrPkts65T127, Sub10QoSQueue=Sub10QoSQueue, Sub10EntryStatus=Sub10EntryStatus, sub10EthStatsCurrTxDeferred=sub10EthStatsCurrTxDeferred, sub10UnitMgmtUserEntryGrp=sub10UnitMgmtUserEntryGrp, sub10RadioRmtTxPower=sub10RadioRmtTxPower, sub10UnitMgmtSnmpOperPrivProto=sub10UnitMgmtSnmpOperPrivProto, sub10EthMgmtQoSDSCPQueue=sub10EthMgmtQoSDSCPQueue, sub10UnitMgmtDNSEntryGrp=sub10UnitMgmtDNSEntryGrp, sub10EthMgmtVlanDefaultId=sub10EthMgmtVlanDefaultId, sub10UnitLclMWUTemperature=sub10UnitLclMWUTemperature, sub10EthStats15mHistTxCollsn=sub10EthStats15mHistTxCollsn, sub10UnitRmtTerminalName=sub10UnitRmtTerminalName, sub10RadioStats15mHistLnkLossMax=sub10RadioStats15mHistLnkLossMax, sub10RadioStats1mHistLnkLossAvg=sub10RadioStats1mHistLnkLossAvg, sub10RadioStats1mHistMWUTempMax=sub10RadioStats1mHistMWUTempMax, sub10EthMgmtQoSQSchedulingType=sub10EthMgmtQoSQSchedulingType, sub10UnitMgmtAlarms=sub10UnitMgmtAlarms, sub10EthMgmtVlanDefaultEnabled=sub10EthMgmtVlanDefaultEnabled, sub10RadioStatsCurrTx8PSK=sub10RadioStatsCurrTx8PSK, sub10EthMgmtPhyDuplex=sub10EthMgmtPhyDuplex, sub10UnitMgmtFirmwareActStatus=sub10UnitMgmtFirmwareActStatus, sub10RadioStats1mHistMWUTempAvg=sub10RadioStats1mHistMWUTempAvg, sub10RadioStats15mHistTxFrms=sub10RadioStats15mHistTxFrms, sub10UnitRmtUnitType=sub10UnitRmtUnitType, sub10UnitMgmtAlarmToSyslog=sub10UnitMgmtAlarmToSyslog, sub10EthRmtLinkStatus=sub10EthRmtLinkStatus, Sub10VlanPriority=Sub10VlanPriority, sub10EthStatsCurrRxOctets=sub10EthStatsCurrRxOctets, Sub10OperStatus=Sub10OperStatus, sub10UnitRmtTerminalType=sub10UnitRmtTerminalType, sub10RadioStats15mHistTxPowerMax=sub10RadioStats15mHistTxPowerMax, sub10EthMgmtQoSQLen=sub10EthMgmtQoSQLen, sub10RadioStats15mHistTable=sub10RadioStats15mHistTable, sub10EthStatsCurrPkts256T511=sub10EthStatsCurrPkts256T511, sub10UnitMgmtSnmpTrpDstCommunity=sub10UnitMgmtSnmpTrpDstCommunity, sub10UnitMgmtFirmwareBankEntry=sub10UnitMgmtFirmwareBankEntry, sub10UnitMgmtUserGroup=sub10UnitMgmtUserGroup, sub10EthStats15mHistRxMbpsMin=sub10EthStats15mHistRxMbpsMin, sub10EthMgmtStatsActiveName=sub10EthMgmtStatsActiveName, sub10UnitMgmtTransactionMode=sub10UnitMgmtTransactionMode, sub10RadioStats1dHistTxPowerMax=sub10RadioStats1dHistTxPowerMax, sub10EthMgmtStatsActiveTable=sub10EthMgmtStatsActiveTable, sub10EthStatsCurrRmtRxMbpsAvg=sub10EthStatsCurrRmtRxMbpsAvg, sub10UnitMgmtEncryption=sub10UnitMgmtEncryption, sub10EthStats1dHistEntryGrp=sub10EthStats1dHistEntryGrp, sub10UnitRmtLinkName=sub10UnitRmtLinkName, sub10EthernetRemoteStatus=sub10EthernetRemoteStatus, sub10RadioStats15mHistTime=sub10RadioStats15mHistTime, sub10RadioStats1dHistRxMgmtPkts=sub10RadioStats1dHistRxMgmtPkts, sub10EthStatsCurrRxPauseFrms=sub10EthStatsCurrRxPauseFrms, sub10EthStats1dHistRxMcastFrms=sub10EthStats1dHistRxMcastFrms, sub10RadioStatsCurrTxMgmtPkts=sub10RadioStatsCurrTxMgmtPkts, sub10RadioMgmt=sub10RadioMgmt, sub10UnitMgmtFirmwareBankIndex=sub10UnitMgmtFirmwareBankIndex, sub10EthStats1dHistRxFragments=sub10EthStats1dHistRxFragments, sub10EthStats1dHistTxOctets=sub10EthStats1dHistTxOctets, sub10RadioStats1mHistTxMgmtPkts=sub10RadioStats1mHistTxMgmtPkts, sub10EthStats15mHistRxAlignErrs=sub10EthStats15mHistRxAlignErrs, sub10RadioStatsCurrMWUTempAvg=sub10RadioStatsCurrMWUTempAvg, sub10UnitMgmtContactName=sub10UnitMgmtContactName, sub10RadioStats1dHistTx8PSK=sub10RadioStats1dHistTx8PSK, sub10UnitMgmtLicense=sub10UnitMgmtLicense, Sub10Duplex=Sub10Duplex, sub10EthStats1dHistTime=sub10EthStats1dHistTime, sub10RadioStats15mHistRxQPSK=sub10RadioStats15mHistRxQPSK, sub10EthStatsCurrTxGoodFrms=sub10EthStatsCurrTxGoodFrms, sub10EthStatsCurrTxCSenseErrs=sub10EthStatsCurrTxCSenseErrs, sub10UnitMgmtTimeNTPPort=sub10UnitMgmtTimeNTPPort, sub10EthStats15mHistEntry=sub10EthStats15mHistEntry, sub10EthStats1dHistTxDeferred=sub10EthStats1dHistTxDeferred, sub10EthRmtSpeed=sub10EthRmtSpeed, sub10RadioStats15mHistTxPowerAvg=sub10RadioStats15mHistTxPowerAvg, sub10UnitMgmtAlarmToSNMP=sub10UnitMgmtAlarmToSNMP, sub10EthStats1dHistTxMbpsAvg=sub10EthStats1dHistTxMbpsAvg, sub10EthStats15mHistIntvl=sub10EthStats15mHistIntvl, sub10RadioStatsCurrRmtAFERAvg=sub10RadioStatsCurrRmtAFERAvg, sub10EthMgmtVlanAllowedTable=sub10EthMgmtVlanAllowedTable, Sub10Snmpv3SecurityLevel=Sub10Snmpv3SecurityLevel, sub10UnitMgmtAlarmClearOper=sub10UnitMgmtAlarmClearOper, sub10EthStatsCurrRxMbpsMin=sub10EthStatsCurrRxMbpsMin, sub10EthStatsCurrPkts512T1023=sub10EthStatsCurrPkts512T1023, sub10UnitMgmtSnmpTraps=sub10UnitMgmtSnmpTraps, sub10EthStats15mHistEntryGrp=sub10EthStats15mHistEntryGrp, sub10EthStats1dHistTxSnglCollsn=sub10EthStats1dHistTxSnglCollsn, sub10UnitMgmtFirmwareGrp=sub10UnitMgmtFirmwareGrp, sub10RadioStatsTimeElapsed=sub10RadioStatsTimeElapsed, sub10RadioStats1dHistTxFrms=sub10RadioStats1dHistTxFrms, sub10Notifications=sub10Notifications, PYSNMP_MODULE_ID=sub10Systems, sub10EthStats15mHistTime=sub10EthStats15mHistTime, sub10EthStats15mHistTxSnglCollsn=sub10EthStats15mHistTxSnglCollsn, sub10EthLclSpeed=sub10EthLclSpeed, sub10RadioStats1mHistAFERMax=sub10RadioStats1mHistAFERMax, sub10EthStatsCurrRxAlignErrs=sub10EthStatsCurrRxAlignErrs, sub10UnitMgmtSnmpUserPrivPwd=sub10UnitMgmtSnmpUserPrivPwd, sub10EthStats1dHistRxUndersized=sub10EthStats1dHistRxUndersized, sub10EthMgmtPhyAutoNeg=sub10EthMgmtPhyAutoNeg, sub10EthStats1dHistRxSOFOvrns=sub10EthStats1dHistRxSOFOvrns, sub10RadioStats1mHistRxPowerMax=sub10RadioStats1mHistRxPowerMax, sub10EthMgmtVlanAllowedEntry=sub10EthMgmtVlanAllowedEntry, sub10UnitMgmtAlarmMeasObject=sub10UnitMgmtAlarmMeasObject, sub10UnitLocalStatus=sub10UnitLocalStatus, sub10RadioStats15mHistTxPkts=sub10RadioStats15mHistTxPkts, sub10RadioMgmtStatsActiveState=sub10RadioMgmtStatsActiveState, sub10UnitMgmtSyncE=sub10UnitMgmtSyncE, sub10EthMgmtStatsActiveIndex=sub10EthMgmtStatsActiveIndex, sub10EthLclStatusEntryGrp=sub10EthLclStatusEntryGrp, sub10EthStatsCurrRxJabberFrms=sub10EthStatsCurrRxJabberFrms, sub10EthStats15mHistTxMbpsMax=sub10EthStats15mHistTxMbpsMax, sub10UnitLclFirmwareLoadedBank=sub10UnitLclFirmwareLoadedBank, sub10EthStatsCurrRxGoodFrms=sub10EthStatsCurrRxGoodFrms, sub10RadioStats15mHistIntvl=sub10RadioStats15mHistIntvl, sub10RadioStats1dHistRxQPSK=sub10RadioStats1dHistRxQPSK, sub10UnitMgmtLicenseGrp=sub10UnitMgmtLicenseGrp, sub10EthStats15mHistTxLtCollsn=sub10EthStats15mHistTxLtCollsn, sub10RadioStatsCurrTxFrms=sub10RadioStatsCurrTxFrms, sub10RadioMgmtTxPowerLimit=sub10RadioMgmtTxPowerLimit, sub10RadioStats1mHistRxPowerMin=sub10RadioStats1mHistRxPowerMin, sub10UnitMgmtAlarmsGrp=sub10UnitMgmtAlarmsGrp, sub10UnitMgmtVlanDEI=sub10UnitMgmtVlanDEI, sub10RadioStats15mHistMWUTempMax=sub10RadioStats15mHistMWUTempMax, sub10EthMgmtPhySpeed=sub10EthMgmtPhySpeed)
mibBuilder.exportSymbols("SUB10SYSTEMS-MIB", sub10RadioStats1mHistRxPowerAvg=sub10RadioStats1mHistRxPowerAvg, sub10RadioLclDataRate=sub10RadioLclDataRate, sub10EthMgmtQoSQIndex=sub10EthMgmtQoSQIndex, sub10EthMgmtQoSVlanEntry=sub10EthMgmtQoSVlanEntry, sub10UnitMgmtVlanPriority=sub10UnitMgmtVlanPriority, sub10EthMgmtQoSDSCPMarking=sub10EthMgmtQoSDSCPMarking, sub10EthStats1dHistTable=sub10EthStats1dHistTable, sub10EthMgmtStatsActiveState=sub10EthMgmtStatsActiveState, sub10EthernetStatus=sub10EthernetStatus, Sub10EthInterfaceIndex=Sub10EthInterfaceIndex, sub10RadioLclRxModulationMode=sub10RadioLclRxModulationMode, Sub10ThroughputMbps=Sub10ThroughputMbps, sub10UnitMgmtFirmwareActProgress=sub10UnitMgmtFirmwareActProgress, sub10EthernetAlarm=sub10EthernetAlarm, sub10RadioStats15mHistIntvls=sub10RadioStats15mHistIntvls, sub10EthMgmtPhyEntryGrp=sub10EthMgmtPhyEntryGrp, sub10EthMgmtQoSPCPEntry=sub10EthMgmtQoSPCPEntry, sub10RadioRmtLnkLoss=sub10RadioRmtLnkLoss, sub10RadioStats15mHistVectErrMin=sub10RadioStats15mHistVectErrMin, sub10EthMgmtQoSVlanTable=sub10EthMgmtQoSVlanTable, Sub10MWUType=Sub10MWUType, sub10RadioMgmtStatsActiveEntry=sub10RadioMgmtStatsActiveEntry, sub10UnitMgmtIp=sub10UnitMgmtIp, sub10RadioStatsCurrRmtMWUTempAvg=sub10RadioStatsCurrRmtMWUTempAvg, sub10EthMgmtQoSPCPTable=sub10EthMgmtQoSPCPTable, sub10EthMgmtQoSGrp=sub10EthMgmtQoSGrp, sub10RadioStats1mHistAFERAvg=sub10RadioStats1mHistAFERAvg, Sub10ModulationMode=Sub10ModulationMode, sub10RadioStatsCurrRmtVectErrAvg=sub10RadioStatsCurrRmtVectErrAvg, sub10RadioStats15mHistEntry=sub10RadioStats15mHistEntry, sub10RadioStatsCurrLnkLossMin=sub10RadioStatsCurrLnkLossMin, sub10RadioStats1dHistTxMgmtPkts=sub10RadioStats1dHistTxMgmtPkts, sub10EthLclStatusEntry=sub10EthLclStatusEntry, sub10EthStats15mHistTxMbpsMin=sub10EthStats15mHistTxMbpsMin, sub10UnitMgmtTransactionStatus=sub10UnitMgmtTransactionStatus, sub10RadioLclVectErr=sub10RadioLclVectErr, sub10Compliance=sub10Compliance, sub10UnitMgmtTimeNTPServer2=sub10UnitMgmtTimeNTPServer2, sub10RadioStatsCurrRxPkts=sub10RadioStatsCurrRxPkts, sub10EthStats15mHistTxPauseFrms=sub10EthStats15mHistTxPauseFrms, sub10RadioStats15mHistLnkLossAvg=sub10RadioStats15mHistLnkLossAvg, sub10EthStats15mHistTxMlplCollsn=sub10EthStats15mHistTxMlplCollsn, sub10RadioStatsCurr8PSKToQPSK=sub10RadioStatsCurr8PSKToQPSK, sub10EthStats1dHistTxPauseFrms=sub10EthStats1dHistTxPauseFrms, sub10EthStatsCurrTxCollsn=sub10EthStatsCurrTxCollsn, sub10UnitMgmtFirmwareBankEntryGrp=sub10UnitMgmtFirmwareBankEntryGrp, sub10EthMgmtQoSMPLSIndex=sub10EthMgmtQoSMPLSIndex, sub10UnitMgmtSnmpTrpDstRowStatus=sub10UnitMgmtSnmpTrpDstRowStatus, sub10RadioStats1mHistoryGrp=sub10RadioStats1mHistoryGrp, sub10UnitLclFirmwareVersion=sub10UnitLclFirmwareVersion, sub10RadioStats1dHistLnkLossMax=sub10RadioStats1dHistLnkLossMax, sub10RadioStats1dHistory=sub10RadioStats1dHistory, sub10UnitMgmtUserTable=sub10UnitMgmtUserTable, sub10UnitMgmtAlarmClearThresh=sub10UnitMgmtAlarmClearThresh, sub10UnitMgmtAlarmMeasObjectVal=sub10UnitMgmtAlarmMeasObjectVal, sub10RadioLocalStatus=sub10RadioLocalStatus, sub10RadioStats1dHistTxPkts=sub10RadioStats1dHistTxPkts, sub10EthStatsCurrRxOversized=sub10EthStatsCurrRxOversized, sub10EthernetStats15mHistoryGrp=sub10EthernetStats15mHistoryGrp, sub10UnitMgmtSnmpTargetEntry=sub10UnitMgmtSnmpTargetEntry, sub10EthMgmtQoSVlanIndex=sub10EthMgmtQoSVlanIndex, sub10EthMgmtQoSPCPQueue=sub10EthMgmtQoSPCPQueue, sub10EthStats1dHistTxBcastFrms=sub10EthStats1dHistTxBcastFrms, sub10EthStats1dHistRxMbpsMax=sub10EthStats1dHistRxMbpsMax, sub10RadioStats1mHistIntvl=sub10RadioStats1mHistIntvl, sub10RadioStats15mHistAFERAvg=sub10RadioStats15mHistAFERAvg, sub10EthStats15mHistRxMcastFrms=sub10EthStats15mHistRxMcastFrms, sub10RadioMgmtStats=sub10RadioMgmtStats, sub10RadioStats1mHistTxQPSK=sub10RadioStats1mHistTxQPSK, sub10EthMgmtVlanGrp=sub10EthMgmtVlanGrp, sub10EthMgmtQoS=sub10EthMgmtQoS, sub10UnitMgmtUsersGrp=sub10UnitMgmtUsersGrp, sub10EthStatsCurrRxUndersized=sub10EthStatsCurrRxUndersized, sub10EthStats15mHistTxMbpsAvg=sub10EthStats15mHistTxMbpsAvg, sub10RadioStats1mHistLnkLossMax=sub10RadioStats1mHistLnkLossMax, sub10RadioStatsCurrTxPkts=sub10RadioStatsCurrTxPkts, sub10UnitLclAlarmStateTime=sub10UnitLclAlarmStateTime, sub10RadioStatsCurrAFERMax=sub10RadioStatsCurrAFERMax, sub10UnitMgmtAlarmType=sub10UnitMgmtAlarmType, sub10UnitMgmtFirmwareUplSvrIp=sub10UnitMgmtFirmwareUplSvrIp, sub10UnitMgmtSnmpUserEntryGrp=sub10UnitMgmtSnmpUserEntryGrp, sub10EthMgmtVlanFiltering=sub10EthMgmtVlanFiltering, sub10EthMgmtPhyTable=sub10EthMgmtPhyTable, sub10RadioStatsCurrVectErrAvg=sub10RadioStatsCurrVectErrAvg, sub10UnitLclRadioDataRate=sub10UnitLclRadioDataRate, sub10UnitLclDescription=sub10UnitLclDescription, sub10EthStatsTimeElapsed=sub10EthStatsTimeElapsed, sub10EthMgmtPhy=sub10EthMgmtPhy, Sub10VlanTagAction=Sub10VlanTagAction, sub10RadioLclRxPower=sub10RadioLclRxPower, sub10UnitMgmtSnmpTargetName=sub10UnitMgmtSnmpTargetName, sub10EthStats1dHistTxMcastFrms=sub10EthStats1dHistTxMcastFrms, sub10RadioMgmtStatsActiveEntryGrp=sub10RadioMgmtStatsActiveEntryGrp, sub10EthMgmtQoSDSCPEntry=sub10EthMgmtQoSDSCPEntry, sub10UnitMgmtSnmpAccessIpAddr=sub10UnitMgmtSnmpAccessIpAddr, sub10EthStatsCurrTxBcastFrms=sub10EthStatsCurrTxBcastFrms, sub10UnitLclFPGAVersion=sub10UnitLclFPGAVersion, sub10EthStats15mHistPkts512T1023=sub10EthStats15mHistPkts512T1023, sub10EthMgmtVlanAllowedId=sub10EthMgmtVlanAllowedId, sub10UnitLclLinkId=sub10UnitLclLinkId, sub10EthMgmtQoSDSCPMappingNumber=sub10EthMgmtQoSDSCPMappingNumber, sub10EthernetLocalStatus=sub10EthernetLocalStatus, sub10UnitMgmtUserEntry=sub10UnitMgmtUserEntry, sub10EthStats1dHistRxMbpsAvg=sub10EthStats1dHistRxMbpsAvg, sub10UnitMgmtFirmwareSelectBank=sub10UnitMgmtFirmwareSelectBank, sub10EthMgmtQoSMode=sub10EthMgmtQoSMode, Sub10MacAddress=Sub10MacAddress, sub10UnitMgmtResetStatsGroup=sub10UnitMgmtResetStatsGroup, sub10UnitLclSiteName=sub10UnitLclSiteName, sub10EthRmtStatusEntry=sub10EthRmtStatusEntry, sub10EthMgmtVlanDefaultPriority=sub10EthMgmtVlanDefaultPriority, sub10EthMgmtPhyMDI=sub10EthMgmtPhyMDI, sub10EthIfIndex=sub10EthIfIndex, sub10UnitMgmtAlarmRaiseThresh=sub10UnitMgmtAlarmRaiseThresh, sub10UnitMgmtRollbackTimeout=sub10UnitMgmtRollbackTimeout, sub10UnitLclTerminalName=sub10UnitLclTerminalName, sub10RadioStatsCurrent=sub10RadioStatsCurrent, sub10UnitMgmtSnmpv320Mib=sub10UnitMgmtSnmpv320Mib, sub10UnitMgmtSnmpTargetIpAddr=sub10UnitMgmtSnmpTargetIpAddr, sub10RadioLclAlignmentMode=sub10RadioLclAlignmentMode, sub10EthMgmtQoSMPLSMappingNumber=sub10EthMgmtQoSMPLSMappingNumber, sub10EthStatsCurrTxPauseFrms=sub10EthStatsCurrTxPauseFrms, sub10EthStats1dHistPkts256T511=sub10EthStats1dHistPkts256T511, sub10UnitMgmtTimeLocal=sub10UnitMgmtTimeLocal, sub10UnitMgmtSnmpAccessName=sub10UnitMgmtSnmpAccessName, sub10EthStatsCurrRxMcastFrms=sub10EthStatsCurrRxMcastFrms, sub10UnitLclAlarmStateEntryGrp=sub10UnitLclAlarmStateEntryGrp, sub10MIBGroups=sub10MIBGroups, sub10UnitMgmtSnmpTargetUserName=sub10UnitMgmtSnmpTargetUserName, sub10RadioStats1dHistVectErrAvg=sub10RadioStats1dHistVectErrAvg, sub10RadioMgmtStatsActiveTable=sub10RadioMgmtStatsActiveTable, sub10EthRmtDuplex=sub10EthRmtDuplex, sub10RadioStats15mHistAFERMax=sub10RadioStats15mHistAFERMax, sub10UnitLocalStatusGrp=sub10UnitLocalStatusGrp, sub10EthernetStatsHistory=sub10EthernetStatsHistory, sub10UnitMgmtSyncEMode=sub10UnitMgmtSyncEMode, sub10UnitMgmtSnmpTrpDstTable=sub10UnitMgmtSnmpTrpDstTable, sub10EthStats15mHistRxCRCErrs=sub10EthStats15mHistRxCRCErrs, sub10UnitMgmtUsers=sub10UnitMgmtUsers, sub10UnitMgmtIpDefGateway=sub10UnitMgmtIpDefGateway, sub10UnitMgmtFirmwareFromBank=sub10UnitMgmtFirmwareFromBank, sub10EthStatsCurrTxMbps=sub10EthStatsCurrTxMbps, sub10RadioStats15mHistRxPkts=sub10RadioStats15mHistRxPkts, sub10RadioStats1dHistRxPowerMax=sub10RadioStats1dHistRxPowerMax, sub10EthLclLinkStatus=sub10EthLclLinkStatus, sub10UnitMgmtAlarmIndex=sub10UnitMgmtAlarmIndex, sub10RadioStatsCurrMWUTempMin=sub10RadioStatsCurrMWUTempMin, Sub10AlarmOperation=Sub10AlarmOperation, sub10EthStatsCurrRxMbpsAvg=sub10EthStatsCurrRxMbpsAvg, sub10UnitMgmtLicenseKey=sub10UnitMgmtLicenseKey, sub10UnitMgmtTransaction=sub10UnitMgmtTransaction, sub10UnitMgmtUserName=sub10UnitMgmtUserName, sub10RadioStats1dHistVectErrMin=sub10RadioStats1dHistVectErrMin, sub10UnitLclAlarmStateTable=sub10UnitLclAlarmStateTable, sub10RadioStats1mHistTxPowerMax=sub10RadioStats1mHistTxPowerMax, sub10RadioStats15mHistRxPowerAvg=sub10RadioStats15mHistRxPowerAvg, sub10EthernetMgmt=sub10EthernetMgmt, sub10UnitMgmtDNSIndex=sub10UnitMgmtDNSIndex, sub10UnitMgmtFirmwareBankVersion=sub10UnitMgmtFirmwareBankVersion, sub10UnitLclUnitType=sub10UnitLclUnitType, sub10RadioStats15mHistory=sub10RadioStats15mHistory, sub10EthernetStats=sub10EthernetStats, sub10RadioStats1dHistAFERAvg=sub10RadioStats1dHistAFERAvg, sub10UnitMgmtAlarmEntryGrp=sub10UnitMgmtAlarmEntryGrp, Sub10MeasuredObject=Sub10MeasuredObject, sub10UnitMgmtActionsGrp=sub10UnitMgmtActionsGrp, sub10EthMgmtQoSDSCPEntryGrp=sub10EthMgmtQoSDSCPEntryGrp, Sub10State=Sub10State, sub10UnitRmtIpAddress=sub10UnitRmtIpAddress, sub10EthStats1dHistTxLtCollsn=sub10EthStats1dHistTxLtCollsn, sub10UnitLclNTPSyncStatus=sub10UnitLclNTPSyncStatus, sub10UnitMgmtVlanDSCP=sub10UnitMgmtVlanDSCP, sub10EthStats15mHistTxBcastFrms=sub10EthStats15mHistTxBcastFrms, sub10UnitMgmtSnmp=sub10UnitMgmtSnmp, sub10EthStats1dHistory=sub10EthStats1dHistory, Sub10UserGroup=Sub10UserGroup, sub10EthStats15mHistRxFragments=sub10EthStats15mHistRxFragments, sub10RadioStats1dHistMWUTempMin=sub10RadioStats1dHistMWUTempMin, sub10UnitRemoteStatus=sub10UnitRemoteStatus, sub10UnitMgmt=sub10UnitMgmt, sub10UnitMgmtSnmpUserAuthPwd=sub10UnitMgmtSnmpUserAuthPwd, sub10UnitMgmtTerminalName=sub10UnitMgmtTerminalName, sub10RadioStats15mHistRx8PSK=sub10RadioStats15mHistRx8PSK, sub10RadioMgmtAlignmentMode=sub10RadioMgmtAlignmentMode, sub10EthMgmtVlanAllowedEntryGrp=sub10EthMgmtVlanAllowedEntryGrp, sub10UnitMgmtAlarmsUserDefStart=sub10UnitMgmtAlarmsUserDefStart, sub10EthMgmtQoSQDWRRWeight=sub10EthMgmtQoSQDWRRWeight, sub10RadioStats1mHistVectErrAvg=sub10RadioStats1mHistVectErrAvg, sub10EthMgmtQoSQCongestionPolicy=sub10EthMgmtQoSQCongestionPolicy, sub10UnitMgmtLinkId=sub10UnitMgmtLinkId, sub10RadioStats15mHistEntryGrp=sub10RadioStats15mHistEntryGrp, sub10UnitMgmtVlanGrp=sub10UnitMgmtVlanGrp, sub10UnitMgmtActions=sub10UnitMgmtActions, sub10EthStats1dHistPkts65T127=sub10EthStats1dHistPkts65T127, Sub10AlarmIndex=Sub10AlarmIndex, sub10UnitRmtMWUTemperature=sub10UnitRmtMWUTemperature, sub10UnitMgmtAlarmMonitorIntvl=sub10UnitMgmtAlarmMonitorIntvl, sub10RadioStats1dHistTable=sub10RadioStats1dHistTable, sub10Ethernet=sub10Ethernet, sub10EthStats1dHistRxGoodFrms=sub10EthStats1dHistRxGoodFrms, sub10UnitMgmtUserIndex=sub10UnitMgmtUserIndex, sub10UnitMgmtAlarmSeverity=sub10UnitMgmtAlarmSeverity, sub10EthMgmtQoSUntaggedQueue=sub10EthMgmtQoSUntaggedQueue, sub10RadioStats=sub10RadioStats, Sub10TerminalType=Sub10TerminalType, sub10UnitRmtFirmwareVersion=sub10UnitRmtFirmwareVersion, sub10UnitMgmtUserRowStatus=sub10UnitMgmtUserRowStatus, sub10UnitMgmtSiteName=sub10UnitMgmtSiteName, sub10RadioStats15mHist8PSKToQPSK=sub10RadioStats15mHist8PSKToQPSK, sub10UnitMgmtSnmpTargetRowStatus=sub10UnitMgmtSnmpTargetRowStatus, sub10UnitMgmtFirmwareAction=sub10UnitMgmtFirmwareAction, sub10RadioStats15mHistRxBadFrms=sub10RadioStats15mHistRxBadFrms, Sub10AlarmName=Sub10AlarmName, sub10MIBConformance=sub10MIBConformance, sub10RadioStats1mHist8PSKToQPSK=sub10RadioStats1mHist8PSKToQPSK, sub10UnitRmtLinkId=sub10UnitRmtLinkId, sub10EthRmtStatusTable=sub10EthRmtStatusTable, sub10EthMgmtQoSMPLSQueue=sub10EthMgmtQoSMPLSQueue, sub10EthLclStatusTable=sub10EthLclStatusTable, sub10RadioStats1mHistTx8PSK=sub10RadioStats1mHistTx8PSK, sub10UnitMgmtSnmpAdminPrivProto=sub10UnitMgmtSnmpAdminPrivProto, sub10EthernetStatsCurrTable=sub10EthernetStatsCurrTable, sub10EthStats15mHistPkts128T255=sub10EthStats15mHistPkts128T255, sub10EthStatsCurrPkts128T255=sub10EthStatsCurrPkts128T255, sub10EthMgmtVlanDefaultDEI=sub10EthMgmtVlanDefaultDEI, sub10RadioStatsCurrRx8PSK=sub10RadioStatsCurrRx8PSK, sub10RadioStats15mHistRxMgmtPkts=sub10RadioStats15mHistRxMgmtPkts, sub10RadioMgmtStatsActiveName=sub10RadioMgmtStatsActiveName, sub10UnitMgmtSnmpUserTable=sub10UnitMgmtSnmpUserTable, sub10EthStatsCurrPkts1024TMax=sub10EthStatsCurrPkts1024TMax, sub10UnitMgmtFirmwareToBank=sub10UnitMgmtFirmwareToBank, sub10UnitMgmtIpMode=sub10UnitMgmtIpMode, sub10MIBCompliances=sub10MIBCompliances, sub10RadioStats1mHistVectErrMax=sub10RadioStats1mHistVectErrMax, sub10EthStats1dHistTxExsvCollsn=sub10EthStats1dHistTxExsvCollsn, sub10UnitMgmtFirmwareBootVersion=sub10UnitMgmtFirmwareBootVersion, sub10EthMgmtQoSMPLSEntryGrp=sub10EthMgmtQoSMPLSEntryGrp, sub10UnitLclLinkName=sub10UnitLclLinkName, sub10EthStatsCurrRxCRCErrs=sub10EthStatsCurrRxCRCErrs, sub10RadioStats15mHistAFERMin=sub10RadioStats15mHistAFERMin, sub10EthStats15mHistPkts65T127=sub10EthStats15mHistPkts65T127, sub10EthStatsCurrRxBcastFrms=sub10EthStatsCurrRxBcastFrms, sub10UnitMgmtSnmpAdminAuthProto=sub10UnitMgmtSnmpAdminAuthProto, sub10UnitMgmtDNSEntry=sub10UnitMgmtDNSEntry, sub10EthStatsCurrTxOctets=sub10EthStatsCurrTxOctets, sub10RadioStats1mHistRxBadFrms=sub10RadioStats1mHistRxBadFrms, sub10RadioStats1dHistTxPowerMin=sub10RadioStats1dHistTxPowerMin, sub10RadioStats1dHistVectErrMax=sub10RadioStats1dHistVectErrMax, sub10EthernetStats15mHistory=sub10EthernetStats15mHistory, sub10UnitMgmtDateTime=sub10UnitMgmtDateTime, sub10RadioRmtVectErr=sub10RadioRmtVectErr, Sub10MDIType=Sub10MDIType, sub10UnitMgmtFirmwareBankTable=sub10UnitMgmtFirmwareBankTable, sub10RadioStatsCurrAFERAvg=sub10RadioStatsCurrAFERAvg)
mibBuilder.exportSymbols("SUB10SYSTEMS-MIB", sub10EthMgmtStatsActiveEntryGrp=sub10EthMgmtStatsActiveEntryGrp, sub10RadioStats1dHistQPSKTo8PSK=sub10RadioStats1dHistQPSKTo8PSK, sub10EthMgmtQoSMPLSEntry=sub10EthMgmtQoSMPLSEntry, sub10RadioStatsCurrRxPowerMax=sub10RadioStatsCurrRxPowerMax, sub10EthMgmtQoSVlanEntryGrp=sub10EthMgmtQoSVlanEntryGrp, Sub10AlignmentMode=Sub10AlignmentMode, sub10UnitMgmtEncryptionGrp=sub10UnitMgmtEncryptionGrp, sub10UnitMgmtDNServer=sub10UnitMgmtDNServer, sub10RadioStatsCurrRxPowerAvg=sub10RadioStatsCurrRxPowerAvg, Sub10Snmpv3PrivProtocol=Sub10Snmpv3PrivProtocol, sub10RadioLclTxModulationMode=sub10RadioLclTxModulationMode, sub10EthMgmtQoSPCPIndex=sub10EthMgmtQoSPCPIndex, sub10UnitMgmtSnmpAccessRowStatus=sub10UnitMgmtSnmpAccessRowStatus, sub10UnitMgmtSnmpTrpDstIpAddr=sub10UnitMgmtSnmpTrpDstIpAddr, sub10RadioStats1mHistVectErrMin=sub10RadioStats1mHistVectErrMin, sub10EthMgmtVlan=sub10EthMgmtVlan, sub10UnitAlarm=sub10UnitAlarm, sub10EthStats15mHistRxGoodFrms=sub10EthStats15mHistRxGoodFrms, sub10RadioStats1mHistAFERMin=sub10RadioStats1mHistAFERMin, sub10RadioRmtAFER=sub10RadioRmtAFER, sub10RadioStats15mHistRxPowerMin=sub10RadioStats15mHistRxPowerMin, sub10RadioStatsCurrAFERMin=sub10RadioStatsCurrAFERMin, sub10UnitMgmtAlarmMeasObjIndex=sub10UnitMgmtAlarmMeasObjIndex, sub10UnitMgmtSnmpUserName=sub10UnitMgmtSnmpUserName, sub10UnitMgmtSnmpAgent=sub10UnitMgmtSnmpAgent, sub10EthStats15mHistRxUndersized=sub10EthStats15mHistRxUndersized, sub10RadioStats1dHistIntvls=sub10RadioStats1dHistIntvls, sub10UnitMgmtSnmpAccessEntry=sub10UnitMgmtSnmpAccessEntry, sub10EthMgmtQoSQSizeMax=sub10EthMgmtQoSQSizeMax, sub10RadioStats1dHistLnkLossMin=sub10RadioStats1dHistLnkLossMin, sub10RadioStats1dHistTxQPSK=sub10RadioStats1dHistTxQPSK, sub10UnitMgmtAlarmRowStatus=sub10UnitMgmtAlarmRowStatus, sub10EthLclMDI=sub10EthLclMDI, sub10EthStats15mHistTxGoodFrms=sub10EthStats15mHistTxGoodFrms, sub10RadioStats1mHistQPSKTo8PSK=sub10RadioStats1mHistQPSKTo8PSK, sub10RadioStatsCurrRxFrms=sub10RadioStatsCurrRxFrms, sub10RadioStats1mHistory=sub10RadioStats1mHistory, sub10UnitMgmtAlarmTable=sub10UnitMgmtAlarmTable, Sub10RadioLinkState=Sub10RadioLinkState, sub10RadioStatsCurrRxPowerMin=sub10RadioStatsCurrRxPowerMin, sub10UnitMgmtUsersNumber=sub10UnitMgmtUsersNumber, sub10RadioRemoteStatusGrp=sub10RadioRemoteStatusGrp, sub10UnitMgmtAlarmRaiseOper=sub10UnitMgmtAlarmRaiseOper, sub10UnitMgmtTimeGrp=sub10UnitMgmtTimeGrp, sub10EthStats1dHistRxCRCErrs=sub10EthStats1dHistRxCRCErrs, sub10RadioStats1dHist8PSKToQPSK=sub10RadioStats1dHist8PSKToQPSK, sub10UnitMgmtUserPassword=sub10UnitMgmtUserPassword, sub10UnitMgmtSnmpEngineIdFormat=sub10UnitMgmtSnmpEngineIdFormat, sub10EthStats1dHistRxOversized=sub10EthStats1dHistRxOversized, sub10EthStats15mHistPkts1024TMax=sub10EthStats15mHistPkts1024TMax, sub10RadioStats1mHistTxFrms=sub10RadioStats1mHistTxFrms, sub10RadioStats15mHistTxPowerMin=sub10RadioStats15mHistTxPowerMin, sub10RadioStats1mHistTime=sub10RadioStats1mHistTime, sub10RadioMgmtMWUChannelWidth=sub10RadioMgmtMWUChannelWidth, sub10EthStats15mHistRxSOFOvrns=sub10EthStats15mHistRxSOFOvrns, sub10RadioStats1dHistRxBadFrms=sub10RadioStats1dHistRxBadFrms, sub10EthMgmtVlanEgressAction=sub10EthMgmtVlanEgressAction, sub10EthMgmtPhyEntry=sub10EthMgmtPhyEntry, sub10RadioRmtLinkStatus=sub10RadioRmtLinkStatus, sub10RadioStatsCurrentGrp=sub10RadioStatsCurrentGrp, sub10EthStats1dHistPkts512T1023=sub10EthStats1dHistPkts512T1023, sub10UnitMgmtFirmware=sub10UnitMgmtFirmware, sub10RadioStats15mHistVectErrMax=sub10RadioStats15mHistVectErrMax, sub10RadioStatsCurrVectErrMin=sub10RadioStatsCurrVectErrMin, sub10UnitMgmtSystem=sub10UnitMgmtSystem, sub10EthStats1dHistIntvl=sub10EthStats1dHistIntvl, sub10RadioStats1mHistEntry=sub10RadioStats1mHistEntry, Sub10AlarmSeverity=Sub10AlarmSeverity, sub10EthStatsCurrTxSnglCollsn=sub10EthStatsCurrTxSnglCollsn, sub10RadioStatsCurrRmtTxPowerAvg=sub10RadioStatsCurrRmtTxPowerAvg, sub10EthMgmtQoSMPLSTable=sub10EthMgmtQoSMPLSTable, sub10UnitMgmtSnmpUserGroup=sub10UnitMgmtSnmpUserGroup, sub10RadioMgmtStatsActiveIndex=sub10RadioMgmtStatsActiveIndex, sub10RadioStatsCurrTxPowerAvg=sub10RadioStatsCurrTxPowerAvg, sub10UnitMgmtDNS=sub10UnitMgmtDNS, sub10RadioStats15mHistTxQPSK=sub10RadioStats15mHistTxQPSK, sub10UnitMgmtSnmpUserEntry=sub10UnitMgmtSnmpUserEntry, sub10UnitMgmtResetAlarmsType=sub10UnitMgmtResetAlarmsType, sub10EthMgmtQoSQEntryGrp=sub10EthMgmtQoSQEntryGrp, sub10UnitMgmtEncryptKey=sub10UnitMgmtEncryptKey, sub10EthStats15mHistRxMbpsMax=sub10EthStats15mHistRxMbpsMax, sub10EthStats1dHistPkts64Octets=sub10EthStats1dHistPkts64Octets, sub10EthStats1dHistPkts128T255=sub10EthStats1dHistPkts128T255, sub10UnitMgmtVlanState=sub10UnitMgmtVlanState, sub10RadioStats15mHistoryGrp=sub10RadioStats15mHistoryGrp, sub10RadioStats1dHistAFERMin=sub10RadioStats1dHistAFERMin, sub10EthMgmtQoSVlanQueue=sub10EthMgmtQoSVlanQueue, sub10EthStatsCurrTxMbpsMin=sub10EthStatsCurrTxMbpsMin, sub10RadioStats1mHistTable=sub10RadioStats1mHistTable, sub10RadioStats1mHistMWUTempMin=sub10RadioStats1mHistMWUTempMin, sub10RadioStatsCurrRxBadFrms=sub10RadioStatsCurrRxBadFrms, sub10RadioStats15mHistTxMgmtPkts=sub10RadioStats15mHistTxMgmtPkts, Sub10NTPSyncStatus=Sub10NTPSyncStatus, sub10RadioStatsCurrRmtLnkLossAvg=sub10RadioStatsCurrRmtLnkLossAvg, sub10EthStatsCurrRxMbpsMax=sub10EthStatsCurrRxMbpsMax, Sub10AlignmentModeLock=Sub10AlignmentModeLock, sub10RadioRmtAlignmentMode=sub10RadioRmtAlignmentMode, sub10RadioRemoteStatus=sub10RadioRemoteStatus, sub10UnitMgmtFirmwareUplImage=sub10UnitMgmtFirmwareUplImage, sub10UnitLclHWSerialNumber=sub10UnitLclHWSerialNumber, sub10RadioStats1mHistRxMgmtPkts=sub10RadioStats1mHistRxMgmtPkts, sub10EthernetStatsGrp=sub10EthernetStatsGrp, sub10EthStats15mHistTxCSenseErrs=sub10EthStats15mHistTxCSenseErrs, sub10UnitRmtTime=sub10UnitRmtTime, sub10RadioStats1dHistAFERMax=sub10RadioStats1dHistAFERMax, sub10EthMgmtVlanAllowedIndex=sub10EthMgmtVlanAllowedIndex, sub10RadioStats15mHistRxFrms=sub10RadioStats15mHistRxFrms, sub10Radio=sub10Radio, sub10EthStats15mHistTxMcastFrms=sub10EthStats15mHistTxMcastFrms, sub10RadioStatsCurrQPSKTo8PSK=sub10RadioStatsCurrQPSKTo8PSK, sub10RadioStats1dHistMWUTempMax=sub10RadioStats1dHistMWUTempMax, Sub10DateTime=Sub10DateTime, sub10RadioStats1mHistRx8PSK=sub10RadioStats1mHistRx8PSK, sub10UnitRemoteStatusGrp=sub10UnitRemoteStatusGrp, Sub10FirmwareBank=Sub10FirmwareBank, sub10EthLclMacAddress=sub10EthLclMacAddress, sub10EthStatsCurrTxExsvCollsn=sub10EthStatsCurrTxExsvCollsn, sub10EthRmtMDI=sub10EthRmtMDI, sub10UnitMgmtIpAddress=sub10UnitMgmtIpAddress, sub10RadioStatsCurrRxQPSK=sub10RadioStatsCurrRxQPSK, sub10EthStatsCurrPkts64Octets=sub10EthStatsCurrPkts64Octets, sub10EthStats15mHistTable=sub10EthStats15mHistTable, sub10RadioMgmtGrp=sub10RadioMgmtGrp, sub10EthStats15mHistRxOctets=sub10EthStats15mHistRxOctets, sub10EthStatsCurrTxMlplCollsn=sub10EthStatsCurrTxMlplCollsn, sub10RadioStats1mHistTxPowerAvg=sub10RadioStats1mHistTxPowerAvg, sub10UnitMgmtSnmpTargetEntryGrp=sub10UnitMgmtSnmpTargetEntryGrp, sub10RadioStats15mHistMWUTempMin=sub10RadioStats15mHistMWUTempMin, sub10UnitRmtHWSerialNumber=sub10UnitRmtHWSerialNumber, sub10UnitLclAlarmState=sub10UnitLclAlarmState, sub10EthMgmtVlanIngressAction=sub10EthMgmtVlanIngressAction, sub10EthStats1dHistTxCSenseErrs=sub10EthStats1dHistTxCSenseErrs, sub10RadioLclLnkLoss=sub10RadioLclLnkLoss, sub10EthMgmtQoSVlanMappingNumber=sub10EthMgmtQoSVlanMappingNumber, sub10EthRmtMacAddress=sub10EthRmtMacAddress, sub10RadioStats1mHistRxFrms=sub10RadioStats1mHistRxFrms, sub10UnitMgmtSnmpTrpDstIndex=sub10UnitMgmtSnmpTrpDstIndex, Sub10Snmpv3AuthProtocol=Sub10Snmpv3AuthProtocol, sub10RadioMgmtAPCMode=sub10RadioMgmtAPCMode, sub10UnitMgmtSnmpAccessIndex=sub10UnitMgmtSnmpAccessIndex, sub10RadioStats1mHistEntryGrp=sub10RadioStats1mHistEntryGrp, sub10UnitMgmtIpDHCP=sub10UnitMgmtIpDHCP, sub10RadioLocalStatusGrp=sub10RadioLocalStatusGrp, sub10UnitMgmtFirmwareBankImage=sub10UnitMgmtFirmwareBankImage, sub10RadioStatsCurrTxPowerMax=sub10RadioStatsCurrTxPowerMax, sub10EthStatsCurrRxFragments=sub10EthStatsCurrRxFragments, sub10RadioStats15mHistRxPowerMax=sub10RadioStats15mHistRxPowerMax, sub10UnitMgmtSnmpTargetIndex=sub10UnitMgmtSnmpTargetIndex, sub10EthStats15mHistTxDeferred=sub10EthStats15mHistTxDeferred, sub10RadioStats1dHistoryGrp=sub10RadioStats1dHistoryGrp, sub10UnitMgmtSnmpTrpDstEntryGrp=sub10UnitMgmtSnmpTrpDstEntryGrp, Sub10VlanId=Sub10VlanId, sub10UnitMgmtLinkName=sub10UnitMgmtLinkName, sub10UnitMgmtAlarmRaiseIntvls=sub10UnitMgmtAlarmRaiseIntvls, sub10EthMgmtStatsActiveEntry=sub10EthMgmtStatsActiveEntry, sub10UnitMgmtSnmpv3=sub10UnitMgmtSnmpv3, sub10RadioStatsCurrRmtRxPowerAvg=sub10RadioStatsCurrRmtRxPowerAvg, sub10RadioStats1mHistRxQPSK=sub10RadioStats1mHistRxQPSK, sub10RadioStats1dHistEntryGrp=sub10RadioStats1dHistEntryGrp, sub10EthStats15mHistRxBcastFrms=sub10EthStats15mHistRxBcastFrms, sub10UnitMgmtSnmpGrp=sub10UnitMgmtSnmpGrp, sub10UnitMgmtTimeNTPEnabled=sub10UnitMgmtTimeNTPEnabled, sub10UnitMgmtSyncEGrp=sub10UnitMgmtSyncEGrp, sub10UnitMgmtVlanId=sub10UnitMgmtVlanId, sub10UnitMgmtFirmwareVersion=sub10UnitMgmtFirmwareVersion, sub10EthStats1dHistTxCollsn=sub10EthStats1dHistTxCollsn, sub10RadioRmtRxPower=sub10RadioRmtRxPower, sub10RadioLclTxPower=sub10RadioLclTxPower, sub10RadioStatsCurrTxPowerMin=sub10RadioStatsCurrTxPowerMin, sub10UnitMgmtSmtp=sub10UnitMgmtSmtp, sub10Unit=sub10Unit, sub10RadioStats1mHistRxPkts=sub10RadioStats1mHistRxPkts)
