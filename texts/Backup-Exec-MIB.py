#
# PySNMP MIB module Backup-Exec-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/veritas/Backup-Exec-MIB
# Produced by pysmi-1.1.12 at Wed Nov  6 08:36:09 2024
# On host fv-az984-999 platform Linux version 6.5.0-1025-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Gauge32, MibIdentifier, Unsigned32, Counter32, NotificationType, ObjectIdentity, Bits, IpAddress, Integer32, ModuleIdentity, NotificationType, iso, TimeTicks, enterprises = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Gauge32", "MibIdentifier", "Unsigned32", "Counter32", "NotificationType", "ObjectIdentity", "Bits", "IpAddress", "Integer32", "ModuleIdentity", "NotificationType", "iso", "TimeTicks", "enterprises")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
veritassoftware = MibIdentifier((1, 3, 6, 1, 4, 1, 1302))
backupExecNetWare = MibIdentifier((1, 3, 6, 1, 4, 1, 1302, 1))
products = MibIdentifier((1, 3, 6, 1, 4, 1, 1302, 3))
backupexec = MibIdentifier((1, 3, 6, 1, 4, 1, 1302, 3, 1))
devices = MibIdentifier((1, 3, 6, 1, 4, 1, 1302, 3, 2))
trapvars = MibIdentifier((1, 3, 6, 1, 4, 1, 1302, 3, 3))
beconfig = MibIdentifier((1, 3, 6, 1, 4, 1, 1302, 3, 1, 1))
bejobs = MibIdentifier((1, 3, 6, 1, 4, 1, 1302, 3, 1, 2))
beinfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1302, 3, 1, 3))
bemodules = MibIdentifier((1, 3, 6, 1, 4, 1, 1302, 3, 1, 4))
nonspecifictraps = MibIdentifier((1, 3, 6, 1, 4, 1, 1302, 3, 1, 5))
loader = MibIdentifier((1, 3, 6, 1, 4, 1, 1302, 3, 2, 4))
tape = MibIdentifier((1, 3, 6, 1, 4, 1, 1302, 3, 2, 5))
labs = MibIdentifier((1, 3, 6, 1, 4, 1, 1302, 3, 1, 4, 1))
disasterrecovery = MibIdentifier((1, 3, 6, 1, 4, 1, 1302, 3, 1, 4, 2))
openfileoption = MibIdentifier((1, 3, 6, 1, 4, 1, 1302, 3, 1, 4, 3))
pvldevice = MibIdentifier((1, 3, 6, 1, 4, 1, 1302, 3, 1, 5, 1))
pvlmedia = MibIdentifier((1, 3, 6, 1, 4, 1, 1302, 3, 1, 5, 2))
catalog = MibIdentifier((1, 3, 6, 1, 4, 1, 1302, 3, 1, 5, 3))
tapealert = MibIdentifier((1, 3, 6, 1, 4, 1, 1302, 3, 1, 5, 4))
databasemaint = MibIdentifier((1, 3, 6, 1, 4, 1, 1302, 3, 1, 5, 5))
softwareupdate = MibIdentifier((1, 3, 6, 1, 4, 1, 1302, 3, 1, 5, 6))
install = MibIdentifier((1, 3, 6, 1, 4, 1, 1302, 3, 1, 5, 7))
serverName = MibScalar((1, 3, 6, 1, 4, 1, 1302, 3, 3, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverName.setStatus('mandatory')
if mibBuilder.loadTexts: serverName.setDescription('Server on which this product is running.')
appInfo = MibScalar((1, 3, 6, 1, 4, 1, 1302, 3, 3, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appInfo.setStatus('mandatory')
if mibBuilder.loadTexts: appInfo.setDescription('Product name and version information.')
jobName = MibScalar((1, 3, 6, 1, 4, 1, 1302, 3, 3, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jobName.setStatus('mandatory')
if mibBuilder.loadTexts: jobName.setDescription('The name of the job.')
operatorName = MibScalar((1, 3, 6, 1, 4, 1, 1302, 3, 3, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: operatorName.setStatus('mandatory')
if mibBuilder.loadTexts: operatorName.setDescription('User account which caused the event.')
messageText = MibScalar((1, 3, 6, 1, 4, 1, 1302, 3, 3, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: messageText.setStatus('mandatory')
if mibBuilder.loadTexts: messageText.setDescription('Description of the event.')
additionalText = MibScalar((1, 3, 6, 1, 4, 1, 1302, 3, 3, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: additionalText.setStatus('mandatory')
if mibBuilder.loadTexts: additionalText.setDescription('Additional information about the event, if available.')
backupExecNTGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 1302, 3, 1, 1, 9))
beNTLoaded = NotificationType((1, 3, 6, 1, 4, 1, 1302, 3, 1, 1, 9) + (0,1)).setObjects(("Backup-Exec-MIB", "messageText"), ("Backup-Exec-MIB", "serverName"), ("Backup-Exec-MIB", "appInfo"))
if mibBuilder.loadTexts: beNTLoaded.setDescription('The application has started.')
beNTUnloaded = NotificationType((1, 3, 6, 1, 4, 1, 1302, 3, 1, 1, 9) + (0,2)).setObjects(("Backup-Exec-MIB", "messageText"), ("Backup-Exec-MIB", "serverName"), ("Backup-Exec-MIB", "appInfo"))
if mibBuilder.loadTexts: beNTUnloaded.setDescription('The application has stopped.')
beNTSystemError = NotificationType((1, 3, 6, 1, 4, 1, 1302, 3, 1, 1, 9) + (0,3)).setObjects(("Backup-Exec-MIB", "messageText"), ("Backup-Exec-MIB", "serverName"), ("Backup-Exec-MIB", "additionalText"))
if mibBuilder.loadTexts: beNTSystemError.setDescription('The application has encountered an error.')
beNTGeneralInfo = NotificationType((1, 3, 6, 1, 4, 1, 1302, 3, 1, 1, 9) + (0,4)).setObjects(("Backup-Exec-MIB", "messageText"), ("Backup-Exec-MIB", "serverName"), ("Backup-Exec-MIB", "additionalText"))
if mibBuilder.loadTexts: beNTGeneralInfo.setDescription('Information on normal events.')
backupExecNTJobs = MibIdentifier((1, 3, 6, 1, 4, 1, 1302, 3, 1, 2, 8))
jobFailure = NotificationType((1, 3, 6, 1, 4, 1, 1302, 3, 1, 2, 8) + (0,1)).setObjects(("Backup-Exec-MIB", "messageText"), ("Backup-Exec-MIB", "serverName"), ("Backup-Exec-MIB", "jobName"), ("Backup-Exec-MIB", "additionalText"))
if mibBuilder.loadTexts: jobFailure.setDescription('The Job failed.')
jobAborted = NotificationType((1, 3, 6, 1, 4, 1, 1302, 3, 1, 2, 8) + (0,2)).setObjects(("Backup-Exec-MIB", "messageText"), ("Backup-Exec-MIB", "serverName"), ("Backup-Exec-MIB", "jobName"), ("Backup-Exec-MIB", "operatorName"))
if mibBuilder.loadTexts: jobAborted.setDescription('The Job was canceled.')
jobSuccess = NotificationType((1, 3, 6, 1, 4, 1, 1302, 3, 1, 2, 8) + (0,3)).setObjects(("Backup-Exec-MIB", "messageText"), ("Backup-Exec-MIB", "serverName"), ("Backup-Exec-MIB", "jobName"), ("Backup-Exec-MIB", "additionalText"))
if mibBuilder.loadTexts: jobSuccess.setDescription('The Job succeeded.')
jobSuccessExcept = NotificationType((1, 3, 6, 1, 4, 1, 1302, 3, 1, 2, 8) + (0,4)).setObjects(("Backup-Exec-MIB", "messageText"), ("Backup-Exec-MIB", "serverName"), ("Backup-Exec-MIB", "jobName"), ("Backup-Exec-MIB", "additionalText"))
if mibBuilder.loadTexts: jobSuccessExcept.setDescription('The Job succeeded, but there was a problem.')
jobStarted = NotificationType((1, 3, 6, 1, 4, 1, 1302, 3, 1, 2, 8) + (0,5)).setObjects(("Backup-Exec-MIB", "messageText"), ("Backup-Exec-MIB", "serverName"), ("Backup-Exec-MIB", "jobName"), ("Backup-Exec-MIB", "additionalText"))
if mibBuilder.loadTexts: jobStarted.setDescription('The Job has started.')
jobNoData = NotificationType((1, 3, 6, 1, 4, 1, 1302, 3, 1, 2, 8) + (0,6)).setObjects(("Backup-Exec-MIB", "messageText"))
if mibBuilder.loadTexts: jobNoData.setDescription('The job succeeded, but there was no data.')
jobWarning = NotificationType((1, 3, 6, 1, 4, 1, 1302, 3, 1, 2, 8) + (0,7)).setObjects(("Backup-Exec-MIB", "messageText"))
if mibBuilder.loadTexts: jobWarning.setDescription('The job has a warning.')
beName = MibScalar((1, 3, 6, 1, 4, 1, 1302, 3, 1, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: beName.setStatus('mandatory')
if mibBuilder.loadTexts: beName.setDescription('Backup Exec product name.')
revMajor = MibScalar((1, 3, 6, 1, 4, 1, 1302, 3, 1, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: revMajor.setStatus('mandatory')
if mibBuilder.loadTexts: revMajor.setDescription('The Backup Exec major revision level.')
revMinor = MibScalar((1, 3, 6, 1, 4, 1, 1302, 3, 1, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: revMinor.setStatus('mandatory')
if mibBuilder.loadTexts: revMinor.setDescription('The Backup Exec minor revision level.')
beBuild = MibScalar((1, 3, 6, 1, 4, 1, 1302, 3, 1, 3, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: beBuild.setStatus('mandatory')
if mibBuilder.loadTexts: beBuild.setDescription('The Backup Exec build number.')
beSerial = MibScalar((1, 3, 6, 1, 4, 1, 1302, 3, 1, 3, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: beSerial.setStatus('mandatory')
if mibBuilder.loadTexts: beSerial.setDescription('Backup Exec serial number.')
backupExecOptLABS = MibIdentifier((1, 3, 6, 1, 4, 1, 1302, 3, 1, 4, 1, 1))
multipleTapesNeeded = NotificationType((1, 3, 6, 1, 4, 1, 1302, 3, 1, 4, 1, 1) + (0,1)).setObjects(("Backup-Exec-MIB", "messageText"), ("Backup-Exec-MIB", "serverName"), ("Backup-Exec-MIB", "jobName"), ("Backup-Exec-MIB", "additionalText"))
if mibBuilder.loadTexts: multipleTapesNeeded.setDescription('Media for Low Administration Backup jobs will need to be\n                replaced more frequently.')
retriedAutomatically = NotificationType((1, 3, 6, 1, 4, 1, 1302, 3, 1, 4, 1, 1) + (0,2)).setObjects(("Backup-Exec-MIB", "messageText"), ("Backup-Exec-MIB", "serverName"), ("Backup-Exec-MIB", "jobName"), ("Backup-Exec-MIB", "additionalText"))
if mibBuilder.loadTexts: retriedAutomatically.setDescription('The failed Low Administration Backup job has caused an\n                additional medium to be used.  The Low Administration media\n                group will need to be replaced sooner than scheduled.')
backupExecOptIDR = MibIdentifier((1, 3, 6, 1, 4, 1, 1302, 3, 1, 4, 2, 1))
copyDRFile = NotificationType((1, 3, 6, 1, 4, 1, 1302, 3, 1, 4, 2, 1) + (0,1)).setObjects(("Backup-Exec-MIB", "messageText"), ("Backup-Exec-MIB", "serverName"), ("Backup-Exec-MIB", "jobName"), ("Backup-Exec-MIB", "additionalText"))
if mibBuilder.loadTexts: copyDRFile.setDescription('Disaster Recovery is not complete.  Update the Disaster\n                Recovery diskettes or manually copy Disaster Recovery file,\n                (servername).dr, found in the Disaster Recovery directory,\n                to the alternate path.')
fullBackupComplete = NotificationType((1, 3, 6, 1, 4, 1, 1302, 3, 1, 4, 2, 1) + (0,2)).setObjects(("Backup-Exec-MIB", "messageText"), ("Backup-Exec-MIB", "serverName"), ("Backup-Exec-MIB", "jobName"), ("Backup-Exec-MIB", "additionalText"))
if mibBuilder.loadTexts: fullBackupComplete.setDescription('Disaster Recovery has completed a full backup.  It is necessary\n                now to update the disaster recovery disks in order to keep them\n                current.')
backupExecOptOFO = MibIdentifier((1, 3, 6, 1, 4, 1, 1302, 3, 1, 4, 3, 1))
ofoFailed = NotificationType((1, 3, 6, 1, 4, 1, 1302, 3, 1, 4, 3, 1) + (0,1)).setObjects(("Backup-Exec-MIB", "messageText"), ("Backup-Exec-MIB", "serverName"), ("Backup-Exec-MIB", "jobName"), ("Backup-Exec-MIB", "additionalText"))
if mibBuilder.loadTexts: ofoFailed.setDescription('The Advanced Open File Option was unable to backup the selected resource.')
ofoCouldNotInit = NotificationType((1, 3, 6, 1, 4, 1, 1302, 3, 1, 4, 3, 1) + (0,2)).setObjects(("Backup-Exec-MIB", "messageText"), ("Backup-Exec-MIB", "serverName"), ("Backup-Exec-MIB", "jobName"), ("Backup-Exec-MIB", "additionalText"))
if mibBuilder.loadTexts: ofoCouldNotInit.setDescription('The Advanced Open File Option was unable to initialize.  The resource is\n                being backed up using normal backup methods.')
backupExecPVLDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 1302, 3, 1, 5, 1, 1))
pvlDeviceError = NotificationType((1, 3, 6, 1, 4, 1, 1302, 3, 1, 5, 1, 1) + (0,1)).setObjects(("Backup-Exec-MIB", "messageText"))
if mibBuilder.loadTexts: pvlDeviceError.setDescription('The device has encountered an error.')
pvlDeviceWarning = NotificationType((1, 3, 6, 1, 4, 1, 1302, 3, 1, 5, 1, 1) + (0,2)).setObjects(("Backup-Exec-MIB", "messageText"))
if mibBuilder.loadTexts: pvlDeviceWarning.setDescription('The device has encountered a warning.')
pvlDeviceInfo = NotificationType((1, 3, 6, 1, 4, 1, 1302, 3, 1, 5, 1, 1) + (0,3)).setObjects(("Backup-Exec-MIB", "messageText"))
if mibBuilder.loadTexts: pvlDeviceInfo.setDescription('Normal device information.')
pvlDeviceAttn = NotificationType((1, 3, 6, 1, 4, 1, 1302, 3, 1, 5, 1, 1) + (0,4)).setObjects(("Backup-Exec-MIB", "messageText"))
if mibBuilder.loadTexts: pvlDeviceAttn.setDescription('Device requires attention.')
backupExecPVLMedia = MibIdentifier((1, 3, 6, 1, 4, 1, 1302, 3, 1, 5, 2, 1))
pvlMediaError = NotificationType((1, 3, 6, 1, 4, 1, 1302, 3, 1, 5, 2, 1) + (0,1)).setObjects(("Backup-Exec-MIB", "messageText"))
if mibBuilder.loadTexts: pvlMediaError.setDescription('There is an error with the media.')
pvlMediaWarning = NotificationType((1, 3, 6, 1, 4, 1, 1302, 3, 1, 5, 2, 1) + (0,2)).setObjects(("Backup-Exec-MIB", "messageText"))
if mibBuilder.loadTexts: pvlMediaWarning.setDescription('There may be a problem with the media.')
pvlMediaInfo = NotificationType((1, 3, 6, 1, 4, 1, 1302, 3, 1, 5, 2, 1) + (0,3)).setObjects(("Backup-Exec-MIB", "messageText"))
if mibBuilder.loadTexts: pvlMediaInfo.setDescription('Normal media information.')
pvlMediaAttn = NotificationType((1, 3, 6, 1, 4, 1, 1302, 3, 1, 5, 2, 1) + (0,4)).setObjects(("Backup-Exec-MIB", "messageText"))
if mibBuilder.loadTexts: pvlMediaAttn.setDescription('Media requires attention.')
backupExecCatalog = MibIdentifier((1, 3, 6, 1, 4, 1, 1302, 3, 1, 5, 3, 1))
catalogFailed = NotificationType((1, 3, 6, 1, 4, 1, 1302, 3, 1, 5, 3, 1) + (0,1)).setObjects(("Backup-Exec-MIB", "messageText"))
if mibBuilder.loadTexts: catalogFailed.setDescription('There is an error with the catalogs.')
backupExecTapeAlert = MibIdentifier((1, 3, 6, 1, 4, 1, 1302, 3, 1, 5, 4, 1))
tapeAlertError = NotificationType((1, 3, 6, 1, 4, 1, 1302, 3, 1, 5, 4, 1) + (0,1)).setObjects(("Backup-Exec-MIB", "messageText"))
if mibBuilder.loadTexts: tapeAlertError.setDescription('There is a TapeAlert error.')
tapeAlertWarning = NotificationType((1, 3, 6, 1, 4, 1, 1302, 3, 1, 5, 4, 1) + (0,2)).setObjects(("Backup-Exec-MIB", "messageText"))
if mibBuilder.loadTexts: tapeAlertWarning.setDescription('There is a TapeAlert warning.')
tapeAlertInfo = NotificationType((1, 3, 6, 1, 4, 1, 1302, 3, 1, 5, 4, 1) + (0,3)).setObjects(("Backup-Exec-MIB", "messageText"))
if mibBuilder.loadTexts: tapeAlertInfo.setDescription('Normal TapeAlert information.')
backupExecDatabaseMaintenance = MibIdentifier((1, 3, 6, 1, 4, 1, 1302, 3, 1, 5, 5, 1))
databaseMaintenanceError = NotificationType((1, 3, 6, 1, 4, 1, 1302, 3, 1, 5, 5, 1) + (0,1)).setObjects(("Backup-Exec-MIB", "messageText"))
if mibBuilder.loadTexts: databaseMaintenanceError.setDescription('There is a database maintenance error.')
databaseMaintenanceInfo = NotificationType((1, 3, 6, 1, 4, 1, 1302, 3, 1, 5, 5, 1) + (0,2)).setObjects(("Backup-Exec-MIB", "messageText"))
if mibBuilder.loadTexts: databaseMaintenanceInfo.setDescription('Normal database maintenance information.')
backupExecSoftwareUpdate = MibIdentifier((1, 3, 6, 1, 4, 1, 1302, 3, 1, 5, 6, 1))
softwareUpdateError = NotificationType((1, 3, 6, 1, 4, 1, 1302, 3, 1, 5, 6, 1) + (0,1)).setObjects(("Backup-Exec-MIB", "messageText"))
if mibBuilder.loadTexts: softwareUpdateError.setDescription('There is a software update error.')
softwareUpdateWarning = NotificationType((1, 3, 6, 1, 4, 1, 1302, 3, 1, 5, 6, 1) + (0,2)).setObjects(("Backup-Exec-MIB", "messageText"))
if mibBuilder.loadTexts: softwareUpdateWarning.setDescription('There is a software update warning.')
softwareUpdateInfo = NotificationType((1, 3, 6, 1, 4, 1, 1302, 3, 1, 5, 6, 1) + (0,3)).setObjects(("Backup-Exec-MIB", "messageText"))
if mibBuilder.loadTexts: softwareUpdateInfo.setDescription('Normal software update information.')
backupExecInstall = MibIdentifier((1, 3, 6, 1, 4, 1, 1302, 3, 1, 5, 7, 1))
installWarning = NotificationType((1, 3, 6, 1, 4, 1, 1302, 3, 1, 5, 7, 1) + (0,1)).setObjects(("Backup-Exec-MIB", "messageText"))
if mibBuilder.loadTexts: installWarning.setDescription('There is an install warning.')
installInfo = NotificationType((1, 3, 6, 1, 4, 1, 1302, 3, 1, 5, 7, 1) + (0,2)).setObjects(("Backup-Exec-MIB", "messageText"))
if mibBuilder.loadTexts: installInfo.setDescription('Normal install information.')
backupExecNTLoader = MibIdentifier((1, 3, 6, 1, 4, 1, 1302, 3, 2, 4, 3))
loaderNeedsAttention = NotificationType((1, 3, 6, 1, 4, 1, 1302, 3, 2, 4, 3) + (0,3)).setObjects(("Backup-Exec-MIB", "messageText"), ("Backup-Exec-MIB", "serverName"), ("Backup-Exec-MIB", "jobName"), ("Backup-Exec-MIB", "additionalText"))
if mibBuilder.loadTexts: loaderNeedsAttention.setDescription('Loader needs human intervention.')
backupExecNTTapeDrive = MibIdentifier((1, 3, 6, 1, 4, 1, 1302, 3, 2, 5, 3))
driveNeedsAttention = NotificationType((1, 3, 6, 1, 4, 1, 1302, 3, 2, 5, 3) + (0,3)).setObjects(("Backup-Exec-MIB", "messageText"), ("Backup-Exec-MIB", "serverName"), ("Backup-Exec-MIB", "jobName"), ("Backup-Exec-MIB", "additionalText"))
if mibBuilder.loadTexts: driveNeedsAttention.setDescription('Tape drive needs human intervention.')
messageobject = MibScalar((1, 3, 6, 1, 4, 1, 1302, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: messageobject.setStatus('mandatory')
if mibBuilder.loadTexts: messageobject.setDescription('Buffer for text that the traps send to\n                                 explain why the trap occurred.')
blockingerrormsg = NotificationType((1, 3, 6, 1, 4, 1, 1302, 1) + (0,1)).setObjects(("Backup-Exec-MIB", "messageobject"))
if mibBuilder.loadTexts: blockingerrormsg.setDescription('An error occurred that prevents 1 or more\n                               sessions from processing jobs.')
errormessage = NotificationType((1, 3, 6, 1, 4, 1, 1302, 1) + (0,2)).setObjects(("Backup-Exec-MIB", "messageobject"))
if mibBuilder.loadTexts: errormessage.setDescription('An error occurred, but the session can\n                               continue to process jobs.')
blockingmessage = NotificationType((1, 3, 6, 1, 4, 1, 1302, 1) + (0,3)).setObjects(("Backup-Exec-MIB", "messageobject"))
if mibBuilder.loadTexts: blockingmessage.setDescription('An event occurred that prevents 1 or more\n                               sessions from processing jobs.')
warningmessage = NotificationType((1, 3, 6, 1, 4, 1, 1302, 1) + (0,4)).setObjects(("Backup-Exec-MIB", "messageobject"))
if mibBuilder.loadTexts: warningmessage.setDescription('An event occurred that prevents a particular\n                               job from running, but does not prevent the\n                               session from processing jobs.')
informationmessage = NotificationType((1, 3, 6, 1, 4, 1, 1302, 1) + (0,5)).setObjects(("Backup-Exec-MIB", "messageobject"))
if mibBuilder.loadTexts: informationmessage.setDescription('Information on normal events.')
mibBuilder.exportSymbols("Backup-Exec-MIB", serverName=serverName, nonspecifictraps=nonspecifictraps, jobAborted=jobAborted, devices=devices, openfileoption=openfileoption, backupExecCatalog=backupExecCatalog, loader=loader, loaderNeedsAttention=loaderNeedsAttention, tapealert=tapealert, pvlmedia=pvlmedia, fullBackupComplete=fullBackupComplete, tapeAlertWarning=tapeAlertWarning, bejobs=bejobs, catalog=catalog, softwareUpdateWarning=softwareUpdateWarning, pvlDeviceError=pvlDeviceError, blockingerrormsg=blockingerrormsg, revMajor=revMajor, veritassoftware=veritassoftware, pvlDeviceInfo=pvlDeviceInfo, beNTLoaded=beNTLoaded, backupExecInstall=backupExecInstall, driveNeedsAttention=driveNeedsAttention, beconfig=beconfig, backupExecPVLDevice=backupExecPVLDevice, pvlDeviceAttn=pvlDeviceAttn, beSerial=beSerial, pvlMediaError=pvlMediaError, messageText=messageText, trapvars=trapvars, backupExecNTGeneral=backupExecNTGeneral, multipleTapesNeeded=multipleTapesNeeded, installInfo=installInfo, beNTUnloaded=beNTUnloaded, pvlMediaInfo=pvlMediaInfo, beNTSystemError=beNTSystemError, backupExecNTJobs=backupExecNTJobs, softwareUpdateError=softwareUpdateError, backupExecNTTapeDrive=backupExecNTTapeDrive, pvldevice=pvldevice, softwareupdate=softwareupdate, blockingmessage=blockingmessage, labs=labs, jobStarted=jobStarted, install=install, warningmessage=warningmessage, pvlDeviceWarning=pvlDeviceWarning, backupExecNTLoader=backupExecNTLoader, databaseMaintenanceInfo=databaseMaintenanceInfo, jobSuccess=jobSuccess, backupExecDatabaseMaintenance=backupExecDatabaseMaintenance, backupExecPVLMedia=backupExecPVLMedia, tape=tape, beName=beName, backupexec=backupexec, copyDRFile=copyDRFile, beinfo=beinfo, beNTGeneralInfo=beNTGeneralInfo, messageobject=messageobject, jobNoData=jobNoData, backupExecOptLABS=backupExecOptLABS, jobSuccessExcept=jobSuccessExcept, ofoFailed=ofoFailed, jobWarning=jobWarning, retriedAutomatically=retriedAutomatically, ofoCouldNotInit=ofoCouldNotInit, beBuild=beBuild, disasterrecovery=disasterrecovery, backupExecSoftwareUpdate=backupExecSoftwareUpdate, softwareUpdateInfo=softwareUpdateInfo, tapeAlertInfo=tapeAlertInfo, backupExecOptOFO=backupExecOptOFO, pvlMediaWarning=pvlMediaWarning, backupExecOptIDR=backupExecOptIDR, additionalText=additionalText, errormessage=errormessage, revMinor=revMinor, jobName=jobName, databaseMaintenanceError=databaseMaintenanceError, products=products, bemodules=bemodules, backupExecTapeAlert=backupExecTapeAlert, installWarning=installWarning, databasemaint=databasemaint, catalogFailed=catalogFailed, backupExecNetWare=backupExecNetWare, tapeAlertError=tapeAlertError, informationmessage=informationmessage, operatorName=operatorName, appInfo=appInfo, jobFailure=jobFailure, pvlMediaAttn=pvlMediaAttn)
