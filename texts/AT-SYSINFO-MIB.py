#
# PySNMP MIB module AT-SYSINFO-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/allied/AT-SYSINFO-MIB
# Produced by pysmi-1.1.12 at Tue May 28 12:08:27 2024
# On host fv-az1567-4 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint")
DisplayStringUnsized, atRouter = mibBuilder.importSymbols("AT-SMI-MIB", "DisplayStringUnsized", "atRouter")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Integer32, Gauge32, iso, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, TimeTicks, ObjectIdentity, Counter32, Unsigned32, Bits, MibIdentifier, IpAddress, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Gauge32", "iso", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "TimeTicks", "ObjectIdentity", "Counter32", "Unsigned32", "Bits", "MibIdentifier", "IpAddress", "Counter64")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
sysinfo = ModuleIdentity((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3))
sysinfo.setRevisions(('2016-12-14 00:00', '2016-12-12 00:00', '2016-05-05 00:00', '2015-03-16 00:00', '2014-06-09 00:00', '2014-04-30 00:00', '2014-04-16 00:00', '2012-09-21 00:00', '2011-03-14 00:00', '2010-09-18 00:00', '2010-09-07 00:00', '2010-08-31 00:31', '2010-08-16 00:16', '2010-06-15 00:15', '2010-06-04 00:00', '2008-02-26 00:00', '2006-06-14 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: sysinfo.setRevisionsDescriptions(('Added QSFP28-SR to atPortInfoTransceiverEntry', 'Added 10GBASE-ZR SFP+ to atPortInfoTransceiverEntry', 'Added 40GBASE-ER4 and 10GBBASE-T SFP+ to atPortInfoTransceiverEntry', 'Added 40GBASE-SR4 and 40GBASE-LR4 to atPortInfoTransceiverEntry', 'Added 4 x Cu Passive QSFP description to atPortInfoTransceiverEntry.', 'Updated decriptions to refer to chassisMappingTable', 'Added more descriptions to cpuUtilisationStackId for VCStack Plus', 'Added chassis switch (e.g. SBx8100) descriptions to stack-related MIB objects', 'Added CX4 description to atPortInfoTransceiverEntry.', 'Updated CPU Utilization to be per stack member.', 'Generic syntax tidy up', 'Added Infinband descriptions to atPortInfoTransceiverEntry.', 'Added SFP Plus descriptions to atPortInfoTransceiverEntry.', 'MIB revision history dates in descriptions updated.', 'Added new object atPortRenumberEvents.', 'Changed top DESCRIPTION section.', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: sysinfo.setLastUpdated('201612140000Z')
if mibBuilder.loadTexts: sysinfo.setOrganization('Allied Telesis, Inc.')
if mibBuilder.loadTexts: sysinfo.setContactInfo('  http://www.alliedtelesis.com')
if mibBuilder.loadTexts: sysinfo.setDescription('Subtree beneath which system inforamtion ids are assigned.\n                It contains generic system information, as follows:\n                { sysinfo 1 } fanAndPs\n                { sysinfo 2 } restartGroup\n                { sysinfo 3 } cpu\n                { sysinfo 4 } sysTemperature\n                { sysinfo 5 } atrContactDetails\n                { sysinfo 6 } bbrNvs\n                { sysinfo 9 } hostId\n                { sysinfo 10 } envMon\n                { sysinfo 11 } xem\n                { sysinfo 12 } awpEnvMon\n                { sysinfo 13 } awpStack\n                { sysinfo 14 } atPortInfo')
fanAndPs = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 1))
fanAndPsTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 1, 0))
fanAndPsRpsConnectionTrap = NotificationType((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 1, 0, 1)).setObjects(("AT-SYSINFO-MIB", "fanAndPsRpsConnectionStatus"))
if mibBuilder.loadTexts: fanAndPsRpsConnectionTrap.setStatus('current')
if mibBuilder.loadTexts: fanAndPsRpsConnectionTrap.setDescription('Generated when the RPS connection status changes.')
fanAndPsMainPSUStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 1, 0, 2)).setObjects(("AT-SYSINFO-MIB", "fanAndPsMainPSUStatus"))
if mibBuilder.loadTexts: fanAndPsMainPSUStatusTrap.setStatus('current')
if mibBuilder.loadTexts: fanAndPsMainPSUStatusTrap.setDescription('Generated when the main power supply status changes.')
fanAndPsRedundantPSUStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 1, 0, 3)).setObjects(("AT-SYSINFO-MIB", "fanAndPsRedundantPSUStatus"))
if mibBuilder.loadTexts: fanAndPsRedundantPSUStatusTrap.setStatus('current')
if mibBuilder.loadTexts: fanAndPsRedundantPSUStatusTrap.setDescription('Generated when the RPS status changes.')
fanAndPsMainFanStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 1, 0, 4)).setObjects(("AT-SYSINFO-MIB", "fanAndPsMainFanStatus"))
if mibBuilder.loadTexts: fanAndPsMainFanStatusTrap.setStatus('current')
if mibBuilder.loadTexts: fanAndPsMainFanStatusTrap.setDescription('Generated when the main fan changes status.')
fanAndPsRedundantFanStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 1, 0, 5)).setObjects(("AT-SYSINFO-MIB", "fanAndPsRedundantFanStatus"))
if mibBuilder.loadTexts: fanAndPsRedundantFanStatusTrap.setStatus('current')
if mibBuilder.loadTexts: fanAndPsRedundantFanStatusTrap.setDescription('Generated when the redundant fan changes status.')
fanAndPsTemperatureStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 1, 0, 6)).setObjects(("AT-SYSINFO-MIB", "fanAndPsTemperatureStatus"))
if mibBuilder.loadTexts: fanAndPsTemperatureStatusTrap.setStatus('current')
if mibBuilder.loadTexts: fanAndPsTemperatureStatusTrap.setDescription('Generated when the temperature changes status.')
fanAndPsFanTrayPresentTrap = NotificationType((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 1, 0, 7)).setObjects(("AT-SYSINFO-MIB", "fanAndPsFanTrayPresent"))
if mibBuilder.loadTexts: fanAndPsFanTrayPresentTrap.setStatus('current')
if mibBuilder.loadTexts: fanAndPsFanTrayPresentTrap.setDescription('Generated when the fan tray presence status changes.')
fanAndPsFanTrayStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 1, 0, 8)).setObjects(("AT-SYSINFO-MIB", "fanAndPsFanTrayStatus"))
if mibBuilder.loadTexts: fanAndPsFanTrayStatusTrap.setStatus('current')
if mibBuilder.loadTexts: fanAndPsFanTrayStatusTrap.setDescription('Generated when the fan tray status changes.')
fanAndPsMainMonitoringStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 1, 0, 9)).setObjects(("AT-SYSINFO-MIB", "fanAndPsMainMonitoringStatus"))
if mibBuilder.loadTexts: fanAndPsMainMonitoringStatusTrap.setStatus('current')
if mibBuilder.loadTexts: fanAndPsMainMonitoringStatusTrap.setDescription('Generated when the main power supply monitoring status changes.')
fanAndPsAccelFanStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 1, 0, 10)).setObjects(("AT-SYSINFO-MIB", "fanAndPsAccelFanStatus"))
if mibBuilder.loadTexts: fanAndPsAccelFanStatusTrap.setStatus('current')
if mibBuilder.loadTexts: fanAndPsAccelFanStatusTrap.setDescription("Generated when the accelerator fans' status changes.")
fanAndPsRpsConnectionStatus = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("notSupported", 0), ("connected", 1), ("notConnected", 2), ("notMonitoring", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanAndPsRpsConnectionStatus.setStatus('current')
if mibBuilder.loadTexts: fanAndPsRpsConnectionStatus.setDescription('The status of the Redundant Power Supply (RPS) connection,\n                ie, whether an RPS is actually connected or not, regardless\n                of whether the RPS is on or not. notSupported means that an\n                RPS is not supported in this hardware platform, connected\n                means that the RPS is connected, notConnected means that the\n                RPS is not connected, and notMonitoring means that the status\n                of the RPS is not being monitored presently. RPS monitoring can\n                be turned on via the variable fanAndPsRpsMonitoringStatus, or\n                by the command SET SYSTEM RPSMONITOR=ON.')
fanAndPsMainPSUStatus = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("faulty", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanAndPsMainPSUStatus.setStatus('current')
if mibBuilder.loadTexts: fanAndPsMainPSUStatus.setDescription('The status of the main Power Supply. on means that the power supply is present\n                and fully operational. off means that the power supply is totally off (and\n                obviously only applies to systems with a redundant power supply). faulty means\n                that the main power supply is delivering power but that a component of the\n                power supply is faulty. This applies to systems like SwitchBlade which have 3\n                power supplies but do not provide individual power supply monitoring. Also,\n                in the case of SwitchBlade, power supply status includes the status of the fans\n                in the power supply.')
fanAndPsRedundantPSUStatus = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("notSupported", 0), ("on", 1), ("off", 2), ("notMonitoring", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanAndPsRedundantPSUStatus.setStatus('current')
if mibBuilder.loadTexts: fanAndPsRedundantPSUStatus.setDescription('The status of the redundant Power Supply. notSupported means\n                this device does not support redundant power supplies, on\n                means that the redundant power supply is connected and able\n                to supply system power if required, off means that the\n                redundant power supply is either not connected or is connected\n                and is not able to supply system power if required, and\n                notMonitoring means that the status of the RPS is not being\n                monitored presently. RPS monitoring can be turned on via the\n                variable fanAndPsRpsMonitoringStatus, or by the command\n                SET SYSTEM RPSMONITOR=ON.')
fanAndPsRpsMonitoringStatus = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notSupported", 0), ("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fanAndPsRpsMonitoringStatus.setStatus('current')
if mibBuilder.loadTexts: fanAndPsRpsMonitoringStatus.setDescription('The current status of redundant power supply monitoring. The\n                monitoring of the redundant power supply and its fan must be\n                enabled by command or by setting this variable to on. The value\n                notSupported means that this device does not support redundant\n                power supplies. Only the values on or off may be written to this\n                variable. If this variables reads as notSupported, an attempt to\n                write to this variable will result in a bad value error.')
fanAndPsMainFanStatus = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("notSupported", 0), ("ok", 1), ("notOk", 2), ("warning", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanAndPsMainFanStatus.setStatus('current')
if mibBuilder.loadTexts: fanAndPsMainFanStatus.setDescription("The status of the main Power Supply fan. notSupported means that this\n                device does not support monitoring on the main power supply fan, or that\n                there is no main power supply fan. The warning means the fan's speed is\n                outside 30% of the expected speed.")
fanAndPsRedundantFanStatus = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("notSupported", 0), ("ok", 1), ("notOk", 2), ("notMonitoring", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanAndPsRedundantFanStatus.setStatus('current')
if mibBuilder.loadTexts: fanAndPsRedundantFanStatus.setDescription('The status of the redundant Power Supply Fan. notSupported means\n                this device does not support redundant power supplies, ok\n                means that the redundant power supply fan is running, notOk means\n                that the redundant power supply fan is not running, and\n                notMonitoring means that the status of the RPS is not being\n                monitored presently. RPS monitoring can be turned on via the\n                variable fanAndPsRpsMonitoringStatus, or by the command\n                SET SYSTEM RPSMONITOR=ON.')
fanAndPsTemperatureStatus = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("notOk", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanAndPsTemperatureStatus.setStatus('current')
if mibBuilder.loadTexts: fanAndPsTemperatureStatus.setDescription('The status of temperature in this device. ok means that the\n                device is not capable of monitoring temperature or that the\n                temperature is OK, notOk means that the temperature is being\n                monitored and is currently out of the range 0C - 45C.')
fanAndPsFanTrayPresent = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notSupported", 0), ("present", 1), ("notPresent", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanAndPsFanTrayPresent.setStatus('current')
if mibBuilder.loadTexts: fanAndPsFanTrayPresent.setDescription('The status of the presence of the fan tray in this system. Systems\n                which do not support a fan tray return the value notSupported. Upon\n                removal of the fan tray there is a short period (20s) before the value of\n                this variable is changed to notPresent. This is to allow for scheduled\n                replacement and/or cleaning of the fan tray.')
fanAndPsFanTrayStatus = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notSupported", 0), ("ok", 1), ("notOk", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanAndPsFanTrayStatus.setStatus('current')
if mibBuilder.loadTexts: fanAndPsFanTrayStatus.setDescription('The status of the fan tray in this system. Systems which do not support\n                a fan tray return the value notSupported. The value ok is returned if all fans\n                in the fan tray are running at full speed. The value notOk is returned if\n                one of more of the fan tray fans is running slow or has stalled.')
fanAndPsMainMonitoringStatus = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notSupported", 0), ("ok", 1), ("notOk", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanAndPsMainMonitoringStatus.setStatus('current')
if mibBuilder.loadTexts: fanAndPsMainMonitoringStatus.setDescription('The current status of main power supply monitoring. The\n                monitoring of the main power supply and its fan is always\n                enabled by those systems that support it. Systems which do\n                not support main power supply or fan monitoring report a\n                value of notSupported. The value ok is returned for those\n                systems that do support main power supply and fan monitoring,\n                and where the monitoring operation is reporting valid information (refer\n                to fanAndPsMainFanStatus for the current status of the system).\n                When main power supply and fan monitoring is failing, the value\n                notOk is returned.')
fanAndPsPsuStatusTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 1, 11), )
if mibBuilder.loadTexts: fanAndPsPsuStatusTable.setStatus('current')
if mibBuilder.loadTexts: fanAndPsPsuStatusTable.setDescription('The table of AT8948 fanAndPsPsuStatusTable. Each entry in the table\n                represents the status of one of the power supplies in AT8948 system.\n                Each power supply has its own board ID.')
fanAndPsPsuStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 1, 11, 1), ).setIndexNames((0, "AT-SYSINFO-MIB", "fanAndPsPsuNumber"))
if mibBuilder.loadTexts: fanAndPsPsuStatusEntry.setStatus('current')
if mibBuilder.loadTexts: fanAndPsPsuStatusEntry.setDescription('A single entry of AT8948 fanAndPsPsuStatusTable, indexed by\n                fanAndPsPsuNumber field.')
fanAndPsPsuNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 1, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanAndPsPsuNumber.setStatus('current')
if mibBuilder.loadTexts: fanAndPsPsuNumber.setDescription('The PSU board identity for which this entry holds. If the system\n                consists only of a single PSU board, only one entry will appear\n                in the table, whose index is 1.')
fanAndPsPsuPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 1, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("yes", 0), ("no", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanAndPsPsuPresent.setStatus('current')
if mibBuilder.loadTexts: fanAndPsPsuPresent.setDescription("The PSU present state, displayed as 'yes' if present, or 'no' if absent.")
fanAndPsPsuType = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 1, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("ac", 0), ("dc", 1), ("fan", 2), ("notPresent", 3), ("notSupported", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanAndPsPsuType.setStatus('current')
if mibBuilder.loadTexts: fanAndPsPsuType.setDescription('The PSU type, displayed as AC, or DC, or FAN, or NOT PRESENT.')
fanAndPsPsuFan = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 1, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("ok", 0), ("fail", 1), ("notPresent", 2), ("notSupported", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanAndPsPsuFan.setStatus('current')
if mibBuilder.loadTexts: fanAndPsPsuFan.setDescription('The PSU fan status, displayed as OK, or FAIL, or NOT PRESENT.')
fanAndPsPsuTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 1, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("good", 0), ("high", 1), ("notPresent", 2), ("notSupported", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanAndPsPsuTemperature.setStatus('current')
if mibBuilder.loadTexts: fanAndPsPsuTemperature.setDescription('The PSU temperature, displayed as GOOD, or HIGH, or NOT PRESENT,\n                or NOT SUPPORTED.')
fanAndPsPsuPower = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 1, 11, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("good", 0), ("bad", 1), ("notPresent", 2), ("notSupported", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanAndPsPsuPower.setStatus('current')
if mibBuilder.loadTexts: fanAndPsPsuPower.setDescription('The PSU power status, displayed as GOOD, or BAD, or NOT PRESENT\n                or NOT SUPPORTED.')
fanAndPsAccelFanStatus = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notSupported", 0), ("ok", 1), ("notOk", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanAndPsAccelFanStatus.setStatus('current')
if mibBuilder.loadTexts: fanAndPsAccelFanStatus.setDescription('The status of the accelerator card fans. Non-supported means this\n                device does not support monitoring of the accelerator card fans.')
restartGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 2))
restart = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("restartNone", 0), ("restartWarm", 1), ("restartCold", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restart.setStatus('current')
if mibBuilder.loadTexts: restart.setDescription('A router/switch restart request.\n\n                A management station can remotely instruct an ATI router/switch\n                to action a warm or cold restart.\n\n                Once all the appropriate internal checks have been made, the\n                router/switch will acknowledge the request via normal SNMP channels.\n                The restart instruction will be actioned after waiting for a period\n                of 5 seconds, this is because the SNMP acknowledgement packet needs\n                time to reach the management station.\n\n                Once the request has been actioned, it can not be cancelled and\n                communication with the router/switch will be lost during system\n                initialisation.')
restartCause = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 0), ("hardwareReset", 1), ("hardwareWatchdog", 2), ("softwareRequest", 3), ("softwareException", 4), ("softwareInvalidImage", 5), ("softwareLicenceCheckFailure", 6), ("powerOnSelfTestfailure", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restartCause.setStatus('current')
if mibBuilder.loadTexts: restartCause.setDescription('The reason for last time restart.')
restartLog = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 2, 3), DisplayStringUnsized().subtype(subtypeSpec=ValueSizeConstraint(0, 500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restartLog.setStatus('current')
if mibBuilder.loadTexts: restartLog.setDescription('The restart logging details.')
restartNotification = NotificationType((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 2, 11)).setObjects(("AT-SYSINFO-MIB", "restartCause"))
if mibBuilder.loadTexts: restartNotification.setStatus('current')
if mibBuilder.loadTexts: restartNotification.setDescription('A restart notification is a trap sent to tell snmp managers\n                the reason of restarting')
cpu = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 3))
cpuUtilisationMax = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuUtilisationMax.setStatus('current')
if mibBuilder.loadTexts: cpuUtilisationMax.setDescription('Maximum CPU utilisation since the router was last restarted.\n                Expressed as a percentage.')
cpuUtilisationAvg = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuUtilisationAvg.setStatus('current')
if mibBuilder.loadTexts: cpuUtilisationAvg.setDescription('Average CPU utilisation since the router was last restarted.\n                Expressed as a percentage.')
cpuUtilisationAvgLastMinute = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuUtilisationAvgLastMinute.setStatus('current')
if mibBuilder.loadTexts: cpuUtilisationAvgLastMinute.setDescription('Average CPU utilisation over the past minute.\n                Expressed as a percentage.')
cpuUtilisationAvgLast10Seconds = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 3, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuUtilisationAvgLast10Seconds.setStatus('current')
if mibBuilder.loadTexts: cpuUtilisationAvgLast10Seconds.setDescription('Average CPU utilisation over the past ten seconds.\n                Expressed as a percentage.')
cpuUtilisationAvgLastSecond = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 3, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuUtilisationAvgLastSecond.setStatus('current')
if mibBuilder.loadTexts: cpuUtilisationAvgLastSecond.setDescription('Average CPU utilisation over the past second.\n                Expressed as a percentage.')
cpuUtilisationMaxLast5Minutes = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 3, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuUtilisationMaxLast5Minutes.setStatus('current')
if mibBuilder.loadTexts: cpuUtilisationMaxLast5Minutes.setDescription('Maximum CPU utilisation over the last 5 minutes.\n                Expressed as a percentage.')
cpuUtilisationAvgLast5Minutes = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 3, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuUtilisationAvgLast5Minutes.setStatus('current')
if mibBuilder.loadTexts: cpuUtilisationAvgLast5Minutes.setDescription('Average CPU utilisation over the past 5 minutes.\n                Expressed as a percentage.')
cpuUtilisationStackTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 3, 8), )
if mibBuilder.loadTexts: cpuUtilisationStackTable.setStatus('current')
if mibBuilder.loadTexts: cpuUtilisationStackTable.setDescription('A list of stack members. For a chassis switch, this is a list\n                of cards.')
cpuUtilisationStackEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 3, 8, 1), ).setIndexNames((0, "AT-SYSINFO-MIB", "cpuUtilisationStackId"))
if mibBuilder.loadTexts: cpuUtilisationStackEntry.setStatus('current')
if mibBuilder.loadTexts: cpuUtilisationStackEntry.setDescription('A set of parameters that describe the CPU utilisation of a\n                stack member. For a chassis switch, it corresponds to the CPU\n                utilisation of a card.')
cpuUtilisationStackId = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 3, 8, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuUtilisationStackId.setStatus('current')
if mibBuilder.loadTexts: cpuUtilisationStackId.setDescription('Stack member ID. For a chassis switch, it corresponds to the\n                card ID. For VCStack Plus, 1-12 refers to the cards on VCS stack\n                member 1 and 13-24 refers to the cards on VCS stack member 2.\n                Refer to chassisMappingTable for more details.')
cpuUtilisationStackMax = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 3, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuUtilisationStackMax.setStatus('current')
if mibBuilder.loadTexts: cpuUtilisationStackMax.setDescription('Maximum CPU utilisation since the router was last restarted.\n                Expressed as a percentage.')
cpuUtilisationStackAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 3, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuUtilisationStackAvg.setStatus('current')
if mibBuilder.loadTexts: cpuUtilisationStackAvg.setDescription('Average CPU utilisation since the router was last restarted.\n                 Expressed as a percentage.')
cpuUtilisationStackAvgLastMinute = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 3, 8, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuUtilisationStackAvgLastMinute.setStatus('current')
if mibBuilder.loadTexts: cpuUtilisationStackAvgLastMinute.setDescription('Average CPU utilisation over the past minute.\n                 Expressed as a percentage.')
cpuUtilisationStackAvgLast10Seconds = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 3, 8, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuUtilisationStackAvgLast10Seconds.setStatus('current')
if mibBuilder.loadTexts: cpuUtilisationStackAvgLast10Seconds.setDescription('Average CPU utilisation over the past ten seconds.\n                 Expressed as a percentage.')
cpuUtilisationStackAvgLastSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 3, 8, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuUtilisationStackAvgLastSecond.setStatus('current')
if mibBuilder.loadTexts: cpuUtilisationStackAvgLastSecond.setDescription('Average CPU utilisation over the past second.\n                 Expressed as a percentage.')
cpuUtilisationStackMaxLast5Minutes = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 3, 8, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuUtilisationStackMaxLast5Minutes.setStatus('current')
if mibBuilder.loadTexts: cpuUtilisationStackMaxLast5Minutes.setDescription('Maximum CPU utilisation over the last 5 minutes.\n                 Expressed as a percentage.')
cpuUtilisationStackAvgLast5Minutes = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 3, 8, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuUtilisationStackAvgLast5Minutes.setStatus('current')
if mibBuilder.loadTexts: cpuUtilisationStackAvgLast5Minutes.setDescription('Average CPU utilisation over the past 5 minutes.\n                 Expressed as a percentage.')
sysTemperature = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 4))
generalTemperature = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 4, 1))
generalTemperatureTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 4, 1, 0))
generalTemperatureStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 4, 1, 0, 1)).setObjects(("AT-SYSINFO-MIB", "generalTemperatureStatus"), ("AT-SYSINFO-MIB", "generalTemperatureActualTemp"), ("AT-SYSINFO-MIB", "generalTemperatureThreshold"))
if mibBuilder.loadTexts: generalTemperatureStatusTrap.setStatus('current')
if mibBuilder.loadTexts: generalTemperatureStatusTrap.setDescription('Generated when the temperature status of the device changes.')
generalTemperatureSupported = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notSupported", 0), ("supported", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: generalTemperatureSupported.setStatus('current')
if mibBuilder.loadTexts: generalTemperatureSupported.setDescription('The value supported indicates general temperature is displayed by the\n                device. The value notSupported indicates the device displays specific\n                temperature information or none at all.')
generalTemperatureActualTemp = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: generalTemperatureActualTemp.setStatus('current')
if mibBuilder.loadTexts: generalTemperatureActualTemp.setDescription("The current temperature of product's base board, in degrees Celsius. A device\n                which doesn't support this group will return the value 0 for this variable.")
generalTemperatureStatus = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("notOk", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: generalTemperatureStatus.setStatus('current')
if mibBuilder.loadTexts: generalTemperatureStatus.setDescription('The status of temperature in this device. ok indicates the\n                temperature is below the threshold temperature or the device\n                is not capable of monitoring temperature. notOk indicates the\n                temperature is being monitored and is currently above the\n                threshold temperature (displayed in generalTemperatureThreshold).')
generalTemperatureThreshold = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 4, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: generalTemperatureThreshold.setStatus('current')
if mibBuilder.loadTexts: generalTemperatureThreshold.setDescription('The temperature threshold for the device. If the\n                temperature of the device rises above this threshold\n                generalTemeratureStatus will indicate a notOk status.')
sbTemperature = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 4, 2))
sbTemperatureTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 4, 2, 0))
sbTempFixedThresholdTrap = NotificationType((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 4, 2, 0, 1)).setObjects(("AT-SYSINFO-MIB", "sbTempFixedThresholdStatus"), ("AT-SYSINFO-MIB", "sbTempActualTemperature"), ("AT-SYSINFO-MIB", "sbTempFixedThreshold"))
if mibBuilder.loadTexts: sbTempFixedThresholdTrap.setStatus('current')
if mibBuilder.loadTexts: sbTempFixedThresholdTrap.setDescription('Trap occurs when fixed threshold status changes. The actual temperature\n                and the fixed threshold are also given.')
sbTempSettableThresholdTrap = NotificationType((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 4, 2, 0, 2)).setObjects(("AT-SYSINFO-MIB", "sbTempSettableThresholdStatus"), ("AT-SYSINFO-MIB", "sbTempActualTemperature"), ("AT-SYSINFO-MIB", "sbTempSettableThreshold"))
if mibBuilder.loadTexts: sbTempSettableThresholdTrap.setStatus('current')
if mibBuilder.loadTexts: sbTempSettableThresholdTrap.setDescription('Trap occurs when settable threshold status changes. The actual temperature\n                and the settable threshold are also given.')
sbTempTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 4, 2, 1), )
if mibBuilder.loadTexts: sbTempTable.setStatus('current')
if mibBuilder.loadTexts: sbTempTable.setDescription('The table of SwitchBlade sysTemperature. Each entry in the table\n                represents temperature monitoring from one of the CPU cards which\n                may be present in the SwitchBlade system.')
sbTempEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 4, 2, 1, 1), ).setIndexNames((0, "AT-SYSINFO-MIB", "sbTempIndex"))
if mibBuilder.loadTexts: sbTempEntry.setStatus('current')
if mibBuilder.loadTexts: sbTempEntry.setDescription('A single entry of SwitchBlade sysTemperature')
sbTempIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 4, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("master", 1), ("slave", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sbTempIndex.setStatus('current')
if mibBuilder.loadTexts: sbTempIndex.setDescription('The board for which this temperature entry holds. If the system\n                consists only of a single CPU board, only one entry will appear\n                in the table, whose index is master(1).')
sbTempActualTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 4, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sbTempActualTemperature.setStatus('current')
if mibBuilder.loadTexts: sbTempActualTemperature.setDescription('The actual SwitchBlade temperature. This temperature is measured\n                within the SwitchBlade CPU, and is sampled at 1 second intervals.')
sbTempFixedThresholdStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 4, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("crossover", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sbTempFixedThresholdStatus.setStatus('current')
if mibBuilder.loadTexts: sbTempFixedThresholdStatus.setDescription('The temperature status with regard to the fixed temperature\n                threshold. The value of the fixed temperature threshold is set at\n                90 degrees C. This variable represents whether the actual temperature\n                is above the threshold (value is crossover(2)) or below the threshold\n                (value is normal(1)). If the temperature is exactly the same as the\n                fixed temperature threshold, the value of this variable reads as\n                normal(1).')
sbTempSettableThresholdStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 4, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("crossover", 2), ("undefined", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sbTempSettableThresholdStatus.setStatus('current')
if mibBuilder.loadTexts: sbTempSettableThresholdStatus.setDescription('The temperature status with regard to the settable temperature\n                threshold. The value of the settable temperature threshold is set by\n                management intervention. This variable represents whether the actual\n                temperature is above the threshold (value is crossover(2)) or below\n                the threshold (value is normal(1)). When the value of this variable is\n                undefined(3), no settable threshold has been specified and the value\n                of sbTempSettableThreshold is not used.')
sbTempSettableThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 4, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbTempSettableThreshold.setStatus('current')
if mibBuilder.loadTexts: sbTempSettableThreshold.setDescription('The value of the settable temperature threshold. This can be set\n                independently for each temperature entry. The value of this threshold\n                is only valid when sbTempSettableThresholdStatus is not set to\n                undefined(3).')
sbTempFixedThreshold = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 4, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sbTempFixedThreshold.setStatus('current')
if mibBuilder.loadTexts: sbTempFixedThreshold.setDescription('The value of the fixed temperature threshold. This value is fixed for\n                both CPU cards, and cannot be set.')
acceleratorTemperature = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 4, 3))
acceleratorTemperatureTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 4, 3, 0))
acceleratorTemperatureStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 4, 3, 0, 1)).setObjects(("AT-SYSINFO-MIB", "acceleratorTemperatureStatus"))
if mibBuilder.loadTexts: acceleratorTemperatureStatusTrap.setStatus('current')
if mibBuilder.loadTexts: acceleratorTemperatureStatusTrap.setDescription('Generated when the temperature status of the device changes.')
acceleratorTemperatureSupported = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 4, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notSupported", 0), ("supported", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acceleratorTemperatureSupported.setStatus('current')
if mibBuilder.loadTexts: acceleratorTemperatureSupported.setDescription('The value supported indicates whether accelerator card temperature\n                is displayed by the device. The value notSupported indicates the\n                device does not display specific accelerator card temperature\n                information.')
acceleratorTemperatureActualTemp = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 4, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acceleratorTemperatureActualTemp.setStatus('current')
if mibBuilder.loadTexts: acceleratorTemperatureActualTemp.setDescription("The current temperature of product's base board, in degrees Celsius. A device\n                which doesn't support this group will return the value 0 for this variable.")
acceleratorTemperatureStatus = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 4, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("notOk", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acceleratorTemperatureStatus.setStatus('current')
if mibBuilder.loadTexts: acceleratorTemperatureStatus.setDescription('The status of temperature in this device. ok indicates the\n                temperature is below the threshold temperature or the device\n                is not capable of monitoring temperature. notOk indicates the\n                temperature is being monitored and is currently above the\n                threshold temperature (displayed in generalTemperatureThreshold).')
acceleratorTemperatureThreshold = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 4, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acceleratorTemperatureThreshold.setStatus('current')
if mibBuilder.loadTexts: acceleratorTemperatureThreshold.setDescription('The temperature threshold for the device. If the\n                temperature of the device rises above this threshold\n                generalTemeratureStatus will indicate a notOk status.')
atContactDetails = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atContactDetails.setStatus('current')
if mibBuilder.loadTexts: atContactDetails.setDescription('The contact details for Allied Telesis inc.')
bbrNvs = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 6))
bbrNvsTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 6, 0))
bbrNvsReinitialiseTrap = NotificationType((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 6, 0, 1))
if mibBuilder.loadTexts: bbrNvsReinitialiseTrap.setStatus('current')
if mibBuilder.loadTexts: bbrNvsReinitialiseTrap.setDescription("Generated at boot when the device detects that the BBR has been\n                corrupted and reinitialised. This can happen if the device's BBR\n                battery has run down, and the device has been powered off, then on.")
memory = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 7))
freeMemory = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 7, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: freeMemory.setStatus('current')
if mibBuilder.loadTexts: freeMemory.setDescription('Percentage of free memory still available on device')
totalBuffers = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalBuffers.setStatus('current')
if mibBuilder.loadTexts: totalBuffers.setDescription('Total number of buffers available on device')
lowMemoryTrap = NotificationType((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 7, 11)).setObjects(("AT-SYSINFO-MIB", "freeMemory"), ("AT-SYSINFO-MIB", "totalBuffers"))
if mibBuilder.loadTexts: lowMemoryTrap.setStatus('current')
if mibBuilder.loadTexts: lowMemoryTrap.setDescription("A low memory trap is generated when a router's memory\n                has gone below a certain level.")
realTimeClockStatus = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("invalid", 0), ("normal", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: realTimeClockStatus.setStatus('current')
if mibBuilder.loadTexts: realTimeClockStatus.setDescription('Shows the status of the real time clock')
hostId = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hostId.setStatus('current')
if mibBuilder.loadTexts: hostId.setDescription('Host Identifier of this device')
atPortInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 14))
atPortInfoTransceiverTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 14, 1), )
if mibBuilder.loadTexts: atPortInfoTransceiverTable.setStatus('current')
if mibBuilder.loadTexts: atPortInfoTransceiverTable.setDescription('A table of information about the transceiver of a interface.')
atPortInfoTransceiverEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 14, 1, 1), ).setIndexNames((0, "AT-SYSINFO-MIB", "atPortInfoTransceiverifIndex"))
if mibBuilder.loadTexts: atPortInfoTransceiverEntry.setStatus('current')
if mibBuilder.loadTexts: atPortInfoTransceiverEntry.setDescription('The description, the transceiver type of a interface.')
atPortInfoTransceiverifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 14, 1, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atPortInfoTransceiverifIndex.setStatus('current')
if mibBuilder.loadTexts: atPortInfoTransceiverifIndex.setDescription('The ifIndex for the interface represented\n                by this entry of the interfaces table.')
atPortInfoTransceiverType = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 14, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41))).clone(namedValues=NamedValues(("rj45", 1), ("sfp-px", 2), ("sfp-bx10", 3), ("sfp-fx", 4), ("sfp-100base-lx", 5), ("sfp-t", 6), ("sfp-cx", 7), ("sfp-zx-cwdm", 8), ("sfp-lx", 9), ("sfp-sx", 10), ("sfp-oc3-lr", 11), ("sfp-oc3-ir", 12), ("sfp-oc3-mm", 13), ("xfp-srsw", 14), ("xfp-lrlw", 15), ("xfp-erew", 16), ("xfp-sr", 17), ("xfp-lr", 18), ("xfp-er", 19), ("xfp-lrm", 20), ("xfp-sw", 21), ("xfp-lw", 22), ("xfp-ew", 23), ("unknown", 24), ("empty", 25), ("sfpp-sr", 26), ("sfpp-lr", 27), ("sfpp-er", 28), ("sfpp-lrm", 29), ("inf-1-x-copper-pasv", 30), ("inf-1-x-copper-actv", 31), ("inf-1-x-lx", 32), ("inf-1-x-sx", 33), ("cx4", 34), ("inf-4-x-copper-pasv", 35), ("qsfp-sr", 36), ("qsfp-lr", 37), ("qsfp-er", 38), ("sfpp-t", 39), ("sfpp-zr", 40), ("qsfp28-sr", 41)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atPortInfoTransceiverType.setStatus('current')
if mibBuilder.loadTexts: atPortInfoTransceiverType.setDescription('This object indicates the type of transceiver on a interface.')
atPortRenumberEvents = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 14, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atPortRenumberEvents.setStatus('current')
if mibBuilder.loadTexts: atPortRenumberEvents.setDescription('The number of times that port number values (represented by the\n                dot1dBasePort object in BRIDGE-MIB), have been re-assigned due to\n                stack member leave/join events or XEM hot-swap events, since the\n                system was initialised.')
mibBuilder.exportSymbols("AT-SYSINFO-MIB", restartNotification=restartNotification, totalBuffers=totalBuffers, atPortInfoTransceiverType=atPortInfoTransceiverType, sbTempFixedThresholdStatus=sbTempFixedThresholdStatus, fanAndPsPsuPower=fanAndPsPsuPower, acceleratorTemperatureThreshold=acceleratorTemperatureThreshold, cpuUtilisationStackAvgLastMinute=cpuUtilisationStackAvgLastMinute, sbTempSettableThresholdStatus=sbTempSettableThresholdStatus, acceleratorTemperatureStatus=acceleratorTemperatureStatus, fanAndPsPsuTemperature=fanAndPsPsuTemperature, restartGroup=restartGroup, fanAndPsMainFanStatus=fanAndPsMainFanStatus, generalTemperatureSupported=generalTemperatureSupported, acceleratorTemperatureStatusTrap=acceleratorTemperatureStatusTrap, fanAndPsRedundantPSUStatus=fanAndPsRedundantPSUStatus, fanAndPsPsuNumber=fanAndPsPsuNumber, cpuUtilisationMax=cpuUtilisationMax, fanAndPsRpsMonitoringStatus=fanAndPsRpsMonitoringStatus, memory=memory, fanAndPsAccelFanStatusTrap=fanAndPsAccelFanStatusTrap, generalTemperatureThreshold=generalTemperatureThreshold, fanAndPsRedundantFanStatus=fanAndPsRedundantFanStatus, freeMemory=freeMemory, acceleratorTemperatureActualTemp=acceleratorTemperatureActualTemp, cpuUtilisationAvgLastSecond=cpuUtilisationAvgLastSecond, fanAndPsMainPSUStatusTrap=fanAndPsMainPSUStatusTrap, atPortInfoTransceiverTable=atPortInfoTransceiverTable, cpuUtilisationAvgLastMinute=cpuUtilisationAvgLastMinute, fanAndPs=fanAndPs, atPortInfoTransceiverEntry=atPortInfoTransceiverEntry, fanAndPsTrap=fanAndPsTrap, fanAndPsAccelFanStatus=fanAndPsAccelFanStatus, fanAndPsRpsConnectionStatus=fanAndPsRpsConnectionStatus, sbTemperatureTrap=sbTemperatureTrap, fanAndPsMainMonitoringStatusTrap=fanAndPsMainMonitoringStatusTrap, restartCause=restartCause, cpuUtilisationStackTable=cpuUtilisationStackTable, generalTemperatureActualTemp=generalTemperatureActualTemp, cpuUtilisationStackAvgLast10Seconds=cpuUtilisationStackAvgLast10Seconds, cpuUtilisationAvg=cpuUtilisationAvg, restartLog=restartLog, fanAndPsRedundantPSUStatusTrap=fanAndPsRedundantPSUStatusTrap, cpuUtilisationAvgLast5Minutes=cpuUtilisationAvgLast5Minutes, fanAndPsRpsConnectionTrap=fanAndPsRpsConnectionTrap, bbrNvsReinitialiseTrap=bbrNvsReinitialiseTrap, fanAndPsFanTrayPresent=fanAndPsFanTrayPresent, cpu=cpu, fanAndPsRedundantFanStatusTrap=fanAndPsRedundantFanStatusTrap, sbTempFixedThresholdTrap=sbTempFixedThresholdTrap, fanAndPsPsuPresent=fanAndPsPsuPresent, cpuUtilisationStackId=cpuUtilisationStackId, atPortInfoTransceiverifIndex=atPortInfoTransceiverifIndex, fanAndPsFanTrayStatus=fanAndPsFanTrayStatus, acceleratorTemperatureTrap=acceleratorTemperatureTrap, lowMemoryTrap=lowMemoryTrap, cpuUtilisationStackMaxLast5Minutes=cpuUtilisationStackMaxLast5Minutes, PYSNMP_MODULE_ID=sysinfo, sbTempActualTemperature=sbTempActualTemperature, sbTempSettableThreshold=sbTempSettableThreshold, sbTempFixedThreshold=sbTempFixedThreshold, fanAndPsFanTrayStatusTrap=fanAndPsFanTrayStatusTrap, generalTemperature=generalTemperature, atPortRenumberEvents=atPortRenumberEvents, sbTempSettableThresholdTrap=sbTempSettableThresholdTrap, fanAndPsTemperatureStatus=fanAndPsTemperatureStatus, restart=restart, generalTemperatureStatusTrap=generalTemperatureStatusTrap, bbrNvs=bbrNvs, fanAndPsFanTrayPresentTrap=fanAndPsFanTrayPresentTrap, atContactDetails=atContactDetails, sbTempTable=sbTempTable, cpuUtilisationAvgLast10Seconds=cpuUtilisationAvgLast10Seconds, realTimeClockStatus=realTimeClockStatus, fanAndPsPsuStatusEntry=fanAndPsPsuStatusEntry, fanAndPsPsuType=fanAndPsPsuType, sbTemperature=sbTemperature, sbTempIndex=sbTempIndex, fanAndPsPsuStatusTable=fanAndPsPsuStatusTable, cpuUtilisationMaxLast5Minutes=cpuUtilisationMaxLast5Minutes, cpuUtilisationStackMax=cpuUtilisationStackMax, sysTemperature=sysTemperature, sysinfo=sysinfo, atPortInfo=atPortInfo, cpuUtilisationStackAvgLast5Minutes=cpuUtilisationStackAvgLast5Minutes, fanAndPsMainMonitoringStatus=fanAndPsMainMonitoringStatus, acceleratorTemperature=acceleratorTemperature, cpuUtilisationStackAvgLastSecond=cpuUtilisationStackAvgLastSecond, fanAndPsMainFanStatusTrap=fanAndPsMainFanStatusTrap, acceleratorTemperatureSupported=acceleratorTemperatureSupported, fanAndPsPsuFan=fanAndPsPsuFan, cpuUtilisationStackAvg=cpuUtilisationStackAvg, sbTempEntry=sbTempEntry, generalTemperatureTrap=generalTemperatureTrap, fanAndPsMainPSUStatus=fanAndPsMainPSUStatus, hostId=hostId, cpuUtilisationStackEntry=cpuUtilisationStackEntry, fanAndPsTemperatureStatusTrap=fanAndPsTemperatureStatusTrap, generalTemperatureStatus=generalTemperatureStatus, bbrNvsTrap=bbrNvsTrap)
