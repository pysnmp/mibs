#
# PySNMP MIB module F3-BRIDGE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/adva/F3-BRIDGE-MIB
# Produced by pysmi-1.1.12 at Sat Jul  6 01:05:28 2024
# On host fv-az1532-138 platform Linux version 6.5.0-1022-azure by user runner
# Using Python version 3.10.14 (main, Jun 20 2024, 15:20:03) [GCC 11.4.0]
#
fsp150cm, = mibBuilder.importSymbols("ADVA-MIB", "fsp150cm")
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint")
PerfCounter64, = mibBuilder.importSymbols("CM-COMMON-MIB", "PerfCounter64")
shelfIndex, neIndex, slotIndex, networkElementEntry = mibBuilder.importSymbols("CM-ENTITY-MIB", "shelfIndex", "neIndex", "slotIndex", "networkElementEntry")
cmFlowEntry, cmMPFlowIndex, cmFlowIndex, cmEthernetAccPortIndex = mibBuilder.importSymbols("CM-FACILITY-MIB", "cmFlowEntry", "cmMPFlowIndex", "cmFlowIndex", "cmEthernetAccPortIndex")
cmFlowHistoryEntry, cmFlowStatsEntry = mibBuilder.importSymbols("CM-PERFORMANCE-MIB", "cmFlowHistoryEntry", "cmFlowStatsEntry")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
ObjectIdentity, Counter64, iso, Bits, MibIdentifier, Counter32, Integer32, ModuleIdentity, TimeTicks, Gauge32, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Counter64", "iso", "Bits", "MibIdentifier", "Counter32", "Integer32", "ModuleIdentity", "TimeTicks", "Gauge32", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "NotificationType")
TruthValue, RowStatus, TextualConvention, VariablePointer, MacAddress, StorageType, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "RowStatus", "TextualConvention", "VariablePointer", "MacAddress", "StorageType", "DisplayString")
f3BridgeMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2544, 1, 12, 26))
f3BridgeMIB.setRevisions(('2012-10-09 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: f3BridgeMIB.setRevisionsDescriptions(('\n         Notes from release 201210090000Z,\n         (1)MIB version ready for release FSP150CC 5.6CC.',))
if mibBuilder.loadTexts: f3BridgeMIB.setLastUpdated('201209130000Z')
if mibBuilder.loadTexts: f3BridgeMIB.setOrganization('ADVA Optical Networking')
if mibBuilder.loadTexts: f3BridgeMIB.setContactInfo('        Jakub Zalewski\n                     ADVA Optical Networking, Inc.\n                Tel: +48 58 7716 411\n             E-mail: jzalewski@advaoptical.com\n             Postal: ul. Slaska 35/37\n                     81-310 Gdynia, Poland')
if mibBuilder.loadTexts: f3BridgeMIB.setDescription('This module defines the Bridge MIB definitions \n             used by the F3 (FSP150CM/CC) product lines.  \n             Copyright (C) ADVA Optical Networking.')
class LearningControl(TextualConvention, Integer32):
    description = 'Learning Control:\n            none      - The forwarding function of the Flow does not dynamically learn.\n            macbased  - The forwarding function of the Flow dynamically learns based \n                        on MAC address.\n            flowbased - The forwarding function of the Flow dynamically learns based on \n                        EVC Membership.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("none", 1), ("macbased", 2), ("flowbased", 3))

class ProtectLearningControl(TextualConvention, Integer32):
    description = 'Protect Learning Control:\n            none     -  Learned entries for a Flow with the parent Port \n                        as a destination can be updated to a different Port.\n            discard  -  Learned entries for a Flow with the parent Port \n                        as a destination cannot be updated to a different Port.\n                        Frames received that would update the learned entry are discarded.\n            block    -  Learned entries for a Flow with the parent Port \n                        as a destination cannot be updated to a different Port.\n                        After receiving a frame that would update a learned entry, \n                        that frame is discarded, the Flow adds a secondary \n                        state of BLOCKD, and all subsequent frames received on that \n                        port that match the Flow membership shall be discarded until \n                        the secondary state of BLCKD is cleared.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("none", 1), ("discard", 2), ("block", 3))

class LearningAction(TextualConvention, Integer32):
    description = 'Learning Action:\n            block   - a frame with a matching destination MAC address is not forwarded\n            forward - a frame with a matching desintation MAC address is forwarded \n                      to the destination Port\n        '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("block", 1), ("forward", 2))

class LearningEntryType(TextualConvention, Integer32):
    description = 'Learning Entry Type'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("static", 1), ("dynamic", 2))

class FlowLearningConfigAction(TextualConvention, Integer32):
    description = 'Learning Action:\n            noAction        - No Action\n            flushFwdTable   - Removes all dynamic entries from the Forwarding table\n                              of a Flow.\n            clearBlock      - removes the secondary state of BLCKD and transitions \n                              the flow to a state where frames are not blocked\n            resetAgingTimer - reset the aging timer\n            '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("noAction", 1), ("flushFwdTable", 2), ("clearBlock", 3), ("resetAgingTimer", 4))

class RetrieveMacAction(TextualConvention, Integer32):
    description = 'Retrieve Mac Address Action'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("notApllicable", 0), ("retrieveMac", 1))

f3BridgeConfigObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 26, 1))
f3BridgeStatsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 26, 2))
f3BridgeConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 26, 3))
f3FlowLearningConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 26, 1, 1), )
if mibBuilder.loadTexts: f3FlowLearningConfigTable.setStatus('current')
if mibBuilder.loadTexts: f3FlowLearningConfigTable.setDescription('This table extends cmFlowTable to provide parameters for MAC Table control\n             configuration.')
f3FlowLearningConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 26, 1, 1, 1), )
cmFlowEntry.registerAugmentions(("F3-BRIDGE-MIB", "f3FlowLearningConfigEntry"))
f3FlowLearningConfigEntry.setIndexNames(*cmFlowEntry.getIndexNames())
if mibBuilder.loadTexts: f3FlowLearningConfigEntry.setStatus('current')
if mibBuilder.loadTexts: f3FlowLearningConfigEntry.setDescription('A conceptual row in the f3FlowLearningConfigTable.')
f3FlowLearningConfigAccIfLearningCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 26, 1, 1, 1, 1), LearningControl()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3FlowLearningConfigAccIfLearningCtrl.setStatus('current')
if mibBuilder.loadTexts: f3FlowLearningConfigAccIfLearningCtrl.setDescription('This object allows configuring Learning Control on Access Interface of \n          this Flow.')
f3FlowLearningConfigNetIfLearningCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 26, 1, 1, 1, 2), LearningControl()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3FlowLearningConfigNetIfLearningCtrl.setStatus('current')
if mibBuilder.loadTexts: f3FlowLearningConfigNetIfLearningCtrl.setDescription('This object allows configuring Learning Control on Network Interface of \n          this Flow.')
f3FlowLearningConfigAccMaxFwdEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 26, 1, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3FlowLearningConfigAccMaxFwdEntries.setStatus('current')
if mibBuilder.loadTexts: f3FlowLearningConfigAccMaxFwdEntries.setDescription('This object allows configuring the maximum number of Forwarding Entires in\n          for the Access Interface Forwarding Table of this Flow.')
f3FlowLearningConfigNetMaxFwdEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 26, 1, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3FlowLearningConfigNetMaxFwdEntries.setStatus('current')
if mibBuilder.loadTexts: f3FlowLearningConfigNetMaxFwdEntries.setDescription('This object allows configuring the maximum number of Forwarding Entires in\n          for the Network Interface Forwarding Table of this Flow.')
f3FlowLearningConfigAccIfProtectLearningCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 26, 1, 1, 1, 5), ProtectLearningControl()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3FlowLearningConfigAccIfProtectLearningCtrl.setStatus('current')
if mibBuilder.loadTexts: f3FlowLearningConfigAccIfProtectLearningCtrl.setDescription('This object allows configuring Learning Control on Access Interface of \n          this Flow.')
f3FlowLearningConfigNetIfProtectLearningCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 26, 1, 1, 1, 6), ProtectLearningControl()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3FlowLearningConfigNetIfProtectLearningCtrl.setStatus('current')
if mibBuilder.loadTexts: f3FlowLearningConfigNetIfProtectLearningCtrl.setDescription('This object allows configuring Learning Control on Network Interface of \n          this Flow.')
f3FlowLearningConfigAgingTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 26, 1, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3FlowLearningConfigAgingTimer.setStatus('current')
if mibBuilder.loadTexts: f3FlowLearningConfigAgingTimer.setDescription('This object allows configuration of the Aging Timer of this Flow in seconds.\n          Forwarding Entry will be removed from the forwarding table after \n          an inactivity time represented by this entry. \n          Setting the value of 0 disables aging.')
f3FlowLearningConfigTableFullAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 26, 1, 1, 1, 8), LearningAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3FlowLearningConfigTableFullAction.setStatus('current')
if mibBuilder.loadTexts: f3FlowLearningConfigTableFullAction.setDescription("This object allows configuration of Action on ingress frames when the number \n          of forwarding table entires has reached the maximum Fowarding Table size.\n          block - A frame with a Source MAC address not in the MAC Table \n                    will be discarded.\n          forward - A frame with a Source MAC address not in the MAC table \n                    will not be learned and will be forwarded based on \n                    Destination MAC address of the frame.\n          Only applicable when f3FlowLearningConfigAccIfLearningCtrl is set to 'macbased' \n          or when =f3FlowLearningConfigNetIfLearningCtrl is set to 'macbased'.")
f3FlowLearningConfigAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 26, 1, 1, 1, 9), FlowLearningConfigAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3FlowLearningConfigAction.setStatus('current')
if mibBuilder.loadTexts: f3FlowLearningConfigAction.setDescription('This objects allows performing user action on Flow Learning Table.')
f3FlowStaticFwdEntTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 26, 1, 2), )
if mibBuilder.loadTexts: f3FlowStaticFwdEntTable.setStatus('current')
if mibBuilder.loadTexts: f3FlowStaticFwdEntTable.setDescription('This table allows configuration of Static Forwarding Entries in the\n             Forwarding Table of a Flow.')
f3FlowStaticFwdEntEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 26, 1, 2, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetAccPortIndex"), (0, "CM-FACILITY-MIB", "cmFlowIndex"), (1, "F3-BRIDGE-MIB", "f3FlowStaticFwdEntDestMac"))
if mibBuilder.loadTexts: f3FlowStaticFwdEntEntry.setStatus('current')
if mibBuilder.loadTexts: f3FlowStaticFwdEntEntry.setDescription('A conceptual row in the f3FlowStaticFwdEntTable.')
f3FlowStaticFwdEntDestMac = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 26, 1, 2, 1, 1), MacAddress())
if mibBuilder.loadTexts: f3FlowStaticFwdEntDestMac.setStatus('current')
if mibBuilder.loadTexts: f3FlowStaticFwdEntDestMac.setDescription('The MAC address for matching a frame destination MAC address.')
f3FlowStaticFwdEntDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 26, 1, 2, 1, 2), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3FlowStaticFwdEntDestPort.setStatus('current')
if mibBuilder.loadTexts: f3FlowStaticFwdEntDestPort.setDescription('This object allows configuring the destination port for a frame \n          with a matching destination MAC address as specified in f3FlowStaticFwdEntDestMac.')
f3FlowStaticFwdEntAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 26, 1, 2, 1, 3), LearningAction()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3FlowStaticFwdEntAction.setStatus('current')
if mibBuilder.loadTexts: f3FlowStaticFwdEntAction.setDescription('This object allows configuring the action for this Forwarding Entry.')
f3FlowStaticFwdEntStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 26, 1, 2, 1, 4), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3FlowStaticFwdEntStorageType.setStatus('current')
if mibBuilder.loadTexts: f3FlowStaticFwdEntStorageType.setDescription('The storage type for this conceptual row.')
f3FlowStaticFwdEntRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 26, 1, 2, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3FlowStaticFwdEntRowStatus.setStatus('current')
if mibBuilder.loadTexts: f3FlowStaticFwdEntRowStatus.setDescription('The status of this row.  An entry MUST NOT exist in the \n            active state unless all objects in the entry have an \n            appropriate value, as described\n            in the description clause for each writable object.\n\n            The values of f3FlowStaticFwdEntRowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            f3StaticFwdRowStatus value as createAndGo(4).\n            Upon successful row creation, this object has a\n            value of active(1).\n\n            The f3StaticFwdRowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
f3FlowStaticFwdValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 26, 1, 2, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3FlowStaticFwdValid.setStatus('current')
if mibBuilder.loadTexts: f3FlowStaticFwdValid.setDescription('This object represents Static FDB entry valid flag.')
f3FlowFdbTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 26, 1, 3), )
if mibBuilder.loadTexts: f3FlowFdbTable.setStatus('current')
if mibBuilder.loadTexts: f3FlowFdbTable.setDescription('This table allows viewing Forwarding Table of a Flow.')
f3FlowFdbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 26, 1, 3, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetAccPortIndex"), (0, "CM-FACILITY-MIB", "cmFlowIndex"), (1, "F3-BRIDGE-MIB", "f3FlowFdbDestMac"))
if mibBuilder.loadTexts: f3FlowFdbEntry.setStatus('current')
if mibBuilder.loadTexts: f3FlowFdbEntry.setDescription('A conceptual row in the f3FlowFdbTable.')
f3FlowFdbDestMac = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 26, 1, 3, 1, 1), MacAddress())
if mibBuilder.loadTexts: f3FlowFdbDestMac.setStatus('current')
if mibBuilder.loadTexts: f3FlowFdbDestMac.setDescription('The MAC address for matching a frame destination MAC address.')
f3FlowFdbDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 26, 1, 3, 1, 2), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3FlowFdbDestPort.setStatus('current')
if mibBuilder.loadTexts: f3FlowFdbDestPort.setDescription('This object represents the destination port for a frame \n          with a matching destination MAC address as specified in f3FlowFdbDestMac.')
f3FlowFdbAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 26, 1, 3, 1, 3), LearningAction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3FlowFdbAction.setStatus('current')
if mibBuilder.loadTexts: f3FlowFdbAction.setDescription('This object represents the action for this Forwarding Entry.')
f3FlowFdbEntryType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 26, 1, 3, 1, 4), LearningEntryType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3FlowFdbEntryType.setStatus('current')
if mibBuilder.loadTexts: f3FlowFdbEntryType.setDescription('This object represents the FDB entry type.')
f3MPFlowStaticFwdTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 26, 1, 4), )
if mibBuilder.loadTexts: f3MPFlowStaticFwdTable.setStatus('current')
if mibBuilder.loadTexts: f3MPFlowStaticFwdTable.setDescription('A list of entries corresponding to Fwd.')
f3MPFlowStaticFwdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 26, 1, 4, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-FACILITY-MIB", "cmMPFlowIndex"), (0, "F3-BRIDGE-MIB", "f3MPFlowStaticFwdMacAddress"))
if mibBuilder.loadTexts: f3MPFlowStaticFwdEntry.setStatus('current')
if mibBuilder.loadTexts: f3MPFlowStaticFwdEntry.setDescription('A conceptual row in the f3MPFlowFwdTable.')
f3MPFlowStaticFwdMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 26, 1, 4, 1, 1), MacAddress())
if mibBuilder.loadTexts: f3MPFlowStaticFwdMacAddress.setStatus('current')
if mibBuilder.loadTexts: f3MPFlowStaticFwdMacAddress.setDescription('This object describes Assigned/learned MAC address.')
f3MPFlowStaticFwdFP = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 26, 1, 4, 1, 2), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3MPFlowStaticFwdFP.setStatus('current')
if mibBuilder.loadTexts: f3MPFlowStaticFwdFP.setDescription('This object describes Assigned/learned MAC address related to.')
f3MPFlowStaticFwdControlAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 26, 1, 4, 1, 3), LearningAction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3MPFlowStaticFwdControlAction.setStatus('current')
if mibBuilder.loadTexts: f3MPFlowStaticFwdControlAction.setDescription('The action is read only as Forward that means the MAC \n         address is always forwarded.')
f3MPFlowStaticFwdValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 26, 1, 4, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3MPFlowStaticFwdValid.setStatus('current')
if mibBuilder.loadTexts: f3MPFlowStaticFwdValid.setDescription('This Object describe it whether valid.')
f3MPFlowStaticFwdStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 26, 1, 4, 1, 5), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3MPFlowStaticFwdStorageType.setStatus('current')
if mibBuilder.loadTexts: f3MPFlowStaticFwdStorageType.setDescription('The storage type for this conceptual row.')
f3MPFlowStaticFwdRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 26, 1, 4, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3MPFlowStaticFwdRowStatus.setStatus('current')
if mibBuilder.loadTexts: f3MPFlowStaticFwdRowStatus.setDescription('The status of this row.\n \t        An entry MUST NOT exist in the active state unless all\n \t        objects in the entry have an appropriate value, as described\n \t        in the description clause for each writable object.\n \t        \n \t        The values of f3MPFlowFwdRowStatus supported are\n \t        createAndGo(4) and destroy(6).  All mandatory attributes\n \t        must be specified in a single SNMP SET request with\n \t        cmFlowRowStatus value as createAndGo(4).\n \t        Upon successful row creation, this object has a\n \t        value of active(1).\n \t        \n \t        The f3MPFlowFwdRowStatus object may be modified if\n \t        the associated instance of this object is equal to active(1).\n \t        \n \t        Note that flow creation and deletion is only supported\n \t        with access port in connection-oriented evpl mode.')
f3MPFlowFDBTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 26, 1, 5), )
if mibBuilder.loadTexts: f3MPFlowFDBTable.setStatus('current')
if mibBuilder.loadTexts: f3MPFlowFDBTable.setDescription('A list of entries corresponding to FDB.')
f3MPFlowFDBEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 26, 1, 5, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-FACILITY-MIB", "cmMPFlowIndex"), (0, "F3-BRIDGE-MIB", "f3MPFlowFDBMacAddress"))
if mibBuilder.loadTexts: f3MPFlowFDBEntry.setStatus('current')
if mibBuilder.loadTexts: f3MPFlowFDBEntry.setDescription('A conceptual row in the f3MPFlowFwdTable.')
f3MPFlowFDBMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 26, 1, 5, 1, 1), MacAddress())
if mibBuilder.loadTexts: f3MPFlowFDBMacAddress.setStatus('current')
if mibBuilder.loadTexts: f3MPFlowFDBMacAddress.setDescription('This object describes Assigned/learned MAC address.')
f3MPFlowFDBFP = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 26, 1, 5, 1, 2), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3MPFlowFDBFP.setStatus('current')
if mibBuilder.loadTexts: f3MPFlowFDBFP.setDescription('This object describes Assigned/learned MAC address related to.')
f3MPFlowFDBType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 26, 1, 5, 1, 3), LearningEntryType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3MPFlowFDBType.setStatus('current')
if mibBuilder.loadTexts: f3MPFlowFDBType.setDescription('This object describes the static or dynamic type for the relate mac.')
f3MPFlowFDBControlAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 26, 1, 5, 1, 4), LearningAction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3MPFlowFDBControlAction.setStatus('current')
if mibBuilder.loadTexts: f3MPFlowFDBControlAction.setDescription('The action is read only as Forward that means the MAC \n         address is always forwarded.')
f3FwdTSizeProfileTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 26, 1, 6), )
if mibBuilder.loadTexts: f3FwdTSizeProfileTable.setStatus('current')
if mibBuilder.loadTexts: f3FwdTSizeProfileTable.setDescription('A list of entries corresponding to FwdTSizeProfile.')
f3FwdTSizeProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 26, 1, 6, 1), ).setIndexNames((0, "F3-BRIDGE-MIB", "f3FwdTSizeProfileIndex"))
if mibBuilder.loadTexts: f3FwdTSizeProfileEntry.setStatus('current')
if mibBuilder.loadTexts: f3FwdTSizeProfileEntry.setDescription('A conceptual row in the f3FwdTSizeProfileTable.')
f3FwdTSizeProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 26, 1, 6, 1, 1), Integer32())
if mibBuilder.loadTexts: f3FwdTSizeProfileIndex.setStatus('current')
if mibBuilder.loadTexts: f3FwdTSizeProfileIndex.setDescription('An integer index value used to uniquely identify this f3FwdTSizeProfileEntry.')
f3FwdTSizeProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 26, 1, 6, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3FwdTSizeProfileName.setStatus('current')
if mibBuilder.loadTexts: f3FwdTSizeProfileName.setDescription('his object allows SNMP management entities to provide a\n \t        name identifier with the f3FwdTSizeProfileEntry.')
f3FwdTSizeProfileTableSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 26, 1, 6, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3FwdTSizeProfileTableSize.setStatus('current')
if mibBuilder.loadTexts: f3FwdTSizeProfileTableSize.setDescription('This object descpribes Maximum number of MAC Table Entries for the profile.')
f3MultiGroupRegistrationTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 26, 1, 7), )
if mibBuilder.loadTexts: f3MultiGroupRegistrationTable.setStatus('current')
if mibBuilder.loadTexts: f3MultiGroupRegistrationTable.setDescription('A list of entries corresponding to MultiGroupRegistration.')
f3MultiGroupRegistrationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 26, 1, 7, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-FACILITY-MIB", "cmMPFlowIndex"), (0, "F3-BRIDGE-MIB", "f3MGRMulticastAddress"))
if mibBuilder.loadTexts: f3MultiGroupRegistrationEntry.setStatus('current')
if mibBuilder.loadTexts: f3MultiGroupRegistrationEntry.setDescription('A conceptual row in the f3MultiGroupRegistrationTable.')
f3MGRMulticastAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 26, 1, 7, 1, 1), MacAddress())
if mibBuilder.loadTexts: f3MGRMulticastAddress.setStatus('current')
if mibBuilder.loadTexts: f3MGRMulticastAddress.setDescription('This object describes MG Group MAC address.')
f3MGRFPList = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 26, 1, 7, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3MGRFPList.setStatus('current')
if mibBuilder.loadTexts: f3MGRFPList.setDescription('This object describes the fplist.')
f3MGRGroupAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 26, 1, 7, 1, 3), LearningAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3MGRGroupAction.setStatus('current')
if mibBuilder.loadTexts: f3MGRGroupAction.setDescription('it is only be forward for egx7.1.')
f3MGRGroupType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 26, 1, 7, 1, 4), LearningEntryType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3MGRGroupType.setStatus('current')
if mibBuilder.loadTexts: f3MGRGroupType.setDescription('This object describes the group type is static or dynamic.')
f3MGRGroupValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 26, 1, 7, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3MGRGroupValid.setStatus('current')
if mibBuilder.loadTexts: f3MGRGroupValid.setDescription('For GroupType as STATIC, if it is in Petra B, it is true; \n         Otherwise it is false.')
f3MGRGroupStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 26, 1, 7, 1, 6), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3MGRGroupStorageType.setStatus('current')
if mibBuilder.loadTexts: f3MGRGroupStorageType.setDescription('This is a conceptual row.')
f3MGRGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 26, 1, 7, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3MGRGroupRowStatus.setStatus('current')
if mibBuilder.loadTexts: f3MGRGroupRowStatus.setDescription('The status of this row.\n \t        An entry MUST NOT exist in the active state unless all\n \t        objects in the entry have an appropriate value, as described\n \t        in the description clause for each writable object.\n \t        \n \t        The values of f3MGRGroupRowStatus supported are\n \t        createAndGo(4) and destroy(6).  All mandatory attributes\n \t        must be specified in a single SNMP SET request with\n \t        cmFlowRowStatus value as createAndGo(4).\n \t        Upon successful row creation, this object has a\n \t        value of active(1).\n \t        \n \t        The f3MGRGroupRowStatus object may be modified if\n \t        the associated instance of this object is equal to active(1).\n \t        \n \t        Note that flow creation and deletion is only supported\n \t        with access port in connection-oriented evpl mode.')
f3MGRFPMemberTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 26, 1, 8), )
if mibBuilder.loadTexts: f3MGRFPMemberTable.setStatus('current')
if mibBuilder.loadTexts: f3MGRFPMemberTable.setDescription('A list of entries corresponding to MGRFPMember.')
f3MGRFPMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 26, 1, 8, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-FACILITY-MIB", "cmMPFlowIndex"), (0, "F3-BRIDGE-MIB", "f3MGRMulticastAddress"), (0, "F3-BRIDGE-MIB", "f3MGRFPIndex"))
if mibBuilder.loadTexts: f3MGRFPMemberEntry.setStatus('current')
if mibBuilder.loadTexts: f3MGRFPMemberEntry.setDescription('A conceptual row in the f3MGRFPMemberTable.')
f3MGRFPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 26, 1, 8, 1, 1), VariablePointer())
if mibBuilder.loadTexts: f3MGRFPIndex.setStatus('current')
if mibBuilder.loadTexts: f3MGRFPIndex.setDescription('This object describes the relate Flow point.')
f3MGRFPIndexRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 26, 1, 8, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3MGRFPIndexRowStatus.setStatus('current')
if mibBuilder.loadTexts: f3MGRFPIndexRowStatus.setDescription('The status of this row.\n \t        An entry MUST NOT exist in the active state unless all\n \t        objects in the entry have an appropriate value, as described\n \t        in the description clause for each writable object.\n \t        \n \t        The values of f3MGRFPIndexRowStatus supported are\n \t        createAndGo(4) and destroy(6).  All mandatory attributes\n \t        must be specified in a single SNMP SET request with\n \t        cmFlowRowStatus value as createAndGo(4).\n \t        Upon successful row creation, this object has a\n \t        value of active(1).\n \t        \n \t        The f3MGRFPIndexRowStatus object may be modified if\n \t        the associated instance of this object is equal to active(1).\n \t        \n \t        Note that flow creation and deletion is only supported\n \t        with access port in connection-oriented evpl mode.')
networkElementBridgeParamsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 26, 1, 9), )
if mibBuilder.loadTexts: networkElementBridgeParamsTable.setStatus('current')
if mibBuilder.loadTexts: networkElementBridgeParamsTable.setDescription('Entries may be auto discovered, or can be explicitly created by \n          SNMP Manager.  Each remotely discovered shelf is represented as \n          a row in this table.')
networkElementBridgeParamsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 26, 1, 9, 1), )
networkElementEntry.registerAugmentions(("F3-BRIDGE-MIB", "networkElementBridgeParamsEntry"))
networkElementBridgeParamsEntry.setIndexNames(*networkElementEntry.getIndexNames())
if mibBuilder.loadTexts: networkElementBridgeParamsEntry.setStatus('current')
if mibBuilder.loadTexts: networkElementBridgeParamsEntry.setDescription('A conceptual row in the networkElementBridgeParamsTable.')
neBridgeParamsRtrvMacAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 26, 1, 9, 1, 1), RetrieveMacAction()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: neBridgeParamsRtrvMacAction.setStatus('current')
if mibBuilder.loadTexts: neBridgeParamsRtrvMacAction.setDescription('Before reading infomation from f3MPFlowFDBTable, neBridgeParamsRtrvMacAction should be operate firstly.\n        This object can help enhance the effciency for reading f3MPFlowFDBTable.')
f3FlowLearningStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 26, 2, 1), )
if mibBuilder.loadTexts: f3FlowLearningStatsTable.setStatus('current')
if mibBuilder.loadTexts: f3FlowLearningStatsTable.setDescription('This table extends cmFlowStatsTable to provide parameters for Learninig \n             control configuration.')
f3FlowLearningStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 26, 2, 1, 1), )
cmFlowStatsEntry.registerAugmentions(("F3-BRIDGE-MIB", "f3FlowLearningStatsEntry"))
f3FlowLearningStatsEntry.setIndexNames(*cmFlowStatsEntry.getIndexNames())
if mibBuilder.loadTexts: f3FlowLearningStatsEntry.setStatus('current')
if mibBuilder.loadTexts: f3FlowLearningStatsEntry.setDescription('A conceptual row in the f3FlowLearningStatsTable.')
f3FlowLearningStatsMacTableFlushes = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 26, 2, 1, 1, 1), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3FlowLearningStatsMacTableFlushes.setStatus('current')
if mibBuilder.loadTexts: f3FlowLearningStatsMacTableFlushes.setDescription('Specifies current counter for number of times the MAC Table has been \n          flushed of Dynacmic entries.')
f3FlowLearningStatsFDStaticBlock = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 26, 2, 1, 1, 2), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3FlowLearningStatsFDStaticBlock.setStatus('current')
if mibBuilder.loadTexts: f3FlowLearningStatsFDStaticBlock.setDescription('Specifies current counter for number of frames discarded due to a \n          static entry in Mac Table.')
f3FlowLearningStatsFDHairPin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 26, 2, 1, 1, 3), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3FlowLearningStatsFDHairPin.setStatus('current')
if mibBuilder.loadTexts: f3FlowLearningStatsFDHairPin.setDescription('Specifies current counter for number of frames discarded because \n          destination Port is the ingress flowpoint or destination Port is in the \n          same Split Horizon Group.')
f3FlowLearningStatsFDNoDest = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 26, 2, 1, 1, 4), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3FlowLearningStatsFDNoDest.setStatus('current')
if mibBuilder.loadTexts: f3FlowLearningStatsFDNoDest.setDescription('Specifies current counter for number of frames discarded because no \n          destination Port is available due to \n          secondaryStates of BLCK.\n          The counter is currently not supported and will return 0 value.')
f3FlowLearningStatsMacTableDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 26, 2, 1, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3FlowLearningStatsMacTableDiscards.setStatus('current')
if mibBuilder.loadTexts: f3FlowLearningStatsMacTableDiscards.setDescription('Specifies current counter for total number of MAC Table entries that have \n          been or would have been learned, but have been failed due to a lack of \n          storage space in the Filtering Database.')
f3FlowLearningHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 26, 2, 2), )
if mibBuilder.loadTexts: f3FlowLearningHistoryTable.setStatus('current')
if mibBuilder.loadTexts: f3FlowLearningHistoryTable.setDescription('This table extends cmFlowHistoryTable to provide parameters for Learninig \n             control configuration.')
f3FlowLearningHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 26, 2, 2, 1), )
cmFlowHistoryEntry.registerAugmentions(("F3-BRIDGE-MIB", "f3FlowLearningHistoryEntry"))
f3FlowLearningHistoryEntry.setIndexNames(*cmFlowHistoryEntry.getIndexNames())
if mibBuilder.loadTexts: f3FlowLearningHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: f3FlowLearningHistoryEntry.setDescription('A conceptual row in the f3FlowLearningHistoryTable.')
f3FlowLearningHistoryMacTableFlushes = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 26, 2, 2, 1, 1), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3FlowLearningHistoryMacTableFlushes.setStatus('current')
if mibBuilder.loadTexts: f3FlowLearningHistoryMacTableFlushes.setDescription('Specifies history bin for number of times the MAC Table has been \n          flushed of Dynacmic entries.')
f3FlowLearningHistoryFDStaticBlock = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 26, 2, 2, 1, 2), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3FlowLearningHistoryFDStaticBlock.setStatus('current')
if mibBuilder.loadTexts: f3FlowLearningHistoryFDStaticBlock.setDescription('Specifies history bin for number of frames discarded due to a \n          static entry in Mac Table.')
f3FlowLearningHistoryFDHairPin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 26, 2, 2, 1, 3), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3FlowLearningHistoryFDHairPin.setStatus('current')
if mibBuilder.loadTexts: f3FlowLearningHistoryFDHairPin.setDescription('Specifies history bin for number of frames discarded because \n          destination Port is the ingress flowpoint or destination Port is in the \n          same Split Horizon Group.')
f3FlowLearningHistoryFDNoDest = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 26, 2, 2, 1, 4), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3FlowLearningHistoryFDNoDest.setStatus('current')
if mibBuilder.loadTexts: f3FlowLearningHistoryFDNoDest.setDescription('Specifies history bin for number of frames discarded because no \n          destination Port is available due to \n          secondaryStates of BLCK.\n          The counter is currently not supported and will return 0 value.')
f3FlowLearningHistoryMacTableDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 26, 2, 2, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3FlowLearningHistoryMacTableDiscards.setStatus('current')
if mibBuilder.loadTexts: f3FlowLearningHistoryMacTableDiscards.setDescription('Specifies history bin for total number of MAC Table entries that have \n          been or would have been learned, but have been failed due to a lack of \n          storage space in the Filtering Database.')
f3BridgeCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 26, 3, 1))
f3BridgeGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 26, 3, 2))
f3BridgeCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2544, 1, 12, 26, 3, 1, 1)).setObjects(("F3-BRIDGE-MIB", "f3FlowLearningConfigGroup"), ("F3-BRIDGE-MIB", "f3FlowStaticFwdEntGroup"), ("F3-BRIDGE-MIB", "f3FlowLearningStatsGroup"), ("F3-BRIDGE-MIB", "f3FlowLearningHistoryGroup"), ("F3-BRIDGE-MIB", "f3FlowFdbGroup"), ("F3-BRIDGE-MIB", "f3MPFlowStaticFwdGroup"), ("F3-BRIDGE-MIB", "f3MPFlowFDBGroup"), ("F3-BRIDGE-MIB", "f3FwdTSizeProfileGroup"), ("F3-BRIDGE-MIB", "f3MGGroupFPGroup"), ("F3-BRIDGE-MIB", "f3NetworkElementBridgeParamsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3BridgeCompliance = f3BridgeCompliance.setStatus('current')
if mibBuilder.loadTexts: f3BridgeCompliance.setDescription('Describes the requirements for conformance to the F3-BRIDGE-MIB compliance.')
f3FlowLearningConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 26, 3, 2, 1)).setObjects(("F3-BRIDGE-MIB", "f3FlowLearningConfigAccIfLearningCtrl"), ("F3-BRIDGE-MIB", "f3FlowLearningConfigNetIfLearningCtrl"), ("F3-BRIDGE-MIB", "f3FlowLearningConfigAccMaxFwdEntries"), ("F3-BRIDGE-MIB", "f3FlowLearningConfigNetMaxFwdEntries"), ("F3-BRIDGE-MIB", "f3FlowLearningConfigAccIfProtectLearningCtrl"), ("F3-BRIDGE-MIB", "f3FlowLearningConfigNetIfProtectLearningCtrl"), ("F3-BRIDGE-MIB", "f3FlowLearningConfigAgingTimer"), ("F3-BRIDGE-MIB", "f3FlowLearningConfigTableFullAction"), ("F3-BRIDGE-MIB", "f3FlowLearningConfigAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3FlowLearningConfigGroup = f3FlowLearningConfigGroup.setStatus('current')
if mibBuilder.loadTexts: f3FlowLearningConfigGroup.setDescription('A collection of objects used to manage the Flow Learning Config group.')
f3FlowStaticFwdEntGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 26, 3, 2, 2)).setObjects(("F3-BRIDGE-MIB", "f3FlowStaticFwdEntDestPort"), ("F3-BRIDGE-MIB", "f3FlowStaticFwdEntAction"), ("F3-BRIDGE-MIB", "f3FlowStaticFwdEntStorageType"), ("F3-BRIDGE-MIB", "f3FlowStaticFwdEntRowStatus"), ("F3-BRIDGE-MIB", "f3FlowStaticFwdValid"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3FlowStaticFwdEntGroup = f3FlowStaticFwdEntGroup.setStatus('current')
if mibBuilder.loadTexts: f3FlowStaticFwdEntGroup.setDescription('A collection of objects used to manage the Flow Static Forwarding group.')
f3FlowLearningStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 26, 3, 2, 3)).setObjects(("F3-BRIDGE-MIB", "f3FlowLearningStatsMacTableFlushes"), ("F3-BRIDGE-MIB", "f3FlowLearningStatsFDStaticBlock"), ("F3-BRIDGE-MIB", "f3FlowLearningStatsFDHairPin"), ("F3-BRIDGE-MIB", "f3FlowLearningStatsFDNoDest"), ("F3-BRIDGE-MIB", "f3FlowLearningStatsMacTableDiscards"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3FlowLearningStatsGroup = f3FlowLearningStatsGroup.setStatus('current')
if mibBuilder.loadTexts: f3FlowLearningStatsGroup.setDescription('A collection of objects used to manage the Flow Learning Statistics group.')
f3FlowLearningHistoryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 26, 3, 2, 4)).setObjects(("F3-BRIDGE-MIB", "f3FlowLearningHistoryMacTableFlushes"), ("F3-BRIDGE-MIB", "f3FlowLearningHistoryFDStaticBlock"), ("F3-BRIDGE-MIB", "f3FlowLearningHistoryFDHairPin"), ("F3-BRIDGE-MIB", "f3FlowLearningHistoryFDNoDest"), ("F3-BRIDGE-MIB", "f3FlowLearningHistoryMacTableDiscards"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3FlowLearningHistoryGroup = f3FlowLearningHistoryGroup.setStatus('current')
if mibBuilder.loadTexts: f3FlowLearningHistoryGroup.setDescription('A collection of objects used to manage the Flow Learning History group.')
f3FlowFdbGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 26, 3, 2, 5)).setObjects(("F3-BRIDGE-MIB", "f3FlowFdbDestPort"), ("F3-BRIDGE-MIB", "f3FlowFdbAction"), ("F3-BRIDGE-MIB", "f3FlowFdbEntryType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3FlowFdbGroup = f3FlowFdbGroup.setStatus('current')
if mibBuilder.loadTexts: f3FlowFdbGroup.setDescription('A collection of objects used to manage the Flow Forwarding group.')
f3MPFlowStaticFwdGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 26, 3, 2, 6)).setObjects(("F3-BRIDGE-MIB", "f3MPFlowStaticFwdMacAddress"), ("F3-BRIDGE-MIB", "f3MPFlowStaticFwdFP"), ("F3-BRIDGE-MIB", "f3MPFlowStaticFwdControlAction"), ("F3-BRIDGE-MIB", "f3MPFlowStaticFwdValid"), ("F3-BRIDGE-MIB", "f3MPFlowStaticFwdStorageType"), ("F3-BRIDGE-MIB", "f3MPFlowStaticFwdRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3MPFlowStaticFwdGroup = f3MPFlowStaticFwdGroup.setStatus('current')
if mibBuilder.loadTexts: f3MPFlowStaticFwdGroup.setDescription('A collection of objects used to manage the MPFlow Static Fwd group.')
f3MPFlowFDBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 26, 3, 2, 7)).setObjects(("F3-BRIDGE-MIB", "f3MPFlowFDBMacAddress"), ("F3-BRIDGE-MIB", "f3MPFlowFDBFP"), ("F3-BRIDGE-MIB", "f3MPFlowFDBType"), ("F3-BRIDGE-MIB", "f3MPFlowFDBControlAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3MPFlowFDBGroup = f3MPFlowFDBGroup.setStatus('current')
if mibBuilder.loadTexts: f3MPFlowFDBGroup.setDescription('A collection of objects used to manage the MPFlow FDB group.')
f3FwdTSizeProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 26, 3, 2, 8)).setObjects(("F3-BRIDGE-MIB", "f3FwdTSizeProfileIndex"), ("F3-BRIDGE-MIB", "f3FwdTSizeProfileName"), ("F3-BRIDGE-MIB", "f3FwdTSizeProfileTableSize"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3FwdTSizeProfileGroup = f3FwdTSizeProfileGroup.setStatus('current')
if mibBuilder.loadTexts: f3FwdTSizeProfileGroup.setDescription('A collection of objects used to manage the f3FwdTSizeProfileGroup.')
f3MGGroupFPGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 26, 3, 2, 9)).setObjects(("F3-BRIDGE-MIB", "f3MGRMulticastAddress"), ("F3-BRIDGE-MIB", "f3MGRFPList"), ("F3-BRIDGE-MIB", "f3MGRGroupAction"), ("F3-BRIDGE-MIB", "f3MGRGroupType"), ("F3-BRIDGE-MIB", "f3MGRGroupValid"), ("F3-BRIDGE-MIB", "f3MGRGroupRowStatus"), ("F3-BRIDGE-MIB", "f3MGRFPIndex"), ("F3-BRIDGE-MIB", "f3MGRFPIndexRowStatus"), ("F3-BRIDGE-MIB", "f3MGRGroupStorageType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3MGGroupFPGroup = f3MGGroupFPGroup.setStatus('current')
if mibBuilder.loadTexts: f3MGGroupFPGroup.setDescription('A collection of objects used to manage the f3MGGroupFPGroup.')
f3NetworkElementBridgeParamsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 26, 3, 2, 10)).setObjects(("F3-BRIDGE-MIB", "neBridgeParamsRtrvMacAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3NetworkElementBridgeParamsGroup = f3NetworkElementBridgeParamsGroup.setStatus('current')
if mibBuilder.loadTexts: f3NetworkElementBridgeParamsGroup.setDescription('A collection of objects used to manage the f3FwdTSizeProfileGroup.')
mibBuilder.exportSymbols("F3-BRIDGE-MIB", f3MGRFPIndexRowStatus=f3MGRFPIndexRowStatus, f3FlowLearningHistoryFDStaticBlock=f3FlowLearningHistoryFDStaticBlock, f3MGRGroupStorageType=f3MGRGroupStorageType, f3MPFlowFDBControlAction=f3MPFlowFDBControlAction, ProtectLearningControl=ProtectLearningControl, f3FlowFdbDestPort=f3FlowFdbDestPort, f3FlowLearningStatsMacTableFlushes=f3FlowLearningStatsMacTableFlushes, f3FlowLearningHistoryFDNoDest=f3FlowLearningHistoryFDNoDest, f3MGRFPMemberTable=f3MGRFPMemberTable, f3MPFlowFDBMacAddress=f3MPFlowFDBMacAddress, f3MGGroupFPGroup=f3MGGroupFPGroup, f3MPFlowStaticFwdControlAction=f3MPFlowStaticFwdControlAction, f3FlowLearningStatsFDStaticBlock=f3FlowLearningStatsFDStaticBlock, f3FlowLearningConfigEntry=f3FlowLearningConfigEntry, f3MPFlowFDBGroup=f3MPFlowFDBGroup, f3FwdTSizeProfileName=f3FwdTSizeProfileName, f3FlowLearningConfigAgingTimer=f3FlowLearningConfigAgingTimer, f3FwdTSizeProfileIndex=f3FwdTSizeProfileIndex, f3FlowLearningConfigNetIfLearningCtrl=f3FlowLearningConfigNetIfLearningCtrl, f3FlowLearningConfigTable=f3FlowLearningConfigTable, f3FlowFdbDestMac=f3FlowFdbDestMac, f3FlowLearningHistoryMacTableFlushes=f3FlowLearningHistoryMacTableFlushes, f3BridgeStatsObjects=f3BridgeStatsObjects, f3FlowStaticFwdEntAction=f3FlowStaticFwdEntAction, f3FlowStaticFwdEntRowStatus=f3FlowStaticFwdEntRowStatus, f3FlowStaticFwdEntDestMac=f3FlowStaticFwdEntDestMac, f3MPFlowStaticFwdGroup=f3MPFlowStaticFwdGroup, f3FlowLearningConfigAction=f3FlowLearningConfigAction, f3FlowFdbEntry=f3FlowFdbEntry, f3FlowLearningStatsEntry=f3FlowLearningStatsEntry, f3MultiGroupRegistrationEntry=f3MultiGroupRegistrationEntry, RetrieveMacAction=RetrieveMacAction, f3BridgeMIB=f3BridgeMIB, f3MPFlowStaticFwdFP=f3MPFlowStaticFwdFP, f3FlowLearningConfigAccIfLearningCtrl=f3FlowLearningConfigAccIfLearningCtrl, f3MPFlowStaticFwdTable=f3MPFlowStaticFwdTable, f3FwdTSizeProfileGroup=f3FwdTSizeProfileGroup, f3MGRFPMemberEntry=f3MGRFPMemberEntry, f3MGRFPList=f3MGRFPList, f3MGRGroupAction=f3MGRGroupAction, f3FlowLearningStatsGroup=f3FlowLearningStatsGroup, networkElementBridgeParamsTable=networkElementBridgeParamsTable, f3FwdTSizeProfileEntry=f3FwdTSizeProfileEntry, PYSNMP_MODULE_ID=f3BridgeMIB, LearningControl=LearningControl, f3BridgeCompliance=f3BridgeCompliance, f3FlowLearningHistoryMacTableDiscards=f3FlowLearningHistoryMacTableDiscards, f3MGRGroupType=f3MGRGroupType, f3MPFlowFDBType=f3MPFlowFDBType, f3MGRGroupValid=f3MGRGroupValid, f3MPFlowStaticFwdStorageType=f3MPFlowStaticFwdStorageType, f3BridgeConformance=f3BridgeConformance, f3MPFlowStaticFwdRowStatus=f3MPFlowStaticFwdRowStatus, f3FlowFdbTable=f3FlowFdbTable, LearningAction=LearningAction, f3NetworkElementBridgeParamsGroup=f3NetworkElementBridgeParamsGroup, f3FlowLearningHistoryFDHairPin=f3FlowLearningHistoryFDHairPin, f3FlowLearningHistoryTable=f3FlowLearningHistoryTable, f3MPFlowFDBFP=f3MPFlowFDBFP, f3FlowLearningConfigGroup=f3FlowLearningConfigGroup, f3FlowLearningStatsFDNoDest=f3FlowLearningStatsFDNoDest, f3FlowLearningConfigNetIfProtectLearningCtrl=f3FlowLearningConfigNetIfProtectLearningCtrl, f3FlowLearningConfigTableFullAction=f3FlowLearningConfigTableFullAction, f3FlowStaticFwdEntTable=f3FlowStaticFwdEntTable, networkElementBridgeParamsEntry=networkElementBridgeParamsEntry, f3MGRFPIndex=f3MGRFPIndex, FlowLearningConfigAction=FlowLearningConfigAction, f3FlowStaticFwdEntGroup=f3FlowStaticFwdEntGroup, f3FlowFdbGroup=f3FlowFdbGroup, f3FlowFdbEntryType=f3FlowFdbEntryType, f3BridgeGroups=f3BridgeGroups, f3FlowLearningHistoryEntry=f3FlowLearningHistoryEntry, f3FlowLearningConfigAccMaxFwdEntries=f3FlowLearningConfigAccMaxFwdEntries, f3MPFlowFDBEntry=f3MPFlowFDBEntry, f3FlowFdbAction=f3FlowFdbAction, f3MultiGroupRegistrationTable=f3MultiGroupRegistrationTable, f3FlowLearningHistoryGroup=f3FlowLearningHistoryGroup, f3FwdTSizeProfileTableSize=f3FwdTSizeProfileTableSize, neBridgeParamsRtrvMacAction=neBridgeParamsRtrvMacAction, LearningEntryType=LearningEntryType, f3FlowLearningStatsTable=f3FlowLearningStatsTable, f3FwdTSizeProfileTable=f3FwdTSizeProfileTable, f3MPFlowStaticFwdValid=f3MPFlowStaticFwdValid, f3MPFlowFDBTable=f3MPFlowFDBTable, f3MPFlowStaticFwdEntry=f3MPFlowStaticFwdEntry, f3FlowLearningStatsFDHairPin=f3FlowLearningStatsFDHairPin, f3FlowLearningStatsMacTableDiscards=f3FlowLearningStatsMacTableDiscards, f3BridgeCompliances=f3BridgeCompliances, f3FlowStaticFwdEntDestPort=f3FlowStaticFwdEntDestPort, f3FlowStaticFwdValid=f3FlowStaticFwdValid, f3BridgeConfigObjects=f3BridgeConfigObjects, f3FlowStaticFwdEntStorageType=f3FlowStaticFwdEntStorageType, f3MPFlowStaticFwdMacAddress=f3MPFlowStaticFwdMacAddress, f3MGRGroupRowStatus=f3MGRGroupRowStatus, f3MGRMulticastAddress=f3MGRMulticastAddress, f3FlowLearningConfigNetMaxFwdEntries=f3FlowLearningConfigNetMaxFwdEntries, f3FlowStaticFwdEntEntry=f3FlowStaticFwdEntEntry, f3FlowLearningConfigAccIfProtectLearningCtrl=f3FlowLearningConfigAccIfProtectLearningCtrl)
