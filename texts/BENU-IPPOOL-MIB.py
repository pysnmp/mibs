#
# PySNMP MIB module BENU-IPPOOL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/benuos/BENU-IPPOOL-MIB
# Produced by pysmi-1.1.12 at Thu Sep 26 02:10:51 2024
# On host fv-az1144-917 platform Linux version 6.8.0-1014-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint")
benuWAG, = mibBuilder.importSymbols("BENU-WAG-MIB", "benuWAG")
InetPortNumber, InetAddressIPv4, InetAddressType, InetAddress, InetAddressIPv6 = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetPortNumber", "InetAddressIPv4", "InetAddressType", "InetAddress", "InetAddressIPv6")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibIdentifier, Gauge32, ModuleIdentity, NotificationType, ObjectIdentity, iso, IpAddress, mib_2, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Counter64, Counter32, Bits, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Gauge32", "ModuleIdentity", "NotificationType", "ObjectIdentity", "iso", "IpAddress", "mib-2", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Counter64", "Counter32", "Bits", "Integer32")
TextualConvention, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "TruthValue")
benuIPPoolMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 39406, 2, 1, 5))
benuIPPoolMIB.setRevisions(('2015-08-11 00:00', '2015-01-05 00:00', '2013-10-21 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: benuIPPoolMIB.setRevisionsDescriptions(('Added notifications for bIPPoolAddrExhausted and\nbIPv6PoolPrefixExhausted.', 'Updated notification assignments to comply with standards (RFC 2578).', 'Version includes IPv6 pools',))
if mibBuilder.loadTexts: benuIPPoolMIB.setLastUpdated('201508110000Z')
if mibBuilder.loadTexts: benuIPPoolMIB.setOrganization('Benu Networks,Inc')
if mibBuilder.loadTexts: benuIPPoolMIB.setContactInfo('Benu Networks,Inc\n                          Corporate Headquarters\n                          300 Concord Road, Suite 110\n                          Billerica, MA 01821 USA\n                          Tel: +1 978-223-4700\n                          Fax: +1 978-362-1908\n                          Email: info@benunets.com')
if mibBuilder.loadTexts: benuIPPoolMIB.setDescription('The MIB module defines management information\n                related to the  IP Address Pools\n                Copyright (C)  2013 by Benu Networks, Inc.\n                All rights reserved.')
bIPPoolNotifications = ObjectIdentity((1, 3, 6, 1, 4, 1, 39406, 2, 1, 5, 0))
if mibBuilder.loadTexts: bIPPoolNotifications.setStatus('current')
if mibBuilder.loadTexts: bIPPoolNotifications.setDescription('IP Pool notifications are defined in this branch.')
bIPv4PoolMIBObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 39406, 2, 1, 5, 1))
if mibBuilder.loadTexts: bIPv4PoolMIBObjects.setStatus('current')
if mibBuilder.loadTexts: bIPv4PoolMIBObjects.setDescription('IPv4 Pool MIB objects information is defined in this branch.')
bIPv4PoolNotifObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 39406, 2, 1, 5, 2))
if mibBuilder.loadTexts: bIPv4PoolNotifObjects.setStatus('current')
if mibBuilder.loadTexts: bIPv4PoolNotifObjects.setDescription('IPv4 Pool Notifications are defined in this branch.')
bIPv6PoolMIBObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 39406, 2, 1, 5, 3))
if mibBuilder.loadTexts: bIPv6PoolMIBObjects.setStatus('current')
if mibBuilder.loadTexts: bIPv6PoolMIBObjects.setDescription('IPv6 Pool MIB objects information is defined in this branch.')
bIPv6PoolNotifObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 39406, 2, 1, 5, 4))
if mibBuilder.loadTexts: bIPv6PoolNotifObjects.setStatus('current')
if mibBuilder.loadTexts: bIPv6PoolNotifObjects.setDescription('IPv6 Pool Notifications are defined in this branch.')
bIPPoolTable = MibTable((1, 3, 6, 1, 4, 1, 39406, 2, 1, 5, 1, 1), )
if mibBuilder.loadTexts: bIPPoolTable.setStatus('current')
if mibBuilder.loadTexts: bIPPoolTable.setDescription('A list of IP Pools that are configured in this server.')
bIPPoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39406, 2, 1, 5, 1, 1, 1), ).setIndexNames((0, "BENU-IPPOOL-MIB", "bIPPoolStatsInterval"), (0, "BENU-IPPOOL-MIB", "bIPPoolIndex"))
if mibBuilder.loadTexts: bIPPoolEntry.setStatus('current')
if mibBuilder.loadTexts: bIPPoolEntry.setDescription('A logical row in the bIPPoolTable.')
bIPPoolStatsInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 5, 1, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: bIPPoolStatsInterval.setStatus('current')
if mibBuilder.loadTexts: bIPPoolStatsInterval.setDescription('The interval where the measurements were accumulated.\n       The interval index one indicates the latest interval for which statistics\n       accumulation was completed. Older the statistics interval data greater the\n       interval index value.\n       In a system supporting a history of n intervals with IntervalCount(1) and\n       IntervalCount(n) the most and least recent intervals respectively, the following\n       applies at the end of a interval:\n       - discard the value of IntervalCount(n)\n       - the value of IntervalCount(i) becomes that\n         of IntervalCount(i+1) for  1 <= i <n .\n       - the value of IntervalCount(1) becomes that\n         of CurrentCount')
bIPPoolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 5, 1, 1, 1, 2), Integer32())
if mibBuilder.loadTexts: bIPPoolIndex.setStatus('current')
if mibBuilder.loadTexts: bIPPoolIndex.setDescription('Index of the IP Pool  entry in the table.')
bIPPoolIntervalDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 5, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bIPPoolIntervalDuration.setStatus('current')
if mibBuilder.loadTexts: bIPPoolIntervalDuration.setDescription('Duration of the interval in minutes.')
bIPPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 5, 1, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bIPPoolName.setStatus('current')
if mibBuilder.loadTexts: bIPPoolName.setDescription('The name  of the IP Pool  entry in the table.')
bIPPoolStartAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 5, 1, 1, 1, 5), InetAddressIPv4()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bIPPoolStartAddress.setStatus('current')
if mibBuilder.loadTexts: bIPPoolStartAddress.setDescription('The start address of the IP Pool range.')
bIPPoolEndAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 5, 1, 1, 1, 6), InetAddressIPv4()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bIPPoolEndAddress.setStatus('current')
if mibBuilder.loadTexts: bIPPoolEndAddress.setDescription('The end address of the IP Pool range.')
bIPPoolTotalAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 5, 1, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bIPPoolTotalAddresses.setStatus('current')
if mibBuilder.loadTexts: bIPPoolTotalAddresses.setDescription('The total number of  addresses configured in the IP Pool.')
bIPPoolReservedAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 5, 1, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bIPPoolReservedAddresses.setStatus('current')
if mibBuilder.loadTexts: bIPPoolReservedAddresses.setDescription('The  number of reserved  addresses configured in the IP Pool.')
bIPPoolPeakFreeAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 5, 1, 1, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bIPPoolPeakFreeAddresses.setStatus('current')
if mibBuilder.loadTexts: bIPPoolPeakFreeAddresses.setDescription('The  max number of free  addresses reached in the periodic interval .')
bIPPoolPeakUsedAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 5, 1, 1, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bIPPoolPeakUsedAddresses.setStatus('current')
if mibBuilder.loadTexts: bIPPoolPeakUsedAddresses.setDescription('The  max number of used  addresses reached in the periodic interval .')
bIPPoolUsedAddrLowThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 5, 1, 1, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bIPPoolUsedAddrLowThreshold.setStatus('current')
if mibBuilder.loadTexts: bIPPoolUsedAddrLowThreshold.setDescription('The low threshold for used IP addresses in this IP Pool.\n        If the value for used IP addresses in this IP Pool\n        becomes equal to or less than this value and the current\n        condition for bIPPoolUsedAddrHigh is raised, then a\n        bIPPoolUsedAddrLow event will be generated.  No more\n        bIPPoolUsedAddrLow events will be generated for this\n        IP Pool during its execution until the value for outstanding\n        used addresses has exceeded  the value of\n        bIPPoolUsedAddrHighThreshold.')
bIPPoolUsedAddrHighThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 5, 1, 1, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bIPPoolUsedAddrHighThreshold.setStatus('current')
if mibBuilder.loadTexts: bIPPoolUsedAddrHighThreshold.setDescription('The high threshold for used addresses in this IP Pool.\n        If a bIPPoolUsedAddrLow event has been generated ( or  no\n        bIPPoolUsedAddrHigh was generated previously ) for this IP Pool,\n        and the value for used addresses has exceeded the value of\n        bIPPoolUsedAddrHighThreshold, then a\n        bIPPoolUsedAddrHigh  event will be generated.  No more\n        bIPPoolUsedAddrHigh  events will be generated for this\n        IP Pool  during this execution  until the  value for used addesses\n        becomes equal to or less than the value of\n        bIPPoolUsedAddrLowThreshold.')
bIPPoolGrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 5, 1, 1, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bIPPoolGrpName.setStatus('current')
if mibBuilder.loadTexts: bIPPoolGrpName.setDescription('The name of the IP Pool Group.')
bIPPoolGroupTable = MibTable((1, 3, 6, 1, 4, 1, 39406, 2, 1, 5, 1, 2), )
if mibBuilder.loadTexts: bIPPoolGroupTable.setStatus('current')
if mibBuilder.loadTexts: bIPPoolGroupTable.setDescription('A list of IP Pool Groups that are configured in this server.')
bIPPoolGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39406, 2, 1, 5, 1, 2, 1), ).setIndexNames((0, "BENU-IPPOOL-MIB", "bIPPoolGroupStatsInterval"), (0, "BENU-IPPOOL-MIB", "bIPPoolGroupIndex"))
if mibBuilder.loadTexts: bIPPoolGroupEntry.setStatus('current')
if mibBuilder.loadTexts: bIPPoolGroupEntry.setDescription('A logical row in the bIPPoolGroupTable.')
bIPPoolGroupStatsInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 5, 1, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: bIPPoolGroupStatsInterval.setStatus('current')
if mibBuilder.loadTexts: bIPPoolGroupStatsInterval.setDescription('The interval where the measurements were accumulated.\n       The interval index one indicates the latest interval for which statistics\n       accumulation was completed. Older the statistics interval data greater the\n       interval index value.\n       In a system supporting a history of n intervals with IntervalCount(1) and\n       IntervalCount(n) the most and least recent intervals respectively, the following\n       applies at the end of a interval:\n       - discard the value of IntervalCount(n)\n       - the value of IntervalCount(i) becomes that\n         of IntervalCount(i+1) for  1 <= i <n .\n       - the value of IntervalCount(1) becomes that\n         of CurrentCount')
bIPPoolGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 5, 1, 2, 1, 2), Integer32())
if mibBuilder.loadTexts: bIPPoolGroupIndex.setStatus('current')
if mibBuilder.loadTexts: bIPPoolGroupIndex.setDescription('Index of the IP Pool Group entry in the table.')
bIPPoolGroupIntervalDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 5, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bIPPoolGroupIntervalDuration.setStatus('current')
if mibBuilder.loadTexts: bIPPoolGroupIntervalDuration.setDescription('Duration of the interval in minutes.')
bIPPoolGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 5, 1, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bIPPoolGroupName.setStatus('current')
if mibBuilder.loadTexts: bIPPoolGroupName.setDescription('The name  of the IP Pool Group  entry in the table.')
bIPPoolGroupTotalAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 5, 1, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bIPPoolGroupTotalAddresses.setStatus('current')
if mibBuilder.loadTexts: bIPPoolGroupTotalAddresses.setDescription('The total number of  addresses configured in the IP Pool Group.')
bIPPoolGroupReservedAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 5, 1, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bIPPoolGroupReservedAddresses.setStatus('current')
if mibBuilder.loadTexts: bIPPoolGroupReservedAddresses.setDescription('The  number of reserved  addresses configured in the IP Pool Group.')
bIPPoolGroupPeakFreeAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 5, 1, 2, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bIPPoolGroupPeakFreeAddresses.setStatus('current')
if mibBuilder.loadTexts: bIPPoolGroupPeakFreeAddresses.setDescription('The  max number of free  addresses reached in the periodic interval .')
bIPPoolGroupPeakUsedAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 5, 1, 2, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bIPPoolGroupPeakUsedAddresses.setStatus('current')
if mibBuilder.loadTexts: bIPPoolGroupPeakUsedAddresses.setDescription('The  max number of used  addresses reached in the periodic interval .')
bIPPoolGlobalTable = MibTable((1, 3, 6, 1, 4, 1, 39406, 2, 1, 5, 1, 3), )
if mibBuilder.loadTexts: bIPPoolGlobalTable.setStatus('current')
if mibBuilder.loadTexts: bIPPoolGlobalTable.setDescription('A list of IP Pool Global information in this server.')
bIPPoolGlobalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39406, 2, 1, 5, 1, 3, 1), ).setIndexNames((0, "BENU-IPPOOL-MIB", "bIPPoolGlobalStatsInterval"), (0, "BENU-IPPOOL-MIB", "bIPPoolClientIndex"))
if mibBuilder.loadTexts: bIPPoolGlobalEntry.setStatus('current')
if mibBuilder.loadTexts: bIPPoolGlobalEntry.setDescription('A logical row in the bIPPoolGlobalTable.')
bIPPoolGlobalStatsInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 5, 1, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: bIPPoolGlobalStatsInterval.setStatus('current')
if mibBuilder.loadTexts: bIPPoolGlobalStatsInterval.setDescription('The interval where the measurements were accumulated.\n       The interval index one indicates the latest interval for which statistics\n       accumulation was completed. Older the statistics interval data greater the\n       interval index value.\n       In a system supporting a history of n intervals with IntervalCount(1) and\n       IntervalCount(n) the most and least recent intervals respectively, the following\n       applies at the end of a interval:\n       - discard the value of IntervalCount(n)\n       - the value of IntervalCount(i) becomes that\n         of IntervalCount(i+1) for  1 <= i <n .\n       - the value of IntervalCount(1) becomes that\n         of CurrentCount')
bIPPoolClientIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 5, 1, 3, 1, 2), Integer32())
if mibBuilder.loadTexts: bIPPoolClientIndex.setStatus('current')
if mibBuilder.loadTexts: bIPPoolClientIndex.setDescription('A number uniquely identifying client which uses IP Pool')
bIPPoolClientName = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 5, 1, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bIPPoolClientName.setStatus('current')
if mibBuilder.loadTexts: bIPPoolClientName.setDescription('IP Pool client name')
bIPPoolGlobalAllocReq = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 5, 1, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bIPPoolGlobalAllocReq.setStatus('current')
if mibBuilder.loadTexts: bIPPoolGlobalAllocReq.setDescription('The count of IP Address allocation requests.')
bIPPoolGlobalAllocReqSucc = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 5, 1, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bIPPoolGlobalAllocReqSucc.setStatus('current')
if mibBuilder.loadTexts: bIPPoolGlobalAllocReqSucc.setDescription('The count of IP Address allocation requests for which\n        allocation was successful.')
bIPPoolGlobalAllocReqUnSucc = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 5, 1, 3, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bIPPoolGlobalAllocReqUnSucc.setStatus('current')
if mibBuilder.loadTexts: bIPPoolGlobalAllocReqUnSucc.setDescription('The count of IP Address allocation requests for which\n        allocation was Unsuccessful.')
bIPPoolGlobalDupAllocReq = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 5, 1, 3, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bIPPoolGlobalDupAllocReq.setStatus('current')
if mibBuilder.loadTexts: bIPPoolGlobalDupAllocReq.setDescription('The count of duplicate IP Address allocation requests.')
bIPPoolGlobalStaticAllocReq = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 5, 1, 3, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bIPPoolGlobalStaticAllocReq.setStatus('current')
if mibBuilder.loadTexts: bIPPoolGlobalStaticAllocReq.setDescription('The count of static IP Address allocation requests.')
bIPPoolGlobalAllocResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 5, 1, 3, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bIPPoolGlobalAllocResponses.setStatus('current')
if mibBuilder.loadTexts: bIPPoolGlobalAllocResponses.setDescription('The total number of  IP address allocation responses .')
bIPPoolGlobalDeAllocReq = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 5, 1, 3, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bIPPoolGlobalDeAllocReq.setStatus('current')
if mibBuilder.loadTexts: bIPPoolGlobalDeAllocReq.setDescription('The count of IP Address  deallocation requests.')
bIPPoolGlobalDeAllocReqSucc = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 5, 1, 3, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bIPPoolGlobalDeAllocReqSucc.setStatus('current')
if mibBuilder.loadTexts: bIPPoolGlobalDeAllocReqSucc.setDescription('The count of IP Address  deallocation requests which\n        are successful.')
bIPPoolGlobalDeAllocReqUnSucc = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 5, 1, 3, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bIPPoolGlobalDeAllocReqUnSucc.setStatus('current')
if mibBuilder.loadTexts: bIPPoolGlobalDeAllocReqUnSucc.setDescription('The count of IP Address  deallocation requests which\n        are unsuccessful.')
bIPPoolGlobalInvalidReq = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 5, 1, 3, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bIPPoolGlobalInvalidReq.setStatus('current')
if mibBuilder.loadTexts: bIPPoolGlobalInvalidReq.setDescription('The count of invalid IP Address allocation requests.')
bIPPoolGlobalNotAvailCount = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 5, 1, 3, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bIPPoolGlobalNotAvailCount.setStatus('current')
if mibBuilder.loadTexts: bIPPoolGlobalNotAvailCount.setDescription('The count of requests for which the requested  IP pool is unavailable.')
bIPPoolGlobalPoolExhaustedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 5, 1, 3, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bIPPoolGlobalPoolExhaustedCount.setStatus('current')
if mibBuilder.loadTexts: bIPPoolGlobalPoolExhaustedCount.setDescription('The count of requests for which the requested  IP pool is exhausted.')
bIPPoolGlobalGroupExhaustedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 5, 1, 3, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bIPPoolGlobalGroupExhaustedCount.setStatus('current')
if mibBuilder.loadTexts: bIPPoolGlobalGroupExhaustedCount.setDescription('The count of requests for which the requested  IP pool group is exhausted.')
bIPPoolGlobalInvalidPoolNameCount = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 5, 1, 3, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bIPPoolGlobalInvalidPoolNameCount.setStatus('current')
if mibBuilder.loadTexts: bIPPoolGlobalInvalidPoolNameCount.setDescription('The count of requests with invalid  IP pool  name.')
bIPPoolGlobalInvalidGroupNameCount = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 5, 1, 3, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bIPPoolGlobalInvalidGroupNameCount.setStatus('current')
if mibBuilder.loadTexts: bIPPoolGlobalInvalidGroupNameCount.setDescription('The count of requests with invalid  IP pool group  name.')
bIPPoolGlobalInvalidIPAddrCount = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 5, 1, 3, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bIPPoolGlobalInvalidIPAddrCount.setStatus('current')
if mibBuilder.loadTexts: bIPPoolGlobalInvalidIPAddrCount.setDescription('The total number of  release requests with invalid IP addresses .')
bIPPoolGlobalHashInsertFail = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 5, 1, 3, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bIPPoolGlobalHashInsertFail.setStatus('current')
if mibBuilder.loadTexts: bIPPoolGlobalHashInsertFail.setDescription('The count of  addresses for which  hash insert failed.')
bIPPoolGlobalHashDeleteFail = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 5, 1, 3, 1, 21), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bIPPoolGlobalHashDeleteFail.setStatus('current')
if mibBuilder.loadTexts: bIPPoolGlobalHashDeleteFail.setDescription('The count of  addresses for which  hash delete failed.')
bIPPoolGlobalRequestedAllocatedMismacth = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 5, 1, 3, 1, 22), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bIPPoolGlobalRequestedAllocatedMismacth.setStatus('current')
if mibBuilder.loadTexts: bIPPoolGlobalRequestedAllocatedMismacth.setDescription('The total number of requests for which allocated and requested IP address do not match .')
bIPPoolGlobalRequestedIPNotFree = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 5, 1, 3, 1, 23), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bIPPoolGlobalRequestedIPNotFree.setStatus('current')
if mibBuilder.loadTexts: bIPPoolGlobalRequestedIPNotFree.setDescription('The count of requested addresses which were not free.')
bIPPoolGlobalGenErrCount = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 5, 1, 3, 1, 24), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bIPPoolGlobalGenErrCount.setStatus('current')
if mibBuilder.loadTexts: bIPPoolGlobalGenErrCount.setDescription('The total number of errors like memory allocation failures.')
bIPPoolGlobalAddrRelDueToIntAdd = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 5, 1, 3, 1, 25), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bIPPoolGlobalAddrRelDueToIntAdd.setStatus('current')
if mibBuilder.loadTexts: bIPPoolGlobalAddrRelDueToIntAdd.setDescription('The count of  addresses released due to interface addition.')
bIPPoolGlobalGroupDeAllocReq = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 5, 1, 3, 1, 26), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bIPPoolGlobalGroupDeAllocReq.setStatus('current')
if mibBuilder.loadTexts: bIPPoolGlobalGroupDeAllocReq.setDescription('The count of group deallocation requests.')
bIPPoolGlobalGroupDeAllocReqSucc = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 5, 1, 3, 1, 27), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bIPPoolGlobalGroupDeAllocReqSucc.setStatus('current')
if mibBuilder.loadTexts: bIPPoolGlobalGroupDeAllocReqSucc.setDescription('The count of group  deallocation requests which\n        are successful.')
bIPPoolGlobalGroupDeAllocReqUnSucc = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 5, 1, 3, 1, 28), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bIPPoolGlobalGroupDeAllocReqUnSucc.setStatus('current')
if mibBuilder.loadTexts: bIPPoolGlobalGroupDeAllocReqUnSucc.setDescription('The count of group deallocation requests which\n        are unsuccessful.')
bIPPoolTotalPoolCreatedEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 5, 1, 3, 1, 29), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bIPPoolTotalPoolCreatedEvents.setStatus('current')
if mibBuilder.loadTexts: bIPPoolTotalPoolCreatedEvents.setDescription('The total number of ip pool create events.')
bIPPoolTotalPoolDeletedEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 5, 1, 3, 1, 30), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bIPPoolTotalPoolDeletedEvents.setStatus('current')
if mibBuilder.loadTexts: bIPPoolTotalPoolDeletedEvents.setDescription('The total number of ip pool delete events.')
bIPPoolGlobalIntervalDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 5, 1, 3, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bIPPoolGlobalIntervalDuration.setStatus('current')
if mibBuilder.loadTexts: bIPPoolGlobalIntervalDuration.setDescription('Duration of the interval in minutes.')
bIPPoolUsedAddrLow = NotificationType((1, 3, 6, 1, 4, 1, 39406, 2, 1, 5, 0, 1)).setObjects(("BENU-IPPOOL-MIB", "bIPPoolName"), ("BENU-IPPOOL-MIB", "bIPPoolTotalAddresses"), ("BENU-IPPOOL-MIB", "bIPPoolUsedAddrLowThreshold"))
if mibBuilder.loadTexts: bIPPoolUsedAddrLow.setStatus('current')
if mibBuilder.loadTexts: bIPPoolUsedAddrLow.setDescription('This notification signifies that the number of used addresses\n         for a particular IP Pool is cleared , meaning that it\n         has fallen below the  value of bIPPoolUsedAddrLowThreshold\n         for that IP Pool.')
bIPPoolUsedAddrHigh = NotificationType((1, 3, 6, 1, 4, 1, 39406, 2, 1, 5, 0, 2)).setObjects(("BENU-IPPOOL-MIB", "bIPPoolName"), ("BENU-IPPOOL-MIB", "bIPPoolTotalAddresses"), ("BENU-IPPOOL-MIB", "bIPPoolUsedAddrHighThreshold"))
if mibBuilder.loadTexts: bIPPoolUsedAddrHigh.setStatus('current')
if mibBuilder.loadTexts: bIPPoolUsedAddrHigh.setDescription('This notification signifies that the number of used\n        addresses for a particular IP Pool has risen above the\n        value of bIPPoolUsedAddrHighThreshold for that IP Pool.')
bIPPoolAddrExhausted = NotificationType((1, 3, 6, 1, 4, 1, 39406, 2, 1, 5, 0, 5)).setObjects(("BENU-IPPOOL-MIB", "bIPPoolName"), ("BENU-IPPOOL-MIB", "bIPPoolTotalAddresses"))
if mibBuilder.loadTexts: bIPPoolAddrExhausted.setStatus('current')
if mibBuilder.loadTexts: bIPPoolAddrExhausted.setDescription('This notification signifies that the particular IPv4 pool\n        is exhausted.')
bIPv6PoolTable = MibTable((1, 3, 6, 1, 4, 1, 39406, 2, 1, 5, 3, 1), )
if mibBuilder.loadTexts: bIPv6PoolTable.setStatus('current')
if mibBuilder.loadTexts: bIPv6PoolTable.setDescription('A list of IPv6 Pools that are configured in this server.')
bIPv6PoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39406, 2, 1, 5, 3, 1, 1), ).setIndexNames((0, "BENU-IPPOOL-MIB", "bIPv6PoolStatsInterval"), (0, "BENU-IPPOOL-MIB", "bIPv6PoolIndex"))
if mibBuilder.loadTexts: bIPv6PoolEntry.setStatus('current')
if mibBuilder.loadTexts: bIPv6PoolEntry.setDescription('A logical row in the bIPv6PoolTable.')
bIPv6PoolStatsInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 5, 3, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: bIPv6PoolStatsInterval.setStatus('current')
if mibBuilder.loadTexts: bIPv6PoolStatsInterval.setDescription('The interval for acculating the measurements.\n       The interval index one indicates the latest interval for which statistics\n       accumulation was completed. Older the statistics interval data, greater the\n       interval index value.\n       In a system supporting a history of n intervals with IntervalCount(1) and\n       IntervalCount(n) the most and least recent intervals respectively, the following\n       applies at the end of a interval:\n       - discard the value of IntervalCount(n)\n       - the value of IntervalCount(i) becomes that\n         of IntervalCount(i+1) for  1 <= i < n\n       - the value of IntervalCount(1) becomes that\n         of CurrentCount')
bIPv6PoolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 5, 3, 1, 1, 2), Integer32())
if mibBuilder.loadTexts: bIPv6PoolIndex.setStatus('current')
if mibBuilder.loadTexts: bIPv6PoolIndex.setDescription('Index of the IPv6 Pool entry in the table.')
bIPv6PoolIntervalDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 5, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bIPv6PoolIntervalDuration.setStatus('current')
if mibBuilder.loadTexts: bIPv6PoolIntervalDuration.setDescription('Duration of the interval in minutes.')
bIPv6PoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 5, 3, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bIPv6PoolName.setStatus('current')
if mibBuilder.loadTexts: bIPv6PoolName.setDescription('The name of the IPv6 Pool entry in the table.')
bIPv6PoolStartPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 5, 3, 1, 1, 5), InetAddressIPv6()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bIPv6PoolStartPrefix.setStatus('current')
if mibBuilder.loadTexts: bIPv6PoolStartPrefix.setDescription('The start prefix of the IPv6 Pool range.')
bIPv6PoolEndPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 5, 3, 1, 1, 6), InetAddressIPv6()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bIPv6PoolEndPrefix.setStatus('current')
if mibBuilder.loadTexts: bIPv6PoolEndPrefix.setDescription('The end prefix of the IPv6 Pool range.')
bIPv6PoolTotalPrefixes = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 5, 3, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bIPv6PoolTotalPrefixes.setStatus('current')
if mibBuilder.loadTexts: bIPv6PoolTotalPrefixes.setDescription('The total number of prefixes configured in the IPv6 Pool.')
bIPv6PoolReservedPrefixes = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 5, 3, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bIPv6PoolReservedPrefixes.setStatus('current')
if mibBuilder.loadTexts: bIPv6PoolReservedPrefixes.setDescription('The  number of reserved prefixes configured in the IPv6 Pool.')
bIPv6PoolPeakFreePrefixes = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 5, 3, 1, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bIPv6PoolPeakFreePrefixes.setStatus('current')
if mibBuilder.loadTexts: bIPv6PoolPeakFreePrefixes.setDescription('The  maximum number of free prefixes reached in the periodic interval.')
bIPv6PoolPeakUsedPrefixes = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 5, 3, 1, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bIPv6PoolPeakUsedPrefixes.setStatus('current')
if mibBuilder.loadTexts: bIPv6PoolPeakUsedPrefixes.setDescription('The  maximum number of used prefixes reached in the periodic interval.')
bIPv6PoolUsedPrefixLowThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 5, 3, 1, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bIPv6PoolUsedPrefixLowThreshold.setStatus('current')
if mibBuilder.loadTexts: bIPv6PoolUsedPrefixLowThreshold.setDescription('The low threshold for used IPv6 prefixes in this IPv6 Pool.\n        If the value for used IPv6 prefixes in this IPv6 Pool\n        becomes equal to or less than this value and the current\n        condition for bIPv6PoolUsedPrefixHigh is raised, then a\n        bIPv6PoolUsedPrefixLow event will be generated.  No more\n        bIPv6PoolUsedPrefixLow events will be generated for this\n        IPv6 Pool during this execution until the value for \n        used prefixes has exceeded the value of\n        bIPv6PoolUsedPrefixHighThreshold.')
bIPv6PoolUsedPrefixHighThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 5, 3, 1, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bIPv6PoolUsedPrefixHighThreshold.setStatus('current')
if mibBuilder.loadTexts: bIPv6PoolUsedPrefixHighThreshold.setDescription('The high threshold for used prefixes in this IPv6 Pool.\n        If a bIPv6PoolUsedPrefixLow event has been generated (or  no\n        bIPv6PoolUsedPrefixHigh was generated previously) for this IPv6 Pool,\n        and the value for used prefixes has exceeded the value of\n        bIPv6PoolUsedAddrHighThreshold, then a\n        bIPv6PoolUsedAddrHigh event will be generated. No more\n        bIPv6PoolUsedAddrHigh events will be generated for this\n        IPv6 Pool during this execution until the value for used prefixes \n        becomes equal to or less than the value of\n        bIPv6PoolUsedAddrLowThreshold.')
bIPv6PoolGrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 5, 3, 1, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bIPv6PoolGrpName.setStatus('current')
if mibBuilder.loadTexts: bIPv6PoolGrpName.setDescription('The name of the IPv6 Pool Group.')
bIPv6PoolGroupTable = MibTable((1, 3, 6, 1, 4, 1, 39406, 2, 1, 5, 3, 2), )
if mibBuilder.loadTexts: bIPv6PoolGroupTable.setStatus('current')
if mibBuilder.loadTexts: bIPv6PoolGroupTable.setDescription('A list of IPv6 Pool Groups that are configured in this server.')
bIPv6PoolGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39406, 2, 1, 5, 3, 2, 1), ).setIndexNames((0, "BENU-IPPOOL-MIB", "bIPv6PoolGroupStatsInterval"), (0, "BENU-IPPOOL-MIB", "bIPv6PoolGroupIndex"))
if mibBuilder.loadTexts: bIPv6PoolGroupEntry.setStatus('current')
if mibBuilder.loadTexts: bIPv6PoolGroupEntry.setDescription('A logical row in the bIPv6PoolGroupTable.')
bIPv6PoolGroupStatsInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 5, 3, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: bIPv6PoolGroupStatsInterval.setStatus('current')
if mibBuilder.loadTexts: bIPv6PoolGroupStatsInterval.setDescription('The interval for acculating the measurements.\n       The interval index one indicates the latest interval for which statistics\n       accumulation was completed. Older the statistics interval data, greater the\n       interval index value.\n       In a system supporting a history of n intervals with IntervalCount(1) and\n       IntervalCount(n) the most and least recent intervals respectively, the following\n       applies at the end of a interval:\n       - discard the value of IntervalCount(n)\n       - the value of IntervalCount(i) becomes that\n         of IntervalCount(i+1) for  1 <= i < n\n       - the value of IntervalCount(1) becomes that\n         of CurrentCount')
bIPv6PoolGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 5, 3, 2, 1, 2), Integer32())
if mibBuilder.loadTexts: bIPv6PoolGroupIndex.setStatus('current')
if mibBuilder.loadTexts: bIPv6PoolGroupIndex.setDescription('Index of the IPv6 Pool Group entry in the table.')
bIPv6PoolGroupIntervalDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 5, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bIPv6PoolGroupIntervalDuration.setStatus('current')
if mibBuilder.loadTexts: bIPv6PoolGroupIntervalDuration.setDescription('Duration of the interval in minutes.')
bIPv6PoolGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 5, 3, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bIPv6PoolGroupName.setStatus('current')
if mibBuilder.loadTexts: bIPv6PoolGroupName.setDescription('The name of the IPv6 Pool Group entry in the table.')
bIPv6PoolGroupTotalPrefixes = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 5, 3, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bIPv6PoolGroupTotalPrefixes.setStatus('current')
if mibBuilder.loadTexts: bIPv6PoolGroupTotalPrefixes.setDescription('The total number of prefixes configured in the IPv6 Pool Group.')
bIPv6PoolGroupReservedPrefixes = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 5, 3, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bIPv6PoolGroupReservedPrefixes.setStatus('current')
if mibBuilder.loadTexts: bIPv6PoolGroupReservedPrefixes.setDescription('The number of reserved prefixes configured in the IPv6 Pool Group.')
bIPv6PoolGroupPeakFreePrefixes = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 5, 3, 2, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bIPv6PoolGroupPeakFreePrefixes.setStatus('current')
if mibBuilder.loadTexts: bIPv6PoolGroupPeakFreePrefixes.setDescription('The maximum number of free prefixes reached in the periodic interval.')
bIPv6PoolGroupPeakUsedPrefixes = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 5, 3, 2, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bIPv6PoolGroupPeakUsedPrefixes.setStatus('current')
if mibBuilder.loadTexts: bIPv6PoolGroupPeakUsedPrefixes.setDescription('The maximum number of used prefixes reached in the periodic interval .')
bIPv6PoolGlobalTable = MibTable((1, 3, 6, 1, 4, 1, 39406, 2, 1, 5, 3, 3), )
if mibBuilder.loadTexts: bIPv6PoolGlobalTable.setStatus('current')
if mibBuilder.loadTexts: bIPv6PoolGlobalTable.setDescription('A list of IPv6 Pool Global information in this server.')
bIPv6PoolGlobalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39406, 2, 1, 5, 3, 3, 1), ).setIndexNames((0, "BENU-IPPOOL-MIB", "bIPv6PoolGlobalStatsInterval"), (0, "BENU-IPPOOL-MIB", "bIPv6PoolClientIndex"))
if mibBuilder.loadTexts: bIPv6PoolGlobalEntry.setStatus('current')
if mibBuilder.loadTexts: bIPv6PoolGlobalEntry.setDescription('A logical row in the bIPv6PoolGlobalTable.')
bIPv6PoolGlobalStatsInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 5, 3, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: bIPv6PoolGlobalStatsInterval.setStatus('current')
if mibBuilder.loadTexts: bIPv6PoolGlobalStatsInterval.setDescription('The interval for acculating the measurements.\n       The interval index one indicates the latest interval for which statistics\n       accumulation was completed. Older the statistics interval data, greater the\n       interval index value.\n       In a system supporting a history of n intervals with IntervalCount(1) and\n       IntervalCount(n) the most and least recent intervals respectively, the following\n       applies at the end of a interval:\n       - discard the value of IntervalCount(n)\n       - the value of IntervalCount(i) becomes that\n         of IntervalCount(i+1) for  1 <= i < n\n       - the value of IntervalCount(1) becomes that\n         of CurrentCount')
bIPv6PoolClientIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 5, 3, 3, 1, 2), Integer32())
if mibBuilder.loadTexts: bIPv6PoolClientIndex.setStatus('current')
if mibBuilder.loadTexts: bIPv6PoolClientIndex.setDescription('A number uniquely identifying the client which uses IPv6 Pool.')
bIPv6PoolClientName = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 5, 3, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bIPv6PoolClientName.setStatus('current')
if mibBuilder.loadTexts: bIPv6PoolClientName.setDescription('IPv6 Pool client name.')
bIPv6PoolGlobalAllocReq = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 5, 3, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bIPv6PoolGlobalAllocReq.setStatus('current')
if mibBuilder.loadTexts: bIPv6PoolGlobalAllocReq.setDescription('The count of IPv6 prefix allocation requests.')
bIPv6PoolGlobalAllocReqSucc = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 5, 3, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bIPv6PoolGlobalAllocReqSucc.setStatus('current')
if mibBuilder.loadTexts: bIPv6PoolGlobalAllocReqSucc.setDescription('The count of IPv6 prefix allocation requests for which\n        allocation was successful.')
bIPv6PoolGlobalAllocReqUnSucc = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 5, 3, 3, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bIPv6PoolGlobalAllocReqUnSucc.setStatus('current')
if mibBuilder.loadTexts: bIPv6PoolGlobalAllocReqUnSucc.setDescription('The count of IPv6 prefix allocation requests for which\n        allocation was unsuccessful.')
bIPv6PoolGlobalDupAllocReq = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 5, 3, 3, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bIPv6PoolGlobalDupAllocReq.setStatus('current')
if mibBuilder.loadTexts: bIPv6PoolGlobalDupAllocReq.setDescription('The count of duplicate IPv6 prefix allocation requests.')
bIPv6PoolGlobalStaticAllocReq = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 5, 3, 3, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bIPv6PoolGlobalStaticAllocReq.setStatus('current')
if mibBuilder.loadTexts: bIPv6PoolGlobalStaticAllocReq.setDescription('The count of static IPv6 allocation requests.')
bIPv6PoolGlobalAllocResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 5, 3, 3, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bIPv6PoolGlobalAllocResponses.setStatus('current')
if mibBuilder.loadTexts: bIPv6PoolGlobalAllocResponses.setDescription('The total number of IPv6 prefix allocation responses.')
bIPv6PoolGlobalDeAllocReq = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 5, 3, 3, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bIPv6PoolGlobalDeAllocReq.setStatus('current')
if mibBuilder.loadTexts: bIPv6PoolGlobalDeAllocReq.setDescription('The count of IPv6 prefix deallocation requests.')
bIPv6PoolGlobalDeAllocReqSucc = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 5, 3, 3, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bIPv6PoolGlobalDeAllocReqSucc.setStatus('current')
if mibBuilder.loadTexts: bIPv6PoolGlobalDeAllocReqSucc.setDescription('The count of IPv6 prefix successful deallocation requests.')
bIPv6PoolGlobalDeAllocReqUnSucc = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 5, 3, 3, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bIPv6PoolGlobalDeAllocReqUnSucc.setStatus('current')
if mibBuilder.loadTexts: bIPv6PoolGlobalDeAllocReqUnSucc.setDescription('The count of IPv6 prefix unsuccessful deallocation requests.')
bIPv6PoolGlobalInvalidReq = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 5, 3, 3, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bIPv6PoolGlobalInvalidReq.setStatus('current')
if mibBuilder.loadTexts: bIPv6PoolGlobalInvalidReq.setDescription('The count of invalid IPv6 prefix allocation requests.')
bIPv6PoolGlobalNotAvailCount = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 5, 3, 3, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bIPv6PoolGlobalNotAvailCount.setStatus('current')
if mibBuilder.loadTexts: bIPv6PoolGlobalNotAvailCount.setDescription('The count of requests for which the requested IPv6 pool is unavailable.')
bIPv6PoolGlobalPoolExhaustedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 5, 3, 3, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bIPv6PoolGlobalPoolExhaustedCount.setStatus('current')
if mibBuilder.loadTexts: bIPv6PoolGlobalPoolExhaustedCount.setDescription('The count of requests for which the requested IPv6 pool is exhausted.')
bIPv6PoolGlobalGroupExhaustedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 5, 3, 3, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bIPv6PoolGlobalGroupExhaustedCount.setStatus('current')
if mibBuilder.loadTexts: bIPv6PoolGlobalGroupExhaustedCount.setDescription('The count of requests for which the requested IPv6 pool group is exhausted.')
bIPv6PoolGlobalInvalidPoolNameCount = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 5, 3, 3, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bIPv6PoolGlobalInvalidPoolNameCount.setStatus('current')
if mibBuilder.loadTexts: bIPv6PoolGlobalInvalidPoolNameCount.setDescription('The count of requests with invalid IPv6 pool name.')
bIPv6PoolGlobalInvalidGroupNameCount = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 5, 3, 3, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bIPv6PoolGlobalInvalidGroupNameCount.setStatus('current')
if mibBuilder.loadTexts: bIPv6PoolGlobalInvalidGroupNameCount.setDescription('The count of requests with invalid IPv6 pool group name.')
bIPv6PoolGlobalInvalidIPAddrCount = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 5, 3, 3, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bIPv6PoolGlobalInvalidIPAddrCount.setStatus('current')
if mibBuilder.loadTexts: bIPv6PoolGlobalInvalidIPAddrCount.setDescription('The total number of release requests with invalid IPv6 prefixes.')
bIPv6PoolGlobalHashInsertFail = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 5, 3, 3, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bIPv6PoolGlobalHashInsertFail.setStatus('current')
if mibBuilder.loadTexts: bIPv6PoolGlobalHashInsertFail.setDescription('The count of prefixes for which hash insert failed.')
bIPv6PoolGlobalHashDeleteFail = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 5, 3, 3, 1, 21), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bIPv6PoolGlobalHashDeleteFail.setStatus('current')
if mibBuilder.loadTexts: bIPv6PoolGlobalHashDeleteFail.setDescription('The count of prefixes for which hash delete failed.')
bIPv6PoolGlobalRequestedAllocatedMismacth = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 5, 3, 3, 1, 22), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bIPv6PoolGlobalRequestedAllocatedMismacth.setStatus('current')
if mibBuilder.loadTexts: bIPv6PoolGlobalRequestedAllocatedMismacth.setDescription('The total number of requests for which allocated and requested IPv6 prefixes do not match.')
bIPv6PoolGlobalRequestedIPNotFree = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 5, 3, 3, 1, 23), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bIPv6PoolGlobalRequestedIPNotFree.setStatus('current')
if mibBuilder.loadTexts: bIPv6PoolGlobalRequestedIPNotFree.setDescription('The count of requested prefixes which were not free.')
bIPv6PoolGlobalGenErrCount = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 5, 3, 3, 1, 24), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bIPv6PoolGlobalGenErrCount.setStatus('current')
if mibBuilder.loadTexts: bIPv6PoolGlobalGenErrCount.setDescription('The total number of errors like memory allocation failures.')
bIPv6PoolGlobalPrefixRelDueToIntAdd = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 5, 3, 3, 1, 25), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bIPv6PoolGlobalPrefixRelDueToIntAdd.setStatus('current')
if mibBuilder.loadTexts: bIPv6PoolGlobalPrefixRelDueToIntAdd.setDescription('The count of prefixes released due to interface addition.')
bIPv6PoolTotalPoolCreatedEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 5, 3, 3, 1, 26), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bIPv6PoolTotalPoolCreatedEvents.setStatus('current')
if mibBuilder.loadTexts: bIPv6PoolTotalPoolCreatedEvents.setDescription('The total number of ipv6 pool create events.')
bIPv6PoolTotalPoolDeletedEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 5, 3, 3, 1, 27), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bIPv6PoolTotalPoolDeletedEvents.setStatus('current')
if mibBuilder.loadTexts: bIPv6PoolTotalPoolDeletedEvents.setDescription('The total number of ipv6 pool deleted events.')
bIPv6PoolGlobalIntervalDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 5, 3, 3, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bIPv6PoolGlobalIntervalDuration.setStatus('current')
if mibBuilder.loadTexts: bIPv6PoolGlobalIntervalDuration.setDescription('Duration of the interval in minutes.')
bIPv6PoolUsedPrefixLow = NotificationType((1, 3, 6, 1, 4, 1, 39406, 2, 1, 5, 0, 3)).setObjects(("BENU-IPPOOL-MIB", "bIPv6PoolName"), ("BENU-IPPOOL-MIB", "bIPv6PoolTotalPrefixes"), ("BENU-IPPOOL-MIB", "bIPv6PoolUsedPrefixLowThreshold"))
if mibBuilder.loadTexts: bIPv6PoolUsedPrefixLow.setStatus('current')
if mibBuilder.loadTexts: bIPv6PoolUsedPrefixLow.setDescription('This notification signifies that the number of used prefixes\n         for a particular IPv6 Pool is cleared, meaning that it\n         has fallen below the value of bIPv6PoolUsedPrefixLowThreshold \n         for that IPv6 Pool.')
bIPv6PoolUsedPrefixHigh = NotificationType((1, 3, 6, 1, 4, 1, 39406, 2, 1, 5, 0, 4)).setObjects(("BENU-IPPOOL-MIB", "bIPv6PoolName"), ("BENU-IPPOOL-MIB", "bIPv6PoolTotalPrefixes"), ("BENU-IPPOOL-MIB", "bIPv6PoolUsedPrefixHighThreshold"))
if mibBuilder.loadTexts: bIPv6PoolUsedPrefixHigh.setStatus('current')
if mibBuilder.loadTexts: bIPv6PoolUsedPrefixHigh.setDescription('This notification signifies that the number of used\n        prefixes for a particular IPv6 Pool has risen above the\n        value of bIPv6PoolUsedPrefixHighThreshold for that IPv6 Pool.')
bIPv6PoolPrefixExhausted = NotificationType((1, 3, 6, 1, 4, 1, 39406, 2, 1, 5, 0, 6)).setObjects(("BENU-IPPOOL-MIB", "bIPv6PoolName"), ("BENU-IPPOOL-MIB", "bIPv6PoolTotalPrefixes"))
if mibBuilder.loadTexts: bIPv6PoolPrefixExhausted.setStatus('current')
if mibBuilder.loadTexts: bIPv6PoolPrefixExhausted.setDescription('This notification signifies that the particular IPv6 pool is\n        exhausted.')
mibBuilder.exportSymbols("BENU-IPPOOL-MIB", bIPv6PoolMIBObjects=bIPv6PoolMIBObjects, bIPPoolClientName=bIPPoolClientName, bIPPoolGlobalInvalidPoolNameCount=bIPPoolGlobalInvalidPoolNameCount, PYSNMP_MODULE_ID=benuIPPoolMIB, bIPPoolGlobalHashDeleteFail=bIPPoolGlobalHashDeleteFail, bIPPoolUsedAddrLowThreshold=bIPPoolUsedAddrLowThreshold, bIPv6PoolGroupIntervalDuration=bIPv6PoolGroupIntervalDuration, bIPPoolReservedAddresses=bIPPoolReservedAddresses, bIPPoolGlobalStaticAllocReq=bIPPoolGlobalStaticAllocReq, bIPv6PoolGroupTotalPrefixes=bIPv6PoolGroupTotalPrefixes, bIPv6PoolStartPrefix=bIPv6PoolStartPrefix, bIPPoolGroupStatsInterval=bIPPoolGroupStatsInterval, bIPv6PoolGlobalGroupExhaustedCount=bIPv6PoolGlobalGroupExhaustedCount, bIPv6PoolTotalPrefixes=bIPv6PoolTotalPrefixes, bIPv6PoolGlobalEntry=bIPv6PoolGlobalEntry, bIPv6PoolUsedPrefixHighThreshold=bIPv6PoolUsedPrefixHighThreshold, bIPPoolUsedAddrHighThreshold=bIPPoolUsedAddrHighThreshold, bIPv6PoolGroupStatsInterval=bIPv6PoolGroupStatsInterval, bIPPoolGlobalAllocReqSucc=bIPPoolGlobalAllocReqSucc, bIPPoolGlobalAllocResponses=bIPPoolGlobalAllocResponses, bIPPoolTable=bIPPoolTable, bIPv6PoolUsedPrefixLow=bIPv6PoolUsedPrefixLow, bIPv6PoolGlobalDupAllocReq=bIPv6PoolGlobalDupAllocReq, bIPPoolGroupPeakUsedAddresses=bIPPoolGroupPeakUsedAddresses, bIPPoolGlobalGroupDeAllocReqSucc=bIPPoolGlobalGroupDeAllocReqSucc, bIPv6PoolPeakFreePrefixes=bIPv6PoolPeakFreePrefixes, bIPv6PoolNotifObjects=bIPv6PoolNotifObjects, bIPPoolGroupEntry=bIPPoolGroupEntry, bIPPoolName=bIPPoolName, bIPv6PoolGroupReservedPrefixes=bIPv6PoolGroupReservedPrefixes, bIPv6PoolGlobalStaticAllocReq=bIPv6PoolGlobalStaticAllocReq, bIPv6PoolGroupEntry=bIPv6PoolGroupEntry, bIPv6PoolGlobalInvalidIPAddrCount=bIPv6PoolGlobalInvalidIPAddrCount, bIPv6PoolGlobalHashDeleteFail=bIPv6PoolGlobalHashDeleteFail, bIPv6PoolUsedPrefixLowThreshold=bIPv6PoolUsedPrefixLowThreshold, bIPPoolGroupIndex=bIPPoolGroupIndex, bIPPoolEndAddress=bIPPoolEndAddress, bIPv6PoolGlobalTable=bIPv6PoolGlobalTable, bIPv6PoolGlobalHashInsertFail=bIPv6PoolGlobalHashInsertFail, bIPv6PoolGlobalInvalidReq=bIPv6PoolGlobalInvalidReq, bIPPoolGlobalAllocReq=bIPPoolGlobalAllocReq, bIPPoolGlobalRequestedAllocatedMismacth=bIPPoolGlobalRequestedAllocatedMismacth, bIPv6PoolGroupIndex=bIPv6PoolGroupIndex, bIPPoolEntry=bIPPoolEntry, bIPv6PoolGlobalGenErrCount=bIPv6PoolGlobalGenErrCount, bIPv6PoolIntervalDuration=bIPv6PoolIntervalDuration, bIPv4PoolMIBObjects=bIPv4PoolMIBObjects, bIPv6PoolEndPrefix=bIPv6PoolEndPrefix, bIPv6PoolStatsInterval=bIPv6PoolStatsInterval, bIPPoolClientIndex=bIPPoolClientIndex, bIPPoolGlobalHashInsertFail=bIPPoolGlobalHashInsertFail, bIPPoolGroupPeakFreeAddresses=bIPPoolGroupPeakFreeAddresses, bIPv6PoolTotalPoolDeletedEvents=bIPv6PoolTotalPoolDeletedEvents, bIPPoolStatsInterval=bIPPoolStatsInterval, bIPPoolStartAddress=bIPPoolStartAddress, bIPv6PoolName=bIPv6PoolName, bIPPoolPeakFreeAddresses=bIPPoolPeakFreeAddresses, bIPPoolGlobalTable=bIPPoolGlobalTable, bIPPoolGlobalDeAllocReq=bIPPoolGlobalDeAllocReq, bIPv6PoolGlobalIntervalDuration=bIPv6PoolGlobalIntervalDuration, bIPv6PoolGlobalNotAvailCount=bIPv6PoolGlobalNotAvailCount, bIPv6PoolEntry=bIPv6PoolEntry, bIPv6PoolGlobalPoolExhaustedCount=bIPv6PoolGlobalPoolExhaustedCount, bIPv6PoolGlobalDeAllocReqSucc=bIPv6PoolGlobalDeAllocReqSucc, bIPPoolGroupTotalAddresses=bIPPoolGroupTotalAddresses, bIPPoolUsedAddrLow=bIPPoolUsedAddrLow, bIPPoolGlobalAllocReqUnSucc=bIPPoolGlobalAllocReqUnSucc, bIPv6PoolGlobalInvalidPoolNameCount=bIPv6PoolGlobalInvalidPoolNameCount, bIPv6PoolGlobalPrefixRelDueToIntAdd=bIPv6PoolGlobalPrefixRelDueToIntAdd, bIPPoolGlobalGenErrCount=bIPPoolGlobalGenErrCount, bIPPoolIndex=bIPPoolIndex, bIPv6PoolGlobalAllocResponses=bIPv6PoolGlobalAllocResponses, bIPv6PoolClientName=bIPv6PoolClientName, bIPPoolGlobalNotAvailCount=bIPPoolGlobalNotAvailCount, bIPv6PoolGlobalRequestedIPNotFree=bIPv6PoolGlobalRequestedIPNotFree, bIPPoolGlobalPoolExhaustedCount=bIPPoolGlobalPoolExhaustedCount, bIPv6PoolGlobalInvalidGroupNameCount=bIPv6PoolGlobalInvalidGroupNameCount, bIPPoolGroupReservedAddresses=bIPPoolGroupReservedAddresses, bIPPoolGlobalGroupExhaustedCount=bIPPoolGlobalGroupExhaustedCount, bIPPoolIntervalDuration=bIPPoolIntervalDuration, bIPPoolGlobalRequestedIPNotFree=bIPPoolGlobalRequestedIPNotFree, bIPPoolTotalPoolDeletedEvents=bIPPoolTotalPoolDeletedEvents, bIPv6PoolGlobalAllocReqUnSucc=bIPv6PoolGlobalAllocReqUnSucc, bIPPoolUsedAddrHigh=bIPPoolUsedAddrHigh, bIPv6PoolGlobalDeAllocReqUnSucc=bIPv6PoolGlobalDeAllocReqUnSucc, bIPPoolTotalAddresses=bIPPoolTotalAddresses, bIPPoolGroupIntervalDuration=bIPPoolGroupIntervalDuration, bIPPoolGlobalDupAllocReq=bIPPoolGlobalDupAllocReq, bIPPoolGlobalInvalidGroupNameCount=bIPPoolGlobalInvalidGroupNameCount, bIPPoolNotifications=bIPPoolNotifications, bIPv4PoolNotifObjects=bIPv4PoolNotifObjects, bIPPoolGlobalDeAllocReqSucc=bIPPoolGlobalDeAllocReqSucc, bIPv6PoolGlobalDeAllocReq=bIPv6PoolGlobalDeAllocReq, bIPv6PoolGroupPeakFreePrefixes=bIPv6PoolGroupPeakFreePrefixes, bIPPoolPeakUsedAddresses=bIPPoolPeakUsedAddresses, bIPv6PoolGroupName=bIPv6PoolGroupName, bIPPoolGlobalInvalidReq=bIPPoolGlobalInvalidReq, bIPv6PoolGroupTable=bIPv6PoolGroupTable, bIPPoolGlobalGroupDeAllocReqUnSucc=bIPPoolGlobalGroupDeAllocReqUnSucc, bIPPoolAddrExhausted=bIPPoolAddrExhausted, bIPPoolGlobalIntervalDuration=bIPPoolGlobalIntervalDuration, bIPv6PoolGlobalStatsInterval=bIPv6PoolGlobalStatsInterval, bIPv6PoolGlobalAllocReq=bIPv6PoolGlobalAllocReq, bIPv6PoolGlobalAllocReqSucc=bIPv6PoolGlobalAllocReqSucc, bIPPoolGlobalGroupDeAllocReq=bIPPoolGlobalGroupDeAllocReq, bIPv6PoolGroupPeakUsedPrefixes=bIPv6PoolGroupPeakUsedPrefixes, bIPPoolGlobalAddrRelDueToIntAdd=bIPPoolGlobalAddrRelDueToIntAdd, bIPv6PoolClientIndex=bIPv6PoolClientIndex, bIPv6PoolGrpName=bIPv6PoolGrpName, bIPv6PoolIndex=bIPv6PoolIndex, bIPv6PoolPrefixExhausted=bIPv6PoolPrefixExhausted, bIPPoolGroupTable=bIPPoolGroupTable, bIPPoolGrpName=bIPPoolGrpName, bIPPoolGlobalInvalidIPAddrCount=bIPPoolGlobalInvalidIPAddrCount, bIPv6PoolTotalPoolCreatedEvents=bIPv6PoolTotalPoolCreatedEvents, bIPv6PoolUsedPrefixHigh=bIPv6PoolUsedPrefixHigh, bIPPoolGroupName=bIPPoolGroupName, bIPPoolTotalPoolCreatedEvents=bIPPoolTotalPoolCreatedEvents, bIPPoolGlobalStatsInterval=bIPPoolGlobalStatsInterval, bIPv6PoolReservedPrefixes=bIPv6PoolReservedPrefixes, bIPv6PoolTable=bIPv6PoolTable, bIPv6PoolPeakUsedPrefixes=bIPv6PoolPeakUsedPrefixes, bIPPoolGlobalEntry=bIPPoolGlobalEntry, bIPPoolGlobalDeAllocReqUnSucc=bIPPoolGlobalDeAllocReqUnSucc, bIPv6PoolGlobalRequestedAllocatedMismacth=bIPv6PoolGlobalRequestedAllocatedMismacth, benuIPPoolMIB=benuIPPoolMIB)
