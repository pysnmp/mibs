#
# PySNMP MIB module RS-XX9-COMMON-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/rs/RS-XX9-COMMON-MIB
# Produced by pysmi-1.1.12 at Mon Oct  7 02:58:10 2024
# On host fv-az775-99 platform Linux version 6.8.0-1014-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion")
entPhysicalEntry, = mibBuilder.importSymbols("ENTITY-MIB", "entPhysicalEntry")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
rsXx9Common, rsXx9MibModule = mibBuilder.importSymbols("RS-XX9-SMI-MIB", "rsXx9Common", "rsXx9MibModule")
Xx9AmplifierType, NotificationPriority, Xx9RedundancyMode, IndexTransmitter, NotificationMask, SwitchOnOff, NotificationClass, NotificationState, EnableOption, Trigger, Xx9SystemType, Xx9ModulationMode = mibBuilder.importSymbols("RS-XX9-TC-MIB", "Xx9AmplifierType", "NotificationPriority", "Xx9RedundancyMode", "IndexTransmitter", "NotificationMask", "SwitchOnOff", "NotificationClass", "NotificationState", "EnableOption", "Trigger", "Xx9SystemType", "Xx9ModulationMode")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
sysName, = mibBuilder.importSymbols("SNMPv2-MIB", "sysName")
MibIdentifier, Gauge32, ModuleIdentity, iso, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Counter32, ObjectIdentity, IpAddress, Bits, Unsigned32, NotificationType, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Gauge32", "ModuleIdentity", "iso", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Counter32", "ObjectIdentity", "IpAddress", "Bits", "Unsigned32", "NotificationType", "Counter64")
TruthValue, TextualConvention, DisplayString, RowStatus, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "DisplayString", "RowStatus", "DateAndTime")
rsXx9CommonMibModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 2566, 149, 1, 216, 2))
rsXx9CommonMibModule.setRevisions(('2016-03-21 15:00', '2016-02-16 10:00', '2015-11-18 15:00', '2015-09-09 08:00', '2015-08-06 16:00', '2015-07-15 17:00', '2015-04-02 08:00', '2015-03-04 09:00', '2014-12-22 16:00', '2014-11-28 15:00', '2014-07-03 15:00', '2014-03-27 10:00', '2014-02-21 11:00', '2013-12-02 10:00', '2013-09-05 17:00', '2011-08-16 08:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: rsXx9CommonMibModule.setRevisionsDescriptions(('added commonEntPhysicalHardwareStatus, commonEntPhysicalConfigurationStatus, commonEntPhysicalType\n                added commonEnvSummary, commonEnvTemperature, commonEnvDewPoint\n                added commonEnvironment subtree\n                ', 'added commonDevInfoFanState and commonDevInfoOvpState notifications\n                added commonDevInfoConfigTable\n                ', 'added commonGpsConfGnssSelection, most nodes for GPS state and configuration are also valid for GLONASS', 'added commonDevInfoAcFail\n                added commonDeviceInformation\n                ', 'added swUpdateRebootPending\n                ', 'added snmpUserConfiguration', 'renamed enum labels of upsInfoBatteryStatus\n                ', 'updated description texts', 'updated description texts\n                ', 'extend value range for commonGpsStAntennaState by notMonitored', 'added commonGpsStateMonitoring', 'add UPS (uninterruptable power system) information\n                add GPS (global positioning system) configuration and status', 'update range of optionKeyIdx\n                update Description of commonOptionKeyStatus\n                ', 'updated range for optionKeyStatus', 'changes regarding NTP:\n                - obsoleting old commonTransmitterConfiguration/ntp section\n                - obsoleting old commonNtpSync notification\n                - creating new commonDateTime section (which includes NTP settings)\n                - creating new commonDateTimeNtpState notification', 'Initial revision.',))
if mibBuilder.loadTexts: rsXx9CommonMibModule.setLastUpdated('201603211500Z')
if mibBuilder.loadTexts: rsXx9CommonMibModule.setOrganization('Rohde&Schwarz GmbH & Co. KG')
if mibBuilder.loadTexts: rsXx9CommonMibModule.setContactInfo('Rohde & Schwarz GmbH & Co. KG\n                Broadcasting Division\n                \n                Muehldorfstrasse 15\n                81671 Munich\n                Germany\n                \n                customersupport@rohde-schwarz.com')
if mibBuilder.loadTexts: rsXx9CommonMibModule.setDescription('This MIB defines general objects of XX9000 transmitting systems from Rohde & Schwarz.\n                \n                Use this MIB for things all transmitters support via SNMP, e.g.:\n                - installation / configuration issues (date/time, software update etc.)\n                \n                The following MIBs are related to this:\n                - RS-COMMON-MIB         - mandatory for this MIB.\n                - RS-XX9-SMI-MIB        - mandatory for this MIB.\n                - RS-XX9-TC-MIB         - mandatory for this MIB.')
class IndexTceDevice(TextualConvention, Unsigned32):
    description = 'Index of a TCE90x.'
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 32)

class GpsPowerSource(TextualConvention, Integer32):
    description = 'Description.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("undefined", 1), ("passive", 2), ("active", 3))

rsXx9CommonNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 0))
commonNtpSync = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 0, 1)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-COMMON-MIB", "commonTxNotificationPriority"), ("RS-XX9-COMMON-MIB", "commonTxNotificationState"))
if mibBuilder.loadTexts: commonNtpSync.setStatus('obsolete')
if mibBuilder.loadTexts: commonNtpSync.setDescription('NTP synchronization state changed.\n                \n                Possible values:\n                off(2)   - NTP synchronization is disabled.\n                fault(3) - NTP synchronization failed.\n                ok(5)    - successful NTP synchronization.\n                \n                Notification class: warning\n                \n                currently not implemented')
commonSwUpdateStatus = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 0, 2)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-COMMON-MIB", "commonTxNotificationPriority"), ("RS-XX9-COMMON-MIB", "commonTxNotificationState"))
if mibBuilder.loadTexts: commonSwUpdateStatus.setStatus('current')
if mibBuilder.loadTexts: commonSwUpdateStatus.setDescription('Indicates whether the TCE900 is ready for the device software update. \n                \n                Possible values:\n                off(2) - software update finished. The TCE900 cannot be found in the \n                network by the Software Distributor. It is not possible to update the \n                software. \n                ok(5)  - software update started. The TCE900 is listed in the update list \n                of the Software Distributor and the software can be updated. \n                \n                Notification class: info')
commonFwUpdateStatus = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 0, 3)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-COMMON-MIB", "commonTxNotificationPriority"), ("RS-XX9-COMMON-MIB", "commonTxNotificationState"))
if mibBuilder.loadTexts: commonFwUpdateStatus.setStatus('current')
if mibBuilder.loadTexts: commonFwUpdateStatus.setDescription('Firmware update status.\n                \n                Possible values:\n                off(2) - firmware update finished.\n                warning(4)  - firmware update running.\n                \n                Notification class: warning')
commonOptionKeyStatus = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 0, 100)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-COMMON-MIB", "commonOpkNotificationPriority"), ("RS-XX9-COMMON-MIB", "commonOpkNotificationState"))
if mibBuilder.loadTexts: commonOptionKeyStatus.setStatus('current')
if mibBuilder.loadTexts: commonOptionKeyStatus.setDescription('Option key state in a device.\n                \n                Possible values:\n                off(2)  - no option installed\n                fault(3)   - an option expired\n                warning(4) - an option will expire\n                ok(5)      - all options ok\n                \n                Notification class: warning')
commonTest = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 0, 1000)).setObjects(("SNMPv2-MIB", "sysName"), ("RS-XX9-COMMON-MIB", "commonTrapCounter"))
if mibBuilder.loadTexts: commonTest.setStatus('current')
if mibBuilder.loadTexts: commonTest.setDescription("This notification is sent to check whether the notification sink(s) receive any \n                notification from this agent.\n                To trigger this trap, set 'sendTestNotification' to trigger(2).")
commonRising = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 0, 1001)).setObjects(("RS-XX9-COMMON-MIB", "customNotificationVariable"), ("RS-XX9-COMMON-MIB", "customNotificationValue"), ("RS-XX9-COMMON-MIB", "customNotificationRisingThreshold"), ("RS-XX9-COMMON-MIB", "customNotificationPriority"))
if mibBuilder.loadTexts: commonRising.setStatus('current')
if mibBuilder.loadTexts: commonRising.setDescription('The SNMP trap that is generated when an notificationTable\n                entry crosses its rising threshold.')
commonFalling = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 0, 1002)).setObjects(("RS-XX9-COMMON-MIB", "customNotificationVariable"), ("RS-XX9-COMMON-MIB", "customNotificationValue"), ("RS-XX9-COMMON-MIB", "customNotificationFallingThreshold"), ("RS-XX9-COMMON-MIB", "customNotificationPriority"))
if mibBuilder.loadTexts: commonFalling.setStatus('current')
if mibBuilder.loadTexts: commonFalling.setDescription('The SNMP trap that is generated when an notificationTable\n                entry crosses its falling threshold.')
commonChanging = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 0, 1003)).setObjects(("RS-XX9-COMMON-MIB", "customNotificationVariable"), ("RS-XX9-COMMON-MIB", "customNotificationValue"), ("RS-XX9-COMMON-MIB", "customNotificationPriority"))
if mibBuilder.loadTexts: commonChanging.setStatus('current')
if mibBuilder.loadTexts: commonChanging.setDescription('The SNMP trap that is generated when an notificationTable\n                entry changes its value.')
commonDateTimeNtpState = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 0, 2000)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-COMMON-MIB", "commonDateTimeNotificationPriority"), ("RS-XX9-COMMON-MIB", "commonDateTimeNotificationState"))
if mibBuilder.loadTexts: commonDateTimeNtpState.setStatus('current')
if mibBuilder.loadTexts: commonDateTimeNtpState.setDescription('If NTP time synchronization is active, this parameter indicates \n                whether communication with the NTP server is functioning.\n                 \t\n                Possible values:\n                off(2) - NTP disabled\n                fault(3) - NTP enabled and no server configured or NTP enabled and server not reachable\n                ok(5) - NTP enabled and server reachable\n                 \t\n                Notification class: warning\n                ')
commonGpsState = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 0, 3000)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-COMMON-MIB", "commonGpsNotificationPriority"), ("RS-XX9-COMMON-MIB", "commonGpsNotificationState"))
if mibBuilder.loadTexts: commonGpsState.setStatus('current')
if mibBuilder.loadTexts: commonGpsState.setDescription('The GNSS (GPS, GLONASS) receiver is not able to locate satellites. Check the antenna connection.\n                 \t\n                Possible values:\n                off(2) - \n                warning(4) - \n                ok(5) - \n                 \t\n                Notification class: info\n                ')
commonDevInfoAcFail = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 0, 4000)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-COMMON-MIB", "commonDevInfoNotificationPriority"), ("RS-XX9-COMMON-MIB", "commonDevInfoNotificationState"))
if mibBuilder.loadTexts: commonDevInfoAcFail.setStatus('current')
if mibBuilder.loadTexts: commonDevInfoAcFail.setDescription('Indicates if the capacitor battery is used to drive the device\n                only valid for TLx devices equipped with a capacitor battery\n                 \t\n                Possible values:\n                off(2) - \n                warning(4) - \n                 \t\n                Notification class: warning\n                ')
commonDevInfoFanState = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 0, 4100)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-COMMON-MIB", "commonDevInfoNotificationPriority"), ("RS-XX9-COMMON-MIB", "commonDevInfoNotificationState"))
if mibBuilder.loadTexts: commonDevInfoFanState.setStatus('current')
if mibBuilder.loadTexts: commonDevInfoFanState.setDescription('Description.')
commonDevInfoOvpState = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 0, 4200)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-COMMON-MIB", "commonDevInfoNotificationPriority"), ("RS-XX9-COMMON-MIB", "commonDevInfoNotificationState"))
if mibBuilder.loadTexts: commonDevInfoOvpState.setStatus('current')
if mibBuilder.loadTexts: commonDevInfoOvpState.setDescription('Description.')
commonEnvSummary = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 0, 5000)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-COMMON-MIB", "commonEnvNotificationPriority"), ("RS-XX9-COMMON-MIB", "commonEnvNotificationState"))
if mibBuilder.loadTexts: commonEnvSummary.setStatus('current')
if mibBuilder.loadTexts: commonEnvSummary.setDescription('Description.')
commonEnvTemperature = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 0, 5001)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-COMMON-MIB", "commonEnvNotificationPriority"), ("RS-XX9-COMMON-MIB", "commonEnvNotificationState"))
if mibBuilder.loadTexts: commonEnvTemperature.setStatus('current')
if mibBuilder.loadTexts: commonEnvTemperature.setDescription('Description.')
commonEnvDewPoint = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 0, 5002)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-COMMON-MIB", "commonEnvNotificationPriority"), ("RS-XX9-COMMON-MIB", "commonEnvNotificationState"))
if mibBuilder.loadTexts: commonEnvDewPoint.setStatus('current')
if mibBuilder.loadTexts: commonEnvDewPoint.setDescription('Description.')
rsXx9CommonObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1))
commonProductInformation = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 1))
commonEntPhysicalTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 1, 1), )
if mibBuilder.loadTexts: commonEntPhysicalTable.setStatus('current')
if mibBuilder.loadTexts: commonEntPhysicalTable.setDescription('Expansion of the entPhysicalTable.')
commonEntPhysicalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 1, 1, 1), )
entPhysicalEntry.registerAugmentions(("RS-XX9-COMMON-MIB", "commonEntPhysicalEntry"))
commonEntPhysicalEntry.setIndexNames(*entPhysicalEntry.getIndexNames())
if mibBuilder.loadTexts: commonEntPhysicalEntry.setStatus('current')
if mibBuilder.loadTexts: commonEntPhysicalEntry.setDescription('An entry in the commonEntPhysicalTable.')
commonEntPhysicalSwFwBiosNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 1, 1, 1, 1), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonEntPhysicalSwFwBiosNumber.setStatus('current')
if mibBuilder.loadTexts: commonEntPhysicalSwFwBiosNumber.setDescription('The Rohde&Schwarz identification number of the software/firmware/BIOS.')
commonEntPhysicalOperationHours = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 1, 1, 1, 2), Counter32()).setUnits('hour').setMaxAccess("readonly")
if mibBuilder.loadTexts: commonEntPhysicalOperationHours.setStatus('current')
if mibBuilder.loadTexts: commonEntPhysicalOperationHours.setDescription('Operating hours of the device.')
commonEntPhysicalPowerUpCycles = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 1, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonEntPhysicalPowerUpCycles.setStatus('current')
if mibBuilder.loadTexts: commonEntPhysicalPowerUpCycles.setDescription('Number of power up cycles of the device.')
commonEntPhysicalHardwareStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 1, 1, 1, 4), NotificationState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonEntPhysicalHardwareStatus.setStatus('current')
if mibBuilder.loadTexts: commonEntPhysicalHardwareStatus.setDescription('Description.')
commonEntPhysicalConfigurationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 1, 1, 1, 5), NotificationState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonEntPhysicalConfigurationStatus.setStatus('current')
if mibBuilder.loadTexts: commonEntPhysicalConfigurationStatus.setDescription('Description.')
commonEntPhysicalType = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 1, 1, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonEntPhysicalType.setStatus('current')
if mibBuilder.loadTexts: commonEntPhysicalType.setDescription('Description.')
commonTransmitterConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 2))
commonDateAndTime = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 2, 1), DateAndTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonDateAndTime.setStatus('current')
if mibBuilder.loadTexts: commonDateAndTime.setDescription('The current date and time for the transmitter.\n                \n                Notes: The range of distance from UTC is -12h..+14h.\n                       Omitting the optional UTC fields in a set-request results in keeping\n                       the old UTC offset value.')
ntp = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 2, 2))
ntpMode = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 2, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("disabled", 2), ("slewAdjust", 3), ("stepAdjust", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpMode.setStatus('obsolete')
if mibBuilder.loadTexts: ntpMode.setDescription('Configures the working mode of the NTP client.\n                unknown(1) - NTP mode is currently not determinable. This value must not be written.\n                disabled(2) - No NTP synchronization will be done.\n                stepAdjust(4) - Time will be synchronized every ntpSyncTimeInterval.\n                \n                currently not implemented')
ntpSyncTimeInterval = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 2, 2, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(6, 1440))).setUnits('minute').setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpSyncTimeInterval.setStatus('obsolete')
if mibBuilder.loadTexts: ntpSyncTimeInterval.setDescription('Set the interval for synchronizing the NTP client with the NTP server. \n                Note: this is useful in step mode only.\n                \n                currently not implemented')
ntpServerAddrTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 2, 2, 3), )
if mibBuilder.loadTexts: ntpServerAddrTable.setStatus('obsolete')
if mibBuilder.loadTexts: ntpServerAddrTable.setDescription('Table with server adresses.\n                Currently maximal one entry is allowed.\n                \n                currently not implemented')
ntpServerAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 2, 2, 3, 1), ).setIndexNames((0, "RS-XX9-COMMON-MIB", "ntpServerAddrIdx"))
if mibBuilder.loadTexts: ntpServerAddrEntry.setStatus('obsolete')
if mibBuilder.loadTexts: ntpServerAddrEntry.setDescription('An entry for a ntpServerAddrTable.')
ntpServerAddrIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 2, 2, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpServerAddrIdx.setStatus('obsolete')
if mibBuilder.loadTexts: ntpServerAddrIdx.setDescription('index for table entry.')
ntpServerAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 2, 2, 3, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpServerAddressType.setStatus('obsolete')
if mibBuilder.loadTexts: ntpServerAddressType.setDescription('The type of ntpServerAddress.')
ntpServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 2, 2, 3, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpServerAddress.setStatus('obsolete')
if mibBuilder.loadTexts: ntpServerAddress.setDescription('The address of the NTP server.\n                The address type is determined by the ntpServerAddressType value.')
ntpState = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 2, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 1), ("disabled", 2), ("enabled", 3), ("notRunning", 4), ("syncFailed", 5), ("synchronizing", 6), ("syncOk", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpState.setStatus('obsolete')
if mibBuilder.loadTexts: ntpState.setDescription('Shows the current state of NTP synchronization.\n                \n                currently not implemented')
ntpLastSync = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 2, 2, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpLastSync.setStatus('obsolete')
if mibBuilder.loadTexts: ntpLastSync.setDescription('The date/time of the last successful synchronization.\n                \n                currently not implemented')
softwareMaintenance = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 2, 3))
reboot = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 2, 3, 1), Trigger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reboot.setStatus('current')
if mibBuilder.loadTexts: reboot.setDescription('Reboots the R&S TCE900.\n                ')
softwareUpdate = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 2, 3, 2))
swUpdateStart = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 2, 3, 2, 1), Trigger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swUpdateStart.setStatus('current')
if mibBuilder.loadTexts: swUpdateStart.setDescription("Starts the enable phase of a software update if 'Update Mode' is set to 'Manual'. \n                The enable phase is active for approx. 90 seconds. During this time, the R&S \n                TCE900 can be found in the network by the Software Distributor.\n                ")
swUpdateMode = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 2, 3, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("manual", 1), ("permanent", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swUpdateMode.setStatus('current')
if mibBuilder.loadTexts: swUpdateMode.setDescription("Indicates how the software of the TCE900 can be updated. \n                manual(1)    - The TCE900 can be found by the Software Distributor for approx. \n                               90 seconds after the 'Start Update' button is pressed. \n                permanent(2) - The TCE900 can be found by the Software Distributor at any \n                               time. The software can be updated at any time without the TCE900 \n                               needing to be prepared for a software update. \n                \n                The setting can be changed here.\n                ")
swUpdateDeviceName = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 2, 3, 2, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swUpdateDeviceName.setStatus('current')
if mibBuilder.loadTexts: swUpdateDeviceName.setDescription('Shows the device name under which this R&S TCE900 appears \n                in the list of the Software Distributor. The setting can be \n                changed here.\n                ')
swUpdateDeviceGroup = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 2, 3, 2, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swUpdateDeviceGroup.setStatus('current')
if mibBuilder.loadTexts: swUpdateDeviceGroup.setDescription('Shows the device group. The displayed device group must be the same \n                as the device group set in the Software Distributor so that this R&S \n                TCE900 is displayed in the list of devices found by the Software Distributor. \n                ')
swUpdateRebootPending = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 2, 3, 2, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swUpdateRebootPending.setStatus('current')
if mibBuilder.loadTexts: swUpdateRebootPending.setDescription('Indicates, whether this device is updating the firmware of internal components. \n                After these updates are finished, the device will reboot.\n                ')
commonTxNotificationTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 2, 4), )
if mibBuilder.loadTexts: commonTxNotificationTable.setStatus('current')
if mibBuilder.loadTexts: commonTxNotificationTable.setDescription('The context information/configuration for the notifications\n                commonSwUpdateStarted, commonFwUpdateStatus')
commonTxNotificationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 2, 4, 1), ).setIndexNames((0, "RS-XX9-COMMON-MIB", "commonTxNotificationIdx"))
if mibBuilder.loadTexts: commonTxNotificationEntry.setStatus('current')
if mibBuilder.loadTexts: commonTxNotificationEntry.setDescription('An entry in the commonTxNotificationTable.')
commonTxNotificationIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 2, 4, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)))
if mibBuilder.loadTexts: commonTxNotificationIdx.setStatus('current')
if mibBuilder.loadTexts: commonTxNotificationIdx.setDescription('The notification number as below rsXx9CommonNotifications.\n                This is a helper column and therefore not-accessible.')
commonTxNotificationName = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("commonSwUpdateStatus", 2), ("commonFwUpdateStatus", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonTxNotificationName.setStatus('current')
if mibBuilder.loadTexts: commonTxNotificationName.setDescription('The notification number as an enumeration.\n                The enumeration correlates with the notifications under rsXx9CommonNotifications.')
commonTxNotificationMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 2, 4, 1, 3), NotificationMask()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonTxNotificationMask.setStatus('current')
if mibBuilder.loadTexts: commonTxNotificationMask.setDescription('See TextualConvention for details.')
commonTxNotificationPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 2, 4, 1, 4), NotificationPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonTxNotificationPriority.setStatus('current')
if mibBuilder.loadTexts: commonTxNotificationPriority.setDescription('See TextualConvention for details.')
commonTxNotificationState = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 2, 4, 1, 5), NotificationState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonTxNotificationState.setStatus('current')
if mibBuilder.loadTexts: commonTxNotificationState.setDescription('See TextualConvention for details.')
commonTxFunctions = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 2, 5))
commonFuncSystemControl = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 2, 5, 1), EnableOption()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonFuncSystemControl.setStatus('current')
if mibBuilder.loadTexts: commonFuncSystemControl.setDescription('If enabled, the device has system control functionality.\n                Objects below commonSystemControl have meaningful values.')
commonFuncTxControl = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 2, 5, 2), EnableOption()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonFuncTxControl.setStatus('current')
if mibBuilder.loadTexts: commonFuncTxControl.setDescription('If enabled, the device has transmitter control functionality.\n                Objects below commonTxControl have meaningful values.')
commonFuncSignalProcessing = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 2, 5, 3), EnableOption()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonFuncSignalProcessing.setStatus('current')
if mibBuilder.loadTexts: commonFuncSignalProcessing.setDescription('If enabled, the device has signal processing functionality.')
commonFuncCoolingControl = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 2, 5, 4), EnableOption()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonFuncCoolingControl.setStatus('current')
if mibBuilder.loadTexts: commonFuncCoolingControl.setDescription('If enabled, the device has cooling control functionality.')
commonFuncRackControl = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 2, 5, 5), EnableOption()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonFuncRackControl.setStatus('current')
if mibBuilder.loadTexts: commonFuncRackControl.setDescription('If enabled, the device has rack control functionality.')
commonSystemControl = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 2, 6))
commonSystemType = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 2, 6, 1), Xx9SystemType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonSystemType.setStatus('current')
if mibBuilder.loadTexts: commonSystemType.setDescription('See textual convention for details.')
commonSystemNumberOfTxA = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 2, 6, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonSystemNumberOfTxA.setStatus('current')
if mibBuilder.loadTexts: commonSystemNumberOfTxA.setDescription('In the case of multi-transmitter systems, the number\n                of transmitters which normally broadcast programs.')
commonTxControlTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 2, 7), )
if mibBuilder.loadTexts: commonTxControlTable.setStatus('current')
if mibBuilder.loadTexts: commonTxControlTable.setDescription('Transmitter control properties for each transmitter.')
commonTxControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 2, 7, 1), ).setIndexNames((0, "RS-XX9-COMMON-MIB", "cmnTxCtrlTxIdx"))
if mibBuilder.loadTexts: commonTxControlEntry.setStatus('current')
if mibBuilder.loadTexts: commonTxControlEntry.setDescription('An entry in the commonTxControlTable.')
cmnTxCtrlTxIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 2, 7, 1, 1), IndexTransmitter())
if mibBuilder.loadTexts: cmnTxCtrlTxIdx.setStatus('current')
if mibBuilder.loadTexts: cmnTxCtrlTxIdx.setDescription('transmitter index')
cmnTxCtrlRedundancyMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 2, 7, 1, 2), Xx9RedundancyMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmnTxCtrlRedundancyMode.setStatus('current')
if mibBuilder.loadTexts: cmnTxCtrlRedundancyMode.setDescription('Transmitter redundancy mode.')
cmnTxCtrlModulationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 2, 7, 1, 3), Xx9ModulationMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmnTxCtrlModulationMode.setStatus('current')
if mibBuilder.loadTexts: cmnTxCtrlModulationMode.setDescription('Transmitter modulation mode.')
cmnTxCtrlAmplifierType = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 2, 7, 1, 4), Xx9AmplifierType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmnTxCtrlAmplifierType.setStatus('current')
if mibBuilder.loadTexts: cmnTxCtrlAmplifierType.setDescription('Type of amplifiers for transmitter.')
commonSnmpConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 3))
sendTestNotification = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 3, 1), Trigger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sendTestNotification.setStatus('current')
if mibBuilder.loadTexts: sendTestNotification.setDescription("Agent generates the notification 'commonTest', which is useful when checking the\n                connection between agent (transmitter control unit) and your notification sink(s).")
irtNotificationsAllOn = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 3, 2), Trigger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: irtNotificationsAllOn.setStatus('current')
if mibBuilder.loadTexts: irtNotificationsAllOn.setDescription('This enables all IRT notifications.\n                \n                In detail, this means in the IRT-MIBs under branches *EventEnable all\n                object instances are set to true(1).\n                \n                Caution!\n                Setting this value influences remote controlling of devices.\n                Too many alarms may flood your network. Use this only for testing - for \n                operation, we suggest switch on only a few important traps.')
irtNotificationsAllOff = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 3, 3), Trigger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: irtNotificationsAllOff.setStatus('current')
if mibBuilder.loadTexts: irtNotificationsAllOff.setDescription("This disables all IRT notifications.\n                \n                In detail, this means in the IRT-MIBs under branches *EventEnable all\n                object instances are set to false(2).\n                \n                Note: This is typically set when using only R&S-MIBs \n                and you don't need IRT-MIBs.")
rsNotificationsAllOn = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 3, 4), Trigger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsNotificationsAllOn.setStatus('current')
if mibBuilder.loadTexts: rsNotificationsAllOn.setDescription('This enables all R&S notifications.\n                \n                In detail, this means in the R&S-MIBs *NotificationTable in\n                column *NotificationMask all object instances are set to enable(1).\n                \n                Caution!\n                Enabling all notifications is not recommended!\n                \n                Caution!\n                Setting this value influences remote controlling of devices!\n                Too many notifications may flood your network. Use this only for testing - for \n                operation, we suggest switch on only a few important notifications.\n                \n                Caution!\n                This enables absolutely all R&S notifications!\n                Make sure you can handle it (network speed, routers, firewalls, NOC database performance etc.).')
rsNotificationsAllOff = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 3, 5), Trigger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsNotificationsAllOff.setStatus('current')
if mibBuilder.loadTexts: rsNotificationsAllOff.setDescription("This disables all R&S notifications.\n                \n                In detail, this means in the R&S-MIBs under *NotificationTable in\n                column *NotificationMask all object instances are set to disable(2).\n                \n                Note: This is typically set when using only IRT-MIBs \n                and you don't need R&S-MIBs.")
rsNotificationsAllFaultsOn = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 3, 6), Trigger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsNotificationsAllFaultsOn.setStatus('current')
if mibBuilder.loadTexts: rsNotificationsAllFaultsOn.setDescription("This enables all R&S notifications of class fault(1).\n                \n                In detail, this means in the R&S-MIBs under *NotificationTable in column *NotificationMask\n                all object instances with value fault(1) for binding 'commonNotificationAlarmClass'\n                are set to enable(1).\n                \n                Note: This is the recommended setting when using R&S-MIBs. It gives you an \n                overview of the device state.")
rsNotificationsAllFaultsOff = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 3, 7), Trigger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsNotificationsAllFaultsOff.setStatus('current')
if mibBuilder.loadTexts: rsNotificationsAllFaultsOff.setDescription("This disables all R&S notifications of class fault(1).\n                \n                In detail, this means in the R&S-MIBs under *NotificationTable in column *NotificationMask\n                all object instances with value fault(1) for binding 'commonNotificationAlarmClass'\n                are set to disable(2).")
rsNotificationsAllWarningsOn = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 3, 8), Trigger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsNotificationsAllWarningsOn.setStatus('current')
if mibBuilder.loadTexts: rsNotificationsAllWarningsOn.setDescription("This enables all R&S notifications of class warning(2).\n                \n                In detail, this means in the R&S-MIBs under *NotificationTable in column *NotificationMask\n                all object instances with value warning(2) for binding 'commonNotificationAlarmClass'\n                are set to enable(1).\n                \n                \n                Note: This is the recommended setting when using R&S-MIBs and you want much more \n                informations from the device than only faults. \n                \n                Caution!\n                This enables lots of notifications.\n                Make sure you can handle it (network speed, NOC database performance etc.)...")
rsNotificationsAllWarningsOff = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 3, 9), Trigger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsNotificationsAllWarningsOff.setStatus('current')
if mibBuilder.loadTexts: rsNotificationsAllWarningsOff.setDescription("This disables all R&S notifications of class warning(2).\n                \n                In detail, this means in the R&S-MIBs under *NotificationTable in column *NotificationMask\n                all object instances with value warning(2) for binding 'commonNotificationAlarmClass'\n                are set to disable(2).")
customNotificationTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 3, 10), )
if mibBuilder.loadTexts: customNotificationTable.setStatus('current')
if mibBuilder.loadTexts: customNotificationTable.setDescription('A list of notification entries.')
customNotificationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 3, 10, 1), ).setIndexNames((0, "RS-XX9-COMMON-MIB", "customNotificationIndex"))
if mibBuilder.loadTexts: customNotificationEntry.setStatus('current')
if mibBuilder.loadTexts: customNotificationEntry.setDescription('A conceptual row in the notificationTable.')
customNotificationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 3, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: customNotificationIndex.setStatus('current')
if mibBuilder.loadTexts: customNotificationIndex.setDescription('An index that uniquely identifies an entry in the\n                notificationTable.  Each such entry defines a\n                diagnostic sample for an object on the device.')
customNotificationInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 3, 10, 1, 2), Unsigned32().clone(10)).setUnits('second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: customNotificationInterval.setStatus('current')
if mibBuilder.loadTexts: customNotificationInterval.setDescription('The interval in seconds over which the data is sampled\n                and compared according to customNotificationSampleType.\n                \n                This object may not be modified if the associated\n                customNotificationStatus object is equal to active(1).')
customNotificationVariable = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 3, 10, 1, 3), ObjectIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: customNotificationVariable.setStatus('current')
if mibBuilder.loadTexts: customNotificationVariable.setDescription('The object identifier of the particular variable to be\n                sampled.  Only integer variables may be sampled.\n                \n                Because SNMP access control is articulated entirely\n                in terms of the contents of MIB views, no access\n                control mechanism exists that can restrict the value of\n                this object to identify only those objects that exist\n                in a particular MIB view.  Because there is thus no\n                acceptable means of restricting the read access that\n                could be obtained through the notification mechanism,\n                the probe must only grant write access to this object in\n                those views that have read access to all objects on\n                the probe.\n                \n                During a set operation, if the supplied variable name is\n                not available in the selected MIB view, a badValue error\n                must be returned.  If at any time the variable name of\n                an established notificationEntry is no longer available in the\n                selected MIB view, the probe must change the status of\n                this notificationEntry to invalid(4).\n                \n                This object may not be modified if the associated\n                customNotificationStatus object is equal to active(1).')
customNotificationSampleType = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 3, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("absoluteValue", 1), ("changingValue", 2))).clone('absoluteValue')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: customNotificationSampleType.setStatus('current')
if mibBuilder.loadTexts: customNotificationSampleType.setDescription('If the value of this object is absoluteValue(1),\n                the value of the selected variable will be compared\n                with the thresholds at the end of the sampling interval.\n                If the value of this object is changingValue(2),\n                the value of the selected variable at the last sample\n                will be compared with the current value,\n                and a difference will lead to a commonChanging notification.\n                \n                This object may not be modified if the associated\n                customNotificationStatus object is equal to active(1).')
customNotificationValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 3, 10, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: customNotificationValue.setStatus('current')
if mibBuilder.loadTexts: customNotificationValue.setDescription('The value of the statistic during the last sampling period.\n                This is the value that is compared with the rising and\n                falling thresholds.\n                \n                The value during the current sampling period is not\n                made available until the period is completed and will\n                remain available until the next period completes.')
customNotificationRisingThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 3, 10, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: customNotificationRisingThreshold.setStatus('current')
if mibBuilder.loadTexts: customNotificationRisingThreshold.setDescription('A threshold for the sampled statistic.  When the current\n                sampled value is greater than or equal to this threshold,\n                and the value at the last sampling interval was less than\n                this threshold, a single event will be generated.\n                \n                After a rising event is generated, another such event\n                will not be generated until the sampled value\n                falls below this threshold and reaches the\n                notificationFallingThreshold.\n                \n                This object may not be modified if the associated\n                customNotificationStatus is equal to active(1).')
customNotificationFallingThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 3, 10, 1, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: customNotificationFallingThreshold.setStatus('current')
if mibBuilder.loadTexts: customNotificationFallingThreshold.setDescription('A threshold for the sampled statistic.  When the current\n                sampled value is less than or equal to this threshold,\n                and the value at the last sampling interval was greater than\n                this threshold, a single event will be generated.\n                \n                After a falling event is generated, another such event\n                will not be generated until the sampled value\n                rises above this threshold and reaches the\n                notificationRisingThreshold.\n                \n                This object may not be modified if the associated\n                customNotificationStatus object is equal to active(1).')
customNotificationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 3, 10, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: customNotificationStatus.setStatus('current')
if mibBuilder.loadTexts: customNotificationStatus.setDescription('Control for creating and deleting entries.\n                Entries may not be modified while active.')
customNotificationPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 3, 10, 1, 9), NotificationPriority().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: customNotificationPriority.setStatus('current')
if mibBuilder.loadTexts: customNotificationPriority.setDescription('Priority of a generated notification.\n                \n                This object may not be modified if the associated\n                customNotificationStatus object is equal to active(1).')
snmpUserConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 3, 11))
snmpEnable = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 3, 11, 1), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpEnable.setStatus('current')
if mibBuilder.loadTexts: snmpEnable.setDescription('Switch SNMP off.\n                Please note, that you can not turn SNMP on via this OID if SNMP is in the OFF state.\n                ')
snmpSyncTrapSinks = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 3, 11, 2), Trigger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpSyncTrapSinks.setStatus('current')
if mibBuilder.loadTexts: snmpSyncTrapSinks.setDescription('Synchronize SNMP trap sinks. All enabled traps (IRT and R&S) \n                are sent to all enabled trap sinks.')
commonNotificationBindings = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 4))
commonNotificationAlarmClass = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 4, 1), NotificationClass()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: commonNotificationAlarmClass.setStatus('current')
if mibBuilder.loadTexts: commonNotificationAlarmClass.setDescription('See TextualConvention for details.')
commonTrapCounter = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 4, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonTrapCounter.setStatus('current')
if mibBuilder.loadTexts: commonTrapCounter.setDescription('The total number of SNMP Trap PDUs which have\n                been generated by the SNMP protocol entity.')
commonOptionManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 5))
installOpkTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 5, 1), )
if mibBuilder.loadTexts: installOpkTable.setStatus('current')
if mibBuilder.loadTexts: installOpkTable.setDescription('This Table gives the facility for activation/deactivation\n                of an option key.')
installOpkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 5, 1, 1), ).setIndexNames((0, "RS-XX9-COMMON-MIB", "instOpkDeviceIdx"))
if mibBuilder.loadTexts: installOpkEntry.setStatus('current')
if mibBuilder.loadTexts: installOpkEntry.setDescription('An entry for a TCE900.')
instOpkDeviceIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 5, 1, 1, 1), IndexTceDevice())
if mibBuilder.loadTexts: instOpkDeviceIdx.setStatus('current')
if mibBuilder.loadTexts: instOpkDeviceIdx.setDescription('Index of a TCE90x or TLx.')
instOpkDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 5, 1, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: instOpkDeviceName.setStatus('current')
if mibBuilder.loadTexts: instOpkDeviceName.setDescription('Name of the TCE90x or TLx.')
instOpkNewKey = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 5, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: instOpkNewKey.setStatus('current')
if mibBuilder.loadTexts: instOpkNewKey.setDescription('Setting this object you install an option key for the specified device. \n                Querying this object you get the last set optionkey or an empty string.')
instOpkMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 5, 1, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: instOpkMessage.setStatus('current')
if mibBuilder.loadTexts: instOpkMessage.setDescription('When setting instOpkNewKey,\n                there is a message showing the result of the action.')
optionKeyTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 5, 2), )
if mibBuilder.loadTexts: optionKeyTable.setStatus('current')
if mibBuilder.loadTexts: optionKeyTable.setDescription('This table includes information about installed option keys.')
optionKeyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 5, 2, 1), ).setIndexNames((0, "RS-XX9-COMMON-MIB", "instOpkDeviceIdx"), (0, "RS-XX9-COMMON-MIB", "optionKeyIdx"))
if mibBuilder.loadTexts: optionKeyEntry.setStatus('current')
if mibBuilder.loadTexts: optionKeyEntry.setDescription('An entry for a certain option key.')
optionKeyIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 5, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 50)))
if mibBuilder.loadTexts: optionKeyIdx.setStatus('current')
if mibBuilder.loadTexts: optionKeyIdx.setDescription('This is the tables index column for a certain option key.')
optionKeyNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 5, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: optionKeyNumber.setStatus('current')
if mibBuilder.loadTexts: optionKeyNumber.setDescription('This is a part of the R&S material number of the option. \n                K0 is always a demo key, K2 and further are the options. \n                See column optionKeyName for the clear-text name.')
optionKeyName = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 5, 2, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optionKeyName.setStatus('current')
if mibBuilder.loadTexts: optionKeyName.setDescription('The option name as text (e.g. SNMP).')
optionKeyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("deactivated", 1), ("installed", 2), ("warning", 3), ("fault", 4), ("empty", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: optionKeyStatus.setStatus('current')
if mibBuilder.loadTexts: optionKeyStatus.setDescription('The status of this option key. \n                deactivated(1) means, the function is locked. Typically a demo key ran out.\n                installed(2) means, the function is unlocked and operable.\n                warning(3) means, the option is expired.\n                fault(4) means, the option is required, but not installed.\n                ')
optionKeyValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 5, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optionKeyValidity.setStatus('current')
if mibBuilder.loadTexts: optionKeyValidity.setDescription("The validity range, e.g. '10 days left'.")
deactivationTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 5, 3), )
if mibBuilder.loadTexts: deactivationTable.setStatus('current')
if mibBuilder.loadTexts: deactivationTable.setDescription('This table includes information about temporary optionkeys and their\n                status.')
deactivationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 5, 3, 1), ).setIndexNames((0, "RS-XX9-COMMON-MIB", "instOpkDeviceIdx"), (0, "RS-XX9-COMMON-MIB", "deactivationIdx"))
if mibBuilder.loadTexts: deactivationEntry.setStatus('current')
if mibBuilder.loadTexts: deactivationEntry.setDescription('An entry for a certain option key.')
deactivationIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 5, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)))
if mibBuilder.loadTexts: deactivationIdx.setStatus('current')
if mibBuilder.loadTexts: deactivationIdx.setDescription('The index for a certain deactivation key.')
deactivationKeyNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 5, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deactivationKeyNumber.setStatus('current')
if mibBuilder.loadTexts: deactivationKeyNumber.setDescription('This is a part of the R&S material number of the option. \n                K0 is always a demo key, K2 and further are the options. \n                See column deactivationKeyName for the clear-text name.')
deactivationKeyName = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 5, 3, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deactivationKeyName.setStatus('current')
if mibBuilder.loadTexts: deactivationKeyName.setDescription('The option name as text (e.g. SNMP).')
deactivationResponse = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 5, 3, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deactivationResponse.setStatus('current')
if mibBuilder.loadTexts: deactivationResponse.setDescription('This is what customers send to R&S\n                to ensure the option key is deactivated correctly.')
commonOpkNotificationTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 5, 4), )
if mibBuilder.loadTexts: commonOpkNotificationTable.setStatus('current')
if mibBuilder.loadTexts: commonOpkNotificationTable.setDescription('The context information/configuration for the notifications\n                commonOptionKeyStatus')
commonOpkNotificationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 5, 4, 1), ).setIndexNames((0, "RS-XX9-COMMON-MIB", "instOpkDeviceIdx"), (0, "RS-XX9-COMMON-MIB", "commonOpkNotificationIdx"))
if mibBuilder.loadTexts: commonOpkNotificationEntry.setStatus('current')
if mibBuilder.loadTexts: commonOpkNotificationEntry.setDescription('An entry in the commonOpkNotificationTable.')
commonOpkNotificationIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 5, 4, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(100, 100)))
if mibBuilder.loadTexts: commonOpkNotificationIdx.setStatus('current')
if mibBuilder.loadTexts: commonOpkNotificationIdx.setDescription('The notification number as below rsXx9CommonNotifications.\n                This is a helper column and therefore not-accessible.')
commonOpkNotificationName = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 5, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(100))).clone(namedValues=NamedValues(("commonOptionKeyStatus", 100)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonOpkNotificationName.setStatus('current')
if mibBuilder.loadTexts: commonOpkNotificationName.setDescription('The notification number as an enumeration.\n                The enumeration correlates with the notifications under rsXx9CommonNotifications.')
commonOpkNotificationMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 5, 4, 1, 4), NotificationMask()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonOpkNotificationMask.setStatus('current')
if mibBuilder.loadTexts: commonOpkNotificationMask.setDescription('See TextualConvention for details.')
commonOpkNotificationPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 5, 4, 1, 5), NotificationPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonOpkNotificationPriority.setStatus('current')
if mibBuilder.loadTexts: commonOpkNotificationPriority.setDescription('See TextualConvention for details.')
commonOpkNotificationState = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 5, 4, 1, 6), NotificationState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonOpkNotificationState.setStatus('current')
if mibBuilder.loadTexts: commonOpkNotificationState.setDescription('See TextualConvention for details.')
commonDateTime = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 6))
commonDateTimeConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 6, 1), )
if mibBuilder.loadTexts: commonDateTimeConfigurationTable.setStatus('current')
if mibBuilder.loadTexts: commonDateTimeConfigurationTable.setDescription('This Table gives the possibility for configuration\n                of Date, Time and the NTP client.')
commonDateTimeConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 6, 1, 1), ).setIndexNames((0, "RS-XX9-COMMON-MIB", "commonDateTimeConfDeviceIdx"))
if mibBuilder.loadTexts: commonDateTimeConfigurationEntry.setStatus('current')
if mibBuilder.loadTexts: commonDateTimeConfigurationEntry.setDescription('A DateTime configuration entry for a TCE900.')
commonDateTimeConfDeviceIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 6, 1, 1, 1), IndexTceDevice())
if mibBuilder.loadTexts: commonDateTimeConfDeviceIdx.setStatus('current')
if mibBuilder.loadTexts: commonDateTimeConfDeviceIdx.setDescription('Index of a TCE90x or TLx.')
commonDateTimeConfDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 6, 1, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonDateTimeConfDeviceName.setStatus('current')
if mibBuilder.loadTexts: commonDateTimeConfDeviceName.setDescription('Name of the TCE90x or TLx.')
commonDateTimeConfLocalDateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 6, 1, 1, 3), DateAndTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonDateTimeConfLocalDateTime.setStatus('current')
if mibBuilder.loadTexts: commonDateTimeConfLocalDateTime.setDescription('Shows the local date and time. The time can be changed here. The time is \n                entered in coordinated universal time (UTC) format. It is therefore \n                recommended to correctly set the local time offset relative to \n                UTC before changing the time. The local time offset must be set by\n                using commonDateTimeConfLocalTimeOffset\n                \n                Notes: The range of distance from UTC is -12h..+14h.\n                       Omitting the optional UTC fields in a set-request results in keeping\n                       the old UTC offset value.')
commonDateTimeConfLocalTimeOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-720, 840))).setUnits('minute').setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonDateTimeConfLocalTimeOffset.setStatus('current')
if mibBuilder.loadTexts: commonDateTimeConfLocalTimeOffset.setDescription('Shows the local time offset relative to UTC. The time offset is \n                calculated from the time zone + summer time. The time offset \n                can be changed here and has a direct effect on the displayed \n                local time. It is therefore recommended to check (and if \n                necessary to correct) the local time offset before setting \n                the local time.\n                ')
commonDateTimeConfNtpEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 6, 1, 1, 5), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonDateTimeConfNtpEnable.setStatus('current')
if mibBuilder.loadTexts: commonDateTimeConfNtpEnable.setDescription('Activates synchronization of the time of this TCE900 with an external \n                or internal NTP server.\n                ')
commonDateTimeConfNtpServer = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 6, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonDateTimeConfNtpServer.setStatus('current')
if mibBuilder.loadTexts: commonDateTimeConfNtpServer.setDescription('Shows the IP address of the NTP server. If available, an external NTP \n                server should be entered for the TCE900 SysCtrl. This field can be left \n                empty for lower-level TCE units that are to be synchronized with the \n                TCE900 SysCtrl. In this case, synchronization takes place via NTP \n                broadcast. Alternatively, the IP address of the TCE900 SysCtrl can \n                also be entered for lower-level devices.\n                ')
commonDateTimeNotificationTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 6, 2), )
if mibBuilder.loadTexts: commonDateTimeNotificationTable.setStatus('current')
if mibBuilder.loadTexts: commonDateTimeNotificationTable.setDescription('The context information/configuration for the notification commonDateTimeNtpState.')
commonDateTimeNotificationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 6, 2, 1), ).setIndexNames((0, "RS-XX9-COMMON-MIB", "commonDateTimeNotificationDeviceIdx"), (0, "RS-XX9-COMMON-MIB", "commonDateTimeNotificationIdx"))
if mibBuilder.loadTexts: commonDateTimeNotificationEntry.setStatus('current')
if mibBuilder.loadTexts: commonDateTimeNotificationEntry.setDescription('An entry in the commonDateTimeNotificationTable.')
commonDateTimeNotificationDeviceIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 6, 2, 1, 1), IndexTceDevice())
if mibBuilder.loadTexts: commonDateTimeNotificationDeviceIdx.setStatus('current')
if mibBuilder.loadTexts: commonDateTimeNotificationDeviceIdx.setDescription('Index of a TCE90x or TLx.')
commonDateTimeNotificationIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 6, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2000, 2000)))
if mibBuilder.loadTexts: commonDateTimeNotificationIdx.setStatus('current')
if mibBuilder.loadTexts: commonDateTimeNotificationIdx.setDescription('The notification number as below rsXx9CommonNotifications.\n                This is a helper column and therefore not-accessible.')
commonDateTimeNotificationName = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 6, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2000))).clone(namedValues=NamedValues(("commonDateTimeNtpState", 2000)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonDateTimeNotificationName.setStatus('current')
if mibBuilder.loadTexts: commonDateTimeNotificationName.setDescription('The notification number as an enumeration.\n                The enumeration correlates with the notifications under rsXx9CommonNotifications.')
commonDateTimeNotificationMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 6, 2, 1, 4), NotificationMask()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonDateTimeNotificationMask.setStatus('current')
if mibBuilder.loadTexts: commonDateTimeNotificationMask.setDescription('See TextualConvention for details.')
commonDateTimeNotificationPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 6, 2, 1, 5), NotificationPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonDateTimeNotificationPriority.setStatus('current')
if mibBuilder.loadTexts: commonDateTimeNotificationPriority.setDescription('See TextualConvention for details.')
commonDateTimeNotificationState = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 6, 2, 1, 6), NotificationState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonDateTimeNotificationState.setStatus('current')
if mibBuilder.loadTexts: commonDateTimeNotificationState.setDescription('See TextualConvention for details.')
commonUPS = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 7))
upsInformationTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 7, 1), )
if mibBuilder.loadTexts: upsInformationTable.setStatus('current')
if mibBuilder.loadTexts: upsInformationTable.setDescription('Information about UPS for TCEs.\n                Several TCEs may be connected to the same UPS.\n                In this case the same information is listed\n                for each of this TCEs.')
upsInformationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 7, 1, 1), ).setIndexNames((0, "RS-XX9-COMMON-MIB", "upsInfoDeviceIdx"))
if mibBuilder.loadTexts: upsInformationEntry.setStatus('current')
if mibBuilder.loadTexts: upsInformationEntry.setDescription('An entry in the upsInformationTable.')
upsInfoDeviceIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 7, 1, 1, 1), IndexTceDevice())
if mibBuilder.loadTexts: upsInfoDeviceIdx.setStatus('current')
if mibBuilder.loadTexts: upsInfoDeviceIdx.setDescription('Index of a TCE90x or TLx.')
upsInfoWithUPS = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unconfigured", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInfoWithUPS.setStatus('current')
if mibBuilder.loadTexts: upsInfoWithUPS.setDescription("This TCE900 is connected to UPS.\n                \n                If the value isn't enabled(3),\n                values for the other columns are not delivered for this TCE900.")
upsInfoLink = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 7, 1, 1, 3), NotificationState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInfoLink.setStatus('current')
if mibBuilder.loadTexts: upsInfoLink.setDescription('State of communication link to UPS.')
upsInfoManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 7, 1, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInfoManufacturer.setStatus('current')
if mibBuilder.loadTexts: upsInfoManufacturer.setDescription('name of the UPS manufacturer')
upsInfoModel = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 7, 1, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInfoModel.setStatus('current')
if mibBuilder.loadTexts: upsInfoModel.setDescription('UPS model designation')
upsInfoSoftwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 7, 1, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInfoSoftwareVersion.setStatus('current')
if mibBuilder.loadTexts: upsInfoSoftwareVersion.setDescription('UPS firmware/software version(s)')
upsInfoName = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 7, 1, 1, 7), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInfoName.setStatus('current')
if mibBuilder.loadTexts: upsInfoName.setDescription('identifying the UPS')
upsInfoAttachedDevices = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 7, 1, 1, 8), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInfoAttachedDevices.setStatus('current')
if mibBuilder.loadTexts: upsInfoAttachedDevices.setDescription('identifying the devices attached to the output(s) of the UPS')
upsInfoBatteryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 7, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("low", 3), ("deplated", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInfoBatteryStatus.setStatus('current')
if mibBuilder.loadTexts: upsInfoBatteryStatus.setDescription("indication of the capacity remaining in the UPS system's batteries")
upsInfoSecondsOnBattery = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 7, 1, 1, 10), Unsigned32()).setUnits('second').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInfoSecondsOnBattery.setStatus('current')
if mibBuilder.loadTexts: upsInfoSecondsOnBattery.setDescription('If the unit is on battery power,\n                the elapsed time since the UPS last switched to battery power.')
upsInfoMinutesRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 7, 1, 1, 11), Unsigned32()).setUnits('minute').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInfoMinutesRemaining.setStatus('current')
if mibBuilder.loadTexts: upsInfoMinutesRemaining.setDescription('an estimate of the time to battery charge depletion')
upsInfoChargeRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 7, 1, 1, 12), Unsigned32()).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInfoChargeRemaining.setStatus('current')
if mibBuilder.loadTexts: upsInfoChargeRemaining.setDescription('an estimate of the battery charge remaining')
upsInfoOutputSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 7, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("none", 2), ("normal", 3), ("bypass", 4), ("battery", 5), ("booster", 6), ("reducer", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInfoOutputSource.setStatus('current')
if mibBuilder.loadTexts: upsInfoOutputSource.setDescription('present source of output power')
upsInfoOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 7, 1, 1, 14), Unsigned32()).setUnits('W').setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInfoOutputPower.setStatus('current')
if mibBuilder.loadTexts: upsInfoOutputPower.setDescription('power summed up over all output lines')
upsInfoSelftestResult = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 7, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("donePass", 1), ("doneWarning", 2), ("doneError", 3), ("aborted", 4), ("inProgress", 5), ("noTestInitiated", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInfoSelftestResult.setStatus('current')
if mibBuilder.loadTexts: upsInfoSelftestResult.setDescription('results of the current or last UPS diagnostics test performed')
commonGPS = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 8))
commonGpsConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 8, 1), )
if mibBuilder.loadTexts: commonGpsConfigurationTable.setStatus('current')
if mibBuilder.loadTexts: commonGpsConfigurationTable.setDescription('Table to configure GNSS (GPS, GLONASS)')
commonGpsConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 8, 1, 1), ).setIndexNames((0, "RS-XX9-COMMON-MIB", "commonGpsConfDeviceIdx"))
if mibBuilder.loadTexts: commonGpsConfigurationEntry.setStatus('current')
if mibBuilder.loadTexts: commonGpsConfigurationEntry.setDescription('An entry in the commonGpsConfigurationTable')
commonGpsConfDeviceIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 8, 1, 1, 1), IndexTceDevice())
if mibBuilder.loadTexts: commonGpsConfDeviceIdx.setStatus('current')
if mibBuilder.loadTexts: commonGpsConfDeviceIdx.setDescription('Index of a TCE90x or TLx.')
commonGpsConfDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 8, 1, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonGpsConfDeviceName.setStatus('current')
if mibBuilder.loadTexts: commonGpsConfDeviceName.setDescription('Name of the TCE90x or TLx.')
commonGpsConfAntennaType = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 8, 1, 1, 3), GpsPowerSource()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonGpsConfAntennaType.setStatus('current')
if mibBuilder.loadTexts: commonGpsConfAntennaType.setDescription("Indicates which antenna type is being used. \n                Passive: The R&S TCE90x exciter does not provide a supply voltage \n                for a GNSS antenna. \n                Active: The R&S TCE90x exciter provides a 5 V supply voltage for a \n                GNSS antenna. The setting can be changed here. If the antenna \n                supplied by Rohde & Schwarz is used, the 'Active' antenna type \n                must be selected.\n                ")
commonGpsStateMonitoring = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 8, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("undefined", 1), ("off", 2), ("on", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonGpsStateMonitoring.setStatus('current')
if mibBuilder.loadTexts: commonGpsStateMonitoring.setDescription('turns the commonGpsState notification on and off. \n                This is useful in the case, that no GNSS module shall be used. \n                By default, the notification is on, if a GPS optionKey is installed, \n                otherwise it is off. \n                ')
commonGpsConfGnssSelection = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 8, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("undefined", 1), ("unknown", 2), ("none", 3), ("gps", 4), ("glonass", 5), ("gpsAndGlonass", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonGpsConfGnssSelection.setStatus('current')
if mibBuilder.loadTexts: commonGpsConfGnssSelection.setDescription('Chooses the GNSS, which shall be used. \n                \n                gps: only GPS and SBAS satellites are used. \n                glonass: only GLONASS and SBAS satellites are used.\n                gpsAndGlonass: GPS, GLONASS and SBAS satellites are used. \n                ')
commonGpsStateTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 8, 2), )
if mibBuilder.loadTexts: commonGpsStateTable.setStatus('current')
if mibBuilder.loadTexts: commonGpsStateTable.setDescription('The GNSS (GPS, GLONASS) state table.')
commonGpsStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 8, 2, 1), ).setIndexNames((0, "RS-XX9-COMMON-MIB", "commonGpsNotificationDeviceIdx"))
if mibBuilder.loadTexts: commonGpsStateEntry.setStatus('current')
if mibBuilder.loadTexts: commonGpsStateEntry.setDescription('an entry in the commonGpsStateTable')
commonGpsStAntennaState = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 8, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("undefined", 1), ("init", 2), ("dontKnow", 3), ("ok", 4), ("short", 5), ("open", 6), ("notMonitored", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonGpsStAntennaState.setStatus('current')
if mibBuilder.loadTexts: commonGpsStAntennaState.setDescription("Indicates whether a connection to the GNSS antenna can be set up \n                or whether a fault is present. \n                \n                Unknown: With the 'Passive' antenna type, detection of the antenna connection is not possible. \n                Short Circuit: There is a short circuit at the antenna input. \n                Not Connected: The connection to the antenna is interrupted. \n                Ok: The connection to the antenna or to the antenna splitter is set up.\n                ")
commonGpsStTdop = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 8, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonGpsStTdop.setStatus('current')
if mibBuilder.loadTexts: commonGpsStTdop.setDescription('Time dilution of precision (TDOP). This is a measure of the spread of the \n                measurement results for calculating the time. It depends on the \n                geographical position of the receivable satellites. If the receivable \n                satellites are positioned very closely together or are very low on the \n                horizon, the time calculation will be imprecise. A low value describes a \n                good geometrical arrangement of the satellites. A value less than2 \n                should be achieved. Large values are returned if the line of sight of the \n                receiving antenna is restricted.\n                ')
commonGpsStSatellitesInView = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 8, 2, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonGpsStSatellitesInView.setStatus('current')
if mibBuilder.loadTexts: commonGpsStSatellitesInView.setDescription('Indicates how many satellites are in the line of sight of the antenna. \n                Only satellites that differ in their relative position to one another \n                and that are not too low on the horizon are used for calculating the \n                time.\n                ')
commonGpsStUsedSatellites = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 8, 2, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonGpsStUsedSatellites.setStatus('current')
if mibBuilder.loadTexts: commonGpsStUsedSatellites.setDescription('Indicates how many satellites are used for calculating the current time. \n                Precise calculation is only possible if the signals from at least 4 \n                satellites are available.\n                ')
commonGpsNotificationTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 8, 3), )
if mibBuilder.loadTexts: commonGpsNotificationTable.setStatus('current')
if mibBuilder.loadTexts: commonGpsNotificationTable.setDescription('The GNSS (GPS, GLONASS) notification table. ')
commonGpsNotificationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 8, 3, 1), ).setIndexNames((0, "RS-XX9-COMMON-MIB", "commonGpsNotificationDeviceIdx"), (0, "RS-XX9-COMMON-MIB", "commonGpsNotificationIdx"))
if mibBuilder.loadTexts: commonGpsNotificationEntry.setStatus('current')
if mibBuilder.loadTexts: commonGpsNotificationEntry.setDescription('An entry in the commonGpsNotificationTable.')
commonGpsNotificationDeviceIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 8, 3, 1, 1), IndexTceDevice())
if mibBuilder.loadTexts: commonGpsNotificationDeviceIdx.setStatus('current')
if mibBuilder.loadTexts: commonGpsNotificationDeviceIdx.setDescription('Index of a TCE90x.')
commonGpsNotificationIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 8, 3, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(3000, 3000)))
if mibBuilder.loadTexts: commonGpsNotificationIdx.setStatus('current')
if mibBuilder.loadTexts: commonGpsNotificationIdx.setDescription('The notification number as below rsXx9CommonNotifications.\n                This is a helper column and therefore not-accessible.')
commonGpsNotificationName = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 8, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3000))).clone(namedValues=NamedValues(("commonGpsState", 3000)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonGpsNotificationName.setStatus('current')
if mibBuilder.loadTexts: commonGpsNotificationName.setDescription('The notification number as an enumeration.\n                The enumeration correlates with the notifications under rsXx9CommonNotifications.')
commonGpsNotificationMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 8, 3, 1, 4), NotificationMask()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonGpsNotificationMask.setStatus('current')
if mibBuilder.loadTexts: commonGpsNotificationMask.setDescription('See TextualConvention for details.')
commonGpsNotificationPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 8, 3, 1, 5), NotificationPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonGpsNotificationPriority.setStatus('current')
if mibBuilder.loadTexts: commonGpsNotificationPriority.setDescription('See TextualConvention for details.')
commonGpsNotificationState = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 8, 3, 1, 6), NotificationState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonGpsNotificationState.setStatus('current')
if mibBuilder.loadTexts: commonGpsNotificationState.setDescription('See TextualConvention for details.')
commonDeviceInformation = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 9))
commonDevInfoStateTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 9, 1), )
if mibBuilder.loadTexts: commonDevInfoStateTable.setStatus('current')
if mibBuilder.loadTexts: commonDevInfoStateTable.setDescription('Table about device information state.')
commonDevInfoStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 9, 1, 1), ).setIndexNames((0, "RS-XX9-COMMON-MIB", "devInfoStateDeviceIdx"))
if mibBuilder.loadTexts: commonDevInfoStateEntry.setStatus('current')
if mibBuilder.loadTexts: commonDevInfoStateEntry.setDescription('An entry in the commonDevInfoStateTable.')
devInfoStateDeviceIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 9, 1, 1, 1), IndexTceDevice())
if mibBuilder.loadTexts: devInfoStateDeviceIdx.setStatus('current')
if mibBuilder.loadTexts: devInfoStateDeviceIdx.setDescription('Index of a TCE90x or TLx.')
devInfoStateDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 9, 1, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devInfoStateDeviceName.setStatus('current')
if mibBuilder.loadTexts: devInfoStateDeviceName.setDescription('Name of the TCE90x or TLx.')
devInfoStateCapacitorBatteryInstalled = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 9, 1, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devInfoStateCapacitorBatteryInstalled.setStatus('current')
if mibBuilder.loadTexts: devInfoStateCapacitorBatteryInstalled.setDescription('Indicates if a capacitor battery is installed\n                only valid for TLx devices')
commonDevInfoNotificationTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 9, 2), )
if mibBuilder.loadTexts: commonDevInfoNotificationTable.setStatus('current')
if mibBuilder.loadTexts: commonDevInfoNotificationTable.setDescription('The device information notification table.')
commonDevInfoNotificationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 9, 2, 1), ).setIndexNames((0, "RS-XX9-COMMON-MIB", "commonDevInfoNotificationDeviceIdx"), (0, "RS-XX9-COMMON-MIB", "commonDevInfoNotificationIdx"))
if mibBuilder.loadTexts: commonDevInfoNotificationEntry.setStatus('current')
if mibBuilder.loadTexts: commonDevInfoNotificationEntry.setDescription('An entry in the commonDevInfoNotificationTable.')
commonDevInfoNotificationDeviceIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 9, 2, 1, 1), IndexTceDevice())
if mibBuilder.loadTexts: commonDevInfoNotificationDeviceIdx.setStatus('current')
if mibBuilder.loadTexts: commonDevInfoNotificationDeviceIdx.setDescription('Index of a TCE90x or TLx.')
commonDevInfoNotificationIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 9, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(4000, 4000), ValueRangeConstraint(4100, 4100), ValueRangeConstraint(4200, 4200), )))
if mibBuilder.loadTexts: commonDevInfoNotificationIdx.setStatus('current')
if mibBuilder.loadTexts: commonDevInfoNotificationIdx.setDescription('The notification number as below rsXx9CommonNotifications.\n                This is a helper column and therefore not-accessible.')
commonDevInfoNotificationName = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 9, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4000, 4100, 4200))).clone(namedValues=NamedValues(("commonDevInfoAcFail", 4000), ("commonDevInfoFanState", 4100), ("commonDevInfoOvpState", 4200)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonDevInfoNotificationName.setStatus('current')
if mibBuilder.loadTexts: commonDevInfoNotificationName.setDescription('The notification number as an enumeration.\n                The enumeration correlates with the notifications under rsXx9CommonNotifications.')
commonDevInfoNotificationMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 9, 2, 1, 4), NotificationMask()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonDevInfoNotificationMask.setStatus('current')
if mibBuilder.loadTexts: commonDevInfoNotificationMask.setDescription('See TextualConvention for details.')
commonDevInfoNotificationPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 9, 2, 1, 5), NotificationPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonDevInfoNotificationPriority.setStatus('current')
if mibBuilder.loadTexts: commonDevInfoNotificationPriority.setDescription('See TextualConvention for details.')
commonDevInfoNotificationState = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 9, 2, 1, 6), NotificationState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonDevInfoNotificationState.setStatus('current')
if mibBuilder.loadTexts: commonDevInfoNotificationState.setDescription('See TextualConvention for details.')
commonDevInfoConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 9, 3), )
if mibBuilder.loadTexts: commonDevInfoConfigTable.setStatus('current')
if mibBuilder.loadTexts: commonDevInfoConfigTable.setDescription('Configure Device sepcific parameters.')
commonDevInfoConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 9, 3, 1), ).setIndexNames((0, "RS-XX9-COMMON-MIB", "devInfoStateDeviceIdx"))
if mibBuilder.loadTexts: commonDevInfoConfigEntry.setStatus('current')
if mibBuilder.loadTexts: commonDevInfoConfigEntry.setDescription('An entry in the commonDevInfoConfigTable. ')
commonDevInfoConfAssignOvp = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 9, 3, 1, 1), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonDevInfoConfAssignOvp.setStatus('current')
if mibBuilder.loadTexts: commonDevInfoConfAssignOvp.setDescription('Description.')
commonEnvironment = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 10))
commonEnvConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 10, 1), )
if mibBuilder.loadTexts: commonEnvConfigurationTable.setStatus('current')
if mibBuilder.loadTexts: commonEnvConfigurationTable.setDescription('Description.')
commonEnvConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 10, 1, 1), ).setIndexNames((0, "RS-XX9-COMMON-MIB", "commonEnvConfDeviceIdx"))
if mibBuilder.loadTexts: commonEnvConfigurationEntry.setStatus('current')
if mibBuilder.loadTexts: commonEnvConfigurationEntry.setDescription('Description.')
commonEnvConfDeviceIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 10, 1, 1, 1), IndexTceDevice())
if mibBuilder.loadTexts: commonEnvConfDeviceIdx.setStatus('current')
if mibBuilder.loadTexts: commonEnvConfDeviceIdx.setDescription('Index of a TCE90x or TLx.')
commonEnvConfDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 10, 1, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonEnvConfDeviceName.setStatus('current')
if mibBuilder.loadTexts: commonEnvConfDeviceName.setDescription('Name of the TCE90x or TLx.')
commonEnvConfTempWarnUpper = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 10, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 450))).setUnits('0.1 degree Celsius').setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonEnvConfTempWarnUpper.setStatus('current')
if mibBuilder.loadTexts: commonEnvConfTempWarnUpper.setDescription('Description.')
commonEnvConfTempFaultUpper = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 10, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 450))).setUnits('0.1 degree Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: commonEnvConfTempFaultUpper.setStatus('current')
if mibBuilder.loadTexts: commonEnvConfTempFaultUpper.setDescription('Description.')
commonEnvConfTempWarnLower = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 10, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 450))).setUnits('0.1 degree Celsius').setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonEnvConfTempWarnLower.setStatus('current')
if mibBuilder.loadTexts: commonEnvConfTempWarnLower.setDescription('Description.')
commonEnvConfTempFaultLower = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 10, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 450))).setUnits('0.1 degree Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: commonEnvConfTempFaultLower.setStatus('current')
if mibBuilder.loadTexts: commonEnvConfTempFaultLower.setDescription('Description.')
commonEnvStateTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 10, 2), )
if mibBuilder.loadTexts: commonEnvStateTable.setStatus('current')
if mibBuilder.loadTexts: commonEnvStateTable.setDescription('Description.')
commonEnvStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 10, 2, 1), ).setIndexNames((0, "RS-XX9-COMMON-MIB", "commonEnvConfDeviceIdx"))
if mibBuilder.loadTexts: commonEnvStateEntry.setStatus('current')
if mibBuilder.loadTexts: commonEnvStateEntry.setDescription('Description.')
commonEnvStTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 10, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 500))).setUnits('0.1 degree Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: commonEnvStTemperature.setStatus('current')
if mibBuilder.loadTexts: commonEnvStTemperature.setDescription('Description.')
commonEnvStHumidity = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 10, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: commonEnvStHumidity.setStatus('current')
if mibBuilder.loadTexts: commonEnvStHumidity.setDescription('Description.')
commonEnvStDewPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 10, 2, 1, 3), Integer32()).setUnits('0.1 degree Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: commonEnvStDewPoint.setStatus('current')
if mibBuilder.loadTexts: commonEnvStDewPoint.setDescription('Description.')
commonEnvNotificationTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 10, 3), )
if mibBuilder.loadTexts: commonEnvNotificationTable.setStatus('current')
if mibBuilder.loadTexts: commonEnvNotificationTable.setDescription('Description.')
commonEnvNotificationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 10, 3, 1), ).setIndexNames((0, "RS-XX9-COMMON-MIB", "commonEnvNotificationDeviceIdx"), (0, "RS-XX9-COMMON-MIB", "commonEnvNotificationIdx"))
if mibBuilder.loadTexts: commonEnvNotificationEntry.setStatus('current')
if mibBuilder.loadTexts: commonEnvNotificationEntry.setDescription('Description.')
commonEnvNotificationDeviceIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 10, 3, 1, 1), IndexTceDevice())
if mibBuilder.loadTexts: commonEnvNotificationDeviceIdx.setStatus('current')
if mibBuilder.loadTexts: commonEnvNotificationDeviceIdx.setDescription('Index of a TCE90x.')
commonEnvNotificationIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 10, 3, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(5000, 5002)))
if mibBuilder.loadTexts: commonEnvNotificationIdx.setStatus('current')
if mibBuilder.loadTexts: commonEnvNotificationIdx.setDescription('The notification number as below rsXx9CommonNotifications.\n                This is a helper column and therefore not-accessible.')
commonEnvNotificationName = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 10, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5000, 5001, 5002))).clone(namedValues=NamedValues(("commonEnvSummary", 5000), ("commonEnvTemperature", 5001), ("commonEnvDewPoint", 5002)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonEnvNotificationName.setStatus('current')
if mibBuilder.loadTexts: commonEnvNotificationName.setDescription('Description.')
commonEnvNotificationMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 10, 3, 1, 4), NotificationMask()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonEnvNotificationMask.setStatus('current')
if mibBuilder.loadTexts: commonEnvNotificationMask.setDescription('Description.')
commonEnvNotificationPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 10, 3, 1, 5), NotificationPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonEnvNotificationPriority.setStatus('current')
if mibBuilder.loadTexts: commonEnvNotificationPriority.setDescription('Description.')
commonEnvNotificationState = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 1, 10, 3, 1, 6), NotificationState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonEnvNotificationState.setStatus('current')
if mibBuilder.loadTexts: commonEnvNotificationState.setDescription('Description.')
rsXx9CommonConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 2))
rsXx9CommonCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 2, 1))
commonBasicCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 2, 1, 1)).setObjects(("RS-XX9-COMMON-MIB", "commonObjBasic"), ("RS-XX9-COMMON-MIB", "commonObjNtp"), ("RS-XX9-COMMON-MIB", "commonObjSoftwareUpdate"), ("RS-XX9-COMMON-MIB", "commonObjCustomNotification"), ("RS-XX9-COMMON-MIB", "commonObjOptionManagement"), ("RS-XX9-COMMON-MIB", "commonNotifyBasic"), ("RS-XX9-COMMON-MIB", "commonNotifyNtp"), ("RS-XX9-COMMON-MIB", "commonNotifySoftwareUpdate"), ("RS-XX9-COMMON-MIB", "commonNotifyCustomNotification"), ("RS-XX9-COMMON-MIB", "commonNotifyOptionManagement"), ("RS-XX9-COMMON-MIB", "commonObjUPS"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    commonBasicCompliance = commonBasicCompliance.setStatus('current')
if mibBuilder.loadTexts: commonBasicCompliance.setDescription('The compliance statement for XX9000 entities\n                which implement this MIB module.')
rsXx9CommonGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 2, 2))
commonObjBasic = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 2, 2, 1)).setObjects(("RS-XX9-COMMON-MIB", "commonDateAndTime"), ("RS-XX9-COMMON-MIB", "rsNotificationsAllWarningsOff"), ("RS-XX9-COMMON-MIB", "rsNotificationsAllWarningsOn"), ("RS-XX9-COMMON-MIB", "rsNotificationsAllFaultsOff"), ("RS-XX9-COMMON-MIB", "rsNotificationsAllFaultsOn"), ("RS-XX9-COMMON-MIB", "rsNotificationsAllOff"), ("RS-XX9-COMMON-MIB", "rsNotificationsAllOn"), ("RS-XX9-COMMON-MIB", "irtNotificationsAllOff"), ("RS-XX9-COMMON-MIB", "irtNotificationsAllOn"), ("RS-XX9-COMMON-MIB", "commonEntPhysicalPowerUpCycles"), ("RS-XX9-COMMON-MIB", "commonEntPhysicalOperationHours"), ("RS-XX9-COMMON-MIB", "commonEntPhysicalSwFwBiosNumber"), ("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-COMMON-MIB", "commonTrapCounter"), ("RS-XX9-COMMON-MIB", "commonSystemNumberOfTxA"), ("RS-XX9-COMMON-MIB", "commonSystemType"), ("RS-XX9-COMMON-MIB", "commonFuncCoolingControl"), ("RS-XX9-COMMON-MIB", "commonFuncSignalProcessing"), ("RS-XX9-COMMON-MIB", "commonFuncTxControl"), ("RS-XX9-COMMON-MIB", "commonFuncSystemControl"), ("RS-XX9-COMMON-MIB", "sendTestNotification"), ("RS-XX9-COMMON-MIB", "reboot"), ("RS-XX9-COMMON-MIB", "commonTxNotificationName"), ("RS-XX9-COMMON-MIB", "commonTxNotificationMask"), ("RS-XX9-COMMON-MIB", "commonTxNotificationPriority"), ("RS-XX9-COMMON-MIB", "commonTxNotificationState"), ("RS-XX9-COMMON-MIB", "cmnTxCtrlRedundancyMode"), ("RS-XX9-COMMON-MIB", "commonFuncRackControl"), ("RS-XX9-COMMON-MIB", "snmpEnable"), ("RS-XX9-COMMON-MIB", "snmpSyncTrapSinks"), ("RS-XX9-COMMON-MIB", "commonEntPhysicalConfigurationStatus"), ("RS-XX9-COMMON-MIB", "commonEntPhysicalHardwareStatus"), ("RS-XX9-COMMON-MIB", "cmnTxCtrlAmplifierType"), ("RS-XX9-COMMON-MIB", "cmnTxCtrlModulationMode"), ("RS-XX9-COMMON-MIB", "commonEntPhysicalType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    commonObjBasic = commonObjBasic.setStatus('current')
if mibBuilder.loadTexts: commonObjBasic.setDescription('Basic objects group.')
commonObjNtp = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 2, 2, 2)).setObjects(("RS-XX9-COMMON-MIB", "commonDateTimeConfDeviceName"), ("RS-XX9-COMMON-MIB", "commonDateTimeConfLocalDateTime"), ("RS-XX9-COMMON-MIB", "commonDateTimeConfLocalTimeOffset"), ("RS-XX9-COMMON-MIB", "commonDateTimeConfNtpEnable"), ("RS-XX9-COMMON-MIB", "commonDateTimeConfNtpServer"), ("RS-XX9-COMMON-MIB", "commonDateTimeNotificationName"), ("RS-XX9-COMMON-MIB", "commonDateTimeNotificationMask"), ("RS-XX9-COMMON-MIB", "commonDateTimeNotificationPriority"), ("RS-XX9-COMMON-MIB", "commonDateTimeNotificationState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    commonObjNtp = commonObjNtp.setStatus('current')
if mibBuilder.loadTexts: commonObjNtp.setDescription('Objects for handling time and its synchronization via NTP.')
commonObjSoftwareUpdate = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 2, 2, 3)).setObjects(("RS-XX9-COMMON-MIB", "swUpdateStart"), ("RS-XX9-COMMON-MIB", "swUpdateMode"), ("RS-XX9-COMMON-MIB", "swUpdateDeviceName"), ("RS-XX9-COMMON-MIB", "swUpdateDeviceGroup"), ("RS-XX9-COMMON-MIB", "swUpdateRebootPending"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    commonObjSoftwareUpdate = commonObjSoftwareUpdate.setStatus('current')
if mibBuilder.loadTexts: commonObjSoftwareUpdate.setDescription('Objects for handling software update.')
commonObjCustomNotification = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 2, 2, 4)).setObjects(("RS-XX9-COMMON-MIB", "customNotificationVariable"), ("RS-XX9-COMMON-MIB", "customNotificationSampleType"), ("RS-XX9-COMMON-MIB", "customNotificationValue"), ("RS-XX9-COMMON-MIB", "customNotificationRisingThreshold"), ("RS-XX9-COMMON-MIB", "customNotificationFallingThreshold"), ("RS-XX9-COMMON-MIB", "customNotificationStatus"), ("RS-XX9-COMMON-MIB", "customNotificationPriority"), ("RS-XX9-COMMON-MIB", "customNotificationInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    commonObjCustomNotification = commonObjCustomNotification.setStatus('current')
if mibBuilder.loadTexts: commonObjCustomNotification.setDescription('Objects for defining custom notifications.')
commonObjOptionManagement = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 2, 2, 5)).setObjects(("RS-XX9-COMMON-MIB", "optionKeyName"), ("RS-XX9-COMMON-MIB", "optionKeyStatus"), ("RS-XX9-COMMON-MIB", "optionKeyValidity"), ("RS-XX9-COMMON-MIB", "instOpkDeviceName"), ("RS-XX9-COMMON-MIB", "commonOpkNotificationState"), ("RS-XX9-COMMON-MIB", "commonOpkNotificationPriority"), ("RS-XX9-COMMON-MIB", "commonOpkNotificationMask"), ("RS-XX9-COMMON-MIB", "commonOpkNotificationName"), ("RS-XX9-COMMON-MIB", "deactivationResponse"), ("RS-XX9-COMMON-MIB", "deactivationKeyName"), ("RS-XX9-COMMON-MIB", "deactivationKeyNumber"), ("RS-XX9-COMMON-MIB", "instOpkMessage"), ("RS-XX9-COMMON-MIB", "instOpkNewKey"), ("RS-XX9-COMMON-MIB", "optionKeyNumber"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    commonObjOptionManagement = commonObjOptionManagement.setStatus('current')
if mibBuilder.loadTexts: commonObjOptionManagement.setDescription('Objects for handling option management.')
commonObjUPS = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 2, 2, 6)).setObjects(("RS-XX9-COMMON-MIB", "upsInfoWithUPS"), ("RS-XX9-COMMON-MIB", "upsInfoLink"), ("RS-XX9-COMMON-MIB", "upsInfoManufacturer"), ("RS-XX9-COMMON-MIB", "upsInfoModel"), ("RS-XX9-COMMON-MIB", "upsInfoSoftwareVersion"), ("RS-XX9-COMMON-MIB", "upsInfoName"), ("RS-XX9-COMMON-MIB", "upsInfoAttachedDevices"), ("RS-XX9-COMMON-MIB", "upsInfoBatteryStatus"), ("RS-XX9-COMMON-MIB", "upsInfoSecondsOnBattery"), ("RS-XX9-COMMON-MIB", "upsInfoMinutesRemaining"), ("RS-XX9-COMMON-MIB", "upsInfoChargeRemaining"), ("RS-XX9-COMMON-MIB", "upsInfoOutputSource"), ("RS-XX9-COMMON-MIB", "upsInfoOutputPower"), ("RS-XX9-COMMON-MIB", "upsInfoSelftestResult"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    commonObjUPS = commonObjUPS.setStatus('current')
if mibBuilder.loadTexts: commonObjUPS.setDescription('Objects for UPS information.')
commonObjGps = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 2, 2, 7)).setObjects(("RS-XX9-COMMON-MIB", "commonGpsConfAntennaType"), ("RS-XX9-COMMON-MIB", "commonGpsStAntennaState"), ("RS-XX9-COMMON-MIB", "commonGpsStTdop"), ("RS-XX9-COMMON-MIB", "commonGpsStSatellitesInView"), ("RS-XX9-COMMON-MIB", "commonGpsStateMonitoring"), ("RS-XX9-COMMON-MIB", "commonGpsConfGnssSelection"), ("RS-XX9-COMMON-MIB", "commonGpsStUsedSatellites"), ("RS-XX9-COMMON-MIB", "commonGpsConfDeviceName"), ("RS-XX9-COMMON-MIB", "commonGpsNotificationName"), ("RS-XX9-COMMON-MIB", "commonGpsNotificationMask"), ("RS-XX9-COMMON-MIB", "commonGpsNotificationPriority"), ("RS-XX9-COMMON-MIB", "commonGpsNotificationState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    commonObjGps = commonObjGps.setStatus('current')
if mibBuilder.loadTexts: commonObjGps.setDescription('Objects for GNSS information.')
commonObjDeviceInformation = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 2, 2, 8)).setObjects(("RS-XX9-COMMON-MIB", "devInfoStateDeviceName"), ("RS-XX9-COMMON-MIB", "devInfoStateCapacitorBatteryInstalled"), ("RS-XX9-COMMON-MIB", "commonDevInfoNotificationName"), ("RS-XX9-COMMON-MIB", "commonDevInfoNotificationMask"), ("RS-XX9-COMMON-MIB", "commonDevInfoNotificationPriority"), ("RS-XX9-COMMON-MIB", "commonDevInfoNotificationState"), ("RS-XX9-COMMON-MIB", "commonDevInfoConfAssignOvp"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    commonObjDeviceInformation = commonObjDeviceInformation.setStatus('current')
if mibBuilder.loadTexts: commonObjDeviceInformation.setDescription('Description.')
commonObjEnvironment = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 2, 2, 9)).setObjects(("RS-XX9-COMMON-MIB", "commonEnvConfTempWarnUpper"), ("RS-XX9-COMMON-MIB", "commonEnvConfTempFaultUpper"), ("RS-XX9-COMMON-MIB", "commonEnvConfTempWarnLower"), ("RS-XX9-COMMON-MIB", "commonEnvConfTempFaultLower"), ("RS-XX9-COMMON-MIB", "commonEnvStTemperature"), ("RS-XX9-COMMON-MIB", "commonEnvStHumidity"), ("RS-XX9-COMMON-MIB", "commonEnvStDewPoint"), ("RS-XX9-COMMON-MIB", "commonEnvNotificationName"), ("RS-XX9-COMMON-MIB", "commonEnvNotificationMask"), ("RS-XX9-COMMON-MIB", "commonEnvNotificationPriority"), ("RS-XX9-COMMON-MIB", "commonEnvNotificationState"), ("RS-XX9-COMMON-MIB", "commonEnvConfDeviceName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    commonObjEnvironment = commonObjEnvironment.setStatus('current')
if mibBuilder.loadTexts: commonObjEnvironment.setDescription('Description.')
commonObjNtpObsoleted = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 2, 2, 50)).setObjects(("RS-XX9-COMMON-MIB", "ntpMode"), ("RS-XX9-COMMON-MIB", "ntpSyncTimeInterval"), ("RS-XX9-COMMON-MIB", "ntpServerAddrIdx"), ("RS-XX9-COMMON-MIB", "ntpServerAddressType"), ("RS-XX9-COMMON-MIB", "ntpServerAddress"), ("RS-XX9-COMMON-MIB", "ntpLastSync"), ("RS-XX9-COMMON-MIB", "ntpState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    commonObjNtpObsoleted = commonObjNtpObsoleted.setStatus('obsolete')
if mibBuilder.loadTexts: commonObjNtpObsoleted.setDescription('Obsoleted objects for handling time synchronization via NTP.')
commonNotifyBasic = NotificationGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 2, 2, 100)).setObjects(("RS-XX9-COMMON-MIB", "commonTest"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    commonNotifyBasic = commonNotifyBasic.setStatus('current')
if mibBuilder.loadTexts: commonNotifyBasic.setDescription('Basic notifications group.')
commonNotifyNtp = NotificationGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 2, 2, 101)).setObjects(("RS-XX9-COMMON-MIB", "commonDateTimeNtpState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    commonNotifyNtp = commonNotifyNtp.setStatus('current')
if mibBuilder.loadTexts: commonNotifyNtp.setDescription('Notifications for time synchronization via NTP.')
commonNotifySoftwareUpdate = NotificationGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 2, 2, 102)).setObjects(("RS-XX9-COMMON-MIB", "commonSwUpdateStatus"), ("RS-XX9-COMMON-MIB", "commonFwUpdateStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    commonNotifySoftwareUpdate = commonNotifySoftwareUpdate.setStatus('current')
if mibBuilder.loadTexts: commonNotifySoftwareUpdate.setDescription('Notifications for software update.')
commonNotifyCustomNotification = NotificationGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 2, 2, 103)).setObjects(("RS-XX9-COMMON-MIB", "commonRising"), ("RS-XX9-COMMON-MIB", "commonFalling"), ("RS-XX9-COMMON-MIB", "commonChanging"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    commonNotifyCustomNotification = commonNotifyCustomNotification.setStatus('current')
if mibBuilder.loadTexts: commonNotifyCustomNotification.setDescription('Customer defined notifications.')
commonNotifyOptionManagement = NotificationGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 2, 2, 104)).setObjects(("RS-XX9-COMMON-MIB", "commonOptionKeyStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    commonNotifyOptionManagement = commonNotifyOptionManagement.setStatus('current')
if mibBuilder.loadTexts: commonNotifyOptionManagement.setDescription('Notifications for option management.')
commonNotifyDeviceInformation = NotificationGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 2, 2, 105)).setObjects(("RS-XX9-COMMON-MIB", "commonDevInfoAcFail"), ("RS-XX9-COMMON-MIB", "commonDevInfoFanState"), ("RS-XX9-COMMON-MIB", "commonDevInfoOvpState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    commonNotifyDeviceInformation = commonNotifyDeviceInformation.setStatus('current')
if mibBuilder.loadTexts: commonNotifyDeviceInformation.setDescription('Description.')
commonNotifyEnvironment = NotificationGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 2, 2, 106)).setObjects(("RS-XX9-COMMON-MIB", "commonEnvSummary"), ("RS-XX9-COMMON-MIB", "commonEnvTemperature"), ("RS-XX9-COMMON-MIB", "commonEnvDewPoint"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    commonNotifyEnvironment = commonNotifyEnvironment.setStatus('current')
if mibBuilder.loadTexts: commonNotifyEnvironment.setDescription('Description.')
commonNotifyNtpObsoleted = NotificationGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 2, 2, 150)).setObjects(("RS-XX9-COMMON-MIB", "commonNtpSync"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    commonNotifyNtpObsoleted = commonNotifyNtpObsoleted.setStatus('obsolete')
if mibBuilder.loadTexts: commonNotifyNtpObsoleted.setDescription('Obsoleted notifications for time synchronization via NTP.')
commonNotifyGps = NotificationGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 2, 2, 2, 151)).setObjects(("RS-XX9-COMMON-MIB", "commonGpsState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    commonNotifyGps = commonNotifyGps.setStatus('current')
if mibBuilder.loadTexts: commonNotifyGps.setDescription('Notifications for GNSS.')
mibBuilder.exportSymbols("RS-XX9-COMMON-MIB", upsInformationTable=upsInformationTable, optionKeyName=optionKeyName, upsInfoMinutesRemaining=upsInfoMinutesRemaining, customNotificationValue=customNotificationValue, commonEnvConfTempWarnLower=commonEnvConfTempWarnLower, commonEnvConfDeviceName=commonEnvConfDeviceName, commonDateTimeNotificationState=commonDateTimeNotificationState, commonTxNotificationEntry=commonTxNotificationEntry, ntpMode=ntpMode, deactivationKeyNumber=deactivationKeyNumber, rsXx9CommonCompliances=rsXx9CommonCompliances, customNotificationTable=customNotificationTable, commonEnvStateEntry=commonEnvStateEntry, commonEnvNotificationIdx=commonEnvNotificationIdx, commonProductInformation=commonProductInformation, deactivationIdx=deactivationIdx, deactivationEntry=deactivationEntry, customNotificationRisingThreshold=customNotificationRisingThreshold, commonGpsConfGnssSelection=commonGpsConfGnssSelection, commonDeviceInformation=commonDeviceInformation, commonOptionManagement=commonOptionManagement, irtNotificationsAllOn=irtNotificationsAllOn, upsInfoName=upsInfoName, commonEntPhysicalSwFwBiosNumber=commonEntPhysicalSwFwBiosNumber, commonObjNtpObsoleted=commonObjNtpObsoleted, rsXx9CommonMibModule=rsXx9CommonMibModule, optionKeyEntry=optionKeyEntry, commonEntPhysicalTable=commonEntPhysicalTable, commonObjOptionManagement=commonObjOptionManagement, upsInfoAttachedDevices=upsInfoAttachedDevices, commonGpsStateEntry=commonGpsStateEntry, ntpSyncTimeInterval=ntpSyncTimeInterval, snmpUserConfiguration=snmpUserConfiguration, rsXx9CommonNotifications=rsXx9CommonNotifications, ntpServerAddressType=ntpServerAddressType, commonDateTimeConfDeviceIdx=commonDateTimeConfDeviceIdx, installOpkTable=installOpkTable, commonRising=commonRising, optionKeyNumber=optionKeyNumber, commonEnvNotificationMask=commonEnvNotificationMask, commonEnvNotificationName=commonEnvNotificationName, instOpkMessage=instOpkMessage, devInfoStateDeviceIdx=devInfoStateDeviceIdx, commonGpsConfigurationTable=commonGpsConfigurationTable, commonDevInfoNotificationDeviceIdx=commonDevInfoNotificationDeviceIdx, customNotificationSampleType=customNotificationSampleType, commonDevInfoNotificationIdx=commonDevInfoNotificationIdx, devInfoStateCapacitorBatteryInstalled=devInfoStateCapacitorBatteryInstalled, commonDateTimeNotificationDeviceIdx=commonDateTimeNotificationDeviceIdx, commonDevInfoStateEntry=commonDevInfoStateEntry, commonGpsNotificationDeviceIdx=commonGpsNotificationDeviceIdx, commonFuncCoolingControl=commonFuncCoolingControl, upsInformationEntry=upsInformationEntry, deactivationResponse=deactivationResponse, commonDevInfoConfigTable=commonDevInfoConfigTable, commonSwUpdateStatus=commonSwUpdateStatus, instOpkNewKey=instOpkNewKey, commonDateTimeNotificationMask=commonDateTimeNotificationMask, commonGpsConfigurationEntry=commonGpsConfigurationEntry, commonEnvConfTempFaultLower=commonEnvConfTempFaultLower, commonBasicCompliance=commonBasicCompliance, GpsPowerSource=GpsPowerSource, instOpkDeviceIdx=instOpkDeviceIdx, commonNotifyGps=commonNotifyGps, commonDateTime=commonDateTime, commonEnvConfDeviceIdx=commonEnvConfDeviceIdx, commonEnvConfTempFaultUpper=commonEnvConfTempFaultUpper, commonNotifyNtpObsoleted=commonNotifyNtpObsoleted, swUpdateDeviceName=swUpdateDeviceName, commonTxNotificationName=commonTxNotificationName, rsNotificationsAllOn=rsNotificationsAllOn, commonTxNotificationIdx=commonTxNotificationIdx, commonGpsNotificationPriority=commonGpsNotificationPriority, upsInfoOutputPower=upsInfoOutputPower, commonFwUpdateStatus=commonFwUpdateStatus, irtNotificationsAllOff=irtNotificationsAllOff, commonDateTimeNotificationIdx=commonDateTimeNotificationIdx, commonDevInfoConfigEntry=commonDevInfoConfigEntry, commonOpkNotificationState=commonOpkNotificationState, commonDateTimeNotificationEntry=commonDateTimeNotificationEntry, ntpServerAddress=ntpServerAddress, customNotificationIndex=customNotificationIndex, upsInfoDeviceIdx=upsInfoDeviceIdx, commonEnvStDewPoint=commonEnvStDewPoint, commonFuncSystemControl=commonFuncSystemControl, upsInfoLink=upsInfoLink, optionKeyTable=optionKeyTable, rsXx9CommonObjects=rsXx9CommonObjects, commonGpsNotificationEntry=commonGpsNotificationEntry, commonDateTimeNotificationPriority=commonDateTimeNotificationPriority, upsInfoWithUPS=upsInfoWithUPS, commonEnvNotificationDeviceIdx=commonEnvNotificationDeviceIdx, optionKeyValidity=optionKeyValidity, cmnTxCtrlTxIdx=cmnTxCtrlTxIdx, commonGPS=commonGPS, devInfoStateDeviceName=devInfoStateDeviceName, customNotificationInterval=customNotificationInterval, rsNotificationsAllWarningsOff=rsNotificationsAllWarningsOff, commonTxFunctions=commonTxFunctions, commonDateTimeNotificationName=commonDateTimeNotificationName, instOpkDeviceName=instOpkDeviceName, commonGpsNotificationState=commonGpsNotificationState, commonEnvConfTempWarnUpper=commonEnvConfTempWarnUpper, commonFuncTxControl=commonFuncTxControl, softwareMaintenance=softwareMaintenance, reboot=reboot, commonOpkNotificationIdx=commonOpkNotificationIdx, commonGpsNotificationTable=commonGpsNotificationTable, ntpServerAddrTable=ntpServerAddrTable, ntpServerAddrEntry=ntpServerAddrEntry, commonObjCustomNotification=commonObjCustomNotification, rsNotificationsAllFaultsOff=rsNotificationsAllFaultsOff, commonDateTimeConfDeviceName=commonDateTimeConfDeviceName, commonGpsStUsedSatellites=commonGpsStUsedSatellites, commonEnvStTemperature=commonEnvStTemperature, upsInfoOutputSource=upsInfoOutputSource, commonDateTimeNtpState=commonDateTimeNtpState, commonGpsStateTable=commonGpsStateTable, swUpdateRebootPending=swUpdateRebootPending, cmnTxCtrlRedundancyMode=cmnTxCtrlRedundancyMode, commonEnvironment=commonEnvironment, commonDateTimeConfLocalTimeOffset=commonDateTimeConfLocalTimeOffset, commonEnvNotificationEntry=commonEnvNotificationEntry, commonObjBasic=commonObjBasic, snmpEnable=snmpEnable, commonOpkNotificationEntry=commonOpkNotificationEntry, rsNotificationsAllFaultsOn=rsNotificationsAllFaultsOn, ntpServerAddrIdx=ntpServerAddrIdx, upsInfoChargeRemaining=upsInfoChargeRemaining, commonNotifyCustomNotification=commonNotifyCustomNotification, commonGpsNotificationName=commonGpsNotificationName, commonSystemNumberOfTxA=commonSystemNumberOfTxA, commonObjGps=commonObjGps, commonGpsStateMonitoring=commonGpsStateMonitoring, commonDevInfoNotificationName=commonDevInfoNotificationName, commonTxNotificationPriority=commonTxNotificationPriority, commonDevInfoNotificationPriority=commonDevInfoNotificationPriority, commonGpsConfAntennaType=commonGpsConfAntennaType, commonTransmitterConfiguration=commonTransmitterConfiguration, commonTxControlTable=commonTxControlTable, sendTestNotification=sendTestNotification, commonSystemControl=commonSystemControl, optionKeyIdx=optionKeyIdx, commonNotifyDeviceInformation=commonNotifyDeviceInformation, commonOpkNotificationTable=commonOpkNotificationTable, swUpdateMode=swUpdateMode, snmpSyncTrapSinks=snmpSyncTrapSinks, commonNotifyOptionManagement=commonNotifyOptionManagement, commonEnvConfigurationTable=commonEnvConfigurationTable, commonDateTimeConfigurationTable=commonDateTimeConfigurationTable, commonDateTimeConfNtpServer=commonDateTimeConfNtpServer, commonEnvNotificationTable=commonEnvNotificationTable, commonNotifyNtp=commonNotifyNtp, deactivationKeyName=deactivationKeyName, ntp=ntp, commonSnmpConfiguration=commonSnmpConfiguration, swUpdateStart=swUpdateStart, commonGpsConfDeviceName=commonGpsConfDeviceName, commonNtpSync=commonNtpSync, commonTest=commonTest, commonEntPhysicalHardwareStatus=commonEntPhysicalHardwareStatus, rsNotificationsAllWarningsOn=rsNotificationsAllWarningsOn, commonNotificationAlarmClass=commonNotificationAlarmClass, commonEntPhysicalOperationHours=commonEntPhysicalOperationHours, commonDevInfoStateTable=commonDevInfoStateTable, commonObjSoftwareUpdate=commonObjSoftwareUpdate, commonSystemType=commonSystemType, swUpdateDeviceGroup=swUpdateDeviceGroup, commonEnvTemperature=commonEnvTemperature, commonEnvConfigurationEntry=commonEnvConfigurationEntry, customNotificationEntry=customNotificationEntry, rsXx9CommonGroups=rsXx9CommonGroups, commonTxControlEntry=commonTxControlEntry, commonEntPhysicalConfigurationStatus=commonEntPhysicalConfigurationStatus, commonDateAndTime=commonDateAndTime, commonObjDeviceInformation=commonObjDeviceInformation, upsInfoManufacturer=upsInfoManufacturer, commonDevInfoNotificationMask=commonDevInfoNotificationMask, commonDevInfoNotificationState=commonDevInfoNotificationState, cmnTxCtrlModulationMode=cmnTxCtrlModulationMode, commonTrapCounter=commonTrapCounter, installOpkEntry=installOpkEntry, commonObjNtp=commonObjNtp, PYSNMP_MODULE_ID=rsXx9CommonMibModule, commonEntPhysicalType=commonEntPhysicalType, commonDateTimeConfNtpEnable=commonDateTimeConfNtpEnable, optionKeyStatus=optionKeyStatus, commonObjUPS=commonObjUPS, commonTxNotificationTable=commonTxNotificationTable, IndexTceDevice=IndexTceDevice, rsXx9CommonConformance=rsXx9CommonConformance, commonDevInfoNotificationEntry=commonDevInfoNotificationEntry, ntpState=ntpState, commonFalling=commonFalling, commonFuncSignalProcessing=commonFuncSignalProcessing, cmnTxCtrlAmplifierType=cmnTxCtrlAmplifierType, commonDateTimeConfLocalDateTime=commonDateTimeConfLocalDateTime, commonGpsStAntennaState=commonGpsStAntennaState, commonTxNotificationState=commonTxNotificationState, commonChanging=commonChanging, commonDevInfoAcFail=commonDevInfoAcFail, commonEnvStHumidity=commonEnvStHumidity, commonObjEnvironment=commonObjEnvironment, commonGpsStTdop=commonGpsStTdop, upsInfoBatteryStatus=upsInfoBatteryStatus, commonOptionKeyStatus=commonOptionKeyStatus, upsInfoSoftwareVersion=upsInfoSoftwareVersion, commonNotifyBasic=commonNotifyBasic, commonDevInfoOvpState=commonDevInfoOvpState, ntpLastSync=ntpLastSync, commonDateTimeConfigurationEntry=commonDateTimeConfigurationEntry, commonEntPhysicalEntry=commonEntPhysicalEntry, upsInfoSelftestResult=upsInfoSelftestResult, commonTxNotificationMask=commonTxNotificationMask, commonOpkNotificationPriority=commonOpkNotificationPriority, upsInfoModel=upsInfoModel, softwareUpdate=softwareUpdate, customNotificationVariable=customNotificationVariable, commonGpsConfDeviceIdx=commonGpsConfDeviceIdx, commonEnvStateTable=commonEnvStateTable, commonNotifySoftwareUpdate=commonNotifySoftwareUpdate, upsInfoSecondsOnBattery=upsInfoSecondsOnBattery, commonGpsStSatellitesInView=commonGpsStSatellitesInView, commonNotificationBindings=commonNotificationBindings, commonEntPhysicalPowerUpCycles=commonEntPhysicalPowerUpCycles, deactivationTable=deactivationTable, commonDevInfoFanState=commonDevInfoFanState, customNotificationStatus=customNotificationStatus, commonDateTimeNotificationTable=commonDateTimeNotificationTable, commonGpsState=commonGpsState, rsNotificationsAllOff=rsNotificationsAllOff, customNotificationPriority=customNotificationPriority, commonDevInfoConfAssignOvp=commonDevInfoConfAssignOvp, commonGpsNotificationMask=commonGpsNotificationMask, customNotificationFallingThreshold=customNotificationFallingThreshold, commonEnvDewPoint=commonEnvDewPoint, commonOpkNotificationName=commonOpkNotificationName, commonNotifyEnvironment=commonNotifyEnvironment, commonEnvNotificationPriority=commonEnvNotificationPriority, commonOpkNotificationMask=commonOpkNotificationMask, commonUPS=commonUPS, commonEnvSummary=commonEnvSummary, commonFuncRackControl=commonFuncRackControl, commonDevInfoNotificationTable=commonDevInfoNotificationTable, commonGpsNotificationIdx=commonGpsNotificationIdx, commonEnvNotificationState=commonEnvNotificationState)
