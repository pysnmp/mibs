#
# PySNMP MIB module BENU-DHCP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/benuos/BENU-DHCP-MIB
# Produced by pysmi-1.1.12 at Fri Jul 19 09:59:37 2024
# On host fv-az1251-884 platform Linux version 6.5.0-1023-azure by user runner
# Using Python version 3.10.14 (main, Jun 20 2024, 15:20:03) [GCC 11.4.0]
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
benuWAG, = mibBuilder.importSymbols("BENU-WAG-MIB", "benuWAG")
InetAddressIPv4, InetAddressPrefixLength = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressIPv4", "InetAddressPrefixLength")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, NotificationType, Unsigned32, Integer32, ObjectIdentity, iso, MibIdentifier, Gauge32, TimeTicks, Bits, Counter32, IpAddress, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "NotificationType", "Unsigned32", "Integer32", "ObjectIdentity", "iso", "MibIdentifier", "Gauge32", "TimeTicks", "Bits", "Counter32", "IpAddress", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
bDhcpMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6))
bDhcpMIB.setRevisions(('2015-12-18 00:00', '2015-11-12 00:00', '2015-01-29 00:00', '2015-01-16 00:00', '2014-07-30 00:00', '2014-04-14 00:00', '2013-10-22 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: bDhcpMIB.setRevisionsDescriptions(('Added bDhcpHomeSubnetUsedAddrLow, bDhcpHomeSubnetUsedAddrHigh & added bDhcpv4NotifObjects for supporting Home wrt Home subnets.', 'Added bDhcpSPWiFiGlobalTable and bDhcpHomeGlobalTable', 'Added max. values for ranges & subnet.', 'Updated notification assignments to comply with standards (RFC 2578).', 'bDhcpGlobalTable updated with release indications sent.', 'bDhcpSubnetTable updated with peak addresses held statistic.', 'This version introduces support for DHCPv6',))
if mibBuilder.loadTexts: bDhcpMIB.setLastUpdated('201512180000Z')
if mibBuilder.loadTexts: bDhcpMIB.setOrganization('Benu Networks,Inc')
if mibBuilder.loadTexts: bDhcpMIB.setContactInfo('Benu Networks,Inc\n                          Corporate Headquarters\n                          300 Concord Road, Suite 110\n                          Billerica, MA 01821 USA\n                          Tel: +1 978-223-4700\n                          Fax: +1 978-362-1908\n                          Email: info@benunets.com')
if mibBuilder.loadTexts: bDhcpMIB.setDescription('The MIB module for entities implementing the server side of\n                the Bootstrap Protocol (BOOTP) and the Dynamic Host\n                Configuration protocol (DHCP) for IPv4 and IPv6.\n\n                Copyright (C) 2014 by Benu Networks, Inc.\n                All rights reserved.')
bDhcpNotifications = ObjectIdentity((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 0))
if mibBuilder.loadTexts: bDhcpNotifications.setStatus('current')
if mibBuilder.loadTexts: bDhcpNotifications.setDescription('DHCP  Notifications are defined in this branch.')
bDhcpv4MIBObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 1))
if mibBuilder.loadTexts: bDhcpv4MIBObjects.setStatus('current')
if mibBuilder.loadTexts: bDhcpv4MIBObjects.setDescription('DHCP v4 MIB objects information is defined in this branch.')
bDhcpv4NotifObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 2))
if mibBuilder.loadTexts: bDhcpv4NotifObjects.setStatus('current')
if mibBuilder.loadTexts: bDhcpv4NotifObjects.setDescription('DHCP v4 Notifications are defined in this branch.')
bDhcpv6MIBObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 3))
if mibBuilder.loadTexts: bDhcpv6MIBObjects.setStatus('current')
if mibBuilder.loadTexts: bDhcpv6MIBObjects.setDescription('DHCP v6 MIB objects information is defined in this branch.')
bDhcpv6NotifObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 4))
if mibBuilder.loadTexts: bDhcpv6NotifObjects.setStatus('current')
if mibBuilder.loadTexts: bDhcpv6NotifObjects.setDescription('DHCP v6 Notifications are defined in this branch.')
bDhcpSubnetTable = MibTable((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 1, 1), )
if mibBuilder.loadTexts: bDhcpSubnetTable.setStatus('current')
if mibBuilder.loadTexts: bDhcpSubnetTable.setDescription('A list of subnets that are configured in this server.')
bDhcpSubnetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 1, 1, 1), ).setIndexNames((0, "BENU-DHCP-MIB", "bDhcpSubnetStatsInterval"), (0, "BENU-DHCP-MIB", "bDhcpSubnetIndex"), (0, "BENU-DHCP-MIB", "bDhcpSubnetRangeIndex"))
if mibBuilder.loadTexts: bDhcpSubnetEntry.setStatus('current')
if mibBuilder.loadTexts: bDhcpSubnetEntry.setDescription('A logical row in the bDhcpSubnetTable.')
bDhcpSubnetStatsInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 1, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: bDhcpSubnetStatsInterval.setStatus('current')
if mibBuilder.loadTexts: bDhcpSubnetStatsInterval.setDescription('The interval where the measurements were accumulated.\n       The interval index one indicates the latest interval\n       for which statistics accumulation was completed. Older\n       the statistics interval data greater the interval index value.\n       In a system supporting a history of n intervals with\n       IntervalCount(1) and IntervalCount(n) the most and least recent\n       intervals respectively, the following\n       applies at the end of a interval:\n       - discard the value of IntervalCount(n)\n       - the value of IntervalCount(i) becomes that\n         of IntervalCount(i+1) for 1 <= i <n .\n       - the value of IntervalCount(1) becomes that\n         of CurrentCount')
bDhcpSubnetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 144)))
if mibBuilder.loadTexts: bDhcpSubnetIndex.setStatus('current')
if mibBuilder.loadTexts: bDhcpSubnetIndex.setDescription('The index of the subnet entry in the table. DHCP supports max. 144\nsubnets.')
bDhcpSubnetRangeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: bDhcpSubnetRangeIndex.setStatus('current')
if mibBuilder.loadTexts: bDhcpSubnetRangeIndex.setDescription('The index of the range from the subnet entry in the table. DHCP\nsupports max. 16 ranges per subnet.')
bDhcpSubnetIntervalDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpSubnetIntervalDuration.setStatus('current')
if mibBuilder.loadTexts: bDhcpSubnetIntervalDuration.setDescription('Duration of the interval in minutes.')
bDhcpSubnetStartAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 1, 1, 1, 5), InetAddressIPv4()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpSubnetStartAddress.setStatus('current')
if mibBuilder.loadTexts: bDhcpSubnetStartAddress.setDescription('The first subnet IP address.')
bDhcpSubnetEndAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 1, 1, 1, 6), InetAddressIPv4()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpSubnetEndAddress.setStatus('current')
if mibBuilder.loadTexts: bDhcpSubnetEndAddress.setDescription('The last subnet IP address.')
bDhcpSubnetTotalAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 1, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpSubnetTotalAddresses.setStatus('current')
if mibBuilder.loadTexts: bDhcpSubnetTotalAddresses.setDescription('The total number of addresses in the subnet .')
bDhcpSubnetPeakFreeAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 1, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpSubnetPeakFreeAddresses.setStatus('current')
if mibBuilder.loadTexts: bDhcpSubnetPeakFreeAddresses.setDescription('The peak number of free IP addresses that are available in the subnet')
bDhcpSubnetPeakUsedAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 1, 1, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpSubnetPeakUsedAddresses.setStatus('current')
if mibBuilder.loadTexts: bDhcpSubnetPeakUsedAddresses.setDescription('The peak number of used IP addresses that are used in the subnet')
bDhcpSubnetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 1, 1, 1, 10), InetAddressIPv4()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpSubnetAddress.setStatus('current')
if mibBuilder.loadTexts: bDhcpSubnetAddress.setDescription('The IP address of the subnet entry in the table.')
bDhcpSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 1, 1, 1, 11), InetAddressPrefixLength()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpSubnetMask.setStatus('current')
if mibBuilder.loadTexts: bDhcpSubnetMask.setDescription('The subnet mask of the subnet.')
bDhcpSubnetUsedAddrLowThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 1, 1, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpSubnetUsedAddrLowThreshold.setStatus('current')
if mibBuilder.loadTexts: bDhcpSubnetUsedAddrLowThreshold.setDescription('The low threshold for used IP addresses in this subnet.\n        If the value for used IP addresses in this subnet\n        becomes equal to or less than this value and the current\n        condition for bDhcpSubnetUsedAddrHigh is raised, then a\n        bDhcpSubnetUsedAddrLow event will be generated. No more\n        bDhcpSubnetUsedAddrLow events will be generated for this\n        subnet during its execution until the value for used addresses\n        has exceeded the value of bDhcpSubnetUsedAddrHighThreshold.')
bDhcpSubnetUsedAddrHighThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 1, 1, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpSubnetUsedAddrHighThreshold.setStatus('current')
if mibBuilder.loadTexts: bDhcpSubnetUsedAddrHighThreshold.setDescription('The high threshold for used IP addresses in this subnet.\n        If a bDhcpSubnetUsedAddrLow event has been generated (or no\n        bDhcpSubnetUsedAddrHigh was generated previously) for this\n        subnet, and the value for used IP addresses in this subnet\n        has exceeded this value then a bDhcpSubnetUsedAddrHigh\n        event will be generated. No more bDhcpSubnetUsedAddrHigh\n        events will be generated for this subnet during its execution\n        until the value for used addresses in this subnet becomes\n        equal to or less than the value of\n        bDhcpSubnetUsedAddrLowThreshold.')
bDhcpSubnetPeakHoldAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 1, 1, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpSubnetPeakHoldAddresses.setStatus('current')
if mibBuilder.loadTexts: bDhcpSubnetPeakHoldAddresses.setDescription('The peak number of IP addresses that are held within this subnet.')
bDhcpGlobalTable = MibTable((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 1, 2), )
if mibBuilder.loadTexts: bDhcpGlobalTable.setStatus('current')
if mibBuilder.loadTexts: bDhcpGlobalTable.setDescription('A list of Global DHCP server information for various intervals.')
bDhcpGlobalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 1, 2, 1), ).setIndexNames((0, "BENU-DHCP-MIB", "bDhcpGlobalStatsInterval"))
if mibBuilder.loadTexts: bDhcpGlobalEntry.setStatus('current')
if mibBuilder.loadTexts: bDhcpGlobalEntry.setDescription('A logical row in the bDhcpGlobalTable.')
bDhcpGlobalStatsInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 1, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: bDhcpGlobalStatsInterval.setStatus('current')
if mibBuilder.loadTexts: bDhcpGlobalStatsInterval.setDescription('The interval where the measurements were accumulated.\n       The interval index one indicates the latest interval for which statistics\n       accumulation was completed. Older the statistics interval data greater the\n       interval index value.\n       In a system supporting a history of n intervals with IntervalCount(1) and\n       IntervalCount(n) the most and least recent intervals respectively, the following\n       applies at the end of a interval:\n       - discard the value of IntervalCount(n)\n       - the value of IntervalCount(i) becomes that\n         of IntervalCount(i+1) for 1 <= i <n .\n       - the value of IntervalCount(1) becomes that\n         of CurrentCount')
bDhcpDiscoversRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 1, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpDiscoversRcvd.setStatus('current')
if mibBuilder.loadTexts: bDhcpDiscoversRcvd.setDescription('The number of DHCPDISCOVER packets received.')
bDhcpOffersSent = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 1, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpOffersSent.setStatus('current')
if mibBuilder.loadTexts: bDhcpOffersSent.setDescription('The number of DHCPOFFER packets sent.')
bDhcpRequestsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 1, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpRequestsRcvd.setStatus('current')
if mibBuilder.loadTexts: bDhcpRequestsRcvd.setDescription('The number of DHCPREQUEST packets received.')
bDhcpDeclinesRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 1, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpDeclinesRcvd.setStatus('current')
if mibBuilder.loadTexts: bDhcpDeclinesRcvd.setDescription('The number of DHCPDECLINE packets received.')
bDhcpAcksSent = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 1, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpAcksSent.setStatus('current')
if mibBuilder.loadTexts: bDhcpAcksSent.setDescription('The number of DHCPACK packets sent.')
bDhcpNacksSent = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 1, 2, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpNacksSent.setStatus('current')
if mibBuilder.loadTexts: bDhcpNacksSent.setDescription('The number of DHCPNACK packets sent.')
bDhcpReleasesRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 1, 2, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpReleasesRcvd.setStatus('current')
if mibBuilder.loadTexts: bDhcpReleasesRcvd.setDescription('The number of DHCPRELEASE packets received.')
bDhcpReleasesIndRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 1, 2, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpReleasesIndRcvd.setStatus('current')
if mibBuilder.loadTexts: bDhcpReleasesIndRcvd.setDescription('The number of DHCPRELEASE indication packets received.')
bDhcpReleasesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 1, 2, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpReleasesSent.setStatus('current')
if mibBuilder.loadTexts: bDhcpReleasesSent.setDescription('The number of DHCPRELEASE packets sent.')
bDhcpInformsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 1, 2, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpInformsRcvd.setStatus('current')
if mibBuilder.loadTexts: bDhcpInformsRcvd.setDescription('The number of DHCPINFORM packets received.')
bDhcpInformsAckSent = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 1, 2, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpInformsAckSent.setStatus('current')
if mibBuilder.loadTexts: bDhcpInformsAckSent.setDescription('The number of DHCPINFORM ACK packets sent.')
bDhcpDropDiscover = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 1, 2, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpDropDiscover.setStatus('current')
if mibBuilder.loadTexts: bDhcpDropDiscover.setDescription('The number of DHCPDISCOVER packets dropped.')
bDhcpDropRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 1, 2, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpDropRequest.setStatus('current')
if mibBuilder.loadTexts: bDhcpDropRequest.setDescription('The number of DHCPREQUEST packets dropped.')
bDhcpDropRelease = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 1, 2, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpDropRelease.setStatus('current')
if mibBuilder.loadTexts: bDhcpDropRelease.setDescription('The number of DHCPRELEASE packets dropped.')
bDhcpLeasesAssigned = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 1, 2, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpLeasesAssigned.setStatus('current')
if mibBuilder.loadTexts: bDhcpLeasesAssigned.setDescription('Total number of leases assigned on DHCP server')
bDhcpLeasesReleased = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 1, 2, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpLeasesReleased.setStatus('current')
if mibBuilder.loadTexts: bDhcpLeasesReleased.setDescription('Total number of leases released on DHCP server')
bDhcpLeasesRelFail = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 1, 2, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpLeasesRelFail.setStatus('current')
if mibBuilder.loadTexts: bDhcpLeasesRelFail.setDescription('Total number of leases release failed on DHCP server')
bDhcpLeasesExpired = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 1, 2, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpLeasesExpired.setStatus('current')
if mibBuilder.loadTexts: bDhcpLeasesExpired.setDescription('Total number of leases expired on DHCP server')
bDhcpLeasesRenewed = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 1, 2, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpLeasesRenewed.setStatus('current')
if mibBuilder.loadTexts: bDhcpLeasesRenewed.setDescription('Total number of leases renewed on DHCP server')
bDhcpLeasesRenewFail = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 1, 2, 1, 21), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpLeasesRenewFail.setStatus('current')
if mibBuilder.loadTexts: bDhcpLeasesRenewFail.setDescription('Total number of leases renew failed on DHCP server')
bDhcpLeasesNotAssignServIntNotConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 1, 2, 1, 22), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpLeasesNotAssignServIntNotConfig.setStatus('current')
if mibBuilder.loadTexts: bDhcpLeasesNotAssignServIntNotConfig.setDescription('Total number of leases not assigned due to interface not configured\n       on DHCP server')
bDhcpLeasesNotAssignFreeBuffUnavail = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 1, 2, 1, 23), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpLeasesNotAssignFreeBuffUnavail.setStatus('current')
if mibBuilder.loadTexts: bDhcpLeasesNotAssignFreeBuffUnavail.setDescription('Total number of leases not assigned due to unavailability of\n       free buffers')
bDhcpIntervalDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 1, 2, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpIntervalDuration.setStatus('current')
if mibBuilder.loadTexts: bDhcpIntervalDuration.setDescription('Duration of the interval in minutes')
bBootpRequestsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 1, 2, 1, 25), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bBootpRequestsRcvd.setStatus('current')
if mibBuilder.loadTexts: bBootpRequestsRcvd.setDescription('Total number of BOOTP request mesages received')
bBootpRepliesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 1, 2, 1, 26), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bBootpRepliesSent.setStatus('current')
if mibBuilder.loadTexts: bBootpRepliesSent.setDescription('Total number of BOOTP reply mesages sent')
bDhcpReleasesIndSent = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 1, 2, 1, 27), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpReleasesIndSent.setStatus('current')
if mibBuilder.loadTexts: bDhcpReleasesIndSent.setDescription('The number of DHCPRELEASE indication packets sent.')
bDhcpSPWiFiGlobalTable = MibTable((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 1, 4), )
if mibBuilder.loadTexts: bDhcpSPWiFiGlobalTable.setStatus('current')
if mibBuilder.loadTexts: bDhcpSPWiFiGlobalTable.setDescription('A list of Global DHCP server information for SPWiFi for various intervals.')
bDhcpSPWiFiGlobalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 1, 4, 1), ).setIndexNames((0, "BENU-DHCP-MIB", "bDhcpSPWiFiGlobalStatsInterval"))
if mibBuilder.loadTexts: bDhcpSPWiFiGlobalEntry.setStatus('current')
if mibBuilder.loadTexts: bDhcpSPWiFiGlobalEntry.setDescription('A logical row in the bDhcpSPWiFiGlobalTable.')
bDhcpSPWiFiGlobalStatsInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 1, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: bDhcpSPWiFiGlobalStatsInterval.setStatus('current')
if mibBuilder.loadTexts: bDhcpSPWiFiGlobalStatsInterval.setDescription('The interval where the measurements were accumulated.\n       The interval index one indicates the latest interval for which statistics\n       accumulation was completed. Older the statistics interval data greater the\n       interval index value.\n       In a system supporting a history of n intervals with IntervalCount(1) and\n       IntervalCount(n) the most and least recent intervals respectively, the following\n       applies at the end of a interval:\n       - discard the value of IntervalCount(n)\n       - the value of IntervalCount(i) becomes that\n         of IntervalCount(i+1) for 1 <= i <n .\n       - the value of IntervalCount(1) becomes that\n         of CurrentCount')
bDhcpSPWiFiDiscoversRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 1, 4, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpSPWiFiDiscoversRcvd.setStatus('current')
if mibBuilder.loadTexts: bDhcpSPWiFiDiscoversRcvd.setDescription('The number of SPWiFi DHCPDISCOVER packets received.')
bDhcpSPWiFiOffersSent = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 1, 4, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpSPWiFiOffersSent.setStatus('current')
if mibBuilder.loadTexts: bDhcpSPWiFiOffersSent.setDescription('The number of SPWiFi DHCPOFFER packets sent.')
bDhcpSPWiFiRequestsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 1, 4, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpSPWiFiRequestsRcvd.setStatus('current')
if mibBuilder.loadTexts: bDhcpSPWiFiRequestsRcvd.setDescription('The number of SPWiFi DHCPREQUEST packets received.')
bDhcpSPWiFiDeclinesRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 1, 4, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpSPWiFiDeclinesRcvd.setStatus('current')
if mibBuilder.loadTexts: bDhcpSPWiFiDeclinesRcvd.setDescription('The number of SPWiFi DHCPDECLINE packets received.')
bDhcpSPWiFiAcksSent = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 1, 4, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpSPWiFiAcksSent.setStatus('current')
if mibBuilder.loadTexts: bDhcpSPWiFiAcksSent.setDescription('The number of SPWiFi DHCPACK packets sent.')
bDhcpSPWiFiNacksSent = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 1, 4, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpSPWiFiNacksSent.setStatus('current')
if mibBuilder.loadTexts: bDhcpSPWiFiNacksSent.setDescription('The number of SPWiFi DHCPNACK packets sent.')
bDhcpSPWiFiReleasesRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 1, 4, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpSPWiFiReleasesRcvd.setStatus('current')
if mibBuilder.loadTexts: bDhcpSPWiFiReleasesRcvd.setDescription('The number of SPWiFi DHCPRELEASE packets received.')
bDhcpSPWiFiReleasesIndRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 1, 4, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpSPWiFiReleasesIndRcvd.setStatus('current')
if mibBuilder.loadTexts: bDhcpSPWiFiReleasesIndRcvd.setDescription('The number of SPWiFi DHCPRELEASE indication packets received.')
bDhcpSPWiFiReleasesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 1, 4, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpSPWiFiReleasesSent.setStatus('current')
if mibBuilder.loadTexts: bDhcpSPWiFiReleasesSent.setDescription('The number of SPWiFi DHCPRELEASE packets sent.')
bDhcpSPWiFiInformsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 1, 4, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpSPWiFiInformsRcvd.setStatus('current')
if mibBuilder.loadTexts: bDhcpSPWiFiInformsRcvd.setDescription('The number of SPWiFi DHCPINFORM packets received.')
bDhcpSPWiFiInformsAckSent = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 1, 4, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpSPWiFiInformsAckSent.setStatus('current')
if mibBuilder.loadTexts: bDhcpSPWiFiInformsAckSent.setDescription('The number of SPWiFi DHCPINFORM ACK packets sent.')
bDhcpSPWiFiDropDiscover = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 1, 4, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpSPWiFiDropDiscover.setStatus('current')
if mibBuilder.loadTexts: bDhcpSPWiFiDropDiscover.setDescription('The number of SPWiFi DHCPDISCOVER packets dropped.')
bDhcpSPWiFiDropRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 1, 4, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpSPWiFiDropRequest.setStatus('current')
if mibBuilder.loadTexts: bDhcpSPWiFiDropRequest.setDescription('The number of SPWiFi DHCPREQUEST packets dropped.')
bDhcpSPWiFiDropRelease = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 1, 4, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpSPWiFiDropRelease.setStatus('current')
if mibBuilder.loadTexts: bDhcpSPWiFiDropRelease.setDescription('The number of SPWiFi DHCPRELEASE packets dropped.')
bDhcpSPWiFiLeasesAssigned = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 1, 4, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpSPWiFiLeasesAssigned.setStatus('current')
if mibBuilder.loadTexts: bDhcpSPWiFiLeasesAssigned.setDescription('Total number of SPWiFi leases assigned on DHCP server')
bDhcpSPWiFiLeasesReleased = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 1, 4, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpSPWiFiLeasesReleased.setStatus('current')
if mibBuilder.loadTexts: bDhcpSPWiFiLeasesReleased.setDescription('Total number of SPWiFi leases released on DHCP server')
bDhcpSPWiFiLeasesRelFail = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 1, 4, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpSPWiFiLeasesRelFail.setStatus('current')
if mibBuilder.loadTexts: bDhcpSPWiFiLeasesRelFail.setDescription('Total number of SPWiFi leases release failed on DHCP server')
bDhcpSPWiFiLeasesExpired = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 1, 4, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpSPWiFiLeasesExpired.setStatus('current')
if mibBuilder.loadTexts: bDhcpSPWiFiLeasesExpired.setDescription('Total number of SPWiFi leases expired on DHCP server')
bDhcpSPWiFiLeasesRenewed = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 1, 4, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpSPWiFiLeasesRenewed.setStatus('current')
if mibBuilder.loadTexts: bDhcpSPWiFiLeasesRenewed.setDescription('Total number of SPWiFi leases renewed on DHCP server')
bDhcpSPWiFiLeasesRenewFail = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 1, 4, 1, 21), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpSPWiFiLeasesRenewFail.setStatus('current')
if mibBuilder.loadTexts: bDhcpSPWiFiLeasesRenewFail.setDescription('Total number of SPWiFi leases renew failed on DHCP server')
bDhcpSPWiFiLeasesNotAssignServIntNotConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 1, 4, 1, 22), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpSPWiFiLeasesNotAssignServIntNotConfig.setStatus('current')
if mibBuilder.loadTexts: bDhcpSPWiFiLeasesNotAssignServIntNotConfig.setDescription('Total number of SPWiFi leases not assigned due to interface not configured\n       on DHCP server')
bDhcpSPWiFiLeasesNotAssignFreeBuffUnavail = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 1, 4, 1, 23), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpSPWiFiLeasesNotAssignFreeBuffUnavail.setStatus('current')
if mibBuilder.loadTexts: bDhcpSPWiFiLeasesNotAssignFreeBuffUnavail.setDescription('Total number of SPWiFi leases not assigned due to unavailability of\n       free buffers')
bDhcpSPWiFiIntervalDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 1, 4, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpSPWiFiIntervalDuration.setStatus('current')
if mibBuilder.loadTexts: bDhcpSPWiFiIntervalDuration.setDescription('SPWiFi duration of the interval in minutes')
bSPWiFiBootpRequestsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 1, 4, 1, 25), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bSPWiFiBootpRequestsRcvd.setStatus('current')
if mibBuilder.loadTexts: bSPWiFiBootpRequestsRcvd.setDescription('Total number of SPWiFi BOOTP request mesages received')
bSPWiFiBootpRepliesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 1, 4, 1, 26), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bSPWiFiBootpRepliesSent.setStatus('current')
if mibBuilder.loadTexts: bSPWiFiBootpRepliesSent.setDescription('Total number of SPWiFi BOOTP reply mesages sent')
bDhcpSPWiFiReleasesIndSent = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 1, 4, 1, 27), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpSPWiFiReleasesIndSent.setStatus('current')
if mibBuilder.loadTexts: bDhcpSPWiFiReleasesIndSent.setDescription('The number of SPWiFi DHCPRELEASE indication packets sent.')
bDhcpHomeGlobalTable = MibTable((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 1, 5), )
if mibBuilder.loadTexts: bDhcpHomeGlobalTable.setStatus('current')
if mibBuilder.loadTexts: bDhcpHomeGlobalTable.setDescription('A list of Global DHCP server information for Home for various intervals.')
bDhcpHomeGlobalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 1, 5, 1), ).setIndexNames((0, "BENU-DHCP-MIB", "bDhcpHomeGlobalStatsInterval"))
if mibBuilder.loadTexts: bDhcpHomeGlobalEntry.setStatus('current')
if mibBuilder.loadTexts: bDhcpHomeGlobalEntry.setDescription('A logical row in the bDhcpHomeGlobalTable.')
bDhcpHomeGlobalStatsInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 1, 5, 1, 1), Integer32())
if mibBuilder.loadTexts: bDhcpHomeGlobalStatsInterval.setStatus('current')
if mibBuilder.loadTexts: bDhcpHomeGlobalStatsInterval.setDescription('The interval where the measurements were accumulated.\n       The interval index one indicates the latest interval for which statistics\n       accumulation was completed. Older the statistics interval data greater the\n       interval index value.\n       In a system supporting a history of n intervals with IntervalCount(1) and\n       IntervalCount(n) the most and least recent intervals respectively, the following\n       applies at the end of a interval:\n       - discard the value of IntervalCount(n)\n       - the value of IntervalCount(i) becomes that\n         of IntervalCount(i+1) for 1 <= i <n .\n       - the value of IntervalCount(1) becomes that\n         of CurrentCount')
bDhcpHomeDiscoversRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 1, 5, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpHomeDiscoversRcvd.setStatus('current')
if mibBuilder.loadTexts: bDhcpHomeDiscoversRcvd.setDescription('The number of Home DHCPDISCOVER packets received.')
bDhcpHomeOffersSent = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 1, 5, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpHomeOffersSent.setStatus('current')
if mibBuilder.loadTexts: bDhcpHomeOffersSent.setDescription('The number of Home DHCPOFFER packets sent.')
bDhcpHomeRequestsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 1, 5, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpHomeRequestsRcvd.setStatus('current')
if mibBuilder.loadTexts: bDhcpHomeRequestsRcvd.setDescription('The number of Home DHCPREQUEST packets received.')
bDhcpHomeDeclinesRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 1, 5, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpHomeDeclinesRcvd.setStatus('current')
if mibBuilder.loadTexts: bDhcpHomeDeclinesRcvd.setDescription('The number of Home DHCPDECLINE packets received.')
bDhcpHomeAcksSent = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 1, 5, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpHomeAcksSent.setStatus('current')
if mibBuilder.loadTexts: bDhcpHomeAcksSent.setDescription('The number of Home DHCPACK packets sent.')
bDhcpHomeNacksSent = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 1, 5, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpHomeNacksSent.setStatus('current')
if mibBuilder.loadTexts: bDhcpHomeNacksSent.setDescription('The number of Home DHCPNACK packets sent.')
bDhcpHomeReleasesRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 1, 5, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpHomeReleasesRcvd.setStatus('current')
if mibBuilder.loadTexts: bDhcpHomeReleasesRcvd.setDescription('The number of Home DHCPRELEASE packets received.')
bDhcpHomeReleasesIndRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 1, 5, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpHomeReleasesIndRcvd.setStatus('current')
if mibBuilder.loadTexts: bDhcpHomeReleasesIndRcvd.setDescription('The number of Home DHCPRELEASE indication packets received.')
bDhcpHomeReleasesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 1, 5, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpHomeReleasesSent.setStatus('current')
if mibBuilder.loadTexts: bDhcpHomeReleasesSent.setDescription('The number of Home DHCPRELEASE packets sent.')
bDhcpHomeInformsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 1, 5, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpHomeInformsRcvd.setStatus('current')
if mibBuilder.loadTexts: bDhcpHomeInformsRcvd.setDescription('The number of Home DHCPINFORM packets received.')
bDhcpHomeInformsAckSent = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 1, 5, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpHomeInformsAckSent.setStatus('current')
if mibBuilder.loadTexts: bDhcpHomeInformsAckSent.setDescription('The number of Home DHCPINFORM ACK packets sent.')
bDhcpHomeDropDiscover = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 1, 5, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpHomeDropDiscover.setStatus('current')
if mibBuilder.loadTexts: bDhcpHomeDropDiscover.setDescription('The number of Home DHCPDISCOVER packets dropped.')
bDhcpHomeDropRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 1, 5, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpHomeDropRequest.setStatus('current')
if mibBuilder.loadTexts: bDhcpHomeDropRequest.setDescription('The number of Home DHCPREQUEST packets dropped.')
bDhcpHomeDropRelease = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 1, 5, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpHomeDropRelease.setStatus('current')
if mibBuilder.loadTexts: bDhcpHomeDropRelease.setDescription('The number of Home DHCPRELEASE packets dropped.')
bDhcpHomeLeasesAssigned = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 1, 5, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpHomeLeasesAssigned.setStatus('current')
if mibBuilder.loadTexts: bDhcpHomeLeasesAssigned.setDescription('Total number of Home leases assigned on DHCP server')
bDhcpHomeLeasesReleased = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 1, 5, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpHomeLeasesReleased.setStatus('current')
if mibBuilder.loadTexts: bDhcpHomeLeasesReleased.setDescription('Total number of Home leases released on DHCP server')
bDhcpHomeLeasesRelFail = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 1, 5, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpHomeLeasesRelFail.setStatus('current')
if mibBuilder.loadTexts: bDhcpHomeLeasesRelFail.setDescription('Total number of Home leases release failed on DHCP server')
bDhcpHomeLeasesExpired = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 1, 5, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpHomeLeasesExpired.setStatus('current')
if mibBuilder.loadTexts: bDhcpHomeLeasesExpired.setDescription('Total number of Home leases expired on DHCP server')
bDhcpHomeLeasesRenewed = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 1, 5, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpHomeLeasesRenewed.setStatus('current')
if mibBuilder.loadTexts: bDhcpHomeLeasesRenewed.setDescription('Total number of Home leases renewed on DHCP server')
bDhcpHomeLeasesRenewFail = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 1, 5, 1, 21), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpHomeLeasesRenewFail.setStatus('current')
if mibBuilder.loadTexts: bDhcpHomeLeasesRenewFail.setDescription('Total number of Home leases renew failed on DHCP server')
bDhcpHomeLeasesNotAssignServIntNotConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 1, 5, 1, 22), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpHomeLeasesNotAssignServIntNotConfig.setStatus('current')
if mibBuilder.loadTexts: bDhcpHomeLeasesNotAssignServIntNotConfig.setDescription('Total number of Home leases not assigned due to interface not configured\n       on DHCP server')
bDhcpHomeLeasesNotAssignFreeBuffUnavail = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 1, 5, 1, 23), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpHomeLeasesNotAssignFreeBuffUnavail.setStatus('current')
if mibBuilder.loadTexts: bDhcpHomeLeasesNotAssignFreeBuffUnavail.setDescription('Total number of Home leases not assigned due to unavailability of\n       free buffers')
bDhcpHomeIntervalDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 1, 5, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpHomeIntervalDuration.setStatus('current')
if mibBuilder.loadTexts: bDhcpHomeIntervalDuration.setDescription('Home duration of the interval in minutes')
bHomeBootpRequestsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 1, 5, 1, 25), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bHomeBootpRequestsRcvd.setStatus('current')
if mibBuilder.loadTexts: bHomeBootpRequestsRcvd.setDescription('Total number of Home BOOTP request mesages received')
bHomeBootpRepliesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 1, 5, 1, 26), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bHomeBootpRepliesSent.setStatus('current')
if mibBuilder.loadTexts: bHomeBootpRepliesSent.setDescription('Total number of Home BOOTP reply mesages sent')
bDhcpHomeReleasesIndSent = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 1, 5, 1, 27), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpHomeReleasesIndSent.setStatus('current')
if mibBuilder.loadTexts: bDhcpHomeReleasesIndSent.setDescription('The number of Home DHCPRELEASE indication packets sent.')
bDhcpv4ActiveClient = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpv4ActiveClient.setStatus('current')
if mibBuilder.loadTexts: bDhcpv4ActiveClient.setDescription('The number of DHCP v4 active clients.')
bDhcpv4ActiveSpWiFiClients = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpv4ActiveSpWiFiClients.setStatus('current')
if mibBuilder.loadTexts: bDhcpv4ActiveSpWiFiClients.setDescription('The number of DHCP v4 SP WiFi active clients.')
bDhcpv4ActiveHomeClients = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpv4ActiveHomeClients.setStatus('current')
if mibBuilder.loadTexts: bDhcpv4ActiveHomeClients.setDescription('The number of DHCP v4 active Home clients.')
bDhcpv6ActiveClient = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 3, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpv6ActiveClient.setStatus('current')
if mibBuilder.loadTexts: bDhcpv6ActiveClient.setDescription('The number of DHCP v6 active clients.')
bDhcpv6GlobalTable = MibTable((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 3, 2), )
if mibBuilder.loadTexts: bDhcpv6GlobalTable.setStatus('current')
if mibBuilder.loadTexts: bDhcpv6GlobalTable.setDescription('A list of Global DHCPv6 server information for various intervals.')
bDhcpv6GlobalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 3, 2, 1), ).setIndexNames((0, "BENU-DHCP-MIB", "bDhcpv6GlobalStatsInterval"))
if mibBuilder.loadTexts: bDhcpv6GlobalEntry.setStatus('current')
if mibBuilder.loadTexts: bDhcpv6GlobalEntry.setDescription('A logical row in the bDhcpv6GlobalTable.')
bDhcpv6GlobalStatsInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 3, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: bDhcpv6GlobalStatsInterval.setStatus('current')
if mibBuilder.loadTexts: bDhcpv6GlobalStatsInterval.setDescription('The interval where the measurements were accumulated.\n       The interval index one indicates the latest interval for which statistics\n       accumulation was completed. Older the statistics interval data greater the\n       interval index value.\n       In a system supporting a history of n intervals with IntervalCount(1) and\n       IntervalCount(n) the most and least recent intervals respectively, the following\n       applies at the end of a interval:\n       - discard the value of IntervalCount(n)\n       - the value of IntervalCount(i) becomes that\n         of IntervalCount(i+1) for 1 <= i <n .\n       - the value of IntervalCount(1) becomes that\n         of CurrentCount')
bDhcpv6SolicitsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 3, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpv6SolicitsRcvd.setStatus('current')
if mibBuilder.loadTexts: bDhcpv6SolicitsRcvd.setDescription('The number of DHCPv6 Solicit packets received.')
bDhcpv6OffersSent = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 3, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpv6OffersSent.setStatus('current')
if mibBuilder.loadTexts: bDhcpv6OffersSent.setDescription('The number of DHCPOFFER packets sent.')
bDhcpv6RequestsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 3, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpv6RequestsRcvd.setStatus('current')
if mibBuilder.loadTexts: bDhcpv6RequestsRcvd.setDescription('The number of DHCPv6 Request packets received.')
bDhcpv6DeclinesRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 3, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpv6DeclinesRcvd.setStatus('current')
if mibBuilder.loadTexts: bDhcpv6DeclinesRcvd.setDescription('The number of DHCPv6 Decline packets received.')
bDhcpv6ReleasesRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 3, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpv6ReleasesRcvd.setStatus('current')
if mibBuilder.loadTexts: bDhcpv6ReleasesRcvd.setDescription('The number of DHCPv6 Release packets received.')
bDhcpv6ReleaseIndRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 3, 2, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpv6ReleaseIndRcvd.setStatus('current')
if mibBuilder.loadTexts: bDhcpv6ReleaseIndRcvd.setDescription('The number of DHCPv6 ReleaseInd packets received.')
bDhcpv6RenewRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 3, 2, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpv6RenewRcvd.setStatus('current')
if mibBuilder.loadTexts: bDhcpv6RenewRcvd.setDescription('The number of DHCPv6 Renew packets received.')
bDhcpv6RebindRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 3, 2, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpv6RebindRcvd.setStatus('current')
if mibBuilder.loadTexts: bDhcpv6RebindRcvd.setDescription('The number of DHCPv6 Rebind packets received.')
bDhcpv6InformsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 3, 2, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpv6InformsRcvd.setStatus('current')
if mibBuilder.loadTexts: bDhcpv6InformsRcvd.setDescription('The number of DHCPv6 Inform packets received.')
bDhcpv6ConfirmsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 3, 2, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpv6ConfirmsRcvd.setStatus('current')
if mibBuilder.loadTexts: bDhcpv6ConfirmsRcvd.setDescription('The number of DHCPv6 Confirm packets received.')
bDhcpv6ReplysSent = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 3, 2, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpv6ReplysSent.setStatus('current')
if mibBuilder.loadTexts: bDhcpv6ReplysSent.setDescription('The number of DHCPv6 Reply packets sent.')
bDhcpv6AdvertisesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 3, 2, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpv6AdvertisesSent.setStatus('current')
if mibBuilder.loadTexts: bDhcpv6AdvertisesSent.setDescription('The number of DHCPv6 Advertises packets sent.')
bDhcpv6UnknownMsgsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 3, 2, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpv6UnknownMsgsRcvd.setStatus('current')
if mibBuilder.loadTexts: bDhcpv6UnknownMsgsRcvd.setDescription('The number of DHCPv6 UnknownMsg packets received.')
bDhcpv6ReconfigsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 3, 2, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpv6ReconfigsSent.setStatus('current')
if mibBuilder.loadTexts: bDhcpv6ReconfigsSent.setDescription('The number of DHCPv6 Reconfig packets sent.')
bDhcpv6DropSolicit = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 3, 2, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpv6DropSolicit.setStatus('current')
if mibBuilder.loadTexts: bDhcpv6DropSolicit.setDescription('The number of DHCPv6 Solicit packets dropped.')
bDhcpv6DropAdvertise = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 3, 2, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpv6DropAdvertise.setStatus('current')
if mibBuilder.loadTexts: bDhcpv6DropAdvertise.setDescription('The number of DHCPv6 Advertise packets dropped.')
bDhcpv6DropDupSolicit = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 3, 2, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpv6DropDupSolicit.setStatus('current')
if mibBuilder.loadTexts: bDhcpv6DropDupSolicit.setDescription('The number of DHCPv6 Duplicate Solicit packets dropped.')
bDhcpv6DropRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 3, 2, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpv6DropRequest.setStatus('current')
if mibBuilder.loadTexts: bDhcpv6DropRequest.setDescription('The number of DHCPv6 Request packets dropped.')
bDhcpv6DropRelease = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 3, 2, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpv6DropRelease.setStatus('current')
if mibBuilder.loadTexts: bDhcpv6DropRelease.setDescription('The number of DHCPv6 Release packets dropped.')
bDhcpv6DropDecline = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 3, 2, 1, 21), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpv6DropDecline.setStatus('current')
if mibBuilder.loadTexts: bDhcpv6DropDecline.setDescription('The number of DHCPv6 Decline packets dropped.')
bDhcpv6DropRenew = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 3, 2, 1, 22), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpv6DropRenew.setStatus('current')
if mibBuilder.loadTexts: bDhcpv6DropRenew.setDescription('The number of DHCPv6 Renew packets dropped.')
bDhcpv6DropRebind = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 3, 2, 1, 23), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpv6DropRebind.setStatus('current')
if mibBuilder.loadTexts: bDhcpv6DropRebind.setDescription('The number of DHCPv6 Rebind packets dropped.')
bDhcpv6DropConfirm = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 3, 2, 1, 24), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpv6DropConfirm.setStatus('current')
if mibBuilder.loadTexts: bDhcpv6DropConfirm.setDescription('The number of DHCPv6 Confirm packets dropped.')
bDhcpv6DropInform = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 3, 2, 1, 25), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpv6DropInform.setStatus('current')
if mibBuilder.loadTexts: bDhcpv6DropInform.setDescription('The number of DHCPv6 Information-Request packets dropped.')
bDhcpv6DropRelay = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 3, 2, 1, 26), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpv6DropRelay.setStatus('current')
if mibBuilder.loadTexts: bDhcpv6DropRelay.setDescription('The number of DHCPv6 Relay packets dropped.')
bDhcpv6DropReply = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 3, 2, 1, 27), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpv6DropReply.setStatus('current')
if mibBuilder.loadTexts: bDhcpv6DropReply.setDescription('The number of DHCPv6 Reply packets dropped.')
bDhcpv6DropRelayReply = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 3, 2, 1, 28), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpv6DropRelayReply.setStatus('current')
if mibBuilder.loadTexts: bDhcpv6DropRelayReply.setDescription('The number of DHCPv6 Relay-Reply packets dropped.')
bDhcpv6DropReconfig = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 3, 2, 1, 29), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpv6DropReconfig.setStatus('current')
if mibBuilder.loadTexts: bDhcpv6DropReconfig.setDescription('The number of DHCPv6 Reconfig packets dropped.')
bDhcpv6LeasesOffered = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 3, 2, 1, 30), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpv6LeasesOffered.setStatus('current')
if mibBuilder.loadTexts: bDhcpv6LeasesOffered.setDescription('Total number of leases offered on DHCPv6 server')
bDhcpv6LeasesAssigned = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 3, 2, 1, 31), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpv6LeasesAssigned.setStatus('current')
if mibBuilder.loadTexts: bDhcpv6LeasesAssigned.setDescription('Total number of leases assigned on DHCPv6 server')
bDhcpv6LeasesReleased = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 3, 2, 1, 32), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpv6LeasesReleased.setStatus('current')
if mibBuilder.loadTexts: bDhcpv6LeasesReleased.setDescription('Total number of leases released on DHCPv6 server')
bDhcpv6LeasesRelFail = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 3, 2, 1, 33), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpv6LeasesRelFail.setStatus('current')
if mibBuilder.loadTexts: bDhcpv6LeasesRelFail.setDescription('Total number of leases release failed on DHCPv6 server')
bDhcpv6LeasesExpired = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 3, 2, 1, 34), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpv6LeasesExpired.setStatus('current')
if mibBuilder.loadTexts: bDhcpv6LeasesExpired.setDescription('Total number of leases expired on DHCPv6 server')
bDhcpv6LeasesExpiryFail = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 3, 2, 1, 35), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpv6LeasesExpiryFail.setStatus('current')
if mibBuilder.loadTexts: bDhcpv6LeasesExpiryFail.setDescription('Total number of leases expiry failed on DHCPv6 server')
bDhcpv6LeasesRenewed = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 3, 2, 1, 36), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpv6LeasesRenewed.setStatus('current')
if mibBuilder.loadTexts: bDhcpv6LeasesRenewed.setDescription('Total number of leases renewed  on DHCPv6 server')
bDhcpv6LeasesRenewFail = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 3, 2, 1, 37), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpv6LeasesRenewFail.setStatus('current')
if mibBuilder.loadTexts: bDhcpv6LeasesRenewFail.setDescription('Total number of leases renew failed on DHCPv6 server')
bDhcpv6InternalError = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 3, 2, 1, 38), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpv6InternalError.setStatus('current')
if mibBuilder.loadTexts: bDhcpv6InternalError.setDescription('Total number of Internal Errors')
bDhcpv6NoInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 3, 2, 1, 39), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpv6NoInterface.setStatus('current')
if mibBuilder.loadTexts: bDhcpv6NoInterface.setDescription('Total number of No Interface Errors')
bDhcpv6ClientIdNotPres = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 3, 2, 1, 40), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpv6ClientIdNotPres.setStatus('current')
if mibBuilder.loadTexts: bDhcpv6ClientIdNotPres.setDescription('Total number of ClientId Not Present Errors')
bDhcpv6ServerIdNotPres = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 3, 2, 1, 41), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpv6ServerIdNotPres.setStatus('current')
if mibBuilder.loadTexts: bDhcpv6ServerIdNotPres.setDescription('Total number of ServerId Not Present Errors')
bDhcpv6ORONotPres = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 3, 2, 1, 42), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpv6ORONotPres.setStatus('current')
if mibBuilder.loadTexts: bDhcpv6ORONotPres.setDescription('Total number of ORO Not Present Errors')
bDhcpv6ClientIdPres = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 3, 2, 1, 43), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpv6ClientIdPres.setStatus('current')
if mibBuilder.loadTexts: bDhcpv6ClientIdPres.setDescription('Total number of ClientId Present Errors')
bDhcpv6ServerIdPres = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 3, 2, 1, 44), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpv6ServerIdPres.setStatus('current')
if mibBuilder.loadTexts: bDhcpv6ServerIdPres.setDescription('Total number of ServerId Present Errors')
bDhcpv6UnicastSolicitRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 3, 2, 1, 45), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpv6UnicastSolicitRcvd.setStatus('current')
if mibBuilder.loadTexts: bDhcpv6UnicastSolicitRcvd.setDescription('Total number of Unicast Solicit Received Errors')
bDhcpv6UnicastRequestRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 3, 2, 1, 46), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpv6UnicastRequestRcvd.setStatus('current')
if mibBuilder.loadTexts: bDhcpv6UnicastRequestRcvd.setDescription('Total number of Unicast Request Received Errors')
bDhcpv6UnicastRenewRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 3, 2, 1, 47), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpv6UnicastRenewRcvd.setStatus('current')
if mibBuilder.loadTexts: bDhcpv6UnicastRenewRcvd.setDescription('Total number of Unicast Renew Received Errors')
bDhcpv6UnicastConfirmRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 3, 2, 1, 48), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpv6UnicastConfirmRcvd.setStatus('current')
if mibBuilder.loadTexts: bDhcpv6UnicastConfirmRcvd.setDescription('Total number of Unicast Confirm Received Errors')
bDhcpv6UnicastDeclineRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 3, 2, 1, 49), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpv6UnicastDeclineRcvd.setStatus('current')
if mibBuilder.loadTexts: bDhcpv6UnicastDeclineRcvd.setDescription('Total number of Unicast Decline Received Errors')
bDhcpv6UnicastReleaseRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 3, 2, 1, 50), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpv6UnicastReleaseRcvd.setStatus('current')
if mibBuilder.loadTexts: bDhcpv6UnicastReleaseRcvd.setDescription('Total number of Unicast Release Received Errors')
bDhcpv6UnicastRebindRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 3, 2, 1, 51), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpv6UnicastRebindRcvd.setStatus('current')
if mibBuilder.loadTexts: bDhcpv6UnicastRebindRcvd.setDescription('Total number of Unicast Rebind Received Errors')
bDhcpv6RebindWithoutAddrRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 3, 2, 1, 52), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpv6RebindWithoutAddrRcvd.setStatus('current')
if mibBuilder.loadTexts: bDhcpv6RebindWithoutAddrRcvd.setDescription('Total number of Rebind Without Addresses Received Errors')
bDhcpv6ConfirmWithoutAddrRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 3, 2, 1, 53), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpv6ConfirmWithoutAddrRcvd.setStatus('current')
if mibBuilder.loadTexts: bDhcpv6ConfirmWithoutAddrRcvd.setDescription('Total number of Confirm Without Addresses Received Errors')
bDhcpv6DeclineWithoutAddrRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 3, 2, 1, 54), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpv6DeclineWithoutAddrRcvd.setStatus('current')
if mibBuilder.loadTexts: bDhcpv6DeclineWithoutAddrRcvd.setDescription('Total number of Confirm Without Addresses Received Errors')
bDhcpv6RebindWithoutAddrOrMoreRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 3, 2, 1, 55), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpv6RebindWithoutAddrOrMoreRcvd.setStatus('current')
if mibBuilder.loadTexts: bDhcpv6RebindWithoutAddrOrMoreRcvd.setDescription('Total number of Rebind Without Addresses Or More Received Errors')
bDhcpv6RenewWithoutAddrOrMoreRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 3, 2, 1, 56), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpv6RenewWithoutAddrOrMoreRcvd.setStatus('current')
if mibBuilder.loadTexts: bDhcpv6RenewWithoutAddrOrMoreRcvd.setDescription('Total number of Rebind Without Addresses Or More Received Errors')
bDhcpv6RebindFail = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 3, 2, 1, 57), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpv6RebindFail.setStatus('current')
if mibBuilder.loadTexts: bDhcpv6RebindFail.setDescription('Total number of Rebind Failures')
bDhcpv6ReconfAcceptInSolicitMissing = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 3, 2, 1, 58), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpv6ReconfAcceptInSolicitMissing.setStatus('current')
if mibBuilder.loadTexts: bDhcpv6ReconfAcceptInSolicitMissing.setDescription('Reconfig-Accept option is Solicit is missing, \n       wherein the configuration mandates')
bDhcpv6IntervalDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 3, 2, 1, 59), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDhcpv6IntervalDuration.setStatus('current')
if mibBuilder.loadTexts: bDhcpv6IntervalDuration.setDescription('Duration of the interval in minutes')
bDhcpHomeSubnetHomeId = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 2, 1), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bDhcpHomeSubnetHomeId.setStatus('current')
if mibBuilder.loadTexts: bDhcpHomeSubnetHomeId.setDescription('Home ID field is unique identifier for each home subnet. It maps to tunnel & vlan.')
bDhcpHomeSubnetStartAddress = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 2, 2), InetAddressIPv4()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bDhcpHomeSubnetStartAddress.setStatus('current')
if mibBuilder.loadTexts: bDhcpHomeSubnetStartAddress.setDescription("Home subnet's range start IPv4 Address.")
bDhcpHomeSubnetEndAddress = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 2, 3), InetAddressIPv4()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bDhcpHomeSubnetEndAddress.setStatus('current')
if mibBuilder.loadTexts: bDhcpHomeSubnetEndAddress.setDescription("Home subnet's range end IPv4 Address.")
bDhcpHomeSubnetTotalAddresses = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 2, 4), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bDhcpHomeSubnetTotalAddresses.setStatus('current')
if mibBuilder.loadTexts: bDhcpHomeSubnetTotalAddresses.setDescription('The total number of addresses in the home subnet.')
bDhcpHomeSubnetUsedAddrLowThreshold = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 2, 5), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bDhcpHomeSubnetUsedAddrLowThreshold.setStatus('current')
if mibBuilder.loadTexts: bDhcpHomeSubnetUsedAddrLowThreshold.setDescription('The low threshold for used IP addresses in this home subnet.\n        If the value for used IP addresses in this home subnet\n        becomes equal to or less than this value and the current\n        condition for bDhcpHomeSubnetUsedAddrHigh is raised, then a\n        bDhcpHomeSubnetUsedAddrLow event will be generated. No more\n        bDhcpHomeSubnetUsedAddrLow events will be generated for this\n        subnet during its execution until the value for used addresses\n        has exceeded the value of bDhcpHomeSubnetUsedAddrHighThreshold.')
bDhcpHomeSubnetUsedAddrHighThreshold = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 2, 6), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bDhcpHomeSubnetUsedAddrHighThreshold.setStatus('current')
if mibBuilder.loadTexts: bDhcpHomeSubnetUsedAddrHighThreshold.setDescription('The high threshold for used IP addresses in this home subnet.\n        If a bDhcpHomeSubnetUsedAddrLow event has been generated (or no\n        bDhcpHomeSubnetUsedAddrHigh was generated previously) for this home\n        subnet, and the value for used IP addresses in this home subnet\n        has exceeded this value then a bDhcpHomeSubnetUsedAddrHigh\n        event will be generated. No more bDhcpHomeSubnetUsedAddrHigh\n        events will be generated for this subnet during its execution\n        until the value for used addresses in this subnet becomes\n        equal to or less than the value of\n        bDhcpHomeSubnetUsedAddrLowThreshold.')
bDhcpSubnetUsedAddrLow = NotificationType((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 0, 1)).setObjects(("BENU-DHCP-MIB", "bDhcpSubnetStartAddress"), ("BENU-DHCP-MIB", "bDhcpSubnetEndAddress"), ("BENU-DHCP-MIB", "bDhcpSubnetTotalAddresses"), ("BENU-DHCP-MIB", "bDhcpSubnetUsedAddrLowThreshold"))
if mibBuilder.loadTexts: bDhcpSubnetUsedAddrLow.setStatus('current')
if mibBuilder.loadTexts: bDhcpSubnetUsedAddrLow.setDescription('This notification signifies that the number of used addresses\n         for a particular subnet is cleared, meaning that it\n         has fallen below the value of bDhcpSubnetUsedAddrLowThreshold\n         for that subnet.')
bDhcpSubnetUsedAddrHigh = NotificationType((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 0, 2)).setObjects(("BENU-DHCP-MIB", "bDhcpSubnetStartAddress"), ("BENU-DHCP-MIB", "bDhcpSubnetEndAddress"), ("BENU-DHCP-MIB", "bDhcpSubnetTotalAddresses"), ("BENU-DHCP-MIB", "bDhcpSubnetUsedAddrHighThreshold"))
if mibBuilder.loadTexts: bDhcpSubnetUsedAddrHigh.setStatus('current')
if mibBuilder.loadTexts: bDhcpSubnetUsedAddrHigh.setDescription('This notification signifies that the number of used\n        addresses for a particular subnet is raised, meaning\n        that it has risen above the value of bDhcpSubnetUsedAddrHighThreshold\n        for that subnet.')
bDhcpHomeSubnetUsedAddrLow = NotificationType((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 0, 3)).setObjects(("BENU-DHCP-MIB", "bDhcpHomeSubnetHomeId"), ("BENU-DHCP-MIB", "bDhcpHomeSubnetStartAddress"), ("BENU-DHCP-MIB", "bDhcpHomeSubnetEndAddress"), ("BENU-DHCP-MIB", "bDhcpHomeSubnetTotalAddresses"), ("BENU-DHCP-MIB", "bDhcpHomeSubnetUsedAddrLowThreshold"))
if mibBuilder.loadTexts: bDhcpHomeSubnetUsedAddrLow.setStatus('current')
if mibBuilder.loadTexts: bDhcpHomeSubnetUsedAddrLow.setDescription('This notification signifies that the number of used addresses\n         for a particular home subnet is cleared, meaning that it\n         has fallen below the value of bDhcpHomeSubnetUsedAddrLowThreshold\n         for that subnet.')
bDhcpHomeSubnetUsedAddrHigh = NotificationType((1, 3, 6, 1, 4, 1, 39406, 2, 1, 6, 0, 4)).setObjects(("BENU-DHCP-MIB", "bDhcpHomeSubnetHomeId"), ("BENU-DHCP-MIB", "bDhcpHomeSubnetStartAddress"), ("BENU-DHCP-MIB", "bDhcpHomeSubnetEndAddress"), ("BENU-DHCP-MIB", "bDhcpHomeSubnetTotalAddresses"), ("BENU-DHCP-MIB", "bDhcpHomeSubnetUsedAddrHighThreshold"))
if mibBuilder.loadTexts: bDhcpHomeSubnetUsedAddrHigh.setStatus('current')
if mibBuilder.loadTexts: bDhcpHomeSubnetUsedAddrHigh.setDescription('This notification signifies that the number of used\n        addresses for a particular home subnet is raised, meaning\n        that it has risen above the value of bDhcpHomeSubnetUsedAddrHighThreshold\n        for that subnet.')
mibBuilder.exportSymbols("BENU-DHCP-MIB", bDhcpHomeLeasesNotAssignFreeBuffUnavail=bDhcpHomeLeasesNotAssignFreeBuffUnavail, bDhcpv6GlobalStatsInterval=bDhcpv6GlobalStatsInterval, bDhcpv6LeasesReleased=bDhcpv6LeasesReleased, bDhcpv6LeasesRenewed=bDhcpv6LeasesRenewed, bDhcpv6DropAdvertise=bDhcpv6DropAdvertise, bDhcpHomeSubnetUsedAddrLow=bDhcpHomeSubnetUsedAddrLow, bDhcpMIB=bDhcpMIB, bDhcpHomeLeasesExpired=bDhcpHomeLeasesExpired, bDhcpv6AdvertisesSent=bDhcpv6AdvertisesSent, bDhcpv6UnicastConfirmRcvd=bDhcpv6UnicastConfirmRcvd, bDhcpDropRelease=bDhcpDropRelease, bDhcpv6IntervalDuration=bDhcpv6IntervalDuration, bDhcpLeasesExpired=bDhcpLeasesExpired, bDhcpv6ConfirmsRcvd=bDhcpv6ConfirmsRcvd, bDhcpv6RenewWithoutAddrOrMoreRcvd=bDhcpv6RenewWithoutAddrOrMoreRcvd, bHomeBootpRequestsRcvd=bHomeBootpRequestsRcvd, bDhcpv6UnicastRequestRcvd=bDhcpv6UnicastRequestRcvd, bDhcpHomeSubnetUsedAddrHighThreshold=bDhcpHomeSubnetUsedAddrHighThreshold, bDhcpReleasesRcvd=bDhcpReleasesRcvd, bDhcpv6DropDecline=bDhcpv6DropDecline, bDhcpHomeOffersSent=bDhcpHomeOffersSent, bDhcpLeasesReleased=bDhcpLeasesReleased, bDhcpSubnetPeakHoldAddresses=bDhcpSubnetPeakHoldAddresses, bDhcpv6ReconfAcceptInSolicitMissing=bDhcpv6ReconfAcceptInSolicitMissing, bDhcpSPWiFiOffersSent=bDhcpSPWiFiOffersSent, bDhcpSPWiFiReleasesSent=bDhcpSPWiFiReleasesSent, bDhcpInformsRcvd=bDhcpInformsRcvd, bDhcpLeasesRelFail=bDhcpLeasesRelFail, bDhcpv6UnknownMsgsRcvd=bDhcpv6UnknownMsgsRcvd, bDhcpHomeSubnetEndAddress=bDhcpHomeSubnetEndAddress, bDhcpSubnetRangeIndex=bDhcpSubnetRangeIndex, bDhcpNacksSent=bDhcpNacksSent, bDhcpv6DeclinesRcvd=bDhcpv6DeclinesRcvd, bDhcpv4MIBObjects=bDhcpv4MIBObjects, bDhcpSPWiFiInformsRcvd=bDhcpSPWiFiInformsRcvd, bDhcpv6DropSolicit=bDhcpv6DropSolicit, bDhcpSPWiFiAcksSent=bDhcpSPWiFiAcksSent, bDhcpSubnetUsedAddrHigh=bDhcpSubnetUsedAddrHigh, bDhcpSPWiFiDropRelease=bDhcpSPWiFiDropRelease, bDhcpInformsAckSent=bDhcpInformsAckSent, bDhcpv6GlobalEntry=bDhcpv6GlobalEntry, bDhcpv6UnicastReleaseRcvd=bDhcpv6UnicastReleaseRcvd, bDhcpSPWiFiGlobalEntry=bDhcpSPWiFiGlobalEntry, bDhcpHomeReleasesIndSent=bDhcpHomeReleasesIndSent, bDhcpSubnetEntry=bDhcpSubnetEntry, bBootpRequestsRcvd=bBootpRequestsRcvd, bDhcpHomeReleasesIndRcvd=bDhcpHomeReleasesIndRcvd, bDhcpHomeLeasesRenewFail=bDhcpHomeLeasesRenewFail, bDhcpSubnetEndAddress=bDhcpSubnetEndAddress, bDhcpHomeLeasesAssigned=bDhcpHomeLeasesAssigned, bDhcpReleasesIndSent=bDhcpReleasesIndSent, bDhcpv6ReleaseIndRcvd=bDhcpv6ReleaseIndRcvd, bDhcpv6GlobalTable=bDhcpv6GlobalTable, bDhcpReleasesIndRcvd=bDhcpReleasesIndRcvd, bDhcpLeasesNotAssignServIntNotConfig=bDhcpLeasesNotAssignServIntNotConfig, bDhcpSubnetPeakUsedAddresses=bDhcpSubnetPeakUsedAddresses, bDhcpGlobalTable=bDhcpGlobalTable, bDhcpHomeSubnetTotalAddresses=bDhcpHomeSubnetTotalAddresses, bDhcpv4ActiveClient=bDhcpv4ActiveClient, bDhcpHomeInformsRcvd=bDhcpHomeInformsRcvd, bDhcpSubnetIntervalDuration=bDhcpSubnetIntervalDuration, bDhcpv6DeclineWithoutAddrRcvd=bDhcpv6DeclineWithoutAddrRcvd, bDhcpv6ActiveClient=bDhcpv6ActiveClient, bDhcpSPWiFiLeasesNotAssignServIntNotConfig=bDhcpSPWiFiLeasesNotAssignServIntNotConfig, bDhcpSPWiFiReleasesIndRcvd=bDhcpSPWiFiReleasesIndRcvd, bDhcpHomeSubnetUsedAddrHigh=bDhcpHomeSubnetUsedAddrHigh, bDhcpSPWiFiLeasesRelFail=bDhcpSPWiFiLeasesRelFail, bDhcpv6DropDupSolicit=bDhcpv6DropDupSolicit, bDhcpv6ServerIdNotPres=bDhcpv6ServerIdNotPres, bDhcpv6ReleasesRcvd=bDhcpv6ReleasesRcvd, bDhcpv4ActiveSpWiFiClients=bDhcpv4ActiveSpWiFiClients, bDhcpSPWiFiLeasesRenewFail=bDhcpSPWiFiLeasesRenewFail, bDhcpHomeReleasesSent=bDhcpHomeReleasesSent, bDhcpNotifications=bDhcpNotifications, bDhcpHomeSubnetHomeId=bDhcpHomeSubnetHomeId, bDhcpOffersSent=bDhcpOffersSent, bDhcpGlobalStatsInterval=bDhcpGlobalStatsInterval, bDhcpv4ActiveHomeClients=bDhcpv4ActiveHomeClients, bDhcpv6RebindWithoutAddrOrMoreRcvd=bDhcpv6RebindWithoutAddrOrMoreRcvd, bDhcpHomeDeclinesRcvd=bDhcpHomeDeclinesRcvd, bDhcpSPWiFiGlobalTable=bDhcpSPWiFiGlobalTable, bDhcpv6InformsRcvd=bDhcpv6InformsRcvd, bDhcpAcksSent=bDhcpAcksSent, bDhcpv6ReplysSent=bDhcpv6ReplysSent, bDhcpHomeGlobalStatsInterval=bDhcpHomeGlobalStatsInterval, bDhcpv6DropReply=bDhcpv6DropReply, bDhcpSPWiFiLeasesAssigned=bDhcpSPWiFiLeasesAssigned, bDhcpSubnetUsedAddrLowThreshold=bDhcpSubnetUsedAddrLowThreshold, bDhcpSPWiFiLeasesReleased=bDhcpSPWiFiLeasesReleased, bDhcpSPWiFiLeasesRenewed=bDhcpSPWiFiLeasesRenewed, bDhcpv6DropRelay=bDhcpv6DropRelay, bDhcpSubnetUsedAddrLow=bDhcpSubnetUsedAddrLow, bDhcpv6DropRebind=bDhcpv6DropRebind, bDhcpHomeGlobalEntry=bDhcpHomeGlobalEntry, bDhcpDiscoversRcvd=bDhcpDiscoversRcvd, bDhcpv6LeasesRelFail=bDhcpv6LeasesRelFail, bSPWiFiBootpRequestsRcvd=bSPWiFiBootpRequestsRcvd, bDhcpSubnetIndex=bDhcpSubnetIndex, bDhcpSPWiFiGlobalStatsInterval=bDhcpSPWiFiGlobalStatsInterval, bDhcpv6MIBObjects=bDhcpv6MIBObjects, bDhcpDeclinesRcvd=bDhcpDeclinesRcvd, bDhcpSubnetMask=bDhcpSubnetMask, bDhcpv6ReconfigsSent=bDhcpv6ReconfigsSent, bDhcpHomeDiscoversRcvd=bDhcpHomeDiscoversRcvd, bDhcpv6LeasesExpired=bDhcpv6LeasesExpired, bDhcpv6ClientIdNotPres=bDhcpv6ClientIdNotPres, bDhcpLeasesRenewFail=bDhcpLeasesRenewFail, bDhcpHomeIntervalDuration=bDhcpHomeIntervalDuration, bDhcpv6DropRequest=bDhcpv6DropRequest, bDhcpHomeLeasesReleased=bDhcpHomeLeasesReleased, bDhcpHomeLeasesNotAssignServIntNotConfig=bDhcpHomeLeasesNotAssignServIntNotConfig, bDhcpHomeDropDiscover=bDhcpHomeDropDiscover, bDhcpHomeGlobalTable=bDhcpHomeGlobalTable, bDhcpv6DropConfirm=bDhcpv6DropConfirm, bDhcpv6RebindWithoutAddrRcvd=bDhcpv6RebindWithoutAddrRcvd, bDhcpv6NoInterface=bDhcpv6NoInterface, bDhcpv6UnicastRebindRcvd=bDhcpv6UnicastRebindRcvd, bDhcpSubnetUsedAddrHighThreshold=bDhcpSubnetUsedAddrHighThreshold, bDhcpLeasesAssigned=bDhcpLeasesAssigned, bDhcpHomeDropRelease=bDhcpHomeDropRelease, bDhcpDropRequest=bDhcpDropRequest, bDhcpv6DropInform=bDhcpv6DropInform, bDhcpv4NotifObjects=bDhcpv4NotifObjects, bDhcpDropDiscover=bDhcpDropDiscover, bDhcpHomeInformsAckSent=bDhcpHomeInformsAckSent, bDhcpv6ClientIdPres=bDhcpv6ClientIdPres, bDhcpSPWiFiDropDiscover=bDhcpSPWiFiDropDiscover, bDhcpSPWiFiDiscoversRcvd=bDhcpSPWiFiDiscoversRcvd, bDhcpHomeNacksSent=bDhcpHomeNacksSent, bDhcpHomeLeasesRelFail=bDhcpHomeLeasesRelFail, bDhcpv6LeasesRenewFail=bDhcpv6LeasesRenewFail, bDhcpSPWiFiIntervalDuration=bDhcpSPWiFiIntervalDuration, bDhcpSPWiFiReleasesIndSent=bDhcpSPWiFiReleasesIndSent, bDhcpSPWiFiReleasesRcvd=bDhcpSPWiFiReleasesRcvd, bBootpRepliesSent=bBootpRepliesSent, bDhcpHomeAcksSent=bDhcpHomeAcksSent, bDhcpSubnetStatsInterval=bDhcpSubnetStatsInterval, bDhcpHomeReleasesRcvd=bDhcpHomeReleasesRcvd, bDhcpSPWiFiNacksSent=bDhcpSPWiFiNacksSent, bDhcpv6LeasesExpiryFail=bDhcpv6LeasesExpiryFail, bDhcpv6LeasesOffered=bDhcpv6LeasesOffered, bDhcpHomeSubnetStartAddress=bDhcpHomeSubnetStartAddress, bDhcpReleasesSent=bDhcpReleasesSent, bDhcpv6DropRelayReply=bDhcpv6DropRelayReply, bDhcpSPWiFiRequestsRcvd=bDhcpSPWiFiRequestsRcvd, bDhcpv6InternalError=bDhcpv6InternalError, bDhcpSubnetTable=bDhcpSubnetTable, bDhcpSPWiFiInformsAckSent=bDhcpSPWiFiInformsAckSent, bDhcpv6ServerIdPres=bDhcpv6ServerIdPres, bDhcpv6RequestsRcvd=bDhcpv6RequestsRcvd, bDhcpv6RebindFail=bDhcpv6RebindFail, bDhcpLeasesNotAssignFreeBuffUnavail=bDhcpLeasesNotAssignFreeBuffUnavail, bDhcpSubnetAddress=bDhcpSubnetAddress, bDhcpRequestsRcvd=bDhcpRequestsRcvd, bDhcpSPWiFiDeclinesRcvd=bDhcpSPWiFiDeclinesRcvd, bSPWiFiBootpRepliesSent=bSPWiFiBootpRepliesSent, bDhcpGlobalEntry=bDhcpGlobalEntry, bDhcpSubnetStartAddress=bDhcpSubnetStartAddress, bDhcpSPWiFiLeasesExpired=bDhcpSPWiFiLeasesExpired, bDhcpHomeSubnetUsedAddrLowThreshold=bDhcpHomeSubnetUsedAddrLowThreshold, bDhcpv6RebindRcvd=bDhcpv6RebindRcvd, bDhcpv6DropReconfig=bDhcpv6DropReconfig, bDhcpv6DropRenew=bDhcpv6DropRenew, bDhcpv6LeasesAssigned=bDhcpv6LeasesAssigned, bDhcpv6DropRelease=bDhcpv6DropRelease, bDhcpv6RenewRcvd=bDhcpv6RenewRcvd, PYSNMP_MODULE_ID=bDhcpMIB, bDhcpv6SolicitsRcvd=bDhcpv6SolicitsRcvd, bDhcpv6ORONotPres=bDhcpv6ORONotPres, bHomeBootpRepliesSent=bHomeBootpRepliesSent, bDhcpv6UnicastSolicitRcvd=bDhcpv6UnicastSolicitRcvd, bDhcpSPWiFiLeasesNotAssignFreeBuffUnavail=bDhcpSPWiFiLeasesNotAssignFreeBuffUnavail, bDhcpSPWiFiDropRequest=bDhcpSPWiFiDropRequest, bDhcpIntervalDuration=bDhcpIntervalDuration, bDhcpv6UnicastRenewRcvd=bDhcpv6UnicastRenewRcvd, bDhcpv6ConfirmWithoutAddrRcvd=bDhcpv6ConfirmWithoutAddrRcvd, bDhcpSubnetPeakFreeAddresses=bDhcpSubnetPeakFreeAddresses, bDhcpLeasesRenewed=bDhcpLeasesRenewed, bDhcpHomeDropRequest=bDhcpHomeDropRequest, bDhcpv6OffersSent=bDhcpv6OffersSent, bDhcpHomeRequestsRcvd=bDhcpHomeRequestsRcvd, bDhcpHomeLeasesRenewed=bDhcpHomeLeasesRenewed, bDhcpv6UnicastDeclineRcvd=bDhcpv6UnicastDeclineRcvd, bDhcpSubnetTotalAddresses=bDhcpSubnetTotalAddresses, bDhcpv6NotifObjects=bDhcpv6NotifObjects)
