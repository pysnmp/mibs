#
# PySNMP MIB module LIEBERT-GP-AGENT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/liebert/LIEBERT-GP-AGENT-MIB
# Produced by pysmi-1.1.12 at Wed Jul  3 09:58:42 2024
# On host fv-az530-296 platform Linux version 6.5.0-1022-azure by user runner
# Using Python version 3.10.14 (main, Jun 20 2024, 15:20:03) [GCC 11.4.0]
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
lgpConditionsPresent, lgpNetworkName, lgpConditionDescription = mibBuilder.importSymbols("LIEBERT-GP-CONDITIONS-MIB", "lgpConditionsPresent", "lgpNetworkName", "lgpConditionDescription")
lgpAgentControl, lgpAgentIdent, lgpAgentDevice, lgpAgentNotifications, liebertAgentModuleReg = mibBuilder.importSymbols("LIEBERT-GP-REGISTRATION-MIB", "lgpAgentControl", "lgpAgentIdent", "lgpAgentDevice", "lgpAgentNotifications", "liebertAgentModuleReg")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
sysUpTime, = mibBuilder.importSymbols("SNMPv2-MIB", "sysUpTime")
MibIdentifier, Counter32, NotificationType, ObjectIdentity, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, IpAddress, TimeTicks, iso, Integer32, Bits, Unsigned32, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Counter32", "NotificationType", "ObjectIdentity", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "IpAddress", "TimeTicks", "iso", "Integer32", "Bits", "Unsigned32", "ModuleIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
liebertAgentModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 1, 2, 1))
liebertAgentModule.setRevisions(('2008-11-17 00:00', '2008-07-02 00:00', '2008-01-10 00:00', '2007-05-29 00:00', '2006-02-22 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: liebertAgentModule.setRevisionsDescriptions(('Added support for NXL unit.', 'Updated INTEGER references to Integer32 (SMIv2).\n     Added missing item to import (Unsigned32)', 'Modified contact email address and added lgpAgentEventNotifications\n    objects.', 'Added support for XDF Unit.', 'Added support for Liebert DS Unit.',))
if mibBuilder.loadTexts: liebertAgentModule.setLastUpdated('200811170000Z')
if mibBuilder.loadTexts: liebertAgentModule.setOrganization('Liebert Corporation')
if mibBuilder.loadTexts: liebertAgentModule.setContactInfo('Contact:   Technical Support\n\n      Postal:\n      Liebert Corporation\n      1050 Dearborn Drive\n      P.O. Box 29186\n      Columbus OH, 43229\n      US\n\n      Tel: +1 (800) 222-5877\n\n      E-mail: liebert.monitoring@vertivco.com\n      Web:    www.vertivco.com\n\n      Author:  Gregory M. Hoge')
if mibBuilder.loadTexts: liebertAgentModule.setDescription("The MIB module used to specify Liebert software or firmware\n      agent SNMP OIDs.\n\n      Copyright 2000-2008 Liebert Corporation. All rights reserved.\n      Reproduction of this document is authorized on the condition\n      that the forgoing copyright notice is included.\n\n      This Specification is supplied 'AS IS' and Liebert Corporation\n      makes no warranty, either express or implied, as to the use,\n      operation, condition, or performance of the Specification.")
lgpAgentIdentManufacturer = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(255, 255)).setFixedLength(255)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpAgentIdentManufacturer.setStatus('current')
if mibBuilder.loadTexts: lgpAgentIdentManufacturer.setDescription('The agent manufacturer.')
lgpAgentIdentModel = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(255, 255)).setFixedLength(255)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpAgentIdentModel.setStatus('current')
if mibBuilder.loadTexts: lgpAgentIdentModel.setDescription('The agent model designation.  This identifier is typically a\n    model name or ID')
lgpAgentIdentFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpAgentIdentFirmwareVersion.setStatus('current')
if mibBuilder.loadTexts: lgpAgentIdentFirmwareVersion.setDescription('The firmware revision level of the agent.')
lgpAgentIdentSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpAgentIdentSerialNumber.setStatus('current')
if mibBuilder.loadTexts: lgpAgentIdentSerialNumber.setDescription('The serial number of the agent.  This is a string of\n    alphanumeric characters that uniquely identifies the agent hardware.  This\n    number is assigned when the agent hardware is manufactured and does not\n    change throughout its lifecycle.')
lgpAgentIdentPartNumber = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(255, 255)).setFixedLength(255)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpAgentIdentPartNumber.setStatus('current')
if mibBuilder.loadTexts: lgpAgentIdentPartNumber.setDescription('The agent model part number designation.')
lgpAgentConnectedDeviceCount = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpAgentConnectedDeviceCount.setStatus('current')
if mibBuilder.loadTexts: lgpAgentConnectedDeviceCount.setDescription('The number of devices currently connected and communicating\n    successfully with the agent.  Devices for which communications are\n    currently being attempted are not considered in this count.')
lgpAgentEventNotifications = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 2, 3, 0))
if mibBuilder.loadTexts: lgpAgentEventNotifications.setStatus('current')
if mibBuilder.loadTexts: lgpAgentEventNotifications.setDescription('Agent specific notifications.')
lgpAgentDeviceCommunicationLost = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 42, 2, 3, 0, 1)).setObjects(("SNMPv2-MIB", "sysUpTime"))
if mibBuilder.loadTexts: lgpAgentDeviceCommunicationLost.setStatus('current')
if mibBuilder.loadTexts: lgpAgentDeviceCommunicationLost.setDescription('The agent has lost communications with a managed device.')
lgpAgentFirmwareUpdateSuccessful = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 42, 2, 3, 0, 5)).setObjects(("SNMPv2-MIB", "sysUpTime"))
if mibBuilder.loadTexts: lgpAgentFirmwareUpdateSuccessful.setStatus('current')
if mibBuilder.loadTexts: lgpAgentFirmwareUpdateSuccessful.setDescription('The firmware update to the agent card has completed successfully.')
lgpAgentFirmwareCorrupt = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 42, 2, 3, 0, 6)).setObjects(("SNMPv2-MIB", "sysUpTime"))
if mibBuilder.loadTexts: lgpAgentFirmwareCorrupt.setStatus('current')
if mibBuilder.loadTexts: lgpAgentFirmwareCorrupt.setDescription('The firmware update to the agent card has failed and the firmware is\n        now corrupt.')
lgpAgentHeartbeat = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 42, 2, 3, 0, 7)).setObjects(("SNMPv2-MIB", "sysUpTime"), ("LIEBERT-GP-CONDITIONS-MIB", "lgpConditionsPresent"), ("LIEBERT-GP-AGENT-MIB", "lgpAgentConnectedDeviceCount"))
if mibBuilder.loadTexts: lgpAgentHeartbeat.setStatus('current')
if mibBuilder.loadTexts: lgpAgentHeartbeat.setDescription('The agent card is alive.')
lgpAgentDnsLookupFailure = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 42, 2, 3, 0, 8)).setObjects(("SNMPv2-MIB", "sysUpTime"), ("LIEBERT-GP-CONDITIONS-MIB", "lgpNetworkName"))
if mibBuilder.loadTexts: lgpAgentDnsLookupFailure.setStatus('current')
if mibBuilder.loadTexts: lgpAgentDnsLookupFailure.setDescription('A Domain Name System (DNS) lookup of a network name failed to\n        resolve.  This may result in one or more of the following:\n           1. failure to notify a target address of an important condition\n           2. failure allow access for monitoring purposes\n        This issue should be resolved as soon as possible with a\n        network or system administrator.')
lgpAgentEventNotificationsLegacy = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 2, 3, 0, 0))
if mibBuilder.loadTexts: lgpAgentEventNotificationsLegacy.setStatus('current')
if mibBuilder.loadTexts: lgpAgentEventNotificationsLegacy.setDescription('This branch contains copies of the notifications registered directly\n         below lgpAgentEventNotifications. These are here to provide support \n         for some legacy devices which send out lgpAgentEventNotifications \n         as the SNMPv1 enterprise trap parameter instead of \n         lgpAgentNotifications, which causes problems with some SNMP clients \n         when converting from V1 to V2 notifications (RFC3584 Section 3).')
lgpAgentDeviceCommunicationLostLegacy = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 42, 2, 3, 0, 0, 1)).setObjects(("SNMPv2-MIB", "sysUpTime"))
if mibBuilder.loadTexts: lgpAgentDeviceCommunicationLostLegacy.setStatus('current')
if mibBuilder.loadTexts: lgpAgentDeviceCommunicationLostLegacy.setDescription('The agent has lost communications with a managed device.')
lgpAgentFirmwareUpdateSuccessfulLegacy = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 42, 2, 3, 0, 0, 5)).setObjects(("SNMPv2-MIB", "sysUpTime"))
if mibBuilder.loadTexts: lgpAgentFirmwareUpdateSuccessfulLegacy.setStatus('current')
if mibBuilder.loadTexts: lgpAgentFirmwareUpdateSuccessfulLegacy.setDescription('The firmware update to the agent card has completed successfully.')
lgpAgentFirmwareCorruptLegacy = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 42, 2, 3, 0, 0, 6)).setObjects(("SNMPv2-MIB", "sysUpTime"))
if mibBuilder.loadTexts: lgpAgentFirmwareCorruptLegacy.setStatus('current')
if mibBuilder.loadTexts: lgpAgentFirmwareCorruptLegacy.setDescription('The firmware update to the agent card has failed and the firmware is\n        now corrupt.')
lgpAgentHeartbeatLegacy = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 42, 2, 3, 0, 0, 7)).setObjects(("SNMPv2-MIB", "sysUpTime"), ("LIEBERT-GP-CONDITIONS-MIB", "lgpConditionsPresent"), ("LIEBERT-GP-AGENT-MIB", "lgpAgentConnectedDeviceCount"))
if mibBuilder.loadTexts: lgpAgentHeartbeatLegacy.setStatus('current')
if mibBuilder.loadTexts: lgpAgentHeartbeatLegacy.setDescription('The agent card is alive.')
lgpAgentDnsLookupFailureLegacy = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 42, 2, 3, 0, 0, 8)).setObjects(("SNMPv2-MIB", "sysUpTime"), ("LIEBERT-GP-CONDITIONS-MIB", "lgpNetworkName"))
if mibBuilder.loadTexts: lgpAgentDnsLookupFailureLegacy.setStatus('current')
if mibBuilder.loadTexts: lgpAgentDnsLookupFailureLegacy.setDescription('A Domain Name System (DNS) lookup of a network name failed to\n        resolve.  This may result in one or more of the following:\n           1. failure to notify a target address of an important condition\n           2. failure allow access for monitoring purposes\n        This issue should be resolved as soon as possible with a\n        network or system administrator.')
lgpAgentManagedDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 476, 1, 42, 2, 4, 2), )
if mibBuilder.loadTexts: lgpAgentManagedDeviceTable.setStatus('current')
if mibBuilder.loadTexts: lgpAgentManagedDeviceTable.setDescription('This table contains one entry for each managed device.')
lgpAgentManagedDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 476, 1, 42, 2, 4, 2, 1), ).setIndexNames((0, "LIEBERT-GP-AGENT-MIB", "lgpAgentDeviceIndex"))
if mibBuilder.loadTexts: lgpAgentManagedDeviceEntry.setStatus('current')
if mibBuilder.loadTexts: lgpAgentManagedDeviceEntry.setDescription("This entry describes a row in the table\n                'lgpAgentManagedDeviceTable'.  The rows in this table cannot\n                be created by the NMS. The rows are automatically created by\n                the agent based upon the hardware configuration of the\n                Liebert managed device(s) being monitored with this agent.")
lgpAgentDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 2, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpAgentDeviceIndex.setStatus('current')
if mibBuilder.loadTexts: lgpAgentDeviceIndex.setDescription("The device identifier. This is used as an index to address\n                a particular row in the table 'lgpAgentManagedDeviceTable'.")
lgpAgentDeviceId = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 2, 4, 2, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpAgentDeviceId.setStatus('current')
if mibBuilder.loadTexts: lgpAgentDeviceId.setDescription('The managed device specific identifier defined by the\n                product registration.')
lgpAgentDeviceManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 2, 4, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(255, 255)).setFixedLength(255)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpAgentDeviceManufacturer.setStatus('current')
if mibBuilder.loadTexts: lgpAgentDeviceManufacturer.setDescription('The managed device manufacturer.')
lgpAgentDeviceModel = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 2, 4, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(255, 255)).setFixedLength(255)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpAgentDeviceModel.setStatus('current')
if mibBuilder.loadTexts: lgpAgentDeviceModel.setDescription('The managed device model designation.')
lgpAgentDeviceFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 2, 4, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpAgentDeviceFirmwareVersion.setStatus('current')
if mibBuilder.loadTexts: lgpAgentDeviceFirmwareVersion.setDescription('The firmware revision level of the managed device.')
lgpAgentDeviceUnitNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 2, 4, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpAgentDeviceUnitNumber.setStatus('current')
if mibBuilder.loadTexts: lgpAgentDeviceUnitNumber.setDescription("The managed device unit number.  Typically this is a\n    number assigned to a managed device that uniquely identifies it from\n    other similar devices within a 'system'.")
lgpAgentDeviceSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 2, 4, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpAgentDeviceSerialNumber.setStatus('current')
if mibBuilder.loadTexts: lgpAgentDeviceSerialNumber.setDescription('The serial number of the managed device.')
lgpAgentDeviceManufactureDate = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 2, 4, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpAgentDeviceManufactureDate.setStatus('current')
if mibBuilder.loadTexts: lgpAgentDeviceManufactureDate.setDescription('The manufacture date of the managed device.')
lgpAgentDeviceServiceContact = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 2, 4, 2, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpAgentDeviceServiceContact.setStatus('current')
if mibBuilder.loadTexts: lgpAgentDeviceServiceContact.setDescription('The service contact of the managed device.')
lgpAgentDeviceServicePhoneNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 2, 4, 2, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpAgentDeviceServicePhoneNumber.setStatus('current')
if mibBuilder.loadTexts: lgpAgentDeviceServicePhoneNumber.setDescription('The phone number of the service contact of the managed device.')
lgpAgentDeviceServiceAddrLine1 = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 2, 4, 2, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpAgentDeviceServiceAddrLine1.setStatus('current')
if mibBuilder.loadTexts: lgpAgentDeviceServiceAddrLine1.setDescription('Line 1 of the service address of the managed device.')
lgpAgentDeviceServiceAddrLine2 = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 2, 4, 2, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpAgentDeviceServiceAddrLine2.setStatus('current')
if mibBuilder.loadTexts: lgpAgentDeviceServiceAddrLine2.setDescription('Line 2 of the service address of the managed device.')
lgpAgentDeviceServiceAddrLine3 = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 2, 4, 2, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpAgentDeviceServiceAddrLine3.setStatus('current')
if mibBuilder.loadTexts: lgpAgentDeviceServiceAddrLine3.setDescription('Line 3 of the service address of the managed device.')
lgpAgentDeviceServiceAddrLine4 = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 2, 4, 2, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpAgentDeviceServiceAddrLine4.setStatus('current')
if mibBuilder.loadTexts: lgpAgentDeviceServiceAddrLine4.setDescription('Line 4 of the service address of the managed device.')
lgpAgentDeviceUnitName = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 2, 4, 2, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpAgentDeviceUnitName.setStatus('current')
if mibBuilder.loadTexts: lgpAgentDeviceUnitName.setDescription('Unit name for the managed device assigned by the customer.')
lgpAgentDeviceSiteIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 2, 4, 2, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpAgentDeviceSiteIdentifier.setStatus('current')
if mibBuilder.loadTexts: lgpAgentDeviceSiteIdentifier.setDescription('Identifier that uniquely identifies the site where this device is\n        located.')
lgpAgentDeviceTagNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 2, 4, 2, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpAgentDeviceTagNumber.setStatus('current')
if mibBuilder.loadTexts: lgpAgentDeviceTagNumber.setDescription('Identifier that uniquely identifies this device within a particular\n        site (see lgpAgentDeviceSiteIdentifier).')
lgpAgentDeviceOrderLine1 = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 2, 4, 2, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpAgentDeviceOrderLine1.setStatus('current')
if mibBuilder.loadTexts: lgpAgentDeviceOrderLine1.setDescription('Customer Sales Order information line 1.')
lgpAgentDeviceOrderLine2 = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 2, 4, 2, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpAgentDeviceOrderLine2.setStatus('current')
if mibBuilder.loadTexts: lgpAgentDeviceOrderLine2.setDescription('Customer Sales Order information line 2.')
lgpAgentReboot = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 2, 5, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpAgentReboot.setStatus('current')
if mibBuilder.loadTexts: lgpAgentReboot.setDescription("Perform an immediate 'reboot' of the agent process.  When possible\n         the reboot will approximate a power on reset of the agent\n         communications hardware.  This type of reboot will be performed if\n         a hardware reset is supported by the hardware/software on the\n         communications card.  Otherwise a 'software' reboot will be executed.\n         In both cases a temporary loss of communications and other agent\n         functionality will result.\n\n         Any valid INTEGER value may be written to this object to initiate\n         the reboot operation.\n\n         If read the value '0' will always be returned.")
lgpAgentTelnetEnabled = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 2, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpAgentTelnetEnabled.setStatus('current')
if mibBuilder.loadTexts: lgpAgentTelnetEnabled.setDescription('This object represents the settings of Telnet.\n         yes\n             Telnet services are enabled.\n         no\n             Telnet services are disabled.\n         The system must be rebooted before changes can take effect.')
lgpAgentVelocityServerEnabled = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 2, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpAgentVelocityServerEnabled.setStatus('current')
if mibBuilder.loadTexts: lgpAgentVelocityServerEnabled.setDescription('This object configures the Velocity Server to grant external clients access to agent data via the Liebert Velocity protocol.\n         yes\n             Agent data is available to external clients via the Liebert Velocity protocol.\n         no\n             Agent data is not available to external clients via the Liebert Velocity protocol.\n         The system must be rebooted before changes can take effect.')
lgpAgentWebServerMode = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 2, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("http", 1), ("https", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpAgentWebServerMode.setStatus('current')
if mibBuilder.loadTexts: lgpAgentWebServerMode.setDescription('This object represents the settings of Web services.\n         disabled\n             Web services are disabled.\n         http\n             Web server mode is HTTP (not secure).\n         https\n             Web server mode is secure HTTP.\n         The system must be rebooted before changes can take effect.')
mibBuilder.exportSymbols("LIEBERT-GP-AGENT-MIB", lgpAgentDeviceSiteIdentifier=lgpAgentDeviceSiteIdentifier, lgpAgentTelnetEnabled=lgpAgentTelnetEnabled, lgpAgentFirmwareCorruptLegacy=lgpAgentFirmwareCorruptLegacy, lgpAgentIdentManufacturer=lgpAgentIdentManufacturer, lgpAgentIdentPartNumber=lgpAgentIdentPartNumber, lgpAgentDnsLookupFailureLegacy=lgpAgentDnsLookupFailureLegacy, lgpAgentFirmwareUpdateSuccessful=lgpAgentFirmwareUpdateSuccessful, lgpAgentDeviceOrderLine1=lgpAgentDeviceOrderLine1, lgpAgentDeviceOrderLine2=lgpAgentDeviceOrderLine2, lgpAgentVelocityServerEnabled=lgpAgentVelocityServerEnabled, lgpAgentDeviceModel=lgpAgentDeviceModel, lgpAgentDeviceServicePhoneNumber=lgpAgentDeviceServicePhoneNumber, lgpAgentWebServerMode=lgpAgentWebServerMode, lgpAgentDeviceServiceAddrLine3=lgpAgentDeviceServiceAddrLine3, lgpAgentIdentSerialNumber=lgpAgentIdentSerialNumber, lgpAgentEventNotificationsLegacy=lgpAgentEventNotificationsLegacy, lgpAgentDeviceServiceContact=lgpAgentDeviceServiceContact, liebertAgentModule=liebertAgentModule, lgpAgentConnectedDeviceCount=lgpAgentConnectedDeviceCount, lgpAgentDeviceCommunicationLostLegacy=lgpAgentDeviceCommunicationLostLegacy, lgpAgentHeartbeat=lgpAgentHeartbeat, lgpAgentDeviceSerialNumber=lgpAgentDeviceSerialNumber, lgpAgentDeviceTagNumber=lgpAgentDeviceTagNumber, lgpAgentDnsLookupFailure=lgpAgentDnsLookupFailure, lgpAgentDeviceUnitName=lgpAgentDeviceUnitName, lgpAgentManagedDeviceEntry=lgpAgentManagedDeviceEntry, lgpAgentIdentFirmwareVersion=lgpAgentIdentFirmwareVersion, lgpAgentDeviceFirmwareVersion=lgpAgentDeviceFirmwareVersion, lgpAgentDeviceIndex=lgpAgentDeviceIndex, lgpAgentDeviceUnitNumber=lgpAgentDeviceUnitNumber, lgpAgentDeviceServiceAddrLine4=lgpAgentDeviceServiceAddrLine4, PYSNMP_MODULE_ID=liebertAgentModule, lgpAgentDeviceServiceAddrLine1=lgpAgentDeviceServiceAddrLine1, lgpAgentHeartbeatLegacy=lgpAgentHeartbeatLegacy, lgpAgentDeviceManufactureDate=lgpAgentDeviceManufactureDate, lgpAgentFirmwareUpdateSuccessfulLegacy=lgpAgentFirmwareUpdateSuccessfulLegacy, lgpAgentDeviceServiceAddrLine2=lgpAgentDeviceServiceAddrLine2, lgpAgentDeviceManufacturer=lgpAgentDeviceManufacturer, lgpAgentDeviceCommunicationLost=lgpAgentDeviceCommunicationLost, lgpAgentIdentModel=lgpAgentIdentModel, lgpAgentFirmwareCorrupt=lgpAgentFirmwareCorrupt, lgpAgentEventNotifications=lgpAgentEventNotifications, lgpAgentReboot=lgpAgentReboot, lgpAgentDeviceId=lgpAgentDeviceId, lgpAgentManagedDeviceTable=lgpAgentManagedDeviceTable)
