#
# PySNMP MIB module RS-COMMON-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/rs/RS-COMMON-MIB
# Produced by pysmi-1.1.12 at Tue Jun  4 10:14:15 2024
# On host fv-az801-864 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
IpAddress, iso, NotificationType, Counter32, Counter64, enterprises, TimeTicks, ModuleIdentity, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Gauge32, Unsigned32, MibIdentifier, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "iso", "NotificationType", "Counter32", "Counter64", "enterprises", "TimeTicks", "ModuleIdentity", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Gauge32", "Unsigned32", "MibIdentifier", "Integer32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
rsRoot = ModuleIdentity((1, 3, 6, 1, 4, 1, 2566))
rsRoot.setRevisions(('2006-05-17 08:40',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: rsRoot.setRevisionsDescriptions(('MODULE-IDENTITY added to RS-COMMON-MIB',))
if mibBuilder.loadTexts: rsRoot.setLastUpdated('200605170840Z')
if mibBuilder.loadTexts: rsRoot.setOrganization('Rohde&Schwarz GmbH & Co.KG')
if mibBuilder.loadTexts: rsRoot.setContactInfo('Rohde & Schwarz GmbH & Co. KG\n\t\t         Muehldorfstrasse 15\n\t\t         81671 Munich\n\t\t         Germany')
if mibBuilder.loadTexts: rsRoot.setDescription('The root OID of Rohde&Schwarz GmbH & Co.KG')
rsCommon = ObjectIdentity((1, 3, 6, 1, 4, 1, 2566, 113))
if mibBuilder.loadTexts: rsCommon.setStatus('current')
if mibBuilder.loadTexts: rsCommon.setDescription('Sub-tree for common object and event definitions.')
rsProducts = ObjectIdentity((1, 3, 6, 1, 4, 1, 2566, 127))
if mibBuilder.loadTexts: rsProducts.setStatus('current')
if mibBuilder.loadTexts: rsProducts.setDescription('Sub-tree for products.')
rsProdBroadcast = ObjectIdentity((1, 3, 6, 1, 4, 1, 2566, 127, 1))
if mibBuilder.loadTexts: rsProdBroadcast.setStatus('current')
if mibBuilder.loadTexts: rsProdBroadcast.setDescription('Sub-tree for broadcast products.')
rsProdBroadcastMeasurement = ObjectIdentity((1, 3, 6, 1, 4, 1, 2566, 127, 1, 1))
if mibBuilder.loadTexts: rsProdBroadcastMeasurement.setStatus('current')
if mibBuilder.loadTexts: rsProdBroadcastMeasurement.setDescription('Sub-tree for broadcast measurement products.')
rsProdBroadcastTransmitter = ObjectIdentity((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2))
if mibBuilder.loadTexts: rsProdBroadcastTransmitter.setStatus('current')
if mibBuilder.loadTexts: rsProdBroadcastTransmitter.setDescription('Sub-tree for broadcast transmitter products.')
rsRequirements = ObjectIdentity((1, 3, 6, 1, 4, 1, 2566, 131))
if mibBuilder.loadTexts: rsRequirements.setStatus('current')
if mibBuilder.loadTexts: rsRequirements.setDescription('Sub-tree for management application requirements.')
rsExperimental = ObjectIdentity((1, 3, 6, 1, 4, 1, 2566, 137))
if mibBuilder.loadTexts: rsExperimental.setStatus('current')
if mibBuilder.loadTexts: rsExperimental.setDescription('Sub-tree for experimental definitions.')
rsCapabilities = ObjectIdentity((1, 3, 6, 1, 4, 1, 2566, 139))
if mibBuilder.loadTexts: rsCapabilities.setStatus('current')
if mibBuilder.loadTexts: rsCapabilities.setDescription('Sub-tree for agent capabilities.')
rsRegistration = ObjectIdentity((1, 3, 6, 1, 4, 1, 2566, 149))
if mibBuilder.loadTexts: rsRegistration.setStatus('current')
if mibBuilder.loadTexts: rsRegistration.setDescription('Sub-tree for registrations.')
rsRegModules = ObjectIdentity((1, 3, 6, 1, 4, 1, 2566, 149, 1))
if mibBuilder.loadTexts: rsRegModules.setStatus('current')
if mibBuilder.loadTexts: rsRegModules.setDescription('Sub-tree for modules registrations.')
rsRegBroadcast = ObjectIdentity((1, 3, 6, 1, 4, 1, 2566, 149, 2))
if mibBuilder.loadTexts: rsRegBroadcast.setStatus('current')
if mibBuilder.loadTexts: rsRegBroadcast.setDescription('currently not used')
rsRegBroadcastMeasurement = ObjectIdentity((1, 3, 6, 1, 4, 1, 2566, 149, 2, 1))
if mibBuilder.loadTexts: rsRegBroadcastMeasurement.setStatus('current')
if mibBuilder.loadTexts: rsRegBroadcastMeasurement.setDescription('currently not used')
rsRegBroadcastTransmitter = ObjectIdentity((1, 3, 6, 1, 4, 1, 2566, 149, 2, 2))
if mibBuilder.loadTexts: rsRegBroadcastTransmitter.setStatus('current')
if mibBuilder.loadTexts: rsRegBroadcastTransmitter.setDescription('currently not used')
mibBuilder.exportSymbols("RS-COMMON-MIB", rsExperimental=rsExperimental, rsRoot=rsRoot, PYSNMP_MODULE_ID=rsRoot, rsProdBroadcastMeasurement=rsProdBroadcastMeasurement, rsRegBroadcast=rsRegBroadcast, rsRegBroadcastMeasurement=rsRegBroadcastMeasurement, rsRegistration=rsRegistration, rsRegBroadcastTransmitter=rsRegBroadcastTransmitter, rsCapabilities=rsCapabilities, rsProdBroadcast=rsProdBroadcast, rsProdBroadcastTransmitter=rsProdBroadcastTransmitter, rsProducts=rsProducts, rsRequirements=rsRequirements, rsCommon=rsCommon, rsRegModules=rsRegModules)
