#
# PySNMP MIB module JDSU-ONMSI-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/jds/JDSU-ONMSI-MIB
# Produced by pysmi-1.1.12 at Mon Jun  3 13:10:22 2024
# On host fv-az883-299 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint")
IANAItuProbableCause, IANAItuEventType = mibBuilder.importSymbols("IANA-ITU-ALARM-TC-MIB", "IANAItuProbableCause", "IANAItuEventType")
jdsuOnmsi, = mibBuilder.importSymbols("JDSU-SMI-MIB", "jdsuOnmsi")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Bits, Gauge32, Counter64, TimeTicks, Counter32, ModuleIdentity, NotificationType, IpAddress, Integer32, iso, ObjectIdentity, MibIdentifier, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Gauge32", "Counter64", "TimeTicks", "Counter32", "ModuleIdentity", "NotificationType", "IpAddress", "Integer32", "iso", "ObjectIdentity", "MibIdentifier", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TruthValue, TextualConvention, DisplayString, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "DisplayString", "DateAndTime")
jdsuOnmsiMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1))
jdsuOnmsiMib.setRevisions(('2020-03-11 16:27', '2019-11-20 16:01', '2018-09-04 15:59', '2017-07-05 11:00', '2012-10-25 11:38', '2011-10-04 11:15', '2011-09-27 14:49', '2010-06-09 09:10',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: jdsuOnmsiMib.setRevisionsDescriptions(('Version 4.40: add PON scheduling and home VIP flag', 'Version 4.30: add rootCause in PointToPointSpecificInfos', 'Version 3.12: add alarm additional attributes', 'Version sensing:\r\n\t\tAdd a new value to JdsuOnmsiOtdrPosition: center(3).\r\n\t\tAdd temperature and strain alarm specific infos to the alarm event entry and trap.', 'Version 2.40.0:\r\n\t\tRename fields to attributes and custom fields to additional attributes.\r\n\t\tAdd GPS coordinates and AlarmOriginatingEntity to the alarm event entry and trap.\r\n\t\tAdd OTU and central office service\r\n\t\tAdd some Textual Convention\r\n\t\tUpdate all documentation', 'Version 2.12.1: add field tables for links, monitoring tests, PONs, homes', 'Version 2.12.0', 'Initial version.',))
if mibBuilder.loadTexts: jdsuOnmsiMib.setLastUpdated('202003111627Z')
if mibBuilder.loadTexts: jdsuOnmsiMib.setOrganization('JDSU')
if mibBuilder.loadTexts: jdsuOnmsiMib.setContactInfo('JDS Uniphase France\r\n\t\tPostal: JDSU france\r\n\t\t        34 rue Necker\r\n\t\t        42 000 SAINT-ETIENNE\r\n\t\t        France\r\n\r\n\t\tTel: +(33) 47747 8900\r\n\t\tFax: +(33) 47747 8970')
if mibBuilder.loadTexts: jdsuOnmsiMib.setDescription('JDSU FO Division MIB root')
class JdsuOnmsiAlarmAckStatus(TextualConvention, Integer32):
    description = 'Enumeration to alarm acknowledgement status'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("acknowledged", 1), ("unacknowledged", 2))

class JdsuOnmsiAlarmClearStatus(TextualConvention, Integer32):
    description = 'Enumeration to alarm clear status'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("cleared", 1), ("uncleared", 2))

class JdsuOnmsiAlarmEventType(TextualConvention, Integer32):
    description = 'Enumeration for alarm event types'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("newAlarmEvent", 1), ("changedAlarmEvent", 2), ("ackStateChangedEvent", 3), ("clearStateChangedEvent", 4), ("alarmCommentsEvent", 5))

class JdsuOnmsiInternalKey(TextualConvention, Unsigned32):
    description = 'Numeric object internal key'
    status = 'current'

class JdsuOnmsiOtdrPosition(TextualConvention, Integer32):
    description = 'The position of an OTDR module in an OTU'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("top", 1), ("bottom", 2), ("center", 3))

class JdsuOnmsiPeakStatus(TextualConvention, OctetString):
    description = 'Peak status :\r\n\t\t- UNKNOWN : before test\r\n\t\t- OK : peak OK\r\n\t\t- WARNING_LEVEL : peak crosses warning threshold in level or position\r\n\t\t- MINOR_LEVEL : peak crosses minor threshold in level or position\r\n\t\t- NEW : peak was not referenced\r\n\t\t- MISSING  referenced peak is missing'
    status = 'current'

class JdsuOnmsiPeakType(TextualConvention, Integer32):
    description = 'Enumeration for peak types'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("notReferenced", 1), ("notHome", 2), ("home", 3))

class JdsuOnmsiSeverity(TextualConvention, Integer32):
    description = 'Perceived severity as defined in OSS/J'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("none", 0), ("indeterminate", 1), ("warning", 2), ("minor", 3), ("major", 4), ("critical", 5))

class JdsuOnmsiUtf8String(TextualConvention, OctetString):
    description = 'UTF-8 encoded strings.\r\n\r\n\t\tThe UTF-8 charset is specified by RFC 2279;\r\n\t\tthe transformation format upon which it is\r\n\t\tbased is specified in Amendment 2 of\r\n\t\tISO 10646-1 and is also described in\r\n\t\tthe Unicode Standard'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 65535)

jdsuOnmsiProduct = MibIdentifier((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 1))
jdsuOnmsiProductDescr = MibScalar((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 1, 1), JdsuOnmsiUtf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiProductDescr.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiProductDescr.setDescription('Textual description of the product.\r\n\t\tIt is mandatory that this only contain\r\n\t\tprintable ASCII characters')
jdsuOnmsiProductObjectID = MibScalar((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiProductObjectID.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiProductObjectID.setDescription("Vendor's authoritative identification of the\r\n\t\tnetwork management subsystem contained into the\r\n\t\tproduct.  This value is allocated within the SMI\r\n\t\tenterprises subtree (1.3.6.1.4.1) and provides an\r\n\t\teasy and unambiguous means for determining `what\r\n\t\tkind of box' is being managed")
jdsuOnmsiProductContact = MibScalar((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 1, 3), JdsuOnmsiUtf8String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jdsuOnmsiProductContact.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiProductContact.setDescription('Textual identification of the person in charge of the managed node,\r\n\t\ttogether with information on how to contact this person')
jdsuOnmsiProductName = MibScalar((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 1, 4), JdsuOnmsiUtf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiProductName.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiProductName.setDescription('Administratively-assigned name for this\r\n\t\tmanaged product')
jdsuOnmsiProductLocation = MibScalar((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 1, 5), JdsuOnmsiUtf8String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jdsuOnmsiProductLocation.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiProductLocation.setDescription("Physical location of the product (e.g.,\r\n\t\t`JDSU ONMS Server office, 3rd floor...')")
jdsuOnmsiAdministration = MibIdentifier((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 2))
jdsuOnmsiSnmpConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 2, 1))
jdsuOnmsiSnmpConfigurationReload = MibScalar((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 2, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jdsuOnmsiSnmpConfigurationReload.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiSnmpConfigurationReload.setDescription('Set 1 to reload the SNMP configuration.\r\n\t\t(from jdmk.acl and snmp.properties files)')
jdsuOnmsiImAlive = MibIdentifier((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 2, 2))
jdsuOnmsiImAlivePeriodMin = MibScalar((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 2, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jdsuOnmsiImAlivePeriodMin.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiImAlivePeriodMin.setDescription('The periodicity of jdsuOnmsiImAliveTrap, in minutes.\r\n\t\tSetting 0 will disable the traps.')
jdsuOnmsiImAliveText = MibScalar((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 2, 2, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jdsuOnmsiImAliveText.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiImAliveText.setDescription('The text carried by the jdsuOnmsiImAliveTrap')
jdsuOnmsiImAliveAlarmEventSequence = MibScalar((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 2, 2, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiImAliveAlarmEventSequence.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiImAliveAlarmEventSequence.setDescription('The sequence of the jdsuOnmsiAlarmEventTrap.\r\n\t\tManagers can rely on it to detect missed jdsuOnmsiAlarmEventTrap.\r\n\t\tUse jdsuOnmsiAlarmResendEvents to resend missed traps.')
jdsuOnmsiServices = MibIdentifier((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3))
jdsuOnmsiHomeService = MibIdentifier((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 1))
jdsuOnmsiHomeData = MibIdentifier((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 1, 1))
jdsuOnmsiHomeTable = MibTable((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 1, 1, 1), )
if mibBuilder.loadTexts: jdsuOnmsiHomeTable.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiHomeTable.setDescription('This table contains the standard home data')
jdsuOnmsiHomeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 1, 1, 1, 1), ).setIndexNames((0, "JDSU-ONMSI-MIB", "jdsuOnmsiHomeEntryInternalKey"))
if mibBuilder.loadTexts: jdsuOnmsiHomeEntry.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiHomeEntry.setDescription('A home')
jdsuOnmsiHomeEntryInternalKey = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 1, 1, 1, 1, 1), JdsuOnmsiInternalKey()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiHomeEntryInternalKey.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiHomeEntryInternalKey.setDescription('The nternal key of the home')
jdsuOnmsiHomeEntryHomeIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 1, 1, 1, 1, 2), JdsuOnmsiUtf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiHomeEntryHomeIdentifier.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiHomeEntryHomeIdentifier.setDescription('The identifier of the home')
jdsuOnmsiHomeEntryName = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 1, 1, 1, 1, 3), JdsuOnmsiUtf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiHomeEntryName.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiHomeEntryName.setDescription('The name of the home')
jdsuOnmsiHomeEntryDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 1, 1, 1, 1, 4), JdsuOnmsiUtf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiHomeEntryDescription.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiHomeEntryDescription.setDescription('The description of the home')
jdsuOnmsiHomeEntryPonInternalKey = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 1, 1, 1, 1, 5), JdsuOnmsiInternalKey()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiHomeEntryPonInternalKey.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiHomeEntryPonInternalKey.setDescription("The internal key of the home's PON")
jdsuOnmsiHomeEntryHomeTerminationTypeInternalKey = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 1, 1, 1, 1, 6), JdsuOnmsiInternalKey()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiHomeEntryHomeTerminationTypeInternalKey.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiHomeEntryHomeTerminationTypeInternalKey.setDescription("The internal key of the home's termination type")
jdsuOnmsiHomeEntryLatestPeakInternalKey = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 1, 1, 1, 1, 7), JdsuOnmsiInternalKey()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiHomeEntryLatestPeakInternalKey.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiHomeEntryLatestPeakInternalKey.setDescription("The internal key of the home's latest peak")
jdsuOnmsiHomeEntryLatestPeakSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 1, 1, 1, 1, 8), JdsuOnmsiSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiHomeEntryLatestPeakSeverity.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiHomeEntryLatestPeakSeverity.setDescription("The severity of the home's latest peak")
jdsuOnmsiHomeEntryLatestPeakStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 1, 1, 1, 1, 9), JdsuOnmsiPeakStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiHomeEntryLatestPeakStatus.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiHomeEntryLatestPeakStatus.setDescription("The status of the home's latest peak")
jdsuOnmsiHomeEntryVip = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 1, 1, 1, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiHomeEntryVip.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiHomeEntryVip.setDescription('The VIP status of the home')
jdsuOnmsiHomeAdditionalAttributeTable = MibTable((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 1, 1, 2), )
if mibBuilder.loadTexts: jdsuOnmsiHomeAdditionalAttributeTable.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiHomeAdditionalAttributeTable.setDescription('This table contains the additional attributes on homes')
jdsuOnmsiHomeAdditionalAttributeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 1, 1, 2, 1), ).setIndexNames((0, "JDSU-ONMSI-MIB", "jdsuOnmsiHomeAdditionalAttributeEntryInternalKey"), (0, "JDSU-ONMSI-MIB", "jdsuOnmsiHomeAdditionalAttributeEntryName"))
if mibBuilder.loadTexts: jdsuOnmsiHomeAdditionalAttributeEntry.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiHomeAdditionalAttributeEntry.setDescription('A additional attribute on a home')
jdsuOnmsiHomeAdditionalAttributeEntryInternalKey = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 1, 1, 2, 1, 1), JdsuOnmsiInternalKey()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiHomeAdditionalAttributeEntryInternalKey.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiHomeAdditionalAttributeEntryInternalKey.setDescription('The internal key of the home')
jdsuOnmsiHomeAdditionalAttributeEntryName = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 1, 1, 2, 1, 2), JdsuOnmsiUtf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiHomeAdditionalAttributeEntryName.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiHomeAdditionalAttributeEntryName.setDescription('The additional attribute name')
jdsuOnmsiHomeAdditionalAttributeEntryValue = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 1, 1, 2, 1, 3), JdsuOnmsiUtf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiHomeAdditionalAttributeEntryValue.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiHomeAdditionalAttributeEntryValue.setDescription('The additional attribute value')
jdsuOnmsiHomeTerminationTypeTable = MibTable((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 1, 1, 3), )
if mibBuilder.loadTexts: jdsuOnmsiHomeTerminationTypeTable.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiHomeTerminationTypeTable.setDescription('This table contains the standard home termination type data')
jdsuOnmsiHomeTerminationTypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 1, 1, 3, 1), ).setIndexNames((0, "JDSU-ONMSI-MIB", "jdsuOnmsiHomeTerminationTypeEntryInternalKey"))
if mibBuilder.loadTexts: jdsuOnmsiHomeTerminationTypeEntry.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiHomeTerminationTypeEntry.setDescription('A home termination type')
jdsuOnmsiHomeTerminationTypeEntryInternalKey = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 1, 1, 3, 1, 1), JdsuOnmsiInternalKey()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiHomeTerminationTypeEntryInternalKey.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiHomeTerminationTypeEntryInternalKey.setDescription('The internal key of the home termination type')
jdsuOnmsiHomeTerminationTypeEntryName = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 1, 1, 3, 1, 2), JdsuOnmsiUtf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiHomeTerminationTypeEntryName.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiHomeTerminationTypeEntryName.setDescription('The name of the home termination type')
jdsuOnmsiHomeTerminationTypeEntryDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 1, 1, 3, 1, 3), JdsuOnmsiUtf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiHomeTerminationTypeEntryDescription.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiHomeTerminationTypeEntryDescription.setDescription('The description of the home termination type')
jdsuOnmsiHomeAttributeTable = MibTable((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 1, 1, 4), )
if mibBuilder.loadTexts: jdsuOnmsiHomeAttributeTable.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiHomeAttributeTable.setDescription('This table contains the descriptions of noticeable home attributes')
jdsuOnmsiHomeAttributeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 1, 1, 4, 1), ).setIndexNames((0, "JDSU-ONMSI-MIB", "jdsuOnmsiHomeAttributeEntryName"))
if mibBuilder.loadTexts: jdsuOnmsiHomeAttributeEntry.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiHomeAttributeEntry.setDescription('A home attribute entry')
jdsuOnmsiHomeAttributeEntryName = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 1, 1, 4, 1, 1), JdsuOnmsiUtf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiHomeAttributeEntryName.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiHomeAttributeEntryName.setDescription('The attribute name. The additional attributes are prefixed with an underscore character to avoid name collision with standard attributes')
jdsuOnmsiHomeAttributeEntryAdditional = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 1, 1, 4, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiHomeAttributeEntryAdditional.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiHomeAttributeEntryAdditional.setDescription('This flag indicates whether the attribute is additional')
jdsuOnmsiHomeAttributeEntryFindable = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 1, 1, 4, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiHomeAttributeEntryFindable.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiHomeAttributeEntryFindable.setDescription('This flag indicates whether the attribute is findable')
jdsuOnmsiHomeAttributeEntryUpdatable = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 1, 1, 4, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiHomeAttributeEntryUpdatable.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiHomeAttributeEntryUpdatable.setDescription('This flag indicates whether the attribute is updatable')
jdsuOnmsiHomeFunctions = MibIdentifier((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 1, 2))
jdsuOnmsiHomeTerminationTypeLoad = MibIdentifier((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 1, 2, 1))
jdsuOnmsiHomeTerminationTypeLoadExecute = MibScalar((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 1, 2, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jdsuOnmsiHomeTerminationTypeLoadExecute.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiHomeTerminationTypeLoadExecute.setDescription('Setting this field to 1 performs the jdsuOnmsiHomeTerminationTypeTable load')
jdsuOnmsiHomeTerminationTypeLoadError = MibScalar((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 1, 2, 1, 2), JdsuOnmsiUtf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiHomeTerminationTypeLoadError.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiHomeTerminationTypeLoadError.setDescription('When the function execution fails, this node contains information on the error that occurred.\r\n\t\tThis node is empty when the execution is successful.')
jdsuOnmsiHomeGet = MibIdentifier((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 1, 2, 2))
jdsuOnmsiHomeGetParamInternalKey = MibScalar((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 1, 2, 2, 1), JdsuOnmsiInternalKey()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jdsuOnmsiHomeGetParamInternalKey.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiHomeGetParamInternalKey.setDescription('The internal key of the home to retrieve')
jdsuOnmsiHomeGetExecute = MibScalar((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 1, 2, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jdsuOnmsiHomeGetExecute.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiHomeGetExecute.setDescription('Setting this field to 1 performs the home retrieval')
jdsuOnmsiHomeGetError = MibScalar((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 1, 2, 2, 3), JdsuOnmsiUtf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiHomeGetError.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiHomeGetError.setDescription('When the function execution fails, this node contains information on the error that occurred.\r\n\t\tThis node is empty when the execution is successful.')
jdsuOnmsiHomeFind = MibIdentifier((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 1, 2, 3))
jdsuOnmsiHomeFindParamAttribute = MibScalar((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 1, 2, 3, 1), JdsuOnmsiUtf8String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jdsuOnmsiHomeFindParamAttribute.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiHomeFindParamAttribute.setDescription('The attribute of the home to perform the search on.\r\n\t\tValid attributes for homes are :\r\n\t\t- name\r\n\t\t- identifier\r\n\t\t- ponInternalKey\r\n\t\tand any additional attribute name')
jdsuOnmsiHomeFindParamValue = MibScalar((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 1, 2, 3, 2), JdsuOnmsiUtf8String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jdsuOnmsiHomeFindParamValue.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiHomeFindParamValue.setDescription('The attribute value to find')
jdsuOnmsiHomeFindExecute = MibScalar((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 1, 2, 3, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jdsuOnmsiHomeFindExecute.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiHomeFindExecute.setDescription('Setting this field to 1 performs the home find')
jdsuOnmsiHomeFindError = MibScalar((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 1, 2, 3, 4), JdsuOnmsiUtf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiHomeFindError.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiHomeFindError.setDescription('When the function execution fails, this node contains information on the error that occurred.\r\n\t\tThis node is empty when the execution is successful.')
jdsuOnmsiHomeStartTest = MibIdentifier((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 1, 2, 4))
jdsuOnmsiHomeStartTestParamInternalKey = MibScalar((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 1, 2, 4, 1), JdsuOnmsiInternalKey()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jdsuOnmsiHomeStartTestParamInternalKey.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiHomeStartTestParamInternalKey.setDescription('The internal key of the home to start')
jdsuOnmsiHomeStartTestExecute = MibScalar((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 1, 2, 4, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jdsuOnmsiHomeStartTestExecute.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiHomeStartTestExecute.setDescription('Setting this field to 1 performs the home test start')
jdsuOnmsiHomeStartTestError = MibScalar((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 1, 2, 4, 3), JdsuOnmsiUtf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiHomeStartTestError.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiHomeStartTestError.setDescription('When the function execution fails, this node contains information on the error that occurred.\r\n\t\tThis node is empty when the execution is successful.')
jdsuOnmsiHomeAttributeLoad = MibIdentifier((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 1, 2, 5))
jdsuOnmsiHomeAttributeLoadExecute = MibScalar((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 1, 2, 5, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jdsuOnmsiHomeAttributeLoadExecute.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiHomeAttributeLoadExecute.setDescription('Setting this field to 1 performs the jdsuOnmsiHomeAttributeTable load')
jdsuOnmsiHomeAttributeLoadError = MibScalar((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 1, 2, 5, 2), JdsuOnmsiUtf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiHomeAttributeLoadError.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiHomeAttributeLoadError.setDescription('When the function execution fails, this node contains information on the error that occurred.\r\n\t\tThis node is empty when the execution is successful.')
jdsuOnmsiPonService = MibIdentifier((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 2))
jdsuOnmsiPonData = MibIdentifier((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 2, 1))
jdsuOnmsiPonTable = MibTable((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 2, 1, 1), )
if mibBuilder.loadTexts: jdsuOnmsiPonTable.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiPonTable.setDescription('This table contains the standard PON data')
jdsuOnmsiPonEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 2, 1, 1, 1), ).setIndexNames((0, "JDSU-ONMSI-MIB", "jdsuOnmsiPonEntryInternalKey"))
if mibBuilder.loadTexts: jdsuOnmsiPonEntry.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiPonEntry.setDescription('A PON entry')
jdsuOnmsiPonEntryInternalKey = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 2, 1, 1, 1, 1), JdsuOnmsiInternalKey()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiPonEntryInternalKey.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiPonEntryInternalKey.setDescription('The internal key of the PON')
jdsuOnmsiPonEntryName = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 2, 1, 1, 1, 2), JdsuOnmsiUtf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiPonEntryName.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiPonEntryName.setDescription('The name of the PON')
jdsuOnmsiPonEntryDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 2, 1, 1, 1, 3), JdsuOnmsiUtf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiPonEntryDescription.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiPonEntryDescription.setDescription('The description of the PON')
jdsuOnmsiPonEntryLatestTestInternalKey = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 2, 1, 1, 1, 4), JdsuOnmsiInternalKey()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiPonEntryLatestTestInternalKey.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiPonEntryLatestTestInternalKey.setDescription("The internal key of the PON's latest test")
jdsuOnmsiPonEntryOtuInternalKey = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 2, 1, 1, 1, 5), JdsuOnmsiInternalKey()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiPonEntryOtuInternalKey.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiPonEntryOtuInternalKey.setDescription('The internal key of the OTU to which the PON belongs')
jdsuOnmsiPonEntryPortInternalKey = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 2, 1, 1, 1, 6), JdsuOnmsiInternalKey()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiPonEntryPortInternalKey.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiPonEntryPortInternalKey.setDescription('The internal key of the OTU port associated to the PON')
jdsuOnmsiPonEntrySeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 2, 1, 1, 1, 7), JdsuOnmsiSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiPonEntrySeverity.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiPonEntrySeverity.setDescription('The current severity of the PON')
jdsuOnmsiPonEntrySchedulingConfiguration = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 2, 1, 1, 1, 8), JdsuOnmsiUtf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiPonEntrySchedulingConfiguration.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiPonEntrySchedulingConfiguration.setDescription('he scheduling configuration of the PON test in a serialized form (key1=value1|key2=value2|...).\r\n\t\tIt contains the following keys:\r\n\t\t- scheduled: this flag indicates whether the PON test is periodic or not (true/false)\r\n\t\t- periodical: this flag indicates whether the PON test is scheduled or not (true/false)\r\n\t\t- startDate: the date at which the PON test scheduling starts, in seconds since January 1, 1970, 00:00:00 GMT\r\n\t\t- frequencyMin: the period of the PON test scheduling (if the test is periodic), in minutes')
jdsuOnmsiPonAdditionalAttributeTable = MibTable((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 2, 1, 2), )
if mibBuilder.loadTexts: jdsuOnmsiPonAdditionalAttributeTable.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiPonAdditionalAttributeTable.setDescription('This table contains the additional attributes on PONs')
jdsuOnmsiPonAdditionalAttributeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 2, 1, 2, 1), ).setIndexNames((0, "JDSU-ONMSI-MIB", "jdsuOnmsiPonAdditionalAttributeEntryInternalKey"), (0, "JDSU-ONMSI-MIB", "jdsuOnmsiPonAdditionalAttributeEntryName"))
if mibBuilder.loadTexts: jdsuOnmsiPonAdditionalAttributeEntry.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiPonAdditionalAttributeEntry.setDescription('A PON additional attribute entry')
jdsuOnmsiPonAdditionalAttributeEntryInternalKey = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 2, 1, 2, 1, 1), JdsuOnmsiInternalKey()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiPonAdditionalAttributeEntryInternalKey.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiPonAdditionalAttributeEntryInternalKey.setDescription('The internal key of the PON')
jdsuOnmsiPonAdditionalAttributeEntryName = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 2, 1, 2, 1, 2), JdsuOnmsiUtf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiPonAdditionalAttributeEntryName.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiPonAdditionalAttributeEntryName.setDescription('The additional attribute name')
jdsuOnmsiPonAdditionalAttributeEntryValue = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 2, 1, 2, 1, 3), JdsuOnmsiUtf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiPonAdditionalAttributeEntryValue.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiPonAdditionalAttributeEntryValue.setDescription('The additional attribute value')
jdsuOnmsiPonAttributeTable = MibTable((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 2, 1, 3), )
if mibBuilder.loadTexts: jdsuOnmsiPonAttributeTable.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiPonAttributeTable.setDescription('This table contains the descriptions of noticeable PON attributes')
jdsuOnmsiPonAttributeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 2, 1, 3, 1), ).setIndexNames((0, "JDSU-ONMSI-MIB", "jdsuOnmsiPonAttributeEntryName"))
if mibBuilder.loadTexts: jdsuOnmsiPonAttributeEntry.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiPonAttributeEntry.setDescription('A PON attribute entry')
jdsuOnmsiPonAttributeEntryName = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 2, 1, 3, 1, 1), JdsuOnmsiUtf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiPonAttributeEntryName.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiPonAttributeEntryName.setDescription('The attribute name. The additional attributes are prefixed with an underscore character to avoid name collision with standard attributes')
jdsuOnmsiPonAttributeEntryAdditional = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 2, 1, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiPonAttributeEntryAdditional.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiPonAttributeEntryAdditional.setDescription('This flag indicates whether the attribute is additional')
jdsuOnmsiPonAttributeEntryFindable = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 2, 1, 3, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiPonAttributeEntryFindable.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiPonAttributeEntryFindable.setDescription('This flag indicates whether the attribute is findable')
jdsuOnmsiPonAttributeEntryUpdatable = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 2, 1, 3, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiPonAttributeEntryUpdatable.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiPonAttributeEntryUpdatable.setDescription('This flag indicates whether the attribute is updatable')
jdsuOnmsiPonFunctions = MibIdentifier((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 2, 2))
jdsuOnmsiPonGet = MibIdentifier((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 2, 2, 1))
jdsuOnmsiPonGetParamInternalKey = MibScalar((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 2, 2, 1, 1), JdsuOnmsiInternalKey()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jdsuOnmsiPonGetParamInternalKey.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiPonGetParamInternalKey.setDescription('The internal key of the PON to retrieve')
jdsuOnmsiPonGetExecute = MibScalar((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 2, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jdsuOnmsiPonGetExecute.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiPonGetExecute.setDescription('Setting this field to 1 performs the PON retrieval')
jdsuOnmsiPonGetError = MibScalar((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 2, 2, 1, 3), JdsuOnmsiUtf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiPonGetError.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiPonGetError.setDescription('When the function execution fails, this node contains information on the error that occurred.\r\n\t\tThis node is empty when the execution is successful.')
jdsuOnmsiPonFind = MibIdentifier((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 2, 2, 2))
jdsuOnmsiPonFindParamAttribute = MibScalar((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 2, 2, 2, 1), JdsuOnmsiUtf8String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jdsuOnmsiPonFindParamAttribute.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiPonFindParamAttribute.setDescription('The attribute of the PON to perform the search on.\r\n\t\tValid attributes for PONs are :\r\n\t\t- name\r\n\t\tand any additional attribute name')
jdsuOnmsiPonFindParamValue = MibScalar((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 2, 2, 2, 2), JdsuOnmsiUtf8String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jdsuOnmsiPonFindParamValue.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiPonFindParamValue.setDescription('The attribute value to find')
jdsuOnmsiPonFindExecute = MibScalar((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 2, 2, 2, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jdsuOnmsiPonFindExecute.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiPonFindExecute.setDescription('Setting this field to 1 performs the PON find')
jdsuOnmsiPonFindError = MibScalar((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 2, 2, 2, 4), JdsuOnmsiUtf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiPonFindError.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiPonFindError.setDescription('When the function execution fails, this node contains information on the error that occurred.\r\n\t\tThis node is empty when the execution is successful.')
jdsuOnmsiPonStartTest = MibIdentifier((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 2, 2, 3))
jdsuOnmsiPonStartTestParamInternalKey = MibScalar((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 2, 2, 3, 1), JdsuOnmsiInternalKey()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jdsuOnmsiPonStartTestParamInternalKey.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiPonStartTestParamInternalKey.setDescription('The internal key of the PON to start')
jdsuOnmsiPonStartTestExecute = MibScalar((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 2, 2, 3, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jdsuOnmsiPonStartTestExecute.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiPonStartTestExecute.setDescription('Setting this field to 1 performs the PON test start')
jdsuOnmsiPonStartTestError = MibScalar((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 2, 2, 3, 3), JdsuOnmsiUtf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiPonStartTestError.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiPonStartTestError.setDescription('When the function execution fails, this node contains information on the error that occurred.\r\n\t\tThis node is empty when the execution is successful.')
jdsuOnmsiPonAttributeLoad = MibIdentifier((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 2, 2, 4))
jdsuOnmsiPonAttributeLoadExecute = MibScalar((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 2, 2, 4, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jdsuOnmsiPonAttributeLoadExecute.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiPonAttributeLoadExecute.setDescription('Setting this field to 1 performs the jdsuOnmsiPonAttributeTable load')
jdsuOnmsiPonAttributeLoadError = MibScalar((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 2, 2, 4, 2), JdsuOnmsiUtf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiPonAttributeLoadError.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiPonAttributeLoadError.setDescription('When the function execution fails, this node contains information on the error that occurred.\r\n\t\tThis node is empty when the execution is successful.')
jdsuOnmsiPeakService = MibIdentifier((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 3))
jdsuOnmsiPeakData = MibIdentifier((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 3, 1))
jdsuOnmsiPeakTable = MibTable((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 3, 1, 1), )
if mibBuilder.loadTexts: jdsuOnmsiPeakTable.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiPeakTable.setDescription('The table of peaks')
jdsuOnmsiPeakEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 3, 1, 1, 1), ).setIndexNames((0, "JDSU-ONMSI-MIB", "jdsuOnmsiPeakEntryInternalKey"))
if mibBuilder.loadTexts: jdsuOnmsiPeakEntry.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiPeakEntry.setDescription('A peak entry')
jdsuOnmsiPeakEntryInternalKey = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 3, 1, 1, 1, 1), JdsuOnmsiInternalKey()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiPeakEntryInternalKey.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiPeakEntryInternalKey.setDescription('The internal key of the peak')
jdsuOnmsiPeakEntryTestInternalKey = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 3, 1, 1, 1, 2), JdsuOnmsiInternalKey()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiPeakEntryTestInternalKey.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiPeakEntryTestInternalKey.setDescription('The internal key of the peak test')
jdsuOnmsiPeakEntryDate = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 3, 1, 1, 1, 3), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiPeakEntryDate.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiPeakEntryDate.setDescription('The date of the peak')
jdsuOnmsiPeakEntryIsAReference = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 3, 1, 1, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiPeakEntryIsAReference.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiPeakEntryIsAReference.setDescription('Whether the peak is a reference')
jdsuOnmsiPeakEntryDistance = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 3, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiPeakEntryDistance.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiPeakEntryDistance.setDescription('The distance of the peak\r\n\t\tUnit : millimeters')
jdsuOnmsiPeakEntryLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 3, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiPeakEntryLevel.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiPeakEntryLevel.setDescription('The level of the peak\r\n\t\tUnit : dB / 100')
jdsuOnmsiPeakEntryPower = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 3, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiPeakEntryPower.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiPeakEntryPower.setDescription('The power of the peak\r\n\t\tUnit : dBm / 100')
jdsuOnmsiPeakEntryIsPowerMeasured = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 3, 1, 1, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiPeakEntryIsPowerMeasured.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiPeakEntryIsPowerMeasured.setDescription('Whether the power has been measured')
jdsuOnmsiPeakEntrySeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 3, 1, 1, 1, 9), JdsuOnmsiSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiPeakEntrySeverity.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiPeakEntrySeverity.setDescription('The severity of the peak')
jdsuOnmsiPeakEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 3, 1, 1, 1, 10), JdsuOnmsiPeakStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiPeakEntryStatus.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiPeakEntryStatus.setDescription('The status of the peak')
jdsuOnmsiPeakEntryRefDistance = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 3, 1, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiPeakEntryRefDistance.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiPeakEntryRefDistance.setDescription('The distance of the reference peak\r\n\t\tUnit : millimeters')
jdsuOnmsiPeakEntryRefLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 3, 1, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiPeakEntryRefLevel.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiPeakEntryRefLevel.setDescription('The level of the reference peak\r\n\t\tUnit : dB / 100')
jdsuOnmsiPeakEntryRefPower = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 3, 1, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiPeakEntryRefPower.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiPeakEntryRefPower.setDescription('The power of the reference peak\r\n\t\tUnit : dBm / 100')
jdsuOnmsiPeakEntryRefIsPowerMeasured = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 3, 1, 1, 1, 14), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiPeakEntryRefIsPowerMeasured.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiPeakEntryRefIsPowerMeasured.setDescription('Whether the power of the reference peak has been measured')
jdsuOnmsiPeakEntryRefDate = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 3, 1, 1, 1, 15), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiPeakEntryRefDate.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiPeakEntryRefDate.setDescription('The date of the reference peak')
jdsuOnmsiPeakEntryType = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 3, 1, 1, 1, 16), JdsuOnmsiPeakType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiPeakEntryType.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiPeakEntryType.setDescription('The type of the peak')
jdsuOnmsiPeakEntryHomeTerminationTypeInternalKey = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 3, 1, 1, 1, 17), JdsuOnmsiInternalKey()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiPeakEntryHomeTerminationTypeInternalKey.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiPeakEntryHomeTerminationTypeInternalKey.setDescription('The internal key of the peak home termination type')
jdsuOnmsiPeakEntryHomeInternalKey = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 3, 1, 1, 1, 18), JdsuOnmsiInternalKey()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiPeakEntryHomeInternalKey.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiPeakEntryHomeInternalKey.setDescription('The internal key of the peak home')
jdsuOnmsiPeakFunctions = MibIdentifier((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 3, 2))
jdsuOnmsiPeakGet = MibIdentifier((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 3, 2, 1))
jdsuOnmsiPeakGetParamInternalKey = MibScalar((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 3, 2, 1, 1), JdsuOnmsiInternalKey()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jdsuOnmsiPeakGetParamInternalKey.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiPeakGetParamInternalKey.setDescription('The internal key of the peak to retrieve')
jdsuOnmsiPeakGetExecute = MibScalar((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 3, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jdsuOnmsiPeakGetExecute.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiPeakGetExecute.setDescription('Setting this field to 1 performs the peak retrieval')
jdsuOnmsiPeakGetError = MibScalar((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 3, 2, 1, 3), JdsuOnmsiUtf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiPeakGetError.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiPeakGetError.setDescription('When the function execution fails, this node contains information on the error that occurred.\r\n\t\tThis node is empty when the execution is successful.')
jdsuOnmsiPeakFind = MibIdentifier((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 3, 2, 2))
jdsuOnmsiPeakFindParamAttribute = MibScalar((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 3, 2, 2, 1), JdsuOnmsiUtf8String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jdsuOnmsiPeakFindParamAttribute.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiPeakFindParamAttribute.setDescription('The attribute of the peak to perform the search on.\r\n\t\tValid attributes for peaks are :\r\n\t\t- testInternalKey')
jdsuOnmsiPeakFindParamValue = MibScalar((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 3, 2, 2, 2), JdsuOnmsiUtf8String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jdsuOnmsiPeakFindParamValue.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiPeakFindParamValue.setDescription('The attribute value to find')
jdsuOnmsiPeakFindExecute = MibScalar((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 3, 2, 2, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jdsuOnmsiPeakFindExecute.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiPeakFindExecute.setDescription('Setting this field to 1 performs the peak find')
jdsuOnmsiPeakFindError = MibScalar((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 3, 2, 2, 4), JdsuOnmsiUtf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiPeakFindError.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiPeakFindError.setDescription('When the function execution fails, this node contains information on the error that occurred.\r\n\t\tThis node is empty when the execution is successful.')
jdsuOnmsiLinkService = MibIdentifier((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 4))
jdsuOnmsiLinkData = MibIdentifier((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 4, 1))
jdsuOnmsiLinkTable = MibTable((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 4, 1, 1), )
if mibBuilder.loadTexts: jdsuOnmsiLinkTable.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiLinkTable.setDescription('This table contains the standard link data')
jdsuOnmsiLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 4, 1, 1, 1), ).setIndexNames((0, "JDSU-ONMSI-MIB", "jdsuOnmsiLinkEntryInternalKey"))
if mibBuilder.loadTexts: jdsuOnmsiLinkEntry.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiLinkEntry.setDescription('A link entry')
jdsuOnmsiLinkEntryInternalKey = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 4, 1, 1, 1, 1), JdsuOnmsiInternalKey()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiLinkEntryInternalKey.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiLinkEntryInternalKey.setDescription('The internal key of the link')
jdsuOnmsiLinkEntryName = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 4, 1, 1, 1, 2), JdsuOnmsiUtf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiLinkEntryName.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiLinkEntryName.setDescription('The name of the link')
jdsuOnmsiLinkEntryDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 4, 1, 1, 1, 3), JdsuOnmsiUtf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiLinkEntryDescription.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiLinkEntryDescription.setDescription('The description of the link')
jdsuOnmsiLinkEntryMeasureEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 4, 1, 1, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jdsuOnmsiLinkEntryMeasureEnabled.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiLinkEntryMeasureEnabled.setDescription('This flag indicates whether measurements can be performed on the link')
jdsuOnmsiLinkEntryOtuInternalKey = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 4, 1, 1, 1, 5), JdsuOnmsiInternalKey()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiLinkEntryOtuInternalKey.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiLinkEntryOtuInternalKey.setDescription('The internal key of the OTU to which the link belongs')
jdsuOnmsiLinkEntrySeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 4, 1, 1, 1, 6), JdsuOnmsiSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiLinkEntrySeverity.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiLinkEntrySeverity.setDescription('The current severity of the link')
jdsuOnmsiLinkAdditionalAttributeTable = MibTable((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 4, 1, 2), )
if mibBuilder.loadTexts: jdsuOnmsiLinkAdditionalAttributeTable.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiLinkAdditionalAttributeTable.setDescription('This table contains the additional attributes on links')
jdsuOnmsiLinkAdditionalAttributeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 4, 1, 2, 1), ).setIndexNames((0, "JDSU-ONMSI-MIB", "jdsuOnmsiLinkAdditionalAttributeEntryInternalKey"), (0, "JDSU-ONMSI-MIB", "jdsuOnmsiLinkAdditionalAttributeEntryName"))
if mibBuilder.loadTexts: jdsuOnmsiLinkAdditionalAttributeEntry.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiLinkAdditionalAttributeEntry.setDescription('A link additional attribute entry')
jdsuOnmsiLinkAdditionalAttributeEntryInternalKey = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 4, 1, 2, 1, 1), JdsuOnmsiInternalKey()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiLinkAdditionalAttributeEntryInternalKey.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiLinkAdditionalAttributeEntryInternalKey.setDescription('The internal key of the link')
jdsuOnmsiLinkAdditionalAttributeEntryName = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 4, 1, 2, 1, 2), JdsuOnmsiUtf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiLinkAdditionalAttributeEntryName.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiLinkAdditionalAttributeEntryName.setDescription('The additional attribute name')
jdsuOnmsiLinkAdditionalAttributeEntryValue = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 4, 1, 2, 1, 3), JdsuOnmsiUtf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiLinkAdditionalAttributeEntryValue.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiLinkAdditionalAttributeEntryValue.setDescription('The additional attribute value')
jdsuOnmsiLinkAttributeTable = MibTable((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 4, 1, 3), )
if mibBuilder.loadTexts: jdsuOnmsiLinkAttributeTable.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiLinkAttributeTable.setDescription('This table contains the descriptions of noticeable link attributes')
jdsuOnmsiLinkAttributeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 4, 1, 3, 1), ).setIndexNames((0, "JDSU-ONMSI-MIB", "jdsuOnmsiLinkAttributeEntryName"))
if mibBuilder.loadTexts: jdsuOnmsiLinkAttributeEntry.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiLinkAttributeEntry.setDescription('A link attribute entry')
jdsuOnmsiLinkAttributeEntryName = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 4, 1, 3, 1, 1), JdsuOnmsiUtf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiLinkAttributeEntryName.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiLinkAttributeEntryName.setDescription('The attribute name. The additional attributes are prefixed with an underscore character to avoid name collision with standard attributes')
jdsuOnmsiLinkAttributeEntryAdditional = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 4, 1, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiLinkAttributeEntryAdditional.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiLinkAttributeEntryAdditional.setDescription('This flag indicates whether the attribute is additional')
jdsuOnmsiLinkAttributeEntryFindable = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 4, 1, 3, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiLinkAttributeEntryFindable.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiLinkAttributeEntryFindable.setDescription('This flag indicates whether the attribute is findable')
jdsuOnmsiLinkAttributeEntryUpdatable = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 4, 1, 3, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiLinkAttributeEntryUpdatable.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiLinkAttributeEntryUpdatable.setDescription('This flag indicates whether the attribute is updatable')
jdsuOnmsiLinkFunctions = MibIdentifier((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 4, 2))
jdsuOnmsiLinkGet = MibIdentifier((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 4, 2, 1))
jdsuOnmsiLinkGetParamInternalKey = MibScalar((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 4, 2, 1, 1), JdsuOnmsiInternalKey()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jdsuOnmsiLinkGetParamInternalKey.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiLinkGetParamInternalKey.setDescription('The internal key of the link to retrieve')
jdsuOnmsiLinkGetExecute = MibScalar((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 4, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jdsuOnmsiLinkGetExecute.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiLinkGetExecute.setDescription('Setting this field to 1 performs the link retrieval')
jdsuOnmsiLinkGetError = MibScalar((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 4, 2, 1, 3), JdsuOnmsiUtf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiLinkGetError.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiLinkGetError.setDescription('When the function execution fails, this node contains information on the error that occurred.\r\n\t\tThis node is empty when the execution is successful.')
jdsuOnmsiLinkFind = MibIdentifier((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 4, 2, 2))
jdsuOnmsiLinkFindParamAttribute = MibScalar((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 4, 2, 2, 1), JdsuOnmsiUtf8String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jdsuOnmsiLinkFindParamAttribute.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiLinkFindParamAttribute.setDescription('The attribute of the link to perform the search on.\r\n\t\tValid attributes for links are :\r\n\t\t- name\r\n\t\tand any additional attribute name')
jdsuOnmsiLinkFindParamValue = MibScalar((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 4, 2, 2, 2), JdsuOnmsiUtf8String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jdsuOnmsiLinkFindParamValue.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiLinkFindParamValue.setDescription('The attribute value to find')
jdsuOnmsiLinkFindExecute = MibScalar((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 4, 2, 2, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jdsuOnmsiLinkFindExecute.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiLinkFindExecute.setDescription('Setting this field to 1 performs the link find')
jdsuOnmsiLinkFindError = MibScalar((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 4, 2, 2, 4), JdsuOnmsiUtf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiLinkFindError.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiLinkFindError.setDescription('When the function execution fails, this node contains information on the error that occurred.\r\n\t\tThis node is empty when the execution is successful.')
jdsuOnmsiLinkUpdate = MibIdentifier((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 4, 2, 3))
jdsuOnmsiLinkUpdateParamInternalKey = MibScalar((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 4, 2, 3, 1), JdsuOnmsiInternalKey()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jdsuOnmsiLinkUpdateParamInternalKey.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiLinkUpdateParamInternalKey.setDescription('The internal key of the link to update')
jdsuOnmsiLinkUpdateExecute = MibScalar((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 4, 2, 3, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jdsuOnmsiLinkUpdateExecute.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiLinkUpdateExecute.setDescription('Setting this field to 1 performs the link udpate')
jdsuOnmsiLinkUpdateError = MibScalar((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 4, 2, 3, 3), JdsuOnmsiUtf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiLinkUpdateError.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiLinkUpdateError.setDescription('When the function execution fails, this node contains information on the error that occurred.\r\n\t\tThis node is empty when the execution is successful.')
jdsuOnmsiLinkAttributeLoad = MibIdentifier((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 4, 2, 4))
jdsuOnmsiLinkAttributeLoadExecute = MibScalar((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 4, 2, 4, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jdsuOnmsiLinkAttributeLoadExecute.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiLinkAttributeLoadExecute.setDescription('Setting this field to 1 performs the jdsuOnmsiLinkAttributeTable load')
jdsuOnmsiLinkAttributeLoadError = MibScalar((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 4, 2, 4, 2), JdsuOnmsiUtf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiLinkAttributeLoadError.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiLinkAttributeLoadError.setDescription('When the function execution fails, this node contains information on the error that occurred.\r\n\t\tThis node is empty when the execution is successful.')
jdsuOnmsiMonitoringTestService = MibIdentifier((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 5))
jdsuOnmsiMonitoringTestData = MibIdentifier((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 5, 1))
jdsuOnmsiMonitoringTestTable = MibTable((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 5, 1, 1), )
if mibBuilder.loadTexts: jdsuOnmsiMonitoringTestTable.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiMonitoringTestTable.setDescription('This table contains the standard link data')
jdsuOnmsiMonitoringTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 5, 1, 1, 1), ).setIndexNames((0, "JDSU-ONMSI-MIB", "jdsuOnmsiMonitoringTestEntryInternalKey"))
if mibBuilder.loadTexts: jdsuOnmsiMonitoringTestEntry.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiMonitoringTestEntry.setDescription('A monitoring test entry')
jdsuOnmsiMonitoringTestEntryInternalKey = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 5, 1, 1, 1, 1), JdsuOnmsiInternalKey()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiMonitoringTestEntryInternalKey.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiMonitoringTestEntryInternalKey.setDescription('The internal key of the monitoring test')
jdsuOnmsiMonitoringTestEntryName = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 5, 1, 1, 1, 2), JdsuOnmsiUtf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiMonitoringTestEntryName.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiMonitoringTestEntryName.setDescription('The name of the monitoring test')
jdsuOnmsiMonitoringTestEntryDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 5, 1, 1, 1, 3), JdsuOnmsiUtf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiMonitoringTestEntryDescription.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiMonitoringTestEntryDescription.setDescription('The description of the monitoring test')
jdsuOnmsiMonitoringTestEntryLinkInternalKey = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 5, 1, 1, 1, 4), JdsuOnmsiInternalKey()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiMonitoringTestEntryLinkInternalKey.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiMonitoringTestEntryLinkInternalKey.setDescription("The internal key of the monitoring test's link")
jdsuOnmsiMonitoringTestEntryDisplayOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 5, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiMonitoringTestEntryDisplayOrder.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiMonitoringTestEntryDisplayOrder.setDescription('The display order ot the monitoring test')
jdsuOnmsiMonitoringTestEntrySeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 5, 1, 1, 1, 6), JdsuOnmsiSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiMonitoringTestEntrySeverity.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiMonitoringTestEntrySeverity.setDescription('The severity of the monitoring test')
jdsuOnmsiMonitoringTestEntryDetectionConfiguration = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 5, 1, 1, 1, 7), JdsuOnmsiUtf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiMonitoringTestEntryDetectionConfiguration.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiMonitoringTestEntryDetectionConfiguration.setDescription('The detection configuration of the monitoring test in a serialized form (key1=value1|key2=value2|...).\r\n\t\tIt contains the following keys:\r\n\t\t- firstMarkerDistanceM: the distance of the first marker, in meters\r\n\t\t- lastMarkerDistanceM: the distance of the last marker, in meters\r\n\t\t- acqDurationSec: the acquisition duration of the detection reference, in seconds\r\n\t\t- pulseNs: the pulse of the detection reference, in ns\r\n\t\t- rangeKm: the range of the detection reference, in km\r\n\t\t- fiberIndex: the fiber index of the detection reference\r\n\t\t- resolutionCm: the resolution of the detection reference, in cm\r\n\t\t- wavelengthNm: the wavelength of the detection reference, in nm')
jdsuOnmsiMonitoringTestEntryLocalizationConfiguration = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 5, 1, 1, 1, 8), JdsuOnmsiUtf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiMonitoringTestEntryLocalizationConfiguration.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiMonitoringTestEntryLocalizationConfiguration.setDescription('The localization configuration of the monitoring test in a serialized form (key1=value1|key2=value2|...).\r\n\t\tIt contains the following keys:\r\n\t\t- acqDurationSec: the acquisition duration of the localization reference, in seconds\r\n\t\t- pulseNs: the pulse of the localization reference, in ns\r\n\t\t- rangeKm: the range of the localization reference, in km\r\n\t\t- fiberIndex: the fiber index of the localization reference\r\n\t\t- resolutionCm: the resolution of the localization reference, in cm\r\n\t\t- wavelengthNm: the wavelength of the localization reference, in nm')
jdsuOnmsiMonitoringTestEntrySchedulingConfiguration = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 5, 1, 1, 1, 9), JdsuOnmsiUtf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiMonitoringTestEntrySchedulingConfiguration.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiMonitoringTestEntrySchedulingConfiguration.setDescription('The scheduling configuration of the monitoring test in a serialized form (key1=value1|key2=value2|...).\r\n\t\tIt contains the following keys:\r\n\t\t- scheduled: this flag indicates whether the monitoring test is periodic or not (true/false)\r\n\t\t- periodical: this flag indicates whether the monitoring test is scheduled or not (true/false)\r\n\t\t- startDate: the date at which the monitoring test scheduling starts, in seconds since January 1, 1970, 00:00:00 GMT\r\n\t\t- frequencyMin: the period of the monitoring test scheduling (if the test is periodic), in minutes')
jdsuOnmsiMonitoringTestAdditionalAttributeTable = MibTable((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 5, 1, 2), )
if mibBuilder.loadTexts: jdsuOnmsiMonitoringTestAdditionalAttributeTable.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiMonitoringTestAdditionalAttributeTable.setDescription('This table contains the additional attributes on monitoring tests')
jdsuOnmsiMonitoringTestAdditionalAttributeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 5, 1, 2, 1), ).setIndexNames((0, "JDSU-ONMSI-MIB", "jdsuOnmsiMonitoringTestAdditionalAttributeEntryInternalKey"), (0, "JDSU-ONMSI-MIB", "jdsuOnmsiMonitoringTestAdditionalAttributeEntryName"))
if mibBuilder.loadTexts: jdsuOnmsiMonitoringTestAdditionalAttributeEntry.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiMonitoringTestAdditionalAttributeEntry.setDescription('A monitoring test additional attribute entry')
jdsuOnmsiMonitoringTestAdditionalAttributeEntryInternalKey = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 5, 1, 2, 1, 1), JdsuOnmsiInternalKey()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiMonitoringTestAdditionalAttributeEntryInternalKey.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiMonitoringTestAdditionalAttributeEntryInternalKey.setDescription('The internal key of the monitoring test')
jdsuOnmsiMonitoringTestAdditionalAttributeEntryName = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 5, 1, 2, 1, 2), JdsuOnmsiUtf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiMonitoringTestAdditionalAttributeEntryName.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiMonitoringTestAdditionalAttributeEntryName.setDescription('The additional attribute name')
jdsuOnmsiMonitoringTestAdditionalAttributeEntryValue = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 5, 1, 2, 1, 3), JdsuOnmsiUtf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiMonitoringTestAdditionalAttributeEntryValue.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiMonitoringTestAdditionalAttributeEntryValue.setDescription('The additional attribute value')
jdsuOnmsiMonitoringTestAttributeTable = MibTable((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 5, 1, 3), )
if mibBuilder.loadTexts: jdsuOnmsiMonitoringTestAttributeTable.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiMonitoringTestAttributeTable.setDescription('This table contains the descriptions of noticeable monitoring test attributes')
jdsuOnmsiMonitoringTestAttributeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 5, 1, 3, 1), ).setIndexNames((0, "JDSU-ONMSI-MIB", "jdsuOnmsiMonitoringTestAttributeEntryName"))
if mibBuilder.loadTexts: jdsuOnmsiMonitoringTestAttributeEntry.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiMonitoringTestAttributeEntry.setDescription('A monitoring test attribute entry')
jdsuOnmsiMonitoringTestAttributeEntryName = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 5, 1, 3, 1, 1), JdsuOnmsiUtf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiMonitoringTestAttributeEntryName.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiMonitoringTestAttributeEntryName.setDescription('The attribute name. The additional attributes are prefixed with an underscore character to avoid name collision with standard attributes')
jdsuOnmsiMonitoringTestAttributeEntryAdditional = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 5, 1, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiMonitoringTestAttributeEntryAdditional.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiMonitoringTestAttributeEntryAdditional.setDescription('This flag indicates whether the attribute is additional')
jdsuOnmsiMonitoringTestAttributeEntryFindable = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 5, 1, 3, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiMonitoringTestAttributeEntryFindable.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiMonitoringTestAttributeEntryFindable.setDescription('This flag indicates whether the attribute is findable')
jdsuOnmsiMonitoringTestAttributeEntryUpdatable = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 5, 1, 3, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiMonitoringTestAttributeEntryUpdatable.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiMonitoringTestAttributeEntryUpdatable.setDescription('This flag indicates whether the attribute is updatable')
jdsuOnmsiMonitoringTestFunctions = MibIdentifier((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 5, 2))
jdsuOnmsiMonitoringTestGet = MibIdentifier((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 5, 2, 1))
jdsuOnmsiMonitoringTestGetParamInternalKey = MibScalar((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 5, 2, 1, 1), JdsuOnmsiInternalKey()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jdsuOnmsiMonitoringTestGetParamInternalKey.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiMonitoringTestGetParamInternalKey.setDescription('The internal key of the monitoring test to retrieve')
jdsuOnmsiMonitoringTestGetExecute = MibScalar((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 5, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jdsuOnmsiMonitoringTestGetExecute.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiMonitoringTestGetExecute.setDescription('Setting this field to 1 performs the monitoring test retrieval')
jdsuOnmsiMonitoringTestGetError = MibScalar((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 5, 2, 1, 3), JdsuOnmsiUtf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiMonitoringTestGetError.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiMonitoringTestGetError.setDescription('When the function execution fails, this node contains information on the error that occurred.\r\n\t\tThis node is empty when the execution is successful.')
jdsuOnmsiMonitoringTestFind = MibIdentifier((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 5, 2, 2))
jdsuOnmsiMonitoringTestFindParamAttribute = MibScalar((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 5, 2, 2, 1), JdsuOnmsiUtf8String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jdsuOnmsiMonitoringTestFindParamAttribute.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiMonitoringTestFindParamAttribute.setDescription('The attribute of the monitoring test to perform the search on.\r\n\t\tValid attributes for monitoring tests are :\r\n\t\t- linkInternalKey\r\n\t\t- name\r\n\t\tand any additional attribute name')
jdsuOnmsiMonitoringTestFindParamValue = MibScalar((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 5, 2, 2, 2), JdsuOnmsiUtf8String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jdsuOnmsiMonitoringTestFindParamValue.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiMonitoringTestFindParamValue.setDescription('The attribute value to find')
jdsuOnmsiMonitoringTestFindExecute = MibScalar((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 5, 2, 2, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jdsuOnmsiMonitoringTestFindExecute.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiMonitoringTestFindExecute.setDescription('Setting this field to 1 performs the monitoring test find')
jdsuOnmsiMonitoringTestFindError = MibScalar((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 5, 2, 2, 4), JdsuOnmsiUtf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiMonitoringTestFindError.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiMonitoringTestFindError.setDescription('When the function execution fails, this node contains information on the error that occurred.\r\n\t\tThis node is empty when the execution is successful.')
jdsuOnmsiMonitoringTestStartTest = MibIdentifier((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 5, 2, 3))
jdsuOnmsiMonitoringTestStartTestParamInternalKey = MibScalar((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 5, 2, 3, 1), JdsuOnmsiInternalKey()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jdsuOnmsiMonitoringTestStartTestParamInternalKey.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiMonitoringTestStartTestParamInternalKey.setDescription('The internal key of the monitoring test to start')
jdsuOnmsiMonitoringTestStartTestExecute = MibScalar((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 5, 2, 3, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jdsuOnmsiMonitoringTestStartTestExecute.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiMonitoringTestStartTestExecute.setDescription('Setting this field to 1 performs the monitoring test start')
jdsuOnmsiMonitoringTestStartTestError = MibScalar((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 5, 2, 3, 3), JdsuOnmsiUtf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiMonitoringTestStartTestError.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiMonitoringTestStartTestError.setDescription('When the function execution fails, this node contains information on the error that occurred.\r\n\t\tThis node is empty when the execution is successful.')
jdsuOnmsiMonitoringTestAttributeLoad = MibIdentifier((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 5, 2, 4))
jdsuOnmsiMonitoringTestAttributeLoadExecute = MibScalar((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 5, 2, 4, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jdsuOnmsiMonitoringTestAttributeLoadExecute.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiMonitoringTestAttributeLoadExecute.setDescription('Setting this field to 1 performs the jdsuOnmsiMonitoringTestAttributeTable load')
jdsuOnmsiMonitoringTestAttributeLoadError = MibScalar((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 5, 2, 4, 2), JdsuOnmsiUtf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiMonitoringTestAttributeLoadError.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiMonitoringTestAttributeLoadError.setDescription('When the function execution fails, this node contains information on the error that occurred.\r\n\t\tThis node is empty when the execution is successful.')
jdsuOnmsiAlarmService = MibIdentifier((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 6))
jdsuOnmsiAlarmData = MibIdentifier((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 6, 1))
jdsuOnmsiAlarmTypesTable = MibTable((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 6, 1, 1), )
if mibBuilder.loadTexts: jdsuOnmsiAlarmTypesTable.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiAlarmTypesTable.setDescription('This table provides the list of the alarm types')
jdsuOnmsiAlarmTypesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 6, 1, 1, 1), ).setIndexNames((0, "JDSU-ONMSI-MIB", "jdsuOnmsiAlarmTypeName"))
if mibBuilder.loadTexts: jdsuOnmsiAlarmTypesEntry.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiAlarmTypesEntry.setDescription('An alarm type entry')
jdsuOnmsiAlarmTypeName = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 6, 1, 1, 1, 1), JdsuOnmsiUtf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiAlarmTypeName.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiAlarmTypeName.setDescription('The name of the alarm type')
jdsuOnmsiAlarmSpecificProblemsTable = MibTable((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 6, 1, 2), )
if mibBuilder.loadTexts: jdsuOnmsiAlarmSpecificProblemsTable.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiAlarmSpecificProblemsTable.setDescription('This table provides the list of the specific problems')
jdsuOnmsiAlarmSpecificProblemsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 6, 1, 2, 1), ).setIndexNames((0, "JDSU-ONMSI-MIB", "jdsuOnmsiAlarmSpecificProblemName"))
if mibBuilder.loadTexts: jdsuOnmsiAlarmSpecificProblemsEntry.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiAlarmSpecificProblemsEntry.setDescription('An alarm specific problem entry')
jdsuOnmsiAlarmSpecificProblemName = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 6, 1, 2, 1, 1), JdsuOnmsiUtf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiAlarmSpecificProblemName.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiAlarmSpecificProblemName.setDescription('The name of the alarm specific problem')
jdsuOnmsiAlarmEventTable = MibTable((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 6, 1, 3), )
if mibBuilder.loadTexts: jdsuOnmsiAlarmEventTable.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiAlarmEventTable.setDescription('This table contains the standard alarm event data')
jdsuOnmsiAlarmEventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 6, 1, 3, 1), ).setIndexNames((0, "JDSU-ONMSI-MIB", "jdsuOnmsiAlarmEventEntrySequence"))
if mibBuilder.loadTexts: jdsuOnmsiAlarmEventEntry.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiAlarmEventEntry.setDescription('An alarm event entry')
jdsuOnmsiAlarmEventEntrySequence = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 6, 1, 3, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiAlarmEventEntrySequence.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiAlarmEventEntrySequence.setDescription('This is the sequence of the alarm event.\r\n\t\tIt is used for synchronization between ONMSi and the SNMP manager.\r\n\t\tThis sequence number is unique (for each alarm event/manager community/user) and\r\n\t\tthere is no gap between two alarm events, to ensure no alarm event is ever missed.\r\n\t\tA resynchronization will reset the sequence to 1')
jdsuOnmsiAlarmEventEntryEventInternalKey = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 6, 1, 3, 1, 2), JdsuOnmsiInternalKey()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiAlarmEventEntryEventInternalKey.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiAlarmEventEntryEventInternalKey.setDescription('The internal key of the alarm event')
jdsuOnmsiAlarmEventEntryEventType = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 6, 1, 3, 1, 3), JdsuOnmsiAlarmEventType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiAlarmEventEntryEventType.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiAlarmEventEntryEventType.setDescription('The type of the alarm event')
jdsuOnmsiAlarmEventEntryEventClearStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 6, 1, 3, 1, 5), JdsuOnmsiAlarmClearStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiAlarmEventEntryEventClearStatus.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiAlarmEventEntryEventClearStatus.setDescription('The clear status of the alarm event')
jdsuOnmsiAlarmEventEntryEventTime = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 6, 1, 3, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiAlarmEventEntryEventTime.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiAlarmEventEntryEventTime.setDescription('The date/time of the alarm event')
jdsuOnmsiAlarmEventEntryEventAckStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 6, 1, 3, 1, 6), JdsuOnmsiAlarmAckStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiAlarmEventEntryEventAckStatus.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiAlarmEventEntryEventAckStatus.setDescription('The acknowledgement status of the alarm event')
jdsuOnmsiAlarmEventEntryEventPerceivedSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 6, 1, 3, 1, 7), JdsuOnmsiSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiAlarmEventEntryEventPerceivedSeverity.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiAlarmEventEntryEventPerceivedSeverity.setDescription('The perceived severity of the alarm event')
jdsuOnmsiAlarmEventEntryEventProbableCause = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 6, 1, 3, 1, 8), IANAItuProbableCause()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiAlarmEventEntryEventProbableCause.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiAlarmEventEntryEventProbableCause.setDescription('The ITU probable cause of the alarm event (see IANAItuProbableCause)')
jdsuOnmsiAlarmEventEntryEventAdditionalText = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 6, 1, 3, 1, 9), JdsuOnmsiUtf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiAlarmEventEntryEventAdditionalText.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiAlarmEventEntryEventAdditionalText.setDescription('The textual additional information on the alarm event')
jdsuOnmsiAlarmEventEntryEventUserIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 6, 1, 3, 1, 10), JdsuOnmsiUtf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiAlarmEventEntryEventUserIdentifier.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiAlarmEventEntryEventUserIdentifier.setDescription('The user identifier (login), if the alarm event is due to a user action')
jdsuOnmsiAlarmEventEntryEventMonitoringTestSpecificInfos = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 6, 1, 3, 1, 11), JdsuOnmsiUtf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiAlarmEventEntryEventMonitoringTestSpecificInfos.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiAlarmEventEntryEventMonitoringTestSpecificInfos.setDescription('The serialized monitoring test specific info of the alarm event.\r\n\t\tThis Alarm Specific Info describes the point to point monitoring test that detected the problem in a serialized form (key1=value1|key2=value2|...).\r\n\t\tIt will be filled when the alarm is issued after a monitoring test processing.\r\n\t\tIt contains the following keys:\r\n\t\t- internalKey: the internal key of the monitoring test\r\n\t\t- name: the name of the monitoring test\r\n\t\t- firstMarkerDistanceM: the distance of the first marker, in meters\r\n\t\t- lastMarkerDistanceM: the distance of the last marker, in meters\r\n\t\t- det.acqDurationSec: the acquisition duration of the detection reference, in seconds\r\n\t\t- det.pulseNs: the pulse of the detection reference, in ns\r\n\t\t- det.rangeKm: the range of the detection reference, in km\r\n\t\t- det.resolutionCm: the resolution of the detection reference, in cm\r\n\t\t- det.wavelengthNm: the wavelength of the detection reference, in nm\r\n\t\t- det.fiberIndex: the fiber index of the detection reference\r\n\t\t- loc.acqDurationSec: the acquisition duration of the localization reference, in seconds\r\n\t\t- loc.pulseNs: the pulse of the localization reference, in ns\r\n\t\t- loc.rangeKm: the range of the localization reference, in km\r\n\t\t- loc.resolutionCm: the resolution of the localization reference, in cm\r\n\t\t- loc.wavelengthNm: the wavelength of the localization reference, in nm\r\n\t\t- loc.fiberIndex: the fiber index of the localization reference\r\n\t\t- scheduled: this flag indicates whether the monitoring test is periodic or not (true/false)\r\n\t\t- periodical: this flag indicates whether the monitoring test is scheduled or not (true/false)\r\n\t\t- startDate: the date at which the monitoring test scheduling starts, in seconds since January 1, 1970, 00:00:00 GMT\r\n\t\t- frequencyMin: the period of the monitoring test scheduling (if the test is periodic), in minutes')
jdsuOnmsiAlarmEventEntryEventPointToPointSpecificInfos = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 6, 1, 3, 1, 12), JdsuOnmsiUtf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiAlarmEventEntryEventPointToPointSpecificInfos.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiAlarmEventEntryEventPointToPointSpecificInfos.setDescription('The serialized point to point specific info of the alarm event.\r\n\t\tThis Alarm Specific Info contains data on a point to point problem in a serialized form (key1=value1|key2=value2|...).\r\n\t\tIt will be filled when the alarm is issued after a point to point test processing.\r\n\t\tIt contains the following keys:\r\n\t\t- deviationFirstMarkerDb: the deviation at the first marker, in dB (Can be empty if the value in not valid)\r\n\t\t- deviationLinkLossDb: the deviation of the link loss, in dB (Can be empty if the value in not valid)\r\n\t\t- problemConfirmed: this flag indicates whether the problem was confirmed\r\n\t\t- rootCause: indicate what may be the root cause of the problem (ex: CONNECTOR)')
jdsuOnmsiAlarmEventEntryEventAttenuationSpecificInfos = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 6, 1, 3, 1, 13), JdsuOnmsiUtf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiAlarmEventEntryEventAttenuationSpecificInfos.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiAlarmEventEntryEventAttenuationSpecificInfos.setDescription('The serialized attenuation specific info of the alarm event.\r\n\t\tThis Alarm Specific Info describes a point to point attenuation problem in a serialized form (key1=value1|key2=value2|...).\r\n\t\tIt will be filled when the specific problem is ATTENUATION.\r\n\t\tIt contains the following keys:\r\n\t\t- attenuationDb: the value of the attenuation, in dB (Can be empty if the value in not valid)\r\n\t\t- distanceM: the distance of the problem, in meters (Can be empty if the value in not valid)')
jdsuOnmsiAlarmEventEntryEventPeakSpecificInfos = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 6, 1, 3, 1, 14), JdsuOnmsiUtf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiAlarmEventEntryEventPeakSpecificInfos.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiAlarmEventEntryEventPeakSpecificInfos.setDescription('The serialized peak specific info of the alarm event.\r\n\t\tThis Alarm Specific Info describes a point to point peak problem in a serialized form (key1=value1|key2=value2|...).\r\n\t\tIt will be filled when the specific problem is PEAK or NEW_PEAK.\r\n\t\tIt contains the following keys:\r\n\t\tmeasuredBottomDistanceM: the measured distance of the peak bottom, in meters\r\n\t\tmeasuredLevelDb: the measured level of the peak, in dB (Can be empty if the value in not valid)\r\n\t\tmeasuredTopDistanceM: the measured distance of the peak top, in meters\r\n\t\treferenceBottomDistanceM: the reference distance of the peak bottom, in meters\r\n\t\treferenceLevelDb: the reference level of the peak, in dB\r\n\t\t- referenceTopDistanceM: the reference distance of the peak top, in meters')
jdsuOnmsiAlarmEventEntryEventOrlSpecificInfos = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 6, 1, 3, 1, 15), JdsuOnmsiUtf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiAlarmEventEntryEventOrlSpecificInfos.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiAlarmEventEntryEventOrlSpecificInfos.setDescription('The serialized ORL specific info of the alarm event.\r\n\t\tThis Alarm Specific Info describes a point to point ORL problem in a serialized form (key1=value1|key2=value2|...).\r\n\t\tIt will be filled when the specific problem is ORL.\r\n\t\tIt contains the following keys:\r\n\t\t- measuredOrlDb: the measured ORL, in dB (Can be empty if the value in not valid)\r\n\t\t- referenceOrlDb: the reference ORL, in dB')
jdsuOnmsiAlarmEventEntryEventFiberLengthExtensionSpecificInfos = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 6, 1, 3, 1, 16), JdsuOnmsiUtf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiAlarmEventEntryEventFiberLengthExtensionSpecificInfos.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiAlarmEventEntryEventFiberLengthExtensionSpecificInfos.setDescription('The serialized fiber length extension specific info of the alarm event.\r\n\t\tThis Alarm Specific Info describes a point to point fiber length extension problem in a serialized form (key1=value1|key2=value2|...).\r\n\t\tIt will be filled when the specific problem is FIBER_LENGTH_EXTENSION.\r\n\t\tIt contains the following keys:\r\n\t\t- measuredFiberLengthM: the measured fiber length, in meters (Can be empty if the value in not valid)\r\n\t\t- referenceFiberLengthM: the reference fiber length, in meters')
jdsuOnmsiAlarmEventEntryEventLocalizationSpecificInfos = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 6, 1, 3, 1, 17), JdsuOnmsiUtf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiAlarmEventEntryEventLocalizationSpecificInfos.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiAlarmEventEntryEventLocalizationSpecificInfos.setDescription('The serialized localization specific info of the alarm event.\r\n\t\tThis Alarm Specific Info describes a point to point fiber length extension problem in a serialized form (key1=value1|key2=value2|...).\r\n\t\tIt will be filled when the specific problem is FIBER_LENGTH_EXTENSION.\r\n\t\tIt contains the following keys:\r\n\t\t- opticalDistanceFromOriginM: the optical distance between the origin and the point to point problem, in meters\r\n\t\t- primaryLandmarkAfterDistanceM: the distance between the problem and the primary alarm landmark after the problem, in meters\r\n\t\t- primaryLandmarkAfterName: the name of primary alarm landmark after the problem\r\n\t\t- primaryLandmarkAfterDescription: the description of primary alarm landmark after the problem\r\n\t\t- primaryLandmarkBeforeDistanceM: the distance between the problem and the primary alarm landmark before the problem, in meters\r\n\t\t- primaryLandmarkBeforeName: the name of primary alarm landmark before the problem\r\n\t\t- primaryLandmarkBeforeDescription: the description of primary alarm landmark before the problem\r\n\t\t- secondaryLandmarkAfterDistanceM: the distance between the problem and the secondary alarm landmark after the problem, in meters\r\n\t\t- secondaryLandmarkAfterName: the name of secondary alarm landmark after the problem\r\n\t\t- secondaryLandmarkAfterDescription: the description of secondary alarm landmark after the problem\r\n\t\t- secondaryLandmarkBeforeDistanceM: the distance between the problem and the secondary alarm landmark before the problem, in meters\r\n\t\t- secondaryLandmarkBeforeName: the name of secondary alarm landmark before the problem\r\n\t\t- secondaryLandmarkBeforeDescription: the description of secondary alarm landmark before the problem')
jdsuOnmsiAlarmEventEntryAlarmInternalKey = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 6, 1, 3, 1, 18), JdsuOnmsiInternalKey()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiAlarmEventEntryAlarmInternalKey.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiAlarmEventEntryAlarmInternalKey.setDescription('The internal key of the alarm')
jdsuOnmsiAlarmEventEntryAlarmType = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 6, 1, 3, 1, 19), IANAItuEventType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiAlarmEventEntryAlarmType.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiAlarmEventEntryAlarmType.setDescription('The ITU event type of the alarm (see IANAItuEventType)')
jdsuOnmsiAlarmEventEntryAlarmRaisedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 6, 1, 3, 1, 20), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiAlarmEventEntryAlarmRaisedTime.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiAlarmEventEntryAlarmRaisedTime.setDescription('The date/time of alarm creation')
jdsuOnmsiAlarmEventEntryAlarmChangedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 6, 1, 3, 1, 21), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiAlarmEventEntryAlarmChangedTime.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiAlarmEventEntryAlarmChangedTime.setDescription('The date/time of alarm latest update')
jdsuOnmsiAlarmEventEntryAlarmClearStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 6, 1, 3, 1, 22), JdsuOnmsiAlarmClearStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiAlarmEventEntryAlarmClearStatus.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiAlarmEventEntryAlarmClearStatus.setDescription('The clear status of the alarm')
jdsuOnmsiAlarmEventEntryAlarmAckStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 6, 1, 3, 1, 23), JdsuOnmsiAlarmAckStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiAlarmEventEntryAlarmAckStatus.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiAlarmEventEntryAlarmAckStatus.setDescription('The acknowledgement status of the alarm')
jdsuOnmsiAlarmEventEntryAlarmPerceivedSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 6, 1, 3, 1, 24), JdsuOnmsiSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiAlarmEventEntryAlarmPerceivedSeverity.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiAlarmEventEntryAlarmPerceivedSeverity.setDescription('The perceived severity of the alarm')
jdsuOnmsiAlarmEventEntryAlarmSpecificProblem = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 6, 1, 3, 1, 25), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiAlarmEventEntryAlarmSpecificProblem.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiAlarmEventEntryAlarmSpecificProblem.setDescription('The specific problem of the alarm')
jdsuOnmsiAlarmEventEntryAlarmOriginatingEntityKind = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 6, 1, 3, 1, 26), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiAlarmEventEntryAlarmOriginatingEntityKind.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiAlarmEventEntryAlarmOriginatingEntityKind.setDescription('The kind of the entity to which the alarm applies:\r\n\t\t- OTU\r\n\t\t- LINK\r\n\t\t- SECTION\r\n\t\t- SERVER')
jdsuOnmsiAlarmEventEntryAlarmOriginatingEntityInternalKey = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 6, 1, 3, 1, 27), JdsuOnmsiInternalKey()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiAlarmEventEntryAlarmOriginatingEntityInternalKey.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiAlarmEventEntryAlarmOriginatingEntityInternalKey.setDescription('The internal key of the entity to which the alarm applies')
jdsuOnmsiAlarmEventEntryAlarmOriginatingEntityName = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 6, 1, 3, 1, 28), JdsuOnmsiUtf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiAlarmEventEntryAlarmOriginatingEntityName.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiAlarmEventEntryAlarmOriginatingEntityName.setDescription('Tthe name of the entity to which the alarm applies')
jdsuOnmsiAlarmEventEntryAlarmOriginatingEntityOid = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 6, 1, 3, 1, 29), JdsuOnmsiUtf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiAlarmEventEntryAlarmOriginatingEntityOid.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiAlarmEventEntryAlarmOriginatingEntityOid.setDescription('The OID of the entity to which the alarm applies')
jdsuOnmsiAlarmEventEntryAlarmSystemDN = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 6, 1, 3, 1, 30), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiAlarmEventEntryAlarmSystemDN.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiAlarmEventEntryAlarmSystemDN.setDescription('The name of the system that created the alarm')
jdsuOnmsiAlarmEventEntryAlarmProbableCause = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 6, 1, 3, 1, 31), IANAItuProbableCause()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiAlarmEventEntryAlarmProbableCause.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiAlarmEventEntryAlarmProbableCause.setDescription('The ITU probable cause of the alarm (se IANAItuProbableCause)')
jdsuOnmsiAlarmEventEntryAlarmAdditionalText = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 6, 1, 3, 1, 32), JdsuOnmsiUtf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiAlarmEventEntryAlarmAdditionalText.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiAlarmEventEntryAlarmAdditionalText.setDescription('The textual additional information on the alarm')
jdsuOnmsiAlarmEventEntryAlarmMonitoringTestSpecificInfos = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 6, 1, 3, 1, 33), JdsuOnmsiUtf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiAlarmEventEntryAlarmMonitoringTestSpecificInfos.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiAlarmEventEntryAlarmMonitoringTestSpecificInfos.setDescription('The serialized monitoring test specific info of the alarm.\r\n\t\tThis Alarm Specific Info describes the point to point monitoring test that detected the problem in a serialized form (key1=value1|key2=value2|...).\r\n\t\tIt will be filled when the alarm is issued after a monitoring test processing.\r\n\t\tIt contains the following keys:\r\n\t\t- internalKey: the internal key of the monitoring test\r\n\t\t- name: the name of the monitoring test\r\n\t\t- firstMarkerDistanceM: the distance of the first marker, in meters\r\n\t\t- lastMarkerDistanceM: the distance of the last marker, in meters\r\n\t\t- det.acqDurationSec: the acquisition duration of the detection reference, in seconds\r\n\t\t- det.pulseNs: the pulse of the detection reference, in ns\r\n\t\t- det.rangeKm: the range of the detection reference, in km\r\n\t\t- det.resolutionCm: the resolution of the detection reference, in cm\r\n\t\t- det.wavelengthNm: the wavelength of the detection reference, in nm\r\n\t\t- det.fiberIndex: the fiber index of the detection reference\r\n\t\t- loc.acqDurationSec: the acquisition duration of the localization reference, in seconds\r\n\t\t- loc.pulseNs: the pulse of the localization reference, in ns\r\n\t\t- loc.rangeKm: the range of the localization reference, in km\r\n\t\t- loc.resolutionCm: the resolution of the localization reference, in cm\r\n\t\t- loc.wavelengthNm: the wavelength of the localization reference, in nm\r\n\t\t- loc.fiberIndex: the fiber index of the localization reference\r\n\t\t- scheduled: this flag indicates whether the monitoring test is periodic or not (true/false)\r\n\t\t- periodical: this flag indicates whether the monitoring test is scheduled or not (true/false)\r\n\t\t- startDate: the date at which the monitoring test scheduling starts, in seconds since January 1, 1970, 00:00:00 GMT\r\n\t\t- frequencyMin: the period of the monitoring test scheduling (if the test is periodic), in minutes')
jdsuOnmsiAlarmEventEntryAlarmPointToPointSpecificInfos = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 6, 1, 3, 1, 34), JdsuOnmsiUtf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiAlarmEventEntryAlarmPointToPointSpecificInfos.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiAlarmEventEntryAlarmPointToPointSpecificInfos.setDescription('The serialized point to point specific info of the alarm.\r\n\t\tThis Alarm Specific Info contains data on a point to point problem in a serialized form (key1=value1|key2=value2|...).\r\n\t\tIt will be filled when the alarm is issued after a point to point test processing.\r\n\t\tIt contains the following keys:\r\n\t\t- deviationFirstMarkerDb: the deviation at the first marker, in dB (Can be empty if the value in not valid)\r\n\t\t- deviationLinkLossDb: the deviation of the link loss, in dB (Can be empty if the value in not valid)\r\n\t\t- problemConfirmed: this flag indicates whether the problem was confirmed\r\n\t\t- rootCause: indicate what may be the root cause of the problem (ex: CONNECTOR)')
jdsuOnmsiAlarmEventEntryAlarmAttenuationSpecificInfos = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 6, 1, 3, 1, 35), JdsuOnmsiUtf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiAlarmEventEntryAlarmAttenuationSpecificInfos.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiAlarmEventEntryAlarmAttenuationSpecificInfos.setDescription('The serialized attenuation specific info of the alarm.\r\n\t\tThis Alarm Specific Info describes a point to point attenuation problem in a serialized form (key1=value1|key2=value2|...).\r\n\t\tIt will be filled when the specific problem is ATTENUATION.\r\n\t\tIt contains the following keys:\r\n\t\t- attenuationDb: the value of the attenuation, in dB (Can be empty if the value in not valid)\r\n\t\t- distanceM: the distance of the problem, in meters (Can be empty if the value in not valid)')
jdsuOnmsiAlarmEventEntryAlarmPeakSpecificInfos = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 6, 1, 3, 1, 36), JdsuOnmsiUtf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiAlarmEventEntryAlarmPeakSpecificInfos.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiAlarmEventEntryAlarmPeakSpecificInfos.setDescription('The serialized peak specific info of the alarm.\r\n\t\tThis Alarm Specific Info describes a point to point peak problem in a serialized form (key1=value1|key2=value2|...).\r\n\t\tIt will be filled when the specific problem is PEAK or NEW_PEAK.\r\n\t\tIt contains the following keys:\r\n\t\tmeasuredBottomDistanceM: the measured distance of the peak bottom, in meters\r\n\t\tmeasuredLevelDb: the measured level of the peak, in dB (Can be empty if the value in not valid)\r\n\t\tmeasuredTopDistanceM: the measured distance of the peak top, in meters\r\n\t\treferenceBottomDistanceM: the reference distance of the peak bottom, in meters\r\n\t\treferenceLevelDb: the reference level of the peak, in dB\r\n\t\t- referenceTopDistanceM: the reference distance of the peak top, in meters')
jdsuOnmsiAlarmEventEntryAlarmOrlSpecificInfos = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 6, 1, 3, 1, 37), JdsuOnmsiUtf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiAlarmEventEntryAlarmOrlSpecificInfos.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiAlarmEventEntryAlarmOrlSpecificInfos.setDescription('The serialized ORL specific info of the alarm.\r\n\t\tThis Alarm Specific Info describes a point to point ORL problem in a serialized form (key1=value1|key2=value2|...).\r\n\t\tIt will be filled when the specific problem is ORL.\r\n\t\tIt contains the following keys:\r\n\t\t- measuredOrlDb: the measured ORL, in dB (Can be empty if the value in not valid)\r\n\t\t- referenceOrlDb: the reference ORL, in dB')
jdsuOnmsiAlarmEventEntryAlarmFiberLengthExtensionSpecificInfos = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 6, 1, 3, 1, 38), JdsuOnmsiUtf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiAlarmEventEntryAlarmFiberLengthExtensionSpecificInfos.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiAlarmEventEntryAlarmFiberLengthExtensionSpecificInfos.setDescription('The serialized fiber length extension specific info of the alarm.\r\n\t\tThis Alarm Specific Info describes a point to point fiber length extension problem in a serialized form (key1=value1|key2=value2|...).\r\n\t\tIt will be filled when the specific problem is FIBER_LENGTH_EXTENSION.\r\n\t\tIt contains the following keys:\r\n\t\t- measuredFiberLengthM: the measured fiber length, in meters (Can be empty if the value in not valid)\r\n\t\t- referenceFiberLengthM: the reference fiber length, in meters')
jdsuOnmsiAlarmEventEntryAlarmLocalizationSpecificInfos = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 6, 1, 3, 1, 39), JdsuOnmsiUtf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiAlarmEventEntryAlarmLocalizationSpecificInfos.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiAlarmEventEntryAlarmLocalizationSpecificInfos.setDescription('The serialized localization specific info of the alarm.\r\n\t\tThis Alarm Specific Info describes a point to point fiber length extension problem in a serialized form (key1=value1|key2=value2|...).\r\n\t\tIt will be filled when the specific problem is FIBER_LENGTH_EXTENSION.\r\n\t\tIt contains the following keys:\r\n\t\t- opticalDistanceFromOriginM: the optical distance between the origin and the point to point problem, in meters\r\n\t\t- primaryLandmarkAfterDistanceM: the distance between the problem and the primary alarm landmark after the problem, in meters\r\n\t\t- primaryLandmarkAfterName: the name of primary alarm landmark after the problem\r\n\t\t- primaryLandmarkAfterDescription: the description of primary alarm landmark after the problem\r\n\t\t- primaryLandmarkBeforeDistanceM: the distance between the problem and the primary alarm landmark before the problem, in meters\r\n\t\t- primaryLandmarkBeforeName: the name of primary alarm landmark before the problem\r\n\t\t- primaryLandmarkBeforeDescription: the description of primary alarm landmark before the problem\r\n\t\t- secondaryLandmarkAfterDistanceM: the distance between the problem and the secondary alarm landmark after the problem, in meters\r\n\t\t- secondaryLandmarkAfterName: the name of secondary alarm landmark after the problem\r\n\t\t- secondaryLandmarkAfterDescription: the description of secondary alarm landmark after the problem\r\n\t\t- secondaryLandmarkBeforeDistanceM: the distance between the problem and the secondary alarm landmark before the problem, in meters\r\n\t\t- secondaryLandmarkBeforeName: the name of secondary alarm landmark before the problem\r\n\t\t- secondaryLandmarkBeforeDescription: the description of secondary alarm landmark before the problem')
jdsuOnmsiAlarmEventEntryAlarmOriginatingEntity = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 6, 1, 3, 1, 40), JdsuOnmsiUtf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiAlarmEventEntryAlarmOriginatingEntity.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiAlarmEventEntryAlarmOriginatingEntity.setDescription("The serialized entity to which the alarm applies.\r\n\t\tThis field is to provide more information that the kind, name and internal key of the alarm originating entity.\r\n\t\tIt will contain data in a serialized form (key1=value1|key2=value2|...).\r\n\t\tIt contains the following keys:\r\n\t\t- internalKey: the internal key of the entity to which the alarm applies\r\n\t\t- name: the name of the entity to which the alarm applies\r\n\t\t- kind: the kind of the entity to which the alarm applies (see Alarm Originating Entity Kind)\r\n\t\tMoreover, it will contains keys for attributes that are specific to the kind of entity to which the alarm applies:\r\n\t\t- link: see jdsuOnmsiLinkTable (ex: measureEnabled=true|...)\r\n\t\t- OTU: see jdsuOnmsiOtuTable (ex: ipAddress=192.198.1.14|...)\r\n\t\tIt also contains keys for the additional attributes (which start with the underscore character: '_') of the entity to which the alarm applies:\r\n\t\t_additionalAttribute1Name=additionalAttribute1Value|...\r\n\t\tFinally, it may contain keys about contextual data:\r\n\t\t- when the alarm originating entity is a link: the OTU\r\n\t\t- when the alarm originating entity is a section: the OTU and the link\r\n\t\tThese attributes will be prefixed to indicate the contextual object (ex: link._gisId=...|otu.ipAddress=...)")
jdsuOnmsiAlarmEventEntryAlarmAdditionalAttributes = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 6, 1, 3, 1, 51), JdsuOnmsiUtf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiAlarmEventEntryAlarmAdditionalAttributes.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiAlarmEventEntryAlarmAdditionalAttributes.setDescription("It will contain alarm's additional attributes in a serialized form\r\n\t\t(_additionalAttribute1Name=additionalAttribute1Value|_additionalAttribute2Name=additionalAttribute2Name|...).")
jdsuOnmsiAlarmEventEntryEventGpsCoordinatesSpecificInfos = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 6, 1, 3, 1, 41), JdsuOnmsiUtf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiAlarmEventEntryEventGpsCoordinatesSpecificInfos.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiAlarmEventEntryEventGpsCoordinatesSpecificInfos.setDescription('The serialized GPS coordinates specific info of the event.\r\n\t\tThis Alarm Specific Info contains the GPS coordinates of the problem in a serialized form (key1=value1|key2=value2|...).\r\n\t\tYou will get one when the alarm can be geolocalized (such as an attenuation problem on a link using geographical file).\r\n\t\tIt contains the following keys:\r\n\t\t- latitude: the GPS latitude of the problem, in decimal degrees\r\n\t\t- longitude: the GPS longitude of the problem, in decimal degrees')
jdsuOnmsiAlarmEventEntryAlarmGpsCoordinatesSpecificInfos = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 6, 1, 3, 1, 42), JdsuOnmsiUtf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiAlarmEventEntryAlarmGpsCoordinatesSpecificInfos.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiAlarmEventEntryAlarmGpsCoordinatesSpecificInfos.setDescription('The serialized GPS coordinates specific info of the alarm.\r\n\t\tThis Alarm Specific Info contains the GPS coordinates of the problem in a serialized form (key1=value1|key2=value2|...).\r\n\t\tYou will get one when the alarm can be geolocalized (such as an attenuation problem on a link using geographical file).\r\n\t\tIt contains the following keys:\r\n\t\t- latitude: the GPS latitude of the problem, in decimal degrees\r\n\t\t- longitude: the GPS longitude of the problem, in decimal degrees')
jdsuOnmsiAlarmEventEntryEventPonSpecificInfos = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 6, 1, 3, 1, 43), JdsuOnmsiUtf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiAlarmEventEntryEventPonSpecificInfos.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiAlarmEventEntryEventPonSpecificInfos.setDescription('The serialized PON specific info of the event.\r\n\t\tThis Alarm Specific Info contains data on a PON problem in a serialized form (key1=value1|key2=value2|...).\r\n\t\tIt will be filled when the alarm is issued after a PON test processing.\r\n\t\tIt contains the following keys:\r\n\t\t- ponTestInternalKey: the internal key of the PON test\r\n\t\t- peakInAlarmCount: the peak in alarm count\r\n\t\t- newPeakCount: the new peak count\r\n\t\t- peakChangeCount: the peak change count')
jdsuOnmsiAlarmEventEntryAlarmPonSpecificInfos = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 6, 1, 3, 1, 44), JdsuOnmsiUtf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiAlarmEventEntryAlarmPonSpecificInfos.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiAlarmEventEntryAlarmPonSpecificInfos.setDescription('The serialized PON specific info of the alarm.\r\n\t\tThis Alarm Specific Info contains data on a PON problem in a serialized form (key1=value1|key2=value2|...).\r\n\t\tIt will be filled when the alarm is issued after a PON test processing.\r\n\t\tIt contains the following keys:\r\n\t\t- ponTestInternalKey: the internal key of the PON test\r\n\t\t- peakInAlarmCount: the peak in alarm count\r\n\t\t- newPeakCount: the new peak count\r\n\t\t- peakChangeCount: the peak change count')
jdsuOnmsiAlarmEventEntryEventSplitterSpecificInfos = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 6, 1, 3, 1, 45), JdsuOnmsiUtf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiAlarmEventEntryEventSplitterSpecificInfos.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiAlarmEventEntryEventSplitterSpecificInfos.setDescription('The serialized splitter specific info of the event.\r\n\t\tThis Alarm Specific Info contains data on a splitter problem in a serialized form (key1=value1|key2=value2|...).\r\n\t\tIt will be filled when the alarm is issued after a PTP test processing.\r\n\t\tIt contains the following keys:\r\n\t\t- localizationResult: LOCALIZED/NOT_LOCALIZED\r\n\t\t- opticalDistanceFromOriginM: if LOCALIZED, the fault distance from the OTDR\r\n\t\t- opticalDistanceFromLastMarkerM: if LOCALIZED, the fault distance from the last marker\r\n\t\t- peakInAlarmCount: the peak in alarm count\r\n\t\t- peakChangeCount: the peak change count')
jdsuOnmsiAlarmEventEntryAlarmSplitterSpecificInfos = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 6, 1, 3, 1, 46), JdsuOnmsiUtf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiAlarmEventEntryAlarmSplitterSpecificInfos.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiAlarmEventEntryAlarmSplitterSpecificInfos.setDescription('The serialized splitter specific info of the alarm.\r\n\t\tThis Alarm Specific Info contains data on a splitter problem in a serialized form (key1=value1|key2=value2|...).\r\n\t\tIt will be filled when the alarm is issued after a PTP test processing.\r\n\t\tIt contains the following keys:\r\n\t\t- localizationResult: LOCALIZED/NOT_LOCALIZED\r\n\t\t- opticalDistanceFromOriginM: if LOCALIZED, the fault distance from the OTDR\r\n\t\t- opticalDistanceFromLastMarkerM: if LOCALIZED, the fault distance from the last marker\r\n\t\t- peakInAlarmCount: the peak in alarm count\r\n\t\t- peakChangeCount: the peak change count')
jdsuOnmsiAlarmEventEntryEventStrainSpecificInfos = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 6, 1, 3, 1, 47), JdsuOnmsiUtf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiAlarmEventEntryEventStrainSpecificInfos.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiAlarmEventEntryEventStrainSpecificInfos.setDescription('The serialized strain specific info of the event.\r\n\t\tThis Alarm Specific Info contains data on a strain problem in a serialized form (key1=value1|key2=value2|...).\r\n\t\tIt will be filled when the alarm is issued after a sensing test processing.\r\n\t\tIt contains the following keys:\r\n\t\tIf any positive threshold is monitored:\r\n\t\t- positionM.max: the position of the maximum value\r\n\t\tIf any negative threshold is monitored:\r\n\t\t- positionM.min: the position of the minimum value\r\n\t\tIf the positive minMax is monitored:\r\n\t\t- minMax.max.valueUE: contains the positive min/max value, in micro strain\r\n\t\t- minMax.min.valueUE: contains the negative min/max value, in micro strain\r\n\t\tIf the positive minMax is monitored and in alarm:\r\n\t\t- minMax.max.sev: contains the severity of the positive min/max monitoring\r\n\t\t- minMax.min.sev: contains the severity of the negative min/max monitoring\r\n\t\t- minMax.max.startM: the first distance at which the positive min/max threshold was crossed\r\n\t\t- minMax.min.startM: the first distance at which the negative min/max threshold was crossed\r\n\t\t- minMax.max.endM: the last distance at which the positive min/max threshold was crossed\r\n\t\t- minMax.min.endM: the last distance at which the negative min/max threshold was crossed\r\n\t\tIf the positive minMax is monitored:\r\n\t\t- devAvg.ref.valueUE: contains the average value, in micro strain\r\n\t\t- devAvg.max.valueUE: contains the positive diff from average value, in micro strain\r\n\t\t- devAvg.min.valueUE: contains the negative diff from average value, in micro strain\r\n\t\tIf the positive minMax is monitored and in alarm:\r\n\t\t- devAvg.max.sev: contains the severity of the positive diff from average monitoring\r\n\t\t- devAvg.min.sev: contains the severity of the negative diff from average monitoring\r\n\t\t- devAvg.max.startM: the first distance at which the positive diff from average threshold was crossed\r\n\t\t- devAvg.min.startM: the first distance at which the negative diff from average threshold was crossed\r\n\t\t- devAvg.max.endM: the last distance at which the positive diff from average threshold was crossed\r\n\t\t- devAvg.min.endM: the last distance at which the negative diff from average threshold was crossed\r\n\t\tIf the positive minMax is monitored:\r\n\t\t- devMed.ref.valueUE: contains the median value, in micro strain\r\n\t\t- devMed.max.valueUE: contains the positive diff from median value, in micro strain\r\n\t\t- devMed.min.valueUE: contains the negative diff from median value, in micro strain\r\n\t\tIf the positive minMax is monitored and in alarm:\r\n\t\t- devMed.max.sev: contains the severity of the positive diff from median monitoring\r\n\t\t- devMed.min.sev: contains the severity of the negative diff from median monitoring\r\n\t\t- devMed.max.startM: the first distance at which the positive diff from median threshold was crossed\r\n\t\t- devMed.min.startM: the first distance at which the negative diff from median threshold was crossed\r\n\t\t- devMed.max.endM: the last distance at which the positive diff from median threshold was crossed\r\n\t\t- devMed.min.endM: the last distance at which the negative diff from median threshold was crossed')
jdsuOnmsiAlarmEventEntryAlarmStrainSpecificInfos = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 6, 1, 3, 1, 48), JdsuOnmsiUtf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiAlarmEventEntryAlarmStrainSpecificInfos.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiAlarmEventEntryAlarmStrainSpecificInfos.setDescription('The serialized strain specific info of the alarm.\r\n\t\tThis Alarm Specific Info contains data on a strain problem in a serialized form (key1=value1|key2=value2|...).\r\n\t\tIt will be filled when the alarm is issued after a sensing test processing.\r\n\t\tIt contains the following keys:\r\n\t\tIf any positive threshold is monitored:\r\n\t\t- positionM.max: the position of the maximum value\r\n\t\tIf any negative threshold is monitored:\r\n\t\t- positionM.min: the position of the minimum value\r\n\t\tIf the positive minMax is monitored:\r\n\t\t- minMax.max.valueUE: contains the positive min/max value, in micro strain\r\n\t\t- minMax.min.valueUE: contains the negative min/max value, in micro strain\r\n\t\tIf the positive minMax is monitored and in alarm:\r\n\t\t- minMax.max.sev: contains the severity of the positive min/max monitoring\r\n\t\t- minMax.min.sev: contains the severity of the negative min/max monitoring\r\n\t\t- minMax.max.startM: the first distance at which the positive min/max threshold was crossed\r\n\t\t- minMax.min.startM: the first distance at which the negative min/max threshold was crossed\r\n\t\t- minMax.max.endM: the last distance at which the positive min/max threshold was crossed\r\n\t\t- minMax.min.endM: the last distance at which the negative min/max threshold was crossed\r\n\t\tIf the positive minMax is monitored:\r\n\t\t- devAvg.ref.valueUE: contains the average value, in micro strain\r\n\t\t- devAvg.max.valueUE: contains the positive diff from average value, in micro strain\r\n\t\t- devAvg.min.valueUE: contains the negative diff from average value, in micro strain\r\n\t\tIf the positive minMax is monitored and in alarm:\r\n\t\t- devAvg.max.sev: contains the severity of the positive diff from average monitoring\r\n\t\t- devAvg.min.sev: contains the severity of the negative diff from average monitoring\r\n\t\t- devAvg.max.startM: the first distance at which the positive diff from average threshold was crossed\r\n\t\t- devAvg.min.startM: the first distance at which the negative diff from average threshold was crossed\r\n\t\t- devAvg.max.endM: the last distance at which the positive diff from average threshold was crossed\r\n\t\t- devAvg.min.endM: the last distance at which the negative diff from average threshold was crossed\r\n\t\tIf the positive minMax is monitored:\r\n\t\t- devMed.ref.valueUE: contains the median value, in micro strain\r\n\t\t- devMed.max.valueUE: contains the positive diff from median value, in micro strain\r\n\t\t- devMed.min.valueUE: contains the negative diff from median value, in micro strain\r\n\t\tIf the positive minMax is monitored and in alarm:\r\n\t\t- devMed.max.sev: contains the severity of the positive diff from median monitoring\r\n\t\t- devMed.min.sev: contains the severity of the negative diff from median monitoring\r\n\t\t- devMed.max.startM: the first distance at which the positive diff from median threshold was crossed\r\n\t\t- devMed.min.startM: the first distance at which the negative diff from median threshold was crossed\r\n\t\t- devMed.max.endM: the last distance at which the positive diff from median threshold was crossed\r\n\t\t- devMed.min.endM: the last distance at which the negative diff from median threshold was crossed')
jdsuOnmsiAlarmEventEntryEventTemperatureSpecificInfos = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 6, 1, 3, 1, 49), JdsuOnmsiUtf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiAlarmEventEntryEventTemperatureSpecificInfos.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiAlarmEventEntryEventTemperatureSpecificInfos.setDescription('The serialized temperature specific info of the event.\r\n\t\tThis Alarm Specific Info contains data on a temperature problem in a serialized form (key1=value1|key2=value2|...).\r\n\t\tIt will be filled when the alarm is issued after a sensing test processing.\r\n\t\tIt contains the following keys:\r\n\t\tIf any positive threshold is monitored:\r\n\t\t- positionM.max: the position of the maximum value\r\n\t\tIf any negative threshold is monitored:\r\n\t\t- positionM.min: the position of the minimum value\r\n\t\tIf the positive minMax is monitored:\r\n\t\t- minMax.max.valueC: contains the positive min/max value, in degree C\r\n\t\t- minMax.min.valueC: contains the negative min/max value, in degree C\r\n\t\tIf the positive minMax is monitored and in alarm:\r\n\t\t- minMax.max.sev: contains the severity of the positive min/max monitoring\r\n\t\t- minMax.min.sev: contains the severity of the negative min/max monitoring\r\n\t\t- minMax.max.startM: the first distance at which the positive min/max threshold was crossed\r\n\t\t- minMax.min.startM: the first distance at which the negative min/max threshold was crossed\r\n\t\t- minMax.max.endM: the last distance at which the positive min/max threshold was crossed\r\n\t\t- minMax.min.endM: the last distance at which the negative min/max threshold was crossed\r\n\t\tIf the positive minMax is monitored:\r\n\t\t- devAvg.ref.valueC: contains the average value, in degree C\r\n\t\t- devAvg.max.valueC: contains the positive diff from average value, in degree C\r\n\t\t- devAvg.min.valueC: contains the negative diff from average value, in degree C\r\n\t\tIf the positive minMax is monitored and in alarm:\r\n\t\t- devAvg.max.sev: contains the severity of the positive diff from average monitoring\r\n\t\t- devAvg.min.sev: contains the severity of the negative diff from average monitoring\r\n\t\t- devAvg.max.startM: the first distance at which the positive diff from average threshold was crossed\r\n\t\t- devAvg.min.startM: the first distance at which the negative diff from average threshold was crossed\r\n\t\t- devAvg.max.endM: the last distance at which the positive diff from average threshold was crossed\r\n\t\t- devAvg.min.endM: the last distance at which the negative diff from average threshold was crossed\r\n\t\tIf the positive minMax is monitored:\r\n\t\t- devMed.ref.valueC: contains the median value, in degree C\r\n\t\t- devMed.max.valueC: contains the positive diff from median value, in degree C\r\n\t\t- devMed.min.valueC: contains the negative diff from median value, in degree C\r\n\t\tIf the positive minMax is monitored and in alarm:\r\n\t\t- devMed.max.sev: contains the severity of the positive diff from median monitoring\r\n\t\t- devMed.min.sev: contains the severity of the negative diff from median monitoring\r\n\t\t- devMed.max.startM: the first distance at which the positive diff from median threshold was crossed\r\n\t\t- devMed.min.startM: the first distance at which the negative diff from median threshold was crossed\r\n\t\t- devMed.max.endM: the last distance at which the positive diff from median threshold was crossed\r\n\t\t- devMed.min.endM: the last distance at which the negative diff from median threshold was crossed')
jdsuOnmsiAlarmEventEntryAlarmTemperatureSpecificInfos = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 6, 1, 3, 1, 50), JdsuOnmsiUtf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiAlarmEventEntryAlarmTemperatureSpecificInfos.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiAlarmEventEntryAlarmTemperatureSpecificInfos.setDescription('The serialized temperature specific info of the alarm.\r\n\t\tThis Alarm Specific Info contains data on a temperature problem in a serialized form (key1=value1|key2=value2|...).\r\n\t\tIt will be filled when the alarm is issued after a sensing test processing.\r\n\t\tIt contains the following keys:\r\n\t\tIf any positive threshold is monitored:\r\n\t\t- positionM.max: the position of the maximum value\r\n\t\tIf any negative threshold is monitored:\r\n\t\t- positionM.min: the position of the minimum value\r\n\t\tIf the positive minMax is monitored:\r\n\t\t- minMax.max.valueC: contains the positive min/max value, in degree C\r\n\t\t- minMax.min.valueC: contains the negative min/max value, in degree C\r\n\t\tIf the positive minMax is monitored and in alarm:\r\n\t\t- minMax.max.sev: contains the severity of the positive min/max monitoring\r\n\t\t- minMax.min.sev: contains the severity of the negative min/max monitoring\r\n\t\t- minMax.max.startM: the first distance at which the positive min/max threshold was crossed\r\n\t\t- minMax.min.startM: the first distance at which the negative min/max threshold was crossed\r\n\t\t- minMax.max.endM: the last distance at which the positive min/max threshold was crossed\r\n\t\t- minMax.min.endM: the last distance at which the negative min/max threshold was crossed\r\n\t\tIf the positive minMax is monitored:\r\n\t\t- devAvg.ref.valueC: contains the average value, in degree C\r\n\t\t- devAvg.max.valueC: contains the positive diff from average value, in degree C\r\n\t\t- devAvg.min.valueC: contains the negative diff from average value, in degree C\r\n\t\tIf the positive minMax is monitored and in alarm:\r\n\t\t- devAvg.max.sev: contains the severity of the positive diff from average monitoring\r\n\t\t- devAvg.min.sev: contains the severity of the negative diff from average monitoring\r\n\t\t- devAvg.max.startM: the first distance at which the positive diff from average threshold was crossed\r\n\t\t- devAvg.min.startM: the first distance at which the negative diff from average threshold was crossed\r\n\t\t- devAvg.max.endM: the last distance at which the positive diff from average threshold was crossed\r\n\t\t- devAvg.min.endM: the last distance at which the negative diff from average threshold was crossed\r\n\t\tIf the positive minMax is monitored:\r\n\t\t- devMed.ref.valueC: contains the median value, in degree C\r\n\t\t- devMed.max.valueC: contains the positive diff from median value, in degree C\r\n\t\t- devMed.min.valueC: contains the negative diff from median value, in degree C\r\n\t\tIf the positive minMax is monitored and in alarm:\r\n\t\t- devMed.max.sev: contains the severity of the positive diff from median monitoring\r\n\t\t- devMed.min.sev: contains the severity of the negative diff from median monitoring\r\n\t\t- devMed.max.startM: the first distance at which the positive diff from median threshold was crossed\r\n\t\t- devMed.min.startM: the first distance at which the negative diff from median threshold was crossed\r\n\t\t- devMed.max.endM: the last distance at which the positive diff from median threshold was crossed\r\n\t\t- devMed.min.endM: the last distance at which the negative diff from median threshold was crossed')
jdsuOnmsiAlarmSplitterPeakTable = MibTable((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 6, 1, 4), )
if mibBuilder.loadTexts: jdsuOnmsiAlarmSplitterPeakTable.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiAlarmSplitterPeakTable.setDescription('This table contains peak details for a splitter fault. Load it with jdsuOnmsiAlarmSplitterPeakLoad')
jdsuOnmsiAlarmSplitterPeakEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 6, 1, 4, 1), ).setIndexNames((0, "JDSU-ONMSI-MIB", "jdsuOnmsiAlarmSplitterPeakEntryInternalKey"))
if mibBuilder.loadTexts: jdsuOnmsiAlarmSplitterPeakEntry.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiAlarmSplitterPeakEntry.setDescription('')
jdsuOnmsiAlarmSplitterPeakEntryInternalKey = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 6, 1, 4, 1, 1), JdsuOnmsiInternalKey()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiAlarmSplitterPeakEntryInternalKey.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiAlarmSplitterPeakEntryInternalKey.setDescription('The peak internal key')
jdsuOnmsiAlarmSplitterPeakEntryName = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 6, 1, 4, 1, 2), JdsuOnmsiUtf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiAlarmSplitterPeakEntryName.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiAlarmSplitterPeakEntryName.setDescription('The peak name')
jdsuOnmsiAlarmSplitterPeakEntryPerceivedSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 6, 1, 4, 1, 3), JdsuOnmsiSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiAlarmSplitterPeakEntryPerceivedSeverity.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiAlarmSplitterPeakEntryPerceivedSeverity.setDescription('The severity of the peak')
jdsuOnmsiAlarmSplitterPeakEntryPreviousSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 6, 1, 4, 1, 4), JdsuOnmsiSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiAlarmSplitterPeakEntryPreviousSeverity.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiAlarmSplitterPeakEntryPreviousSeverity.setDescription('The previous severity of the peak')
jdsuOnmsiAlarmSplitterPeakEntryReferenceBottomDistance = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 6, 1, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiAlarmSplitterPeakEntryReferenceBottomDistance.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiAlarmSplitterPeakEntryReferenceBottomDistance.setDescription("The distance of the reference peak's bottom\r\n\t\tUnit : millimeters")
jdsuOnmsiAlarmSplitterPeakEntryReferenceTopDistance = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 6, 1, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiAlarmSplitterPeakEntryReferenceTopDistance.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiAlarmSplitterPeakEntryReferenceTopDistance.setDescription("The distance of the reference peak's top\r\n\t\tUnit : millimeters")
jdsuOnmsiAlarmSplitterPeakEntryReferenceLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 6, 1, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiAlarmSplitterPeakEntryReferenceLevel.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiAlarmSplitterPeakEntryReferenceLevel.setDescription('The level of the reference peak\r\n\t\tUnit : dB / 100')
jdsuOnmsiAlarmSplitterPeakEntryPeakMeasurementValid = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 6, 1, 4, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiAlarmSplitterPeakEntryPeakMeasurementValid.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiAlarmSplitterPeakEntryPeakMeasurementValid.setDescription('Whether the peak measurement is valid')
jdsuOnmsiAlarmSplitterPeakEntryMeasuredBottomDistance = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 6, 1, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiAlarmSplitterPeakEntryMeasuredBottomDistance.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiAlarmSplitterPeakEntryMeasuredBottomDistance.setDescription("The distance of the measured peak's bottom\r\n\t\tUnit : millimeters")
jdsuOnmsiAlarmSplitterPeakEntryMeasuredTopDistance = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 6, 1, 4, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiAlarmSplitterPeakEntryMeasuredTopDistance.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiAlarmSplitterPeakEntryMeasuredTopDistance.setDescription("The distance of the measured peak's top\r\n\t\tUnit : millimeters")
jdsuOnmsiAlarmSplitterPeakEntryMeasuredLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 6, 1, 4, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiAlarmSplitterPeakEntryMeasuredLevel.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiAlarmSplitterPeakEntryMeasuredLevel.setDescription('The level of the measured peak\r\n\t\tUnit : dB / 100')
jdsuOnmsiAlarmFunctions = MibIdentifier((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 6, 2))
jdsuOnmsiAlarmAck = MibIdentifier((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 6, 2, 1))
jdsuOnmsiAlarmAckParamInternalKey = MibScalar((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 6, 2, 1, 1), JdsuOnmsiInternalKey()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jdsuOnmsiAlarmAckParamInternalKey.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiAlarmAckParamInternalKey.setDescription('The internal key of the alarm to acknowledge')
jdsuOnmsiAlarmAckExecute = MibScalar((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 6, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jdsuOnmsiAlarmAckExecute.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiAlarmAckExecute.setDescription('Setting this field to 1 performs the alarm acknowledgement')
jdsuOnmsiAlarmAckError = MibScalar((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 6, 2, 1, 3), JdsuOnmsiUtf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiAlarmAckError.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiAlarmAckError.setDescription('When the function execution fails, this node contains information on the error that occurred.\r\n\t\tThis node is empty when the execution is successful.')
jdsuOnmsiAlarmUnAck = MibIdentifier((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 6, 2, 2))
jdsuOnmsiAlarmUnAckParamInternalKey = MibScalar((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 6, 2, 2, 1), JdsuOnmsiInternalKey()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jdsuOnmsiAlarmUnAckParamInternalKey.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiAlarmUnAckParamInternalKey.setDescription('The internal key of the alarm to unacknowledge')
jdsuOnmsiAlarmUnAckExecute = MibScalar((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 6, 2, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jdsuOnmsiAlarmUnAckExecute.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiAlarmUnAckExecute.setDescription('Setting this field to 1 performs the alarm unacknowledgement')
jdsuOnmsiAlarmUnAckError = MibScalar((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 6, 2, 2, 3), JdsuOnmsiUtf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiAlarmUnAckError.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiAlarmUnAckError.setDescription('When the function execution fails, this node contains information on the error that occurred.\r\n\t\tThis node is empty when the execution is successful.')
jdsuOnmsiAlarmClear = MibIdentifier((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 6, 2, 3))
jdsuOnmsiAlarmClearParamInternalKey = MibScalar((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 6, 2, 3, 1), JdsuOnmsiInternalKey()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jdsuOnmsiAlarmClearParamInternalKey.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiAlarmClearParamInternalKey.setDescription('The internal key of the alarm to clear')
jdsuOnmsiAlarmClearExecute = MibScalar((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 6, 2, 3, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jdsuOnmsiAlarmClearExecute.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiAlarmClearExecute.setDescription('Setting this field to 1 performs the alarm clear')
jdsuOnmsiAlarmClearError = MibScalar((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 6, 2, 3, 3), JdsuOnmsiUtf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiAlarmClearError.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiAlarmClearError.setDescription('When the function execution fails, this node contains information on the error that occurred.\r\n\t\tThis node is empty when the execution is successful.')
jdsuOnmsiAlarmUnClear = MibIdentifier((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 6, 2, 4))
jdsuOnmsiAlarmUnClearParamInternalKey = MibScalar((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 6, 2, 4, 1), JdsuOnmsiInternalKey()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jdsuOnmsiAlarmUnClearParamInternalKey.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiAlarmUnClearParamInternalKey.setDescription('The internal key of the alarm to unclear')
jdsuOnmsiAlarmUnClearExecute = MibScalar((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 6, 2, 4, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jdsuOnmsiAlarmUnClearExecute.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiAlarmUnClearExecute.setDescription('Setting this field to 1 performs the alarm unclear')
jdsuOnmsiAlarmUnClearError = MibScalar((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 6, 2, 4, 3), JdsuOnmsiUtf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiAlarmUnClearError.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiAlarmUnClearError.setDescription('When the function execution fails, this node contains information on the error that occurred.\r\n\t\tThis node is empty when the execution is successful.')
jdsuOnmsiAlarmResendEvents = MibIdentifier((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 6, 2, 5))
jdsuOnmsiAlarmResendEventsParamSequence = MibScalar((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 6, 2, 5, 1), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jdsuOnmsiAlarmResendEventsParamSequence.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiAlarmResendEventsParamSequence.setDescription('The sequence number of the first jdsuOnmsiAlarmEventTrap to resend')
jdsuOnmsiAlarmResendEventsExecute = MibScalar((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 6, 2, 5, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jdsuOnmsiAlarmResendEventsExecute.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiAlarmResendEventsExecute.setDescription('Setting this field to 1 performs the trap resend')
jdsuOnmsiAlarmResendEventsError = MibScalar((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 6, 2, 5, 3), JdsuOnmsiUtf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiAlarmResendEventsError.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiAlarmResendEventsError.setDescription('When the function execution fails, this node contains information on the error that occurred.\r\n\t\tThis node is empty when the execution is successful.')
jdsuOnmsiAlarmResynchronize = MibIdentifier((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 6, 2, 6))
jdsuOnmsiAlarmResynchronizeExecute = MibScalar((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 6, 2, 6, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jdsuOnmsiAlarmResynchronizeExecute.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiAlarmResynchronizeExecute.setDescription('Setting this field to 1 performs the alarm resynchronization')
jdsuOnmsiAlarmResynchronizeError = MibScalar((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 6, 2, 6, 2), JdsuOnmsiUtf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiAlarmResynchronizeError.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiAlarmResynchronizeError.setDescription('When the function execution fails, this node contains information on the error that occurred.\r\n\t\tThis node is empty when the execution is successful.')
jdsuOnmsiAlarmSplitterPeakLoad = MibIdentifier((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 6, 2, 7))
jdsuOnmsiAlarmSplitterPeakLoadExecute = MibScalar((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 6, 2, 7, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jdsuOnmsiAlarmSplitterPeakLoadExecute.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiAlarmSplitterPeakLoadExecute.setDescription('Setting this field to 1 performs the splitter peak table load')
jdsuOnmsiAlarmSplitterPeakLoadParamEventInternalKey = MibScalar((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 6, 2, 7, 1), JdsuOnmsiInternalKey()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jdsuOnmsiAlarmSplitterPeakLoadParamEventInternalKey.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiAlarmSplitterPeakLoadParamEventInternalKey.setDescription('The internal key of the event for which the splitter peak should be loaded')
jdsuOnmsiAlarmSplitterPeakLoadError = MibScalar((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 6, 2, 7, 3), JdsuOnmsiUtf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiAlarmSplitterPeakLoadError.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiAlarmSplitterPeakLoadError.setDescription('When the function execution fails, this node contains information on the error that occurred.\r\n\t\tThis node is empty when the execution is successful.')
jdsuOnmsiOtuService = MibIdentifier((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 7))
jdsuOnmsiOtuData = MibIdentifier((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 7, 1))
jdsuOnmsiOtuTable = MibTable((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 7, 1, 1), )
if mibBuilder.loadTexts: jdsuOnmsiOtuTable.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiOtuTable.setDescription('This table contains the standard OTU data')
jdsuOnmsiOtuEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 7, 1, 1, 1), ).setIndexNames((0, "JDSU-ONMSI-MIB", "jdsuOnmsiOtuEntryInternalKey"))
if mibBuilder.loadTexts: jdsuOnmsiOtuEntry.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiOtuEntry.setDescription('An OTU entry')
jdsuOnmsiOtuEntryInternalKey = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 7, 1, 1, 1, 1), JdsuOnmsiInternalKey()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiOtuEntryInternalKey.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiOtuEntryInternalKey.setDescription('The internal key of the OTU')
jdsuOnmsiOtuEntryName = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 7, 1, 1, 1, 2), JdsuOnmsiUtf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiOtuEntryName.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiOtuEntryName.setDescription('The name of the OTU')
jdsuOnmsiOtuEntryDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 7, 1, 1, 1, 3), JdsuOnmsiUtf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiOtuEntryDescription.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiOtuEntryDescription.setDescription('The description of the OTU')
jdsuOnmsiOtuEntryIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 7, 1, 1, 1, 4), JdsuOnmsiUtf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiOtuEntryIpAddress.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiOtuEntryIpAddress.setDescription('The IP address of hostname of the OTU')
jdsuOnmsiOtuEntryDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 7, 1, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiOtuEntryDeviceName.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiOtuEntryDeviceName.setDescription("The device name of the OTU ('OTU 8000', 'OTU 8000E', ...)")
jdsuOnmsiOtuEntrySerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 7, 1, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiOtuEntrySerialNumber.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiOtuEntrySerialNumber.setDescription('The serial number of the OTU')
jdsuOnmsiOtuEntrySoftwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 7, 1, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiOtuEntrySoftwareVersion.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiOtuEntrySoftwareVersion.setDescription('The software version of the OTU')
jdsuOnmsiOtuEntryCentralOfficeInternalKey = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 7, 1, 1, 1, 8), JdsuOnmsiInternalKey()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiOtuEntryCentralOfficeInternalKey.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiOtuEntryCentralOfficeInternalKey.setDescription('The internal key of the central office associated to the OTU')
jdsuOnmsiOtuEntrySeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 7, 1, 1, 1, 9), JdsuOnmsiSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiOtuEntrySeverity.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiOtuEntrySeverity.setDescription('The current severity of the OTU')
jdsuOnmsiOtuAdditionalAttributeTable = MibTable((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 7, 1, 2), )
if mibBuilder.loadTexts: jdsuOnmsiOtuAdditionalAttributeTable.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiOtuAdditionalAttributeTable.setDescription('This table contains the additional attributes on OTUs')
jdsuOnmsiOtuAdditionalAttributeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 7, 1, 2, 1), ).setIndexNames((0, "JDSU-ONMSI-MIB", "jdsuOnmsiOtuAdditionalAttributeEntryInternalKey"), (0, "JDSU-ONMSI-MIB", "jdsuOnmsiOtuAdditionalAttributeEntryName"))
if mibBuilder.loadTexts: jdsuOnmsiOtuAdditionalAttributeEntry.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiOtuAdditionalAttributeEntry.setDescription('An OTU additional attribute entry')
jdsuOnmsiOtuAdditionalAttributeEntryInternalKey = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 7, 1, 2, 1, 1), JdsuOnmsiInternalKey()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiOtuAdditionalAttributeEntryInternalKey.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiOtuAdditionalAttributeEntryInternalKey.setDescription('The internal key of the OTU')
jdsuOnmsiOtuAdditionalAttributeEntryName = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 7, 1, 2, 1, 2), JdsuOnmsiUtf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiOtuAdditionalAttributeEntryName.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiOtuAdditionalAttributeEntryName.setDescription('The additional attribute name')
jdsuOnmsiOtuAdditionalAttributeEntryValue = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 7, 1, 2, 1, 3), JdsuOnmsiUtf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiOtuAdditionalAttributeEntryValue.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiOtuAdditionalAttributeEntryValue.setDescription('The additional attribute value')
jdsuOnmsiOtuAttributeTable = MibTable((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 7, 1, 3), )
if mibBuilder.loadTexts: jdsuOnmsiOtuAttributeTable.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiOtuAttributeTable.setDescription('This table contains the descriptions of noticeable OTU attributes')
jdsuOnmsiOtuAttributeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 7, 1, 3, 1), ).setIndexNames((0, "JDSU-ONMSI-MIB", "jdsuOnmsiOtuAttributeEntryName"))
if mibBuilder.loadTexts: jdsuOnmsiOtuAttributeEntry.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiOtuAttributeEntry.setDescription('An OTU attribute entry')
jdsuOnmsiOtuAttributeEntryName = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 7, 1, 3, 1, 1), JdsuOnmsiUtf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiOtuAttributeEntryName.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiOtuAttributeEntryName.setDescription('The attribute name. The additional attributes are prefixed with an underscore character to avoid name collision with standard attributes')
jdsuOnmsiOtuAttributeEntryAdditional = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 7, 1, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiOtuAttributeEntryAdditional.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiOtuAttributeEntryAdditional.setDescription('This flag indicates whether the attribute is additional')
jdsuOnmsiOtuAttributeEntryFindable = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 7, 1, 3, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiOtuAttributeEntryFindable.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiOtuAttributeEntryFindable.setDescription('This flag indicates whether the attribute is findable')
jdsuOnmsiOtuAttributeEntryUpdatable = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 7, 1, 3, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiOtuAttributeEntryUpdatable.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiOtuAttributeEntryUpdatable.setDescription('This flag indicates whether the attribute is updatable')
jdsuOnmsiOtuOtdrTable = MibTable((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 7, 1, 4), )
if mibBuilder.loadTexts: jdsuOnmsiOtuOtdrTable.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiOtuOtdrTable.setDescription('This table contains the data on the OTDR modules of OTUs')
jdsuOnmsiOtuOtdrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 7, 1, 4, 1), ).setIndexNames((0, "JDSU-ONMSI-MIB", "jdsuOnmsiOtuOtdrEntryInternalKey"))
if mibBuilder.loadTexts: jdsuOnmsiOtuOtdrEntry.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiOtuOtdrEntry.setDescription('An OTDR module entry')
jdsuOnmsiOtuOtdrEntryInternalKey = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 7, 1, 4, 1, 1), JdsuOnmsiInternalKey()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiOtuOtdrEntryInternalKey.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiOtuOtdrEntryInternalKey.setDescription('The internal key of the OTDR module')
jdsuOnmsiOtuOtdrEntryOtuInternalKey = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 7, 1, 4, 1, 2), JdsuOnmsiInternalKey()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiOtuOtdrEntryOtuInternalKey.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiOtuOtdrEntryOtuInternalKey.setDescription('The internal key of the OTU to which the OTDR module belongs')
jdsuOnmsiOtuOtdrEntryPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 7, 1, 4, 1, 3), JdsuOnmsiOtdrPosition()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiOtuOtdrEntryPosition.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiOtuOtdrEntryPosition.setDescription('The position of the OTDR module in the OTU, as a JdsuOnmsiOtdrPosition:\r\n\t\t1: top\r\n\t\t2: bottom')
jdsuOnmsiOtuOtdrEntryType = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 7, 1, 4, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiOtuOtdrEntryType.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiOtuOtdrEntryType.setDescription("The type of OTDR module (ex: '8117R VLR')")
jdsuOnmsiOtuOtdrEntrySerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 7, 1, 4, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiOtuOtdrEntrySerialNumber.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiOtuOtdrEntrySerialNumber.setDescription('The serial number of the OTDR module')
jdsuOnmsiOtuOtdrEntryWavelengths = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 7, 1, 4, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiOtuOtdrEntryWavelengths.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiOtuOtdrEntryWavelengths.setDescription("The list of wavelengths supported by the OTDR module (ex: '1550, 1625')")
jdsuOnmsiOtuSwitchTable = MibTable((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 7, 1, 5), )
if mibBuilder.loadTexts: jdsuOnmsiOtuSwitchTable.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiOtuSwitchTable.setDescription('This table contains the data on the switches of OTUs')
jdsuOnmsiOtuSwitchEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 7, 1, 5, 1), ).setIndexNames((0, "JDSU-ONMSI-MIB", "jdsuOnmsiOtuSwitchEntryInternalKey"))
if mibBuilder.loadTexts: jdsuOnmsiOtuSwitchEntry.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiOtuSwitchEntry.setDescription('A switch entry')
jdsuOnmsiOtuSwitchEntryInternalKey = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 7, 1, 5, 1, 1), JdsuOnmsiInternalKey()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiOtuSwitchEntryInternalKey.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiOtuSwitchEntryInternalKey.setDescription('The internal key of the switch')
jdsuOnmsiOtuSwitchEntryOtuInternalKey = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 7, 1, 5, 1, 2), JdsuOnmsiInternalKey()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiOtuSwitchEntryOtuInternalKey.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiOtuSwitchEntryOtuInternalKey.setDescription('The internal key of the OTU to which the switch belongs')
jdsuOnmsiOtuSwitchEntryName = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 7, 1, 5, 1, 3), JdsuOnmsiUtf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiOtuSwitchEntryName.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiOtuSwitchEntryName.setDescription('The name of the switch')
jdsuOnmsiOtuSwitchEntryRemote = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 7, 1, 5, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiOtuSwitchEntryRemote.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiOtuSwitchEntryRemote.setDescription('This flag indicates whether the switch is remote')
jdsuOnmsiOtuSwitchEntryPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 7, 1, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiOtuSwitchEntryPosition.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiOtuSwitchEntryPosition.setDescription('The position of the switch in the OTU')
jdsuOnmsiOtuSwitchEntryInputs = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 7, 1, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiOtuSwitchEntryInputs.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiOtuSwitchEntryInputs.setDescription('The switch input count')
jdsuOnmsiOtuSwitchEntryOutputs = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 7, 1, 5, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiOtuSwitchEntryOutputs.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiOtuSwitchEntryOutputs.setDescription('The switch output count')
jdsuOnmsiOtuPortTable = MibTable((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 7, 1, 6), )
if mibBuilder.loadTexts: jdsuOnmsiOtuPortTable.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiOtuPortTable.setDescription('This table contains the data on the ports of OTUs')
jdsuOnmsiOtuPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 7, 1, 6, 1), ).setIndexNames((0, "JDSU-ONMSI-MIB", "jdsuOnmsiOtuPortEntryInternalKey"))
if mibBuilder.loadTexts: jdsuOnmsiOtuPortEntry.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiOtuPortEntry.setDescription('A port entry')
jdsuOnmsiOtuPortEntryInternalKey = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 7, 1, 6, 1, 1), JdsuOnmsiInternalKey()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiOtuPortEntryInternalKey.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiOtuPortEntryInternalKey.setDescription('The internal key of the OTU to which the port belongs')
jdsuOnmsiOtuPortEntryOtuInternalKey = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 7, 1, 6, 1, 2), JdsuOnmsiInternalKey()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiOtuPortEntryOtuInternalKey.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiOtuPortEntryOtuInternalKey.setDescription('The internal key of the OTU to which the port belongs')
jdsuOnmsiOtuPortEntryModuleInternalKey = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 7, 1, 6, 1, 3), JdsuOnmsiInternalKey()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiOtuPortEntryModuleInternalKey.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiOtuPortEntryModuleInternalKey.setDescription('The internal key of the module (which may be a jdsuOnmsiOtuSwitchEntryInternalKey or a jdsuOnmsiOtuOtdrEntryInternalKey) to which the port belongs.')
jdsuOnmsiOtuPortEntryPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 7, 1, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiOtuPortEntryPosition.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiOtuPortEntryPosition.setDescription('The output number of the port')
jdsuOnmsiOtuPortEntryPonInternalKey = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 7, 1, 6, 1, 5), JdsuOnmsiInternalKey()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiOtuPortEntryPonInternalKey.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiOtuPortEntryPonInternalKey.setDescription('The internal key of the PON associated to the port')
jdsuOnmsiOtuPortEntryLinkInternalKey = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 7, 1, 6, 1, 6), JdsuOnmsiInternalKey()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiOtuPortEntryLinkInternalKey.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiOtuPortEntryLinkInternalKey.setDescription('The internal key of the link associated to the port')
jdsuOnmsiOtuFunctions = MibIdentifier((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 7, 2))
jdsuOnmsiOtuGet = MibIdentifier((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 7, 2, 1))
jdsuOnmsiOtuGetParamInternalKey = MibScalar((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 7, 2, 1, 1), JdsuOnmsiInternalKey()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jdsuOnmsiOtuGetParamInternalKey.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiOtuGetParamInternalKey.setDescription('The internal key of the OTU to retrieve')
jdsuOnmsiOtuGetExecute = MibScalar((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 7, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jdsuOnmsiOtuGetExecute.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiOtuGetExecute.setDescription('Setting this field to 1 performs the OTU retrieval')
jdsuOnmsiOtuGetError = MibScalar((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 7, 2, 1, 3), JdsuOnmsiUtf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiOtuGetError.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiOtuGetError.setDescription('When the function execution fails, this node contains information on the error that occurred.\r\n\t\tThis node is empty when the execution is successful.')
jdsuOnmsiOtuFind = MibIdentifier((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 7, 2, 2))
jdsuOnmsiOtuFindParamAttribute = MibScalar((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 7, 2, 2, 1), JdsuOnmsiUtf8String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jdsuOnmsiOtuFindParamAttribute.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiOtuFindParamAttribute.setDescription('The name of the OTU attribute to perform the search on.\r\n\t\tValid attributes are :\r\n\t\t- name\r\n\t\t- ipAddress\r\n\t\t- serialNumber\r\n\t\t- centralOfficeInternalKey\r\n\t\tand any additional attribute name')
jdsuOnmsiOtuFindParamValue = MibScalar((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 7, 2, 2, 2), JdsuOnmsiUtf8String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jdsuOnmsiOtuFindParamValue.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiOtuFindParamValue.setDescription('The attribute value to find')
jdsuOnmsiOtuFindExecute = MibScalar((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 7, 2, 2, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jdsuOnmsiOtuFindExecute.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiOtuFindExecute.setDescription('Setting this field to 1 performs the OTU find')
jdsuOnmsiOtuFindError = MibScalar((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 7, 2, 2, 4), JdsuOnmsiUtf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiOtuFindError.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiOtuFindError.setDescription('When the function execution fails, this node contains information on the error that occurred.\r\n\t\tThis node is empty when the execution is successful.')
jdsuOnmsiOtuAttributeLoad = MibIdentifier((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 7, 2, 3))
jdsuOnmsiOtuAttributeLoadExecute = MibScalar((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 7, 2, 3, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jdsuOnmsiOtuAttributeLoadExecute.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiOtuAttributeLoadExecute.setDescription('Setting this field to 1 performs the jdsuOnmsiOtuAttributeTable load')
jdsuOnmsiOtuAttributeLoadError = MibScalar((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 7, 2, 3, 2), JdsuOnmsiUtf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiOtuAttributeLoadError.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiOtuAttributeLoadError.setDescription('When the function execution fails, this node contains information on the error that occurred.\r\n\t\tThis node is empty when the execution is successful.')
jdsuOnmsiOtuGetPorts = MibIdentifier((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 7, 2, 4))
jdsuOnmsiOtuGetPortsParamInternalKey = MibScalar((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 7, 2, 4, 1), JdsuOnmsiInternalKey()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jdsuOnmsiOtuGetPortsParamInternalKey.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiOtuGetPortsParamInternalKey.setDescription('The internal key of the OTU to retrieve ports from')
jdsuOnmsiOtuGetPortsExecute = MibScalar((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 7, 2, 4, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jdsuOnmsiOtuGetPortsExecute.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiOtuGetPortsExecute.setDescription('Setting this field to 1 performs the port retrieval')
jdsuOnmsiOtuGetPortsError = MibScalar((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 7, 2, 4, 3), JdsuOnmsiUtf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiOtuGetPortsError.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiOtuGetPortsError.setDescription('When the function execution fails, this node contains information on the error that occurred.\r\n\t\tThis node is empty when the execution is successful.')
jdsuOnmsiCentralOfficeService = MibIdentifier((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 8))
jdsuOnmsiCentralOfficeData = MibIdentifier((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 8, 1))
jdsuOnmsiCentralOfficeTable = MibTable((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 8, 1, 1), )
if mibBuilder.loadTexts: jdsuOnmsiCentralOfficeTable.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiCentralOfficeTable.setDescription('This table contains the standard central office data')
jdsuOnmsiCentralOfficeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 8, 1, 1, 1), ).setIndexNames((0, "JDSU-ONMSI-MIB", "jdsuOnmsiCentralOfficeEntryInternalKey"))
if mibBuilder.loadTexts: jdsuOnmsiCentralOfficeEntry.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiCentralOfficeEntry.setDescription('A central office entry')
jdsuOnmsiCentralOfficeEntryInternalKey = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 8, 1, 1, 1, 1), JdsuOnmsiInternalKey()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiCentralOfficeEntryInternalKey.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiCentralOfficeEntryInternalKey.setDescription('The internal key of the central office')
jdsuOnmsiCentralOfficeEntryName = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 8, 1, 1, 1, 2), JdsuOnmsiUtf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiCentralOfficeEntryName.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiCentralOfficeEntryName.setDescription('The name of the central office')
jdsuOnmsiCentralOfficeEntryDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 8, 1, 1, 1, 3), JdsuOnmsiUtf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiCentralOfficeEntryDescription.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiCentralOfficeEntryDescription.setDescription('The description of the central office')
jdsuOnmsiCentralOfficeAdditionalAttributeTable = MibTable((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 8, 1, 2), )
if mibBuilder.loadTexts: jdsuOnmsiCentralOfficeAdditionalAttributeTable.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiCentralOfficeAdditionalAttributeTable.setDescription('This table contains the additional attributes on central offices')
jdsuOnmsiCentralOfficeAdditionalAttributeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 8, 1, 2, 1), ).setIndexNames((0, "JDSU-ONMSI-MIB", "jdsuOnmsiCentralOfficeAdditionalAttributeEntryInternalKey"), (0, "JDSU-ONMSI-MIB", "jdsuOnmsiCentralOfficeAdditionalAttributeEntryName"))
if mibBuilder.loadTexts: jdsuOnmsiCentralOfficeAdditionalAttributeEntry.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiCentralOfficeAdditionalAttributeEntry.setDescription('A central office additional attribute entry')
jdsuOnmsiCentralOfficeAdditionalAttributeEntryInternalKey = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 8, 1, 2, 1, 1), JdsuOnmsiInternalKey()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiCentralOfficeAdditionalAttributeEntryInternalKey.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiCentralOfficeAdditionalAttributeEntryInternalKey.setDescription('The internal key of the central office')
jdsuOnmsiCentralOfficeAdditionalAttributeEntryName = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 8, 1, 2, 1, 2), JdsuOnmsiUtf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiCentralOfficeAdditionalAttributeEntryName.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiCentralOfficeAdditionalAttributeEntryName.setDescription('The additional attribute name')
jdsuOnmsiCentralOfficeAdditionalAttributeEntryValue = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 8, 1, 2, 1, 3), JdsuOnmsiUtf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiCentralOfficeAdditionalAttributeEntryValue.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiCentralOfficeAdditionalAttributeEntryValue.setDescription('The additional attribute value')
jdsuOnmsiCentralOfficeAttributeTable = MibTable((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 8, 1, 3), )
if mibBuilder.loadTexts: jdsuOnmsiCentralOfficeAttributeTable.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiCentralOfficeAttributeTable.setDescription('This table contains the descriptions of noticeable central office attributes')
jdsuOnmsiCentralOfficeAttributeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 8, 1, 3, 1), ).setIndexNames((0, "JDSU-ONMSI-MIB", "jdsuOnmsiCentralOfficeAttributeEntryName"))
if mibBuilder.loadTexts: jdsuOnmsiCentralOfficeAttributeEntry.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiCentralOfficeAttributeEntry.setDescription('A central office attribute entry')
jdsuOnmsiCentralOfficeAttributeEntryName = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 8, 1, 3, 1, 1), JdsuOnmsiUtf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiCentralOfficeAttributeEntryName.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiCentralOfficeAttributeEntryName.setDescription('The attribute name. The additional attributes are prefixed with an underscore character to avoid name collision with standard attributes')
jdsuOnmsiCentralOfficeAttributeEntryAdditional = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 8, 1, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiCentralOfficeAttributeEntryAdditional.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiCentralOfficeAttributeEntryAdditional.setDescription('This flag indicates whether the attribute is additional')
jdsuOnmsiCentralOfficeAttributeEntryFindable = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 8, 1, 3, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiCentralOfficeAttributeEntryFindable.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiCentralOfficeAttributeEntryFindable.setDescription('This flag indicates whether the attribute is findable')
jdsuOnmsiCentralOfficeAttributeEntryUpdatable = MibTableColumn((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 8, 1, 3, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiCentralOfficeAttributeEntryUpdatable.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiCentralOfficeAttributeEntryUpdatable.setDescription('This flag indicates whether the attribute is updatable')
jdsuOnmsiCentralOfficeFunctions = MibIdentifier((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 8, 2))
jdsuOnmsiCentralOfficeGet = MibIdentifier((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 8, 2, 1))
jdsuOnmsiCentralOfficeGetParamInternalKey = MibScalar((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 8, 2, 1, 1), JdsuOnmsiInternalKey()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jdsuOnmsiCentralOfficeGetParamInternalKey.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiCentralOfficeGetParamInternalKey.setDescription('The internal key of the central office to retrieve')
jdsuOnmsiCentralOfficeGetExecute = MibScalar((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 8, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jdsuOnmsiCentralOfficeGetExecute.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiCentralOfficeGetExecute.setDescription('Setting this field to 1 performs the central office retrieval')
jdsuOnmsiCentralOfficeGetError = MibScalar((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 8, 2, 1, 3), JdsuOnmsiUtf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiCentralOfficeGetError.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiCentralOfficeGetError.setDescription('When the function execution fails, this node contains information on the error that occurred.\r\n\t\tThis node is empty when the execution is successful.')
jdsuOnmsiCentralOfficeFind = MibIdentifier((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 8, 2, 2))
jdsuOnmsiCentralOfficeFindParamAttribute = MibScalar((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 8, 2, 2, 1), JdsuOnmsiUtf8String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jdsuOnmsiCentralOfficeFindParamAttribute.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiCentralOfficeFindParamAttribute.setDescription('The attribute of the central office to perform the search on.\r\n\t\tValid attributes for central offices are :\r\n\t\t- name\r\n\t\tand any additional attribute name')
jdsuOnmsiCentralOfficeFindParamValue = MibScalar((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 8, 2, 2, 2), JdsuOnmsiUtf8String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jdsuOnmsiCentralOfficeFindParamValue.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiCentralOfficeFindParamValue.setDescription('The attribute value to find')
jdsuOnmsiCentralOfficeFindExecute = MibScalar((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 8, 2, 2, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jdsuOnmsiCentralOfficeFindExecute.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiCentralOfficeFindExecute.setDescription('Setting this field to 1 performs the central office find')
jdsuOnmsiCentralOfficeFindError = MibScalar((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 8, 2, 2, 4), JdsuOnmsiUtf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiCentralOfficeFindError.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiCentralOfficeFindError.setDescription('When the function execution fails, this node contains information on the error that occurred.\r\n\t\tThis node is empty when the execution is successful.')
jdsuOnmsiCentralOfficeAttributeLoad = MibIdentifier((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 8, 2, 3))
jdsuOnmsiCentralOfficeAttributeLoadExecute = MibScalar((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 8, 2, 3, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jdsuOnmsiCentralOfficeAttributeLoadExecute.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiCentralOfficeAttributeLoadExecute.setDescription('Setting this field to 1 performs the jdsuOnmsiCentralOfficeAttributeTable load')
jdsuOnmsiCentralOfficeAttributeLoadError = MibScalar((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 3, 8, 2, 3, 2), JdsuOnmsiUtf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdsuOnmsiCentralOfficeAttributeLoadError.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiCentralOfficeAttributeLoadError.setDescription('When the function execution fails, this node contains information on the error that occurred.\r\n\t\tThis node is empty when the execution is successful.')
jdsuOnmsiEvents = MibIdentifier((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 4))
jdsuOnmsiImAliveTrap = NotificationType((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 4, 1)).setObjects(("JDSU-ONMSI-MIB", "jdsuOnmsiImAliveText"), ("JDSU-ONMSI-MIB", "jdsuOnmsiImAliveAlarmEventSequence"))
if mibBuilder.loadTexts: jdsuOnmsiImAliveTrap.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiImAliveTrap.setDescription('This trap is send periodically, to ensure the managers that the application is running.\r\n\t\tPeriod and text can be configured under jdsuOnmsiAdministration/jdsuOnmsiImAlive.\r\n\t\tThis trap contains the current alarm event sequence, to help managers in detecting missed jdsuOnmsiAlarmEventTrap')
jdsuOnmsiHomeTestResultTrap = NotificationType((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 4, 2)).setObjects(("JDSU-ONMSI-MIB", "jdsuOnmsiHomeStartTestError"), ("JDSU-ONMSI-MIB", "jdsuOnmsiHomeEntryInternalKey"), ("JDSU-ONMSI-MIB", "jdsuOnmsiHomeEntryHomeIdentifier"), ("JDSU-ONMSI-MIB", "jdsuOnmsiHomeEntryName"), ("JDSU-ONMSI-MIB", "jdsuOnmsiHomeEntryDescription"), ("JDSU-ONMSI-MIB", "jdsuOnmsiHomeEntryPonInternalKey"), ("JDSU-ONMSI-MIB", "jdsuOnmsiHomeEntryHomeTerminationTypeInternalKey"), ("JDSU-ONMSI-MIB", "jdsuOnmsiHomeEntryLatestPeakInternalKey"), ("JDSU-ONMSI-MIB", "jdsuOnmsiHomeEntryLatestPeakSeverity"), ("JDSU-ONMSI-MIB", "jdsuOnmsiHomeEntryLatestPeakStatus"))
if mibBuilder.loadTexts: jdsuOnmsiHomeTestResultTrap.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiHomeTestResultTrap.setDescription('This trap is send after a home test is started with jdsuOnmsiHomeStartTest function.')
jdsuOnmsiPonTestResultTrap = NotificationType((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 4, 3)).setObjects(("JDSU-ONMSI-MIB", "jdsuOnmsiPonStartTestError"), ("JDSU-ONMSI-MIB", "jdsuOnmsiPonEntryInternalKey"), ("JDSU-ONMSI-MIB", "jdsuOnmsiPonEntryName"), ("JDSU-ONMSI-MIB", "jdsuOnmsiPonEntryDescription"), ("JDSU-ONMSI-MIB", "jdsuOnmsiPonEntryLatestTestInternalKey"), ("JDSU-ONMSI-MIB", "jdsuOnmsiPonEntryOtuInternalKey"), ("JDSU-ONMSI-MIB", "jdsuOnmsiPonEntryPortInternalKey"), ("JDSU-ONMSI-MIB", "jdsuOnmsiPonEntrySeverity"))
if mibBuilder.loadTexts: jdsuOnmsiPonTestResultTrap.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiPonTestResultTrap.setDescription('This trap is send after a PON test is started with jdsuOnmsiPonStartTest function.')
jdsuOnmsiMonitoringTestResultTrap = NotificationType((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 4, 4)).setObjects(("JDSU-ONMSI-MIB", "jdsuOnmsiMonitoringTestStartTestError"), ("JDSU-ONMSI-MIB", "jdsuOnmsiMonitoringTestEntryInternalKey"))
if mibBuilder.loadTexts: jdsuOnmsiMonitoringTestResultTrap.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiMonitoringTestResultTrap.setDescription('This trap is send after a monitoring test is started with jdsuOnmsiMonitoringTestStartTest function.')
jdsuOnmsiAlarmEventTrap = NotificationType((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 4, 5)).setObjects(("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmEventEntrySequence"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmEventEntryEventInternalKey"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmEventEntryEventType"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmEventEntryEventTime"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmEventEntryEventClearStatus"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmEventEntryEventAckStatus"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmEventEntryEventPerceivedSeverity"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmEventEntryEventProbableCause"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmEventEntryEventAdditionalText"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmEventEntryEventUserIdentifier"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmEventEntryEventMonitoringTestSpecificInfos"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmEventEntryEventPointToPointSpecificInfos"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmEventEntryEventAttenuationSpecificInfos"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmEventEntryEventPeakSpecificInfos"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmEventEntryEventOrlSpecificInfos"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmEventEntryEventFiberLengthExtensionSpecificInfos"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmEventEntryEventLocalizationSpecificInfos"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmEventEntryEventGpsCoordinatesSpecificInfos"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmEventEntryEventPonSpecificInfos"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmEventEntryEventSplitterSpecificInfos"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmEventEntryEventStrainSpecificInfos"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmEventEntryEventTemperatureSpecificInfos"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmEventEntryAlarmInternalKey"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmEventEntryAlarmType"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmEventEntryAlarmRaisedTime"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmEventEntryAlarmChangedTime"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmEventEntryAlarmClearStatus"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmEventEntryAlarmAckStatus"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmEventEntryAlarmPerceivedSeverity"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmEventEntryAlarmSpecificProblem"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmEventEntryAlarmOriginatingEntityKind"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmEventEntryAlarmOriginatingEntityInternalKey"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmEventEntryAlarmOriginatingEntityName"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmEventEntryAlarmOriginatingEntityOid"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmEventEntryAlarmSystemDN"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmEventEntryAlarmProbableCause"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmEventEntryAlarmAdditionalText"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmEventEntryAlarmMonitoringTestSpecificInfos"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmEventEntryAlarmPointToPointSpecificInfos"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmEventEntryAlarmAttenuationSpecificInfos"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmEventEntryAlarmPeakSpecificInfos"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmEventEntryAlarmOrlSpecificInfos"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmEventEntryAlarmFiberLengthExtensionSpecificInfos"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmEventEntryAlarmLocalizationSpecificInfos"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmEventEntryAlarmOriginatingEntity"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmEventEntryAlarmGpsCoordinatesSpecificInfos"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmEventEntryAlarmPonSpecificInfos"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmEventEntryAlarmSplitterSpecificInfos"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmEventEntryAlarmStrainSpecificInfos"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmEventEntryAlarmTemperatureSpecificInfos"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmEventEntryAlarmAdditionalAttributes"))
if mibBuilder.loadTexts: jdsuOnmsiAlarmEventTrap.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiAlarmEventTrap.setDescription('This trap is send asynchronously, when alarm events occurs on the ONMSi system.\r\n\t\tWhen an alarm event pass the notification filter defined for the SNMP user (community),\r\n\t\ta sequence number is associated to the alarm event per SNMP user, and a trap is sent.')
jdsuOnmsiConf = MibIdentifier((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 5))
jdsuOnmsiProductGroups = ObjectGroup((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 5, 1)).setObjects(("JDSU-ONMSI-MIB", "jdsuOnmsiProductDescr"), ("JDSU-ONMSI-MIB", "jdsuOnmsiProductObjectID"), ("JDSU-ONMSI-MIB", "jdsuOnmsiProductContact"), ("JDSU-ONMSI-MIB", "jdsuOnmsiProductName"), ("JDSU-ONMSI-MIB", "jdsuOnmsiProductLocation"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    jdsuOnmsiProductGroups = jdsuOnmsiProductGroups.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiProductGroups.setDescription('Conformance for jdsuOnmsiProduct')
jdsOnmsiAdministrationConfGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 5, 2))
jdsuOnmsiSnmpConfigConfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 5, 2, 1)).setObjects(("JDSU-ONMSI-MIB", "jdsuOnmsiSnmpConfigurationReload"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    jdsuOnmsiSnmpConfigConfGroup = jdsuOnmsiSnmpConfigConfGroup.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiSnmpConfigConfGroup.setDescription('Conformance for jdsuOnmsiSnmpConfig')
jdsuOnmsiImAliveConfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 5, 2, 2)).setObjects(("JDSU-ONMSI-MIB", "jdsuOnmsiImAlivePeriodMin"), ("JDSU-ONMSI-MIB", "jdsuOnmsiImAliveText"), ("JDSU-ONMSI-MIB", "jdsuOnmsiImAliveAlarmEventSequence"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    jdsuOnmsiImAliveConfGroup = jdsuOnmsiImAliveConfGroup.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiImAliveConfGroup.setDescription('Conformance for jdsuOnmsiImAlive')
jdsuOnmsiServicesConfGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 5, 3))
jdsuOnmsiHomeTerminationTypeConfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 5, 3, 1)).setObjects(("JDSU-ONMSI-MIB", "jdsuOnmsiHomeTerminationTypeEntryInternalKey"), ("JDSU-ONMSI-MIB", "jdsuOnmsiHomeTerminationTypeEntryName"), ("JDSU-ONMSI-MIB", "jdsuOnmsiHomeTerminationTypeEntryDescription"), ("JDSU-ONMSI-MIB", "jdsuOnmsiHomeTerminationTypeLoadExecute"), ("JDSU-ONMSI-MIB", "jdsuOnmsiHomeTerminationTypeLoadError"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    jdsuOnmsiHomeTerminationTypeConfGroup = jdsuOnmsiHomeTerminationTypeConfGroup.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiHomeTerminationTypeConfGroup.setDescription('Conformance for the jdsuOnmsiHomeTerminationTypeTable nodes')
jdsuOnmsiHomeConfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 5, 3, 2)).setObjects(("JDSU-ONMSI-MIB", "jdsuOnmsiHomeEntryInternalKey"), ("JDSU-ONMSI-MIB", "jdsuOnmsiHomeEntryHomeIdentifier"), ("JDSU-ONMSI-MIB", "jdsuOnmsiHomeEntryName"), ("JDSU-ONMSI-MIB", "jdsuOnmsiHomeEntryDescription"), ("JDSU-ONMSI-MIB", "jdsuOnmsiHomeEntryPonInternalKey"), ("JDSU-ONMSI-MIB", "jdsuOnmsiHomeEntryHomeTerminationTypeInternalKey"), ("JDSU-ONMSI-MIB", "jdsuOnmsiHomeEntryLatestPeakInternalKey"), ("JDSU-ONMSI-MIB", "jdsuOnmsiHomeEntryLatestPeakSeverity"), ("JDSU-ONMSI-MIB", "jdsuOnmsiHomeEntryLatestPeakStatus"), ("JDSU-ONMSI-MIB", "jdsuOnmsiHomeEntryVip"), ("JDSU-ONMSI-MIB", "jdsuOnmsiHomeAdditionalAttributeEntryInternalKey"), ("JDSU-ONMSI-MIB", "jdsuOnmsiHomeAdditionalAttributeEntryName"), ("JDSU-ONMSI-MIB", "jdsuOnmsiHomeAdditionalAttributeEntryValue"), ("JDSU-ONMSI-MIB", "jdsuOnmsiHomeAttributeEntryName"), ("JDSU-ONMSI-MIB", "jdsuOnmsiHomeAttributeEntryAdditional"), ("JDSU-ONMSI-MIB", "jdsuOnmsiHomeAttributeEntryFindable"), ("JDSU-ONMSI-MIB", "jdsuOnmsiHomeAttributeEntryUpdatable"), ("JDSU-ONMSI-MIB", "jdsuOnmsiHomeGetParamInternalKey"), ("JDSU-ONMSI-MIB", "jdsuOnmsiHomeGetExecute"), ("JDSU-ONMSI-MIB", "jdsuOnmsiHomeGetError"), ("JDSU-ONMSI-MIB", "jdsuOnmsiHomeFindParamAttribute"), ("JDSU-ONMSI-MIB", "jdsuOnmsiHomeFindParamValue"), ("JDSU-ONMSI-MIB", "jdsuOnmsiHomeFindExecute"), ("JDSU-ONMSI-MIB", "jdsuOnmsiHomeFindError"), ("JDSU-ONMSI-MIB", "jdsuOnmsiHomeStartTestParamInternalKey"), ("JDSU-ONMSI-MIB", "jdsuOnmsiHomeStartTestExecute"), ("JDSU-ONMSI-MIB", "jdsuOnmsiHomeStartTestError"), ("JDSU-ONMSI-MIB", "jdsuOnmsiHomeAttributeLoadExecute"), ("JDSU-ONMSI-MIB", "jdsuOnmsiHomeAttributeLoadError"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    jdsuOnmsiHomeConfGroup = jdsuOnmsiHomeConfGroup.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiHomeConfGroup.setDescription('Conformance for the jdsuOnmsiHomeService')
jdsuOnmsiPonConfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 5, 3, 3)).setObjects(("JDSU-ONMSI-MIB", "jdsuOnmsiPonEntryInternalKey"), ("JDSU-ONMSI-MIB", "jdsuOnmsiPonEntryName"), ("JDSU-ONMSI-MIB", "jdsuOnmsiPonEntryDescription"), ("JDSU-ONMSI-MIB", "jdsuOnmsiPonEntryLatestTestInternalKey"), ("JDSU-ONMSI-MIB", "jdsuOnmsiPonEntryOtuInternalKey"), ("JDSU-ONMSI-MIB", "jdsuOnmsiPonEntryPortInternalKey"), ("JDSU-ONMSI-MIB", "jdsuOnmsiPonEntrySeverity"), ("JDSU-ONMSI-MIB", "jdsuOnmsiPonEntrySchedulingConfiguration"), ("JDSU-ONMSI-MIB", "jdsuOnmsiPonAdditionalAttributeEntryInternalKey"), ("JDSU-ONMSI-MIB", "jdsuOnmsiPonAdditionalAttributeEntryName"), ("JDSU-ONMSI-MIB", "jdsuOnmsiPonAdditionalAttributeEntryValue"), ("JDSU-ONMSI-MIB", "jdsuOnmsiPonAttributeEntryName"), ("JDSU-ONMSI-MIB", "jdsuOnmsiPonAttributeEntryAdditional"), ("JDSU-ONMSI-MIB", "jdsuOnmsiPonAttributeEntryFindable"), ("JDSU-ONMSI-MIB", "jdsuOnmsiPonAttributeEntryUpdatable"), ("JDSU-ONMSI-MIB", "jdsuOnmsiPonGetParamInternalKey"), ("JDSU-ONMSI-MIB", "jdsuOnmsiPonGetExecute"), ("JDSU-ONMSI-MIB", "jdsuOnmsiPonGetError"), ("JDSU-ONMSI-MIB", "jdsuOnmsiPonFindParamAttribute"), ("JDSU-ONMSI-MIB", "jdsuOnmsiPonFindParamValue"), ("JDSU-ONMSI-MIB", "jdsuOnmsiPonFindExecute"), ("JDSU-ONMSI-MIB", "jdsuOnmsiPonFindError"), ("JDSU-ONMSI-MIB", "jdsuOnmsiPonStartTestParamInternalKey"), ("JDSU-ONMSI-MIB", "jdsuOnmsiPonStartTestExecute"), ("JDSU-ONMSI-MIB", "jdsuOnmsiPonStartTestError"), ("JDSU-ONMSI-MIB", "jdsuOnmsiPonAttributeLoadExecute"), ("JDSU-ONMSI-MIB", "jdsuOnmsiPonAttributeLoadError"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    jdsuOnmsiPonConfGroup = jdsuOnmsiPonConfGroup.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiPonConfGroup.setDescription('Conformance for the jdsuOnmsiPonService')
jdsuOnmsiPeakConfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 5, 3, 4)).setObjects(("JDSU-ONMSI-MIB", "jdsuOnmsiPeakEntryInternalKey"), ("JDSU-ONMSI-MIB", "jdsuOnmsiPeakEntryTestInternalKey"), ("JDSU-ONMSI-MIB", "jdsuOnmsiPeakEntryDate"), ("JDSU-ONMSI-MIB", "jdsuOnmsiPeakEntryIsAReference"), ("JDSU-ONMSI-MIB", "jdsuOnmsiPeakEntryDistance"), ("JDSU-ONMSI-MIB", "jdsuOnmsiPeakEntryLevel"), ("JDSU-ONMSI-MIB", "jdsuOnmsiPeakEntryPower"), ("JDSU-ONMSI-MIB", "jdsuOnmsiPeakEntryIsPowerMeasured"), ("JDSU-ONMSI-MIB", "jdsuOnmsiPeakEntrySeverity"), ("JDSU-ONMSI-MIB", "jdsuOnmsiPeakEntryStatus"), ("JDSU-ONMSI-MIB", "jdsuOnmsiPeakEntryRefDistance"), ("JDSU-ONMSI-MIB", "jdsuOnmsiPeakEntryRefLevel"), ("JDSU-ONMSI-MIB", "jdsuOnmsiPeakEntryRefPower"), ("JDSU-ONMSI-MIB", "jdsuOnmsiPeakEntryRefIsPowerMeasured"), ("JDSU-ONMSI-MIB", "jdsuOnmsiPeakEntryRefDate"), ("JDSU-ONMSI-MIB", "jdsuOnmsiPeakEntryType"), ("JDSU-ONMSI-MIB", "jdsuOnmsiPeakEntryHomeTerminationTypeInternalKey"), ("JDSU-ONMSI-MIB", "jdsuOnmsiPeakEntryHomeInternalKey"), ("JDSU-ONMSI-MIB", "jdsuOnmsiPeakGetParamInternalKey"), ("JDSU-ONMSI-MIB", "jdsuOnmsiPeakGetExecute"), ("JDSU-ONMSI-MIB", "jdsuOnmsiPeakGetError"), ("JDSU-ONMSI-MIB", "jdsuOnmsiPeakFindParamAttribute"), ("JDSU-ONMSI-MIB", "jdsuOnmsiPeakFindParamValue"), ("JDSU-ONMSI-MIB", "jdsuOnmsiPeakFindExecute"), ("JDSU-ONMSI-MIB", "jdsuOnmsiPeakFindError"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    jdsuOnmsiPeakConfGroup = jdsuOnmsiPeakConfGroup.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiPeakConfGroup.setDescription('Conformance for the jdsuOnmsiPeakService')
jdsuOnmsiLinkServiceConfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 5, 3, 5)).setObjects(("JDSU-ONMSI-MIB", "jdsuOnmsiLinkEntryInternalKey"), ("JDSU-ONMSI-MIB", "jdsuOnmsiLinkEntryName"), ("JDSU-ONMSI-MIB", "jdsuOnmsiLinkEntryDescription"), ("JDSU-ONMSI-MIB", "jdsuOnmsiLinkEntryMeasureEnabled"), ("JDSU-ONMSI-MIB", "jdsuOnmsiLinkEntryOtuInternalKey"), ("JDSU-ONMSI-MIB", "jdsuOnmsiLinkEntrySeverity"), ("JDSU-ONMSI-MIB", "jdsuOnmsiLinkAdditionalAttributeEntryInternalKey"), ("JDSU-ONMSI-MIB", "jdsuOnmsiLinkAdditionalAttributeEntryName"), ("JDSU-ONMSI-MIB", "jdsuOnmsiLinkAdditionalAttributeEntryValue"), ("JDSU-ONMSI-MIB", "jdsuOnmsiLinkAttributeEntryName"), ("JDSU-ONMSI-MIB", "jdsuOnmsiLinkAttributeEntryAdditional"), ("JDSU-ONMSI-MIB", "jdsuOnmsiLinkAttributeEntryFindable"), ("JDSU-ONMSI-MIB", "jdsuOnmsiLinkAttributeEntryUpdatable"), ("JDSU-ONMSI-MIB", "jdsuOnmsiLinkGetParamInternalKey"), ("JDSU-ONMSI-MIB", "jdsuOnmsiLinkGetExecute"), ("JDSU-ONMSI-MIB", "jdsuOnmsiLinkGetError"), ("JDSU-ONMSI-MIB", "jdsuOnmsiLinkFindParamAttribute"), ("JDSU-ONMSI-MIB", "jdsuOnmsiLinkFindParamValue"), ("JDSU-ONMSI-MIB", "jdsuOnmsiLinkFindExecute"), ("JDSU-ONMSI-MIB", "jdsuOnmsiLinkFindError"), ("JDSU-ONMSI-MIB", "jdsuOnmsiLinkUpdateParamInternalKey"), ("JDSU-ONMSI-MIB", "jdsuOnmsiLinkUpdateExecute"), ("JDSU-ONMSI-MIB", "jdsuOnmsiLinkUpdateError"), ("JDSU-ONMSI-MIB", "jdsuOnmsiLinkAttributeLoadExecute"), ("JDSU-ONMSI-MIB", "jdsuOnmsiLinkAttributeLoadError"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    jdsuOnmsiLinkServiceConfGroup = jdsuOnmsiLinkServiceConfGroup.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiLinkServiceConfGroup.setDescription('Conformance for the jdsuOnmsiLinkService')
jdsuOnmsiMonitoringTestServiceConfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 5, 3, 6)).setObjects(("JDSU-ONMSI-MIB", "jdsuOnmsiMonitoringTestEntryInternalKey"), ("JDSU-ONMSI-MIB", "jdsuOnmsiMonitoringTestEntryName"), ("JDSU-ONMSI-MIB", "jdsuOnmsiMonitoringTestEntryDescription"), ("JDSU-ONMSI-MIB", "jdsuOnmsiMonitoringTestEntryLinkInternalKey"), ("JDSU-ONMSI-MIB", "jdsuOnmsiMonitoringTestEntryDisplayOrder"), ("JDSU-ONMSI-MIB", "jdsuOnmsiMonitoringTestEntrySeverity"), ("JDSU-ONMSI-MIB", "jdsuOnmsiMonitoringTestEntryDetectionConfiguration"), ("JDSU-ONMSI-MIB", "jdsuOnmsiMonitoringTestEntryLocalizationConfiguration"), ("JDSU-ONMSI-MIB", "jdsuOnmsiMonitoringTestEntrySchedulingConfiguration"), ("JDSU-ONMSI-MIB", "jdsuOnmsiMonitoringTestAdditionalAttributeEntryInternalKey"), ("JDSU-ONMSI-MIB", "jdsuOnmsiMonitoringTestAdditionalAttributeEntryName"), ("JDSU-ONMSI-MIB", "jdsuOnmsiMonitoringTestAdditionalAttributeEntryValue"), ("JDSU-ONMSI-MIB", "jdsuOnmsiMonitoringTestAttributeEntryName"), ("JDSU-ONMSI-MIB", "jdsuOnmsiMonitoringTestAttributeEntryAdditional"), ("JDSU-ONMSI-MIB", "jdsuOnmsiMonitoringTestAttributeEntryFindable"), ("JDSU-ONMSI-MIB", "jdsuOnmsiMonitoringTestAttributeEntryUpdatable"), ("JDSU-ONMSI-MIB", "jdsuOnmsiMonitoringTestGetParamInternalKey"), ("JDSU-ONMSI-MIB", "jdsuOnmsiMonitoringTestGetExecute"), ("JDSU-ONMSI-MIB", "jdsuOnmsiMonitoringTestGetError"), ("JDSU-ONMSI-MIB", "jdsuOnmsiMonitoringTestFindParamAttribute"), ("JDSU-ONMSI-MIB", "jdsuOnmsiMonitoringTestFindParamValue"), ("JDSU-ONMSI-MIB", "jdsuOnmsiMonitoringTestFindExecute"), ("JDSU-ONMSI-MIB", "jdsuOnmsiMonitoringTestFindError"), ("JDSU-ONMSI-MIB", "jdsuOnmsiMonitoringTestStartTestParamInternalKey"), ("JDSU-ONMSI-MIB", "jdsuOnmsiMonitoringTestStartTestExecute"), ("JDSU-ONMSI-MIB", "jdsuOnmsiMonitoringTestStartTestError"), ("JDSU-ONMSI-MIB", "jdsuOnmsiMonitoringTestAttributeLoadExecute"), ("JDSU-ONMSI-MIB", "jdsuOnmsiMonitoringTestAttributeLoadError"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    jdsuOnmsiMonitoringTestServiceConfGroup = jdsuOnmsiMonitoringTestServiceConfGroup.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiMonitoringTestServiceConfGroup.setDescription('Conformance for the jdsuOnmsiMonitoringTestService')
jdsuOnmsiAlarmServiceConfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 5, 3, 7)).setObjects(("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmTypeName"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmSpecificProblemName"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmEventEntrySequence"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmEventEntryEventInternalKey"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmEventEntryEventType"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmEventEntryEventTime"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmEventEntryEventClearStatus"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmEventEntryEventAckStatus"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmEventEntryEventPerceivedSeverity"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmEventEntryEventProbableCause"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmEventEntryEventAdditionalText"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmEventEntryEventUserIdentifier"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmEventEntryEventMonitoringTestSpecificInfos"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmEventEntryEventPointToPointSpecificInfos"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmEventEntryEventAttenuationSpecificInfos"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmEventEntryEventPeakSpecificInfos"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmEventEntryEventOrlSpecificInfos"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmEventEntryEventFiberLengthExtensionSpecificInfos"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmEventEntryEventLocalizationSpecificInfos"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmEventEntryEventGpsCoordinatesSpecificInfos"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmEventEntryEventPonSpecificInfos"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmEventEntryEventSplitterSpecificInfos"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmEventEntryEventStrainSpecificInfos"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmEventEntryEventTemperatureSpecificInfos"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmEventEntryAlarmInternalKey"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmEventEntryAlarmType"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmEventEntryAlarmRaisedTime"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmEventEntryAlarmChangedTime"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmEventEntryAlarmClearStatus"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmEventEntryAlarmAckStatus"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmEventEntryAlarmPerceivedSeverity"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmEventEntryAlarmSpecificProblem"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmEventEntryAlarmOriginatingEntity"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmEventEntryAlarmOriginatingEntityKind"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmEventEntryAlarmOriginatingEntityInternalKey"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmEventEntryAlarmOriginatingEntityName"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmEventEntryAlarmOriginatingEntityOid"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmEventEntryAlarmSystemDN"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmEventEntryAlarmProbableCause"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmEventEntryAlarmAdditionalText"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmEventEntryAlarmMonitoringTestSpecificInfos"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmEventEntryAlarmPointToPointSpecificInfos"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmEventEntryAlarmAttenuationSpecificInfos"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmEventEntryAlarmPeakSpecificInfos"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmEventEntryAlarmOrlSpecificInfos"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmEventEntryAlarmFiberLengthExtensionSpecificInfos"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmEventEntryAlarmLocalizationSpecificInfos"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmEventEntryAlarmGpsCoordinatesSpecificInfos"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmEventEntryAlarmPonSpecificInfos"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmEventEntryAlarmSplitterSpecificInfos"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmEventEntryAlarmStrainSpecificInfos"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmEventEntryAlarmTemperatureSpecificInfos"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmEventEntryAlarmAdditionalAttributes"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmSplitterPeakEntryInternalKey"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmSplitterPeakEntryName"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmSplitterPeakEntryPerceivedSeverity"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmSplitterPeakEntryPreviousSeverity"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmSplitterPeakEntryMeasuredBottomDistance"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmSplitterPeakEntryReferenceBottomDistance"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmSplitterPeakEntryMeasuredTopDistance"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmSplitterPeakEntryReferenceTopDistance"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmSplitterPeakEntryMeasuredLevel"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmSplitterPeakEntryReferenceLevel"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmSplitterPeakEntryPeakMeasurementValid"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmAckExecute"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmAckParamInternalKey"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmAckError"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmUnAckParamInternalKey"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmUnAckExecute"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmUnAckError"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmClearParamInternalKey"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmClearExecute"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmClearError"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmUnClearParamInternalKey"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmUnClearExecute"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmUnClearError"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmResendEventsParamSequence"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmResendEventsExecute"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmResendEventsError"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmResynchronizeExecute"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmResynchronizeError"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmSplitterPeakLoadParamEventInternalKey"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmSplitterPeakLoadExecute"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmSplitterPeakLoadError"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    jdsuOnmsiAlarmServiceConfGroup = jdsuOnmsiAlarmServiceConfGroup.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiAlarmServiceConfGroup.setDescription('Conformance for the jdsuOnmsiAlarmService')
jdsuOnmsiOtuConfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 5, 3, 8)).setObjects(("JDSU-ONMSI-MIB", "jdsuOnmsiOtuEntryInternalKey"), ("JDSU-ONMSI-MIB", "jdsuOnmsiOtuEntryName"), ("JDSU-ONMSI-MIB", "jdsuOnmsiOtuEntryDescription"), ("JDSU-ONMSI-MIB", "jdsuOnmsiOtuEntryIpAddress"), ("JDSU-ONMSI-MIB", "jdsuOnmsiOtuEntryDeviceName"), ("JDSU-ONMSI-MIB", "jdsuOnmsiOtuEntrySerialNumber"), ("JDSU-ONMSI-MIB", "jdsuOnmsiOtuEntrySoftwareVersion"), ("JDSU-ONMSI-MIB", "jdsuOnmsiOtuEntryCentralOfficeInternalKey"), ("JDSU-ONMSI-MIB", "jdsuOnmsiOtuEntrySeverity"), ("JDSU-ONMSI-MIB", "jdsuOnmsiOtuAdditionalAttributeEntryInternalKey"), ("JDSU-ONMSI-MIB", "jdsuOnmsiOtuAdditionalAttributeEntryName"), ("JDSU-ONMSI-MIB", "jdsuOnmsiOtuAdditionalAttributeEntryValue"), ("JDSU-ONMSI-MIB", "jdsuOnmsiOtuAttributeEntryName"), ("JDSU-ONMSI-MIB", "jdsuOnmsiOtuAttributeEntryAdditional"), ("JDSU-ONMSI-MIB", "jdsuOnmsiOtuAttributeEntryFindable"), ("JDSU-ONMSI-MIB", "jdsuOnmsiOtuAttributeEntryUpdatable"), ("JDSU-ONMSI-MIB", "jdsuOnmsiOtuOtdrEntryInternalKey"), ("JDSU-ONMSI-MIB", "jdsuOnmsiOtuOtdrEntryOtuInternalKey"), ("JDSU-ONMSI-MIB", "jdsuOnmsiOtuOtdrEntryPosition"), ("JDSU-ONMSI-MIB", "jdsuOnmsiOtuOtdrEntryType"), ("JDSU-ONMSI-MIB", "jdsuOnmsiOtuOtdrEntrySerialNumber"), ("JDSU-ONMSI-MIB", "jdsuOnmsiOtuOtdrEntryWavelengths"), ("JDSU-ONMSI-MIB", "jdsuOnmsiOtuSwitchEntryInternalKey"), ("JDSU-ONMSI-MIB", "jdsuOnmsiOtuSwitchEntryOtuInternalKey"), ("JDSU-ONMSI-MIB", "jdsuOnmsiOtuSwitchEntryName"), ("JDSU-ONMSI-MIB", "jdsuOnmsiOtuSwitchEntryRemote"), ("JDSU-ONMSI-MIB", "jdsuOnmsiOtuSwitchEntryPosition"), ("JDSU-ONMSI-MIB", "jdsuOnmsiOtuSwitchEntryInputs"), ("JDSU-ONMSI-MIB", "jdsuOnmsiOtuSwitchEntryOutputs"), ("JDSU-ONMSI-MIB", "jdsuOnmsiOtuPortEntryInternalKey"), ("JDSU-ONMSI-MIB", "jdsuOnmsiOtuPortEntryOtuInternalKey"), ("JDSU-ONMSI-MIB", "jdsuOnmsiOtuPortEntryModuleInternalKey"), ("JDSU-ONMSI-MIB", "jdsuOnmsiOtuPortEntryPosition"), ("JDSU-ONMSI-MIB", "jdsuOnmsiOtuPortEntryPonInternalKey"), ("JDSU-ONMSI-MIB", "jdsuOnmsiOtuPortEntryLinkInternalKey"), ("JDSU-ONMSI-MIB", "jdsuOnmsiOtuGetParamInternalKey"), ("JDSU-ONMSI-MIB", "jdsuOnmsiOtuGetExecute"), ("JDSU-ONMSI-MIB", "jdsuOnmsiOtuGetError"), ("JDSU-ONMSI-MIB", "jdsuOnmsiOtuFindParamAttribute"), ("JDSU-ONMSI-MIB", "jdsuOnmsiOtuFindParamValue"), ("JDSU-ONMSI-MIB", "jdsuOnmsiOtuFindExecute"), ("JDSU-ONMSI-MIB", "jdsuOnmsiOtuFindError"), ("JDSU-ONMSI-MIB", "jdsuOnmsiOtuAttributeLoadExecute"), ("JDSU-ONMSI-MIB", "jdsuOnmsiOtuAttributeLoadError"), ("JDSU-ONMSI-MIB", "jdsuOnmsiOtuGetPortsParamInternalKey"), ("JDSU-ONMSI-MIB", "jdsuOnmsiOtuGetPortsExecute"), ("JDSU-ONMSI-MIB", "jdsuOnmsiOtuGetPortsError"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    jdsuOnmsiOtuConfGroup = jdsuOnmsiOtuConfGroup.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiOtuConfGroup.setDescription('Conformance for the jdsuOnmsiOtuService')
jdsuOnmsiCentralOfficeConfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 5, 3, 9)).setObjects(("JDSU-ONMSI-MIB", "jdsuOnmsiCentralOfficeEntryInternalKey"), ("JDSU-ONMSI-MIB", "jdsuOnmsiCentralOfficeEntryName"), ("JDSU-ONMSI-MIB", "jdsuOnmsiCentralOfficeEntryDescription"), ("JDSU-ONMSI-MIB", "jdsuOnmsiCentralOfficeAdditionalAttributeEntryInternalKey"), ("JDSU-ONMSI-MIB", "jdsuOnmsiCentralOfficeAdditionalAttributeEntryName"), ("JDSU-ONMSI-MIB", "jdsuOnmsiCentralOfficeAdditionalAttributeEntryValue"), ("JDSU-ONMSI-MIB", "jdsuOnmsiCentralOfficeAttributeEntryName"), ("JDSU-ONMSI-MIB", "jdsuOnmsiCentralOfficeAttributeEntryAdditional"), ("JDSU-ONMSI-MIB", "jdsuOnmsiCentralOfficeAttributeEntryFindable"), ("JDSU-ONMSI-MIB", "jdsuOnmsiCentralOfficeAttributeEntryUpdatable"), ("JDSU-ONMSI-MIB", "jdsuOnmsiCentralOfficeGetParamInternalKey"), ("JDSU-ONMSI-MIB", "jdsuOnmsiCentralOfficeGetExecute"), ("JDSU-ONMSI-MIB", "jdsuOnmsiCentralOfficeGetError"), ("JDSU-ONMSI-MIB", "jdsuOnmsiCentralOfficeFindParamAttribute"), ("JDSU-ONMSI-MIB", "jdsuOnmsiCentralOfficeFindParamValue"), ("JDSU-ONMSI-MIB", "jdsuOnmsiCentralOfficeFindExecute"), ("JDSU-ONMSI-MIB", "jdsuOnmsiCentralOfficeFindError"), ("JDSU-ONMSI-MIB", "jdsuOnmsiCentralOfficeAttributeLoadExecute"), ("JDSU-ONMSI-MIB", "jdsuOnmsiCentralOfficeAttributeLoadError"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    jdsuOnmsiCentralOfficeConfGroup = jdsuOnmsiCentralOfficeConfGroup.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiCentralOfficeConfGroup.setDescription('')
jdsuOnmsiEventsConfGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 35873, 5, 1, 1, 1, 5, 4)).setObjects(("JDSU-ONMSI-MIB", "jdsuOnmsiImAliveTrap"), ("JDSU-ONMSI-MIB", "jdsuOnmsiHomeTestResultTrap"), ("JDSU-ONMSI-MIB", "jdsuOnmsiPonTestResultTrap"), ("JDSU-ONMSI-MIB", "jdsuOnmsiMonitoringTestResultTrap"), ("JDSU-ONMSI-MIB", "jdsuOnmsiAlarmEventTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    jdsuOnmsiEventsConfGroup = jdsuOnmsiEventsConfGroup.setStatus('current')
if mibBuilder.loadTexts: jdsuOnmsiEventsConfGroup.setDescription('Conformance for jdsuOnmsiEvents')
mibBuilder.exportSymbols("JDSU-ONMSI-MIB", jdsuOnmsiOtuFindExecute=jdsuOnmsiOtuFindExecute, jdsuOnmsiProductContact=jdsuOnmsiProductContact, jdsuOnmsiPeakGet=jdsuOnmsiPeakGet, jdsuOnmsiLinkGetParamInternalKey=jdsuOnmsiLinkGetParamInternalKey, jdsuOnmsiAlarmEventEntryEventType=jdsuOnmsiAlarmEventEntryEventType, jdsuOnmsiAlarmUnClearExecute=jdsuOnmsiAlarmUnClearExecute, jdsuOnmsiHomeTestResultTrap=jdsuOnmsiHomeTestResultTrap, jdsuOnmsiMonitoringTestAdditionalAttributeEntryName=jdsuOnmsiMonitoringTestAdditionalAttributeEntryName, jdsuOnmsiAlarmEventEntryAlarmType=jdsuOnmsiAlarmEventEntryAlarmType, jdsuOnmsiHomeTerminationTypeEntry=jdsuOnmsiHomeTerminationTypeEntry, jdsuOnmsiCentralOfficeGetExecute=jdsuOnmsiCentralOfficeGetExecute, jdsuOnmsiLinkData=jdsuOnmsiLinkData, jdsuOnmsiPeakEntryRefLevel=jdsuOnmsiPeakEntryRefLevel, jdsuOnmsiOtuEntryName=jdsuOnmsiOtuEntryName, jdsuOnmsiPonTable=jdsuOnmsiPonTable, jdsuOnmsiLinkGetError=jdsuOnmsiLinkGetError, jdsuOnmsiCentralOfficeEntry=jdsuOnmsiCentralOfficeEntry, jdsuOnmsiHomeEntryLatestPeakStatus=jdsuOnmsiHomeEntryLatestPeakStatus, jdsuOnmsiLinkFindError=jdsuOnmsiLinkFindError, jdsuOnmsiOtuSwitchEntry=jdsuOnmsiOtuSwitchEntry, jdsuOnmsiAlarmTypeName=jdsuOnmsiAlarmTypeName, jdsuOnmsiOtuOtdrEntryWavelengths=jdsuOnmsiOtuOtdrEntryWavelengths, jdsuOnmsiMonitoringTestEntryLinkInternalKey=jdsuOnmsiMonitoringTestEntryLinkInternalKey, jdsuOnmsiAlarmEventEntryEventSplitterSpecificInfos=jdsuOnmsiAlarmEventEntryEventSplitterSpecificInfos, jdsuOnmsiAlarmEventEntryAlarmFiberLengthExtensionSpecificInfos=jdsuOnmsiAlarmEventEntryAlarmFiberLengthExtensionSpecificInfos, jdsuOnmsiAlarmEventEntryAlarmTemperatureSpecificInfos=jdsuOnmsiAlarmEventEntryAlarmTemperatureSpecificInfos, jdsuOnmsiMonitoringTestGetExecute=jdsuOnmsiMonitoringTestGetExecute, jdsuOnmsiAlarmEventEntryAlarmOriginatingEntity=jdsuOnmsiAlarmEventEntryAlarmOriginatingEntity, jdsuOnmsiOtuGetPortsParamInternalKey=jdsuOnmsiOtuGetPortsParamInternalKey, jdsuOnmsiHomeAttributeEntryAdditional=jdsuOnmsiHomeAttributeEntryAdditional, jdsuOnmsiHomeFunctions=jdsuOnmsiHomeFunctions, jdsuOnmsiOtuGet=jdsuOnmsiOtuGet, jdsuOnmsiPonAttributeEntryUpdatable=jdsuOnmsiPonAttributeEntryUpdatable, jdsuOnmsiLinkEntry=jdsuOnmsiLinkEntry, jdsuOnmsiOtuAttributeEntryUpdatable=jdsuOnmsiOtuAttributeEntryUpdatable, jdsuOnmsiOtuAdditionalAttributeTable=jdsuOnmsiOtuAdditionalAttributeTable, jdsuOnmsiHomeAttributeTable=jdsuOnmsiHomeAttributeTable, jdsuOnmsiAlarmUnClearError=jdsuOnmsiAlarmUnClearError, jdsuOnmsiAlarmTypesEntry=jdsuOnmsiAlarmTypesEntry, jdsuOnmsiLinkFunctions=jdsuOnmsiLinkFunctions, jdsuOnmsiPonGetError=jdsuOnmsiPonGetError, jdsuOnmsiLinkFindParamAttribute=jdsuOnmsiLinkFindParamAttribute, jdsuOnmsiPonGet=jdsuOnmsiPonGet, jdsuOnmsiCentralOfficeAdditionalAttributeEntry=jdsuOnmsiCentralOfficeAdditionalAttributeEntry, jdsuOnmsiPeakEntryStatus=jdsuOnmsiPeakEntryStatus, jdsuOnmsiPeakFindExecute=jdsuOnmsiPeakFindExecute, jdsuOnmsiPonStartTestExecute=jdsuOnmsiPonStartTestExecute, jdsuOnmsiAlarmSplitterPeakEntryReferenceBottomDistance=jdsuOnmsiAlarmSplitterPeakEntryReferenceBottomDistance, jdsuOnmsiHomeAdditionalAttributeEntryName=jdsuOnmsiHomeAdditionalAttributeEntryName, jdsuOnmsiAlarmEventEntryEventStrainSpecificInfos=jdsuOnmsiAlarmEventEntryEventStrainSpecificInfos, jdsuOnmsiLinkUpdateParamInternalKey=jdsuOnmsiLinkUpdateParamInternalKey, jdsuOnmsiPeakEntryRefPower=jdsuOnmsiPeakEntryRefPower, jdsuOnmsiAlarmService=jdsuOnmsiAlarmService, jdsuOnmsiHomeEntry=jdsuOnmsiHomeEntry, jdsuOnmsiProductObjectID=jdsuOnmsiProductObjectID, jdsuOnmsiCentralOfficeConfGroup=jdsuOnmsiCentralOfficeConfGroup, jdsuOnmsiMonitoringTestTable=jdsuOnmsiMonitoringTestTable, jdsuOnmsiMonitoringTestEntryDisplayOrder=jdsuOnmsiMonitoringTestEntryDisplayOrder, jdsuOnmsiPonAdditionalAttributeEntryValue=jdsuOnmsiPonAdditionalAttributeEntryValue, JdsuOnmsiUtf8String=JdsuOnmsiUtf8String, jdsuOnmsiAlarmSpecificProblemName=jdsuOnmsiAlarmSpecificProblemName, jdsuOnmsiPeakEntryHomeTerminationTypeInternalKey=jdsuOnmsiPeakEntryHomeTerminationTypeInternalKey, jdsuOnmsiAlarmEventEntryEventClearStatus=jdsuOnmsiAlarmEventEntryEventClearStatus, jdsuOnmsiAlarmResynchronize=jdsuOnmsiAlarmResynchronize, jdsuOnmsiPonFind=jdsuOnmsiPonFind, jdsuOnmsiAlarmEventEntryAlarmPonSpecificInfos=jdsuOnmsiAlarmEventEntryAlarmPonSpecificInfos, jdsuOnmsiOtuAttributeLoad=jdsuOnmsiOtuAttributeLoad, jdsuOnmsiPeakEntryRefDate=jdsuOnmsiPeakEntryRefDate, jdsuOnmsiHomeAttributeLoad=jdsuOnmsiHomeAttributeLoad, jdsuOnmsiPeakGetParamInternalKey=jdsuOnmsiPeakGetParamInternalKey, jdsuOnmsiMonitoringTestAttributeLoadExecute=jdsuOnmsiMonitoringTestAttributeLoadExecute, jdsuOnmsiOtuEntryDescription=jdsuOnmsiOtuEntryDescription, jdsuOnmsiMonitoringTestEntryDescription=jdsuOnmsiMonitoringTestEntryDescription, jdsuOnmsiPonAttributeEntryFindable=jdsuOnmsiPonAttributeEntryFindable, jdsuOnmsiCentralOfficeFind=jdsuOnmsiCentralOfficeFind, jdsuOnmsiAlarmSplitterPeakEntry=jdsuOnmsiAlarmSplitterPeakEntry, jdsuOnmsiAlarmResendEventsError=jdsuOnmsiAlarmResendEventsError, jdsuOnmsiMonitoringTestStartTestExecute=jdsuOnmsiMonitoringTestStartTestExecute, jdsuOnmsiHomeTerminationTypeConfGroup=jdsuOnmsiHomeTerminationTypeConfGroup, jdsuOnmsiLinkAdditionalAttributeTable=jdsuOnmsiLinkAdditionalAttributeTable, jdsuOnmsiPeakEntryTestInternalKey=jdsuOnmsiPeakEntryTestInternalKey, jdsuOnmsiPonFindError=jdsuOnmsiPonFindError, jdsuOnmsiMonitoringTestAttributeEntryFindable=jdsuOnmsiMonitoringTestAttributeEntryFindable, jdsuOnmsiOtuFunctions=jdsuOnmsiOtuFunctions, jdsuOnmsiCentralOfficeAttributeEntry=jdsuOnmsiCentralOfficeAttributeEntry, jdsuOnmsiLinkUpdate=jdsuOnmsiLinkUpdate, jdsuOnmsiAlarmEventEntryEventTemperatureSpecificInfos=jdsuOnmsiAlarmEventEntryEventTemperatureSpecificInfos, jdsuOnmsiMonitoringTestService=jdsuOnmsiMonitoringTestService, jdsuOnmsiLinkAttributeEntryFindable=jdsuOnmsiLinkAttributeEntryFindable, jdsuOnmsiPonEntrySchedulingConfiguration=jdsuOnmsiPonEntrySchedulingConfiguration, jdsuOnmsiMonitoringTestEntryLocalizationConfiguration=jdsuOnmsiMonitoringTestEntryLocalizationConfiguration, jdsuOnmsiImAlive=jdsuOnmsiImAlive, jdsuOnmsiAlarmEventEntryAlarmStrainSpecificInfos=jdsuOnmsiAlarmEventEntryAlarmStrainSpecificInfos, jdsuOnmsiAlarmEventEntryAlarmAckStatus=jdsuOnmsiAlarmEventEntryAlarmAckStatus, jdsuOnmsiHomeAttributeLoadExecute=jdsuOnmsiHomeAttributeLoadExecute, jdsuOnmsiAlarmClear=jdsuOnmsiAlarmClear, jdsuOnmsiOtuConfGroup=jdsuOnmsiOtuConfGroup, jdsuOnmsiAlarmUnAck=jdsuOnmsiAlarmUnAck, jdsuOnmsiCentralOfficeData=jdsuOnmsiCentralOfficeData, jdsuOnmsiAlarmEventEntryEventGpsCoordinatesSpecificInfos=jdsuOnmsiAlarmEventEntryEventGpsCoordinatesSpecificInfos, jdsuOnmsiOtuPortEntryLinkInternalKey=jdsuOnmsiOtuPortEntryLinkInternalKey, jdsuOnmsiAlarmEventEntryAlarmMonitoringTestSpecificInfos=jdsuOnmsiAlarmEventEntryAlarmMonitoringTestSpecificInfos, jdsuOnmsiEventsConfGroup=jdsuOnmsiEventsConfGroup, jdsuOnmsiAlarmEventEntryEventTime=jdsuOnmsiAlarmEventEntryEventTime, jdsuOnmsiAlarmEventEntryAlarmSpecificProblem=jdsuOnmsiAlarmEventEntryAlarmSpecificProblem, jdsuOnmsiHomeData=jdsuOnmsiHomeData, jdsuOnmsiCentralOfficeAttributeEntryUpdatable=jdsuOnmsiCentralOfficeAttributeEntryUpdatable, jdsuOnmsiHomeTerminationTypeEntryInternalKey=jdsuOnmsiHomeTerminationTypeEntryInternalKey, jdsuOnmsiHomeTable=jdsuOnmsiHomeTable, jdsuOnmsiSnmpConfigurationReload=jdsuOnmsiSnmpConfigurationReload, jdsuOnmsiLinkAttributeLoadError=jdsuOnmsiLinkAttributeLoadError, jdsuOnmsiOtuSwitchTable=jdsuOnmsiOtuSwitchTable, jdsuOnmsiHomeConfGroup=jdsuOnmsiHomeConfGroup, jdsuOnmsiAlarmEventEntryEventProbableCause=jdsuOnmsiAlarmEventEntryEventProbableCause, jdsuOnmsiHomeStartTestError=jdsuOnmsiHomeStartTestError, jdsuOnmsiOtuAttributeEntryFindable=jdsuOnmsiOtuAttributeEntryFindable, jdsuOnmsiAlarmEventEntryAlarmLocalizationSpecificInfos=jdsuOnmsiAlarmEventEntryAlarmLocalizationSpecificInfos, jdsuOnmsiHomeAttributeEntryUpdatable=jdsuOnmsiHomeAttributeEntryUpdatable, jdsuOnmsiPeakEntryHomeInternalKey=jdsuOnmsiPeakEntryHomeInternalKey, jdsuOnmsiPonAdditionalAttributeTable=jdsuOnmsiPonAdditionalAttributeTable, jdsuOnmsiProductDescr=jdsuOnmsiProductDescr, jdsuOnmsiAlarmEventEntryAlarmProbableCause=jdsuOnmsiAlarmEventEntryAlarmProbableCause, jdsuOnmsiCentralOfficeAdditionalAttributeEntryName=jdsuOnmsiCentralOfficeAdditionalAttributeEntryName, jdsuOnmsiLinkUpdateError=jdsuOnmsiLinkUpdateError, jdsuOnmsiMonitoringTestEntryName=jdsuOnmsiMonitoringTestEntryName, jdsuOnmsiPeakFindParamAttribute=jdsuOnmsiPeakFindParamAttribute, jdsuOnmsiAlarmEventEntryEventUserIdentifier=jdsuOnmsiAlarmEventEntryEventUserIdentifier, jdsuOnmsiImAliveAlarmEventSequence=jdsuOnmsiImAliveAlarmEventSequence, jdsuOnmsiOtuAttributeLoadError=jdsuOnmsiOtuAttributeLoadError, jdsuOnmsiAlarmResynchronizeError=jdsuOnmsiAlarmResynchronizeError, jdsuOnmsiLinkEntryInternalKey=jdsuOnmsiLinkEntryInternalKey, jdsuOnmsiCentralOfficeAttributeLoad=jdsuOnmsiCentralOfficeAttributeLoad, jdsuOnmsiMonitoringTestAttributeEntryAdditional=jdsuOnmsiMonitoringTestAttributeEntryAdditional, jdsuOnmsiAlarmEventEntryAlarmRaisedTime=jdsuOnmsiAlarmEventEntryAlarmRaisedTime, jdsuOnmsiOtuFindParamAttribute=jdsuOnmsiOtuFindParamAttribute, jdsuOnmsiAlarmEventEntryAlarmAdditionalAttributes=jdsuOnmsiAlarmEventEntryAlarmAdditionalAttributes, jdsuOnmsiAlarmResendEvents=jdsuOnmsiAlarmResendEvents, jdsuOnmsiLinkAdditionalAttributeEntry=jdsuOnmsiLinkAdditionalAttributeEntry, jdsuOnmsiLinkAttributeEntry=jdsuOnmsiLinkAttributeEntry, jdsuOnmsiOtuSwitchEntryOtuInternalKey=jdsuOnmsiOtuSwitchEntryOtuInternalKey, jdsuOnmsiOtuFind=jdsuOnmsiOtuFind, jdsuOnmsiAlarmEventEntryEventPointToPointSpecificInfos=jdsuOnmsiAlarmEventEntryEventPointToPointSpecificInfos, jdsuOnmsiLinkFindExecute=jdsuOnmsiLinkFindExecute, jdsuOnmsiOtuOtdrEntry=jdsuOnmsiOtuOtdrEntry, jdsuOnmsiAlarmSplitterPeakEntryPerceivedSeverity=jdsuOnmsiAlarmSplitterPeakEntryPerceivedSeverity, jdsuOnmsiMonitoringTestFindExecute=jdsuOnmsiMonitoringTestFindExecute, jdsuOnmsiAlarmSplitterPeakEntryReferenceLevel=jdsuOnmsiAlarmSplitterPeakEntryReferenceLevel, jdsuOnmsiCentralOfficeFindParamValue=jdsuOnmsiCentralOfficeFindParamValue, JdsuOnmsiSeverity=JdsuOnmsiSeverity, jdsuOnmsiAlarmEventTable=jdsuOnmsiAlarmEventTable, jdsuOnmsiAlarmEventEntryAlarmPerceivedSeverity=jdsuOnmsiAlarmEventEntryAlarmPerceivedSeverity, jdsuOnmsiPeakEntryRefIsPowerMeasured=jdsuOnmsiPeakEntryRefIsPowerMeasured, jdsuOnmsiPonEntryInternalKey=jdsuOnmsiPonEntryInternalKey, jdsuOnmsiAlarmClearParamInternalKey=jdsuOnmsiAlarmClearParamInternalKey, jdsuOnmsiPonEntryName=jdsuOnmsiPonEntryName, PYSNMP_MODULE_ID=jdsuOnmsiMib, jdsuOnmsiLinkGetExecute=jdsuOnmsiLinkGetExecute, jdsuOnmsiOtuPortEntryPosition=jdsuOnmsiOtuPortEntryPosition, jdsuOnmsiAlarmSplitterPeakEntryInternalKey=jdsuOnmsiAlarmSplitterPeakEntryInternalKey, jdsuOnmsiAlarmSplitterPeakLoadError=jdsuOnmsiAlarmSplitterPeakLoadError, jdsuOnmsiOtuAdditionalAttributeEntryInternalKey=jdsuOnmsiOtuAdditionalAttributeEntryInternalKey, jdsuOnmsiPonEntryPortInternalKey=jdsuOnmsiPonEntryPortInternalKey, jdsuOnmsiSnmpConfig=jdsuOnmsiSnmpConfig, jdsuOnmsiAlarmEventEntryEventFiberLengthExtensionSpecificInfos=jdsuOnmsiAlarmEventEntryEventFiberLengthExtensionSpecificInfos, jdsuOnmsiCentralOfficeAttributeEntryAdditional=jdsuOnmsiCentralOfficeAttributeEntryAdditional, jdsuOnmsiLinkFindParamValue=jdsuOnmsiLinkFindParamValue, jdsuOnmsiAlarmEventEntryEventOrlSpecificInfos=jdsuOnmsiAlarmEventEntryEventOrlSpecificInfos, jdsuOnmsiPonAttributeLoadError=jdsuOnmsiPonAttributeLoadError, jdsuOnmsiOtuAttributeLoadExecute=jdsuOnmsiOtuAttributeLoadExecute, jdsuOnmsiAlarmEventEntryAlarmAttenuationSpecificInfos=jdsuOnmsiAlarmEventEntryAlarmAttenuationSpecificInfos, jdsuOnmsiCentralOfficeEntryInternalKey=jdsuOnmsiCentralOfficeEntryInternalKey, jdsuOnmsiCentralOfficeFunctions=jdsuOnmsiCentralOfficeFunctions, jdsuOnmsiPeakEntry=jdsuOnmsiPeakEntry, jdsuOnmsiHomeEntryLatestPeakInternalKey=jdsuOnmsiHomeEntryLatestPeakInternalKey, jdsuOnmsiAlarmEventEntryAlarmOriginatingEntityOid=jdsuOnmsiAlarmEventEntryAlarmOriginatingEntityOid, jdsuOnmsiPonEntryOtuInternalKey=jdsuOnmsiPonEntryOtuInternalKey, jdsuOnmsiCentralOfficeAdditionalAttributeEntryValue=jdsuOnmsiCentralOfficeAdditionalAttributeEntryValue, jdsuOnmsiAlarmEventEntryEventAckStatus=jdsuOnmsiAlarmEventEntryEventAckStatus, jdsuOnmsiHomeTerminationTypeLoadError=jdsuOnmsiHomeTerminationTypeLoadError, jdsuOnmsiLinkAdditionalAttributeEntryName=jdsuOnmsiLinkAdditionalAttributeEntryName, jdsuOnmsiAlarmResendEventsParamSequence=jdsuOnmsiAlarmResendEventsParamSequence, jdsuOnmsiHomeGetExecute=jdsuOnmsiHomeGetExecute, jdsuOnmsiCentralOfficeFindExecute=jdsuOnmsiCentralOfficeFindExecute, jdsuOnmsiPeakEntryIsAReference=jdsuOnmsiPeakEntryIsAReference, jdsuOnmsiAlarmAckExecute=jdsuOnmsiAlarmAckExecute, jdsuOnmsiMonitoringTestAttributeTable=jdsuOnmsiMonitoringTestAttributeTable, jdsuOnmsiPonStartTest=jdsuOnmsiPonStartTest, jdsuOnmsiPeakEntryType=jdsuOnmsiPeakEntryType, jdsuOnmsiProductLocation=jdsuOnmsiProductLocation, jdsuOnmsiAlarmEventEntryAlarmOriginatingEntityKind=jdsuOnmsiAlarmEventEntryAlarmOriginatingEntityKind, jdsuOnmsiPonService=jdsuOnmsiPonService, jdsuOnmsiAlarmServiceConfGroup=jdsuOnmsiAlarmServiceConfGroup, jdsuOnmsiOtuEntryInternalKey=jdsuOnmsiOtuEntryInternalKey, jdsuOnmsiPonGetParamInternalKey=jdsuOnmsiPonGetParamInternalKey, jdsuOnmsiHomeAdditionalAttributeEntryInternalKey=jdsuOnmsiHomeAdditionalAttributeEntryInternalKey, JdsuOnmsiAlarmClearStatus=JdsuOnmsiAlarmClearStatus, JdsuOnmsiOtdrPosition=JdsuOnmsiOtdrPosition, jdsuOnmsiLinkEntryMeasureEnabled=jdsuOnmsiLinkEntryMeasureEnabled, jdsuOnmsiPonEntrySeverity=jdsuOnmsiPonEntrySeverity, jdsuOnmsiMonitoringTestFindParamValue=jdsuOnmsiMonitoringTestFindParamValue, jdsuOnmsiAlarmResendEventsExecute=jdsuOnmsiAlarmResendEventsExecute, jdsuOnmsiPonConfGroup=jdsuOnmsiPonConfGroup, jdsuOnmsiMonitoringTestEntrySchedulingConfiguration=jdsuOnmsiMonitoringTestEntrySchedulingConfiguration, jdsuOnmsiLinkAttributeTable=jdsuOnmsiLinkAttributeTable, jdsuOnmsiAlarmEventEntryAlarmPeakSpecificInfos=jdsuOnmsiAlarmEventEntryAlarmPeakSpecificInfos, jdsuOnmsiAlarmEventEntryAlarmOriginatingEntityName=jdsuOnmsiAlarmEventEntryAlarmOriginatingEntityName, jdsuOnmsiAlarmSplitterPeakEntryMeasuredTopDistance=jdsuOnmsiAlarmSplitterPeakEntryMeasuredTopDistance, jdsuOnmsiOtuEntry=jdsuOnmsiOtuEntry, jdsuOnmsiAlarmSplitterPeakLoadParamEventInternalKey=jdsuOnmsiAlarmSplitterPeakLoadParamEventInternalKey, jdsuOnmsiServices=jdsuOnmsiServices, jdsuOnmsiHomeEntryHomeTerminationTypeInternalKey=jdsuOnmsiHomeEntryHomeTerminationTypeInternalKey, jdsuOnmsiAlarmEventEntryAlarmInternalKey=jdsuOnmsiAlarmEventEntryAlarmInternalKey, jdsuOnmsiMonitoringTestAttributeEntry=jdsuOnmsiMonitoringTestAttributeEntry, jdsuOnmsiHomeTerminationTypeLoadExecute=jdsuOnmsiHomeTerminationTypeLoadExecute, jdsuOnmsiOtuOtdrEntryType=jdsuOnmsiOtuOtdrEntryType, jdsuOnmsiOtuSwitchEntryPosition=jdsuOnmsiOtuSwitchEntryPosition, jdsuOnmsiPeakConfGroup=jdsuOnmsiPeakConfGroup, jdsuOnmsiHomeEntryName=jdsuOnmsiHomeEntryName, jdsuOnmsiAlarmSplitterPeakEntryMeasuredBottomDistance=jdsuOnmsiAlarmSplitterPeakEntryMeasuredBottomDistance, jdsuOnmsiOtuPortEntryInternalKey=jdsuOnmsiOtuPortEntryInternalKey, jdsuOnmsiPonAdditionalAttributeEntryInternalKey=jdsuOnmsiPonAdditionalAttributeEntryInternalKey, jdsuOnmsiAlarmSplitterPeakEntryMeasuredLevel=jdsuOnmsiAlarmSplitterPeakEntryMeasuredLevel, jdsuOnmsiOtuEntryCentralOfficeInternalKey=jdsuOnmsiOtuEntryCentralOfficeInternalKey, jdsuOnmsiLinkAttributeLoad=jdsuOnmsiLinkAttributeLoad, jdsuOnmsiImAliveTrap=jdsuOnmsiImAliveTrap, jdsuOnmsiImAliveText=jdsuOnmsiImAliveText, jdsuOnmsiHomeTerminationTypeEntryDescription=jdsuOnmsiHomeTerminationTypeEntryDescription, jdsuOnmsiHomeStartTest=jdsuOnmsiHomeStartTest, jdsuOnmsiMonitoringTestResultTrap=jdsuOnmsiMonitoringTestResultTrap, jdsuOnmsiPonAttributeEntry=jdsuOnmsiPonAttributeEntry, jdsuOnmsiAlarmSplitterPeakEntryPeakMeasurementValid=jdsuOnmsiAlarmSplitterPeakEntryPeakMeasurementValid, jdsuOnmsiHomeGetError=jdsuOnmsiHomeGetError, jdsuOnmsiMonitoringTestStartTestError=jdsuOnmsiMonitoringTestStartTestError, jdsuOnmsiServicesConfGroups=jdsuOnmsiServicesConfGroups, jdsuOnmsiAlarmEventEntryEventPonSpecificInfos=jdsuOnmsiAlarmEventEntryEventPonSpecificInfos, jdsuOnmsiAlarmFunctions=jdsuOnmsiAlarmFunctions, jdsuOnmsiPonGetExecute=jdsuOnmsiPonGetExecute, jdsuOnmsiAlarmEventEntryAlarmPointToPointSpecificInfos=jdsuOnmsiAlarmEventEntryAlarmPointToPointSpecificInfos, jdsuOnmsiAlarmEventEntryAlarmAdditionalText=jdsuOnmsiAlarmEventEntryAlarmAdditionalText, jdsuOnmsiCentralOfficeService=jdsuOnmsiCentralOfficeService, jdsuOnmsiAlarmUnAckError=jdsuOnmsiAlarmUnAckError, jdsuOnmsiMonitoringTestFindParamAttribute=jdsuOnmsiMonitoringTestFindParamAttribute, jdsuOnmsiHomeAttributeEntryFindable=jdsuOnmsiHomeAttributeEntryFindable, jdsuOnmsiHomeFindParamAttribute=jdsuOnmsiHomeFindParamAttribute, jdsuOnmsiConf=jdsuOnmsiConf, jdsuOnmsiPeakData=jdsuOnmsiPeakData, jdsuOnmsiOtuOtdrEntryInternalKey=jdsuOnmsiOtuOtdrEntryInternalKey, jdsuOnmsiOtuOtdrEntryPosition=jdsuOnmsiOtuOtdrEntryPosition, jdsuOnmsiCentralOfficeAttributeEntryFindable=jdsuOnmsiCentralOfficeAttributeEntryFindable, jdsuOnmsiAlarmEventEntryEventPerceivedSeverity=jdsuOnmsiAlarmEventEntryEventPerceivedSeverity, jdsuOnmsiPonFindExecute=jdsuOnmsiPonFindExecute, jdsuOnmsiAlarmTypesTable=jdsuOnmsiAlarmTypesTable, jdsuOnmsiAlarmSplitterPeakEntryName=jdsuOnmsiAlarmSplitterPeakEntryName, jdsuOnmsiLinkEntryName=jdsuOnmsiLinkEntryName)
mibBuilder.exportSymbols("JDSU-ONMSI-MIB", jdsuOnmsiPeakFind=jdsuOnmsiPeakFind, jdsuOnmsiAlarmEventEntryEventAdditionalText=jdsuOnmsiAlarmEventEntryEventAdditionalText, JdsuOnmsiPeakStatus=JdsuOnmsiPeakStatus, jdsuOnmsiHomeGet=jdsuOnmsiHomeGet, jdsuOnmsiMonitoringTestEntrySeverity=jdsuOnmsiMonitoringTestEntrySeverity, jdsuOnmsiOtuSwitchEntryOutputs=jdsuOnmsiOtuSwitchEntryOutputs, jdsuOnmsiOtuEntryDeviceName=jdsuOnmsiOtuEntryDeviceName, jdsuOnmsiOtuPortEntry=jdsuOnmsiOtuPortEntry, jdsuOnmsiHomeEntryVip=jdsuOnmsiHomeEntryVip, jdsuOnmsiPonAttributeTable=jdsuOnmsiPonAttributeTable, jdsuOnmsiCentralOfficeAdditionalAttributeEntryInternalKey=jdsuOnmsiCentralOfficeAdditionalAttributeEntryInternalKey, jdsuOnmsiAlarmUnAckParamInternalKey=jdsuOnmsiAlarmUnAckParamInternalKey, jdsuOnmsiCentralOfficeFindError=jdsuOnmsiCentralOfficeFindError, jdsuOnmsiLinkEntryDescription=jdsuOnmsiLinkEntryDescription, jdsuOnmsiMonitoringTestAdditionalAttributeTable=jdsuOnmsiMonitoringTestAdditionalAttributeTable, jdsuOnmsiPonAttributeLoad=jdsuOnmsiPonAttributeLoad, jdsuOnmsiAlarmSplitterPeakLoadExecute=jdsuOnmsiAlarmSplitterPeakLoadExecute, jdsuOnmsiCentralOfficeAttributeTable=jdsuOnmsiCentralOfficeAttributeTable, jdsuOnmsiCentralOfficeGet=jdsuOnmsiCentralOfficeGet, jdsuOnmsiPonAttributeEntryName=jdsuOnmsiPonAttributeEntryName, jdsuOnmsiOtuEntryIpAddress=jdsuOnmsiOtuEntryIpAddress, jdsuOnmsiOtuAttributeEntry=jdsuOnmsiOtuAttributeEntry, jdsuOnmsiAlarmAckParamInternalKey=jdsuOnmsiAlarmAckParamInternalKey, jdsuOnmsiAlarmEventEntryAlarmGpsCoordinatesSpecificInfos=jdsuOnmsiAlarmEventEntryAlarmGpsCoordinatesSpecificInfos, jdsuOnmsiLinkAttributeEntryUpdatable=jdsuOnmsiLinkAttributeEntryUpdatable, jdsuOnmsiPeakEntryLevel=jdsuOnmsiPeakEntryLevel, JdsuOnmsiAlarmEventType=JdsuOnmsiAlarmEventType, jdsuOnmsiHomeStartTestExecute=jdsuOnmsiHomeStartTestExecute, jdsuOnmsiOtuGetPortsExecute=jdsuOnmsiOtuGetPortsExecute, jdsuOnmsiProduct=jdsuOnmsiProduct, jdsuOnmsiHomeEntryPonInternalKey=jdsuOnmsiHomeEntryPonInternalKey, jdsuOnmsiAlarmSplitterPeakTable=jdsuOnmsiAlarmSplitterPeakTable, jdsuOnmsiMonitoringTestFindError=jdsuOnmsiMonitoringTestFindError, jdsuOnmsiOtuPortEntryModuleInternalKey=jdsuOnmsiOtuPortEntryModuleInternalKey, jdsuOnmsiCentralOfficeGetParamInternalKey=jdsuOnmsiCentralOfficeGetParamInternalKey, jdsuOnmsiLinkServiceConfGroup=jdsuOnmsiLinkServiceConfGroup, JdsuOnmsiAlarmAckStatus=JdsuOnmsiAlarmAckStatus, jdsuOnmsiMonitoringTestAdditionalAttributeEntryValue=jdsuOnmsiMonitoringTestAdditionalAttributeEntryValue, jdsuOnmsiMonitoringTestAttributeLoad=jdsuOnmsiMonitoringTestAttributeLoad, jdsuOnmsiOtuAttributeEntryAdditional=jdsuOnmsiOtuAttributeEntryAdditional, jdsuOnmsiPonAttributeLoadExecute=jdsuOnmsiPonAttributeLoadExecute, jdsuOnmsiOtuData=jdsuOnmsiOtuData, jdsuOnmsiMonitoringTestFunctions=jdsuOnmsiMonitoringTestFunctions, jdsuOnmsiPeakGetError=jdsuOnmsiPeakGetError, jdsuOnmsiOtuOtdrTable=jdsuOnmsiOtuOtdrTable, jdsuOnmsiImAlivePeriodMin=jdsuOnmsiImAlivePeriodMin, jdsuOnmsiHomeService=jdsuOnmsiHomeService, jdsuOnmsiHomeEntryInternalKey=jdsuOnmsiHomeEntryInternalKey, JdsuOnmsiPeakType=JdsuOnmsiPeakType, jdsuOnmsiPeakEntrySeverity=jdsuOnmsiPeakEntrySeverity, jdsuOnmsiPonData=jdsuOnmsiPonData, jdsuOnmsiAlarmEventEntryEventLocalizationSpecificInfos=jdsuOnmsiAlarmEventEntryEventLocalizationSpecificInfos, jdsuOnmsiLinkEntryOtuInternalKey=jdsuOnmsiLinkEntryOtuInternalKey, jdsuOnmsiPeakFunctions=jdsuOnmsiPeakFunctions, jdsuOnmsiHomeAdditionalAttributeEntry=jdsuOnmsiHomeAdditionalAttributeEntry, jdsuOnmsiAlarmSplitterPeakLoad=jdsuOnmsiAlarmSplitterPeakLoad, jdsuOnmsiLinkAttributeLoadExecute=jdsuOnmsiLinkAttributeLoadExecute, jdsuOnmsiOtuService=jdsuOnmsiOtuService, jdsuOnmsiAlarmSpecificProblemsEntry=jdsuOnmsiAlarmSpecificProblemsEntry, jdsuOnmsiLinkGet=jdsuOnmsiLinkGet, jdsuOnmsiCentralOfficeGetError=jdsuOnmsiCentralOfficeGetError, jdsuOnmsiMonitoringTestAttributeEntryUpdatable=jdsuOnmsiMonitoringTestAttributeEntryUpdatable, jdsuOnmsiOtuAdditionalAttributeEntry=jdsuOnmsiOtuAdditionalAttributeEntry, jdsuOnmsiOtuEntrySoftwareVersion=jdsuOnmsiOtuEntrySoftwareVersion, jdsuOnmsiAlarmData=jdsuOnmsiAlarmData, jdsuOnmsiMonitoringTestAdditionalAttributeEntry=jdsuOnmsiMonitoringTestAdditionalAttributeEntry, jdsuOnmsiMonitoringTestAttributeLoadError=jdsuOnmsiMonitoringTestAttributeLoadError, jdsuOnmsiHomeAttributeEntry=jdsuOnmsiHomeAttributeEntry, jdsuOnmsiPonFunctions=jdsuOnmsiPonFunctions, jdsuOnmsiAlarmEventEntryEventPeakSpecificInfos=jdsuOnmsiAlarmEventEntryEventPeakSpecificInfos, jdsuOnmsiAlarmEventEntryAlarmOrlSpecificInfos=jdsuOnmsiAlarmEventEntryAlarmOrlSpecificInfos, jdsuOnmsiOtuFindParamValue=jdsuOnmsiOtuFindParamValue, jdsuOnmsiCentralOfficeAttributeLoadExecute=jdsuOnmsiCentralOfficeAttributeLoadExecute, jdsuOnmsiPonFindParamAttribute=jdsuOnmsiPonFindParamAttribute, jdsuOnmsiHomeFindParamValue=jdsuOnmsiHomeFindParamValue, jdsuOnmsiPonStartTestError=jdsuOnmsiPonStartTestError, jdsuOnmsiMonitoringTestAttributeEntryName=jdsuOnmsiMonitoringTestAttributeEntryName, jdsuOnmsiLinkAdditionalAttributeEntryInternalKey=jdsuOnmsiLinkAdditionalAttributeEntryInternalKey, jdsOnmsiAdministrationConfGroups=jdsOnmsiAdministrationConfGroups, jdsuOnmsiLinkEntrySeverity=jdsuOnmsiLinkEntrySeverity, jdsuOnmsiPonAttributeEntryAdditional=jdsuOnmsiPonAttributeEntryAdditional, jdsuOnmsiMonitoringTestEntryInternalKey=jdsuOnmsiMonitoringTestEntryInternalKey, jdsuOnmsiHomeFindExecute=jdsuOnmsiHomeFindExecute, jdsuOnmsiPonEntryDescription=jdsuOnmsiPonEntryDescription, jdsuOnmsiHomeTerminationTypeLoad=jdsuOnmsiHomeTerminationTypeLoad, jdsuOnmsiHomeFind=jdsuOnmsiHomeFind, jdsuOnmsiMib=jdsuOnmsiMib, jdsuOnmsiHomeTerminationTypeEntryName=jdsuOnmsiHomeTerminationTypeEntryName, jdsuOnmsiMonitoringTestGetError=jdsuOnmsiMonitoringTestGetError, jdsuOnmsiMonitoringTestGet=jdsuOnmsiMonitoringTestGet, jdsuOnmsiAlarmAck=jdsuOnmsiAlarmAck, jdsuOnmsiAlarmClearError=jdsuOnmsiAlarmClearError, jdsuOnmsiAlarmEventEntryEventInternalKey=jdsuOnmsiAlarmEventEntryEventInternalKey, jdsuOnmsiOtuPortEntryOtuInternalKey=jdsuOnmsiOtuPortEntryOtuInternalKey, jdsuOnmsiPonTestResultTrap=jdsuOnmsiPonTestResultTrap, jdsuOnmsiPeakTable=jdsuOnmsiPeakTable, jdsuOnmsiProductName=jdsuOnmsiProductName, jdsuOnmsiHomeStartTestParamInternalKey=jdsuOnmsiHomeStartTestParamInternalKey, jdsuOnmsiOtuEntrySerialNumber=jdsuOnmsiOtuEntrySerialNumber, jdsuOnmsiOtuOtdrEntryOtuInternalKey=jdsuOnmsiOtuOtdrEntryOtuInternalKey, jdsuOnmsiHomeFindError=jdsuOnmsiHomeFindError, JdsuOnmsiInternalKey=JdsuOnmsiInternalKey, jdsuOnmsiAlarmUnClear=jdsuOnmsiAlarmUnClear, jdsuOnmsiPeakService=jdsuOnmsiPeakService, jdsuOnmsiOtuOtdrEntrySerialNumber=jdsuOnmsiOtuOtdrEntrySerialNumber, jdsuOnmsiAlarmEventEntryAlarmOriginatingEntityInternalKey=jdsuOnmsiAlarmEventEntryAlarmOriginatingEntityInternalKey, jdsuOnmsiEvents=jdsuOnmsiEvents, jdsuOnmsiOtuTable=jdsuOnmsiOtuTable, jdsuOnmsiMonitoringTestStartTest=jdsuOnmsiMonitoringTestStartTest, jdsuOnmsiPeakEntryRefDistance=jdsuOnmsiPeakEntryRefDistance, jdsuOnmsiCentralOfficeAdditionalAttributeTable=jdsuOnmsiCentralOfficeAdditionalAttributeTable, jdsuOnmsiOtuSwitchEntryRemote=jdsuOnmsiOtuSwitchEntryRemote, jdsuOnmsiMonitoringTestServiceConfGroup=jdsuOnmsiMonitoringTestServiceConfGroup, jdsuOnmsiAlarmEventTrap=jdsuOnmsiAlarmEventTrap, jdsuOnmsiAlarmUnAckExecute=jdsuOnmsiAlarmUnAckExecute, jdsuOnmsiSnmpConfigConfGroup=jdsuOnmsiSnmpConfigConfGroup, jdsuOnmsiHomeEntryDescription=jdsuOnmsiHomeEntryDescription, jdsuOnmsiHomeAdditionalAttributeEntryValue=jdsuOnmsiHomeAdditionalAttributeEntryValue, jdsuOnmsiLinkAttributeEntryName=jdsuOnmsiLinkAttributeEntryName, jdsuOnmsiAlarmSpecificProblemsTable=jdsuOnmsiAlarmSpecificProblemsTable, jdsuOnmsiPeakEntryDistance=jdsuOnmsiPeakEntryDistance, jdsuOnmsiAlarmClearExecute=jdsuOnmsiAlarmClearExecute, jdsuOnmsiCentralOfficeAttributeEntryName=jdsuOnmsiCentralOfficeAttributeEntryName, jdsuOnmsiPeakGetExecute=jdsuOnmsiPeakGetExecute, jdsuOnmsiPonAdditionalAttributeEntryName=jdsuOnmsiPonAdditionalAttributeEntryName, jdsuOnmsiCentralOfficeAttributeLoadError=jdsuOnmsiCentralOfficeAttributeLoadError, jdsuOnmsiLinkFind=jdsuOnmsiLinkFind, jdsuOnmsiMonitoringTestData=jdsuOnmsiMonitoringTestData, jdsuOnmsiOtuAdditionalAttributeEntryValue=jdsuOnmsiOtuAdditionalAttributeEntryValue, jdsuOnmsiAlarmEventEntrySequence=jdsuOnmsiAlarmEventEntrySequence, jdsuOnmsiMonitoringTestStartTestParamInternalKey=jdsuOnmsiMonitoringTestStartTestParamInternalKey, jdsuOnmsiMonitoringTestEntry=jdsuOnmsiMonitoringTestEntry, jdsuOnmsiOtuPortTable=jdsuOnmsiOtuPortTable, jdsuOnmsiOtuEntrySeverity=jdsuOnmsiOtuEntrySeverity, jdsuOnmsiCentralOfficeTable=jdsuOnmsiCentralOfficeTable, jdsuOnmsiOtuGetError=jdsuOnmsiOtuGetError, jdsuOnmsiOtuFindError=jdsuOnmsiOtuFindError, jdsuOnmsiOtuGetParamInternalKey=jdsuOnmsiOtuGetParamInternalKey, jdsuOnmsiOtuGetPorts=jdsuOnmsiOtuGetPorts, jdsuOnmsiAlarmEventEntryAlarmClearStatus=jdsuOnmsiAlarmEventEntryAlarmClearStatus, jdsuOnmsiLinkUpdateExecute=jdsuOnmsiLinkUpdateExecute, jdsuOnmsiHomeEntryLatestPeakSeverity=jdsuOnmsiHomeEntryLatestPeakSeverity, jdsuOnmsiOtuAttributeEntryName=jdsuOnmsiOtuAttributeEntryName, jdsuOnmsiPeakEntryPower=jdsuOnmsiPeakEntryPower, jdsuOnmsiPonEntry=jdsuOnmsiPonEntry, jdsuOnmsiLinkAttributeEntryAdditional=jdsuOnmsiLinkAttributeEntryAdditional, jdsuOnmsiHomeEntryHomeIdentifier=jdsuOnmsiHomeEntryHomeIdentifier, jdsuOnmsiPeakEntryDate=jdsuOnmsiPeakEntryDate, jdsuOnmsiCentralOfficeEntryDescription=jdsuOnmsiCentralOfficeEntryDescription, jdsuOnmsiPonEntryLatestTestInternalKey=jdsuOnmsiPonEntryLatestTestInternalKey, jdsuOnmsiImAliveConfGroup=jdsuOnmsiImAliveConfGroup, jdsuOnmsiPonStartTestParamInternalKey=jdsuOnmsiPonStartTestParamInternalKey, jdsuOnmsiOtuSwitchEntryName=jdsuOnmsiOtuSwitchEntryName, jdsuOnmsiAdministration=jdsuOnmsiAdministration, jdsuOnmsiAlarmUnClearParamInternalKey=jdsuOnmsiAlarmUnClearParamInternalKey, jdsuOnmsiAlarmEventEntryAlarmSplitterSpecificInfos=jdsuOnmsiAlarmEventEntryAlarmSplitterSpecificInfos, jdsuOnmsiPeakEntryIsPowerMeasured=jdsuOnmsiPeakEntryIsPowerMeasured, jdsuOnmsiAlarmSplitterPeakEntryReferenceTopDistance=jdsuOnmsiAlarmSplitterPeakEntryReferenceTopDistance, jdsuOnmsiOtuAdditionalAttributeEntryName=jdsuOnmsiOtuAdditionalAttributeEntryName, jdsuOnmsiPeakEntryInternalKey=jdsuOnmsiPeakEntryInternalKey, jdsuOnmsiAlarmEventEntry=jdsuOnmsiAlarmEventEntry, jdsuOnmsiOtuAttributeTable=jdsuOnmsiOtuAttributeTable, jdsuOnmsiAlarmSplitterPeakEntryPreviousSeverity=jdsuOnmsiAlarmSplitterPeakEntryPreviousSeverity, jdsuOnmsiHomeGetParamInternalKey=jdsuOnmsiHomeGetParamInternalKey, jdsuOnmsiLinkAdditionalAttributeEntryValue=jdsuOnmsiLinkAdditionalAttributeEntryValue, jdsuOnmsiLinkTable=jdsuOnmsiLinkTable, jdsuOnmsiOtuGetPortsError=jdsuOnmsiOtuGetPortsError, jdsuOnmsiLinkService=jdsuOnmsiLinkService, jdsuOnmsiHomeAdditionalAttributeTable=jdsuOnmsiHomeAdditionalAttributeTable, jdsuOnmsiHomeAttributeLoadError=jdsuOnmsiHomeAttributeLoadError, jdsuOnmsiAlarmResynchronizeExecute=jdsuOnmsiAlarmResynchronizeExecute, jdsuOnmsiHomeTerminationTypeTable=jdsuOnmsiHomeTerminationTypeTable, jdsuOnmsiAlarmEventEntryEventAttenuationSpecificInfos=jdsuOnmsiAlarmEventEntryEventAttenuationSpecificInfos, jdsuOnmsiCentralOfficeEntryName=jdsuOnmsiCentralOfficeEntryName, jdsuOnmsiCentralOfficeFindParamAttribute=jdsuOnmsiCentralOfficeFindParamAttribute, jdsuOnmsiHomeAttributeEntryName=jdsuOnmsiHomeAttributeEntryName, jdsuOnmsiAlarmEventEntryAlarmChangedTime=jdsuOnmsiAlarmEventEntryAlarmChangedTime, jdsuOnmsiMonitoringTestFind=jdsuOnmsiMonitoringTestFind, jdsuOnmsiPeakFindError=jdsuOnmsiPeakFindError, jdsuOnmsiMonitoringTestGetParamInternalKey=jdsuOnmsiMonitoringTestGetParamInternalKey, jdsuOnmsiProductGroups=jdsuOnmsiProductGroups, jdsuOnmsiAlarmEventEntryAlarmSystemDN=jdsuOnmsiAlarmEventEntryAlarmSystemDN, jdsuOnmsiAlarmEventEntryEventMonitoringTestSpecificInfos=jdsuOnmsiAlarmEventEntryEventMonitoringTestSpecificInfos, jdsuOnmsiPonAdditionalAttributeEntry=jdsuOnmsiPonAdditionalAttributeEntry, jdsuOnmsiPeakFindParamValue=jdsuOnmsiPeakFindParamValue, jdsuOnmsiPonFindParamValue=jdsuOnmsiPonFindParamValue, jdsuOnmsiAlarmAckError=jdsuOnmsiAlarmAckError, jdsuOnmsiMonitoringTestAdditionalAttributeEntryInternalKey=jdsuOnmsiMonitoringTestAdditionalAttributeEntryInternalKey, jdsuOnmsiMonitoringTestEntryDetectionConfiguration=jdsuOnmsiMonitoringTestEntryDetectionConfiguration, jdsuOnmsiOtuSwitchEntryInputs=jdsuOnmsiOtuSwitchEntryInputs, jdsuOnmsiOtuSwitchEntryInternalKey=jdsuOnmsiOtuSwitchEntryInternalKey, jdsuOnmsiOtuGetExecute=jdsuOnmsiOtuGetExecute, jdsuOnmsiOtuPortEntryPonInternalKey=jdsuOnmsiOtuPortEntryPonInternalKey)
