#
# PySNMP MIB module ALTEON-CHEETAH-BWM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/alteonos/ALTEON-CHEETAH-BWM-MIB
# Produced by pysmi-1.1.12 at Tue Sep 17 09:57:00 2024
# On host fv-az1427-100 platform Linux version 6.5.0-1025-azure by user runner
# Using Python version 3.10.14 (main, Jul 16 2024, 19:03:10) [GCC 11.4.0]
#
aws_switch, = mibBuilder.importSymbols("ALTEON-ROOT-MIB", "aws-switch")
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, MibIdentifier, Counter64, Counter32, Integer32, ObjectIdentity, iso, Bits, TimeTicks, IpAddress, NotificationType, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "MibIdentifier", "Counter64", "Counter32", "Integer32", "ObjectIdentity", "iso", "Bits", "TimeTicks", "IpAddress", "NotificationType", "ModuleIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
bwm = ModuleIdentity((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6))
bwm.setRevisions(('2004-09-01 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: bwm.setRevisionsDescriptions(('Added revision clause for SMIv2 compliance.',))
if mibBuilder.loadTexts: bwm.setLastUpdated('200409010000Z')
if mibBuilder.loadTexts: bwm.setOrganization('Nortel Networks')
if mibBuilder.loadTexts: bwm.setContactInfo('Rekha Singamsetty\n                  Suresh Batchu\n\n                  Nortel Networks\n                  4655 Great America Parkway\n                  Santa Clara CA 95054\n\n                  +1 408 495 2400\n                  rrekha@nortelnetworks.com\n                  sbatchu@nortelnetworks.com')
if mibBuilder.loadTexts: bwm.setDescription('The MIB module for the Alteon OS BWM configuration, statistics and \n         information .')
bwmConfigs = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 1))
bwmStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 2))
bwmOpers = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 3))
bwmGeneralConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 1, 1))
bwmPolicyConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 1, 2))
bwmContractConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 1, 3))
bwmContTimePolicyConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 1, 4))
bwmContractGroupConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 1, 5))
bwmCurCfgGenState = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("on", 2), ("off", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmCurCfgGenState.setStatus('current')
if mibBuilder.loadTexts: bwmCurCfgGenState.setDescription('The state of BWM on the switch.')
bwmNewCfgGenState = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("on", 2), ("off", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwmNewCfgGenState.setStatus('current')
if mibBuilder.loadTexts: bwmNewCfgGenState.setDescription('The state of BWM in the switch.')
bwmCurCfgGenEnforcePolicy = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmCurCfgGenEnforcePolicy.setStatus('current')
if mibBuilder.loadTexts: bwmCurCfgGenEnforcePolicy.setDescription('The state of BWM enforce policies. When disabled, no bandwidth limits\n         will be applied on the queues.')
bwmNewCfgGenEnforcePolicy = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwmNewCfgGenEnforcePolicy.setStatus('current')
if mibBuilder.loadTexts: bwmNewCfgGenEnforcePolicy.setDescription('The state of BWM enforce policies. When disabled, no bandwidth limits\n         will be applied on the queues.')
bwmCurCfgGenSmtpUser = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmCurCfgGenSmtpUser.setStatus('current')
if mibBuilder.loadTexts: bwmCurCfgGenSmtpUser.setDescription('The SMTP user name tp whom the history statistics will be mailed.')
bwmNewCfgGenSmtpUser = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwmNewCfgGenSmtpUser.setStatus('current')
if mibBuilder.loadTexts: bwmNewCfgGenSmtpUser.setDescription('The SMTP user name tp whom the history statistics will be mailed.')
bwmCurCfgGenEmailFrequency = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1440))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmCurCfgGenEmailFrequency.setStatus('current')
if mibBuilder.loadTexts: bwmCurCfgGenEmailFrequency.setDescription('The frequency of BWM email in minutes.')
bwmNewCfgGenEmailFrequency = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1440))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwmNewCfgGenEmailFrequency.setStatus('current')
if mibBuilder.loadTexts: bwmNewCfgGenEmailFrequency.setDescription('The frequency of BWM email in minutes.')
bwmCurCfgGenIPUserLimit = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmCurCfgGenIPUserLimit.setStatus('current')
if mibBuilder.loadTexts: bwmCurCfgGenIPUserLimit.setDescription('The number of entries in the BWM IP user table in 64k|128k|256k|512k format.')
bwmNewCfgGenIPUserLimit = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwmNewCfgGenIPUserLimit.setStatus('current')
if mibBuilder.loadTexts: bwmNewCfgGenIPUserLimit.setDescription('The number of entries in the BWM IP user table in 64k|128k|256k|512k format.')
bwmCurCfgGenEmail = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmCurCfgGenEmail.setStatus('current')
if mibBuilder.loadTexts: bwmCurCfgGenEmail.setDescription('Specifies whether BWM history statistics are sent using email. \n         When disabled, the history statistics are sent using socket based \n         mechanism.')
bwmNewCfgGenEmail = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwmNewCfgGenEmail.setStatus('current')
if mibBuilder.loadTexts: bwmNewCfgGenEmail.setDescription('Specifies whether BWM history statistics are sent using email. \n         When disabled, the history statistics are sent using socket based \n         mechanism.')
bwmCurCfgGenReport = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 1, 1, 13), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmCurCfgGenReport.setStatus('current')
if mibBuilder.loadTexts: bwmCurCfgGenReport.setDescription('IP address of the reporting server.')
bwmNewCfgGenReport = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 1, 1, 14), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwmNewCfgGenReport.setStatus('current')
if mibBuilder.loadTexts: bwmNewCfgGenReport.setDescription('IP address of the reporting server.')
bwmPolicyTableMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmPolicyTableMaxEnt.setStatus('current')
if mibBuilder.loadTexts: bwmPolicyTableMaxEnt.setDescription('The maximum number of rows in the BWM policy configuration table.')
bwmCurCfgPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 1, 2, 2), )
if mibBuilder.loadTexts: bwmCurCfgPolicyTable.setStatus('current')
if mibBuilder.loadTexts: bwmCurCfgPolicyTable.setDescription('The table of BWM traffic policy configuration.')
bwmCurCfgPolicyTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 1, 2, 2, 1), ).setIndexNames((0, "ALTEON-CHEETAH-BWM-MIB", "bwmCurCfgPolicyIndx"))
if mibBuilder.loadTexts: bwmCurCfgPolicyTableEntry.setStatus('current')
if mibBuilder.loadTexts: bwmCurCfgPolicyTableEntry.setDescription('A row in the BWM traffic policy configuration table.')
bwmCurCfgPolicyIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 1, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmCurCfgPolicyIndx.setStatus('current')
if mibBuilder.loadTexts: bwmCurCfgPolicyIndx.setDescription('The index of the row in BWM traffic policy configurations table.')
bwmCurCfgPolicyTosIn = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmCurCfgPolicyTosIn.setStatus('current')
if mibBuilder.loadTexts: bwmCurCfgPolicyTosIn.setDescription("The 'utos' value which overwrites the original TOS value if the \n         traffic for this contract is under the soft limit. With this option\n         set to the default value of '0' the switch will not overwrite the\n         TOS value.")
bwmCurCfgPolicyTosOut = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmCurCfgPolicyTosOut.setStatus('current')
if mibBuilder.loadTexts: bwmCurCfgPolicyTosOut.setDescription("The 'otos' value which overwrites the original TOS value if the \n         traffic is over the soft limit. With this option set to the default \n         value of '0' the switch will not overwrite the TOS value.")
bwmCurCfgPolicyHard = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 1, 2, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmCurCfgPolicyHard.setStatus('current')
if mibBuilder.loadTexts: bwmCurCfgPolicyHard.setDescription('The hard bandwidth limit for this traffic policy. This is the highest\n         amount of bandwidth available to the policy.')
bwmCurCfgPolicySoft = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 1, 2, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmCurCfgPolicySoft.setStatus('current')
if mibBuilder.loadTexts: bwmCurCfgPolicySoft.setDescription('The soft bandwidth limit for this traffic policy.')
bwmCurCfgPolicyResv = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 1, 2, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmCurCfgPolicyResv.setStatus('current')
if mibBuilder.loadTexts: bwmCurCfgPolicyResv.setDescription('The reserve bandwidth limit for this traffic policy. This is the \n         amount of bandwidth always available to this policy.')
bwmCurCfgPolicyBuffer = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 1, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8192, 128000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmCurCfgPolicyBuffer.setStatus('current')
if mibBuilder.loadTexts: bwmCurCfgPolicyBuffer.setDescription('The buffer limit for the traffic policy.')
bwmCurCfgPolicyUserLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 1, 2, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmCurCfgPolicyUserLimit.setStatus('current')
if mibBuilder.loadTexts: bwmCurCfgPolicyUserLimit.setDescription('The per user (IP address) bandwidth limit for this traffic policy.\n         This is the maximum amount of bandwidth available for each distinct\n\t user (IP address) if the contract performs per user rate limiting.')
bwmNewCfgPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 1, 2, 3), )
if mibBuilder.loadTexts: bwmNewCfgPolicyTable.setStatus('current')
if mibBuilder.loadTexts: bwmNewCfgPolicyTable.setDescription('The table of BWM traffi policy configuration.')
bwmNewCfgPolicyTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 1, 2, 3, 1), ).setIndexNames((0, "ALTEON-CHEETAH-BWM-MIB", "bwmNewCfgPolicyIndx"))
if mibBuilder.loadTexts: bwmNewCfgPolicyTableEntry.setStatus('current')
if mibBuilder.loadTexts: bwmNewCfgPolicyTableEntry.setDescription('A row in the BWM traffic policy configuration table.')
bwmNewCfgPolicyIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 1, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmNewCfgPolicyIndx.setStatus('current')
if mibBuilder.loadTexts: bwmNewCfgPolicyIndx.setDescription('The index of the row in BWM traffic policy configurations table.')
bwmNewCfgPolicyTosIn = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 1, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bwmNewCfgPolicyTosIn.setStatus('current')
if mibBuilder.loadTexts: bwmNewCfgPolicyTosIn.setDescription("The 'utos' value which overwrites the original TOS value if the \n         traffic for this contract is under the soft limit. With this option\n         set to the default value of '0' the switch will not overwrite the\n         TOS value.")
bwmNewCfgPolicyTosOut = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 1, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bwmNewCfgPolicyTosOut.setStatus('current')
if mibBuilder.loadTexts: bwmNewCfgPolicyTosOut.setDescription("The 'otos' value which overwrites the original TOS value if the \n         traffic is over the soft limit. With this option set to the default \n         value of '0' the switch will not overwrite the TOS value.")
bwmNewCfgPolicyHard = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 1, 2, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bwmNewCfgPolicyHard.setStatus('current')
if mibBuilder.loadTexts: bwmNewCfgPolicyHard.setDescription('The hard bandwidth limit for this traffic policy. This is the highest\n         amount of bandwidth available to the policy.')
bwmNewCfgPolicySoft = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 1, 2, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bwmNewCfgPolicySoft.setStatus('current')
if mibBuilder.loadTexts: bwmNewCfgPolicySoft.setDescription('The soft bandwidth limit for this traffic policy.')
bwmNewCfgPolicyResv = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 1, 2, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bwmNewCfgPolicyResv.setStatus('current')
if mibBuilder.loadTexts: bwmNewCfgPolicyResv.setDescription('The reserve bandwidth limit for this traffic policy. This is the \n         amount of bandwidth always available to this policy.')
bwmNewCfgPolicyBuffer = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 1, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8192, 128000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bwmNewCfgPolicyBuffer.setStatus('current')
if mibBuilder.loadTexts: bwmNewCfgPolicyBuffer.setDescription('The buffer limit for the traffic policy.')
bwmNewCfgPolicyDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 1, 2, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bwmNewCfgPolicyDelete.setStatus('current')
if mibBuilder.loadTexts: bwmNewCfgPolicyDelete.setDescription('When set to the value of 2 (delete), the entire row\n\t is deleted. When read, other(1) is returned. Setting the value\n\t to anything other than 2(delete) has no effect on the state\n\t of the row.')
bwmNewCfgPolicyUserLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 1, 2, 3, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bwmNewCfgPolicyUserLimit.setStatus('current')
if mibBuilder.loadTexts: bwmNewCfgPolicyUserLimit.setDescription('The per user (IP address) bandwidth limit for this traffic policy.\n         This is the maximum amount of bandwidth available for each distinct\n\t user (IP address) if the contract performs per user rate limiting.')
bwmContractTableMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmContractTableMaxEnt.setStatus('current')
if mibBuilder.loadTexts: bwmContractTableMaxEnt.setDescription('The maximum number of rows in the BWM contract configuration table.')
bwmCurCfgContractTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 1, 3, 2), )
if mibBuilder.loadTexts: bwmCurCfgContractTable.setStatus('current')
if mibBuilder.loadTexts: bwmCurCfgContractTable.setDescription('The table of BWM traffic contract configuration.')
bwmCurCfgContractTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 1, 3, 2, 1), ).setIndexNames((0, "ALTEON-CHEETAH-BWM-MIB", "bwmCurCfgContractIndx"))
if mibBuilder.loadTexts: bwmCurCfgContractTableEntry.setStatus('current')
if mibBuilder.loadTexts: bwmCurCfgContractTableEntry.setDescription('A row in the BWM traffic contract configuration table.')
bwmCurCfgContractIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 1, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmCurCfgContractIndx.setStatus('current')
if mibBuilder.loadTexts: bwmCurCfgContractIndx.setDescription('The index of the row in BWM traffic contract configurations table.')
bwmCurCfgContractName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 1, 3, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmCurCfgContractName.setStatus('current')
if mibBuilder.loadTexts: bwmCurCfgContractName.setDescription('The traffic contract name.')
bwmCurCfgContractState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 1, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmCurCfgContractState.setStatus('current')
if mibBuilder.loadTexts: bwmCurCfgContractState.setDescription('This is the state of the traffic contract.')
bwmCurCfgContractPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 1, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmCurCfgContractPolicy.setStatus('current')
if mibBuilder.loadTexts: bwmCurCfgContractPolicy.setDescription('The policy number of the traffic contract')
bwmCurCfgContractPrec = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 1, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmCurCfgContractPrec.setStatus('current')
if mibBuilder.loadTexts: bwmCurCfgContractPrec.setDescription('The precedence value of the traffic contract')
bwmCurCfgContractUseTos = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 1, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmCurCfgContractUseTos.setStatus('current')
if mibBuilder.loadTexts: bwmCurCfgContractUseTos.setDescription('Enable/disable overwriting the IP Type Of Service (TOS) for this \n         traffic contract.')
bwmCurCfgContractHistory = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 1, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmCurCfgContractHistory.setStatus('current')
if mibBuilder.loadTexts: bwmCurCfgContractHistory.setDescription('Enable/disable saving statistics for this contract on the TFTP \n         server.')
bwmCurCfgContractShaping = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 1, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmCurCfgContractShaping.setStatus('current')
if mibBuilder.loadTexts: bwmCurCfgContractShaping.setDescription('Enable/disable traffic shaping for this contract.')
bwmCurCfgContractResizeTcp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 1, 3, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmCurCfgContractResizeTcp.setStatus('current')
if mibBuilder.loadTexts: bwmCurCfgContractResizeTcp.setDescription('Enable/disable overwriting the TCP window size for this \n         traffic contract.')
bwmCurCfgContractIpLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 1, 3, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmCurCfgContractIpLimit.setStatus('current')
if mibBuilder.loadTexts: bwmCurCfgContractIpLimit.setDescription('Enable/disable per user rate limiting based on IP address\n         for this traffic contract.')
bwmCurCfgContractIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 1, 3, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sip", 1), ("dip", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmCurCfgContractIpType.setStatus('current')
if mibBuilder.loadTexts: bwmCurCfgContractIpType.setDescription('Per user rate limiting done based on source/destination\n\t IP address.')
bwmCurCfgContractMonitorMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 1, 3, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmCurCfgContractMonitorMode.setStatus('current')
if mibBuilder.loadTexts: bwmCurCfgContractMonitorMode.setDescription('Enable/disable monitor-only mode for this contract.')
bwmCurCfgContractGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 1, 3, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmCurCfgContractGroup.setStatus('current')
if mibBuilder.loadTexts: bwmCurCfgContractGroup.setDescription('The group number of the contract (zero if not part of a group)')
bwmCurCfgContractMaxSess = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 1, 3, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmCurCfgContractMaxSess.setStatus('current')
if mibBuilder.loadTexts: bwmCurCfgContractMaxSess.setDescription('Maximum number of sessions per user or contract.')
bwmNewCfgContractTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 1, 3, 3), )
if mibBuilder.loadTexts: bwmNewCfgContractTable.setStatus('current')
if mibBuilder.loadTexts: bwmNewCfgContractTable.setDescription('The table of BWM traffic contract configuration.')
bwmNewCfgContractTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 1, 3, 3, 1), ).setIndexNames((0, "ALTEON-CHEETAH-BWM-MIB", "bwmNewCfgContractIndx"))
if mibBuilder.loadTexts: bwmNewCfgContractTableEntry.setStatus('current')
if mibBuilder.loadTexts: bwmNewCfgContractTableEntry.setDescription('A row in the BWM traffic contract configuration table.')
bwmNewCfgContractIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 1, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmNewCfgContractIndx.setStatus('current')
if mibBuilder.loadTexts: bwmNewCfgContractIndx.setDescription('The index of the row in BWM traffic contract configuration table.')
bwmNewCfgContractName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 1, 3, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bwmNewCfgContractName.setStatus('current')
if mibBuilder.loadTexts: bwmNewCfgContractName.setDescription('The traffic contract name.')
bwmNewCfgContractState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 1, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bwmNewCfgContractState.setStatus('current')
if mibBuilder.loadTexts: bwmNewCfgContractState.setDescription('This is the state of the traffic contract.')
bwmNewCfgContractPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 1, 3, 3, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bwmNewCfgContractPolicy.setStatus('current')
if mibBuilder.loadTexts: bwmNewCfgContractPolicy.setDescription('This is policy number of the traffic contract')
bwmNewCfgContractDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 1, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bwmNewCfgContractDelete.setStatus('current')
if mibBuilder.loadTexts: bwmNewCfgContractDelete.setDescription('When set to the value of 2 (delete), the entire row\n         is deleted. When read, other(1) is returned. Setting the value\n         to anything other than 2(delete) has no effect on the state\n         of the row.')
bwmNewCfgContractPrec = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 1, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bwmNewCfgContractPrec.setStatus('current')
if mibBuilder.loadTexts: bwmNewCfgContractPrec.setDescription('The precedence value of the traffic contract')
bwmNewCfgContractUseTos = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 1, 3, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bwmNewCfgContractUseTos.setStatus('current')
if mibBuilder.loadTexts: bwmNewCfgContractUseTos.setDescription('Enable/disable overwriting the IP Type Of Service (TOS) for this \n         traffic contract.')
bwmNewCfgContractHistory = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 1, 3, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bwmNewCfgContractHistory.setStatus('current')
if mibBuilder.loadTexts: bwmNewCfgContractHistory.setDescription('Enable/disable saving statistics for this contract on the TFTP \n         server.')
bwmNewCfgContractShaping = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 1, 3, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bwmNewCfgContractShaping.setStatus('current')
if mibBuilder.loadTexts: bwmNewCfgContractShaping.setDescription('Enable/disable traffic shaping for this contract.')
bwmNewCfgContractResizeTcp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 1, 3, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bwmNewCfgContractResizeTcp.setStatus('current')
if mibBuilder.loadTexts: bwmNewCfgContractResizeTcp.setDescription('Enable/disable overwriting the TCP window size for this \n         traffic contract.')
bwmNewCfgContractIpLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 1, 3, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bwmNewCfgContractIpLimit.setStatus('current')
if mibBuilder.loadTexts: bwmNewCfgContractIpLimit.setDescription('Enable/disable per user rate limiting based on IP address\n         for this traffic contract.')
bwmNewCfgContractIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 1, 3, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sip", 1), ("dip", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bwmNewCfgContractIpType.setStatus('current')
if mibBuilder.loadTexts: bwmNewCfgContractIpType.setDescription('Per user rate limiting done based on source/destination\n\t IP address.')
bwmNewCfgContractMonitorMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 1, 3, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bwmNewCfgContractMonitorMode.setStatus('current')
if mibBuilder.loadTexts: bwmNewCfgContractMonitorMode.setDescription('Enable/disable monitor-only mode for this contract.')
bwmNewCfgContractGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 1, 3, 3, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmNewCfgContractGroup.setStatus('current')
if mibBuilder.loadTexts: bwmNewCfgContractGroup.setDescription('The group number of the contract (zero if not part of a group)')
bwmNewCfgContractMaxSess = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 1, 3, 3, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bwmNewCfgContractMaxSess.setStatus('current')
if mibBuilder.loadTexts: bwmNewCfgContractMaxSess.setDescription('Maximum number of sessions per user or contract.')
bwmContTimePolicyTableMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 1, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmContTimePolicyTableMaxEnt.setStatus('current')
if mibBuilder.loadTexts: bwmContTimePolicyTableMaxEnt.setDescription('The maximum number of rows in the BWM contract configuration table.')
bwmCurCfgContTimePolicyTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 1, 4, 2), )
if mibBuilder.loadTexts: bwmCurCfgContTimePolicyTable.setStatus('current')
if mibBuilder.loadTexts: bwmCurCfgContTimePolicyTable.setDescription('The table of BWM traffic contract time policy configuration.')
bwmCurCfgContTimePolicyTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 1, 4, 2, 1), ).setIndexNames((0, "ALTEON-CHEETAH-BWM-MIB", "bwmCurCfgContTimePolicyContIndx"), (0, "ALTEON-CHEETAH-BWM-MIB", "bwmCurCfgContTimePolicyIndx"))
if mibBuilder.loadTexts: bwmCurCfgContTimePolicyTableEntry.setStatus('current')
if mibBuilder.loadTexts: bwmCurCfgContTimePolicyTableEntry.setDescription('A row in the BWM contract time policy configuration table.')
bwmCurCfgContTimePolicyContIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 1, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmCurCfgContTimePolicyContIndx.setStatus('current')
if mibBuilder.loadTexts: bwmCurCfgContTimePolicyContIndx.setDescription('The BWM contract number of the contract time policy.')
bwmCurCfgContTimePolicyIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 1, 4, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmCurCfgContTimePolicyIndx.setStatus('current')
if mibBuilder.loadTexts: bwmCurCfgContTimePolicyIndx.setDescription('The BWM time policy number of the contract time policy.')
bwmCurCfgContTimePolicyDay = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 1, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("sunday", 1), ("monday", 2), ("tuesday", 3), ("wednesday", 4), ("thursday", 5), ("friday", 6), ("saturday", 7), ("weekday", 8), ("weekend", 9), ("everyday", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmCurCfgContTimePolicyDay.setStatus('current')
if mibBuilder.loadTexts: bwmCurCfgContTimePolicyDay.setDescription('The BWM time policy day.')
bwmCurCfgContTimePolicyFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 1, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmCurCfgContTimePolicyFrom.setStatus('current')
if mibBuilder.loadTexts: bwmCurCfgContTimePolicyFrom.setDescription('The BWM time policy starting time in hours')
bwmCurCfgContTimePolicyTo = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 1, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmCurCfgContTimePolicyTo.setStatus('current')
if mibBuilder.loadTexts: bwmCurCfgContTimePolicyTo.setDescription('The BWM time policy ending time in hours')
bwmCurCfgContTimePolicyPol = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 1, 4, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmCurCfgContTimePolicyPol.setStatus('current')
if mibBuilder.loadTexts: bwmCurCfgContTimePolicyPol.setDescription('The policy number of the traffic contract time policy')
bwmCurCfgContTimePolicyState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 1, 4, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmCurCfgContTimePolicyState.setStatus('current')
if mibBuilder.loadTexts: bwmCurCfgContTimePolicyState.setDescription('The state of the contract time policy.')
bwmNewCfgContTimePolicyTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 1, 4, 3), )
if mibBuilder.loadTexts: bwmNewCfgContTimePolicyTable.setStatus('current')
if mibBuilder.loadTexts: bwmNewCfgContTimePolicyTable.setDescription('The table of BWM traffic contract time policy configuration.')
bwmNewCfgContTimePolicyTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 1, 4, 3, 1), ).setIndexNames((0, "ALTEON-CHEETAH-BWM-MIB", "bwmNewCfgContTimePolicyContIndx"), (0, "ALTEON-CHEETAH-BWM-MIB", "bwmNewCfgContTimePolicyIndx"))
if mibBuilder.loadTexts: bwmNewCfgContTimePolicyTableEntry.setStatus('current')
if mibBuilder.loadTexts: bwmNewCfgContTimePolicyTableEntry.setDescription('A row in the BWM contract time policy configuration table.')
bwmNewCfgContTimePolicyContIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 1, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmNewCfgContTimePolicyContIndx.setStatus('current')
if mibBuilder.loadTexts: bwmNewCfgContTimePolicyContIndx.setDescription('The BWM contract number of the contract time policy.')
bwmNewCfgContTimePolicyIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 1, 4, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmNewCfgContTimePolicyIndx.setStatus('current')
if mibBuilder.loadTexts: bwmNewCfgContTimePolicyIndx.setDescription('The BWM time policy number of the contract time policy.')
bwmNewCfgContTimePolicyDay = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 1, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("sunday", 1), ("monday", 2), ("tuesday", 3), ("wednesday", 4), ("thursday", 5), ("friday", 6), ("saturday", 7), ("weekday", 8), ("weekend", 9), ("everyday", 10)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bwmNewCfgContTimePolicyDay.setStatus('current')
if mibBuilder.loadTexts: bwmNewCfgContTimePolicyDay.setDescription('The BWM time policy day.')
bwmNewCfgContTimePolicyFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 1, 4, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 24))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bwmNewCfgContTimePolicyFrom.setStatus('current')
if mibBuilder.loadTexts: bwmNewCfgContTimePolicyFrom.setDescription('The BWM time policy starting time in hours')
bwmNewCfgContTimePolicyTo = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 1, 4, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 24))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bwmNewCfgContTimePolicyTo.setStatus('current')
if mibBuilder.loadTexts: bwmNewCfgContTimePolicyTo.setDescription('The BWM time policy ending time in hours')
bwmNewCfgContTimePolicyPol = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 1, 4, 3, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bwmNewCfgContTimePolicyPol.setStatus('current')
if mibBuilder.loadTexts: bwmNewCfgContTimePolicyPol.setDescription('The policy number of the traffic contract time policy')
bwmNewCfgContTimePolicyState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 1, 4, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bwmNewCfgContTimePolicyState.setStatus('current')
if mibBuilder.loadTexts: bwmNewCfgContTimePolicyState.setDescription('The state of the contract time policy.')
bwmNewCfgContTimePolicyDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 1, 4, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bwmNewCfgContTimePolicyDelete.setStatus('current')
if mibBuilder.loadTexts: bwmNewCfgContTimePolicyDelete.setDescription('When set to the value of 2 (delete), the entire row\n         is deleted. When read, other(1) is returned. Setting the value\n         to anything other than 2(delete) has no effect on the state\n         of the row.')
bwmContractGroupTableMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 1, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmContractGroupTableMaxEnt.setStatus('current')
if mibBuilder.loadTexts: bwmContractGroupTableMaxEnt.setDescription('The maximum number of rows in BWM contract group configuration table.')
bwmCurCfgContractGroupTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 1, 5, 2), )
if mibBuilder.loadTexts: bwmCurCfgContractGroupTable.setStatus('current')
if mibBuilder.loadTexts: bwmCurCfgContractGroupTable.setDescription('The table of BWM traffic contract group configuration.')
bwmCurCfgContractGroupTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 1, 5, 2, 1), ).setIndexNames((0, "ALTEON-CHEETAH-BWM-MIB", "bwmCurCfgContractGroupIndx"))
if mibBuilder.loadTexts: bwmCurCfgContractGroupTableEntry.setStatus('current')
if mibBuilder.loadTexts: bwmCurCfgContractGroupTableEntry.setDescription('A row in the BWM contract group configuration table.')
bwmCurCfgContractGroupIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 1, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmCurCfgContractGroupIndx.setStatus('current')
if mibBuilder.loadTexts: bwmCurCfgContractGroupIndx.setDescription('The BWM contract group number.')
bwmCurCfgContractGroupContracts = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 1, 5, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmCurCfgContractGroupContracts.setStatus('current')
if mibBuilder.loadTexts: bwmCurCfgContractGroupContracts.setDescription('The BWM contracts in the group.  The contracts are presented\n         in bitmap format.\n\n         in receiving order:\n\n             OCTET 1  OCTET 2  .....\n             xxxxxxxx xxxxxxxx ..... \n             |     || |_ contract 9\n             |     ||  \n             |     ||___ contract 8\n             |     |____ contract 7\n             |       .    .   .\n             |__________ contract 1\n \n         where x : 1 - The represented contract belongs to the group\n                   0 - The represented contract does not belong to the group')
bwmCurCfgContractGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 1, 5, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmCurCfgContractGroupName.setStatus('current')
if mibBuilder.loadTexts: bwmCurCfgContractGroupName.setDescription('The traffic contract group name.')
bwmNewCfgContractGroupTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 1, 5, 3), )
if mibBuilder.loadTexts: bwmNewCfgContractGroupTable.setStatus('current')
if mibBuilder.loadTexts: bwmNewCfgContractGroupTable.setDescription('The table of BWM traffic contract group configuration.')
bwmNewCfgContractGroupTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 1, 5, 3, 1), ).setIndexNames((0, "ALTEON-CHEETAH-BWM-MIB", "bwmNewCfgContractGroupIndx"))
if mibBuilder.loadTexts: bwmNewCfgContractGroupTableEntry.setStatus('current')
if mibBuilder.loadTexts: bwmNewCfgContractGroupTableEntry.setDescription('A row in the BWM contract group configuration table.')
bwmNewCfgContractGroupIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 1, 5, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmNewCfgContractGroupIndx.setStatus('current')
if mibBuilder.loadTexts: bwmNewCfgContractGroupIndx.setDescription('The BWM contract group number.')
bwmNewCfgContractGroupContracts = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 1, 5, 3, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmNewCfgContractGroupContracts.setStatus('current')
if mibBuilder.loadTexts: bwmNewCfgContractGroupContracts.setDescription('The BWM contracts in the group.  The contracts are presented\n         in bitmap format.\n\n         in receiving order:\n\n             OCTET 1  OCTET 2  .....\n             xxxxxxxx xxxxxxxx ..... \n             |     || |_ contract 9\n             |     ||  \n             |     ||___ contract 8\n             |     |____ contract 7\n             |       .    .   .\n             |__________ contract 1\n \n         where x : 1 - The represented contract belongs to the group\n                   0 - The represented contract does not belong to the group')
bwmNewCfgContractGroupAddCont = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 1, 5, 3, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bwmNewCfgContractGroupAddCont.setStatus('current')
if mibBuilder.loadTexts: bwmNewCfgContractGroupAddCont.setDescription('The BWM contract to be added to the group. A zero value\n         is returned when read.')
bwmNewCfgContractGroupRemCont = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 1, 5, 3, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bwmNewCfgContractGroupRemCont.setStatus('current')
if mibBuilder.loadTexts: bwmNewCfgContractGroupRemCont.setDescription('The BWM contract to be removed from the group. A zero value\n         is returned when read.')
bwmNewCfgContractGroupDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 1, 5, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bwmNewCfgContractGroupDelete.setStatus('current')
if mibBuilder.loadTexts: bwmNewCfgContractGroupDelete.setDescription('When set to the value of 2 (delete), the entire row\n         is deleted. When read, other(1) is returned. Setting the value\n         to anything other than 2(delete) has no effect on the state\n         of the row.')
bwmNewCfgContractGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 1, 5, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bwmNewCfgContractGroupName.setStatus('current')
if mibBuilder.loadTexts: bwmNewCfgContractGroupName.setDescription('The traffic contract group name.')
bwmContractGroupTableMaxCont = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 1, 5, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmContractGroupTableMaxCont.setStatus('current')
if mibBuilder.loadTexts: bwmContractGroupTableMaxCont.setDescription('The maximum number of contracts in any BWM contract group.')
bwmStatTcTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 2, 1), )
if mibBuilder.loadTexts: bwmStatTcTable.setStatus('current')
if mibBuilder.loadTexts: bwmStatTcTable.setDescription('The table of Bandwidth Management Traffic Contract statistics.')
bwmStatTcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 2, 1, 1), ).setIndexNames((0, "ALTEON-CHEETAH-BWM-MIB", "bwmStatTcContractIndex"))
if mibBuilder.loadTexts: bwmStatTcEntry.setStatus('current')
if mibBuilder.loadTexts: bwmStatTcEntry.setDescription('A row in the BWM traffic contract table.')
bwmStatTcContractIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmStatTcContractIndex.setStatus('current')
if mibBuilder.loadTexts: bwmStatTcContractIndex.setDescription('The contract queue number for which the statistics apply.')
bwmStatTcName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmStatTcName.setStatus('current')
if mibBuilder.loadTexts: bwmStatTcName.setDescription('The name of the traffic contract queue.')
bwmStatTcOutoct = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmStatTcOutoct.setStatus('current')
if mibBuilder.loadTexts: bwmStatTcOutoct.setDescription('The total number of octets sent out from the traffic contract queue.')
bwmStatTcOutdisoct = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmStatTcOutdisoct.setStatus('current')
if mibBuilder.loadTexts: bwmStatTcOutdisoct.setDescription('The total number of octets dropped from the traffic contract queue.')
bwmStatTcBufferUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmStatTcBufferUsed.setStatus('current')
if mibBuilder.loadTexts: bwmStatTcBufferUsed.setDescription('The total number of buffers used by the traffic contract queue.')
bwmStatTcBufferMax = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmStatTcBufferMax.setStatus('current')
if mibBuilder.loadTexts: bwmStatTcBufferMax.setDescription('The total number of buffers assigned to the traffic contract queue.')
bwmStatTcTotalPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmStatTcTotalPackets.setStatus('current')
if mibBuilder.loadTexts: bwmStatTcTotalPackets.setDescription('The total number of packets for a particular contract.')
bwmStatTcSessRejected = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmStatTcSessRejected.setStatus('current')
if mibBuilder.loadTexts: bwmStatTcSessRejected.setDescription('The total number of sessions rejected for a particular contract.')
bwmStatTcrTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 2, 2), )
if mibBuilder.loadTexts: bwmStatTcrTable.setStatus('current')
if mibBuilder.loadTexts: bwmStatTcrTable.setDescription('The table of Bandwidth Management Traffic Contract Rate statistics.')
bwmStatTcrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 2, 2, 1), ).setIndexNames((0, "ALTEON-CHEETAH-BWM-MIB", "bwmStatTcrContractIndex"))
if mibBuilder.loadTexts: bwmStatTcrEntry.setStatus('current')
if mibBuilder.loadTexts: bwmStatTcrEntry.setDescription('A row in the BWM traffic contract rate table.')
bwmStatTcrContractIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmStatTcrContractIndex.setStatus('current')
if mibBuilder.loadTexts: bwmStatTcrContractIndex.setDescription('The contract queue number for which the statistics apply.')
bwmStatTcrName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 2, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmStatTcrName.setStatus('current')
if mibBuilder.loadTexts: bwmStatTcrName.setDescription('The name of the traffic contract queue.')
bwmStatTcrRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmStatTcrRate.setStatus('current')
if mibBuilder.loadTexts: bwmStatTcrRate.setDescription('The rate of octets sent out from the traffic contract queue.')
bwmStatTcrOutoct = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 2, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmStatTcrOutoct.setStatus('current')
if mibBuilder.loadTexts: bwmStatTcrOutoct.setDescription('The of octets sent out from the traffic contract queue.')
bwmStatTcrOutdisoct = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 2, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmStatTcrOutdisoct.setStatus('current')
if mibBuilder.loadTexts: bwmStatTcrOutdisoct.setDescription('The total number of octets dropped from the traffic contract queue.')
bwmStatTcrBufferUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 2, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmStatTcrBufferUsed.setStatus('current')
if mibBuilder.loadTexts: bwmStatTcrBufferUsed.setDescription('The total number of buffers used by the traffic contract queue.')
bwmStatTcrBufferMax = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmStatTcrBufferMax.setStatus('current')
if mibBuilder.loadTexts: bwmStatTcrBufferMax.setDescription('The total number of buffers assigned to the traffic contract queue.')
bwmStatTcrTotalPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 2, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmStatTcrTotalPackets.setStatus('current')
if mibBuilder.loadTexts: bwmStatTcrTotalPackets.setDescription('The total number of packets for a particular contract.')
bwmStatPortTcTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 2, 3), )
if mibBuilder.loadTexts: bwmStatPortTcTable.setStatus('current')
if mibBuilder.loadTexts: bwmStatPortTcTable.setDescription('The table of BWM Switch Port Traffic Contract statistics.')
bwmStatPortTcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 2, 3, 1), ).setIndexNames((0, "ALTEON-CHEETAH-BWM-MIB", "bwmStatPortTcPortIndex"), (0, "ALTEON-CHEETAH-BWM-MIB", "bwmStatPortTcContractIndex"))
if mibBuilder.loadTexts: bwmStatPortTcEntry.setStatus('current')
if mibBuilder.loadTexts: bwmStatPortTcEntry.setDescription('A row in the BWM SP traffic contract table.')
bwmStatPortTcPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmStatPortTcPortIndex.setStatus('current')
if mibBuilder.loadTexts: bwmStatPortTcPortIndex.setDescription('The Switch Port number for which the statistics apply.')
bwmStatPortTcContractIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmStatPortTcContractIndex.setStatus('current')
if mibBuilder.loadTexts: bwmStatPortTcContractIndex.setDescription('The contract queue number for which the statistics apply.')
bwmStatPortTcName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 2, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmStatPortTcName.setStatus('current')
if mibBuilder.loadTexts: bwmStatPortTcName.setDescription('The name of the traffic contract queue.')
bwmStatPortTcOutoct = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 2, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmStatPortTcOutoct.setStatus('current')
if mibBuilder.loadTexts: bwmStatPortTcOutoct.setDescription('The total number of octets sent out from the traffic contract queue.')
bwmStatPortTcOutdisoct = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 2, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmStatPortTcOutdisoct.setStatus('current')
if mibBuilder.loadTexts: bwmStatPortTcOutdisoct.setDescription('The total number of octets dropped from the traffic contract queue.')
bwmStatPortTcBufferUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 2, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmStatPortTcBufferUsed.setStatus('current')
if mibBuilder.loadTexts: bwmStatPortTcBufferUsed.setDescription('The total number of buffers used by the traffic contract queue.')
bwmStatPortTcBufferMax = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 2, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmStatPortTcBufferMax.setStatus('current')
if mibBuilder.loadTexts: bwmStatPortTcBufferMax.setDescription('The total number of buffers assigned to the traffic contract queue.')
bwmStatPortTcTotalPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 2, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmStatPortTcTotalPackets.setStatus('current')
if mibBuilder.loadTexts: bwmStatPortTcTotalPackets.setDescription('The total number of packets for a particular contract.')
bwmStatPortTcrTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 2, 4), )
if mibBuilder.loadTexts: bwmStatPortTcrTable.setStatus('current')
if mibBuilder.loadTexts: bwmStatPortTcrTable.setDescription('The table of Bandwidth Management Switch Port Traffic Contract Rate \n         statistics.')
bwmStatPortTcrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 2, 4, 1), ).setIndexNames((0, "ALTEON-CHEETAH-BWM-MIB", "bwmStatPortTcrPortIndex"), (0, "ALTEON-CHEETAH-BWM-MIB", "bwmStatPortTcrContractIndex"))
if mibBuilder.loadTexts: bwmStatPortTcrEntry.setStatus('current')
if mibBuilder.loadTexts: bwmStatPortTcrEntry.setDescription('A row in the BWM traffic contract rate table.')
bwmStatPortTcrPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmStatPortTcrPortIndex.setStatus('current')
if mibBuilder.loadTexts: bwmStatPortTcrPortIndex.setDescription('The switch port number for which the statistics apply.')
bwmStatPortTcrContractIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 2, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmStatPortTcrContractIndex.setStatus('current')
if mibBuilder.loadTexts: bwmStatPortTcrContractIndex.setDescription('The contract queue number for which the statistics apply.')
bwmStatPortTcrName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 2, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmStatPortTcrName.setStatus('current')
if mibBuilder.loadTexts: bwmStatPortTcrName.setDescription('The name of the traffic contract queue.')
bwmStatPortTcrRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 2, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmStatPortTcrRate.setStatus('current')
if mibBuilder.loadTexts: bwmStatPortTcrRate.setDescription('The rate of octets sent out from the traffic contract queue.')
bwmStatPortTcrOutoct = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 2, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmStatPortTcrOutoct.setStatus('current')
if mibBuilder.loadTexts: bwmStatPortTcrOutoct.setDescription('The of octets sent out from the traffic contract queue.')
bwmStatPortTcrOutdisoct = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 2, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmStatPortTcrOutdisoct.setStatus('current')
if mibBuilder.loadTexts: bwmStatPortTcrOutdisoct.setDescription('The total number of octets dropped from the traffic contract queue.')
bwmStatPortTcrBufferUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 2, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmStatPortTcrBufferUsed.setStatus('current')
if mibBuilder.loadTexts: bwmStatPortTcrBufferUsed.setDescription('The total number of buffers used by the traffic contract queue.')
bwmStatPortTcrBufferMax = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 2, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmStatPortTcrBufferMax.setStatus('current')
if mibBuilder.loadTexts: bwmStatPortTcrBufferMax.setDescription('The total number of buffers assigned to the traffic contract queue.')
bwmStatPortTcrTotalPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 2, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmStatPortTcrTotalPackets.setStatus('current')
if mibBuilder.loadTexts: bwmStatPortTcrTotalPackets.setDescription('The total number of packets for a particular contract.')
bwmStatsClear = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwmStatsClear.setStatus('current')
if mibBuilder.loadTexts: bwmStatsClear.setDescription('This is an action object to clear the BWM statistics. \n         ok(1) is returned when read.')
bwmOperSendSMTP = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 6, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("send", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwmOperSendSMTP.setStatus('current')
if mibBuilder.loadTexts: bwmOperSendSMTP.setDescription('This is an action object to send BWM history to SMTP server. \n         other(1) is returned when read.')
mibBuilder.exportSymbols("ALTEON-CHEETAH-BWM-MIB", bwmCurCfgGenSmtpUser=bwmCurCfgGenSmtpUser, bwmCurCfgContractUseTos=bwmCurCfgContractUseTos, bwmNewCfgGenState=bwmNewCfgGenState, bwmNewCfgContractHistory=bwmNewCfgContractHistory, bwmStatPortTcrEntry=bwmStatPortTcrEntry, bwmNewCfgContractIndx=bwmNewCfgContractIndx, bwmStatTcrBufferUsed=bwmStatTcrBufferUsed, bwmNewCfgContractGroupTableEntry=bwmNewCfgContractGroupTableEntry, bwmPolicyConfig=bwmPolicyConfig, bwmCurCfgContractMaxSess=bwmCurCfgContractMaxSess, bwmStatTcTotalPackets=bwmStatTcTotalPackets, bwmNewCfgContractState=bwmNewCfgContractState, bwmCurCfgContractTableEntry=bwmCurCfgContractTableEntry, bwmCurCfgContTimePolicyState=bwmCurCfgContTimePolicyState, bwmCurCfgContractGroup=bwmCurCfgContractGroup, bwmNewCfgContTimePolicyTable=bwmNewCfgContTimePolicyTable, bwmGeneralConfig=bwmGeneralConfig, bwmCurCfgPolicyUserLimit=bwmCurCfgPolicyUserLimit, bwmStatTcrTable=bwmStatTcrTable, bwmNewCfgGenReport=bwmNewCfgGenReport, bwmStatPortTcrContractIndex=bwmStatPortTcrContractIndex, bwmNewCfgPolicyTosIn=bwmNewCfgPolicyTosIn, bwmNewCfgContractGroupTable=bwmNewCfgContractGroupTable, bwmNewCfgPolicyUserLimit=bwmNewCfgPolicyUserLimit, bwmCurCfgPolicyTable=bwmCurCfgPolicyTable, bwmCurCfgPolicyResv=bwmCurCfgPolicyResv, bwmStatTcrOutdisoct=bwmStatTcrOutdisoct, bwmContTimePolicyTableMaxEnt=bwmContTimePolicyTableMaxEnt, bwmStatTcrTotalPackets=bwmStatTcrTotalPackets, bwm=bwm, bwmCurCfgGenState=bwmCurCfgGenState, bwmNewCfgContractMonitorMode=bwmNewCfgContractMonitorMode, bwmCurCfgContTimePolicyTo=bwmCurCfgContTimePolicyTo, bwmCurCfgContractResizeTcp=bwmCurCfgContractResizeTcp, bwmNewCfgContractGroupContracts=bwmNewCfgContractGroupContracts, bwmNewCfgContractGroupName=bwmNewCfgContractGroupName, bwmStatPortTcrName=bwmStatPortTcrName, bwmContTimePolicyConfig=bwmContTimePolicyConfig, bwmStatPortTcrOutdisoct=bwmStatPortTcrOutdisoct, bwmContractGroupConfig=bwmContractGroupConfig, bwmCurCfgContractPrec=bwmCurCfgContractPrec, bwmCurCfgPolicyTosOut=bwmCurCfgPolicyTosOut, bwmNewCfgContractPrec=bwmNewCfgContractPrec, bwmStatTcrOutoct=bwmStatTcrOutoct, bwmStatPortTcTable=bwmStatPortTcTable, bwmStatPortTcrTable=bwmStatPortTcrTable, bwmCurCfgPolicyIndx=bwmCurCfgPolicyIndx, bwmStatPortTcOutdisoct=bwmStatPortTcOutdisoct, bwmNewCfgContractTable=bwmNewCfgContractTable, bwmNewCfgContractName=bwmNewCfgContractName, bwmContractConfig=bwmContractConfig, bwmCurCfgPolicyTableEntry=bwmCurCfgPolicyTableEntry, bwmCurCfgContractTable=bwmCurCfgContractTable, bwmNewCfgContTimePolicyFrom=bwmNewCfgContTimePolicyFrom, bwmNewCfgContractGroupAddCont=bwmNewCfgContractGroupAddCont, bwmNewCfgContractPolicy=bwmNewCfgContractPolicy, bwmCurCfgGenIPUserLimit=bwmCurCfgGenIPUserLimit, bwmNewCfgContractUseTos=bwmNewCfgContractUseTos, bwmStatPortTcrBufferUsed=bwmStatPortTcrBufferUsed, bwmNewCfgPolicyBuffer=bwmNewCfgPolicyBuffer, bwmCurCfgContTimePolicyFrom=bwmCurCfgContTimePolicyFrom, bwmStatTcContractIndex=bwmStatTcContractIndex, bwmStatPortTcEntry=bwmStatPortTcEntry, bwmStatPortTcrBufferMax=bwmStatPortTcrBufferMax, bwmNewCfgContractGroupDelete=bwmNewCfgContractGroupDelete, bwmCurCfgContTimePolicyTableEntry=bwmCurCfgContTimePolicyTableEntry, bwmPolicyTableMaxEnt=bwmPolicyTableMaxEnt, bwmNewCfgContractTableEntry=bwmNewCfgContractTableEntry, bwmNewCfgContractGroupRemCont=bwmNewCfgContractGroupRemCont, bwmNewCfgPolicyTableEntry=bwmNewCfgPolicyTableEntry, bwmCurCfgPolicySoft=bwmCurCfgPolicySoft, bwmCurCfgPolicyBuffer=bwmCurCfgPolicyBuffer, bwmCurCfgContractPolicy=bwmCurCfgContractPolicy, bwmCurCfgGenEmail=bwmCurCfgGenEmail, bwmNewCfgGenSmtpUser=bwmNewCfgGenSmtpUser, bwmNewCfgGenEnforcePolicy=bwmNewCfgGenEnforcePolicy, bwmCurCfgContractIpType=bwmCurCfgContractIpType, bwmCurCfgContTimePolicyPol=bwmCurCfgContTimePolicyPol, bwmStatTcrRate=bwmStatTcrRate, bwmOperSendSMTP=bwmOperSendSMTP, bwmCurCfgContractIndx=bwmCurCfgContractIndx, bwmCurCfgContractHistory=bwmCurCfgContractHistory, bwmNewCfgGenIPUserLimit=bwmNewCfgGenIPUserLimit, bwmStatPortTcContractIndex=bwmStatPortTcContractIndex, bwmContractGroupTableMaxEnt=bwmContractGroupTableMaxEnt, bwmStatPortTcTotalPackets=bwmStatPortTcTotalPackets, bwmNewCfgPolicyResv=bwmNewCfgPolicyResv, bwmStatPortTcrRate=bwmStatPortTcrRate, bwmContractGroupTableMaxCont=bwmContractGroupTableMaxCont, bwmOpers=bwmOpers, bwmStatPortTcOutoct=bwmStatPortTcOutoct, bwmNewCfgContractDelete=bwmNewCfgContractDelete, bwmStatTcrContractIndex=bwmStatTcrContractIndex, bwmNewCfgContTimePolicyTableEntry=bwmNewCfgContTimePolicyTableEntry, bwmStatTcrBufferMax=bwmStatTcrBufferMax, bwmNewCfgContTimePolicyState=bwmNewCfgContTimePolicyState, bwmStatTcBufferMax=bwmStatTcBufferMax, bwmCurCfgContractState=bwmCurCfgContractState, bwmNewCfgContTimePolicyIndx=bwmNewCfgContTimePolicyIndx, bwmNewCfgGenEmailFrequency=bwmNewCfgGenEmailFrequency, bwmStatTcEntry=bwmStatTcEntry, bwmStatPortTcName=bwmStatPortTcName, bwmStatPortTcrTotalPackets=bwmStatPortTcrTotalPackets, bwmNewCfgContractIpLimit=bwmNewCfgContractIpLimit, bwmNewCfgContractIpType=bwmNewCfgContractIpType, bwmCurCfgContTimePolicyIndx=bwmCurCfgContTimePolicyIndx, bwmStatPortTcrOutoct=bwmStatPortTcrOutoct, bwmCurCfgContractGroupName=bwmCurCfgContractGroupName, bwmCurCfgContTimePolicyDay=bwmCurCfgContTimePolicyDay, bwmStatTcOutoct=bwmStatTcOutoct, bwmStatTcSessRejected=bwmStatTcSessRejected, bwmStatTcrEntry=bwmStatTcrEntry, bwmStatPortTcrPortIndex=bwmStatPortTcrPortIndex, bwmStatPortTcBufferMax=bwmStatPortTcBufferMax, bwmCurCfgPolicyTosIn=bwmCurCfgPolicyTosIn, bwmNewCfgContractMaxSess=bwmNewCfgContractMaxSess, bwmConfigs=bwmConfigs, bwmCurCfgContractGroupTableEntry=bwmCurCfgContractGroupTableEntry, PYSNMP_MODULE_ID=bwm, bwmCurCfgContractName=bwmCurCfgContractName, bwmNewCfgContTimePolicyDelete=bwmNewCfgContTimePolicyDelete, bwmNewCfgContractResizeTcp=bwmNewCfgContractResizeTcp, bwmNewCfgPolicyHard=bwmNewCfgPolicyHard, bwmNewCfgPolicySoft=bwmNewCfgPolicySoft, bwmNewCfgPolicyDelete=bwmNewCfgPolicyDelete, bwmNewCfgContractGroup=bwmNewCfgContractGroup, bwmNewCfgContTimePolicyTo=bwmNewCfgContTimePolicyTo, bwmStatTcTable=bwmStatTcTable, bwmCurCfgPolicyHard=bwmCurCfgPolicyHard, bwmCurCfgContractGroupTable=bwmCurCfgContractGroupTable, bwmCurCfgContractGroupIndx=bwmCurCfgContractGroupIndx, bwmNewCfgContractShaping=bwmNewCfgContractShaping, bwmStatTcBufferUsed=bwmStatTcBufferUsed, bwmNewCfgContractGroupIndx=bwmNewCfgContractGroupIndx, bwmNewCfgPolicyIndx=bwmNewCfgPolicyIndx, bwmStatPortTcPortIndex=bwmStatPortTcPortIndex, bwmStatsClear=bwmStatsClear, bwmNewCfgContTimePolicyDay=bwmNewCfgContTimePolicyDay, bwmCurCfgContractShaping=bwmCurCfgContractShaping, bwmStatTcOutdisoct=bwmStatTcOutdisoct, bwmContractTableMaxEnt=bwmContractTableMaxEnt, bwmCurCfgGenReport=bwmCurCfgGenReport, bwmCurCfgContractIpLimit=bwmCurCfgContractIpLimit, bwmStatTcrName=bwmStatTcrName, bwmCurCfgGenEnforcePolicy=bwmCurCfgGenEnforcePolicy, bwmCurCfgContTimePolicyTable=bwmCurCfgContTimePolicyTable, bwmNewCfgPolicyTable=bwmNewCfgPolicyTable, bwmStats=bwmStats, bwmCurCfgGenEmailFrequency=bwmCurCfgGenEmailFrequency, bwmCurCfgContTimePolicyContIndx=bwmCurCfgContTimePolicyContIndx, bwmCurCfgContractGroupContracts=bwmCurCfgContractGroupContracts, bwmNewCfgPolicyTosOut=bwmNewCfgPolicyTosOut, bwmStatTcName=bwmStatTcName, bwmNewCfgGenEmail=bwmNewCfgGenEmail, bwmStatPortTcBufferUsed=bwmStatPortTcBufferUsed, bwmCurCfgContractMonitorMode=bwmCurCfgContractMonitorMode, bwmNewCfgContTimePolicyPol=bwmNewCfgContTimePolicyPol, bwmNewCfgContTimePolicyContIndx=bwmNewCfgContTimePolicyContIndx)
