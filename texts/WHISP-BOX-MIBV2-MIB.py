#
# PySNMP MIB module WHISP-BOX-MIBV2-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/cambium/WHISP-BOX-MIBV2-MIB
# Produced by pysmi-1.1.12 at Mon Jul  1 10:51:58 2024
# On host fv-az665-510 platform Linux version 6.5.0-1022-azure by user runner
# Using Python version 3.10.14 (main, Jun 20 2024, 15:20:03) [GCC 11.4.0]
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
IpAddress, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Integer32, iso, ObjectIdentity, MibIdentifier, Gauge32, TimeTicks, NotificationType, Bits, ModuleIdentity, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Integer32", "iso", "ObjectIdentity", "MibIdentifier", "Gauge32", "TimeTicks", "NotificationType", "Bits", "ModuleIdentity", "Counter32")
TextualConvention, DisplayString, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "MacAddress")
whispModules, whispBox = mibBuilder.importSymbols("WHISP-GLOBAL-REG-MIB", "whispModules", "whispBox")
EventString, WhispMACAddress, WhispLUID = mibBuilder.importSymbols("WHISP-TCV2-MIB", "EventString", "WhispMACAddress", "WhispLUID")
whispBoxLevelMibModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 161, 19, 1, 1, 8))
if mibBuilder.loadTexts: whispBoxLevelMibModule.setLastUpdated('200304150000Z')
if mibBuilder.loadTexts: whispBoxLevelMibModule.setOrganization('Cambium Networks')
if mibBuilder.loadTexts: whispBoxLevelMibModule.setContactInfo('Cambium Networks Support\n        email: support@cambiumnetworks.com')
if mibBuilder.loadTexts: whispBoxLevelMibModule.setDescription('This module contains generic Box-Level MIB definitions for Canopy Radios.')
whispBoxStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1))
whispBoxConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2))
whispBoxControls = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 3))
whispBoxEventLog = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 5))
whispBoxConf = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 6))
whispBoxGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 6, 1))
whispBoxBridgeVar = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 7))
whispBoxCPVar = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9))
whispBoxEvent = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 12))
whispBoxDHCPClientEvent = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 12, 1))
whispBoxPoEEvent = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 12, 2))
whispBoxRadioAlarmEvent = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 12, 3))
whispBoxDNS = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 13))
whispBoxSNMPv3 = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 14))
whispBoxLink = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18))
whispBoxLinkTestConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 1))
whispBoxLinkTestResult = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 2))
whispBoxLinkTestMVCResult = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 5))
whispUserAuthSecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 19))
whispBoxRFPhysical = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 15))
whispBoxRFConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 16))
whispBoxSoftwareVer = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: whispBoxSoftwareVer.setStatus('current')
if mibBuilder.loadTexts: whispBoxSoftwareVer.setDescription('Version of software. Should be noted in the event customer has\n            technical difficulties and need to contact technical support.')
whispBoxFPGAVer = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: whispBoxFPGAVer.setStatus('current')
if mibBuilder.loadTexts: whispBoxFPGAVer.setDescription('Version of FPGA.')
whispBoxEsn = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: whispBoxEsn.setStatus('current')
if mibBuilder.loadTexts: whispBoxEsn.setDescription('Electronic serial number(MAC address) assigned to Radio.')
whispBoxBoot = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: whispBoxBoot.setStatus('current')
if mibBuilder.loadTexts: whispBoxBoot.setDescription('Software boot version.')
boxTemperature = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boxTemperature.setStatus('obsolete')
if mibBuilder.loadTexts: boxTemperature.setDescription('Radio temperature.')
boxDeviceType = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boxDeviceType.setStatus('current')
if mibBuilder.loadTexts: boxDeviceType.setDescription('The type of the device.')
boxDeviceTypeID = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boxDeviceTypeID.setStatus('current')
if mibBuilder.loadTexts: boxDeviceTypeID.setDescription('Device type ID.')
boxEncryption = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boxEncryption.setStatus('current')
if mibBuilder.loadTexts: boxEncryption.setDescription('Device encryption type. Note: Returns DES also when encryption is set to None on AP.')
etherLinkStatus = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etherLinkStatus.setStatus('current')
if mibBuilder.loadTexts: etherLinkStatus.setDescription('Ethernet link status.')
boxFrequency = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boxFrequency.setStatus('current')
if mibBuilder.loadTexts: boxFrequency.setDescription('Frequency band of the device.')
platformVer = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: platformVer.setStatus('current')
if mibBuilder.loadTexts: platformVer.setDescription('Hardware platform version. For internal use.')
platformType = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: platformType.setStatus('current')
if mibBuilder.loadTexts: platformType.setDescription('Platform type: Canopy, Canopy Lite, Canopy Lite - Advantage,\n            Advantage, Russian, Russian - Advantage.')
dhcpLanIp = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 13), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpLanIp.setStatus('current')
if mibBuilder.loadTexts: dhcpLanIp.setDescription('LAN interface IP obtained through DHCP.')
dhcpLanSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 14), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpLanSubnetMask.setStatus('current')
if mibBuilder.loadTexts: dhcpLanSubnetMask.setDescription('LAN interface Subnet Mask obtained through DHCP.')
dhcpLanGateway = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 15), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpLanGateway.setStatus('current')
if mibBuilder.loadTexts: dhcpLanGateway.setDescription('LAN interface Gateway obtained through DHCP.')
dhcpRfPublicIp = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 16), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpRfPublicIp.setStatus('current')
if mibBuilder.loadTexts: dhcpRfPublicIp.setDescription('RF Public interface IP obtained through DHCP.')
dhcpRfPublicSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 17), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpRfPublicSubnetMask.setStatus('current')
if mibBuilder.loadTexts: dhcpRfPublicSubnetMask.setDescription('RF Public interface Subnet Mask obtained through DHCP.')
dhcpRfPublicGateway = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 18), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpRfPublicGateway.setStatus('current')
if mibBuilder.loadTexts: dhcpRfPublicGateway.setDescription('RF Public interface Gateway obtained through DHCP.')
lanDhcpStatus = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanDhcpStatus.setStatus('current')
if mibBuilder.loadTexts: lanDhcpStatus.setDescription('Display LAN interface current DHPC status.')
rfPublicDhcpStatus = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfPublicDhcpStatus.setStatus('current')
if mibBuilder.loadTexts: rfPublicDhcpStatus.setDescription('Display RF Public interface current DHPC status.')
inSyncCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inSyncCount.setStatus('current')
if mibBuilder.loadTexts: inSyncCount.setDescription('Counter for number of In Synchronization.')
outSyncCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outSyncCount.setStatus('current')
if mibBuilder.loadTexts: outSyncCount.setDescription('Counter for number of Out of Synchronization.')
pllOutLockCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pllOutLockCount.setStatus('current')
if mibBuilder.loadTexts: pllOutLockCount.setDescription('Counter for number of PLL out of Lock.')
txCalFailure = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txCalFailure.setStatus('current')
if mibBuilder.loadTexts: txCalFailure.setDescription('Counter for number of TX Calibration failure.')
swVersion = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 25), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swVersion.setStatus('current')
if mibBuilder.loadTexts: swVersion.setDescription('Software version information.')
pldVersion = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 26), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pldVersion.setStatus('current')
if mibBuilder.loadTexts: pldVersion.setDescription('PLD version information.')
platformInfo = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 27), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: platformInfo.setStatus('current')
if mibBuilder.loadTexts: platformInfo.setDescription('Platform information.')
antPolarization = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 28), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: antPolarization.setStatus('current')
if mibBuilder.loadTexts: antPolarization.setDescription('Antenna polarization for FSK radios.')
packetOverloadCounter = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: packetOverloadCounter.setStatus('current')
if mibBuilder.loadTexts: packetOverloadCounter.setDescription('Total packet overload count.')
whispBoxP11Personality = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 30), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: whispBoxP11Personality.setStatus('current')
if mibBuilder.loadTexts: whispBoxP11Personality.setDescription('Board Personality Configuration')
whispBoxP11FPGAType = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 31), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: whispBoxP11FPGAType.setStatus('current')
if mibBuilder.loadTexts: whispBoxP11FPGAType.setDescription('FPGA Type')
whispBoxP11BstrapFPGAVer = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 32), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: whispBoxP11BstrapFPGAVer.setStatus('current')
if mibBuilder.loadTexts: whispBoxP11BstrapFPGAVer.setDescription('P11 Bootstrap FPGA Version.')
numDFSDetections = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numDFSDetections.setStatus('current')
if mibBuilder.loadTexts: numDFSDetections.setDescription('Number of DFS Detections since last boot.')
rxOverrunPkts = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxOverrunPkts.setStatus('current')
if mibBuilder.loadTexts: rxOverrunPkts.setDescription('Counter for number of received overrun packets error.')
boxTemperatureC = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boxTemperatureC.setStatus('current')
if mibBuilder.loadTexts: boxTemperatureC.setDescription('Radio temperature in Celsius.')
boxTemperatureF = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boxTemperatureF.setStatus('current')
if mibBuilder.loadTexts: boxTemperatureF.setDescription('Radio temperature in Fahrenheit.')
bridgeCbFecStatbin = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeCbFecStatbin.setStatus('current')
if mibBuilder.loadTexts: bridgeCbFecStatbin.setDescription('Bridge CB FEC Stats bin')
bridgeCbFecStatbout = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeCbFecStatbout.setStatus('current')
if mibBuilder.loadTexts: bridgeCbFecStatbout.setDescription('Bridge CB FEC Stats bout')
bridgeCbFecStatbtoss = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeCbFecStatbtoss.setStatus('current')
if mibBuilder.loadTexts: bridgeCbFecStatbtoss.setDescription('Bridge CB FEC Stats btoss')
bridgeCbFecStatbtosscap = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeCbFecStatbtosscap.setStatus('current')
if mibBuilder.loadTexts: bridgeCbFecStatbtosscap.setDescription('Bridge CB FEC Stats btosscap')
bridgeCbFecStatuin = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeCbFecStatuin.setStatus('current')
if mibBuilder.loadTexts: bridgeCbFecStatuin.setDescription('Bridge CB FEC Stats uin')
bridgeCbFecStatuout = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeCbFecStatuout.setStatus('current')
if mibBuilder.loadTexts: bridgeCbFecStatuout.setDescription('Bridge CB FEC Stats uout')
bridgeCbFecStatutoss = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeCbFecStatutoss.setStatus('current')
if mibBuilder.loadTexts: bridgeCbFecStatutoss.setDescription('Bridge CB FEC Stats utoss')
bridgeCbFecStatutosscap = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeCbFecStatutosscap.setStatus('current')
if mibBuilder.loadTexts: bridgeCbFecStatutosscap.setDescription('Bridge CB FEC Stats utosscap')
bridgeCbRFStatbin = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeCbRFStatbin.setStatus('current')
if mibBuilder.loadTexts: bridgeCbRFStatbin.setDescription('Bridge CB RF Stats bin')
bridgeCbRFStatbout = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeCbRFStatbout.setStatus('current')
if mibBuilder.loadTexts: bridgeCbRFStatbout.setDescription('Bridge CB RF Stats bout')
bridgeCbRFStatbtoss = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeCbRFStatbtoss.setStatus('current')
if mibBuilder.loadTexts: bridgeCbRFStatbtoss.setDescription('Bridge CB RF Stats btoss')
bridgeCbRFStatbtosscap = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeCbRFStatbtosscap.setStatus('current')
if mibBuilder.loadTexts: bridgeCbRFStatbtosscap.setDescription('Bridge CB RF Stats btosscap')
bridgeCbRFStatuin = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeCbRFStatuin.setStatus('current')
if mibBuilder.loadTexts: bridgeCbRFStatuin.setDescription('Bridge CB RF Stats uin')
bridgeCbRFStatuout = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeCbRFStatuout.setStatus('current')
if mibBuilder.loadTexts: bridgeCbRFStatuout.setDescription('Bridge CB RF Stats uout')
bridgeCbRFStatutoss = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeCbRFStatutoss.setStatus('current')
if mibBuilder.loadTexts: bridgeCbRFStatutoss.setDescription('Bridge CB RF Stats utoss')
bridgeCbRFStatutosscap = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeCbRFStatutosscap.setStatus('current')
if mibBuilder.loadTexts: bridgeCbRFStatutosscap.setDescription('Bridge CB RF Stats utosscap')
bridgeCbErrStatNI1QSend = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeCbErrStatNI1QSend.setStatus('current')
if mibBuilder.loadTexts: bridgeCbErrStatNI1QSend.setDescription('Bridge CB Error Stats ErrNI1QSend')
bridgeCbErrStatNI2QSend = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 54), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeCbErrStatNI2QSend.setStatus('current')
if mibBuilder.loadTexts: bridgeCbErrStatNI2QSend.setDescription('Bridge CB Error Stats ErrNI2QSend')
bridgeCbErrStatBridgeFull = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 55), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeCbErrStatBridgeFull.setStatus('current')
if mibBuilder.loadTexts: bridgeCbErrStatBridgeFull.setDescription('Bridge CB Error Stats BridgeFull')
bridgeCbErrStatSendMsg = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 56), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeCbErrStatSendMsg.setStatus('current')
if mibBuilder.loadTexts: bridgeCbErrStatSendMsg.setDescription('Bridge CB Error Stats SendMsg')
bridgeCbErrStatAPFecQSend = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 57), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeCbErrStatAPFecQSend.setStatus('current')
if mibBuilder.loadTexts: bridgeCbErrStatAPFecQSend.setDescription('Bridge CB Error Stats APFecQSend')
bridgeCbErrStatApRfQSend = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 58), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeCbErrStatApRfQSend.setStatus('current')
if mibBuilder.loadTexts: bridgeCbErrStatApRfQSend.setDescription('Bridge CB Error Stats ApRfQSend')
rfStatXmtUDataCnt = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 59), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfStatXmtUDataCnt.setStatus('current')
if mibBuilder.loadTexts: rfStatXmtUDataCnt.setDescription('RF Scheduler Stats Transmit Unicast Data Count')
rfStatXmtBDataCnt = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 60), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfStatXmtBDataCnt.setStatus('current')
if mibBuilder.loadTexts: rfStatXmtBDataCnt.setDescription('RF Scheduler Stats Transmit Broadcast Data Count')
rfStatRcvUDataCnt = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 61), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfStatRcvUDataCnt.setStatus('current')
if mibBuilder.loadTexts: rfStatRcvUDataCnt.setDescription('RF Scheduler Stats Receive Unicast Data Count')
rfStatRcvBDataCnt = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 62), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfStatRcvBDataCnt.setStatus('current')
if mibBuilder.loadTexts: rfStatRcvBDataCnt.setDescription('RF Scheduler Stats Receive Broadcast Data Count')
rfStatXmtCntlCnt = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 63), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfStatXmtCntlCnt.setStatus('current')
if mibBuilder.loadTexts: rfStatXmtCntlCnt.setDescription('RF Scheduler Stats Transmit Control Count')
rfStatRcvCntlCnt = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 64), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfStatRcvCntlCnt.setStatus('current')
if mibBuilder.loadTexts: rfStatRcvCntlCnt.setDescription('RF Scheduler Stats Receive Control Count')
rfStatInSyncCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 65), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfStatInSyncCount.setStatus('current')
if mibBuilder.loadTexts: rfStatInSyncCount.setDescription('RF Scheduler Stats In Sync Count')
rfStatOutSyncCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 66), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfStatOutSyncCount.setStatus('current')
if mibBuilder.loadTexts: rfStatOutSyncCount.setDescription('RF Scheduler Stats Out Sync Count')
rfStatOverrunCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 67), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfStatOverrunCount.setStatus('current')
if mibBuilder.loadTexts: rfStatOverrunCount.setDescription('RF Scheduler Stats Overrun Count')
rfStatUnderrunCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 68), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfStatUnderrunCount.setStatus('current')
if mibBuilder.loadTexts: rfStatUnderrunCount.setDescription('RF Scheduler Stats Underrun Count')
rfStatRcvCorruptDataCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 69), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfStatRcvCorruptDataCount.setStatus('current')
if mibBuilder.loadTexts: rfStatRcvCorruptDataCount.setDescription('RF Scheduler Stats Receive Corrupt Data Count')
rfStatBadBcastCtlCnt = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 70), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfStatBadBcastCtlCnt.setStatus('current')
if mibBuilder.loadTexts: rfStatBadBcastCtlCnt.setDescription('RF Scheduler Stats Bad Broadcast Control Count')
rfStatPLLOutOfLockCnt = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 71), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfStatPLLOutOfLockCnt.setStatus('current')
if mibBuilder.loadTexts: rfStatPLLOutOfLockCnt.setDescription('RF Scheduler Stats PLL Out of Lock Count')
rfStatBeaconVerMismatchCnt = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 72), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfStatBeaconVerMismatchCnt.setStatus('current')
if mibBuilder.loadTexts: rfStatBeaconVerMismatchCnt.setDescription('RF Scheduler Stats Beacon version Mismatch Count')
rfStatBadFreqBcnRcvCnt = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 73), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfStatBadFreqBcnRcvCnt.setStatus('current')
if mibBuilder.loadTexts: rfStatBadFreqBcnRcvCnt.setDescription('RF Scheduler Stats Wrong Frequency Beacon Received Count')
rfStatnonLiteBcnRcvCnt = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 74), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfStatnonLiteBcnRcvCnt.setStatus('current')
if mibBuilder.loadTexts: rfStatnonLiteBcnRcvCnt.setDescription('RF Scheduler Stats Non Lite Beacon Received Count')
rfStatUnsupFeatBcnRcvCnt = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 75), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfStatUnsupFeatBcnRcvCnt.setStatus('current')
if mibBuilder.loadTexts: rfStatUnsupFeatBcnRcvCnt.setDescription('RF Scheduler Stats Unsupported Feature Beacon Received Count')
rfStatUnkwnFeatBcnRcvCnt = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 76), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfStatUnkwnFeatBcnRcvCnt.setStatus('current')
if mibBuilder.loadTexts: rfStatUnkwnFeatBcnRcvCnt.setDescription('RF Scheduler Stats Unknown Feature Beacon Received Count')
rfStatTxCalFailCnt = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 77), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfStatTxCalFailCnt.setStatus('current')
if mibBuilder.loadTexts: rfStatTxCalFailCnt.setDescription('RF Scheduler Stats TX Calibration Failures Count')
rfStatBadInSyncIDRcv = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 78), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfStatBadInSyncIDRcv.setStatus('current')
if mibBuilder.loadTexts: rfStatBadInSyncIDRcv.setDescription('RF Scheduler Stats Bad In Sync ID Received Count')
rfStatTempOutOfRange = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 79), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfStatTempOutOfRange.setStatus('current')
if mibBuilder.loadTexts: rfStatTempOutOfRange.setDescription('RF Scheduler Stats Temperature Out of Range Count')
rfStatRSSIOutOfRange = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 80), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfStatRSSIOutOfRange.setStatus('current')
if mibBuilder.loadTexts: rfStatRSSIOutOfRange.setDescription('RF Scheduler Stats RSSI Out of Range Count')
rfStatRangeCapEnf = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 81), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfStatRangeCapEnf.setStatus('current')
if mibBuilder.loadTexts: rfStatRangeCapEnf.setDescription('RF Scheduler Stats Range Cap Enforced Count')
rfStatRcvLTStart = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 82), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfStatRcvLTStart.setStatus('current')
if mibBuilder.loadTexts: rfStatRcvLTStart.setDescription('RF Scheduler Stats Rcv LT Start Count')
rfStatRcvLTStartHS = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 83), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfStatRcvLTStartHS.setStatus('current')
if mibBuilder.loadTexts: rfStatRcvLTStartHS.setDescription('RF Scheduler Stats Rcv LT Start HS Count')
rfStatRcvLTResult = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 84), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfStatRcvLTResult.setStatus('current')
if mibBuilder.loadTexts: rfStatRcvLTResult.setDescription('RF Scheduler Stats Rcv LT Result Count')
rfStatXmtLTResult = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 85), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfStatXmtLTResult.setStatus('current')
if mibBuilder.loadTexts: rfStatXmtLTResult.setDescription('RF Scheduler Stats Xmt LT Result Count')
whispFeatureKeyOrigin = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 86), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: whispFeatureKeyOrigin.setStatus('current')
if mibBuilder.loadTexts: whispFeatureKeyOrigin.setDescription('Origin of Feature Key which includes GMT time and location of the Key programming (if time is 0 the key was converted locally)')
radioMSN = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 87), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioMSN.setStatus('current')
if mibBuilder.loadTexts: radioMSN.setDescription('MSN of the radio.')
updateStatus = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 88), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: updateStatus.setStatus('current')
if mibBuilder.loadTexts: updateStatus.setDescription('Current Status of Device Update')
syslogStatTxSuccesses = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 89), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: syslogStatTxSuccesses.setStatus('current')
if mibBuilder.loadTexts: syslogStatTxSuccesses.setDescription('The count of Syslog messages sent to UDP layer.')
syslogStatDropped = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 90), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: syslogStatDropped.setStatus('current')
if mibBuilder.loadTexts: syslogStatDropped.setDescription('Number of dropped syslog messages due to device overload and/or resource limitations.')
fecStatLinkLost = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 91), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fecStatLinkLost.setStatus('current')
if mibBuilder.loadTexts: fecStatLinkLost.setDescription('Ethernet link lost count')
fecStatLinkDetected = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 92), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fecStatLinkDetected.setStatus('current')
if mibBuilder.loadTexts: fecStatLinkDetected.setDescription('Ethernet link detected count')
natDhcpStatus = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 93), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: natDhcpStatus.setStatus('current')
if mibBuilder.loadTexts: natDhcpStatus.setDescription('Display NAT Public interface current DHPC status.')
fecInDiscardsCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 94), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fecInDiscardsCount.setStatus('current')
if mibBuilder.loadTexts: fecInDiscardsCount.setDescription('Ethernet in discards count.')
fecInErrorsCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 95), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fecInErrorsCount.setStatus('current')
if mibBuilder.loadTexts: fecInErrorsCount.setDescription('Ethernet in errors count.')
fecOutDiscardsCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 96), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fecOutDiscardsCount.setStatus('current')
if mibBuilder.loadTexts: fecOutDiscardsCount.setDescription('Ethernet out discards count.')
fecOutErrorsCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 97), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fecOutErrorsCount.setStatus('current')
if mibBuilder.loadTexts: fecOutErrorsCount.setDescription('Ethernet out errors count.')
rfInDiscardsCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 98), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfInDiscardsCount.setStatus('deprecated')
if mibBuilder.loadTexts: rfInDiscardsCount.setDescription('RF in discards count. This attribute is deprecated. Use rfInDiscardsCountExt instead.')
rfInErrorsCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 99), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfInErrorsCount.setStatus('deprecated')
if mibBuilder.loadTexts: rfInErrorsCount.setDescription('RF in errors count. This attribute is deprecated. Use rfInErrorsCountExt instead.')
rfOutDiscardsCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 100), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfOutDiscardsCount.setStatus('deprecated')
if mibBuilder.loadTexts: rfOutDiscardsCount.setDescription('RF out discards count. This attribute is deprecated. Use rfOutDiscardsCountExt instead.')
rfOutErrorsCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 101), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfOutErrorsCount.setStatus('deprecated')
if mibBuilder.loadTexts: rfOutErrorsCount.setDescription('RF out errors count. This attribute is deprecated. Use rfOutErrorsCountExt instead.')
fecInDiscardsOverloadCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 102), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fecInDiscardsOverloadCount.setStatus('current')
if mibBuilder.loadTexts: fecInDiscardsOverloadCount.setDescription('Ethernet in discards overload.')
fecOutDiscardsOverloadCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 103), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fecOutDiscardsOverloadCount.setStatus('current')
if mibBuilder.loadTexts: fecOutDiscardsOverloadCount.setDescription('Ethernet out discards overload.')
rfInDiscardsOverloadCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 104), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfInDiscardsOverloadCount.setStatus('current')
if mibBuilder.loadTexts: rfInDiscardsOverloadCount.setDescription('Rf in discards overload.')
rfOutDiscardsOverloadCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 105), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfOutDiscardsOverloadCount.setStatus('current')
if mibBuilder.loadTexts: rfOutDiscardsOverloadCount.setDescription('Rf out discards overload.')
fpgaCompileInfo = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 106), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpgaCompileInfo.setStatus('current')
if mibBuilder.loadTexts: fpgaCompileInfo.setDescription('Display the fpga compiled attributes. (Engineering Only)')
fpgaBuildDate = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 107), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpgaBuildDate.setStatus('current')
if mibBuilder.loadTexts: fpgaBuildDate.setDescription('Display the entire fpga build date string. (Engineering Only)')
aggregateBandwidthCap = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 108), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggregateBandwidthCap.setStatus('current')
if mibBuilder.loadTexts: aggregateBandwidthCap.setDescription('The maximum aggregate (uplink + downlink) the radio is capable of.')
calibrationStatusBool = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 109), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notCalibrated", 0), ("calibrated", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: calibrationStatusBool.setStatus('current')
if mibBuilder.loadTexts: calibrationStatusBool.setDescription('Boolean OID to show if device is calibrated.\n                            Applicable to FSK and MIMO radios only.')
calibrationStatusBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 110), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: calibrationStatusBox.setStatus('current')
if mibBuilder.loadTexts: calibrationStatusBox.setDescription('String to show if radio is calibrated.\n                            Applicable to FSK and MIMO radios only.')
radioEngKeyed = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 111), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioEngKeyed.setStatus('current')
if mibBuilder.loadTexts: radioEngKeyed.setDescription('This will be set either as 0 if the engineering key patch is not applied to the radio or 1 if it is applied.')
bridgeCbFecStatfloods = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 112), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeCbFecStatfloods.setStatus('current')
if mibBuilder.loadTexts: bridgeCbFecStatfloods.setDescription('Bridge CB FEC Stats Floods (Multipoint AP only)')
bridgeCbRFStatfloods = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 113), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeCbRFStatfloods.setStatus('current')
if mibBuilder.loadTexts: bridgeCbRFStatfloods.setDescription('Bridge CB RF Stats Floods (Multipoint AP only)')
catalinaGainRxCH1 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 114), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catalinaGainRxCH1.setStatus('current')
if mibBuilder.loadTexts: catalinaGainRxCH1.setDescription('Rcv Gain on Catalina Rx CH1. Engineering use only.')
catalinaGainRxCH2 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 115), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catalinaGainRxCH2.setStatus('current')
if mibBuilder.loadTexts: catalinaGainRxCH2.setDescription('Rcv Gain on Catalina Rx CH2. Engineering use only.')
antType = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 116), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("integrated", 0), ("external", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: antType.setStatus('current')
if mibBuilder.loadTexts: antType.setDescription('Indicates whether the antenna is integrated or external (connectorized).')
rfStatRcvCorruptControlCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 117), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfStatRcvCorruptControlCount.setStatus('current')
if mibBuilder.loadTexts: rfStatRcvCorruptControlCount.setDescription('RF Scheduler Stats Receive Corrupt Control Data Count')
numLBTDetections = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 118), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numLBTDetections.setStatus('current')
if mibBuilder.loadTexts: numLBTDetections.setDescription('Number of LBT Detections since last boot.')
bridgeCbEthAuxStatbin = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 119), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeCbEthAuxStatbin.setStatus('current')
if mibBuilder.loadTexts: bridgeCbEthAuxStatbin.setDescription('Bridge CB Eth Aux Stats bin')
bridgeCbEthAuxStatbout = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 120), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeCbEthAuxStatbout.setStatus('current')
if mibBuilder.loadTexts: bridgeCbEthAuxStatbout.setDescription('Bridge CB Eth Aux Stats bout')
catalinaAttenTxCH1 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 121), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catalinaAttenTxCH1.setStatus('current')
if mibBuilder.loadTexts: catalinaAttenTxCH1.setDescription('Attenuation on Catalina Tx CH1. Engineering Use Only.')
catalinaAttenTxCH2 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 122), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catalinaAttenTxCH2.setStatus('current')
if mibBuilder.loadTexts: catalinaAttenTxCH2.setDescription('Attenuation on Catalina Tx CH2. Engineering use only.')
catalinaCurrDetSetpointTxCH1 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 123), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catalinaCurrDetSetpointTxCH1.setStatus('current')
if mibBuilder.loadTexts: catalinaCurrDetSetpointTxCH1.setDescription('Current Detector Setpoint on Catalina Tx CH1. Engineering Use Only.')
catalinaCurrDetSetpointTxCH2 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 124), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catalinaCurrDetSetpointTxCH2.setStatus('current')
if mibBuilder.loadTexts: catalinaCurrDetSetpointTxCH2.setDescription('Current Detector Setpoint on Catalina Tx CH2. Engineering use only.')
catalinaCurrDetReadRefTxCH1 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 125), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catalinaCurrDetReadRefTxCH1.setStatus('current')
if mibBuilder.loadTexts: catalinaCurrDetReadRefTxCH1.setDescription('Current Detector Reference on Catalina Tx CH1. Engineering Use Only.')
catalinaCurrDetReadRefTxCH2 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 126), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catalinaCurrDetReadRefTxCH2.setStatus('current')
if mibBuilder.loadTexts: catalinaCurrDetReadRefTxCH2.setDescription('Current Detector Reference on Catalina Tx CH2. Engineering use only.')
catalinaCurrDetReadPowerOnTxCH1 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 127), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catalinaCurrDetReadPowerOnTxCH1.setStatus('current')
if mibBuilder.loadTexts: catalinaCurrDetReadPowerOnTxCH1.setDescription('Current Detector PowerOn on Catalina Tx CH1. Engineering Use Only.')
catalinaCurrDetReadPowerOnTxCH2 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 128), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catalinaCurrDetReadPowerOnTxCH2.setStatus('current')
if mibBuilder.loadTexts: catalinaCurrDetReadPowerOnTxCH2.setDescription('Current Detector PowerOn on Catalina Tx CH2. Engineering use only.')
catalinaOpenLoopAttenTxCH1 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 129), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catalinaOpenLoopAttenTxCH1.setStatus('current')
if mibBuilder.loadTexts: catalinaOpenLoopAttenTxCH1.setDescription('Open Loop Attenuation on Catalina Tx CH1. Engineering Use Only.')
catalinaOpenLoopAttenTxCH2 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 130), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catalinaOpenLoopAttenTxCH2.setStatus('current')
if mibBuilder.loadTexts: catalinaOpenLoopAttenTxCH2.setDescription('Open Loop Attenuation on Catalina Tx CH2. Engineering use only.')
catalinaTargetDetSetpointTxCH1 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 131), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catalinaTargetDetSetpointTxCH1.setStatus('current')
if mibBuilder.loadTexts: catalinaTargetDetSetpointTxCH1.setDescription('Target Detector Setpoint on Catalina Tx CH1. Engineering Use Only.')
catalinaTargetDetSetpointTxCH2 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 132), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catalinaTargetDetSetpointTxCH2.setStatus('current')
if mibBuilder.loadTexts: catalinaTargetDetSetpointTxCH2.setDescription('Target Detector Setpoint on Catalina Tx CH2. Engineering use only.')
catalinaGainReductionRxCH1 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 133), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catalinaGainReductionRxCH1.setStatus('current')
if mibBuilder.loadTexts: catalinaGainReductionRxCH1.setDescription('Gain Reduction on Catalina Rx CH1. Engineering Use Only.')
catalinaGainReductionRxCH2 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 134), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catalinaGainReductionRxCH2.setStatus('current')
if mibBuilder.loadTexts: catalinaGainReductionRxCH2.setDescription('Gain Reduction on Catalina Rx CH2. Engineering use only.')
catalinaLoAttenRxCH1 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 135), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catalinaLoAttenRxCH1.setStatus('current')
if mibBuilder.loadTexts: catalinaLoAttenRxCH1.setDescription('Lo Attenuation on Catalina Rx CH1. Engineering Use Only.')
catalinaLoAttenRxCH2 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 136), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catalinaLoAttenRxCH2.setStatus('current')
if mibBuilder.loadTexts: catalinaLoAttenRxCH2.setDescription('Lo Attenuation on Catalina Rx CH2. Engineering use only.')
catalinaTargetGainRxCH1 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 137), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catalinaTargetGainRxCH1.setStatus('current')
if mibBuilder.loadTexts: catalinaTargetGainRxCH1.setDescription('Target Gain on Catalina Rx CH1. Engineering Use Only.')
catalinaTargetGainRxCH2 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 138), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catalinaTargetGainRxCH2.setStatus('current')
if mibBuilder.loadTexts: catalinaTargetGainRxCH2.setDescription('Target Gain on Catalina Rx CH2. Engineering use only.')
bridgeCbEthAuxStatfloods = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 139), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeCbEthAuxStatfloods.setStatus('current')
if mibBuilder.loadTexts: bridgeCbEthAuxStatfloods.setDescription('Bridge CB Eth Aux Stats Floods (Multipoint AP only)')
bridgeCbEthAuxStatbtoss = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 141), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeCbEthAuxStatbtoss.setStatus('current')
if mibBuilder.loadTexts: bridgeCbEthAuxStatbtoss.setDescription('Bridge CB Eth Aux Stats btoss')
bridgeCbEthAuxStatbtosscap = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 142), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeCbEthAuxStatbtosscap.setStatus('current')
if mibBuilder.loadTexts: bridgeCbEthAuxStatbtosscap.setDescription('Bridge CB Eth Aux Stats btosscap')
bridgeCbEthAuxStatuin = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 143), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeCbEthAuxStatuin.setStatus('current')
if mibBuilder.loadTexts: bridgeCbEthAuxStatuin.setDescription('Bridge CB Eth Aux Stats uin')
bridgeCbEthAuxStatuout = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 144), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeCbEthAuxStatuout.setStatus('current')
if mibBuilder.loadTexts: bridgeCbEthAuxStatuout.setDescription('Bridge CB Eth Aux Stats uout')
bridgeCbEthAuxStatutoss = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 145), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeCbEthAuxStatutoss.setStatus('current')
if mibBuilder.loadTexts: bridgeCbEthAuxStatutoss.setDescription('Bridge CB Eth Aux Stats utoss')
bridgeCbEthAuxStatutosscap = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 146), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeCbEthAuxStatutosscap.setStatus('current')
if mibBuilder.loadTexts: bridgeCbEthAuxStatutosscap.setDescription('Bridge CB Eth Aux Stats utosscap')
radioWatchDogLogged = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 147), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioWatchDogLogged.setStatus('current')
if mibBuilder.loadTexts: radioWatchDogLogged.setDescription('This will be set either as 0 if there is no watchdog event logged or 1 if there is.')
radioFatalErrorLogged = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 148), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioFatalErrorLogged.setStatus('current')
if mibBuilder.loadTexts: radioFatalErrorLogged.setDescription('This will be set either as 0 if there is no fatalerror event logged or 1 if there is.')
fecStatLinkUptime = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 149), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fecStatLinkUptime.setStatus('current')
if mibBuilder.loadTexts: fecStatLinkUptime.setDescription('Uptime of main ethernet link in seconds')
fecAuxStatLinkUptime = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 150), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fecAuxStatLinkUptime.setStatus('current')
if mibBuilder.loadTexts: fecAuxStatLinkUptime.setDescription('Uptime of main ethernet link in seconds')
rfStatXmtMDataCnt = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 217), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfStatXmtMDataCnt.setStatus('current')
if mibBuilder.loadTexts: rfStatXmtMDataCnt.setDescription('RF Scheduler Stats Transmit Multicast Data Count')
rfStatRcvMDataCnt = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 218), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfStatRcvMDataCnt.setStatus('current')
if mibBuilder.loadTexts: rfStatRcvMDataCnt.setDescription('RF Scheduler Stats Receive Multicast Data Count')
fecStatUnderSizedToss = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 219), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fecStatUnderSizedToss.setStatus('current')
if mibBuilder.loadTexts: fecStatUnderSizedToss.setDescription('Undersized Toss Count')
fecRxBabErr = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 220), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fecRxBabErr.setStatus('current')
if mibBuilder.loadTexts: fecRxBabErr.setDescription('Error count in Babble Receiver.')
fecTxHbErr = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 221), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fecTxHbErr.setStatus('current')
if mibBuilder.loadTexts: fecTxHbErr.setDescription('Number of packets having Transmit heartbeat error.')
fecEthBusErr = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 222), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fecEthBusErr.setStatus('current')
if mibBuilder.loadTexts: fecEthBusErr.setDescription('Ethernet Busy Error Count')
fecCRCError = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 223), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fecCRCError.setStatus('current')
if mibBuilder.loadTexts: fecCRCError.setDescription('Number of packets having CRC Error.')
fecRxFifoNoBuf = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 224), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fecRxFifoNoBuf.setStatus('current')
if mibBuilder.loadTexts: fecRxFifoNoBuf.setDescription('Number of times could not get a buffer from Rx Fifo.')
fecRxOverrun = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 225), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fecRxOverrun.setStatus('current')
if mibBuilder.loadTexts: fecRxOverrun.setDescription('Number of times Rx Fifo Overrun.')
fecLateCollision = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 226), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fecLateCollision.setStatus('current')
if mibBuilder.loadTexts: fecLateCollision.setDescription('Number of packets having late collision.')
fecRetransLimitExp = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 227), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fecRetransLimitExp.setStatus('current')
if mibBuilder.loadTexts: fecRetransLimitExp.setDescription('Number of packets whose retransmision limit expired.')
fecTxUnderrun = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 228), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fecTxUnderrun.setStatus('current')
if mibBuilder.loadTexts: fecTxUnderrun.setDescription('Number of times Tx queue underrun.')
fecCarSenseLost = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 229), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fecCarSenseLost.setStatus('current')
if mibBuilder.loadTexts: fecCarSenseLost.setDescription('Carrier Sense Lost count.')
fecNoCarrier = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 230), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fecNoCarrier.setStatus('current')
if mibBuilder.loadTexts: fecNoCarrier.setDescription('No carrier asserted by external transceiver during transmission.')
framePeriodCurrent = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 231), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("twoPointFiveMs", 0), ("fiveMs", 1), ("scanning", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: framePeriodCurrent.setStatus('current')
if mibBuilder.loadTexts: framePeriodCurrent.setDescription('Current frame period of the radio.')
activeTxPowerStr = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 232), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeTxPowerStr.setStatus('current')
if mibBuilder.loadTexts: activeTxPowerStr.setDescription('Current transmit power level, including potential power backoff information.\n\t\t\t\t\t\t\tNot applicable to PMP 450m.')
activeTxPowerHdths = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 233), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeTxPowerHdths.setStatus('current')
if mibBuilder.loadTexts: activeTxPowerHdths.setDescription('Current transmit power level, in hundredths of dBm.\n\t\t\t\t\t\t\tNot appliable on PMP 450m.')
poeT2Status = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 234), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("error", 0), ("notPresent", 1), ("notPresentAndIgnored", 2), ("present", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: poeT2Status.setStatus('current')
if mibBuilder.loadTexts: poeT2Status.setDescription('Indicates the 802.3at Type 2 Classification status.  This is only available on the 450i.')
fecAuxStatLinkDetected = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 235), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fecAuxStatLinkDetected.setStatus('current')
if mibBuilder.loadTexts: fecAuxStatLinkDetected.setDescription('450i Aux Ethernet link detected count')
fecAuxStatLinkLost = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 236), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fecAuxStatLinkLost.setStatus('current')
if mibBuilder.loadTexts: fecAuxStatLinkLost.setDescription('450i Aux Ethernet ink lost count')
fecAuxInDiscardsCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 237), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fecAuxInDiscardsCount.setStatus('current')
if mibBuilder.loadTexts: fecAuxInDiscardsCount.setDescription('450i Aux Ethernet in discards count.')
fecAuxInErrorsCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 238), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fecAuxInErrorsCount.setStatus('current')
if mibBuilder.loadTexts: fecAuxInErrorsCount.setDescription('450i Aux Ethernet in errors count.')
fecAuxOutDiscardsCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 239), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fecAuxOutDiscardsCount.setStatus('current')
if mibBuilder.loadTexts: fecAuxOutDiscardsCount.setDescription('450i Aux Ethernet out discards count.')
fecAuxOutErrorsCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 240), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fecAuxOutErrorsCount.setStatus('current')
if mibBuilder.loadTexts: fecAuxOutErrorsCount.setDescription('450i Aux Ethernet out errors count.')
fecAuxCRCError = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 241), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fecAuxCRCError.setStatus('current')
if mibBuilder.loadTexts: fecAuxCRCError.setDescription('450i Aux Ethernet Number of packets having CRC Error.')
fecAuxRxOverrun = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 242), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fecAuxRxOverrun.setStatus('current')
if mibBuilder.loadTexts: fecAuxRxOverrun.setDescription('450i Aux Ethernet Number of times Rx Fifo Overrun.')
fecAuxLateCollision = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 243), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fecAuxLateCollision.setStatus('current')
if mibBuilder.loadTexts: fecAuxLateCollision.setDescription('450i Aux Ethernet Number of packets having late collision.')
fecAuxRetransLimitExp = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 244), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fecAuxRetransLimitExp.setStatus('current')
if mibBuilder.loadTexts: fecAuxRetransLimitExp.setDescription('450i Aux Ethernet Number of packets whose retransmision limit expired.')
fecAuxTxUnderrun = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 245), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fecAuxTxUnderrun.setStatus('current')
if mibBuilder.loadTexts: fecAuxTxUnderrun.setDescription('450i Aux Ethernet Number of times Tx queue underrun.')
fecAuxCarSenseLost = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 246), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fecAuxCarSenseLost.setStatus('current')
if mibBuilder.loadTexts: fecAuxCarSenseLost.setDescription('450i Aux Ethernet Carrier Sense Lost count.')
fecAuxNoCarrier = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 247), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fecAuxNoCarrier.setStatus('current')
if mibBuilder.loadTexts: fecAuxNoCarrier.setDescription('450i Aux Ethernet No carrier asserted by external transceiver during transmission.')
fecAuxLargeFrame = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 248), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fecAuxLargeFrame.setStatus('current')
if mibBuilder.loadTexts: fecAuxLargeFrame.setDescription('450i Aux Ethernet Large Frame Error.')
fecAuxRuntFrame = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 249), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fecAuxRuntFrame.setStatus('current')
if mibBuilder.loadTexts: fecAuxRuntFrame.setDescription('450i Aux Ethernet Runt Frame Error.')
fecLargeFrame = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 250), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fecLargeFrame.setStatus('current')
if mibBuilder.loadTexts: fecLargeFrame.setDescription('Large Frame Error.')
fecRuntFrame = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 251), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fecRuntFrame.setStatus('current')
if mibBuilder.loadTexts: fecRuntFrame.setDescription('Runt Frame Error.')
soundingStatClear = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 252), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: soundingStatClear.setStatus('current')
if mibBuilder.loadTexts: soundingStatClear.setDescription('Sounding Stat Clear                       \n                        Set to any value to clear all Sounding Stats')
soundingStatRequestCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 253), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: soundingStatRequestCount.setStatus('current')
if mibBuilder.loadTexts: soundingStatRequestCount.setDescription('Sounding Stats Request Count')
soundingStatResponseCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 254), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: soundingStatResponseCount.setStatus('current')
if mibBuilder.loadTexts: soundingStatResponseCount.setDescription('Sounding Stats Response Count')
soundingStatRequestsIgnored = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 255), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: soundingStatRequestsIgnored.setStatus('current')
if mibBuilder.loadTexts: soundingStatRequestsIgnored.setDescription('Sounding Stats Requests Ignored')
soundingStatAvgRequestInterval = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 256), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: soundingStatAvgRequestInterval.setStatus('current')
if mibBuilder.loadTexts: soundingStatAvgRequestInterval.setDescription('Sounding Stats Avg Request Interval (ms)')
soundingStatMaxRequestInterval = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 257), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: soundingStatMaxRequestInterval.setStatus('current')
if mibBuilder.loadTexts: soundingStatMaxRequestInterval.setDescription('Sounding Stats Max Request Interval (ms)')
soundingStatErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 258), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: soundingStatErrorCount.setStatus('current')
if mibBuilder.loadTexts: soundingStatErrorCount.setDescription('Sounding Stats Error Count')
camAccID = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 259), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: camAccID.setStatus('current')
if mibBuilder.loadTexts: camAccID.setDescription('CnMaestro Account to which Radio is onboarded.')
cnMaestroStatus = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 260), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnMaestroStatus.setStatus('current')
if mibBuilder.loadTexts: cnMaestroStatus.setDescription('CnMaestro connection status.')
daVersion = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 261), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: daVersion.setStatus('current')
if mibBuilder.loadTexts: daVersion.setDescription('Device Agent Version number.')
soundingStatRequestsDropped = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 262), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: soundingStatRequestsDropped.setStatus('current')
if mibBuilder.loadTexts: soundingStatRequestsDropped.setDescription('Sounding Stats Requests Dropped')
soundingStatResponsesSuppressed = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 263), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: soundingStatResponsesSuppressed.setStatus('current')
if mibBuilder.loadTexts: soundingStatResponsesSuppressed.setDescription('Sounding Stats Responses Suppressed')
soundingStatVersionMismatch = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 264), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: soundingStatVersionMismatch.setStatus('current')
if mibBuilder.loadTexts: soundingStatVersionMismatch.setDescription('Sounding Stats Version Mismatch')
hardwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 265), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hardwareVersion.setStatus('current')
if mibBuilder.loadTexts: hardwareVersion.setDescription('Read directly from the resistors on the board is the form Major.Minor (cnMedusa-specific, Engineering Only)')
productTypeName = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 266), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productTypeName.setStatus('current')
if mibBuilder.loadTexts: productTypeName.setDescription('Basic product type, based on board type and factory programming.')
radioStatusTransmitControlOverridden = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 267), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioStatusTransmitControlOverridden.setStatus('current')
if mibBuilder.loadTexts: radioStatusTransmitControlOverridden.setDescription('Transmit mode control is overridden in config\n                            PMP 450m only.')
radioStatusTrackingFailure = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 268), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioStatusTrackingFailure.setStatus('current')
if mibBuilder.loadTexts: radioStatusTrackingFailure.setDescription('Feedback tracking loop is out of tolerance - Transmit disabled\n                            PMP 450m only.')
radioStatusSectorWeightsOff = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 269), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioStatusSectorWeightsOff.setStatus('current')
if mibBuilder.loadTexts: radioStatusSectorWeightsOff.setDescription('Sector mode weights disabled\n                            PMP 450m only.')
radioStatusRxBeamFormingOff = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 270), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioStatusRxBeamFormingOff.setStatus('current')
if mibBuilder.loadTexts: radioStatusRxBeamFormingOff.setDescription('Rx beamforming disabled\n                            PMP 450m only.')
radioStatusPowerDetectorInactive = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 271), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioStatusPowerDetectorInactive.setStatus('current')
if mibBuilder.loadTexts: radioStatusPowerDetectorInactive.setDescription('Power detector control not active\n                            PMP 450m only.')
radioStatusCatQuadCalFail = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 272), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioStatusCatQuadCalFail.setStatus('current')
if mibBuilder.loadTexts: radioStatusCatQuadCalFail.setDescription('Catalina Tx quadrature calibration failure\n                            450 platform only. Engineering use only.')
nearFieldOperationActive = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 273), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("true", 1), ("false", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nearFieldOperationActive.setStatus('current')
if mibBuilder.loadTexts: nearFieldOperationActive.setDescription('When true(1) near field operation is enabled and near\n                            field range correction is being applied.\n                            PMP 450m only.')
radioStatusAlarmReason = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 274), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioStatusAlarmReason.setStatus('current')
if mibBuilder.loadTexts: radioStatusAlarmReason.setDescription('Reason code associated with the cause of a Radio Status Alarm being triggered. \n                            Provide this code to Cambium Networks Support.\n                            PMP 450m only.')
radioStatusAlarm = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 275), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("true", 1), ("false", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioStatusAlarm.setStatus('current')
if mibBuilder.loadTexts: radioStatusAlarm.setDescription('Radio Status Alarm.\n                            PMP 450m only.')
forceReassessmentActive = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 276), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("true", 1), ("false", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: forceReassessmentActive.setStatus('current')
if mibBuilder.loadTexts: forceReassessmentActive.setDescription('When true(1) forced channel assessment is enabled.\n                            MU-MIMO only.')
fecExcessiveDeferrals = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 277), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fecExcessiveDeferrals.setStatus('current')
if mibBuilder.loadTexts: fecExcessiveDeferrals.setDescription('Excessive Deferrals.')
rfInDiscardsCountExt = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 278), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfInDiscardsCountExt.setStatus('current')
if mibBuilder.loadTexts: rfInDiscardsCountExt.setDescription('Extended RF in discards count with 64 bit counters.')
rfInErrorsCountExt = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 279), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfInErrorsCountExt.setStatus('current')
if mibBuilder.loadTexts: rfInErrorsCountExt.setDescription('Extended RF in errors count with 64 bit counters.')
rfOutDiscardsCountExt = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 280), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfOutDiscardsCountExt.setStatus('current')
if mibBuilder.loadTexts: rfOutDiscardsCountExt.setDescription('Extended RF out discards count with 64 bit counters.')
rfOutErrorsCountExt = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 281), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfOutErrorsCountExt.setStatus('current')
if mibBuilder.loadTexts: rfOutErrorsCountExt.setDescription('Extended RF out errors count with 64 bit counters.')
boardModel = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 1, 284), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardModel.setStatus('current')
if mibBuilder.loadTexts: boardModel.setDescription('Returns Board model of the device.')
linkNegoSpeed = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkNegoSpeed.setStatus('obsolete')
if mibBuilder.loadTexts: linkNegoSpeed.setDescription('Link negotiation speeds.\n            H10BT -- 10 Base T Half Duplex,\n            F10BT -- 10 Base T Full Duplex,\n            H100BT -- 100 Base T Half Duplex,\n            F100BT -- 100 Base T Full Duplex.\n            Separate the values with comma when doing a set.\n            e.g. H10BT,F10BT,H100BT,F100BT')
colorCode = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: colorCode.setStatus('current')
if mibBuilder.loadTexts: colorCode.setDescription('Color code.')
displayOnlyAccess = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: displayOnlyAccess.setStatus('obsolete')
if mibBuilder.loadTexts: displayOnlyAccess.setDescription('This variable is deprecated.')
fullAccess = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fullAccess.setStatus('current')
if mibBuilder.loadTexts: fullAccess.setDescription('Full access password.')
webAutoUpdate = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 5), Integer32()).setUnits('Seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: webAutoUpdate.setStatus('current')
if mibBuilder.loadTexts: webAutoUpdate.setDescription('Web page auto update in seconds. 0 means disabled.')
pass1Status = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pass1Status.setStatus('current')
if mibBuilder.loadTexts: pass1Status.setDescription('Password 1(display only) status.')
pass2Status = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pass2Status.setStatus('current')
if mibBuilder.loadTexts: pass2Status.setDescription('Password 2(full access) status.')
bridgeEntryTimeout = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(25, 1440))).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeEntryTimeout.setStatus('current')
if mibBuilder.loadTexts: bridgeEntryTimeout.setDescription('Bridge table time out Range : 25 -- 1440 Minutes.')
snmpMibPerm = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("readWrite", 0), ("readOnly", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpMibPerm.setStatus('current')
if mibBuilder.loadTexts: snmpMibPerm.setDescription('Read/Write permission for MIB groups.')
bhTimingMode = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("timingMaster", 1), ("timeingSlave", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bhTimingMode.setStatus('current')
if mibBuilder.loadTexts: bhTimingMode.setDescription('Variable to switch between Timing Master and Timing Slave.\n            For Backhaul units only.')
bhModulation = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("tenMbitsPerSecond", 0), ("twentyMbitsPerSecond", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bhModulation.setStatus('obsolete')
if mibBuilder.loadTexts: bhModulation.setDescription('Modulation scheme. For Backhaul units only. Only level 4\n            backhaul can be changed to 20Mbits/Second.')
powerControl = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("low", 0), ("normal", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerControl.setStatus('current')
if mibBuilder.loadTexts: powerControl.setDescription('Power control.\n                         FSK Only.')
extFilterDelay = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 13), Integer32()).setUnits('nanoseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: extFilterDelay.setStatus('obsolete')
if mibBuilder.loadTexts: extFilterDelay.setDescription('Obsoleted. External Filters Delay. For 900MHz FSK radios only.')
antennaGain = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 14), Integer32()).setUnits('dBi').setMaxAccess("readwrite")
if mibBuilder.loadTexts: antennaGain.setStatus('current')
if mibBuilder.loadTexts: antennaGain.setDescription('External Antenna Gain. For radios that uses an external antenna or the DFS feature.\n                        \tNot applicable to PMP 450m.')
eirp = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 15), Integer32()).setUnits('dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: eirp.setStatus('current')
if mibBuilder.loadTexts: eirp.setDescription('Transmit EIRP of radio.\n                            PMP 450m only.')
dynamicLearning = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dynamicLearning.setStatus('current')
if mibBuilder.loadTexts: dynamicLearning.setDescription('To enable VLAN dynamic learning.')
managementVID = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: managementVID.setStatus('current')
if mibBuilder.loadTexts: managementVID.setDescription('Management VLAN VID.')
agingTimeout = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agingTimeout.setStatus('current')
if mibBuilder.loadTexts: agingTimeout.setDescription('Aging timeout.')
frameType = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("allframes", 0), ("taggedonly", 1), ("untaggedonly", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frameType.setStatus('current')
if mibBuilder.loadTexts: frameType.setDescription('Allow only tagged frame.')
addVlanMember = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: addVlanMember.setStatus('current')
if mibBuilder.loadTexts: addVlanMember.setDescription('Write-Only OID,Add VLAN number which needs to be added.')
removeVlanMember = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: removeVlanMember.setStatus('current')
if mibBuilder.loadTexts: removeVlanMember.setDescription('Write-only OID,Enter VLAN ID which needs to deleted.\n                        If Vlan doesnot exist an error will be returned.')
scheduling = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("hardware", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scheduling.setStatus('current')
if mibBuilder.loadTexts: scheduling.setDescription('To use hardware or software scheduling')
transmitterOP = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 23), Integer32()).setUnits('dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: transmitterOP.setStatus('current')
if mibBuilder.loadTexts: transmitterOP.setDescription('Transmitter output power.  This is not available on OFDM SMs.\n                        \tNot applicable for PMP 450m. See EIRP OID.')
bridgeEnable = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeEnable.setStatus('current')
if mibBuilder.loadTexts: bridgeEnable.setDescription('Disable or enable bridging functionality for a BH unit.')
fecEnable = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fecEnable.setStatus('current')
if mibBuilder.loadTexts: fecEnable.setDescription('Disable or enable FEC error correction functionality\n            for multipoint units.')
trapIP1 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 26), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapIP1.setStatus('obsolete')
if mibBuilder.loadTexts: trapIP1.setDescription('Obsoleted.  Configure with whispBoxDNS.trap1.')
trapIP2 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 27), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapIP2.setStatus('obsolete')
if mibBuilder.loadTexts: trapIP2.setDescription('Obsoleted.  Configure with whispBoxDNS.trap2.')
trapIP3 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 28), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapIP3.setStatus('obsolete')
if mibBuilder.loadTexts: trapIP3.setDescription('Obsoleted.  Configure with whispBoxDNS.trap3.')
trapIP4 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 29), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapIP4.setStatus('obsolete')
if mibBuilder.loadTexts: trapIP4.setDescription('Obsoleted.  Configure with whispBoxDNS.trap4.')
trapIP5 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 30), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapIP5.setStatus('obsolete')
if mibBuilder.loadTexts: trapIP5.setDescription('Obsoleted.  Configure with whispBoxDNS.trap5.')
trapIP6 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 31), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapIP6.setStatus('obsolete')
if mibBuilder.loadTexts: trapIP6.setDescription('Obsoleted.  Configure with whispBoxDNS.trap6.')
trapIP7 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 32), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapIP7.setStatus('obsolete')
if mibBuilder.loadTexts: trapIP7.setDescription('Obsoleted.  Configure with whispBoxDNS.trap7.')
trapIP8 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 33), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapIP8.setStatus('obsolete')
if mibBuilder.loadTexts: trapIP8.setDescription('Obsoleted.  Configure with whispBoxDNS.trap8.')
trapIP9 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 34), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapIP9.setStatus('obsolete')
if mibBuilder.loadTexts: trapIP9.setDescription('Obsoleted.  Configure with whispBoxDNS.trap9.')
trapIP10 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 35), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapIP10.setStatus('obsolete')
if mibBuilder.loadTexts: trapIP10.setDescription('Obsoleted.  Configure with whispBoxDNS.trap10.')
commStringRWrite = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 36), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commStringRWrite.setStatus('current')
if mibBuilder.loadTexts: commStringRWrite.setDescription('Read/Write Community string.  This is a write-only OID.')
subnetMask = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 37), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subnetMask.setStatus('current')
if mibBuilder.loadTexts: subnetMask.setDescription('Subnet mask for the management IP 1.')
mngtIP = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 38), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mngtIP.setStatus('current')
if mibBuilder.loadTexts: mngtIP.setDescription('Management IP address 1.')
allowVIDAccess = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: allowVIDAccess.setStatus('current')
if mibBuilder.loadTexts: allowVIDAccess.setDescription('Allow or disallow local SM management VID access.')
setDefaultPlug = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setDefaultPlug.setStatus('current')
if mibBuilder.loadTexts: setDefaultPlug.setDescription('If enabled parameters are set to Factory Defaults upon default plug mode detection.')
hwsCompatibility = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwsCompatibility.setStatus('obsolete')
if mibBuilder.loadTexts: hwsCompatibility.setDescription('If enable, it ensures 6.0 compatibility with HWS.')
gpsInput = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("generateSyncSignal", 0), ("syncToReceivedSignalTimingPort", 1), ("syncToReceivedSignalPowerPort", 2), ("syncToiGPS", 3), ("autoSync", 4), ("autoSyncFreeRun", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gpsInput.setStatus('current')
if mibBuilder.loadTexts: gpsInput.setDescription('Values 1, 2, 3 have been deprecated.\n                                (0) Generate AP sync signal.\n                                (1) Deprecated. Sync AP to received signal (Timing Port/UGPS). It will set AutoSync.\n                                (2) Deprecated. Sync AP to received signal (Power Port). It will set AutoSync plus Free Run.\n                                (3) Deprecated. Sync AP using iGPS (Only on devices which support it). It will set AutoSync plus Free Run.\n                                (4) AutoSync.\n                                (5) AutoSync plus Free Run.')
ism = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ism.setStatus('current')
if mibBuilder.loadTexts: ism.setDescription('Enable ISM on 5.7GHz frequency band radios.')
hiPriority = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hiPriority.setStatus('obsolete')
if mibBuilder.loadTexts: hiPriority.setDescription('Enable Hi Priority Data Queue on BH radios.')
userName = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 45), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userName.setStatus('current')
if mibBuilder.loadTexts: userName.setDescription('User name.To create read-only user set userMode OID first.\n                        Maximum of 4 users can exist in system.')
userPassword = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userPassword.setStatus('current')
if mibBuilder.loadTexts: userPassword.setDescription('User password.To create read-only user set userMode OID first.')
userAccessLevel = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 47), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userAccessLevel.setStatus('current')
if mibBuilder.loadTexts: userAccessLevel.setDescription('User access level.To create read-only user set userMode OID first.\n                        1=TECH\n\t\t\t\t\t\t2=INSTALL\n\t\t\t\t\t\t3=ADMIN')
deleteUser = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deleteUser.setStatus('current')
if mibBuilder.loadTexts: deleteUser.setDescription('User name to remove.')
twoXRate = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: twoXRate.setStatus('obsolete')
if mibBuilder.loadTexts: twoXRate.setDescription('To enable or disable double rate.')
lanDhcpState = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lanDhcpState.setStatus('current')
if mibBuilder.loadTexts: lanDhcpState.setDescription('To enable or disable LAN Interface DHCP feature.')
sessionTimeout = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 51), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sessionTimeout.setStatus('current')
if mibBuilder.loadTexts: sessionTimeout.setDescription('Timer for Telnet, Web and FTP sessions.')
vlanMemberSource = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("configured", 0), ("active", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanMemberSource.setStatus('current')
if mibBuilder.loadTexts: vlanMemberSource.setDescription('Specified the VLAN member source to display. 0=configured, 1=active configuration.\n            Note that this OID is internal to SNMP and is not available at the Web Interface.')
addCustomFreqList = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 53), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: addCustomFreqList.setStatus('current')
if mibBuilder.loadTexts: addCustomFreqList.setDescription('Add Custom Frequencies.\n                        The frequencies can be in a variety of units up to KHz.\n                        Frequencies can be added in a list separated by commas.  \n                        Example: 3550, 356000, 3450001.\n                        A get will return the current custom frequency list.\n                        Max string length entered cannot exceed 128 character.\n                        Note if there is not enough room for all the frequencies none will be added.\n                        Only valid for use on 3.5/3.6 GHz MIMO OFDM Radios, or 450i in 4.9 GHz.')
removeCustomFreqList = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 54), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: removeCustomFreqList.setStatus('current')
if mibBuilder.loadTexts: removeCustomFreqList.setDescription('Remove Custom Frequencies.\n                        The frequencies can be in a variety of units up to KHz.\n                        Frequencies can be removed in a list separated by commas.\n                        Example: 3550, 356000, 3450001.\n                        A get will return the current custom frequencies.\n                        Only valid for use on 3.5/3.6 GHz MIMO OFDM Radios, or 450i in 4.9 GHz.')
allowColocation = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: allowColocation.setStatus('obsolete')
if mibBuilder.loadTexts: allowColocation.setDescription('Allow or disallow Colocation for software scheduling Backhaul Timing Masters with hardware scheduling Backhaul Timing Masters.')
changeUsrPwd = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 56), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeUsrPwd.setStatus('current')
if mibBuilder.loadTexts: changeUsrPwd.setDescription('Allow to change the password of a given user of a given user. Usage: userName,password.')
mngtIP2 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 57), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mngtIP2.setStatus('current')
if mibBuilder.loadTexts: mngtIP2.setDescription('Management IP address 2.')
subnetMask2 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 58), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subnetMask2.setStatus('current')
if mibBuilder.loadTexts: subnetMask2.setDescription('Subnet mask for the management IP 2.')
mngtIP3 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 59), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mngtIP3.setStatus('current')
if mibBuilder.loadTexts: mngtIP3.setDescription('Management IP address 3.')
subnetMask3 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 60), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subnetMask3.setStatus('current')
if mibBuilder.loadTexts: subnetMask3.setDescription('Subnet mask for the management IP 3.')
mngtIP4 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 61), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mngtIP4.setStatus('current')
if mibBuilder.loadTexts: mngtIP4.setDescription('Management IP address 4.')
subnetMask4 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 62), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subnetMask4.setStatus('current')
if mibBuilder.loadTexts: subnetMask4.setDescription('Subnet mask for the management IP 4.')
mngtIP5 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 63), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mngtIP5.setStatus('current')
if mibBuilder.loadTexts: mngtIP5.setDescription('Management IP address 5.')
subnetMask5 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 64), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subnetMask5.setStatus('current')
if mibBuilder.loadTexts: subnetMask5.setDescription('Subnet mask for the management IP 5.')
mngtIP6 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 65), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mngtIP6.setStatus('current')
if mibBuilder.loadTexts: mngtIP6.setDescription('Management IP address 6.')
subnetMask6 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 66), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subnetMask6.setStatus('current')
if mibBuilder.loadTexts: subnetMask6.setDescription('Subnet mask for the management IP 6.')
mngtIP7 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 67), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mngtIP7.setStatus('current')
if mibBuilder.loadTexts: mngtIP7.setDescription('Management IP address 7.')
subnetMask7 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 68), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subnetMask7.setStatus('current')
if mibBuilder.loadTexts: subnetMask7.setDescription('Subnet mask for the management IP 7.')
mngtIP8 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 69), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mngtIP8.setStatus('current')
if mibBuilder.loadTexts: mngtIP8.setDescription('Management IP address 8.')
subnetMask8 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 70), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subnetMask8.setStatus('current')
if mibBuilder.loadTexts: subnetMask8.setDescription('Subnet mask for the management IP 8.')
mngtIP9 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 71), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mngtIP9.setStatus('current')
if mibBuilder.loadTexts: mngtIP9.setDescription('Management IP address 9.')
subnetMask9 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 72), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subnetMask9.setStatus('current')
if mibBuilder.loadTexts: subnetMask9.setDescription('Subnet mask for the management IP 9.')
mngtIP10 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 73), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mngtIP10.setStatus('current')
if mibBuilder.loadTexts: mngtIP10.setDescription('Management IP address 10.')
subnetMask10 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 74), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subnetMask10.setStatus('current')
if mibBuilder.loadTexts: subnetMask10.setDescription('Subnet mask for the management IP 10.')
bhvlanEnable = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 75), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bhvlanEnable.setStatus('current')
if mibBuilder.loadTexts: bhvlanEnable.setDescription('To enable or disable VLAN for Backhaul Master/Slave.')
lldpBroadcastEnable = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 76), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpBroadcastEnable.setStatus('current')
if mibBuilder.loadTexts: lldpBroadcastEnable.setDescription('To enable Broadcast of LLDP message, if disabled LLDP uses multicast')
regionCode = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 77), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 6, 5, 3, 8, 10, 11, 7, 9, 2, 1, 4))).clone(namedValues=NamedValues(("none", 0), ("australia", 6), ("brazil", 5), ("canada", 3), ("india", 8), ("indonesia", 10), ("ireland", 11), ("russia", 7), ("spain", 9), ("us", 2), ("other", 1), ("europe", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: regionCode.setStatus('deprecated')
if mibBuilder.loadTexts: regionCode.setDescription('Set Region Code for the Unit. Used the individual region[Region] OIDs instead.')
russiaRegion = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 78), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("category1", 1), ("category2", 2), ("category3", 3), ("category4", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: russiaRegion.setStatus('deprecated')
if mibBuilder.loadTexts: russiaRegion.setDescription('Set Category Region for Russian 5.9/6.05 GHz Radio Only.  Use setting under regionAsia now.')
commStringROnly = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 79), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commStringROnly.setStatus('current')
if mibBuilder.loadTexts: commStringROnly.setDescription('Set Read Only commnunity string.')
ethernetLinkSpeed = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 80), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 3, 5, 7, 12, 13, 15, 63))).clone(namedValues=NamedValues(("forced10H", 1), ("forced10F", 2), ("forced100H", 4), ("forced100F", 8), ("auto10F-10H", 3), ("auto100H-10H", 5), ("auto100H-10F-10H", 7), ("auto100F-100H", 12), ("auto100F-100H-10H", 13), ("auto100F-100H-10F-10H", 15), ("auto1000F-100F-100H-10F-10H", 63)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetLinkSpeed.setStatus('current')
if mibBuilder.loadTexts: ethernetLinkSpeed.setDescription('Set/Get Ethernet link speed and duplex settings.  Note that the Gigabit options are only valid for boards that support Gigabit speeds.')
cyclicPrefix = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 81), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("one-quarter", 0), ("one-eighth", 1), ("one-sixteenth", 2), ("one-quarter-one-eighth", 3), ("one-quarter-one-sixteenth", 4), ("one-eighth-one-sixteenth", 5), ("one-quarter-one-eighth-one-sixteenth", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cyclicPrefix.setStatus('current')
if mibBuilder.loadTexts: cyclicPrefix.setDescription('Cyclic Prefix value, for OFDM Radios only.\n                        Deprecated for MIMO SMs.  For PMP 430 SMs, this value is only used while in PMP 430 mode (1/16 is forced in PMP 450 mode).')
numberCustomFreq = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 82), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numberCustomFreq.setStatus('current')
if mibBuilder.loadTexts: numberCustomFreq.setDescription('Number of custom frequencies added.\n                            There is a maximum of 100.\n                            For use on 3.5 GHz OFDM Radios only.')
channelBandwidth = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 83), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelBandwidth.setStatus('current')
if mibBuilder.loadTexts: channelBandwidth.setDescription('The current channel bandwidth in MHz.\n                            For use on OFDM Radios only.\n                            Obsoleted for MIMO SMs.')
setDefaults = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 84), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("noChangeOrUndoFactoryDefaults", 0), ("setToFactoryDefaults", 1), ("factoryDefaultsSet-AwaitingReboot", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setDefaults.setStatus('current')
if mibBuilder.loadTexts: setDefaults.setDescription('Setting this to 1 will set the radio to Factory Defaults after the next reboot.  Setting this to 0\n                            will undo Factory Defaults if and only if Factory Defaults have been set previously without rebooting.\n                            Reading this OID will return 0 if Factory Defaults are not set, or a 2 if Factory Defaults are set and\n                            we are now awaiting a reboot.  NOTE: this operation is reversible as long as you write a 0 to this OID\n                            prior to reboot.  As a security measure, this OID is only valid when the radio was booted in default plug\n                            mode. If the radio is not currently in default plug mode, then attempting to set this OID will fail.')
radioRateAdapt = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 85), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 1, 5, 2, 3, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("onex", 0), ("onexmimo", 4), ("onextwox", 1), ("onextwoxmimo", 5), ("onextwoxthreex", 2), ("onextwoxthreexfourx", 3), ("onextwoxfourx", 7), ("onextwoxfourxsixx", 8), ("onextwoxfourxsixxeightx", 9), ("onextwoxmimoa", 10), ("onextwoxthreexmimoa", 11), ("onextwoxthreexfourxmimoa", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioRateAdapt.setStatus('current')
if mibBuilder.loadTexts: radioRateAdapt.setDescription('Rate adaptation parameter\n                            0:  1x No rate adaptation (FSK and SISO OFDM QPSK)\n                            1:  1x/2x (FSK and SISO OFDM 16-QAM)\n\n                            Following are OFDM only:\n                            2:  1x/2x/3x (SISO OFDM 64-QAM)\n                            3:  1x/2x/3x/4x (SISO OFDM 256-QAM) Engineering only\n\n                            Following are MIMO OFDM only:\n                            4:  1x MIMO-A (QPSK duplicated on both paths)\n                            5:  1x/2x MIMO-B (QPSK on each path)\n                            7:  1x/2x/4x MIMO-B (16-QAM on each path)\n                            8:  1x/2x/4x/6x MIMO-B (64-QAM on each path)\n                            9:  1x/2x/4x/6x/8x MIMO-B (256-QAM on each path)\n                            10: 1x/2x MIMO-A (16-QAM duplicated on both paths)\n                            11: 1x/2x/3x MIMO-A (64-QAM duplicated on both paths)\n                            12: 1x/2x/3x/4x MIMO-A (256-QAM duplicated on both paths)\n\n                            For PMP 430 radios this applies to Downlink Rate Adapt only.\n                            Use radioRateAdaptUL for setting uplink rate adapt on PMP 430 radios.\n                            For PMP 450 radios, write access for engineering use only.')
siteInfoViewable = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 86), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteInfoViewable.setStatus('current')
if mibBuilder.loadTexts: siteInfoViewable.setDescription('Enable non login users the ability to view Site Information')
largeVCQ = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 87), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: largeVCQ.setStatus('current')
if mibBuilder.loadTexts: largeVCQ.setDescription('Enable or disable Large VC Qs for SM or PTP radios.  Enable when Uplink is being used for camera video feed.')
latitude = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 88), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: latitude.setStatus('current')
if mibBuilder.loadTexts: latitude.setDescription('The latitude setting of this unit in decimal degrees.')
longitude = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 89), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: longitude.setStatus('current')
if mibBuilder.loadTexts: longitude.setDescription('The longitude setting of this unit in decimal degrees.')
height = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 90), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483647, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: height.setStatus('current')
if mibBuilder.loadTexts: height.setDescription('The height setting of this unit in meters.')
bandwidth = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 91), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("bandwidth5mhz", 1), ("bandwidth7mhz", 2), ("bandwidth10mhz", 3), ("bandwidth15mhz", 4), ("bandwidth20mhz", 5), ("bandwidth30mhz", 6), ("bandwidth40mhz", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bandwidth.setStatus('current')
if mibBuilder.loadTexts: bandwidth.setDescription('Radio bandwidth setting.\n                        Obsoleted for MIMO SMs. Instead for MIMO SMs use OID bandwidthScan.')
dataScramblingMethod = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 92), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("legacyDataScrambling", 0), ("r10DataScrambling", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataScramblingMethod.setStatus('obsolete')
if mibBuilder.loadTexts: dataScramblingMethod.setDescription('This OID is for OFDM only and is obsolete.')
portVID = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 93), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portVID.setStatus('current')
if mibBuilder.loadTexts: portVID.setDescription('Backhaul Port VID (PVID).')
radioRateAdaptUL = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 94), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 1, 5, 2, 3, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("onex", 0), ("onexmimo", 4), ("onextwox", 1), ("onextwoxmimo", 5), ("onextwoxthreex", 2), ("onextwoxthreexfourx", 3), ("onextwoxfourx", 7), ("onextwoxfourxsixx", 8), ("onextwoxfourxsixxeightx", 9), ("onextwoxmimoa", 10), ("onextwoxthreexmimoa", 11), ("onextwoxthreexfourxmimoa", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioRateAdaptUL.setStatus('current')
if mibBuilder.loadTexts: radioRateAdaptUL.setDescription('Uplink Rate adaptation parameter\n                            0:  1x No rate adaptation (FSK and SISO OFDM QPSK)\n                            1:  1x/2x (FSK and SISO OFDM 16-QAM)\n\n                            Following are OFDM only:\n                            2:  1x/2x/3x (SISO OFDM 64-QAM)\n                            3:  1x/2x/3x/4x (SISO OFDM 256-QAM) Engineering only\n\n                            Following are MIMO OFDM only:\n                            4:  1x MIMO-A (QPSK duplicated on both paths)\n                            5:  1x/2x MIMO-B (QPSK on each path)\n                            7:  1x/2x/4x MIMO-B (16-QAM on each path)\n                            8:  1x/2x/4x/6x MIMO-B (64-QAM on each path)\n                            9:  1x/2x/4x/6x/8x MIMO-B (256-QAM on each path)\n                            10: 1x/2x MIMO-A (16-QAM duplicated on both paths)\n                            11: 1x/2x/3x MIMO-A (64-QAM duplicated on both paths)\n                            12: 1x/2x/3x/4x MIMO-A (256-QAM duplicated on both paths)\n\n                            For PMP 430 radios this applies to Uplink Rate Adapt only.\n                            Use radioRateAdapt for setting downlink rate adapt on PMP 430 radios.\n                            For PMP 450 radios, engineering use only.')
providerVID = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 95), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: providerVID.setStatus('current')
if mibBuilder.loadTexts: providerVID.setDescription('Provider VID for QinQ VLAN.')
mac1VIDMapAddr = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 96), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mac1VIDMapAddr.setStatus('current')
if mibBuilder.loadTexts: mac1VIDMapAddr.setDescription('MAC Address for Entry 1 in MAC Address VID Mapping Table.')
mac1VIDMapVid = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 97), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mac1VIDMapVid.setStatus('current')
if mibBuilder.loadTexts: mac1VIDMapVid.setDescription('VID for Entry 1 in MAC Address VID Mapping Table.')
mac2VIDMapAddr = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 98), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mac2VIDMapAddr.setStatus('current')
if mibBuilder.loadTexts: mac2VIDMapAddr.setDescription('MAC Address for Entry 2 in MAC Address VID Mapping Table.')
mac2VIDMapVid = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 99), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mac2VIDMapVid.setStatus('current')
if mibBuilder.loadTexts: mac2VIDMapVid.setDescription('VID for Entry 2 in MAC Address VID Mapping Table.')
mac3VIDMapAddr = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 100), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mac3VIDMapAddr.setStatus('current')
if mibBuilder.loadTexts: mac3VIDMapAddr.setDescription('MAC Address for Entry 3 in MAC Address VID Mapping Table.')
mac3VIDMapVid = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 101), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mac3VIDMapVid.setStatus('current')
if mibBuilder.loadTexts: mac3VIDMapVid.setDescription('VID for Entry 3 in MAC Address VID Mapping Table.')
mac4VIDMapAddr = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 102), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mac4VIDMapAddr.setStatus('current')
if mibBuilder.loadTexts: mac4VIDMapAddr.setDescription('MAC Address for Entry 4 in MAC Address VID Mapping Table.')
mac4VIDMapVid = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 103), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mac4VIDMapVid.setStatus('current')
if mibBuilder.loadTexts: mac4VIDMapVid.setDescription('VID for Entry 4 in MAC Address VID Mapping Table.')
mac5VIDMapAddr = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 104), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mac5VIDMapAddr.setStatus('current')
if mibBuilder.loadTexts: mac5VIDMapAddr.setDescription('MAC Address for Entry 5 in MAC Address VID Mapping Table.')
mac5VIDMapVid = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 105), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mac5VIDMapVid.setStatus('current')
if mibBuilder.loadTexts: mac5VIDMapVid.setDescription('VID for Entry 5 in MAC Address VID Mapping Table.')
mac6VIDMapAddr = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 106), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mac6VIDMapAddr.setStatus('current')
if mibBuilder.loadTexts: mac6VIDMapAddr.setDescription('MAC Address for Entry 6 in MAC Address VID Mapping Table.')
mac6VIDMapVid = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 107), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mac6VIDMapVid.setStatus('current')
if mibBuilder.loadTexts: mac6VIDMapVid.setDescription('VID for Entry 6 in MAC Address VID Mapping Table.')
mac7VIDMapAddr = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 108), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mac7VIDMapAddr.setStatus('current')
if mibBuilder.loadTexts: mac7VIDMapAddr.setDescription('MAC Address for Entry 7 in MAC Address VID Mapping Table.')
mac7VIDMapVid = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 109), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mac7VIDMapVid.setStatus('current')
if mibBuilder.loadTexts: mac7VIDMapVid.setDescription('VID for Entry 7 in MAC Address VID Mapping Table.')
mac8VIDMapAddr = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 110), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mac8VIDMapAddr.setStatus('current')
if mibBuilder.loadTexts: mac8VIDMapAddr.setDescription('MAC Address for Entry 8 in MAC Address VID Mapping Table.')
mac8VIDMapVid = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 111), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mac8VIDMapVid.setStatus('current')
if mibBuilder.loadTexts: mac8VIDMapVid.setDescription('VID for Entry 8 in MAC Address VID Mapping Table.')
mac9VIDMapAddr = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 112), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mac9VIDMapAddr.setStatus('current')
if mibBuilder.loadTexts: mac9VIDMapAddr.setDescription('MAC Address for Entry 9 in MAC Address VID Mapping Table.')
mac9VIDMapVid = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 113), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mac9VIDMapVid.setStatus('current')
if mibBuilder.loadTexts: mac9VIDMapVid.setDescription('VID for Entry 9 in MAC Address VID Mapping Table.')
mac10VIDMapAddr = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 114), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mac10VIDMapAddr.setStatus('current')
if mibBuilder.loadTexts: mac10VIDMapAddr.setDescription('MAC Address for Entry 10 in MAC Address VID Mapping Table.')
mac10VIDMapVid = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 115), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mac10VIDMapVid.setStatus('current')
if mibBuilder.loadTexts: mac10VIDMapVid.setDescription('VID for Entry 10 in MAC Address VID Mapping Table.')
vlanPortType = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 116), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("q", 0), ("qinq", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanPortType.setStatus('current')
if mibBuilder.loadTexts: vlanPortType.setDescription('VLAN Port Type for VLAN interface.  Default is Q.')
vlanAcceptQinQFrames = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 117), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanAcceptQinQFrames.setStatus('current')
if mibBuilder.loadTexts: vlanAcceptQinQFrames.setDescription('Allow/Disallow packets already doubly-tagged (QinQ) to ingress the FEC of BHM, BHS, or MP SM.  Not configurable on MP AP.')
whispWebUserAccessMode = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 118), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("local", 0), ("remote", 1), ("remotethenlocal", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: whispWebUserAccessMode.setStatus('current')
if mibBuilder.loadTexts: whispWebUserAccessMode.setDescription('This variable selects if web page users for the radio should be authenticated locally or\n            \t\t\t\tvia a centralised remote Radius server')
usrAccountEnableAccounting = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 119), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disable", 0), ("deviceAccess", 1), ("dataUsage", 2), ("all", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usrAccountEnableAccounting.setStatus('current')
if mibBuilder.loadTexts: usrAccountEnableAccounting.setDescription('Select the level of accounting information to be reported to the server')
allowRejectThenLocal = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 120), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("doNotAllowLocalAuthifAAAReject", 0), ("allowLocalAuthIfAAAReject", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: allowRejectThenLocal.setStatus('current')
if mibBuilder.loadTexts: allowRejectThenLocal.setDescription('Control for allowing local authenication if the AAA remote server')
snrCalculation = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 121), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snrCalculation.setStatus('deprecated')
if mibBuilder.loadTexts: snrCalculation.setDescription('This OID is deprecated.  Receive quality calulation is always on since it no longer affects packet per second performance.')
priorityPrecedence = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 122), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("eight021pThenDiffServ", 0), ("diffservThenEight021p", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: priorityPrecedence.setStatus('current')
if mibBuilder.loadTexts: priorityPrecedence.setDescription('Allows user to decide if 802.1p or DiffServ priority bits should be used first when making priority decisions.')
installationColorCode = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 123), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: installationColorCode.setStatus('current')
if mibBuilder.loadTexts: installationColorCode.setDescription('Installation Color Code.  Allows non-configured SMs to register to an AP with UCC enabled\n                        \tin order to facilitate remote provisioning.')
apSmMode = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 124), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("sm", 1), ("ap", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apSmMode.setStatus('current')
if mibBuilder.loadTexts: apSmMode.setDescription('Set AP to SM or SM to AP. Useful for facillitating scripting of running Spectrum Analyzer on an AP.\n                        \tRadio must have AP Feature Key.  1 - Set to SM, 0 - Set to AP.')
pppoeFilter = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 125), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("filterOff", 0), ("filterOn", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppoeFilter.setStatus('current')
if mibBuilder.loadTexts: pppoeFilter.setDescription('To set PPPoE packet filter.')
smbFilter = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 126), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("filterOff", 0), ("filterOn", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smbFilter.setStatus('current')
if mibBuilder.loadTexts: smbFilter.setDescription('To set SMB packet filter.')
snmpFilter = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 127), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("filterOff", 0), ("filterOn", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpFilter.setStatus('current')
if mibBuilder.loadTexts: snmpFilter.setDescription('To set SNMP packet filter.')
userP1Filter = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 128), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("filterOff", 0), ("filterOn", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userP1Filter.setStatus('current')
if mibBuilder.loadTexts: userP1Filter.setDescription('To set user defined port 1 packet filter.')
userP2Filter = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 129), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("filterOff", 0), ("filterOn", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userP2Filter.setStatus('current')
if mibBuilder.loadTexts: userP2Filter.setDescription('To set user defined port 2 packet filter.')
userP3Filter = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 130), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("filterOff", 0), ("filterOn", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userP3Filter.setStatus('current')
if mibBuilder.loadTexts: userP3Filter.setDescription('To set user defined port 3 packet filter.')
allOtherIpFilter = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 131), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("filterOff", 0), ("filterOn", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: allOtherIpFilter.setStatus('current')
if mibBuilder.loadTexts: allOtherIpFilter.setDescription('To set all other IPv4 packet filter.')
allIpv4Filter = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 132), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("filterOff", 0), ("filterOn", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: allIpv4Filter.setStatus('current')
if mibBuilder.loadTexts: allIpv4Filter.setDescription('To set all IPv4 packet filter.  Enabling this will automatically enable all of the known IP filters (SMB, SNMP, Bootp,\n            \t\t\t\tIPv4 Mcast, User Defined Ports, and All Other IPv4).')
arpFilter = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 133), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("filterOff", 0), ("filterOn", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: arpFilter.setStatus('current')
if mibBuilder.loadTexts: arpFilter.setDescription('To set ARP packet filter.')
allOthersFilter = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 134), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("filterOff", 0), ("filterOn", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: allOthersFilter.setStatus('current')
if mibBuilder.loadTexts: allOthersFilter.setDescription('To set all other packet filter when.')
userDefinedPort1 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 135), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userDefinedPort1.setStatus('current')
if mibBuilder.loadTexts: userDefinedPort1.setDescription('An integer value of number one user defined port. Range:0-65535')
port1TCPFilter = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 136), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("filterOff", 0), ("filterOn", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: port1TCPFilter.setStatus('current')
if mibBuilder.loadTexts: port1TCPFilter.setDescription('To set user defined port 1 TCP traffic filter.')
port1UDPFilter = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 137), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("filterOff", 0), ("filterOn", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: port1UDPFilter.setStatus('current')
if mibBuilder.loadTexts: port1UDPFilter.setDescription('To set user defined port 1 UDP traffic filter.')
userDefinedPort2 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 138), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userDefinedPort2.setStatus('current')
if mibBuilder.loadTexts: userDefinedPort2.setDescription('An integer value of number two user defined port. Range:0-65535')
port2TCPFilter = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 139), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("filterOff", 0), ("filterOn", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: port2TCPFilter.setStatus('current')
if mibBuilder.loadTexts: port2TCPFilter.setDescription('To set user defined port 2 TCP traffic filter.')
port2UDPFilter = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 140), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("filterOff", 0), ("filterOn", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: port2UDPFilter.setStatus('current')
if mibBuilder.loadTexts: port2UDPFilter.setDescription('To set user defined port 2 UDP traffic filter.')
userDefinedPort3 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 141), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userDefinedPort3.setStatus('current')
if mibBuilder.loadTexts: userDefinedPort3.setDescription('An integer value of number three user defined port. Range:0-65535')
port3TCPFilter = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 142), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("filterOff", 0), ("filterOn", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: port3TCPFilter.setStatus('current')
if mibBuilder.loadTexts: port3TCPFilter.setDescription('To set user defined port 3 TCP traffic filter.')
port3UDPFilter = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 143), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("filterOff", 0), ("filterOn", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: port3UDPFilter.setStatus('current')
if mibBuilder.loadTexts: port3UDPFilter.setDescription('To set user defined port 3 UDP traffic filter.')
bootpcFilter = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 144), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("filterOff", 0), ("filterOn", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootpcFilter.setStatus('current')
if mibBuilder.loadTexts: bootpcFilter.setDescription('To set bootp client sourced packets filter.')
bootpsFilter = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 145), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("filterOff", 0), ("filterOn", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootpsFilter.setStatus('current')
if mibBuilder.loadTexts: bootpsFilter.setDescription('To set bootp server sourced packets filter.')
ip4MultFilter = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 146), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("filterOff", 0), ("filterOn", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ip4MultFilter.setStatus('current')
if mibBuilder.loadTexts: ip4MultFilter.setDescription('To set IPv4 MultiCast packets filter when\n            \t\t\t\t\tNAT is disabled.')
packetFilterDirection = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 147), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("upstream", 1), ("downstream", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: packetFilterDirection.setStatus('current')
if mibBuilder.loadTexts: packetFilterDirection.setDescription('To set packet filter direction.  Upstream is default.')
encryptionConfig = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 148), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("des", 0), ("aes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: encryptionConfig.setStatus('current')
if mibBuilder.loadTexts: encryptionConfig.setDescription('For supported radio, set the encryption algorithm to use.\n                      DES by default.  Cannot be set if encryption is disabled.')
pppoeCtlPriority = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 149), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("high", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppoeCtlPriority.setStatus('current')
if mibBuilder.loadTexts: pppoeCtlPriority.setDescription('Prioritization of PPPoE Control packets.')
ftpPort = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 150), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpPort.setStatus('current')
if mibBuilder.loadTexts: ftpPort.setDescription('Port used to for FTP.  Default is 21.')
httpPort = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 151), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpPort.setStatus('current')
if mibBuilder.loadTexts: httpPort.setDescription('Port used to for HTTP.  Default is 80.')
httpsPort = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 152), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpsPort.setStatus('current')
if mibBuilder.loadTexts: httpsPort.setDescription('Port used to for HTTPs.  Default is 443.')
snmpPort = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 153), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpPort.setStatus('current')
if mibBuilder.loadTexts: snmpPort.setDescription('Port used to for SNMP.  Default is 161.')
snmpTrapPort = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 154), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapPort.setStatus('current')
if mibBuilder.loadTexts: snmpTrapPort.setDescription('Port used to for SNMP Traps.  Default is 162.')
webAccess = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 155), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("http", 0), ("https", 1), ("http-and-https", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: webAccess.setStatus('current')
if mibBuilder.loadTexts: webAccess.setDescription('This variable determines if only HTTP or HTTPs connection are allowed.\n                          0: HTTP Only\n                          1: HTTPs Only\n                          2: HTTP and HTTPs Both')
syslogDomainNameAppend = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 156), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disableDomain", 0), ("appendDomain", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogDomainNameAppend.setStatus('current')
if mibBuilder.loadTexts: syslogDomainNameAppend.setDescription("Select whether to append the configured management domain name to\n            the Syslog server name.  For example, if dnsMgmtDomainName is\n      set to 'example.com', syslogServerAddr is set to 'syslog1', and syslogDomainNameAppend\n            is set to appendDomain, the Syslog Server name used would be 'syslog1.example.com'.")
syslogServerAddr = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 157), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogServerAddr.setStatus('current')
if mibBuilder.loadTexts: syslogServerAddr.setDescription('Syslog server address either in dotted decimal notation or a Fully Qualified Domain Name')
syslogServerPort = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 158), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogServerPort.setStatus('current')
if mibBuilder.loadTexts: syslogServerPort.setDescription('Listening port on the Syslog server. Default is 514.')
syslogMinLevel = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 159), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("fatal", 0), ("alert", 1), ("critical", 2), ("error", 3), ("warning", 4), ("notice", 5), ("info", 6), ("debug", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogMinLevel.setStatus('current')
if mibBuilder.loadTexts: syslogMinLevel.setDescription('Sets the minimum syslog severity to transmit. Messages with a lower severity value (i.e. numerically higher) than this will not be transmitted.')
allIpv6Filter = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 160), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("filterOff", 0), ("filterOn", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: allIpv6Filter.setStatus('current')
if mibBuilder.loadTexts: allIpv6Filter.setDescription('To set all IPv6 packet filter.  Enabling this will automatically enable all of the known IPv6 filters (SMB, SNMP, Bootp,\n            \t\t\t\tIPv6 Mcast, User Defined Ports, and All Other IPv6).')
ipv6smbFilter = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 161), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("filterOff", 0), ("filterOn", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6smbFilter.setStatus('current')
if mibBuilder.loadTexts: ipv6smbFilter.setDescription('To set IPv6 SMB packet filter.')
ipv6snmpFilter = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 162), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("filterOff", 0), ("filterOn", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6snmpFilter.setStatus('current')
if mibBuilder.loadTexts: ipv6snmpFilter.setDescription('To set IPv6 SNMP packet filter.')
ipv6bootpcFilter = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 163), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("filterOff", 0), ("filterOn", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6bootpcFilter.setStatus('current')
if mibBuilder.loadTexts: ipv6bootpcFilter.setDescription('To set IPv6 bootp client sourced packets filter.')
ipv6bootpsFilter = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 164), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("filterOff", 0), ("filterOn", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6bootpsFilter.setStatus('current')
if mibBuilder.loadTexts: ipv6bootpsFilter.setDescription('To set IPv6 bootp server sourced packets filter.')
ipv6MultFilter = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 165), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("filterOff", 0), ("filterOn", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6MultFilter.setStatus('current')
if mibBuilder.loadTexts: ipv6MultFilter.setDescription('To set IPv6 MultiCast packets filter when\n            \t\t\t\t\tNAT is disabled.')
allOtherIpv6Filter = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 166), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("filterOff", 0), ("filterOn", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: allOtherIpv6Filter.setStatus('current')
if mibBuilder.loadTexts: allOtherIpv6Filter.setDescription('To set all other IPv6 packet filter.')
snmpStatus = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 167), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("snmpv2only", 1), ("snmpv3only", 2), ("snmpv2-and-snmpv3", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpStatus.setStatus('current')
if mibBuilder.loadTexts: snmpStatus.setDescription('This variable determines SNMP operation mode.\n                          1: Enable SNMPv2c only\n                          2: Enable SNMPv3 only\n                          3: Enable SNMPv2c and SNMPv3')
telnetStatus = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 168), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabletelnet", 0), ("enabletelnet", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetStatus.setStatus('current')
if mibBuilder.loadTexts: telnetStatus.setDescription('This variable determines if Telnet to enabled or not.\n                          0: Disable Telnet\n                          1: Enable Telnet')
ftpStatus = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 169), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disableftp", 0), ("enableftp", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpStatus.setStatus('current')
if mibBuilder.loadTexts: ftpStatus.setDescription('This variable determines if FTP to enabled or not.\n                          0: Disable FTP\n                          1: Enable FTP')
tftpStatus = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 170), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabletftp", 0), ("enabletftp", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpStatus.setStatus('current')
if mibBuilder.loadTexts: tftpStatus.setDescription('This variable determines if TFTP is enabled or not.\n                          0: Disable TFTP\n                          1: Enable TFTP')
userMode = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 171), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userMode.setStatus('current')
if mibBuilder.loadTexts: userMode.setDescription('User Mode 1=Read-Only 0=Read-Write(default).')
tcpAckPriority = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 172), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpAckPriority.setStatus('current')
if mibBuilder.loadTexts: tcpAckPriority.setDescription('Prioritize TCP ACK that are 64 bytes or less.')
codePointSelect = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 173), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63))).clone(namedValues=NamedValues(("cp1", 1), ("cp2", 2), ("cp3", 3), ("cp4", 4), ("cp5", 5), ("cp6", 6), ("cp7", 7), ("cp8", 8), ("cp9", 9), ("cp10", 10), ("cp11", 11), ("cp12", 12), ("cp13", 13), ("cp14", 14), ("cp15", 15), ("cp16", 16), ("cp17", 17), ("cp18", 18), ("cp19", 19), ("cp20", 20), ("cp21", 21), ("cp22", 22), ("cp23", 23), ("cp24", 24), ("cp25", 25), ("cp26", 26), ("cp27", 27), ("cp28", 28), ("cp29", 29), ("cp30", 30), ("cp31", 31), ("cp32", 32), ("cp33", 33), ("cp34", 34), ("cp35", 35), ("cp36", 36), ("cp37", 37), ("cp38", 38), ("cp39", 39), ("cp40", 40), ("cp41", 41), ("cp42", 42), ("cp43", 43), ("cp44", 44), ("cp45", 45), ("cp46", 46), ("cp47", 47), ("cp49", 49), ("cp50", 50), ("cp51", 51), ("cp52", 52), ("cp53", 53), ("cp54", 54), ("cp55", 55), ("cp57", 57), ("cp58", 58), ("cp59", 59), ("cp60", 60), ("cp61", 61), ("cp62", 62), ("cp63", 63)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePointSelect.setStatus('current')
if mibBuilder.loadTexts: codePointSelect.setDescription('Codepoint Select.This represents the CodePoint Selection to be modified via Priority Select')
prioritySelect = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 174), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("p0", 0), ("p1", 1), ("p2", 2), ("p3", 3), ("p4", 4), ("p5", 5), ("p6", 6), ("p7", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prioritySelect.setStatus('current')
if mibBuilder.loadTexts: prioritySelect.setDescription('Priority Select.The priority setting input for the CodePoint selected in CodePoint Select.')
auxPortEnable = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 175), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: auxPortEnable.setStatus('current')
if mibBuilder.loadTexts: auxPortEnable.setDescription('Enable(1) or Disable(0) aux ethernet port on 450i radio')
poeAuxEnable = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 176), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: poeAuxEnable.setStatus('current')
if mibBuilder.loadTexts: poeAuxEnable.setDescription('Enable(1) or Disable(0) aux ethernet port PoE on 450i radio')
whispUsrAuth = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 177), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("md5", 0), ("peap-mschapv2", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: whispUsrAuth.setStatus('current')
if mibBuilder.loadTexts: whispUsrAuth.setDescription('Select method for User Authentication.')
lan1DhcpRelease = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 201), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("releaseIP", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lan1DhcpRelease.setStatus('current')
if mibBuilder.loadTexts: lan1DhcpRelease.setDescription("Setting the variable to '1' will release LAN1's IP address\n\t\t\t\t\t\t\tand send a DHCP Release Message to the DHCP server.\n\t\t\t\t\t\t\tApplicable only when NAT is disabled.")
lan1DhcpRenew = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 202), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("renewIP", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lan1DhcpRenew.setStatus('current')
if mibBuilder.loadTexts: lan1DhcpRenew.setDescription("Setting the variable to '1' will renew LAN1's lease time\n\t\t\t\t\t\t\tfor its current IP address.\n\t\t\t\t\t\t\tApplicable only when NAT is disabled.")
lan3DhcpRelease = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 203), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("releaseIP", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lan3DhcpRelease.setStatus('current')
if mibBuilder.loadTexts: lan3DhcpRelease.setDescription("Setting the variable to '1' will release LAN3's (RF Public) IP address\n\t\t\t\t\t\t\tand send a DHCP Release Message to the DHCP server.\n\t\t\t\t\t\t\tApplicable only when NAT is enabled.")
lan3DhcpRenew = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 204), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("renewIP", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lan3DhcpRenew.setStatus('current')
if mibBuilder.loadTexts: lan3DhcpRenew.setDescription("Setting the variable to '1' will renew LAN3's (RF Public)\n\t\t\t\t\t\t\tlease time for its current IP address.\n\t\t\t\t\t\t\tApplicable only when NAT is enabled.")
natDhcpRelease = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 205), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("releaseIP", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: natDhcpRelease.setStatus('current')
if mibBuilder.loadTexts: natDhcpRelease.setDescription("Setting the variable to '1' will release WAN's (NAT Public) IP address\n\t\t\t\t\t\t\tand send a DHCP Release Message to the DHCP server.\n\t\t\t\t\t\t\tApplicable only when NAT is enabled.")
natDhcpRenew = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 206), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("renewIP", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: natDhcpRenew.setStatus('current')
if mibBuilder.loadTexts: natDhcpRenew.setDescription("Setting the variable to '1' will renew WAN's (NAT Public)\n\t\t\t\t\t\t\tlease time for its current IP address.\n\t\t\t\t\t\t\tApplicable only when NAT is enabled.")
region = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 207), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 6, 3, 2, 5, 4, 7))).clone(namedValues=NamedValues(("none", 0), ("otherRegulatory", 1), ("asia", 6), ("europe", 3), ("northAmerica", 2), ("oceania", 5), ("southAmerica", 4), ("africa", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: region.setStatus('current')
if mibBuilder.loadTexts: region.setDescription('Set Region Code for the Unit.')
regionAsia = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 208), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 3, 4, 5, 6, 7, 8, 10, 11))).clone(namedValues=NamedValues(("none", 0), ("india", 2), ("indonesia", 3), ("russiacategory1", 4), ("russiacategory2", 5), ("russiacategory3", 6), ("russiacategory4", 7), ("vietnam", 8), ("malaysia", 10), ("pakistan", 11)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: regionAsia.setStatus('current')
if mibBuilder.loadTexts: regionAsia.setDescription('Country Code for Asia.')
regionEurope = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 209), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 1))).clone(namedValues=NamedValues(("none", 0), ("spain", 2), ("ireland", 3), ("denmark", 4), ("finland", 5), ("germany", 6), ("greece", 7), ("iceland", 8), ("liechtenstein", 9), ("norway", 10), ("portugal", 11), ("switzerland", 12), ("serbia", 13), ("unitedkingdom", 14), ("other", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: regionEurope.setStatus('current')
if mibBuilder.loadTexts: regionEurope.setDescription('Country Code for Europe. Other is only available for units with EU Region Lock.')
regionNorthAmerica = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 210), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3, 2, 4, 5))).clone(namedValues=NamedValues(("none", 0), ("canada", 3), ("unitedStates", 2), ("mexico", 4), ("puertoRico", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: regionNorthAmerica.setStatus('current')
if mibBuilder.loadTexts: regionNorthAmerica.setDescription('Country Code for North America.')
regionOceania = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 211), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("australia", 2), ("newZealand", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: regionOceania.setStatus('current')
if mibBuilder.loadTexts: regionOceania.setDescription('Country Code for Oceania.')
regionSouthAmerica = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 212), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 0), ("brazil", 2), ("ecuador", 3), ("colombia", 4), ("venezuela", 5), ("panama", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: regionSouthAmerica.setStatus('current')
if mibBuilder.loadTexts: regionSouthAmerica.setDescription('Country Code for South America.')
regionOtherRegulatory = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 213), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("other", 1), ("fcc", 2), ("etsi", 3), ("etsilbt", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: regionOtherRegulatory.setStatus('current')
if mibBuilder.loadTexts: regionOtherRegulatory.setDescription('Regulatory setting for governing regulatory body.')
interleave = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 214), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("default", 0), ("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: interleave.setStatus('current')
if mibBuilder.loadTexts: interleave.setDescription('Engineering use only.')
receiveQualityDebug = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 215), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: receiveQualityDebug.setStatus('current')
if mibBuilder.loadTexts: receiveQualityDebug.setDescription('Enable or disable receive quality calculations for every packet.\n                            Enabling(1) will calulate receive quality on all receiving packets.  Due to load on CPU, will slightly packet per second capabilities on AP/BH.\n                            Default to disabled for all radios.\n                            Only applicable to GenII OFDM products and up.')
apType = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 216), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("standard", 0), ("remote", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apType.setStatus('current')
if mibBuilder.loadTexts: apType.setDescription("In standard mode, all possible sync sources will be made availble and usedfor autoSync operation.\n                         In remote mode, sync over power port will not be available as a sync source.\n                         Remote Device mode is where the AP or BHM timing port is connected to an SM or BHS timing port via a sync cable.  In this mode,\n                         GPS data is unavailable and sync over power port shouldn't be used.  If sync over power is desired, and a CMM or other\n                         sync over power device is in use, then select standard mode.                        \n\t\t\t\t\t\t This should really be named deviceType because this applies to both AP and BHM, but left this as apType for legacy purposes.")
regionAfrica = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 217), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("algeria", 2), ("nigeria", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: regionAfrica.setStatus('current')
if mibBuilder.loadTexts: regionAfrica.setDescription('Country Code for Africa.')
addCustomFreqMimo = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 218), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: addCustomFreqMimo.setStatus('current')
if mibBuilder.loadTexts: addCustomFreqMimo.setDescription("Frequency input ie) 3700.50. Deprecated, please use 'addCustomFreqList'.")
removeCustomFreqMimo = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 219), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: removeCustomFreqMimo.setStatus('current')
if mibBuilder.loadTexts: removeCustomFreqMimo.setDescription("Frequency input ie) 3700.50. Deprecated, please use 'removeCustomFreqList'.")
timedSpectrumAnalysisDurationBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 220), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timedSpectrumAnalysisDurationBox.setStatus('current')
if mibBuilder.loadTexts: timedSpectrumAnalysisDurationBox.setDescription('Value in seconds for a timed spectrum analysis. Range is 10-1000 seconds.')
spectrumAnalysisActionBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 221), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("stopSpectrumAnalysis", 0), ("startTimedSpectrumAnalysis", 1), ("startContinuousSpectrumAnalysis", 2), ("idleNoSpectrumAnalysis", 3), ("idleCompleteSpectrumAnalysis", 4), ("inProgressTimedSpectrumAnalysis", 5), ("inProgressContinuousSpectrumAnalysis", 6), ("notReady", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spectrumAnalysisActionBox.setStatus('current')
if mibBuilder.loadTexts: spectrumAnalysisActionBox.setDescription('Start or stop timed or continuous Spectrum Analysis and also give status.\n                            (0) - Stop Spectrum Analysis\n                            (1) - Start Timed Spectrum Analysis\n                            Note: AP/BHM will run Spectrum Analysis for the sector.                            \n                            (2) - Start Continuous Spectrum Analysis\n                            (3) - Idle, no Spectrum Analysis results.\n                            (4) - Idle, Spectrum Analysis results available.\n                            (5) - Timed or Remote Spectrum Analysis in progress.\n                            (6) - Continuous Spectrum Analysis in progress.\n                            Note: Continuous mode has a max of 24 hours.\n                            (7) - Spectrum Analyzer not ready.')
mac1VIDMapPriority = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 222), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mac1VIDMapPriority.setStatus('current')
if mibBuilder.loadTexts: mac1VIDMapPriority.setDescription('VID priority for Entry 1 in MAC Address VID Mapping Table.')
mac1VIDMapPriorityMode = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 223), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("promote-IP-priority", 0), ("define-priority", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mac1VIDMapPriorityMode.setStatus('current')
if mibBuilder.loadTexts: mac1VIDMapPriorityMode.setDescription('VID priority Mode for Entry 1 in MAC Address VID Mapping Table.')
mac2VIDMapPriority = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 224), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mac2VIDMapPriority.setStatus('current')
if mibBuilder.loadTexts: mac2VIDMapPriority.setDescription('VID priority for Entry 2 in MAC Address VID Mapping Table.')
mac2VIDMapPriorityMode = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 225), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("promote-IP-priority", 0), ("define-priority", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mac2VIDMapPriorityMode.setStatus('current')
if mibBuilder.loadTexts: mac2VIDMapPriorityMode.setDescription('VID priority Mode for Entry 2 in MAC Address VID Mapping Table.')
mac3VIDMapPriority = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 226), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mac3VIDMapPriority.setStatus('current')
if mibBuilder.loadTexts: mac3VIDMapPriority.setDescription('VID priority for Entry 3 in MAC Address VID Mapping Table.')
mac3VIDMapPriorityMode = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 227), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("promote-IP-priority", 0), ("define-priority", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mac3VIDMapPriorityMode.setStatus('current')
if mibBuilder.loadTexts: mac3VIDMapPriorityMode.setDescription('VID priority Mode for Entry 3 in MAC Address VID Mapping Table.')
mac4VIDMapPriority = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 228), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mac4VIDMapPriority.setStatus('current')
if mibBuilder.loadTexts: mac4VIDMapPriority.setDescription('VID priority for Entry 4 in MAC Address VID Mapping Table.')
mac4VIDMapPriorityMode = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 229), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("promote-IP-priority", 0), ("define-priority", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mac4VIDMapPriorityMode.setStatus('current')
if mibBuilder.loadTexts: mac4VIDMapPriorityMode.setDescription('VID priority Mode for Entry 4 in MAC Address VID Mapping Table.')
mac5VIDMapPriority = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 230), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mac5VIDMapPriority.setStatus('current')
if mibBuilder.loadTexts: mac5VIDMapPriority.setDescription('VID priority for Entry 5 in MAC Address VID Mapping Table.')
mac5VIDMapPriorityMode = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 231), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("promote-IP-priority", 0), ("define-priority", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mac5VIDMapPriorityMode.setStatus('current')
if mibBuilder.loadTexts: mac5VIDMapPriorityMode.setDescription('VID priority Mode for Entry 5 in MAC Address VID Mapping Table.')
mac6VIDMapPriority = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 232), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mac6VIDMapPriority.setStatus('current')
if mibBuilder.loadTexts: mac6VIDMapPriority.setDescription('VID priority for Entry 6 in MAC Address VID Mapping Table.')
mac6VIDMapPriorityMode = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 233), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("promote-IP-priority", 0), ("define-priority", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mac6VIDMapPriorityMode.setStatus('current')
if mibBuilder.loadTexts: mac6VIDMapPriorityMode.setDescription('VID priority Mode for Entry 6 in MAC Address VID Mapping Table.')
mac7VIDMapPriority = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 234), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mac7VIDMapPriority.setStatus('current')
if mibBuilder.loadTexts: mac7VIDMapPriority.setDescription('VID priority for Entry 7 in MAC Address VID Mapping Table.')
mac7VIDMapPriorityMode = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 235), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("promote-IP-priority", 0), ("define-priority", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mac7VIDMapPriorityMode.setStatus('current')
if mibBuilder.loadTexts: mac7VIDMapPriorityMode.setDescription('VID priority Mode for Entry 7 in MAC Address VID Mapping Table.')
mac8VIDMapPriority = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 236), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mac8VIDMapPriority.setStatus('current')
if mibBuilder.loadTexts: mac8VIDMapPriority.setDescription('VID priority for Entry 8 in MAC Address VID Mapping Table.')
mac8VIDMapPriorityMode = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 237), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("promote-IP-priority", 0), ("define-priority", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mac8VIDMapPriorityMode.setStatus('current')
if mibBuilder.loadTexts: mac8VIDMapPriorityMode.setDescription('VID priority Mode for Entry 8 in MAC Address VID Mapping Table.')
mac9VIDMapPriority = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 238), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mac9VIDMapPriority.setStatus('current')
if mibBuilder.loadTexts: mac9VIDMapPriority.setDescription('VID priority for Entry 9 in MAC Address VID Mapping Table.')
mac9VIDMapPriorityMode = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 239), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("promote-IP-priority", 0), ("define-priority", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mac9VIDMapPriorityMode.setStatus('current')
if mibBuilder.loadTexts: mac9VIDMapPriorityMode.setDescription('VID priority Mode for Entry 9 in MAC Address VID Mapping Table.')
mac10VIDMapPriority = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 240), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mac10VIDMapPriority.setStatus('current')
if mibBuilder.loadTexts: mac10VIDMapPriority.setDescription('VID priority for Entry 10 in MAC Address VID Mapping Table.')
mac10VIDMapPriorityMode = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 241), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("promote-IP-priority", 0), ("define-priority", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mac10VIDMapPriorityMode.setStatus('current')
if mibBuilder.loadTexts: mac10VIDMapPriorityMode.setDescription('VID priority Mode for Entry 10 in MAC Address VID Mapping Table.')
managementVIDPriority = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 242), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: managementVIDPriority.setStatus('current')
if mibBuilder.loadTexts: managementVIDPriority.setDescription('management VID VID VLAN Priority.')
managementVIDPriorityMode = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 243), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("promote-IP-priority", 0), ("define-priority", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: managementVIDPriorityMode.setStatus('current')
if mibBuilder.loadTexts: managementVIDPriorityMode.setDescription('management VID VLAN Priority Mode.')
remarkSrcVID = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 244), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remarkSrcVID.setStatus('current')
if mibBuilder.loadTexts: remarkSrcVID.setDescription('Source VID to apply remarking on.')
addRemarkVID = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 245), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: addRemarkVID.setStatus('current')
if mibBuilder.loadTexts: addRemarkVID.setDescription('Add VLAN ID re-marking entry.')
addRemarkPriority = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 246), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: addRemarkPriority.setStatus('current')
if mibBuilder.loadTexts: addRemarkPriority.setDescription('Add 802.1p re-mark entry.')
deleteRemarkVID = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 247), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deleteRemarkVID.setStatus('current')
if mibBuilder.loadTexts: deleteRemarkVID.setDescription('Remove the VID re-marking for this source VID.')
deleteRemarkPriority = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 248), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deleteRemarkPriority.setStatus('current')
if mibBuilder.loadTexts: deleteRemarkPriority.setDescription('Remove the priority re-marking for this source VID.')
mimoRateAdaptAlgorithm = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 249), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("mimobmimoa", 0), ("mimobonly", 1), ("mimoaonly", 2), ("siso", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mimoRateAdaptAlgorithm.setStatus('current')
if mibBuilder.loadTexts: mimoRateAdaptAlgorithm.setDescription('Engineering use only.\n                            Control MIMO Rate Adapt Algorithm\n                            0 = MIMO-A/B This chooses MIMO-A or MIMO-B dynamically to maximize throughput\n                            1 = MIMO-B only\n                            2 = MIMO-A only\n                            3 = SISO only')
controlMessages = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 250), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("siso", 1), ("mimoa", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlMessages.setStatus('current')
if mibBuilder.loadTexts: controlMessages.setDescription('Control Messages (Beacon/Scheduling Map/Acknowledgements/Broadcast)\n                            0 = MIMO-A\n                            1 = SISO\n                            MIMO Control Messages is the recommended and default setting.\n                            However, SISO Control Messages can be helpful in talking to subscribers on releases previous to 13.2, which operated in this mode.\n                            Not applicable to PMP 450m.')
enableSecurityBanner = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 251), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableSecurityBanner.setStatus('current')
if mibBuilder.loadTexts: enableSecurityBanner.setDescription('Shows Security Banner at the time of login')
vcDepth = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 252), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 8, 16, 32, 64, 128))).clone(namedValues=NamedValues(("default", 0), ("eight", 8), ("sixteen", 16), ("thirty-two", 32), ("sixty-four", 64), ("one-two-eight", 128)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcDepth.setStatus('current')
if mibBuilder.loadTexts: vcDepth.setDescription('VC Depth of radio. Not applicable with 450m.\n                        \tEngineering use only.')
textSecurityBanner = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 253), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: textSecurityBanner.setStatus('current')
if mibBuilder.loadTexts: textSecurityBanner.setDescription('Security Banner to be dispalyed on login page.\n                        \tLength should be maximum 1200 characters.Configuration from web UI can enter upto 1499 characters.\n                        \tOnly ASCII characters(0-9a-zA-Z,CR,LF) supported.')
acceptSecurityBanner = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 254), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acceptSecurityBanner.setStatus('current')
if mibBuilder.loadTexts: acceptSecurityBanner.setDescription('1: User must accept and acknowledge security banner before login.\n                        \t0: Accepting security banner is not mandatory and user can login without it.')
poeT2Classification = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 255), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: poeT2Classification.setStatus('current')
if mibBuilder.loadTexts: poeT2Classification.setDescription('When disabled, the radio will ignore the 802.3at Type 2 classification.  When enabled,\n                             if 802.3at Type 2 PoE is not present, the board will start and log the problem but the \n                             transmitter and PoE out will not be enabled due to the low input power.  This is only\n                             available on the 450i.')
simulatedAirDelay = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 256), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: simulatedAirDelay.setStatus('current')
if mibBuilder.loadTexts: simulatedAirDelay.setDescription('Simulated Air Delay. Engineering use only.')
cnMaestroEnable = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 257), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnMaestroEnable.setStatus('current')
if mibBuilder.loadTexts: cnMaestroEnable.setDescription('Enable Remote management using cnMaestro.')
cnMaestroUrl = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 258), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnMaestroUrl.setStatus('current')
if mibBuilder.loadTexts: cnMaestroUrl.setDescription('cnMaestro Server URL.')
camID = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 259), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: camID.setStatus('current')
if mibBuilder.loadTexts: camID.setDescription('Cambium Id for cnMaestro onboarding.')
camOnboardKey = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 260), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: camOnboardKey.setStatus('current')
if mibBuilder.loadTexts: camOnboardKey.setDescription('Onboarding key for cnMaestro onboarding.')
atexHazlocPowerLimit = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 261), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("gasGroupA", 0), ("gasGroupB", 1), ("gasGroupC", 2), ("gasGroupD", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atexHazlocPowerLimit.setStatus('current')
if mibBuilder.loadTexts: atexHazlocPowerLimit.setDescription('If radio is keyed for ATEX/HazLoc operation, these settings can\n                            be used to limit maximum power output, per Gas Group specs.')
nearFieldRange = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 262), Integer32().subtype(subtypeSpec=ValueRangeConstraint(6, 3000))).setUnits('feet').setMaxAccess("readwrite")
if mibBuilder.loadTexts: nearFieldRange.setStatus('current')
if mibBuilder.loadTexts: nearFieldRange.setDescription('Range in feet for near field operation. This is applied\n                            only when nearFieldOperation is set to enable(1) and\n                            eirp is 22dBm or below or when Engineering keyed.\n                            The maximum range of 3000ft applies negligible correction.\n                            PMP 450m only.')
nearFieldOperation = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 263), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nearFieldOperation.setStatus('current')
if mibBuilder.loadTexts: nearFieldOperation.setDescription('Enables operation in the near field. This is\n                            effective only when an EIRP of 22 dBm or lower\n                            is selected or when Engineering keyed.\n                            PMP 450m only.')
defaultIPAccessEnable = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 264), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: defaultIPAccessEnable.setStatus('current')
if mibBuilder.loadTexts: defaultIPAccessEnable.setDescription('Enable(1) or Disable(0) Default alternative LAN1 IP address')
pingWdogEnable = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 265), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pingWdogEnable.setStatus('current')
if mibBuilder.loadTexts: pingWdogEnable.setDescription('enable(1) or disable(0) ping watchdog.')
pingWdogIP = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 266), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pingWdogIP.setStatus('current')
if mibBuilder.loadTexts: pingWdogIP.setDescription('IPv4 address to ping in dotted decimal notation.')
pingWdogInterval = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 267), Integer32().subtype(subtypeSpec=ValueRangeConstraint(300, 86400))).setUnits('Seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pingWdogInterval.setStatus('current')
if mibBuilder.loadTexts: pingWdogInterval.setDescription('Intervals in seconds at which ping should be initiated.')
pingWdogRbtCnt = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 268), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pingWdogRbtCnt.setStatus('current')
if mibBuilder.loadTexts: pingWdogRbtCnt.setDescription('Ping Failures count at which reboot should be initiated.')
forceReassessment = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 275), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: forceReassessment.setStatus('current')
if mibBuilder.loadTexts: forceReassessment.setDescription('Forces channel reassessment for all registered SMs.\n                            This is effective only when an EIRP of 22 dBm or lower\n                            is selected or when Engineering keyed.\n                            MU-MIMO only.')
enable8023linkBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 276), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enable8023linkBox.setStatus('current')
if mibBuilder.loadTexts: enable8023linkBox.setDescription('To enable or disable 802.3 link.')
ethernetPortSelection = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 278), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("mainPort", 0), ("sfpPort", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetPortSelection.setStatus('current')
if mibBuilder.loadTexts: ethernetPortSelection.setDescription('Set/Get the Ethernet port used to bridge traffic. PMP 450m only.')
ethernetLinkSpeedSfp = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 2, 279), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(32, 40, 64, 168))).clone(namedValues=NamedValues(("auto1000FX", 32), ("auto1000F-100F", 40), ("forced1000FX", 64), ("auto2500F-1000F-100F", 168)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetLinkSpeedSfp.setStatus('current')
if mibBuilder.loadTexts: ethernetLinkSpeedSfp.setDescription('Set/Get Ethernet link speed and duplex settings of the SFP port. PMP 450m only. Please note that the Radio Recovery Console only supports auto1000F for the SFP.')
saveFlash = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("doNotSaveToFlash", 0), ("saveToFlash", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: saveFlash.setStatus('obsolete')
if mibBuilder.loadTexts: saveFlash.setDescription('This variable is currently deprecated.')
reboot = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("finishedReboot", 0), ("reboot", 1), ("fullReboot", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reboot.setStatus('current')
if mibBuilder.loadTexts: reboot.setDescription('Setting the variable to 1 will reboot the unit. When the\n            unit finishes rebooting, it will be in finishedReboot state.  Setting\n            the variable to 2 will perform a full reboot of a 450i radio, while\n            performing a normal reboot on other radios.')
clearEventLog = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notClear", 0), ("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clearEventLog.setStatus('current')
if mibBuilder.loadTexts: clearEventLog.setDescription('Setting the variable to 1 will clear the event log.')
rebootIfRequired = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("rebootNotRequired", 0), ("rebootRequired", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rebootIfRequired.setStatus('current')
if mibBuilder.loadTexts: rebootIfRequired.setDescription('Setting the variable to 1 will reboot the unit if reboot is required.')
clearBERStats = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("doNotClearBERStats", 0), ("clearBERStats", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clearBERStats.setStatus('current')
if mibBuilder.loadTexts: clearBERStats.setDescription("Set to clear the BER statistics by sending a 'clearBERStats'.  Value is set back to 'doNotClearBERStats'\n\t\t\t\t\t\tWhen action is complete.")
updateDevice = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: updateDevice.setStatus('current')
if mibBuilder.loadTexts: updateDevice.setDescription('Use to update the software on the device')
importConfigFile = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 3, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: importConfigFile.setStatus('current')
if mibBuilder.loadTexts: importConfigFile.setDescription('Set to URL to immediately download and apply configuration file')
exportConfigFile = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 3, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exportConfigFile.setStatus('current')
if mibBuilder.loadTexts: exportConfigFile.setDescription('Set to URL to immediately export and upload configuration file')
undoUnitWideSavedChanges = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("undoUnitWideSavedChanges", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: undoUnitWideSavedChanges.setStatus('current')
if mibBuilder.loadTexts: undoUnitWideSavedChanges.setDescription('Setting to 1 will undo unit wide saved changes')
resetPoEAux = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 3, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: resetPoEAux.setStatus('current')
if mibBuilder.loadTexts: resetPoEAux.setDescription('Setting to 1 will reset aux ethernet port PoE on 450i radio.\n                        Port will be powered off for 2 seconds during the set call, which will delay the SNMP response.')
whispBoxEvntLog = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 5, 1), EventString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: whispBoxEvntLog.setStatus('current')
if mibBuilder.loadTexts: whispBoxEvntLog.setDescription('Event log for AP and SM.')
whispBoxAttributesGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 6, 1, 1))
for _whispBoxAttributesGroup_obj in [[("WHISP-BOX-MIBV2-MIB", "vlanAcceptQinQFrames"), ("WHISP-BOX-MIBV2-MIB", "providerVID"), ("WHISP-BOX-MIBV2-MIB", "mac1VIDMapAddr"), ("WHISP-BOX-MIBV2-MIB", "mac1VIDMapVid"), ("WHISP-BOX-MIBV2-MIB", "mac1VIDMapPriority"), ("WHISP-BOX-MIBV2-MIB", "mac1VIDMapPriorityMode"), ("WHISP-BOX-MIBV2-MIB", "mac2VIDMapAddr"), ("WHISP-BOX-MIBV2-MIB", "mac2VIDMapVid"), ("WHISP-BOX-MIBV2-MIB", "mac2VIDMapPriority"), ("WHISP-BOX-MIBV2-MIB", "mac2VIDMapPriorityMode"), ("WHISP-BOX-MIBV2-MIB", "mac3VIDMapAddr"), ("WHISP-BOX-MIBV2-MIB", "mac3VIDMapVid"), ("WHISP-BOX-MIBV2-MIB", "mac3VIDMapPriority"), ("WHISP-BOX-MIBV2-MIB", "mac3VIDMapPriorityMode"), ("WHISP-BOX-MIBV2-MIB", "mac4VIDMapAddr"), ("WHISP-BOX-MIBV2-MIB", "mac4VIDMapVid"), ("WHISP-BOX-MIBV2-MIB", "mac4VIDMapPriority"), ("WHISP-BOX-MIBV2-MIB", "mac4VIDMapPriorityMode"), ("WHISP-BOX-MIBV2-MIB", "mac5VIDMapAddr"), ("WHISP-BOX-MIBV2-MIB", "mac5VIDMapVid"), ("WHISP-BOX-MIBV2-MIB", "mac5VIDMapPriority"), ("WHISP-BOX-MIBV2-MIB", "mac5VIDMapPriorityMode"), ("WHISP-BOX-MIBV2-MIB", "mac6VIDMapAddr"), ("WHISP-BOX-MIBV2-MIB", "mac6VIDMapVid"), ("WHISP-BOX-MIBV2-MIB", "mac6VIDMapPriority"), ("WHISP-BOX-MIBV2-MIB", "mac6VIDMapPriorityMode"), ("WHISP-BOX-MIBV2-MIB", "mac7VIDMapAddr"), ("WHISP-BOX-MIBV2-MIB", "mac7VIDMapVid"), ("WHISP-BOX-MIBV2-MIB", "mac7VIDMapPriority"), ("WHISP-BOX-MIBV2-MIB", "mac7VIDMapPriorityMode"), ("WHISP-BOX-MIBV2-MIB", "mac8VIDMapAddr"), ("WHISP-BOX-MIBV2-MIB", "mac8VIDMapVid"), ("WHISP-BOX-MIBV2-MIB", "mac8VIDMapPriority"), ("WHISP-BOX-MIBV2-MIB", "mac8VIDMapPriorityMode"), ("WHISP-BOX-MIBV2-MIB", "mac9VIDMapAddr"), ("WHISP-BOX-MIBV2-MIB", "mac9VIDMapVid"), ("WHISP-BOX-MIBV2-MIB", "mac9VIDMapPriority"), ("WHISP-BOX-MIBV2-MIB", "mac9VIDMapPriorityMode"), ("WHISP-BOX-MIBV2-MIB", "mac10VIDMapAddr"), ("WHISP-BOX-MIBV2-MIB", "mac10VIDMapVid"), ("WHISP-BOX-MIBV2-MIB", "mac10VIDMapPriority"), ("WHISP-BOX-MIBV2-MIB", "mac10VIDMapPriorityMode"), ("WHISP-BOX-MIBV2-MIB", "vlanPortType"), ("WHISP-BOX-MIBV2-MIB", "portVID"), ("WHISP-BOX-MIBV2-MIB", "timedSpectrumAnalysisDurationBox"), ("WHISP-BOX-MIBV2-MIB", "spectrumAnalysisActionBox"), ("WHISP-BOX-MIBV2-MIB", "calibrationStatusBox"), ("WHISP-BOX-MIBV2-MIB", "calibrationStatusBool"), ("WHISP-BOX-MIBV2-MIB", "catalinaGainRxCH1"), ("WHISP-BOX-MIBV2-MIB", "catalinaGainRxCH2"), ("WHISP-BOX-MIBV2-MIB", "catalinaAttenTxCH1"), ("WHISP-BOX-MIBV2-MIB", "catalinaAttenTxCH2"), ("WHISP-BOX-MIBV2-MIB", "catalinaCurrDetSetpointTxCH1"), ("WHISP-BOX-MIBV2-MIB", "catalinaCurrDetSetpointTxCH2"), ("WHISP-BOX-MIBV2-MIB", "catalinaCurrDetReadRefTxCH1"), ("WHISP-BOX-MIBV2-MIB", "catalinaCurrDetReadRefTxCH2"), ("WHISP-BOX-MIBV2-MIB", "catalinaCurrDetReadPowerOnTxCH1"), ("WHISP-BOX-MIBV2-MIB", "catalinaCurrDetReadPowerOnTxCH2"), ("WHISP-BOX-MIBV2-MIB", "catalinaOpenLoopAttenTxCH1"), ("WHISP-BOX-MIBV2-MIB", "catalinaOpenLoopAttenTxCH2"), ("WHISP-BOX-MIBV2-MIB", "catalinaTargetDetSetpointTxCH1"), ("WHISP-BOX-MIBV2-MIB", "catalinaTargetDetSetpointTxCH2"), ("WHISP-BOX-MIBV2-MIB", "catalinaGainReductionRxCH1"), ("WHISP-BOX-MIBV2-MIB", "catalinaGainReductionRxCH2"), ("WHISP-BOX-MIBV2-MIB", "catalinaLoAttenRxCH1"), ("WHISP-BOX-MIBV2-MIB", "catalinaLoAttenRxCH2"), ("WHISP-BOX-MIBV2-MIB", "catalinaTargetGainRxCH1"), ("WHISP-BOX-MIBV2-MIB", "catalinaTargetGainRxCH2"), ("WHISP-BOX-MIBV2-MIB", "whispBoxSoftwareVer"), ("WHISP-BOX-MIBV2-MIB", "whispBoxFPGAVer"), ("WHISP-BOX-MIBV2-MIB", "whispBoxEsn"), ("WHISP-BOX-MIBV2-MIB", "whispBoxBoot"), ("WHISP-BOX-MIBV2-MIB", "boxTemperature"), ("WHISP-BOX-MIBV2-MIB", "boxDeviceType"), ("WHISP-BOX-MIBV2-MIB", "boxDeviceTypeID"), ("WHISP-BOX-MIBV2-MIB", "boxEncryption"), ("WHISP-BOX-MIBV2-MIB", "etherLinkStatus"), ("WHISP-BOX-MIBV2-MIB", "boxFrequency"), ("WHISP-BOX-MIBV2-MIB", "platformVer"), ("WHISP-BOX-MIBV2-MIB", "platformType"), ("WHISP-BOX-MIBV2-MIB", "dhcpLanIp"), ("WHISP-BOX-MIBV2-MIB", "dhcpLanSubnetMask"), ("WHISP-BOX-MIBV2-MIB", "dhcpLanGateway"), ("WHISP-BOX-MIBV2-MIB", "dhcpRfPublicIp"), ("WHISP-BOX-MIBV2-MIB", "dhcpRfPublicSubnetMask"), ("WHISP-BOX-MIBV2-MIB", "dhcpRfPublicGateway"), ("WHISP-BOX-MIBV2-MIB", "lanDhcpStatus"), ("WHISP-BOX-MIBV2-MIB", "rfPublicDhcpStatus"), ("WHISP-BOX-MIBV2-MIB", "natDhcpStatus"), ("WHISP-BOX-MIBV2-MIB", "inSyncCount"), ("WHISP-BOX-MIBV2-MIB", "outSyncCount"), ("WHISP-BOX-MIBV2-MIB", "pllOutLockCount"), ("WHISP-BOX-MIBV2-MIB", "txCalFailure"), ("WHISP-BOX-MIBV2-MIB", "swVersion"), ("WHISP-BOX-MIBV2-MIB", "pldVersion"), ("WHISP-BOX-MIBV2-MIB", "platformInfo"), ("WHISP-BOX-MIBV2-MIB", "antType"), ("WHISP-BOX-MIBV2-MIB", "antPolarization"), ("WHISP-BOX-MIBV2-MIB", "whispBoxP11Personality"), ("WHISP-BOX-MIBV2-MIB", "whispBoxP11FPGAType"), ("WHISP-BOX-MIBV2-MIB", "whispBoxP11BstrapFPGAVer"), ("WHISP-BOX-MIBV2-MIB", "numDFSDetections"), ("WHISP-BOX-MIBV2-MIB", "numLBTDetections"), ("WHISP-BOX-MIBV2-MIB", "rxOverrunPkts"), ("WHISP-BOX-MIBV2-MIB", "boxTemperatureC"), ("WHISP-BOX-MIBV2-MIB", "boxTemperatureF"), ("WHISP-BOX-MIBV2-MIB", "linkNegoSpeed"), ("WHISP-BOX-MIBV2-MIB", "installationColorCode"), ("WHISP-BOX-MIBV2-MIB", "colorCode"), ("WHISP-BOX-MIBV2-MIB", "displayOnlyAccess"), ("WHISP-BOX-MIBV2-MIB", "fullAccess"), ("WHISP-BOX-MIBV2-MIB", "webAutoUpdate"), ("WHISP-BOX-MIBV2-MIB", "pass1Status"), ("WHISP-BOX-MIBV2-MIB", "pass2Status"), ("WHISP-BOX-MIBV2-MIB", "bridgeEntryTimeout"), ("WHISP-BOX-MIBV2-MIB", "cnMaestroEnable"), ("WHISP-BOX-MIBV2-MIB", "cnMaestroUrl"), ("WHISP-BOX-MIBV2-MIB", "camID"), ("WHISP-BOX-MIBV2-MIB", "camOnboardKey"), ("WHISP-BOX-MIBV2-MIB", "camAccID"), ("WHISP-BOX-MIBV2-MIB", "cnMaestroStatus"), ("WHISP-BOX-MIBV2-MIB", "daVersion"), ("WHISP-BOX-MIBV2-MIB", "snmpMibPerm"), ("WHISP-BOX-MIBV2-MIB", "bhTimingMode"), ("WHISP-BOX-MIBV2-MIB", "powerControl"), ("WHISP-BOX-MIBV2-MIB", "extFilterDelay"), ("WHISP-BOX-MIBV2-MIB", "antennaGain"), ("WHISP-BOX-MIBV2-MIB", "eirp"), ("WHISP-BOX-MIBV2-MIB", "dynamicLearning"), ("WHISP-BOX-MIBV2-MIB", "managementVID"), ("WHISP-BOX-MIBV2-MIB", "managementVIDPriority"), ("WHISP-BOX-MIBV2-MIB", "managementVIDPriorityMode"), ("WHISP-BOX-MIBV2-MIB", "agingTimeout"), ("WHISP-BOX-MIBV2-MIB", "remarkSrcVID"), ("WHISP-BOX-MIBV2-MIB", "addRemarkVID"), ("WHISP-BOX-MIBV2-MIB", "addRemarkPriority"), ("WHISP-BOX-MIBV2-MIB", "deleteRemarkVID"), ("WHISP-BOX-MIBV2-MIB", "deleteRemarkPriority"), ("WHISP-BOX-MIBV2-MIB", "frameType"), ("WHISP-BOX-MIBV2-MIB", "addVlanMember"), ("WHISP-BOX-MIBV2-MIB", "removeVlanMember"), ("WHISP-BOX-MIBV2-MIB", "scheduling"), ("WHISP-BOX-MIBV2-MIB", "transmitterOP"), ("WHISP-BOX-MIBV2-MIB", "bridgeEnable"), ("WHISP-BOX-MIBV2-MIB", "fecEnable"), ("WHISP-BOX-MIBV2-MIB", "trapIP1"), ("WHISP-BOX-MIBV2-MIB", "trapIP2"), ("WHISP-BOX-MIBV2-MIB", "trapIP3"), ("WHISP-BOX-MIBV2-MIB", "trapIP4"), ("WHISP-BOX-MIBV2-MIB", "trapIP5"), ("WHISP-BOX-MIBV2-MIB", "trapIP6"), ("WHISP-BOX-MIBV2-MIB", "trapIP7"), ("WHISP-BOX-MIBV2-MIB", "trapIP8"), ("WHISP-BOX-MIBV2-MIB", "trapIP9"), ("WHISP-BOX-MIBV2-MIB", "trapIP10"), ("WHISP-BOX-MIBV2-MIB", "commStringRWrite"), ("WHISP-BOX-MIBV2-MIB", "subnetMask"), ("WHISP-BOX-MIBV2-MIB", "mngtIP"), ("WHISP-BOX-MIBV2-MIB", "allowVIDAccess"), ("WHISP-BOX-MIBV2-MIB", "setDefaultPlug"), ("WHISP-BOX-MIBV2-MIB", "hwsCompatibility"), ("WHISP-BOX-MIBV2-MIB", "gpsInput"), ("WHISP-BOX-MIBV2-MIB", "ism"), ("WHISP-BOX-MIBV2-MIB", "hiPriority"), ("WHISP-BOX-MIBV2-MIB", "userName"), ("WHISP-BOX-MIBV2-MIB", "userPassword"), ("WHISP-BOX-MIBV2-MIB", "userAccessLevel"), ("WHISP-BOX-MIBV2-MIB", "userMode"), ("WHISP-BOX-MIBV2-MIB", "deleteUser"), ("WHISP-BOX-MIBV2-MIB", "twoXRate"), ("WHISP-BOX-MIBV2-MIB", "lanDhcpState"), ("WHISP-BOX-MIBV2-MIB", "dnsIpState"), ("WHISP-BOX-MIBV2-MIB", "sessionTimeout"), ("WHISP-BOX-MIBV2-MIB", "vlanMemberSource"), ("WHISP-BOX-MIBV2-MIB", "addCustomFreqList"), ("WHISP-BOX-MIBV2-MIB", "removeCustomFreqList"), ("WHISP-BOX-MIBV2-MIB", "allowColocation"), ("WHISP-BOX-MIBV2-MIB", "changeUsrPwd"), ("WHISP-BOX-MIBV2-MIB", "mngtIP2"), ("WHISP-BOX-MIBV2-MIB", "subnetMask2"), ("WHISP-BOX-MIBV2-MIB", "mngtIP3"), ("WHISP-BOX-MIBV2-MIB", "subnetMask3"), ("WHISP-BOX-MIBV2-MIB", "mngtIP4"), ("WHISP-BOX-MIBV2-MIB", "subnetMask4"), ("WHISP-BOX-MIBV2-MIB", "mngtIP5"), ("WHISP-BOX-MIBV2-MIB", "subnetMask5"), ("WHISP-BOX-MIBV2-MIB", "mngtIP6"), ("WHISP-BOX-MIBV2-MIB", "subnetMask6"), ("WHISP-BOX-MIBV2-MIB", "mngtIP7"), ("WHISP-BOX-MIBV2-MIB", "subnetMask7"), ("WHISP-BOX-MIBV2-MIB", "mngtIP8"), ("WHISP-BOX-MIBV2-MIB", "subnetMask8"), ("WHISP-BOX-MIBV2-MIB", "mngtIP9"), ("WHISP-BOX-MIBV2-MIB", "subnetMask9"), ("WHISP-BOX-MIBV2-MIB", "mngtIP10"), ("WHISP-BOX-MIBV2-MIB", "subnetMask10"), ("WHISP-BOX-MIBV2-MIB", "bhvlanEnable"), ("WHISP-BOX-MIBV2-MIB", "lldpBroadcastEnable"), ("WHISP-BOX-MIBV2-MIB", "radioRateAdapt"), ("WHISP-BOX-MIBV2-MIB", "boardModel"), ("WHISP-BOX-MIBV2-MIB", "productTypeName"), ("WHISP-BOX-MIBV2-MIB", "fpgaBuildDate"), ("WHISP-BOX-MIBV2-MIB", "fpgaCompileInfo"), ("WHISP-BOX-MIBV2-MIB", "syslogDomainNameAppend"), ("WHISP-BOX-MIBV2-MIB", "syslogServerAddr"), ("WHISP-BOX-MIBV2-MIB", "syslogServerPort"), ("WHISP-BOX-MIBV2-MIB", "syslogMinLevel"), ("WHISP-BOX-MIBV2-MIB", "pingWdogEnable"), ("WHISP-BOX-MIBV2-MIB", "pingWdogIP"), ("WHISP-BOX-MIBV2-MIB", "pingWdogInterval"), ("WHISP-BOX-MIBV2-MIB", "pingWdogRbtCnt"), ("WHISP-BOX-MIBV2-MIB", "syslogStatTxSuccesses"), ("WHISP-BOX-MIBV2-MIB", "syslogStatDropped"), ("WHISP-BOX-MIBV2-MIB", "apType"), ("WHISP-BOX-MIBV2-MIB", "apSmMode"), ("WHISP-BOX-MIBV2-MIB", "region"), ("WHISP-BOX-MIBV2-MIB", "regionCode"), ("WHISP-BOX-MIBV2-MIB", "regionAsia"), ("WHISP-BOX-MIBV2-MIB", "regionEurope"), ("WHISP-BOX-MIBV2-MIB", "regionNorthAmerica"), ("WHISP-BOX-MIBV2-MIB", "regionOceania"), ("WHISP-BOX-MIBV2-MIB", "regionSouthAmerica"), ("WHISP-BOX-MIBV2-MIB", "regionAfrica"), ("WHISP-BOX-MIBV2-MIB", "regionOtherRegulatory"), ("WHISP-BOX-MIBV2-MIB", "mimoRateAdaptAlgorithm"), ("WHISP-BOX-MIBV2-MIB", "radioRateAdaptUL"), ("WHISP-BOX-MIBV2-MIB", "tcpAckPriority"), ("WHISP-BOX-MIBV2-MIB", "dnsPrimaryMgmtIP"), ("WHISP-BOX-MIBV2-MIB", "dnsAlternateMgmtIP"), ("WHISP-BOX-MIBV2-MIB", "dnsMgmtDomainName"), ("WHISP-BOX-MIBV2-MIB", "auxPortEnable"), ("WHISP-BOX-MIBV2-MIB", "defaultIPAccessEnable"), ("WHISP-BOX-MIBV2-MIB", "poeAuxEnable"), ("WHISP-BOX-MIBV2-MIB", "addCustomFreqMimo"), ("WHISP-BOX-MIBV2-MIB", "removeCustomFreqMimo"), ("WHISP-BOX-MIBV2-MIB", "snmpv2cEnable"), ("WHISP-BOX-MIBV2-MIB", "nearFieldRange"), ("WHISP-BOX-MIBV2-MIB", "nearFieldOperation"), ("WHISP-BOX-MIBV2-MIB", "nearFieldOperationActive"), ("WHISP-BOX-MIBV2-MIB", "forceReassessment"), ("WHISP-BOX-MIBV2-MIB", "forceReassessmentActive"), ("WHISP-BOX-MIBV2-MIB", "ftpPort"), ("WHISP-BOX-MIBV2-MIB", "httpPort"), ("WHISP-BOX-MIBV2-MIB", "httpsPort"), ("WHISP-BOX-MIBV2-MIB", "snmpPort"), ("WHISP-BOX-MIBV2-MIB", "snmpTrapPort"), ("WHISP-BOX-MIBV2-MIB", "webAccess"), ("WHISP-BOX-MIBV2-MIB", "snmpStatus"), ("WHISP-BOX-MIBV2-MIB", "telnetStatus"), ("WHISP-BOX-MIBV2-MIB", "ftpStatus"), ("WHISP-BOX-MIBV2-MIB", "tftpStatus"), ("WHISP-BOX-MIBV2-MIB", "lan1DhcpRelease"), ("WHISP-BOX-MIBV2-MIB", "lan1DhcpRenew"), ("WHISP-BOX-MIBV2-MIB", "lan3DhcpRelease"), ("WHISP-BOX-MIBV2-MIB", "lan3DhcpRenew")], [("WHISP-BOX-MIBV2-MIB", "natDhcpRelease"), ("WHISP-BOX-MIBV2-MIB", "natDhcpRenew"), ("WHISP-BOX-MIBV2-MIB", "radioEngKeyed"), ("WHISP-BOX-MIBV2-MIB", "radioWatchDogLogged"), ("WHISP-BOX-MIBV2-MIB", "radioFatalErrorLogged"), ("WHISP-BOX-MIBV2-MIB", "codePointSelect"), ("WHISP-BOX-MIBV2-MIB", "prioritySelect"), ("WHISP-BOX-MIBV2-MIB", "priorityPrecedence"), ("WHISP-BOX-MIBV2-MIB", "pppoeCtlPriority"), ("WHISP-BOX-MIBV2-MIB", "rfStatXmtUDataCnt"), ("WHISP-BOX-MIBV2-MIB", "rfStatXmtBDataCnt"), ("WHISP-BOX-MIBV2-MIB", "rfStatXmtMDataCnt"), ("WHISP-BOX-MIBV2-MIB", "rfStatRcvUDataCnt"), ("WHISP-BOX-MIBV2-MIB", "rfStatRcvBDataCnt"), ("WHISP-BOX-MIBV2-MIB", "rfStatRcvMDataCnt"), ("WHISP-BOX-MIBV2-MIB", "rfStatXmtCntlCnt"), ("WHISP-BOX-MIBV2-MIB", "rfStatRcvCntlCnt"), ("WHISP-BOX-MIBV2-MIB", "rfStatInSyncCount"), ("WHISP-BOX-MIBV2-MIB", "rfStatOutSyncCount"), ("WHISP-BOX-MIBV2-MIB", "rfStatOverrunCount"), ("WHISP-BOX-MIBV2-MIB", "rfStatUnderrunCount"), ("WHISP-BOX-MIBV2-MIB", "rfStatRcvCorruptDataCount"), ("WHISP-BOX-MIBV2-MIB", "rfStatRcvCorruptControlCount"), ("WHISP-BOX-MIBV2-MIB", "rfStatBadBcastCtlCnt"), ("WHISP-BOX-MIBV2-MIB", "rfStatPLLOutOfLockCnt"), ("WHISP-BOX-MIBV2-MIB", "rfStatBeaconVerMismatchCnt"), ("WHISP-BOX-MIBV2-MIB", "rfStatBadFreqBcnRcvCnt"), ("WHISP-BOX-MIBV2-MIB", "rfStatnonLiteBcnRcvCnt"), ("WHISP-BOX-MIBV2-MIB", "rfStatUnsupFeatBcnRcvCnt"), ("WHISP-BOX-MIBV2-MIB", "rfStatUnkwnFeatBcnRcvCnt"), ("WHISP-BOX-MIBV2-MIB", "rfStatTxCalFailCnt"), ("WHISP-BOX-MIBV2-MIB", "rfStatBadInSyncIDRcv"), ("WHISP-BOX-MIBV2-MIB", "rfStatTempOutOfRange"), ("WHISP-BOX-MIBV2-MIB", "rfStatRSSIOutOfRange"), ("WHISP-BOX-MIBV2-MIB", "rfStatRangeCapEnf"), ("WHISP-BOX-MIBV2-MIB", "rfStatRcvLTStart"), ("WHISP-BOX-MIBV2-MIB", "rfStatRcvLTStartHS"), ("WHISP-BOX-MIBV2-MIB", "rfStatRcvLTResult"), ("WHISP-BOX-MIBV2-MIB", "rfStatXmtLTResult"), ("WHISP-BOX-MIBV2-MIB", "soundingStatClear"), ("WHISP-BOX-MIBV2-MIB", "soundingStatRequestCount"), ("WHISP-BOX-MIBV2-MIB", "soundingStatResponseCount"), ("WHISP-BOX-MIBV2-MIB", "soundingStatRequestsIgnored"), ("WHISP-BOX-MIBV2-MIB", "soundingStatAvgRequestInterval"), ("WHISP-BOX-MIBV2-MIB", "soundingStatMaxRequestInterval"), ("WHISP-BOX-MIBV2-MIB", "soundingStatErrorCount"), ("WHISP-BOX-MIBV2-MIB", "soundingStatRequestsDropped"), ("WHISP-BOX-MIBV2-MIB", "soundingStatResponsesSuppressed"), ("WHISP-BOX-MIBV2-MIB", "soundingStatVersionMismatch"), ("WHISP-BOX-MIBV2-MIB", "whispFeatureKeyOrigin"), ("WHISP-BOX-MIBV2-MIB", "poeT2Status"), ("WHISP-BOX-MIBV2-MIB", "updateStatus"), ("WHISP-BOX-MIBV2-MIB", "bridgeCbFecStatbin"), ("WHISP-BOX-MIBV2-MIB", "bridgeCbFecStatbout"), ("WHISP-BOX-MIBV2-MIB", "bridgeCbFecStatbtoss"), ("WHISP-BOX-MIBV2-MIB", "bridgeCbFecStatbtosscap"), ("WHISP-BOX-MIBV2-MIB", "bridgeCbFecStatuin"), ("WHISP-BOX-MIBV2-MIB", "bridgeCbFecStatuout"), ("WHISP-BOX-MIBV2-MIB", "bridgeCbFecStatutoss"), ("WHISP-BOX-MIBV2-MIB", "bridgeCbFecStatutosscap"), ("WHISP-BOX-MIBV2-MIB", "bridgeCbEthAuxStatbin"), ("WHISP-BOX-MIBV2-MIB", "bridgeCbEthAuxStatbout"), ("WHISP-BOX-MIBV2-MIB", "bridgeCbEthAuxStatbtoss"), ("WHISP-BOX-MIBV2-MIB", "bridgeCbEthAuxStatbtosscap"), ("WHISP-BOX-MIBV2-MIB", "bridgeCbEthAuxStatuin"), ("WHISP-BOX-MIBV2-MIB", "bridgeCbEthAuxStatuout"), ("WHISP-BOX-MIBV2-MIB", "bridgeCbEthAuxStatutoss"), ("WHISP-BOX-MIBV2-MIB", "bridgeCbEthAuxStatutosscap"), ("WHISP-BOX-MIBV2-MIB", "bridgeCbFecStatfloods"), ("WHISP-BOX-MIBV2-MIB", "bridgeCbEthAuxStatfloods"), ("WHISP-BOX-MIBV2-MIB", "bridgeCbRFStatfloods"), ("WHISP-BOX-MIBV2-MIB", "bridgeCbRFStatbin"), ("WHISP-BOX-MIBV2-MIB", "bridgeCbRFStatbout"), ("WHISP-BOX-MIBV2-MIB", "bridgeCbRFStatbtoss"), ("WHISP-BOX-MIBV2-MIB", "bridgeCbRFStatbtosscap"), ("WHISP-BOX-MIBV2-MIB", "bridgeCbRFStatuin"), ("WHISP-BOX-MIBV2-MIB", "bridgeCbRFStatuout"), ("WHISP-BOX-MIBV2-MIB", "bridgeCbRFStatutoss"), ("WHISP-BOX-MIBV2-MIB", "bridgeCbRFStatutosscap"), ("WHISP-BOX-MIBV2-MIB", "bridgeCbErrStatNI1QSend"), ("WHISP-BOX-MIBV2-MIB", "bridgeCbErrStatNI2QSend"), ("WHISP-BOX-MIBV2-MIB", "bridgeCbErrStatBridgeFull"), ("WHISP-BOX-MIBV2-MIB", "bridgeCbErrStatSendMsg"), ("WHISP-BOX-MIBV2-MIB", "bridgeCbErrStatAPFecQSend"), ("WHISP-BOX-MIBV2-MIB", "bridgeCbErrStatApRfQSend"), ("WHISP-BOX-MIBV2-MIB", "fecStatLinkDetected"), ("WHISP-BOX-MIBV2-MIB", "fecStatLinkUptime"), ("WHISP-BOX-MIBV2-MIB", "fecStatLinkLost"), ("WHISP-BOX-MIBV2-MIB", "fecStatUnderSizedToss"), ("WHISP-BOX-MIBV2-MIB", "fecInDiscardsCount"), ("WHISP-BOX-MIBV2-MIB", "fecInErrorsCount"), ("WHISP-BOX-MIBV2-MIB", "fecOutDiscardsCount"), ("WHISP-BOX-MIBV2-MIB", "fecOutErrorsCount"), ("WHISP-BOX-MIBV2-MIB", "fecRxBabErr"), ("WHISP-BOX-MIBV2-MIB", "fecTxHbErr"), ("WHISP-BOX-MIBV2-MIB", "fecEthBusErr"), ("WHISP-BOX-MIBV2-MIB", "fecCRCError"), ("WHISP-BOX-MIBV2-MIB", "fecRxFifoNoBuf"), ("WHISP-BOX-MIBV2-MIB", "fecRxOverrun"), ("WHISP-BOX-MIBV2-MIB", "fecLateCollision"), ("WHISP-BOX-MIBV2-MIB", "fecRetransLimitExp"), ("WHISP-BOX-MIBV2-MIB", "fecTxUnderrun"), ("WHISP-BOX-MIBV2-MIB", "fecCarSenseLost"), ("WHISP-BOX-MIBV2-MIB", "fecNoCarrier"), ("WHISP-BOX-MIBV2-MIB", "fecLargeFrame"), ("WHISP-BOX-MIBV2-MIB", "fecRuntFrame"), ("WHISP-BOX-MIBV2-MIB", "fecExcessiveDeferrals"), ("WHISP-BOX-MIBV2-MIB", "fecAuxStatLinkDetected"), ("WHISP-BOX-MIBV2-MIB", "fecAuxStatLinkUptime"), ("WHISP-BOX-MIBV2-MIB", "fecAuxStatLinkLost"), ("WHISP-BOX-MIBV2-MIB", "fecAuxInDiscardsCount"), ("WHISP-BOX-MIBV2-MIB", "fecAuxInErrorsCount"), ("WHISP-BOX-MIBV2-MIB", "fecAuxOutDiscardsCount"), ("WHISP-BOX-MIBV2-MIB", "fecAuxOutErrorsCount"), ("WHISP-BOX-MIBV2-MIB", "fecAuxCRCError"), ("WHISP-BOX-MIBV2-MIB", "fecAuxRxOverrun"), ("WHISP-BOX-MIBV2-MIB", "fecAuxLateCollision"), ("WHISP-BOX-MIBV2-MIB", "fecAuxRetransLimitExp"), ("WHISP-BOX-MIBV2-MIB", "fecAuxTxUnderrun"), ("WHISP-BOX-MIBV2-MIB", "fecAuxCarSenseLost"), ("WHISP-BOX-MIBV2-MIB", "fecAuxNoCarrier"), ("WHISP-BOX-MIBV2-MIB", "fecAuxLargeFrame"), ("WHISP-BOX-MIBV2-MIB", "fecAuxRuntFrame"), ("WHISP-BOX-MIBV2-MIB", "rfInDiscardsCountExt"), ("WHISP-BOX-MIBV2-MIB", "rfInErrorsCountExt"), ("WHISP-BOX-MIBV2-MIB", "rfOutDiscardsCountExt"), ("WHISP-BOX-MIBV2-MIB", "rfOutErrorsCountExt"), ("WHISP-BOX-MIBV2-MIB", "rfInDiscardsCount"), ("WHISP-BOX-MIBV2-MIB", "rfInErrorsCount"), ("WHISP-BOX-MIBV2-MIB", "rfOutDiscardsCount"), ("WHISP-BOX-MIBV2-MIB", "rfOutErrorsCount"), ("WHISP-BOX-MIBV2-MIB", "packetOverloadCounter"), ("WHISP-BOX-MIBV2-MIB", "fecInDiscardsOverloadCount"), ("WHISP-BOX-MIBV2-MIB", "fecOutDiscardsOverloadCount"), ("WHISP-BOX-MIBV2-MIB", "rfInDiscardsOverloadCount"), ("WHISP-BOX-MIBV2-MIB", "rfOutDiscardsOverloadCount"), ("WHISP-BOX-MIBV2-MIB", "framePeriodCurrent"), ("WHISP-BOX-MIBV2-MIB", "hardwareVersion"), ("WHISP-BOX-MIBV2-MIB", "radioStatusTransmitControlOverridden"), ("WHISP-BOX-MIBV2-MIB", "radioStatusTrackingFailure"), ("WHISP-BOX-MIBV2-MIB", "radioStatusSectorWeightsOff"), ("WHISP-BOX-MIBV2-MIB", "radioStatusRxBeamFormingOff"), ("WHISP-BOX-MIBV2-MIB", "radioStatusPowerDetectorInactive"), ("WHISP-BOX-MIBV2-MIB", "radioStatusCatQuadCalFail"), ("WHISP-BOX-MIBV2-MIB", "radioStatusAlarmReason"), ("WHISP-BOX-MIBV2-MIB", "radioStatusAlarm"), ("WHISP-BOX-MIBV2-MIB", "atexHazlocPowerLimit"), ("WHISP-BOX-MIBV2-MIB", "interleave"), ("WHISP-BOX-MIBV2-MIB", "controlMessages"), ("WHISP-BOX-MIBV2-MIB", "radioMSN"), ("WHISP-BOX-MIBV2-MIB", "simulatedAirDelay"), ("WHISP-BOX-MIBV2-MIB", "latitude"), ("WHISP-BOX-MIBV2-MIB", "longitude"), ("WHISP-BOX-MIBV2-MIB", "height"), ("WHISP-BOX-MIBV2-MIB", "bandwidth"), ("WHISP-BOX-MIBV2-MIB", "dataScramblingMethod"), ("WHISP-BOX-MIBV2-MIB", "whispWebUserAccessMode"), ("WHISP-BOX-MIBV2-MIB", "whispUsrAuth"), ("WHISP-BOX-MIBV2-MIB", "usrAccountEnableAccounting"), ("WHISP-BOX-MIBV2-MIB", "allowRejectThenLocal"), ("WHISP-BOX-MIBV2-MIB", "pppoeFilter"), ("WHISP-BOX-MIBV2-MIB", "smbFilter"), ("WHISP-BOX-MIBV2-MIB", "ipv6smbFilter"), ("WHISP-BOX-MIBV2-MIB", "snmpFilter"), ("WHISP-BOX-MIBV2-MIB", "ipv6snmpFilter"), ("WHISP-BOX-MIBV2-MIB", "userP1Filter"), ("WHISP-BOX-MIBV2-MIB", "userP2Filter"), ("WHISP-BOX-MIBV2-MIB", "userP3Filter"), ("WHISP-BOX-MIBV2-MIB", "allOtherIpFilter"), ("WHISP-BOX-MIBV2-MIB", "allOtherIpv6Filter"), ("WHISP-BOX-MIBV2-MIB", "allIpv4Filter"), ("WHISP-BOX-MIBV2-MIB", "allIpv6Filter"), ("WHISP-BOX-MIBV2-MIB", "arpFilter"), ("WHISP-BOX-MIBV2-MIB", "allOthersFilter"), ("WHISP-BOX-MIBV2-MIB", "userDefinedPort1"), ("WHISP-BOX-MIBV2-MIB", "port1TCPFilter"), ("WHISP-BOX-MIBV2-MIB", "port1UDPFilter"), ("WHISP-BOX-MIBV2-MIB", "userDefinedPort2"), ("WHISP-BOX-MIBV2-MIB", "port2TCPFilter"), ("WHISP-BOX-MIBV2-MIB", "port2UDPFilter"), ("WHISP-BOX-MIBV2-MIB", "userDefinedPort3"), ("WHISP-BOX-MIBV2-MIB", "port3TCPFilter"), ("WHISP-BOX-MIBV2-MIB", "port3UDPFilter"), ("WHISP-BOX-MIBV2-MIB", "bootpcFilter"), ("WHISP-BOX-MIBV2-MIB", "ipv6bootpcFilter"), ("WHISP-BOX-MIBV2-MIB", "bootpsFilter"), ("WHISP-BOX-MIBV2-MIB", "ipv6bootpsFilter"), ("WHISP-BOX-MIBV2-MIB", "ip4MultFilter"), ("WHISP-BOX-MIBV2-MIB", "ipv6MultFilter"), ("WHISP-BOX-MIBV2-MIB", "packetFilterDirection"), ("WHISP-BOX-MIBV2-MIB", "encryptionConfig"), ("WHISP-BOX-MIBV2-MIB", "activeTxPowerStr"), ("WHISP-BOX-MIBV2-MIB", "activeTxPowerHdths")]]:
    if getattr(mibBuilder, 'version', 0) < (4, 4, 2):
        # WARNING: leading objects get lost here!
        whispBoxAttributesGroup = whispBoxAttributesGroup.setObjects(*_whispBoxAttributesGroup_obj)
    else:
        whispBoxAttributesGroup = whispBoxAttributesGroup.setObjects(*_whispBoxAttributesGroup_obj, **dict(append=True))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    whispBoxAttributesGroup = whispBoxAttributesGroup.setStatus('current')
if mibBuilder.loadTexts: whispBoxAttributesGroup.setDescription('Canopy Box Level Attributes group.')
whispBoxControlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 6, 1, 2)).setObjects(("WHISP-BOX-MIBV2-MIB", "enable8023linkBox"), ("WHISP-BOX-MIBV2-MIB", "saveFlash"), ("WHISP-BOX-MIBV2-MIB", "reboot"), ("WHISP-BOX-MIBV2-MIB", "clearEventLog"), ("WHISP-BOX-MIBV2-MIB", "rebootIfRequired"), ("WHISP-BOX-MIBV2-MIB", "clearBERStats"), ("WHISP-BOX-MIBV2-MIB", "updateDevice"), ("WHISP-BOX-MIBV2-MIB", "undoUnitWideSavedChanges"), ("WHISP-BOX-MIBV2-MIB", "resetPoEAux"), ("WHISP-BOX-MIBV2-MIB", "siteInfoViewable"), ("WHISP-BOX-MIBV2-MIB", "largeVCQ"), ("WHISP-BOX-MIBV2-MIB", "snrCalculation"), ("WHISP-BOX-MIBV2-MIB", "receiveQualityDebug"), ("WHISP-BOX-MIBV2-MIB", "poeT2Classification"), ("WHISP-BOX-MIBV2-MIB", "vcDepth"), ("WHISP-BOX-MIBV2-MIB", "enableSecurityBanner"), ("WHISP-BOX-MIBV2-MIB", "textSecurityBanner"), ("WHISP-BOX-MIBV2-MIB", "acceptSecurityBanner"), ("WHISP-BOX-MIBV2-MIB", "importConfigFile"), ("WHISP-BOX-MIBV2-MIB", "exportConfigFile"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    whispBoxControlGroup = whispBoxControlGroup.setStatus('current')
if mibBuilder.loadTexts: whispBoxControlGroup.setDescription('Canopy Box Level control group.')
whispBoxBTGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 6, 1, 3)).setObjects(("WHISP-BOX-MIBV2-MIB", "whispBridgeMacAddr"), ("WHISP-BOX-MIBV2-MIB", "whispBridgeDesLuid"), ("WHISP-BOX-MIBV2-MIB", "whispBridgeAge"), ("WHISP-BOX-MIBV2-MIB", "whispBridgeExt"), ("WHISP-BOX-MIBV2-MIB", "whispBridgeHash"), ("WHISP-BOX-MIBV2-MIB", "whispBridgeCAM"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    whispBoxBTGroup = whispBoxBTGroup.setStatus('current')
if mibBuilder.loadTexts: whispBoxBTGroup.setDescription('Canopy Box Bridging Table group.')
whispBoxVLANTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 6, 1, 4)).setObjects(("WHISP-BOX-MIBV2-MIB", "whispVID"), ("WHISP-BOX-MIBV2-MIB", "whispVType"), ("WHISP-BOX-MIBV2-MIB", "whispVAge"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    whispBoxVLANTableGroup = whispBoxVLANTableGroup.setStatus('current')
if mibBuilder.loadTexts: whispBoxVLANTableGroup.setDescription('Canopy Box VLAN member Table group.')
whispBoxCPTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 6, 1, 5)).setObjects(("WHISP-BOX-MIBV2-MIB", "codePoint0"), ("WHISP-BOX-MIBV2-MIB", "codePoint1"), ("WHISP-BOX-MIBV2-MIB", "codePoint2"), ("WHISP-BOX-MIBV2-MIB", "codePoint3"), ("WHISP-BOX-MIBV2-MIB", "codePoint4"), ("WHISP-BOX-MIBV2-MIB", "codePoint5"), ("WHISP-BOX-MIBV2-MIB", "codePoint6"), ("WHISP-BOX-MIBV2-MIB", "codePoint7"), ("WHISP-BOX-MIBV2-MIB", "codePoint8"), ("WHISP-BOX-MIBV2-MIB", "codePoint9"), ("WHISP-BOX-MIBV2-MIB", "codePoint10"), ("WHISP-BOX-MIBV2-MIB", "codePoint11"), ("WHISP-BOX-MIBV2-MIB", "codePoint12"), ("WHISP-BOX-MIBV2-MIB", "codePoint13"), ("WHISP-BOX-MIBV2-MIB", "codePoint14"), ("WHISP-BOX-MIBV2-MIB", "codePoint15"), ("WHISP-BOX-MIBV2-MIB", "codePoint16"), ("WHISP-BOX-MIBV2-MIB", "codePoint17"), ("WHISP-BOX-MIBV2-MIB", "codePoint18"), ("WHISP-BOX-MIBV2-MIB", "codePoint19"), ("WHISP-BOX-MIBV2-MIB", "codePoint20"), ("WHISP-BOX-MIBV2-MIB", "codePoint21"), ("WHISP-BOX-MIBV2-MIB", "codePoint22"), ("WHISP-BOX-MIBV2-MIB", "codePoint23"), ("WHISP-BOX-MIBV2-MIB", "codePoint24"), ("WHISP-BOX-MIBV2-MIB", "codePoint25"), ("WHISP-BOX-MIBV2-MIB", "codePoint26"), ("WHISP-BOX-MIBV2-MIB", "codePoint27"), ("WHISP-BOX-MIBV2-MIB", "codePoint28"), ("WHISP-BOX-MIBV2-MIB", "codePoint29"), ("WHISP-BOX-MIBV2-MIB", "codePoint30"), ("WHISP-BOX-MIBV2-MIB", "codePoint31"), ("WHISP-BOX-MIBV2-MIB", "codePoint32"), ("WHISP-BOX-MIBV2-MIB", "codePoint33"), ("WHISP-BOX-MIBV2-MIB", "codePoint34"), ("WHISP-BOX-MIBV2-MIB", "codePoint35"), ("WHISP-BOX-MIBV2-MIB", "codePoint36"), ("WHISP-BOX-MIBV2-MIB", "codePoint37"), ("WHISP-BOX-MIBV2-MIB", "codePoint38"), ("WHISP-BOX-MIBV2-MIB", "codePoint39"), ("WHISP-BOX-MIBV2-MIB", "codePoint40"), ("WHISP-BOX-MIBV2-MIB", "codePoint41"), ("WHISP-BOX-MIBV2-MIB", "codePoint42"), ("WHISP-BOX-MIBV2-MIB", "codePoint43"), ("WHISP-BOX-MIBV2-MIB", "codePoint44"), ("WHISP-BOX-MIBV2-MIB", "codePoint45"), ("WHISP-BOX-MIBV2-MIB", "codePoint46"), ("WHISP-BOX-MIBV2-MIB", "codePoint47"), ("WHISP-BOX-MIBV2-MIB", "codePoint48"), ("WHISP-BOX-MIBV2-MIB", "codePoint49"), ("WHISP-BOX-MIBV2-MIB", "codePoint50"), ("WHISP-BOX-MIBV2-MIB", "codePoint51"), ("WHISP-BOX-MIBV2-MIB", "codePoint52"), ("WHISP-BOX-MIBV2-MIB", "codePoint53"), ("WHISP-BOX-MIBV2-MIB", "codePoint54"), ("WHISP-BOX-MIBV2-MIB", "codePoint55"), ("WHISP-BOX-MIBV2-MIB", "codePoint56"), ("WHISP-BOX-MIBV2-MIB", "codePoint57"), ("WHISP-BOX-MIBV2-MIB", "codePoint58"), ("WHISP-BOX-MIBV2-MIB", "codePoint59"), ("WHISP-BOX-MIBV2-MIB", "codePoint60"), ("WHISP-BOX-MIBV2-MIB", "codePoint61"), ("WHISP-BOX-MIBV2-MIB", "codePoint62"), ("WHISP-BOX-MIBV2-MIB", "codePoint63"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    whispBoxCPTableGroup = whispBoxCPTableGroup.setStatus('current')
if mibBuilder.loadTexts: whispBoxCPTableGroup.setDescription('Code Point Table group.')
whispBoxUserTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 6, 1, 6)).setObjects(("WHISP-BOX-MIBV2-MIB", "entryIndex"), ("WHISP-BOX-MIBV2-MIB", "userLoginName"), ("WHISP-BOX-MIBV2-MIB", "userPswd"), ("WHISP-BOX-MIBV2-MIB", "accessLevel"), ("WHISP-BOX-MIBV2-MIB", "loginStatus"), ("WHISP-BOX-MIBV2-MIB", "loginMethod"), ("WHISP-BOX-MIBV2-MIB", "sessionTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    whispBoxUserTableGroup = whispBoxUserTableGroup.setStatus('current')
if mibBuilder.loadTexts: whispBoxUserTableGroup.setDescription('Canopy Box User Information Table group.')
whispLayer2NeighborTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 6, 1, 7)).setObjects(("WHISP-BOX-MIBV2-MIB", "entryL2Index"), ("WHISP-BOX-MIBV2-MIB", "neighborMAC"), ("WHISP-BOX-MIBV2-MIB", "neighborIP"), ("WHISP-BOX-MIBV2-MIB", "neighborSiteName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    whispLayer2NeighborTableGroup = whispLayer2NeighborTableGroup.setStatus('current')
if mibBuilder.loadTexts: whispLayer2NeighborTableGroup.setDescription('Canopy Box Layer 2 Neighbor information.')
whispBoxNotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 6, 1, 8)).setObjects(("WHISP-BOX-MIBV2-MIB", "boxLan1DHCPClientEvent"), ("WHISP-BOX-MIBV2-MIB", "boxPoEType2PowerNotPresent"), ("WHISP-BOX-MIBV2-MIB", "radioStatusAlarmEvent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    whispBoxNotifGroup = whispBoxNotifGroup.setStatus('current')
if mibBuilder.loadTexts: whispBoxNotifGroup.setDescription('Canopy Box Notification Group.')
whispBoxVLANRemarkTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 6, 1, 9)).setObjects(("WHISP-BOX-MIBV2-MIB", "sourceVID"), ("WHISP-BOX-MIBV2-MIB", "remarkVIDState"), ("WHISP-BOX-MIBV2-MIB", "remarkVID"), ("WHISP-BOX-MIBV2-MIB", "remarkPriorityState"), ("WHISP-BOX-MIBV2-MIB", "remarkPriority"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    whispBoxVLANRemarkTableGroup = whispBoxVLANRemarkTableGroup.setStatus('current')
if mibBuilder.loadTexts: whispBoxVLANRemarkTableGroup.setDescription('Canopy Box VLAN Remarking Table group.')
whispBoxSNMPv3Group = ObjectGroup((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 6, 1, 10)).setObjects(("WHISP-BOX-MIBV2-MIB", "snmpv3EngineId"), ("WHISP-BOX-MIBV2-MIB", "snmpv3SecLvl"), ("WHISP-BOX-MIBV2-MIB", "snmpv3AuthProt"), ("WHISP-BOX-MIBV2-MIB", "snmpv3PrivProt"), ("WHISP-BOX-MIBV2-MIB", "roUserName"), ("WHISP-BOX-MIBV2-MIB", "roAuthPassword"), ("WHISP-BOX-MIBV2-MIB", "roPrivPassword"), ("WHISP-BOX-MIBV2-MIB", "rwUserEnable"), ("WHISP-BOX-MIBV2-MIB", "rwUserName"), ("WHISP-BOX-MIBV2-MIB", "rwAuthPassword"), ("WHISP-BOX-MIBV2-MIB", "rwPrivPassword"), ("WHISP-BOX-MIBV2-MIB", "userName1"), ("WHISP-BOX-MIBV2-MIB", "user1Enable"), ("WHISP-BOX-MIBV2-MIB", "user1AuthPassword"), ("WHISP-BOX-MIBV2-MIB", "user1PrivPassword"), ("WHISP-BOX-MIBV2-MIB", "userGroup1"), ("WHISP-BOX-MIBV2-MIB", "userName2"), ("WHISP-BOX-MIBV2-MIB", "user2Enable"), ("WHISP-BOX-MIBV2-MIB", "user2AuthPassword"), ("WHISP-BOX-MIBV2-MIB", "user2PrivPassword"), ("WHISP-BOX-MIBV2-MIB", "user2Group"), ("WHISP-BOX-MIBV2-MIB", "userName3"), ("WHISP-BOX-MIBV2-MIB", "user3Enable"), ("WHISP-BOX-MIBV2-MIB", "user3AuthPassword"), ("WHISP-BOX-MIBV2-MIB", "user3PrivPassword"), ("WHISP-BOX-MIBV2-MIB", "user3Group"), ("WHISP-BOX-MIBV2-MIB", "snmpv3TrapEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    whispBoxSNMPv3Group = whispBoxSNMPv3Group.setStatus('current')
if mibBuilder.loadTexts: whispBoxSNMPv3Group.setDescription('Canopy Box SNMPv3 Group.')
whispBoxLinkTestGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 6, 1, 11)).setObjects(("WHISP-BOX-MIBV2-MIB", "linkTestLUIDBox"), ("WHISP-BOX-MIBV2-MIB", "linkTestDurationBox"), ("WHISP-BOX-MIBV2-MIB", "linkTestActionBox"), ("WHISP-BOX-MIBV2-MIB", "linkTestPktLengthBox"), ("WHISP-BOX-MIBV2-MIB", "linkTestModeBox"), ("WHISP-BOX-MIBV2-MIB", "linkTestSNRCalculationBox"), ("WHISP-BOX-MIBV2-MIB", "linkTestWithDualPathBox"), ("WHISP-BOX-MIBV2-MIB", "linkTestNumPktBox"), ("WHISP-BOX-MIBV2-MIB", "linkTestForceModulationBox"), ("WHISP-BOX-MIBV2-MIB", "linkTestDirectionBox"), ("WHISP-BOX-MIBV2-MIB", "testLUIDBox"), ("WHISP-BOX-MIBV2-MIB", "linkTestStatusBox"), ("WHISP-BOX-MIBV2-MIB", "linkTestErrorBox"), ("WHISP-BOX-MIBV2-MIB", "testDurationBox"), ("WHISP-BOX-MIBV2-MIB", "downLinkRateBox"), ("WHISP-BOX-MIBV2-MIB", "upLinkRateBox"), ("WHISP-BOX-MIBV2-MIB", "downLinkRateExtrapolatedBox"), ("WHISP-BOX-MIBV2-MIB", "upLinkRateExtrapolatedBox"), ("WHISP-BOX-MIBV2-MIB", "downLinkEffBox"), ("WHISP-BOX-MIBV2-MIB", "maxDwnLinkIndexBox"), ("WHISP-BOX-MIBV2-MIB", "actDwnLinkIndexBox"), ("WHISP-BOX-MIBV2-MIB", "expDwnFragCountBox"), ("WHISP-BOX-MIBV2-MIB", "actDwnFragCountBox"), ("WHISP-BOX-MIBV2-MIB", "upLinkEffBox"), ("WHISP-BOX-MIBV2-MIB", "expUpFragCountBox"), ("WHISP-BOX-MIBV2-MIB", "actUpFragCountBox"), ("WHISP-BOX-MIBV2-MIB", "maxUpLinkIndexBox"), ("WHISP-BOX-MIBV2-MIB", "actUpLinkIndexBox"), ("WHISP-BOX-MIBV2-MIB", "fragments1xDwnLinkVerticalBox"), ("WHISP-BOX-MIBV2-MIB", "fragments2xDwnLinkVerticalBox"), ("WHISP-BOX-MIBV2-MIB", "fragments3xDwnLinkVerticalBox"), ("WHISP-BOX-MIBV2-MIB", "fragments4xDwnLinkVerticalBox"), ("WHISP-BOX-MIBV2-MIB", "fragments1xUpLinkVerticalBox"), ("WHISP-BOX-MIBV2-MIB", "fragments2xUpLinkVerticalBox"), ("WHISP-BOX-MIBV2-MIB", "fragments3xUpLinkVerticalBox"), ("WHISP-BOX-MIBV2-MIB", "fragments4xUpLinkVerticalBox"), ("WHISP-BOX-MIBV2-MIB", "fragments1xDwnLinkHorizontalBox"), ("WHISP-BOX-MIBV2-MIB", "fragments2xDwnLinkHorizontalBox"), ("WHISP-BOX-MIBV2-MIB", "fragments3xDwnLinkHorizontalBox"), ("WHISP-BOX-MIBV2-MIB", "fragments4xDwnLinkHorizontalBox"), ("WHISP-BOX-MIBV2-MIB", "fragments1xUpLinkHorizontalBox"), ("WHISP-BOX-MIBV2-MIB", "fragments2xUpLinkHorizontalBox"), ("WHISP-BOX-MIBV2-MIB", "fragments3xUpLinkHorizontalBox"), ("WHISP-BOX-MIBV2-MIB", "fragments4xUpLinkHorizontalBox"), ("WHISP-BOX-MIBV2-MIB", "bitErrorsCorrected1xDwnLinkVerticalBox"), ("WHISP-BOX-MIBV2-MIB", "bitErrorsCorrected2xDwnLinkVerticalBox"), ("WHISP-BOX-MIBV2-MIB", "bitErrorsCorrected3xDwnLinkVerticalBox"), ("WHISP-BOX-MIBV2-MIB", "bitErrorsCorrected4xDwnLinkVerticalBox"), ("WHISP-BOX-MIBV2-MIB", "bitErrorsCorrected1xUpLinkVerticalBox"), ("WHISP-BOX-MIBV2-MIB", "bitErrorsCorrected2xUpLinkVerticalBox"), ("WHISP-BOX-MIBV2-MIB", "bitErrorsCorrected3xUpLinkVerticalBox"), ("WHISP-BOX-MIBV2-MIB", "bitErrorsCorrected4xUpLinkVerticalBox"), ("WHISP-BOX-MIBV2-MIB", "signalToNoiseRatioDownLinkVerticalBox"), ("WHISP-BOX-MIBV2-MIB", "signalToNoiseRatioUpLinkVerticalBox"), ("WHISP-BOX-MIBV2-MIB", "bitErrorsCorrected1xDwnLinkHorizontalBox"), ("WHISP-BOX-MIBV2-MIB", "bitErrorsCorrected2xDwnLinkHorizontalBox"), ("WHISP-BOX-MIBV2-MIB", "bitErrorsCorrected3xDwnLinkHorizontalBox"), ("WHISP-BOX-MIBV2-MIB", "bitErrorsCorrected4xDwnLinkHorizontalBox"), ("WHISP-BOX-MIBV2-MIB", "bitErrorsCorrected1xUpLinkHorizontalBox"), ("WHISP-BOX-MIBV2-MIB", "bitErrorsCorrected2xUpLinkHorizontalBox"), ("WHISP-BOX-MIBV2-MIB", "bitErrorsCorrected3xUpLinkHorizontalBox"), ("WHISP-BOX-MIBV2-MIB", "bitErrorsCorrected4xUpLinkHorizontalBox"), ("WHISP-BOX-MIBV2-MIB", "signalToNoiseRatioDownLinkHorizontalBox"), ("WHISP-BOX-MIBV2-MIB", "signalToNoiseRatioUpLinkHorizontalBox"), ("WHISP-BOX-MIBV2-MIB", "linkTestLastRunTime"), ("WHISP-BOX-MIBV2-MIB", "linkTestMissedFragDwnLink"), ("WHISP-BOX-MIBV2-MIB", "linkTestMissedFragUpLink"), ("WHISP-BOX-MIBV2-MIB", "linkTestNumPktTxActCnt"), ("WHISP-BOX-MIBV2-MIB", "linkTestNumPktTxExpCnt"), ("WHISP-BOX-MIBV2-MIB", "linkTestNumPktRxActCnt"), ("WHISP-BOX-MIBV2-MIB", "linkTestNumPktRxExpCnt"), ("WHISP-BOX-MIBV2-MIB", "linkTestMVCVC"), ("WHISP-BOX-MIBV2-MIB", "linkTestMVCPriority"), ("WHISP-BOX-MIBV2-MIB", "linkTestMVCXmtFragsDL"), ("WHISP-BOX-MIBV2-MIB", "linkTestMVCRcvFragsDL"), ("WHISP-BOX-MIBV2-MIB", "linkTestMVCThroughputDL"), ("WHISP-BOX-MIBV2-MIB", "linkTestMVCEfficiencyDL"), ("WHISP-BOX-MIBV2-MIB", "linkTestMVCSumimoModRateDL"), ("WHISP-BOX-MIBV2-MIB", "linkTestMVCSumimoXmtModeDL"), ("WHISP-BOX-MIBV2-MIB", "linkTestMVCMumimoModRateDL"), ("WHISP-BOX-MIBV2-MIB", "linkTestMVCMumimoXmtModeDL"), ("WHISP-BOX-MIBV2-MIB", "linkTestMVCGroupingRatioDL"), ("WHISP-BOX-MIBV2-MIB", "linkTestMVCXmtFragsTotalDL"), ("WHISP-BOX-MIBV2-MIB", "linkTestMVCRcvFragsTotalDL"), ("WHISP-BOX-MIBV2-MIB", "linkTestMVCThroughputTotalDL"), ("WHISP-BOX-MIBV2-MIB", "linkTestMVCThroughputTotalUntestedVCsDL"), ("WHISP-BOX-MIBV2-MIB", "linkTestMVCEfficiencyTotalDL"), ("WHISP-BOX-MIBV2-MIB", "linkTestMVCSlotDistributionDL"), ("WHISP-BOX-MIBV2-MIB", "linkTestFloodModeBox"), ("WHISP-BOX-MIBV2-MIB", "linkTestMumimoBox"), ("WHISP-BOX-MIBV2-MIB", "linkTestVCListBox"), ("WHISP-BOX-MIBV2-MIB", "linkTestSMRestriction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    whispBoxLinkTestGroup = whispBoxLinkTestGroup.setStatus('current')
if mibBuilder.loadTexts: whispBoxLinkTestGroup.setDescription('Canopy Box Link Test group.')
whispBridgeTbUsed = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: whispBridgeTbUsed.setStatus('current')
if mibBuilder.loadTexts: whispBridgeTbUsed.setDescription('Number of used entries in bridging table.')
whispBridgeTbFree = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: whispBridgeTbFree.setStatus('current')
if mibBuilder.loadTexts: whispBridgeTbFree.setDescription('Number of free entries in bridging table.')
whispBridgeTbErr = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 7, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: whispBridgeTbErr.setStatus('current')
if mibBuilder.loadTexts: whispBridgeTbErr.setDescription('Bridging table errors.')
codePoint0 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: codePoint0.setStatus('current')
if mibBuilder.loadTexts: codePoint0.setDescription('Code Point 0.')
codePoint1 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint1.setStatus('current')
if mibBuilder.loadTexts: codePoint1.setDescription('Code Point 1.')
codePoint2 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint2.setStatus('current')
if mibBuilder.loadTexts: codePoint2.setDescription('Code Point 2.')
codePoint3 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint3.setStatus('current')
if mibBuilder.loadTexts: codePoint3.setDescription('Code Point 3.')
codePoint4 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint4.setStatus('current')
if mibBuilder.loadTexts: codePoint4.setDescription('Code Point 4.')
codePoint5 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint5.setStatus('current')
if mibBuilder.loadTexts: codePoint5.setDescription('Code Point 5.')
codePoint6 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint6.setStatus('current')
if mibBuilder.loadTexts: codePoint6.setDescription('Code Point 6.')
codePoint7 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint7.setStatus('current')
if mibBuilder.loadTexts: codePoint7.setDescription('Code Point 7.')
codePoint8 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint8.setStatus('current')
if mibBuilder.loadTexts: codePoint8.setDescription('Code Point 8.')
codePoint9 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint9.setStatus('current')
if mibBuilder.loadTexts: codePoint9.setDescription('Code Point 9.')
codePoint10 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint10.setStatus('current')
if mibBuilder.loadTexts: codePoint10.setDescription('Code Point 10.')
codePoint11 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint11.setStatus('current')
if mibBuilder.loadTexts: codePoint11.setDescription('Code Point 11.')
codePoint12 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint12.setStatus('current')
if mibBuilder.loadTexts: codePoint12.setDescription('Code Point 12.')
codePoint13 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint13.setStatus('current')
if mibBuilder.loadTexts: codePoint13.setDescription('Code Point 13.')
codePoint14 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint14.setStatus('current')
if mibBuilder.loadTexts: codePoint14.setDescription('Code Point 14.')
codePoint15 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint15.setStatus('current')
if mibBuilder.loadTexts: codePoint15.setDescription('Code Point 15.')
codePoint16 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint16.setStatus('current')
if mibBuilder.loadTexts: codePoint16.setDescription('Code Point 16.')
codePoint17 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint17.setStatus('current')
if mibBuilder.loadTexts: codePoint17.setDescription('Code Point 17.')
codePoint18 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint18.setStatus('current')
if mibBuilder.loadTexts: codePoint18.setDescription('Code Point 18.')
codePoint19 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint19.setStatus('current')
if mibBuilder.loadTexts: codePoint19.setDescription('Code Point 19.')
codePoint20 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint20.setStatus('current')
if mibBuilder.loadTexts: codePoint20.setDescription('Code Point 20.')
codePoint21 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint21.setStatus('current')
if mibBuilder.loadTexts: codePoint21.setDescription('Code Point 21.')
codePoint22 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint22.setStatus('current')
if mibBuilder.loadTexts: codePoint22.setDescription('Code Point 22.')
codePoint23 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 24), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint23.setStatus('current')
if mibBuilder.loadTexts: codePoint23.setDescription('Code Point 23.')
codePoint24 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint24.setStatus('current')
if mibBuilder.loadTexts: codePoint24.setDescription('Code Point 24.')
codePoint25 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 26), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint25.setStatus('current')
if mibBuilder.loadTexts: codePoint25.setDescription('Code Point 25.')
codePoint26 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 27), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint26.setStatus('current')
if mibBuilder.loadTexts: codePoint26.setDescription('Code Point 26.')
codePoint27 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 28), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint27.setStatus('current')
if mibBuilder.loadTexts: codePoint27.setDescription('Code Point 27.')
codePoint28 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 29), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint28.setStatus('current')
if mibBuilder.loadTexts: codePoint28.setDescription('Code Point 28.')
codePoint29 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 30), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint29.setStatus('current')
if mibBuilder.loadTexts: codePoint29.setDescription('Code Point 29.')
codePoint30 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 31), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint30.setStatus('current')
if mibBuilder.loadTexts: codePoint30.setDescription('Code Point 30.')
codePoint31 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 32), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint31.setStatus('current')
if mibBuilder.loadTexts: codePoint31.setDescription('Code Point 31.')
codePoint32 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 33), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint32.setStatus('current')
if mibBuilder.loadTexts: codePoint32.setDescription('Code Point 32.')
codePoint33 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 34), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint33.setStatus('current')
if mibBuilder.loadTexts: codePoint33.setDescription('Code Point 33.')
codePoint34 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 35), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint34.setStatus('current')
if mibBuilder.loadTexts: codePoint34.setDescription('Code Point 34.')
codePoint35 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 36), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint35.setStatus('current')
if mibBuilder.loadTexts: codePoint35.setDescription('Code Point 35.')
codePoint36 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 37), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint36.setStatus('current')
if mibBuilder.loadTexts: codePoint36.setDescription('Code Point 36.')
codePoint37 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 38), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint37.setStatus('current')
if mibBuilder.loadTexts: codePoint37.setDescription('Code Point 37.')
codePoint38 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 39), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint38.setStatus('current')
if mibBuilder.loadTexts: codePoint38.setDescription('Code Point 38.')
codePoint39 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 40), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint39.setStatus('current')
if mibBuilder.loadTexts: codePoint39.setDescription('Code Point 39.')
codePoint40 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 41), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint40.setStatus('current')
if mibBuilder.loadTexts: codePoint40.setDescription('Code Point 40.')
codePoint41 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 42), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint41.setStatus('current')
if mibBuilder.loadTexts: codePoint41.setDescription('Code Point 41.')
codePoint42 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 43), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint42.setStatus('current')
if mibBuilder.loadTexts: codePoint42.setDescription('Code Point 42.')
codePoint43 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 44), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint43.setStatus('current')
if mibBuilder.loadTexts: codePoint43.setDescription('Code Point 43.')
codePoint44 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 45), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint44.setStatus('current')
if mibBuilder.loadTexts: codePoint44.setDescription('Code Point 44.')
codePoint45 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 46), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint45.setStatus('current')
if mibBuilder.loadTexts: codePoint45.setDescription('Code Point 45.')
codePoint46 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 47), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint46.setStatus('current')
if mibBuilder.loadTexts: codePoint46.setDescription('Code Point 46.')
codePoint47 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 48), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint47.setStatus('current')
if mibBuilder.loadTexts: codePoint47.setDescription('Code Point 47.')
codePoint48 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 49), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: codePoint48.setStatus('current')
if mibBuilder.loadTexts: codePoint48.setDescription('Code Point 48.')
codePoint49 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 50), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint49.setStatus('current')
if mibBuilder.loadTexts: codePoint49.setDescription('Code Point 49.')
codePoint50 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 51), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint50.setStatus('current')
if mibBuilder.loadTexts: codePoint50.setDescription('Code Point 50.')
codePoint51 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 52), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint51.setStatus('current')
if mibBuilder.loadTexts: codePoint51.setDescription('Code Point 51.')
codePoint52 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 53), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint52.setStatus('current')
if mibBuilder.loadTexts: codePoint52.setDescription('Code Point 52.')
codePoint53 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint53.setStatus('current')
if mibBuilder.loadTexts: codePoint53.setDescription('Code Point 53.')
codePoint54 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 55), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint54.setStatus('current')
if mibBuilder.loadTexts: codePoint54.setDescription('Code Point 54.')
codePoint55 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint55.setStatus('current')
if mibBuilder.loadTexts: codePoint55.setDescription('Code Point 55.')
codePoint56 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 57), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: codePoint56.setStatus('current')
if mibBuilder.loadTexts: codePoint56.setDescription('Code Point 56.')
codePoint57 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 58), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint57.setStatus('current')
if mibBuilder.loadTexts: codePoint57.setDescription('Code Point 57.')
codePoint58 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 59), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint58.setStatus('current')
if mibBuilder.loadTexts: codePoint58.setDescription('Code Point 58.')
codePoint59 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 60), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint59.setStatus('current')
if mibBuilder.loadTexts: codePoint59.setDescription('Code Point 59.')
codePoint60 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 61), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint60.setStatus('current')
if mibBuilder.loadTexts: codePoint60.setDescription('Code Point 60.')
codePoint61 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 62), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint61.setStatus('current')
if mibBuilder.loadTexts: codePoint61.setDescription('Code Point 61.')
codePoint62 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 63), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint62.setStatus('current')
if mibBuilder.loadTexts: codePoint62.setDescription('Code Point 62.')
codePoint63 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 9, 64), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codePoint63.setStatus('current')
if mibBuilder.loadTexts: codePoint63.setDescription('Code Point 63.')
boxLan1DHCPClientEvent = NotificationType((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 12, 1, 1)).setObjects(("WHISP-BOX-MIBV2-MIB", "dhcpLanIp"), ("WHISP-BOX-MIBV2-MIB", "whispBoxEsn"))
if mibBuilder.loadTexts: boxLan1DHCPClientEvent.setStatus('current')
if mibBuilder.loadTexts: boxLan1DHCPClientEvent.setDescription('Lan1 DHCP Client has received a new address via DHCP')
boxPoEType2PowerNotPresent = NotificationType((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 12, 2, 1)).setObjects(("WHISP-BOX-MIBV2-MIB", "whispBoxEsn"))
if mibBuilder.loadTexts: boxPoEType2PowerNotPresent.setStatus('current')
if mibBuilder.loadTexts: boxPoEType2PowerNotPresent.setDescription('802.3at Type 2 PoE not present, transmit and PoE out disabled')
radioStatusAlarmEvent = NotificationType((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 12, 3, 1)).setObjects(("WHISP-BOX-MIBV2-MIB", "radioStatusAlarmReason"), ("WHISP-BOX-MIBV2-MIB", "whispBoxEsn"))
if mibBuilder.loadTexts: radioStatusAlarmEvent.setStatus('current')
if mibBuilder.loadTexts: radioStatusAlarmEvent.setDescription('Radio Alarm Event notification.')
dnsIpState = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 13, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("manual", 0), ("automatic", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsIpState.setStatus('current')
if mibBuilder.loadTexts: dnsIpState.setDescription('Configuration for DNS server IP addresses of the management interface are learned:\n             0 : Manual, must configure dnsPrimaryMgmtIP and dnsAlternateMgmtIP\n\t\t\t 1 : Automatic, DNS servers IP addresses are learned from DHCP response of the interface')
dnsPrimaryMgmtIP = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 13, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsPrimaryMgmtIP.setStatus('current')
if mibBuilder.loadTexts: dnsPrimaryMgmtIP.setDescription('Primary DNS IP address for the management interface.')
dnsAlternateMgmtIP = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 13, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsAlternateMgmtIP.setStatus('current')
if mibBuilder.loadTexts: dnsAlternateMgmtIP.setDescription('Secondary DNS IP address for the management interface.')
dnsMgmtDomainName = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 13, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsMgmtDomainName.setStatus('current')
if mibBuilder.loadTexts: dnsMgmtDomainName.setDescription('Domain Name to use for management DNS configuration.  This domain name may\n            be concatonated to DNS names used configured for the management interface.')
trapDomainNameAppend = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 13, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disableDomain", 0), ("appendDomain", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapDomainNameAppend.setStatus('current')
if mibBuilder.loadTexts: trapDomainNameAppend.setDescription("Select whether to append the configured management domain name to\n            the configured trap names.  For example, if dnsMgmtDomainName is\n\t\t\tset to 'example.com', trap1 is set to 'trap1', and trapDomainNameAppend\n            is set to appendDomain, the trap1 name used would be 'trap1.example.com'.")
trap1 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 13, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trap1.setStatus('current')
if mibBuilder.loadTexts: trap1.setDescription('SNMP Trap IP Address 1.\n            Format is either an IP address or DNS name.')
trap2 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 13, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trap2.setStatus('current')
if mibBuilder.loadTexts: trap2.setDescription('SNMP Trap IP Address 2.\n            Format is either an IP address or DNS name.')
trap3 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 13, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trap3.setStatus('current')
if mibBuilder.loadTexts: trap3.setDescription('SNMP Trap IP Address 3.\n            Format is either an IP address or DNS name.')
trap4 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 13, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trap4.setStatus('current')
if mibBuilder.loadTexts: trap4.setDescription('SNMP Trap IP Address 4.\n            Format is either an IP address or DNS name.')
trap5 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 13, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trap5.setStatus('current')
if mibBuilder.loadTexts: trap5.setDescription('SNMP Trap IP Address 5.\n            Format is either an IP address or DNS name.')
trap6 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 13, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trap6.setStatus('current')
if mibBuilder.loadTexts: trap6.setDescription('SNMP Trap IP Address 6.\n            Format is either an IP address or DNS name.')
trap7 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 13, 12), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trap7.setStatus('current')
if mibBuilder.loadTexts: trap7.setDescription('SNMP Trap IP Address 7.\n            Format is either an IP address or DNS name.')
trap8 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 13, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trap8.setStatus('current')
if mibBuilder.loadTexts: trap8.setDescription('SNMP Trap IP Address 8.\n            Format is either an IP address or DNS name.')
trap9 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 13, 14), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trap9.setStatus('current')
if mibBuilder.loadTexts: trap9.setDescription('SNMP Trap IP Address 9.\n            Format is either an IP address or DNS name.')
trap10 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 13, 15), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trap10.setStatus('current')
if mibBuilder.loadTexts: trap10.setDescription('SNMP Trap IP Address 10.\n            Format is either an IP address or DNS name.')
snmpv2cEnable = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 14, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpv2cEnable.setStatus('current')
if mibBuilder.loadTexts: snmpv2cEnable.setDescription('Enable(1) or Disable(0) SNMPv2c access')
snmpv3EngineId = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 14, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(10, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpv3EngineId.setStatus('current')
if mibBuilder.loadTexts: snmpv3EngineId.setDescription('The SNMPv3 engine administratively-unique identifier. Length of the identifier should be 5-32 octets which is 10-64 hexadecimal characters and even.')
snmpv3SecLvl = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 14, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("noAuth-noPriv", 0), ("auth-noPriv", 1), ("auth-priv", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpv3SecLvl.setStatus('current')
if mibBuilder.loadTexts: snmpv3SecLvl.setDescription('The security level of the SNMPv3 Engine.')
snmpv3AuthProt = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 14, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("md5", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpv3AuthProt.setStatus('current')
if mibBuilder.loadTexts: snmpv3AuthProt.setDescription('The SNMPv3 message authentication protocol to use.  \n            Currently only MD5 is supported.')
snmpv3PrivProt = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 14, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("cbc-des", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpv3PrivProt.setStatus('current')
if mibBuilder.loadTexts: snmpv3PrivProt.setDescription('The SNMPv3 message privacy/encryption protocol to use.\n            Currently only CBC-DES is supported.')
roUserName = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 14, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: roUserName.setStatus('current')
if mibBuilder.loadTexts: roUserName.setDescription('SNMPv3 Read-Only username.')
roAuthPassword = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 14, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: roAuthPassword.setStatus('current')
if mibBuilder.loadTexts: roAuthPassword.setDescription('SNMPv3 Read-Only message authentication password.Minimum 8 and maximum 32 characters long.')
roPrivPassword = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 14, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: roPrivPassword.setStatus('current')
if mibBuilder.loadTexts: roPrivPassword.setDescription('SNMPv3 Read-Only message privacy/encryption password.Minimum 8 and maximum 32 characters long.')
rwUserEnable = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 14, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rwUserEnable.setStatus('current')
if mibBuilder.loadTexts: rwUserEnable.setDescription('SNMPv3 Read-Write User Enable.')
rwUserName = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 14, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rwUserName.setStatus('current')
if mibBuilder.loadTexts: rwUserName.setDescription('SNMPv3 Read-Write Username.')
rwAuthPassword = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 14, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rwAuthPassword.setStatus('current')
if mibBuilder.loadTexts: rwAuthPassword.setDescription('SNMPv3 Read-Write message authentication password.Minimum 8 and maximum 32 characters long.')
rwPrivPassword = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 14, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rwPrivPassword.setStatus('current')
if mibBuilder.loadTexts: rwPrivPassword.setDescription('SNMPv3 Read-Write message privacy/encryption password.Minimum 8 and maximum 32 characters long.')
snmpv3TrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 14, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("roUserTrapEnable", 1), ("rwUserTrapEnable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpv3TrapEnable.setStatus('current')
if mibBuilder.loadTexts: snmpv3TrapEnable.setDescription('SNMPv3 Trap enable option:\n\t\t\t  (0) Disable - No SNMPv3 Traps Sent\n\t\t\t  (1) Enable Traps to be sent for SNMPv3 Read-Only User\n\t\t\t  (2) Enable Traps to be sent for SNMPv3 Read-Write User\n\t\t\tNOTE:  When disabled SNMPv2c Trap configuration is used.')
user1Enable = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 14, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: user1Enable.setStatus('current')
if mibBuilder.loadTexts: user1Enable.setDescription('SNMPv3 Additional User1 Enable.')
userName1 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 14, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userName1.setStatus('current')
if mibBuilder.loadTexts: userName1.setDescription('Additional SNMPv3 Username1.')
user1AuthPassword = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 14, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: user1AuthPassword.setStatus('current')
if mibBuilder.loadTexts: user1AuthPassword.setDescription('SNMPv3 Read-Write message authentication password.Minimum 8 and maximum 32 characters long.')
user1PrivPassword = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 14, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: user1PrivPassword.setStatus('current')
if mibBuilder.loadTexts: user1PrivPassword.setDescription('SNMPv3 Read-Write message privacy/encryption password.Minimum 8 and maximum 32 characters long.')
userGroup1 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 14, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("readwrite", 1), ("readonly", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userGroup1.setStatus('current')
if mibBuilder.loadTexts: userGroup1.setDescription('SNMPv3 User1 Group (ReadWrite/ReadOnly).')
userName2 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 14, 19), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userName2.setStatus('current')
if mibBuilder.loadTexts: userName2.setDescription('Additional SNMPv3 Username2.')
user2Enable = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 14, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: user2Enable.setStatus('current')
if mibBuilder.loadTexts: user2Enable.setDescription('SNMPv3 Additional User2 Enable.')
user2AuthPassword = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 14, 21), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: user2AuthPassword.setStatus('current')
if mibBuilder.loadTexts: user2AuthPassword.setDescription('SNMPv3 Read-Write message authentication password.Minimum 8 and maximum 32 characters long.')
user2PrivPassword = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 14, 22), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: user2PrivPassword.setStatus('current')
if mibBuilder.loadTexts: user2PrivPassword.setDescription('SNMPv3 Read-Write message privacy/encryption password.Minimum 8 and maximum 32 characters long.')
user2Group = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 14, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("readwrite", 1), ("readonly", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: user2Group.setStatus('current')
if mibBuilder.loadTexts: user2Group.setDescription('SNMPv3 User1 Group (ReadWrite/ReadOnly).')
userName3 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 14, 24), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userName3.setStatus('current')
if mibBuilder.loadTexts: userName3.setDescription('Additional SNMPv3 Username1.')
user3Enable = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 14, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: user3Enable.setStatus('current')
if mibBuilder.loadTexts: user3Enable.setDescription('SNMPv3 Additional User3 Enable.')
user3AuthPassword = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 14, 26), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: user3AuthPassword.setStatus('current')
if mibBuilder.loadTexts: user3AuthPassword.setDescription('SNMPv3 Read-Write message authentication password.Minimum 8 and maximum 32 characters long.')
user3PrivPassword = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 14, 27), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: user3PrivPassword.setStatus('current')
if mibBuilder.loadTexts: user3PrivPassword.setDescription('SNMPv3 Read-Write message privacy/encryption password.Minimum 8 and maximum 32 characters long.')
user3Group = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 14, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("readwrite", 1), ("readonly", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: user3Group.setStatus('current')
if mibBuilder.loadTexts: user3Group.setDescription('SNMPv3 User3 Group (ReadWrite/ReadOnly).')
whispRegStatusBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: whispRegStatusBox.setStatus('obsolete')
if mibBuilder.loadTexts: whispRegStatusBox.setDescription('This shows the registration status of a link.')
linkTestLUIDBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkTestLUIDBox.setStatus('current')
if mibBuilder.loadTexts: linkTestLUIDBox.setDescription('LUID selection for Link Test. Valid range: 2-255. Read-Only for SM or Backhaul slave, Read/Write for AP.')
linkTestDurationBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkTestDurationBox.setStatus('current')
if mibBuilder.loadTexts: linkTestDurationBox.setDescription('Duration for the Link Test. Valid range: 2-10 seconds')
linkTestActionBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("stopped", 0), ("start", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkTestActionBox.setStatus('current')
if mibBuilder.loadTexts: linkTestActionBox.setDescription("Setting value 1 will initiate link test. Note that trying to set 0 will not stop the test.\n            In fact it will return an error message. The value of 0 just indicates the idle state\n            meaning no test is running or the current test is done.\n            That's why the word stopped is used and not the action verb stop.")
linkTestPktLengthBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkTestPktLengthBox.setStatus('current')
if mibBuilder.loadTexts: linkTestPktLengthBox.setDescription('Packet length for Link Test. Valid range: 64-1714 bytes')
linkTestModeBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 0, 1, 2, 3))).clone(namedValues=NamedValues(("linktestwithmultipleVCs", 4), ("linktestwithoutbridging", 0), ("linktestwithbridging", 1), ("linktestwithbridgingandmir", 2), ("extrapolatedlinktest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkTestModeBox.setStatus('current')
if mibBuilder.loadTexts: linkTestModeBox.setDescription('Link Test Mode\n                            0 = Link Test without Bridging\n                            1 = Link Test with Bridging\n                            2 = Link Test with Bridging and MIR\n                            3 = Extrapolated Link Test (send only a few packets measuring their quality and extrapolate out the throughput)\n                            This is an estimation of the throughput based upon the modulation, efficiency, and data slots available.\n                            It intended to provide a basic link test test without impacting service for the sector.\n                            Extrapolated Link Test is not available for FSK radios.\n                            4 = Link Test with Multiple VCs (traffic sent to all registered VCs, or specified VCs) - PMP 450m only')
linkTestSNRCalculationBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkTestSNRCalculationBox.setStatus('current')
if mibBuilder.loadTexts: linkTestSNRCalculationBox.setDescription('Enable or disable Signal to Noise Ratio (SNR) calculations during a Link Test.\n                            Enabling(1) will calulate SNR on all receiving packets.\n                            Due to load on CPU, will slightly degrade packet per second capabilities.\n                            Only applicable to GenII OFDM products and up.')
linkTestWithDualPathBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("lowpriorityvconly", 0), ("highandlowpriorityvcs", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkTestWithDualPathBox.setStatus('current')
if mibBuilder.loadTexts: linkTestWithDualPathBox.setDescription('Link Test with:\n                            0 = Low Priority VC only\n                            1 = High and Low Priority VCs')
linkTestNumPktBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkTestNumPktBox.setStatus('current')
if mibBuilder.loadTexts: linkTestNumPktBox.setDescription('Number of packets to send. Valid range: 0-64 where 0 will\n\t\t\t\t\t\t\tflood the link for the duration of the test.')
linkTestForceModulationBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normalRateAdapt", 0), ("forceMaxModulation", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkTestForceModulationBox.setStatus('current')
if mibBuilder.loadTexts: linkTestForceModulationBox.setDescription('Engineering use only.\n                            Link Test with:\n                            0 = Normal Rate Adapt algorithm\n                            1 = Force to max modultion - No Rate Adapt Algorithm')
linkTestDirectionBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("bidirectional", 0), ("uplinkonly", 1), ("downlinkonly", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkTestDirectionBox.setStatus('current')
if mibBuilder.loadTexts: linkTestDirectionBox.setDescription('Link Test Direction - Engineering Use Only\n                            0 = default (will do bidirectional)\n                            1 = Uplink Only\n                            2 = Downlink Only\n                            3 = Bi-Directional (same as 0, setting to 3 will result in setting it to 0)')
linkTestFloodModeBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("external", 0), ("internal", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkTestFloodModeBox.setStatus('current')
if mibBuilder.loadTexts: linkTestFloodModeBox.setDescription('PMP 450m only. Engineering use only.\n                            Link Test usage:\n                            0 = Packets will be sent out the SM ethernet port\n                            1 = Packets will not be sent out the SM ethernet port')
linkTestMumimoBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkTestMumimoBox.setStatus('current')
if mibBuilder.loadTexts: linkTestMumimoBox.setDescription('PMP 450m only.\n                            Link Test usage:\n                            0 = MU-MIMO disabled (legacy or sector mode)\n                            1 = MU-MIMO enabled')
linkTestVCListBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 1, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkTestVCListBox.setStatus('current')
if mibBuilder.loadTexts: linkTestVCListBox.setDescription('PMP 450m only.\n                            Link Test usage:\n                            Enter VCs to be tested (eg. 18 - 22,24,32)\n                            Empty field or 0 will flood all registered VCs for duration of test')
linkTestSMRestriction = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkTestSMRestriction.setStatus('current')
if mibBuilder.loadTexts: linkTestSMRestriction.setDescription('Control access to SM initiated Link Tests.\n                            Disabling will permit all Link Tests initiated at the SM.\n                            Enabling will only permit Link Tests that allow user traffic to pass.\n                            PMP only.')
testLUIDBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: testLUIDBox.setStatus('current')
if mibBuilder.loadTexts: testLUIDBox.setDescription('LUID number of selected unit.')
linkTestStatusBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 2, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkTestStatusBox.setStatus('current')
if mibBuilder.loadTexts: linkTestStatusBox.setDescription('Status for Link Test.')
linkTestErrorBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 2, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkTestErrorBox.setStatus('current')
if mibBuilder.loadTexts: linkTestErrorBox.setDescription('Error status of Link Test:\n            (1) Failed to recieve handshake from remote device\n            (2) No session is currently active. Please try again after session established.\n            (3) Received a bad transaction ID.  Please try again.\n            (4) We werent able to send the test request to the remote device.\n            (5) We didnt receive any results from the remote device.')
testDurationBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: testDurationBox.setStatus('current')
if mibBuilder.loadTexts: testDurationBox.setDescription('Duration of link test.')
downLinkRateBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 2, 5), Integer32()).setUnits('bps').setMaxAccess("readonly")
if mibBuilder.loadTexts: downLinkRateBox.setStatus('current')
if mibBuilder.loadTexts: downLinkRateBox.setDescription('Downlink Rate.')
upLinkRateBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 2, 6), Integer32()).setUnits('bps').setMaxAccess("readonly")
if mibBuilder.loadTexts: upLinkRateBox.setStatus('current')
if mibBuilder.loadTexts: upLinkRateBox.setDescription('Uplink Rate.')
downLinkEffBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 2, 7), Integer32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: downLinkEffBox.setStatus('current')
if mibBuilder.loadTexts: downLinkEffBox.setDescription('Down Link Efficiency.')
maxDwnLinkIndexBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxDwnLinkIndexBox.setStatus('current')
if mibBuilder.loadTexts: maxDwnLinkIndexBox.setDescription('For link test results, the maximum possible downlink efficiency percentage (always 100%).')
actDwnLinkIndexBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 2, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actDwnLinkIndexBox.setStatus('current')
if mibBuilder.loadTexts: actDwnLinkIndexBox.setDescription('Actual down link index.')
expDwnFragCountBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 2, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expDwnFragCountBox.setStatus('current')
if mibBuilder.loadTexts: expDwnFragCountBox.setDescription('Expected Fragment Count.')
actDwnFragCountBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 2, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actDwnFragCountBox.setStatus('current')
if mibBuilder.loadTexts: actDwnFragCountBox.setDescription('Actual Fragment Count')
upLinkEffBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 2, 12), Integer32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: upLinkEffBox.setStatus('current')
if mibBuilder.loadTexts: upLinkEffBox.setDescription('Up link efficiency.')
expUpFragCountBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 2, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expUpFragCountBox.setStatus('current')
if mibBuilder.loadTexts: expUpFragCountBox.setDescription('Uplink expected Fragment Count.')
actUpFragCountBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 2, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actUpFragCountBox.setStatus('current')
if mibBuilder.loadTexts: actUpFragCountBox.setDescription('Actual uplink Fragment Count.')
maxUpLinkIndexBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 2, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxUpLinkIndexBox.setStatus('current')
if mibBuilder.loadTexts: maxUpLinkIndexBox.setDescription('For link test results, the maximum possible uplink efficiency percentage (always 100%).')
actUpLinkIndexBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 2, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actUpLinkIndexBox.setStatus('current')
if mibBuilder.loadTexts: actUpLinkIndexBox.setDescription('Actual Up link index.')
fragments1xDwnLinkVerticalBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 2, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fragments1xDwnLinkVerticalBox.setStatus('current')
if mibBuilder.loadTexts: fragments1xDwnLinkVerticalBox.setDescription('Number of fragments received on down link at 1X (QPSK).\n                            For Gen II OFDM and forward.\n                            For MIMO this is the vertical path.')
fragments2xDwnLinkVerticalBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 2, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fragments2xDwnLinkVerticalBox.setStatus('current')
if mibBuilder.loadTexts: fragments2xDwnLinkVerticalBox.setDescription('Number of fragments received on down link at 2X (16-QAM).\n                            For Gen II OFDM and forward.\n                            For MIMO this is the vertical path.')
fragments3xDwnLinkVerticalBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 2, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fragments3xDwnLinkVerticalBox.setStatus('current')
if mibBuilder.loadTexts: fragments3xDwnLinkVerticalBox.setDescription('Number of fragments received on down link at 3X (64-QAM).\n                            For Gen II OFDM and forward.\n                            For MIMO this is the vertical path.')
fragments4xDwnLinkVerticalBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 2, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fragments4xDwnLinkVerticalBox.setStatus('current')
if mibBuilder.loadTexts: fragments4xDwnLinkVerticalBox.setDescription('Number of fragments received on down link at 4X (256-QAM).\n                            For Gen II OFDM and forward.\n                            For MIMO this is the vertical path.')
fragments1xUpLinkVerticalBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 2, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fragments1xUpLinkVerticalBox.setStatus('current')
if mibBuilder.loadTexts: fragments1xUpLinkVerticalBox.setDescription('Number of fragments received on up link at 1X (QPSK).\n                            For Gen II OFDM and forward.\n                            For MIMO this is the vertical path.')
fragments2xUpLinkVerticalBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 2, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fragments2xUpLinkVerticalBox.setStatus('current')
if mibBuilder.loadTexts: fragments2xUpLinkVerticalBox.setDescription('Number of fragments received on up link at 2X (16-QAM).\n                            For Gen II OFDM and forward.\n                            For MIMO this is the vertical path.')
fragments3xUpLinkVerticalBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 2, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fragments3xUpLinkVerticalBox.setStatus('current')
if mibBuilder.loadTexts: fragments3xUpLinkVerticalBox.setDescription('Number of fragments received on up link at 3X (64-QAM).\n                            For Gen II OFDM and forward.\n                            For MIMO this is the vertical path.')
fragments4xUpLinkVerticalBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 2, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fragments4xUpLinkVerticalBox.setStatus('current')
if mibBuilder.loadTexts: fragments4xUpLinkVerticalBox.setDescription('Number of fragments received on up link at 4X (256-QAM).\n                            For Gen II OFDM and forward.\n                            For MIMO this is the vertical path.')
bitErrorsCorrected1xDwnLinkVerticalBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 2, 25), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bitErrorsCorrected1xDwnLinkVerticalBox.setStatus('current')
if mibBuilder.loadTexts: bitErrorsCorrected1xDwnLinkVerticalBox.setDescription('Number of bit errors corrected on average per fragment on down link at 1X (QPSK).\n                            For Gen II OFDM and forward.\n                            For MIMO this is the vertical path.')
bitErrorsCorrected2xDwnLinkVerticalBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 2, 26), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bitErrorsCorrected2xDwnLinkVerticalBox.setStatus('current')
if mibBuilder.loadTexts: bitErrorsCorrected2xDwnLinkVerticalBox.setDescription('Number of bit errors corrected on average per fragment on down link at 2X (16-QAM).\n                            For Gen II OFDM and forward.\n                            For MIMO this is the vertical path.')
bitErrorsCorrected3xDwnLinkVerticalBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 2, 27), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bitErrorsCorrected3xDwnLinkVerticalBox.setStatus('current')
if mibBuilder.loadTexts: bitErrorsCorrected3xDwnLinkVerticalBox.setDescription('Number of bit errors corrected on average per fragment on down link at 3X (64-QAM).\n                            For Gen II OFDM and forward.\n                            For MIMO this is the vertical path.')
bitErrorsCorrected4xDwnLinkVerticalBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 2, 28), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bitErrorsCorrected4xDwnLinkVerticalBox.setStatus('current')
if mibBuilder.loadTexts: bitErrorsCorrected4xDwnLinkVerticalBox.setDescription('Number of bit errors corrected on average per fragment on down link at 4X (256-QAM).\n                            For Gen II OFDM and forward.\n                            For MIMO this is the vertical path.')
bitErrorsCorrected1xUpLinkVerticalBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 2, 29), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bitErrorsCorrected1xUpLinkVerticalBox.setStatus('current')
if mibBuilder.loadTexts: bitErrorsCorrected1xUpLinkVerticalBox.setDescription('Number of bit errors corrected on average per fragment on up link at 1X (QPSK).\n                            For Gen II OFDM and forward.\n                            For MIMO this is the vertical path.')
bitErrorsCorrected2xUpLinkVerticalBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 2, 30), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bitErrorsCorrected2xUpLinkVerticalBox.setStatus('current')
if mibBuilder.loadTexts: bitErrorsCorrected2xUpLinkVerticalBox.setDescription('Number of bit errors corrected on average per fragment on up link at 2X (16-QAM).\n                            For Gen II OFDM and forward.\n                            For MIMO this is the vertical path.')
bitErrorsCorrected3xUpLinkVerticalBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 2, 31), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bitErrorsCorrected3xUpLinkVerticalBox.setStatus('current')
if mibBuilder.loadTexts: bitErrorsCorrected3xUpLinkVerticalBox.setDescription('Number of bit errors corrected on average per fragment on up link at 3X (64-QAM).\n                            For Gen II OFDM and forward.\n                            For MIMO this is the vertical path.')
bitErrorsCorrected4xUpLinkVerticalBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 2, 32), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bitErrorsCorrected4xUpLinkVerticalBox.setStatus('current')
if mibBuilder.loadTexts: bitErrorsCorrected4xUpLinkVerticalBox.setDescription('Number of bit errors corrected on average per fragment on up link at 4X (256-QAM).\n                            For Gen II OFDM and forward.\n                            For MIMO this is the vertical path.')
signalToNoiseRatioDownLinkVerticalBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 2, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: signalToNoiseRatioDownLinkVerticalBox.setStatus('current')
if mibBuilder.loadTexts: signalToNoiseRatioDownLinkVerticalBox.setDescription('Estimated Signal to Noise Ratio in dB for the down link.\n                            For Gen II OFDM and forward.\n                            For MIMO this is the vertical path.')
signalToNoiseRatioUpLinkVerticalBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 2, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: signalToNoiseRatioUpLinkVerticalBox.setStatus('current')
if mibBuilder.loadTexts: signalToNoiseRatioUpLinkVerticalBox.setDescription('Estimated Signal to Noise Ratio in dB for the up link.\n                            For Gen II OFDM and forward.\n                            For MIMO this is the vertical path.')
fragments1xDwnLinkHorizontalBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 2, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fragments1xDwnLinkHorizontalBox.setStatus('current')
if mibBuilder.loadTexts: fragments1xDwnLinkHorizontalBox.setDescription('Number of fragments received on down link at 1X (QPSK).\n                            For MIMO only.\n                            For MIMO this is the horizontal path.\n                            Fragments received in MIMO-A will only be counted on vertical.')
fragments2xDwnLinkHorizontalBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 2, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fragments2xDwnLinkHorizontalBox.setStatus('current')
if mibBuilder.loadTexts: fragments2xDwnLinkHorizontalBox.setDescription('Number of fragments received on down link at 2X (16-QAM).\n                            For MIMO only.\n                            For MIMO this is the horizontal path.\n                            Fragments received in MIMO-A will only be counted on vertical.')
fragments3xDwnLinkHorizontalBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 2, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fragments3xDwnLinkHorizontalBox.setStatus('current')
if mibBuilder.loadTexts: fragments3xDwnLinkHorizontalBox.setDescription('Number of fragments received on down link at 3X (64-QAM).\n                            For MIMO only.\n                            For MIMO this is the horizontal path.\n                            Fragments received in MIMO-A will only be counted on vertical.')
fragments4xDwnLinkHorizontalBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 2, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fragments4xDwnLinkHorizontalBox.setStatus('current')
if mibBuilder.loadTexts: fragments4xDwnLinkHorizontalBox.setDescription('Number of fragments received on down link at 4X (256-QAM).\n                            For MIMO only.\n                            For MIMO this is the horizontal path.\n                            Fragments received in MIMO-A will only be counted on vertical.')
fragments1xUpLinkHorizontalBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 2, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fragments1xUpLinkHorizontalBox.setStatus('current')
if mibBuilder.loadTexts: fragments1xUpLinkHorizontalBox.setDescription('Number of fragments received on up link at 1X (QPSK).\n                            For MIMO only.\n                            For MIMO this is the horizontal path.\n                            Fragments received in MIMO-A will only be counted on vertical.')
fragments2xUpLinkHorizontalBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 2, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fragments2xUpLinkHorizontalBox.setStatus('current')
if mibBuilder.loadTexts: fragments2xUpLinkHorizontalBox.setDescription('Number of fragments received on up link at 2X (16-QAM).\n                            For MIMO only.\n                            For MIMO this is the horizontal path.\n                            Fragments received in MIMO-A will only be counted on vertical.')
fragments3xUpLinkHorizontalBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 2, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fragments3xUpLinkHorizontalBox.setStatus('current')
if mibBuilder.loadTexts: fragments3xUpLinkHorizontalBox.setDescription('Number of fragments received on up link at 3X (64-QAM).\n                            For MIMO only.\n                            For MIMO this is the horizontal path.\n                            Fragments received in MIMO-A will only be counted on vertical.')
fragments4xUpLinkHorizontalBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 2, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fragments4xUpLinkHorizontalBox.setStatus('current')
if mibBuilder.loadTexts: fragments4xUpLinkHorizontalBox.setDescription('Number of fragments received on up link at 4X (256-QAM).\n                            For MIMO only.\n                            For MIMO this is the horizontal path.\n                            Fragments received in MIMO-A will only be counted on vertical.')
bitErrorsCorrected1xDwnLinkHorizontalBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 2, 43), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bitErrorsCorrected1xDwnLinkHorizontalBox.setStatus('current')
if mibBuilder.loadTexts: bitErrorsCorrected1xDwnLinkHorizontalBox.setDescription('Number of bit errors corrected on average per fragment on down link at 1X (QPSK).\n                            For MIMO and forward.\n                            For MIMO this is the horizontal path.\n                            Fragments received in MIMO-A will only be counted on vertical.')
bitErrorsCorrected2xDwnLinkHorizontalBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 2, 44), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bitErrorsCorrected2xDwnLinkHorizontalBox.setStatus('current')
if mibBuilder.loadTexts: bitErrorsCorrected2xDwnLinkHorizontalBox.setDescription('Number of bit errors corrected on average per fragment on down link at 2X (16-QAM).\n                            For MIMO and forward.\n                            For MIMO this is the horizontal path.\n                            Fragments received in MIMO-A will only be counted on vertical.')
bitErrorsCorrected3xDwnLinkHorizontalBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 2, 45), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bitErrorsCorrected3xDwnLinkHorizontalBox.setStatus('current')
if mibBuilder.loadTexts: bitErrorsCorrected3xDwnLinkHorizontalBox.setDescription('Number of bit errors corrected on average per fragment on down link at 3X (64-QAM).\n                            For MIMO and forward.\n                            For MIMO this is the horizontal path.\n                            Fragments received in MIMO-A will only be counted on vertical.')
bitErrorsCorrected4xDwnLinkHorizontalBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 2, 46), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bitErrorsCorrected4xDwnLinkHorizontalBox.setStatus('current')
if mibBuilder.loadTexts: bitErrorsCorrected4xDwnLinkHorizontalBox.setDescription('Number of bit errors corrected on average per fragment on down link at 4X (256-QAM).\n                            For MIMO and forward.\n                            For MIMO this is the horizontal path.\n                            Fragments received in MIMO-A will only be counted on vertical.')
bitErrorsCorrected1xUpLinkHorizontalBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 2, 47), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bitErrorsCorrected1xUpLinkHorizontalBox.setStatus('current')
if mibBuilder.loadTexts: bitErrorsCorrected1xUpLinkHorizontalBox.setDescription('Number of bit errors corrected on average per fragment on up link at 1X (QPSK).\n                            For MIMO and forward.\n                            For MIMO this is the horizontal path.\n                            Fragments received in MIMO-A will only be counted on vertical.')
bitErrorsCorrected2xUpLinkHorizontalBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 2, 48), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bitErrorsCorrected2xUpLinkHorizontalBox.setStatus('current')
if mibBuilder.loadTexts: bitErrorsCorrected2xUpLinkHorizontalBox.setDescription('Number of bit errors corrected on average per fragment on up link at 2X (16-QAM).\n                            For MIMO and forward.\n                            For MIMO this is the horizontal path.\n                            Fragments received in MIMO-A will only be counted on vertical.')
bitErrorsCorrected3xUpLinkHorizontalBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 2, 49), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bitErrorsCorrected3xUpLinkHorizontalBox.setStatus('current')
if mibBuilder.loadTexts: bitErrorsCorrected3xUpLinkHorizontalBox.setDescription('Engineering use only.\n                            Number of bit errors corrected on average per fragment on up link at 3X (64-QAM).\n                            For MIMO and forward.\n                            For MIMO this is the horizontal path.\n                            Fragments received in MIMO-A will only be counted on vertical.')
bitErrorsCorrected4xUpLinkHorizontalBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 2, 50), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bitErrorsCorrected4xUpLinkHorizontalBox.setStatus('current')
if mibBuilder.loadTexts: bitErrorsCorrected4xUpLinkHorizontalBox.setDescription('Number of bit errors corrected on average per fragment on up link at 4X (256-QAM).\n                            For MIMO and forward.\n                            For MIMO this is the horizontal path.\n                            Fragments received in MIMO-A will only be counted on vertical.')
signalToNoiseRatioDownLinkHorizontalBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 2, 51), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: signalToNoiseRatioDownLinkHorizontalBox.setStatus('current')
if mibBuilder.loadTexts: signalToNoiseRatioDownLinkHorizontalBox.setDescription('Estimated Signal to Noise Ratio in dB for the down link.\n                            For MIMO and forward.\n                            For MIMO this is the horizontal path.\n                            If operating in MIMO-A this will return 0.')
signalToNoiseRatioUpLinkHorizontalBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 2, 52), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: signalToNoiseRatioUpLinkHorizontalBox.setStatus('current')
if mibBuilder.loadTexts: signalToNoiseRatioUpLinkHorizontalBox.setDescription('Estimated Signal to Noise Ratio in dB for the up link.\n                            For Gen II OFDM and forward.\n                            For MIMO this is the horizontal path.\n                            If operating in MIMO-A this will return 0.')
downLinkRateExtrapolatedBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 2, 53), Integer32()).setUnits('bps').setMaxAccess("readonly")
if mibBuilder.loadTexts: downLinkRateExtrapolatedBox.setStatus('current')
if mibBuilder.loadTexts: downLinkRateExtrapolatedBox.setDescription('Extrapolated Downlink Rate from an extrapolated link test.\n                            Extrapolated Link Test sends only a few packets over the link and extrapolates this out to what would happen on a full link test.\n                            This is an estimation of the throughput based upon the modulation, efficiency, and data slots available.\n                            It intended to provide a basic link test test without impacting service for the sector.')
upLinkRateExtrapolatedBox = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 2, 54), Integer32()).setUnits('bps').setMaxAccess("readonly")
if mibBuilder.loadTexts: upLinkRateExtrapolatedBox.setStatus('current')
if mibBuilder.loadTexts: upLinkRateExtrapolatedBox.setDescription('Extrapolated Uplink Rate from an extrapolated link test.\n                            Extrapolated Link Test sends only a few packets over the link and extrapolates this out to what would happen on a full link test.\n                            This is an estimation of the throughput based upon the modulation, efficiency, and data slots available.\n                            It intended to provide a basic link test test without impacting service for the sector.')
linkTestLastRunTime = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 2, 55), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkTestLastRunTime.setStatus('current')
if mibBuilder.loadTexts: linkTestLastRunTime.setDescription('Time and Date when last link test ran.')
linkTestMissedFragDwnLink = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 2, 56), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkTestMissedFragDwnLink.setStatus('current')
if mibBuilder.loadTexts: linkTestMissedFragDwnLink.setDescription('Number of missed fragments during link test in the downlink.\n                            Only supported on 450 and 450i.')
linkTestMissedFragUpLink = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 2, 57), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkTestMissedFragUpLink.setStatus('current')
if mibBuilder.loadTexts: linkTestMissedFragUpLink.setDescription('Number of missed fragments during link test in the uplink.\n                            Only supported on 450 and 450i.')
linkTestNumPktTxActCnt = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 2, 58), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkTestNumPktTxActCnt.setStatus('current')
if mibBuilder.loadTexts: linkTestNumPktTxActCnt.setDescription('Number of actual packets transmitted during link test.')
linkTestNumPktTxExpCnt = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 2, 59), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkTestNumPktTxExpCnt.setStatus('current')
if mibBuilder.loadTexts: linkTestNumPktTxExpCnt.setDescription('Number of expected packets to be transmitted during link test.')
linkTestNumPktRxActCnt = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 2, 60), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkTestNumPktRxActCnt.setStatus('current')
if mibBuilder.loadTexts: linkTestNumPktRxActCnt.setDescription('Number of actual packets received during link test.')
linkTestNumPktRxExpCnt = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 2, 61), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkTestNumPktRxExpCnt.setStatus('current')
if mibBuilder.loadTexts: linkTestNumPktRxExpCnt.setDescription('Number of packets expected to be received during link test.')
linkTestMVCXmtFragsTotalDL = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkTestMVCXmtFragsTotalDL.setStatus('current')
if mibBuilder.loadTexts: linkTestMVCXmtFragsTotalDL.setDescription('Total Downlink Fragments Transmitted')
linkTestMVCRcvFragsTotalDL = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkTestMVCRcvFragsTotalDL.setStatus('current')
if mibBuilder.loadTexts: linkTestMVCRcvFragsTotalDL.setDescription('Total Downlink Fragments Received')
linkTestMVCThroughputTotalDL = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkTestMVCThroughputTotalDL.setStatus('current')
if mibBuilder.loadTexts: linkTestMVCThroughputTotalDL.setDescription('Total Downlink Throughput for Tested VCs')
linkTestMVCThroughputTotalUntestedVCsDL = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 5, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkTestMVCThroughputTotalUntestedVCsDL.setStatus('current')
if mibBuilder.loadTexts: linkTestMVCThroughputTotalUntestedVCsDL.setDescription('Total Downlink Throughput for Untested VCs.\n\t\t\t\t\t\t\tThis is the amount of user traffic that was transmitted to VCs during the test that were not part of the Link Test.')
linkTestMVCEfficiencyTotalDL = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 5, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkTestMVCEfficiencyTotalDL.setStatus('current')
if mibBuilder.loadTexts: linkTestMVCEfficiencyTotalDL.setDescription('Total Downlink Efficiency')
linkTestMVCSlotDistributionDL = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 5, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkTestMVCSlotDistributionDL.setStatus('current')
if mibBuilder.loadTexts: linkTestMVCSlotDistributionDL.setDescription('Downlink Slot Distribution.\n\t\t\t\t\t\t\tAverage group size per slot per frame represented as a percentage.\n\t\t\t\t\t\t\t450m only.')
whispBoxLinkTestMVCTable = MibTable((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 6), )
if mibBuilder.loadTexts: whispBoxLinkTestMVCTable.setStatus('current')
if mibBuilder.loadTexts: whispBoxLinkTestMVCTable.setDescription('Link Test with Multiple VC results.')
whispBoxLinkTestMVCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 6, 1), ).setIndexNames((0, "WHISP-BOX-MIBV2-MIB", "linkTestMVCVC"))
if mibBuilder.loadTexts: whispBoxLinkTestMVCEntry.setStatus('current')
if mibBuilder.loadTexts: whispBoxLinkTestMVCEntry.setDescription('Link Test with Multiple VC results.')
linkTestMVCVC = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkTestMVCVC.setStatus('current')
if mibBuilder.loadTexts: linkTestMVCVC.setDescription('VC')
linkTestMVCPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("low", 0), ("high", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkTestMVCPriority.setStatus('current')
if mibBuilder.loadTexts: linkTestMVCPriority.setDescription('VC Priority')
linkTestMVCXmtFragsDL = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkTestMVCXmtFragsDL.setStatus('current')
if mibBuilder.loadTexts: linkTestMVCXmtFragsDL.setDescription('Downlink Fragments Transmitted')
linkTestMVCRcvFragsDL = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkTestMVCRcvFragsDL.setStatus('current')
if mibBuilder.loadTexts: linkTestMVCRcvFragsDL.setDescription('Downlink Fragments Received')
linkTestMVCThroughputDL = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkTestMVCThroughputDL.setStatus('current')
if mibBuilder.loadTexts: linkTestMVCThroughputDL.setDescription('Downlink Throughput')
linkTestMVCEfficiencyDL = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkTestMVCEfficiencyDL.setStatus('current')
if mibBuilder.loadTexts: linkTestMVCEfficiencyDL.setDescription('Downlink Efficiency')
linkTestMVCSumimoModRateDL = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 6, 8))).clone(namedValues=NamedValues(("noSession", 0), ("rate1X", 1), ("rate2X", 2), ("rete3X", 3), ("rate4X", 4), ("rate6X", 6), ("rate8X", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkTestMVCSumimoModRateDL.setStatus('current')
if mibBuilder.loadTexts: linkTestMVCSumimoModRateDL.setDescription('Downlink SU-MIMO Modulation Transmit Rate.\n\t\t\t\t\t\t\t0 : No session\n                            1 : 1X QPSK MIMO-A\n                            2 : 2X 16-QAM MIMO-A or QPSK MIMO-B\n                            3 : 3X 64-QAM MIMO-A\n                            4 : 4X 256-QAM MIMO-A or 16-QAM MIMO-B\n                            6 : 6X 64-QAM MIMO-B\n                            8 : 8X 256-QAM MIMO-B')
linkTestMVCSumimoXmtModeDL = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 6, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("mimo-b", 0), ("mimo-a", 1), ("noSession", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkTestMVCSumimoXmtModeDL.setStatus('current')
if mibBuilder.loadTexts: linkTestMVCSumimoXmtModeDL.setDescription('Downlink SU-MIMO Transmit Mode.\n\t\t\t\t\t\t\t0 : MIMO-B\n                            1 : MIMO-A\n                            2 : No session')
linkTestMVCMumimoModRateDL = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 6, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 6, 8))).clone(namedValues=NamedValues(("invalid", 0), ("rate1X", 1), ("rate2X", 2), ("rete3X", 3), ("rate4X", 4), ("rate6X", 6), ("rate8X", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkTestMVCMumimoModRateDL.setStatus('current')
if mibBuilder.loadTexts: linkTestMVCMumimoModRateDL.setDescription('Downlink MU-MIMO Modulation Transmit Rate.\n\t\t\t\t\t\t\t450m only.\n\t\t\t\t\t\t\t0 : Invalid\n                            1 : 1X QPSK MIMO-A\n                            2 : 2X 16-QAM MIMO-A or QPSK MIMO-B\n                            3 : 3X 64-QAM MIMO-A\n                            4 : 4X 256-QAM MIMO-A or 16-QAM MIMO-B\n                            6 : 6X 64-QAM MIMO-B\n                            8 : 8X 256-QAM MIMO-B')
linkTestMVCMumimoXmtModeDL = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 6, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("mimo-b", 0), ("mimo-a", 1), ("invalid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkTestMVCMumimoXmtModeDL.setStatus('current')
if mibBuilder.loadTexts: linkTestMVCMumimoXmtModeDL.setDescription('Downlink MU-MIMO Transmit Mode.\n\t\t\t\t\t\t\t450m only.\n\t\t\t\t\t\t\t0 : MIMO-B\n                            1 : MIMO-A\n                            2 : Invalid')
linkTestMVCGroupingRatioDL = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 18, 6, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkTestMVCGroupingRatioDL.setStatus('current')
if mibBuilder.loadTexts: linkTestMVCGroupingRatioDL.setDescription('Downlink Grouping Ratio.\n\t\t\t\t\t\t\tThe percentage of time that a VC is grouped with other VCs to make a MU-MIMO group.\n\t\t\t\t\t\t\t450m only.')
certTableUserAuth = MibTable((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 19, 1), )
if mibBuilder.loadTexts: certTableUserAuth.setStatus('current')
if mibBuilder.loadTexts: certTableUserAuth.setDescription('The table of CA Certificates for User Auth on radio.')
certEntryUserAuth = MibTableRow((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 19, 1, 1), ).setIndexNames((0, "WHISP-BOX-MIBV2-MIB", "certIdx"))
if mibBuilder.loadTexts: certEntryUserAuth.setStatus('current')
if mibBuilder.loadTexts: certEntryUserAuth.setDescription('Entry of Certifcates.')
certIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 19, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: certIdx.setStatus('current')
if mibBuilder.loadTexts: certIdx.setDescription('User information table index.')
certStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 19, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("inactive", 0), ("active", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: certStatus.setStatus('current')
if mibBuilder.loadTexts: certStatus.setDescription('0: Inactive 1: Active')
certAction = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 19, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noop", 0), ("delete", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: certAction.setStatus('current')
if mibBuilder.loadTexts: certAction.setDescription('0: No Operation 1: Delete Certificate')
certDN = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 19, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: certDN.setStatus('current')
if mibBuilder.loadTexts: certDN.setDescription('Distinguished Name of Certificate')
whispBoxRFPhysicalRadios = MibTable((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 15, 1), )
if mibBuilder.loadTexts: whispBoxRFPhysicalRadios.setStatus('current')
if mibBuilder.loadTexts: whispBoxRFPhysicalRadios.setDescription('Radio information table.')
whispBoxRFPhysicalRadioEntry = MibTableRow((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 15, 1, 1), ).setIndexNames((0, "WHISP-BOX-MIBV2-MIB", "radioIndex"))
if mibBuilder.loadTexts: whispBoxRFPhysicalRadioEntry.setStatus('current')
if mibBuilder.loadTexts: whispBoxRFPhysicalRadioEntry.setDescription('Radio information table entry.')
radioIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 15, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioIndex.setStatus('current')
if mibBuilder.loadTexts: radioIndex.setDescription('Radio Index.')
radioType = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 15, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("fsk", 0), ("ofdm", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioType.setStatus('current')
if mibBuilder.loadTexts: radioType.setDescription('Indicates if the radio is FSK or OFDM.')
radioPaths = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 15, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioPaths.setStatus('current')
if mibBuilder.loadTexts: radioPaths.setDescription('Indicates number of paths.  For FSK or OFDM (non-MIMO), this is 1.\n\t\t\t\t\t\tFor MIMO, it can be greater (with a current maximum of 2).')
whispBoxRFPhysicalRadioPaths = MibTable((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 15, 2), )
if mibBuilder.loadTexts: whispBoxRFPhysicalRadioPaths.setStatus('current')
if mibBuilder.loadTexts: whispBoxRFPhysicalRadioPaths.setDescription('Radio path information table.')
whispBoxRFPhysicalRadioPathEntry = MibTableRow((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 15, 2, 1), ).setIndexNames((0, "WHISP-BOX-MIBV2-MIB", "radioIndex"), (0, "WHISP-BOX-MIBV2-MIB", "pathIndex"))
if mibBuilder.loadTexts: whispBoxRFPhysicalRadioPathEntry.setStatus('current')
if mibBuilder.loadTexts: whispBoxRFPhysicalRadioPathEntry.setDescription('Radio path table entry.')
pathIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 15, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathIndex.setStatus('current')
if mibBuilder.loadTexts: pathIndex.setDescription('Path Index.')
whispBoxRFPhysicalRadioFrequencies = MibTable((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 15, 3), )
if mibBuilder.loadTexts: whispBoxRFPhysicalRadioFrequencies.setStatus('current')
if mibBuilder.loadTexts: whispBoxRFPhysicalRadioFrequencies.setDescription('Available frequency information table.')
whispBoxRFPhysicalRadioFrequencyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 15, 3, 1), ).setIndexNames((0, "WHISP-BOX-MIBV2-MIB", "radioIndex"), (0, "WHISP-BOX-MIBV2-MIB", "frequency"))
if mibBuilder.loadTexts: whispBoxRFPhysicalRadioFrequencyEntry.setStatus('current')
if mibBuilder.loadTexts: whispBoxRFPhysicalRadioFrequencyEntry.setDescription('Available frequency table entry.')
frequency = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 15, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frequency.setStatus('current')
if mibBuilder.loadTexts: frequency.setDescription('Frequency.')
whispBoxRFConfigRadios = MibTable((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 16, 1), )
if mibBuilder.loadTexts: whispBoxRFConfigRadios.setStatus('current')
if mibBuilder.loadTexts: whispBoxRFConfigRadios.setDescription('Radio configuration table.')
whispBoxRFConfigRadioEntry = MibTableRow((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 16, 1, 1), ).setIndexNames((0, "WHISP-BOX-MIBV2-MIB", "radioConfigIndex"))
if mibBuilder.loadTexts: whispBoxRFConfigRadioEntry.setStatus('current')
if mibBuilder.loadTexts: whispBoxRFConfigRadioEntry.setDescription('Radio config table entry.')
radioConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 16, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioConfigIndex.setStatus('current')
if mibBuilder.loadTexts: radioConfigIndex.setDescription('Radio Config Index.')
radioFrequencyBand = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 16, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("band700", 0), ("band900", 1), ("band2400", 2), ("band3500", 3), ("band3700", 4), ("band4900", 5), ("band5100", 6), ("band5200", 7), ("band5400", 8), ("band5700", 9), ("band5800", 10), ("band5900", 11), ("band6050", 12), ("band3600", 13), ("band4959", 14), ("band3", 15)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioFrequencyBand.setStatus('current')
if mibBuilder.loadTexts: radioFrequencyBand.setDescription('Currently configured radio band.\n\t\t\t\t\t\t\tSet is Engineering use only.')
whispBoxBridgeTable = MibTable((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 4), )
if mibBuilder.loadTexts: whispBoxBridgeTable.setStatus('current')
if mibBuilder.loadTexts: whispBoxBridgeTable.setDescription('Bridge table.')
whispBoxBridgeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 4, 1), ).setIndexNames((0, "WHISP-BOX-MIBV2-MIB", "whispBridgeMacAddr"))
if mibBuilder.loadTexts: whispBoxBridgeEntry.setStatus('current')
if mibBuilder.loadTexts: whispBoxBridgeEntry.setDescription('Bridge entry.')
whispBridgeMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 4, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: whispBridgeMacAddr.setStatus('current')
if mibBuilder.loadTexts: whispBridgeMacAddr.setDescription('MAC Address of the registered entity.')
whispBridgeDesLuid = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 4, 1, 2), WhispLUID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: whispBridgeDesLuid.setStatus('current')
if mibBuilder.loadTexts: whispBridgeDesLuid.setDescription('This is the Local Unit Identifier assigned to\n            Subscriber Modems.')
whispBridgeAge = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: whispBridgeAge.setStatus('current')
if mibBuilder.loadTexts: whispBridgeAge.setDescription('Table entry last access age in minutes.')
whispBridgeExt = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: whispBridgeExt.setStatus('current')
if mibBuilder.loadTexts: whispBridgeExt.setDescription('Timeout extension flag for entries which also\n            reside in the PNA APR cache.')
whispBridgeHash = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: whispBridgeHash.setStatus('current')
if mibBuilder.loadTexts: whispBridgeHash.setDescription('Hash table array index.')
whispBridgeCAM = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: whispBridgeCAM.setStatus('obsolete')
if mibBuilder.loadTexts: whispBridgeCAM.setDescription('This entry is deprecated.')
whispVLANTable = MibTable((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 8), )
if mibBuilder.loadTexts: whispVLANTable.setStatus('current')
if mibBuilder.loadTexts: whispVLANTable.setDescription('VLAN member table.')
whispVLANEntry = MibTableRow((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 8, 1), ).setIndexNames((0, "WHISP-BOX-MIBV2-MIB", "whispVID"))
if mibBuilder.loadTexts: whispVLANEntry.setStatus('current')
if mibBuilder.loadTexts: whispVLANEntry.setDescription('VLAN entry.')
whispVID = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: whispVID.setStatus('current')
if mibBuilder.loadTexts: whispVID.setDescription('VLAN member ID.')
whispVType = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 8, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: whispVType.setStatus('current')
if mibBuilder.loadTexts: whispVType.setDescription('VLAN member type.')
whispVAge = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 8, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: whispVAge.setStatus('current')
if mibBuilder.loadTexts: whispVAge.setDescription('VLAN member age.')
whispVLANRemarkTable = MibTable((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 17), )
if mibBuilder.loadTexts: whispVLANRemarkTable.setStatus('current')
if mibBuilder.loadTexts: whispVLANRemarkTable.setDescription('Active VLAN Remarking table.')
whispVLANRemarkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 17, 1), ).setIndexNames((0, "WHISP-BOX-MIBV2-MIB", "sourceVID"))
if mibBuilder.loadTexts: whispVLANRemarkEntry.setStatus('current')
if mibBuilder.loadTexts: whispVLANRemarkEntry.setDescription('Remarking VLAN entry.')
sourceVID = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 17, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sourceVID.setStatus('current')
if mibBuilder.loadTexts: sourceVID.setDescription('Source VLAN ID.')
remarkVIDState = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 17, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remarkVIDState.setStatus('current')
if mibBuilder.loadTexts: remarkVIDState.setDescription('Remark VID State.')
remarkVID = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 17, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: remarkVID.setStatus('current')
if mibBuilder.loadTexts: remarkVID.setDescription('Remark VID.')
remarkPriorityState = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 17, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remarkPriorityState.setStatus('current')
if mibBuilder.loadTexts: remarkPriorityState.setDescription('Remark Priority State.')
remarkPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 17, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: remarkPriority.setStatus('current')
if mibBuilder.loadTexts: remarkPriority.setDescription('Remark Priority.')
whispUserTable = MibTable((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 10), )
if mibBuilder.loadTexts: whispUserTable.setStatus('current')
if mibBuilder.loadTexts: whispUserTable.setDescription('User information table.')
whispUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 10, 1), ).setIndexNames((0, "WHISP-BOX-MIBV2-MIB", "entryIndex"))
if mibBuilder.loadTexts: whispUserEntry.setStatus('current')
if mibBuilder.loadTexts: whispUserEntry.setDescription('User entry.')
entryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: entryIndex.setStatus('current')
if mibBuilder.loadTexts: entryIndex.setDescription('User information table index.')
userLoginName = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 10, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userLoginName.setStatus('current')
if mibBuilder.loadTexts: userLoginName.setDescription('User name.')
userPswd = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 10, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userPswd.setStatus('current')
if mibBuilder.loadTexts: userPswd.setDescription('User password.')
accessLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 10, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accessLevel.setStatus('current')
if mibBuilder.loadTexts: accessLevel.setDescription('User access level.')
loginStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 10, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loginStatus.setStatus('current')
if mibBuilder.loadTexts: loginStatus.setDescription('User current status.')
loginMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 10, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loginMethod.setStatus('current')
if mibBuilder.loadTexts: loginMethod.setDescription('User login method.')
sessionTime = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 10, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionTime.setStatus('current')
if mibBuilder.loadTexts: sessionTime.setDescription('Users logged in session time.')
whispLayer2NeighborTable = MibTable((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 11), )
if mibBuilder.loadTexts: whispLayer2NeighborTable.setStatus('current')
if mibBuilder.loadTexts: whispLayer2NeighborTable.setDescription('Neighbor information table.')
whispLayer2NeighborEntry = MibTableRow((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 11, 1), ).setIndexNames((0, "WHISP-BOX-MIBV2-MIB", "entryL2Index"))
if mibBuilder.loadTexts: whispLayer2NeighborEntry.setStatus('current')
if mibBuilder.loadTexts: whispLayer2NeighborEntry.setDescription('Neighbor Entry.')
entryL2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: entryL2Index.setStatus('current')
if mibBuilder.loadTexts: entryL2Index.setDescription('Neighbor information table index.')
neighborMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 11, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neighborMAC.setStatus('current')
if mibBuilder.loadTexts: neighborMAC.setDescription('Neighbor MAC.')
neighborIP = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 11, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neighborIP.setStatus('current')
if mibBuilder.loadTexts: neighborIP.setDescription('Neighbor IP.')
neighborSiteName = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 3, 11, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neighborSiteName.setStatus('current')
if mibBuilder.loadTexts: neighborSiteName.setDescription('Neighbor Site Name.')
mibBuilder.exportSymbols("WHISP-BOX-MIBV2-MIB", codePoint61=codePoint61, whispBoxEvntLog=whispBoxEvntLog, whispBoxSNMPv3=whispBoxSNMPv3, antPolarization=antPolarization, lan3DhcpRenew=lan3DhcpRenew, rfStatXmtMDataCnt=rfStatXmtMDataCnt, fecAuxStatLinkUptime=fecAuxStatLinkUptime, removeVlanMember=removeVlanMember, telnetStatus=telnetStatus, mac9VIDMapVid=mac9VIDMapVid, rfInDiscardsCount=rfInDiscardsCount, codePoint22=codePoint22, rfStatBadInSyncIDRcv=rfStatBadInSyncIDRcv, subnetMask8=subnetMask8, linkTestMVCRcvFragsTotalDL=linkTestMVCRcvFragsTotalDL, controlMessages=controlMessages, rfStatRcvBDataCnt=rfStatRcvBDataCnt, user2AuthPassword=user2AuthPassword, dhcpRfPublicGateway=dhcpRfPublicGateway, fecAuxStatLinkLost=fecAuxStatLinkLost, whispBoxNotifGroup=whispBoxNotifGroup, neighborIP=neighborIP, longitude=longitude, rfStatXmtLTResult=rfStatXmtLTResult, trapDomainNameAppend=trapDomainNameAppend, mac7VIDMapPriority=mac7VIDMapPriority, whispLayer2NeighborTableGroup=whispLayer2NeighborTableGroup, timedSpectrumAnalysisDurationBox=timedSpectrumAnalysisDurationBox, certStatus=certStatus, bridgeCbFecStatbtosscap=bridgeCbFecStatbtosscap, whispBoxConf=whispBoxConf, fecRxFifoNoBuf=fecRxFifoNoBuf, testLUIDBox=testLUIDBox, dnsPrimaryMgmtIP=dnsPrimaryMgmtIP, radioStatusSectorWeightsOff=radioStatusSectorWeightsOff, upLinkEffBox=upLinkEffBox, radioStatusAlarmReason=radioStatusAlarmReason, actDwnFragCountBox=actDwnFragCountBox, catalinaOpenLoopAttenTxCH1=catalinaOpenLoopAttenTxCH1, dhcpRfPublicSubnetMask=dhcpRfPublicSubnetMask, calibrationStatusBool=calibrationStatusBool, downLinkEffBox=downLinkEffBox, mac1VIDMapVid=mac1VIDMapVid, pppoeFilter=pppoeFilter, bhTimingMode=bhTimingMode, userDefinedPort3=userDefinedPort3, bitErrorsCorrected4xDwnLinkHorizontalBox=bitErrorsCorrected4xDwnLinkHorizontalBox, boxTemperatureF=boxTemperatureF, mac1VIDMapAddr=mac1VIDMapAddr, subnetMask4=subnetMask4, codePoint3=codePoint3, fecLargeFrame=fecLargeFrame, tftpStatus=tftpStatus, trapIP7=trapIP7, providerVID=providerVID, port1UDPFilter=port1UDPFilter, installationColorCode=installationColorCode, outSyncCount=outSyncCount, userP2Filter=userP2Filter, whispBoxSNMPv3Group=whispBoxSNMPv3Group, lan1DhcpRenew=lan1DhcpRenew, rfStatRcvCntlCnt=rfStatRcvCntlCnt, ftpPort=ftpPort, linkTestMVCMumimoXmtModeDL=linkTestMVCMumimoXmtModeDL, mac2VIDMapPriorityMode=mac2VIDMapPriorityMode, linkTestMissedFragDwnLink=linkTestMissedFragDwnLink, codePoint26=codePoint26, linkTestModeBox=linkTestModeBox, bitErrorsCorrected4xDwnLinkVerticalBox=bitErrorsCorrected4xDwnLinkVerticalBox, catalinaCurrDetSetpointTxCH2=catalinaCurrDetSetpointTxCH2, whispBoxConfig=whispBoxConfig, bridgeCbRFStatbin=bridgeCbRFStatbin, regionCode=regionCode, rfStatPLLOutOfLockCnt=rfStatPLLOutOfLockCnt, rfStatRangeCapEnf=rfStatRangeCapEnf, natDhcpStatus=natDhcpStatus, region=region, cyclicPrefix=cyclicPrefix, bootpcFilter=bootpcFilter, PYSNMP_MODULE_ID=whispBoxLevelMibModule, deleteRemarkPriority=deleteRemarkPriority, whispBoxRFPhysicalRadioEntry=whispBoxRFPhysicalRadioEntry, whispUserEntry=whispUserEntry, user1Enable=user1Enable, updateStatus=updateStatus, neighborSiteName=neighborSiteName, trap6=trap6, port2UDPFilter=port2UDPFilter, mac6VIDMapPriority=mac6VIDMapPriority, extFilterDelay=extFilterDelay, resetPoEAux=resetPoEAux, fragments2xUpLinkHorizontalBox=fragments2xUpLinkHorizontalBox, port2TCPFilter=port2TCPFilter, codePoint11=codePoint11, radioConfigIndex=radioConfigIndex, rfStatUnkwnFeatBcnRcvCnt=rfStatUnkwnFeatBcnRcvCnt, userName2=userName2, ism=ism, fecCarSenseLost=fecCarSenseLost, soundingStatAvgRequestInterval=soundingStatAvgRequestInterval, radioPaths=radioPaths, whispBoxRFPhysicalRadioFrequencyEntry=whispBoxRFPhysicalRadioFrequencyEntry, allOthersFilter=allOthersFilter, codePoint4=codePoint4, userP1Filter=userP1Filter, trapIP4=trapIP4, soundingStatMaxRequestInterval=soundingStatMaxRequestInterval, codePoint5=codePoint5, whispVLANEntry=whispVLANEntry, fecOutDiscardsCount=fecOutDiscardsCount, dnsIpState=dnsIpState, linkTestForceModulationBox=linkTestForceModulationBox, fragments1xUpLinkVerticalBox=fragments1xUpLinkVerticalBox, pathIndex=pathIndex, whispBoxCPVar=whispBoxCPVar, rwUserEnable=rwUserEnable, syslogServerPort=syslogServerPort, mngtIP7=mngtIP7, port1TCPFilter=port1TCPFilter, trapIP5=trapIP5, dataScramblingMethod=dataScramblingMethod, dhcpLanGateway=dhcpLanGateway, catalinaTargetGainRxCH1=catalinaTargetGainRxCH1, codePoint32=codePoint32, height=height, calibrationStatusBox=calibrationStatusBox, linkTestMVCXmtFragsTotalDL=linkTestMVCXmtFragsTotalDL, linkTestNumPktTxActCnt=linkTestNumPktTxActCnt, bridgeCbFecStatfloods=bridgeCbFecStatfloods, whispBoxControls=whispBoxControls, whispBoxBTGroup=whispBoxBTGroup, syslogMinLevel=syslogMinLevel, regionOtherRegulatory=regionOtherRegulatory, mac8VIDMapVid=mac8VIDMapVid, pingWdogIP=pingWdogIP, maxUpLinkIndexBox=maxUpLinkIndexBox, fragments3xDwnLinkVerticalBox=fragments3xDwnLinkVerticalBox, fragments4xDwnLinkHorizontalBox=fragments4xDwnLinkHorizontalBox, mngtIP=mngtIP, catalinaOpenLoopAttenTxCH2=catalinaOpenLoopAttenTxCH2, whispBoxRFPhysical=whispBoxRFPhysical, signalToNoiseRatioUpLinkHorizontalBox=signalToNoiseRatioUpLinkHorizontalBox, codePoint27=codePoint27, userGroup1=userGroup1, mngtIP3=mngtIP3, bridgeCbEthAuxStatutosscap=bridgeCbEthAuxStatutosscap, allowVIDAccess=allowVIDAccess, catalinaGainReductionRxCH2=catalinaGainReductionRxCH2, user2Group=user2Group, whispBoxEvent=whispBoxEvent, bitErrorsCorrected3xDwnLinkHorizontalBox=bitErrorsCorrected3xDwnLinkHorizontalBox, trapIP10=trapIP10, codePoint43=codePoint43, boxTemperatureC=boxTemperatureC, remarkSrcVID=remarkSrcVID, siteInfoViewable=siteInfoViewable, subnetMask5=subnetMask5, soundingStatErrorCount=soundingStatErrorCount, subnetMask3=subnetMask3, codePoint9=codePoint9, codePoint21=codePoint21, fecAuxOutErrorsCount=fecAuxOutErrorsCount, rwPrivPassword=rwPrivPassword, productTypeName=productTypeName, rfStatInSyncCount=rfStatInSyncCount, fragments4xUpLinkHorizontalBox=fragments4xUpLinkHorizontalBox, codePoint25=codePoint25, linkTestMVCVC=linkTestMVCVC, boxLan1DHCPClientEvent=boxLan1DHCPClientEvent, syslogStatDropped=syslogStatDropped, trapIP2=trapIP2, linkTestMissedFragUpLink=linkTestMissedFragUpLink, webAutoUpdate=webAutoUpdate, bridgeCbErrStatAPFecQSend=bridgeCbErrStatAPFecQSend, bootpsFilter=bootpsFilter, codePoint46=codePoint46, codePoint54=codePoint54, whispVLANRemarkTable=whispVLANRemarkTable, actUpLinkIndexBox=actUpLinkIndexBox, rfStatUnderrunCount=rfStatUnderrunCount, fecAuxLargeFrame=fecAuxLargeFrame, activeTxPowerHdths=activeTxPowerHdths, signalToNoiseRatioUpLinkVerticalBox=signalToNoiseRatioUpLinkVerticalBox, syslogServerAddr=syslogServerAddr, bandwidth=bandwidth, activeTxPowerStr=activeTxPowerStr, actDwnLinkIndexBox=actDwnLinkIndexBox, fragments3xDwnLinkHorizontalBox=fragments3xDwnLinkHorizontalBox, codePoint14=codePoint14, whispBoxRFConfigRadioEntry=whispBoxRFConfigRadioEntry, snmpv3AuthProt=snmpv3AuthProt, linkTestMVCRcvFragsDL=linkTestMVCRcvFragsDL, rfStatXmtUDataCnt=rfStatXmtUDataCnt, loginStatus=loginStatus, userPswd=userPswd, trap7=trap7, regionSouthAmerica=regionSouthAmerica, mac8VIDMapPriorityMode=mac8VIDMapPriorityMode, mac10VIDMapVid=mac10VIDMapVid, bridgeCbRFStatbtoss=bridgeCbRFStatbtoss, codePoint30=codePoint30, codePoint63=codePoint63, whispBoxGroups=whispBoxGroups, whispBoxControlGroup=whispBoxControlGroup, whispBridgeCAM=whispBridgeCAM, rfOutErrorsCount=rfOutErrorsCount, mac10VIDMapPriority=mac10VIDMapPriority, mac4VIDMapAddr=mac4VIDMapAddr, linkTestStatusBox=linkTestStatusBox, mngtIP8=mngtIP8, fecAuxInDiscardsCount=fecAuxInDiscardsCount, hardwareVersion=hardwareVersion, linkTestActionBox=linkTestActionBox, linkTestFloodModeBox=linkTestFloodModeBox, codePoint41=codePoint41, whispBoxLevelMibModule=whispBoxLevelMibModule, transmitterOP=transmitterOP, numDFSDetections=numDFSDetections, framePeriodCurrent=framePeriodCurrent, ipv6snmpFilter=ipv6snmpFilter, rfOutDiscardsCount=rfOutDiscardsCount, cnMaestroStatus=cnMaestroStatus, removeCustomFreqList=removeCustomFreqList, radioStatusAlarmEvent=radioStatusAlarmEvent, snmpv3EngineId=snmpv3EngineId, swVersion=swVersion, fpgaCompileInfo=fpgaCompileInfo, maxDwnLinkIndexBox=maxDwnLinkIndexBox, forceReassessment=forceReassessment, rwAuthPassword=rwAuthPassword, radioType=radioType, mac1VIDMapPriority=mac1VIDMapPriority, codePoint42=codePoint42, rfStatRSSIOutOfRange=rfStatRSSIOutOfRange, bridgeCbErrStatNI1QSend=bridgeCbErrStatNI1QSend, regionEurope=regionEurope, regionAsia=regionAsia, codePoint35=codePoint35, simulatedAirDelay=simulatedAirDelay, linkTestMVCSlotDistributionDL=linkTestMVCSlotDistributionDL, rfStatOutSyncCount=rfStatOutSyncCount, fecEnable=fecEnable, certTableUserAuth=certTableUserAuth, signalToNoiseRatioDownLinkHorizontalBox=signalToNoiseRatioDownLinkHorizontalBox, dnsAlternateMgmtIP=dnsAlternateMgmtIP, bitErrorsCorrected4xUpLinkHorizontalBox=bitErrorsCorrected4xUpLinkHorizontalBox, codePoint55=codePoint55, fragments1xDwnLinkVerticalBox=fragments1xDwnLinkVerticalBox, nearFieldOperation=nearFieldOperation, platformVer=platformVer, radioMSN=radioMSN, snmpv3PrivProt=snmpv3PrivProt, bitErrorsCorrected3xUpLinkHorizontalBox=bitErrorsCorrected3xUpLinkHorizontalBox, catalinaTargetDetSetpointTxCH2=catalinaTargetDetSetpointTxCH2)
mibBuilder.exportSymbols("WHISP-BOX-MIBV2-MIB", codePoint13=codePoint13, trapIP8=trapIP8, neighborMAC=neighborMAC, fecEthBusErr=fecEthBusErr, ipv6bootpcFilter=ipv6bootpcFilter, radioFatalErrorLogged=radioFatalErrorLogged, snmpv3SecLvl=snmpv3SecLvl, subnetMask6=subnetMask6, webAccess=webAccess, rfStatnonLiteBcnRcvCnt=rfStatnonLiteBcnRcvCnt, rfStatXmtBDataCnt=rfStatXmtBDataCnt, boxTemperature=boxTemperature, codePoint1=codePoint1, whispBoxStatus=whispBoxStatus, whispBoxVLANRemarkTableGroup=whispBoxVLANRemarkTableGroup, accessLevel=accessLevel, bitErrorsCorrected2xDwnLinkHorizontalBox=bitErrorsCorrected2xDwnLinkHorizontalBox, rfStatBeaconVerMismatchCnt=rfStatBeaconVerMismatchCnt, bridgeCbErrStatNI2QSend=bridgeCbErrStatNI2QSend, mac2VIDMapPriority=mac2VIDMapPriority, bitErrorsCorrected1xUpLinkVerticalBox=bitErrorsCorrected1xUpLinkVerticalBox, rfStatRcvLTStart=rfStatRcvLTStart, fecAuxOutDiscardsCount=fecAuxOutDiscardsCount, whispBoxRFPhysicalRadioPathEntry=whispBoxRFPhysicalRadioPathEntry, lan3DhcpRelease=lan3DhcpRelease, whispBoxP11FPGAType=whispBoxP11FPGAType, mngtIP6=mngtIP6, fecTxUnderrun=fecTxUnderrun, fragments4xUpLinkVerticalBox=fragments4xUpLinkVerticalBox, whispBoxLinkTestMVCResult=whispBoxLinkTestMVCResult, mac10VIDMapAddr=mac10VIDMapAddr, roUserName=roUserName, portVID=portVID, certIdx=certIdx, upLinkRateBox=upLinkRateBox, whispFeatureKeyOrigin=whispFeatureKeyOrigin, catalinaTargetGainRxCH2=catalinaTargetGainRxCH2, mac7VIDMapPriorityMode=mac7VIDMapPriorityMode, bitErrorsCorrected3xUpLinkVerticalBox=bitErrorsCorrected3xUpLinkVerticalBox, catalinaLoAttenRxCH2=catalinaLoAttenRxCH2, boxDeviceTypeID=boxDeviceTypeID, whispBoxLinkTestMVCTable=whispBoxLinkTestMVCTable, whispUsrAuth=whispUsrAuth, mac3VIDMapPriority=mac3VIDMapPriority, bridgeCbRFStatfloods=bridgeCbRFStatfloods, rwUserName=rwUserName, lanDhcpState=lanDhcpState, user3Enable=user3Enable, bridgeCbRFStatbtosscap=bridgeCbRFStatbtosscap, radioStatusPowerDetectorInactive=radioStatusPowerDetectorInactive, codePoint33=codePoint33, rfStatUnsupFeatBcnRcvCnt=rfStatUnsupFeatBcnRcvCnt, fecCRCError=fecCRCError, mac4VIDMapPriorityMode=mac4VIDMapPriorityMode, mngtIP2=mngtIP2, frequency=frequency, rfOutDiscardsOverloadCount=rfOutDiscardsOverloadCount, linkTestWithDualPathBox=linkTestWithDualPathBox, arpFilter=arpFilter, bridgeCbEthAuxStatbout=bridgeCbEthAuxStatbout, fecStatUnderSizedToss=fecStatUnderSizedToss, whispWebUserAccessMode=whispWebUserAccessMode, httpsPort=httpsPort, bridgeCbFecStatutoss=bridgeCbFecStatutoss, user1PrivPassword=user1PrivPassword, rfPublicDhcpStatus=rfPublicDhcpStatus, rfStatRcvMDataCnt=rfStatRcvMDataCnt, twoXRate=twoXRate, addRemarkVID=addRemarkVID, codePoint38=codePoint38, codePoint0=codePoint0, poeT2Classification=poeT2Classification, codePoint19=codePoint19, mac6VIDMapAddr=mac6VIDMapAddr, bhvlanEnable=bhvlanEnable, cnMaestroEnable=cnMaestroEnable, codePoint53=codePoint53, codePoint58=codePoint58, linkTestNumPktRxExpCnt=linkTestNumPktRxExpCnt, codePoint48=codePoint48, linkTestMVCSumimoModRateDL=linkTestMVCSumimoModRateDL, httpPort=httpPort, mac1VIDMapPriorityMode=mac1VIDMapPriorityMode, inSyncCount=inSyncCount, spectrumAnalysisActionBox=spectrumAnalysisActionBox, allowRejectThenLocal=allowRejectThenLocal, rfStatRcvLTResult=rfStatRcvLTResult, codePoint56=codePoint56, codePoint62=codePoint62, managementVID=managementVID, subnetMask2=subnetMask2, codePoint39=codePoint39, whispBoxLinkTestGroup=whispBoxLinkTestGroup, userLoginName=userLoginName, boxDeviceType=boxDeviceType, rfStatBadBcastCtlCnt=rfStatBadBcastCtlCnt, aggregateBandwidthCap=aggregateBandwidthCap, radioIndex=radioIndex, bridgeCbRFStatutosscap=bridgeCbRFStatutosscap, defaultIPAccessEnable=defaultIPAccessEnable, vcDepth=vcDepth, camID=camID, soundingStatResponseCount=soundingStatResponseCount, certEntryUserAuth=certEntryUserAuth, userDefinedPort1=userDefinedPort1, expDwnFragCountBox=expDwnFragCountBox, addRemarkPriority=addRemarkPriority, snmpTrapPort=snmpTrapPort, whispVLANRemarkEntry=whispVLANRemarkEntry, mac2VIDMapVid=mac2VIDMapVid, catalinaGainRxCH1=catalinaGainRxCH1, trap5=trap5, fecInErrorsCount=fecInErrorsCount, user2Enable=user2Enable, mngtIP9=mngtIP9, bridgeCbFecStatuin=bridgeCbFecStatuin, whispBoxP11Personality=whispBoxP11Personality, linkTestSMRestriction=linkTestSMRestriction, whispBoxCPTableGroup=whispBoxCPTableGroup, catalinaCurrDetReadPowerOnTxCH1=catalinaCurrDetReadPowerOnTxCH1, fecStatLinkDetected=fecStatLinkDetected, codePoint29=codePoint29, channelBandwidth=channelBandwidth, enable8023linkBox=enable8023linkBox, bitErrorsCorrected1xUpLinkHorizontalBox=bitErrorsCorrected1xUpLinkHorizontalBox, entryL2Index=entryL2Index, bridgeCbEthAuxStatutoss=bridgeCbEthAuxStatutoss, addVlanMember=addVlanMember, removeCustomFreqMimo=removeCustomFreqMimo, codePoint59=codePoint59, addCustomFreqMimo=addCustomFreqMimo, trap1=trap1, bridgeCbRFStatutoss=bridgeCbRFStatutoss, colorCode=colorCode, fpgaBuildDate=fpgaBuildDate, textSecurityBanner=textSecurityBanner, catalinaCurrDetReadRefTxCH2=catalinaCurrDetReadRefTxCH2, fecAuxTxUnderrun=fecAuxTxUnderrun, mac5VIDMapAddr=mac5VIDMapAddr, linkTestVCListBox=linkTestVCListBox, cnMaestroUrl=cnMaestroUrl, whispBridgeAge=whispBridgeAge, user3AuthPassword=user3AuthPassword, soundingStatRequestsDropped=soundingStatRequestsDropped, mac6VIDMapPriorityMode=mac6VIDMapPriorityMode, fecNoCarrier=fecNoCarrier, linkTestMVCMumimoModRateDL=linkTestMVCMumimoModRateDL, daVersion=daVersion, pingWdogRbtCnt=pingWdogRbtCnt, trap10=trap10, apSmMode=apSmMode, catalinaTargetDetSetpointTxCH1=catalinaTargetDetSetpointTxCH1, whispBoxLinkTestResult=whispBoxLinkTestResult, displayOnlyAccess=displayOnlyAccess, fecTxHbErr=fecTxHbErr, fecRxOverrun=fecRxOverrun, bridgeCbFecStatbtoss=bridgeCbFecStatbtoss, bridgeCbErrStatApRfQSend=bridgeCbErrStatApRfQSend, allOtherIpv6Filter=allOtherIpv6Filter, trap9=trap9, platformInfo=platformInfo, whispBoxRFConfig=whispBoxRFConfig, sessionTimeout=sessionTimeout, etherLinkStatus=etherLinkStatus, setDefaultPlug=setDefaultPlug, receiveQualityDebug=receiveQualityDebug, bridgeCbErrStatSendMsg=bridgeCbErrStatSendMsg, fecAuxRxOverrun=fecAuxRxOverrun, updateDevice=updateDevice, codePoint8=codePoint8, boxPoEType2PowerNotPresent=boxPoEType2PowerNotPresent, vlanAcceptQinQFrames=vlanAcceptQinQFrames, nearFieldOperationActive=nearFieldOperationActive, whispBoxSoftwareVer=whispBoxSoftwareVer, managementVIDPriority=managementVIDPriority, numLBTDetections=numLBTDetections, fecRxBabErr=fecRxBabErr, fragments3xUpLinkVerticalBox=fragments3xUpLinkVerticalBox, whispBoxUserTableGroup=whispBoxUserTableGroup, codePoint6=codePoint6, allIpv6Filter=allIpv6Filter, whispBoxRFPhysicalRadioFrequencies=whispBoxRFPhysicalRadioFrequencies, downLinkRateExtrapolatedBox=downLinkRateExtrapolatedBox, natDhcpRelease=natDhcpRelease, rfStatXmtCntlCnt=rfStatXmtCntlCnt, linkTestMumimoBox=linkTestMumimoBox, rfStatTempOutOfRange=rfStatTempOutOfRange, bridgeCbFecStatuout=bridgeCbFecStatuout, codePoint31=codePoint31, rfInErrorsCount=rfInErrorsCount, poeT2Status=poeT2Status, linkTestSNRCalculationBox=linkTestSNRCalculationBox, rfStatTxCalFailCnt=rfStatTxCalFailCnt, certDN=certDN, bridgeEnable=bridgeEnable, linkTestMVCThroughputDL=linkTestMVCThroughputDL, mac7VIDMapAddr=mac7VIDMapAddr, catalinaCurrDetReadPowerOnTxCH2=catalinaCurrDetReadPowerOnTxCH2, tcpAckPriority=tcpAckPriority, linkTestMVCEfficiencyTotalDL=linkTestMVCEfficiencyTotalDL, pldVersion=pldVersion, linkTestNumPktBox=linkTestNumPktBox, codePoint60=codePoint60, radioStatusTrackingFailure=radioStatusTrackingFailure, antennaGain=antennaGain, mac3VIDMapVid=mac3VIDMapVid, russiaRegion=russiaRegion, fecRuntFrame=fecRuntFrame, ftpStatus=ftpStatus, importConfigFile=importConfigFile, expUpFragCountBox=expUpFragCountBox, packetFilterDirection=packetFilterDirection, prioritySelect=prioritySelect, whispUserAuthSecurity=whispUserAuthSecurity, managementVIDPriorityMode=managementVIDPriorityMode, linkTestNumPktTxExpCnt=linkTestNumPktTxExpCnt, codePoint45=codePoint45, actUpFragCountBox=actUpFragCountBox, enableSecurityBanner=enableSecurityBanner, userMode=userMode, bridgeEntryTimeout=bridgeEntryTimeout, snrCalculation=snrCalculation, linkTestMVCThroughputTotalDL=linkTestMVCThroughputTotalDL, fecAuxRetransLimitExp=fecAuxRetransLimitExp, powerControl=powerControl, ipv6bootpsFilter=ipv6bootpsFilter, setDefaults=setDefaults, saveFlash=saveFlash, codePoint10=codePoint10, mac3VIDMapPriorityMode=mac3VIDMapPriorityMode, radioFrequencyBand=radioFrequencyBand, userAccessLevel=userAccessLevel, linkTestDirectionBox=linkTestDirectionBox, whispBoxFPGAVer=whispBoxFPGAVer, interleave=interleave, natDhcpRenew=natDhcpRenew, codePoint15=codePoint15, codePoint51=codePoint51, whispBoxRFPhysicalRadioPaths=whispBoxRFPhysicalRadioPaths, linkTestMVCEfficiencyDL=linkTestMVCEfficiencyDL, mac2VIDMapAddr=mac2VIDMapAddr, whispUserTable=whispUserTable, numberCustomFreq=numberCustomFreq, linkTestMVCGroupingRatioDL=linkTestMVCGroupingRatioDL, codePoint34=codePoint34, bitErrorsCorrected2xUpLinkVerticalBox=bitErrorsCorrected2xUpLinkVerticalBox, trapIP9=trapIP9, whispBoxPoEEvent=whispBoxPoEEvent, soundingStatResponsesSuppressed=soundingStatResponsesSuppressed, boardModel=boardModel, mac5VIDMapPriorityMode=mac5VIDMapPriorityMode, mac4VIDMapVid=mac4VIDMapVid, upLinkRateExtrapolatedBox=upLinkRateExtrapolatedBox, rfStatRcvCorruptDataCount=rfStatRcvCorruptDataCount)
mibBuilder.exportSymbols("WHISP-BOX-MIBV2-MIB", radioStatusCatQuadCalFail=radioStatusCatQuadCalFail, nearFieldRange=nearFieldRange, rfStatRcvCorruptControlCount=rfStatRcvCorruptControlCount, codePoint52=codePoint52, userName=userName, linkTestPktLengthBox=linkTestPktLengthBox, mac6VIDMapVid=mac6VIDMapVid, subnetMask7=subnetMask7, changeUsrPwd=changeUsrPwd, codePoint12=codePoint12, rfInErrorsCountExt=rfInErrorsCountExt, pppoeCtlPriority=pppoeCtlPriority, ethernetPortSelection=ethernetPortSelection, codePoint44=codePoint44, bitErrorsCorrected2xUpLinkHorizontalBox=bitErrorsCorrected2xUpLinkHorizontalBox, user1AuthPassword=user1AuthPassword, ipv6MultFilter=ipv6MultFilter, bridgeCbRFStatbout=bridgeCbRFStatbout, radioStatusRxBeamFormingOff=radioStatusRxBeamFormingOff, entryIndex=entryIndex, codePoint20=codePoint20, codePoint57=codePoint57, fecOutErrorsCount=fecOutErrorsCount, whispBoxLinkTestMVCEntry=whispBoxLinkTestMVCEntry, pass2Status=pass2Status, ipv6smbFilter=ipv6smbFilter, bridgeCbEthAuxStatuin=bridgeCbEthAuxStatuin, whispBoxDNS=whispBoxDNS, snmpv3TrapEnable=snmpv3TrapEnable, linkTestMVCThroughputTotalUntestedVCsDL=linkTestMVCThroughputTotalUntestedVCsDL, linkNegoSpeed=linkNegoSpeed, fecAuxRuntFrame=fecAuxRuntFrame, snmpMibPerm=snmpMibPerm, mngtIP5=mngtIP5, snmpFilter=snmpFilter, fragments2xDwnLinkVerticalBox=fragments2xDwnLinkVerticalBox, fecRetransLimitExp=fecRetransLimitExp, rxOverrunPkts=rxOverrunPkts, codePoint2=codePoint2, userName1=userName1, whispBridgeDesLuid=whispBridgeDesLuid, fecAuxCarSenseLost=fecAuxCarSenseLost, mac5VIDMapVid=mac5VIDMapVid, bitErrorsCorrected1xDwnLinkVerticalBox=bitErrorsCorrected1xDwnLinkVerticalBox, port3UDPFilter=port3UDPFilter, dhcpRfPublicIp=dhcpRfPublicIp, bridgeCbFecStatbin=bridgeCbFecStatbin, catalinaAttenTxCH2=catalinaAttenTxCH2, addCustomFreqList=addCustomFreqList, scheduling=scheduling, rfStatOverrunCount=rfStatOverrunCount, mac10VIDMapPriorityMode=mac10VIDMapPriorityMode, bridgeCbFecStatutosscap=bridgeCbFecStatutosscap, pingWdogEnable=pingWdogEnable, codePoint16=codePoint16, bridgeCbEthAuxStatbtoss=bridgeCbEthAuxStatbtoss, rfStatRcvUDataCnt=rfStatRcvUDataCnt, remarkPriorityState=remarkPriorityState, trapIP6=trapIP6, codePoint49=codePoint49, allIpv4Filter=allIpv4Filter, codePoint50=codePoint50, radioStatusTransmitControlOverridden=radioStatusTransmitControlOverridden, eirp=eirp, bitErrorsCorrected3xDwnLinkVerticalBox=bitErrorsCorrected3xDwnLinkVerticalBox, rfOutDiscardsCountExt=rfOutDiscardsCountExt, signalToNoiseRatioDownLinkVerticalBox=signalToNoiseRatioDownLinkVerticalBox, mac7VIDMapVid=mac7VIDMapVid, regionAfrica=regionAfrica, mac9VIDMapPriorityMode=mac9VIDMapPriorityMode, linkTestMVCXmtFragsDL=linkTestMVCXmtFragsDL, codePointSelect=codePointSelect, catalinaGainReductionRxCH1=catalinaGainReductionRxCH1, dhcpLanSubnetMask=dhcpLanSubnetMask, catalinaLoAttenRxCH1=catalinaLoAttenRxCH1, rfOutErrorsCountExt=rfOutErrorsCountExt, trap2=trap2, whispBoxBoot=whispBoxBoot, bridgeCbEthAuxStatbin=bridgeCbEthAuxStatbin, deleteUser=deleteUser, fecAuxStatLinkDetected=fecAuxStatLinkDetected, ip4MultFilter=ip4MultFilter, bitErrorsCorrected1xDwnLinkHorizontalBox=bitErrorsCorrected1xDwnLinkHorizontalBox, catalinaCurrDetReadRefTxCH1=catalinaCurrDetReadRefTxCH1, whispRegStatusBox=whispRegStatusBox, clearEventLog=clearEventLog, whispBoxLinkTestConfig=whispBoxLinkTestConfig, whispVType=whispVType, mimoRateAdaptAlgorithm=mimoRateAdaptAlgorithm, certAction=certAction, trap3=trap3, sourceVID=sourceVID, fragments4xDwnLinkVerticalBox=fragments4xDwnLinkVerticalBox, exportConfigFile=exportConfigFile, fragments2xUpLinkVerticalBox=fragments2xUpLinkVerticalBox, camAccID=camAccID, vlanMemberSource=vlanMemberSource, mac3VIDMapAddr=mac3VIDMapAddr, packetOverloadCounter=packetOverloadCounter, linkTestMVCSumimoXmtModeDL=linkTestMVCSumimoXmtModeDL, testDurationBox=testDurationBox, pingWdogInterval=pingWdogInterval, soundingStatVersionMismatch=soundingStatVersionMismatch, codePoint24=codePoint24, dnsMgmtDomainName=dnsMgmtDomainName, mngtIP10=mngtIP10, fecInDiscardsCount=fecInDiscardsCount, whispBoxBridgeEntry=whispBoxBridgeEntry, vlanPortType=vlanPortType, whispBridgeExt=whispBridgeExt, agingTimeout=agingTimeout, radioRateAdapt=radioRateAdapt, codePoint40=codePoint40, forceReassessmentActive=forceReassessmentActive, hwsCompatibility=hwsCompatibility, userPassword=userPassword, fecStatLinkUptime=fecStatLinkUptime, fragments1xUpLinkHorizontalBox=fragments1xUpLinkHorizontalBox, codePoint28=codePoint28, ethernetLinkSpeedSfp=ethernetLinkSpeedSfp, user3Group=user3Group, trapIP1=trapIP1, mac9VIDMapAddr=mac9VIDMapAddr, lldpBroadcastEnable=lldpBroadcastEnable, subnetMask=subnetMask, bridgeCbRFStatuout=bridgeCbRFStatuout, poeAuxEnable=poeAuxEnable, clearBERStats=clearBERStats, codePoint36=codePoint36, catalinaGainRxCH2=catalinaGainRxCH2, bhModulation=bhModulation, whispBoxBridgeTable=whispBoxBridgeTable, codePoint37=codePoint37, sessionTime=sessionTime, codePoint17=codePoint17, bridgeCbErrStatBridgeFull=bridgeCbErrStatBridgeFull, radioEngKeyed=radioEngKeyed, dynamicLearning=dynamicLearning, mac5VIDMapPriority=mac5VIDMapPriority, codePoint23=codePoint23, soundingStatRequestCount=soundingStatRequestCount, whispBoxDHCPClientEvent=whispBoxDHCPClientEvent, whispBoxRFConfigRadios=whispBoxRFConfigRadios, atexHazlocPowerLimit=atexHazlocPowerLimit, allowColocation=allowColocation, radioStatusAlarm=radioStatusAlarm, port3TCPFilter=port3TCPFilter, whispVID=whispVID, boxFrequency=boxFrequency, roAuthPassword=roAuthPassword, snmpv2cEnable=snmpv2cEnable, dhcpLanIp=dhcpLanIp, allOtherIpFilter=allOtherIpFilter, whispBoxRFPhysicalRadios=whispBoxRFPhysicalRadios, whispLayer2NeighborEntry=whispLayer2NeighborEntry, fecInDiscardsOverloadCount=fecInDiscardsOverloadCount, boxEncryption=boxEncryption, ethernetLinkSpeed=ethernetLinkSpeed, platformType=platformType, bridgeCbEthAuxStatfloods=bridgeCbEthAuxStatfloods, linkTestLUIDBox=linkTestLUIDBox, fecLateCollision=fecLateCollision, lanDhcpStatus=lanDhcpStatus, fragments1xDwnLinkHorizontalBox=fragments1xDwnLinkHorizontalBox, antType=antType, frameType=frameType, mngtIP4=mngtIP4, whispLayer2NeighborTable=whispLayer2NeighborTable, bridgeCbEthAuxStatuout=bridgeCbEthAuxStatuout, catalinaAttenTxCH1=catalinaAttenTxCH1, codePoint47=codePoint47, auxPortEnable=auxPortEnable, largeVCQ=largeVCQ, user3PrivPassword=user3PrivPassword, remarkVID=remarkVID, fullAccess=fullAccess, roPrivPassword=roPrivPassword, bridgeCbEthAuxStatbtosscap=bridgeCbEthAuxStatbtosscap, encryptionConfig=encryptionConfig, apType=apType, txCalFailure=txCalFailure, userDefinedPort2=userDefinedPort2, whispBridgeTbFree=whispBridgeTbFree, linkTestLastRunTime=linkTestLastRunTime, catalinaCurrDetSetpointTxCH1=catalinaCurrDetSetpointTxCH1, whispBoxVLANTableGroup=whispBoxVLANTableGroup, fecAuxLateCollision=fecAuxLateCollision, codePoint18=codePoint18, acceptSecurityBanner=acceptSecurityBanner, gpsInput=gpsInput, fecAuxCRCError=fecAuxCRCError, subnetMask10=subnetMask10, fragments3xUpLinkHorizontalBox=fragments3xUpLinkHorizontalBox, rfStatRcvLTStartHS=rfStatRcvLTStartHS, user2PrivPassword=user2PrivPassword, mac8VIDMapAddr=mac8VIDMapAddr, pass1Status=pass1Status, pllOutLockCount=pllOutLockCount, soundingStatRequestsIgnored=soundingStatRequestsIgnored, fecAuxInErrorsCount=fecAuxInErrorsCount, whispBridgeHash=whispBridgeHash, remarkPriority=remarkPriority, rfInDiscardsCountExt=rfInDiscardsCountExt, codePoint7=codePoint7, userP3Filter=userP3Filter, rebootIfRequired=rebootIfRequired, downLinkRateBox=downLinkRateBox, priorityPrecedence=priorityPrecedence, fragments2xDwnLinkHorizontalBox=fragments2xDwnLinkHorizontalBox, bridgeCbRFStatuin=bridgeCbRFStatuin, smbFilter=smbFilter, whispBoxEventLog=whispBoxEventLog, fecOutDiscardsOverloadCount=fecOutDiscardsOverloadCount, whispBoxLink=whispBoxLink, rfStatBadFreqBcnRcvCnt=rfStatBadFreqBcnRcvCnt, mac8VIDMapPriority=mac8VIDMapPriority, radioRateAdaptUL=radioRateAdaptUL, whispBridgeTbErr=whispBridgeTbErr, syslogStatTxSuccesses=syslogStatTxSuccesses, regionOceania=regionOceania, snmpPort=snmpPort, mac9VIDMapPriority=mac9VIDMapPriority, snmpStatus=snmpStatus, trapIP3=trapIP3, deleteRemarkVID=deleteRemarkVID, subnetMask9=subnetMask9, syslogDomainNameAppend=syslogDomainNameAppend, bridgeCbFecStatbout=bridgeCbFecStatbout, linkTestNumPktRxActCnt=linkTestNumPktRxActCnt, rfInDiscardsOverloadCount=rfInDiscardsOverloadCount, whispBoxP11BstrapFPGAVer=whispBoxP11BstrapFPGAVer, remarkVIDState=remarkVIDState, hiPriority=hiPriority, regionNorthAmerica=regionNorthAmerica, whispBridgeMacAddr=whispBridgeMacAddr, whispBoxAttributesGroup=whispBoxAttributesGroup, bitErrorsCorrected4xUpLinkVerticalBox=bitErrorsCorrected4xUpLinkVerticalBox, fecStatLinkLost=fecStatLinkLost, mac4VIDMapPriority=mac4VIDMapPriority, whispBoxEsn=whispBoxEsn, linkTestDurationBox=linkTestDurationBox, commStringRWrite=commStringRWrite, linkTestErrorBox=linkTestErrorBox, commStringROnly=commStringROnly, latitude=latitude, fecAuxNoCarrier=fecAuxNoCarrier, lan1DhcpRelease=lan1DhcpRelease, bitErrorsCorrected2xDwnLinkVerticalBox=bitErrorsCorrected2xDwnLinkVerticalBox, trap4=trap4, whispBoxRadioAlarmEvent=whispBoxRadioAlarmEvent, whispVAge=whispVAge, reboot=reboot, radioWatchDogLogged=radioWatchDogLogged, loginMethod=loginMethod)
mibBuilder.exportSymbols("WHISP-BOX-MIBV2-MIB", fecExcessiveDeferrals=fecExcessiveDeferrals, camOnboardKey=camOnboardKey, undoUnitWideSavedChanges=undoUnitWideSavedChanges, userName3=userName3, whispBoxBridgeVar=whispBoxBridgeVar, trap8=trap8, usrAccountEnableAccounting=usrAccountEnableAccounting, whispVLANTable=whispVLANTable, whispBridgeTbUsed=whispBridgeTbUsed, linkTestMVCPriority=linkTestMVCPriority, soundingStatClear=soundingStatClear)
