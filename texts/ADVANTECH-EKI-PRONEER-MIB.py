#
# PySNMP MIB module ADVANTECH-EKI-PRONEER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/advantech/ADVANTECH-EKI-PRONEER-MIB
# Produced by pysmi-1.1.12 at Wed Jul  3 09:07:42 2024
# On host fv-az2021-432 platform Linux version 6.5.0-1022-azure by user runner
# Using Python version 3.10.14 (main, Jun 20 2024, 15:20:03) [GCC 11.4.0]
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
enterprises, iso, ModuleIdentity, IpAddress, TimeTicks, Integer32, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Unsigned32, Gauge32, Counter32, Bits, NotificationType, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "enterprises", "iso", "ModuleIdentity", "IpAddress", "TimeTicks", "Integer32", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Unsigned32", "Gauge32", "Counter32", "Bits", "NotificationType", "MibIdentifier")
DisplayString, TextualConvention, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "DateAndTime")
advantech = ModuleIdentity((1, 3, 6, 1, 4, 1, 10297))
advantech.setRevisions(('2014-12-02 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: advantech.setRevisionsDescriptions(('Initial version of the Advantech Switch MIB. ',))
if mibBuilder.loadTexts: advantech.setLastUpdated('201412020000Z')
if mibBuilder.loadTexts: advantech.setOrganization('Advantech iConnectivity Group')
if mibBuilder.loadTexts: advantech.setContactInfo('       Advantech iConnectivity ICOM\n                    E-mail: ICG.Support@advantech.com.tw\n\t\t\t\t\t        Guider.Lee@advantech.com.tw')
if mibBuilder.loadTexts: advantech.setDescription('The MIB module is for Advantech switch, \n\t\te.g. EKI-XXXX, etc.\n\n            Copyright (C) Advantech iConnectivity Group(2014).\n\t\t')
aSwitchMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202))
proneer = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000))
monitoring = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1))
system = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2))
l2switching = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3))
macAddressTable = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 4))
security = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5))
qos = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6))
management = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7))
diagnostics = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8))
maintenance = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 9))
traps = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 99))
deviceInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 1))
loggingMessage = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 2))
portMonitoring = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 3))
linkAggregation = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 4))
lldpStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 5))
igmpStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 6))
mldStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 7))
systemName = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemName.setStatus('current')
if mibBuilder.loadTexts: systemName.setDescription('System name of the switch')
systemLocation = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemLocation.setStatus('current')
if mibBuilder.loadTexts: systemLocation.setDescription('System location of the switch.')
systemContact = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemContact.setStatus('current')
if mibBuilder.loadTexts: systemContact.setDescription('System contact of the switch')
macAddress = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macAddress.setStatus('current')
if mibBuilder.loadTexts: macAddress.setDescription('MAC address of the switch.')
ipAddress = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAddress.setStatus('current')
if mibBuilder.loadTexts: ipAddress.setDescription('IP address of the switch.')
subnetMask = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: subnetMask.setStatus('current')
if mibBuilder.loadTexts: subnetMask.setDescription('Subnet mask of the switch.')
gateway = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gateway.setStatus('current')
if mibBuilder.loadTexts: gateway.setDescription('Default gateway of the switch.')
loaderVersion = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loaderVersion.setStatus('current')
if mibBuilder.loadTexts: loaderVersion.setDescription('Boot loader version of the switch.')
loaderDate = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loaderDate.setStatus('current')
if mibBuilder.loadTexts: loaderDate.setDescription('Boot loader date of the switch.')
firmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firmwareVersion.setStatus('current')
if mibBuilder.loadTexts: firmwareVersion.setDescription('Firmware version of the switch.')
firmwareDate = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firmwareDate.setStatus('current')
if mibBuilder.loadTexts: firmwareDate.setDescription('Firmware release date of the switch.')
systemObjectID = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 1, 12), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemObjectID.setStatus('current')
if mibBuilder.loadTexts: systemObjectID.setDescription('SNMP system object ID of the switch.')
systemUpTime = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 1, 13), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemUpTime.setStatus('current')
if mibBuilder.loadTexts: systemUpTime.setDescription('The time since the switch was last re-initialized.')
ledStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 1, 14))
ledSYSStatus = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 1, 14, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notSupported", 0), ("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ledSYSStatus.setStatus('current')
if mibBuilder.loadTexts: ledSYSStatus.setDescription('The LED status of system operating.')
ledRMStatus = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 1, 14, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notSupported", 0), ("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ledRMStatus.setStatus('current')
if mibBuilder.loadTexts: ledRMStatus.setDescription('The LED status of ring master.')
ledPWR1Status = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 1, 14, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notSupported", 0), ("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ledPWR1Status.setStatus('current')
if mibBuilder.loadTexts: ledPWR1Status.setDescription('The LED status of power input 1.')
ledPWR2Status = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 1, 14, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notSupported", 0), ("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ledPWR2Status.setStatus('current')
if mibBuilder.loadTexts: ledPWR2Status.setDescription('The LED status of power input 2.')
ledAlarmStatus = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 1, 14, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notSupported", 0), ("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ledAlarmStatus.setStatus('current')
if mibBuilder.loadTexts: ledAlarmStatus.setDescription('The LED status of alarm.')
ledPFAILStatus = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 1, 14, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notSupported", 0), ("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ledPFAILStatus.setStatus('current')
if mibBuilder.loadTexts: ledPFAILStatus.setDescription('The LED status of P-Fail.')
ledRFAILStatus = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 1, 14, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notSupported", 0), ("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ledRFAILStatus.setStatus('current')
if mibBuilder.loadTexts: ledRFAILStatus.setDescription('The LED status of R-Fail.')
ledLOOPStatus = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 1, 14, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notSupported", 0), ("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ledLOOPStatus.setStatus('current')
if mibBuilder.loadTexts: ledLOOPStatus.setDescription('The LED status of loop detection.')
ledTempStatus = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 1, 14, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notSupported", 0), ("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ledTempStatus.setStatus('current')
if mibBuilder.loadTexts: ledTempStatus.setDescription('The LED status of system temperature.')
buildVersion = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: buildVersion.setStatus('current')
if mibBuilder.loadTexts: buildVersion.setDescription('Build version of the switch.')
loggingBufferTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 2, 1), )
if mibBuilder.loadTexts: loggingBufferTable.setStatus('current')
if mibBuilder.loadTexts: loggingBufferTable.setDescription('The table of the logging buffer')
loggingBufferEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 2, 1, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "loggingBufferIndex"))
if mibBuilder.loadTexts: loggingBufferEntry.setStatus('current')
if mibBuilder.loadTexts: loggingBufferEntry.setDescription('The entry of the logging buffer')
loggingBufferIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: loggingBufferIndex.setStatus('current')
if mibBuilder.loadTexts: loggingBufferIndex.setDescription('The index of the logging buffer')
loggingBufferSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("emerg", 0), ("alert", 1), ("crit", 2), ("error", 3), ("warning", 4), ("notice", 5), ("info", 6), ("debug", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: loggingBufferSeverity.setStatus('current')
if mibBuilder.loadTexts: loggingBufferSeverity.setDescription('The severity of the logging buffer.')
loggingBufferCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 2, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loggingBufferCategory.setStatus('current')
if mibBuilder.loadTexts: loggingBufferCategory.setDescription('The category of the logging buffer.')
loggingBufferTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 2, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loggingBufferTimeStamp.setStatus('current')
if mibBuilder.loadTexts: loggingBufferTimeStamp.setDescription('The time stamp of the logging buffer.')
loggingBufferMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 2, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loggingBufferMessage.setStatus('current')
if mibBuilder.loadTexts: loggingBufferMessage.setDescription('The messge of the logging buffer.')
clearBufferedMsg = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clearBufferedMsg.setStatus('current')
if mibBuilder.loadTexts: clearBufferedMsg.setDescription('Delete the logging message in buffer.')
loggingFileTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 2, 3), )
if mibBuilder.loadTexts: loggingFileTable.setStatus('current')
if mibBuilder.loadTexts: loggingFileTable.setDescription('The table of the logging file')
loggingFileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 2, 3, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "loggingFileIndex"))
if mibBuilder.loadTexts: loggingFileEntry.setStatus('current')
if mibBuilder.loadTexts: loggingFileEntry.setDescription('The entry of the logging file')
loggingFileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: loggingFileIndex.setStatus('current')
if mibBuilder.loadTexts: loggingFileIndex.setDescription('The index of the logging file')
loggingFileSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("emerg", 0), ("alert", 1), ("crit", 2), ("error", 3), ("warning", 4), ("notice", 5), ("info", 6), ("debug", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: loggingFileSeverity.setStatus('current')
if mibBuilder.loadTexts: loggingFileSeverity.setDescription('The severity of the logging file')
loggingFileCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 2, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loggingFileCategory.setStatus('current')
if mibBuilder.loadTexts: loggingFileCategory.setDescription('The category of the logging file')
loggingFileTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 2, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loggingFileTimeStamp.setStatus('current')
if mibBuilder.loadTexts: loggingFileTimeStamp.setDescription('The time stamp of the logging file')
loggingFileMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 2, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loggingFileMessage.setStatus('current')
if mibBuilder.loadTexts: loggingFileMessage.setDescription('The message of the logging file')
clearFileMsg = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clearFileMsg.setStatus('current')
if mibBuilder.loadTexts: clearFileMsg.setDescription('Delete the logging message in file.')
portStatisticTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 3, 1), )
if mibBuilder.loadTexts: portStatisticTable.setStatus('current')
if mibBuilder.loadTexts: portStatisticTable.setDescription('The table of the RMON counters.')
portStatisticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 3, 1, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "portStatisticIndex"))
if mibBuilder.loadTexts: portStatisticEntry.setStatus('current')
if mibBuilder.loadTexts: portStatisticEntry.setDescription('The entry of the RMON counters.')
portStatisticIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatisticIndex.setStatus('current')
if mibBuilder.loadTexts: portStatisticIndex.setDescription('The port index of the port counters.')
portCounterClear = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nothing", 0), ("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portCounterClear.setStatus('current')
if mibBuilder.loadTexts: portCounterClear.setDescription('Clear the port counter.')
ifInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifInOctets.setStatus('current')
if mibBuilder.loadTexts: ifInOctets.setDescription('The total number of octets received on the interface,\n \t\t\t\t\t\tincluding framing characters.\n\t\t\t\t\t \tDiscontinuities in the value of this counter can occur at\n\t\t\t\t\t \tre-initialization of the management system, and at other\n\t\t\t\t\t \ttimes as indicated by the value of\n\t\t\t\t\t \tifCounterDiscontinuityTime.')
ifInUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifInUcastPkts.setStatus('current')
if mibBuilder.loadTexts: ifInUcastPkts.setDescription('The number of packets, delivered by this sub-layer to a\n\t\t\t\t\t \thigher (sub-)layer, which were not addressed to a multicast\n\t\t\t\t\t \tor broadcast address at this sub-layer.\n\t\t\t\t\t \t\n\t\t\t\t\t \tDiscontinuities in the value of this counter can occur at\n\t\t\t\t\t \tre-initialization of the management system, and at other\n\t\t\t\t\t \ttimes as indicated by the value of\n\t\t\t\t\t \tifCounterDiscontinuityTime.')
ifInNUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifInNUcastPkts.setStatus('current')
if mibBuilder.loadTexts: ifInNUcastPkts.setDescription('The number of packets, delivered by this sub-layer to a\n\t\t\t\t\t \thigher (sub-)layer, which were addressed to a multicast or\n\t\t\t\t\t \tbroadcast address at this sub-layer.\n\t\t\t\t\t \t\n\t\t\t\t\t \tDiscontinuities in the value of this counter can occur at\n\t\t\t\t\t \tre-initialization of the management system, and at other\n\t\t\t\t\t \ttimes as indicated by the value of\n\t\t\t\t\t \tifCounterDiscontinuityTime.\n\t\t\t\t\t \t\n\t\t\t\t\t \tThis object is deprecated in favour of ifInMulticastPkts and\n\t\t\t\t\t \tifInBroadcastPkts.')
ifInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifInDiscards.setStatus('current')
if mibBuilder.loadTexts: ifInDiscards.setDescription('The number of inbound packets which were chosen to be\n\t\t\t\t\t \tdiscarded even though no errors had been detected to prevent\t\t\t\t\t \t\t\t\t\n\t\t\t\t\t \ttheir being deliverable to a higher-layer protocol.  One\n\t\t\t\t\t \tpossible reason for discarding such a packet could be to\n\t\t\t\t\t \tfree up buffer space.\n\t\t\t\t\t \t\n\t\t\t\t\t \tDiscontinuities in the value of this counter can occur at\n\t\t\t\t\t \tre-initialization of the management system, and at other\n\t\t\t\t\t \ttimes as indicated by the value of\n\t\t\t\t\t \tifCounterDiscontinuityTime')
ifOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 3, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifOutOctets.setStatus('current')
if mibBuilder.loadTexts: ifOutOctets.setDescription('The total number of octets transmitted out of the\n\t\t\t\t\t \tinterface, including framing characters.\n\t\t\t\t\t \t\n\t\t\t\t\t \tDiscontinuities in the value of this counter can occur at\n\t\t\t\t\t \tre-initialization of the management system, and at other\n\t\t\t\t\t \ttimes as indicated by the value of\n\t\t\t\t\t \tifCounterDiscontinuityTime.')
ifOutUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 3, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifOutUcastPkts.setStatus('current')
if mibBuilder.loadTexts: ifOutUcastPkts.setDescription('The total number of packets that higher-level protocols\n\t\t\t\t\t \trequested be transmitted, and which were not addressed to a\n\t\t\t\t\t \tmulticast or broadcast address at this sub-layer, including\n\t\t\t\t\t \tthose that were discarded or not sent.\n\t\t\t\t\t \t\n\t\t\t\t\t \tDiscontinuities in the value of this counter can occur at\n\t\t\t\t\t \tre-initialization of the management system, and at other\n\t\t\t\t\t \ttimes as indicated by the value of\n\t\t\t\t\t \tifCounterDiscontinuityTime.')
ifOutNUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 3, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifOutNUcastPkts.setStatus('current')
if mibBuilder.loadTexts: ifOutNUcastPkts.setDescription('The total number of packets that higher-level protocols\n\t\t\t\t\t \trequested be transmitted, and which were addressed to a\n\t\t\t\t\t \tmulticast or broadcast address at this sub-layer, including\n\t\t\t\t\t \tthose that were discarded or not sent.\n\t\t\t\t\t \t\n\t\t\t\t\t \tDiscontinuities in the value of this counter can occur at\n\t\t\t\t\t \tre-initialization of the management system, and at other\n\t\t\t\t\t \ttimes as indicated by the value of\n\t\t\t\t\t \tifCounterDiscontinuityTime.\n\t\t\t\t\t \t\n\t\t\t\t\t \tThis object is deprecated in favour of ifOutMulticastPkts\n\t\t\t\t\t \tand ifOutBroadcastPkts.')
ifOutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 3, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifOutDiscards.setStatus('current')
if mibBuilder.loadTexts: ifOutDiscards.setDescription('The number of outbound packets which were chosen to be\n\t\t\t\t\t \tdiscarded even though no errors had been detected to prevent\n\t\t\t\t\t \ttheir being transmitted.  One possible reason for discarding\n\t\t\t\t\t \tsuch a packet could be to free up buffer space.\n\t\t\t\t\t \t\n\t\t\t\t\t \tDiscontinuities in the value of this counter can occur at\n\t\t\t\t\t \tre-initialization of the management system, and at other\n\t\t\t\t\t \ttimes as indicated by the value of\n\t\t\t\t\t \tifCounterDiscontinuityTime.')
ifInMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 3, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifInMulticastPkts.setStatus('current')
if mibBuilder.loadTexts: ifInMulticastPkts.setDescription('The number of packets, delivered by this sub-layer to a\n\t\t\t\t\t \thigher (sub-)layer, which were addressed to a multicast\n\t\t\t\t\t \taddress at this sub-layer.  For a MAC layer protocol, this\n\t\t\t\t\t \tincludes both Group and Functional addresses.\n\t\t\t\t\t \t\n\t\t\t\t\t \tDiscontinuities in the value of this counter can occur at\n\t\t\t\t\t \tre-initialization of the management system, and at other\n\t\t\t\t\t \ttimes as indicated by the value of\n\t\t\t\t\t \tifCounterDiscontinuityTime.')
ifInBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 3, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifInBroadcastPkts.setStatus('current')
if mibBuilder.loadTexts: ifInBroadcastPkts.setDescription('The number of packets, delivered by this sub-layer to a\n\t\t\t\t\t \thigher (sub-)layer, which were addressed to a broadcast\n\t\t\t\t\t \taddress at this sub-layer.\n\t\t\t\t\t \t\n\t\t\t\t\t \tDiscontinuities in the value of this counter can occur at\n\t\t\t\t\t \tre-initialization of the management system, and at other\n\t\t\t\t\t \ttimes as indicated by the value of\n\t\t\t\t\t \tifCounterDiscontinuityTime.')
ifOutMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 3, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifOutMulticastPkts.setStatus('current')
if mibBuilder.loadTexts: ifOutMulticastPkts.setDescription('The total number of packets that higher-level protocols\n\t\t\t\t\t \trequested be transmitted, and which were addressed to a\n\t\t\t\t\t \tmulticast address at this sub-layer, including those that\n\t\t\t\t\t \twere discarded or not sent.  For a MAC layer protocol, this\n\t\t\t\t\t \tincludes both Group and Functional addresses.\n\t\t\t\t\t \t\n\t\t\t\t\t \tDiscontinuities in the value of this counter can occur at\n\t\t\t\t\t \tre-initialization of the management system, and at other\n\t\t\t\t\t \ttimes as indicated by the value of\n\t\t\t\t\t \tifCounterDiscontinuityTime.')
ifOutBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 3, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifOutBroadcastPkts.setStatus('current')
if mibBuilder.loadTexts: ifOutBroadcastPkts.setDescription('The total number of packets that higher-level protocols\n\t\t\t\t\t \trequested be transmitted, and which were addressed to a\n\t\t\t\t\t \tbroadcast address at this sub-layer, including those that\n\t\t\t\t\t \twere discarded or not sent.\n\t\t\t\t\t \t\n\t\t\t\t\t \tDiscontinuities in the value of this counter can occur at\n\t\t\t\t\t \tre-initialization of the management system, and at other\n\t\t\t\t\t \ttimes as indicated by the value of\n\t\t\t\t\t \tifCounterDiscontinuityTime.')
dot3StatsAlignmentErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 3, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3StatsAlignmentErrors.setStatus('current')
if mibBuilder.loadTexts: dot3StatsAlignmentErrors.setDescription("A count of frames received on a particular\n\t\t\t\t\t \tinterface that are not an integral number of\n\t\t\t\t\t \toctets in length and do not pass the FCS check.\n\t\t\t\t\t \t\n\t\t\t\t\t \tThe count represented by an instance of this\n\t\t\t\t\t \tobject is incremented when the alignmentError\n\t\t\t\t\t \tstatus is returned by the MAC service to the\n\t\t\t\t\t \tLLC (or other MAC user). Received frames for\n\t\t\t\t\t \twhich multiple error conditions pertain are,\n\t\t\t\t\t \taccording to the conventions of IEEE 802.3\n\t\t\t\t\t \tLayer Management, counted exclusively according\n\t\t\t\t\t \tto the error status presented to the LLC.\n\t\t\t\t\t \t\n\t\t\t\t\t \tThis counter does not increment for group\n\t\t\t\t\t \tencoding schemes greater than 4 bits per group.\n\t\t\t\t\t \t\n\t\t\t\t\t \tFor interfaces operating at 10 Gb/s, this\n\t\t\t\t\t \tcounter can roll over in less than 5 minutes if\n\t\t\t\t\t \tit is incrementing at its maximum rate.  Since\n\t\t\t\t\t \tthat amount of time could be less than a\n\t\t\t\t\t \tmanagement station's poll cycle time, in order\n\t\t\t\t\t \tto avoid a loss of information, a management\n\t\t\t\t\t \tstation is advised to poll the\n\t\t\t\t\t \tdot3HCStatsAlignmentErrors object for 10 Gb/s\n\t\t\t\t\t \tor faster interfaces.\n\t\t\t\t\t \t\n\t\t\t\t\t \tDiscontinuities in the value of this counter can\n\t\t\t\t\t \toccur at re-initialization of the management\n\t\t\t\t\t \tsystem, and at other times as indicated by the\n\t\t\t\t\t \tvalue of ifCounterDiscontinuityTime.")
dot3StatsFCSErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 3, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3StatsFCSErrors.setStatus('current')
if mibBuilder.loadTexts: dot3StatsFCSErrors.setDescription("A count of frames received on a particular\n\t\t\t\t\t \tinterface that are an integral number of octets\n\t\t\t\t\t \tin length but do not pass the FCS check.  This\n\t\t\t\t\t \tcount does not include frames received with\n\t\t\t\t\t \tframe-too-long or frame-too-short error.\n\t\t\t\t\t \t\n\t\t\t\t\t \tThe count represented by an instance of this\n\t\t\t\t\t \tobject is incremented when the frameCheckError\n\t\t\t\t\t \tstatus is returned by the MAC service to the\n\t\t\t\t\t \tLLC (or other MAC user). Received frames for\n\t\t\t\t\t \twhich multiple error conditions pertain are,\n\t\t\t\t\t \taccording to the conventions of IEEE 802.3\n\t\t\t\t\t \tLayer Management, counted exclusively according\n\t\t\t\t\t \tto the error status presented to the LLC.\n\t\t\t\t\t \t\n\t\t\t\t\t \tNote:  Coding errors detected by the physical\n\t\t\t\t\t \tlayer for speeds above 10 Mb/s will cause the\n\t\t\t\t\t \tframe to fail the FCS check.\n\t\t\t\t\t \t\n\t\t\t\t\t \tFor interfaces operating at 10 Gb/s, this\n\t\t\t\t\t \tcounter can roll over in less than 5 minutes if\n\t\t\t\t\t \tit is incrementing at its maximum rate.  Since\n\t\t\t\t\t \tthat amount of time could be less than a\n\t\t\t\t\t \tmanagement station's poll cycle time, in order\n\t\t\t\t\t \tto avoid a loss of information, a management\n\t\t\t\t\t \tstation is advised to poll the\n\t\t\t\t\t \tdot3HCStatsFCSErrors object for 10 Gb/s or\n\t\t\t\t\t \tfaster interfaces.\n\t\t\t\t\t \t\n\t\t\t\t\t \tDiscontinuities in the value of this counter can\n\t\t\t\t\t \toccur at re-initialization of the management\n\t\t\t\t\t \tsystem, and at other times as indicated by the\n\t\t\t\t\t \tvalue of ifCounterDiscontinuityTime.")
dot3StatsSingleCollisionFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 3, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3StatsSingleCollisionFrames.setStatus('current')
if mibBuilder.loadTexts: dot3StatsSingleCollisionFrames.setDescription('A count of frames that are involved in a single\n\t\t\t\t\t \tcollision, and are subsequently transmitted\n\t\t\t\t\t \tsuccessfully.\n\t\t\t\t\t \t\n\t\t\t\t\t \tA frame that is counted by an instance of this\n\t\t\t\t\t \tobject is also counted by the corresponding\n\t\t\t\t\t \tinstance of either the ifOutUcastPkts,\n\t\t\t\t\t \tifOutMulticastPkts, or ifOutBroadcastPkts,\n\t\t\t\t\t \tand is not counted by the corresponding\n\t\t\t\t\t \tinstance of the dot3StatsMultipleCollisionFrames\n\t\t\t\t\t \tobject.\n\t\t\t\t\t \t\n\t\t\t\t\t \tThis counter does not increment when the\n\t\t\t\t\t \tinterface is operating in full-duplex mode.\n\t\t\t\t\t \t\n\t\t\t\t\t \tDiscontinuities in the value of this counter can\n\t\t\t\t\t \toccur at re-initialization of the management\n\t\t\t\t\t \tsystem, and at other times as indicated by the\n\t\t\t\t\t \tvalue of ifCounterDiscontinuityTime.')
dot3StatsMultipleCollisionFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 3, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3StatsMultipleCollisionFrames.setStatus('current')
if mibBuilder.loadTexts: dot3StatsMultipleCollisionFrames.setDescription('A count of frames that are involved in more\n\t\t\t\t\t \tthan one collision and are subsequently\n\t\t\t\t\t \ttransmitted successfully.\n\t\t\t\t\t \t\n\t\t\t\t\t \tA frame that is counted by an instance of this\n\t\t\t\t\t \tobject is also counted by the corresponding\n\t\t\t\t\t \tinstance of either the ifOutUcastPkts,\n\t\t\t\t\t \tifOutMulticastPkts, or ifOutBroadcastPkts,\n\t\t\t\t\t \tand is not counted by the corresponding\n\t\t\t\t\t \tinstance of the dot3StatsSingleCollisionFrames\n\t\t\t\t\t \tobject.\n\t\t\t\t\t \t\n\t\t\t\t\t \tThis counter does not increment when the\n\t\t\t\t\t \tinterface is operating in full-duplex mode.\n\t\t\t\t\t \t\n\t\t\t\t\t \tDiscontinuities in the value of this counter can\n\t\t\t\t\t \toccur at re-initialization of the management\n\t\t\t\t\t \tsystem, and at other times as indicated by the\n\t\t\t\t\t \tvalue of ifCounterDiscontinuityTime.')
dot3StatsDeferredTransmissions = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 3, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3StatsDeferredTransmissions.setStatus('current')
if mibBuilder.loadTexts: dot3StatsDeferredTransmissions.setDescription('A count of frames for which the first\n\t\t\t\t\t \ttransmission attempt on a particular interface\n\t\t\t\t\t \tis delayed because the medium is busy.\n\t\t\t\t\t \t\n\t\t\t\t\t \tThe count represented by an instance of this\n\t\t\t\t\t \tobject does not include frames involved in\n\t\t\t\t\t \tcollisions.\n\t\t\t\t\t \t\n\t\t\t\t\t \tThis counter does not increment when the\n\t\t\t\t\t \tinterface is operating in full-duplex mode.\n\t\t\t\t\t \t\n\t\t\t\t\t \tDiscontinuities in the value of this counter can\n\t\t\t\t\t \toccur at re-initialization of the management\n\t\t\t\t\t \tsystem, and at other times as indicated by the\n\t\t\t\t\t \tvalue of ifCounterDiscontinuityTime.')
dot3StatsLateCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 3, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3StatsLateCollisions.setStatus('current')
if mibBuilder.loadTexts: dot3StatsLateCollisions.setDescription('The number of times that a collision is\n\t\t\t\t\t \tdetected on a particular interface later than\n\t\t\t\t\t \tone slotTime into the transmission of a packet.\n\t\t\t\t\t \t\n\t\t\t\t\t \tA (late) collision included in a count\n\t\t\t\t\t \trepresented by an instance of this object is\n\t\t\t\t\t \talso considered as a (generic) collision for\n\t\t\t\t\t \tpurposes of other collision-related\n\t\t\t\t\t \tstatistics.')
dot3StatsExcessiveCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 3, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3StatsExcessiveCollisions.setStatus('current')
if mibBuilder.loadTexts: dot3StatsExcessiveCollisions.setDescription('A count of frames for which transmission on a\n\t\t\t\t\t \tparticular interface fails due to excessive\n\t\t\t\t\t \tcollisions.\n\t\t\t\t\t \t\n\t\t\t\t\t \tThis counter does not increment when the\n\t\t\t\t\t \tinterface is operating in full-duplex mode.\n\t\t\t\t\t \t\n\t\t\t\t\t \tDiscontinuities in the value of this counter can\n\t\t\t\t\t \toccur at re-initialization of the management\n\t\t\t\t\t \tsystem, and at other times as indicated by the\n\t\t\t\t\t \tvalue of ifCounterDiscontinuityTime.')
dot3StatsFrameTooLongs = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 3, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3StatsFrameTooLongs.setStatus('current')
if mibBuilder.loadTexts: dot3StatsFrameTooLongs.setDescription("A count of frames received on a particular\n\t\t\t\t\t \tinterface that exceed the maximum permitted\n\t\t\t\t\t \tframe size.\n\t\t\t\t\t \t\n\t\t\t\t\t \tThe count represented by an instance of this\n\t\t\t\t\t \tobject is incremented when the frameTooLong\n\t\t\t\t\t \tstatus is returned by the MAC service to the\n\t\t\t\t\t \tLLC (or other MAC user). Received frames for\n\t\t\t\t\t \twhich multiple error conditions pertain are,\n\t\t\t\t\t \taccording to the conventions of IEEE 802.3\n\t\t\t\t\t \tLayer Management, counted exclusively according\n\t\t\t\t\t \tto the error status presented to the LLC.\n\t\t\t\t\t \t\n\t\t\t\t\t \tFor interfaces operating at 10 Gb/s, this\n\t\t\t\t\t \tcounter can roll over in less than 80 minutes if\n\t\t\t\t\t \tit is incrementing at its maximum rate.  Since\n\t\t\t\t\t \tthat amount of time could be less than a\n\t\t\t\t\t \tmanagement station's poll cycle time, in order\n\t\t\t\t\t \tto avoid a loss of information, a management\n\t\t\t\t\t \tstation is advised to poll the\n\t\t\t\t\t \tdot3HCStatsFrameTooLongs object for 10 Gb/s\n\t\t\t\t\t \tor faster interfaces.\n\t\t\t\t\t \t\n\t\t\t\t\t \tDiscontinuities in the value of this counter can\n\t\t\t\t\t \toccur at re-initialization of the management\n\t\t\t\t\t \tsystem, and at other times as indicated by the\n\t\t\t\t\t \tvalue of ifCounterDiscontinuityTime.")
dot3StatsSymbolErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 3, 1, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3StatsSymbolErrors.setStatus('current')
if mibBuilder.loadTexts: dot3StatsSymbolErrors.setDescription("For an interface operating at 100 Mb/s, the\n\t\t\t\t\t \tnumber of times there was an invalid data symbol\n\t\t\t\t\t \twhen a valid carrier was present.\n\t\t\t\t\t \t\n\t\t\t\t\t \tFor an interface operating in half-duplex mode\n\t\t\t\t\t \tat 1000 Mb/s, the number of times the receiving\n\t\t\t\t\t \tmedia is non-idle (a carrier event) for a period\n\t\t\t\t\t \tof time equal to or greater than slotTime, and\n\t\t\t\t\t \tduring which there was at least one occurrence\n\t\t\t\t\t \tof an event that causes the PHY to indicate\n\t\t\t\t\t \t'Data reception error' or 'carrier extend error'\n\t\t\t\t\t \ton the GMII.\n\t\t\t\t\t \t\n\t\t\t\t\t \tFor an interface operating in full-duplex mode\n\t\t\t\t\t \tat 1000 Mb/s, the number of times the receiving\n\t\t\t\t\t \tmedia is non-idle (a carrier event) for a period\n\t\t\t\t\t \tof time equal to or greater than minFrameSize,\n\t\t\t\t\t \tand during which there was at least one\n\t\t\t\t\t \toccurrence of an event that causes the PHY to\n\t\t\t\t\t \tindicate 'Data reception error' on the GMII.\n\t\t\t\t\t \t\n\t\t\t\t\t \tFor an interface operating at 10 Gb/s, the\n\t\t\t\t\t \tnumber of times the receiving media is non-idle\n\t\t\t\t\t \t(a carrier event) for a period of time equal to\n\t\t\t\t\t \tor greater than minFrameSize, and during which\n\t\t\t\t\t \tthere was at least one occurrence of an event\n\t\t\t\t\t \tthat causes the PHY to indicate 'Receive Error'\n\t\t\t\t\t \ton the XGMII.\n\t\t\t\t\t \t\n\t\t\t\t\t \tThe count represented by an instance of this\n\t\t\t\t\t \tobject is incremented at most once per carrier\n\t\t\t\t\t \tevent, even if multiple symbol errors occur\n\t\t\t\t\t \tduring the carrier event.  This count does\n\t\t\t\t\t \tnot increment if a collision is present.\n\t\t\t\t\t \t\n\t\t\t\t\t \tThis counter does not increment when the\n\t\t\t\t\t \tinterface is operating at 10 Mb/s.\n\t\t\t\t\t \t\n\t\t\t\t\t \tFor interfaces operating at 10 Gb/s, this\n\t\t\t\t\t \tcounter can roll over in less than 5 minutes if\n\t\t\t\t\t \tit is incrementing at its maximum rate.  Since\n\t\t\t\t\t \tthat amount of time could be less than a\n\t\t\t\t\t \tmanagement station's poll cycle time, in order\n\t\t\t\t\t \tto avoid a loss of information, a management\n\t\t\t\t\t \tstation is advised to poll the\n\t\t\t\t\t \tdot3HCStatsSymbolErrors object for 10 Gb/s\n\t\t\t\t\t \tor faster interfaces.\n\t\t\t\t\t \t\n\t\t\t\t\t \tDiscontinuities in the value of this counter can\n\t\t\t\t\t \toccur at re-initialization of the management\n\t\t\t\t\t \tsystem, and at other times as indicated by the\n\t\t\t\t\t \tvalue of ifCounterDiscontinuityTime.")
dot3ControlInUnknownOpcodes = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 3, 1, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3ControlInUnknownOpcodes.setStatus('current')
if mibBuilder.loadTexts: dot3ControlInUnknownOpcodes.setDescription("A count of MAC Control frames received on this\n\t\t\t\t\t \tinterface that contain an opcode that is not\n\t\t\t\t\t \tsupported by this device.\n\t\t\t\t\t \t\n\t\t\t\t\t \tFor interfaces operating at 10 Gb/s, this\n\t\t\t\t\t \tcounter can roll over in less than 5 minutes if\n\t\t\t\t\t \tit is incrementing at its maximum rate.  Since\n\t\t\t\t\t \tthat amount of time could be less than a\n\t\t\t\t\t \tmanagement station's poll cycle time, in order\n\t\t\t\t\t \tto avoid a loss of information, a management\n\t\t\t\t\t \tstation is advised to poll the\n\t\t\t\t\t \tdot3HCControlInUnknownOpcodes object for 10 Gb/s\n\t\t\t\t\t \tor faster interfaces.\n\t\t\t\t\t \t\n\t\t\t\t\t \tDiscontinuities in the value of this counter can\n\t\t\t\t\t \toccur at re-initialization of the management\n\t\t\t\t\t \tsystem, and at other times as indicated by the\n\t\t\t\t\t \tvalue of ifCounterDiscontinuityTime.")
dot3InPauseFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 3, 1, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3InPauseFrames.setStatus('current')
if mibBuilder.loadTexts: dot3InPauseFrames.setDescription("A count of MAC Control frames received on this\n\t\t\t\t\t \tinterface with an opcode indicating the PAUSE\n\t\t\t\t\t \toperation.\n\t\t\t\t\t \t\n\t\t\t\t\t \tThis counter does not increment when the\n\t\t\t\t\t \tinterface is operating in half-duplex mode.\n\t\t\t\t\t \t\n\t\t\t\t\t \tFor interfaces operating at 10 Gb/s, this\n\t\t\t\t\t \tcounter can roll over in less than 5 minutes if\n\t\t\t\t\t \tit is incrementing at its maximum rate.  Since\n\t\t\t\t\t \tthat amount of time could be less than a\n\t\t\t\t\t \tmanagement station's poll cycle time, in order\n\t\t\t\t\t \tto avoid a loss of information, a management\n\t\t\t\t\t \tstation is advised to poll the\n\t\t\t\t\t \tdot3HCInPauseFrames object for 10 Gb/s or\n\t\t\t\t\t \tfaster interfaces.\n\t\t\t\t\t \t\n\t\t\t\t\t \tDiscontinuities in the value of this counter can\n\t\t\t\t\t \toccur at re-initialization of the management\n\t\t\t\t\t \tsystem, and at other times as indicated by the\n\t\t\t\t\t \tvalue of ifCounterDiscontinuityTime.")
dot3OutPauseFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 3, 1, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3OutPauseFrames.setStatus('current')
if mibBuilder.loadTexts: dot3OutPauseFrames.setDescription("A count of MAC Control frames transmitted on\n\t\t\t\t\t \tthis interface with an opcode indicating the\n\t\t\t\t\t \tPAUSE operation.\n\t\t\t\t\t \t\n\t\t\t\t\t \tThis counter does not increment when the\n\t\t\t\t\t \tinterface is operating in half-duplex mode.\n\t\t\t\t\t \t\n\t\t\t\t\t \tFor interfaces operating at 10 Gb/s, this\n\t\t\t\t\t \tcounter can roll over in less than 5 minutes if\n\t\t\t\t\t \tit is incrementing at its maximum rate.  Since\n\t\t\t\t\t \tthat amount of time could be less than a\n\t\t\t\t\t \tmanagement station's poll cycle time, in order\n\t\t\t\t\t \tto avoid a loss of information, a management\n\t\t\t\t\t \tstation is advised to poll the\n\t\t\t\t\t \tdot3HCOutPauseFrames object for 10 Gb/s or\n\t\t\t\t\t \tfaster interfaces.\n\t\t\t\t\t \t\n\t\t\t\t\t \tDiscontinuities in the value of this counter can\n\t\t\t\t\t \toccur at re-initialization of the management\n\t\t\t\t\t \tsystem, and at other times as indicated by the\n\t\t\t\t\t \tvalue of ifCounterDiscontinuityTime.")
lagStatusTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 4, 1), )
if mibBuilder.loadTexts: lagStatusTable.setStatus('current')
if mibBuilder.loadTexts: lagStatusTable.setDescription('The table of the link aggregation group')
lagStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 4, 1, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "lagStatusIndex"))
if mibBuilder.loadTexts: lagStatusEntry.setStatus('current')
if mibBuilder.loadTexts: lagStatusEntry.setDescription('The entry of the link aggregation group')
lagStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lagStatusIndex.setStatus('current')
if mibBuilder.loadTexts: lagStatusIndex.setDescription('The name of the link aggregation group')
lagStatusName = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lagStatusName.setStatus('current')
if mibBuilder.loadTexts: lagStatusName.setDescription('The LAG port description')
lagStatusType = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("static", 1), ("lacp", 2), ("none", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lagStatusType.setStatus('current')
if mibBuilder.loadTexts: lagStatusType.setDescription('The type of the LAG.\n\t\t    \t\t\tStatic: The group of ports assigned to a static LAG\n\t\t\t\t\t\tare always active members.\n\t\t\t\t\t\tLACP: The group of ports assigned to dynamic LAG\n\t\t\t\t\t\tare candidate ports. LACP determines which candidate\n\t\t\t\t\t\tports are active member ports.')
lagStatusLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("notPresent", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lagStatusLinkState.setStatus('current')
if mibBuilder.loadTexts: lagStatusLinkState.setDescription('LAG port link status')
lagStatusActiveMember = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 4, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lagStatusActiveMember.setStatus('current')
if mibBuilder.loadTexts: lagStatusActiveMember.setDescription('Active member ports of the LAG')
lagStatusStandbyMember = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 4, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lagStatusStandbyMember.setStatus('current')
if mibBuilder.loadTexts: lagStatusStandbyMember.setDescription('Inactive or candudate member ports of the LAG')
lacpInfoTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 4, 2), )
if mibBuilder.loadTexts: lacpInfoTable.setStatus('current')
if mibBuilder.loadTexts: lacpInfoTable.setDescription('The table of LACP')
lacpInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 4, 2, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "lacpInfoLagIndex"), (0, "ADVANTECH-EKI-PRONEER-MIB", "lacpInfoPortIndex"))
if mibBuilder.loadTexts: lacpInfoEntry.setStatus('current')
if mibBuilder.loadTexts: lacpInfoEntry.setDescription('The entry of LACP')
lacpInfoLagIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 4, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoLagIndex.setStatus('current')
if mibBuilder.loadTexts: lacpInfoLagIndex.setDescription('The LACP name')
lacpInfoPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 4, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortIndex.setStatus('current')
if mibBuilder.loadTexts: lacpInfoPortIndex.setDescription('Member port name')
lacpInfoPartnerSysId = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 4, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPartnerSysId.setStatus('current')
if mibBuilder.loadTexts: lacpInfoPartnerSysId.setDescription('The system ID of link partner.')
lacpInfoPnkey = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 4, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPnkey.setStatus('current')
if mibBuilder.loadTexts: lacpInfoPnkey.setDescription('Port key of partner')
lacpInfoAtkey = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 4, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoAtkey.setStatus('current')
if mibBuilder.loadTexts: lacpInfoAtkey.setDescription('Port key of actor')
lacpInfoSel = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 4, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoSel.setStatus('current')
if mibBuilder.loadTexts: lacpInfoSel.setDescription('LACP selection logic status of the port')
lacpInfoMux = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 4, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoMux.setStatus('current')
if mibBuilder.loadTexts: lacpInfoMux.setDescription('LACP mux state machine status of the port')
lacpInfoReceiv = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 4, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoReceiv.setStatus('current')
if mibBuilder.loadTexts: lacpInfoReceiv.setDescription('LACP receive state machine status of the port')
lacpInfoPrdtx = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 4, 2, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPrdtx.setStatus('current')
if mibBuilder.loadTexts: lacpInfoPrdtx.setDescription('LACP periodic transmission state machine status of the port.')
lacpInfoAtstat = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 4, 2, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoAtstat.setStatus('current')
if mibBuilder.loadTexts: lacpInfoAtstat.setDescription('The actor state field of LACP PDU description.')
lacpInfoPnstat = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 4, 2, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPnstat.setStatus('current')
if mibBuilder.loadTexts: lacpInfoPnstat.setDescription('The partner state field of LACP PDU description.')
lldpClearStatistics = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpClearStatistics.setStatus('current')
if mibBuilder.loadTexts: lldpClearStatistics.setDescription('Clear the LLDP statistics')
inertions = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inertions.setStatus('current')
if mibBuilder.loadTexts: inertions.setDescription('The number of times the complete set of infomation\n\t\t\t\t\tadvertised by a partcular MAC Service Access Point(MSAP)\n\t\t\t\t\thas been inserted into tables associated with the remote\n\t\t\t\t\tsystems')
deletions = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deletions.setStatus('current')
if mibBuilder.loadTexts: deletions.setDescription('The number of times the complete set of infomation\n\t\t\t\t\tadvertised by MSAP has been deleted from tables associated \n\t\t\t\t\twith the remote\tsystems')
drops = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 5, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drops.setStatus('current')
if mibBuilder.loadTexts: drops.setDescription('The number of times the complete set of information\n\t\t\t\t\tadvertised by MSAP could not be entered into tables\n\t\t\t\t\tassociated with the remote systems because of insufficient\n\t\t\t\t\tresources.')
ageouts = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 5, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ageouts.setStatus('current')
if mibBuilder.loadTexts: ageouts.setDescription('The number of times the complete set of information\n\t\t\t\t\tadvertised by MSAP has been deleted from tables associated\n\t\t\t\t\twith the remote systems because the information timeliness\n\t\t\t\t\tinterval has expired.')
lldpPortStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 5, 6), )
if mibBuilder.loadTexts: lldpPortStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: lldpPortStatisticsTable.setDescription('The table of LLDP port statistics')
lldpPortStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 5, 6, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "lldpPortStatIndex"))
if mibBuilder.loadTexts: lldpPortStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: lldpPortStatisticsEntry.setDescription('The entry of LLDP port statistics')
lldpPortStatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 5, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpPortStatIndex.setStatus('current')
if mibBuilder.loadTexts: lldpPortStatIndex.setDescription('Interface or port number.')
lldpPortStatTotalTxFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 5, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpPortStatTotalTxFrame.setStatus('current')
if mibBuilder.loadTexts: lldpPortStatTotalTxFrame.setDescription('Number of LLDP frames transmitted on the corresponding\n\t\t\t\t\t\tport.')
lldpPortStatTotalRxFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 5, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpPortStatTotalRxFrame.setStatus('current')
if mibBuilder.loadTexts: lldpPortStatTotalRxFrame.setDescription('Number of LLDP frames received by this LLDP agent on the\n\t\t\t\t\t\tcorresponding port, while the LLDP agent is enabled')
lldpPortStatDiscardRxFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 5, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpPortStatDiscardRxFrame.setStatus('current')
if mibBuilder.loadTexts: lldpPortStatDiscardRxFrame.setDescription('Number of LLDP frames discard for any reason by this LLDP \n\t\t    \t\t\tagent on the corresponding port')
lldpPortStatErrorRxFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 5, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpPortStatErrorRxFrame.setStatus('current')
if mibBuilder.loadTexts: lldpPortStatErrorRxFrame.setDescription('Number of invalid LLDP frames received by the LLDP agent \n\t\t    \t\t\ton the corresponding port, while the LLDP agent is enabled')
lldpPortStatDiscardRxTlv = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 5, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpPortStatDiscardRxTlv.setStatus('current')
if mibBuilder.loadTexts: lldpPortStatDiscardRxTlv.setDescription('Number of TLVs LLDP frames discard for any reason by \n\t\t    \t\t\tthis LLDP agent on the corresponding port')
lldpPortStatUnrecognizedRxTlv = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 5, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpPortStatUnrecognizedRxTlv.setStatus('current')
if mibBuilder.loadTexts: lldpPortStatUnrecognizedRxTlv.setDescription('Number of TLVs LLDP frames that are unrecognized while \n\t\t    \t\t\tthis LLDP agent is enabled')
lldpPortStatTotalRxAgeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 5, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpPortStatTotalRxAgeouts.setStatus('current')
if mibBuilder.loadTexts: lldpPortStatTotalRxAgeouts.setDescription('Number of age out LLDP frames')
totalRx = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalRx.setStatus('current')
if mibBuilder.loadTexts: totalRx.setDescription('IGMP snooping total Rx counter')
validRx = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: validRx.setStatus('current')
if mibBuilder.loadTexts: validRx.setDescription('IGMP snooping valid Rx counter')
invalidRx = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 6, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: invalidRx.setStatus('current')
if mibBuilder.loadTexts: invalidRx.setDescription('IGMP snooping invalid Rx counter')
otherRx = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 6, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otherRx.setStatus('current')
if mibBuilder.loadTexts: otherRx.setDescription('IGMP snooping other Rx counter')
leaveRx = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 6, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: leaveRx.setStatus('current')
if mibBuilder.loadTexts: leaveRx.setDescription('IGMP snooping leave Rx counter')
reportRx = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 6, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reportRx.setStatus('current')
if mibBuilder.loadTexts: reportRx.setDescription('IGMP snooping report Rx counter')
generalQueryRx = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 6, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: generalQueryRx.setStatus('current')
if mibBuilder.loadTexts: generalQueryRx.setDescription('IGMP snooping general query Rx counter')
specialGroupQueryRx = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 6, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: specialGroupQueryRx.setStatus('current')
if mibBuilder.loadTexts: specialGroupQueryRx.setDescription('IGMP snooping special group query Rx counter')
specialGroupSourceQueryRx = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 6, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: specialGroupSourceQueryRx.setStatus('current')
if mibBuilder.loadTexts: specialGroupSourceQueryRx.setDescription('IGMP snooping special group source query Rx counter')
leaveTx = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 6, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: leaveTx.setStatus('current')
if mibBuilder.loadTexts: leaveTx.setDescription('IGMP snooping leave Tx counter')
reportTx = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 6, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reportTx.setStatus('current')
if mibBuilder.loadTexts: reportTx.setDescription('IGMP snooping report Tx counter')
generalQueryTx = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 6, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: generalQueryTx.setStatus('current')
if mibBuilder.loadTexts: generalQueryTx.setDescription('IGMP snooping general query Tx counter')
specialGroupQueryTx = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 6, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: specialGroupQueryTx.setStatus('current')
if mibBuilder.loadTexts: specialGroupQueryTx.setDescription('IGMP snooping special group query Tx counter')
specialGroupSourceQueryTx = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 6, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: specialGroupSourceQueryTx.setStatus('current')
if mibBuilder.loadTexts: specialGroupSourceQueryTx.setDescription('IGMP snooping special group source query Tx counter')
clearigmpStatistics = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 6, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clearigmpStatistics.setStatus('current')
if mibBuilder.loadTexts: clearigmpStatistics.setDescription('Clear IGMP snooping statistics counter')
mldtotalRx = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldtotalRx.setStatus('current')
if mibBuilder.loadTexts: mldtotalRx.setDescription('MLD total Rx counter')
mldvalidRx = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldvalidRx.setStatus('current')
if mibBuilder.loadTexts: mldvalidRx.setDescription('MLD valid Rx counter')
mldinvalidRx = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 7, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldinvalidRx.setStatus('current')
if mibBuilder.loadTexts: mldinvalidRx.setDescription('MLD invalid Rx counter')
mldotherRx = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 7, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldotherRx.setStatus('current')
if mibBuilder.loadTexts: mldotherRx.setDescription('MLD other Rx counter')
mldleaveRx = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 7, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldleaveRx.setStatus('current')
if mibBuilder.loadTexts: mldleaveRx.setDescription('MLD leave Rx counter')
mldreportRx = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 7, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldreportRx.setStatus('current')
if mibBuilder.loadTexts: mldreportRx.setDescription('MLD report Rx counter')
mldgeneralQueryRx = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 7, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldgeneralQueryRx.setStatus('current')
if mibBuilder.loadTexts: mldgeneralQueryRx.setDescription('MLD general query Rx counter')
mldspecialGroupQueryRx = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 7, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldspecialGroupQueryRx.setStatus('current')
if mibBuilder.loadTexts: mldspecialGroupQueryRx.setDescription('MLD special group query Rx counter')
mldspecialGroupSourceQueryRx = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 7, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldspecialGroupSourceQueryRx.setStatus('current')
if mibBuilder.loadTexts: mldspecialGroupSourceQueryRx.setDescription('MLD special group source query Rx counter')
mldleaveTx = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 7, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldleaveTx.setStatus('current')
if mibBuilder.loadTexts: mldleaveTx.setDescription('MLD leave Tx counter')
mldreportTx = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 7, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldreportTx.setStatus('current')
if mibBuilder.loadTexts: mldreportTx.setDescription('MLD report Tx counter')
mldgeneralQueryTx = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 7, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldgeneralQueryTx.setStatus('current')
if mibBuilder.loadTexts: mldgeneralQueryTx.setDescription('MLD general query Tx counter')
mldspecialGroupQueryTx = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 7, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldspecialGroupQueryTx.setStatus('current')
if mibBuilder.loadTexts: mldspecialGroupQueryTx.setDescription('MLD special group query Tx counter')
mldspecialGroupSourceQueryTx = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 7, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldspecialGroupSourceQueryTx.setStatus('current')
if mibBuilder.loadTexts: mldspecialGroupSourceQueryTx.setDescription('MLD special group source query Tx counter')
clearmldStatistics = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 1, 7, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clearmldStatistics.setStatus('current')
if mibBuilder.loadTexts: clearmldStatistics.setDescription('Clear MLD statistics counter')
ipSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 1))
ipv6Settings = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 2))
managementVlan = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: managementVlan.setStatus('current')
if mibBuilder.loadTexts: managementVlan.setDescription('This allows the entry of a VLAN from which a management station\n\t\t\t\t\twill be allowed to manage the device using TCP/IP (in-band via\n\t\t\t\t\tweb manager or Telnet). Management stations that are on VLANs\n\t\t\t\t\tother than the one seleted here will not be able to manage the\n\t\t\t\t\tSwitch. The default management VLAN is VLAN 1.')
systemTime = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 4))
sfp = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 5))
dhcpClientOpt82 = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 6))
networkPort = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 7))
ipv4Mode = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dhcp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4Mode.setStatus('current')
if mibBuilder.loadTexts: ipv4Mode.setDescription('the mode of network connection\n\t\t\t\t\tStatic: Enable static IP address.\n\t\t\t\t\tDHCP: Enable DHCP to obtain IP information from a\n\t\t\t\t\tDHCP server on the network.')
ipv4Address = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4Address.setStatus('current')
if mibBuilder.loadTexts: ipv4Address.setDescription('If static mode is enabled, enter IP address in this field.')
ipv4SubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4SubnetMask.setStatus('current')
if mibBuilder.loadTexts: ipv4SubnetMask.setDescription('If static mode is enabled, enter subnet mask in this field.')
ipv4Gateway = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4Gateway.setStatus('current')
if mibBuilder.loadTexts: ipv4Gateway.setDescription('If static mode is enabled, enter gateway address in this field.')
ipv4DnsServer1 = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4DnsServer1.setStatus('current')
if mibBuilder.loadTexts: ipv4DnsServer1.setDescription('If static mode is enabled, enter primary DNS server address\n\t\t\t\t\tin this field')
ipv4DnsServer2 = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4DnsServer2.setStatus('current')
if mibBuilder.loadTexts: ipv4DnsServer2.setDescription('If static mode is enabled, enter secondary DNS server address\n\t\t\t\t\tin this field')
interfaceIpv4Table = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 1, 7), )
if mibBuilder.loadTexts: interfaceIpv4Table.setStatus('current')
if mibBuilder.loadTexts: interfaceIpv4Table.setDescription('The table of interface IP address')
interfaceIpv4Entry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 1, 7, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "interfaceIpv4Index"))
if mibBuilder.loadTexts: interfaceIpv4Entry.setStatus('current')
if mibBuilder.loadTexts: interfaceIpv4Entry.setDescription('The entry of interface IP address')
interfaceIpv4Index = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceIpv4Index.setStatus('current')
if mibBuilder.loadTexts: interfaceIpv4Index.setDescription('The index of interface IPv4 table')
interfaceIpv4Vlan = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceIpv4Vlan.setStatus('current')
if mibBuilder.loadTexts: interfaceIpv4Vlan.setDescription('The VLAN ID of interface IPv4 table')
interfaceIpv4Mode = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dhcp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: interfaceIpv4Mode.setStatus('current')
if mibBuilder.loadTexts: interfaceIpv4Mode.setDescription('the mode of network connection\n\t\t\t\t\t\tStatic: Enable static IP address.\n\t\t\t\t\t\tDHCP: Enable DHCP to obtain IP information from a\n\t\t\t\t\t\tDHCP server on the network.')
interfaceIpv4Address = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 1, 7, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: interfaceIpv4Address.setStatus('current')
if mibBuilder.loadTexts: interfaceIpv4Address.setDescription('If static mode is enabled, enter IP address in this field.')
interfaceIpv4SubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 1, 7, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: interfaceIpv4SubnetMask.setStatus('current')
if mibBuilder.loadTexts: interfaceIpv4SubnetMask.setDescription('If static mode is enabled, enter subnet mask in this field.')
interfaceIpv4Gateway = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 1, 7, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: interfaceIpv4Gateway.setStatus('current')
if mibBuilder.loadTexts: interfaceIpv4Gateway.setDescription('If static mode is enabled, enter gateway address in this field.')
interCurrIpv4DhcpState = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 1, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: interCurrIpv4DhcpState.setStatus('current')
if mibBuilder.loadTexts: interCurrIpv4DhcpState.setDescription('The current status of IPv4 DHCP.')
interCurrIpv4Address = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 1, 7, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interCurrIpv4Address.setStatus('current')
if mibBuilder.loadTexts: interCurrIpv4Address.setDescription('The current IPv4 address')
interCurrIpv4SubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 1, 7, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interCurrIpv4SubnetMask.setStatus('current')
if mibBuilder.loadTexts: interCurrIpv4SubnetMask.setDescription('The current IPv4 subnet mask')
interCurrIpv4Gateway = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 1, 7, 1, 10), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interCurrIpv4Gateway.setStatus('current')
if mibBuilder.loadTexts: interCurrIpv4Gateway.setDescription('The current IPv4 gateway.')
autoConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoConfiguration.setStatus('current')
if mibBuilder.loadTexts: autoConfiguration.setDescription('IPv6 Auto Configuration state.')
ipv6Address = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 2, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6Address.setStatus('current')
if mibBuilder.loadTexts: ipv6Address.setDescription('If auto configuration mode is disabled, enter IPv6 address in\n\t\t\t\t\tthis field.')
ipv6SubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6SubnetMask.setStatus('current')
if mibBuilder.loadTexts: ipv6SubnetMask.setDescription('If auto configuration mode is disabled, enter IPv6 submask in\n\t\t\t\t\tthis field.')
ipv6Gateway = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 2, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6Gateway.setStatus('current')
if mibBuilder.loadTexts: ipv6Gateway.setDescription('If auto configuration mode is disabled, enter IPv6 gateway\n\t\t\t\t\taddress in this field.')
dhcpv6Client = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpv6Client.setStatus('current')
if mibBuilder.loadTexts: dhcpv6Client.setDescription('DHCPv6 client state')
ipv6InUseTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 2, 6), )
if mibBuilder.loadTexts: ipv6InUseTable.setStatus('current')
if mibBuilder.loadTexts: ipv6InUseTable.setDescription('The table of in-use IPv6 address')
ipv6InUseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 2, 6, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "ipv6InUseIndex"))
if mibBuilder.loadTexts: ipv6InUseEntry.setStatus('current')
if mibBuilder.loadTexts: ipv6InUseEntry.setDescription('The entry of in-use IPv6 address')
ipv6InUseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 2, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6InUseIndex.setStatus('current')
if mibBuilder.loadTexts: ipv6InUseIndex.setDescription('The current use IPv6 submask')
ipv6InUseAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 2, 6, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6InUseAddress.setStatus('current')
if mibBuilder.loadTexts: ipv6InUseAddress.setDescription('The current use IPv6 address')
ipv6InUseSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 2, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6InUseSubnetMask.setStatus('current')
if mibBuilder.loadTexts: ipv6InUseSubnetMask.setDescription('The current use IPv6 submask')
ipv6InUseRouter = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 2, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6InUseRouter.setStatus('current')
if mibBuilder.loadTexts: ipv6InUseRouter.setDescription('The current use IPv6 router address')
dhcpv6DUID = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 2, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpv6DUID.setStatus('current')
if mibBuilder.loadTexts: dhcpv6DUID.setDescription('The DHCPv6 DUID')
dhcpv6IPAddress = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 2, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpv6IPAddress.setStatus('current')
if mibBuilder.loadTexts: dhcpv6IPAddress.setDescription('The DHCPv6 IP address')
systemTimeSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 4, 1))
enableSNTP = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableSNTP.setStatus('current')
if mibBuilder.loadTexts: enableSNTP.setDescription('enable or disable using SNTP server.')
manualTime = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 4, 1, 2))
year = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 4, 1, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2000, 2035))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: year.setStatus('current')
if mibBuilder.loadTexts: year.setDescription('The year of the switch')
month = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 4, 1, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: month.setStatus('current')
if mibBuilder.loadTexts: month.setDescription('The month of the switch')
day = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 4, 1, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: day.setStatus('current')
if mibBuilder.loadTexts: day.setDescription('The day of the switch')
hours = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 4, 1, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hours.setStatus('current')
if mibBuilder.loadTexts: hours.setDescription('The hour of the switch')
minutes = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 4, 1, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: minutes.setStatus('current')
if mibBuilder.loadTexts: minutes.setDescription('The minutes of the switch')
seconds = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 4, 1, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: seconds.setStatus('current')
if mibBuilder.loadTexts: seconds.setDescription('The second of the switch')
timeZone = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91))).clone(namedValues=NamedValues(("none", 0), ("gmtminus1200-International-Date-Line-West", 1), ("gmtminus1100-MidwayIsland-Samoa", 2), ("gmtminus1000-Hawaii", 3), ("gmtminus0900-Alaska", 4), ("gmtminus0800-Pacific-Time-US-and-Canada", 5), ("gmtminus0800-Tijuana-Baja-California", 6), ("gmtminus0700-Arizona", 7), ("gmtminus0700-Chihuahua-La-Paz-Mazatlan-New", 8), ("gmtminus0700-Chihuahua-La-Paz-Mazatlan-Old", 9), ("gmtminus0700-Mountain-Time-US-and-Canada", 10), ("gmtminus0600-Central-America", 11), ("gmtminus0600-Central-Time-US-and-Canada", 12), ("gmtminus0600-Guadalajara-Mexico-City-Monterrey-New", 13), ("gmtminus0600-Guadalajara-Mexico-City-Monterrey-Old", 14), ("gmtminus0600-Saskatchewan", 15), ("gmtminus0500-Bogota-Lima-Quito-Rio-Branco", 16), ("gmtminus0500-Eastern-Time-US-and-Canada", 17), ("gmtminus0500-Indiana-East", 18), ("gmtminus0430-Caracas", 19), ("gmtminus0400-Atlantic-Time-Canada", 20), ("gmtminus0400-La-Paz", 21), ("gmtminus0400-Manaus", 22), ("gmtminus0400-Santiago", 23), ("gmtminus0330-Newfoundland", 24), ("gmtminus0300-Brasilia", 25), ("gmtminus0300-Buenos-Aires", 26), ("gmtminus0300-Georgetown", 27), ("gmtminus0300-Greenland", 28), ("gmtminus0300-Montevideo", 29), ("gmtminus0200-Mid-Atlantic", 30), ("gmtminus0100-Azores", 31), ("gmtminus0100-Cape-Verde-Is", 32), ("gmt-Casablanca", 33), ("gmt-Greenwich-Mean-Time-Dublin-Edinburgh-Lisbon-London", 34), ("gmt-Monrovia-Reykjavik", 35), ("gmtplus0100-Amsterdam-Berlin-Bern-Rome-Stockholm-Vienna", 36), ("gmtplus0100-Belgrade-Bratislava-Budapest-Ljubljana-Prague", 37), ("gmtplus0100-Brussels-Copenhagen-Madrid-Paris", 38), ("gmtplus0100-Sarajevo-Skopje-Warsaw-Zagreb", 39), ("gmtplus0100-West-Central-Africa", 40), ("gmtplus0200-Amman", 41), ("gmtplus0200-Athens-Bucharest-Istanbul", 42), ("gmtplus0200-Beirut", 43), ("gmtplus0200-Cairo", 44), ("gmtplus0200-Harare-Pretoria", 45), ("gmtplus0200-Helsinki-Kyiv-Riga-Sofia-Tallinn-Vilnius", 46), ("gmtplus0200-Jerusalem", 47), ("gmtplus0200-Minsk", 48), ("gmtplus0200-Windhoek", 49), ("gmtplus0300-Baghdad", 50), ("gmtplus0300-Kuwait-Riyadh", 51), ("gmtplus0300-Moscow-St-Petersburg-Volgograd", 52), ("gmtplus0300-Nairobi", 53), ("gmtplus0300-Tbilisi", 54), ("gmtplus0330-Tehran", 55), ("gmtplus0400-Abu-Dhabi-Muscat", 56), ("gmtplus0400-Baku", 57), ("gmtplus0400-Caucasus-Standard-Time", 58), ("gmtplus0400-Port-Louis", 59), ("gmtplus0400-Yerevan", 60), ("gmtplus0430-Kabul", 61), ("gmtplus0500-Ekaterinburg", 62), ("gmtplus0500-Islamabad-Karachi", 63), ("gmtplus0500-Tashkent", 64), ("gmtplus0530-Chennai-Kolkata-Mumbai-New-Delhi", 65), ("gmtplus0530-Sri-Jayawardenepura", 66), ("gmtplus0545-Kathmandu", 67), ("gmtplus0600-Almaty-Novosibirsk", 68), ("gmtplus0600-Astana-Dhaka", 69), ("gmtplus0630-Yangon-Rangoon", 70), ("gmtplus0700-Bangkok-Hanoi-Jakarta", 71), ("gmtplus0700-Krasnoyarsk", 72), ("gmtplus0800-Beijing-Chongqing-Hong-Kong-Urumqi", 73), ("gmtplus0800-Irkutsk-Ulaan-Bataar", 74), ("gmtplus0800-Kuala-Lumpur-Singapore", 75), ("gmtplus0800-Perth", 76), ("gmtplus0800-Taipei", 77), ("gmtplus0900-Osaka-Sapporo-Tokyo", 78), ("gmtplus0900-Seoul", 79), ("gmtplus0900-Yakutsk", 80), ("gmtplus0930-Adelaide", 81), ("gmtplus0930-Darwin", 82), ("gmtplus1000-Brisbane", 83), ("gmtplus1000-Canberra-Melbourne-Sydney", 84), ("gmtplus1000-Guam-Port-Moresby", 85), ("gmtplus1000-Hobart", 86), ("gmtplus1000-Vladivostok", 87), ("gmtplus1100-Magadan-Solomon-Is-New-Caledonia", 88), ("gmtplus1200-Auckland-Wellington", 89), ("gmtplus1200-Fiji-Kamchatka-Marshall-Is", 90), ("gmtplus1300-Nuku-alofa", 91)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeZone.setStatus('current')
if mibBuilder.loadTexts: timeZone.setDescription('The UTC Timezone of the switch.')
daylightSaving = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disable", 1), ("recurring", 2), ("no-recurring", 3), ("usa", 4), ("european", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: daylightSaving.setStatus('current')
if mibBuilder.loadTexts: daylightSaving.setDescription('the mode of daylight saving time.\n\t\t\t\t\tDisable: Disable daylight saving time.\n\t\t\t\t\tRecurring: Using recurring mode of daylight saving time\n\t\t\t\t\tNon-Recurring: Using non-recurring mode of daylight saving time\n\t\t\t\t\tUSA: Using daylight saving time in the United States that\n\t\t\t\t\tstarts on the second Sunday of March and ends on the first\n\t\t\t\t\tSunday of November\n\t\t\t\t\tEuropean: daylight saving time in the Europe that\n\t\t\t\t\tstarts on the last Sunday of March and ends on the last\n\t\t\t\t\tSunday of November')
daylightSavingOffset = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1440))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: daylightSavingOffset.setStatus('current')
if mibBuilder.loadTexts: daylightSavingOffset.setDescription('Specify the adjust offset of daylight saving time')
recurringFrom = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 4, 1, 6))
recFromDay = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 4, 1, 6, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recFromDay.setStatus('current')
if mibBuilder.loadTexts: recFromDay.setDescription('The starting day of recurring daylight saving time.')
recFromWeek = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 4, 1, 6, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recFromWeek.setStatus('current')
if mibBuilder.loadTexts: recFromWeek.setDescription('The starting week of recurring daylight saving time.')
recFromMonth = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 4, 1, 6, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recFromMonth.setStatus('current')
if mibBuilder.loadTexts: recFromMonth.setDescription('The starting month of recurring daylight saving time.')
recFromHours = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 4, 1, 6, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recFromHours.setStatus('current')
if mibBuilder.loadTexts: recFromHours.setDescription('The starting hour of recurring daylight saving time.')
recFromMinutes = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 4, 1, 6, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recFromMinutes.setStatus('current')
if mibBuilder.loadTexts: recFromMinutes.setDescription('The starting minutes of recurring daylight saving time.')
recurringTo = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 4, 1, 7))
recToDay = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 4, 1, 7, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recToDay.setStatus('current')
if mibBuilder.loadTexts: recToDay.setDescription('The ending day of recurring daylight saving time.')
recToWeek = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 4, 1, 7, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recToWeek.setStatus('current')
if mibBuilder.loadTexts: recToWeek.setDescription('The ending week of recurring daylight saving time.')
recToMonth = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 4, 1, 7, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recToMonth.setStatus('current')
if mibBuilder.loadTexts: recToMonth.setDescription('The ending month of recurring daylight saving time.')
recToHours = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 4, 1, 7, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recToHours.setStatus('current')
if mibBuilder.loadTexts: recToHours.setDescription('The ending hour of recurring daylight saving time.')
recToMinutes = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 4, 1, 7, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recToMinutes.setStatus('current')
if mibBuilder.loadTexts: recToMinutes.setDescription('The ending minute of recurring daylight saving time.')
nonRecurringFrom = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 4, 1, 8))
nonRecFromYear = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 4, 1, 8, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2000, 2037))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nonRecFromYear.setStatus('current')
if mibBuilder.loadTexts: nonRecFromYear.setDescription('The starting year of non-recurring daylight saving time.')
nonRecFromMonth = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 4, 1, 8, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nonRecFromMonth.setStatus('current')
if mibBuilder.loadTexts: nonRecFromMonth.setDescription('The starting month of non-recurring daylight saving time.')
nonRecFromDay = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 4, 1, 8, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nonRecFromDay.setStatus('current')
if mibBuilder.loadTexts: nonRecFromDay.setDescription('The starting day of non-recurring daylight saving time.')
nonRecFromHours = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 4, 1, 8, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nonRecFromHours.setStatus('current')
if mibBuilder.loadTexts: nonRecFromHours.setDescription('The starting hour of non-recurring daylight saving time.')
nonRecFromMinutes = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 4, 1, 8, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nonRecFromMinutes.setStatus('current')
if mibBuilder.loadTexts: nonRecFromMinutes.setDescription('The starting minute of non-recurring daylight saving time.')
nonRecurringTo = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 4, 1, 9))
nonRecToYear = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 4, 1, 9, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2000, 2037))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nonRecToYear.setStatus('current')
if mibBuilder.loadTexts: nonRecToYear.setDescription('The ending year of non-recurring daylight saving time.')
nonRecToMonth = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 4, 1, 9, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nonRecToMonth.setStatus('current')
if mibBuilder.loadTexts: nonRecToMonth.setDescription('The ending month of non-recurring daylight saving time.')
nonRecToDay = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 4, 1, 9, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nonRecToDay.setStatus('current')
if mibBuilder.loadTexts: nonRecToDay.setDescription('The ending day of non-recurring daylight saving time.')
nonRecToHours = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 4, 1, 9, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nonRecToHours.setStatus('current')
if mibBuilder.loadTexts: nonRecToHours.setDescription('The ending hour of non-recurring daylight saving time.')
nonRecToMinutes = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 4, 1, 9, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nonRecToMinutes.setStatus('current')
if mibBuilder.loadTexts: nonRecToMinutes.setDescription('The ending minute of non-recurring daylight saving time.')
serverAddress = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 4, 1, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverAddress.setStatus('current')
if mibBuilder.loadTexts: serverAddress.setDescription('IP address or hostname of time server')
serverPort = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 4, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverPort.setStatus('current')
if mibBuilder.loadTexts: serverPort.setDescription('Time server port number')
systemTimeStatus = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemTimeStatus.setStatus('current')
if mibBuilder.loadTexts: systemTimeStatus.setDescription('If user set system time with SNMP, the value sould not apply to\n\t\t\t\t\tswitch. They need to set active(1) to apply into switch')
systemTimeInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 4, 2))
currentDateTime = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 4, 2, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentDateTime.setStatus('current')
if mibBuilder.loadTexts: currentDateTime.setDescription('Current Date and Time on the device.')
currentSNTP = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 4, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSNTP.setStatus('current')
if mibBuilder.loadTexts: currentSNTP.setDescription('The status of SNTP server.')
currentSNTPServerAddr = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 4, 2, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSNTPServerAddr.setStatus('current')
if mibBuilder.loadTexts: currentSNTPServerAddr.setDescription('The IP address or hostname of SNTP server.')
currentSNTPServerPort = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 4, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSNTPServerPort.setStatus('current')
if mibBuilder.loadTexts: currentSNTPServerPort.setDescription('The port number of SNTP server.')
currentTimeZone = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 4, 2, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentTimeZone.setStatus('current')
if mibBuilder.loadTexts: currentTimeZone.setDescription('')
currentDaylightSavingStatus = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 4, 2, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentDaylightSavingStatus.setStatus('current')
if mibBuilder.loadTexts: currentDaylightSavingStatus.setDescription('')
currentDaylightSavingOffset = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 4, 2, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentDaylightSavingOffset.setStatus('current')
if mibBuilder.loadTexts: currentDaylightSavingOffset.setDescription('')
currentDaylightSavingFrom = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 4, 2, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentDaylightSavingFrom.setStatus('current')
if mibBuilder.loadTexts: currentDaylightSavingFrom.setDescription('')
currentDaylightSavingTo = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 4, 2, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentDaylightSavingTo.setStatus('current')
if mibBuilder.loadTexts: currentDaylightSavingTo.setDescription('')
sfpSerialInfoTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 5, 1), )
if mibBuilder.loadTexts: sfpSerialInfoTable.setStatus('current')
if mibBuilder.loadTexts: sfpSerialInfoTable.setDescription('The table of SFP serial info.')
sfpSerialInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 5, 1, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "sfpPortIndex"))
if mibBuilder.loadTexts: sfpSerialInfoEntry.setStatus('current')
if mibBuilder.loadTexts: sfpSerialInfoEntry.setDescription('The entry of SFP serial info.')
sfpPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 5, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpPortIndex.setStatus('current')
if mibBuilder.loadTexts: sfpPortIndex.setDescription('The index of SFP serial info.')
sfpConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConnector.setStatus('current')
if mibBuilder.loadTexts: sfpConnector.setDescription('The SFP connector')
sfpSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 5, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpSpeed.setStatus('current')
if mibBuilder.loadTexts: sfpSpeed.setDescription('The SFP speed')
sfpVendorName = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 5, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpVendorName.setStatus('current')
if mibBuilder.loadTexts: sfpVendorName.setDescription('The SFP vender name')
sfpVendorPn = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 5, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpVendorPn.setStatus('current')
if mibBuilder.loadTexts: sfpVendorPn.setDescription('The SFP vendor product number')
spfVendorRev = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 5, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spfVendorRev.setStatus('current')
if mibBuilder.loadTexts: spfVendorRev.setDescription('The SFP vender revision')
sfpVendorSn = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 5, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpVendorSn.setStatus('current')
if mibBuilder.loadTexts: sfpVendorSn.setDescription('The SFP vendor serial number')
sfpDateCode = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 5, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDateCode.setStatus('current')
if mibBuilder.loadTexts: sfpDateCode.setDescription('The SFP data code')
sfpDMIInfoTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 5, 2), )
if mibBuilder.loadTexts: sfpDMIInfoTable.setStatus('current')
if mibBuilder.loadTexts: sfpDMIInfoTable.setDescription('The table of SFP DMI info.')
sfpDMIInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 5, 2, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "sfpDMIPortIndex"))
if mibBuilder.loadTexts: sfpDMIInfoEntry.setStatus('current')
if mibBuilder.loadTexts: sfpDMIInfoEntry.setDescription('The entry of SFP DMI info.')
sfpDMIPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 5, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDMIPortIndex.setStatus('current')
if mibBuilder.loadTexts: sfpDMIPortIndex.setDescription('The index of SFP DMI info.')
sfpDMITemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 5, 2, 1, 2), DisplayString()).setUnits('C').setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDMITemperature.setStatus('current')
if mibBuilder.loadTexts: sfpDMITemperature.setDescription('The SFP DMI temperature')
sfpDMIVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 5, 2, 1, 3), DisplayString()).setUnits('V').setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDMIVoltage.setStatus('current')
if mibBuilder.loadTexts: sfpDMIVoltage.setDescription('The SFP DMI voltage')
sfpDMITxBias = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 5, 2, 1, 4), DisplayString()).setUnits('mA').setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDMITxBias.setStatus('current')
if mibBuilder.loadTexts: sfpDMITxBias.setDescription('The SFP DMI Tx bias')
sfpDMITxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 5, 2, 1, 5), DisplayString()).setUnits('dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDMITxPower.setStatus('current')
if mibBuilder.loadTexts: sfpDMITxPower.setDescription('The SFP DMI Tx power')
sfpDMIRxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 5, 2, 1, 6), DisplayString()).setUnits('dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDMIRxPower.setStatus('current')
if mibBuilder.loadTexts: sfpDMIRxPower.setDescription('The SFP DMI Rx power')
ddmDiagnosticAlarm = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("syslog", 2), ("email", 3), ("snmp", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ddmDiagnosticAlarm.setStatus('current')
if mibBuilder.loadTexts: ddmDiagnosticAlarm.setDescription('The DDM diagnostic alarm setting')
sfpDMIAlarmInfoTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 5, 4), )
if mibBuilder.loadTexts: sfpDMIAlarmInfoTable.setStatus('current')
if mibBuilder.loadTexts: sfpDMIAlarmInfoTable.setDescription('The table of SFP DMI alarm info.')
sfpDMIAlarmInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 5, 4, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "sfpDMIAlarmPortIndex"))
if mibBuilder.loadTexts: sfpDMIAlarmInfoEntry.setStatus('current')
if mibBuilder.loadTexts: sfpDMIAlarmInfoEntry.setDescription('The entry of SFP DMI alarm info.')
sfpDMIAlarmPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 5, 4, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDMIAlarmPortIndex.setStatus('current')
if mibBuilder.loadTexts: sfpDMIAlarmPortIndex.setDescription('The index of SFP DMI alarm info.')
sfpDMITempHighAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 5, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDMITempHighAlarmState.setStatus('current')
if mibBuilder.loadTexts: sfpDMITempHighAlarmState.setDescription('The state of SFP DMI temperature high alarm')
sfpDMITempHighAlarmValue = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 5, 4, 1, 3), DisplayString()).setUnits('C').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDMITempHighAlarmValue.setStatus('current')
if mibBuilder.loadTexts: sfpDMITempHighAlarmValue.setDescription('The value of SFP DMI temperature high alarm.\n\t\t\t\t\t\t The value range is 127 Degrees C ~ -127 Degrees C')
sfpDMITempHighWarnState = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 5, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDMITempHighWarnState.setStatus('current')
if mibBuilder.loadTexts: sfpDMITempHighWarnState.setDescription('The state of SFP DMI temperature high warning')
sfpDMITempHighWarnValue = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 5, 4, 1, 5), DisplayString()).setUnits('C').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDMITempHighWarnValue.setStatus('current')
if mibBuilder.loadTexts: sfpDMITempHighWarnValue.setDescription('The value of SFP DMI temperature high warning.\n\t\t\t\t\t\t The value range is 127 Degrees C ~ -127 Degrees C')
sfpDMITempLowAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 5, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDMITempLowAlarmState.setStatus('current')
if mibBuilder.loadTexts: sfpDMITempLowAlarmState.setDescription('The state of SFP DMI temperature low alarm')
sfpDMITempLowAlarmValue = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 5, 4, 1, 7), DisplayString()).setUnits('C').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDMITempLowAlarmValue.setStatus('current')
if mibBuilder.loadTexts: sfpDMITempLowAlarmValue.setDescription('The value of SFP DMI temperature low alarm.\n\t\t\t\t\t\t The value range is 127 Degrees C ~ -127 Degrees C')
sfpDMITempLowWarnState = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 5, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDMITempLowWarnState.setStatus('current')
if mibBuilder.loadTexts: sfpDMITempLowWarnState.setDescription('The state of SFP DMI temperature low warning')
sfpDMITempLowWarnValue = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 5, 4, 1, 9), DisplayString()).setUnits('C').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDMITempLowWarnValue.setStatus('current')
if mibBuilder.loadTexts: sfpDMITempLowWarnValue.setDescription('The value of SFP DMI temperature low warning.\n\t\t\t\t\t\t The value range is 127 Degrees C ~ -127 Degrees C')
sfpDMIVoltageHighAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 5, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDMIVoltageHighAlarmState.setStatus('current')
if mibBuilder.loadTexts: sfpDMIVoltageHighAlarmState.setDescription('The state of SFP DMI voltage high alarm')
sfpDMIVoltageHighAlarmValue = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 5, 4, 1, 11), DisplayString()).setUnits('V').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDMIVoltageHighAlarmValue.setStatus('current')
if mibBuilder.loadTexts: sfpDMIVoltageHighAlarmValue.setDescription('The value of SFP DMI voltage high alarm.\n\t\t\t\t\t\t The value range is 0.001~6V')
sfpDMIVoltageHighWarnState = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 5, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDMIVoltageHighWarnState.setStatus('current')
if mibBuilder.loadTexts: sfpDMIVoltageHighWarnState.setDescription('The state of SFP DMI voltage high warning')
sfpDMIVoltageHighWarnValue = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 5, 4, 1, 13), DisplayString()).setUnits('V').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDMIVoltageHighWarnValue.setStatus('current')
if mibBuilder.loadTexts: sfpDMIVoltageHighWarnValue.setDescription('The value of SFP DMI voltage high warning.\n\t\t\t\t\t\t The value range is 0.001~6V')
sfpDMIVoltageLowAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 5, 4, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDMIVoltageLowAlarmState.setStatus('current')
if mibBuilder.loadTexts: sfpDMIVoltageLowAlarmState.setDescription('The state of SFP DMI voltage low alarm')
sfpDMIVoltageLowAlarmValue = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 5, 4, 1, 15), DisplayString()).setUnits('V').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDMIVoltageLowAlarmValue.setStatus('current')
if mibBuilder.loadTexts: sfpDMIVoltageLowAlarmValue.setDescription('The value of SFP DMI voltage low alarm.\n\t\t\t\t\t\t The value range is 0.001~6V')
sfpDMIVoltageLowWarnState = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 5, 4, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDMIVoltageLowWarnState.setStatus('current')
if mibBuilder.loadTexts: sfpDMIVoltageLowWarnState.setDescription('The state of SFP DMI voltage low warning')
sfpDMIVoltageLowWarnValue = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 5, 4, 1, 17), DisplayString()).setUnits('V').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDMIVoltageLowWarnValue.setStatus('current')
if mibBuilder.loadTexts: sfpDMIVoltageLowWarnValue.setDescription('The value of SFP DMI voltage low warning.\n\t\t\t\t\t\t The value range is 0.001~6V')
sfpDMITxBasisHighAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 5, 4, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDMITxBasisHighAlarmState.setStatus('current')
if mibBuilder.loadTexts: sfpDMITxBasisHighAlarmState.setDescription('The state of SFP DMI TX Basis high alarm')
sfpDMITxBasisHighAlarmValue = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 5, 4, 1, 19), DisplayString()).setUnits('mA').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDMITxBasisHighAlarmValue.setStatus('current')
if mibBuilder.loadTexts: sfpDMITxBasisHighAlarmValue.setDescription('The value of SFP DMI TX Basis high alarm.\n\t\t\t\t\t\t The value range is 1~131mA')
sfpDMITxBasisHighWarnState = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 5, 4, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDMITxBasisHighWarnState.setStatus('current')
if mibBuilder.loadTexts: sfpDMITxBasisHighWarnState.setDescription('The state of SFP DMI TX Basis high warning')
sfpDMITxBasisHighWarnValue = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 5, 4, 1, 21), DisplayString()).setUnits('mA').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDMITxBasisHighWarnValue.setStatus('current')
if mibBuilder.loadTexts: sfpDMITxBasisHighWarnValue.setDescription('The value of SFP DMI TX Basis high warning.\n\t\t\t\t\t\t The value range is 1~131mA')
sfpDMITxBasisLowAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 5, 4, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDMITxBasisLowAlarmState.setStatus('current')
if mibBuilder.loadTexts: sfpDMITxBasisLowAlarmState.setDescription('The state of SFP DMI TX Basis low alarm')
sfpDMITxBasisLowAlarmValue = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 5, 4, 1, 23), DisplayString()).setUnits('mA').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDMITxBasisLowAlarmValue.setStatus('current')
if mibBuilder.loadTexts: sfpDMITxBasisLowAlarmValue.setDescription('The value of SFP DMI TX Basis low alarm.\n\t\t\t\t\t\t The value range is 1~131mA')
sfpDMITxBasisLowWarnState = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 5, 4, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDMITxBasisLowWarnState.setStatus('current')
if mibBuilder.loadTexts: sfpDMITxBasisLowWarnState.setDescription('The state of SFP DMI TX Basis low warning')
sfpDMITxBasisLowWarnValue = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 5, 4, 1, 25), DisplayString()).setUnits('mA').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDMITxBasisLowWarnValue.setStatus('current')
if mibBuilder.loadTexts: sfpDMITxBasisLowWarnValue.setDescription('The value of SFP DMI TX Basis low warning.\n\t\t\t\t\t\t The value range is 1~131mA')
sfpDMITxPowerHighAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 5, 4, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDMITxPowerHighAlarmState.setStatus('current')
if mibBuilder.loadTexts: sfpDMITxPowerHighAlarmState.setDescription('The state of SFP DMI TX power high alarm')
sfpDMITxPowerHighAlarmValue = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 5, 4, 1, 27), DisplayString()).setUnits('dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDMITxPowerHighAlarmValue.setStatus('current')
if mibBuilder.loadTexts: sfpDMITxPowerHighAlarmValue.setDescription('The value of SFP DMI TX power high alarm.\n\t\t\t\t\t\t The value range is 8~-39dbm')
sfpDMITxPowerHighWarnState = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 5, 4, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDMITxPowerHighWarnState.setStatus('current')
if mibBuilder.loadTexts: sfpDMITxPowerHighWarnState.setDescription('The state of SFP DMI TX power high warning')
sfpDMITxPowerHighWarnValue = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 5, 4, 1, 29), DisplayString()).setUnits('dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDMITxPowerHighWarnValue.setStatus('current')
if mibBuilder.loadTexts: sfpDMITxPowerHighWarnValue.setDescription('The value of SFP DMI TX power high warning.\n\t\t\t\t\t\t The value range is 8~-39dbm')
sfpDMITxPowerLowAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 5, 4, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDMITxPowerLowAlarmState.setStatus('current')
if mibBuilder.loadTexts: sfpDMITxPowerLowAlarmState.setDescription('The state of SFP DMI TX power low alarm')
sfpDMITxPowerLowAlarmValue = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 5, 4, 1, 31), DisplayString()).setUnits('dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDMITxPowerLowAlarmValue.setStatus('current')
if mibBuilder.loadTexts: sfpDMITxPowerLowAlarmValue.setDescription('The value of SFP DMI TX power low alarm.\n\t\t\t\t\t\t The value range is 8~-39dbm')
sfpDMITxPowerLowWarnState = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 5, 4, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDMITxPowerLowWarnState.setStatus('current')
if mibBuilder.loadTexts: sfpDMITxPowerLowWarnState.setDescription('The state of SFP DMI TX power low warning')
sfpDMITxPowerLowWarnValue = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 5, 4, 1, 33), DisplayString()).setUnits('dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDMITxPowerLowWarnValue.setStatus('current')
if mibBuilder.loadTexts: sfpDMITxPowerLowWarnValue.setDescription('The value of SFP DMI TX power low warning.\n\t\t\t\t\t\t The value range is 8~-39dbm')
sfpDMIRxPowerHighAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 5, 4, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDMIRxPowerHighAlarmState.setStatus('current')
if mibBuilder.loadTexts: sfpDMIRxPowerHighAlarmState.setDescription('The state of SFP DMI RX power high alarm')
sfpDMIRxPowerHighAlarmValue = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 5, 4, 1, 35), DisplayString()).setUnits('dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDMIRxPowerHighAlarmValue.setStatus('current')
if mibBuilder.loadTexts: sfpDMIRxPowerHighAlarmValue.setDescription('The value of SFP DMI RX power high alarm.\n\t\t\t\t\t\t The value range is 8~-39dbm')
sfpDMIRxPowerHighWarnState = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 5, 4, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDMIRxPowerHighWarnState.setStatus('current')
if mibBuilder.loadTexts: sfpDMIRxPowerHighWarnState.setDescription('The state of SFP DMI RX power high warning')
sfpDMIRxPowerHighWarnValue = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 5, 4, 1, 37), DisplayString()).setUnits('dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDMIRxPowerHighWarnValue.setStatus('current')
if mibBuilder.loadTexts: sfpDMIRxPowerHighWarnValue.setDescription('The value of SFP DMI RX power high warning.\n\t\t\t\t\t\t The value range is 8~-39dbm')
sfpDMIRxPowerLowAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 5, 4, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDMIRxPowerLowAlarmState.setStatus('current')
if mibBuilder.loadTexts: sfpDMIRxPowerLowAlarmState.setDescription('The state of SFP DMI RX power low alarm')
sfpDMIRxPowerLowAlarmValue = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 5, 4, 1, 39), DisplayString()).setUnits('dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDMIRxPowerLowAlarmValue.setStatus('current')
if mibBuilder.loadTexts: sfpDMIRxPowerLowAlarmValue.setDescription('The value of SFP DMI RX power low alarm.\n\t\t\t\t\t\t The value range is 8~-39dbm')
sfpDMIRxPowerLowWarnState = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 5, 4, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDMIRxPowerLowWarnState.setStatus('current')
if mibBuilder.loadTexts: sfpDMIRxPowerLowWarnState.setDescription('The state of SFP DMI RX power low warning')
sfpDMIRxPowerLowWarnValue = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 5, 4, 1, 41), DisplayString()).setUnits('dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDMIRxPowerLowWarnValue.setStatus('current')
if mibBuilder.loadTexts: sfpDMIRxPowerLowWarnValue.setDescription('The value of SFP DMI RX power low warning.\n\t\t\t\t\t\t The value range is 8~-39dbm')
dhcpClientOpt82Status = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpClientOpt82Status.setStatus('current')
if mibBuilder.loadTexts: dhcpClientOpt82Status.setDescription('')
dhcpClientOpt82CircuitIDFormat = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("string", 1), ("hex", 2), ("userDefined", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpClientOpt82CircuitIDFormat.setStatus('current')
if mibBuilder.loadTexts: dhcpClientOpt82CircuitIDFormat.setDescription('')
dhcpClientOpt82CircuitIDString = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 6, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpClientOpt82CircuitIDString.setStatus('current')
if mibBuilder.loadTexts: dhcpClientOpt82CircuitIDString.setDescription('')
dhcpClientOpt82CircuitIDHex = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 6, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpClientOpt82CircuitIDHex.setStatus('current')
if mibBuilder.loadTexts: dhcpClientOpt82CircuitIDHex.setDescription('')
dhcpClientOpt82CircuitIDUserDefine = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 6, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpClientOpt82CircuitIDUserDefine.setStatus('current')
if mibBuilder.loadTexts: dhcpClientOpt82CircuitIDUserDefine.setDescription('')
dhcpClientOpt82RemoteIDFormat = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 6, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("string", 1), ("hex", 2), ("userDefined", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpClientOpt82RemoteIDFormat.setStatus('current')
if mibBuilder.loadTexts: dhcpClientOpt82RemoteIDFormat.setDescription('')
dhcpClientOpt82RemoteIDString = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 6, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpClientOpt82RemoteIDString.setStatus('current')
if mibBuilder.loadTexts: dhcpClientOpt82RemoteIDString.setDescription('')
dhcpClientOpt82RemoteIDHex = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 6, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpClientOpt82RemoteIDHex.setStatus('current')
if mibBuilder.loadTexts: dhcpClientOpt82RemoteIDHex.setDescription('')
dhcpClientOpt82RemoteIDUserDefine = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 6, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpClientOpt82RemoteIDUserDefine.setStatus('current')
if mibBuilder.loadTexts: dhcpClientOpt82RemoteIDUserDefine.setDescription('')
httpNetworkPort = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 7, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpNetworkPort.setStatus('current')
if mibBuilder.loadTexts: httpNetworkPort.setDescription('The network port of http.')
httpsNetworkPort = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 7, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpsNetworkPort.setStatus('current')
if mibBuilder.loadTexts: httpsNetworkPort.setDescription('The network port of https.')
telnetNetworkPort = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 7, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetNetworkPort.setStatus('current')
if mibBuilder.loadTexts: telnetNetworkPort.setDescription('The network port of telnet.')
sshNetworkPort = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 2, 7, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshNetworkPort.setStatus('current')
if mibBuilder.loadTexts: sshNetworkPort.setDescription('The network port of ssh.')
portSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 1))
mirror = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 2))
lag = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 3))
vlan = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 4))
eee = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 5))
multicast = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6))
jamboFrame = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 7))
stp = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8))
qinqVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 9))
garp = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 10))
gvrp = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 11))
xRingElite = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 12))
loopback = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 13))
xRingPro = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 14))
gmrp = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 15))
erps = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 16))
portSettingTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 1, 1), )
if mibBuilder.loadTexts: portSettingTable.setStatus('current')
if mibBuilder.loadTexts: portSettingTable.setDescription('The table of port setting.')
portSettingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 1, 1, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "portSettingIndex"))
if mibBuilder.loadTexts: portSettingEntry.setStatus('current')
if mibBuilder.loadTexts: portSettingEntry.setDescription('The entry of port setting.')
portSettingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSettingIndex.setStatus('current')
if mibBuilder.loadTexts: portSettingIndex.setDescription('The index of port setting.')
description = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 1, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: description.setStatus('current')
if mibBuilder.loadTexts: description.setDescription('Port description')
enableState = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableState.setStatus('current')
if mibBuilder.loadTexts: enableState.setDescription('Port admin state')
linkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkStatus.setStatus('current')
if mibBuilder.loadTexts: linkStatus.setDescription('Port link status')
speed = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("auto", 1), ("auto-10M", 2), ("auto-100M", 3), ("auto-1000M", 4), ("auto-10M-100M", 5), ("fixed-10M", 6), ("fixed-100M", 7), ("fixed-1000M", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: speed.setStatus('current')
if mibBuilder.loadTexts: speed.setDescription('Port speed capabilities')
duplex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("auto", 1), ("half", 2), ("full", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: duplex.setStatus('current')
if mibBuilder.loadTexts: duplex.setDescription('Port duplex capabilities')
flowControlConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: flowControlConfig.setStatus('current')
if mibBuilder.loadTexts: flowControlConfig.setDescription('Port flow control setting')
flowControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowControlStatus.setStatus('current')
if mibBuilder.loadTexts: flowControlStatus.setDescription('Port flow control status')
mirrorTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 2, 1), )
if mibBuilder.loadTexts: mirrorTable.setStatus('current')
if mibBuilder.loadTexts: mirrorTable.setDescription('The table of mirror funciton')
mirrorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 2, 1, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "sessionId"))
if mibBuilder.loadTexts: mirrorEntry.setStatus('current')
if mibBuilder.loadTexts: mirrorEntry.setDescription('The entry of mirror funciton')
sessionId = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionId.setStatus('current')
if mibBuilder.loadTexts: sessionId.setDescription('Mirror session ID')
monitorSessionState = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("port-based", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: monitorSessionState.setStatus('current')
if mibBuilder.loadTexts: monitorSessionState.setDescription('Mirror session state')
destinationPort = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 2, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: destinationPort.setStatus('current')
if mibBuilder.loadTexts: destinationPort.setDescription('Mirror session destination port')
ingressState = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ingressState.setStatus('current')
if mibBuilder.loadTexts: ingressState.setDescription('Destination port ingress state')
sourceTxPort = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 2, 1, 1, 5), Bits().clone(namedValues=NamedValues(("port1", 0), ("port2", 1), ("port3", 2), ("port4", 3), ("port5", 4), ("port6", 5), ("port7", 6), ("port8", 7), ("port9", 8), ("port10", 9), ("port11", 10), ("port12", 11), ("port13", 12), ("port14", 13), ("port15", 14), ("port16", 15), ("port17", 16), ("port18", 17), ("port19", 18), ("port20", 19), ("port21", 20), ("port22", 21), ("port23", 22), ("port24", 23), ("port25", 24), ("port26", 25), ("port27", 26), ("port28", 27), ("port29", 28), ("port30", 29), ("port31", 30), ("port32", 31)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sourceTxPort.setStatus('current')
if mibBuilder.loadTexts: sourceTxPort.setDescription('Mirror session source tx ports only select portbased-enabled\n\t\t\t\t\t\tstate.')
sourceRxPort = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 2, 1, 1, 6), Bits().clone(namedValues=NamedValues(("port1", 0), ("port2", 1), ("port3", 2), ("port4", 3), ("port5", 4), ("port6", 5), ("port7", 6), ("port8", 7), ("port9", 8), ("port10", 9), ("port11", 10), ("port12", 11), ("port13", 12), ("port14", 13), ("port15", 14), ("port16", 15), ("port17", 16), ("port18", 17), ("port19", 18), ("port20", 19), ("port21", 20), ("port22", 21), ("port23", 22), ("port24", 23), ("port25", 24), ("port26", 25), ("port27", 26), ("port28", 27), ("port29", 28), ("port30", 29), ("port31", 30), ("port32", 31)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sourceRxPort.setStatus('current')
if mibBuilder.loadTexts: sourceRxPort.setDescription('Mirror session source rx ports only select portbased-enabled\n\t\t\t\t\t\tstate')
loadBalanceAlgorithm = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("mac-address", 1), ("ip-mac-address", 2), ("source-port", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loadBalanceAlgorithm.setStatus('current')
if mibBuilder.loadTexts: loadBalanceAlgorithm.setDescription('LAG load balance distribution algorithm.\n\t\t\t\t\tMAC Address: Based on source and destination MAC\n\t\t\t\t\taddress for all packets\n\t\t\t\t\tIP/MAC Address: Based on source and destination\n\t\t\t\t\tIP addresses for IP packet, and source and destination\n\t\t\t\t\tMAC address for non-IP packets.\n\t\t\t\t\tSource Port: Based on Source Port for all packets.')
lagManagementTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 3, 2), )
if mibBuilder.loadTexts: lagManagementTable.setStatus('current')
if mibBuilder.loadTexts: lagManagementTable.setDescription('The table of LAG management')
lagManagementEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 3, 2, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "lagIndex"))
if mibBuilder.loadTexts: lagManagementEntry.setStatus('current')
if mibBuilder.loadTexts: lagManagementEntry.setDescription('The entry of LAG management')
lagIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lagIndex.setStatus('current')
if mibBuilder.loadTexts: lagIndex.setDescription('The index of LAG management')
lagName = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 3, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lagName.setStatus('current')
if mibBuilder.loadTexts: lagName.setDescription('LAG port name')
lagType = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("static", 1), ("lacp", 2), ("none", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lagType.setStatus('current')
if mibBuilder.loadTexts: lagType.setDescription('the type of the LAG\n\t\t\t\t\t\tStatic: The group of ports assigned to a static LAG\n\t\t\t\t\t\tare always active members.\n\t\t\t\t\t\tLACP: The group of ports assigned to dynamic LAG\n\t\t\t\t\t\tare candidate ports. LACP determines which candidate\n\t\t\t\t\t\tports are active member ports.')
lagPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 3, 2, 1, 4), Bits().clone(namedValues=NamedValues(("port1", 0), ("port2", 1), ("port3", 2), ("port4", 3), ("port5", 4), ("port6", 5), ("port7", 6), ("port8", 7), ("port9", 8), ("port10", 9), ("port11", 10), ("port12", 11), ("port13", 12), ("port14", 13), ("port15", 14), ("port16", 15), ("port17", 16), ("port18", 17), ("port19", 18), ("port20", 19), ("port21", 20), ("port22", 21), ("port23", 22), ("port24", 23), ("port25", 24), ("port26", 25), ("port27", 26), ("port28", 27), ("port29", 28), ("port30", 29), ("port31", 30), ("port32", 31)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lagPorts.setStatus('current')
if mibBuilder.loadTexts: lagPorts.setDescription('the trunk member ports in this field')
lagLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("not-present", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lagLinkState.setStatus('current')
if mibBuilder.loadTexts: lagLinkState.setDescription('LAG port link status')
lagActiveMember = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 3, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lagActiveMember.setStatus('current')
if mibBuilder.loadTexts: lagActiveMember.setDescription('Active member ports of the LAG')
lagStandbyMember = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 3, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lagStandbyMember.setStatus('current')
if mibBuilder.loadTexts: lagStandbyMember.setDescription('Inactive or candidate member ports of the LAG')
lagPortTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 3, 3), )
if mibBuilder.loadTexts: lagPortTable.setStatus('current')
if mibBuilder.loadTexts: lagPortTable.setDescription('The table of LAG port')
lagPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 3, 3, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "lagPortIndex"))
if mibBuilder.loadTexts: lagPortEntry.setStatus('current')
if mibBuilder.loadTexts: lagPortEntry.setDescription('The entry of LAG port')
lagPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lagPortIndex.setStatus('current')
if mibBuilder.loadTexts: lagPortIndex.setDescription('The index of LAG port')
lagPortDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 3, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lagPortDescription.setStatus('current')
if mibBuilder.loadTexts: lagPortDescription.setDescription('The description of the LAG port')
lagPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 3, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lagPortType.setStatus('current')
if mibBuilder.loadTexts: lagPortType.setDescription('Member port media type')
lagPortEnableState = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lagPortEnableState.setStatus('current')
if mibBuilder.loadTexts: lagPortEnableState.setDescription('LAG port admin state')
lagPortLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lagPortLinkStatus.setStatus('current')
if mibBuilder.loadTexts: lagPortLinkStatus.setDescription('LAG port link status')
lagPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("auto", 1), ("auto-10M", 2), ("auto-100M", 3), ("auto-1000M", 4), ("auto-10M-100M", 5), ("fixed-10M", 6), ("fixed-100M", 7), ("fixed-1000M", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lagPortSpeed.setStatus('current')
if mibBuilder.loadTexts: lagPortSpeed.setDescription('Current LAG port speed')
lagPortDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 3, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("auto", 1), ("half", 2), ("full", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lagPortDuplex.setStatus('current')
if mibBuilder.loadTexts: lagPortDuplex.setDescription('Current LAG port duplex')
lagPortFlowCtrlConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 3, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lagPortFlowCtrlConfig.setStatus('current')
if mibBuilder.loadTexts: lagPortFlowCtrlConfig.setDescription('LAG port flow control configuration')
lagPortFlowCtrlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 3, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lagPortFlowCtrlStatus.setStatus('current')
if mibBuilder.loadTexts: lagPortFlowCtrlStatus.setDescription('Current LAG port flow control state')
lacpSystemPriority = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 3, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lacpSystemPriority.setStatus('current')
if mibBuilder.loadTexts: lacpSystemPriority.setDescription('Configure the system priority of LACP')
lacpPortTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 3, 5), )
if mibBuilder.loadTexts: lacpPortTable.setStatus('current')
if mibBuilder.loadTexts: lacpPortTable.setDescription('The table of LACP Port')
lacpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 3, 5, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "lacpPortIndex"))
if mibBuilder.loadTexts: lacpPortEntry.setStatus('current')
if mibBuilder.loadTexts: lacpPortEntry.setDescription('The entry of LACP Port')
lacpPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 3, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpPortIndex.setStatus('current')
if mibBuilder.loadTexts: lacpPortIndex.setDescription('The index of LACP Port')
lacpPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 3, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lacpPriority.setStatus('current')
if mibBuilder.loadTexts: lacpPriority.setDescription('LACP priority of the port')
lacpTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 3, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("long", 1), ("short", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lacpTimeout.setStatus('current')
if mibBuilder.loadTexts: lacpTimeout.setDescription('The periodic transmissions of LACP PDUs\n\t\t\t\t\t\tLong: Transmit LACP PDU with slow periodic (30s).\n\t\t\t\t\t\tShort: Transmit LACPP DU with fast periodic (1s).')
lacpPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 3, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("passive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lacpPortMode.setStatus('current')
if mibBuilder.loadTexts: lacpPortMode.setDescription('LACP mode of the port')
vlanTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 4, 1), )
if mibBuilder.loadTexts: vlanTable.setStatus('current')
if mibBuilder.loadTexts: vlanTable.setDescription('The table of VLAN')
vlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 4, 1, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "vlanIndex"))
if mibBuilder.loadTexts: vlanEntry.setStatus('current')
if mibBuilder.loadTexts: vlanEntry.setDescription('The entry of VLAN')
vlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanIndex.setStatus('current')
if mibBuilder.loadTexts: vlanIndex.setDescription('The index of VLAN')
vlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanId.setStatus('current')
if mibBuilder.loadTexts: vlanId.setDescription('The VLAN ID')
vlanNamePrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 4, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanNamePrefix.setStatus('current')
if mibBuilder.loadTexts: vlanNamePrefix.setDescription('The prefix string of the VLAN name')
vlanType = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("default", 1), ("static", 2), ("dyanmic", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanType.setStatus('current')
if mibBuilder.loadTexts: vlanType.setDescription('The VLAN type')
vlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 4, 1, 1, 99), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("createAndWait", 5), ("destory", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanRowStatus.setStatus('current')
if mibBuilder.loadTexts: vlanRowStatus.setDescription('User can use createAndWait(5) to create new entry.\n\t\t\t\t\t\tAfter setup the value, user use active(1) to set into switch.\n\t\t\t\t\t\tUser can use destory to delete(6) an entry.')
vlanInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 4, 2), )
if mibBuilder.loadTexts: vlanInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: vlanInterfaceTable.setDescription('The table of the VLN inetrface')
vlanInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 4, 2, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "vlanPortIndex"))
if mibBuilder.loadTexts: vlanInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: vlanInterfaceEntry.setDescription('The entry of the VLN inetrface')
vlanPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanPortIndex.setStatus('current')
if mibBuilder.loadTexts: vlanPortIndex.setDescription('The port index of the VLAN interface')
vlanInterfaceVlanMode = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("hybrid", 1), ("access", 2), ("trunk", 3), ("tunnel", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanInterfaceVlanMode.setStatus('current')
if mibBuilder.loadTexts: vlanInterfaceVlanMode.setDescription('VLAN mode for the interface.\n\t\t\t\t\t\tHybrid: support all functions as defined in IEEE 802.1Q\t\t\t\n\t\t\t\t\t\tAccess: Accepts only untagged frames and join an untagged VLAN\n\t\t\t\t\t\tTrunk: An ubtagged member of one VLAN at most, and is a tagged \n\t\t\t\t\t\tmember of zero or more VLANs.\n\t\t\t\t\t\tTunnel: Port-based Q-in-Q mode')
vlanPvid = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanPvid.setStatus('current')
if mibBuilder.loadTexts: vlanPvid.setDescription('The port-based VLAN ID, It only available with Hybrid and Trunk mode.')
vlanAcceptedType = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("all", 1), ("tag-only", 2), ("untag-only", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanAcceptedType.setStatus('current')
if mibBuilder.loadTexts: vlanAcceptedType.setDescription('the acceptable-frame-type of the specified interfaces. It is\n\t\t\t\t\t\tonly available with Hybrid mode.')
vlanIngressFiltering = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disbale", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanIngressFiltering.setStatus('current')
if mibBuilder.loadTexts: vlanIngressFiltering.setDescription('the status of ingress filtering. It is only available with\n\t\t\t\t\t\tHybrid mode.')
portToVlanTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 4, 3), )
if mibBuilder.loadTexts: portToVlanTable.setStatus('current')
if mibBuilder.loadTexts: portToVlanTable.setDescription('The table of Port to VLAN')
portToVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 4, 3, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "portToVlanVlanIndex"))
if mibBuilder.loadTexts: portToVlanEntry.setStatus('current')
if mibBuilder.loadTexts: portToVlanEntry.setDescription('The entry of Port to VLAN')
portToVlanVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portToVlanVlanIndex.setStatus('current')
if mibBuilder.loadTexts: portToVlanVlanIndex.setDescription('The index of Port to VLAN')
portToVlanPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 4, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portToVlanPortIndex.setStatus('current')
if mibBuilder.loadTexts: portToVlanPortIndex.setDescription('The port index of Port to VLAN')
portToVlanVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 4, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portToVlanVlanId.setStatus('current')
if mibBuilder.loadTexts: portToVlanVlanId.setDescription('VLAN ID')
portToVlanInterfaceVlanMode = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 4, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("hybrid", 1), ("access", 2), ("trunk", 3), ("tunnel", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portToVlanInterfaceVlanMode.setStatus('current')
if mibBuilder.loadTexts: portToVlanInterfaceVlanMode.setDescription('Display the interface VLAN mode of this port')
portToVlanMembership = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 4, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("forbidden", 1), ("exclued", 2), ("tagged", 3), ("untagged", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portToVlanMembership.setStatus('current')
if mibBuilder.loadTexts: portToVlanMembership.setDescription('the membership for this port with the specified VLAN ID.\n\t\t\t\t\t\tForbidden: Specify the port is forbidden in the VLAN.\n\t\t\t\t\t\tExcluded: Specify the port is excluded in the VLAN.\n\t\t\t\t\t\tTagged: Specify the port is tagged in the VLAN.\n\t\t\t\t\t\tUntagged: Specify the port is untagged in the VLAN.')
portToVlanPvid = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 4, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portToVlanPvid.setStatus('current')
if mibBuilder.loadTexts: portToVlanPvid.setDescription('the VLAN ID to be the port-based\n\t\t\t\t\t\tVLAN ID for this port.')
portVlanTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 4, 4), )
if mibBuilder.loadTexts: portVlanTable.setStatus('current')
if mibBuilder.loadTexts: portVlanTable.setDescription('The table of port VLAN')
portVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 4, 4, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "portVlanPortIndex"))
if mibBuilder.loadTexts: portVlanEntry.setStatus('current')
if mibBuilder.loadTexts: portVlanEntry.setDescription('The entry of port VLAN')
portVlanPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 4, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portVlanPortIndex.setStatus('current')
if mibBuilder.loadTexts: portVlanPortIndex.setDescription('The port index of port VLAN')
portVlanPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 4, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("hybrid", 1), ("access", 2), ("trunk", 3), ("tunnel", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portVlanPortMode.setStatus('current')
if mibBuilder.loadTexts: portVlanPortMode.setDescription('the interface VLAN mode of this port')
portVlanAdminVlans = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 4, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portVlanAdminVlans.setStatus('current')
if mibBuilder.loadTexts: portVlanAdminVlans.setDescription('the administrative VLAN list of this port')
portVlanOperVlans = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 4, 4, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portVlanOperVlans.setStatus('current')
if mibBuilder.loadTexts: portVlanOperVlans.setDescription('The operational VLAN list of this port')
voiceVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 4, 5))
voiceVlanState = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 4, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceVlanState.setStatus('current')
if mibBuilder.loadTexts: voiceVlanState.setDescription('Voice VLAN state')
voiceVlanId = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 4, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceVlanId.setStatus('current')
if mibBuilder.loadTexts: voiceVlanId.setDescription('Voice VLAN ID')
voiceVlanRemarkCos_8021p = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 4, 5, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setLabel("voiceVlanRemarkCos-8021p").setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceVlanRemarkCos_8021p.setStatus('current')
if mibBuilder.loadTexts: voiceVlanRemarkCos_8021p.setDescription('a value of vpt that will be advertised by LLDP-MED')
voiceVlanRemark1q = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 4, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceVlanRemark1q.setStatus('current')
if mibBuilder.loadTexts: voiceVlanRemark1q.setDescription('1p remark state')
voiceVlanAgingTime = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 4, 5, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceVlanAgingTime.setStatus('current')
if mibBuilder.loadTexts: voiceVlanAgingTime.setDescription('value of aging time')
telephonyOUITable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 4, 5, 6), )
if mibBuilder.loadTexts: telephonyOUITable.setStatus('current')
if mibBuilder.loadTexts: telephonyOUITable.setDescription('The table of OUI')
telephonyOUIEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 4, 5, 6, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "telephonyOUIIndex"))
if mibBuilder.loadTexts: telephonyOUIEntry.setStatus('current')
if mibBuilder.loadTexts: telephonyOUIEntry.setDescription('The entry of OUI')
telephonyOUIIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 4, 5, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: telephonyOUIIndex.setStatus('current')
if mibBuilder.loadTexts: telephonyOUIIndex.setDescription('The index of OUI')
telephonyOUIAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 4, 5, 6, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telephonyOUIAddress.setStatus('current')
if mibBuilder.loadTexts: telephonyOUIAddress.setDescription('oui address')
telephonyOUIDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 4, 5, 6, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telephonyOUIDescription.setStatus('current')
if mibBuilder.loadTexts: telephonyOUIDescription.setDescription('description of the specified MAC address to the voice VLAN OUI\n\t\t\t\t\t\ttable')
telephonyOUIRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 4, 5, 6, 1, 99), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("createAndWait", 5), ("destory", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: telephonyOUIRowStatus.setStatus('current')
if mibBuilder.loadTexts: telephonyOUIRowStatus.setDescription('User can use createAndWait(5) to create new entry.\n\t\t\t\t\t\tAfter setup the value, user use active(1) to set into switch.\n\t\t\t\t\t\tUser can use destory to delete(6) an entry.')
telephonyOUIPortTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 4, 5, 7), )
if mibBuilder.loadTexts: telephonyOUIPortTable.setStatus('current')
if mibBuilder.loadTexts: telephonyOUIPortTable.setDescription('The table of OUI port')
telephonyOUIPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 4, 5, 7, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "telephonyOUIPortIndex"))
if mibBuilder.loadTexts: telephonyOUIPortEntry.setStatus('current')
if mibBuilder.loadTexts: telephonyOUIPortEntry.setDescription('The entry of OUI port')
telephonyOUIPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 4, 5, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: telephonyOUIPortIndex.setStatus('current')
if mibBuilder.loadTexts: telephonyOUIPortIndex.setDescription('The port index of OUI port')
telephonyOUIState = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 4, 5, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telephonyOUIState.setStatus('current')
if mibBuilder.loadTexts: telephonyOUIState.setDescription('Ingress/Egress type value')
telephonyOUICosMode = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 4, 5, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("all", 1), ("src", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telephonyOUICosMode.setStatus('current')
if mibBuilder.loadTexts: telephonyOUICosMode.setDescription('port cos mode\n\t\t\t\t\t\tSrc: QoS attributes are applied to packets with OUIs in the source\n\t\t\t\t\t\tMAC address.\n\t\t\t\t\t\tAll: QoS attributes are applied to packets that are classified to the\n\t\t\t\t\t\tVoice VLAN')
interfaceVlanTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 4, 6), )
if mibBuilder.loadTexts: interfaceVlanTable.setStatus('current')
if mibBuilder.loadTexts: interfaceVlanTable.setDescription('The table of interface VLAN')
interfaceVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 4, 6, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "interfaceVlanIndex"))
if mibBuilder.loadTexts: interfaceVlanEntry.setStatus('current')
if mibBuilder.loadTexts: interfaceVlanEntry.setDescription('The entry of interface VLAN')
interfaceVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 4, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: interfaceVlanIndex.setStatus('current')
if mibBuilder.loadTexts: interfaceVlanIndex.setDescription('The index of interface VLAN')
interfaceVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 4, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: interfaceVlanId.setStatus('current')
if mibBuilder.loadTexts: interfaceVlanId.setDescription('The interface VLAN ID')
interfaceVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 4, 6, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceVlanName.setStatus('current')
if mibBuilder.loadTexts: interfaceVlanName.setDescription('The name of interface VLAN')
interfaceVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 4, 6, 1, 99), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("createAndWait", 5), ("destory", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: interfaceVlanRowStatus.setStatus('current')
if mibBuilder.loadTexts: interfaceVlanRowStatus.setDescription('User can use createAndWait(5) to create new entry.\n\t\t\t\t\t\tAfter setup the value, user use active(1) to set into switch.\n\t\t\t\t\t\tUser can use destory to delete(6) an entry.')
eeePortTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 5, 1), )
if mibBuilder.loadTexts: eeePortTable.setStatus('current')
if mibBuilder.loadTexts: eeePortTable.setDescription('The table of EEE Port')
eeePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 5, 1, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "eeePortIndex"))
if mibBuilder.loadTexts: eeePortEntry.setStatus('current')
if mibBuilder.loadTexts: eeePortEntry.setDescription('The entry of EEE Port')
eeePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eeePortIndex.setStatus('current')
if mibBuilder.loadTexts: eeePortIndex.setDescription('The port index of EEE Port')
eeeState = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eeeState.setStatus('current')
if mibBuilder.loadTexts: eeeState.setDescription('Port EEE function.')
unknownMulticastAction = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("drop", 1), ("flood", 2), ("routerPort", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unknownMulticastAction.setStatus('current')
if mibBuilder.loadTexts: unknownMulticastAction.setDescription('the unknown multicast action\n\t\t\t\t\tDrop: drop the unknown multicast data.\n\t\t\t\t\tFlood: flood the unknown multicast data.\n\t\t\t\t\tRouter port: forward the unknown multicast data to router\n\t\t\t\t\tport.')
forwardMethod = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("mac", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: forwardMethod.setStatus('current')
if mibBuilder.loadTexts: forwardMethod.setDescription('the multicast forward method.\n\t\t\t\t\tMAC: forward method dmac+vid.')
igmpSnooping = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 3))
igmpSnoopingState = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopingState.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopingState.setDescription('the enabling status of IGMP functionality')
igmpSnoopingVersion = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("v2", 1), ("v3", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopingVersion.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopingVersion.setDescription('the igmp snooping version\n\t\t\t\t\tv2: Only support process igmp v2 packet.\n\t\t\t\t\tv3: Support v3 basic and v2.')
igmpSnoopingReportSuppression = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopingReportSuppression.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopingReportSuppression.setDescription('the enabling status of IGMP v2 report suppression')
igmpSnoopingTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 3, 4), )
if mibBuilder.loadTexts: igmpSnoopingTable.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopingTable.setDescription('The table of IGMP snooping')
igmpSnoopingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 3, 4, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "igmpSnoopingIndex"))
if mibBuilder.loadTexts: igmpSnoopingEntry.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopingEntry.setDescription('The entry of IGMP snooping')
igmpSnoopingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopingIndex.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopingIndex.setDescription('The index of IGMP snooping')
igmpSnoopingVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4904))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopingVlanId.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopingVlanId.setDescription('The IGMP entry VLAN ID')
igmpSnoopStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopStatus.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopStatus.setDescription('The enable status of IGMP VLAN functionality')
routerPortsAutoLearn = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: routerPortsAutoLearn.setStatus('current')
if mibBuilder.loadTexts: routerPortsAutoLearn.setDescription('The enable statue of IGMP router port learning.')
queryRobustness = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 3, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: queryRobustness.setStatus('current')
if mibBuilder.loadTexts: queryRobustness.setDescription('The Robusstness Variable allows tuning for the expected packet loss\n\t\t\t\t\t\ton a subnet')
queryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 3, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 18000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: queryInterval.setStatus('current')
if mibBuilder.loadTexts: queryInterval.setDescription('The interval of querier send general query')
queryMaxResponseInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 3, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: queryMaxResponseInterval.setStatus('current')
if mibBuilder.loadTexts: queryMaxResponseInterval.setDescription('In Membership Query Message, it specifies the maximum allowed\n\t\t\t\t\t\ttime before sending a responding report in units of 1/10 second')
lastMemberQueryCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 3, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lastMemberQueryCounter.setStatus('current')
if mibBuilder.loadTexts: lastMemberQueryCounter.setDescription('The count that Querier-switch sends Group-Specific Queriers when\n\t\t\t\t\t\tit receives a Leave Group message for a group')
lastMemberQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 3, 4, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lastMemberQueryInterval.setStatus('current')
if mibBuilder.loadTexts: lastMemberQueryInterval.setDescription('The interval that Querier-switch sends Group-Specific Queriers\n\t\t\t\t\t\twhen it receives a Leave Group Message for a group')
immediateLeave = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 3, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: immediateLeave.setStatus('current')
if mibBuilder.loadTexts: immediateLeave.setDescription('Leave the group when receive IGMP Leave message.')
operQueryRobustness = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 3, 4, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: operQueryRobustness.setStatus('current')
if mibBuilder.loadTexts: operQueryRobustness.setDescription('The operation query robustness.')
operQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 3, 4, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: operQueryInterval.setStatus('current')
if mibBuilder.loadTexts: operQueryInterval.setDescription('The operation query interval.')
operQueryMaxResponseInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 3, 4, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: operQueryMaxResponseInterval.setStatus('current')
if mibBuilder.loadTexts: operQueryMaxResponseInterval.setDescription('The operating query max response interval.')
operLastMemberQueryCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 3, 4, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: operLastMemberQueryCounter.setStatus('current')
if mibBuilder.loadTexts: operLastMemberQueryCounter.setDescription('The operating last member query counter.')
operLastMemberQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 3, 4, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: operLastMemberQueryInterval.setStatus('current')
if mibBuilder.loadTexts: operLastMemberQueryInterval.setDescription('The operation last member query interval.')
igmpQuerierTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 3, 5), )
if mibBuilder.loadTexts: igmpQuerierTable.setStatus('current')
if mibBuilder.loadTexts: igmpQuerierTable.setDescription('The table of IGMP querier')
igmpQuerierEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 3, 5, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "igmpQuerierVlanId"))
if mibBuilder.loadTexts: igmpQuerierEntry.setStatus('current')
if mibBuilder.loadTexts: igmpQuerierEntry.setDescription('The entry of IGMP querier')
igmpQuerierVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 3, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpQuerierVlanId.setStatus('current')
if mibBuilder.loadTexts: igmpQuerierVlanId.setDescription('The VLAN ID of IGMP querier')
igmpQuerierState = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 3, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpQuerierState.setStatus('current')
if mibBuilder.loadTexts: igmpQuerierState.setDescription('The enabling status of IGMP Querier Election on the chose\n\t\t\t\t\t\tVLANs')
igmpQuerierStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 3, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("querier", 1), ("nonQuerier", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpQuerierStatus.setStatus('current')
if mibBuilder.loadTexts: igmpQuerierStatus.setDescription('The enabling status of IGMP Querier Election on the chose\n\t\t\t\t\t\tVLANs')
igmpQuerierVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 3, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("v2", 1), ("v3", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpQuerierVersion.setStatus('current')
if mibBuilder.loadTexts: igmpQuerierVersion.setDescription('The query version of IGMP Querier Election on the chose\n\t\t\t\t\t\tVLANs')
igmpQuerierIP = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 3, 5, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpQuerierIP.setStatus('current')
if mibBuilder.loadTexts: igmpQuerierIP.setDescription('The query IP address of IGMP Querier Election on the chose\n\t\t\t\t\t\tVLANs')
igmpStaticGroupTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 3, 6), )
if mibBuilder.loadTexts: igmpStaticGroupTable.setStatus('current')
if mibBuilder.loadTexts: igmpStaticGroupTable.setDescription('The table of IGMP static group')
igmpStaticGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 3, 6, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "igmpStaticGroupIndex"))
if mibBuilder.loadTexts: igmpStaticGroupEntry.setStatus('current')
if mibBuilder.loadTexts: igmpStaticGroupEntry.setDescription('The entry of IGMP static group')
igmpStaticGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 3, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpStaticGroupIndex.setStatus('current')
if mibBuilder.loadTexts: igmpStaticGroupIndex.setDescription('The index of IGMP static group')
igmpStaticGroupVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 3, 6, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpStaticGroupVlanId.setStatus('current')
if mibBuilder.loadTexts: igmpStaticGroupVlanId.setDescription('The VLAN ID of IGMP static group')
igmpStaticGroupIPaddress = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 3, 6, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpStaticGroupIPaddress.setStatus('current')
if mibBuilder.loadTexts: igmpStaticGroupIPaddress.setDescription('The IP address of this group')
igmpStaticGroupMemberPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 3, 6, 1, 4), Bits().clone(namedValues=NamedValues(("port1", 0), ("port2", 1), ("port3", 2), ("port4", 3), ("port5", 4), ("port6", 5), ("port7", 6), ("port8", 7), ("port9", 8), ("port10", 9), ("port11", 10), ("port12", 11), ("port13", 12), ("port14", 13), ("port15", 14), ("port16", 15), ("port17", 16), ("port18", 17), ("port19", 18), ("port20", 19), ("port21", 20), ("port22", 21), ("port23", 22), ("port24", 23), ("port25", 24), ("port26", 25), ("port27", 26), ("port28", 27), ("port29", 28), ("port30", 29), ("port31", 30), ("port32", 31)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpStaticGroupMemberPorts.setStatus('current')
if mibBuilder.loadTexts: igmpStaticGroupMemberPorts.setDescription('The member ports of this group')
igmpStaticGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 3, 6, 1, 99), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("createAndWait", 5), ("destory", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: igmpStaticGroupRowStatus.setStatus('current')
if mibBuilder.loadTexts: igmpStaticGroupRowStatus.setDescription('User can use createAndWait(5) to create new entry.\n\t\t\t\t\t\tAfter setup the value, user use active(1) to set into switch.\n\t\t\t\t\t\tUser can use destory to delete(6) an entry.')
igmpGroupTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 3, 7), )
if mibBuilder.loadTexts: igmpGroupTable.setStatus('current')
if mibBuilder.loadTexts: igmpGroupTable.setDescription('The table of IGMP group')
igmpGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 3, 7, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "igmpGroupVlanId"))
if mibBuilder.loadTexts: igmpGroupEntry.setStatus('current')
if mibBuilder.loadTexts: igmpGroupEntry.setDescription('The entry of IGMP group')
igmpGroupVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 3, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpGroupVlanId.setStatus('current')
if mibBuilder.loadTexts: igmpGroupVlanId.setDescription('The VLAN ID of IGMP group')
igmpGroupIPaddress = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 3, 7, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpGroupIPaddress.setStatus('current')
if mibBuilder.loadTexts: igmpGroupIPaddress.setDescription('The group IP address of this group')
igmpGroupMemberPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 3, 7, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpGroupMemberPorts.setStatus('current')
if mibBuilder.loadTexts: igmpGroupMemberPorts.setDescription('The member ports of this group')
igmpGroupType = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 3, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpGroupType.setStatus('current')
if mibBuilder.loadTexts: igmpGroupType.setDescription('The type of this group')
igmpGroupLife = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 3, 7, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpGroupLife.setStatus('current')
if mibBuilder.loadTexts: igmpGroupLife.setDescription('The life time of this group')
igmpRouterTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 3, 8), )
if mibBuilder.loadTexts: igmpRouterTable.setStatus('current')
if mibBuilder.loadTexts: igmpRouterTable.setDescription('The table of IGMP router')
igmpRouterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 3, 8, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "igmpRouterVlanId"))
if mibBuilder.loadTexts: igmpRouterEntry.setStatus('current')
if mibBuilder.loadTexts: igmpRouterEntry.setDescription('The entry of IGMP router')
igmpRouterVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 3, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpRouterVlanId.setStatus('current')
if mibBuilder.loadTexts: igmpRouterVlanId.setDescription('The VLAN ID of the IGMP router.')
igmpRouterPort = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 3, 8, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpRouterPort.setStatus('current')
if mibBuilder.loadTexts: igmpRouterPort.setDescription('The port of the IGMP router.')
igmpRouterExpireTime = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 3, 8, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpRouterExpireTime.setStatus('current')
if mibBuilder.loadTexts: igmpRouterExpireTime.setDescription('The expire time of the IGMP router.')
mldSnooping = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 4))
mldSnoopingState = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldSnoopingState.setStatus('current')
if mibBuilder.loadTexts: mldSnoopingState.setDescription('the enabling status of MLD functionality')
mldSnoopingVersion = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("v1", 1), ("v2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldSnoopingVersion.setStatus('current')
if mibBuilder.loadTexts: mldSnoopingVersion.setDescription('the MLD snooping version')
mldSnoopingReportSuppression = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldSnoopingReportSuppression.setStatus('current')
if mibBuilder.loadTexts: mldSnoopingReportSuppression.setDescription('the enabling status of MLD report suppression')
mldSnoopingTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 4, 4), )
if mibBuilder.loadTexts: mldSnoopingTable.setStatus('current')
if mibBuilder.loadTexts: mldSnoopingTable.setDescription('The table of MLD snooping')
mldSnoopingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 4, 4, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "mldSnoopingIndex"))
if mibBuilder.loadTexts: mldSnoopingEntry.setStatus('current')
if mibBuilder.loadTexts: mldSnoopingEntry.setDescription('The entry of MLD snooping')
mldSnoopingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 4, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldSnoopingIndex.setStatus('current')
if mibBuilder.loadTexts: mldSnoopingIndex.setDescription('The index of MLD snooping')
mldSnoopingVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 4, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4904))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldSnoopingVlanId.setStatus('current')
if mibBuilder.loadTexts: mldSnoopingVlanId.setDescription('The MLD entry VLAN ID')
mldSnoopStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 4, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldSnoopStatus.setStatus('current')
if mibBuilder.loadTexts: mldSnoopStatus.setDescription('The enable status of MLD VLAN functionality')
mldSnoopRouterPortsAutoLearn = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 4, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldSnoopRouterPortsAutoLearn.setStatus('current')
if mibBuilder.loadTexts: mldSnoopRouterPortsAutoLearn.setDescription('The enable statue of MLD router port learning.')
mldSnoopQueryRobustness = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 4, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldSnoopQueryRobustness.setStatus('current')
if mibBuilder.loadTexts: mldSnoopQueryRobustness.setDescription('The Robusstness Variable allows tuning for the expected packet loss\n\t\t\t\t\t\ton a subnet')
mldSnoopQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 4, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 18000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldSnoopQueryInterval.setStatus('current')
if mibBuilder.loadTexts: mldSnoopQueryInterval.setDescription('The interval of querier send general query')
mldSnoopQueryMaxResponseInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 4, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldSnoopQueryMaxResponseInterval.setStatus('current')
if mibBuilder.loadTexts: mldSnoopQueryMaxResponseInterval.setDescription('In Membership Query Message, it specifies the maximum allowed\n\t\t\t\t\t\ttime before sending a responding report in units of 1/10 second')
mldSnoopLastMemberQueryCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 4, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldSnoopLastMemberQueryCounter.setStatus('current')
if mibBuilder.loadTexts: mldSnoopLastMemberQueryCounter.setDescription('The count that Querier-switch sends Group-Specific Queriers when\n\t\t\t\t\t\tit receives a Leave Group message for a group')
mldSnoopLastMemberQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 4, 4, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldSnoopLastMemberQueryInterval.setStatus('current')
if mibBuilder.loadTexts: mldSnoopLastMemberQueryInterval.setDescription('The interval that Querier-switch sends Group-Specific Queriers\n\t\t\t\t\t\twhen it receives a Leave Group Message for a group')
mldSnoopImmediateLeave = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 4, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldSnoopImmediateLeave.setStatus('current')
if mibBuilder.loadTexts: mldSnoopImmediateLeave.setDescription('Leave the group when receive MLD Leave message.')
operMldSnoopQueryRobustness = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 4, 4, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: operMldSnoopQueryRobustness.setStatus('current')
if mibBuilder.loadTexts: operMldSnoopQueryRobustness.setDescription('The operation MLD query robustness.')
operMldSnoopQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 4, 4, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: operMldSnoopQueryInterval.setStatus('current')
if mibBuilder.loadTexts: operMldSnoopQueryInterval.setDescription('The operation MLD query interval.')
operMldSnoopQueryMaxResponseInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 4, 4, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: operMldSnoopQueryMaxResponseInterval.setStatus('current')
if mibBuilder.loadTexts: operMldSnoopQueryMaxResponseInterval.setDescription('The operating MLD query max response interval.')
operMldSnoopLastMemberQueryCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 4, 4, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: operMldSnoopLastMemberQueryCounter.setStatus('current')
if mibBuilder.loadTexts: operMldSnoopLastMemberQueryCounter.setDescription('The operating MLD last member query counter.')
operMldSnoopLastMemberQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 4, 4, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: operMldSnoopLastMemberQueryInterval.setStatus('current')
if mibBuilder.loadTexts: operMldSnoopLastMemberQueryInterval.setDescription('The operation MLD last member query interval.')
mldQuerierTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 4, 5), )
if mibBuilder.loadTexts: mldQuerierTable.setStatus('current')
if mibBuilder.loadTexts: mldQuerierTable.setDescription('The table of MLD querier')
mldQuerierEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 4, 5, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "mldQuerierVlanId"))
if mibBuilder.loadTexts: mldQuerierEntry.setStatus('current')
if mibBuilder.loadTexts: mldQuerierEntry.setDescription('The entry of MLD querier')
mldQuerierVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 4, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldQuerierVlanId.setStatus('current')
if mibBuilder.loadTexts: mldQuerierVlanId.setDescription('The VLAN ID of MLD querier')
mldQuerierState = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 4, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldQuerierState.setStatus('current')
if mibBuilder.loadTexts: mldQuerierState.setDescription('The enabling status of MLD Querier Election on the chose\n\t\t\t\t\t\tVLANs')
mldQuerierStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 4, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("querier", 1), ("nonQuerier", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldQuerierStatus.setStatus('current')
if mibBuilder.loadTexts: mldQuerierStatus.setDescription('The querier status of MLD Querier Election on the chose\n\t\t\t\t\t\tVLANs')
mldQuerierVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 4, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("v1", 1), ("v2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldQuerierVersion.setStatus('current')
if mibBuilder.loadTexts: mldQuerierVersion.setDescription('The query version of MLD Querier Election on the chose\n\t\t\t\t\t\tVLANs')
mldQuerierIP = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 4, 5, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldQuerierIP.setStatus('current')
if mibBuilder.loadTexts: mldQuerierIP.setDescription('The query IP address of MLD Querier Election on the chose\n\t\t\t\t\t\tVLANs')
mldStaticGroupTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 4, 6), )
if mibBuilder.loadTexts: mldStaticGroupTable.setStatus('current')
if mibBuilder.loadTexts: mldStaticGroupTable.setDescription('The table of MLD static group')
mldStaticGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 4, 6, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "mldStaticGroupIndex"))
if mibBuilder.loadTexts: mldStaticGroupEntry.setStatus('current')
if mibBuilder.loadTexts: mldStaticGroupEntry.setDescription('The entry of MLD static group')
mldStaticGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 4, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldStaticGroupIndex.setStatus('current')
if mibBuilder.loadTexts: mldStaticGroupIndex.setDescription('The index of MLD static group')
mldStaticGroupVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 4, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldStaticGroupVlanId.setStatus('current')
if mibBuilder.loadTexts: mldStaticGroupVlanId.setDescription('The VLAN ID of MLD static group')
mldStaticGroupIPaddress = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 4, 6, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldStaticGroupIPaddress.setStatus('current')
if mibBuilder.loadTexts: mldStaticGroupIPaddress.setDescription('The IP address of this group')
mldStaticGroupMemberPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 4, 6, 1, 4), Bits().clone(namedValues=NamedValues(("port1", 0), ("port2", 1), ("port3", 2), ("port4", 3), ("port5", 4), ("port6", 5), ("port7", 6), ("port8", 7), ("port9", 8), ("port10", 9), ("port11", 10), ("port12", 11), ("port13", 12), ("port14", 13), ("port15", 14), ("port16", 15), ("port17", 16), ("port18", 17), ("port19", 18), ("port20", 19), ("port21", 20), ("port22", 21), ("port23", 22), ("port24", 23), ("port25", 24), ("port26", 25), ("port27", 26), ("port28", 27), ("port29", 28), ("port30", 29), ("port31", 30), ("port32", 31)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldStaticGroupMemberPorts.setStatus('current')
if mibBuilder.loadTexts: mldStaticGroupMemberPorts.setDescription('The member ports of this group')
mldStaticGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 4, 6, 1, 99), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("createAndWait", 5), ("destory", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mldStaticGroupRowStatus.setStatus('current')
if mibBuilder.loadTexts: mldStaticGroupRowStatus.setDescription('User can use createAndWait(5) to create new entry.\n\t\t\t\t\t\tAfter setup the value, user use active(1) to set into switch.\n\t\t\t\t\t\tUser can use destory to delete(6) an entry.')
mldGroupTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 4, 7), )
if mibBuilder.loadTexts: mldGroupTable.setStatus('current')
if mibBuilder.loadTexts: mldGroupTable.setDescription('The table of MLD group')
mldGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 4, 7, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "mldGroupVlanId"))
if mibBuilder.loadTexts: mldGroupEntry.setStatus('current')
if mibBuilder.loadTexts: mldGroupEntry.setDescription('The entry of MLD group')
mldGroupVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 4, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldGroupVlanId.setStatus('current')
if mibBuilder.loadTexts: mldGroupVlanId.setDescription('The VLAN ID of MLD group')
mldGroupIPaddress = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 4, 7, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldGroupIPaddress.setStatus('current')
if mibBuilder.loadTexts: mldGroupIPaddress.setDescription('The group IP address of this group')
mldGroupMemberPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 4, 7, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldGroupMemberPorts.setStatus('current')
if mibBuilder.loadTexts: mldGroupMemberPorts.setDescription('The member ports of this group')
mldGroupType = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 4, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldGroupType.setStatus('current')
if mibBuilder.loadTexts: mldGroupType.setDescription('The type of this group')
mldGroupLife = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 4, 7, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldGroupLife.setStatus('current')
if mibBuilder.loadTexts: mldGroupLife.setDescription('The life time of this group')
mldRouterTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 4, 8), )
if mibBuilder.loadTexts: mldRouterTable.setStatus('current')
if mibBuilder.loadTexts: mldRouterTable.setDescription('The table of MLD router')
mldRouterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 4, 8, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "mldRouterVlanId"))
if mibBuilder.loadTexts: mldRouterEntry.setStatus('current')
if mibBuilder.loadTexts: mldRouterEntry.setDescription('The entry of MLD router')
mldRouterVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 4, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldRouterVlanId.setStatus('current')
if mibBuilder.loadTexts: mldRouterVlanId.setDescription('The VLAN ID of the MLD router.')
mldRouterPort = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 4, 8, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldRouterPort.setStatus('current')
if mibBuilder.loadTexts: mldRouterPort.setDescription('The port of the MLD router.')
mldRouterExpireTime = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 6, 4, 8, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldRouterExpireTime.setStatus('current')
if mibBuilder.loadTexts: mldRouterExpireTime.setDescription('The expire time of the MLD router.')
jamboFramePktSize = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 7, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1518, 9216))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jamboFramePktSize.setStatus('current')
if mibBuilder.loadTexts: jamboFramePktSize.setDescription('Jumbo frame size')
stpEnable = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpEnable.setStatus('current')
if mibBuilder.loadTexts: stpEnable.setDescription('Specify the STP status to be enable/disable on the switch.\n\t\t\t\t\tEnable STP will block all switch port and SNMP set will timeout.')
bpduForward = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("flooding", 1), ("filtering", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bpduForward.setStatus('current')
if mibBuilder.loadTexts: bpduForward.setDescription('The BPDU forwarding action when the global STP is disable')
pathCostMethod = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("short", 1), ("long", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pathCostMethod.setStatus('current')
if mibBuilder.loadTexts: pathCostMethod.setDescription('The path cost method of STP')
forceVersion = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("stp-compatible", 1), ("rstp-operation", 2), ("mstp-operation", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: forceVersion.setStatus('current')
if mibBuilder.loadTexts: forceVersion.setDescription('The operating mode of STP\n\t\t\t\t\tSTP-compatible: IEEE 802.1D STP operation\n\t\t\t\t\tRSTP-Operation: IEEE 802.1W operation')
stpPortTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 5), )
if mibBuilder.loadTexts: stpPortTable.setStatus('current')
if mibBuilder.loadTexts: stpPortTable.setDescription('The table of STP port')
stpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 5, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "stpPortIndex"))
if mibBuilder.loadTexts: stpPortEntry.setStatus('current')
if mibBuilder.loadTexts: stpPortEntry.setDescription('The entry of STP port')
stpPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpPortIndex.setStatus('current')
if mibBuilder.loadTexts: stpPortIndex.setDescription('The port index of STP')
stpAdminEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpAdminEnable.setStatus('current')
if mibBuilder.loadTexts: stpAdminEnable.setDescription('enable/disable the STP port state')
stpPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 5, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpPathCost.setStatus('current')
if mibBuilder.loadTexts: stpPathCost.setDescription("the port is contribution, when it is the Root Port, to the Root\n \t\t\t\t\t\tPath Cost for the Bridge. (0 means 'Auto')")
stpEdgePort = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpEdgePort.setStatus('current')
if mibBuilder.loadTexts: stpEdgePort.setDescription('the edge port configuration:\n\t\t\t\t\t\tNo: Force to false state (as link to a bridge).\n\t\t\t\t\t\tYes: Force to true state (as link to a host).')
stpP2pMac = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpP2pMac.setStatus('current')
if mibBuilder.loadTexts: stpP2pMac.setDescription('the Point-to-Point port configuration:')
stpMigrate = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpMigrate.setStatus('current')
if mibBuilder.loadTexts: stpMigrate.setDescription('Force to try to use the new MST/RST BPDUs, and hence to test the\n\t\t\t\t\t\thypothesis that all legacy systems that do not understand the new\n\t\t\t\t\t\tBPDU formats have been removed from the LAN segment on the\n\t\t\t\t\t\tport(s).')
stpBridgeInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 6))
stpBridgePriority = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 6, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpBridgePriority.setStatus('current')
if mibBuilder.loadTexts: stpBridgePriority.setDescription('the Bridge Priority in the CIST instance. Priority support the\n\t\t\t\t\t\tfollowing value: 0, 4096, 8192, 12288, 16384, 20480, 24576, 28672,\n\t\t\t\t\t\t32768, 36864, 40960, 45056, 49152, 53248, 57344, 61440')
stpBridgeForwardDelay = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 6, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpBridgeForwardDelay.setStatus('current')
if mibBuilder.loadTexts: stpBridgeForwardDelay.setDescription('the delay time an interface takes to converge from blocking\n\t\t\t\t\t\tstate to forwarding state.\n\t\t\t\t\t\tMax Age <= 2*(Forward Delay Time - 1)')
stpBridgeMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 6, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(6, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpBridgeMaxAge.setStatus('current')
if mibBuilder.loadTexts: stpBridgeMaxAge.setDescription('the time any switch should wait before trying to change the STP\n\t\t\t\t\t\ttopology after unhearing Hello BPUD.\n\t\t\t\t\t\tMax Age <= 2*(Forward Delay Time - 1)\n\t\t\t\t\t\tMax Age >= 2*(Hello Time + 1)')
stpBridgeTxHoldCount = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 6, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpBridgeTxHoldCount.setStatus('current')
if mibBuilder.loadTexts: stpBridgeTxHoldCount.setDescription('the Transmit Hold Count used to limit BPDU transmission rate.')
stpBridgeHelloTime = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 6, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpBridgeHelloTime.setStatus('current')
if mibBuilder.loadTexts: stpBridgeHelloTime.setDescription('the interval between periodic transmissions of BPDU by\n\t\t\t\t\t\tDesignated Ports.\n\t\t\t\t\t\tMax Age >= 2*(Hello Time + 1)')
stpBridgeStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 7))
bridgeIdentifier = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 7, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeIdentifier.setStatus('current')
if mibBuilder.loadTexts: bridgeIdentifier.setDescription('STP bridge identifier')
definatedRootBridge = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 7, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: definatedRootBridge.setStatus('current')
if mibBuilder.loadTexts: definatedRootBridge.setDescription('STP destination root bridge ID')
rootPathCost = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 7, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rootPathCost.setStatus('current')
if mibBuilder.loadTexts: rootPathCost.setDescription('STP root path cost')
designatedBridge = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 7, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: designatedBridge.setStatus('current')
if mibBuilder.loadTexts: designatedBridge.setDescription('STP designated bridge')
rootPort = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 7, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rootPort.setStatus('current')
if mibBuilder.loadTexts: rootPort.setDescription('STP root port')
lastTopologyChange = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 7, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lastTopologyChange.setStatus('current')
if mibBuilder.loadTexts: lastTopologyChange.setDescription('STP last topology change')
stpPortStatusTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 8), )
if mibBuilder.loadTexts: stpPortStatusTable.setStatus('current')
if mibBuilder.loadTexts: stpPortStatusTable.setDescription('The table of STP port status')
stpPortStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 8, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "stpPortStatusIndex"))
if mibBuilder.loadTexts: stpPortStatusEntry.setStatus('current')
if mibBuilder.loadTexts: stpPortStatusEntry.setDescription('The entry of STP port status')
stpPortStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpPortStatusIndex.setStatus('current')
if mibBuilder.loadTexts: stpPortStatusIndex.setDescription('The index of STP port status')
stpPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 8, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpPortPriority.setStatus('current')
if mibBuilder.loadTexts: stpPortPriority.setDescription('The Port Priority to the selected ports in the CIST instance.\n\t\t\t\t\t\tPriority support the following value: 0, 16, 32, 48, 64, 80, 96,\n\t\t\t\t\t\t112, 128, 144, 160, 176, 192, 208, 224, 240')
stpPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 8, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpPortPathCost.setStatus('current')
if mibBuilder.loadTexts: stpPortPathCost.setDescription('Path Cost to the selected ports in the CIST instance.\n\t\t\t\t\t\t(0 means `Auto`)')
stpPortDesignatedRootBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 8, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpPortDesignatedRootBridge.setStatus('current')
if mibBuilder.loadTexts: stpPortDesignatedRootBridge.setDescription('The designated root bridge')
stpPortRootPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 8, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpPortRootPathCost.setStatus('current')
if mibBuilder.loadTexts: stpPortRootPathCost.setDescription('The root path cost')
stpPortDesignatedBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 8, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpPortDesignatedBridge.setStatus('current')
if mibBuilder.loadTexts: stpPortDesignatedBridge.setDescription('The designated bridge')
stpPortEdgrPortConf = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 8, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpPortEdgrPortConf.setStatus('current')
if mibBuilder.loadTexts: stpPortEdgrPortConf.setDescription('The edge port configuration')
stpPortP2PMacConf = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 8, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpPortP2PMacConf.setStatus('current')
if mibBuilder.loadTexts: stpPortP2PMacConf.setDescription('The point-to-point MAC configuration')
stpPortRoles = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 8, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disabled", 0), ("master", 1), ("root", 2), ("designated", 3), ("alternate", 4), ("backup", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpPortRoles.setStatus('current')
if mibBuilder.loadTexts: stpPortRoles.setDescription('The port roles')
stpPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 8, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disabled", 0), ("discarding", 1), ("learning", 2), ("forwarding", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpPortStatus.setStatus('current')
if mibBuilder.loadTexts: stpPortStatus.setDescription('The port status')
stpStatisticTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 9), )
if mibBuilder.loadTexts: stpStatisticTable.setStatus('current')
if mibBuilder.loadTexts: stpStatisticTable.setDescription('The table of STP statistic')
stpStatisticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 9, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "stpStatisticPortIndex"))
if mibBuilder.loadTexts: stpStatisticEntry.setStatus('current')
if mibBuilder.loadTexts: stpStatisticEntry.setDescription('The entry of STP statistic')
stpStatisticPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpStatisticPortIndex.setStatus('current')
if mibBuilder.loadTexts: stpStatisticPortIndex.setDescription('The port index of STP statistic')
configurationBPDUsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 9, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: configurationBPDUsReceived.setStatus('current')
if mibBuilder.loadTexts: configurationBPDUsReceived.setDescription('The configuration BPDU received')
tcnBPDUsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 9, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcnBPDUsReceived.setStatus('current')
if mibBuilder.loadTexts: tcnBPDUsReceived.setDescription('The TCN BPDU received')
configurationBPDUsTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 9, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: configurationBPDUsTransmitted.setStatus('current')
if mibBuilder.loadTexts: configurationBPDUsTransmitted.setDescription('The configuration BPDU transmitted')
tcnBPDUsTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 9, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcnBPDUsTransmitted.setStatus('current')
if mibBuilder.loadTexts: tcnBPDUsTransmitted.setDescription('The TCN BPDU transmitted')
mstp = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 10))
mstConfigIdentification = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 10, 1))
mstConfigName = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 10, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstConfigName.setStatus('current')
if mibBuilder.loadTexts: mstConfigName.setDescription('The configuration name of MSTP')
mstRevisionLevel = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 10, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstRevisionLevel.setStatus('current')
if mibBuilder.loadTexts: mstRevisionLevel.setDescription('The revision level of MSTP')
mstInstanceID = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 10, 2))
mstiIDSetting = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 10, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstiIDSetting.setStatus('current')
if mibBuilder.loadTexts: mstiIDSetting.setDescription('The MSTI ID of MST instance ID')
mstiVlanListSetting = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 10, 2, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstiVlanListSetting.setStatus('current')
if mibBuilder.loadTexts: mstiVlanListSetting.setDescription('The VLAN list of MST instance ID')
mstiIDSettingMove = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 10, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nothing", 1), ("move", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstiIDSettingMove.setStatus('current')
if mibBuilder.loadTexts: mstiIDSettingMove.setDescription('The moving action of MST instance ID')
mstiIDInfoTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 10, 2, 4), )
if mibBuilder.loadTexts: mstiIDInfoTable.setStatus('current')
if mibBuilder.loadTexts: mstiIDInfoTable.setDescription('The table of MST instance ID info')
mstiIDInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 10, 2, 4, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "mstiIDIndex"))
if mibBuilder.loadTexts: mstiIDInfoEntry.setStatus('current')
if mibBuilder.loadTexts: mstiIDInfoEntry.setDescription('The entry of MST instance ID info')
mstiIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 10, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstiIDIndex.setStatus('current')
if mibBuilder.loadTexts: mstiIDIndex.setDescription('The MSTI ID of MST instance ID info')
mstiVLANList = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 10, 2, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstiVLANList.setStatus('current')
if mibBuilder.loadTexts: mstiVLANList.setDescription('The VLAN List of MST instance ID info')
stpInstance = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 10, 3))
stpPriorityInfoTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 10, 3, 1), )
if mibBuilder.loadTexts: stpPriorityInfoTable.setStatus('current')
if mibBuilder.loadTexts: stpPriorityInfoTable.setDescription('The table of STP priority info')
stpPriorityInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 10, 3, 1, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "stpMstiIDIndex"))
if mibBuilder.loadTexts: stpPriorityInfoEntry.setStatus('current')
if mibBuilder.loadTexts: stpPriorityInfoEntry.setDescription('The entry of STP priority info')
stpMstiIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 10, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpMstiIDIndex.setStatus('current')
if mibBuilder.loadTexts: stpMstiIDIndex.setDescription('The MSTI ID of STP instance info')
stpPriorityValue = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 10, 3, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpPriorityValue.setStatus('current')
if mibBuilder.loadTexts: stpPriorityValue.setDescription('The priority of STP instance info. Priority support the\n\t\t\t\t\t\tfollowing value: 0, 4096, 8192, 12288, 16384, 20480, 24576, 28672,\n\t\t\t\t\t\t32768, 36864, 40960, 45056, 49152, 53248, 57344, 61440')
stpPriorityDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 10, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nothing", 1), ("default", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpPriorityDefault.setStatus('current')
if mibBuilder.loadTexts: stpPriorityDefault.setDescription('Set the priority to default value.')
mstInstanceInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 10, 4))
mstBridgeIdentifier = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 10, 4, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstBridgeIdentifier.setStatus('current')
if mibBuilder.loadTexts: mstBridgeIdentifier.setDescription('STP bridge identifier in MST')
mstDesignatedRootBridge = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 10, 4, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstDesignatedRootBridge.setStatus('current')
if mibBuilder.loadTexts: mstDesignatedRootBridge.setDescription('STP destination root bridge ID in MST')
mstRootPathCost = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 10, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstRootPathCost.setStatus('current')
if mibBuilder.loadTexts: mstRootPathCost.setDescription('STP root path cost in MST')
mstDesignatedBridge = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 10, 4, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstDesignatedBridge.setStatus('current')
if mibBuilder.loadTexts: mstDesignatedBridge.setDescription('STP designated bridge in MST')
mstRootPort = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 10, 4, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstRootPort.setStatus('current')
if mibBuilder.loadTexts: mstRootPort.setDescription('STP root port in MST')
mstLastTopologyChange = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 10, 4, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstLastTopologyChange.setStatus('current')
if mibBuilder.loadTexts: mstLastTopologyChange.setDescription('STP last topology change in MST')
mstStpPortStatusTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 10, 4, 7), )
if mibBuilder.loadTexts: mstStpPortStatusTable.setStatus('current')
if mibBuilder.loadTexts: mstStpPortStatusTable.setDescription('The table of STP port status in MST')
mstStpPortStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 10, 4, 7, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "mstStpPortStatusIndex"))
if mibBuilder.loadTexts: mstStpPortStatusEntry.setStatus('current')
if mibBuilder.loadTexts: mstStpPortStatusEntry.setDescription('The entry of STP port status in MST')
mstStpPortStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 10, 4, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstStpPortStatusIndex.setStatus('current')
if mibBuilder.loadTexts: mstStpPortStatusIndex.setDescription('The index of STP port status in MST')
mstStpPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 10, 4, 7, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstStpPortPriority.setStatus('current')
if mibBuilder.loadTexts: mstStpPortPriority.setDescription('The Port Priority to the selected ports in the CIST instance.\n\t\t\t\t\t\tPriority support the following value: 0, 16, 32, 48, 64, 80, 96,\n\t\t\t\t\t\t112, 128, 144, 160, 176, 192, 208, 224, 240')
mstStpPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 10, 4, 7, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstStpPortPathCost.setStatus('current')
if mibBuilder.loadTexts: mstStpPortPathCost.setDescription('Path Cost to the selected ports in the CIST instance.\n\t\t\t\t\t\t(0 means `Auto`)')
mstStpPortDesignatedRootBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 10, 4, 7, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstStpPortDesignatedRootBridge.setStatus('current')
if mibBuilder.loadTexts: mstStpPortDesignatedRootBridge.setDescription('The designated root bridge')
mstStpPortRootPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 10, 4, 7, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstStpPortRootPathCost.setStatus('current')
if mibBuilder.loadTexts: mstStpPortRootPathCost.setDescription('The root path cost')
mstStpPortDesignatedBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 10, 4, 7, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstStpPortDesignatedBridge.setStatus('current')
if mibBuilder.loadTexts: mstStpPortDesignatedBridge.setDescription('The designated bridge')
mstStpPortEdgrPortConf = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 10, 4, 7, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstStpPortEdgrPortConf.setStatus('current')
if mibBuilder.loadTexts: mstStpPortEdgrPortConf.setDescription('The edge port configuration')
mstStpPortP2PMacConf = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 10, 4, 7, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstStpPortP2PMacConf.setStatus('current')
if mibBuilder.loadTexts: mstStpPortP2PMacConf.setDescription('The point-to-point MAC configuration')
mstStpPortRoles = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 10, 4, 7, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstStpPortRoles.setStatus('current')
if mibBuilder.loadTexts: mstStpPortRoles.setDescription('The port roles')
mstStpPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 10, 4, 7, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstStpPortStatus.setStatus('current')
if mibBuilder.loadTexts: mstStpPortStatus.setDescription('The port status')
mstInstanceInfoID = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 8, 10, 4, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstInstanceInfoID.setStatus('current')
if mibBuilder.loadTexts: mstInstanceInfoID.setDescription('MST instance ID')
outerVlanEthtype = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 9, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outerVlanEthtype.setStatus('current')
if mibBuilder.loadTexts: outerVlanEthtype.setDescription('Q-in-Q outer VLAN ether type')
qinqPortInfoTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 9, 2), )
if mibBuilder.loadTexts: qinqPortInfoTable.setStatus('current')
if mibBuilder.loadTexts: qinqPortInfoTable.setDescription('The table of Q-in-Q port info')
qinqPortInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 9, 2, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "qinqPortIndex"))
if mibBuilder.loadTexts: qinqPortInfoEntry.setStatus('current')
if mibBuilder.loadTexts: qinqPortInfoEntry.setDescription('The entry of Q-in-Q port info')
qinqPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 9, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qinqPortIndex.setStatus('current')
if mibBuilder.loadTexts: qinqPortIndex.setDescription('The port index of Q-in-Q port info')
qinqOuterPVID = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 9, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qinqOuterPVID.setStatus('current')
if mibBuilder.loadTexts: qinqOuterPVID.setDescription('The Q-in-Q outer PVID')
qinqOuterMode = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 9, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nni", 1), ("uni", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qinqOuterMode.setStatus('current')
if mibBuilder.loadTexts: qinqOuterMode.setDescription('The Q-in-Q outer mode')
garpJoinTime = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 10, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 600))).setUnits('Second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: garpJoinTime.setStatus('current')
if mibBuilder.loadTexts: garpJoinTime.setDescription('The GARP join time. Join time * 2 must be below leave time.')
garpLeaveTime = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 10, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 3000))).setUnits('Second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: garpLeaveTime.setStatus('current')
if mibBuilder.loadTexts: garpLeaveTime.setDescription('The GARP leave time. The leave time must below leave all time and bigger then Join time * 2')
garpLeaveAllTime = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 10, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 12000))).setUnits('Second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: garpLeaveAllTime.setStatus('current')
if mibBuilder.loadTexts: garpLeaveAllTime.setDescription('The GARP leave all time. The leave all time must bigger then leave time.')
gvrpStatus = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gvrpStatus.setStatus('current')
if mibBuilder.loadTexts: gvrpStatus.setDescription('The status of GVRP.')
xRingEliteState = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 12, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xRingEliteState.setStatus('current')
if mibBuilder.loadTexts: xRingEliteState.setDescription('The status of X-Ring Elite.')
xRingEliteRingIDTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 12, 2), )
if mibBuilder.loadTexts: xRingEliteRingIDTable.setStatus('current')
if mibBuilder.loadTexts: xRingEliteRingIDTable.setDescription('The table of X-Ring Elite ring ID')
xRingEliteRingIDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 12, 2, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "xRingEliteRingIDIndex"))
if mibBuilder.loadTexts: xRingEliteRingIDEntry.setStatus('current')
if mibBuilder.loadTexts: xRingEliteRingIDEntry.setDescription('The entry of X-Ring Elite ring ID')
xRingEliteRingIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 12, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xRingEliteRingIDIndex.setStatus('current')
if mibBuilder.loadTexts: xRingEliteRingIDIndex.setDescription('The index of X-Ring Elite ring ID')
xRingEliteRingID = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 12, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xRingEliteRingID.setStatus('current')
if mibBuilder.loadTexts: xRingEliteRingID.setDescription('The ring ID of X-Ring Elite')
xRingEliteRule = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 12, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("basic", 1), ("couple", 2), ("tunnel", 3), ("mrm", 4), ("mrc", 5), ("legacy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xRingEliteRule.setStatus('current')
if mibBuilder.loadTexts: xRingEliteRule.setDescription('The rule of the X-Ring Elite')
xRingElitePort1 = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 12, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xRingElitePort1.setStatus('current')
if mibBuilder.loadTexts: xRingElitePort1.setDescription('The port1 of this X-Ring Elite. For trunk port : Trunk1 is 1000,\n\t\t\t\t\t\tTrunk2 is 1001, ...')
xRingElitePort2 = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 12, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xRingElitePort2.setStatus('current')
if mibBuilder.loadTexts: xRingElitePort2.setDescription('The port2 of this X-Ring Elite. For trunk port : Trunk1 is 1000,\n\t\t\t\t\t\tTrunk2 is 1001, ...')
xRingEliteRingIDStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 12, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xRingEliteRingIDStatus.setStatus('current')
if mibBuilder.loadTexts: xRingEliteRingIDStatus.setDescription('The status of this X-Ring Elite')
xRingElitePort1Status = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 12, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xRingElitePort1Status.setStatus('current')
if mibBuilder.loadTexts: xRingElitePort1Status.setDescription('The port1 status of this X-Ring Elite')
xRingElitePort2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 12, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xRingElitePort2Status.setStatus('current')
if mibBuilder.loadTexts: xRingElitePort2Status.setDescription('The port2 status of this X-Ring Elite')
xRingEliteRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 12, 2, 1, 99), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("createAndWait", 5), ("destory", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xRingEliteRowStatus.setStatus('current')
if mibBuilder.loadTexts: xRingEliteRowStatus.setDescription('User can use createAndWait(5) to create new entry.\n\t\t\t\t\t\tAfter setup the value, user use active(1) to set into switch.\n\t\t\t\t\t\tUser can use destory to delete(6) an entry.')
loopbackEnabled = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 13, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loopbackEnabled.setStatus('current')
if mibBuilder.loadTexts: loopbackEnabled.setDescription('The status of loopback detection.')
loopbackInterval = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 13, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32767))).setUnits('Second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: loopbackInterval.setStatus('current')
if mibBuilder.loadTexts: loopbackInterval.setDescription('The interval of loopback detection.')
loopbackRecoverTime = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 13, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 1000000))).setUnits('Second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: loopbackRecoverTime.setStatus('current')
if mibBuilder.loadTexts: loopbackRecoverTime.setDescription('The recover time of loopback detection.')
loopbackPortTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 13, 4), )
if mibBuilder.loadTexts: loopbackPortTable.setStatus('current')
if mibBuilder.loadTexts: loopbackPortTable.setDescription('The port table of loopback detection')
loopbackPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 13, 4, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "loopbackPortIndex"))
if mibBuilder.loadTexts: loopbackPortEntry.setStatus('current')
if mibBuilder.loadTexts: loopbackPortEntry.setDescription('The port entry of loopback detection')
loopbackPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 13, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: loopbackPortIndex.setStatus('current')
if mibBuilder.loadTexts: loopbackPortIndex.setDescription('The index of port loopback detection')
loopbackPortEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 13, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loopbackPortEnabled.setStatus('current')
if mibBuilder.loadTexts: loopbackPortEnabled.setDescription('The enabled status of port loopback detection')
loopbackPortLoopStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 13, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("shutdown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: loopbackPortLoopStatus.setStatus('current')
if mibBuilder.loadTexts: loopbackPortLoopStatus.setDescription('The loop status of port loopback detection')
xRingProStatus = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 14, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xRingProStatus.setStatus('current')
if mibBuilder.loadTexts: xRingProStatus.setDescription('The status of X-Ring Pro')
xRingProRingSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 14, 2))
xRingProRingID = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 14, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xRingProRingID.setStatus('current')
if mibBuilder.loadTexts: xRingProRingID.setDescription('The ring ID of X-Ring Pro')
xRingProRingPort1 = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 14, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xRingProRingPort1.setStatus('current')
if mibBuilder.loadTexts: xRingProRingPort1.setDescription('The port1 of X-Ring Pro. For trunk port : Trunk1 is 1000,\n\t\t\t\t\t\tTrunk2 is 1001, ...')
xRingProRingPort2 = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 14, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xRingProRingPort2.setStatus('current')
if mibBuilder.loadTexts: xRingProRingPort2.setDescription('The port2 of X-Ring Pro. For trunk port : Trunk1 is 1000,\n\t\t\t\t\t\tTrunk2 is 1001, ...')
xRingProRingAdd = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 14, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nothing", 0), ("add", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xRingProRingAdd.setStatus('current')
if mibBuilder.loadTexts: xRingProRingAdd.setDescription('The add action of X-Ring Pro')
xRingProCoupleSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 14, 3))
xRingProCoupleID = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 14, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xRingProCoupleID.setStatus('current')
if mibBuilder.loadTexts: xRingProCoupleID.setDescription('The couple ring ID of X-Ring Pro')
xRingProCouplePort = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 14, 3, 2), Bits().clone(namedValues=NamedValues(("port1", 0), ("port2", 1), ("port3", 2), ("port4", 3), ("port5", 4), ("port6", 5), ("port7", 6), ("port8", 7), ("port9", 8), ("port10", 9), ("port11", 10), ("port12", 11), ("port13", 12), ("port14", 13), ("port15", 14), ("port16", 15), ("port17", 16), ("port18", 17), ("port19", 18), ("port20", 19), ("port21", 20), ("port22", 21), ("port23", 22), ("port24", 23), ("port25", 24), ("port26", 25), ("port27", 26), ("port28", 27), ("port29", 28), ("port30", 29), ("port31", 30), ("port32", 31)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xRingProCouplePort.setStatus('current')
if mibBuilder.loadTexts: xRingProCouplePort.setDescription('The couple port of X-Ring Pro')
xRingProCoupleMasterRingID = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 14, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xRingProCoupleMasterRingID.setStatus('current')
if mibBuilder.loadTexts: xRingProCoupleMasterRingID.setDescription('The master ring ID of X-Ring Pro')
xRingProCoupleAdd = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 14, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nothing", 0), ("add", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xRingProCoupleAdd.setStatus('current')
if mibBuilder.loadTexts: xRingProCoupleAdd.setDescription('The add action of X-Ring Pro')
xRingProInfoTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 14, 4), )
if mibBuilder.loadTexts: xRingProInfoTable.setStatus('current')
if mibBuilder.loadTexts: xRingProInfoTable.setDescription('The table of X-Ring Pro Infomation')
xRingProInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 14, 4, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "xRingProInfoRingID"))
if mibBuilder.loadTexts: xRingProInfoEntry.setStatus('current')
if mibBuilder.loadTexts: xRingProInfoEntry.setDescription('The entry of X-Ring Pro Infomation')
xRingProInfoRingID = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 14, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xRingProInfoRingID.setStatus('current')
if mibBuilder.loadTexts: xRingProInfoRingID.setDescription('The ring ID of X-Ring Pro Infomation')
xRingProInfoMode = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 14, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xRingProInfoMode.setStatus('current')
if mibBuilder.loadTexts: xRingProInfoMode.setDescription('The mode of X-Ring Pro Infomation')
xRingProInfoOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 14, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xRingProInfoOperState.setStatus('current')
if mibBuilder.loadTexts: xRingProInfoOperState.setDescription('The operation state of X-Ring Pro Infomation')
xRingProInfoPort1 = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 14, 4, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xRingProInfoPort1.setStatus('current')
if mibBuilder.loadTexts: xRingProInfoPort1.setDescription('The port1 of X-Ring Pro Infomation.')
xRingProInfoPort1FwdState = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 14, 4, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xRingProInfoPort1FwdState.setStatus('current')
if mibBuilder.loadTexts: xRingProInfoPort1FwdState.setDescription('The port1 forwarding state of X-Ring Pro Infomation')
xRingProInfoPort2 = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 14, 4, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xRingProInfoPort2.setStatus('current')
if mibBuilder.loadTexts: xRingProInfoPort2.setDescription('The port2 of X-Ring Pro Infomation')
xRingProInfoPort2FwdState = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 14, 4, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xRingProInfoPort2FwdState.setStatus('current')
if mibBuilder.loadTexts: xRingProInfoPort2FwdState.setDescription('The port2 forwarding state of X-Ring Pro Infomation')
xRingProInfoDel = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 14, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nothing", 0), ("del", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xRingProInfoDel.setStatus('current')
if mibBuilder.loadTexts: xRingProInfoDel.setDescription('The delete action of X-Ring Pro Infomation')
xRingProInfoRole = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 14, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("member", 0), ("head", 1), ("tail", 2), ("none", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xRingProInfoRole.setStatus('current')
if mibBuilder.loadTexts: xRingProInfoRole.setDescription('The role of X-Ring Pro Infomation')
xRingProPairSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 14, 5))
xRingProPairID = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 14, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xRingProPairID.setStatus('current')
if mibBuilder.loadTexts: xRingProPairID.setDescription('The pair ring ID of X-Ring Pro')
xRingProPairPort = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 14, 5, 2), Bits().clone(namedValues=NamedValues(("port1", 0), ("port2", 1), ("port3", 2), ("port4", 3), ("port5", 4), ("port6", 5), ("port7", 6), ("port8", 7), ("port9", 8), ("port10", 9), ("port11", 10), ("port12", 11), ("port13", 12), ("port14", 13), ("port15", 14), ("port16", 15), ("port17", 16), ("port18", 17), ("port19", 18), ("port20", 19), ("port21", 20), ("port22", 21), ("port23", 22), ("port24", 23), ("port25", 24), ("port26", 25), ("port27", 26), ("port28", 27), ("port29", 28), ("port30", 29), ("port31", 30), ("port32", 31)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xRingProPairPort.setStatus('current')
if mibBuilder.loadTexts: xRingProPairPort.setDescription('The pair port of X-Ring Pro')
xRingProPairMasterRingID = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 14, 5, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xRingProPairMasterRingID.setStatus('current')
if mibBuilder.loadTexts: xRingProPairMasterRingID.setDescription('The pair master ring ID of X-Ring Pro')
xRingProPairAdd = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 14, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nothing", 0), ("add", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xRingProPairAdd.setStatus('current')
if mibBuilder.loadTexts: xRingProPairAdd.setDescription('The add action of X-Ring Pro')
xRingProRPairSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 14, 6))
xRingProRPairID = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 14, 6, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xRingProRPairID.setStatus('current')
if mibBuilder.loadTexts: xRingProRPairID.setDescription('The R-pair ring ID of X-Ring Pro')
xRingProRPairPort = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 14, 6, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xRingProRPairPort.setStatus('current')
if mibBuilder.loadTexts: xRingProRPairPort.setDescription('The R-pair port of X-Ring Pro')
xRingProRPairMasterRingID = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 14, 6, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xRingProRPairMasterRingID.setStatus('current')
if mibBuilder.loadTexts: xRingProRPairMasterRingID.setDescription('The R-pair master ring ID of X-Ring Pro')
xRingProRPairAdd = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 14, 6, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nothing", 0), ("add", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xRingProRPairAdd.setStatus('current')
if mibBuilder.loadTexts: xRingProRPairAdd.setDescription('The add action of X-Ring Pro')
xRingProChainSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 14, 7))
xRingProChainID = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 14, 7, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xRingProChainID.setStatus('current')
if mibBuilder.loadTexts: xRingProChainID.setDescription('The chain ring ID of X-Ring Pro')
xRingProChainRole = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 14, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("member", 0), ("head", 1), ("tail", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xRingProChainRole.setStatus('current')
if mibBuilder.loadTexts: xRingProChainRole.setDescription('The role of X-Ring Pro.')
xRingProChainHeadPort = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 14, 7, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xRingProChainHeadPort.setStatus('current')
if mibBuilder.loadTexts: xRingProChainHeadPort.setDescription('The head port of X-Ring Pro.  For trunk port : Trunk1 is 1000,\n\t\t\t\t\t\tTrunk2 is 1001, ...')
xRingProChainMemberPort = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 14, 7, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xRingProChainMemberPort.setStatus('current')
if mibBuilder.loadTexts: xRingProChainMemberPort.setDescription('The member port of X-Ring Pro.  For trunk port : Trunk1 is 1000,\n\t\t\t\t\t\tTrunk2 is 1001, ...')
xRingProChainAdd = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 14, 7, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nothing", 0), ("add", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xRingProChainAdd.setStatus('current')
if mibBuilder.loadTexts: xRingProChainAdd.setDescription('The add action of X-Ring Pro')
gmrpStatus = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 15, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gmrpStatus.setStatus('current')
if mibBuilder.loadTexts: gmrpStatus.setDescription('The status of GMRP.')
gmrpMulticastGroupTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 15, 2), )
if mibBuilder.loadTexts: gmrpMulticastGroupTable.setStatus('current')
if mibBuilder.loadTexts: gmrpMulticastGroupTable.setDescription('The table of GMRP multicast group')
gmrpMulticastGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 15, 2, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "gmrpMulticastGroupVlanId"))
if mibBuilder.loadTexts: gmrpMulticastGroupEntry.setStatus('current')
if mibBuilder.loadTexts: gmrpMulticastGroupEntry.setDescription('The entry of GMRP multicast group')
gmrpMulticastGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 15, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmrpMulticastGroupIndex.setStatus('current')
if mibBuilder.loadTexts: gmrpMulticastGroupIndex.setDescription('The index of GMRP multicast group')
gmrpMulticastGroupVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 15, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmrpMulticastGroupVlanId.setStatus('current')
if mibBuilder.loadTexts: gmrpMulticastGroupVlanId.setDescription('The vlan id of GMRP multicast group')
gmrpMulticastGroupMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 15, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmrpMulticastGroupMacAddress.setStatus('current')
if mibBuilder.loadTexts: gmrpMulticastGroupMacAddress.setDescription('The MAC address of GMRP multicast group')
gmrpMulticastGroupType = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 15, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmrpMulticastGroupType.setStatus('current')
if mibBuilder.loadTexts: gmrpMulticastGroupType.setDescription('The type of GMRP multicast group')
gmrpMulticastGroupMemberPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 15, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmrpMulticastGroupMemberPorts.setStatus('current')
if mibBuilder.loadTexts: gmrpMulticastGroupMemberPorts.setDescription('The member ports of GMRP multicast group')
erpsState = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 16, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: erpsState.setStatus('current')
if mibBuilder.loadTexts: erpsState.setDescription('The status of ERPS')
erpsGroupTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 16, 2), )
if mibBuilder.loadTexts: erpsGroupTable.setStatus('current')
if mibBuilder.loadTexts: erpsGroupTable.setDescription('The table of ERPS group.')
erpsGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 16, 2, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "erpsGroupRingId"))
if mibBuilder.loadTexts: erpsGroupEntry.setStatus('current')
if mibBuilder.loadTexts: erpsGroupEntry.setDescription('The entry of ERPS group.')
erpsGroupRingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 16, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: erpsGroupRingIndex.setStatus('current')
if mibBuilder.loadTexts: erpsGroupRingIndex.setDescription('The index of ERPS group.')
erpsGroupInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 16, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: erpsGroupInstance.setStatus('current')
if mibBuilder.loadTexts: erpsGroupInstance.setDescription('The instance of ERPS group.')
erpsGroupRingId = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 16, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: erpsGroupRingId.setStatus('current')
if mibBuilder.loadTexts: erpsGroupRingId.setDescription('The ring ID of ERPS group.')
erpsGroupRole = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 16, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("rplowner", 0), ("rplneighbor", 1), ("other", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: erpsGroupRole.setStatus('current')
if mibBuilder.loadTexts: erpsGroupRole.setDescription('The role of ERPS group')
erpsGroupState = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 16, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erpsGroupState.setStatus('current')
if mibBuilder.loadTexts: erpsGroupState.setDescription('The current state of ERPS group.')
erpsGroupEastLink = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 16, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: erpsGroupEastLink.setStatus('current')
if mibBuilder.loadTexts: erpsGroupEastLink.setDescription('The east link port of ERPS group. For trunk port : Trunk1 is 1000,\n\t\t\t\t\t\tTrunk2 is 1001, ...')
erpsGroupEastLinkRPL = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 16, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rpl", 1), ("n-rpl", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: erpsGroupEastLinkRPL.setStatus('current')
if mibBuilder.loadTexts: erpsGroupEastLinkRPL.setDescription('The rpl setting of ERPS group east link.')
erpsGroupEastLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 16, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erpsGroupEastLinkState.setStatus('current')
if mibBuilder.loadTexts: erpsGroupEastLinkState.setDescription('The current state of ERPS group east link.')
erpsGroupWestLink = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 16, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: erpsGroupWestLink.setStatus('current')
if mibBuilder.loadTexts: erpsGroupWestLink.setDescription('The west link port of ERPS group. For trunk port : Trunk1 is 1000,\n\t\t\t\t\t\tTrunk2 is 1001, ...')
erpsGroupWestLinkRPL = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 16, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rpl", 1), ("n-rpl", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: erpsGroupWestLinkRPL.setStatus('current')
if mibBuilder.loadTexts: erpsGroupWestLinkRPL.setDescription('The rpl setting of ERPS group west link')
erpsGroupWestLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 16, 2, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erpsGroupWestLinkState.setStatus('current')
if mibBuilder.loadTexts: erpsGroupWestLinkState.setDescription('The current state of ERPS group west link.')
erpsGroupMEL = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 16, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: erpsGroupMEL.setStatus('current')
if mibBuilder.loadTexts: erpsGroupMEL.setDescription('The MEL of ERPS group.')
erpsGroupRAPSChannelVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 16, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: erpsGroupRAPSChannelVlan.setStatus('current')
if mibBuilder.loadTexts: erpsGroupRAPSChannelVlan.setDescription('The r-aps channel vlan of ERPS group.')
erpsGroupTrafficChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 16, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: erpsGroupTrafficChannel.setStatus('current')
if mibBuilder.loadTexts: erpsGroupTrafficChannel.setDescription('The traffic channel of ERPS group.')
erpsGroupRevertive = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 16, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("revertive", 1), ("none-revertive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: erpsGroupRevertive.setStatus('current')
if mibBuilder.loadTexts: erpsGroupRevertive.setDescription('The revertive setting of ERPS group.')
erpsGroupType = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 16, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("majorRing", 1), ("subRing", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: erpsGroupType.setStatus('current')
if mibBuilder.loadTexts: erpsGroupType.setDescription('The ring type of ERPS group.')
erpsGroupInterconnected = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 16, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("interconnected", 1), ("none-interconnected", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: erpsGroupInterconnected.setStatus('current')
if mibBuilder.loadTexts: erpsGroupInterconnected.setDescription('The interconnected setting of ERPS group.')
erpsGroupChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 16, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("with-virtual-channel", 1), ("without-virtual-channel", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: erpsGroupChannel.setStatus('current')
if mibBuilder.loadTexts: erpsGroupChannel.setDescription('The virtual channel setting of ERPS group.')
erpsGroupTcPropagation = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 16, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tc-propagation", 1), ("none-tc-propagation", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: erpsGroupTcPropagation.setStatus('current')
if mibBuilder.loadTexts: erpsGroupTcPropagation.setDescription('The tc-propagation setting of ERPS group.')
erpsWTRTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 16, 2, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setUnits('Unit').setMaxAccess("readwrite")
if mibBuilder.loadTexts: erpsWTRTimer.setStatus('current')
if mibBuilder.loadTexts: erpsWTRTimer.setDescription('The WTR timer of ERPS group.(1 Unit = 1 minute) ')
erpsGuardTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 16, 2, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200))).setUnits('Unit').setMaxAccess("readwrite")
if mibBuilder.loadTexts: erpsGuardTimer.setStatus('current')
if mibBuilder.loadTexts: erpsGuardTimer.setDescription('The guard timer of ERPS group.(1 Unit = 10 ms)')
erpsHoldOffTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 16, 2, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('Unit').setMaxAccess("readwrite")
if mibBuilder.loadTexts: erpsHoldOffTimer.setStatus('current')
if mibBuilder.loadTexts: erpsHoldOffTimer.setDescription('The hold-off timer of ERPS group.(1 Unit = 100 ms)')
erpsGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 3, 16, 2, 1, 99), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("valid", 1), ("createRequest", 2), ("underCreation", 3), ("invalid", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: erpsGroupRowStatus.setStatus('current')
if mibBuilder.loadTexts: erpsGroupRowStatus.setDescription('User can use createRequest(2) to create new entry.\n\t\t\t\t\t\tAfter setup the value, user use valid(1) to set into switch.\n\t\t\t\t\t\tUser can use destory to invalid(4) an entry.')
staticMacSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 4, 1))
dynamicMacSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 4, 2))
dynamicLearned = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 4, 3))
staticMacSettingTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 4, 1, 1), )
if mibBuilder.loadTexts: staticMacSettingTable.setStatus('current')
if mibBuilder.loadTexts: staticMacSettingTable.setDescription('The table of static MAC setting')
staticMacSettingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 4, 1, 1, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "staticMacSettingIndex"))
if mibBuilder.loadTexts: staticMacSettingEntry.setStatus('current')
if mibBuilder.loadTexts: staticMacSettingEntry.setDescription('The entry of static MAC setting')
staticMacSettingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 4, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staticMacSettingIndex.setStatus('current')
if mibBuilder.loadTexts: staticMacSettingIndex.setDescription('The index of static MAC setting')
staticMacSettingMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 4, 1, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticMacSettingMacAddress.setStatus('current')
if mibBuilder.loadTexts: staticMacSettingMacAddress.setDescription('The MAC address to which packets will be statically forwardef.\n\t\t\t\t\t\tIt only supports unicast MAC address')
staticMacSettingVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 4, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticMacSettingVlan.setStatus('current')
if mibBuilder.loadTexts: staticMacSettingVlan.setDescription('the VLAN which the static MAC belongs to')
staticMacSettingPort = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 4, 1, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticMacSettingPort.setStatus('current')
if mibBuilder.loadTexts: staticMacSettingPort.setDescription('the port number of the MAC entry. For trunk port : Trunk1 is 1000,\n\t\t\t\t\t\tTrunk2 is 1001, ...')
staticMacSettingRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 4, 1, 1, 1, 99), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("createAndWait", 5), ("destory", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: staticMacSettingRowStatus.setStatus('current')
if mibBuilder.loadTexts: staticMacSettingRowStatus.setDescription('User can use createAndWait(5) to create new entry.\n\t\t\t\t\t\tAfter setup the value, user use active(1) to set into switch.\n\t\t\t\t\t\tUser can use destory to delete(6) an entry.')
macAgingTime = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 4, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 630))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macAgingTime.setStatus('current')
if mibBuilder.loadTexts: macAgingTime.setDescription('The dynamic MAC address aging out value')
clearMacAddressTable = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 4, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clearMacAddressTable.setStatus('current')
if mibBuilder.loadTexts: clearMacAddressTable.setDescription('Clear the MAC table')
macAddressInfoTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 4, 3, 2), )
if mibBuilder.loadTexts: macAddressInfoTable.setStatus('current')
if mibBuilder.loadTexts: macAddressInfoTable.setDescription('The table of MAC address info')
macAddressInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 4, 3, 2, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "macAddressInfoIndex"))
if mibBuilder.loadTexts: macAddressInfoEntry.setStatus('current')
if mibBuilder.loadTexts: macAddressInfoEntry.setDescription('The entry of MAC address info')
macAddressInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 4, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: macAddressInfoIndex.setStatus('current')
if mibBuilder.loadTexts: macAddressInfoIndex.setDescription('The index of MAC address info')
macAddressInfoMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 4, 3, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macAddressInfoMAC.setStatus('current')
if mibBuilder.loadTexts: macAddressInfoMAC.setDescription('The MAC address to show dynamic MAC entries.')
macAddressInfoVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 4, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: macAddressInfoVlan.setStatus('current')
if mibBuilder.loadTexts: macAddressInfoVlan.setDescription('The VLAN to show dynamic MAC entries.')
macAddressInfoType = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 4, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: macAddressInfoType.setStatus('current')
if mibBuilder.loadTexts: macAddressInfoType.setDescription('The type of MAC address info')
macAddressInfoPort = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 4, 3, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macAddressInfoPort.setStatus('current')
if mibBuilder.loadTexts: macAddressInfoPort.setDescription('The port of MAC address info')
addtoStaticMacTable = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 4, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nothing", 0), ("addtoStaticMac", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: addtoStaticMacTable.setStatus('current')
if mibBuilder.loadTexts: addtoStaticMacTable.setDescription('Add the entry from dynamic to static.')
stormControl = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 1))
protectedPort = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 2))
dos = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 3))
access = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 4))
portSecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 5))
ipSecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 6))
ieee8021x = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 7))
securityLogin = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 8))
acl = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 9))
ipSourceGuard = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 10))
dhcpSnooping = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 11))
arpSpoofing = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 12))
stromControlUnit = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pps", 1), ("bps", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stromControlUnit.setStatus('current')
if mibBuilder.loadTexts: stromControlUnit.setDescription('The mode of stromg control.\n\t\t\t\t\tpps: strom control rate calculates by packet-based\n\t\t\t\t\tbps: strom control rate calculates by octet-based')
stromControlPreamble_IFG = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("excluded", 1), ("included", 2)))).setLabel("stromControlPreamble-IFG").setMaxAccess("readwrite")
if mibBuilder.loadTexts: stromControlPreamble_IFG.setStatus('current')
if mibBuilder.loadTexts: stromControlPreamble_IFG.setDescription('the rate calculates w/o preamble & IFG (20 bytes)\n\t\t\t\t\tExcluded: exclude preamble & IFG (20 bytes) when count\n\t\t\t\t\tingress storm control rate.\n\t\t\t\t\tIncluded: include preamble & IFG (20 bytes) when count\n\t\t\t\t\tingress storm control rate.')
stromControlPortTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 1, 3), )
if mibBuilder.loadTexts: stromControlPortTable.setStatus('current')
if mibBuilder.loadTexts: stromControlPortTable.setDescription('The table of port security setting')
stromControlPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 1, 3, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "stromControlPortIndex"))
if mibBuilder.loadTexts: stromControlPortEntry.setStatus('current')
if mibBuilder.loadTexts: stromControlPortEntry.setDescription('The entry of port security setting')
stromControlPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stromControlPortIndex.setStatus('current')
if mibBuilder.loadTexts: stromControlPortIndex.setDescription('The port index of port security setting')
stromControlPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stromControlPortState.setStatus('current')
if mibBuilder.loadTexts: stromControlPortState.setDescription('the state of setting')
stromControlPortAction = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("drop", 1), ("shutdown", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stromControlPortAction.setStatus('current')
if mibBuilder.loadTexts: stromControlPortAction.setDescription('the state of setting\n\t\t\t\t\t\tDrop: Packets exceed storm control rate will be droped.\n\t\t\t\t\t\tShutdown: Port exceed storm control rate will be shutdown.')
enablebroadcast = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enablebroadcast.setStatus('current')
if mibBuilder.loadTexts: enablebroadcast.setDescription('enable/diable the broadcast packet')
broadcastRate = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: broadcastRate.setStatus('current')
if mibBuilder.loadTexts: broadcastRate.setDescription('Value of storm control rate, Unit: pps (packet per-second) or Kbps\n\t\t\t\t\t\t(Kbits per-second) depends on global mode setting.\n\t\t\t\t\t\tThe range is from 0 to 1000000.')
enableunknownMulticast = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableunknownMulticast.setStatus('current')
if mibBuilder.loadTexts: enableunknownMulticast.setDescription('enable/diable the unknown multicast packet')
unknownMulticastRate = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unknownMulticastRate.setStatus('current')
if mibBuilder.loadTexts: unknownMulticastRate.setDescription('Value of storm control rate, Unit: pps (packet per-second) or Kbps\n\t\t\t\t\t\t(Kbits per-second) depends on global mode setting.\n\t\t\t\t\t\tThe range is from 0 to 1000000.')
enableunknownUnicast = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableunknownUnicast.setStatus('current')
if mibBuilder.loadTexts: enableunknownUnicast.setDescription('enable/diable the unknown unicast packet')
unknownUnicastRate = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unknownUnicastRate.setStatus('current')
if mibBuilder.loadTexts: unknownUnicastRate.setDescription('Value of storm control rate, Unit: pps (packet per-second) or Kbps\n\t\t\t\t\t\t(Kbits per-second) depends on global mode setting.\n\t\t\t\t\t\tThe range is from 0 to 1000000.')
protectedPortTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 2, 1), )
if mibBuilder.loadTexts: protectedPortTable.setStatus('current')
if mibBuilder.loadTexts: protectedPortTable.setDescription('The table of protected port')
protectedPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 2, 1, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "protectedPortIndex"))
if mibBuilder.loadTexts: protectedPortEntry.setStatus('current')
if mibBuilder.loadTexts: protectedPortEntry.setDescription('The entry of protected port')
protectedPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: protectedPortIndex.setStatus('current')
if mibBuilder.loadTexts: protectedPortIndex.setDescription('The port index of protected port')
protectedPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unprotected", 1), ("porotected", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: protectedPortType.setStatus('current')
if mibBuilder.loadTexts: protectedPortType.setDescription('Configure port protect type\n\t\t\t\t\t\tUnprotected: Unprotected port can communicate\n\t\t\t\t\t\twith all ports.\n\t\t\t\t\t\tProtected: Prevent protected ports from\n\t\t\t\t\t\tcommunication with each other.')
dmacEqualsmac = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dmacEqualsmac.setStatus('current')
if mibBuilder.loadTexts: dmacEqualsmac.setDescription('Both the source and the destination MAC addresses are the\n\t\t\t\t\tsame')
land = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: land.setStatus('current')
if mibBuilder.loadTexts: land.setDescription('Both the source and the destination IPv4/IPv6 addresses are the\n\t\t\t\t\tsame')
udpBlat = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: udpBlat.setStatus('current')
if mibBuilder.loadTexts: udpBlat.setDescription('Both the source and the destination UDP port are the same')
tcpBlat = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpBlat.setStatus('current')
if mibBuilder.loadTexts: tcpBlat.setDescription('Both the source and the destination TCP port are the same')
pod = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pod.setStatus('current')
if mibBuilder.loadTexts: pod.setDescription('Ping packets that length are larger than 65535 bytes')
ipv6MinFragment = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6MinFragment.setStatus('current')
if mibBuilder.loadTexts: ipv6MinFragment.setDescription('IPv6 fragmented packets (not including the last one) that\n\t\t\t\t\tpayload length less than 1240 bytes, and the Min length can\n\t\t\t\t\tbe configured if needed.')
ipv6MinFragmentValue = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 3, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6MinFragmentValue.setStatus('current')
if mibBuilder.loadTexts: ipv6MinFragmentValue.setDescription('IPv6 fragmented packets (not including the last one) that\n\t\t\t\t\tpayload length less than 1240 bytes, and the Min length can\n\t\t\t\t\tbe configured if needed.')
icmpFragment = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: icmpFragment.setStatus('current')
if mibBuilder.loadTexts: icmpFragment.setDescription('Fragmented ICMP packets.')
ipv4PingMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4PingMaxSize.setStatus('current')
if mibBuilder.loadTexts: ipv4PingMaxSize.setDescription('IPv4 PING packet with the length')
ipv6PingMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 3, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6PingMaxSize.setStatus('current')
if mibBuilder.loadTexts: ipv6PingMaxSize.setDescription('IPv6 PING packet with the length')
pingMaxSizeSetting = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 3, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pingMaxSizeSetting.setStatus('current')
if mibBuilder.loadTexts: pingMaxSizeSetting.setDescription('Ping packet Max Size Setting. The default value is 512\n\t\t\t\t\tBytes, it can be configured if needed.')
smurfAttack = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 3, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smurfAttack.setStatus('current')
if mibBuilder.loadTexts: smurfAttack.setDescription('ICMP echo request packet that destination IPv4 address is\n\t\t\t\t\tbroadcast address.')
smurfAttackValue = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 3, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smurfAttackValue.setStatus('current')
if mibBuilder.loadTexts: smurfAttackValue.setDescription('The default Netmask length is 0, and it can be configured if\n\t\t\t\t\tneeded.')
tcpMinHdrSize = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 3, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpMinHdrSize.setStatus('current')
if mibBuilder.loadTexts: tcpMinHdrSize.setDescription('TCP packet that header length is less than the configured\n\t\t\t\t\tvalue.')
tcpMinHdrSizeValue = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 3, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpMinHdrSizeValue.setStatus('current')
if mibBuilder.loadTexts: tcpMinHdrSizeValue.setDescription('The default TCP Min Hdr Size is 20, it can be configured if\n\t\t\t\t\tneeded.')
tcp_Syn = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 3, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setLabel("tcp-Syn").setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcp_Syn.setStatus('current')
if mibBuilder.loadTexts: tcp_Syn.setDescription('TCP  SYN packets with source port less than 1024.')
nullScanAttack = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 3, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nullScanAttack.setStatus('current')
if mibBuilder.loadTexts: nullScanAttack.setDescription('TCP sequence number is zero, and all control flags are\n\t\t\t\t\tzeroes.')
xMasScanAttack = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 3, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xMasScanAttack.setStatus('current')
if mibBuilder.loadTexts: xMasScanAttack.setDescription('TCP sequence number is zero, and the FIN/URG/PSH flags\n\t\t\t\t\tare set.')
tcpSYN_FINAttack = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 3, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setLabel("tcpSYN-FINAttack").setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpSYN_FINAttack.setStatus('current')
if mibBuilder.loadTexts: tcpSYN_FINAttack.setDescription('A TCP packet with the SYN and FIN flags set.')
tcpSYN_RSTAttack = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 3, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setLabel("tcpSYN-RSTAttack").setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpSYN_RSTAttack.setStatus('current')
if mibBuilder.loadTexts: tcpSYN_RSTAttack.setDescription('A TCP packet with the SYN and RST flags set.')
tcpFragment = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 3, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpFragment.setStatus('current')
if mibBuilder.loadTexts: tcpFragment.setDescription('Fragmented TCP packets.')
dosPortTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 3, 22), )
if mibBuilder.loadTexts: dosPortTable.setStatus('current')
if mibBuilder.loadTexts: dosPortTable.setDescription('The table of DoS port')
dosPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 3, 22, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "dosportIndex"))
if mibBuilder.loadTexts: dosPortEntry.setStatus('current')
if mibBuilder.loadTexts: dosPortEntry.setDescription('The entry of DoS port')
dosportIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 3, 22, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dosportIndex.setStatus('current')
if mibBuilder.loadTexts: dosportIndex.setDescription('The port index of DoS port')
dosProtection = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 3, 22, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dosProtection.setStatus('current')
if mibBuilder.loadTexts: dosProtection.setDescription('Configure port protect state')
telnetInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 4, 1))
telnetService = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetService.setStatus('current')
if mibBuilder.loadTexts: telnetService.setDescription('enable/disable the tlent service')
currentTelnetSessionCount = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentTelnetSessionCount.setStatus('current')
if mibBuilder.loadTexts: currentTelnetSessionCount.setDescription('The current telnet session counter')
httpSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 4, 2))
httpService = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 4, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpService.setStatus('current')
if mibBuilder.loadTexts: httpService.setDescription('enable/disable the http service')
httpSessionTimeout = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 4, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpSessionTimeout.setStatus('current')
if mibBuilder.loadTexts: httpSessionTimeout.setDescription('the HTTP session timeout')
httpsSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 4, 3))
httpsService = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 4, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpsService.setStatus('current')
if mibBuilder.loadTexts: httpsService.setDescription('enable/disable the https service')
httpsSessionTimeout = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 4, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpsSessionTimeout.setStatus('current')
if mibBuilder.loadTexts: httpsSessionTimeout.setDescription('the HTTPs session timeout')
sshInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 4, 4))
sshService = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 4, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshService.setStatus('current')
if mibBuilder.loadTexts: sshService.setDescription('enable/disable the ssh service')
portSecurityTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 5, 1), )
if mibBuilder.loadTexts: portSecurityTable.setStatus('current')
if mibBuilder.loadTexts: portSecurityTable.setDescription('The table of port security')
portSecurityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 5, 1, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "portSecurityPortIndex"))
if mibBuilder.loadTexts: portSecurityEntry.setStatus('current')
if mibBuilder.loadTexts: portSecurityEntry.setDescription('The entry of port security')
portSecurityPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSecurityPortIndex.setStatus('current')
if mibBuilder.loadTexts: portSecurityPortIndex.setDescription('The port index of port security')
portSecurityEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSecurityEnabled.setStatus('current')
if mibBuilder.loadTexts: portSecurityEnabled.setDescription('Enable/Disable port security')
portSecurityFDBLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSecurityFDBLimit.setStatus('current')
if mibBuilder.loadTexts: portSecurityFDBLimit.setDescription('The number of FDB learning.')
portSecurityViolationMACNotify = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSecurityViolationMACNotify.setStatus('current')
if mibBuilder.loadTexts: portSecurityViolationMACNotify.setDescription('Enable/Disable Violation MAC Notification')
ipSecurityStatus = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipSecurityStatus.setStatus('current')
if mibBuilder.loadTexts: ipSecurityStatus.setDescription('Enable/Disable IP security')
ipSecurityTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 6, 2), )
if mibBuilder.loadTexts: ipSecurityTable.setStatus('current')
if mibBuilder.loadTexts: ipSecurityTable.setDescription('The table of IP security')
ipSecurityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 6, 2, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "ipSecurityIndex"))
if mibBuilder.loadTexts: ipSecurityEntry.setStatus('current')
if mibBuilder.loadTexts: ipSecurityEntry.setDescription('The entry of IP security')
ipSecurityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSecurityIndex.setStatus('current')
if mibBuilder.loadTexts: ipSecurityIndex.setDescription('The index of IP security')
ipSecurityIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 6, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipSecurityIPAddr.setStatus('current')
if mibBuilder.loadTexts: ipSecurityIPAddr.setDescription('The IP address of IP security')
ipSecurityIPMask = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 6, 2, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipSecurityIPMask.setStatus('current')
if mibBuilder.loadTexts: ipSecurityIPMask.setDescription('The IP mask of IP security')
ipSecurityService = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 6, 2, 1, 4), Bits().clone(namedValues=NamedValues(("ping", 0), ("http", 1), ("telnet", 2), ("ssh", 3), ("snmp", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipSecurityService.setStatus('current')
if mibBuilder.loadTexts: ipSecurityService.setDescription('The service of IP security')
ipSecurityVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 6, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipSecurityVlanId.setStatus('current')
if mibBuilder.loadTexts: ipSecurityVlanId.setDescription('The VLAN id of IP security. This value will appear on multiple interface.')
ipSecurityRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 6, 2, 1, 99), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("createAndWait", 5), ("destory", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipSecurityRowStatus.setStatus('current')
if mibBuilder.loadTexts: ipSecurityRowStatus.setDescription('User can use createAndWait(5) to create new entry.\n\t\t\t\t\t\tAfter setup the value, user use active(1) to set into switch.\n\t\t\t\t\t\tUser can use destory to delete(6) an entry.')
ieee8021xState = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021xState.setStatus('current')
if mibBuilder.loadTexts: ieee8021xState.setDescription('Enable/Disable IEEE 802.1x ')
ieee8021xServerIP = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 7, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021xServerIP.setStatus('current')
if mibBuilder.loadTexts: ieee8021xServerIP.setDescription('The server IP address of IEEE 802.1x')
ieee8021xServerPort = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 7, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021xServerPort.setStatus('current')
if mibBuilder.loadTexts: ieee8021xServerPort.setDescription('The server port of IEEE 802.1x')
ieee8021xAccountingPort = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 7, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021xAccountingPort.setStatus('current')
if mibBuilder.loadTexts: ieee8021xAccountingPort.setDescription('The accounting port of IEEE 802.1x')
ieee8021xSecurityKey = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 7, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021xSecurityKey.setStatus('current')
if mibBuilder.loadTexts: ieee8021xSecurityKey.setDescription('The security key of IEEE 802.1x')
ieee8021xReauthPeriod = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 7, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021xReauthPeriod.setStatus('current')
if mibBuilder.loadTexts: ieee8021xReauthPeriod.setDescription('The reauth period of IEEE 802.1x')
ieee8021xPortTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 7, 7), )
if mibBuilder.loadTexts: ieee8021xPortTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021xPortTable.setDescription('The table of IEEE 802.1x')
ieee8021xPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 7, 7, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "ieee8021xPortIndex"))
if mibBuilder.loadTexts: ieee8021xPortEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021xPortEntry.setDescription('The entry of IEEE 802.1x')
ieee8021xPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 7, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021xPortIndex.setStatus('current')
if mibBuilder.loadTexts: ieee8021xPortIndex.setDescription('The index of IEEE 802.1x')
ieee8021xPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 7, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("authorize", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021xPortState.setStatus('current')
if mibBuilder.loadTexts: ieee8021xPortState.setDescription('The port state of IEEE 802.1x')
ieee8021xAuthBased = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 7, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("port", 1), ("mac", 2), ("mac-auth-bypass", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021xAuthBased.setStatus('current')
if mibBuilder.loadTexts: ieee8021xAuthBased.setDescription('The authentication based of IEEE 802.1x ')
securityLoginState = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securityLoginState.setStatus('current')
if mibBuilder.loadTexts: securityLoginState.setDescription('Enable/Disable security login.')
radiusServer = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 8, 2))
radiusServerIP = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 8, 2, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusServerIP.setStatus('current')
if mibBuilder.loadTexts: radiusServerIP.setDescription('Radius server IP.')
radiusServerPort = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 8, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusServerPort.setStatus('current')
if mibBuilder.loadTexts: radiusServerPort.setDescription('Radius server port.')
radiusServerSecurityKey = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 8, 2, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusServerSecurityKey.setStatus('current')
if mibBuilder.loadTexts: radiusServerSecurityKey.setDescription('The security key of radius server.')
tacacsServer = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 8, 3))
tacacsServerIP = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 8, 3, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacacsServerIP.setStatus('current')
if mibBuilder.loadTexts: tacacsServerIP.setDescription('TACACS server IP.')
tacacsServerPort = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 8, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacacsServerPort.setStatus('current')
if mibBuilder.loadTexts: tacacsServerPort.setDescription('TACACS server port.')
tacacsServerSecurityKey = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 8, 3, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacacsServerSecurityKey.setStatus('current')
if mibBuilder.loadTexts: tacacsServerSecurityKey.setDescription('The security key of TACACS server.')
securityLoginType = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 8, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("radius", 1), ("tacacs", 2), ("radiusAndtacacs", 3), ("radiusAndtacacsAndweb", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securityLoginType.setStatus('current')
if mibBuilder.loadTexts: securityLoginType.setDescription('Enable/Disable security login.')
securityLoginHttpState = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 8, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securityLoginHttpState.setStatus('current')
if mibBuilder.loadTexts: securityLoginHttpState.setDescription('Enable/Disable HTTP type of security login.')
securityLoginTelnetState = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 8, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securityLoginTelnetState.setStatus('current')
if mibBuilder.loadTexts: securityLoginTelnetState.setDescription('Enable/Disable telnet type of security login.')
securityLoginSSHState = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 8, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securityLoginSSHState.setStatus('current')
if mibBuilder.loadTexts: securityLoginSSHState.setDescription('Enable/Disable SSH type of security login.')
macAclTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 9, 1), )
if mibBuilder.loadTexts: macAclTable.setStatus('current')
if mibBuilder.loadTexts: macAclTable.setDescription('The table of mac acl')
macAclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 9, 1, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "macAclIndex"))
if mibBuilder.loadTexts: macAclEntry.setStatus('current')
if mibBuilder.loadTexts: macAclEntry.setDescription('The entry of mac acl')
macAclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 9, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 250))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macAclIndex.setStatus('current')
if mibBuilder.loadTexts: macAclIndex.setDescription('The index of mac ACL entry')
destinationMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 9, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: destinationMacAddress.setStatus('current')
if mibBuilder.loadTexts: destinationMacAddress.setDescription('The destination MAC address of mac ACL entry.')
destinationMacMask = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 9, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: destinationMacMask.setStatus('current')
if mibBuilder.loadTexts: destinationMacMask.setDescription('The destination MAC mask of mac ACL entry.')
sourceMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 9, 1, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sourceMacAddress.setStatus('current')
if mibBuilder.loadTexts: sourceMacAddress.setDescription('The source MAC address of mac ACL entry.')
sourceMacMask = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 9, 1, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sourceMacMask.setStatus('current')
if mibBuilder.loadTexts: sourceMacMask.setDescription('The source MAC mask of mac ACL entry.')
macAclEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 9, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macAclEtherType.setStatus('current')
if mibBuilder.loadTexts: macAclEtherType.setDescription('The ether type of mac ACL entry')
macAclVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 9, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macAclVlanID.setStatus('current')
if mibBuilder.loadTexts: macAclVlanID.setDescription('The vlan id of mac ACL entry')
macAclPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 9, 1, 1, 8), Bits().clone(namedValues=NamedValues(("port1", 0), ("port2", 1), ("port3", 2), ("port4", 3), ("port5", 4), ("port6", 5), ("port7", 6), ("port8", 7), ("port9", 8), ("port10", 9), ("port11", 10), ("port12", 11), ("port13", 12), ("port14", 13), ("port15", 14), ("port16", 15), ("port17", 16), ("port18", 17), ("port19", 18), ("port20", 19), ("port21", 20), ("port22", 21), ("port23", 22), ("port24", 23), ("port25", 24), ("port26", 25), ("port27", 26), ("port28", 27), ("port29", 28), ("port30", 29), ("port31", 30), ("port32", 31)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macAclPortList.setStatus('current')
if mibBuilder.loadTexts: macAclPortList.setDescription('The port list of mac ACL entry.')
macAclAction = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 9, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("drop", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macAclAction.setStatus('current')
if mibBuilder.loadTexts: macAclAction.setDescription('The action of mac ACL entry.')
macAclActiveStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 9, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macAclActiveStatus.setStatus('current')
if mibBuilder.loadTexts: macAclActiveStatus.setDescription('The active status of mac ACL entry.')
macAclRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 9, 1, 1, 99), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("valid", 1), ("createRequest", 2), ("underCreation", 3), ("invalid", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macAclRowStatus.setStatus('current')
if mibBuilder.loadTexts: macAclRowStatus.setDescription('User can use createRequest(2) to create new entry.\n\t\t\t\t\t\tAfter setup the value, user use valid(1) to set into switch.\n\t\t\t\t\t\tUser can use destory to invalid(4) an entry.')
ipAclTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 9, 2), )
if mibBuilder.loadTexts: ipAclTable.setStatus('current')
if mibBuilder.loadTexts: ipAclTable.setDescription('The table of ip acl')
ipAclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 9, 2, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "ipAclIndex"))
if mibBuilder.loadTexts: ipAclEntry.setStatus('current')
if mibBuilder.loadTexts: ipAclEntry.setDescription('The entry of ip acl')
ipAclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 9, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 250))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipAclIndex.setStatus('current')
if mibBuilder.loadTexts: ipAclIndex.setDescription('The index of ip ACL entry')
destinationIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 9, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: destinationIpAddress.setStatus('current')
if mibBuilder.loadTexts: destinationIpAddress.setDescription('The destination ip address of ip ACL entry.')
destinationIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 9, 2, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: destinationIpMask.setStatus('current')
if mibBuilder.loadTexts: destinationIpMask.setDescription('The destination ip mask of ip ACL entry.')
sourceIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 9, 2, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sourceIpAddress.setStatus('current')
if mibBuilder.loadTexts: sourceIpAddress.setDescription('The source ip address of ip ACL entry.')
sourceIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 9, 2, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sourceIpMask.setStatus('current')
if mibBuilder.loadTexts: sourceIpMask.setDescription('The source ip mask of ip ACL entry.')
ipProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 9, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("icmp", 2), ("tcp", 3), ("udp", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipProtocol.setStatus('current')
if mibBuilder.loadTexts: ipProtocol.setDescription('The ip protocol of ip ACL entry.')
l4DestinationPort = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 9, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l4DestinationPort.setStatus('current')
if mibBuilder.loadTexts: l4DestinationPort.setDescription('The L4 destination port of ip ACL entry')
l4SourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 9, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l4SourcePort.setStatus('current')
if mibBuilder.loadTexts: l4SourcePort.setDescription('The L4 source port of ip ACL entry')
ipAclPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 9, 2, 1, 9), Bits().clone(namedValues=NamedValues(("port1", 0), ("port2", 1), ("port3", 2), ("port4", 3), ("port5", 4), ("port6", 5), ("port7", 6), ("port8", 7), ("port9", 8), ("port10", 9), ("port11", 10), ("port12", 11), ("port13", 12), ("port14", 13), ("port15", 14), ("port16", 15), ("port17", 16), ("port18", 17), ("port19", 18), ("port20", 19), ("port21", 20), ("port22", 21), ("port23", 22), ("port24", 23), ("port25", 24), ("port26", 25), ("port27", 26), ("port28", 27), ("port29", 28), ("port30", 29), ("port31", 30), ("port32", 31)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipAclPortList.setStatus('current')
if mibBuilder.loadTexts: ipAclPortList.setDescription('The port list of ip ACL entry.')
ipAclAction = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 9, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("drop", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipAclAction.setStatus('current')
if mibBuilder.loadTexts: ipAclAction.setDescription('The action of ip ACL entry.')
ipAclActiveStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 9, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipAclActiveStatus.setStatus('current')
if mibBuilder.loadTexts: ipAclActiveStatus.setDescription('The active status of ip ACL entry.')
ipAclRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 9, 2, 1, 99), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("valid", 1), ("createRequest", 2), ("underCreation", 3), ("invalid", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipAclRowStatus.setStatus('current')
if mibBuilder.loadTexts: ipAclRowStatus.setDescription('User can use createRequest(2) to create new entry.\n\t\t\t\t\t\tAfter setup the value, user use valid(1) to set into switch.\n\t\t\t\t\t\tUser can use destory to invalid(4) an entry.')
ipSourceGuardEnablePorts = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 10, 1), Bits().clone(namedValues=NamedValues(("port1", 0), ("port2", 1), ("port3", 2), ("port4", 3), ("port5", 4), ("port6", 5), ("port7", 6), ("port8", 7), ("port9", 8), ("port10", 9), ("port11", 10), ("port12", 11), ("port13", 12), ("port14", 13), ("port15", 14), ("port16", 15), ("port17", 16), ("port18", 17), ("port19", 18), ("port20", 19), ("port21", 20), ("port22", 21), ("port23", 22), ("port24", 23), ("port25", 24), ("port26", 25), ("port27", 26), ("port28", 27), ("port29", 28), ("port30", 29), ("port31", 30), ("port32", 31)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipSourceGuardEnablePorts.setStatus('current')
if mibBuilder.loadTexts: ipSourceGuardEnablePorts.setDescription('The enable port list for ip source guard.')
ipSourceGuardTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 10, 2), )
if mibBuilder.loadTexts: ipSourceGuardTable.setStatus('current')
if mibBuilder.loadTexts: ipSourceGuardTable.setDescription('The table of ip source guard')
ipSourceGuardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 10, 2, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "ipSourceGuardIndex"))
if mibBuilder.loadTexts: ipSourceGuardEntry.setStatus('current')
if mibBuilder.loadTexts: ipSourceGuardEntry.setDescription('The entry of ip source guard')
ipSourceGuardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 10, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSourceGuardIndex.setStatus('current')
if mibBuilder.loadTexts: ipSourceGuardIndex.setDescription('The index of ip source guard entry')
ipSourceGuardSourceIp = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 10, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipSourceGuardSourceIp.setStatus('current')
if mibBuilder.loadTexts: ipSourceGuardSourceIp.setDescription('The destination ip address of ip source guard entry.')
ipSourceGuardSourceMac = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 10, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipSourceGuardSourceMac.setStatus('current')
if mibBuilder.loadTexts: ipSourceGuardSourceMac.setDescription('The destination MAC address of ip source guard entry.')
ipSourceGuardPort = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 10, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipSourceGuardPort.setStatus('current')
if mibBuilder.loadTexts: ipSourceGuardPort.setDescription('The port of ip source guard entry')
ipSourceGuardRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 10, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("valid", 1), ("createRequest", 2), ("underCreation", 3), ("invalid", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipSourceGuardRowStatus.setStatus('current')
if mibBuilder.loadTexts: ipSourceGuardRowStatus.setDescription('User can use createRequest(2) to create new entry.\n\t\t\t\t\t\tAfter setup the value, user use valid(1) to set into switch.\n\t\t\t\t\t\tUser can use destory to invalid(4) an entry.')
dhcpSnoopingState = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpSnoopingState.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingState.setDescription('Enable/Disable DHCP snooping.')
dhcpSnoopingPorts = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 11, 2), Bits().clone(namedValues=NamedValues(("port1", 0), ("port2", 1), ("port3", 2), ("port4", 3), ("port5", 4), ("port6", 5), ("port7", 6), ("port8", 7), ("port9", 8), ("port10", 9), ("port11", 10), ("port12", 11), ("port13", 12), ("port14", 13), ("port15", 14), ("port16", 15), ("port17", 16), ("port18", 17), ("port19", 18), ("port20", 19), ("port21", 20), ("port22", 21), ("port23", 22), ("port24", 23), ("port25", 24), ("port26", 25), ("port27", 26), ("port28", 27), ("port29", 28), ("port30", 29), ("port31", 30), ("port32", 31)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpSnoopingPorts.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingPorts.setDescription('The enable port list for dhcp snooping.')
dhcpSnoopingBindingPorts = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 11, 3), Bits().clone(namedValues=NamedValues(("port1", 0), ("port2", 1), ("port3", 2), ("port4", 3), ("port5", 4), ("port6", 5), ("port7", 6), ("port8", 7), ("port9", 8), ("port10", 9), ("port11", 10), ("port12", 11), ("port13", 12), ("port14", 13), ("port15", 14), ("port16", 15), ("port17", 16), ("port18", 17), ("port19", 18), ("port20", 19), ("port21", 20), ("port22", 21), ("port23", 22), ("port24", 23), ("port25", 24), ("port26", 25), ("port27", 26), ("port28", 27), ("port29", 28), ("port30", 29), ("port31", 30), ("port32", 31)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpSnoopingBindingPorts.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingBindingPorts.setDescription('The enable blinding port list for dhcp snooping.')
dhcpSnoopingTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 11, 4), )
if mibBuilder.loadTexts: dhcpSnoopingTable.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingTable.setDescription('The table of dhcp snooping')
dhcpSnoopingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 11, 4, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "dhcpSnoopingIndex"))
if mibBuilder.loadTexts: dhcpSnoopingEntry.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingEntry.setDescription('The entry of dhcp snooping')
dhcpSnoopingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 11, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopingIndex.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingIndex.setDescription('The index of dhcp snooping entry')
dhcpSnoopingMac = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 11, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopingMac.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingMac.setDescription('The destination MAC address of dhcp snooping entry.')
dhcpSnoopingIp = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 11, 4, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopingIp.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingIp.setDescription('The destination ip address of dhcp snooping entry.')
dhcpSnoopingLeaseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 11, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 864000))).setUnits('second').setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopingLeaseTime.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingLeaseTime.setDescription('The lease time of dhcp snooping entry')
dhcpSnoopingVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 11, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopingVlanId.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingVlanId.setDescription('The VLAN ID of dhcp snooping entry')
dhcpSnoopingPort = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 11, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopingPort.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingPort.setDescription('The port of dhcp snooping entry')
arpSpoofingTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 12, 1), )
if mibBuilder.loadTexts: arpSpoofingTable.setStatus('current')
if mibBuilder.loadTexts: arpSpoofingTable.setDescription('The table of arp spoofing')
arpSpoofingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 12, 1, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "arpSpoofingIndex"))
if mibBuilder.loadTexts: arpSpoofingEntry.setStatus('current')
if mibBuilder.loadTexts: arpSpoofingEntry.setDescription('The entry of arp spoofing')
arpSpoofingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 12, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpSpoofingIndex.setStatus('current')
if mibBuilder.loadTexts: arpSpoofingIndex.setDescription('The index of arp spoofing entry')
arpSpoofingSourceMac = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 12, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: arpSpoofingSourceMac.setStatus('current')
if mibBuilder.loadTexts: arpSpoofingSourceMac.setDescription('The source MAC address of arp spoofing entry.')
arpSpoofingSourceIp = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 12, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: arpSpoofingSourceIp.setStatus('current')
if mibBuilder.loadTexts: arpSpoofingSourceIp.setDescription('The source ip address of arp spoofing entry.')
arpSpoofingRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 5, 12, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("valid", 1), ("createRequest", 2), ("underCreation", 3), ("invalid", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: arpSpoofingRowStatus.setStatus('current')
if mibBuilder.loadTexts: arpSpoofingRowStatus.setDescription('User can use createRequest(2) to create new entry.\n\t\t\t\t\t\tAfter setup the value, user use valid(1) to set into switch.\n\t\t\t\t\t\tUser can use destory to invalid(4) an entry.')
general = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 1))
qosBasicMode = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 2))
rateLimit = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 3))
qosMode = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("basic", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosMode.setStatus('current')
if mibBuilder.loadTexts: qosMode.setDescription('The QoS operaion mode')
qosPortSettingTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 1, 2), )
if mibBuilder.loadTexts: qosPortSettingTable.setStatus('current')
if mibBuilder.loadTexts: qosPortSettingTable.setDescription('The table of QoS port setting')
qosPortSettingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 1, 2, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "qosPortIndex"))
if mibBuilder.loadTexts: qosPortSettingEntry.setStatus('current')
if mibBuilder.loadTexts: qosPortSettingEntry.setDescription('The entry of QoS port setting')
qosPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosPortIndex.setStatus('current')
if mibBuilder.loadTexts: qosPortIndex.setDescription('The port index of QoS port setting')
qosPortCos = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosPortCos.setStatus('current')
if mibBuilder.loadTexts: qosPortCos.setDescription('The default CoS/802.1p priority value')
qosPortRemarkCoS = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosPortRemarkCoS.setStatus('current')
if mibBuilder.loadTexts: qosPortRemarkCoS.setDescription('enable/disable CoS remark')
qosPortRemarkDSCP = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosPortRemarkDSCP.setStatus('current')
if mibBuilder.loadTexts: qosPortRemarkDSCP.setDescription('enable/disable DSCP remark')
qosPortRemarkIPPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosPortRemarkIPPrecedence.setStatus('current')
if mibBuilder.loadTexts: qosPortRemarkIPPrecedence.setDescription('Enable/Disable IP Precedence remark')
queueSettingTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 1, 3), )
if mibBuilder.loadTexts: queueSettingTable.setStatus('current')
if mibBuilder.loadTexts: queueSettingTable.setDescription('The table of queue setting')
queueSettingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 1, 3, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "queueIndex"))
if mibBuilder.loadTexts: queueSettingEntry.setStatus('current')
if mibBuilder.loadTexts: queueSettingEntry.setDescription('the entry of queue setting')
queueIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: queueIndex.setStatus('current')
if mibBuilder.loadTexts: queueIndex.setDescription('The index of queue setting')
queueMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("strictPriority", 1), ("wrr", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: queueMethod.setStatus('current')
if mibBuilder.loadTexts: queueMethod.setDescription('queue to strict priority type or Weight round robin type')
queueWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 1, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: queueWeight.setStatus('current')
if mibBuilder.loadTexts: queueWeight.setDescription('If the queue type is WRR, set the queue weight for the\n\t\t\t\t\t\tqueue.')
queuePercentOfWRRBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 1, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: queuePercentOfWRRBandwidth.setStatus('current')
if mibBuilder.loadTexts: queuePercentOfWRRBandwidth.setDescription('The percentage of the WRR bandwidth')
costoQueueMapTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 1, 4), )
if mibBuilder.loadTexts: costoQueueMapTable.setStatus('current')
if mibBuilder.loadTexts: costoQueueMapTable.setDescription('The table of CoS to queue')
costoQueueMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 1, 4, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "cosIndex"))
if mibBuilder.loadTexts: costoQueueMapEntry.setStatus('current')
if mibBuilder.loadTexts: costoQueueMapEntry.setDescription('The entry of CoS to queue')
cosIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cosIndex.setStatus('current')
if mibBuilder.loadTexts: cosIndex.setDescription('The index of CoS to queue')
cosQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cosQueue.setStatus('current')
if mibBuilder.loadTexts: cosQueue.setDescription('The queue of CoS to queue')
queuetoCosMapTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 1, 5), )
if mibBuilder.loadTexts: queuetoCosMapTable.setStatus('current')
if mibBuilder.loadTexts: queuetoCosMapTable.setDescription('The table of queue to CoS')
queuetoCosMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 1, 5, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "queuetoCosIndex"))
if mibBuilder.loadTexts: queuetoCosMapEntry.setStatus('current')
if mibBuilder.loadTexts: queuetoCosMapEntry.setDescription('The entry of queue to CoS')
queuetoCosIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: queuetoCosIndex.setStatus('current')
if mibBuilder.loadTexts: queuetoCosIndex.setDescription('The queue index of queue to CoS')
queueCos = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: queueCos.setStatus('current')
if mibBuilder.loadTexts: queueCos.setDescription('The cos of queue to CoS')
dscptoQueueMapTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 1, 6), )
if mibBuilder.loadTexts: dscptoQueueMapTable.setStatus('current')
if mibBuilder.loadTexts: dscptoQueueMapTable.setDescription('The table of DSCP to queue')
dscptoQueueMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 1, 6, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "dscpIndex"))
if mibBuilder.loadTexts: dscptoQueueMapEntry.setStatus('current')
if mibBuilder.loadTexts: dscptoQueueMapEntry.setDescription('The entry of DSCP to queue')
dscpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dscpIndex.setStatus('current')
if mibBuilder.loadTexts: dscpIndex.setDescription('The DSCP index of DSCP to queue')
dscpQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dscpQueue.setStatus('current')
if mibBuilder.loadTexts: dscpQueue.setDescription('The queue of DSCP to queue')
queuetoDSCPMapTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 1, 7), )
if mibBuilder.loadTexts: queuetoDSCPMapTable.setStatus('current')
if mibBuilder.loadTexts: queuetoDSCPMapTable.setDescription('The table of queue to DSCP')
queuetoDSCPMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 1, 7, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "queuetoDSCPIndex"))
if mibBuilder.loadTexts: queuetoDSCPMapEntry.setStatus('current')
if mibBuilder.loadTexts: queuetoDSCPMapEntry.setDescription('The entry of queue to DSCP')
queuetoDSCPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: queuetoDSCPIndex.setStatus('current')
if mibBuilder.loadTexts: queuetoDSCPIndex.setDescription('The queue index of queue to DSCP')
queuDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: queuDscp.setStatus('current')
if mibBuilder.loadTexts: queuDscp.setDescription('The DSCP of queue to DSCP')
ipPrecedencetoQueueMapTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 1, 8), )
if mibBuilder.loadTexts: ipPrecedencetoQueueMapTable.setStatus('current')
if mibBuilder.loadTexts: ipPrecedencetoQueueMapTable.setDescription('The table of IP precedence to queue')
ipPrecedencetoQueueMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 1, 8, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "ipPrecedenceIndex"))
if mibBuilder.loadTexts: ipPrecedencetoQueueMapEntry.setStatus('current')
if mibBuilder.loadTexts: ipPrecedencetoQueueMapEntry.setDescription('The entry of IP precedence to queue')
ipPrecedenceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipPrecedenceIndex.setStatus('current')
if mibBuilder.loadTexts: ipPrecedenceIndex.setDescription('The index of IP precedence to queue')
ipPrecedenceQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipPrecedenceQueue.setStatus('current')
if mibBuilder.loadTexts: ipPrecedenceQueue.setDescription('The queue of IP precedence to queue')
queueToipPrecedenceMapTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 1, 9), )
if mibBuilder.loadTexts: queueToipPrecedenceMapTable.setStatus('current')
if mibBuilder.loadTexts: queueToipPrecedenceMapTable.setDescription('The table of queue to IP precedence')
queueToipPrecedenceMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 1, 9, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "queueToipPrecedenceIndex"))
if mibBuilder.loadTexts: queueToipPrecedenceMapEntry.setStatus('current')
if mibBuilder.loadTexts: queueToipPrecedenceMapEntry.setDescription('The entry of queue to IP precedence')
queueToipPrecedenceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 1, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: queueToipPrecedenceIndex.setStatus('current')
if mibBuilder.loadTexts: queueToipPrecedenceIndex.setDescription('The index of queue to IP precedence')
ipPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 1, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipPrecedence.setStatus('current')
if mibBuilder.loadTexts: ipPrecedence.setDescription('The IP precedence of queue to IP precedence')
trustMode = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("cos-8021p", 1), ("dscp", 2), ("cos8021p-dscp", 3), ("ip-precendence", 4), ("none", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trustMode.setStatus('current')
if mibBuilder.loadTexts: trustMode.setDescription('the QoS operation mode.\n\t\t\t\t\tCoS/802.1p: Traffic is mapped to queues based on\n\t\t\t\t\tthe CoS field in the VLAN tag, or based on the per-port\n\t\t\t\t\tdefault CoS value if there is no VLAN tag on the\n\t\t\t\t\tincoming packet.\n\t\t\t\t\tDSCP: All IP traffic is mapped to queues based on the\n\t\t\t\t\tDSCP field in the IP header. If traffic is not IP traffic, it\n\t\t\t\t\tis mapped to the lowest priority queue.\n\t\t\t\t\tCoS/802.1p-DSCP: All IP traffic is mapped to\n\t\t\t\t\tqueues based on the DSCP field in the IP header. If\n\t\t\t\t\ttraffic is not IP but has VLAN tag, mapped to queues\n\t\t\t\t\tbased on the CoS value in the VLAN tag.\n\t\t\t\t\tIP Precedence: All IP traffic is mapped to queues\n\t\t\t\t\tbased on the IP Precedence field in the IP header. If\n\t\t\t\t\ttraffic is not IP traffic, it is mapped to the lowest\n\t\t\t\t\tpriority queue.\n\t\t\t\t\tNone: All traffic is mapped to the lowest priority\n\t\t\t\t\tqueue.')
qosBasicPortTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 2, 2), )
if mibBuilder.loadTexts: qosBasicPortTable.setStatus('current')
if mibBuilder.loadTexts: qosBasicPortTable.setDescription('The table of QoS port')
qosBasicPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 2, 2, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "qosBasicPortIndex"))
if mibBuilder.loadTexts: qosBasicPortEntry.setStatus('current')
if mibBuilder.loadTexts: qosBasicPortEntry.setDescription('The entry of QoS port')
qosBasicPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosBasicPortIndex.setStatus('current')
if mibBuilder.loadTexts: qosBasicPortIndex.setDescription('The port index of QoS port')
qosBasicPortTrust = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosBasicPortTrust.setStatus('current')
if mibBuilder.loadTexts: qosBasicPortTrust.setDescription('the port trust state\n\t\t\t\t\t\tEnabled: Traffic from this port will follow the global\n\t\t\t\t\t\ttrust type.\n\t\t\t\t\t\tDisabled: Traffic will always go to the lowest priority\n\t\t\t\t\t\tqueue.')
ingressBandwidthControl = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 3, 1))
ingressBandwidthTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 3, 1, 1), )
if mibBuilder.loadTexts: ingressBandwidthTable.setStatus('current')
if mibBuilder.loadTexts: ingressBandwidthTable.setDescription('The table of ingress bandwidth')
ingressBandwidthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 3, 1, 1, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "ingressBandwidthPortIndex"))
if mibBuilder.loadTexts: ingressBandwidthEntry.setStatus('current')
if mibBuilder.loadTexts: ingressBandwidthEntry.setDescription('The entry of ingress bandwidth')
ingressBandwidthPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 3, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ingressBandwidthPortIndex.setStatus('current')
if mibBuilder.loadTexts: ingressBandwidthPortIndex.setDescription('The port index of ingress bandwidth')
ingressBandwidthState = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 3, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ingressBandwidthState.setStatus('current')
if mibBuilder.loadTexts: ingressBandwidthState.setDescription('enable/disable ingress bandwidth control')
ingressBandwidthRate = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 3, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ingressBandwidthRate.setStatus('current')
if mibBuilder.loadTexts: ingressBandwidthRate.setDescription('rate value, unit:16Kbps')
egressBandwidthControl = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 3, 2))
egressBandwidthTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 3, 2, 1), )
if mibBuilder.loadTexts: egressBandwidthTable.setStatus('current')
if mibBuilder.loadTexts: egressBandwidthTable.setDescription('The table of egress bandwidth')
egressBandwidthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 3, 2, 1, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "egressBandwidthPortIndex"))
if mibBuilder.loadTexts: egressBandwidthEntry.setStatus('current')
if mibBuilder.loadTexts: egressBandwidthEntry.setDescription('The entry of egress bandwidth')
egressBandwidthPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 3, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: egressBandwidthPortIndex.setStatus('current')
if mibBuilder.loadTexts: egressBandwidthPortIndex.setDescription('The port index of egress bandwidth')
egressBandwidthState = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 3, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: egressBandwidthState.setStatus('current')
if mibBuilder.loadTexts: egressBandwidthState.setDescription('enable/disable egress bandwidth control')
egressBandwidthRate = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 3, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: egressBandwidthRate.setStatus('current')
if mibBuilder.loadTexts: egressBandwidthRate.setDescription('rate value, unit:16Kbps')
egressQueueBandwidthControl = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 3, 3))
egressqueueBandwidthTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 3, 3, 1), )
if mibBuilder.loadTexts: egressqueueBandwidthTable.setStatus('current')
if mibBuilder.loadTexts: egressqueueBandwidthTable.setDescription('The table of egress queue bandwidth')
egressqueueBandwidthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 3, 3, 1, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "egressqueueBandwidthPortIndex"))
if mibBuilder.loadTexts: egressqueueBandwidthEntry.setStatus('current')
if mibBuilder.loadTexts: egressqueueBandwidthEntry.setDescription('The entry of egress queue bandwidth')
egressqueueBandwidthPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 3, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: egressqueueBandwidthPortIndex.setStatus('current')
if mibBuilder.loadTexts: egressqueueBandwidthPortIndex.setDescription('The port index of egress queue bandwidth')
egressqueueBandwidthQueueIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 3, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: egressqueueBandwidthQueueIndex.setStatus('current')
if mibBuilder.loadTexts: egressqueueBandwidthQueueIndex.setDescription('The queue index of egress queue bandwidth')
egressqueueBandwidthState = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 3, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: egressqueueBandwidthState.setStatus('current')
if mibBuilder.loadTexts: egressqueueBandwidthState.setDescription('enable/disable egress bandwidth contro')
egressqueueBandwidthCir = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 6, 3, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: egressqueueBandwidthCir.setStatus('current')
if mibBuilder.loadTexts: egressqueueBandwidthCir.setDescription('rate value, unit:16Kbps')
lldp = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1))
snmp = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 2))
poe = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 3))
tcpModbus = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 4))
dhcpServer = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5))
smtpClient = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 6))
rmon = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 7))
ntp = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 8))
lldpEnabled = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpEnabled.setStatus('current')
if mibBuilder.loadTexts: lldpEnabled.setDescription('Enable/Disable LLDP protocol on this switch')
lldpPduDisableAction = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("filtering", 1), ("bridging", 2), ("flooding", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpPduDisableAction.setStatus('current')
if mibBuilder.loadTexts: lldpPduDisableAction.setDescription('Select LLDP PDU handling action to be filtered, bridging or\n\t\t\t\t\tflooded when LLDP is globally disabled.')
lldpTransmissionInterval = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpTransmissionInterval.setStatus('current')
if mibBuilder.loadTexts: lldpTransmissionInterval.setDescription('The interval at which frames are transmitted. LLDP transmission \n\t\t\t\t\tinterval multiplies holdtme multiplier should be smaller than 65535.\n\t\t\t\t\tLLDP transmission delay should not be larger than LLDP transmission \n\t\t\t\t\tinterval * 0.25')
lldpHoldtimeMultiplier = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpHoldtimeMultiplier.setStatus('current')
if mibBuilder.loadTexts: lldpHoldtimeMultiplier.setDescription('The multiplier on the transmit interval to assign to TTL. LLDP \n\t\t\t\t\ttransmission interval multiplies holdtme multiplier should be \n\t\t\t\t\tsmaller than 65535.')
lldpReinitializationDelay = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpReinitializationDelay.setStatus('current')
if mibBuilder.loadTexts: lldpReinitializationDelay.setDescription('The delay before a re-initialization')
lldpTransmitDelay = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8191))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpTransmitDelay.setStatus('current')
if mibBuilder.loadTexts: lldpTransmitDelay.setDescription('The delay after an LLDP frame is sent. LLDP transmission delay \n\t\t\t\t\tshould not be larger than LLDP transmission interval * 0.25')
lldpPortConfTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 7), )
if mibBuilder.loadTexts: lldpPortConfTable.setStatus('current')
if mibBuilder.loadTexts: lldpPortConfTable.setDescription('The table of LLDP port configuration')
lldpPortConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 7, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "lldpPortIndex"))
if mibBuilder.loadTexts: lldpPortConfEntry.setStatus('current')
if mibBuilder.loadTexts: lldpPortConfEntry.setDescription('The entry of LLDP port configuration')
lldpPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpPortIndex.setStatus('current')
if mibBuilder.loadTexts: lldpPortIndex.setDescription('The port index of LLDP port configuration')
lldpPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 1), ("rx-only", 2), ("tx-only", 3), ("rx-tx", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpPortState.setStatus('current')
if mibBuilder.loadTexts: lldpPortState.setDescription('the transmission state of LLDP port interface.\n\t\t\t\t\t\tDisable: Disable the transmission of LLDP PDUs.\n\t\t\t\t\t\tRX Only: Receive LLDP PDUs only.\n\t\t\t\t\t\tTX Only: Transmit LLDP PDUs only.\n\t\t\t\t\t\tTX And RX: Transmit and receive LLDP PDUs both.')
lldpPortOptionalTLVs = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 7, 1, 3), Bits().clone(namedValues=NamedValues(("systemName", 0), ("portDescription", 1), ("systemDescription", 2), ("systemCapability", 3), ("ieee8023MAC-PHY", 4), ("ieee8023LinkAggeration", 5), ("ieee8023MaxFrameSize", 6), ("managementAddress", 7), ("ieee8021PVID", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpPortOptionalTLVs.setStatus('current')
if mibBuilder.loadTexts: lldpPortOptionalTLVs.setDescription('The LLDP optional TLVs to be carried')
lldpPortVlans = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 7, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpPortVlans.setStatus('current')
if mibBuilder.loadTexts: lldpPortVlans.setDescription('The VLAN name ID to be carried. User can inpu vlan such as:\n\t\t\t\t\t\t1-2, 100.')
localDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 8))
lldpLocalDeviceChassisidsubtype = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 8, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpLocalDeviceChassisidsubtype.setStatus('current')
if mibBuilder.loadTexts: lldpLocalDeviceChassisidsubtype.setDescription('LLDP local device chassis ID subtype')
lldpLocalDeviceChassisID = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 8, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpLocalDeviceChassisID.setStatus('current')
if mibBuilder.loadTexts: lldpLocalDeviceChassisID.setDescription('LLDP local device chassis ID')
lldpLocalDeviceSystemName = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 8, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpLocalDeviceSystemName.setStatus('current')
if mibBuilder.loadTexts: lldpLocalDeviceSystemName.setDescription('LLDP local device system name')
lldpLocalDeviceSystemDescription = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 8, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpLocalDeviceSystemDescription.setStatus('current')
if mibBuilder.loadTexts: lldpLocalDeviceSystemDescription.setDescription('LLDP local device system description')
lldpLocalDeviceCapabilitiesSupported = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 8, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpLocalDeviceCapabilitiesSupported.setStatus('current')
if mibBuilder.loadTexts: lldpLocalDeviceCapabilitiesSupported.setDescription('LLDP local device capabilities supported')
lldpLocalDeviceCapabilitiesEnabled = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 8, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpLocalDeviceCapabilitiesEnabled.setStatus('current')
if mibBuilder.loadTexts: lldpLocalDeviceCapabilitiesEnabled.setDescription('LLDP local device capabilities enabled')
lldpLocalDevicePortIDsubtype = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 8, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpLocalDevicePortIDsubtype.setStatus('current')
if mibBuilder.loadTexts: lldpLocalDevicePortIDsubtype.setDescription('LLDP local device port ID subtype')
lldpLocalPortStatusTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 8, 8), )
if mibBuilder.loadTexts: lldpLocalPortStatusTable.setStatus('current')
if mibBuilder.loadTexts: lldpLocalPortStatusTable.setDescription('The table of LLFP local port status')
lldpLocalPortStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 8, 8, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "lldpLocalPortIndex"))
if mibBuilder.loadTexts: lldpLocalPortStatusEntry.setStatus('current')
if mibBuilder.loadTexts: lldpLocalPortStatusEntry.setDescription('The entry of LLFP local port status')
lldpLocalPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 8, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpLocalPortIndex.setStatus('current')
if mibBuilder.loadTexts: lldpLocalPortIndex.setDescription('The port index of LLDP local port status')
lldpLocalPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 8, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 1), ("rx-only", 2), ("tx-only", 3), ("rx-tx", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpLocalPortStatus.setStatus('current')
if mibBuilder.loadTexts: lldpLocalPortStatus.setDescription('LLDP local port status')
lldpLocalPortChassisIDsubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 8, 8, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpLocalPortChassisIDsubtype.setStatus('current')
if mibBuilder.loadTexts: lldpLocalPortChassisIDsubtype.setDescription('LLDP local port chassis ID subtype')
lldpLocalPortChassisID = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 8, 8, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpLocalPortChassisID.setStatus('current')
if mibBuilder.loadTexts: lldpLocalPortChassisID.setDescription('LLDP local port chassis ID')
lldpLocalPortSystemname = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 8, 8, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpLocalPortSystemname.setStatus('current')
if mibBuilder.loadTexts: lldpLocalPortSystemname.setDescription('LLDP local port system name')
lldpLocalPortSystemdescription = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 8, 8, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpLocalPortSystemdescription.setStatus('current')
if mibBuilder.loadTexts: lldpLocalPortSystemdescription.setDescription('LLDP local port system description')
lldpLocalPortSupportedsystemcapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 8, 8, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpLocalPortSupportedsystemcapabilities.setStatus('current')
if mibBuilder.loadTexts: lldpLocalPortSupportedsystemcapabilities.setDescription('LLDP local port supported system capabilities')
lldpLocalPortEnablesystemcapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 8, 8, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpLocalPortEnablesystemcapabilities.setStatus('current')
if mibBuilder.loadTexts: lldpLocalPortEnablesystemcapabilities.setDescription('LLDP local port enable system capabilities')
lldpLocalPortIDsubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 8, 8, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpLocalPortIDsubtype.setStatus('current')
if mibBuilder.loadTexts: lldpLocalPortIDsubtype.setDescription('LLDP local port ID subtype')
lldpLocalPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 8, 8, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpLocalPortID.setStatus('current')
if mibBuilder.loadTexts: lldpLocalPortID.setDescription('LLDP local port ID')
lldpLocalPortDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 8, 8, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpLocalPortDescription.setStatus('current')
if mibBuilder.loadTexts: lldpLocalPortDescription.setDescription('LLDP local port description')
lldpLocalPortManagementAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 8, 8, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpLocalPortManagementAddress.setStatus('current')
if mibBuilder.loadTexts: lldpLocalPortManagementAddress.setDescription('LLDP local port management address')
lldpLocalPortAuto_negosupported = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 8, 8, 1, 13), DisplayString()).setLabel("lldpLocalPortAuto-negosupported").setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpLocalPortAuto_negosupported.setStatus('current')
if mibBuilder.loadTexts: lldpLocalPortAuto_negosupported.setDescription('LLDP local port auto-nego supported')
lldpLocalPortAuto_negoenabled = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 8, 8, 1, 14), DisplayString()).setLabel("lldpLocalPortAuto-negoenabled").setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpLocalPortAuto_negoenabled.setStatus('current')
if mibBuilder.loadTexts: lldpLocalPortAuto_negoenabled.setDescription('LLDP local port auto-nego enabled')
lldpLocalPortAuto_negoAdvertisedCapabilities = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 8, 8, 1, 15), DisplayString()).setLabel("lldpLocalPortAuto-negoAdvertisedCapabilities").setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpLocalPortAuto_negoAdvertisedCapabilities.setStatus('current')
if mibBuilder.loadTexts: lldpLocalPortAuto_negoAdvertisedCapabilities.setDescription('LLDP local port auto-nego advertised capabilities')
lldpLocalPortOperationMAUtype = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 8, 8, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpLocalPortOperationMAUtype.setStatus('current')
if mibBuilder.loadTexts: lldpLocalPortOperationMAUtype.setDescription('LLDP local port operation MAU type')
lldpLocalPortIeee8023MaxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 8, 8, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpLocalPortIeee8023MaxFrameSize.setStatus('current')
if mibBuilder.loadTexts: lldpLocalPortIeee8023MaxFrameSize.setDescription('LLDP local port IEEE 802.3 max frame size')
lldpLocalPortAggregationCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 8, 8, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpLocalPortAggregationCapability.setStatus('current')
if mibBuilder.loadTexts: lldpLocalPortAggregationCapability.setDescription('LLDP local port aggregation capabilities')
lldpLocalPortAggregationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 8, 8, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpLocalPortAggregationStatus.setStatus('current')
if mibBuilder.loadTexts: lldpLocalPortAggregationStatus.setDescription('LLDP local port aggregation status')
lldpLocalPortAggregationPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 8, 8, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpLocalPortAggregationPortID.setStatus('current')
if mibBuilder.loadTexts: lldpLocalPortAggregationPortID.setDescription('LLDP local port aggregation port ID')
lldpLocalPortPvid = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 8, 8, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpLocalPortPvid.setStatus('current')
if mibBuilder.loadTexts: lldpLocalPortPvid.setDescription('LLDP local port PVID')
lldpLocalPortVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 8, 8, 1, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpLocalPortVlanName.setStatus('current')
if mibBuilder.loadTexts: lldpLocalPortVlanName.setDescription('LLDP local port vlan name')
remoteDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 9))
lldpremoteDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 9, 1), )
if mibBuilder.loadTexts: lldpremoteDeviceTable.setStatus('current')
if mibBuilder.loadTexts: lldpremoteDeviceTable.setDescription('The table of LLDP remote device')
lldpremoteDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 9, 1, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "lldpremoteDeviceIndex"))
if mibBuilder.loadTexts: lldpremoteDeviceEntry.setStatus('current')
if mibBuilder.loadTexts: lldpremoteDeviceEntry.setDescription('The entry of LLDP remote device')
lldpremoteDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 9, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpremoteDeviceIndex.setStatus('current')
if mibBuilder.loadTexts: lldpremoteDeviceIndex.setDescription('The index of LLDP remote device')
lldpremoteDeviceLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 9, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpremoteDeviceLocalPort.setStatus('current')
if mibBuilder.loadTexts: lldpremoteDeviceLocalPort.setDescription('LLDP remote device local port')
lldpremoteDeviceChassisIDsubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 9, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpremoteDeviceChassisIDsubtype.setStatus('current')
if mibBuilder.loadTexts: lldpremoteDeviceChassisIDsubtype.setDescription('LLDP remote device chassis ID subtype')
lldpremoteDeviceChassisID = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 9, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpremoteDeviceChassisID.setStatus('current')
if mibBuilder.loadTexts: lldpremoteDeviceChassisID.setDescription('LLDP remote device chassis ID')
lldpremoteDevicePortIDsubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 9, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpremoteDevicePortIDsubtype.setStatus('current')
if mibBuilder.loadTexts: lldpremoteDevicePortIDsubtype.setDescription('LLDP remote device port ID subtype')
lldpremoteDevicePortID = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 9, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpremoteDevicePortID.setStatus('current')
if mibBuilder.loadTexts: lldpremoteDevicePortID.setDescription('LLDP remote device port ID')
lldpremoteDeviceSystemName = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 9, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpremoteDeviceSystemName.setStatus('current')
if mibBuilder.loadTexts: lldpremoteDeviceSystemName.setDescription('LLDP remote device system name')
lldpremoteDeviceTimetolive = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 9, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpremoteDeviceTimetolive.setStatus('current')
if mibBuilder.loadTexts: lldpremoteDeviceTimetolive.setDescription('LLDP remote device time to live')
lldpremoteDeviceEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 9, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpremoteDeviceEntryIndex.setStatus('current')
if mibBuilder.loadTexts: lldpremoteDeviceEntryIndex.setDescription('LLDP remote device entry index')
lldpremoteDevicePortDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 9, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpremoteDevicePortDescription.setStatus('current')
if mibBuilder.loadTexts: lldpremoteDevicePortDescription.setDescription('LDP remote device port description')
lldpremoteDeviceSystemdescription = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 9, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpremoteDeviceSystemdescription.setStatus('current')
if mibBuilder.loadTexts: lldpremoteDeviceSystemdescription.setDescription('LLDP remote device system description')
lldpremoteDeviceSupportedsystemcapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 9, 1, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpremoteDeviceSupportedsystemcapabilities.setStatus('current')
if mibBuilder.loadTexts: lldpremoteDeviceSupportedsystemcapabilities.setDescription('LLDP remote device supported syste, capabilities')
lldpremoteDeviceEnablesystemcapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 9, 1, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpremoteDeviceEnablesystemcapabilities.setStatus('current')
if mibBuilder.loadTexts: lldpremoteDeviceEnablesystemcapabilities.setDescription('LLDP remote device enable system capabilities')
lldpremoteDeviceManagementAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 9, 1, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpremoteDeviceManagementAddress.setStatus('current')
if mibBuilder.loadTexts: lldpremoteDeviceManagementAddress.setDescription('LLDP remote device management address')
lldpremoteDeviceAuto_negosupported = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 9, 1, 1, 15), DisplayString()).setLabel("lldpremoteDeviceAuto-negosupported").setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpremoteDeviceAuto_negosupported.setStatus('current')
if mibBuilder.loadTexts: lldpremoteDeviceAuto_negosupported.setDescription('LLDP remote device auto-nego supported')
lldpremoteDeviceAuto_negoenabled = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 9, 1, 1, 16), DisplayString()).setLabel("lldpremoteDeviceAuto-negoenabled").setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpremoteDeviceAuto_negoenabled.setStatus('current')
if mibBuilder.loadTexts: lldpremoteDeviceAuto_negoenabled.setDescription('LLDP remote device auto-nego enabled')
lldpremoteDeviceAuto_negoAdvertisedCapabilities = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 9, 1, 1, 17), DisplayString()).setLabel("lldpremoteDeviceAuto-negoAdvertisedCapabilities").setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpremoteDeviceAuto_negoAdvertisedCapabilities.setStatus('current')
if mibBuilder.loadTexts: lldpremoteDeviceAuto_negoAdvertisedCapabilities.setDescription('LLDP remote device auto-nego advertised capabilities')
lldpremoteDeviceOperationMAUtype = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 9, 1, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpremoteDeviceOperationMAUtype.setStatus('current')
if mibBuilder.loadTexts: lldpremoteDeviceOperationMAUtype.setDescription('LLDP remote device operation MAU type')
lldpremoteDeviceMdipowersupportportclass = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 9, 1, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpremoteDeviceMdipowersupportportclass.setStatus('current')
if mibBuilder.loadTexts: lldpremoteDeviceMdipowersupportportclass.setDescription('LLDP remote device PSE MDI power support class')
lldpremoteDevicePsemdipowersupport = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 9, 1, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpremoteDevicePsemdipowersupport.setStatus('current')
if mibBuilder.loadTexts: lldpremoteDevicePsemdipowersupport.setDescription('LLDP remote device PSE MDI power support')
lldpremoteDevicePsemdipowerstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 9, 1, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpremoteDevicePsemdipowerstatus.setStatus('current')
if mibBuilder.loadTexts: lldpremoteDevicePsemdipowerstatus.setDescription('LLDP remote device PSE MDI power status')
lldpremoteDevicePsepowerpaircontrolability = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 9, 1, 1, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpremoteDevicePsepowerpaircontrolability.setStatus('current')
if mibBuilder.loadTexts: lldpremoteDevicePsepowerpaircontrolability.setDescription('LLDP remote device PSE power pair control ability')
lldpremoteDevicePsepowerpair = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 9, 1, 1, 23), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpremoteDevicePsepowerpair.setStatus('current')
if mibBuilder.loadTexts: lldpremoteDevicePsepowerpair.setDescription('LLDP remote device PSE power pair')
lldpremoteDevicePsepowerclass = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 9, 1, 1, 24), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpremoteDevicePsepowerclass.setStatus('current')
if mibBuilder.loadTexts: lldpremoteDevicePsepowerclass.setDescription('LLDP remote device PSE power class')
lldpremoteDeviceIeee8023MaxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 9, 1, 1, 25), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpremoteDeviceIeee8023MaxFrameSize.setStatus('current')
if mibBuilder.loadTexts: lldpremoteDeviceIeee8023MaxFrameSize.setDescription('LLDP remote device IEEE 802.3 Max frame size')
lldpremoteDeviceAggregationCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 9, 1, 1, 26), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpremoteDeviceAggregationCapability.setStatus('current')
if mibBuilder.loadTexts: lldpremoteDeviceAggregationCapability.setDescription('LLDP remote device aggregation capabilities')
lldpremoteDeviceAggregationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 9, 1, 1, 27), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpremoteDeviceAggregationStatus.setStatus('current')
if mibBuilder.loadTexts: lldpremoteDeviceAggregationStatus.setDescription('LLDP remote device aggregation status')
lldpremoteDeviceAggregationPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 9, 1, 1, 28), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpremoteDeviceAggregationPortID.setStatus('current')
if mibBuilder.loadTexts: lldpremoteDeviceAggregationPortID.setDescription('LLDP remote device aggregation Port ID')
lldpremoteDevicePvid = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 9, 1, 1, 29), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpremoteDevicePvid.setStatus('current')
if mibBuilder.loadTexts: lldpremoteDevicePvid.setDescription('LLDP remote device PVID')
lldpremoteDeviceVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 9, 1, 1, 30), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpremoteDeviceVlanName.setStatus('current')
if mibBuilder.loadTexts: lldpremoteDeviceVlanName.setDescription('LLDP remote device VLAN name')
lldpremoteDeviceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 9, 1, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 6))).clone(namedValues=NamedValues(("active", 1), ("desroty", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpremoteDeviceRowStatus.setStatus('current')
if mibBuilder.loadTexts: lldpremoteDeviceRowStatus.setDescription('LLDP remote device device rowstatus')
lldpOverloadingTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 10), )
if mibBuilder.loadTexts: lldpOverloadingTable.setStatus('current')
if mibBuilder.loadTexts: lldpOverloadingTable.setDescription('The table of LLDP overlaoding')
lldpOverloadingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 10, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "lldpOverloadingPortIndex"))
if mibBuilder.loadTexts: lldpOverloadingEntry.setStatus('current')
if mibBuilder.loadTexts: lldpOverloadingEntry.setDescription('The entry of LLDP overlaoding')
lldpOverloadingPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpOverloadingPortIndex.setStatus('current')
if mibBuilder.loadTexts: lldpOverloadingPortIndex.setDescription('The port index of LLDP overlaoding')
lldpOverloadingTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 10, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpOverloadingTotal.setStatus('current')
if mibBuilder.loadTexts: lldpOverloadingTotal.setDescription('LLDP overloading total')
lldpOverloadingLeftToSend = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 10, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpOverloadingLeftToSend.setStatus('current')
if mibBuilder.loadTexts: lldpOverloadingLeftToSend.setDescription('LLDP overloading left to send')
lldpOverloadingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 10, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpOverloadingStatus.setStatus('current')
if mibBuilder.loadTexts: lldpOverloadingStatus.setDescription('LLDP overloading status')
lldpOverloadingMandatoryTLVs = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 10, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpOverloadingMandatoryTLVs.setStatus('current')
if mibBuilder.loadTexts: lldpOverloadingMandatoryTLVs.setDescription('LLDP overloading mandatory TLVs')
lldpOverloadingIeee8023TLVs = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 10, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpOverloadingIeee8023TLVs.setStatus('current')
if mibBuilder.loadTexts: lldpOverloadingIeee8023TLVs.setDescription('LLDP overloading IEEE 802.3 TLVs')
lldpOverloadingOptionalTLVs = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 10, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpOverloadingOptionalTLVs.setStatus('current')
if mibBuilder.loadTexts: lldpOverloadingOptionalTLVs.setDescription('LLDP overloading optional TLVs')
lldpOverloadingIeee8021TLVs = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 1, 10, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpOverloadingIeee8021TLVs.setStatus('current')
if mibBuilder.loadTexts: lldpOverloadingIeee8021TLVs.setDescription('LLDP overloading IEEE 802.1 TLVs')
snmpState = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpState.setStatus('current')
if mibBuilder.loadTexts: snmpState.setDescription('SNMP golbal setting')
snmpCommunityTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 2, 2), )
if mibBuilder.loadTexts: snmpCommunityTable.setStatus('current')
if mibBuilder.loadTexts: snmpCommunityTable.setDescription('The table of SNMP community')
snmpCommunityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 2, 2, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "snmpCommunityIndex"))
if mibBuilder.loadTexts: snmpCommunityEntry.setStatus('current')
if mibBuilder.loadTexts: snmpCommunityEntry.setDescription('The entry of SNMP community')
snmpCommunityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpCommunityIndex.setStatus('current')
if mibBuilder.loadTexts: snmpCommunityIndex.setDescription('The index of SNMP community')
snmpCommunityString = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 2, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpCommunityString.setStatus('current')
if mibBuilder.loadTexts: snmpCommunityString.setDescription('The name of SNMP community')
snmpCommunityAccessRight = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ro", 1), ("rw", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpCommunityAccessRight.setStatus('current')
if mibBuilder.loadTexts: snmpCommunityAccessRight.setDescription('SNMP access mode')
snmpCommunityRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 2, 2, 1, 99), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("createAndWait", 5), ("destory", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpCommunityRowStatus.setStatus('current')
if mibBuilder.loadTexts: snmpCommunityRowStatus.setDescription('User can use createAndWait(5) to create new entry.\n\t\t\t\t\t\tAfter setup the value, user use active(1) to set into switch.\n\t\t\t\t\t\tUser can use destory to delete(6) an entry.')
snmpTrapHostTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 2, 3), )
if mibBuilder.loadTexts: snmpTrapHostTable.setStatus('current')
if mibBuilder.loadTexts: snmpTrapHostTable.setDescription('The table of SNMP trap host')
snmpTrapHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 2, 3, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "snmpTrapHostIndex"))
if mibBuilder.loadTexts: snmpTrapHostEntry.setStatus('current')
if mibBuilder.loadTexts: snmpTrapHostEntry.setDescription('The entry of SNMP trap host')
snmpTrapHostIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpTrapHostIndex.setStatus('current')
if mibBuilder.loadTexts: snmpTrapHostIndex.setDescription('The index of SNMP trap host')
snmpTrapHostIpaddress = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 2, 3, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapHostIpaddress.setStatus('current')
if mibBuilder.loadTexts: snmpTrapHostIpaddress.setDescription('The ipaddress or hostname of SNMP trap host')
snmpTrapHostCommunityName = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 2, 3, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapHostCommunityName.setStatus('current')
if mibBuilder.loadTexts: snmpTrapHostCommunityName.setDescription('The community name of SNMP trap host')
snmpTrapHostVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("v1", 1), ("v2cTrap", 2), ("v2cInform", 3), ("v3Trap", 4), ("v3Inform", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapHostVersion.setStatus('current')
if mibBuilder.loadTexts: snmpTrapHostVersion.setDescription('The SNMP version of SNMP trap host')
snmpTrapHostRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 2, 3, 1, 99), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("createAndWait", 5), ("destory", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpTrapHostRowStatus.setStatus('current')
if mibBuilder.loadTexts: snmpTrapHostRowStatus.setDescription('User can use createAndWait(5) to create new entry.\n\t\t\t\t\t\tAfter setup the value, user use active(1) to set into switch.\n\t\t\t\t\t\tUser can use destory to delete(6) an entry.')
snmpv3UserTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 2, 4), )
if mibBuilder.loadTexts: snmpv3UserTable.setStatus('current')
if mibBuilder.loadTexts: snmpv3UserTable.setDescription('The table of SNMPv3 user')
snmpv3UserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 2, 4, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "snmpv3UserIndex"))
if mibBuilder.loadTexts: snmpv3UserEntry.setStatus('current')
if mibBuilder.loadTexts: snmpv3UserEntry.setDescription('The entry of SNMPv3 user')
snmpv3UserIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpv3UserIndex.setStatus('current')
if mibBuilder.loadTexts: snmpv3UserIndex.setDescription('The index of SNMPv3 user')
snmpv3UserName = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 2, 4, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpv3UserName.setStatus('current')
if mibBuilder.loadTexts: snmpv3UserName.setDescription('The name of SNMPv3 user. Please input more than 8 characters.')
snmpv3UserAccessRight = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("readonly", 1), ("readwrite", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpv3UserAccessRight.setStatus('current')
if mibBuilder.loadTexts: snmpv3UserAccessRight.setDescription('The access right of SNMPv3 user')
snmpv3UserAuthProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("md5", 2), ("sha", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpv3UserAuthProtocol.setStatus('current')
if mibBuilder.loadTexts: snmpv3UserAuthProtocol.setDescription('The authentication protocol of SNMPv3 user')
snmpv3UserAuthPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 2, 4, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpv3UserAuthPassword.setStatus('current')
if mibBuilder.loadTexts: snmpv3UserAuthPassword.setDescription("The authentication password of SNMPv3 user.The password \n\t\t\t\t\t\tmust be at least eight characters long.The password can \n\t\t\t\t\t\tinclude alphabetic, numeric, and '-', '_', '.'")
snmpv3UserPrivProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 2, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("des", 2), ("aes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpv3UserPrivProtocol.setStatus('current')
if mibBuilder.loadTexts: snmpv3UserPrivProtocol.setDescription('The priviledge protocol of SNMPv3 user')
snmpv3UserPrivPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 2, 4, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpv3UserPrivPassword.setStatus('current')
if mibBuilder.loadTexts: snmpv3UserPrivPassword.setDescription("The priviledge password of SNMPv3 user.The password \n\t\t\t\t\t\tmust be at least eight characters long.The password can \n\t\t\t\t\t\tinclude alphabetic, numeric, and '-', '_', '.'")
snmpv3UserRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 2, 4, 1, 99), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("createAndWait", 5), ("destory", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpv3UserRowStatus.setStatus('current')
if mibBuilder.loadTexts: snmpv3UserRowStatus.setDescription('User can use createAndWait(5) to create new entry.\n\t\t\t\t\t\tAfter setup the value, user use active(1) to set into switch.\n\t\t\t\t\t\tUser can use destory to delete(6) an entry.')
snmpv3EngineID = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 2, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpv3EngineID.setStatus('current')
if mibBuilder.loadTexts: snmpv3EngineID.setDescription('The snmpv3 engine ID')
poeSystemSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 3, 1))
poeFwVersion = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 3, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poeFwVersion.setStatus('current')
if mibBuilder.loadTexts: poeFwVersion.setDescription('The PoE firmware version')
poeMaxPowerAvailable = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 720))).setUnits('W').setMaxAccess("readwrite")
if mibBuilder.loadTexts: poeMaxPowerAvailable.setStatus('current')
if mibBuilder.loadTexts: poeMaxPowerAvailable.setDescription('The maximum power available in PoE.\n\t\t\t             actual maximun power value is different according Switch Model.\n\t\t\t             ex : EKI-7710G maximun poe power value is 120W.\n\t\t\t                  EKI-7712G maximun poe power value is 240W. ')
poeActualPowerConsumption = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 3, 1, 3), Integer32()).setUnits('W').setMaxAccess("readonly")
if mibBuilder.loadTexts: poeActualPowerConsumption.setStatus('current')
if mibBuilder.loadTexts: poeActualPowerConsumption.setDescription('The actual power consumption in PoE')
poeOverLoadDisconnect = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("overload-port-first", 1), ("port-based-priority", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: poeOverLoadDisconnect.setStatus('current')
if mibBuilder.loadTexts: poeOverLoadDisconnect.setDescription('The overload disconnect mode in PoE')
poePortSettingTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 3, 2), )
if mibBuilder.loadTexts: poePortSettingTable.setStatus('current')
if mibBuilder.loadTexts: poePortSettingTable.setDescription('The table of PoE port setting')
poePortSettingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 3, 2, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "poePortIndex"))
if mibBuilder.loadTexts: poePortSettingEntry.setStatus('current')
if mibBuilder.loadTexts: poePortSettingEntry.setDescription('The table of PoE port setting')
poePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: poePortIndex.setStatus('current')
if mibBuilder.loadTexts: poePortIndex.setDescription('The index of PoE port setting')
poePortState = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: poePortState.setStatus('current')
if mibBuilder.loadTexts: poePortState.setDescription('The state of PoE port')
poePortLegacy = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: poePortLegacy.setStatus('current')
if mibBuilder.loadTexts: poePortLegacy.setDescription('The legacy of PoE port')
poePortPowerLimitClass = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: poePortPowerLimitClass.setStatus('current')
if mibBuilder.loadTexts: poePortPowerLimitClass.setDescription('The power limit form classification of PoE port')
poePortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("low", 1), ("medium", 2), ("high", 3), ("critical", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: poePortPriority.setStatus('current')
if mibBuilder.loadTexts: poePortPriority.setDescription('The priority of PoE port')
poePortPowerLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30000))).setUnits('mW').setMaxAccess("readwrite")
if mibBuilder.loadTexts: poePortPowerLimit.setStatus('current')
if mibBuilder.loadTexts: poePortPowerLimit.setDescription('The power limit of PoE port')
poePortStatusTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 3, 3), )
if mibBuilder.loadTexts: poePortStatusTable.setStatus('current')
if mibBuilder.loadTexts: poePortStatusTable.setDescription('The table of PoE port status')
poePortStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 3, 3, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "poePortStatusIndex"))
if mibBuilder.loadTexts: poePortStatusEntry.setStatus('current')
if mibBuilder.loadTexts: poePortStatusEntry.setDescription('The table of PoE port status')
poePortStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: poePortStatusIndex.setStatus('current')
if mibBuilder.loadTexts: poePortStatusIndex.setDescription('The index of PoE port status')
poePortCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 3, 3, 1, 2), DisplayString()).setUnits('mA').setMaxAccess("readonly")
if mibBuilder.loadTexts: poePortCurrent.setStatus('current')
if mibBuilder.loadTexts: poePortCurrent.setDescription('The current of PoE port')
poePortVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 3, 3, 1, 3), DisplayString()).setUnits('V').setMaxAccess("readonly")
if mibBuilder.loadTexts: poePortVoltage.setStatus('current')
if mibBuilder.loadTexts: poePortVoltage.setDescription('The voltage of PoE port')
poePortPower = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 3, 3, 1, 4), DisplayString()).setUnits('W').setMaxAccess("readonly")
if mibBuilder.loadTexts: poePortPower.setStatus('current')
if mibBuilder.loadTexts: poePortPower.setDescription('The power of PoE port')
poePortTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 3, 3, 1, 5), DisplayString()).setUnits('C').setMaxAccess("readonly")
if mibBuilder.loadTexts: poePortTemp.setStatus('current')
if mibBuilder.loadTexts: poePortTemp.setDescription('The temperature of PoE port')
tcpModbusState = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpModbusState.setStatus('current')
if mibBuilder.loadTexts: tcpModbusState.setDescription('The state of TCP Modbus')
tcpModbusTimeout = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpModbusTimeout.setStatus('current')
if mibBuilder.loadTexts: tcpModbusTimeout.setDescription('The time out of TCP Modbus')
dhcpServerState = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerState.setStatus('current')
if mibBuilder.loadTexts: dhcpServerState.setDescription('The state of DHCP Server')
dhcpServerGlobalSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5, 2))
dhcpServerLeaseTime = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 864000))).setUnits('second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerLeaseTime.setStatus('current')
if mibBuilder.loadTexts: dhcpServerLeaseTime.setDescription('The lease time of DHCP server')
dhcpServerLowIP = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5, 2, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerLowIP.setStatus('current')
if mibBuilder.loadTexts: dhcpServerLowIP.setDescription('The low IP address of DHCP server')
dhcpServerHighIP = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5, 2, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerHighIP.setStatus('current')
if mibBuilder.loadTexts: dhcpServerHighIP.setDescription('The high IP address of DHCP server')
dhcpServerSubmask = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5, 2, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerSubmask.setStatus('current')
if mibBuilder.loadTexts: dhcpServerSubmask.setDescription('The subnet mask of DHCP server')
dhcpServerGateway = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5, 2, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerGateway.setStatus('current')
if mibBuilder.loadTexts: dhcpServerGateway.setDescription('The gateway of DHCP server')
dhcpServerDNS = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5, 2, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerDNS.setStatus('current')
if mibBuilder.loadTexts: dhcpServerDNS.setDescription('The DNS of DHCP server')
dhcpServerStatus = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerStatus.setStatus('current')
if mibBuilder.loadTexts: dhcpServerStatus.setDescription('If user set golbal setting with SNMP, the value would not apply to \n\t\t\t\t\t\tswith. They need to set active(1) to apply into switch.')
dhcpServerClearIpPool = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerClearIpPool.setStatus('current')
if mibBuilder.loadTexts: dhcpServerClearIpPool.setDescription('Clear IP pool in DHCP Server')
dhcpServerPortTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5, 3), )
if mibBuilder.loadTexts: dhcpServerPortTable.setStatus('current')
if mibBuilder.loadTexts: dhcpServerPortTable.setDescription('The table of DHCP server port setting')
dhcpServerPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5, 3, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "dhcpServerPortIndex"))
if mibBuilder.loadTexts: dhcpServerPortEntry.setStatus('current')
if mibBuilder.loadTexts: dhcpServerPortEntry.setDescription('The entry of DHCP server port setting')
dhcpServerPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpServerPortIndex.setStatus('current')
if mibBuilder.loadTexts: dhcpServerPortIndex.setDescription('The index of DHCP server port setting')
dhcpServerPortLowIP = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5, 3, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerPortLowIP.setStatus('current')
if mibBuilder.loadTexts: dhcpServerPortLowIP.setDescription('The low IP address of DHCP server port')
dhcpServerPortHighIP = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5, 3, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerPortHighIP.setStatus('current')
if mibBuilder.loadTexts: dhcpServerPortHighIP.setDescription('The high IP address of DHCP server port')
dhcpServerPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5, 3, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerPortMask.setStatus('current')
if mibBuilder.loadTexts: dhcpServerPortMask.setDescription('The subnet mask of DHCP server port')
dhcpServerPortGW = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5, 3, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerPortGW.setStatus('current')
if mibBuilder.loadTexts: dhcpServerPortGW.setDescription('The gateway of DHCP server port')
dhcpServerPortDNS = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5, 3, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerPortDNS.setStatus('current')
if mibBuilder.loadTexts: dhcpServerPortDNS.setDescription('The DNS of DHCP server port')
dhcpServerPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerPortStatus.setStatus('current')
if mibBuilder.loadTexts: dhcpServerPortStatus.setDescription('If user set port setting with SNMP, the value would not apply to \n\t\t\t\t\t\tswith. They need to set active(1) to apply into switch.')
dhcpServerPortClear = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nothing", 0), ("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerPortClear.setStatus('current')
if mibBuilder.loadTexts: dhcpServerPortClear.setDescription('Clear IP poll on DHCP server port')
dhcpServerOpt82Table = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5, 4), )
if mibBuilder.loadTexts: dhcpServerOpt82Table.setStatus('current')
if mibBuilder.loadTexts: dhcpServerOpt82Table.setDescription('The table of DHCP option 82 setting')
dhcpServerOpt82Entry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5, 4, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "dhcpServerOpt82Index"))
if mibBuilder.loadTexts: dhcpServerOpt82Entry.setStatus('current')
if mibBuilder.loadTexts: dhcpServerOpt82Entry.setDescription('The entry of DHCP option 82 setting')
dhcpServerOpt82Index = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpServerOpt82Index.setStatus('current')
if mibBuilder.loadTexts: dhcpServerOpt82Index.setDescription('The index of DHCP server option 82 setting')
dhcpServerOpt82CircuitIDFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("string", 1), ("hex", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerOpt82CircuitIDFormat.setStatus('current')
if mibBuilder.loadTexts: dhcpServerOpt82CircuitIDFormat.setDescription('The circuit ID format of DHCP option 82')
dhcpServerOpt82CircuitID = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5, 4, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerOpt82CircuitID.setStatus('current')
if mibBuilder.loadTexts: dhcpServerOpt82CircuitID.setDescription('The circuit ID of DHCP option 82')
dhcpServerOpt82RemoteIDFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("string", 1), ("hex", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerOpt82RemoteIDFormat.setStatus('current')
if mibBuilder.loadTexts: dhcpServerOpt82RemoteIDFormat.setDescription('The remote ID format of DHCP option 82')
dhcpServerOpt82RemoteID = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5, 4, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerOpt82RemoteID.setStatus('current')
if mibBuilder.loadTexts: dhcpServerOpt82RemoteID.setDescription('The remote ID of DHCP option 82')
dhcpServerOpt82LowIP = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5, 4, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerOpt82LowIP.setStatus('current')
if mibBuilder.loadTexts: dhcpServerOpt82LowIP.setDescription('The low IP address of DHCP option 82')
dhcpServerOpt82HighIP = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5, 4, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerOpt82HighIP.setStatus('current')
if mibBuilder.loadTexts: dhcpServerOpt82HighIP.setDescription('The high IP address of DHCP option 82')
dhcpServerOpt82Mask = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5, 4, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerOpt82Mask.setStatus('current')
if mibBuilder.loadTexts: dhcpServerOpt82Mask.setDescription('The subnet mask of DHCP option 82')
dhcpServerOpt82GW = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5, 4, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerOpt82GW.setStatus('current')
if mibBuilder.loadTexts: dhcpServerOpt82GW.setDescription('The gateway of DHCP option 82')
dhcpServerOpt82DNS = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5, 4, 1, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerOpt82DNS.setStatus('current')
if mibBuilder.loadTexts: dhcpServerOpt82DNS.setDescription('The DNS of DHCP option 82')
dhcpServerOpt82Status = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerOpt82Status.setStatus('current')
if mibBuilder.loadTexts: dhcpServerOpt82Status.setDescription('If user set option82 setting with SNMP, the value would not apply to \n\t\t\t\t\t\tswith. They need to set active(1) to apply into switch.')
dhcpServerOpt82Clear = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nothing", 0), ("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerOpt82Clear.setStatus('current')
if mibBuilder.loadTexts: dhcpServerOpt82Clear.setDescription('Clear IP poll on DHCP option 82')
dhcpServerLeaseTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5, 5), )
if mibBuilder.loadTexts: dhcpServerLeaseTable.setStatus('current')
if mibBuilder.loadTexts: dhcpServerLeaseTable.setDescription('The table of DHCP server lease entry')
dhcpServerLeaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5, 5, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "dhcpServerLeaseIndex"))
if mibBuilder.loadTexts: dhcpServerLeaseEntry.setStatus('current')
if mibBuilder.loadTexts: dhcpServerLeaseEntry.setDescription('The entry of DHCP server lease entry')
dhcpServerLeaseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpServerLeaseIndex.setStatus('current')
if mibBuilder.loadTexts: dhcpServerLeaseIndex.setDescription('The index of DHCP server lease entry')
dhcpServerLeaseIp = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpServerLeaseIp.setStatus('current')
if mibBuilder.loadTexts: dhcpServerLeaseIp.setDescription('The IP address of DHCP server lease entry')
dhcpServerLeaseClientMac = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5, 5, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpServerLeaseClientMac.setStatus('current')
if mibBuilder.loadTexts: dhcpServerLeaseClientMac.setDescription('The client MAC of DHCP server lease entry')
dhcpServerLeaseStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5, 5, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpServerLeaseStartTime.setStatus('current')
if mibBuilder.loadTexts: dhcpServerLeaseStartTime.setDescription('The start time of DHCP server lease entry')
dhcpServerLeaseEndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5, 5, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpServerLeaseEndTime.setStatus('current')
if mibBuilder.loadTexts: dhcpServerLeaseEndTime.setDescription('The end time of DHCP server lease entry')
dhcpServerLeaseType = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5, 5, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpServerLeaseType.setStatus('current')
if mibBuilder.loadTexts: dhcpServerLeaseType.setDescription('The type of DHCP server lease entry')
dhcpServerRestart = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("restart", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerRestart.setStatus('current')
if mibBuilder.loadTexts: dhcpServerRestart.setDescription('Restart DHCP Server')
dhcpServerVlanTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5, 7), )
if mibBuilder.loadTexts: dhcpServerVlanTable.setStatus('current')
if mibBuilder.loadTexts: dhcpServerVlanTable.setDescription('The table of DHCP VLAN setting')
dhcpServerVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5, 7, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "dhcpServerVlanIndex"))
if mibBuilder.loadTexts: dhcpServerVlanEntry.setStatus('current')
if mibBuilder.loadTexts: dhcpServerVlanEntry.setDescription('The entry of DHCP VLAN setting')
dhcpServerVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpServerVlanIndex.setStatus('current')
if mibBuilder.loadTexts: dhcpServerVlanIndex.setDescription('The index of DHCP server VLAN setting')
dhcpServerVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerVlanId.setStatus('current')
if mibBuilder.loadTexts: dhcpServerVlanId.setDescription('The VLAN ID of DHCP VLAN setting')
dhcpServerVlanLowIP = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5, 7, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerVlanLowIP.setStatus('current')
if mibBuilder.loadTexts: dhcpServerVlanLowIP.setDescription('The low IP address of DHCP VLAN')
dhcpServerVlanHighIP = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5, 7, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerVlanHighIP.setStatus('current')
if mibBuilder.loadTexts: dhcpServerVlanHighIP.setDescription('The high IP address of DHCP VLAN')
dhcpServerVlanMask = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5, 7, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerVlanMask.setStatus('current')
if mibBuilder.loadTexts: dhcpServerVlanMask.setDescription('The subnet mask of DHCP VLAN')
dhcpServerVlanGW = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5, 7, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerVlanGW.setStatus('current')
if mibBuilder.loadTexts: dhcpServerVlanGW.setDescription('The gateway of DHCP VLAN')
dhcpServerVlanDNS = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5, 7, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerVlanDNS.setStatus('current')
if mibBuilder.loadTexts: dhcpServerVlanDNS.setDescription('The DNS of DHCP VLAN')
dhcpServerVlanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5, 7, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerVlanStatus.setStatus('current')
if mibBuilder.loadTexts: dhcpServerVlanStatus.setDescription('If user set VLAN setting with SNMP, the value would not apply to \n\t\t\t\t\t\tswith. They need to set active(1) to apply into switch.')
dhcpServerVlanClear = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5, 7, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nothing", 0), ("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerVlanClear.setStatus('current')
if mibBuilder.loadTexts: dhcpServerVlanClear.setDescription('Clear IP poll on DHCP VLAN')
dhcpServerClientMacTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5, 8), )
if mibBuilder.loadTexts: dhcpServerClientMacTable.setStatus('current')
if mibBuilder.loadTexts: dhcpServerClientMacTable.setDescription('The table of DHCP client mac setting')
dhcpServerClientMacEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5, 8, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "dhcpServerClientMacEntryID"))
if mibBuilder.loadTexts: dhcpServerClientMacEntry.setStatus('current')
if mibBuilder.loadTexts: dhcpServerClientMacEntry.setDescription('The entry of DHCP server client mac setting')
dhcpServerClientMacEntryID = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerClientMacEntryID.setStatus('current')
if mibBuilder.loadTexts: dhcpServerClientMacEntryID.setDescription('The index of DHCP server client mac entry')
dhcpServerClientMacEntryMac = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5, 8, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerClientMacEntryMac.setStatus('current')
if mibBuilder.loadTexts: dhcpServerClientMacEntryMac.setDescription('The MAC address of DHCP server client mac entry.')
dhcpServerClientMacEntryIP = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5, 8, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerClientMacEntryIP.setStatus('current')
if mibBuilder.loadTexts: dhcpServerClientMacEntryIP.setDescription('The IP address of DHCP server client mac entry.')
dhcpServerClientMacEntryMask = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5, 8, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerClientMacEntryMask.setStatus('current')
if mibBuilder.loadTexts: dhcpServerClientMacEntryMask.setDescription('The subnet mask of DHCP DHCP server client mac entry.')
dhcpServerClientMacEntryGW = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5, 8, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerClientMacEntryGW.setStatus('current')
if mibBuilder.loadTexts: dhcpServerClientMacEntryGW.setDescription('The gateway of DHCP DHCP server client mac entry.')
dhcpServerClientMacEntryDNS = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5, 8, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerClientMacEntryDNS.setStatus('current')
if mibBuilder.loadTexts: dhcpServerClientMacEntryDNS.setDescription('The DNS of DHCP DHCP server client mac entry.')
dhcpServerClientMacEntryRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 5, 8, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("valid", 1), ("createRequest", 2), ("underCreation", 3), ("invalid", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpServerClientMacEntryRowStatus.setStatus('current')
if mibBuilder.loadTexts: dhcpServerClientMacEntryRowStatus.setDescription('User can use createRequest(2) to create new entry.\n\t\t\t\t\t\tAfter setup the value, user use valid(1) to set into switch.\n\t\t\t\t\t\tUser can use destory to invalid(4) an entry.')
smtpActiveProfile = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("one", 1), ("two", 2), ("none", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smtpActiveProfile.setStatus('current')
if mibBuilder.loadTexts: smtpActiveProfile.setDescription('The active profile of SMTP client')
smtpProfileTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 6, 2), )
if mibBuilder.loadTexts: smtpProfileTable.setStatus('current')
if mibBuilder.loadTexts: smtpProfileTable.setDescription('The table of SMTP client profile')
smtpProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 6, 2, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "smtpProfileIndex"))
if mibBuilder.loadTexts: smtpProfileEntry.setStatus('current')
if mibBuilder.loadTexts: smtpProfileEntry.setDescription('The entry of SMTP client profile')
smtpProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpProfileIndex.setStatus('current')
if mibBuilder.loadTexts: smtpProfileIndex.setDescription('The index of SMTP client profile')
smtpServerIp = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 6, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smtpServerIp.setStatus('current')
if mibBuilder.loadTexts: smtpServerIp.setDescription('The SMTP server IP')
smtpServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 6, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpServerPort.setStatus('current')
if mibBuilder.loadTexts: smtpServerPort.setDescription('The SMTP server port')
smtpSenderMail = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 6, 2, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smtpSenderMail.setStatus('current')
if mibBuilder.loadTexts: smtpSenderMail.setDescription('The SMTP sender mail')
smtpTargetMail1 = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 6, 2, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smtpTargetMail1.setStatus('current')
if mibBuilder.loadTexts: smtpTargetMail1.setDescription('The SMTP target mail 1')
smtpTargetMail2 = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 6, 2, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smtpTargetMail2.setStatus('current')
if mibBuilder.loadTexts: smtpTargetMail2.setDescription('The SMTP target mail 2')
smtpTargetMail3 = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 6, 2, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smtpTargetMail3.setStatus('current')
if mibBuilder.loadTexts: smtpTargetMail3.setDescription('The SMTP target mail 3')
smtpTargetMail4 = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 6, 2, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smtpTargetMail4.setStatus('current')
if mibBuilder.loadTexts: smtpTargetMail4.setDescription('The SMTP target mail 4')
smtpTargetMail5 = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 6, 2, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smtpTargetMail5.setStatus('current')
if mibBuilder.loadTexts: smtpTargetMail5.setDescription('The SMTP target mail 5')
smtpTargetMail6 = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 6, 2, 1, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smtpTargetMail6.setStatus('current')
if mibBuilder.loadTexts: smtpTargetMail6.setDescription('The SMTP target mail 6')
smtpTargetMail7 = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 6, 2, 1, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smtpTargetMail7.setStatus('current')
if mibBuilder.loadTexts: smtpTargetMail7.setDescription('The SMTP target mail 7')
smtpTargetMail8 = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 6, 2, 1, 12), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smtpTargetMail8.setStatus('current')
if mibBuilder.loadTexts: smtpTargetMail8.setDescription('The SMTP target mail 8')
rmonStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 7, 1), )
if mibBuilder.loadTexts: rmonStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: rmonStatisticsTable.setDescription('The table of RMON Statistics')
rmonStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 7, 1, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "rmonStatisticsIndex"))
if mibBuilder.loadTexts: rmonStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: rmonStatisticsEntry.setDescription('The entry of RMON Statistics')
rmonStatisticsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmonStatisticsIndex.setStatus('current')
if mibBuilder.loadTexts: rmonStatisticsIndex.setDescription('The index of RMON Statistics')
rmonStatisticsPort = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 7, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmonStatisticsPort.setStatus('current')
if mibBuilder.loadTexts: rmonStatisticsPort.setDescription('The port number of RMON Statistics')
rmonStatisticsDropEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 7, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonStatisticsDropEvents.setStatus('current')
if mibBuilder.loadTexts: rmonStatisticsDropEvents.setDescription('The drop events of RMON Statistics')
rmonStatisticsOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 7, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonStatisticsOctets.setStatus('current')
if mibBuilder.loadTexts: rmonStatisticsOctets.setDescription('The octets of RMON Statistics')
rmonStatisticsPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 7, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonStatisticsPackets.setStatus('current')
if mibBuilder.loadTexts: rmonStatisticsPackets.setDescription('The packets of RMON Statistics')
rmonStatisticsBroadcast = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 7, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonStatisticsBroadcast.setStatus('current')
if mibBuilder.loadTexts: rmonStatisticsBroadcast.setDescription('The broadcast of RMON Statistics')
rmonStatisticsMulticast = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 7, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonStatisticsMulticast.setStatus('current')
if mibBuilder.loadTexts: rmonStatisticsMulticast.setDescription('The multicast of RMON Statistics')
rmonStatisticsOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 7, 1, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmonStatisticsOwner.setStatus('current')
if mibBuilder.loadTexts: rmonStatisticsOwner.setDescription('The owner of RMON Statistics')
rmonStatisticsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 7, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("valid", 1), ("createRequest", 2), ("underCreation", 3), ("invalid", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonStatisticsRowStatus.setStatus('current')
if mibBuilder.loadTexts: rmonStatisticsRowStatus.setDescription('User can use createRequest(2) to create new entry.\n\t\t\t\t\t\tAfter setup the value, user use valid(1) to set into switch.\n\t\t\t\t\t\tUser can use destory to invalid(4) an entry.')
rmonHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 7, 2), )
if mibBuilder.loadTexts: rmonHistoryTable.setStatus('current')
if mibBuilder.loadTexts: rmonHistoryTable.setDescription('The table of RMON history')
rmonHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 7, 2, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "rmonHistoryIndex"))
if mibBuilder.loadTexts: rmonHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: rmonHistoryEntry.setDescription('The entry of RMON history')
rmonHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmonHistoryIndex.setStatus('current')
if mibBuilder.loadTexts: rmonHistoryIndex.setDescription('The index of RMON history')
rmonHistoryPort = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 7, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmonHistoryPort.setStatus('current')
if mibBuilder.loadTexts: rmonHistoryPort.setDescription('The port number of RMON history')
rmonHistoryBucketsRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 7, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmonHistoryBucketsRequest.setStatus('current')
if mibBuilder.loadTexts: rmonHistoryBucketsRequest.setDescription('The buckets requested of RMON history')
rmonHistoryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 7, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmonHistoryInterval.setStatus('current')
if mibBuilder.loadTexts: rmonHistoryInterval.setDescription('The index of RMON history')
rmonHistoryOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 7, 2, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmonHistoryOwner.setStatus('current')
if mibBuilder.loadTexts: rmonHistoryOwner.setDescription('The port number of RMON history')
rmonHistoryRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 7, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("valid", 1), ("createRequest", 2), ("underCreation", 3), ("invalid", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonHistoryRowStatus.setStatus('current')
if mibBuilder.loadTexts: rmonHistoryRowStatus.setDescription('User can use createRequest(2) to create new entry.\n\t\t\t\t\t\tAfter setup the value, user use valid(1) to set into switch.\n\t\t\t\t\t\tUser can use destory to invalid(4) an entry.')
rmonAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 7, 3), )
if mibBuilder.loadTexts: rmonAlarmTable.setStatus('current')
if mibBuilder.loadTexts: rmonAlarmTable.setDescription('The table of RMON alarm')
rmonAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 7, 3, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "rmonAlarmIndex"))
if mibBuilder.loadTexts: rmonAlarmEntry.setStatus('current')
if mibBuilder.loadTexts: rmonAlarmEntry.setDescription('The entry of RMON alarm')
rmonAlarmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 7, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmonAlarmIndex.setStatus('current')
if mibBuilder.loadTexts: rmonAlarmIndex.setDescription('The index of RMON alarm')
rmonAlarmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 7, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmonAlarmInterval.setStatus('current')
if mibBuilder.loadTexts: rmonAlarmInterval.setDescription('The interval of RMON alarm')
rmonAlarmVariable = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 7, 3, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmonAlarmVariable.setStatus('current')
if mibBuilder.loadTexts: rmonAlarmVariable.setDescription('The variable of RMON alarm')
rmonAlarmSampleType = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 7, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("absolute", 1), ("delta", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmonAlarmSampleType.setStatus('current')
if mibBuilder.loadTexts: rmonAlarmSampleType.setDescription('The sample type of RMON alarm')
rmonAlarmRisingThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 7, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmonAlarmRisingThreshold.setStatus('current')
if mibBuilder.loadTexts: rmonAlarmRisingThreshold.setDescription('The rising threshold of RMON alarm')
rmonAlarmFallingThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 7, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmonAlarmFallingThreshold.setStatus('current')
if mibBuilder.loadTexts: rmonAlarmFallingThreshold.setDescription('The falling threshold of RMON alarm')
rmonAlarmRisingEventIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 7, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmonAlarmRisingEventIndex.setStatus('current')
if mibBuilder.loadTexts: rmonAlarmRisingEventIndex.setDescription('The rising event index of RMON alarm')
rmonAlarmFallingEventIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 7, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmonAlarmFallingEventIndex.setStatus('current')
if mibBuilder.loadTexts: rmonAlarmFallingEventIndex.setDescription('The falling event indx of RMON alarm')
rmonAlarmOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 7, 3, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmonAlarmOwner.setStatus('current')
if mibBuilder.loadTexts: rmonAlarmOwner.setDescription('The owner of RMON alarm')
rmonAlarmRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 7, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("valid", 1), ("createRequest", 2), ("underCreation", 3), ("invalid", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonAlarmRowStatus.setStatus('current')
if mibBuilder.loadTexts: rmonAlarmRowStatus.setDescription('User can use createRequest(2) to create new entry.\n\t\t\t\t\t\tAfter setup the value, user use valid(1) to set into switch.\n\t\t\t\t\t\tUser can use destory to invalid(4) an entry.')
rmonEventTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 7, 4), )
if mibBuilder.loadTexts: rmonEventTable.setStatus('current')
if mibBuilder.loadTexts: rmonEventTable.setDescription('The table of RMON event')
rmonEventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 7, 4, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "rmonEventIndex"))
if mibBuilder.loadTexts: rmonEventEntry.setStatus('current')
if mibBuilder.loadTexts: rmonEventEntry.setDescription('The entry of RMON event')
rmonEventIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 7, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmonEventIndex.setStatus('current')
if mibBuilder.loadTexts: rmonEventIndex.setDescription('The index of RMON event')
rmonEventDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 7, 4, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmonEventDescription.setStatus('current')
if mibBuilder.loadTexts: rmonEventDescription.setDescription('The description of RMON event')
rmonEventType = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 7, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("log", 2), ("trap", 3), ("logTrap", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmonEventType.setStatus('current')
if mibBuilder.loadTexts: rmonEventType.setDescription('The type of RMON event')
rmonEventCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 7, 4, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmonEventCommunity.setStatus('current')
if mibBuilder.loadTexts: rmonEventCommunity.setDescription('The community of RMON event')
rmonEventOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 7, 4, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmonEventOwner.setStatus('current')
if mibBuilder.loadTexts: rmonEventOwner.setDescription('The owner of RMON event')
rmonEventRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 7, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("valid", 1), ("createRequest", 2), ("underCreation", 3), ("invalid", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonEventRowStatus.setStatus('current')
if mibBuilder.loadTexts: rmonEventRowStatus.setDescription('User can use createRequest(2) to create new entry.\n\t\t\t\t\t\tAfter setup the value, user use valid(1) to set into switch.\n\t\t\t\t\t\tUser can use destory to invalid(4) an entry.')
ntpServer = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpServer.setStatus('current')
if mibBuilder.loadTexts: ntpServer.setDescription('enable/disable NTP server.')
ntpManualTime = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpManualTime.setStatus('current')
if mibBuilder.loadTexts: ntpManualTime.setDescription('enable/disable NTP manual time.')
ntpServerTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 8, 3), )
if mibBuilder.loadTexts: ntpServerTable.setStatus('current')
if mibBuilder.loadTexts: ntpServerTable.setDescription('The table of NTP server')
ntpServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 8, 3, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "ntpServerIndex"))
if mibBuilder.loadTexts: ntpServerEntry.setStatus('current')
if mibBuilder.loadTexts: ntpServerEntry.setDescription('The entry of NTP server')
ntpServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 8, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpServerIndex.setStatus('current')
if mibBuilder.loadTexts: ntpServerIndex.setDescription('The index of NTP server')
ntpServerIp = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 7, 8, 3, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpServerIp.setStatus('current')
if mibBuilder.loadTexts: ntpServerIp.setDescription('The ip address of NTP server')
copperTest = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 1))
pingTest = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 2))
ipv6pingTest = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 3))
loggingSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 4))
factoryDefault = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 5))
reboot = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 6))
dhcpAutoProvision = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 7))
ledIndication = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 8))
portNumber = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portNumber.setStatus('current')
if mibBuilder.loadTexts: portNumber.setDescription('The port ID for copper test')
copperTestAction = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("copperTest", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: copperTestAction.setStatus('current')
if mibBuilder.loadTexts: copperTestAction.setDescription('Copper test action')
copperTestResult = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 1, 3))
resultPort = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: resultPort.setStatus('current')
if mibBuilder.loadTexts: resultPort.setDescription('The copper test port ID')
channelA = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 1, 3, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelA.setStatus('current')
if mibBuilder.loadTexts: channelA.setDescription('The copper test result for channel A')
cableLengthA = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 1, 3, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableLengthA.setStatus('current')
if mibBuilder.loadTexts: cableLengthA.setDescription('The copper test result for cable length A')
channelB = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 1, 3, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelB.setStatus('current')
if mibBuilder.loadTexts: channelB.setDescription('The copper test result for channel B')
cableLengthB = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 1, 3, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableLengthB.setStatus('current')
if mibBuilder.loadTexts: cableLengthB.setDescription('The copper test result forcable length B')
channelC = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 1, 3, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelC.setStatus('current')
if mibBuilder.loadTexts: channelC.setDescription('The copper test result for channel C')
cableLengthC = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 1, 3, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableLengthC.setStatus('current')
if mibBuilder.loadTexts: cableLengthC.setDescription('The copper test result for cable length C')
channelD = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 1, 3, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelD.setStatus('current')
if mibBuilder.loadTexts: channelD.setDescription('The copper test result for channel D')
cableLengthD = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 1, 3, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableLengthD.setStatus('current')
if mibBuilder.loadTexts: cableLengthD.setDescription('The copper test result for cable length D')
channelRx = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 1, 3, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelRx.setStatus('current')
if mibBuilder.loadTexts: channelRx.setDescription('The copper test result for channel Rx')
cableLengthRx = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 1, 3, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableLengthRx.setStatus('current')
if mibBuilder.loadTexts: cableLengthRx.setDescription('The copper test result for cable length Rx')
channelTx = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 1, 3, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelTx.setStatus('current')
if mibBuilder.loadTexts: channelTx.setDescription('The copper test result for channel Tx')
cableLengthTx = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 1, 3, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableLengthTx.setStatus('current')
if mibBuilder.loadTexts: cableLengthTx.setDescription('The copper test result for cable length Tx')
pingIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 2, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pingIPAddress.setStatus('current')
if mibBuilder.loadTexts: pingIPAddress.setDescription('The IP address or hostname of ping target')
pingCount = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pingCount.setStatus('current')
if mibBuilder.loadTexts: pingCount.setDescription('How many times to send ping request packets')
pingInterval = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pingInterval.setStatus('current')
if mibBuilder.loadTexts: pingInterval.setDescription('Time interval between each ping request packets')
pingSize = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8, 5120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pingSize.setStatus('current')
if mibBuilder.loadTexts: pingSize.setDescription('The size of ping packet')
pingAction = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("ping", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pingAction.setStatus('current')
if mibBuilder.loadTexts: pingAction.setDescription('The ping action')
pingResult = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 2, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pingResult.setStatus('current')
if mibBuilder.loadTexts: pingResult.setDescription('After ping finished, results will show in this OID')
pingIPv6Address = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 3, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pingIPv6Address.setStatus('current')
if mibBuilder.loadTexts: pingIPv6Address.setDescription('The IPv6 address of ping target')
pingIPv6Count = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pingIPv6Count.setStatus('current')
if mibBuilder.loadTexts: pingIPv6Count.setDescription('How many times to send ping request packet')
pingIPv6Interval = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pingIPv6Interval.setStatus('current')
if mibBuilder.loadTexts: pingIPv6Interval.setDescription('Time interval between each ping request packet')
pingIPv6Size = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 3, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8, 5120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pingIPv6Size.setStatus('current')
if mibBuilder.loadTexts: pingIPv6Size.setDescription('The size of ping packet')
pingIPv6Action = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("ping", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pingIPv6Action.setStatus('current')
if mibBuilder.loadTexts: pingIPv6Action.setDescription('The IPv6 ping action')
pingIPv6Result = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 3, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pingIPv6Result.setStatus('current')
if mibBuilder.loadTexts: pingIPv6Result.setDescription('After ping finished, results will show in this field')
loggingService = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loggingService.setStatus('current')
if mibBuilder.loadTexts: loggingService.setDescription('Enable/Disable logging system')
localLoggingTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 4, 2), )
if mibBuilder.loadTexts: localLoggingTable.setStatus('current')
if mibBuilder.loadTexts: localLoggingTable.setDescription('The table of local logging')
localLoggingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 4, 2, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "localLoggingIndex"))
if mibBuilder.loadTexts: localLoggingEntry.setStatus('current')
if mibBuilder.loadTexts: localLoggingEntry.setDescription('The entry of local logging')
localLoggingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: localLoggingIndex.setStatus('current')
if mibBuilder.loadTexts: localLoggingIndex.setDescription('The index of local logging')
bufferedtarget = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("buffered", 1), ("console", 2), ("file", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferedtarget.setStatus('current')
if mibBuilder.loadTexts: bufferedtarget.setDescription('The target to store log message\n\t\t\t\t\t\tBuffered: Store log messages in device buffer.\n\t\t\t\t\t\tFile: Store log message in file.\n\t\t\t\t\t\tConsole: Show the log message on console.')
localLoggingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: localLoggingStatus.setStatus('current')
if mibBuilder.loadTexts: localLoggingStatus.setDescription('Enable/Disable status the logging system')
localLoggingSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 4, 2, 1, 4), Bits().clone(namedValues=NamedValues(("emerg", 0), ("alert", 1), ("crit", 2), ("error", 3), ("warning", 4), ("notice", 5), ("info", 6), ("debug", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: localLoggingSeverity.setStatus('current')
if mibBuilder.loadTexts: localLoggingSeverity.setDescription('Severity of log message which will be stored')
remoteloggingTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 4, 3), )
if mibBuilder.loadTexts: remoteloggingTable.setStatus('current')
if mibBuilder.loadTexts: remoteloggingTable.setDescription('The table of remote logging')
remoteloggingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 4, 3, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "serverAddress"))
if mibBuilder.loadTexts: remoteloggingEntry.setStatus('current')
if mibBuilder.loadTexts: remoteloggingEntry.setDescription('The entry of remote logging')
remoteloggingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteloggingIndex.setStatus('current')
if mibBuilder.loadTexts: remoteloggingIndex.setDescription('The index of remote logging')
remoteloggingAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 4, 3, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteloggingAddress.setStatus('current')
if mibBuilder.loadTexts: remoteloggingAddress.setDescription('The IP address of remote log server')
remoteloggingPort = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteloggingPort.setStatus('current')
if mibBuilder.loadTexts: remoteloggingPort.setDescription('The port number of remote log server')
remoteloggingSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 4, 3, 1, 4), Bits().clone(namedValues=NamedValues(("emerg", 0), ("alert", 1), ("crit", 2), ("error", 3), ("warning", 4), ("notice", 5), ("info", 6), ("debug", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteloggingSeverity.setStatus('current')
if mibBuilder.loadTexts: remoteloggingSeverity.setDescription('The severity of log messages which will be sent')
remoteloggingFacility = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 4, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("local0", 1), ("local1", 2), ("local2", 3), ("local3", 4), ("local4", 5), ("local5", 6), ("local6", 7), ("local7", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteloggingFacility.setStatus('current')
if mibBuilder.loadTexts: remoteloggingFacility.setDescription('The facility of log messages which will be sent')
remoteloggingRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 4, 3, 1, 99), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("createAndWait", 5), ("destory", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: remoteloggingRowStatus.setStatus('current')
if mibBuilder.loadTexts: remoteloggingRowStatus.setDescription('User can use createAndWait(5) to create new entry.\n\t\t\t\t\t\tAfter setup the value, user use active(1) to set into switch.\n\t\t\t\t\t\tUser can use destory to delete(6) an entry.')
factoryDefaultAction = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("factoryDefault", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: factoryDefaultAction.setStatus('current')
if mibBuilder.loadTexts: factoryDefaultAction.setDescription('user to restore switch to factory default')
factoryDefaultKeepFlag = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 5, 2), Bits().clone(namedValues=NamedValues(("vlan", 1), ("ipaddress", 2), ("useraccount", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: factoryDefaultKeepFlag.setStatus('current')
if mibBuilder.loadTexts: factoryDefaultKeepFlag.setDescription('Keep setting when switch is restore to factory default.')
rebootAction = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reboot", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rebootAction.setStatus('current')
if mibBuilder.loadTexts: rebootAction.setDescription('user to reboot the switch')
dhcpAutoProvisionEnable = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpAutoProvisionEnable.setStatus('current')
if mibBuilder.loadTexts: dhcpAutoProvisionEnable.setDescription('The status of DHCP auto provision')
ledAlarmState = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ledAlarmState.setStatus('current')
if mibBuilder.loadTexts: ledAlarmState.setDescription('Enable/Disable LED alarm')
ledPowerFailureEvent = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ledPowerFailureEvent.setStatus('current')
if mibBuilder.loadTexts: ledPowerFailureEvent.setDescription('Enable/Disable LED power failure event')
ledFiberLinkdownEvent = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 8, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ledFiberLinkdownEvent.setStatus('current')
if mibBuilder.loadTexts: ledFiberLinkdownEvent.setDescription('Enable/Disable LED fiber port Link down event')
ledPortLinkdownEvent = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 8, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ledPortLinkdownEvent.setStatus('current')
if mibBuilder.loadTexts: ledPortLinkdownEvent.setDescription('Enable/Disable LED port Link down event')
ledPortLinkdownEventPort = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 8, 5), Bits().clone(namedValues=NamedValues(("port1", 0), ("port2", 1), ("port3", 2), ("port4", 3), ("port5", 4), ("port6", 5), ("port7", 6), ("port8", 7), ("port9", 8), ("port10", 9), ("port11", 10), ("port12", 11), ("port13", 12), ("port14", 13), ("port15", 14), ("port16", 15), ("port17", 16), ("port18", 17), ("port19", 18), ("port20", 19), ("port21", 20), ("port22", 21), ("port23", 22), ("port24", 23), ("port25", 24), ("port26", 25), ("port27", 26), ("port28", 27), ("port29", 28), ("port30", 29), ("port31", 30), ("port32", 31)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ledPortLinkdownEventPort.setStatus('current')
if mibBuilder.loadTexts: ledPortLinkdownEventPort.setDescription('The member ports of LED port Link down event')
ledEventInfoTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 8, 6), )
if mibBuilder.loadTexts: ledEventInfoTable.setStatus('current')
if mibBuilder.loadTexts: ledEventInfoTable.setDescription('The table of led event info')
ledEventInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 8, 6, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "ledEventIndex"))
if mibBuilder.loadTexts: ledEventInfoEntry.setStatus('current')
if mibBuilder.loadTexts: ledEventInfoEntry.setDescription('The entry of led event info')
ledEventIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 8, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ledEventIndex.setStatus('current')
if mibBuilder.loadTexts: ledEventIndex.setDescription('The index of led event info')
ledType = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 8, 6, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ledType.setStatus('current')
if mibBuilder.loadTexts: ledType.setDescription('The type of led event info')
ledEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 8, 6, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ledEvent.setStatus('current')
if mibBuilder.loadTexts: ledEvent.setDescription('The event of led event info')
ledState = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 8, 6, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ledState.setStatus('current')
if mibBuilder.loadTexts: ledState.setDescription('The state of led event info')
ledErrorTimes = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 8, 8, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ledErrorTimes.setStatus('current')
if mibBuilder.loadTexts: ledErrorTimes.setDescription('The error times of led event info')
backupManager = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 9, 1))
upgradeManager = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 9, 2))
dualImage = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 9, 3))
configurationManager = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 9, 4))
accountManager = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 9, 5))
nKey = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 9, 6))
backupMethod = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 9, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("tftp", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: backupMethod.setStatus('current')
if mibBuilder.loadTexts: backupMethod.setDescription('The method of backup file')
backupServerIP = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 9, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: backupServerIP.setStatus('current')
if mibBuilder.loadTexts: backupServerIP.setDescription('The IP address of the TFTP server')
backupType = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 5, 6))).clone(namedValues=NamedValues(("image", 1), ("startupConfig", 2), ("runningConfig", 3), ("flashlog", 5), ("bufferlog", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: backupType.setStatus('current')
if mibBuilder.loadTexts: backupType.setDescription('The backup configuration type')
backupImage = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("partition0", 1), ("partition1", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: backupImage.setStatus('current')
if mibBuilder.loadTexts: backupImage.setDescription('The backup firmware image')
backupAction = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("backup", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: backupAction.setStatus('current')
if mibBuilder.loadTexts: backupAction.setDescription('The backup action')
upgradeMethod = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 9, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("tftp", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upgradeMethod.setStatus('current')
if mibBuilder.loadTexts: upgradeMethod.setDescription('The upgrade file method')
upgradeServerIP = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 9, 2, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upgradeServerIP.setStatus('current')
if mibBuilder.loadTexts: upgradeServerIP.setDescription('The server IP address')
upgradeFileName = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 9, 2, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upgradeFileName.setStatus('current')
if mibBuilder.loadTexts: upgradeFileName.setDescription('The upgrade file name')
upgradeType = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 9, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("image", 1), ("startupConfig", 2), ("runningConfig", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upgradeType.setStatus('current')
if mibBuilder.loadTexts: upgradeType.setDescription('The upgrade type')
upgradeImage = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 9, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("backup", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upgradeImage.setStatus('current')
if mibBuilder.loadTexts: upgradeImage.setDescription('The uprade firmware image')
upgradeAction = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 9, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("upgrade", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upgradeAction.setStatus('current')
if mibBuilder.loadTexts: upgradeAction.setDescription('The upgrade action')
upgradeStatus = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 9, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on-going", 1), ("done", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upgradeStatus.setStatus('current')
if mibBuilder.loadTexts: upgradeStatus.setDescription('The upgrade status')
activeImage = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 9, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("image1", 1), ("image2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: activeImage.setStatus('current')
if mibBuilder.loadTexts: activeImage.setDescription('The active image')
imageInfoTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 9, 3, 2), )
if mibBuilder.loadTexts: imageInfoTable.setStatus('current')
if mibBuilder.loadTexts: imageInfoTable.setDescription('The table of image info')
imageInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 9, 3, 2, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "flashPartition"))
if mibBuilder.loadTexts: imageInfoEntry.setStatus('current')
if mibBuilder.loadTexts: imageInfoEntry.setDescription('The entry of image info')
flashPartition = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 9, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: flashPartition.setStatus('current')
if mibBuilder.loadTexts: flashPartition.setDescription('The FLASH partition')
imageName = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 9, 3, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imageName.setStatus('current')
if mibBuilder.loadTexts: imageName.setDescription('The image name')
imageSize = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 9, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imageSize.setStatus('current')
if mibBuilder.loadTexts: imageSize.setDescription('The image size')
createdTime = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 9, 3, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: createdTime.setStatus('current')
if mibBuilder.loadTexts: createdTime.setDescription('The FW creation time')
imageVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 9, 3, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imageVersion.setStatus('current')
if mibBuilder.loadTexts: imageVersion.setDescription('The image version')
sourceFile = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 9, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("running", 1), ("startup", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sourceFile.setStatus('current')
if mibBuilder.loadTexts: sourceFile.setDescription('The configuration source file')
destinationFile = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 9, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("running", 1), ("startup", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: destinationFile.setStatus('current')
if mibBuilder.loadTexts: destinationFile.setDescription('The configuration destination file')
saveConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 9, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("save", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: saveConfiguration.setStatus('current')
if mibBuilder.loadTexts: saveConfiguration.setDescription('Save the current configuration')
localUserTable = MibTable((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 9, 5, 1), )
if mibBuilder.loadTexts: localUserTable.setStatus('current')
if mibBuilder.loadTexts: localUserTable.setDescription('The table of local user')
localUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 9, 5, 1, 1), ).setIndexNames((0, "ADVANTECH-EKI-PRONEER-MIB", "localUserIndex"))
if mibBuilder.loadTexts: localUserEntry.setStatus('current')
if mibBuilder.loadTexts: localUserEntry.setDescription('The entry of local user')
localUserIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 9, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: localUserIndex.setStatus('current')
if mibBuilder.loadTexts: localUserIndex.setDescription('The index of local user')
localUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 9, 5, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: localUserName.setStatus('current')
if mibBuilder.loadTexts: localUserName.setDescription('The user name of local user')
localUserPasswordType = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 9, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("cleartext", 1), ("encrypted", 2), ("noPassword", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: localUserPasswordType.setStatus('current')
if mibBuilder.loadTexts: localUserPasswordType.setDescription('The pasword type of local user')
localUserPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 9, 5, 1, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: localUserPassword.setStatus('current')
if mibBuilder.loadTexts: localUserPassword.setDescription('The password of local user')
localUserPrivilegeType = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 9, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("admin", 1), ("user", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: localUserPrivilegeType.setStatus('current')
if mibBuilder.loadTexts: localUserPrivilegeType.setDescription('The privilege type of local user')
localUserRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 9, 5, 1, 1, 99), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("createAndWait", 5), ("destory", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: localUserRowStatus.setStatus('current')
if mibBuilder.loadTexts: localUserRowStatus.setDescription('User can use createAndWait(5) to create new entry.\n\t\t\t\t\t\tAfter setup the value, user use active(1) to set into switch.\n\t\t\t\t\t\tUser can use destory to delete(6) an entry.')
nKeyAutoMode = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 9, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nKeyAutoMode.setStatus('current')
if mibBuilder.loadTexts: nKeyAutoMode.setDescription('The auto mode of N-Key.')
nKeyStatus = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 9, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("idle", 0), ("backup", 1), ("restore", 2), ("running", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nKeyStatus.setStatus('current')
if mibBuilder.loadTexts: nKeyStatus.setDescription("Select N-key is idle or \n\t\t\tbackup the current configurations to N-Key or\n\t\t\trestore N-Key's configurations to switch.\n\t\t\tThe fourth option is read-only.")
trapObject = MibIdentifier((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 99, 1))
ddmiAlarmDescr = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 99, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmiAlarmDescr.setStatus('current')
if mibBuilder.loadTexts: ddmiAlarmDescr.setDescription('The description of DDMI trap')
xRingMasterStatus = MibScalar((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 99, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("masterToSlave", 1), ("slaveToMaster", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xRingMasterStatus.setStatus('current')
if mibBuilder.loadTexts: xRingMasterStatus.setDescription('The status of XRing Pro Master.')
ddmiAlarmWarning = NotificationType((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 99, 2)).setObjects(("ADVANTECH-EKI-PRONEER-MIB", "ddmiAlarmDescr"))
if mibBuilder.loadTexts: ddmiAlarmWarning.setStatus('current')
if mibBuilder.loadTexts: ddmiAlarmWarning.setDescription('The DDMI trap')
xRingProMasterChange = NotificationType((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 99, 3)).setObjects(("ADVANTECH-EKI-PRONEER-MIB", "xRingMasterStatus"), ("ADVANTECH-EKI-PRONEER-MIB", "xRingProRingID"))
if mibBuilder.loadTexts: xRingProMasterChange.setStatus('current')
if mibBuilder.loadTexts: xRingProMasterChange.setDescription('This trap is sent if XRing Pro master change')
stpStateChange = NotificationType((1, 3, 6, 1, 4, 1, 10297, 202, 7000, 99, 5)).setObjects(("ADVANTECH-EKI-PRONEER-MIB", "stpPortStatusIndex"), ("ADVANTECH-EKI-PRONEER-MIB", "stpPortStatus"))
if mibBuilder.loadTexts: stpStateChange.setStatus('current')
if mibBuilder.loadTexts: stpStateChange.setDescription('This trap is sent if spanning tree port state change to blocking or forwarding')
mibBuilder.exportSymbols("ADVANTECH-EKI-PRONEER-MIB", xRingProPairAdd=xRingProPairAdd, httpsSetting=httpsSetting, vlanInterfaceEntry=vlanInterfaceEntry, lldpremoteDeviceIndex=lldpremoteDeviceIndex, stpPortRootPathCost=stpPortRootPathCost, lacpInfoMux=lacpInfoMux, lldpPortStatErrorRxFrame=lldpPortStatErrorRxFrame, xRingProCoupleSetting=xRingProCoupleSetting, dhcpServerClientMacEntry=dhcpServerClientMacEntry, dhcpServerOpt82DNS=dhcpServerOpt82DNS, cosQueue=cosQueue, protectedPortTable=protectedPortTable, gmrpMulticastGroupEntry=gmrpMulticastGroupEntry, qosPortSettingTable=qosPortSettingTable, sfpDMITxBasisLowWarnValue=sfpDMITxBasisLowWarnValue, interfaceVlanId=interfaceVlanId, lacpInfoPrdtx=lacpInfoPrdtx, ddmiAlarmWarning=ddmiAlarmWarning, telephonyOUIState=telephonyOUIState, xRingProInfoPort2=xRingProInfoPort2, macAclPortList=macAclPortList, egressqueueBandwidthQueueIndex=egressqueueBandwidthQueueIndex, rmonHistoryBucketsRequest=rmonHistoryBucketsRequest, sfpDMITxBasisHighWarnValue=sfpDMITxBasisHighWarnValue, nonRecFromYear=nonRecFromYear, lacpInfoPortIndex=lacpInfoPortIndex, ledAlarmStatus=ledAlarmStatus, sourceMacMask=sourceMacMask, garpLeaveAllTime=garpLeaveAllTime, ipPrecedencetoQueueMapEntry=ipPrecedencetoQueueMapEntry, lldpremoteDeviceAuto_negosupported=lldpremoteDeviceAuto_negosupported, ledEventIndex=ledEventIndex, lldpremoteDeviceTable=lldpremoteDeviceTable, stromControlPreamble_IFG=stromControlPreamble_IFG, loopbackPortEntry=loopbackPortEntry, ifInBroadcastPkts=ifInBroadcastPkts, lacpSystemPriority=lacpSystemPriority, systemTime=systemTime, sfpDMIPortIndex=sfpDMIPortIndex, currentTimeZone=currentTimeZone, ieee8021xPortIndex=ieee8021xPortIndex, dhcpServerVlanStatus=dhcpServerVlanStatus, portToVlanEntry=portToVlanEntry, sshService=sshService, rmonStatisticsEntry=rmonStatisticsEntry, dhcpServerClientMacEntryDNS=dhcpServerClientMacEntryDNS, lldpReinitializationDelay=lldpReinitializationDelay, queryMaxResponseInterval=queryMaxResponseInterval, tcpBlat=tcpBlat, lldpPortStatisticsEntry=lldpPortStatisticsEntry, vlanTable=vlanTable, systemTimeInfo=systemTimeInfo, ipAclRowStatus=ipAclRowStatus, currentDateTime=currentDateTime, ipv6InUseSubnetMask=ipv6InUseSubnetMask, vlanIndex=vlanIndex, lagPortFlowCtrlConfig=lagPortFlowCtrlConfig, ddmDiagnosticAlarm=ddmDiagnosticAlarm, gvrp=gvrp, portVlanOperVlans=portVlanOperVlans, staticMacSettingVlan=staticMacSettingVlan, dhcpServerVlanEntry=dhcpServerVlanEntry, createdTime=createdTime, ieee8021xServerIP=ieee8021xServerIP, channelB=channelB, xRingProInfoPort2FwdState=xRingProInfoPort2FwdState, dhcpServerOpt82RemoteIDFormat=dhcpServerOpt82RemoteIDFormat, gmrpMulticastGroupVlanId=gmrpMulticastGroupVlanId, lldpEnabled=lldpEnabled, dhcpServerLeaseType=dhcpServerLeaseType, cableLengthC=cableLengthC, poeSystemSetting=poeSystemSetting, dhcpServerPortLowIP=dhcpServerPortLowIP, cableLengthRx=cableLengthRx, ipSecurityService=ipSecurityService, rmonAlarmRisingEventIndex=rmonAlarmRisingEventIndex, staticMacSettingMacAddress=staticMacSettingMacAddress, snmpCommunityString=snmpCommunityString, dhcpServerPortGW=dhcpServerPortGW, lldpLocalDeviceCapabilitiesEnabled=lldpLocalDeviceCapabilitiesEnabled, unknownMulticastAction=unknownMulticastAction, copperTestAction=copperTestAction, qinqPortInfoTable=qinqPortInfoTable, eeeState=eeeState, trapObject=trapObject, tcpFragment=tcpFragment, snmpTrapHostCommunityName=snmpTrapHostCommunityName, mldSnoopingTable=mldSnoopingTable, erpsGroupTcPropagation=erpsGroupTcPropagation, ieee8021x=ieee8021x, proneer=proneer, seconds=seconds, systemName=systemName, subnetMask=subnetMask, recurringTo=recurringTo, lldpLocalPortIndex=lldpLocalPortIndex, lldpremoteDeviceIeee8023MaxFrameSize=lldpremoteDeviceIeee8023MaxFrameSize, ipSourceGuardSourceMac=ipSourceGuardSourceMac, sourceIpAddress=sourceIpAddress, xRingElitePort2Status=xRingElitePort2Status, lldpremoteDeviceSystemName=lldpremoteDeviceSystemName, igmpStaticGroupTable=igmpStaticGroupTable, dhcpClientOpt82CircuitIDUserDefine=dhcpClientOpt82CircuitIDUserDefine, nullScanAttack=nullScanAttack, ipSourceGuardPort=ipSourceGuardPort, macAddressInfoEntry=macAddressInfoEntry, portToVlanInterfaceVlanMode=portToVlanInterfaceVlanMode, sfpDMITxPowerLowWarnState=sfpDMITxPowerLowWarnState, description=description, eee=eee, upgradeMethod=upgradeMethod, mldSnooping=mldSnooping, telephonyOUIPortEntry=telephonyOUIPortEntry, telephonyOUICosMode=telephonyOUICosMode, operMldSnoopQueryRobustness=operMldSnoopQueryRobustness, imageName=imageName, dot3StatsFrameTooLongs=dot3StatsFrameTooLongs, ipSourceGuardIndex=ipSourceGuardIndex, portStatisticIndex=portStatisticIndex, igmpGroupEntry=igmpGroupEntry, sfpDMITxBasisHighAlarmValue=sfpDMITxBasisHighAlarmValue, igmpStaticGroupIndex=igmpStaticGroupIndex, xRingProRPairAdd=xRingProRPairAdd, interfaceIpv4Gateway=interfaceIpv4Gateway, queryInterval=queryInterval, xRingProChainRole=xRingProChainRole, mldinvalidRx=mldinvalidRx, poePortCurrent=poePortCurrent, lldpremoteDevicePsepowerclass=lldpremoteDevicePsepowerclass, lldpOverloadingOptionalTLVs=lldpOverloadingOptionalTLVs, saveConfiguration=saveConfiguration, configurationBPDUsReceived=configurationBPDUsReceived, snmp=snmp, pingInterval=pingInterval, upgradeStatus=upgradeStatus, rmonStatisticsMulticast=rmonStatisticsMulticast, lldpPortOptionalTLVs=lldpPortOptionalTLVs, upgradeManager=upgradeManager, xRingProRPairID=xRingProRPairID, telnetNetworkPort=telnetNetworkPort, bufferedtarget=bufferedtarget, lldpPortState=lldpPortState, rmonEventRowStatus=rmonEventRowStatus, localUserRowStatus=localUserRowStatus, lldpPortStatDiscardRxTlv=lldpPortStatDiscardRxTlv, nonRecFromMonth=nonRecFromMonth, sfpDMITxPower=sfpDMITxPower, tcpModbusTimeout=tcpModbusTimeout, ipPrecedence=ipPrecedence, flowControlStatus=flowControlStatus, queueIndex=queueIndex, igmpStaticGroupIPaddress=igmpStaticGroupIPaddress, securityLoginSSHState=securityLoginSSHState, rmonStatisticsPort=rmonStatisticsPort, dhcpServerClientMacEntryRowStatus=dhcpServerClientMacEntryRowStatus, forceVersion=forceVersion, stpBridgeForwardDelay=stpBridgeForwardDelay, operQueryRobustness=operQueryRobustness, mldStaticGroupIndex=mldStaticGroupIndex, dhcpServerLeaseIp=dhcpServerLeaseIp, mldStaticGroupRowStatus=mldStaticGroupRowStatus, dhcpServerOpt82Table=dhcpServerOpt82Table, nonRecFromHours=nonRecFromHours, dot3StatsSingleCollisionFrames=dot3StatsSingleCollisionFrames, lacpInfoAtstat=lacpInfoAtstat, erpsGroupEastLinkRPL=erpsGroupEastLinkRPL, gmrpMulticastGroupMemberPorts=gmrpMulticastGroupMemberPorts, poePortSettingTable=poePortSettingTable, vlanType=vlanType, ipSourceGuardRowStatus=ipSourceGuardRowStatus, ingressBandwidthTable=ingressBandwidthTable, snmpTrapHostIpaddress=snmpTrapHostIpaddress, mldSnoopQueryMaxResponseInterval=mldSnoopQueryMaxResponseInterval, sfpDMITxPowerLowAlarmValue=sfpDMITxPowerLowAlarmValue, dhcpServerOpt82CircuitIDFormat=dhcpServerOpt82CircuitIDFormat, stpPortIndex=stpPortIndex, queuetoCosMapEntry=queuetoCosMapEntry, lldpremoteDeviceVlanName=lldpremoteDeviceVlanName, portSettingEntry=portSettingEntry, igmpGroupMemberPorts=igmpGroupMemberPorts, month=month, igmpQuerierStatus=igmpQuerierStatus, macAclAction=macAclAction, nonRecToMinutes=nonRecToMinutes, lldpPortStatTotalRxAgeouts=lldpPortStatTotalRxAgeouts, sfpDMITempLowAlarmState=sfpDMITempLowAlarmState, sourceRxPort=sourceRxPort, lldpLocalPortStatusTable=lldpLocalPortStatusTable, ledPowerFailureEvent=ledPowerFailureEvent, queueWeight=queueWeight, tacacsServerSecurityKey=tacacsServerSecurityKey, lldpLocalDeviceChassisID=lldpLocalDeviceChassisID, deletions=deletions, portSecurityFDBLimit=portSecurityFDBLimit, lldpremoteDeviceMdipowersupportportclass=lldpremoteDeviceMdipowersupportportclass, rmonAlarmRisingThreshold=rmonAlarmRisingThreshold, xRingProPairID=xRingProPairID, lldpOverloadingStatus=lldpOverloadingStatus, deviceInfo=deviceInfo, channelD=channelD, sshInfo=sshInfo, lagStatusName=lagStatusName, igmpGroupLife=igmpGroupLife, snmpv3UserPrivPassword=snmpv3UserPrivPassword, rmonHistoryTable=rmonHistoryTable, sfpDMIRxPowerLowWarnState=sfpDMIRxPowerLowWarnState, xRingEliteRingIDEntry=xRingEliteRingIDEntry, mldgeneralQueryTx=mldgeneralQueryTx, dhcpServerVlanHighIP=dhcpServerVlanHighIP, qinqOuterPVID=qinqOuterPVID, xRingProRingAdd=xRingProRingAdd, macAgingTime=macAgingTime, channelC=channelC, xRingEliteRingIDTable=xRingEliteRingIDTable, mldSnoopingIndex=mldSnoopingIndex, destinationFile=destinationFile, mldvalidRx=mldvalidRx, hours=hours, ipv4Gateway=ipv4Gateway, recurringFrom=recurringFrom, invalidRx=invalidRx, dos=dos, ipv6InUseRouter=ipv6InUseRouter, l4DestinationPort=l4DestinationPort, ledFiberLinkdownEvent=ledFiberLinkdownEvent, dot3StatsLateCollisions=dot3StatsLateCollisions, jamboFrame=jamboFrame, systemContact=systemContact, operMldSnoopQueryInterval=operMldSnoopQueryInterval, sfpVendorName=sfpVendorName, gvrpStatus=gvrpStatus, interfaceVlanRowStatus=interfaceVlanRowStatus, firmwareDate=firmwareDate, snmpTrapHostRowStatus=snmpTrapHostRowStatus, vlanNamePrefix=vlanNamePrefix, systemUpTime=systemUpTime, rmonAlarmInterval=rmonAlarmInterval, httpService=httpService, recToWeek=recToWeek, specialGroupQueryRx=specialGroupQueryRx, ledPWR1Status=ledPWR1Status, poeMaxPowerAvailable=poeMaxPowerAvailable, upgradeFileName=upgradeFileName, dosPortEntry=dosPortEntry, mldotherRx=mldotherRx, snmpCommunityIndex=snmpCommunityIndex, upgradeType=upgradeType, queuetoDSCPIndex=queuetoDSCPIndex, mldSnoopLastMemberQueryCounter=mldSnoopLastMemberQueryCounter, localLoggingEntry=localLoggingEntry, ledPortLinkdownEvent=ledPortLinkdownEvent, snmpv3UserIndex=snmpv3UserIndex, smtpServerIp=smtpServerIp, vlanInterfaceTable=vlanInterfaceTable)
mibBuilder.exportSymbols("ADVANTECH-EKI-PRONEER-MIB", costoQueueMapEntry=costoQueueMapEntry, igmpSnoopingEntry=igmpSnoopingEntry, bpduForward=bpduForward, xRingProRingPort1=xRingProRingPort1, stormControl=stormControl, dhcpServerSubmask=dhcpServerSubmask, lastTopologyChange=lastTopologyChange, lldpOverloadingEntry=lldpOverloadingEntry, sfpDMIRxPowerHighAlarmValue=sfpDMIRxPowerHighAlarmValue, lldpremoteDeviceLocalPort=lldpremoteDeviceLocalPort, poePortIndex=poePortIndex, portVlanPortMode=portVlanPortMode, igmpQuerierVersion=igmpQuerierVersion, lldpOverloadingTotal=lldpOverloadingTotal, lldpremoteDeviceChassisIDsubtype=lldpremoteDeviceChassisIDsubtype, mldGroupType=mldGroupType, poePortPower=poePortPower, lagPortEnableState=lagPortEnableState, loopback=loopback, duplex=duplex, qosPortRemarkIPPrecedence=qosPortRemarkIPPrecedence, lagPortIndex=lagPortIndex, unknownMulticastRate=unknownMulticastRate, lldpLocalPortSystemdescription=lldpLocalPortSystemdescription, stpStateChange=stpStateChange, httpSessionTimeout=httpSessionTimeout, rateLimit=rateLimit, egressBandwidthPortIndex=egressBandwidthPortIndex, dhcpSnoopingPort=dhcpSnoopingPort, dhcpServerLeaseEndTime=dhcpServerLeaseEndTime, portVlanTable=portVlanTable, routerPortsAutoLearn=routerPortsAutoLearn, ifInNUcastPkts=ifInNUcastPkts, dhcpServerOpt82LowIP=dhcpServerOpt82LowIP, lldpLocalDeviceSystemDescription=lldpLocalDeviceSystemDescription, dhcpv6Client=dhcpv6Client, sfpDMIInfoEntry=sfpDMIInfoEntry, ledType=ledType, sfpDMIVoltageHighAlarmValue=sfpDMIVoltageHighAlarmValue, lagStatusTable=lagStatusTable, snmpTrapHostIndex=snmpTrapHostIndex, backupType=backupType, mldspecialGroupSourceQueryTx=mldspecialGroupSourceQueryTx, lacpPortTable=lacpPortTable, sfp=sfp, ledPWR2Status=ledPWR2Status, queueToipPrecedenceMapTable=queueToipPrecedenceMapTable, queueSettingTable=queueSettingTable, poeActualPowerConsumption=poeActualPowerConsumption, dhcpServerVlanLowIP=dhcpServerVlanLowIP, lldpLocalPortManagementAddress=lldpLocalPortManagementAddress, egressBandwidthEntry=egressBandwidthEntry, dhcpServerOpt82Entry=dhcpServerOpt82Entry, loggingSetting=loggingSetting, sfpDMIRxPower=sfpDMIRxPower, ipAddress=ipAddress, smurfAttack=smurfAttack, ipv4PingMaxSize=ipv4PingMaxSize, portToVlanPortIndex=portToVlanPortIndex, loggingFileEntry=loggingFileEntry, mstStpPortStatusTable=mstStpPortStatusTable, tcpMinHdrSize=tcpMinHdrSize, sfpDMITemperature=sfpDMITemperature, mstiIDInfoTable=mstiIDInfoTable, rmonHistoryInterval=rmonHistoryInterval, dhcpClientOpt82RemoteIDString=dhcpClientOpt82RemoteIDString, pingResult=pingResult, ntpServerIndex=ntpServerIndex, timeZone=timeZone, ledState=ledState, systemObjectID=systemObjectID, queuetoCosIndex=queuetoCosIndex, localLoggingStatus=localLoggingStatus, loggingFileTimeStamp=loggingFileTimeStamp, dhcpServerClientMacEntryMask=dhcpServerClientMacEntryMask, operQueryMaxResponseInterval=operQueryMaxResponseInterval, loopbackPortLoopStatus=loopbackPortLoopStatus, gmrpMulticastGroupTable=gmrpMulticastGroupTable, dhcpServerStatus=dhcpServerStatus, ntpServerTable=ntpServerTable, egressBandwidthRate=egressBandwidthRate, erpsGroupRole=erpsGroupRole, rmonEventOwner=rmonEventOwner, remoteloggingIndex=remoteloggingIndex, mldStaticGroupIPaddress=mldStaticGroupIPaddress, sfpDMITempHighWarnState=sfpDMITempHighWarnState, qosBasicPortTable=qosBasicPortTable, snmpCommunityAccessRight=snmpCommunityAccessRight, rmon=rmon, smurfAttackValue=smurfAttackValue, stpAdminEnable=stpAdminEnable, qosBasicPortTrust=qosBasicPortTrust, operMldSnoopLastMemberQueryInterval=operMldSnoopLastMemberQueryInterval, lldpLocalPortPvid=lldpLocalPortPvid, rmonStatisticsTable=rmonStatisticsTable, smtpTargetMail3=smtpTargetMail3, dscptoQueueMapTable=dscptoQueueMapTable, rmonHistoryIndex=rmonHistoryIndex, lldpClearStatistics=lldpClearStatistics, xRingEliteState=xRingEliteState, stpStatisticEntry=stpStatisticEntry, interfaceIpv4Mode=interfaceIpv4Mode, smtpTargetMail7=smtpTargetMail7, mldQuerierTable=mldQuerierTable, smtpProfileTable=smtpProfileTable, ipv6Address=ipv6Address, ipSecurity=ipSecurity, leaveRx=leaveRx, channelA=channelA, dhcpServerPortEntry=dhcpServerPortEntry, pingIPv6Address=pingIPv6Address, pingAction=pingAction, igmpRouterExpireTime=igmpRouterExpireTime, lldpLocalDeviceCapabilitiesSupported=lldpLocalDeviceCapabilitiesSupported, xRingProInfoOperState=xRingProInfoOperState, telephonyOUIPortTable=telephonyOUIPortTable, lldpremoteDeviceChassisID=lldpremoteDeviceChassisID, smtpTargetMail8=smtpTargetMail8, daylightSavingOffset=daylightSavingOffset, mldSnoopImmediateLeave=mldSnoopImmediateLeave, xRingProChainMemberPort=xRingProChainMemberPort, mstRootPathCost=mstRootPathCost, lldpLocalPortChassisID=lldpLocalPortChassisID, lacpInfoLagIndex=lacpInfoLagIndex, rmonAlarmVariable=rmonAlarmVariable, sourceIpMask=sourceIpMask, erpsGroupRevertive=erpsGroupRevertive, poePortSettingEntry=poePortSettingEntry, dhcpSnoopingTable=dhcpSnoopingTable, destinationIpAddress=destinationIpAddress, lagStatusIndex=lagStatusIndex, lldpTransmitDelay=lldpTransmitDelay, lldpLocalPortID=lldpLocalPortID, dhcpClientOpt82CircuitIDHex=dhcpClientOpt82CircuitIDHex, lagPortDuplex=lagPortDuplex, serverPort=serverPort, igmpQuerierTable=igmpQuerierTable, acl=acl, xRingEliteRingIDStatus=xRingEliteRingIDStatus, lldpremoteDeviceEntryIndex=lldpremoteDeviceEntryIndex, stp=stp, ipv6Settings=ipv6Settings, channelTx=channelTx, ledSYSStatus=ledSYSStatus, remoteloggingSeverity=remoteloggingSeverity, erpsGroupEastLink=erpsGroupEastLink, lldpremoteDeviceEnablesystemcapabilities=lldpremoteDeviceEnablesystemcapabilities, dhcpClientOpt82CircuitIDFormat=dhcpClientOpt82CircuitIDFormat, sourceMacAddress=sourceMacAddress, stpEdgePort=stpEdgePort, poePortStatusIndex=poePortStatusIndex, sfpDMIVoltageLowAlarmValue=sfpDMIVoltageLowAlarmValue, macAddressInfoVlan=macAddressInfoVlan, recToMinutes=recToMinutes, xRingProPairSetting=xRingProPairSetting, factoryDefault=factoryDefault, igmpQuerierIP=igmpQuerierIP, mstiIDSetting=mstiIDSetting, loggingBufferTable=loggingBufferTable, localUserPasswordType=localUserPasswordType, portSecurityEntry=portSecurityEntry, daylightSaving=daylightSaving, xRingElitePort1Status=xRingElitePort1Status, portCounterClear=portCounterClear, tcp_Syn=tcp_Syn, ifInDiscards=ifInDiscards, currentSNTPServerAddr=currentSNTPServerAddr, macAddressInfoMAC=macAddressInfoMAC, voiceVlanRemarkCos_8021p=voiceVlanRemarkCos_8021p, ipv6PingMaxSize=ipv6PingMaxSize, xRingElitePort2=xRingElitePort2, loggingFileMessage=loggingFileMessage, mldQuerierStatus=mldQuerierStatus, xRingEliteRule=xRingEliteRule, smtpSenderMail=smtpSenderMail, pingIPv6Result=pingIPv6Result, lagStatusLinkState=lagStatusLinkState, nonRecToYear=nonRecToYear, ifOutBroadcastPkts=ifOutBroadcastPkts, mstLastTopologyChange=mstLastTopologyChange, mldtotalRx=mldtotalRx, telephonyOUIEntry=telephonyOUIEntry, stpPortPriority=stpPortPriority, sfpDMIAlarmPortIndex=sfpDMIAlarmPortIndex, sfpDMITxBasisLowAlarmState=sfpDMITxBasisLowAlarmState, dot3StatsSymbolErrors=dot3StatsSymbolErrors, lagStatusEntry=lagStatusEntry, forwardMethod=forwardMethod, mldRouterEntry=mldRouterEntry, nonRecurringTo=nonRecurringTo, clearigmpStatistics=clearigmpStatistics, dhcpServerVlanMask=dhcpServerVlanMask, ieee8021xSecurityKey=ieee8021xSecurityKey, loopbackEnabled=loopbackEnabled, voiceVlan=voiceVlan, lacpPortMode=lacpPortMode, activeImage=activeImage, totalRx=totalRx, ieee8021xPortTable=ieee8021xPortTable, mstStpPortRootPathCost=mstStpPortRootPathCost, portSettingIndex=portSettingIndex, smtpTargetMail5=smtpTargetMail5, httpsService=httpsService, lldp=lldp, telephonyOUIRowStatus=telephonyOUIRowStatus, rootPort=rootPort, mldRouterPort=mldRouterPort, stpPortEdgrPortConf=stpPortEdgrPortConf, ipv6MinFragmentValue=ipv6MinFragmentValue, qosBasicMode=qosBasicMode, specialGroupSourceQueryTx=specialGroupSourceQueryTx, mldStaticGroupTable=mldStaticGroupTable, sfpSerialInfoTable=sfpSerialInfoTable, erpsGroupRowStatus=erpsGroupRowStatus, arpSpoofingSourceIp=arpSpoofingSourceIp, dhcpServerLowIP=dhcpServerLowIP, macAddress=macAddress, dhcpServerPortStatus=dhcpServerPortStatus, dhcpServerOpt82CircuitID=dhcpServerOpt82CircuitID, trustMode=trustMode, dot3ControlInUnknownOpcodes=dot3ControlInUnknownOpcodes, nKeyAutoMode=nKeyAutoMode, egressqueueBandwidthPortIndex=egressqueueBandwidthPortIndex, egressqueueBandwidthCir=egressqueueBandwidthCir, nonRecToHours=nonRecToHours, networkPort=networkPort, xRingProCoupleAdd=xRingProCoupleAdd, pingIPv6Interval=pingIPv6Interval, voiceVlanRemark1q=voiceVlanRemark1q, sfpDMITxBasisLowAlarmValue=sfpDMITxBasisLowAlarmValue, ipSecurityEntry=ipSecurityEntry, poePortPriority=poePortPriority, managementVlan=managementVlan, mstStpPortEdgrPortConf=mstStpPortEdgrPortConf, xRingProInfoPort1=xRingProInfoPort1, dhcpSnoopingVlanId=dhcpSnoopingVlanId, lldpremoteDeviceAuto_negoAdvertisedCapabilities=lldpremoteDeviceAuto_negoAdvertisedCapabilities, PYSNMP_MODULE_ID=advantech, lldpLocalPortDescription=lldpLocalPortDescription, igmpRouterTable=igmpRouterTable, mstRootPort=mstRootPort, pingIPv6Action=pingIPv6Action, sfpDMITempLowWarnValue=sfpDMITempLowWarnValue, lldpLocalPortIeee8023MaxFrameSize=lldpLocalPortIeee8023MaxFrameSize, mldSnoopingVersion=mldSnoopingVersion, mstStpPortP2PMacConf=mstStpPortP2PMacConf, dhcpServerClientMacTable=dhcpServerClientMacTable, localUserPrivilegeType=localUserPrivilegeType, egressBandwidthControl=egressBandwidthControl, mstiIDIndex=mstiIDIndex, currentSNTPServerPort=currentSNTPServerPort, ledStatus=ledStatus, nonRecFromMinutes=nonRecFromMinutes, xRingProInfoDel=xRingProInfoDel)
mibBuilder.exportSymbols("ADVANTECH-EKI-PRONEER-MIB", ledEvent=ledEvent, cableLengthTx=cableLengthTx, sfpDMITxPowerHighWarnState=sfpDMITxPowerHighWarnState, lastMemberQueryCounter=lastMemberQueryCounter, mstiVLANList=mstiVLANList, ifInOctets=ifInOctets, dhcpServerPortDNS=dhcpServerPortDNS, dhcpClientOpt82=dhcpClientOpt82, mstiIDSettingMove=mstiIDSettingMove, clearBufferedMsg=clearBufferedMsg, igmpGroupTable=igmpGroupTable, imageInfoTable=imageInfoTable, ingressBandwidthState=ingressBandwidthState, dhcpServerClientMacEntryMac=dhcpServerClientMacEntryMac, voiceVlanId=voiceVlanId, mstConfigIdentification=mstConfigIdentification, lldpPortStatisticsTable=lldpPortStatisticsTable, dosPortTable=dosPortTable, qosPortIndex=qosPortIndex, ipAclPortList=ipAclPortList, snmpv3UserAuthPassword=snmpv3UserAuthPassword, xRingProRPairPort=xRingProRPairPort, xRingProRingID=xRingProRingID, xRingEliteRingID=xRingEliteRingID, xRingProPairMasterRingID=xRingProPairMasterRingID, lagPortType=lagPortType, mstStpPortDesignatedRootBridge=mstStpPortDesignatedRootBridge, xRingProCoupleMasterRingID=xRingProCoupleMasterRingID, poePortTemp=poePortTemp, stpPortStatus=stpPortStatus, ipv6InUseIndex=ipv6InUseIndex, mldGroupLife=mldGroupLife, rmonEventType=rmonEventType, dhcpServerLeaseEntry=dhcpServerLeaseEntry, portToVlanMembership=portToVlanMembership, rmonAlarmSampleType=rmonAlarmSampleType, dhcpv6DUID=dhcpv6DUID, recFromDay=recFromDay, dhcpSnoopingPorts=dhcpSnoopingPorts, nonRecurringFrom=nonRecurringFrom, sfpSpeed=sfpSpeed, outerVlanEthtype=outerVlanEthtype, snmpCommunityRowStatus=snmpCommunityRowStatus, ifOutOctets=ifOutOctets, icmpFragment=icmpFragment, portToVlanPvid=portToVlanPvid, smtpProfileEntry=smtpProfileEntry, vlanAcceptedType=vlanAcceptedType, rmonHistoryOwner=rmonHistoryOwner, ledPFAILStatus=ledPFAILStatus, localUserEntry=localUserEntry, qinqOuterMode=qinqOuterMode, tcnBPDUsTransmitted=tcnBPDUsTransmitted, interCurrIpv4DhcpState=interCurrIpv4DhcpState, igmpStaticGroupVlanId=igmpStaticGroupVlanId, protectedPortEntry=protectedPortEntry, lldpLocalDevicePortIDsubtype=lldpLocalDevicePortIDsubtype, stromControlPortAction=stromControlPortAction, ieee8021xState=ieee8021xState, lldpOverloadingIeee8023TLVs=lldpOverloadingIeee8023TLVs, currentDaylightSavingStatus=currentDaylightSavingStatus, ipAclTable=ipAclTable, staticMacSettingPort=staticMacSettingPort, dhcpAutoProvision=dhcpAutoProvision, nonRecToDay=nonRecToDay, lldpremoteDeviceManagementAddress=lldpremoteDeviceManagementAddress, dhcpSnoopingIp=dhcpSnoopingIp, ipSourceGuardSourceIp=ipSourceGuardSourceIp, addtoStaticMacTable=addtoStaticMacTable, mldSnoopQueryInterval=mldSnoopQueryInterval, autoConfiguration=autoConfiguration, sfpDMIRxPowerHighWarnValue=sfpDMIRxPowerHighWarnValue, sfpDMIVoltageHighWarnValue=sfpDMIVoltageHighWarnValue, backupManager=backupManager, access=access, lldpLocalDeviceChassisidsubtype=lldpLocalDeviceChassisidsubtype, mstiVlanListSetting=mstiVlanListSetting, stpPriorityInfoEntry=stpPriorityInfoEntry, security=security, mstDesignatedBridge=mstDesignatedBridge, loopbackInterval=loopbackInterval, lldpOverloadingMandatoryTLVs=lldpOverloadingMandatoryTLVs, mldGroupVlanId=mldGroupVlanId, mldGroupMemberPorts=mldGroupMemberPorts, lldpOverloadingTable=lldpOverloadingTable, poe=poe, pingCount=pingCount, dhcpServerVlanClear=dhcpServerVlanClear, ipv6SubnetMask=ipv6SubnetMask, mstDesignatedRootBridge=mstDesignatedRootBridge, loggingBufferMessage=loggingBufferMessage, stpPortTable=stpPortTable, dhcpServerVlanTable=dhcpServerVlanTable, dhcpClientOpt82RemoteIDHex=dhcpClientOpt82RemoteIDHex, xRingProCouplePort=xRingProCouplePort, rmonEventTable=rmonEventTable, stpEnable=stpEnable, snmpCommunityTable=snmpCommunityTable, ipSecurityStatus=ipSecurityStatus, smtpTargetMail2=smtpTargetMail2, ledEventInfoTable=ledEventInfoTable, dhcpServerLeaseTime=dhcpServerLeaseTime, tacacsServerPort=tacacsServerPort, diagnostics=diagnostics, rmonStatisticsIndex=rmonStatisticsIndex, gmrpStatus=gmrpStatus, ingressState=ingressState, manualTime=manualTime, recFromHours=recFromHours, lldpOverloadingLeftToSend=lldpOverloadingLeftToSend, eeePortIndex=eeePortIndex, ipv6InUseAddress=ipv6InUseAddress, xRingProInfoMode=xRingProInfoMode, poePortPowerLimitClass=poePortPowerLimitClass, stpPortStatusIndex=stpPortStatusIndex, dhcpSnooping=dhcpSnooping, rmonHistoryPort=rmonHistoryPort, ntpServerEntry=ntpServerEntry, pod=pod, ipAclActiveStatus=ipAclActiveStatus, mldStaticGroupEntry=mldStaticGroupEntry, poePortPowerLimit=poePortPowerLimit, lldpOverloadingIeee8021TLVs=lldpOverloadingIeee8021TLVs, lldpTransmissionInterval=lldpTransmissionInterval, staticMacSettingIndex=staticMacSettingIndex, rmonAlarmRowStatus=rmonAlarmRowStatus, dhcpClientOpt82CircuitIDString=dhcpClientOpt82CircuitIDString, mstBridgeIdentifier=mstBridgeIdentifier, interfaceVlanTable=interfaceVlanTable, interCurrIpv4Gateway=interCurrIpv4Gateway, radiusServerSecurityKey=radiusServerSecurityKey, queueToipPrecedenceMapEntry=queueToipPrecedenceMapEntry, erpsGroupTable=erpsGroupTable, lldpPortConfTable=lldpPortConfTable, ledEventInfoEntry=ledEventInfoEntry, ifInUcastPkts=ifInUcastPkts, mstInstanceInfo=mstInstanceInfo, copperTest=copperTest, igmpQuerierEntry=igmpQuerierEntry, telephonyOUIPortIndex=telephonyOUIPortIndex, poePortState=poePortState, mldreportTx=mldreportTx, localDevice=localDevice, localLoggingSeverity=localLoggingSeverity, sfpSerialInfoEntry=sfpSerialInfoEntry, qinqVlan=qinqVlan, ipv6MinFragment=ipv6MinFragment, stpBridgeStatus=stpBridgeStatus, mldSnoopQueryRobustness=mldSnoopQueryRobustness, ipSourceGuardEnablePorts=ipSourceGuardEnablePorts, vlanInterfaceVlanMode=vlanInterfaceVlanMode, tcpModbusState=tcpModbusState, snmpv3UserPrivProtocol=snmpv3UserPrivProtocol, ddmiAlarmDescr=ddmiAlarmDescr, dhcpServerOpt82Clear=dhcpServerOpt82Clear, lldpremoteDeviceAggregationPortID=lldpremoteDeviceAggregationPortID, smtpTargetMail6=smtpTargetMail6, sfpDMIRxPowerLowWarnValue=sfpDMIRxPowerLowWarnValue, currentDaylightSavingFrom=currentDaylightSavingFrom, stpPortDesignatedRootBridge=stpPortDesignatedRootBridge, ipSecurityTable=ipSecurityTable, sfpVendorPn=sfpVendorPn, mldStaticGroupVlanId=mldStaticGroupVlanId, rmonStatisticsOctets=rmonStatisticsOctets, ipv6InUseTable=ipv6InUseTable, telnetInfo=telnetInfo, dhcpSnoopingEntry=dhcpSnoopingEntry, sfpDMIRxPowerHighAlarmState=sfpDMIRxPowerHighAlarmState, udpBlat=udpBlat, dhcpServer=dhcpServer, portSettingTable=portSettingTable, igmpSnoopingVersion=igmpSnoopingVersion, erpsGroupWestLink=erpsGroupWestLink, ipv6Gateway=ipv6Gateway, dhcpServerLeaseStartTime=dhcpServerLeaseStartTime, xRingPro=xRingPro, lldpremoteDeviceOperationMAUtype=lldpremoteDeviceOperationMAUtype, xRingProPairPort=xRingProPairPort, immediateLeave=immediateLeave, sourceTxPort=sourceTxPort, telephonyOUIAddress=telephonyOUIAddress, operQueryInterval=operQueryInterval, land=land, loggingBufferIndex=loggingBufferIndex, ledRMStatus=ledRMStatus, spfVendorRev=spfVendorRev, sfpDMITxPowerLowAlarmState=sfpDMITxPowerLowAlarmState, stpMstiIDIndex=stpMstiIDIndex, voiceVlanState=voiceVlanState, sfpDMITempHighAlarmValue=sfpDMITempHighAlarmValue, dhcpServerClearIpPool=dhcpServerClearIpPool, flashPartition=flashPartition, lagPortFlowCtrlStatus=lagPortFlowCtrlStatus, systemLocation=systemLocation, qos=qos, igmpStaticGroupMemberPorts=igmpStaticGroupMemberPorts, leaveTx=leaveTx, pingIPAddress=pingIPAddress, snmpv3UserName=snmpv3UserName, dhcpServerLeaseTable=dhcpServerLeaseTable, dhcpServerGateway=dhcpServerGateway, remoteloggingPort=remoteloggingPort, mstiIDInfoEntry=mstiIDInfoEntry, ipSourceGuardTable=ipSourceGuardTable, ipv6InUseEntry=ipv6InUseEntry, egressqueueBandwidthState=egressqueueBandwidthState, dhcpServerOpt82Mask=dhcpServerOpt82Mask, ipSourceGuard=ipSourceGuard, voiceVlanAgingTime=voiceVlanAgingTime, sfpDMIVoltage=sfpDMIVoltage, httpsNetworkPort=httpsNetworkPort, lldpPortVlans=lldpPortVlans, lldpLocalPortAuto_negoenabled=lldpLocalPortAuto_negoenabled, portStatisticTable=portStatisticTable, snmpv3UserEntry=snmpv3UserEntry, stromControlUnit=stromControlUnit, year=year, xRingProMasterChange=xRingProMasterChange, lldpPortIndex=lldpPortIndex, reboot=reboot, poePortStatusTable=poePortStatusTable, dosProtection=dosProtection, ipv4DnsServer1=ipv4DnsServer1, lldpremoteDeviceEntry=lldpremoteDeviceEntry, lldpremoteDevicePsemdipowerstatus=lldpremoteDevicePsemdipowerstatus, stromControlPortEntry=stromControlPortEntry, macAddressTable=macAddressTable, pingMaxSizeSetting=pingMaxSizeSetting, lacpPortEntry=lacpPortEntry, interCurrIpv4Address=interCurrIpv4Address, lacpInfoPartnerSysId=lacpInfoPartnerSysId, interfaceIpv4Address=interfaceIpv4Address, igmpSnoopStatus=igmpSnoopStatus, generalQueryTx=generalQueryTx, ipSecurityIndex=ipSecurityIndex, igmpStatistics=igmpStatistics, vlan=vlan, ntpServerIp=ntpServerIp, mldSnoopStatus=mldSnoopStatus, httpsSessionTimeout=httpsSessionTimeout, dscpIndex=dscpIndex, recToMonth=recToMonth, portNumber=portNumber, erpsGroupRingIndex=erpsGroupRingIndex, rebootAction=rebootAction, stromControlPortState=stromControlPortState, resultPort=resultPort, arpSpoofing=arpSpoofing, securityLoginTelnetState=securityLoginTelnetState, ipv4DnsServer2=ipv4DnsServer2, tacacsServerIP=tacacsServerIP, snmpTrapHostVersion=snmpTrapHostVersion, macAclTable=macAclTable, dhcpServerVlanDNS=dhcpServerVlanDNS)
mibBuilder.exportSymbols("ADVANTECH-EKI-PRONEER-MIB", interCurrIpv4SubnetMask=interCurrIpv4SubnetMask, designatedBridge=designatedBridge, lldpLocalDeviceSystemName=lldpLocalDeviceSystemName, lldpremoteDevicePsepowerpaircontrolability=lldpremoteDevicePsepowerpaircontrolability, mldQuerierVlanId=mldQuerierVlanId, qinqPortInfoEntry=qinqPortInfoEntry, ingressBandwidthControl=ingressBandwidthControl, interfaceIpv4SubnetMask=interfaceIpv4SubnetMask, stpMigrate=stpMigrate, sfpDMITempLowWarnState=sfpDMITempLowWarnState, currentDaylightSavingTo=currentDaylightSavingTo, monitorSessionState=monitorSessionState, stromControlPortTable=stromControlPortTable, sfpDMITxPowerLowWarnValue=sfpDMITxPowerLowWarnValue, queuDscp=queuDscp, unknownUnicastRate=unknownUnicastRate, erpsHoldOffTimer=erpsHoldOffTimer, snmpv3EngineID=snmpv3EngineID, destinationMacMask=destinationMacMask, lldpOverloadingPortIndex=lldpOverloadingPortIndex, sfpDMITempLowAlarmValue=sfpDMITempLowAlarmValue, stpBridgeHelloTime=stpBridgeHelloTime, lldpLocalPortAuto_negoAdvertisedCapabilities=lldpLocalPortAuto_negoAdvertisedCapabilities, gmrpMulticastGroupMacAddress=gmrpMulticastGroupMacAddress, mldleaveTx=mldleaveTx, ingressBandwidthPortIndex=ingressBandwidthPortIndex, queuetoDSCPMapTable=queuetoDSCPMapTable, lldpremoteDevicePortID=lldpremoteDevicePortID, dhcpServerClientMacEntryGW=dhcpServerClientMacEntryGW, ifOutUcastPkts=ifOutUcastPkts, lldpremoteDeviceAggregationStatus=lldpremoteDeviceAggregationStatus, igmpRouterPort=igmpRouterPort, destinationMacAddress=destinationMacAddress, erpsGroupType=erpsGroupType, staticMacSettingTable=staticMacSettingTable, macAclActiveStatus=macAclActiveStatus, flowControlConfig=flowControlConfig, localUserIndex=localUserIndex, enablebroadcast=enablebroadcast, xRingProRingPort2=xRingProRingPort2, portToVlanTable=portToVlanTable, stpPortPathCost=stpPortPathCost, ledIndication=ledIndication, portToVlanVlanIndex=portToVlanVlanIndex, securityLoginHttpState=securityLoginHttpState, xRingProCoupleID=xRingProCoupleID, mldGroupIPaddress=mldGroupIPaddress, rmonStatisticsOwner=rmonStatisticsOwner, mldQuerierState=mldQuerierState, egressBandwidthTable=egressBandwidthTable, portStatisticEntry=portStatisticEntry, mldspecialGroupQueryRx=mldspecialGroupQueryRx, smtpActiveProfile=smtpActiveProfile, systemTimeStatus=systemTimeStatus, dhcpServerOpt82Status=dhcpServerOpt82Status, lagPorts=lagPorts, loggingService=loggingService, lldpremoteDeviceSupportedsystemcapabilities=lldpremoteDeviceSupportedsystemcapabilities, macAclIndex=macAclIndex, smtpProfileIndex=smtpProfileIndex, localUserName=localUserName, lldpPortStatTotalTxFrame=lldpPortStatTotalTxFrame, tcnBPDUsReceived=tcnBPDUsReceived, telephonyOUIIndex=telephonyOUIIndex, linkAggregation=linkAggregation, lagStatusType=lagStatusType, interfaceIpv4Index=interfaceIpv4Index, egressQueueBandwidthControl=egressQueueBandwidthControl, interfaceIpv4Table=interfaceIpv4Table, lldpremoteDeviceAggregationCapability=lldpremoteDeviceAggregationCapability, ipAclEntry=ipAclEntry, recToHours=recToHours, loaderVersion=loaderVersion, traps=traps, recFromMonth=recFromMonth, xRingProRingSetting=xRingProRingSetting, snmpv3UserAccessRight=snmpv3UserAccessRight, mldspecialGroupSourceQueryRx=mldspecialGroupSourceQueryRx, portSetting=portSetting, lacpInfoSel=lacpInfoSel, tcpMinHdrSizeValue=tcpMinHdrSizeValue, lacpInfoEntry=lacpInfoEntry, ifInMulticastPkts=ifInMulticastPkts, lldpLocalPortIDsubtype=lldpLocalPortIDsubtype, sfpVendorSn=sfpVendorSn, igmpRouterEntry=igmpRouterEntry, queuePercentOfWRRBandwidth=queuePercentOfWRRBandwidth, lldpremoteDevicePvid=lldpremoteDevicePvid, configurationBPDUsTransmitted=configurationBPDUsTransmitted, dhcpServerClientMacEntryIP=dhcpServerClientMacEntryIP, linkStatus=linkStatus, dhcpServerVlanIndex=dhcpServerVlanIndex, dhcpClientOpt82RemoteIDFormat=dhcpClientOpt82RemoteIDFormat, ifOutMulticastPkts=ifOutMulticastPkts, definatedRootBridge=definatedRootBridge, sessionId=sessionId, xRingProInfoPort1FwdState=xRingProInfoPort1FwdState, ipProtocol=ipProtocol, dhcpSnoopingMac=dhcpSnoopingMac, loggingBufferSeverity=loggingBufferSeverity, sfpDMIVoltageLowWarnState=sfpDMIVoltageLowWarnState, staticMacSettingRowStatus=staticMacSettingRowStatus, snmpv3UserAuthProtocol=snmpv3UserAuthProtocol, inertions=inertions, operMldSnoopLastMemberQueryCounter=operMldSnoopLastMemberQueryCounter, generalQueryRx=generalQueryRx, localLoggingIndex=localLoggingIndex, nonRecFromDay=nonRecFromDay, mirror=mirror, igmpGroupType=igmpGroupType, lldpLocalPortEnablesystemcapabilities=lldpLocalPortEnablesystemcapabilities, stpStatisticPortIndex=stpStatisticPortIndex, rmonStatisticsDropEvents=rmonStatisticsDropEvents, pathCostMethod=pathCostMethod, ledAlarmState=ledAlarmState, qosPortRemarkDSCP=qosPortRemarkDSCP, operLastMemberQueryInterval=operLastMemberQueryInterval, lagStatusStandbyMember=lagStatusStandbyMember, snmpState=snmpState, erpsGroupRingId=erpsGroupRingId, advantech=advantech, specialGroupSourceQueryRx=specialGroupSourceQueryRx, dot3StatsExcessiveCollisions=dot3StatsExcessiveCollisions, dhcpServerClientMacEntryID=dhcpServerClientMacEntryID, mldSnoopLastMemberQueryInterval=mldSnoopLastMemberQueryInterval, poePortStatusEntry=poePortStatusEntry, mldgeneralQueryRx=mldgeneralQueryRx, protectedPort=protectedPort, sfpDMITxPowerHighAlarmValue=sfpDMITxPowerHighAlarmValue, nonRecToMonth=nonRecToMonth, egressqueueBandwidthTable=egressqueueBandwidthTable, sfpDMIAlarmInfoTable=sfpDMIAlarmInfoTable, sfpDMIAlarmInfoEntry=sfpDMIAlarmInfoEntry, ipSecurityIPMask=ipSecurityIPMask, factoryDefaultKeepFlag=factoryDefaultKeepFlag, queryRobustness=queryRobustness, xRingProStatus=xRingProStatus, ntp=ntp, queuetoCosMapTable=queuetoCosMapTable, arpSpoofingSourceMac=arpSpoofingSourceMac, enableunknownUnicast=enableunknownUnicast, macAddressInfoTable=macAddressInfoTable, egressqueueBandwidthEntry=egressqueueBandwidthEntry, sfpDMIVoltageHighAlarmState=sfpDMIVoltageHighAlarmState, jamboFramePktSize=jamboFramePktSize, ipv6pingTest=ipv6pingTest, enableSNTP=enableSNTP, igmpGroupVlanId=igmpGroupVlanId, ipSecurityIPAddr=ipSecurityIPAddr, queueCos=queueCos, lldpPduDisableAction=lldpPduDisableAction, firmwareVersion=firmwareVersion, lastMemberQueryInterval=lastMemberQueryInterval, tcpModbus=tcpModbus, pingIPv6Size=pingIPv6Size, ifOutDiscards=ifOutDiscards, ifOutNUcastPkts=ifOutNUcastPkts, ledRFAILStatus=ledRFAILStatus, speed=speed, macAddressInfoIndex=macAddressInfoIndex, xRingProChainSetting=xRingProChainSetting, dhcpServerVlanGW=dhcpServerVlanGW, mirrorTable=mirrorTable, mstStpPortStatusEntry=mstStpPortStatusEntry, vlanIngressFiltering=vlanIngressFiltering, ntpServer=ntpServer, rmonHistoryRowStatus=rmonHistoryRowStatus, management=management, staticMacSettingEntry=staticMacSettingEntry, stpPortStatusTable=stpPortStatusTable, rmonEventEntry=rmonEventEntry, ieee8021xPortEntry=ieee8021xPortEntry, lldpLocalPortStatus=lldpLocalPortStatus, otherRx=otherRx, mldStatistics=mldStatistics, erpsGroupInterconnected=erpsGroupInterconnected, qosBasicPortEntry=qosBasicPortEntry, ipPrecedenceIndex=ipPrecedenceIndex, system=system, buildVersion=buildVersion, ipAclAction=ipAclAction, erpsGroupChannel=erpsGroupChannel, stpBridgeMaxAge=stpBridgeMaxAge, xRingElitePort1=xRingElitePort1, ipPrecedenceQueue=ipPrecedenceQueue, xRingProInfoEntry=xRingProInfoEntry, stpStatisticTable=stpStatisticTable, tcpSYN_RSTAttack=tcpSYN_RSTAttack, interfaceVlanIndex=interfaceVlanIndex, bridgeIdentifier=bridgeIdentifier, dhcpServerState=dhcpServerState, sfpPortIndex=sfpPortIndex, mldSnoopingVlanId=mldSnoopingVlanId, ieee8021xAuthBased=ieee8021xAuthBased, dhcpServerOpt82Index=dhcpServerOpt82Index, queuetoDSCPMapEntry=queuetoDSCPMapEntry, lldpremoteDeviceSystemdescription=lldpremoteDeviceSystemdescription, snmpv3UserRowStatus=snmpv3UserRowStatus, loggingBufferTimeStamp=loggingBufferTimeStamp, stpPortDesignatedBridge=stpPortDesignatedBridge, loopbackPortTable=loopbackPortTable, xRingProInfoRingID=xRingProInfoRingID, dhcpSnoopingState=dhcpSnoopingState, httpSetting=httpSetting, clearMacAddressTable=clearMacAddressTable, stpBridgePriority=stpBridgePriority, multicast=multicast, igmpQuerierVlanId=igmpQuerierVlanId, telephonyOUIDescription=telephonyOUIDescription, sfpDMIVoltageLowAlarmState=sfpDMIVoltageLowAlarmState, lldpStatistics=lldpStatistics, mldspecialGroupQueryTx=mldspecialGroupQueryTx, arpSpoofingEntry=arpSpoofingEntry, lagLinkState=lagLinkState, l4SourcePort=l4SourcePort, poeOverLoadDisconnect=poeOverLoadDisconnect, currentTelnetSessionCount=currentTelnetSessionCount, arpSpoofingRowStatus=arpSpoofingRowStatus, rmonHistoryEntry=rmonHistoryEntry, mldSnoopingState=mldSnoopingState, interfaceVlanEntry=interfaceVlanEntry, copperTestResult=copperTestResult, rmonAlarmEntry=rmonAlarmEntry, dhcpSnoopingIndex=dhcpSnoopingIndex, ntpManualTime=ntpManualTime, radiusServer=radiusServer, currentSNTP=currentSNTP, smtpTargetMail1=smtpTargetMail1, lldpremoteDeviceAuto_negoenabled=lldpremoteDeviceAuto_negoenabled, tacacsServer=tacacsServer, upgradeServerIP=upgradeServerIP, telephonyOUITable=telephonyOUITable, qosPortRemarkCoS=qosPortRemarkCoS, dhcpServerPortHighIP=dhcpServerPortHighIP, xRingElite=xRingElite, rmonAlarmOwner=rmonAlarmOwner, dot3StatsMultipleCollisionFrames=dot3StatsMultipleCollisionFrames, mstInstanceID=mstInstanceID, lldpremoteDeviceRowStatus=lldpremoteDeviceRowStatus, lldpPortStatUnrecognizedRxTlv=lldpPortStatUnrecognizedRxTlv, factoryDefaultAction=factoryDefaultAction, rmonStatisticsBroadcast=rmonStatisticsBroadcast, arpSpoofingIndex=arpSpoofingIndex, lacpPortIndex=lacpPortIndex, stpPortRoles=stpPortRoles, mstStpPortDesignatedBridge=mstStpPortDesignatedBridge, lldpPortStatIndex=lldpPortStatIndex, radiusServerPort=radiusServerPort, lldpLocalPortOperationMAUtype=lldpLocalPortOperationMAUtype, gmrp=gmrp, telnetService=telnetService, rmonStatisticsPackets=rmonStatisticsPackets, sfpDMIVoltageLowWarnValue=sfpDMIVoltageLowWarnValue, imageInfoEntry=imageInfoEntry)
mibBuilder.exportSymbols("ADVANTECH-EKI-PRONEER-MIB", erps=erps, lagPortEntry=lagPortEntry, stpPriorityValue=stpPriorityValue, remoteloggingFacility=remoteloggingFacility, sfpDMIRxPowerLowAlarmValue=sfpDMIRxPowerLowAlarmValue, backupServerIP=backupServerIP, queueSettingEntry=queueSettingEntry, cosIndex=cosIndex, sfpDMIVoltageHighWarnState=sfpDMIVoltageHighWarnState, dhcpServerRestart=dhcpServerRestart, loggingFileCategory=loggingFileCategory, reportRx=reportRx, vlanPvid=vlanPvid, igmpSnoopingIndex=igmpSnoopingIndex, loggingFileIndex=loggingFileIndex, mldQuerierVersion=mldQuerierVersion, currentDaylightSavingOffset=currentDaylightSavingOffset, lagManagementTable=lagManagementTable, recFromMinutes=recFromMinutes, loggingBufferEntry=loggingBufferEntry, sfpConnector=sfpConnector, systemTimeSetting=systemTimeSetting, dscptoQueueMapEntry=dscptoQueueMapEntry, monitoring=monitoring, garpJoinTime=garpJoinTime, localUserTable=localUserTable, poePortVoltage=poePortVoltage, dhcpServerOpt82HighIP=dhcpServerOpt82HighIP, erpsGroupWestLinkRPL=erpsGroupWestLinkRPL, macAclEntry=macAclEntry, cableLengthD=cableLengthD, lagIndex=lagIndex, rmonEventCommunity=rmonEventCommunity, general=general, xRingMasterStatus=xRingMasterStatus, stpPriorityInfoTable=stpPriorityInfoTable, remoteDevice=remoteDevice, erpsGroupState=erpsGroupState, arpSpoofingTable=arpSpoofingTable, l2switching=l2switching, ingressBandwidthEntry=ingressBandwidthEntry, dhcpServerLeaseClientMac=dhcpServerLeaseClientMac, stpPriorityDefault=stpPriorityDefault, destinationPort=destinationPort, recToDay=recToDay, ipSecurityVlanId=ipSecurityVlanId, dhcpServerOpt82GW=dhcpServerOpt82GW, portVlanEntry=portVlanEntry, snmpTrapHostTable=snmpTrapHostTable, rmonStatisticsRowStatus=rmonStatisticsRowStatus, lacpInfoPnstat=lacpInfoPnstat, xRingProChainHeadPort=xRingProChainHeadPort, lagStandbyMember=lagStandbyMember, vlanId=vlanId, ipv4SubnetMask=ipv4SubnetMask, dot3StatsAlignmentErrors=dot3StatsAlignmentErrors, sfpDMITxPowerHighWarnValue=sfpDMITxPowerHighWarnValue, dot3StatsFCSErrors=dot3StatsFCSErrors, lag=lag, xRingProInfoTable=xRingProInfoTable, igmpSnoopingReportSuppression=igmpSnoopingReportSuppression, mstStpPortRoles=mstStpPortRoles, mldQuerierEntry=mldQuerierEntry, radiusServerIP=radiusServerIP, localLoggingTable=localLoggingTable, loadBalanceAlgorithm=loadBalanceAlgorithm, rmonAlarmTable=rmonAlarmTable, upgradeAction=upgradeAction, clearFileMsg=clearFileMsg, garp=garp, portToVlanVlanId=portToVlanVlanId, portSecurityViolationMACNotify=portSecurityViolationMACNotify, igmpRouterVlanId=igmpRouterVlanId, erpsWTRTimer=erpsWTRTimer, mldGroupTable=mldGroupTable, dhcpServerHighIP=dhcpServerHighIP, portVlanAdminVlans=portVlanAdminVlans, lldpLocalPortSupportedsystemcapabilities=lldpLocalPortSupportedsystemcapabilities, garpLeaveTime=garpLeaveTime, ipAclIndex=ipAclIndex, dot3InPauseFrames=dot3InPauseFrames, sfpDMIRxPowerHighWarnState=sfpDMIRxPowerHighWarnState, dot3OutPauseFrames=dot3OutPauseFrames, sfpDMITempHighAlarmState=sfpDMITempHighAlarmState, xRingProChainAdd=xRingProChainAdd, mldleaveRx=mldleaveRx, xRingProRPairSetting=xRingProRPairSetting, rmonAlarmIndex=rmonAlarmIndex, dhcpClientOpt82Status=dhcpClientOpt82Status, lagPortTable=lagPortTable, macAclVlanID=macAclVlanID, remoteloggingRowStatus=remoteloggingRowStatus, lldpLocalPortSystemname=lldpLocalPortSystemname, localUserPassword=localUserPassword, cableLengthA=cableLengthA, mstConfigName=mstConfigName, xRingEliteRowStatus=xRingEliteRowStatus, igmpSnoopingVlanId=igmpSnoopingVlanId, protectedPortType=protectedPortType, lacpInfoReceiv=lacpInfoReceiv, portSecurityPortIndex=portSecurityPortIndex, rmonAlarmFallingThreshold=rmonAlarmFallingThreshold, lldpLocalPortVlanName=lldpLocalPortVlanName, macAclRowStatus=macAclRowStatus, mirrorEntry=mirrorEntry, qosMode=qosMode, imageSize=imageSize, pingSize=pingSize, day=day, drops=drops, sourceFile=sourceFile, ieee8021xReauthPeriod=ieee8021xReauthPeriod, poePortLegacy=poePortLegacy, erpsGroupEastLinkState=erpsGroupEastLinkState, igmpGroupIPaddress=igmpGroupIPaddress, sfpDMIInfoTable=sfpDMIInfoTable, lldpLocalPortAggregationCapability=lldpLocalPortAggregationCapability, igmpSnoopingTable=igmpSnoopingTable, loopbackPortIndex=loopbackPortIndex, portSecurityEnabled=portSecurityEnabled, lldpremoteDevicePortDescription=lldpremoteDevicePortDescription, rmonEventDescription=rmonEventDescription, ieee8021xAccountingPort=ieee8021xAccountingPort, costoQueueMapTable=costoQueueMapTable, vlanEntry=vlanEntry, stromControlPortIndex=stromControlPortIndex, reportTx=reportTx, snmpv3UserTable=snmpv3UserTable, loggingFileSeverity=loggingFileSeverity, upgradeImage=upgradeImage, mldRouterTable=mldRouterTable, sfpDMITxBias=sfpDMITxBias, dhcpServerPortMask=dhcpServerPortMask, mstp=mstp, sfpDateCode=sfpDateCode, accountManager=accountManager, stpPortStatusEntry=stpPortStatusEntry, smtpServerPort=smtpServerPort, tcpSYN_FINAttack=tcpSYN_FINAttack, interfaceIpv4Vlan=interfaceIpv4Vlan, smtpClient=smtpClient, httpNetworkPort=httpNetworkPort, mldSnoopRouterPortsAutoLearn=mldSnoopRouterPortsAutoLearn, specialGroupQueryTx=specialGroupQueryTx, dhcpServerPortTable=dhcpServerPortTable, gmrpMulticastGroupIndex=gmrpMulticastGroupIndex, lagActiveMember=lagActiveMember, enableunknownMulticast=enableunknownMulticast, clearmldStatistics=clearmldStatistics, securityLoginState=securityLoginState, destinationIpMask=destinationIpMask, lacpInfoTable=lacpInfoTable, lacpPriority=lacpPriority, gateway=gateway, remoteloggingTable=remoteloggingTable, loopbackRecoverTime=loopbackRecoverTime, minutes=minutes, dhcpServerDNS=dhcpServerDNS, igmpSnooping=igmpSnooping, stpBridgeInfo=stpBridgeInfo, ipPrecedencetoQueueMapTable=ipPrecedencetoQueueMapTable, mstStpPortStatus=mstStpPortStatus, stpBridgeTxHoldCount=stpBridgeTxHoldCount, erpsGroupEntry=erpsGroupEntry, erpsGuardTimer=erpsGuardTimer, macAddressInfoPort=macAddressInfoPort, sfpDMITxBasisLowWarnState=sfpDMITxBasisLowWarnState, lldpPortConfEntry=lldpPortConfEntry, remoteloggingAddress=remoteloggingAddress, pingIPv6Count=pingIPv6Count, stpPortEntry=stpPortEntry, mldGroupEntry=mldGroupEntry, lagPortLinkStatus=lagPortLinkStatus, ieee8021xPortState=ieee8021xPortState, erpsGroupRAPSChannelVlan=erpsGroupRAPSChannelVlan, igmpSnoopingState=igmpSnoopingState, lldpremoteDevicePsemdipowersupport=lldpremoteDevicePsemdipowersupport, ageouts=ageouts, mldSnoopingEntry=mldSnoopingEntry, dosportIndex=dosportIndex, rmonAlarmFallingEventIndex=rmonAlarmFallingEventIndex, smtpTargetMail4=smtpTargetMail4, sfpDMITxBasisHighAlarmState=sfpDMITxBasisHighAlarmState, lldpPortStatDiscardRxFrame=lldpPortStatDiscardRxFrame, ipSettings=ipSettings, stpPathCost=stpPathCost, backupImage=backupImage, lagManagementEntry=lagManagementEntry, lacpInfoAtkey=lacpInfoAtkey, snmpCommunityEntry=snmpCommunityEntry, pingTest=pingTest, loaderDate=loaderDate, sfpDMITxPowerHighAlarmState=sfpDMITxPowerHighAlarmState, lagPortSpeed=lagPortSpeed, eeePortTable=eeePortTable, ieee8021xServerPort=ieee8021xServerPort, qosPortCos=qosPortCos, mldSnoopingReportSuppression=mldSnoopingReportSuppression, ingressBandwidthRate=ingressBandwidthRate, configurationManager=configurationManager, lldpLocalPortAggregationPortID=lldpLocalPortAggregationPortID, dscpQueue=dscpQueue, mldRouterVlanId=mldRouterVlanId, mstInstanceInfoID=mstInstanceInfoID, ledErrorTimes=ledErrorTimes, stpP2pMac=stpP2pMac, macAddressInfoType=macAddressInfoType, operLastMemberQueryCounter=operLastMemberQueryCounter, lagPortDescription=lagPortDescription, mldRouterExpireTime=mldRouterExpireTime, qosBasicPortIndex=qosBasicPortIndex, gmrpMulticastGroupType=gmrpMulticastGroupType, vlanRowStatus=vlanRowStatus, portMonitoring=portMonitoring, igmpQuerierState=igmpQuerierState, lagStatusActiveMember=lagStatusActiveMember, lldpremoteDeviceTimetolive=lldpremoteDeviceTimetolive, dhcpServerPortIndex=dhcpServerPortIndex, broadcastRate=broadcastRate, dynamicMacSetting=dynamicMacSetting, mldreportRx=mldreportRx, recFromWeek=recFromWeek, egressBandwidthState=egressBandwidthState, erpsGroupTrafficChannel=erpsGroupTrafficChannel, remoteloggingEntry=remoteloggingEntry, lldpremoteDevicePortIDsubtype=lldpremoteDevicePortIDsubtype, dhcpAutoProvisionEnable=dhcpAutoProvisionEnable, portSecurityTable=portSecurityTable, dhcpSnoopingLeaseTime=dhcpSnoopingLeaseTime, mstStpPortPriority=mstStpPortPriority, macAclEtherType=macAclEtherType, vlanPortIndex=vlanPortIndex, backupMethod=backupMethod, igmpStaticGroupRowStatus=igmpStaticGroupRowStatus, xMasScanAttack=xMasScanAttack, stpPortP2PMacConf=stpPortP2PMacConf, lldpLocalPortChassisIDsubtype=lldpLocalPortChassisIDsubtype, nKeyStatus=nKeyStatus, igmpStaticGroupEntry=igmpStaticGroupEntry, dhcpServerLeaseIndex=dhcpServerLeaseIndex, dhcpServerVlanId=dhcpServerVlanId, dualImage=dualImage, sshNetworkPort=sshNetworkPort, protectedPortIndex=protectedPortIndex, dhcpSnoopingBindingPorts=dhcpSnoopingBindingPorts, lldpLocalPortAuto_negosupported=lldpLocalPortAuto_negosupported, sfpDMIRxPowerLowAlarmState=sfpDMIRxPowerLowAlarmState, ipv4Address=ipv4Address, xRingProRPairMasterRingID=xRingProRPairMasterRingID, nKey=nKey, queueToipPrecedenceIndex=queueToipPrecedenceIndex, mstRevisionLevel=mstRevisionLevel, securityLoginType=securityLoginType, lldpHoldtimeMultiplier=lldpHoldtimeMultiplier)
mibBuilder.exportSymbols("ADVANTECH-EKI-PRONEER-MIB", lagType=lagType, erpsGroupInstance=erpsGroupInstance, ipSourceGuardEntry=ipSourceGuardEntry, maintenance=maintenance, serverAddress=serverAddress, aSwitchMIB=aSwitchMIB, dot3StatsDeferredTransmissions=dot3StatsDeferredTransmissions, lacpTimeout=lacpTimeout, mstStpPortStatusIndex=mstStpPortStatusIndex, mstStpPortPathCost=mstStpPortPathCost, lldpLocalPortAggregationStatus=lldpLocalPortAggregationStatus, channelRx=channelRx, mldQuerierIP=mldQuerierIP, stpInstance=stpInstance, ledLOOPStatus=ledLOOPStatus, dhcpServerPortClear=dhcpServerPortClear, sfpDMITxBasisHighWarnState=sfpDMITxBasisHighWarnState, queueMethod=queueMethod, qosPortSettingEntry=qosPortSettingEntry, imageVersion=imageVersion, dhcpServerOpt82RemoteID=dhcpServerOpt82RemoteID, qinqPortIndex=qinqPortIndex, portVlanPortIndex=portVlanPortIndex, erpsState=erpsState, dynamicLearned=dynamicLearned, xRingProInfoRole=xRingProInfoRole, ipSecurityRowStatus=ipSecurityRowStatus, interfaceVlanName=interfaceVlanName, rootPathCost=rootPathCost, xRingProChainID=xRingProChainID, lldpLocalPortStatusEntry=lldpLocalPortStatusEntry, securityLogin=securityLogin, validRx=validRx, ledPortLinkdownEventPort=ledPortLinkdownEventPort, lldpremoteDevicePsepowerpair=lldpremoteDevicePsepowerpair, xRingEliteRingIDIndex=xRingEliteRingIDIndex, erpsGroupMEL=erpsGroupMEL, backupAction=backupAction, loggingBufferCategory=loggingBufferCategory, lagName=lagName, dhcpServerGlobalSetting=dhcpServerGlobalSetting, operMldSnoopQueryMaxResponseInterval=operMldSnoopQueryMaxResponseInterval, rmonEventIndex=rmonEventIndex, interfaceIpv4Entry=interfaceIpv4Entry, staticMacSetting=staticMacSetting, dhcpClientOpt82RemoteIDUserDefine=dhcpClientOpt82RemoteIDUserDefine, erpsGroupWestLinkState=erpsGroupWestLinkState, lacpInfoPnkey=lacpInfoPnkey, poeFwVersion=poeFwVersion, portSecurity=portSecurity, ledTempStatus=ledTempStatus, loggingFileTable=loggingFileTable, cableLengthB=cableLengthB, sfpDMITempHighWarnValue=sfpDMITempHighWarnValue, loggingMessage=loggingMessage, enableState=enableState, loopbackPortEnabled=loopbackPortEnabled, snmpTrapHostEntry=snmpTrapHostEntry, lldpPortStatTotalRxFrame=lldpPortStatTotalRxFrame, dhcpv6IPAddress=dhcpv6IPAddress, ipv4Mode=ipv4Mode, dmacEqualsmac=dmacEqualsmac, eeePortEntry=eeePortEntry, mldStaticGroupMemberPorts=mldStaticGroupMemberPorts)
