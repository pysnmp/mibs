#
# PySNMP MIB module HMLLDP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/hirschmann/hmLLDP.mib
# Produced by pysmi-1.1.12 at Fri Jul 19 10:05:38 2024
# On host fv-az1771-969 platform Linux version 6.5.0-1023-azure by user runner
# Using Python version 3.10.14 (main, Jun 20 2024, 15:20:03) [GCC 11.4.0]
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint")
hmConfiguration, = mibBuilder.importSymbols("HMPRIV-MGMT-SNMP-MIB", "hmConfiguration")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, TimeTicks, NotificationType, IpAddress, ModuleIdentity, MibIdentifier, Counter64, Counter32, ObjectIdentity, Unsigned32, Gauge32, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "TimeTicks", "NotificationType", "IpAddress", "ModuleIdentity", "MibIdentifier", "Counter64", "Counter32", "ObjectIdentity", "Unsigned32", "Gauge32", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
hmLLDP = ModuleIdentity((1, 3, 6, 1, 4, 1, 248, 14, 7))
hmLLDP.setRevisions(('2004-11-22 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hmLLDP.setRevisionsDescriptions(('Published as is.',))
if mibBuilder.loadTexts: hmLLDP.setLastUpdated('200411220000Z')
if mibBuilder.loadTexts: hmLLDP.setOrganization('Hirschmann Automation and Control GmbH')
if mibBuilder.loadTexts: hmLLDP.setContactInfo('Customer Support\r\n           Postal: \r\n           Hirschmann Automation and Control GmbH\r\n           Stuttgarter Str. 45-51\r\n           72654 Neckartenzlingen\r\n           Germany\r\n           Tel: +49 7127 14 1981\r\n           Web: http://www.hicomcenter.com/\r\n           E-Mail: hicomcenter@hirschmann.com')
if mibBuilder.loadTexts: hmLLDP.setDescription('The Hirschmann Private LLDP MIB definitions for Platform devices.')
hmLLDPConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 7, 1))
hmLLDPStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 7, 2))
hmLLDPAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmLLDPAdminStatus.setStatus('current')
if mibBuilder.loadTexts: hmLLDPAdminStatus.setDescription('DURABLE:\r\n\t\t\t Enables/disables the IEEE802.1AB functionality\r\n\t\t     on this device. \r\n\t\t     If disabled(2), the LLDP protocol is inactive, \r\n\t\t     but the LLDP MIBs can be accessed.')
hmLLDPInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 248, 14, 7, 1, 2), )
if mibBuilder.loadTexts: hmLLDPInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: hmLLDPInterfaceTable.setDescription('This table contains variables for each interface of\r\n\t\t\t the switch.')
hmLLDPIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 14, 7, 1, 2, 1), ).setIndexNames((0, "HMLLDP-MIB", "hmLLDPIfaceGroupID"), (0, "HMLLDP-MIB", "hmLLDPIfaceID"))
if mibBuilder.loadTexts: hmLLDPIfEntry.setStatus('current')
if mibBuilder.loadTexts: hmLLDPIfEntry.setDescription('The entry of the hmLLDPInterfaceTable.')
hmLLDPIfaceGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 7, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmLLDPIfaceGroupID.setStatus('current')
if mibBuilder.loadTexts: hmLLDPIfaceGroupID.setDescription('index to identify an interface card. This value is never\r\n\t\t\t greater than hmSysGroupCapacity.')
hmLLDPIfaceID = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 7, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmLLDPIfaceID.setStatus('current')
if mibBuilder.loadTexts: hmLLDPIfaceID.setDescription('index to identify an interface within an interface card.')
hmLLDPIfaceHirmaMode = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 7, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("txOnly", 1), ("rxOnly", 2), ("txAndRx", 3), ("disabled", 4))).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmLLDPIfaceHirmaMode.setStatus('current')
if mibBuilder.loadTexts: hmLLDPIfaceHirmaMode.setDescription(' Configure Hirschmann LLDP on this physical port.\r\n                 If an IEEE802.1AB capable device not manufactured by Hirschmann \r\n                 is connected to a port, \r\n                 hmLLDPIfaceHirmaMode should be set to disabled (4) for this port.')
hmLLDPIfaceFDBMode = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 7, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("lldpOnly", 1), ("macOnly", 2), ("both", 3), ("autoDetect", 4))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmLLDPIfaceFDBMode.setStatus('current')
if mibBuilder.loadTexts: hmLLDPIfaceFDBMode.setDescription(" If configured to lldpOnly(1), only received LLDP messages\r\n                  will be used to populate the LLDP-MIB's remTable.\r\n\t\t\t\t  If configured to macOnly(2), learned mac addresses out of the switch's forwarding database (FDB)\r\n                  will be used to populate the LLDP-MIB's remTable.\r\n\t\t\t\t  If configured to both(3), both received LLDP messages\r\n                  and learned mac addresses out of the switch's forwarding database (FDB)\r\n                  will be used to populate the LLDP-MIB's remTable.\r\n\t\t\t\t  If configured to autoDetect(4) and LLDP messages are received on this port, \r\n\t\t\t\t  this mode will behave like lldpOnly(1), otherwise it will behave like macOnly(2).")
hmLLDPIfaceMaxNeighbors = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 7, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmLLDPIfaceMaxNeighbors.setStatus('current')
if mibBuilder.loadTexts: hmLLDPIfaceMaxNeighbors.setDescription(' Configure Hirschmann LLDP on this physical port.\r\n                 This value limits the number of entries in the remTable for this port.')
hmLLDPStatsIfTable = MibTable((1, 3, 6, 1, 4, 1, 248, 14, 7, 2, 1), )
if mibBuilder.loadTexts: hmLLDPStatsIfTable.setStatus('current')
if mibBuilder.loadTexts: hmLLDPStatsIfTable.setDescription('This table contains variables for each interface of\r\n\t\t\t the switch.')
hmLLDPStatsIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 14, 7, 2, 1, 1), ).setIndexNames((0, "HMLLDP-MIB", "hmLLDPStatsIfaceGroupID"), (0, "HMLLDP-MIB", "hmLLDPStatsIfaceID"))
if mibBuilder.loadTexts: hmLLDPStatsIfEntry.setStatus('current')
if mibBuilder.loadTexts: hmLLDPStatsIfEntry.setDescription('The entry of the hmLLDPStatsIfTable.')
hmLLDPStatsIfaceGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 7, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmLLDPStatsIfaceGroupID.setStatus('current')
if mibBuilder.loadTexts: hmLLDPStatsIfaceGroupID.setDescription('index to identify an interface card. This value is never\r\n\t\t\t greater than hmSysGroupCapacity.')
hmLLDPStatsIfaceID = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 7, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmLLDPStatsIfaceID.setStatus('current')
if mibBuilder.loadTexts: hmLLDPStatsIfaceID.setDescription('index to identify an interface within an interface card.')
hmLLDPStatsIfaceTotalFDBEntryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 7, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmLLDPStatsIfaceTotalFDBEntryCount.setStatus('current')
if mibBuilder.loadTexts: hmLLDPStatsIfaceTotalFDBEntryCount.setDescription('The total number of learned entries in the forwarding database (FDB) for this port.')
hmLLDPStatsIfaceTotalEntryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 7, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmLLDPStatsIfaceTotalEntryCount.setStatus('current')
if mibBuilder.loadTexts: hmLLDPStatsIfaceTotalEntryCount.setDescription("The total number of remote connections in the LLDP MIB's remTable for this port.")
hmLLDPStatsIfaceIEEEEntryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 7, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmLLDPStatsIfaceIEEEEntryCount.setStatus('current')
if mibBuilder.loadTexts: hmLLDPStatsIfaceIEEEEntryCount.setDescription("The number of remote connections in the LLDP MIB's remTable for this port \r\n             that were detected because an LLDP message from an IEEE source was received.")
hmLLDPStatsIfaceHirmaEntryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 7, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmLLDPStatsIfaceHirmaEntryCount.setStatus('current')
if mibBuilder.loadTexts: hmLLDPStatsIfaceHirmaEntryCount.setDescription("The number of remote connections in the LLDP MIB's remTable for this port \r\n            that were detected because an LLDP message from an Hirschmann source was received.")
hmLLDPStatsIfaceFDBEntryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 7, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmLLDPStatsIfaceFDBEntryCount.setStatus('current')
if mibBuilder.loadTexts: hmLLDPStatsIfaceFDBEntryCount.setDescription("The number of remote connections in the LLDP MIB's remTable for this port\r\n            that were detected in the forwarding database (FDB) for this port.")
mibBuilder.exportSymbols("HMLLDP-MIB", hmLLDPStatsIfaceGroupID=hmLLDPStatsIfaceGroupID, hmLLDPStatsIfaceTotalEntryCount=hmLLDPStatsIfaceTotalEntryCount, hmLLDPInterfaceTable=hmLLDPInterfaceTable, hmLLDPStatsIfaceTotalFDBEntryCount=hmLLDPStatsIfaceTotalFDBEntryCount, hmLLDPIfEntry=hmLLDPIfEntry, PYSNMP_MODULE_ID=hmLLDP, hmLLDPIfaceID=hmLLDPIfaceID, hmLLDPStatistics=hmLLDPStatistics, hmLLDPIfaceMaxNeighbors=hmLLDPIfaceMaxNeighbors, hmLLDPStatsIfaceFDBEntryCount=hmLLDPStatsIfaceFDBEntryCount, hmLLDPConfig=hmLLDPConfig, hmLLDP=hmLLDP, hmLLDPIfaceHirmaMode=hmLLDPIfaceHirmaMode, hmLLDPIfaceGroupID=hmLLDPIfaceGroupID, hmLLDPStatsIfTable=hmLLDPStatsIfTable, hmLLDPStatsIfEntry=hmLLDPStatsIfEntry, hmLLDPAdminStatus=hmLLDPAdminStatus, hmLLDPIfaceFDBMode=hmLLDPIfaceFDBMode, hmLLDPStatsIfaceID=hmLLDPStatsIfaceID, hmLLDPStatsIfaceIEEEEntryCount=hmLLDPStatsIfaceIEEEEntryCount, hmLLDPStatsIfaceHirmaEntryCount=hmLLDPStatsIfaceHirmaEntryCount)
