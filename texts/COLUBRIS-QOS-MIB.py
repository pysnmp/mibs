#
# PySNMP MIB module COLUBRIS-QOS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/hpmsm/COLUBRIS-QOS-MIB.my
# Produced by pysmi-1.1.12 at Tue Jun  4 12:03:29 2024
# On host fv-az1433-299 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion")
colubrisMgmtV2, = mibBuilder.importSymbols("COLUBRIS-SMI", "colubrisMgmtV2")
ColubrisPriorityQueue, = mibBuilder.importSymbols("COLUBRIS-TC", "ColubrisPriorityQueue")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
IpAddress, MibIdentifier, iso, TimeTicks, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Unsigned32, Integer32, ModuleIdentity, ObjectIdentity, Counter32, Counter64, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "MibIdentifier", "iso", "TimeTicks", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Unsigned32", "Integer32", "ModuleIdentity", "ObjectIdentity", "Counter32", "Counter64", "Bits")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
colubrisQOS = ModuleIdentity((1, 3, 6, 1, 4, 1, 8744, 5, 13))
if mibBuilder.loadTexts: colubrisQOS.setLastUpdated('200407200000Z')
if mibBuilder.loadTexts: colubrisQOS.setOrganization('Colubris Networks, Inc.')
if mibBuilder.loadTexts: colubrisQOS.setContactInfo('Colubris Networks\n                     Postal: 200 West Street Ste 300\n                             Waltham, Massachusetts 02451-1121\n                             UNITED STATES\n                     Phone:  +1 781 684 0001\n                     Fax:    +1 781 684 0009\n\n                     E-mail: cn-snmp@colubris.com')
if mibBuilder.loadTexts: colubrisQOS.setDescription('The MIB module for enterprise specific QoS options.')
colubrisQOSMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 8744, 5, 13, 1))
coQOSStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 8744, 5, 13, 1, 1))
coQOSCountersTable = MibTable((1, 3, 6, 1, 4, 1, 8744, 5, 13, 1, 1, 1), )
if mibBuilder.loadTexts: coQOSCountersTable.setStatus('current')
if mibBuilder.loadTexts: coQOSCountersTable.setDescription('Group containing attributes that are MAC counters. In tabular\n                 form to allow multiple instance on an agent.')
coQOSCountersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8744, 5, 13, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "COLUBRIS-QOS-MIB", "coQOSQueueId"))
if mibBuilder.loadTexts: coQOSCountersEntry.setStatus('current')
if mibBuilder.loadTexts: coQOSCountersEntry.setDescription('An entry in the coQOSCountersEntry Table.\n                 ifIndex - Each 802.11 interface is represented by an ifEntry.\n                           Interface tables in this MIB module are indexed by\n                           ifIndex.')
coQOSQueueId = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 13, 1, 1, 1, 1, 1), ColubrisPriorityQueue())
if mibBuilder.loadTexts: coQOSQueueId.setStatus('current')
if mibBuilder.loadTexts: coQOSQueueId.setDescription('Queue identifier used to access the statistics.')
coQOSTransmittedFrameCount = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 13, 1, 1, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coQOSTransmittedFrameCount.setStatus('current')
if mibBuilder.loadTexts: coQOSTransmittedFrameCount.setDescription('This counter increments only when an acknowledged MPDU\n                 with an individual address in the address 1 field or MPDU\n                 with a multicast address in the address 1 field of type Data\n                 or Management.')
coQOSMulticastTransmittedFrameCount = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 13, 1, 1, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coQOSMulticastTransmittedFrameCount.setStatus('current')
if mibBuilder.loadTexts: coQOSMulticastTransmittedFrameCount.setDescription('This counter increments only when the multicast\n\t\t     bit is set in the destination MAC address of a successfully \n                 transmitted MSDU. When operating as a STA in an ESS, where \n                 these frames are directed to the AP, this implies having \n                 received an acknowledgment to all associated MPDUs.')
coQOSFailedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 13, 1, 1, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coQOSFailedCount.setStatus('current')
if mibBuilder.loadTexts: coQOSFailedCount.setDescription('This counter increments when an MSDU is not transmitted\n                 successfully due to the number of transmit attempts exceeding\n                 either the  coQOSShortRetryLimit or coQOSLongRetryLimit.')
coQOSRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 13, 1, 1, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coQOSRetryCount.setStatus('current')
if mibBuilder.loadTexts: coQOSRetryCount.setDescription('This counter increments when an MSDU is successfully\n                 transmitted after one or more retransmissions. This\n\t\t     is basically a total of single and multiple retry counts.')
coQOSMultipleRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 13, 1, 1, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coQOSMultipleRetryCount.setStatus('current')
if mibBuilder.loadTexts: coQOSMultipleRetryCount.setDescription('This counter increments when an MSDU is successfully\n                 transmitted after more than one retransmission.')
coQOSFrameDuplicateCount = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 13, 1, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coQOSFrameDuplicateCount.setStatus('current')
if mibBuilder.loadTexts: coQOSFrameDuplicateCount.setDescription('This counter increments when a frame is received\n                 that the Sequence Control field indicates is a\n                 duplicate.')
coQOSReceivedFrameCount = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 13, 1, 1, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coQOSReceivedFrameCount.setStatus('current')
if mibBuilder.loadTexts: coQOSReceivedFrameCount.setDescription('This counter shall be incremented for each successfully\n                 received MPDU of type Data or Management.  This is\n\t\t     basically a total of unicast and multicast received\n\t\t     frames.')
coQOSMulticastReceivedFrameCount = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 13, 1, 1, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coQOSMulticastReceivedFrameCount.setStatus('current')
if mibBuilder.loadTexts: coQOSMulticastReceivedFrameCount.setDescription('This counter shall increment when a MPDU is received with the\n                 multicast bit set in the destination MAC address.')
coQOSConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 8744, 5, 13, 1, 2))
coQOSGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 8744, 5, 13, 1, 2, 1))
coQOSCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 8744, 5, 13, 1, 2, 2))
coQOSCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 8744, 5, 13, 1, 2, 2, 1)).setObjects(("COLUBRIS-QOS-MIB", "coQOSCountersGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    coQOSCompliance = coQOSCompliance.setStatus('current')
if mibBuilder.loadTexts: coQOSCompliance.setDescription('The compliance statement for SNMPv2 entities that implement\n                 the IEEE 802.11 MIB.')
coQOSCountersGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 8744, 5, 13, 1, 2, 1, 1)).setObjects(("COLUBRIS-QOS-MIB", "coQOSTransmittedFrameCount"), ("COLUBRIS-QOS-MIB", "coQOSMulticastTransmittedFrameCount"), ("COLUBRIS-QOS-MIB", "coQOSFailedCount"), ("COLUBRIS-QOS-MIB", "coQOSRetryCount"), ("COLUBRIS-QOS-MIB", "coQOSMultipleRetryCount"), ("COLUBRIS-QOS-MIB", "coQOSFrameDuplicateCount"), ("COLUBRIS-QOS-MIB", "coQOSReceivedFrameCount"), ("COLUBRIS-QOS-MIB", "coQOSMulticastReceivedFrameCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    coQOSCountersGroup = coQOSCountersGroup.setStatus('current')
if mibBuilder.loadTexts: coQOSCountersGroup.setDescription('Provides the necessary support for QOS counters.')
mibBuilder.exportSymbols("COLUBRIS-QOS-MIB", coQOSMultipleRetryCount=coQOSMultipleRetryCount, coQOSTransmittedFrameCount=coQOSTransmittedFrameCount, PYSNMP_MODULE_ID=colubrisQOS, coQOSCompliance=coQOSCompliance, coQOSQueueId=coQOSQueueId, coQOSMulticastReceivedFrameCount=coQOSMulticastReceivedFrameCount, coQOSCountersGroup=coQOSCountersGroup, coQOSConformance=coQOSConformance, colubrisQOSMIBObjects=colubrisQOSMIBObjects, coQOSCountersTable=coQOSCountersTable, coQOSFrameDuplicateCount=coQOSFrameDuplicateCount, coQOSStatistics=coQOSStatistics, coQOSMulticastTransmittedFrameCount=coQOSMulticastTransmittedFrameCount, colubrisQOS=colubrisQOS, coQOSReceivedFrameCount=coQOSReceivedFrameCount, coQOSCountersEntry=coQOSCountersEntry, coQOSGroups=coQOSGroups, coQOSRetryCount=coQOSRetryCount, coQOSCompliances=coQOSCompliances, coQOSFailedCount=coQOSFailedCount)
