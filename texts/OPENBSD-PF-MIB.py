#
# PySNMP MIB module OPENBSD-PF-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/openbsd/OPENBSD-PF-MIB
# Produced by pysmi-1.1.12 at Tue Jun  4 02:43:36 2024
# On host fv-az1200-411 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint")
openBSD, = mibBuilder.importSymbols("OPENBSD-BASE-MIB", "openBSD")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Integer32, Counter64, TimeTicks, Bits, iso, Counter32, Unsigned32, ObjectIdentity, enterprises, MibIdentifier, ModuleIdentity, IpAddress, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Counter64", "TimeTicks", "Bits", "iso", "Counter32", "Unsigned32", "ObjectIdentity", "enterprises", "MibIdentifier", "ModuleIdentity", "IpAddress", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32")
TruthValue, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "DisplayString")
pfMIBObjects = ModuleIdentity((1, 3, 6, 1, 4, 1, 30155, 1))
pfMIBObjects.setRevisions(('2015-06-09 17:28', '2013-08-31 04:46', '2013-02-24 20:33', '2012-01-26 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: pfMIBObjects.setRevisionsDescriptions(("Add separate counter for failed 'route-to' applications", "Add pf(4) table byte/packet counters for 'match' rules", 'Add separate counter for failed translations', "Add OPENBSD-PF-MIB to OpenBSD's snmpd",))
if mibBuilder.loadTexts: pfMIBObjects.setLastUpdated('201506091728Z')
if mibBuilder.loadTexts: pfMIBObjects.setOrganization('OpenBSD')
if mibBuilder.loadTexts: pfMIBObjects.setContactInfo('\n                  Author:     Joel Knight\n                  email:      knight.joel@gmail.com\n                  www:        http://www.packetmischief.ca/openbsd-snmp-mibs/\n                 ')
if mibBuilder.loadTexts: pfMIBObjects.setDescription("The MIB module for gathering information from\n\t\tOpenBSD's packet filter.\n                ")
pfInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 30155, 1, 1))
pfCounters = MibIdentifier((1, 3, 6, 1, 4, 1, 30155, 1, 2))
pfStateTable = MibIdentifier((1, 3, 6, 1, 4, 1, 30155, 1, 3))
pfLogInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 30155, 1, 4))
pfSrcTracking = MibIdentifier((1, 3, 6, 1, 4, 1, 30155, 1, 5))
pfLimits = MibIdentifier((1, 3, 6, 1, 4, 1, 30155, 1, 6))
pfTimeouts = MibIdentifier((1, 3, 6, 1, 4, 1, 30155, 1, 7))
pfInterfaces = MibIdentifier((1, 3, 6, 1, 4, 1, 30155, 1, 8))
pfTables = MibIdentifier((1, 3, 6, 1, 4, 1, 30155, 1, 9))
pfLabels = MibIdentifier((1, 3, 6, 1, 4, 1, 30155, 1, 10))
pfsyncStats = MibIdentifier((1, 3, 6, 1, 4, 1, 30155, 1, 11))
pfRunning = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfRunning.setStatus('current')
if mibBuilder.loadTexts: pfRunning.setDescription('Indicates whether pf is enabled or not.')
pfRuntime = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 1, 2), TimeTicks()).setUnits('1/100th of a Second').setMaxAccess("readonly")
if mibBuilder.loadTexts: pfRuntime.setStatus('current')
if mibBuilder.loadTexts: pfRuntime.setDescription('Indicates how long pf has been enabled. If pf is not\n\tenabled, indicates how long pf has been disabled. If pf has not\n\tbeen explicitly enabled or disabled since the system was booted,\n\tthe value will be 0.')
pfDebug = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("emerg", 0), ("alert", 1), ("crit", 2), ("err", 3), ("warning", 4), ("notice", 5), ("info", 6), ("debug", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfDebug.setStatus('current')
if mibBuilder.loadTexts: pfDebug.setDescription('Indicates the debug level that pf is running at.')
pfHostid = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfHostid.setStatus('current')
if mibBuilder.loadTexts: pfHostid.setDescription('The (unique) host id of the machine running pf.')
pfCntMatch = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 2, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfCntMatch.setStatus('current')
if mibBuilder.loadTexts: pfCntMatch.setDescription('The number of packets that have matched a filter rule.')
pfCntBadOffset = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 2, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfCntBadOffset.setStatus('current')
if mibBuilder.loadTexts: pfCntBadOffset.setDescription('The number of packets that have had a bad offset value.')
pfCntFragment = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 2, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfCntFragment.setStatus('current')
if mibBuilder.loadTexts: pfCntFragment.setDescription('The number of packet fragments.')
pfCntShort = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 2, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfCntShort.setStatus('current')
if mibBuilder.loadTexts: pfCntShort.setDescription('The number of packets that were too short to contain a valid header.')
pfCntNormalize = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 2, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfCntNormalize.setStatus('current')
if mibBuilder.loadTexts: pfCntNormalize.setDescription('The number of packets that were normalized using the packet scrubber.')
pfCntMemory = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 2, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfCntMemory.setStatus('current')
if mibBuilder.loadTexts: pfCntMemory.setDescription('The number of packets that were dropped due to memory limitations.')
pfCntTimestamp = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 2, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfCntTimestamp.setStatus('current')
if mibBuilder.loadTexts: pfCntTimestamp.setDescription('The number of packets that were dropped due to improper RFC1323 timestamp.')
pfCntCongestion = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 2, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfCntCongestion.setStatus('current')
if mibBuilder.loadTexts: pfCntCongestion.setDescription('The number of packets that were dropped due to congestion on the interface.')
pfCntIpOption = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 2, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfCntIpOption.setStatus('current')
if mibBuilder.loadTexts: pfCntIpOption.setDescription('The number of packets that were dropped due to having options set in\n    the IP header.')
pfCntProtoCksum = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 2, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfCntProtoCksum.setStatus('current')
if mibBuilder.loadTexts: pfCntProtoCksum.setDescription('The number of packets that were dropped due to memory limitations.')
pfCntStateMismatch = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 2, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfCntStateMismatch.setStatus('current')
if mibBuilder.loadTexts: pfCntStateMismatch.setDescription('The number of packets that were dropped due to a state table mismatch.')
pfCntStateInsert = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 2, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfCntStateInsert.setStatus('current')
if mibBuilder.loadTexts: pfCntStateInsert.setDescription('The number of packets that were dropped due to errors creating a\n\tstate table entry.')
pfCntStateLimit = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 2, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfCntStateLimit.setStatus('current')
if mibBuilder.loadTexts: pfCntStateLimit.setDescription('The number of packets that were dropped due to the per-rule max\n\tstate limit being reached.')
pfCntSrcLimit = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 2, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfCntSrcLimit.setStatus('current')
if mibBuilder.loadTexts: pfCntSrcLimit.setDescription('The number of packets that were dropped due to stateful connection\n\ttracking. A packet could be dropped due to resource limits (memory)\n\tor due to a tracking limit being reached.')
pfCntSynproxy = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 2, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfCntSynproxy.setStatus('current')
if mibBuilder.loadTexts: pfCntSynproxy.setDescription('The number of packets that were dropped during the TCP synproxy process.')
pfCntTranslate = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 2, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfCntTranslate.setStatus('current')
if mibBuilder.loadTexts: pfCntTranslate.setDescription('The number of packets that were dropped because network address\n        translation was requested and no unused port was available.')
pfCntNoRoute = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 2, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfCntNoRoute.setStatus('current')
if mibBuilder.loadTexts: pfCntNoRoute.setDescription('The number of packets that were dropped because policy based routing\n        was requested but no target addresses were available.')
pfStateCount = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 3, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfStateCount.setStatus('current')
if mibBuilder.loadTexts: pfStateCount.setDescription('The number of entries in the state table.')
pfStateSearches = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 3, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfStateSearches.setStatus('current')
if mibBuilder.loadTexts: pfStateSearches.setDescription('The number of searches against the state table.')
pfStateInserts = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 3, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfStateInserts.setStatus('current')
if mibBuilder.loadTexts: pfStateInserts.setDescription('The number of inserts into the state table.')
pfStateRemovals = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 3, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfStateRemovals.setStatus('current')
if mibBuilder.loadTexts: pfStateRemovals.setDescription('The number of removals from the state table.')
pfLogIfName = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 4, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfLogIfName.setStatus('current')
if mibBuilder.loadTexts: pfLogIfName.setDescription("The name of the interface configured using 'set loginterface'.\n\tIf no interface has been configured, the object will be empty.")
pfLogIfIpBytesIn = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 4, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfLogIfIpBytesIn.setStatus('current')
if mibBuilder.loadTexts: pfLogIfIpBytesIn.setDescription('The number of IPv4 bytes passed in on the loginterface.')
pfLogIfIpBytesOut = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 4, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfLogIfIpBytesOut.setStatus('current')
if mibBuilder.loadTexts: pfLogIfIpBytesOut.setDescription('The number of IPv4 bytes passed out on the loginterface.')
pfLogIfIpPktsInPass = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 4, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfLogIfIpPktsInPass.setStatus('current')
if mibBuilder.loadTexts: pfLogIfIpPktsInPass.setDescription('The number of IPv4 packets passed in on the loginterface.')
pfLogIfIpPktsInDrop = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 4, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfLogIfIpPktsInDrop.setStatus('current')
if mibBuilder.loadTexts: pfLogIfIpPktsInDrop.setDescription('The number of dropped IPv4 packets coming in on the loginterface.')
pfLogIfIpPktsOutPass = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 4, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfLogIfIpPktsOutPass.setStatus('current')
if mibBuilder.loadTexts: pfLogIfIpPktsOutPass.setDescription('The number of IPv4 packets passed out on the loginterface.')
pfLogIfIpPktsOutDrop = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 4, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfLogIfIpPktsOutDrop.setStatus('current')
if mibBuilder.loadTexts: pfLogIfIpPktsOutDrop.setDescription('The number of dropped IPv4 packets going out on the loginterface.')
pfLogIfIp6BytesIn = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 4, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfLogIfIp6BytesIn.setStatus('current')
if mibBuilder.loadTexts: pfLogIfIp6BytesIn.setDescription('The number of IPv6 bytes passed in on the loginterface.')
pfLogIfIp6BytesOut = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 4, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfLogIfIp6BytesOut.setStatus('current')
if mibBuilder.loadTexts: pfLogIfIp6BytesOut.setDescription('The number of IPv6 bytes passed out on the loginterface.')
pfLogIfIp6PktsInPass = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 4, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfLogIfIp6PktsInPass.setStatus('current')
if mibBuilder.loadTexts: pfLogIfIp6PktsInPass.setDescription('The number of IPv6 packets passed in on the loginterface.')
pfLogIfIp6PktsInDrop = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 4, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfLogIfIp6PktsInDrop.setStatus('current')
if mibBuilder.loadTexts: pfLogIfIp6PktsInDrop.setDescription('The number of dropped IPv6 packets coming in on the loginterface.')
pfLogIfIp6PktsOutPass = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 4, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfLogIfIp6PktsOutPass.setStatus('current')
if mibBuilder.loadTexts: pfLogIfIp6PktsOutPass.setDescription('The number of IPv6 packets passed out on the loginterface.')
pfLogIfIp6PktsOutDrop = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 4, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfLogIfIp6PktsOutDrop.setStatus('current')
if mibBuilder.loadTexts: pfLogIfIp6PktsOutDrop.setDescription('The number of dropped IPv6 packets going out on the loginterface.')
pfSrcTrackCount = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 5, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfSrcTrackCount.setStatus('current')
if mibBuilder.loadTexts: pfSrcTrackCount.setDescription('The number of entries in the source tracking table.')
pfSrcTrackSearches = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 5, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfSrcTrackSearches.setStatus('current')
if mibBuilder.loadTexts: pfSrcTrackSearches.setDescription('The number of searches against the source tracking table.')
pfSrcTrackInserts = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 5, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfSrcTrackInserts.setStatus('current')
if mibBuilder.loadTexts: pfSrcTrackInserts.setDescription('The number of inserts into the source tracking table.')
pfSrcTrackRemovals = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 5, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfSrcTrackRemovals.setStatus('current')
if mibBuilder.loadTexts: pfSrcTrackRemovals.setDescription('The number of removals from the source tracking table.')
pfLimitStates = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 6, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfLimitStates.setStatus('current')
if mibBuilder.loadTexts: pfLimitStates.setDescription("The maximum number of entries in the memory pool used by state\n\ttable entries (filter rules that specify 'keep state').")
pfLimitSourceNodes = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 6, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfLimitSourceNodes.setStatus('current')
if mibBuilder.loadTexts: pfLimitSourceNodes.setDescription("The maximum number of entries in the memory pool used for tracking\n\tsource IP addresses (filter rules that specify 'sticky-address' or\n\t'source-track' options).")
pfLimitFragments = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 6, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfLimitFragments.setStatus('current')
if mibBuilder.loadTexts: pfLimitFragments.setDescription('The maximum number of entries in the memory pool used for packet \n\treassembly (scrub rules).')
pfLimitMaxTables = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 6, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfLimitMaxTables.setStatus('current')
if mibBuilder.loadTexts: pfLimitMaxTables.setDescription('The maximum number of tables that can be created as part of the\n\tactive ruleset.')
pfLimitMaxTableEntries = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 6, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfLimitMaxTableEntries.setStatus('current')
if mibBuilder.loadTexts: pfLimitMaxTableEntries.setDescription('The overall maximum number of addresses that can be stored in\n\ttables.')
pfTimeoutTcpFirst = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfTimeoutTcpFirst.setStatus('current')
if mibBuilder.loadTexts: pfTimeoutTcpFirst.setDescription('State after receiving the first TCP packet in a new connection.')
pfTimeoutTcpOpening = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfTimeoutTcpOpening.setStatus('current')
if mibBuilder.loadTexts: pfTimeoutTcpOpening.setDescription('State before the destination host ever sends a packet in response\n\tto a new connection from this host.')
pfTimeoutTcpEstablished = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 7, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfTimeoutTcpEstablished.setStatus('current')
if mibBuilder.loadTexts: pfTimeoutTcpEstablished.setDescription('State when a TCP connection is fully established.')
pfTimeoutTcpClosing = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 7, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfTimeoutTcpClosing.setStatus('current')
if mibBuilder.loadTexts: pfTimeoutTcpClosing.setDescription('State after the first FIN has been sent.')
pfTimeoutTcpFinWait = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 7, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfTimeoutTcpFinWait.setStatus('current')
if mibBuilder.loadTexts: pfTimeoutTcpFinWait.setDescription('State after both FINs are sent and the connection is closed.')
pfTimeoutTcpClosed = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 7, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfTimeoutTcpClosed.setStatus('current')
if mibBuilder.loadTexts: pfTimeoutTcpClosed.setDescription('State after the first RST has been sent.')
pfTimeoutUdpFirst = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 7, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfTimeoutUdpFirst.setStatus('current')
if mibBuilder.loadTexts: pfTimeoutUdpFirst.setDescription('State after receiving the first UDP packet.')
pfTimeoutUdpSingle = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 7, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfTimeoutUdpSingle.setStatus('current')
if mibBuilder.loadTexts: pfTimeoutUdpSingle.setDescription('State if the source sends more than 1 packet but the destination\n\thas never sent a packet back.')
pfTimeoutUdpMultiple = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 7, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfTimeoutUdpMultiple.setStatus('current')
if mibBuilder.loadTexts: pfTimeoutUdpMultiple.setDescription('State when both hosts have sent packets.')
pfTimeoutIcmpFirst = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 7, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfTimeoutIcmpFirst.setStatus('current')
if mibBuilder.loadTexts: pfTimeoutIcmpFirst.setDescription('State after receiving the first ICMP packet.')
pfTimeoutIcmpError = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 7, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfTimeoutIcmpError.setStatus('current')
if mibBuilder.loadTexts: pfTimeoutIcmpError.setDescription('State when an ICMP error comes back in response to an ICMP\n\tpacket.')
pfTimeoutOtherFirst = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 7, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfTimeoutOtherFirst.setStatus('current')
if mibBuilder.loadTexts: pfTimeoutOtherFirst.setDescription('State after receiving the first packet.')
pfTimeoutOtherSingle = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 7, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfTimeoutOtherSingle.setStatus('current')
if mibBuilder.loadTexts: pfTimeoutOtherSingle.setDescription('State if the source sends more than 1 packet but the destination\n\thas never sent a packet back.')
pfTimeoutOtherMultiple = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 7, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfTimeoutOtherMultiple.setStatus('current')
if mibBuilder.loadTexts: pfTimeoutOtherMultiple.setDescription('State when both hosts have sent packets.')
pfTimeoutFragment = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 7, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfTimeoutFragment.setStatus('current')
if mibBuilder.loadTexts: pfTimeoutFragment.setDescription('How long before an unassembled fragment is expired.')
pfTimeoutInterval = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 7, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfTimeoutInterval.setStatus('current')
if mibBuilder.loadTexts: pfTimeoutInterval.setDescription('Interval before purging expired states and fragments.')
pfTimeoutAdaptiveStart = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 7, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfTimeoutAdaptiveStart.setStatus('current')
if mibBuilder.loadTexts: pfTimeoutAdaptiveStart.setDescription('When the number of state entries exceeds this value, adaptive\n\tscaling begins.')
pfTimeoutAdaptiveEnd = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 7, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfTimeoutAdaptiveEnd.setStatus('current')
if mibBuilder.loadTexts: pfTimeoutAdaptiveEnd.setDescription('When reaching this number of state entries, all timeout values \n\tbecome zero, effectively purging all state entries immediately.')
pfTimeoutSrcTrack = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 7, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfTimeoutSrcTrack.setStatus('current')
if mibBuilder.loadTexts: pfTimeoutSrcTrack.setDescription('Time that a source tracking entry will stay around after the\n\tlast state expires.')
pfIfNumber = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfIfNumber.setStatus('current')
if mibBuilder.loadTexts: pfIfNumber.setDescription('The number of network interfaces present on this system.')
pfIfTable = MibTable((1, 3, 6, 1, 4, 1, 30155, 1, 8, 128), )
if mibBuilder.loadTexts: pfIfTable.setStatus('current')
if mibBuilder.loadTexts: pfIfTable.setDescription('A list of individual interfaces. The number of entries is\n\tgiven by the value of pfIfNumber.')
pfIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 30155, 1, 8, 128, 1), ).setIndexNames((0, "OPENBSD-PF-MIB", "pfIfIndex"))
if mibBuilder.loadTexts: pfIfEntry.setStatus('current')
if mibBuilder.loadTexts: pfIfEntry.setDescription('An entry containing management information applicable to a\n\tparticular interface.')
pfIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 8, 128, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfIfIndex.setStatus('current')
if mibBuilder.loadTexts: pfIfIndex.setDescription("A unique value, greater than zero, for each interface.  It\n\tis recommended that values are assigned contiguously\n\tstarting from 1.  The value for each interface sub-layer\n\tmust remain constant at least from one re-initialization of\n\tthe entity's network management system to the next re-\n\tinitialization.")
pfIfDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 8, 128, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfIfDescr.setStatus('current')
if mibBuilder.loadTexts: pfIfDescr.setDescription('The name of the interface.')
pfIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 8, 128, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("group", 0), ("instance", 1), ("detached", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfIfType.setStatus('current')
if mibBuilder.loadTexts: pfIfType.setDescription("Denotes whether the interface is a group interface, an interface \n\tinstance, or whether it's been removed or destroyed.")
pfIfRefs = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 8, 128, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfIfRefs.setStatus('current')
if mibBuilder.loadTexts: pfIfRefs.setDescription('The number of state and/or source track entries which reference \n\tthe interface.')
pfIfRules = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 8, 128, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfIfRules.setStatus('current')
if mibBuilder.loadTexts: pfIfRules.setDescription('The number of rules which reference the interface.')
pfIfIn4PassPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 8, 128, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfIfIn4PassPkts.setStatus('current')
if mibBuilder.loadTexts: pfIfIn4PassPkts.setDescription('The number of IPv4 packets passed in.')
pfIfIn4PassBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 8, 128, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfIfIn4PassBytes.setStatus('current')
if mibBuilder.loadTexts: pfIfIn4PassBytes.setDescription('The number of IPv4 bytes passed in.')
pfIfIn4BlockPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 8, 128, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfIfIn4BlockPkts.setStatus('current')
if mibBuilder.loadTexts: pfIfIn4BlockPkts.setDescription('The number of incoming IPv4 packets blocked.')
pfIfIn4BlockBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 8, 128, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfIfIn4BlockBytes.setStatus('current')
if mibBuilder.loadTexts: pfIfIn4BlockBytes.setDescription('The number of incoming IPv4 bytes blocked.')
pfIfOut4PassPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 8, 128, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfIfOut4PassPkts.setStatus('current')
if mibBuilder.loadTexts: pfIfOut4PassPkts.setDescription('The number of IPv4 bytes passed out.')
pfIfOut4PassBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 8, 128, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfIfOut4PassBytes.setStatus('current')
if mibBuilder.loadTexts: pfIfOut4PassBytes.setDescription('The number of IPv4 bytes passed out.')
pfIfOut4BlockPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 8, 128, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfIfOut4BlockPkts.setStatus('current')
if mibBuilder.loadTexts: pfIfOut4BlockPkts.setDescription('The number of outgoing IPv4 bytes blocked.')
pfIfOut4BlockBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 8, 128, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfIfOut4BlockBytes.setStatus('current')
if mibBuilder.loadTexts: pfIfOut4BlockBytes.setDescription('The number of outgoing IPv4 bytes blocked.')
pfIfIn6PassPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 8, 128, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfIfIn6PassPkts.setStatus('current')
if mibBuilder.loadTexts: pfIfIn6PassPkts.setDescription('The number of IPv6 packets passed in.')
pfIfIn6PassBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 8, 128, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfIfIn6PassBytes.setStatus('current')
if mibBuilder.loadTexts: pfIfIn6PassBytes.setDescription('The number of IPv6 bytes passed in.')
pfIfIn6BlockPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 8, 128, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfIfIn6BlockPkts.setStatus('current')
if mibBuilder.loadTexts: pfIfIn6BlockPkts.setDescription('The number of incoming IPv6 packets blocked.')
pfIfIn6BlockBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 8, 128, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfIfIn6BlockBytes.setStatus('current')
if mibBuilder.loadTexts: pfIfIn6BlockBytes.setDescription('The number of incoming IPv6 bytes blocked.')
pfIfOut6PassPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 8, 128, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfIfOut6PassPkts.setStatus('current')
if mibBuilder.loadTexts: pfIfOut6PassPkts.setDescription('The number of IPv6 bytes passed out.')
pfIfOut6PassBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 8, 128, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfIfOut6PassBytes.setStatus('current')
if mibBuilder.loadTexts: pfIfOut6PassBytes.setDescription('The number of IPv6 bytes passed out.')
pfIfOut6BlockPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 8, 128, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfIfOut6BlockPkts.setStatus('current')
if mibBuilder.loadTexts: pfIfOut6BlockPkts.setDescription('The number of outgoing IPv6 bytes blocked.')
pfIfOut6BlockBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 8, 128, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfIfOut6BlockBytes.setStatus('current')
if mibBuilder.loadTexts: pfIfOut6BlockBytes.setDescription('The number of outgoing IPv6 bytes blocked.')
pfTblNumber = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 9, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfTblNumber.setStatus('current')
if mibBuilder.loadTexts: pfTblNumber.setDescription('The number of tables present on this system.')
pfTblTable = MibTable((1, 3, 6, 1, 4, 1, 30155, 1, 9, 128), )
if mibBuilder.loadTexts: pfTblTable.setStatus('current')
if mibBuilder.loadTexts: pfTblTable.setDescription('A list of individual tables. The number of entries is\n\tgiven by the value of tblNumber.')
pfTblEntry = MibTableRow((1, 3, 6, 1, 4, 1, 30155, 1, 9, 128, 1), ).setIndexNames((0, "OPENBSD-PF-MIB", "pfTblIndex"))
if mibBuilder.loadTexts: pfTblEntry.setStatus('current')
if mibBuilder.loadTexts: pfTblEntry.setDescription('An entry containing management information applicable to a\n\tparticular table.')
pfTblIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 9, 128, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfTblIndex.setStatus('current')
if mibBuilder.loadTexts: pfTblIndex.setDescription('A unique value, greater than zero, for each table.')
pfTblName = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 9, 128, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfTblName.setStatus('current')
if mibBuilder.loadTexts: pfTblName.setDescription('The name of the table.')
pfTblAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 9, 128, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfTblAddresses.setStatus('current')
if mibBuilder.loadTexts: pfTblAddresses.setDescription('The number of addresses currently stored in the table.')
pfTblAnchorRefs = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 9, 128, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfTblAnchorRefs.setStatus('current')
if mibBuilder.loadTexts: pfTblAnchorRefs.setDescription('The number of anchors which reference the table.')
pfTblRuleRefs = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 9, 128, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfTblRuleRefs.setStatus('current')
if mibBuilder.loadTexts: pfTblRuleRefs.setDescription('The number of rules which reference the table.')
pfTblEvalsMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 9, 128, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfTblEvalsMatch.setStatus('current')
if mibBuilder.loadTexts: pfTblEvalsMatch.setDescription('The number of table evaluations that produced a match.')
pfTblEvalsNoMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 9, 128, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfTblEvalsNoMatch.setStatus('current')
if mibBuilder.loadTexts: pfTblEvalsNoMatch.setDescription("The number of table evaluations that didn't match.")
pfTblInPassPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 9, 128, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfTblInPassPkts.setStatus('current')
if mibBuilder.loadTexts: pfTblInPassPkts.setDescription('The number of packets passed in that matched the table.')
pfTblInPassBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 9, 128, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfTblInPassBytes.setStatus('current')
if mibBuilder.loadTexts: pfTblInPassBytes.setDescription('The number of bytes passed in that matched the table.')
pfTblInBlockPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 9, 128, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfTblInBlockPkts.setStatus('current')
if mibBuilder.loadTexts: pfTblInBlockPkts.setDescription('The number of incoming packets blocked that matched the table.')
pfTblInBlockBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 9, 128, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfTblInBlockBytes.setStatus('current')
if mibBuilder.loadTexts: pfTblInBlockBytes.setDescription('The number incoming bytes blocked that matched the table.')
pfTblInXPassPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 9, 128, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfTblInXPassPkts.setStatus('current')
if mibBuilder.loadTexts: pfTblInXPassPkts.setDescription('The number of packets statefully passed in where the state\n\tentry refers to the table, but the table no longer contains\n\tthe address in question.')
pfTblInXPassBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 9, 128, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfTblInXPassBytes.setStatus('current')
if mibBuilder.loadTexts: pfTblInXPassBytes.setDescription('The number of bytes statefully passed in where the state\n\tentry refers to the table, but the table no longer contains\n\tthe address in question.')
pfTblOutPassPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 9, 128, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfTblOutPassPkts.setStatus('current')
if mibBuilder.loadTexts: pfTblOutPassPkts.setDescription('The number of packets passed out that matched the table.')
pfTblOutPassBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 9, 128, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfTblOutPassBytes.setStatus('current')
if mibBuilder.loadTexts: pfTblOutPassBytes.setDescription('The number of bytes passed out that matched the table.')
pfTblOutBlockPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 9, 128, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfTblOutBlockPkts.setStatus('current')
if mibBuilder.loadTexts: pfTblOutBlockPkts.setDescription('The number of outgoing packets blocked that matched the table.')
pfTblOutBlockBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 9, 128, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfTblOutBlockBytes.setStatus('current')
if mibBuilder.loadTexts: pfTblOutBlockBytes.setDescription('The number outgoing bytes blocked that matched the table.')
pfTblOutXPassPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 9, 128, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfTblOutXPassPkts.setStatus('current')
if mibBuilder.loadTexts: pfTblOutXPassPkts.setDescription('The number of packets statefully passed out where the state\n\tentry refers to the table, but the table no longer contains\n\tthe address in question.')
pfTblOutXPassBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 9, 128, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfTblOutXPassBytes.setStatus('current')
if mibBuilder.loadTexts: pfTblOutXPassBytes.setDescription('The number of bytes statefully passed out where the state\n\tentry refers to the table, but the table no longer contains\n\tthe address in question.')
pfTblStatsCleared = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 9, 128, 1, 20), TimeTicks()).setUnits('1/100th of a Second').setMaxAccess("readonly")
if mibBuilder.loadTexts: pfTblStatsCleared.setStatus('current')
if mibBuilder.loadTexts: pfTblStatsCleared.setDescription('The number of seconds that have passed since the statistics\n\tfor this pf table were zeroed.')
pfTblInMatchPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 9, 128, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfTblInMatchPkts.setStatus('current')
if mibBuilder.loadTexts: pfTblInMatchPkts.setDescription("The number of inbound packets that hit a 'match' rule where this\n\tparticular table was referenced by the rule.")
pfTblInMatchBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 9, 128, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfTblInMatchBytes.setStatus('current')
if mibBuilder.loadTexts: pfTblInMatchBytes.setDescription("The total size in bytes of all inbound packets that hit a\n\t'match' rule where this particular table was referenced by\n\tthe rule.")
pfTblOutMatchPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 9, 128, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfTblOutMatchPkts.setStatus('current')
if mibBuilder.loadTexts: pfTblOutMatchPkts.setDescription("The number of outbound packets that hit a 'match' rule where this\n\tparticular table was referenced by the rule.")
pfTblOutMatchBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 9, 128, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfTblOutMatchBytes.setStatus('current')
if mibBuilder.loadTexts: pfTblOutMatchBytes.setDescription("The total size in bytes of all outbound packets that hit a\n\t'match' rule where this particular table was referenced by\n\tthe rule.")
pfTblAddrTable = MibTable((1, 3, 6, 1, 4, 1, 30155, 1, 9, 129), )
if mibBuilder.loadTexts: pfTblAddrTable.setStatus('current')
if mibBuilder.loadTexts: pfTblAddrTable.setDescription('A table containing the addresses/CIDR network blocks from \n\tevery table on the system.')
pfTblAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 30155, 1, 9, 129, 1), ).setIndexNames((0, "OPENBSD-PF-MIB", "pfTblAddrTblIndex"), (0, "OPENBSD-PF-MIB", "pfTblAddrNet"), (0, "OPENBSD-PF-MIB", "pfTblAddrMask"))
if mibBuilder.loadTexts: pfTblAddrEntry.setStatus('current')
if mibBuilder.loadTexts: pfTblAddrEntry.setDescription('An entry containing management information applicable to a\n\tparticular table.')
pfTblAddrTblIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 9, 129, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfTblAddrTblIndex.setStatus('current')
if mibBuilder.loadTexts: pfTblAddrTblIndex.setDescription('The index value which uniquely identifies the table which\n\tcontains this pfTblAddrNet/pfTblAddrMask pair.')
pfTblAddrNet = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 9, 129, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfTblAddrNet.setStatus('current')
if mibBuilder.loadTexts: pfTblAddrNet.setDescription('The IP address portion of the CIDR network for this\n\tparticular table entry.')
pfTblAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 9, 129, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfTblAddrMask.setStatus('current')
if mibBuilder.loadTexts: pfTblAddrMask.setDescription('The CIDR bitmask for this particular table entry.')
pfTblAddrCleared = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 9, 129, 1, 4), TimeTicks()).setUnits('1/100th of a Second').setMaxAccess("readonly")
if mibBuilder.loadTexts: pfTblAddrCleared.setStatus('current')
if mibBuilder.loadTexts: pfTblAddrCleared.setDescription("The time that's passed since the statistics where last cleared, or\n\tsince the pfTblAddrNet/pfTblAddrMask pair was loaded into the table, \n\twhichever is sooner.")
pfTblAddrInBlockPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 9, 129, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfTblAddrInBlockPkts.setStatus('current')
if mibBuilder.loadTexts: pfTblAddrInBlockPkts.setDescription('The number of inbound packets blocked as a result of matching\n\tthis table entry.')
pfTblAddrInBlockBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 9, 129, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfTblAddrInBlockBytes.setStatus('current')
if mibBuilder.loadTexts: pfTblAddrInBlockBytes.setDescription('The number of inbound bytes blocked as a result of matching\n\tthis table entry.')
pfTblAddrInPassPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 9, 129, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfTblAddrInPassPkts.setStatus('current')
if mibBuilder.loadTexts: pfTblAddrInPassPkts.setDescription('The number of inbound packets passed as a result of matching\n\tthis table entry.')
pfTblAddrInPassBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 9, 129, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfTblAddrInPassBytes.setStatus('current')
if mibBuilder.loadTexts: pfTblAddrInPassBytes.setDescription('The number of inbound bytes passed as a result of matching\n\tthis table entry.')
pfTblAddrOutBlockPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 9, 129, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfTblAddrOutBlockPkts.setStatus('current')
if mibBuilder.loadTexts: pfTblAddrOutBlockPkts.setDescription('The number of outbound packets blocked as a result of matching\n\tthis table entry.')
pfTblAddrOutBlockBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 9, 129, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfTblAddrOutBlockBytes.setStatus('current')
if mibBuilder.loadTexts: pfTblAddrOutBlockBytes.setDescription('The number of outbound bytes blocked as a result of matching\n\tthis table entry.')
pfTblAddrOutPassPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 9, 129, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfTblAddrOutPassPkts.setStatus('current')
if mibBuilder.loadTexts: pfTblAddrOutPassPkts.setDescription('The number of outbound packets passed as a result of matchin\n\tthis table entry.')
pfTblAddrOutPassBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 9, 129, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfTblAddrOutPassBytes.setStatus('current')
if mibBuilder.loadTexts: pfTblAddrOutPassBytes.setDescription('The number of outbound bytes passed as a result of matchg\n\tthis table entry.')
pfTblAddrInMatchPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 9, 129, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfTblAddrInMatchPkts.setStatus('current')
if mibBuilder.loadTexts: pfTblAddrInMatchPkts.setDescription("The number of inbound packets that hit a 'match' rule where\n\tthis table entry was referenced.")
pfTblAddrInMatchBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 9, 129, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfTblAddrInMatchBytes.setStatus('current')
if mibBuilder.loadTexts: pfTblAddrInMatchBytes.setDescription("The total size in bytes of all inbound packets that hit\n\ta 'match' rule where this table entry was referenced.")
pfTblAddrOutMatchPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 9, 129, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfTblAddrOutMatchPkts.setStatus('current')
if mibBuilder.loadTexts: pfTblAddrOutMatchPkts.setDescription("The number of outbound packets that hit a 'match' rule where\n\tthis table entry was referenced.")
pfTblAddrOutMatchBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 9, 129, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfTblAddrOutMatchBytes.setStatus('current')
if mibBuilder.loadTexts: pfTblAddrOutMatchBytes.setDescription("The total size in bytes of all outbound packets that hit\n\ta 'match' rule where this table entry was referenced.")
pfLabelNumber = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 10, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfLabelNumber.setStatus('current')
if mibBuilder.loadTexts: pfLabelNumber.setDescription('The number of labels in the active pf ruleset.')
pfLabelTable = MibTable((1, 3, 6, 1, 4, 1, 30155, 1, 10, 128), )
if mibBuilder.loadTexts: pfLabelTable.setStatus('current')
if mibBuilder.loadTexts: pfLabelTable.setDescription('A list of individual labels. The number of entries is\n\tgiven by the value of pfLabelNumber.')
pfLabelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 30155, 1, 10, 128, 1), ).setIndexNames((0, "OPENBSD-PF-MIB", "pfLabelIndex"))
if mibBuilder.loadTexts: pfLabelEntry.setStatus('current')
if mibBuilder.loadTexts: pfLabelEntry.setDescription('An entry containing management information applicable to a\n\tparticular label.')
pfLabelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 10, 128, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfLabelIndex.setStatus('current')
if mibBuilder.loadTexts: pfLabelIndex.setDescription('A unique value, greater than zero, for each label.')
pfLabelName = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 10, 128, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfLabelName.setStatus('current')
if mibBuilder.loadTexts: pfLabelName.setDescription('The name of the label.')
pfLabelEvals = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 10, 128, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfLabelEvals.setStatus('current')
if mibBuilder.loadTexts: pfLabelEvals.setDescription('The number of rule evaluations.')
pfLabelPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 10, 128, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfLabelPkts.setStatus('current')
if mibBuilder.loadTexts: pfLabelPkts.setDescription('The total number of packets matched by the rule.')
pfLabelBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 10, 128, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfLabelBytes.setStatus('current')
if mibBuilder.loadTexts: pfLabelBytes.setDescription('The total number of bytes matched by the rule.')
pfLabelInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 10, 128, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfLabelInPkts.setStatus('current')
if mibBuilder.loadTexts: pfLabelInPkts.setDescription('The number of incoming packets matched by the rule.')
pfLabelInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 10, 128, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfLabelInBytes.setStatus('current')
if mibBuilder.loadTexts: pfLabelInBytes.setDescription('The number of incoming bytes matched by the rule.')
pfLabelOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 10, 128, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfLabelOutPkts.setStatus('current')
if mibBuilder.loadTexts: pfLabelOutPkts.setDescription('The number of outgoing packets matched by the rule.')
pfLabelOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 10, 128, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfLabelOutBytes.setStatus('current')
if mibBuilder.loadTexts: pfLabelOutBytes.setDescription('The number of outgoing bytes matched by the rule.')
pfLabelTotalStates = MibTableColumn((1, 3, 6, 1, 4, 1, 30155, 1, 10, 128, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfLabelTotalStates.setStatus('current')
if mibBuilder.loadTexts: pfLabelTotalStates.setDescription('The total number of state table entries created by this rule\n\tsince the ruleset was loaded.')
pfsyncIpPktsRecv = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 11, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfsyncIpPktsRecv.setStatus('current')
if mibBuilder.loadTexts: pfsyncIpPktsRecv.setDescription('Number of IPv4 pfsync packets received on all interfaces.')
pfsyncIp6PktsRecv = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 11, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfsyncIp6PktsRecv.setStatus('current')
if mibBuilder.loadTexts: pfsyncIp6PktsRecv.setDescription('Number of IPv6 pfsync packets received on all interfaces.')
pfsyncPktDiscardsForBadInterface = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 11, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfsyncPktDiscardsForBadInterface.setStatus('current')
if mibBuilder.loadTexts: pfsyncPktDiscardsForBadInterface.setDescription('Number of pfsync packets discarded because it was received\n\ton an interface that is not running pfsync.')
pfsyncPktDiscardsForBadTtl = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 11, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfsyncPktDiscardsForBadTtl.setStatus('current')
if mibBuilder.loadTexts: pfsyncPktDiscardsForBadTtl.setDescription('Number of pfsync packets discarded due to having a TTL less\n\tthan 255.')
pfsyncPktShorterThanHeader = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 11, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfsyncPktShorterThanHeader.setStatus('current')
if mibBuilder.loadTexts: pfsyncPktShorterThanHeader.setDescription('Number of pfsync packets received that had a length shorter\n\tthan the pfsync packet header.')
pfsyncPktDiscardsForBadVersion = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 11, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfsyncPktDiscardsForBadVersion.setStatus('current')
if mibBuilder.loadTexts: pfsyncPktDiscardsForBadVersion.setDescription('Number of pfsync packets discarded due to incorrect protocol\n\tversion.')
pfsyncPktDiscardsForBadAction = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 11, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfsyncPktDiscardsForBadAction.setStatus('current')
if mibBuilder.loadTexts: pfsyncPktDiscardsForBadAction.setDescription('Number of pfsync packets discarded due to an invalid pfsync\n\taction in the header.')
pfsyncPktDiscardsForBadLength = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 11, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfsyncPktDiscardsForBadLength.setStatus('current')
if mibBuilder.loadTexts: pfsyncPktDiscardsForBadLength.setDescription('Number of pfsync packets discarded due to incorrect size.')
pfsyncPktDiscardsForBadAuth = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 11, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfsyncPktDiscardsForBadAuth.setStatus('current')
if mibBuilder.loadTexts: pfsyncPktDiscardsForBadAuth.setDescription('Number of pfsync packets discarded due to authentication failure.')
pfsyncPktDiscardsForStaleState = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 11, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfsyncPktDiscardsForStaleState.setStatus('current')
if mibBuilder.loadTexts: pfsyncPktDiscardsForStaleState.setDescription('Number of pfsync packets discarded because they tried to update\n\ta stale state entry.')
pfsyncPktDiscardsForBadValues = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 11, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfsyncPktDiscardsForBadValues.setStatus('current')
if mibBuilder.loadTexts: pfsyncPktDiscardsForBadValues.setDescription('Number of pfsync packets discarded due to containing bad values.')
pfsyncPktDiscardsForBadState = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 11, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfsyncPktDiscardsForBadState.setStatus('current')
if mibBuilder.loadTexts: pfsyncPktDiscardsForBadState.setDescription('Number of pfsync packets discarded due to state insert/lookup\n\tfailure.')
pfsyncIpPktsSent = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 11, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfsyncIpPktsSent.setStatus('current')
if mibBuilder.loadTexts: pfsyncIpPktsSent.setDescription('Number of IPv4 pfsync packets sent on all interfaces.')
pfsyncIp6PktsSent = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 11, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfsyncIp6PktsSent.setStatus('current')
if mibBuilder.loadTexts: pfsyncIp6PktsSent.setDescription('Number of IPv6 pfsync packets sent on all interfaces.')
pfsyncNoMemory = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 11, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfsyncNoMemory.setStatus('current')
if mibBuilder.loadTexts: pfsyncNoMemory.setDescription('Number of pfsync packets which could not be sent due to\n\tinsufficient memory.')
pfsyncOutputErrors = MibScalar((1, 3, 6, 1, 4, 1, 30155, 1, 11, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfsyncOutputErrors.setStatus('current')
if mibBuilder.loadTexts: pfsyncOutputErrors.setDescription('Number of pfsync packets which could not be sent.')
mibBuilder.exportSymbols("OPENBSD-PF-MIB", pfTimeoutTcpEstablished=pfTimeoutTcpEstablished, pfCntNormalize=pfCntNormalize, pfTblInMatchBytes=pfTblInMatchBytes, PYSNMP_MODULE_ID=pfMIBObjects, pfTblAddrTable=pfTblAddrTable, pfLabelTotalStates=pfLabelTotalStates, pfTimeoutUdpFirst=pfTimeoutUdpFirst, pfsyncPktDiscardsForBadValues=pfsyncPktDiscardsForBadValues, pfIfOut6PassPkts=pfIfOut6PassPkts, pfIfOut4PassPkts=pfIfOut4PassPkts, pfTblAddrInBlockPkts=pfTblAddrInBlockPkts, pfTblAddrInMatchPkts=pfTblAddrInMatchPkts, pfTimeoutTcpClosing=pfTimeoutTcpClosing, pfsyncStats=pfsyncStats, pfLabelEntry=pfLabelEntry, pfIfTable=pfIfTable, pfLabelOutPkts=pfLabelOutPkts, pfIfIn6BlockPkts=pfIfIn6BlockPkts, pfLogIfIpPktsOutDrop=pfLogIfIpPktsOutDrop, pfCntIpOption=pfCntIpOption, pfTblInMatchPkts=pfTblInMatchPkts, pfLogIfIp6BytesOut=pfLogIfIp6BytesOut, pfIfIn4BlockPkts=pfIfIn4BlockPkts, pfInfo=pfInfo, pfTblOutBlockPkts=pfTblOutBlockPkts, pfCntSrcLimit=pfCntSrcLimit, pfCntStateLimit=pfCntStateLimit, pfTblOutPassBytes=pfTblOutPassBytes, pfCntBadOffset=pfCntBadOffset, pfLogIfIp6PktsOutDrop=pfLogIfIp6PktsOutDrop, pfsyncNoMemory=pfsyncNoMemory, pfIfRules=pfIfRules, pfTblEntry=pfTblEntry, pfTblInXPassBytes=pfTblInXPassBytes, pfTblRuleRefs=pfTblRuleRefs, pfTimeoutInterval=pfTimeoutInterval, pfCntMatch=pfCntMatch, pfLogIfIp6PktsInDrop=pfLogIfIp6PktsInDrop, pfTblInPassPkts=pfTblInPassPkts, pfSrcTrackInserts=pfSrcTrackInserts, pfsyncPktDiscardsForBadInterface=pfsyncPktDiscardsForBadInterface, pfTblInBlockPkts=pfTblInBlockPkts, pfsyncIp6PktsSent=pfsyncIp6PktsSent, pfTblAddrOutBlockBytes=pfTblAddrOutBlockBytes, pfSrcTrackCount=pfSrcTrackCount, pfLimitFragments=pfLimitFragments, pfLabelPkts=pfLabelPkts, pfStateRemovals=pfStateRemovals, pfIfNumber=pfIfNumber, pfTblAddrTblIndex=pfTblAddrTblIndex, pfIfOut6BlockBytes=pfIfOut6BlockBytes, pfsyncPktDiscardsForBadState=pfsyncPktDiscardsForBadState, pfLogIfIpBytesIn=pfLogIfIpBytesIn, pfRunning=pfRunning, pfLogIfName=pfLogIfName, pfLogIfIp6BytesIn=pfLogIfIp6BytesIn, pfIfOut6BlockPkts=pfIfOut6BlockPkts, pfIfDescr=pfIfDescr, pfTimeouts=pfTimeouts, pfLabelOutBytes=pfLabelOutBytes, pfIfIn6PassBytes=pfIfIn6PassBytes, pfIfOut4PassBytes=pfIfOut4PassBytes, pfIfEntry=pfIfEntry, pfTblOutPassPkts=pfTblOutPassPkts, pfTblAddrNet=pfTblAddrNet, pfLabels=pfLabels, pfTblInXPassPkts=pfTblInXPassPkts, pfsyncPktDiscardsForBadLength=pfsyncPktDiscardsForBadLength, pfIfOut4BlockBytes=pfIfOut4BlockBytes, pfTblName=pfTblName, pfMIBObjects=pfMIBObjects, pfTimeoutIcmpError=pfTimeoutIcmpError, pfTimeoutAdaptiveStart=pfTimeoutAdaptiveStart, pfTimeoutTcpFirst=pfTimeoutTcpFirst, pfRuntime=pfRuntime, pfLogIfIpPktsInPass=pfLogIfIpPktsInPass, pfCntMemory=pfCntMemory, pfLimitSourceNodes=pfLimitSourceNodes, pfIfIn4PassBytes=pfIfIn4PassBytes, pfTblTable=pfTblTable, pfTimeoutFragment=pfTimeoutFragment, pfIfIn6BlockBytes=pfIfIn6BlockBytes, pfLogIfIpPktsOutPass=pfLogIfIpPktsOutPass, pfTblOutBlockBytes=pfTblOutBlockBytes, pfCntShort=pfCntShort, pfTimeoutOtherFirst=pfTimeoutOtherFirst, pfsyncIpPktsRecv=pfsyncIpPktsRecv, pfTblAddrOutBlockPkts=pfTblAddrOutBlockPkts, pfTimeoutTcpClosed=pfTimeoutTcpClosed, pfCntProtoCksum=pfCntProtoCksum, pfTblAddrEntry=pfTblAddrEntry, pfTblEvalsMatch=pfTblEvalsMatch, pfTblAddrOutMatchBytes=pfTblAddrOutMatchBytes, pfTblInBlockBytes=pfTblInBlockBytes, pfLimitMaxTableEntries=pfLimitMaxTableEntries, pfLabelInBytes=pfLabelInBytes, pfCntSynproxy=pfCntSynproxy, pfStateTable=pfStateTable, pfInterfaces=pfInterfaces, pfsyncPktDiscardsForBadAction=pfsyncPktDiscardsForBadAction, pfTblEvalsNoMatch=pfTblEvalsNoMatch, pfTblInPassBytes=pfTblInPassBytes, pfTblAddrMask=pfTblAddrMask, pfTimeoutTcpOpening=pfTimeoutTcpOpening, pfsyncPktDiscardsForBadVersion=pfsyncPktDiscardsForBadVersion, pfCounters=pfCounters, pfTables=pfTables, pfStateInserts=pfStateInserts, pfTblAddrInPassBytes=pfTblAddrInPassBytes, pfCntStateMismatch=pfCntStateMismatch, pfLimitMaxTables=pfLimitMaxTables, pfDebug=pfDebug, pfLabelTable=pfLabelTable, pfSrcTracking=pfSrcTracking, pfStateCount=pfStateCount, pfTblAddrCleared=pfTblAddrCleared, pfHostid=pfHostid, pfsyncPktDiscardsForStaleState=pfsyncPktDiscardsForStaleState, pfCntTimestamp=pfCntTimestamp, pfTimeoutOtherMultiple=pfTimeoutOtherMultiple, pfLogIfIp6PktsOutPass=pfLogIfIp6PktsOutPass, pfLimits=pfLimits, pfLabelIndex=pfLabelIndex, pfLimitStates=pfLimitStates, pfTimeoutAdaptiveEnd=pfTimeoutAdaptiveEnd, pfIfOut6PassBytes=pfIfOut6PassBytes, pfLogInterface=pfLogInterface, pfTblAddrOutPassBytes=pfTblAddrOutPassBytes, pfIfIndex=pfIfIndex, pfTimeoutIcmpFirst=pfTimeoutIcmpFirst, pfsyncIp6PktsRecv=pfsyncIp6PktsRecv, pfTimeoutUdpMultiple=pfTimeoutUdpMultiple, pfIfOut4BlockPkts=pfIfOut4BlockPkts, pfTblNumber=pfTblNumber, pfCntTranslate=pfCntTranslate, pfLogIfIpBytesOut=pfLogIfIpBytesOut, pfIfIn4BlockBytes=pfIfIn4BlockBytes, pfTblOutXPassPkts=pfTblOutXPassPkts, pfTblOutMatchPkts=pfTblOutMatchPkts, pfTblStatsCleared=pfTblStatsCleared, pfLabelInPkts=pfLabelInPkts, pfCntStateInsert=pfCntStateInsert, pfTblIndex=pfTblIndex, pfTimeoutTcpFinWait=pfTimeoutTcpFinWait, pfTblAddrOutMatchPkts=pfTblAddrOutMatchPkts, pfTblAddresses=pfTblAddresses, pfLabelBytes=pfLabelBytes, pfSrcTrackSearches=pfSrcTrackSearches, pfTblOutMatchBytes=pfTblOutMatchBytes, pfTblAddrInBlockBytes=pfTblAddrInBlockBytes, pfLabelNumber=pfLabelNumber, pfsyncPktDiscardsForBadTtl=pfsyncPktDiscardsForBadTtl, pfTblAddrInMatchBytes=pfTblAddrInMatchBytes, pfsyncPktShorterThanHeader=pfsyncPktShorterThanHeader, pfCntNoRoute=pfCntNoRoute, pfLabelName=pfLabelName, pfIfIn4PassPkts=pfIfIn4PassPkts, pfsyncPktDiscardsForBadAuth=pfsyncPktDiscardsForBadAuth, pfsyncIpPktsSent=pfsyncIpPktsSent, pfsyncOutputErrors=pfsyncOutputErrors, pfIfType=pfIfType, pfCntCongestion=pfCntCongestion, pfSrcTrackRemovals=pfSrcTrackRemovals, pfTimeoutOtherSingle=pfTimeoutOtherSingle, pfIfRefs=pfIfRefs, pfTimeoutSrcTrack=pfTimeoutSrcTrack, pfTblAddrOutPassPkts=pfTblAddrOutPassPkts, pfTblAnchorRefs=pfTblAnchorRefs, pfTblOutXPassBytes=pfTblOutXPassBytes, pfTblAddrInPassPkts=pfTblAddrInPassPkts, pfIfIn6PassPkts=pfIfIn6PassPkts, pfStateSearches=pfStateSearches, pfLabelEvals=pfLabelEvals, pfLogIfIp6PktsInPass=pfLogIfIp6PktsInPass, pfLogIfIpPktsInDrop=pfLogIfIpPktsInDrop, pfCntFragment=pfCntFragment, pfTimeoutUdpSingle=pfTimeoutUdpSingle)
