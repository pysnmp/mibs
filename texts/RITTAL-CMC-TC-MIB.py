#
# PySNMP MIB module RITTAL-CMC-TC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/rittal/RITTAL-CMC-TC-MIB
# Produced by pysmi-1.1.12 at Mon Sep 16 15:00:23 2024
# On host fv-az1272-448 platform Linux version 6.5.0-1025-azure by user runner
# Using Python version 3.10.14 (main, Jul 16 2024, 19:03:10) [GCC 11.4.0]
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
sysDescr, sysName, sysContact, sysLocation = mibBuilder.importSymbols("SNMPv2-MIB", "sysDescr", "sysName", "sysContact", "sysLocation")
Unsigned32, TimeTicks, Gauge32, iso, enterprises, IpAddress, NotificationType, ModuleIdentity, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Integer32, ObjectIdentity, Counter64, MibIdentifier, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "TimeTicks", "Gauge32", "iso", "enterprises", "IpAddress", "NotificationType", "ModuleIdentity", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Integer32", "ObjectIdentity", "Counter64", "MibIdentifier", "Counter32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
rittal = MibIdentifier((1, 3, 6, 1, 4, 1, 2606))
cmcTc = MibIdentifier((1, 3, 6, 1, 4, 1, 2606, 4))
cmcTcMibRev = MibIdentifier((1, 3, 6, 1, 4, 1, 2606, 4, 1))
cmcTcStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 2606, 4, 2))
cmcTcStatusSensorUnit1 = MibIdentifier((1, 3, 6, 1, 4, 1, 2606, 4, 2, 3))
cmcTcStatusUnit1Sensors = MibIdentifier((1, 3, 6, 1, 4, 1, 2606, 4, 2, 3, 5))
cmcTcStatusUnit1Outputs = MibIdentifier((1, 3, 6, 1, 4, 1, 2606, 4, 2, 3, 6))
cmcTcStatusUnit1Msg = MibIdentifier((1, 3, 6, 1, 4, 1, 2606, 4, 2, 3, 7))
cmcTcStatusSensorUnit2 = MibIdentifier((1, 3, 6, 1, 4, 1, 2606, 4, 2, 4))
cmcTcStatusUnit2Sensors = MibIdentifier((1, 3, 6, 1, 4, 1, 2606, 4, 2, 4, 5))
cmcTcStatusUnit2Outputs = MibIdentifier((1, 3, 6, 1, 4, 1, 2606, 4, 2, 4, 6))
cmcTcStatusUnit2Msg = MibIdentifier((1, 3, 6, 1, 4, 1, 2606, 4, 2, 4, 7))
cmcTcStatusSensorUnit3 = MibIdentifier((1, 3, 6, 1, 4, 1, 2606, 4, 2, 5))
cmcTcStatusUnit3Sensors = MibIdentifier((1, 3, 6, 1, 4, 1, 2606, 4, 2, 5, 5))
cmcTcStatusUnit3Outputs = MibIdentifier((1, 3, 6, 1, 4, 1, 2606, 4, 2, 5, 6))
cmcTcStatusUnit3Msg = MibIdentifier((1, 3, 6, 1, 4, 1, 2606, 4, 2, 5, 7))
cmcTcStatusSensorUnit4 = MibIdentifier((1, 3, 6, 1, 4, 1, 2606, 4, 2, 6))
cmcTcStatusUnit4Sensors = MibIdentifier((1, 3, 6, 1, 4, 1, 2606, 4, 2, 6, 5))
cmcTcStatusUnit4Outputs = MibIdentifier((1, 3, 6, 1, 4, 1, 2606, 4, 2, 6, 6))
cmcTcStatusUnit4Msg = MibIdentifier((1, 3, 6, 1, 4, 1, 2606, 4, 2, 6, 7))
cmcTcStatusExtUnit = MibIdentifier((1, 3, 6, 1, 4, 1, 2606, 4, 2, 7))
cmcTcSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 2606, 4, 3))
cmcTcSetupGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 2606, 4, 3, 1))
cmcTcTimerTable1 = MibIdentifier((1, 3, 6, 1, 4, 1, 2606, 4, 3, 1, 8))
cmcTcTrapControl = MibIdentifier((1, 3, 6, 1, 4, 1, 2606, 4, 4))
cmcTcTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2606, 4, 4, 7))
cmcTcControl = MibIdentifier((1, 3, 6, 1, 4, 1, 2606, 4, 5))
cmcTcMibMajRev = MibScalar((1, 3, 6, 1, 4, 1, 2606, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcTcMibMajRev.setStatus('mandatory')
if mibBuilder.loadTexts: cmcTcMibMajRev.setDescription('The Major Revision level.\n               A change in the major revision level represents a major change\n               in the architecture of the MIB. A change in the major revision \n               level may indicate a significant change in the information,\n               correct interpretation of data may require a MIB document\n               with the same major revision level.')
cmcTcMibMinRev = MibScalar((1, 3, 6, 1, 4, 1, 2606, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcTcMibMinRev.setStatus('mandatory')
if mibBuilder.loadTexts: cmcTcMibMinRev.setDescription('The Minor Revision level.\n               A change in the minor revision level may represent some minor\n               additional support, no changes to any pre-existing information\n               has occurred.')
cmcTcMibCondition = MibScalar((1, 3, 6, 1, 4, 1, 2606, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4), ("configChanged", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcTcMibCondition.setStatus('mandatory')
if mibBuilder.loadTexts: cmcTcMibCondition.setDescription('The overall condition (status) of the system represented by\n               this MIB. \n               (2) OK\n               (3) a minor problem, warning condition (yellow LED on CMC)\n               (4) a major problem (red LED on CMC)\n               (5) configuration of sensor units changed or\n                   unit detected (red/yellow/green LED on CMC)')
cmcTcStatusDeviceCMC = MibScalar((1, 3, 6, 1, 4, 1, 2606, 4, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("failed", 1), ("ok", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcTcStatusDeviceCMC.setStatus('mandatory')
if mibBuilder.loadTexts: cmcTcStatusDeviceCMC.setDescription('General Status of CMC-TC unit itself\n              (1) failed\n              (2) OK')
cmcTcUnitsConnected = MibScalar((1, 3, 6, 1, 4, 1, 2606, 4, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcTcUnitsConnected.setStatus('mandatory')
if mibBuilder.loadTexts: cmcTcUnitsConnected.setDescription('Number of sensor units connected to the CMC, Port 1 to 4')
cmcTcUnit1TypeOfDevice = MibScalar((1, 3, 6, 1, 4, 1, 2606, 4, 2, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("notAvail", 1), ("unitIO", 2), ("unitAccess", 3), ("unitClimate", 4), ("unitFCS", 5), ("unitRTT", 6), ("unitRCT", 7), ("unitPSM", 8), ("unitPSM8", 9), ("unitPSMMetered", 10), ("unitIOWireless", 11), ("unitPSM6Schuko", 12), ("unitPSM6C19", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcTcUnit1TypeOfDevice.setStatus('mandatory')
if mibBuilder.loadTexts: cmcTcUnit1TypeOfDevice.setDescription('Type of sensor unit connected to port 1')
cmcTcUnit1Text = MibScalar((1, 3, 6, 1, 4, 1, 2606, 4, 2, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcTcUnit1Text.setStatus('mandatory')
if mibBuilder.loadTexts: cmcTcUnit1Text.setDescription('Descriptional text for sensor unit connected to port 1')
cmcTcUnit1Serial = MibScalar((1, 3, 6, 1, 4, 1, 2606, 4, 2, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcTcUnit1Serial.setStatus('mandatory')
if mibBuilder.loadTexts: cmcTcUnit1Serial.setDescription('Serialnumber of sensor unit connected to port 1')
cmcTcUnit1Status = MibScalar((1, 3, 6, 1, 4, 1, 2606, 4, 2, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("ok", 1), ("error", 2), ("changed", 3), ("quit", 4), ("timeout", 5), ("detected", 6), ("notAvail", 7), ("lowPower", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcTcUnit1Status.setStatus('mandatory')
if mibBuilder.loadTexts: cmcTcUnit1Status.setDescription('General Status sensor unit connected to port 1\n              (1) OK\n              (2) error, e. g. value overflow\n              (3) configuration of sensor unit has changed, confirmation required\n              (4) Quit from sensor unit to confirm configuration changes\n              (5) timeout of sensor unit, confirmation required to unload this unit\n              (6) sensor unit detected, needs to be confirmed\n              (7) unit is not available\n              (8) supply voltage is too low')
cmcTcUnit1NumberOfSensors = MibScalar((1, 3, 6, 1, 4, 1, 2606, 4, 2, 3, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcTcUnit1NumberOfSensors.setStatus('mandatory')
if mibBuilder.loadTexts: cmcTcUnit1NumberOfSensors.setDescription('Number of sensors connected to sensor unit 1')
cmcTcUnit1SensorTable = MibTable((1, 3, 6, 1, 4, 1, 2606, 4, 2, 3, 5, 2), )
if mibBuilder.loadTexts: cmcTcUnit1SensorTable.setStatus('mandatory')
if mibBuilder.loadTexts: cmcTcUnit1SensorTable.setDescription('Headline of sensor table')
cmcTcUnit1SensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2606, 4, 2, 3, 5, 2, 1), ).setIndexNames((0, "RITTAL-CMC-TC-MIB", "unit1SensorIndex"))
if mibBuilder.loadTexts: cmcTcUnit1SensorEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cmcTcUnit1SensorEntry.setDescription('Entries of sensor table')
unit1SensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 3, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: unit1SensorIndex.setStatus('mandatory')
if mibBuilder.loadTexts: unit1SensorIndex.setDescription('Index for the list of value entries. Its value ranges\n              between 1 and the value of cmcTcUnit1NumberOfSensors.')
unit1SensorType = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 3, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 100, 101, 102, 103, 104, 105, 106))).clone(namedValues=NamedValues(("notAvail", 1), ("failure", 2), ("overflow", 3), ("access", 4), ("vibration", 5), ("motion", 6), ("smoke", 7), ("airFlow", 8), ("type6", 9), ("temperature", 10), ("current4to20", 11), ("humidity", 12), ("userNO", 13), ("userNC", 14), ("lock", 15), ("unlock", 16), ("voltOK", 17), ("voltage", 18), ("fanOK", 19), ("readerKeypad", 20), ("dutyPWM", 21), ("fanStatus", 22), ("leakage", 23), ("warningRTT", 24), ("alarmRTT", 25), ("filterRTT", 26), ("heatflowRCT", 27), ("alarmRCT", 28), ("warningRCT", 29), ("currentPSM", 30), ("statusPSM", 31), ("positionPSM", 32), ("airFlap", 33), ("acoustic", 34), ("detACfault", 35), ("detACfirstAlarm", 36), ("detACmainAlarm", 37), ("rpm11LCP", 40), ("rpm12LCP", 41), ("rpm21LCP", 42), ("rpm22LCP", 43), ("rpm31LCP", 44), ("rpm32LCP", 45), ("rpm41LCP", 46), ("rpm42LCP", 47), ("airTemp11LCP", 48), ("airTemp12LCP", 49), ("airTemp21LCP", 50), ("airTemp22LCP", 51), ("airTemp31LCP", 52), ("airTemp32LCP", 53), ("airTemp41LCP", 54), ("airTemp42LCP", 55), ("temp1LCP", 56), ("temp2LCP", 57), ("waterInTemp", 58), ("waterOutTemp", 59), ("waterFlow", 60), ("fanSpeed", 61), ("valve", 62), ("statusLCP", 63), ("waterDelta", 64), ("valveActual", 65), ("contrTemp2", 66), ("condensateDuration", 67), ("condensateCycles", 68), ("totalKWhPSM", 72), ("totalKWPSM", 73), ("frequencyPSM", 74), ("voltagePSM", 75), ("voltStatusPSM", 76), ("amperePSM", 77), ("ampStatusPSM", 78), ("kWPSM", 79), ("kWhPSM", 80), ("kWhTempPSM", 81), ("temperatureWL", 100), ("temperature1WL", 101), ("humidityWL", 102), ("accessWL", 103), ("userNOWL", 104), ("userNCWL", 105), ("analogWL", 106)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: unit1SensorType.setStatus('mandatory')
if mibBuilder.loadTexts: unit1SensorType.setDescription('Type of sensor which is connected to sensor unit 1 to sensor[unit1SensorIndex]\n              1:        no sensor connected\n              2:        sensor failure\n              3:        value overflow\n              4:        sensor type 1, access sensor\n              5:        sensor type 2, vibration sensor\n              6:        sensor type 3, motion sensor\n              7:        sensor type 4, smoke sensor\n              8:        sensor type 5, air flow sensor\n              9:        sensor type 6, reserved\n              10:       sensor type 7, temperature sensor\n              11:       sensor type 8, 4..20mA sensor\n              12:       sensor type 9, humidity sensor  \n              13:       user sensor with normally opened contact\n              14:       user sensor with normally closed contact\n              15:       door locked sensor from locking device\n              16:       remote unlock sensor (e.g. external keypad)\n              17:       voltage sensor, indicates status of main voltage (OK, NOK)\n              18:\tvoltage value\n              19:\tfan status, from CMC-TC-FAS-Unit\n              20:       cardreader or keypad, connected to I2C port\n              21:\tduty cycle of fan, FCS-Unit\n              22:\tstatus of fan, FCS-Unit\n              23:\tleakage sensor\n              24:\twarning, RittalTopTherm(RTT)-Unit\n              25:\talarm, RittalTopTherm-Unit\n              26:\ttemperature difference filter monitor, RTT-Unit\n              27:\theatflow RCT-Unit\n              28:\talarm RCT-Unit\n              29:\twarning RCT-Unit\n              30:\tactual current*10, PSM-Unit\n              31:\tstatus PSM-Unit\n              32:\tposition PSM-Unit, normal/reversed = circuit 1/2\n              33:\tair Flap\n              34:\tacoustic sensor\n              35:\tDET-AC fault (extinguisher)\n              36:\tDET-AC first alarm (extinguisher)\n              37:\tDET-AC main alarm (extinguisher)\n              40-47:\tRPM Fan 1.1 - Fan 4.2, LCP\n              48-55:\tAir temperature 1.1 - 4.2, LCP\n              56,57:\tactual temperature 1,2, LCP\n              58:\twater inlet temperature, LCP\n              59:\twater outlet temperature, LCP\n              60:\twater flow\n              61:\tfan speed (desired value)\n              62:\tstatus valve, LCP\n              63:\tstatus LCP\n              64:\ttemperature difference water temperatures\n              65:\tcontrol temperature 1, LCP\n              66:\tcontrol temperature 2, LCP\n              67:\tcondensate pump, duration, LCP\n              68:\tcondensate pump, cycles, LCP\n              72:\ttotal energy*10 (kWh), PSM\n              73:\ttotal power*10 (kW), PSM\n              74:\tfrequency*10 (Hz), PSM\n              75:\tvoltage*10 (V), PSM\n              76:\tvoltage status, PSM\n              77:\tcurrent*10 (A), PSM\n              78:\tcurrent status, PSM\n              79:\tpower*10 (kW) per phase, PSM\n              80:\tenergy*10 (kWh) per phase, PSM\n              81:\ttemporary energy*10 (kWh) per phase, PSM \n\t     100:\ttemperature sensor, wireless\n\t     101:\ttemperature sensor (combi), wireless\n\t     102:\thumidity sensor, wireless\n\t     103:\taccess sensor, wireless\n\t     104:\tuser sensor with normally opened contact, wireless\n\t     105:\tuser sensor with normally closed contact, wireless\n\t     106:\tanalog sensor 4..20mA, wireless')
unit1SensorText = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 3, 5, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit1SensorText.setStatus('mandatory')
if mibBuilder.loadTexts: unit1SensorText.setDescription('Descriptional text for each sensor (entry in the table)')
unit1SensorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 3, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("notAvail", 1), ("lost", 2), ("changed", 3), ("ok", 4), ("off", 5), ("on", 6), ("warning", 7), ("tooLow", 8), ("tooHigh", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: unit1SensorStatus.setStatus('mandatory')
if mibBuilder.loadTexts: unit1SensorStatus.setDescription('Actual status of the sensor')
unit1SensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 3, 5, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unit1SensorValue.setStatus('mandatory')
if mibBuilder.loadTexts: unit1SensorValue.setDescription('Value of sensor')
unit1SensorSetHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 3, 5, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit1SensorSetHigh.setStatus('mandatory')
if mibBuilder.loadTexts: unit1SensorSetHigh.setDescription('Value for high setpoint of sensor')
unit1SensorSetLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 3, 5, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit1SensorSetLow.setStatus('mandatory')
if mibBuilder.loadTexts: unit1SensorSetLow.setDescription('Value for low setpoint of sensor,\n              also used as alarm delay')
unit1SensorSetWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 3, 5, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit1SensorSetWarn.setStatus('mandatory')
if mibBuilder.loadTexts: unit1SensorSetWarn.setDescription('Value for warning setpoint of sensor, \n             also used as fan threshold')
cmcTcUnit1NumberOfOutputs = MibScalar((1, 3, 6, 1, 4, 1, 2606, 4, 2, 3, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcTcUnit1NumberOfOutputs.setStatus('mandatory')
if mibBuilder.loadTexts: cmcTcUnit1NumberOfOutputs.setDescription('Number of outputs available on sensor unit 1')
cmcTcUnit1OutputTable = MibTable((1, 3, 6, 1, 4, 1, 2606, 4, 2, 3, 6, 2), )
if mibBuilder.loadTexts: cmcTcUnit1OutputTable.setStatus('mandatory')
if mibBuilder.loadTexts: cmcTcUnit1OutputTable.setDescription('Headline of output table')
cmcTcUnit1OutputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2606, 4, 2, 3, 6, 2, 1), ).setIndexNames((0, "RITTAL-CMC-TC-MIB", "unit1OutputIndex"))
if mibBuilder.loadTexts: cmcTcUnit1OutputEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cmcTcUnit1OutputEntry.setDescription('Entries of output table')
unit1OutputIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 3, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: unit1OutputIndex.setStatus('mandatory')
if mibBuilder.loadTexts: unit1OutputIndex.setDescription('Index for the list of output entries. Its value ranges\n              between 1 and the value of cmcTcUnit1NumberOfOutputs.')
unit1OutputType = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 3, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46))).clone(namedValues=NamedValues(("notAvail", 1), ("failure", 2), ("overflow", 3), ("doorLock", 4), ("univLock1", 5), ("univLock2", 6), ("fan", 7), ("fanSpeedContr", 8), ("universalOut", 9), ("roomLock", 10), ("powerOut", 11), ("doorLockMaster", 12), ("doorLockFRi", 13), ("setpoint", 14), ("setpointTimax", 15), ("hysteresisRCT", 16), ("commandRCT", 17), ("relayPSM", 18), ("setHighPSM", 19), ("setLowPSM", 20), ("setpointRTT", 21), ("setTimaxRTT", 22), ("powerOut1", 23), ("controlModeLCP", 30), ("minFanSpeedLCP", 31), ("minDeltaTLCP", 32), ("maxDeltaTLCP", 33), ("kPLCP", 34), ("kILCP", 35), ("kDLCP", 36), ("flowRateLCP", 37), ("cwValueLCP", 38), ("deltaTLCP", 39), ("ctrModLCP", 40), ("voltHighPSM", 42), ("voltLowPSM", 43), ("ampHighPSM", 44), ("ampLowPSM", 45), ("commandPSM", 46)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: unit1OutputType.setStatus('mandatory')
if mibBuilder.loadTexts: unit1OutputType.setDescription('Type of output which is connected to sensor unit 1 to output[unit1OutputIndex]\n              1:        no output connected\n              2:        output failure\n              3:        value overflow\n              4:        output type 1, door locking TS8,Ergoform\n              5:        output type 2, universal lock 1, lock with power\n              6:        output type 3, universal lock 2, unlock with power\n              7:        output type 4, fan relay\n              8:        output type 5, fan controlled\n              9:        output type 6, universal relay output\n              10:       output type 7, room door lock \n              11:       output type 8, power output\n              12:       output type 9, door lock with Master key\n              13:       output type 10, door lock FR(i)\n              14:\tsetpoint (FCS, LCP)\n              15:\tsetpoint temperature monitoring (LCP)\n              16:\thysteresis of setpoint (LCP)\n              17:\tcommand for remote control of RCT\n              18:\trelay PSM, 1=On, 0=Off\n              19:\thigh setpoint current monitoring PSM\n              20:\tlow setpoint current monitoring PSM\n              21:\tsetpoint temperature RTT\n              22:\tsetpoint temperature monitoring RTT\n              23:\tpower output 20A\n              30:\tcontrol mode, LCP\n              31:\tmin fan speed (fan control), LCP\n              32:\tmin delta T (fan control), LCP\n              33:\tmax delta T (fan control), LCP\n              34:\tPID controller, KP, LCP\n              35:\tPID controller, KI, LCP\n              36\tPID controller, KD, LCP\n              37\tflowrate flowmeter, LCP\n              38:\tcw value of water (default: 4187), LCP\n              39:\tdeltaT, LCP\n              40:\tcontrol mode, LCP\n              42:\tsetpoint high voltage PSM\n              43:\tsetpoint low voltage PSM\n              44:\tsetpoint high current PSM\n              45:\tsetpoint low current PSM\n              46:\tcommand PSM')
unit1OutputText = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 3, 6, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit1OutputText.setStatus('mandatory')
if mibBuilder.loadTexts: unit1OutputText.setDescription('Descriptional text for each output (entry in the table)')
unit1OutputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 3, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("notAvail", 1), ("lost", 2), ("changed", 3), ("ok", 4), ("off", 5), ("on", 6), ("setOff", 7), ("setOn", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit1OutputStatus.setStatus('mandatory')
if mibBuilder.loadTexts: unit1OutputStatus.setDescription('Actual status of the output')
unit1OutputValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 3, 6, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit1OutputValue.setStatus('mandatory')
if mibBuilder.loadTexts: unit1OutputValue.setDescription('Value for output')
unit1OutputSet = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 3, 6, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("lock", 3), ("unlock", 4), ("unlockDelay", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit1OutputSet.setStatus('mandatory')
if mibBuilder.loadTexts: unit1OutputSet.setDescription('Command for output')
unit1OutputConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 3, 6, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disRemote", 1), ("enRemote", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit1OutputConfig.setStatus('mandatory')
if mibBuilder.loadTexts: unit1OutputConfig.setDescription('Configuration for output\n             1: \tdisable remote control (e.g. keypad)\n             2: \tenable remote control ')
unit1OutputDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 3, 6, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit1OutputDelay.setStatus('mandatory')
if mibBuilder.loadTexts: unit1OutputDelay.setDescription('Unsigned Value for delay, \n             after this time the output will fall into the previous state')
unit1OutputTimeoutAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 3, 6, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("stay", 1), ("off", 2), ("on", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit1OutputTimeoutAction.setStatus('mandatory')
if mibBuilder.loadTexts: unit1OutputTimeoutAction.setDescription('State for output if timeout (RS422) occurs')
cmcTcUnit1NumberOfMsgs = MibScalar((1, 3, 6, 1, 4, 1, 2606, 4, 2, 3, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcTcUnit1NumberOfMsgs.setStatus('mandatory')
if mibBuilder.loadTexts: cmcTcUnit1NumberOfMsgs.setDescription('Number of messages that can be created with sensor unit 1')
cmcTcUnit1MsgTable = MibTable((1, 3, 6, 1, 4, 1, 2606, 4, 2, 3, 7, 2), )
if mibBuilder.loadTexts: cmcTcUnit1MsgTable.setStatus('mandatory')
if mibBuilder.loadTexts: cmcTcUnit1MsgTable.setDescription('Headline of message table')
cmcTcUnit1MsgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2606, 4, 2, 3, 7, 2, 1), ).setIndexNames((0, "RITTAL-CMC-TC-MIB", "unit1MsgIndex"))
if mibBuilder.loadTexts: cmcTcUnit1MsgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cmcTcUnit1MsgEntry.setDescription('Entries of message table')
unit1MsgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 3, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: unit1MsgIndex.setStatus('mandatory')
if mibBuilder.loadTexts: unit1MsgIndex.setDescription('Index for the list of message entries. Its value ranges\n              between 1 and the value of cmcTcUnit1NumberOfMsgs.')
unit1MsgText = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 3, 7, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit1MsgText.setStatus('mandatory')
if mibBuilder.loadTexts: unit1MsgText.setDescription('Descriptional text for each message (entry in the table)')
unit1MsgStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 3, 7, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22))).clone(namedValues=NamedValues(("notAvail", 1), ("configChanged", 2), ("error", 3), ("ok", 4), ("alarm", 5), ("warning", 6), ("tooLow", 7), ("tooHigh", 8), ("setOff", 9), ("setOn", 10), ("open", 11), ("closed", 12), ("locked", 13), ("unlRemote", 14), ("unlReaderKeypad", 15), ("unlSNMP", 16), ("unlWEB", 17), ("unlTimer", 18), ("noAccess", 19), ("circuit1", 20), ("circuit2", 21), ("lowBatt", 22)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: unit1MsgStatus.setStatus('mandatory')
if mibBuilder.loadTexts: unit1MsgStatus.setDescription('Actual message status\n             1: not available\n             2: configuration has changed (sensor new, changed, lost)\n             3: error\n             4: OK\n             5: alarm, e.g. smoke, vibration...\n             6: warning of analog value, value reached warning threshold\n             7: analog value too low, value reached low threshold\n             8: analog value too high, value reached high threshold\n             9: output is set to OFF\n             10: output is set to ON\n             11: door is open\n             12: door is closed\n             13: door is locked\n             14: door is unlocked by remote input, e.g. external cardreader\n             15: door is unlocked by reader or keypad connected to I2C\n             16: door is unlocked by SNMP set command (unit1OutputSet)\n             17: door is unlocked by WEB\n             18: door is unlocked by timer\n             19: no access, wrong keycode or cardnumber\n             20: orientation of PSM-Unit is circuit 1\n             21: orientation of PSM-Unit is circuit 2\n             22: battery low, wireless sensor')
unit1MsgRelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 3, 7, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit1MsgRelay.setStatus('mandatory')
if mibBuilder.loadTexts: unit1MsgRelay.setDescription('Setup of Alarm relay for this message/alarm\n              1:        no switching of alarm relay             \n              2:        switching of alarm relay')
unit1MsgBeeper = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 3, 7, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit1MsgBeeper.setStatus('mandatory')
if mibBuilder.loadTexts: unit1MsgBeeper.setDescription('Setup of Alarm beeper for this alarm\n              1:        no audible alarm\n              2:        audible alarm')
unit1MsgTrap1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 3, 7, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit1MsgTrap1.setStatus('mandatory')
if mibBuilder.loadTexts: unit1MsgTrap1.setDescription('Trap receiver 1 activated')
unit1MsgTrap2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 3, 7, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit1MsgTrap2.setStatus('mandatory')
if mibBuilder.loadTexts: unit1MsgTrap2.setDescription('Trap receiver 2 activated')
unit1MsgTrap3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 3, 7, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit1MsgTrap3.setStatus('mandatory')
if mibBuilder.loadTexts: unit1MsgTrap3.setDescription('Trap receiver 3 activated')
unit1MsgTrap4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 3, 7, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit1MsgTrap4.setStatus('mandatory')
if mibBuilder.loadTexts: unit1MsgTrap4.setDescription('Trap receiver 4 and Event Logging activated')
unit1MsgQuit = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 3, 7, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("auto", 1), ("manual", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit1MsgQuit.setStatus('mandatory')
if mibBuilder.loadTexts: unit1MsgQuit.setDescription("Reset of this alarm\n             1:\t\tauto\n             2:\t\tmanual, alarm needs confirmation, e. g. with 'C' key")
cmcTcUnit2TypeOfDevice = MibScalar((1, 3, 6, 1, 4, 1, 2606, 4, 2, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("notAvail", 1), ("unitIO", 2), ("unitAccess", 3), ("unitClimate", 4), ("unitFCS", 5), ("unitRTT", 6), ("unitRCT", 7), ("unitPSM", 8), ("unitPSM8", 9), ("unitPSMMetered", 10), ("unitIOWireless", 11), ("unitPSM6Schuko", 12), ("unitPSM6C19", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcTcUnit2TypeOfDevice.setStatus('mandatory')
if mibBuilder.loadTexts: cmcTcUnit2TypeOfDevice.setDescription('Type of sensor unit connected to port 2')
cmcTcUnit2Text = MibScalar((1, 3, 6, 1, 4, 1, 2606, 4, 2, 4, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcTcUnit2Text.setStatus('mandatory')
if mibBuilder.loadTexts: cmcTcUnit2Text.setDescription('Descriptional text for sensor unit connected to port 2')
cmcTcUnit2Serial = MibScalar((1, 3, 6, 1, 4, 1, 2606, 4, 2, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcTcUnit2Serial.setStatus('mandatory')
if mibBuilder.loadTexts: cmcTcUnit2Serial.setDescription('Serialnumber of sensor unit connected to port 2')
cmcTcUnit2Status = MibScalar((1, 3, 6, 1, 4, 1, 2606, 4, 2, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("ok", 1), ("error", 2), ("changed", 3), ("quit", 4), ("timeout", 5), ("detected", 6), ("notAvail", 7), ("lowPower", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcTcUnit2Status.setStatus('mandatory')
if mibBuilder.loadTexts: cmcTcUnit2Status.setDescription('General Status sensor unit connected to port 2\n              (1) OK\n              (2) error\n              (3) configuration of sensor unit has changed, confirmation required\n              (4) Quit from sensor unit to confirm configuration changes\n              (5) timeout of sensor unit, confirmation required\n              (6) sensor unit detected, needs to be confirmed\n              (8) supply voltage is too low')
cmcTcUnit2NumberOfSensors = MibScalar((1, 3, 6, 1, 4, 1, 2606, 4, 2, 4, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcTcUnit2NumberOfSensors.setStatus('mandatory')
if mibBuilder.loadTexts: cmcTcUnit2NumberOfSensors.setDescription('Number of sensors connected to sensor unit 2')
cmcTcUnit2SensorTable = MibTable((1, 3, 6, 1, 4, 1, 2606, 4, 2, 4, 5, 2), )
if mibBuilder.loadTexts: cmcTcUnit2SensorTable.setStatus('mandatory')
if mibBuilder.loadTexts: cmcTcUnit2SensorTable.setDescription('Headline of sensor table')
cmcTcUnit2SensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2606, 4, 2, 4, 5, 2, 1), ).setIndexNames((0, "RITTAL-CMC-TC-MIB", "unit2SensorIndex"))
if mibBuilder.loadTexts: cmcTcUnit2SensorEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cmcTcUnit2SensorEntry.setDescription('Entries of sensor table')
unit2SensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 4, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: unit2SensorIndex.setStatus('mandatory')
if mibBuilder.loadTexts: unit2SensorIndex.setDescription('Index for the list of value entries. Its value ranges\n              between 1 and the value of cmcTcUnit2NumberOfSensors.')
unit2SensorType = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 4, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 34, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 100, 101, 102, 103, 104, 105, 106))).clone(namedValues=NamedValues(("notAvail", 1), ("failure", 2), ("overflow", 3), ("access", 4), ("vibration", 5), ("motion", 6), ("smoke", 7), ("airFlow", 8), ("type6", 9), ("temperature", 10), ("current4to20", 11), ("humidity", 12), ("userNO", 13), ("userNC", 14), ("lock", 15), ("unlock", 16), ("voltOK", 17), ("voltage", 18), ("fanOK", 19), ("readerKeypad", 20), ("dutyPWM", 21), ("fanStatus", 22), ("leakage", 23), ("warningRTT", 24), ("alarmRTT", 25), ("filterRTT", 26), ("heatflowRCT", 27), ("alarmRCT", 28), ("warningRCT", 29), ("currentPSM", 30), ("statusPSM", 31), ("positionPSM", 32), ("airFlap", 33), ("detACfault", 35), ("detACfirstAlarm", 36), ("detACmainAlarm", 37), ("acoustic", 34), ("rpm11LCP", 40), ("rpm12LCP", 41), ("rpm21LCP", 42), ("rpm22LCP", 43), ("rpm31LCP", 44), ("rpm32LCP", 45), ("rpm41LCP", 46), ("rpm42LCP", 47), ("airTemp11LCP", 48), ("airTemp12LCP", 49), ("airTemp21LCP", 50), ("airTemp22LCP", 51), ("airTemp31LCP", 52), ("airTemp32LCP", 53), ("airTemp41LCP", 54), ("airTemp42LCP", 55), ("temp1LCP", 56), ("temp2LCP", 57), ("waterInTemp", 58), ("waterOutTemp", 59), ("waterFlow", 60), ("fanSpeed", 61), ("valve", 62), ("statusLCP", 63), ("waterDelta", 64), ("valveActual", 65), ("contrTemp2", 66), ("condensateDuration", 67), ("condensateCycles", 68), ("totalKWhPSM", 72), ("totalKWPSM", 73), ("frequencyPSM", 74), ("voltagePSM", 75), ("voltStatusPSM", 76), ("amperePSM", 77), ("ampStatusPSM", 78), ("kWPSM", 79), ("kWhPSM", 80), ("kWhTempPSM", 81), ("temperatureWL", 100), ("temperature1WL", 101), ("humidityWL", 102), ("accessWL", 103), ("userNOWL", 104), ("userNCWL", 105), ("analogWL", 106)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: unit2SensorType.setStatus('mandatory')
if mibBuilder.loadTexts: unit2SensorType.setDescription('Type of sensor which is connected to sensor unit 2 to sensor[unit2SensorIndex]\n              1:        no sensor connected\n              2:        sensor failure\n              3:        value overflow\n              4:        sensor type 1, access sensor\n              5:        sensor type 2, vibration sensor\n              6:        sensor type 3, motion sensor\n              7:        sensor type 4, smoke sensor\n              8:        sensor type 5, air flow sensor\n              9:        sensor type 6, reserved\n              10:       sensor type 7, temperature sensor\n              11:       sensor type 8, 4..20mA sensor\n              12:       sensor type 9, humidity sensor  \n              13:       user sensor with normally opened contact\n              14:       user sensor with normally closed contact\n              15:       door locked sensor from locking device\n              16:       remote unlock sensor (e.g. external keypad)\n              17:       voltage sensor, indicates status of main voltage\n              18:\tvoltage value\n              19:\tfan status\n              20:       cardreader or keypad, connected to I2C port              \n              21:\tduty cycle of fan, FCS-Unit\n              22:\tstatus of fan, FCS-Unit\n              23:\tleakage sensor\n              24:\twarning, RittalTopTherm(RTT)-Unit\n              25:\talarm, RittalTopTherm-Unit\n              26:\ttemperature difference filter monitor, RTT-Unit\n              27:\theatflow RCT-Unit\n              28:\talarm RCT-Unit\n              29:\twarning RCT-Unit\n              30:\tactual current*10, PSM-Unit\n              31:\tstatus PSM-Unit\n              32:\tposition PSM-Unit, normal/reversed = circuit 1/2\n              33:\tair Flap\n              34:\tacoustic sensor\n              35:\tDET-AC fault (extinguisher)\n              36:\tDET-AC first alarm (extinguisher)\n              37:\tDET-AC main alarm (extinguisher)\n              40-47:\tRPM Fan 1.1 - Fan 4.2, LCP\n              48-55:\tAir temperature 1.1 - 4.2, LCP\n              56,57:\tactual temperature 1,2, LCP\n              58:\twater inlet temperature, LCP\n              59:\twater outlet temperature, LCP\n              60:\twater flow\n              61:\tfan speed (desired value)\n              62:\tstatus valve, LCP\n              63:\tstatus LCP\n              64:\ttemperature difference water temperatures\n              65:\tcontrol temperature 1, LCP\n              66:\tcontrol temperature 2, LCP\n              67:\tcondensate pump, duration, LCP\n              68:\tcondensate pump, cycles, LCP\n              72:\ttotal energy*10 (kWh), PSM\n              73:\ttotal power*10 (kW), PSM\n              74:\tfrequency*10 (Hz), PSM\n              75:\tvoltage*10 (V), PSM\n              76:\tvoltage status, PSM\n              77:\tcurrent*10 (A), PSM\n              78:\tcurrent status, PSM\n              79:\tpower*10 (kW) per phase, PSM\n              80:\tenergy*10 (kWh) per phase, PSM\n              81:\ttemporary energy*10 (kWh) per phase, PSM              \n\t     100:\ttemperature sensor, wireless\n\t     101:\ttemperature sensor (combi), wireless\n\t     102:\thumidity sensor, wireless\n\t     103:\taccess sensor, wireless\n\t     104:\tuser sensor with normally opened contact, wireless\n\t     105:\tuser sensor with normally closed contact, wireless\n\t     106:\tanalog sensor 4..20mA, wireless')
unit2SensorText = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 4, 5, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit2SensorText.setStatus('mandatory')
if mibBuilder.loadTexts: unit2SensorText.setDescription('Descriptional text for each sensor (entry in the table)')
unit2SensorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 4, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("notAvail", 1), ("lost", 2), ("changed", 3), ("ok", 4), ("off", 5), ("on", 6), ("warning", 7), ("tooLow", 8), ("tooHigh", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: unit2SensorStatus.setStatus('mandatory')
if mibBuilder.loadTexts: unit2SensorStatus.setDescription('Actual status of the sensor')
unit2SensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 4, 5, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unit2SensorValue.setStatus('mandatory')
if mibBuilder.loadTexts: unit2SensorValue.setDescription('Value of sensor')
unit2SensorSetHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 4, 5, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit2SensorSetHigh.setStatus('mandatory')
if mibBuilder.loadTexts: unit2SensorSetHigh.setDescription('Value for high setpoint of sensor')
unit2SensorSetLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 4, 5, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit2SensorSetLow.setStatus('mandatory')
if mibBuilder.loadTexts: unit2SensorSetLow.setDescription('Value for low setpoint of sensor,\n              also used as alarm delay')
unit2SensorSetWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 4, 5, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit2SensorSetWarn.setStatus('mandatory')
if mibBuilder.loadTexts: unit2SensorSetWarn.setDescription('Value for warning setpoint of sensor,\n              also used as fan threshold')
cmcTcUnit2NumberOfOutputs = MibScalar((1, 3, 6, 1, 4, 1, 2606, 4, 2, 4, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcTcUnit2NumberOfOutputs.setStatus('mandatory')
if mibBuilder.loadTexts: cmcTcUnit2NumberOfOutputs.setDescription('Number of outputs available on sensor unit 2')
cmcTcUnit2OutputTable = MibTable((1, 3, 6, 1, 4, 1, 2606, 4, 2, 4, 6, 2), )
if mibBuilder.loadTexts: cmcTcUnit2OutputTable.setStatus('mandatory')
if mibBuilder.loadTexts: cmcTcUnit2OutputTable.setDescription('Headline of output table')
cmcTcUnit2OutputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2606, 4, 2, 4, 6, 2, 1), ).setIndexNames((0, "RITTAL-CMC-TC-MIB", "unit2OutputIndex"))
if mibBuilder.loadTexts: cmcTcUnit2OutputEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cmcTcUnit2OutputEntry.setDescription('Entries of output table')
unit2OutputIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 4, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: unit2OutputIndex.setStatus('mandatory')
if mibBuilder.loadTexts: unit2OutputIndex.setDescription('Index for the list of output entries. Its value ranges\n               between 1 and the value of cmcTcUnit2NumberOfOutputs.')
unit2OutputType = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 4, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46))).clone(namedValues=NamedValues(("notAvail", 1), ("failure", 2), ("overflow", 3), ("doorLock", 4), ("univLock1", 5), ("univLock2", 6), ("fan", 7), ("fanSpeedContr", 8), ("universalOut", 9), ("roomLock", 10), ("powerOut", 11), ("doorLockMaster", 12), ("doorLockFRi", 13), ("setpoint", 14), ("setpointTimax", 15), ("hysteresisRCT", 16), ("commandRCT", 17), ("relayPSM", 18), ("setHighPSM", 19), ("setLowPSM", 20), ("setpointRTT", 21), ("setTimaxRTT", 22), ("powerOut1", 23), ("controlModeLCP", 30), ("minFanSpeedLCP", 31), ("minDeltaTLCP", 32), ("maxDeltaTLCP", 33), ("kPLCP", 34), ("kILCP", 35), ("kDLCP", 36), ("flowRateLCP", 37), ("cwValueLCP", 38), ("deltaTLCP", 39), ("ctrModLCP", 40), ("voltHighPSM", 42), ("voltLowPSM", 43), ("ampHighPSM", 44), ("ampLowPSM", 45), ("commandPSM", 46)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: unit2OutputType.setStatus('mandatory')
if mibBuilder.loadTexts: unit2OutputType.setDescription('Type of output which is connected to sensor unit 2 to output[unit2OutputIndex]\n              1:        no output connected\n              2:        output failure                         \n              3:        value overflow\n              4:        output type 1, door locking TS8,Ergoform\n              5:        output type 2, universal lock 1, lock with power\n              6:        output type 3, universal lock 2, unlock with power\n              7:        output type 4, fan relay\n              8:        output type 5, fan controlled\n              9:        output type 6, universal relay output\n              10:       output type 7, room door lock \n              11:       output type 8, power output\n              12:       output type 9, door lock with Master key\n              13:       output type 10, door lock FR(i)\n              14:\tsetpoint (FCS, RTT)\n              15:\tsetpoint temperature monitoring (RTT)\n              16:\thysteresis of setpoint (RCT)\n              17:\tcommand for remote control of RCT\n              18:\trelay PSM, 1=On, 0=Off\n              19:\thigh setpoint current monitoring PSM\n              20:\tlow setpoint current monitoring PSM\n              21:\tsetpoint temperature RTT\n              22:\tsetpoint temperature monitoring RTT\n              23:\tpower output 20A\n              30:\tcontrol mode LCP\n              31:\tmin fan speed (fan control) LCP\n              32:\tmin delta T (fan control) LCP\n              33:\tmax delta T (fan control) LCP\n              34:\tPID controller, KP, LCP\n              35:\tPID controller, KI, LCP\n              36\tPID controller, KD, LCP\n              37\tflowrate flowmeter, LCP\n              38:\tcw value of water (default: 4187) LCP\n              39:\tdeltaT, LCP\n              40:\tcontrol mode, LCP\n              42:\tsetpoint high voltage PSM\n              43:\tsetpoint low voltage PSM\n              44:\tsetpoint high current PSM\n              45:\tsetpoint low current PSM\n              46:\tcommand PSM')
unit2OutputText = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 4, 6, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit2OutputText.setStatus('mandatory')
if mibBuilder.loadTexts: unit2OutputText.setDescription('Descriptional text for each output (entry in the table)')
unit2OutputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 4, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("notAvail", 1), ("lost", 2), ("changed", 3), ("ok", 4), ("off", 5), ("on", 6), ("setOff", 7), ("setOn", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit2OutputStatus.setStatus('mandatory')
if mibBuilder.loadTexts: unit2OutputStatus.setDescription('Actual status of the output')
unit2OutputValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 4, 6, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit2OutputValue.setStatus('mandatory')
if mibBuilder.loadTexts: unit2OutputValue.setDescription('Signed value for output')
unit2OutputSet = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 4, 6, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("lock", 3), ("unlock", 4), ("unlockDelay", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit2OutputSet.setStatus('mandatory')
if mibBuilder.loadTexts: unit2OutputSet.setDescription('Command for output')
unit2OutputConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 4, 6, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disRemote", 1), ("enRemote", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit2OutputConfig.setStatus('mandatory')
if mibBuilder.loadTexts: unit2OutputConfig.setDescription('Configuration for output\n             1: \tdisable remote control (e.g. keypad)\n             2: \tenable remote control ')
unit2OutputDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 4, 6, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit2OutputDelay.setStatus('mandatory')
if mibBuilder.loadTexts: unit2OutputDelay.setDescription('Unsigned Value for delay, \n             after this time the output will fall into the previous state')
unit2OutputTimeoutAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 4, 6, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("stay", 1), ("off", 2), ("on", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit2OutputTimeoutAction.setStatus('mandatory')
if mibBuilder.loadTexts: unit2OutputTimeoutAction.setDescription('State for output if timeout (RS422) occurs')
cmcTcUnit2NumberOfMsgs = MibScalar((1, 3, 6, 1, 4, 1, 2606, 4, 2, 4, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcTcUnit2NumberOfMsgs.setStatus('mandatory')
if mibBuilder.loadTexts: cmcTcUnit2NumberOfMsgs.setDescription('Number of alarms that can be created with sensor unit 2')
cmcTcUnit2MsgTable = MibTable((1, 3, 6, 1, 4, 1, 2606, 4, 2, 4, 7, 2), )
if mibBuilder.loadTexts: cmcTcUnit2MsgTable.setStatus('mandatory')
if mibBuilder.loadTexts: cmcTcUnit2MsgTable.setDescription('Headline of message table')
cmcTcUnit2MsgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2606, 4, 2, 4, 7, 2, 1), ).setIndexNames((0, "RITTAL-CMC-TC-MIB", "unit2MsgIndex"))
if mibBuilder.loadTexts: cmcTcUnit2MsgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cmcTcUnit2MsgEntry.setDescription('Entries of message table')
unit2MsgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 4, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: unit2MsgIndex.setStatus('mandatory')
if mibBuilder.loadTexts: unit2MsgIndex.setDescription('Index for the list of alarm entries. Its value ranges\n              between 1 and the value of cmcTcUnit2NumberOfMsgs.')
unit2MsgText = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 4, 7, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit2MsgText.setStatus('mandatory')
if mibBuilder.loadTexts: unit2MsgText.setDescription('Descriptional text for each message (entry in the table)')
unit2MsgStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 4, 7, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22))).clone(namedValues=NamedValues(("notAvail", 1), ("configChanged", 2), ("error", 3), ("ok", 4), ("alarm", 5), ("warning", 6), ("tooLow", 7), ("tooHigh", 8), ("setOff", 9), ("setOn", 10), ("open", 11), ("closed", 12), ("locked", 13), ("unlRemote", 14), ("unlReaderKeypad", 15), ("unlSNMP", 16), ("unlWEB", 17), ("unlTimer", 18), ("noAccess", 19), ("circuit1", 20), ("circuit2", 21), ("lowBatt", 22)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: unit2MsgStatus.setStatus('mandatory')
if mibBuilder.loadTexts: unit2MsgStatus.setDescription('Actual message status\n             1: not available\n             2: configuration has changed (sensor new, changed, lost)\n             3: error\n             4: OK\n             5: alarm, e.g. smoke, vibration...\n             6: warning of analog value, value reached warning threshold\n             7: analog value too low, value reached low threshold\n             8: analog value too high, value reached high threshold\n             9: output is set to OFF\n             10: output is set to ON\n             11: door is open\n             12: door is closed\n             13: door is locked\n             14: door is unlocked by remote input, e.g. external cardreader\n             15: door is unlocked by reader or keypad connected to I2C\n             16: door is unlocked by SNMP set command (unit1OutputSet)\n             17: door is unlocked by WEB\n             18: door is unlocked by timer\n             19: no access, wrong keycode or cardnumber\n             20: orientation of PSM-Unit is circuit 1\n             21: orientation of PSM-Unit is circuit 2\n             22: battery low, wireless sensor')
unit2MsgRelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 4, 7, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit2MsgRelay.setStatus('mandatory')
if mibBuilder.loadTexts: unit2MsgRelay.setDescription('Setup of Alarm relay for this alarm\n              2:        no switching of alarm relay             \n              1:        switching of alarm relay')
unit2MsgBeeper = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 4, 7, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit2MsgBeeper.setStatus('mandatory')
if mibBuilder.loadTexts: unit2MsgBeeper.setDescription('Setup of Alarm beeper for this alarm\n              2:        no audible alarm\n              1:        audible alarm')
unit2MsgTrap1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 4, 7, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit2MsgTrap1.setStatus('mandatory')
if mibBuilder.loadTexts: unit2MsgTrap1.setDescription('Trap receiver 1 activated')
unit2MsgTrap2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 4, 7, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit2MsgTrap2.setStatus('mandatory')
if mibBuilder.loadTexts: unit2MsgTrap2.setDescription('Trap receiver 2 activated')
unit2MsgTrap3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 4, 7, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit2MsgTrap3.setStatus('mandatory')
if mibBuilder.loadTexts: unit2MsgTrap3.setDescription('Trap receiver 3 activated')
unit2MsgTrap4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 4, 7, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit2MsgTrap4.setStatus('mandatory')
if mibBuilder.loadTexts: unit2MsgTrap4.setDescription('Trap receiver 4 and Event Logging activated')
unit2MsgQuit = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 4, 7, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("auto", 1), ("manual", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit2MsgQuit.setStatus('mandatory')
if mibBuilder.loadTexts: unit2MsgQuit.setDescription("Reset of this alarm\n             1:\t\tauto\n             2:\t\tmanual, alarm needs confirmation, e. g. with 'C' key")
cmcTcUnit3TypeOfDevice = MibScalar((1, 3, 6, 1, 4, 1, 2606, 4, 2, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("notAvail", 1), ("unitIO", 2), ("unitAccess", 3), ("unitClimate", 4), ("unitFCS", 5), ("unitRTT", 6), ("unitRCT", 7), ("unitPSM", 8), ("unitPSM8", 9), ("unitPSMMetered", 10), ("unitIOWireless", 11), ("unitPSM6Schuko", 12), ("unitPSM6C19", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcTcUnit3TypeOfDevice.setStatus('mandatory')
if mibBuilder.loadTexts: cmcTcUnit3TypeOfDevice.setDescription('Type of sensor unit connected to port 3')
cmcTcUnit3Text = MibScalar((1, 3, 6, 1, 4, 1, 2606, 4, 2, 5, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcTcUnit3Text.setStatus('mandatory')
if mibBuilder.loadTexts: cmcTcUnit3Text.setDescription('Descriptional text for sensor unit connected to port 3')
cmcTcUnit3Serial = MibScalar((1, 3, 6, 1, 4, 1, 2606, 4, 2, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcTcUnit3Serial.setStatus('mandatory')
if mibBuilder.loadTexts: cmcTcUnit3Serial.setDescription('Serialnumber of sensor unit connected to port 3')
cmcTcUnit3Status = MibScalar((1, 3, 6, 1, 4, 1, 2606, 4, 2, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("ok", 1), ("error", 2), ("changed", 3), ("quit", 4), ("timeout", 5), ("detected", 6), ("notAvail", 7), ("lowPower", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcTcUnit3Status.setStatus('mandatory')
if mibBuilder.loadTexts: cmcTcUnit3Status.setDescription('General Status sensor unit connected to port 3\n              (1) OK\n              (2) error, e. g. value overflow\n              (3) configuration of sensor unit has changed, confirmation required\n              (4) Quit from sensor unit to confirm configuration changes\n              (5) timeout of sensor unit, confirmation required to unload this unit\n              (6) sensor unit detected, needs to be confirmed\n              (7) unit is not available\n              (8) supply voltage is too low')
cmcTcUnit3NumberOfSensors = MibScalar((1, 3, 6, 1, 4, 1, 2606, 4, 2, 5, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcTcUnit3NumberOfSensors.setStatus('mandatory')
if mibBuilder.loadTexts: cmcTcUnit3NumberOfSensors.setDescription('Number of sensors connected to sensor unit 3')
cmcTcUnit3SensorTable = MibTable((1, 3, 6, 1, 4, 1, 2606, 4, 2, 5, 5, 2), )
if mibBuilder.loadTexts: cmcTcUnit3SensorTable.setStatus('mandatory')
if mibBuilder.loadTexts: cmcTcUnit3SensorTable.setDescription('Headline of sensor table')
cmcTcUnit3SensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2606, 4, 2, 5, 5, 2, 1), ).setIndexNames((0, "RITTAL-CMC-TC-MIB", "unit3SensorIndex"))
if mibBuilder.loadTexts: cmcTcUnit3SensorEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cmcTcUnit3SensorEntry.setDescription('Entries of sensor table')
unit3SensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 5, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: unit3SensorIndex.setStatus('mandatory')
if mibBuilder.loadTexts: unit3SensorIndex.setDescription('Index for the list of value entries. Its value ranges\n              between 1 and the value of cmcTcUnit3NumberOfSensors.')
unit3SensorType = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 5, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 100, 101, 102, 103, 104, 105, 106))).clone(namedValues=NamedValues(("notAvail", 1), ("failure", 2), ("overflow", 3), ("access", 4), ("vibration", 5), ("motion", 6), ("smoke", 7), ("airFlow", 8), ("type6", 9), ("temperature", 10), ("current4to20", 11), ("humidity", 12), ("userNO", 13), ("userNC", 14), ("lock", 15), ("unlock", 16), ("voltOK", 17), ("voltage", 18), ("fanOK", 19), ("readerKeypad", 20), ("dutyPWM", 21), ("fanStatus", 22), ("leakage", 23), ("warningRTT", 24), ("alarmRTT", 25), ("filterRTT", 26), ("heatflowRCT", 27), ("alarmRCT", 28), ("warningRCT", 29), ("currentPSM", 30), ("statusPSM", 31), ("positionPSM", 32), ("airFlap", 33), ("acoustic", 34), ("detACfault", 35), ("detACfirstAlarm", 36), ("detACmainAlarm", 37), ("rpm11LCP", 40), ("rpm12LCP", 41), ("rpm21LCP", 42), ("rpm22LCP", 43), ("rpm31LCP", 44), ("rpm32LCP", 45), ("rpm41LCP", 46), ("rpm42LCP", 47), ("airTemp11LCP", 48), ("airTemp12LCP", 49), ("airTemp21LCP", 50), ("airTemp22LCP", 51), ("airTemp31LCP", 52), ("airTemp32LCP", 53), ("airTemp41LCP", 54), ("airTemp42LCP", 55), ("temp1LCP", 56), ("temp2LCP", 57), ("waterInTemp", 58), ("waterOutTemp", 59), ("waterFlow", 60), ("fanSpeed", 61), ("valve", 62), ("statusLCP", 63), ("waterDelta", 64), ("valveActual", 65), ("contrTemp2", 66), ("condensateDuration", 67), ("condensateCycles", 68), ("totalKWhPSM", 72), ("totalKWPSM", 73), ("frequencyPSM", 74), ("voltagePSM", 75), ("voltStatusPSM", 76), ("amperePSM", 77), ("ampStatusPSM", 78), ("kWPSM", 79), ("kWhPSM", 80), ("kWhTempPSM", 81), ("temperatureWL", 100), ("temperature1WL", 101), ("humidityWL", 102), ("accessWL", 103), ("userNOWL", 104), ("userNCWL", 105), ("analogWL", 106)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: unit3SensorType.setStatus('mandatory')
if mibBuilder.loadTexts: unit3SensorType.setDescription('Type of sensor which is connected to sensor unit 3 to sensor[unit3SensorIndex]\n              1:        no sensor connected\n              2:        sensor failure\n              3:        value overflow\n              4:        sensor type 1, access sensor\n              5:        sensor type 2, vibration sensor\n              6:        sensor type 3, motion sensor\n              7:        sensor type 4, smoke sensor\n              8:        sensor type 5, air flow sensor\n              9:        sensor type 6, reserved\n              10:       sensor type 7, temperature sensor\n              11:       sensor type 8, 4..20mA sensor\n              12:       sensor type 9, humidity sensor  \n              13:       user sensor with normally opened contact\n              14:       user sensor with normally closed contact\n              15:       door locked sensor from locking device\n              16:       remote unlock sensor (e.g. external keypad)\n              17:       voltage sensor, indicates status of main voltage\n              18:\tvoltage value\n              19:\tfan status\n              20:       cardreader or keypad, connected to I2C port              \n              21:\tduty cycle of fan, FCS-Unit\n              22:\tstatus of fan, FCS-Unit\n              23:\tleakage sensor\n              24:\twarning, RittalTopTherm(RTT)-Unit\n              25:\talarm, RittalTopTherm-Unit\n              26:\ttemperature difference filter monitor, RTT-Unit\n              27:\theatflow RCT-Unit\n              28:\talarm RCT-Unit\n              29:\twarning RCT-Unit\n              30:\tactual current*10, PSM-Unit\n              31:\tstatus PSM-Unit\n              32:\tposition PSM-Unit, normal/reversed = circuit 1/2\n              33:\tair Flap\n              34:\tacoustic sensor\n              35:\tDET-AC fault (extinguisher)\n              36:\tDET-AC first alarm (extinguisher)\n              37:\tDET-AC main alarm (extinguisher)\n              40-47:\tRPM Fan 1.1 - Fan 4.2, LCP\n              48-55:\tAir temperature 1.1 - 4.2, LCP\n              56,57:\tactual temperature 1,2, LCP\n              58:\twater inlet temperature, LCP\n              59:\twater outlet temperature, LCP\n              60:\twater flow\n              61:\tfan speed (desired value)\n              62:\tstatus valve, LCP\n              63:\tstatus LCP\n              64:\ttemperature difference water temperatures\n              65:\tcontrol temperature 1, LCP\n              66:\tcontrol temperature 2, LCP\n              67:\tcondensate pump, duration, LCP\n              68:\tcondensate pump, cycles, LCP\n              72:\ttotal energy*10 (kWh), PSM\n              73:\ttotal power*10 (kW), PSM\n              74:\tfrequency*10 (Hz), PSM\n              75:\tvoltage*10 (V), PSM\n              76:\tvoltage status, PSM\n              77:\tcurrent*10 (A), PSM\n              78:\tcurrent status, PSM\n              79:\tpower*10 (kW) per phase, PSM\n              80:\tenergy*10 (kWh) per phase, PSM\n              81:\ttemporary energy*10 (kWh) per phase, PSM\n \t     100:\ttemperature sensor, wireless\n\t     101:\ttemperature sensor (combi), wireless\n\t     102:\thumidity sensor, wireless\n\t     103:\taccess sensor, wireless\n\t     104:\tuser sensor with normally opened contact, wireless\n\t     105:\tuser sensor with normally closed contact, wireless\n\t     106:\tanalog sensor 4..20mA, wireless')
unit3SensorText = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 5, 5, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit3SensorText.setStatus('mandatory')
if mibBuilder.loadTexts: unit3SensorText.setDescription('Descriptional text for each sensor (entry in the table)')
unit3SensorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 5, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("notAvail", 1), ("lost", 2), ("changed", 3), ("ok", 4), ("off", 5), ("on", 6), ("warning", 7), ("tooLow", 8), ("tooHigh", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: unit3SensorStatus.setStatus('mandatory')
if mibBuilder.loadTexts: unit3SensorStatus.setDescription('Actual status of the sensor')
unit3SensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 5, 5, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unit3SensorValue.setStatus('mandatory')
if mibBuilder.loadTexts: unit3SensorValue.setDescription('Value of sensor')
unit3SensorSetHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 5, 5, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit3SensorSetHigh.setStatus('mandatory')
if mibBuilder.loadTexts: unit3SensorSetHigh.setDescription('Value for high setpoint of sensor')
unit3SensorSetLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 5, 5, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit3SensorSetLow.setStatus('mandatory')
if mibBuilder.loadTexts: unit3SensorSetLow.setDescription('Value for low setpoint of sensor')
unit3SensorSetWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 5, 5, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit3SensorSetWarn.setStatus('mandatory')
if mibBuilder.loadTexts: unit3SensorSetWarn.setDescription('Value for warning setpoint of sensor,\n              also used as fan threshold')
cmcTcUnit3NumberOfOutputs = MibScalar((1, 3, 6, 1, 4, 1, 2606, 4, 2, 5, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcTcUnit3NumberOfOutputs.setStatus('mandatory')
if mibBuilder.loadTexts: cmcTcUnit3NumberOfOutputs.setDescription('Number of outputs available on sensor unit 3')
cmcTcUnit3OutputTable = MibTable((1, 3, 6, 1, 4, 1, 2606, 4, 2, 5, 6, 2), )
if mibBuilder.loadTexts: cmcTcUnit3OutputTable.setStatus('mandatory')
if mibBuilder.loadTexts: cmcTcUnit3OutputTable.setDescription('Headline of output table')
cmcTcUnit3OutputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2606, 4, 2, 5, 6, 2, 1), ).setIndexNames((0, "RITTAL-CMC-TC-MIB", "unit3OutputIndex"))
if mibBuilder.loadTexts: cmcTcUnit3OutputEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cmcTcUnit3OutputEntry.setDescription('Entries of output table')
unit3OutputIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 5, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: unit3OutputIndex.setStatus('mandatory')
if mibBuilder.loadTexts: unit3OutputIndex.setDescription('Index for the list of output entries. Its value ranges\n              between 1 and the value of cmcTcUnit3NumberOfOutputs.')
unit3OutputType = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 5, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46))).clone(namedValues=NamedValues(("notAvail", 1), ("failure", 2), ("overflow", 3), ("doorLock", 4), ("univLock1", 5), ("univLock2", 6), ("fan", 7), ("fanSpeedContr", 8), ("universalOut", 9), ("roomLock", 10), ("powerOut", 11), ("doorLockMaster", 12), ("doorLockFRi", 13), ("setpoint", 14), ("setpointTimax", 15), ("hysteresisRCT", 16), ("commandRCT", 17), ("relayPSM", 18), ("setHighPSM", 19), ("setLowPSM", 20), ("setpointRTT", 21), ("setTimaxRTT", 22), ("powerOut1", 23), ("controlModeLCP", 30), ("minFanSpeedLCP", 31), ("minDeltaTLCP", 32), ("maxDeltaTLCP", 33), ("kPLCP", 34), ("kILCP", 35), ("kDLCP", 36), ("flowRateLCP", 37), ("cwValueLCP", 38), ("deltaTLCP", 39), ("ctrModLCP", 40), ("voltHighPSM", 42), ("voltLowPSM", 43), ("ampHighPSM", 44), ("ampLowPSM", 45), ("commandPSM", 46)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: unit3OutputType.setStatus('mandatory')
if mibBuilder.loadTexts: unit3OutputType.setDescription('Type of output which is connected to sensor unit 3 to output[unit3OutputIndex]\n              1:        no output connected\n              2:        output failure\n              3:        value overflow\n              4:        output type 1, door locking TS8,Ergoform\n              5:        output type 2, universal lock 1, lock with power\n              6:        output type 3, universal lock 2, unlock with power\n              7:        output type 4, fan relay\n              8:        output type 5, fan controlled\n              9:        output type 6, universal relay output\n              10:       output type 7, room door lock \n              11:       output type 8, power output\n              12:       output type 9, door lock with Master key\n              13:       output type 10, door lock FR(i)\n              14:\tsetpoint (FCS, RTT)\n              15:\tsetpoint temperature monitoring (RTT)\n              16:\thysteresis of setpoint (RCT)\n              17:\tcommand for remote control of RCT\n              18:\trelay PSM, 1=On, 0=Off\n              19:\thigh setpoint current monitoring PSM\n              20:\tlow setpoint current monitoring PSM\n              21:\tsetpoint temperature RTT\n              22:\tsetpoint temperature monitoring RTT\n              23:\tpower output 20A\n              30:\tcontrol mode LCP\n              31:\tmin fan speed (fan control) LCP\n              32:\tmin delta T (fan control) LCP\n              33:\tmax delta T (fan control) LCP\n              34:\tPID controller, KP, LCP\n              35:\tPID controller, KI, LCP\n              36\tPID controller, KD, LCP\n              37\tflowrate flowmeter, LCP\n              38:\tcw value of water (default: 4187) LCP\n              39:\tdeltaT, LCP\n              40:\tcontrol mode, LCP\n              42:\tsetpoint high voltage PSM\n              43:\tsetpoint low voltage PSM\n              44:\tsetpoint high current PSM\n              45:\tsetpoint low current PSM\n              46:\tcommand PSM')
unit3OutputText = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 5, 6, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit3OutputText.setStatus('mandatory')
if mibBuilder.loadTexts: unit3OutputText.setDescription('Descriptional text for each output (entry in the table)')
unit3OutputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 5, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("notAvail", 1), ("lost", 2), ("changed", 3), ("ok", 4), ("off", 5), ("on", 6), ("setOff", 7), ("setOn", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit3OutputStatus.setStatus('mandatory')
if mibBuilder.loadTexts: unit3OutputStatus.setDescription('Actual status of the output')
unit3OutputValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 5, 6, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit3OutputValue.setStatus('mandatory')
if mibBuilder.loadTexts: unit3OutputValue.setDescription('Value for output')
unit3OutputSet = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 5, 6, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("lock", 3), ("unlock", 4), ("unlockDelay", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit3OutputSet.setStatus('mandatory')
if mibBuilder.loadTexts: unit3OutputSet.setDescription('Command for output')
unit3OutputConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 5, 6, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disRemote", 1), ("enRemote", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit3OutputConfig.setStatus('mandatory')
if mibBuilder.loadTexts: unit3OutputConfig.setDescription('Configuration for output\n             1: \tdisable remote control (e.g. keypad)\n             2: \tenable remote control ')
unit3OutputDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 5, 6, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit3OutputDelay.setStatus('mandatory')
if mibBuilder.loadTexts: unit3OutputDelay.setDescription('Unsigned Value for delay, \n             after this time the output will fall into the previous state')
unit3OutputTimeoutAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 5, 6, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("stay", 1), ("off", 2), ("on", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit3OutputTimeoutAction.setStatus('mandatory')
if mibBuilder.loadTexts: unit3OutputTimeoutAction.setDescription('State for output if timeout (RS422) occurs')
cmcTcUnit3NumberOfMsgs = MibScalar((1, 3, 6, 1, 4, 1, 2606, 4, 2, 5, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcTcUnit3NumberOfMsgs.setStatus('mandatory')
if mibBuilder.loadTexts: cmcTcUnit3NumberOfMsgs.setDescription('Number of alarms that can be created with sensor unit 3')
cmcTcUnit3MsgTable = MibTable((1, 3, 6, 1, 4, 1, 2606, 4, 2, 5, 7, 2), )
if mibBuilder.loadTexts: cmcTcUnit3MsgTable.setStatus('mandatory')
if mibBuilder.loadTexts: cmcTcUnit3MsgTable.setDescription('Headline of message table')
cmcTcUnit3MsgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2606, 4, 2, 5, 7, 2, 1), ).setIndexNames((0, "RITTAL-CMC-TC-MIB", "unit3MsgIndex"))
if mibBuilder.loadTexts: cmcTcUnit3MsgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cmcTcUnit3MsgEntry.setDescription('Entries of message table')
unit3MsgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 5, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: unit3MsgIndex.setStatus('mandatory')
if mibBuilder.loadTexts: unit3MsgIndex.setDescription('Index for the list of alarm entries. Its value ranges\n              between 1 and the value of cmcTcUnit3NumberOfMsgs.')
unit3MsgText = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 5, 7, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit3MsgText.setStatus('mandatory')
if mibBuilder.loadTexts: unit3MsgText.setDescription('Descriptional text for each message (entry in the table)')
unit3MsgStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 5, 7, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22))).clone(namedValues=NamedValues(("notAvail", 1), ("configChanged", 2), ("error", 3), ("ok", 4), ("alarm", 5), ("warning", 6), ("tooLow", 7), ("tooHigh", 8), ("setOff", 9), ("setOn", 10), ("open", 11), ("closed", 12), ("locked", 13), ("unlRemote", 14), ("unlReaderKeypad", 15), ("unlSNMP", 16), ("unlWEB", 17), ("unlTimer", 18), ("noAccess", 19), ("circuit1", 20), ("circuit2", 21), ("lowBatt", 22)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: unit3MsgStatus.setStatus('mandatory')
if mibBuilder.loadTexts: unit3MsgStatus.setDescription('Actual message status\n             1: not available\n             2: configuration has changed (sensor new, changed, lost)\n             3: error\n             4: OK\n             5: alarm, e.g. smoke, vibration...\n             6: warning of analog value, value reached warning threshold\n             7: analog value too low, value reached low threshold\n             8: analog value too high, value reached high threshold\n             9: output is set to OFF\n             10: output is set to ON\n             11: door is open\n             12: door is closed\n             13: door is locked\n             14: door is unlocked by remote input, e.g. external cardreader\n             15: door is unlocked by reader or keypad connected to I2C\n             16: door is unlocked by SNMP set command (unit1OutputSet)\n             17: door is unlocked by WEB\n             18: door is unlocked by timer\n             19: no access, wrong keycode or cardnumber\n             20: orientation of PSM-Unit is circuit 1\n             21: orientation of PSM-Unit is circuit 2\n             22: battery low, wireless sensor')
unit3MsgRelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 5, 7, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit3MsgRelay.setStatus('mandatory')
if mibBuilder.loadTexts: unit3MsgRelay.setDescription('Setup of Alarm relay for this alarm\n              1:        no switching of alarm relay             \n              2:        switching of alarm relay')
unit3MsgBeeper = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 5, 7, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit3MsgBeeper.setStatus('mandatory')
if mibBuilder.loadTexts: unit3MsgBeeper.setDescription('Setup of Alarm beeper for this alarm\n              1:        no audible alarm\n              2:        audible alarm')
unit3MsgTrap1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 5, 7, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit3MsgTrap1.setStatus('mandatory')
if mibBuilder.loadTexts: unit3MsgTrap1.setDescription('Trap receiver 1 activated')
unit3MsgTrap2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 5, 7, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit3MsgTrap2.setStatus('mandatory')
if mibBuilder.loadTexts: unit3MsgTrap2.setDescription('Trap receiver 2 activated')
unit3MsgTrap3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 5, 7, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit3MsgTrap3.setStatus('mandatory')
if mibBuilder.loadTexts: unit3MsgTrap3.setDescription('Trap receiver 3 activated')
unit3MsgTrap4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 5, 7, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit3MsgTrap4.setStatus('mandatory')
if mibBuilder.loadTexts: unit3MsgTrap4.setDescription('Trap receiver 4 and Event Logging activated')
unit3MsgQuit = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 5, 7, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("auto", 1), ("manual", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit3MsgQuit.setStatus('mandatory')
if mibBuilder.loadTexts: unit3MsgQuit.setDescription("Reset of this alarm\n             1:\t\tauto\n             2:\t\tmanual, alarm needs confirmation, e. g. with 'C' key")
cmcTcUnit4TypeOfDevice = MibScalar((1, 3, 6, 1, 4, 1, 2606, 4, 2, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("notAvail", 1), ("unitIO", 2), ("unitAccess", 3), ("unitClimate", 4), ("unitFCS", 5), ("unitRTT", 6), ("unitRCT", 7), ("unitPSM", 8), ("unitPSM8", 9), ("unitPSMMetered", 10), ("unitIOWireless", 11), ("unitPSM6Schuko", 12), ("unitPSM6C19", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcTcUnit4TypeOfDevice.setStatus('mandatory')
if mibBuilder.loadTexts: cmcTcUnit4TypeOfDevice.setDescription('Type of sensor unit connected to port 4')
cmcTcUnit4Text = MibScalar((1, 3, 6, 1, 4, 1, 2606, 4, 2, 6, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcTcUnit4Text.setStatus('mandatory')
if mibBuilder.loadTexts: cmcTcUnit4Text.setDescription('Descriptional text for sensor unit connected to port 4')
cmcTcUnit4Serial = MibScalar((1, 3, 6, 1, 4, 1, 2606, 4, 2, 6, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcTcUnit4Serial.setStatus('mandatory')
if mibBuilder.loadTexts: cmcTcUnit4Serial.setDescription('Serialnumber of sensor unit connected to port 4')
cmcTcUnit4Status = MibScalar((1, 3, 6, 1, 4, 1, 2606, 4, 2, 6, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("ok", 1), ("error", 2), ("changed", 3), ("quit", 4), ("timeout", 5), ("detected", 6), ("notAvail", 7), ("lowPower", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcTcUnit4Status.setStatus('mandatory')
if mibBuilder.loadTexts: cmcTcUnit4Status.setDescription('General Status sensor unit connected to port 4\n              (1) OK\n              (2) error, e. g. value overflow\n              (3) configuration of sensor unit has changed, confirmation required\n              (4) Quit from sensor unit to confirm configuration changes\n              (5) timeout of sensor unit, confirmation required to unload this unit\n              (6) sensor unit detected, needs to be confirmed\n              (7) unit is not available\n              (8) supply voltage is too low')
cmcTcUnit4NumberOfSensors = MibScalar((1, 3, 6, 1, 4, 1, 2606, 4, 2, 6, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcTcUnit4NumberOfSensors.setStatus('mandatory')
if mibBuilder.loadTexts: cmcTcUnit4NumberOfSensors.setDescription('Number of sensors connected to sensor unit 4')
cmcTcUnit4SensorTable = MibTable((1, 3, 6, 1, 4, 1, 2606, 4, 2, 6, 5, 2), )
if mibBuilder.loadTexts: cmcTcUnit4SensorTable.setStatus('mandatory')
if mibBuilder.loadTexts: cmcTcUnit4SensorTable.setDescription('Headline of sensor table')
cmcTcUnit4SensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2606, 4, 2, 6, 5, 2, 1), ).setIndexNames((0, "RITTAL-CMC-TC-MIB", "unit4SensorIndex"))
if mibBuilder.loadTexts: cmcTcUnit4SensorEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cmcTcUnit4SensorEntry.setDescription('Entries of sensor table')
unit4SensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 6, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: unit4SensorIndex.setStatus('mandatory')
if mibBuilder.loadTexts: unit4SensorIndex.setDescription('Index for the list of value entries. Its value ranges\n               between 1 and the value of cmcTcUnit4NumberOfSensors.')
unit4SensorType = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 6, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 100, 101, 102, 103, 104, 105, 106))).clone(namedValues=NamedValues(("notAvail", 1), ("failure", 2), ("overflow", 3), ("access", 4), ("vibration", 5), ("motion", 6), ("smoke", 7), ("airFlow", 8), ("type6", 9), ("temperature", 10), ("current4to20", 11), ("humidity", 12), ("userNO", 13), ("userNC", 14), ("lock", 15), ("unlock", 16), ("voltOK", 17), ("voltage", 18), ("fanOK", 19), ("readerKeypad", 20), ("dutyPWM", 21), ("fanStatus", 22), ("leakage", 23), ("warningRTT", 24), ("alarmRTT", 25), ("filterRTT", 26), ("heatflowRCT", 27), ("alarmRCT", 28), ("warningRCT", 29), ("currentPSM", 30), ("statusPSM", 31), ("positionPSM", 32), ("airFlap", 33), ("acoustic", 34), ("detACfault", 35), ("detACfirstAlarm", 36), ("detACmainAlarm", 37), ("rpm11LCP", 40), ("rpm12LCP", 41), ("rpm21LCP", 42), ("rpm22LCP", 43), ("rpm31LCP", 44), ("rpm32LCP", 45), ("rpm41LCP", 46), ("rpm42LCP", 47), ("airTemp11LCP", 48), ("airTemp12LCP", 49), ("airTemp21LCP", 50), ("airTemp22LCP", 51), ("airTemp31LCP", 52), ("airTemp32LCP", 53), ("airTemp41LCP", 54), ("airTemp42LCP", 55), ("temp1LCP", 56), ("temp2LCP", 57), ("waterInTemp", 58), ("waterOutTemp", 59), ("waterFlow", 60), ("fanSpeed", 61), ("valve", 62), ("statusLCP", 63), ("waterDelta", 64), ("valveActual", 65), ("contrTemp2", 66), ("condensateDuration", 67), ("condensateCycles", 68), ("totalKWhPSM", 72), ("totalKWPSM", 73), ("frequencyPSM", 74), ("voltagePSM", 75), ("voltStatusPSM", 76), ("amperePSM", 77), ("ampStatusPSM", 78), ("kWPSM", 79), ("kWhPSM", 80), ("kWhTempPSM", 81), ("temperatureWL", 100), ("temperature1WL", 101), ("humidityWL", 102), ("accessWL", 103), ("userNOWL", 104), ("userNCWL", 105), ("analogWL", 106)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: unit4SensorType.setStatus('mandatory')
if mibBuilder.loadTexts: unit4SensorType.setDescription('Type of sensor which is connected to sensor unit 4 to sensor[unit4SensorIndex]\n              1:        no sensor connected\n              2:        sensor failure\n              3:        value overflow\n              4:        sensor type 1, access sensor\n              5:        sensor type 2, vibration sensor\n              6:        sensor type 3, motion sensor\n              7:        sensor type 4, smoke sensor\n              8:        sensor type 5, air flow sensor\n              9:        sensor type 6, reserved\n              10:       sensor type 7, temperature sensor\n              11:       sensor type 8, 4..20mA sensor\n              12:       sensor type 9, humidity sensor  \n              13:       user sensor with normally opened contact\n              14:       user sensor with normally closed contact\n              15:       door locked sensor from locking device\n              16:       remote unlock sensor (e.g. external keypad)\n              17:       voltage sensor, indicates status of main voltage\n              18:\tvoltage value\n              19:\tfan status\n              20:       cardreader or keypad, connected to I2C port              \n              21:\tduty cycle of fan, FCS-Unit\n              22:\tstatus of fan, FCS-Unit\n              23:\tleakage sensor\n              24:\twarning, RittalTopTherm(RTT)-Unit\n              25:\talarm, RittalTopTherm-Unit\n              26:\ttemperature difference filter monitor, RTT-Unit\n              27:\theatflow RCT-Unit\n              28:\talarm RCT-Unit\n              29:\twarning RCT-Unit\n              30:\tactual current*10, PSM-Unit\n              31:\tstatus PSM-Unit\n              32:\tposition PSM-Unit, normal/reversed = circuit 1/2\n              33:\tair Flap\n              34:\tacoustic sensor\n              35:\tDET-AC fault (extinguisher)\n              36:\tDET-AC first alarm (extinguisher)\n              37:\tDET-AC main alarm (extinguisher)\n              40-47:\tRPM Fan 1.1 - Fan 4.2, LCP\n              48-55:\tAir temperature 1.1 - 4.2, LCP\n              56,57:\tactual temperature 1,2, LCP\n              58:\twater inlet temperature, LCP\n              59:\twater outlet temperature, LCP\n              60:\twater flow\n              61:\tfan speed (desired value)\n              62:\tstatus valve, LCP\n              63:\tstatus LCP\n              64:\ttemperature difference water temperatures\n              65:\tcontrol temperature 1, LCP\n              66:\tcontrol temperature 2, LCP\n              67:\tcondensate pump, duration, LCP\n              68:\tcondensate pump, cycles, LCP\n              72:\ttotal energy*10 (kWh), PSM\n              73:\ttotal power*10 (kW), PSM\n              74:\tfrequency*10 (Hz), PSM\n              75:\tvoltage*10 (V), PSM\n              76:\tvoltage status, PSM\n              77:\tcurrent*10 (A), PSM\n              78:\tcurrent status, PSM\n              79:\tpower*10 (kW) per phase, PSM\n              80:\tenergy*10 (kWh) per phase, PSM\n              81:\ttemporary energy*10 (kWh) per phase, PSM\n\t     100:\ttemperature sensor, wireless\n\t     101:\ttemperature sensor (combi), wireless\n\t     102:\thumidity sensor, wireless\n\t     103:\taccess sensor, wireless\n\t     104:\tuser sensor with normally opened contact, wireless\n\t     105:\tuser sensor with normally closed contact, wireless\n\t     106:\tanalog sensor 4..20mA, wireless')
unit4SensorText = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 6, 5, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit4SensorText.setStatus('mandatory')
if mibBuilder.loadTexts: unit4SensorText.setDescription('Descriptional text for each sensor (entry in the table)')
unit4SensorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 6, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("notAvail", 1), ("lost", 2), ("changed", 3), ("ok", 4), ("off", 5), ("on", 6), ("warning", 7), ("tooLow", 8), ("tooHigh", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: unit4SensorStatus.setStatus('mandatory')
if mibBuilder.loadTexts: unit4SensorStatus.setDescription('Actual status of the sensor')
unit4SensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 6, 5, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unit4SensorValue.setStatus('mandatory')
if mibBuilder.loadTexts: unit4SensorValue.setDescription('Value of sensor')
unit4SensorSetHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 6, 5, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit4SensorSetHigh.setStatus('mandatory')
if mibBuilder.loadTexts: unit4SensorSetHigh.setDescription('Value for high setpoint of sensor')
unit4SensorSetLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 6, 5, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit4SensorSetLow.setStatus('mandatory')
if mibBuilder.loadTexts: unit4SensorSetLow.setDescription('Value for low setpoint of sensor')
unit4SensorSetWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 6, 5, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit4SensorSetWarn.setStatus('mandatory')
if mibBuilder.loadTexts: unit4SensorSetWarn.setDescription('Value for warning setpoint of sensor,\n              also used as fan threshold')
cmcTcUnit4NumberOfOutputs = MibScalar((1, 3, 6, 1, 4, 1, 2606, 4, 2, 6, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcTcUnit4NumberOfOutputs.setStatus('mandatory')
if mibBuilder.loadTexts: cmcTcUnit4NumberOfOutputs.setDescription('Number of outputs available on sensor unit 4')
cmcTcUnit4OutputTable = MibTable((1, 3, 6, 1, 4, 1, 2606, 4, 2, 6, 6, 2), )
if mibBuilder.loadTexts: cmcTcUnit4OutputTable.setStatus('mandatory')
if mibBuilder.loadTexts: cmcTcUnit4OutputTable.setDescription('Headline of output table')
cmcTcUnit4OutputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2606, 4, 2, 6, 6, 2, 1), ).setIndexNames((0, "RITTAL-CMC-TC-MIB", "unit4OutputIndex"))
if mibBuilder.loadTexts: cmcTcUnit4OutputEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cmcTcUnit4OutputEntry.setDescription('Entries of output table')
unit4OutputIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 6, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: unit4OutputIndex.setStatus('mandatory')
if mibBuilder.loadTexts: unit4OutputIndex.setDescription('Index for the list of output entries. Its value ranges\n              between 1 and the value of cmcTcUnit4NumberOfOutputs.')
unit4OutputType = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 6, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46))).clone(namedValues=NamedValues(("notAvail", 1), ("failure", 2), ("overflow", 3), ("doorLock", 4), ("univLock1", 5), ("univLock2", 6), ("fan", 7), ("fanSpeedContr", 8), ("universalOut", 9), ("roomLock", 10), ("powerOut", 11), ("doorLockMaster", 12), ("doorLockFRi", 13), ("setpoint", 14), ("setpointTimax", 15), ("hysteresisRCT", 16), ("commandRCT", 17), ("relayPSM", 18), ("setHighPSM", 19), ("setLowPSM", 20), ("setpointRTT", 21), ("setTimaxRTT", 22), ("powerOut1", 23), ("controlModeLCP", 30), ("minFanSpeedLCP", 31), ("minDeltaTLCP", 32), ("maxDeltaTLCP", 33), ("kPLCP", 34), ("kILCP", 35), ("kDLCP", 36), ("flowRateLCP", 37), ("cwValueLCP", 38), ("deltaTLCP", 39), ("ctrModLCP", 40), ("voltHighPSM", 42), ("voltLowPSM", 43), ("ampHighPSM", 44), ("ampLowPSM", 45), ("commandPSM", 46)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: unit4OutputType.setStatus('mandatory')
if mibBuilder.loadTexts: unit4OutputType.setDescription('Type of output which is connected to sensor unit 4 to output[unit4OutputIndex]\n              1:        no output connected\n              2:        output failure\n              3:        value overflow\n              4:        output type 1, door locking TS8,Ergoform\n              5:        output type 2, universal lock 1, lock with power\n              6:        output type 3, universal lock 2, unlock with power\n              7:        output type 4, fan relay\n              8:        output type 5, fan controlled\n              9:        output type 6, universal relay output\n              10:       output type 7, room door lock \n              11:       output type 8, power output\n              12:       output type 9, door lock with Master key \n              13:       output type 10, door lock FR(i)\n              14:\tsetpoint (FCS, RTT)\n              15:\tsetpoint temperature monitoring (RTT)\n              16:\thysteresis of setpoint (RCT)\n              17:\tcommand for remote control of RCT\n              18:\trelay PSM, 1=On, 0=Off\n              19:\thigh setpoint current monitoring PSM\n              20:\tlow setpoint current monitoring PSM\n              21:\tsetpoint temperature RTT\n              22:\tsetpoint temperature monitoring RTT\n              23:\tpower output 20A\n              30:\tcontrol mode LCP\n              31:\tmin fan speed (fan control) LCP\n              32:\tmin delta T (fan control) LCP\n              33:\tmax delta T (fan control) LCP\n              34:\tPID controller, KP, LCP\n              35:\tPID controller, KI, LCP\n              36\tPID controller, KD, LCP\n              37\tflowrate flowmeter, LCP\n              38:\tcw value of water (default: 4187) LCP\n              39:\tdeltaT, LCP\n              40:\tcontrol mode, LCP\n              42:\tsetpoint high voltage PSM\n              43:\tsetpoint low voltage PSM\n              44:\tsetpoint high current PSM\n              45:\tsetpoint low current PSM\n              46:\tcommand PSM')
unit4OutputText = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 6, 6, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit4OutputText.setStatus('mandatory')
if mibBuilder.loadTexts: unit4OutputText.setDescription('Descriptional text for each output (entry in the table)')
unit4OutputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 6, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("notAvail", 1), ("lost", 2), ("changed", 3), ("ok", 4), ("off", 5), ("on", 6), ("setOff", 7), ("setOn", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit4OutputStatus.setStatus('mandatory')
if mibBuilder.loadTexts: unit4OutputStatus.setDescription('Actual status of the output')
unit4OutputValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 6, 6, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit4OutputValue.setStatus('mandatory')
if mibBuilder.loadTexts: unit4OutputValue.setDescription('Value for output')
unit4OutputSet = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 6, 6, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("lock", 3), ("unlock", 4), ("unlockDelay", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit4OutputSet.setStatus('mandatory')
if mibBuilder.loadTexts: unit4OutputSet.setDescription('Command for output')
unit4OutputConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 6, 6, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disRemote", 1), ("enRemote", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit4OutputConfig.setStatus('mandatory')
if mibBuilder.loadTexts: unit4OutputConfig.setDescription('Configuration for output\n             1: \tdisable remote control (e.g. keypad)\n             2: \tenable remote control ')
unit4OutputDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 6, 6, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit4OutputDelay.setStatus('mandatory')
if mibBuilder.loadTexts: unit4OutputDelay.setDescription('Unsigned Value for delay, \n             after this time the output will fall into the previous state')
unit4OutputTimeoutAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 6, 6, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("stay", 1), ("off", 2), ("on", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit4OutputTimeoutAction.setStatus('mandatory')
if mibBuilder.loadTexts: unit4OutputTimeoutAction.setDescription('State for output if timeout (RS422) occurs')
cmcTcUnit4NumberOfMsgs = MibScalar((1, 3, 6, 1, 4, 1, 2606, 4, 2, 6, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcTcUnit4NumberOfMsgs.setStatus('mandatory')
if mibBuilder.loadTexts: cmcTcUnit4NumberOfMsgs.setDescription('Number of alarms that can be created with sensor unit 4')
cmcTcUnit4MsgTable = MibTable((1, 3, 6, 1, 4, 1, 2606, 4, 2, 6, 7, 2), )
if mibBuilder.loadTexts: cmcTcUnit4MsgTable.setStatus('mandatory')
if mibBuilder.loadTexts: cmcTcUnit4MsgTable.setDescription('Headline of message table')
cmcTcUnit4MsgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2606, 4, 2, 6, 7, 2, 1), ).setIndexNames((0, "RITTAL-CMC-TC-MIB", "unit4MsgIndex"))
if mibBuilder.loadTexts: cmcTcUnit4MsgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cmcTcUnit4MsgEntry.setDescription('Entries of message table')
unit4MsgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 6, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: unit4MsgIndex.setStatus('mandatory')
if mibBuilder.loadTexts: unit4MsgIndex.setDescription('Index for the list of alarm entries. Its value ranges\n              between 1 and the value of cmcTcUnit4NumberOfMsgs.')
unit4MsgText = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 6, 7, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit4MsgText.setStatus('mandatory')
if mibBuilder.loadTexts: unit4MsgText.setDescription('Descriptional text for each message (entry in the table)')
unit4MsgStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 6, 7, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22))).clone(namedValues=NamedValues(("notAvail", 1), ("configChanged", 2), ("error", 3), ("ok", 4), ("alarm", 5), ("warning", 6), ("tooLow", 7), ("tooHigh", 8), ("setOff", 9), ("setOn", 10), ("open", 11), ("closed", 12), ("locked", 13), ("unlRemote", 14), ("unlReaderKeypad", 15), ("unlSNMP", 16), ("unlWEB", 17), ("unlTimer", 18), ("noAccess", 19), ("circuit1", 20), ("circuit2", 21), ("lowBatt", 22)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: unit4MsgStatus.setStatus('mandatory')
if mibBuilder.loadTexts: unit4MsgStatus.setDescription('Actual message status\n             1: not available\n             2: configuration has changed (sensor new, changed, lost)\n             3: error\n             4: OK\n             5: alarm, e.g. smoke, vibration...\n             6: warning of analog value, value reached warning threshold\n             7: analog value too low, value reached low threshold\n             8: analog value too high, value reached high threshold\n             9: output is set to OFF\n             10: output is set to ON\n             11: door is open\n             12: door is closed\n             13: door is locked\n             14: door is unlocked by remote input, e.g. external cardreader\n             15: door is unlocked by reader or keypad connected to I2C\n             16: door is unlocked by SNMP set command (unit1OutputSet)\n             17: door is unlocked by WEB\n             18: door is unlocked by timer\n             19: no access, wrong keycode or cardnumber\n             20: orientation of PSM-Unit is circuit 1\n             21: orientation of PSM-Unit is circuit 2\n             22: battery low, wireless sensor')
unit4MsgRelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 6, 7, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit4MsgRelay.setStatus('mandatory')
if mibBuilder.loadTexts: unit4MsgRelay.setDescription('Setup of Alarm relay for this alarm\n              1:        no switching of alarm relay             \n              2:        switching of alarm relay')
unit4MsgBeeper = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 6, 7, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit4MsgBeeper.setStatus('mandatory')
if mibBuilder.loadTexts: unit4MsgBeeper.setDescription('Setup of Alarm beeper for this alarm\n              1:        no audible alarm\n              2:        audible alarm')
unit4MsgTrap1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 6, 7, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit4MsgTrap1.setStatus('mandatory')
if mibBuilder.loadTexts: unit4MsgTrap1.setDescription('Trap receiver 1 activated')
unit4MsgTrap2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 6, 7, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit4MsgTrap2.setStatus('mandatory')
if mibBuilder.loadTexts: unit4MsgTrap2.setDescription('Trap receiver 2 activated')
unit4MsgTrap3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 6, 7, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit4MsgTrap3.setStatus('mandatory')
if mibBuilder.loadTexts: unit4MsgTrap3.setDescription('Trap receiver 3 activated')
unit4MsgTrap4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 6, 7, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit4MsgTrap4.setStatus('mandatory')
if mibBuilder.loadTexts: unit4MsgTrap4.setDescription('Trap receiver 4 and Event Logging activated')
unit4MsgQuit = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 6, 7, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("auto", 1), ("manual", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit4MsgQuit.setStatus('mandatory')
if mibBuilder.loadTexts: unit4MsgQuit.setDescription("Reset of this alarm\n             1:\t\tauto\n             2:\t\tmanual, alarm needs confirmation, e. g. with 'C' key")
cmcTcValuesRelay = MibScalar((1, 3, 6, 1, 4, 1, 2606, 4, 2, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcTcValuesRelay.setStatus('mandatory')
if mibBuilder.loadTexts: cmcTcValuesRelay.setDescription('Setup of Alarm relay for alarm ext. unit(s)\n              1:        no switching of alarm relay             \n              2:        switching of alarm relay')
cmcTcValuesBeeper = MibScalar((1, 3, 6, 1, 4, 1, 2606, 4, 2, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcTcValuesBeeper.setStatus('mandatory')
if mibBuilder.loadTexts: cmcTcValuesBeeper.setDescription('Setup of Alarm beeper for alarm ext. unit(s)\n              1:        no audible alarm\n              2:        audible alarm')
cmcTcValuesTrap1 = MibScalar((1, 3, 6, 1, 4, 1, 2606, 4, 2, 7, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcTcValuesTrap1.setStatus('mandatory')
if mibBuilder.loadTexts: cmcTcValuesTrap1.setDescription('Trap receiver 1 activated')
cmcTcValuesTrap2 = MibScalar((1, 3, 6, 1, 4, 1, 2606, 4, 2, 7, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcTcValuesTrap2.setStatus('mandatory')
if mibBuilder.loadTexts: cmcTcValuesTrap2.setDescription('Trap receiver 2 activated')
cmcTcValuesTrap3 = MibScalar((1, 3, 6, 1, 4, 1, 2606, 4, 2, 7, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcTcValuesTrap3.setStatus('mandatory')
if mibBuilder.loadTexts: cmcTcValuesTrap3.setDescription('Trap receiver 3 activated')
cmcTcValuesTrap4 = MibScalar((1, 3, 6, 1, 4, 1, 2606, 4, 2, 7, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcTcValuesTrap4.setStatus('mandatory')
if mibBuilder.loadTexts: cmcTcValuesTrap4.setDescription('Trap receiver 4 and Event Logging activated')
cmcTcNumberOfValues = MibScalar((1, 3, 6, 1, 4, 1, 2606, 4, 2, 7, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcTcNumberOfValues.setStatus('mandatory')
if mibBuilder.loadTexts: cmcTcNumberOfValues.setDescription('Number of values availabel on extension units connected to the CMC')
cmcTcValuesTable = MibTable((1, 3, 6, 1, 4, 1, 2606, 4, 2, 7, 8), )
if mibBuilder.loadTexts: cmcTcValuesTable.setStatus('mandatory')
if mibBuilder.loadTexts: cmcTcValuesTable.setDescription('Headline of values-table')
cmcTcValuesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2606, 4, 2, 7, 8, 1), ).setIndexNames((0, "RITTAL-CMC-TC-MIB", "valuesIndex"))
if mibBuilder.loadTexts: cmcTcValuesEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cmcTcValuesEntry.setDescription('Entries of values-table')
valuesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 7, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: valuesIndex.setStatus('mandatory')
if mibBuilder.loadTexts: valuesIndex.setDescription('Index for the list of value entries. Its value ranges\n              between 1 and the value of cmcTcNumberOfValues.')
valuesText = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 7, 8, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: valuesText.setStatus('mandatory')
if mibBuilder.loadTexts: valuesText.setDescription('Descriptional text for each value (entry in the table)\n             of the extension card')
valuesStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 7, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("notAvail", 1), ("lost", 2), ("changed", 3), ("ok", 4), ("tooLow", 5), ("tooHigh", 6), ("error", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: valuesStatus.setStatus('mandatory')
if mibBuilder.loadTexts: valuesStatus.setDescription('Actual status of the value of the extension card')
valuesValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 7, 8, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: valuesValue.setStatus('mandatory')
if mibBuilder.loadTexts: valuesValue.setDescription('Value of sensor')
valuesSetHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 7, 8, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: valuesSetHigh.setStatus('mandatory')
if mibBuilder.loadTexts: valuesSetHigh.setDescription('Value for high setpoint of sensor')
valuesSetLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 7, 8, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: valuesSetLow.setStatus('mandatory')
if mibBuilder.loadTexts: valuesSetLow.setDescription('Value for low setpoint of sensor')
cmcTcSetTempUnit = MibScalar((1, 3, 6, 1, 4, 1, 2606, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("celsius", 1), ("fahrenheit", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcTcSetTempUnit.setStatus('mandatory')
if mibBuilder.loadTexts: cmcTcSetTempUnit.setDescription('Unit of all temperature values and setpoints, Celsius or Fahrenheit')
cmcTcSetBeeper = MibScalar((1, 3, 6, 1, 4, 1, 2606, 4, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcTcSetBeeper.setStatus('mandatory')
if mibBuilder.loadTexts: cmcTcSetBeeper.setDescription('Audible alarm in CMC-TC unit:\n                (2): beeper is on\n                (1): beeper is off (general)')
cmcTcQuitRelay = MibScalar((1, 3, 6, 1, 4, 1, 2606, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcTcQuitRelay.setStatus('mandatory')
if mibBuilder.loadTexts: cmcTcQuitRelay.setDescription("Enable or disable acknowledging currently active alarm relay \n               (with 'C' on CMC-TC).")
cmcTcLogicRelay = MibScalar((1, 3, 6, 1, 4, 1, 2606, 4, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("closeAtAlarm", 1), ("openAtAlarm", 2), ("off", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcTcLogicRelay.setStatus('mandatory')
if mibBuilder.loadTexts: cmcTcLogicRelay.setDescription('Logic of alarm relay: \n                (1) Relay will pick up in case of an alarm\n                (2) Relay will release in case of an alarm\n                (3) Relay off (general)')
cmcTcWebAccess = MibScalar((1, 3, 6, 1, 4, 1, 2606, 4, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("viewOnly", 1), ("fullAccess", 2), ("off", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcTcWebAccess.setStatus('mandatory')
if mibBuilder.loadTexts: cmcTcWebAccess.setDescription('Web access via HTTP: \n                (1) view only\n                (2) full Access, read and set\n                (3) Web disabled (general)')
cmcTcSetupDate = MibScalar((1, 3, 6, 1, 4, 1, 2606, 4, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcTcSetupDate.setStatus('mandatory')
if mibBuilder.loadTexts: cmcTcSetupDate.setDescription('actual Date in format DD.MM.YYYY')
cmcTcSetupTime = MibScalar((1, 3, 6, 1, 4, 1, 2606, 4, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcTcSetupTime.setStatus('mandatory')
if mibBuilder.loadTexts: cmcTcSetupTime.setDescription('actual Time in format HH:MM:SS, HH (0-23), MM (0-59), SS (0-59)')
cmcTcTimerNumber = MibScalar((1, 3, 6, 1, 4, 1, 2606, 4, 3, 1, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcTcTimerNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cmcTcTimerNumber.setDescription('Number of value-table entries=number of outlets available on this unit')
cmcTcTimerTable = MibTable((1, 3, 6, 1, 4, 1, 2606, 4, 3, 1, 8, 2), )
if mibBuilder.loadTexts: cmcTcTimerTable.setStatus('mandatory')
if mibBuilder.loadTexts: cmcTcTimerTable.setDescription('Headline of status-table')
cmcTcTimerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2606, 4, 3, 1, 8, 2, 1), ).setIndexNames((0, "RITTAL-CMC-TC-MIB", "cmcTcTimerIndex"))
if mibBuilder.loadTexts: cmcTcTimerEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cmcTcTimerEntry.setDescription('Entries of timer-table')
cmcTcTimerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 3, 1, 8, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcTcTimerIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cmcTcTimerIndex.setDescription('Index for the list of timer entries. Its value ranges\n              between 1 and the value of cmcTcTimerNumber.')
cmcTcTimerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 3, 1, 8, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("switchedOff", 1), ("switchedOn", 2), ("noTime", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcTcTimerStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cmcTcTimerStatus.setDescription('Actual status of the timer')
cmcTcTimerDayOfWeek = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 3, 1, 8, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("sun", 1), ("mon", 2), ("tue", 3), ("wed", 4), ("thu", 5), ("fri", 6), ("sat", 7), ("sat-sun", 8), ("mon-fri", 9), ("mon-sun", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcTcTimerDayOfWeek.setStatus('mandatory')
if mibBuilder.loadTexts: cmcTcTimerDayOfWeek.setDescription('Selection of day of week for timer to switch')
cmcTcTimeOn = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 3, 1, 8, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcTcTimeOn.setStatus('mandatory')
if mibBuilder.loadTexts: cmcTcTimeOn.setDescription('Time to switch on current function, \n             Format: HH:MM')
cmcTcTimeOff = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 3, 1, 8, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcTcTimeOff.setStatus('mandatory')
if mibBuilder.loadTexts: cmcTcTimeOff.setDescription('Time to switch off current function,\n             Format: HH:MM')
cmcTcTimeControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 3, 1, 8, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcTcTimeControl.setStatus('mandatory')
if mibBuilder.loadTexts: cmcTcTimeControl.setDescription('Control via RTC')
cmcTcTimerFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 3, 1, 8, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29))).clone(namedValues=NamedValues(("disKeypad1-1", 1), ("disKeypad2-1", 2), ("disKeypad1-2", 3), ("disKeypad2-2", 4), ("disKeypad1-3", 5), ("disKeypad2-3", 6), ("disKeypad1-4", 7), ("disKeypad2-4", 8), ("unlDoor1-1", 9), ("unlDoor2-1", 10), ("unlDoor1-2", 11), ("unlDoor2-2", 12), ("unlDoor1-3", 13), ("unlDoor2-3", 14), ("unlDoor1-4", 15), ("unlDoor2-5", 16), ("disTrapRec1", 17), ("disTrapRec2", 18), ("disTrapRec3", 19), ("disTrapRec4", 20), ("disSMS", 21), ("schedule1", 22), ("schedule2", 23), ("schedule3", 24), ("schedule4", 25), ("disSMS1", 26), ("disSMS2", 27), ("disSMS3", 28), ("disSMS4", 29)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcTcTimerFunction.setStatus('mandatory')
if mibBuilder.loadTexts: cmcTcTimerFunction.setDescription('Function which is controlled via timer\n             1:\tunlock via keypad 1 on unit 1 or remote input lock 1 is disabled\n             2: unlock via keypad 2 on unit 1 or remote input lock 2 is disabled\n             3\tunlock via keypad 1 on unit 2 or remote input lock 1 is disabled\n             4: unlock via keypad 2 on unit 2 or remote input lock 2 is disabled\n             5:\tunlock via keypad 1 on unit 3 or remote input lock 1 is disabled\n             6: unlock via keypad 2 on unit 3 or remote input lock 2 is disabled\n             7:\tunlock via keypad 1 on unit 4 or remote input lock 1 is disabled\n             8: unlock via keypad 2 on unit 4 or remote input lock 2 is disabled\n             9: Lock of door 1 on unit 1 will be unlocked\n             10: Lock of door 2 on unit 1 will be unlocked\n             11: Lock of door 1 on unit 2 will be unlocked\n             12: Lock of door 2 on unit 2 will be unlocked\n             13: Lock of door 1 on unit 3 will be unlocked\n             14: Lock of door 2 on unit 3 will be unlocked\n             15: Lock of door 1 on unit 4 will be unlocked\n             16: Lock of door 2 on unit 4 will be unlocked\n             17-20: sending Traps to this Trap receiver will be disabled\n             21: sending SMS will be disabled generally\n             22-25: Scheduled alarm off\n             26-29: sending SMS to phone number 1..4 will be disabled')
cmcTcTraptableNumber = MibScalar((1, 3, 6, 1, 4, 1, 2606, 4, 4, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcTcTraptableNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cmcTcTraptableNumber.setDescription('Number of trapTable entries. The number of trap-receiver')
cmcTcTrapTableTable = MibTable((1, 3, 6, 1, 4, 1, 2606, 4, 4, 7, 2), )
if mibBuilder.loadTexts: cmcTcTrapTableTable.setStatus('mandatory')
if mibBuilder.loadTexts: cmcTcTrapTableTable.setDescription('A list of trap-receiver entries')
cmcTcTrapTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2606, 4, 4, 7, 2, 1), ).setIndexNames((0, "RITTAL-CMC-TC-MIB", "trapIndex"))
if mibBuilder.loadTexts: cmcTcTrapTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cmcTcTrapTableEntry.setDescription('Entries of trapTable')
trapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 4, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapIndex.setStatus('mandatory')
if mibBuilder.loadTexts: trapIndex.setDescription('Index for the trap-receiver-table. Its value ranges between\n              1 and the value of traptableNumber ')
trapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 4, 7, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapStatus.setStatus('mandatory')
if mibBuilder.loadTexts: trapStatus.setDescription('Enable or disable trap receiver')
trapIPaddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 4, 7, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapIPaddress.setStatus('mandatory')
if mibBuilder.loadTexts: trapIPaddress.setDescription('IP-address of trap-receiver')
cmcTcQuitUnit = MibScalar((1, 3, 6, 1, 4, 1, 2606, 4, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noQuit", 1), ("quit", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcTcQuitUnit.setStatus('mandatory')
if mibBuilder.loadTexts: cmcTcQuitUnit.setDescription("Command to quit (acknowledge) alarms of CMC-TC unit.\n             Setting to 'quit' (2) will have same result as pressing 'C' on Units.\n             Variable is automatically set back to 'noQuit' (1).")
alarmSensorUnit1 = NotificationType((1, 3, 6, 1, 4, 1, 2606, 4) + (0,1)).setObjects(("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("RITTAL-CMC-TC-MIB", "unit1MsgIndex"), ("RITTAL-CMC-TC-MIB", "unit1MsgText"), ("RITTAL-CMC-TC-MIB", "unit1MsgStatus"), ("RITTAL-CMC-TC-MIB", "unit1SensorValue"))
if mibBuilder.loadTexts: alarmSensorUnit1.setDescription('Alarm of sensor unit 1')
alarmSensorUnit2 = NotificationType((1, 3, 6, 1, 4, 1, 2606, 4) + (0,2)).setObjects(("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("RITTAL-CMC-TC-MIB", "unit2MsgIndex"), ("RITTAL-CMC-TC-MIB", "unit2MsgText"), ("RITTAL-CMC-TC-MIB", "unit2MsgStatus"), ("RITTAL-CMC-TC-MIB", "unit2SensorValue"))
if mibBuilder.loadTexts: alarmSensorUnit2.setDescription('Alarm of sensor unit 2')
alarmSensorUnit3 = NotificationType((1, 3, 6, 1, 4, 1, 2606, 4) + (0,3)).setObjects(("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("RITTAL-CMC-TC-MIB", "unit3MsgIndex"), ("RITTAL-CMC-TC-MIB", "unit3MsgText"), ("RITTAL-CMC-TC-MIB", "unit3MsgStatus"), ("RITTAL-CMC-TC-MIB", "unit3SensorValue"))
if mibBuilder.loadTexts: alarmSensorUnit3.setDescription('Alarm of sensor unit 3')
alarmSensorUnit4 = NotificationType((1, 3, 6, 1, 4, 1, 2606, 4) + (0,4)).setObjects(("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("RITTAL-CMC-TC-MIB", "unit4MsgIndex"), ("RITTAL-CMC-TC-MIB", "unit4MsgText"), ("RITTAL-CMC-TC-MIB", "unit4MsgStatus"), ("RITTAL-CMC-TC-MIB", "unit4SensorValue"))
if mibBuilder.loadTexts: alarmSensorUnit4.setDescription('Alarm of sensor unit 4')
alarmUnit1 = NotificationType((1, 3, 6, 1, 4, 1, 2606, 4) + (0,5)).setObjects(("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("RITTAL-CMC-TC-MIB", "cmcTcUnit1Text"), ("RITTAL-CMC-TC-MIB", "cmcTcUnit1Status"))
if mibBuilder.loadTexts: alarmUnit1.setDescription('Alarm of unit 1')
alarmUnit2 = NotificationType((1, 3, 6, 1, 4, 1, 2606, 4) + (0,6)).setObjects(("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("RITTAL-CMC-TC-MIB", "cmcTcUnit2Text"), ("RITTAL-CMC-TC-MIB", "cmcTcUnit2Status"))
if mibBuilder.loadTexts: alarmUnit2.setDescription('Alarm of unit 2')
alarmUnit3 = NotificationType((1, 3, 6, 1, 4, 1, 2606, 4) + (0,7)).setObjects(("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("RITTAL-CMC-TC-MIB", "cmcTcUnit3Text"), ("RITTAL-CMC-TC-MIB", "cmcTcUnit3Status"))
if mibBuilder.loadTexts: alarmUnit3.setDescription('Alarm of unit 3')
alarmUnit4 = NotificationType((1, 3, 6, 1, 4, 1, 2606, 4) + (0,8)).setObjects(("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("RITTAL-CMC-TC-MIB", "cmcTcUnit4Text"), ("RITTAL-CMC-TC-MIB", "cmcTcUnit4Status"))
if mibBuilder.loadTexts: alarmUnit4.setDescription('Alarm of unit 4')
alarmValues = NotificationType((1, 3, 6, 1, 4, 1, 2606, 4) + (0,9)).setObjects(("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("RITTAL-CMC-TC-MIB", "valuesIndex"), ("RITTAL-CMC-TC-MIB", "valuesText"), ("RITTAL-CMC-TC-MIB", "valuesStatus"))
if mibBuilder.loadTexts: alarmValues.setDescription('Alarm of values measured by external card')
configChanged = NotificationType((1, 3, 6, 1, 4, 1, 2606, 4) + (0,10)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: configChanged.setDescription('The configuration of the cmc has changed, \n               this trap is send if new setup is saved.\n               Configuration can be changed by Terminal, Telnet, Web or SNMP\n               *** NOT IMPLEMENTED *** ')
mibBuilder.exportSymbols("RITTAL-CMC-TC-MIB", cmcTcUnit4MsgEntry=cmcTcUnit4MsgEntry, cmcTcTimeOff=cmcTcTimeOff, unit4SensorText=unit4SensorText, cmcTcStatusDeviceCMC=cmcTcStatusDeviceCMC, cmcTcStatusUnit4Sensors=cmcTcStatusUnit4Sensors, cmcTcSetupGeneral=cmcTcSetupGeneral, unit1MsgRelay=unit1MsgRelay, cmcTcTimerFunction=cmcTcTimerFunction, unit4OutputIndex=unit4OutputIndex, cmcTcValuesBeeper=cmcTcValuesBeeper, valuesText=valuesText, unit2SensorText=unit2SensorText, unit2MsgTrap3=unit2MsgTrap3, cmcTcTimerEntry=cmcTcTimerEntry, cmcTcUnit3NumberOfOutputs=cmcTcUnit3NumberOfOutputs, unit2OutputIndex=unit2OutputIndex, cmcTcUnit4OutputEntry=cmcTcUnit4OutputEntry, cmcTcMibRev=cmcTcMibRev, cmcTcUnitsConnected=cmcTcUnitsConnected, cmcTcUnit4Status=cmcTcUnit4Status, cmcTcStatusSensorUnit3=cmcTcStatusSensorUnit3, unit3OutputSet=unit3OutputSet, unit1MsgStatus=unit1MsgStatus, cmcTcUnit4TypeOfDevice=cmcTcUnit4TypeOfDevice, cmcTcTimerTable1=cmcTcTimerTable1, unit1OutputSet=unit1OutputSet, unit3MsgTrap4=unit3MsgTrap4, unit1SensorSetWarn=unit1SensorSetWarn, unit4SensorIndex=unit4SensorIndex, unit4SensorSetWarn=unit4SensorSetWarn, valuesValue=valuesValue, unit4OutputSet=unit4OutputSet, cmcTcValuesTrap3=cmcTcValuesTrap3, cmcTcStatusUnit3Msg=cmcTcStatusUnit3Msg, cmcTcSetup=cmcTcSetup, cmcTc=cmcTc, cmcTcTraps=cmcTcTraps, cmcTcStatusSensorUnit1=cmcTcStatusSensorUnit1, unit1SensorText=unit1SensorText, cmcTcTrapTableEntry=cmcTcTrapTableEntry, unit2MsgTrap4=unit2MsgTrap4, unit2OutputType=unit2OutputType, cmcTcMibMajRev=cmcTcMibMajRev, unit1SensorValue=unit1SensorValue, unit4OutputStatus=unit4OutputStatus, unit3SensorSetHigh=unit3SensorSetHigh, cmcTcUnit4NumberOfMsgs=cmcTcUnit4NumberOfMsgs, unit2OutputDelay=unit2OutputDelay, cmcTcUnit2NumberOfMsgs=cmcTcUnit2NumberOfMsgs, unit1SensorStatus=unit1SensorStatus, cmcTcUnit4NumberOfSensors=cmcTcUnit4NumberOfSensors, cmcTcUnit2Text=cmcTcUnit2Text, cmcTcUnit2Serial=cmcTcUnit2Serial, alarmUnit2=alarmUnit2, cmcTcUnit3SensorTable=cmcTcUnit3SensorTable, cmcTcUnit1SensorEntry=cmcTcUnit1SensorEntry, cmcTcUnit2NumberOfSensors=cmcTcUnit2NumberOfSensors, cmcTcLogicRelay=cmcTcLogicRelay, unit3MsgTrap2=unit3MsgTrap2, cmcTcUnit4NumberOfOutputs=cmcTcUnit4NumberOfOutputs, cmcTcUnit2MsgTable=cmcTcUnit2MsgTable, cmcTcUnit2SensorEntry=cmcTcUnit2SensorEntry, unit2OutputValue=unit2OutputValue, unit3MsgQuit=unit3MsgQuit, unit1MsgTrap3=unit1MsgTrap3, cmcTcUnit4MsgTable=cmcTcUnit4MsgTable, cmcTcValuesTrap2=cmcTcValuesTrap2, unit3OutputDelay=unit3OutputDelay, unit4OutputValue=unit4OutputValue, cmcTcUnit3NumberOfMsgs=cmcTcUnit3NumberOfMsgs, unit3MsgRelay=unit3MsgRelay, cmcTcUnit3OutputEntry=cmcTcUnit3OutputEntry, cmcTcControl=cmcTcControl, cmcTcUnit3OutputTable=cmcTcUnit3OutputTable, cmcTcTimerTable=cmcTcTimerTable, cmcTcUnit1Status=cmcTcUnit1Status, unit2MsgBeeper=unit2MsgBeeper, cmcTcUnit4SensorEntry=cmcTcUnit4SensorEntry, unit4SensorStatus=unit4SensorStatus, cmcTcTrapControl=cmcTcTrapControl, unit1MsgQuit=unit1MsgQuit, cmcTcMibCondition=cmcTcMibCondition, unit3OutputType=unit3OutputType, unit3MsgBeeper=unit3MsgBeeper, unit4OutputConfig=unit4OutputConfig, trapStatus=trapStatus, cmcTcUnit1NumberOfMsgs=cmcTcUnit1NumberOfMsgs, unit2SensorSetLow=unit2SensorSetLow, unit2OutputTimeoutAction=unit2OutputTimeoutAction, configChanged=configChanged, cmcTcUnit3Text=cmcTcUnit3Text, cmcTcNumberOfValues=cmcTcNumberOfValues, cmcTcUnit1Text=cmcTcUnit1Text, cmcTcValuesTable=cmcTcValuesTable, cmcTcUnit1TypeOfDevice=cmcTcUnit1TypeOfDevice, unit2SensorSetWarn=unit2SensorSetWarn, alarmUnit4=alarmUnit4, unit3MsgTrap1=unit3MsgTrap1, valuesSetLow=valuesSetLow, cmcTcWebAccess=cmcTcWebAccess, cmcTcUnit3Serial=cmcTcUnit3Serial, unit2MsgText=unit2MsgText, cmcTcStatusUnit3Sensors=cmcTcStatusUnit3Sensors, alarmSensorUnit3=alarmSensorUnit3, unit1OutputIndex=unit1OutputIndex, unit1MsgTrap1=unit1MsgTrap1, cmcTcUnit3Status=cmcTcUnit3Status, cmcTcTimeOn=cmcTcTimeOn, cmcTcStatusUnit4Msg=cmcTcStatusUnit4Msg, unit3OutputConfig=unit3OutputConfig, cmcTcStatusUnit2Msg=cmcTcStatusUnit2Msg, unit1SensorSetHigh=unit1SensorSetHigh, cmcTcValuesTrap1=cmcTcValuesTrap1, unit1OutputDelay=unit1OutputDelay, unit2SensorSetHigh=unit2SensorSetHigh, unit1OutputText=unit1OutputText, valuesIndex=valuesIndex, cmcTcUnit3TypeOfDevice=cmcTcUnit3TypeOfDevice, unit3SensorSetWarn=unit3SensorSetWarn, cmcTcUnit3SensorEntry=cmcTcUnit3SensorEntry, cmcTcUnit2Status=cmcTcUnit2Status, cmcTcStatusExtUnit=cmcTcStatusExtUnit, unit1MsgText=unit1MsgText, unit3SensorType=unit3SensorType, cmcTcQuitUnit=cmcTcQuitUnit, cmcTcUnit1NumberOfSensors=cmcTcUnit1NumberOfSensors, cmcTcUnit2OutputTable=cmcTcUnit2OutputTable, unit4SensorValue=unit4SensorValue, unit2SensorValue=unit2SensorValue, unit4MsgStatus=unit4MsgStatus, unit4SensorSetHigh=unit4SensorSetHigh, cmcTcUnit2OutputEntry=cmcTcUnit2OutputEntry, unit4MsgTrap1=unit4MsgTrap1, cmcTcUnit1OutputTable=cmcTcUnit1OutputTable, unit1SensorSetLow=unit1SensorSetLow, unit4MsgTrap2=unit4MsgTrap2, cmcTcValuesTrap4=cmcTcValuesTrap4, rittal=rittal, cmcTcStatus=cmcTcStatus, cmcTcMibMinRev=cmcTcMibMinRev, cmcTcUnit1MsgTable=cmcTcUnit1MsgTable, unit4MsgBeeper=unit4MsgBeeper, cmcTcTimeControl=cmcTcTimeControl, alarmUnit1=alarmUnit1, unit4MsgRelay=unit4MsgRelay, unit1MsgBeeper=unit1MsgBeeper, cmcTcTrapTableTable=cmcTcTrapTableTable, unit1MsgIndex=unit1MsgIndex, cmcTcTraptableNumber=cmcTcTraptableNumber, cmcTcTimerNumber=cmcTcTimerNumber, cmcTcStatusUnit4Outputs=cmcTcStatusUnit4Outputs, unit4SensorType=unit4SensorType, cmcTcStatusSensorUnit2=cmcTcStatusSensorUnit2, unit2OutputStatus=unit2OutputStatus, unit4OutputTimeoutAction=unit4OutputTimeoutAction, unit3SensorSetLow=unit3SensorSetLow, unit4MsgTrap3=unit4MsgTrap3, valuesSetHigh=valuesSetHigh, unit1OutputValue=unit1OutputValue, unit3MsgTrap3=unit3MsgTrap3, cmcTcStatusUnit2Sensors=cmcTcStatusUnit2Sensors, cmcTcSetBeeper=cmcTcSetBeeper, trapIndex=trapIndex, cmcTcTimerDayOfWeek=cmcTcTimerDayOfWeek, cmcTcUnit4Text=cmcTcUnit4Text, unit2MsgStatus=unit2MsgStatus, unit4MsgQuit=unit4MsgQuit, unit2MsgTrap2=unit2MsgTrap2, alarmUnit3=alarmUnit3, unit1SensorIndex=unit1SensorIndex, valuesStatus=valuesStatus, cmcTcQuitRelay=cmcTcQuitRelay, cmcTcUnit4Serial=cmcTcUnit4Serial, unit2MsgIndex=unit2MsgIndex, unit3OutputValue=unit3OutputValue, cmcTcUnit2MsgEntry=cmcTcUnit2MsgEntry, unit3SensorValue=unit3SensorValue, cmcTcStatusUnit1Outputs=cmcTcStatusUnit1Outputs, unit2SensorStatus=unit2SensorStatus, alarmValues=alarmValues, unit3OutputText=unit3OutputText, cmcTcTimerStatus=cmcTcTimerStatus, alarmSensorUnit4=alarmSensorUnit4, alarmSensorUnit1=alarmSensorUnit1, unit1SensorType=unit1SensorType, unit3MsgStatus=unit3MsgStatus, unit4OutputType=unit4OutputType, cmcTcUnit1OutputEntry=cmcTcUnit1OutputEntry, cmcTcUnit2TypeOfDevice=cmcTcUnit2TypeOfDevice, unit4OutputDelay=unit4OutputDelay, cmcTcValuesRelay=cmcTcValuesRelay, cmcTcUnit1MsgEntry=cmcTcUnit1MsgEntry, cmcTcValuesEntry=cmcTcValuesEntry, cmcTcUnit1SensorTable=cmcTcUnit1SensorTable, cmcTcStatusSensorUnit4=cmcTcStatusSensorUnit4, unit4MsgIndex=unit4MsgIndex, unit4MsgTrap4=unit4MsgTrap4, cmcTcSetTempUnit=cmcTcSetTempUnit, unit2OutputText=unit2OutputText, unit3OutputStatus=unit3OutputStatus, cmcTcUnit1Serial=cmcTcUnit1Serial, cmcTcSetupTime=cmcTcSetupTime, unit3SensorStatus=unit3SensorStatus, cmcTcUnit2SensorTable=cmcTcUnit2SensorTable, unit2OutputConfig=unit2OutputConfig, cmcTcStatusUnit2Outputs=cmcTcStatusUnit2Outputs, unit3OutputTimeoutAction=unit3OutputTimeoutAction, trapIPaddress=trapIPaddress, alarmSensorUnit2=alarmSensorUnit2, cmcTcUnit3MsgTable=cmcTcUnit3MsgTable, cmcTcStatusUnit1Sensors=cmcTcStatusUnit1Sensors, unit1MsgTrap2=unit1MsgTrap2, unit2SensorIndex=unit2SensorIndex, unit2MsgQuit=unit2MsgQuit, cmcTcUnit4SensorTable=cmcTcUnit4SensorTable, cmcTcUnit4OutputTable=cmcTcUnit4OutputTable, unit4MsgText=unit4MsgText, cmcTcTimerIndex=cmcTcTimerIndex, unit1OutputType=unit1OutputType, cmcTcStatusUnit3Outputs=cmcTcStatusUnit3Outputs, unit3SensorIndex=unit3SensorIndex, unit1MsgTrap4=unit1MsgTrap4, unit4OutputText=unit4OutputText, unit2OutputSet=unit2OutputSet, unit3OutputIndex=unit3OutputIndex, cmcTcUnit3MsgEntry=cmcTcUnit3MsgEntry, unit3MsgText=unit3MsgText, cmcTcStatusUnit1Msg=cmcTcStatusUnit1Msg, unit1OutputConfig=unit1OutputConfig, cmcTcUnit2NumberOfOutputs=cmcTcUnit2NumberOfOutputs, unit2MsgRelay=unit2MsgRelay, unit4SensorSetLow=unit4SensorSetLow, unit3MsgIndex=unit3MsgIndex, cmcTcSetupDate=cmcTcSetupDate, unit3SensorText=unit3SensorText, unit2SensorType=unit2SensorType, cmcTcUnit1NumberOfOutputs=cmcTcUnit1NumberOfOutputs, cmcTcUnit3NumberOfSensors=cmcTcUnit3NumberOfSensors, unit2MsgTrap1=unit2MsgTrap1, unit1OutputTimeoutAction=unit1OutputTimeoutAction, unit1OutputStatus=unit1OutputStatus)
