#
# PySNMP MIB module ACD-SFP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/accedian/ACD-SFP-MIB
# Produced by pysmi-1.1.12 at Tue Dec  3 09:38:45 2024
# On host fv-az566-8 platform Linux version 6.5.0-1025-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
acdMibs, = mibBuilder.importSymbols("ACCEDIAN-SMI", "acdMibs")
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
iso, TimeTicks, ModuleIdentity, Counter32, Integer32, Counter64, Gauge32, ObjectIdentity, NotificationType, IpAddress, MibIdentifier, Unsigned32, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "TimeTicks", "ModuleIdentity", "Counter32", "Integer32", "Counter64", "Gauge32", "ObjectIdentity", "NotificationType", "IpAddress", "MibIdentifier", "Unsigned32", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TruthValue, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "DisplayString")
acdSfp = ModuleIdentity((1, 3, 6, 1, 4, 1, 22420, 2, 4))
acdSfp.setRevisions(('2010-11-10 01:00', '2008-04-22 01:00', '2006-08-06 01:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: acdSfp.setRevisionsDescriptions(('Add compliance section.', 'Add acdSfpInfoIdType, acdSfpInfoExtIdType and acdSfpInfoTransCode support.', 'Initial version of MIB module ACD-SFP-MIB.',))
if mibBuilder.loadTexts: acdSfp.setLastUpdated('201011100100Z')
if mibBuilder.loadTexts: acdSfp.setOrganization('Accedian Networks, Inc.')
if mibBuilder.loadTexts: acdSfp.setContactInfo('Accedian Technical Assistance Center\n             Accedian Networks, Inc.\n             4878 Levy, suite 202\n             Saint-Laurent, Quebec Canada H4R 2P1\n             E-mail: support@accedian.com')
if mibBuilder.loadTexts: acdSfp.setDescription('The SFPs database for this Accedian Networks device.')
acdSfpNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 22420, 2, 4, 5))
acdSfpMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 22420, 2, 4, 6))
acdSfpConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 22420, 2, 4, 7))
acdSfpInfoTable = MibTable((1, 3, 6, 1, 4, 1, 22420, 2, 4, 1), )
if mibBuilder.loadTexts: acdSfpInfoTable.setStatus('current')
if mibBuilder.loadTexts: acdSfpInfoTable.setDescription('Table of all SFP info')
acdSfpInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22420, 2, 4, 1, 1), ).setIndexNames((0, "ACD-SFP-MIB", "acdSfpInfoID"))
if mibBuilder.loadTexts: acdSfpInfoEntry.setStatus('current')
if mibBuilder.loadTexts: acdSfpInfoEntry.setDescription("This is a part of the content of the SFP's 0xA0 EEPROM")
acdSfpInfoID = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 4, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: acdSfpInfoID.setStatus('current')
if mibBuilder.loadTexts: acdSfpInfoID.setDescription('Unique value for each SFP. Its value ranges from 1 to\n        MAXINT (4 bytes). ')
acdSfpInfoConnIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 4, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdSfpInfoConnIdx.setStatus('current')
if mibBuilder.loadTexts: acdSfpInfoConnIdx.setDescription('This object identifies the connector index on the box. The index\n         is assigned form left to rigth starting with 1.')
acdSfpInfoConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 32, 33))).clone(namedValues=NamedValues(("sfpSC", 1), ("sfpFC1COPPER", 2), ("sfpFC2COPPER", 3), ("sfpBNC", 4), ("sfpFCCOAX", 5), ("sfpFIBERJACK", 6), ("sfpLC", 7), ("sfpMTRJ", 8), ("sfpMU", 9), ("sfpSG", 10), ("sfpPIGTAIL", 11), ("sfpHSSDCII", 32), ("sfpCOPPERPIGTAIL", 33)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdSfpInfoConnType.setStatus('current')
if mibBuilder.loadTexts: acdSfpInfoConnType.setDescription('The connector value indicates the external optical or electrical\n         cable connector provided as the media interface.')
acdSfpInfoVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 4, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdSfpInfoVendor.setStatus('current')
if mibBuilder.loadTexts: acdSfpInfoVendor.setDescription('The vendor name is a 16 character field that contains ASCII \n         characters, left-aligned and padded on the right with ASCII \n         spaces (20h). The vendor name shall be the full name of the\n         corporation, a commonly accepted abbreviation of the name of\n         the corporation, the SCSI company code for the corporation, \n         or the stock exchange code for the corporation. At least one\n         of the vendor name or the vendor OUI fields shall contain \n         valid serial data.')
acdSfpInfoVendorOui = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 4, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdSfpInfoVendorOui.setStatus('current')
if mibBuilder.loadTexts: acdSfpInfoVendorOui.setDescription('The vendor organizationally unique identifier field (vendor OUI)\n         is a 3-byte field that contains the IEEE Company Identifier for \n         the vendor. A value of all zero in the 3-byte field indicates \n         that the Vendor OUI is unspecified.')
acdSfpInfoVendorPn = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 4, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdSfpInfoVendorPn.setStatus('current')
if mibBuilder.loadTexts: acdSfpInfoVendorPn.setDescription("The vendor part number (vendor PN) is a 16-byte field that\n         contains ASCII characters, leftaligned and padded on the \n         right with ASCII spaces (20h), defining the vendor's part \n         number or product name. A value of all zero in the 16-byte\n         field indicates that the vendor PN is unspecified.")
acdSfpInfoVendorRev = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 4, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdSfpInfoVendorRev.setStatus('current')
if mibBuilder.loadTexts: acdSfpInfoVendorRev.setDescription("The vendor revision number (vendor rev) is a 4-byte field that\n         contains ASCII characters, leftaligned and padded on the right\n         with ASCII spaces (20h), defining the vendor's product revision\n         number. A value of all zero in the 4-byte field indicates that\n         the vendor PN is unspecified.")
acdSfpInfoWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 4, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdSfpInfoWavelength.setStatus('current')
if mibBuilder.loadTexts: acdSfpInfoWavelength.setDescription('Nominal transmitter output wavelength at room temperature. 16 bit\n         value with byte 60 as high order byte and byte 61 as low order \n         byte. The laser wavelength is equal to the 16 bit integer\n         value in nm. This field allows the user to read the laser \n         wavelength directly, so it is not necessary to infer it from the\n         transceiver Code for Electronic Compatibility.')
acdSfpInfoSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 4, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdSfpInfoSerialNum.setStatus('current')
if mibBuilder.loadTexts: acdSfpInfoSerialNum.setDescription("The vendor serial number (vendor SN) is a 16 character field that\n        contains ASCII characters, left-aligned and padded on the right \n        with ASCII spaces (20h), defining the vendor's serial number for\n        the transceiver. A value of all zero in the 16-byte field indicates\n        that the vendor PN is unspecified.")
acdSfpInfoYear = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 4, 1, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdSfpInfoYear.setStatus('current')
if mibBuilder.loadTexts: acdSfpInfoYear.setDescription('This is the year of manufacturing.')
acdSfpInfoMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 4, 1, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdSfpInfoMonth.setStatus('current')
if mibBuilder.loadTexts: acdSfpInfoMonth.setDescription('This is the month of manufacturing.')
acdSfpInfoDay = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 4, 1, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdSfpInfoDay.setStatus('current')
if mibBuilder.loadTexts: acdSfpInfoDay.setDescription('This is the day of manufacturing.')
acdSfpInfoLot = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 4, 1, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdSfpInfoLot.setStatus('current')
if mibBuilder.loadTexts: acdSfpInfoLot.setDescription('This is the Lot number of manufacturing.')
acdSfpInfoRev8472 = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 4, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("undefined", 0), ("rev93", 1), ("rev94", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdSfpInfoRev8472.setStatus('current')
if mibBuilder.loadTexts: acdSfpInfoRev8472.setDescription('This is to indicate to which revision this SFP is compatible.')
acdSfpInfoPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 4, 1, 1, 15), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdSfpInfoPresent.setStatus('current')
if mibBuilder.loadTexts: acdSfpInfoPresent.setDescription('This is to indicate if the SFP is present or not.')
acdSfpInfoDiag = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 4, 1, 1, 16), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdSfpInfoDiag.setStatus('current')
if mibBuilder.loadTexts: acdSfpInfoDiag.setDescription('This is to indicate if the SFP supports Digital Diagnostics.')
acdSfpInfoInternal = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 4, 1, 1, 17), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdSfpInfoInternal.setStatus('current')
if mibBuilder.loadTexts: acdSfpInfoInternal.setDescription('This is to indicate if the SFP supports internal calibration. If\n         externally calibrated, the measurements are raw A/D values and must\n         be converted to real world units using calibration constants \n         stored in EEPROM locations 56 to 95 at 2 wire serial bus address\n         A2h. Calibration is valid over vendor specified operating \n         temperature and voltage. Alarm and warning threshold values\n         should be interpreted in the same manner as real time 16 bit data.')
acdSfpInfoAlm = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 4, 1, 1, 18), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdSfpInfoAlm.setStatus('current')
if mibBuilder.loadTexts: acdSfpInfoAlm.setDescription('This is to indicate if the SFP supports Alarm and warning \n        thresholds for the Digital Diagnostics.')
acdSfpInfoIdType = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 4, 1, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdSfpInfoIdType.setStatus('current')
if mibBuilder.loadTexts: acdSfpInfoIdType.setDescription('The identifier value specifies the physical device described by\n        the two-wire interface information. This value shall be included\n        in the two-wire interface data (see SFF-8472 for details).')
acdSfpInfoExtIdType = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 4, 1, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdSfpInfoExtIdType.setStatus('current')
if mibBuilder.loadTexts: acdSfpInfoExtIdType.setDescription('The extended identifier value provides additional information\n        about the transceiver. The field should be set to 04h for all SFP\n        modules indicating two-wire interface ID module definition (see\n        SFF-8472 for details).')
acdSfpInfoTransCode = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 4, 1, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdSfpInfoTransCode.setStatus('current')
if mibBuilder.loadTexts: acdSfpInfoTransCode.setDescription('The following bit significant indicators define the electronic\n        or optical interfaces that are supported by the transceiver. At\n        least one bit shall be set in this field (see SFF-8472 for details).')
acdSfpDiagTable = MibTable((1, 3, 6, 1, 4, 1, 22420, 2, 4, 2), )
if mibBuilder.loadTexts: acdSfpDiagTable.setStatus('current')
if mibBuilder.loadTexts: acdSfpDiagTable.setDescription('Table of all SFP Digital Diagnostics')
acdSfpDiagEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22420, 2, 4, 2, 1), ).setIndexNames((0, "ACD-SFP-MIB", "acdSfpDiagID"))
if mibBuilder.loadTexts: acdSfpDiagEntry.setStatus('current')
if mibBuilder.loadTexts: acdSfpDiagEntry.setDescription("This is a part the content of the SFP's 0xA0 EEPROM")
acdSfpDiagID = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 4, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: acdSfpDiagID.setStatus('current')
if mibBuilder.loadTexts: acdSfpDiagID.setDescription('Unique value for each SFP. Its value ranges from 1 to\n        MAXINT (4 bytes). ')
acdSfpDiagConnIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 4, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdSfpDiagConnIdx.setStatus('current')
if mibBuilder.loadTexts: acdSfpDiagConnIdx.setDescription('This object identifies the connector index on the box. The index\n         is assigned form left to rigth starting with 1.')
acdSfpDiagTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 4, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdSfpDiagTemp.setStatus('current')
if mibBuilder.loadTexts: acdSfpDiagTemp.setDescription('Internally measured transceiver temperature. Represented as a\n         16 bit signed twos complement value in degrees Celsius, yielding\n         a total range of -128C to +128C.')
acdSfpDiagVcc = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 4, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdSfpDiagVcc.setStatus('current')
if mibBuilder.loadTexts: acdSfpDiagVcc.setDescription('Internally measured transceiver supply voltage. Represented as\n         a 16 bit unsigned integer with the voltage defined as the full\n         16 bit value (0 to 65535) with LSB equal to 100 micro-Volt,\n         yielding a total range of 0 to +6.55 Volts.')
acdSfpDiagLbc = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 4, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdSfpDiagLbc.setStatus('current')
if mibBuilder.loadTexts: acdSfpDiagLbc.setDescription('Measured TX bias current in micro-Amps yielding a total range of\n         0 to 131 mA.')
acdSfpDiagTxPwr = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 4, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdSfpDiagTxPwr.setStatus('current')
if mibBuilder.loadTexts: acdSfpDiagTxPwr.setDescription('Measured TX output power in mW. Represented as a 16 bit unsigned\n         integer with the power defined as the full 16 bit value (0 to 65535)\n         with LSB equal to 0.1 micro-Watt, yielding a total range of 0 \n         to 6.5535 mW (~ -40 to +8.2 dBm).')
acdSfpDiagRxPwr = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 4, 2, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdSfpDiagRxPwr.setStatus('current')
if mibBuilder.loadTexts: acdSfpDiagRxPwr.setDescription('Measured Rx input power in mW. Represented as a 16 bit unsigned\n         integer with the power defined as the full 16 bit value (0 to 65535)\n         with LSB equal to 0.1 micro-Watt, yielding a total range of 0 \n         to 6.5535 mW (~ -40 to +8.2 dBm).')
acdSfpDiagTxPwrdBm = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 4, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdSfpDiagTxPwrdBm.setStatus('current')
if mibBuilder.loadTexts: acdSfpDiagTxPwrdBm.setDescription('Measured TX output power in dBm (~ -40 to +8.2 dBm).')
acdSfpDiagRxPwrdBm = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 4, 2, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdSfpDiagRxPwrdBm.setStatus('current')
if mibBuilder.loadTexts: acdSfpDiagRxPwrdBm.setDescription('Measured Rx input power in dBm (~ -40 to +8.2 dBm).')
acdSfpThreshTable = MibTable((1, 3, 6, 1, 4, 1, 22420, 2, 4, 3), )
if mibBuilder.loadTexts: acdSfpThreshTable.setStatus('current')
if mibBuilder.loadTexts: acdSfpThreshTable.setDescription('Table of all SFP Alarm and Warning Thresholds')
acdSfpThreshEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22420, 2, 4, 3, 1), ).setIndexNames((0, "ACD-SFP-MIB", "acdSfpThreshID"))
if mibBuilder.loadTexts: acdSfpThreshEntry.setStatus('current')
if mibBuilder.loadTexts: acdSfpThreshEntry.setDescription(" This is a part the content of the SFP's 0xA0 EEPROM")
acdSfpThreshID = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 4, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: acdSfpThreshID.setStatus('current')
if mibBuilder.loadTexts: acdSfpThreshID.setDescription('Unique value for each SFP. Its value ranges from 1 to\n        MAXINT (4 bytes). ')
acdSfpThreshConnIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 4, 3, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdSfpThreshConnIdx.setStatus('current')
if mibBuilder.loadTexts: acdSfpThreshConnIdx.setDescription('This object identifies the connector index on the box. The index\n         is assigned form left to rigth starting with 1.')
acdSfpThreshTempHighAlm = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 4, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdSfpThreshTempHighAlm.setStatus('current')
if mibBuilder.loadTexts: acdSfpThreshTempHighAlm.setDescription('High Alarm transceiver temperature. Represented as a 16 bit\n         signed twos complement value in degrees Celsius, yielding\n         a total range of -128C to +128C.')
acdSfpThreshTempLowAlm = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 4, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdSfpThreshTempLowAlm.setStatus('current')
if mibBuilder.loadTexts: acdSfpThreshTempLowAlm.setDescription('Low Alarm transceiver temperature. Represented as a 16 bit\n         signed twos complement value in degrees Celsius, yielding\n         a total range of -128C to +128C.')
acdSfpThreshTempHighWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 4, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdSfpThreshTempHighWarn.setStatus('current')
if mibBuilder.loadTexts: acdSfpThreshTempHighWarn.setDescription('High Warning transceiver temperature. Represented as a 16 bit\n         signed twos complement value in degrees Celsius, yielding\n         a total range of -128C to +128C.')
acdSfpThreshTempLowWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 4, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdSfpThreshTempLowWarn.setStatus('current')
if mibBuilder.loadTexts: acdSfpThreshTempLowWarn.setDescription('Low Warning transceiver temperature. Represented as a 16 bit\n         signed twos complement value in degrees Celsius, yielding\n         a total range of -128C to +128C.')
acdSfpThreshVccHighAlm = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 4, 3, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdSfpThreshVccHighAlm.setStatus('current')
if mibBuilder.loadTexts: acdSfpThreshVccHighAlm.setDescription('High Alarm transceiver supply voltage. Represented as\n         a 16 bit unsigned integer with the voltage defined as the full\n         16 bit value (0 to 65535) with LSB equal to 100 micro-Volt,\n         yielding a total range of 0 to +6.55 Volts.')
acdSfpThreshVccLowAlm = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 4, 3, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdSfpThreshVccLowAlm.setStatus('current')
if mibBuilder.loadTexts: acdSfpThreshVccLowAlm.setDescription('Low Alarm transceiver supply voltage. Represented as\n         a 16 bit unsigned integer with the voltage defined as the full\n         16 bit value (0 to 65535) with LSB equal to 100 micro-Volt,\n         yielding a total range of 0 to +6.55 Volts.')
acdSfpThreshVccHighWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 4, 3, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdSfpThreshVccHighWarn.setStatus('current')
if mibBuilder.loadTexts: acdSfpThreshVccHighWarn.setDescription('High Warning transceiver supply voltage. Represented as\n         a 16 bit unsigned integer with the voltage defined as the full\n         16 bit value (0 to 65535) with LSB equal to 100 micro-Volt,\n         yielding a total range of 0 to +6.55 Volts.')
acdSfpThreshVccLowWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 4, 3, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdSfpThreshVccLowWarn.setStatus('current')
if mibBuilder.loadTexts: acdSfpThreshVccLowWarn.setDescription('Low Warning transceiver supply voltage. Represented as\n         a 16 bit unsigned integer with the voltage defined as the full\n         16 bit value (0 to 65535) with LSB equal to 100 micro-Volt,\n         yielding a total range of 0 to +6.55 Volts.')
acdSfpThreshLbcHighAlm = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 4, 3, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdSfpThreshLbcHighAlm.setStatus('current')
if mibBuilder.loadTexts: acdSfpThreshLbcHighAlm.setDescription('High Alarm TX bias current in micro-Amps yielding a total range of\n         0 to 131 mA.')
acdSfpThreshLbcLowAlm = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 4, 3, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdSfpThreshLbcLowAlm.setStatus('current')
if mibBuilder.loadTexts: acdSfpThreshLbcLowAlm.setDescription('Low Alarm TX bias current in micro-Amps yielding a total range of\n         0 to 131 mA.')
acdSfpThreshLbcHighWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 4, 3, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdSfpThreshLbcHighWarn.setStatus('current')
if mibBuilder.loadTexts: acdSfpThreshLbcHighWarn.setDescription('High Warning TX bias current in micro-Amps yielding a total range of\n         0 to 131 mA.')
acdSfpThreshLbcLowWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 4, 3, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdSfpThreshLbcLowWarn.setStatus('current')
if mibBuilder.loadTexts: acdSfpThreshLbcLowWarn.setDescription('Low Warning TX bias current in micro-Amps yielding a total range of\n         0 to 131 mA.')
acdSfpThreshTxPwrHighAlm = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 4, 3, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdSfpThreshTxPwrHighAlm.setStatus('current')
if mibBuilder.loadTexts: acdSfpThreshTxPwrHighAlm.setDescription('High Alarm TX output power in mW. Represented as a 16 bit unsigned\n         integer with the power defined as the full 16 bit value (0 to 65535)\n         with LSB equal to 0.1 micro-Watt, yielding a total range of 0 \n         to 6.5535 mW (~ -40 to +8.2 dBm).')
acdSfpThreshTxPwrLowAlm = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 4, 3, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdSfpThreshTxPwrLowAlm.setStatus('current')
if mibBuilder.loadTexts: acdSfpThreshTxPwrLowAlm.setDescription('Low Alarm TX output power in mW. Represented as a 16 bit unsigned\n         integer with the power defined as the full 16 bit value (0 to 65535)\n         with LSB equal to 0.1 micro-Watt, yielding a total range of 0 \n         to 6.5535 mW (~ -40 to +8.2 dBm).')
acdSfpThreshTxPwrHighWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 4, 3, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdSfpThreshTxPwrHighWarn.setStatus('current')
if mibBuilder.loadTexts: acdSfpThreshTxPwrHighWarn.setDescription('High Warning TX output power in mW. Represented as a 16 bit unsigned\n         integer with the power defined as the full 16 bit value (0 to 65535)\n         with LSB equal to 0.1 micro-Watt, yielding a total range of 0 \n         to 6.5535 mW (~ -40 to +8.2 dBm).')
acdSfpThreshTxPwrLowWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 4, 3, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdSfpThreshTxPwrLowWarn.setStatus('current')
if mibBuilder.loadTexts: acdSfpThreshTxPwrLowWarn.setDescription('Low Warning TX output power in mW. Represented as a 16 bit unsigned\n         integer with the power defined as the full 16 bit value (0 to 65535)\n         with LSB equal to 0.1 micro-Watt, yielding a total range of 0 \n         to 6.5535 mW (~ -40 to +8.2 dBm).')
acdSfpThreshRxPwrHighAlm = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 4, 3, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdSfpThreshRxPwrHighAlm.setStatus('current')
if mibBuilder.loadTexts: acdSfpThreshRxPwrHighAlm.setDescription('High Alarm RX input power in mW. Represented as a 16 bit unsigned\n         integer with the power defined as the full 16 bit value (0 to 65535)\n         with LSB equal to 0.1 micro-Watt, yielding a total range of 0 \n         to 6.5535 mW (~ -40 to +8.2 dBm).')
acdSfpThreshRxPwrLowAlm = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 4, 3, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdSfpThreshRxPwrLowAlm.setStatus('current')
if mibBuilder.loadTexts: acdSfpThreshRxPwrLowAlm.setDescription('Low Alarm RX input power in mW. Represented as a 16 bit unsigned\n         integer with the power defined as the full 16 bit value (0 to 65535)\n         with LSB equal to 0.1 micro-Watt, yielding a total range of 0 \n         to 6.5535 mW (~ -40 to +8.2 dBm).')
acdSfpThreshRxPwrHighWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 4, 3, 1, 21), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdSfpThreshRxPwrHighWarn.setStatus('current')
if mibBuilder.loadTexts: acdSfpThreshRxPwrHighWarn.setDescription('High Warning RX input power in mW. Represented as a 16 bit unsigned\n         integer with the power defined as the full 16 bit value (0 to 65535)\n         with LSB equal to 0.1 micro-Watt, yielding a total range of 0 \n         to 6.5535 mW (~ -40 to +8.2 dBm).')
acdSfpThreshRxPwrLowWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 4, 3, 1, 22), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdSfpThreshRxPwrLowWarn.setStatus('current')
if mibBuilder.loadTexts: acdSfpThreshRxPwrLowWarn.setDescription('Low Warning RX input power in mW. Represented as a 16 bit unsigned\n         integer with the power defined as the full 16 bit value (0 to 65535)\n         with LSB equal to 0.1 micro-Watt, yielding a total range of 0 \n         to 6.5535 mW (~ -40 to +8.2 dBm).')
acdSfpThreshTxPwrHighAlmdBm = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 4, 3, 1, 23), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdSfpThreshTxPwrHighAlmdBm.setStatus('current')
if mibBuilder.loadTexts: acdSfpThreshTxPwrHighAlmdBm.setDescription('High Alarm TX output power in dBm (~ -40 to +8.2 dBm).')
acdSfpThreshTxPwrLowAlmdBm = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 4, 3, 1, 24), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdSfpThreshTxPwrLowAlmdBm.setStatus('current')
if mibBuilder.loadTexts: acdSfpThreshTxPwrLowAlmdBm.setDescription('Low Alarm TX output power in dBm (~ -40 to +8.2 dBm).')
acdSfpThreshTxPwrHighWarndBm = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 4, 3, 1, 25), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdSfpThreshTxPwrHighWarndBm.setStatus('current')
if mibBuilder.loadTexts: acdSfpThreshTxPwrHighWarndBm.setDescription('High Warning TX output power in dBm (~ -40 to +8.2 dBm).')
acdSfpThreshTxPwrLowWarndBm = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 4, 3, 1, 26), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdSfpThreshTxPwrLowWarndBm.setStatus('current')
if mibBuilder.loadTexts: acdSfpThreshTxPwrLowWarndBm.setDescription('Low Warning TX output power in dBm (~ -40 to +8.2 dBm).')
acdSfpThreshRxPwrHighAlmdBm = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 4, 3, 1, 27), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdSfpThreshRxPwrHighAlmdBm.setStatus('current')
if mibBuilder.loadTexts: acdSfpThreshRxPwrHighAlmdBm.setDescription('High Alarm Rx input power in dBm (~ -40 to +8.2 dBm).')
acdSfpThreshRxPwrLowAlmdBm = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 4, 3, 1, 28), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdSfpThreshRxPwrLowAlmdBm.setStatus('current')
if mibBuilder.loadTexts: acdSfpThreshRxPwrLowAlmdBm.setDescription('Low Alarm Rx input power in dBm (~ -40 to +8.2 dBm).')
acdSfpThreshRxPwrHighWarndBm = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 4, 3, 1, 29), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdSfpThreshRxPwrHighWarndBm.setStatus('current')
if mibBuilder.loadTexts: acdSfpThreshRxPwrHighWarndBm.setDescription('High Warning Rx input power in dBm (~ -40 to +8.2 dBm).')
acdSfpThreshRxPwrLowWarndBm = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 4, 3, 1, 30), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdSfpThreshRxPwrLowWarndBm.setStatus('current')
if mibBuilder.loadTexts: acdSfpThreshRxPwrLowWarndBm.setDescription('Low Warning Rx input power in dBm (~ -40 to +8.2 dBm).')
acdSfpThreshStatusTable = MibTable((1, 3, 6, 1, 4, 1, 22420, 2, 4, 4), )
if mibBuilder.loadTexts: acdSfpThreshStatusTable.setStatus('current')
if mibBuilder.loadTexts: acdSfpThreshStatusTable.setDescription('Table of all SFP Digital Diagnostics Thresholds statuses')
acdSfpThreshStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22420, 2, 4, 4, 1), ).setIndexNames((0, "ACD-SFP-MIB", "acdSfpThreshStatusID"))
if mibBuilder.loadTexts: acdSfpThreshStatusEntry.setStatus('current')
if mibBuilder.loadTexts: acdSfpThreshStatusEntry.setDescription("This is a part the content of the SFP's 0xA2 EEPROM")
acdSfpThreshStatusID = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 4, 4, 1, 1), Unsigned32())
if mibBuilder.loadTexts: acdSfpThreshStatusID.setStatus('current')
if mibBuilder.loadTexts: acdSfpThreshStatusID.setDescription('Unique value for each SFP. Its value ranges from 1 to\n        MAXINT (4 bytes). ')
acdSfpThreshStatusConnIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 4, 4, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdSfpThreshStatusConnIdx.setStatus('current')
if mibBuilder.loadTexts: acdSfpThreshStatusConnIdx.setDescription('This object identifies the connector index on the box. The index\n         is assigned form left to rigth starting with 1.')
acdSfpThreshStatusTempHighAlm = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 4, 4, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdSfpThreshStatusTempHighAlm.setStatus('current')
if mibBuilder.loadTexts: acdSfpThreshStatusTempHighAlm.setDescription('This is to indicate if the temperature reaches or overpasses the High \n         alarm threshold.')
acdSfpThreshStatusTempLowAlm = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 4, 4, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdSfpThreshStatusTempLowAlm.setStatus('current')
if mibBuilder.loadTexts: acdSfpThreshStatusTempLowAlm.setDescription('This is to indicate if the temperature reaches or underpasses the Low \n         alarm threshold.')
acdSfpThreshStatusTempHighWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 4, 4, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdSfpThreshStatusTempHighWarn.setStatus('current')
if mibBuilder.loadTexts: acdSfpThreshStatusTempHighWarn.setDescription('This is to indicate if the temperature reaches or overpasses the High \n         warning threshold.')
acdSfpThreshStatusTempLowWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 4, 4, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdSfpThreshStatusTempLowWarn.setStatus('current')
if mibBuilder.loadTexts: acdSfpThreshStatusTempLowWarn.setDescription('This is to indicate if the temperature reaches or underpasses the Low\n         warning threshold.')
acdSfpThreshStatusVccHighAlm = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 4, 4, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdSfpThreshStatusVccHighAlm.setStatus('current')
if mibBuilder.loadTexts: acdSfpThreshStatusVccHighAlm.setDescription('This is to indicate if the supply voltage reaches or overpasses the High \n         alarm threshold.')
acdSfpThreshStatusVccLowAlm = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 4, 4, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdSfpThreshStatusVccLowAlm.setStatus('current')
if mibBuilder.loadTexts: acdSfpThreshStatusVccLowAlm.setDescription('This is to indicate if the supply voltage reaches or underpasses the Low\n         alarm threshold.')
acdSfpThreshStatusVccHighWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 4, 4, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdSfpThreshStatusVccHighWarn.setStatus('current')
if mibBuilder.loadTexts: acdSfpThreshStatusVccHighWarn.setDescription('This is to indicate if the supply voltage reaches or overpasses the High \n         warning threshold.')
acdSfpThreshStatusVccLowWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 4, 4, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdSfpThreshStatusVccLowWarn.setStatus('current')
if mibBuilder.loadTexts: acdSfpThreshStatusVccLowWarn.setDescription('This is to indicate if the supply voltage reaches or underpasses the Low\n         warning threshold.')
acdSfpThreshStatusLbcHighAlm = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 4, 4, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdSfpThreshStatusLbcHighAlm.setStatus('current')
if mibBuilder.loadTexts: acdSfpThreshStatusLbcHighAlm.setDescription('This is to indicate if the Laser Bias Current reaches or overpasses\n         the High alarm threshold.')
acdSfpThreshStatusLbcLowAlm = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 4, 4, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdSfpThreshStatusLbcLowAlm.setStatus('current')
if mibBuilder.loadTexts: acdSfpThreshStatusLbcLowAlm.setDescription('This is to indicate if the Laser Bias Current reaches or underpasses\n         the Low alarm threshold.')
acdSfpThreshStatusLbcHighWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 4, 4, 1, 13), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdSfpThreshStatusLbcHighWarn.setStatus('current')
if mibBuilder.loadTexts: acdSfpThreshStatusLbcHighWarn.setDescription('This is to indicate if the Laser Bias Current reaches or overpasses\n         the High warning threshold.')
acdSfpThreshStatusLbcLowWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 4, 4, 1, 14), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdSfpThreshStatusLbcLowWarn.setStatus('current')
if mibBuilder.loadTexts: acdSfpThreshStatusLbcLowWarn.setDescription('This is to indicate if the Laser Bias Current reaches or underpasses\n         the Low warning threshold.')
acdSfpThreshStatusTxPwrHighAlm = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 4, 4, 1, 15), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdSfpThreshStatusTxPwrHighAlm.setStatus('current')
if mibBuilder.loadTexts: acdSfpThreshStatusTxPwrHighAlm.setDescription('This is to indicate if the Transmit Power reaches or overpasses the High \n         alarm threshold.')
acdSfpThreshStatusTxPwrLowAlm = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 4, 4, 1, 16), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdSfpThreshStatusTxPwrLowAlm.setStatus('current')
if mibBuilder.loadTexts: acdSfpThreshStatusTxPwrLowAlm.setDescription('This is to indicate if the Transmit Power reaches or underpasses the Low\n         alarm threshold.')
acdSfpThreshStatusTxPwrHighWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 4, 4, 1, 17), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdSfpThreshStatusTxPwrHighWarn.setStatus('current')
if mibBuilder.loadTexts: acdSfpThreshStatusTxPwrHighWarn.setDescription('This is to indicate if the Transmit Power reaches or overpasses the High \n         warning threshold.')
acdSfpThreshStatusTxPwrLowWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 4, 4, 1, 18), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdSfpThreshStatusTxPwrLowWarn.setStatus('current')
if mibBuilder.loadTexts: acdSfpThreshStatusTxPwrLowWarn.setDescription('This is to indicate if the Transmit Power reaches or underpasses the Low\n         warning threshold.')
acdSfpThreshStatusRxPwrHighAlm = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 4, 4, 1, 19), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdSfpThreshStatusRxPwrHighAlm.setStatus('current')
if mibBuilder.loadTexts: acdSfpThreshStatusRxPwrHighAlm.setDescription('This is to indicate if the Receive Power reaches or overpasses the High \n         alarm threshold.')
acdSfpThreshStatusRxPwrLowAlm = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 4, 4, 1, 20), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdSfpThreshStatusRxPwrLowAlm.setStatus('current')
if mibBuilder.loadTexts: acdSfpThreshStatusRxPwrLowAlm.setDescription('This is to indicate if the Receive Power reaches or underpasses the Low \n         alarm threshold.')
acdSfpThreshStatusRxPwrHighWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 4, 4, 1, 21), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdSfpThreshStatusRxPwrHighWarn.setStatus('current')
if mibBuilder.loadTexts: acdSfpThreshStatusRxPwrHighWarn.setDescription('This is to indicate if the Receive Power reaches or overpasses the High \n         warning threshold.')
acdSfpThreshStatusRxPwrLowWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 4, 4, 1, 22), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdSfpThreshStatusRxPwrLowWarn.setStatus('current')
if mibBuilder.loadTexts: acdSfpThreshStatusRxPwrLowWarn.setDescription('This is to indicate if the Receive Power reaches or underpasses the Low \n         warning threshold.')
acdSfpCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 22420, 2, 4, 7, 1))
acdSfpGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 22420, 2, 4, 7, 2))
acdSfpInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 22420, 2, 4, 7, 2, 1)).setObjects(("ACD-SFP-MIB", "acdSfpInfoConnIdx"), ("ACD-SFP-MIB", "acdSfpInfoConnType"), ("ACD-SFP-MIB", "acdSfpInfoVendor"), ("ACD-SFP-MIB", "acdSfpInfoVendorOui"), ("ACD-SFP-MIB", "acdSfpInfoVendorPn"), ("ACD-SFP-MIB", "acdSfpInfoVendorRev"), ("ACD-SFP-MIB", "acdSfpInfoWavelength"), ("ACD-SFP-MIB", "acdSfpInfoSerialNum"), ("ACD-SFP-MIB", "acdSfpInfoYear"), ("ACD-SFP-MIB", "acdSfpInfoMonth"), ("ACD-SFP-MIB", "acdSfpInfoDay"), ("ACD-SFP-MIB", "acdSfpInfoLot"), ("ACD-SFP-MIB", "acdSfpInfoRev8472"), ("ACD-SFP-MIB", "acdSfpInfoPresent"), ("ACD-SFP-MIB", "acdSfpInfoDiag"), ("ACD-SFP-MIB", "acdSfpInfoInternal"), ("ACD-SFP-MIB", "acdSfpInfoAlm"), ("ACD-SFP-MIB", "acdSfpInfoIdType"), ("ACD-SFP-MIB", "acdSfpInfoExtIdType"), ("ACD-SFP-MIB", "acdSfpInfoTransCode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    acdSfpInfoGroup = acdSfpInfoGroup.setStatus('current')
if mibBuilder.loadTexts: acdSfpInfoGroup.setDescription('Objects for the SFP information Group.')
acdSfpDiagGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 22420, 2, 4, 7, 2, 2)).setObjects(("ACD-SFP-MIB", "acdSfpDiagConnIdx"), ("ACD-SFP-MIB", "acdSfpDiagTemp"), ("ACD-SFP-MIB", "acdSfpDiagVcc"), ("ACD-SFP-MIB", "acdSfpDiagLbc"), ("ACD-SFP-MIB", "acdSfpDiagTxPwr"), ("ACD-SFP-MIB", "acdSfpDiagRxPwr"), ("ACD-SFP-MIB", "acdSfpDiagTxPwrdBm"), ("ACD-SFP-MIB", "acdSfpDiagRxPwrdBm"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    acdSfpDiagGroup = acdSfpDiagGroup.setStatus('current')
if mibBuilder.loadTexts: acdSfpDiagGroup.setDescription('Objects for the SFP diagnostics Group.')
acdSfpThreshGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 22420, 2, 4, 7, 2, 3)).setObjects(("ACD-SFP-MIB", "acdSfpThreshConnIdx"), ("ACD-SFP-MIB", "acdSfpThreshTempHighAlm"), ("ACD-SFP-MIB", "acdSfpThreshTempLowAlm"), ("ACD-SFP-MIB", "acdSfpThreshTempHighWarn"), ("ACD-SFP-MIB", "acdSfpThreshTempLowWarn"), ("ACD-SFP-MIB", "acdSfpThreshVccHighAlm"), ("ACD-SFP-MIB", "acdSfpThreshVccLowAlm"), ("ACD-SFP-MIB", "acdSfpThreshVccHighWarn"), ("ACD-SFP-MIB", "acdSfpThreshVccLowWarn"), ("ACD-SFP-MIB", "acdSfpThreshLbcHighAlm"), ("ACD-SFP-MIB", "acdSfpThreshLbcLowAlm"), ("ACD-SFP-MIB", "acdSfpThreshLbcHighWarn"), ("ACD-SFP-MIB", "acdSfpThreshLbcLowWarn"), ("ACD-SFP-MIB", "acdSfpThreshTxPwrHighAlm"), ("ACD-SFP-MIB", "acdSfpThreshTxPwrLowAlm"), ("ACD-SFP-MIB", "acdSfpThreshTxPwrHighWarn"), ("ACD-SFP-MIB", "acdSfpThreshTxPwrLowWarn"), ("ACD-SFP-MIB", "acdSfpThreshRxPwrHighAlm"), ("ACD-SFP-MIB", "acdSfpThreshRxPwrLowAlm"), ("ACD-SFP-MIB", "acdSfpThreshRxPwrHighWarn"), ("ACD-SFP-MIB", "acdSfpThreshRxPwrLowWarn"), ("ACD-SFP-MIB", "acdSfpThreshTxPwrHighAlmdBm"), ("ACD-SFP-MIB", "acdSfpThreshTxPwrLowAlmdBm"), ("ACD-SFP-MIB", "acdSfpThreshTxPwrHighWarndBm"), ("ACD-SFP-MIB", "acdSfpThreshTxPwrLowWarndBm"), ("ACD-SFP-MIB", "acdSfpThreshRxPwrHighAlmdBm"), ("ACD-SFP-MIB", "acdSfpThreshRxPwrLowAlmdBm"), ("ACD-SFP-MIB", "acdSfpThreshRxPwrHighWarndBm"), ("ACD-SFP-MIB", "acdSfpThreshRxPwrLowWarndBm"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    acdSfpThreshGroup = acdSfpThreshGroup.setStatus('current')
if mibBuilder.loadTexts: acdSfpThreshGroup.setDescription('Objects for the SFP thresholds Group.')
acdSfpThreshStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 22420, 2, 4, 7, 2, 4)).setObjects(("ACD-SFP-MIB", "acdSfpThreshStatusConnIdx"), ("ACD-SFP-MIB", "acdSfpThreshStatusTempHighAlm"), ("ACD-SFP-MIB", "acdSfpThreshStatusTempLowAlm"), ("ACD-SFP-MIB", "acdSfpThreshStatusTempHighWarn"), ("ACD-SFP-MIB", "acdSfpThreshStatusTempLowWarn"), ("ACD-SFP-MIB", "acdSfpThreshStatusVccHighAlm"), ("ACD-SFP-MIB", "acdSfpThreshStatusVccLowAlm"), ("ACD-SFP-MIB", "acdSfpThreshStatusVccHighWarn"), ("ACD-SFP-MIB", "acdSfpThreshStatusVccLowWarn"), ("ACD-SFP-MIB", "acdSfpThreshStatusLbcHighAlm"), ("ACD-SFP-MIB", "acdSfpThreshStatusLbcLowAlm"), ("ACD-SFP-MIB", "acdSfpThreshStatusLbcHighWarn"), ("ACD-SFP-MIB", "acdSfpThreshStatusLbcLowWarn"), ("ACD-SFP-MIB", "acdSfpThreshStatusTxPwrHighAlm"), ("ACD-SFP-MIB", "acdSfpThreshStatusTxPwrLowAlm"), ("ACD-SFP-MIB", "acdSfpThreshStatusTxPwrHighWarn"), ("ACD-SFP-MIB", "acdSfpThreshStatusTxPwrLowWarn"), ("ACD-SFP-MIB", "acdSfpThreshStatusRxPwrHighAlm"), ("ACD-SFP-MIB", "acdSfpThreshStatusRxPwrLowAlm"), ("ACD-SFP-MIB", "acdSfpThreshStatusRxPwrHighWarn"), ("ACD-SFP-MIB", "acdSfpThreshStatusRxPwrLowWarn"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    acdSfpThreshStatusGroup = acdSfpThreshStatusGroup.setStatus('current')
if mibBuilder.loadTexts: acdSfpThreshStatusGroup.setDescription('Objects for the SFP threshold status Group.')
acdSfpCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 22420, 2, 4, 7, 1, 1)).setObjects(("ACD-SFP-MIB", "acdSfpInfoGroup"), ("ACD-SFP-MIB", "acdSfpDiagGroup"), ("ACD-SFP-MIB", "acdSfpThreshGroup"), ("ACD-SFP-MIB", "acdSfpThreshStatusGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    acdSfpCompliance = acdSfpCompliance.setStatus('current')
if mibBuilder.loadTexts: acdSfpCompliance.setDescription('The compliance statement for support of the ACD-SFP-MIB module.')
mibBuilder.exportSymbols("ACD-SFP-MIB", acdSfpThreshVccHighWarn=acdSfpThreshVccHighWarn, acdSfpThreshStatusVccHighAlm=acdSfpThreshStatusVccHighAlm, acdSfpInfoIdType=acdSfpInfoIdType, acdSfpDiagLbc=acdSfpDiagLbc, acdSfpThreshTable=acdSfpThreshTable, acdSfpInfoYear=acdSfpInfoYear, acdSfpThreshStatusTempLowAlm=acdSfpThreshStatusTempLowAlm, acdSfpThreshStatusLbcLowWarn=acdSfpThreshStatusLbcLowWarn, acdSfpInfoVendor=acdSfpInfoVendor, acdSfpThreshStatusID=acdSfpThreshStatusID, acdSfpThreshRxPwrLowWarndBm=acdSfpThreshRxPwrLowWarndBm, acdSfpInfoPresent=acdSfpInfoPresent, acdSfpThreshRxPwrLowAlmdBm=acdSfpThreshRxPwrLowAlmdBm, acdSfpInfoID=acdSfpInfoID, acdSfpThreshTempLowWarn=acdSfpThreshTempLowWarn, acdSfpThreshTempLowAlm=acdSfpThreshTempLowAlm, acdSfpThreshGroup=acdSfpThreshGroup, acdSfpCompliance=acdSfpCompliance, acdSfpInfoAlm=acdSfpInfoAlm, acdSfpThreshTxPwrHighWarn=acdSfpThreshTxPwrHighWarn, acdSfpDiagTemp=acdSfpDiagTemp, acdSfpGroups=acdSfpGroups, acdSfpThreshConnIdx=acdSfpThreshConnIdx, acdSfpThreshStatusTempLowWarn=acdSfpThreshStatusTempLowWarn, acdSfpThreshVccLowAlm=acdSfpThreshVccLowAlm, acdSfpThreshStatusVccLowWarn=acdSfpThreshStatusVccLowWarn, acdSfpInfoTransCode=acdSfpInfoTransCode, acdSfpInfoWavelength=acdSfpInfoWavelength, acdSfpThreshEntry=acdSfpThreshEntry, acdSfpThreshRxPwrHighAlmdBm=acdSfpThreshRxPwrHighAlmdBm, acdSfpThreshTxPwrLowWarn=acdSfpThreshTxPwrLowWarn, acdSfpConformance=acdSfpConformance, acdSfpThreshStatusTempHighWarn=acdSfpThreshStatusTempHighWarn, acdSfpThreshTempHighAlm=acdSfpThreshTempHighAlm, acdSfpCompliances=acdSfpCompliances, acdSfpThreshStatusGroup=acdSfpThreshStatusGroup, acdSfpMIBObjects=acdSfpMIBObjects, acdSfpDiagGroup=acdSfpDiagGroup, acdSfpThreshRxPwrHighWarn=acdSfpThreshRxPwrHighWarn, acdSfpThreshStatusEntry=acdSfpThreshStatusEntry, acdSfpDiagID=acdSfpDiagID, acdSfpInfoDiag=acdSfpInfoDiag, acdSfpDiagTable=acdSfpDiagTable, acdSfpThreshStatusLbcHighAlm=acdSfpThreshStatusLbcHighAlm, acdSfpInfoEntry=acdSfpInfoEntry, acdSfpThreshRxPwrHighAlm=acdSfpThreshRxPwrHighAlm, acdSfpThreshRxPwrLowAlm=acdSfpThreshRxPwrLowAlm, acdSfpThreshVccLowWarn=acdSfpThreshVccLowWarn, acdSfpThreshTxPwrHighAlmdBm=acdSfpThreshTxPwrHighAlmdBm, acdSfpNotifications=acdSfpNotifications, acdSfpInfoExtIdType=acdSfpInfoExtIdType, acdSfpThreshRxPwrLowWarn=acdSfpThreshRxPwrLowWarn, acdSfpDiagEntry=acdSfpDiagEntry, acdSfpThreshVccHighAlm=acdSfpThreshVccHighAlm, acdSfpThreshStatusVccHighWarn=acdSfpThreshStatusVccHighWarn, acdSfpThreshStatusLbcLowAlm=acdSfpThreshStatusLbcLowAlm, acdSfpDiagRxPwr=acdSfpDiagRxPwr, acdSfpThreshStatusTempHighAlm=acdSfpThreshStatusTempHighAlm, acdSfpInfoVendorOui=acdSfpInfoVendorOui, acdSfpDiagTxPwr=acdSfpDiagTxPwr, acdSfpDiagConnIdx=acdSfpDiagConnIdx, acdSfpInfoTable=acdSfpInfoTable, acdSfpThreshLbcHighAlm=acdSfpThreshLbcHighAlm, acdSfpThreshStatusTxPwrLowAlm=acdSfpThreshStatusTxPwrLowAlm, acdSfpThreshTxPwrLowWarndBm=acdSfpThreshTxPwrLowWarndBm, acdSfpThreshStatusRxPwrHighAlm=acdSfpThreshStatusRxPwrHighAlm, acdSfpThreshTxPwrHighAlm=acdSfpThreshTxPwrHighAlm, acdSfpInfoDay=acdSfpInfoDay, acdSfpInfoSerialNum=acdSfpInfoSerialNum, acdSfpDiagTxPwrdBm=acdSfpDiagTxPwrdBm, acdSfpInfoConnIdx=acdSfpInfoConnIdx, acdSfpThreshStatusTxPwrHighAlm=acdSfpThreshStatusTxPwrHighAlm, acdSfpThreshLbcLowAlm=acdSfpThreshLbcLowAlm, acdSfp=acdSfp, PYSNMP_MODULE_ID=acdSfp, acdSfpThreshRxPwrHighWarndBm=acdSfpThreshRxPwrHighWarndBm, acdSfpThreshStatusVccLowAlm=acdSfpThreshStatusVccLowAlm, acdSfpDiagRxPwrdBm=acdSfpDiagRxPwrdBm, acdSfpThreshTxPwrLowAlmdBm=acdSfpThreshTxPwrLowAlmdBm, acdSfpThreshLbcHighWarn=acdSfpThreshLbcHighWarn, acdSfpThreshID=acdSfpThreshID, acdSfpThreshStatusConnIdx=acdSfpThreshStatusConnIdx, acdSfpThreshStatusLbcHighWarn=acdSfpThreshStatusLbcHighWarn, acdSfpDiagVcc=acdSfpDiagVcc, acdSfpThreshStatusRxPwrHighWarn=acdSfpThreshStatusRxPwrHighWarn, acdSfpThreshTxPwrLowAlm=acdSfpThreshTxPwrLowAlm, acdSfpThreshStatusTable=acdSfpThreshStatusTable, acdSfpThreshStatusRxPwrLowAlm=acdSfpThreshStatusRxPwrLowAlm, acdSfpInfoInternal=acdSfpInfoInternal, acdSfpInfoLot=acdSfpInfoLot, acdSfpInfoGroup=acdSfpInfoGroup, acdSfpThreshStatusTxPwrHighWarn=acdSfpThreshStatusTxPwrHighWarn, acdSfpThreshLbcLowWarn=acdSfpThreshLbcLowWarn, acdSfpThreshTempHighWarn=acdSfpThreshTempHighWarn, acdSfpInfoVendorRev=acdSfpInfoVendorRev, acdSfpInfoVendorPn=acdSfpInfoVendorPn, acdSfpInfoMonth=acdSfpInfoMonth, acdSfpInfoConnType=acdSfpInfoConnType, acdSfpThreshStatusRxPwrLowWarn=acdSfpThreshStatusRxPwrLowWarn, acdSfpInfoRev8472=acdSfpInfoRev8472, acdSfpThreshStatusTxPwrLowWarn=acdSfpThreshStatusTxPwrLowWarn, acdSfpThreshTxPwrHighWarndBm=acdSfpThreshTxPwrHighWarndBm)
