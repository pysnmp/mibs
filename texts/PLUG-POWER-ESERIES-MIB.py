#
# PySNMP MIB module PLUG-POWER-ESERIES-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/plugpower/PLUG-POWER-ESERIES-MIB
# Produced by pysmi-1.1.12 at Tue Sep 17 10:04:34 2024
# On host fv-az1427-100 platform Linux version 6.5.0-1025-azure by user runner
# Using Python version 3.10.14 (main, Jul 16 2024, 19:03:10) [GCC 11.4.0]
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
TimeTicks, IpAddress, ModuleIdentity, Integer32, enterprises, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, iso, MibIdentifier, Bits, NotificationType, Counter32, Gauge32, ObjectIdentity, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "IpAddress", "ModuleIdentity", "Integer32", "enterprises", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "iso", "MibIdentifier", "Bits", "NotificationType", "Counter32", "Gauge32", "ObjectIdentity", "Counter64")
AutonomousType, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "AutonomousType", "TextualConvention", "DisplayString")
plugPowerMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 17022))
plugPowerMIB.setRevisions(('2016-03-03 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: plugPowerMIB.setRevisionsDescriptions(('Seventh version.',))
if mibBuilder.loadTexts: plugPowerMIB.setLastUpdated('201603030000Z')
if mibBuilder.loadTexts: plugPowerMIB.setOrganization('Plug Power, Inc')
if mibBuilder.loadTexts: plugPowerMIB.setContactInfo('\r\n                Postal: Plug Power\r\n                        15913 East Euclid Avenue\r\n                        Spokane, Wa  99216\r\n\r\n                   Tel: +1 509-228-6500\r\n       24 Hour Support: +1 866-661-0020\r\n\r\n              Internet: www.plugpower.com\r\n                E-mail: GenSureTechSupport@plugpower.com')
if mibBuilder.loadTexts: plugPowerMIB.setDescription('MIB module for Plug Power products.')
class PositiveInteger(TextualConvention, Integer32):
    description = 'This data type is a non-zero and non-negative value.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 2147483647)

class NonNegativeInteger(TextualConvention, Integer32):
    description = 'This data type is a non-negative value.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147483647)

class FloatingPointNumber(TextualConvention, Integer32):
    description = 'This data type is a floating point number.'
    status = 'current'
    displayHint = 'x'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147483647)

fuelCellSys = MibIdentifier((1, 3, 6, 1, 4, 1, 17022, 1))
fcsTSeries = MibIdentifier((1, 3, 6, 1, 4, 1, 17022, 1, 1))
fcsESeries = MibIdentifier((1, 3, 6, 1, 4, 1, 17022, 1, 2))
fcsE2Gen2 = MibIdentifier((1, 3, 6, 1, 4, 1, 17022, 1, 3))
fcsEObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1))
fcsEMain = MibIdentifier((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 1))
fcsEMainManufacturerModel = MibScalar((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcsEMainManufacturerModel.setStatus('current')
if mibBuilder.loadTexts: fcsEMainManufacturerModel.setDescription('Model designation.')
fcsEMainMIBVersion010102 = MibScalar((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcsEMainMIBVersion010102.setStatus('current')
if mibBuilder.loadTexts: fcsEMainMIBVersion010102.setDescription('The MIB version.')
fcsEMainName = MibScalar((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsEMainName.setStatus('current')
if mibBuilder.loadTexts: fcsEMainName.setDescription("A string displaying the system's name.")
fcsEMainLocation = MibScalar((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsEMainLocation.setStatus('current')
if mibBuilder.loadTexts: fcsEMainLocation.setDescription("A string displaying the system's location.")
fcsEMainDate = MibScalar((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsEMainDate.setStatus('current')
if mibBuilder.loadTexts: fcsEMainDate.setDescription('A string displaying the date in the format mm/dd/yy.')
fcsEMainTime = MibScalar((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsEMainTime.setStatus('current')
if mibBuilder.loadTexts: fcsEMainTime.setDescription('A string displaying the time in the format hh:mm:ss.\r\n                The hour is 24 hour time, 0->23.')
fcsEMainAlarms = MibScalar((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcsEMainAlarms.setStatus('current')
if mibBuilder.loadTexts: fcsEMainAlarms.setDescription('Indication of any alarms, will display None, Minor,\r\n                Major, or Customer Attn.')
fcsEMainSystemStatus = MibScalar((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcsEMainSystemStatus.setStatus('current')
if mibBuilder.loadTexts: fcsEMainSystemStatus.setDescription('The present System status.\r\n                POWERUP, STANDBY, WARMUP, RUN, EXERCISE, COOLDOWN, ALARM')
fcsEMainChassisSerNum = MibScalar((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcsEMainChassisSerNum.setStatus('current')
if mibBuilder.loadTexts: fcsEMainChassisSerNum.setDescription('The chassis serial number.')
fcsEMainCommCardVersion = MibScalar((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcsEMainCommCardVersion.setStatus('current')
if mibBuilder.loadTexts: fcsEMainCommCardVersion.setDescription('The firmware/software version of CommCard.')
fcsEMainConverterVersion = MibScalar((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcsEMainConverterVersion.setStatus('current')
if mibBuilder.loadTexts: fcsEMainConverterVersion.setDescription('The firmware/software version of Converter.')
fcsEMainPower = MibScalar((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 36))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcsEMainPower.setStatus('current')
if mibBuilder.loadTexts: fcsEMainPower.setDescription('The voltage, current, and watts being produced by\r\n                the fuel cell.')
fcsEMainPressurePSI = MibScalar((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcsEMainPressurePSI.setStatus('current')
if mibBuilder.loadTexts: fcsEMainPressurePSI.setDescription('The H2 pressure.')
fcsEMainHeater = MibScalar((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcsEMainHeater.setStatus('current')
if mibBuilder.loadTexts: fcsEMainHeater.setDescription('The main heater status, on/off.')
fcsEMainLastRun = MibScalar((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcsEMainLastRun.setStatus('current')
if mibBuilder.loadTexts: fcsEMainLastRun.setDescription('The date of last run.')
fcsEMainTotalTime = MibScalar((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcsEMainTotalTime.setStatus('current')
if mibBuilder.loadTexts: fcsEMainTotalTime.setDescription('The total run time (hh:mm).')
fcsEMainKilowattHours = MibScalar((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcsEMainKilowattHours.setStatus('current')
if mibBuilder.loadTexts: fcsEMainKilowattHours.setDescription('The kilowatt hours (hh:mm).')
fcsEMainSystemRuns = MibScalar((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcsEMainSystemRuns.setStatus('current')
if mibBuilder.loadTexts: fcsEMainSystemRuns.setDescription('The Number of System Runs.')
fcsEMainChassisTemp = MibScalar((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcsEMainChassisTemp.setStatus('current')
if mibBuilder.loadTexts: fcsEMainChassisTemp.setDescription('The current chassis temperature, degrees C.')
fcsEMainBleedTempSensor = MibScalar((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsEMainBleedTempSensor.setStatus('current')
if mibBuilder.loadTexts: fcsEMainBleedTempSensor.setDescription('Indicates if the bleed temperature sensor is installed.')
fcsEMainResetSystem = MibScalar((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsEMainResetSystem.setStatus('current')
if mibBuilder.loadTexts: fcsEMainResetSystem.setDescription('Resets / Reboots the system.')
fcsEMainVolts = MibScalar((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 36))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcsEMainVolts.setStatus('current')
if mibBuilder.loadTexts: fcsEMainVolts.setDescription('The voltage being produced by the fuel cell.')
fcsEMainAmps = MibScalar((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 36))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcsEMainAmps.setStatus('current')
if mibBuilder.loadTexts: fcsEMainAmps.setDescription('The current being produced by the fuel cell.')
fcsEMainWatts = MibScalar((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 36))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcsEMainWatts.setStatus('current')
if mibBuilder.loadTexts: fcsEMainWatts.setDescription('The watts being produced by the fuel cell.')
fcsERun = MibIdentifier((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 2))
fcsERunStartStop = MibScalar((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("start", 1), ("stop", 2), ("busy", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsERunStartStop.setStatus('current')
if mibBuilder.loadTexts: fcsERunStartStop.setDescription('Manual Start and Stop.')
fcsERunSystemStatus = MibScalar((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcsERunSystemStatus.setStatus('current')
if mibBuilder.loadTexts: fcsERunSystemStatus.setDescription('The present System status.')
fcsERunStartStatus = MibScalar((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcsERunStartStatus.setStatus('current')
if mibBuilder.loadTexts: fcsERunStartStatus.setDescription('The present Run status.')
fcsERunFloatVolt = MibScalar((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 2, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsERunFloatVolt.setStatus('current')
if mibBuilder.loadTexts: fcsERunFloatVolt.setDescription('The Float Voltage.  The voltage to charge\r\n                the batteries to when the system is running.')
fcsERunLowVoltThreshold = MibScalar((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 2, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsERunLowVoltThreshold.setStatus('current')
if mibBuilder.loadTexts: fcsERunLowVoltThreshold.setDescription('The low voltage at which the system will start\r\n                automatically if enabled.')
fcsERunLowVoltStartMode = MibScalar((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("float", 2), ("maintain", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsERunLowVoltStartMode.setStatus('current')
if mibBuilder.loadTexts: fcsERunLowVoltStartMode.setDescription('Disables low voltage start or Enables low voltage\r\n                start in either float or maintain modes.')
fcsERunLowVoltTimer = MibScalar((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115, 120, 240))).clone(namedValues=NamedValues(("minutes005", 5), ("minutes010", 10), ("minutes015", 15), ("minutes020", 20), ("minutes025", 25), ("minutes030", 30), ("minutes035", 35), ("minutes040", 40), ("minutes045", 45), ("minutes050", 50), ("minutes055", 55), ("minutes060", 60), ("minutes065", 65), ("minutes070", 70), ("minutes075", 75), ("minutes080", 80), ("minutes085", 85), ("minutes090", 90), ("minutes095", 95), ("minutes100", 100), ("minutes105", 105), ("minutes110", 110), ("minutes115", 115), ("minutes120", 120), ("minutes240", 240)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsERunLowVoltTimer.setStatus('current')
if mibBuilder.loadTexts: fcsERunLowVoltTimer.setDescription('Number of minutes to maintain Float Voltage on\r\n                the batteries before shutting down.  Valid minutes\r\n                are between 5 and 120 in 5 minute increments and\r\n                240.  A value of 0 sets a 1/2 volt above the float\r\n                voltage before the low volt start will end, this\r\n                requires another voltage source to drive the 1/2\r\n                volt above.  A value of 0 will continue to run on\r\n                a low volt start until another voltage source picks\r\n                up the load.')
fcsERunLowVoltageFloatTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 2, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcsERunLowVoltageFloatTimeOut.setStatus('current')
if mibBuilder.loadTexts: fcsERunLowVoltageFloatTimeOut.setDescription('The current time at float voltage, (mm:ss).')
fcsERunContactStartDelay = MibScalar((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 2, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsERunContactStartDelay.setStatus('current')
if mibBuilder.loadTexts: fcsERunContactStartDelay.setDescription('Number of minutes to wait on a contact start\r\n                condition before the system starts.')
fcsERunContactStartTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 2, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcsERunContactStartTimeOut.setStatus('current')
if mibBuilder.loadTexts: fcsERunContactStartTimeOut.setDescription('The current time at contact start delay, (mm:ss).')
fcsERunPower = MibScalar((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 2, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 36))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcsERunPower.setStatus('current')
if mibBuilder.loadTexts: fcsERunPower.setDescription('The voltage, current, and watts being produced by\r\n                the fuel cell.')
fcsERunPressurePSI = MibScalar((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 2, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcsERunPressurePSI.setStatus('current')
if mibBuilder.loadTexts: fcsERunPressurePSI.setDescription('The H2 pressure.')
fcsERunLowH2PressureAlarm = MibScalar((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 2, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsERunLowH2PressureAlarm.setStatus('current')
if mibBuilder.loadTexts: fcsERunLowH2PressureAlarm.setDescription('The Low H2 Pressure Alarm setting.  ')
fcsERunLowH2PressureAlert = MibScalar((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 2, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsERunLowH2PressureAlert.setStatus('current')
if mibBuilder.loadTexts: fcsERunLowH2PressureAlert.setDescription('The Low H2 Pressure Alert setting.  ')
fcsERunLowH2PressureAlertStatus = MibScalar((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 2, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcsERunLowH2PressureAlertStatus.setStatus('current')
if mibBuilder.loadTexts: fcsERunLowH2PressureAlertStatus.setDescription('The Low H2 Pressure Alert current status.')
fcsERunAuxOutAssigned = MibScalar((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 2, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("lowH2Alert", 1), ("auxInput", 2), ("exercise", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsERunAuxOutAssigned.setStatus('current')
if mibBuilder.loadTexts: fcsERunAuxOutAssigned.setDescription('Aux Out assigned to.')
fcsERunPowerLimiting = MibScalar((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 2, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("percent020", 2), ("percent030", 3), ("percent040", 4), ("percent050", 5), ("percent060", 6), ("percent070", 7), ("percent080", 8), ("percent090", 9), ("percent100", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsERunPowerLimiting.setStatus('current')
if mibBuilder.loadTexts: fcsERunPowerLimiting.setDescription('Percentage of rated power to limit the\r\n                output power to.')
fcsERunClearNoPressureAlarm = MibScalar((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 2, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsERunClearNoPressureAlarm.setStatus('current')
if mibBuilder.loadTexts: fcsERunClearNoPressureAlarm.setDescription('Clears the No Pressure / No H2 Fuel Major alarm.')
fcsERunSystemLockTime = MibScalar((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 2, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsERunSystemLockTime.setStatus('current')
if mibBuilder.loadTexts: fcsERunSystemLockTime.setDescription('Number of minutes to lock the system.')
fcsERunSystemLockTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 2, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcsERunSystemLockTimeOut.setStatus('current')
if mibBuilder.loadTexts: fcsERunSystemLockTimeOut.setDescription('Time left that the system will be locked, (mm:ss).')
fcsERunLockSystem = MibScalar((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 2, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("lock", 1), ("unlock", 2), ("locked", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsERunLockSystem.setStatus('current')
if mibBuilder.loadTexts: fcsERunLockSystem.setDescription('Lock the system.')
fcsERunAuxInAssigned = MibScalar((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 2, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("nothing", 1), ("lock", 2), ("door", 3), ("extLd1-2k", 4), ("extLd1-3k", 5), ("extLd2", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsERunAuxInAssigned.setStatus('current')
if mibBuilder.loadTexts: fcsERunAuxInAssigned.setDescription('Aux Out assigned to.')
fcsERunVolts = MibScalar((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 2, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 36))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcsERunVolts.setStatus('current')
if mibBuilder.loadTexts: fcsERunVolts.setDescription('The voltage being produced by the fuel cell.')
fcsERunAmps = MibScalar((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 2, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 36))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcsERunAmps.setStatus('current')
if mibBuilder.loadTexts: fcsERunAmps.setDescription('The current being produced by the fuel cell.')
fcsERunWatts = MibScalar((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 2, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 36))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcsERunWatts.setStatus('current')
if mibBuilder.loadTexts: fcsERunWatts.setDescription('The watts being produced by the fuel cell.')
fcsEExercise = MibIdentifier((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 3))
fcsEExerciseManualExercise = MibScalar((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("start", 1), ("stop", 2), ("busy", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsEExerciseManualExercise.setStatus('current')
if mibBuilder.loadTexts: fcsEExerciseManualExercise.setDescription('Manual Start and Stop.')
fcsEExerciseExerciseMode = MibScalar((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("autoSchedule", 1), ("numOfDays", 2), ("dayOfMonth", 3), ("disabled", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsEExerciseExerciseMode.setStatus('current')
if mibBuilder.loadTexts: fcsEExerciseExerciseMode.setDescription('Auto Schedule mode, number of day mode,\r\n                day of the month mode, or disabled.')
fcsEExerciseNumOfDaysOrDayOfMonth = MibScalar((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 45))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsEExerciseNumOfDaysOrDayOfMonth.setStatus('current')
if mibBuilder.loadTexts: fcsEExerciseNumOfDaysOrDayOfMonth.setDescription('Number of days between Auto exercising, or\r\n                day of the month that system will auto exercise\r\n                depending on ExerciseType setting.')
fcsEExerciseTimeOfDay = MibScalar((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("at-0-AM", 1), ("at-1-AM", 2), ("at-2-AM", 3), ("at-3-AM", 4), ("at-4-AM", 5), ("at-5-AM", 6), ("at-6-AM", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsEExerciseTimeOfDay.setStatus('current')
if mibBuilder.loadTexts: fcsEExerciseTimeOfDay.setDescription('Time of day for Auto exercising, on the hour\r\n                between midnight and 6 AM.')
fcsEExerciseSetNextExerciseDate = MibScalar((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 3, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsEExerciseSetNextExerciseDate.setStatus('current')
if mibBuilder.loadTexts: fcsEExerciseSetNextExerciseDate.setDescription('Set the next date for auto exercising to be done.')
fcsEExerciseNextExerciseDate = MibScalar((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 3, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcsEExerciseNextExerciseDate.setStatus('current')
if mibBuilder.loadTexts: fcsEExerciseNextExerciseDate.setDescription('Displays date and time of when the next scheduled\r\n                auto exercise is to run.')
fcsEExerciseCond1StartStop = MibScalar((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("start", 1), ("stop", 2), ("busy", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsEExerciseCond1StartStop.setStatus('current')
if mibBuilder.loadTexts: fcsEExerciseCond1StartStop.setDescription('Conditioning 1 Run, Start and Stop')
fcsEAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 4))
fcsEAlarms = MibScalar((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 4, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcsEAlarms.setStatus('current')
if mibBuilder.loadTexts: fcsEAlarms.setDescription('The present number of Major and Minor alarms.')
fcsEAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 4, 2), )
if mibBuilder.loadTexts: fcsEAlarmTable.setStatus('current')
if mibBuilder.loadTexts: fcsEAlarmTable.setDescription('A list of alarm table entries.  The table contains\r\n               zero, one, or many rows at any moment, depending upon\r\n               the number of alarm conditions in effect.  The agent\r\n               creates a row in the table each time a condition is\r\n               detected and deletes that row when that condition no\r\n               longer pertains.  The fcsEAlarmId that indexes the table\r\n               is the index into the products alarm table. Consequently\r\n               the table is sparse, e.g., containing entries\r\n               for alarm indices 5, 10, 11, and 20 and the entries should\r\n               not be assumed to be in chronological or alarm severity\r\n               order.\r\n\r\n               Alarms are named by an AutonomousType (OBJECT IDENTIFIER),\r\n               fcsEAlarmDescr.  No two rows will have the same value of\r\n               fcsEAlarmDescr, since alarms define conditions.  In order\r\n               to meet this requirement, care should be taken in the\r\n               definition of alarm conditions to insure that a system\r\n               cannot enter the same condition multiple times simultaneously.\r\n\r\n               The number of rows in the table at any given time is\r\n               reflected by the value of fcsEAlarmsPresent.')
fcsEAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 4, 2, 1), ).setIndexNames((0, "PLUG-POWER-ESERIES-MIB", "fcsEAlarmId"))
if mibBuilder.loadTexts: fcsEAlarmEntry.setStatus('current')
if mibBuilder.loadTexts: fcsEAlarmEntry.setDescription('An entry containing information applicable to a\r\n               particular alarm.')
fcsEAlarmId = MibTableColumn((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 4, 2, 1, 1), PositiveInteger())
if mibBuilder.loadTexts: fcsEAlarmId.setStatus('current')
if mibBuilder.loadTexts: fcsEAlarmId.setDescription('A unique identifier for an alarm condition.  This\r\n               value must remain constant.')
fcsEAlarmDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 4, 2, 1, 2), AutonomousType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcsEAlarmDescr.setStatus('current')
if mibBuilder.loadTexts: fcsEAlarmDescr.setDescription('A reference to an alarm description object.  The\r\n               object referenced should not be accessible, but rather\r\n               be used to provide a unique description of the alarm\r\n               condition.')
fcsEAlarmType = MibTableColumn((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("major", 1), ("minor", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcsEAlarmType.setStatus('current')
if mibBuilder.loadTexts: fcsEAlarmType.setDescription('The type of alarm, Major or Minor.')
fcsEAlarmTime = MibTableColumn((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 4, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcsEAlarmTime.setStatus('current')
if mibBuilder.loadTexts: fcsEAlarmTime.setDescription('The date and time of when the alarm became active\r\n                in the format mm/dd/yy hh:mm:ss')
fcsESystemAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 5))
fcsEAlarmNoCurrentAlarms = ObjectIdentity((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 5, 0))
if mibBuilder.loadTexts: fcsEAlarmNoCurrentAlarms.setStatus('current')
if mibBuilder.loadTexts: fcsEAlarmNoCurrentAlarms.setDescription('No current alarms.  Not used.')
fcsMJAlarmVerMismatch = ObjectIdentity((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 5, 1))
if mibBuilder.loadTexts: fcsMJAlarmVerMismatch.setStatus('current')
if mibBuilder.loadTexts: fcsMJAlarmVerMismatch.setDescription('Major Alarm:  Comm Card running an incompatible\r\n                version to the Controller running version.')
fcsMJAlarmTermVoltsLow = ObjectIdentity((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 5, 2))
if mibBuilder.loadTexts: fcsMJAlarmTermVoltsLow.setStatus('current')
if mibBuilder.loadTexts: fcsMJAlarmTermVoltsLow.setDescription("Major Alarm:  The System's Terminal voltage is so\r\n                low that there isn't enough power for the fuel\r\n                cell system to start.")
fcsMJAlarmTermVoltsHigh = ObjectIdentity((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 5, 3))
if mibBuilder.loadTexts: fcsMJAlarmTermVoltsHigh.setStatus('current')
if mibBuilder.loadTexts: fcsMJAlarmTermVoltsHigh.setDescription('Major Alarm:  High Terminal Voltage.\r\n                System will not start.')
fcsMJAlarmNoH2Pressure = ObjectIdentity((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 5, 4))
if mibBuilder.loadTexts: fcsMJAlarmNoH2Pressure.setStatus('current')
if mibBuilder.loadTexts: fcsMJAlarmNoH2Pressure.setDescription('Major Alarm:  No H2 Pressure.\r\n                System will not run.')
fcsMJAlarmCommLinkDown = ObjectIdentity((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 5, 5))
if mibBuilder.loadTexts: fcsMJAlarmCommLinkDown.setStatus('current')
if mibBuilder.loadTexts: fcsMJAlarmCommLinkDown.setDescription('Major Alarm:  CommCard and Converter communications\r\n                link is down.  System will not start.')
fcsMJAlarmSafetyCheckFail = ObjectIdentity((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 5, 6))
if mibBuilder.loadTexts: fcsMJAlarmSafetyCheckFail.setStatus('current')
if mibBuilder.loadTexts: fcsMJAlarmSafetyCheckFail.setDescription('Major Alarm:  Safety Check Failed.\r\n                System will not start.')
fcsMJAlarmH2SensorTopLtHigh = ObjectIdentity((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 5, 7))
if mibBuilder.loadTexts: fcsMJAlarmH2SensorTopLtHigh.setStatus('current')
if mibBuilder.loadTexts: fcsMJAlarmH2SensorTopLtHigh.setDescription('Major Alarm:  H2 Sensor is detecting a high\r\n                concentration of H2.\r\n                Top sensor on E2500, Left sensor on E1100.')
fcsMJAlarmH2SensorBotRtHigh = ObjectIdentity((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 5, 8))
if mibBuilder.loadTexts: fcsMJAlarmH2SensorBotRtHigh.setStatus('current')
if mibBuilder.loadTexts: fcsMJAlarmH2SensorBotRtHigh.setDescription('Major Alarm:  H2 Sensor is detecting a high\r\n                concentration of H2.\r\n                Bot sensor on E2500, Right sensor on E1100.')
fcsMJAlarmH2SensorTopLtFail = ObjectIdentity((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 5, 9))
if mibBuilder.loadTexts: fcsMJAlarmH2SensorTopLtFail.setStatus('current')
if mibBuilder.loadTexts: fcsMJAlarmH2SensorTopLtFail.setDescription('Major Alarm:  H2 Sensor has failed.\r\n                Top sensor on E2500, Left sensor on E1100.')
fcsMJAlarmH2SensorBotRtFail = ObjectIdentity((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 5, 10))
if mibBuilder.loadTexts: fcsMJAlarmH2SensorBotRtFail.setStatus('current')
if mibBuilder.loadTexts: fcsMJAlarmH2SensorBotRtFail.setDescription('Major Alarm:  H2 Sensor 2 has failed.\r\n                Bot sensor on E2500, Right sensor on E1100.')
fcsMJAlarmSafetyFanFail = ObjectIdentity((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 5, 11))
if mibBuilder.loadTexts: fcsMJAlarmSafetyFanFail.setStatus('current')
if mibBuilder.loadTexts: fcsMJAlarmSafetyFanFail.setDescription('Major Alarm:  Safety Circuit Fan has failed.')
fcsMJAlarmSafetyTempFail = ObjectIdentity((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 5, 12))
if mibBuilder.loadTexts: fcsMJAlarmSafetyTempFail.setStatus('current')
if mibBuilder.loadTexts: fcsMJAlarmSafetyTempFail.setDescription('Major Alarm:  System is too hot to run.')
fcsMJAlarmModOpenCircuitVoltage = ObjectIdentity((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 5, 13))
if mibBuilder.loadTexts: fcsMJAlarmModOpenCircuitVoltage.setStatus('current')
if mibBuilder.loadTexts: fcsMJAlarmModOpenCircuitVoltage.setDescription('Major Alarm:  Fuel Cell Module did not have high\r\n                enough voltage on startup to run.')
fcsMJAlarmModShortedCircuitVoltage = ObjectIdentity((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 5, 14))
if mibBuilder.loadTexts: fcsMJAlarmModShortedCircuitVoltage.setStatus('current')
if mibBuilder.loadTexts: fcsMJAlarmModShortedCircuitVoltage.setDescription('Major Alarm:  While running the Fuel Cell Module\r\n                voltage got too low to continue to run.')
fcsMJAlarmModTooHighVoltage = ObjectIdentity((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 5, 15))
if mibBuilder.loadTexts: fcsMJAlarmModTooHighVoltage.setStatus('current')
if mibBuilder.loadTexts: fcsMJAlarmModTooHighVoltage.setDescription('Major Alarm:  While running the Fuel Cell Module\r\n                voltage got too high to continue to run.')
fcsMJAlarmConverterID = ObjectIdentity((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 5, 16))
if mibBuilder.loadTexts: fcsMJAlarmConverterID.setStatus('current')
if mibBuilder.loadTexts: fcsMJAlarmConverterID.setDescription('Major Alarm:  The Comm Card does not know\r\n                what the Converter is.  System will not run.')
fcsMJAllModTempSensorsFailed = ObjectIdentity((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 5, 17))
if mibBuilder.loadTexts: fcsMJAllModTempSensorsFailed.setStatus('current')
if mibBuilder.loadTexts: fcsMJAllModTempSensorsFailed.setDescription('Major Alarm:  All Fuel Cell Modules temperature\r\n                sensors have failed.  System will not run.')
fcsMJAlarmSystemIsDown = ObjectIdentity((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 5, 18))
if mibBuilder.loadTexts: fcsMJAlarmSystemIsDown.setStatus('current')
if mibBuilder.loadTexts: fcsMJAlarmSystemIsDown.setDescription('Major Alarm:  The System is down.  It cannot run.')
fcsMJAlarmModsTooCold = ObjectIdentity((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 5, 19))
if mibBuilder.loadTexts: fcsMJAlarmModsTooCold.setStatus('current')
if mibBuilder.loadTexts: fcsMJAlarmModsTooCold.setDescription('Major Alarm:  Modules are TOO cold to run.')
fcsMNAlarmModTopFailed = ObjectIdentity((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 5, 20))
if mibBuilder.loadTexts: fcsMNAlarmModTopFailed.setStatus('current')
if mibBuilder.loadTexts: fcsMNAlarmModTopFailed.setDescription('Minor Alarm:  Top Module did not reach Open Circuit\r\n                voltage when starting up.\r\n                System will run on bottom module(s) at half power.')
fcsMNAlarmMod2Failed = ObjectIdentity((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 5, 21))
if mibBuilder.loadTexts: fcsMNAlarmMod2Failed.setStatus('current')
if mibBuilder.loadTexts: fcsMNAlarmMod2Failed.setDescription('Minor Alarm:  E2500 Module 2 did not reach Open Circuit\r\n                voltage when starting up.\r\n                System will run on bottom modules at half power.')
fcsMNAlarmMod3Failed = ObjectIdentity((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 5, 22))
if mibBuilder.loadTexts: fcsMNAlarmMod3Failed.setStatus('current')
if mibBuilder.loadTexts: fcsMNAlarmMod3Failed.setDescription('Minor Alarm:  E2500 Module 3 did not reach Open Circuit\r\n                voltage when starting up.\r\n                System will run on top modules at half power.')
fcsMNAlarmModBotFailed = ObjectIdentity((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 5, 23))
if mibBuilder.loadTexts: fcsMNAlarmModBotFailed.setStatus('current')
if mibBuilder.loadTexts: fcsMNAlarmModBotFailed.setDescription('Minor Alarm:  Bottom Module did not reach Open Circuit\r\n                voltage when starting up.\r\n                System will run on top module(s) at half power.')
fcsMNAlarmH2SensorTopLtLow = ObjectIdentity((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 5, 24))
if mibBuilder.loadTexts: fcsMNAlarmH2SensorTopLtLow.setStatus('current')
if mibBuilder.loadTexts: fcsMNAlarmH2SensorTopLtLow.setDescription('Minor Alarm:  H2 Sensor is detecting a low\r\n                concentration of H2.\r\n                Top sensor on E2500, Left sensor on E1100.')
fcsMNAlarmH2SensorBotRtLow = ObjectIdentity((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 5, 25))
if mibBuilder.loadTexts: fcsMNAlarmH2SensorBotRtLow.setStatus('current')
if mibBuilder.loadTexts: fcsMNAlarmH2SensorBotRtLow.setDescription('Minor Alarm:  H2 Sensor is detecting a low\r\n                concentration of H2.\r\n                Bottom sensor on E2500, Right sensor on E1100.')
fcsMNAlarmBleedTempSensor = ObjectIdentity((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 5, 26))
if mibBuilder.loadTexts: fcsMNAlarmBleedTempSensor.setStatus('current')
if mibBuilder.loadTexts: fcsMNAlarmBleedTempSensor.setDescription('Minor Alarm:  Bleed temperature sensor has failed.')
fcsMNAlarmModTopLtTempSensor = ObjectIdentity((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 5, 27))
if mibBuilder.loadTexts: fcsMNAlarmModTopLtTempSensor.setStatus('current')
if mibBuilder.loadTexts: fcsMNAlarmModTopLtTempSensor.setDescription('Minor Alarm:  Top Module Left temperature sensor\r\n                has failed.')
fcsMNAlarmModTopRtTempSensor = ObjectIdentity((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 5, 28))
if mibBuilder.loadTexts: fcsMNAlarmModTopRtTempSensor.setStatus('current')
if mibBuilder.loadTexts: fcsMNAlarmModTopRtTempSensor.setDescription('Minor Alarm:  Top Module Right temperature sensor\r\n                has failed.')
fcsMNAlarmModTwoLtTempSensor = ObjectIdentity((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 5, 29))
if mibBuilder.loadTexts: fcsMNAlarmModTwoLtTempSensor.setStatus('current')
if mibBuilder.loadTexts: fcsMNAlarmModTwoLtTempSensor.setDescription('Minor Alarm:  Module two Left temperature sensor\r\n                has failed.  Only E2500 alarm.')
fcsMNAlarmModTwoRtTempSensor = ObjectIdentity((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 5, 30))
if mibBuilder.loadTexts: fcsMNAlarmModTwoRtTempSensor.setStatus('current')
if mibBuilder.loadTexts: fcsMNAlarmModTwoRtTempSensor.setDescription('Minor Alarm:  Module two Right temperature sensor\r\n                has failed.  Only E2500 alarm.')
fcsMNAlarmModThreeLtTempSensor = ObjectIdentity((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 5, 31))
if mibBuilder.loadTexts: fcsMNAlarmModThreeLtTempSensor.setStatus('current')
if mibBuilder.loadTexts: fcsMNAlarmModThreeLtTempSensor.setDescription('Minor Alarm:  Module three Left temperature sensor\r\n                has failed.  Only E2500 alarm.')
fcsMNAlarmModThreeRtTempSensor = ObjectIdentity((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 5, 32))
if mibBuilder.loadTexts: fcsMNAlarmModThreeRtTempSensor.setStatus('current')
if mibBuilder.loadTexts: fcsMNAlarmModThreeRtTempSensor.setDescription('Minor Alarm:  Module three Right temperature sensor\r\n                has failed.  Only E2500 alarm.')
fcsMNAlarmModBotLtTempSensor = ObjectIdentity((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 5, 33))
if mibBuilder.loadTexts: fcsMNAlarmModBotLtTempSensor.setStatus('current')
if mibBuilder.loadTexts: fcsMNAlarmModBotLtTempSensor.setDescription('Minor Alarm:  Bottom Module Left temperature sensor\r\n                has failed.')
fcsMNAlarmModBotRtTempSensor = ObjectIdentity((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 5, 34))
if mibBuilder.loadTexts: fcsMNAlarmModBotRtTempSensor.setStatus('current')
if mibBuilder.loadTexts: fcsMNAlarmModBotRtTempSensor.setDescription('Minor Alarm:  Bottom Module Right temperature sensor\r\n                has failed.')
fcsMNAlarmExtFan1Failed = ObjectIdentity((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 5, 35))
if mibBuilder.loadTexts: fcsMNAlarmExtFan1Failed.setStatus('current')
if mibBuilder.loadTexts: fcsMNAlarmExtFan1Failed.setDescription('Minor Alarm:  Exhaust Fan 1 has Failed.')
fcsMNAlarmExtFan2Failed = ObjectIdentity((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 5, 36))
if mibBuilder.loadTexts: fcsMNAlarmExtFan2Failed.setStatus('current')
if mibBuilder.loadTexts: fcsMNAlarmExtFan2Failed.setDescription('Minor Alarm:  Exhaust Fan 2 has Failed.')
fcsMNAlarmExtFan3Failed = ObjectIdentity((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 5, 37))
if mibBuilder.loadTexts: fcsMNAlarmExtFan3Failed.setStatus('current')
if mibBuilder.loadTexts: fcsMNAlarmExtFan3Failed.setDescription('Minor Alarm:  Exhaust Fan 3 has Failed.')
fcsMNAlarmExtFan4Failed = ObjectIdentity((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 5, 38))
if mibBuilder.loadTexts: fcsMNAlarmExtFan4Failed.setStatus('current')
if mibBuilder.loadTexts: fcsMNAlarmExtFan4Failed.setDescription('Minor Alarm:  Exhaust Fan 4 has Failed.')
fcsMNAlarmExtFan5Failed = ObjectIdentity((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 5, 39))
if mibBuilder.loadTexts: fcsMNAlarmExtFan5Failed.setStatus('current')
if mibBuilder.loadTexts: fcsMNAlarmExtFan5Failed.setDescription('Minor Alarm:  Exhaust Fan 5 has Failed.')
fcsMNAlarmExtFan6Failed = ObjectIdentity((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 5, 40))
if mibBuilder.loadTexts: fcsMNAlarmExtFan6Failed.setStatus('current')
if mibBuilder.loadTexts: fcsMNAlarmExtFan6Failed.setDescription('Minor Alarm:  Exhaust Fan 6 has Failed.')
fcsMNAlarmRecFan1Failed = ObjectIdentity((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 5, 41))
if mibBuilder.loadTexts: fcsMNAlarmRecFan1Failed.setStatus('current')
if mibBuilder.loadTexts: fcsMNAlarmRecFan1Failed.setDescription('Minor Alarm:  Recirculation Fan 1 has Failed.')
fcsMNAlarmRecFan2Failed = ObjectIdentity((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 5, 42))
if mibBuilder.loadTexts: fcsMNAlarmRecFan2Failed.setStatus('current')
if mibBuilder.loadTexts: fcsMNAlarmRecFan2Failed.setDescription('Minor Alarm:  Recirculation Fan 2 has Failed.')
fcsMNAlarmRecFan3Failed = ObjectIdentity((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 5, 43))
if mibBuilder.loadTexts: fcsMNAlarmRecFan3Failed.setStatus('current')
if mibBuilder.loadTexts: fcsMNAlarmRecFan3Failed.setDescription('Minor Alarm:  Recirculation Fan 3 has Failed.')
fcsMNAlarmRecFan4Failed = ObjectIdentity((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 5, 44))
if mibBuilder.loadTexts: fcsMNAlarmRecFan4Failed.setStatus('current')
if mibBuilder.loadTexts: fcsMNAlarmRecFan4Failed.setDescription('Minor Alarm:  Recirculation Fan 4 has Failed.')
fcsMNAlarmRecFan5Failed = ObjectIdentity((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 5, 45))
if mibBuilder.loadTexts: fcsMNAlarmRecFan5Failed.setStatus('current')
if mibBuilder.loadTexts: fcsMNAlarmRecFan5Failed.setDescription('Minor Alarm:  Recirculation Fan 5 has Failed.')
fcsMNAlarmRecFan6Failed = ObjectIdentity((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 5, 46))
if mibBuilder.loadTexts: fcsMNAlarmRecFan6Failed.setStatus('current')
if mibBuilder.loadTexts: fcsMNAlarmRecFan6Failed.setDescription('Minor Alarm:  Recirculation Fan 6 has Failed.')
fcsMNAlarmRecFan7Failed = ObjectIdentity((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 5, 47))
if mibBuilder.loadTexts: fcsMNAlarmRecFan7Failed.setStatus('current')
if mibBuilder.loadTexts: fcsMNAlarmRecFan7Failed.setDescription('Minor Alarm:  Recirculation Fan 7 has Failed.')
fcsMNAlarmRecFan8Failed = ObjectIdentity((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 5, 48))
if mibBuilder.loadTexts: fcsMNAlarmRecFan8Failed.setStatus('current')
if mibBuilder.loadTexts: fcsMNAlarmRecFan8Failed.setDescription('Minor Alarm:  Recirculation Fan 8 has Failed.')
fcsMNAlarmRecFan9Failed = ObjectIdentity((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 5, 49))
if mibBuilder.loadTexts: fcsMNAlarmRecFan9Failed.setStatus('current')
if mibBuilder.loadTexts: fcsMNAlarmRecFan9Failed.setDescription('Minor Alarm:  Recirculation Fan 9 has Failed.')
fcsMNAlarmRecFan10Failed = ObjectIdentity((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 5, 50))
if mibBuilder.loadTexts: fcsMNAlarmRecFan10Failed.setStatus('current')
if mibBuilder.loadTexts: fcsMNAlarmRecFan10Failed.setDescription('Minor Alarm:  Recirculation Fan 10 has Failed.')
fcsMNAlarmConverterCheckSumError = ObjectIdentity((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 5, 51))
if mibBuilder.loadTexts: fcsMNAlarmConverterCheckSumError.setStatus('current')
if mibBuilder.loadTexts: fcsMNAlarmConverterCheckSumError.setDescription('Minor Alarm:  Converter Code Checksum Error.')
fcsMJAlarmModsTooHotToRun = ObjectIdentity((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 5, 52))
if mibBuilder.loadTexts: fcsMJAlarmModsTooHotToRun.setStatus('current')
if mibBuilder.loadTexts: fcsMJAlarmModsTooHotToRun.setDescription('Major Alarm:  Modules Too Hot to Run.')
fcsMJAlarmSystemLocked = ObjectIdentity((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 5, 53))
if mibBuilder.loadTexts: fcsMJAlarmSystemLocked.setStatus('current')
if mibBuilder.loadTexts: fcsMJAlarmSystemLocked.setDescription('Major Alarm:  User has locked the system.')
fcsMNAlarmCommCardCheckSumError = ObjectIdentity((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 5, 54))
if mibBuilder.loadTexts: fcsMNAlarmCommCardCheckSumError.setStatus('current')
if mibBuilder.loadTexts: fcsMNAlarmCommCardCheckSumError.setDescription('Minor Alarm:  Comm Card Code Checksum Error.')
fcsMNAlarmWebPagesCheckSumError = ObjectIdentity((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 5, 55))
if mibBuilder.loadTexts: fcsMNAlarmWebPagesCheckSumError.setStatus('current')
if mibBuilder.loadTexts: fcsMNAlarmWebPagesCheckSumError.setDescription('Minor Alarm:  Web Pages Checksum Error.')
fcsMJAlarmTesting = ObjectIdentity((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 5, 56))
if mibBuilder.loadTexts: fcsMJAlarmTesting.setStatus('current')
if mibBuilder.loadTexts: fcsMJAlarmTesting.setDescription('Major Alarm:  Testing the Major alarm funtion.')
fcsMNAlarmTesting = ObjectIdentity((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 5, 57))
if mibBuilder.loadTexts: fcsMNAlarmTesting.setStatus('current')
if mibBuilder.loadTexts: fcsMNAlarmTesting.setDescription('Minor Alarm:  Testing the Minor alarm funtion.')
fcsMNAlarmLowH2Pressure = ObjectIdentity((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 5, 58))
if mibBuilder.loadTexts: fcsMNAlarmLowH2Pressure.setStatus('current')
if mibBuilder.loadTexts: fcsMNAlarmLowH2Pressure.setDescription('Minor Alarm:  Low H2 Pressure.')
fcsMNAlarmDoorOpen = ObjectIdentity((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 5, 59))
if mibBuilder.loadTexts: fcsMNAlarmDoorOpen.setStatus('current')
if mibBuilder.loadTexts: fcsMNAlarmDoorOpen.setDescription('Minor Alarm:  Cabinet Door is Open.')
fcsMNAlarmSystemDateInvalid = ObjectIdentity((1, 3, 6, 1, 4, 1, 17022, 1, 2, 1, 5, 60))
if mibBuilder.loadTexts: fcsMNAlarmSystemDateInvalid.setStatus('current')
if mibBuilder.loadTexts: fcsMNAlarmSystemDateInvalid.setDescription('Minor Alarm:  System Date is Invalid.')
fcsETraps = MibIdentifier((1, 3, 6, 1, 4, 1, 17022, 1, 2, 2))
fcsETrapMJAlarmEntryAdded = NotificationType((1, 3, 6, 1, 4, 1, 17022, 1, 2, 2, 1)).setObjects(("PLUG-POWER-ESERIES-MIB", "fcsEAlarmDescr"))
if mibBuilder.loadTexts: fcsETrapMJAlarmEntryAdded.setStatus('current')
if mibBuilder.loadTexts: fcsETrapMJAlarmEntryAdded.setDescription('This trap is sent each time a major alarm is inserted\r\n               into the alarm table.')
fcsETrapMJAlarmEntryRemoved = NotificationType((1, 3, 6, 1, 4, 1, 17022, 1, 2, 2, 2)).setObjects(("PLUG-POWER-ESERIES-MIB", "fcsEAlarmDescr"))
if mibBuilder.loadTexts: fcsETrapMJAlarmEntryRemoved.setStatus('current')
if mibBuilder.loadTexts: fcsETrapMJAlarmEntryRemoved.setDescription('This trap is sent each time a major alarm is removed\r\n               from the alarm table.')
fcsETrapMNAlarmEntryAdded = NotificationType((1, 3, 6, 1, 4, 1, 17022, 1, 2, 2, 3)).setObjects(("PLUG-POWER-ESERIES-MIB", "fcsEAlarmDescr"))
if mibBuilder.loadTexts: fcsETrapMNAlarmEntryAdded.setStatus('current')
if mibBuilder.loadTexts: fcsETrapMNAlarmEntryAdded.setDescription('This trap is sent each time a minor alarm is inserted\r\n               into the alarm table.')
fcsETrapMNAlarmEntryRemoved = NotificationType((1, 3, 6, 1, 4, 1, 17022, 1, 2, 2, 4)).setObjects(("PLUG-POWER-ESERIES-MIB", "fcsEAlarmDescr"))
if mibBuilder.loadTexts: fcsETrapMNAlarmEntryRemoved.setStatus('current')
if mibBuilder.loadTexts: fcsETrapMNAlarmEntryRemoved.setDescription('This trap is sent each time a minor alarm is removed\r\n               from the alarm table.')
fcsETrapRunning = NotificationType((1, 3, 6, 1, 4, 1, 17022, 1, 2, 2, 5)).setObjects(("PLUG-POWER-ESERIES-MIB", "fcsEMainDate"), ("PLUG-POWER-ESERIES-MIB", "fcsEMainTime"))
if mibBuilder.loadTexts: fcsETrapRunning.setStatus('current')
if mibBuilder.loadTexts: fcsETrapRunning.setDescription('The Fuel Cell System is running.\r\n                This trap gets sent when the system goes into\r\n                run mode.  The fcsETrapRunEnded trap will\r\n                be sent when the system exits run mode.')
fcsETrapExercising = NotificationType((1, 3, 6, 1, 4, 1, 17022, 1, 2, 2, 6)).setObjects(("PLUG-POWER-ESERIES-MIB", "fcsEMainDate"), ("PLUG-POWER-ESERIES-MIB", "fcsEMainTime"))
if mibBuilder.loadTexts: fcsETrapExercising.setStatus('current')
if mibBuilder.loadTexts: fcsETrapExercising.setDescription('The Fuel Cell System is exercising.\r\n                This trap gets sent when the system goes into\r\n                exercise mode.  The fcsETrapRunEnded trap will\r\n                be sent when the system exits exercise mode.')
fcsETrapRunEnded = NotificationType((1, 3, 6, 1, 4, 1, 17022, 1, 2, 2, 7)).setObjects(("PLUG-POWER-ESERIES-MIB", "fcsEMainDate"), ("PLUG-POWER-ESERIES-MIB", "fcsEMainTime"))
if mibBuilder.loadTexts: fcsETrapRunEnded.setStatus('current')
if mibBuilder.loadTexts: fcsETrapRunEnded.setDescription('The Fuel Cell System just shut down from either\r\n                exercising or running.')
fcsETrapLowH2FuelAlertOn = NotificationType((1, 3, 6, 1, 4, 1, 17022, 1, 2, 2, 8)).setObjects(("PLUG-POWER-ESERIES-MIB", "fcsEMainDate"), ("PLUG-POWER-ESERIES-MIB", "fcsEMainTime"))
if mibBuilder.loadTexts: fcsETrapLowH2FuelAlertOn.setStatus('current')
if mibBuilder.loadTexts: fcsETrapLowH2FuelAlertOn.setDescription('Low H2 Fuel alert is on.')
fcsETrapLowH2FuelAlertOff = NotificationType((1, 3, 6, 1, 4, 1, 17022, 1, 2, 2, 9)).setObjects(("PLUG-POWER-ESERIES-MIB", "fcsEMainDate"), ("PLUG-POWER-ESERIES-MIB", "fcsEMainTime"))
if mibBuilder.loadTexts: fcsETrapLowH2FuelAlertOff.setStatus('current')
if mibBuilder.loadTexts: fcsETrapLowH2FuelAlertOff.setDescription('Low H2 Fuel alert is off.')
mibBuilder.exportSymbols("PLUG-POWER-ESERIES-MIB", fcsMNAlarmModTwoLtTempSensor=fcsMNAlarmModTwoLtTempSensor, fcsMNAlarmMod3Failed=fcsMNAlarmMod3Failed, fcsEMainCommCardVersion=fcsEMainCommCardVersion, fcsMJAlarmModTooHighVoltage=fcsMJAlarmModTooHighVoltage, fcsMNAlarmRecFan1Failed=fcsMNAlarmRecFan1Failed, fcsERunClearNoPressureAlarm=fcsERunClearNoPressureAlarm, FloatingPointNumber=FloatingPointNumber, fcsETraps=fcsETraps, fcsMNAlarmTesting=fcsMNAlarmTesting, fcsERunSystemLockTimeOut=fcsERunSystemLockTimeOut, PositiveInteger=PositiveInteger, fcsEExerciseTimeOfDay=fcsEExerciseTimeOfDay, fcsETrapRunning=fcsETrapRunning, fcsMNAlarmModTopFailed=fcsMNAlarmModTopFailed, fcsMNAlarmRecFan6Failed=fcsMNAlarmRecFan6Failed, fcsEMainVolts=fcsEMainVolts, fcsEExerciseExerciseMode=fcsEExerciseExerciseMode, fcsMNAlarmModBotFailed=fcsMNAlarmModBotFailed, fcsEAlarms=fcsEAlarms, fcsEMainTotalTime=fcsEMainTotalTime, fcsEMainChassisSerNum=fcsEMainChassisSerNum, fcsERunAuxOutAssigned=fcsERunAuxOutAssigned, fcsEExerciseNumOfDaysOrDayOfMonth=fcsEExerciseNumOfDaysOrDayOfMonth, fcsERunVolts=fcsERunVolts, fcsMNAlarmRecFan9Failed=fcsMNAlarmRecFan9Failed, fcsMNAlarmExtFan3Failed=fcsMNAlarmExtFan3Failed, fcsMJAlarmCommLinkDown=fcsMJAlarmCommLinkDown, fcsERun=fcsERun, fcsMJAlarmModsTooCold=fcsMJAlarmModsTooCold, fcsMJAllModTempSensorsFailed=fcsMJAllModTempSensorsFailed, fcsE2Gen2=fcsE2Gen2, fcsMNAlarmBleedTempSensor=fcsMNAlarmBleedTempSensor, fcsEExerciseCond1StartStop=fcsEExerciseCond1StartStop, fcsEMainSystemRuns=fcsEMainSystemRuns, fcsEAlarmTime=fcsEAlarmTime, fcsMJAlarmModShortedCircuitVoltage=fcsMJAlarmModShortedCircuitVoltage, fcsMJAlarmTesting=fcsMJAlarmTesting, fcsMNAlarmRecFan2Failed=fcsMNAlarmRecFan2Failed, fcsMNAlarmLowH2Pressure=fcsMNAlarmLowH2Pressure, fcsEMainTime=fcsEMainTime, fcsMNAlarmSystemDateInvalid=fcsMNAlarmSystemDateInvalid, fcsTSeries=fcsTSeries, fcsMNAlarmRecFan4Failed=fcsMNAlarmRecFan4Failed, fcsMNAlarmRecFan3Failed=fcsMNAlarmRecFan3Failed, fcsETrapMJAlarmEntryAdded=fcsETrapMJAlarmEntryAdded, fcsEExerciseManualExercise=fcsEExerciseManualExercise, fcsEMainWatts=fcsEMainWatts, fcsERunLowVoltStartMode=fcsERunLowVoltStartMode, fcsERunLowVoltTimer=fcsERunLowVoltTimer, fcsMNAlarmConverterCheckSumError=fcsMNAlarmConverterCheckSumError, fcsMJAlarmSafetyCheckFail=fcsMJAlarmSafetyCheckFail, fcsETrapRunEnded=fcsETrapRunEnded, fcsEMainMIBVersion010102=fcsEMainMIBVersion010102, fcsMNAlarmRecFan7Failed=fcsMNAlarmRecFan7Failed, fcsEAlarmEntry=fcsEAlarmEntry, fcsMJAlarmSystemIsDown=fcsMJAlarmSystemIsDown, fcsERunLowVoltageFloatTimeOut=fcsERunLowVoltageFloatTimeOut, fcsMNAlarmWebPagesCheckSumError=fcsMNAlarmWebPagesCheckSumError, fcsETrapMNAlarmEntryRemoved=fcsETrapMNAlarmEntryRemoved, fcsERunStartStatus=fcsERunStartStatus, fcsEMainResetSystem=fcsEMainResetSystem, fcsEExerciseNextExerciseDate=fcsEExerciseNextExerciseDate, fcsERunPowerLimiting=fcsERunPowerLimiting, fcsEMainConverterVersion=fcsEMainConverterVersion, fcsEMainKilowattHours=fcsEMainKilowattHours, fcsMJAlarmModOpenCircuitVoltage=fcsMJAlarmModOpenCircuitVoltage, fcsMJAlarmModsTooHotToRun=fcsMJAlarmModsTooHotToRun, fcsMNAlarmExtFan1Failed=fcsMNAlarmExtFan1Failed, fcsERunLowVoltThreshold=fcsERunLowVoltThreshold, fcsMJAlarmTermVoltsHigh=fcsMJAlarmTermVoltsHigh, fcsMNAlarmModTopLtTempSensor=fcsMNAlarmModTopLtTempSensor, fcsMNAlarmExtFan4Failed=fcsMNAlarmExtFan4Failed, fuelCellSys=fuelCellSys, fcsMJAlarmH2SensorBotRtHigh=fcsMJAlarmH2SensorBotRtHigh, fcsMNAlarmModThreeRtTempSensor=fcsMNAlarmModThreeRtTempSensor, fcsMNAlarmRecFan8Failed=fcsMNAlarmRecFan8Failed, fcsMNAlarmModBotRtTempSensor=fcsMNAlarmModBotRtTempSensor, fcsEExercise=fcsEExercise, fcsEMainSystemStatus=fcsEMainSystemStatus, fcsERunLowH2PressureAlertStatus=fcsERunLowH2PressureAlertStatus, fcsERunContactStartTimeOut=fcsERunContactStartTimeOut, fcsMJAlarmNoH2Pressure=fcsMJAlarmNoH2Pressure, PYSNMP_MODULE_ID=plugPowerMIB, fcsMNAlarmModTopRtTempSensor=fcsMNAlarmModTopRtTempSensor, fcsMJAlarmSystemLocked=fcsMJAlarmSystemLocked, fcsEMain=fcsEMain, fcsMNAlarmCommCardCheckSumError=fcsMNAlarmCommCardCheckSumError, fcsERunLowH2PressureAlert=fcsERunLowH2PressureAlert, fcsERunFloatVolt=fcsERunFloatVolt, fcsESeries=fcsESeries, fcsERunContactStartDelay=fcsERunContactStartDelay, fcsERunAuxInAssigned=fcsERunAuxInAssigned, fcsEMainBleedTempSensor=fcsEMainBleedTempSensor, fcsMNAlarmMod2Failed=fcsMNAlarmMod2Failed, fcsEMainChassisTemp=fcsEMainChassisTemp, fcsMJAlarmH2SensorTopLtFail=fcsMJAlarmH2SensorTopLtFail, fcsEMainPower=fcsEMainPower, fcsMNAlarmModBotLtTempSensor=fcsMNAlarmModBotLtTempSensor, fcsMJAlarmConverterID=fcsMJAlarmConverterID, fcsMNAlarmDoorOpen=fcsMNAlarmDoorOpen, fcsMNAlarmModTwoRtTempSensor=fcsMNAlarmModTwoRtTempSensor, fcsMJAlarmVerMismatch=fcsMJAlarmVerMismatch, fcsEMainHeater=fcsEMainHeater, fcsEAlarmNoCurrentAlarms=fcsEAlarmNoCurrentAlarms, fcsETrapLowH2FuelAlertOff=fcsETrapLowH2FuelAlertOff, fcsEAlarmId=fcsEAlarmId, fcsEMainDate=fcsEMainDate, fcsERunSystemStatus=fcsERunSystemStatus, fcsESystemAlarms=fcsESystemAlarms, fcsMJAlarmSafetyFanFail=fcsMJAlarmSafetyFanFail, fcsMNAlarmRecFan10Failed=fcsMNAlarmRecFan10Failed, fcsETrapLowH2FuelAlertOn=fcsETrapLowH2FuelAlertOn, fcsEMainManufacturerModel=fcsEMainManufacturerModel, plugPowerMIB=plugPowerMIB, fcsMJAlarmH2SensorBotRtFail=fcsMJAlarmH2SensorBotRtFail, fcsERunLockSystem=fcsERunLockSystem, fcsERunLowH2PressureAlarm=fcsERunLowH2PressureAlarm, fcsEMainAmps=fcsEMainAmps, fcsMNAlarmH2SensorBotRtLow=fcsMNAlarmH2SensorBotRtLow, fcsMJAlarmTermVoltsLow=fcsMJAlarmTermVoltsLow, NonNegativeInteger=NonNegativeInteger, fcsETrapMJAlarmEntryRemoved=fcsETrapMJAlarmEntryRemoved, fcsERunWatts=fcsERunWatts, fcsETrapExercising=fcsETrapExercising, fcsEMainPressurePSI=fcsEMainPressurePSI, fcsEMainLastRun=fcsEMainLastRun, fcsMNAlarmModThreeLtTempSensor=fcsMNAlarmModThreeLtTempSensor, fcsMNAlarmExtFan5Failed=fcsMNAlarmExtFan5Failed, fcsMJAlarmSafetyTempFail=fcsMJAlarmSafetyTempFail, fcsMNAlarmH2SensorTopLtLow=fcsMNAlarmH2SensorTopLtLow, fcsERunPressurePSI=fcsERunPressurePSI, fcsEAlarmTable=fcsEAlarmTable, fcsEExerciseSetNextExerciseDate=fcsEExerciseSetNextExerciseDate, fcsMNAlarmExtFan2Failed=fcsMNAlarmExtFan2Failed, fcsERunPower=fcsERunPower, fcsEAlarm=fcsEAlarm, fcsERunAmps=fcsERunAmps, fcsMJAlarmH2SensorTopLtHigh=fcsMJAlarmH2SensorTopLtHigh, fcsERunStartStop=fcsERunStartStop, fcsMNAlarmExtFan6Failed=fcsMNAlarmExtFan6Failed, fcsEAlarmType=fcsEAlarmType, fcsETrapMNAlarmEntryAdded=fcsETrapMNAlarmEntryAdded, fcsERunSystemLockTime=fcsERunSystemLockTime, fcsEAlarmDescr=fcsEAlarmDescr, fcsEObjects=fcsEObjects, fcsEMainLocation=fcsEMainLocation, fcsMNAlarmRecFan5Failed=fcsMNAlarmRecFan5Failed, fcsEMainName=fcsEMainName, fcsEMainAlarms=fcsEMainAlarms)
