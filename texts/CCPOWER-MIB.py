#
# PySNMP MIB module CCPOWER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/ccpower/CCPOWER-MIB
# Produced by pysmi-1.1.12 at Tue May 28 13:06:19 2024
# On host fv-az1789-536 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
TimeTicks, Counter64, enterprises, ObjectIdentity, iso, Bits, Unsigned32, Gauge32, IpAddress, MibIdentifier, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, NotificationType, ModuleIdentity, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Counter64", "enterprises", "ObjectIdentity", "iso", "Bits", "Unsigned32", "Gauge32", "IpAddress", "MibIdentifier", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "NotificationType", "ModuleIdentity", "NotificationType")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
ccpower = MibIdentifier((1, 3, 6, 1, 4, 1, 18642))
dcSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 18642, 1))
readWriteObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 18642, 1, 1))
settings = MibIdentifier((1, 3, 6, 1, 4, 1, 18642, 1, 1, 1))
floatVoltage = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: floatVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: floatVoltage.setDescription('Rectifier DC Output Voltage.\n                  Return value is XXX representing XX.X volts.')
overloadCurrent = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: overloadCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: overloadCurrent.setDescription('Current which when exceeded will cause an alarm.\n                  Return value is XXXX representing XXXX amps.')
highVoltageAlarm = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: highVoltageAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: highVoltageAlarm.setDescription('Voltage which when exceeded will cause an alarm.\n                  Return value is XXX representing XX.X volts.')
lowVoltageAlarm = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lowVoltageAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: lowVoltageAlarm.setDescription('Voltage which when exceeded will cause an alarm.\n                  Return value is XXX representing XX.X volts.')
disconnect1Voltage = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: disconnect1Voltage.setStatus('mandatory')
if mibBuilder.loadTexts: disconnect1Voltage.setDescription('Voltage which when exceeded will cause a specific load to disconnect.\n                  Return value is XXX representing XX.X volts.')
disconnect1Temperature = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: disconnect1Temperature.setStatus('mandatory')
if mibBuilder.loadTexts: disconnect1Temperature.setDescription('Temperature which when exceeded will cause a specific load to disconnect.\n                  Return value is XX representing XX C.')
disconnect1LoadShedSundayOff = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 1, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: disconnect1LoadShedSundayOff.setStatus('mandatory')
if mibBuilder.loadTexts: disconnect1LoadShedSundayOff.setDescription('Time on Sunday which when reached will cause a specific load to disconnect.\n                  Return value is XX:XX representing HH:MM.')
disconnect1LoadShedMondayOff = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 1, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: disconnect1LoadShedMondayOff.setStatus('mandatory')
if mibBuilder.loadTexts: disconnect1LoadShedMondayOff.setDescription('Time on Monday which when reached will cause a specific load to disconnect.\n                  Return value is XX:XX representing HH:MM.')
disconnect1LoadShedTuesdayOff = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 1, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: disconnect1LoadShedTuesdayOff.setStatus('mandatory')
if mibBuilder.loadTexts: disconnect1LoadShedTuesdayOff.setDescription('Time on Tuesday which when reached will cause a specific load to disconnect.\n                  Return value is XX:XX representing HH:MM.')
disconnect1LoadShedWednesdayOff = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 1, 1, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: disconnect1LoadShedWednesdayOff.setStatus('mandatory')
if mibBuilder.loadTexts: disconnect1LoadShedWednesdayOff.setDescription('Time on Wednesday which when reached will cause a specific load to disconnect.\n                  Return value is XX:XX representing HH:MM.')
disconnect1LoadShedThursdayOff = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 1, 1, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: disconnect1LoadShedThursdayOff.setStatus('mandatory')
if mibBuilder.loadTexts: disconnect1LoadShedThursdayOff.setDescription('Time on Thursday which when reached will cause a specific load to disconnect.\n                  Return value is XX:XX representing HH:MM.')
disconnect1LoadShedFridayOff = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 1, 1, 12), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: disconnect1LoadShedFridayOff.setStatus('mandatory')
if mibBuilder.loadTexts: disconnect1LoadShedFridayOff.setDescription('Time on Friday which when reached will cause a specific load to disconnect.\n                  Return value is XX:XX representing HH:MM.')
disconnect1LoadShedSaturdayOff = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 1, 1, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: disconnect1LoadShedSaturdayOff.setStatus('mandatory')
if mibBuilder.loadTexts: disconnect1LoadShedSaturdayOff.setDescription('Time on Saturday which when reached will cause a specific load to disconnect.\n                  Return value is XX:XX representing HH:MM.')
disconnect2Voltage = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 1, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: disconnect2Voltage.setStatus('mandatory')
if mibBuilder.loadTexts: disconnect2Voltage.setDescription('Voltage which when exceeded will cause a specific load to disconnect.\n                  Return value is XXX representing XX.X volts.')
disconnect2Temperature = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 1, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: disconnect2Temperature.setStatus('mandatory')
if mibBuilder.loadTexts: disconnect2Temperature.setDescription('Temperature which when exceeded will cause a specific load to disconnect.\n                  Return value is XX representing XX C.')
disconnect2LoadShedSundayOff = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 1, 1, 16), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: disconnect2LoadShedSundayOff.setStatus('mandatory')
if mibBuilder.loadTexts: disconnect2LoadShedSundayOff.setDescription('Time on Sunday which when reached will cause a specific load to disconnect.\n                  Return value is XX:XX representing HH:MM.')
disconnect2LoadShedMondayOff = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 1, 1, 17), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: disconnect2LoadShedMondayOff.setStatus('mandatory')
if mibBuilder.loadTexts: disconnect2LoadShedMondayOff.setDescription('Time on Monday which when reached will cause a specific load to disconnect.\n                  Return value is XX:XX representing HH:MM.')
disconnect2LoadShedTuesdayOff = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 1, 1, 18), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: disconnect2LoadShedTuesdayOff.setStatus('mandatory')
if mibBuilder.loadTexts: disconnect2LoadShedTuesdayOff.setDescription('Time on Tuesday which when reached will cause a specific load to disconnect.\n                  Return value is XX:XX representing HH:MM.')
disconnect2LoadShedWednesdayOff = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 1, 1, 19), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: disconnect2LoadShedWednesdayOff.setStatus('mandatory')
if mibBuilder.loadTexts: disconnect2LoadShedWednesdayOff.setDescription('Time on Wednesday which when reached will cause a specific load to disconnect.\n                  Return value is XX:XX representing HH:MM.')
disconnect2LoadShedThursdayOff = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 1, 1, 20), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: disconnect2LoadShedThursdayOff.setStatus('mandatory')
if mibBuilder.loadTexts: disconnect2LoadShedThursdayOff.setDescription('Time on Thursday which when reached will cause a specific load to disconnect.\n                  Return value is XX:XX representing HH:MM.')
disconnect2LoadShedFridayOff = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 1, 1, 21), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: disconnect2LoadShedFridayOff.setStatus('mandatory')
if mibBuilder.loadTexts: disconnect2LoadShedFridayOff.setDescription('Time on Friday which when reached will cause a specific load to disconnect.\n                  Return value is XX:XX representing HH:MM.')
disconnect2LoadShedSaturdayOff = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 1, 1, 22), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: disconnect2LoadShedSaturdayOff.setStatus('mandatory')
if mibBuilder.loadTexts: disconnect2LoadShedSaturdayOff.setDescription('Time on Saturday which when reached will cause a specific load to disconnect.\n                  Return value is XX:XX representing HH:MM.')
disconnect3Voltage = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 1, 1, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: disconnect3Voltage.setStatus('mandatory')
if mibBuilder.loadTexts: disconnect3Voltage.setDescription('Voltage which when exceeded will cause a specific load to disconnect.\n                  Return value is XXX representing XX.X volts.')
disconnect3Temperature = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 1, 1, 24), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: disconnect3Temperature.setStatus('mandatory')
if mibBuilder.loadTexts: disconnect3Temperature.setDescription('Temperature which when exceeded will cause a specific load to disconnect.\n                  Return value is XX representing XX C.')
disconnect3LoadShedSundayOff = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 1, 1, 25), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: disconnect3LoadShedSundayOff.setStatus('mandatory')
if mibBuilder.loadTexts: disconnect3LoadShedSundayOff.setDescription('Time on Sunday which when reached will cause a specific load to disconnect.\n                  Return value is XX:XX representing HH:MM.')
disconnect3LoadShedMondayOff = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 1, 1, 26), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: disconnect3LoadShedMondayOff.setStatus('mandatory')
if mibBuilder.loadTexts: disconnect3LoadShedMondayOff.setDescription('Time on Monday which when reached will cause a specific load to disconnect.\n                  Return value is XX:XX representing HH:MM.')
disconnect3LoadShedTuesdayOff = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 1, 1, 27), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: disconnect3LoadShedTuesdayOff.setStatus('mandatory')
if mibBuilder.loadTexts: disconnect3LoadShedTuesdayOff.setDescription('Time on Tuesday which when reached will cause a specific load to disconnect.\n                  Return value is XX:XX representing HH:MM.')
disconnect3LoadShedWednesdayOff = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 1, 1, 28), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: disconnect3LoadShedWednesdayOff.setStatus('mandatory')
if mibBuilder.loadTexts: disconnect3LoadShedWednesdayOff.setDescription('Time on Wednesday which when reached will cause a specific load to disconnect.\n                  Return value is XX:XX representing HH:MM.')
disconnect3LoadShedThursdayOff = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 1, 1, 29), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: disconnect3LoadShedThursdayOff.setStatus('mandatory')
if mibBuilder.loadTexts: disconnect3LoadShedThursdayOff.setDescription('Time on Thursday which when reached will cause a specific load to disconnect.\n                  Return value is XX:XX representing HH:MM.')
disconnect3LoadShedFridayOff = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 1, 1, 30), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: disconnect3LoadShedFridayOff.setStatus('mandatory')
if mibBuilder.loadTexts: disconnect3LoadShedFridayOff.setDescription('Time on Friday which when reached will cause a specific load to disconnect.\n                  Return value is XX:XX representing HH:MM.')
disconnect3LoadShedSaturdayOff = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 1, 1, 31), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: disconnect3LoadShedSaturdayOff.setStatus('mandatory')
if mibBuilder.loadTexts: disconnect3LoadShedSaturdayOff.setDescription('Time on Saturday which when reached will cause a specific load to disconnect.\n                  Return value is XX:XX representing HH:MM.')
reconnect1Voltage = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 1, 1, 32), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reconnect1Voltage.setStatus('mandatory')
if mibBuilder.loadTexts: reconnect1Voltage.setDescription('Voltage which when reached will cause a specific load to reconnect.\n                  Return value is XXX representing XX.X volts.')
reconnect1LoadShedSundayOn = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 1, 1, 33), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reconnect1LoadShedSundayOn.setStatus('mandatory')
if mibBuilder.loadTexts: reconnect1LoadShedSundayOn.setDescription('Time which when reached will cause a specific load to reconnect.\n                  Return value is XX:XX representing HH:MM.')
reconnect1LoadShedMondayOn = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 1, 1, 34), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reconnect1LoadShedMondayOn.setStatus('mandatory')
if mibBuilder.loadTexts: reconnect1LoadShedMondayOn.setDescription('Time on Monday which when reached will cause a specific load to reconnect.\n                  Return value is XX:XX representing HH:MM.')
reconnect1LoadShedTuesdayOn = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 1, 1, 35), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reconnect1LoadShedTuesdayOn.setStatus('mandatory')
if mibBuilder.loadTexts: reconnect1LoadShedTuesdayOn.setDescription('Time on Tuesday which when reached will cause a specific load to reconnect.\n                  Return value is XX:XX representing HH:MM.')
reconnect1LoadShedWednesdayOn = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 1, 1, 36), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reconnect1LoadShedWednesdayOn.setStatus('mandatory')
if mibBuilder.loadTexts: reconnect1LoadShedWednesdayOn.setDescription('Time on Wednesday which when reached will cause a specific load to reconnect.\n                  Return value is XX:XX representing HH:MM.')
reconnect1LoadShedThursdayOn = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 1, 1, 37), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reconnect1LoadShedThursdayOn.setStatus('mandatory')
if mibBuilder.loadTexts: reconnect1LoadShedThursdayOn.setDescription('Time on Thursday which when reached will cause a specific load to reconnect.\n                  Return value is XX:XX representing HH:MM.')
reconnect1LoadShedFridayOn = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 1, 1, 38), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reconnect1LoadShedFridayOn.setStatus('mandatory')
if mibBuilder.loadTexts: reconnect1LoadShedFridayOn.setDescription('Time on Friday which when reached will cause a specific load to reconnect.\n                  Return value is XX:XX representing HH:MM.')
reconnect1LoadShedSaturdayOn = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 1, 1, 39), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reconnect1LoadShedSaturdayOn.setStatus('mandatory')
if mibBuilder.loadTexts: reconnect1LoadShedSaturdayOn.setDescription('Time on Saturday which when reached will cause a specific load to reconnect.\n                  Return value is XX:XX representing HH:MM.')
reconnect2Voltage = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 1, 1, 40), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reconnect2Voltage.setStatus('mandatory')
if mibBuilder.loadTexts: reconnect2Voltage.setDescription('Voltage which when reached will cause a specific load to reconnect.\n                  Return value is XXX representing XX.X volts.')
reconnect2LoadShedSundayOn = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 1, 1, 41), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reconnect2LoadShedSundayOn.setStatus('mandatory')
if mibBuilder.loadTexts: reconnect2LoadShedSundayOn.setDescription('Time on Sunday which when reached will cause a specific load to reconnect.\n                  Return value is XX:XX representing HH:MM.')
reconnect2LoadShedMondayOn = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 1, 1, 42), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reconnect2LoadShedMondayOn.setStatus('mandatory')
if mibBuilder.loadTexts: reconnect2LoadShedMondayOn.setDescription('Time on Monday which when reached will cause a specific load to reconnect.\n                  Return value is XX:XX representing HH:MM.')
reconnect2LoadShedTuesdayOn = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 1, 1, 43), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reconnect2LoadShedTuesdayOn.setStatus('mandatory')
if mibBuilder.loadTexts: reconnect2LoadShedTuesdayOn.setDescription('Time on Tuesday which when reached will cause a specific load to reconnect.\n                  Return value is XX:XX representing HH:MM.')
reconnect2LoadShedWednesdayOn = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 1, 1, 44), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reconnect2LoadShedWednesdayOn.setStatus('mandatory')
if mibBuilder.loadTexts: reconnect2LoadShedWednesdayOn.setDescription('Time on Wednesday which when reached will cause a specific load to reconnect.\n                  Return value is XX:XX representing HH:MM.')
reconnect2LoadShedThursdayOn = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 1, 1, 45), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reconnect2LoadShedThursdayOn.setStatus('mandatory')
if mibBuilder.loadTexts: reconnect2LoadShedThursdayOn.setDescription('Time on Thursday which when reached will cause a specific load to reconnect.\n                  Return value is XX:XX representing HH:MM.')
reconnect2LoadShedFridayOn = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 1, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reconnect2LoadShedFridayOn.setStatus('mandatory')
if mibBuilder.loadTexts: reconnect2LoadShedFridayOn.setDescription('Time on Friday which when reached will cause a specific load to reconnect.\n                  Return value is XX:XX representing HH:MM.')
reconnect2LoadShedSaturdayOn = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 1, 1, 47), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reconnect2LoadShedSaturdayOn.setStatus('mandatory')
if mibBuilder.loadTexts: reconnect2LoadShedSaturdayOn.setDescription('Time on Saturday which when reached will cause a specific load to reconnect.\n                  Return value is XX:XX representing HH:MM.')
reconnect3Voltage = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 1, 1, 48), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reconnect3Voltage.setStatus('mandatory')
if mibBuilder.loadTexts: reconnect3Voltage.setDescription('Voltage which when reached will cause a specific load to reconnect.\n                  Return value is XXX representing XX.X volts.')
reconnect3LoadShedSundayOn = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 1, 1, 49), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reconnect3LoadShedSundayOn.setStatus('mandatory')
if mibBuilder.loadTexts: reconnect3LoadShedSundayOn.setDescription('Time on Sunday which when reached will cause a specific load to reconnect.\n                  Return value is XX:XX representing HH:MM.')
reconnect3LoadShedMondayOn = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 1, 1, 50), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reconnect3LoadShedMondayOn.setStatus('mandatory')
if mibBuilder.loadTexts: reconnect3LoadShedMondayOn.setDescription('Time on Monday which when reached will cause a specific load to reconnect.\n                  Return value is XX:XX representing HH:MM.')
reconnect3LoadShedTuesdayOn = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 1, 1, 51), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reconnect3LoadShedTuesdayOn.setStatus('mandatory')
if mibBuilder.loadTexts: reconnect3LoadShedTuesdayOn.setDescription('Time on Tuesday which when reached will cause a specific load to reconnect.\n                  Return value is XX:XX representing HH:MM.')
reconnect3LoadShedWednesdayOn = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 1, 1, 52), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reconnect3LoadShedWednesdayOn.setStatus('mandatory')
if mibBuilder.loadTexts: reconnect3LoadShedWednesdayOn.setDescription('Time on Wednesday which when reached will cause a specific load to reconnect.\n                  Return value is XX:XX representing HH:MM.')
reconnect3LoadShedThursdayOn = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 1, 1, 53), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reconnect3LoadShedThursdayOn.setStatus('mandatory')
if mibBuilder.loadTexts: reconnect3LoadShedThursdayOn.setDescription('Time on Thursday which when reached will cause a specific load to reconnect.\n                  Return value is XX:XX representing HH:MM.')
reconnect3LoadShedFridayOn = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 1, 1, 54), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reconnect3LoadShedFridayOn.setStatus('mandatory')
if mibBuilder.loadTexts: reconnect3LoadShedFridayOn.setDescription('Time on Friday which when reached will cause a specific load to reconnect.\n                  Return value is XX:XX representing HH:MM.')
reconnect3LoadShedSaturdayOn = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 1, 1, 55), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reconnect3LoadShedSaturdayOn.setStatus('mandatory')
if mibBuilder.loadTexts: reconnect3LoadShedSaturdayOn.setDescription('Time on Saturday which when reached will cause a specific load to reconnect.\n                  Return value is XX:XX representing HH:MM.')
equalizeTime = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 1, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: equalizeTime.setStatus('mandatory')
if mibBuilder.loadTexts: equalizeTime.setDescription('Number of hours the equalize voltage is to be applied.\n                  Return value is XXX representing XX.X hours.')
equalizeVoltage = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 1, 1, 57), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: equalizeVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: equalizeVoltage.setDescription('Equalize voltage to be applied.\n                  Return value is XXX representing XX.X volts.')
batteryResistancePercentChange = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 1, 1, 58), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryResistancePercentChange.setStatus('mandatory')
if mibBuilder.loadTexts: batteryResistancePercentChange.setDescription('Resistance percentange change that when reached will cause an alarm.\n                  Return value is XXX representing XXX %.')
batteryResistanceTestInterval = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 1, 1, 59), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryResistanceTestInterval.setStatus('mandatory')
if mibBuilder.loadTexts: batteryResistanceTestInterval.setDescription('Battery resistance test interval.\n                  Return value is XX representing XX weeks.')
loadShedTimeControl = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 1, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loadShedTimeControl.setStatus('mandatory')
if mibBuilder.loadTexts: loadShedTimeControl.setDescription('Load shed time control enabled/disabled status.\n                  Return value: 1 = time control enabled, 2 = time control disabled.')
batteryFloatCurrent = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 1, 1, 61), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryFloatCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: batteryFloatCurrent.setDescription('Battery float current.\n                  Return value is XXX representing XXX amps.')
readOnlyObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 18642, 1, 2))
rectifiers = MibIdentifier((1, 3, 6, 1, 4, 1, 18642, 1, 2, 1))
rectifierFloatVoltage = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectifierFloatVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: rectifierFloatVoltage.setDescription('Rectifier float voltage.\n                  Return value is XXX representing XX.X volts. Valid ranges are 24.0 to 57.0 volts.')
rectifierLoadCurrent = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectifierLoadCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: rectifierLoadCurrent.setDescription('Rectifier DC load current.\n                  Return value is XXXX representing XXXX amps. Valid ranges are 0000 to 5000 amps.')
batteries = MibIdentifier((1, 3, 6, 1, 4, 1, 18642, 1, 2, 2))
batteryCurrent = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 2, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: batteryCurrent.setDescription('Battery current.\n                  Return value is XXXX representing XXXX amps. Valid ranges are 0000 to 1000 amps.')
batteryTemperature = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 2, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryTemperature.setStatus('mandatory')
if mibBuilder.loadTexts: batteryTemperature.setDescription('Battery temperature.\n                  Return value is XX representing XX C. Valid ranges are -40 to 99 C.')
batteryResistanceReference = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 2, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryResistanceReference.setStatus('mandatory')
if mibBuilder.loadTexts: batteryResistanceReference.setDescription('Initial battery resistance.\n                  Return value is XXXXX representing X.XXXX ohms. Valid ranges are 0.0000 to 5.0000 ohms.')
batteryResistanceReading = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 2, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryResistanceReading.setStatus('mandatory')
if mibBuilder.loadTexts: batteryResistanceReading.setDescription('Last battery resistance reading.\n                   Return value is XXXXX representing X.XXXX ohms. Valid ranges are 0.0000 to 5.0000 ohms.')
batteryResistanceChange = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 2, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryResistanceChange.setStatus('mandatory')
if mibBuilder.loadTexts: batteryResistanceChange.setDescription('Percent change from last battery resistance reading.\n                  Return value is XXX representing XXX %. Valid ranges are 001 to 999 %.')
batteryCycles1 = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 2, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryCycles1.setStatus('mandatory')
if mibBuilder.loadTexts: batteryCycles1.setDescription('Number of discharge/recharge cycles less than 1 minute.\n                  Return value is XXX representing XXX cycles. Valid ranges are 000 to 255 cycles.')
batteryCycles1to5 = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 2, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryCycles1to5.setStatus('mandatory')
if mibBuilder.loadTexts: batteryCycles1to5.setDescription('Number of discharge/recharge cycles from 1 to 5 minutes.\n                  Return value is XXX representing XXX cycles. Valid ranges are 000 to 255 cycles.')
batteryCycles5to15 = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 2, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryCycles5to15.setStatus('mandatory')
if mibBuilder.loadTexts: batteryCycles5to15.setDescription('Number of discharge/recharge cycles from 5 to 15 minutes.\n                  Return value is XXX representing XXX cycles. Valid ranges are 000 to 255 cycles.')
batteryCycles15 = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 2, 2, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryCycles15.setStatus('mandatory')
if mibBuilder.loadTexts: batteryCycles15.setDescription('Number of discharge/recharge cycles greater than 15 minutes.\n                  Return value is XXX representing XXX cycles. Valid ranges are 000 to 255 cycles.')
batteryCycles15LastCycleDate = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 2, 2, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryCycles15LastCycleDate.setStatus('mandatory')
if mibBuilder.loadTexts: batteryCycles15LastCycleDate.setDescription('Last cycle date of batteryCycles15.\n                  Return value is MM-DD-YY, HH-MM.')
batteryCycles15LastDuration = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 2, 2, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryCycles15LastDuration.setStatus('mandatory')
if mibBuilder.loadTexts: batteryCycles15LastDuration.setDescription('Duration of batteryCycles15 last cycle.\n                  Return value is XXXX representing XXXX minutes.')
batteryTestFault = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 2, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("abort1", 1), ("abort2", 2), ("abort3", 3), ("none", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryTestFault.setStatus('mandatory')
if mibBuilder.loadTexts: batteryTestFault.setDescription('Battery failure has occured during battery restistance test.\n                  Return value: 1 = Abort 1, 2 = Abort 2, 3 = Abort 3, 4 = None.')
factorySettings = MibIdentifier((1, 3, 6, 1, 4, 1, 18642, 1, 2, 3))
floatVoltagePresets = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 2, 3, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: floatVoltagePresets.setStatus('mandatory')
if mibBuilder.loadTexts: floatVoltagePresets.setDescription('Float voltage factory setting range.\n                  Return value is XX.X volts min, XX.X volts max.')
highVoltageAlarmPresets = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 2, 3, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: highVoltageAlarmPresets.setStatus('mandatory')
if mibBuilder.loadTexts: highVoltageAlarmPresets.setDescription('High voltage alarm factory setting range.\n                  Return value is XX.X volts min, XX.X volts max.')
lowVoltageAlarmPresets = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 2, 3, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lowVoltageAlarmPresets.setStatus('mandatory')
if mibBuilder.loadTexts: lowVoltageAlarmPresets.setDescription('Low voltage alarm factory setting range.\n                  Return value is XX.X volts min, XX.X volts max.')
disconnect1VoltagePresets = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 2, 3, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: disconnect1VoltagePresets.setStatus('mandatory')
if mibBuilder.loadTexts: disconnect1VoltagePresets.setDescription('Disconnect voltage 1 factory setting range.\n                   Return value is XX.X volts min, XX.X volts max.')
disconnect1TemperaturePreset = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 2, 3, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: disconnect1TemperaturePreset.setStatus('mandatory')
if mibBuilder.loadTexts: disconnect1TemperaturePreset.setDescription('Disconnect temperature 1 factory setting.\n                  Return value is XX C.')
disconnect1LoadShedSundayPresets = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 2, 3, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: disconnect1LoadShedSundayPresets.setStatus('mandatory')
if mibBuilder.loadTexts: disconnect1LoadShedSundayPresets.setDescription('Disconnect 1 load shed Sunday time settings.\n                  Return value is XX:Xx off, XX:XX on.')
disconnect1LoadShedMondayPresets = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 2, 3, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: disconnect1LoadShedMondayPresets.setStatus('mandatory')
if mibBuilder.loadTexts: disconnect1LoadShedMondayPresets.setDescription('Disconnect 1 load shed Monday time settings.\n                  Return value is XX:Xx off, XX:XX on.')
disconnect1LoadShedTuesdayPresets = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 2, 3, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: disconnect1LoadShedTuesdayPresets.setStatus('mandatory')
if mibBuilder.loadTexts: disconnect1LoadShedTuesdayPresets.setDescription('Disconnect 1 load shed Tuesday time settings.\n                  Return value is XX:Xx off, XX:XX on.')
disconnect1LoadShedWednesdayPresets = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 2, 3, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: disconnect1LoadShedWednesdayPresets.setStatus('mandatory')
if mibBuilder.loadTexts: disconnect1LoadShedWednesdayPresets.setDescription('Disconnect 1 load shed Wednesday time settings.\n                  Return value is XX:Xx off, XX:XX on.')
disconnect1LoadShedThursdayPresets = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 2, 3, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: disconnect1LoadShedThursdayPresets.setStatus('mandatory')
if mibBuilder.loadTexts: disconnect1LoadShedThursdayPresets.setDescription('Disconnect 1 load shed Thursday time settings.\n                  Return value is XX:Xx off, XX:XX on.')
disconnect1LoadShedFridayPresets = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 2, 3, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: disconnect1LoadShedFridayPresets.setStatus('mandatory')
if mibBuilder.loadTexts: disconnect1LoadShedFridayPresets.setDescription('Disconnect 1 load shed Friday time settings.\n                  Return value is XX:Xx off, XX:XX on.')
disconnect1LoadShedSaturdayPresets = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 2, 3, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: disconnect1LoadShedSaturdayPresets.setStatus('mandatory')
if mibBuilder.loadTexts: disconnect1LoadShedSaturdayPresets.setDescription('Disconnect 1 load shed Saturday time settings.\n                  Return value is XX:Xx off, XX:XX on.')
reconnectVoltage1Presets = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 2, 3, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reconnectVoltage1Presets.setStatus('mandatory')
if mibBuilder.loadTexts: reconnectVoltage1Presets.setDescription('Reconnect voltage 1 factory setting range.\n                  Return value is XX.X volts min, XX.X volts max.')
disconnect2VoltagePresets = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 2, 3, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: disconnect2VoltagePresets.setStatus('mandatory')
if mibBuilder.loadTexts: disconnect2VoltagePresets.setDescription('Disconnect voltage 2 factory setting range.\n                  Return value is XX.X volts min, XX.X volts max.')
disconnect2TemperaturePreset = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 2, 3, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: disconnect2TemperaturePreset.setStatus('mandatory')
if mibBuilder.loadTexts: disconnect2TemperaturePreset.setDescription('Disconnect temperature 2 factory setting.\n                  Return value is XX C.')
disconnect2LoadShedSundayPresets = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 2, 3, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: disconnect2LoadShedSundayPresets.setStatus('mandatory')
if mibBuilder.loadTexts: disconnect2LoadShedSundayPresets.setDescription('Disconnect 2 load shed Sunday time settings.\n                  Return value is XX:Xx off, XX:XX on.')
disconnect2LoadShedMondayPresets = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 2, 3, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: disconnect2LoadShedMondayPresets.setStatus('mandatory')
if mibBuilder.loadTexts: disconnect2LoadShedMondayPresets.setDescription('Disconnect 2 load shed Monday time settings.\n                  Return value is XX:Xx off, XX:XX on.')
disconnect2LoadShedTuesdayPresets = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 2, 3, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: disconnect2LoadShedTuesdayPresets.setStatus('mandatory')
if mibBuilder.loadTexts: disconnect2LoadShedTuesdayPresets.setDescription('Disconnect 2 load shed Tuesday time settings.\n                  Return value is XX:Xx off, XX:XX on.')
disconnect2LoadShedWednesdayPresets = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 2, 3, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: disconnect2LoadShedWednesdayPresets.setStatus('mandatory')
if mibBuilder.loadTexts: disconnect2LoadShedWednesdayPresets.setDescription('Disconnect 2 load shed Wednesday time settings.\n                  Return value is XX:Xx off, XX:XX on.')
disconnect2LoadShedThursdayPresets = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 2, 3, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: disconnect2LoadShedThursdayPresets.setStatus('mandatory')
if mibBuilder.loadTexts: disconnect2LoadShedThursdayPresets.setDescription('Disconnect 2 load shed Thursday time settings.\n                  Return value is XX:Xx off, XX:XX on.')
disconnect2LoadShedFridayPresets = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 2, 3, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: disconnect2LoadShedFridayPresets.setStatus('mandatory')
if mibBuilder.loadTexts: disconnect2LoadShedFridayPresets.setDescription('Disconnect 2 load shed Friday time settings.\n                  Return value is XX:Xx off, XX:XX on.')
disconnect2LoadShedSaturdayPresets = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 2, 3, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: disconnect2LoadShedSaturdayPresets.setStatus('mandatory')
if mibBuilder.loadTexts: disconnect2LoadShedSaturdayPresets.setDescription('Disconnect 2 load shed Saturday time settings.\n                  Return value is XX:Xx off, XX:XX on.')
reconnect2VoltagePresets = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 2, 3, 23), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reconnect2VoltagePresets.setStatus('mandatory')
if mibBuilder.loadTexts: reconnect2VoltagePresets.setDescription('Reconnect voltage 2 factory setting range.\n                  Return value is XX.X volts min, XX.X volts max.')
disconnect3VoltagePresets = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 2, 3, 24), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: disconnect3VoltagePresets.setStatus('mandatory')
if mibBuilder.loadTexts: disconnect3VoltagePresets.setDescription('Disconnect voltage 3 factory setting range.\n                  Return value is XX.X volts min, XX.X volts max.')
disconnect3TemperaturePreset = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 2, 3, 25), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: disconnect3TemperaturePreset.setStatus('mandatory')
if mibBuilder.loadTexts: disconnect3TemperaturePreset.setDescription('Disconnect temperature 3 factory setting.\n                  Return value is XX C.')
disconnect3LoadShedSundayPresets = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 2, 3, 26), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: disconnect3LoadShedSundayPresets.setStatus('mandatory')
if mibBuilder.loadTexts: disconnect3LoadShedSundayPresets.setDescription('Disconnect 3 load shed Sunday time settings.\n                  Return value is XX:Xx off, XX:XX on.')
disconnect3LoadShedMondayPresets = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 2, 3, 27), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: disconnect3LoadShedMondayPresets.setStatus('mandatory')
if mibBuilder.loadTexts: disconnect3LoadShedMondayPresets.setDescription('Disconnect 3 load shed Monday time settings.\n                  Return value is XX:Xx off, XX:XX on.')
disconnect3LoadShedTuesdayPresets = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 2, 3, 28), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: disconnect3LoadShedTuesdayPresets.setStatus('mandatory')
if mibBuilder.loadTexts: disconnect3LoadShedTuesdayPresets.setDescription('Disconnect 3 load shed Tuesday time settings.\n                  Return value is XX:Xx off, XX:XX on.')
disconnect3LoadShedWednesdayPresets = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 2, 3, 29), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: disconnect3LoadShedWednesdayPresets.setStatus('mandatory')
if mibBuilder.loadTexts: disconnect3LoadShedWednesdayPresets.setDescription('Disconnect 3 load shed Wednesday time settings.\n                  Return value is XX:Xx off, XX:XX on.')
disconnect3LoadShedThursdayPresets = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 2, 3, 30), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: disconnect3LoadShedThursdayPresets.setStatus('mandatory')
if mibBuilder.loadTexts: disconnect3LoadShedThursdayPresets.setDescription('Disconnect 3 load shed Thursday time settings.\n                  Return value is XX:Xx off, XX:XX on.')
disconnect3LoadShedFridayPresets = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 2, 3, 31), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: disconnect3LoadShedFridayPresets.setStatus('mandatory')
if mibBuilder.loadTexts: disconnect3LoadShedFridayPresets.setDescription('Disconnect 3 load shed Friday time settings.\n                  Return value is XX:Xx off, XX:XX on.')
disconnect3LoadShedSaturdayPresets = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 2, 3, 32), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: disconnect3LoadShedSaturdayPresets.setStatus('mandatory')
if mibBuilder.loadTexts: disconnect3LoadShedSaturdayPresets.setDescription('Disconnect 3 load shed Saturday time settings.\n                  Return value is XX:Xx off, XX:XX on.')
reconnect3VoltagePresets = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 2, 3, 33), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reconnect3VoltagePresets.setStatus('mandatory')
if mibBuilder.loadTexts: reconnect3VoltagePresets.setDescription('Reconnect voltage 3 factory setting range.\n                  Return value is XX.X volts min, XX.X volts max.')
overloadCurrentPresets = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 2, 3, 34), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: overloadCurrentPresets.setStatus('mandatory')
if mibBuilder.loadTexts: overloadCurrentPresets.setDescription('Overload current factory setting range.\n                  Return value is XXXX amps min, XXXX amps max.')
maximumCurrentPreset = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 2, 3, 35), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maximumCurrentPreset.setStatus('mandatory')
if mibBuilder.loadTexts: maximumCurrentPreset.setDescription('Maximum current factory setting.\n                  Return value is XXXX amps.')
batteryFloatCurrentPresets = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 2, 3, 36), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryFloatCurrentPresets.setStatus('mandatory')
if mibBuilder.loadTexts: batteryFloatCurrentPresets.setDescription('Battery float current factory settings.\n                  Return value is XXX amps min, XXX amps max.')
equalizeTimePresets = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 2, 3, 37), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: equalizeTimePresets.setStatus('mandatory')
if mibBuilder.loadTexts: equalizeTimePresets.setDescription('Equalize time factory setting range.\n                  Return value is 00.0 hours min, XX.X hours max.')
equalizeVoltagePresets = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 2, 3, 38), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: equalizeVoltagePresets.setStatus('mandatory')
if mibBuilder.loadTexts: equalizeVoltagePresets.setDescription('Equalize voltage factory setting range.\n                  Return value is XX.X volts min, XX.X volts max.')
batteryResistancePresets = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 2, 3, 39), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryResistancePresets.setStatus('mandatory')
if mibBuilder.loadTexts: batteryResistancePresets.setDescription('Battery resistance percent change factory setting range.\n                  Return value is XXX % min, XXX % max.')
batteryTestIntervalPresets = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 2, 3, 40), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryTestIntervalPresets.setStatus('mandatory')
if mibBuilder.loadTexts: batteryTestIntervalPresets.setDescription('Battery resistance test interval factory setting range.\n                  Return value is XX weeks min, XX weeks max.')
alarmStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 18642, 1, 2, 4))
highVoltageAlarmStatus = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 2, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: highVoltageAlarmStatus.setStatus('mandatory')
if mibBuilder.loadTexts: highVoltageAlarmStatus.setDescription('High voltage alarm status.\n                  Return value 1 = alarm inactive, 2 = alarm active.')
lowVoltageAlarmStatus = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 2, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lowVoltageAlarmStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lowVoltageAlarmStatus.setDescription('Low voltage alarm status.\n                  Return value 1 = alarm inactive, 2 = alarm active.')
overloadAlarmStatus = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 2, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: overloadAlarmStatus.setStatus('mandatory')
if mibBuilder.loadTexts: overloadAlarmStatus.setDescription('Overload alarm status.\n                  Return value 1 = alarm inactive, 2 = alarm active.')
breakerAlarmStatus = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 2, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: breakerAlarmStatus.setStatus('mandatory')
if mibBuilder.loadTexts: breakerAlarmStatus.setDescription('Breaker alarm status.\n                  Return value 1 = alarm inactive, 2 = alarm active.')
acFailureAlarmStatus = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 2, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acFailureAlarmStatus.setStatus('mandatory')
if mibBuilder.loadTexts: acFailureAlarmStatus.setDescription('AC failure alarm status.\n                  Return value 1 = alarm inactive, 2 = alarm active.')
fanFailureAlarmStatus = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 2, 4, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanFailureAlarmStatus.setStatus('mandatory')
if mibBuilder.loadTexts: fanFailureAlarmStatus.setDescription('Fan failure alarm status.\n                  Return value 1 = alarm inactive, 2 = alarm active.')
rectifierFailureAlarmStatus = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 2, 4, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectifierFailureAlarmStatus.setStatus('mandatory')
if mibBuilder.loadTexts: rectifierFailureAlarmStatus.setDescription('Rectifier failure alarm status.\n                  Return value 1 = alarm inactive, 2 = alarm active.')
majorAlarmStatus = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 2, 4, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: majorAlarmStatus.setStatus('mandatory')
if mibBuilder.loadTexts: majorAlarmStatus.setDescription('Major alarm status.\n                  Return value 1 = alarm inactive, 2 = alarm active.')
lowVoltageDisconnect1TemperatureAlarmStatus = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 2, 4, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lowVoltageDisconnect1TemperatureAlarmStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lowVoltageDisconnect1TemperatureAlarmStatus.setDescription('Low voltage disconnect 1 high temperature alarm status.\n                  Return value 1 = alarm inactive, 2 = alarm active.')
lowVoltageDisconnect2TemperatureAlarmStatus = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 2, 4, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lowVoltageDisconnect2TemperatureAlarmStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lowVoltageDisconnect2TemperatureAlarmStatus.setDescription('Low voltage disconnect 2 high temperature alarm status.\n                  Return value 1 = alarm inactive, 2 = alarm active.')
lowVoltageDisconnect3TemperatureAlarmStatus = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 2, 4, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lowVoltageDisconnect3TemperatureAlarmStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lowVoltageDisconnect3TemperatureAlarmStatus.setDescription('Low voltage disconnect 3 high temperature alarm status.\n                   Return value 1 = alarm inactive, 2 = alarm active.')
lowVoltageDisconnect1VoltageAlarmStatus = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 2, 4, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lowVoltageDisconnect1VoltageAlarmStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lowVoltageDisconnect1VoltageAlarmStatus.setDescription('Low voltage disconnect 1 low voltage alarm status.\n                  Return value 1 = alarm inactive, 2 = alarm active.')
lowVoltageDisconnect2VoltageAlarmStatus = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 2, 4, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lowVoltageDisconnect2VoltageAlarmStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lowVoltageDisconnect2VoltageAlarmStatus.setDescription('Low voltage disconnect 2 low voltage alarm status.\n                  Return value 1 = alarm inactive, 2 = alarm active.')
lowVoltageDisconnect3VoltageAlarmStatus = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 2, 4, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lowVoltageDisconnect3VoltageAlarmStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lowVoltageDisconnect3VoltageAlarmStatus.setDescription('Low voltage disconnect 3 low voltage alarm status.\n                   Return value 1 = alarm inactive, 2 = alarm active.')
batteryResistanceAlarmStatus = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 2, 4, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryResistanceAlarmStatus.setStatus('mandatory')
if mibBuilder.loadTexts: batteryResistanceAlarmStatus.setDescription('Battery resistance alarm status.\n                  Return value 1 = alarm inactive, 2 = alarm active.')
batteryCurrentAlarmStatus = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 2, 4, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryCurrentAlarmStatus.setStatus('mandatory')
if mibBuilder.loadTexts: batteryCurrentAlarmStatus.setDescription('Battery resistance alarm status.\n                  Return value 1 = alarm inactive, 2 = alarm active.')
batteryTestAbortCondition1AlarmStatus = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 2, 4, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryTestAbortCondition1AlarmStatus.setStatus('mandatory')
if mibBuilder.loadTexts: batteryTestAbortCondition1AlarmStatus.setDescription('Battery test abort condition 1 alarm status.\n                  Return value 1 = alarm inactive, 2 = alarm active.')
batteryTestAbortCondition2AlarmStatus = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 2, 4, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryTestAbortCondition2AlarmStatus.setStatus('mandatory')
if mibBuilder.loadTexts: batteryTestAbortCondition2AlarmStatus.setDescription('Battery test abort condition 2 alarm status.\n                  Return value 1 = alarm inactive, 2 = alarm active.')
batteryTestAbortCondition3AlarmStatus = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 2, 4, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryTestAbortCondition3AlarmStatus.setStatus('mandatory')
if mibBuilder.loadTexts: batteryTestAbortCondition3AlarmStatus.setDescription('Battery test abort condition 3 alarm status.\n                  Return value 1 = alarm inactive, 2 = alarm active.')
batteryDisconnectAlarmStatus = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 2, 4, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryDisconnectAlarmStatus.setStatus('mandatory')
if mibBuilder.loadTexts: batteryDisconnectAlarmStatus.setDescription('Battery disconnect alarm status.\n                  Return value 1 = alarm inactive, 2 = alarm active.')
fuseAlarmStatus = MibScalar((1, 3, 6, 1, 4, 1, 18642, 1, 2, 4, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fuseAlarmStatus.setStatus('mandatory')
if mibBuilder.loadTexts: fuseAlarmStatus.setDescription('Fuse alarm status.\n                  Return value 1 = alarm inactive, 2 = alarm active.')
digitalSensorAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 18642, 1, 2, 5))
breakerTrap = NotificationType((1, 3, 6, 1, 4, 1, 18642) + (0,0))
if mibBuilder.loadTexts: breakerTrap.setDescription('Breaker has tripped.')
fuseTrap = NotificationType((1, 3, 6, 1, 4, 1, 18642) + (0,1))
if mibBuilder.loadTexts: fuseTrap.setDescription('Fuse has opened.')
batteryDisconnectTrap = NotificationType((1, 3, 6, 1, 4, 1, 18642) + (0,2))
if mibBuilder.loadTexts: batteryDisconnectTrap.setDescription('Battery disconnect has operated.')
programmableTrap = NotificationType((1, 3, 6, 1, 4, 1, 18642) + (0,3))
if mibBuilder.loadTexts: programmableTrap.setDescription('Programmable alarm has occurred.')
systemAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 18642, 1, 2, 6))
highVoltageTrap = NotificationType((1, 3, 6, 1, 4, 1, 18642) + (0,4))
if mibBuilder.loadTexts: highVoltageTrap.setDescription('Float voltage has exceeded preset value.\n                  Return value: High voltage alarm XX.X volts.')
lowVoltageTrap = NotificationType((1, 3, 6, 1, 4, 1, 18642) + (0,5))
if mibBuilder.loadTexts: lowVoltageTrap.setDescription('Float voltage is below preset value.\n                  Return value: Low voltage alarm XX.X volts.')
loadOverCurrentTrap = NotificationType((1, 3, 6, 1, 4, 1, 18642) + (0,6))
if mibBuilder.loadTexts: loadOverCurrentTrap.setDescription('Load current has exceeded preset value.\n                  Return value: Load over current alarm XXXX amps.')
batteryFloatCurrentTrap = NotificationType((1, 3, 6, 1, 4, 1, 18642) + (0,7))
if mibBuilder.loadTexts: batteryFloatCurrentTrap.setDescription('Battery float current has exceeded preset value.\n                  Return value: Battery float current alarm XXXX amps.')
loadDisconnect1VoltageTrap = NotificationType((1, 3, 6, 1, 4, 1, 18642) + (0,8))
if mibBuilder.loadTexts: loadDisconnect1VoltageTrap.setDescription('Load disconnect 1 voltage has dropped below preset value.\n                  Return value: Load disconnect 1 voltage XX.X volts.')
loadDisconnect2VoltageTrap = NotificationType((1, 3, 6, 1, 4, 1, 18642) + (0,9))
if mibBuilder.loadTexts: loadDisconnect2VoltageTrap.setDescription('Load disconnect 2 voltage has dropped below preset value.\n                  Return value: Load disconnect 2 voltage XX.X volts.')
loadDisconnect3VoltageTrap = NotificationType((1, 3, 6, 1, 4, 1, 18642) + (0,10))
if mibBuilder.loadTexts: loadDisconnect3VoltageTrap.setDescription('Load disconnect 3 voltage has dropped below preset value.\n                  Return value: Load disconnect 3 voltage XX.X volts.')
loadDisconnect1TemperatureTrap = NotificationType((1, 3, 6, 1, 4, 1, 18642) + (0,11))
if mibBuilder.loadTexts: loadDisconnect1TemperatureTrap.setDescription('Load disconnect 1 temperature has exceeded preset value.\n                  Return value: Load disconnect 1 temperature alarm XX C.')
loadDisconnect2TemperatureTrap = NotificationType((1, 3, 6, 1, 4, 1, 18642) + (0,12))
if mibBuilder.loadTexts: loadDisconnect2TemperatureTrap.setDescription('Load disconnect 2 temperature has exceeded preset value.\n                  Return value: Load disconnect 2 temperature alarm XX C.')
loadDisconnect3TemperatureTrap = NotificationType((1, 3, 6, 1, 4, 1, 18642) + (0,13))
if mibBuilder.loadTexts: loadDisconnect3TemperatureTrap.setDescription('Load disconnect 3 temperature has exceeded preset value.\n                  Return value: Load disconnect 3 temperature alarm XX C.')
rectifierFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 18642) + (0,14))
if mibBuilder.loadTexts: rectifierFailureTrap.setDescription('Rectifier failure.\n                  Return value: Rectifier failure.')
fanFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 18642) + (0,15))
if mibBuilder.loadTexts: fanFailureTrap.setDescription('Rectifier fan has failed.\n                  Return value: Fan failure.')
acFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 18642) + (0,16))
if mibBuilder.loadTexts: acFailureTrap.setDescription('Rectifier has lost AC input power.\n                  Return value: AC failure.')
majorFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 18642) + (0,17))
if mibBuilder.loadTexts: majorFailureTrap.setDescription('Multiple failures of AC, rectififers, fans or a programmed alarm.\n                  Return value: Multiple AC, fan, rectifier or optional alarm failures has occurred.')
batteryResistanceTrap = NotificationType((1, 3, 6, 1, 4, 1, 18642) + (0,18))
if mibBuilder.loadTexts: batteryResistanceTrap.setDescription('Battery resistance has increased by a programmed percentage.\n                  Return value: Battery resistance alarm X.XXXX ohms, XXX %.')
batteryTestAbort1Trap = NotificationType((1, 3, 6, 1, 4, 1, 18642) + (0,19))
if mibBuilder.loadTexts: batteryTestAbort1Trap.setDescription('Battery failure abort 1 has occured during battery resistance test.\n                  Return value: Battery test failure: Abort 1.')
batteryTestAbort2Trap = NotificationType((1, 3, 6, 1, 4, 1, 18642) + (0,20))
if mibBuilder.loadTexts: batteryTestAbort2Trap.setDescription('Battery failure abort 2 has occured during battery resistance test.\n                  Return value: Battery test failure: Abort 2.')
batteryTestAbort3Trap = NotificationType((1, 3, 6, 1, 4, 1, 18642) + (0,21))
if mibBuilder.loadTexts: batteryTestAbort3Trap.setDescription('Battery failure abort 3 has occured during battery resistance test.\n                  Return value: Battery test failure: Abort 3.')
digitalSensorAlarmClears = MibIdentifier((1, 3, 6, 1, 4, 1, 18642, 1, 2, 7))
breakerTrapClear = NotificationType((1, 3, 6, 1, 4, 1, 18642) + (0,100))
if mibBuilder.loadTexts: breakerTrapClear.setDescription('Breaker alarm has been cleared.')
fuseTrapClear = NotificationType((1, 3, 6, 1, 4, 1, 18642) + (0,101))
if mibBuilder.loadTexts: fuseTrapClear.setDescription('Fuse alarm has been cleared.')
batteryDisconnectTrapClear = NotificationType((1, 3, 6, 1, 4, 1, 18642) + (0,102))
if mibBuilder.loadTexts: batteryDisconnectTrapClear.setDescription('Battery disconnect alarm has been cleared.')
programmableTrapClear = NotificationType((1, 3, 6, 1, 4, 1, 18642) + (0,103))
if mibBuilder.loadTexts: programmableTrapClear.setDescription('Programmable alarm has been cleared.')
systemAlarmClears = MibIdentifier((1, 3, 6, 1, 4, 1, 18642, 1, 2, 8))
highVoltageTrapClear = NotificationType((1, 3, 6, 1, 4, 1, 18642) + (0,104))
if mibBuilder.loadTexts: highVoltageTrapClear.setDescription('High voltage alarm has been cleared.')
lowVoltageTrapClear = NotificationType((1, 3, 6, 1, 4, 1, 18642) + (0,105))
if mibBuilder.loadTexts: lowVoltageTrapClear.setDescription('Low voltage alarm has been cleared.')
loadOverCurrentTrapClear = NotificationType((1, 3, 6, 1, 4, 1, 18642) + (0,106))
if mibBuilder.loadTexts: loadOverCurrentTrapClear.setDescription('Load over current alarm has been cleared.')
batteryFloatCurrentTrapClear = NotificationType((1, 3, 6, 1, 4, 1, 18642) + (0,107))
if mibBuilder.loadTexts: batteryFloatCurrentTrapClear.setDescription('Battery float current alarm has been cleared.')
loadDisconnect1VoltageTrapClear = NotificationType((1, 3, 6, 1, 4, 1, 18642) + (0,108))
if mibBuilder.loadTexts: loadDisconnect1VoltageTrapClear.setDescription('Load disconnect 1 voltage alarm has been cleared.')
loadDisconnect2VoltageTrapClear = NotificationType((1, 3, 6, 1, 4, 1, 18642) + (0,109))
if mibBuilder.loadTexts: loadDisconnect2VoltageTrapClear.setDescription('Load disconnect 2 voltage alarm has been cleared.')
loadDisconnect3VoltageTrapClear = NotificationType((1, 3, 6, 1, 4, 1, 18642) + (0,110))
if mibBuilder.loadTexts: loadDisconnect3VoltageTrapClear.setDescription('Load disconnect 3 voltage alarm has been cleared.')
loadDisconnect1TemperatureTrapClear = NotificationType((1, 3, 6, 1, 4, 1, 18642) + (0,111))
if mibBuilder.loadTexts: loadDisconnect1TemperatureTrapClear.setDescription('Load disconnect 1 temperature alarm has been cleared.')
loadDisconnect2TemperatureTrapClear = NotificationType((1, 3, 6, 1, 4, 1, 18642) + (0,112))
if mibBuilder.loadTexts: loadDisconnect2TemperatureTrapClear.setDescription('Load disconnect 2 temperature alarm has been cleared.')
loadDisconnect3TemperatureTrapClear = NotificationType((1, 3, 6, 1, 4, 1, 18642) + (0,113))
if mibBuilder.loadTexts: loadDisconnect3TemperatureTrapClear.setDescription('Load disconnect 3 temperature alarm has been cleared.')
rectifierFailureTrapClear = NotificationType((1, 3, 6, 1, 4, 1, 18642) + (0,114))
if mibBuilder.loadTexts: rectifierFailureTrapClear.setDescription('Rectififer failure alarm has been cleared.')
fanFailureTrapClear = NotificationType((1, 3, 6, 1, 4, 1, 18642) + (0,115))
if mibBuilder.loadTexts: fanFailureTrapClear.setDescription('Fan failure alarm has been cleared.')
acFailureTrapClear = NotificationType((1, 3, 6, 1, 4, 1, 18642) + (0,116))
if mibBuilder.loadTexts: acFailureTrapClear.setDescription('AC failure alarm been cleared.')
majorFailureTrapClear = NotificationType((1, 3, 6, 1, 4, 1, 18642) + (0,117))
if mibBuilder.loadTexts: majorFailureTrapClear.setDescription('Major failure alarm has been cleared.')
batteryResistanceTrapClear = NotificationType((1, 3, 6, 1, 4, 1, 18642) + (0,118))
if mibBuilder.loadTexts: batteryResistanceTrapClear.setDescription('Battery resistance alarm has been cleared.')
batteryTestAbort1TrapClear = NotificationType((1, 3, 6, 1, 4, 1, 18642) + (0,119))
if mibBuilder.loadTexts: batteryTestAbort1TrapClear.setDescription('Battery test abort 1 alarm has been cleared.')
batteryTestAbort2TrapClear = NotificationType((1, 3, 6, 1, 4, 1, 18642) + (0,120))
if mibBuilder.loadTexts: batteryTestAbort2TrapClear.setDescription('Battery test abort 2 alarm has been cleared.')
batteryTestAbort3TrapClear = NotificationType((1, 3, 6, 1, 4, 1, 18642) + (0,121))
if mibBuilder.loadTexts: batteryTestAbort3TrapClear.setDescription('Battery test abort 3 alarm has been cleared.')
mibBuilder.exportSymbols("CCPOWER-MIB", disconnect2LoadShedWednesdayOff=disconnect2LoadShedWednesdayOff, reconnect2LoadShedThursdayOn=reconnect2LoadShedThursdayOn, loadDisconnect3VoltageTrapClear=loadDisconnect3VoltageTrapClear, reconnect2LoadShedMondayOn=reconnect2LoadShedMondayOn, batteryResistanceTrap=batteryResistanceTrap, reconnect2LoadShedSaturdayOn=reconnect2LoadShedSaturdayOn, factorySettings=factorySettings, disconnect3LoadShedWednesdayPresets=disconnect3LoadShedWednesdayPresets, systemAlarms=systemAlarms, alarmStatus=alarmStatus, loadOverCurrentTrapClear=loadOverCurrentTrapClear, batteryTestAbortCondition3AlarmStatus=batteryTestAbortCondition3AlarmStatus, reconnectVoltage1Presets=reconnectVoltage1Presets, loadDisconnect2TemperatureTrapClear=loadDisconnect2TemperatureTrapClear, batteryFloatCurrentPresets=batteryFloatCurrentPresets, breakerTrapClear=breakerTrapClear, loadDisconnect1TemperatureTrapClear=loadDisconnect1TemperatureTrapClear, lowVoltageDisconnect2TemperatureAlarmStatus=lowVoltageDisconnect2TemperatureAlarmStatus, lowVoltageDisconnect2VoltageAlarmStatus=lowVoltageDisconnect2VoltageAlarmStatus, reconnect1LoadShedTuesdayOn=reconnect1LoadShedTuesdayOn, batteryTestAbort3Trap=batteryTestAbort3Trap, batteryTestAbortCondition1AlarmStatus=batteryTestAbortCondition1AlarmStatus, programmableTrapClear=programmableTrapClear, majorFailureTrap=majorFailureTrap, lowVoltageAlarm=lowVoltageAlarm, acFailureAlarmStatus=acFailureAlarmStatus, disconnect1Voltage=disconnect1Voltage, reconnect1LoadShedFridayOn=reconnect1LoadShedFridayOn, reconnect2LoadShedFridayOn=reconnect2LoadShedFridayOn, batteryResistanceReference=batteryResistanceReference, breakerTrap=breakerTrap, disconnect2LoadShedFridayOff=disconnect2LoadShedFridayOff, loadDisconnect1TemperatureTrap=loadDisconnect1TemperatureTrap, majorFailureTrapClear=majorFailureTrapClear, disconnect1LoadShedSaturdayOff=disconnect1LoadShedSaturdayOff, disconnect1LoadShedTuesdayOff=disconnect1LoadShedTuesdayOff, disconnect3LoadShedFridayPresets=disconnect3LoadShedFridayPresets, floatVoltagePresets=floatVoltagePresets, disconnect2LoadShedMondayOff=disconnect2LoadShedMondayOff, batteryTemperature=batteryTemperature, disconnect2LoadShedSundayOff=disconnect2LoadShedSundayOff, reconnect2LoadShedSundayOn=reconnect2LoadShedSundayOn, highVoltageAlarmPresets=highVoltageAlarmPresets, highVoltageTrap=highVoltageTrap, batteryResistanceTrapClear=batteryResistanceTrapClear, disconnect2VoltagePresets=disconnect2VoltagePresets, batteries=batteries, disconnect1LoadShedMondayOff=disconnect1LoadShedMondayOff, disconnect2LoadShedSundayPresets=disconnect2LoadShedSundayPresets, programmableTrap=programmableTrap, disconnect1LoadShedMondayPresets=disconnect1LoadShedMondayPresets, disconnect1TemperaturePreset=disconnect1TemperaturePreset, disconnect3Temperature=disconnect3Temperature, disconnect2LoadShedTuesdayPresets=disconnect2LoadShedTuesdayPresets, loadOverCurrentTrap=loadOverCurrentTrap, reconnect3LoadShedTuesdayOn=reconnect3LoadShedTuesdayOn, overloadCurrentPresets=overloadCurrentPresets, batteryCycles5to15=batteryCycles5to15, batteryTestAbort1TrapClear=batteryTestAbort1TrapClear, disconnect2LoadShedTuesdayOff=disconnect2LoadShedTuesdayOff, batteryTestAbort2TrapClear=batteryTestAbort2TrapClear, disconnect2LoadShedThursdayOff=disconnect2LoadShedThursdayOff, highVoltageAlarmStatus=highVoltageAlarmStatus, disconnect3Voltage=disconnect3Voltage, disconnect2LoadShedFridayPresets=disconnect2LoadShedFridayPresets, rectifiers=rectifiers, batteryTestAbort1Trap=batteryTestAbort1Trap, batteryCycles1=batteryCycles1, disconnect1LoadShedThursdayOff=disconnect1LoadShedThursdayOff, batteryDisconnectAlarmStatus=batteryDisconnectAlarmStatus, reconnect1LoadShedWednesdayOn=reconnect1LoadShedWednesdayOn, batteryDisconnectTrapClear=batteryDisconnectTrapClear, lowVoltageDisconnect3TemperatureAlarmStatus=lowVoltageDisconnect3TemperatureAlarmStatus, disconnect1LoadShedSundayPresets=disconnect1LoadShedSundayPresets, disconnect3LoadShedThursdayOff=disconnect3LoadShedThursdayOff, disconnect3TemperaturePreset=disconnect3TemperaturePreset, disconnect2LoadShedMondayPresets=disconnect2LoadShedMondayPresets, disconnect2LoadShedThursdayPresets=disconnect2LoadShedThursdayPresets, fanFailureTrapClear=fanFailureTrapClear, disconnect1LoadShedThursdayPresets=disconnect1LoadShedThursdayPresets, disconnect3LoadShedFridayOff=disconnect3LoadShedFridayOff, reconnect1LoadShedSaturdayOn=reconnect1LoadShedSaturdayOn, floatVoltage=floatVoltage, reconnect1Voltage=reconnect1Voltage, batteryResistancePresets=batteryResistancePresets, reconnect3Voltage=reconnect3Voltage, batteryCycles15=batteryCycles15, maximumCurrentPreset=maximumCurrentPreset, reconnect2LoadShedWednesdayOn=reconnect2LoadShedWednesdayOn, equalizeVoltage=equalizeVoltage, readWriteObjects=readWriteObjects, fanFailureTrap=fanFailureTrap, reconnect3LoadShedMondayOn=reconnect3LoadShedMondayOn, batteryResistancePercentChange=batteryResistancePercentChange, disconnect3LoadShedSundayOff=disconnect3LoadShedSundayOff, disconnect2Temperature=disconnect2Temperature, batteryDisconnectTrap=batteryDisconnectTrap, loadDisconnect1VoltageTrap=loadDisconnect1VoltageTrap, loadDisconnect3TemperatureTrap=loadDisconnect3TemperatureTrap, batteryTestIntervalPresets=batteryTestIntervalPresets, batteryCycles15LastCycleDate=batteryCycles15LastCycleDate, systemAlarmClears=systemAlarmClears, reconnect3LoadShedThursdayOn=reconnect3LoadShedThursdayOn, batteryResistanceChange=batteryResistanceChange, reconnect1LoadShedThursdayOn=reconnect1LoadShedThursdayOn, disconnect1LoadShedFridayPresets=disconnect1LoadShedFridayPresets, loadDisconnect3VoltageTrap=loadDisconnect3VoltageTrap, loadDisconnect2TemperatureTrap=loadDisconnect2TemperatureTrap, overloadCurrent=overloadCurrent, loadDisconnect3TemperatureTrapClear=loadDisconnect3TemperatureTrapClear, disconnect3LoadShedMondayOff=disconnect3LoadShedMondayOff, disconnect2TemperaturePreset=disconnect2TemperaturePreset, loadShedTimeControl=loadShedTimeControl, disconnect3LoadShedSundayPresets=disconnect3LoadShedSundayPresets, reconnect3VoltagePresets=reconnect3VoltagePresets, reconnect3LoadShedSaturdayOn=reconnect3LoadShedSaturdayOn, batteryTestAbort2Trap=batteryTestAbort2Trap, disconnect1LoadShedSaturdayPresets=disconnect1LoadShedSaturdayPresets, reconnect3LoadShedWednesdayOn=reconnect3LoadShedWednesdayOn, lowVoltageDisconnect1TemperatureAlarmStatus=lowVoltageDisconnect1TemperatureAlarmStatus, batteryFloatCurrent=batteryFloatCurrent, batteryCycles15LastDuration=batteryCycles15LastDuration, loadDisconnect1VoltageTrapClear=loadDisconnect1VoltageTrapClear, lowVoltageTrap=lowVoltageTrap, lowVoltageDisconnect1VoltageAlarmStatus=lowVoltageDisconnect1VoltageAlarmStatus, disconnect3VoltagePresets=disconnect3VoltagePresets, reconnect1LoadShedSundayOn=reconnect1LoadShedSundayOn, overloadAlarmStatus=overloadAlarmStatus, disconnect3LoadShedTuesdayPresets=disconnect3LoadShedTuesdayPresets, batteryCycles1to5=batteryCycles1to5, reconnect3LoadShedFridayOn=reconnect3LoadShedFridayOn, fanFailureAlarmStatus=fanFailureAlarmStatus, fuseTrapClear=fuseTrapClear, fuseTrap=fuseTrap, rectifierLoadCurrent=rectifierLoadCurrent, reconnect2LoadShedTuesdayOn=reconnect2LoadShedTuesdayOn, disconnect1VoltagePresets=disconnect1VoltagePresets, digitalSensorAlarmClears=digitalSensorAlarmClears, batteryFloatCurrentTrapClear=batteryFloatCurrentTrapClear, batteryCurrentAlarmStatus=batteryCurrentAlarmStatus, rectifierFailureAlarmStatus=rectifierFailureAlarmStatus, lowVoltageTrapClear=lowVoltageTrapClear, digitalSensorAlarms=digitalSensorAlarms, highVoltageAlarm=highVoltageAlarm, equalizeVoltagePresets=equalizeVoltagePresets, disconnect3LoadShedMondayPresets=disconnect3LoadShedMondayPresets, disconnect3LoadShedSaturdayPresets=disconnect3LoadShedSaturdayPresets, batteryFloatCurrentTrap=batteryFloatCurrentTrap, batteryCurrent=batteryCurrent, rectifierFailureTrap=rectifierFailureTrap, lowVoltageDisconnect3VoltageAlarmStatus=lowVoltageDisconnect3VoltageAlarmStatus, batteryTestAbortCondition2AlarmStatus=batteryTestAbortCondition2AlarmStatus, disconnect1LoadShedWednesdayOff=disconnect1LoadShedWednesdayOff, settings=settings, highVoltageTrapClear=highVoltageTrapClear, disconnect1LoadShedTuesdayPresets=disconnect1LoadShedTuesdayPresets, reconnect1LoadShedMondayOn=reconnect1LoadShedMondayOn, disconnect3LoadShedThursdayPresets=disconnect3LoadShedThursdayPresets, disconnect1LoadShedFridayOff=disconnect1LoadShedFridayOff, fuseAlarmStatus=fuseAlarmStatus, loadDisconnect2VoltageTrap=loadDisconnect2VoltageTrap, rectifierFloatVoltage=rectifierFloatVoltage, equalizeTimePresets=equalizeTimePresets, disconnect3LoadShedSaturdayOff=disconnect3LoadShedSaturdayOff, batteryTestAbort3TrapClear=batteryTestAbort3TrapClear, disconnect3LoadShedWednesdayOff=disconnect3LoadShedWednesdayOff, disconnect3LoadShedTuesdayOff=disconnect3LoadShedTuesdayOff, equalizeTime=equalizeTime, loadDisconnect2VoltageTrapClear=loadDisconnect2VoltageTrapClear, batteryTestFault=batteryTestFault, acFailureTrapClear=acFailureTrapClear, batteryResistanceReading=batteryResistanceReading, reconnect2Voltage=reconnect2Voltage, disconnect2LoadShedSaturdayPresets=disconnect2LoadShedSaturdayPresets, disconnect2LoadShedSaturdayOff=disconnect2LoadShedSaturdayOff, breakerAlarmStatus=breakerAlarmStatus, disconnect1LoadShedWednesdayPresets=disconnect1LoadShedWednesdayPresets, batteryResistanceAlarmStatus=batteryResistanceAlarmStatus, ccpower=ccpower, rectifierFailureTrapClear=rectifierFailureTrapClear, disconnect1LoadShedSundayOff=disconnect1LoadShedSundayOff, lowVoltageAlarmPresets=lowVoltageAlarmPresets, reconnect3LoadShedSundayOn=reconnect3LoadShedSundayOn, acFailureTrap=acFailureTrap, majorAlarmStatus=majorAlarmStatus, readOnlyObjects=readOnlyObjects, dcSystem=dcSystem, disconnect2Voltage=disconnect2Voltage, disconnect1Temperature=disconnect1Temperature, disconnect2LoadShedWednesdayPresets=disconnect2LoadShedWednesdayPresets, lowVoltageAlarmStatus=lowVoltageAlarmStatus, reconnect2VoltagePresets=reconnect2VoltagePresets, batteryResistanceTestInterval=batteryResistanceTestInterval)
