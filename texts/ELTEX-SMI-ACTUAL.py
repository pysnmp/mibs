#
# PySNMP MIB module ELTEX-SMI-ACTUAL (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/eltex/ELTEX-SMI-ACTUAL
# Produced by pysmi-1.1.12 at Mon Jun  3 14:01:36 2024
# On host fv-az914-826 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
ObjectIdentity, NotificationType, Counter64, TimeTicks, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, IpAddress, Counter32, enterprises, MibIdentifier, Bits, Integer32, ModuleIdentity, iso = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "NotificationType", "Counter64", "TimeTicks", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "IpAddress", "Counter32", "enterprises", "MibIdentifier", "Bits", "Integer32", "ModuleIdentity", "iso")
DisplayString, TimeStamp, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TimeStamp", "TextualConvention")
eltexLtd = ModuleIdentity((1, 3, 6, 1, 4, 1, 35265))
eltexLtd.setRevisions(('2012-05-29 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: eltexLtd.setRevisionsDescriptions(('Severity level: 4. http://snmp.cs.utwente.nl/ietf/mibs/validate/',))
if mibBuilder.loadTexts: eltexLtd.setLastUpdated('201205290000Z')
if mibBuilder.loadTexts: eltexLtd.setOrganization('Eltex Enterprise, Ltd.')
if mibBuilder.loadTexts: eltexLtd.setContactInfo('www.eltex.nsk.ru')
if mibBuilder.loadTexts: eltexLtd.setDescription('The Structure of Management Information for Eltex Networks.')
elHardware = ObjectIdentity((1, 3, 6, 1, 4, 1, 35265, 1))
if mibBuilder.loadTexts: elHardware.setStatus('current')
if mibBuilder.loadTexts: elHardware.setDescription('The root of eltex hardware OIDs.')
elSoftware = ObjectIdentity((1, 3, 6, 1, 4, 1, 35265, 2))
if mibBuilder.loadTexts: elSoftware.setStatus('current')
if mibBuilder.loadTexts: elSoftware.setDescription('The root of eltex software OIDs.')
eltrapGroup = ObjectIdentity((1, 3, 6, 1, 4, 1, 35265, 3))
if mibBuilder.loadTexts: eltrapGroup.setStatus('current')
if mibBuilder.loadTexts: eltrapGroup.setDescription('The root of eltex traps objects.')
mc240TrapTypes = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 3, 5))
mcTrapExState = MibScalar((1, 3, 6, 1, 4, 1, 35265, 3, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcTrapExState.setStatus('current')
if mibBuilder.loadTexts: mcTrapExState.setDescription('state (additional state)')
mcTrapLParam1 = MibScalar((1, 3, 6, 1, 4, 1, 35265, 3, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcTrapLParam1.setStatus('current')
if mibBuilder.loadTexts: mcTrapLParam1.setDescription('param-1 (slot or index)')
mcTrapLParam2 = MibScalar((1, 3, 6, 1, 4, 1, 35265, 3, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcTrapLParam2.setStatus('current')
if mibBuilder.loadTexts: mcTrapLParam2.setDescription('param-2 (port or index)')
mcTrapLParam3 = MibScalar((1, 3, 6, 1, 4, 1, 35265, 3, 5, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcTrapLParam3.setStatus('current')
if mibBuilder.loadTexts: mcTrapLParam3.setDescription('param-3 (other index)')
mcTrapID = MibScalar((1, 3, 6, 1, 4, 1, 35265, 3, 5, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcTrapID.setStatus('current')
if mibBuilder.loadTexts: mcTrapID.setDescription('ID (pbx trap id)')
mcTrapDescr = MibScalar((1, 3, 6, 1, 4, 1, 35265, 3, 5, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcTrapDescr.setStatus('current')
if mibBuilder.loadTexts: mcTrapDescr.setDescription('Alarm description')
mcTrapRestoredAlarmID = MibScalar((1, 3, 6, 1, 4, 1, 35265, 3, 5, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcTrapRestoredAlarmID.setStatus('current')
if mibBuilder.loadTexts: mcTrapRestoredAlarmID.setDescription('If this restore event then here writed Alarm ID. If this alarm event then mcTrapRestoredAlarmID=0.')
mcTrapSyncType = MibScalar((1, 3, 6, 1, 4, 1, 35265, 3, 5, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcTrapSyncType.setStatus('current')
if mibBuilder.loadTexts: mcTrapSyncType.setDescription('Type of trap: 0 - Normal; 1 - Journal alarms; 2 - Active alarms')
mcReservedFlag = MibScalar((1, 3, 6, 1, 4, 1, 35265, 3, 5, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcReservedFlag.setStatus('current')
if mibBuilder.loadTexts: mcReservedFlag.setDescription('Reserved flag')
radiusSeqNum = MibScalar((1, 3, 6, 1, 4, 1, 35265, 3, 5, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusSeqNum.setStatus('current')
if mibBuilder.loadTexts: radiusSeqNum.setDescription('Sequence number of the request')
radiusStatus = MibScalar((1, 3, 6, 1, 4, 1, 35265, 3, 5, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusStatus.setStatus('current')
if mibBuilder.loadTexts: radiusStatus.setDescription('Completion status of the request')
radiusTimeout = MibScalar((1, 3, 6, 1, 4, 1, 35265, 3, 5, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusTimeout.setStatus('current')
if mibBuilder.loadTexts: radiusTimeout.setDescription('General timeout (in MS) to complete processing of the request\n                                     (before receiving the server response or the completion of all attempts)')
radiusSwitchSrv = MibScalar((1, 3, 6, 1, 4, 1, 35265, 3, 5, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusSwitchSrv.setStatus('current')
if mibBuilder.loadTexts: radiusSwitchSrv.setDescription('Quantity indicator switch to the backup server')
radiusTypeResp = MibScalar((1, 3, 6, 1, 4, 1, 35265, 3, 5, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusTypeResp.setStatus('current')
if mibBuilder.loadTexts: radiusTypeResp.setDescription('The type of the server response')
radiusDescr = MibScalar((1, 3, 6, 1, 4, 1, 35265, 3, 5, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusDescr.setStatus('current')
if mibBuilder.loadTexts: radiusDescr.setDescription('Notification description')
ponTeknovusAlarmTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 3, 10))
ponTeknovusONTAuthAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 10, 1)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ponTeknovusONTAuthAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: ponTeknovusONTAuthAlarmTrap.setDescription("Bad registration ONT Event (mcTrapLParam1=Optical Interface Number, mcTrapDescr='description with MAC addr ONT')")
ponTeknovusUplinkAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 10, 2)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ponTeknovusUplinkAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: ponTeknovusUplinkAlarmTrap.setDescription("Uplink Down, mcTrapLParam1=Link Number, Description='GePON: Eth Link N down'")
ponTeknovusOpticalAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 10, 3)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ponTeknovusOpticalAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: ponTeknovusOpticalAlarmTrap.setDescription('The optical link N (mcTrapLParam1) has no active devices')
ponTeknovusFanAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 10, 4)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ponTeknovusFanAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: ponTeknovusFanAlarmTrap.setDescription('fan stopped. param1 = fan number')
ponTeknovusONTConfAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 10, 5)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ponTeknovusONTConfAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: ponTeknovusONTConfAlarmTrap.setDescription('ONT is not configured. Param1 = optical interface number, Descr = mac-address of ONT.')
ponTeknovusFlappingAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 10, 6)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ponTeknovusFlappingAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: ponTeknovusFlappingAlarmTrap.setDescription('Period between OpticalAlarmTrap events is less than 30 seconds. Param 1 - link number')
ponTeknovusEponAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 10, 7)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ponTeknovusEponAlarmTrap.setStatus('deprecated')
if mibBuilder.loadTexts: ponTeknovusEponAlarmTrap.setDescription('EPON port failed. Param 1 - link number')
ponTeknovusConfigSavedAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 10, 8)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ponTeknovusConfigSavedAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: ponTeknovusConfigSavedAlarmTrap.setDescription('Configuration save error.')
ponTeknovusFirmwareUpdateAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 10, 9)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ponTeknovusFirmwareUpdateAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: ponTeknovusFirmwareUpdateAlarmTrap.setDescription('Firmware update error.')
ponTeknovusUserLoginAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 10, 10)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ponTeknovusUserLoginAlarmTrap.setStatus('deprecated')
if mibBuilder.loadTexts: ponTeknovusUserLoginAlarmTrap.setDescription('User login error\n                                 **This entry is deprecated**')
ponTeknovusRAMAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 10, 11)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ponTeknovusRAMAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: ponTeknovusRAMAlarmTrap.setDescription('Ammount of free memory is < 5Mb')
ponTeknovusLoginAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 10, 12)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ponTeknovusLoginAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: ponTeknovusLoginAlarmTrap.setDescription('Login unsuccessful.\n                                 Param1 = protocol (0 - serial, 1 - SSH, 2 - telnet, 3 - http, 4 - https)\n                                 Descr = login, ip:port')
ponTeknovusDuplicateMacAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 10, 14)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ponTeknovusDuplicateMacAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: ponTeknovusDuplicateMacAlarmTrap.setDescription('Duplicate mac detected. Param1 = VID, Descr = mac.')
ponTeknovusLoadAverageAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 10, 15)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ponTeknovusLoadAverageAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: ponTeknovusLoadAverageAlarmTrap.setDescription('Load average exceeded limits. Param1 = 0 - 1 min, 1 - 5 min, 2 - 15 min')
ponTeknovusTemperatureAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 10, 16)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ponTeknovusTemperatureAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: ponTeknovusTemperatureAlarmTrap.setDescription('Temperature is higher than 65 deg. Param1 = temperature value')
ponTeknovusONTPortBlockedAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 10, 17)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ponTeknovusONTPortBlockedAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: ponTeknovusONTPortBlockedAlarmTrap.setDescription("ONT's UNI port blocked. Param1 = port number, Descr = mac-address of ONT")
ponTeknovusConfigMigrateAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 10, 18)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ponTeknovusConfigMigrateAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: ponTeknovusConfigMigrateAlarmTrap.setDescription('Config migrate error. Param1 = config type (0 - all, 1 - pon)')
ponTeknovusOkTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 3, 11))
ponTeknovusONTAuthOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 11, 1)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ponTeknovusONTAuthOkTrap.setStatus('current')
if mibBuilder.loadTexts: ponTeknovusONTAuthOkTrap.setDescription("Normal registration ONT Event (mcTrapLParam1=Optical Interface Number, mcTrapDescr='description with MAC addr ONT')")
ponTeknovusUplinkOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 11, 2)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ponTeknovusUplinkOkTrap.setStatus('current')
if mibBuilder.loadTexts: ponTeknovusUplinkOkTrap.setDescription("Eth Link Up, mcTrapLParam1=Link Number, Description='GePON: Eth Link N up'")
ponTeknovusOpticalOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 11, 3)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ponTeknovusOpticalOkTrap.setStatus('current')
if mibBuilder.loadTexts: ponTeknovusOpticalOkTrap.setDescription('The optical link N (mcTrapLParam1) has M (mcTrapLParam2) active devices')
ponTeknovusFanOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 11, 4)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ponTeknovusFanOkTrap.setStatus('current')
if mibBuilder.loadTexts: ponTeknovusFanOkTrap.setDescription('param1 = fan number')
ponTeknovusONTConfOKTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 11, 5)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ponTeknovusONTConfOKTrap.setStatus('current')
if mibBuilder.loadTexts: ponTeknovusONTConfOKTrap.setDescription('ONT is configured. Param1 = optical interface number, Descr = macaddress of ont')
ponTeknovusFlappingOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 11, 6)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ponTeknovusFlappingOkTrap.setStatus('current')
if mibBuilder.loadTexts: ponTeknovusFlappingOkTrap.setDescription('1 minute passed after last OpticalAlarmTrap. Param 1 - link number')
ponTeknovusEponOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 11, 7)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ponTeknovusEponOkTrap.setStatus('deprecated')
if mibBuilder.loadTexts: ponTeknovusEponOkTrap.setDescription('EPON port ok. Param 1 - link number')
ponTeknovusConfigSavedOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 11, 8)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ponTeknovusConfigSavedOkTrap.setStatus('current')
if mibBuilder.loadTexts: ponTeknovusConfigSavedOkTrap.setDescription('Configuration saved. Descr = Configuration saved to flash')
ponTeknovusFirmwareUpdateOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 11, 9)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ponTeknovusFirmwareUpdateOkTrap.setStatus('current')
if mibBuilder.loadTexts: ponTeknovusFirmwareUpdateOkTrap.setDescription('Firmware updated. Descr = Firmware updated')
ponTeknovusUserLoginOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 11, 10)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ponTeknovusUserLoginOkTrap.setStatus('deprecated')
if mibBuilder.loadTexts: ponTeknovusUserLoginOkTrap.setDescription('User logged in from CLI. Param1 = privileged/nonprivileged (1/0), Descr = ${username} logged in\n                                 ** This entry is deprecated.')
ponTeknovusRAMOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 11, 11)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ponTeknovusRAMOkTrap.setStatus('current')
if mibBuilder.loadTexts: ponTeknovusRAMOkTrap.setDescription('Ammount of free memory is > 7Mb')
ponTeknovusLoginOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 11, 12)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ponTeknovusLoginOkTrap.setStatus('current')
if mibBuilder.loadTexts: ponTeknovusLoginOkTrap.setDescription('Login successful. Param1 = privileged/nonprivileged(1/0)\n                                 Param1 = protocol (0 - serial, 1 - SSH, 2 - telnet, 3 - http, 4 - https)\n                                 Descr = login, ip:port')
ponTeknovusLogoutOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 11, 13)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ponTeknovusLogoutOkTrap.setStatus('current')
if mibBuilder.loadTexts: ponTeknovusLogoutOkTrap.setDescription('User logged out. Param1 = privileged/nonprivileged(1/0)\n                                 Param1 = protocol (0 - serial, 1 - SSH, 2 - telnet, 3 - http, 4 - https)\n                                 Descr = login, ip:port')
ponTeknovusSwitchConfigChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 11, 14)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ponTeknovusSwitchConfigChangeTrap.setStatus('current')
if mibBuilder.loadTexts: ponTeknovusSwitchConfigChangeTrap.setDescription('Switch configuration has been changed')
ponTeknovusLoadAverageOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 11, 15)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ponTeknovusLoadAverageOkTrap.setStatus('current')
if mibBuilder.loadTexts: ponTeknovusLoadAverageOkTrap.setDescription('Load average is back to normal. Param1 = 0 - 1 min, 1 - 5 min, 2 - 15 min')
ponTeknovusTemperatureOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 11, 16)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ponTeknovusTemperatureOkTrap.setStatus('current')
if mibBuilder.loadTexts: ponTeknovusTemperatureOkTrap.setDescription('Temperature is lower than 60 deg. Param1 = temperature value')
ponTeknovusONTPortBlockedOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 11, 17)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ponTeknovusONTPortBlockedOkTrap.setStatus('current')
if mibBuilder.loadTexts: ponTeknovusONTPortBlockedOkTrap.setDescription("ONT's UNI port not blocked. Param1 = port number, Descr = mac-address of ONT")
ponTeknovusConfigMigrateOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 11, 18)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ponTeknovusConfigMigrateOkTrap.setStatus('current')
if mibBuilder.loadTexts: ponTeknovusConfigMigrateOkTrap.setDescription('Config migrate success. Param1 = config type (0 - all, 1 - pon)')
ponTeknovusBoardRebootTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 11, 20)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ponTeknovusBoardRebootTrap.setStatus('current')
if mibBuilder.loadTexts: ponTeknovusBoardRebootTrap.setDescription('Board is being rebooted. Descr = <username/Snmp> <ip-address> initiated reboot')
ponTeknovusONTDeconfigureTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 11, 21)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ponTeknovusONTDeconfigureTrap.setStatus('current')
if mibBuilder.loadTexts: ponTeknovusONTDeconfigureTrap.setDescription('ONT is being deconfigured (before disconnect). Param1 = pon-channel, Description = mac-address')
ponTeknovusONTStateChangedTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 11, 22)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ponTeknovusONTStateChangedTrap.setStatus('current')
if mibBuilder.loadTexts: ponTeknovusONTStateChangedTrap.setDescription("ONT's state changed. Param1 = pon channel, Param2 = ID ONT, Descr = ELTXhhhhhhhh pon_channel id state")
ponTeknovusONTConfigChangedTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 11, 23)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ponTeknovusONTConfigChangedTrap.setStatus('current')
if mibBuilder.loadTexts: ponTeknovusONTConfigChangedTrap.setDescription('ONT config changed.  Param1 = pon channel, Param2 = ID ONT, Descr = ADD|DEL|EDIT ELTXhhhhhhhh pon_channel id description')
ponTeknovusConfigRereadTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 11, 24)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ponTeknovusConfigRereadTrap.setStatus('current')
if mibBuilder.loadTexts: ponTeknovusConfigRereadTrap.setDescription('Config was reread from flash.')
fxs72AlarmTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 3, 6))
fxs72VbatAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 6, 1)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: fxs72VbatAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: fxs72VbatAlarmTrap.setDescription('Vbat is out of limits (Vbat<38V or Vbat>72V). LParam1 = Vbat voltage')
fxs72VringAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 6, 2)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: fxs72VringAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: fxs72VringAlarmTrap.setDescription('Vring1 or Vring2 is out of limits (Vring<100V or Vring>120V). LParam1 = Vring voltage. LParam2 = 1 or 2')
fxs72TemperatureAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 6, 3)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: fxs72TemperatureAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: fxs72TemperatureAlarmTrap.setDescription('Temperature is too high. (Temp>90 deg). LParam1 = temperature value. LParam2 = sensor number')
fxs72FanAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 6, 4)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: fxs72FanAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: fxs72FanAlarmTrap.setDescription('Fans are on, but not rotating. LParam1 = fan number')
fxs72SSwAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 6, 5)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: fxs72SSwAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: fxs72SSwAlarmTrap.setDescription('Softswitch became disconnected\n                                TAU-MEGACO p1=status (undefined=0, connect=1, disconnect=2)')
fxs72PortAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 6, 6)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: fxs72PortAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: fxs72PortAlarmTrap.setDescription('Port Blocked. \n                                TAU-SIP\n\t\t\t\t\t\t\t\t\tParam1 = port number,\n\t\t\t\t\t\t\t\t\tp2=block cause, Descr = Block cause\n\t\t\t\t\t\t\t\t\t\t0x00 - unknown cause (0x00)\n\t\t\t\t\t\t\t\t\t\t0x01 - leakage current has exceeded the permissible parameters\n\t\t\t\t\t\t\t\t\t\t0x02 - temperature has exceeded the permissible parameters\n\t\t\t\t\t\t\t\t\t\t0x03 - power dissipation has exceeded the permissible parameters\n\t\t\t\t\t\t\t\t\t\t0x04 - reinitialization by changing the input voltage\n\t\t\t\t\t\t\t\t\t\t0x05 - hardware reset\n\t\t\t\t\t\t\t\t\t\t0x06 - low Vbat level\n\t\t\t\t\t\t\t\t\t\t0x07 - FXS port is out of order\n\t\t\t\t\t\t\t\t\t\t0x08 - FXO line is not connected\n\t\t\t\t\t\t\t\t\t\t0x09 - low FXO line current\n\t\t\t\t\t\t\t\t\t\t0x0A - receiver offhook\n                                TAU-MEGACO\n\t\t\t\t\t\t\t\t\tp1=port, \n\t\t\t\t\t\t\t\t\tp2=cause\n\t\t\t\t\t\t\t\t\t\t1-leakage_current\n\t\t\t\t\t\t\t\t\t\t2-overheating\n\t\t\t\t\t\t\t\t\t\t3-dissipated_power')
fxs72BpuAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 6, 12)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: fxs72BpuAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: fxs72BpuAlarmTrap.setDescription('BPU is NOT available')
fxs72TempmeasurementAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 6, 13)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: fxs72TempmeasurementAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: fxs72TempmeasurementAlarmTrap.setDescription('Temperature measurement failed. TAU-SIP 2.9')
fxs72LicenseAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 6, 14)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: fxs72LicenseAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: fxs72LicenseAlarmTrap.setDescription('TAU-MEGACO 1.2\n\t\t\t\t\t\t\t\t\tmcTrapExState: 1 - alarm, no license, 0 - ok license')
fxs72updateFwFail = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 6, 20)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: fxs72updateFwFail.setStatus('current')
if mibBuilder.loadTexts: fxs72updateFwFail.setDescription('par1 = error type. descr = file + addr + FAIL')
fxs72PowerUnitTermAlarm = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 6, 21)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: fxs72PowerUnitTermAlarm.setStatus('current')
if mibBuilder.loadTexts: fxs72PowerUnitTermAlarm.setDescription('Power supply unit temperature is out of limit (more than 95 C)')
fxs72FanLowSpeedAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 6, 22)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: fxs72FanLowSpeedAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: fxs72FanLowSpeedAlarmTrap.setDescription('Fan rotation speed lower than 1000 rpm')
fxs72OkTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 3, 7))
fxs72VbatOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 7, 1)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: fxs72VbatOkTrap.setStatus('current')
if mibBuilder.loadTexts: fxs72VbatOkTrap.setDescription('Vbat is back to normal.')
fxs72VringOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 7, 2)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: fxs72VringOkTrap.setStatus('current')
if mibBuilder.loadTexts: fxs72VringOkTrap.setDescription('Vring1 or Vring2 is back to normal. LParam2 = 1 or 2')
fxs72TemperatureOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 7, 3)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: fxs72TemperatureOkTrap.setStatus('current')
if mibBuilder.loadTexts: fxs72TemperatureOkTrap.setDescription('Temperature is back to normal. LParam2 = sensor number')
fxs72FanOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 7, 4)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: fxs72FanOkTrap.setStatus('current')
if mibBuilder.loadTexts: fxs72FanOkTrap.setDescription('Fans are rotating. LParam1 = fan number')
fxs72SSwOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 7, 5)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: fxs72SSwOkTrap.setStatus('current')
if mibBuilder.loadTexts: fxs72SSwOkTrap.setDescription('Softswitch status ok.\n                                TAU-MEGACO p1=status (undefined=0, connect=1, disconnect=2)')
fxs72PortOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 7, 6)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: fxs72PortOkTrap.setStatus('current')
if mibBuilder.loadTexts: fxs72PortOkTrap.setDescription('Port unblocked. Param1 = port number, p2=state\n                                TAU-MEGACO p1=port, p2=state(ELTEX-FXS72::PortMegacoState)')
fxs72VmodeSwitchTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 7, 10)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: fxs72VmodeSwitchTrap.setStatus('current')
if mibBuilder.loadTexts: fxs72VmodeSwitchTrap.setDescription('Voltage mode has been switched. LParam1 = new mode (1- 60V, 2 - 48V).')
fxs72FansSwitchTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 7, 11)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: fxs72FansSwitchTrap.setStatus('current')
if mibBuilder.loadTexts: fxs72FansSwitchTrap.setDescription('Fans has been switched on or off. LParam1 = 0 - off, 1 - on.')
fxs72BpuOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 7, 12)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: fxs72BpuOkTrap.setStatus('current')
if mibBuilder.loadTexts: fxs72BpuOkTrap.setDescription('BPU is available')
fxs72TempmeasurementOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 7, 13)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: fxs72TempmeasurementOkTrap.setStatus('current')
if mibBuilder.loadTexts: fxs72TempmeasurementOkTrap.setDescription('Temperature measurement is OK. TAU-SIP 2.9')
fxs72LicenseOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 7, 14)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: fxs72LicenseOkTrap.setStatus('current')
if mibBuilder.loadTexts: fxs72LicenseOkTrap.setDescription('TAU-MEGACO 1.2\n\t\t\t\t\t\t\t\t\tmcTrapExState: 1 - alarm, no license, 0 - ok license')
fxs72updateFwOk = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 7, 20)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: fxs72updateFwOk.setStatus('current')
if mibBuilder.loadTexts: fxs72updateFwOk.setDescription('descr = file + addr + OK')
fxs72PowerUnitTermOk = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 7, 21)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: fxs72PowerUnitTermOk.setStatus('current')
if mibBuilder.loadTexts: fxs72PowerUnitTermOk.setDescription('Power supply unit temperature is normal (lower than 95 C)')
fxs72FanLowSpeedOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 7, 22)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: fxs72FanLowSpeedOkTrap.setStatus('current')
if mibBuilder.loadTexts: fxs72FanLowSpeedOkTrap.setDescription('Fan rotation speed is normal (more than 1000 rpm).')
pp4AlarmTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 3, 12))
pp4LinkAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 12, 1)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: pp4LinkAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: pp4LinkAlarmTrap.setDescription('Link is down (Param1 = link number)')
pp4AutoNegotiationAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 12, 2)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: pp4AutoNegotiationAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: pp4AutoNegotiationAlarmTrap.setDescription('Autonegotiation failed (Param1 = link number)')
pp4MemoryAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 12, 3)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: pp4MemoryAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: pp4MemoryAlarmTrap.setDescription('Running out of free memory (Param1 = current ammount of free memory)')
pp4LoadAvgAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 12, 4)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: pp4LoadAvgAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: pp4LoadAvgAlarmTrap.setDescription('Load avg > 95% (Param1 = 1-1min, 2-5 min, 3-15 min, all LAs in description')
pp4LoginAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 12, 5)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: pp4LoginAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: pp4LoginAlarmTrap.setDescription('Login failed')
pp4LogoutAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 12, 6)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: pp4LogoutAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: pp4LogoutAlarmTrap.setDescription('Logout failed')
pp4SaveAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 12, 8)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: pp4SaveAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: pp4SaveAlarmTrap.setDescription('Save FAIL')
pp4LoadCpuAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 12, 9)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: pp4LoadCpuAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: pp4LoadCpuAlarmTrap.setDescription('Load CPU Alarm')
pp4DuplicationMacAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 12, 10)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: pp4DuplicationMacAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: pp4DuplicationMacAlarmTrap.setDescription('Duplication of MAC address on PP4')
pp4LinkFlapAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 12, 11)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: pp4LinkFlapAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: pp4LinkFlapAlarmTrap.setDescription('linkflap on ifindex=param1')
pp4BoardRemoveAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 12, 13)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: pp4BoardRemoveAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: pp4BoardRemoveAlarmTrap.setDescription('Board removed from slot #par1. board type #par2')
pp4UnitRemoveAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 12, 14)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: pp4UnitRemoveAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: pp4UnitRemoveAlarmTrap.setDescription('UNIT number par[1] vas removed from position left(par[2]=1) or right(par[2]=0)')
pp4PortCounterErrorFoundAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 12, 16)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: pp4PortCounterErrorFoundAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: pp4PortCounterErrorFoundAlarmTrap.setDescription('Founded errors for this port-counter')
pp4SyncDisallowedAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 12, 17)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: pp4SyncDisallowedAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: pp4SyncDisallowedAlarmTrap.setDescription("User didn't set command to allow unit-synchronization")
pp4RebootUnitAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 12, 19)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: pp4RebootUnitAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: pp4RebootUnitAlarmTrap.setDescription(' ')
pp4RebootStackAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 12, 20)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: pp4RebootStackAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: pp4RebootStackAlarmTrap.setDescription(' ')
pp4RebootFwTimerAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 12, 21)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: pp4RebootFwTimerAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: pp4RebootFwTimerAlarmTrap.setDescription(' ')
pp4FwUpdateAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 12, 22)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: pp4FwUpdateAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: pp4FwUpdateAlarmTrap.setDescription(' ')
pp4FwConfirmNeededAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 12, 23)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: pp4FwConfirmNeededAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: pp4FwConfirmNeededAlarmTrap.setDescription(' ')
pp4OkTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 3, 13))
pp4LinkOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 13, 1)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: pp4LinkOkTrap.setStatus('current')
if mibBuilder.loadTexts: pp4LinkOkTrap.setDescription('Link is up (Param1 = link number)')
pp4AutoNegotiationOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 13, 2)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: pp4AutoNegotiationOkTrap.setStatus('current')
if mibBuilder.loadTexts: pp4AutoNegotiationOkTrap.setDescription('Autonegotiation successful (Param1 = link number)')
pp4MemoryOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 13, 3)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: pp4MemoryOkTrap.setStatus('current')
if mibBuilder.loadTexts: pp4MemoryOkTrap.setDescription('Ammount of free memory is back to normal')
pp4LoadAvgOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 13, 4)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: pp4LoadAvgOkTrap.setStatus('current')
if mibBuilder.loadTexts: pp4LoadAvgOkTrap.setDescription('Load avg is back to normal (Param1 = 1-1min, 2-5 min, 3-15 min, all LAs in description')
pp4LoginOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 13, 5)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: pp4LoginOkTrap.setStatus('current')
if mibBuilder.loadTexts: pp4LoginOkTrap.setDescription('Login OK')
pp4LogoutOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 13, 6)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: pp4LogoutOkTrap.setStatus('current')
if mibBuilder.loadTexts: pp4LogoutOkTrap.setDescription('Logout OK')
pp4CommitOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 13, 7)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: pp4CommitOkTrap.setStatus('current')
if mibBuilder.loadTexts: pp4CommitOkTrap.setDescription('Commit OK')
pp4SaveOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 13, 8)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: pp4SaveOkTrap.setStatus('current')
if mibBuilder.loadTexts: pp4SaveOkTrap.setDescription('Save OK')
pp4LinkFlapEndOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 13, 11)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: pp4LinkFlapEndOkTrap.setStatus('current')
if mibBuilder.loadTexts: pp4LinkFlapEndOkTrap.setDescription('linkflap End on ifindex=param1')
pp4ConfigChangedOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 13, 12)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: pp4ConfigChangedOkTrap.setStatus('current')
if mibBuilder.loadTexts: pp4ConfigChangedOkTrap.setDescription('Config pp4x Changed')
pp4BoardAddOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 13, 13)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: pp4BoardAddOkTrap.setStatus('current')
if mibBuilder.loadTexts: pp4BoardAddOkTrap.setDescription('New board added to slot #par1. board type #par2')
pp4UnitAddOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 13, 14)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: pp4UnitAddOkTrap.setStatus('current')
if mibBuilder.loadTexts: pp4UnitAddOkTrap.setDescription('UNIT number par[1] vas added to position left(par[2]=1) or right(par[2]=0)')
pp4RoleChangedOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 13, 15)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: pp4RoleChangedOkTrap.setStatus('current')
if mibBuilder.loadTexts: pp4RoleChangedOkTrap.setDescription('Now unit number par[1] with position par[2] is Master')
pp4PortCounterErrorFreeOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 13, 16)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: pp4PortCounterErrorFreeOkTrap.setStatus('current')
if mibBuilder.loadTexts: pp4PortCounterErrorFreeOkTrap.setDescription('No errors for this port-counter')
pp4SyncDisallowedOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 13, 17)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: pp4SyncDisallowedOkTrap.setStatus('current')
if mibBuilder.loadTexts: pp4SyncDisallowedOkTrap.setDescription('User set command to allow unit-synchronization')
pp4ConfigRestoredOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 13, 18)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: pp4ConfigRestoredOkTrap.setStatus('current')
if mibBuilder.loadTexts: pp4ConfigRestoredOkTrap.setDescription('timeout for confirm. Config Restored Now')
pp4RebootUnitOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 13, 19)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: pp4RebootUnitOkTrap.setStatus('current')
if mibBuilder.loadTexts: pp4RebootUnitOkTrap.setDescription(' ')
pp4FwUpdateOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 13, 22)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: pp4FwUpdateOkTrap.setStatus('current')
if mibBuilder.loadTexts: pp4FwUpdateOkTrap.setDescription(' ')
mxa32AlarmTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 3, 14))
mxa32OkTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 3, 15))
mxa32DslLinkAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 14, 1)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapSyncType"))
if mibBuilder.loadTexts: mxa32DslLinkAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: mxa32DslLinkAlarmTrap.setDescription('Adsl port in down state.\n                                LParam1 - port number')
mxa32EthLinkAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 14, 2)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapSyncType"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: mxa32EthLinkAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: mxa32EthLinkAlarmTrap.setDescription('Uplink port in down state.\n                                LParam1 - port number')
mxa32TempAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 14, 3)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"), ("ELTEX-SMI-ACTUAL", "mcTrapSyncType"))
if mibBuilder.loadTexts: mxa32TempAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: mxa32TempAlarmTrap.setDescription("Temperature is too high.\n                                LParam1 - sensor index: 0(sensor0), 1(sensor1)\n                                LParam3 - actual temperature value ['C]")
mxa32VoltAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 14, 4)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"), ("ELTEX-SMI-ACTUAL", "mcTrapSyncType"))
if mibBuilder.loadTexts: mxa32VoltAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: mxa32VoltAlarmTrap.setDescription('Device voltage is out of range.\n                                LParam1 - voltage index: 2(1V), 3(12V), 4(-12V), 5(3.3V), 6(2.5V), 7(1.8V), 8(0.9V), 9(1.5V)\n                                LParam3 - actual voltage value [mV/10]')
mxa32UserLoginTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 14, 5)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"), ("ELTEX-SMI-ACTUAL", "mcTrapSyncType"))
if mibBuilder.loadTexts: mxa32UserLoginTrap.setStatus('current')
if mibBuilder.loadTexts: mxa32UserLoginTrap.setDescription('User logIN.\n                                LParam1 - the process pid\n                                LParam2 - interface number: 1(console), 2(telnet), 3..6(web)')
mxa32DslLinkOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 15, 1)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"), ("ELTEX-SMI-ACTUAL", "mcTrapSyncType"))
if mibBuilder.loadTexts: mxa32DslLinkOkTrap.setStatus('current')
if mibBuilder.loadTexts: mxa32DslLinkOkTrap.setDescription('Adsl port is up.\n                                LParam1 - port number')
mxa32EthLinkOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 15, 2)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"), ("ELTEX-SMI-ACTUAL", "mcTrapSyncType"))
if mibBuilder.loadTexts: mxa32EthLinkOkTrap.setStatus('current')
if mibBuilder.loadTexts: mxa32EthLinkOkTrap.setDescription('Uplink port is up.\n                                LParam1 - port number')
mxa32TempOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 15, 3)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"), ("ELTEX-SMI-ACTUAL", "mcTrapSyncType"))
if mibBuilder.loadTexts: mxa32TempOkTrap.setStatus('current')
if mibBuilder.loadTexts: mxa32TempOkTrap.setDescription("Temperature normalization.\n                                LParam1 - sensor index: 0(sensor0), 1(sensor1)\n                                LParam3 - actual temperature value ['C]")
mxa32VoltOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 15, 4)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"), ("ELTEX-SMI-ACTUAL", "mcTrapSyncType"))
if mibBuilder.loadTexts: mxa32VoltOkTrap.setStatus('current')
if mibBuilder.loadTexts: mxa32VoltOkTrap.setDescription('Device voltage is in acceptable range.\n                                LParam1 - voltage index: 2(1V), 3(12V), 4(-12V), 5(3.3V), 6(2.5V), 7(1.8V), 8(0.9V), 9(1.5V)\n                                LParam3 - actual voltage value [mV/10]')
mxa32UserLogoutTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 15, 5)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"), ("ELTEX-SMI-ACTUAL", "mcTrapSyncType"))
if mibBuilder.loadTexts: mxa32UserLogoutTrap.setStatus('current')
if mibBuilder.loadTexts: mxa32UserLogoutTrap.setDescription('User logOUT.\n                                LParam1 - the process pid\n                                LParam2 - interface number: 1(console), 2(telnet), 3..6(web)')
mxa64AlarmTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 3, 16))
mxa64OkTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 3, 17))
mxa64DslLinkAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 16, 1)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapSyncType"))
if mibBuilder.loadTexts: mxa64DslLinkAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: mxa64DslLinkAlarmTrap.setDescription('Adsl port in down state.\n                                LParam1 - port number')
mxa64EthLinkAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 16, 2)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapSyncType"))
if mibBuilder.loadTexts: mxa64EthLinkAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: mxa64EthLinkAlarmTrap.setDescription('Uplink port in down state.\n                                LParam1 - port number')
mxa64TempAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 16, 3)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"), ("ELTEX-SMI-ACTUAL", "mcTrapSyncType"))
if mibBuilder.loadTexts: mxa64TempAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: mxa64TempAlarmTrap.setDescription("Temperature is too high.\n                                LParam1 - sensor index: 0(sensor0), 1(sensor1), 2(sensor2), 3(sensor3)\n                                LParam3 - actual temperature value ['C]")
mxa64VoltAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 16, 4)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"), ("ELTEX-SMI-ACTUAL", "mcTrapSyncType"))
if mibBuilder.loadTexts: mxa64VoltAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: mxa64VoltAlarmTrap.setDescription('Device voltage is out of range.\n                                LParam1 - voltage index: 4(1V), 5(12V), 6(-12V), 7(3.3V), 8(2.5V), 9(1.8V), 10(0.9V), 11(1.5V)\n                                LParam3 - actual voltage value [mV/10]')
mxa64UserLoginTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 16, 5)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"), ("ELTEX-SMI-ACTUAL", "mcTrapSyncType"))
if mibBuilder.loadTexts: mxa64UserLoginTrap.setStatus('current')
if mibBuilder.loadTexts: mxa64UserLoginTrap.setDescription('User login.\n                                LParam1 - the process pid\n                                LParam2 - interface number: 1(console), 2(telnet), 3..6(web)')
mxa64DslLinkOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 17, 1)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"), ("ELTEX-SMI-ACTUAL", "mcTrapSyncType"))
if mibBuilder.loadTexts: mxa64DslLinkOkTrap.setStatus('current')
if mibBuilder.loadTexts: mxa64DslLinkOkTrap.setDescription('Adsl port is up.\n                                LParam1 - port number')
mxa64EthLinkOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 17, 2)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"), ("ELTEX-SMI-ACTUAL", "mcTrapSyncType"))
if mibBuilder.loadTexts: mxa64EthLinkOkTrap.setStatus('current')
if mibBuilder.loadTexts: mxa64EthLinkOkTrap.setDescription('Uplink port is up.\n                                LParam1 - port number')
mxa64TempOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 17, 3)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"), ("ELTEX-SMI-ACTUAL", "mcTrapSyncType"))
if mibBuilder.loadTexts: mxa64TempOkTrap.setStatus('current')
if mibBuilder.loadTexts: mxa64TempOkTrap.setDescription("Temperature normalization.\n                                LParam1 - sensor index: 0(sensor0), 1(sensor1), 2(sensor2), 3(sensor3)\n                                LParam3 - actual temperature value ['C]")
mxa64VoltOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 17, 4)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"), ("ELTEX-SMI-ACTUAL", "mcTrapSyncType"))
if mibBuilder.loadTexts: mxa64VoltOkTrap.setStatus('current')
if mibBuilder.loadTexts: mxa64VoltOkTrap.setDescription('Device voltage is in acceptable range.\n                                LParam1 - voltage index: 4(1V), 5(12V), 6(-12V), 7(3.3V), 8(2.5V), 9(1.8V), 10(0.9V), 11(1.5V)\n                                LParam3 - actual voltage value [mV/10]')
mxa64UserLogoutTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 17, 5)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"), ("ELTEX-SMI-ACTUAL", "mcTrapSyncType"))
if mibBuilder.loadTexts: mxa64UserLogoutTrap.setStatus('current')
if mibBuilder.loadTexts: mxa64UserLogoutTrap.setDescription('User logout.\n                                LParam1 - the process pid\n                                LParam2 - interface number: 1(console), 2(telnet), 3..6(web)')
mxa24AlarmTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 3, 18))
mxa24OkTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 3, 19))
mxa24DslLinkAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 18, 1)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapSyncType"))
if mibBuilder.loadTexts: mxa24DslLinkAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: mxa24DslLinkAlarmTrap.setDescription('Adsl port in down state.\n                                LParam1 - port number')
mxa24EthLinkAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 18, 2)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapSyncType"))
if mibBuilder.loadTexts: mxa24EthLinkAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: mxa24EthLinkAlarmTrap.setDescription('Uplink port in down state.\n                                LParam1 - port number')
mxa24TempAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 18, 3)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"), ("ELTEX-SMI-ACTUAL", "mcTrapSyncType"))
if mibBuilder.loadTexts: mxa24TempAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: mxa24TempAlarmTrap.setDescription("Temperature is too high.\n                                LParam1 - sensor index: 0(sensor0), 1(sensor1)\n                                LParam3 - actual temperature value ['C]")
mxa24VoltAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 18, 4)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"), ("ELTEX-SMI-ACTUAL", "mcTrapSyncType"))
if mibBuilder.loadTexts: mxa24VoltAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: mxa24VoltAlarmTrap.setDescription('Device voltage is out of range.\n                                LParam1 - voltage index: 2(1V), 3(12V), 4(-12V), 5(3.3V), 6(2.5V), 7(1.8V), 8(0.9V), 9(1.5V)\n                                LParam3 - actual voltage value [mV/10]')
mxa24UserLoginTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 18, 5)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"), ("ELTEX-SMI-ACTUAL", "mcTrapSyncType"))
if mibBuilder.loadTexts: mxa24UserLoginTrap.setStatus('current')
if mibBuilder.loadTexts: mxa24UserLoginTrap.setDescription('Device voltage is out of range.\n                                LParam1 - the process pid\n                                LParam2 - interface number: 1(console), 2(telnet), 3..6(web)')
mxa24DslLinkOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 19, 1)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"), ("ELTEX-SMI-ACTUAL", "mcTrapSyncType"))
if mibBuilder.loadTexts: mxa24DslLinkOkTrap.setStatus('current')
if mibBuilder.loadTexts: mxa24DslLinkOkTrap.setDescription('Adsl port is up.\n                                LParam1 - port number')
mxa24EthLinkOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 19, 2)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"), ("ELTEX-SMI-ACTUAL", "mcTrapSyncType"))
if mibBuilder.loadTexts: mxa24EthLinkOkTrap.setStatus('current')
if mibBuilder.loadTexts: mxa24EthLinkOkTrap.setDescription('Uplink port is up.\n                                LParam1 - port number')
mxa24TempOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 19, 3)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"), ("ELTEX-SMI-ACTUAL", "mcTrapSyncType"))
if mibBuilder.loadTexts: mxa24TempOkTrap.setStatus('current')
if mibBuilder.loadTexts: mxa24TempOkTrap.setDescription("Temperature normalization.\n                                LParam1 - sensor index: 0(sensor0), 1(sensor1)\n                                LParam3 - actual temperature value ['C]")
mxa24VoltOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 19, 4)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"), ("ELTEX-SMI-ACTUAL", "mcTrapSyncType"))
if mibBuilder.loadTexts: mxa24VoltOkTrap.setStatus('current')
if mibBuilder.loadTexts: mxa24VoltOkTrap.setDescription('Device voltage is in acceptable range.\n                                LParam1 - voltage index: 2(1V), 3(12V), 4(-12V), 5(3.3V), 6(2.5V), 7(1.8V), 8(0.9V), 9(1.5V)\n                                LParam3 - actual voltage value [mV/10]')
mxa24UserLogoutTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 19, 5)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"), ("ELTEX-SMI-ACTUAL", "mcTrapSyncType"))
if mibBuilder.loadTexts: mxa24UserLogoutTrap.setStatus('current')
if mibBuilder.loadTexts: mxa24UserLogoutTrap.setDescription('User logout.\n                                LParam1 - the process pid\n                                LParam2 - interface number: 1(console), 2(telnet), 3..6(web)')
omsOperationAlarmTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 3, 20))
omsOperationOkTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 3, 21))
omsOperationCommandAlarm = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 20, 1)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: omsOperationCommandAlarm.setStatus('current')
if mibBuilder.loadTexts: omsOperationCommandAlarm.setDescription("   mcTrapLParam1 = command <upload=1, download=2, apply=3, confirm=4, save=5, reboot=6, test=7>;\n                    mcTrapLParam2 = filetype <pattern=1, private=2, binary=3>\n                    mcTrapDescr = Description of operarion:\n                        DeviceName, \n                        command <apply, download, save, upload, reboot, confirm, test>, \n                        tftp host,\n                        config filename,\n                        status=Error,\n                        cause of error\n                        \n                    for 'sigtran' par3 = cause integer code, \n                    in description text - system(...) ret code if needed")
omsOperationCommandOk = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 21, 1)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: omsOperationCommandOk.setStatus('current')
if mibBuilder.loadTexts: omsOperationCommandOk.setDescription('   mcTrapLParam1 = command <upload=1, download=2, apply=3, confirm=4, save=5, reboot=6, test=7>;\n                    mcTrapLParam2 = filetype <pattern=1, private=2, binary=3>\n                    mcTrapDescr = Description of operarion:\n                        DeviceName, \n                        command <apply, download, save, upload, reboot, confirm, test>, \n                        tftp host,\n                        config filename,\n                        status=Ok')
elcAlarmTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 3, 22))
elcONTAuthAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 22, 1)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: elcONTAuthAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: elcONTAuthAlarmTrap.setDescription("Bad registration ONT Event (mcTrapLParam1=Optical Interface Number, mcTrapDescr='description with MAC addr ONT')")
elcUplinkAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 22, 2)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: elcUplinkAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: elcUplinkAlarmTrap.setDescription("Uplink Down, mcTrapLParam1=Link Number, Description='GePON: Eth Link N down'")
elcOpticalAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 22, 3)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: elcOpticalAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: elcOpticalAlarmTrap.setDescription('The optical link N (mcTrapLParam1) has no active devices')
elcFanAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 22, 4)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: elcFanAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: elcFanAlarmTrap.setDescription('fan stopped. param1 = fan number')
elcONTConfAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 22, 5)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: elcONTConfAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: elcONTConfAlarmTrap.setDescription('ONT is not configured. Param1 = optical interface number, Descr = mac-address of ONT.')
elcFlappingAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 22, 6)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: elcFlappingAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: elcFlappingAlarmTrap.setDescription('Period between OpticalAlarmTrap events is less than 30 seconds. Param 1 - link number')
elcEponAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 22, 7)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: elcEponAlarmTrap.setStatus('deprecated')
if mibBuilder.loadTexts: elcEponAlarmTrap.setDescription('EPON port failed. Param 1 - link number')
elcConfigSavedAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 22, 8)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: elcConfigSavedAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: elcConfigSavedAlarmTrap.setDescription('Configuration save error.')
elcFirmwareUpdateAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 22, 9)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: elcFirmwareUpdateAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: elcFirmwareUpdateAlarmTrap.setDescription('Firmware update error.')
elcUserLoginAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 22, 10)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: elcUserLoginAlarmTrap.setStatus('deprecated')
if mibBuilder.loadTexts: elcUserLoginAlarmTrap.setDescription('User login error\n                                 **This entry is deprecated**')
elcRAMAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 22, 11)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: elcRAMAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: elcRAMAlarmTrap.setDescription('Ammount of free memory is < 5Mb')
elcLoginAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 22, 12)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: elcLoginAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: elcLoginAlarmTrap.setDescription('Login unsuccessful.\n                                 Param1 = protocol (0 - serial, 1 - SSH, 2 - telnet, 3 - http, 4 - https)\n                                 Descr = login, ip:port')
elcDuplicateMacAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 22, 14)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: elcDuplicateMacAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: elcDuplicateMacAlarmTrap.setDescription('Duplicate mac detected. Param1 = VID, Descr = mac.')
elcLoadAverageAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 22, 15)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: elcLoadAverageAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: elcLoadAverageAlarmTrap.setDescription('Load average exceeded limits. Param1 = 0 - 1 min, 1 - 5 min, 2 - 15 min')
elcTemperatureAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 22, 16)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: elcTemperatureAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: elcTemperatureAlarmTrap.setDescription('Temperature is higher than 65 deg. Param1 = temperature value')
elcOkTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 3, 23))
elcONTAuthOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 23, 1)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: elcONTAuthOkTrap.setStatus('current')
if mibBuilder.loadTexts: elcONTAuthOkTrap.setDescription("Normal registration ONT Event (mcTrapLParam1=Optical Interface Number, mcTrapDescr='description with MAC addr ONT')")
elcUplinkOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 23, 2)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: elcUplinkOkTrap.setStatus('current')
if mibBuilder.loadTexts: elcUplinkOkTrap.setDescription("Eth Link Up, mcTrapLParam1=Link Number, Description='GePON: Eth Link N up'")
elcOpticalOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 23, 3)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: elcOpticalOkTrap.setStatus('current')
if mibBuilder.loadTexts: elcOpticalOkTrap.setDescription('The optical link N (mcTrapLParam1) has M (mcTrapLParam2) active devices')
elcFanOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 23, 4)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: elcFanOkTrap.setStatus('current')
if mibBuilder.loadTexts: elcFanOkTrap.setDescription('param1 = fan number')
elcONTConfOKTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 23, 5)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: elcONTConfOKTrap.setStatus('current')
if mibBuilder.loadTexts: elcONTConfOKTrap.setDescription('ONT is configured. Param1 = optical interface number, Descr = macaddress of ont')
elcFlappingOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 23, 6)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: elcFlappingOkTrap.setStatus('current')
if mibBuilder.loadTexts: elcFlappingOkTrap.setDescription('1 minute passed after last OpticalAlarmTrap. Param 1 - link number')
elcEponOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 23, 7)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: elcEponOkTrap.setStatus('deprecated')
if mibBuilder.loadTexts: elcEponOkTrap.setDescription('EPON port ok. Param 1 - link number')
elcConfigSavedOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 23, 8)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: elcConfigSavedOkTrap.setStatus('current')
if mibBuilder.loadTexts: elcConfigSavedOkTrap.setDescription('Configuration saved. Descr = Configuration saved to flash')
elcFirmwareUpdateOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 23, 9)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: elcFirmwareUpdateOkTrap.setStatus('current')
if mibBuilder.loadTexts: elcFirmwareUpdateOkTrap.setDescription('Firmware updated. Descr = Firmware updated')
elcUserLoginOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 23, 10)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: elcUserLoginOkTrap.setStatus('deprecated')
if mibBuilder.loadTexts: elcUserLoginOkTrap.setDescription('User logged in from CLI. Param1 = privileged/nonprivileged (1/0), Descr = ${username} logged in\n                                 ** This entry is deprecated.')
elcRAMOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 23, 11)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: elcRAMOkTrap.setStatus('current')
if mibBuilder.loadTexts: elcRAMOkTrap.setDescription('Ammount of free memory is > 7Mb')
elcLoginOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 23, 12)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: elcLoginOkTrap.setStatus('current')
if mibBuilder.loadTexts: elcLoginOkTrap.setDescription('Login successful. Param1 = privileged/nonprivileged(1/0)\n                                 Param1 = protocol (0 - serial, 1 - SSH, 2 - telnet, 3 - http, 4 - https)\n                                 Descr = login, ip:port')
elcLogoutOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 23, 13)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: elcLogoutOkTrap.setStatus('current')
if mibBuilder.loadTexts: elcLogoutOkTrap.setDescription('User logged out. Param1 = privileged/nonprivileged(1/0)\n                                 Param1 = protocol (0 - serial, 1 - SSH, 2 - telnet, 3 - http, 4 - https)\n                                 Descr = login, ip:port')
elcSwitchConfigChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 23, 14)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: elcSwitchConfigChangeTrap.setStatus('current')
if mibBuilder.loadTexts: elcSwitchConfigChangeTrap.setDescription('Switch configuration has been changed')
elcLoadAverageOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 23, 15)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: elcLoadAverageOkTrap.setStatus('current')
if mibBuilder.loadTexts: elcLoadAverageOkTrap.setDescription('Load average is back to normal. Param1 = 0 - 1 min, 1 - 5 min, 2 - 15 min')
elcTemperatureOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 23, 16)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: elcTemperatureOkTrap.setStatus('current')
if mibBuilder.loadTexts: elcTemperatureOkTrap.setDescription('Temperature is lower than 60 deg. Param1 = temperature value')
smgTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 3, 29))
smgAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 3, 29, 1))
smgAlarmConfigTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 29, 1, 1)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: smgAlarmConfigTrap.setStatus('current')
if mibBuilder.loadTexts: smgAlarmConfigTrap.setDescription('Configuration failure (exState 0-ok 3-critical)')
smgAlarmSiptNodeTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 29, 1, 2)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: smgAlarmSiptNodeTrap.setStatus('current')
if mibBuilder.loadTexts: smgAlarmSiptNodeTrap.setDescription('SIPT-module alarm (exState 0-ok 3-critical)')
smgAlarmMspDevTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 29, 1, 3)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: smgAlarmMspDevTrap.setStatus('current')
if mibBuilder.loadTexts: smgAlarmMspDevTrap.setDescription('SM-VP module alarm  (exState 0-ok 1-alarm)\n                                Param1 - module number')
smgAlarmLinkSetTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 29, 1, 4)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: smgAlarmLinkSetTrap.setStatus('current')
if mibBuilder.loadTexts: smgAlarmLinkSetTrap.setDescription('LinkSet alarm (exState 0-ok 3-critical)\n                                Param1 = LinkSet number')
smgAlarmStreamTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 29, 1, 5)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: smgAlarmStreamTrap.setStatus('current')
if mibBuilder.loadTexts: smgAlarmStreamTrap.setDescription('Stream alarm (exState 0-ok 2-warning 3-critical)\n                                Param1 - stream number\n                                Param2=1 - signal loss\n                                Param2=2 - remote alarm')
smgAlarmSS7LinkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 29, 1, 6)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: smgAlarmSS7LinkTrap.setStatus('current')
if mibBuilder.loadTexts: smgAlarmSS7LinkTrap.setDescription('SS7-Link alarm (exState 0-ok 1-alarm)\n                                Param1 - E1Stream number\n                                Param2 - LinkSet number')
smgAlarmSyncTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 29, 1, 7)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: smgAlarmSyncTrap.setStatus('current')
if mibBuilder.loadTexts: smgAlarmSyncTrap.setDescription('Synchronization alarm (freerun mode - work with local source)\n                                (exState 0-ok 1-alarm 2-warning),\n                                param1=1 - local\n                                param1=2 - less priority')
smgAlarmCdrFtpTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 29, 1, 12)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: smgAlarmCdrFtpTrap.setStatus('current')
if mibBuilder.loadTexts: smgAlarmCdrFtpTrap.setDescription('No connection with FTP server\n                                Param1 0 No alarm, \n                                2 - warning (minor alarm. The record was wrong, local CDR-data is less than 5 Mb), \n                                1 - common (major alarm. The record was wrong, local CDR-data is more than 5 Mb and less than 15 Mb), \n                                3 - critical (critical alarm. The record was wrong, local CDR-data is more than 15 Mb)\n                                  (exState 0-ok 1-alarm 2-warning 3-critical)')
smgAlarmMemoryLimitTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 29, 1, 13)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: smgAlarmMemoryLimitTrap.setStatus('current')
if mibBuilder.loadTexts: smgAlarmMemoryLimitTrap.setDescription('Param2 - free space, Param3 - summary space\n                                exState 0-ok, 2-warning (75% busy), 1-alarm (90%), 3-critical (95%)')
smgAlarmPowerModuleStateTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 29, 1, 14)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: smgAlarmPowerModuleStateTrap.setStatus('current')
if mibBuilder.loadTexts: smgAlarmPowerModuleStateTrap.setDescription('exState 0 - ok, 2 - warning\n                                Param1 - PSU number\n                                Param2 - PSU state: 0 - OK, 1 - no power supply, 2 - missing')
smgAlarmH323NodeTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 29, 1, 16)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: smgAlarmH323NodeTrap.setStatus('current')
if mibBuilder.loadTexts: smgAlarmH323NodeTrap.setDescription('No link to H323 adapter alarm (exState 0-ok 1-alarm)')
smgAlarmTemperatureTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 29, 1, 17)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: smgAlarmTemperatureTrap.setStatus('current')
if mibBuilder.loadTexts: smgAlarmTemperatureTrap.setDescription('Tenperature alarm\n                                exState:\n                                    0 - ok,\n                                    2 - warning (more than 70 deg. Celsius),\n                                    1 - alarm (more than 85),\n                                    3 - critical-alarm (more than 100)\n                                param2 - temp #0 (CPU temp, generates alarm),\n                                param3 - temp #1 (RAM temp, for info only)')
smgAlarmMaintenanceTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 29, 1, 18)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: smgAlarmMaintenanceTrap.setStatus('current')
if mibBuilder.loadTexts: smgAlarmMaintenanceTrap.setDescription("Maintenance alarm\n                                param1: \n                                   1 - COT test failed\n                                   2 - RLC-packet waiting error\n                                   3 - BLA-packet waiting error\n                                   4 - UBA-packet waiting error\n                                   5 - CGBA-packet waiting error\n                                   6 - CGUA-packet waiting error\n                                   7 - GRA-packet waiting error\n                                   8 - Error while blocking channels (CGBA) - not all of the requested channles were blocked\n                                   9 - Error while blocking channels (CGBA) -  one of requested channels didn't blocked\n                                   10 - Error while blocking channels (CGUA) - not all of the requested channles were blocked\n                                   11 - Error while blocking channels (CGUA) -  one of requested channels didn't blocked\n                                   12 - Error while get power voltage\n                                   13 - No free DVO blocks (param2 - subscriber group ID)\n                                param2 - E1 stream number,\n                                param3 - E1 channel number")
smgAlarmSipAccessTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 29, 1, 19)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: smgAlarmSipAccessTrap.setStatus('current')
if mibBuilder.loadTexts: smgAlarmSipAccessTrap.setDescription('SIP interface access alarm\n                                param1 - SIP interface number')
smgAlarmSbcRegistrationExpiredTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 29, 1, 50)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: smgAlarmSbcRegistrationExpiredTrap.setStatus('current')
if mibBuilder.loadTexts: smgAlarmSbcRegistrationExpiredTrap.setDescription('sbc registration expired alarm. (no ok trap). abonent number in description')
smgAlarmIpcOverloadTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 29, 1, 51)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: smgAlarmIpcOverloadTrap.setStatus('current')
if mibBuilder.loadTexts: smgAlarmIpcOverloadTrap.setDescription('IPC overload (exState 0-ok 1-alarm)')
smgUpdateFwFail = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 29, 1, 20)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: smgUpdateFwFail.setStatus('current')
if mibBuilder.loadTexts: smgUpdateFwFail.setDescription('descr = file + addr + FAIL')
smgAlarmProcOverloadTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 29, 1, 21)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: smgAlarmProcOverloadTrap.setStatus('current')
if mibBuilder.loadTexts: smgAlarmProcOverloadTrap.setDescription('Processor overload\n                                exState 0-ok, 2-warning (load 90%), 1-alarm (95%)\n                                Par3 - CPU mask')
smgAlarmFansIdleTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 29, 1, 23)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: smgAlarmFansIdleTrap.setStatus('current')
if mibBuilder.loadTexts: smgAlarmFansIdleTrap.setDescription('Fans idle alarm\n                                Par1 - fans operational bit-list\n                                Par2 - total fans operated\n                                Par3 - total fans on board')
smgAlarmDriveLimitTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 29, 1, 24)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: smgAlarmDriveLimitTrap.setStatus('current')
if mibBuilder.loadTexts: smgAlarmDriveLimitTrap.setDescription('Drive limit alarm\n                                param1: drive_id\n                                param2: (percent&0xFF << 8) | (exists & 0xFF)\n                                param3: free_size_kB\n                                Drive name at description text')
smgAlarmSipOptionsQueueOverload = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 29, 1, 25)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: smgAlarmSipOptionsQueueOverload.setStatus('current')
if mibBuilder.loadTexts: smgAlarmSipOptionsQueueOverload.setDescription('SIP OPTIONS queue iverload')
smgAlarmCDRFileTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 29, 1, 26)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: smgAlarmCDRFileTrap.setStatus('current')
if mibBuilder.loadTexts: smgAlarmCDRFileTrap.setDescription("Error while creating CDR-file\n                                state \n                                0 - OK, \n                                1 - commom alarm (can't create CDR file on disk),\n                                3 - critical alarm (can't create CDR file)")
smgAlarmMegacoNodeTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 29, 1, 27)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: smgAlarmMegacoNodeTrap.setStatus('current')
if mibBuilder.loadTexts: smgAlarmMegacoNodeTrap.setDescription('MEGACO-module alarm (exState 0-ok 3-critical)')
smgFail2banBlockTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 29, 1, 28)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: smgFail2banBlockTrap.setStatus('current')
if mibBuilder.loadTexts: smgFail2banBlockTrap.setDescription('Fail2ban address block info')
smgTrunkGroupCPSTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 29, 1, 29)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: smgTrunkGroupCPSTrap.setStatus('current')
if mibBuilder.loadTexts: smgTrunkGroupCPSTrap.setDescription('TrunkGroup reached CPS warning threshold\n                                param1 - TrunkGroup index\n                                param2 - CPS-warn threshold value\n                                param3 - Detected CPS value')
smgDemoLicenseTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 29, 1, 30)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: smgDemoLicenseTrap.setStatus('current')
if mibBuilder.loadTexts: smgDemoLicenseTrap.setDescription('DEMO license status info\n                                param1 - Status\n                                    1 - inactive (ntp-off)\n                                    2 - inactive (ntp-nok)\n                                    3 - will expire in less than 72h\n                                    4 - will expire in less than 36h\n                                    5 - inactive (expired)\n                                    6 - inactive (error)')
smgAlarmSipDuplicateTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 29, 1, 31)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: smgAlarmSipDuplicateTrap.setStatus('current')
if mibBuilder.loadTexts: smgAlarmSipDuplicateTrap.setDescription('No SIP interface access alarm\n                                param1 - SIP interface number\n                                param2 - Destination IP-addr\n                                param3 - Destination port')
smgCallForbiddenTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 29, 1, 52)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: smgCallForbiddenTrap.setStatus('current')
if mibBuilder.loadTexts: smgCallForbiddenTrap.setDescription('Call forbidden info')
smgRegForbiddenTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 29, 1, 53)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: smgRegForbiddenTrap.setStatus('current')
if mibBuilder.loadTexts: smgRegForbiddenTrap.setDescription('Registration forbidden info')
smgSIPinterfaceTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 29, 1, 54)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: smgSIPinterfaceTrap.setStatus('current')
if mibBuilder.loadTexts: smgSIPinterfaceTrap.setDescription('SIP interface info')
smgReserveSlaveLinkChangedTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 29, 1, 55)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: smgReserveSlaveLinkChangedTrap.setStatus('current')
if mibBuilder.loadTexts: smgReserveSlaveLinkChangedTrap.setDescription('Reserve slave link info\n                                param2 = lan status\n                                param3 = wan status\n                                    0 - unlink, 1 - link')
smgReserveSlaveSoftVersionTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 29, 1, 56)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: smgReserveSlaveSoftVersionTrap.setStatus('current')
if mibBuilder.loadTexts: smgReserveSlaveSoftVersionTrap.setDescription('Reserve soft version info')
smgSipAttackedTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 29, 1, 57)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: smgSipAttackedTrap.setStatus('current')
if mibBuilder.loadTexts: smgSipAttackedTrap.setDescription('SIP attacked info')
smgPctlModuleTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 29, 1, 58)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: smgPctlModuleTrap.setStatus('current')
if mibBuilder.loadTexts: smgPctlModuleTrap.setDescription('Packet control module info')
smgPortScanDetectorTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 29, 1, 59)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: smgPortScanDetectorTrap.setStatus('current')
if mibBuilder.loadTexts: smgPortScanDetectorTrap.setDescription('Port scan detector info')
smgFirewallTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 29, 1, 60)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: smgFirewallTrap.setStatus('current')
if mibBuilder.loadTexts: smgFirewallTrap.setDescription('Firewall info')
smgOK = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 3, 29, 2))
smgOkConfigTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 29, 2, 1)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: smgOkConfigTrap.setStatus('current')
if mibBuilder.loadTexts: smgOkConfigTrap.setDescription('NO Configuration failure')
smgOkSiptNodeTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 29, 2, 2)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: smgOkSiptNodeTrap.setStatus('current')
if mibBuilder.loadTexts: smgOkSiptNodeTrap.setDescription('NO SIPT-module alarm')
smgOkMspDevTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 29, 2, 3)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: smgOkMspDevTrap.setStatus('current')
if mibBuilder.loadTexts: smgOkMspDevTrap.setDescription('NO SM-VP module alarm\n                                Param1 = module number')
smgOkLinkSetTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 29, 2, 4)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: smgOkLinkSetTrap.setStatus('current')
if mibBuilder.loadTexts: smgOkLinkSetTrap.setDescription('NO LinkSet alarm\n                                Param1 = LinkSet number')
smgOkStreamTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 29, 2, 5)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: smgOkStreamTrap.setStatus('current')
if mibBuilder.loadTexts: smgOkStreamTrap.setDescription('NO Stream alarm\n                                Param1 - stream number')
smgOkSS7LinkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 29, 2, 6)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: smgOkSS7LinkTrap.setStatus('current')
if mibBuilder.loadTexts: smgOkSS7LinkTrap.setDescription('NO SS7-Link alarm: par1 - e1line, par2 - linkset')
smgOkSyncTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 29, 2, 7)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: smgOkSyncTrap.setStatus('current')
if mibBuilder.loadTexts: smgOkSyncTrap.setDescription('NO Synchronization alarm (freerun mode - work with local source)')
smgOkCdrFtpTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 29, 2, 12)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: smgOkCdrFtpTrap.setStatus('current')
if mibBuilder.loadTexts: smgOkCdrFtpTrap.setDescription('FTP server connection in norm')
smgOkMemoryLimitTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 29, 2, 13)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: smgOkMemoryLimitTrap.setStatus('current')
if mibBuilder.loadTexts: smgOkMemoryLimitTrap.setDescription('No memory alarm\n                                Param2 - free space\n                                Param3 - summary space')
smgOkPowerModuleStateTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 29, 2, 14)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: smgOkPowerModuleStateTrap.setStatus('current')
if mibBuilder.loadTexts: smgOkPowerModuleStateTrap.setDescription('PSU ok\n                                Param1 - PSU number\n                                Param2 - PSU state: 0 - OK, 1 - no power supply, 2 - missing')
smgOkH323NodeTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 29, 2, 16)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: smgOkH323NodeTrap.setStatus('current')
if mibBuilder.loadTexts: smgOkH323NodeTrap.setDescription('Link to H323 adapter is OK')
smgOkTemperatureTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 29, 2, 17)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: smgOkTemperatureTrap.setStatus('current')
if mibBuilder.loadTexts: smgOkTemperatureTrap.setDescription('No Temperature alarm\n                                Param2 - temp #0 CPU\n                                Param3 - temp #1 RAM')
smgOkMaintenanceTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 29, 2, 18)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: smgOkMaintenanceTrap.setStatus('current')
if mibBuilder.loadTexts: smgOkMaintenanceTrap.setDescription('No maintenance alarm\n                                param1: \n                                    MAINTENANCE_ALARM_SS7_COT_FAIL = 1\n                                param2 - E1 stream number,\n                                param3 - E1 channel number')
smgOkSipAccessTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 29, 2, 19)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: smgOkSipAccessTrap.setStatus('current')
if mibBuilder.loadTexts: smgOkSipAccessTrap.setDescription('No SIP interface access alarm\n                                param1 - SIP interface number')
smgUpdateFwOk = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 29, 2, 20)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: smgUpdateFwOk.setStatus('current')
if mibBuilder.loadTexts: smgUpdateFwOk.setDescription('descr = file + addr + OK')
smgOkIpcOverloadTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 29, 2, 51)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: smgOkIpcOverloadTrap.setStatus('current')
if mibBuilder.loadTexts: smgOkIpcOverloadTrap.setDescription('No IPC overload')
smgOkProcOverloadTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 29, 2, 21)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: smgOkProcOverloadTrap.setStatus('current')
if mibBuilder.loadTexts: smgOkProcOverloadTrap.setDescription('No proc overload')
smgOkRebootTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 29, 2, 22)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: smgOkRebootTrap.setStatus('current')
if mibBuilder.loadTexts: smgOkRebootTrap.setDescription('Software started\n                                param1 = (version_major&0xFF) | ((version_minor&0xFF)<<8) | ((version_sub&0xFF)<<16)\n                                param2 = version_build\n                                param3 = reboot_cause (for SMG2016 only)\n                                    0 - power, 1 - software command, 2 - watchdog')
smgOkFansIdleTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 29, 2, 23)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: smgOkFansIdleTrap.setStatus('current')
if mibBuilder.loadTexts: smgOkFansIdleTrap.setDescription('Fans idle OK\n                                Par1 - fans operational bit-list\n                                Par2 - total fans operated\n                                Par3 - total fans on board')
smgOkDriveLimitTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 29, 2, 24)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: smgOkDriveLimitTrap.setStatus('current')
if mibBuilder.loadTexts: smgOkDriveLimitTrap.setDescription('Drive limit OK\n                                Par1 - drive index\n                                Par2 - 1 - drive exist; 0 - removed\n                                Par3 - filling percentage\n                                Drive name at description text')
smgAlarmSipOptionsQueueOk = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 29, 2, 25)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: smgAlarmSipOptionsQueueOk.setStatus('current')
if mibBuilder.loadTexts: smgAlarmSipOptionsQueueOk.setDescription('SIP OPTIONS queue is OK')
smgOkCDRFileTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 29, 2, 26)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: smgOkCDRFileTrap.setStatus('current')
if mibBuilder.loadTexts: smgOkCDRFileTrap.setDescription("No Error while creating CDR-file\n                                state \n                                0 - OK, \n                                1 - commom alarm (can't create CDR file on disk),\n                                3 - critical alarm (can't create CDR file)")
smgOkTrunkGroupCPSTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 29, 2, 29)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: smgOkTrunkGroupCPSTrap.setStatus('current')
if mibBuilder.loadTexts: smgOkTrunkGroupCPSTrap.setDescription('No CPS warning for the TrunkGroup\n                                param1 - TrunkGroup index\n                                param2 - CPS-warn threshold value\n                                param3 - Detected CPS value')
smgOkDemoLicenseTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 29, 2, 30)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: smgOkDemoLicenseTrap.setStatus('current')
if mibBuilder.loadTexts: smgOkDemoLicenseTrap.setDescription('DEMO license status info\n                                param1 - Status\n                                    0 - active')
smgOkSipDuplicateTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 29, 2, 31)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: smgOkSipDuplicateTrap.setStatus('current')
if mibBuilder.loadTexts: smgOkSipDuplicateTrap.setDescription('SIP interface Duplicate alarm\n                                param1 - SIP interface number')
smgOkCallForbiddenTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 29, 2, 52)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: smgOkCallForbiddenTrap.setStatus('current')
if mibBuilder.loadTexts: smgOkCallForbiddenTrap.setDescription('Call forbidden info')
smgOkRegForbiddenTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 29, 2, 53)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: smgOkRegForbiddenTrap.setStatus('current')
if mibBuilder.loadTexts: smgOkRegForbiddenTrap.setDescription('Registration forbidden info')
smgOkSIPinterfaceTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 29, 2, 54)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: smgOkSIPinterfaceTrap.setStatus('current')
if mibBuilder.loadTexts: smgOkSIPinterfaceTrap.setDescription('SIP interface info')
smgOkReserveSlaveLinkChangedTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 29, 2, 55)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: smgOkReserveSlaveLinkChangedTrap.setStatus('current')
if mibBuilder.loadTexts: smgOkReserveSlaveLinkChangedTrap.setDescription('Reserve slave link info\n                                param2 = lan status\n                                param3 = wan status\n                                    0 - unlink, 1 - link')
smgOkReserveSlaveSoftVersionTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 29, 2, 56)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: smgOkReserveSlaveSoftVersionTrap.setStatus('current')
if mibBuilder.loadTexts: smgOkReserveSlaveSoftVersionTrap.setDescription('Reserve soft version info')
smgOkSipAttackedTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 29, 2, 57)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: smgOkSipAttackedTrap.setStatus('current')
if mibBuilder.loadTexts: smgOkSipAttackedTrap.setDescription('SIP attacked info')
smgOkPctlModuleTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 29, 2, 58)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: smgOkPctlModuleTrap.setStatus('current')
if mibBuilder.loadTexts: smgOkPctlModuleTrap.setDescription('Packet control module info')
smgOkPortScanDetectorTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 29, 2, 59)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: smgOkPortScanDetectorTrap.setStatus('current')
if mibBuilder.loadTexts: smgOkPortScanDetectorTrap.setDescription('Port scan detector info')
smgOkFirewallTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 29, 2, 60)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: smgOkFirewallTrap.setStatus('current')
if mibBuilder.loadTexts: smgOkFirewallTrap.setDescription('Firewall info')
mccpAlarmTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 3, 30))
mccpConfigAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 30, 1)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: mccpConfigAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: mccpConfigAlarmTrap.setDescription(' config file alarm ')
mccpSlotAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 30, 2)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: mccpSlotAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: mccpSlotAlarmTrap.setDescription(' slot [param1] alarm ')
mccpLinksetAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 30, 3)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: mccpLinksetAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: mccpLinksetAlarmTrap.setDescription(' SS7 Linkset alarm [param1] ')
mccpStreamAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 30, 4)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: mccpStreamAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: mccpStreamAlarmTrap.setDescription(' Stream alarm at [param1:param2] state=%s [state] ')
mccpSS7LinkAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 30, 5)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: mccpSS7LinkAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: mccpSS7LinkAlarmTrap.setDescription(' SS7 Link alarm at [param1:param2] ')
mccpSyncAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 30, 6)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: mccpSyncAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: mccpSyncAlarmTrap.setDescription(' Low priority sync state or no sync ')
mccpIntfAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 30, 7)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: mccpIntfAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: mccpIntfAlarmTrap.setDescription(' V52-Interface number [param1] Alarm ')
mccpIntfSlotAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 30, 8)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: mccpIntfSlotAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: mccpIntfSlotAlarmTrap.setDescription(' 24AK slot [param2] on V52-Interface number [param1] Alarm ')
mccpSutdownSnmpdAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 30, 17)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: mccpSutdownSnmpdAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: mccpSutdownSnmpdAlarmTrap.setDescription(' shutdown snmpd ')
mccpOkTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 3, 31))
mccpConfigOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 31, 1)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: mccpConfigOkTrap.setStatus('current')
if mibBuilder.loadTexts: mccpConfigOkTrap.setDescription(' config file is normal ')
mccpSlotOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 31, 2)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: mccpSlotOkTrap.setStatus('current')
if mibBuilder.loadTexts: mccpSlotOkTrap.setDescription(' slot [param1] in work ')
mccpLinksetOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 31, 3)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: mccpLinksetOkTrap.setStatus('current')
if mibBuilder.loadTexts: mccpLinksetOkTrap.setDescription(' SS7 Linkset in work [param1] ')
mccpStreamOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 31, 4)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: mccpStreamOkTrap.setStatus('current')
if mibBuilder.loadTexts: mccpStreamOkTrap.setDescription(' Stream alarm at [param1:param2] in work ')
mccpSS7LinkOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 31, 5)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: mccpSS7LinkOkTrap.setStatus('current')
if mibBuilder.loadTexts: mccpSS7LinkOkTrap.setDescription(' SS7 Link at [param1:param2] in work ')
mccpSyncOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 31, 6)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: mccpSyncOkTrap.setStatus('current')
if mibBuilder.loadTexts: mccpSyncOkTrap.setDescription(' Normal sync state ')
mccpIntfOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 31, 7)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: mccpIntfOkTrap.setStatus('current')
if mibBuilder.loadTexts: mccpIntfOkTrap.setDescription(' V52-Interface number [param1] is Normal ')
mccpIntfSlotOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 31, 8)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: mccpIntfSlotOkTrap.setStatus('current')
if mibBuilder.loadTexts: mccpIntfSlotOkTrap.setDescription(' 24AK slot [param2] on V52-Interface number [param1] is Normal ')
mccpStartOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 31, 16)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: mccpStartOkTrap.setStatus('current')
if mibBuilder.loadTexts: mccpStartOkTrap.setDescription(' MCCP started ')
radiusTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 3, 32))
radiusNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 3, 32, 1))
radiusRequestNotification = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 32, 1, 1)).setObjects(("ELTEX-SMI-ACTUAL", "radiusSeqNum"), ("ELTEX-SMI-ACTUAL", "radiusStatus"), ("ELTEX-SMI-ACTUAL", "radiusTimeout"), ("ELTEX-SMI-ACTUAL", "radiusSwitchSrv"), ("ELTEX-SMI-ACTUAL", "radiusTypeResp"), ("ELTEX-SMI-ACTUAL", "radiusDescr"))
if mibBuilder.loadTexts: radiusRequestNotification.setStatus('current')
if mibBuilder.loadTexts: radiusRequestNotification.setDescription('Notification about request to server')
eltexShutdownTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 3, 99)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: eltexShutdownTrap.setStatus('current')
if mibBuilder.loadTexts: eltexShutdownTrap.setDescription('Agent is being normally shutdown.')
eltrapNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 35265, 3, 100)).setObjects(("ELTEX-SMI-ACTUAL", "ponTeknovusONTAuthAlarmTrap"), ("ELTEX-SMI-ACTUAL", "ponTeknovusUplinkAlarmTrap"), ("ELTEX-SMI-ACTUAL", "ponTeknovusOpticalAlarmTrap"), ("ELTEX-SMI-ACTUAL", "ponTeknovusFanAlarmTrap"), ("ELTEX-SMI-ACTUAL", "ponTeknovusONTConfAlarmTrap"), ("ELTEX-SMI-ACTUAL", "ponTeknovusFlappingAlarmTrap"), ("ELTEX-SMI-ACTUAL", "ponTeknovusConfigSavedAlarmTrap"), ("ELTEX-SMI-ACTUAL", "ponTeknovusFirmwareUpdateAlarmTrap"), ("ELTEX-SMI-ACTUAL", "ponTeknovusRAMAlarmTrap"), ("ELTEX-SMI-ACTUAL", "ponTeknovusLoginAlarmTrap"), ("ELTEX-SMI-ACTUAL", "ponTeknovusDuplicateMacAlarmTrap"), ("ELTEX-SMI-ACTUAL", "ponTeknovusLoadAverageAlarmTrap"), ("ELTEX-SMI-ACTUAL", "ponTeknovusTemperatureAlarmTrap"), ("ELTEX-SMI-ACTUAL", "ponTeknovusONTPortBlockedAlarmTrap"), ("ELTEX-SMI-ACTUAL", "ponTeknovusONTAuthOkTrap"), ("ELTEX-SMI-ACTUAL", "ponTeknovusUplinkOkTrap"), ("ELTEX-SMI-ACTUAL", "ponTeknovusOpticalOkTrap"), ("ELTEX-SMI-ACTUAL", "ponTeknovusFanOkTrap"), ("ELTEX-SMI-ACTUAL", "ponTeknovusONTConfOKTrap"), ("ELTEX-SMI-ACTUAL", "ponTeknovusFlappingOkTrap"), ("ELTEX-SMI-ACTUAL", "ponTeknovusConfigSavedOkTrap"), ("ELTEX-SMI-ACTUAL", "ponTeknovusFirmwareUpdateOkTrap"), ("ELTEX-SMI-ACTUAL", "ponTeknovusRAMOkTrap"), ("ELTEX-SMI-ACTUAL", "ponTeknovusLoginOkTrap"), ("ELTEX-SMI-ACTUAL", "ponTeknovusLogoutOkTrap"), ("ELTEX-SMI-ACTUAL", "ponTeknovusSwitchConfigChangeTrap"), ("ELTEX-SMI-ACTUAL", "ponTeknovusLoadAverageOkTrap"), ("ELTEX-SMI-ACTUAL", "ponTeknovusTemperatureOkTrap"), ("ELTEX-SMI-ACTUAL", "ponTeknovusONTPortBlockedOkTrap"), ("ELTEX-SMI-ACTUAL", "ponTeknovusBoardRebootTrap"), ("ELTEX-SMI-ACTUAL", "ponTeknovusConfigMigrateAlarmTrap"), ("ELTEX-SMI-ACTUAL", "ponTeknovusConfigMigrateOkTrap"), ("ELTEX-SMI-ACTUAL", "ponTeknovusONTDeconfigureTrap"), ("ELTEX-SMI-ACTUAL", "ponTeknovusONTStateChangedTrap"), ("ELTEX-SMI-ACTUAL", "ponTeknovusONTConfigChangedTrap"), ("ELTEX-SMI-ACTUAL", "ponTeknovusConfigRereadTrap"), ("ELTEX-SMI-ACTUAL", "fxs72VbatAlarmTrap"), ("ELTEX-SMI-ACTUAL", "fxs72VringAlarmTrap"), ("ELTEX-SMI-ACTUAL", "fxs72TemperatureAlarmTrap"), ("ELTEX-SMI-ACTUAL", "fxs72FanAlarmTrap"), ("ELTEX-SMI-ACTUAL", "fxs72SSwAlarmTrap"), ("ELTEX-SMI-ACTUAL", "fxs72PortAlarmTrap"), ("ELTEX-SMI-ACTUAL", "fxs72VbatOkTrap"), ("ELTEX-SMI-ACTUAL", "fxs72VringOkTrap"), ("ELTEX-SMI-ACTUAL", "fxs72TemperatureOkTrap"), ("ELTEX-SMI-ACTUAL", "fxs72FanOkTrap"), ("ELTEX-SMI-ACTUAL", "fxs72SSwOkTrap"), ("ELTEX-SMI-ACTUAL", "fxs72PortOkTrap"), ("ELTEX-SMI-ACTUAL", "fxs72VmodeSwitchTrap"), ("ELTEX-SMI-ACTUAL", "fxs72FansSwitchTrap"), ("ELTEX-SMI-ACTUAL", "fxs72BpuAlarmTrap"), ("ELTEX-SMI-ACTUAL", "fxs72updateFwFail"), ("ELTEX-SMI-ACTUAL", "fxs72BpuOkTrap"), ("ELTEX-SMI-ACTUAL", "fxs72updateFwOk"), ("ELTEX-SMI-ACTUAL", "fxs72TempmeasurementAlarmTrap"), ("ELTEX-SMI-ACTUAL", "fxs72TempmeasurementOkTrap"), ("ELTEX-SMI-ACTUAL", "fxs72PowerUnitTermAlarm"), ("ELTEX-SMI-ACTUAL", "fxs72PowerUnitTermOk"), ("ELTEX-SMI-ACTUAL", "fxs72FanLowSpeedAlarmTrap"), ("ELTEX-SMI-ACTUAL", "fxs72FanLowSpeedOkTrap"), ("ELTEX-SMI-ACTUAL", "pp4LinkAlarmTrap"), ("ELTEX-SMI-ACTUAL", "pp4AutoNegotiationAlarmTrap"), ("ELTEX-SMI-ACTUAL", "pp4MemoryAlarmTrap"), ("ELTEX-SMI-ACTUAL", "pp4LoadAvgAlarmTrap"), ("ELTEX-SMI-ACTUAL", "pp4LoginAlarmTrap"), ("ELTEX-SMI-ACTUAL", "pp4LogoutAlarmTrap"), ("ELTEX-SMI-ACTUAL", "pp4LoadCpuAlarmTrap"), ("ELTEX-SMI-ACTUAL", "pp4DuplicationMacAlarmTrap"), ("ELTEX-SMI-ACTUAL", "pp4LinkFlapAlarmTrap"), ("ELTEX-SMI-ACTUAL", "pp4LinkOkTrap"), ("ELTEX-SMI-ACTUAL", "pp4AutoNegotiationOkTrap"), ("ELTEX-SMI-ACTUAL", "pp4MemoryOkTrap"), ("ELTEX-SMI-ACTUAL", "pp4LoadAvgOkTrap"), ("ELTEX-SMI-ACTUAL", "pp4LoginOkTrap"), ("ELTEX-SMI-ACTUAL", "pp4LogoutOkTrap"), ("ELTEX-SMI-ACTUAL", "pp4CommitOkTrap"), ("ELTEX-SMI-ACTUAL", "pp4SaveOkTrap"), ("ELTEX-SMI-ACTUAL", "pp4LinkFlapEndOkTrap"), ("ELTEX-SMI-ACTUAL", "pp4ConfigChangedOkTrap"), ("ELTEX-SMI-ACTUAL", "pp4SaveAlarmTrap"), ("ELTEX-SMI-ACTUAL", "pp4BoardRemoveAlarmTrap"), ("ELTEX-SMI-ACTUAL", "pp4UnitRemoveAlarmTrap"), ("ELTEX-SMI-ACTUAL", "pp4PortCounterErrorFoundAlarmTrap"), ("ELTEX-SMI-ACTUAL", "pp4SyncDisallowedAlarmTrap"), ("ELTEX-SMI-ACTUAL", "pp4RebootUnitAlarmTrap"), ("ELTEX-SMI-ACTUAL", "pp4RebootStackAlarmTrap"), ("ELTEX-SMI-ACTUAL", "pp4RebootFwTimerAlarmTrap"), ("ELTEX-SMI-ACTUAL", "pp4FwUpdateAlarmTrap"), ("ELTEX-SMI-ACTUAL", "pp4FwConfirmNeededAlarmTrap"), ("ELTEX-SMI-ACTUAL", "pp4BoardAddOkTrap"), ("ELTEX-SMI-ACTUAL", "pp4UnitAddOkTrap"), ("ELTEX-SMI-ACTUAL", "pp4RoleChangedOkTrap"), ("ELTEX-SMI-ACTUAL", "pp4PortCounterErrorFreeOkTrap"), ("ELTEX-SMI-ACTUAL", "pp4SyncDisallowedOkTrap"), ("ELTEX-SMI-ACTUAL", "pp4ConfigRestoredOkTrap"), ("ELTEX-SMI-ACTUAL", "pp4RebootUnitOkTrap"), ("ELTEX-SMI-ACTUAL", "pp4FwUpdateOkTrap"), ("ELTEX-SMI-ACTUAL", "mxa32DslLinkAlarmTrap"), ("ELTEX-SMI-ACTUAL", "mxa32EthLinkAlarmTrap"), ("ELTEX-SMI-ACTUAL", "mxa32TempAlarmTrap"), ("ELTEX-SMI-ACTUAL", "mxa32VoltAlarmTrap"), ("ELTEX-SMI-ACTUAL", "mxa32UserLoginTrap"), ("ELTEX-SMI-ACTUAL", "mxa32DslLinkOkTrap"), ("ELTEX-SMI-ACTUAL", "mxa32EthLinkOkTrap"), ("ELTEX-SMI-ACTUAL", "mxa32TempOkTrap"), ("ELTEX-SMI-ACTUAL", "mxa32VoltOkTrap"), ("ELTEX-SMI-ACTUAL", "mxa32UserLogoutTrap"), ("ELTEX-SMI-ACTUAL", "mxa64DslLinkAlarmTrap"), ("ELTEX-SMI-ACTUAL", "mxa64EthLinkAlarmTrap"), ("ELTEX-SMI-ACTUAL", "mxa64TempAlarmTrap"), ("ELTEX-SMI-ACTUAL", "mxa64VoltAlarmTrap"), ("ELTEX-SMI-ACTUAL", "mxa64UserLoginTrap"), ("ELTEX-SMI-ACTUAL", "mxa64DslLinkOkTrap"), ("ELTEX-SMI-ACTUAL", "mxa64EthLinkOkTrap"), ("ELTEX-SMI-ACTUAL", "mxa64TempOkTrap"), ("ELTEX-SMI-ACTUAL", "mxa64VoltOkTrap"), ("ELTEX-SMI-ACTUAL", "mxa64UserLogoutTrap"), ("ELTEX-SMI-ACTUAL", "mxa24DslLinkAlarmTrap"), ("ELTEX-SMI-ACTUAL", "mxa24EthLinkAlarmTrap"), ("ELTEX-SMI-ACTUAL", "mxa24TempAlarmTrap"), ("ELTEX-SMI-ACTUAL", "mxa24VoltAlarmTrap"), ("ELTEX-SMI-ACTUAL", "mxa24UserLoginTrap"), ("ELTEX-SMI-ACTUAL", "mxa24DslLinkOkTrap"), ("ELTEX-SMI-ACTUAL", "mxa24EthLinkOkTrap"), ("ELTEX-SMI-ACTUAL", "mxa24TempOkTrap"), ("ELTEX-SMI-ACTUAL", "mxa24VoltOkTrap"), ("ELTEX-SMI-ACTUAL", "mxa24UserLogoutTrap"), ("ELTEX-SMI-ACTUAL", "omsOperationCommandAlarm"), ("ELTEX-SMI-ACTUAL", "omsOperationCommandOk"), ("ELTEX-SMI-ACTUAL", "elcONTAuthAlarmTrap"), ("ELTEX-SMI-ACTUAL", "elcUplinkAlarmTrap"), ("ELTEX-SMI-ACTUAL", "elcOpticalAlarmTrap"), ("ELTEX-SMI-ACTUAL", "elcFanAlarmTrap"), ("ELTEX-SMI-ACTUAL", "elcONTConfAlarmTrap"), ("ELTEX-SMI-ACTUAL", "elcFlappingAlarmTrap"), ("ELTEX-SMI-ACTUAL", "elcConfigSavedAlarmTrap"), ("ELTEX-SMI-ACTUAL", "elcFirmwareUpdateAlarmTrap"), ("ELTEX-SMI-ACTUAL", "elcRAMAlarmTrap"), ("ELTEX-SMI-ACTUAL", "elcLoginAlarmTrap"), ("ELTEX-SMI-ACTUAL", "elcDuplicateMacAlarmTrap"), ("ELTEX-SMI-ACTUAL", "elcLoadAverageAlarmTrap"), ("ELTEX-SMI-ACTUAL", "elcTemperatureAlarmTrap"), ("ELTEX-SMI-ACTUAL", "elcONTAuthOkTrap"), ("ELTEX-SMI-ACTUAL", "elcUplinkOkTrap"), ("ELTEX-SMI-ACTUAL", "elcOpticalOkTrap"), ("ELTEX-SMI-ACTUAL", "elcFanOkTrap"), ("ELTEX-SMI-ACTUAL", "elcONTConfOKTrap"), ("ELTEX-SMI-ACTUAL", "elcFlappingOkTrap"), ("ELTEX-SMI-ACTUAL", "elcConfigSavedOkTrap"), ("ELTEX-SMI-ACTUAL", "elcFirmwareUpdateOkTrap"), ("ELTEX-SMI-ACTUAL", "elcRAMOkTrap"), ("ELTEX-SMI-ACTUAL", "elcLoginOkTrap"), ("ELTEX-SMI-ACTUAL", "elcLogoutOkTrap"), ("ELTEX-SMI-ACTUAL", "elcSwitchConfigChangeTrap"), ("ELTEX-SMI-ACTUAL", "elcLoadAverageOkTrap"), ("ELTEX-SMI-ACTUAL", "elcTemperatureOkTrap"), ("ELTEX-SMI-ACTUAL", "smgAlarmConfigTrap"), ("ELTEX-SMI-ACTUAL", "smgAlarmSiptNodeTrap"), ("ELTEX-SMI-ACTUAL", "smgAlarmMspDevTrap"), ("ELTEX-SMI-ACTUAL", "smgAlarmLinkSetTrap"), ("ELTEX-SMI-ACTUAL", "smgAlarmStreamTrap"), ("ELTEX-SMI-ACTUAL", "smgAlarmSS7LinkTrap"), ("ELTEX-SMI-ACTUAL", "smgAlarmSyncTrap"), ("ELTEX-SMI-ACTUAL", "smgOkConfigTrap"), ("ELTEX-SMI-ACTUAL", "smgOkSiptNodeTrap"), ("ELTEX-SMI-ACTUAL", "smgOkMspDevTrap"), ("ELTEX-SMI-ACTUAL", "smgOkLinkSetTrap"), ("ELTEX-SMI-ACTUAL", "smgOkStreamTrap"), ("ELTEX-SMI-ACTUAL", "smgOkSS7LinkTrap"), ("ELTEX-SMI-ACTUAL", "smgOkSyncTrap"), ("ELTEX-SMI-ACTUAL", "smgAlarmCdrFtpTrap"), ("ELTEX-SMI-ACTUAL", "smgOkCdrFtpTrap"), ("ELTEX-SMI-ACTUAL", "smgUpdateFwFail"), ("ELTEX-SMI-ACTUAL", "smgUpdateFwOk"), ("ELTEX-SMI-ACTUAL", "smgAlarmMemoryLimitTrap"), ("ELTEX-SMI-ACTUAL", "smgAlarmSbcRegistrationExpiredTrap"), ("ELTEX-SMI-ACTUAL", "smgAlarmIpcOverloadTrap"), ("ELTEX-SMI-ACTUAL", "smgOkMemoryLimitTrap"), ("ELTEX-SMI-ACTUAL", "smgOkIpcOverloadTrap"), ("ELTEX-SMI-ACTUAL", "smgAlarmProcOverloadTrap"), ("ELTEX-SMI-ACTUAL", "smgOkProcOverloadTrap"), ("ELTEX-SMI-ACTUAL", "smgOkRebootTrap"), ("ELTEX-SMI-ACTUAL", "smgOkFansIdleTrap"), ("ELTEX-SMI-ACTUAL", "smgOkDriveLimitTrap"), ("ELTEX-SMI-ACTUAL", "smgAlarmFansIdleTrap"), ("ELTEX-SMI-ACTUAL", "smgAlarmDriveLimitTrap"), ("ELTEX-SMI-ACTUAL", "smgAlarmSipOptionsQueueOverload"), ("ELTEX-SMI-ACTUAL", "smgAlarmSipOptionsQueueOk"), ("ELTEX-SMI-ACTUAL", "smgAlarmCDRFileTrap"), ("ELTEX-SMI-ACTUAL", "smgOkCDRFileTrap"), ("ELTEX-SMI-ACTUAL", "smgAlarmSipDuplicateTrap"), ("ELTEX-SMI-ACTUAL", "smgOkSipDuplicateTrap"), ("ELTEX-SMI-ACTUAL", "smgReserveSlaveLinkChangedTrap"), ("ELTEX-SMI-ACTUAL", "smgOkReserveSlaveLinkChangedTrap"), ("ELTEX-SMI-ACTUAL", "smgReserveSlaveSoftVersionTrap"), ("ELTEX-SMI-ACTUAL", "smgOkReserveSlaveSoftVersionTrap"), ("ELTEX-SMI-ACTUAL", "smgSipAttackedTrap"), ("ELTEX-SMI-ACTUAL", "smgOkSipAttackedTrap"), ("ELTEX-SMI-ACTUAL", "smgCallForbiddenTrap"), ("ELTEX-SMI-ACTUAL", "smgOkCallForbiddenTrap"), ("ELTEX-SMI-ACTUAL", "smgRegForbiddenTrap"), ("ELTEX-SMI-ACTUAL", "smgOkRegForbiddenTrap"), ("ELTEX-SMI-ACTUAL", "smgSIPinterfaceTrap"), ("ELTEX-SMI-ACTUAL", "smgOkSIPinterfaceTrap"), ("ELTEX-SMI-ACTUAL", "smgPctlModuleTrap"), ("ELTEX-SMI-ACTUAL", "smgOkPctlModuleTrap"), ("ELTEX-SMI-ACTUAL", "smgPortScanDetectorTrap"), ("ELTEX-SMI-ACTUAL", "smgOkPortScanDetectorTrap"), ("ELTEX-SMI-ACTUAL", "smgFirewallTrap"), ("ELTEX-SMI-ACTUAL", "smgOkFirewallTrap"), ("ELTEX-SMI-ACTUAL", "mccpConfigAlarmTrap"), ("ELTEX-SMI-ACTUAL", "mccpSlotAlarmTrap"), ("ELTEX-SMI-ACTUAL", "mccpLinksetAlarmTrap"), ("ELTEX-SMI-ACTUAL", "mccpStreamAlarmTrap"), ("ELTEX-SMI-ACTUAL", "mccpSS7LinkAlarmTrap"), ("ELTEX-SMI-ACTUAL", "mccpSyncAlarmTrap"), ("ELTEX-SMI-ACTUAL", "mccpIntfAlarmTrap"), ("ELTEX-SMI-ACTUAL", "mccpIntfSlotAlarmTrap"), ("ELTEX-SMI-ACTUAL", "mccpSutdownSnmpdAlarmTrap"), ("ELTEX-SMI-ACTUAL", "mccpConfigOkTrap"), ("ELTEX-SMI-ACTUAL", "mccpSlotOkTrap"), ("ELTEX-SMI-ACTUAL", "mccpLinksetOkTrap"), ("ELTEX-SMI-ACTUAL", "mccpStreamOkTrap"), ("ELTEX-SMI-ACTUAL", "mccpSS7LinkOkTrap"), ("ELTEX-SMI-ACTUAL", "mccpSyncOkTrap"), ("ELTEX-SMI-ACTUAL", "mccpIntfOkTrap"), ("ELTEX-SMI-ACTUAL", "mccpIntfSlotOkTrap"), ("ELTEX-SMI-ACTUAL", "mccpStartOkTrap"), ("ELTEX-SMI-ACTUAL", "radiusRequestNotification"), ("ELTEX-SMI-ACTUAL", "eltexShutdownTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    eltrapNotificationGroup = eltrapNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: eltrapNotificationGroup.setDescription('')
eltrapObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 35265, 3, 101)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"), ("ELTEX-SMI-ACTUAL", "mcTrapRestoredAlarmID"), ("ELTEX-SMI-ACTUAL", "mcTrapSyncType"), ("ELTEX-SMI-ACTUAL", "mcReservedFlag"), ("ELTEX-SMI-ACTUAL", "radiusSeqNum"), ("ELTEX-SMI-ACTUAL", "radiusStatus"), ("ELTEX-SMI-ACTUAL", "radiusTimeout"), ("ELTEX-SMI-ACTUAL", "radiusSwitchSrv"), ("ELTEX-SMI-ACTUAL", "radiusTypeResp"), ("ELTEX-SMI-ACTUAL", "radiusDescr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    eltrapObjectGroup = eltrapObjectGroup.setStatus('current')
if mibBuilder.loadTexts: eltrapObjectGroup.setDescription('')
eltrapDepNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 35265, 3, 103)).setObjects(("ELTEX-SMI-ACTUAL", "ponTeknovusEponAlarmTrap"), ("ELTEX-SMI-ACTUAL", "ponTeknovusUserLoginAlarmTrap"), ("ELTEX-SMI-ACTUAL", "ponTeknovusUserLoginOkTrap"), ("ELTEX-SMI-ACTUAL", "ponTeknovusEponOkTrap"), ("ELTEX-SMI-ACTUAL", "elcEponAlarmTrap"), ("ELTEX-SMI-ACTUAL", "elcUserLoginAlarmTrap"), ("ELTEX-SMI-ACTUAL", "elcUserLoginOkTrap"), ("ELTEX-SMI-ACTUAL", "elcEponOkTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    eltrapDepNotificationGroup = eltrapDepNotificationGroup.setStatus('deprecated')
if mibBuilder.loadTexts: eltrapDepNotificationGroup.setDescription('')
mibBuilder.exportSymbols("ELTEX-SMI-ACTUAL", radiusTimeout=radiusTimeout, elcLoadAverageOkTrap=elcLoadAverageOkTrap, mccpSS7LinkOkTrap=mccpSS7LinkOkTrap, ponTeknovusFirmwareUpdateAlarmTrap=ponTeknovusFirmwareUpdateAlarmTrap, ponTeknovusUplinkOkTrap=ponTeknovusUplinkOkTrap, pp4PortCounterErrorFreeOkTrap=pp4PortCounterErrorFreeOkTrap, smgAlarmSipDuplicateTrap=smgAlarmSipDuplicateTrap, pp4RebootUnitOkTrap=pp4RebootUnitOkTrap, pp4AlarmTraps=pp4AlarmTraps, ponTeknovusSwitchConfigChangeTrap=ponTeknovusSwitchConfigChangeTrap, elcFanAlarmTrap=elcFanAlarmTrap, smgAlarmCDRFileTrap=smgAlarmCDRFileTrap, elcONTConfAlarmTrap=elcONTConfAlarmTrap, ponTeknovusConfigSavedAlarmTrap=ponTeknovusConfigSavedAlarmTrap, ponTeknovusDuplicateMacAlarmTrap=ponTeknovusDuplicateMacAlarmTrap, mxa64DslLinkAlarmTrap=mxa64DslLinkAlarmTrap, ponTeknovusConfigSavedOkTrap=ponTeknovusConfigSavedOkTrap, eltrapNotificationGroup=eltrapNotificationGroup, ponTeknovusRAMOkTrap=ponTeknovusRAMOkTrap, pp4RebootFwTimerAlarmTrap=pp4RebootFwTimerAlarmTrap, fxs72AlarmTraps=fxs72AlarmTraps, mxa24VoltAlarmTrap=mxa24VoltAlarmTrap, smgOkProcOverloadTrap=smgOkProcOverloadTrap, mccpStreamAlarmTrap=mccpStreamAlarmTrap, ponTeknovusUserLoginOkTrap=ponTeknovusUserLoginOkTrap, pp4LinkFlapAlarmTrap=pp4LinkFlapAlarmTrap, smgOkPortScanDetectorTrap=smgOkPortScanDetectorTrap, fxs72FanOkTrap=fxs72FanOkTrap, pp4CommitOkTrap=pp4CommitOkTrap, smgCallForbiddenTrap=smgCallForbiddenTrap, elcONTAuthOkTrap=elcONTAuthOkTrap, pp4SaveAlarmTrap=pp4SaveAlarmTrap, pp4RebootUnitAlarmTrap=pp4RebootUnitAlarmTrap, ponTeknovusTemperatureAlarmTrap=ponTeknovusTemperatureAlarmTrap, mxa32VoltAlarmTrap=mxa32VoltAlarmTrap, ponTeknovusLogoutOkTrap=ponTeknovusLogoutOkTrap, smgAlarmPowerModuleStateTrap=smgAlarmPowerModuleStateTrap, smgAlarmTemperatureTrap=smgAlarmTemperatureTrap, radiusSeqNum=radiusSeqNum, ponTeknovusONTDeconfigureTrap=ponTeknovusONTDeconfigureTrap, smgAlarmSbcRegistrationExpiredTrap=smgAlarmSbcRegistrationExpiredTrap, elcAlarmTraps=elcAlarmTraps, smgOkMemoryLimitTrap=smgOkMemoryLimitTrap, ponTeknovusONTPortBlockedOkTrap=ponTeknovusONTPortBlockedOkTrap, pp4LogoutOkTrap=pp4LogoutOkTrap, fxs72BpuAlarmTrap=fxs72BpuAlarmTrap, mxa32DslLinkAlarmTrap=mxa32DslLinkAlarmTrap, mxa32EthLinkOkTrap=mxa32EthLinkOkTrap, mxa24EthLinkAlarmTrap=mxa24EthLinkAlarmTrap, omsOperationCommandAlarm=omsOperationCommandAlarm, smgOkReserveSlaveLinkChangedTrap=smgOkReserveSlaveLinkChangedTrap, smgOkSipAttackedTrap=smgOkSipAttackedTrap, elcUserLoginAlarmTrap=elcUserLoginAlarmTrap, fxs72SSwOkTrap=fxs72SSwOkTrap, smgUpdateFwOk=smgUpdateFwOk, smgOkPctlModuleTrap=smgOkPctlModuleTrap, mccpSlotOkTrap=mccpSlotOkTrap, ponTeknovusRAMAlarmTrap=ponTeknovusRAMAlarmTrap, pp4LoadAvgAlarmTrap=pp4LoadAvgAlarmTrap, eltexLtd=eltexLtd, omsOperationCommandOk=omsOperationCommandOk, pp4LogoutAlarmTrap=pp4LogoutAlarmTrap, mxa24EthLinkOkTrap=mxa24EthLinkOkTrap, smgReserveSlaveSoftVersionTrap=smgReserveSlaveSoftVersionTrap, ponTeknovusBoardRebootTrap=ponTeknovusBoardRebootTrap, mxa24TempOkTrap=mxa24TempOkTrap, elcUplinkOkTrap=elcUplinkOkTrap, fxs72TemperatureAlarmTrap=fxs72TemperatureAlarmTrap, elcONTConfOKTrap=elcONTConfOKTrap, smgFail2banBlockTrap=smgFail2banBlockTrap, mcTrapSyncType=mcTrapSyncType, ponTeknovusONTConfAlarmTrap=ponTeknovusONTConfAlarmTrap, mxa24AlarmTraps=mxa24AlarmTraps, pp4BoardRemoveAlarmTrap=pp4BoardRemoveAlarmTrap, pp4PortCounterErrorFoundAlarmTrap=pp4PortCounterErrorFoundAlarmTrap, smgAlarmSipAccessTrap=smgAlarmSipAccessTrap, mccpLinksetAlarmTrap=mccpLinksetAlarmTrap, mxa24VoltOkTrap=mxa24VoltOkTrap, smgOkMspDevTrap=smgOkMspDevTrap, elcRAMAlarmTrap=elcRAMAlarmTrap, fxs72PowerUnitTermOk=fxs72PowerUnitTermOk, pp4UnitRemoveAlarmTrap=pp4UnitRemoveAlarmTrap, fxs72LicenseOkTrap=fxs72LicenseOkTrap, mccpIntfOkTrap=mccpIntfOkTrap, mcReservedFlag=mcReservedFlag, elcLoginOkTrap=elcLoginOkTrap, mccpOkTraps=mccpOkTraps, smgAlarmCdrFtpTrap=smgAlarmCdrFtpTrap, mxa64EthLinkAlarmTrap=mxa64EthLinkAlarmTrap, smgAlarmSipOptionsQueueOverload=smgAlarmSipOptionsQueueOverload, ponTeknovusONTConfOKTrap=ponTeknovusONTConfOKTrap, elcDuplicateMacAlarmTrap=elcDuplicateMacAlarmTrap, elcConfigSavedOkTrap=elcConfigSavedOkTrap, eltrapObjectGroup=eltrapObjectGroup, smgAlarmSyncTrap=smgAlarmSyncTrap, mcTrapRestoredAlarmID=mcTrapRestoredAlarmID, pp4LoginOkTrap=pp4LoginOkTrap, ponTeknovusLoadAverageOkTrap=ponTeknovusLoadAverageOkTrap, fxs72PowerUnitTermAlarm=fxs72PowerUnitTermAlarm, elcConfigSavedAlarmTrap=elcConfigSavedAlarmTrap, ponTeknovusEponOkTrap=ponTeknovusEponOkTrap, ponTeknovusConfigRereadTrap=ponTeknovusConfigRereadTrap, mxa24DslLinkOkTrap=mxa24DslLinkOkTrap, smgOkSyncTrap=smgOkSyncTrap, radiusTraps=radiusTraps, ponTeknovusONTAuthOkTrap=ponTeknovusONTAuthOkTrap, smgOkSIPinterfaceTrap=smgOkSIPinterfaceTrap, smgOkTemperatureTrap=smgOkTemperatureTrap, elSoftware=elSoftware, mxa64AlarmTraps=mxa64AlarmTraps, pp4RebootStackAlarmTrap=pp4RebootStackAlarmTrap, smgAlarmIpcOverloadTrap=smgAlarmIpcOverloadTrap, smgOkStreamTrap=smgOkStreamTrap, pp4OkTraps=pp4OkTraps, pp4DuplicationMacAlarmTrap=pp4DuplicationMacAlarmTrap, smgOkCDRFileTrap=smgOkCDRFileTrap, mccpSlotAlarmTrap=mccpSlotAlarmTrap, smgSIPinterfaceTrap=smgSIPinterfaceTrap, ponTeknovusONTConfigChangedTrap=ponTeknovusONTConfigChangedTrap, mxa64OkTraps=mxa64OkTraps, ponTeknovusLoadAverageAlarmTrap=ponTeknovusLoadAverageAlarmTrap, fxs72updateFwFail=fxs72updateFwFail, smgAlarmMemoryLimitTrap=smgAlarmMemoryLimitTrap, pp4FwUpdateAlarmTrap=pp4FwUpdateAlarmTrap, mxa64TempOkTrap=mxa64TempOkTrap, smgAlarmMspDevTrap=smgAlarmMspDevTrap, radiusRequestNotification=radiusRequestNotification, fxs72VbatOkTrap=fxs72VbatOkTrap, mxa32VoltOkTrap=mxa32VoltOkTrap, ponTeknovusTemperatureOkTrap=ponTeknovusTemperatureOkTrap, fxs72SSwAlarmTrap=fxs72SSwAlarmTrap, mcTrapLParam3=mcTrapLParam3, ponTeknovusFirmwareUpdateOkTrap=ponTeknovusFirmwareUpdateOkTrap, fxs72VringAlarmTrap=fxs72VringAlarmTrap, mxa32EthLinkAlarmTrap=mxa32EthLinkAlarmTrap, elcTemperatureAlarmTrap=elcTemperatureAlarmTrap, elcUserLoginOkTrap=elcUserLoginOkTrap, elcSwitchConfigChangeTrap=elcSwitchConfigChangeTrap, smgAlarmH323NodeTrap=smgAlarmH323NodeTrap, smgSipAttackedTrap=smgSipAttackedTrap, mccpConfigOkTrap=mccpConfigOkTrap, radiusTypeResp=radiusTypeResp, mxa24OkTraps=mxa24OkTraps, smgOkSiptNodeTrap=smgOkSiptNodeTrap, pp4LoadAvgOkTrap=pp4LoadAvgOkTrap, fxs72PortAlarmTrap=fxs72PortAlarmTrap, pp4FwUpdateOkTrap=pp4FwUpdateOkTrap, smgOkFansIdleTrap=smgOkFansIdleTrap, smgTraps=smgTraps, ponTeknovusFanAlarmTrap=ponTeknovusFanAlarmTrap, mxa64TempAlarmTrap=mxa64TempAlarmTrap, ponTeknovusOpticalAlarmTrap=ponTeknovusOpticalAlarmTrap, mcTrapDescr=mcTrapDescr, fxs72PortOkTrap=fxs72PortOkTrap, elcOpticalAlarmTrap=elcOpticalAlarmTrap, pp4SyncDisallowedOkTrap=pp4SyncDisallowedOkTrap, smgReserveSlaveLinkChangedTrap=smgReserveSlaveLinkChangedTrap, smgOkLinkSetTrap=smgOkLinkSetTrap, fxs72VbatAlarmTrap=fxs72VbatAlarmTrap, elcOpticalOkTrap=elcOpticalOkTrap, smgAlarmMaintenanceTrap=smgAlarmMaintenanceTrap, smgOkCallForbiddenTrap=smgOkCallForbiddenTrap, elcEponAlarmTrap=elcEponAlarmTrap, eltexShutdownTrap=eltexShutdownTrap, elcONTAuthAlarmTrap=elcONTAuthAlarmTrap, smgOkH323NodeTrap=smgOkH323NodeTrap, smgOkDriveLimitTrap=smgOkDriveLimitTrap, smgOkSipDuplicateTrap=smgOkSipDuplicateTrap, pp4LinkOkTrap=pp4LinkOkTrap, mxa64EthLinkOkTrap=mxa64EthLinkOkTrap, omsOperationOkTraps=omsOperationOkTraps, mxa64UserLoginTrap=mxa64UserLoginTrap, smgPortScanDetectorTrap=smgPortScanDetectorTrap, mxa64VoltOkTrap=mxa64VoltOkTrap, smgOkMaintenanceTrap=smgOkMaintenanceTrap, fxs72TempmeasurementAlarmTrap=fxs72TempmeasurementAlarmTrap, smgFirewallTrap=smgFirewallTrap, radiusStatus=radiusStatus, smgOkConfigTrap=smgOkConfigTrap, smgOkTrunkGroupCPSTrap=smgOkTrunkGroupCPSTrap, fxs72FanAlarmTrap=fxs72FanAlarmTrap, elcUplinkAlarmTrap=elcUplinkAlarmTrap, smgAlarmProcOverloadTrap=smgAlarmProcOverloadTrap, radiusNotification=radiusNotification, ponTeknovusOpticalOkTrap=ponTeknovusOpticalOkTrap, pp4MemoryOkTrap=pp4MemoryOkTrap, smgPctlModuleTrap=smgPctlModuleTrap, mccpIntfAlarmTrap=mccpIntfAlarmTrap, pp4LoadCpuAlarmTrap=pp4LoadCpuAlarmTrap, eltrapGroup=eltrapGroup, smgOkDemoLicenseTrap=smgOkDemoLicenseTrap, pp4BoardAddOkTrap=pp4BoardAddOkTrap, mxa64UserLogoutTrap=mxa64UserLogoutTrap, radiusSwitchSrv=radiusSwitchSrv, smgTrunkGroupCPSTrap=smgTrunkGroupCPSTrap, PYSNMP_MODULE_ID=eltexLtd, smgAlarm=smgAlarm, eltrapDepNotificationGroup=eltrapDepNotificationGroup, ponTeknovusONTStateChangedTrap=ponTeknovusONTStateChangedTrap, mcTrapExState=mcTrapExState, smgOkIpcOverloadTrap=smgOkIpcOverloadTrap, smgAlarmSipOptionsQueueOk=smgAlarmSipOptionsQueueOk, smgOkFirewallTrap=smgOkFirewallTrap, smgAlarmConfigTrap=smgAlarmConfigTrap, ponTeknovusLoginOkTrap=ponTeknovusLoginOkTrap, mxa24DslLinkAlarmTrap=mxa24DslLinkAlarmTrap, pp4ConfigRestoredOkTrap=pp4ConfigRestoredOkTrap, mxa32DslLinkOkTrap=mxa32DslLinkOkTrap, fxs72OkTraps=fxs72OkTraps, elHardware=elHardware, elcEponOkTrap=elcEponOkTrap, mccpSyncAlarmTrap=mccpSyncAlarmTrap, elcFanOkTrap=elcFanOkTrap, fxs72VmodeSwitchTrap=fxs72VmodeSwitchTrap, elcFirmwareUpdateAlarmTrap=elcFirmwareUpdateAlarmTrap, radiusDescr=radiusDescr, smgOkSS7LinkTrap=smgOkSS7LinkTrap, ponTeknovusUserLoginAlarmTrap=ponTeknovusUserLoginAlarmTrap, smgAlarmDriveLimitTrap=smgAlarmDriveLimitTrap, ponTeknovusFlappingOkTrap=ponTeknovusFlappingOkTrap, fxs72TemperatureOkTrap=fxs72TemperatureOkTrap, pp4UnitAddOkTrap=pp4UnitAddOkTrap, ponTeknovusLoginAlarmTrap=ponTeknovusLoginAlarmTrap, smgOkRegForbiddenTrap=smgOkRegForbiddenTrap, fxs72FanLowSpeedAlarmTrap=fxs72FanLowSpeedAlarmTrap, ponTeknovusUplinkAlarmTrap=ponTeknovusUplinkAlarmTrap, pp4LoginAlarmTrap=pp4LoginAlarmTrap, smgAlarmStreamTrap=smgAlarmStreamTrap, smgOkPowerModuleStateTrap=smgOkPowerModuleStateTrap, pp4MemoryAlarmTrap=pp4MemoryAlarmTrap, smgAlarmSS7LinkTrap=smgAlarmSS7LinkTrap, mccpStreamOkTrap=mccpStreamOkTrap, ponTeknovusONTAuthAlarmTrap=ponTeknovusONTAuthAlarmTrap, elcFlappingOkTrap=elcFlappingOkTrap, fxs72LicenseAlarmTrap=fxs72LicenseAlarmTrap, elcLogoutOkTrap=elcLogoutOkTrap, elcTemperatureOkTrap=elcTemperatureOkTrap, smgAlarmMegacoNodeTrap=smgAlarmMegacoNodeTrap, mxa24UserLoginTrap=mxa24UserLoginTrap, smgOkReserveSlaveSoftVersionTrap=smgOkReserveSlaveSoftVersionTrap, pp4RoleChangedOkTrap=pp4RoleChangedOkTrap, elcFirmwareUpdateOkTrap=elcFirmwareUpdateOkTrap, fxs72FanLowSpeedOkTrap=fxs72FanLowSpeedOkTrap, mxa32UserLoginTrap=mxa32UserLoginTrap, mccpConfigAlarmTrap=mccpConfigAlarmTrap, mxa64DslLinkOkTrap=mxa64DslLinkOkTrap, pp4LinkAlarmTrap=pp4LinkAlarmTrap, mcTrapLParam1=mcTrapLParam1, smgRegForbiddenTrap=smgRegForbiddenTrap, ponTeknovusConfigMigrateOkTrap=ponTeknovusConfigMigrateOkTrap, fxs72FansSwitchTrap=fxs72FansSwitchTrap, fxs72updateFwOk=fxs72updateFwOk, smgUpdateFwFail=smgUpdateFwFail, omsOperationAlarmTraps=omsOperationAlarmTraps)
mibBuilder.exportSymbols("ELTEX-SMI-ACTUAL", elcFlappingAlarmTrap=elcFlappingAlarmTrap, smgAlarmFansIdleTrap=smgAlarmFansIdleTrap, mccpAlarmTraps=mccpAlarmTraps, mccpStartOkTrap=mccpStartOkTrap, elcLoadAverageAlarmTrap=elcLoadAverageAlarmTrap, ponTeknovusAlarmTraps=ponTeknovusAlarmTraps, mccpSS7LinkAlarmTrap=mccpSS7LinkAlarmTrap, mccpIntfSlotOkTrap=mccpIntfSlotOkTrap, mcTrapLParam2=mcTrapLParam2, ponTeknovusOkTraps=ponTeknovusOkTraps, fxs72VringOkTrap=fxs72VringOkTrap, mxa32TempOkTrap=mxa32TempOkTrap, elcRAMOkTrap=elcRAMOkTrap, mxa24UserLogoutTrap=mxa24UserLogoutTrap, ponTeknovusFlappingAlarmTrap=ponTeknovusFlappingAlarmTrap, mxa32TempAlarmTrap=mxa32TempAlarmTrap, pp4LinkFlapEndOkTrap=pp4LinkFlapEndOkTrap, mxa32UserLogoutTrap=mxa32UserLogoutTrap, smgOkCdrFtpTrap=smgOkCdrFtpTrap, mcTrapID=mcTrapID, mccpLinksetOkTrap=mccpLinksetOkTrap, mccpSutdownSnmpdAlarmTrap=mccpSutdownSnmpdAlarmTrap, pp4SyncDisallowedAlarmTrap=pp4SyncDisallowedAlarmTrap, smgOkSipAccessTrap=smgOkSipAccessTrap, mxa32OkTraps=mxa32OkTraps, fxs72TempmeasurementOkTrap=fxs72TempmeasurementOkTrap, pp4AutoNegotiationOkTrap=pp4AutoNegotiationOkTrap, fxs72BpuOkTrap=fxs72BpuOkTrap, pp4ConfigChangedOkTrap=pp4ConfigChangedOkTrap, ponTeknovusFanOkTrap=ponTeknovusFanOkTrap, elcLoginAlarmTrap=elcLoginAlarmTrap, mccpIntfSlotAlarmTrap=mccpIntfSlotAlarmTrap, mccpSyncOkTrap=mccpSyncOkTrap, mxa24TempAlarmTrap=mxa24TempAlarmTrap, ponTeknovusEponAlarmTrap=ponTeknovusEponAlarmTrap, smgDemoLicenseTrap=smgDemoLicenseTrap, pp4SaveOkTrap=pp4SaveOkTrap, mxa32AlarmTraps=mxa32AlarmTraps, smgAlarmLinkSetTrap=smgAlarmLinkSetTrap, smgAlarmSiptNodeTrap=smgAlarmSiptNodeTrap, pp4FwConfirmNeededAlarmTrap=pp4FwConfirmNeededAlarmTrap, ponTeknovusONTPortBlockedAlarmTrap=ponTeknovusONTPortBlockedAlarmTrap, pp4AutoNegotiationAlarmTrap=pp4AutoNegotiationAlarmTrap, ponTeknovusConfigMigrateAlarmTrap=ponTeknovusConfigMigrateAlarmTrap, mxa64VoltAlarmTrap=mxa64VoltAlarmTrap, mc240TrapTypes=mc240TrapTypes, smgOkRebootTrap=smgOkRebootTrap, smgOK=smgOK, elcOkTraps=elcOkTraps)
