#
# PySNMP MIB module SITE-MONITORING-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/alpha/SITE-MONITORING-MIB
# Produced by pysmi-1.1.12 at Mon Jun  3 14:02:46 2024
# On host fv-az1456-954 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Counter64, ObjectIdentity, Integer32, ModuleIdentity, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, MibIdentifier, iso, Gauge32, Bits, IpAddress, enterprises, NotificationType, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "ObjectIdentity", "Integer32", "ModuleIdentity", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "MibIdentifier", "iso", "Gauge32", "Bits", "IpAddress", "enterprises", "NotificationType", "Counter32")
TextualConvention, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "DisplayString")
siteMonitoringMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 26854, 1, 1))
siteMonitoringMIB.setRevisions(('2017-05-16 16:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: siteMonitoringMIB.setRevisionsDescriptions(('This revision is the fourth release of the MIB',))
if mibBuilder.loadTexts: siteMonitoringMIB.setLastUpdated('201705161600Z')
if mibBuilder.loadTexts: siteMonitoringMIB.setOrganization('Alpha Innovations')
if mibBuilder.loadTexts: siteMonitoringMIB.setContactInfo('  Jean-Philippe Vanhulst\n        Postal:     Alpha Innovations\n                    Rue Alexander Fleming 1\n                    B-1348 Louvain-la-Neuve\n                    Belgium\n        phone       +32 10 438 382\n        e-mail      mail@alphainnovations.eu')
if mibBuilder.loadTexts: siteMonitoringMIB.setDescription('Alpha Innovations SNMP corporate naming convention\n   Organises the SNMP OIDs according to the\n   design centres that generate the different MIBs')
atsa = MibIdentifier((1, 3, 6, 1, 4, 1, 26854))
atsaCorporate = MibIdentifier((1, 3, 6, 1, 4, 1, 26854, 1))
atsaUs = MibIdentifier((1, 3, 6, 1, 4, 1, 26854, 2))
atsaEu = MibIdentifier((1, 3, 6, 1, 4, 1, 26854, 3))
atsaEuDevices = MibIdentifier((1, 3, 6, 1, 4, 1, 26854, 3, 1))
siteMonitoring = MibIdentifier((1, 3, 6, 1, 4, 1, 26854, 3, 2))
siteV1 = MibIdentifier((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1))
siteV1GlobalStatus = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteV1GlobalStatus.setStatus('current')
if mibBuilder.loadTexts: siteV1GlobalStatus.setDescription('A textual string (alarms, normal or unknown) containing the status of the Site')
siteV1GlobalAlarmSeverityType = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteV1GlobalAlarmSeverityType.setStatus('current')
if mibBuilder.loadTexts: siteV1GlobalAlarmSeverityType.setDescription('The alarm severity type (critical, major, minor, warning, none, disabled) of the Site')
siteV1GlobalAlarmSeverityLevel = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteV1GlobalAlarmSeverityLevel.setStatus('current')
if mibBuilder.loadTexts: siteV1GlobalAlarmSeverityLevel.setDescription('The alarm severity level (0-9) of the Site')
siteV1GlobalAlarmSeverityTypeInt = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteV1GlobalAlarmSeverityTypeInt.setStatus('current')
if mibBuilder.loadTexts: siteV1GlobalAlarmSeverityTypeInt.setDescription('The alarm severity type as integer (critical=4, major=3, minor=2, warning=1, none=0) of the Site')
siteV1Description = MibIdentifier((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 10))
siteV1DescriptionNumber = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 10, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteV1DescriptionNumber.setStatus('current')
if mibBuilder.loadTexts: siteV1DescriptionNumber.setDescription('The number of entries in the Site Description table')
siteV1DescriptionTable = MibTable((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 10, 2), )
if mibBuilder.loadTexts: siteV1DescriptionTable.setStatus('current')
if mibBuilder.loadTexts: siteV1DescriptionTable.setDescription('The Description table of the Site')
siteV1DescriptionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 10, 2, 1), ).setIndexNames((0, "SITE-MONITORING-MIB", "siteV1DescriptionIndex"))
if mibBuilder.loadTexts: siteV1DescriptionEntry.setStatus('current')
if mibBuilder.loadTexts: siteV1DescriptionEntry.setDescription('A Description entry')
siteV1DescriptionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 10, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: siteV1DescriptionIndex.setStatus('current')
if mibBuilder.loadTexts: siteV1DescriptionIndex.setDescription('Description Index')
siteV1DescriptionName = MibTableColumn((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 10, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteV1DescriptionName.setStatus('current')
if mibBuilder.loadTexts: siteV1DescriptionName.setDescription('Description Name')
siteV1DescriptionValue = MibTableColumn((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 10, 2, 1, 3), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: siteV1DescriptionValue.setStatus('current')
if mibBuilder.loadTexts: siteV1DescriptionValue.setDescription('Description Value')
siteV1DescriptionEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 10, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: siteV1DescriptionEntryStatus.setStatus('current')
if mibBuilder.loadTexts: siteV1DescriptionEntryStatus.setDescription('The status of this table entry')
siteV1DescriptionList = MibIdentifier((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 10, 3))
siteV1DescDescriptionSiteNumber = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 10, 3, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1DescDescriptionSiteNumber.setStatus('current')
if mibBuilder.loadTexts: siteV1DescDescriptionSiteNumber.setDescription('The identification number of the site')
siteV1DescDescriptionSiteName = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 10, 3, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1DescDescriptionSiteName.setStatus('current')
if mibBuilder.loadTexts: siteV1DescDescriptionSiteName.setDescription('The name of the site')
siteV1DescDescriptionShortDescription = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 10, 3, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1DescDescriptionShortDescription.setStatus('current')
if mibBuilder.loadTexts: siteV1DescDescriptionShortDescription.setDescription('A short description of the site')
siteV1DescDescriptionInfo = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 10, 3, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1DescDescriptionInfo.setStatus('current')
if mibBuilder.loadTexts: siteV1DescDescriptionInfo.setDescription('Some more information about the site')
siteV1DescDescriptionDescription = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 10, 3, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1DescDescriptionDescription.setStatus('current')
if mibBuilder.loadTexts: siteV1DescDescriptionDescription.setDescription('A free text zone to write a system description')
siteV1DescDescriptionReference = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 10, 3, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1DescDescriptionReference.setStatus('current')
if mibBuilder.loadTexts: siteV1DescDescriptionReference.setDescription('A free text zone to write the customer reference of the system')
siteV1DescDescriptionContactName = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 10, 3, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1DescDescriptionContactName.setStatus('current')
if mibBuilder.loadTexts: siteV1DescDescriptionContactName.setDescription('Contact Name')
siteV1DescDescriptionPhoneNumber = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 10, 3, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1DescDescriptionPhoneNumber.setStatus('current')
if mibBuilder.loadTexts: siteV1DescDescriptionPhoneNumber.setDescription('Phone Number')
siteV1DescDescriptionStreet = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 10, 3, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1DescDescriptionStreet.setStatus('current')
if mibBuilder.loadTexts: siteV1DescDescriptionStreet.setDescription('Street part of the site address')
siteV1DescDescriptionCity = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 10, 3, 12), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1DescDescriptionCity.setStatus('current')
if mibBuilder.loadTexts: siteV1DescDescriptionCity.setDescription('City part of the site address')
siteV1DescDescriptionProvince = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 10, 3, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1DescDescriptionProvince.setStatus('current')
if mibBuilder.loadTexts: siteV1DescDescriptionProvince.setDescription('Province part of the site address')
siteV1DescDescriptionPostalCode = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 10, 3, 14), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1DescDescriptionPostalCode.setStatus('current')
if mibBuilder.loadTexts: siteV1DescDescriptionPostalCode.setDescription('Postal Code part of the site address')
siteV1DescDescriptionRegion = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 10, 3, 15), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1DescDescriptionRegion.setStatus('current')
if mibBuilder.loadTexts: siteV1DescDescriptionRegion.setDescription('Region part of the site address')
siteV1DescDescriptionCountry = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 10, 3, 16), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1DescDescriptionCountry.setStatus('current')
if mibBuilder.loadTexts: siteV1DescDescriptionCountry.setDescription('Country part of the site address')
siteV1DescDescriptionGroup1 = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 10, 3, 21), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1DescDescriptionGroup1.setStatus('current')
if mibBuilder.loadTexts: siteV1DescDescriptionGroup1.setDescription('Group Level 1 (For Armada Clustering)')
siteV1DescDescriptionGroup2 = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 10, 3, 22), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1DescDescriptionGroup2.setStatus('current')
if mibBuilder.loadTexts: siteV1DescDescriptionGroup2.setDescription('Group Level 2 (For Armada Clustering)')
siteV1DescDescriptionGroup3 = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 10, 3, 23), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1DescDescriptionGroup3.setStatus('current')
if mibBuilder.loadTexts: siteV1DescDescriptionGroup3.setDescription('Group Level 3 (For Armada Clustering)')
siteV1DescDescriptionGroup4 = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 10, 3, 24), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1DescDescriptionGroup4.setStatus('current')
if mibBuilder.loadTexts: siteV1DescDescriptionGroup4.setDescription('Group Level 4 (For Armada Clustering)')
siteV1DescDescriptionGroup5 = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 10, 3, 25), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1DescDescriptionGroup5.setStatus('current')
if mibBuilder.loadTexts: siteV1DescDescriptionGroup5.setDescription('Group Level 5 (For Armada Clustering)')
siteV1DescDescriptionLatitude = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 10, 3, 31), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1DescDescriptionLatitude.setStatus('current')
if mibBuilder.loadTexts: siteV1DescDescriptionLatitude.setDescription('The latitude of the site')
siteV1DescDescriptionLongitude = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 10, 3, 32), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1DescDescriptionLongitude.setStatus('current')
if mibBuilder.loadTexts: siteV1DescDescriptionLongitude.setDescription('The longitude of the site')
siteV1DescDescriptionAltitude = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 10, 3, 33), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1DescDescriptionAltitude.setStatus('current')
if mibBuilder.loadTexts: siteV1DescDescriptionAltitude.setDescription('The altitude of the site')
siteV1DescControllerSoftwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 10, 3, 91), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteV1DescControllerSoftwareRevision.setStatus('current')
if mibBuilder.loadTexts: siteV1DescControllerSoftwareRevision.setDescription('The software revision of Comp@s (read only)')
siteV1DescControllerOperatingSystemRevision = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 10, 3, 92), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteV1DescControllerOperatingSystemRevision.setStatus('current')
if mibBuilder.loadTexts: siteV1DescControllerOperatingSystemRevision.setDescription('The operating system of Comp@s (read only)')
siteV1DescControllerCPU = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 10, 3, 93), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteV1DescControllerCPU.setStatus('current')
if mibBuilder.loadTexts: siteV1DescControllerCPU.setDescription('Information about the CPU')
siteV1DescControllerCard = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 10, 3, 94), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteV1DescControllerCard.setStatus('current')
if mibBuilder.loadTexts: siteV1DescControllerCard.setDescription('Information about the hardware system containing Compas')
siteV1DescControllerStarterVersion = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 10, 3, 100), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteV1DescControllerStarterVersion.setStatus('current')
if mibBuilder.loadTexts: siteV1DescControllerStarterVersion.setDescription('Information about the starter component of Compas')
siteV1DescControllerFactoryCompasVersion = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 10, 3, 105), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteV1DescControllerFactoryCompasVersion.setStatus('current')
if mibBuilder.loadTexts: siteV1DescControllerFactoryCompasVersion.setDescription('Information about the revision of Compas in Factory folder')
siteV1DescControllerUserCompasVersion = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 10, 3, 106), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteV1DescControllerUserCompasVersion.setStatus('current')
if mibBuilder.loadTexts: siteV1DescControllerUserCompasVersion.setDescription('Information about the revision of Compas in user folder')
siteV1DescControllerFactoryFTPServerVersion = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 10, 3, 110), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteV1DescControllerFactoryFTPServerVersion.setStatus('current')
if mibBuilder.loadTexts: siteV1DescControllerFactoryFTPServerVersion.setDescription('Information about the revision of Ftp Server in Factory folder')
siteV1DescControllerUserFTPServerVersion = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 10, 3, 111), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteV1DescControllerUserFTPServerVersion.setStatus('current')
if mibBuilder.loadTexts: siteV1DescControllerUserFTPServerVersion.setDescription('Information about the revision of Ftp Server in Factory folder')
siteV1Alarm = MibIdentifier((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 11))
siteV1AlarmNumber = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 11, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteV1AlarmNumber.setStatus('current')
if mibBuilder.loadTexts: siteV1AlarmNumber.setDescription('The number of entries in the Site Alarm table')
siteV1AlarmTable = MibTable((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 11, 2), )
if mibBuilder.loadTexts: siteV1AlarmTable.setStatus('current')
if mibBuilder.loadTexts: siteV1AlarmTable.setDescription('The table of Alarm entries')
siteV1AlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 11, 2, 1), ).setIndexNames((0, "SITE-MONITORING-MIB", "siteV1AlarmIndex"))
if mibBuilder.loadTexts: siteV1AlarmEntry.setStatus('current')
if mibBuilder.loadTexts: siteV1AlarmEntry.setDescription('An alarm entry')
siteV1AlarmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 11, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: siteV1AlarmIndex.setStatus('current')
if mibBuilder.loadTexts: siteV1AlarmIndex.setDescription('Alarm Index')
siteV1AlarmName = MibTableColumn((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 11, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteV1AlarmName.setStatus('current')
if mibBuilder.loadTexts: siteV1AlarmName.setDescription('Alarm Name')
siteV1AlarmActive = MibTableColumn((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 11, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteV1AlarmActive.setStatus('current')
if mibBuilder.loadTexts: siteV1AlarmActive.setDescription("Is the Alarm active ? 'true' for active, 'false' for not-active")
siteV1AlarmSeverityType = MibTableColumn((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 11, 2, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1AlarmSeverityType.setStatus('current')
if mibBuilder.loadTexts: siteV1AlarmSeverityType.setDescription('The alarm severity type (major, minor, warning, none, disabled) of this alarm entry')
siteV1AlarmSeverityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 11, 2, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1AlarmSeverityLevel.setStatus('current')
if mibBuilder.loadTexts: siteV1AlarmSeverityLevel.setDescription('The alarm severity level (0-9) of this alarm entry')
siteV1AlarmStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 11, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteV1AlarmStartTime.setStatus('current')
if mibBuilder.loadTexts: siteV1AlarmStartTime.setDescription('The last start time of this alarm entry (null if never active)')
siteV1AlarmStopTime = MibTableColumn((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 11, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteV1AlarmStopTime.setStatus('current')
if mibBuilder.loadTexts: siteV1AlarmStopTime.setDescription('The last stop time of this alarm entry (null if alarm active)')
siteV1AlarmEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 11, 2, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: siteV1AlarmEntryStatus.setStatus('current')
if mibBuilder.loadTexts: siteV1AlarmEntryStatus.setDescription('The status of this table entry - not used, only for MIB compliance ')
siteV1AlarmSummary = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 11, 3), Bits().clone(namedValues=NamedValues(("inventoryCANBusFail", 0), ("inventoryCANBusAddressingError", 1), ("inventoryMissingCANBusNodeIDs", 2), ("inventoryRunningCANLSSDeviceDetection", 3), ("inventoryRunningCANFirmwareUpgrade", 4), ("controllerControllerRebootRequired", 10), ("controllerLastConfChangesUnsaved", 14), ("xMLXMLHeartbeatPostFail", 20)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteV1AlarmSummary.setStatus('current')
if mibBuilder.loadTexts: siteV1AlarmSummary.setDescription("Summary bit vector with all the alarms state of the Site. A '1' means alarm active, '0' means not active. Unimplemented alarms are always '0'.")
siteV1Event = MibIdentifier((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 12))
siteV1EventNumber = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 12, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteV1EventNumber.setStatus('current')
if mibBuilder.loadTexts: siteV1EventNumber.setDescription('The number of entries in the Event Table related to the Site')
siteV1EventTable = MibTable((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 12, 2), )
if mibBuilder.loadTexts: siteV1EventTable.setStatus('current')
if mibBuilder.loadTexts: siteV1EventTable.setDescription('The Event table related to the Site')
siteV1EventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 12, 2, 1), ).setIndexNames((0, "SITE-MONITORING-MIB", "siteV1EventIndex"))
if mibBuilder.loadTexts: siteV1EventEntry.setStatus('current')
if mibBuilder.loadTexts: siteV1EventEntry.setDescription('.')
siteV1EventIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 12, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: siteV1EventIndex.setStatus('current')
if mibBuilder.loadTexts: siteV1EventIndex.setDescription('Event Index')
siteV1EventId = MibTableColumn((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 12, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteV1EventId.setStatus('current')
if mibBuilder.loadTexts: siteV1EventId.setDescription('Event Index')
siteV1EventName = MibTableColumn((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 12, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteV1EventName.setStatus('current')
if mibBuilder.loadTexts: siteV1EventName.setDescription('Event Name')
siteV1EventDateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 12, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteV1EventDateTime.setStatus('current')
if mibBuilder.loadTexts: siteV1EventDateTime.setDescription('The date and time of the event')
siteV1EventSeverityType = MibTableColumn((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 12, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteV1EventSeverityType.setStatus('current')
if mibBuilder.loadTexts: siteV1EventSeverityType.setDescription("The event severity type ('major', 'minor', 'warning' or 'none')")
siteV1EventSeverityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 12, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteV1EventSeverityLevel.setStatus('current')
if mibBuilder.loadTexts: siteV1EventSeverityLevel.setDescription('The event severity level (0-9)')
siteV1EventEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 12, 2, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: siteV1EventEntryStatus.setStatus('current')
if mibBuilder.loadTexts: siteV1EventEntryStatus.setDescription('The status of this table entry')
siteV1Data = MibIdentifier((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 13))
siteV1DataNumber = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 13, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteV1DataNumber.setStatus('current')
if mibBuilder.loadTexts: siteV1DataNumber.setDescription('The number of entries in the Data Table related to the Site')
siteV1DataTable = MibTable((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 13, 2), )
if mibBuilder.loadTexts: siteV1DataTable.setStatus('current')
if mibBuilder.loadTexts: siteV1DataTable.setDescription('The table of Data entries')
siteV1DataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 13, 2, 1), ).setIndexNames((0, "SITE-MONITORING-MIB", "siteV1DataIndex"))
if mibBuilder.loadTexts: siteV1DataEntry.setStatus('current')
if mibBuilder.loadTexts: siteV1DataEntry.setDescription('A data entry')
siteV1DataIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 13, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: siteV1DataIndex.setStatus('current')
if mibBuilder.loadTexts: siteV1DataIndex.setDescription('The data index')
siteV1DataName = MibTableColumn((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 13, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteV1DataName.setStatus('current')
if mibBuilder.loadTexts: siteV1DataName.setDescription('The data name')
siteV1DataValue = MibTableColumn((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 13, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteV1DataValue.setStatus('current')
if mibBuilder.loadTexts: siteV1DataValue.setDescription('The data value')
siteV1DataEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 13, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: siteV1DataEntryStatus.setStatus('current')
if mibBuilder.loadTexts: siteV1DataEntryStatus.setDescription('The status of this table entry - not used, only present for compliance')
siteV1DataList = MibIdentifier((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 13, 3))
siteV1DataNetworkCurrentIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 13, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteV1DataNetworkCurrentIPAddress.setStatus('current')
if mibBuilder.loadTexts: siteV1DataNetworkCurrentIPAddress.setDescription('This is the actual IP address of the Comp@s platform. If the Ethernet cable is not correctly connected, the address will be 0.0.0.0.')
siteV1DataNetworkCurrentIPMask = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 13, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteV1DataNetworkCurrentIPMask.setStatus('current')
if mibBuilder.loadTexts: siteV1DataNetworkCurrentIPMask.setDescription('This is the actual IP address of the Comp@s platform. If the Ethernet cable is not correctly connected, the address will be 0.0.0.0.')
siteV1DataNetworkCurrentMACAddress = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 13, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteV1DataNetworkCurrentMACAddress.setStatus('current')
if mibBuilder.loadTexts: siteV1DataNetworkCurrentMACAddress.setDescription('This is the MAC address of IP interface.')
siteV1DataControllerLicensedOptions = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 13, 3, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteV1DataControllerLicensedOptions.setStatus('current')
if mibBuilder.loadTexts: siteV1DataControllerLicensedOptions.setDescription('This is the options of the actual license.')
siteV1DataTimeDateAndTimeLocal = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 13, 3, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteV1DataTimeDateAndTimeLocal.setStatus('current')
if mibBuilder.loadTexts: siteV1DataTimeDateAndTimeLocal.setDescription('This is the local time of the monitoring.')
siteV1DataTimeDateAndTimeUTC = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 13, 3, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteV1DataTimeDateAndTimeUTC.setStatus('current')
if mibBuilder.loadTexts: siteV1DataTimeDateAndTimeUTC.setDescription('This is the UTC time of the monitoring.')
siteV1DataControllerMonitoringMemoryUsed = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 13, 3, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteV1DataControllerMonitoringMemoryUsed.setStatus('current')
if mibBuilder.loadTexts: siteV1DataControllerMonitoringMemoryUsed.setDescription('This is actual amount of RAM memory used by the application.')
siteV1DataControllerCPUPercentageUsage = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 13, 3, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteV1DataControllerCPUPercentageUsage.setStatus('current')
if mibBuilder.loadTexts: siteV1DataControllerCPUPercentageUsage.setDescription('This is actual percentage of CPU used')
siteV1DataControllerFreeFlashMemorySpace = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 13, 3, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteV1DataControllerFreeFlashMemorySpace.setStatus('current')
if mibBuilder.loadTexts: siteV1DataControllerFreeFlashMemorySpace.setDescription('This is free flash memory available on the Comp@s card, in Megabytes')
siteV1DataControllerFTPServerStatus = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 13, 3, 35), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteV1DataControllerFTPServerStatus.setStatus('current')
if mibBuilder.loadTexts: siteV1DataControllerFTPServerStatus.setDescription('Status of the FTP Server. Compatible only with version >= 2.26.X.X. The configuration is available at controller -> FTP Server page.')
siteV1DataDataRecordsTotalFifoSizeOfSecondRecords = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 13, 3, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteV1DataDataRecordsTotalFifoSizeOfSecondRecords.setStatus('current')
if mibBuilder.loadTexts: siteV1DataDataRecordsTotalFifoSizeOfSecondRecords.setDescription('NA')
siteV1DataDataRecordsTotalFifoSizeOfMinuteRecords = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 13, 3, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteV1DataDataRecordsTotalFifoSizeOfMinuteRecords.setStatus('current')
if mibBuilder.loadTexts: siteV1DataDataRecordsTotalFifoSizeOfMinuteRecords.setDescription('NA')
siteV1DataDataRecordsTotalFifoSizeOfHourRecords = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 13, 3, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteV1DataDataRecordsTotalFifoSizeOfHourRecords.setStatus('current')
if mibBuilder.loadTexts: siteV1DataDataRecordsTotalFifoSizeOfHourRecords.setDescription('NA')
siteV1DataDataRecordsTotalFifoSizeOfDayRecords = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 13, 3, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteV1DataDataRecordsTotalFifoSizeOfDayRecords.setStatus('current')
if mibBuilder.loadTexts: siteV1DataDataRecordsTotalFifoSizeOfDayRecords.setDescription('NA')
siteV1DataInventoryCANBusNodeIDs = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 13, 3, 51), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteV1DataInventoryCANBusNodeIDs.setStatus('current')
if mibBuilder.loadTexts: siteV1DataInventoryCANBusNodeIDs.setDescription('The coma separated list of the node ids present on the CAN bus.')
siteV1DataCloudLinkCloudLinkState = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 13, 3, 166), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteV1DataCloudLinkCloudLinkState.setStatus('current')
if mibBuilder.loadTexts: siteV1DataCloudLinkCloudLinkState.setDescription('Cloud Link State')
siteV1Config = MibIdentifier((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 15))
siteV1ConfigNumber = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 15, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteV1ConfigNumber.setStatus('current')
if mibBuilder.loadTexts: siteV1ConfigNumber.setDescription('The number of entries in the Config table related to the Site')
siteV1ConfigTable = MibTable((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 15, 2), )
if mibBuilder.loadTexts: siteV1ConfigTable.setStatus('current')
if mibBuilder.loadTexts: siteV1ConfigTable.setDescription('The table of Config entries related to the Site')
siteV1ConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 15, 2, 1), ).setIndexNames((0, "SITE-MONITORING-MIB", "siteV1ConfigIndex"))
if mibBuilder.loadTexts: siteV1ConfigEntry.setStatus('current')
if mibBuilder.loadTexts: siteV1ConfigEntry.setDescription('A Config entry')
siteV1ConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 15, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: siteV1ConfigIndex.setStatus('current')
if mibBuilder.loadTexts: siteV1ConfigIndex.setDescription('The Config entry Index')
siteV1ConfigName = MibTableColumn((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 15, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteV1ConfigName.setStatus('current')
if mibBuilder.loadTexts: siteV1ConfigName.setDescription('The Config entry name')
siteV1ConfigValue = MibTableColumn((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 15, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1ConfigValue.setStatus('current')
if mibBuilder.loadTexts: siteV1ConfigValue.setDescription('The Config entry value')
siteV1ConfigEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 15, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: siteV1ConfigEntryStatus.setStatus('current')
if mibBuilder.loadTexts: siteV1ConfigEntryStatus.setDescription('The status of this table entry - not used, only for compliance')
siteV1ConfigList = MibIdentifier((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 15, 3))
siteV1CfgNetworkDHCPEnabled = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 15, 3, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1CfgNetworkDHCPEnabled.setStatus('current')
if mibBuilder.loadTexts: siteV1CfgNetworkDHCPEnabled.setDescription('The monitoring will try to get an IP with the DHCP protocol if this parameter is set to True. By default, this parameter is set to False.')
siteV1CfgNetworkIPAddressIfStatic = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 15, 3, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1CfgNetworkIPAddressIfStatic.setStatus('current')
if mibBuilder.loadTexts: siteV1CfgNetworkIPAddressIfStatic.setDescription('The static IP address of the monitoring. This configuration parameter is not used if the DHCP is enabled. The default IP is 192.168.45.2.')
siteV1CfgNetworkSubnetMaskIfStatic = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 15, 3, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1CfgNetworkSubnetMaskIfStatic.setStatus('current')
if mibBuilder.loadTexts: siteV1CfgNetworkSubnetMaskIfStatic.setDescription('The static Subnet Mask of the monitoring. This configuration parameter is not used if the DHCP is enabled. The default mask is 255.255.255.0.')
siteV1CfgNetworkDefaultGatewayIfStatic = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 15, 3, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1CfgNetworkDefaultGatewayIfStatic.setStatus('current')
if mibBuilder.loadTexts: siteV1CfgNetworkDefaultGatewayIfStatic.setDescription('The static Default Gateway of the monitoring. This configuration parameter is not used if DHCP is enabled. This is only useful if the monitoring have to use a gateway, this is generally not necessary. The default gateway is 192.168.45.1.')
siteV1CfgNetworkDNSIfStatic = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 15, 3, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1CfgNetworkDNSIfStatic.setStatus('current')
if mibBuilder.loadTexts: siteV1CfgNetworkDNSIfStatic.setDescription('The static DNS of the monitoring. This configuration parameter is used to resolve URI and server name. This is not necessary if you are only IP address as target server. The default DNS server is 192.168.45.1.')
siteV1CfgNetworkMaxTransmissionUnit = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 15, 3, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1CfgNetworkMaxTransmissionUnit.setStatus('current')
if mibBuilder.loadTexts: siteV1CfgNetworkMaxTransmissionUnit.setDescription('Specifies the TCP/IP MTU for the network interface')
siteV1CfgTimeSNTPTimeServer = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 15, 3, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1CfgTimeSNTPTimeServer.setStatus('current')
if mibBuilder.loadTexts: siteV1CfgTimeSNTPTimeServer.setDescription('The address of the server acting as SNTP timer server. If this server is not valid, the monitoring cannot update automatically his time. You can use several time server by usin a coma separator without space.')
siteV1CfgTimeTimeZoneName = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 15, 3, 14), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1CfgTimeTimeZoneName.setStatus('current')
if mibBuilder.loadTexts: siteV1CfgTimeTimeZoneName.setDescription('The Time Zone of the site')
siteV1CfgTimeSNTPTimeRefresh = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 15, 3, 15), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1CfgTimeSNTPTimeRefresh.setStatus('current')
if mibBuilder.loadTexts: siteV1CfgTimeSNTPTimeRefresh.setDescription('Set the time between synchronisation with the SNTP server (max 1000 hours, by default 178)')
siteV1CfgTimeSNTPTimeRecoveryRefresh = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 15, 3, 16), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1CfgTimeSNTPTimeRecoveryRefresh.setStatus('current')
if mibBuilder.loadTexts: siteV1CfgTimeSNTPTimeRecoveryRefresh.setDescription('Set the time to wait before retry if a synchronisation fail (max 1000 hours, by default 24)')
siteV1CfgWebServerWebServerSecurityEnabled = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 15, 3, 22), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1CfgWebServerWebServerSecurityEnabled.setStatus('current')
if mibBuilder.loadTexts: siteV1CfgWebServerWebServerSecurityEnabled.setDescription('This is a True/False parameter used to activate or deactivate the access control to the web server.')
siteV1CfgWebServerWebServerPort = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 15, 3, 23), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1CfgWebServerWebServerPort.setStatus('current')
if mibBuilder.loadTexts: siteV1CfgWebServerWebServerPort.setDescription('This is an unsigned integer parameter used to configure the port at which the web server is accessible. By default, the port is 80. If you change this port, you must be sure that the traffic is allowed by your switches and routers on this port.')
siteV1CfgWebServerWebAuthenticationMethod = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 15, 3, 24), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1CfgWebServerWebAuthenticationMethod.setStatus('current')
if mibBuilder.loadTexts: siteV1CfgWebServerWebAuthenticationMethod.setDescription('The web access security can be managed with 3 authentication methods: Basic Access, Digest Access or Basic with Radius.')
siteV1CfgWebServerHttpsWebServerPort = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 15, 3, 26), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1CfgWebServerHttpsWebServerPort.setStatus('current')
if mibBuilder.loadTexts: siteV1CfgWebServerHttpsWebServerPort.setDescription('This is a port number to activate or deactivate the https web server - 0 or 443 by default')
siteV1CfgWebServerDefaultPage = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 15, 3, 31), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1CfgWebServerDefaultPage.setStatus('current')
if mibBuilder.loadTexts: siteV1CfgWebServerDefaultPage.setDescription('The default page displayed on logon (dashboard, site, summary, alarm_event, ...)')
siteV1CfgXMLXMLEventPostingActivated = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 15, 3, 41), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1CfgXMLXMLEventPostingActivated.setStatus('current')
if mibBuilder.loadTexts: siteV1CfgXMLXMLEventPostingActivated.setDescription('This is a True/False parameter used to activate or deactivate the XML event posting.')
siteV1CfgXMLXMLEventPostingRefreshTime = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 15, 3, 42), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1CfgXMLXMLEventPostingRefreshTime.setStatus('current')
if mibBuilder.loadTexts: siteV1CfgXMLXMLEventPostingRefreshTime.setDescription('The minimal time in second between to calculation of the XML events to send. By default, this is done every two seconds.')
siteV1CfgXMLXMLEventPostingTimeout = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 15, 3, 43), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1CfgXMLXMLEventPostingTimeout.setStatus('current')
if mibBuilder.loadTexts: siteV1CfgXMLXMLEventPostingTimeout.setDescription('The timeout in millisecond when trying to post XML data to a Web Server.')
siteV1CfgXMLXMLEventPostingToSecOnlyIfPrimFail = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 15, 3, 45), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1CfgXMLXMLEventPostingToSecOnlyIfPrimFail.setStatus('current')
if mibBuilder.loadTexts: siteV1CfgXMLXMLEventPostingToSecOnlyIfPrimFail.setDescription('If this parameter is set to true, the events will be sent to secondary only if primary server is not available. If this parameter is set to false, all the events will be sent to primary and secondary server')
siteV1CfgXMLXMLTablesToPostOnXMLEvent = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 15, 3, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1CfgXMLXMLTablesToPostOnXMLEvent.setStatus('current')
if mibBuilder.loadTexts: siteV1CfgXMLXMLTablesToPostOnXMLEvent.setDescription('The list of the tables to send when an event is generated. (description,alarm,data,config,control). This allows to have armada database updated on event.')
siteV1CfgXMLXMLHeartbeatTime = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 15, 3, 51), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1CfgXMLXMLHeartbeatTime.setStatus('current')
if mibBuilder.loadTexts: siteV1CfgXMLXMLHeartbeatTime.setDescription('This is the time between 2 XML Post of heartbeat. If set to 0, no heartbeat.')
siteV1CfgSNMPSNMPActivated = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 15, 3, 61), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1CfgSNMPSNMPActivated.setStatus('current')
if mibBuilder.loadTexts: siteV1CfgSNMPSNMPActivated.setDescription('This is a True/False parameter used to activate or deactivate the SNMP agent.')
siteV1CfgSNMPSNMPTrapVersion = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 15, 3, 63), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1CfgSNMPSNMPTrapVersion.setStatus('current')
if mibBuilder.loadTexts: siteV1CfgSNMPSNMPTrapVersion.setDescription('Traps/Notification can be sent with SNMP V1, V2c or V3 format.')
siteV1CfgSNMPSNMPGETMinSecurityLevel = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 15, 3, 64), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1CfgSNMPSNMPGETMinSecurityLevel.setStatus('current')
if mibBuilder.loadTexts: siteV1CfgSNMPSNMPGETMinSecurityLevel.setDescription('4 choices are available: No Authentication, V1 Community, V2c Community or V3.')
siteV1CfgSNMPSNMPSETMinSecurityLevel = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 15, 3, 65), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1CfgSNMPSNMPSETMinSecurityLevel.setStatus('current')
if mibBuilder.loadTexts: siteV1CfgSNMPSNMPSETMinSecurityLevel.setDescription('4 choices are available: No Authentication, V1 Community, V2c Community or V3.')
siteV1CfgSNMPSNMPV3AuthAlgorithm = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 15, 3, 66), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1CfgSNMPSNMPV3AuthAlgorithm.setStatus('current')
if mibBuilder.loadTexts: siteV1CfgSNMPSNMPV3AuthAlgorithm.setDescription('3 choices are available: MD5, SHA, Any')
siteV1CfgSNMPSNMPV3PrivacyAlgorithm = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 15, 3, 67), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1CfgSNMPSNMPV3PrivacyAlgorithm.setStatus('current')
if mibBuilder.loadTexts: siteV1CfgSNMPSNMPV3PrivacyAlgorithm.setDescription('3 choices are available: DES, AES, 3DES')
siteV1CfgSNMPSNMPV3PrivacyPassword = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 15, 3, 68), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1CfgSNMPSNMPV3PrivacyPassword.setStatus('current')
if mibBuilder.loadTexts: siteV1CfgSNMPSNMPV3PrivacyPassword.setDescription('The global SNMP V3 Encryption Password. This one is common for all the users to avoid complexity')
siteV1CfgSNMPSNMPV3EngineID = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 15, 3, 69), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1CfgSNMPSNMPV3EngineID.setStatus('current')
if mibBuilder.loadTexts: siteV1CfgSNMPSNMPV3EngineID.setDescription('The SNMP V3 Local Engine ID string')
siteV1CfgSNMPSNMPV3TrapAuthAlgorithm = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 15, 3, 72), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1CfgSNMPSNMPV3TrapAuthAlgorithm.setStatus('current')
if mibBuilder.loadTexts: siteV1CfgSNMPSNMPV3TrapAuthAlgorithm.setDescription('2 choices are available: MD5, SHA')
siteV1CfgSNMPSNMPV3TrapPrivacyAlgorithm = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 15, 3, 73), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1CfgSNMPSNMPV3TrapPrivacyAlgorithm.setStatus('current')
if mibBuilder.loadTexts: siteV1CfgSNMPSNMPV3TrapPrivacyAlgorithm.setDescription('3 choices are available: DES, AES, 3DES')
siteV1CfgSNMPSNMPV3TrapUsername = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 15, 3, 74), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1CfgSNMPSNMPV3TrapUsername.setStatus('current')
if mibBuilder.loadTexts: siteV1CfgSNMPSNMPV3TrapUsername.setDescription('The SNMP V3 Trap UserName used for all the SNMP V3 traps')
siteV1CfgSNMPSNMPV3TrapAuthPassword = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 15, 3, 75), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1CfgSNMPSNMPV3TrapAuthPassword.setStatus('current')
if mibBuilder.loadTexts: siteV1CfgSNMPSNMPV3TrapAuthPassword.setDescription('The SNMP V3 Trap Authentication Password')
siteV1CfgSNMPSNMPV3TrapPrivacyPassword = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 15, 3, 76), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1CfgSNMPSNMPV3TrapPrivacyPassword.setStatus('current')
if mibBuilder.loadTexts: siteV1CfgSNMPSNMPV3TrapPrivacyPassword.setDescription('The SNMP V3 Trap Privacy Password')
siteV1CfgSNMPSiteDescriptionIdsIncludedInTraps = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 15, 3, 77), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1CfgSNMPSiteDescriptionIdsIncludedInTraps.setStatus('current')
if mibBuilder.loadTexts: siteV1CfgSNMPSiteDescriptionIdsIncludedInTraps.setDescription("List of site Description Elements to send on traps. (to have the site reference and the city in each trap for example). The list is separated with ';'")
siteV1CfgGenericGenerateEventOnConfChanges = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 15, 3, 81), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1CfgGenericGenerateEventOnConfChanges.setStatus('current')
if mibBuilder.loadTexts: siteV1CfgGenericGenerateEventOnConfChanges.setDescription('This is a True/False parameter used to activate or deactivate the tracking of configuration changes')
siteV1CfgDataRecordsAutoArchivePeriodDataRecord = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 15, 3, 82), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1CfgDataRecordsAutoArchivePeriodDataRecord.setStatus('current')
if mibBuilder.loadTexts: siteV1CfgDataRecordsAutoArchivePeriodDataRecord.setDescription('Period in hour to auto save records (when detailled and long duration records are needed). 0 means disabled.')
siteV1CfgGenericGenerateEventOnControlExecution = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 15, 3, 83), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1CfgGenericGenerateEventOnControlExecution.setStatus('current')
if mibBuilder.loadTexts: siteV1CfgGenericGenerateEventOnControlExecution.setDescription('This is a True/False parameter used to activate or deactivate the tracking of control execution')
siteV1CfgGenericGenerateEventOnAlarmAcknowledge = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 15, 3, 84), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1CfgGenericGenerateEventOnAlarmAcknowledge.setStatus('current')
if mibBuilder.loadTexts: siteV1CfgGenericGenerateEventOnAlarmAcknowledge.setDescription('This is a True/False parameter used to activate or deactivate the tracking of alarm acknowledgment')
siteV1CfgInventoryRequiredCANBusNodeIDs = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 15, 3, 91), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1CfgInventoryRequiredCANBusNodeIDs.setStatus('current')
if mibBuilder.loadTexts: siteV1CfgInventoryRequiredCANBusNodeIDs.setDescription('This is a coma separated list with the required CAN bus node ids')
siteV1CfgInventoryLSSCANidrange = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 15, 3, 92), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1CfgInventoryLSSCANidrange.setStatus('current')
if mibBuilder.loadTexts: siteV1CfgInventoryLSSCANidrange.setDescription('By default 50-80, means up to 50 Can Nodes like rectifiers with CAN Id 50 to 80. To support up to 100 rectifiers, change it to 1-100.')
siteV1CfgInventorySystemNodesDefinition = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 15, 3, 93), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1CfgInventorySystemNodesDefinition.setStatus('current')
if mibBuilder.loadTexts: siteV1CfgInventorySystemNodesDefinition.setDescription('dc3(30-100)')
siteV1CfgInventoryLSSCANOpenSavedConf = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 15, 3, 95), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1CfgInventoryLSSCANOpenSavedConf.setStatus('current')
if mibBuilder.loadTexts: siteV1CfgInventoryLSSCANOpenSavedConf.setDescription('NA')
siteV1CfgUsersAdministratorLoginPassword = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 15, 3, 101), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1CfgUsersAdministratorLoginPassword.setStatus('current')
if mibBuilder.loadTexts: siteV1CfgUsersAdministratorLoginPassword.setDescription('This is the login and the password of the administrator. It is saved with a special syntax. First the login in clear, followed of 2 points, followed of the MD5 hashed password. If you change the login:password by entering a non hashed password, this last is automatically hashed.')
siteV1CfgUsersUser1LoginPassword = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 15, 3, 102), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1CfgUsersUser1LoginPassword.setStatus('current')
if mibBuilder.loadTexts: siteV1CfgUsersUser1LoginPassword.setDescription('This is the login and the password of the user number 1.')
siteV1CfgUsersUser2LoginPassword = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 15, 3, 103), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1CfgUsersUser2LoginPassword.setStatus('current')
if mibBuilder.loadTexts: siteV1CfgUsersUser2LoginPassword.setDescription('This is the login and the password of the user number 2.')
siteV1CfgUsersUser3LoginPassword = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 15, 3, 104), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1CfgUsersUser3LoginPassword.setStatus('current')
if mibBuilder.loadTexts: siteV1CfgUsersUser3LoginPassword.setDescription('This is the login and the password of the user number 3.')
siteV1CfgUsersUser4LoginPassword = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 15, 3, 105), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1CfgUsersUser4LoginPassword.setStatus('current')
if mibBuilder.loadTexts: siteV1CfgUsersUser4LoginPassword.setDescription('This is the login and the password of the user number 4.')
siteV1CfgUsersUser5LoginPassword = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 15, 3, 106), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1CfgUsersUser5LoginPassword.setStatus('current')
if mibBuilder.loadTexts: siteV1CfgUsersUser5LoginPassword.setDescription('This is the login and the password of the user number 5.')
siteV1CfgRadiusAuthenticationRadiusServer = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 15, 3, 111), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1CfgRadiusAuthenticationRadiusServer.setStatus('current')
if mibBuilder.loadTexts: siteV1CfgRadiusAuthenticationRadiusServer.setDescription('Radius Server address. If you have a secondary server, you could use a coma to separate it.')
siteV1CfgRadiusAuthenticationRadiusPort = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 15, 3, 112), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1CfgRadiusAuthenticationRadiusPort.setStatus('current')
if mibBuilder.loadTexts: siteV1CfgRadiusAuthenticationRadiusPort.setDescription('Radius Port. If you have a secondary server, you could use a coma to separate it.')
siteV1CfgRadiusAuthenticationRadiusSecret = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 15, 3, 113), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1CfgRadiusAuthenticationRadiusSecret.setStatus('current')
if mibBuilder.loadTexts: siteV1CfgRadiusAuthenticationRadiusSecret.setDescription('Radius PassPhrase')
siteV1CfgEmailEnableEmailFeature = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 15, 3, 120), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1CfgEmailEnableEmailFeature.setStatus('current')
if mibBuilder.loadTexts: siteV1CfgEmailEnableEmailFeature.setDescription('Enable/Disable the email feature')
siteV1CfgEmailSmtpServer = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 15, 3, 121), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1CfgEmailSmtpServer.setStatus('current')
if mibBuilder.loadTexts: siteV1CfgEmailSmtpServer.setDescription('Smtp Server. If you are using a domain name, make sure you configured the network Dns (CF5)')
siteV1CfgEmailSmtpDomain = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 15, 3, 122), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1CfgEmailSmtpDomain.setStatus('current')
if mibBuilder.loadTexts: siteV1CfgEmailSmtpDomain.setDescription('Smtp Domain. (Required by some servers.)')
siteV1CfgEmailSmtpUserLoginPassword = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 15, 3, 123), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1CfgEmailSmtpUserLoginPassword.setStatus('current')
if mibBuilder.loadTexts: siteV1CfgEmailSmtpUserLoginPassword.setDescription('Smtp Login and Password. The password is encrypted. To enter a new login and password, enter login:password and validate, the password will be encrypted.')
siteV1CfgEmailMailSender = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 15, 3, 130), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1CfgEmailMailSender.setStatus('current')
if mibBuilder.loadTexts: siteV1CfgEmailMailSender.setDescription("Mail Sender (The 'From' of the emails you will receive)")
siteV1CfgEmailMailRecipients = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 15, 3, 131), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1CfgEmailMailRecipients.setStatus('current')
if mibBuilder.loadTexts: siteV1CfgEmailMailRecipients.setDescription("Mail Recipients, separated with semicolon ';'")
siteV1CfgEmailMinimalSeverityTypeToSendMail = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 15, 3, 135), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1CfgEmailMinimalSeverityTypeToSendMail.setStatus('current')
if mibBuilder.loadTexts: siteV1CfgEmailMinimalSeverityTypeToSendMail.setDescription('This is the minimal severity of the event to send a Summary Mail')
siteV1CfgControllerAutomaticReboot = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 15, 3, 150), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1CfgControllerAutomaticReboot.setStatus('current')
if mibBuilder.loadTexts: siteV1CfgControllerAutomaticReboot.setDescription('Cron rules used in order to restart automatically the controller. Before rebooting configuration, events and data records are saved.')
siteV1CfgCloudLinkCloudEnabled = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 15, 3, 161), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1CfgCloudLinkCloudEnabled.setStatus('current')
if mibBuilder.loadTexts: siteV1CfgCloudLinkCloudEnabled.setDescription('Enable Cloud Connection')
siteV1CfgCloudLinkCloudServer = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 15, 3, 162), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1CfgCloudLinkCloudServer.setStatus('current')
if mibBuilder.loadTexts: siteV1CfgCloudLinkCloudServer.setDescription('Cloud Server')
siteV1CfgCloudLinkCloudPort = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 15, 3, 163), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1CfgCloudLinkCloudPort.setStatus('current')
if mibBuilder.loadTexts: siteV1CfgCloudLinkCloudPort.setDescription('Cloud Port')
siteV1CfgCloudLinkCloudCredential = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 15, 3, 164), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1CfgCloudLinkCloudCredential.setStatus('current')
if mibBuilder.loadTexts: siteV1CfgCloudLinkCloudCredential.setDescription('Enter Credential of your AlphaCloud account in order to connect. You have to enter username:password in order to save your credential.')
siteV1CfgCloudLinkCloudCluster = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 15, 3, 165), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1CfgCloudLinkCloudCluster.setStatus('current')
if mibBuilder.loadTexts: siteV1CfgCloudLinkCloudCluster.setDescription('Cloud Cluster')
siteV1CfgInventoryRS485ExtensionsConf = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 15, 3, 210), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1CfgInventoryRS485ExtensionsConf.setStatus('current')
if mibBuilder.loadTexts: siteV1CfgInventoryRS485ExtensionsConf.setDescription('The configuration string for RS485 Extensions')
siteV1CfgInventoryEthernetExtensionsConf = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 15, 3, 220), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1CfgInventoryEthernetExtensionsConf.setStatus('current')
if mibBuilder.loadTexts: siteV1CfgInventoryEthernetExtensionsConf.setDescription('The configuration string for Ethernet Extensions')
siteV1CfgScriptingEnabledscripts = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 15, 3, 250), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1CfgScriptingEnabledscripts.setStatus('current')
if mibBuilder.loadTexts: siteV1CfgScriptingEnabledscripts.setDescription('This parameter enable all CompasLua Scripting capabilities. You can control scripts in Files -> Files manager > scripting tab.')
siteV1CfgScriptingNumberofErrorsbeforetriggeringalarm = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 15, 3, 251), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1CfgScriptingNumberofErrorsbeforetriggeringalarm.setStatus('current')
if mibBuilder.loadTexts: siteV1CfgScriptingNumberofErrorsbeforetriggeringalarm.setDescription('Number of errors before triggering the scripting error alarm. When number of error is higher than this parameter, the alarm is triggered. If 0 is set, the alarm is deactivated')
siteV1CfgGenericReadAccessUserNumbers = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 15, 3, 521), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1CfgGenericReadAccessUserNumbers.setStatus('current')
if mibBuilder.loadTexts: siteV1CfgGenericReadAccessUserNumbers.setDescription('The list of the user numbers which have read access to this equipment. The user numbers are coma separated. The accepted user id are 1,2,3,4 and 5. Ex: 1,3,4')
siteV1CfgGenericWriteAccessUserNumbers = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 15, 3, 522), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1CfgGenericWriteAccessUserNumbers.setStatus('current')
if mibBuilder.loadTexts: siteV1CfgGenericWriteAccessUserNumbers.setDescription('The list of the user numbers which have write access to this equipment. This means that these users can modify the configuration element, the alarm settings and use the control elements. The user numbers are coma separated.  The accepted user ids are 1,2,3,4 and 5. Ex: 1,3,4')
siteV1CfgGenericEventTableLength = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 15, 3, 601), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1CfgGenericEventTableLength.setStatus('current')
if mibBuilder.loadTexts: siteV1CfgGenericEventTableLength.setDescription('The maximum length of the table. The value must be comprised between 10 and 4000')
siteV1CfgSNMPSNMPTrapTargetsIP = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 15, 3, 611), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1CfgSNMPSNMPTrapTargetsIP.setStatus('current')
if mibBuilder.loadTexts: siteV1CfgSNMPSNMPTrapTargetsIP.setDescription('One or multiple target IP to send traps, coma separated. Ex: 130.145.23.1, 130.23.12.45')
siteV1CfgSNMPMinimalEventSeverityForTraps = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 15, 3, 612), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1CfgSNMPMinimalEventSeverityForTraps.setStatus('current')
if mibBuilder.loadTexts: siteV1CfgSNMPMinimalEventSeverityForTraps.setDescription('This is the minimal severity of the event to send a SNMP trap')
siteV1CfgXMLXMLEventsPrimPostURL = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 15, 3, 651), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1CfgXMLXMLEventsPrimPostURL.setStatus('current')
if mibBuilder.loadTexts: siteV1CfgXMLXMLEventsPrimPostURL.setDescription('This is the first URL at which the events related to this equipment must be posted. The XML ETSI standard is used in the posted data content.')
siteV1CfgXMLXMLEventsPrimPostLogin = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 15, 3, 652), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1CfgXMLXMLEventsPrimPostLogin.setStatus('current')
if mibBuilder.loadTexts: siteV1CfgXMLXMLEventsPrimPostLogin.setDescription('The login which must be used when posting events to the primary server')
siteV1CfgXMLXMLEventsPrimPostPassword = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 15, 3, 653), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1CfgXMLXMLEventsPrimPostPassword.setStatus('current')
if mibBuilder.loadTexts: siteV1CfgXMLXMLEventsPrimPostPassword.setDescription('The password which must be used when posting events to the primary server')
siteV1CfgXMLXMLEventsSecPostURL = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 15, 3, 661), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1CfgXMLXMLEventsSecPostURL.setStatus('current')
if mibBuilder.loadTexts: siteV1CfgXMLXMLEventsSecPostURL.setDescription('This is the second URL at which the events related to this equipment must be posted. The XML ETSI standard is used in the posted data content. This allows having redundancy with the management server.')
siteV1CfgXMLXMLEventsSecPostLogin = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 15, 3, 662), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1CfgXMLXMLEventsSecPostLogin.setStatus('current')
if mibBuilder.loadTexts: siteV1CfgXMLXMLEventsSecPostLogin.setDescription('The login which must be used when posting events to the secondary server')
siteV1CfgXMLXMLEventsSecPostPassword = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 15, 3, 663), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1CfgXMLXMLEventsSecPostPassword.setStatus('current')
if mibBuilder.loadTexts: siteV1CfgXMLXMLEventsSecPostPassword.setDescription('The password which must be used when posting events to the secondary server')
siteV1CfgPLCNumberOfPLCData = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 15, 3, 901), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1CfgPLCNumberOfPLCData.setStatus('current')
if mibBuilder.loadTexts: siteV1CfgPLCNumberOfPLCData.setDescription("The number of PLC data. Every equipment can manage up to 30 user programmable data. Data elements are automatically added in the data table. Configuration parameters are added to set the PLC Data Name and the PLC Data Mathematical calculation. In order to use these functionalities, you need a license with the 'PLC' module")
siteV1CfgPLCNumberOfPLCAlarm = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 15, 3, 902), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1CfgPLCNumberOfPLCAlarm.setStatus('current')
if mibBuilder.loadTexts: siteV1CfgPLCNumberOfPLCAlarm.setDescription("The number of PLC alarm. Every equipment can manage up to 30 user programmable alarms. Alarm elements are automatically added in the alarm table. The alarm parameters are added to set the PLC Alarm Name and the PLC Alarm Boolean condition. In order to use these functionalities, you need a licence with the 'PLC' module")
siteV1Control = MibIdentifier((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 16))
siteV1ControlNumber = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 16, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteV1ControlNumber.setStatus('current')
if mibBuilder.loadTexts: siteV1ControlNumber.setDescription('The number of entries in the Control table related to the Site')
siteV1ControlTable = MibTable((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 16, 2), )
if mibBuilder.loadTexts: siteV1ControlTable.setStatus('current')
if mibBuilder.loadTexts: siteV1ControlTable.setDescription('The table of Control entries related to the Site')
siteV1ControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 16, 2, 1), ).setIndexNames((0, "SITE-MONITORING-MIB", "siteV1ControlIndex"))
if mibBuilder.loadTexts: siteV1ControlEntry.setStatus('current')
if mibBuilder.loadTexts: siteV1ControlEntry.setDescription('A Control entry')
siteV1ControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 16, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: siteV1ControlIndex.setStatus('current')
if mibBuilder.loadTexts: siteV1ControlIndex.setDescription('The Control entry Index')
siteV1ControlName = MibTableColumn((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 16, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteV1ControlName.setStatus('current')
if mibBuilder.loadTexts: siteV1ControlName.setDescription('The Control entry name')
siteV1ControlValue = MibTableColumn((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 16, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1ControlValue.setStatus('current')
if mibBuilder.loadTexts: siteV1ControlValue.setDescription('The Control entry value')
siteV1ControlEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 16, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: siteV1ControlEntryStatus.setStatus('current')
if mibBuilder.loadTexts: siteV1ControlEntryStatus.setDescription('The status of this table entry - not used, only for compliance')
siteV1ControlList = MibIdentifier((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 16, 3))
siteV1CtrlControllerRebootController = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 16, 3, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1CtrlControllerRebootController.setStatus('current')
if mibBuilder.loadTexts: siteV1CtrlControllerRebootController.setDescription("Writing a '1' to this control element will reboot the monitoring. Events and Records will be saved.")
siteV1CtrlControllerSaveConfAndRebootController = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 16, 3, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1CtrlControllerSaveConfAndRebootController.setStatus('current')
if mibBuilder.loadTexts: siteV1CtrlControllerSaveConfAndRebootController.setDescription("Writing a '1' to this control element will first save the actual configuration and will reboot the monitoring after.")
siteV1CtrlControllerRebootControllerWithoutSavingRecords = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 16, 3, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1CtrlControllerRebootControllerWithoutSavingRecords.setStatus('current')
if mibBuilder.loadTexts: siteV1CtrlControllerRebootControllerWithoutSavingRecords.setDescription("Writing a '1' to this control element will reboot the monitoring without saving records")
siteV1CtrlNetworkApplyNetworkConf = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 16, 3, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1CtrlNetworkApplyNetworkConf.setStatus('current')
if mibBuilder.loadTexts: siteV1CtrlNetworkApplyNetworkConf.setDescription("Writing a '1' to this control element will reconfigure the ethernet according to the Network Configuration. If you change the IP address in the config table without using this command after, the configuration is not applied.")
siteV1CtrlTimeForceSNTPTimeRefresh = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 16, 3, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1CtrlTimeForceSNTPTimeRefresh.setStatus('current')
if mibBuilder.loadTexts: siteV1CtrlTimeForceSNTPTimeRefresh.setDescription("Writing a '1' to this control element will force the monitoring to try to refresh his time with the configured SNTP Time Server.")
siteV1CtrlTimeSetLocalTime = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 16, 3, 12), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1CtrlTimeSetLocalTime.setStatus('current')
if mibBuilder.loadTexts: siteV1CtrlTimeSetLocalTime.setDescription('Writing a date and time to this control element allows to manually change the local time of the monitoring. The syntax of the date and the time is: 2007-11-19T13:02:34')
siteV1CtrlTimeSetUTCTime = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 16, 3, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1CtrlTimeSetUTCTime.setStatus('current')
if mibBuilder.loadTexts: siteV1CtrlTimeSetUTCTime.setDescription('Writing a date and time to this control element allows to manually change the UTC time of the monitoring. The syntax of the date and the time is: 2007-11-19T13:02:34')
siteV1CtrlTimeResetUptime = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 16, 3, 14), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1CtrlTimeResetUptime.setStatus('current')
if mibBuilder.loadTexts: siteV1CtrlTimeResetUptime.setDescription("Writing a '1' to this control element will reset the uptime of the monitoring.")
siteV1CtrlControllerCleanandSaveXMLUserConf = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 16, 3, 20), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1CtrlControllerCleanandSaveXMLUserConf.setStatus('current')
if mibBuilder.loadTexts: siteV1CtrlControllerCleanandSaveXMLUserConf.setDescription("Writing a '1' to this control element will remove the configuration sections related to missing equipments, than save all the configuration of all the connected equipment in a XML format. This file is read when the monitoring is starting in order to configure the monitoring. This file is also accessible trough the FTP server or can be downloaded trough the web interface.")
siteV1CtrlControllerSaveXMLUserConf = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 16, 3, 21), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1CtrlControllerSaveXMLUserConf.setStatus('current')
if mibBuilder.loadTexts: siteV1CtrlControllerSaveXMLUserConf.setDescription("Writing a '1' to this control element will save all the configuration of all the connected (or previously connected) equipment in a XML format. This file is read when the monitoring is starting in order to configure the monitoring. This file is also accessible trough the FTP server or can be downloaded trough the web interface.")
siteV1CtrlControllerSaveInventory = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 16, 3, 22), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1CtrlControllerSaveInventory.setStatus('current')
if mibBuilder.loadTexts: siteV1CtrlControllerSaveInventory.setDescription("Writing a '1' to this control element will save save the inventory in a XML format. This file is read when the monitoring is starting in order to configure the monitoring. This file is also accessible trough the FTP server or can be downloaded trough the web interface.")
siteV1CtrlDataRecordsSaveDataRecords = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 16, 3, 33), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1CtrlDataRecordsSaveDataRecords.setStatus('current')
if mibBuilder.loadTexts: siteV1CtrlDataRecordsSaveDataRecords.setDescription("Writing a '1' to this control element will force the monitoring to save all the data records. This is useful if you want to unpower the Comp@s monitoring. This function is called automatically everyday.")
siteV1CtrlDataRecordsExportDataRecordsinCSV = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 16, 3, 34), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1CtrlDataRecordsExportDataRecordsinCSV.setStatus('current')
if mibBuilder.loadTexts: siteV1CtrlDataRecordsExportDataRecordsinCSV.setDescription("Writing a '1' to this control element will force the monitoring to save all the CVS records files. The CSV files are stored in the records folder.")
siteV1CtrlDataRecordsArchiveDataRecords = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 16, 3, 35), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1CtrlDataRecordsArchiveDataRecords.setStatus('current')
if mibBuilder.loadTexts: siteV1CtrlDataRecordsArchiveDataRecords.setDescription("Writing a '1' to this control element will force the monitoring to save all the data records. This is useful if you want to unpower the Comp@s monitoring. This function is called automatically everyday.")
siteV1CtrlDataRecordsDeleteAllDataRecords = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 16, 3, 36), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1CtrlDataRecordsDeleteAllDataRecords.setStatus('current')
if mibBuilder.loadTexts: siteV1CtrlDataRecordsDeleteAllDataRecords.setDescription("Writing a '1' to this control element will force the monitoring to save all the data records. This is useful if you want to unpower the Comp@s monitoring. This function is called automatically everyday.")
siteV1CtrlControllerEmulateRecords = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 16, 3, 40), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1CtrlControllerEmulateRecords.setStatus('current')
if mibBuilder.loadTexts: siteV1CtrlControllerEmulateRecords.setDescription('NA')
siteV1CtrlControllerReloadTranslations = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 16, 3, 41), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1CtrlControllerReloadTranslations.setStatus('current')
if mibBuilder.loadTexts: siteV1CtrlControllerReloadTranslations.setDescription("Writing a '1' to this control element will reload all the csv translation files")
siteV1CtrlControllerReloadLicense = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 16, 3, 51), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1CtrlControllerReloadLicense.setStatus('current')
if mibBuilder.loadTexts: siteV1CtrlControllerReloadLicense.setDescription("Writing a '1' to this control element will reload the license file")
siteV1CtrlControllerManageFTPServer = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 16, 3, 55), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1CtrlControllerManageFTPServer.setStatus('current')
if mibBuilder.loadTexts: siteV1CtrlControllerManageFTPServer.setDescription('This Control is used to manage the FTP Server')
siteV1CtrlInventoryRemoveAbsentEquipments = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 16, 3, 61), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1CtrlInventoryRemoveAbsentEquipments.setStatus('current')
if mibBuilder.loadTexts: siteV1CtrlInventoryRemoveAbsentEquipments.setDescription('NA')
siteV1CtrlInventoryResetCANBusNode = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 16, 3, 81), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1CtrlInventoryResetCANBusNode.setStatus('current')
if mibBuilder.loadTexts: siteV1CtrlInventoryResetCANBusNode.setDescription('Writing a valid CAN bus node id to this control element will reset the correspondent device.')
siteV1CtrlInventorySaveCANOpenLSSConf = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 16, 3, 82), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1CtrlInventorySaveCANOpenLSSConf.setStatus('current')
if mibBuilder.loadTexts: siteV1CtrlInventorySaveCANOpenLSSConf.setDescription('NA')
siteV1CtrlInventoryStartNewInventory = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 16, 3, 83), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1CtrlInventoryStartNewInventory.setStatus('current')
if mibBuilder.loadTexts: siteV1CtrlInventoryStartNewInventory.setDescription('NA')
siteV1CtrlInventoryUpgradeNodeFirmware = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 16, 3, 91), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1CtrlInventoryUpgradeNodeFirmware.setStatus('current')
if mibBuilder.loadTexts: siteV1CtrlInventoryUpgradeNodeFirmware.setDescription("This control element is used to start the firmware upgrade of a CAN bus Node. You need to upload first the firmware trough ftp in the /user/firmware path. Then you need to write the id number of the CAN Node, followed by a coma, followed by the file name. Example : '101,SOFT_0000030_01.txt'.")
siteV1CtrlInventoryCancelFirmwareUpgrade = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 16, 3, 92), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1CtrlInventoryCancelFirmwareUpgrade.setStatus('current')
if mibBuilder.loadTexts: siteV1CtrlInventoryCancelFirmwareUpgrade.setDescription('This control element is used to cancel the running firmware upgrade of a CAN bus Node.')
siteV1CtrlFilesFlashBinary = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 16, 3, 103), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1CtrlFilesFlashBinary.setStatus('current')
if mibBuilder.loadTexts: siteV1CtrlFilesFlashBinary.setDescription('This control element is used to start a binary flash update. You need to upload first the firmware trough ftp in the /user/firmware path.')
siteV1CtrlFilesDownloadFileFromUrl = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 16, 3, 110), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1CtrlFilesDownloadFileFromUrl.setStatus('current')
if mibBuilder.loadTexts: siteV1CtrlFilesDownloadFileFromUrl.setDescription('This control element is used to download a file wiht HTTP get, the argument is an url. The file is saved in the upload folder')
siteV1CtrlFilesDeleteUserUploadedFile = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 16, 3, 111), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1CtrlFilesDeleteUserUploadedFile.setStatus('current')
if mibBuilder.loadTexts: siteV1CtrlFilesDeleteUserUploadedFile.setDescription('This control element is used to delete a file in the user-upload folder. This is riskless as these files are not used, they are temporary files. ')
siteV1CtrlFilesMoveUserUploadedFile = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 16, 3, 112), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1CtrlFilesMoveUserUploadedFile.setStatus('current')
if mibBuilder.loadTexts: siteV1CtrlFilesMoveUserUploadedFile.setDescription('This control element is used to copy a file from the user-upload folder to another one. Be aware of what your are doing !')
siteV1CtrlFilesExtractZipFileinuserupload = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 16, 3, 113), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1CtrlFilesExtractZipFileinuserupload.setStatus('current')
if mibBuilder.loadTexts: siteV1CtrlFilesExtractZipFileinuserupload.setDescription('This control element is used to delete a file in the user-upload folder. This is riskless as these files are not used, they are temporary files. ')
siteV1CtrlEmailSendSummaryEmail = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 16, 3, 120), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1CtrlEmailSendSummaryEmail.setStatus('current')
if mibBuilder.loadTexts: siteV1CtrlEmailSendSummaryEmail.setDescription('This control element is used to force the sending of a summary to the configured mail address')
siteV1CtrlScriptingControlLuaScript = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 16, 3, 250), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1CtrlScriptingControlLuaScript.setStatus('current')
if mibBuilder.loadTexts: siteV1CtrlScriptingControlLuaScript.setDescription('This control element is used to control the lua scripting system. Available command are: enable[Enable Lua Capabilities], disable[Disable Lua Capabilities], restart[Restart All Lua Capabilities], refresh[Read the folder script (if you added a file when system is running)], enable filename[enable filename.lua located in folder user/scripts], disable filename[disable filename.lua located in folder user/scripts], restart filename : Restart fileName[file must be enabled], reseterrors[Reset all errors counters], reseterrors filename[Reset errors from filename')
siteV1CtrlControllerAdvancedFunctionGenericCommandExecution = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 16, 3, 300), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1CtrlControllerAdvancedFunctionGenericCommandExecution.setStatus('current')
if mibBuilder.loadTexts: siteV1CtrlControllerAdvancedFunctionGenericCommandExecution.setDescription('This control is used to perform advanced operation.')
siteV1CtrlGenericClearMyEvents = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 16, 3, 501), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1CtrlGenericClearMyEvents.setStatus('current')
if mibBuilder.loadTexts: siteV1CtrlGenericClearMyEvents.setDescription("By writing '1' to this control element, all the events of this equipment will be cleared.")
siteV1CtrlGenericClearAllEvents = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 16, 3, 502), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1CtrlGenericClearAllEvents.setStatus('current')
if mibBuilder.loadTexts: siteV1CtrlGenericClearAllEvents.setDescription("By writing '1' to this control element, all the events of this equipment and all the events of all the sub-equipments will be cleared.")
siteV1CtrlGenericAddEvent = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 16, 3, 511), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1CtrlGenericAddEvent.setStatus('current')
if mibBuilder.loadTexts: siteV1CtrlGenericAddEvent.setDescription('This control element adds an event of severity none. The event name is the text written to this control element')
siteV1CtrlGenericAddMajorEvent = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 16, 3, 512), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1CtrlGenericAddMajorEvent.setStatus('current')
if mibBuilder.loadTexts: siteV1CtrlGenericAddMajorEvent.setDescription('This control element adds an event of severity major. The event name is the text written to this control element')
siteV1CtrlGenericResetDefaultNamesAndGroups = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 16, 3, 521), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1CtrlGenericResetDefaultNamesAndGroups.setStatus('current')
if mibBuilder.loadTexts: siteV1CtrlGenericResetDefaultNamesAndGroups.setDescription('This control element resets all the element Names, Groups and Subgroups to default values for this equipment')
siteV1CtrlGenericResetDefaultNamesAndGroupsRecursive = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 16, 3, 522), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteV1CtrlGenericResetDefaultNamesAndGroupsRecursive.setStatus('current')
if mibBuilder.loadTexts: siteV1CtrlGenericResetDefaultNamesAndGroupsRecursive.setDescription('This control element resets all the element Names, Groups and Subgroups to default values for this equipment and all sub equipments')
siteV1Notifications = MibIdentifier((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 18))
siteV1NotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 18, 0))
siteV1NotificationOfEvent = NotificationType((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 18, 0, 1)).setObjects(("SITE-MONITORING-MIB", "siteV1EventId"), ("SITE-MONITORING-MIB", "siteV1EventName"), ("SITE-MONITORING-MIB", "siteV1EventDateTime"), ("SITE-MONITORING-MIB", "siteV1EventSeverityType"), ("SITE-MONITORING-MIB", "siteV1EventSeverityLevel"), ("SITE-MONITORING-MIB", "siteV1AlarmSummary"))
if mibBuilder.loadTexts: siteV1NotificationOfEvent.setStatus('current')
if mibBuilder.loadTexts: siteV1NotificationOfEvent.setDescription('Notification generated when a new event appears')
siteV1Compliance = MibIdentifier((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 19))
siteV1ComplianceGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 19, 1))
siteV1FullCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 19, 2)).setObjects(("SITE-MONITORING-MIB", "siteV1GlobalGroup"), ("SITE-MONITORING-MIB", "siteV1NotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    siteV1FullCompliance = siteV1FullCompliance.setStatus('current')
if mibBuilder.loadTexts: siteV1FullCompliance.setDescription(' The compliance statement for SNMPV2 entities which implement the SNMPV2 MIB. ')
siteV1GlobalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 19, 1, 1)).setObjects(("SITE-MONITORING-MIB", "siteV1GlobalStatus"), ("SITE-MONITORING-MIB", "siteV1GlobalAlarmSeverityType"), ("SITE-MONITORING-MIB", "siteV1GlobalAlarmSeverityLevel"), ("SITE-MONITORING-MIB", "siteV1GlobalAlarmSeverityTypeInt"), ("SITE-MONITORING-MIB", "siteV1DescriptionNumber"), ("SITE-MONITORING-MIB", "siteV1DescriptionName"), ("SITE-MONITORING-MIB", "siteV1DescriptionValue"), ("SITE-MONITORING-MIB", "siteV1DescriptionEntryStatus"), ("SITE-MONITORING-MIB", "siteV1DescDescriptionSiteNumber"), ("SITE-MONITORING-MIB", "siteV1DescDescriptionSiteName"), ("SITE-MONITORING-MIB", "siteV1DescDescriptionShortDescription"), ("SITE-MONITORING-MIB", "siteV1DescDescriptionInfo"), ("SITE-MONITORING-MIB", "siteV1DescDescriptionDescription"), ("SITE-MONITORING-MIB", "siteV1DescDescriptionReference"), ("SITE-MONITORING-MIB", "siteV1DescDescriptionContactName"), ("SITE-MONITORING-MIB", "siteV1DescDescriptionPhoneNumber"), ("SITE-MONITORING-MIB", "siteV1DescDescriptionStreet"), ("SITE-MONITORING-MIB", "siteV1DescDescriptionCity"), ("SITE-MONITORING-MIB", "siteV1DescDescriptionProvince"), ("SITE-MONITORING-MIB", "siteV1DescDescriptionPostalCode"), ("SITE-MONITORING-MIB", "siteV1DescDescriptionRegion"), ("SITE-MONITORING-MIB", "siteV1DescDescriptionCountry"), ("SITE-MONITORING-MIB", "siteV1DescDescriptionGroup1"), ("SITE-MONITORING-MIB", "siteV1DescDescriptionGroup2"), ("SITE-MONITORING-MIB", "siteV1DescDescriptionGroup3"), ("SITE-MONITORING-MIB", "siteV1DescDescriptionGroup4"), ("SITE-MONITORING-MIB", "siteV1DescDescriptionGroup5"), ("SITE-MONITORING-MIB", "siteV1DescDescriptionLatitude"), ("SITE-MONITORING-MIB", "siteV1DescDescriptionLongitude"), ("SITE-MONITORING-MIB", "siteV1DescDescriptionAltitude"), ("SITE-MONITORING-MIB", "siteV1DescControllerSoftwareRevision"), ("SITE-MONITORING-MIB", "siteV1DescControllerOperatingSystemRevision"), ("SITE-MONITORING-MIB", "siteV1DescControllerCPU"), ("SITE-MONITORING-MIB", "siteV1DescControllerCard"), ("SITE-MONITORING-MIB", "siteV1DescControllerStarterVersion"), ("SITE-MONITORING-MIB", "siteV1DescControllerFactoryCompasVersion"), ("SITE-MONITORING-MIB", "siteV1DescControllerUserCompasVersion"), ("SITE-MONITORING-MIB", "siteV1DescControllerFactoryFTPServerVersion"), ("SITE-MONITORING-MIB", "siteV1DescControllerUserFTPServerVersion"), ("SITE-MONITORING-MIB", "siteV1AlarmNumber"), ("SITE-MONITORING-MIB", "siteV1AlarmName"), ("SITE-MONITORING-MIB", "siteV1AlarmActive"), ("SITE-MONITORING-MIB", "siteV1AlarmSeverityType"), ("SITE-MONITORING-MIB", "siteV1AlarmSeverityLevel"), ("SITE-MONITORING-MIB", "siteV1AlarmStartTime"), ("SITE-MONITORING-MIB", "siteV1AlarmStopTime"), ("SITE-MONITORING-MIB", "siteV1AlarmEntryStatus"), ("SITE-MONITORING-MIB", "siteV1AlarmSummary"), ("SITE-MONITORING-MIB", "siteV1EventNumber"), ("SITE-MONITORING-MIB", "siteV1EventId"), ("SITE-MONITORING-MIB", "siteV1EventName"), ("SITE-MONITORING-MIB", "siteV1EventDateTime"), ("SITE-MONITORING-MIB", "siteV1EventSeverityType"), ("SITE-MONITORING-MIB", "siteV1EventSeverityLevel"), ("SITE-MONITORING-MIB", "siteV1EventEntryStatus"), ("SITE-MONITORING-MIB", "siteV1DataNumber"), ("SITE-MONITORING-MIB", "siteV1DataName"), ("SITE-MONITORING-MIB", "siteV1DataValue"), ("SITE-MONITORING-MIB", "siteV1DataEntryStatus"), ("SITE-MONITORING-MIB", "siteV1DataNetworkCurrentIPAddress"), ("SITE-MONITORING-MIB", "siteV1DataNetworkCurrentIPMask"), ("SITE-MONITORING-MIB", "siteV1DataNetworkCurrentMACAddress"), ("SITE-MONITORING-MIB", "siteV1DataControllerLicensedOptions"), ("SITE-MONITORING-MIB", "siteV1DataTimeDateAndTimeLocal"), ("SITE-MONITORING-MIB", "siteV1DataTimeDateAndTimeUTC"), ("SITE-MONITORING-MIB", "siteV1DataControllerMonitoringMemoryUsed"), ("SITE-MONITORING-MIB", "siteV1DataControllerCPUPercentageUsage"), ("SITE-MONITORING-MIB", "siteV1DataControllerFreeFlashMemorySpace"), ("SITE-MONITORING-MIB", "siteV1DataControllerFTPServerStatus"), ("SITE-MONITORING-MIB", "siteV1DataDataRecordsTotalFifoSizeOfSecondRecords"), ("SITE-MONITORING-MIB", "siteV1DataDataRecordsTotalFifoSizeOfMinuteRecords"), ("SITE-MONITORING-MIB", "siteV1DataDataRecordsTotalFifoSizeOfHourRecords"), ("SITE-MONITORING-MIB", "siteV1DataDataRecordsTotalFifoSizeOfDayRecords"), ("SITE-MONITORING-MIB", "siteV1DataInventoryCANBusNodeIDs"), ("SITE-MONITORING-MIB", "siteV1DataCloudLinkCloudLinkState"), ("SITE-MONITORING-MIB", "siteV1ConfigNumber"), ("SITE-MONITORING-MIB", "siteV1ConfigName"), ("SITE-MONITORING-MIB", "siteV1ConfigValue"), ("SITE-MONITORING-MIB", "siteV1ConfigEntryStatus"), ("SITE-MONITORING-MIB", "siteV1CfgNetworkDHCPEnabled"), ("SITE-MONITORING-MIB", "siteV1CfgNetworkIPAddressIfStatic"), ("SITE-MONITORING-MIB", "siteV1CfgNetworkSubnetMaskIfStatic"), ("SITE-MONITORING-MIB", "siteV1CfgNetworkDefaultGatewayIfStatic"), ("SITE-MONITORING-MIB", "siteV1CfgNetworkDNSIfStatic"), ("SITE-MONITORING-MIB", "siteV1CfgNetworkMaxTransmissionUnit"), ("SITE-MONITORING-MIB", "siteV1CfgTimeSNTPTimeServer"), ("SITE-MONITORING-MIB", "siteV1CfgTimeTimeZoneName"), ("SITE-MONITORING-MIB", "siteV1CfgTimeSNTPTimeRefresh"), ("SITE-MONITORING-MIB", "siteV1CfgTimeSNTPTimeRecoveryRefresh"), ("SITE-MONITORING-MIB", "siteV1CfgWebServerWebServerSecurityEnabled"), ("SITE-MONITORING-MIB", "siteV1CfgWebServerWebServerPort"), ("SITE-MONITORING-MIB", "siteV1CfgWebServerWebAuthenticationMethod"), ("SITE-MONITORING-MIB", "siteV1CfgWebServerHttpsWebServerPort"), ("SITE-MONITORING-MIB", "siteV1CfgWebServerDefaultPage"), ("SITE-MONITORING-MIB", "siteV1CfgXMLXMLEventPostingActivated"), ("SITE-MONITORING-MIB", "siteV1CfgXMLXMLEventPostingRefreshTime"), ("SITE-MONITORING-MIB", "siteV1CfgXMLXMLEventPostingTimeout"), ("SITE-MONITORING-MIB", "siteV1CfgXMLXMLEventPostingToSecOnlyIfPrimFail"), ("SITE-MONITORING-MIB", "siteV1CfgXMLXMLTablesToPostOnXMLEvent"), ("SITE-MONITORING-MIB", "siteV1CfgXMLXMLHeartbeatTime"), ("SITE-MONITORING-MIB", "siteV1CfgSNMPSNMPActivated"), ("SITE-MONITORING-MIB", "siteV1CfgSNMPSNMPTrapVersion"), ("SITE-MONITORING-MIB", "siteV1CfgSNMPSNMPGETMinSecurityLevel"), ("SITE-MONITORING-MIB", "siteV1CfgSNMPSNMPSETMinSecurityLevel"), ("SITE-MONITORING-MIB", "siteV1CfgSNMPSNMPV3AuthAlgorithm"), ("SITE-MONITORING-MIB", "siteV1CfgSNMPSNMPV3PrivacyAlgorithm"), ("SITE-MONITORING-MIB", "siteV1CfgSNMPSNMPV3PrivacyPassword"), ("SITE-MONITORING-MIB", "siteV1CfgSNMPSNMPV3EngineID"), ("SITE-MONITORING-MIB", "siteV1CfgSNMPSNMPV3TrapAuthAlgorithm"), ("SITE-MONITORING-MIB", "siteV1CfgSNMPSNMPV3TrapPrivacyAlgorithm"), ("SITE-MONITORING-MIB", "siteV1CfgSNMPSNMPV3TrapUsername"), ("SITE-MONITORING-MIB", "siteV1CfgSNMPSNMPV3TrapAuthPassword"), ("SITE-MONITORING-MIB", "siteV1CfgSNMPSNMPV3TrapPrivacyPassword"), ("SITE-MONITORING-MIB", "siteV1CfgSNMPSiteDescriptionIdsIncludedInTraps"), ("SITE-MONITORING-MIB", "siteV1CfgGenericGenerateEventOnConfChanges"), ("SITE-MONITORING-MIB", "siteV1CfgDataRecordsAutoArchivePeriodDataRecord"), ("SITE-MONITORING-MIB", "siteV1CfgGenericGenerateEventOnControlExecution"), ("SITE-MONITORING-MIB", "siteV1CfgGenericGenerateEventOnAlarmAcknowledge"), ("SITE-MONITORING-MIB", "siteV1CfgInventoryRequiredCANBusNodeIDs"), ("SITE-MONITORING-MIB", "siteV1CfgInventoryLSSCANidrange"), ("SITE-MONITORING-MIB", "siteV1CfgInventorySystemNodesDefinition"), ("SITE-MONITORING-MIB", "siteV1CfgInventoryLSSCANOpenSavedConf"), ("SITE-MONITORING-MIB", "siteV1CfgUsersAdministratorLoginPassword"), ("SITE-MONITORING-MIB", "siteV1CfgUsersUser1LoginPassword"), ("SITE-MONITORING-MIB", "siteV1CfgUsersUser2LoginPassword"), ("SITE-MONITORING-MIB", "siteV1CfgUsersUser3LoginPassword"), ("SITE-MONITORING-MIB", "siteV1CfgUsersUser4LoginPassword"), ("SITE-MONITORING-MIB", "siteV1CfgUsersUser5LoginPassword"), ("SITE-MONITORING-MIB", "siteV1CfgRadiusAuthenticationRadiusServer"), ("SITE-MONITORING-MIB", "siteV1CfgRadiusAuthenticationRadiusPort"), ("SITE-MONITORING-MIB", "siteV1CfgRadiusAuthenticationRadiusSecret"), ("SITE-MONITORING-MIB", "siteV1CfgEmailEnableEmailFeature"), ("SITE-MONITORING-MIB", "siteV1CfgEmailSmtpServer"), ("SITE-MONITORING-MIB", "siteV1CfgEmailSmtpDomain"), ("SITE-MONITORING-MIB", "siteV1CfgEmailSmtpUserLoginPassword"), ("SITE-MONITORING-MIB", "siteV1CfgEmailMailSender"), ("SITE-MONITORING-MIB", "siteV1CfgEmailMailRecipients"), ("SITE-MONITORING-MIB", "siteV1CfgEmailMinimalSeverityTypeToSendMail"), ("SITE-MONITORING-MIB", "siteV1CfgControllerAutomaticReboot"), ("SITE-MONITORING-MIB", "siteV1CfgCloudLinkCloudEnabled"), ("SITE-MONITORING-MIB", "siteV1CfgCloudLinkCloudServer"), ("SITE-MONITORING-MIB", "siteV1CfgCloudLinkCloudPort"), ("SITE-MONITORING-MIB", "siteV1CfgCloudLinkCloudCredential"), ("SITE-MONITORING-MIB", "siteV1CfgCloudLinkCloudCluster"), ("SITE-MONITORING-MIB", "siteV1CfgInventoryRS485ExtensionsConf"), ("SITE-MONITORING-MIB", "siteV1CfgInventoryEthernetExtensionsConf"), ("SITE-MONITORING-MIB", "siteV1CfgScriptingEnabledscripts"), ("SITE-MONITORING-MIB", "siteV1CfgScriptingNumberofErrorsbeforetriggeringalarm"), ("SITE-MONITORING-MIB", "siteV1CfgGenericReadAccessUserNumbers"), ("SITE-MONITORING-MIB", "siteV1CfgGenericWriteAccessUserNumbers"), ("SITE-MONITORING-MIB", "siteV1CfgGenericEventTableLength"), ("SITE-MONITORING-MIB", "siteV1CfgSNMPSNMPTrapTargetsIP"), ("SITE-MONITORING-MIB", "siteV1CfgSNMPMinimalEventSeverityForTraps"), ("SITE-MONITORING-MIB", "siteV1CfgXMLXMLEventsPrimPostURL"), ("SITE-MONITORING-MIB", "siteV1CfgXMLXMLEventsPrimPostLogin"), ("SITE-MONITORING-MIB", "siteV1CfgXMLXMLEventsPrimPostPassword"), ("SITE-MONITORING-MIB", "siteV1CfgXMLXMLEventsSecPostURL"), ("SITE-MONITORING-MIB", "siteV1CfgXMLXMLEventsSecPostLogin"), ("SITE-MONITORING-MIB", "siteV1CfgXMLXMLEventsSecPostPassword"), ("SITE-MONITORING-MIB", "siteV1CfgPLCNumberOfPLCData"), ("SITE-MONITORING-MIB", "siteV1CfgPLCNumberOfPLCAlarm"), ("SITE-MONITORING-MIB", "siteV1ControlNumber"), ("SITE-MONITORING-MIB", "siteV1ControlName"), ("SITE-MONITORING-MIB", "siteV1ControlValue"), ("SITE-MONITORING-MIB", "siteV1ControlEntryStatus"), ("SITE-MONITORING-MIB", "siteV1CtrlControllerRebootController"), ("SITE-MONITORING-MIB", "siteV1CtrlControllerSaveConfAndRebootController"), ("SITE-MONITORING-MIB", "siteV1CtrlControllerRebootControllerWithoutSavingRecords"), ("SITE-MONITORING-MIB", "siteV1CtrlNetworkApplyNetworkConf"), ("SITE-MONITORING-MIB", "siteV1CtrlTimeForceSNTPTimeRefresh"), ("SITE-MONITORING-MIB", "siteV1CtrlTimeSetLocalTime"), ("SITE-MONITORING-MIB", "siteV1CtrlTimeSetUTCTime"), ("SITE-MONITORING-MIB", "siteV1CtrlTimeResetUptime"), ("SITE-MONITORING-MIB", "siteV1CtrlControllerCleanandSaveXMLUserConf"), ("SITE-MONITORING-MIB", "siteV1CtrlControllerSaveXMLUserConf"), ("SITE-MONITORING-MIB", "siteV1CtrlControllerSaveInventory"), ("SITE-MONITORING-MIB", "siteV1CtrlDataRecordsSaveDataRecords"), ("SITE-MONITORING-MIB", "siteV1CtrlDataRecordsExportDataRecordsinCSV"), ("SITE-MONITORING-MIB", "siteV1CtrlDataRecordsArchiveDataRecords"), ("SITE-MONITORING-MIB", "siteV1CtrlDataRecordsDeleteAllDataRecords"), ("SITE-MONITORING-MIB", "siteV1CtrlControllerEmulateRecords"), ("SITE-MONITORING-MIB", "siteV1CtrlControllerReloadTranslations"), ("SITE-MONITORING-MIB", "siteV1CtrlControllerReloadLicense"), ("SITE-MONITORING-MIB", "siteV1CtrlControllerManageFTPServer"), ("SITE-MONITORING-MIB", "siteV1CtrlInventoryRemoveAbsentEquipments"), ("SITE-MONITORING-MIB", "siteV1CtrlInventoryResetCANBusNode"), ("SITE-MONITORING-MIB", "siteV1CtrlInventorySaveCANOpenLSSConf"), ("SITE-MONITORING-MIB", "siteV1CtrlInventoryStartNewInventory"), ("SITE-MONITORING-MIB", "siteV1CtrlInventoryUpgradeNodeFirmware"), ("SITE-MONITORING-MIB", "siteV1CtrlInventoryCancelFirmwareUpgrade"), ("SITE-MONITORING-MIB", "siteV1CtrlFilesFlashBinary"), ("SITE-MONITORING-MIB", "siteV1CtrlFilesDownloadFileFromUrl"), ("SITE-MONITORING-MIB", "siteV1CtrlFilesDeleteUserUploadedFile"), ("SITE-MONITORING-MIB", "siteV1CtrlFilesMoveUserUploadedFile"), ("SITE-MONITORING-MIB", "siteV1CtrlFilesExtractZipFileinuserupload"), ("SITE-MONITORING-MIB", "siteV1CtrlEmailSendSummaryEmail"), ("SITE-MONITORING-MIB", "siteV1CtrlScriptingControlLuaScript"), ("SITE-MONITORING-MIB", "siteV1CtrlControllerAdvancedFunctionGenericCommandExecution"), ("SITE-MONITORING-MIB", "siteV1CtrlGenericClearMyEvents"), ("SITE-MONITORING-MIB", "siteV1CtrlGenericClearAllEvents"), ("SITE-MONITORING-MIB", "siteV1CtrlGenericAddEvent"), ("SITE-MONITORING-MIB", "siteV1CtrlGenericAddMajorEvent"), ("SITE-MONITORING-MIB", "siteV1CtrlGenericResetDefaultNamesAndGroups"), ("SITE-MONITORING-MIB", "siteV1CtrlGenericResetDefaultNamesAndGroupsRecursive"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    siteV1GlobalGroup = siteV1GlobalGroup.setStatus('current')
if mibBuilder.loadTexts: siteV1GlobalGroup.setDescription('text')
siteV1NotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 19, 1, 2)).setObjects(("SITE-MONITORING-MIB", "siteV1NotificationOfEvent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    siteV1NotificationGroup = siteV1NotificationGroup.setStatus('current')
if mibBuilder.loadTexts: siteV1NotificationGroup.setDescription('text')
energySystems = MibIdentifier((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20))
es1 = MibIdentifier((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1))
es1GlobalStatus = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1GlobalStatus.setStatus('current')
if mibBuilder.loadTexts: es1GlobalStatus.setDescription('A textual string (alarms, normal or unknown) containing the status of the Energy System')
es1GlobalAlarmSeverityType = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1GlobalAlarmSeverityType.setStatus('current')
if mibBuilder.loadTexts: es1GlobalAlarmSeverityType.setDescription('The alarm severity type (critical, major, minor, warning, none, disabled) of the Energy System')
es1GlobalAlarmSeverityLevel = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1GlobalAlarmSeverityLevel.setStatus('current')
if mibBuilder.loadTexts: es1GlobalAlarmSeverityLevel.setDescription('The alarm severity level (0-9) of the Energy System')
es1GlobalAlarmSeverityTypeInt = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1GlobalAlarmSeverityTypeInt.setStatus('current')
if mibBuilder.loadTexts: es1GlobalAlarmSeverityTypeInt.setDescription('The alarm severity type as integer (critical=4, major=3, minor=2, warning=1, none=0) of the Energy System')
es1Description = MibIdentifier((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 10))
es1DescriptionNumber = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 10, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1DescriptionNumber.setStatus('current')
if mibBuilder.loadTexts: es1DescriptionNumber.setDescription('The number of entries in the Energy System Description table')
es1DescriptionTable = MibTable((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 10, 2), )
if mibBuilder.loadTexts: es1DescriptionTable.setStatus('current')
if mibBuilder.loadTexts: es1DescriptionTable.setDescription('The Description table of the Energy System')
es1DescriptionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 10, 2, 1), ).setIndexNames((0, "SITE-MONITORING-MIB", "es1DescriptionIndex"))
if mibBuilder.loadTexts: es1DescriptionEntry.setStatus('current')
if mibBuilder.loadTexts: es1DescriptionEntry.setDescription('A Description entry')
es1DescriptionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 10, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: es1DescriptionIndex.setStatus('current')
if mibBuilder.loadTexts: es1DescriptionIndex.setDescription('Description Index')
es1DescriptionName = MibTableColumn((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 10, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1DescriptionName.setStatus('current')
if mibBuilder.loadTexts: es1DescriptionName.setDescription('Description Name')
es1DescriptionValue = MibTableColumn((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 10, 2, 1, 3), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: es1DescriptionValue.setStatus('current')
if mibBuilder.loadTexts: es1DescriptionValue.setDescription('Description Value')
es1DescriptionEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 10, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: es1DescriptionEntryStatus.setStatus('current')
if mibBuilder.loadTexts: es1DescriptionEntryStatus.setDescription('The status of this table entry')
es1DescriptionList = MibIdentifier((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 10, 3))
es1DescDescriptionDescription = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 10, 3, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es1DescDescriptionDescription.setStatus('current')
if mibBuilder.loadTexts: es1DescDescriptionDescription.setDescription('A free text zone to write a system description')
es1DescDescriptionReference = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 10, 3, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es1DescDescriptionReference.setStatus('current')
if mibBuilder.loadTexts: es1DescDescriptionReference.setDescription('A free text zone to write the customer reference of the system')
es1Alarm = MibIdentifier((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 11))
es1AlarmNumber = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 11, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1AlarmNumber.setStatus('current')
if mibBuilder.loadTexts: es1AlarmNumber.setDescription('The number of entries in the Energy System Alarm table')
es1AlarmTable = MibTable((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 11, 2), )
if mibBuilder.loadTexts: es1AlarmTable.setStatus('current')
if mibBuilder.loadTexts: es1AlarmTable.setDescription('The table of Alarm entries')
es1AlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 11, 2, 1), ).setIndexNames((0, "SITE-MONITORING-MIB", "es1AlarmIndex"))
if mibBuilder.loadTexts: es1AlarmEntry.setStatus('current')
if mibBuilder.loadTexts: es1AlarmEntry.setDescription('An alarm entry')
es1AlarmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 11, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: es1AlarmIndex.setStatus('current')
if mibBuilder.loadTexts: es1AlarmIndex.setDescription('Alarm Index')
es1AlarmName = MibTableColumn((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 11, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1AlarmName.setStatus('current')
if mibBuilder.loadTexts: es1AlarmName.setDescription('Alarm Name')
es1AlarmActive = MibTableColumn((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 11, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1AlarmActive.setStatus('current')
if mibBuilder.loadTexts: es1AlarmActive.setDescription("Is the Alarm active ? 'true' for active, 'false' for not-active")
es1AlarmSeverityType = MibTableColumn((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 11, 2, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es1AlarmSeverityType.setStatus('current')
if mibBuilder.loadTexts: es1AlarmSeverityType.setDescription('The alarm severity type (major, minor, warning, none, disabled) of this alarm entry')
es1AlarmSeverityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 11, 2, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es1AlarmSeverityLevel.setStatus('current')
if mibBuilder.loadTexts: es1AlarmSeverityLevel.setDescription('The alarm severity level (0-9) of this alarm entry')
es1AlarmStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 11, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1AlarmStartTime.setStatus('current')
if mibBuilder.loadTexts: es1AlarmStartTime.setDescription('The last start time of this alarm entry (null if never active)')
es1AlarmStopTime = MibTableColumn((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 11, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1AlarmStopTime.setStatus('current')
if mibBuilder.loadTexts: es1AlarmStopTime.setDescription('The last stop time of this alarm entry (null if alarm active)')
es1AlarmEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 11, 2, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: es1AlarmEntryStatus.setStatus('current')
if mibBuilder.loadTexts: es1AlarmEntryStatus.setDescription('The status of this table entry - not used, only for MIB compliance ')
es1AlarmSummary = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 11, 3), Bits().clone(namedValues=NamedValues(("none", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1AlarmSummary.setStatus('current')
if mibBuilder.loadTexts: es1AlarmSummary.setDescription("Summary bit vector with all the alarms state of the Energy System. A '1' means alarm active, '0' means not active. Unimplemented alarms are always '0'.")
es1Event = MibIdentifier((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 12))
es1EventNumber = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 12, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1EventNumber.setStatus('current')
if mibBuilder.loadTexts: es1EventNumber.setDescription('The number of entries in the Event Table related to the Energy System')
es1EventTable = MibTable((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 12, 2), )
if mibBuilder.loadTexts: es1EventTable.setStatus('current')
if mibBuilder.loadTexts: es1EventTable.setDescription('The Event table related to the Energy System')
es1EventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 12, 2, 1), ).setIndexNames((0, "SITE-MONITORING-MIB", "es1EventIndex"))
if mibBuilder.loadTexts: es1EventEntry.setStatus('current')
if mibBuilder.loadTexts: es1EventEntry.setDescription('.')
es1EventIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 12, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: es1EventIndex.setStatus('current')
if mibBuilder.loadTexts: es1EventIndex.setDescription('Event Index')
es1EventId = MibTableColumn((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 12, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1EventId.setStatus('current')
if mibBuilder.loadTexts: es1EventId.setDescription('Event Index')
es1EventName = MibTableColumn((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 12, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1EventName.setStatus('current')
if mibBuilder.loadTexts: es1EventName.setDescription('Event Name')
es1EventDateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 12, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1EventDateTime.setStatus('current')
if mibBuilder.loadTexts: es1EventDateTime.setDescription('The date and time of the event')
es1EventSeverityType = MibTableColumn((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 12, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1EventSeverityType.setStatus('current')
if mibBuilder.loadTexts: es1EventSeverityType.setDescription("The event severity type ('major', 'minor', 'warning' or 'none')")
es1EventSeverityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 12, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1EventSeverityLevel.setStatus('current')
if mibBuilder.loadTexts: es1EventSeverityLevel.setDescription('The event severity level (0-9)')
es1EventEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 12, 2, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: es1EventEntryStatus.setStatus('current')
if mibBuilder.loadTexts: es1EventEntryStatus.setDescription('The status of this table entry')
es1Data = MibIdentifier((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 13))
es1DataNumber = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 13, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1DataNumber.setStatus('current')
if mibBuilder.loadTexts: es1DataNumber.setDescription('The number of entries in the Data Table related to the Energy System')
es1Config = MibIdentifier((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 15))
es1ConfigNumber = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 15, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1ConfigNumber.setStatus('current')
if mibBuilder.loadTexts: es1ConfigNumber.setDescription('The number of entries in the Config table related to the Energy System')
es1ConfigTable = MibTable((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 15, 2), )
if mibBuilder.loadTexts: es1ConfigTable.setStatus('current')
if mibBuilder.loadTexts: es1ConfigTable.setDescription('The table of Config entries related to the Energy System')
es1ConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 15, 2, 1), ).setIndexNames((0, "SITE-MONITORING-MIB", "es1ConfigIndex"))
if mibBuilder.loadTexts: es1ConfigEntry.setStatus('current')
if mibBuilder.loadTexts: es1ConfigEntry.setDescription('A Config entry')
es1ConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 15, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: es1ConfigIndex.setStatus('current')
if mibBuilder.loadTexts: es1ConfigIndex.setDescription('The Config entry Index')
es1ConfigName = MibTableColumn((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 15, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1ConfigName.setStatus('current')
if mibBuilder.loadTexts: es1ConfigName.setDescription('The Config entry name')
es1ConfigValue = MibTableColumn((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 15, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es1ConfigValue.setStatus('current')
if mibBuilder.loadTexts: es1ConfigValue.setDescription('The Config entry value')
es1ConfigEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 15, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: es1ConfigEntryStatus.setStatus('current')
if mibBuilder.loadTexts: es1ConfigEntryStatus.setDescription('The status of this table entry - not used, only for compliance')
es1ConfigList = MibIdentifier((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 15, 3))
es1CfgEnergyMeterNumberOfGenericPulseEnergyCounter = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 15, 3, 100), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es1CfgEnergyMeterNumberOfGenericPulseEnergyCounter.setStatus('current')
if mibBuilder.loadTexts: es1CfgEnergyMeterNumberOfGenericPulseEnergyCounter.setDescription('NA')
es1Control = MibIdentifier((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 16))
es1ControlNumber = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 16, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1ControlNumber.setStatus('current')
if mibBuilder.loadTexts: es1ControlNumber.setDescription('The number of entries in the Control table related to the Energy System')
es1ControlTable = MibTable((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 16, 2), )
if mibBuilder.loadTexts: es1ControlTable.setStatus('current')
if mibBuilder.loadTexts: es1ControlTable.setDescription('The table of Control entries related to the Energy System')
es1ControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 16, 2, 1), ).setIndexNames((0, "SITE-MONITORING-MIB", "es1ControlIndex"))
if mibBuilder.loadTexts: es1ControlEntry.setStatus('current')
if mibBuilder.loadTexts: es1ControlEntry.setDescription('A Control entry')
es1ControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 16, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: es1ControlIndex.setStatus('current')
if mibBuilder.loadTexts: es1ControlIndex.setDescription('The Control entry Index')
es1ControlName = MibTableColumn((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 16, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1ControlName.setStatus('current')
if mibBuilder.loadTexts: es1ControlName.setDescription('The Control entry name')
es1ControlValue = MibTableColumn((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 16, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es1ControlValue.setStatus('current')
if mibBuilder.loadTexts: es1ControlValue.setDescription('The Control entry value')
es1ControlEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 16, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: es1ControlEntryStatus.setStatus('current')
if mibBuilder.loadTexts: es1ControlEntryStatus.setDescription('The status of this table entry - not used, only for compliance')
es1ControlList = MibIdentifier((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 16, 3))
es1CtrlGenericClearMyEvents = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 16, 3, 501), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es1CtrlGenericClearMyEvents.setStatus('current')
if mibBuilder.loadTexts: es1CtrlGenericClearMyEvents.setDescription("By writing '1' to this control element, all the events of this equipment will be cleared.")
es1CtrlGenericClearAllEvents = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 16, 3, 502), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es1CtrlGenericClearAllEvents.setStatus('current')
if mibBuilder.loadTexts: es1CtrlGenericClearAllEvents.setDescription("By writing '1' to this control element, all the events of this equipment and all the events of all the sub-equipments will be cleared.")
es1CtrlGenericAddEvent = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 16, 3, 511), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es1CtrlGenericAddEvent.setStatus('current')
if mibBuilder.loadTexts: es1CtrlGenericAddEvent.setDescription('This control element adds an event of severity none. The event name is the text written to this control element')
es1CtrlGenericAddMajorEvent = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 16, 3, 512), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es1CtrlGenericAddMajorEvent.setStatus('current')
if mibBuilder.loadTexts: es1CtrlGenericAddMajorEvent.setDescription('This control element adds an event of severity major. The event name is the text written to this control element')
es1CtrlGenericResetDefaultNamesAndGroups = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 16, 3, 521), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es1CtrlGenericResetDefaultNamesAndGroups.setStatus('current')
if mibBuilder.loadTexts: es1CtrlGenericResetDefaultNamesAndGroups.setDescription('This control element resets all the element Names, Groups and Subgroups to default values for this equipment')
es1CtrlGenericResetDefaultNamesAndGroupsRecursive = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 16, 3, 522), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es1CtrlGenericResetDefaultNamesAndGroupsRecursive.setStatus('current')
if mibBuilder.loadTexts: es1CtrlGenericResetDefaultNamesAndGroupsRecursive.setDescription('This control element resets all the element Names, Groups and Subgroups to default values for this equipment and all sub equipments')
es1Notifications = MibIdentifier((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 18))
es1NotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 18, 0))
es1NotificationOfEvent = NotificationType((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 18, 0, 1)).setObjects(("SITE-MONITORING-MIB", "es1EventId"), ("SITE-MONITORING-MIB", "es1EventName"), ("SITE-MONITORING-MIB", "es1EventDateTime"), ("SITE-MONITORING-MIB", "es1EventSeverityType"), ("SITE-MONITORING-MIB", "es1EventSeverityLevel"), ("SITE-MONITORING-MIB", "es1AlarmSummary"))
if mibBuilder.loadTexts: es1NotificationOfEvent.setStatus('current')
if mibBuilder.loadTexts: es1NotificationOfEvent.setDescription('Notification generated when a new event appears')
es1Compliance = MibIdentifier((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 19))
es1ComplianceGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 19, 1))
es1FullCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 19, 2)).setObjects(("SITE-MONITORING-MIB", "es1GlobalGroup"), ("SITE-MONITORING-MIB", "es1NotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    es1FullCompliance = es1FullCompliance.setStatus('current')
if mibBuilder.loadTexts: es1FullCompliance.setDescription(' The compliance statement for SNMPV2 entities which implement the SNMPV2 MIB. ')
es1GlobalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 19, 1, 1)).setObjects(("SITE-MONITORING-MIB", "es1GlobalStatus"), ("SITE-MONITORING-MIB", "es1GlobalAlarmSeverityType"), ("SITE-MONITORING-MIB", "es1GlobalAlarmSeverityLevel"), ("SITE-MONITORING-MIB", "es1GlobalAlarmSeverityTypeInt"), ("SITE-MONITORING-MIB", "es1DescriptionNumber"), ("SITE-MONITORING-MIB", "es1DescriptionName"), ("SITE-MONITORING-MIB", "es1DescriptionValue"), ("SITE-MONITORING-MIB", "es1DescriptionEntryStatus"), ("SITE-MONITORING-MIB", "es1DescDescriptionDescription"), ("SITE-MONITORING-MIB", "es1DescDescriptionReference"), ("SITE-MONITORING-MIB", "es1AlarmNumber"), ("SITE-MONITORING-MIB", "es1AlarmName"), ("SITE-MONITORING-MIB", "es1AlarmActive"), ("SITE-MONITORING-MIB", "es1AlarmSeverityType"), ("SITE-MONITORING-MIB", "es1AlarmSeverityLevel"), ("SITE-MONITORING-MIB", "es1AlarmStartTime"), ("SITE-MONITORING-MIB", "es1AlarmStopTime"), ("SITE-MONITORING-MIB", "es1AlarmEntryStatus"), ("SITE-MONITORING-MIB", "es1AlarmSummary"), ("SITE-MONITORING-MIB", "es1EventNumber"), ("SITE-MONITORING-MIB", "es1EventId"), ("SITE-MONITORING-MIB", "es1EventName"), ("SITE-MONITORING-MIB", "es1EventDateTime"), ("SITE-MONITORING-MIB", "es1EventSeverityType"), ("SITE-MONITORING-MIB", "es1EventSeverityLevel"), ("SITE-MONITORING-MIB", "es1EventEntryStatus"), ("SITE-MONITORING-MIB", "es1DataNumber"), ("SITE-MONITORING-MIB", "es1ConfigNumber"), ("SITE-MONITORING-MIB", "es1ConfigName"), ("SITE-MONITORING-MIB", "es1ConfigValue"), ("SITE-MONITORING-MIB", "es1ConfigEntryStatus"), ("SITE-MONITORING-MIB", "es1CfgEnergyMeterNumberOfGenericPulseEnergyCounter"), ("SITE-MONITORING-MIB", "es1ControlNumber"), ("SITE-MONITORING-MIB", "es1ControlName"), ("SITE-MONITORING-MIB", "es1ControlValue"), ("SITE-MONITORING-MIB", "es1ControlEntryStatus"), ("SITE-MONITORING-MIB", "es1CtrlGenericClearMyEvents"), ("SITE-MONITORING-MIB", "es1CtrlGenericClearAllEvents"), ("SITE-MONITORING-MIB", "es1CtrlGenericAddEvent"), ("SITE-MONITORING-MIB", "es1CtrlGenericAddMajorEvent"), ("SITE-MONITORING-MIB", "es1CtrlGenericResetDefaultNamesAndGroups"), ("SITE-MONITORING-MIB", "es1CtrlGenericResetDefaultNamesAndGroupsRecursive"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    es1GlobalGroup = es1GlobalGroup.setStatus('current')
if mibBuilder.loadTexts: es1GlobalGroup.setDescription('text')
es1NotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 19, 1, 2)).setObjects(("SITE-MONITORING-MIB", "es1NotificationOfEvent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    es1NotificationGroup = es1NotificationGroup.setStatus('current')
if mibBuilder.loadTexts: es1NotificationGroup.setDescription('text')
es1DCSystems = MibIdentifier((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20))
es1dc1 = MibIdentifier((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1))
es1dc1GlobalStatus = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1dc1GlobalStatus.setStatus('current')
if mibBuilder.loadTexts: es1dc1GlobalStatus.setDescription('A textual string (alarms, normal or unknown) containing the status of the DC System')
es1dc1GlobalAlarmSeverityType = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1dc1GlobalAlarmSeverityType.setStatus('current')
if mibBuilder.loadTexts: es1dc1GlobalAlarmSeverityType.setDescription('The alarm severity type (critical, major, minor, warning, none, disabled) of the DC System')
es1dc1GlobalAlarmSeverityLevel = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1dc1GlobalAlarmSeverityLevel.setStatus('current')
if mibBuilder.loadTexts: es1dc1GlobalAlarmSeverityLevel.setDescription('The alarm severity level (0-9) of the DC System')
es1dc1GlobalAlarmSeverityTypeInt = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1dc1GlobalAlarmSeverityTypeInt.setStatus('current')
if mibBuilder.loadTexts: es1dc1GlobalAlarmSeverityTypeInt.setDescription('The alarm severity type as integer (critical=4, major=3, minor=2, warning=1, none=0) of the DC System')
es1dc1Description = MibIdentifier((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 10))
es1dc1DescriptionNumber = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 10, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1dc1DescriptionNumber.setStatus('current')
if mibBuilder.loadTexts: es1dc1DescriptionNumber.setDescription('The number of entries in the DC System Description table')
es1dc1DescriptionTable = MibTable((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 10, 2), )
if mibBuilder.loadTexts: es1dc1DescriptionTable.setStatus('current')
if mibBuilder.loadTexts: es1dc1DescriptionTable.setDescription('The Description table of the DC System')
es1dc1DescriptionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 10, 2, 1), ).setIndexNames((0, "SITE-MONITORING-MIB", "es1dc1DescriptionIndex"))
if mibBuilder.loadTexts: es1dc1DescriptionEntry.setStatus('current')
if mibBuilder.loadTexts: es1dc1DescriptionEntry.setDescription('A Description entry')
es1dc1DescriptionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 10, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: es1dc1DescriptionIndex.setStatus('current')
if mibBuilder.loadTexts: es1dc1DescriptionIndex.setDescription('Description Index')
es1dc1DescriptionName = MibTableColumn((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 10, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1dc1DescriptionName.setStatus('current')
if mibBuilder.loadTexts: es1dc1DescriptionName.setDescription('Description Name')
es1dc1DescriptionValue = MibTableColumn((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 10, 2, 1, 3), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: es1dc1DescriptionValue.setStatus('current')
if mibBuilder.loadTexts: es1dc1DescriptionValue.setDescription('Description Value')
es1dc1DescriptionEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 10, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: es1dc1DescriptionEntryStatus.setStatus('current')
if mibBuilder.loadTexts: es1dc1DescriptionEntryStatus.setDescription('The status of this table entry')
es1dc1DescriptionList = MibIdentifier((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 10, 3))
es1dc1DescDescriptionDescription = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 10, 3, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es1dc1DescDescriptionDescription.setStatus('current')
if mibBuilder.loadTexts: es1dc1DescDescriptionDescription.setDescription('A free text zone to write a system description')
es1dc1DescDescriptionReference = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 10, 3, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es1dc1DescDescriptionReference.setStatus('current')
if mibBuilder.loadTexts: es1dc1DescDescriptionReference.setDescription('A free text zone to write the customer reference of the system')
es1dc1DescDescriptionProductName = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 10, 3, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1dc1DescDescriptionProductName.setStatus('current')
if mibBuilder.loadTexts: es1dc1DescDescriptionProductName.setDescription('The product name of the DC system monitoring')
es1dc1DescDescriptionHardwareReference = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 10, 3, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1dc1DescDescriptionHardwareReference.setStatus('current')
if mibBuilder.loadTexts: es1dc1DescDescriptionHardwareReference.setDescription('The hardware reference of the DC system monitoring')
es1dc1DescDescriptionSoftwareReference = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 10, 3, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1dc1DescDescriptionSoftwareReference.setStatus('current')
if mibBuilder.loadTexts: es1dc1DescDescriptionSoftwareReference.setDescription('The software reference of the DC system monitoring')
es1dc1DescDescriptionSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 10, 3, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1dc1DescDescriptionSerialNumber.setStatus('current')
if mibBuilder.loadTexts: es1dc1DescDescriptionSerialNumber.setDescription('The serial number of the DC system monitoring')
es1dc1DescDescriptionManufacturingDate = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 10, 3, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1dc1DescDescriptionManufacturingDate.setStatus('current')
if mibBuilder.loadTexts: es1dc1DescDescriptionManufacturingDate.setDescription('The production date of the DC system monitoring')
es1dc1DescDescriptionDistributionModuleProductName = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 10, 3, 31), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1dc1DescDescriptionDistributionModuleProductName.setStatus('current')
if mibBuilder.loadTexts: es1dc1DescDescriptionDistributionModuleProductName.setDescription('The product name of the Electronic Distribution/LVD Module')
es1dc1DescDescriptionDistributionModuleHardwareReference = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 10, 3, 32), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1dc1DescDescriptionDistributionModuleHardwareReference.setStatus('current')
if mibBuilder.loadTexts: es1dc1DescDescriptionDistributionModuleHardwareReference.setDescription('The hardware reference of the Electronic Distribution/LVD Module')
es1dc1DescDescriptionDistributionModuleSoftwareReference = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 10, 3, 34), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1dc1DescDescriptionDistributionModuleSoftwareReference.setStatus('current')
if mibBuilder.loadTexts: es1dc1DescDescriptionDistributionModuleSoftwareReference.setDescription('The software reference of the Electronic Distribution/LVD Module')
es1dc1DescDescriptionDistributionModuleSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 10, 3, 36), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1dc1DescDescriptionDistributionModuleSerialNumber.setStatus('current')
if mibBuilder.loadTexts: es1dc1DescDescriptionDistributionModuleSerialNumber.setDescription('The serial number of the Electronic Distribution/LVD Module')
es1dc1DescDescriptionDistributionModuleManufacturingDate = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 10, 3, 38), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1dc1DescDescriptionDistributionModuleManufacturingDate.setStatus('current')
if mibBuilder.loadTexts: es1dc1DescDescriptionDistributionModuleManufacturingDate.setDescription('The manufacturing date of the Electronic Distribution/LVD Module')
es1dc1Alarm = MibIdentifier((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 11))
es1dc1AlarmNumber = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 11, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1dc1AlarmNumber.setStatus('current')
if mibBuilder.loadTexts: es1dc1AlarmNumber.setDescription('The number of entries in the DC System Alarm table')
es1dc1AlarmTable = MibTable((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 11, 2), )
if mibBuilder.loadTexts: es1dc1AlarmTable.setStatus('current')
if mibBuilder.loadTexts: es1dc1AlarmTable.setDescription('The table of Alarm entries')
es1dc1AlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 11, 2, 1), ).setIndexNames((0, "SITE-MONITORING-MIB", "es1dc1AlarmIndex"))
if mibBuilder.loadTexts: es1dc1AlarmEntry.setStatus('current')
if mibBuilder.loadTexts: es1dc1AlarmEntry.setDescription('An alarm entry')
es1dc1AlarmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 11, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: es1dc1AlarmIndex.setStatus('current')
if mibBuilder.loadTexts: es1dc1AlarmIndex.setDescription('Alarm Index')
es1dc1AlarmName = MibTableColumn((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 11, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1dc1AlarmName.setStatus('current')
if mibBuilder.loadTexts: es1dc1AlarmName.setDescription('Alarm Name')
es1dc1AlarmActive = MibTableColumn((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 11, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1dc1AlarmActive.setStatus('current')
if mibBuilder.loadTexts: es1dc1AlarmActive.setDescription("Is the Alarm active ? 'true' for active, 'false' for not-active")
es1dc1AlarmSeverityType = MibTableColumn((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 11, 2, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es1dc1AlarmSeverityType.setStatus('current')
if mibBuilder.loadTexts: es1dc1AlarmSeverityType.setDescription('The alarm severity type (major, minor, warning, none, disabled) of this alarm entry')
es1dc1AlarmSeverityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 11, 2, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es1dc1AlarmSeverityLevel.setStatus('current')
if mibBuilder.loadTexts: es1dc1AlarmSeverityLevel.setDescription('The alarm severity level (0-9) of this alarm entry')
es1dc1AlarmStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 11, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1dc1AlarmStartTime.setStatus('current')
if mibBuilder.loadTexts: es1dc1AlarmStartTime.setDescription('The last start time of this alarm entry (null if never active)')
es1dc1AlarmStopTime = MibTableColumn((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 11, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1dc1AlarmStopTime.setStatus('current')
if mibBuilder.loadTexts: es1dc1AlarmStopTime.setDescription('The last stop time of this alarm entry (null if alarm active)')
es1dc1AlarmEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 11, 2, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: es1dc1AlarmEntryStatus.setStatus('current')
if mibBuilder.loadTexts: es1dc1AlarmEntryStatus.setDescription('The status of this table entry - not used, only for MIB compliance ')
es1dc1AlarmSummary = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 11, 3), Bits().clone(namedValues=NamedValues(("dCBusDCBusExtraLow", 0), ("dCBusDCBusLow", 1), ("dCBusDCBusHigh", 2), ("dCBusDCBusExtraHigh", 3), ("dCBusDCBusVoltageSenseFail", 4), ("aCBusMainsFail", 5), ("aCBusMainsPartialFail", 6), ("aCBusMainsLow", 7), ("rectifiersOneRectifierFail", 9), ("rectifiersMoreThanOneRectifierFail", 10), ("rectifiersMissingRectifiers", 11), ("batBatLastTestFailed", 12), ("batBatOnDischarge", 13), ("lVDBatLVDRelOpen", 16), ("batBatTempTooHigh", 17), ("batBatTempTooLow", 18), ("batBatTempSensorFail", 19), ("sensorsAmbientTempTooHigh", 20), ("sensorsAmbientTempTooLow", 21), ("sensorsAmbientTempSensorFail", 22), ("digInputsDistributionBreakerOpen", 24), ("digInputsBatBreakerOpen", 25), ("digInputsDigInput1", 26), ("digInputsDigInput2", 27), ("digInputsDigInput3", 28), ("digInputsDigInput4", 29)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1dc1AlarmSummary.setStatus('current')
if mibBuilder.loadTexts: es1dc1AlarmSummary.setDescription("Summary bit vector with all the alarms state of the DC System. A '1' means alarm active, '0' means not active. Unimplemented alarms are always '0'.")
es1dc1Event = MibIdentifier((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 12))
es1dc1EventNumber = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 12, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1dc1EventNumber.setStatus('current')
if mibBuilder.loadTexts: es1dc1EventNumber.setDescription('The number of entries in the Event Table related to the DC System')
es1dc1EventTable = MibTable((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 12, 2), )
if mibBuilder.loadTexts: es1dc1EventTable.setStatus('current')
if mibBuilder.loadTexts: es1dc1EventTable.setDescription('The Event table related to the DC System')
es1dc1EventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 12, 2, 1), ).setIndexNames((0, "SITE-MONITORING-MIB", "es1dc1EventIndex"))
if mibBuilder.loadTexts: es1dc1EventEntry.setStatus('current')
if mibBuilder.loadTexts: es1dc1EventEntry.setDescription('.')
es1dc1EventIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 12, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: es1dc1EventIndex.setStatus('current')
if mibBuilder.loadTexts: es1dc1EventIndex.setDescription('Event Index')
es1dc1EventId = MibTableColumn((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 12, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1dc1EventId.setStatus('current')
if mibBuilder.loadTexts: es1dc1EventId.setDescription('Event Index')
es1dc1EventName = MibTableColumn((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 12, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1dc1EventName.setStatus('current')
if mibBuilder.loadTexts: es1dc1EventName.setDescription('Event Name')
es1dc1EventDateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 12, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1dc1EventDateTime.setStatus('current')
if mibBuilder.loadTexts: es1dc1EventDateTime.setDescription('The date and time of the event')
es1dc1EventSeverityType = MibTableColumn((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 12, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1dc1EventSeverityType.setStatus('current')
if mibBuilder.loadTexts: es1dc1EventSeverityType.setDescription("The event severity type ('major', 'minor', 'warning' or 'none')")
es1dc1EventSeverityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 12, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1dc1EventSeverityLevel.setStatus('current')
if mibBuilder.loadTexts: es1dc1EventSeverityLevel.setDescription('The event severity level (0-9)')
es1dc1EventEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 12, 2, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: es1dc1EventEntryStatus.setStatus('current')
if mibBuilder.loadTexts: es1dc1EventEntryStatus.setDescription('The status of this table entry')
es1dc1Data = MibIdentifier((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 13))
es1dc1DataNumber = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 13, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1dc1DataNumber.setStatus('current')
if mibBuilder.loadTexts: es1dc1DataNumber.setDescription('The number of entries in the Data Table related to the DC System')
es1dc1DataTable = MibTable((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 13, 2), )
if mibBuilder.loadTexts: es1dc1DataTable.setStatus('current')
if mibBuilder.loadTexts: es1dc1DataTable.setDescription('The table of Data entries')
es1dc1DataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 13, 2, 1), ).setIndexNames((0, "SITE-MONITORING-MIB", "es1dc1DataIndex"))
if mibBuilder.loadTexts: es1dc1DataEntry.setStatus('current')
if mibBuilder.loadTexts: es1dc1DataEntry.setDescription('A data entry')
es1dc1DataIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 13, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: es1dc1DataIndex.setStatus('current')
if mibBuilder.loadTexts: es1dc1DataIndex.setDescription('The data index')
es1dc1DataName = MibTableColumn((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 13, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1dc1DataName.setStatus('current')
if mibBuilder.loadTexts: es1dc1DataName.setDescription('The data name')
es1dc1DataValue = MibTableColumn((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 13, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1dc1DataValue.setStatus('current')
if mibBuilder.loadTexts: es1dc1DataValue.setDescription('The data value')
es1dc1DataEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 13, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: es1dc1DataEntryStatus.setStatus('current')
if mibBuilder.loadTexts: es1dc1DataEntryStatus.setDescription('The status of this table entry - not used, only present for compliance')
es1dc1DataList = MibIdentifier((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 13, 3))
es1dc1DataSystemDCMode = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 13, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1dc1DataSystemDCMode.setStatus('current')
if mibBuilder.loadTexts: es1dc1DataSystemDCMode.setDescription("The DC system can have 5 values: 'Float'(0), 'Equalize'(1), 'Battery Test'(2), 'Ac Failure'(3) or 'Safe'(5)")
es1dc1DataSystemPreviousDCMode = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 13, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1dc1DataSystemPreviousDCMode.setStatus('current')
if mibBuilder.loadTexts: es1dc1DataSystemPreviousDCMode.setDescription("The previous value of the DC Mode : 'Float'(0), 'Equalize'(1), 'Battery Test'(2), 'Ac Failure'(3) or 'Safe'(5)")
es1dc1DataSystemNiMHChargeMode = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 13, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1dc1DataSystemNiMHChargeMode.setStatus('current')
if mibBuilder.loadTexts: es1dc1DataSystemNiMHChargeMode.setDescription('NA')
es1dc1DataDCBusBusVoltage = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 13, 3, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1dc1DataDCBusBusVoltage.setStatus('current')
if mibBuilder.loadTexts: es1dc1DataDCBusBusVoltage.setDescription('The DC bus voltage in volt.')
es1dc1DataSystemRatioDeliveredOnAvailablePower = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 13, 3, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1dc1DataSystemRatioDeliveredOnAvailablePower.setStatus('current')
if mibBuilder.loadTexts: es1dc1DataSystemRatioDeliveredOnAvailablePower.setDescription('This is the ratio of the delivered power divided by the installed power, in %.')
es1dc1DataACBusMinutesSinceLastACFailBegin = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 13, 3, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1dc1DataACBusMinutesSinceLastACFailBegin.setStatus('current')
if mibBuilder.loadTexts: es1dc1DataACBusMinutesSinceLastACFailBegin.setDescription('The number of minute since the last AC Failure begin')
es1dc1DataACBusMinutesSinceLastACFailEnd = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 13, 3, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1dc1DataACBusMinutesSinceLastACFailEnd.setStatus('current')
if mibBuilder.loadTexts: es1dc1DataACBusMinutesSinceLastACFailEnd.setDescription('The number of minute since the last AC Failure end')
es1dc1DataRectifiersRectifiersOutPower = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 13, 3, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1dc1DataRectifiersRectifiersOutPower.setStatus('current')
if mibBuilder.loadTexts: es1dc1DataRectifiersRectifiersOutPower.setDescription('The sum of the delivered rectifier power')
es1dc1DataRectifiersRectifiersOutCurrent = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 13, 3, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1dc1DataRectifiersRectifiersOutCurrent.setStatus('current')
if mibBuilder.loadTexts: es1dc1DataRectifiersRectifiersOutCurrent.setDescription('The sum of the delivered rectifier current')
es1dc1DataRectifiersRectifiersOutPowerMax = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 13, 3, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1dc1DataRectifiersRectifiersOutPowerMax.setStatus('current')
if mibBuilder.loadTexts: es1dc1DataRectifiersRectifiersOutPowerMax.setDescription('The sum of the deliverable rectifier power')
es1dc1DataRectifiersRectifiersOutCurrentMax = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 13, 3, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1dc1DataRectifiersRectifiersOutCurrentMax.setStatus('current')
if mibBuilder.loadTexts: es1dc1DataRectifiersRectifiersOutCurrentMax.setDescription('The sum of the deliverable rectifier current')
es1dc1DataRectifiersNumberOfRectifierMax = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 13, 3, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1dc1DataRectifiersNumberOfRectifierMax.setStatus('current')
if mibBuilder.loadTexts: es1dc1DataRectifiersNumberOfRectifierMax.setDescription('The maximum possible number of rectifier in this dc system')
es1dc1DataRectifiersNumberOfPresentRectifier = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 13, 3, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1dc1DataRectifiersNumberOfPresentRectifier.setStatus('current')
if mibBuilder.loadTexts: es1dc1DataRectifiersNumberOfPresentRectifier.setDescription('The actual number of present rectifier in this dc system')
es1dc1DataRectifiersNumberOfAbsentRectifier = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 13, 3, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1dc1DataRectifiersNumberOfAbsentRectifier.setStatus('current')
if mibBuilder.loadTexts: es1dc1DataRectifiersNumberOfAbsentRectifier.setDescription('The actual number of absent rectifier in this dc system')
es1dc1DataRectifiersNumberOfActiveRectifier = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 13, 3, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1dc1DataRectifiersNumberOfActiveRectifier.setStatus('current')
if mibBuilder.loadTexts: es1dc1DataRectifiersNumberOfActiveRectifier.setDescription('The actual number of active rectifier in this dc system. An active rectifier is a rectifier which is present, DC OK, AC OK and not in remote off.')
es1dc1DataRectifiersNumberOfACFailRectifier = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 13, 3, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1dc1DataRectifiersNumberOfACFailRectifier.setStatus('current')
if mibBuilder.loadTexts: es1dc1DataRectifiersNumberOfACFailRectifier.setDescription('The actual number or rectifier in AC Failure.')
es1dc1DataRectifiersNumberOfDCFailRectifier = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 13, 3, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1dc1DataRectifiersNumberOfDCFailRectifier.setStatus('current')
if mibBuilder.loadTexts: es1dc1DataRectifiersNumberOfDCFailRectifier.setDescription('The actual number or rectifier with DC Failure.')
es1dc1DataRectifiersNumberOfRemoteOffRectifier = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 13, 3, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1dc1DataRectifiersNumberOfRemoteOffRectifier.setStatus('current')
if mibBuilder.loadTexts: es1dc1DataRectifiersNumberOfRemoteOffRectifier.setDescription('The actual number or rectifier in remote off.')
es1dc1DataRectifiersNumberOfOverTempRectifier = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 13, 3, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1dc1DataRectifiersNumberOfOverTempRectifier.setStatus('current')
if mibBuilder.loadTexts: es1dc1DataRectifiersNumberOfOverTempRectifier.setDescription('The actual number or rectifier in Over Temperature.')
es1dc1DataLoadLoadPower = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 13, 3, 51), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1dc1DataLoadLoadPower.setStatus('current')
if mibBuilder.loadTexts: es1dc1DataLoadLoadPower.setDescription('Estimation of the load power consumption')
es1dc1DataLoadLoadCurrent = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 13, 3, 52), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1dc1DataLoadLoadCurrent.setStatus('current')
if mibBuilder.loadTexts: es1dc1DataLoadLoadCurrent.setDescription('Estimation of the load current consumption')
es1dc1DataBatBatInputCurrent = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 13, 3, 61), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1dc1DataBatBatInputCurrent.setStatus('current')
if mibBuilder.loadTexts: es1dc1DataBatBatInputCurrent.setDescription('Measurement of the battery input current. A negative value means that the battery is discharging')
es1dc1DataBatBatInputPower = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 13, 3, 62), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1dc1DataBatBatInputPower.setStatus('current')
if mibBuilder.loadTexts: es1dc1DataBatBatInputPower.setDescription('Measurement of the battery input power. A negative value means that the battery is discharging')
es1dc1DataBatBatTemp = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 13, 3, 71), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1dc1DataBatBatTemp.setStatus('current')
if mibBuilder.loadTexts: es1dc1DataBatBatTemp.setDescription('The battery temperature')
es1dc1DataBatBatTestState = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 13, 3, 72), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1dc1DataBatBatTestState.setStatus('current')
if mibBuilder.loadTexts: es1dc1DataBatBatTestState.setDescription("This is about the result of the last battery test. 10 values are possible : 'Never Tested'(0), 'Success'(1), 'On Going'(2), 'Failed: Timeout'(3), 'Failed: Vbus Too Low'(4), 'Failed: Load Too Low'(5), 'Failed: Ac Failure'(6), 'Failed: Canceled' (7), 'Failed: Lvd Opened'(8), 'Failed: No Battery'(9)")
es1dc1DataBatLastBatTestDischargedCapacityRatio = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 13, 3, 73), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1dc1DataBatLastBatTestDischargedCapacityRatio.setStatus('current')
if mibBuilder.loadTexts: es1dc1DataBatLastBatTestDischargedCapacityRatio.setDescription('This is the battery capacity, in percent, discharged during the last battery test. This value is updated at the end of the battery test.')
es1dc1DataBatLastBatTestDischargedCapacity = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 13, 3, 74), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1dc1DataBatLastBatTestDischargedCapacity.setStatus('current')
if mibBuilder.loadTexts: es1dc1DataBatLastBatTestDischargedCapacity.setDescription('This is the battery capacity, in ampere hour, discharged during the last battery test. This value is updated at the end of the battery test.')
es1dc1DataBatLastBatTestFinalVoltage = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 13, 3, 75), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1dc1DataBatLastBatTestFinalVoltage.setStatus('current')
if mibBuilder.loadTexts: es1dc1DataBatLastBatTestFinalVoltage.setDescription('This is the bus voltage at the end of the last battery test. This value is updated at the end of the battery test.')
es1dc1DataBatBatTestDuration = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 13, 3, 76), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1dc1DataBatBatTestDuration.setStatus('current')
if mibBuilder.loadTexts: es1dc1DataBatBatTestDuration.setDescription("The duration of the last battery test. This value is updated at the end of the battery test. This value can't be higher than 1440 minutes (24 hours).")
es1dc1DataBatPreviousBatTestDischargedCapacityRatio = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 13, 3, 77), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1dc1DataBatPreviousBatTestDischargedCapacityRatio.setStatus('current')
if mibBuilder.loadTexts: es1dc1DataBatPreviousBatTestDischargedCapacityRatio.setDescription('This is the battery capacity, in percent, discharged during the previous battery test. This value is shifted at the end of the battery test.')
es1dc1DataBatPreviousBatTestDischargedCapacity = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 13, 3, 78), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1dc1DataBatPreviousBatTestDischargedCapacity.setStatus('current')
if mibBuilder.loadTexts: es1dc1DataBatPreviousBatTestDischargedCapacity.setDescription('This is the battery capacity, in ampere hour, discharged during the previous battery test. This value is shifted at the end of the battery test.')
es1dc1DataBatPreviousBatTestFinalVoltage = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 13, 3, 79), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1dc1DataBatPreviousBatTestFinalVoltage.setStatus('current')
if mibBuilder.loadTexts: es1dc1DataBatPreviousBatTestFinalVoltage.setDescription('This is the bus voltage at the end of the previous battery test. This value is shifted at the end of the battery test.')
es1dc1DataBatPreviousBatTestDuration = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 13, 3, 80), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1dc1DataBatPreviousBatTestDuration.setStatus('current')
if mibBuilder.loadTexts: es1dc1DataBatPreviousBatTestDuration.setDescription("The duration of the previous battery test. This value is shifted at the end of the battery test. This value can't be higher than 1440 minutes (24 hours).")
es1dc1DataBatPreviousBatTestState = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 13, 3, 81), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1dc1DataBatPreviousBatTestState.setStatus('current')
if mibBuilder.loadTexts: es1dc1DataBatPreviousBatTestState.setDescription("The result of the previous battery test - 10 values are possible: 'Never Tested'(0), 'Success'(1), 'On Going'(2), 'Failed: Timeout'(3), 'Failed: Vbus Too Low'(4), 'Failed: Load Too Low'(5), 'Failed: Ac Failure'(6), 'Failed: Canceled', 'Failed: Lvd Opened'(8), 'Failed: No Battery'(9)")
es1dc1DataBatMinutesSinceLastTestBat = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 13, 3, 82), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1dc1DataBatMinutesSinceLastTestBat.setStatus('current')
if mibBuilder.loadTexts: es1dc1DataBatMinutesSinceLastTestBat.setDescription('The number of minute since the end of last battery test')
es1dc1DataBatNextScheduledBatTest = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 13, 3, 84), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1dc1DataBatNextScheduledBatTest.setStatus('current')
if mibBuilder.loadTexts: es1dc1DataBatNextScheduledBatTest.setDescription('The date and time of the next time the scheduled battery test will run')
es1dc1DataBatBatChargeCapacity = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 13, 3, 91), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1dc1DataBatBatChargeCapacity.setStatus('current')
if mibBuilder.loadTexts: es1dc1DataBatBatChargeCapacity.setDescription('The battery charge capacity, calculated by integration of the current.')
es1dc1DataBatCalculatedAutonomy = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 13, 3, 92), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1dc1DataBatCalculatedAutonomy.setStatus('current')
if mibBuilder.loadTexts: es1dc1DataBatCalculatedAutonomy.setDescription('Calculation of the remaining autonomy. This value can change following the load of your system and the maximal depth of dicharge configuration (CF39).')
es1dc1DataBatBatCurrentIntegration = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 13, 3, 94), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1dc1DataBatBatCurrentIntegration.setStatus('current')
if mibBuilder.loadTexts: es1dc1DataBatBatCurrentIntegration.setDescription('Actual value of the integration of the current, in Ampere * hour')
es1dc1DataLVDLVDState = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 13, 3, 101), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1dc1DataLVDLVDState.setStatus('current')
if mibBuilder.loadTexts: es1dc1DataLVDLVDState.setDescription('Actual state of the LVD')
es1dc1DataRelsRel1State = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 13, 3, 111), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1dc1DataRelsRel1State.setStatus('current')
if mibBuilder.loadTexts: es1dc1DataRelsRel1State.setDescription('Actual state of the Relay 1')
es1dc1DataRelsRel2State = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 13, 3, 112), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1dc1DataRelsRel2State.setStatus('current')
if mibBuilder.loadTexts: es1dc1DataRelsRel2State.setDescription('Actual state of the Relay 2')
es1dc1DataRelsRel3State = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 13, 3, 113), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1dc1DataRelsRel3State.setStatus('current')
if mibBuilder.loadTexts: es1dc1DataRelsRel3State.setDescription('Actual state of the Relay 3')
es1dc1DataRelsRel4State = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 13, 3, 114), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1dc1DataRelsRel4State.setStatus('current')
if mibBuilder.loadTexts: es1dc1DataRelsRel4State.setDescription('Actual state of the Relay 3')
es1dc1DataSmartEnergyEfficiencyOptimizedNumberOfRectifier = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 13, 3, 121), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1dc1DataSmartEnergyEfficiencyOptimizedNumberOfRectifier.setStatus('current')
if mibBuilder.loadTexts: es1dc1DataSmartEnergyEfficiencyOptimizedNumberOfRectifier.setDescription('The optimal number of ON rectifier for Efficiency Optimization ')
es1dc1DataSmartEnergySystemLossWithoutOptimisation = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 13, 3, 122), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1dc1DataSmartEnergySystemLossWithoutOptimisation.setStatus('current')
if mibBuilder.loadTexts: es1dc1DataSmartEnergySystemLossWithoutOptimisation.setDescription('Estimation of the losses without optimisation')
es1dc1DataSmartEnergySystemLossWithOptimisation = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 13, 3, 123), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1dc1DataSmartEnergySystemLossWithOptimisation.setStatus('current')
if mibBuilder.loadTexts: es1dc1DataSmartEnergySystemLossWithOptimisation.setDescription('Estimation of the losses with optimisation')
es1dc1DataSmartEnergyRectifierModelUsedForCalculation = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 13, 3, 124), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1dc1DataSmartEnergyRectifierModelUsedForCalculation.setStatus('current')
if mibBuilder.loadTexts: es1dc1DataSmartEnergyRectifierModelUsedForCalculation.setDescription('The rectifier model used')
es1dc1DataSmartEnergySmartEnergySavings = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 13, 3, 125), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1dc1DataSmartEnergySmartEnergySavings.setStatus('current')
if mibBuilder.loadTexts: es1dc1DataSmartEnergySmartEnergySavings.setDescription('Estimation of the losses with optimisation')
es1dc1DataSensorsAmbientTemp = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 13, 3, 151), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1dc1DataSensorsAmbientTemp.setStatus('current')
if mibBuilder.loadTexts: es1dc1DataSensorsAmbientTemp.setDescription('The ambiant temperature (second temperature sense)')
es1dc1DataSensorsPulseCounter4 = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 13, 3, 204), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1dc1DataSensorsPulseCounter4.setStatus('current')
if mibBuilder.loadTexts: es1dc1DataSensorsPulseCounter4.setDescription('The counter value of the digital input 4.')
es1dc1Config = MibIdentifier((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 15))
es1dc1ConfigNumber = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 15, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1dc1ConfigNumber.setStatus('current')
if mibBuilder.loadTexts: es1dc1ConfigNumber.setDescription('The number of entries in the Config table related to the DC System')
es1dc1ConfigTable = MibTable((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 15, 2), )
if mibBuilder.loadTexts: es1dc1ConfigTable.setStatus('current')
if mibBuilder.loadTexts: es1dc1ConfigTable.setDescription('The table of Config entries related to the DC System')
es1dc1ConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 15, 2, 1), ).setIndexNames((0, "SITE-MONITORING-MIB", "es1dc1ConfigIndex"))
if mibBuilder.loadTexts: es1dc1ConfigEntry.setStatus('current')
if mibBuilder.loadTexts: es1dc1ConfigEntry.setDescription('A Config entry')
es1dc1ConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 15, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: es1dc1ConfigIndex.setStatus('current')
if mibBuilder.loadTexts: es1dc1ConfigIndex.setDescription('The Config entry Index')
es1dc1ConfigName = MibTableColumn((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 15, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1dc1ConfigName.setStatus('current')
if mibBuilder.loadTexts: es1dc1ConfigName.setDescription('The Config entry name')
es1dc1ConfigValue = MibTableColumn((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 15, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es1dc1ConfigValue.setStatus('current')
if mibBuilder.loadTexts: es1dc1ConfigValue.setDescription('The Config entry value')
es1dc1ConfigEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 15, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: es1dc1ConfigEntryStatus.setStatus('current')
if mibBuilder.loadTexts: es1dc1ConfigEntryStatus.setDescription('The status of this table entry - not used, only for compliance')
es1dc1ConfigList = MibIdentifier((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 15, 3))
es1dc1CfgDCBusDCBusFloatVoltageat25degC = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 15, 3, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es1dc1CfgDCBusDCBusFloatVoltageat25degC.setStatus('current')
if mibBuilder.loadTexts: es1dc1CfgDCBusDCBusFloatVoltageat25degC.setDescription('The floating dc bus voltage of the system at 25 Celsius degree')
es1dc1CfgDCBusDCBusVoltageExtraLow = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 15, 3, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es1dc1CfgDCBusDCBusVoltageExtraLow.setStatus('current')
if mibBuilder.loadTexts: es1dc1CfgDCBusDCBusVoltageExtraLow.setDescription("The bus voltage under which the alarm 'DC Bus Voltage Extra Low' is set.")
es1dc1CfgDCBusDCBusVoltageExtraLowHysteresis = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 15, 3, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es1dc1CfgDCBusDCBusVoltageExtraLowHysteresis.setStatus('current')
if mibBuilder.loadTexts: es1dc1CfgDCBusDCBusVoltageExtraLowHysteresis.setDescription("The voltage hysteresis on the alarm 'DC Bus Voltage Extra Low'.")
es1dc1CfgDCBusDCBusVoltageLow = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 15, 3, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es1dc1CfgDCBusDCBusVoltageLow.setStatus('current')
if mibBuilder.loadTexts: es1dc1CfgDCBusDCBusVoltageLow.setDescription("The bus voltage under which the alarm 'DC Bus Voltage Low' is set.")
es1dc1CfgDCBusDCBusVoltageLowHysteresis = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 15, 3, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es1dc1CfgDCBusDCBusVoltageLowHysteresis.setStatus('current')
if mibBuilder.loadTexts: es1dc1CfgDCBusDCBusVoltageLowHysteresis.setDescription("The voltage hysteresis on the alarm 'DC Bus Voltage Low")
es1dc1CfgDCBusDCBusVoltageHigh = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 15, 3, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es1dc1CfgDCBusDCBusVoltageHigh.setStatus('current')
if mibBuilder.loadTexts: es1dc1CfgDCBusDCBusVoltageHigh.setDescription("The bus voltage over which the alarm 'DC Bus Voltage High' is set.")
es1dc1CfgDCBusDCBusVoltageHighHysteresis = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 15, 3, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es1dc1CfgDCBusDCBusVoltageHighHysteresis.setStatus('current')
if mibBuilder.loadTexts: es1dc1CfgDCBusDCBusVoltageHighHysteresis.setDescription("The voltage hysteresis on the alarm 'DC Bus Voltage High")
es1dc1CfgDCBusDCBusVoltageExtraHigh = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 15, 3, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es1dc1CfgDCBusDCBusVoltageExtraHigh.setStatus('current')
if mibBuilder.loadTexts: es1dc1CfgDCBusDCBusVoltageExtraHigh.setDescription("The bus voltage over which the alarm 'DC Bus Voltage Extra High' is set.")
es1dc1CfgDCBusDCBusVoltageExtraHighHysteresis = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 15, 3, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es1dc1CfgDCBusDCBusVoltageExtraHighHysteresis.setStatus('current')
if mibBuilder.loadTexts: es1dc1CfgDCBusDCBusVoltageExtraHighHysteresis.setDescription("The voltage hysteresis on the alarm 'DC Bus Voltage Extra High")
es1dc1CfgLVDLVDDisconnectVoltage = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 15, 3, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es1dc1CfgLVDLVDDisconnectVoltage.setStatus('current')
if mibBuilder.loadTexts: es1dc1CfgLVDLVDDisconnectVoltage.setDescription('The dc bus voltage under which the battery must be disconnected of the bus. This allows preserving the battery life. The load will be unpowered. This value has to be lower than the Battery test end voltage (CF70)')
es1dc1CfgLVDLVDDisconnectDelay = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 15, 3, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es1dc1CfgLVDLVDDisconnectDelay.setStatus('current')
if mibBuilder.loadTexts: es1dc1CfgLVDLVDDisconnectDelay.setDescription('The delay in second before disconnecting the battery if the dc bus voltage is under the configured disconnected voltage. This avoids disconnection during a low bus transient.')
es1dc1CfgBatTempCompensationSlope = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 15, 3, 21), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es1dc1CfgBatTempCompensationSlope.setStatus('current')
if mibBuilder.loadTexts: es1dc1CfgBatTempCompensationSlope.setDescription('The slope of the battery temperature compensation in mv/degree. For a 48V system, -72mV/degree is often used.')
es1dc1CfgBatMaxPosTempCompensation = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 15, 3, 22), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es1dc1CfgBatMaxPosTempCompensation.setStatus('current')
if mibBuilder.loadTexts: es1dc1CfgBatMaxPosTempCompensation.setDescription('The maximal allowed positive compensation.')
es1dc1CfgBatMaxNegTempCompensation = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 15, 3, 23), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es1dc1CfgBatMaxNegTempCompensation.setStatus('current')
if mibBuilder.loadTexts: es1dc1CfgBatMaxNegTempCompensation.setDescription('The maximal allowed negative compensation.')
es1dc1CfgRectifiersMinimalNumberOfPresentRectifiers = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 15, 3, 25), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es1dc1CfgRectifiersMinimalNumberOfPresentRectifiers.setStatus('current')
if mibBuilder.loadTexts: es1dc1CfgRectifiersMinimalNumberOfPresentRectifiers.setDescription("The minimal number of rectifier which must be present. If there is less present rectifiers, the alarm 'Missing Rectifiers' is set.")
es1dc1CfgRectifiersRectifierModel = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 15, 3, 26), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es1dc1CfgRectifiersRectifierModel.setStatus('current')
if mibBuilder.loadTexts: es1dc1CfgRectifiersRectifierModel.setDescription('The rectifier model')
es1dc1CfgRectifiersForcedRemoteOffRectifers = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 15, 3, 27), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es1dc1CfgRectifiersForcedRemoteOffRectifers.setStatus('current')
if mibBuilder.loadTexts: es1dc1CfgRectifiersForcedRemoteOffRectifers.setDescription('A list of rectifier which are forced in remote off. The id of the rectifier must be coma separated. Ex: 1,3 will maintain rectifier 1 and 3 off.')
es1dc1CfgBatBatChargeCurrentLimit = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 15, 3, 31), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es1dc1CfgBatBatChargeCurrentLimit.setStatus('current')
if mibBuilder.loadTexts: es1dc1CfgBatBatChargeCurrentLimit.setDescription('The maximal battery current when the battery is charging. The monitoring regulates the bus voltage in order to satisfy this condition. This parameter is often equal to the nominal battery capacity divided by 10.')
es1dc1CfgBatBatStringCapacity = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 15, 3, 32), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es1dc1CfgBatBatStringCapacity.setStatus('current')
if mibBuilder.loadTexts: es1dc1CfgBatBatStringCapacity.setDescription('The battery capacity in Ah.')
es1dc1CfgBatBatTempLow = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 15, 3, 33), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es1dc1CfgBatBatTempLow.setStatus('current')
if mibBuilder.loadTexts: es1dc1CfgBatBatTempLow.setDescription("The temperature under which the alarm 'Battery Temperature Too Low' must be set.")
es1dc1CfgBatBatTempHigh = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 15, 3, 34), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es1dc1CfgBatBatTempHigh.setStatus('current')
if mibBuilder.loadTexts: es1dc1CfgBatBatTempHigh.setDescription("The temperature over which the alarm 'Battery Temperature Too High' must be set.")
es1dc1CfgBatBatTempHysteresis = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 15, 3, 35), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es1dc1CfgBatBatTempHysteresis.setStatus('current')
if mibBuilder.loadTexts: es1dc1CfgBatBatTempHysteresis.setDescription("The hysteresis on the 'Battery Temperature Too High' and 'Battery Temperature Too Low' alarms.")
es1dc1CfgBatMinimalCurrentForDischargingAlarm = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 15, 3, 36), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es1dc1CfgBatMinimalCurrentForDischargingAlarm.setStatus('current')
if mibBuilder.loadTexts: es1dc1CfgBatMinimalCurrentForDischargingAlarm.setDescription("The minimal discharging current to set the 'Battery On Discharge' alarm.")
es1dc1CfgBatCurrentHysteresisForDischargingAlarm = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 15, 3, 37), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es1dc1CfgBatCurrentHysteresisForDischargingAlarm.setStatus('current')
if mibBuilder.loadTexts: es1dc1CfgBatCurrentHysteresisForDischargingAlarm.setDescription("The hysteresis on the 'Battery On Discharge' alarm.")
es1dc1CfgBatPeukertNumber = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 15, 3, 38), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es1dc1CfgBatPeukertNumber.setStatus('current')
if mibBuilder.loadTexts: es1dc1CfgBatPeukertNumber.setDescription('The Peukert number relates to the internal resistance of a battery and provides an indication of the excpected capacity. The ideal number is 1. This value can be calculated with the formula: (ln(t2)-ln(t1))/(ln(i1)-ln(i2)) where tx is the autonomy in hours at a constant discharge current of ix Amps. Often, we use t1 = 1h and t2 = 10h')
es1dc1CfgBatMaxDepthOfDischargeforAutonomyEstimation = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 15, 3, 39), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es1dc1CfgBatMaxDepthOfDischargeforAutonomyEstimation.setStatus('current')
if mibBuilder.loadTexts: es1dc1CfgBatMaxDepthOfDischargeforAutonomyEstimation.setDescription('It is generally recommended to discharge maximum 60% of the battery capacity to enhance battery lifetime. By default, 100% is used for autonomy calculation. This parameter can also be used to take into account the age of the battery')
es1dc1CfgBatBoostAutomatic = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 15, 3, 51), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es1dc1CfgBatBoostAutomatic.setStatus('current')
if mibBuilder.loadTexts: es1dc1CfgBatBoostAutomatic.setDescription("The boost mode must be automatically after the fact that during a mains failure, the bus voltage went under the configured 'Boost Activation Low Voltage'. This allows charging the battery faster.")
es1dc1CfgBatBoostActivationLowVoltage = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 15, 3, 52), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es1dc1CfgBatBoostActivationLowVoltage.setStatus('current')
if mibBuilder.loadTexts: es1dc1CfgBatBoostActivationLowVoltage.setDescription('The voltage under which the boost mode can be activated.')
es1dc1CfgBatBoostTerminationVoltage = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 15, 3, 53), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es1dc1CfgBatBoostTerminationVoltage.setStatus('current')
if mibBuilder.loadTexts: es1dc1CfgBatBoostTerminationVoltage.setDescription('The voltage over which the system must go back to floating mode.')
es1dc1CfgBatBoostTerminationCurrent = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 15, 3, 54), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es1dc1CfgBatBoostTerminationCurrent.setStatus('current')
if mibBuilder.loadTexts: es1dc1CfgBatBoostTerminationCurrent.setDescription('The battery charging current under which the system must go back to floating mode.')
es1dc1CfgBatBoostTerminationTime = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 15, 3, 55), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es1dc1CfgBatBoostTerminationTime.setStatus('current')
if mibBuilder.loadTexts: es1dc1CfgBatBoostTerminationTime.setDescription('The time in minute after which the system must go back in floating mode.')
es1dc1CfgBatBatTestType = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 15, 3, 69), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es1dc1CfgBatBatTestType.setStatus('current')
if mibBuilder.loadTexts: es1dc1CfgBatBatTestType.setDescription('Type of the battery test: <br> Capacity based: The battery must give the requested capacity before falling lower than a value <br>Time Based: The battery must sustain a defined load during a defined time.')
es1dc1CfgBatBatTestEndVoltage = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 15, 3, 70), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es1dc1CfgBatBatTestEndVoltage.setStatus('current')
if mibBuilder.loadTexts: es1dc1CfgBatBatTestEndVoltage.setDescription('The voltage at which any battery test must be stopped. This value has to be higher than the LVD Disconnect voltage (CF10)')
es1dc1CfgBatBatTestDischargeRatio = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 15, 3, 71), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es1dc1CfgBatBatTestDischargeRatio.setStatus('current')
if mibBuilder.loadTexts: es1dc1CfgBatBatTestDischargeRatio.setDescription('The ratio of the battery capacity to discharge. If 30 is set, 30% of the battery will be discharged during the test')
es1dc1CfgBatBatTestInterval = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 15, 3, 72), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es1dc1CfgBatBatTestInterval.setStatus('current')
if mibBuilder.loadTexts: es1dc1CfgBatBatTestInterval.setDescription('The number of days between two automatically started battery test. If this parameter is set to 0, the battery test is not started automatically. The user can remotely or locally start or force this test.')
es1dc1CfgBatBatTestDischargeCurrent = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 15, 3, 73), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es1dc1CfgBatBatTestDischargeCurrent.setStatus('current')
if mibBuilder.loadTexts: es1dc1CfgBatBatTestDischargeCurrent.setDescription('The current at which the battery must be discharged during a battery test. The monitoring regulates the bus voltage in order to satisfy this condition. The load current must be of course higher than this parameter.')
es1dc1CfgBatBatTestMinimalDischargeCurrent = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 15, 3, 74), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es1dc1CfgBatBatTestMinimalDischargeCurrent.setStatus('current')
if mibBuilder.loadTexts: es1dc1CfgBatBatTestMinimalDischargeCurrent.setDescription('The battery current under which the battery test must be stopped because the load is too low.')
es1dc1CfgBatBatTestDuration = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 15, 3, 75), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es1dc1CfgBatBatTestDuration.setStatus('current')
if mibBuilder.loadTexts: es1dc1CfgBatBatTestDuration.setDescription('The timeout in minute after which the battery test must be stopped.')
es1dc1CfgBatBatTestRequMinutesWithoutMainsFail = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 15, 3, 76), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es1dc1CfgBatBatTestRequMinutesWithoutMainsFail.setStatus('current')
if mibBuilder.loadTexts: es1dc1CfgBatBatTestRequMinutesWithoutMainsFail.setDescription('The minimal time in minute without mains failure in order to allow a battery start. This parameter is not taken into account when the battery test is forced.')
es1dc1CfgBatBatTestSchedulerCronRule = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 15, 3, 77), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es1dc1CfgBatBatTestSchedulerCronRule.setStatus('current')
if mibBuilder.loadTexts: es1dc1CfgBatBatTestSchedulerCronRule.setDescription('NA')
es1dc1CfgSmartEnergySmartEnergyBooleanCond = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 15, 3, 83), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es1dc1CfgSmartEnergySmartEnergyBooleanCond.setStatus('current')
if mibBuilder.loadTexts: es1dc1CfgSmartEnergySmartEnergyBooleanCond.setDescription('This is the boolean condition which allows or not to automatically optimize the number of rectifier in remote off.')
es1dc1CfgLVDBatLVDNodeId = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 15, 3, 86), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es1dc1CfgLVDBatLVDNodeId.setStatus('current')
if mibBuilder.loadTexts: es1dc1CfgLVDBatLVDNodeId.setDescription('This is a list of the node id of the Smart Electronic LVDs, coma separated')
es1dc1CfgDigInputsDigInput1Name = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 15, 3, 91), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es1dc1CfgDigInputsDigInput1Name.setStatus('current')
if mibBuilder.loadTexts: es1dc1CfgDigInputsDigInput1Name.setDescription('The name of the digital input 1')
es1dc1CfgDigInputsDigInput1NormallyClosed = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 15, 3, 92), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es1dc1CfgDigInputsDigInput1NormallyClosed.setStatus('current')
if mibBuilder.loadTexts: es1dc1CfgDigInputsDigInput1NormallyClosed.setDescription('True/False value defining if the digital input 1 is normally closed. If this digital input is not in this default state, the related alarm is set.')
es1dc1CfgDigInputsDigInput2Name = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 15, 3, 93), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es1dc1CfgDigInputsDigInput2Name.setStatus('current')
if mibBuilder.loadTexts: es1dc1CfgDigInputsDigInput2Name.setDescription('The name of the digital input 2')
es1dc1CfgDigInputsDigInput2NormallyClosed = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 15, 3, 94), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es1dc1CfgDigInputsDigInput2NormallyClosed.setStatus('current')
if mibBuilder.loadTexts: es1dc1CfgDigInputsDigInput2NormallyClosed.setDescription('True/False value defining if the digital input 2 is normally closed. If this digital input is not in this default state, the related alarm is set.')
es1dc1CfgDigInputsDigInput3Name = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 15, 3, 95), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es1dc1CfgDigInputsDigInput3Name.setStatus('current')
if mibBuilder.loadTexts: es1dc1CfgDigInputsDigInput3Name.setDescription('The name of the digital input 3')
es1dc1CfgDigInputsDigInput3NormallyClosed = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 15, 3, 96), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es1dc1CfgDigInputsDigInput3NormallyClosed.setStatus('current')
if mibBuilder.loadTexts: es1dc1CfgDigInputsDigInput3NormallyClosed.setDescription('True/False value defining if the digital input 3 is normally closed. If this digital input is not in this default state, the related alarm is set.')
es1dc1CfgDigInputsDigInput4Name = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 15, 3, 97), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es1dc1CfgDigInputsDigInput4Name.setStatus('current')
if mibBuilder.loadTexts: es1dc1CfgDigInputsDigInput4Name.setDescription('The name of the digital input 4')
es1dc1CfgDigInputsDigInput4NormallyClosed = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 15, 3, 98), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es1dc1CfgDigInputsDigInput4NormallyClosed.setStatus('current')
if mibBuilder.loadTexts: es1dc1CfgDigInputsDigInput4NormallyClosed.setDescription('True/False value defining if the digital input 4 is normally closed. If this digital input is not in this default state, the related alarm is set.')
es1dc1CfgDigInputsDigInput5Name = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 15, 3, 99), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es1dc1CfgDigInputsDigInput5Name.setStatus('current')
if mibBuilder.loadTexts: es1dc1CfgDigInputsDigInput5Name.setDescription('The name of the digital input 5')
es1dc1CfgDigInputsDigInput5NormallyClosed = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 15, 3, 100), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es1dc1CfgDigInputsDigInput5NormallyClosed.setStatus('current')
if mibBuilder.loadTexts: es1dc1CfgDigInputsDigInput5NormallyClosed.setDescription('True/False value defining if the digital input 5 is normally closed. If this digital input is not in this default state, the related alarm is set.')
es1dc1CfgDigInputsDigInput6Name = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 15, 3, 101), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es1dc1CfgDigInputsDigInput6Name.setStatus('current')
if mibBuilder.loadTexts: es1dc1CfgDigInputsDigInput6Name.setDescription('The name of the digital input 6')
es1dc1CfgDigInputsDigInput6NormallyClosed = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 15, 3, 102), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es1dc1CfgDigInputsDigInput6NormallyClosed.setStatus('current')
if mibBuilder.loadTexts: es1dc1CfgDigInputsDigInput6NormallyClosed.setDescription('True/False value defining if the digital input 6 is normally closed. If this digital input is not in this default state, the related alarm is set.')
es1dc1CfgRelsDryAlarm1AlternativeBooleanCond = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 15, 3, 111), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es1dc1CfgRelsDryAlarm1AlternativeBooleanCond.setStatus('current')
if mibBuilder.loadTexts: es1dc1CfgRelsDryAlarm1AlternativeBooleanCond.setDescription('Another Boolean condition to activate the dry alarm relay 1. The way to define boolean condition is detailed in the PLC chapter.')
es1dc1CfgRelsDryAlarm2AlternativeBooleanCond = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 15, 3, 112), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es1dc1CfgRelsDryAlarm2AlternativeBooleanCond.setStatus('current')
if mibBuilder.loadTexts: es1dc1CfgRelsDryAlarm2AlternativeBooleanCond.setDescription('Another Boolean condition to activate the dry alarm relay 2. The way to define boolean condition is detailed in the PLC chapter.')
es1dc1CfgRelsDryAlarm3AlternativeBooleanCond = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 15, 3, 113), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es1dc1CfgRelsDryAlarm3AlternativeBooleanCond.setStatus('current')
if mibBuilder.loadTexts: es1dc1CfgRelsDryAlarm3AlternativeBooleanCond.setDescription('Another Boolean condition to activate the dry alarm relay 3. The way to define boolean condition is detailed in the PLC chapter.')
es1dc1CfgRelsDryAlarm4AlternativeBooleanCond = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 15, 3, 114), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es1dc1CfgRelsDryAlarm4AlternativeBooleanCond.setStatus('current')
if mibBuilder.loadTexts: es1dc1CfgRelsDryAlarm4AlternativeBooleanCond.setDescription('Another Boolean condition to activate the dry alarm relay 4. The way to define boolean condition is detailed in the PLC chapter.')
es1dc1CfgSensorsAmbientTempLow = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 15, 3, 131), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es1dc1CfgSensorsAmbientTempLow.setStatus('current')
if mibBuilder.loadTexts: es1dc1CfgSensorsAmbientTempLow.setDescription("The temperature under which the alarm 'Ambiant Temperature Too Low' must be set.")
es1dc1CfgSensorsAmbientTempHigh = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 15, 3, 132), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es1dc1CfgSensorsAmbientTempHigh.setStatus('current')
if mibBuilder.loadTexts: es1dc1CfgSensorsAmbientTempHigh.setDescription("The temperature under which the alarm 'Ambiant Temperature Too Low' must be set.")
es1dc1CfgSensorsAmbientTempHysteresis = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 15, 3, 133), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es1dc1CfgSensorsAmbientTempHysteresis.setStatus('current')
if mibBuilder.loadTexts: es1dc1CfgSensorsAmbientTempHysteresis.setDescription("The hysteresis on the 'Battery Temperature Too High' and 'Battery Temperature Too Low' alarms.")
es1dc1CfgGenericReadAccessUserNumbers = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 15, 3, 521), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es1dc1CfgGenericReadAccessUserNumbers.setStatus('current')
if mibBuilder.loadTexts: es1dc1CfgGenericReadAccessUserNumbers.setDescription('The list of the user numbers which have read access to this equipment. The user numbers are coma separated. The accepted user id are 1,2,3,4 and 5. Ex: 1,3,4')
es1dc1CfgGenericWriteAccessUserNumbers = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 15, 3, 522), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es1dc1CfgGenericWriteAccessUserNumbers.setStatus('current')
if mibBuilder.loadTexts: es1dc1CfgGenericWriteAccessUserNumbers.setDescription('The list of the user numbers which have write access to this equipment. This means that these users can modify the configuration element, the alarm settings and use the control elements. The user numbers are coma separated.  The accepted user ids are 1,2,3,4 and 5. Ex: 1,3,4')
es1dc1CfgGenericEventTableLength = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 15, 3, 601), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es1dc1CfgGenericEventTableLength.setStatus('current')
if mibBuilder.loadTexts: es1dc1CfgGenericEventTableLength.setDescription('The maximum length of the table. The value must be comprised between 10 and 4000')
es1dc1CfgGenericEventTableLengthByRectifier = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 15, 3, 602), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es1dc1CfgGenericEventTableLengthByRectifier.setStatus('current')
if mibBuilder.loadTexts: es1dc1CfgGenericEventTableLengthByRectifier.setDescription('The maximum length of the table. The value must be comprised between 10 and 4000')
es1dc1CfgPLCNumberOfPLCData = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 15, 3, 901), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es1dc1CfgPLCNumberOfPLCData.setStatus('current')
if mibBuilder.loadTexts: es1dc1CfgPLCNumberOfPLCData.setDescription("The number of PLC data. Every equipment can manage up to 30 user programmable data. Data elements are automatically added in the data table. Configuration parameters are added to set the PLC Data Name and the PLC Data Mathematical calculation. In order to use these functionalities, you need a license with the 'PLC' module")
es1dc1CfgPLCNumberOfPLCAlarm = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 15, 3, 902), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es1dc1CfgPLCNumberOfPLCAlarm.setStatus('current')
if mibBuilder.loadTexts: es1dc1CfgPLCNumberOfPLCAlarm.setDescription("The number of PLC alarm. Every equipment can manage up to 30 user programmable alarms. Alarm elements are automatically added in the alarm table. The alarm parameters are added to set the PLC Alarm Name and the PLC Alarm Boolean condition. In order to use these functionalities, you need a licence with the 'PLC' module")
es1dc1Control = MibIdentifier((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 16))
es1dc1ControlNumber = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 16, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1dc1ControlNumber.setStatus('current')
if mibBuilder.loadTexts: es1dc1ControlNumber.setDescription('The number of entries in the Control table related to the DC System')
es1dc1ControlTable = MibTable((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 16, 2), )
if mibBuilder.loadTexts: es1dc1ControlTable.setStatus('current')
if mibBuilder.loadTexts: es1dc1ControlTable.setDescription('The table of Control entries related to the DC System')
es1dc1ControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 16, 2, 1), ).setIndexNames((0, "SITE-MONITORING-MIB", "es1dc1ControlIndex"))
if mibBuilder.loadTexts: es1dc1ControlEntry.setStatus('current')
if mibBuilder.loadTexts: es1dc1ControlEntry.setDescription('A Control entry')
es1dc1ControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 16, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: es1dc1ControlIndex.setStatus('current')
if mibBuilder.loadTexts: es1dc1ControlIndex.setDescription('The Control entry Index')
es1dc1ControlName = MibTableColumn((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 16, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1dc1ControlName.setStatus('current')
if mibBuilder.loadTexts: es1dc1ControlName.setDescription('The Control entry name')
es1dc1ControlValue = MibTableColumn((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 16, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es1dc1ControlValue.setStatus('current')
if mibBuilder.loadTexts: es1dc1ControlValue.setDescription('The Control entry value')
es1dc1ControlEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 16, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: es1dc1ControlEntryStatus.setStatus('current')
if mibBuilder.loadTexts: es1dc1ControlEntryStatus.setDescription('The status of this table entry - not used, only for compliance')
es1dc1ControlList = MibIdentifier((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 16, 3))
es1dc1CtrlSystemBackToFloat = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 16, 3, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es1dc1CtrlSystemBackToFloat.setStatus('current')
if mibBuilder.loadTexts: es1dc1CtrlSystemBackToFloat.setDescription('The dc system must go back in floating mode.')
es1dc1CtrlSystemStartBatTest = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 16, 3, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es1dc1CtrlSystemStartBatTest.setStatus('current')
if mibBuilder.loadTexts: es1dc1CtrlSystemStartBatTest.setDescription('The dc system must start a battery test.')
es1dc1CtrlSystemForceBatTest = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 16, 3, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es1dc1CtrlSystemForceBatTest.setStatus('current')
if mibBuilder.loadTexts: es1dc1CtrlSystemForceBatTest.setDescription('The dc system must force a battery test.')
es1dc1CtrlSystemStartBoostMode = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 16, 3, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es1dc1CtrlSystemStartBoostMode.setStatus('current')
if mibBuilder.loadTexts: es1dc1CtrlSystemStartBoostMode.setDescription('The dc system must go in boost mode.')
es1dc1CtrlLVDOpenTheLVD = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 16, 3, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es1dc1CtrlLVDOpenTheLVD.setStatus('current')
if mibBuilder.loadTexts: es1dc1CtrlLVDOpenTheLVD.setDescription('Try to open the LVD. It could not work if the LVD is electronic, and the request will be canceled after 15 sec.')
es1dc1CtrlLVDCloseTheLVD = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 16, 3, 12), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es1dc1CtrlLVDCloseTheLVD.setStatus('current')
if mibBuilder.loadTexts: es1dc1CtrlLVDCloseTheLVD.setDescription('The LVD must be closed')
es1dc1CtrlBatCorrectBatCurrentOffset = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 16, 3, 21), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es1dc1CtrlBatCorrectBatCurrentOffset.setStatus('current')
if mibBuilder.loadTexts: es1dc1CtrlBatCorrectBatCurrentOffset.setDescription('NA')
es1dc1CtrlBatResetLastBatTestState = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 16, 3, 41), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es1dc1CtrlBatResetLastBatTestState.setStatus('current')
if mibBuilder.loadTexts: es1dc1CtrlBatResetLastBatTestState.setDescription("Reset the state of the last battery test. If an alarm 'Battery Last Test Failed' is set, the alarm will be cleared.")
es1dc1CtrlSaveSaveConfInMCU = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 16, 3, 51), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es1dc1CtrlSaveSaveConfInMCU.setStatus('current')
if mibBuilder.loadTexts: es1dc1CtrlSaveSaveConfInMCU.setDescription('Save configuration parameters in the MCU microcontroller. If comp@s is not present, the system will be correctly managed.')
es1dc1CtrlAdvancedSetMCUSpecificConfId = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 16, 3, 55), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es1dc1CtrlAdvancedSetMCUSpecificConfId.setStatus('current')
if mibBuilder.loadTexts: es1dc1CtrlAdvancedSetMCUSpecificConfId.setDescription('This control allows to reconfigure the MCU to support specific hardware configuration, with embedded distribution for example')
es1dc1CtrlDigInputsSetDigInput4CounterValue = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 16, 3, 61), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es1dc1CtrlDigInputsSetDigInput4CounterValue.setStatus('current')
if mibBuilder.loadTexts: es1dc1CtrlDigInputsSetDigInput4CounterValue.setDescription('Set Counter Value')
es1dc1CtrlRelsInvertRel1StateForXSeconds = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 16, 3, 111), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es1dc1CtrlRelsInvertRel1StateForXSeconds.setStatus('current')
if mibBuilder.loadTexts: es1dc1CtrlRelsInvertRel1StateForXSeconds.setDescription('Generate Pulse on relay 1')
es1dc1CtrlRelsInvertRel2StateForXSeconds = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 16, 3, 112), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es1dc1CtrlRelsInvertRel2StateForXSeconds.setStatus('current')
if mibBuilder.loadTexts: es1dc1CtrlRelsInvertRel2StateForXSeconds.setDescription('Generate Pulse on relay 2')
es1dc1CtrlRelsInvertRel3StateForXSeconds = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 16, 3, 113), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es1dc1CtrlRelsInvertRel3StateForXSeconds.setStatus('current')
if mibBuilder.loadTexts: es1dc1CtrlRelsInvertRel3StateForXSeconds.setDescription('Generate Pulse on relay 3')
es1dc1CtrlRelsInvertRel4StateForXSeconds = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 16, 3, 114), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es1dc1CtrlRelsInvertRel4StateForXSeconds.setStatus('current')
if mibBuilder.loadTexts: es1dc1CtrlRelsInvertRel4StateForXSeconds.setDescription('Generate Pulse on relay 4')
es1dc1CtrlGenericClearMyEvents = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 16, 3, 501), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es1dc1CtrlGenericClearMyEvents.setStatus('current')
if mibBuilder.loadTexts: es1dc1CtrlGenericClearMyEvents.setDescription("By writing '1' to this control element, all the events of this equipment will be cleared.")
es1dc1CtrlGenericClearAllEvents = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 16, 3, 502), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es1dc1CtrlGenericClearAllEvents.setStatus('current')
if mibBuilder.loadTexts: es1dc1CtrlGenericClearAllEvents.setDescription("By writing '1' to this control element, all the events of this equipment and all the events of all the sub-equipments will be cleared.")
es1dc1CtrlGenericAddEvent = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 16, 3, 511), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es1dc1CtrlGenericAddEvent.setStatus('current')
if mibBuilder.loadTexts: es1dc1CtrlGenericAddEvent.setDescription('This control element adds an event of severity none. The event name is the text written to this control element')
es1dc1CtrlGenericAddMajorEvent = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 16, 3, 512), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es1dc1CtrlGenericAddMajorEvent.setStatus('current')
if mibBuilder.loadTexts: es1dc1CtrlGenericAddMajorEvent.setDescription('This control element adds an event of severity major. The event name is the text written to this control element')
es1dc1CtrlGenericResetDefaultNamesAndGroups = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 16, 3, 521), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es1dc1CtrlGenericResetDefaultNamesAndGroups.setStatus('current')
if mibBuilder.loadTexts: es1dc1CtrlGenericResetDefaultNamesAndGroups.setDescription('This control element resets all the element Names, Groups and Subgroups to default values for this equipment')
es1dc1CtrlGenericResetDefaultNamesAndGroupsRecursive = MibScalar((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 16, 3, 522), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es1dc1CtrlGenericResetDefaultNamesAndGroupsRecursive.setStatus('current')
if mibBuilder.loadTexts: es1dc1CtrlGenericResetDefaultNamesAndGroupsRecursive.setDescription('This control element resets all the element Names, Groups and Subgroups to default values for this equipment and all sub equipments')
es1dc1Notifications = MibIdentifier((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 18))
es1dc1NotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 18, 0))
es1dc1NotificationOfEvent = NotificationType((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 18, 0, 1)).setObjects(("SITE-MONITORING-MIB", "es1dc1EventId"), ("SITE-MONITORING-MIB", "es1dc1EventName"), ("SITE-MONITORING-MIB", "es1dc1EventDateTime"), ("SITE-MONITORING-MIB", "es1dc1EventSeverityType"), ("SITE-MONITORING-MIB", "es1dc1EventSeverityLevel"), ("SITE-MONITORING-MIB", "es1dc1AlarmSummary"))
if mibBuilder.loadTexts: es1dc1NotificationOfEvent.setStatus('current')
if mibBuilder.loadTexts: es1dc1NotificationOfEvent.setDescription('Notification generated when a new event appears')
es1dc1Compliance = MibIdentifier((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 19))
es1dc1ComplianceGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 19, 1))
es1dc1FullCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 19, 2)).setObjects(("SITE-MONITORING-MIB", "es1dc1GlobalGroup"), ("SITE-MONITORING-MIB", "es1dc1NotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    es1dc1FullCompliance = es1dc1FullCompliance.setStatus('current')
if mibBuilder.loadTexts: es1dc1FullCompliance.setDescription(' The compliance statement for SNMPV2 entities which implement the SNMPV2 MIB. ')
es1dc1GlobalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 19, 1, 1)).setObjects(("SITE-MONITORING-MIB", "es1dc1GlobalStatus"), ("SITE-MONITORING-MIB", "es1dc1GlobalAlarmSeverityType"), ("SITE-MONITORING-MIB", "es1dc1GlobalAlarmSeverityLevel"), ("SITE-MONITORING-MIB", "es1dc1GlobalAlarmSeverityTypeInt"), ("SITE-MONITORING-MIB", "es1dc1DescriptionNumber"), ("SITE-MONITORING-MIB", "es1dc1DescriptionName"), ("SITE-MONITORING-MIB", "es1dc1DescriptionValue"), ("SITE-MONITORING-MIB", "es1dc1DescriptionEntryStatus"), ("SITE-MONITORING-MIB", "es1dc1DescDescriptionDescription"), ("SITE-MONITORING-MIB", "es1dc1DescDescriptionReference"), ("SITE-MONITORING-MIB", "es1dc1DescDescriptionProductName"), ("SITE-MONITORING-MIB", "es1dc1DescDescriptionHardwareReference"), ("SITE-MONITORING-MIB", "es1dc1DescDescriptionSoftwareReference"), ("SITE-MONITORING-MIB", "es1dc1DescDescriptionSerialNumber"), ("SITE-MONITORING-MIB", "es1dc1DescDescriptionManufacturingDate"), ("SITE-MONITORING-MIB", "es1dc1DescDescriptionDistributionModuleProductName"), ("SITE-MONITORING-MIB", "es1dc1DescDescriptionDistributionModuleHardwareReference"), ("SITE-MONITORING-MIB", "es1dc1DescDescriptionDistributionModuleSoftwareReference"), ("SITE-MONITORING-MIB", "es1dc1DescDescriptionDistributionModuleSerialNumber"), ("SITE-MONITORING-MIB", "es1dc1DescDescriptionDistributionModuleManufacturingDate"), ("SITE-MONITORING-MIB", "es1dc1AlarmNumber"), ("SITE-MONITORING-MIB", "es1dc1AlarmName"), ("SITE-MONITORING-MIB", "es1dc1AlarmActive"), ("SITE-MONITORING-MIB", "es1dc1AlarmSeverityType"), ("SITE-MONITORING-MIB", "es1dc1AlarmSeverityLevel"), ("SITE-MONITORING-MIB", "es1dc1AlarmStartTime"), ("SITE-MONITORING-MIB", "es1dc1AlarmStopTime"), ("SITE-MONITORING-MIB", "es1dc1AlarmEntryStatus"), ("SITE-MONITORING-MIB", "es1dc1AlarmSummary"), ("SITE-MONITORING-MIB", "es1dc1EventNumber"), ("SITE-MONITORING-MIB", "es1dc1EventId"), ("SITE-MONITORING-MIB", "es1dc1EventName"), ("SITE-MONITORING-MIB", "es1dc1EventDateTime"), ("SITE-MONITORING-MIB", "es1dc1EventSeverityType"), ("SITE-MONITORING-MIB", "es1dc1EventSeverityLevel"), ("SITE-MONITORING-MIB", "es1dc1EventEntryStatus"), ("SITE-MONITORING-MIB", "es1dc1DataNumber"), ("SITE-MONITORING-MIB", "es1dc1DataName"), ("SITE-MONITORING-MIB", "es1dc1DataValue"), ("SITE-MONITORING-MIB", "es1dc1DataEntryStatus"), ("SITE-MONITORING-MIB", "es1dc1DataSystemDCMode"), ("SITE-MONITORING-MIB", "es1dc1DataSystemPreviousDCMode"), ("SITE-MONITORING-MIB", "es1dc1DataSystemNiMHChargeMode"), ("SITE-MONITORING-MIB", "es1dc1DataDCBusBusVoltage"), ("SITE-MONITORING-MIB", "es1dc1DataSystemRatioDeliveredOnAvailablePower"), ("SITE-MONITORING-MIB", "es1dc1DataACBusMinutesSinceLastACFailBegin"), ("SITE-MONITORING-MIB", "es1dc1DataACBusMinutesSinceLastACFailEnd"), ("SITE-MONITORING-MIB", "es1dc1DataRectifiersRectifiersOutPower"), ("SITE-MONITORING-MIB", "es1dc1DataRectifiersRectifiersOutCurrent"), ("SITE-MONITORING-MIB", "es1dc1DataRectifiersRectifiersOutPowerMax"), ("SITE-MONITORING-MIB", "es1dc1DataRectifiersRectifiersOutCurrentMax"), ("SITE-MONITORING-MIB", "es1dc1DataRectifiersNumberOfRectifierMax"), ("SITE-MONITORING-MIB", "es1dc1DataRectifiersNumberOfPresentRectifier"), ("SITE-MONITORING-MIB", "es1dc1DataRectifiersNumberOfAbsentRectifier"), ("SITE-MONITORING-MIB", "es1dc1DataRectifiersNumberOfActiveRectifier"), ("SITE-MONITORING-MIB", "es1dc1DataRectifiersNumberOfACFailRectifier"), ("SITE-MONITORING-MIB", "es1dc1DataRectifiersNumberOfDCFailRectifier"), ("SITE-MONITORING-MIB", "es1dc1DataRectifiersNumberOfRemoteOffRectifier"), ("SITE-MONITORING-MIB", "es1dc1DataRectifiersNumberOfOverTempRectifier"), ("SITE-MONITORING-MIB", "es1dc1DataLoadLoadPower"), ("SITE-MONITORING-MIB", "es1dc1DataLoadLoadCurrent"), ("SITE-MONITORING-MIB", "es1dc1DataBatBatInputCurrent"), ("SITE-MONITORING-MIB", "es1dc1DataBatBatInputPower"), ("SITE-MONITORING-MIB", "es1dc1DataBatBatTemp"), ("SITE-MONITORING-MIB", "es1dc1DataBatBatTestState"), ("SITE-MONITORING-MIB", "es1dc1DataBatLastBatTestDischargedCapacityRatio"), ("SITE-MONITORING-MIB", "es1dc1DataBatLastBatTestDischargedCapacity"), ("SITE-MONITORING-MIB", "es1dc1DataBatLastBatTestFinalVoltage"), ("SITE-MONITORING-MIB", "es1dc1DataBatBatTestDuration"), ("SITE-MONITORING-MIB", "es1dc1DataBatPreviousBatTestDischargedCapacityRatio"), ("SITE-MONITORING-MIB", "es1dc1DataBatPreviousBatTestDischargedCapacity"), ("SITE-MONITORING-MIB", "es1dc1DataBatPreviousBatTestFinalVoltage"), ("SITE-MONITORING-MIB", "es1dc1DataBatPreviousBatTestDuration"), ("SITE-MONITORING-MIB", "es1dc1DataBatPreviousBatTestState"), ("SITE-MONITORING-MIB", "es1dc1DataBatMinutesSinceLastTestBat"), ("SITE-MONITORING-MIB", "es1dc1DataBatNextScheduledBatTest"), ("SITE-MONITORING-MIB", "es1dc1DataBatBatChargeCapacity"), ("SITE-MONITORING-MIB", "es1dc1DataBatCalculatedAutonomy"), ("SITE-MONITORING-MIB", "es1dc1DataBatBatCurrentIntegration"), ("SITE-MONITORING-MIB", "es1dc1DataLVDLVDState"), ("SITE-MONITORING-MIB", "es1dc1DataRelsRel1State"), ("SITE-MONITORING-MIB", "es1dc1DataRelsRel2State"), ("SITE-MONITORING-MIB", "es1dc1DataRelsRel3State"), ("SITE-MONITORING-MIB", "es1dc1DataRelsRel4State"), ("SITE-MONITORING-MIB", "es1dc1DataSmartEnergyEfficiencyOptimizedNumberOfRectifier"), ("SITE-MONITORING-MIB", "es1dc1DataSmartEnergySystemLossWithoutOptimisation"), ("SITE-MONITORING-MIB", "es1dc1DataSmartEnergySystemLossWithOptimisation"), ("SITE-MONITORING-MIB", "es1dc1DataSmartEnergyRectifierModelUsedForCalculation"), ("SITE-MONITORING-MIB", "es1dc1DataSmartEnergySmartEnergySavings"), ("SITE-MONITORING-MIB", "es1dc1DataSensorsAmbientTemp"), ("SITE-MONITORING-MIB", "es1dc1DataSensorsPulseCounter4"), ("SITE-MONITORING-MIB", "es1dc1ConfigNumber"), ("SITE-MONITORING-MIB", "es1dc1ConfigName"), ("SITE-MONITORING-MIB", "es1dc1ConfigValue"), ("SITE-MONITORING-MIB", "es1dc1ConfigEntryStatus"), ("SITE-MONITORING-MIB", "es1dc1CfgDCBusDCBusFloatVoltageat25degC"), ("SITE-MONITORING-MIB", "es1dc1CfgDCBusDCBusVoltageExtraLow"), ("SITE-MONITORING-MIB", "es1dc1CfgDCBusDCBusVoltageExtraLowHysteresis"), ("SITE-MONITORING-MIB", "es1dc1CfgDCBusDCBusVoltageLow"), ("SITE-MONITORING-MIB", "es1dc1CfgDCBusDCBusVoltageLowHysteresis"), ("SITE-MONITORING-MIB", "es1dc1CfgDCBusDCBusVoltageHigh"), ("SITE-MONITORING-MIB", "es1dc1CfgDCBusDCBusVoltageHighHysteresis"), ("SITE-MONITORING-MIB", "es1dc1CfgDCBusDCBusVoltageExtraHigh"), ("SITE-MONITORING-MIB", "es1dc1CfgDCBusDCBusVoltageExtraHighHysteresis"), ("SITE-MONITORING-MIB", "es1dc1CfgLVDLVDDisconnectVoltage"), ("SITE-MONITORING-MIB", "es1dc1CfgLVDLVDDisconnectDelay"), ("SITE-MONITORING-MIB", "es1dc1CfgBatTempCompensationSlope"), ("SITE-MONITORING-MIB", "es1dc1CfgBatMaxPosTempCompensation"), ("SITE-MONITORING-MIB", "es1dc1CfgBatMaxNegTempCompensation"), ("SITE-MONITORING-MIB", "es1dc1CfgRectifiersMinimalNumberOfPresentRectifiers"), ("SITE-MONITORING-MIB", "es1dc1CfgRectifiersRectifierModel"), ("SITE-MONITORING-MIB", "es1dc1CfgRectifiersForcedRemoteOffRectifers"), ("SITE-MONITORING-MIB", "es1dc1CfgBatBatChargeCurrentLimit"), ("SITE-MONITORING-MIB", "es1dc1CfgBatBatStringCapacity"), ("SITE-MONITORING-MIB", "es1dc1CfgBatBatTempLow"), ("SITE-MONITORING-MIB", "es1dc1CfgBatBatTempHigh"), ("SITE-MONITORING-MIB", "es1dc1CfgBatBatTempHysteresis"), ("SITE-MONITORING-MIB", "es1dc1CfgBatMinimalCurrentForDischargingAlarm"), ("SITE-MONITORING-MIB", "es1dc1CfgBatCurrentHysteresisForDischargingAlarm"), ("SITE-MONITORING-MIB", "es1dc1CfgBatPeukertNumber"), ("SITE-MONITORING-MIB", "es1dc1CfgBatMaxDepthOfDischargeforAutonomyEstimation"), ("SITE-MONITORING-MIB", "es1dc1CfgBatBoostAutomatic"), ("SITE-MONITORING-MIB", "es1dc1CfgBatBoostActivationLowVoltage"), ("SITE-MONITORING-MIB", "es1dc1CfgBatBoostTerminationVoltage"), ("SITE-MONITORING-MIB", "es1dc1CfgBatBoostTerminationCurrent"), ("SITE-MONITORING-MIB", "es1dc1CfgBatBoostTerminationTime"), ("SITE-MONITORING-MIB", "es1dc1CfgBatBatTestType"), ("SITE-MONITORING-MIB", "es1dc1CfgBatBatTestEndVoltage"), ("SITE-MONITORING-MIB", "es1dc1CfgBatBatTestDischargeRatio"), ("SITE-MONITORING-MIB", "es1dc1CfgBatBatTestInterval"), ("SITE-MONITORING-MIB", "es1dc1CfgBatBatTestDischargeCurrent"), ("SITE-MONITORING-MIB", "es1dc1CfgBatBatTestMinimalDischargeCurrent"), ("SITE-MONITORING-MIB", "es1dc1CfgBatBatTestDuration"), ("SITE-MONITORING-MIB", "es1dc1CfgBatBatTestRequMinutesWithoutMainsFail"), ("SITE-MONITORING-MIB", "es1dc1CfgBatBatTestSchedulerCronRule"), ("SITE-MONITORING-MIB", "es1dc1CfgSmartEnergySmartEnergyBooleanCond"), ("SITE-MONITORING-MIB", "es1dc1CfgLVDBatLVDNodeId"), ("SITE-MONITORING-MIB", "es1dc1CfgDigInputsDigInput1Name"), ("SITE-MONITORING-MIB", "es1dc1CfgDigInputsDigInput1NormallyClosed"), ("SITE-MONITORING-MIB", "es1dc1CfgDigInputsDigInput2Name"), ("SITE-MONITORING-MIB", "es1dc1CfgDigInputsDigInput2NormallyClosed"), ("SITE-MONITORING-MIB", "es1dc1CfgDigInputsDigInput3Name"), ("SITE-MONITORING-MIB", "es1dc1CfgDigInputsDigInput3NormallyClosed"), ("SITE-MONITORING-MIB", "es1dc1CfgDigInputsDigInput4Name"), ("SITE-MONITORING-MIB", "es1dc1CfgDigInputsDigInput4NormallyClosed"), ("SITE-MONITORING-MIB", "es1dc1CfgDigInputsDigInput5Name"), ("SITE-MONITORING-MIB", "es1dc1CfgDigInputsDigInput5NormallyClosed"), ("SITE-MONITORING-MIB", "es1dc1CfgDigInputsDigInput6Name"), ("SITE-MONITORING-MIB", "es1dc1CfgDigInputsDigInput6NormallyClosed"), ("SITE-MONITORING-MIB", "es1dc1CfgRelsDryAlarm1AlternativeBooleanCond"), ("SITE-MONITORING-MIB", "es1dc1CfgRelsDryAlarm2AlternativeBooleanCond"), ("SITE-MONITORING-MIB", "es1dc1CfgRelsDryAlarm3AlternativeBooleanCond"), ("SITE-MONITORING-MIB", "es1dc1CfgRelsDryAlarm4AlternativeBooleanCond"), ("SITE-MONITORING-MIB", "es1dc1CfgSensorsAmbientTempLow"), ("SITE-MONITORING-MIB", "es1dc1CfgSensorsAmbientTempHigh"), ("SITE-MONITORING-MIB", "es1dc1CfgSensorsAmbientTempHysteresis"), ("SITE-MONITORING-MIB", "es1dc1CfgGenericReadAccessUserNumbers"), ("SITE-MONITORING-MIB", "es1dc1CfgGenericWriteAccessUserNumbers"), ("SITE-MONITORING-MIB", "es1dc1CfgGenericEventTableLength"), ("SITE-MONITORING-MIB", "es1dc1CfgGenericEventTableLengthByRectifier"), ("SITE-MONITORING-MIB", "es1dc1CfgPLCNumberOfPLCData"), ("SITE-MONITORING-MIB", "es1dc1CfgPLCNumberOfPLCAlarm"), ("SITE-MONITORING-MIB", "es1dc1ControlNumber"), ("SITE-MONITORING-MIB", "es1dc1ControlName"), ("SITE-MONITORING-MIB", "es1dc1ControlValue"), ("SITE-MONITORING-MIB", "es1dc1ControlEntryStatus"), ("SITE-MONITORING-MIB", "es1dc1CtrlSystemBackToFloat"), ("SITE-MONITORING-MIB", "es1dc1CtrlSystemStartBatTest"), ("SITE-MONITORING-MIB", "es1dc1CtrlSystemForceBatTest"), ("SITE-MONITORING-MIB", "es1dc1CtrlSystemStartBoostMode"), ("SITE-MONITORING-MIB", "es1dc1CtrlLVDOpenTheLVD"), ("SITE-MONITORING-MIB", "es1dc1CtrlLVDCloseTheLVD"), ("SITE-MONITORING-MIB", "es1dc1CtrlBatCorrectBatCurrentOffset"), ("SITE-MONITORING-MIB", "es1dc1CtrlBatResetLastBatTestState"), ("SITE-MONITORING-MIB", "es1dc1CtrlSaveSaveConfInMCU"), ("SITE-MONITORING-MIB", "es1dc1CtrlAdvancedSetMCUSpecificConfId"), ("SITE-MONITORING-MIB", "es1dc1CtrlDigInputsSetDigInput4CounterValue"), ("SITE-MONITORING-MIB", "es1dc1CtrlRelsInvertRel1StateForXSeconds"), ("SITE-MONITORING-MIB", "es1dc1CtrlRelsInvertRel2StateForXSeconds"), ("SITE-MONITORING-MIB", "es1dc1CtrlRelsInvertRel3StateForXSeconds"), ("SITE-MONITORING-MIB", "es1dc1CtrlRelsInvertRel4StateForXSeconds"), ("SITE-MONITORING-MIB", "es1dc1CtrlGenericClearMyEvents"), ("SITE-MONITORING-MIB", "es1dc1CtrlGenericClearAllEvents"), ("SITE-MONITORING-MIB", "es1dc1CtrlGenericAddEvent"), ("SITE-MONITORING-MIB", "es1dc1CtrlGenericAddMajorEvent"), ("SITE-MONITORING-MIB", "es1dc1CtrlGenericResetDefaultNamesAndGroups"), ("SITE-MONITORING-MIB", "es1dc1CtrlGenericResetDefaultNamesAndGroupsRecursive"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    es1dc1GlobalGroup = es1dc1GlobalGroup.setStatus('current')
if mibBuilder.loadTexts: es1dc1GlobalGroup.setDescription('text')
es1dc1NotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 20, 1, 19, 1, 2)).setObjects(("SITE-MONITORING-MIB", "es1dc1NotificationOfEvent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    es1dc1NotificationGroup = es1dc1NotificationGroup.setStatus('current')
if mibBuilder.loadTexts: es1dc1NotificationGroup.setDescription('text')
extensions = MibIdentifier((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 21))
es1InverterSystems = MibIdentifier((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 25))
es1RemotePowerFeedingSystems = MibIdentifier((1, 3, 6, 1, 4, 1, 26854, 3, 2, 1, 20, 1, 28))
mibBuilder.exportSymbols("SITE-MONITORING-MIB", siteV1DataInventoryCANBusNodeIDs=siteV1DataInventoryCANBusNodeIDs, es1EventNumber=es1EventNumber, es1dc1DataTable=es1dc1DataTable, siteV1CfgUsersUser3LoginPassword=siteV1CfgUsersUser3LoginPassword, es1Event=es1Event, siteV1AlarmEntryStatus=siteV1AlarmEntryStatus, es1dc1CtrlSystemBackToFloat=es1dc1CtrlSystemBackToFloat, siteV1CfgSNMPSNMPTrapTargetsIP=siteV1CfgSNMPSNMPTrapTargetsIP, es1dc1NotificationGroup=es1dc1NotificationGroup, es1dc1DataBatCalculatedAutonomy=es1dc1DataBatCalculatedAutonomy, es1ConfigEntry=es1ConfigEntry, es1GlobalAlarmSeverityLevel=es1GlobalAlarmSeverityLevel, siteV1CfgXMLXMLEventPostingToSecOnlyIfPrimFail=siteV1CfgXMLXMLEventPostingToSecOnlyIfPrimFail, es1dc1EventNumber=es1dc1EventNumber, siteV1NotificationOfEvent=siteV1NotificationOfEvent, siteV1CtrlControllerAdvancedFunctionGenericCommandExecution=siteV1CtrlControllerAdvancedFunctionGenericCommandExecution, es1dc1Data=es1dc1Data, siteV1DataNetworkCurrentMACAddress=siteV1DataNetworkCurrentMACAddress, siteV1DescDescriptionDescription=siteV1DescDescriptionDescription, es1dc1CfgDigInputsDigInput2Name=es1dc1CfgDigInputsDigInput2Name, siteV1ConfigName=siteV1ConfigName, siteV1CtrlControllerRebootControllerWithoutSavingRecords=siteV1CtrlControllerRebootControllerWithoutSavingRecords, PYSNMP_MODULE_ID=siteMonitoringMIB, es1dc1NotificationPrefix=es1dc1NotificationPrefix, es1DataNumber=es1DataNumber, es1ControlIndex=es1ControlIndex, es1dc1Event=es1dc1Event, es1NotificationOfEvent=es1NotificationOfEvent, es1dc1DataRectifiersNumberOfRemoteOffRectifier=es1dc1DataRectifiersNumberOfRemoteOffRectifier, siteV1CtrlControllerRebootController=siteV1CtrlControllerRebootController, es1AlarmStartTime=es1AlarmStartTime, siteV1DescDescriptionInfo=siteV1DescDescriptionInfo, siteV1DescControllerSoftwareRevision=siteV1DescControllerSoftwareRevision, siteV1CfgXMLXMLEventsSecPostLogin=siteV1CfgXMLXMLEventsSecPostLogin, siteV1Compliance=siteV1Compliance, siteV1ComplianceGroups=siteV1ComplianceGroups, es1dc1EventSeverityLevel=es1dc1EventSeverityLevel, es1AlarmSeverityLevel=es1AlarmSeverityLevel, es1dc1DescriptionTable=es1dc1DescriptionTable, es1dc1CfgBatBatTestType=es1dc1CfgBatBatTestType, siteV1DescriptionIndex=siteV1DescriptionIndex, es1DescDescriptionDescription=es1DescDescriptionDescription, es1Data=es1Data, es1dc1DataSmartEnergySmartEnergySavings=es1dc1DataSmartEnergySmartEnergySavings, es1dc1DescDescriptionDescription=es1dc1DescDescriptionDescription, siteV1DescDescriptionProvince=siteV1DescDescriptionProvince, siteV1CtrlTimeResetUptime=siteV1CtrlTimeResetUptime, siteV1AlarmIndex=siteV1AlarmIndex, es1dc1DescDescriptionDistributionModuleManufacturingDate=es1dc1DescDescriptionDistributionModuleManufacturingDate, es1NotificationPrefix=es1NotificationPrefix, es1CtrlGenericResetDefaultNamesAndGroupsRecursive=es1CtrlGenericResetDefaultNamesAndGroupsRecursive, es1dc1=es1dc1, es1dc1DataRectifiersNumberOfACFailRectifier=es1dc1DataRectifiersNumberOfACFailRectifier, siteV1CfgNetworkDNSIfStatic=siteV1CfgNetworkDNSIfStatic, es1dc1DescriptionNumber=es1dc1DescriptionNumber, siteV1=siteV1, siteV1ConfigEntry=siteV1ConfigEntry, siteV1CfgScriptingNumberofErrorsbeforetriggeringalarm=siteV1CfgScriptingNumberofErrorsbeforetriggeringalarm, siteV1DataControllerFTPServerStatus=siteV1DataControllerFTPServerStatus, siteV1CtrlGenericResetDefaultNamesAndGroups=siteV1CtrlGenericResetDefaultNamesAndGroups, es1dc1CtrlLVDOpenTheLVD=es1dc1CtrlLVDOpenTheLVD, es1dc1DataBatNextScheduledBatTest=es1dc1DataBatNextScheduledBatTest, siteV1CfgRadiusAuthenticationRadiusPort=siteV1CfgRadiusAuthenticationRadiusPort, siteV1CfgTimeSNTPTimeRecoveryRefresh=siteV1CfgTimeSNTPTimeRecoveryRefresh, es1EventId=es1EventId, es1CtrlGenericAddEvent=es1CtrlGenericAddEvent, siteV1CtrlInventoryUpgradeNodeFirmware=siteV1CtrlInventoryUpgradeNodeFirmware, siteV1CfgSNMPSNMPGETMinSecurityLevel=siteV1CfgSNMPSNMPGETMinSecurityLevel, siteV1CfgWebServerHttpsWebServerPort=siteV1CfgWebServerHttpsWebServerPort, es1Compliance=es1Compliance, siteV1DescControllerStarterVersion=siteV1DescControllerStarterVersion, es1dc1CfgBatMaxPosTempCompensation=es1dc1CfgBatMaxPosTempCompensation, siteV1CtrlInventoryStartNewInventory=siteV1CtrlInventoryStartNewInventory, es1dc1DescDescriptionReference=es1dc1DescDescriptionReference, siteV1CfgXMLXMLEventPostingTimeout=siteV1CfgXMLXMLEventPostingTimeout, siteV1CtrlInventoryRemoveAbsentEquipments=siteV1CtrlInventoryRemoveAbsentEquipments, siteV1CtrlDataRecordsArchiveDataRecords=siteV1CtrlDataRecordsArchiveDataRecords, es1dc1ConfigEntryStatus=es1dc1ConfigEntryStatus, es1dc1CfgLVDBatLVDNodeId=es1dc1CfgLVDBatLVDNodeId, siteV1DescDescriptionGroup1=siteV1DescDescriptionGroup1, es1CtrlGenericResetDefaultNamesAndGroups=es1CtrlGenericResetDefaultNamesAndGroups, es1dc1GlobalGroup=es1dc1GlobalGroup, siteV1CfgEmailEnableEmailFeature=siteV1CfgEmailEnableEmailFeature, siteV1CfgNetworkDHCPEnabled=siteV1CfgNetworkDHCPEnabled, siteV1CfgEmailMailSender=siteV1CfgEmailMailSender, es1dc1CfgDigInputsDigInput3NormallyClosed=es1dc1CfgDigInputsDigInput3NormallyClosed, es1EventDateTime=es1EventDateTime, es1dc1DescriptionEntry=es1dc1DescriptionEntry, siteV1CfgUsersAdministratorLoginPassword=siteV1CfgUsersAdministratorLoginPassword, es1dc1ConfigList=es1dc1ConfigList, es1dc1ConfigValue=es1dc1ConfigValue, siteV1DescriptionName=siteV1DescriptionName, es1dc1DataSystemRatioDeliveredOnAvailablePower=es1dc1DataSystemRatioDeliveredOnAvailablePower, es1dc1CfgBatBatTempHysteresis=es1dc1CfgBatBatTempHysteresis, siteV1CfgSNMPSNMPV3PrivacyPassword=siteV1CfgSNMPSNMPV3PrivacyPassword, siteV1CfgGenericReadAccessUserNumbers=siteV1CfgGenericReadAccessUserNumbers, es1dc1EventName=es1dc1EventName, es1dc1CtrlRelsInvertRel3StateForXSeconds=es1dc1CtrlRelsInvertRel3StateForXSeconds, es1dc1CtrlRelsInvertRel4StateForXSeconds=es1dc1CtrlRelsInvertRel4StateForXSeconds, es1Notifications=es1Notifications, es1dc1CfgBatTempCompensationSlope=es1dc1CfgBatTempCompensationSlope, siteV1CtrlInventorySaveCANOpenLSSConf=siteV1CtrlInventorySaveCANOpenLSSConf, es1dc1CfgBatMaxDepthOfDischargeforAutonomyEstimation=es1dc1CfgBatMaxDepthOfDischargeforAutonomyEstimation, es1dc1CfgDCBusDCBusVoltageHigh=es1dc1CfgDCBusDCBusVoltageHigh, es1dc1CfgBatBoostAutomatic=es1dc1CfgBatBoostAutomatic, es1dc1CfgBatBatTestDuration=es1dc1CfgBatBatTestDuration, siteV1CtrlFilesMoveUserUploadedFile=siteV1CtrlFilesMoveUserUploadedFile, es1CtrlGenericClearMyEvents=es1CtrlGenericClearMyEvents, siteV1CfgNetworkDefaultGatewayIfStatic=siteV1CfgNetworkDefaultGatewayIfStatic, es1DescriptionTable=es1DescriptionTable, es1Alarm=es1Alarm, es1dc1CfgDigInputsDigInput5Name=es1dc1CfgDigInputsDigInput5Name, siteV1CtrlTimeSetUTCTime=siteV1CtrlTimeSetUTCTime, es1dc1DataRectifiersNumberOfDCFailRectifier=es1dc1DataRectifiersNumberOfDCFailRectifier, es1ConfigEntryStatus=es1ConfigEntryStatus, es1Control=es1Control, siteV1CtrlControllerSaveConfAndRebootController=siteV1CtrlControllerSaveConfAndRebootController, siteV1DescDescriptionCity=siteV1DescDescriptionCity, siteV1DataIndex=siteV1DataIndex, siteV1CtrlScriptingControlLuaScript=siteV1CtrlScriptingControlLuaScript, siteV1ConfigValue=siteV1ConfigValue, siteV1Control=siteV1Control, es1dc1CfgRelsDryAlarm3AlternativeBooleanCond=es1dc1CfgRelsDryAlarm3AlternativeBooleanCond, siteV1DescDescriptionSiteName=siteV1DescDescriptionSiteName, siteV1DescControllerUserFTPServerVersion=siteV1DescControllerUserFTPServerVersion, es1ConfigTable=es1ConfigTable, es1dc1CfgLVDLVDDisconnectDelay=es1dc1CfgLVDLVDDisconnectDelay, es1dc1CfgRectifiersMinimalNumberOfPresentRectifiers=es1dc1CfgRectifiersMinimalNumberOfPresentRectifiers, es1EventSeverityType=es1EventSeverityType, es1dc1CfgDCBusDCBusVoltageExtraLowHysteresis=es1dc1CfgDCBusDCBusVoltageExtraLowHysteresis, es1dc1NotificationOfEvent=es1dc1NotificationOfEvent, siteV1CtrlControllerCleanandSaveXMLUserConf=siteV1CtrlControllerCleanandSaveXMLUserConf, es1dc1CfgDCBusDCBusVoltageLow=es1dc1CfgDCBusDCBusVoltageLow, siteMonitoringMIB=siteMonitoringMIB, es1dc1DataSensorsPulseCounter4=es1dc1DataSensorsPulseCounter4, es1dc1CfgBatBoostActivationLowVoltage=es1dc1CfgBatBoostActivationLowVoltage, siteV1CfgXMLXMLEventsPrimPostLogin=siteV1CfgXMLXMLEventsPrimPostLogin, es1DescriptionIndex=es1DescriptionIndex, siteV1DataControllerLicensedOptions=siteV1DataControllerLicensedOptions, es1dc1CfgGenericEventTableLengthByRectifier=es1dc1CfgGenericEventTableLengthByRectifier, siteV1CfgDataRecordsAutoArchivePeriodDataRecord=siteV1CfgDataRecordsAutoArchivePeriodDataRecord, es1dc1CtrlGenericAddMajorEvent=es1dc1CtrlGenericAddMajorEvent, siteV1CfgEmailSmtpServer=siteV1CfgEmailSmtpServer, es1GlobalAlarmSeverityType=es1GlobalAlarmSeverityType, es1dc1CfgBatBoostTerminationTime=es1dc1CfgBatBoostTerminationTime, es1dc1CfgPLCNumberOfPLCAlarm=es1dc1CfgPLCNumberOfPLCAlarm, es1CtrlGenericAddMajorEvent=es1CtrlGenericAddMajorEvent, siteV1ControlNumber=siteV1ControlNumber, siteV1DescDescriptionSiteNumber=siteV1DescDescriptionSiteNumber, siteV1DataControllerFreeFlashMemorySpace=siteV1DataControllerFreeFlashMemorySpace, siteV1CfgSNMPSNMPV3TrapAuthPassword=siteV1CfgSNMPSNMPV3TrapAuthPassword, es1dc1CfgDCBusDCBusVoltageExtraLow=es1dc1CfgDCBusDCBusVoltageExtraLow, siteV1CfgInventoryLSSCANidrange=siteV1CfgInventoryLSSCANidrange, es1DescriptionValue=es1DescriptionValue, siteV1DataCloudLinkCloudLinkState=siteV1DataCloudLinkCloudLinkState, siteV1DataNetworkCurrentIPMask=siteV1DataNetworkCurrentIPMask, siteV1CfgSNMPMinimalEventSeverityForTraps=siteV1CfgSNMPMinimalEventSeverityForTraps, siteV1CtrlControllerSaveXMLUserConf=siteV1CtrlControllerSaveXMLUserConf, es1dc1EventDateTime=es1dc1EventDateTime, es1GlobalAlarmSeverityTypeInt=es1GlobalAlarmSeverityTypeInt, es1dc1CfgRelsDryAlarm2AlternativeBooleanCond=es1dc1CfgRelsDryAlarm2AlternativeBooleanCond, es1dc1DataRectifiersRectifiersOutPowerMax=es1dc1DataRectifiersRectifiersOutPowerMax, siteV1EventSeverityType=siteV1EventSeverityType, es1dc1EventEntryStatus=es1dc1EventEntryStatus, es1ControlEntryStatus=es1ControlEntryStatus, siteV1CtrlControllerReloadTranslations=siteV1CtrlControllerReloadTranslations, siteV1CfgSNMPSiteDescriptionIdsIncludedInTraps=siteV1CfgSNMPSiteDescriptionIdsIncludedInTraps, es1dc1AlarmName=es1dc1AlarmName, es1dc1DataBatBatInputCurrent=es1dc1DataBatBatInputCurrent, es1dc1DataRectifiersNumberOfOverTempRectifier=es1dc1DataRectifiersNumberOfOverTempRectifier, es1dc1CtrlBatCorrectBatCurrentOffset=es1dc1CtrlBatCorrectBatCurrentOffset, es1dc1CfgGenericWriteAccessUserNumbers=es1dc1CfgGenericWriteAccessUserNumbers, siteV1ConfigTable=siteV1ConfigTable, es1dc1CtrlGenericResetDefaultNamesAndGroupsRecursive=es1dc1CtrlGenericResetDefaultNamesAndGroupsRecursive, es1GlobalStatus=es1GlobalStatus, es1dc1DataValue=es1dc1DataValue, es1dc1Alarm=es1dc1Alarm, es1dc1CfgPLCNumberOfPLCData=es1dc1CfgPLCNumberOfPLCData, siteV1CfgCloudLinkCloudCluster=siteV1CfgCloudLinkCloudCluster, siteV1CfgEmailMinimalSeverityTypeToSendMail=siteV1CfgEmailMinimalSeverityTypeToSendMail, es1dc1DataList=es1dc1DataList, es1ConfigIndex=es1ConfigIndex, es1NotificationGroup=es1NotificationGroup, siteV1CfgInventoryLSSCANOpenSavedConf=siteV1CfgInventoryLSSCANOpenSavedConf, es1dc1ConfigTable=es1dc1ConfigTable, siteV1CfgPLCNumberOfPLCData=siteV1CfgPLCNumberOfPLCData, siteV1DescDescriptionLongitude=siteV1DescDescriptionLongitude, es1dc1ComplianceGroups=es1dc1ComplianceGroups, es1dc1Description=es1dc1Description, siteV1DescControllerFactoryFTPServerVersion=siteV1DescControllerFactoryFTPServerVersion, es1dc1CfgRelsDryAlarm1AlternativeBooleanCond=es1dc1CfgRelsDryAlarm1AlternativeBooleanCond, es1dc1CfgDCBusDCBusVoltageHighHysteresis=es1dc1CfgDCBusDCBusVoltageHighHysteresis, es1dc1FullCompliance=es1dc1FullCompliance, es1dc1AlarmSeverityLevel=es1dc1AlarmSeverityLevel, es1DescriptionList=es1DescriptionList, siteV1DescControllerFactoryCompasVersion=siteV1DescControllerFactoryCompasVersion, es1AlarmSeverityType=es1AlarmSeverityType, es1dc1AlarmStopTime=es1dc1AlarmStopTime, es1dc1DataEntryStatus=es1dc1DataEntryStatus, siteV1CfgInventoryRequiredCANBusNodeIDs=siteV1CfgInventoryRequiredCANBusNodeIDs, siteV1DataList=siteV1DataList, es1dc1CtrlSystemStartBoostMode=es1dc1CtrlSystemStartBoostMode, es1dc1CfgSmartEnergySmartEnergyBooleanCond=es1dc1CfgSmartEnergySmartEnergyBooleanCond, es1AlarmEntryStatus=es1AlarmEntryStatus, es1dc1ConfigEntry=es1dc1ConfigEntry, siteV1CfgGenericGenerateEventOnControlExecution=siteV1CfgGenericGenerateEventOnControlExecution, es1DescriptionNumber=es1DescriptionNumber, siteV1NotificationGroup=siteV1NotificationGroup, es1dc1DataSmartEnergySystemLossWithoutOptimisation=es1dc1DataSmartEnergySystemLossWithoutOptimisation, siteV1DataControllerCPUPercentageUsage=siteV1DataControllerCPUPercentageUsage, siteMonitoring=siteMonitoring, es1dc1DataName=es1dc1DataName, siteV1CfgRadiusAuthenticationRadiusSecret=siteV1CfgRadiusAuthenticationRadiusSecret, siteV1DescriptionEntryStatus=siteV1DescriptionEntryStatus, es1dc1CfgDigInputsDigInput6Name=es1dc1CfgDigInputsDigInput6Name, siteV1CfgWebServerWebServerSecurityEnabled=siteV1CfgWebServerWebServerSecurityEnabled, es1dc1CfgDCBusDCBusFloatVoltageat25degC=es1dc1CfgDCBusDCBusFloatVoltageat25degC, es1dc1DescriptionName=es1dc1DescriptionName, siteV1DataValue=siteV1DataValue, siteV1DescDescriptionPhoneNumber=siteV1DescDescriptionPhoneNumber, es1dc1DescriptionEntryStatus=es1dc1DescriptionEntryStatus, es1dc1DescDescriptionDistributionModuleHardwareReference=es1dc1DescDescriptionDistributionModuleHardwareReference, siteV1Config=siteV1Config, siteV1ControlTable=siteV1ControlTable, es1dc1GlobalAlarmSeverityTypeInt=es1dc1GlobalAlarmSeverityTypeInt, siteV1CtrlNetworkApplyNetworkConf=siteV1CtrlNetworkApplyNetworkConf, es1dc1GlobalStatus=es1dc1GlobalStatus, siteV1DescDescriptionShortDescription=siteV1DescDescriptionShortDescription, es1dc1CtrlGenericAddEvent=es1dc1CtrlGenericAddEvent, es1dc1CfgLVDLVDDisconnectVoltage=es1dc1CfgLVDLVDDisconnectVoltage, siteV1CfgCloudLinkCloudPort=siteV1CfgCloudLinkCloudPort, es1AlarmIndex=es1AlarmIndex, siteV1EventName=siteV1EventName, siteV1DescDescriptionPostalCode=siteV1DescDescriptionPostalCode, es1dc1DataACBusMinutesSinceLastACFailEnd=es1dc1DataACBusMinutesSinceLastACFailEnd, es1dc1CfgBatBatTestDischargeCurrent=es1dc1CfgBatBatTestDischargeCurrent, siteV1EventDateTime=siteV1EventDateTime, es1dc1CfgDigInputsDigInput2NormallyClosed=es1dc1CfgDigInputsDigInput2NormallyClosed, siteV1CfgCloudLinkCloudEnabled=siteV1CfgCloudLinkCloudEnabled, es1dc1AlarmEntry=es1dc1AlarmEntry, es1dc1DataACBusMinutesSinceLastACFailBegin=es1dc1DataACBusMinutesSinceLastACFailBegin, es1dc1DataRectifiersRectifiersOutPower=es1dc1DataRectifiersRectifiersOutPower, siteV1CfgSNMPSNMPV3AuthAlgorithm=siteV1CfgSNMPSNMPV3AuthAlgorithm, siteV1CfgInventorySystemNodesDefinition=siteV1CfgInventorySystemNodesDefinition, es1ControlValue=es1ControlValue, es1dc1EventIndex=es1dc1EventIndex, siteV1CfgEmailSmtpUserLoginPassword=siteV1CfgEmailSmtpUserLoginPassword, siteV1CfgEmailSmtpDomain=siteV1CfgEmailSmtpDomain, es1dc1ControlTable=es1dc1ControlTable, es1dc1AlarmStartTime=es1dc1AlarmStartTime, es1dc1ControlEntryStatus=es1dc1ControlEntryStatus, siteV1DescDescriptionGroup4=siteV1DescDescriptionGroup4, es1dc1CtrlGenericClearMyEvents=es1dc1CtrlGenericClearMyEvents, energySystems=energySystems)
mibBuilder.exportSymbols("SITE-MONITORING-MIB", es1dc1ControlNumber=es1dc1ControlNumber, es1dc1DataBatBatInputPower=es1dc1DataBatBatInputPower, siteV1CfgCloudLinkCloudServer=siteV1CfgCloudLinkCloudServer, es1dc1DescDescriptionProductName=es1dc1DescDescriptionProductName, siteV1CfgSNMPSNMPV3EngineID=siteV1CfgSNMPSNMPV3EngineID, es1dc1DataSmartEnergyRectifierModelUsedForCalculation=es1dc1DataSmartEnergyRectifierModelUsedForCalculation, siteV1DescControllerCPU=siteV1DescControllerCPU, es1dc1ControlName=es1dc1ControlName, siteV1AlarmSeverityType=siteV1AlarmSeverityType, siteV1NotificationPrefix=siteV1NotificationPrefix, es1GlobalGroup=es1GlobalGroup, atsa=atsa, es1dc1CtrlDigInputsSetDigInput4CounterValue=es1dc1CtrlDigInputsSetDigInput4CounterValue, siteV1CfgSNMPSNMPV3TrapUsername=siteV1CfgSNMPSNMPV3TrapUsername, es1ControlEntry=es1ControlEntry, es1dc1DataBatBatTestDuration=es1dc1DataBatBatTestDuration, es1InverterSystems=es1InverterSystems, es1dc1AlarmSeverityType=es1dc1AlarmSeverityType, siteV1CfgXMLXMLTablesToPostOnXMLEvent=siteV1CfgXMLXMLTablesToPostOnXMLEvent, siteV1EventNumber=siteV1EventNumber, es1dc1ControlIndex=es1dc1ControlIndex, siteV1ConfigList=siteV1ConfigList, es1dc1CtrlSystemStartBatTest=es1dc1CtrlSystemStartBatTest, siteV1AlarmStopTime=siteV1AlarmStopTime, es1dc1DataRelsRel1State=es1dc1DataRelsRel1State, es1dc1CfgBatBatStringCapacity=es1dc1CfgBatBatStringCapacity, extensions=extensions, es1dc1DataEntry=es1dc1DataEntry, es1dc1DataRectifiersNumberOfRectifierMax=es1dc1DataRectifiersNumberOfRectifierMax, es1dc1AlarmActive=es1dc1AlarmActive, siteV1GlobalAlarmSeverityType=siteV1GlobalAlarmSeverityType, es1EventName=es1EventName, es1dc1DataBatPreviousBatTestDischargedCapacity=es1dc1DataBatPreviousBatTestDischargedCapacity, es1dc1CfgBatMinimalCurrentForDischargingAlarm=es1dc1CfgBatMinimalCurrentForDischargingAlarm, siteV1CfgSNMPSNMPActivated=siteV1CfgSNMPSNMPActivated, siteV1CfgEmailMailRecipients=siteV1CfgEmailMailRecipients, es1ControlTable=es1ControlTable, es1dc1ConfigIndex=es1dc1ConfigIndex, atsaUs=atsaUs, siteV1DataDataRecordsTotalFifoSizeOfSecondRecords=siteV1DataDataRecordsTotalFifoSizeOfSecondRecords, siteV1DescControllerUserCompasVersion=siteV1DescControllerUserCompasVersion, es1ComplianceGroups=es1ComplianceGroups, siteV1CtrlInventoryResetCANBusNode=siteV1CtrlInventoryResetCANBusNode, es1dc1DataDCBusBusVoltage=es1dc1DataDCBusBusVoltage, es1dc1Config=es1dc1Config, es1dc1DataBatPreviousBatTestFinalVoltage=es1dc1DataBatPreviousBatTestFinalVoltage, siteV1Notifications=siteV1Notifications, siteV1CfgNetworkIPAddressIfStatic=siteV1CfgNetworkIPAddressIfStatic, siteV1CfgUsersUser1LoginPassword=siteV1CfgUsersUser1LoginPassword, es1dc1CfgBatBatTestDischargeRatio=es1dc1CfgBatBatTestDischargeRatio, es1dc1EventEntry=es1dc1EventEntry, siteV1CfgUsersUser4LoginPassword=siteV1CfgUsersUser4LoginPassword, siteV1ControlName=siteV1ControlName, es1DescriptionEntry=es1DescriptionEntry, es1dc1CfgRectifiersRectifierModel=es1dc1CfgRectifiersRectifierModel, siteV1AlarmSeverityLevel=siteV1AlarmSeverityLevel, es1dc1DataLVDLVDState=es1dc1DataLVDLVDState, es1dc1DescDescriptionManufacturingDate=es1dc1DescDescriptionManufacturingDate, siteV1Event=siteV1Event, es1dc1DataRectifiersRectifiersOutCurrentMax=es1dc1DataRectifiersRectifiersOutCurrentMax, es1CfgEnergyMeterNumberOfGenericPulseEnergyCounter=es1CfgEnergyMeterNumberOfGenericPulseEnergyCounter, es1dc1CfgBatBatTempHigh=es1dc1CfgBatBatTempHigh, es1EventEntry=es1EventEntry, es1dc1CfgBatBatTestMinimalDischargeCurrent=es1dc1CfgBatBatTestMinimalDischargeCurrent, es1dc1AlarmSummary=es1dc1AlarmSummary, es1dc1CtrlAdvancedSetMCUSpecificConfId=es1dc1CtrlAdvancedSetMCUSpecificConfId, siteV1ConfigEntryStatus=siteV1ConfigEntryStatus, siteV1GlobalAlarmSeverityLevel=siteV1GlobalAlarmSeverityLevel, es1dc1DataBatLastBatTestFinalVoltage=es1dc1DataBatLastBatTestFinalVoltage, es1dc1DataRectifiersNumberOfAbsentRectifier=es1dc1DataRectifiersNumberOfAbsentRectifier, atsaEuDevices=atsaEuDevices, siteV1AlarmActive=siteV1AlarmActive, siteV1DataTable=siteV1DataTable, siteV1EventTable=siteV1EventTable, siteV1DataEntryStatus=siteV1DataEntryStatus, siteV1CfgSNMPSNMPSETMinSecurityLevel=siteV1CfgSNMPSNMPSETMinSecurityLevel, siteV1ControlList=siteV1ControlList, es1dc1CfgDCBusDCBusVoltageExtraHighHysteresis=es1dc1CfgDCBusDCBusVoltageExtraHighHysteresis, es1dc1CfgDigInputsDigInput3Name=es1dc1CfgDigInputsDigInput3Name, es1dc1CtrlSystemForceBatTest=es1dc1CtrlSystemForceBatTest, es1dc1DataSmartEnergyEfficiencyOptimizedNumberOfRectifier=es1dc1DataSmartEnergyEfficiencyOptimizedNumberOfRectifier, siteV1CfgPLCNumberOfPLCAlarm=siteV1CfgPLCNumberOfPLCAlarm, es1dc1DataLoadLoadPower=es1dc1DataLoadLoadPower, siteV1DataDataRecordsTotalFifoSizeOfHourRecords=siteV1DataDataRecordsTotalFifoSizeOfHourRecords, siteV1CfgGenericGenerateEventOnConfChanges=siteV1CfgGenericGenerateEventOnConfChanges, siteV1AlarmTable=siteV1AlarmTable, es1dc1DataIndex=es1dc1DataIndex, es1dc1CfgBatBatChargeCurrentLimit=es1dc1CfgBatBatChargeCurrentLimit, siteV1CfgWebServerWebServerPort=siteV1CfgWebServerWebServerPort, es1dc1CtrlLVDCloseTheLVD=es1dc1CtrlLVDCloseTheLVD, siteV1Alarm=siteV1Alarm, siteV1DescDescriptionContactName=siteV1DescDescriptionContactName, es1dc1ControlList=es1dc1ControlList, es1dc1DescDescriptionSoftwareReference=es1dc1DescDescriptionSoftwareReference, siteV1EventId=siteV1EventId, es1AlarmActive=es1AlarmActive, es1dc1EventSeverityType=es1dc1EventSeverityType, es1AlarmEntry=es1AlarmEntry, es1dc1DataBatBatCurrentIntegration=es1dc1DataBatBatCurrentIntegration, siteV1AlarmEntry=siteV1AlarmEntry, es1dc1DataRectifiersNumberOfActiveRectifier=es1dc1DataRectifiersNumberOfActiveRectifier, es1ConfigName=es1ConfigName, es1dc1ConfigNumber=es1dc1ConfigNumber, es1DCSystems=es1DCSystems, es1dc1DataNumber=es1dc1DataNumber, siteV1CfgNetworkSubnetMaskIfStatic=siteV1CfgNetworkSubnetMaskIfStatic, es1dc1CtrlGenericResetDefaultNamesAndGroups=es1dc1CtrlGenericResetDefaultNamesAndGroups, siteV1DataControllerMonitoringMemoryUsed=siteV1DataControllerMonitoringMemoryUsed, es1dc1CfgDigInputsDigInput1NormallyClosed=es1dc1CfgDigInputsDigInput1NormallyClosed, es1dc1DataBatPreviousBatTestDuration=es1dc1DataBatPreviousBatTestDuration, siteV1Data=siteV1Data, siteV1CfgGenericEventTableLength=siteV1CfgGenericEventTableLength, siteV1CfgScriptingEnabledscripts=siteV1CfgScriptingEnabledscripts, es1dc1CfgBatBatTestInterval=es1dc1CfgBatBatTestInterval, es1ControlNumber=es1ControlNumber, es1dc1CtrlSaveSaveConfInMCU=es1dc1CtrlSaveSaveConfInMCU, siteV1CtrlTimeForceSNTPTimeRefresh=siteV1CtrlTimeForceSNTPTimeRefresh, es1RemotePowerFeedingSystems=es1RemotePowerFeedingSystems, siteV1AlarmSummary=siteV1AlarmSummary, siteV1DescriptionValue=siteV1DescriptionValue, siteV1DescDescriptionAltitude=siteV1DescDescriptionAltitude, siteV1EventEntry=siteV1EventEntry, es1dc1CfgBatBatTestSchedulerCronRule=es1dc1CfgBatBatTestSchedulerCronRule, es1dc1DataRelsRel2State=es1dc1DataRelsRel2State, siteV1CtrlControllerEmulateRecords=siteV1CtrlControllerEmulateRecords, es1dc1CtrlBatResetLastBatTestState=es1dc1CtrlBatResetLastBatTestState, siteV1ControlEntry=siteV1ControlEntry, siteV1CfgGenericGenerateEventOnAlarmAcknowledge=siteV1CfgGenericGenerateEventOnAlarmAcknowledge, es1dc1DataBatLastBatTestDischargedCapacity=es1dc1DataBatLastBatTestDischargedCapacity, es1dc1DataBatBatTemp=es1dc1DataBatBatTemp, es1dc1CfgGenericReadAccessUserNumbers=es1dc1CfgGenericReadAccessUserNumbers, es1dc1CfgSensorsAmbientTempHigh=es1dc1CfgSensorsAmbientTempHigh, siteV1CfgXMLXMLEventsPrimPostURL=siteV1CfgXMLXMLEventsPrimPostURL, es1dc1CfgSensorsAmbientTempLow=es1dc1CfgSensorsAmbientTempLow, es1dc1DataSystemDCMode=es1dc1DataSystemDCMode, siteV1DataNetworkCurrentIPAddress=siteV1DataNetworkCurrentIPAddress, siteV1CfgWebServerWebAuthenticationMethod=siteV1CfgWebServerWebAuthenticationMethod, es1AlarmName=es1AlarmName, es1dc1AlarmTable=es1dc1AlarmTable, es1ConfigNumber=es1ConfigNumber, siteV1CfgXMLXMLEventsSecPostPassword=siteV1CfgXMLXMLEventsSecPostPassword, siteV1CtrlFilesFlashBinary=siteV1CtrlFilesFlashBinary, es1dc1DescriptionIndex=es1dc1DescriptionIndex, siteV1CfgGenericWriteAccessUserNumbers=siteV1CfgGenericWriteAccessUserNumbers, siteV1CfgWebServerDefaultPage=siteV1CfgWebServerDefaultPage, siteV1DescriptionList=siteV1DescriptionList, es1dc1DataBatMinutesSinceLastTestBat=es1dc1DataBatMinutesSinceLastTestBat, siteV1AlarmStartTime=siteV1AlarmStartTime, siteV1GlobalAlarmSeverityTypeInt=siteV1GlobalAlarmSeverityTypeInt, siteV1ControlEntryStatus=siteV1ControlEntryStatus, siteV1DataEntry=siteV1DataEntry, siteV1DataName=siteV1DataName, siteV1CtrlControllerReloadLicense=siteV1CtrlControllerReloadLicense, siteV1DataTimeDateAndTimeUTC=siteV1DataTimeDateAndTimeUTC, atsaCorporate=atsaCorporate, siteV1AlarmName=siteV1AlarmName, es1=es1, es1DescriptionName=es1DescriptionName, es1dc1GlobalAlarmSeverityType=es1dc1GlobalAlarmSeverityType, es1EventEntryStatus=es1EventEntryStatus, es1dc1DescDescriptionDistributionModuleSoftwareReference=es1dc1DescDescriptionDistributionModuleSoftwareReference, es1dc1DataLoadLoadCurrent=es1dc1DataLoadLoadCurrent, es1dc1CfgBatPeukertNumber=es1dc1CfgBatPeukertNumber, es1dc1CfgDigInputsDigInput6NormallyClosed=es1dc1CfgDigInputsDigInput6NormallyClosed, siteV1CtrlInventoryCancelFirmwareUpgrade=siteV1CtrlInventoryCancelFirmwareUpgrade, siteV1EventSeverityLevel=siteV1EventSeverityLevel, siteV1CtrlDataRecordsExportDataRecordsinCSV=siteV1CtrlDataRecordsExportDataRecordsinCSV, es1dc1CtrlGenericClearAllEvents=es1dc1CtrlGenericClearAllEvents, es1dc1DescriptionValue=es1dc1DescriptionValue, siteV1CtrlGenericResetDefaultNamesAndGroupsRecursive=siteV1CtrlGenericResetDefaultNamesAndGroupsRecursive, es1dc1DataBatPreviousBatTestDischargedCapacityRatio=es1dc1DataBatPreviousBatTestDischargedCapacityRatio, es1dc1ControlEntry=es1dc1ControlEntry, siteV1CfgTimeSNTPTimeServer=siteV1CfgTimeSNTPTimeServer, es1dc1CfgBatBatTestRequMinutesWithoutMainsFail=es1dc1CfgBatBatTestRequMinutesWithoutMainsFail, es1dc1DescDescriptionHardwareReference=es1dc1DescDescriptionHardwareReference, siteV1DescDescriptionGroup3=siteV1DescDescriptionGroup3, es1dc1CfgDCBusDCBusVoltageLowHysteresis=es1dc1CfgDCBusDCBusVoltageLowHysteresis, es1dc1CfgBatCurrentHysteresisForDischargingAlarm=es1dc1CfgBatCurrentHysteresisForDischargingAlarm, siteV1DescControllerCard=siteV1DescControllerCard, siteV1CfgUsersUser5LoginPassword=siteV1CfgUsersUser5LoginPassword, es1dc1DescDescriptionDistributionModuleSerialNumber=es1dc1DescDescriptionDistributionModuleSerialNumber, es1dc1DataBatPreviousBatTestState=es1dc1DataBatPreviousBatTestState, siteV1DescDescriptionRegion=siteV1DescDescriptionRegion, es1Description=es1Description, es1CtrlGenericClearAllEvents=es1CtrlGenericClearAllEvents, siteV1ControlValue=siteV1ControlValue, es1AlarmTable=es1AlarmTable, es1DescDescriptionReference=es1DescDescriptionReference, siteV1CfgXMLXMLHeartbeatTime=siteV1CfgXMLXMLHeartbeatTime, es1dc1CfgBatBatTempLow=es1dc1CfgBatBatTempLow, es1dc1AlarmIndex=es1dc1AlarmIndex, es1dc1ConfigName=es1dc1ConfigName, es1ConfigValue=es1ConfigValue, siteV1DescDescriptionLatitude=siteV1DescDescriptionLatitude, es1dc1Control=es1dc1Control, siteV1CfgXMLXMLEventPostingActivated=siteV1CfgXMLXMLEventPostingActivated, siteV1CtrlTimeSetLocalTime=siteV1CtrlTimeSetLocalTime, es1dc1AlarmNumber=es1dc1AlarmNumber, es1dc1CfgSensorsAmbientTempHysteresis=es1dc1CfgSensorsAmbientTempHysteresis, siteV1CfgTimeTimeZoneName=siteV1CfgTimeTimeZoneName, es1dc1CfgBatBatTestEndVoltage=es1dc1CfgBatBatTestEndVoltage, siteV1CfgInventoryEthernetExtensionsConf=siteV1CfgInventoryEthernetExtensionsConf, atsaEu=atsaEu, siteV1DescDescriptionStreet=siteV1DescDescriptionStreet, siteV1CfgXMLXMLEventsSecPostURL=siteV1CfgXMLXMLEventsSecPostURL, siteV1CtrlDataRecordsSaveDataRecords=siteV1CtrlDataRecordsSaveDataRecords, siteV1CtrlDataRecordsDeleteAllDataRecords=siteV1CtrlDataRecordsDeleteAllDataRecords, es1AlarmSummary=es1AlarmSummary, siteV1CfgSNMPSNMPV3TrapPrivacyAlgorithm=siteV1CfgSNMPSNMPV3TrapPrivacyAlgorithm, es1dc1CfgDigInputsDigInput5NormallyClosed=es1dc1CfgDigInputsDigInput5NormallyClosed, es1dc1CfgBatMaxNegTempCompensation=es1dc1CfgBatMaxNegTempCompensation, siteV1DataDataRecordsTotalFifoSizeOfDayRecords=siteV1DataDataRecordsTotalFifoSizeOfDayRecords, siteV1CtrlGenericAddEvent=siteV1CtrlGenericAddEvent, es1dc1Compliance=es1dc1Compliance, es1dc1DataBatLastBatTestDischargedCapacityRatio=es1dc1DataBatLastBatTestDischargedCapacityRatio, es1dc1DataBatBatTestState=es1dc1DataBatBatTestState, siteV1CtrlControllerManageFTPServer=siteV1CtrlControllerManageFTPServer, es1dc1CfgDigInputsDigInput4Name=es1dc1CfgDigInputsDigInput4Name, es1dc1EventId=es1dc1EventId, siteV1DescDescriptionCountry=siteV1DescDescriptionCountry, siteV1ConfigNumber=siteV1ConfigNumber, siteV1DataDataRecordsTotalFifoSizeOfMinuteRecords=siteV1DataDataRecordsTotalFifoSizeOfMinuteRecords, siteV1CtrlFilesExtractZipFileinuserupload=siteV1CtrlFilesExtractZipFileinuserupload, es1dc1EventTable=es1dc1EventTable, es1dc1DataRelsRel3State=es1dc1DataRelsRel3State, es1dc1CfgBatBoostTerminationVoltage=es1dc1CfgBatBoostTerminationVoltage, siteV1CtrlGenericClearMyEvents=siteV1CtrlGenericClearMyEvents, siteV1ControlIndex=siteV1ControlIndex, es1dc1CfgGenericEventTableLength=es1dc1CfgGenericEventTableLength, siteV1EventIndex=siteV1EventIndex, siteV1CfgNetworkMaxTransmissionUnit=siteV1CfgNetworkMaxTransmissionUnit, es1dc1DataSensorsAmbientTemp=es1dc1DataSensorsAmbientTemp, es1dc1CfgDCBusDCBusVoltageExtraHigh=es1dc1CfgDCBusDCBusVoltageExtraHigh, siteV1DescDescriptionGroup2=siteV1DescDescriptionGroup2, es1dc1CfgRelsDryAlarm4AlternativeBooleanCond=es1dc1CfgRelsDryAlarm4AlternativeBooleanCond, es1dc1DescDescriptionDistributionModuleProductName=es1dc1DescDescriptionDistributionModuleProductName, siteV1CtrlFilesDownloadFileFromUrl=siteV1CtrlFilesDownloadFileFromUrl, siteV1EventEntryStatus=siteV1EventEntryStatus, es1AlarmStopTime=es1AlarmStopTime, es1dc1DataSystemPreviousDCMode=es1dc1DataSystemPreviousDCMode, es1DescriptionEntryStatus=es1DescriptionEntryStatus, es1ConfigList=es1ConfigList, es1dc1DataRelsRel4State=es1dc1DataRelsRel4State, siteV1CfgSNMPSNMPV3TrapAuthAlgorithm=siteV1CfgSNMPSNMPV3TrapAuthAlgorithm, siteV1CfgTimeSNTPTimeRefresh=siteV1CfgTimeSNTPTimeRefresh, siteV1CfgSNMPSNMPTrapVersion=siteV1CfgSNMPSNMPTrapVersion, siteV1Description=siteV1Description, es1EventIndex=es1EventIndex, siteV1CtrlGenericAddMajorEvent=siteV1CtrlGenericAddMajorEvent, siteV1FullCompliance=siteV1FullCompliance, siteV1CfgXMLXMLEventsPrimPostPassword=siteV1CfgXMLXMLEventsPrimPostPassword, siteV1DataTimeDateAndTimeLocal=siteV1DataTimeDateAndTimeLocal, siteV1DescControllerOperatingSystemRevision=siteV1DescControllerOperatingSystemRevision, siteV1ConfigIndex=siteV1ConfigIndex)
mibBuilder.exportSymbols("SITE-MONITORING-MIB", siteV1CfgSNMPSNMPV3TrapPrivacyPassword=siteV1CfgSNMPSNMPV3TrapPrivacyPassword, es1dc1DataSmartEnergySystemLossWithOptimisation=es1dc1DataSmartEnergySystemLossWithOptimisation, siteV1GlobalGroup=siteV1GlobalGroup, es1dc1AlarmEntryStatus=es1dc1AlarmEntryStatus, siteV1CtrlFilesDeleteUserUploadedFile=siteV1CtrlFilesDeleteUserUploadedFile, siteV1CfgInventoryRS485ExtensionsConf=siteV1CfgInventoryRS485ExtensionsConf, es1ControlList=es1ControlList, es1dc1CtrlRelsInvertRel2StateForXSeconds=es1dc1CtrlRelsInvertRel2StateForXSeconds, siteV1CtrlGenericClearAllEvents=siteV1CtrlGenericClearAllEvents, es1dc1DataRectifiersNumberOfPresentRectifier=es1dc1DataRectifiersNumberOfPresentRectifier, es1dc1Notifications=es1dc1Notifications, siteV1CfgRadiusAuthenticationRadiusServer=siteV1CfgRadiusAuthenticationRadiusServer, es1dc1ControlValue=es1dc1ControlValue, siteV1AlarmNumber=siteV1AlarmNumber, siteV1CfgXMLXMLEventPostingRefreshTime=siteV1CfgXMLXMLEventPostingRefreshTime, es1ControlName=es1ControlName, siteV1CfgUsersUser2LoginPassword=siteV1CfgUsersUser2LoginPassword, es1dc1DataSystemNiMHChargeMode=es1dc1DataSystemNiMHChargeMode, es1dc1CfgRectifiersForcedRemoteOffRectifers=es1dc1CfgRectifiersForcedRemoteOffRectifers, es1dc1DataBatBatChargeCapacity=es1dc1DataBatBatChargeCapacity, siteV1CtrlControllerSaveInventory=siteV1CtrlControllerSaveInventory, siteV1CfgCloudLinkCloudCredential=siteV1CfgCloudLinkCloudCredential, siteV1DescDescriptionGroup5=siteV1DescDescriptionGroup5, es1Config=es1Config, es1EventTable=es1EventTable, siteV1DescriptionTable=siteV1DescriptionTable, es1dc1CtrlRelsInvertRel1StateForXSeconds=es1dc1CtrlRelsInvertRel1StateForXSeconds, es1dc1CfgBatBoostTerminationCurrent=es1dc1CfgBatBoostTerminationCurrent, siteV1GlobalStatus=siteV1GlobalStatus, es1dc1DescriptionList=es1dc1DescriptionList, es1dc1DescDescriptionSerialNumber=es1dc1DescDescriptionSerialNumber, es1dc1DataRectifiersRectifiersOutCurrent=es1dc1DataRectifiersRectifiersOutCurrent, es1dc1CfgDigInputsDigInput1Name=es1dc1CfgDigInputsDigInput1Name, es1dc1GlobalAlarmSeverityLevel=es1dc1GlobalAlarmSeverityLevel, es1AlarmNumber=es1AlarmNumber, siteV1DescDescriptionReference=siteV1DescDescriptionReference, siteV1CfgSNMPSNMPV3PrivacyAlgorithm=siteV1CfgSNMPSNMPV3PrivacyAlgorithm, es1EventSeverityLevel=es1EventSeverityLevel, es1FullCompliance=es1FullCompliance, es1dc1CfgDigInputsDigInput4NormallyClosed=es1dc1CfgDigInputsDigInput4NormallyClosed, siteV1DataNumber=siteV1DataNumber, siteV1CfgControllerAutomaticReboot=siteV1CfgControllerAutomaticReboot, siteV1DescriptionEntry=siteV1DescriptionEntry, siteV1DescriptionNumber=siteV1DescriptionNumber, siteV1CtrlEmailSendSummaryEmail=siteV1CtrlEmailSendSummaryEmail)
