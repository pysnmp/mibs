#
# PySNMP MIB module SITEBOSS-571-STD-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/asentria/SITEBOSS-571-STD-MIB
# Produced by pysmi-1.1.12 at Wed May 29 10:19:09 2024
# On host fv-az1984-402 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
asentria, = mibBuilder.importSymbols("ASENTRIA-ROOT-MIB", "asentria")
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, ObjectIdentity, TimeTicks, Integer32, ModuleIdentity, MibIdentifier, iso, Counter64, Bits, Unsigned32, IpAddress, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "ObjectIdentity", "TimeTicks", "Integer32", "ModuleIdentity", "MibIdentifier", "iso", "Counter64", "Bits", "Unsigned32", "IpAddress", "NotificationType")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
s571 = ModuleIdentity((1, 3, 6, 1, 4, 1, 3052, 14))
s571.setRevisions(('2014-12-30 01:44', '2014-12-11 01:43', '2014-10-16 01:42', '2014-10-03 01:41', '2014-08-14 01:40', '2014-07-03 01:39', '2014-06-24 01:38', '2014-05-29 01:37', '2014-04-11 01:36', '2014-01-17 01:35', '2013-12-04 01:34', '2013-09-04 01:33', '2013-08-01 01:32', '2013-07-17 01:31', '2013-07-02 01:30', '2013-06-28 01:29', '2013-06-13 01:28', '2013-06-12 01:27', '2013-05-28 01:26', '2013-05-10 01:25', '2013-03-15 01:24', '2013-02-06 01:23', '2013-01-14 01:22', '2012-11-26 01:21', '2012-08-22 01:20', '2012-07-09 01:19', '2012-06-12 01:18', '2012-04-09 01:17', '2012-04-05 01:16', '2012-03-06 01:15', '2011-12-05 09:00', '2011-10-24 09:00', '2011-08-08 09:00', '2011-08-01 09:00', '2011-07-20 09:00', '2011-07-08 09:00', '2011-01-05 09:00', '2010-12-01 09:00', '2010-11-03 09:00', '2010-08-24 09:00', '2010-03-17 09:00', '2010-01-19 09:00', '2009-10-08 09:00', '2009-10-05 09:00', '2009-09-17 09:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: s571.setRevisionsDescriptions(('-v1.44\n       -Removed wirelessPIN and scSecret objects (OMX-1064).\n       -Applicable since unit version 2.10.610.', '-v1.43\n       -Changed analog-input fuel sensor objects from Integer32 to DisplayString (OMX-1177).\n       -Added missing ipv6DefaultRouter object (OMX-1175).\n       -Applicable since unit version 2.10.580.', '-v1.42\n       -Added espcAIDisplayFormat object (OMX-1112).\n       -Removed espcAIPolarity, espcAIConvHighSign, espcAIConvLowSign objects (OMX-1113).\n       -Applicable since unit version 2.10.460.', '-v1.41\n       -Changed analog input objects from Integer32 to DisplayString.\n       -Applicable since unit version 2.10.460.', '-v1.40\n       -Fixed description for wirelessConnIP objects (OMX-1061).\n       -Applicable since unit version 2.10.390.', '-v1.39\n       -Fixed wirelessIdleTimeout (OMX-1037).\n       -Fixed CPE status objects (OMX-1036).\n       -Applicable since unit version 2.10.390.', '-v1.38\n       -Fixed CPE status objects.\n       -Applicable since unit version 2.10.340.', '-v1.37\n       -Added various missing objects (OMX-751).\n       -Added CPE objects (OMX-162).\n       -Applicable since unit version 2.10.320.', '-v1.36\n       -Clarified relay and power output function and documentation (OMX-926).\n       -Applicable since unit version 2.10.300.', '-v1.35\n       -Added IPv6 objects (OMX-705).\n       -Added power distribution objects (powerDistributionStatus branch) (OMX-708).\n       -Fixed ipRestrictionMask wrong type (OMX-743).\n       -Added ftpPushPermissions (OMX-737).\n       -Added snmpProxy objects (OMX-747).\n       -Applicable since unit version 2.10.150.', '-v1.34\n       -Added fsGenEnable (OMX-661).\n       -Applicable since unit version 2.10.110.', '-v1.33\n       -Added pdSystemCurrent and pdSystemPower objects (OMX-527).\n       -Added pdnDeviceCurrentValue and pdnDeviceCurrentValueStr objects (OMX-528).\n       -Applicable since unit version 2.09.626.', '-v1.32\n       -Added missing trapEventTypeNumber available values in description (OMX-437).\n       -Applicable since unit version 2.09.560.', '-v1.31\n       -Corrected snmpPBufferAllPeriod object.\n       -Applicable since unit version 2.09.560.', '-v1.30\n       -Added snmpPoll objects (OMX-394).\n       -Applicable since unit version 2.09.560.', '-v1.29\n       -Removed Ethernet Expansion card objects.\n       -Applicable since unit version 2.09.540.', '-v1.28\n       -Added sysFileTransfer and sysUpdate objects. (OMX-42)\n       -Applicable since unit version 2.09.520.', '-v1.27\n       -Renamed EX10 to Ethernet Expansion (OMX-364)\n       -Applicable since unit version 2.09.510.', '-v1.26\n       -Fixed incorrect SYNTAX for sysCharMask (OMX-328).\n       -Applicable since unit version 2.09.380.', '-v1.25\n       -Fixed incorrect SYNTAX statements for various objects (OMX-314).\n       -Applicable since unit version 2.09.380.', '-v1.24\n       -Renamed sysLocation branch to sysLoc (OMX-198).\n       -Applicable since unit version 2.09.240.', '-v1.23\n       -Added ex10 branch.\n       -Renamed telnet* objects.\n       -Applicable since unit version 2.09.240.', '-v1.22\n       -Added evReset branch and associated notification (OMX-83).\n       -Applicable since unit version 2.09.220.', '-v1.21\n       -Fixed backwards pppRoutingEnable/ethRoutingEnable comments.  (BN 4620)', '-v1.20\n       -Added additional AC power monitor items.', '-v1.19\n       -Removed wirelessBand object.\n       -Removed secSSH objects.', '-v1.18\n       -Removed user credentials objects.\n       -Added combined power distributor status objects.', '-v1.17\n       -Added eth2WanRoutingEnable object.', '-v1.16\n       -Added combined eventsensor status objects.', '-v1.15\n       -Added objects and trap definitions for fuel sensor and AC power monitor.', '-v1.14\n       -Added s571StockScriptTrap notification definition.', '-v1.13\n       -Added s571StockLoadSheddingTrap notification definition.', '-v1.12\n       -Added s571StockOutputTrap notification definition.', '-v1.11\n       -Added evMgmtReprocess object.', '-v1.10\n       -Added aisgStatus branch.', '-v1.09\n       -Added wirelessModemStatus branch.', '-v1.08\n       -Added espcCCNormalThreshold object.', "-v1.07\n       -Added support for PowerBoss external power distributors.  This is in the\n       pdNextGen object branch which also supports the internal power distributor\n       of the SiteBoss 571.  The old SNMP support for the internal power\n       distributor is kept in the older sub-branches of the powerDistributionStatus\n       branch (pdConfig, pdMain, pdOutput).  The idea behind the pdNextGen object\n       branch is that there are 31 items for power monitoring and alarming, and\n       these items are organized in a double-indexed SNMP table object: the first\n       index is for the power distributor (and has the same numbering scheme as an\n       EventSensor  -- like esIndexES, but is called pdnIndexPD), and the second\n       index is the power output to which the item applies (or just '1' if the item\n       is not specific to a particular power output).  E.g., to read the main\n       current of the internal power distributor, you can use the old object\n       (pdMainCurrentValue.0) or you can use the new object\n       (pdnMainCurrentValue.200.1).  To read the fuse event state of power output\n       number 8 on the power distributor (PowerBoss) at index 2, read\n       pdnOutputFuseInEventState.2.8.", '-v1.06\n       -Changed deadband, threshold, and current values for temperature\n       sensors from integer to floating-point type.  This means the\n       SNMP object type for the temperature settings (deadbands and\n       thresholds) changed from Integer32 to DisplayString.\n       -Fixed bug where SNMP integer range defined in the MIB for\n       trapIncludedValue was 16-bit instead of 32-bit.', '-v1.05\n       -Fixed bug where some stock traps had too few varbinds declared.\n       -Removed useless trap definitions.', '-v1.04\n       -Removed useless object consoleInlineHsk.\n       -Added asset management object branch.\n       -Added altitude location object.\n       -Removed all obsolete switch references, made everything consistent\n        on outputs (relay outputs or power outputs).\n       -Added threshold objects for power distribution sensors.\n       -Added pdOutputCurrentValue object.\n       -Fixed description for pdOutputCurrentInEventState.', '-v1.03\n       -Increased range for esPointValueInt', '-v1.02\n       -Incremental pre-release changes', '-v1.01\n       -Incremental pre-release changes', '-v1.00\n       -Initial version.',))
if mibBuilder.loadTexts: s571.setLastUpdated('201412300144Z')
if mibBuilder.loadTexts: s571.setOrganization('Asentria Corporation')
if mibBuilder.loadTexts: s571.setContactInfo('Phone:  206-344-8800\n      Fax:    206-344-2116\n      Email:  support@asentria.com')
if mibBuilder.loadTexts: s571.setDescription('MIB module for managing Asentria SiteBoss 571')
status = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 14, 1))
eventSensorStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 14, 1, 1))
dataEventStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 14, 1, 2))
powerDistributionStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 14, 1, 5))
pdMain = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 14, 1, 5, 2))
pdMainCurrent = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 14, 1, 5, 2, 1))
pdMainVoltage = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 14, 1, 5, 2, 2))
pdMainPower = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 14, 1, 5, 2, 3))
pdOutput = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 14, 1, 5, 3))
pdOutputCurrent = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 14, 1, 5, 3, 1))
pdOutputFuse = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 14, 1, 5, 3, 4))
pdNextGen = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 14, 1, 5, 4))
pdSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 14, 1, 5, 5))
fuelSensorStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 14, 1, 6))
wirelessModemStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 14, 1, 7))
acPowerMonitorStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 14, 1, 8))
aisgStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 14, 1, 9))
config = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 14, 2))
eventSensorBasics = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 14, 2, 1))
eventSensorPointConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 14, 2, 2))
serialPorts = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 14, 2, 3))
network = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4))
interface = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 1))
ethernet = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 1, 1))
ethernet1 = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 1, 1, 1))
eth1VLAN = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 1, 1, 1, 5))
eth1VLAN1 = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 1, 1, 1, 5, 1))
eth1VLAN2 = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 1, 1, 1, 5, 2))
eth1VLAN3 = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 1, 1, 1, 5, 3))
eth1VLAN4 = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 1, 1, 1, 5, 4))
eth1VLAN5 = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 1, 1, 1, 5, 5))
eth1VLAN6 = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 1, 1, 1, 5, 6))
eth1IPv6 = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 1, 1, 1, 7))
eth1IPv6Static = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 1, 1, 1, 7, 2))
eth1IPv6Auto = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 1, 1, 1, 7, 3))
ethernet2 = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 1, 1, 2))
eth2VLAN = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 1, 1, 2, 5))
eth2VLAN1 = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 1, 1, 2, 5, 1))
eth2VLAN2 = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 1, 1, 2, 5, 2))
eth2VLAN3 = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 1, 1, 2, 5, 3))
eth2VLAN4 = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 1, 1, 2, 5, 4))
eth2VLAN5 = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 1, 1, 2, 5, 5))
eth2VLAN6 = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 1, 1, 2, 5, 6))
eth2IPv6 = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 1, 1, 2, 7))
eth2IPv6Static = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 1, 1, 2, 7, 2))
eth2IPv6Auto = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 1, 1, 2, 7, 3))
snmp = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 8))
snmpNotificationTx = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 8, 7))
snmpPoll = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 8, 9))
ftpPush = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 9))
ppp = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 10))
pppDial = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 10, 1))
pppHost = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 10, 2))
routing = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 11))
netSecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 12))
ipRestriction = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 12, 1))
rts = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 13))
rtsAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 13, 2))
trap = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 14))
trapInclude = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 14, 1))
routeTest = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 15))
wireless = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 16))
wirelessConnectivity = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 16, 20))
email = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 17))
netAdvanced = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 18))
web = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 19))
ipv6 = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 21))
cpe = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 22))
modem = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 14, 2, 5))
modemClid = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 14, 2, 5, 8))
time = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 14, 2, 8))
console = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 14, 2, 10))
unitSecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 14, 2, 11))
secCore = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 14, 2, 11, 1))
secFactory = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 14, 2, 11, 3))
secSSH = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 14, 2, 11, 4))
secVPN = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 14, 2, 11, 5))
event = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12))
evCore = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 1))
evLog = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 1, 3))
evMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 1, 4))
evData = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 2))
evdCore = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 2, 1))
evNoData1 = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 3))
evNoData2 = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 4))
evSched1 = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 5))
evSched2 = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 6))
evNoSensor = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 9))
fuelSensor = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 11))
acPowerMonitor = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12))
evReset = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 16))
action = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 14, 2, 14))
actionSched = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 14, 2, 14, 3))
actionAsentria = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 14, 2, 14, 4))
sys = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 14, 2, 16))
sysTime = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 14, 2, 16, 1))
sysTimeNet = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 14, 2, 16, 1, 4))
sysPT = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 14, 2, 16, 2))
sysTimeStamp = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 14, 2, 16, 8))
sysLog = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 14, 2, 16, 9))
sysCRDB = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 14, 2, 16, 10))
sysLoc = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 14, 2, 16, 14))
sysAssetMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 14, 2, 16, 15))
sysFileTransfer = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 14, 2, 16, 17))
sysUpdate = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 14, 2, 16, 18))
auditLog = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 14, 2, 17))
scripting = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 14, 2, 18))
productIds = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 14, 3))
esPointTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 14, 1, 1, 1), )
if mibBuilder.loadTexts: esPointTable.setStatus('current')
if mibBuilder.loadTexts: esPointTable.setDescription("\n        This table organizes 4 basic attributes of points.  A point\n        is a particular sensor on an EventSensor (e.g., temperature,\n        humidity, contact closure 2, output 5, etc.).  The 4 point\n        attributes are its name, whether it's in its event state,\n        the point's value as a number and its value as a string.\n\n        Points are referenced by a point index.  The point index\n        is a string of 3 numbers separated by periods.\n        It contains all the information necessary for getting a piece\n        of data off an event sensor; namely, which EventSensor,\n        point class, and which-sensor-of-that-class (a.k.a. point).\n        ")
esPointEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 14, 1, 1, 1, 1), ).setIndexNames((0, "SITEBOSS-571-STD-MIB", "esIndexES"), (0, "SITEBOSS-571-STD-MIB", "esIndexPC"), (0, "SITEBOSS-571-STD-MIB", "esIndexPoint"))
if mibBuilder.loadTexts: esPointEntry.setStatus('current')
if mibBuilder.loadTexts: esPointEntry.setDescription('Entry for EventSensor point table')
esIndexES = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: esIndexES.setStatus('current')
if mibBuilder.loadTexts: esIndexES.setDescription("The part of the point index that refers to an\n        EventSensor.\n\n        The point index is a string of 3 numbers separated\n        by periods.  It contains all the information\n        necessary for getting a piece of data off an event\n        sensor; namely, which EventSensor, point class,\n        and which-sensor-of-that-class (a.k.a. point).\n\n        This object's allowable values are 1 through 16,\n        and 200.  200 always refers to the EventSensor\n        inside the unit.  1 through 16 refer to additional\n        attached EventSensors.\n\n        The number corresponding to an EventSensor is\n        determined by the user at the initial configuration\n        time.  If there is an internal sensor in the unit,\n        it will always be the first item in the Sensor\n        Events setup menu.\n\n        For example, if a new EventSensor is configured as\n        the 2nd entry AFTER the internal EventSensor (if\n        one exists) in the Sensor Events Setup Menu, then\n        that EventSensor will be known from then on as\n        EventSensor 2.  All point indeces with esIndexES=2\n        will now refer to that particular EventSensor.\n        ")
esIndexPC = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: esIndexPC.setStatus('current')
if mibBuilder.loadTexts: esIndexPC.setDescription('The part of the point index that refers to point class.\n\n        The point index is a string of 3 numbers separated by periods.\n        It contains all the information necessary for getting a piece\n        of data off an event sensor; namely, which EventSensor,\n        point class, and which-sensor-of-that-class (a.k.a. point).\n\n        The values for this object are:\n        1=temperature sensor\n        2=contact closure\n        3=humidity sensor\n        4=noise sensor\n        5=analog input\n        6=output (relay output or power output)\n        ')
esIndexPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: esIndexPoint.setStatus('current')
if mibBuilder.loadTexts: esIndexPoint.setDescription('The part of the point index that delineates which\n        sensor on the EventSensor.\n\n        So this combined with esIndexPC (Point Class or type)\n        and esIndexES (which EventSensor) uniquely defines each\n        point (sensor or output) attached to a unit.  For\n        example, if esIndexES is 3, esIndexPC is 1 and\n        esIndexPoint is 4 then this is the Fourth Temperature\n        Sensor on EventSensor number 3.')
esPointName = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 1, 1, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esPointName.setStatus('current')
if mibBuilder.loadTexts: esPointName.setDescription("The name of the point on an EventSensor. For example,\n        'AC temp' (in the case of the temperature sensor on an\n        EventSensor).\n\n        There can be multiple points of the same point class on an\n        EventSensor (e.g., 8 contact closures) and multiple sensor\n        classes on an EventSensor (e.g., temperature, contact closure,\n        humidity).\n\n        If the point referenced by a given point index is solitary\n        (e.g., temperature sensor, because there can be only one on\n        an EventSensor), then this object reads as '<EventSensor\n        name>'.  Setting this object for solitary point indices sets\n        the EventSensor name only.\n\n        On the other hand, if a given point is among other points of\n        the same point class on an EventSensor, then this object reads\n        as '<Sensor name>'.  Setting this object for these NON-\n        solitary point indices sets the sensor name only - not the\n        EventSensor name.")
esPointInEventState = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 1, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esPointInEventState.setStatus('current')
if mibBuilder.loadTexts: esPointInEventState.setDescription('A number referring to the event state of a point\n        on an EventSensor.  This number can have different\n        meanings depending on the point class.\n\n        If the point class is temperature, humidity, or\n        analog input, then the values of this object are:\n        1=very low\n        2=low\n        3=normal\n        4=high\n        5=very high\n\n        For contact closures the values of this object are:\n        1=point in event state\n        2=point in normal state\n\n        For outputs the values of this object is the numeric\n        code for the logical state of the output: 1 or 2.  The\n        logical state of the output is either active/inactive for\n        relay outputs or on/off for power outputs.  The logical\n        state of the output has different nomenclature depending\n        on the type of the output (relay output or power output):\n\n        1=active (for relay output) or on (for power output)\n        2=inactive (for relay output) or off (for power output)\n\n        This is not necessarily representative of physical state\n        of the output.  Physical state is energized/de-energized,\n        for both relay and power outputs.  For relay outputs,\n        the active logical state corresponds to either the energized\n        physical state or the de-energized physical state depending\n        on how the relay output is configured.  For power outputs,\n        the on logical state always corresponds to the energized\n        physical state.\n\n        For any point class and any point, if the event\n        state is undefined, then the value of this object\n        is 0.\n\n        For any point class except output, this object is read-only.\n        For outputs, setting this object to 1 puts the output into\n        its active logical state.\n\n        Setting this object to 2 puts the output into its inactive\n        logical state.\n\n        Setting this object to any value greater than 2 puts the\n        output into its active logical state for that many seconds\n        (up to 3600), after which time it puts the output into its\n        inactive logical state.\n        ')
esPointValueInt = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esPointValueInt.setStatus('current')
if mibBuilder.loadTexts: esPointValueInt.setDescription('A read-only number referring to the value of a\n        point on an EventSensor.\n\n        If the point class is temperature, then this object\n        is the temperature in its configured scale (default\n        is Fahrenheit).\n\n        If the point class is contact closure, then\n        this object is either 0 (open) or 1 (closed).\n\n        If the point class is humidity, then this object\n        is the percent relative humidity.\n\n        If the point class is analog input, then this\n        object is the signed input value in tenths of the\n        configured units.\n\n        If the point class is an output, then this object is\n        the numeric code for the physical state of the output.\n        0=de-energized\n        1=energized\n\n        This object cannot be used to control the output, i.e,\n        change its logical or physical state (instead use\n        the esPointInEventState object).\n        ')
esPointValueStr = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 1, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esPointValueStr.setStatus('current')
if mibBuilder.loadTexts: esPointValueStr.setDescription("A string referring to the value of a point on an\n        EventSensor.\n\n        For contact closures this object is either 'Open'\n        or 'Closed'.\n\n        For outputs this object is a concatenation of the\n        logical state and physical state, separated by '/'.\n\n        For a relay output this object can be one of the\n        following 4 possible values:\n\n        Active/Energized\n        Inactive/Energized\n        Active/De-energized\n        Inactve/De-energized\n\n        For a power output this object can be one of the\n        following 2 possible values:\n\n        On/Energized\n        Off/De-energized\n\n        For temperature and humidity point classes, this\n        object is the string representation of the\n        esPointValueInt object.  For temperature, 'C' or\n        'F' is including in the string to indicate scale.\n\n        For analog inputs, this object is the string\n        representation of the plus/minus input in the\n        configured units appended with the unit name.\n        ")
esPointTimeLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 1, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esPointTimeLastChange.setStatus('current')
if mibBuilder.loadTexts: esPointTimeLastChange.setDescription('The time of the last time an event was\n        triggerred for a point on an EventSensor in\n        MM/DD/YY HH:MM:SS format.\n\n        For contact closures, the possible events are\n        Active and Inactive.  For temperature, humidity,\n        and analog inputs, the possible events are Normal,\n        High, Very High, Low, and Very Low.\n\n        For outputs, this object is a null string.')
esPointTimetickLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 1, 1, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esPointTimetickLastChange.setStatus('current')
if mibBuilder.loadTexts: esPointTimetickLastChange.setDescription('The time of the last time an event was\n        triggerred for a point on an EventSensor in\n        100ths of seconds since reset.\n\n        For contact closures, the possible events are\n        Active and Inactive.  For temperature, humidity,\n        and analog inputs, the possible events are Normal,\n        High, Very High, Low, and Very Low.\n\n        For outputs, this object is 0.')
deStatusTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 14, 1, 2, 1), )
if mibBuilder.loadTexts: deStatusTable.setStatus('current')
if mibBuilder.loadTexts: deStatusTable.setDescription('Data Event Status Table')
deStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 14, 1, 2, 1, 1), ).setIndexNames((0, "SITEBOSS-571-STD-MIB", "deStatusIndex"))
if mibBuilder.loadTexts: deStatusEntry.setStatus('current')
if mibBuilder.loadTexts: deStatusEntry.setDescription('EventSensor status entry')
deStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deStatusIndex.setStatus('current')
if mibBuilder.loadTexts: deStatusIndex.setDescription('Index for Data Events')
deStatusName = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deStatusName.setStatus('current')
if mibBuilder.loadTexts: deStatusName.setDescription('Data Event name')
deStatusCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deStatusCounter.setStatus('current')
if mibBuilder.loadTexts: deStatusCounter.setDescription("Number of times a data record has matched this\n        event's equation.\n        Range: 1-999999999")
deStatusThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deStatusThreshold.setStatus('current')
if mibBuilder.loadTexts: deStatusThreshold.setDescription('Number of times the equation is matched before\n        an event is triggered.\n        Range: 1-999999999')
modemStatus = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemStatus.setStatus('current')
if mibBuilder.loadTexts: modemStatus.setDescription('status of modem (idle, dialing, connected, etc.)')
modemCLIDLogTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 14, 1, 4), )
if mibBuilder.loadTexts: modemCLIDLogTable.setStatus('current')
if mibBuilder.loadTexts: modemCLIDLogTable.setDescription('Table of numbers of recent dialing parties')
modemCLIDLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 14, 1, 4, 1), ).setIndexNames((0, "SITEBOSS-571-STD-MIB", "modemCLIDLogIndex"))
if mibBuilder.loadTexts: modemCLIDLogEntry.setStatus('current')
if mibBuilder.loadTexts: modemCLIDLogEntry.setDescription('Entry for table of CLID log entries')
modemCLIDLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemCLIDLogIndex.setStatus('current')
if mibBuilder.loadTexts: modemCLIDLogIndex.setDescription('Index for table of CLID log entries')
modemCLIDLogNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 4, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemCLIDLogNumber.setStatus('current')
if mibBuilder.loadTexts: modemCLIDLogNumber.setDescription('recently logged number of dialing party')
pdConfig = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 1, 5, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdConfig.setStatus('current')
if mibBuilder.loadTexts: pdConfig.setDescription('Power Distribution output configuration')
pdMainCurrentInEventState = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 1, 5, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdMainCurrentInEventState.setStatus('current')
if mibBuilder.loadTexts: pdMainCurrentInEventState.setDescription('Power Distribution main current event state')
pdMainCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 1, 5, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdMainCurrentValue.setStatus('current')
if mibBuilder.loadTexts: pdMainCurrentValue.setDescription('Power Distribution main current value in mA')
pdMainCurrentValueStr = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 1, 5, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdMainCurrentValueStr.setStatus('current')
if mibBuilder.loadTexts: pdMainCurrentValueStr.setDescription('Power Distribution main current value formatted as a string')
pdMainCurrentDeadband = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 1, 5, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdMainCurrentDeadband.setStatus('current')
if mibBuilder.loadTexts: pdMainCurrentDeadband.setDescription('Power Distribution main current sensor deadband in mA')
pdMainCurrentVHighCurrent = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 1, 5, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdMainCurrentVHighCurrent.setStatus('current')
if mibBuilder.loadTexts: pdMainCurrentVHighCurrent.setDescription('Power Distribution main current sensor very high threshold in mA')
pdMainCurrentHighCurrent = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 1, 5, 2, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdMainCurrentHighCurrent.setStatus('current')
if mibBuilder.loadTexts: pdMainCurrentHighCurrent.setDescription('Power Distribution main current sensor high threshold in mA')
pdMainCurrentLowCurrent = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 1, 5, 2, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdMainCurrentLowCurrent.setStatus('current')
if mibBuilder.loadTexts: pdMainCurrentLowCurrent.setDescription('Power Distribution main current sensor low threshold in mA')
pdMainCurrentVLowCurrent = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 1, 5, 2, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdMainCurrentVLowCurrent.setStatus('current')
if mibBuilder.loadTexts: pdMainCurrentVLowCurrent.setDescription('Power Distribution main current sensor very low threshold in mA')
pdMainVoltageInEventState = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 1, 5, 2, 2, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdMainVoltageInEventState.setStatus('current')
if mibBuilder.loadTexts: pdMainVoltageInEventState.setDescription('Power Distribution main voltage event state')
pdMainVoltageValue = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 1, 5, 2, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdMainVoltageValue.setStatus('current')
if mibBuilder.loadTexts: pdMainVoltageValue.setDescription('Power Distribution main voltage value in mV')
pdMainVoltageValueStr = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 1, 5, 2, 2, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdMainVoltageValueStr.setStatus('current')
if mibBuilder.loadTexts: pdMainVoltageValueStr.setDescription('Power Distribution main voltage value formatted as a string')
pdMainVoltageDeadband = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 1, 5, 2, 2, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdMainVoltageDeadband.setStatus('current')
if mibBuilder.loadTexts: pdMainVoltageDeadband.setDescription('Power Distribution main voltage sensor deadband in mV')
pdMainVoltageVHighVoltage = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 1, 5, 2, 2, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdMainVoltageVHighVoltage.setStatus('current')
if mibBuilder.loadTexts: pdMainVoltageVHighVoltage.setDescription('Power Distribution main voltage sensor very high threshold in mV')
pdMainVoltageHighVoltage = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 1, 5, 2, 2, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdMainVoltageHighVoltage.setStatus('current')
if mibBuilder.loadTexts: pdMainVoltageHighVoltage.setDescription('Power Distribution main voltage sensor high threshold in mV')
pdMainVoltageLowVoltage = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 1, 5, 2, 2, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdMainVoltageLowVoltage.setStatus('current')
if mibBuilder.loadTexts: pdMainVoltageLowVoltage.setDescription('Power Distribution main voltage sensor low threshold in mV')
pdMainVoltageVLowVoltage = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 1, 5, 2, 2, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdMainVoltageVLowVoltage.setStatus('current')
if mibBuilder.loadTexts: pdMainVoltageVLowVoltage.setDescription('Power Distribution main voltage sensor very low threshold in mV')
pdMainPowerValue = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 1, 5, 2, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdMainPowerValue.setStatus('current')
if mibBuilder.loadTexts: pdMainPowerValue.setDescription('Power Distribution main power value in Watts')
pdMainPowerValueStr = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 1, 5, 2, 3, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdMainPowerValueStr.setStatus('current')
if mibBuilder.loadTexts: pdMainPowerValueStr.setDescription('Power Distribution main power value formatted as a string')
pdOutputCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 14, 1, 5, 3, 1), )
if mibBuilder.loadTexts: pdOutputCurrentTable.setStatus('current')
if mibBuilder.loadTexts: pdOutputCurrentTable.setDescription('Table of power output current values')
pdOutputCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 14, 1, 5, 3, 1, 1), ).setIndexNames((0, "SITEBOSS-571-STD-MIB", "pdOutputCurrentIndex"))
if mibBuilder.loadTexts: pdOutputCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: pdOutputCurrentEntry.setDescription('Entry for table of output current values')
pdOutputCurrentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 5, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 13))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdOutputCurrentIndex.setStatus('current')
if mibBuilder.loadTexts: pdOutputCurrentIndex.setDescription('Index for table of power output current values')
pdOutputCurrentInEventState = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 5, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdOutputCurrentInEventState.setStatus('current')
if mibBuilder.loadTexts: pdOutputCurrentInEventState.setDescription('The event state of this power distribution output\n        current (Very Low, Low, Normal, High, Very High)')
pdOutputCurrentValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 5, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdOutputCurrentValue.setStatus('current')
if mibBuilder.loadTexts: pdOutputCurrentValue.setDescription('Output current value in mA')
pdOutputCurrentValueStr = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 5, 3, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdOutputCurrentValueStr.setStatus('current')
if mibBuilder.loadTexts: pdOutputCurrentValueStr.setDescription('Output current value formatted as a fixed-point string\n        in Amps.')
pdOutputCurrentDeadband = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 5, 3, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdOutputCurrentDeadband.setStatus('current')
if mibBuilder.loadTexts: pdOutputCurrentDeadband.setDescription('Deadband for this power output current sensor')
pdOutputCurrentVHighCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 5, 3, 1, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdOutputCurrentVHighCurrent.setStatus('current')
if mibBuilder.loadTexts: pdOutputCurrentVHighCurrent.setDescription('Very high threshold for this power output current sensor')
pdOutputCurrentHighCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 5, 3, 1, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdOutputCurrentHighCurrent.setStatus('current')
if mibBuilder.loadTexts: pdOutputCurrentHighCurrent.setDescription('High threshold for this power output current sensor')
pdOutputCurrentVLowCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 5, 3, 1, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdOutputCurrentVLowCurrent.setStatus('current')
if mibBuilder.loadTexts: pdOutputCurrentVLowCurrent.setDescription('Very low threshold for this power output current sensor')
pdOutputCurrentLowCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 5, 3, 1, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdOutputCurrentLowCurrent.setStatus('current')
if mibBuilder.loadTexts: pdOutputCurrentLowCurrent.setDescription('Low threshold for this power output current sensor')
pdOutputFuseTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 14, 1, 5, 3, 4), )
if mibBuilder.loadTexts: pdOutputFuseTable.setStatus('current')
if mibBuilder.loadTexts: pdOutputFuseTable.setDescription('Table of output fuse values')
pdOutputFuseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 14, 1, 5, 3, 4, 1), ).setIndexNames((0, "SITEBOSS-571-STD-MIB", "pdOutputFuseIndex"))
if mibBuilder.loadTexts: pdOutputFuseEntry.setStatus('current')
if mibBuilder.loadTexts: pdOutputFuseEntry.setDescription('Entry for table of output fuse values')
pdOutputFuseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 5, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 13))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdOutputFuseIndex.setStatus('current')
if mibBuilder.loadTexts: pdOutputFuseIndex.setDescription('Index for table of output fuse values')
pdOutputFuseInEventState = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 5, 3, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdOutputFuseInEventState.setStatus('current')
if mibBuilder.loadTexts: pdOutputFuseInEventState.setDescription('A number referring to the event state of a power\n        distribution output fuse.\n\n        14=fuse blown\n        15=fuse ok')
pdOutputFuseValueStr = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 5, 3, 4, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdOutputFuseValueStr.setStatus('current')
if mibBuilder.loadTexts: pdOutputFuseValueStr.setDescription("Output fuse value formatted as a string.  E.g.,\n        'BLOWN' or 'OK'")
pdnTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 14, 1, 5, 4, 1), )
if mibBuilder.loadTexts: pdnTable.setStatus('current')
if mibBuilder.loadTexts: pdnTable.setDescription('Table of power distribution objects arranged according\n        to next-generation methodology (i.e., using multiple PowerBoss\n        power distributors in addition to the on-board power\n        distributor).')
pdnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 14, 1, 5, 4, 1, 1), ).setIndexNames((0, "SITEBOSS-571-STD-MIB", "pdnIndexPD"), (0, "SITEBOSS-571-STD-MIB", "pdnIndexOutput"))
if mibBuilder.loadTexts: pdnEntry.setStatus('current')
if mibBuilder.loadTexts: pdnEntry.setDescription('Entry for table of power distribution objects arranged according\n        to next-generation methodology (i.e., using multiple PowerBoss\n        power distributors in addition to the on-board power\n        distributor).')
pdnIndexPD = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 5, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnIndexPD.setStatus('current')
if mibBuilder.loadTexts: pdnIndexPD.setDescription('Index for table of power distribution objects, specifically the\n        index that refers to which power distributor.  A value of 200 means\n        the internal power distributor.  A value from 1 to 16 refers to a\n        PowerBoss external power distributor, and is the same value as esIndexES,\n        which refers to the PowerBoss as an EventSensor in the eventSensorStatus\n        object table.  In other words, pdnIndexPD is the same as esIndexES:\n        esIndexES is used to refer to the PowerBoss as an eventsensor (i.e., control\n        outputs), while pdnIndexPD is used to refer to the PowerBoss when used for\n        power distribution monitoring (i.e., to alarm on output\n        current/voltage/fuse status).')
pdnIndexOutput = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 5, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnIndexOutput.setStatus('current')
if mibBuilder.loadTexts: pdnIndexOutput.setDescription('Index for table of power distribution objects, specifically the\n        index that refers to which output on the power distributor specified\n        by pdnIndexPD.  For objects where the output is irrelevant, this index\n        should be 1.')
pdnConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 5, 4, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnConfig.setStatus('current')
if mibBuilder.loadTexts: pdnConfig.setDescription('The number of outputs on the power distributor specified by pdnIndexPD.\n        pdnIndexOutput should be 1 for this object.')
pdnMainCurrentInEventState = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 5, 4, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnMainCurrentInEventState.setStatus('current')
if mibBuilder.loadTexts: pdnMainCurrentInEventState.setDescription("The event state of the current (i.e. Amps) event of the power distributor\n        specified by pdnIndexPD.  pdnIndexOutput should be 1 for this object.\n        Possible values for this object are: 'Very Low', 'Low', 'Normal', 'High',\n        'Very High'.")
pdnMainCurrentValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 5, 4, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnMainCurrentValue.setStatus('current')
if mibBuilder.loadTexts: pdnMainCurrentValue.setDescription("The current drawn, in mA, for the power distributor specified by pdnIndexPD.\n        If pdnIndexPD is 200 then this is the internal power distributor and refers to\n        the current drawn by the S571 (which is comprised of the internal power\n        distributor and ancillary internal equipment) and all equipment powered by the\n        S571's internal power outputs.  If pdnIndexPD is 1-16 then this is an external\n        power distributor (PowerBoss) and refers to the current drawn by that PowerBoss and all\n        equipment powered by that PowerBoss.  pdnIndexOutput should be 1 for this object.")
pdnMainCurrentValueStr = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 5, 4, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnMainCurrentValueStr.setStatus('current')
if mibBuilder.loadTexts: pdnMainCurrentValueStr.setDescription('Essentially pdnMainCurrentValue formatted as a string in units of Amps, with\n        3 decimal places.  pdnIndexOutput should be 1 for this object.')
pdnMainCurrentDeadband = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 5, 4, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnMainCurrentDeadband.setStatus('current')
if mibBuilder.loadTexts: pdnMainCurrentDeadband.setDescription('The deadband, in mA, for the main current sensor for the power distributor\n        specified by pdIndexPD.  pdnIndexOutput should be 1 for this object.')
pdnMainCurrentVHighCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 5, 4, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnMainCurrentVHighCurrent.setStatus('current')
if mibBuilder.loadTexts: pdnMainCurrentVHighCurrent.setDescription("The current, in mA, for the main current sensor's Very High event threshold,\n        for the power distributor specified by pdIndexPD.  pdnIndexOutput should be 1\n        for this object.")
pdnMainCurrentHighCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 5, 4, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnMainCurrentHighCurrent.setStatus('current')
if mibBuilder.loadTexts: pdnMainCurrentHighCurrent.setDescription("The current, in mA, for the main current sensor's High event threshold,\n        for the power distributor specified by pdIndexPD.  pdnIndexOutput should be 1\n        for this object.")
pdnMainCurrentLowCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 5, 4, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnMainCurrentLowCurrent.setStatus('current')
if mibBuilder.loadTexts: pdnMainCurrentLowCurrent.setDescription("The current, in mA, for the main current sensor's Low event threshold,\n        for the power distributor specified by pdIndexPD.  pdnIndexOutput should be 1\n        for this object.")
pdnMainCurrentVLowCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 5, 4, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnMainCurrentVLowCurrent.setStatus('current')
if mibBuilder.loadTexts: pdnMainCurrentVLowCurrent.setDescription("The current, in mA, for the main current sensor's Very Low event threshold,\n        for the power distributor specified by pdIndexPD.  pdnIndexOutput should be 1\n        for this object.")
pdnMainVoltageInEventState = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 5, 4, 1, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnMainVoltageInEventState.setStatus('current')
if mibBuilder.loadTexts: pdnMainVoltageInEventState.setDescription("The event state of the voltage event of the power distributor\n        specified by pdnIndexPD.  pdnIndexOutput should be 1 for this object.\n        Possible values for this object are: 'Very Low', 'Low', 'Normal', 'High',\n        'Very High'.")
pdnMainVoltageValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 5, 4, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnMainVoltageValue.setStatus('current')
if mibBuilder.loadTexts: pdnMainVoltageValue.setDescription("The voltage, in mV, at the power distributor specified by pdnIndexPD.\n        If pdnIndexPD is 200 then this is the internal power distributor and refers to\n        the voltage at the S571 (which is comprised of the internal power\n        distributor and ancillary internal equipment) and all equipment powered by the\n        S571's internal power outputs.  If pdnIndexPD is 1-16 then this is an external\n        power distributor (PowerBoss) and refers to the voltage at that PowerBoss and all\n        equipment powered by that PowerBoss.  pdnIndexOutput should be 1 for this object.")
pdnMainVoltageValueStr = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 5, 4, 1, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnMainVoltageValueStr.setStatus('current')
if mibBuilder.loadTexts: pdnMainVoltageValueStr.setDescription('Essentially pdnMainVoltageValue formatted as a string in units of Volts, with\n        3 decimal places.  pdnIndexOutput should be 1 for this object.')
pdnMainVoltageDeadband = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 5, 4, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnMainVoltageDeadband.setStatus('current')
if mibBuilder.loadTexts: pdnMainVoltageDeadband.setDescription('The deadband, in mV, for the main voltage sensor for the power distributor\n        specified by pdIndexPD.  pdnIndexOutput should be 1 for this object.')
pdnMainVoltageVHighVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 5, 4, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnMainVoltageVHighVoltage.setStatus('current')
if mibBuilder.loadTexts: pdnMainVoltageVHighVoltage.setDescription("The voltage, in mA, for the main voltage sensor's Very High event threshold,\n        for the power distributor specified by pdIndexPD.  pdnIndexOutput should be 1\n        for this object.")
pdnMainVoltageHighVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 5, 4, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnMainVoltageHighVoltage.setStatus('current')
if mibBuilder.loadTexts: pdnMainVoltageHighVoltage.setDescription("The voltage, in mV, for the main voltage sensor's High event threshold,\n        for the power distributor specified by pdIndexPD.  pdnIndexOutput should be 1\n        for this object.")
pdnMainVoltageLowVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 5, 4, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnMainVoltageLowVoltage.setStatus('current')
if mibBuilder.loadTexts: pdnMainVoltageLowVoltage.setDescription("The voltage, in mV, for the main voltage sensor's Low event threshold,\n        for the power distributor specified by pdIndexPD.  pdnIndexOutput should be 1\n        for this object.")
pdnMainVoltageVLowVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 5, 4, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnMainVoltageVLowVoltage.setStatus('current')
if mibBuilder.loadTexts: pdnMainVoltageVLowVoltage.setDescription("The voltage, in mV, for the main voltage sensor's Very Low event threshold,\n        for the power distributor specified by pdIndexPD.  pdnIndexOutput should be 1\n        for this object.")
pdnMainPowerValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 5, 4, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnMainPowerValue.setStatus('current')
if mibBuilder.loadTexts: pdnMainPowerValue.setDescription('The power, in Watts, for the power distributor specified by pdIndexPD.\n        pdnIndexOutput should be 1 for this object.')
pdnMainPowerValueStr = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 5, 4, 1, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnMainPowerValueStr.setStatus('current')
if mibBuilder.loadTexts: pdnMainPowerValueStr.setDescription("The power, in Watts, for the power distributor specified by pdIndexPD,\n        formatted as a string with the unit name 'Watts'.  pdnIndexOutput should be 1\n        for this object.")
pdnOutputCurrentInEventState = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 5, 4, 1, 1, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnOutputCurrentInEventState.setStatus('current')
if mibBuilder.loadTexts: pdnOutputCurrentInEventState.setDescription("The event state of the current (i.e. Amps) event of the power distributor\n        output specified by pdnIndexPD and pdnIndexOutput.  E.g., for pdnIndexPD=200\n        and pdnIndexOutput=2, this refers to power output #2 of the internal power\n        distributor. Possible values for this object are: 'Very Low', 'Low', 'Normal',\n        'High', 'Very High'.")
pdnOutputCurrentValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 5, 4, 1, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnOutputCurrentValue.setStatus('current')
if mibBuilder.loadTexts: pdnOutputCurrentValue.setDescription("The current drawn, in mA, for the power distributor output specified by\n        pdnIndexPD and pdIndexOutput.  If pdnIndexPD is 200 then this is the internal\n        power distributor and refers to the current drawn by a specific power output\n        on the S571.  If pdIndexPD is 3 then this is an external power distributor (PowerBoss)\n        identified as 'power distributor 3' and refers to the current drawn by a\n        specific power output on that PowerBoss.  The specific power output is specified by\n        pdIndexOutput.")
pdnOutputCurrentValueStr = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 5, 4, 1, 1, 24), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnOutputCurrentValueStr.setStatus('current')
if mibBuilder.loadTexts: pdnOutputCurrentValueStr.setDescription('Essentially pdnOutputCurrentValue formatted as a string in units of Amps, with\n        3 decimal places.')
pdnOutputCurrentDeadband = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 5, 4, 1, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnOutputCurrentDeadband.setStatus('current')
if mibBuilder.loadTexts: pdnOutputCurrentDeadband.setDescription('The deadband, in mA, for the main current sensor for the power distributor\n        specified by pdIndexPD.  The power output is specified by pdnIndexOutput.')
pdnOutputCurrentVHighCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 5, 4, 1, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnOutputCurrentVHighCurrent.setStatus('current')
if mibBuilder.loadTexts: pdnOutputCurrentVHighCurrent.setDescription("The current, in mA, for a specific power output's current sensor Very High\n        event threshold, for the power distributor specified by pdIndexPD.  The power\n        output is specified by pdnIndexOutput.")
pdnOutputCurrentHighCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 5, 4, 1, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnOutputCurrentHighCurrent.setStatus('current')
if mibBuilder.loadTexts: pdnOutputCurrentHighCurrent.setDescription("The current, in mA, for a specific power output's current sensor High event\n        threshold, for the power distributor specified by pdIndexPD.  The power output\n        is specified by pdnIndexOutput for this object.")
pdnOutputCurrentLowCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 5, 4, 1, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnOutputCurrentLowCurrent.setStatus('current')
if mibBuilder.loadTexts: pdnOutputCurrentLowCurrent.setDescription("The current, in mA, for a specific power output's current sensor Low event\n        threshold, for the power distributor specified by pdIndexPD.  The power output\n        is specified by pdnIndexOutput for this object.")
pdnOutputCurrentVLowCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 5, 4, 1, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnOutputCurrentVLowCurrent.setStatus('current')
if mibBuilder.loadTexts: pdnOutputCurrentVLowCurrent.setDescription("The current, in mA, for a specific power output's current sensor Very Low\n        event threshold, for the power distributor specified by pdIndexPD.  The power\n        output is specified by pdnIndexOutput for this object.")
pdnOutputFuseInEventState = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 5, 4, 1, 1, 30), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnOutputFuseInEventState.setStatus('current')
if mibBuilder.loadTexts: pdnOutputFuseInEventState.setDescription("The event state of the fuse event of the power distributor output specified\n        by pdnIndexPD and pdnIndexOutput.  E.g., for pdnIndexPD=14 and pdnIndexOutput=2,\n        this refers to power output #2 of the PowerBoss external power distributor,\n        identified as 'power distributor 14'. Possible values for this object are:\n        'Very Low', 'Low', 'Normal', 'High', 'Very High'.  This object exists only for\n        power distributors with fuse monitoring support.")
pdnOutputFuseValueStr = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 5, 4, 1, 1, 31), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnOutputFuseValueStr.setStatus('current')
if mibBuilder.loadTexts: pdnOutputFuseValueStr.setDescription("The state of the fuse of the power distributor output specified\n        by pdnIndexPD and pdnIndexOutput.  Possible values for this object are:\n        'BLOWN' and 'OK'.  This object exists only for power distributors with\n        fuse monitoring support.")
pdnMainCombinedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 5, 4, 1, 1, 32), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnMainCombinedStatus.setStatus('current')
if mibBuilder.loadTexts: pdnMainCombinedStatus.setDescription('Combined status string intended to be parsed by NMS:\n        format: voltageColorCode`voltageEventState`voltageValue`mainCurrentColorCode`mainCurrentEventState`mainCurrentValue`deviceCurrentValue`mainPowerValue')
pdnOutputCombinedStatusBlock1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 5, 4, 1, 1, 33), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnOutputCombinedStatusBlock1.setStatus('current')
if mibBuilder.loadTexts: pdnOutputCombinedStatusBlock1.setDescription('Combined status string intended to be parsed by NMS:\n        format: numInBlock~outputCurrentColorCode1`outputCurrentEventState1`outputCurrentValue1`fuseColorCode1`fuseValue1~...')
pdnOutputCombinedStatusBlock2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 5, 4, 1, 1, 34), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnOutputCombinedStatusBlock2.setStatus('current')
if mibBuilder.loadTexts: pdnOutputCombinedStatusBlock2.setDescription('Combined status string intended to be parsed by NMS:\n        format: numInBlock~outputCurrentColorCode1`outputCurrentEventState1`outputCurrentValue1`fuseColorCode1`fuseValue1~...')
pdnDeviceCurrentValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 5, 4, 1, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnDeviceCurrentValue.setStatus('current')
if mibBuilder.loadTexts: pdnDeviceCurrentValue.setDescription('Current drawn by device in mA.  For the internal power distributor device,\n        this is the current drawn by the SiteBoss 571.  For an external power\n        distributor device (PowerBoss), this is the current drawn by the\n        PowerBoss.  This object exists only for power distributors with device\n        current monitoring support.')
pdnDeviceCurrentValueStr = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 5, 4, 1, 1, 36), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnDeviceCurrentValueStr.setStatus('current')
if mibBuilder.loadTexts: pdnDeviceCurrentValueStr.setDescription('Current drawn by device as a string with units (Amps).  For the internal\n        power distributor device, this is the current drawn by the SiteBoss 571.\n        For an external power distributor device (PowerBoss), this is the\n        current drawn by the PowerBoss.  This object exists only for power\n        distributors with device current monitoring support.')
pdSystemCurrent = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 1, 5, 5, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdSystemCurrent.setStatus('current')
if mibBuilder.loadTexts: pdSystemCurrent.setDescription('Total current drawn by all power distributors in system; that is, the\n        sum of all pdnMainCurrentValue objects for all connected power\n        distributors: internal and external.')
pdSystemPower = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 1, 5, 5, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdSystemPower.setStatus('current')
if mibBuilder.loadTexts: pdSystemPower.setDescription('Total power used by all power distributors in system; that is, the\n        sum of all pdnMainPowerValue objects for all connected power\n        distributors: internal and external.')
fsStatusTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 14, 1, 6, 1), )
if mibBuilder.loadTexts: fsStatusTable.setStatus('current')
if mibBuilder.loadTexts: fsStatusTable.setDescription('Fuel sensor status table')
fsStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 14, 1, 6, 1, 1), ).setIndexNames((0, "SITEBOSS-571-STD-MIB", "fsStatusIndex"))
if mibBuilder.loadTexts: fsStatusEntry.setStatus('current')
if mibBuilder.loadTexts: fsStatusEntry.setDescription('Fuel sensor status table entry')
fsStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsStatusIndex.setStatus('current')
if mibBuilder.loadTexts: fsStatusIndex.setDescription('Index for fuel sensors')
fsStatusName = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 6, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsStatusName.setStatus('current')
if mibBuilder.loadTexts: fsStatusName.setDescription('Fuel sensor name')
fsStatusDeviceState = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 6, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsStatusDeviceState.setStatus('current')
if mibBuilder.loadTexts: fsStatusDeviceState.setDescription('Fuel sensor device state')
fsStatusVolumeValueString = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 6, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsStatusVolumeValueString.setStatus('current')
if mibBuilder.loadTexts: fsStatusVolumeValueString.setDescription('Fuel volume. Range is -2,147,483,648 to 2,147,483,647. This value reads\n         -999 when the fuel sensor is disconnected')
fsStatusVolumePercentLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 6, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsStatusVolumePercentLevel.setStatus('current')
if mibBuilder.loadTexts: fsStatusVolumePercentLevel.setDescription('Height of the fluid in the tank expressed as a percentage of the tank\n         height, in hundredths of a percent.')
fsStatusVolumeInEventState = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 6, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsStatusVolumeInEventState.setStatus('current')
if mibBuilder.loadTexts: fsStatusVolumeInEventState.setDescription('Current event status of the fuel sensor.')
fsStatusCombined = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 6, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsStatusCombined.setStatus('current')
if mibBuilder.loadTexts: fsStatusCombined.setDescription('Combined status string intended to be parsed by NMS:\n        deviceState`deviceStateColorCode`percentRounded`valueAsFloat`volumeEventState`volumeEventStateColorCode`capacity`units`name')
wmsStatus = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 1, 7, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmsStatus.setStatus('current')
if mibBuilder.loadTexts: wmsStatus.setDescription('Wireless modem status')
wmsSignal = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 1, 7, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmsSignal.setStatus('current')
if mibBuilder.loadTexts: wmsSignal.setDescription('Wireless modem Signal strength')
wmsRSSI = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 1, 7, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmsRSSI.setStatus('current')
if mibBuilder.loadTexts: wmsRSSI.setDescription('Wireless modem Signal strength (RSSI)')
wmsBER = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 1, 7, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmsBER.setStatus('current')
if mibBuilder.loadTexts: wmsBER.setDescription('Wireless modem Bit Error Rate')
wmsUpdated = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 1, 7, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmsUpdated.setStatus('current')
if mibBuilder.loadTexts: wmsUpdated.setDescription('Wireless modem info last update time')
wmsRegistration = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 1, 7, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmsRegistration.setStatus('current')
if mibBuilder.loadTexts: wmsRegistration.setDescription('Wireless modem registration status')
wmsLAC = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 1, 7, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmsLAC.setStatus('current')
if mibBuilder.loadTexts: wmsLAC.setDescription('Wireless modem Location Area Code')
wmsCellID = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 1, 7, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmsCellID.setStatus('current')
if mibBuilder.loadTexts: wmsCellID.setDescription('Wireless modem Cell ID')
wmsIMSI = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 1, 7, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmsIMSI.setStatus('current')
if mibBuilder.loadTexts: wmsIMSI.setDescription('Wireless modem Internation Mobile Subscriber Identity number')
wmsPhnum = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 1, 7, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmsPhnum.setStatus('current')
if mibBuilder.loadTexts: wmsPhnum.setDescription('Wireless modem phone number')
wmsLocalIP = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 1, 7, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmsLocalIP.setStatus('current')
if mibBuilder.loadTexts: wmsLocalIP.setDescription('Local IP address of modem on wireless network')
wmsMgfID = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 1, 7, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmsMgfID.setStatus('current')
if mibBuilder.loadTexts: wmsMgfID.setDescription('Wireless modem manufacturer ID')
wmsModelID = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 1, 7, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmsModelID.setStatus('current')
if mibBuilder.loadTexts: wmsModelID.setDescription('Wireless modem model ID')
wmsIMEI = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 1, 7, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmsIMEI.setStatus('current')
if mibBuilder.loadTexts: wmsIMEI.setDescription('Wireless modem International Mobile Equipment Identity number')
wmsRevID = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 1, 7, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmsRevID.setStatus('current')
if mibBuilder.loadTexts: wmsRevID.setDescription('Wireless modem revision ID')
wmsNetName = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 1, 7, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmsNetName.setStatus('current')
if mibBuilder.loadTexts: wmsNetName.setDescription('Wireless modem network name')
wmsGPRSStatus = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 1, 7, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmsGPRSStatus.setStatus('current')
if mibBuilder.loadTexts: wmsGPRSStatus.setDescription('Wireless modem (E)GPRS status')
wmsBand = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 1, 7, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmsBand.setStatus('current')
if mibBuilder.loadTexts: wmsBand.setDescription('Wireless modem band')
wmsChannel = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 1, 7, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmsChannel.setStatus('current')
if mibBuilder.loadTexts: wmsChannel.setDescription('Wireless modem channel')
wmsCountryCode = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 1, 7, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmsCountryCode.setStatus('current')
if mibBuilder.loadTexts: wmsCountryCode.setDescription('Wireless modem country code')
wmsNetCode = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 1, 7, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmsNetCode.setStatus('current')
if mibBuilder.loadTexts: wmsNetCode.setDescription('Wireless modem network code')
wmsPLMNColor = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 1, 7, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmsPLMNColor.setStatus('current')
if mibBuilder.loadTexts: wmsPLMNColor.setDescription('Wireless modem PLMN color')
wmsBScolor = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 1, 7, 23), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmsBScolor.setStatus('current')
if mibBuilder.loadTexts: wmsBScolor.setDescription('Wireless modem BS color')
wmsMpRACH = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 1, 7, 24), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmsMpRACH.setStatus('current')
if mibBuilder.loadTexts: wmsMpRACH.setDescription('Wireless modem max power RACH')
wmsMinRxLevel = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 1, 7, 25), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmsMinRxLevel.setStatus('current')
if mibBuilder.loadTexts: wmsMinRxLevel.setDescription('Wireless modem minimum receive level')
wmsBaseCoeff = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 1, 7, 26), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmsBaseCoeff.setStatus('current')
if mibBuilder.loadTexts: wmsBaseCoeff.setDescription('Wireless modem base coefficient')
wmsSIMStatus = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 1, 7, 27), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmsSIMStatus.setStatus('current')
if mibBuilder.loadTexts: wmsSIMStatus.setDescription('WWireless modem SIM status')
wmsICCID = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 1, 7, 28), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmsICCID.setStatus('current')
if mibBuilder.loadTexts: wmsICCID.setDescription('Wireless modem SIM ICCID')
wmsModemType = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 1, 7, 29), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmsModemType.setStatus('current')
if mibBuilder.loadTexts: wmsModemType.setDescription('Wireless modem type')
acpmStatusTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 14, 1, 8, 1), )
if mibBuilder.loadTexts: acpmStatusTable.setStatus('current')
if mibBuilder.loadTexts: acpmStatusTable.setDescription('AC power monitor status table')
acpmStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 14, 1, 8, 1, 1), ).setIndexNames((0, "SITEBOSS-571-STD-MIB", "acpmsIndex"))
if mibBuilder.loadTexts: acpmStatusEntry.setStatus('current')
if mibBuilder.loadTexts: acpmStatusEntry.setDescription('AC power monitor status table entry')
acpmsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmsIndex.setStatus('current')
if mibBuilder.loadTexts: acpmsIndex.setDescription('Index for AC power monitors')
acpmsName = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 8, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmsName.setStatus('current')
if mibBuilder.loadTexts: acpmsName.setDescription('Name for the AC power monitor device.')
acpmsAvgVoltageValueStr = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 8, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmsAvgVoltageValueStr.setStatus('current')
if mibBuilder.loadTexts: acpmsAvgVoltageValueStr.setDescription('Average voltage, in volts. This is calculated using the formula\n        (register * PT ratio * 0.1). This could be either the average of\n        the phase voltages, or the sum of the phase voltages, depending\n        on device configuration.')
acpmsAvgVoltageMinStr = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 8, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmsAvgVoltageMinStr.setStatus('current')
if mibBuilder.loadTexts: acpmsAvgVoltageMinStr.setDescription('Minimum average voltage value since last reset, in volts.')
acpmsAvgVoltageMaxStr = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 8, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmsAvgVoltageMaxStr.setStatus('current')
if mibBuilder.loadTexts: acpmsAvgVoltageMaxStr.setDescription('Maximum average voltage value since last reset, in volts.')
acpmsAvgVoltageAvgStr = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 8, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmsAvgVoltageAvgStr.setStatus('current')
if mibBuilder.loadTexts: acpmsAvgVoltageAvgStr.setDescription("Average average voltage value since last reset, in volts.  This is\n        the unit's average of its measurements of the average voltage\n        reported by the AC power monitor device.")
acpmsAvgVoltageInEventState = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 8, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmsAvgVoltageInEventState.setStatus('current')
if mibBuilder.loadTexts: acpmsAvgVoltageInEventState.setDescription('Event state of this AC power monitor voltage (Low, Normal, High, etc.).')
acpmsVoltagePhaseAValueStr = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 8, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmsVoltagePhaseAValueStr.setStatus('current')
if mibBuilder.loadTexts: acpmsVoltagePhaseAValueStr.setDescription('Phase A voltage, in volts. This is calculated using the formula\n        (register * PT ratio * 0.1).')
acpmsVoltagePhaseBValueStr = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 8, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmsVoltagePhaseBValueStr.setStatus('current')
if mibBuilder.loadTexts: acpmsVoltagePhaseBValueStr.setDescription('Phase B voltage, in volts. This is calculated using the formula\n        (register * PT ratio * 0.1).')
acpmsVoltagePhaseCValueStr = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 8, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmsVoltagePhaseCValueStr.setStatus('current')
if mibBuilder.loadTexts: acpmsVoltagePhaseCValueStr.setDescription('Phase C voltage, in volts. This is calculated using the formula\n        (register * PT ratio * 0.1).')
acpmsAvgCurrentValueStr = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 8, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmsAvgCurrentValueStr.setStatus('current')
if mibBuilder.loadTexts: acpmsAvgCurrentValueStr.setDescription('Average current, in amps. This is calculated using the formula\n        (register * CT ratio * 0.001). This could be either the average of\n        the phase currents, or the sum of the phase currents, depending on\n        device configuration.')
acpmsAvgCurrentMinStr = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 8, 1, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmsAvgCurrentMinStr.setStatus('current')
if mibBuilder.loadTexts: acpmsAvgCurrentMinStr.setDescription('Minimum average current value since last reset, in amps.')
acpmsAvgCurrentMaxStr = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 8, 1, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmsAvgCurrentMaxStr.setStatus('current')
if mibBuilder.loadTexts: acpmsAvgCurrentMaxStr.setDescription('Maximum average current value since last reset, in amps.')
acpmsAvgCurrentAvgStr = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 8, 1, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmsAvgCurrentAvgStr.setStatus('current')
if mibBuilder.loadTexts: acpmsAvgCurrentAvgStr.setDescription("Average average current value since last reset, in amps.  This is\n        the unit's average of its measurements of the average current reported\n        by the AC power monitor device.")
acpmsAvgCurrentInEventState = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 8, 1, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmsAvgCurrentInEventState.setStatus('current')
if mibBuilder.loadTexts: acpmsAvgCurrentInEventState.setDescription('Event state of this AC power monitor current (Low, Normal, High, etc.).')
acpmsCurrentPhaseAValueStr = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 8, 1, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmsCurrentPhaseAValueStr.setStatus('current')
if mibBuilder.loadTexts: acpmsCurrentPhaseAValueStr.setDescription('Phase A current, in amps. This is calculated using the formula\n        (register * CT ratio * 0.001).')
acpmsCurrentPhaseBValueStr = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 8, 1, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmsCurrentPhaseBValueStr.setStatus('current')
if mibBuilder.loadTexts: acpmsCurrentPhaseBValueStr.setDescription('Phase B current, in amps. This is calculated using the formula\n        (register * CT ratio * 0.001).')
acpmsCurrentPhaseCValueStr = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 8, 1, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmsCurrentPhaseCValueStr.setStatus('current')
if mibBuilder.loadTexts: acpmsCurrentPhaseCValueStr.setDescription('Phase C current, in amps. This is calculated using the formula\n        (register * CT ratio * 0.001).')
acpmsAvgFreqValueStr = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 8, 1, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmsAvgFreqValueStr.setStatus('current')
if mibBuilder.loadTexts: acpmsAvgFreqValueStr.setDescription('Frequency, in hertz. On the YD2010, this is calculated using the\n        formula (register * 0.00106813). On the WattsOn, this is calculated\n        using the formula (register * 0.1).')
acpmsAvgFreqMinStr = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 8, 1, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmsAvgFreqMinStr.setStatus('current')
if mibBuilder.loadTexts: acpmsAvgFreqMinStr.setDescription('Minimum frequency value since last reset, in hertz.')
acpmsAvgFreqMaxStr = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 8, 1, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmsAvgFreqMaxStr.setStatus('current')
if mibBuilder.loadTexts: acpmsAvgFreqMaxStr.setDescription('Maximum frequency value since last reset, in hertz.')
acpmsAvgFreqAvgStr = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 8, 1, 1, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmsAvgFreqAvgStr.setStatus('current')
if mibBuilder.loadTexts: acpmsAvgFreqAvgStr.setDescription("Average frequency value since last reset, in hertz.  This is the\n        unit's average of its measurements of the average frequency reported\n        by the AC power monitor device.")
acpmsAvgFreqInEventState = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 8, 1, 1, 23), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmsAvgFreqInEventState.setStatus('current')
if mibBuilder.loadTexts: acpmsAvgFreqInEventState.setDescription('Event state of this AC power monitor frequency (Low, Normal, High, etc.).')
acpmsTRPValueStr = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 8, 1, 1, 24), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmsTRPValueStr.setStatus('current')
if mibBuilder.loadTexts: acpmsTRPValueStr.setDescription('Total real power, in watts. On the YD2010, this is calculated using\n        the formula (register * PT ratio * CT ratio * Urg * 0.4), where Urg is\n        the voltage range taken from register 0x30A. On the WattsOn models,\n        this is calculated using the formula (register * PT * CT).')
acpmsTRPMinStr = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 8, 1, 1, 25), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmsTRPMinStr.setStatus('current')
if mibBuilder.loadTexts: acpmsTRPMinStr.setDescription('Minimum total real power value since last reset, in watts.')
acpmsTRPMaxStr = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 8, 1, 1, 26), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmsTRPMaxStr.setStatus('current')
if mibBuilder.loadTexts: acpmsTRPMaxStr.setDescription('Maximum total real power value since last reset, in watts.')
acpmsTRPAvgStr = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 8, 1, 1, 27), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmsTRPAvgStr.setStatus('current')
if mibBuilder.loadTexts: acpmsTRPAvgStr.setDescription("Average total real power value since last reset, in watts.  This is\n        the unit's average of its measurements of the average total real power\n        reported by the AC power monitor device.")
acpmsTRPInEventState = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 8, 1, 1, 28), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmsTRPInEventState.setStatus('current')
if mibBuilder.loadTexts: acpmsTRPInEventState.setDescription('Event state of this AC power monitor total real power (Low, Normal,\n        High, etc.).')
acpmsRPPhaseAValueStr = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 8, 1, 1, 29), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmsRPPhaseAValueStr.setStatus('current')
if mibBuilder.loadTexts: acpmsRPPhaseAValueStr.setDescription('Phase A real power, in watts. On the YD2010, this is calculated using\n        the formula (register * PT ratio * CT ratio * Urg * 0.4), where Urg is\n        the voltage range taken from register 0x30A. On the WattsOn, this is\n        calculated using the formula (register * PT * CT).')
acpmsRPPhaseBValueStr = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 8, 1, 1, 30), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmsRPPhaseBValueStr.setStatus('current')
if mibBuilder.loadTexts: acpmsRPPhaseBValueStr.setDescription('Phase B real power, in watts. On the YD2010, this is calculated using\n        the formula (register * PT ratio * CT ratio * Urg * 0.4), where Urg is\n        the voltage range taken from register 0x30A. On the WattsOn, this is\n        calculated using the formula (register * PT * CT).')
acpmsRPPhaseCValueStr = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 8, 1, 1, 31), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmsRPPhaseCValueStr.setStatus('current')
if mibBuilder.loadTexts: acpmsRPPhaseCValueStr.setDescription('Phase C real power, in watts. On the YD2010, this is calculated using\n        the formula (register * PT ratio * CT ratio * Urg * 0.4), where Urg is\n        the voltage range taken from register 0x30A. On the WattsOn, this is\n        calculated using the formula (register * PT * CT).')
acpmsCombined = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 8, 1, 1, 32), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmsCombined.setStatus('current')
if mibBuilder.loadTexts: acpmsCombined.setDescription('Combined status string intended to be parsed by NMS:\n        name`deviceState`deviceStateColorCode`voltage`current`frequency`power~voltageEventState`voltageColorCode`currentEventState`currentColorCode`frequencyEventState`freuencyColorCode`powerEventState`powerColorCode')
acpmsTPFValueStr = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 8, 1, 1, 33), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmsTPFValueStr.setStatus('current')
if mibBuilder.loadTexts: acpmsTPFValueStr.setDescription('Total power factor.')
acpmsTPFMinStr = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 8, 1, 1, 34), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmsTPFMinStr.setStatus('current')
if mibBuilder.loadTexts: acpmsTPFMinStr.setDescription('Total power factor minimum value since last reset.')
acpmsTPFMaxStr = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 8, 1, 1, 35), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmsTPFMaxStr.setStatus('current')
if mibBuilder.loadTexts: acpmsTPFMaxStr.setDescription('Total power factor maximum value since last reset.')
acpmsTPFAvgStr = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 8, 1, 1, 36), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmsTPFAvgStr.setStatus('current')
if mibBuilder.loadTexts: acpmsTPFAvgStr.setDescription('Total power factor average value since last reset.')
acpmsTPFInEventState = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 8, 1, 1, 37), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmsTPFInEventState.setStatus('current')
if mibBuilder.loadTexts: acpmsTPFInEventState.setDescription('Total power factor event state.')
acpmsPFPhaseAValueStr = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 8, 1, 1, 38), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmsPFPhaseAValueStr.setStatus('current')
if mibBuilder.loadTexts: acpmsPFPhaseAValueStr.setDescription('Phase A power factor.')
acpmsPFPhaseBValueStr = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 8, 1, 1, 39), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmsPFPhaseBValueStr.setStatus('current')
if mibBuilder.loadTexts: acpmsPFPhaseBValueStr.setDescription('Phase B power factor.')
acpmsPFPhaseCValueStr = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 8, 1, 1, 40), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmsPFPhaseCValueStr.setStatus('current')
if mibBuilder.loadTexts: acpmsPFPhaseCValueStr.setDescription('Phase C power factor.')
acpmsTRcPValueStr = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 8, 1, 1, 41), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmsTRcPValueStr.setStatus('current')
if mibBuilder.loadTexts: acpmsTRcPValueStr.setDescription('Total reactive power, in VAR.')
acpmsTRcPMinStr = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 8, 1, 1, 42), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmsTRcPMinStr.setStatus('current')
if mibBuilder.loadTexts: acpmsTRcPMinStr.setDescription('Total reactive power minimum value since last reset, in VAR.')
acpmsTRcPMaxStr = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 8, 1, 1, 43), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmsTRcPMaxStr.setStatus('current')
if mibBuilder.loadTexts: acpmsTRcPMaxStr.setDescription('Total reactive power maximum value since last reset, in VAR.')
acpmsTRcPAvgStr = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 8, 1, 1, 44), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmsTRcPAvgStr.setStatus('current')
if mibBuilder.loadTexts: acpmsTRcPAvgStr.setDescription('Total reactive power average value since last reset, in VAR.')
acpmsRcPPhaseAValueStr = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 8, 1, 1, 45), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmsRcPPhaseAValueStr.setStatus('current')
if mibBuilder.loadTexts: acpmsRcPPhaseAValueStr.setDescription('Phase A reactive power, in VAR.')
acpmsRcPPhaseBValueStr = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 8, 1, 1, 46), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmsRcPPhaseBValueStr.setStatus('current')
if mibBuilder.loadTexts: acpmsRcPPhaseBValueStr.setDescription('Phase B reactive power, in VAR.')
acpmsRcPPhaseCValueStr = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 8, 1, 1, 47), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmsRcPPhaseCValueStr.setStatus('current')
if mibBuilder.loadTexts: acpmsRcPPhaseCValueStr.setDescription('Phase C reactive power, in VAR.')
acpmsTAPValueStr = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 8, 1, 1, 48), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmsTAPValueStr.setStatus('current')
if mibBuilder.loadTexts: acpmsTAPValueStr.setDescription('Total apparent power, in VA.')
acpmsTAPMinStr = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 8, 1, 1, 49), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmsTAPMinStr.setStatus('current')
if mibBuilder.loadTexts: acpmsTAPMinStr.setDescription('Total apparent power minimum value since last reset, in VA.')
acpmsTAPMaxStr = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 8, 1, 1, 50), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmsTAPMaxStr.setStatus('current')
if mibBuilder.loadTexts: acpmsTAPMaxStr.setDescription('Total apparent power maximum value since last reset, in VA.')
acpmsTAPAvgStr = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 8, 1, 1, 51), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmsTAPAvgStr.setStatus('current')
if mibBuilder.loadTexts: acpmsTAPAvgStr.setDescription('Total apparent power average value since last reset, in VA.')
acpmsAPPhaseAValueStr = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 8, 1, 1, 52), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmsAPPhaseAValueStr.setStatus('current')
if mibBuilder.loadTexts: acpmsAPPhaseAValueStr.setDescription('Phase A apparent power, in VA.')
acpmsAPPhaseBValueStr = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 8, 1, 1, 53), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmsAPPhaseBValueStr.setStatus('current')
if mibBuilder.loadTexts: acpmsAPPhaseBValueStr.setDescription('Phase B apparent power, in VA.')
acpmsAPPhaseCValueStr = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 8, 1, 1, 54), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmsAPPhaseCValueStr.setStatus('current')
if mibBuilder.loadTexts: acpmsAPPhaseCValueStr.setDescription('Phase C apparent power, in VA.')
acpmsTotalEnergyWh = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 8, 1, 1, 55), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmsTotalEnergyWh.setStatus('current')
if mibBuilder.loadTexts: acpmsTotalEnergyWh.setDescription('Total energy, in Wh.')
acpmsTotalEnergyVAR = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 8, 1, 1, 56), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmsTotalEnergyVAR.setStatus('current')
if mibBuilder.loadTexts: acpmsTotalEnergyVAR.setDescription('Total reactive energy, in VAR.')
acpmsTotalEnergyVA = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 8, 1, 1, 57), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmsTotalEnergyVA.setStatus('current')
if mibBuilder.loadTexts: acpmsTotalEnergyVA.setDescription('Total apparent energy, in VA.')
aisgsPower = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 1, 9, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aisgsPower.setStatus('current')
if mibBuilder.loadTexts: aisgsPower.setDescription('AISG power state')
aisgsBaseStationID = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 1, 9, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aisgsBaseStationID.setStatus('current')
if mibBuilder.loadTexts: aisgsBaseStationID.setDescription('AISG base station ID')
aisgsALDTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 14, 1, 9, 3), )
if mibBuilder.loadTexts: aisgsALDTable.setStatus('current')
if mibBuilder.loadTexts: aisgsALDTable.setDescription('The table of what AISG ALDs (Antenna Line Devices) are attached to the unit.')
aisgsALDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 14, 1, 9, 3, 1), ).setIndexNames((0, "SITEBOSS-571-STD-MIB", "aisgsALDIndex"))
if mibBuilder.loadTexts: aisgsALDEntry.setStatus('current')
if mibBuilder.loadTexts: aisgsALDEntry.setDescription('Table entry for AISG ALD table')
aisgsALDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 9, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 18))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aisgsALDIndex.setStatus('current')
if mibBuilder.loadTexts: aisgsALDIndex.setDescription('This number refers to an ALD; it is the ALD # as shown\n        in the web UI and CLI.')
aisgsALDSectorID = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 9, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aisgsALDSectorID.setStatus('current')
if mibBuilder.loadTexts: aisgsALDSectorID.setDescription('The sector ID of this ALD.')
aisgsALDType = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 9, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aisgsALDType.setStatus('current')
if mibBuilder.loadTexts: aisgsALDType.setDescription('The type of ALD (SR or MR).')
aisgsALDDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 9, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aisgsALDDescription.setStatus('current')
if mibBuilder.loadTexts: aisgsALDDescription.setDescription('User-defined description for this ALD.')
aisgsALDStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 9, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aisgsALDStatus.setStatus('current')
if mibBuilder.loadTexts: aisgsALDStatus.setDescription('Status of this ALD (i.e., OFF, OK, UNRSP, ALARM).')
aisgsALDID = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 9, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aisgsALDID.setStatus('current')
if mibBuilder.loadTexts: aisgsALDID.setDescription('The ID/serial number of this ALD.')
aisgsALDTilt = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 9, 3, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aisgsALDTilt.setStatus('current')
if mibBuilder.loadTexts: aisgsALDTilt.setDescription('The current tilt value of this ALD.')
aisgsALDHwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 9, 3, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aisgsALDHwVersion.setStatus('current')
if mibBuilder.loadTexts: aisgsALDHwVersion.setDescription('The hardware version of this ALD.')
aisgsALDSwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 9, 3, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aisgsALDSwVersion.setStatus('current')
if mibBuilder.loadTexts: aisgsALDSwVersion.setDescription('The software version of this ALD.')
aisgsALDModel = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 9, 3, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aisgsALDModel.setStatus('current')
if mibBuilder.loadTexts: aisgsALDModel.setDescription('The model number of this ALD.')
aisgsALDAntennaModel = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 9, 3, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aisgsALDAntennaModel.setStatus('current')
if mibBuilder.loadTexts: aisgsALDAntennaModel.setDescription('The model number of the antenna associated with this ALD.\n        Note that not all ALDs have this.')
aisgsALDMinTilt = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 9, 3, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aisgsALDMinTilt.setStatus('current')
if mibBuilder.loadTexts: aisgsALDMinTilt.setDescription("The minimum tilt value of this ALD, as determined by the ALD's\n        loaded configuration file.  A nonsensical value here indicates\n        that the ALD is not configured.")
aisgsALDMaxTilt = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 9, 3, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aisgsALDMaxTilt.setStatus('current')
if mibBuilder.loadTexts: aisgsALDMaxTilt.setDescription("The maximum tilt value of this ALD, as determined by the ALD's\n        loaded configuration file.  A nonsensical value here indicates\n        that the ALD is not configured.")
aisgsALDAISGVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 9, 3, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aisgsALDAISGVersion.setStatus('current')
if mibBuilder.loadTexts: aisgsALDAISGVersion.setDescription('The AISG version of this ALD.  E.g., 1.1, 2.0.')
aisgsFileTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 14, 1, 9, 4), )
if mibBuilder.loadTexts: aisgsFileTable.setStatus('current')
if mibBuilder.loadTexts: aisgsFileTable.setDescription('The table of what AISG files are currently loaded on the unit.')
aisgsFileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 14, 1, 9, 4, 1), ).setIndexNames((0, "SITEBOSS-571-STD-MIB", "aisgsFileIndex"))
if mibBuilder.loadTexts: aisgsFileEntry.setStatus('current')
if mibBuilder.loadTexts: aisgsFileEntry.setDescription('Table entry for AISG File table')
aisgsFileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 9, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aisgsFileIndex.setStatus('current')
if mibBuilder.loadTexts: aisgsFileIndex.setDescription('Index for AISG File table.  This defines the local store (local to\n        the unit) of files residing on the unit that are available to be\n        loaded onto ALDs.')
aisgsFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 9, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aisgsFileName.setStatus('current')
if mibBuilder.loadTexts: aisgsFileName.setDescription('Name of AISG file (specified by user).')
aisgsFileType = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 9, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aisgsFileType.setStatus('current')
if mibBuilder.loadTexts: aisgsFileType.setDescription('Type of AISG file (e.g., SOFTWARE or CONFIG)')
aisgsFileVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 9, 4, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aisgsFileVersion.setStatus('current')
if mibBuilder.loadTexts: aisgsFileVersion.setDescription('Version of AISG file as reported by the ALD running this software.\n        This is for SOFTWARE files, so that the unit can know when (during\n        auto config) it does not need to load software onto an ALD (i.e.,\n        if the ALD already has this software version loaded).')
aisgsAutoTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 14, 1, 9, 5), )
if mibBuilder.loadTexts: aisgsAutoTable.setStatus('current')
if mibBuilder.loadTexts: aisgsAutoTable.setDescription('The table of AISG automatic configuration slots on the unit.  These\n        slots describe what the unit should do automatically (load software,\n        load config, calibrate, tilt) upon finding the ALD during a scan, on\n        the specific basis of any ALD matching the vendor and ALD model defined\n        in a row of this table.')
aisgsAutoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 14, 1, 9, 5, 1), ).setIndexNames((0, "SITEBOSS-571-STD-MIB", "aisgsAutoIndex"))
if mibBuilder.loadTexts: aisgsAutoEntry.setStatus('current')
if mibBuilder.loadTexts: aisgsAutoEntry.setDescription('Table entry for AISG Auto table')
aisgsAutoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 9, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aisgsAutoIndex.setStatus('current')
if mibBuilder.loadTexts: aisgsAutoIndex.setDescription('Index for AISG Auto table.')
aisgsAutoVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 9, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aisgsAutoVendor.setStatus('current')
if mibBuilder.loadTexts: aisgsAutoVendor.setDescription('The two-letter vendor code for this automatic configuration table row.')
aisgsAutoALDModel = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 9, 5, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aisgsAutoALDModel.setStatus('current')
if mibBuilder.loadTexts: aisgsAutoALDModel.setDescription('The ALD model number this automatic configuration table row.')
aisgsAutoSoftware = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 9, 5, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aisgsAutoSoftware.setStatus('current')
if mibBuilder.loadTexts: aisgsAutoSoftware.setDescription('The software file name of this automatic configuration table row.')
aisgsAutoConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 9, 5, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aisgsAutoConfig.setStatus('current')
if mibBuilder.loadTexts: aisgsAutoConfig.setDescription('The configuration file name of this automatic configuration table row.')
aisgsAutoTilt = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 9, 5, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aisgsAutoTilt.setStatus('current')
if mibBuilder.loadTexts: aisgsAutoTilt.setDescription('The tilt value for this automatic configuration table row.  Any ALD not\n        already auto-configured by the unit will be tilted to this value, if its\n        vendor and model number match the vendor and ALD model number of this\n        table row.')
aisgsAAATable = MibTable((1, 3, 6, 1, 4, 1, 3052, 14, 1, 9, 6), )
if mibBuilder.loadTexts: aisgsAAATable.setStatus('current')
if mibBuilder.loadTexts: aisgsAAATable.setDescription('The table of AISG antenna-ALD associations slots on the unit.  These\n        slots describe what antenna serial number and what sector ID the unit\n        should assign to an ALD that is undergoing automatic configuration.')
aisgsAAAEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 14, 1, 9, 6, 1), ).setIndexNames((0, "SITEBOSS-571-STD-MIB", "aisgsAAAIndex"))
if mibBuilder.loadTexts: aisgsAAAEntry.setStatus('current')
if mibBuilder.loadTexts: aisgsAAAEntry.setDescription('Table entry for AISG AAA table')
aisgsAAAIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 9, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aisgsAAAIndex.setStatus('current')
if mibBuilder.loadTexts: aisgsAAAIndex.setDescription('Index for AISG AAA table.')
aisgsAAAALDID = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 9, 6, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aisgsAAAALDID.setStatus('current')
if mibBuilder.loadTexts: aisgsAAAALDID.setDescription('The ID/serial number of the ALD for this AAA table row.')
aisgsAAAAntennaSN = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 9, 6, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aisgsAAAAntennaSN.setStatus('current')
if mibBuilder.loadTexts: aisgsAAAAntennaSN.setDescription('The user-specified antenna serial number for this AAA table row.\n        An ALD that the unit finds with this ID/serial number will be\n        assigned this antenna serial number.  This happens only during\n        auto-configuration of the ALD, which happens only once for an ALD.')
aisgsAAASectorID = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 1, 9, 6, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aisgsAAASectorID.setStatus('current')
if mibBuilder.loadTexts: aisgsAAASectorID.setDescription('The user-specified sector ID for this AAA table row.\n        An ALD that the unit finds with this ID/serial number will be\n        assigned this sector ID.  This happens only during auto-configuration\n        of the ALD, which happens only once for an ALD.')
esNumberEventSensors = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esNumberEventSensors.setStatus('current')
if mibBuilder.loadTexts: esNumberEventSensors.setDescription('The number of EventSensors recognized by the unit,\n        including the internal EventSensor.\n        Range: 1-17')
esTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 14, 2, 1, 2), )
if mibBuilder.loadTexts: esTable.setStatus('current')
if mibBuilder.loadTexts: esTable.setDescription('The table of what EventSensors are attached to the unit,\n        including the internal EventSensor')
esEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 14, 2, 1, 2, 1), ).setIndexNames((0, "SITEBOSS-571-STD-MIB", "esIndex"))
if mibBuilder.loadTexts: esEntry.setStatus('current')
if mibBuilder.loadTexts: esEntry.setDescription('Table entry for EventSensor table')
esIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: esIndex.setStatus('current')
if mibBuilder.loadTexts: esIndex.setDescription("This number refers to an EventSensor; it has the\n        same meaning as the esIndexES object (see above),\n        except that this object is used only within the\n        esTable branch.\n\n        This object's allowable values are 1 through 16,\n        and 200.  200 always refers to the EventSensor\n        inside the unit.  1 through 16 refer to additional\n        attached EventSensors.\n\n        The number corresponding to an EventSensor is\n        determined by the user at the initial configuration\n        time.  If there is an internal sensor in the unit,\n        it will always be the first item in the Sensor\n        Events setup menu.\n\n        For example, if a new EventSensor is configured as\n        the 2nd entry AFTER the internal EventSensor (if\n        one exists) in the Sensor Events Setup Menu, then\n        that EventSensor will be known from then on as\n        EventSensor 2.  All point indeces with esIndex=2\n        will now refer to that particular EventSensor.\n        ")
esName = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esName.setStatus('current')
if mibBuilder.loadTexts: esName.setDescription('The name of the EventSensor')
esID = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 1, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esID.setStatus('current')
if mibBuilder.loadTexts: esID.setDescription('The factory-assigned ID of the EventSensor')
esNumberTempSensors = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esNumberTempSensors.setStatus('current')
if mibBuilder.loadTexts: esNumberTempSensors.setDescription('The number of temperature sensors on the EventSensor')
esTempReportingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 1, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esTempReportingMode.setStatus('current')
if mibBuilder.loadTexts: esTempReportingMode.setDescription('Description of how temperature values should\n        be interpreted.')
esNumberCCs = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 1, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esNumberCCs.setStatus('current')
if mibBuilder.loadTexts: esNumberCCs.setDescription('The number of contact closures on the EventSensor.')
esCCReportingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 1, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esCCReportingMode.setStatus('current')
if mibBuilder.loadTexts: esCCReportingMode.setDescription('Description of how CC values should be interpreted.')
esNumberHumidSensors = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 1, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esNumberHumidSensors.setStatus('current')
if mibBuilder.loadTexts: esNumberHumidSensors.setDescription('The number of humidity sensors on the EventSensor.')
esHumidReportingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 1, 2, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esHumidReportingMode.setStatus('current')
if mibBuilder.loadTexts: esHumidReportingMode.setDescription('Description of how humidity sensor values should be\n        interpreted.')
esNumberNoiseSensors = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 1, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esNumberNoiseSensors.setStatus('current')
if mibBuilder.loadTexts: esNumberNoiseSensors.setDescription('The number of noise sensors on the EventSensor.')
esNoiseReportingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 1, 2, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esNoiseReportingMode.setStatus('current')
if mibBuilder.loadTexts: esNoiseReportingMode.setDescription('Description of how noise sensor values should be\n        interpreted.')
esNumberAirflowSensors = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 1, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esNumberAirflowSensors.setStatus('current')
if mibBuilder.loadTexts: esNumberAirflowSensors.setDescription('The number of airflow sensors on the EventSensor.')
esAirflowReportingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 1, 2, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esAirflowReportingMode.setStatus('current')
if mibBuilder.loadTexts: esAirflowReportingMode.setDescription('Description of how airflow sensor values should be\n        interpreted.')
esNumberAnalog = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 1, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esNumberAnalog.setStatus('current')
if mibBuilder.loadTexts: esNumberAnalog.setDescription('The number of analog inputs on the EventSensor.')
esAnalogReportingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 1, 2, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esAnalogReportingMode.setStatus('current')
if mibBuilder.loadTexts: esAnalogReportingMode.setDescription('Description of how analog input values should be\n        interpreted.')
esNumberOutputs = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 1, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esNumberOutputs.setStatus('current')
if mibBuilder.loadTexts: esNumberOutputs.setDescription('The number of outputs (relay or power) on the EventSensor')
esOutputReportingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 1, 2, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esOutputReportingMode.setStatus('current')
if mibBuilder.loadTexts: esOutputReportingMode.setDescription('Description of how output values should be interpreted.')
esTempCombinedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 1, 2, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esTempCombinedStatus.setStatus('current')
if mibBuilder.loadTexts: esTempCombinedStatus.setDescription('Combined status string intended to be parsed by NMS:\n        name`value`scale`eventState`eventColorCode')
esCCCombinedStatusBlock1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 1, 2, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esCCCombinedStatusBlock1.setStatus('current')
if mibBuilder.loadTexts: esCCCombinedStatusBlock1.setDescription('Combined status string intended to be parsed by NMS:\n        numInBlock~name1`value1`eventColorCode1`alias1~name2`value2`eventColorCode2`alias2~...name8`value8`eventColorCode8`alias8')
esCCCombinedStatusBlock2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 1, 2, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esCCCombinedStatusBlock2.setStatus('current')
if mibBuilder.loadTexts: esCCCombinedStatusBlock2.setDescription('Combined status string intended to be parsed by NMS:\n        numInBlock~name9`value9`eventColorCode9`alias9~name10`value10`eventColorCode10`alias10~...name16`value16`eventColorCode16`alias16')
esCCCombinedStatusBlock3 = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 1, 2, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esCCCombinedStatusBlock3.setStatus('current')
if mibBuilder.loadTexts: esCCCombinedStatusBlock3.setDescription('Combined status string intended to be parsed by NMS:\n        numInBlock~name17`value17`eventColorCode17`alias17~name18`value18`eventColorCode18`alias18~...name24`value24`eventColorCode24`alias24')
esCCCombinedStatusBlock4 = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 1, 2, 1, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esCCCombinedStatusBlock4.setStatus('current')
if mibBuilder.loadTexts: esCCCombinedStatusBlock4.setDescription('Combined status string intended to be parsed by NMS:\n        numInBlock~name25`value25`eventColorCode25`alias25~name26`value26`eventColorCode26`alias26~...name32`value32`eventColorCode32`alias32')
esCCCombinedStatusBlock5 = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 1, 2, 1, 23), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esCCCombinedStatusBlock5.setStatus('current')
if mibBuilder.loadTexts: esCCCombinedStatusBlock5.setDescription('Combined status string intended to be parsed by NMS:\n        numInBlock~name33`value33`eventColorCode33`alias33~name34`value34`eventColorCode34`alias35~...name40`value40`eventColorCode40`alias40')
esCCCombinedStatusBlock6 = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 1, 2, 1, 24), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esCCCombinedStatusBlock6.setStatus('current')
if mibBuilder.loadTexts: esCCCombinedStatusBlock6.setDescription('Combined status string intended to be parsed by NMS:\n        numInBlock~name41`value41`eventColorCode41`alias41~name42`value42`eventColorCode42`alias43~...name48`value48`eventColorCode48`alias48')
esCCCombinedStatusBlock7 = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 1, 2, 1, 25), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esCCCombinedStatusBlock7.setStatus('current')
if mibBuilder.loadTexts: esCCCombinedStatusBlock7.setDescription('Combined status string intended to be parsed by NMS:\n        numInBlock~name49`value49`eventColorCode49`alias49~name50`value50`eventColorCode50`alias50~...name56`value56`eventColorCode56`alias56')
esCCCombinedStatusBlock8 = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 1, 2, 1, 26), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esCCCombinedStatusBlock8.setStatus('current')
if mibBuilder.loadTexts: esCCCombinedStatusBlock8.setDescription('Combined status string intended to be parsed by NMS:\n        numInBlock~name57`value57`eventColorCode57`alias57~name57`value57`eventColorCode564`alias57~...name64`value64`eventColorCode64`alias64')
esHumidCombinedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 1, 2, 1, 27), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esHumidCombinedStatus.setStatus('current')
if mibBuilder.loadTexts: esHumidCombinedStatus.setDescription('Combined status string intended to be parsed by NMS:\n        name`value`eventState`eventColorCode')
esAnalogCombinedStatusBlock1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 1, 2, 1, 28), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esAnalogCombinedStatusBlock1.setStatus('current')
if mibBuilder.loadTexts: esAnalogCombinedStatusBlock1.setDescription('Combined status string intended to be parsed by NMS:\n        numInBlock~name1`value1`units1`eventState`eventColorCode1~name2`value2`units2`eventState`eventColorCode2~...')
esAnalogCombinedStatusBlock2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 1, 2, 1, 29), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esAnalogCombinedStatusBlock2.setStatus('current')
if mibBuilder.loadTexts: esAnalogCombinedStatusBlock2.setDescription('Combined status string intended to be parsed by NMS:\n        numInBlock~name9`value9`units9`eventState9`eventColorCode9~...')
esAnalogCombinedStatusBlock3 = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 1, 2, 1, 30), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esAnalogCombinedStatusBlock3.setStatus('current')
if mibBuilder.loadTexts: esAnalogCombinedStatusBlock3.setDescription('Combined status string intended to be parsed by NMS:\n        numInBlock~namex`valuex`unitsx`eventStatex`eventColorCodex~...')
esAnalogCombinedStatusBlock4 = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 1, 2, 1, 31), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esAnalogCombinedStatusBlock4.setStatus('current')
if mibBuilder.loadTexts: esAnalogCombinedStatusBlock4.setDescription('Combined status string intended to be parsed by NMS:\n        numInBlock~namex`valuex`unitsx`eventStatex`eventColorCodex~...')
esAnalogCombinedStatusBlock5 = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 1, 2, 1, 32), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esAnalogCombinedStatusBlock5.setStatus('current')
if mibBuilder.loadTexts: esAnalogCombinedStatusBlock5.setDescription('Combined status string intended to be parsed by NMS:\n        numInBlock~namex`valuex`unitsx`eventStatex`eventColorCodex~...')
esAnalogCombinedStatusBlock6 = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 1, 2, 1, 33), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esAnalogCombinedStatusBlock6.setStatus('current')
if mibBuilder.loadTexts: esAnalogCombinedStatusBlock6.setDescription('Combined status string intended to be parsed by NMS:\n        numInBlock~namex`valuex`unitsx`eventStatex`eventColorCodex~...')
esOutputCombinedStatusBlock1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 1, 2, 1, 34), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esOutputCombinedStatusBlock1.setStatus('current')
if mibBuilder.loadTexts: esOutputCombinedStatusBlock1.setDescription('Combined status string intended to be parsed by NMS:\n        numInBlock~namex`valuex`unitsx`eventStatex`eventColorCodex~...')
esOutputCombinedStatusBlock2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 1, 2, 1, 35), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esOutputCombinedStatusBlock2.setStatus('current')
if mibBuilder.loadTexts: esOutputCombinedStatusBlock2.setDescription('Combined status string intended to be parsed by NMS:\n        numInBlock`namex`valuex`aliasx~namey`valuey`aliasy~...namez`valuez`aliasz')
esNewSensors = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esNewSensors.setStatus('current')
if mibBuilder.loadTexts: esNewSensors.setDescription('String representing the number of new (attached but unconfigured) EventSensors')
esPointConfigTempTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 14, 2, 2, 1), )
if mibBuilder.loadTexts: esPointConfigTempTable.setStatus('current')
if mibBuilder.loadTexts: esPointConfigTempTable.setDescription('This table organizes 3 basic attributes of temperature\n        sensor points.  A point is a particular sensor on an\n        EventSensor.  The 3 point attributes organizes in this table\n        are:\n        1. the configuration item (e.g., enable, name, etc.)\n        2. the eventsensor on which this point resides\n        3. the point number (always 1 for temp sensors)\n\n        Points are referenced by a point config index.  The point\n        config index is a string of 2 numbers separated by periods.\n        It contains all the information necessary for getting a\n        piece of data off an event sensor within the context of this\n        emperature point config table ; namely, which EventSensor,\n        and which sensor (a.k.a. point) (always 1 for temperature\n        sensors).\n        ')
esPointConfigTempEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 14, 2, 2, 1, 1), ).setIndexNames((0, "SITEBOSS-571-STD-MIB", "espcTempIndexES"), (0, "SITEBOSS-571-STD-MIB", "espcTempIndexPoint"))
if mibBuilder.loadTexts: esPointConfigTempEntry.setStatus('current')
if mibBuilder.loadTexts: esPointConfigTempEntry.setDescription('Entry for EventSensor point config temperature table')
espcTempIndexES = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: espcTempIndexES.setStatus('current')
if mibBuilder.loadTexts: espcTempIndexES.setDescription("The part of the point index that refers to an\n        EventSensor.\n\n        The point config index is a string of 2 numbers separated\n        by a period.  It contains all the information\n        necessary for getting a piece of data off an event\n        sensor within the the context of the eventsensor point\n        config temperature table; namely, which EventSensor,\n        and which sensor (a.k.a. point).\n\n        This object's allowable values are 1 through 16,\n        and 200.  200 always refers to the EventSensor\n        inside the unit.  1 through 16 refer to additional\n        attached EventSensors.\n\n        The number corresponding to an EventSensor is\n        determined by the user at the initial configuration\n        time.  If there is an internal sensor in the unit,\n        it will always be the first item in the Sensor\n        Events setup menu.\n\n        For example, if a new EventSensor is configured as\n        the 2nd entry AFTER the internal EventSensor (if\n        one exists) in the Sensor Events Setup Menu, then\n        that EventSensor will be known from then on as\n        EventSensor 2.  All point indeces with esIndexES=2\n        will now refer to that particular EventSensor.\n        ")
espcTempIndexPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: espcTempIndexPoint.setStatus('current')
if mibBuilder.loadTexts: espcTempIndexPoint.setDescription('The part of the point index that delineates which\n        sensor on the EventSensor.\n\n        So this combined with espcTempIndexES (which EventSensor)\n        uniquely defines each point attached to a unit within the\n        context of temperature point configuration.')
espcTempEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 2, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcTempEnable.setStatus('current')
if mibBuilder.loadTexts: espcTempEnable.setDescription('ON/OFF enable this temperature sensor')
espcTempScale = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 2, 1, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcTempScale.setStatus('current')
if mibBuilder.loadTexts: espcTempScale.setDescription('Scale (C/F) for this temperature sensor')
espcTempDeadband = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 2, 1, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcTempDeadband.setStatus('current')
if mibBuilder.loadTexts: espcTempDeadband.setDescription('Deadband for this temperature sensor (in floating-point format)')
espcTempVHighTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 2, 1, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcTempVHighTemp.setStatus('current')
if mibBuilder.loadTexts: espcTempVHighTemp.setDescription('Very high temperature event threshold for this temperature\n        sensor (in floating-point format)')
espcTempVHighActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 2, 1, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcTempVHighActions.setStatus('current')
if mibBuilder.loadTexts: espcTempVHighActions.setDescription('Very high temperature event actions for this temperature\n        sensor')
espcTempVHighTrapnum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 2, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcTempVHighTrapnum.setStatus('current')
if mibBuilder.loadTexts: espcTempVHighTrapnum.setDescription('Very high temperature event trap number for this\n        temperature sensor')
espcTempVHighClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 2, 1, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcTempVHighClass.setStatus('current')
if mibBuilder.loadTexts: espcTempVHighClass.setDescription('Very high temperature event class for this temperature\n        sensor')
espcTempHighTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 2, 1, 1, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcTempHighTemp.setStatus('current')
if mibBuilder.loadTexts: espcTempHighTemp.setDescription('High temperature event threshold for this temperature\n        sensor (in floating-point format)')
espcTempHighActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 2, 1, 1, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcTempHighActions.setStatus('current')
if mibBuilder.loadTexts: espcTempHighActions.setDescription('High temperature event actions for this temperature sensor')
espcTempHighTrapnum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 2, 1, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcTempHighTrapnum.setStatus('current')
if mibBuilder.loadTexts: espcTempHighTrapnum.setDescription('High temperature event trap number for this temperature\n        sensor')
espcTempHighClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 2, 1, 1, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcTempHighClass.setStatus('current')
if mibBuilder.loadTexts: espcTempHighClass.setDescription('High temperature event class for this temperature sensor')
espcTempNormalActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 2, 1, 1, 14), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcTempNormalActions.setStatus('current')
if mibBuilder.loadTexts: espcTempNormalActions.setDescription('Return-to-normal event actions for this temperature sensor')
espcTempNormalTrapnum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 2, 1, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcTempNormalTrapnum.setStatus('current')
if mibBuilder.loadTexts: espcTempNormalTrapnum.setDescription('Return-to-normal event trap number for this temperature\n        sensor')
espcTempNormalClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 2, 1, 1, 16), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcTempNormalClass.setStatus('current')
if mibBuilder.loadTexts: espcTempNormalClass.setDescription('Return-to-normal event class for this temperature sensor')
espcTempLowTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 2, 1, 1, 17), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcTempLowTemp.setStatus('current')
if mibBuilder.loadTexts: espcTempLowTemp.setDescription('Low temperature event threshold for this temperature sensor\n        (in floating-point format)')
espcTempLowActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 2, 1, 1, 18), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcTempLowActions.setStatus('current')
if mibBuilder.loadTexts: espcTempLowActions.setDescription('Low temperature event actions for this temperature sensor')
espcTempLowTrapnum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 2, 1, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcTempLowTrapnum.setStatus('current')
if mibBuilder.loadTexts: espcTempLowTrapnum.setDescription('Low temperature event trap number for this temperature\n        sensor')
espcTempLowClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 2, 1, 1, 20), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcTempLowClass.setStatus('current')
if mibBuilder.loadTexts: espcTempLowClass.setDescription('Low temperature event class for this temperature sensor')
espcTempVLowTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 2, 1, 1, 21), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcTempVLowTemp.setStatus('current')
if mibBuilder.loadTexts: espcTempVLowTemp.setDescription('Very Low temperature event threshold for this temperature\n        sensor (in floating-point format)')
espcTempVLowActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 2, 1, 1, 22), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcTempVLowActions.setStatus('current')
if mibBuilder.loadTexts: espcTempVLowActions.setDescription('Very Low temperature event actions for this temperature\n        sensor')
espcTempVLowTrapnum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 2, 1, 1, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcTempVLowTrapnum.setStatus('current')
if mibBuilder.loadTexts: espcTempVLowTrapnum.setDescription('Very Low temperature event trap number for this temperature\n        sensor')
espcTempVLowClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 2, 1, 1, 24), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcTempVLowClass.setStatus('current')
if mibBuilder.loadTexts: espcTempVLowClass.setDescription('Very Low temperature event class for this temperature sensor')
esPointConfigCCTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 14, 2, 2, 2), )
if mibBuilder.loadTexts: esPointConfigCCTable.setStatus('current')
if mibBuilder.loadTexts: esPointConfigCCTable.setDescription('This table organizes 3 basic attributes of contact closure\n        points.  A point is a particular sensor on an EventSensor.\n        The 3 point attributes organizes in this table are:\n        1. the configuration item (e.g., enable, name, etc.)\n        2. the eventsensor on which this point resides\n        3. the point number\n\n        Points are referenced by a point config index.  The point\n        config index is a string of 2 numbers separated by a period.\n        It contains all the information necessary for getting a piece\n        of data off an event sensor within the context of this\n        contact closure point config table ; namely, which\n        EventSensor and which sensor.\n        ')
esPointConfigCCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 14, 2, 2, 2, 1), ).setIndexNames((0, "SITEBOSS-571-STD-MIB", "espcCCIndexES"), (0, "SITEBOSS-571-STD-MIB", "espcCCIndexPoint"))
if mibBuilder.loadTexts: esPointConfigCCEntry.setStatus('current')
if mibBuilder.loadTexts: esPointConfigCCEntry.setDescription('Entry for EventSensor point config contact closure table')
espcCCIndexES = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: espcCCIndexES.setStatus('current')
if mibBuilder.loadTexts: espcCCIndexES.setDescription("The part of the point index that refers to an\n        EventSensor.\n\n        The point config index is a string of 2 numbers separated\n        by a period.  It contains all the information\n        necessary for getting a piece of data off an event\n        sensor within the the context of the eventsensor point\n        config contact closure table; namely, which EventSensor\n        and which sensor (a.k.a. point).\n\n        This object's allowable values are 1 through 16,\n        and 200.  200 always refers to the EventSensor\n        inside the unit.  1 through 16 refer to additional\n        attached EventSensors.\n        ")
espcCCIndexPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: espcCCIndexPoint.setStatus('current')
if mibBuilder.loadTexts: espcCCIndexPoint.setDescription('The part of the point index that delineates which\n        sensor on the EventSensor.\n\n        So this combined with espcCCIndexES (which EventSensor)\n        uniquely defines each point attached to a unit within the\n        context of contact closure point configuration.')
espcCCEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 2, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcCCEnable.setStatus('current')
if mibBuilder.loadTexts: espcCCEnable.setDescription('ON/OFF enable for this contact closure')
espcCCName = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 2, 2, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcCCName.setStatus('current')
if mibBuilder.loadTexts: espcCCName.setDescription('Name for this contact closure')
espcCCEventState = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 2, 2, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcCCEventState.setStatus('current')
if mibBuilder.loadTexts: espcCCEventState.setDescription('Event state for this contact closure')
espcCCThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcCCThreshold.setStatus('current')
if mibBuilder.loadTexts: espcCCThreshold.setDescription('Event threshold (seconds) for this contact closure')
espcCCEventActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 2, 2, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcCCEventActions.setStatus('current')
if mibBuilder.loadTexts: espcCCEventActions.setDescription('Event actions for this contact closure')
espcCCEventTrapnum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 2, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcCCEventTrapnum.setStatus('current')
if mibBuilder.loadTexts: espcCCEventTrapnum.setDescription('Event trap number for this contact closure')
espcCCEventClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 2, 2, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcCCEventClass.setStatus('current')
if mibBuilder.loadTexts: espcCCEventClass.setDescription('Event class for this contact closure')
espcCCNormalActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 2, 2, 1, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcCCNormalActions.setStatus('current')
if mibBuilder.loadTexts: espcCCNormalActions.setDescription('Return-to-normal actions for this contact closure')
espcCCNormalTrapnum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 2, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcCCNormalTrapnum.setStatus('current')
if mibBuilder.loadTexts: espcCCNormalTrapnum.setDescription('Return-to-normal trap number for this contact closure')
espcCCNormalClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 2, 2, 1, 12), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcCCNormalClass.setStatus('current')
if mibBuilder.loadTexts: espcCCNormalClass.setDescription('Return-to-normal class for this contact closure')
espcCCAlarmAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 2, 2, 1, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcCCAlarmAlias.setStatus('current')
if mibBuilder.loadTexts: espcCCAlarmAlias.setDescription('Event alias for this contact closure')
espcCCNormalAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 2, 2, 1, 14), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcCCNormalAlias.setStatus('current')
if mibBuilder.loadTexts: espcCCNormalAlias.setDescription('Return-to-normal alias for this contact closure')
espcCCNormalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 2, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcCCNormalThreshold.setStatus('current')
if mibBuilder.loadTexts: espcCCNormalThreshold.setDescription('Event threshold (seconds) for this contact closure to return to normal')
espcCCOverrideGlobalReminder = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 2, 2, 1, 16), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcCCOverrideGlobalReminder.setStatus('current')
if mibBuilder.loadTexts: espcCCOverrideGlobalReminder.setDescription('Override global reminder interval (evReminderInterval) for this CC.')
espcCCReminderInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 2, 2, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcCCReminderInterval.setStatus('current')
if mibBuilder.loadTexts: espcCCReminderInterval.setDescription('Individual reminder interval for this CC, applicable when the global\n        reminder is overriden.')
esPointConfigHumidTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 14, 2, 2, 3), )
if mibBuilder.loadTexts: esPointConfigHumidTable.setStatus('current')
if mibBuilder.loadTexts: esPointConfigHumidTable.setDescription('This table organizes 3 basic attributes of humidity points.\n        A point is a particular sensor on an EventSensor.  The 3\n        point attributes organizes in this table are:\n        1. the configuration item (e.g., enable, name, etc.)\n        2. the eventsensor on which this point resides\n        3. the point number (always 1 for humidity sensors)\n\n        Points are referenced by a point config index.  The point\n        config index is a string of 2 numbers separated by a period.\n        It contains all the information necessary for getting a piece\n        of data off an event sensor within the context of this\n        humidity point config table ; namely, which EventSensor and\n        which sensor.\n        ')
esPointConfigHumidEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 14, 2, 2, 3, 1), ).setIndexNames((0, "SITEBOSS-571-STD-MIB", "espcHumidIndexES"), (0, "SITEBOSS-571-STD-MIB", "espcHumidIndexPoint"))
if mibBuilder.loadTexts: esPointConfigHumidEntry.setStatus('current')
if mibBuilder.loadTexts: esPointConfigHumidEntry.setDescription('Entry for EventSensor point config humidity table')
espcHumidIndexES = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: espcHumidIndexES.setStatus('current')
if mibBuilder.loadTexts: espcHumidIndexES.setDescription("The part of the point index that refers to an\n        EventSensor.\n\n        The point config index is a string of 2 numbers separated\n        by a period.  It contains all the information\n        necessary for getting a piece of data off an event\n        sensor within the the context of the eventsensor point\n        config contact closure table; namely, which EventSensor\n        and which sensor (a.k.a. point).\n\n        This object's allowable values are 1 through 16,\n        and 200.  200 always refers to the EventSensor\n        inside the unit.  1 through 16 refer to additional\n        attached EventSensors.\n        ")
espcHumidIndexPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: espcHumidIndexPoint.setStatus('current')
if mibBuilder.loadTexts: espcHumidIndexPoint.setDescription('The part of the point index that delineates which\n        sensor on the EventSensor.\n\n        So this combined with espcHumidIndexES (which EventSensor)\n        uniquely defines each point attached to a unit within the\n        context of contact closure point configuration.')
espcHumidEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 2, 3, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcHumidEnable.setStatus('current')
if mibBuilder.loadTexts: espcHumidEnable.setDescription('ON/OFF enable for this humidity sensor')
espcHumidDeadband = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 2, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcHumidDeadband.setStatus('current')
if mibBuilder.loadTexts: espcHumidDeadband.setDescription('Deadband for this humidity sensor')
espcHumidVHighHumid = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 2, 3, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcHumidVHighHumid.setStatus('current')
if mibBuilder.loadTexts: espcHumidVHighHumid.setDescription('Very high event threshold for this humidity sensor')
espcHumidVHighActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 2, 3, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcHumidVHighActions.setStatus('current')
if mibBuilder.loadTexts: espcHumidVHighActions.setDescription('Very high event actions for this humidity sensor')
espcHumidVHighTrapnum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 2, 3, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcHumidVHighTrapnum.setStatus('current')
if mibBuilder.loadTexts: espcHumidVHighTrapnum.setDescription('Very high event trap number for this humidity sensor')
espcHumidVHighClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 2, 3, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcHumidVHighClass.setStatus('current')
if mibBuilder.loadTexts: espcHumidVHighClass.setDescription('Very high event class for this humidity sensor')
espcHumidHighHumid = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 2, 3, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcHumidHighHumid.setStatus('current')
if mibBuilder.loadTexts: espcHumidHighHumid.setDescription('High event threshold for this humidity sensor')
espcHumidHighActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 2, 3, 1, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcHumidHighActions.setStatus('current')
if mibBuilder.loadTexts: espcHumidHighActions.setDescription('High event actions for this humidity sensor')
espcHumidHighTrapnum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 2, 3, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcHumidHighTrapnum.setStatus('current')
if mibBuilder.loadTexts: espcHumidHighTrapnum.setDescription('High event trap number for this humidity sensor')
espcHumidHighClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 2, 3, 1, 12), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcHumidHighClass.setStatus('current')
if mibBuilder.loadTexts: espcHumidHighClass.setDescription('High event class for this humidity sensor')
espcHumidNormalActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 2, 3, 1, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcHumidNormalActions.setStatus('current')
if mibBuilder.loadTexts: espcHumidNormalActions.setDescription('Return-to-normal actions for this humidity sensor')
espcHumidNormalTrapnum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 2, 3, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcHumidNormalTrapnum.setStatus('current')
if mibBuilder.loadTexts: espcHumidNormalTrapnum.setDescription('Return-to-normal trap number for this humidity sensor')
espcHumidNormalClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 2, 3, 1, 15), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcHumidNormalClass.setStatus('current')
if mibBuilder.loadTexts: espcHumidNormalClass.setDescription('Return-to-normal class for this humidity sensor')
espcHumidLowHumid = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 2, 3, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcHumidLowHumid.setStatus('current')
if mibBuilder.loadTexts: espcHumidLowHumid.setDescription('Low event threshold for this humidity sensor')
espcHumidLowActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 2, 3, 1, 17), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcHumidLowActions.setStatus('current')
if mibBuilder.loadTexts: espcHumidLowActions.setDescription('Low event actions for this humidity sensor')
espcHumidLowTrapnum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 2, 3, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcHumidLowTrapnum.setStatus('current')
if mibBuilder.loadTexts: espcHumidLowTrapnum.setDescription('Low event trap number for this humidity sensor')
espcHumidLowClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 2, 3, 1, 19), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcHumidLowClass.setStatus('current')
if mibBuilder.loadTexts: espcHumidLowClass.setDescription('Low event class for this humidity sensor')
espcHumidVLowHumid = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 2, 3, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcHumidVLowHumid.setStatus('current')
if mibBuilder.loadTexts: espcHumidVLowHumid.setDescription('Very low event threshold for this humidity sensor')
espcHumidVLowActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 2, 3, 1, 21), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcHumidVLowActions.setStatus('current')
if mibBuilder.loadTexts: espcHumidVLowActions.setDescription('Very low event actions for this humidity sensor')
espcHumidVLowTrapnum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 2, 3, 1, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcHumidVLowTrapnum.setStatus('current')
if mibBuilder.loadTexts: espcHumidVLowTrapnum.setDescription('Very low event trap number for this humidity sensor')
espcHumidVLowClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 2, 3, 1, 23), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcHumidVLowClass.setStatus('current')
if mibBuilder.loadTexts: espcHumidVLowClass.setDescription('Very low event class for this humidity sensor')
esPointConfigAITable = MibTable((1, 3, 6, 1, 4, 1, 3052, 14, 2, 2, 5), )
if mibBuilder.loadTexts: esPointConfigAITable.setStatus('current')
if mibBuilder.loadTexts: esPointConfigAITable.setDescription('This table organizes 3 basic attributes of analog input\n        points.  A point is a particular sensor on an EventSensor.\n        The 3 point attributes organizes in this table are:\n        1. the configuration item (e.g., enable, name, etc.)\n        2. the eventsensor on which this point resides\n        3. the point number\n\n        Points are referenced by a point config index.  The point\n        config index is a string of 2 numbers separated by a period.\n        It contains all the information necessary for getting a\n        piece of data off an event sensor within the context of this\n        analog input point config table ; namely, which EventSensor\n        and which sensor.\n        ')
esPointConfigAIEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 14, 2, 2, 5, 1), ).setIndexNames((0, "SITEBOSS-571-STD-MIB", "espcHumidIndexES"), (0, "SITEBOSS-571-STD-MIB", "espcHumidIndexPoint"))
if mibBuilder.loadTexts: esPointConfigAIEntry.setStatus('current')
if mibBuilder.loadTexts: esPointConfigAIEntry.setDescription('Entry for EventSensor point config analog input table')
espcAIIndexES = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: espcAIIndexES.setStatus('current')
if mibBuilder.loadTexts: espcAIIndexES.setDescription("The part of the point index that refers to an\n        EventSensor.\n\n        The point config index is a string of 2 numbers separated\n        by a period.  It contains all the information\n        necessary for getting a piece of data off an event\n        sensor within the the context of the eventsensor point\n        config contact closure table; namely, which EventSensor\n        and which sensor (a.k.a. point).\n\n        This object's allowable values are 1 through 16,\n        and 200.  200 always refers to the EventSensor\n        inside the unit.  1 through 16 refer to additional\n        attached EventSensors.\n        ")
espcAIIndexPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 2, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: espcAIIndexPoint.setStatus('current')
if mibBuilder.loadTexts: espcAIIndexPoint.setDescription('The part of the point index that delineates which\n        sensor on the EventSensor.\n\n        So this combined with espcAIIndexES (which EventSensor)\n        uniquely defines each point attached to a unit within the\n        context of contact closure point configuration.')
espcAIEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 2, 5, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcAIEnable.setStatus('current')
if mibBuilder.loadTexts: espcAIEnable.setDescription('ON/OFF for this analog input sensor')
espcAIDeadband = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 2, 5, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcAIDeadband.setStatus('current')
if mibBuilder.loadTexts: espcAIDeadband.setDescription('Deadband for this analog input sensor')
espcAIVhighValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 2, 5, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcAIVhighValue.setStatus('current')
if mibBuilder.loadTexts: espcAIVhighValue.setDescription('Very high event threshold (decivolts or tenths of\n        milliamps) for this analog input sensor')
espcAIVhighActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 2, 5, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcAIVhighActions.setStatus('current')
if mibBuilder.loadTexts: espcAIVhighActions.setDescription('Very high event actions for this analog input sensor')
espcAIVhighTrapnum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 2, 5, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcAIVhighTrapnum.setStatus('current')
if mibBuilder.loadTexts: espcAIVhighTrapnum.setDescription('Very high event trap number for this analog input sensor')
espcAIVhighClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 2, 5, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcAIVhighClass.setStatus('current')
if mibBuilder.loadTexts: espcAIVhighClass.setDescription('Very high event class for this analog input sensor')
espcAIHighValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 2, 5, 1, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcAIHighValue.setStatus('current')
if mibBuilder.loadTexts: espcAIHighValue.setDescription('High event threshold (decivolts or tenths of milliamps) for\n        this analog input sensor')
espcAIHighActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 2, 5, 1, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcAIHighActions.setStatus('current')
if mibBuilder.loadTexts: espcAIHighActions.setDescription('High event actions for this analog input sensor')
espcAIHighTrapnum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 2, 5, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcAIHighTrapnum.setStatus('current')
if mibBuilder.loadTexts: espcAIHighTrapnum.setDescription('High event trap number for this analog input sensor')
espcAIHighClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 2, 5, 1, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcAIHighClass.setStatus('current')
if mibBuilder.loadTexts: espcAIHighClass.setDescription('High event class for this analog input sensor')
espcAINormalActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 2, 5, 1, 14), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcAINormalActions.setStatus('current')
if mibBuilder.loadTexts: espcAINormalActions.setDescription('Return-to-normal actions for this analog input sensor')
espcAINormalTrapnum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 2, 5, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcAINormalTrapnum.setStatus('current')
if mibBuilder.loadTexts: espcAINormalTrapnum.setDescription('Return-to-normal trap number for this analog input sensor')
espcAINormalClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 2, 5, 1, 16), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcAINormalClass.setStatus('current')
if mibBuilder.loadTexts: espcAINormalClass.setDescription('Return-to-normal class for this analog input sensor')
espcAILowValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 2, 5, 1, 17), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcAILowValue.setStatus('current')
if mibBuilder.loadTexts: espcAILowValue.setDescription('Low event threshold (decivolts or tenths of milliamps) for\n        this analog input sensor')
espcAILowActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 2, 5, 1, 18), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcAILowActions.setStatus('current')
if mibBuilder.loadTexts: espcAILowActions.setDescription('Low event actions for this analog input sensor')
espcAILowTrapnum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 2, 5, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcAILowTrapnum.setStatus('current')
if mibBuilder.loadTexts: espcAILowTrapnum.setDescription('Low event trap number for this analog input sensor')
espcAILowClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 2, 5, 1, 20), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcAILowClass.setStatus('current')
if mibBuilder.loadTexts: espcAILowClass.setDescription('Low event class for this analog input sensor')
espcAIVlowValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 2, 5, 1, 21), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcAIVlowValue.setStatus('current')
if mibBuilder.loadTexts: espcAIVlowValue.setDescription('Very low event threshold (decivolts or tenths of milliamps)\n        for this analog input sensor')
espcAIVlowActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 2, 5, 1, 22), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcAIVlowActions.setStatus('current')
if mibBuilder.loadTexts: espcAIVlowActions.setDescription('Very low event actions for this analog input sensor')
espcAIVlowTrapnum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 2, 5, 1, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcAIVlowTrapnum.setStatus('current')
if mibBuilder.loadTexts: espcAIVlowTrapnum.setDescription('Very low event actions for this analog input sensor')
espcAIVlowClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 2, 5, 1, 24), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcAIVlowClass.setStatus('current')
if mibBuilder.loadTexts: espcAIVlowClass.setDescription('Very low event class for this analog input sensor')
espcAIConvUnitName = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 2, 5, 1, 25), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcAIConvUnitName.setStatus('current')
if mibBuilder.loadTexts: espcAIConvUnitName.setDescription('Converstion unit name for this analog input sensor')
espcAIConvHighValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 2, 5, 1, 26), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcAIConvHighValue.setStatus('current')
if mibBuilder.loadTexts: espcAIConvHighValue.setDescription('Conversion high value for this analog input sensor')
espcAIConvHighUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 2, 5, 1, 27), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcAIConvHighUnit.setStatus('current')
if mibBuilder.loadTexts: espcAIConvHighUnit.setDescription('Conversion high unit value for this analog input sensor')
espcAIConvLowValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 2, 5, 1, 29), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcAIConvLowValue.setStatus('current')
if mibBuilder.loadTexts: espcAIConvLowValue.setDescription('Conversion low value for this analog input sensor')
espcAIConvLowUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 2, 5, 1, 30), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcAIConvLowUnit.setStatus('current')
if mibBuilder.loadTexts: espcAIConvLowUnit.setDescription('Conversion unit low unit value for this analog input sensor')
espcAIDisplayFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 2, 5, 1, 32), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcAIDisplayFormat.setStatus('current')
if mibBuilder.loadTexts: espcAIDisplayFormat.setDescription('Analog input display format')
esPointConfigOutputTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 14, 2, 2, 6), )
if mibBuilder.loadTexts: esPointConfigOutputTable.setStatus('current')
if mibBuilder.loadTexts: esPointConfigOutputTable.setDescription('This table organizes configuration items for output\n        points.  A point is a particular sensor on an EventSensor.\n        The 3 point attributes organized in this table are:\n        1. the configuration item (e.g., enable, name, etc.)\n        2. the eventsensor on which this point resides\n        3. the point number\n\n        Points are referenced by a point config index.  The point\n        config index is a string of 2 numbers separated by a period.\n        It contains all the information necessary for getting a\n        piece of data off an event sensor within the context of this\n        output config table ; namely, which EventSensor\n        and which sensor.\n        ')
esPointConfigOutputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 14, 2, 2, 6, 1), ).setIndexNames((0, "SITEBOSS-571-STD-MIB", "espcOutputIndexES"), (0, "SITEBOSS-571-STD-MIB", "espcOutputIndexPoint"))
if mibBuilder.loadTexts: esPointConfigOutputEntry.setStatus('current')
if mibBuilder.loadTexts: esPointConfigOutputEntry.setDescription('Entry for EventSensor point config output table')
espcOutputIndexES = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 2, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: espcOutputIndexES.setStatus('current')
if mibBuilder.loadTexts: espcOutputIndexES.setDescription("The part of the point index that refers to an\n        EventSensor.\n\n        The point config index is a string of 2 numbers separated\n        by a period.  It contains all the information\n        necessary for getting a piece of data off an event\n        sensor within the the context of the eventsensor point\n        config contact closure table; namely, which EventSensor\n        and which sensor (a.k.a. point).\n\n        This object's allowable values are 1 through 16,\n        and 200.  200 always refers to the EventSensor\n        inside the unit.  1 through 16 refer to additional\n        attached EventSensors.\n        ")
espcOutputIndexPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 2, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: espcOutputIndexPoint.setStatus('current')
if mibBuilder.loadTexts: espcOutputIndexPoint.setDescription('The part of the point index that delineates which\n        sensor on the EventSensor.\n\n        So this combined with espcOutputIndexES (which EventSensor)\n        uniquely defines each point attached to a unit within the\n        context of output point configuration.')
espcOutputEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 2, 6, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcOutputEnable.setStatus('current')
if mibBuilder.loadTexts: espcOutputEnable.setDescription('Enables the output event for this output.  This has no effect\n        on whether the relay changes state, only on whether a state change\n        triggers an event.')
espcOutputActiveState = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 2, 6, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcOutputActiveState.setStatus('current')
if mibBuilder.loadTexts: espcOutputActiveState.setDescription('Which state is considered the active state: energized/de-energized.')
espcOutputType = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 2, 6, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: espcOutputType.setStatus('current')
if mibBuilder.loadTexts: espcOutputType.setDescription('Output type: RELAY, POWER, SSR, TTL.')
espcOutputAliasValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 2, 6, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: espcOutputAliasValue.setStatus('current')
if mibBuilder.loadTexts: espcOutputAliasValue.setDescription('Output alias corresponding to its event state.')
espcOutputAliasColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 2, 6, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: espcOutputAliasColor.setStatus('current')
if mibBuilder.loadTexts: espcOutputAliasColor.setDescription('Output color corresponding to its event state.')
espcOutputActiveAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 2, 6, 1, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcOutputActiveAlias.setStatus('current')
if mibBuilder.loadTexts: espcOutputActiveAlias.setDescription('Alias for the output active state.')
espcOutputActiveColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 2, 6, 1, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcOutputActiveColor.setStatus('current')
if mibBuilder.loadTexts: espcOutputActiveColor.setDescription('Output color (as rendered in the web UI, in RGB hex format) corresponding\n        to the output active state.')
espcOutputActiveActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 2, 6, 1, 12), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcOutputActiveActions.setStatus('current')
if mibBuilder.loadTexts: espcOutputActiveActions.setDescription('Actions for the output active event.')
espcOutputActiveTrapnum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 2, 6, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(150, 1199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcOutputActiveTrapnum.setStatus('current')
if mibBuilder.loadTexts: espcOutputActiveTrapnum.setDescription('Actions for the output active event.')
espcOutputActiveClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 2, 6, 1, 14), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcOutputActiveClass.setStatus('current')
if mibBuilder.loadTexts: espcOutputActiveClass.setDescription('Class (severity) for the output active event.')
espcOutputInactiveAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 2, 6, 1, 20), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcOutputInactiveAlias.setStatus('current')
if mibBuilder.loadTexts: espcOutputInactiveAlias.setDescription('Alias for the output inactive state.')
espcOutputInactiveColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 2, 6, 1, 21), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcOutputInactiveColor.setStatus('current')
if mibBuilder.loadTexts: espcOutputInactiveColor.setDescription('Output color (as rendered in the web UI, in RGB hex format) corresponding\n        to the output inactive state.')
espcOutputInactiveActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 2, 6, 1, 22), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcOutputInactiveActions.setStatus('current')
if mibBuilder.loadTexts: espcOutputInactiveActions.setDescription('Actions for the output inactive event.')
espcOutputInactiveTrapnum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 2, 6, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(150, 1199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcOutputInactiveTrapnum.setStatus('current')
if mibBuilder.loadTexts: espcOutputInactiveTrapnum.setDescription('Actions for the output inactive event.')
espcOutputInactiveClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 2, 6, 1, 24), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcOutputInactiveClass.setStatus('current')
if mibBuilder.loadTexts: espcOutputInactiveClass.setDescription('Class (severity) for the output inactive event.')
numberPorts = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numberPorts.setStatus('current')
if mibBuilder.loadTexts: numberPorts.setDescription('Number of RS-232 ports found.\n        Range: 2 or 4')
portConfigTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 14, 2, 3, 2), )
if mibBuilder.loadTexts: portConfigTable.setStatus('current')
if mibBuilder.loadTexts: portConfigTable.setDescription('Port config table')
portConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 14, 2, 3, 2, 1), ).setIndexNames((0, "SITEBOSS-571-STD-MIB", "portConfigIndex"))
if mibBuilder.loadTexts: portConfigEntry.setStatus('current')
if mibBuilder.loadTexts: portConfigEntry.setDescription('Port config entry')
portConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portConfigIndex.setStatus('current')
if mibBuilder.loadTexts: portConfigIndex.setDescription('Index for ports')
portConfigBaud = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 3, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portConfigBaud.setStatus('current')
if mibBuilder.loadTexts: portConfigBaud.setDescription('Baud rate, 19200, 9600, etc.')
portConfigDataFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 3, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portConfigDataFormat.setStatus('current')
if mibBuilder.loadTexts: portConfigDataFormat.setDescription('Value representing word length, parity, and\n        stop bits: 0=8N1, 1=7E1, 2=7O1, 3=7N1, 4=8O2')
portConfigStripPtOutputLfs = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 3, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portConfigStripPtOutputLfs.setStatus('current')
if mibBuilder.loadTexts: portConfigStripPtOutputLfs.setDescription('Strip passthrough LFs sent to device on this port:\n        1=yes, 0=no.')
portConfigStripPtInputLfs = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 3, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portConfigStripPtInputLfs.setStatus('current')
if mibBuilder.loadTexts: portConfigStripPtInputLfs.setDescription('Strip passthrough LFs received from device on this\n        port: 1=yes, 0=no.')
portConfigMaskEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 3, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portConfigMaskEnable.setStatus('current')
if mibBuilder.loadTexts: portConfigMaskEnable.setDescription('1=Use the character mask on this port.  0=Do\n        not use the mask.  When the mask is enabled,\n        the following ASCII characters are ignored\n        on the port:\n        0, 1, 4-9, 11, 12, 14-31, 128-255.\n        When the mask is disabled, all characters are\n        accepted on the port.')
portConfigDAEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 3, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portConfigDAEnable.setStatus('current')
if mibBuilder.loadTexts: portConfigDAEnable.setDescription('1=Enable the Data Alarm Evaluator for data\n        on this port.  0=Do not evaluate data on this\n        port.')
portConfigStoreAlarmsDPT = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 3, 2, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portConfigStoreAlarmsDPT.setStatus('current')
if mibBuilder.loadTexts: portConfigStoreAlarmsDPT.setDescription('ON/OFF: store alarms received during passthrough')
portConfigRecordTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 3, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portConfigRecordTimeout.setStatus('current')
if mibBuilder.loadTexts: portConfigRecordTimeout.setDescription('Timeout after last unterminated data received upon\n        which data collected so far is stored as a record.')
portConfigDataType = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 3, 2, 1, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portConfigDataType.setStatus('current')
if mibBuilder.loadTexts: portConfigDataType.setDescription('How the port interprets incoming data: ASCII/BINARY')
portConfigEtxToCRLF = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 3, 2, 1, 12), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portConfigEtxToCRLF.setStatus('current')
if mibBuilder.loadTexts: portConfigEtxToCRLF.setDescription('ON/OFF whether the port translates incoming ETX to CRLF')
portConfigMLREnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 3, 2, 1, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portConfigMLREnable.setStatus('current')
if mibBuilder.loadTexts: portConfigMLREnable.setDescription('ON/OFF Whether Multiline Records are collected on this port.')
portConfigMLRStartField1Pos = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 3, 2, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portConfigMLRStartField1Pos.setStatus('current')
if mibBuilder.loadTexts: portConfigMLRStartField1Pos.setDescription('Position of MLR start field 1')
portConfigMLRStartField1Text = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 3, 2, 1, 15), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portConfigMLRStartField1Text.setStatus('current')
if mibBuilder.loadTexts: portConfigMLRStartField1Text.setDescription('Text to match MLR start field 1')
portConfigMLRStartField2Pos = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 3, 2, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portConfigMLRStartField2Pos.setStatus('current')
if mibBuilder.loadTexts: portConfigMLRStartField2Pos.setDescription('Position of MLR start field 2')
portConfigMLRStartField2Text = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 3, 2, 1, 17), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portConfigMLRStartField2Text.setStatus('current')
if mibBuilder.loadTexts: portConfigMLRStartField2Text.setDescription('Text to match MLR start field 2')
portConfigMLRNumLinesBefore = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 3, 2, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portConfigMLRNumLinesBefore.setStatus('current')
if mibBuilder.loadTexts: portConfigMLRNumLinesBefore.setDescription('Number of lines before the starting line which should\n        be included in the MLR')
portConfigMLREndDetection = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 3, 2, 1, 19), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portConfigMLREndDetection.setStatus('current')
if mibBuilder.loadTexts: portConfigMLREndDetection.setDescription('How the MLR parser determines what ends an MLR: by FORMULA,\n        number of lines received so far (COUNT), or number of blank\n        lines received so far (BLANKS)')
portConfigMLRLineCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 3, 2, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portConfigMLRLineCount.setStatus('current')
if mibBuilder.loadTexts: portConfigMLRLineCount.setDescription('Number of lines in the MLR (used by the end detection mode)')
portConfigMLREndField1Pos = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 3, 2, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portConfigMLREndField1Pos.setStatus('current')
if mibBuilder.loadTexts: portConfigMLREndField1Pos.setDescription('Position of MLR end field 1')
portConfigMLREndField1Text = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 3, 2, 1, 22), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portConfigMLREndField1Text.setStatus('current')
if mibBuilder.loadTexts: portConfigMLREndField1Text.setDescription('Text to match MLR end field 1')
portConfigMLREndField2Pos = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 3, 2, 1, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portConfigMLREndField2Pos.setStatus('current')
if mibBuilder.loadTexts: portConfigMLREndField2Pos.setDescription('Position of MLR end field 2')
portConfigMLREndField2Text = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 3, 2, 1, 24), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portConfigMLREndField2Text.setStatus('current')
if mibBuilder.loadTexts: portConfigMLREndField2Text.setDescription('Text to match MLR end field 2')
portConfigMLRUseComplexRules = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 3, 2, 1, 25), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portConfigMLRUseComplexRules.setStatus('current')
if mibBuilder.loadTexts: portConfigMLRUseComplexRules.setDescription('ON/OFF MLR parser uses complex rules (field possitions/\n        formulas, etc.)')
portConfigBufferPT = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 3, 2, 1, 26), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portConfigBufferPT.setStatus('current')
if mibBuilder.loadTexts: portConfigBufferPT.setDescription('ON/OFF records received during passthrough mode are\n        buffered/stored in the database')
portConfigId = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 3, 2, 1, 27), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portConfigId.setStatus('current')
if mibBuilder.loadTexts: portConfigId.setDescription('The text identifer for the port')
portConfigMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 3, 2, 1, 28), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portConfigMode.setStatus('current')
if mibBuilder.loadTexts: portConfigMode.setDescription('Mode of the serial port.')
portConfigHsk = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 3, 2, 1, 29), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portConfigHsk.setStatus('current')
if mibBuilder.loadTexts: portConfigHsk.setDescription('Handshaking mode of the serial port.')
eth1Mode = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 1, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eth1Mode.setStatus('current')
if mibBuilder.loadTexts: eth1Mode.setDescription('Mode of the Ethernet1 interface: STATIC,DHCP,VLAN')
eth1Address = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 1, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth1Address.setStatus('current')
if mibBuilder.loadTexts: eth1Address.setDescription('Ethernet1 IP address')
eth1SubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 1, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth1SubnetMask.setStatus('current')
if mibBuilder.loadTexts: eth1SubnetMask.setDescription('Ethernet1 subnet mask')
eth1Router = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 1, 1, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth1Router.setStatus('current')
if mibBuilder.loadTexts: eth1Router.setDescription('Ethernet1 router')
eth1VLAN1ID = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 1, 1, 1, 5, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth1VLAN1ID.setStatus('current')
if mibBuilder.loadTexts: eth1VLAN1ID.setDescription('Ethernet1 VLAN1 ID')
eth1VLAN1Priority = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 1, 1, 1, 5, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth1VLAN1Priority.setStatus('current')
if mibBuilder.loadTexts: eth1VLAN1Priority.setDescription('Ethernet1 VLAN1 priority')
eth1VLAN1Address = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 1, 1, 1, 5, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth1VLAN1Address.setStatus('current')
if mibBuilder.loadTexts: eth1VLAN1Address.setDescription('Ethernet1 VLAN1 IP address')
eth1VLAN1SubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 1, 1, 1, 5, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth1VLAN1SubnetMask.setStatus('current')
if mibBuilder.loadTexts: eth1VLAN1SubnetMask.setDescription('Ethernet1 VLAN1 subnet mask')
eth1VLAN1Router = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 1, 1, 1, 5, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth1VLAN1Router.setStatus('current')
if mibBuilder.loadTexts: eth1VLAN1Router.setDescription('Ethernet1 VLAN1 router')
eth1VLAN2ID = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 1, 1, 1, 5, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth1VLAN2ID.setStatus('current')
if mibBuilder.loadTexts: eth1VLAN2ID.setDescription('Ethernet1 VLAN2 ID')
eth1VLAN2Priority = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 1, 1, 1, 5, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth1VLAN2Priority.setStatus('current')
if mibBuilder.loadTexts: eth1VLAN2Priority.setDescription('Ethernet1 VLAN2 priority')
eth1VLAN2Address = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 1, 1, 1, 5, 2, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth1VLAN2Address.setStatus('current')
if mibBuilder.loadTexts: eth1VLAN2Address.setDescription('Ethernet1 VLAN2 IP address')
eth1VLAN2SubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 1, 1, 1, 5, 2, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth1VLAN2SubnetMask.setStatus('current')
if mibBuilder.loadTexts: eth1VLAN2SubnetMask.setDescription('Ethernet1 VLAN2 subnet mask')
eth1VLAN2Router = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 1, 1, 1, 5, 2, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth1VLAN2Router.setStatus('current')
if mibBuilder.loadTexts: eth1VLAN2Router.setDescription('Ethernet1 VLAN2 router')
eth1VLAN3ID = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 1, 1, 1, 5, 3, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth1VLAN3ID.setStatus('current')
if mibBuilder.loadTexts: eth1VLAN3ID.setDescription('Ethernet1 VLAN3 ID')
eth1VLAN3Priority = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 1, 1, 1, 5, 3, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth1VLAN3Priority.setStatus('current')
if mibBuilder.loadTexts: eth1VLAN3Priority.setDescription('Ethernet1 VLAN3 priority')
eth1VLAN3Address = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 1, 1, 1, 5, 3, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth1VLAN3Address.setStatus('current')
if mibBuilder.loadTexts: eth1VLAN3Address.setDescription('Ethernet1 VLAN3 IP address')
eth1VLAN3SubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 1, 1, 1, 5, 3, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth1VLAN3SubnetMask.setStatus('current')
if mibBuilder.loadTexts: eth1VLAN3SubnetMask.setDescription('Ethernet1 VLAN3 subnet mask')
eth1VLAN3Router = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 1, 1, 1, 5, 3, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth1VLAN3Router.setStatus('current')
if mibBuilder.loadTexts: eth1VLAN3Router.setDescription('Ethernet1 VLAN3 router')
eth1VLAN4ID = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 1, 1, 1, 5, 4, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth1VLAN4ID.setStatus('current')
if mibBuilder.loadTexts: eth1VLAN4ID.setDescription('Ethernet1 VLAN4 ID')
eth1VLAN4Priority = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 1, 1, 1, 5, 4, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth1VLAN4Priority.setStatus('current')
if mibBuilder.loadTexts: eth1VLAN4Priority.setDescription('Ethernet1 VLAN4 priority')
eth1VLAN4Address = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 1, 1, 1, 5, 4, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth1VLAN4Address.setStatus('current')
if mibBuilder.loadTexts: eth1VLAN4Address.setDescription('Ethernet1 VLAN4 IP address')
eth1VLAN4SubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 1, 1, 1, 5, 4, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth1VLAN4SubnetMask.setStatus('current')
if mibBuilder.loadTexts: eth1VLAN4SubnetMask.setDescription('Ethernet1 VLAN4 subnet mask')
eth1VLAN4Router = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 1, 1, 1, 5, 4, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth1VLAN4Router.setStatus('current')
if mibBuilder.loadTexts: eth1VLAN4Router.setDescription('Ethernet1 VLAN4 router')
eth1VLAN5ID = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 1, 1, 1, 5, 5, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth1VLAN5ID.setStatus('current')
if mibBuilder.loadTexts: eth1VLAN5ID.setDescription('Ethernet1 VLAN5 ID')
eth1VLAN5Priority = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 1, 1, 1, 5, 5, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth1VLAN5Priority.setStatus('current')
if mibBuilder.loadTexts: eth1VLAN5Priority.setDescription('Ethernet1 VLAN5 priority')
eth1VLAN5Address = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 1, 1, 1, 5, 5, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth1VLAN5Address.setStatus('current')
if mibBuilder.loadTexts: eth1VLAN5Address.setDescription('Ethernet1 VLAN5 IP address')
eth1VLAN5SubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 1, 1, 1, 5, 5, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth1VLAN5SubnetMask.setStatus('current')
if mibBuilder.loadTexts: eth1VLAN5SubnetMask.setDescription('Ethernet1 VLAN5 subnet mask')
eth1VLAN5Router = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 1, 1, 1, 5, 5, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth1VLAN5Router.setStatus('current')
if mibBuilder.loadTexts: eth1VLAN5Router.setDescription('Ethernet1 VLAN5 router')
eth1VLAN6ID = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 1, 1, 1, 5, 6, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth1VLAN6ID.setStatus('current')
if mibBuilder.loadTexts: eth1VLAN6ID.setDescription('Ethernet1 VLAN6 ID')
eth1VLAN6Priority = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 1, 1, 1, 5, 6, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth1VLAN6Priority.setStatus('current')
if mibBuilder.loadTexts: eth1VLAN6Priority.setDescription('Ethernet1 VLAN6 priority')
eth1VLAN6Address = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 1, 1, 1, 5, 6, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth1VLAN6Address.setStatus('current')
if mibBuilder.loadTexts: eth1VLAN6Address.setDescription('Ethernet1 VLAN6 IP address')
eth1VLAN6SubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 1, 1, 1, 5, 6, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth1VLAN6SubnetMask.setStatus('current')
if mibBuilder.loadTexts: eth1VLAN6SubnetMask.setDescription('Ethernet1 VLAN6 subnet mask')
eth1VLAN6Router = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 1, 1, 1, 5, 6, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth1VLAN6Router.setStatus('current')
if mibBuilder.loadTexts: eth1VLAN6Router.setDescription('Ethernet1 VLAN6 router')
eth1MAC = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 1, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eth1MAC.setStatus('current')
if mibBuilder.loadTexts: eth1MAC.setDescription('Ethernet1 MAC')
eth1IPv6Mode = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 1, 1, 1, 7, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth1IPv6Mode.setStatus('current')
if mibBuilder.loadTexts: eth1IPv6Mode.setDescription('Controls IPv6 operation for this Ethernet interface.')
eth1IPv6StaticAddress = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 1, 1, 1, 7, 2, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth1IPv6StaticAddress.setStatus('current')
if mibBuilder.loadTexts: eth1IPv6StaticAddress.setDescription('he static IPv6 address to use for this interface when in\n        operating in STATIC mode.')
eth1IPv6StaticRouter = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 1, 1, 1, 7, 2, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth1IPv6StaticRouter.setStatus('current')
if mibBuilder.loadTexts: eth1IPv6StaticRouter.setDescription('The IPv6 router to engage as the default router when this\n        interface operates in STATIC mode.')
eth1IPv6AutoAddress1 = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 1, 1, 1, 7, 3, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eth1IPv6AutoAddress1.setStatus('current')
if mibBuilder.loadTexts: eth1IPv6AutoAddress1.setDescription('One of the automatically-acquired IPv6 addresses.')
eth1IPv6AutoAddress2 = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 1, 1, 1, 7, 3, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eth1IPv6AutoAddress2.setStatus('current')
if mibBuilder.loadTexts: eth1IPv6AutoAddress2.setDescription('One of the automatically-acquired IPv6 addresses.')
eth1IPv6AutoAddress3 = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 1, 1, 1, 7, 3, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eth1IPv6AutoAddress3.setStatus('current')
if mibBuilder.loadTexts: eth1IPv6AutoAddress3.setDescription('One of the automatically-acquired IPv6 addresses.')
eth1IPv6AutoAddress4 = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 1, 1, 1, 7, 3, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eth1IPv6AutoAddress4.setStatus('current')
if mibBuilder.loadTexts: eth1IPv6AutoAddress4.setDescription('One of the automatically-acquired IPv6 addresses.')
eth1IPv6LinkLocalAddress = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 1, 1, 1, 7, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eth1IPv6LinkLocalAddress.setStatus('current')
if mibBuilder.loadTexts: eth1IPv6LinkLocalAddress.setDescription('The link local IPv6 address for this interface. This is\n        present when the IPv6 mode is not OFF.')
eth2Mode = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 1, 1, 2, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eth2Mode.setStatus('current')
if mibBuilder.loadTexts: eth2Mode.setDescription('Mode of the Ethernet2 interface: STATIC,DHCP,VLAN')
eth2Address = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 1, 1, 2, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth2Address.setStatus('current')
if mibBuilder.loadTexts: eth2Address.setDescription('Ethernet2 IP address')
eth2SubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 1, 1, 2, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth2SubnetMask.setStatus('current')
if mibBuilder.loadTexts: eth2SubnetMask.setDescription('Ethernet2 subnet mask')
eth2Router = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 1, 1, 2, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth2Router.setStatus('current')
if mibBuilder.loadTexts: eth2Router.setDescription('Ethernet2 router')
eth2VLAN1ID = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 1, 1, 2, 5, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth2VLAN1ID.setStatus('current')
if mibBuilder.loadTexts: eth2VLAN1ID.setDescription('Ethernet2 VLAN1 ID')
eth2VLAN1Priority = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 1, 1, 2, 5, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth2VLAN1Priority.setStatus('current')
if mibBuilder.loadTexts: eth2VLAN1Priority.setDescription('Ethernet2 VLAN1 priority')
eth2VLAN1Address = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 1, 1, 2, 5, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth2VLAN1Address.setStatus('current')
if mibBuilder.loadTexts: eth2VLAN1Address.setDescription('Ethernet2 VLAN1 IP address')
eth2VLAN1SubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 1, 1, 2, 5, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth2VLAN1SubnetMask.setStatus('current')
if mibBuilder.loadTexts: eth2VLAN1SubnetMask.setDescription('Ethernet2 VLAN1 subnet mask')
eth2VLAN1Router = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 1, 1, 2, 5, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth2VLAN1Router.setStatus('current')
if mibBuilder.loadTexts: eth2VLAN1Router.setDescription('Ethernet2 VLAN1 router')
eth2VLAN2ID = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 1, 1, 2, 5, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth2VLAN2ID.setStatus('current')
if mibBuilder.loadTexts: eth2VLAN2ID.setDescription('Ethernet2 VLAN2 ID')
eth2VLAN2Priority = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 1, 1, 2, 5, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth2VLAN2Priority.setStatus('current')
if mibBuilder.loadTexts: eth2VLAN2Priority.setDescription('Ethernet2 VLAN2 priority')
eth2VLAN2Address = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 1, 1, 2, 5, 2, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth2VLAN2Address.setStatus('current')
if mibBuilder.loadTexts: eth2VLAN2Address.setDescription('Ethernet2 VLAN2 IP address')
eth2VLAN2SubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 1, 1, 2, 5, 2, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth2VLAN2SubnetMask.setStatus('current')
if mibBuilder.loadTexts: eth2VLAN2SubnetMask.setDescription('Ethernet2 VLAN2 subnet mask')
eth2VLAN2Router = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 1, 1, 2, 5, 2, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth2VLAN2Router.setStatus('current')
if mibBuilder.loadTexts: eth2VLAN2Router.setDescription('Ethernet2 VLAN2 router')
eth2VLAN3ID = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 1, 1, 2, 5, 3, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth2VLAN3ID.setStatus('current')
if mibBuilder.loadTexts: eth2VLAN3ID.setDescription('Ethernet2 VLAN3 ID')
eth2VLAN3Priority = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 1, 1, 2, 5, 3, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth2VLAN3Priority.setStatus('current')
if mibBuilder.loadTexts: eth2VLAN3Priority.setDescription('Ethernet2 VLAN3 priority')
eth2VLAN3Address = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 1, 1, 2, 5, 3, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth2VLAN3Address.setStatus('current')
if mibBuilder.loadTexts: eth2VLAN3Address.setDescription('Ethernet2 VLAN3 IP address')
eth2VLAN3SubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 1, 1, 2, 5, 3, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth2VLAN3SubnetMask.setStatus('current')
if mibBuilder.loadTexts: eth2VLAN3SubnetMask.setDescription('Ethernet2 VLAN3 subnet mask')
eth2VLAN3Router = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 1, 1, 2, 5, 3, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth2VLAN3Router.setStatus('current')
if mibBuilder.loadTexts: eth2VLAN3Router.setDescription('Ethernet2 VLAN3 router')
eth2VLAN4ID = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 1, 1, 2, 5, 4, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth2VLAN4ID.setStatus('current')
if mibBuilder.loadTexts: eth2VLAN4ID.setDescription('Ethernet2 VLAN4 ID')
eth2VLAN4Priority = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 1, 1, 2, 5, 4, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth2VLAN4Priority.setStatus('current')
if mibBuilder.loadTexts: eth2VLAN4Priority.setDescription('Ethernet2 VLAN4 priority')
eth2VLAN4Address = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 1, 1, 2, 5, 4, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth2VLAN4Address.setStatus('current')
if mibBuilder.loadTexts: eth2VLAN4Address.setDescription('Ethernet2 VLAN4 IP address')
eth2VLAN4SubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 1, 1, 2, 5, 4, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth2VLAN4SubnetMask.setStatus('current')
if mibBuilder.loadTexts: eth2VLAN4SubnetMask.setDescription('Ethernet2 VLAN4 subnet mask')
eth2VLAN4Router = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 1, 1, 2, 5, 4, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth2VLAN4Router.setStatus('current')
if mibBuilder.loadTexts: eth2VLAN4Router.setDescription('Ethernet2 VLAN4 router')
eth2VLAN5ID = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 1, 1, 2, 5, 5, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth2VLAN5ID.setStatus('current')
if mibBuilder.loadTexts: eth2VLAN5ID.setDescription('Ethernet2 VLAN5 ID')
eth2VLAN5Priority = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 1, 1, 2, 5, 5, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth2VLAN5Priority.setStatus('current')
if mibBuilder.loadTexts: eth2VLAN5Priority.setDescription('Ethernet2 VLAN5 priority')
eth2VLAN5Address = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 1, 1, 2, 5, 5, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth2VLAN5Address.setStatus('current')
if mibBuilder.loadTexts: eth2VLAN5Address.setDescription('Ethernet2 VLAN5 IP address')
eth2VLAN5SubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 1, 1, 2, 5, 5, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth2VLAN5SubnetMask.setStatus('current')
if mibBuilder.loadTexts: eth2VLAN5SubnetMask.setDescription('Ethernet2 VLAN5 subnet mask')
eth2VLAN5Router = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 1, 1, 2, 5, 5, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth2VLAN5Router.setStatus('current')
if mibBuilder.loadTexts: eth2VLAN5Router.setDescription('Ethernet2 VLAN5 router')
eth2VLAN6ID = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 1, 1, 2, 5, 6, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth2VLAN6ID.setStatus('current')
if mibBuilder.loadTexts: eth2VLAN6ID.setDescription('Ethernet2 VLAN6 ID')
eth2VLAN6Priority = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 1, 1, 2, 5, 6, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth2VLAN6Priority.setStatus('current')
if mibBuilder.loadTexts: eth2VLAN6Priority.setDescription('Ethernet2 VLAN6 priority')
eth2VLAN6Address = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 1, 1, 2, 5, 6, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth2VLAN6Address.setStatus('current')
if mibBuilder.loadTexts: eth2VLAN6Address.setDescription('Ethernet2 VLAN6 IP address')
eth2VLAN6SubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 1, 1, 2, 5, 6, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth2VLAN6SubnetMask.setStatus('current')
if mibBuilder.loadTexts: eth2VLAN6SubnetMask.setDescription('Ethernet2 VLAN6 subnet mask')
eth2VLAN6Router = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 1, 1, 2, 5, 6, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth2VLAN6Router.setStatus('current')
if mibBuilder.loadTexts: eth2VLAN6Router.setDescription('Ethernet2 VLAN6 router')
eth2MAC = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 1, 1, 2, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eth2MAC.setStatus('current')
if mibBuilder.loadTexts: eth2MAC.setDescription('Ethernet2 MAC')
eth2IPv6Mode = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 1, 1, 2, 7, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth2IPv6Mode.setStatus('current')
if mibBuilder.loadTexts: eth2IPv6Mode.setDescription('Controls IPv6 operation for this Ethernet interface.')
eth2IPv6StaticAddress = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 1, 1, 2, 7, 2, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth2IPv6StaticAddress.setStatus('current')
if mibBuilder.loadTexts: eth2IPv6StaticAddress.setDescription('he static IPv6 address to use for this interface when in\n        operating in STATIC mode.')
eth2IPv6StaticRouter = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 1, 1, 2, 7, 2, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth2IPv6StaticRouter.setStatus('current')
if mibBuilder.loadTexts: eth2IPv6StaticRouter.setDescription('The IPv6 router to engage as the default router when this\n        interface operates in STATIC mode.')
eth2IPv6AutoAddress1 = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 1, 1, 2, 7, 3, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eth2IPv6AutoAddress1.setStatus('current')
if mibBuilder.loadTexts: eth2IPv6AutoAddress1.setDescription('One of the automatically-acquired IPv6 addresses.')
eth2IPv6AutoAddress2 = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 1, 1, 2, 7, 3, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eth2IPv6AutoAddress2.setStatus('current')
if mibBuilder.loadTexts: eth2IPv6AutoAddress2.setDescription('One of the automatically-acquired IPv6 addresses.')
eth2IPv6AutoAddress3 = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 1, 1, 2, 7, 3, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eth2IPv6AutoAddress3.setStatus('current')
if mibBuilder.loadTexts: eth2IPv6AutoAddress3.setDescription('One of the automatically-acquired IPv6 addresses.')
eth2IPv6AutoAddress4 = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 1, 1, 2, 7, 3, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eth2IPv6AutoAddress4.setStatus('current')
if mibBuilder.loadTexts: eth2IPv6AutoAddress4.setDescription('One of the automatically-acquired IPv6 addresses.')
eth2IPv6LinkLocalAddress = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 1, 1, 2, 7, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eth2IPv6LinkLocalAddress.setStatus('current')
if mibBuilder.loadTexts: eth2IPv6LinkLocalAddress.setDescription('The link local IPv6 address for this interface. This is\n        present when the IPv6 mode is not OFF.')
defaultRouter = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: defaultRouter.setStatus('current')
if mibBuilder.loadTexts: defaultRouter.setDescription('The default router/gateway')
dnsTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 3), )
if mibBuilder.loadTexts: dnsTable.setStatus('current')
if mibBuilder.loadTexts: dnsTable.setDescription('DNS server address table')
dnsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 3, 1), ).setIndexNames((0, "SITEBOSS-571-STD-MIB", "dnsIndex"))
if mibBuilder.loadTexts: dnsEntry.setStatus('current')
if mibBuilder.loadTexts: dnsEntry.setDescription('DNS server address entry')
dnsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsIndex.setStatus('current')
if mibBuilder.loadTexts: dnsIndex.setDescription('Index for DNS server address')
dnsAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 3, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsAddress.setStatus('current')
if mibBuilder.loadTexts: dnsAddress.setDescription('DNS server address')
hostname = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hostname.setStatus('current')
if mibBuilder.loadTexts: hostname.setDescription('The hostname of the unit')
hostTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 5), )
if mibBuilder.loadTexts: hostTable.setStatus('current')
if mibBuilder.loadTexts: hostTable.setDescription('Static host table')
hostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 5, 1), ).setIndexNames((0, "SITEBOSS-571-STD-MIB", "hostIndex"))
if mibBuilder.loadTexts: hostEntry.setStatus('current')
if mibBuilder.loadTexts: hostEntry.setDescription('Static host entry')
hostIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostIndex.setStatus('current')
if mibBuilder.loadTexts: hostIndex.setDescription('Index for static host')
hostDeclaration = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 5, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hostDeclaration.setStatus('current')
if mibBuilder.loadTexts: hostDeclaration.setDescription("Static host declaration string (i.e. 'address hostname')")
ncpDuplex = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncpDuplex.setStatus('current')
if mibBuilder.loadTexts: ncpDuplex.setDescription('For network command processor: 1=Input characters are echoed; 0=no echo.')
ncpTimeout = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncpTimeout.setStatus('current')
if mibBuilder.loadTexts: ncpTimeout.setDescription('Network command processor inactivity timeout')
snmpAgentEnable = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 8, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpAgentEnable.setStatus('current')
if mibBuilder.loadTexts: snmpAgentEnable.setDescription('ON/OFF for snmp agent')
snmpNotificationCaptureEnable = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 8, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpNotificationCaptureEnable.setStatus('current')
if mibBuilder.loadTexts: snmpNotificationCaptureEnable.setDescription('ON/OFF unit receives and stores SNMP traps/informs')
snmpNotificationCaptureFile = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 8, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpNotificationCaptureFile.setStatus('current')
if mibBuilder.loadTexts: snmpNotificationCaptureFile.setDescription('File to which unit stores received SNMP traps/informs')
snmpNtfnAttempts = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 8, 7, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpNtfnAttempts.setStatus('current')
if mibBuilder.loadTexts: snmpNtfnAttempts.setDescription('Maximum of times the unit attempts to send a notification\n        (trap/inform) in 1 cycle')
snmpNtfnTimeout = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 8, 7, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpNtfnTimeout.setStatus('current')
if mibBuilder.loadTexts: snmpNtfnTimeout.setDescription('Number of seconds between retries of sending a notification')
snmpNtfnCycles = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 8, 7, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpNtfnCycles.setStatus('current')
if mibBuilder.loadTexts: snmpNtfnCycles.setDescription('Number of times the unit attempts a group of attempts to send\n        a notification (a cycle)')
snmpNtfnSnooze = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 8, 7, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpNtfnSnooze.setStatus('current')
if mibBuilder.loadTexts: snmpNtfnSnooze.setDescription('Minutes between cycles')
snmpPMode = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 8, 9, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpPMode.setStatus('current')
if mibBuilder.loadTexts: snmpPMode.setDescription('Mode of poll operation: OFF, POLL ONLY (just make the results\n        available to view), or POLL BUFFER (store the results).')
snmpPBufferFile = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 8, 9, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpPBufferFile.setStatus('current')
if mibBuilder.loadTexts: snmpPBufferFile.setDescription('CRDB file in which data is stored.')
snmpPBufferAllPeriod = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 8, 9, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpPBufferAllPeriod.setStatus('current')
if mibBuilder.loadTexts: snmpPBufferAllPeriod.setDescription('Period (in seconds) that, if non-zero, all results are buffered\n        in the CRDB regardless of the threshold.')
snmpPRequestTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 8, 9, 4), )
if mibBuilder.loadTexts: snmpPRequestTable.setStatus('current')
if mibBuilder.loadTexts: snmpPRequestTable.setDescription('Table of SNMP Poll requests.')
snmpPRequestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 8, 9, 4, 1), ).setIndexNames((0, "SITEBOSS-571-STD-MIB", "snmpPRequestIndex"))
if mibBuilder.loadTexts: snmpPRequestEntry.setStatus('current')
if mibBuilder.loadTexts: snmpPRequestEntry.setDescription('Entry for table pf SNMP Poll requests.')
snmpPRequestIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 8, 9, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpPRequestIndex.setStatus('current')
if mibBuilder.loadTexts: snmpPRequestIndex.setDescription('Index for table of SNMP Poll requests.')
snmpPRequestDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 8, 9, 4, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpPRequestDescription.setStatus('current')
if mibBuilder.loadTexts: snmpPRequestDescription.setDescription('A description for this single telemetry request; no functional effect.')
snmpPRequestAgent = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 8, 9, 4, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpPRequestAgent.setStatus('current')
if mibBuilder.loadTexts: snmpPRequestAgent.setDescription('SNMP Agent IP address or hostname for this single telemetry request.')
snmpPRequestReadcom = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 8, 9, 4, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpPRequestReadcom.setStatus('current')
if mibBuilder.loadTexts: snmpPRequestReadcom.setDescription('SNMP read community for this single telemetry request.')
snmpPRequestOID = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 8, 9, 4, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpPRequestOID.setStatus('current')
if mibBuilder.loadTexts: snmpPRequestOID.setDescription('SNMP object identifier for this single telemetry request.')
snmpPRequestPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 8, 9, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpPRequestPeriod.setStatus('current')
if mibBuilder.loadTexts: snmpPRequestPeriod.setDescription('How many seconds between periodic SNMP polls of this\n        single telemetry request.')
snmpPRequestID = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 8, 9, 4, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpPRequestID.setStatus('current')
if mibBuilder.loadTexts: snmpPRequestID.setDescription('A textual field that is part of the record containing\n        the telemetry result.')
snmpPRequestThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 8, 9, 4, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpPRequestThreshold.setStatus('current')
if mibBuilder.loadTexts: snmpPRequestThreshold.setDescription('Controls when new data is stored upon a successful\n        telemetry request.')
snmpPRequestResultStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 8, 9, 4, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpPRequestResultStatus.setStatus('current')
if mibBuilder.loadTexts: snmpPRequestResultStatus.setDescription('Status of the last attempt for this telemetry request.')
snmpPRequestResultValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 8, 9, 4, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpPRequestResultValue.setStatus('current')
if mibBuilder.loadTexts: snmpPRequestResultValue.setDescription('The telemetry value if the last request was successful.')
snmpPRequestResultTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 8, 9, 4, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpPRequestResultTime.setStatus('current')
if mibBuilder.loadTexts: snmpPRequestResultTime.setDescription('The timestamp of the last telemetry request.')
snmpPRequestResultType = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 8, 9, 4, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpPRequestResultType.setStatus('current')
if mibBuilder.loadTexts: snmpPRequestResultType.setDescription('The type of the telemetry as reported by the agent.')
ftpPushEnable = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 9, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpPushEnable.setStatus('current')
if mibBuilder.loadTexts: ftpPushEnable.setDescription('Enable FTP push for REGULAR (protocol: FTP) or SECURE (protocol:\n        SFTP) operation, or disable it (OFF)')
ftpPushServer = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 9, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpPushServer.setStatus('current')
if mibBuilder.loadTexts: ftpPushServer.setDescription('FTP server to which data should be pushed')
ftpPushAccount = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 9, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpPushAccount.setStatus('current')
if mibBuilder.loadTexts: ftpPushAccount.setDescription('FTP push account')
ftpPushDirectory = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 9, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpPushDirectory.setStatus('current')
if mibBuilder.loadTexts: ftpPushDirectory.setDescription('FTP push directory')
ftpPushperiod = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 9, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpPushperiod.setStatus('current')
if mibBuilder.loadTexts: ftpPushperiod.setDescription('Minutes between pushes')
ftpPushPushFileTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 9, 8), )
if mibBuilder.loadTexts: ftpPushPushFileTable.setStatus('current')
if mibBuilder.loadTexts: ftpPushPushFileTable.setDescription('Table of files to push')
ftpPushPushFileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 9, 8, 1), ).setIndexNames((0, "SITEBOSS-571-STD-MIB", "ftpPushPushFileIndex"))
if mibBuilder.loadTexts: ftpPushPushFileEntry.setStatus('current')
if mibBuilder.loadTexts: ftpPushPushFileEntry.setDescription('Entry for table of files to push')
ftpPushPushFileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 9, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpPushPushFileIndex.setStatus('current')
if mibBuilder.loadTexts: ftpPushPushFileIndex.setDescription('Index for table of files to push')
ftpPushPushFile = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 9, 8, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpPushPushFile.setStatus('current')
if mibBuilder.loadTexts: ftpPushPushFile.setDescription('ON/OFF push this local FILEx')
ftpPushPushAudit = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 9, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpPushPushAudit.setStatus('current')
if mibBuilder.loadTexts: ftpPushPushAudit.setDescription('ON/OFF push the audit log')
ftpPushPushAlarms = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 9, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpPushPushAlarms.setStatus('current')
if mibBuilder.loadTexts: ftpPushPushAlarms.setDescription('ON/OFF push the alarms/events file')
ftpPushRemoteFileTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 9, 11), )
if mibBuilder.loadTexts: ftpPushRemoteFileTable.setStatus('current')
if mibBuilder.loadTexts: ftpPushRemoteFileTable.setDescription('Table of remote names of files to push')
ftpPushRemoteFileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 9, 11, 1), ).setIndexNames((0, "SITEBOSS-571-STD-MIB", "ftpPushRemoteFileIndex"))
if mibBuilder.loadTexts: ftpPushRemoteFileEntry.setStatus('current')
if mibBuilder.loadTexts: ftpPushRemoteFileEntry.setDescription('Entry for table of remote names of files to push')
ftpPushRemoteFileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 9, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpPushRemoteFileIndex.setStatus('current')
if mibBuilder.loadTexts: ftpPushRemoteFileIndex.setDescription('Index for table of remote names of files to push')
ftpPushRemoteFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 9, 11, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpPushRemoteFileName.setStatus('current')
if mibBuilder.loadTexts: ftpPushRemoteFileName.setDescription('remote name of pushed FILEx (name on server)')
ftpPushRemoteAlarmName = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 9, 12), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpPushRemoteAlarmName.setStatus('current')
if mibBuilder.loadTexts: ftpPushRemoteAlarmName.setDescription('Filename on server for alarms')
ftpPushPassive = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 9, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpPushPassive.setStatus('current')
if mibBuilder.loadTexts: ftpPushPassive.setDescription('ON/OFF use ftp passive mode')
ftpPushIncludeDate = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 9, 14), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpPushIncludeDate.setStatus('current')
if mibBuilder.loadTexts: ftpPushIncludeDate.setDescription('ON/OFF include the date in the name of the pushed file')
ftpPushIncludeTime = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 9, 15), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpPushIncludeTime.setStatus('current')
if mibBuilder.loadTexts: ftpPushIncludeTime.setDescription('ON/OFF include the time in the name of the pushed file')
ftpPushIncludeSeq = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 9, 16), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpPushIncludeSeq.setStatus('current')
if mibBuilder.loadTexts: ftpPushIncludeSeq.setDescription('ON/OFF include a sequence number in the name of the pushed file')
ftpPushPermissions = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 9, 17), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpPushPermissions.setStatus('current')
if mibBuilder.loadTexts: ftpPushPermissions.setDescription('Unix permissions to apply to pushed files (octal notation).')
pppDialEnable = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 10, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppDialEnable.setStatus('current')
if mibBuilder.loadTexts: pppDialEnable.setDescription('ON/OFF PPP dialout enabled')
pppDialNumber = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 10, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppDialNumber.setStatus('current')
if mibBuilder.loadTexts: pppDialNumber.setDescription('phone number to dial')
pppDialIdleTimeout = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 10, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppDialIdleTimeout.setStatus('current')
if mibBuilder.loadTexts: pppDialIdleTimeout.setDescription('Seconds of inactivity after which the unit disconnects')
pppDialRetries = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 10, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppDialRetries.setStatus('current')
if mibBuilder.loadTexts: pppDialRetries.setDescription('Number of dialing retries for PPP')
pppDialCDTimeout = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 10, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppDialCDTimeout.setStatus('current')
if mibBuilder.loadTexts: pppDialCDTimeout.setDescription('Number of seconds to wait after dialing for CD before\n        giving up')
pppDialLoginTimeout = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 10, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppDialLoginTimeout.setStatus('current')
if mibBuilder.loadTexts: pppDialLoginTimeout.setDescription('Seconds to wait to negotiate PPP after connecting')
pppDialMdmInit = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 10, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppDialMdmInit.setStatus('current')
if mibBuilder.loadTexts: pppDialMdmInit.setDescription('Modem init string to use when dialing PPP')
pppDialSuggestIP = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 10, 1, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppDialSuggestIP.setStatus('current')
if mibBuilder.loadTexts: pppDialSuggestIP.setDescription("IP address to suggest as the unit's end (local end) of the\n        PPP link")
pppDialPlainLogin = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 10, 1, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppDialPlainLogin.setStatus('current')
if mibBuilder.loadTexts: pppDialPlainLogin.setDescription('ON/OFF look for login/password prompt before negotiating\n        PPP')
pppHostEnable = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 10, 2, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppHostEnable.setStatus('current')
if mibBuilder.loadTexts: pppHostEnable.setDescription('ON/OFF Unit accepts PPP negotiation')
pppHostIdleTimeout = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 10, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppHostIdleTimeout.setStatus('current')
if mibBuilder.loadTexts: pppHostIdleTimeout.setDescription('Seconds of inactivity after which PPP-hosted link will\n        terminate')
pppHostLocalIP = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 10, 2, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppHostLocalIP.setStatus('current')
if mibBuilder.loadTexts: pppHostLocalIP.setDescription('Local IP address to negotiate')
pppHostRemoteIP = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 10, 2, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppHostRemoteIP.setStatus('current')
if mibBuilder.loadTexts: pppHostRemoteIP.setDescription('Remote IP address to hand out to PPP peer')
pppRoutingEnable = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 11, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppRoutingEnable.setStatus('current')
if mibBuilder.loadTexts: pppRoutingEnable.setDescription('ON/OFF unit routes IP traffic from PPP/Wireless to Ethernet')
ethRoutingEnable = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 11, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethRoutingEnable.setStatus('current')
if mibBuilder.loadTexts: ethRoutingEnable.setDescription('ON/OFF unit routes IP traffic from Ethernet to PPP/Wireless')
ethRoutingNATEnable = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 11, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethRoutingNATEnable.setStatus('current')
if mibBuilder.loadTexts: ethRoutingNATEnable.setDescription('ON/OFF unit applies NAT on routed IP frames egressing the\n        unit on its PPP interface')
routingInterface = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 11, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: routingInterface.setStatus('current')
if mibBuilder.loadTexts: routingInterface.setDescription('When Ethernet routing is enabled (routing.1), this is the\n        Ethernet interface to which IP frames received on PPP are\n        routed')
eth2WanRoutingEnable = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 11, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth2WanRoutingEnable.setStatus('current')
if mibBuilder.loadTexts: eth2WanRoutingEnable.setDescription('Make ETH2 operate as a WAN port to route outbound traffic\n        arriving on ETH1.')
ipRestrictionTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 12, 1, 1), )
if mibBuilder.loadTexts: ipRestrictionTable.setStatus('current')
if mibBuilder.loadTexts: ipRestrictionTable.setDescription('Table of IP restrictions')
ipRestrictionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 12, 1, 1, 1), ).setIndexNames((0, "SITEBOSS-571-STD-MIB", "ipRestrictionIndex"))
if mibBuilder.loadTexts: ipRestrictionEntry.setStatus('current')
if mibBuilder.loadTexts: ipRestrictionEntry.setDescription('Entry for table of IP restrictions')
ipRestrictionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 12, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRestrictionIndex.setStatus('current')
if mibBuilder.loadTexts: ipRestrictionIndex.setDescription('Index for table of IP restrictions')
ipRestrictionEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 12, 1, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipRestrictionEnable.setStatus('current')
if mibBuilder.loadTexts: ipRestrictionEnable.setDescription('ON/OFF enable this IP restriction')
ipRestrictionMask = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 12, 1, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipRestrictionMask.setStatus('current')
if mibBuilder.loadTexts: ipRestrictionMask.setDescription('IP restriction mask')
rtsFileTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 13, 1), )
if mibBuilder.loadTexts: rtsFileTable.setStatus('current')
if mibBuilder.loadTexts: rtsFileTable.setDescription('Table of RTS files')
rtsFileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 13, 1, 1), ).setIndexNames((0, "SITEBOSS-571-STD-MIB", "rtsFileIndex"))
if mibBuilder.loadTexts: rtsFileEntry.setStatus('current')
if mibBuilder.loadTexts: rtsFileEntry.setDescription('Entry for table of RTS files')
rtsFileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 13, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtsFileIndex.setStatus('current')
if mibBuilder.loadTexts: rtsFileIndex.setDescription('Index for table of RTS files')
rtsFileMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 13, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtsFileMode.setStatus('current')
if mibBuilder.loadTexts: rtsFileMode.setDescription('RTS mode (OFF,LISTEN,PUSH) for FILEx')
rtsFileShowAnswer = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 13, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtsFileShowAnswer.setStatus('current')
if mibBuilder.loadTexts: rtsFileShowAnswer.setDescription('Show answer string upon RTS connect for FILEx')
rtsFileReqXON = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 13, 1, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtsFileReqXON.setStatus('current')
if mibBuilder.loadTexts: rtsFileReqXON.setDescription('ON/OFF require XON to start flow for FILEx')
rtsFileTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 13, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtsFileTimeout.setStatus('current')
if mibBuilder.loadTexts: rtsFileTimeout.setDescription('Idle connection close timer (0 means no timeout) for FILEx')
rtsFileEmptyClose = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 13, 1, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtsFileEmptyClose.setStatus('current')
if mibBuilder.loadTexts: rtsFileEmptyClose.setDescription('ON/OFF close the socket when FILEx is empty')
rtsFilePushHost = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 13, 1, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtsFilePushHost.setStatus('current')
if mibBuilder.loadTexts: rtsFilePushHost.setDescription('Host to which FILEx should be pushed via RTS')
rtsFilePushPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 13, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtsFilePushPort.setStatus('current')
if mibBuilder.loadTexts: rtsFilePushPort.setDescription('TCP port to which FILEx should be pushed via RTS')
rtsFilePushRetryTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 13, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtsFilePushRetryTimer.setStatus('current')
if mibBuilder.loadTexts: rtsFilePushRetryTimer.setDescription('Retry timer (seconds) for retrying failed RTS push connect\n        attempts')
rtsAlarmsMode = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 13, 2, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtsAlarmsMode.setStatus('current')
if mibBuilder.loadTexts: rtsAlarmsMode.setDescription('RTS mode (OFF,LISTEN,PUSH) for alarms file')
rtsAlarmsShowAnswer = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 13, 2, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtsAlarmsShowAnswer.setStatus('current')
if mibBuilder.loadTexts: rtsAlarmsShowAnswer.setDescription('Show answer string upon RTS connect for alarms file')
rtsAlarmsReqXON = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 13, 2, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtsAlarmsReqXON.setStatus('current')
if mibBuilder.loadTexts: rtsAlarmsReqXON.setDescription('ON/OFF require XON to start flow for alarms file')
rtsAlarmsTimeout = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 13, 2, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtsAlarmsTimeout.setStatus('current')
if mibBuilder.loadTexts: rtsAlarmsTimeout.setDescription('Idle connection close timer (0 means no timeout) for alarms\n        file')
rtsAlarmsEmptyClose = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 13, 2, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtsAlarmsEmptyClose.setStatus('current')
if mibBuilder.loadTexts: rtsAlarmsEmptyClose.setDescription('ON/OFF close the socket when this file is empty for alarms\n        file')
rtsAlarmsPushHost = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 13, 2, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtsAlarmsPushHost.setStatus('current')
if mibBuilder.loadTexts: rtsAlarmsPushHost.setDescription('Host to which alarms file should be pushed via RTS')
rtsAlarmsPushPort = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 13, 2, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtsAlarmsPushPort.setStatus('current')
if mibBuilder.loadTexts: rtsAlarmsPushPort.setDescription('TCP port to which alarms file should be pushed via RTS')
rtsAlarmsPushRetryTimer = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 13, 2, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtsAlarmsPushRetryTimer.setStatus('current')
if mibBuilder.loadTexts: rtsAlarmsPushRetryTimer.setDescription('Retry timer (seconds) for retrying failed RTS push connect\n        attempts')
trapIncludeDateTime = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 14, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapIncludeDateTime.setStatus('current')
if mibBuilder.loadTexts: trapIncludeDateTime.setDescription('ON/OFF include date and time in stock trap message')
trapIncludeSiteName = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 14, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapIncludeSiteName.setStatus('current')
if mibBuilder.loadTexts: trapIncludeSiteName.setDescription('ON/OFF include site name in stock trap message')
trapIncludeSensorID = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 14, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapIncludeSensorID.setStatus('current')
if mibBuilder.loadTexts: trapIncludeSensorID.setDescription('ON/OFF include sensor ID in stock trap message')
trapIncludeUDName = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 14, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapIncludeUDName.setStatus('current')
if mibBuilder.loadTexts: trapIncludeUDName.setDescription('ON/OFF include user defined name in stock trap message')
trapIncludeUDState = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 14, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapIncludeUDState.setStatus('current')
if mibBuilder.loadTexts: trapIncludeUDState.setDescription('ON/OFF include user defined state in stock trap message')
trapIncludeSourceAddress = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 14, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapIncludeSourceAddress.setStatus('current')
if mibBuilder.loadTexts: trapIncludeSourceAddress.setDescription('ON/OFF include source IP address in stock trap message')
trapAuthFailEnable = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 14, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapAuthFailEnable.setStatus('current')
if mibBuilder.loadTexts: trapAuthFailEnable.setDescription('ON/OFF enable trap sent upon SNMP authentication failure')
routeTestEnable = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 15, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: routeTestEnable.setStatus('current')
if mibBuilder.loadTexts: routeTestEnable.setDescription('ON/OFF enable route testing')
routeTestPeriod = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 15, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: routeTestPeriod.setStatus('current')
if mibBuilder.loadTexts: routeTestPeriod.setDescription('The period which a route is considered valid')
routeTestAddressTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 15, 3), )
if mibBuilder.loadTexts: routeTestAddressTable.setStatus('current')
if mibBuilder.loadTexts: routeTestAddressTable.setDescription('Table of route testing addresses')
routeTestAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 15, 3, 1), ).setIndexNames((0, "SITEBOSS-571-STD-MIB", "routeTestAddressIndex"))
if mibBuilder.loadTexts: routeTestAddressEntry.setStatus('current')
if mibBuilder.loadTexts: routeTestAddressEntry.setDescription('Entry for table of RTS files')
routeTestAddressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 15, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: routeTestAddressIndex.setStatus('current')
if mibBuilder.loadTexts: routeTestAddressIndex.setDescription('Index for table of RTS files')
routeTestAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 15, 3, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: routeTestAddress.setStatus('current')
if mibBuilder.loadTexts: routeTestAddress.setDescription('Address to ping to see if the route to it is valid')
wirelessMode = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 16, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessMode.setStatus('current')
if mibBuilder.loadTexts: wirelessMode.setDescription('Wireless mode (OFF,PERMANENT-EDGE)')
wirelessAPN = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 16, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessAPN.setStatus('current')
if mibBuilder.loadTexts: wirelessAPN.setDescription('Wireless access point name')
wirelessIdleTimeout = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 16, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessIdleTimeout.setStatus('current')
if mibBuilder.loadTexts: wirelessIdleTimeout.setDescription('Wireless idle timeout')
wirelessDRE = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 16, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessDRE.setStatus('current')
if mibBuilder.loadTexts: wirelessDRE.setDescription('Default route enable for wireless network interface.\n         When this is ON, the wireless link, if up, becomes\n         the default route, overriding the default route setting\n         (defaultRouter object).  When OFF, the default route\n         setting controls the default route and the wireless link\n         does not become the default route.')
wirelessPPPUsername = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 16, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessPPPUsername.setStatus('current')
if mibBuilder.loadTexts: wirelessPPPUsername.setDescription('Username for PPP-based wireless modem connections.')
wirelessFirewall = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 16, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessFirewall.setStatus('current')
if mibBuilder.loadTexts: wirelessFirewall.setDescription('Enable wireless modem firewall.')
wirelessKeepaliveThreshold = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 16, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessKeepaliveThreshold.setStatus('current')
if mibBuilder.loadTexts: wirelessKeepaliveThreshold.setDescription('Minutes of no RX activity before sending keep-alive.')
wirelessPPPDebug = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 16, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessPPPDebug.setStatus('current')
if mibBuilder.loadTexts: wirelessPPPDebug.setDescription('Enable wireless modem PPP debug.')
wirelessConnEnable = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 16, 20, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessConnEnable.setStatus('current')
if mibBuilder.loadTexts: wirelessConnEnable.setDescription('Enable wireless modem connectivity check.')
wirelessConnCheckInterval = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 16, 20, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessConnCheckInterval.setStatus('current')
if mibBuilder.loadTexts: wirelessConnCheckInterval.setDescription('Wireless connectivity check interval in minutes.')
wirelessConnFailThreshold = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 16, 20, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessConnFailThreshold.setStatus('current')
if mibBuilder.loadTexts: wirelessConnFailThreshold.setDescription('Wireless connectivity fail threshold.')
wirelessConnIP1 = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 16, 20, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessConnIP1.setStatus('current')
if mibBuilder.loadTexts: wirelessConnIP1.setDescription('Wireless connectivity check IP address 1.')
wirelessConnIP2 = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 16, 20, 11), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessConnIP2.setStatus('current')
if mibBuilder.loadTexts: wirelessConnIP2.setDescription('Wireless connectivity check IP address 2.')
emailServer = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 17, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailServer.setStatus('current')
if mibBuilder.loadTexts: emailServer.setDescription('SMTP server to which the unit sends email')
emailDomain = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 17, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailDomain.setStatus('current')
if mibBuilder.loadTexts: emailDomain.setDescription('Domain to use in recipient address')
emailAuthEnable = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 17, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailAuthEnable.setStatus('current')
if mibBuilder.loadTexts: emailAuthEnable.setDescription('ON/OFF enable SMTP authentication')
arpFilter = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 18, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: arpFilter.setStatus('current')
if mibBuilder.loadTexts: arpFilter.setDescription('ARP filter code')
webEnable = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 19, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: webEnable.setStatus('current')
if mibBuilder.loadTexts: webEnable.setDescription('ON/OFF for the web interface')
webPort = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 19, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: webPort.setStatus('current')
if mibBuilder.loadTexts: webPort.setDescription('TCP port on which web interface listens')
webTimeout = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 19, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: webTimeout.setStatus('current')
if mibBuilder.loadTexts: webTimeout.setDescription('Web interface session timeout (seconds)')
ipv6DefaultRouter = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 21, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6DefaultRouter.setStatus('current')
if mibBuilder.loadTexts: ipv6DefaultRouter.setDescription('The IPv6 default router in use.')
cpeTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 22, 1), )
if mibBuilder.loadTexts: cpeTable.setStatus('current')
if mibBuilder.loadTexts: cpeTable.setDescription('Table of CPEs')
cpeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 22, 1, 1), ).setIndexNames((0, "SITEBOSS-571-STD-MIB", "cpeIndex"))
if mibBuilder.loadTexts: cpeEntry.setStatus('current')
if mibBuilder.loadTexts: cpeEntry.setDescription('Entry for table of CPEs')
cpeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 22, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpeIndex.setStatus('current')
if mibBuilder.loadTexts: cpeIndex.setDescription('Index for table of CPEs')
cpeHost = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 22, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpeHost.setStatus('current')
if mibBuilder.loadTexts: cpeHost.setDescription('CPE host (IP address or DNS name)')
cpeName = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 22, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpeName.setStatus('current')
if mibBuilder.loadTexts: cpeName.setDescription('CPE name, informational only')
cpeDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 22, 1, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpeDescription.setStatus('current')
if mibBuilder.loadTexts: cpeDescription.setDescription('CPE description, informational only')
cpeKeepalive = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 22, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpeKeepalive.setStatus('current')
if mibBuilder.loadTexts: cpeKeepalive.setDescription('Number of seconds between each successful ping request.')
cpeThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 22, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpeThreshold.setStatus('current')
if mibBuilder.loadTexts: cpeThreshold.setDescription('Number of unsuccessful pings that triggers the CPE event.')
cpeEventReminderInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 22, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpeEventReminderInterval.setStatus('current')
if mibBuilder.loadTexts: cpeEventReminderInterval.setDescription('CPE event reminder interval (minutes).')
cpeKeepaliveTicks = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 22, 1, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpeKeepaliveTicks.setStatus('current')
if mibBuilder.loadTexts: cpeKeepaliveTicks.setDescription('CPE ping period in 16ths of a second (nonzero overrides keepalive).')
cpePingSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 22, 1, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpePingSize.setStatus('current')
if mibBuilder.loadTexts: cpePingSize.setDescription('Number of bytes in CPE ping payload')
cpeInfoReset = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 22, 1, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpeInfoReset.setStatus('current')
if mibBuilder.loadTexts: cpeInfoReset.setDescription('Set any number to reset CPE ping stats.')
cpeInfoNumReq = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 22, 1, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpeInfoNumReq.setStatus('current')
if mibBuilder.loadTexts: cpeInfoNumReq.setDescription('Total number of requests transmitted.')
cpeInfoNumGoodResp = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 22, 1, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpeInfoNumGoodResp.setStatus('current')
if mibBuilder.loadTexts: cpeInfoNumGoodResp.setDescription('Total number of non-corrupt responses.')
cpeInfoNumBadResp = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 22, 1, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpeInfoNumBadResp.setStatus('current')
if mibBuilder.loadTexts: cpeInfoNumBadResp.setDescription('Total number of corrupt responses.')
cpeInfoNumLostResp = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 22, 1, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpeInfoNumLostResp.setStatus('current')
if mibBuilder.loadTexts: cpeInfoNumLostResp.setDescription('Total number of requests with no response.')
cpeInfoPercentLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 22, 1, 1, 35), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpeInfoPercentLoss.setStatus('current')
if mibBuilder.loadTexts: cpeInfoPercentLoss.setDescription('Percent loss (missing responses / total requests).')
cpeInfoPercentBad = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 4, 22, 1, 1, 36), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpeInfoPercentBad.setStatus('current')
if mibBuilder.loadTexts: cpeInfoPercentBad.setDescription('Percent corrupt (corrupt responses / total requests).')
modemFormat = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 5, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemFormat.setStatus('current')
if mibBuilder.loadTexts: modemFormat.setDescription('Modem data format (8N1,7E1,7O1,7N1)')
modemInitString = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 5, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemInitString.setStatus('current')
if mibBuilder.loadTexts: modemInitString.setDescription('Init string for modem')
modemCallAttempts = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 5, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemCallAttempts.setStatus('current')
if mibBuilder.loadTexts: modemCallAttempts.setDescription('Max mumber of times the modem should try to call out until\n        successful connect')
modemCallDelay = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 5, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemCallDelay.setStatus('current')
if mibBuilder.loadTexts: modemCallDelay.setDescription('Minimum delay (seconds) between callouts')
modemCmdTimout = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 5, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemCmdTimout.setStatus('current')
if mibBuilder.loadTexts: modemCmdTimout.setDescription('Number of minutes after which an idle command session via\n        modem is terminated')
modemGoto = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 5, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemGoto.setStatus('current')
if mibBuilder.loadTexts: modemGoto.setDescription('When a user connects, where that user is routed (command\n        session, passthrough to port 1, passthrough to port 2, etc.)')
modemCLIDEnable = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 5, 8, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemCLIDEnable.setStatus('current')
if mibBuilder.loadTexts: modemCLIDEnable.setDescription('ON/OFF Calling Line Identification security')
modemCLIDNumberTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 14, 2, 5, 8, 2), )
if mibBuilder.loadTexts: modemCLIDNumberTable.setStatus('current')
if mibBuilder.loadTexts: modemCLIDNumberTable.setDescription('Table of authorized callers identified by phone number')
modemCLIDNumberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 14, 2, 5, 8, 2, 1), ).setIndexNames((0, "SITEBOSS-571-STD-MIB", "modemCLIDNumberIndex"))
if mibBuilder.loadTexts: modemCLIDNumberEntry.setStatus('current')
if mibBuilder.loadTexts: modemCLIDNumberEntry.setDescription('Entry for table of CLID numbers')
modemCLIDNumberIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 5, 8, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemCLIDNumberIndex.setStatus('current')
if mibBuilder.loadTexts: modemCLIDNumberIndex.setDescription('Index for table of CLID numbers')
modemCLIDNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 5, 8, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemCLIDNumber.setStatus('current')
if mibBuilder.loadTexts: modemCLIDNumber.setDescription('auhorized CLID number')
modemTAPInitString = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 5, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemTAPInitString.setStatus('current')
if mibBuilder.loadTexts: modemTAPInitString.setDescription('Init string to use for TAP (pager) connections')
modemTAP8N1 = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 5, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemTAP8N1.setStatus('current')
if mibBuilder.loadTexts: modemTAP8N1.setDescription('ON/OFF: use 8N1 data/parity/stop for TAP connections')
clock = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 8, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clock.setStatus('current')
if mibBuilder.loadTexts: clock.setDescription("Text string for date and time;\n        e.g. 'SUN 01/02/98 12:34:27'.  When setting\n        this object, only the date and time are\n        required; the unit will ignore a specified\n        day of week because it is calculated from\n        the date and time.  When this object is included\n        in a notification as a varbind, it represents\n        the time that the triggering event occurred.")
consoleDuplex = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 10, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: consoleDuplex.setStatus('current')
if mibBuilder.loadTexts: consoleDuplex.setDescription('ON/OFF characters echoed on telnet command session')
consoleTimeout = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 10, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: consoleTimeout.setStatus('current')
if mibBuilder.loadTexts: consoleTimeout.setDescription('Minutes of inactivity after which telnet command session is terminated')
consoleBaud = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 10, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: consoleBaud.setStatus('current')
if mibBuilder.loadTexts: consoleBaud.setDescription('Console baud rate')
consoleFormat = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 10, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: consoleFormat.setStatus('current')
if mibBuilder.loadTexts: consoleFormat.setDescription('Console data format (8N1,7E1,7O1,7N1,8O2)')
consoleHsk = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 10, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: consoleHsk.setStatus('current')
if mibBuilder.loadTexts: consoleHsk.setDescription('Console handshaking mode')
consoleConfirm = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 10, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: consoleConfirm.setStatus('current')
if mibBuilder.loadTexts: consoleConfirm.setDescription('ON/OFF Prompt to confirm certain actions')
scShowPasswordPrompt = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 11, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scShowPasswordPrompt.setStatus('current')
if mibBuilder.loadTexts: scShowPasswordPrompt.setDescription('ON/OFF show password prompt upon login')
scConsoleLoginRequired = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 11, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scConsoleLoginRequired.setStatus('current')
if mibBuilder.loadTexts: scConsoleLoginRequired.setDescription('ON/OFF login required upon connecting via console')
scModemLoginRequired = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 11, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scModemLoginRequired.setStatus('current')
if mibBuilder.loadTexts: scModemLoginRequired.setDescription('ON/OFF login required upon connecting via modem')
scTelnetLoginRequired = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 11, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scTelnetLoginRequired.setStatus('current')
if mibBuilder.loadTexts: scTelnetLoginRequired.setDescription('ON/OFF login required upon connecting via Telnet')
scTelnetPTLoginRequired = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 11, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scTelnetPTLoginRequired.setStatus('current')
if mibBuilder.loadTexts: scTelnetPTLoginRequired.setDescription('ON/OFF login required upon connecting via Telnet to pass-\n        through ports (TCP ports 210x)')
scRTSLoginRequired = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 11, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scRTSLoginRequired.setStatus('current')
if mibBuilder.loadTexts: scRTSLoginRequired.setDescription('ON/OFF login required upon connecting to RTS (TCP ports 220x)')
scAuthMode = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 11, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scAuthMode.setStatus('current')
if mibBuilder.loadTexts: scAuthMode.setDescription('Authentication mode (USERNAME/PW,PW/USERNAME,PASSWORD ONLY)')
scRightsGroup = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 11, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scRightsGroup.setStatus('current')
if mibBuilder.loadTexts: scRightsGroup.setDescription('The set of aliases used for the 8 available rights levels')
secUserTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 14, 2, 11, 2), )
if mibBuilder.loadTexts: secUserTable.setStatus('current')
if mibBuilder.loadTexts: secUserTable.setDescription('Table of users')
secUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 14, 2, 11, 2, 1), ).setIndexNames((0, "SITEBOSS-571-STD-MIB", "secUserIndex"))
if mibBuilder.loadTexts: secUserEntry.setStatus('current')
if mibBuilder.loadTexts: secUserEntry.setDescription('Entry for table of users')
secUserIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 11, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: secUserIndex.setStatus('current')
if mibBuilder.loadTexts: secUserIndex.setDescription('Index for table of users')
secUserEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 11, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: secUserEnable.setStatus('current')
if mibBuilder.loadTexts: secUserEnable.setDescription('ON/OFF enable user')
secUserConnectVia = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 11, 2, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: secUserConnectVia.setStatus('current')
if mibBuilder.loadTexts: secUserConnectVia.setDescription('Methods by which user is allowed to connect:\n        L=local (console)\n        T=Telnet\n        M=modem\n        F=FTP\n        R=RTS\n        S=SSH\n        ')
secUserLoginTo = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 11, 2, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: secUserLoginTo.setStatus('current')
if mibBuilder.loadTexts: secUserLoginTo.setDescription('The function presented to the user upon login (COMMAND,\n        PASSTHROUGH,MENU)')
secUserAccessFile = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 11, 2, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: secUserAccessFile.setStatus('current')
if mibBuilder.loadTexts: secUserAccessFile.setDescription('The default access file associated with the user')
secUserPTEscapeTo = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 11, 2, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: secUserPTEscapeTo.setStatus('current')
if mibBuilder.loadTexts: secUserPTEscapeTo.setDescription('The function presented to the user upon escaping pass-\n        through: currently only MENU')
secUserPPPType = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 11, 2, 1, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: secUserPPPType.setStatus('current')
if mibBuilder.loadTexts: secUserPPPType.setDescription('The kind of PPP access allowed to this user cannot connect\n        via PPP (NONE), can connect but only to the unit (LOCAL), or\n        can connect and route to Ethernet (ROUTING)')
secUserRights = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 11, 2, 1, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: secUserRights.setStatus('current')
if mibBuilder.loadTexts: secUserRights.setDescription('The rights level granted to this user')
secUserEventsReadAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 11, 2, 1, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: secUserEventsReadAccess.setStatus('current')
if mibBuilder.loadTexts: secUserEventsReadAccess.setDescription('DENY/ALLOW user to read the events/alarms file')
secUserAuditReadAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 11, 2, 1, 14), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: secUserAuditReadAccess.setStatus('current')
if mibBuilder.loadTexts: secUserAuditReadAccess.setDescription('DENY/ALLOW user to read the audit log')
secUserEventsWriteAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 11, 2, 1, 16), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: secUserEventsWriteAccess.setStatus('current')
if mibBuilder.loadTexts: secUserEventsWriteAccess.setDescription('DENY/ALLOW user to delete the events file')
secUserAuditWriteAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 11, 2, 1, 17), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: secUserAuditWriteAccess.setStatus('current')
if mibBuilder.loadTexts: secUserAuditWriteAccess.setDescription('DENY/ALLOW user to write to the audit log')
secUserExpiration = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 11, 2, 1, 18), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: secUserExpiration.setStatus('current')
if mibBuilder.loadTexts: secUserExpiration.setDescription('Expiration date/time of this user')
secUserCallbackNumber1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 11, 2, 1, 19), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: secUserCallbackNumber1.setStatus('current')
if mibBuilder.loadTexts: secUserCallbackNumber1.setDescription('Number slot 1 the unit calls for dialback')
secUserCallbackNumber2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 11, 2, 1, 20), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: secUserCallbackNumber2.setStatus('current')
if mibBuilder.loadTexts: secUserCallbackNumber2.setDescription('Number slot 2 the unit calls for dialback')
secUserCallbackNumber3 = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 11, 2, 1, 21), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: secUserCallbackNumber3.setStatus('current')
if mibBuilder.loadTexts: secUserCallbackNumber3.setDescription('Number slot 3 the unit calls for dialback')
secUserChallengeTelnetMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 11, 2, 1, 22), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: secUserChallengeTelnetMode.setStatus('current')
if mibBuilder.loadTexts: secUserChallengeTelnetMode.setDescription('Telnet challenge mode: when user logs in via telnet, unit\n        allows access (OFF), presents a challenge (CHALLENGE), or\n        unit sends a one-time-password (SEND PASSWORD) to a\n        destination configured by secUserChallengeTelnetSendTo')
secUserChallengeModemMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 11, 2, 1, 23), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: secUserChallengeModemMode.setStatus('current')
if mibBuilder.loadTexts: secUserChallengeModemMode.setDescription('Modem challenge mode: when user logs in via modem, unit\n        allows access (OFF), presents a challenge (CHALLENGE), sends\n        a one-time-password (SEND PASSWORD) to a destination\n        configured by secUserChallengeTelnetSendTo, or dials a\n        number (CALLBACK) configured with secUserCallbackNumberx')
secUserChallengeConsoleMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 11, 2, 1, 24), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: secUserChallengeConsoleMode.setStatus('current')
if mibBuilder.loadTexts: secUserChallengeConsoleMode.setDescription('Console challenge mode: when user logs in via console, unit\n        allows access (OFF), or presents a challenge (CHALLENGE)')
secUserChallengeTelnetSendTo = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 11, 2, 1, 25), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: secUserChallengeTelnetSendTo.setStatus('current')
if mibBuilder.loadTexts: secUserChallengeTelnetSendTo.setDescription('Email action used as the destination address for one-time-\n        password when a user logs in with a challenge mode of\n        SEND PASSWORD')
secUserChallengeModemSendTo = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 11, 2, 1, 26), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: secUserChallengeModemSendTo.setStatus('current')
if mibBuilder.loadTexts: secUserChallengeModemSendTo.setDescription('Modem action used as the destination phone number for one-\n        time-password when a user logs in with a challenge mode of\n        SEND PASSWORD')
secUserChallengeExpiration = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 11, 2, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 180))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: secUserChallengeExpiration.setStatus('current')
if mibBuilder.loadTexts: secUserChallengeExpiration.setDescription('Time (in minutes) after which a one-time-password is sent\n        that it can be used to log in')
sfEnable = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 11, 3, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfEnable.setStatus('current')
if mibBuilder.loadTexts: sfEnable.setDescription('ON/OFF enable factory access')
sfSecret = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 11, 3, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfSecret.setStatus('current')
if mibBuilder.loadTexts: sfSecret.setDescription('Secret used for factory access')
evClassNameTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 1, 1), )
if mibBuilder.loadTexts: evClassNameTable.setStatus('current')
if mibBuilder.loadTexts: evClassNameTable.setDescription('Table of classes')
evClassNameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 1, 1, 1), ).setIndexNames((0, "SITEBOSS-571-STD-MIB", "evClassNameIndex"))
if mibBuilder.loadTexts: evClassNameEntry.setStatus('current')
if mibBuilder.loadTexts: evClassNameEntry.setDescription('Entry for table of classes')
evClassNameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: evClassNameIndex.setStatus('current')
if mibBuilder.loadTexts: evClassNameIndex.setDescription('Index for table of classes')
evClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 1, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evClassName.setStatus('current')
if mibBuilder.loadTexts: evClassName.setDescription('Class name for this slot')
evReminderInterval = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evReminderInterval.setStatus('current')
if mibBuilder.loadTexts: evReminderInterval.setDescription('Interval (minutes) between EventSensor reminder events')
evLogEnable = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 1, 3, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evLogEnable.setStatus('current')
if mibBuilder.loadTexts: evLogEnable.setDescription('ON/OFF enable event log')
evLogStoreAlarm = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 1, 3, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evLogStoreAlarm.setStatus('current')
if mibBuilder.loadTexts: evLogStoreAlarm.setDescription('ON/OFF store data alarms in event log')
evLogMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 1, 3, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evLogMaxSize.setStatus('current')
if mibBuilder.loadTexts: evLogMaxSize.setDescription('max size (in KB) of event log')
evLogStoreSensor = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 1, 3, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evLogStoreSensor.setStatus('current')
if mibBuilder.loadTexts: evLogStoreSensor.setDescription('ON/OFF store EventSensor events in event log')
evLogTimeStampAlarms = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 1, 3, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evLogTimeStampAlarms.setStatus('current')
if mibBuilder.loadTexts: evLogTimeStampAlarms.setDescription('ON/OFF put timestamps on event log entries')
evLogPrependName = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 1, 3, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evLogPrependName.setStatus('current')
if mibBuilder.loadTexts: evLogPrependName.setDescription('ON/OFF prepend data event name to data alarm records in event\n        log')
evMgmtReprocess = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 1, 4, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evMgmtReprocess.setStatus('current')
if mibBuilder.loadTexts: evMgmtReprocess.setDescription("Number of sensors that have generated events since reset.\n        Write this to reprocess each sensor's last generated event\n        since reset.  The value to write determines what kind of\n        events should be reprocessed:\n                'all': all sensor events\n                 'cc': cc events\n        'temperature': temperature events\n           'humidity': humidity events\n             'analog': analog input events")
evdExitOnTrue = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 2, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evdExitOnTrue.setStatus('current')
if mibBuilder.loadTexts: evdExitOnTrue.setDescription('ON/OFF: Data alarm evaluator stops checking record against\n        alarm equations when it finds an equation that matches')
evdFilterAction = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evdFilterAction.setStatus('current')
if mibBuilder.loadTexts: evdFilterAction.setDescription('What happens to a record that matches an equation:\n        REJECT/ACCEPT')
evdWildCardChar = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evdWildCardChar.setStatus('current')
if mibBuilder.loadTexts: evdWildCardChar.setDescription('Character (in decimal ASCII code format) used to indicate\n        wildcards in data alarm equation')
evdTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 2, 2), )
if mibBuilder.loadTexts: evdTable.setStatus('current')
if mibBuilder.loadTexts: evdTable.setDescription('Table of data events')
evdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 2, 2, 1), ).setIndexNames((0, "SITEBOSS-571-STD-MIB", "evdIndex"))
if mibBuilder.loadTexts: evdEntry.setStatus('current')
if mibBuilder.loadTexts: evdEntry.setDescription('Entry for table of data events')
evdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: evdIndex.setStatus('current')
if mibBuilder.loadTexts: evdIndex.setDescription('Index for table of data events')
evdEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 2, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evdEnable.setStatus('current')
if mibBuilder.loadTexts: evdEnable.setDescription('ON/OFF enable this data event')
evdName = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 2, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evdName.setStatus('current')
if mibBuilder.loadTexts: evdName.setDescription('Name for this data event')
evdEquation = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 2, 2, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evdEquation.setStatus('current')
if mibBuilder.loadTexts: evdEquation.setDescription('Equation for this data event')
evdThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 2, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evdThreshold.setStatus('current')
if mibBuilder.loadTexts: evdThreshold.setDescription('Number of equation matches that must happen to trigger this\n        data event')
evdAutoClear = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 2, 2, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evdAutoClear.setStatus('current')
if mibBuilder.loadTexts: evdAutoClear.setDescription('ON/OFF this data alarm is automatically cleared (re-armed)\n        upon reaching the threshold number of matches')
evdClearInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 2, 2, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evdClearInterval.setStatus('current')
if mibBuilder.loadTexts: evdClearInterval.setDescription('Interval at which this alarm is automatically cleared (no\n        bearing with evdAutoClear)')
evdClearTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 2, 2, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evdClearTime.setStatus('current')
if mibBuilder.loadTexts: evdClearTime.setDescription('Tie of day (HH:MM) at which this data alarm is cleared (no\n        bearing with evdAutoClear)')
evdActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 2, 2, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evdActions.setStatus('current')
if mibBuilder.loadTexts: evdActions.setDescription('Actions for this data event')
evdClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 2, 2, 1, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evdClass.setStatus('current')
if mibBuilder.loadTexts: evdClass.setDescription('Class for this data event')
evdTrapNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 2, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evdTrapNum.setStatus('current')
if mibBuilder.loadTexts: evdTrapNum.setDescription('Trap number for this event')
evdMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 2, 2, 1, 12), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evdMode.setStatus('current')
if mibBuilder.loadTexts: evdMode.setDescription('ALARM/FILTER: what is happens when this data event\n        triggers: either generate actions (mode=ALARM) )or\n        ACCEPT/REJECT (via evdFilterAction) the record\n        (mode=FILTER)')
evdFieldTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 2, 3), )
if mibBuilder.loadTexts: evdFieldTable.setStatus('current')
if mibBuilder.loadTexts: evdFieldTable.setDescription('Table of data event fields')
evdFieldEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 2, 3, 1), ).setIndexNames((0, "SITEBOSS-571-STD-MIB", "evdFieldIndex"))
if mibBuilder.loadTexts: evdFieldEntry.setStatus('current')
if mibBuilder.loadTexts: evdFieldEntry.setDescription('Entry for table of data event fields')
evdFieldIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: evdFieldIndex.setStatus('current')
if mibBuilder.loadTexts: evdFieldIndex.setDescription('Index for table of data event fields')
evdFieldStart = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 2, 3, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evdFieldStart.setStatus('current')
if mibBuilder.loadTexts: evdFieldStart.setDescription('Start position (1-based) for this data event field')
evdFieldLength = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 2, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evdFieldLength.setStatus('current')
if mibBuilder.loadTexts: evdFieldLength.setDescription('Number of characters this data event field occupies')
evdFieldName = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 2, 3, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evdFieldName.setStatus('current')
if mibBuilder.loadTexts: evdFieldName.setDescription('Start position (1-based) for this data event field')
evdFieldLine = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 2, 3, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evdFieldLine.setStatus('current')
if mibBuilder.loadTexts: evdFieldLine.setDescription('Line number (1-based, for multiline records) for this data\n        event field')
evdFieldType = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 2, 3, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evdFieldType.setStatus('current')
if mibBuilder.loadTexts: evdFieldType.setDescription('Alpha/Numeric type for this data event field')
evdMacroTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 2, 4), )
if mibBuilder.loadTexts: evdMacroTable.setStatus('current')
if mibBuilder.loadTexts: evdMacroTable.setDescription('Table of data event macros')
evdMacroEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 2, 4, 1), ).setIndexNames((0, "SITEBOSS-571-STD-MIB", "evdMacroIndex"))
if mibBuilder.loadTexts: evdMacroEntry.setStatus('current')
if mibBuilder.loadTexts: evdMacroEntry.setDescription('Entry for table of data event macros')
evdMacroIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: evdMacroIndex.setStatus('current')
if mibBuilder.loadTexts: evdMacroIndex.setDescription('Index for table of data event macros')
evdMacroName = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 2, 4, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evdMacroName.setStatus('current')
if mibBuilder.loadTexts: evdMacroName.setDescription('Name of this macro for use in data event equations')
evdMacroEquation = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 2, 4, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evdMacroEquation.setStatus('current')
if mibBuilder.loadTexts: evdMacroEquation.setDescription('Equation for this data event macro')
evNoData1Enable = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 3, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evNoData1Enable.setStatus('current')
if mibBuilder.loadTexts: evNoData1Enable.setDescription('ON/OFF enable this no data event')
evNoData1Actions = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 3, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evNoData1Actions.setStatus('current')
if mibBuilder.loadTexts: evNoData1Actions.setDescription('Actions for this no data event')
evNoData1Message = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 3, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evNoData1Message.setStatus('current')
if mibBuilder.loadTexts: evNoData1Message.setDescription('Message for this no data event')
evNoData1TrapNum = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 3, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evNoData1TrapNum.setStatus('current')
if mibBuilder.loadTexts: evNoData1TrapNum.setDescription('Trap number for this no data event')
evNoData1Class = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 3, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evNoData1Class.setStatus('current')
if mibBuilder.loadTexts: evNoData1Class.setDescription('Class for this no data event')
evNoData1Sched1Begin = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 3, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evNoData1Sched1Begin.setStatus('current')
if mibBuilder.loadTexts: evNoData1Sched1Begin.setDescription('Schedule 1 begin time (HH:MM) for this no data event')
evNoData1Sched1End = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 3, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evNoData1Sched1End.setStatus('current')
if mibBuilder.loadTexts: evNoData1Sched1End.setDescription('Schedule 1 end time (HH:MM) for this no data event')
evNoData1Sched1Duration = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 3, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evNoData1Sched1Duration.setStatus('current')
if mibBuilder.loadTexts: evNoData1Sched1Duration.setDescription('Duration (minutes) for schedule 1 of this no data event')
evNoData1Sched2Begin = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 3, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evNoData1Sched2Begin.setStatus('current')
if mibBuilder.loadTexts: evNoData1Sched2Begin.setDescription('Schedule 2 begin time (HH:MM) for this no data event')
evNoData1Sched2End = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 3, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evNoData1Sched2End.setStatus('current')
if mibBuilder.loadTexts: evNoData1Sched2End.setDescription('Schedule 2 end time (HH:MM) for this no data event')
evNoData1Sched2Duration = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 3, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evNoData1Sched2Duration.setStatus('current')
if mibBuilder.loadTexts: evNoData1Sched2Duration.setDescription('Duration (minutes) for schedule 2 of this no data event')
evNoData1PortEnableTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 3, 12), )
if mibBuilder.loadTexts: evNoData1PortEnableTable.setStatus('current')
if mibBuilder.loadTexts: evNoData1PortEnableTable.setDescription('Table of no data event 1 port enables')
evNoData1PortEnableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 3, 12, 1), ).setIndexNames((0, "SITEBOSS-571-STD-MIB", "evNoData1PortEnableIndex"))
if mibBuilder.loadTexts: evNoData1PortEnableEntry.setStatus('current')
if mibBuilder.loadTexts: evNoData1PortEnableEntry.setDescription('Entry for table of no data event 1 port enables')
evNoData1PortEnableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 3, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: evNoData1PortEnableIndex.setStatus('current')
if mibBuilder.loadTexts: evNoData1PortEnableIndex.setDescription('Index for table of no data event 1 port enables')
evNoData1PortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 3, 12, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evNoData1PortEnable.setStatus('current')
if mibBuilder.loadTexts: evNoData1PortEnable.setDescription('ON/OFF: no data event 1 observes this port')
evNoData1Exclusions = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 3, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evNoData1Exclusions.setStatus('current')
if mibBuilder.loadTexts: evNoData1Exclusions.setDescription('Exclusions (space-separated MM/DD-formatted dates) for this\n        no data event')
evNoData1Days = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 3, 14), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evNoData1Days.setStatus('current')
if mibBuilder.loadTexts: evNoData1Days.setDescription('Days of the week on which this no event is active')
evNoData2Enable = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 4, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evNoData2Enable.setStatus('current')
if mibBuilder.loadTexts: evNoData2Enable.setDescription('ON/OFF enable this no data event')
evNoData2Actions = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 4, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evNoData2Actions.setStatus('current')
if mibBuilder.loadTexts: evNoData2Actions.setDescription('Actions for this no data event')
evNoData2Message = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 4, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evNoData2Message.setStatus('current')
if mibBuilder.loadTexts: evNoData2Message.setDescription('Message for this no data event')
evNoData2TrapNum = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 4, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(505, 1199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evNoData2TrapNum.setStatus('current')
if mibBuilder.loadTexts: evNoData2TrapNum.setDescription('Trap number for this no data event')
evNoData2Class = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 4, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evNoData2Class.setStatus('current')
if mibBuilder.loadTexts: evNoData2Class.setDescription('Class for this no data event')
evNoData2Sched1Begin = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 4, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evNoData2Sched1Begin.setStatus('current')
if mibBuilder.loadTexts: evNoData2Sched1Begin.setDescription('Schedule 1 begin time (HH:MM) for this no data event')
evNoData2Sched1End = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 4, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evNoData2Sched1End.setStatus('current')
if mibBuilder.loadTexts: evNoData2Sched1End.setDescription('Schedule 1 end time (HH:MM) for this no data event')
evNoData2Sched1Duration = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 4, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evNoData2Sched1Duration.setStatus('current')
if mibBuilder.loadTexts: evNoData2Sched1Duration.setDescription('Duration (minutes) for schedule 1 of this no data event')
evNoData2Sched2Begin = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 4, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evNoData2Sched2Begin.setStatus('current')
if mibBuilder.loadTexts: evNoData2Sched2Begin.setDescription('Schedule 2 begin time (HH:MM) for this no data event')
evNoData2Sched2End = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 4, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evNoData2Sched2End.setStatus('current')
if mibBuilder.loadTexts: evNoData2Sched2End.setDescription('Schedule 2 end time (HH:MM) for this no data event')
evNoData2Sched2Duration = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 4, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evNoData2Sched2Duration.setStatus('current')
if mibBuilder.loadTexts: evNoData2Sched2Duration.setDescription('Duration (minutes) for schedule 2 of this no data event')
evNoData2PortEnableTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 4, 12), )
if mibBuilder.loadTexts: evNoData2PortEnableTable.setStatus('current')
if mibBuilder.loadTexts: evNoData2PortEnableTable.setDescription('Table of no data event 2 port enables')
evNoData2PortEnableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 4, 12, 1), ).setIndexNames((0, "SITEBOSS-571-STD-MIB", "evNoData2PortEnableIndex"))
if mibBuilder.loadTexts: evNoData2PortEnableEntry.setStatus('current')
if mibBuilder.loadTexts: evNoData2PortEnableEntry.setDescription('Entry for table of no data event 2 port enables')
evNoData2PortEnableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 4, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: evNoData2PortEnableIndex.setStatus('current')
if mibBuilder.loadTexts: evNoData2PortEnableIndex.setDescription('Index for table of no data event 2 port enables')
evNoData2PortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 4, 12, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evNoData2PortEnable.setStatus('current')
if mibBuilder.loadTexts: evNoData2PortEnable.setDescription('ON/OFF: no data event 2 observes this port')
evNoData2Exclusions = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 4, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evNoData2Exclusions.setStatus('current')
if mibBuilder.loadTexts: evNoData2Exclusions.setDescription('Exclusions (space-separated MM/DD-formatted dates) for this\n        no data event')
evNoData2Days = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 4, 14), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evNoData2Days.setStatus('current')
if mibBuilder.loadTexts: evNoData2Days.setDescription('Days of the week on which this no event is active')
evSched1Enable = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 5, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evSched1Enable.setStatus('current')
if mibBuilder.loadTexts: evSched1Enable.setDescription('ON/OFF enable this scheduled event')
evSched1Actions = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 5, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evSched1Actions.setStatus('current')
if mibBuilder.loadTexts: evSched1Actions.setDescription('Actions for this scheduled event')
evSched1Message = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 5, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evSched1Message.setStatus('current')
if mibBuilder.loadTexts: evSched1Message.setDescription('Message for this scheduled event')
evSched1TrapNum = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 5, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evSched1TrapNum.setStatus('current')
if mibBuilder.loadTexts: evSched1TrapNum.setDescription('Trap number for this scheduled event')
evSched1Class = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 5, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evSched1Class.setStatus('current')
if mibBuilder.loadTexts: evSched1Class.setDescription('Class for this scheduled event')
evSched1Sunday = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 5, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evSched1Sunday.setStatus('current')
if mibBuilder.loadTexts: evSched1Sunday.setDescription('Time on Sunday (HH:MM) when this scheduled event triggers')
evSched1Monday = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 5, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evSched1Monday.setStatus('current')
if mibBuilder.loadTexts: evSched1Monday.setDescription('Time on Monday (HH:MM) when this scheduled event triggers')
evSched1Tuesday = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 5, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evSched1Tuesday.setStatus('current')
if mibBuilder.loadTexts: evSched1Tuesday.setDescription('Time on Tuesday (HH:MM) when this scheduled event triggers')
evSched1Wednesday = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 5, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evSched1Wednesday.setStatus('current')
if mibBuilder.loadTexts: evSched1Wednesday.setDescription('Time on Wednesday (HH:MM) when this scheduled event triggers')
evSched1Thursday = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 5, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evSched1Thursday.setStatus('current')
if mibBuilder.loadTexts: evSched1Thursday.setDescription('Time on Thursday (HH:MM) when this scheduled event triggers')
evSched1Friday = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 5, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evSched1Friday.setStatus('current')
if mibBuilder.loadTexts: evSched1Friday.setDescription('Time on Friday (HH:MM) when this scheduled event triggers')
evSched1Saturday = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 5, 12), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evSched1Saturday.setStatus('current')
if mibBuilder.loadTexts: evSched1Saturday.setDescription('Time on Saturday (HH:MM) when this scheduled event triggers')
evSched1Exclusions = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 5, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evSched1Exclusions.setStatus('current')
if mibBuilder.loadTexts: evSched1Exclusions.setDescription('Exclusions (space-separated MM/DD-formatted dates) for this\n        scheduled event')
evSched2Enable = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 6, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evSched2Enable.setStatus('current')
if mibBuilder.loadTexts: evSched2Enable.setDescription('ON/OFF enable this scheduled event')
evSched2Actions = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 6, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evSched2Actions.setStatus('current')
if mibBuilder.loadTexts: evSched2Actions.setDescription('Actions for this scheduled event')
evSched2Message = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 6, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evSched2Message.setStatus('current')
if mibBuilder.loadTexts: evSched2Message.setDescription('Message for this scheduled event')
evSched2TrapNum = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 6, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evSched2TrapNum.setStatus('current')
if mibBuilder.loadTexts: evSched2TrapNum.setDescription('Trap number for this scheduled event')
evSched2Class = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 6, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evSched2Class.setStatus('current')
if mibBuilder.loadTexts: evSched2Class.setDescription('Class for this scheduled event')
evSched2Sunday = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 6, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evSched2Sunday.setStatus('current')
if mibBuilder.loadTexts: evSched2Sunday.setDescription('Time on Sunday (HH:MM) when this scheduled event triggers')
evSched2Monday = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 6, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evSched2Monday.setStatus('current')
if mibBuilder.loadTexts: evSched2Monday.setDescription('Time on Monday (HH:MM) when this scheduled event triggers')
evSched2Tuesday = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 6, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evSched2Tuesday.setStatus('current')
if mibBuilder.loadTexts: evSched2Tuesday.setDescription('Time on Tuesday (HH:MM) when this scheduled event triggers')
evSched2Wednesday = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 6, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evSched2Wednesday.setStatus('current')
if mibBuilder.loadTexts: evSched2Wednesday.setDescription('Time on Wednesday (HH:MM) when this scheduled event triggers')
evSched2Thursday = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 6, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evSched2Thursday.setStatus('current')
if mibBuilder.loadTexts: evSched2Thursday.setDescription('Time on Thursday (HH:MM) when this scheduled event triggers')
evSched2Friday = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 6, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evSched2Friday.setStatus('current')
if mibBuilder.loadTexts: evSched2Friday.setDescription('Time on Friday (HH:MM) when this scheduled event triggers')
evSched2Saturday = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 6, 12), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evSched2Saturday.setStatus('current')
if mibBuilder.loadTexts: evSched2Saturday.setDescription('Time on Saturday (HH:MM) when this scheduled event triggers')
evSched2Exclusions = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 6, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evSched2Exclusions.setStatus('current')
if mibBuilder.loadTexts: evSched2Exclusions.setDescription('Exclusions (space-separated MM/DD-formatted dates) for this\n        scheduled event')
evShskLowTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 7), )
if mibBuilder.loadTexts: evShskLowTable.setStatus('current')
if mibBuilder.loadTexts: evShskLowTable.setDescription('Table of serial handshaking low events')
evShskLowEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 7, 1), ).setIndexNames((0, "SITEBOSS-571-STD-MIB", "evShskLowIndex"))
if mibBuilder.loadTexts: evShskLowEntry.setStatus('current')
if mibBuilder.loadTexts: evShskLowEntry.setDescription('Entry for table of serial handshaking low events')
evShskLowIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: evShskLowIndex.setStatus('current')
if mibBuilder.loadTexts: evShskLowIndex.setDescription('Index for table of serial handshaking low events')
evShskLowEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 7, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evShskLowEnable.setStatus('current')
if mibBuilder.loadTexts: evShskLowEnable.setDescription('ON/OFF: enable the serial handshaking low event for this port')
evShskLowActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 7, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evShskLowActions.setStatus('current')
if mibBuilder.loadTexts: evShskLowActions.setDescription('Actions for the serial handshaking low event for this port')
evShskLowMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 7, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evShskLowMessage.setStatus('current')
if mibBuilder.loadTexts: evShskLowMessage.setDescription('Message for the serial handshaking low event for this port')
evShskLowClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 7, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evShskLowClass.setStatus('current')
if mibBuilder.loadTexts: evShskLowClass.setDescription('Class for the serial handshaking low event for this port')
evShskLowTrapNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 7, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evShskLowTrapNum.setStatus('current')
if mibBuilder.loadTexts: evShskLowTrapNum.setDescription('Trap number for the serial handshaking low event for this port')
evShskHighTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 8), )
if mibBuilder.loadTexts: evShskHighTable.setStatus('current')
if mibBuilder.loadTexts: evShskHighTable.setDescription('Table of serial handshaking high events')
evShskHighEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 8, 1), ).setIndexNames((0, "SITEBOSS-571-STD-MIB", "evShskHighIndex"))
if mibBuilder.loadTexts: evShskHighEntry.setStatus('current')
if mibBuilder.loadTexts: evShskHighEntry.setDescription('Entry for table of serial handshaking high events')
evShskHighIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: evShskHighIndex.setStatus('current')
if mibBuilder.loadTexts: evShskHighIndex.setDescription('Index for table of serial handshaking high events')
evShskHighEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 8, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evShskHighEnable.setStatus('current')
if mibBuilder.loadTexts: evShskHighEnable.setDescription('ON/OFF: enable the serial handshaking high event for this\n        port')
evShskHighActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 8, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evShskHighActions.setStatus('current')
if mibBuilder.loadTexts: evShskHighActions.setDescription('Actions for the serial handshaking high event for this port')
evShskHighMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 8, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evShskHighMessage.setStatus('current')
if mibBuilder.loadTexts: evShskHighMessage.setDescription('Message for the serial handshaking high event for this port')
evShskHighClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 8, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evShskHighClass.setStatus('current')
if mibBuilder.loadTexts: evShskHighClass.setDescription('Class for the serial handshaking high event for this port')
evShskHighTrapNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 8, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evShskHighTrapNum.setStatus('current')
if mibBuilder.loadTexts: evShskHighTrapNum.setDescription('Trap number for the serial handshaking high event for this\n        port')
evNoSensorTimeout = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 9, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evNoSensorTimeout.setStatus('current')
if mibBuilder.loadTexts: evNoSensorTimeout.setDescription('Timeout (seconds) after which an EventSensor becomes\n        unresponsive that this event is triggered')
evNoSensorActions = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 9, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evNoSensorActions.setStatus('current')
if mibBuilder.loadTexts: evNoSensorActions.setDescription('Actions for no sensor event')
evNoSensorTrapNum = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 9, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evNoSensorTrapNum.setStatus('current')
if mibBuilder.loadTexts: evNoSensorTrapNum.setDescription('Trap number for no sensor event')
evNoSensorClass = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 9, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evNoSensorClass.setStatus('current')
if mibBuilder.loadTexts: evNoSensorClass.setDescription('Class for no sensor event')
fuelSensorGeneralTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 11, 1), )
if mibBuilder.loadTexts: fuelSensorGeneralTable.setStatus('current')
if mibBuilder.loadTexts: fuelSensorGeneralTable.setDescription('This table organizes general fuel sensor attributes.')
fsGenEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 11, 1, 1), ).setIndexNames((0, "SITEBOSS-571-STD-MIB", "fsGenIndex"))
if mibBuilder.loadTexts: fsGenEntry.setStatus('current')
if mibBuilder.loadTexts: fsGenEntry.setDescription('Entry for fuel sensor general config table.')
fsGenIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 11, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsGenIndex.setStatus('current')
if mibBuilder.loadTexts: fsGenIndex.setDescription('Which fuel sensor in the fuel sensor general config table.')
fsGenName = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 11, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsGenName.setStatus('current')
if mibBuilder.loadTexts: fsGenName.setDescription('Fuel sensor name.')
fsGenSensorType = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 11, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsGenSensorType.setStatus('current')
if mibBuilder.loadTexts: fsGenSensorType.setDescription('Type of fuel sensor in use; NONE disables the fuel sensor.')
fsGenDistanceUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 11, 1, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsGenDistanceUnit.setStatus('current')
if mibBuilder.loadTexts: fsGenDistanceUnit.setDescription('Distance units in use when setting and indicating tank dimensions.')
fsGenRawValueTop = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 11, 1, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsGenRawValueTop.setStatus('current')
if mibBuilder.loadTexts: fsGenRawValueTop.setDescription('Analog input reading corresponding to the SENSOR FULL point.')
fsGenTopOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 11, 1, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsGenTopOffset.setStatus('current')
if mibBuilder.loadTexts: fsGenTopOffset.setDescription('Distance, in the specified distance unit, between the SENSOR FULL\n        point and the TANK FULL point.  The value is positive if the\n        SENSOR FULL point is above the TANK FULL point, and negative if it is\n        below.')
fsGenRawValueBottom = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 11, 1, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsGenRawValueBottom.setStatus('current')
if mibBuilder.loadTexts: fsGenRawValueBottom.setDescription('Analog input reading corresponding to the minimum fluid height\n        measurable by the fuel sensor.')
fsGenBottomOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 11, 1, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsGenBottomOffset.setStatus('current')
if mibBuilder.loadTexts: fsGenBottomOffset.setDescription('Distance, in the specified distance unit, between the SENSOR EMPTY\n        point and the TANK EMPTY point.  The value is positive if the\n        SENSOR EMPTY point is above the TANK EMPTY point, and negative if it\n        is below.')
fsGenInputES = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 11, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsGenInputES.setStatus('current')
if mibBuilder.loadTexts: fsGenInputES.setDescription('Which eventsensor contains the analog input associated with this fuel\n        sensor. Allowed values are 200 (for internal ES), or 1-16.')
fsGenInputPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 11, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsGenInputPoint.setStatus('current')
if mibBuilder.loadTexts: fsGenInputPoint.setDescription('Which analog input point, on the specified eventsensor, that is\n        associated with the fuel sensor.')
fsGenFilterAveraging = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 11, 1, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsGenFilterAveraging.setStatus('current')
if mibBuilder.loadTexts: fsGenFilterAveraging.setDescription('Fuel sensor filter averaging factor.')
fsGenSysrepEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 11, 1, 1, 12), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsGenSysrepEnable.setStatus('current')
if mibBuilder.loadTexts: fsGenSysrepEnable.setDescription('Fuel sensor System Reporting enable.')
fsGenSysrepThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 11, 1, 1, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsGenSysrepThreshold.setStatus('current')
if mibBuilder.loadTexts: fsGenSysrepThreshold.setDescription('Fuel sensor System Reporting threshold (floating point value).')
fsGenSysrepLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 11, 1, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsGenSysrepLimit.setStatus('current')
if mibBuilder.loadTexts: fsGenSysrepLimit.setDescription('Fuel sensor System Reporting limit.')
fsGenSysrepPackage = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 11, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsGenSysrepPackage.setStatus('current')
if mibBuilder.loadTexts: fsGenSysrepPackage.setDescription('Fuel sensor System Reporting package number.')
fsGenSysrepType = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 11, 1, 1, 16), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsGenSysrepType.setStatus('current')
if mibBuilder.loadTexts: fsGenSysrepType.setDescription('Fuel sensor ASM profile type.')
fsGenEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 11, 1, 1, 17), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsGenEnable.setStatus('current')
if mibBuilder.loadTexts: fsGenEnable.setDescription('Fuel sensor enable.')
fuelSensorTankTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 11, 2), )
if mibBuilder.loadTexts: fuelSensorTankTable.setStatus('current')
if mibBuilder.loadTexts: fuelSensorTankTable.setDescription('This table organizes tank-specific fuel sensor attributes.')
fsTankEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 11, 2, 1), ).setIndexNames((0, "SITEBOSS-571-STD-MIB", "fsTankIndex"))
if mibBuilder.loadTexts: fsTankEntry.setStatus('current')
if mibBuilder.loadTexts: fsTankEntry.setDescription('Entry for fuel sensor tank config table.')
fsTankIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 11, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsTankIndex.setStatus('current')
if mibBuilder.loadTexts: fsTankIndex.setDescription('Which fuel sensor in the fuel sensor tank config table.')
fsTankHeight = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 11, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsTankHeight.setStatus('current')
if mibBuilder.loadTexts: fsTankHeight.setDescription('Height of the tank, from the TANK EMPTY point to the TANK FULL point,\n        in the specified distance unit (i.e. TANK HEIGHT).  This is a\n        floating point value.')
fsTankDimA = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 11, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsTankDimA.setStatus('current')
if mibBuilder.loadTexts: fsTankDimA.setDescription('Tank dimension measurement A for certain tank profiles. For\n        HORIZ OVAL, this is the length of the straight section.  This is a\n        floating point value.')
fsTankDimB = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 11, 2, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsTankDimB.setStatus('current')
if mibBuilder.loadTexts: fsTankDimB.setDescription('Tank dimension measurement B for certain tank profiles. For\n        HORIZ OVAL, this is the radius of the curved section.  This is a\n        floating point value.')
fsTankVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 11, 2, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsTankVolume.setStatus('current')
if mibBuilder.loadTexts: fsTankVolume.setDescription('How many volume units the tank contains, when full.  This is a\n        floating point value.')
fsTankVolumeUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 11, 2, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsTankVolumeUnit.setStatus('current')
if mibBuilder.loadTexts: fsTankVolumeUnit.setDescription('Name of the unit representing fluid volume in the tank. This is only\n        used for display purposes; it does not affect the volume calculation.')
fsTankShape = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 11, 2, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsTankShape.setStatus('current')
if mibBuilder.loadTexts: fsTankShape.setDescription('The shape of the fuel tank.  A value of LINEAR produces a fluid\n        volume reading that is directly proportional to fluid height.  The\n        HORIZ CYL and HORIZ OVAL settings use a hard-coded formula to\n        calculate the volume.  The CUSTOM setting uses a strapping table that\n        must be configured as well (see fuelSensorCustomTankTable).')
fuelSensorCustomTankTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 11, 3), )
if mibBuilder.loadTexts: fuelSensorCustomTankTable.setStatus('current')
if mibBuilder.loadTexts: fuelSensorCustomTankTable.setDescription('This table organizes the custom tank strapping table.  Each fuel\n        sensor has a table of height/volume pairs in service only when the tank\n        shape (fsTankShape) in CUSTOM.  This allows the unit to calculate\n        volumes for nonstandard tank shapes, to the degree that accurate\n        height/volume measurements can be configured.  This SNMP table has two\n        indexes: the first for which fuel sensor and the second for which\n        height/volume pair.')
fsCustomTankEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 11, 3, 1), ).setIndexNames((0, "SITEBOSS-571-STD-MIB", "fsCustomTankIndexFS"), (0, "SITEBOSS-571-STD-MIB", "fsCustomTankIndexDatum"))
if mibBuilder.loadTexts: fsCustomTankEntry.setStatus('current')
if mibBuilder.loadTexts: fsCustomTankEntry.setDescription('Entry for fuel sensor custom tank config table.')
fsCustomTankIndexFS = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 11, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsCustomTankIndexFS.setStatus('current')
if mibBuilder.loadTexts: fsCustomTankIndexFS.setDescription('Which fuel sensor in the fuel sensor tank config table.  This is the\n        first of two indexes for this SNMP table.')
fsCustomTankIndexDatum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 11, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsCustomTankIndexDatum.setStatus('current')
if mibBuilder.loadTexts: fsCustomTankIndexDatum.setDescription('Which hight/volume pair: there are 32 pairs per fuel sensor.  This is\n        the second of two indexes for this SNMP table.')
fsCustomTankHeight = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 11, 3, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsCustomTankHeight.setStatus('current')
if mibBuilder.loadTexts: fsCustomTankHeight.setDescription('Height of custom tank height/volume pair.  This is a floating point\n        value.')
fsCustomTankVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 11, 3, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsCustomTankVolume.setStatus('current')
if mibBuilder.loadTexts: fsCustomTankVolume.setDescription('Volume of custom tank height/volume pair.  This is a floating point\n        value.')
fuelSensorVolumeTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 11, 4), )
if mibBuilder.loadTexts: fuelSensorVolumeTable.setStatus('current')
if mibBuilder.loadTexts: fuelSensorVolumeTable.setDescription('This table organizes volume-event-specific fuel sensor attributes.')
fsVolumeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 11, 4, 1), ).setIndexNames((0, "SITEBOSS-571-STD-MIB", "fsVolumeIndex"))
if mibBuilder.loadTexts: fsVolumeEntry.setStatus('current')
if mibBuilder.loadTexts: fsVolumeEntry.setDescription('Entry for fuel sensor volume event config table.')
fsVolumeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 11, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsVolumeIndex.setStatus('current')
if mibBuilder.loadTexts: fsVolumeIndex.setDescription('Which fuel sensor in the fuel sensor volume event config table.')
fsVolumeEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 11, 4, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsVolumeEnable.setStatus('current')
if mibBuilder.loadTexts: fsVolumeEnable.setDescription('Enable fuel sensor volume events.')
fsVolumeDeadband = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 11, 4, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsVolumeDeadband.setStatus('current')
if mibBuilder.loadTexts: fsVolumeDeadband.setDescription('Fuel sensor deadband (hysteresis).  This is a floating point value.')
fsVolumeVHighValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 11, 4, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsVolumeVHighValue.setStatus('current')
if mibBuilder.loadTexts: fsVolumeVHighValue.setDescription('Fuel sensor volume very high event threshold value.  This is a\n        floating point value.')
fsVolumeVHighActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 11, 4, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsVolumeVHighActions.setStatus('current')
if mibBuilder.loadTexts: fsVolumeVHighActions.setDescription('Fuel sensor volume very high event threshold actions.')
fsVolumeVHighTrapNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 11, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(519, 1199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsVolumeVHighTrapNum.setStatus('current')
if mibBuilder.loadTexts: fsVolumeVHighTrapNum.setDescription('Fuel sensor volume very high event threshold trap number.')
fsVolumeVHighClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 11, 4, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsVolumeVHighClass.setStatus('current')
if mibBuilder.loadTexts: fsVolumeVHighClass.setDescription('Fuel sensor volume very high event threshold class (severity).')
fsVolumeHighValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 11, 4, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsVolumeHighValue.setStatus('current')
if mibBuilder.loadTexts: fsVolumeHighValue.setDescription('Fuel sensor volume high event threshold value.  This is a floating\n        point value.')
fsVolumeHighActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 11, 4, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsVolumeHighActions.setStatus('current')
if mibBuilder.loadTexts: fsVolumeHighActions.setDescription('Fuel sensor volume high event threshold actions.')
fsVolumeHighTrapNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 11, 4, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(519, 1199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsVolumeHighTrapNum.setStatus('current')
if mibBuilder.loadTexts: fsVolumeHighTrapNum.setDescription('Fuel sensor volume high event threshold trap number.')
fsVolumeHighClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 11, 4, 1, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsVolumeHighClass.setStatus('current')
if mibBuilder.loadTexts: fsVolumeHighClass.setDescription('Fuel sensor volume high event threshold class (severity).')
fsVolumeNormalActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 11, 4, 1, 12), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsVolumeNormalActions.setStatus('current')
if mibBuilder.loadTexts: fsVolumeNormalActions.setDescription('Fuel sensor volume return to normal actions.')
fsVolumeNormalTrapNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 11, 4, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(519, 1199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsVolumeNormalTrapNum.setStatus('current')
if mibBuilder.loadTexts: fsVolumeNormalTrapNum.setDescription('Fuel sensor volume return to normal trap number.')
fsVolumeNormalClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 11, 4, 1, 14), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsVolumeNormalClass.setStatus('current')
if mibBuilder.loadTexts: fsVolumeNormalClass.setDescription('Fuel sensor volume return to normal class (severity).')
fsVolumeLowValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 11, 4, 1, 15), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsVolumeLowValue.setStatus('current')
if mibBuilder.loadTexts: fsVolumeLowValue.setDescription('Fuel sensor volume low event threshold value.  This is a floating\n        point value.')
fsVolumeLowActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 11, 4, 1, 16), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsVolumeLowActions.setStatus('current')
if mibBuilder.loadTexts: fsVolumeLowActions.setDescription('Fuel sensor volume low event threshold actions.')
fsVolumeLowTrapNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 11, 4, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(519, 1199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsVolumeLowTrapNum.setStatus('current')
if mibBuilder.loadTexts: fsVolumeLowTrapNum.setDescription('Fuel sensor volume low event threshold trap number.')
fsVolumeLowClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 11, 4, 1, 18), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsVolumeLowClass.setStatus('current')
if mibBuilder.loadTexts: fsVolumeLowClass.setDescription('Fuel sensor volume low event threshold class (severity).')
fsVolumeVLowValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 11, 4, 1, 19), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsVolumeVLowValue.setStatus('current')
if mibBuilder.loadTexts: fsVolumeVLowValue.setDescription('Fuel sensor volume very low event threshold value.  This is a\n        floating point value.')
fsVolumeVLowActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 11, 4, 1, 20), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsVolumeVLowActions.setStatus('current')
if mibBuilder.loadTexts: fsVolumeVLowActions.setDescription('Fuel sensor volume very low event threshold actions.')
fsVolumeVLowTrapNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 11, 4, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(519, 1199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsVolumeVLowTrapNum.setStatus('current')
if mibBuilder.loadTexts: fsVolumeVLowTrapNum.setDescription('Fuel sensor volume very low event threshold trap number.')
fsVolumeVLowClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 11, 4, 1, 22), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsVolumeVLowClass.setStatus('current')
if mibBuilder.loadTexts: fsVolumeVLowClass.setDescription('Fuel sensor volume very low event threshold class (severity).')
fuelSensorDisconnectTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 11, 5), )
if mibBuilder.loadTexts: fuelSensorDisconnectTable.setStatus('current')
if mibBuilder.loadTexts: fuelSensorDisconnectTable.setDescription('This table organizes disconnect-event-specific fuel sensor attributes.')
fsDiscEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 11, 5, 1), ).setIndexNames((0, "SITEBOSS-571-STD-MIB", "fsDiscIndex"))
if mibBuilder.loadTexts: fsDiscEntry.setStatus('current')
if mibBuilder.loadTexts: fsDiscEntry.setDescription('Entry for fuel sensor disconnect event config table.')
fsDiscIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 11, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsDiscIndex.setStatus('current')
if mibBuilder.loadTexts: fsDiscIndex.setDescription('Which fuel sensor in the fuel sensor disconnect event config table.')
fsDiscEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 11, 5, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsDiscEnable.setStatus('current')
if mibBuilder.loadTexts: fsDiscEnable.setDescription('Fuel sensor disconnect event enable.')
fsDiscHighValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 11, 5, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsDiscHighValue.setStatus('current')
if mibBuilder.loadTexts: fsDiscHighValue.setDescription('High end of input value range when fuel sensor is disconnected.  This\n        is in the units of the analog input value.')
fsDiscLowValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 11, 5, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsDiscLowValue.setStatus('current')
if mibBuilder.loadTexts: fsDiscLowValue.setDescription('Low end of input value range when fuel sensor is disconnected.  This\n        is in the units of the analog input value.')
fsDiscActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 11, 5, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsDiscActions.setStatus('current')
if mibBuilder.loadTexts: fsDiscActions.setDescription('Fuel sensor disconnect event actions.')
fsDiscTrapNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 11, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(515, 1199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsDiscTrapNum.setStatus('current')
if mibBuilder.loadTexts: fsDiscTrapNum.setDescription('Fuel sensor disconnect event trap number.')
fsDiscClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 11, 5, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsDiscClass.setStatus('current')
if mibBuilder.loadTexts: fsDiscClass.setDescription('Fuel sensor disconnect event class (severity).')
fsDiscNormalActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 11, 5, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsDiscNormalActions.setStatus('current')
if mibBuilder.loadTexts: fsDiscNormalActions.setDescription('Fuel sensor disconnect return to normal actions.')
fsDiscNormalTrapNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 11, 5, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(515, 1199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsDiscNormalTrapNum.setStatus('current')
if mibBuilder.loadTexts: fsDiscNormalTrapNum.setDescription('Fuel sensor disconnect return to normal trap number.')
fsDiscNormalClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 11, 5, 1, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsDiscNormalClass.setStatus('current')
if mibBuilder.loadTexts: fsDiscNormalClass.setDescription('Fuel sensor disconnect return to normal class (severity).')
acpmGeneralTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 1), )
if mibBuilder.loadTexts: acpmGeneralTable.setStatus('current')
if mibBuilder.loadTexts: acpmGeneralTable.setDescription('This table organizes general AC power monitor attributes.')
acpmGenEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 1, 1), ).setIndexNames((0, "SITEBOSS-571-STD-MIB", "acpmGenIndex"))
if mibBuilder.loadTexts: acpmGenEntry.setStatus('current')
if mibBuilder.loadTexts: acpmGenEntry.setDescription('Entry for AC power monitor general config table.')
acpmGenIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmGenIndex.setStatus('current')
if mibBuilder.loadTexts: acpmGenIndex.setDescription('Which AC power monitor in the AC power monitor general config table.')
acpmGenDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmGenDevice.setStatus('current')
if mibBuilder.loadTexts: acpmGenDevice.setDescription('Model of the AC power monitor device. The unit needs this setting to\n        know which registers to poll for the various data items, among other\n        things.')
acpmGenName = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmGenName.setStatus('current')
if mibBuilder.loadTexts: acpmGenName.setDescription('Name for the AC power monitor device.')
acpmGenAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 247))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmGenAddress.setStatus('current')
if mibBuilder.loadTexts: acpmGenAddress.setDescription('Modbus address of the AC power monitor device.')
acpmGenPtRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmGenPtRatio.setStatus('current')
if mibBuilder.loadTexts: acpmGenPtRatio.setDescription('Ratio of secondary turns to primary turns on potential transformers\n        (PT).')
acpmGenCtRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmGenCtRatio.setStatus('current')
if mibBuilder.loadTexts: acpmGenCtRatio.setDescription('Ratio of secondary turns to primary turns on current transformers\n        (CT).')
acpmGenPowerType = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 1, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmGenPowerType.setStatus('current')
if mibBuilder.loadTexts: acpmGenPowerType.setDescription('Type of power being monitored.')
acpmGenSysrepPackage = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmGenSysrepPackage.setStatus('current')
if mibBuilder.loadTexts: acpmGenSysrepPackage.setDescription('System reporting package number.')
acpmGenSysrepType = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 1, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmGenSysrepType.setStatus('current')
if mibBuilder.loadTexts: acpmGenSysrepType.setDescription('ASM profile type.')
acpmGenEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 1, 1, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmGenEnable.setStatus('current')
if mibBuilder.loadTexts: acpmGenEnable.setDescription('AC power monitor enable.')
acpmAvgVoltageTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 2), )
if mibBuilder.loadTexts: acpmAvgVoltageTable.setStatus('current')
if mibBuilder.loadTexts: acpmAvgVoltageTable.setDescription('This table organizes AC power monitor average voltage attributes.')
acpmAvgVoltageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 2, 1), ).setIndexNames((0, "SITEBOSS-571-STD-MIB", "acpmAvgVoltageIndex"))
if mibBuilder.loadTexts: acpmAvgVoltageEntry.setStatus('current')
if mibBuilder.loadTexts: acpmAvgVoltageEntry.setDescription('Entry for AC power monitor average voltage config table.')
acpmAvgVoltageIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmAvgVoltageIndex.setStatus('current')
if mibBuilder.loadTexts: acpmAvgVoltageIndex.setDescription('Which AC power monitor in the AC power monitor average voltage config\n        table.')
acpmAvgVoltageEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmAvgVoltageEnable.setStatus('current')
if mibBuilder.loadTexts: acpmAvgVoltageEnable.setDescription('Enable AC power monitor average voltage events.')
acpmAvgVoltageDeadband = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmAvgVoltageDeadband.setStatus('current')
if mibBuilder.loadTexts: acpmAvgVoltageDeadband.setDescription('Deadband (hysteresis) for average voltage event.  This is a floating\n        point value.')
acpmAvgVoltageVHighValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 2, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmAvgVoltageVHighValue.setStatus('current')
if mibBuilder.loadTexts: acpmAvgVoltageVHighValue.setDescription('Very high event threshold.  This is a floating point value.')
acpmAvgVoltageVHighActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 2, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmAvgVoltageVHighActions.setStatus('current')
if mibBuilder.loadTexts: acpmAvgVoltageVHighActions.setDescription('Very high event actions.')
acpmAvgVoltageVHighTrapNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(520, 1199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmAvgVoltageVHighTrapNum.setStatus('current')
if mibBuilder.loadTexts: acpmAvgVoltageVHighTrapNum.setDescription('Very high event trap number.')
acpmAvgVoltageVHighClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 2, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmAvgVoltageVHighClass.setStatus('current')
if mibBuilder.loadTexts: acpmAvgVoltageVHighClass.setDescription('Very high event class.')
acpmAvgVoltageHighValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 2, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmAvgVoltageHighValue.setStatus('current')
if mibBuilder.loadTexts: acpmAvgVoltageHighValue.setDescription('High event threshold.  This is a floating point value.')
acpmAvgVoltageHighActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 2, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmAvgVoltageHighActions.setStatus('current')
if mibBuilder.loadTexts: acpmAvgVoltageHighActions.setDescription('High event actions.')
acpmAvgVoltageHighTrapNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(520, 1199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmAvgVoltageHighTrapNum.setStatus('current')
if mibBuilder.loadTexts: acpmAvgVoltageHighTrapNum.setDescription('High event trap number.')
acpmAvgVoltageHighClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 2, 1, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmAvgVoltageHighClass.setStatus('current')
if mibBuilder.loadTexts: acpmAvgVoltageHighClass.setDescription('High event class.')
acpmAvgVoltageNormalActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 2, 1, 12), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmAvgVoltageNormalActions.setStatus('current')
if mibBuilder.loadTexts: acpmAvgVoltageNormalActions.setDescription('Return to normal actions.')
acpmAvgVoltageNormalTrapNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(520, 1199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmAvgVoltageNormalTrapNum.setStatus('current')
if mibBuilder.loadTexts: acpmAvgVoltageNormalTrapNum.setDescription('Return to normal trap number.')
acpmAvgVoltageNormalClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 2, 1, 14), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmAvgVoltageNormalClass.setStatus('current')
if mibBuilder.loadTexts: acpmAvgVoltageNormalClass.setDescription('Return to normal class.')
acpmAvgVoltageLowValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 2, 1, 15), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmAvgVoltageLowValue.setStatus('current')
if mibBuilder.loadTexts: acpmAvgVoltageLowValue.setDescription('Low event threshold.  This is a floating point value.')
acpmAvgVoltageLowActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 2, 1, 16), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmAvgVoltageLowActions.setStatus('current')
if mibBuilder.loadTexts: acpmAvgVoltageLowActions.setDescription('Low event actions.')
acpmAvgVoltageLowTrapNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(520, 1199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmAvgVoltageLowTrapNum.setStatus('current')
if mibBuilder.loadTexts: acpmAvgVoltageLowTrapNum.setDescription('Low event trap number.')
acpmAvgVoltageLowClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 2, 1, 18), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmAvgVoltageLowClass.setStatus('current')
if mibBuilder.loadTexts: acpmAvgVoltageLowClass.setDescription('Low event class.')
acpmAvgVoltageVLowValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 2, 1, 19), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmAvgVoltageVLowValue.setStatus('current')
if mibBuilder.loadTexts: acpmAvgVoltageVLowValue.setDescription('Very low event threshold.  This is a floating point value.')
acpmAvgVoltageVLowActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 2, 1, 20), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmAvgVoltageVLowActions.setStatus('current')
if mibBuilder.loadTexts: acpmAvgVoltageVLowActions.setDescription('Very low event actions.')
acpmAvgVoltageVLowTrapNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 2, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(520, 1199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmAvgVoltageVLowTrapNum.setStatus('current')
if mibBuilder.loadTexts: acpmAvgVoltageVLowTrapNum.setDescription('Very low event trap number.')
acpmAvgVoltageVLowClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 2, 1, 22), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmAvgVoltageVLowClass.setStatus('current')
if mibBuilder.loadTexts: acpmAvgVoltageVLowClass.setDescription('Very low event class.')
acpmAvgVoltageSysrepEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 2, 1, 23), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmAvgVoltageSysrepEnable.setStatus('current')
if mibBuilder.loadTexts: acpmAvgVoltageSysrepEnable.setDescription('System reporting enable for average voltage telemetry.')
acpmAvgVoltageSysrepThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 2, 1, 24), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmAvgVoltageSysrepThreshold.setStatus('current')
if mibBuilder.loadTexts: acpmAvgVoltageSysrepThreshold.setDescription('System reporting threshold for average voltage telemetry.  This is\n        a floating point value.')
acpmAvgVoltageSysrepLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 2, 1, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmAvgVoltageSysrepLimit.setStatus('current')
if mibBuilder.loadTexts: acpmAvgVoltageSysrepLimit.setDescription('System reporting limit for average voltage telemetry.')
acpmAvgCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 3), )
if mibBuilder.loadTexts: acpmAvgCurrentTable.setStatus('current')
if mibBuilder.loadTexts: acpmAvgCurrentTable.setDescription('This table organizes AC power monitor average current attributes.')
acpmAvgCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 3, 1), ).setIndexNames((0, "SITEBOSS-571-STD-MIB", "acpmAvgCurrentIndex"))
if mibBuilder.loadTexts: acpmAvgCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: acpmAvgCurrentEntry.setDescription('Entry for AC power monitor average current config table.')
acpmAvgCurrentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmAvgCurrentIndex.setStatus('current')
if mibBuilder.loadTexts: acpmAvgCurrentIndex.setDescription('Which AC power monitor in the AC power monitor average current\n        config table.')
acpmAvgCurrentEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 3, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmAvgCurrentEnable.setStatus('current')
if mibBuilder.loadTexts: acpmAvgCurrentEnable.setDescription('Enable AC power monitor average current events.')
acpmAvgCurrentDeadband = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 3, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmAvgCurrentDeadband.setStatus('current')
if mibBuilder.loadTexts: acpmAvgCurrentDeadband.setDescription('Deadband (hysteresis) for average current event.  This is a floating\n        point value.')
acpmAvgCurrentVHighValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 3, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmAvgCurrentVHighValue.setStatus('current')
if mibBuilder.loadTexts: acpmAvgCurrentVHighValue.setDescription('Very high event threshold.  This is a floating point value.')
acpmAvgCurrentVHighActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 3, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmAvgCurrentVHighActions.setStatus('current')
if mibBuilder.loadTexts: acpmAvgCurrentVHighActions.setDescription('Very high event actions.')
acpmAvgCurrentVHighTrapNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(521, 1199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmAvgCurrentVHighTrapNum.setStatus('current')
if mibBuilder.loadTexts: acpmAvgCurrentVHighTrapNum.setDescription('Very high event trap number.')
acpmAvgCurrentVHighClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 3, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmAvgCurrentVHighClass.setStatus('current')
if mibBuilder.loadTexts: acpmAvgCurrentVHighClass.setDescription('Very high event class.')
acpmAvgCurrentHighValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 3, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmAvgCurrentHighValue.setStatus('current')
if mibBuilder.loadTexts: acpmAvgCurrentHighValue.setDescription('High event threshold.  This is a floating point value.')
acpmAvgCurrentHighActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 3, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmAvgCurrentHighActions.setStatus('current')
if mibBuilder.loadTexts: acpmAvgCurrentHighActions.setDescription('High event actions.')
acpmAvgCurrentHighTrapNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(521, 1199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmAvgCurrentHighTrapNum.setStatus('current')
if mibBuilder.loadTexts: acpmAvgCurrentHighTrapNum.setDescription('High event trap number.')
acpmAvgCurrentHighClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 3, 1, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmAvgCurrentHighClass.setStatus('current')
if mibBuilder.loadTexts: acpmAvgCurrentHighClass.setDescription('High event class.')
acpmAvgCurrentNormalActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 3, 1, 12), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmAvgCurrentNormalActions.setStatus('current')
if mibBuilder.loadTexts: acpmAvgCurrentNormalActions.setDescription('Return to normal actions.')
acpmAvgCurrentNormalTrapNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(521, 1199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmAvgCurrentNormalTrapNum.setStatus('current')
if mibBuilder.loadTexts: acpmAvgCurrentNormalTrapNum.setDescription('Return to normal trap number.')
acpmAvgCurrentNormalClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 3, 1, 14), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmAvgCurrentNormalClass.setStatus('current')
if mibBuilder.loadTexts: acpmAvgCurrentNormalClass.setDescription('Return to normal class.')
acpmAvgCurrentLowValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 3, 1, 15), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmAvgCurrentLowValue.setStatus('current')
if mibBuilder.loadTexts: acpmAvgCurrentLowValue.setDescription('Low event threshold.  This is a floating point value.')
acpmAvgCurrentLowActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 3, 1, 16), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmAvgCurrentLowActions.setStatus('current')
if mibBuilder.loadTexts: acpmAvgCurrentLowActions.setDescription('Low event actions.')
acpmAvgCurrentLowTrapNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 3, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(521, 1199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmAvgCurrentLowTrapNum.setStatus('current')
if mibBuilder.loadTexts: acpmAvgCurrentLowTrapNum.setDescription('Low event trap number.')
acpmAvgCurrentLowClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 3, 1, 18), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmAvgCurrentLowClass.setStatus('current')
if mibBuilder.loadTexts: acpmAvgCurrentLowClass.setDescription('Low event class.')
acpmAvgCurrentVLowValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 3, 1, 19), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmAvgCurrentVLowValue.setStatus('current')
if mibBuilder.loadTexts: acpmAvgCurrentVLowValue.setDescription('Very low event threshold.  This is a floating point value.')
acpmAvgCurrentVLowActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 3, 1, 20), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmAvgCurrentVLowActions.setStatus('current')
if mibBuilder.loadTexts: acpmAvgCurrentVLowActions.setDescription('Very low event actions.')
acpmAvgCurrentVLowTrapNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 3, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(521, 1199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmAvgCurrentVLowTrapNum.setStatus('current')
if mibBuilder.loadTexts: acpmAvgCurrentVLowTrapNum.setDescription('Very low event trap number.')
acpmAvgCurrentVLowClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 3, 1, 22), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmAvgCurrentVLowClass.setStatus('current')
if mibBuilder.loadTexts: acpmAvgCurrentVLowClass.setDescription('Very low event class.')
acpmAvgCurrentSysrepEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 3, 1, 23), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmAvgCurrentSysrepEnable.setStatus('current')
if mibBuilder.loadTexts: acpmAvgCurrentSysrepEnable.setDescription('System reporting enable for average current telemetry.')
acpmAvgCurrentSysrepThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 3, 1, 24), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmAvgCurrentSysrepThreshold.setStatus('current')
if mibBuilder.loadTexts: acpmAvgCurrentSysrepThreshold.setDescription('System reporting threshold for average current telemetry.  This is a\n        floating point value.')
acpmAvgCurrentSysrepLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 3, 1, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmAvgCurrentSysrepLimit.setStatus('current')
if mibBuilder.loadTexts: acpmAvgCurrentSysrepLimit.setDescription('System reporting limit for average current telemetry.')
acpmFreqTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 4), )
if mibBuilder.loadTexts: acpmFreqTable.setStatus('current')
if mibBuilder.loadTexts: acpmFreqTable.setDescription('This table organizes AC power monitor frequency attributes.')
acpmFreqEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 4, 1), ).setIndexNames((0, "SITEBOSS-571-STD-MIB", "acpmFreqIndex"))
if mibBuilder.loadTexts: acpmFreqEntry.setStatus('current')
if mibBuilder.loadTexts: acpmFreqEntry.setDescription('Entry for AC power monitor frequency config table.')
acpmFreqIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmFreqIndex.setStatus('current')
if mibBuilder.loadTexts: acpmFreqIndex.setDescription('Which AC power monitor in the AC power monitor frequency config\n        table.')
acpmFreqEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 4, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmFreqEnable.setStatus('current')
if mibBuilder.loadTexts: acpmFreqEnable.setDescription('Enable AC power monitor frequency events.')
acpmFreqDeadband = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 4, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmFreqDeadband.setStatus('current')
if mibBuilder.loadTexts: acpmFreqDeadband.setDescription('Deadband (hysteresis) for frequency event.  This is a floating\n        point value.')
acpmFreqVHighValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 4, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmFreqVHighValue.setStatus('current')
if mibBuilder.loadTexts: acpmFreqVHighValue.setDescription('Very high event threshold.  This is a floating point value.')
acpmFreqVHighActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 4, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmFreqVHighActions.setStatus('current')
if mibBuilder.loadTexts: acpmFreqVHighActions.setDescription('Very high event actions.')
acpmFreqVHighTrapNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(522, 1199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmFreqVHighTrapNum.setStatus('current')
if mibBuilder.loadTexts: acpmFreqVHighTrapNum.setDescription('Very high event trap number.')
acpmFreqVHighClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 4, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmFreqVHighClass.setStatus('current')
if mibBuilder.loadTexts: acpmFreqVHighClass.setDescription('Very high event class.')
acpmFreqHighValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 4, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmFreqHighValue.setStatus('current')
if mibBuilder.loadTexts: acpmFreqHighValue.setDescription('High event threshold.  This is a floating point value.')
acpmFreqHighActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 4, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmFreqHighActions.setStatus('current')
if mibBuilder.loadTexts: acpmFreqHighActions.setDescription('High event actions.')
acpmFreqHighTrapNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 4, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(522, 1199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmFreqHighTrapNum.setStatus('current')
if mibBuilder.loadTexts: acpmFreqHighTrapNum.setDescription('High event trap number.')
acpmFreqHighClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 4, 1, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmFreqHighClass.setStatus('current')
if mibBuilder.loadTexts: acpmFreqHighClass.setDescription('High event class.')
acpmFreqNormalActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 4, 1, 12), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmFreqNormalActions.setStatus('current')
if mibBuilder.loadTexts: acpmFreqNormalActions.setDescription('Return to normal actions.')
acpmFreqNormalTrapNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 4, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(522, 1199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmFreqNormalTrapNum.setStatus('current')
if mibBuilder.loadTexts: acpmFreqNormalTrapNum.setDescription('Return to normal trap number.')
acpmFreqNormalClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 4, 1, 14), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmFreqNormalClass.setStatus('current')
if mibBuilder.loadTexts: acpmFreqNormalClass.setDescription('Return to normal class.')
acpmFreqLowValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 4, 1, 15), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmFreqLowValue.setStatus('current')
if mibBuilder.loadTexts: acpmFreqLowValue.setDescription('Low event threshold.  This is a floating point value.')
acpmFreqLowActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 4, 1, 16), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmFreqLowActions.setStatus('current')
if mibBuilder.loadTexts: acpmFreqLowActions.setDescription('Low event actions.')
acpmFreqLowTrapNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 4, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(522, 1199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmFreqLowTrapNum.setStatus('current')
if mibBuilder.loadTexts: acpmFreqLowTrapNum.setDescription('Low event trap number.')
acpmFreqLowClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 4, 1, 18), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmFreqLowClass.setStatus('current')
if mibBuilder.loadTexts: acpmFreqLowClass.setDescription('Low event class.')
acpmFreqVLowValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 4, 1, 19), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmFreqVLowValue.setStatus('current')
if mibBuilder.loadTexts: acpmFreqVLowValue.setDescription('Very low event threshold.  This is a floating point value.')
acpmFreqVLowActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 4, 1, 20), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmFreqVLowActions.setStatus('current')
if mibBuilder.loadTexts: acpmFreqVLowActions.setDescription('Very low event actions.')
acpmFreqVLowTrapNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 4, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(522, 1199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmFreqVLowTrapNum.setStatus('current')
if mibBuilder.loadTexts: acpmFreqVLowTrapNum.setDescription('Very low event trap number.')
acpmFreqVLowClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 4, 1, 22), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmFreqVLowClass.setStatus('current')
if mibBuilder.loadTexts: acpmFreqVLowClass.setDescription('Very low event class.')
acpmFreqSysrepEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 4, 1, 23), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmFreqSysrepEnable.setStatus('current')
if mibBuilder.loadTexts: acpmFreqSysrepEnable.setDescription('System reporting enable for frequency telemetry.')
acpmFreqSysrepThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 4, 1, 24), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmFreqSysrepThreshold.setStatus('current')
if mibBuilder.loadTexts: acpmFreqSysrepThreshold.setDescription('System reporting threshold for frequency telemetry.  This is a\n        floating point value.')
acpmFreqSysrepLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 4, 1, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmFreqSysrepLimit.setStatus('current')
if mibBuilder.loadTexts: acpmFreqSysrepLimit.setDescription('System reporting limit for frequency telemetry.')
acpmTotalRealPowerTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 5), )
if mibBuilder.loadTexts: acpmTotalRealPowerTable.setStatus('current')
if mibBuilder.loadTexts: acpmTotalRealPowerTable.setDescription('This table organizes AC power monitor total real power attributes.')
acpmTRPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 5, 1), ).setIndexNames((0, "SITEBOSS-571-STD-MIB", "acpmTRPIndex"))
if mibBuilder.loadTexts: acpmTRPEntry.setStatus('current')
if mibBuilder.loadTexts: acpmTRPEntry.setDescription('Entry for AC power monitor total real power config table.')
acpmTRPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmTRPIndex.setStatus('current')
if mibBuilder.loadTexts: acpmTRPIndex.setDescription('Which AC power monitor in the AC power monitor total real power\n        config table.')
acpmTRPEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 5, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmTRPEnable.setStatus('current')
if mibBuilder.loadTexts: acpmTRPEnable.setDescription('Enable AC power monitor total real power events.')
acpmTRPDeadband = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 5, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmTRPDeadband.setStatus('current')
if mibBuilder.loadTexts: acpmTRPDeadband.setDescription('Deadband (hysteresis) for total real power event.  This is a floating\n        point value.')
acpmTRPVHighValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 5, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmTRPVHighValue.setStatus('current')
if mibBuilder.loadTexts: acpmTRPVHighValue.setDescription('Very high event threshold.  This is a floating point value.')
acpmTRPVHighActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 5, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmTRPVHighActions.setStatus('current')
if mibBuilder.loadTexts: acpmTRPVHighActions.setDescription('Very high event actions.')
acpmTRPVHighTrapNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(523, 1199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmTRPVHighTrapNum.setStatus('current')
if mibBuilder.loadTexts: acpmTRPVHighTrapNum.setDescription('Very high event trap number.')
acpmTRPVHighClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 5, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmTRPVHighClass.setStatus('current')
if mibBuilder.loadTexts: acpmTRPVHighClass.setDescription('Very high event class.')
acpmTRPHighValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 5, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmTRPHighValue.setStatus('current')
if mibBuilder.loadTexts: acpmTRPHighValue.setDescription('High event threshold.  This is a floating point value.')
acpmTRPHighActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 5, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmTRPHighActions.setStatus('current')
if mibBuilder.loadTexts: acpmTRPHighActions.setDescription('High event actions.')
acpmTRPHighTrapNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 5, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(523, 1199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmTRPHighTrapNum.setStatus('current')
if mibBuilder.loadTexts: acpmTRPHighTrapNum.setDescription('High event trap number.')
acpmTRPHighClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 5, 1, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmTRPHighClass.setStatus('current')
if mibBuilder.loadTexts: acpmTRPHighClass.setDescription('High event class.')
acpmTRPNormalActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 5, 1, 12), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmTRPNormalActions.setStatus('current')
if mibBuilder.loadTexts: acpmTRPNormalActions.setDescription('Return to normal actions.')
acpmTRPNormalTrapNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 5, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(523, 1199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmTRPNormalTrapNum.setStatus('current')
if mibBuilder.loadTexts: acpmTRPNormalTrapNum.setDescription('Return to normal trap number.')
acpmTRPNormalClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 5, 1, 14), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmTRPNormalClass.setStatus('current')
if mibBuilder.loadTexts: acpmTRPNormalClass.setDescription('Return to normal class.')
acpmTRPLowValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 5, 1, 15), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmTRPLowValue.setStatus('current')
if mibBuilder.loadTexts: acpmTRPLowValue.setDescription('Low event threshold.  This is a floating point value.')
acpmTRPLowActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 5, 1, 16), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmTRPLowActions.setStatus('current')
if mibBuilder.loadTexts: acpmTRPLowActions.setDescription('Low event actions.')
acpmTRPLowTrapNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 5, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(523, 1199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmTRPLowTrapNum.setStatus('current')
if mibBuilder.loadTexts: acpmTRPLowTrapNum.setDescription('Low event trap number.')
acpmTRPLowClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 5, 1, 18), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmTRPLowClass.setStatus('current')
if mibBuilder.loadTexts: acpmTRPLowClass.setDescription('Low event class.')
acpmTRPVLowValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 5, 1, 19), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmTRPVLowValue.setStatus('current')
if mibBuilder.loadTexts: acpmTRPVLowValue.setDescription('Very low event threshold.  This is a floating point value.')
acpmTRPVLowActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 5, 1, 20), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmTRPVLowActions.setStatus('current')
if mibBuilder.loadTexts: acpmTRPVLowActions.setDescription('Very low event actions.')
acpmTRPVLowTrapNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 5, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(523, 1199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmTRPVLowTrapNum.setStatus('current')
if mibBuilder.loadTexts: acpmTRPVLowTrapNum.setDescription('Very low event trap number.')
acpmTRPVLowClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 5, 1, 22), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmTRPVLowClass.setStatus('current')
if mibBuilder.loadTexts: acpmTRPVLowClass.setDescription('Very low event class.')
acpmTRPSysrepEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 5, 1, 23), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmTRPSysrepEnable.setStatus('current')
if mibBuilder.loadTexts: acpmTRPSysrepEnable.setDescription('System reporting enable for total real power telemetry.')
acpmTRPSysrepThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 5, 1, 24), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmTRPSysrepThreshold.setStatus('current')
if mibBuilder.loadTexts: acpmTRPSysrepThreshold.setDescription('System reporting threshold for total real power telemetry.  This is a\n        floating point value.')
acpmTRPSysrepLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 5, 1, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmTRPSysrepLimit.setStatus('current')
if mibBuilder.loadTexts: acpmTRPSysrepLimit.setDescription('System reporting limit for total real power telemetry.')
acpmDisconnectTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 6), )
if mibBuilder.loadTexts: acpmDisconnectTable.setStatus('current')
if mibBuilder.loadTexts: acpmDisconnectTable.setDescription('This table organizes AC power monitor device disconnect event\n        attributes.')
acpmDisconnectEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 6, 1), ).setIndexNames((0, "SITEBOSS-571-STD-MIB", "acpmDisconnectIndex"))
if mibBuilder.loadTexts: acpmDisconnectEntry.setStatus('current')
if mibBuilder.loadTexts: acpmDisconnectEntry.setDescription('Entry for AC power monitor device disconnect event config table.')
acpmDisconnectIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmDisconnectIndex.setStatus('current')
if mibBuilder.loadTexts: acpmDisconnectIndex.setDescription('Which AC power monitor in the AC power monitor device disconnect\n        event config table.')
acpmDisconnectEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 6, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmDisconnectEnable.setStatus('current')
if mibBuilder.loadTexts: acpmDisconnectEnable.setDescription('Enable AC power monitor device disconnect event.')
acpmDisconnectActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 6, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmDisconnectActions.setStatus('current')
if mibBuilder.loadTexts: acpmDisconnectActions.setDescription('Actions for disconnect event.')
acpmDisconnectTrapNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(524, 1199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmDisconnectTrapNum.setStatus('current')
if mibBuilder.loadTexts: acpmDisconnectTrapNum.setDescription('Trap number for disconnect event.')
acpmDisconnectClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 6, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmDisconnectClass.setStatus('current')
if mibBuilder.loadTexts: acpmDisconnectClass.setDescription('Class for disconnect event.')
acpmDisconnectNormalActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 6, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmDisconnectNormalActions.setStatus('current')
if mibBuilder.loadTexts: acpmDisconnectNormalActions.setDescription('Actions for disconnect return to normal event.')
acpmDisconnectNormalTrapNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 6, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(524, 1199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmDisconnectNormalTrapNum.setStatus('current')
if mibBuilder.loadTexts: acpmDisconnectNormalTrapNum.setDescription('Trap number for disconnect return to normal event.')
acpmDisconnectNormalClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 6, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmDisconnectNormalClass.setStatus('current')
if mibBuilder.loadTexts: acpmDisconnectNormalClass.setDescription('Class for disconnect return to normal event.')
acpmTotalPowerFactorTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 7), )
if mibBuilder.loadTexts: acpmTotalPowerFactorTable.setStatus('current')
if mibBuilder.loadTexts: acpmTotalPowerFactorTable.setDescription('This table organizes AC power monitor device total power factor\n        event attributes.')
acpmTPFEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 7, 1), ).setIndexNames((0, "SITEBOSS-571-STD-MIB", "acpmTPFIndex"))
if mibBuilder.loadTexts: acpmTPFEntry.setStatus('current')
if mibBuilder.loadTexts: acpmTPFEntry.setDescription('Entry for AC power monitor device total power factor event config\n        table.')
acpmTPFIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmTPFIndex.setStatus('current')
if mibBuilder.loadTexts: acpmTPFIndex.setDescription('Which AC power monitor in the AC power monitor device disconnect\n        event config table.')
acpmTPFEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 7, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmTPFEnable.setStatus('current')
if mibBuilder.loadTexts: acpmTPFEnable.setDescription('Enable AC power monitor device disconnect event.')
acpmTPFDeadband = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 7, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmTPFDeadband.setStatus('current')
if mibBuilder.loadTexts: acpmTPFDeadband.setDescription('Deadband (hysteresis).')
acpmTPFNormalActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 7, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmTPFNormalActions.setStatus('current')
if mibBuilder.loadTexts: acpmTPFNormalActions.setDescription('Normal actions.')
acpmTPFNormalTrapNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 7, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmTPFNormalTrapNum.setStatus('current')
if mibBuilder.loadTexts: acpmTPFNormalTrapNum.setDescription('Normal trap number.')
acpmTPFNormalClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 7, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmTPFNormalClass.setStatus('current')
if mibBuilder.loadTexts: acpmTPFNormalClass.setDescription('Normal class.')
acpmTPFLowValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 7, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmTPFLowValue.setStatus('current')
if mibBuilder.loadTexts: acpmTPFLowValue.setDescription('Low threshold.')
acpmTPFLowActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 7, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmTPFLowActions.setStatus('current')
if mibBuilder.loadTexts: acpmTPFLowActions.setDescription('Low actions.')
acpmTPFLowTrapNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 7, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmTPFLowTrapNum.setStatus('current')
if mibBuilder.loadTexts: acpmTPFLowTrapNum.setDescription('Low trap number.')
acpmTPFLowClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 7, 1, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmTPFLowClass.setStatus('current')
if mibBuilder.loadTexts: acpmTPFLowClass.setDescription('Low class.')
acpmTPFVLowValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 7, 1, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmTPFVLowValue.setStatus('current')
if mibBuilder.loadTexts: acpmTPFVLowValue.setDescription('Very Low threshold.')
acpmTPFVLowActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 7, 1, 12), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmTPFVLowActions.setStatus('current')
if mibBuilder.loadTexts: acpmTPFVLowActions.setDescription('Very Low actions.')
acpmTPFVLowTrapNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 7, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmTPFVLowTrapNum.setStatus('current')
if mibBuilder.loadTexts: acpmTPFVLowTrapNum.setDescription('Very Low trap number.')
acpmTPFVLowClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 7, 1, 14), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmTPFVLowClass.setStatus('current')
if mibBuilder.loadTexts: acpmTPFVLowClass.setDescription('Very Low class.')
acpmTPFSysrepEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 7, 1, 15), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmTPFSysrepEnable.setStatus('current')
if mibBuilder.loadTexts: acpmTPFSysrepEnable.setDescription('System reporting enable.')
acpmTPFSysrepThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 7, 1, 16), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmTPFSysrepThreshold.setStatus('current')
if mibBuilder.loadTexts: acpmTPFSysrepThreshold.setDescription('System reporting threshold.')
acpmTPFSysrepLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 12, 7, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmTPFSysrepLimit.setStatus('current')
if mibBuilder.loadTexts: acpmTPFSysrepLimit.setDescription('System reporting limit.')
evResetEnable = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 16, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evResetEnable.setStatus('current')
if mibBuilder.loadTexts: evResetEnable.setDescription('Enable/disable reset event.  This event is triggered when the unit\n        finishes booting.')
evResetDelay = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 16, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evResetDelay.setStatus('current')
if mibBuilder.loadTexts: evResetDelay.setDescription('Number of seconds to wait after unit finishes booting before triggering\n        the reset event.')
evResetActions = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 16, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evResetActions.setStatus('current')
if mibBuilder.loadTexts: evResetActions.setDescription('Actions for reset event.')
evResetMessage = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 16, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evResetMessage.setStatus('current')
if mibBuilder.loadTexts: evResetMessage.setDescription('Message for reset event.')
evResetTrapnum = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 16, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(543, 1199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evResetTrapnum.setStatus('current')
if mibBuilder.loadTexts: evResetTrapnum.setDescription('Trap number for reset event.')
evResetClass = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 12, 16, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evResetClass.setStatus('current')
if mibBuilder.loadTexts: evResetClass.setDescription('Class (severity) for reset event.')
actionCallNumberTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 14, 2, 14, 1), )
if mibBuilder.loadTexts: actionCallNumberTable.setStatus('current')
if mibBuilder.loadTexts: actionCallNumberTable.setDescription('Table of phone numbers to dial for modem actions')
actionCallNumberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 14, 2, 14, 1, 1), ).setIndexNames((0, "SITEBOSS-571-STD-MIB", "actionCallNumberIndex"))
if mibBuilder.loadTexts: actionCallNumberEntry.setStatus('current')
if mibBuilder.loadTexts: actionCallNumberEntry.setDescription('Entry for table of phone numbers to dial for modem actions')
actionCallNumberIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 14, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: actionCallNumberIndex.setStatus('current')
if mibBuilder.loadTexts: actionCallNumberIndex.setDescription('Index for table of phone numbers to dial for modem actions')
actionCallNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 14, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: actionCallNumber.setStatus('current')
if mibBuilder.loadTexts: actionCallNumber.setDescription('The number to dial for this action slot')
actionPagerTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 14, 2, 14, 2), )
if mibBuilder.loadTexts: actionPagerTable.setStatus('current')
if mibBuilder.loadTexts: actionPagerTable.setDescription('Table of pager configurations')
actionPagerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 14, 2, 14, 2, 1), ).setIndexNames((0, "SITEBOSS-571-STD-MIB", "actionPagerIndex"))
if mibBuilder.loadTexts: actionPagerEntry.setStatus('current')
if mibBuilder.loadTexts: actionPagerEntry.setDescription('Entry for table of pager configurations')
actionPagerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 14, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: actionPagerIndex.setStatus('current')
if mibBuilder.loadTexts: actionPagerIndex.setDescription('index for table of pager configurations')
actionPagerType = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 14, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: actionPagerType.setStatus('current')
if mibBuilder.loadTexts: actionPagerType.setDescription('type of this pager configuration')
actionPagerNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 14, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: actionPagerNumber.setStatus('current')
if mibBuilder.loadTexts: actionPagerNumber.setDescription('phone number to dial for this pager configuration')
actionPagerID = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 14, 2, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: actionPagerID.setStatus('current')
if mibBuilder.loadTexts: actionPagerID.setDescription('ID to use for this pager configuration')
actionPagerMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 14, 2, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: actionPagerMessage.setStatus('current')
if mibBuilder.loadTexts: actionPagerMessage.setDescription('message to use for this pager configuration')
actionPagerPostCalloutDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 14, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: actionPagerPostCalloutDelay.setStatus('current')
if mibBuilder.loadTexts: actionPagerPostCalloutDelay.setDescription('Seconds to wait after dialing before sending ID')
actionPagerPostIDDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 14, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: actionPagerPostIDDelay.setStatus('current')
if mibBuilder.loadTexts: actionPagerPostIDDelay.setDescription('Seconds to wait after sending ID to send message')
actionSchedEnable = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 14, 3, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: actionSchedEnable.setStatus('current')
if mibBuilder.loadTexts: actionSchedEnable.setDescription('ON/OFF enable action schedule')
actionSchedBegin = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 14, 3, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: actionSchedBegin.setStatus('current')
if mibBuilder.loadTexts: actionSchedBegin.setDescription('action schedule begin time (HH:MM)')
actionSchedEnd = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 14, 3, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: actionSchedEnd.setStatus('current')
if mibBuilder.loadTexts: actionSchedEnd.setDescription('action schedule end time (HH:MM)')
actionSchedWeekdaysOnly = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 14, 3, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: actionSchedWeekdaysOnly.setStatus('current')
if mibBuilder.loadTexts: actionSchedWeekdaysOnly.setDescription('ON/OFF whether the action schedule applies to weekdays only\n        (ON) or all days (OFF)')
actionAsentriaRequireAck = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 14, 4, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: actionAsentriaRequireAck.setStatus('current')
if mibBuilder.loadTexts: actionAsentriaRequireAck.setDescription('ON/OFF Asentria action requires an ack from the receiver')
actionAsentriaVersion = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 14, 4, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: actionAsentriaVersion.setStatus('current')
if mibBuilder.loadTexts: actionAsentriaVersion.setDescription('version 1.0 or 1.1')
actionAsentriaTCPPort = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 14, 4, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: actionAsentriaTCPPort.setStatus('current')
if mibBuilder.loadTexts: actionAsentriaTCPPort.setDescription('TCP port used for TCP-based Asentria alarms')
actionHostTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 14, 2, 14, 6), )
if mibBuilder.loadTexts: actionHostTable.setStatus('current')
if mibBuilder.loadTexts: actionHostTable.setDescription('Table of network hosts to use for network-based actions')
actionHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 14, 2, 14, 6, 1), ).setIndexNames((0, "SITEBOSS-571-STD-MIB", "actionHostIndex"))
if mibBuilder.loadTexts: actionHostEntry.setStatus('current')
if mibBuilder.loadTexts: actionHostEntry.setDescription('Entry for table of network hosts to use for network-based\n        actions')
actionHostIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 14, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: actionHostIndex.setStatus('current')
if mibBuilder.loadTexts: actionHostIndex.setDescription('Index for table of network hosts to use for network-based\n        actions')
actionHost = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 14, 6, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: actionHost.setStatus('current')
if mibBuilder.loadTexts: actionHost.setDescription('Hostname/IP address used as destination for network-based\n        action (e.g., trap)')
actionEmailTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 14, 2, 14, 7), )
if mibBuilder.loadTexts: actionEmailTable.setStatus('current')
if mibBuilder.loadTexts: actionEmailTable.setDescription('Table of email addresses to use for email actions')
actionEmailEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 14, 2, 14, 7, 1), ).setIndexNames((0, "SITEBOSS-571-STD-MIB", "actionEmailIndex"))
if mibBuilder.loadTexts: actionEmailEntry.setStatus('current')
if mibBuilder.loadTexts: actionEmailEntry.setDescription('Entry for table of email addresses to use for email actions')
actionEmailIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 14, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: actionEmailIndex.setStatus('current')
if mibBuilder.loadTexts: actionEmailIndex.setDescription('Index for table of email addresses to use for email actions')
actionEmail = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 14, 7, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: actionEmail.setStatus('current')
if mibBuilder.loadTexts: actionEmail.setDescription('email address')
actionParseError = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 14, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actionParseError.setStatus('current')
if mibBuilder.loadTexts: actionParseError.setDescription('When a user attempts to configure an invalid action setting/\n        object, this object says why it was invalid.')
sysTimeAutoDST = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 16, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTimeAutoDST.setStatus('current')
if mibBuilder.loadTexts: sysTimeAutoDST.setDescription('ON/OFF automatically adjust for Daylight Savings Time')
sysTimeGMTOffset = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 16, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTimeGMTOffset.setStatus('current')
if mibBuilder.loadTexts: sysTimeGMTOffset.setDescription('Absolute value of offset (hours) from GMT of the timezone')
sysTimeGMTDirection = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 16, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTimeGMTDirection.setStatus('current')
if mibBuilder.loadTexts: sysTimeGMTDirection.setDescription('Direction (AHEAD/BEHIND) of timezone relative to GMT')
sysTimeNetEnable = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 16, 1, 4, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTimeNetEnable.setStatus('current')
if mibBuilder.loadTexts: sysTimeNetEnable.setDescription('Network time mode')
sysTimeNetHostTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 14, 2, 16, 1, 4, 2), )
if mibBuilder.loadTexts: sysTimeNetHostTable.setStatus('current')
if mibBuilder.loadTexts: sysTimeNetHostTable.setDescription('Table of hosts to use for network time services')
sysTimeNetHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 14, 2, 16, 1, 4, 2, 1), ).setIndexNames((0, "SITEBOSS-571-STD-MIB", "sysTimeNetHostIndex"))
if mibBuilder.loadTexts: sysTimeNetHostEntry.setStatus('current')
if mibBuilder.loadTexts: sysTimeNetHostEntry.setDescription('Entry for table of hosts to use for network time services')
sysTimeNetHostIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 16, 1, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTimeNetHostIndex.setStatus('current')
if mibBuilder.loadTexts: sysTimeNetHostIndex.setDescription('Index for table of hosts to use for network time services')
sysTimeNetHost = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 16, 1, 4, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTimeNetHost.setStatus('current')
if mibBuilder.loadTexts: sysTimeNetHost.setDescription('host to use for network time services')
sysPTTimeout = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 16, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysPTTimeout.setStatus('current')
if mibBuilder.loadTexts: sysPTTimeout.setDescription('Timeout (minutes) of inactivity after which a pass-through\n        session is terminated (0 means it never terminates)')
sysPTEndPause = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 16, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysPTEndPause.setStatus('current')
if mibBuilder.loadTexts: sysPTEndPause.setDescription('number of 16ths of a second between escape characters\n        received on pass-through origin IO handle that are reuired\n        for the escape characters to register as pass-through escape\n        characters in the pass-through escape sequence.  Set to 0 to\n        make the escape character register as part of the pass-\n        through escape sequence without requiring a pause.')
sysPTJoinable = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 16, 2, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysPTJoinable.setStatus('current')
if mibBuilder.loadTexts: sysPTJoinable.setDescription('Enable joinable pass-through sessions.')
sysMTU = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 16, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysMTU.setStatus('current')
if mibBuilder.loadTexts: sysMTU.setDescription('Maximum transfer unit for ethernet interfaces')
sysAnswerString = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 16, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysAnswerString.setStatus('current')
if mibBuilder.loadTexts: sysAnswerString.setDescription('String displayed upon login')
sysEventFileID = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 16, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysEventFileID.setStatus('current')
if mibBuilder.loadTexts: sysEventFileID.setDescription('ID string for events file')
sysEscapeCharacter = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 16, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysEscapeCharacter.setStatus('current')
if mibBuilder.loadTexts: sysEscapeCharacter.setDescription('Decimal ASCII code of the system escape character')
sysTimeStampTimeFormat = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 16, 8, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTimeStampTimeFormat.setStatus('current')
if mibBuilder.loadTexts: sysTimeStampTimeFormat.setDescription('Format of time stamp: HH:MM,HH:MM:SS,BLANK')
sysTimeStampDateFormat = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 16, 8, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTimeStampDateFormat.setStatus('current')
if mibBuilder.loadTexts: sysTimeStampDateFormat.setDescription('Format of date stamp: MM/DD,MM/DD/YY,MM/DD/YYYY,BLANK')
sysTimeStampSpaceAfter = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 16, 8, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTimeStampSpaceAfter.setStatus('current')
if mibBuilder.loadTexts: sysTimeStampSpaceAfter.setDescription('ON/OFF Inlude a space after timestamp')
sysLogMode = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 16, 9, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLogMode.setStatus('current')
if mibBuilder.loadTexts: sysLogMode.setDescription('Syslog mode: disabled, emit UDP (REMOTE), save in a\n        rotating file set (FILE), or emit on a listening socket\n        (SERVER)')
sysLoghost = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 16, 9, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLoghost.setStatus('current')
if mibBuilder.loadTexts: sysLoghost.setDescription('Syslog host: destination machine when syslog mode is REMOTE')
sysLogFilter = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 16, 9, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLogFilter.setStatus('current')
if mibBuilder.loadTexts: sysLogFilter.setDescription('String describing what functions place data in the syslog')
sysLogFileSize = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 16, 9, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLogFileSize.setStatus('current')
if mibBuilder.loadTexts: sysLogFileSize.setDescription('Size (in KB) of syslog files (when syslog mode is SERVER or\n        FILE)')
sysLogFileCount = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 16, 9, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLogFileCount.setStatus('current')
if mibBuilder.loadTexts: sysLogFileCount.setDescription('Number of files in syslog file set (when syslog mode is\n        SERVER or FILE)')
sysLogListenPort = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 16, 9, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLogListenPort.setStatus('current')
if mibBuilder.loadTexts: sysLogListenPort.setDescription('TCP port on which the unit listens for a connection on\n        which syslog data is dumped (when syslog mode is SERVER)')
sysCRDBCapacity = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 16, 10, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCRDBCapacity.setStatus('current')
if mibBuilder.loadTexts: sysCRDBCapacity.setDescription('Capacity of Call Record Database (in KB)')
sysCRDBPercentFull = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 16, 10, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCRDBPercentFull.setStatus('current')
if mibBuilder.loadTexts: sysCRDBPercentFull.setDescription('Percent of the CRDB used')
sysCRDBFileIDTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 14, 2, 16, 10, 3), )
if mibBuilder.loadTexts: sysCRDBFileIDTable.setStatus('current')
if mibBuilder.loadTexts: sysCRDBFileIDTable.setDescription('Table of CRDB file IDs')
sysCRDBFileIDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 14, 2, 16, 10, 3, 1), ).setIndexNames((0, "SITEBOSS-571-STD-MIB", "sysCRDBFileIDIndex"))
if mibBuilder.loadTexts: sysCRDBFileIDEntry.setStatus('current')
if mibBuilder.loadTexts: sysCRDBFileIDEntry.setDescription('Entry for table of CRDB file IDs')
sysCRDBFileIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 16, 10, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCRDBFileIDIndex.setStatus('current')
if mibBuilder.loadTexts: sysCRDBFileIDIndex.setDescription('Index for table of CRDB file IDs')
sysCRDBFileID = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 16, 10, 3, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysCRDBFileID.setStatus('current')
if mibBuilder.loadTexts: sysCRDBFileID.setDescription('ID of CRDB file for this port-associated file x')
sysCRDBFileEnforceMinTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 14, 2, 16, 10, 4), )
if mibBuilder.loadTexts: sysCRDBFileEnforceMinTable.setStatus('current')
if mibBuilder.loadTexts: sysCRDBFileEnforceMinTable.setDescription('Table of CRDB file minimum size enforcement settings')
sysCRDBFileEnforceMinEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 14, 2, 16, 10, 4, 1), ).setIndexNames((0, "SITEBOSS-571-STD-MIB", "sysCRDBFileEnforceMinIndex"))
if mibBuilder.loadTexts: sysCRDBFileEnforceMinEntry.setStatus('current')
if mibBuilder.loadTexts: sysCRDBFileEnforceMinEntry.setDescription('Entry for table of CRDB file minimum size enforcement\n        settings')
sysCRDBFileEnforceMinIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 16, 10, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCRDBFileEnforceMinIndex.setStatus('current')
if mibBuilder.loadTexts: sysCRDBFileEnforceMinIndex.setDescription('Index for table of CRDB file minimum size enforcement\n        settings')
sysCRDBFileEnforceMin = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 16, 10, 4, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysCRDBFileEnforceMin.setStatus('current')
if mibBuilder.loadTexts: sysCRDBFileEnforceMin.setDescription('ON/OFF: enforce minimum size for this CRDB file x')
sysCharMask = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 16, 11), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysCharMask.setStatus('current')
if mibBuilder.loadTexts: sysCharMask.setDescription('Character mask used for ignoring certain characters on\n        serial ports when assembling data records (when port mode is\n        ASCII)')
sysPrompt = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 16, 12), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysPrompt.setStatus('current')
if mibBuilder.loadTexts: sysPrompt.setDescription('Prompt to use in a commnand session')
sysBootStatus = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 16, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysBootStatus.setStatus('current')
if mibBuilder.loadTexts: sysBootStatus.setDescription('String describing the boot status of the unit (Booted OK/\n        still booting')
sysLocLatitude = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 16, 14, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLocLatitude.setStatus('current')
if mibBuilder.loadTexts: sysLocLatitude.setDescription('Latitude portion of geographic coordinates as string')
sysLocLongitude = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 16, 14, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLocLongitude.setStatus('current')
if mibBuilder.loadTexts: sysLocLongitude.setDescription('Longitude portion of geographic coordinates as string')
sysLocXOffset = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 16, 14, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLocXOffset.setStatus('current')
if mibBuilder.loadTexts: sysLocXOffset.setDescription('X-offset portion of geographic coordinates as string')
sysLocYOffset = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 16, 14, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLocYOffset.setStatus('current')
if mibBuilder.loadTexts: sysLocYOffset.setDescription('Y offset portion of geographic coordinates as string')
sysLocAngle = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 16, 14, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLocAngle.setStatus('current')
if mibBuilder.loadTexts: sysLocAngle.setDescription('Angle portion of geographic coordinates as string')
sysLocAltitude = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 16, 14, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLocAltitude.setStatus('current')
if mibBuilder.loadTexts: sysLocAltitude.setDescription('Altitude portion of geographic coordinates as string')
sysAMManufacturer = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 16, 15, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAMManufacturer.setStatus('current')
if mibBuilder.loadTexts: sysAMManufacturer.setDescription('Device manufacturer')
sysAMProduct = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 16, 15, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAMProduct.setStatus('current')
if mibBuilder.loadTexts: sysAMProduct.setDescription('Device product description (i.e., model or model number)')
sysAMSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 16, 15, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAMSerialNumber.setStatus('current')
if mibBuilder.loadTexts: sysAMSerialNumber.setDescription('Manufacturer serial number for device')
sysAMHardwareOptions = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 16, 15, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAMHardwareOptions.setStatus('current')
if mibBuilder.loadTexts: sysAMHardwareOptions.setDescription('Hardware options currently installed on device')
sysAMSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 16, 15, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAMSoftwareVersion.setStatus('current')
if mibBuilder.loadTexts: sysAMSoftwareVersion.setDescription('Currently-running software version on device')
sysAMSiteName = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 16, 15, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysAMSiteName.setStatus('current')
if mibBuilder.loadTexts: sysAMSiteName.setDescription('Site Name of device (user definable, also known as the\n        siteName object under the productIds branch.')
sysFileTransferStatus = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 16, 17, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysFileTransferStatus.setStatus('current')
if mibBuilder.loadTexts: sysFileTransferStatus.setDescription("Start/cancel file transfer, or check transfer status.  To start, set this object\n        to 'start'.  To cancel, set this object to 'cancel'.  To check status, get the\n        object")
sysFileTransferURL = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 16, 17, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysFileTransferURL.setStatus('current')
if mibBuilder.loadTexts: sysFileTransferURL.setDescription('URL (describing protocol, host, directory, and file) on which file transfer\n        function operates.')
sysFileTransferUsername = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 16, 17, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysFileTransferUsername.setStatus('current')
if mibBuilder.loadTexts: sysFileTransferUsername.setDescription('Username for user account at the resource specified by sysFileTransferURL.')
sysFileTransferPassword = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 16, 17, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysFileTransferPassword.setStatus('current')
if mibBuilder.loadTexts: sysFileTransferPassword.setDescription('Password for user account at the resource specified by sysFileTransferURL.')
sysUpdateStatus = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 16, 18, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysUpdateStatus.setStatus('current')
if mibBuilder.loadTexts: sysUpdateStatus.setDescription('Check time/result of last update attempt.')
auditLogEnable = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 17, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: auditLogEnable.setStatus('current')
if mibBuilder.loadTexts: auditLogEnable.setDescription('ON/OFF enable audit log')
auditLogStoreResets = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 17, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: auditLogStoreResets.setStatus('current')
if mibBuilder.loadTexts: auditLogStoreResets.setDescription('ON/OFF audit log stores when the unit resets')
auditLogStoreCommands = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 17, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: auditLogStoreCommands.setStatus('current')
if mibBuilder.loadTexts: auditLogStoreCommands.setDescription('ON/OFF audit log stores commands entered in a command\n        session')
auditLogStoreOutputs = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 17, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: auditLogStoreOutputs.setStatus('current')
if mibBuilder.loadTexts: auditLogStoreOutputs.setDescription('ON/OFF audit log stores output (relay output and power output)\n        activity')
auditLogStoreAlarmActions = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 17, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: auditLogStoreAlarmActions.setStatus('current')
if mibBuilder.loadTexts: auditLogStoreAlarmActions.setDescription('ON/OFF audit log stores action delivery activity')
auditLogStorePwdFailures = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 17, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: auditLogStorePwdFailures.setStatus('current')
if mibBuilder.loadTexts: auditLogStorePwdFailures.setDescription('ON/OFF audit log stores when user was denied login')
auditLogStoreLogins = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 17, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: auditLogStoreLogins.setStatus('current')
if mibBuilder.loadTexts: auditLogStoreLogins.setDescription('ON/OFF audit log stores when a user was allowed login')
auditLogStoreSHSK = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 17, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: auditLogStoreSHSK.setStatus('current')
if mibBuilder.loadTexts: auditLogStoreSHSK.setDescription('ON/OFF audit log stores serial handshaking status\n        (regardless of serial handshaking event)')
auditLogStorePassthrough = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 17, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: auditLogStorePassthrough.setStatus('current')
if mibBuilder.loadTexts: auditLogStorePassthrough.setDescription('ON/OFF audit log stores pass-through activity')
auditLogStoreInactivity = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 17, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: auditLogStoreInactivity.setStatus('current')
if mibBuilder.loadTexts: auditLogStoreInactivity.setDescription('ON/OFF audit log stores when sessions expire due to\n        inactivity')
auditLogStorePolling = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 17, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: auditLogStorePolling.setStatus('current')
if mibBuilder.loadTexts: auditLogStorePolling.setDescription('ON/OFF audit log stores CRDB polling activity')
auditLogMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 17, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: auditLogMaxSize.setStatus('current')
if mibBuilder.loadTexts: auditLogMaxSize.setDescription('Maximum size (in KB) of audit log')
scrGlobalEnable = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 2, 18, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scrGlobalEnable.setStatus('current')
if mibBuilder.loadTexts: scrGlobalEnable.setDescription('ON/OFF enable scripting')
scrDTRCtrlPortEnableTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 14, 2, 18, 2), )
if mibBuilder.loadTexts: scrDTRCtrlPortEnableTable.setStatus('current')
if mibBuilder.loadTexts: scrDTRCtrlPortEnableTable.setDescription('Table of DTR control port enables')
scrDTRCtrlPortEnableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 14, 2, 18, 2, 1), ).setIndexNames((0, "SITEBOSS-571-STD-MIB", "scrDTRCtrlPortEnableIndex"))
if mibBuilder.loadTexts: scrDTRCtrlPortEnableEntry.setStatus('current')
if mibBuilder.loadTexts: scrDTRCtrlPortEnableEntry.setDescription('Entry for table of DTR control port enables')
scrDTRCtrlPortEnableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 18, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scrDTRCtrlPortEnableIndex.setStatus('current')
if mibBuilder.loadTexts: scrDTRCtrlPortEnableIndex.setDescription('Index for table of DTR control port enables')
scrDTRCtrlPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 18, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scrDTRCtrlPortEnable.setStatus('current')
if mibBuilder.loadTexts: scrDTRCtrlPortEnable.setDescription('ON/OFF enable DTR control of scripting for this port')
scrTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 14, 2, 18, 3), )
if mibBuilder.loadTexts: scrTable.setStatus('current')
if mibBuilder.loadTexts: scrTable.setDescription('Table of scripts')
scrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 14, 2, 18, 3, 1), ).setIndexNames((0, "SITEBOSS-571-STD-MIB", "scrIndex"))
if mibBuilder.loadTexts: scrEntry.setStatus('current')
if mibBuilder.loadTexts: scrEntry.setDescription('Entry for table of scripts')
scrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 18, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scrIndex.setStatus('current')
if mibBuilder.loadTexts: scrIndex.setDescription('Index for table of scripts')
scrEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 18, 3, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scrEnable.setStatus('current')
if mibBuilder.loadTexts: scrEnable.setDescription('ON/OFF enable this script')
scrName = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 18, 3, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scrName.setStatus('current')
if mibBuilder.loadTexts: scrName.setDescription('Name of this script')
scrFilename = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 18, 3, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scrFilename.setStatus('current')
if mibBuilder.loadTexts: scrFilename.setDescription('Filename for this script')
scrRunAlways = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 18, 3, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scrRunAlways.setStatus('current')
if mibBuilder.loadTexts: scrRunAlways.setDescription('ON/OFF: this script always runs')
scrRunAtStartup = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 18, 3, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scrRunAtStartup.setStatus('current')
if mibBuilder.loadTexts: scrRunAtStartup.setDescription('ON/OFF: this script runs at startup')
scrRunScheduled = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 18, 3, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scrRunScheduled.setStatus('current')
if mibBuilder.loadTexts: scrRunScheduled.setDescription('ON/OFF: this script runs at a certain time of day')
scrScheduleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 18, 3, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scrScheduleTime.setStatus('current')
if mibBuilder.loadTexts: scrScheduleTime.setDescription('Time of day (HH:MM) this script is scheduled to run')
scrArguments = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 18, 3, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scrArguments.setStatus('current')
if mibBuilder.loadTexts: scrArguments.setDescription('Arguments for this script')
scrRepeatInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 18, 3, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scrRepeatInterval.setStatus('current')
if mibBuilder.loadTexts: scrRepeatInterval.setDescription('How often this script runs (minutes)')
scrVolatileStringTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 14, 2, 18, 4), )
if mibBuilder.loadTexts: scrVolatileStringTable.setStatus('current')
if mibBuilder.loadTexts: scrVolatileStringTable.setDescription('Table of volatile string settings for use in\n         scripts.')
scrVolatileStringEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 14, 2, 18, 4, 1), ).setIndexNames((0, "SITEBOSS-571-STD-MIB", "scrVolatileStringIndex"))
if mibBuilder.loadTexts: scrVolatileStringEntry.setStatus('current')
if mibBuilder.loadTexts: scrVolatileStringEntry.setDescription('Entry for table of volatile script string\n        settings')
scrVolatileStringIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 18, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scrVolatileStringIndex.setStatus('current')
if mibBuilder.loadTexts: scrVolatileStringIndex.setDescription('Index for table of volatile script string\n        settings')
scrVolatileString = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 18, 4, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scrVolatileString.setStatus('current')
if mibBuilder.loadTexts: scrVolatileString.setDescription('Volatile string for use in scripts. Use this\n         object to cache frequently-changing string values\n         or string values that do not need to persist\n         through reset.  This object corresponds to the\n         scripting.vstring[] setting key branch; use those\n         keys in scripts and you can view or change their\n         values with this object.')
scrVolatileIntTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 14, 2, 18, 5), )
if mibBuilder.loadTexts: scrVolatileIntTable.setStatus('current')
if mibBuilder.loadTexts: scrVolatileIntTable.setDescription('Table of volatile integer settings for use in\n         scripts.')
scrVolatileIntEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 14, 2, 18, 5, 1), ).setIndexNames((0, "SITEBOSS-571-STD-MIB", "scrVolatileIntIndex"))
if mibBuilder.loadTexts: scrVolatileIntEntry.setStatus('current')
if mibBuilder.loadTexts: scrVolatileIntEntry.setDescription('Entry for table of volatile script integer\n        settings')
scrVolatileIntIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 18, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scrVolatileIntIndex.setStatus('current')
if mibBuilder.loadTexts: scrVolatileIntIndex.setDescription('Index for table of volatile script integer\n        settings')
scrVolatileInt = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 18, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scrVolatileInt.setStatus('current')
if mibBuilder.loadTexts: scrVolatileInt.setDescription('Volatile integer for use in scripts. Use this\n         object to cache frequently-changing integer values\n         or integer values that do not need to persist\n         through reset.  This object corresponds to the\n         scripting.vint[] setting key branch; use those\n         keys in scripts and you can view or change their\n         values with this object.')
scrNonVolatileStringTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 14, 2, 18, 6), )
if mibBuilder.loadTexts: scrNonVolatileStringTable.setStatus('current')
if mibBuilder.loadTexts: scrNonVolatileStringTable.setDescription('Table of non-volatile string settings for use in\n         scripts.')
scrNonVolatileStringEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 14, 2, 18, 6, 1), ).setIndexNames((0, "SITEBOSS-571-STD-MIB", "scrNonVolatileStringIndex"))
if mibBuilder.loadTexts: scrNonVolatileStringEntry.setStatus('current')
if mibBuilder.loadTexts: scrNonVolatileStringEntry.setDescription('Entry for table of non-volatile script string\n        settings')
scrNonVolatileStringIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 18, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scrNonVolatileStringIndex.setStatus('current')
if mibBuilder.loadTexts: scrNonVolatileStringIndex.setDescription('Index for table of non-volatile script string\n        settings')
scrNonVolatileString = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 18, 6, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scrNonVolatileString.setStatus('current')
if mibBuilder.loadTexts: scrNonVolatileString.setDescription('Non-volatile string for use in scripts. Use this\n         object to store values that need to persist\n         through reset.  This object corresponds to the\n         scripting.nvstring[] setting key branch; use those\n         keys in scripts and you can view or change their\n         values with this object.  Note: to store frequently-\n         changing integers, use the scrVolatileString object,\n         otherwise your scripts may cause unnecessary wear of\n         the non-volatile storage medium on the unit.')
scrNonVolatileIntTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 14, 2, 18, 7), )
if mibBuilder.loadTexts: scrNonVolatileIntTable.setStatus('current')
if mibBuilder.loadTexts: scrNonVolatileIntTable.setDescription('Table of non-volatile integer settings for use in\n         scripts.')
scrNonVolatileIntEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 14, 2, 18, 7, 1), ).setIndexNames((0, "SITEBOSS-571-STD-MIB", "scrNonVolatileIntIndex"))
if mibBuilder.loadTexts: scrNonVolatileIntEntry.setStatus('current')
if mibBuilder.loadTexts: scrNonVolatileIntEntry.setDescription('Entry for table of non-volatile script integer\n        settings')
scrNonVolatileIntIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 18, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scrNonVolatileIntIndex.setStatus('current')
if mibBuilder.loadTexts: scrNonVolatileIntIndex.setDescription('Index for table of non-volatile script integer\n        settings')
scrNonVolatileInt = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 14, 2, 18, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scrNonVolatileInt.setStatus('current')
if mibBuilder.loadTexts: scrNonVolatileInt.setDescription('Non-volatile integer for use in scripts. Use this\n         object to store integer values that need to persist\n         through reset.  This object corresponds to the\n         scripting.nvint[] setting key branch; use those\n         keys in scripts and you can view or change their\n         values with this object.  Note: to store frequently-\n         changing integers, use the scrVolatileInt object,\n         otherwise your scripts may cause unnecessary wear of\n         the non-volatile storage medium on the unit.')
siteName = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 3, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteName.setStatus('current')
if mibBuilder.loadTexts: siteName.setDescription('Site Name string; Max 40 characters.')
thisProduct = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 3, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: thisProduct.setStatus('current')
if mibBuilder.loadTexts: thisProduct.setDescription('This is a factory configured string for the\n        product name.')
stockTrapString = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 3, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stockTrapString.setStatus('current')
if mibBuilder.loadTexts: stockTrapString.setDescription('The message defined for the event that triggers a trap.')
trapEventTypeNumber = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapEventTypeNumber.setStatus('current')
if mibBuilder.loadTexts: trapEventTypeNumber.setDescription('The user-defined trap variable for the type of\n        event that happened.  Definitions:\n           4    Scheduled\n           7    Serial Handshaking Low\n           8    Serial Handshaking High\n           10   Contact Closure Active\n           11   Contact Closure Inactive\n           12   Temperature High\n           13   Temperature Very High\n           14   Temperature Low\n           15   Temperature Very Low\n           16   Temperature Return to Normal\n           17   Humidity High\n           18   Humidity Very High\n           19   Humidity Low\n           20   Humidity Very Low\n           21   Humidity Return to Normal\n           26   Analog High\n           27   Analog Very High\n           28   Analog Low\n           29   Analog Very Low\n           30   Analog Normal\n           40   EventSensor Unresponsive\n           41   Custom\n           42   CPE Down\n           44   CPE Normal\n           47   Power Distribution\n           49   Fuel Sensor Disconnect\n           50   Fuel Sensor Disconnect Return to Normal\n           52   AISG Device Alarm\n           53   AISG Device Alarm Return to Normal\n           54   AISG Device Unresponsive\n           55   AISG Device Unresponsive Return to Normal\n           56   Fuel Sensor\n           57   AC Power Monitor Average Voltage Very Low\n           58   AC Power Monitor Average Voltage Low\n           59   AC Power Monitor Average Voltage Return to Normal\n           60   AC Power Monitor Average Voltage High\n           61   AC Power Monitor Average Voltage Very High\n           62   AC Power Monitor Average Current Very Low\n           63   AC Power Monitor Average Current Low\n           64   AC Power Monitor Average Current Return to Normal\n           65   AC Power Monitor Average Current High\n           66   AC Power Monitor Average Current Very High\n           67   AC Power Monitor Frequency Very Low\n           68   AC Power Monitor Frequency Low\n           69   AC Power Monitor Frequency Return to Normal\n           70   AC Power Monitor Frequency High\n           71   AC Power Monitor Frequency Very High\n           72   AC Power Monitor Total Real Power Very Low\n           73   AC Power Monitor Total Real Power Low\n           74   AC Power Monitor Total Real Power Return to Normal\n           75   AC Power Monitor Total Real Power High\n           76   AC Power Monitor Total Real Power Very High\n           77   AC Power Monitor Disconnect\n           78   AC Power Monitor Disconnect Return to Normal\n           79   Load Shedding Started\n           80   Load Shedding Ended\n           81   Fuel Sensor Volume Sudden Change\n           82   Fuel Sensor Volume Slow Change\n           83   CPE Down Reminder\n           84   AC Power Monitor Total Power Factor Very Low\n           85   AC Power Monitor Total Power Factor Low\n           86   AC Power Monitor Total Power Factor Return to Normal\n           100  Contact Closure Active Reminder\n           101  Temperature High Reminder\n           102  Temperature High Very Reminder\n           103  Temperature Low Reminder\n           104  Temperature Very Low Reminder\n           105  Humidity High Reminder\n           106  Humidity Very High Reminder\n           107  Humidity Low Reminder\n           108  Humidity Very Low Reminder\n           109  Analog High Reminder\n           110  Analog Very High Reminder\n           111  Analog Low Reminder\n           112  Analog Very Low Reminder\n           130  Relay Output Active\n           131  Relay Output Inactive\n           132  Power Output On\n           133  Power Output Off\n           164  Reset\n           166  Fuel Sensor Levels Auto Adjust\n           ')
trapEventTypeName = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 3, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapEventTypeName.setStatus('current')
if mibBuilder.loadTexts: trapEventTypeName.setDescription('The user-defined trap variable for the string\n        corresponding to the event type.')
trapIncludedValue = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 3, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapIncludedValue.setStatus('current')
if mibBuilder.loadTexts: trapIncludedValue.setDescription('The user-defined trap variable for the generic\n        included value.')
trapIncludedString = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 3, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapIncludedString.setStatus('current')
if mibBuilder.loadTexts: trapIncludedString.setDescription('The user-defined trap variable for the generic\n        included string.')
trapTypeString = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 3, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapTypeString.setStatus('current')
if mibBuilder.loadTexts: trapTypeString.setDescription('The cause of the trap, added for DL880 compatibility.')
trapEventClassNumber = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 3, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapEventClassNumber.setStatus('current')
if mibBuilder.loadTexts: trapEventClassNumber.setDescription('The user-defined trap variable for the configurable\n        class number associated with the triggering event.')
trapEventClassName = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 3, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapEventClassName.setStatus('current')
if mibBuilder.loadTexts: trapEventClassName.setDescription('The user-defined trap variable for the configurable\n         class name associated with the class number.')
keyInterface = MibScalar((1, 3, 6, 1, 4, 1, 3052, 14, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: keyInterface.setStatus('current')
if mibBuilder.loadTexts: keyInterface.setDescription("This object represents a setting key interface.  When\n        setting this object, the value to set is the 'sk' command\n        you would enter on the command line (without the 'sk').  To\n        get the result of the operation, read this object after you\n        write it.\n\n        For example, to configure EventSensor 1 contact closure 34\n        event actions to be an SNMP InformRequest to host foo, set\n        this object to:\n        'event.sensor[1].cc[34].eventactions=inform(foo)'.  The SNMP\n        response is the result of the operation: if setting that key\n        to that value was a success then the SNMP response will be a\n        success and the response value will be what you had set.  If\n        you subsequently read this object then you will see a\n        message 'OK: ...'.\n\n        If setting that key to that value failed then the SNMP\n        response will be a failure (a badValue response).  If you\n        subsequently read this object then the value returned is the\n        reason that setting that key to that value failed.\n\n        For another example, to read user 3's pass-through access\n        for port 7, set this object to:\n        'sec.user[3].port[7].ptaccess'.  The SNMP response is the\n        result of the operation: if reading that key is a success\n        then the SNMP response will be a success and the response\n        value will be what you had SET (i.e., the opertion of\n        reading a key, which is just the key itself with no '='\n        operator, and this is not the key value you want to read).\n        If you subsequently read this object then the value\n        returned is the value of the key you want to read.\n\n        If reading that key failed (e.g., if the key is invalid)\n        then the SNMP response to your SNMP set operation (the\n        value you set being the invalid key to read) will be a\n        failure (a badValue response).  If you subsequently read\n        this object then the value returned is the reason that\n        reading that key failed (i.e., 'invalid key').")
s571StockContactClosureTrap = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 110)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "stockTrapString"), ("SITEBOSS-571-STD-MIB", "trapTypeString"))
if mibBuilder.loadTexts: s571StockContactClosureTrap.setStatus('current')
if mibBuilder.loadTexts: s571StockContactClosureTrap.setDescription('A stock contact closure trap is issued when a contact closure\n        event happens.')
s571StockTempTrap = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 120)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "stockTrapString"), ("SITEBOSS-571-STD-MIB", "trapTypeString"))
if mibBuilder.loadTexts: s571StockTempTrap.setStatus('current')
if mibBuilder.loadTexts: s571StockTempTrap.setDescription('A stock temperature trap is issued when a temperature event\n        happens.')
s571StockHumidityTrap = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 130)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "stockTrapString"), ("SITEBOSS-571-STD-MIB", "trapTypeString"))
if mibBuilder.loadTexts: s571StockHumidityTrap.setStatus('current')
if mibBuilder.loadTexts: s571StockHumidityTrap.setDescription('A stock humidity trap is issued when a humidity event\n        happens.')
s571StockAnalogTrap = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 140)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "stockTrapString"), ("SITEBOSS-571-STD-MIB", "trapTypeString"))
if mibBuilder.loadTexts: s571StockAnalogTrap.setStatus('current')
if mibBuilder.loadTexts: s571StockAnalogTrap.setDescription('A stock analog trap is issued when an analog sensor event\n        happens.')
s571StockOutputTrap = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 150)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "stockTrapString"), ("SITEBOSS-571-STD-MIB", "trapTypeString"))
if mibBuilder.loadTexts: s571StockOutputTrap.setStatus('current')
if mibBuilder.loadTexts: s571StockOutputTrap.setDescription('A stock output trap is issued when an output event\n        happens.  That is, depending on the configuration,\n        when an output changes state for any reason, this\n        trap will be sent.')
s571StockPDCurrentTrap = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 180)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "stockTrapString"), ("SITEBOSS-571-STD-MIB", "trapTypeString"))
if mibBuilder.loadTexts: s571StockPDCurrentTrap.setStatus('current')
if mibBuilder.loadTexts: s571StockPDCurrentTrap.setDescription('A stock analog trap is issued when a power distribution\n        current event happens.')
s571StockPDVoltageTrap = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 190)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "stockTrapString"), ("SITEBOSS-571-STD-MIB", "trapTypeString"))
if mibBuilder.loadTexts: s571StockPDVoltageTrap.setStatus('current')
if mibBuilder.loadTexts: s571StockPDVoltageTrap.setDescription('A stock analog trap is issued when a power distribution\n        voltage event happens.')
s571StockPDFuseTrap = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 210)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "stockTrapString"), ("SITEBOSS-571-STD-MIB", "trapTypeString"))
if mibBuilder.loadTexts: s571StockPDFuseTrap.setStatus('current')
if mibBuilder.loadTexts: s571StockPDFuseTrap.setDescription('A stock analog trap is issued when a power distribution\n        fuse event happens.')
s571StockDataAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 503)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "stockTrapString"), ("SITEBOSS-571-STD-MIB", "trapTypeString"))
if mibBuilder.loadTexts: s571StockDataAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: s571StockDataAlarmTrap.setDescription('The stock data alarm trap is issued when a\n        data alarm happens.')
s571StockNoDataAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 505)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "stockTrapString"), ("SITEBOSS-571-STD-MIB", "trapTypeString"))
if mibBuilder.loadTexts: s571StockNoDataAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: s571StockNoDataAlarmTrap.setDescription('The stock no-data alarm trap is issued when\n        the unit has received no data for a configured\n        interval within a configured schedule.')
s571StockSchedTrap = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 506)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "stockTrapString"), ("SITEBOSS-571-STD-MIB", "trapTypeString"))
if mibBuilder.loadTexts: s571StockSchedTrap.setStatus('current')
if mibBuilder.loadTexts: s571StockSchedTrap.setDescription('The stock scheduled alarm trap is issued\n        when the current time reaches the scheduled\n        alarm time.')
s571StockImmediateTrap = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 507)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "stockTrapString"), ("SITEBOSS-571-STD-MIB", "trapTypeString"))
if mibBuilder.loadTexts: s571StockImmediateTrap.setStatus('current')
if mibBuilder.loadTexts: s571StockImmediateTrap.setDescription('The stock immediate alarm trap is issued\n        when the user enters the DOTRAP command.')
s571StockCTSTrap = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 510)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "stockTrapString"), ("SITEBOSS-571-STD-MIB", "trapTypeString"))
if mibBuilder.loadTexts: s571StockCTSTrap.setStatus('current')
if mibBuilder.loadTexts: s571StockCTSTrap.setDescription('A stock CTS trap is issued when an RS-232 CTS event\n        happens.')
s571CPEDownTrap = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 511)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "stockTrapString"), ("SITEBOSS-571-STD-MIB", "trapTypeString"))
if mibBuilder.loadTexts: s571CPEDownTrap.setStatus('current')
if mibBuilder.loadTexts: s571CPEDownTrap.setDescription('A stock CPE Down trap is issued when a CPE Down event\n        happens.')
s571FuelSensorDisconnectTrap = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 515)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "stockTrapString"), ("SITEBOSS-571-STD-MIB", "trapTypeString"))
if mibBuilder.loadTexts: s571FuelSensorDisconnectTrap.setStatus('current')
if mibBuilder.loadTexts: s571FuelSensorDisconnectTrap.setDescription('A stock Fuel Sensor Disconnect trap is issued when a Fuel\n        Sensor Disconnect or Connect (Return to Normal) event happens.')
s571FuelSensorVolumeTrap = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 519)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "stockTrapString"), ("SITEBOSS-571-STD-MIB", "trapTypeString"))
if mibBuilder.loadTexts: s571FuelSensorVolumeTrap.setStatus('current')
if mibBuilder.loadTexts: s571FuelSensorVolumeTrap.setDescription('A stock Fuel Sensor Volume trap is issued when a Fuel\n        Sensor Volume event happens')
s571ACPowerMonitorAvgVoltageTrap = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 520)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "stockTrapString"), ("SITEBOSS-571-STD-MIB", "trapTypeString"))
if mibBuilder.loadTexts: s571ACPowerMonitorAvgVoltageTrap.setStatus('current')
if mibBuilder.loadTexts: s571ACPowerMonitorAvgVoltageTrap.setDescription('A stock AC power monitor average voltage trap is issued when an\n        AC power monitor average voltage event happens.')
s571ACPowerMonitorAvgCurrentTrap = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 521)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "stockTrapString"), ("SITEBOSS-571-STD-MIB", "trapTypeString"))
if mibBuilder.loadTexts: s571ACPowerMonitorAvgCurrentTrap.setStatus('current')
if mibBuilder.loadTexts: s571ACPowerMonitorAvgCurrentTrap.setDescription('A stock AC power monitor average current trap is issued when an\n        AC power monitor average current event happens.')
s571ACPowerMonitorFrequencyTrap = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 522)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "stockTrapString"), ("SITEBOSS-571-STD-MIB", "trapTypeString"))
if mibBuilder.loadTexts: s571ACPowerMonitorFrequencyTrap.setStatus('current')
if mibBuilder.loadTexts: s571ACPowerMonitorFrequencyTrap.setDescription('A stock AC power monitor frequency trap is issued when an\n        AC power monitor frequency event happens.')
s571ACPowerMonitorTRPTrap = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 523)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "stockTrapString"), ("SITEBOSS-571-STD-MIB", "trapTypeString"))
if mibBuilder.loadTexts: s571ACPowerMonitorTRPTrap.setStatus('current')
if mibBuilder.loadTexts: s571ACPowerMonitorTRPTrap.setDescription('A stock AC power monitor TRP (total real power) trap is issued\n        when an AC power monitor TRP event happens.')
s571ACPowerMonitorDisconnectTrap = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 524)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "stockTrapString"), ("SITEBOSS-571-STD-MIB", "trapTypeString"))
if mibBuilder.loadTexts: s571ACPowerMonitorDisconnectTrap.setStatus('current')
if mibBuilder.loadTexts: s571ACPowerMonitorDisconnectTrap.setDescription('A stock AC power monitor disconnect trap is issued\n        when an AC power monitor disconnect event happens.')
s571StockLoadSheddingTrap = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 525)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "stockTrapString"), ("SITEBOSS-571-STD-MIB", "trapTypeString"))
if mibBuilder.loadTexts: s571StockLoadSheddingTrap.setStatus('current')
if mibBuilder.loadTexts: s571StockLoadSheddingTrap.setDescription('A stock Load Shedding trap is issued when a Load Shedding event\n        happens.')
s571StockScriptTrap = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 526)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "stockTrapString"), ("SITEBOSS-571-STD-MIB", "trapTypeString"))
if mibBuilder.loadTexts: s571StockScriptTrap.setStatus('current')
if mibBuilder.loadTexts: s571StockScriptTrap.setDescription('A stock script trap is issued when a script triggers\n        an event via a_lib.PostEvent() called with no trap\n        number (or this trap number) specified.')
s571FuelSensorVolumeSuddenChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 527)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "stockTrapString"), ("SITEBOSS-571-STD-MIB", "trapTypeString"))
if mibBuilder.loadTexts: s571FuelSensorVolumeSuddenChangeTrap.setStatus('current')
if mibBuilder.loadTexts: s571FuelSensorVolumeSuddenChangeTrap.setDescription('A stock Fuel Sensor Volume Sudden Change trap is issued\n        when a Fuel Sensor Volume Sudden Change event happens')
s571FuelSensorVolumeSlowChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 528)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "stockTrapString"), ("SITEBOSS-571-STD-MIB", "trapTypeString"))
if mibBuilder.loadTexts: s571FuelSensorVolumeSlowChangeTrap.setStatus('current')
if mibBuilder.loadTexts: s571FuelSensorVolumeSlowChangeTrap.setDescription('A stock Fuel Sensor Volume Slow Change trap is issued\n        when a Fuel Sensor Volume Slow Change event happens')
s571ACTotalPowerFactorTrap = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 540)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "stockTrapString"), ("SITEBOSS-571-STD-MIB", "trapTypeString"))
if mibBuilder.loadTexts: s571ACTotalPowerFactorTrap.setStatus('current')
if mibBuilder.loadTexts: s571ACTotalPowerFactorTrap.setDescription('A stock AC power monitor total power factor trap is issued\n        when an AC power monitor total power factor event happens.')
s571ResetTrap = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 543)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "stockTrapString"), ("SITEBOSS-571-STD-MIB", "trapTypeString"))
if mibBuilder.loadTexts: s571ResetTrap.setStatus('current')
if mibBuilder.loadTexts: s571ResetTrap.setDescription('A stock reset trap is issued when a reset event happens.')
s571UserTrap1000 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1000)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1000.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1000.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1000.')
s571UserTrap1001 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1001)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1001.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1001.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1001.')
s571UserTrap1002 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1002)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1002.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1002.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1002.')
s571UserTrap1003 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1003)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1003.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1003.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1003.')
s571UserTrap1004 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1004)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1004.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1004.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1004.')
s571UserTrap1005 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1005)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1005.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1005.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1005.')
s571UserTrap1006 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1006)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1006.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1006.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1006.')
s571UserTrap1007 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1007)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1007.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1007.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1007.')
s571UserTrap1008 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1008)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1008.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1008.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1008.')
s571UserTrap1009 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1009)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1009.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1009.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1009.')
s571UserTrap1010 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1010)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1010.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1010.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1010.')
s571UserTrap1011 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1011)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1011.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1011.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1011.')
s571UserTrap1012 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1012)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1012.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1012.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1012.')
s571UserTrap1013 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1013)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1013.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1013.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1013.')
s571UserTrap1014 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1014)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1014.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1014.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1014.')
s571UserTrap1015 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1015)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1015.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1015.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1015.')
s571UserTrap1016 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1016)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1016.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1016.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1016.')
s571UserTrap1017 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1017)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1017.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1017.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1017.')
s571UserTrap1018 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1018)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1018.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1018.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1018.')
s571UserTrap1019 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1019)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1019.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1019.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1019.')
s571UserTrap1020 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1020)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1020.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1020.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1020.')
s571UserTrap1021 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1021)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1021.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1021.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1021.')
s571UserTrap1022 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1022)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1022.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1022.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1022.')
s571UserTrap1023 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1023)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1023.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1023.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1023.')
s571UserTrap1024 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1024)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1024.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1024.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1024.')
s571UserTrap1025 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1025)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1025.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1025.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1025.')
s571UserTrap1026 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1026)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1026.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1026.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1026.')
s571UserTrap1027 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1027)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1027.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1027.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1027.')
s571UserTrap1028 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1028)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1028.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1028.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1028.')
s571UserTrap1029 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1029)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1029.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1029.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1029.')
s571UserTrap1030 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1030)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1030.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1030.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1030.')
s571UserTrap1031 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1031)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1031.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1031.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1031.')
s571UserTrap1032 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1032)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1032.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1032.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1032.')
s571UserTrap1033 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1033)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1033.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1033.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1033.')
s571UserTrap1034 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1034)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1034.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1034.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1034.')
s571UserTrap1035 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1035)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1035.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1035.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1035.')
s571UserTrap1036 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1036)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1036.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1036.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1036.')
s571UserTrap1037 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1037)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1037.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1037.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1037.')
s571UserTrap1038 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1038)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1038.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1038.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1038.')
s571UserTrap1039 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1039)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1039.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1039.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1039.')
s571UserTrap1040 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1040)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1040.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1040.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1040.')
s571UserTrap1041 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1041)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1041.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1041.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1041.')
s571UserTrap1042 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1042)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1042.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1042.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1042.')
s571UserTrap1043 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1043)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1043.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1043.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1043.')
s571UserTrap1044 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1044)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1044.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1044.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1044.')
s571UserTrap1045 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1045)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1045.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1045.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1045.')
s571UserTrap1046 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1046)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1046.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1046.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1046.')
s571UserTrap1047 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1047)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1047.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1047.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1047.')
s571UserTrap1048 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1048)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1048.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1048.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1048.')
s571UserTrap1049 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1049)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1049.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1049.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1049.')
s571UserTrap1050 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1050)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1050.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1050.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1050.')
s571UserTrap1051 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1051)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1051.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1051.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1051.')
s571UserTrap1052 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1052)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1052.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1052.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1052.')
s571UserTrap1053 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1053)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1053.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1053.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1053.')
s571UserTrap1054 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1054)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1054.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1054.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1054.')
s571UserTrap1055 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1055)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1055.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1055.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1055.')
s571UserTrap1056 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1056)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1056.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1056.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1056.')
s571UserTrap1057 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1057)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1057.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1057.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1057.')
s571UserTrap1058 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1058)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1058.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1058.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1058.')
s571UserTrap1059 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1059)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1059.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1059.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1059.')
s571UserTrap1060 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1060)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1060.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1060.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1060.')
s571UserTrap1061 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1061)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1061.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1061.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1061.')
s571UserTrap1062 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1062)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1062.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1062.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1062.')
s571UserTrap1063 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1063)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1063.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1063.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1063.')
s571UserTrap1064 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1064)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1064.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1064.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1064.')
s571UserTrap1065 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1065)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1065.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1065.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1065.')
s571UserTrap1066 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1066)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1066.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1066.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1066.')
s571UserTrap1067 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1067)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1067.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1067.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1067.')
s571UserTrap1068 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1068)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1068.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1068.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1068.')
s571UserTrap1069 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1069)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1069.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1069.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1069.')
s571UserTrap1070 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1070)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1070.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1070.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1070.')
s571UserTrap1071 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1071)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1071.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1071.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1071.')
s571UserTrap1072 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1072)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1072.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1072.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1072.')
s571UserTrap1073 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1073)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1073.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1073.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1073.')
s571UserTrap1074 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1074)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1074.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1074.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1074.')
s571UserTrap1075 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1075)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1075.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1075.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1075.')
s571UserTrap1076 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1076)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1076.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1076.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1076.')
s571UserTrap1077 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1077)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1077.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1077.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1077.')
s571UserTrap1078 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1078)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1078.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1078.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1078.')
s571UserTrap1079 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1079)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1079.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1079.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1079.')
s571UserTrap1080 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1080)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1080.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1080.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1080.')
s571UserTrap1081 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1081)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1081.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1081.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1081.')
s571UserTrap1082 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1082)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1082.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1082.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1082.')
s571UserTrap1083 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1083)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1083.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1083.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1083.')
s571UserTrap1084 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1084)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1084.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1084.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1084.')
s571UserTrap1085 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1085)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1085.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1085.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1085.')
s571UserTrap1086 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1086)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1086.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1086.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1086.')
s571UserTrap1087 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1087)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1087.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1087.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1087.')
s571UserTrap1088 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1088)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1088.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1088.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1088.')
s571UserTrap1089 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1089)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1089.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1089.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1089.')
s571UserTrap1090 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1090)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1090.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1090.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1090.')
s571UserTrap1091 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1091)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1091.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1091.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1091.')
s571UserTrap1092 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1092)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1092.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1092.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1092.')
s571UserTrap1093 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1093)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1093.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1093.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1093.')
s571UserTrap1094 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1094)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1094.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1094.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1094.')
s571UserTrap1095 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1095)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1095.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1095.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1095.')
s571UserTrap1096 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1096)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1096.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1096.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1096.')
s571UserTrap1097 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1097)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1097.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1097.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1097.')
s571UserTrap1098 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1098)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1098.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1098.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1098.')
s571UserTrap1099 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1099)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1099.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1099.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1099.')
s571UserTrap1100 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1100)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1100.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1100.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1100.')
s571UserTrap1101 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1101)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1101.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1101.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1101.')
s571UserTrap1102 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1102)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1102.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1102.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1102.')
s571UserTrap1103 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1103)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1103.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1103.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1103.')
s571UserTrap1104 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1104)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1104.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1104.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1104.')
s571UserTrap1105 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1105)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1105.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1105.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1105.')
s571UserTrap1106 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1106)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1106.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1106.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1106.')
s571UserTrap1107 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1107)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1107.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1107.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1107.')
s571UserTrap1108 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1108)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1108.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1108.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1108.')
s571UserTrap1109 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1109)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1109.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1109.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1109.')
s571UserTrap1110 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1110)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1110.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1110.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1110.')
s571UserTrap1111 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1111)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1111.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1111.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1111.')
s571UserTrap1112 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1112)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1112.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1112.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1112.')
s571UserTrap1113 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1113)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1113.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1113.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1113.')
s571UserTrap1114 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1114)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1114.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1114.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1114.')
s571UserTrap1115 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1115)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1115.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1115.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1115.')
s571UserTrap1116 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1116)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1116.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1116.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1116.')
s571UserTrap1117 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1117)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1117.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1117.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1117.')
s571UserTrap1118 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1118)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1118.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1118.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1118.')
s571UserTrap1119 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1119)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1119.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1119.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1119.')
s571UserTrap1120 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1120)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1120.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1120.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1120.')
s571UserTrap1121 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1121)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1121.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1121.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1121.')
s571UserTrap1122 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1122)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1122.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1122.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1122.')
s571UserTrap1123 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1123)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1123.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1123.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1123.')
s571UserTrap1124 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1124)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1124.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1124.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1124.')
s571UserTrap1125 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1125)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1125.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1125.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1125.')
s571UserTrap1126 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1126)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1126.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1126.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1126.')
s571UserTrap1127 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1127)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1127.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1127.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1127.')
s571UserTrap1128 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1128)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1128.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1128.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1128.')
s571UserTrap1129 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1129)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1129.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1129.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1129.')
s571UserTrap1130 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1130)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1130.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1130.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1130.')
s571UserTrap1131 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1131)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1131.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1131.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1131.')
s571UserTrap1132 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1132)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1132.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1132.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1132.')
s571UserTrap1133 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1133)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1133.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1133.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1133.')
s571UserTrap1134 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1134)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1134.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1134.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1134.')
s571UserTrap1135 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1135)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1135.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1135.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1135.')
s571UserTrap1136 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1136)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1136.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1136.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1136.')
s571UserTrap1137 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1137)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1137.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1137.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1137.')
s571UserTrap1138 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1138)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1138.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1138.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1138.')
s571UserTrap1139 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1139)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1139.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1139.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1139.')
s571UserTrap1140 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1140)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1140.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1140.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1140.')
s571UserTrap1141 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1141)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1141.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1141.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1141.')
s571UserTrap1142 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1142)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1142.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1142.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1142.')
s571UserTrap1143 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1143)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1143.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1143.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1143.')
s571UserTrap1144 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1144)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1144.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1144.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1144.')
s571UserTrap1145 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1145)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1145.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1145.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1145.')
s571UserTrap1146 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1146)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1146.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1146.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1146.')
s571UserTrap1147 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1147)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1147.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1147.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1147.')
s571UserTrap1148 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1148)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1148.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1148.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1148.')
s571UserTrap1149 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1149)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1149.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1149.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1149.')
s571UserTrap1150 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1150)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1150.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1150.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1150.')
s571UserTrap1151 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1151)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1151.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1151.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1151.')
s571UserTrap1152 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1152)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1152.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1152.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1152.')
s571UserTrap1153 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1153)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1153.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1153.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1153.')
s571UserTrap1154 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1154)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1154.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1154.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1154.')
s571UserTrap1155 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1155)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1155.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1155.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1155.')
s571UserTrap1156 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1156)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1156.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1156.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1156.')
s571UserTrap1157 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1157)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1157.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1157.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1157.')
s571UserTrap1158 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1158)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1158.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1158.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1158.')
s571UserTrap1159 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1159)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1159.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1159.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1159.')
s571UserTrap1160 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1160)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1160.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1160.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1160.')
s571UserTrap1161 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1161)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1161.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1161.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1161.')
s571UserTrap1162 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1162)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1162.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1162.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1162.')
s571UserTrap1163 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1163)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1163.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1163.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1163.')
s571UserTrap1164 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1164)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1164.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1164.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1164.')
s571UserTrap1165 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1165)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1165.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1165.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1165.')
s571UserTrap1166 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1166)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1166.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1166.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1166.')
s571UserTrap1167 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1167)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1167.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1167.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1167.')
s571UserTrap1168 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1168)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1168.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1168.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1168.')
s571UserTrap1169 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1169)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1169.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1169.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1169.')
s571UserTrap1170 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1170)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1170.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1170.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1170.')
s571UserTrap1171 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1171)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1171.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1171.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1171.')
s571UserTrap1172 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1172)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1172.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1172.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1172.')
s571UserTrap1173 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1173)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1173.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1173.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1173.')
s571UserTrap1174 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1174)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1174.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1174.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1174.')
s571UserTrap1175 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1175)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1175.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1175.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1175.')
s571UserTrap1176 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1176)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1176.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1176.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1176.')
s571UserTrap1177 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1177)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1177.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1177.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1177.')
s571UserTrap1178 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1178)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1178.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1178.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1178.')
s571UserTrap1179 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1179)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1179.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1179.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1179.')
s571UserTrap1180 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1180)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1180.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1180.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1180.')
s571UserTrap1181 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1181)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1181.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1181.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1181.')
s571UserTrap1182 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1182)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1182.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1182.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1182.')
s571UserTrap1183 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1183)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1183.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1183.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1183.')
s571UserTrap1184 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1184)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1184.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1184.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1184.')
s571UserTrap1185 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1185)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1185.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1185.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1185.')
s571UserTrap1186 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1186)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1186.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1186.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1186.')
s571UserTrap1187 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1187)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1187.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1187.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1187.')
s571UserTrap1188 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1188)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1188.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1188.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1188.')
s571UserTrap1189 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1189)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1189.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1189.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1189.')
s571UserTrap1190 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1190)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1190.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1190.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1190.')
s571UserTrap1191 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1191)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1191.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1191.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1191.')
s571UserTrap1192 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1192)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1192.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1192.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1192.')
s571UserTrap1193 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1193)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1193.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1193.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1193.')
s571UserTrap1194 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1194)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1194.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1194.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1194.')
s571UserTrap1195 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1195)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1195.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1195.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1195.')
s571UserTrap1196 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1196)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1196.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1196.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1196.')
s571UserTrap1197 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1197)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1197.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1197.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1197.')
s571UserTrap1198 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1198)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1198.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1198.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1198.')
s571UserTrap1199 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 14, 1199)).setObjects(("SITEBOSS-571-STD-MIB", "siteName"), ("SITEBOSS-571-STD-MIB", "esIndex"), ("SITEBOSS-571-STD-MIB", "esName"), ("SITEBOSS-571-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-571-STD-MIB", "trapEventTypeName"), ("SITEBOSS-571-STD-MIB", "esIndexPoint"), ("SITEBOSS-571-STD-MIB", "esPointName"), ("SITEBOSS-571-STD-MIB", "esID"), ("SITEBOSS-571-STD-MIB", "clock"), ("SITEBOSS-571-STD-MIB", "trapIncludedValue"), ("SITEBOSS-571-STD-MIB", "trapIncludedString"), ("SITEBOSS-571-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-571-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s571UserTrap1199.setStatus('current')
if mibBuilder.loadTexts: s571UserTrap1199.setDescription('This user-defined trap is issued when an event happens that causes a\n        trap with specific trap type 1199.')
mibBuilder.exportSymbols("SITEBOSS-571-STD-MIB", acpmsRcPPhaseAValueStr=acpmsRcPPhaseAValueStr, modemCLIDNumberTable=modemCLIDNumberTable, evNoData2Exclusions=evNoData2Exclusions, espcAIHighValue=espcAIHighValue, s571UserTrap1063=s571UserTrap1063, aisgsALDSwVersion=aisgsALDSwVersion, wmsModemType=wmsModemType, aisgsAutoConfig=aisgsAutoConfig, espcAILowTrapnum=espcAILowTrapnum, modemCLIDNumberEntry=modemCLIDNumberEntry, sysAssetMgmt=sysAssetMgmt, eth1VLAN3=eth1VLAN3, sysLoc=sysLoc, evNoData2Sched1End=evNoData2Sched1End, pdMain=pdMain, acpmFreqTable=acpmFreqTable, pdnMainPowerValue=pdnMainPowerValue, fsVolumeVHighValue=fsVolumeVHighValue, secUserTable=secUserTable, acpmAvgCurrentNormalTrapNum=acpmAvgCurrentNormalTrapNum, evShskLowEnable=evShskLowEnable, esPointConfigCCEntry=esPointConfigCCEntry, eth1VLAN5Router=eth1VLAN5Router, s571UserTrap1157=s571UserTrap1157, ftpPushAccount=ftpPushAccount, acpmAvgCurrentVLowClass=acpmAvgCurrentVLowClass, s571StockImmediateTrap=s571StockImmediateTrap, espcHumidEnable=espcHumidEnable, espcHumidHighClass=espcHumidHighClass, acpmAvgVoltageNormalClass=acpmAvgVoltageNormalClass, esTable=esTable, evResetMessage=evResetMessage, wirelessConnectivity=wirelessConnectivity, fsVolumeDeadband=fsVolumeDeadband, portConfigEtxToCRLF=portConfigEtxToCRLF, eth2Address=eth2Address, ftpPush=ftpPush, cpeName=cpeName, evShskLowMessage=evShskLowMessage, s571UserTrap1039=s571UserTrap1039, portConfigStripPtInputLfs=portConfigStripPtInputLfs, sysTimeGMTOffset=sysTimeGMTOffset, evSched2Tuesday=evSched2Tuesday, s571UserTrap1125=s571UserTrap1125, s571UserTrap1166=s571UserTrap1166, s571UserTrap1028=s571UserTrap1028, fsGenRawValueTop=fsGenRawValueTop, espcOutputIndexPoint=espcOutputIndexPoint, evClassNameTable=evClassNameTable, cpeKeepalive=cpeKeepalive, evdMode=evdMode, eth2VLAN4Priority=eth2VLAN4Priority, modemCLIDNumberIndex=modemCLIDNumberIndex, wmsPhnum=wmsPhnum, s571UserTrap1026=s571UserTrap1026, scrName=scrName, pdnMainVoltageVHighVoltage=pdnMainVoltageVHighVoltage, espcOutputAliasValue=espcOutputAliasValue, sysTimeStamp=sysTimeStamp, modemGoto=modemGoto, trapAuthFailEnable=trapAuthFailEnable, espcOutputAliasColor=espcOutputAliasColor, auditLogEnable=auditLogEnable, fsCustomTankIndexDatum=fsCustomTankIndexDatum, snmpPRequestDescription=snmpPRequestDescription, pdOutputCurrentIndex=pdOutputCurrentIndex, portConfigMLREndField2Text=portConfigMLREndField2Text, acpmsTAPAvgStr=acpmsTAPAvgStr, evNoData2TrapNum=evNoData2TrapNum, eth1VLAN6Address=eth1VLAN6Address, esCCCombinedStatusBlock3=esCCCombinedStatusBlock3, espcTempVLowActions=espcTempVLowActions, eth2VLAN4SubnetMask=eth2VLAN4SubnetMask, espcCCIndexES=espcCCIndexES, auditLogMaxSize=auditLogMaxSize, s571UserTrap1092=s571UserTrap1092, cpeInfoNumGoodResp=cpeInfoNumGoodResp, evSched1Enable=evSched1Enable, eth2IPv6Mode=eth2IPv6Mode, s571UserTrap1099=s571UserTrap1099, cpeInfoPercentBad=cpeInfoPercentBad, s571UserTrap1064=s571UserTrap1064, acpmsRPPhaseCValueStr=acpmsRPPhaseCValueStr, acpmTPFEntry=acpmTPFEntry, espcAILowClass=espcAILowClass, evNoData1PortEnable=evNoData1PortEnable, s571UserTrap1167=s571UserTrap1167, s571UserTrap1001=s571UserTrap1001, espcTempDeadband=espcTempDeadband, espcHumidVHighHumid=espcHumidVHighHumid, modemClid=modemClid, ftpPushPushFileTable=ftpPushPushFileTable, acpmAvgVoltageNormalTrapNum=acpmAvgVoltageNormalTrapNum, espcOutputInactiveColor=espcOutputInactiveColor, eth1VLAN2ID=eth1VLAN2ID, pdSystemPower=pdSystemPower, acpmStatusTable=acpmStatusTable, eth2VLAN=eth2VLAN, esNumberAirflowSensors=esNumberAirflowSensors, pdnDeviceCurrentValue=pdnDeviceCurrentValue, actionCallNumberTable=actionCallNumberTable, portConfigBufferPT=portConfigBufferPT, s571UserTrap1193=s571UserTrap1193, acpmsPFPhaseAValueStr=acpmsPFPhaseAValueStr, espcHumidVLowTrapnum=espcHumidVLowTrapnum, modemCLIDNumber=modemCLIDNumber, trapInclude=trapInclude, pdOutputFuseTable=pdOutputFuseTable, s571UserTrap1014=s571UserTrap1014, evdEnable=evdEnable, acpmGenDevice=acpmGenDevice, eth2VLAN1Router=eth2VLAN1Router, portConfigTable=portConfigTable, espcCCEventTrapnum=espcCCEventTrapnum, sysTimeNetEnable=sysTimeNetEnable, eth2VLAN4=eth2VLAN4, scrRunScheduled=scrRunScheduled, action=action, s571UserTrap1018=s571UserTrap1018, eth2VLAN6Address=eth2VLAN6Address, acpmAvgCurrentSysrepEnable=acpmAvgCurrentSysrepEnable, espcAIVlowValue=espcAIVlowValue, acpmsAvgCurrentInEventState=acpmsAvgCurrentInEventState, wmsNetName=wmsNetName, snmpPBufferAllPeriod=snmpPBufferAllPeriod, evNoData2=evNoData2, espcAILowActions=espcAILowActions, s571UserTrap1153=s571UserTrap1153, s571UserTrap1145=s571UserTrap1145, acpmAvgVoltageEnable=acpmAvgVoltageEnable, pdNextGen=pdNextGen, fuelSensorDisconnectTable=fuelSensorDisconnectTable, espcTempLowTemp=espcTempLowTemp, espcOutputActiveAlias=espcOutputActiveAlias, acpmAvgVoltageEntry=acpmAvgVoltageEntry, s571StockPDFuseTrap=s571StockPDFuseTrap, sysFileTransfer=sysFileTransfer, eth1VLAN5Address=eth1VLAN5Address, evCore=evCore, fsTankHeight=fsTankHeight, secUserPTEscapeTo=secUserPTEscapeTo, acpmTRPIndex=acpmTRPIndex, secUserPPPType=secUserPPPType, acpmsTRPValueStr=acpmsTRPValueStr, acPowerMonitorStatus=acPowerMonitorStatus, eth1VLAN4Address=eth1VLAN4Address, espcTempNormalActions=espcTempNormalActions, modemCallAttempts=modemCallAttempts, pdOutputCurrentLowCurrent=pdOutputCurrentLowCurrent, eth2VLAN1Address=eth2VLAN1Address, s571UserTrap1121=s571UserTrap1121, cpeInfoPercentLoss=cpeInfoPercentLoss, esAirflowReportingMode=esAirflowReportingMode, actionHostTable=actionHostTable, wmsStatus=wmsStatus, pdMainCurrentValueStr=pdMainCurrentValueStr, s571UserTrap1199=s571UserTrap1199, sysFileTransferUsername=sysFileTransferUsername, espcHumidDeadband=espcHumidDeadband, evNoSensorClass=evNoSensorClass, deStatusThreshold=deStatusThreshold, espcOutputEnable=espcOutputEnable, wirelessDRE=wirelessDRE, aisgsALDMinTilt=aisgsALDMinTilt, scRightsGroup=scRightsGroup, portConfigMaskEnable=portConfigMaskEnable, s571UserTrap1040=s571UserTrap1040, evdThreshold=evdThreshold, eth1IPv6=eth1IPv6, scrRunAlways=scrRunAlways, eth2IPv6Static=eth2IPv6Static, esPointInEventState=esPointInEventState, fsGenSysrepPackage=fsGenSysrepPackage, s571ResetTrap=s571ResetTrap, scTelnetPTLoginRequired=scTelnetPTLoginRequired, esNumberTempSensors=esNumberTempSensors, evdTrapNum=evdTrapNum, evdFieldName=evdFieldName, eth1SubnetMask=eth1SubnetMask, acpmsTPFMaxStr=acpmsTPFMaxStr, s571UserTrap1137=s571UserTrap1137, scTelnetLoginRequired=scTelnetLoginRequired, esCCCombinedStatusBlock7=esCCCombinedStatusBlock7, s571UserTrap1184=s571UserTrap1184, acpmFreqSysrepEnable=acpmFreqSysrepEnable, aisgsALDStatus=aisgsALDStatus, acpmsAvgVoltageInEventState=acpmsAvgVoltageInEventState, sysPT=sysPT, eth1VLAN6ID=eth1VLAN6ID, acpmTPFSysrepThreshold=acpmTPFSysrepThreshold, esAnalogCombinedStatusBlock6=esAnalogCombinedStatusBlock6, acpmsTRcPValueStr=acpmsTRcPValueStr, s571UserTrap1160=s571UserTrap1160, actionSchedWeekdaysOnly=actionSchedWeekdaysOnly, eth1Address=eth1Address, fsVolumeEnable=fsVolumeEnable, sysCRDBFileIDIndex=sysCRDBFileIDIndex, portConfigStripPtOutputLfs=portConfigStripPtOutputLfs, acpmsCurrentPhaseBValueStr=acpmsCurrentPhaseBValueStr, fsVolumeLowClass=fsVolumeLowClass, acpmGenSysrepType=acpmGenSysrepType, espcOutputIndexES=espcOutputIndexES, espcCCNormalClass=espcCCNormalClass, evNoData2PortEnableIndex=evNoData2PortEnableIndex, snmpPRequestResultValue=snmpPRequestResultValue, sysFileTransferPassword=sysFileTransferPassword, sysCRDBPercentFull=sysCRDBPercentFull, espcHumidNormalTrapnum=espcHumidNormalTrapnum, pppDialNumber=pppDialNumber, fsVolumeVHighClass=fsVolumeVHighClass, pdMainCurrentVHighCurrent=pdMainCurrentVHighCurrent, cpeKeepaliveTicks=cpeKeepaliveTicks, sysCharMask=sysCharMask, scrArguments=scrArguments, acpmsAvgCurrentMaxStr=acpmsAvgCurrentMaxStr, scShowPasswordPrompt=scShowPasswordPrompt, s571UserTrap1168=s571UserTrap1168, sysUpdateStatus=sysUpdateStatus, acpmTRPVLowClass=acpmTRPVLowClass, actionHostEntry=actionHostEntry, trap=trap, evShskHighEnable=evShskHighEnable, portConfigMLRLineCount=portConfigMLRLineCount, s571UserTrap1135=s571UserTrap1135, evShskHighClass=evShskHighClass, acpmAvgCurrentLowActions=acpmAvgCurrentLowActions, rtsAlarmsMode=rtsAlarmsMode, esPointValueStr=esPointValueStr, pdnConfig=pdnConfig, fsStatusName=fsStatusName, pdMainPower=pdMainPower, eth2VLAN2SubnetMask=eth2VLAN2SubnetMask, s571UserTrap1144=s571UserTrap1144, s571UserTrap1037=s571UserTrap1037, wirelessConnEnable=wirelessConnEnable, evLogStoreAlarm=evLogStoreAlarm, esPointConfigHumidTable=esPointConfigHumidTable, pdnMainPowerValueStr=pdnMainPowerValueStr, wmsBaseCoeff=wmsBaseCoeff, aisgsALDDescription=aisgsALDDescription, s571StockCTSTrap=s571StockCTSTrap, acpmDisconnectNormalClass=acpmDisconnectNormalClass, s571UserTrap1155=s571UserTrap1155, auditLogStorePolling=auditLogStorePolling, actionCallNumberIndex=actionCallNumberIndex, s571UserTrap1127=s571UserTrap1127, dnsTable=dnsTable, pppRoutingEnable=pppRoutingEnable, eth1VLAN4Router=eth1VLAN4Router, acpmAvgVoltageVLowTrapNum=acpmAvgVoltageVLowTrapNum, acpmsAvgVoltageMaxStr=acpmsAvgVoltageMaxStr, aisgsALDTilt=aisgsALDTilt, secUserEntry=secUserEntry, acpmsAvgCurrentAvgStr=acpmsAvgCurrentAvgStr)
mibBuilder.exportSymbols("SITEBOSS-571-STD-MIB", eth2WanRoutingEnable=eth2WanRoutingEnable, fsCustomTankHeight=fsCustomTankHeight, acpmGenSysrepPackage=acpmGenSysrepPackage, s571UserTrap1110=s571UserTrap1110, evdFieldIndex=evdFieldIndex, pdMainVoltageInEventState=pdMainVoltageInEventState, s571UserTrap1097=s571UserTrap1097, fsVolumeHighValue=fsVolumeHighValue, fsVolumeHighTrapNum=fsVolumeHighTrapNum, pdMainVoltageValueStr=pdMainVoltageValueStr, s571UserTrap1045=s571UserTrap1045, consoleBaud=consoleBaud, scrVolatileIntEntry=scrVolatileIntEntry, s571UserTrap1007=s571UserTrap1007, espcOutputInactiveClass=espcOutputInactiveClass, cpeEventReminderInterval=cpeEventReminderInterval, scrFilename=scrFilename, s571UserTrap1021=s571UserTrap1021, espcTempVLowTemp=espcTempVLowTemp, actionPagerTable=actionPagerTable, fsVolumeNormalTrapNum=fsVolumeNormalTrapNum, esNumberCCs=esNumberCCs, eth2VLAN3SubnetMask=eth2VLAN3SubnetMask, evClassNameIndex=evClassNameIndex, eth1VLAN1SubnetMask=eth1VLAN1SubnetMask, evResetEnable=evResetEnable, eventSensorPointConfig=eventSensorPointConfig, espcHumidHighHumid=espcHumidHighHumid, espcTempVHighActions=espcTempVHighActions, eth2VLAN3Address=eth2VLAN3Address, s571UserTrap1029=s571UserTrap1029, trapEventTypeNumber=trapEventTypeNumber, pppDialRetries=pppDialRetries, evNoData2Enable=evNoData2Enable, esCCCombinedStatusBlock5=esCCCombinedStatusBlock5, espcTempIndexPoint=espcTempIndexPoint, fsGenName=fsGenName, pdnMainCurrentValue=pdnMainCurrentValue, snmpPoll=snmpPoll, pppDialCDTimeout=pppDialCDTimeout, pdnMainVoltageInEventState=pdnMainVoltageInEventState, aisgsALDTable=aisgsALDTable, s571FuelSensorVolumeTrap=s571FuelSensorVolumeTrap, eth1VLAN4ID=eth1VLAN4ID, actionSchedBegin=actionSchedBegin, pdnMainCurrentVLowCurrent=pdnMainCurrentVLowCurrent, s571UserTrap1070=s571UserTrap1070, scrTable=scrTable, acpmDisconnectClass=acpmDisconnectClass, eth1IPv6AutoAddress3=eth1IPv6AutoAddress3, esPointConfigOutputEntry=esPointConfigOutputEntry, evLogPrependName=evLogPrependName, eth1Router=eth1Router, wmsModelID=wmsModelID, evSched2Message=evSched2Message, eth1VLAN4SubnetMask=eth1VLAN4SubnetMask, acpmsRcPPhaseBValueStr=acpmsRcPPhaseBValueStr, auditLog=auditLog, acpmsTPFAvgStr=acpmsTPFAvgStr, sysEventFileID=sysEventFileID, modemCallDelay=modemCallDelay, ftpPushPushFileEntry=ftpPushPushFileEntry, pdnMainCurrentLowCurrent=pdnMainCurrentLowCurrent, fsStatusVolumeInEventState=fsStatusVolumeInEventState, rtsAlarmsPushHost=rtsAlarmsPushHost, eth1VLAN6=eth1VLAN6, esNumberAnalog=esNumberAnalog, espcCCIndexPoint=espcCCIndexPoint, espcHumidVHighClass=espcHumidVHighClass, scrIndex=scrIndex, auditLogStoreResets=auditLogStoreResets, s571UserTrap1156=s571UserTrap1156, eth2VLAN6=eth2VLAN6, acpmsVoltagePhaseBValueStr=acpmsVoltagePhaseBValueStr, pdMainCurrentValue=pdMainCurrentValue, s571UserTrap1088=s571UserTrap1088, acpmGenPtRatio=acpmGenPtRatio, actionSched=actionSched, acpmAvgCurrentLowValue=acpmAvgCurrentLowValue, pdOutputCurrentDeadband=pdOutputCurrentDeadband, s571UserTrap1016=s571UserTrap1016, fsTankShape=fsTankShape, acpmFreqLowClass=acpmFreqLowClass, pdnMainVoltageDeadband=pdnMainVoltageDeadband, s571UserTrap1114=s571UserTrap1114, acpmDisconnectActions=acpmDisconnectActions, sysTime=sysTime, acpmGenEnable=acpmGenEnable, scrGlobalEnable=scrGlobalEnable, deStatusCounter=deStatusCounter, s571UserTrap1107=s571UserTrap1107, fsGenRawValueBottom=fsGenRawValueBottom, espcAIConvLowUnit=espcAIConvLowUnit, actionPagerMessage=actionPagerMessage, rtsFileMode=rtsFileMode, fsCustomTankIndexFS=fsCustomTankIndexFS, trapTypeString=trapTypeString, fsGenSysrepEnable=fsGenSysrepEnable, espcCCEnable=espcCCEnable, eth2IPv6AutoAddress4=eth2IPv6AutoAddress4, s571StockOutputTrap=s571StockOutputTrap, s571UserTrap1043=s571UserTrap1043, acpmAvgCurrentLowTrapNum=acpmAvgCurrentLowTrapNum, pdConfig=pdConfig, s571UserTrap1172=s571UserTrap1172, acpmTRPVHighValue=acpmTRPVHighValue, fsDiscIndex=fsDiscIndex, scrVolatileStringTable=scrVolatileStringTable, sysLogFileCount=sysLogFileCount, scrRepeatInterval=scrRepeatInterval, pdnMainCombinedStatus=pdnMainCombinedStatus, espcCCNormalActions=espcCCNormalActions, sysLoghost=sysLoghost, espcAIIndexES=espcAIIndexES, acpmFreqHighClass=acpmFreqHighClass, eth1VLAN1ID=eth1VLAN1ID, fsTankVolume=fsTankVolume, emailDomain=emailDomain, actionParseError=actionParseError, s571UserTrap1025=s571UserTrap1025, portConfigIndex=portConfigIndex, scModemLoginRequired=scModemLoginRequired, s571UserTrap1047=s571UserTrap1047, wmsLAC=wmsLAC, s571UserTrap1071=s571UserTrap1071, acpmAvgCurrentDeadband=acpmAvgCurrentDeadband, secUserChallengeTelnetSendTo=secUserChallengeTelnetSendTo, s571UserTrap1072=s571UserTrap1072, portConfigStoreAlarmsDPT=portConfigStoreAlarmsDPT, eth2VLAN1ID=eth2VLAN1ID, acpmAvgCurrentHighActions=acpmAvgCurrentHighActions, trapEventClassName=trapEventClassName, sysLogFileSize=sysLogFileSize, acpmTRPVHighActions=acpmTRPVHighActions, esIndexPC=esIndexPC, actionHostIndex=actionHostIndex, acpmAvgCurrentVLowValue=acpmAvgCurrentVLowValue, acpmsAvgFreqMaxStr=acpmsAvgFreqMaxStr, portConfigMLREndField1Text=portConfigMLREndField1Text, scrVolatileIntTable=scrVolatileIntTable, espcCCOverrideGlobalReminder=espcCCOverrideGlobalReminder, s571UserTrap1161=s571UserTrap1161, sysCRDBCapacity=sysCRDBCapacity, s571UserTrap1118=s571UserTrap1118, ftpPushPushAlarms=ftpPushPushAlarms, deStatusIndex=deStatusIndex, espcAIEnable=espcAIEnable, wirelessAPN=wirelessAPN, scrVolatileIntIndex=scrVolatileIntIndex, s571UserTrap1102=s571UserTrap1102, snmp=snmp, fsGenSysrepThreshold=fsGenSysrepThreshold, acpmAvgVoltageSysrepThreshold=acpmAvgVoltageSysrepThreshold, wmsRSSI=wmsRSSI, s571UserTrap1093=s571UserTrap1093, acpmAvgCurrentTable=acpmAvgCurrentTable, snmpPRequestTable=snmpPRequestTable, evResetClass=evResetClass, s571UserTrap1036=s571UserTrap1036, espcHumidVLowActions=espcHumidVLowActions, evdFieldStart=evdFieldStart, ethernet2=ethernet2, sfEnable=sfEnable, pdMainCurrentInEventState=pdMainCurrentInEventState, secUserChallengeModemSendTo=secUserChallengeModemSendTo, s571UserTrap1019=s571UserTrap1019, evSched2Saturday=evSched2Saturday, evReset=evReset, s571UserTrap1052=s571UserTrap1052, esPointConfigHumidEntry=esPointConfigHumidEntry, aisgsALDID=aisgsALDID, acpmsTRPAvgStr=acpmsTRPAvgStr, webTimeout=webTimeout, s571UserTrap1100=s571UserTrap1100, acpmFreqEntry=acpmFreqEntry, acpmFreqVHighValue=acpmFreqVHighValue, espcHumidLowTrapnum=espcHumidLowTrapnum, modemFormat=modemFormat, acpmsPFPhaseBValueStr=acpmsPFPhaseBValueStr, eth2VLAN3=eth2VLAN3, espcOutputActiveClass=espcOutputActiveClass, esName=esName, s571UserTrap1078=s571UserTrap1078, espcTempLowActions=espcTempLowActions, espcHumidVLowHumid=espcHumidVLowHumid, portConfigMode=portConfigMode, clock=clock, s571UserTrap1033=s571UserTrap1033, rtsAlarmsTimeout=rtsAlarmsTimeout, sysEscapeCharacter=sysEscapeCharacter, s571UserTrap1101=s571UserTrap1101, unitSecurity=unitSecurity, wmsCellID=wmsCellID, s571UserTrap1061=s571UserTrap1061, evSched1Thursday=evSched1Thursday, network=network, pppHostEnable=pppHostEnable, s571UserTrap1189=s571UserTrap1189, fsVolumeVLowActions=fsVolumeVLowActions, s571UserTrap1163=s571UserTrap1163, pdOutputFuseIndex=pdOutputFuseIndex, pdnMainVoltageVLowVoltage=pdnMainVoltageVLowVoltage, actionAsentriaRequireAck=actionAsentriaRequireAck, fsTankDimB=fsTankDimB, acpmFreqVHighActions=acpmFreqVHighActions, esIndex=esIndex, fsGenIndex=fsGenIndex, aisgsAAATable=aisgsAAATable, s571UserTrap1068=s571UserTrap1068, wirelessConnFailThreshold=wirelessConnFailThreshold, acpmAvgCurrentVHighValue=acpmAvgCurrentVHighValue, sysAMSoftwareVersion=sysAMSoftwareVersion, eth2IPv6AutoAddress3=eth2IPv6AutoAddress3, sysFileTransferURL=sysFileTransferURL, s571UserTrap1171=s571UserTrap1171, eth1VLAN2=eth1VLAN2, acpmTRPVLowTrapNum=acpmTRPVLowTrapNum, s571UserTrap1091=s571UserTrap1091, acpmFreqVLowActions=acpmFreqVLowActions, s571UserTrap1066=s571UserTrap1066, acpmsAvgVoltageAvgStr=acpmsAvgVoltageAvgStr, cpeIndex=cpeIndex, evNoData2Message=evNoData2Message, rtsFileTimeout=rtsFileTimeout, evNoData1Days=evNoData1Days, s571UserTrap1030=s571UserTrap1030, portConfigMLRStartField2Pos=portConfigMLRStartField2Pos, espcTempNormalTrapnum=espcTempNormalTrapnum, acpmAvgVoltageVLowActions=acpmAvgVoltageVLowActions, snmpNotificationCaptureEnable=snmpNotificationCaptureEnable, eth1VLAN6Router=eth1VLAN6Router, eth1IPv6StaticRouter=eth1IPv6StaticRouter, esAnalogCombinedStatusBlock2=esAnalogCombinedStatusBlock2, rtsAlarmsEmptyClose=rtsAlarmsEmptyClose, routeTest=routeTest, acpmTRPLowTrapNum=acpmTRPLowTrapNum, s571UserTrap1152=s571UserTrap1152, eth1Mode=eth1Mode, espcCCName=espcCCName, cpe=cpe, esAnalogCombinedStatusBlock5=esAnalogCombinedStatusBlock5, esID=esID, wirelessFirewall=wirelessFirewall, secUserAccessFile=secUserAccessFile, pdOutputFuseInEventState=pdOutputFuseInEventState, numberPorts=numberPorts, snmpPRequestOID=snmpPRequestOID, acpmTRPEnable=acpmTRPEnable, s571StockLoadSheddingTrap=s571StockLoadSheddingTrap, evdWildCardChar=evdWildCardChar, snmpPRequestThreshold=snmpPRequestThreshold, scConsoleLoginRequired=scConsoleLoginRequired, pppDialPlainLogin=pppDialPlainLogin, espcAINormalActions=espcAINormalActions)
mibBuilder.exportSymbols("SITEBOSS-571-STD-MIB", acpmsAvgFreqValueStr=acpmsAvgFreqValueStr, acpmsCurrentPhaseCValueStr=acpmsCurrentPhaseCValueStr, ftpPushperiod=ftpPushperiod, s571UserTrap1180=s571UserTrap1180, wmsIMEI=wmsIMEI, aisgsAutoIndex=aisgsAutoIndex, pdOutputCurrentHighCurrent=pdOutputCurrentHighCurrent, evdMacroTable=evdMacroTable, evSched1Exclusions=evSched1Exclusions, actionSchedEnd=actionSchedEnd, eth1VLAN4=eth1VLAN4, wmsSIMStatus=wmsSIMStatus, aisgsAAAAntennaSN=aisgsAAAAntennaSN, acpmsTAPValueStr=acpmsTAPValueStr, wirelessConnIP2=wirelessConnIP2, pdOutputFuse=pdOutputFuse, eth2VLAN4Router=eth2VLAN4Router, eth1VLAN2Router=eth1VLAN2Router, modemCLIDLogTable=modemCLIDLogTable, sysTimeNetHostTable=sysTimeNetHostTable, trapIncludedValue=trapIncludedValue, eth2VLAN3Router=eth2VLAN3Router, modem=modem, acpmsAvgFreqMinStr=acpmsAvgFreqMinStr, acpmTRPHighTrapNum=acpmTRPHighTrapNum, secCore=secCore, evSched2Thursday=evSched2Thursday, ftpPushEnable=ftpPushEnable, ftpPushRemoteFileEntry=ftpPushRemoteFileEntry, s571UserTrap1154=s571UserTrap1154, s571UserTrap1055=s571UserTrap1055, acpmTPFVLowTrapNum=acpmTPFVLowTrapNum, eth1IPv6Mode=eth1IPv6Mode, espcOutputActiveActions=espcOutputActiveActions, aisgsFileEntry=aisgsFileEntry, snmpPBufferFile=snmpPBufferFile, actionEmail=actionEmail, fuelSensorVolumeTable=fuelSensorVolumeTable, espcAIVhighClass=espcAIVhighClass, portConfigDataType=portConfigDataType, acpmFreqNormalClass=acpmFreqNormalClass, aisgsAAAALDID=aisgsAAAALDID, evSched2Actions=evSched2Actions, pdOutputCurrent=pdOutputCurrent, s571UserTrap1109=s571UserTrap1109, ipv6=ipv6, espcAIVhighTrapnum=espcAIVhighTrapnum, wmsMpRACH=wmsMpRACH, acpmFreqLowValue=acpmFreqLowValue, evdAutoClear=evdAutoClear, consoleHsk=consoleHsk, s571UserTrap1090=s571UserTrap1090, acpmTRPHighActions=acpmTRPHighActions, s571UserTrap1048=s571UserTrap1048, pdMainCurrentHighCurrent=pdMainCurrentHighCurrent, espcCCNormalThreshold=espcCCNormalThreshold, acpmDisconnectTable=acpmDisconnectTable, evNoData1Sched1Begin=evNoData1Sched1Begin, eth2VLAN5Priority=eth2VLAN5Priority, evdFieldEntry=evdFieldEntry, evSched2Friday=evSched2Friday, routeTestEnable=routeTestEnable, acpmTRPEntry=acpmTRPEntry, eth2IPv6StaticAddress=eth2IPv6StaticAddress, pdnEntry=pdnEntry, s571UserTrap1111=s571UserTrap1111, evNoData2PortEnableEntry=evNoData2PortEnableEntry, auditLogStoreLogins=auditLogStoreLogins, fsStatusCombined=fsStatusCombined, fsTankEntry=fsTankEntry, eth1VLAN1Router=eth1VLAN1Router, fsGenFilterAveraging=fsGenFilterAveraging, acpmsVoltagePhaseCValueStr=acpmsVoltagePhaseCValueStr, esOutputReportingMode=esOutputReportingMode, wirelessIdleTimeout=wirelessIdleTimeout, s571UserTrap1067=s571UserTrap1067, scrVolatileString=scrVolatileString, secUserIndex=secUserIndex, evNoData1Sched2Begin=evNoData1Sched2Begin, rtsFileEmptyClose=rtsFileEmptyClose, evNoData2Sched2Duration=evNoData2Sched2Duration, acpmTPFVLowActions=acpmTPFVLowActions, scrVolatileStringIndex=scrVolatileStringIndex, s571UserTrap1162=s571UserTrap1162, eth2VLAN5Router=eth2VLAN5Router, auditLogStoreOutputs=auditLogStoreOutputs, auditLogStoreCommands=auditLogStoreCommands, s571UserTrap1065=s571UserTrap1065, acpmTPFLowValue=acpmTPFLowValue, ftpPushRemoteAlarmName=ftpPushRemoteAlarmName, evSched2Exclusions=evSched2Exclusions, sysBootStatus=sysBootStatus, s571UserTrap1120=s571UserTrap1120, acpmTPFSysrepEnable=acpmTPFSysrepEnable, cpePingSize=cpePingSize, scrNonVolatileStringTable=scrNonVolatileStringTable, eth2VLAN6Router=eth2VLAN6Router, s571UserTrap1053=s571UserTrap1053, trapIncludeSiteName=trapIncludeSiteName, s571ACPowerMonitorFrequencyTrap=s571ACPowerMonitorFrequencyTrap, fsVolumeIndex=fsVolumeIndex, espcHumidVHighActions=espcHumidVHighActions, s571UserTrap1054=s571UserTrap1054, aisgsAutoTable=aisgsAutoTable, acpmTPFIndex=acpmTPFIndex, sysLocXOffset=sysLocXOffset, cpeEntry=cpeEntry, modemCLIDLogIndex=modemCLIDLogIndex, s571ACPowerMonitorAvgVoltageTrap=s571ACPowerMonitorAvgVoltageTrap, sysAMHardwareOptions=sysAMHardwareOptions, acpmsVoltagePhaseAValueStr=acpmsVoltagePhaseAValueStr, acpmsTRcPMaxStr=acpmsTRcPMaxStr, scrVolatileStringEntry=scrVolatileStringEntry, esAnalogCombinedStatusBlock3=esAnalogCombinedStatusBlock3, pdnOutputCurrentHighCurrent=pdnOutputCurrentHighCurrent, aisgsFileVersion=aisgsFileVersion, eth2VLAN1=eth2VLAN1, aisgsAutoSoftware=aisgsAutoSoftware, hostname=hostname, fsDiscHighValue=fsDiscHighValue, pdnMainCurrentInEventState=pdnMainCurrentInEventState, auditLogStorePassthrough=auditLogStorePassthrough, acpmTotalPowerFactorTable=acpmTotalPowerFactorTable, evNoData1Sched2Duration=evNoData1Sched2Duration, sysTimeAutoDST=sysTimeAutoDST, aisgsPower=aisgsPower, modemTAPInitString=modemTAPInitString, acpmTPFNormalClass=acpmTPFNormalClass, pdnOutputCurrentVHighCurrent=pdnOutputCurrentVHighCurrent, evSched1Wednesday=evSched1Wednesday, espcOutputInactiveTrapnum=espcOutputInactiveTrapnum, evShskHighTrapNum=evShskHighTrapNum, eth2VLAN2ID=eth2VLAN2ID, s571=s571, evNoData2Sched2Begin=evNoData2Sched2Begin, pdnOutputCurrentLowCurrent=pdnOutputCurrentLowCurrent, secUserChallengeExpiration=secUserChallengeExpiration, s571UserTrap1035=s571UserTrap1035, fsGenInputES=fsGenInputES, acpmDisconnectTrapNum=acpmDisconnectTrapNum, web=web, evSched1Saturday=evSched1Saturday, portConfigBaud=portConfigBaud, webEnable=webEnable, s571UserTrap1132=s571UserTrap1132, evLogStoreSensor=evLogStoreSensor, acpmsAvgFreqInEventState=acpmsAvgFreqInEventState, s571UserTrap1181=s571UserTrap1181, acpmTRPNormalClass=acpmTRPNormalClass, evNoData2PortEnable=evNoData2PortEnable, sysLocAltitude=sysLocAltitude, s571UserTrap1133=s571UserTrap1133, sysAMSerialNumber=sysAMSerialNumber, evShskHighActions=evShskHighActions, eth2IPv6AutoAddress2=eth2IPv6AutoAddress2, acpmAvgVoltageVLowValue=acpmAvgVoltageVLowValue, portConfigMLRNumLinesBefore=portConfigMLRNumLinesBefore, serialPorts=serialPorts, acpmTRPNormalActions=acpmTRPNormalActions, evClassName=evClassName, portConfigMLRStartField1Pos=portConfigMLRStartField1Pos, fsDiscEntry=fsDiscEntry, eth2VLAN3Priority=eth2VLAN3Priority, acpmsAvgFreqAvgStr=acpmsAvgFreqAvgStr, eth1VLAN2SubnetMask=eth1VLAN2SubnetMask, acpmFreqIndex=acpmFreqIndex, snmpPRequestEntry=snmpPRequestEntry, evShskLowActions=evShskLowActions, pdMainVoltageValue=pdMainVoltageValue, espcAILowValue=espcAILowValue, wmsPLMNColor=wmsPLMNColor, fsVolumeNormalClass=fsVolumeNormalClass, s571UserTrap1024=s571UserTrap1024, esOutputCombinedStatusBlock2=esOutputCombinedStatusBlock2, esPointEntry=esPointEntry, routingInterface=routingInterface, eth1VLAN3Address=eth1VLAN3Address, evSched1=evSched1, s571FuelSensorVolumeSuddenChangeTrap=s571FuelSensorVolumeSuddenChangeTrap, actionCallNumberEntry=actionCallNumberEntry, aisgsALDMaxTilt=aisgsALDMaxTilt, aisgsALDIndex=aisgsALDIndex, evNoData2Actions=evNoData2Actions, dataEventStatus=dataEventStatus, acpmAvgCurrentVHighActions=acpmAvgCurrentVHighActions, acpmAvgVoltageDeadband=acpmAvgVoltageDeadband, fsDiscTrapNum=fsDiscTrapNum, cpeDescription=cpeDescription, s571UserTrap1003=s571UserTrap1003, wmsUpdated=wmsUpdated, esNoiseReportingMode=esNoiseReportingMode, acpmsAvgVoltageValueStr=acpmsAvgVoltageValueStr, acpmAvgCurrentVLowActions=acpmAvgCurrentVLowActions, acpmsTPFValueStr=acpmsTPFValueStr, fsDiscClass=fsDiscClass, acpmTPFLowTrapNum=acpmTPFLowTrapNum, sysLogMode=sysLogMode, espcAIVlowActions=espcAIVlowActions, fsVolumeLowActions=fsVolumeLowActions, actionAsentriaVersion=actionAsentriaVersion, sysCRDBFileIDTable=sysCRDBFileIDTable, PYSNMP_MODULE_ID=s571, ftpPushPushFile=ftpPushPushFile, espcAINormalClass=espcAINormalClass, sysPTTimeout=sysPTTimeout, pdnMainCurrentVHighCurrent=pdnMainCurrentVHighCurrent, scrNonVolatileString=scrNonVolatileString, scrRunAtStartup=scrRunAtStartup, evNoSensorTrapNum=evNoSensorTrapNum, s571UserTrap1004=s571UserTrap1004, sysLocLongitude=sysLocLongitude, evShskLowClass=evShskLowClass, scripting=scripting, fsStatusTable=fsStatusTable, espcTempHighTrapnum=espcTempHighTrapnum, evdFieldTable=evdFieldTable, espcAIVlowClass=espcAIVlowClass, s571UserTrap1195=s571UserTrap1195, eth1VLAN6Priority=eth1VLAN6Priority, aisgsAAAIndex=aisgsAAAIndex, secUserChallengeModemMode=secUserChallengeModemMode, ftpPushPushFileIndex=ftpPushPushFileIndex, scrVolatileInt=scrVolatileInt, esNewSensors=esNewSensors, actionPagerPostCalloutDelay=actionPagerPostCalloutDelay, sysCRDBFileEnforceMin=sysCRDBFileEnforceMin, acpmTPFLowActions=acpmTPFLowActions, evNoData2Sched2End=evNoData2Sched2End, trapEventTypeName=trapEventTypeName, eth1VLAN2Priority=eth1VLAN2Priority, sysTimeNetHost=sysTimeNetHost, aisgsAutoTilt=aisgsAutoTilt, scAuthMode=scAuthMode, snmpPRequestID=snmpPRequestID, consoleFormat=consoleFormat, s571UserTrap1041=s571UserTrap1041, pdMainVoltageVHighVoltage=pdMainVoltageVHighVoltage, pdnMainCurrentHighCurrent=pdnMainCurrentHighCurrent, sysTimeStampDateFormat=sysTimeStampDateFormat, evSched2Enable=evSched2Enable, espcCCNormalAlias=espcCCNormalAlias, trapIncludedString=trapIncludedString, scrNonVolatileIntEntry=scrNonVolatileIntEntry, acpmGeneralTable=acpmGeneralTable, espcAIDisplayFormat=espcAIDisplayFormat, s571UserTrap1006=s571UserTrap1006, pdnMainVoltageValue=pdnMainVoltageValue, scrDTRCtrlPortEnableIndex=scrDTRCtrlPortEnableIndex, sysLocYOffset=sysLocYOffset, rtsAlarmsShowAnswer=rtsAlarmsShowAnswer, acpmAvgCurrentHighClass=acpmAvgCurrentHighClass, wmsRegistration=wmsRegistration, acpmTRPVLowActions=acpmTRPVLowActions, pdnMainCurrentDeadband=pdnMainCurrentDeadband)
mibBuilder.exportSymbols("SITEBOSS-571-STD-MIB", eth1IPv6AutoAddress4=eth1IPv6AutoAddress4, s571CPEDownTrap=s571CPEDownTrap, ftpPushPushAudit=ftpPushPushAudit, acpmAvgCurrentNormalActions=acpmAvgCurrentNormalActions, acpmsAvgVoltageMinStr=acpmsAvgVoltageMinStr, acpmFreqNormalActions=acpmFreqNormalActions, aisgsALDHwVersion=aisgsALDHwVersion, evNoData1Message=evNoData1Message, s571UserTrap1191=s571UserTrap1191, fsVolumeLowTrapNum=fsVolumeLowTrapNum, scrScheduleTime=scrScheduleTime, esNumberEventSensors=esNumberEventSensors, pdnOutputFuseInEventState=pdnOutputFuseInEventState, snmpNtfnTimeout=snmpNtfnTimeout, trapIncludeUDName=trapIncludeUDName, s571UserTrap1012=s571UserTrap1012, acpmsTotalEnergyVAR=acpmsTotalEnergyVAR, aisgsAutoVendor=aisgsAutoVendor, evMgmtReprocess=evMgmtReprocess, acpmAvgVoltageVHighClass=acpmAvgVoltageVHighClass, acpmAvgVoltageHighActions=acpmAvgVoltageHighActions, s571UserTrap1057=s571UserTrap1057, s571UserTrap1106=s571UserTrap1106, sysTimeGMTDirection=sysTimeGMTDirection, pdMainVoltageVLowVoltage=pdMainVoltageVLowVoltage, eth1VLAN1Priority=eth1VLAN1Priority, evdFieldLength=evdFieldLength, espcHumidVHighTrapnum=espcHumidVHighTrapnum, actionAsentria=actionAsentria, evSched2Class=evSched2Class, eth2IPv6=eth2IPv6, snmpNotificationTx=snmpNotificationTx, pdnDeviceCurrentValueStr=pdnDeviceCurrentValueStr, acpmTRPVHighClass=acpmTRPVHighClass, acpmTPFVLowClass=acpmTPFVLowClass, modemStatus=modemStatus, ftpPushRemoteFileIndex=ftpPushRemoteFileIndex, s571UserTrap1075=s571UserTrap1075, acpmTPFDeadband=acpmTPFDeadband, wmsCountryCode=wmsCountryCode, s571UserTrap1182=s571UserTrap1182, ethRoutingNATEnable=ethRoutingNATEnable, secUserCallbackNumber1=secUserCallbackNumber1, acpmsTPFMinStr=acpmsTPFMinStr, pdOutputCurrentVHighCurrent=pdOutputCurrentVHighCurrent, espcTempVHighTemp=espcTempVHighTemp, fsCustomTankVolume=fsCustomTankVolume, routeTestAddressTable=routeTestAddressTable, eth2VLAN6Priority=eth2VLAN6Priority, s571UserTrap1190=s571UserTrap1190, eth1VLAN5SubnetMask=eth1VLAN5SubnetMask, snmpNtfnSnooze=snmpNtfnSnooze, wmsSignal=wmsSignal, fuelSensor=fuelSensor, actionPagerPostIDDelay=actionPagerPostIDDelay, pdnOutputFuseValueStr=pdnOutputFuseValueStr, eventSensorStatus=eventSensorStatus, eth1VLAN1Address=eth1VLAN1Address, esEntry=esEntry, espcCCNormalTrapnum=espcCCNormalTrapnum, fsGenDistanceUnit=fsGenDistanceUnit, s571StockDataAlarmTrap=s571StockDataAlarmTrap, s571UserTrap1046=s571UserTrap1046, acpmsTotalEnergyVA=acpmsTotalEnergyVA, aisgsFileType=aisgsFileType, evResetTrapnum=evResetTrapnum, pdnIndexPD=pdnIndexPD, acpmsTotalEnergyWh=acpmsTotalEnergyWh, pdMainCurrent=pdMainCurrent, sysCRDBFileID=sysCRDBFileID, s571UserTrap1058=s571UserTrap1058, s571UserTrap1015=s571UserTrap1015, s571UserTrap1149=s571UserTrap1149, s571UserTrap1044=s571UserTrap1044, fsVolumeVHighActions=fsVolumeVHighActions, eth1IPv6Auto=eth1IPv6Auto, scrDTRCtrlPortEnable=scrDTRCtrlPortEnable, wmsMgfID=wmsMgfID, acpmTRPVLowValue=acpmTRPVLowValue, eth1VLAN3Router=eth1VLAN3Router, acpmFreqSysrepThreshold=acpmFreqSysrepThreshold, espcHumidIndexES=espcHumidIndexES, pppHost=pppHost, routeTestAddress=routeTestAddress, aisgsALDType=aisgsALDType, sysCRDBFileEnforceMinTable=sysCRDBFileEnforceMinTable, pdnMainVoltageValueStr=pdnMainVoltageValueStr, wireless=wireless, ncpDuplex=ncpDuplex, pdOutputCurrentValueStr=pdOutputCurrentValueStr, acpmGenIndex=acpmGenIndex, s571UserTrap1027=s571UserTrap1027, acpmsAPPhaseCValueStr=acpmsAPPhaseCValueStr, s571StockTempTrap=s571StockTempTrap, sysCRDBFileIDEntry=sysCRDBFileIDEntry, evReminderInterval=evReminderInterval, secUserRights=secUserRights, eth1VLAN6SubnetMask=eth1VLAN6SubnetMask, s571UserTrap1060=s571UserTrap1060, pdMainVoltageDeadband=pdMainVoltageDeadband, evdIndex=evdIndex, s571UserTrap1038=s571UserTrap1038, actionPagerNumber=actionPagerNumber, evSched2Sunday=evSched2Sunday, routeTestPeriod=routeTestPeriod, espcTempLowClass=espcTempLowClass, actionPagerEntry=actionPagerEntry, s571UserTrap1017=s571UserTrap1017, eth2VLAN1SubnetMask=eth2VLAN1SubnetMask, s571ACPowerMonitorTRPTrap=s571ACPowerMonitorTRPTrap, wirelessPPPUsername=wirelessPPPUsername, esPointConfigCCTable=esPointConfigCCTable, espcHumidVLowClass=espcHumidVLowClass, acpmTPFSysrepLimit=acpmTPFSysrepLimit, s571UserTrap1178=s571UserTrap1178, acpmAvgCurrentNormalClass=acpmAvgCurrentNormalClass, espcCCEventState=espcCCEventState, s571UserTrap1087=s571UserTrap1087, evdClearTime=evdClearTime, portConfigMLRUseComplexRules=portConfigMLRUseComplexRules, aisgsFileName=aisgsFileName, fsStatusDeviceState=fsStatusDeviceState, sysPTJoinable=sysPTJoinable, eth2VLAN6ID=eth2VLAN6ID, evShskLowIndex=evShskLowIndex, evNoData1TrapNum=evNoData1TrapNum, wmsLocalIP=wmsLocalIP, rtsAlarms=rtsAlarms, pdOutputFuseEntry=pdOutputFuseEntry, aisgsAAASectorID=aisgsAAASectorID, scrNonVolatileInt=scrNonVolatileInt, espcAIHighActions=espcAIHighActions, netSecurity=netSecurity, wirelessConnIP1=wirelessConnIP1, espcOutputType=espcOutputType, s571UserTrap1062=s571UserTrap1062, config=config, actionHost=actionHost, aisgsAutoEntry=aisgsAutoEntry, sysTimeNetHostEntry=sysTimeNetHostEntry, sysCRDBFileEnforceMinEntry=sysCRDBFileEnforceMinEntry, pdMainVoltageHighVoltage=pdMainVoltageHighVoltage, wmsGPRSStatus=wmsGPRSStatus, eth1VLAN=eth1VLAN, evLog=evLog, acpmAvgVoltageHighValue=acpmAvgVoltageHighValue, evResetActions=evResetActions, espcCCReminderInterval=espcCCReminderInterval, acpmsName=acpmsName, espcOutputActiveState=espcOutputActiveState, acpmsAvgCurrentValueStr=acpmsAvgCurrentValueStr, actionPagerType=actionPagerType, snmpPRequestResultTime=snmpPRequestResultTime, wirelessPPPDebug=wirelessPPPDebug, pdnOutputCurrentVLowCurrent=pdnOutputCurrentVLowCurrent, s571UserTrap1185=s571UserTrap1185, evShskHighMessage=evShskHighMessage, acpmTRPLowActions=acpmTRPLowActions, s571UserTrap1081=s571UserTrap1081, eth2VLAN2Priority=eth2VLAN2Priority, espcAIVhighValue=espcAIVhighValue, aisgsBaseStationID=aisgsBaseStationID, esNumberNoiseSensors=esNumberNoiseSensors, ftpPushServer=ftpPushServer, s571UserTrap1169=s571UserTrap1169, fsStatusVolumeValueString=fsStatusVolumeValueString, acpmGenCtRatio=acpmGenCtRatio, s571UserTrap1147=s571UserTrap1147, cpeInfoNumBadResp=cpeInfoNumBadResp, s571UserTrap1008=s571UserTrap1008, pdnMainVoltageHighVoltage=pdnMainVoltageHighVoltage, eth1IPv6StaticAddress=eth1IPv6StaticAddress, esPointTimeLastChange=esPointTimeLastChange, email=email, evNoData1Actions=evNoData1Actions, eth2VLAN4Address=eth2VLAN4Address, evNoData1Sched1End=evNoData1Sched1End, s571UserTrap1000=s571UserTrap1000, acpmsAPPhaseBValueStr=acpmsAPPhaseBValueStr, dnsEntry=dnsEntry, eth1IPv6AutoAddress2=eth1IPv6AutoAddress2, s571ACPowerMonitorDisconnectTrap=s571ACPowerMonitorDisconnectTrap, keyInterface=keyInterface, acpmStatusEntry=acpmStatusEntry, evNoData1Sched1Duration=evNoData1Sched1Duration, sysLocAngle=sysLocAngle, pdMainCurrentVLowCurrent=pdMainCurrentVLowCurrent, eth2VLAN5ID=eth2VLAN5ID, espcAIConvUnitName=espcAIConvUnitName, siteName=siteName, evdFieldLine=evdFieldLine, espcCCAlarmAlias=espcCCAlarmAlias, aisgsAAAEntry=aisgsAAAEntry, portConfigId=portConfigId, sysFileTransferStatus=sysFileTransferStatus, esPointConfigOutputTable=esPointConfigOutputTable, acpmGenPowerType=acpmGenPowerType, modemTAP8N1=modemTAP8N1, fsGenEntry=fsGenEntry, s571UserTrap1142=s571UserTrap1142, acpmFreqVHighClass=acpmFreqVHighClass, s571UserTrap1159=s571UserTrap1159, snmpAgentEnable=snmpAgentEnable, esCCCombinedStatusBlock4=esCCCombinedStatusBlock4, wmsBand=wmsBand, s571UserTrap1042=s571UserTrap1042, portConfigMLREndField2Pos=portConfigMLREndField2Pos, eth2Mode=eth2Mode, netAdvanced=netAdvanced, snmpPMode=snmpPMode, eth1MAC=eth1MAC, acpmTotalRealPowerTable=acpmTotalRealPowerTable, evNoData2Class=evNoData2Class, evLogEnable=evLogEnable, pdOutputCurrentTable=pdOutputCurrentTable, esPointConfigAIEntry=esPointConfigAIEntry, esCCReportingMode=esCCReportingMode, acpmFreqNormalTrapNum=acpmFreqNormalTrapNum, evNoData1PortEnableIndex=evNoData1PortEnableIndex, acpmAvgVoltageLowTrapNum=acpmAvgVoltageLowTrapNum, deStatusEntry=deStatusEntry, acpmsTAPMinStr=acpmsTAPMinStr, pppDialMdmInit=pppDialMdmInit, espcCCThreshold=espcCCThreshold, s571UserTrap1031=s571UserTrap1031, pppDial=pppDial, evNoData2Days=evNoData2Days, scRTSLoginRequired=scRTSLoginRequired, secUserEnable=secUserEnable, pdMainCurrentLowCurrent=pdMainCurrentLowCurrent, modemCLIDLogNumber=modemCLIDLogNumber, s571UserTrap1056=s571UserTrap1056, fuelSensorGeneralTable=fuelSensorGeneralTable, fsTankVolumeUnit=fsTankVolumeUnit, fsStatusIndex=fsStatusIndex, auditLogStoreAlarmActions=auditLogStoreAlarmActions, rtsFilePushRetryTimer=rtsFilePushRetryTimer, secUserAuditReadAccess=secUserAuditReadAccess, acpmTPFNormalTrapNum=acpmTPFNormalTrapNum, s571UserTrap1074=s571UserTrap1074, eth2MAC=eth2MAC, fsGenSensorType=fsGenSensorType, evShskLowTrapNum=evShskLowTrapNum, rtsFilePushHost=rtsFilePushHost, acpmFreqLowActions=acpmFreqLowActions, s571UserTrap1022=s571UserTrap1022, actionSchedEnable=actionSchedEnable, acpmAvgVoltageSysrepLimit=acpmAvgVoltageSysrepLimit, acpmFreqHighValue=acpmFreqHighValue, trapIncludeDateTime=trapIncludeDateTime, s571UserTrap1176=s571UserTrap1176, s571UserTrap1198=s571UserTrap1198, wmsBER=wmsBER, fsVolumeLowValue=fsVolumeLowValue)
mibBuilder.exportSymbols("SITEBOSS-571-STD-MIB", evClassNameEntry=evClassNameEntry, ipRestrictionIndex=ipRestrictionIndex, s571UserTrap1187=s571UserTrap1187, espcOutputActiveColor=espcOutputActiveColor, espcTempVHighClass=espcTempVHighClass, fuelSensorCustomTankTable=fuelSensorCustomTankTable, acpmAvgVoltageVHighTrapNum=acpmAvgVoltageVHighTrapNum, acpmsRcPPhaseCValueStr=acpmsRcPPhaseCValueStr, fsGenTopOffset=fsGenTopOffset, emailAuthEnable=emailAuthEnable, acpmAvgCurrentSysrepLimit=acpmAvgCurrentSysrepLimit, esPointConfigTempTable=esPointConfigTempTable, pdnMainCurrentValueStr=pdnMainCurrentValueStr, esOutputCombinedStatusBlock1=esOutputCombinedStatusBlock1, s571UserTrap1011=s571UserTrap1011, acpmGenAddress=acpmGenAddress, s571UserTrap1034=s571UserTrap1034, esHumidCombinedStatus=esHumidCombinedStatus, acpmAvgCurrentVLowTrapNum=acpmAvgCurrentVLowTrapNum, aisgsALDSectorID=aisgsALDSectorID, secUserLoginTo=secUserLoginTo, trapIncludeSensorID=trapIncludeSensorID, s571UserTrap1049=s571UserTrap1049, acpmFreqDeadband=acpmFreqDeadband, fsStatusVolumePercentLevel=fsStatusVolumePercentLevel, eth2VLAN5SubnetMask=eth2VLAN5SubnetMask, evSched1Tuesday=evSched1Tuesday, s571StockContactClosureTrap=s571StockContactClosureTrap, sysPTEndPause=sysPTEndPause, secUserCallbackNumber2=secUserCallbackNumber2, fsVolumeHighActions=fsVolumeHighActions, sysAMManufacturer=sysAMManufacturer, evNoData1Exclusions=evNoData1Exclusions, espcTempNormalClass=espcTempNormalClass, hostEntry=hostEntry, esPointConfigTempEntry=esPointConfigTempEntry, s571UserTrap1076=s571UserTrap1076, espcHumidHighActions=espcHumidHighActions, evdMacroIndex=evdMacroIndex, sfSecret=sfSecret, sysTimeNet=sysTimeNet, acpmFreqEnable=acpmFreqEnable, acpmsTRPMinStr=acpmsTRPMinStr, espcHumidNormalActions=espcHumidNormalActions, portConfigDAEnable=portConfigDAEnable, s571UserTrap1095=s571UserTrap1095, s571UserTrap1020=s571UserTrap1020, s571UserTrap1032=s571UserTrap1032, espcHumidLowHumid=espcHumidLowHumid, acpmAvgCurrentIndex=acpmAvgCurrentIndex, eth2VLAN2=eth2VLAN2, routeTestAddressEntry=routeTestAddressEntry, wmsMinRxLevel=wmsMinRxLevel, productIds=productIds, acpmsCurrentPhaseAValueStr=acpmsCurrentPhaseAValueStr, ftpPushIncludeDate=ftpPushIncludeDate, s571UserTrap1150=s571UserTrap1150, cpeTable=cpeTable, ethernet1=ethernet1, s571UserTrap1131=s571UserTrap1131, cpeInfoReset=cpeInfoReset, evSched1Class=evSched1Class, s571UserTrap1134=s571UserTrap1134, evMgmt=evMgmt, rtsAlarmsPushRetryTimer=rtsAlarmsPushRetryTimer, eth2VLAN2Address=eth2VLAN2Address, s571UserTrap1194=s571UserTrap1194, acpmAvgVoltageLowActions=acpmAvgVoltageLowActions, s571UserTrap1130=s571UserTrap1130, snmpPRequestResultType=snmpPRequestResultType, espcOutputInactiveAlias=espcOutputInactiveAlias, esCCCombinedStatusBlock2=esCCCombinedStatusBlock2, pppDialIdleTimeout=pppDialIdleTimeout, sysLog=sysLog, sysPrompt=sysPrompt, evSched1Friday=evSched1Friday, fsVolumeNormalActions=fsVolumeNormalActions, secFactory=secFactory, acpmAvgVoltageVHighActions=acpmAvgVoltageVHighActions, s571UserTrap1051=s571UserTrap1051, s571UserTrap1009=s571UserTrap1009, pdOutput=pdOutput, fuelSensorStatus=fuelSensorStatus, secUserExpiration=secUserExpiration, ethRoutingEnable=ethRoutingEnable, evSched2Monday=evSched2Monday, sysCRDBFileEnforceMinIndex=sysCRDBFileEnforceMinIndex, s571UserTrap1170=s571UserTrap1170, evShskLowEntry=evShskLowEntry, espcHumidIndexPoint=espcHumidIndexPoint, cpeInfoNumReq=cpeInfoNumReq, eth1VLAN4Priority=eth1VLAN4Priority, esNumberHumidSensors=esNumberHumidSensors, wmsIMSI=wmsIMSI, s571UserTrap1113=s571UserTrap1113, acpmDisconnectEnable=acpmDisconnectEnable, acpmsTRPMaxStr=acpmsTRPMaxStr, sysUpdate=sysUpdate, s571UserTrap1119=s571UserTrap1119, pdnOutputCurrentValueStr=pdnOutputCurrentValueStr, rtsAlarmsReqXON=rtsAlarmsReqXON, s571UserTrap1112=s571UserTrap1112, s571UserTrap1146=s571UserTrap1146, acpmsRPPhaseAValueStr=acpmsRPPhaseAValueStr, espcCCEventActions=espcCCEventActions, espcTempLowTrapnum=espcTempLowTrapnum, s571UserTrap1116=s571UserTrap1116, time=time, pppDialLoginTimeout=pppDialLoginTimeout, fsVolumeVLowTrapNum=fsVolumeVLowTrapNum, scrDTRCtrlPortEnableTable=scrDTRCtrlPortEnableTable, portConfigMLREndDetection=portConfigMLREndDetection, s571UserTrap1129=s571UserTrap1129, espcAINormalTrapnum=espcAINormalTrapnum, defaultRouter=defaultRouter, evNoData1PortEnableEntry=evNoData1PortEnableEntry, fsGenSysrepType=fsGenSysrepType, aisgsALDAISGVersion=aisgsALDAISGVersion, acpmsAPPhaseAValueStr=acpmsAPPhaseAValueStr, espcHumidLowActions=espcHumidLowActions, eth1IPv6AutoAddress1=eth1IPv6AutoAddress1, emailServer=emailServer, pdOutputCurrentEntry=pdOutputCurrentEntry, espcHumidNormalClass=espcHumidNormalClass, acpmTRPSysrepLimit=acpmTRPSysrepLimit, evdMacroEquation=evdMacroEquation, sysMTU=sysMTU, s571UserTrap1108=s571UserTrap1108, s571UserTrap1073=s571UserTrap1073, evdTable=evdTable, s571UserTrap1104=s571UserTrap1104, acpmAvgVoltageIndex=acpmAvgVoltageIndex, esTempCombinedStatus=esTempCombinedStatus, eth2IPv6AutoAddress1=eth2IPv6AutoAddress1, stockTrapString=stockTrapString, fsVolumeHighClass=fsVolumeHighClass, secUserChallengeConsoleMode=secUserChallengeConsoleMode, pppHostLocalIP=pppHostLocalIP, eth1VLAN3SubnetMask=eth1VLAN3SubnetMask, esTempReportingMode=esTempReportingMode, fsDiscNormalActions=fsDiscNormalActions, dnsIndex=dnsIndex, consoleDuplex=consoleDuplex, evResetDelay=evResetDelay, wirelessKeepaliveThreshold=wirelessKeepaliveThreshold, esPointTable=esPointTable, routing=routing, evData=evData, portConfigMLREndField1Pos=portConfigMLREndField1Pos, fsDiscLowValue=fsDiscLowValue, fsCustomTankEntry=fsCustomTankEntry, acpmAvgCurrentLowClass=acpmAvgCurrentLowClass, rtsFileReqXON=rtsFileReqXON, evdEntry=evdEntry, fsDiscActions=fsDiscActions, evNoData1PortEnableTable=evNoData1PortEnableTable, portConfigDataFormat=portConfigDataFormat, espcOutputInactiveActions=espcOutputInactiveActions, esPointConfigAITable=esPointConfigAITable, pdMainVoltage=pdMainVoltage, esCCCombinedStatusBlock6=esCCCombinedStatusBlock6, acpmFreqVLowClass=acpmFreqVLowClass, eth2VLAN4ID=eth2VLAN4ID, hostTable=hostTable, s571ACTotalPowerFactorTrap=s571ACTotalPowerFactorTrap, esCCCombinedStatusBlock1=esCCCombinedStatusBlock1, evSched1Sunday=evSched1Sunday, ftpPushIncludeTime=ftpPushIncludeTime, acpmFreqVLowTrapNum=acpmFreqVLowTrapNum, s571UserTrap1086=s571UserTrap1086, wmsICCID=wmsICCID, sysLogFilter=sysLogFilter, scrNonVolatileIntTable=scrNonVolatileIntTable, acPowerMonitor=acPowerMonitor, snmpNtfnCycles=snmpNtfnCycles, secUserConnectVia=secUserConnectVia, evNoData1Class=evNoData1Class, rtsFileIndex=rtsFileIndex, ppp=ppp, acpmTRPSysrepThreshold=acpmTRPSysrepThreshold, evLogTimeStampAlarms=evLogTimeStampAlarms, actionPagerID=actionPagerID, eth2IPv6Auto=eth2IPv6Auto, evNoData1Sched2End=evNoData1Sched2End, portConfigRecordTimeout=portConfigRecordTimeout, acpmAvgCurrentVHighTrapNum=acpmAvgCurrentVHighTrapNum, esNumberOutputs=esNumberOutputs, fsGenEnable=fsGenEnable, evSched1Actions=evSched1Actions, s571UserTrap1164=s571UserTrap1164, aisgsFileTable=aisgsFileTable, s571UserTrap1148=s571UserTrap1148, modemCmdTimout=modemCmdTimout, snmpPRequestPeriod=snmpPRequestPeriod, rtsFilePushPort=rtsFilePushPort, evNoData2Sched1Begin=evNoData2Sched1Begin, acpmAvgCurrentVHighClass=acpmAvgCurrentVHighClass, s571UserTrap1158=s571UserTrap1158, pdOutputCurrentVLowCurrent=pdOutputCurrentVLowCurrent, s571UserTrap1177=s571UserTrap1177, sysCRDB=sysCRDB, s571UserTrap1077=s571UserTrap1077, s571ACPowerMonitorAvgCurrentTrap=s571ACPowerMonitorAvgCurrentTrap, s571UserTrap1013=s571UserTrap1013, trapEventClassNumber=trapEventClassNumber, ipRestrictionMask=ipRestrictionMask, auditLogStoreInactivity=auditLogStoreInactivity, secVPN=secVPN, eth2VLAN5=eth2VLAN5, snmpPRequestReadcom=snmpPRequestReadcom, trapIncludeUDState=trapIncludeUDState, fsGenBottomOffset=fsGenBottomOffset, deStatusName=deStatusName, espcAIConvHighValue=espcAIConvHighValue, evdFilterAction=evdFilterAction, actionAsentriaTCPPort=actionAsentriaTCPPort, acpmsTRcPAvgStr=acpmsTRcPAvgStr, acpmAvgCurrentEntry=acpmAvgCurrentEntry, espcTempHighClass=espcTempHighClass, wirelessModemStatus=wirelessModemStatus, s571UserTrap1124=s571UserTrap1124, scrDTRCtrlPortEnableEntry=scrDTRCtrlPortEnableEntry, s571StockAnalogTrap=s571StockAnalogTrap, evdActions=evdActions, acpmFreqHighActions=acpmFreqHighActions, pdSystem=pdSystem, acpmTRPHighValue=acpmTRPHighValue, wmsNetCode=wmsNetCode, secUserAuditWriteAccess=secUserAuditWriteAccess, arpFilter=arpFilter, rtsAlarmsPushPort=rtsAlarmsPushPort, esHumidReportingMode=esHumidReportingMode, rtsFileTable=rtsFileTable, status=status, acpmsTRPInEventState=acpmsTRPInEventState, evdClearInterval=evdClearInterval, wirelessMode=wirelessMode, fsVolumeEntry=fsVolumeEntry, s571UserTrap1096=s571UserTrap1096, evNoData1Enable=evNoData1Enable, s571UserTrap1117=s571UserTrap1117, acpmDisconnectEntry=acpmDisconnectEntry, s571StockNoDataAlarmTrap=s571StockNoDataAlarmTrap, evdExitOnTrue=evdExitOnTrue, espcAIConvHighUnit=espcAIConvHighUnit, sysTimeStampSpaceAfter=sysTimeStampSpaceAfter, scrEntry=scrEntry, deStatusTable=deStatusTable, espcAIHighClass=espcAIHighClass, acpmDisconnectNormalActions=acpmDisconnectNormalActions, s571UserTrap1083=s571UserTrap1083, s571UserTrap1179=s571UserTrap1179, espcTempVLowTrapnum=espcTempVLowTrapnum, consoleTimeout=consoleTimeout)
mibBuilder.exportSymbols("SITEBOSS-571-STD-MIB", secUserEventsWriteAccess=secUserEventsWriteAccess, hostDeclaration=hostDeclaration, acpmAvgVoltageHighTrapNum=acpmAvgVoltageHighTrapNum, acpmTRPHighClass=acpmTRPHighClass, aisgsAutoALDModel=aisgsAutoALDModel, acpmAvgCurrentHighTrapNum=acpmAvgCurrentHighTrapNum, s571UserTrap1165=s571UserTrap1165, rtsFileEntry=rtsFileEntry, acpmTRPLowClass=acpmTRPLowClass, esPointValueInt=esPointValueInt, acpmDisconnectIndex=acpmDisconnectIndex, evSched1Monday=evSched1Monday, pppDialEnable=pppDialEnable, pdMainPowerValueStr=pdMainPowerValueStr, espcAIVlowTrapnum=espcAIVlowTrapnum, esCCCombinedStatusBlock8=esCCCombinedStatusBlock8, espcAIDeadband=espcAIDeadband, acpmTPFLowClass=acpmTPFLowClass, s571UserTrap1188=s571UserTrap1188, acpmAvgVoltageTable=acpmAvgVoltageTable, aisgsFileIndex=aisgsFileIndex, pdnOutputCombinedStatusBlock1=pdnOutputCombinedStatusBlock1, s571UserTrap1126=s571UserTrap1126, s571UserTrap1197=s571UserTrap1197, s571UserTrap1084=s571UserTrap1084, espcTempVHighTrapnum=espcTempVHighTrapnum, pdnMainVoltageLowVoltage=pdnMainVoltageLowVoltage, powerDistributionStatus=powerDistributionStatus, s571UserTrap1079=s571UserTrap1079, pdnOutputCurrentValue=pdnOutputCurrentValue, espcCCEventClass=espcCCEventClass, acpmTPFNormalActions=acpmTPFNormalActions, acpmAvgVoltageSysrepEnable=acpmAvgVoltageSysrepEnable, acpmAvgVoltageVHighValue=acpmAvgVoltageVHighValue, acpmFreqLowTrapNum=acpmFreqLowTrapNum, s571StockSchedTrap=s571StockSchedTrap, aisgsALDModel=aisgsALDModel, s571UserTrap1080=s571UserTrap1080, portConfigMLREnable=portConfigMLREnable, pppHostRemoteIP=pppHostRemoteIP, s571UserTrap1141=s571UserTrap1141, eth1IPv6LinkLocalAddress=eth1IPv6LinkLocalAddress, espcAIHighTrapnum=espcAIHighTrapnum, ipRestriction=ipRestriction, s571UserTrap1138=s571UserTrap1138, eth2VLAN2Router=eth2VLAN2Router, fsGenSysrepLimit=fsGenSysrepLimit, evShskHighIndex=evShskHighIndex, pdOutputCurrentValue=pdOutputCurrentValue, pdnIndexOutput=pdnIndexOutput, fsStatusEntry=fsStatusEntry, wirelessConnCheckInterval=wirelessConnCheckInterval, acpmAvgVoltageLowClass=acpmAvgVoltageLowClass, ftpPushRemoteFileName=ftpPushRemoteFileName, evNoData2Sched1Duration=evNoData2Sched1Duration, evSched2TrapNum=evSched2TrapNum, evdName=evdName, s571UserTrap1123=s571UserTrap1123, acpmAvgVoltageHighClass=acpmAvgVoltageHighClass, sysTimeNetHostIndex=sysTimeNetHostIndex, s571UserTrap1050=s571UserTrap1050, ipRestrictionTable=ipRestrictionTable, console=console, ipRestrictionEntry=ipRestrictionEntry, espcAIIndexPoint=espcAIIndexPoint, evSched2=evSched2, acpmGenName=acpmGenName, espcAIConvLowValue=espcAIConvLowValue, eth2IPv6StaticRouter=eth2IPv6StaticRouter, sysAMProduct=sysAMProduct, fsDiscEnable=fsDiscEnable, pdMainPowerValue=pdMainPowerValue, ipv6DefaultRouter=ipv6DefaultRouter, evdCore=evdCore, interface=interface, esPointTimetickLastChange=esPointTimetickLastChange, portConfigMLRStartField1Text=portConfigMLRStartField1Text, s571UserTrap1010=s571UserTrap1010, eventSensorBasics=eventSensorBasics, acpmTRPSysrepEnable=acpmTRPSysrepEnable, evLogMaxSize=evLogMaxSize, acpmTRPDeadband=acpmTRPDeadband, cpeHost=cpeHost, ethernet=ethernet, eth1VLAN5ID=eth1VLAN5ID, pdnOutputCurrentDeadband=pdnOutputCurrentDeadband, snmpPRequestAgent=snmpPRequestAgent, snmpNtfnAttempts=snmpNtfnAttempts, s571UserTrap1122=s571UserTrap1122, actionPagerIndex=actionPagerIndex, ftpPushRemoteFileTable=ftpPushRemoteFileTable, secUserCallbackNumber3=secUserCallbackNumber3, pdOutputCurrentInEventState=pdOutputCurrentInEventState, esAnalogReportingMode=esAnalogReportingMode, actionEmailTable=actionEmailTable, fsVolumeVHighTrapNum=fsVolumeVHighTrapNum, eth2VLAN6SubnetMask=eth2VLAN6SubnetMask, routeTestAddressIndex=routeTestAddressIndex, s571UserTrap1151=s571UserTrap1151, sysTimeStampTimeFormat=sysTimeStampTimeFormat, dnsAddress=dnsAddress, event=event, portConfigMLRStartField2Text=portConfigMLRStartField2Text, evNoSensorActions=evNoSensorActions, scrNonVolatileStringIndex=scrNonVolatileStringIndex, s571UserTrap1140=s571UserTrap1140, espcAIVhighActions=espcAIVhighActions, espcTempHighTemp=espcTempHighTemp, evdClass=evdClass, s571UserTrap1059=s571UserTrap1059, sys=sys, acpmsAvgCurrentMinStr=acpmsAvgCurrentMinStr, acpmAvgVoltageNormalActions=acpmAvgVoltageNormalActions, acpmTPFEnable=acpmTPFEnable, evdMacroName=evdMacroName, pdnOutputCurrentInEventState=pdnOutputCurrentInEventState, sysAMSiteName=sysAMSiteName, s571UserTrap1002=s571UserTrap1002, fsTankIndex=fsTankIndex, s571UserTrap1139=s571UserTrap1139, auditLogStoreSHSK=auditLogStoreSHSK, eth2Router=eth2Router, fsDiscNormalTrapNum=fsDiscNormalTrapNum, aisgStatus=aisgStatus, acpmAvgCurrentHighValue=acpmAvgCurrentHighValue, acpmTRPLowValue=acpmTRPLowValue, s571UserTrap1183=s571UserTrap1183, acpmGenEntry=acpmGenEntry, s571UserTrap1196=s571UserTrap1196, sysLogListenPort=sysLogListenPort, acpmAvgVoltageVLowClass=acpmAvgVoltageVLowClass, esPointName=esPointName, eth2VLAN1Priority=eth2VLAN1Priority, rtsFileShowAnswer=rtsFileShowAnswer, esIndexES=esIndexES, espcHumidHighTrapnum=espcHumidHighTrapnum, s571UserTrap1023=s571UserTrap1023, consoleConfirm=consoleConfirm, modemInitString=modemInitString, snmpPRequestResultStatus=snmpPRequestResultStatus, esAnalogCombinedStatusBlock4=esAnalogCombinedStatusBlock4, evSched1TrapNum=evSched1TrapNum, aisgsALDEntry=aisgsALDEntry, espcTempScale=espcTempScale, eth2VLAN3ID=eth2VLAN3ID, auditLogStorePwdFailures=auditLogStorePwdFailures, sysLocLatitude=sysLocLatitude, modemCLIDLogEntry=modemCLIDLogEntry, acpmsCombined=acpmsCombined, s571UserTrap1089=s571UserTrap1089, s571FuelSensorDisconnectTrap=s571FuelSensorDisconnectTrap, s571StockPDCurrentTrap=s571StockPDCurrentTrap, s571UserTrap1186=s571UserTrap1186, s571UserTrap1005=s571UserTrap1005, wmsChannel=wmsChannel, ipRestrictionEnable=ipRestrictionEnable, espcTempEnable=espcTempEnable, actionCallNumber=actionCallNumber, evShskHighEntry=evShskHighEntry, acpmTPFVLowValue=acpmTPFVLowValue, esAnalogCombinedStatusBlock1=esAnalogCombinedStatusBlock1, s571UserTrap1143=s571UserTrap1143, aisgsALDAntennaModel=aisgsALDAntennaModel, eth1VLAN3Priority=eth1VLAN3Priority, eth1VLAN1=eth1VLAN1, acpmFreqHighTrapNum=acpmFreqHighTrapNum, evdEquation=evdEquation, s571UserTrap1174=s571UserTrap1174, scrEnable=scrEnable, pdMainVoltageLowVoltage=pdMainVoltageLowVoltage, wmsRevID=wmsRevID, evNoData1=evNoData1, trapIncludeSourceAddress=trapIncludeSourceAddress, acpmFreqVLowValue=acpmFreqVLowValue, s571UserTrap1115=s571UserTrap1115, s571UserTrap1069=s571UserTrap1069, acpmFreqSysrepLimit=acpmFreqSysrepLimit, acpmAvgVoltageLowValue=acpmAvgVoltageLowValue, acpmTRPNormalTrapNum=acpmTRPNormalTrapNum, cpeThreshold=cpeThreshold, ftpPushDirectory=ftpPushDirectory, ftpPushIncludeSeq=ftpPushIncludeSeq, s571UserTrap1105=s571UserTrap1105, pdnTable=pdnTable, evdMacroEntry=evdMacroEntry, evSched1Message=evSched1Message, espcTempVLowClass=espcTempVLowClass, scrNonVolatileIntIndex=scrNonVolatileIntIndex, ftpPushPermissions=ftpPushPermissions, hostIndex=hostIndex, evShskLowTable=evShskLowTable, fsTankDimA=fsTankDimA, esIndexPoint=esIndexPoint, portConfigHsk=portConfigHsk, eth1IPv6Static=eth1IPv6Static, pdOutputFuseValueStr=pdOutputFuseValueStr, acpmAvgCurrentEnable=acpmAvgCurrentEnable, s571UserTrap1094=s571UserTrap1094, eth2SubnetMask=eth2SubnetMask, snmpPRequestIndex=snmpPRequestIndex, acpmFreqVHighTrapNum=acpmFreqVHighTrapNum, cpeInfoNumLostResp=cpeInfoNumLostResp, pdMainCurrentDeadband=pdMainCurrentDeadband, acpmsIndex=acpmsIndex, s571StockScriptTrap=s571StockScriptTrap, s571UserTrap1192=s571UserTrap1192, acpmTRPVHighTrapNum=acpmTRPVHighTrapNum, evSched2Wednesday=evSched2Wednesday, eth1VLAN2Address=eth1VLAN2Address, ftpPushPassive=ftpPushPassive, scrNonVolatileStringEntry=scrNonVolatileStringEntry, s571UserTrap1085=s571UserTrap1085, acpmsRPPhaseBValueStr=acpmsRPPhaseBValueStr, s571StockHumidityTrap=s571StockHumidityTrap, s571UserTrap1173=s571UserTrap1173, fsGenInputPoint=fsGenInputPoint, secUserChallengeTelnetMode=secUserChallengeTelnetMode, rts=rts, wmsBScolor=wmsBScolor, modemCLIDEnable=modemCLIDEnable, portConfigEntry=portConfigEntry, acpmAvgCurrentSysrepThreshold=acpmAvgCurrentSysrepThreshold, pppHostIdleTimeout=pppHostIdleTimeout, fuelSensorTankTable=fuelSensorTankTable, eth1VLAN5=eth1VLAN5, espcTempHighActions=espcTempHighActions, fsVolumeVLowValue=fsVolumeVLowValue, pdnOutputCombinedStatusBlock2=pdnOutputCombinedStatusBlock2, secSSH=secSSH, evNoSensorTimeout=evNoSensorTimeout, espcHumidLowClass=espcHumidLowClass, s571UserTrap1175=s571UserTrap1175, eth1VLAN3ID=eth1VLAN3ID, acpmsTPFInEventState=acpmsTPFInEventState, pppDialSuggestIP=pppDialSuggestIP, fsVolumeVLowClass=fsVolumeVLowClass, acpmDisconnectNormalTrapNum=acpmDisconnectNormalTrapNum, s571UserTrap1128=s571UserTrap1128, evdFieldType=evdFieldType, s571UserTrap1103=s571UserTrap1103, acpmsPFPhaseCValueStr=acpmsPFPhaseCValueStr, sysAnswerString=sysAnswerString, espcOutputActiveTrapnum=espcOutputActiveTrapnum, actionEmailIndex=actionEmailIndex, evNoSensor=evNoSensor, ncpTimeout=ncpTimeout, s571UserTrap1098=s571UserTrap1098, secUserEventsReadAccess=secUserEventsReadAccess, s571UserTrap1136=s571UserTrap1136, fsDiscNormalClass=fsDiscNormalClass, webPort=webPort, s571FuelSensorVolumeSlowChangeTrap=s571FuelSensorVolumeSlowChangeTrap, pdSystemCurrent=pdSystemCurrent, eth2IPv6LinkLocalAddress=eth2IPv6LinkLocalAddress)
mibBuilder.exportSymbols("SITEBOSS-571-STD-MIB", eth1VLAN5Priority=eth1VLAN5Priority, eth2VLAN5Address=eth2VLAN5Address, espcTempIndexES=espcTempIndexES, evShskHighTable=evShskHighTable, acpmsTRcPMinStr=acpmsTRcPMinStr, evNoData2PortEnableTable=evNoData2PortEnableTable, actionEmailEntry=actionEmailEntry, thisProduct=thisProduct, s571StockPDVoltageTrap=s571StockPDVoltageTrap, acpmsTAPMaxStr=acpmsTAPMaxStr, snmpNotificationCaptureFile=snmpNotificationCaptureFile, s571UserTrap1082=s571UserTrap1082)
