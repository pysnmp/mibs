#
# PySNMP MIB module HHMSAGENT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/akcp/HHMSAGENT-MIB
# Produced by pysmi-1.1.12 at Mon Jun  3 13:04:12 2024
# On host fv-az883-299 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Integer32, enterprises, ObjectIdentity, ModuleIdentity, IpAddress, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Gauge32, NotificationType, MibIdentifier, Counter64, Counter32, Unsigned32, Bits, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "enterprises", "ObjectIdentity", "ModuleIdentity", "IpAddress", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Gauge32", "NotificationType", "MibIdentifier", "Counter64", "Counter32", "Unsigned32", "Bits", "iso")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
akcp = MibIdentifier((1, 3, 6, 1, 4, 1, 3854))
hhmsagent = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1))
hhmsAgentSummary = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 1))
hhmsAgentLocation = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hhmsAgentLocation.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsAgentLocation.setDescription('The Agent location')
hhmsAgentStatus = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("warning", 3), ("critical", 4), ("sensorError", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hhmsAgentStatus.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsAgentStatus.setDescription('The current status of this Agent. The status of the agent is the worst status of all the sensors usder the control of this agent.')
hhmsNumberBadSensors = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hhmsNumberBadSensors.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsNumberBadSensors.setDescription('How many sensors controlled by this agent are not functioning properly')
hhmsLocationBadSensor = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hhmsLocationBadSensor.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsLocationBadSensor.setDescription('The Location of the first bad sensor controlled by this agent.')
hhmsAgentManufName = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hhmsAgentManufName.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsAgentManufName.setDescription('The manufacturers name')
hhmsAgentHelpUrl = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hhmsAgentHelpUrl.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsAgentHelpUrl.setDescription('The URL of the web based help')
hhmsAgentHtmlView = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("sensorArray", 1), ("sensorArrayPro", 2), ("advanced", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hhmsAgentHtmlView.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsAgentHtmlView.setDescription('Which view of the sensors the user is served via the web server')
hhmsAgentHtmlStandardTitle = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hhmsAgentHtmlStandardTitle.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsAgentHtmlStandardTitle.setDescription('The titles of the standard html view')
hhmsAgentHtmlStandardButton = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 1, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hhmsAgentHtmlStandardButton.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsAgentHtmlStandardButton.setDescription('The buttons of the standard html view')
hhmsSensor = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2))
hhmsSensorArrayTable = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2))
hhmsSensorArrayEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1))
hhmsSensorArrayHost = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hhmsSensorArrayHost.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArrayHost.setDescription('The Host of this sensor, this is the IP address')
hhmsSensorArrayUseDHCP = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hhmsSensorArrayUseDHCP.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArrayUseDHCP.setDescription('To use DHCP enter a 1, to use a static IP address enter a 2')
hhmsSensorArrayMAC = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hhmsSensorArrayMAC.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArrayMAC.setDescription('The MAC address of this sensor.')
hhmsSensorArraySetCommunity = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hhmsSensorArraySetCommunity.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArraySetCommunity.setDescription('The sensorArray community string used for snmp Sets')
hhmsSensorArrayGetCommunity = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hhmsSensorArrayGetCommunity.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArrayGetCommunity.setDescription('The sensorArray community string used for snmp Gets')
hhmsSensorArrayDescription = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hhmsSensorArrayDescription.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArrayDescription.setDescription('A Description of this sensorArray')
hhmsSensorArrayLocation = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hhmsSensorArrayLocation.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArrayLocation.setDescription('The description of the physical location of this sensorArray')
hhmsSensorArrayLastUpdate = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hhmsSensorArrayLastUpdate.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArrayLastUpdate.setDescription('The last time the sensorArray was read')
hhmsSensorArrayStatus = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hhmsSensorArrayStatus.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArrayStatus.setDescription('The current status of this sensorArray')
hhmsSensorArrayOnline = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hhmsSensorArrayOnline.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArrayOnline.setDescription('If this sensorArray is currently online')
hhmsSensorArrayGoOnline = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hhmsSensorArrayGoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArrayGoOnline.setDescription('To put online enter a 1, to take offline enter a 2')
hhmsSensorArrayReadInterval = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hhmsSensorArrayReadInterval.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArrayReadInterval.setDescription('How many seconds between readings of this sensor')
hhmsSensorArrayReceiveTimeout = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hhmsSensorArrayReceiveTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArrayReceiveTimeout.setDescription('How many seconds to wait to receive data from the sensor')
hhmsSensorArrayReceiveRetries = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hhmsSensorArrayReceiveRetries.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArrayReceiveRetries.setDescription('How many times to retry to receive data before giving up. A -1 means never give up trying')
hhmsSensorArrayVersion = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hhmsSensorArrayVersion.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArrayVersion.setDescription('The version of this SensorArray')
hhmsSensorArrayTempTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16), )
if mibBuilder.loadTexts: hhmsSensorArrayTempTable.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArrayTempTable.setDescription('This table contains the data for every Temperature Sensor in the SensorArray. Each row in the table contains data for a different Temperature Sensor.')
hhmsSensorArrayTempEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1), ).setIndexNames((0, "HHMSAGENT-MIB", "hhmsSensorArrayTempIndex"))
if mibBuilder.loadTexts: hhmsSensorArrayTempEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArrayTempEntry.setDescription('This is an entry in the hhmsSensorArrayTempEntry Table')
hhmsSensorArrayTempDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hhmsSensorArrayTempDescription.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArrayTempDescription.setDescription('A Description of this sensor')
hhmsSensorArrayTempLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hhmsSensorArrayTempLocation.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArrayTempLocation.setDescription('The physical location of this sensor')
hhmsSensorArrayTempDegree = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hhmsSensorArrayTempDegree.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArrayTempDegree.setDescription('The degrees in this sensor')
hhmsSensorArrayTempStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hhmsSensorArrayTempStatus.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArrayTempStatus.setDescription('The current status of this Sensor')
hhmsSensorArrayTempOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hhmsSensorArrayTempOnline.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArrayTempOnline.setDescription('If this Sensor is currently online')
hhmsSensorArrayTempGoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hhmsSensorArrayTempGoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArrayTempGoOnline.setDescription('To put online enter a 1, to take offline enter a 2')
hhmsSensorArrayTempHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hhmsSensorArrayTempHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArrayTempHighWarning.setDescription('How hot this sensor gets before it sends a warning')
hhmsSensorArrayTempHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hhmsSensorArrayTempHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArrayTempHighCritical.setDescription('How hot this sensor gets before it sends a critical event')
hhmsSensorArrayTempLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hhmsSensorArrayTempLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArrayTempLowWarning.setDescription('How cold this sensor gets before it sends a warning')
hhmsSensorArrayTempLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hhmsSensorArrayTempLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArrayTempLowCritical.setDescription('How cold this sensor gets before it sends a critical event')
hhmsSensorArrayTempRearm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hhmsSensorArrayTempRearm.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArrayTempRearm.setDescription('The number of degrees to rearm the status. For example if status goes from normal to warning, the temp must go down hhmsTempRearm degrees below warning before the status goes to normal')
hhmsSensorArrayTempDegreeType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("fahr", 0), ("celsius", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hhmsSensorArrayTempDegreeType.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArrayTempDegreeType.setDescription('The degrees are in fahrenheit(0) or in celsius(1)')
hhmsSensorArrayTempSensorType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("type1", 0), ("type2", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hhmsSensorArrayTempSensorType.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArrayTempSensorType.setDescription('The type of temperture sensor')
hhmsSensorArrayTempTestStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("testNoStatus", 1), ("testNormal", 2), ("testHighWarning", 3), ("testHighCritical", 4), ("testLowWarning", 5), ("testLowCritical", 6), ("sensorError", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hhmsSensorArrayTempTestStatus.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArrayTempTestStatus.setDescription('Set the status for test purposes')
hhmsSensorArrayTempTestDegree = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hhmsSensorArrayTempTestDegree.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArrayTempTestDegree.setDescription('Enter the degrees in this sensor for test purposes')
hhmsSensorArrayTempIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hhmsSensorArrayTempIndex.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArrayTempIndex.setDescription('The index into the temperature sensor table')
hhmsSensorArrayHumidityTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17), )
if mibBuilder.loadTexts: hhmsSensorArrayHumidityTable.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArrayHumidityTable.setDescription('This table contains the data for every Humidity Sensor in the SensorArray. Each row in the table contains data for a different Humidity Sensor.')
hhmsSensorArrayHumidityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1), ).setIndexNames((0, "HHMSAGENT-MIB", "hhmsSensorArrayHumidityIndex"))
if mibBuilder.loadTexts: hhmsSensorArrayHumidityEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArrayHumidityEntry.setDescription('This is an entry in the hhmsSensorArrayHumidityEntry Table')
hhmsSensorArrayHumidityDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hhmsSensorArrayHumidityDescription.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArrayHumidityDescription.setDescription('A Description of this sensor')
hhmsSensorArrayHumidityLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hhmsSensorArrayHumidityLocation.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArrayHumidityLocation.setDescription('The physical location of this sensor')
hhmsSensorArrayHumidityPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hhmsSensorArrayHumidityPercent.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArrayHumidityPercent.setDescription('The relative humidity percentage measured by this sensor')
hhmsSensorArrayHumidityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hhmsSensorArrayHumidityStatus.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArrayHumidityStatus.setDescription('The current status of this Sensor')
hhmsSensorArrayHumidityOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hhmsSensorArrayHumidityOnline.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArrayHumidityOnline.setDescription('If this Sensor is currently online')
hhmsSensorArrayHumidityGoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hhmsSensorArrayHumidityGoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArrayHumidityGoOnline.setDescription('To put online enter a 1, to take offline enter a 2')
hhmsSensorArrayHumidityHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hhmsSensorArrayHumidityHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArrayHumidityHighWarning.setDescription('How high the relative humidity this sensor measures before it sends a warning')
hhmsSensorArrayHumidityHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hhmsSensorArrayHumidityHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArrayHumidityHighCritical.setDescription('How high the relative humidity this sensor measures before it becomes critical')
hhmsSensorArrayHumidityLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hhmsSensorArrayHumidityLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArrayHumidityLowWarning.setDescription('How low the relative humidity this sensor measures before it sends a warning')
hhmsSensorArrayHumidityLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hhmsSensorArrayHumidityLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArrayHumidityLowCritical.setDescription('How low the relative humidity this sensor measures before it becomes critical')
hhmsSensorArrayHumidityRearm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hhmsSensorArrayHumidityRearm.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArrayHumidityRearm.setDescription('The percent relative humidity to rearm the status. For example if status goes from normal to warning, the humidity must go down hhmsHumidityRearm below warning before the status goes to normal')
hhmsSensorArrayHumidityTestStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("testNoStatus", 1), ("testNormal", 2), ("testHighWarning", 3), ("testHighCritical", 4), ("testLowWarning", 5), ("testLowCritical", 6), ("sensorError", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hhmsSensorArrayHumidityTestStatus.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArrayHumidityTestStatus.setDescription('Set the status for test purposes')
hhmsSensorArrayHumidityTestPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hhmsSensorArrayHumidityTestPercent.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArrayHumidityTestPercent.setDescription('Enter the percent of relative humidity in this sensor for test purposes')
hhmsSensorArrayHumidityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hhmsSensorArrayHumidityIndex.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArrayHumidityIndex.setDescription('The index into the Humidity sensor table')
hhmsSensorArraySwitchTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18), )
if mibBuilder.loadTexts: hhmsSensorArraySwitchTable.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArraySwitchTable.setDescription('This table contains the data for every Switch Sensor in the SensorArray. Each row in the table contains data for a different Switch Sensor.')
hhmsSensorArraySwitchEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1), ).setIndexNames((0, "HHMSAGENT-MIB", "hhmsSensorArraySwitchIndex"))
if mibBuilder.loadTexts: hhmsSensorArraySwitchEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArraySwitchEntry.setDescription('This is an entry in the hhmsSensorArraySwitchEntry Table')
hhmsSensorArraySwitchDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hhmsSensorArraySwitchDescription.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArraySwitchDescription.setDescription('A Description of this sensor Switch')
hhmsSensorArraySwitchLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hhmsSensorArraySwitchLocation.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArraySwitchLocation.setDescription('The physical location of this sensor Switch')
hhmsSensorArraySwitchStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("critical", 4), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hhmsSensorArraySwitchStatus.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArraySwitchStatus.setDescription('The current status of this Sensor, only input switches have a status')
hhmsSensorArraySwitchOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hhmsSensorArraySwitchOnline.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArraySwitchOnline.setDescription('If this Sensor is currently online')
hhmsSensorArraySwitchGoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hhmsSensorArraySwitchGoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArraySwitchGoOnline.setDescription('To put online enter a 1, to take offline enter a 2')
hhmsSensorArraySwitchDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("input", 0), ("output", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hhmsSensorArraySwitchDirection.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArraySwitchDirection.setDescription('To set a switch to input enter 0. To set a switch to output enter 1')
hhmsSensorArraySwitchNormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("closed", 0), ("open", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hhmsSensorArraySwitchNormalState.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArraySwitchNormalState.setDescription('The normal state of an input switch. If an input switch is in this state it is normal, else it is critical. An open switch senses +5 volts. A closed switch senses 0 volts.')
hhmsSensorArraySwitchOutputLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("low", 0), ("high", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hhmsSensorArraySwitchOutputLevel.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArraySwitchOutputLevel.setDescription('An output swith can be set to this level')
hhmsSensorArraySwitchTestState = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("critical", 4), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hhmsSensorArraySwitchTestState.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArraySwitchTestState.setDescription('Enter the status of this Sensor for test purposes')
hhmsSensorArraySwitchIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hhmsSensorArraySwitchIndex.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArraySwitchIndex.setDescription('The index into the Switch sensor table')
hhmsSensorArraySerialTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19), )
if mibBuilder.loadTexts: hhmsSensorArraySerialTable.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArraySerialTable.setDescription('This table contains the data for every Serial Port in the SensorArray. Each row in the table contains data for a different Serial Port.')
hhmsSensorArraySerialEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 1), ).setIndexNames((0, "HHMSAGENT-MIB", "hhmsSensorArraySerialIndex"))
if mibBuilder.loadTexts: hhmsSensorArraySerialEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArraySerialEntry.setDescription('This is an entry in the hhmsSensorArraySerialEntry Table')
hhmsSensorArraySerialDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hhmsSensorArraySerialDescription.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArraySerialDescription.setDescription('A Description of this Serial Port')
hhmsSensorArraySerialLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hhmsSensorArraySerialLocation.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArraySerialLocation.setDescription('The physical location of this Serial Port')
hhmsSensorArraySerialStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("critical", 4), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hhmsSensorArraySerialStatus.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArraySerialStatus.setDescription('The current status of this Serial Port')
hhmsSensorArraySerialOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hhmsSensorArraySerialOnline.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArraySerialOnline.setDescription('If this Serial Port is currently online')
hhmsSensorArraySerialGoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hhmsSensorArraySerialGoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArraySerialGoOnline.setDescription('To put online enter a 1, to take offline enter a 2')
hhmsSensorArraySerialData = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hhmsSensorArraySerialData.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArraySerialData.setDescription('Write sends data, read gets data from this Serial Port')
hhmsSensorArraySerialBaud = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(255, 129, 64, 32, 15, 10, 7, 4, 2))).clone(namedValues=NamedValues(("baud1200", 255), ("baud2400", 129), ("baud4800", 64), ("baud9600", 32), ("baud19200", 15), ("baud28800", 10), ("baud38400", 7), ("baud57600", 4), ("baud115200", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hhmsSensorArraySerialBaud.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArraySerialBaud.setDescription('Choose the baud rate for this serial port')
hhmsSensorArraySerialDataBits = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(8))).clone(namedValues=NamedValues(("eight", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hhmsSensorArraySerialDataBits.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArraySerialDataBits.setDescription('Parity bit for this serial port')
hhmsSensorArraySerialParity = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("none", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hhmsSensorArraySerialParity.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArraySerialParity.setDescription('Parity bit for this serial port')
hhmsSensorArraySerialStop = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("one", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hhmsSensorArraySerialStop.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArraySerialStop.setDescription('Stop bits for this serial port')
hhmsSensorArraySerialCTS = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hhmsSensorArraySerialCTS.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArraySerialCTS.setDescription('Turn CTS on or off for this serial port')
hhmsSensorArraySerialRTS = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hhmsSensorArraySerialRTS.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArraySerialRTS.setDescription('Turn RTS on or off for this serial port')
hhmsSensorArraySerialConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 1, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hhmsSensorArraySerialConfig.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArraySerialConfig.setDescription('A Description of this Serial Port')
hhmsSensorArraySerialIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hhmsSensorArraySerialIndex.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArraySerialIndex.setDescription('The index into the Serial table')
hhmsSensorArrayDebug = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("on", 1), ("off", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hhmsSensorArrayDebug.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArrayDebug.setDescription('Turn on or off debug messages')
hhmsSensorArrayDebugIP = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 21), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hhmsSensorArrayDebugIP.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArrayDebugIP.setDescription('The IP address to send debug messages to')
hhmsSensorArrayTrapResend = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("on", 1), ("off", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hhmsSensorArrayTrapResend.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArrayTrapResend.setDescription('If traps for Warning or Error should be resent. Traps for Normal status are sent once')
hhmsSensorArrayTrapResendInterval = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hhmsSensorArrayTrapResendInterval.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArrayTrapResendInterval.setDescription('How often to resend mail or Traps. Enter the number of seconds from 15 to 65535. Mail for WARNING and ERROR are resent at this interval. Traps for Normal status are sent once')
hhmsSensorArraySendTraps = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hhmsSensorArraySendTraps.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArraySendTraps.setDescription('Turn on or off the sending of traps')
hhmsSensorArrayTrapDestination = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 25), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hhmsSensorArrayTrapDestination.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArrayTrapDestination.setDescription('The IP address of the trap destination')
hhmsSensorArrayTrapCommunity = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 26), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hhmsSensorArrayTrapCommunity.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArrayTrapCommunity.setDescription('The community string of the trap destination')
hhmsSensorArrayTrapDefaultGateway = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 27), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hhmsSensorArrayTrapDefaultGateway.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArrayTrapDefaultGateway.setDescription('If the trap destination is on another network, enter the IP address of the router')
hhmsSensorArrayTrapUseDefaultGateway = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hhmsSensorArrayTrapUseDefaultGateway.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArrayTrapUseDefaultGateway.setDescription('If the trap destination uses the default gateway')
hhmsSensorArrayTrapDestinationMac = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 29), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hhmsSensorArrayTrapDestinationMac.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArrayTrapDestinationMac.setDescription('If the trap destination MAC address')
hhmsSensorArraySendMail = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hhmsSensorArraySendMail.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArraySendMail.setDescription('Turn on or off the sending of Mail')
hhmsSensorArrayMailRecpt = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 31), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hhmsSensorArrayMailRecpt.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArrayMailRecpt.setDescription('The email address of the Recipient')
hhmsSensorArrayMailFrom = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 32), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hhmsSensorArrayMailFrom.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArrayMailFrom.setDescription('The email address of the Sender')
hhmsSensorArrayMailSmpt = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 33), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hhmsSensorArrayMailSmpt.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArrayMailSmpt.setDescription('The IP Address of the SMPT server. Note: This must be in dotted decimal form')
hhmsSensorArrayMailGateway = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 34), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hhmsSensorArrayMailGateway.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArrayMailGateway.setDescription('If the smpt server is on another network, enter the IP address of the router')
hhmsSensorArrayMailUseGateway = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hhmsSensorArrayMailUseGateway.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArrayMailUseGateway.setDescription('If the mail uses the default gateway')
hhmsSensorArrayMailResendInterval = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 36), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hhmsSensorArrayMailResendInterval.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArrayMailResendInterval.setDescription('How often to resend mail or Traps. Enter the number of seconds from 10 to 65535. Mail for WARNING and ERROR are resent at this interval. Mail for Normal status are sent once')
hhmsSensorArrayMailMaxResend = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 37), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hhmsSensorArrayMailMaxResend.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArrayMailMaxResend.setDescription('The maximum number of times to resend mail. If set to 0 only send once. The maximum value is 25')
hhmsSensorArrayMailDestinationMac = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 38), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hhmsSensorArrayMailDestinationMac.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArrayMailDestinationMac.setDescription('If the mail destination MAC address, either the smpt server or the gateway')
hhmsSensorArrayMailLastStatus = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 39), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hhmsSensorArrayMailLastStatus.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArrayMailLastStatus.setDescription('The status of the most recent attempt to send an email')
hhmsSensorArrayPowerControlTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 40), )
if mibBuilder.loadTexts: hhmsSensorArrayPowerControlTable.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArrayPowerControlTable.setDescription('This table contains the Power Control features in the sensorArray.')
hhmsSensorArrayPowerControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 40, 1), ).setIndexNames((0, "HHMSAGENT-MIB", "hhmsSensorArrayPowerControlIndex"))
if mibBuilder.loadTexts: hhmsSensorArrayPowerControlEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArrayPowerControlEntry.setDescription('This is an entry in the hhmsSensorArrayPowerControlEntry Table')
hhmsSensorArrayPowerModuleDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 40, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hhmsSensorArrayPowerModuleDescription.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArrayPowerModuleDescription.setDescription('A Description of this Power Module')
hhmsSensorArrayPowerModuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 40, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hhmsSensorArrayPowerModuleStatus.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArrayPowerModuleStatus.setDescription('The current status of this Sensor')
hhmsSensorArrayPowerModuleOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 40, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hhmsSensorArrayPowerModuleOnline.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArrayPowerModuleOnline.setDescription('If this Sensor is currently online')
hhmsSensorArrayPowerModuleGoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 40, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hhmsSensorArrayPowerModuleGoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArrayPowerModuleGoOnline.setDescription('To put online enter a 1, to take offline enter a 2')
hhmsSensorArrayPowerOutletDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 40, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hhmsSensorArrayPowerOutletDescription.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArrayPowerOutletDescription.setDescription('A Description of this Power Port')
hhmsSensorArrayPowerOutletStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 40, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("on", 2), ("off", 3), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hhmsSensorArrayPowerOutletStatus.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArrayPowerOutletStatus.setDescription('The current status of this Sensor')
hhmsSensorArrayPowerOutletSet = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 40, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("on", 2), ("off", 3), ("reboot", 4), ("sensorError", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hhmsSensorArrayPowerOutletSet.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArrayPowerOutletSet.setDescription('The current status of this Sensor')
hhmsSensorArrayPowerControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 40, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hhmsSensorArrayPowerControlIndex.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArrayPowerControlIndex.setDescription('The index into the Power Control table')
hhmsSensorArrayPowerMonitorTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 41), )
if mibBuilder.loadTexts: hhmsSensorArrayPowerMonitorTable.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArrayPowerMonitorTable.setDescription('This table contains the Power Monitor features in the sensorArray.')
hhmsSensorArrayPowerMonitorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 41, 1), ).setIndexNames((0, "HHMSAGENT-MIB", "hhmsSensorArrayPowerMonitorIndex"))
if mibBuilder.loadTexts: hhmsSensorArrayPowerMonitorEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArrayPowerMonitorEntry.setDescription('This is an entry in the hhmsSensorArrayPowerMonitorEntry Table')
hhmsSensorArrayPowerMonitorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 41, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hhmsSensorArrayPowerMonitorDescription.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArrayPowerMonitorDescription.setDescription('A Description of this Power Monitor')
hhmsSensorArrayPowerMonitorCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 41, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hhmsSensorArrayPowerMonitorCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArrayPowerMonitorCurrent.setDescription('The current in this sensor')
hhmsSensorArrayPowerMonitorVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 41, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hhmsSensorArrayPowerMonitorVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArrayPowerMonitorVoltage.setDescription('The voltage in this sensor')
hhmsSensorArrayPowerMonitorPower = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 41, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hhmsSensorArrayPowerMonitorPower.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArrayPowerMonitorPower.setDescription('The total energy measured so far by this sensor')
hhmsSensorArrayPowerMonitorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 41, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hhmsSensorArrayPowerMonitorStatus.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArrayPowerMonitorStatus.setDescription('The current status of this Sensor')
hhmsSensorArrayPowerMonitorOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 41, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hhmsSensorArrayPowerMonitorOnline.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArrayPowerMonitorOnline.setDescription('If this Sensor is currently online')
hhmsSensorArrayPowerMonitorGoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 41, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hhmsSensorArrayPowerMonitorGoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArrayPowerMonitorGoOnline.setDescription('To put online enter a 1, to take offline enter a 2')
hhmsSensorArrayPowerMonitorHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 41, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hhmsSensorArrayPowerMonitorHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArrayPowerMonitorHighWarning.setDescription('How many watts of power this sensor detects before the sensor status is set to warning')
hhmsSensorArrayPowerMonitorHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 41, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hhmsSensorArrayPowerMonitorHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArrayPowerMonitorHighCritical.setDescription('How many watts of power this sensor detects before the sensor status is set to critical')
hhmsSensorArrayPowerMonitorLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 41, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hhmsSensorArrayPowerMonitorLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArrayPowerMonitorLowWarning.setDescription('How many watts of power this sensor detects before the sensor status is set to warning')
hhmsSensorArrayPowerMonitorLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 41, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hhmsSensorArrayPowerMonitorLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArrayPowerMonitorLowCritical.setDescription('How many watts of power this sensor detects before the sensor status is set to critical')
hhmsSensorArrayPowerMonitorRearm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 41, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hhmsSensorArrayPowerMonitorRearm.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArrayPowerMonitorRearm.setDescription('How many watts of power this sensor detects to rearm the status. For example if status goes from normal to warning, the temp must go down hhmsTempRearm degrees below warning before the status goes to normal')
hhmsSensorArrayPowerMonitorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 41, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hhmsSensorArrayPowerMonitorIndex.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArrayPowerMonitorIndex.setDescription('The index into the Power table')
hhmsSensorArrayHighDriveTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 42), )
if mibBuilder.loadTexts: hhmsSensorArrayHighDriveTable.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArrayHighDriveTable.setDescription('This table contains the High Current Drivers in the sensorArray.')
hhmsSensorArrayHighDriveEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 42, 1), ).setIndexNames((0, "HHMSAGENT-MIB", "hhmsSensorArrayHighDriveIndex"))
if mibBuilder.loadTexts: hhmsSensorArrayHighDriveEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArrayHighDriveEntry.setDescription('This is an entry in the hhmsSensorArrayHighDriveEntry Table')
hhmsSensorArrayHighDriveDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 42, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hhmsSensorArrayHighDriveDescription.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArrayHighDriveDescription.setDescription('A Description of this Power Monitor')
hhmsSensorArrayHighDriveOutputLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 42, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("closed", 0), ("open", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hhmsSensorArrayHighDriveOutputLevel.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArrayHighDriveOutputLevel.setDescription('The Driver can be on or off. If closed the Open Collector will sink current. If open the Open Collector will tri state')
hhmsSensorArrayHighDriveIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 42, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hhmsSensorArrayHighDriveIndex.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArrayHighDriveIndex.setDescription('The index into the HighDrive table')
hhmsSensorArrayCameraTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 43), )
if mibBuilder.loadTexts: hhmsSensorArrayCameraTable.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArrayCameraTable.setDescription('This table contains the Camera features in the sensorArray.')
hhmsSensorArrayCameraEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 43, 1), ).setIndexNames((0, "HHMSAGENT-MIB", "hhmsSensorArrayCameraIndex"))
if mibBuilder.loadTexts: hhmsSensorArrayCameraEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArrayCameraEntry.setDescription('This is an entry in the hhmsSensorArrayCameraEntry Table')
hhmsSensorArrayCameraDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 43, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hhmsSensorArrayCameraDescription.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArrayCameraDescription.setDescription('A Description of this Camera')
hhmsSensorArrayCameraOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 43, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hhmsSensorArrayCameraOnline.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArrayCameraOnline.setDescription('If this Sensor is currently online')
hhmsSensorArrayCameraGoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 43, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hhmsSensorArrayCameraGoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArrayCameraGoOnline.setDescription('To put online enter a 1, to take offline enter a 2')
hhmsSensorArrayCameraUrlMain = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 43, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hhmsSensorArrayCameraUrlMain.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArrayCameraUrlMain.setDescription('The URL of the Camera, for example http://10.1.1.7')
hhmsSensorArrayCameraUrlExtension = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 43, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hhmsSensorArrayCameraUrlExtension.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArrayCameraUrlExtension.setDescription('The cgi extension for the Picture from this Camera for example /webcam/server.jpg')
hhmsSensorArrayCameraRefreshRate = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 43, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hhmsSensorArrayCameraRefreshRate.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArrayCameraRefreshRate.setDescription('How often to refresh the image on the browser in seconds from 5 to 254')
hhmsSensorArrayCameraIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 43, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hhmsSensorArrayCameraIndex.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArrayCameraIndex.setDescription('The index into the Camera table')
hhmsSensorArrayTrapMailPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 50), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hhmsSensorArrayTrapMailPollInterval.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArrayTrapMailPollInterval.setDescription('How often the sensor thresholds are tested before sending traps or mail. This can vary from 3 to 15 seconds')
hhmsSensorArraySendTestMail = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 51), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hhmsSensorArraySendTestMail.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArraySendTestMail.setDescription('Send out an email test message')
hhmsSensorArrayLastSystemError = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 52), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hhmsSensorArrayLastSystemError.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArrayLastSystemError.setDescription('A text string containing the description of the last system error')
hhmsSensorArrayDataCollectionPeriod = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 53), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hhmsSensorArrayDataCollectionPeriod.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArrayDataCollectionPeriod.setDescription('The number of minutes between collections of the data logger. This can vary from 1 to 60 minutes')
hhmsSensorArrayMailTimeout = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hhmsSensorArrayMailTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorArrayMailTimeout.setDescription('The number of seconds to wait for a timeout while sending email This can vary from 10 to 60 seconds')
hhmsAgentConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 5))
hhmsAgentVersion = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 5, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hhmsAgentVersion.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsAgentVersion.setDescription('The hhms agent release version number')
hhmsCompressedSummaryTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 1, 5, 7), )
if mibBuilder.loadTexts: hhmsCompressedSummaryTable.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsCompressedSummaryTable.setDescription('This table contains a way to get summary info to the browser using minimum communication. One get contains a PDU info from multiple sensorArrays')
hhmsCompressedSummaryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 1, 5, 7, 1), ).setIndexNames((0, "HHMSAGENT-MIB", "hhmsCompressedSummaryIndex"))
if mibBuilder.loadTexts: hhmsCompressedSummaryEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsCompressedSummaryEntry.setDescription('This is an entry in the hhmsCompressedSummary Table')
hhmsCompressedSummaryGet = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 5, 7, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hhmsCompressedSummaryGet.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsCompressedSummaryGet.setDescription('Get multiple compressed summary PDU')
hhmsCompressedSummaryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 5, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hhmsCompressedSummaryIndex.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsCompressedSummaryIndex.setDescription('The index into the compressed summary table')
hhmsAgentTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 7))
hhmsSensorStatus = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hhmsSensorStatus.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorStatus.setDescription('The current integer status of the sensor causing this trap to be sent')
hhmsSensorValue = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hhmsSensorValue.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorValue.setDescription('The current integer value of the sensor causing this trap to be sent')
hhmsSensorLevelExceeded = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 7, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hhmsSensorLevelExceeded.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorLevelExceeded.setDescription('The integer level that was exceeded causing this trap to be sent')
hhmsSensorIndex = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 7, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hhmsSensorIndex.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorIndex.setDescription('The integer index of the sensor causing this trap to be sent')
hhmsSensorName = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 7, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hhmsSensorName.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorName.setDescription('The name of the sensor causing this trap to be sent')
hhmsSensorDescription = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 7, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hhmsSensorDescription.setStatus('mandatory')
if mibBuilder.loadTexts: hhmsSensorDescription.setDescription('The description of the sensor causing this trap to be sent')
hhmsUnknownStatus = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,0))
if mibBuilder.loadTexts: hhmsUnknownStatus.setDescription('hhmsagent status went to Unknown')
hhmsNormalStatus = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,1))
if mibBuilder.loadTexts: hhmsNormalStatus.setDescription('hhmsagent status is Normal')
hhmsWarningStatus = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,2))
if mibBuilder.loadTexts: hhmsWarningStatus.setDescription('hhmsagent status went to Warning')
hhmsCriticalStatus = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,3))
if mibBuilder.loadTexts: hhmsCriticalStatus.setDescription('hhmsagent status went to Critical')
hhmsDownStatus = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,4))
if mibBuilder.loadTexts: hhmsDownStatus.setDescription('hhmsagent status went to Disabled')
hhmsTemperatureStatus = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,10)).setObjects(("HHMSAGENT-MIB", "hhmsSensorStatus"), ("HHMSAGENT-MIB", "hhmsSensorValue"), ("HHMSAGENT-MIB", "hhmsSensorLevelExceeded"), ("HHMSAGENT-MIB", "hhmsSensorIndex"), ("HHMSAGENT-MIB", "hhmsSensorName"), ("HHMSAGENT-MIB", "hhmsSensorDescription"))
if mibBuilder.loadTexts: hhmsTemperatureStatus.setDescription('Temperature sensor trap')
hhmsHumidityStatus = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,20)).setObjects(("HHMSAGENT-MIB", "hhmsSensorStatus"), ("HHMSAGENT-MIB", "hhmsSensorValue"), ("HHMSAGENT-MIB", "hhmsSensorLevelExceeded"), ("HHMSAGENT-MIB", "hhmsSensorIndex"), ("HHMSAGENT-MIB", "hhmsSensorName"), ("HHMSAGENT-MIB", "hhmsSensorDescription"))
if mibBuilder.loadTexts: hhmsHumidityStatus.setDescription('Humidity sensor trap')
hhmsSwitchStatus = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,30)).setObjects(("HHMSAGENT-MIB", "hhmsSensorStatus"), ("HHMSAGENT-MIB", "hhmsSensorValue"), ("HHMSAGENT-MIB", "hhmsSensorLevelExceeded"), ("HHMSAGENT-MIB", "hhmsSensorIndex"), ("HHMSAGENT-MIB", "hhmsSensorName"), ("HHMSAGENT-MIB", "hhmsSensorDescription"))
if mibBuilder.loadTexts: hhmsSwitchStatus.setDescription('Switch sensor trap')
hhmsPowerMonitorStatus = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,40)).setObjects(("HHMSAGENT-MIB", "hhmsSensorStatus"), ("HHMSAGENT-MIB", "hhmsSensorValue"), ("HHMSAGENT-MIB", "hhmsSensorLevelExceeded"), ("HHMSAGENT-MIB", "hhmsSensorIndex"), ("HHMSAGENT-MIB", "hhmsSensorName"), ("HHMSAGENT-MIB", "hhmsSensorDescription"))
if mibBuilder.loadTexts: hhmsPowerMonitorStatus.setDescription('Power Monitor sensor trap')
mibBuilder.exportSymbols("HHMSAGENT-MIB", hhmsSensorArrayHumidityLocation=hhmsSensorArrayHumidityLocation, hhmsSensorArrayMailLastStatus=hhmsSensorArrayMailLastStatus, hhmsSensorArraySerialTable=hhmsSensorArraySerialTable, hhmsSensorArraySerialGoOnline=hhmsSensorArraySerialGoOnline, hhmsSensorArrayPowerOutletSet=hhmsSensorArrayPowerOutletSet, hhmsSensorName=hhmsSensorName, akcp=akcp, hhmsSensor=hhmsSensor, hhmsSensorArrayHumidityTable=hhmsSensorArrayHumidityTable, hhmsSensorArraySerialOnline=hhmsSensorArraySerialOnline, hhmsSensorArrayMailTimeout=hhmsSensorArrayMailTimeout, hhmsSensorArrayPowerControlEntry=hhmsSensorArrayPowerControlEntry, hhmsSensorArraySwitchEntry=hhmsSensorArraySwitchEntry, hhmsSensorArrayMailUseGateway=hhmsSensorArrayMailUseGateway, hhmsSensorArrayTempStatus=hhmsSensorArrayTempStatus, hhmsSensorArraySerialDataBits=hhmsSensorArraySerialDataBits, hhmsSensorArraySendTestMail=hhmsSensorArraySendTestMail, hhmsSensorArrayHighDriveIndex=hhmsSensorArrayHighDriveIndex, hhmsSensorArraySerialDescription=hhmsSensorArraySerialDescription, hhmsSensorArrayTempLowWarning=hhmsSensorArrayTempLowWarning, hhmsSensorArraySerialRTS=hhmsSensorArraySerialRTS, hhmsAgentVersion=hhmsAgentVersion, hhmsSensorArrayPowerMonitorEntry=hhmsSensorArrayPowerMonitorEntry, hhmsSensorArrayPowerMonitorHighWarning=hhmsSensorArrayPowerMonitorHighWarning, hhmsSensorArrayHumidityHighWarning=hhmsSensorArrayHumidityHighWarning, hhmsSensorArrayPowerMonitorCurrent=hhmsSensorArrayPowerMonitorCurrent, hhmsSensorArrayHumidityLowWarning=hhmsSensorArrayHumidityLowWarning, hhmsSensorArrayPowerMonitorDescription=hhmsSensorArrayPowerMonitorDescription, hhmsSensorArrayCameraOnline=hhmsSensorArrayCameraOnline, hhmsSensorArraySetCommunity=hhmsSensorArraySetCommunity, hhmsSensorArraySendTraps=hhmsSensorArraySendTraps, hhmsSensorArrayDebugIP=hhmsSensorArrayDebugIP, hhmsSensorArrayTrapMailPollInterval=hhmsSensorArrayTrapMailPollInterval, hhmsSensorArrayDataCollectionPeriod=hhmsSensorArrayDataCollectionPeriod, hhmsSensorArrayPowerMonitorIndex=hhmsSensorArrayPowerMonitorIndex, hhmsWarningStatus=hhmsWarningStatus, hhmsSensorArrayPowerMonitorStatus=hhmsSensorArrayPowerMonitorStatus, hhmsSensorArrayVersion=hhmsSensorArrayVersion, hhmsSensorArrayTempTable=hhmsSensorArrayTempTable, hhmsCompressedSummaryEntry=hhmsCompressedSummaryEntry, hhmsLocationBadSensor=hhmsLocationBadSensor, hhmsSensorArrayMailRecpt=hhmsSensorArrayMailRecpt, hhmsSensorArraySwitchIndex=hhmsSensorArraySwitchIndex, hhmsSensorArraySerialStatus=hhmsSensorArraySerialStatus, hhmsSensorArraySwitchOnline=hhmsSensorArraySwitchOnline, hhmsSensorValue=hhmsSensorValue, hhmsagent=hhmsagent, hhmsAgentSummary=hhmsAgentSummary, hhmsHumidityStatus=hhmsHumidityStatus, hhmsCompressedSummaryTable=hhmsCompressedSummaryTable, hhmsSensorArrayTempSensorType=hhmsSensorArrayTempSensorType, hhmsSensorArraySwitchNormalState=hhmsSensorArraySwitchNormalState, hhmsSensorArrayHumidityDescription=hhmsSensorArrayHumidityDescription, hhmsSensorArrayHumidityIndex=hhmsSensorArrayHumidityIndex, hhmsNumberBadSensors=hhmsNumberBadSensors, hhmsAgentHtmlStandardButton=hhmsAgentHtmlStandardButton, hhmsSensorArraySerialEntry=hhmsSensorArraySerialEntry, hhmsSensorArrayLastSystemError=hhmsSensorArrayLastSystemError, hhmsSensorArrayReceiveRetries=hhmsSensorArrayReceiveRetries, hhmsSensorArrayTempTestDegree=hhmsSensorArrayTempTestDegree, hhmsSensorArrayMailFrom=hhmsSensorArrayMailFrom, hhmsSensorArrayMailGateway=hhmsSensorArrayMailGateway, hhmsSensorArrayPowerMonitorGoOnline=hhmsSensorArrayPowerMonitorGoOnline, hhmsAgentTraps=hhmsAgentTraps, hhmsPowerMonitorStatus=hhmsPowerMonitorStatus, hhmsSensorArrayPowerModuleDescription=hhmsSensorArrayPowerModuleDescription, hhmsSensorArrayHighDriveTable=hhmsSensorArrayHighDriveTable, hhmsSensorArrayCameraUrlExtension=hhmsSensorArrayCameraUrlExtension, hhmsSensorArraySerialConfig=hhmsSensorArraySerialConfig, hhmsSensorArrayHumidityTestPercent=hhmsSensorArrayHumidityTestPercent, hhmsSensorArrayTempEntry=hhmsSensorArrayTempEntry, hhmsUnknownStatus=hhmsUnknownStatus, hhmsSensorArraySerialCTS=hhmsSensorArraySerialCTS, hhmsSensorArrayLocation=hhmsSensorArrayLocation, hhmsSensorArrayPowerControlTable=hhmsSensorArrayPowerControlTable, hhmsSensorArraySwitchGoOnline=hhmsSensorArraySwitchGoOnline, hhmsSensorArraySwitchDescription=hhmsSensorArraySwitchDescription, hhmsSensorArrayPowerModuleStatus=hhmsSensorArrayPowerModuleStatus, hhmsSensorArrayHumidityRearm=hhmsSensorArrayHumidityRearm, hhmsAgentHtmlView=hhmsAgentHtmlView, hhmsSensorArrayHumidityTestStatus=hhmsSensorArrayHumidityTestStatus, hhmsSensorArrayReadInterval=hhmsSensorArrayReadInterval, hhmsSensorArrayHumidityOnline=hhmsSensorArrayHumidityOnline, hhmsSensorArraySwitchStatus=hhmsSensorArraySwitchStatus, hhmsSensorArraySerialBaud=hhmsSensorArraySerialBaud, hhmsSensorArrayTrapResendInterval=hhmsSensorArrayTrapResendInterval, hhmsSensorArrayHost=hhmsSensorArrayHost, hhmsSensorArrayHumidityLowCritical=hhmsSensorArrayHumidityLowCritical, hhmsSensorArrayTrapDestinationMac=hhmsSensorArrayTrapDestinationMac, hhmsSensorArrayCameraIndex=hhmsSensorArrayCameraIndex, hhmsSensorLevelExceeded=hhmsSensorLevelExceeded, hhmsSensorArrayDebug=hhmsSensorArrayDebug, hhmsSensorArraySwitchDirection=hhmsSensorArraySwitchDirection, hhmsSwitchStatus=hhmsSwitchStatus, hhmsAgentHtmlStandardTitle=hhmsAgentHtmlStandardTitle, hhmsSensorArrayPowerOutletDescription=hhmsSensorArrayPowerOutletDescription, hhmsNormalStatus=hhmsNormalStatus, hhmsSensorArrayPowerMonitorHighCritical=hhmsSensorArrayPowerMonitorHighCritical, hhmsAgentLocation=hhmsAgentLocation, hhmsTemperatureStatus=hhmsTemperatureStatus, hhmsSensorArrayPowerMonitorPower=hhmsSensorArrayPowerMonitorPower, hhmsSensorArrayCameraDescription=hhmsSensorArrayCameraDescription, hhmsSensorArrayTempHighWarning=hhmsSensorArrayTempHighWarning, hhmsSensorArraySwitchTestState=hhmsSensorArraySwitchTestState, hhmsAgentManufName=hhmsAgentManufName, hhmsSensorArrayHighDriveEntry=hhmsSensorArrayHighDriveEntry, hhmsSensorArraySwitchOutputLevel=hhmsSensorArraySwitchOutputLevel, hhmsSensorArrayHumidityGoOnline=hhmsSensorArrayHumidityGoOnline, hhmsSensorArrayCameraTable=hhmsSensorArrayCameraTable, hhmsSensorArraySerialStop=hhmsSensorArraySerialStop, hhmsSensorArrayTrapCommunity=hhmsSensorArrayTrapCommunity, hhmsSensorArrayTempOnline=hhmsSensorArrayTempOnline, hhmsSensorArrayTrapUseDefaultGateway=hhmsSensorArrayTrapUseDefaultGateway, hhmsSensorArrayPowerModuleGoOnline=hhmsSensorArrayPowerModuleGoOnline, hhmsSensorArrayPowerMonitorLowWarning=hhmsSensorArrayPowerMonitorLowWarning, hhmsSensorArrayGetCommunity=hhmsSensorArrayGetCommunity, hhmsSensorArrayTempDegreeType=hhmsSensorArrayTempDegreeType, hhmsSensorArrayTempHighCritical=hhmsSensorArrayTempHighCritical, hhmsSensorArrayPowerMonitorOnline=hhmsSensorArrayPowerMonitorOnline, hhmsSensorArrayUseDHCP=hhmsSensorArrayUseDHCP, hhmsSensorArrayTrapDestination=hhmsSensorArrayTrapDestination, hhmsSensorArraySwitchTable=hhmsSensorArraySwitchTable, hhmsAgentConfig=hhmsAgentConfig, hhmsSensorArrayHumidityPercent=hhmsSensorArrayHumidityPercent, hhmsSensorArrayTempRearm=hhmsSensorArrayTempRearm, hhmsSensorArrayGoOnline=hhmsSensorArrayGoOnline, hhmsSensorIndex=hhmsSensorIndex, hhmsAgentStatus=hhmsAgentStatus, hhmsSensorArrayOnline=hhmsSensorArrayOnline, hhmsSensorDescription=hhmsSensorDescription, hhmsSensorArrayPowerMonitorRearm=hhmsSensorArrayPowerMonitorRearm, hhmsSensorArrayReceiveTimeout=hhmsSensorArrayReceiveTimeout, hhmsSensorArrayTempTestStatus=hhmsSensorArrayTempTestStatus, hhmsSensorArrayHumidityStatus=hhmsSensorArrayHumidityStatus, hhmsSensorArrayStatus=hhmsSensorArrayStatus, hhmsSensorArrayDescription=hhmsSensorArrayDescription, hhmsAgentHelpUrl=hhmsAgentHelpUrl, hhmsCompressedSummaryGet=hhmsCompressedSummaryGet, hhmsSensorArraySwitchLocation=hhmsSensorArraySwitchLocation, hhmsSensorArrayCameraRefreshRate=hhmsSensorArrayCameraRefreshRate, hhmsSensorArrayEntry=hhmsSensorArrayEntry, hhmsSensorStatus=hhmsSensorStatus, hhmsSensorArrayHumidityEntry=hhmsSensorArrayHumidityEntry, hhmsSensorArraySerialData=hhmsSensorArraySerialData, hhmsSensorArrayHighDriveDescription=hhmsSensorArrayHighDriveDescription, hhmsSensorArrayPowerMonitorTable=hhmsSensorArrayPowerMonitorTable, hhmsSensorArrayTrapDefaultGateway=hhmsSensorArrayTrapDefaultGateway, hhmsSensorArrayPowerModuleOnline=hhmsSensorArrayPowerModuleOnline, hhmsCompressedSummaryIndex=hhmsCompressedSummaryIndex, hhmsSensorArrayTempIndex=hhmsSensorArrayTempIndex, hhmsSensorArrayLastUpdate=hhmsSensorArrayLastUpdate, hhmsSensorArrayTempLocation=hhmsSensorArrayTempLocation, hhmsSensorArrayPowerControlIndex=hhmsSensorArrayPowerControlIndex, hhmsSensorArraySendMail=hhmsSensorArraySendMail, hhmsSensorArrayTempDegree=hhmsSensorArrayTempDegree, hhmsSensorArrayTempGoOnline=hhmsSensorArrayTempGoOnline, hhmsSensorArraySerialIndex=hhmsSensorArraySerialIndex, hhmsSensorArrayPowerMonitorLowCritical=hhmsSensorArrayPowerMonitorLowCritical, hhmsSensorArraySerialLocation=hhmsSensorArraySerialLocation, hhmsSensorArrayTempDescription=hhmsSensorArrayTempDescription, hhmsSensorArrayMailDestinationMac=hhmsSensorArrayMailDestinationMac, hhmsSensorArrayMailResendInterval=hhmsSensorArrayMailResendInterval, hhmsSensorArrayTable=hhmsSensorArrayTable, hhmsSensorArrayMailSmpt=hhmsSensorArrayMailSmpt, hhmsSensorArrayPowerMonitorVoltage=hhmsSensorArrayPowerMonitorVoltage, hhmsDownStatus=hhmsDownStatus, hhmsSensorArrayTrapResend=hhmsSensorArrayTrapResend, hhmsSensorArrayHighDriveOutputLevel=hhmsSensorArrayHighDriveOutputLevel, hhmsSensorArrayCameraGoOnline=hhmsSensorArrayCameraGoOnline, hhmsSensorArrayCameraUrlMain=hhmsSensorArrayCameraUrlMain, hhmsSensorArraySerialParity=hhmsSensorArraySerialParity, hhmsCriticalStatus=hhmsCriticalStatus, hhmsSensorArrayHumidityHighCritical=hhmsSensorArrayHumidityHighCritical, hhmsSensorArrayMailMaxResend=hhmsSensorArrayMailMaxResend, hhmsSensorArrayPowerOutletStatus=hhmsSensorArrayPowerOutletStatus, hhmsSensorArrayCameraEntry=hhmsSensorArrayCameraEntry, hhmsSensorArrayTempLowCritical=hhmsSensorArrayTempLowCritical, hhmsSensorArrayMAC=hhmsSensorArrayMAC)
