#
# PySNMP MIB module IEEE8021-PBB-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/standard/iee/IEEE8021-PBB-MIB
# Produced by pysmi-1.1.12 at Tue May 28 12:44:13 2024
# On host fv-az847-244 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
ieee8021BridgeBasePortComponentId, ieee8021BridgeBasePort = mibBuilder.importSymbols("IEEE8021-BRIDGE-MIB", "ieee8021BridgeBasePortComponentId", "ieee8021BridgeBasePort")
IEEE8021PbbServiceIdentifier, IEEE8021PriorityCodePoint, IEEE8021BridgePortNumber, IEEE8021PriorityValue, IEEE8021PbbIngressEgress, ieee802dot1mibs, IEEE8021PbbComponentIdentifier, IEEE8021PbbServiceIdentifierOrUnassigned = mibBuilder.importSymbols("IEEE8021-TC-MIB", "IEEE8021PbbServiceIdentifier", "IEEE8021PriorityCodePoint", "IEEE8021BridgePortNumber", "IEEE8021PriorityValue", "IEEE8021PbbIngressEgress", "ieee802dot1mibs", "IEEE8021PbbComponentIdentifier", "IEEE8021PbbServiceIdentifierOrUnassigned")
InterfaceIndexOrZero, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero", "InterfaceIndex")
VlanId, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "VlanId")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
TimeTicks, NotificationType, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, Bits, Counter64, Integer32, ObjectIdentity, ModuleIdentity, Counter32, Unsigned32, iso, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "NotificationType", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "Bits", "Counter64", "Integer32", "ObjectIdentity", "ModuleIdentity", "Counter32", "Unsigned32", "iso", "Gauge32")
DisplayString, MacAddress, StorageType, RowStatus, TruthValue, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "MacAddress", "StorageType", "RowStatus", "TruthValue", "TextualConvention")
ieee8021PbbMib = ModuleIdentity((1, 3, 111, 2, 802, 1, 1, 9))
ieee8021PbbMib.setRevisions(('2018-06-28 00:00', '2014-12-15 00:00', '2011-02-27 00:00', '2008-11-18 00:00', '2008-10-15 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ieee8021PbbMib.setRevisionsDescriptions(('Published as part of IEEE Std 802.1Q-2018.\n            Cross references updated and corrected.', 'Published as part of IEEE Std 802.1Q 2014 revision.\n            Cross references updated and corrected.\n            ieee8021PbbVipType and ieee8021PbbCBPServiceMappingType\n            deprecated.', 'Minor edits to contact information etc. as part of \n          2011 revision of IEEE Std 802.1Q.', 'Modified VIP table to support the enableConnectionIdentifier\n         configuration option.', 'Initial version published in IEEE Std 802.1ap.',))
if mibBuilder.loadTexts: ieee8021PbbMib.setLastUpdated('201806280000Z')
if mibBuilder.loadTexts: ieee8021PbbMib.setOrganization('IEEE 802.1 Working Group')
if mibBuilder.loadTexts: ieee8021PbbMib.setContactInfo('  WG-URL: http://www.ieee802.org/1/\n         WG-EMail: stds-802-1-L@ieee.org\n\n          Contact: IEEE 802.1 Working Group Chair\n           Postal: C/O IEEE 802.1 Working Group\n                   IEEE Standards Association\n                   445 Hoes Lane\n                   Piscataway\n                   NJ 08854\n                   USA\n           E-mail: STDS-802-1-L@IEEE.ORG')
if mibBuilder.loadTexts: ieee8021PbbMib.setDescription('The Provider Backbone Bridge (PBB) MIB module for managing\n         devices that support PBB.\n\n         Unless otherwise indicated, the references in this MIB\n         module are to IEEE Std 802.1Q.\n\n         Copyright (C) IEEE (2018).\n         This version of this MIB module is part of IEEE Std 802.1Q;\n         see the draft itself for full legal notices.')
ieee8021PbbNotifications = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 9, 0))
ieee8021PbbObjects = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 9, 1))
ieee8021PbbConformance = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 9, 2))
ieee8021PbbProviderBackboneBridge = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 9, 1, 1))
ieee8021PbbBackboneEdgeBridgeObjects = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 9, 1, 1, 1))
ieee8021PbbBackboneEdgeBridgeAddress = MibScalar((1, 3, 111, 2, 802, 1, 1, 9, 1, 1, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021PbbBackboneEdgeBridgeAddress.setReference('12.16.1.1.3 a)')
if mibBuilder.loadTexts: ieee8021PbbBackboneEdgeBridgeAddress.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbBackboneEdgeBridgeAddress.setDescription('The MAC Address used by the BEB when it must be refered\n         to in a unique fashion.')
ieee8021PbbBackboneEdgeBridgeName = MibScalar((1, 3, 111, 2, 802, 1, 1, 9, 1, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021PbbBackboneEdgeBridgeName.setReference('12.16.1.1.3 b), 12.16.1.2.2')
if mibBuilder.loadTexts: ieee8021PbbBackboneEdgeBridgeName.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbBackboneEdgeBridgeName.setDescription('A text string of locally determined significance.  This value\n         must be persistent over power up restart/reboot.')
ieee8021PbbNumberOfIComponents = MibScalar((1, 3, 111, 2, 802, 1, 1, 9, 1, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021PbbNumberOfIComponents.setReference('12.16.1.1.3 c)')
if mibBuilder.loadTexts: ieee8021PbbNumberOfIComponents.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbNumberOfIComponents.setDescription('The number of I-components in this BEB.')
ieee8021PbbNumberOfBComponents = MibScalar((1, 3, 111, 2, 802, 1, 1, 9, 1, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021PbbNumberOfBComponents.setReference('12.16.1.1.3 e)')
if mibBuilder.loadTexts: ieee8021PbbNumberOfBComponents.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbNumberOfBComponents.setDescription('The number of B-components in this BEB.')
ieee8021PbbNumberOfBebPorts = MibScalar((1, 3, 111, 2, 802, 1, 1, 9, 1, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021PbbNumberOfBebPorts.setReference('12.16.1.1.3 g)')
if mibBuilder.loadTexts: ieee8021PbbNumberOfBebPorts.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbNumberOfBebPorts.setDescription('The number of CNPs, PIPs, CBPs, and PNPs in this BEB.')
ieee8021PbbNextAvailablePipIfIndex = MibScalar((1, 3, 111, 2, 802, 1, 1, 9, 1, 1, 1, 6), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021PbbNextAvailablePipIfIndex.setReference('12.16.4.1, 12.16.4.2')
if mibBuilder.loadTexts: ieee8021PbbNextAvailablePipIfIndex.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbNextAvailablePipIfIndex.setDescription('This object provides an available ifIndex value that can\n        be used for creation of a PIP.')
ieee8021PbbVipTable = MibTable((1, 3, 111, 2, 802, 1, 1, 9, 1, 1, 2), )
if mibBuilder.loadTexts: ieee8021PbbVipTable.setReference('12.16.3.1, 12.16.3.2')
if mibBuilder.loadTexts: ieee8021PbbVipTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbVipTable.setDescription('This table lists the additional PBB parameters for each\n         VIP.  Entries in this table must be persistent over power\n         up restart/reboot.')
ieee8021PbbVipEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 9, 1, 1, 2, 1), ).setIndexNames((0, "IEEE8021-BRIDGE-MIB", "ieee8021BridgeBasePortComponentId"), (0, "IEEE8021-BRIDGE-MIB", "ieee8021BridgeBasePort"))
if mibBuilder.loadTexts: ieee8021PbbVipEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbVipEntry.setDescription('Each entry consists of the name string, I-SID, Default\n         Destination MAC, Service Type, and possible B-MAC.')
ieee8021PbbVipPipIfIndex = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 9, 1, 1, 2, 1, 1), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021PbbVipPipIfIndex.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbVipPipIfIndex.setDescription('Identifies the PIP associated with this VIP within the BEB.\n         A value of zero indicates the VIP is not currently associated\n         with any PIP.\n\n        The value of this object must be persistent across\n        reinitializations of the management system.')
ieee8021PbbVipISid = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 9, 1, 1, 2, 1, 2), IEEE8021PbbServiceIdentifierOrUnassigned().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021PbbVipISid.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbVipISid.setDescription('The I-SID for this VIP.\n\n         Within an I-Component, an VIP can only be serviced\n         by one I-SID. And the ISID is a configurable parameter\n         of the VIP.\n\n        The value of this object must be persistent across\n        reinitializations of the management system.')
ieee8021PbbVipDefaultDstBMAC = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 9, 1, 1, 2, 1, 3), MacAddress().clone(hexValue="001e83000001")).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021PbbVipDefaultDstBMAC.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbVipDefaultDstBMAC.setDescription('The Default Destination B-MAC for this VIP.')
ieee8021PbbVipType = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 9, 1, 1, 2, 1, 4), IEEE8021PbbIngressEgress().clone(namedValues=NamedValues(("egress", 1), ("ingress", 0)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021PbbVipType.setStatus('deprecated')
if mibBuilder.loadTexts: ieee8021PbbVipType.setDescription('This feature is used to support asymmetic VLANs.\n\n        The value of this object must be persistent across\n        reinitializations of the management system.')
ieee8021PbbVipRowStatus = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 9, 1, 1, 2, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021PbbVipRowStatus.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbVipRowStatus.setDescription('This indicates the status of an entry in this table, and is\n        used to create/delete entries.\n\n        It is an implementation specific decision as to whether any\n        column in this table may be set while the corresponding\n        instance of this object is valid(1).\n\n        The value of this object must be persistent across\n        reinitializations of the management system.')
ieee8021PbbVipEnableConnectionId = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 9, 1, 1, 2, 1, 6), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021PbbVipEnableConnectionId.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbVipEnableConnectionId.setDescription('This indicates if the connection_identifier parameter is allowed\n         to learn associations between a backbone MAC address and a customer\n         MAC address.  The default value is true, indicating that such\n         learning is allowed.  This parameter should be configured to false\n         at the root node of a Point-to-multipoint TE service instance.')
ieee8021PbbISidToVipTable = MibTable((1, 3, 111, 2, 802, 1, 1, 9, 1, 1, 3), )
if mibBuilder.loadTexts: ieee8021PbbISidToVipTable.setReference('12.16.3.1, 12.16.3.2')
if mibBuilder.loadTexts: ieee8021PbbISidToVipTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbISidToVipTable.setDescription('This table contains a cross-reference of I-SID values\n         to the VIPs with which they are associated.  This allows\n         VIPs to be located easily by their associated I-SID.')
ieee8021PbbISidToVipEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 9, 1, 1, 3, 1), ).setIndexNames((0, "IEEE8021-PBB-MIB", "ieee8021PbbISidToVipISid"))
if mibBuilder.loadTexts: ieee8021PbbISidToVipEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbISidToVipEntry.setDescription('A mapping from an I-SID to the VIP whith which it is\n         associated.  An entry will exist for each entry in\n         the ieee8021PbbVipTable.')
ieee8021PbbISidToVipISid = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 9, 1, 1, 3, 1, 1), IEEE8021PbbServiceIdentifier())
if mibBuilder.loadTexts: ieee8021PbbISidToVipISid.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbISidToVipISid.setDescription('The I-SID of a VIP.')
ieee8021PbbISidToVipComponentId = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 9, 1, 1, 3, 1, 2), IEEE8021PbbComponentIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021PbbISidToVipComponentId.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbISidToVipComponentId.setDescription('The component identifier of the VIP to which this I-SID\n        is associated.')
ieee8021PbbISidToVipPort = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 9, 1, 1, 3, 1, 3), IEEE8021BridgePortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021PbbISidToVipPort.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbISidToVipPort.setDescription('The port number of the VIP to which this I-SID is associated.')
ieee8021PbbPipTable = MibTable((1, 3, 111, 2, 802, 1, 1, 9, 1, 1, 4), )
if mibBuilder.loadTexts: ieee8021PbbPipTable.setReference('12.16.4.1, 12.16.4.2')
if mibBuilder.loadTexts: ieee8021PbbPipTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbPipTable.setDescription('This table contains the parameters for each PIP, and\n         can be used to configure the PIP port names.  Entries\n         in this table must be persistent over power up\n         restart/reboot.')
ieee8021PbbPipEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 9, 1, 1, 4, 1), ).setIndexNames((0, "IEEE8021-PBB-MIB", "ieee8021PbbPipIfIndex"))
if mibBuilder.loadTexts: ieee8021PbbPipEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbPipEntry.setDescription('The parameters for a PIP.   ')
ieee8021PbbPipIfIndex = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 9, 1, 1, 4, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: ieee8021PbbPipIfIndex.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbPipIfIndex.setDescription('The number identifying the PIP.')
ieee8021PbbPipBMACAddress = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 9, 1, 1, 4, 1, 2), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021PbbPipBMACAddress.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbPipBMACAddress.setDescription('The B-MAC used by this PIP for the B-SA.')
ieee8021PbbPipName = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 9, 1, 1, 4, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021PbbPipName.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbPipName.setDescription('A text string of local significance which identifies the\n         PIP within a BEB.')
ieee8021PbbPipIComponentId = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 9, 1, 1, 4, 1, 4), IEEE8021PbbComponentIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021PbbPipIComponentId.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbPipIComponentId.setDescription('Identifies the I-component associated with this PIP.')
ieee8021PbbPipVipMap = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 9, 1, 1, 4, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512)).clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021PbbPipVipMap.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbPipVipMap.setDescription('This object contains a bitmap indicating all the VIPs\n         in the range 1 through 4094 that are associated with this\n         PIP.  The bits correspond to Bridge Port numbers in the\n         range 1 through 4094.  The high-order bit of the first\n         octet corresponds to port number 1, and subsequent bits\n         of the octet string correspond to subsequent port numbers.\n         The following formula can be used to find the bit\n         corresponding to a particular port number B:\n            octet[(B-1)/8] & (1 >> ((B-1)%8))\n         If the bit for a particular port number is 1, that VIP is\n         associated with this PIP.\n\n         The value of this object may be truncated to remove\n         trailing octets of all zeros.')
ieee8021PbbPipVipMap1 = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 9, 1, 1, 4, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 2048)).clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021PbbPipVipMap1.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbPipVipMap1.setDescription('This object contains a bitmap indicating all the VIPs\n         in the range 4095 through 20478 that are associated with\n         this PIP.  The bits correspond to Bridge Port numbers in\n         the range 4095 through 20478.  The high-order bit of the first\n         octet corresponds to port number 1, and subsequent bits\n         of the octet string correspond to subsequent port numbers.\n         The following formula can be used to find the bit\n         corresponding to a particular port number B:\n            octet[(B-4095)/8] & (1 >> ((B-4095)%8))\n         If the bit for a particular port number is 1, that VIP is\n         associated with this PIP.\n\n         Note that ports numbers greater than 4094 cannot be used\n         with xSTP.\n\n         The value of this object may be truncated to remove\n         trailing octets of all zeros.')
ieee8021PbbPipVipMap2 = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 9, 1, 1, 4, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 2048)).clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021PbbPipVipMap2.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbPipVipMap2.setDescription('This object contains a bitmap indicating all the VIPs\n         in the range 20479 through 36861 that are associated with\n         this PIP.  The bits correspond to Bridge Port numbers in\n         the range 20479 through 36861.  The high-order bit of the first\n         octet corresponds to port number 1, and subsequent bits\n         of the octet string correspond to subsequent port numbers.\n         The following formula can be used to find the bit\n         corresponding to a particular port number B:\n            octet[(B-20479)/8] & (1 >> ((B-20479)%8))\n         If the bit for a particular port number is 1, that VIP is\n         associated with this PIP.\n\n         Note that ports numbers greater than 4094 cannot be used\n         with xSTP.\n\n         The value of this object may be truncated to remove\n         trailing octets of all zeros.')
ieee8021PbbPipVipMap3 = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 9, 1, 1, 4, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 2048)).clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021PbbPipVipMap3.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbPipVipMap3.setDescription('This object contains a bitmap indicating all the VIPs\n         in the range 36862 through 53245 that are associated with\n         this PIP.  The bits correspond to Bridge Port numbers in\n         the range 36862 through 53245.  The high-order bit of the first\n         octet corresponds to port number 1, and subsequent bits\n         of the octet string correspond to subsequent port numbers.\n         The following formula can be used to find the bit\n         corresponding to a particular port number B:\n            octet[(B-36862)/8] & (1 >> ((B-36862)%8))\n         If the bit for a particular port number is 1, that VIP is\n         associated with this PIP.\n\n         Note that ports numbers greater than 4094 cannot be used\n         with xSTP.\n\n         The value of this object may be truncated to remove\n         trailing octets of all zeros.')
ieee8021PbbPipVipMap4 = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 9, 1, 1, 4, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1537)).clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021PbbPipVipMap4.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbPipVipMap4.setDescription('This object contains a bitmap indicating all the VIPs\n         in the range 53246 through 65535 that are associated with\n         this PIP.  The bits correspond to Bridge Port numbers in\n         the range 53246 through 65535.  The high-order bit of the first\n         octet corresponds to port number 1, and subsequent bits\n         of the octet string correspond to subsequent port numbers.\n         The following formula can be used to find the bit\n         corresponding to a particular port number B:\n            octet[(B-53246)/8] & (1 >> ((B-53246)%8))\n         If the bit for a particular port number is 1, that VIP is\n         associated with this PIP.\n\n         Note that ports numbers greater than 4094 cannot be used\n         with xSTP.\n\n         The value of this object may be truncated to remove\n         trailing octets of all zeros.')
ieee8021PbbPipRowStatus = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 9, 1, 1, 4, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021PbbPipRowStatus.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbPipRowStatus.setDescription('Indicates the status of an entry in this table, and is used\n        to create/delete entries.\n\n        The object ieee8021PbbPipBMACAddress must be set before this\n        object can be made active(1).\n\n        The value of ieee8021PbbPipBMACAddress cannot be modified\n        while this object is active(1).')
ieee8021PbbPipPriorityTable = MibTable((1, 3, 111, 2, 802, 1, 1, 9, 1, 1, 5), )
if mibBuilder.loadTexts: ieee8021PbbPipPriorityTable.setReference('12.16.4.1')
if mibBuilder.loadTexts: ieee8021PbbPipPriorityTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbPipPriorityTable.setDescription('A table that contains information about every PIP that\n        is associated with this PBB.')
ieee8021PbbPipPriorityEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 9, 1, 1, 5, 1), )
ieee8021PbbPipEntry.registerAugmentions(("IEEE8021-PBB-MIB", "ieee8021PbbPipPriorityEntry"))
ieee8021PbbPipPriorityEntry.setIndexNames(*ieee8021PbbPipEntry.getIndexNames())
if mibBuilder.loadTexts: ieee8021PbbPipPriorityEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbPipPriorityEntry.setDescription('A list of Default User Priorities for each PIP of a\n        PBB.  This is indexed by ieee8021PbbPipIfIndex.')
ieee8021PbbPipPriorityCodePointSelection = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 9, 1, 1, 5, 1, 1), IEEE8021PriorityCodePoint()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021PbbPipPriorityCodePointSelection.setReference('12.16.4.5, 12.16.4.6')
if mibBuilder.loadTexts: ieee8021PbbPipPriorityCodePointSelection.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbPipPriorityCodePointSelection.setDescription(' This object identifies the rows in the PCP encoding and\n          decoding tables that are used to remark frames on this\n          PIP if this remarking is enabled.')
ieee8021PbbPipUseDEI = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 9, 1, 1, 5, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021PbbPipUseDEI.setReference('12.16.4.11, 12.16.4.12')
if mibBuilder.loadTexts: ieee8021PbbPipUseDEI.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbPipUseDEI.setDescription('If the Use_DEI is set to true(1) for the PIP then the\n        drop_eligible parameter is encoded in the DEI of transmitted\n        frames, and the drop_eligible parameter shall be true(1) for a\n        received frame if the DEI is set in the VLAN tag or the Priority\n        Code Point Decoding Table indicates drop_eligible True for\n        the received PCP value. If the Use_DEI parameter is false(2),\n        the DEI shall be transmitted as zero and ignored on receipt.\n        The default value of the Use_DEI parameter is false(2).')
ieee8021PbbPipRequireDropEncoding = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 9, 1, 1, 5, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021PbbPipRequireDropEncoding.setReference('12.16.4.13, 12.16.4.14')
if mibBuilder.loadTexts: ieee8021PbbPipRequireDropEncoding.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbPipRequireDropEncoding.setDescription('If a Bridge supports encoding or decoding of drop_eligible\n        from the PCP field of a VLAN tag (6.7.3) on any of its PIPs,\n        then it shall implement a Boolean parameter Require Drop\n        Encoding on each of its PIPs with default value false(2). If\n        Require Drop Encoding is True and the PIP cannot\n        encode particular priorities with drop_eligible, then frames\n        queued with those priorities and drop_eligible true(1) shall\n        be discarded and not transmitted.')
ieee8021PbbPipDecodingTable = MibTable((1, 3, 111, 2, 802, 1, 1, 9, 1, 1, 6), )
if mibBuilder.loadTexts: ieee8021PbbPipDecodingTable.setReference('12.16.4.7, 12.16.4.8')
if mibBuilder.loadTexts: ieee8021PbbPipDecodingTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbPipDecodingTable.setDescription('A table that contains information about Priority Code\n        Point Decoding Table for a PIP of a provider Bridge.\n        Alternative values for each table are specified as rows\n        in Table 6-3 (6.9.3), with each alternative labeled by\n        the number of distinct priorities that can be communicated,\n        and the number of these for which drop precedence can\n        be communicated.  All writable objects in this table must\n        be persistent over power up restart/reboot.')
ieee8021PbbPipDecodingEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 9, 1, 1, 6, 1), ).setIndexNames((0, "IEEE8021-PBB-MIB", "ieee8021PbbPipIfIndex"), (0, "IEEE8021-PBB-MIB", "ieee8021PbbPipDecodingPriorityCodePointRow"), (0, "IEEE8021-PBB-MIB", "ieee8021PbbPipDecodingPriorityCodePoint"))
if mibBuilder.loadTexts: ieee8021PbbPipDecodingEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbPipDecodingEntry.setDescription('A list of objects containing Priority Code Point Decoding\n        information for a PIP of a provider Bridge.')
ieee8021PbbPipDecodingPriorityCodePointRow = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 9, 1, 1, 6, 1, 1), IEEE8021PriorityCodePoint())
if mibBuilder.loadTexts: ieee8021PbbPipDecodingPriorityCodePointRow.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbPipDecodingPriorityCodePointRow.setDescription('The specific row in Table 6-3 (6.9.3) indicating the PCP.')
ieee8021PbbPipDecodingPriorityCodePoint = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 9, 1, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)))
if mibBuilder.loadTexts: ieee8021PbbPipDecodingPriorityCodePoint.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbPipDecodingPriorityCodePoint.setDescription('The specific PCP value in Table 6-3 (6.9.3).')
ieee8021PbbPipDecodingPriority = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 9, 1, 1, 6, 1, 3), IEEE8021PriorityValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021PbbPipDecodingPriority.setReference('12.6.2.8, 12.6.2.9')
if mibBuilder.loadTexts: ieee8021PbbPipDecodingPriority.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbPipDecodingPriority.setDescription('The specific priority value in Table 6-3 (6.9.3).')
ieee8021PbbPipDecodingDropEligible = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 9, 1, 1, 6, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021PbbPipDecodingDropEligible.setReference('12.6.2.8, 12.6.2.9')
if mibBuilder.loadTexts: ieee8021PbbPipDecodingDropEligible.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbPipDecodingDropEligible.setDescription('The drop eligibility value in 12.6.2.8.')
ieee8021PbbPipEncodingTable = MibTable((1, 3, 111, 2, 802, 1, 1, 9, 1, 1, 7), )
if mibBuilder.loadTexts: ieee8021PbbPipEncodingTable.setReference('12.16.4.9, 12.16.4.10')
if mibBuilder.loadTexts: ieee8021PbbPipEncodingTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbPipEncodingTable.setDescription('A table that contains information about Priority Code\n        Point Decoding Table for a PIP of a provider Bridge.\n        Alternative values for each table are specified as rows\n        in Table 6-3 (6.9.3), with each alternative labeled by\n        the number of distinct priorities that can be communicated,\n        and the number of these for which drop precedence can be\n        communicated.  All writable objects in this table must be\n        persistent over power up restart/reboot.')
ieee8021PbbPipEncodingEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 9, 1, 1, 7, 1), ).setIndexNames((0, "IEEE8021-PBB-MIB", "ieee8021PbbPipIfIndex"), (0, "IEEE8021-PBB-MIB", "ieee8021PbbPipEncodingPriorityCodePointRow"), (0, "IEEE8021-PBB-MIB", "ieee8021PbbPipEncodingPriorityCodePoint"), (0, "IEEE8021-PBB-MIB", "ieee8021PbbPipEncodingDropEligible"))
if mibBuilder.loadTexts: ieee8021PbbPipEncodingEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbPipEncodingEntry.setDescription('A list of objects containing Priority Code Point Encoding\n        information for a PIP of a provider Bridge.')
ieee8021PbbPipEncodingPriorityCodePointRow = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 9, 1, 1, 7, 1, 1), IEEE8021PriorityCodePoint())
if mibBuilder.loadTexts: ieee8021PbbPipEncodingPriorityCodePointRow.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbPipEncodingPriorityCodePointRow.setDescription('The specific row in Table 6-3 (6.9.3)indicating the PCP row.\n         (i.e., 8P0D, 7P1D, 6P2D, 5P3D)')
ieee8021PbbPipEncodingPriorityCodePoint = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 9, 1, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)))
if mibBuilder.loadTexts: ieee8021PbbPipEncodingPriorityCodePoint.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbPipEncodingPriorityCodePoint.setDescription('The specific row in Table 6-3 (6.9.3) indicating the PCP.\n         (i.e., 0,1,2,3,4,5,6,7).')
ieee8021PbbPipEncodingDropEligible = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 9, 1, 1, 7, 1, 3), TruthValue())
if mibBuilder.loadTexts: ieee8021PbbPipEncodingDropEligible.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbPipEncodingDropEligible.setDescription('The specific row in Table 6-3 (6.9.3) indicating the drop\n         eligibility.  A value of true(1) means eligible for drop.')
ieee8021PbbPipEncodingPriority = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 9, 1, 1, 7, 1, 4), IEEE8021PriorityValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021PbbPipEncodingPriority.setReference('12.6.2.10, 12.6.2.11')
if mibBuilder.loadTexts: ieee8021PbbPipEncodingPriority.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbPipEncodingPriority.setDescription('The encoding priority in Table 6-3 (6.9.3).')
ieee8021PbbVipToPipMappingTable = MibTable((1, 3, 111, 2, 802, 1, 1, 9, 1, 1, 8), )
if mibBuilder.loadTexts: ieee8021PbbVipToPipMappingTable.setReference('12.16.4.3, 12.16.4.4')
if mibBuilder.loadTexts: ieee8021PbbVipToPipMappingTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbVipToPipMappingTable.setDescription('This table lists VIPs and the PIP to which each is\n         associated, and allows the PIP associated with each\n         VIP to be configured.  Entries in this table must be\n         persistent over power up restart/reboot.')
ieee8021PbbVipToPipMappingEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 9, 1, 1, 8, 1), ).setIndexNames((0, "IEEE8021-BRIDGE-MIB", "ieee8021BridgeBasePortComponentId"), (0, "IEEE8021-BRIDGE-MIB", "ieee8021BridgeBasePort"))
if mibBuilder.loadTexts: ieee8021PbbVipToPipMappingEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbVipToPipMappingEntry.setDescription(" The PIP is identified by the value of the\n           ieee8021PbbVipToPipNumber. This value may be used to\n           index the ieee8021PbbPipTable to set or retrieve the \n           PIP's configuration information")
ieee8021PbbVipToPipMappingPipIfIndex = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 9, 1, 1, 8, 1, 1), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021PbbVipToPipMappingPipIfIndex.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbVipToPipMappingPipIfIndex.setDescription("The PIP's interface number.")
ieee8021PbbVipToPipMappingStorageType = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 9, 1, 1, 8, 1, 2), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021PbbVipToPipMappingStorageType.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbVipToPipMappingStorageType.setDescription('Indicates the storage type of this entry.  An entry whose\n        storage type is permanent(4) need not allow write access to\n        other columns in that entry.')
ieee8021PbbVipToPipMappingRowStatus = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 9, 1, 1, 8, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021PbbVipToPipMappingRowStatus.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbVipToPipMappingRowStatus.setDescription('Indicates the status of an entry in this table, and is used\n        to create/delete entries.\n\n        The corresponding instance of ieee8021PbbVipToPipMappingPipIfIndex\n        must be set before this object can be made active(1).\n\n        The corresponding instance of ieee8021PbbVipToPipMappingPipIfIndex\n        may not be changed while this object is active(1).')
ieee8021PbbCBPServiceMappingTable = MibTable((1, 3, 111, 2, 802, 1, 1, 9, 1, 1, 9), )
if mibBuilder.loadTexts: ieee8021PbbCBPServiceMappingTable.setReference('12.16.5.1, 12.16.5.2')
if mibBuilder.loadTexts: ieee8021PbbCBPServiceMappingTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbCBPServiceMappingTable.setDescription('The CBP table of I-SID values (6.11).  The contents of this\n         table are not persistent over power up restart/reboot.')
ieee8021PbbCBPServiceMappingEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 9, 1, 1, 9, 1), ).setIndexNames((0, "IEEE8021-BRIDGE-MIB", "ieee8021BridgeBasePortComponentId"), (0, "IEEE8021-BRIDGE-MIB", "ieee8021BridgeBasePort"), (0, "IEEE8021-PBB-MIB", "ieee8021PbbCBPServiceMappingBackboneSid"))
if mibBuilder.loadTexts: ieee8021PbbCBPServiceMappingEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbCBPServiceMappingEntry.setDescription('Each entry includes the B-VID to carry and optionally an\n         I-SID for mapping I-SIDs normally used at a Peer E-NNI\n         (6.11, 26.6.2).  The table is indexed by the component ID \n         of the relevant B-Component of the PBB, the Bridge port\n         number of the CBP on that Bcomponent, and the I-SID for \n         the service. ')
ieee8021PbbCBPServiceMappingBackboneSid = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 9, 1, 1, 9, 1, 1), IEEE8021PbbServiceIdentifier())
if mibBuilder.loadTexts: ieee8021PbbCBPServiceMappingBackboneSid.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbCBPServiceMappingBackboneSid.setDescription('The I-SID which will be transmitted over the PBBN.')
ieee8021PbbCBPServiceMappingBVid = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 9, 1, 1, 9, 1, 2), VlanId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021PbbCBPServiceMappingBVid.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbCBPServiceMappingBVid.setDescription('The B-VID which will carry this service instance.')
ieee8021PbbCBPServiceMappingDefaultBackboneDest = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 9, 1, 1, 9, 1, 3), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021PbbCBPServiceMappingDefaultBackboneDest.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbCBPServiceMappingDefaultBackboneDest.setDescription('A default destination B-MAC for the CBP to use.')
ieee8021PbbCBPServiceMappingType = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 9, 1, 1, 9, 1, 4), IEEE8021PbbIngressEgress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021PbbCBPServiceMappingType.setStatus('deprecated')
if mibBuilder.loadTexts: ieee8021PbbCBPServiceMappingType.setDescription('Used for Pt-MPt service where ingress or egress limiting\n         is desired.')
ieee8021PbbCBPServiceMappingLocalSid = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 9, 1, 1, 9, 1, 5), IEEE8021PbbServiceIdentifierOrUnassigned().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021PbbCBPServiceMappingLocalSid.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbCBPServiceMappingLocalSid.setDescription('The I-SID value used in frames transmitted and received through\n         this CustomerBackbonePort.')
ieee8021PbbCBPServiceMappingRowStatus = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 9, 1, 1, 9, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021PbbCBPServiceMappingRowStatus.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbCBPServiceMappingRowStatus.setDescription('Indicates the status of an entry in this table, and is used\n        to create/delete entries.\n\n        The corresponding instances of the following objects\n        must be set before this object can be made active(1):\n            ieee8021PbbCBPServiceMappingBVid\n            ieee8021PbbCBPServiceMappingDefaultBackboneDest\n            ieee8021PbbCBPServiceMappingType\n\n        The corresponding instances of the following objects\n        may not be changed while this object is active(1):\n            ieee8021PbbCBPServiceMappingBVid\n            ieee8021PbbCBPServiceMappingDefaultBackboneDest\n            ieee8021PbbCBPServiceMappingType\n            ieee8021PbbCBPServiceMappingLocalSid')
ieee8021PbbCbpTable = MibTable((1, 3, 111, 2, 802, 1, 1, 9, 1, 1, 10), )
if mibBuilder.loadTexts: ieee8021PbbCbpTable.setReference('17.5.3.4')
if mibBuilder.loadTexts: ieee8021PbbCbpTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbCbpTable.setDescription('This table is used to dynamically create/delete Customer\n        Backbone Ports in a PBB.\n\n        Entries in this table must be persistent across reinitializations\n        of the management system.')
ieee8021PbbCbpEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 9, 1, 1, 10, 1), ).setIndexNames((0, "IEEE8021-BRIDGE-MIB", "ieee8021BridgeBasePortComponentId"), (0, "IEEE8021-BRIDGE-MIB", "ieee8021BridgeBasePort"))
if mibBuilder.loadTexts: ieee8021PbbCbpEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbCbpEntry.setDescription('An entry representing a dynamically created CBP in a PBB.')
ieee8021PbbCbpRowStatus = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 9, 1, 1, 10, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021PbbCbpRowStatus.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbCbpRowStatus.setDescription('This object is used for creation/deletion of entries in\n        this table.')
ieee8021PbbGroups = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 9, 2, 1))
ieee8021PbbCompliances = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 9, 2, 2))
ieee8021PbbBackboneEdgeBridgeGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 9, 2, 1, 1)).setObjects(("IEEE8021-PBB-MIB", "ieee8021PbbBackboneEdgeBridgeAddress"), ("IEEE8021-PBB-MIB", "ieee8021PbbBackboneEdgeBridgeName"), ("IEEE8021-PBB-MIB", "ieee8021PbbNumberOfIComponents"), ("IEEE8021-PBB-MIB", "ieee8021PbbNumberOfBComponents"), ("IEEE8021-PBB-MIB", "ieee8021PbbNumberOfBebPorts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021PbbBackboneEdgeBridgeGroup = ieee8021PbbBackboneEdgeBridgeGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbBackboneEdgeBridgeGroup.setDescription('The collection of objects used to represent a Backbone\n         Edge Bridge.')
ieee8021PbbVipGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 9, 2, 1, 2)).setObjects(("IEEE8021-PBB-MIB", "ieee8021PbbVipPipIfIndex"), ("IEEE8021-PBB-MIB", "ieee8021PbbVipISid"), ("IEEE8021-PBB-MIB", "ieee8021PbbVipDefaultDstBMAC"), ("IEEE8021-PBB-MIB", "ieee8021PbbVipType"), ("IEEE8021-PBB-MIB", "ieee8021PbbVipRowStatus"), ("IEEE8021-PBB-MIB", "ieee8021PbbISidToVipComponentId"), ("IEEE8021-PBB-MIB", "ieee8021PbbISidToVipPort"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021PbbVipGroup = ieee8021PbbVipGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbVipGroup.setDescription('The collection of objects used to represent a Virtual\n         Instance Port (VIP).')
ieee8021PbbPipGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 9, 2, 1, 3)).setObjects(("IEEE8021-PBB-MIB", "ieee8021PbbNextAvailablePipIfIndex"), ("IEEE8021-PBB-MIB", "ieee8021PbbPipBMACAddress"), ("IEEE8021-PBB-MIB", "ieee8021PbbPipName"), ("IEEE8021-PBB-MIB", "ieee8021PbbPipIComponentId"), ("IEEE8021-PBB-MIB", "ieee8021PbbPipVipMap"), ("IEEE8021-PBB-MIB", "ieee8021PbbPipVipMap1"), ("IEEE8021-PBB-MIB", "ieee8021PbbPipVipMap2"), ("IEEE8021-PBB-MIB", "ieee8021PbbPipVipMap3"), ("IEEE8021-PBB-MIB", "ieee8021PbbPipVipMap4"), ("IEEE8021-PBB-MIB", "ieee8021PbbPipRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021PbbPipGroup = ieee8021PbbPipGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbPipGroup.setDescription('The collection of objects used to represent a Provider\n         Instance Port (PIP).')
ieee8021PbbDefaultPriorityGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 9, 2, 1, 4)).setObjects(("IEEE8021-PBB-MIB", "ieee8021PbbPipPriorityCodePointSelection"), ("IEEE8021-PBB-MIB", "ieee8021PbbPipUseDEI"), ("IEEE8021-PBB-MIB", "ieee8021PbbPipRequireDropEncoding"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021PbbDefaultPriorityGroup = ieee8021PbbDefaultPriorityGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbDefaultPriorityGroup.setDescription('A collection of objects defining the priority\n        applicable to each port for media that do not support\n        native priority.')
ieee8021PbbPipDecodingGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 9, 2, 1, 5)).setObjects(("IEEE8021-PBB-MIB", "ieee8021PbbPipDecodingPriority"), ("IEEE8021-PBB-MIB", "ieee8021PbbPipDecodingDropEligible"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021PbbPipDecodingGroup = ieee8021PbbPipDecodingGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbPipDecodingGroup.setDescription('A collection of objects providing statistics counters for\n        decoding priority and drop eligibility for Bridge Ports.')
ieee8021PbbPipEncodingGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 9, 2, 1, 6)).setObjects(("IEEE8021-PBB-MIB", "ieee8021PbbPipEncodingPriority"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021PbbPipEncodingGroup = ieee8021PbbPipEncodingGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbPipEncodingGroup.setDescription('A collection of objects providing statistics counters for\n        encoding priority and drop eligibility for Bridge Ports.')
ieee8021PbbVipToPipMappingGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 9, 2, 1, 7)).setObjects(("IEEE8021-PBB-MIB", "ieee8021PbbVipToPipMappingPipIfIndex"), ("IEEE8021-PBB-MIB", "ieee8021PbbVipToPipMappingStorageType"), ("IEEE8021-PBB-MIB", "ieee8021PbbVipToPipMappingRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021PbbVipToPipMappingGroup = ieee8021PbbVipToPipMappingGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbVipToPipMappingGroup.setDescription('The collection of objects used to represent the mapping\n         of a VIP to a PIP.')
ieee8021PbbCBPServiceMappingGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 9, 2, 1, 8)).setObjects(("IEEE8021-PBB-MIB", "ieee8021PbbCBPServiceMappingBVid"), ("IEEE8021-PBB-MIB", "ieee8021PbbCBPServiceMappingDefaultBackboneDest"), ("IEEE8021-PBB-MIB", "ieee8021PbbCBPServiceMappingType"), ("IEEE8021-PBB-MIB", "ieee8021PbbCBPServiceMappingLocalSid"), ("IEEE8021-PBB-MIB", "ieee8021PbbCBPServiceMappingRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021PbbCBPServiceMappingGroup = ieee8021PbbCBPServiceMappingGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbCBPServiceMappingGroup.setDescription('The collection of objects used to represent a service instance.')
ieee8021PbbDynamicCbpGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 9, 2, 1, 9)).setObjects(("IEEE8021-PBB-MIB", "ieee8021PbbCbpRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021PbbDynamicCbpGroup = ieee8021PbbDynamicCbpGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbDynamicCbpGroup.setDescription('The collection of objects used to dynamically create/delete\n        CBPs in a PBB.')
ieee8021PbbVipPbbTeGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 9, 2, 1, 10)).setObjects(("IEEE8021-PBB-MIB", "ieee8021PbbVipEnableConnectionId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021PbbVipPbbTeGroup = ieee8021PbbVipPbbTeGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbVipPbbTeGroup.setDescription('The collection of objects specific to PBB Bridges operating\n         in a PBB-TE-aware manner.')
ieee8021PbbCompliance = ModuleCompliance((1, 3, 111, 2, 802, 1, 1, 9, 2, 2, 1)).setObjects(("IEEE8021-PBB-MIB", "ieee8021PbbBackboneEdgeBridgeGroup"), ("IEEE8021-PBB-MIB", "ieee8021PbbVipGroup"), ("IEEE8021-PBB-MIB", "ieee8021PbbPipGroup"), ("IEEE8021-PBB-MIB", "ieee8021PbbVipToPipMappingGroup"), ("IEEE8021-PBB-MIB", "ieee8021PbbCBPServiceMappingGroup"), ("IEEE8021-PBB-MIB", "ieee8021PbbDynamicCbpGroup"), ("IEEE8021-PBB-MIB", "ieee8021PbbDefaultPriorityGroup"), ("IEEE8021-PBB-MIB", "ieee8021PbbPipDecodingGroup"), ("IEEE8021-PBB-MIB", "ieee8021PbbPipEncodingGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021PbbCompliance = ieee8021PbbCompliance.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbCompliance.setDescription('The compliance statement for devices supporting Provider\n         Backbone Bridging as defined in IEEE Std 802.1ah.')
ieee8021PbbWithPbbTeCompliance = ModuleCompliance((1, 3, 111, 2, 802, 1, 1, 9, 2, 2, 2)).setObjects(("IEEE8021-PBB-MIB", "ieee8021PbbBackboneEdgeBridgeGroup"), ("IEEE8021-PBB-MIB", "ieee8021PbbVipGroup"), ("IEEE8021-PBB-MIB", "ieee8021PbbPipGroup"), ("IEEE8021-PBB-MIB", "ieee8021PbbVipToPipMappingGroup"), ("IEEE8021-PBB-MIB", "ieee8021PbbCBPServiceMappingGroup"), ("IEEE8021-PBB-MIB", "ieee8021PbbDynamicCbpGroup"), ("IEEE8021-PBB-MIB", "ieee8021PbbVipPbbTeGroup"), ("IEEE8021-PBB-MIB", "ieee8021PbbDefaultPriorityGroup"), ("IEEE8021-PBB-MIB", "ieee8021PbbPipDecodingGroup"), ("IEEE8021-PBB-MIB", "ieee8021PbbPipEncodingGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021PbbWithPbbTeCompliance = ieee8021PbbWithPbbTeCompliance.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbbWithPbbTeCompliance.setDescription('The compliance statement for devices supporting Provider\n         Backbone Bridging with traffic engineering as defined in IEEE Std 802.1ah\n        and IEEE Std 802.1Qay.')
mibBuilder.exportSymbols("IEEE8021-PBB-MIB", ieee8021PbbDefaultPriorityGroup=ieee8021PbbDefaultPriorityGroup, ieee8021PbbConformance=ieee8021PbbConformance, ieee8021PbbPipEncodingDropEligible=ieee8021PbbPipEncodingDropEligible, ieee8021PbbISidToVipComponentId=ieee8021PbbISidToVipComponentId, ieee8021PbbVipType=ieee8021PbbVipType, PYSNMP_MODULE_ID=ieee8021PbbMib, ieee8021PbbNumberOfBebPorts=ieee8021PbbNumberOfBebPorts, ieee8021PbbPipEncodingPriorityCodePointRow=ieee8021PbbPipEncodingPriorityCodePointRow, ieee8021PbbCbpRowStatus=ieee8021PbbCbpRowStatus, ieee8021PbbPipUseDEI=ieee8021PbbPipUseDEI, ieee8021PbbCBPServiceMappingEntry=ieee8021PbbCBPServiceMappingEntry, ieee8021PbbCBPServiceMappingTable=ieee8021PbbCBPServiceMappingTable, ieee8021PbbPipDecodingGroup=ieee8021PbbPipDecodingGroup, ieee8021PbbPipVipMap4=ieee8021PbbPipVipMap4, ieee8021PbbVipPbbTeGroup=ieee8021PbbVipPbbTeGroup, ieee8021PbbCBPServiceMappingRowStatus=ieee8021PbbCBPServiceMappingRowStatus, ieee8021PbbVipToPipMappingTable=ieee8021PbbVipToPipMappingTable, ieee8021PbbPipEncodingPriorityCodePoint=ieee8021PbbPipEncodingPriorityCodePoint, ieee8021PbbBackboneEdgeBridgeGroup=ieee8021PbbBackboneEdgeBridgeGroup, ieee8021PbbProviderBackboneBridge=ieee8021PbbProviderBackboneBridge, ieee8021PbbPipEntry=ieee8021PbbPipEntry, ieee8021PbbGroups=ieee8021PbbGroups, ieee8021PbbCBPServiceMappingGroup=ieee8021PbbCBPServiceMappingGroup, ieee8021PbbObjects=ieee8021PbbObjects, ieee8021PbbBackboneEdgeBridgeName=ieee8021PbbBackboneEdgeBridgeName, ieee8021PbbPipIComponentId=ieee8021PbbPipIComponentId, ieee8021PbbVipToPipMappingPipIfIndex=ieee8021PbbVipToPipMappingPipIfIndex, ieee8021PbbCbpTable=ieee8021PbbCbpTable, ieee8021PbbPipIfIndex=ieee8021PbbPipIfIndex, ieee8021PbbVipEnableConnectionId=ieee8021PbbVipEnableConnectionId, ieee8021PbbPipEncodingTable=ieee8021PbbPipEncodingTable, ieee8021PbbVipGroup=ieee8021PbbVipGroup, ieee8021PbbISidToVipEntry=ieee8021PbbISidToVipEntry, ieee8021PbbPipBMACAddress=ieee8021PbbPipBMACAddress, ieee8021PbbCBPServiceMappingType=ieee8021PbbCBPServiceMappingType, ieee8021PbbCBPServiceMappingLocalSid=ieee8021PbbCBPServiceMappingLocalSid, ieee8021PbbISidToVipTable=ieee8021PbbISidToVipTable, ieee8021PbbWithPbbTeCompliance=ieee8021PbbWithPbbTeCompliance, ieee8021PbbPipDecodingPriorityCodePointRow=ieee8021PbbPipDecodingPriorityCodePointRow, ieee8021PbbVipToPipMappingRowStatus=ieee8021PbbVipToPipMappingRowStatus, ieee8021PbbNotifications=ieee8021PbbNotifications, ieee8021PbbPipName=ieee8021PbbPipName, ieee8021PbbPipEncodingGroup=ieee8021PbbPipEncodingGroup, ieee8021PbbVipToPipMappingStorageType=ieee8021PbbVipToPipMappingStorageType, ieee8021PbbPipRowStatus=ieee8021PbbPipRowStatus, ieee8021PbbISidToVipPort=ieee8021PbbISidToVipPort, ieee8021PbbPipPriorityTable=ieee8021PbbPipPriorityTable, ieee8021PbbPipEncodingPriority=ieee8021PbbPipEncodingPriority, ieee8021PbbVipDefaultDstBMAC=ieee8021PbbVipDefaultDstBMAC, ieee8021PbbPipVipMap2=ieee8021PbbPipVipMap2, ieee8021PbbCbpEntry=ieee8021PbbCbpEntry, ieee8021PbbBackboneEdgeBridgeObjects=ieee8021PbbBackboneEdgeBridgeObjects, ieee8021PbbBackboneEdgeBridgeAddress=ieee8021PbbBackboneEdgeBridgeAddress, ieee8021PbbVipToPipMappingEntry=ieee8021PbbVipToPipMappingEntry, ieee8021PbbPipVipMap1=ieee8021PbbPipVipMap1, ieee8021PbbPipVipMap3=ieee8021PbbPipVipMap3, ieee8021PbbVipISid=ieee8021PbbVipISid, ieee8021PbbPipPriorityCodePointSelection=ieee8021PbbPipPriorityCodePointSelection, ieee8021PbbPipDecodingTable=ieee8021PbbPipDecodingTable, ieee8021PbbVipPipIfIndex=ieee8021PbbVipPipIfIndex, ieee8021PbbPipVipMap=ieee8021PbbPipVipMap, ieee8021PbbMib=ieee8021PbbMib, ieee8021PbbNumberOfBComponents=ieee8021PbbNumberOfBComponents, ieee8021PbbPipDecodingDropEligible=ieee8021PbbPipDecodingDropEligible, ieee8021PbbCBPServiceMappingDefaultBackboneDest=ieee8021PbbCBPServiceMappingDefaultBackboneDest, ieee8021PbbPipTable=ieee8021PbbPipTable, ieee8021PbbPipGroup=ieee8021PbbPipGroup, ieee8021PbbPipDecodingEntry=ieee8021PbbPipDecodingEntry, ieee8021PbbCBPServiceMappingBackboneSid=ieee8021PbbCBPServiceMappingBackboneSid, ieee8021PbbDynamicCbpGroup=ieee8021PbbDynamicCbpGroup, ieee8021PbbPipRequireDropEncoding=ieee8021PbbPipRequireDropEncoding, ieee8021PbbNumberOfIComponents=ieee8021PbbNumberOfIComponents, ieee8021PbbPipDecodingPriorityCodePoint=ieee8021PbbPipDecodingPriorityCodePoint, ieee8021PbbVipRowStatus=ieee8021PbbVipRowStatus, ieee8021PbbCBPServiceMappingBVid=ieee8021PbbCBPServiceMappingBVid, ieee8021PbbVipEntry=ieee8021PbbVipEntry, ieee8021PbbPipPriorityEntry=ieee8021PbbPipPriorityEntry, ieee8021PbbVipToPipMappingGroup=ieee8021PbbVipToPipMappingGroup, ieee8021PbbCompliance=ieee8021PbbCompliance, ieee8021PbbISidToVipISid=ieee8021PbbISidToVipISid, ieee8021PbbVipTable=ieee8021PbbVipTable, ieee8021PbbCompliances=ieee8021PbbCompliances, ieee8021PbbPipDecodingPriority=ieee8021PbbPipDecodingPriority, ieee8021PbbNextAvailablePipIfIndex=ieee8021PbbNextAvailablePipIfIndex, ieee8021PbbPipEncodingEntry=ieee8021PbbPipEncodingEntry)
