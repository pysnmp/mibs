#
# PySNMP MIB module ARRIS-C3-STATS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/arris/ARRIS-C3-STATS-MIB
# Produced by pysmi-1.1.12 at Tue Sep 17 12:54:14 2024
# On host fv-az1215-438 platform Linux version 6.5.0-1025-azure by user runner
# Using Python version 3.10.14 (main, Jul 16 2024, 19:03:10) [GCC 11.4.0]
#
cmtsC3, = mibBuilder.importSymbols("ARRIS-MIB", "cmtsC3")
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint")
docsIfCmtsServiceEntry, = mibBuilder.importSymbols("DOCS-IF-MIB", "docsIfCmtsServiceEntry")
ifIndex, InterfaceIndexOrZero = mibBuilder.importSymbols("IF-MIB", "ifIndex", "InterfaceIndexOrZero")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibIdentifier, Counter32, Integer32, enterprises, ObjectIdentity, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, TimeTicks, NotificationType, ModuleIdentity, Gauge32, Bits, iso, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Counter32", "Integer32", "enterprises", "ObjectIdentity", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "TimeTicks", "NotificationType", "ModuleIdentity", "Gauge32", "Bits", "iso", "Unsigned32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
cmtsC3StatsMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 1))
if mibBuilder.loadTexts: cmtsC3StatsMIB.setLastUpdated('200308200000Z')
if mibBuilder.loadTexts: cmtsC3StatsMIB.setOrganization('Arris International')
if mibBuilder.loadTexts: cmtsC3StatsMIB.setContactInfo('   Network Management\n                Postal: Arris International.\n                        4400 Cork Airport Business Park\n                        Cork Airport, Kinsale Road\n                        Cork, Ireland.\n                Tel:    +353 21 7305 800\n                Fax:    +353 21 4321 972')
if mibBuilder.loadTexts: cmtsC3StatsMIB.setDescription('This MIB manages proprietary statistics on the Arris CMTS C3')
dcxUpstreamStatsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 1, 1))
dcxUpstreamStatsTable = MibTable((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 1, 1, 1), )
if mibBuilder.loadTexts: dcxUpstreamStatsTable.setStatus('current')
if mibBuilder.loadTexts: dcxUpstreamStatsTable.setDescription('.')
dcxUpstreamStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 1, 1, 1, 1), ).setIndexNames((0, "ARRIS-C3-STATS-MIB", "dcxUsStatsIfIndex"))
if mibBuilder.loadTexts: dcxUpstreamStatsEntry.setStatus('current')
if mibBuilder.loadTexts: dcxUpstreamStatsEntry.setDescription('Counts the modems on each upstream by state. The states are as defined\n                     by the DOCS-IF-MIB variable docsIfCmtsCmStatusValue')
dcxUsStatsOther = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 1, 1, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcxUsStatsOther.setStatus('current')
if mibBuilder.loadTexts: dcxUsStatsOther.setDescription('Number of modems on this upstream in state docsIfCmtsCmStatusValue_other')
dcxUsStatsRanging = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 1, 1, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcxUsStatsRanging.setStatus('current')
if mibBuilder.loadTexts: dcxUsStatsRanging.setDescription('Number of modems on this upstream in state docsIfCmtsCmStatusValue_ranging')
dcxUsStatsRngAborted = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 1, 1, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcxUsStatsRngAborted.setStatus('current')
if mibBuilder.loadTexts: dcxUsStatsRngAborted.setDescription('Number of modems on this upstream in state docsIfCmtsCmStatusValue_rangingAborted')
dcxUsStatsRngComplete = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 1, 1, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcxUsStatsRngComplete.setStatus('current')
if mibBuilder.loadTexts: dcxUsStatsRngComplete.setDescription('Number of modems on this upstream in state docsIfCmtsCmStatusValue_rangingComplete')
dcxUsStatsIpComplete = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 1, 1, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcxUsStatsIpComplete.setStatus('current')
if mibBuilder.loadTexts: dcxUsStatsIpComplete.setDescription('Number of modems on this upstream in state docsIfCmtsCmStatusValue_ipComplete')
dcxUsStatsRegComplete = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 1, 1, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcxUsStatsRegComplete.setStatus('current')
if mibBuilder.loadTexts: dcxUsStatsRegComplete.setDescription('Number of modems on this upstream in state docsIfCmtsCmStatusValue_registrationComplete')
dcxUsStatsAccessDenied = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 1, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcxUsStatsAccessDenied.setStatus('current')
if mibBuilder.loadTexts: dcxUsStatsAccessDenied.setDescription('Number of modems on this upstream in state docsIfCmtsCmStatusValue_accessDenied')
dcxUsStatsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 1, 1, 1, 1, 8), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcxUsStatsIfIndex.setStatus('current')
if mibBuilder.loadTexts: dcxUsStatsIfIndex.setDescription('ifIndex of the upstream interface corresponding to this row')
dcxCmtsServiceStatsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 1, 2))
dcxCmtsServiceTable = MibTable((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 1, 2, 1), )
if mibBuilder.loadTexts: dcxCmtsServiceTable.setStatus('current')
if mibBuilder.loadTexts: dcxCmtsServiceTable.setDescription('The table augments the D1.0 docsIfCmtsServiceTable with downstream variables.')
dcxCmtsServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 1, 2, 1, 1), )
docsIfCmtsServiceEntry.registerAugmentions(("ARRIS-C3-STATS-MIB", "dcxCmtsServiceEntry"))
dcxCmtsServiceEntry.setIndexNames(*docsIfCmtsServiceEntry.getIndexNames())
if mibBuilder.loadTexts: dcxCmtsServiceEntry.setStatus('current')
if mibBuilder.loadTexts: dcxCmtsServiceEntry.setDescription('The table augments the D1.0 docsIfCmtsServiceTable with downstream variables.')
dcxCmtsServiceOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 1, 2, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcxCmtsServiceOutOctets.setStatus('current')
if mibBuilder.loadTexts: dcxCmtsServiceOutOctets.setDescription('The total number of bytes transmitted downstream for this SID')
dcxCmtsServiceOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 1, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcxCmtsServiceOutPackets.setStatus('current')
if mibBuilder.loadTexts: dcxCmtsServiceOutPackets.setDescription('The total number of packets transmitted downstream for this SID')
cdxCmtsServiceUpBWExcessReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 1, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdxCmtsServiceUpBWExcessReqs.setStatus('current')
if mibBuilder.loadTexts: cdxCmtsServiceUpBWExcessReqs.setDescription("The number of upstream requests which have exceeded the\n                     maximum upstream bandwidth allowed for this SID, and have\n                     beenn rejected by the scheduler's rate limiting.")
cdxCmtsServiceDownBWExcessPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 1, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdxCmtsServiceDownBWExcessPkts.setStatus('current')
if mibBuilder.loadTexts: cdxCmtsServiceDownBWExcessPkts.setDescription("The number of downstream packets that have been dropped \n                     by the DS policer as a result of exceeding the service's \n                     rate limit.")
mibBuilder.exportSymbols("ARRIS-C3-STATS-MIB", dcxUsStatsAccessDenied=dcxUsStatsAccessDenied, cmtsC3StatsMIB=cmtsC3StatsMIB, dcxUsStatsIfIndex=dcxUsStatsIfIndex, dcxUsStatsRngComplete=dcxUsStatsRngComplete, cdxCmtsServiceUpBWExcessReqs=cdxCmtsServiceUpBWExcessReqs, dcxCmtsServiceEntry=dcxCmtsServiceEntry, dcxCmtsServiceStatsObjects=dcxCmtsServiceStatsObjects, dcxUsStatsOther=dcxUsStatsOther, dcxUsStatsRngAborted=dcxUsStatsRngAborted, dcxCmtsServiceOutPackets=dcxCmtsServiceOutPackets, dcxCmtsServiceTable=dcxCmtsServiceTable, dcxCmtsServiceOutOctets=dcxCmtsServiceOutOctets, dcxUpstreamStatsObjects=dcxUpstreamStatsObjects, cdxCmtsServiceDownBWExcessPkts=cdxCmtsServiceDownBWExcessPkts, dcxUsStatsRanging=dcxUsStatsRanging, dcxUpstreamStatsEntry=dcxUpstreamStatsEntry, dcxUsStatsRegComplete=dcxUsStatsRegComplete, dcxUpstreamStatsTable=dcxUpstreamStatsTable, PYSNMP_MODULE_ID=cmtsC3StatsMIB, dcxUsStatsIpComplete=dcxUsStatsIpComplete)
