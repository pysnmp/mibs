#
# PySNMP MIB module ARRIS-C3-STATS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/arris/ARRIS-C3-STATS-MIB
# Produced by pysmi-1.1.12 at Mon Jul  1 10:51:22 2024
# On host fv-az665-510 platform Linux version 6.5.0-1022-azure by user runner
# Using Python version 3.10.14 (main, Jun 20 2024, 15:20:03) [GCC 11.4.0]
#
cmtsC3, = mibBuilder.importSymbols("ARRIS-MIB", "cmtsC3")
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint")
docsIfCmtsServiceEntry, = mibBuilder.importSymbols("DOCS-IF-MIB", "docsIfCmtsServiceEntry")
InterfaceIndexOrZero, ifIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero", "ifIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibIdentifier, IpAddress, Unsigned32, iso, Bits, TimeTicks, Gauge32, ObjectIdentity, NotificationType, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, enterprises, ModuleIdentity, Integer32, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "IpAddress", "Unsigned32", "iso", "Bits", "TimeTicks", "Gauge32", "ObjectIdentity", "NotificationType", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "enterprises", "ModuleIdentity", "Integer32", "Counter64")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
cmtsC3StatsMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 1))
if mibBuilder.loadTexts: cmtsC3StatsMIB.setLastUpdated('200308200000Z')
if mibBuilder.loadTexts: cmtsC3StatsMIB.setOrganization('Arris International')
if mibBuilder.loadTexts: cmtsC3StatsMIB.setContactInfo('   Network Management\n                Postal: Arris International.\n                        4400 Cork Airport Business Park\n                        Cork Airport, Kinsale Road\n                        Cork, Ireland.\n                Tel:    +353 21 7305 800\n                Fax:    +353 21 4321 972')
if mibBuilder.loadTexts: cmtsC3StatsMIB.setDescription('This MIB manages proprietary statistics on the Arris CMTS C3')
dcxUpstreamStatsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 1, 1))
dcxUpstreamStatsTable = MibTable((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 1, 1, 1), )
if mibBuilder.loadTexts: dcxUpstreamStatsTable.setStatus('current')
if mibBuilder.loadTexts: dcxUpstreamStatsTable.setDescription('.')
dcxUpstreamStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 1, 1, 1, 1), ).setIndexNames((0, "ARRIS-C3-STATS-MIB", "dcxUsStatsIfIndex"))
if mibBuilder.loadTexts: dcxUpstreamStatsEntry.setStatus('current')
if mibBuilder.loadTexts: dcxUpstreamStatsEntry.setDescription('Counts the modems on each upstream by state. The states are as defined\n                     by the DOCS-IF-MIB variable docsIfCmtsCmStatusValue')
dcxUsStatsOther = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 1, 1, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcxUsStatsOther.setStatus('current')
if mibBuilder.loadTexts: dcxUsStatsOther.setDescription('Number of modems on this upstream in state docsIfCmtsCmStatusValue_other')
dcxUsStatsRanging = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 1, 1, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcxUsStatsRanging.setStatus('current')
if mibBuilder.loadTexts: dcxUsStatsRanging.setDescription('Number of modems on this upstream in state docsIfCmtsCmStatusValue_ranging')
dcxUsStatsRngAborted = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 1, 1, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcxUsStatsRngAborted.setStatus('current')
if mibBuilder.loadTexts: dcxUsStatsRngAborted.setDescription('Number of modems on this upstream in state docsIfCmtsCmStatusValue_rangingAborted')
dcxUsStatsRngComplete = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 1, 1, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcxUsStatsRngComplete.setStatus('current')
if mibBuilder.loadTexts: dcxUsStatsRngComplete.setDescription('Number of modems on this upstream in state docsIfCmtsCmStatusValue_rangingComplete')
dcxUsStatsIpComplete = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 1, 1, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcxUsStatsIpComplete.setStatus('current')
if mibBuilder.loadTexts: dcxUsStatsIpComplete.setDescription('Number of modems on this upstream in state docsIfCmtsCmStatusValue_ipComplete')
dcxUsStatsRegComplete = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 1, 1, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcxUsStatsRegComplete.setStatus('current')
if mibBuilder.loadTexts: dcxUsStatsRegComplete.setDescription('Number of modems on this upstream in state docsIfCmtsCmStatusValue_registrationComplete')
dcxUsStatsAccessDenied = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 1, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcxUsStatsAccessDenied.setStatus('current')
if mibBuilder.loadTexts: dcxUsStatsAccessDenied.setDescription('Number of modems on this upstream in state docsIfCmtsCmStatusValue_accessDenied')
dcxUsStatsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 1, 1, 1, 1, 8), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcxUsStatsIfIndex.setStatus('current')
if mibBuilder.loadTexts: dcxUsStatsIfIndex.setDescription('ifIndex of the upstream interface corresponding to this row')
dcxCmtsServiceStatsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 1, 2))
dcxCmtsServiceTable = MibTable((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 1, 2, 1), )
if mibBuilder.loadTexts: dcxCmtsServiceTable.setStatus('current')
if mibBuilder.loadTexts: dcxCmtsServiceTable.setDescription('The table augments the D1.0 docsIfCmtsServiceTable with downstream variables.')
dcxCmtsServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 1, 2, 1, 1), )
docsIfCmtsServiceEntry.registerAugmentions(("ARRIS-C3-STATS-MIB", "dcxCmtsServiceEntry"))
dcxCmtsServiceEntry.setIndexNames(*docsIfCmtsServiceEntry.getIndexNames())
if mibBuilder.loadTexts: dcxCmtsServiceEntry.setStatus('current')
if mibBuilder.loadTexts: dcxCmtsServiceEntry.setDescription('The table augments the D1.0 docsIfCmtsServiceTable with downstream variables.')
dcxCmtsServiceOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 1, 2, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcxCmtsServiceOutOctets.setStatus('current')
if mibBuilder.loadTexts: dcxCmtsServiceOutOctets.setDescription('The total number of bytes transmitted downstream for this SID')
dcxCmtsServiceOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 1, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcxCmtsServiceOutPackets.setStatus('current')
if mibBuilder.loadTexts: dcxCmtsServiceOutPackets.setDescription('The total number of packets transmitted downstream for this SID')
cdxCmtsServiceUpBWExcessReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 1, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdxCmtsServiceUpBWExcessReqs.setStatus('current')
if mibBuilder.loadTexts: cdxCmtsServiceUpBWExcessReqs.setDescription("The number of upstream requests which have exceeded the\n                     maximum upstream bandwidth allowed for this SID, and have\n                     beenn rejected by the scheduler's rate limiting.")
cdxCmtsServiceDownBWExcessPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 1, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdxCmtsServiceDownBWExcessPkts.setStatus('current')
if mibBuilder.loadTexts: cdxCmtsServiceDownBWExcessPkts.setDescription("The number of downstream packets that have been dropped \n                     by the DS policer as a result of exceeding the service's \n                     rate limit.")
mibBuilder.exportSymbols("ARRIS-C3-STATS-MIB", dcxUpstreamStatsObjects=dcxUpstreamStatsObjects, dcxUpstreamStatsEntry=dcxUpstreamStatsEntry, dcxUsStatsIfIndex=dcxUsStatsIfIndex, dcxUsStatsRngComplete=dcxUsStatsRngComplete, dcxCmtsServiceOutOctets=dcxCmtsServiceOutOctets, cdxCmtsServiceUpBWExcessReqs=cdxCmtsServiceUpBWExcessReqs, dcxUsStatsOther=dcxUsStatsOther, cdxCmtsServiceDownBWExcessPkts=cdxCmtsServiceDownBWExcessPkts, dcxCmtsServiceStatsObjects=dcxCmtsServiceStatsObjects, dcxUsStatsRegComplete=dcxUsStatsRegComplete, dcxCmtsServiceTable=dcxCmtsServiceTable, dcxUsStatsIpComplete=dcxUsStatsIpComplete, cmtsC3StatsMIB=cmtsC3StatsMIB, dcxUsStatsRngAborted=dcxUsStatsRngAborted, dcxCmtsServiceEntry=dcxCmtsServiceEntry, dcxCmtsServiceOutPackets=dcxCmtsServiceOutPackets, dcxUpstreamStatsTable=dcxUpstreamStatsTable, dcxUsStatsAccessDenied=dcxUsStatsAccessDenied, PYSNMP_MODULE_ID=cmtsC3StatsMIB, dcxUsStatsRanging=dcxUsStatsRanging)
